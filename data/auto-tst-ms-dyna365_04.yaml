- en: The Testability Framework
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可测试性框架
- en: With Dynamics NAV 2009 Service Pack 1, Microsoft introduced the testability
    framework in the platform. This enabled developers to build test scripts in C/AL
    to run so-called **headless tests**; that is, tests that do not use the **user
    interface** (**UI**) to execute business logic. It was a follow-up on an internal
    tool called the **NAV Test Framework** (**NTF**) and had been used and worked
    on for a couple of years already. It allowed tests to be programmed in C# and
    ran against the Dynamics NAV UI. It was a neat system, with a neat technical concept
    behind it. However, this *running test against the UI* was one of the major reasons
    for leaving NTF behind. I seem to recall that it was the major reason because
    accessing business logic through the UI is slow – too slow. Too slow to allow
    the Microsoft Dynamics NAV development team to run all their tests against the
    various versions in a reasonable time. Nowadays, Microsoft is supporting five
    major versions (NAV 2015, NAV 2016, NAV 2017, NAV 2018, and Business Central)
    for 20 countries, and each of these country versions is being built and tested
    at least once a day. Any delay in the tests has a huge impact on the build of
    these 100 versions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Dynamics NAV 2009 Service Pack 1 中，微软在平台中引入了可测试性框架。这使得开发人员能够使用 C/AL 编写测试脚本，运行所谓的**无头测试**；即不使用**用户界面**（**UI**）来执行业务逻辑的测试。这是对一个名为**NAV测试框架**（**NTF**）的内部工具的跟进，已经使用并开发了几年。它允许用
    C# 编写测试，并针对 Dynamics NAV UI 进行测试。这是一个非常精巧的系统，背后有着精巧的技术概念。然而，*通过UI运行测试*是放弃NTF的主要原因之一。我似乎记得，主要原因是通过UI访问业务逻辑太慢——太慢了。太慢了，以至于无法让微软Dynamics
    NAV开发团队在合理的时间内运行所有版本的测试。如今，微软支持五个主要版本（NAV 2015、NAV 2016、NAV 2017、NAV 2018 和 Business
    Central），并且每个国家版本每天至少会构建和测试一次。测试的任何延迟都会对这100个版本的构建产生巨大影响。
- en: 'In this chapter, we will have a look at what I call the five pillars of the
    testability framework. The five technical features that make up this framework
    are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨我所称的可测试性框架的五个支柱。这五个构成该框架的技术特性如下：
- en: Test codeunits and test functions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试代码单元和测试函数
- en: asserterror
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 断言错误
- en: Handler functions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理函数
- en: Test runner and test isolation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试运行器和测试隔离
- en: Test pages
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试页面
- en: The five pillars of the testability framework
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试可测试性框架的五个支柱
- en: In the following five sections, each *pillar* will be discussed and illustrated
    with a simple code example. Feel free to try them out yourself. But, of course,
    being a hands-on book, we will get to a lot of more relevant examples later on.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的五个部分中，每个*支柱*将被讨论，并通过一个简单的代码示例进行说明。你可以随时亲自尝试。不过，作为一本实践性很强的书，我们稍后将会有更多相关的例子。
- en: The code examples can be found on GitHub at [https://github.com/PacktPublishing/Automated-Testing-in-Microsoft-Dynamics-365-Business-Central](https://github.com/PacktPublishing/Automated-Testing-in-Microsoft-Dynamics-365-Business-Central).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 代码示例可以在 GitHub 上找到，链接是：[https://github.com/PacktPublishing/Automated-Testing-in-Microsoft-Dynamics-365-Business-Central](https://github.com/PacktPublishing/Automated-Testing-in-Microsoft-Dynamics-365-Business-Central)。
- en: Details on how to use this repository and how to set up VS Code are discussed
    in [Appendix B](bbbc6672-5043-422a-b54e-a09df933c909.xhtml), *Setting Up VS Code
    and Using the GitHub Project*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何使用这个仓库以及如何设置 VS Code 的详细信息，请参阅[附录B](bbbc6672-5043-422a-b54e-a09df933c909.xhtml)，*设置
    VS Code 并使用 GitHub 项目*。
- en: Pillar 1 – Test codeunits and test functions
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支柱 1 – 测试代码单元和测试函数
- en: 'Goal: Understand what test codeunits and test functions are and learn how to
    build and apply them.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 目标：了解什么是测试代码单元和测试函数，并学习如何构建和应用它们。
- en: The foremost important pillar of the testability framework is the concept of
    test codeunits and test functions.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 可测试性框架最重要的支柱是测试代码单元和测试函数的概念。
- en: Test codeunits
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试代码单元
- en: 'A test codeunit is defined by its `Subtype`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 测试代码单元通过其`Subtype`来定义：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This makes it different from a standard codeunit in a couple of ways:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这与标准的代码单元有几方面不同：
- en: It can contain the so-called test and handler functions next to the normal functions
    we are used to when writing app code
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以包含所谓的测试和处理函数，以及我们在编写应用程序代码时通常使用的常规函数。
- en: 'When executing a test codeunit, the platform will do the following:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行测试代码单元时，平台将执行以下操作：
- en: Run the `OnRun` trigger and each test function that resides in the test codeunit,
    from top to bottom
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行`OnRun`触发器以及每个测试函数，该函数位于测试代码单元中，从上到下执行
- en: Record the result of each test function
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录每个测试函数的结果
- en: Test functions
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试函数
- en: 'A `Test` function is defined by the `FunctionType` tag:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`Test` 函数由 `FunctionType` 标签定义：'
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This makes it different from a standard function:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得它与标准函数不同：
- en: It has to be global
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它必须是全局的
- en: It cannot have arguments
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不能有参数
- en: It yields a result, which is either `SUCCESS` or `FAILURE`
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它会返回一个结果，结果是 `SUCCESS` 或 `FAILURE`
- en: 'When `SUCCESS` is returned by a test, it means that no error occurred in the
    execution of the test. Consequently, when `FAILURE` is returned, the test execution
    did throw an error. This error could be due to various reasons, such as the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `SUCCESS` 被返回时，意味着测试执行过程中没有发生错误。因此，当 `FAILURE` 被返回时，测试执行确实发生了错误。此错误可能由多种原因引起，例如以下情况：
- en: Code execution hitting a `TestField`, `FieldError`, or `Error` call
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码执行触发了 `TestField`、`FieldError` 或 `Error` 调用
- en: Data modifications not being fulfilled because of version conflicts, primary
    key conflicts, or locks
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于版本冲突、主键冲突或锁定，数据修改未能完成
- en: The latter, a `Test` function returning `FAILURE`, brings us to another typicality
    of a test codeunit—when a test fails, the execution of a test codeunit doesn't
    halt. It continues to execute the next `Test` function.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 后者，返回 `FAILURE` 的 `Test` 函数，将我们带到了测试代码单元的另一个典型特征——当一个测试失败时，测试代码单元的执行并不会停止。它会继续执行下一个
    `Test` 函数。
- en: 'Let''s build two simple tests, one returning `SUCCESS` and the other `FAILURE`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建两个简单的测试，一个返回 `SUCCESS`，另一个返回 `FAILURE`：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now you can run them.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以运行它们了。
- en: 'As test functions are executed from top to bottom, the message thrown by `MyFirstTestFunction`
    will show the following screenshot first:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 由于测试函数是从上到下执行的，`MyFirstTestFunction` 抛出的消息将首先显示以下截图：
- en: '![](img/a0cb76f6-d505-4b6b-9384-9545f370c454.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a0cb76f6-d505-4b6b-9384-9545f370c454.png)'
- en: 'After that, the following message is shown, being a resume message of the execution
    of the whole test codeunit:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，显示以下消息，作为整个测试代码单元执行的总结消息：
- en: '![](img/44828026-ff61-45fe-a743-0fb375a16aa2.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44828026-ff61-45fe-a743-0fb375a16aa2.png)'
- en: Note that the error did not appear like a message box, but is collected by the
    platform and recorded as part of the result of the failing test.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，错误并未以消息框的形式出现，而是被平台收集并记录为失败测试结果的一部分。
- en: 'To be able to run the test codeunit, I built a simple page, `MyTestsExecutor`,
    with an action calling `MyFirstTestCodeunit`:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够运行测试代码单元，我构建了一个简单的页面 `MyTestsExecutor`，其操作调用 `MyFirstTestCodeunit`：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you are following me using the code on GitHub and have a hard time opening
    the `MyTestsExecutor` page, use any of the following options:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你跟随我使用 GitHub 上的代码并且在打开 `MyTestsExecutor` 页面时遇到困难，可以使用以下任何一种方法：
- en: Set `startupObjectType` to `Page` and `startupObjectId` to `60000` in the `launch.json`
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `launch.json` 中将 `startupObjectType` 设置为 `Page`，将 `startupObjectId` 设置为 `60000`
- en: 'Add `?page=6000` to the web client URL in the address bar of your browser:
    `http://localhost:8080/BC130/?page=6000`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在浏览器的地址栏中将 `?page=6000` 添加到 web 客户端 URL 中：`http://localhost:8080/BC130/?page=6000`
- en: Use *Alt* + *Q*, Tell me what you want, in the web client and search for `My
    Test Executor`
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 web 客户端中使用 *Alt* + *Q*，告诉我你想要什么，并搜索 `My Test Executor`
- en: Launch the page directly from the VS Code, making use of a VS Code AL extension
    such as CRS AL Language Extension
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接从 VS Code 启动页面，利用像 CRS AL 语言扩展这样的 VS Code AL 扩展
- en: Pillar 2 – asserterror
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支柱 2 – `asserterror`
- en: 'Goal: Understand what the `asserterror` keyword means and learn how to apply
    it.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 目标：理解 `asserterror` 关键字的含义，并学习如何应用它。
- en: 'A substantial part of the business logic we implement specifies conditions
    under which a user action or a process should fail or stop to continue its execution.
    Testing the circumstances that lead to this failure are as important as testing
    the successful conclusion of an action or process. The second pillar allows us
    to write tests that are focused on checking whether errors do occur; a so called
    **positive-negative** or **rainy** **path** test. For example, that posting errors
    out because a posting date has not been provided, or that, indeed, a negative
    line discount percentage cannot be entered on a sales order line. To achieve this,
    the `asserterror` keyword should be applied in front of the `calling statement`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实施的大部分业务逻辑都指定了在某些条件下，用户操作或流程应该失败或停止继续执行。测试导致失败的情况与测试成功完成操作或流程同样重要。第二支柱允许我们编写测试，专注于检查是否发生错误；这是一种所谓的
    **正向-负向** 或 **雨天** **路径** 测试。例如，由于未提供过账日期，过账错误，或确实无法在销售订单行上输入负数折扣百分比。为了实现这一点，`asserterror`
    关键字应该应用于 `调用语句` 之前：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s use it in a new codeunit and run it:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在一个新的代码单元中使用它并运行：
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `MyPostiveNegativeTestFunction` function is reported as a `SUCCESS`, and,
    consequently, no error message is recorded:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`MyPostiveNegativeTestFunction`函数被报告为`SUCCESS`，因此没有记录错误信息：'
- en: '![](img/8b890c00-bb2a-4180-8e61-f48b5087bc1f.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8b890c00-bb2a-4180-8e61-f48b5087bc1f.png)'
- en: 'If the `calling statement` following the `asserterror` keyword throws an error,
    the system will continue executing the following statements. However, if the `calling
    statement` does not throw an error, the `asserterror` statement will cause one:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`asserterror`关键字后面的`calling statement`抛出错误，系统将继续执行后续语句。然而，如果`calling statement`没有抛出错误，`asserterror`语句将会抛出错误：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Where `asserterror` enables the test to continue with the next statement, it
    will not check the error as such. As we will see later, it is up to you to verify
    whether the expected did occur or not. If there is no verification on the specific
    error following the `asserterror`, any error will make your test pass.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，`asserterror`使得测试可以继续执行下一条语句，它不会检查错误本身。正如我们稍后所看到的，是否发生了预期的结果由你来验证。如果在`asserterror`后没有验证特定的错误，任何错误都会导致测试通过。
- en: If a successful positive-negative test does not report the error, this does
    not mean that the error did not occur. It is thrown, and, therefore, when a write
    transaction was performed, a rollback will happen. Any data modifications will
    disappear.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功的正负测试没有报告错误，这并不意味着错误没有发生。错误已经抛出，因此，当执行写入事务时，将会发生回滚。所有数据修改将会消失。
- en: Pillar 3 – handler functions
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支柱3 – 处理器函数
- en: 'Goal: Understand what handler functions are and learn how to build and apply
    them.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 目标：了解什么是处理器函数，并学习如何构建和应用它们。
- en: In our first test codeunit example, the `Message` statement results in the display
    of a message box. Unless we want to wait until a user presses the OK button, this
    message box stays there forever, halting the full execution of our test run. In
    order to be able to have a fully automated test run, we need a way to deal with
    any user interactions, such as a message box, a confirm dialog, a report request
    page, or a modal page.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的第一个测试代码单元示例中，`Message`语句会导致显示一个消息框。除非我们希望等待用户按下确认按钮，否则该消息框将一直存在，阻止我们的测试完全执行。为了能够进行完全自动化的测试，我们需要一种处理用户交互（如消息框、确认对话框、报告请求页面或模态页面）的方法。
- en: For this, handler functions, also known as **UI handlers**, have been conceived.
    Handler functions are a special type of function that can only be created in test
    codeunits, and aim at handling UI interactions that exist in the code under test.
    Handler functions enable us to fully automate tests without the need of a real
    user to interact with them. As soon as specific UI interactions occur, and a handler
    has been provided for it, the platform takes care of calling the handler as a
    substitute for real user interactions.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，已设计了处理器函数，也称为**UI处理器**。处理器函数是一种特殊类型的函数，只能在测试代码单元中创建，旨在处理代码中待测试的UI交互。处理器函数使我们能够完全自动化测试，而不需要真实用户进行交互。一旦发生特定的UI交互，并且为其提供了处理器，平台将自动调用该处理器，代替真实用户交互。
- en: '`Test` function handler functions are defined by the `FunctionType` tag. The
    currently available values are shown in the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`Test`函数处理器由`FunctionType`标签定义。目前可用的值显示在下面的截图中：'
- en: '![](img/9bda944f-078a-4348-a466-46e6002c987e.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9bda944f-078a-4348-a466-46e6002c987e.png)'
- en: 'Each handler function addresses a different type of user interaction object
    and needs different parameters to let it interact adequately with the platform.
    Let VS Code and the AL extension be your guide in finding the right signature
    for a handler function. The following screenshot shows you the signature of a `MessageHandler`
    when you hover over the function name:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 每个处理器函数处理不同类型的用户交互对象，并需要不同的参数以便能与平台进行适当的交互。让VS Code和AL扩展成为你找到处理器函数正确签名的指南。以下截图展示了当你将鼠标悬停在函数名上时，`MessageHandler`的签名：
- en: '![](img/129e2d04-46fd-45a4-8936-fdcbb82a1390.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/129e2d04-46fd-45a4-8936-fdcbb82a1390.png)'
- en: In case of a `MessageHandler` function, the signature is the text the message
    box would show to the user. Handing over this text to the `MessageHandler` enables
    you to determine if the right message was triggered.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`MessageHandler`函数，签名是消息框显示给用户的文本。将该文本传递给`MessageHandler`使你能够确定是否触发了正确的消息。
- en: For a listing of the signature of each handler type, go to [https://docs.microsoft.com/en-us/dynamics-nav/how-to--create-handler-functions](https://docs.microsoft.com/en-us/dynamics-nav/how-to--create-handler-functions).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 关于每种处理程序类型的签名列表，请访问[https://docs.microsoft.com/en-us/dynamics-nav/how-to--create-handler-functions](https://docs.microsoft.com/en-us/dynamics-nav/how-to--create-handler-functions)。
- en: 'So, to get the `Message` statement handled automatically in our first test
    codeunit, we should create a `MessageHandler` function:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，为了自动处理我们第一个测试代码单元中的`Message`语句，我们应该创建一个`MessageHandler`函数：
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'But this is only half of the job, as this handler needs to be linked to the
    test that will execute the code calling `Message` one way or another. The `HandlerFunctions`
    tag is used to do this. Each handler function needs to be called in a `Test` function
    and must be added to the `HandlerFunctions` tag as text. If multiple handlers
    are needed, these will make up a comma separated string:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 但这只是工作的一半，因为这个处理程序需要与将执行调用`Message`的测试关联起来，某种方式或另一种方式。`HandlerFunctions`标签用来完成这一点。每个处理程序函数都需要在`Test`函数中调用，并且必须作为文本添加到`HandlerFunctions`标签中。如果需要多个处理程序，这些处理程序将组成一个以逗号分隔的字符串：
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s apply this to `MyFirstTestFunction` in a new codeunit and run it:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将此应用于新代码单元中的`MyFirstTestFunction`并运行它：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Instantly, rather than showing a message box first, the resume message of the
    execution of the whole test codeunit is shown:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 即时显示，而不是先显示消息框，整个测试代码单元执行的简要信息会直接展示：
- en: '![](img/8099a4c4-28b9-42cf-9382-55a173fe6ef1.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8099a4c4-28b9-42cf-9382-55a173fe6ef1.png)'
- en: 'Any handler function you add to the `HandlerFunctions` tag must be called at
    least one time in the `Test` function. If the handler is not called upon, because
    the user interactions it should handle don''t happen, an error will be thrown
    by the platform, saying: *The following UI handlers were not executed*, listing
    the handlers not called upon.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你添加到`HandlerFunctions`标签中的任何处理程序函数，必须至少在`Test`函数中被调用一次。如果该处理程序没有被调用，因为它应处理的用户交互没有发生，平台将抛出一个错误，提示：*以下UI处理程序未执行*，并列出未被调用的处理程序。
- en: Pillar 4 – Test runner and test isolation
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支柱 4 – 测试运行器和测试隔离
- en: 'Goal: Understand what a test runner and its test isolation are and learn how
    to use and apply them.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 目标：理解什么是测试运行器及其测试隔离，并学习如何使用和应用它们。
- en: 'Given the previous three pillars, we are positioned to write test cases as
    follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于前面的三个支柱，我们可以按照以下方式编写测试用例：
- en: Using **test codeunit** and **test functions**
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**测试代码单元**和**测试函数**
- en: Either *sunny* or *rainy path*, the latter by applying the `asserterror` keyword
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无论是*晴天*路径还是*雨天*路径，后者通过应用`asserterror`关键字
- en: With fully automated execution addressing any user interactions by applying
    **handler functions**
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过应用**处理程序函数**，实现完全自动化的执行，解决任何用户交互
- en: Do we need more?
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要更多内容吗？
- en: 'As a matter of fact, yes, we do, as we need a way to do the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，确实需要，因为我们需要一种方式来执行以下操作：
- en: Run tests stored in multiple codeunits, control their execution, and collect
    and secure the results
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行存储在多个代码单元中的测试，控制它们的执行，收集并确保结果
- en: 'Run tests in isolation, so that we can achieve the following:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在隔离环境中运行测试，以便我们能够实现以下目标：
- en: Write transactions, in the end, do not alter the database we run the test on
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写事务，最终不修改我们运行测试的数据库
- en: Each rerun of a test is done using the same data setup
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次重新运行测试时，都会使用相同的数据设置
- en: 'Both goals can be accomplished using a so-called `TestRunner` codeunit with
    a certain test isolation. A test runner codeunit is defined by its `Subtype` and
    the isolation by its `TestIsolation`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个目标可以通过使用所谓的`TestRunner`代码单元以及特定的测试隔离来完成。测试运行器代码单元由其`Subtype`定义，隔离由其`TestIsolation`定义：
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Test runner
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试运行器
- en: 'Like any other codeunit, a test runner codeunit can have a `OnRun` trigger
    and normal user-defined functions, but, in addition to that, you can also add
    two test runner-specific triggers called `OnBeforeTestRun` and `OnAfterTestRun`.
    When test codeunits are called from the `OnRun` trigger of a test runner, `OnBeforeTestRun`
    and `OnAfterTestRun` will be triggered by the system as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 像其他代码单元一样，测试运行器代码单元可以有一个`OnRun`触发器和正常的用户定义函数，但除了这些，你还可以添加两个特定于测试运行器的触发器，分别是`OnBeforeTestRun`和`OnAfterTestRun`。当从测试运行器的`OnRun`触发器调用测试代码单元时，`OnBeforeTestRun`和`OnAfterTestRun`将由系统如下触发：
- en: '`OnBeforeTestRun`: This is triggered before the test codeunit is called, the
    test codeunit `OnRun` trigger is executed, and each of its test functions is run'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnBeforeTestRun`：这是在调用测试代码单元之前触发的，测试代码单元的`OnRun`触发器被执行，并且每个测试函数也会运行'
- en: '`OnAfterTestRun`: This is triggered after each test function has run and the
    test codeunit finishes'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnAfterTestRun`：此触发器在每个测试函数运行完并且测试代码单元完成后触发。'
- en: Use the `OnBeforeTestRun` trigger to perform a test run pre-initialization and
    control the execution of a whole test codeunit and individual test functions.
    The latter can be achieved by using the Boolean return value of the `OnBeforeTestRun`
    trigger. Returning `TRUE`, the test codeunit or test function runs. Returning
    `FALSE`, it is skipped.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`OnBeforeTestRun`触发器来执行测试运行前初始化，并控制整个测试代码单元和单个测试函数的执行。后者可以通过使用`OnBeforeTestRun`触发器的布尔返回值来实现。返回`TRUE`时，测试代码单元或测试函数将运行；返回`FALSE`时，则跳过。
- en: Use the `OnAfterTestRun` trigger to perform post-processing, such as logging
    the result of each test. When the `OnAfterTestRun` trigger is run, the standard
    result message box, as we have seen so far, is not shown.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`OnAfterTestRun`触发器执行后处理操作，例如记录每个测试的结果。当`OnAfterTestRun`触发器运行时，我们到目前为止看到的标准结果消息框将不会显示。
- en: Both `OnBeforeTestRun` and `OnAfterTestRun` are run in their own database transaction.
    This means that changes made to the database with each of these triggers are committed
    once their execution finishes.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnBeforeTestRun`和`OnAfterTestRun`都在它们各自的数据库事务中运行。这意味着通过每个触发器对数据库所做的更改将在执行完成后提交。'
- en: 'Further reading can be found as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步的阅读可以在以下链接找到：
- en: '`OnBeforeTestRun`: [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/triggers/devenv-trigger-onbeforetestrun](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/triggers/devenv-trigger-onbeforetestrun)
    [](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/triggers/devenv-trigger-onbeforetestrun)
    [`OnAfterTestRun`: ](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/triggers/devenv-trigger-onbeforetestrun)[https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/triggers/devenv-trigger-onaftertestrun](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/triggers/devenv-trigger-onaftertestrun)'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnBeforeTestRun`：[https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/triggers/devenv-trigger-onbeforetestrun](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/triggers/devenv-trigger-onbeforetestrun)
    [](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/triggers/devenv-trigger-onbeforetestrun)
    [`OnAfterTestRun`：](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/triggers/devenv-trigger-onbeforetestrun)[https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/triggers/devenv-trigger-onaftertestrun](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/triggers/devenv-trigger-onaftertestrun)'
- en: Test isolation
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试隔离
- en: 'With a test runner enabling us to control the execution of all tests in one
    run, we also need to have control of the data created in one test codeunit, so
    that it will not influence the results of the tests in the next test codeunit.
    For this, the test codeunit `TestIsolation` property has been introduced, and
    it has three possible values:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一个测试运行器使我们能够控制所有测试的执行，我们还需要控制在一个测试代码单元中创建的数据，以免影响下一个测试代码单元中的测试结果。为此，引入了测试代码单元的`TestIsolation`属性，该属性有三个可能的值：
- en: '`Disabled`: When selecting this value, or not setting the `TestIsolation` property
    explicitly, as this is the default value, any database transaction will be effectuated;
    after the execution of tests triggered by the test runner, the database will have
    changed compared to before running the test runner'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Disabled`：选择此值时，或者未显式设置`TestIsolation`属性时（因为这是默认值），任何数据库事务将被执行；在测试运行器触发的测试执行后，数据库将发生变化，和运行测试前相比。'
- en: '`Codeunit`: When selecting this value, after a test codeunit execution has
    completed fully, all data changes made to the database will be reverted/rolled
    back'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Codeunit`：选择此值时，当测试代码单元执行完成后，所有对数据库所做的数据更改将被还原/回滚。'
- en: '`Function`: When selecting this value, when a single test function has completed,
    all data changes made to the database will be reverted/rolled back'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Function`：选择此值时，当单个测试函数完成后，所有对数据库所做的数据更改将被还原/回滚。'
- en: 'Related to this, it makes sense to share a couple of thoughts on running tests
    and their isolation:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 与此相关，分享一些关于运行测试及其隔离性的想法是有意义的：
- en: Test isolation applies to database transactions, but does not apply to changes
    made outside of the database, and to variables, including temporary tables
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试隔离适用于数据库事务，但不适用于数据库外部的更改以及包括临时表在内的变量。
- en: With test isolation, `Codeunit`, or `Function`, **all** data changes will be
    rolled back, even if they were explicitly committed using the AL `Commit` statement
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用测试隔离、`Codeunit`或`Function`时，**所有**数据更改将被回滚，即使它们已经通过 AL `Commit`语句显式提交。
- en: Running test codeunits outside of the test isolation, either `Codeunit` or `Function` of
    a test runner will effectuate any database transaction
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在测试隔离之外运行测试代码单元，无论是`Codeunit`还是`Function`的测试运行器都会执行任何数据库事务。
- en: Using test isolation, `Function` will give extra overhead compared to `Codeunit`,
    resulting in longer execution time, as with the ending of each test function,
    the database changes have to be reverted
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用测试隔离时，`Function`将比`Codeunit`带来额外的开销，导致执行时间更长，因为每个测试函数结束时，数据库的更改必须被回滚。
- en: Setting the test isolation to `Function` might be unwanted, as it fully disables
    dependencies between test functions, which might be needed when, for an extended
    test scenario, intermediate results should be reported, and this has been achieved
    by a series of individual, but interdependent, test functions
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将测试隔离设置为`Function`可能不合适，因为它完全禁用了测试函数之间的依赖关系，而这些依赖关系在扩展的测试场景中可能是需要的，尤其是当中间结果需要被报告时，这可以通过一系列相互独立但相互依赖的测试函数来实现。
- en: With the `TestIsolation` property of a test runner, we have control over how
    to revert data changes in a generic way; as we will later see, the test function
    `TransactionModel` tag allows us to have control of the transaction behavior of
    individual test functions
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用测试运行器的`TestIsolation`属性，我们可以以通用方式控制如何回滚数据更改；正如我们稍后会看到的，测试函数`TransactionModel`标签允许我们控制单个测试函数的事务行为。
- en: Pillar 5 – Test pages
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支柱5 – 测试页面
- en: 'Goal: Understand what test pages are and learn how to apply them when testing
    the UI.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 目标：了解什么是测试页面，并学习如何在测试 UI 时应用它们。
- en: The initial trigger for adding the testability framework to the platform was
    to get away from testing the business logic through the UI. The testability framework
    enabled headless, and thus faster, testing of the business logic. And this is
    how the testability framework was implemented in NAV 2009 SP1\. Pure headless
    testing. It included everything of the four pillars discussed so far, even though
    test isolation was implemented in a different way than it is today. It was previously
    not possible to test the UI.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 添加可测试性框架到平台的初衷是避免通过 UI 测试业务逻辑。可测试性框架使得无头测试（从而更快的测试）业务逻辑成为可能。这就是测试可用性框架在 NAV
    2009 SP1 中的实现方式：纯无头测试。它包括了迄今为止讨论的四个支柱的所有内容，尽管测试隔离的实现方式与今天有所不同。此前无法测试 UI。
- en: 'Moving ahead, it became clear that sole headless tests excluded too much. How
    could we test business logic that typically resides on pages? For example, consider
    a product configurator in which options are displayed or hidden depending on values
    entered by the user. So, with NAV 2013, Microsoft added the fifth pillar to the
    testability framework: test pages.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 随着进展，逐渐清楚仅使用无头测试排除了太多内容。我们如何测试通常存在于页面上的业务逻辑呢？例如，考虑一个产品配置器，其中根据用户输入的值显示或隐藏选项。因此，在
    NAV 2013 中，微软为可测试性框架添加了第五个支柱：测试页面。
- en: 'A test page is a logical representation of a page and is strictly handled in
    memory displaying no UI. To define a test page, you need to declare a variable
    of the `TestPage` type:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 测试页面是页面的逻辑表示形式，严格处理在内存中，不显示 UI。要定义测试页面，你需要声明一个`TestPage`类型的变量：
- en: '[PRE11]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: A `TestPage` variable can be based on any page existing in the solution.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`TestPage`变量可以基于解决方案中存在的任何页面。'
- en: 'A test page allows you to mimic a user carrying out the following actions:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 测试页面允许你模拟用户执行以下操作：
- en: Accessing the page
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问页面
- en: Accessing its sub parts
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问其子部分
- en: Reading and changing data on it
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在其上读取和更改数据
- en: Performing actions on it
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对其进行操作
- en: 'You can achieve this by using the various methods that belong to the test page
    object. Let''s build a small codeunit in which we use a couple of them:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用属于测试页面对象的各种方法来实现这一点。让我们构建一个小的代码单元，在其中使用其中的一些方法：
- en: '[PRE12]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note that errors are forced to get some useful feedback on the resume message
    of the test codeunit.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，强制出现错误以便获取一些关于测试代码单元的简历消息中的有用反馈。
- en: 'So, we get the following as a result:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们得到了以下结果：
- en: '![](img/246fde13-01da-46b8-9cf3-fce9152c621f.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/246fde13-01da-46b8-9cf3-fce9152c621f.png)'
- en: 'For a complete listing of all test page methods, you can access the following
    URLs:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看所有测试页面方法的完整列表，可以访问以下网址：
- en: '**TestPage**: [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/testpage/testpage-data-type](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/testpage/testpage-data-type)
    [](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/testpage/testpage-data-type)
    **TestField**: [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/testfield/testfield-data-type](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/testfield/testfield-data-type)
    [](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/testfield/testfield-data-type)
    **TestAction**: [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/testaction/testaction-data-type](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/testaction/testaction-data-type)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**TestPage**: [https://docs.microsoft.com/zh-cn/dynamics365/business-central/dev-itpro/developer/methods-auto/testpage/testpage-data-type](https://docs.microsoft.com/zh-cn/dynamics365/business-central/dev-itpro/developer/methods-auto/testpage/testpage-data-type)
    [](https://docs.microsoft.com/zh-cn/dynamics365/business-central/dev-itpro/developer/methods-auto/testpage/testpage-data-type)
    **TestField**: [https://docs.microsoft.com/zh-cn/dynamics365/business-central/dev-itpro/developer/methods-auto/testfield/testfield-data-type](https://docs.microsoft.com/zh-cn/dynamics365/business-central/dev-itpro/developer/methods-auto/testfield/testfield-data-type)
    [](https://docs.microsoft.com/zh-cn/dynamics365/business-central/dev-itpro/developer/methods-auto/testfield/testfield-data-type)
    **TestAction**: [https://docs.microsoft.com/zh-cn/dynamics365/business-central/dev-itpro/developer/methods-auto/testaction/testaction-data-type](https://docs.microsoft.com/zh-cn/dynamics365/business-central/dev-itpro/developer/methods-auto/testaction/testaction-data-type)'
- en: 'If you are running Microsoft 365 Business Central on-premises and you want
    to run tests using test pages, be sure that you have the Page Testability module
    installed:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在本地运行 Microsoft 365 Business Central，并且希望使用测试页面进行测试，请确保已安装页面可测试性模块：
- en: '![](img/7de95738-6260-43a2-9a51-7492fe41e2e1.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7de95738-6260-43a2-9a51-7492fe41e2e1.png)'
- en: Summary
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we discussed what the testability framework is by describing
    the five pillars it entails: the basic elements test codeunits and test functions,
    the new code keyword `asserterror`, handler functions to allow automatic handling
    of UI elements, the test runner to enable us to run tests in isolation, and, finally,
    test pages to build tests to check the behavior of pages.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了测试框架是什么，描述了它包含的五个支柱：基本元素测试代码单元和测试函数、新的代码关键字`asserterror`、允许自动处理 UI 元素的处理函数、使我们能够隔离运行测试的测试运行器，最后是构建测试以检查页面行为的测试页面。
- en: In [Chapter 3](fdf2b65f-be7c-4710-a3a9-39f4cc34ee5c.xhtml), *The Test Tool and
    Standard Tests*, you will learn about the test tool that resides in Business Central
    and the set of standard tests being released by Microsoft with the product.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 3 章](fdf2b65f-be7c-4710-a3a9-39f4cc34ee5c.xhtml)，*测试工具和标准测试*中，你将了解 Business
    Central 中的测试工具，以及 Microsoft 随产品发布的标准测试集。
