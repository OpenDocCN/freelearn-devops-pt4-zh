- en: Test Design
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试设计
- en: Having had a look at the testability framework, the Test Tool, and the standard
    tests and libraries, I have shown you what is available in the platform and the
    application that will allow you to create and execute automated tests. And that's
    what we are going to do in this part of this book. But let's step back and not
    just bluntly dive into creating code. Firstly, I would like to introduce a couple
    of concepts and design patterns that will allow you to conceive your tests more
    effectively and efficiently. At the same time, these concepts will make your tests
    not just a technical exercise and will help you to get your entire team involved.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看了可测试性框架、测试工具、标准测试和库之后，我已经向你展示了平台和应用程序中可用的内容，允许你创建和执行自动化测试。这就是我们在本书这一部分要做的事情。但是，让我们退后一步，不要急于跳入代码编写。首先，我想介绍几个概念和设计模式，这些将帮助你更有效、更高效地构思你的测试。同时，这些概念将使你的测试不仅仅是技术性的练习，还将帮助你让整个团队参与进来。
- en: I am surely not going to bother you with formal test documentation and the top-down
    approach with eight defined stages, from test plan, through test design/case specification
    to test summary report. That's way out of the scope of this book and, not in the
    least, beyond the daily practices of most Dynamics 365 Business Central implementations.
    Nevertheless, a couple of thoughts on design spent upfront will give you leverage
    in your work.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我当然不会让你烦恼正式的测试文档和从上到下的八个阶段方法，从测试计划，到测试设计/用例规范，再到测试总结报告。这些远远超出了本书的范围，并且无论如何，这些也超出了大多数Dynamics
    365 Business Central实施的日常实践。然而，事先花一些时间考虑设计，将为你的工作带来杠杆效应。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: No design, no test
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有设计，就没有测试
- en: Test case design patterns
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试用例设计模式
- en: Test data design patterns
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试数据设计模式
- en: Customer wish as test design
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户需求作为测试设计
- en: If I have been overloading you with information and you want to get your hands
    on coding, you might want to jump to the next chapters. There, we will be exercising
    all of the things discussed so far and later in this chapter. However, if you
    find out you are missing background details, come back to this chapter and get
    yourself informed.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我已经让你信息量过大，而你想直接开始编写代码，你可以跳到下一章。在那里，我们将练习到目前为止讨论的所有内容，以及本章后面内容。然而，如果你发现自己缺少背景信息，可以回到这一章，补充了解。
- en: No design, no test
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 没有设计，就没有测试
- en: '**Goal: Understand why tests should be conceived before they are coded and
    executed.**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标：理解为什么测试应该在编写和执行之前就被构思出来。**'
- en: I guess I am not far off saying that most of the application testing done in
    our world falls under the term of exploratory testing. Manual testing is done
    by experienced resources that know the application under test and have a good
    understanding and feeling of how to *break the thing*. But this with no explicit
    design and no reproducible, shareable, and reusable scripts. Now, in this world,
    we typically don't want developers to test their own code as they, consciously
    or unconsciously, know how to use the software and evade issues. Their mindset
    is *how to make it* (work), not *how to break it*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我想我说得并不过分，大多数我们世界中的应用测试都可以归类为探索性测试。手动测试由经验丰富的测试人员进行，他们了解被测应用，并且有很好的理解和直觉，知道如何*击破它*。但是，这些测试没有明确的设计，也没有可重复、可共享、可重用的脚本。在这个世界里，我们通常不希望开发人员测试自己的代码，因为他们无论是有意还是无意，都知道如何使用软件并规避问题。他们的思维方式是*如何让它*（工作），而不是*如何击破它*。
- en: But with automated tests, it will be developers that will code them. And more
    often than not, it will be the same developer that did the application coding.
    So, they need a design of what tests to code. Tests that will cover a broad set
    of scenarios. Sunny and rainy ones. Headless and UI tests. And what about unit
    and functional tests?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，对于自动化测试，编写代码的将是开发人员。而且，往往是同一个开发人员负责应用程序的编码。所以，他们需要一个测试设计，设计出要编写的测试。这些测试将覆盖广泛的场景，包括晴天和雨天的场景，头less和UI测试。那单元测试和功能测试呢？
- en: In my humble opinion, the test design, like any other deliverable, is owned
    by the team. It is a joint effort to agree upon the test design. It's an agreement
    between the product owner, tester, developer, functional consultant, and key user.
    And if there is *no design*, there will be *no test*. A test design is an object
    to help the team to discuss their test effort, to reveal the holes in their thoughts,
    and to let it mature while working on it. And as will be discussed as follows,
    it is a possible way of putting your requirements down that allows your team to
    efficiently get from requirements to test and application code.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 依我拙见，测试设计和其他交付物一样，是团队共同拥有的成果。它是一个团队合作的结果，大家共同达成一致的测试设计。这是产品负责人、测试人员、开发人员、功能顾问和关键用户之间的协议。如果*没有设计*，就*没有测试*。测试设计是一个帮助团队讨论测试工作、揭示思维漏洞并在工作中不断完善的工具。正如接下来所讨论的，它是一种将需求转化为测试和应用代码的有效方式。
- en: 'A fully-fledged test design would describe the various kinds of tests that
    should be executed such as performance, application, and security; the conditions
    under which they must be performed; and the criteria that make them successful.
    Our test design will only address application tests, as that is the focus of this
    book: how to create application test automation. Once our test design holds a
    complete set of test cases, they need to be detailed out and that''s what the
    next section is about.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的测试设计将描述应该执行的各种测试，如性能测试、应用测试和安全性测试；它们执行的条件；以及评判测试成功的标准。我们的测试设计将仅涉及应用测试，因为这是本书的重点：如何创建应用测试自动化。一旦我们的测试设计包含了完整的测试用例集，这些用例需要被详细描述，而这正是下一部分的内容。
- en: 'If you want to learn more about formal test documentation, this Wikipedia article
    could be a first stepping stone: [https://en.wikipedia.org/wiki/Software_test_documentation](https://en.wikipedia.org/wiki/Software_test_documentation).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于正式测试文档的内容，以下的维基百科文章可能是一个起点：[https://en.wikipedia.org/wiki/Software_test_documentation](https://en.wikipedia.org/wiki/Software_test_documentation)。
- en: Understanding test case design patterns
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解测试用例设计模式
- en: '**Goal: Learn the basic patterns for designing tests.**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标：学习设计测试的基本模式。**'
- en: If you have been testing software, you might know that each test has a similar
    overall structure. Before you can perform the action under test, for example,
    the posting of a document, first, the data needs to be *set up*. Then, the action
    will be *exercised*. And finally, the result of the action has to be *verified*.
    In some cases, a fourth phase applies, a so-called *teardown*, which is used to
    revert the system under test to its previous state.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有过软件测试的经验，可能知道每个测试都有类似的整体结构。在你执行测试操作之前，例如文档的过账，首先需要对数据进行*设置*。然后，进行操作的测试将被*执行*。最后，需要对操作的结果进行*验证*。在某些情况下，还会有第四个阶段，所谓的*拆解*，用于将待测试系统恢复到其之前的状态。
- en: 'The four phasesof a test case design pattern are listed as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 测试用例设计模式的四个阶段如下所示：
- en: Set up
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置
- en: Exercise
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 练习
- en: Verify
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证
- en: Teardown
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拆解
- en: 'For a short and clear description of the four-phase design pattern, please
    refer to the following link:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 关于四阶段设计模式的简短清晰描述，请参考以下链接：
- en: '[http://robots.thoughtbot.com/four-phase-test](http://robots.thoughtbot.com/four-phase-test)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://robots.thoughtbot.com/four-phase-test](http://robots.thoughtbot.com/four-phase-test)'
- en: 'This design pattern was typically the pattern used by Microsoft in the early
    years of C/SIDE test coding. Like the following test function example, taken from
    codeunit 137295 - `SCM Inventory Misc. III`, you will encounter it in a vast number
    of older test codeunits:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这种设计模式通常是微软在C/SIDE测试编码初期使用的模式。比如以下这个测试功能示例，摘自代码单元137295 - `SCM库存杂项 III`，你将在大量旧的测试代码单元中遇到这种模式：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Acceptance Test-Driven Development
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验收测试驱动开发
- en: 'Nowadays, Microsoft uses the **Acceptance Test-Driven Development** (**ATDD**)design
    pattern. This is a more complete structure and closer to the customer as tests
    are described from the user''s perspective. The pattern is defined by the following
    so-called tags:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，微软使用**验收测试驱动开发**（**ATDD**）设计模式。这是一个更完整的结构，并且更贴近客户，因为测试是从用户的角度来描述的。该模式通过以下所谓的标签来定义：
- en: '`FEATURE`: Defines what feature(s) the test or collection of test cases is
    testing'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FEATURE`：定义测试或测试用例集合正在测试的特性'
- en: '`SCENARIO`: Defines for a single test the scenario being tested'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SCENARIO`：为单个测试定义所测试的场景'
- en: '`GIVEN`: Defines what data setup is needed; a test case can have multiple `GIVEN`
    tags when data setup is more complex'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GIVEN`：定义需要哪些数据设置；当数据设置更复杂时，一个测试用例可以有多个`GIVEN`标签'
- en: '`WHEN`: Defines the action under test; each test case should have only one
    `WHEN` tag'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WHEN`：定义测试中的动作；每个测试用例应仅有一个`WHEN`标签'
- en: '`THEN`: Defines the result of the action, or more specifically the verification
    of the result; if multiple results apply, multiple `THEN` tags will be needed'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THEN`：定义动作的结果，或者更具体地说，定义结果的验证；如果适用多个结果，需要多个`THEN`标签'
- en: 'The following test example, taken from test codeunit 134141 - `ERM Bank Reconciliation`
    displays an ATDD design pattern-based test:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下测试示例，取自测试代码单元134141 - `ERM银行对账`，展示了基于ATDD设计模式的测试：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Before any test coding is done, the test case design should already have been
    conceived. In the case of the preceding example, this is what would have been
    handed off to the developer before writing the test code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行任何测试编码之前，测试用例设计应该已经构思好。在前面的例子中，这些内容应该在编写测试代码之前就交给开发人员：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A note on test verification
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试验证说明
- en: 'In my workshops, it is mainly developers that participate. For them, when working
    on test automation, one of the hurdles to take is the verification part. It makes
    perfect sense to all of them that data setup, the `GIVEN` part, has to be accounted
    for, not to mention the action under test in the `WHEN` part. The `THEN` part,
    however, is something easily neglected, especially if their assignment is to come
    up with the `GIVEN`-`WHEN`-`THEN` design themselves. Some might ask: why should
    I need verification if the code executes successfully?'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的研讨会中，主要是开发人员参与。对于他们来说，在进行测试自动化时，必须克服的一个障碍就是验证部分。对于他们来说，数据设置（`GIVEN`部分）必须考虑到，更不用说在`WHEN`部分的测试动作了。然而，`THEN`部分是一个容易被忽视的环节，尤其是当他们需要自己设计`GIVEN`-`WHEN`-`THEN`时。有些人可能会问：如果代码成功执行，我为什么还需要验证呢？
- en: 'Because you need to check if:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你需要检查：
- en: The data created is the right data, that is, the expected data
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建的数据是正确的数据，也就是预期数据
- en: The error thrown, in case of a positive-negative test, is the expected error
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在正负测试的情况下抛出的错误是预期错误
- en: The confirm handled is indeed the expected confirm
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确认处理的是预期的确认
- en: 'Sufficient verification will make sure your tests will stand the test of time.
    You might want to put the next phrase as a poster on the wall:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 充分的验证将确保你的测试经得起时间的考验。你可能想将下一句话作为海报挂在墙上：
- en: A test without verification is no test at all!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 没有验证的测试根本不算测试！
- en: You may add a bunch of exclamation marks.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会添加一些感叹号。
- en: You might have noticed that the ATDD design pattern has no equivalent of the
    teardown phase in the four-phase test design patterns. As mentioned, ATDD is user-oriented
    and the teardown is a more technical exercise. But of course, if needed, a teardown
    section should be coded at the end of a test.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能注意到，ATDD设计模式没有四阶段测试设计模式中的清理阶段。正如前面提到的，ATDD是以用户为导向的，而清理阶段更多是技术性的操作。当然，如果需要，清理部分应该在测试结束时编写。
- en: 'For more information on ATDD you can go to the following links:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有关ATDD的更多信息，可以访问以下链接：
- en: '[https://en.wikipedia.org/wiki/Acceptance_test%E2%80%93driven_development](https://en.wikipedia.org/wiki/Acceptance_test%E2%80%93driven_development)
    or [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/devenv-extension-advanced-example-test#describing-your-tests](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/devenv-extension-advanced-example-test#describing-your-tests).'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Acceptance_test%E2%80%93driven_development](https://en.wikipedia.org/wiki/Acceptance_test%E2%80%93driven_development)
    或者 [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/devenv-extension-advanced-example-test#describing-your-tests](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/devenv-extension-advanced-example-test#describing-your-tests).'
- en: Understanding test data setup design patterns
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解测试数据设置设计模式
- en: '**Goal: Learn the basic patterns for setting up test data.**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标：学习设置测试数据的基本模式。**'
- en: 'When you carry out your manual tests, you know that most of the time is consumed
    by setting up the right data. Being a real IT pro, you will think up ways of doing
    this as efficiently as possible. You might have thought of making sure of the
    following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当你进行手动测试时，你会发现大部分时间都消耗在了设置正确的数据上。作为一个真正的IT专家，你会想出尽可能高效的方式来完成这一点。你可能已经考虑过确保以下几点：
- en: A basic setup of data is available, which will be the foundation for all of
    the tests you are going to execute
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供了基本的数据设置，这将成为你即将执行的所有测试的基础。
- en: For each feature under test, additional test data exists upfront
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每个待测试的功能，额外的测试数据预先存在
- en: Test specific data will be created on the fly
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试特定数据将即时创建
- en: 'This way you created yourself a number of patterns that help you efficiently
    get your test data setup done. These are what we call **test data setup** design
    patterns, or **fixture** or **test fixture** design patterns, and each has its
    own name:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，你为自己创建了一些模式，帮助你高效地完成测试数据的设置。这些就是我们所称的**测试数据设置**设计模式，或者**夹具**或**测试夹具**设计模式，每种模式都有其特定的名称：
- en: The first one is what we call a **prebuilt fixture**. This is test data that
    is created before any of the tests are run. In the context of Dynamics 365 Business
    Central, this will be a prepared database, such as `CRONUS`, the demo company
    that Microsoft provides.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个是我们所称的**预构建夹具**。这是在任何测试运行之前创建的测试数据。在 Dynamics 365 Business Central 的上下文中，这将是一个准备好的数据库，比如
    Microsoft 提供的演示公司`CRONUS`。
- en: The second pattern is known as **shared fixture**, or lazy setup. This concerns
    the setup of data shared by a group of tests. In our Dynamics 365 Business Central
    context, this concerns generic master data, supplemental data, and setup data,
    such as customer and currency data and a rounding precision, all needed to run
    a group of tests.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个模式被称为**共享夹具**，或懒惰设置。这涉及到由一组测试共享的数据设置。在我们的 Dynamics 365 Business Central 环境中，这涉及到通用的主数据、补充数据和设置数据，比如客户和货币数据以及四舍五入精度，所有这些数据都是运行一组测试所必需的。
- en: The third and last pattern is **fresh fixture**, or fresh setup. This entails
    data particularly needed for a single test, such as an empty location, a specific
    sales price, or a document to be posted.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个也是最后一个模式是**新鲜夹具**，或新鲜设置。这涉及到单个测试特别需要的数据，比如一个空的位置、特定的销售价格或待发布的文档。
- en: 'When automating tests, we will make use of these patterns for the following
    reasons:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在自动化测试中，我们将使用这些模式，原因如下：
- en: '**Efficient test execution**: Even though an automated test seems to run at
    the speed of light, building up a test collateral over the years will increase
    the total execution time, which might easily run into hours; the shorter the automated
    test run will be, the more it will be used'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高效的测试执行**：尽管自动化测试看起来似乎是光速执行，但随着时间的推移，建立测试资料的累积将增加总执行时间，这可能轻易地达到几个小时；自动化测试的运行时间越短，它就越能被频繁使用。'
- en: '**Effective data setup**: When designing test cases, it is straight away clear
    what data will be needed and at what stage; this will speed up the coding of the
    tests'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有效的数据设置**：在设计测试用例时，数据需求和所需的阶段一目了然；这将加速测试编码的速度。'
- en: 'Read more on fixture patterns here:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里阅读更多关于夹具模式的内容：
- en: '[http://xunitpatterns.com/Fixture Setup Patterns.html](http://xunitpatterns.com/Fixture%20Setup%20Patterns.html)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://xunitpatterns.com/Fixture Setup Patterns.html](http://xunitpatterns.com/Fixture%20Setup%20Patterns.html)'
- en: Note that there is much more to formalize in the test data setup. In our test
    coding in the next chapters, we will utilize a couple more of the patterns mentioned.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，测试数据设置还有很多内容需要形式化。在接下来的章节中，我们的测试编码将使用更多前面提到的模式。
- en: Test fixture, data agnostics, and prebuilt fixture
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试夹具、数据不可知和预构建夹具
- en: 'As stated in the introductory chapter, automated tests are *reproducible*,
    *fast*, and *objective*. They are reproducible in their execution as the code
    is always the same. But this does not guarantee whether the outcome is reproducible.
    If each time a test is run, the input to the test, that is, the data setup, is
    different, then presumably the output of the test will also be different. The
    following three things help to ensure your tests are reproducible:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如引言章节所述，自动化测试是*可重现的*、*快速的*和*客观的*。它们在执行时是可重现的，因为代码总是相同的。但这并不保证结果是可重现的。如果每次运行测试时，测试的输入——即数据设置——不同，那么测试的输出很可能也会不同。以下三点有助于确保你的测试是可重现的：
- en: Make a test run on the same fixture
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使一个测试在相同的夹具上运行
- en: Make a test follow the same code execution path
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使一个测试遵循相同的代码执行路径
- en: Make a test verify the outcome based on the same and sufficient set of criteria
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使一个测试根据相同且充分的标准集来验证结果
- en: To have full control on the fixture, it is highly preferable to let your automated
    tests create the data they need anew, with each run. In other words, do not rely
    on the data present in the system before tests are run. Automated tests should
    be agnostic of any data residing in the system under test. Consequently, running
    your tests in Dynamics 365 Business Central should not rely on the data present
    in the database, be it `CRONUS`, your own demo data, or customer-specific data.
    Yes, you might need customer specific data to reproduce a reported issue, but
    once fixed and the test automation is updated, it should be able to run data agnostically.
    Because of this, we will not use the prebuilt fixture pattern in any of our tests.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了对夹具进行全面控制，强烈建议让你的自动化测试每次运行时都重新创建所需的数据。换句话说，不要依赖于测试运行前系统中已经存在的数据。自动化测试应该对被测系统中存在的任何数据保持独立。因此，在
    Dynamics 365 Business Central 中运行测试不应依赖数据库中现有的数据，无论是`CRONUS`、你自己的演示数据，还是客户特定的数据。是的，你可能需要客户特定的数据来重现已报告的问题，但一旦修复，并且测试自动化得到了更新，它应该能够实现数据独立性地运行。因此，在我们的任何测试中，我们都不会使用预构建的夹具模式。
- en: If you've ever run the standard tests, you might have noticed that quite a number
    of them are not data agnostic. They highly rely on the data present in `CRONUS`.
    You might also have noticed that this applies to the older tests. At present, standard
    tests strive to be data agnostic.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经运行过标准测试，你可能注意到其中有相当一部分测试并非数据独立的。它们高度依赖于`CRONUS`中的数据。你也可能注意到，这种情况适用于较旧的测试。目前，标准测试力求实现数据独立性。
- en: Test fixture and test isolation
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试夹具和测试隔离
- en: To start each set of tests with the same fixture, we will take advantage of
    the test isolation feature of the test runner codeunit, as discussed in [Chapter
    2](1e679d13-4037-48e2-b8ae-f550f507f8c9.xhtml), *The Testability Framework*, in
    the *Pillar 4 - test runner and test isolation* section. Using the test isolation
    value codeunit of the standard test runner and putting a coherent set of tests
    in one test codeunit, a generic *teardown* for the whole test codeunit is set.
    It will assure that, at the termination of each test codeunit, the fixture is
    reverted to its initial state. If the test runner utilizes the *Function* test
    isolation, it would add a generic teardown to each test function.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使每组测试都使用相同的夹具，我们将利用测试运行器代码单元的测试隔离功能，正如在[第2章](1e679d13-4037-48e2-b8ae-f550f507f8c9.xhtml)的*可测试性框架*部分中讨论的那样，*支柱4
    - 测试运行器与测试隔离*部分所述。通过使用标准测试运行器的测试隔离值代码单元，并将一组连贯的测试放入同一个测试代码单元中，为整个测试代码单元设置一个通用的*清理*操作。这将确保在每个测试代码单元终止时，夹具被恢复到初始状态。如果测试运行器使用*函数*级别的测试隔离，它将在每个测试函数中添加一个通用的清理操作。
- en: Shared fixture implementation
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 共享夹具实现
- en: 'You might have observed in the two Microsoft test functions used as examples
    for the four-phase and ATDD patterns that each test starts with a call to a function
    named `Initialize`, right after the scenario description. `Initialize` contains
    the standard implementation of the shared fixture pattern (next to a generic fresh
    fixture pattern we will elaborate on) as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经观察到，在作为四阶段和 ATDD 模式示例使用的两个 Microsoft 测试函数中，每个测试都在场景描述后开始调用一个名为`Initialize`的函数。`Initialize`包含了共享夹具模式的标准实现（接下来我们将详细介绍的通用新夹具模式），其实现如下：
- en: '[PRE3]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When calling `Initialize` at the start of each test function in the same test
    codeunit, the lazy setup part will just be executed once, since only with the
    first call to `Initialize` will the Boolean variable be `false`. Note that `Initialize`
    also incorporates three hooks, that is event publishers, to allow extending `Initialize`
    by linking subscriber functions to it:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当在同一个测试代码单元中的每个测试函数开始时调用`Initialize`时，懒加载设置部分只会执行一次，因为只有在第一次调用`Initialize`时，布尔变量才会是`false`。请注意，`Initialize`还包含三个钩子，即事件发布者，以便通过将订阅者函数链接到它来扩展`Initialize`：
- en: '`OnTestInitialize`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnTestInitialize`'
- en: '`OnBeforeTestSuiteInitialize`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnBeforeTestSuiteInitialize`'
- en: '`OnAfterTestSuiteInitialize`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnAfterTestSuiteInitialize`'
- en: In [Chapter 9](1e679d13-4037-48e2-b8ae-f550f507f8c9.xhtml), *Getting Business
    Central Standard Tests Working on Your Code*, we will specifically make use of
    these publishers.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第9章](1e679d13-4037-48e2-b8ae-f550f507f8c9.xhtml)，*让 Business Central 标准测试在你的代码上工作*，我们将特别利用这些发布者。
- en: The lazy setup part of `Initialize` is what xUnit patterns call SuiteFixture
    setup.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`Initialize`中的懒加载设置部分就是xUnit模式中所称的SuiteFixture设置。'
- en: Fresh fixture implementation
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新的夹具实现
- en: A fresh fixture can be (partly) set up in a generic way as per the implementation
    in the `Initialize` function as discussed previously. This is for data that needs
    to be created or cleaned out at the start of each test. A fresh setup specifically
    needed for one test only is what is to be found inline in the test function that
    implements the test, defined by the `GIVEN` tags.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 根据先前讨论的，可以在`Initialize`函数中设置通用的新装置（部分）。这是需要在每个测试开始时创建或清理的数据。特定于一个测试的新设置，即由`GIVEN`标签定义的实施测试函数中的内联设置。
- en: The generic fresh setup part of `Initialize` is what xUnit patterns call Implicit
    Setup. The test specific fresh setup is called inline setup.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`Initialize`中的通用新设置部分是xUnit模式称为隐式设置的一部分。测试特定的新设置称为内联设置。'
- en: Using customer wish as test design
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以客户的期望作为测试设计
- en: '**Goal: Learn why to describe requirements in the form of a test design.**'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标：了解为什么要以测试设计的形式描述需求。**'
- en: A past ideal of development was a staged one, where each phase would finish
    before the next started. Just like a waterfall, with water flowing from one level
    to the other. From requirements gathering to analyses, to design, coding, testing,
    and finally, operation and maintenance, each phase would have its deadlines, and
    documented deliverables handed off to the next phase. One of the major drawbacks
    of this system is its responsiveness to changing insights, resulting in changing
    requirements. Another is the significant overhead of documents produced. In the
    recent decade or two, agile methodologies have become a general practice for tackling
    these drawbacks.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 过去的发展理念是阶段性的，每个阶段都会在下一个开始之前完成。就像瀑布一样，水从一个水平流向另一个水平。从需求收集到分析，再到设计、编码、测试，最后到运行和维护，每个阶段都有其截止日期，并且文档化的可交付成果会移交给下一个阶段。这种系统的一个主要缺点是对变化洞见的响应不足，导致需求的变动。另一个问题是产生的大量文档带来的显著开销。在最近的十年或两十年里，敏捷方法已经成为应对这些缺点的一般实践。
- en: Introducing a test design, an extra document, to your development practice is
    maybe not what you have been waiting for, even though I can guarantee that your
    development practices will get leveraged. But what if your test design could be
    a kind of unified document? Being the input for each discipline in your project?
    The same truth shared at each level? *What if you could kill five birds with one
    stone*? If you could write your requirements in one format as input for all implementation
    tasks?
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 引入测试设计，作为你开发实践的额外文档，也许不是你一直在等待的，尽管我可以保证，你的开发实践会得到提升。但如果你的测试设计可以成为一种统一的文档呢？成为项目中每个学科的输入？每个层次共享同一真相？*如果你可以一石五鸟*？如果你可以以一种格式编写你的需求，作为所有实施任务的输入？
- en: 'It''s a common practice to define your requirements as user stories or use
    cases. But I personally think a major omission of both is that they tend to only
    define the sunny path and have no explicit description of the rainy scenarios.
    How should your feature behave under non-typical input? How should it error out?
    As mentioned before, this is where a tester''s mind deviates from a developer''s
    mind: how to make it break versus how to make it work. This would definitely be
    part of a test design. So, why not promote the test design to become the requirements.
    Or inside-out: write your requirements like a test design using the ATDD pattern.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 将需求定义为用户故事或用例是一种常见做法。但我个人认为它们的一个主要缺失是它们往往只定义了晴天路径，没有明确描述阴雨天的情景。在非典型输入下，你的功能应该如何表现？它应该如何报错？正如前面提到的，这是测试人员思维与开发者思维的分歧之处：如何使其出错而不是如何使其工作。这绝对是测试设计的一部分。那么，为什么不将测试设计提升为需求呢？或者从内而外：使用ATDD模式编写你的需求，就像编写测试设计一样。
- en: 'This is what we are trying at my main employer now. This is what I am advocating
    in my workshops and what implementation partners are picking up. Break down each
    wish and each feature into a list of tests like the following, and make this our
    primary vehicle of communication:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们现在在我的主要雇主那里尝试的。这就是我在我的研讨会中提倡的，以及实施合作伙伴正在接受的。将每个愿望和每个功能拆分成像下面这样的测试列表，并将其作为我们的主要沟通工具：
- en: Detailing of your **customer wish**
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 详细说明你的**客户期望**
- en: Implementation of your **application code**
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实施你的**应用程序代码**
- en: Structured execution of your **manual tests**
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结构化执行你的**手动测试**
- en: Coding of your **test automation**
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写你的**测试自动化**
- en: Up-to-date **documentation** of your solution
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新你解决方案的**文档**
- en: Through this, your test automation will be a logical result of previous work.
    New insights, resulting in requirement updates, will be reflected in this list
    and accordingly in your test automation. Whereas your current requirement documentation
    might not always be in sync with the latest version of the implementation, they
    will be, when promoting your test design to requirements, as your automated tests
    will have to reflect the latest version of your app code. In this manner, your
    test automation is your up-to-date documentation. Killing five birds with one
    stone, indeed.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，你的测试自动化将是前期工作的逻辑结果。新的洞见和需求更新将反映在这个列表中，并相应地体现在你的测试自动化中。虽然你当前的需求文档可能未必总是与实现的最新版本保持同步，但当你将测试设计推向需求时，它们会同步更新，因为你的自动化测试必须反映最新版本的应用程序代码。这样一来，你的测试自动化就是你最新的文档。真是一举多得。
- en: 'As we will be doing in the next chapters, we will specify our requirements
    as a test design, initially at the feature and scenario level, using the `FEATURE`
    and `SCENARIO` tags. Then, this will be followed by a detailed specification using
    the `GIVEN`, `WHEN`, and `THEN` tags. Have a peek preview of how this looks in
    the following example, being one scenario for the `LookupValue` extensions that
    we are going to work on in the next chapters:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在接下来的章节中将要做的那样，我们将把需求指定为测试设计，最初在功能和场景级别，使用`FEATURE`和`SCENARIO`标签。接着，将使用`GIVEN`、`WHEN`和`THEN`标签进行详细的规范。在接下来的例子中，先来看看它是如何展示的，这是一个关于我们将在下一个章节中处理的`LookupValue`扩展的场景：
- en: '[PRE4]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The full ATDD test design is stored as an Excel sheet `LookupValue` on GitHub.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的ATDD测试设计作为Excel表格`LookupValue`存储在GitHub上。
- en: Summary
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Test automation will profit from a structured approach and, for this, we introduced
    a set of concepts and test patterns, such as the ATDD pattern and test fixture
    patterns.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 测试自动化将从结构化的方法中获益，为此，我们引入了一套概念和测试模式，如ATDD模式和测试夹具模式。
- en: Now, in the next chapter, [Chapter 5](56634efe-664c-421a-9582-b2a6ae69722a.xhtml), *From
    Customer Wish to Test Automation – The Basics*, we will utilize these patterns
    to finally implement test code.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在下一章节，[第5章](56634efe-664c-421a-9582-b2a6ae69722a.xhtml)，*从客户需求到测试自动化——基础篇*，我们将利用这些模式，最终实现测试代码。
