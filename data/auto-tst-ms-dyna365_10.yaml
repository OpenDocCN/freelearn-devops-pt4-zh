- en: From Customer Wish to Test Automation - And Some More
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从客户需求到测试自动化——以及更多
- en: 'Getting the hang of it by now? Well, you did get this far, right? Let''s do
    another *one for the road*, or actually two. We''ll supplement your tool box with
    a last duo of test tools for Microsoft Dynamics 365 Business Central. In this
    chapter, we''ll expand on how to:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在掌握了吧？嗯，你已经做到这一步了，对吧？让我们再来一个 *路上的最后一课*，实际上是两个。我们将用最后一对测试工具补充你的工具箱，适用于 Microsoft
    Dynamics 365 Business Central。在这一章中，我们将扩展以下内容：
- en: Test a report
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试报告
- en: Set up a more complex scenario
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置更复杂的场景
- en: Test example 7 – how to test a report
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试示例 7 – 如何测试报告
- en: Reports have always been a substantial part of many Business Central projects
    and solutions. It makes perfect sense to have a look at how to test them in an
    automated manner. Now, how do we go about doing that? In this example, we will
    work out testing the dataset being created by a report. Layout testing is another
    job to do, and one outside of the testability framework.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 报告一直是许多 Business Central 项目和解决方案的重要组成部分。考虑到这一点，了解如何以自动化方式测试它们是非常有意义的。那么，我们该如何进行呢？在这个例子中，我们将演示如何测试由报告创建的数据集。布局测试是另一项工作，属于测试框架之外的任务。
- en: Customer wish
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户需求
- en: 'Our customer''s wish describes that the `Lookup Value Code` field of the customer
    has to be carried over to the various sales documents. The logical consequence,
    even though not explicitly stated, would be that each printed version of these
    documents would have to be extended with this field. Note that at this point in
    time, we cannot extend a standard report. Extending a standard report can now
    only be achieved by cloning it into our extension. As sales document reports are
    quite comprehensive, both on the dataset and on the layout side, we take a simpler
    example. We''ll clone report 101, `Customer - List`, and add the `Lookup Value
    Code` field to it as shown in the next screenshot:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们客户的需求描述了客户的 `Lookup Value Code` 字段必须传递到各类销售单据中。尽管没有明确说明，合乎逻辑的推论是，这些单据的每个打印版本都必须添加此字段。请注意，在此时此刻，我们无法扩展标准报告。扩展标准报告只能通过将其克隆到我们的扩展中来实现。由于销售单据报告在数据集和布局方面都相当复杂，我们采取了一个更简单的例子。我们将克隆报告
    101，`Customer - List`，并将 `Lookup Value Code` 字段添加到其中，如下一个截图所示：
- en: '![](img/a6c851b4-12ce-449a-a9e3-a6655f329107.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6c851b4-12ce-449a-a9e3-a6655f329107.png)'
- en: 'This could be a possible translation into an ATDD test case description:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是 ATDD 测试用例描述的一个翻译：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Why two customers, you might wonder. As the report should be able to list multiple
    customers, it makes sense not to test for just one customer.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么是两个客户呢？你可能会问。因为报告应该能够列出多个客户，因此不只测试一个客户是有意义的。
- en: Application code
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用代码
- en: 'A condensed version of the cloned report on this and next page, shows where
    we have added the `Lookup Value Code` field. The preceding screenshot depicts
    the field placed in the layout:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆报告的简化版本显示了我们在本页及下一页中添加了 `Lookup Value Code` 字段。前面的截图显示了该字段在布局中的位置：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Test code
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试代码
- en: Have a look at our `.al` implementation of scenario `#0029`.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下我们对场景 `#0029` 的 `.al` 实现。
- en: Create, embed, and write
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建、嵌入并编写
- en: 'Create the codeunit, embedding the ATDD scenario, and writing the story will
    result in the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 创建代码单元，嵌入 ATDD 场景并编写故事将产生以下结果：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Construct the real code
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建真实的代码
- en: See, how the helper functions look like.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这些辅助函数是如何呈现的。
- en: '`Initialize` makes sure our report only picks up the two newly created customers
    by deleting all customer records that exist in the database; as the test will
    be run in isolation, this deletion will be reverted:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`Initialize` 确保我们的报告只会选择两个新创建的客户，通过删除数据库中所有现有的客户记录；由于测试将在隔离状态下运行，这一删除操作将在后续被还原：'
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`CreateCustomerWithLookupValue` and `CreateLookupValueCode` are becoming our
    next door neighbors to help us out in almost all of our scenarios:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`CreateCustomerWithLookupValue` 和 `CreateLookupValueCode` 成为我们下一个邻居，几乎可以在所有场景中帮助我们：'
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Testing a report dataset is about browsing its XML structure, therefore, `CommitAndRunReportCustomerList`
    calls `RunReportAndLoad` in codeunit `Library - Report Dataset` (131007) to stream
    the dataset in a temporary `TempBlob` record (table 99008535) to be used in the
    verification part:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 测试报告数据集就是浏览其 XML 结构，因此，`CommitAndRunReportCustomerList` 在代码单元 `Library - Report
    Dataset` (131007) 中调用 `RunReportAndLoad`，将数据流式传输到临时 `TempBlob` 记录（表 99008535）中，以便在验证部分使用：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In `VerifyCustWithLookupValueOnCustListReport`, we see that `FindRow` reads
    the customer number (column `Customer_No_`) and our lookup value (column `Customer_Lookup_Value_Code`)
    and determines their row position:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在`VerifyCustWithLookupValueOnCustListReport`中，我们看到`FindRow`读取客户号（列`Customer_No_`）和我们的查找值（列`Customer_Lookup_Value_Code`），并确定它们的行位置：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'A few notes more:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 再多一些笔记：
- en: Elements in the definition of the report dataset are referred to as *columns*.  In
    the `Library - Report Dataset` codeunit, and thus in the test, for the same the
    term row is used which refers to the row in the xml of the dataset that has been
    generated.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 报表数据集定义中的元素称为*列*。在`Library - Report Dataset`代码单元中，因此在测试中，术语行也被用来指代生成的数据集XML中的行。
- en: Notice that the delta between the rows is verified to be `13`, meaning, referring
    to the previous note, that the column `Customer_Lookup_Value_Code` is the 13th
    column in the dataset after the column `Customer_No_`.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意，行之间的差值被验证为`13`，这意味着，参考前面的注释，列`Customer_Lookup_Value_Code`是数据集中列`Customer_No_`后的第13列。
- en: For valid reasons, you could wonder if this is a relevant check; it will for
    sure error when the row math does not work out right anymore, as we will see later.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 出于合理的理由，您可能会想知道这是否是一个相关的检查；当行数计算不再正确时，它肯定会出错，正如我们稍后将看到的那样。
- en: 'You might have noticed: global variables declaration has been omitted.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可能已经注意到：全局变量声明已被省略。
- en: Test execution
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试执行
- en: 'It''s becoming a habit: green, green, green!'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 它正在成为一种习惯：绿色，绿色，绿色！
- en: '![](img/494128a7-eddb-486c-b419-f4e4a35d61f3.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/494128a7-eddb-486c-b419-f4e4a35d61f3.png)'
- en: Test the test
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试测试
- en: Come on! We control it ourselves. Let's do it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 来吧！我们自己控制它。让我们来做吧。
- en: Adjust the test so the verification errs
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整测试以使验证出错
- en: How about changing…
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 改变一下怎么样…
- en: The hardcoded `13` in `VerifyCustWithLookupValueOnCustListReport` to `56`, or
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`VerifyCustWithLookupValueOnCustListReport`中的硬编码的`13`为`56`，或
- en: Its `LookupValueCode` parameter when being called from the test function
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它的`LookupValueCode`参数在从测试函数调用时
- en: 'These will throw the following errors, respectively:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这些将分别引发以下错误：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The latter might be kind of unexpected, as it doesn't show something comparable
    as before, stating `LUC` as the expected value and so on. Here, our verification
    is done by the `FindRow` method, and as `LUC` is not in the dataset, `FindRow`
    will return `a -1`, and as `Customer_No_` is on Row [3], the math will result
    in `-4`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 后者可能有些意外，因为它不像之前那样显示出可比性，指定`LUC`作为预期值等等。在这里，我们的验证是通过`FindRow`方法完成的，因为在数据集中找不到`LUC`，`FindRow`将返回`-1`，并且由于`Customer_No_`在行[3]上，数学运算将导致`-4`。
- en: Test example 8 – how to construct an extensive scenario
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试示例 8 - 如何构建一个广泛的场景
- en: To achieve your goals as an end-user in Dynamics 365 Business Central, being
    the ERP package it is, you often end up exercising a substantial chain of consecutive
    actions. How do you go about constructing a suite of tests for that? How to create
    reusable parts? And how to make use of already existing helper functions in the
    Microsoft test libraries?
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 作为Dynamics 365 Business Central的终端用户，要实现您的目标，通常需要执行一系列连续动作。如何为此构建测试套件？如何创建可重用部分？以及如何利用Microsoft测试库中已经存在的辅助功能？
- en: To illustrate this, we elaborate on another part of our customer wish.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这一点，我们详细介绍客户愿望的另一部分。
- en: Customer wish
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户愿望
- en: 'In the business logic description of our customer wish it is mentioned that:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们客户愿望的业务逻辑描述中提到：
- en: When creating a warehouse shipment from a sales order, the Lookup Value Code
    field should be inherited from the Sales Header to the Warehouse Shipment Line.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在从销售订单创建仓库发货时，应该从销售头传递Lookup Value Code字段到仓库发货行。
- en: 'This is expressed in the following two scenarios:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这在以下两种情况中表达：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This, however, implies that the `Lookup Value` field already exists on both
    the `Warehouse Shipment Line` and `Posted Whse. Shipment Line` tables, which is
    defined by the following three fundamental scenarios on our list, we have skipped
    so far:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这意味着`Lookup Value`字段已经存在于`Warehouse Shipment Line`和`Posted Whse. Shipment
    Line`表中，这是我们列表中的三个基本场景定义的结果，我们到目前为止跳过了：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As the scenarios are related, it won't be a surprise to find congruous parts.
    It's a message happily notifying us that we will be able to construct reusable
    parts and save time when working out all five scenarios.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 由于场景相关，当我们在制定所有五个场景时，发现一致的部分并不奇怪。这是一条愉快地通知我们，我们将能够构建可重用部分并节省时间的消息。
- en: 'These are the obvious ones:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是显而易见的：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'But you can often find hints inline. Compare the following taken from four
    of the five scenarios:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 但你通常可以在代码中找到提示。比较下面从五个场景中的四个场景提取的内容：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This tells us that, in all these cases, we will need a released sales order
    with a lookup value.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉我们，在所有这些情况下，我们需要一个已发布的销售订单，并带有查找值。
- en: Application code
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用代码
- en: 'On account of scenarios `#0015`, `#00016` and `#0017`, the extension of the
    `Warehouse Shipment Line` and `Posted Whse. Shipment Line` tables and their related
    pages, is implemented with the next code (again in a bare minimum to save space):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 针对场景`#0015`、`#00016`和`#0017`，`Warehouse Shipment Line`和`Posted Whse. Shipment
    Line`表格以及它们相关页面的扩展，通过以下代码实现（为了节省空间，这里仅展示最简代码）：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To enable scenarios `#0030` and `#0031`, the standard application only needs
    to be extended with the following code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启用场景`#0030`和`#0031`，只需用以下代码扩展标准应用程序：
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The subscriber `OnBeforeCreateShptLineFromSalesLineEvent` assures that the value
    of the `Lookup Value Code` field on a sales document is copied to the `Lookup
    Value Code` field on the warehouse shipment line.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 订阅者`OnBeforeCreateShptLineFromSalesLineEvent`确保销售单据上`Lookup Value Code`字段的值被复制到仓库发货单行的`Lookup
    Value Code`字段。
- en: Test code
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试代码
- en: Let's implement the four overlapping scenarios `#0015`, `#0017`, `#0030`, and
    `#0031`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现四个重叠的场景`#0015`、`#0017`、`#0030`和`#0031`。
- en: Create, embed, and write
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建、嵌入和编写
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Construct the real code
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建实际的代码
- en: 'With the code on GitHub, we leave it to you to have a look at the major part
    of the implementation of these tests. Here, however, we''ll study closer scenario
    `#0030`, wherein both the `[GIVEN]` and `[THEN]` parts are shared with the other
    three scenarios. Paraphrasing the question with which we started this last test example,
    the goal here is to show you how:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub上的代码中，我们将留给你查看这些测试的主要实现部分。然而，在这里，我们将更详细地研究场景`#0030`，其中`[GIVEN]`和`[THEN]`部分与其他三个场景共享。回到我们开始这最后一个测试示例时提出的问题，目标是向你展示：
- en: A complex scenario could be build up creating and using reusable parts
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以通过创建和使用可重用的部分来构建一个复杂的场景
- en: To find as much as possible reusable parts in the standard libraries
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在标准库中找到尽可能多的可重用部分
- en: Initialize
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Initialize
- en: 'With `Initialize` being the first reusable that is shared, part of the data
    setup is being handled:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`Initialize`是第一个被共享的可重用部分，部分数据设置已经在处理中了：
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如下：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The structure of `Initialize` by now should look familiar, including the usage
    of the global Boolean variable `isInitialized`, the global `Code[10]` variable
    `LookupValueCode`, and local helper function `CreateLookupValueCode`, and why
    `CreateLookupValueCode` can be part of the lazy setup.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，`Initialize`的结构应该看起来很熟悉，包括使用全局布尔变量`isInitialized`、全局变量`Code[10]`的`LookupValueCode`，以及本地辅助函数`CreateLookupValueCode`，并且解释了为什么`CreateLookupValueCode`可以作为懒加载的一部分。
- en: The creation of a location (with *require shipment*) and a warehouse employee
    can also be embedded in `Initialize` as these can easily be shared between the
    four scenarios. For this, `DefaultLocation` is set up as a global record variable
    (based on the `Location` table). The warehouse employee does not need to be stored
    as it will be retrieved from the database.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如何将创建位置（带有*要求发货*）和仓库员工的过程嵌入到`Initialize`中，因为这两个过程可以在四个场景之间轻松共享。为此，`DefaultLocation`被设置为一个全局记录变量（基于`Location`表）。仓库员工不需要存储，因为它将从数据库中检索。
- en: As you can see, use is made of two helper functions through a library codeunit
    variable `LibraryWarehouse` based on the standard codeunit called `Library - Warehouse`.
    Using the simple and quick file search method as mentioned in [Chapter 3](fdf2b65f-be7c-4710-a3a9-39f4cc34ee5c.xhtml),
    *The Test Tool and Standard Tests*, I hunted for a helper function to create a
    location, search string CreateLocation, and one to create a warehouse employee,
    search string CreateWarehouseEmployee.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，使用了两个辅助函数，通过一个基于标准代码单元`Library - Warehouse`的库代码单元变量`LibraryWarehouse`来调用。使用在[第3章](fdf2b65f-be7c-4710-a3a9-39f4cc34ee5c.xhtml)中提到的简单快速文件搜索方法，我查找了一个用于创建位置的辅助函数，搜索字符串为CreateLocation，以及一个用于创建仓库员工的函数，搜索字符串为CreateWarehouseEmployee。
- en: Running the test functions, we eventually will have implemented the scenarios
    `#0015`, `#0017`, `#0030`, and `#0031` unambiguously, which shows that making
    use of the `Initialize` function is not only a matter of creating code that is
    easier to maintain and understand, it's also much faster and, as such, a must
    for automated tests.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 运行测试函数后，我们最终会明确地实现场景`#0015`、`#0017`、`#0030`和`#0031`，这表明使用`Initialize`函数不仅能创建更易于维护和理解的代码，而且还大大提高了效率，因此对于自动化测试而言是必不可少的。
- en: Having run all four tests 10 times individually (and thus triggering `Initialize`
    as if it were a fresh setup), and also having run the four tests in one go 10
    times (now triggering `Initialize` to get a shared setup), it shows that the latter
    is more than 30% faster.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在单独运行所有四个测试 10 次（从而触发`Initialize`，仿佛是一个全新的设置）并且将四个测试一次性运行 10 次（现在触发`Initialize`以获得共享设置）之后，结果表明后一种方式的速度提高了超过
    30%。
- en: Note that in both cases, scenario `#0015` is just as fast because it always
    makes `Initialize` run fully.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在这两种情况下，场景`#0015`的速度是一样快的，因为它总是让`Initialize`完全运行。
- en: '![](img/64112f97-0cae-40d2-bd09-6cad40acc690.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/64112f97-0cae-40d2-bd09-6cad40acc690.png)'
- en: VerifyLookupValueOnWarehouseShipmentLine
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: VerifyLookupValueOnWarehouseShipmentLine
- en: 'With `VerifyLookupValueOnWarehouseShipmentLine`, the second reusable part is
    found. It closely resembles the various `VerifyLookupValueOn` helper functions
    in the previous examples. Hence, with practicing the Business Central developer''s
    virtue, it''s a quick task to code `VerifyLookupValueOnWarehouseShipmentLine`:
    copy, paste, and adjust. We leave that to you.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`VerifyLookupValueOnWarehouseShipmentLine`，找到了第二个可重用的部分。它与之前示例中各种`VerifyLookupValueOn`辅助函数非常相似。因此，通过实践
    Business Central 开发者的美德，编写`VerifyLookupValueOnWarehouseShipmentLine`的任务变得非常简单：复制、粘贴并调整。这个任务留给你完成。
- en: CreateWarehouseShipmentFromSalesOrder
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CreateWarehouseShipmentFromSalesOrder
- en: If you have experience with the warehouse shipping feature of Business Central,
    you know that a series of steps have to be performed to get a warehouse shipment
    created. It's not as single fold an operation as creating a purchase invoice.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有使用过 Business Central 仓库发货功能的经验，你会知道创建一个仓库发货需要执行一系列步骤。这不像创建采购发票那样是单一的操作。
- en: 'The below process schema displays the tasks that need to be performed for the
    `[WHEN]` part of scenario `#0030`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下过程图展示了场景`#0030`中`[WHEN]`部分需要执行的任务：
- en: '![](img/23668512-6d19-4899-b799-868ed2a72d24.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23668512-6d19-4899-b799-868ed2a72d24.png)'
- en: 'Based on this, the `.al` implementation becomes:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 基于此，`.al`实现变成了：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next to the already encountered global codeunit variable `LibraryWarehouse`,
    we are using `LibrarySales`, based on standard codeunit `Library - Sales` and
    `LibraryRandom`, based on standard codeunit `Library - Random`. All three were
    the result of the search:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 除了已经遇到的全局代码单元变量`LibraryWarehouse`，我们还使用了`LibrarySales`，基于标准代码单元`Library - Sales`，以及`LibraryRandom`，基于标准代码单元`Library
    - Random`。这三者都是搜索的结果：
- en: '| **A Helper method that** | **Is found with Search string** |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| **一个辅助方法** | **通过搜索字符串找到** |'
- en: '| Creates a warehouse shipment from sales order | Procedure *CreateWhseShipmentFrom*
    |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| 从销售订单创建仓库发货 | 过程*CreateWhseShipmentFrom* |'
- en: '| Creates a sales document with an item and location | Procedure *CreateSalesDocumentWith*
    |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| 创建一个包含项目和位置的销售单据 | 过程*CreateSalesDocumentWith* |'
- en: '| Release a sales document | Procedure *ReleaseSalesDoc* |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| 发布销售单据 | 过程*ReleaseSalesDoc* |'
- en: '| Generates a random number | Procedure *Random*, followed by procedure *Rand*
    |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| 生成一个随机数 | 过程*Random*，接着是过程*Rand* |'
- en: We have created well readable, reusable, minimalistic functions. `CreateWarehouseShipmentFromSalesOrder`
    is being used by scenarios `#0015`, `#0017`, and `#0030`. `CreateAndReleaseSalesOrder`
    is directly being used by scenario `#0031` and indirectly by `#0015`, `#0017`,
    and `#0030`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了易于阅读、可重用、简约的函数。`CreateWarehouseShipmentFromSalesOrder`被场景`#0015`、`#0017`和`#0030`使用。`CreateAndReleaseSalesOrder`直接被场景`#0031`使用，并间接被`#0015`、`#0017`和`#0030`使用。
- en: The two empty strings in the call to `LibrarySales.CreateSalesDocumentWithItem`
    trigger the creation of a customer and item.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用`LibrarySales.CreateSalesDocumentWithItem`时，两个空字符串触发了客户和项目的创建。
- en: Test execution
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试执行
- en: Run, run, runnnnn. Grrrrrrrreeeeeeen!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 跑，跑，跑啊啊啊啊。咆哮~绿色！
- en: '![](img/9c7f007d-a3ac-4ea3-aadb-c5d4de500d62.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9c7f007d-a3ac-4ea3-aadb-c5d4de500d62.png)'
- en: Test the test
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试测试
- en: Now that we have worked our way through this bigger challenge, let's, for the
    last time, test the test.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经克服了这个更大的挑战，让我们最后一次测试这个测试。
- en: Adjust the test so the verification errs
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整测试，使验证出现错误。
- en: 'Let us now adjust the test by providing another value for the expected result
    in scenarios `#0015`, `#0017`, `#0030`, and `#0031`: `LUC`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过为场景`#0015`、`#0017`、`#0030`和`#0031`提供另一个期望结果值`LUC`来调整测试：
- en: '![](img/3acfe2a6-6841-462f-986a-099e0689d8c3.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3acfe2a6-6841-462f-986a-099e0689d8c3.png)'
- en: Refactoring
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构
- en: In this chapter, and actually the whole of section 3, we discussed various aspects
    of designing and coding automated tests for Dynamics 365 Business Central. We
    talked about and applied best practices, such as *reusability*, *readability*,
    and *minimalism*, but we did not apply it to the full extent. You might recall
    that at a couple of spots it was mentioned that some code part *smells like duplication*.
    This typically was a hint to refactor this code to make it reusable. We're not
    going to act on it within the confinement of this book. But the completed code
    that you can find on GitHub has been refactored resulting, among others, in the
    creation of two libraries with reusable helper methods. It also includes all scenarios
    that complete the full customer wish, as discussed at the start of [Chapter 5](56634efe-664c-421a-9582-b2a6ae69722a.xhtml),
    *From Customer Wish to Test Automation - The Basics*, but they have not been used
    as examples in the book.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，实际上也是第3部分的整个内容，我们讨论了设计和编写自动化测试的各个方面，针对Dynamics 365 Business Central的情况。我们讨论并应用了最佳实践，比如*可重用性*、*可读性*和*简约性*，但我们并没有完全实现这些实践。你可能还记得在某些地方提到过某些代码部分*有重复的嫌疑*。这通常是重构代码的提示，以使其更具可重用性。我们在本书的范围内不会对其进行操作。但你可以在GitHub上找到已经重构的完整代码，重构后的代码创建了两个可重用的帮助方法库。此外，它还包括所有完成完整客户需求的场景，这些场景在[第5章](56634efe-664c-421a-9582-b2a6ae69722a.xhtml)开头提到的*从客户需求到测试自动化——基础*中进行了讨论，但它们并未作为示例在书中使用。
- en: 'At the same time: be challenged and go and refactor the code you have created
    yourself so far while implementing the previous eight test examples. Having a
    complete set of application and test code in place allows you to refactor whatever
    you need to refactor, be it application or test code. But only one or the other.
    If refactoring application code leads to failing tests that used to succeed before,
    improve your refactored code and make all tests pass. If refactoring test code
    makes them fail where they didn''t previously, revert and do it better.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 同时：接受挑战，重构你自己创建的代码，特别是在实现前八个测试示例的过程中。拥有完整的应用程序和测试代码，使你能够对需要重构的部分进行重构，无论是应用程序代码还是测试代码。但只能是其中之一。如果重构应用程序代码导致之前成功的测试失败了，那么改进你的重构代码，使所有测试都通过。如果重构测试代码导致它们失败，而之前没有失败过，那么恢复并做得更好。
- en: Except for time shortage, and maybe a lazy mood, there is no reason not to refactor
    at this point. Get the best out of your code right now.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 除了时间紧张，也许还有懒散的心情之外，现在没有理由不进行重构。现在就让你的代码发挥最大的作用。
- en: In case of code that is not yet covered by tests, write tests before doing any
    refactoring. If you don’t, the chances of breaking something and not noticing
    are very high.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对于尚未覆盖的代码，应该在进行任何重构之前先编写测试。如果不这样做，破坏某些东西而没有察觉的可能性非常高。
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to test a report dataset and how to build more
    extensive scenarios in such a way that the test code is readable, reusable, and,
    not least important, minimalistic, the latter by making use of standard helper
    functions.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何测试报告数据集，以及如何构建更广泛的场景，确保测试代码具有可读性、可重用性，并且最重要的是，保持简约，后者通过使用标准帮助函数来实现。
- en: In the next chapter, [Chapter 8](e9d66b9a-2c01-4581-acf0-986fa1407e31.xhtml), *How
    to Integrate Test Automation in Daily Development Practice*, we step into the
    last part of this book in which we will discuss how to integrate your test automation
    in your day-to-day development practice, including the tests provided by Microsoft.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，[第8章](e9d66b9a-2c01-4581-acf0-986fa1407e31.xhtml)，*如何将测试自动化融入日常开发实践*，我们将进入本书的最后部分，讨论如何将测试自动化融入日常开发实践中，包括微软提供的测试。
