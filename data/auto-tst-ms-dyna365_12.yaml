- en: How to Integrate Test Automation in Daily Development Practice
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何将测试自动化融入日常开发实践
- en: You've got this far into this book, so by now you have a clear notion on the
    needs for and benefits of test automation for Dynamics 365 Business Central. You
    have also already exercised designing and writing tests based on [Section 3](13a9d0b2-ae46-45ba-8790-8489439e70fc.xhtml),
    *Designing and Building Automated Tests for* *Microsoft Dynamics 365 Business
    Central*. The next step is to bring into practice what you have learned.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经读到了这本书的这一部分，所以现在你对 Dynamics 365 Business Central 的测试自动化需求和好处有了明确的认识。你也已经开始根据[第3节](13a9d0b2-ae46-45ba-8790-8489439e70fc.xhtml)，*为
    Microsoft Dynamics 365 Business Central 设计和构建自动化测试*，进行测试设计和编写。下一步是将你学到的知识付诸实践。
- en: 'But from reading the book, and understanding the matters discussed, and working
    on your first exercises, making it part of your daily work might still be a threshold
    to take. As mentioned earlier, test automation is a team effort. Therefore, in
    this chapter, we will elaborate on a number of best practices that might turn
    out to be beneficial for you and your team in getting test automation working:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通过阅读本书、理解所讨论的问题并完成第一次练习，虽然将其作为日常工作的一部分可能仍然是一个门槛。如前所述，测试自动化是团队的共同努力。因此，在本章中，我们将详细说明一些最佳实践，这些实践可能对你和你的团队在实现测试自动化方面非常有帮助：
- en: Casting the customer wish into ATDD scenarios
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将客户需求转化为 ATDD 场景
- en: Taking small steps
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迈出小步伐
- en: Making the test tool your friend
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让测试工具成为你的朋友
- en: Integrating with daily build
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与日常构建集成
- en: Maintaining your test code
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护你的测试代码
- en: Casting the customer wish into ATDD scenarios
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将客户需求转化为 ATDD 场景
- en: Crucial to getting test automation into your daily development practices is
    the adoption of it by the team. Like requirements and application code, tests
    and test code should be owned by the development team; not just formally, but
    also actively. Good application code does not emerge from a single-lined customer
    wish, it derives from a well detailed and formalized customer wish. And the same
    applies to tests and test code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 将测试自动化融入日常开发实践的关键是团队的采纳。与需求和应用代码一样，测试和测试代码应该由开发团队负责；不仅仅是形式上的，而是要积极地承担责任。良好的应用代码并非来自一句简单的客户需求，而是来自于一个详细且正式的客户需求。测试和测试代码也是如此。
- en: As discussed in [Chapter 4](db955f66-11f4-4d9a-90c7-5af04058ebbe.xhtml), *Test
    Design*, formalize your requirements by using the ATDD design pattern. Cast your
    customer wish in ATDD scenarios. Break down each wish into a list of tests, and make
    this your primary vehicle of communication for (1) detailing of your **customer
    wish**, (2) implementation of your **application code**, (3) structured execution
    of your **manual tests**, (4) coding of your **test automation** and (5) up-to-date
    **documentation** of your solution. Your test automation will be a logical result
    of all previous work.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在[第4章](db955f66-11f4-4d9a-90c7-5af04058ebbe.xhtml)中讨论的，*测试设计*，通过使用 ATDD 设计模式来规范化你的需求。将客户需求转化为
    ATDD 场景。将每个需求分解为测试列表，并使其成为你沟通的主要工具：（1）详细描述你的**客户需求**，（2）实现你的**应用代码**，（3）有结构地执行你的**手动测试**，（4）编写你的**测试自动化**，（5）为你的解决方案提供最新的**文档**。你的测试自动化将是所有前期工作的逻辑结果。
- en: 'As developers are the ones that will be doing both the application and tests
    coding, and in general are not the ones that understand the customer wish the
    best, ATDD scenarios already hit *two out of five birds in one stroke*. Make use
    of my ATDD Scenarios Excel sheet on GitHub, called `Clean sheet.xlsx`*,* to get
    your team to start casting customer wishes into ATDD scenarios. It''s exactly
    what I did when working on the test examples in [Chapter 5](56634efe-664c-421a-9582-b2a6ae69722a.xhtml) through
    [Chapter 7](bb9ee41e-4c60-4a27-8fad-5343adfcd86a.xhtml). See the below screenshot
    for impression:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于开发人员既要编写应用代码，也要编写测试代码，而通常他们并不是最了解客户需求的人，因此 ATDD 场景已经实现了*一举两得*。可以利用我在 GitHub
    上的 ATDD 场景 Excel 表格，名为 `Clean sheet.xlsx`，让你的团队开始将客户需求转化为 ATDD 场景。这正是我在[第5章](56634efe-664c-421a-9582-b2a6ae69722a.xhtml)到[第7章](bb9ee41e-4c60-4a27-8fad-5343adfcd86a.xhtml)编写测试示例时所做的。请参见下面的截图以获取印象：
- en: '![](img/ad9d2554-1e1c-4f85-b5f6-0676c5d50266.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ad9d2554-1e1c-4f85-b5f6-0676c5d50266.png)'
- en: 'The first seven columns are for the product owners, functional consultants,
    and key users to fill in:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 前七列供产品负责人、功能顾问和关键用户填写：
- en: '`Feature`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`功能`'
- en: '`Sub Feature`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`子功能`'
- en: '`UI`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UI`'
- en: '`Scenario`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`场景`'
- en: '`Given-When-Then (Tag)`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Given-When-Then（标签）`'
- en: '`Given-When-Then (Description)`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Given-When-Then（描述）`'
- en: '`Scenario #`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`场景 #`'
- en: 'The last two columns, `ATDD Format` and `Code Format`, are automatically populated
    as seen in the following screenshot. See that the latter column contains *the
    green*, that is, the formatted and already out-commented `GIVEN`-`WHEN`-`THEN`
    scenarios. These are ready to be copied and pasted into your test codeunit, and
    embedded into your test functions:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的两列，`ATDD格式`和`代码格式`，会自动填充，正如以下截图所示。注意，后者列包含*绿色*，也就是已经格式化并注释掉的`GIVEN`-`WHEN`-`THEN`场景。这些场景已经准备好可以复制并粘贴到你的测试代码单元中，嵌入到你的测试函数里：
- en: Currently, Jan Hoek and I are working to get this a step further. Have a look
    at our `ATDD.TestScriptor` that will, given an ATDD defined feature, construct
    the skeleton of the associated `.al` test codeunit: [http://powershellgallery.com/packages/ATDD.TestScriptor](http://powershellgallery.com/packages/ATDD.TestScriptor).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Jan Hoek和我正在一起努力推进这一步。看看我们的`ATDD.TestScriptor`，它可以根据定义的ATDD功能，构建关联的`.al`测试代码单元的框架：[http://powershellgallery.com/packages/ATDD.TestScriptor](http://powershellgallery.com/packages/ATDD.TestScriptor)。
- en: Taking small steps
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 采取小步走
- en: 'As the saying goes, *Rome wasn’t built in a day*. Likewise, get to master test
    automation one step at a time. Learn and improve by doing the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如俗话所说，*罗马不是一天建成的*。同样，逐步掌握测试自动化。通过以下方式学习和改进：
- en: Start casting the customer wish into the scenarios that come to mind. Try to
    keep it simple. Preferably, you would like to get a full coverage right away,
    but as it is a team effort, they will help you to identify the holes, and fill
    them.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始将客户的需求转化为你想到的场景。尽量保持简单。理想情况下，你希望立即获得完整的覆盖率，但由于这是团队合作，他们会帮助你识别漏洞并填补它们。
- en: 'Make use of my *4-steps* recipe, *create*, *embed*, *write*, and *construct*,
    for the conception of the test code:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用我的*4步*流程——*创建*、*嵌入*、*编写*、*构建*——来构思测试代码：
- en: 1\. Create a test codeunit
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 创建测试代码单元
- en: 2\. Embed the customer wish into a test function
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 将客户的需求嵌入到测试函数中
- en: 3\. Write your test story
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 编写你的测试故事
- en: 4\. Construct the real code
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 构建实际代码
- en: Get the test(s) run with every step performed, and as soon as the code is deployable.
    Do not wait until you’re finished, but verify your effort as soon as possible.
    See how your tests move from **red** to **green**.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每一步操作时都运行测试，并在代码可以部署时尽快进行验证。不要等到完成后再验证，而是尽早验证你的工作成果。观察你的测试从**红色**变为**绿色**。
- en: Take joy in *testing the test* as a last small step in completing it. Either
    verify the data created or, often much easier, adjust the test so the verification
    errs.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 把*测试测试*作为完成它的最后一步来享受。要么验证已创建的数据，要么通常更简单地调整测试，以使验证出错。
- en: Implement one scenario after the other and find yourself duplicating code parts.
    Do not force yourself into directly abstracting them into helper methods in libraries.
    This can wait until the application and test code are ready and refactoring can
    start.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个接一个地实现场景，发现自己在重复代码部分。不要强迫自己立即将这些代码抽象成库中的辅助方法。这可以等到应用程序和测试代码准备好后再进行重构。
- en: Run the tests regularly, once the application code and tests are in and when
    a next update to the feature is made. While implementing, do not wait till the
    code is ready, verify each atomic change by running the tests, and add new tests
    for the new and updated scenarios.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期运行测试，一旦应用程序代码和测试完成，或者当功能进行下一次更新时。在实施过程中，不要等到代码准备好，验证每一个原子变化，运行测试，并为新旧场景添加新测试。
- en: The aforementioned `ATDD.TestScriptor` will handle *Step 1* through *Step 3*
    of my 4-steps recipe for you.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 上述的`ATDD.TestScriptor`将帮助你完成我的4步流程中的*步骤1*到*步骤3*。
- en: Making the test tool your friend
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让测试工具成为你的朋友
- en: In [Chapter 3](fdf2b65f-be7c-4710-a3a9-39f4cc34ee5c.xhtml), *The Test Tool and
    Standard Tests*, we introduced you to the test tool and we used it frequently
    during the work we did on the test examples. We applied it to *test the test*
    after having inserted a bug to let the *verification error*. Next to VS Code,
    your coding tool, and debugger, the test tool is your best friend. Keep it running
    while you develop, "*do not wait till the code is ready, verify each atomic change
    by running the tests*", as mentioned previously.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第3章](fdf2b65f-be7c-4710-a3a9-39f4cc34ee5c.xhtml)，《测试工具与标准测试》中，我们向你介绍了测试工具，并在我们进行测试示例工作时频繁使用它。我们用它来*测试测试*，在插入一个bug并让*验证错误*后。除了VS
    Code（你的编码工具）和调试器，测试工具是你最好的朋友。在开发时保持它的运行，正如之前提到的，“*不要等到代码准备好，验证每一个原子变化，运行测试*”。
- en: Create a specific test suite to hold the test codeunits that relate to the code
    you are working on. In most of your projects, it’s very likely, as with the `LookupValue`
    extension, that you end up with a bunch of test codeunits that will be executed
    within less than a minute. While working on a new test codeunit, create a new
    test suite to only hold that codeunit and repeatedly carry it out till coding
    is done.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个特定的测试套件，用于存放与你正在处理的代码相关的测试代码单元。在你大多数的项目中，很可能会像`LookupValue`扩展那样，最终得到一堆测试代码单元，这些单元将在不到一分钟的时间内执行完毕。在编写新的测试代码单元时，创建一个新的测试套件，仅用于存放该代码单元，并反复执行，直到编写完成。
- en: Test coverage map
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试覆盖率图
- en: 'The test tool also holds a powerful feature we haven’t mentioned so far and
    can be of great help in picking out relevant test codeunits for the code update
    you are working on. It is called **Test Coverage Map** (**TCM**). It combines
    the result of the code coverage tool that also resides in Business Central and
    the test tool. Having TCM turned on, it adds two extra options to the Get Test
    Codeunits feature already demoed in [Chapter 3](fdf2b65f-be7c-4710-a3a9-39f4cc34ee5c.xhtml),
    *The Test Tool and Standard Tests*. There, we explained that Get Test Codeunits
    offers the following two options to let you populate your test suite:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 测试工具还包含一个我们之前没有提到的强大功能，对于选择与你正在更新的代码相关的测试代码单元非常有帮助。这个功能叫做**测试覆盖率图**（**TCM**）。它结合了Business
    Central中代码覆盖工具的结果和测试工具。启用TCM后，它会为已展示的[第3章](fdf2b65f-be7c-4710-a3a9-39f4cc34ee5c.xhtml)中的获取测试代码单元功能添加两个额外选项，*测试工具与标准测试*。在那一章中，我们解释了获取测试代码单元提供了以下两个选项，让你能填充测试套件：
- en: Select Test Codeunits
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择测试代码单元
- en: All Test Codeunits
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有测试代码单元
- en: With TCM, two more options are added.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 启用TCM后，会增加两个选项。
- en: Choosing the third option, *Get Test Codeunits based on Modified Objects*, will
    select those test codeunits that will hit the application objects you are working
    on. The fourth option, *Get Test Codeunits based on Selected Objects*, let’s you
    select from a list those application objects you want to run tests against.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 选择第三个选项，*根据修改的对象获取测试代码单元*，将选择那些会涉及你正在处理的应用对象的测试代码单元。第四个选项，*根据选择的对象获取测试代码单元*，让你从列表中选择你希望运行测试的应用对象。
- en: '![](img/5c52bbc5-3d31-45ed-8298-ad590f3b2aae.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5c52bbc5-3d31-45ed-8298-ad590f3b2aae.png)'
- en: At this very moment, the *Get Test Codeunits based on Modified Objects* option
    only takes into account the application objects that reside in standard, that
    is, in C/SIDE. Unfortunately, it does not yet consider objects that reside in
    extensions.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，*根据修改的对象获取测试代码单元*选项仅考虑标准中存在的应用对象，即C/SIDE中的对象。不幸的是，它还未考虑到扩展中存在的对象。
- en: The fourth option, *Get Test Codeunits based on Selected Objects*, nevertheless
    includes all application objects.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 第四个选项，*根据选择的对象获取测试代码单元*，仍然包括所有的应用对象。
- en: To be able to use TCM, you need to turn it on. To do this, check mark the Update
    Test Coverage Map field on a test suite. If this has not been turned on, on any
    test suite, TCM will not have data to allow you to choose Get Test Codeunits based
    on Modified Objects and Get Test Codeunits based on Selected Objects options as
    described previously.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够使用TCM，你需要先启用它。为此，在测试套件中勾选“更新测试覆盖率图”字段。如果在任何测试套件中没有启用此选项，则TCM将无法获取数据，无法让你选择*根据修改的对象获取测试代码单元*和*根据选择的对象获取测试代码单元*选项，如前所述。
- en: '![](img/0c996815-62af-4afe-adcd-0f369cc4edeb.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0c996815-62af-4afe-adcd-0f369cc4edeb.png)'
- en: For TCM to have the data available to do its job, the activated test suite should
    be run first.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让TCM能有足够的数据来完成其工作，已激活的测试套件应该首先运行。
- en: Extending the test tool
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展测试工具
- en: When we started using the test tool more intensely years ago, there was one
    major omission that we decided to build a simple extension for. Once you have
    set up a test suite and run all the tests, you might end up having only a portion
    of the tests that passed successfully. And, logically, the other parts not passing.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 几年前，当我们开始更密集地使用测试工具时，我们发现一个主要的遗漏问题，于是决定为其构建一个简单的扩展。一旦你设置好了测试套件并运行了所有测试，你可能会发现只有一部分测试成功通过，而逻辑上，其他部分没有通过。
- en: While finding and fixing the cause of the failures, you presumably would only
    want to run the faulty ones. The standard test tool lets you only activate/deactivate
    by (un)checking the Run field of each individual function line. Checking/unchecking
    Run on a codeunit line also does the same on all the function lines it entails.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在查找并修复失败原因时，您可能只想运行有问题的测试。标准的测试工具只允许通过选中/取消选中每个功能行的“Run”字段来启用/禁用测试。选中/取消选中代码单元行的“Run”选项，也会对其包含的所有功能行执行相同的操作。
- en: 'The test tool extension empowers you to select the Run field on the following:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 测试工具扩展允许您选择以下内容的“Run”字段：
- en: All tests
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有测试
- en: Only failing tests and thus disabling all others
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅失败的测试，从而禁用所有其他测试
- en: On none-failing tests, thus disabling failing tests
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于没有失败的测试，禁用失败的测试
- en: And, as a fourth option to deselect all tests.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第四个选项，可以取消选择所有测试。
- en: '![](img/a3c88a8e-206a-46c9-9469-de2e46a00890.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a3c88a8e-206a-46c9-9469-de2e46a00890.png)'
- en: 'The following four actions have been added as seen in the preceding screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面截图所示，已添加以下四个操作：
- en: Select on All
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择“所有测试”
- en: Deselect on All
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取消选择“所有测试”
- en: Select on Failures
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择“失败时”
- en: Select on None Failures
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择“没有失败的测试”
- en: 'Hence, when using Select on Failures, all failing tests will have Run checked,
    while all other tests will have it unchecked as shown in the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在使用“失败时选择”功能时，所有失败的测试将被选中“Run”选项，而其他所有测试则保持未选中状态，如下图所示：
- en: '![](img/f495a77e-1f0e-433b-94fc-8bcb073ee320.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f495a77e-1f0e-433b-94fc-8bcb073ee320.png)'
- en: The already existing features, such as TCM and the four actions extending the
    test tool, let you easily shift out the tests that help fix issues and enlarge
    the test collateral that you are building up.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 已有的功能，如TCM和扩展测试工具的四个操作，使您可以轻松地选择有助于修复问题的测试，并扩大您正在构建的测试资源。
- en: The source of the test tool extension can be downloaded for this GitHub repository: [https://github.com/fluxxus-nl/Test-Tool-Extension](https://github.com/fluxxus-nl/Test-Tool-Extension)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 测试工具扩展的源代码可以从此GitHub仓库下载：[https://github.com/fluxxus-nl/Test-Tool-Extension](https://github.com/fluxxus-nl/Test-Tool-Extension)
- en: Integrating with daily build
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与每日构建集成
- en: 'Where software development is about building applications that link and automate
    business processes, modern software development adds this to its own processes
    as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发中，构建连接和自动化业务流程的应用程序，而现代软件开发将其扩展到自身的流程，如下所示：
- en: Sharing code in source code repositories that can be accessed and managed through
    APIs from anywhere
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在源代码仓库中共享代码，并且可以通过API从任何地方访问和管理
- en: Building your software from scratch at any time automatically
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随时自动从头开始构建您的软件
- en: Running an automated test run, triggered by the completed build, to show the
    validity of the rebuild software
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行由已完成构建触发的自动化测试，以展示重建软件的有效性
- en: Deploying a build approved by the automated tests is automatic on a scheduled
    time
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署由自动化测试通过的构建将在预定时间自动进行
- en: Collecting all the results and statuses of the foregoing processes on a dashboard
    to inform the stakeholders about the sanity of the software
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在仪表板上收集所有前述过程的结果和状态，以便向利益相关者通报软件的健康状况
- en: Contemporary development tools, such as Microsoft Azure DevOps, enable you to
    achieve this. The following screenshot shows a Azure DevOps dashboard integrating
    all of the preceding bullet points.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现代开发工具，如Microsoft Azure DevOps，使您能够实现这一点。以下截图展示了一个集成所有前述要点的Azure DevOps仪表板。
- en: '![](img/bb4cd346-44c3-4db9-892d-5f7c23b115ac.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bb4cd346-44c3-4db9-892d-5f7c23b115ac.png)'
- en: This is the world we are moving in with Dynamics 365 Business Central, induced
    by the arguments discussed in [Chapter 1](7b51635c-cd1c-4124-be24-c2597e6d7986.xhtml),
    *Introduction to Automated Testing*. Not in the least the requirements Microsoft
    is setting for us, and please, do not underestimate the ecosystem our customers
    are living in today, where they hear about scheduled builds, automated test runs
    and shorter release cycles than ever before.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们在Dynamics 365 Business Central中迈进的世界，受到[第1章](7b51635c-cd1c-4124-be24-c2597e6d7986.xhtml)中讨论的论点启发，*自动化测试简介*。尤其是微软为我们设定的要求，请不要低估我们客户今天所处的生态系统，他们每天都在听到关于计划构建、自动化测试运行和比以往更短的发布周期的信息。
- en: '**Continuous Integration** (**CI**) and **Continuous Delivery** (**CD**) might
    have seemed something far out for Business Central development, but with the move
    to AL and extension development, it’s just around the corner. Automated tests
    are making up an essential part of this.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）和**持续交付**（**CD**）在Business Central开发中可能曾经显得遥不可及，但随着AL和扩展开发的推进，它们已经触手可及。自动化测试在这一过程中占据了至关重要的地位。'
- en: Where in the last decade, only a small number of Business Central development
    partners were putting effort in automating their development processes, more and
    more are picking up right now; and since a short while the Microsoft Dynamics
    365 Business Central development team is openly advocating this too.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去十年里，只有少数一些Business Central开发合作伙伴在努力自动化他们的开发流程，而现在越来越多的合作伙伴也开始加入这一行列；并且微软Dynamics
    365 Business Central开发团队最近也公开倡导这一做法。
- en: 'Read the blog post series by FreddyDK (Freddy D. Kristiansen) of Microsoft
    on CI/CD: [https://community.dynamics.com/business/b/freddysblog/archive/tags/Continuous+Integration](https://community.dynamics.com/business/b/freddysblog/archive/tags/Continuous+Integration).'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读微软FreddyDK（Freddy D. Kristiansen）关于CI/CD的博客系列：[https://community.dynamics.com/business/b/freddysblog/archive/tags/Continuous+Integration](https://community.dynamics.com/business/b/freddysblog/archive/tags/Continuous+Integration)。
- en: But also follow guys like Gunnar Gestsson: [(](https://community.dynamics.com/business/b/freddysblog/archive/tags/Continuous+Integration)[https://dynamics.is/](https://dynamics.is/)[),](https://community.dynamics.com/business/b/freddysblog/archive/tags/Continuous+Integration)
    Kamil Sáček: [(](https://community.dynamics.com/business/b/freddysblog/archive/tags/Continuous+Integration)[https://dynamicsuser.net/nav/b/kine](https://dynamicsuser.net/nav/b/kine)[), ](https://community.dynamics.com/business/b/freddysblog/archive/tags/Continuous+Integration)James
    Pearson: [(](https://community.dynamics.com/business/b/freddysblog/archive/tags/Continuous+Integration)[https://jpearson.blog/)](https://jpearson.blog/)[,](https://community.dynamics.com/business/b/freddysblog/archive/tags/Continuous+Integration)
    Richard Robberse: [(](https://community.dynamics.com/business/b/freddysblog/archive/tags/Continuous+Integration)[http://robberse-it-services.nl/blog/](http://robberse-it-services.nl/blog/)[), ](https://community.dynamics.com/business/b/freddysblog/archive/tags/Continuous+Integration)and
    Michael Glue:[ (](https://community.dynamics.com/business/b/freddysblog/archive/tags/Continuous+Integration)[https://navbitsbytes.com/](https://navbitsbytes.com/)[)](https://community.dynamics.com/business/b/freddysblog/archive/tags/Continuous+Integration)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 但也可以关注像Gunnar Gestsson这样的专家：[https://dynamics.is/](https://dynamics.is/)，Kamil
    Sáček：[https://dynamicsuser.net/nav/b/kine](https://dynamicsuser.net/nav/b/kine)，James
    Pearson：[https://jpearson.blog/](https://jpearson.blog/)，Richard Robberse：[http://robberse-it-services.nl/blog/](http://robberse-it-services.nl/blog/)，以及Michael
    Glue：[https://navbitsbytes.com/](https://navbitsbytes.com/)。
- en: Be that as it may, you do not need to wait for a fully operational automated
    CI/CD pipeline to get the most out of your automated tests. With a simple PowerShell
    script triggered by a good old Windows task, you have your tests running on your
    application at any scheduled time. Before we started implementing our CI/CD pipeline
    on Azure DevOps, this was exactly what we had been doing for a couple of years.
    This allowed us to execute 18,000 plus automated tests every night with a resulting
    test report email to the team the next morning informing us on the sanity of our
    code. A drop in the success rate of the test run, occasionally happening, notified
    us that some unintended breaking changes had been added to our application and
    appropriate actions were needed.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，你并不需要等到一个完全运作的自动化CI/CD管道才能从你的自动化测试中获得最大收益。通过一个简单的PowerShell脚本，由一个传统的Windows任务触发，你就可以在任何预定时间让你的测试在应用程序上运行。在我们开始在Azure
    DevOps上实现CI/CD管道之前，正是这样做了几年。这使我们能够每晚执行超过18,000个自动化测试，并且第二天早上通过测试报告邮件告知团队我们的代码的健康状况。测试运行的成功率偶尔出现下降时，会提醒我们应用程序中添加了某些意外的破坏性更改，并需要采取适当的措施。
- en: Maintaining your test code
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 维护你的测试代码
- en: 'Like application code, test code is code, so handle it as application code
    should be handled, for example:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 像应用程序代码一样，测试代码也是代码，因此应像处理应用程序代码一样处理测试代码，例如：
- en: It needs to be secured, ideally by means of a source code management tool
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要确保安全，理想情况下通过源代码管理工具来实现。
- en: It needs to be maintained and as any new customer wish will result in a change
    of the application code, it will most likely also change the test code
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要进行维护，并且由于任何新的客户需求都会导致应用程序代码的更改，因此测试代码很可能也会发生变化。
- en: It needs to be debugged, whether you like it or not, as any coding done by a
    developer potentially inserts new bugs
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要进行调试，无论你喜欢与否，因为开发人员编写的任何代码都有可能引入新的 bug。
- en: It needs to be reviewed to assure that, like application code, it meets the
    coding standards
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要进行审查，以确保它像应用程序代码一样符合编码标准。
- en: Extensions and tests
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展和测试
- en: Before we conclude this chapter, a note must be made on how to organize your
    extension code with respect to application and test code.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束本章之前，必须说明如何组织与应用程序和测试代码相关的扩展代码。
- en: If we take the most restrictive requirement for extensions, being the ones Microsoft
    has set up for approving your extensions for release to AppSource, application
    and test code should be placed in separate extensions. I guess you might have
    already thought that the test extensions should have a dependency on the application
    extension. This unfortunately frustrates a parallel development of application
    and test code, since any change to the application extension results in a redeployment
    of it. This potentially also results in an update and redeployment of the test
    extension. Before you realize, you are juggling continuously with your extensions,
    taking the speed out of the development team. The best way to go about this, while
    developing, is to have application and test code placed in the same extension.
    Once ready, you can split up the code and create the two mandatory extensions
    by means of some automated (build) script or a specific merging strategy.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们采用扩展的最严格要求，即微软为批准您的扩展发布到 AppSource 所设定的要求，那么应用程序和测试代码应放置在不同的扩展中。我猜你可能已经想到，测试扩展应依赖于应用程序扩展。不幸的是，这会阻碍应用程序和测试代码的并行开发，因为对应用程序扩展的任何更改都会导致其重新部署。这也可能导致测试扩展的更新和重新部署。在你意识到之前，你就会不断地在扩展之间进行
    juggling，从而降低开发团队的效率。在开发过程中，最好的做法是将应用程序代码和测试代码放在同一个扩展中。准备好后，你可以通过一些自动化（构建）脚本或特定的合并策略将代码拆分，并创建这两个强制性的扩展。
- en: 'In case your extension is not to be put on AppSource, I would still strongly
    advise you to not release the test code in the application extension. This is
    for the same reason that standard `CRONUS` does not contain the standard test
    helper libraries and test codeunits: to prevent in whatever way that automated
    tests are run in a production environment. Sure, if test codeunits are run within
    the isolation of a test runner, no changes to the data will sustain, and the worst
    that can happen is that users will bump into locks, not the least on the `Object`
    table. But what if a test codeunit accidentally runs outside the isolation of
    a test runner and commits become real commits? Your client might think they’re
    having a great day with an outstanding turnover. But soon it will return on them
    when payments are not fulfilled and goods are *returned to sender* as addresses
    are unknown.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的扩展不打算发布到 AppSource，我仍然强烈建议不要在应用程序扩展中发布测试代码。原因与标准 `CRONUS` 不包含标准测试助手库和测试代码单元相同：为了避免在生产环境中运行自动化测试。当然，如果测试代码单元在测试运行器的隔离环境中运行，数据不会发生更改，最坏的情况是用户会遇到锁定问题，尤其是在
    `Object` 表上。但是，如果测试代码单元不小心在测试运行器的隔离环境之外运行，并且提交变成了实际提交怎么办？您的客户可能会觉得他们度过了愉快的一天，营业额非常好。但当支付未完成且货物被*退回发件人*（因为地址无法识别）时，问题就会回到他们身上。
- en: Summary
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we paid attention to a number of best practices on how to embed
    test automation in your daily development practice. Get your functional peers
    writing ATDD scenarios to make use of the Excel sheet discussed. Do not overload
    yourself and your team and take small steps. Use the test tool next to your development
    tools and keep the tests running. Automate your development processes including
    running your tests. And last but not least, test code is code, so maintain it
    as you maintain your application code.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们关注了如何将测试自动化嵌入到日常开发实践中的一些最佳实践。让你的功能同事编写ATDD场景，以便利用前面讨论过的Excel表格。不要让自己和团队过于负担重，采取小步骤前进。将测试工具与开发工具并行使用，并保持测试持续运行。自动化你的开发流程，包括运行测试。最后但同样重要的是，测试代码就是代码，因此要像维护应用程序代码一样维护测试代码。
- en: We’re on the verge of the last chapter, [Chapter 9](795b3870-b6f5-43be-953c-0ffd01db9102.xhtml), *Getting*
    *Business Central* *Standard Tests Working on Your Code*, in which we will have
    a closer look at the tests provided by Microsoft and how we could also integrate
    this humongous collateral of standard tests.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将进入最后一章，[第9章](795b3870-b6f5-43be-953c-0ffd01db9102.xhtml)，*让* *Business Central*
    *标准测试在你的代码上工作*，在这一章中，我们将更深入地研究微软提供的测试，以及如何将这一庞大的标准测试集合进行集成。
