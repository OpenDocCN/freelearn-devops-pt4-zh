- en: 'Chapter 10: Using AWS Opsworks to Manage and Deploy your Application Stack'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 10 章：使用 AWS OpsWorks 管理和部署您的应用堆栈
- en: If your operations team is already managing infrastructure and applications
    with either Puppet or Chef, then you should have already heard of OpsWorks. We'll
    look at how stacks can use pre-defined code to create the infrastructure applications
    and even the data tier for you. Need to perform updates to your apps? We will
    look into that as well.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的运营团队已经使用 Puppet 或 Chef 管理基础设施和应用，那么您应该已经听说过 OpsWorks。我们将查看堆栈如何使用预定义的代码为您创建基础设施应用，甚至是数据层。需要对应用进行更新？我们也会讨论这个问题。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主要内容：
- en: OpsWorks essentials
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpsWorks 基础
- en: Available OpsWorks platforms
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可用的 OpsWorks 平台
- en: OpsWorks and Chef Automate
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpsWorks 与 Chef Automate
- en: Creating and deploying a recipe
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和部署食谱
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Although not necessary, familiarity with either the Chef or Puppet platform
    will be helpful when reading this chapter. It is required that you understand
    the different components of a full-stack application and how they interact with
    each other.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不是必需的，但熟悉 Chef 或 Puppet 平台会在阅读本章时有所帮助。您需要了解完整堆栈应用的不同组件及它们之间如何相互作用。
- en: OpsWorks essentials
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpsWorks 基础
- en: In [*Chapter 7*](B17405_07_Final_JM_ePub.xhtml#_idTextAnchor188), *Using CloudFormation
    Templates to Deploy Workloads,* we took a look at the **Infrastructure as a Service**
    (**IaaS**) offering from **Amazon Web Services** (**AWS**). Now we will look at
    one of the **Platform as a Service** (**PaaS**) offerings from AWS, OpsWorks.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第七章*](B17405_07_Final_JM_ePub.xhtml#_idTextAnchor188)，*使用 CloudFormation
    模板部署工作负载* 中，我们介绍了 **基础设施即服务**（**IaaS**）的 **Amazon Web Services**（**AWS**）提供的服务。现在我们将看看
    AWS 提供的 **平台即服务**（**PaaS**）之一——OpsWorks。
- en: 'OpsWorks is, in essence, a wrapper around the automation packages Chef and
    Puppet. Why would you want to use OpsWorks? The following bullet points outline
    why you would choose to implement OpsWorks as a solution for your client or enterprise:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: OpsWorks 本质上是 Chef 和 Puppet 自动化包的封装。为什么要使用 OpsWorks？以下要点概述了您选择将 OpsWorks 作为客户或企业解决方案的原因：
- en: '**Simple**: OpsWorks is easy to use.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单**：OpsWorks 使用简单。'
- en: '**Productive**: OpsWorks helps reduce errors by using scripted configuration.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高效**：OpsWorks 通过使用脚本化配置帮助减少错误。'
- en: '**Flexible**: Deployments of any size can be simplified by using OpsWorks.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活**：使用 OpsWorks 可以简化任何规模的部署。'
- en: '**Powerful**: OpsWorks helps reduce both the time of deployment and the costs
    to deploy.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**强大**：OpsWorks 有助于减少部署时间和部署成本。'
- en: '**Secure**: The OpsWorks service allows for fine-grained access control.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全**：OpsWorks 服务允许细粒度的访问控制。'
- en: Important note
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: OpsWorks is one of the few services that doesn't require a region. It is a global
    service that shows all stacks created, no matter what region your cloud resources
    are currently residing in.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: OpsWorks 是少数不需要特定区域的服务之一。它是一个全球服务，显示所有已创建的堆栈，无论您的云资源当前所在的区域是哪个。
- en: 'OpsWorks can be especially helpful if you have a lean team that is responsible
    for all or most components:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的团队精简，负责所有或大部分组件，OpsWorks 特别有用：
- en: '![Figure 10.1 – OpsWorks serving users from an app'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.1 – OpsWorks 从应用中为用户提供服务'
- en: '](img/Figure_10.1_B17405.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.1_B17405.jpg)'
- en: Figure 10.1 – OpsWorks serving users from an app
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1 – OpsWorks 从应用中为用户提供服务
- en: 'Through a series of events, you can both construct and manage your applications
    using AWS OpsWorks:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一系列事件，您可以使用 AWS OpsWorks 构建和管理您的应用：
- en: '![Figure 10.2 – Overview of how OpsWorks operates'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.2 – OpsWorks 操作概览'
- en: '](img/Figure_10.2_B17405.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.2_B17405.jpg)'
- en: Figure 10.2 – Overview of how OpsWorks operates
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2 – OpsWorks 操作概览
- en: First, you create a stack for your application. Multiple applications can reside
    on the same stack. They should all be components of the same system, such as a
    LAMP stack, a Rails deployment, or even a single- or double-tiered application.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要为您的应用创建一个堆栈。多个应用可以共存于同一个堆栈中，它们应该都是同一系统的组件，例如 LAMP 堆栈、Rails 部署，或甚至是单层或双层应用。
- en: Second, after your stack has been provisioned, you must define your layers.
    In the case of a LAMP stack, those layers would be an Apache web server with PHP
    pages, along with a MySQL data store.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，在您的堆栈被配置后，您需要定义您的层。在 LAMP 堆栈的情况下，这些层包括带有 PHP 页面和 MySQL 数据存储的 Apache Web 服务器。
- en: Third, you will have your applications defined in a combination of code versioning
    repositories and deployment code, such as Puppet manifests or Chef recipes.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，你将通过代码版本库和部署代码（如 Puppet 清单或 Chef 配方）来定义你的应用程序。
- en: Fourth, EC2 instances need to be defined in both number and size so that our
    application has a spot to be deployed to.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 第四，必须定义 EC2 实例的数量和大小，以便为我们的应用提供一个部署位置。
- en: And finally, for the fifth step, we need to choose a deployment strategy for
    our different layers. This strategy can vary based on whether you are performing
    manual or automated deployments.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在第五步中，我们需要为不同的层选择一个部署策略。这个策略可以根据你是进行手动部署还是自动化部署而有所不同。
- en: Understanding the components of OpsWorks
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解 OpsWorks 的组件
- en: As we start to talk about OpsWorks, it will be essential to understand specific
    keywords. Let's now look at the components that make up the parts of OpsWorks.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始讨论 OpsWorks 时，理解一些特定的关键词将是至关重要的。现在让我们看看构成 OpsWorks 各个部分的组件。
- en: Stacks
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 堆栈
- en: A **stack** represents the cloud infrastructure and applications that you want
    to manage.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**堆栈**表示你希望管理的云基础设施和应用程序。'
- en: You cannot mix and match Windows and Linux instances in a stack. You can, however,
    run different distributions of Linux in the same stack.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你不能在一个堆栈中混合使用 Windows 和 Linux 实例。不过，你可以在同一个堆栈中运行不同版本的 Linux。
- en: Your stack can comprise custom **Amazon Machine Images** (**AMIs**) as long
    as the base operating system from which the image was made is one of the supported
    operating systems. OpsWorks does not support custom Windows AMIs.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你的堆栈可以包含自定义的**亚马逊机器映像**（**AMIs**），只要映像所基于的操作系统是支持的操作系统之一。OpsWorks 不支持自定义 Windows
    AMIs。
- en: Layers
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 层
- en: A **layer** defines how to set up and configure a set of instances, as well
    as any related resources. Every stack in OpsWorks contains one or more layers.
    You can think of a layer as a blueprint for OpsWorks to use for a set of one or
    more EC2 instances.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**层**定义了如何设置和配置一组实例，以及相关的资源。OpsWorks 中的每个堆栈都包含一个或多个层。你可以把层看作是 OpsWorks 用来配置一组或多组
    EC2 实例的蓝图。'
- en: At the layer level, you can define how to configure the instances, what packages
    are installed, and also define critical events that will happen during the lifecycle.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在层级中，你可以定义如何配置实例，安装哪些软件包，以及定义在生命周期中会发生的关键事件。
- en: 'There are several different types of layers that you can define in OpsWorks:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpsWorks 中，你可以定义几种不同类型的层：
- en: Load balancer layers.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载均衡器层。
- en: Database layers.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库层。
- en: Application server layers.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用服务器层。
- en: Custom OpsWorks layers (this is when no pre-defined layer will meet your requirements).
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义 OpsWorks 层（当没有预定义的层能满足你的需求时）。
- en: 'Other layers: Linux stacks have the ability to create Ganglia layers for monitoring
    or Memcached layers for caching.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他层：Linux 堆栈可以创建用于监控的 Ganglia 层，或者用于缓存的 Memcached 层。
- en: Instances
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实例
- en: An instance in OpsWorks comprises a computing resource, such as an EC2 instance
    or on-premises server.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: OpsWorks 中的实例包括计算资源，如 EC2 实例或本地服务器。
- en: 'Users can add instances to an OpsWorks stack in one of two ways:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以通过两种方式将实例添加到 OpsWorks 堆栈中：
- en: You can use OpsWorks to provision the instance.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以使用 OpsWorks 来配置实例。
- en: In the case of Linux-based stacks, you can register a previously created EC2
    instance or on-premises server. This would then allow OpsWorks to manage the instance.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于基于 Linux 的堆栈，你可以注册一个已创建的 EC2 实例或本地服务器，这样就能让 OpsWorks 管理这个实例。
- en: AWS OpsWorks supports 64-bit versions of a few of the operating systems offered
    on the AWS EC2 platform, including Ubuntu and Amazon Linux, along with Windows
    Server.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: AWS OpsWorks 支持 AWS EC2 平台上几种操作系统的 64 位版本，包括 Ubuntu、Amazon Linux 以及 Windows
    Server。
- en: Apps
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用
- en: In OpsWorks, an **app** represents code that you would like to apply to an application
    server. The code itself will reside in an application repository, such as GitHub
    or S3\. When you deploy an application, OpsWorks triggers a deploy event.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpsWorks 中，**应用**表示你想应用于应用服务器的代码。代码本身将存储在应用程序库中，如 GitHub 或 S3。当你部署应用时，OpsWorks
    会触发一个部署事件。
- en: Lifecycle events in OpsWorks
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpsWorks 中的生命周期事件
- en: 'There are five series of events that happen during the lifecycle of an instance
    when managed by OpsWorks. The events are as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpsWorks 管理的实例生命周期中，会发生五个系列的事件。这些事件如下：
- en: Setup
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置
- en: Configure
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置
- en: Deploy
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署
- en: Undeploy
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卸载
- en: Shutdown
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关闭
- en: 'Let''s take a look at some of the events in a bit more detail:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看看一些事件：
- en: '**Setup**: This is triggered every time an instance boots up. It is also used
    for the initial installation of packages.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置**：每次实例启动时都会触发此事件。它还用于软件包的初始安装。'
- en: '**Deploy**: This event is triggered when deploying a new software version.
    The Deploy event also allows for customizable software deployments.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署**：此事件在部署新软件版本时触发。部署事件还允许进行可定制的软件部署。'
- en: '**Configure**: The Configure event is triggered on all instances when there
    is a state change. This event is used to ensure that the configuration is up to
    date on all instances.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置**：当实例发生状态变化时，所有实例都会触发配置事件。此事件用于确保所有实例的配置是最新的。'
- en: Access management in OpsWorks
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpsWorks中的访问管理
- en: If you have a requirement to provide individual user-level access to instances,
    be they Linux or Windows instances, then OpsWorks might be the solution you are
    looking for. The AWS OpsWorks service provides an easy way to allow individual
    users to log in to the server with their own credentials without the use of custom
    scripts.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要为每个用户提供访问实例的权限，无论是Linux还是Windows实例，那么OpsWorks可能是你在寻找的解决方案。AWS OpsWorks服务提供了一种简单的方法，让用户可以使用自己的凭证登录到服务器，而无需使用自定义脚本。
- en: If you have ever stood up EC2 instances and tried to get in via SSH, then you
    are most likely going to use the EC2 user or Ubuntu user, depending on the flavor
    of the operating system that you have used to provision your instance. If you
    would like to have custom users be able to access individual EC2 instances then
    this can become a complex setup, provisioning individual users and having them
    authenticate with either LDAP or an Active Directory Server.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经创建过EC2实例并尝试通过SSH访问，那么你很可能会使用EC2用户或Ubuntu用户，具体取决于你用来配置实例的操作系统类型。如果你希望自定义用户能够访问单个EC2实例，那么这可能会变成一个复杂的设置，需要为每个用户配置并通过LDAP或Active
    Directory服务器进行身份验证。
- en: The same is true if you are allocating Windows servers on AWS. You need to take
    the key pair that you used to stand up the instance and then, using that key pair,
    decrypt the administrator password.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在AWS上分配Windows服务器，也是如此。你需要使用创建实例时所用的密钥对，然后使用该密钥对解密管理员密码。
- en: Important note
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: All users for AWS OpsWorks Stacks must originate from **Identity and Access
    Management** (**IAM**) users.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 所有AWS OpsWorks堆栈的用户必须来自**身份与访问管理**（**IAM**）用户。
- en: Opsworks lets you provision access for users to access to the instances in the
    stack quickly and easily without the need to set up an Active Directory or LDAP
    server.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: OpsWorks让你可以为用户提供快速、轻松访问堆栈中实例的权限，而无需设置Active Directory或LDAP服务器。
- en: Types of users in OpsWorks
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OpsWorks中的用户类型
- en: 'There are two types of users inside of the AWS OpsWorks service: administrative
    users and regular OpsWorks users.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: AWS OpsWorks服务中有两种类型的用户：管理员用户和常规OpsWorks用户。
- en: 'Regular users in OpsWorks do not require an attached policy or any special
    OpsWorks permissions in their IAM user permissions. On a stack-by-stack basis,
    you can designate one or more of the following four permissions:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: OpsWorks中的常规用户不需要附加策略或任何特殊的OpsWorks权限。根据每个堆栈，你可以指定以下四个权限中的一个或多个：
- en: '**Show**: This permission allows users to view the stack only.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查看**：此权限允许用户仅查看堆栈。'
- en: '**Deploy**: The deploy permission also includes the show permission, and adds
    on extra permissions for users to update and deploy apps.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署**：部署权限还包括查看权限，并为用户添加额外的权限，以便更新和部署应用程序。'
- en: '**Manage**: The manage permission includes the deploy permission set along
    with adding stack management permissions, such as adding layers or instances.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理**：管理权限包括部署权限，并增加了堆栈管理权限，例如添加层或实例。'
- en: '**Deny**: The deny permission is used to deny specific permissions across a
    stack.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拒绝**：拒绝权限用于在堆栈中拒绝特定权限。'
- en: Importing users into OpsWorks
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将用户导入到OpsWorks
- en: 'Throughout the course of the exercises we have performed so far, we have created
    a number of IAM users in the account we have been using. We are going to use these
    users in our next exercise to practice importing users into OpsWorks:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们迄今为止执行的所有操作中，我们已经在使用的帐户中创建了多个IAM用户。我们将在下一次练习中使用这些用户来练习将用户导入到OpsWorks中：
- en: Log on to the AWS terminal as the administrative user.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以管理员用户身份登录到AWS终端。
- en: Once logged in, navigate to the `OpsWorks` in the top search box. Once **OpsWorks**
    appears, click on the **OpsWorks** icon to be taken to the **OpsWorks** service:![Figure
    10.3 – The OpsWorks service from the top search bar in the AWS Console
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，在顶部搜索框中导航到`OpsWorks`。一旦**OpsWorks**出现，点击**OpsWorks**图标进入**OpsWorks**服务：![图10.3
    – AWS控制台顶部搜索栏中的OpsWorks服务
- en: '](img/Figure_10.3_B17405.jpg)'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_10.3_B17405.jpg)'
- en: Figure 10.3 – The OpsWorks service from the top search bar in the AWS Console
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图10.3 – AWS控制台顶部搜索栏中的OpsWorks服务
- en: Even though once you import users, they appear in any one of the three sections
    of the OpsWorks service, we are going to import our users into **OpsWorks Stacks**.
    Click on the blue button on the bottom right, which is labeled **Go to OpsWorks
    Stacks**.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 即使导入用户后，他们出现在OpsWorks服务的任何一个部分，我们还是将用户导入到**OpsWorks Stacks**中。点击右下角的蓝色按钮，该按钮标记为**前往OpsWorks
    Stacks**。
- en: Now, in the OpsWorks Stacks service, look to the left-hand menu and find the
    menu item named **Users**. Click on **Users** to be taken to the **Users** management
    screen:![Figure 10.4 – The Users menu item on the OpsWorks Stacks side menu bar
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在OpsWorks Stacks服务中，查看左侧菜单，找到名为**用户**的菜单项。点击**用户**，进入**用户**管理界面：![图10.4 –
    OpsWorks Stacks侧边菜单栏中的用户菜单项
- en: '](img/Figure_10.4_B17405.jpg)'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_10.4_B17405.jpg)'
- en: Figure 10.4 – The Users menu item on the OpsWorks Stacks side menu bar
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图10.4 – OpsWorks Stacks侧边菜单栏中的用户菜单项
- en: In the main window pane, under any current users, find the link labeled **Import
    IAM users to US East (Ohio)**. Click on this link to be brought to the import
    page.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主窗口面板中，在任何现有用户下方，找到标记为**导入IAM用户到US East（俄亥俄州）**的链接。点击该链接进入导入页面。
- en: Once you have clicked on this link, a new menu will appear, allowing you to
    select the users that you want to import into OpsWorks. Select one or more users
    that you want to import into OpsWorks as OpsWorks users, and then click the blue
    **Import to OpsWorks** button:![Figure 10.5 – Selecting the users to import inside
    of the OpsWorks service
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦点击此链接，新的菜单将会出现，允许你选择要导入到OpsWorks的用户。选择一个或多个你想要导入到OpsWorks的用户，然后点击蓝色的**导入到OpsWorks**按钮：![图10.5
    – 在OpsWorks服务中选择要导入的用户
- en: '](img/Figure_10.5_B17405.jpg)'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_10.5_B17405.jpg)'
- en: Figure 10.5 – Selecting the users to import inside of the OpsWorks service
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图10.5 – 在OpsWorks服务中选择要导入的用户
- en: Now we should see a list of our users that we have imported into OpsWorks. If
    we wanted to add further users or restrict their permissions (such as giving a
    user self-management access to add their own SSH key, or the ability to change
    their own password), we could do that by editing the user. Let's edit one user.
    Click on the edit link next to our developer, Mariel.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们应该可以看到已导入到OpsWorks中的用户列表。如果我们想添加更多用户或限制他们的权限（例如，给予某个用户自我管理的权限以添加自己的SSH密钥，或更改自己的密码），我们可以通过编辑该用户来做到这一点。让我们编辑一个用户。点击开发者Mariel旁边的编辑链接。
- en: 'In another terminal window, print out the contents of your developer''s public
    SSH key that you created previously for the exercise in [*Chapter 8*](B17405_08_Final_JM_ePub.xhtml#_idTextAnchor212)*,*
    *Creating Workloads with CodeCommit and CodeBuild*. Copy this public key to your
    clipboard for use in the next step:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在另一个终端窗口中，打印出你之前为[*第8章*](B17405_08_Final_JM_ePub.xhtml#_idTextAnchor212)中的练习所创建的开发者公钥的内容，*创建使用CodeCommit和CodeBuild的工作负载*。将此公钥复制到剪贴板，以便在下一步中使用：
- en: '[PRE0]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Switching back to the AWS Console, and now on the user Mariel's screen, scroll
    down until you see the multi-line text box to the left of **Public SSH key**.
    Paste the public key that you have previously copied into this box:![Figure 10.6
    – Adding the developer's public SSH key to the OpsWorks user
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回AWS控制台，现在在用户Mariel的屏幕上，向下滚动，直到你看到位于**公钥SSH**左侧的多行文本框。将你之前复制的公钥粘贴到此框中：![图10.6
    – 将开发者的公钥添加到OpsWorks用户
- en: '](img/Figure_10.6_B17405.jpg)'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_10.6_B17405.jpg)'
- en: Figure 10.6 – Adding the developer's public SSH key to the OpsWorks user
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图10.6 – 将开发者的公钥添加到OpsWorks用户
- en: 'With the public key added, our developer can log in to an instance with the
    following:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加公钥后，我们的开发者可以使用以下方式登录到实例：
- en: '[PRE1]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We have now gone through the exercise of importing previously created IAM users
    into OpsWorks, along with setting up our developer's previously created SSH key
    so that they can easily log into an OpsWorks instance with their own username.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了将之前创建的IAM用户导入到OpsWorks的练习，并且设置了开发者之前创建的SSH密钥，以便他们可以使用自己的用户名轻松登录到OpsWorks实例。
- en: Next, we will look at some of the scenarios where you would want to use the
    OpsWorks service.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨一些你可能希望使用 OpsWorks 服务的场景。
- en: Use cases for AWS OpsWorks
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS OpsWorks 的使用案例
- en: After getting this far, you may be wondering what the best cases to put this
    service into practical use are. We will look at a few scenarios detailing when
    it would make sense to use the OpsWorks service. You need to understand that when
    evaluating either scenarios presented by test questions or real-life situations,
    OpsWorks is one of a number of deployment and management tools that AWS offers.
    Elastic Beanstalk is another tool that can be used to provision, deploy, and manage
    instances and code. We will cover this in much more depth in the next chapter,
    [*Chapter 11*](B17405_11_Final_JM_ePub.xhtml#_idTextAnchor284), *Using Elastic
    Beanstalk to Deploy your Application*.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 看完这一部分，你可能会想，怎样的情况适合将这个服务投入实际使用。我们将探讨几个场景，详细说明在何种情况下使用 OpsWorks 服务是有意义的。你需要明白，在评估测试题目或实际场景时，OpsWorks
    是 AWS 提供的一系列部署和管理工具中的一种。Elastic Beanstalk 也是一个可以用来配置、部署和管理实例和代码的工具。我们将在下一章 [*第
    11 章*](B17405_11_Final_JM_ePub.xhtml#_idTextAnchor284) 中更深入地讨论 *使用 Elastic Beanstalk
    部署你的应用程序*。
- en: Available OpsWorks platforms
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可用的 OpsWorks 平台
- en: OpsWorks, by its nature, is a configuration management service that provides
    managed instances of Chef and Puppet. Both of these software packages are industry-recognized
    automation platforms that enable you to use code and configure your servers via
    automation.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: OpsWorks 本质上是一种配置管理服务，提供受管的 Chef 和 Puppet 实例。这两种软件包都是行业认可的自动化平台，可以让你通过代码和自动化配置服务器。
- en: Now let's take a look at the three platforms that OpsWorks offers in a bit more
    depth.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更深入地了解 OpsWorks 提供的三种平台。
- en: OpsWorks Stacks
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpsWorks Stacks
- en: The original service offering from OpsWorks was OpsWorks Stacks. By using layers,
    it helps you manage and organize your EC2 instances.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: OpsWorks 的最初服务提供形式是 OpsWorks Stacks。通过使用层，它帮助你管理和组织 EC2 实例。
- en: OpsWorks for Chef Automate
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpsWorks for Chef Automate
- en: If you have a team that is well versed in the creation of Chef cookbooks and
    knows how to use some of the more advanced features of Chef, such as Knife, yet
    doesn't want to deal with the hassles and headaches of maintaining their own Chef
    servers, then Chef Automate can be a logical choice for your team.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的团队熟悉 Chef 食谱的创建，并且知道如何使用 Chef 的一些高级功能，如 Knife，但又不想处理维护自己的 Chef 服务器的麻烦和头痛问题，那么
    Chef Automate 可以成为你团队的合理选择。
- en: If you are currently using Chef to manage some of your on-premises infrastructure,
    OpsWorks for Chef Automate can be set up to manage hybrid environments from a
    single source.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你当前使用 Chef 管理一些本地基础设施，OpsWorks for Chef Automate 可以被配置为从单一来源管理混合环境。
- en: OpsWorks for Chef Automate also has the ability to perform compliance scans.
    These compliance scans allow you to audit your applications on a regular basis
    to detect exposures and non-compliant configurations.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: OpsWorks for Chef Automate 还具有执行合规性扫描的功能。这些合规性扫描允许你定期审计应用程序，以检测漏洞和不符合要求的配置。
- en: There is no need to worry about patching, updating, or backing up your Chef
    server, since these are some of the tasks that OpsWorks takes care of for you.
    OpsWorks for Chef Automate also allows you to manage the instance of Chef through
    the Chef Console, or via the command line with Knife.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你无需担心 Chef 服务器的补丁、更新或备份问题，因为这些正是 OpsWorks 为你处理的任务之一。OpsWorks for Chef Automate
    还允许你通过 Chef 控制台或通过命令行工具 Knife 来管理 Chef 实例。
- en: OpsWorks for Puppet Enterprise
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpsWorks for Puppet Enterprise
- en: Puppet helps enforce the desired state of the infrastructure with its set of
    tools.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 帮助通过其工具集强制执行基础设施的期望状态。
- en: If you are an existing Puppet user, then OpsWorks for Puppet Enterprise would
    be the most logical choice for you. Using OpsWorks for Puppet Enterprise, you
    can launch a Puppet master server in minutes, and then allow the OpsWorks service
    to handle operations tasks such as backup, software upgrades, and restorations.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是现有的 Puppet 用户，那么 OpsWorks for Puppet Enterprise 将是最合适的选择。使用 OpsWorks for
    Puppet Enterprise，你可以在几分钟内启动一个 Puppet 主服务器，然后让 OpsWorks 服务处理诸如备份、软件升级和恢复等操作任务。
- en: When using the Puppet Enterprise version of OpsWorks, the Puppet master houses
    and provisions all of the Puppet modules for the instances that need to run **Puppet
    Agent**.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 OpsWorks 的 Puppet Enterprise 版本时，Puppet 主服务器将为需要运行 **Puppet Agent** 的实例提供并配置所有
    Puppet 模块。
- en: Now that we have looked at the various different options available for OpsWorks,
    including the two options that use Chef recipes as the basis, and the one option
    that uses Puppet manifests, we will now examine a quick example. This example
    will give us a better understanding of how all the different components of OpsWorks
    come together when trying to pick out the best solution, both for our clients
    and when looking at possible solutions for the *DevOps Professional Exam*.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经查看了 OpsWorks 的不同选项，包括两个基于 Chef 食谱的选项，以及一个基于 Puppet 清单的选项。接下来，我们将查看一个快速示例。这个示例将帮助我们更好地理解当我们在为客户选择最佳解决方案时，OpsWorks
    的不同组件如何协同工作，同时也有助于我们准备 *DevOps 专业考试*。
- en: Creating and deploying a recipe
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建并部署一个食谱
- en: 'In this example, we will use OpsWorks to set up a stack and then create a layer.
    After our layer has been created, we will then use a recipe that is publicly available
    to deploy to our app:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用 OpsWorks 来设置一个 stack，并创建一个层。在我们创建好层之后，将使用一个公开的食谱将其部署到我们的应用程序：
- en: Log in to the AWS Console as your administrative user and use the unified search
    bar to search for the `OpsWorks` service. Once you see the OpsWorks icon appear,
    click on the icon to be taken to the **OpsWorks** main page:![Figure 10.7 – The
    OpsWorks service from the unified search bar
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为管理员用户登录到 AWS 控制台，并使用统一搜索框搜索 `OpsWorks` 服务。当你看到 OpsWorks 图标出现时，点击图标进入 **OpsWorks**
    主页面：![图 10.7 – 通过统一搜索框访问 OpsWorks 服务
- en: '](img/Figure_10.7_B17405.jpg)'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_10.7_B17405.jpg)'
- en: Figure 10.7 – The OpsWorks service from the unified search bar
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.7 – 通过统一搜索框访问 OpsWorks 服务
- en: On the OpsWorks Stacks page, click on the blue **Go to OpsWorks Stacks** button,
    which should be at the bottom left. This is the original offering from OpsWorks:![Figure
    10.8 – The OpsWorks Stacks option on the OpsWorks service page
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 OpsWorks Stacks 页面上，点击左下角的蓝色 **前往 OpsWorks Stacks** 按钮。这是 OpsWorks 的原始提供选项：![图
    10.8 – OpsWorks 服务页面上的 OpsWorks Stacks 选项
- en: '](img/Figure_10.8_B17405.jpg)'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_10.8_B17405.jpg)'
- en: Figure 10.8 – The OpsWorks Stacks option on the OpsWorks service page
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.8 – OpsWorks 服务页面上的 OpsWorks Stacks 选项
- en: Once on the OpsWorks Stacks page, click on the blue **Create stack** button
    at the top right-hand side of the page. This will start the process of creating
    a new stack in OpsWorks.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦进入 OpsWorks Stacks 页面，点击页面右上方的蓝色 **创建 stack** 按钮。此时将开始创建一个新的 OpsWorks stack。
- en: 'Next, we are going to create a `Chef-11` stack with the following options:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个名为 `Chef-11` 的 stack，并选择以下选项：
- en: '`chapt-10`'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chapt-10`'
- en: '`US East (Ohio)`'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`美国东部 (俄亥俄)`'
- en: '`11.10`'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`11.10`'
- en: '`YES`'
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`是`'
- en: '`Git`'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Git`'
- en: '**Repository URL** – [https://github.com/amazonwebservices/opsworks-example-cookbooks.git](https://github.com/amazonwebservices/opsworks-example-cookbooks.git)'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仓库 URL** – [https://github.com/amazonwebservices/opsworks-example-cookbooks.git](https://github.com/amazonwebservices/opsworks-example-cookbooks.git)'
- en: Leave everything else as it is.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持其他设置不变。
- en: Click on the blue **Add Stack** button.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击蓝色的 **添加 Stack** 按钮。
- en: Refer to the following screenshot:![Figure 10.9 – Adding the options to create
    the stack
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请参见下图：![图 10.9 – 添加选项以创建 stack
- en: '](img/Figure_10.9_B17405.jpg)'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_10.9_B17405.jpg)'
- en: Figure 10.9 – Adding the options to create the stack
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.9 – 添加选项以创建 stack
- en: Now we should have seen a **Congratulations! Your stack was created** notification.
    Our next step is to add a layer to our stack. We can click the **Add a layer**
    link and click add a layer:![Figure 10.10 – The congratulations banner showing
    the link to add a layer
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们应该看到一个 **恭喜！您的 stack 已创建** 的通知。接下来的步骤是向我们的 stack 中添加一个层。我们可以点击 **添加一个层**
    链接并点击添加层：![图 10.10 – 显示添加层链接的恭喜横幅
- en: '](img/Figure_10.10_B17405.jpg)'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_10.10_B17405.jpg)'
- en: Figure 10.10 – The congratulations banner showing the link to add a layer
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.10 – 显示添加层链接的恭喜横幅
- en: Now on the layer screen, we will select **PHP App Server** from the drop-down
    list. Once that is selected, then we can click the blue button that says **Add
    Layer**:![Figure 10.11 – Adding the layer in OpsWorks
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在层的页面上，我们将从下拉列表中选择 **PHP 应用服务器**。选择后，我们可以点击蓝色按钮 **添加层**：![图 10.11 – 在 OpsWorks
    中添加层
- en: '](img/Figure_10.11_B17405.jpg)'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_10.11_B17405.jpg)'
- en: Figure 10.11 – Adding the layer in OpsWorks
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.11 – 在 OpsWorks 中添加层
- en: With our layer available, we need to add an instance to our layer. With our
    **PHP App Server** page showing, we need to click the **Add instance** link at
    the very right-hand side:![Figure 10.12 – Showing our created layer in OpsWorks
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有了我们的层，接下来需要向该层添加一个实例。在 **PHP 应用服务器** 页面上，我们需要点击最右侧的 **Add instance** 链接：![图
    10.12 – 在 OpsWorks 中显示我们创建的层
- en: '](img/Figure_10.12_B17405.jpg)'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_10.12_B17405.jpg)'
- en: Figure 10.12 – Showing our created layer in OpsWorks
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.12 – 在 OpsWorks 中显示我们创建的层
- en: 'Now add the instance with the following details:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用以下信息添加实例：
- en: '`php-app1`'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`php-app1`'
- en: '`c5.large`'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`c5.large`'
- en: '**Subnet** – (leave the default subnet that is selected)'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**子网** – （保持选定的默认子网）'
- en: 'When you have filled in all of these options, click the blue **Add Instance**
    button at the bottom right-hand side of the selection window:'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当你填写完所有这些选项后，点击选择窗口右下角的蓝色 **Add Instance** 按钮：
- en: '![Figure 10.13 – Adding an instance to the OpsWorks layer'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 10.13 – 向 OpsWorks 层添加实例'
- en: '](img/Figure_10.13_B17405.jpg)'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_10.13_B17405.jpg)'
- en: Figure 10.13 – Adding an instance to the OpsWorks layer
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.13 – 向 OpsWorks 层添加实例
- en: With your instance added, you can now start your instance. You will notice that
    on the screen this instance type is designated as a 24/7 instance. Press the **start**
    link under the **Actions** column to start your instance.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加实例后，您可以启动实例。您会注意到在屏幕上该实例类型被指定为 24/7 实例。点击 **Actions** 列下的 **start** 链接来启动实例。
- en: After about a minute or so, the instance status should change from `stopped`
    or `booting` to `online`.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 大约一分钟后，实例状态应从 `stopped` 或 `booting` 变为 `online`。
- en: Congratulations, you now have your stack up and running!
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，你现在已经成功启动了堆栈！
- en: Now that we have seen how to create an OpsWorks stack, including its layers,
    instances, and app, we will take a closer look at deployments in OpsWorks. We
    will continue with our current stack that we just created, using that stack to
    create an app and then deploy it to the stack.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何创建 OpsWorks 堆栈，包括其层、实例和应用，接下来我们将更详细地了解 OpsWorks 中的部署。我们将继续使用我们刚刚创建的堆栈，利用该堆栈创建一个应用并将其部署到堆栈中。
- en: Deployments in OpsWorks
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpsWorks 中的部署
- en: 'When you deploy an app in OpsWorks, its primary purpose is to deploy the application
    code and all of the files to the server instances. We previously created a stack,
    a layer, and an instance in OpsWorks. Now we will add an app and make a deployment
    to the stack:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在 OpsWorks 中部署应用时，其主要目的是将应用代码和所有文件部署到服务器实例上。我们之前在 OpsWorks 中创建了一个堆栈、一个层和一个实例。现在我们将添加一个应用并将其部署到堆栈中：
- en: Return to the OpsWorks Console and enter back into the stack we had previously
    created – named `chapt-10`. You can enter the stack by clicking on the stack name.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到 OpsWorks 控制台并进入我们之前创建的堆栈——命名为 `chapt-10`。你可以通过点击堆栈名称进入该堆栈。
- en: Once inside the stack, on the left-hand menu, click on the item named **Apps**
    to be taken to the apps page. At the top of this page, click on the blue button
    labeled **Add App** to create a new app:![Figure 10.14 – Apps and Deployments
    in the left-hand menu in OpsWorks
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入堆栈后，在左侧菜单中点击名为 **Apps** 的项，进入应用页面。在该页面顶部，点击蓝色的 **Add App** 按钮以创建一个新的应用：![图
    10.14 – OpsWorks 左侧菜单中的应用和部署
- en: '](img/Figure_10.14_B17405.jpg)'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_10.14_B17405.jpg)'
- en: Figure 10.14 – Apps and Deployments in the left-hand menu in OpsWorks
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.14 – OpsWorks 左侧菜单中的应用和部署
- en: 'Use the following values to populate your app:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下值来填充你的应用：
- en: '`SampleAPP`'
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SampleAPP`'
- en: '`PHP`'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PHP`'
- en: '`Git`'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Git`'
- en: '**Repository URL** – [https://github.com/awslabs/opsworks-demo-php-simple-app.git](https://github.com/awslabs/opsworks-demo-php-simple-app.git)'
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仓库 URL** – [https://github.com/awslabs/opsworks-demo-php-simple-app.git](https://github.com/awslabs/opsworks-demo-php-simple-app.git)'
- en: 'All other values can be left blank. After you have filled out these values
    click the blue **Add App** button at the bottom of the screen:'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其他所有值可以留空。在填写完这些值后，点击屏幕底部的蓝色 **Add App** 按钮：
- en: '![Figure 10.15 – Adding the app settings'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 10.15 – 添加应用设置'
- en: '](img/Figure_10.15_B17405.jpg)'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_10.15_B17405.jpg)'
- en: Figure 10.15 – Adding the app settings
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 10.15 – 添加应用设置
- en: You should now see a screen showing our app. It's now time to deploy the app
    using OpsWorks. OpsWorks makes this easy with the **deploy** link being directly
    under the **Actions** column at the right-hand side of the app. Click the **deploy**
    link to start the deployment process:![Figure 10.16 – After the app has been created,
    it is ready to be deployed
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在应该看到一个显示我们应用程序的屏幕。现在是时候使用OpsWorks部署应用程序了。OpsWorks通过在应用程序右侧的**Actions**列下方直接提供**deploy**链接来简化这一过程。点击**deploy**链接开始部署过程：![图10.16
    – 应用程序创建后，已准备好部署
- en: '](img/Figure_10.16_B17405.jpg)'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_10.16_B17405.jpg)'
- en: Figure 10.16 – After the app has been created, it is ready to be deployed
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图10.16 – 应用程序创建后，已准备好部署
- en: On the deploy screen, before you deploy, click on the drop-down menu that currently
    has **Deploy** selected to see all of the different options for deployment. In
    this section, you can not only deploy the app, but also allow OpsWorks to undeploy,
    roll back, start, or stop a web server. Make sure that you retain the setting
    on deployment, and simply keep all of the defaults. Then click the blue **Deploy**
    button at the bottom of the screen.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在部署屏幕上，在您部署之前，点击当前已选择**Deploy**的下拉菜单，查看所有不同的部署选项。在这一部分，您不仅可以部署应用程序，还可以让OpsWorks撤销部署、回滚、启动或停止Web服务器。确保保留部署设置，并保持所有默认选项。然后点击屏幕底部的蓝色**Deploy**按钮。
- en: We have just completed provisioning an app using a custom recipe. We also deployed
    that app to the instance that we previously created.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚使用自定义配方完成了应用程序的配置，并将该应用程序部署到我们之前创建的实例上。
- en: Monitoring OpsWorks
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控OpsWorks
- en: 'You can monitor your AWS OpsWorks stacks in a number of ways:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过多种方式监控您的AWS OpsWorks堆栈：
- en: Using Amazon CloudWatch
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Amazon CloudWatch
- en: Using Amazon CloudWatch Logs
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Amazon CloudWatch Logs
- en: Using Amazon CloudWatch Events
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Amazon CloudWatch Events
- en: Using Amazon CloudTrail
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Amazon CloudTrail
- en: With Amazon CloudWatch, there are 13 custom metrics provided for detailed monitoring
    of each of the instances in the stack. There is also a custom monitoring page
    created in OpsWorks that summarizes the data and makes it easy to understand these
    metrics. If you are running Windows instances, the monitoring page will not display
    the metrics for those Windows instances. The metrics are displayed for the entire
    stack, but you can also concentrate on a particular layer or a particular instance.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Amazon CloudWatch，有13个自定义指标用于详细监控堆栈中每个实例的状态。OpsWorks中还创建了一个自定义监控页面，总结了这些数据，并使这些指标易于理解。如果您运行的是Windows实例，监控页面将不会显示这些Windows实例的指标。指标将显示整个堆栈的数据，但您也可以专注于特定的层或特定的实例。
- en: 'If you still have the deployment running from the previous exercise, you can
    click the **Monitoring** menu icon to be taken to the dashboard. This can give
    you quick insights into the state of your application:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仍在运行上一个练习中的部署，您可以点击**Monitoring**菜单图标，进入仪表盘。这将为您提供关于应用程序状态的快速见解：
- en: '![Figure 10.17 – Monitoring dashboard in OpsWorks'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.17 – OpsWorks中的监控仪表盘'
- en: '](img/Figure_10.17_B17405.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.17_B17405.jpg)'
- en: Figure 10.17 – Monitoring dashboard in OpsWorks
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.17 – OpsWorks中的监控仪表盘
- en: We have just covered the full OpsWorks process from creating a stack to monitoring
    the stack. Now let's review what we learned.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚覆盖了从创建堆栈到监控堆栈的完整OpsWorks流程。现在让我们回顾一下我们学到的内容。
- en: Summary
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter we looked at how the OpsWorks service can help us provision
    and deploy both our infrastructure and application. It does this by using stacks
    and layers. We also learned that OpsWorks is a good way to quickly transition
    a team that is currently using either Chef or Puppet to provision their servers
    and/or applications in their current environment.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了OpsWorks服务如何帮助我们同时提供和部署我们的基础设施和应用程序。它通过使用堆栈和层来实现这一点。我们还了解到，OpsWorks是将当前使用Chef或Puppet来提供服务器和/或应用程序的团队迅速过渡到其当前环境的一个好方法。
- en: In the next chapter, we will learn about the Elastic Beanstalk service and how
    it can help you deploy your applications into environments, create revisions for
    those applications, and help you monitor those applications using a number of
    different programming languages.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习Elastic Beanstalk服务及其如何帮助您将应用程序部署到环境中，为这些应用程序创建版本，并使用多种不同的编程语言来监控这些应用程序。
- en: Review questions
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复习问题
- en: You have been brought into a company that is starting its move to the AWS cloud.
    They have a sizable library of Chef recipes that they currently use to manage
    their on-premises systems. The recipes have already been moved to a private GitHub
    repository. The individual who managed and administrated the Chef servers left
    around one month ago. The company is not prepared to re-write all of the recipes
    to another means in the current fiscal year with their current available resources.
    What AWS service or services would be best for their migration?
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你被引入到一家公司，该公司正在启动迁移到 AWS 云的工作。他们有一个庞大的 Chef 配方库，目前用于管理他们的本地系统。这些配方已经迁移到一个私有
    GitHub 仓库。负责管理和维护 Chef 服务器的人员大约在一个月前离职。公司目前没有足够的资源在本财年内重写所有配方。你会推荐哪些 AWS 服务来帮助他们迁移？
- en: a) Use AWS Server Migration Service to move the current Chef server to the AWS
    cloud.
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) 使用 AWS 服务器迁移服务将当前的 Chef 服务器迁移到 AWS 云。
- en: b) Stand up the latest version of Chef on EC2 with autoscaling for redundancy.
    Add a Route 53 record in a locally hosted zone for the Chef server. Create a base
    AMI that already has the Chef agent pre-installed and connects to the DNS entry
    configured in Route 53\.
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) 在 EC2 上启动最新版本的 Chef，并设置自动扩展以保证冗余。在本地托管区域的 Route 53 中添加一个记录指向 Chef 服务器。创建一个基础
    AMI，已经预安装了 Chef 代理，并且连接到在 Route 53 中配置的 DNS 记录。
- en: c) Set up the applications as stacks in OpsWorks. Create all the different users
    as IAM users, and then import them into OpsWorks. Then assign the OpsWorks users
    to individual stacks as needed.
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) 将应用程序设置为 OpsWorks 中的堆栈。创建所有不同的用户作为 IAM 用户，然后将它们导入到 OpsWorks 中。接着根据需要将 OpsWorks
    用户分配到各个堆栈中。
- en: d) Create a CodePipeline instance to install and configure the applications
    as needed, using headless Chef in the user `init` script.
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) 创建一个 CodePipeline 实例，根据需要安装和配置应用程序，使用无头 Chef 在用户的`init`脚本中进行配置。
- en: A company has developed a PHP shopping cart platform. The platform is currently
    being managed and deployed by AWS OpsWorks with separate stacks for dev, QA, and
    production. With most of the PHP developers who originally developed the platform
    no longer with the company, management has given the go-ahead to start re-developing
    the platform in Python. How should the company manage the deployment?
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一家公司开发了一个 PHP 购物车平台。该平台目前由 AWS OpsWorks 管理和部署，开发、QA 和生产环境分别使用不同的堆栈。由于最初开发该平台的
    PHP 开发人员大多已经离开公司，管理层已批准开始用 Python 重新开发该平台。公司应如何管理部署？
- en: a) Create a new OpsWorks stack that contains a new layer with the new Python
    code. To make the transition over to the new stack, the organization should use
    a blue/green deployment.
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) 创建一个新的 OpsWorks 堆栈，包含一个新的层和新的 Python 代码。为了过渡到新堆栈，组织应使用蓝绿部署。
- en: b) Create a new OpsWorks stack that has the new Python code manage separate
    deployments of the application from the secondary stack.
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) 创建一个新的 OpsWorks 堆栈，使用新的 Python 代码管理应用程序的独立部署，放置在次要堆栈中。
- en: c) Update the existing stack with the new Python application code and deploy
    the app using the Deploy lifecycle event.
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) 使用新的 Python 应用程序代码更新现有的堆栈，并通过 Deploy 生命周期事件部署该应用程序。
- en: d) Create a new layer on the OpsWorks stack with the new Python code. To make
    the transition over to the new stack, the organization should use a rolling deployment.
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) 在 OpsWorks 堆栈上创建一个新的层，并使用新的 Python 代码。为了顺利过渡到新的堆栈，组织应使用滚动部署。
- en: An enterprise oversees a combination of Windows servers and Linux servers (Red
    Hat Enterprise Linux and Amazon Linux) in their on-premises data center, along
    with their AWS account. After recently being audited, the CTO was told that there
    was no process in place for core application patches, nor for updating the operating
    systems. There was no baseline level of patching for any of the servers, either
    in the on-premises data centers or in the AWS cloud. You have been called in to
    help remedy the situation. What solution would you recommend that would be not
    only the most consistent for providing and maintaining OS and core application
    patch levels but would also prove the most reliable?
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一家企业在其本地数据中心管理一组 Windows 服务器和 Linux 服务器（Red Hat Enterprise Linux 和 Amazon Linux），并且还管理着
    AWS 账户。在最近的审计中，首席技术官被告知没有针对核心应用程序补丁和操作系统更新的流程。无论是在本地数据中心还是 AWS 云中，所有服务器的补丁管理都没有基准级别。你被召来帮助解决这个问题。你会推荐什么解决方案，既能够提供和维护操作系统和核心应用程序补丁的最一致性，又能确保最可靠性？
- en: a) Use AWS Systems Manager to store the credentials in the parameter store,
    and then create resource groups for the instances. Allow the Systems Manager `Run`
    command to deploy patches remotely using the credentials stored in the parameter
    store.
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) 使用 AWS Systems Manager 将凭证存储在参数存储中，然后为实例创建资源组。允许 Systems Manager `Run` 命令使用存储在参数存储中的凭证远程部署补丁。
- en: b) Install the OpsWorks agent on all the servers, both on-premises and in the
    AWS account. Using a single stack, create different layers for the different operating
    systems. Create maintenance windows whenever an operating system or core application
    patch needs to be applied.
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) 在所有服务器上安装 OpsWorks 代理，包括本地服务器和 AWS 账户中的服务器。使用一个堆栈，为不同的操作系统创建不同的层。每当需要应用操作系统或核心应用程序补丁时，创建维护窗口。
- en: c) Configure the AWS Systems Manager agent on all of the servers, both on-premises
    and in the AWS account. Create resource groups for the instances and then allow
    Systems Manager Patch Manager to run with a pre-configured baseline, using set
    maintenance windows.
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) 在所有服务器上配置 AWS Systems Manager 代理，包括本地服务器和 AWS 账户中的服务器。为实例创建资源组，然后允许 Systems
    Manager Patch Manager 在预配置的基准下运行，并使用设置的维护窗口。
- en: d) Install the OpsWorks agent on all the servers, both on-premises and in the
    AWS account. Create two different stacks, one for Windows and the other one for
    the Red Hat Linux instances. Create a Lambda job that will curl an RSS feed two
    times a day, checking for new patch updates. If it finds one, then it will trigger
    the deployment on the OpsWorks layer.
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) 在所有服务器上安装 OpsWorks 代理，包括本地服务器和 AWS 账户中的服务器。创建两个不同的堆栈，一个用于 Windows，另一个用于 Red
    Hat Linux 实例。创建一个 Lambda 任务，每天两次请求 RSS 源，检查是否有新的补丁更新。如果发现更新，将触发 OpsWorks 层上的部署。
- en: Review answers
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审查答案
- en: c
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: c
- en: a
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: a
- en: c
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: c
