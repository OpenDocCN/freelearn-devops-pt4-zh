- en: 'Chapter 11: Using Elastic Beanstalk to Deploy your Application'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章：使用 Elastic Beanstalk 部署你的应用程序
- en: Knowing and understanding Elastic Beanstalk is essential to the DevOps Pro exam.
    How to use the service's nuances, what the service's limitations are, and especially
    the way Beanstalk interacts with containers can be vital knowledge for both passing
    the exam and getting application teams up and running quickly in the real world.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 了解并理解 Elastic Beanstalk 对于 DevOps Pro 考试至关重要。如何使用该服务的细微差别、该服务的局限性，特别是 Beanstalk
    与容器的交互方式，对于通过考试和快速让应用团队在现实世界中启动应用程序都是至关重要的知识。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Understanding the built-in functionality of Elastic Beanstalk
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Elastic Beanstalk 的内建功能
- en: Creating a service role in the IAM console
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 IAM 控制台中创建服务角色
- en: Installing and using the Elastic Beanstalk command-line interface (EB CLI)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装并使用 Elastic Beanstalk 命令行接口（EB CLI）
- en: Understanding advanced configuration options with .ebextensions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解通过 .ebextensions 进行高级配置选项
- en: Using Elastic Beanstalk to deploy an application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Elastic Beanstalk 部署应用程序
- en: Elastic Beanstalk use cases
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Elastic Beanstalk 的应用场景
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Since Elastic Beanstalk requires some local development and we will be writing
    our example program in Python, you will need to have Python 3.x locally installed
    on your workstation. At the time of writing, the most up-to-date version of Python,
    which Elastic Beanstalk supported, was 3.8.5, and hence this would be the version
    of Python that we will be using in this chapter. It is the suggestion of the author
    that you install the `pyenv` Python runtime manager to help you to be able to
    develop and manage multiple versions of Python on your local workstation. You
    can find the project's information and how to install it on its GitHub site, which
    can be found at [https://github.com/pyenv/pyenv](https://github.com/pyenv/pyenv).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Elastic Beanstalk 需要一些本地开发，并且我们将在本章中用 Python 编写示例程序，因此你需要在工作站本地安装 Python
    3.x。在撰写本文时，Elastic Beanstalk 支持的最新 Python 版本为 3.8.5，因此我们将在本章使用该版本的 Python。作者建议你安装
    `pyenv` Python 运行时管理器，以帮助你在本地工作站上开发和管理多个 Python 版本。你可以在该项目的 GitHub 页面找到有关信息及安装方法，网址为
    [https://github.com/pyenv/pyenv](https://github.com/pyenv/pyenv)。
- en: Understanding the built-in functionality of Elastic Beanstalk
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Elastic Beanstalk 的内建功能
- en: 'Elastic Beanstalk is a flexible platform that allows developers who develop
    in languages such as Python, Java, Ruby, .NET, PHP: Hypertext pre-processor (PHP),
    Go, or even Docker containers to develop and scale out their applications swiftly.
    Elastic Beanstalk is a **Platform as a Service** (**PaaS**), which means that
    it is serving as an abstraction layer above all of the other services that it
    is helping orchestrate and manage. This makes it easy for developers who are eager
    to get going with the **Amazon Web Services** (**AWS**) cloud but might not have
    a vast amount of knowledge of items such as setting up infrastructure or monitoring,
    the ability to get started, and concentrating on their application in the language
    of their choice.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Elastic Beanstalk 是一个灵活的平台，允许开发人员在如 Python、Java、Ruby、.NET、PHP（超文本预处理器）、Go 甚至
    Docker 容器等语言中开发并快速扩展他们的应用程序。Elastic Beanstalk 是一个**平台即服务**（**PaaS**），这意味着它作为所有其他服务的抽象层，帮助协调和管理这些服务。这使得那些急于开始使用
    **Amazon Web Services**（**AWS**）云的开发人员，虽然可能对设置基础设施或监控等内容了解不多，仍然能够顺利开始，并专注于他们所选择语言中的应用程序开发。
- en: 'Elastic Beanstalk is constantly updating the languages and platforms that it
    supports. While it does not always support the latest version of a language, it
    does try to keep up to date with newer revisions and then sunset older versions.
    This is important to remember since legacy applications cannot just be pushed
    to the cloud and then left to run forever. There are times when applications will
    need to be upgraded in order to retain the functionality of the Elastic Beanstalk
    service. Here are some of the services that Elastic Beanstalk incorporates:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Elastic Beanstalk 持续更新其支持的语言和平台。尽管它并不总是支持语言的最新版本，但它确实尽力保持更新并逐渐淘汰旧版本。记住这一点很重要，因为旧版应用程序不能直接推送到云端并一直运行下去。有时候，应用程序需要升级，以便保持
    Elastic Beanstalk 服务的功能。以下是 Elastic Beanstalk 集成的一些服务：
- en: '![Figure 11.1 – A look at some of the services that Elastic Beanstalk incorporates'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.1 – 查看 Elastic Beanstalk 集成的一些服务'
- en: '](img/Figure_11.1_B17405.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.1_B17405.jpg)'
- en: Figure 11.1 – A look at some of the services that Elastic Beanstalk incorporates
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1 – 一些 Elastic Beanstalk 集成的服务概览
- en: Before the Elastic Beanstalk service was available for use, developers had to
    figure out which services to use to work together, and not only for computing,
    load balancing, and routing. They also needed to—either manually or with the help
    of a service such as CloudFormation templates—incorporate security, storage, and
    monitoring into their application. For developers who wanted to get up and running
    quickly on the AWS cloud, this could present a challenge, as they were used to
    creating application code rather than configuring environments.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Elastic Beanstalk 服务可供使用之前，开发人员必须弄清楚哪些服务可以协同工作，不仅仅是计算、负载均衡和路由，还需要——无论是手动还是借助像
    CloudFormation 模板这样的服务——将安全性、存储和监控集成到他们的应用程序中。对于那些希望快速启动并运行 AWS 云服务的开发人员来说，这可能是一个挑战，因为他们习惯于创建应用程序代码，而不是配置环境。
- en: Different environments in Elastic Beanstalk
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Elastic Beanstalk 中的不同环境
- en: 'Any type of application that you build and deploy using Elastic Beanstalk allows
    you to manage all of the different components contained for that application as
    a single environment. There are two major classifications of environments that
    are run using the Beanstalk framework: web server environments and worker environments.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Elastic Beanstalk 构建并部署的任何类型应用程序都允许你将该应用程序中包含的所有不同组件作为单一环境进行管理。通过 Beanstalk
    框架运行的环境主要分为两类：Web 服务器环境和工作环境。
- en: Web server environments
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Web 服务器环境
- en: 'In a web server environment, Elastic Beanstalk manages three things: a load
    balancer, an **Auto Scaling Group** (**ASG**), and the requested number of **Elastic
    Compute Cloud** (**EC2**) instances. Even if your application has been containerized,
    those containers still need an EC2 instance to run on, and hence the web server
    environment will bring up a corresponding set of EC2 instances in which to run
    the containers.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Web 服务器环境中，Elastic Beanstalk 管理三项内容：负载均衡器、**自动扩展组**（**ASG**）以及请求的 **弹性计算云**（**EC2**）实例数量。即使你的应用程序已被容器化，这些容器仍然需要
    EC2 实例来运行，因此 Web 服务器环境将启动一组相应的 EC2 实例来运行容器。
- en: A web server environment also creates a `53` service and is therefore highly
    available and scalable. If desired, you can register your own domain name and
    use the Route `53` service to point to your load balancer so that instead of the
    generic CNAME that was originally created for you, your customized URL can be
    what drives the traffic to your web application.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Web 服务器环境还会创建一个 `53` 服务，因此它具有高度可用性和可扩展性。如果需要，你可以注册自己的域名，并使用 Route `53` 服务将其指向负载均衡器，这样你可以使用自定义的
    URL 而非原本为你创建的通用 CNAME，从而驱动流量访问你的 Web 应用程序。
- en: Worker environments
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工作环境
- en: 'The big difference in a worker environment provisioned by Elastic Beanstalk
    versus a web server environment is that in a worker environment, a `53`. Beanstalk
    automatically installs a daemon that allows for autoscaling, as illustrated in
    the following diagram:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Elastic Beanstalk 提供的工作环境与 Web 服务器环境的主要区别在于，在工作环境中，`53`。Beanstalk 会自动安装一个守护进程，用于自动扩展，以下图所示：
- en: '![Figure 11.2 – Web server and worker environments in Elastic Beanstalk'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.2 – Elastic Beanstalk 中的 Web 服务器和工作环境'
- en: '](img/Figure_11.2_B17405.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.2_B17405.jpg)'
- en: Figure 11.2 – Web server and worker environments in Elastic Beanstalk
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2 – Elastic Beanstalk 中的 Web 服务器和工作环境
- en: Next, we are going to cover the different components that make up Elastic Beanstalk.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将介绍构成 Elastic Beanstalk 的不同组件。
- en: The different components that make up Elastic Beanstalk
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构成 Elastic Beanstalk 的不同组件
- en: No matter which of the different types of environments you are trying to build
    using the Beanstalk service, it will be composed of multiple components.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你正在使用 Beanstalk 服务构建哪种类型的环境，它都将由多个组件组成。
- en: Application
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用程序
- en: In Elastic Beanstalk, a logical grouping of components is called an **application**.
    This includes environments and environment configurations, along with versions.
    All of these items are grouped into a folder-like structure, and this folder is
    the application.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Elastic Beanstalk 中，组件的逻辑分组称为 **应用程序**。这包括环境和环境配置以及版本。所有这些项目都被组合成类似文件夹的结构，而这个文件夹就是应用程序。
- en: Application version
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用版本
- en: 'Elastic Beanstalk allows for the packaging and labeling of specific versions
    of an application. Each specific packaged version of an application is known as
    an **application version**. These versions are packaged up and sent to the **Simple
    Storage Service** (**S3**) service behind the scenes for deployment to one or
    more of your environments, as illustrated in the following diagram:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Elastic Beanstalk 允许将特定版本的应用程序打包并标记。每个特定打包的应用程序版本被称为**应用版本**。这些版本会被打包并发送到背后的**简单存储服务**（**S3**）服务，用于部署到一个或多个环境，如下图所示：
- en: '![Figure 11.3 – Application versions can only be deployed to a single environment'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.3 – 应用版本只能部署到单个环境'
- en: '](img/Figure_11.3_B17405.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.3_B17405.jpg)'
- en: Figure 11.3 – Application versions can only be deployed to a single environment
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.3 – 应用版本只能部署到单个环境
- en: You can have multiple versions running in various environments using Elastic
    Beanstalk, such as your current stable version running in your production environment
    and your latest version running in your test environment. Only one version can
    be deployed to a single environment at a time.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 Elastic Beanstalk 中运行多个版本的应用，分别运行在不同的环境中，例如在生产环境中运行当前稳定版本，在测试环境中运行最新版本。每次只能将一个版本部署到单个环境。
- en: Environment
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 环境
- en: A collection of running resources in Elastic Beanstalk running a specific application
    version is known as an **environment**.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Elastic Beanstalk 中运行特定应用版本的一组运行资源被称为**环境**。
- en: Environment configuration
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 环境配置
- en: 'As you define the parameters and settings for your environment, these become
    the **environment configuration**. As you iterate on your application and change
    the settings to the underlying configuration of the environment, then Beanstalk
    deploys those changes automatically and adds or removes items based on your configuration,
    as illustrated in the following diagram:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当你定义环境的参数和设置时，这些就构成了**环境配置**。当你对应用进行迭代，并更改环境的底层配置设置时，Beanstalk 会自动部署这些更改，并根据你的配置添加或删除项目，如下图所示：
- en: '![Figure 11.4 – A closer look at an Elastic Beanstalk configuration'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.4 – 更深入地了解 Elastic Beanstalk 配置'
- en: '](img/Figure_11.4_B17405.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.4_B17405.jpg)'
- en: Figure 11.4 – A closer look at an Elastic Beanstalk configuration
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.4 – 更深入地了解 Elastic Beanstalk 配置
- en: Configuration template
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置模板
- en: The configuration template in Elastic Beanstalk is a starting point for creating
    customized environment configurations.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Elastic Beanstalk 中的配置模板是创建自定义环境配置的起点。
- en: Saved configuration
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 已保存的配置
- en: 'Saved configurations are **YAML Ain''t Markup Language** (**YAML**) files stored
    in S3 that can be put to use for other running environments or during environment
    creation. Saved configurations define the following values:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 已保存的配置是存储在 S3 中的**YAML Ain't Markup Language**（**YAML**）文件，可以在其他运行中的环境或环境创建过程中使用。保存的配置定义了以下值：
- en: Platform version
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平台版本
- en: Tier
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 层级
- en: Configuration option settings
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置选项设置
- en: Tags
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签
- en: Platform
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 平台
- en: When you incorporate the operating system of your choice and the preferred programming
    language that you will use, your web and application servers all become your **platform**.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当你选择操作系统和编程语言时，所有的网页和应用服务器都构成了你的**平台**。
- en: Now that we have an understanding of the Elastic Beanstalk components and platform,
    let's go through an exercise of creating an application in Elastic Beanstalk,
    starting with creating the necessary permissions.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 Elastic Beanstalk 的组件和平台，接下来我们将进行一个练习，创建一个 Elastic Beanstalk 应用，从创建必要的权限开始。
- en: Creating a service role in the IAM console
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 IAM 控制台中创建服务角色
- en: Before we begin, we will need to create a service role for Beanstalk to use
    when pushing out the environments and applications. A failure to do so, or even
    a failure to update a previously created service role that was created a few years
    ago, can result in errors and frustration when moving further along in the chapter.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我们需要为 Beanstalk 创建一个服务角色，供其在推送环境和应用时使用。如果没有这样做，或者没有更新几年前创建的服务角色，可能会在本章后续操作中出现错误并带来挫败感。
- en: 'Start by logging in to the **AWS Management Console** with your administrative
    user, and then follow these next steps:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用管理员用户登录到**AWS 管理控制台**，然后按照以下步骤操作：
- en: Once you have logged in, navigate to **IAM service**.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，导航到**IAM 服务**。
- en: In the left-hand menu, click on **Roles**.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧菜单中，点击**角色**。
- en: Once on the **Create Role** page, keep the trusted entity as **AWS Service**,
    and then, in the middle of the page, choose **Elastic Beanstalk** as the service
    for which you would like to create a service role. Click on the **Elastic Beanstalk**
    service.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**创建角色**页面，保持信任实体为**AWS 服务**，然后在页面中间，选择**Elastic Beanstalk**作为您希望创建服务角色的服务。点击**Elastic
    Beanstalk**服务。
- en: 'After you have selected the **Elastic Beanstalk** service, another set of selections
    will appear at the bottom of the screen so that you can select your use case.
    Choose the use case of **Elastic Beanstalk**. After you have clicked on **Elastic
    Beanstalk** in the use case and it is highlighted in blue, as shown in the following
    screenshot, then you can click on the blue button on the bottom right-hand side
    of the screen labeled **Next: Tags**:![Figure 11.5 – Selecting the Elastic Beanstalk
    use case in Identity and Access Management (IAM)'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Elastic Beanstalk**服务后，屏幕底部会出现一组新的选项，供您选择使用案例。选择**Elastic Beanstalk**的使用案例。点击**Elastic
    Beanstalk**用例后，该选项会以蓝色高亮显示，如下图所示，然后您可以点击屏幕右下角的蓝色按钮**下一步：标签**：![图 11.5 – 在身份与访问管理（IAM）中选择
    Elastic Beanstalk 用例
- en: '](img/Figure_11.5_B17405.jpg)'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_11.5_B17405.jpg)'
- en: Figure 11.5 – Selecting the Elastic Beanstalk use case in Identity and Access
    Management (IAM)
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.5 – 在身份与访问管理（IAM）中选择 Elastic Beanstalk 用例
- en: After clicking **Next** and landing on the **Roles** screen, the default Beanstalk
    policy should already be populated for you. Click on the blue button at the bottom
    of the screen labeled **Next:Tags** to move on to the next screen.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**后，进入**角色**页面，默认的 Beanstalk 策略应该已经为您填充。点击屏幕底部的蓝色按钮**下一步：标签**，继续到下一个页面。
- en: Tags are optional and you can add them if you wish; otherwise, click the blue
    **Next:Review** button at the bottom of the screen.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标签是可选的，您可以根据需要添加；否则，点击屏幕底部的蓝色**下一步：审查**按钮。
- en: On the `AWSServiceRoleForElasticBeanstalk`. Click the blue **Create role** button
    at the bottom of the page to create this role.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `AWSServiceRoleForElasticBeanstalk` 页面，点击页面底部的蓝色**创建角色**按钮以创建此角色。
- en: Now that we have our service role created, we can proceed with using the Elastic
    Beanstalk service.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了服务角色，可以继续使用 Elastic Beanstalk 服务。
- en: Installing and using the Elastic Beanstalk command-line interface (EB CLI)
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和使用 Elastic Beanstalk 命令行界面（EB CLI）
- en: There are a number of commands available from the AWS CLI that allow you, as
    a user, to take advantage of Elastic Beanstalk.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CLI 提供了多个命令，允许用户利用 Elastic Beanstalk。
- en: 'Basic commands supplied by the EB CLI include those that will do things all
    the way from creating the correct project structure in your local environment
    to quickly and efficiently pulling down the log files from your instances for
    review. We will now review the basic commands that the EB CLI provides, along
    with a short description of their nature, as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: EB CLI 提供的基本命令包括从在本地环境中创建正确的项目结构，到快速高效地拉取实例的日志文件以供审核的命令。我们将回顾 EB CLI 提供的基本命令，并简要说明其功能，如下所示：
- en: '`eb create`: This command will create a new local environment for Elastic Beanstalk
    and deploys an initial application version to that directory structure.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eb create`：此命令将在 Elastic Beanstalk 中创建一个新的本地环境，并将初始应用版本部署到该目录结构中。'
- en: '`eb status`: This command returns the status of your environment, including
    items such as application name, region, CNAME, and health status.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eb status`：此命令返回您的环境状态，包括应用程序名称、区域、CNAME 和健康状态等信息。'
- en: '`eb health`: This command returns the health status of the instances in your
    environment, updating every 10 seconds.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eb health`：此命令返回环境中实例的健康状态，每 10 秒更新一次。'
- en: '`eb events`: This command returns a list of log statements that state the most
    recent events for the current Elastic Beanstalk environment. Examples of events
    can include the creation of resources such as instances or load balancers or the
    changing of the environment status to different health levels.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eb events`：此命令返回当前 Elastic Beanstalk 环境的日志语句列表，列出最近的事件。事件示例包括资源的创建，如实例或负载均衡器，或环境状态更改为不同的健康级别。'
- en: '`eb ssh`: This command will temporarily open port `22` on your security groups
    for all incoming traffic if you have not configured port `22` for a specific **classless
    inter-domain routing** (**CIDR**) range of addresses. It will then prompt you
    to connect to your running instance or allow you to select which running instance
    you would like to connect to via **Secure Shell** (**SSH**).'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eb ssh`：如果您没有为特定的**无类域间路由**（**CIDR**）地址范围配置端口`22`，此命令将临时打开安全组的`22`端口，允许所有传入流量。然后，它会提示您连接到正在运行的实例，或者允许您选择要通过**安全外壳**（**SSH**）连接的实例。'
- en: '`eb logs`: This command can perform two explicit commands regarding the logging
    of files, as follows:'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eb logs`：此命令可以执行两个与文件日志相关的明确命令，如下所示：'
- en: a. It can toggle the streaming of logs to the CloudWatch Logs service.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. 它可以切换日志流到 CloudWatch Logs 服务。
- en: b. It can fetch instance logs for you to review locally.
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. 它可以获取实例日志，供您本地查看。
- en: '`eb open`: This command will use your default browser to open the public URL
    of your application.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eb open`：此命令将使用您的默认浏览器打开应用程序的公共 URL。'
- en: '`eb deploy`: This command will deploy your application to the Elastic Beanstalk
    service using the current source bundle.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eb deploy`：此命令将使用当前的源包将您的应用程序部署到 Elastic Beanstalk 服务。'
- en: '`eb config`: This command will allow you to change the environment configuration
    settings.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eb config`：此命令将允许您更改环境配置设置。'
- en: '`eb terminate`: This command shuts down and stops your instances and environment
    so that you do not incur additional charges.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`eb terminate`：此命令将关闭并停止您的实例和环境，以免产生额外费用。'
- en: Installing the EB CLI
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 EB CLI
- en: The simplest way to get the `eb-cli-setup` script, which is available on GitHub
    at [https://github.com/aws/aws-elastic-beanstalk-cli-setup](https://github.com/aws/aws-elastic-beanstalk-cli-setup)).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 获取 `eb-cli-setup` 脚本的最简单方法是通过 GitHub：[https://github.com/aws/aws-elastic-beanstalk-cli-setup](https://github.com/aws/aws-elastic-beanstalk-cli-setup)。
- en: 'If you are using a Mac, however, and prefer to install software via the `brew`
    package manager, then the EB CLI is available through this method as well. Just
    make sure that your current version of `brew` is up to date before attempting
    to install the EB CLI. Here''s the code you''ll need:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是 Mac 并且喜欢通过 `brew` 包管理器安装软件，则也可以通过这种方式安装 EB CLI。在尝试安装 EB CLI 之前，请确保您当前的
    `brew` 版本是最新的。以下是您需要的代码：
- en: '[PRE0]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: No matter which method you choose, once installed, you should then be able to
    get directly to the EB CLI from a terminal prompt using just a simple `$ eb` command.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您选择哪种方法，安装完成后，您应该能够从终端提示符直接访问 EB CLI，只需输入简单的 `$ eb` 命令。
- en: Note
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you have previously installed the EB CLI on your machine in the past, it
    is a good idea before proceeding to update the package using the `pip3 install
    --upgrade awsebcli` command.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您之前曾在计算机上安装过 EB CLI，在继续之前最好使用 `pip3 install --upgrade awsebcli` 命令更新该软件包。
- en: Now, with the CLI installed, let's look at creating and deploying a project
    using the EB CLI.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，安装了 CLI，我们来看看如何使用 EB CLI 创建和部署一个项目。
- en: Using the EB CLI to create a project
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 EB CLI 创建项目
- en: 'We will be using our terminal to invoke the `eb cli` command and then create
    our Elastic Beanstalk project. Start by opening up your terminal window. Then,
    follow these steps:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用终端来调用 `eb cli` 命令，并创建我们的 Elastic Beanstalk 项目。首先，打开终端窗口。然后，按照以下步骤操作：
- en: 'With your terminal window open, use the EB CLI to create a new folder to start
    our project. It''s best to start from the root of your home directory so that
    your folder will be easier to find if you need to come back to it later. We will
    name our local folder `11-beanstalk`. Here''s the code you''ll need:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端窗口后，使用 EB CLI 创建一个新文件夹来开始我们的项目。最好从家目录的根目录开始，这样如果需要稍后返回，文件夹更容易找到。我们将把本地文件夹命名为
    `11-beanstalk`。以下是您需要的代码：
- en: '[PRE1]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We need to make sure that the `virtualenv` program has been installed on our
    system for the Python 3.x set of programming languages. We will do this using
    `pip`, as follows:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要确保已在系统上安装 `virtualenv` 程序，以支持 Python 3.x 编程语言。我们将使用 `pip` 来完成此操作，如下所示：
- en: '[PRE2]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, with our folder created, we can move into that folder so that we can create
    our virtual environment for Python. Once you have enacted the virtual environment,
    you will see your prompt change slightly to be prepended with 11 before the command
    prompt, as illustrated in the following code snippet. This lets you know that
    you are inside the virtual environment:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建好文件夹后，我们可以进入该文件夹以创建 Python 的虚拟环境。一旦启用了虚拟环境，你会看到提示符稍作变化，命令提示符前会添加 11，如下代码片段所示。这表示你已经进入虚拟环境：
- en: '[PRE3]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If the virtual environment has been created successfully, then you should see
    an output like the one shown next:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果虚拟环境创建成功，你应该会看到类似以下内容的输出：
- en: '[PRE4]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Since we have created our virtual environment, we now need to activate it,
    as follows:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 既然我们已经创建了虚拟环境，我们现在需要激活它，如下所示：
- en: '[PRE5]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'With the virtual environment prompt showing, we will now install `flask` locally
    to make a quick web application using Python, as follows:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在虚拟环境提示符显示时，我们将安装`flask`本地，以便使用 Python 创建一个快速的 Web 应用，如下所示：
- en: '[PRE6]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'With our environment being set up, we can then move the files that we took
    from the `Chapter-11` GitHub repository and copy them over to our `11-beanstalk`
    directory. Start by going into the directory where you have cloned the files from
    the GitHub repository so that the copy will be a shorter command, as illustrated
    here:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在环境设置好后，我们可以将从`Chapter-11` GitHub 仓库获取的文件移动并复制到我们的`11-beanstalk`目录。首先进入克隆了 GitHub
    仓库文件的目录，这样复制命令会更简短，如下所示：
- en: '[PRE7]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, let''s capture all of the requirements that we will need to install once
    we go to our remote environment using the `pip freeze` command and then push that
    out to a file called `requirements.txt`, as illustrated in the following code
    snippet:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用 `pip freeze` 命令捕获我们在远程环境中安装时所需的所有依赖，并将其输出到一个名为 `requirements.txt` 的文件中，如下所示：
- en: '[PRE8]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'At this point, we should test our `flask` application locally to ensure that
    it runs and is ready for deployment. Use the following command to test your application:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，我们应该在本地测试我们的`flask`应用程序，确保它运行正常并准备好部署。使用以下命令测试你的应用：
- en: '[PRE9]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Assuming that the application starts successfully, you should see a return
    like the one shown next:'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 假设应用程序启动成功，你应该看到类似以下内容的返回：
- en: '[PRE10]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: With the local URL displayed, you can open up a web browser and see the application
    in action.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 显示本地 URL 后，你可以打开网页浏览器查看应用程序的运行情况。
- en: Once you are done testing the local application, press *Ctrl* + *C* in the terminal
    window to stop running the local server.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 测试完本地应用后，按*Ctrl* + *C*在终端窗口停止本地服务器的运行。
- en: 'With our application tested locally, we can now create the environment with
    the EB CLI. Using the command prompt that you still have open, we will initiate
    the Elastic Beanstalk environment. Make sure that you are still inside the `11-beanstalk`
    folder before you run the next command, shown here:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地测试应用程序后，我们现在可以使用 EB CLI 创建环境。使用你仍然打开的命令提示符，我们将启动 Elastic Beanstalk 环境。确保在运行下一个命令之前，你仍然在`11-beanstalk`文件夹内，如下所示：
- en: '[PRE11]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`flask-quiz`'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`flask-quiz`'
- en: '`(Y)es`'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`(Y)es`'
- en: '`Python 3.8`'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Python 3.8`'
- en: '`(Y)es`'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`(Y)es`'
- en: '`DevOps-pro` (no passphrase)'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`DevOps-pro`（无密码）'
- en: Now that we have created our environment, we will move on to looking at how
    we can customize our environment using `.ebextensions`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 创建好环境后，我们将继续学习如何使用 `.ebextensions` 自定义环境。
- en: Understanding advanced configuration options with .ebextensions
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解使用 .ebextensions 的高级配置选项
- en: Elastic Beanstalk allows you to add configuration files to your application's
    source code to customize and configure the AWS resources in your environment.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Elastic Beanstalk 允许你向应用程序的源代码添加配置文件，以自定义和配置环境中的 AWS 资源。
- en: We can create a *hidden* folder in our directory to create and store our custom
    configurations.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在目录中创建一个*隐藏*文件夹，用于创建和存储我们的自定义配置。
- en: 'From inside our `11-beanstalk` directory, we will create a `.ebextensions`
    directory, as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在`11-beanstalk`目录中，我们将创建一个`.ebextensions`目录，如下所示：
- en: '[PRE12]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can now run a `tree` command with a level of `1` and ask it to show all
    files (in order to show the hidden `.ebextensions` folder) and see our current
    working environment structure, as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以运行一个 `tree` 命令，设置级别为 `1`，并要求它显示所有文件（以便显示隐藏的 `.ebextensions` 文件夹），查看我们当前的工作环境结构，如下所示：
- en: '[PRE13]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This should show a current structure like this:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该显示如下的当前结构：
- en: '[PRE14]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next, we will move the file that we copied over with all of the other files
    named `cloudwatch.config` inside the `.ebextensions` folder, like this:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将把所有其他名为`cloudwatch.config`的文件一起复制到`.ebextensions`文件夹中，如下所示：
- en: '[PRE15]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This file is also available in the GitHub repository in the `Chapter-11` folder
    if needed.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，您也可以在GitHub的`Chapter-11`文件夹中找到此文件。
- en: With our extra resources created, we are now ready to look at the deployment
    types available for applications in Elastic Beanstalk before we deploy our application.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建了额外资源后，我们现在可以查看Elastic Beanstalk中为应用程序提供的部署类型，然后再开始部署应用程序。
- en: Deployment types with Elastic Beanstalk
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Elastic Beanstalk的部署类型
- en: Elastic Beanstalk allows for multiple deployment types for your application.
    Let's take a look at each one in detail.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Elastic Beanstalk支持多种部署类型，让我们详细了解每种部署方式。
- en: All-at-once deployments
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一次性部署
- en: Using an **all-at-once deployment** strategy, Elastic Beanstalk will take the
    specified version of the application that has been marked for deployment and then
    simultaneously deploy this version to all instances in your environment.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**一次性部署**策略时，Elastic Beanstalk会将指定版本的应用程序部署到环境中的所有实例中，所有实例同时进行部署。
- en: This deployment type takes the least amount of time to implement and has the
    lowest associated cost; however, it also comes with the most risk. If something
    were to go awry during the deployment, then you would be facing downtime with
    your application. This is a deployment strategy that is best served for development
    and test environments but it should seldom or never be used in a production environment.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这种部署方式需要的时间最短，相关成本也最低；然而，它也伴随最大的风险。如果部署过程中出现问题，应用程序可能会出现停机。这种部署策略最适用于开发和测试环境，生产环境中应很少甚至不应使用。
- en: Rolling deployments
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 滚动部署
- en: A **rolling deployment** will push out a newer version of your application to
    your existing EC2 instances, but instead of pushing out the application to all
    instances at the same time, it uses batches to govern how many instances are updated
    at any single time.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '**滚动部署**将把应用程序的新版本推送到现有的EC2实例，但不同于一次性将应用推送到所有实例，它采用批次的方式来控制每次更新多少实例。'
- en: While this deployment type is not as fast as the all-at-once method, it also
    allows for the safeguard of not allowing all your instances to be down at the
    same time in case of an application issue. A rolling instance is also less expensive
    than one of the blue/green types of deployment options since you are utilizing
    EC2 instances that you already have up and running and don't need to create a
    whole new environment.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种部署方式不如“一次性部署”方法快速，但它同样可以保障在应用出现问题时，不会导致所有实例同时宕机。与蓝绿部署方式相比，滚动部署实例的成本也较低，因为你正在利用已经启动并运行的EC2实例，而不需要创建全新的环境。
- en: Rolling with additional batch
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附加批次滚动部署
- en: Although extremely similar to a rolling deployment, **rolling with additional
    batch** has a very distinct difference. That difference is that this deployment
    ensures that your full capacity is maintained throughout the deployment process.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管与滚动部署非常相似，**附加批次滚动部署**有一个明显的区别。这个区别在于，它确保在整个部署过程中保持应用的全部容量。
- en: This deployment type will launch an additional set of instances before beginning
    the actual deployment. This is a good option if you are serving a constant flow
    of traffic and need to ensure capacity even while performing application updates.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这种部署类型将在开始实际部署之前启动一组额外的实例。如果您需要保证流量持续稳定，并确保在执行应用程序更新时不影响容量，这将是一个不错的选择。
- en: Immutable
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不可变部署
- en: 'When you think of immutable infrastructure, you should think of not making
    an update to a current instance. This is the same concept when using an **immutable
    deployment**, since we are setting up a whole new set of instances and deploying
    to those instances, waiting for them to become healthy before switching the **Domain
    Name System** (**DNS**) of Elastic Beanstalk over from the previous environment,
    as illustrated in the following diagram:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想到不可变基础设施时，你应该想到的是不对当前实例进行更新。这与**不可变部署**的概念相同，因为我们会设置一整套新的实例并部署到这些实例上，在它们变为健康状态后，才会将Elastic
    Beanstalk的**域名系统**（**DNS**）从旧环境切换过来，具体示意图如下所示：
- en: '![Figure 11.6 – Immutable deployment during deployment'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.6 – 在部署过程中使用不可变部署'
- en: '](img/Figure_11.6_B17405.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.6_B17405.jpg)'
- en: Figure 11.6 – Immutable deployment during deployment
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.6 – 部署期间的不可变部署
- en: 'This is one of the safest ways to deploy your application, but it can also
    be one of the most expensive since you are setting up double the number of instances,
    as illustrated in the following diagram:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这是部署应用程序最安全的方式之一，但也可能是最昂贵的，因为你需要设置双倍数量的实例，如下图所示：
- en: '![Figure 11.7 – Immutable deployment after deployment'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.7 – 部署后的不可变部署'
- en: '](img/Figure_11.7_B17405.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.7_B17405.jpg)'
- en: Figure 11.7 – Immutable deployment after deployment
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.7 – 部署后的不可变部署
- en: After the health check has been completed on the new version of the instances,
    then the older version of the instances is taken down and the traffic is routed
    to the new version of the application. If there were any problems with any of
    the instances, then the traffic would never get routed to those instances in the
    first place.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在对新版本的实例完成健康检查后，旧版本的实例会被关闭，流量会被引导到新版本的应用程序。如果任何实例存在问题，流量在一开始就不会被引导到这些实例。
- en: Traffic splitting
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流量拆分
- en: 'A **traffic-splitting** deployment is somewhat like an immutable deployment
    in the fact that it creates a whole new set of instances. A major difference is
    that with a traffic-splitting deployment, the older instances don''t terminate
    as soon as the new version is up and healthy. Instead, the traffic is shifted
    at a controlled pace, one that you set in the console or via the CLI, to direct
    a portion of the traffic from one version to the next version, as illustrated
    in the following diagram:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**流量拆分**部署与不可变部署有些相似，因为它会创建一整套新的实例。主要的区别在于，在流量拆分部署中，旧的实例不会在新版本启动并健康后立即终止。相反，流量会按照你在控制台或通过CLI设置的控制节奏，逐步从一个版本转移到下一个版本，如下图所示：'
- en: '![Figure 11.8 – Traffic-splitting deployment showing the percent of traffic'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.8 – 显示流量百分比的流量拆分部署'
- en: '](img/Figure_11.8_B17405.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.8_B17405.jpg)'
- en: Figure 11.8 – Traffic-splitting deployment showing the percent of traffic
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.8 – 显示流量百分比的流量拆分部署
- en: Now that we have looked at different deployment strategies, we will use the
    EB CLI and our terminal to create and deploy a Beanstalk application.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了不同的部署策略，我们将使用EB CLI和我们的终端来创建并部署一个Beanstalk应用程序。
- en: Using Elastic Beanstalk to deploy an application
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Elastic Beanstalk部署应用程序
- en: The best way to understand some of these services is to test them out with a
    hands-on example. This is most certainly the case with Elastic Beanstalk, as you
    need to be able to think about the capabilities of the service when reading through
    both the questions and answers that the DevOps professional exam presents you
    with.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这些服务的最佳方式是通过动手示例来测试它们。Elastic Beanstalk尤其如此，因为你需要在阅读DevOps专业考试中的问题和答案时，能够考虑到服务的功能。
- en: We are going to continue with our example code from before that we started earlier
    in this chapter. If you didn't do the first part of the exercise and you want
    to deploy the application, then it's suggested that you go back to the part of
    the chapter entitled *Using the EB CLI to create a project*.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用本章前面开始的示例代码。如果你没有做第一部分的练习，并且想要部署应用程序，建议你回到本章标题为*使用EB CLI创建项目*的部分。
- en: 'If you have previously closed your terminal window, then you will need to open
    it up again and navigate back to the `11-beanstalk` folder. We already initiated
    our environment locally previously, and can now proceed as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前关闭了终端窗口，你需要重新打开它，并导航回`11-beanstalk`文件夹。我们之前已经在本地初始化了环境，现在可以继续按照以下步骤进行：
- en: 'Since our environment has been initiated previously, we can create our initial
    environment—`developmen`t, as follows:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们之前已经初始化了环境，我们可以按以下方式创建我们的初始环境——`development`：
- en: '[PRE16]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The terminal should show you a return like the one shown next:'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 终端应显示类似于以下的返回信息：
- en: '[PRE17]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Although it will most likely take a few minutes to finish the setup of your
    new environment, once it has been completed, you can see the web application up
    and running by using the `eb` `open` command, as follows:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尽管新环境的设置可能需要几分钟的时间，但一旦完成，你可以通过使用`eb` `open`命令查看运行中的Web应用程序，如下所示：
- en: '[PRE18]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can check on all the events of your application by using the `events` command
    from within the EB CLI, like this:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过在EB CLI中使用`events`命令查看应用程序的所有事件，像这样：
- en: '[PRE19]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you wanted to check on the health of your environment, then you could log
    in to the AWS console to see the visual dashboard, or you could simply use the
    `eb health` command to get a quick look at the statistics for your environment,
    as follows:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想检查环境的健康状况，你可以登录 AWS 控制台查看可视化仪表板，或者你也可以使用 `eb health` 命令快速查看环境的统计信息，如下所示：
- en: '[PRE20]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Alternatively, if you look at the health of the Beanstalk application from
    the console, then you will be presented with a very easy-to-read **user interface**
    (**UI**), as illustrated in the following screenshot:'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，如果你从控制台查看 Beanstalk 应用程序的健康状况，你将看到一个非常易于阅读的**用户界面**（**UI**），如下图所示：
- en: '![Figure 11.9 – A look at the Elastic Beanstalk monitoring dashboard'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 11.9 – 查看 Elastic Beanstalk 监控仪表板'
- en: '](img/Figure_11.9_B17405.jpg)'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_11.9_B17405.jpg)'
- en: Figure 11.9 – A look at the Elastic Beanstalk monitoring dashboard
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 11.9 – 查看 Elastic Beanstalk 监控仪表板
- en: If you like, you can check the log files directly from the command line using
    the `eb logs` command.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你愿意，你可以直接通过命令行使用 `eb logs` 命令检查日志文件。
- en: 'Once you are done, then you should deactivate your virtual environment by running
    the following command:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，你应该通过运行以下命令来停用虚拟环境：
- en: '[PRE21]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Follow the guidance in the next section to help troubleshoot your deployment
    if you are having issues.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在部署过程中遇到问题，请按照下一节的指导来帮助排查问题。
- en: Troubleshooting the deployment with the EB CLI
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 EB CLI 排查部署问题
- en: 'If you are running into issues during the deployment of your environment, perform
    the following steps:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在部署环境时遇到问题，请执行以下步骤：
- en: 'Find the line that states the **Web Server Gateway Interface** (**WSGI**) path.
    An example of this is shown next:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到声明**Web服务器网关接口**（**WSGI**）路径的那一行。以下是一个示例：
- en: '[PRE22]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Edit this line after the colon to ensure that `.py` appears after the word `application`.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在冒号后编辑这一行，确保 `.py` 出现在“应用程序”一词后面。
- en: Save and close the file.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存并关闭文件。
- en: Try deploying your application again with the `eb deploy` command.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试使用 `eb deploy` 命令再次部署你的应用程序。
- en: Now that we have gone through the exercise of deploying our Beanstalk application
    and looking at the logs and events of the application, we will now look both at
    use cases and anti-patterns of using Elastic Beanstalk.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了部署我们的 Beanstalk 应用程序并查看应用程序日志和事件的练习，我们将接下来讨论使用 Elastic Beanstalk 的使用案例和反模式。
- en: Elastic Beanstalk use cases
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Elastic Beanstalk 使用案例
- en: Elastic Beanstalk makes it easy for developers to get up and running on the
    cloud without having to worry about the underlying infrastructure or management
    of underlying components. Next, we will look at some of the optimal use cases
    for using Elastic Beanstalk.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: Elastic Beanstalk 使开发人员能够轻松地在云端启动和运行，而无需担心底层基础设施或底层组件的管理。接下来，我们将看看使用 Elastic
    Beanstalk 的一些最佳使用案例。
- en: '*You have a smaller development team that needs to get going quickly*'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '*你有一个小型的开发团队，需要快速启动*'
- en: If you have a smaller team that needs to get up and running quickly on AWS but
    is not as familiar with all of the other components, services, and interconnectivity,
    then Elastic Beanstalk can be a good choice to meet deadlines.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个较小的团队，需要快速启动 AWS，但对其他组件、服务和相互连接不太熟悉，那么 Elastic Beanstalk 可以成为一个很好的选择，帮助按时完成任务。
- en: '*You don''t have any in-house DevOps expertise*'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '*你没有内部的 DevOps 专业知识*'
- en: Somewhat like the previous example, if a company or development team has an
    application that is needing a rapid deployment to AWS, then Elastic Beanstalk
    presents a very viable solution without the need for any advanced DevOps expertise.
    Since the product itself can be used with Git, a tool that most developers are
    familiar with, getting up and running in a minimal amount of time is a simple
    task. Beanstalk then takes care of tasks such as DNS, autoscaling, easy access
    to application logs, and even pre-built dashboards for metrics on your environment
    without any additional setup.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于之前的示例，如果一个公司或开发团队有一个需要快速部署到 AWS 的应用程序，那么 Elastic Beanstalk 提供了一个非常可行的解决方案，而无需任何高级
    DevOps 专业知识。由于该产品本身可以与 Git 配合使用，这是大多数开发人员都熟悉的工具，因此在最短的时间内启动和运行是一项简单的任务。然后，Beanstalk
    负责处理诸如 DNS、自动扩展、应用程序日志的轻松访问，甚至是无需额外设置的环境度量仪表板。
- en: Elastic Beanstalk anti-patterns
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Elastic Beanstalk 反模式
- en: As we just looked at some of the cases where the use of Elastic Beanstalk would
    make sense, there are also cases where Beanstalk would not be a good choice. Here,
    we will examine some of the known anti-patterns for using Elastic Beanstalk, where
    you would want to look at a different service offering from AWS.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们刚才看到的，Elastic Beanstalk 在某些情况下非常适用，但也有一些情况它并不是一个好的选择。在这里，我们将探讨一些已知的使用 Elastic
    Beanstalk 的反模式，了解在哪些情况下你应该考虑选择 AWS 的其他服务。
- en: Applications or projects that need a lot of environment variables
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 需要大量环境变量的应用程序或项目
- en: One of Elastic Beanstalk's limitations is the fact that it only has 4 **Kilobytes**
    (**KB**) to store all key-value pairs. Taking this fact into account, then, if
    you have numerous environment variables such as different database strings, usernames,
    and passwords for each environment that you create, then you could run up against
    this hard limit, and Elastic Beanstalk would not be a good choice for your application.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: Elastic Beanstalk 的一个限制是它只有 **千字节** (**KB**) 的存储空间用于存储所有的键值对。考虑到这一点，如果你有很多环境变量，例如不同数据库连接字符串、用户名和密码，适用于每个你创建的环境，那么你可能会遇到这个硬性限制，Elastic
    Beanstalk 对你的应用程序来说就不再是一个好的选择。
- en: Applications that are very large
  id: totrans-205
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 非常大的应用程序
- en: Elastic Beanstalk deployment bundles can only be at a maximum of 512 `.ebextensions`
    directory. Also, if you have a lot of static assets, such as pictures or media,
    then those could be stored in S3 with pointers in either your application or in
    a dynamic store such as DynamoDB, and this can keep your source bundle size down.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: Elastic Beanstalk 部署包的最大大小只能是 512 `.ebextensions` 目录。如果你有大量静态资源，比如图片或媒体文件，可以将它们存储在
    S3 中，并在应用程序或动态存储（如 DynamoDB）中存储指针，这样可以减少源包的大小。
- en: Summary
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered the Elastic Beanstalk service, another one of the
    deployment services offered by AWS. We covered the different deployment options
    available with Elastic Beanstalk, along with creating and deploying a Beanstalk
    application using the EB CLI tool. We also took a look at some of the best-case
    scenarios for using Elastic Beanstalk, as well as some anti-patterns whereby the
    Elastic Beanstalk service would not be a good fit.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们介绍了 Elastic Beanstalk 服务，这是 AWS 提供的另一种部署服务。我们介绍了 Elastic Beanstalk 提供的不同部署选项，并使用
    EB CLI 工具创建和部署 Beanstalk 应用程序。我们还探讨了使用 Elastic Beanstalk 的最佳情况，以及一些反模式，说明在这些情况下
    Elastic Beanstalk 并不适合。
- en: In the next chapter, we will look at using Lambda functions and step functions
    in order to deploy our code in a serverless manner.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何使用 Lambda 函数和步骤函数，以无服务器的方式部署我们的代码。
- en: Review questions
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复习问题
- en: You have been brought into a company that has an application team whose application
    has two tiers—a web layer and a database layer. The application team needs a method
    to provision and deploy an environment to AWS quickly. Which of the following
    options would be the fastest and most ideal way to get this team set up?
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你被引入了一家公司，该公司有一个应用团队，他们的应用程序是两层架构——一个是 Web 层，另一个是数据库层。应用团队需要一种快速地在 AWS 上配置和部署环境的方法。以下哪种选项是最快且最理想的设置方式？
- en: a. Use the Elastic Beanstalk service to provision an environment and then push
    the application to the environment.
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. 使用 Elastic Beanstalk 服务来配置一个环境，然后将应用程序推送到该环境。
- en: b. Create an OpsWorks stack with two layers, one for the application and another
    for the database. Deploy the application to the application layer.
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. 创建一个带有两个层的 OpsWorks 堆栈，一个用于应用程序，另一个用于数据库。将应用程序部署到应用层。
- en: c. Use CloudFormation to create an S3 bucket, an RDS database, and an EC2 instance.
    Use user-data scripting to load the application from the S3 bucket and parameters
    for the RDS connection strings, username, and password.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. 使用 CloudFormation 创建一个 S3 存储桶、一个 RDS 数据库和一个 EC2 实例。使用用户数据脚本从 S3 存储桶加载应用程序，并传递
    RDS 连接字符串、用户名和密码等参数。
- en: d. Create an RDS database and then use Lambda to deploy the application.
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d. 创建一个 RDS 数据库，然后使用 Lambda 部署应用程序。
- en: You have been brought into a company that is trying to automate its move to
    the AWS cloud as quickly as possible. The applications that it is trying to move
    are built using a multitude of different programming languages. How can you get
    these applications moved and deployed to the cloud as swiftly as possible?
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你被引入了一家公司，这家公司正在尽可能快地自动化迁移到 AWS 云。该公司要迁移的应用程序是使用多种不同编程语言构建的。你如何才能尽快将这些应用程序迁移并部署到云端？
- en: a. Create a master CloudFormation template that utilizes a nested stack design
    for the deployment of the applications. Create a child template for each of the
    applications after creating a Docker container for the applications.
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. 创建一个主 CloudFormation 模板，利用嵌套堆栈设计来部署应用程序。在为每个应用程序创建 Docker 容器后，创建每个应用程序的子模板。
- en: b. Develop each application in one Docker container and use Elastic Beanstalk
    to deploy.
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. 在一个 Docker 容器中开发每个应用程序，并使用 Elastic Beanstalk 进行部署。
- en: c. Develop each application in a separate Docker container and use Elastic Beanstalk
    to deploy.
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. 在一个单独的 Docker 容器中开发每个应用程序，并使用 Elastic Beanstalk 进行部署。
- en: d. Create a stack using OpsWorks. Create a separate layer for each application
    and then deploy each application to its layer.
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d. 使用 OpsWorks 创建堆栈。为每个应用程序创建一个单独的层，然后将每个应用程序部署到对应的层。
- en: There is a service that Elastic Beanstalk can perform for you if your application
    takes a while to complete its activities or workflows. What is that service?
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你的应用程序需要较长时间完成其活动或工作流，Elastic Beanstalk 可以为你提供哪项服务？
- en: a. Beanstalk can manage the Elastic Load Balancing (ELB) service and run a daemon
    process on each of the instances.
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. Beanstalk 可以管理 Elastic Load Balancing（ELB）服务，并在每个实例上运行守护进程。
- en: b. Beanstalk can manage a Simple Notification Service (SNS) topic and run a
    daemon process on each of the instances.
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. Beanstalk 可以管理一个简单通知服务（SNS）主题，并在每个实例上运行守护进程。
- en: c. Beanstalk can manage Lambda functions and run a daemon process on each of
    the instances.
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. Beanstalk 可以管理 Lambda 函数，并在每个实例上运行守护进程。
- en: d. Beanstalk can manage an SQS queue and run a daemon process on each of the
    instances.
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d. Beanstalk 可以管理一个 SQS 队列，并在每个实例上运行守护进程。
- en: You have been brought into a company in order to help automate a recovery strategy
    in case an outage hits the primary region where resources are hosted in AWS. The
    company has a priority on minimizing costs for this recovery strategy but also
    needs to be able to spin up the complete infrastructure if needed. How would you
    suggest that it does this with the least cost?
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你被邀请加入公司，帮助在主要区域发生故障时自动化恢复策略。该公司优先考虑减少恢复策略的成本，但同时也需要在必要时能够快速恢复完整的基础设施。你会如何建议公司以最低成本实现这一目标？
- en: a. Create a pilot light infrastructure in another region and automatically resize
    based on CloudWatch events.
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. 在另一个区域创建一个试点灯基础设施，并根据 CloudWatch 事件自动调整大小。
- en: b. Create a duplicate infrastructure by creating a whole new environment in
    the disaster recovery (DR) region using Elastic Beanstalk. Switch the Route 53
    record to the DR region's load balancer in case of an outage.
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. 通过在灾难恢复（DR）区域使用 Elastic Beanstalk 创建一个全新的环境来创建重复的基础设施。在发生故障时，将 Route 53 记录切换到
    DR 区域的负载均衡器。
- en: c. Use Elastic Beanstalk to create another environment as a copy of the application
    in case of an outage.
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. 使用 Elastic Beanstalk 创建另一个环境，作为应用程序的副本，以防发生故障。
- en: d. Use CloudFormation to spin up resources in another region in case of an outage.
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d. 使用 CloudFormation 在发生故障时在另一个区域启动资源。
- en: Review answers
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审核答案
- en: a.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: a.
- en: c.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: c.
- en: d.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: d.
- en: d.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: d.
