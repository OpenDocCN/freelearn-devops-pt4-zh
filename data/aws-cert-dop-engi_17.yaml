- en: 'Chapter 14: CloudWatch and X-Ray''s Role in DevOps'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 14 章：CloudWatch 和 X-Ray 在 DevOps 中的作用
- en: Once you have your application running in the cloud, you need a way to keep
    an eye on it to make sure that it stays healthy and is performing effectively.
    **CloudWatch** can aggregate the logs of your services and applications, but combining
    this with **X-Ray** allows you to trace the performance of your application to
    see where you can enhance performance even further.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的应用程序在云中运行，你就需要一个方法来监控它，以确保它保持健康并有效地运行。**CloudWatch** 可以汇总你的服务和应用程序的日志，但将其与**X-Ray**结合使用，可以追踪应用程序的性能，找出进一步提升性能的地方。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: CloudWatch overview
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudWatch 概述
- en: Using CloudWatch to aggregate your logs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 CloudWatch 汇总你的日志
- en: CloudWatch alarms
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudWatch 告警
- en: Adding X-Ray for application tracing
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为应用程序追踪添加 X-Ray
- en: CloudWatch overview
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CloudWatch 概述
- en: Monitoring is important for several reasons that range from both the operational
    side to the business side. First, it gives you visibility into not only what is
    running in your environment but how the resources in your environment are performing.
    Second, monitoring matters from an operational level when you are trying to troubleshoot
    issues in real time. From a business perspective, monitoring lets you know things
    such as whether your deployments have been completed successfully, and whether
    your customers don't see any adverse effects.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 监控有许多重要原因，从运营角度到商业角度都很重要。首先，它让你不仅可以看到环境中运行的内容，还能了解这些资源的性能。其次，从运营角度来看，当你尝试实时解决问题时，监控非常关键。从商业角度来看，监控让你知道一些关键事项，比如你的部署是否已成功完成，客户是否没有看到任何负面影响。
- en: 'In today''s world, where information can be dispersed quickly throughout the
    internet and especially social media channels, anything that affects customer
    experience can and usually does spread quickly. This can affect your brand and
    your business bottom line. Monitoring your resources with CloudWatch allows you
    to stay ahead of this and be proactive rather than reactive:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天这个信息可以迅速通过互联网，尤其是社交媒体渠道传播的时代，任何影响客户体验的事情都可能并且通常会迅速传播。这会影响你的品牌和商业利润。通过 CloudWatch
    监控你的资源可以让你走在前面，采取主动而非被动的应对方式：
- en: '![Figure 14.1 – How monitoring continues to evolve'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.1 – 监控如何持续演变'
- en: '](img/Figure_14.1_B17405.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_14.1_B17405.jpg)'
- en: Figure 14.1 – How monitoring continues to evolve
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.1 – 监控如何持续演变
- en: How you monitor your systems and resources today may be different than how you
    monitored things 5 to 10 years ago. Things such as infrastructure changes and
    waterfall deployment philosophies drove what was going to be monitored.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你今天监控系统和资源的方式可能与 5 到 10 年前监控方式有所不同。诸如基础设施变化和瀑布式部署哲学等因素决定了需要监控的内容。
- en: 'Gone are the days where you would be provisioning a server, and that same server
    would be running for up to a decade before being sunsetted. With services in the
    cloud such as auto-scaling, which constantly adds and removes instances based
    on demand, the metrics that you monitor need to not only be relevant to the health
    of your system but the performance of your customers:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，你可能需要配置一台服务器，并且这台服务器会运行长达十年才会被淘汰。然而，随着云服务的发展，如自动扩展，根据需求不断增加和移除实例，所监控的指标不仅要与系统健康相关，还要与客户体验的性能相关：
- en: '![Figure 14.2 – The features of AWS CloudWatch'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.2 – AWS CloudWatch 的功能'
- en: '](img/Figure_14.2_B17405.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_14.2_B17405.jpg)'
- en: Figure 14.2 – The features of AWS CloudWatch
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.2 – AWS CloudWatch 的功能
- en: 'Amazon CloudWatch is an AWS native service that helps you monitor your services
    and resources. It is part of the management tools offered by AWS. The primary
    function of CloudWatch is to help you track and monitor the performance of your
    resources and applications. While monitoring, the CloudWatch service can use alarms
    to notify either personnel via the SNS service or use events to trigger automation
    in response to those alarms. CloudWatch can also be used to collect and monitor
    log files. CloudWatch consists of three main components: *metrics*, *alarms*,
    and *events*.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊 CloudWatch 是一项 AWS 原生服务，帮助你监控服务和资源。它是 AWS 提供的管理工具的一部分。CloudWatch 的主要功能是帮助你跟踪和监控资源和应用程序的性能。在监控过程中，CloudWatch
    服务可以通过 SNS 服务通知人员，或通过事件触发自动化响应这些告警。CloudWatch 还可以用于收集和监控日志文件。CloudWatch 包括三个主要组件：*指标*、*告警*和*事件*。
- en: Understanding and using the CloudWatch unified agent
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解和使用 CloudWatch 统一代理
- en: AWS provides a unified CloudWatch agent that can help you do several things
    both for on-premises servers and on EC2 instances. Let's review a few common scenarios
    where using the CloudWatch unified agent comes in handy.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 提供了一个统一的 CloudWatch 代理，可以帮助你处理多种事情，无论是对本地服务器还是 EC2 实例。让我们回顾几个使用 CloudWatch
    统一代理的常见场景。
- en: Running as a different user
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以不同用户身份运行
- en: When running the CloudWatch agent on Linux servers, the CloudWatch agent will
    run as the root user by default. If your company does not allow agents and programs
    to be run as the root user, then you can create a custom user for the CloudWatch
    agent to use and then, in the configuration file, tell the agent to `run_as_user`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 服务器上运行 CloudWatch 代理时，CloudWatch 代理默认作为 root 用户运行。如果你的公司不允许代理和程序以 root
    用户身份运行，那么你可以为 CloudWatch 代理创建一个自定义用户，并在配置文件中告诉代理 `run_as_user`。
- en: Having multiple CloudWatch agent configuration files
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 拥有多个 CloudWatch 代理配置文件
- en: Organizations that base their build on an approved **Amazon Machine Image**
    (**AMI**) that must be used for any development or production builds can have
    a CloudWatch configuration file pre-baked into the instance. This configuration
    file would allow standard configurations to be collected across all instances.
    Development teams can then add another configuration file that the CloudWatch
    agent can read and process at startup, which would include any specific application
    metrics or logs.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 基于经批准的**Amazon 机器映像**（**AMI**）构建的组织，必须用于任何开发或生产构建，可以将 CloudWatch 配置文件预先配置到实例中。这个配置文件将允许跨所有实例收集标准配置。开发团队可以添加另一个配置文件，CloudWatch
    代理可以在启动时读取并处理，其中包括任何特定的应用程序指标或日志。
- en: An example of this could be if an application team is running an NGINX server
    to front their web application; otherwise, they may be using the proxy powers
    of NGINX to redirect traffic. Their custom configuration file can be designated
    to look for 4XX and 5XX errors from NGINX, and they can also be configured to
    consume the logs and ship them back to CloudWatch Logs.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子是，如果应用团队正在运行一个 NGINX 服务器来为其 Web 应用提供前端，或者他们可能使用 NGINX 的代理功能来重定向流量。他们的自定义配置文件可以指定查找
    NGINX 的 4XX 和 5XX 错误，同时也可以配置消费这些日志并将其发送回 CloudWatch Logs。
- en: Sending metrics and logs to a different account than the one the instance is
    running in
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将指标和日志发送到与实例运行所在账户不同的账户
- en: The CloudWatch agent has the flexibility to send either metrics, logs, or both
    to another AWS account for monitoring purposes by specifying `role_arn` in the
    configuration.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: CloudWatch 代理具有灵活性，可以通过在配置中指定 `role_arn` 将指标、日志或两者发送到另一个 AWS 账户进行监控。
- en: Adding custom dimensions to metrics collected by the CloudWatch agent
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向 CloudWatch 代理收集的指标添加自定义维度
- en: CloudWatch will create its own rollups of the metrics that it collects. These
    might not always be the optimal grouping for you and your team; hence, there are
    ways to customize how things are grouped by using the `append_dimensions` field.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: CloudWatch 会创建它收集的指标的汇总。这些汇总可能并不总是最适合你和你的团队，因此，可以通过使用 `append_dimensions` 字段自定义分组方式。
- en: We just saw how the unified CloudWatch agent, whether used on an AWS EC2 instance
    or an on-premises server, allows you to collect logs and metrics in a multitude
    of scenarios. Now, let's go through the process of installing the CloudWatch agent
    on an EC2 instance.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚看到，无论是在 AWS EC2 实例还是本地服务器上使用的统一 CloudWatch 代理，都可以在多种场景下收集日志和指标。现在，让我们通过在
    EC2 实例上安装 CloudWatch 代理的过程。
- en: Installing the CloudWatch agent on an EC2 instance
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 EC2 实例上安装 CloudWatch 代理
- en: The best way to get a good understanding of the CloudWatch unified agent is
    to go through the process of installing the agent on an EC2 instance. The following
    tutorial will take you through the steps of standing up an EC2 instance and then
    installing and configuring the agent. Finally, we will send some traffic to the
    EC2 instance so that we can look at the metrics and logs that have been generated.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 了解 CloudWatch 统一代理的最佳方法是通过在 EC2 实例上安装代理的过程。以下教程将带你完成搭建 EC2 实例的步骤，然后安装和配置代理。最后，我们将向
    EC2 实例发送一些流量，以便查看生成的指标和日志。
- en: Note
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We will go much deeper into CloudWatch metrics in the next chapter. [*Chapter
    15*](B17405_15_Final_JM_ePub.xhtml#_idTextAnchor381), *CloudWatch Metrics and
    Amazon EventBridge*, will discuss both generic metrics and custom metrics.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更深入地探讨CloudWatch指标。[*第15章*](B17405_15_Final_JM_ePub.xhtml#_idTextAnchor381)，*CloudWatch指标和Amazon
    EventBridge*，将讨论通用指标和自定义指标。
- en: 'So far, we have been using Amazon Linux for any EC2 instances in our examples.
    Amazon Linux is an excellent operating system and comes pre-installed with many
    packages for use on the AWS cloud computing environment. This is the precise reason
    that for this example, we are going to use a different operating system – *Ubuntu*.
    The Ubuntu OS will not have some of the packages, such as the CloudWatch unified
    agent, installed by default. This allows us to go through the process of installing
    it on this EC2 instance, but the process would be the same if you had an EC2 instance
    running in your data center, except for the fact that you would need to authenticate
    your instance in your data center with a keypair, which would be rotated regularly.
    EC2 instances, on the other hand, may assume roles and would not need the access
    key and secret key to be stored on the instance, and in fact, assuming the role
    is a more secure practice. Let''s get started:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在示例中一直使用Amazon Linux作为任何EC2实例的操作系统。Amazon Linux是一个优秀的操作系统，并且预安装了许多在AWS云计算环境中使用的软件包。这正是我们在本示例中使用不同操作系统——*Ubuntu*——的原因。Ubuntu操作系统默认并不会安装一些软件包，例如CloudWatch统一代理。这使得我们可以在这个EC2实例上通过安装过程来进行操作，但如果你在数据中心有一个EC2实例，过程是一样的，只不过你需要使用密钥对对实例进行身份验证，而且这个密钥对会定期轮换。而EC2实例可以扮演角色，因此不需要将访问密钥和秘密密钥存储在实例上，实际上，扮演角色是一种更安全的做法。让我们开始吧：
- en: 'First, let''s create the IAM role for our instance; we are going to need our
    instance to have permissions for CloudWatch and AWS Systems Manager. To create
    the role, we will need to save an initial `JSON` policy locally, and then we can
    attach the two managed policies that we need. Copy the `JSON` policy to a file
    named `STS.json`:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们为实例创建IAM角色；我们需要确保实例具有CloudWatch和AWS Systems Manager的权限。要创建角色，我们需要在本地保存一个初始的`JSON`策略文件，然后附加所需的两个托管策略。将`JSON`策略复制到名为`STS.json`的文件中：
- en: '[PRE0]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'With our initial policy saved, we can now create the role and attach the two
    managed policies:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存好初始策略后，我们现在可以创建角色并附加这两个托管策略：
- en: '[PRE1]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Since we will be launching our instance with the CLI, we will need to create
    an instance profile. Once our instance profile has been created, we can attach
    our new role to `instance profile`:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们将通过CLI启动我们的实例，因此需要创建一个实例配置文件。一旦实例配置文件创建完成，我们就可以将新的角色附加到`instance profile`：
- en: '[PRE2]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, we will need to query the `SSM` parameter store for the AMI, which we
    want to use to spin up our image:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要查询`SSM`参数存储中的AMI，我们希望使用该AMI来启动我们的镜像：
- en: '[PRE3]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you would like to see the value of the AMI that is returned, then you can
    use the following command:'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你想查看返回的AMI值，可以使用以下命令：
- en: '[PRE4]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We are going to want to get into our instance later, but rather than creating
    a key pair, we will add the following script, which will install both SSM Agent
    and the unified CloudWatch agent for Debian. We will create this script and save
    it to a file named `agents.sh` so that we can use it when launching our EC2 instance
    later in the `user-data` parameter.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们稍后需要进入我们的实例，但与其创建密钥对，不如添加以下脚本，该脚本将安装SSM代理和统一的CloudWatch代理，适用于Debian操作系统。我们将创建此脚本并将其保存为名为`agents.sh`的文件，这样我们就可以在稍后通过`user-data`参数启动EC2实例时使用它。
- en: 'The script to install SSM Agent and `the` `unified` `CloudWatch` `agent` is
    as follows:'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安装SSM代理和`the` `unified` `CloudWatch` `agent`的脚本如下：
- en: '[PRE5]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once we have the `AMI` value stored in our variable, we can launch our image
    with the following command:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们将`AMI`值存储到变量中，就可以使用以下命令启动我们的镜像：
- en: '[PRE6]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'While our instance is initiating and running the startup scripts that we have
    given to it, we can log into the AWS Console and go directly to the SSM session
    manager using the following URL: [https://console.aws.amazon.com/systems-manager/session-manager](https://console.aws.amazon.com/systems-manager/session-manager).
    Once logged in, at the top right-hand side, check that you are in the correct
    region. We specified for our instance to be launched in the Ohio region (`us-east-2`),
    and if another region is listed, then switch to the region where you have spun
    up your instance. As an alternative, you could also do this from the **EC2** screen
    by selecting the instance and then choosing **Connect** from the **Actions** dropdown.
    On the **Connect to instance** screen, choose **Session Manager** and then the
    orange **connect** button. A new window containing your session should appear
    as you connect to your instance.'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们的实例正在启动并运行我们提供给它的启动脚本时，我们可以登录到AWS控制台，并直接使用以下网址访问SSM会话管理器：[https://console.aws.amazon.com/systems-manager/session-manager](https://console.aws.amazon.com/systems-manager/session-manager)。登录后，在右上角检查确保您所在的区域正确。我们指定我们的实例启动在俄亥俄州区域（`us-east-2`），如果列出了其他区域，请切换到您创建实例的区域。作为替代，您也可以通过**EC2**屏幕选择实例，然后从**操作**下拉菜单中选择**连接**。在**连接到实例**屏幕中，选择**会话管理器**，然后点击橙色的**连接**按钮。连接到实例时，应该会弹出一个包含您会话的新窗口。
- en: 'Now that we are connected to our instance securely without having to use keys,
    we can configure the agent. We have already installed the CloudWatch agent using
    some of the commands in our `user-data` script. To get some of the logs flowing
    to CloudWatch Logs, we will need to tell the agent which logs specifically to
    push. We will need to run the configuration script as a `sudo` user, which is
    located at `/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-config-wizard`.
    To simplify the commands, we will jump into the root user using the `sudo su`
    command:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经成功地通过SSM连接到实例，而不需要使用密钥，我们可以配置代理。我们已经使用`user-data`脚本中的一些命令安装了CloudWatch代理。为了将一些日志流传输到CloudWatch
    Logs，我们需要告诉代理具体要推送哪些日志。我们需要以`sudo`用户身份运行配置脚本，脚本位于`/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-config-wizard`。为了简化命令，我们将通过`sudo
    su`命令切换到root用户：
- en: '[PRE7]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Running the CloudWatch agent configuration manager will prompt you for quite
    a few questions, but the setup should take less than 5 minutes. The questions
    shown here are the ones that do not follow the defaults:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行CloudWatch代理配置管理器时，您将被提示回答一些问题，但设置应该不会超过5分钟。这里显示的问题是那些没有选择默认值的：
- en: 'Which default metrics config do you want? Standard (2) Log file path: `/var/log/amazon/ssm/amazon-ssm-agent.log`.'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您想要选择哪个默认的指标配置？标准（2）日志文件路径：`/var/log/amazon/ssm/amazon-ssm-agent.log`。
- en: Do you want to specify any additional log files to monitor? No (2).
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您是否想指定任何其他日志文件进行监控？不（2）。
- en: Do you want to store the config in the SSM parameter store? No (2).
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您是否希望将配置存储在SSM参数存储中？不（2）。
- en: 'When the config wizard has completed, since we are using the Ubuntu operating
    system, we will copy the newly generated `config` file to where the agent is expecting
    it to be and give ownership to the `cwagent` user:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置向导完成后，由于我们使用的是Ubuntu操作系统，我们将把新生成的`config`文件复制到代理预期的位置，并将文件所有权授予`cwagent`用户：
- en: '[PRE8]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'With our CloudWatch agent file now configured, we will have to restart the
    agent for the changes to take effect. We can do this with the following command:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们的CloudWatch代理文件已经配置完成，我们需要重新启动代理以使更改生效。我们可以通过以下命令实现这一点：
- en: '[PRE9]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: One of the first ways we can generate a log is by clicking the orange `CloudWatch`
    service. Once the service name appears, click on **CloudWatch** to be taken to
    the service.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们生成日志的首要方式之一是点击橙色的`CloudWatch`服务。服务名称出现后，点击**CloudWatch**将带您进入该服务。
- en: Once in `amazon-ssm-agent.log`. Click on this log group's name to be taken to
    the log streams.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦进入`amazon-ssm-agent.log`，点击该日志组的名称，将带您进入日志流。
- en: There should only be one log stream in the log group. The log stream's name
    will be the identifier for your AWS EC2 instance. Click on this **Log stream**
    so that we can view the logs:![Figure 14.3 – A single log stream in our CloudWatch
    log group
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 日志组中应该只有一个日志流。该日志流的名称将是您AWS EC2实例的标识符。点击这个**日志流**，以便我们查看日志：![图 14.3 – 我们CloudWatch日志组中的单个日志流
- en: '](img/Figure_14.3_B17405.jpg)'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_14.3_B17405.jpg)'
- en: Figure 14.3 – A single log stream in our CloudWatch log group
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.3 – 我们CloudWatch日志组中的单个日志流
- en: If you did log out of your `Session` `worker` `closed`. Any time that you have
    logged out of **Session Manager** while the CloudWatch agent was running should
    appear in the list of logs. You can click the small triangle on the left-hand
    side of the log to expand the contents and see the full log entry.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您已经退出了您的`Session` `worker` `closed`。任何在CloudWatch代理运行期间退出**会话管理器**的情况，都应该出现在日志列表中。您可以点击日志左侧的小三角形来展开内容，查看完整的日志条目。
- en: Note
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: We are going to continue to use this instance for further exercises in this
    chapter. If you are going to continue at a later point in time, I would suggest
    that you put this instance into hibernation so that you don't get charged for
    it. Then, you don't have to reconfigure everything when you are ready to go again.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将继续使用此实例进行本章的进一步练习。如果您打算稍后继续操作，我建议您将此实例置于休眠状态，这样您就不会因此而产生费用。这样，等到您准备好再次操作时，就无需重新配置一切。
- en: Now that we have added the unified CloudWatch agent to a non-Amazon instance,
    we will look at some other features of CloudWatch Logs. If you plan on doing the
    next exercise with the CloudWatch alarms in a relatively short manner, I would
    suggest that you either leave this instance running or simply stop the instance
    so that you have access to the metrics that the CloudWatch agent aggregates and
    pushes for alarming.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经将统一的CloudWatch代理添加到非Amazon实例上，接下来我们将看一下CloudWatch Logs的一些其他功能。如果您打算在短时间内完成下一次使用CloudWatch警报的练习，我建议您要么保持此实例运行，要么仅仅停止实例，这样您可以访问CloudWatch代理汇总并推送的指标，供警报使用。
- en: Using CloudWatch to aggregate your logs
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用CloudWatch聚合日志
- en: Amazon's CloudWatch service is not only a powerful monitoring tool, but it also
    allows you to route multiple types of logs such as operating systems, applications,
    custom log files, and even CloudTrail logs to the dependable storage of CloudWatch
    Logs.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 亚马逊的CloudWatch服务不仅是一个强大的监控工具，还允许您将操作系统、应用程序、自定义日志文件甚至CloudTrail日志等多种类型的日志路由到CloudWatch
    Logs的可靠存储中。
- en: CloudWatch Logs allow you to group logs that come from the same source (log
    streams) and then search through those groups using filter patterns. Filter patterns
    are like the CloudWatch version of regular expressions and allow you to search
    through the different fields of the logs in your log streams and groups.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: CloudWatch Logs允许您将来自相同来源（日志流）的日志进行分组，然后使用筛选模式在这些组中进行搜索。筛选模式类似于CloudWatch版的正则表达式，允许您在日志流和日志组的不同字段中进行搜索。
- en: Using subscriptions, you can push either all the logs from a particular log
    stream or only those that meet a particular filter pattern. You can have subscriptions
    push data to either an Amazon Kinesis stream for real-time data processing or
    to a Lambda function for event-driven processing. You can even use a Lambda function
    to push logs that are driven into one or more CloudWatch log groups directly into
    the managed Elasticsearch service for easier searching and graphical trending
    using the Kibana interface.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用订阅，您可以将特定日志流中的所有日志或仅符合特定筛选模式的日志推送出去。您可以将订阅数据推送到Amazon Kinesis流进行实时数据处理，或推送到Lambda函数进行事件驱动处理。您甚至可以使用Lambda函数将通过日志推送到一个或多个CloudWatch日志组的日志，直接推送到托管的Elasticsearch服务，以便通过Kibana界面进行更轻松的搜索和图形趋势分析。
- en: With an overview of CloudWatch Logs out of the way, let's take a closer look
    at some of the terms we just used for this service and how they all work together
    in CloudWatch Logs.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在简要了解CloudWatch Logs之后，接下来让我们深入了解一下我们刚才提到的一些术语，以及它们在CloudWatch Logs中是如何协同工作的。
- en: CloudWatch Logs terminology
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CloudWatch Logs术语
- en: 'As we start to get deeper into CloudWatch Logs, there are some terms that we
    need to be familiar with, especially in the context of both the following exercise
    and the professional exam:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们深入探讨CloudWatch Logs时，有一些术语是我们需要熟悉的，尤其是在接下来的练习和专业考试的上下文中：
- en: '**Filter pattern**: The filtering expressions that restrict which logs get
    forwarded to the AWS destination resource.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**筛选模式**：限制哪些日志会被转发到AWS目标资源的过滤表达式。'
- en: '**Log events**: A record of some activity that''s been recorded in CloudWatch
    Logs is known as a log event. Event messages must be in UTF-8 format.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**日志事件**：在CloudWatch Logs中记录的某项活动的记录被称为日志事件。事件消息必须是UTF-8格式。'
- en: '**Log streams** and **Log groups**: A group of log streams that share the same
    source is grouped in the CloudWatch Logs console as log groups. There is no limit
    on how many log streams can be a part of one log group.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**日志流** 和 **日志组**：共享相同来源的一组日志流在 CloudWatch Logs 控制台中被归为日志组。一个日志组中可以包含任意数量的日志流。'
- en: '**Metric filters**: Using metric filters, you can extract data from ingested
    events. You can then convert them into data points on a CloudWatch metric. Metric
    filters are assigned to log groups. All log streams in a particular log group
    get the particular metric filters assigned.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**指标过滤器**：通过使用指标过滤器，你可以从接收到的事件中提取数据。然后，你可以将这些数据转换为 CloudWatch 指标上的数据点。指标过滤器被分配给日志组。特定日志组中的所有日志流都会分配这些特定的指标过滤器。'
- en: '**Retention settings**: How long your log files are kept in CloudWatch Logs
    is determined by the retention settings. By default, logs are kept indefinitely
    and never expire. This can lead to extra costs if you do not need your logs over
    a specified time. Instead, you can choose a retention period between 1 day and
    10 years for each log group, and once the retention period is met, then the logs
    will be automatically deleted:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**保留设置**：你的日志文件在 CloudWatch Logs 中的保留时间由保留设置决定。默认情况下，日志会被永久保存，不会过期。如果你不需要保存日志超过指定时间，这可能会导致额外的费用。你可以为每个日志组选择
    1 天至 10 年之间的保留期限，一旦达到该保留期限，日志将自动删除：'
- en: '![Figure 14.4 – The flow of logs from resources to CloudWatch Logs'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.4 – 从资源到 CloudWatch Logs 的日志流动'
- en: '](img/Figure_14.4_B17405.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_14.4_B17405.jpg)'
- en: Figure 14.4 – The flow of logs from resources to CloudWatch Logs
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.4 – 从资源到 CloudWatch Logs 的日志流动
- en: Using the terms we just learned, in the preceding diagram, we can see how a
    log that has been generated from an AWS resource becomes a log stream. One or
    more streams are combined to form a log group. Log streams are then retained or
    deleted based on the retention settings.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们刚刚学到的术语，在前面的图示中，我们可以看到从 AWS 资源生成的日志如何成为日志流。一个或多个日志流会被合并形成一个日志组。日志流然后根据保留设置被保留或删除。
- en: Next, we will learn how to use one of the features of CloudWatch logs, Insights,
    to analyze the data that is being captured by the CloudWatch Logs service.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习如何使用 CloudWatch Logs 的一个功能 —— Insights，来分析 CloudWatch Logs 服务所捕获的数据。
- en: CloudWatch alarms
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CloudWatch 警报
- en: In addition to shipping your logs for storage and searching, another aspect
    of monitoring your system is being alerted when something goes awry. These could
    be simple notifications that let you know that a service or server is not being
    responsive. It could also be proactive alerts, letting you know that the platform
    that you are running your application on is running out of CPU or memory and needs
    to be scaled before larger issues arise.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 除了将日志发送到存储并进行搜索，监控系统的另一个方面是当出现问题时接收警报。这些警报可以是简单的通知，让你知道某个服务或服务器没有响应。也可以是主动警报，提醒你所运行应用的平台的
    CPU 或内存即将耗尽，需要在更大问题发生之前进行扩展。
- en: 'You can use the **CloudWatch** service to monitor either a single metric or
    multiple conditions to create alarms. These alarms can be raised when the metrics
    of the underlying resources meet a certain criterion. There are two types of alarms
    that you can create in CloudWatch: metric alarms and composite alarms.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 **CloudWatch** 服务来监控单一指标或多个条件以创建警报。当基础资源的指标满足某个标准时，可以触发这些警报。在 CloudWatch
    中，你可以创建两种类型的警报：指标警报和复合警报。
- en: A **metric alarm** monitors a specific metric of CloudWatch. It has a threshold
    for monitoring that is set when it's initially created, along with the number
    of periods that can break the threshold before going into an alarm state. Once
    that alarm state has been triggered, then an action can be configured. Available
    actions include sending a notification to an SNS topic, performing an EC2 action,
    performing an AutoScaling action, or creating an OpsItem or incident in Systems
    Manager.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**指标警报** 监控 CloudWatch 的特定指标。它有一个监控阈值，该阈值在初次创建时设置，同时还有一个可以突破阈值的周期数，超过该周期数后会进入警报状态。一旦触发该警报状态，就可以配置相应的操作。可用的操作包括向
    SNS 主题发送通知、执行 EC2 操作、执行 AutoScaling 操作，或在 Systems Manager 中创建 OpsItem 或事件。'
- en: A **composite alarm** uses multiple alarm states that you have created to allow
    you to create specific conditions when the alarm goes off.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**复合警报** 使用你创建的多个警报状态，以便在警报触发时创建特定条件。'
- en: 'Once the alarm goes off, you can have the alarm perform a variety of actions,
    such as the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦告警触发，你可以让告警执行各种操作，如下所示：
- en: Stop, terminate, or reboot an EC2 instance.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 停止、终止或重启一个EC2实例。
- en: Have an autoscaling group scale up or down.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让自动伸缩组进行扩容或缩容。
- en: Send a notification message to an AWS SNS topic.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向AWS SNS主题发送通知消息。
- en: '![Figure 14.5 – Examples of CloudWatch alarms'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.5 – CloudWatch告警示例'
- en: '](img/Figure_14.5_B17405.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_14.5_B17405.jpg)'
- en: Figure 14.5 – Examples of CloudWatch alarms
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.5 – CloudWatch告警示例
- en: 'There are certain facts about CloudWatch alarms that you should know about
    when studying for the DevOps Professional exam. While the Professional exam will
    not test you on these facts verbatim, they can be incorporated into a larger scenario:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在准备DevOps专业考试时，有一些关于CloudWatch告警的事实你应该知道。虽然专业考试不会直接考察这些事实，但它们可以融入到更大的场景中：
- en: Alarm names can only be comprised of ASCII characters.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 告警名称只能由ASCII字符组成。
- en: You can create up to 5,000 alarms per region, per account.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个区域、每个账户最多可以创建5,000个告警。
- en: You can add alarms to CloudWatch dashboards.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以将告警添加到CloudWatch仪表板中。
- en: You can test alarms by using the `SetAlarmState` setting (either to engage or
    disengage the alarm).
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以通过使用`SetAlarmState`设置来测试告警（无论是启用还是禁用告警）。
- en: The CloudWatch service saves alarm history for 2 weeks.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudWatch服务保存告警历史记录2周。
- en: Next, we will create a CloudWatch alarm and create some events to trigger the
    alarm. To receive the notifications for the alarm, we will also need to create
    an SNS topic. However, you can skip this first step if you already have an SNS
    topic and would like to use that previously created topic. Just make sure that
    if you are going to skip this step, you are subscribed to the topic.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个CloudWatch告警并创建一些事件来触发告警。为了接收告警通知，我们还需要创建一个SNS主题。然而，如果你已经有一个SNS主题并希望使用该现有主题，可以跳过这一步。只要确保如果跳过这一步，你已经订阅了该主题。
- en: Creating a CloudWatch alarm
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个CloudWatch告警
- en: You should have an EC2 instance that is creating metrics that have been stood
    up from our previous exercise. We will use the metrics from this instance to monitor
    for an alarm and then stress the instance so that an alarm is created.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该已经有一个EC2实例，它正在生成从我们上一个练习中建立的指标。我们将使用这个实例的指标来监控告警，并通过施加负载使告警被触发。
- en: 'For us to receive notifications for the alarm, we will need an SNS topic that
    we can subscribe our email address to:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了接收告警通知，我们需要一个SNS主题，供我们订阅电子邮件地址：
- en: 'Open your terminal and type the following commands to create `topic`:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并输入以下命令来创建`topic`：
- en: '[PRE10]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '{'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: '"TopicArn": "arn:aws:sns:us-east-2:470066103307:cwatch"'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"TopicArn": "arn:aws:sns:us-east-2:470066103307:cwatch"'
- en: '}'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE11]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now that we have our `topic`, we need to use `subscribe` with our email address:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了`topic`，我们需要使用`subscribe`并填写我们的电子邮件地址：
- en: '[PRE12]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '{'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: '"SubscriptionArn": "pending confirmation"'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"SubscriptionArn": "待确认"'
- en: '}'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE13]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, we need to go to our email account and find the email that the SNS service
    has just sent. Then, we must click on the link that says **Confirm Subscription**.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要进入我们的电子邮件账户，找到SNS服务刚刚发送的电子邮件。然后，我们必须点击上面写有**确认订阅**的链接。
- en: With our SNS topic created, we can now back to the AWS Management Console and
    navigate to the `CW_Agent` and make a note of the instance ID. Once you have this
    marked down, go to the CloudWatch service under the **Services** dropdown at the
    top left of the navigation bar. Open the CloudWatch service in a new tab; we will
    need to come back to this instance to test our alarm later.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建了SNS主题后，我们可以返回AWS管理控制台，导航到`CW_Agent`并记下实例ID。一旦记下了这个信息，去导航栏左上方的**服务**下拉菜单中选择CloudWatch服务。打开CloudWatch服务的新标签页，我们稍后需要回到这个实例来测试我们的告警。
- en: Once you're in the CloudWatch service, find the **Alarms** menu setting from
    the left-hand menu. Click on this to expand the menu item and view the sub-menu
    items. Once expanded, click on **All alarms** so that you can be taken to the
    **Alarms** screen.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦进入CloudWatch服务，从左侧菜单中找到**告警**菜单设置。点击该菜单项以展开并查看子菜单项。展开后，点击**所有告警**，这样你就能进入**告警**页面。
- en: On the **Alarms** page, click on the orange button labeled **Create Alarm**
    to create a new alarm. This will bring up the prompts for creating the alarm.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**告警**页面，点击标有**创建告警**的橙色按钮来创建新的告警。这将弹出创建告警的提示。
- en: Click on the **Select metric** button. This will bring up a dialog where you
    can choose the metric. Find **Custom Namespaces** and click on **CWAgent**. Once
    you're inside the **CWAgent** namespace, choose the grouping labeled **ImageId,
    InstanceId, InstanceType** and click on this link.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**选择指标**按钮。这将弹出一个对话框，您可以选择指标。找到**自定义命名空间**，然后点击**CWAgent**。进入**CWAgent**命名空间后，选择标记为**ImageId,
    InstanceId, InstanceType**的分组，并点击该链接。
- en: Find the metric named `mem_used_percent`. However, before clicking on the box
    to select it, make sure that the `InstanceId` matches the instance ID that you
    found earlier. If everything matches, then select the checkbox to the left of
    the metric to use this metric in the alarm. When you select this metric or any
    metric, a graph will appear at the top, showing the recorded values for the metric
    you selected. Click on the orange **Select metric** button at the bottom to continue:![Figure
    14.6 – Selecting the single metric to monitor when creating a CloudWatch alarm
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到名为`mem_used_percent`的指标。然而，在点击选择框之前，请确保`InstanceId`与您之前找到的实例ID匹配。如果一切匹配，则选中该指标左侧的复选框，以便在警报中使用此指标。当您选择此指标或任何其他指标时，顶部将显示一个图形，显示您所选指标的记录值。点击页面底部的橙色**选择指标**按钮继续：![图14.6
    - 在创建CloudWatch警报时选择要监控的单一指标
- en: '](img/Figure_14.6_B17405.jpg)'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_14.6_B17405.jpg)'
- en: Figure 14.6 – Selecting the single metric to monitor when creating a CloudWatch
    alarm
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图14.6 - 在创建CloudWatch警报时选择要监控的单一指标
- en: Scroll down to the `20`. Once you have changed these values, click the orange
    **Next** button.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动至`20`。更改这些值后，点击橙色的**下一步**按钮。
- en: 'Now, on the **Notifications** screen, use the following selections. Once you
    have filled in all the sections, scroll to the bottom of the page and click the
    orange **Next** button:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在**通知**屏幕上，使用以下选择。填充完所有部分后，向下滚动到页面底部并点击橙色的**下一步**按钮：
- en: 'a. **Alarm state trigger**: In Alarm.'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. **警报状态触发器**：在警报中。
- en: 'b. **Select an SNS Topic**: Select an existing SNS topic.'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. **选择SNS主题**：选择一个现有的SNS主题。
- en: 'c. **Send notification to**: Choose the cwatch notification topic you just
    created.'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. **发送通知到**：选择您刚刚创建的cwatch通知主题。
- en: Next, on the `chapter14` as the alarm name. Click the orange **Next** button.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`chapter14`处作为警报名称。点击橙色的**下一步**按钮。
- en: Finally, on the **Preview and create** page, scroll down to the bottom of the
    page, checking the values of the items on the way down. If everything looks right,
    then click on the orange **Create Alarm** button at the bottom of the page.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在**预览并创建**页面，向下滚动到页面底部，逐一检查页面上的各项值。如果一切看起来正常，请点击页面底部的橙色**创建警报**按钮。
- en: Now that we have created our alarm, we need to test it. We could test it by
    changing `SetAlarmState` using the CLI. However, we are going to test our alarm
    by performing a stress test on the EC2 instance itself. Find the tab that contains
    the instance ID that we opened earlier. Select the checkbox next to the instance,
    and then at the top of the **Instances** screen in the AWS Management Console,
    find the dropdown labeled **Actions**. Click on the **Actions** menu to expose
    the sub-menu items. Choose **Connect**.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经创建了警报，接下来需要对其进行测试。我们可以通过使用CLI更改`SetAlarmState`来进行测试。然而，我们将通过对EC2实例本身进行压力测试来测试警报。找到之前打开的包含实例ID的标签。选择该实例旁边的复选框，然后在AWS管理控制台的**实例**屏幕顶部，找到标有**操作**的下拉菜单。点击**操作**菜单以显示子菜单项。选择**连接**。
- en: On the **Connect** screen, use **Session Manager** to connect to the instance.
    Once on the **Session Manager** tab, click on the orange **Connect** button at
    the bottom to start our session inside of our EC2 instance.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**连接**屏幕上，使用**会话管理器**连接到实例。进入**会话管理器**标签页后，点击底部的橙色**连接**按钮，开始我们在EC2实例中的会话。
- en: 'Now that we are inside the instance, we will need to install a package to help
    us stress test the instance and set off the alarm. Run the following command to
    install the package:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经进入实例，接下来需要安装一个包来帮助我们对实例进行压力测试并触发警报。运行以下命令安装该包：
- en: '[PRE14]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once the `stress` package has been installed, we can run it with the following
    options to stresstest the memory of the instance:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦安装了`stress`包，我们可以使用以下选项来运行它，进行压力测试实例的内存：
- en: '[PRE15]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: After the **Memory used** percent on the instance goes above 20% for 5 minutes,
    you should receive an email notification to whatever email you subscribed with
    in the SNS topic.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当实例的**内存使用**百分比超过20%并持续5分钟后，您应该会收到一封电子邮件通知，通知将发送到您在SNS主题中订阅的电子邮件地址。
- en: 'Now that we have seen how the CloudWatch service can collect and aggregate
    our logs and help us with our monitoring duties with sending alerts, we will take
    a look at another tool in our monitoring and debugging toolbelt: **AWS X-Ray**.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经看到 CloudWatch 服务如何收集和聚合日志，并通过发送警报帮助我们进行监控工作，接下来我们将介绍我们监控和调试工具包中的另一个工具：**AWS
    X-Ray**。
- en: Adding application tracing with X-Ray
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 X-Ray 添加应用程序跟踪
- en: '**X-Ray** is a service that''s used to monitor modern web applications. Modern
    applications are essentially service-oriented applications. These can be serverless
    architecture applications or applications that run inside containers. With these
    modern applications, the app itself is broken into multiple pieces. While this
    presents many advantages, including ease of scaling in a horizontal nature and
    taking full advantage of cloud-native services, it can also present some challenges.
    Understanding where errors are ultimately impacting your service (or business)
    becomes more problematic.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**X-Ray** 是用于监控现代 Web 应用程序的服务。现代应用程序本质上是面向服务的应用程序。这些应用程序可以是无服务器架构应用程序或运行在容器中的应用程序。在这些现代应用程序中，应用本身被拆分成多个部分。虽然这带来了许多优势，包括水平扩展的便捷性和充分利用云原生服务，但也会带来一些挑战。了解错误最终对您的服务（或业务）产生的影响变得更加复杂。'
- en: 'Tracing allows you to connect the dots in a modern application by letting you
    do the following:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪功能使您能够通过以下方式在现代应用程序中连接各个环节：
- en: Discover multiple services.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现多个服务。
- en: Get insights into individual operations.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取有关单个操作的洞察。
- en: See issues isolated within a segment.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看段内隔离的问题。
- en: Perform root cause analysis for a specific issue.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对特定问题进行根本原因分析。
- en: '![Figure 14.7 – How an X-Ray trace breaks down pieces into segments'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.7 – X-Ray 跟踪如何将各个部分拆分成段'
- en: '](img/Figure_14.7_B17405.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_14.7_B17405.jpg)'
- en: Figure 14.7 – How an X-Ray trace breaks down pieces into segments
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.7 – X-Ray 跟踪如何将各个部分拆分成段
- en: Tracing allows you to quickly look at and easily examine what happened for a
    particular API call or a particular user.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪功能使您能够快速查看并轻松检查特定 API 调用或特定用户发生了什么。
- en: A **trace** is a holistic view, and it encapsulates the end-to-end transactions
    from a customer standpoint where the customer created the transaction.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 一个**跟踪**是一个全面的视图，它从客户的角度封装了从客户创建交易的端到端事务。
- en: At that point, X-Ray breaks the trace down into segments. Segments are chunks
    that come from individual servers.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，X-Ray 会将跟踪分解成多个段。段是来自单个服务器的片段。
- en: Now that we understand traces, which are one of the main concepts in X-Ray,
    let's look at how the X-Ray service itself works.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经理解了跟踪，这是 X-Ray 中的一个主要概念，让我们来看一下 X-Ray 服务本身是如何工作的。
- en: The trace is then broken up into various segments. A **segment** furnishes the
    name of the resource, the specifics about the request, and the work being done.
    Segments can also show issues that occur in the segment, such as errors, faults,
    and exceptions.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，跟踪被分解成不同的段。一个**段**提供了资源的名称、请求的具体信息以及正在执行的工作。段也可以显示在该段中发生的问题，如错误、故障和异常。
- en: How does the X-Ray service work?
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: X-Ray 服务是如何工作的？
- en: You start by integrating the X-Ray SDK into your applications. This can be customized
    for different languages such as Python, Java, and Node.js. Next, an on-instance
    daemon starts to collect the data. The daemon then ships this data to the X-Ray
    backend. At the X-Ray backend, the traces are then recorded. There may be feeds
    coming for different services at multiple points in time, yet the X-Ray service
    can piece all of this information together using a **trace id**. Once the trace
    has been collected, the X-Ray service creates an aggregated view called a **Service
    Map**. Finally, X-Ray presents a set of analytics capabilities that allow you
    to dive into and answer three valuable questions.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 您首先将 X-Ray SDK 集成到您的应用程序中。可以针对不同的语言（如 Python、Java 和 Node.js）进行定制。接下来，一个实例上的守护进程开始收集数据。然后，守护进程将这些数据发送到
    X-Ray 后端。在 X-Ray 后端，跟踪数据被记录。不同服务可能会在不同时间点提供数据，但 X-Ray 服务可以通过使用**跟踪 ID**将所有这些信息拼接在一起。一旦收集到跟踪数据，X-Ray
    服务会创建一个名为**服务地图**的汇总视图。最后，X-Ray 提供了一套分析功能，允许您深入挖掘并回答三个重要问题。
- en: Another item to note is that the X-Ray service is cloud-agnostic. This means
    that the code you have written doesn't have to only run in the AWS cloud. The
    code can run in other places to take advantage of the X-Ray service's tracing
    capabilities, such as on a developer's laptop or in a corporate data center. This
    assumes that the environment that it is running in has connectivity back to the
    AWS X-Ray service and a set of credentials that will enable it to run.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要注意的事项是，X-Ray服务是云无关的。这意味着你编写的代码不必仅在AWS云中运行。代码可以在其他地方运行，以利用X-Ray服务的跟踪功能，例如在开发者的笔记本电脑上或企业数据中心中。前提是运行环境能够连接回AWS
    X-Ray服务，并具有一组凭证以使其能够运行。
- en: X-Ray helps you answer three questions
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: X-Ray帮助你解答三个问题
- en: 'The X-Ray service helps developers answer three specific questions:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: X-Ray服务帮助开发者解答三个特定问题：
- en: '**How** is my application doing?'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**我的应用程序运行得怎么样？**'
- en: '**Why** is my application performing the way it is?'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**为什么**我的应用程序表现成这样？'
- en: '**Who** is impacted by the issues?'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**谁**受到了这些问题的影响？'
- en: The graphical nature of the X-Ray interface, which is depicted as a service
    graph, lets you and your development team see where the users of your application
    are consuming resources. It also gives you the times of responses for the different
    resources so that you can see if a particular resource is the cause of latency
    or trouble issues.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: X-Ray界面的图形化展示，表现为服务图，使你和你的开发团队能够看到应用程序用户在哪些地方消耗了资源。它还会给出不同资源的响应时间，让你看到是否某个特定资源是延迟或问题的根源。
- en: Now that we understand how X-Ray can help us with developing and troubleshooting
    our applications that are running on the AWS cloud, let's take a look a how the
    X-Ray service integrates with serverless services.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了X-Ray如何帮助我们开发和排查在AWS云上运行的应用程序，让我们来看一下X-Ray服务如何与无服务器服务集成。
- en: X-Ray and serverless services
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: X-Ray和无服务器服务
- en: When using X-Ray in conjunction with serverless services and Lambda, in particular,
    the X-Ray service brings a few unique benefits to the table that you would not
    get with CloudWatch monitoring. X-Ray lets you obtain information on the timing
    of AWS Lambda cold starts.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在与无服务器服务，特别是Lambda一起使用X-Ray时，X-Ray服务提供了一些CloudWatch监控无法提供的独特优势。X-Ray让你获取AWS
    Lambda冷启动的时间信息。
- en: When a Lambda service first receives a request to run a function, it needs to
    prepare an execution environment. This means that it needs to retrieve the code
    from an S3 bucket where the code is stored and then allocate the runtime environment,
    which includes the memory and CPU. After performing any last initialization steps,
    Lambda can then run the handler.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 当Lambda服务首次收到请求执行一个函数时，它需要准备执行环境。这意味着它需要从存储代码的S3桶中获取代码，并分配运行时环境，包括内存和CPU。经过最后的初始化步骤后，Lambda就可以执行处理程序。
- en: Implementing X-Ray on a Lambda function
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Lambda函数上实施X-Ray
- en: 'In [*Chapter 12*](B17405_12_Final_JM_ePub.xhtml#_idTextAnchor307), *Lambda
    Deployments and Versioning*, we went over AWS Lambda. This is the Function-as-a-Service
    offering from AWS. We can take the functions we build and then enable the X-Ray
    service on one of them to see the traces and segments from AWS X-Ray:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第12章*](B17405_12_Final_JM_ePub.xhtml#_idTextAnchor307)中，我们讲解了AWS Lambda。这是AWS提供的函数即服务（Function-as-a-Service）。我们可以将自己构建的函数启用X-Ray服务，以查看来自AWS
    X-Ray的跟踪和段信息：
- en: Note
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you have either not done the *Creating a Lambda function* exercise in [*Chapter
    12*](B17405_12_Final_JM_ePub.xhtml#_idTextAnchor307), *Lambda Deployments and
    Versioning*, where we went through the process of creating the word count function,
    or you have deleted this function from your account, please go back and do/redeploy
    this exercise. We will be using this function to continue our AWS X-Ray exercise.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有完成[*第12章*](B17405_12_Final_JM_ePub.xhtml#_idTextAnchor307)中的*创建Lambda函数*练习，或者如果你已经从账户中删除了该函数，请返回并重新执行/重新部署该练习。我们将使用这个函数来继续进行AWS
    X-Ray练习。
- en: Log into **AWS Management Console** and navigate to the **Lambda** service.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到**AWS管理控制台**并导航到**Lambda**服务。
- en: Once at the `my_word_count_python`. Click on the name of this function to be
    taken to this function. If you have not created this function or had deleted it
    after performing the exercise, you have two options. You can go back and recreate
    the function or you can try and follow the steps for another function that you
    have created in your account to implement the X-Ray tracing service.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦进入`my_word_count_python`。点击该函数的名称以进入此函数。如果你没有创建此函数，或者在执行练习后删除了它，你有两个选项。你可以返回并重新创建此函数，或者你可以尝试按照你在帐户中创建的其他函数的步骤来实施
    X-Ray 跟踪服务。
- en: Now that you are in the **Lambda** service, scroll down the page until you find
    the horizontal menu bar and click on the menu item named **Configuration**:![Figure
    14.8 – Configuration highlighted on the Lambda horizontal menu
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你已经进入**Lambda**服务，向下滚动页面，直到找到水平菜单栏，然后点击名为**配置**的菜单项：![图 14.8 – Lambda 水平菜单中的配置高亮显示
- en: '](img/Figure_14.8_B17405.jpg)'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_14.8_B17405.jpg)'
- en: Figure 14.8 – Configuration highlighted on the Lambda horizontal menu
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.8 – Lambda 水平菜单中的配置高亮显示
- en: The **Configuration** menu choice will bring up a vertical menu on the left-hand
    side of the screen. Locate the option named **Monitoring and operations tools**
    and click on it. This will bring **Monitoring and operations view** into focus.
    At the top right of this view, choose **Edit**.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**配置**菜单项会在屏幕左侧弹出一个垂直菜单。找到名为**监控和操作工具**的选项并点击它。这会将**监控和操作视图**显示出来。在该视图的右上角，选择**编辑**。
- en: On the **Edit monitoring tools** page, find the section labeled **AWS X-Ray**.
    Click on the **Slider** button to turn X-Ray tracing on for this Lambda function.
    Then, click **Save** at the bottom of the page:![Figure 14.9 – Adding AWS X-Ray
    to our Lambda function
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**编辑监控工具**页面，找到标有**AWS X-Ray**的部分。点击**滑块**按钮，为这个 Lambda 函数启用 X-Ray 跟踪。然后，在页面底部点击**保存**：![图
    14.9 – 将 AWS X-Ray 添加到我们的 Lambda 函数中
- en: '](img/Figure_14.9_B17405.jpg)'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_14.9_B17405.jpg)'
- en: Figure 14.9 – Adding AWS X-Ray to our Lambda function
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.9 – 将 AWS X-Ray 添加到我们的 Lambda 函数中
- en: Clicking **Save** will take you back to the **Monitoring and operations tools**
    page under the **Configuration** header. You should see that **Active tracing**
    is now enabled. With tracing enabled, let's run a test to see X-Ray in action.
    From the horizontal navigation bar, click the menu item named **Test**.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**将带你回到**配置**标题下的**监控和操作工具**页面。你应该会看到**活动跟踪**现在已经启用。启用跟踪后，让我们运行一个测试，看看
    X-Ray 是如何工作的。从水平导航栏中，点击名为**测试**的菜单项。
- en: If you need to create another test event, then you can use the default data
    and save it as `XRtest`. If you still have the Lambda function up from the previous
    exercise, then you should have a test event named `Test1` that we previously created.
    With your test event created, click the orange **Test** button in the top-right
    corner of the **Test event** section:![Figure 14.10 – The orange test button to
    the right of the Test event section
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要创建另一个测试事件，你可以使用默认数据并将其保存为`XRtest`。如果你仍然保留了上一个练习中的 Lambda 函数，那么你应该已经创建了名为`Test1`的测试事件。创建好测试事件后，点击**测试事件**部分右上角的橙色**测试**按钮：![图
    14.10 – 测试事件部分右侧的橙色测试按钮
- en: '](img/Figure_14.10_B17405.jpg)'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_14.10_B17405.jpg)'
- en: Figure 14.10 – The orange test button to the right of the Test event section
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.10 – 测试事件部分右侧的橙色测试按钮
- en: Once your test event has run, we can click on the **Monitor** menu item on the
    horizontal menu to be taken to the **Monitoring** page. By default, this page
    will be on the metrics section. However, we will click on the item named **Traces**
    so that we can see the X-Ray trace that was produced.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦测试事件运行完毕，我们可以点击水平菜单中的**监控**菜单项，进入**监控**页面。默认情况下，该页面会显示指标部分。然而，我们将点击名为**跟踪**的项，以便查看生成的
    X-Ray 跟踪信息。
- en: On the trace screen, we can now see a **Service Map**, which was produced along
    with the trace ID of the function, which was traced in the following table:![Figure
    14.11 – The generated X-Ray Service Map
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在跟踪屏幕上，我们现在可以看到一个**服务地图**，它与函数的跟踪 ID 一起生成，相关的跟踪信息如下表所示：![图 14.11 – 生成的 X-Ray
    服务地图
- en: '](img/Figure_14.11_B17405.jpg)'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_14.11_B17405.jpg)'
- en: Figure 14.11 – The generated X-Ray Service Map
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 14.11 – 生成的 X-Ray 服务地图
- en: 'Go back to the **Test** section and click **Test event** about two to three
    more times. Once the Lambda invocations have been completed, you can go back to
    the **Monitor** tab and look at the trace table once again:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到**测试**部分，点击**测试事件**两到三次。当 Lambda 调用完成后，你可以返回到**监控**标签并再次查看追踪表格：
- en: '![Figure 14.12 – Table of traces from the same Lambda function'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.12 – 同一 Lambda 函数的追踪表格'
- en: '](img/Figure_14.12_B17405.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_14.12_B17405.jpg)'
- en: Figure 14.12 – Table of traces from the same Lambda function
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.12 – 同一 Lambda 函数的追踪表格
- en: If you clicked the test event multiple times in a row, then in the **Response
    Time** column in the table, you should see that there will be some functions that
    have a much faster response time than others. This is because there is no cold
    start needed for these functions.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你连续多次点击了测试事件，那么在表格中的**响应时间**列，你应该会看到一些函数的响应时间明显快于其他函数。这是因为这些函数不需要冷启动。
- en: We just went through an exercise that took a previous Lambda function that we
    had running, and then allowed us to gain more information on it by adding X-Ray
    traces. We could see the path of the calls, starting from the customer, as well
    as the variations in the time that the function takes to respond initially.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚完成了一个练习，它将之前运行的 Lambda 函数与 X-Ray 追踪结合，帮助我们获取更多信息。我们可以看到调用的路径，从客户开始，以及函数首次响应所需时间的变化。
- en: Next, let's wrap up what we learned in this chapter regarding AWS CloudWatch
    and X-Ray.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们总结一下本章关于 AWS CloudWatch 和 X-Ray 的内容。
- en: Summary
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at the importance of monitoring for our different
    environments and applications, especially the CloudWatch service.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了在不同环境和应用程序中进行监控的重要性，尤其是 CloudWatch 服务。
- en: In the next chapter, we will continue to look at the CloudWatch service by looking
    deeper at the monitoring and metrics capabilities of the service. We will also
    learn how to automate reactions from the CloudWatch service using AWS EventHub.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续深入研究 CloudWatch 服务，重点关注该服务的监控和指标功能。我们还将学习如何使用 AWS EventHub 自动化响应
    CloudWatch 服务。
- en: Review questions
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复习问题
- en: 'Answer the following questions to test your knowledge of this chapter:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题以测试你对本章的理解：
- en: You have been hired by a company to help the DevOps team. The team currently
    needs help with their monitoring. The company wants to use all native AWS services
    rather than third-party services. There is currently a production RDS PostgreSQL
    database that needs to be monitored closely as it is the main data store for the
    customer orders. Which services can be used to monitor and alert in real time
    if the IOPs metrics exceed the normal levels and allow the DevOps teams to provision
    more IOPs? (Choose two)
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你被一家公司聘请，帮助 DevOps 团队。该团队目前需要帮助进行监控。公司希望使用所有原生的 AWS 服务，而不是第三方服务。目前有一个生产环境中的
    RDS PostgreSQL 数据库需要密切监控，因为它是客户订单的主要数据存储。可以使用哪些服务来实时监控和告警，如果 IOPs 指标超过正常水平，并允许
    DevOps 团队增加更多 IOPs？（选择两个）
- en: a. Amazon CloudWatch
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. Amazon CloudWatch
- en: b. Amazon CloudTrail
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. Amazon CloudTrail
- en: c. Amazon Simple Notification Service
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. Amazon Simple Notification Service
- en: d. Amazon Route 53
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d. Amazon Route 53
- en: You have developed a modern application using AWS Lambda functions for a company
    that is invoked when someone places a file in an S3 bucket. The company would
    like more visibility into the application and has requested that you integrate
    AWS X-Ray into the Lambda function so that they can see the traces. How should
    you do this to ensure that you make sure that all non-instrumented services that
    invoke your Lambda function are traced?
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你为一家公司开发了一个现代应用程序，该应用程序使用 AWS Lambda 函数，在有人将文件放入 S3 存储桶时被调用。公司希望更好地了解该应用程序，并要求你将
    AWS X-Ray 集成到 Lambda 函数中，以便他们能看到追踪信息。为了确保所有未加 instrument 的服务调用你的 Lambda 函数时也能进行追踪，你应该如何操作？
- en: a. Under the AWS Lambda function configuration, enable Start tracing.
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. 在 AWS Lambda 函数配置下，启用开始追踪。
- en: b. Under the AWS Lambda function configuration, enable Active tracing.
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. 在 AWS Lambda 函数配置下，启用活动追踪。
- en: c. Lambda functions do not support tracing when invoked by non-instrumented
    services.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. 当 Lambda 函数由未加 instrument 的服务调用时，不支持追踪。
- en: d. Lambda functions do not need any additional configuration to record traces
    when invoked by non-instrumented services.
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d. 当 Lambda 函数由未加 instrument 的服务调用时，不需要额外配置就能记录追踪。
- en: You have been brought on to a team that is using a mainly serverless architecture
    consisting of Lambda functions. They want to be able to analyze the invocations
    of the functions during the testing phase of their SDLC. Which of the two (2)
    following tools will help them achieve this?
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你被安排加入一个使用主要基于无服务器架构的团队，该架构由Lambda函数组成。他们希望能够在软件开发生命周期（SDLC）的测试阶段分析这些函数的调用。以下哪两种工具可以帮助他们实现这一目标？
- en: a. Amazon CloudTrail
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. Amazon CloudTrail
- en: b. Amazon CloudWatch
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. Amazon CloudWatch
- en: c. Amazon Inspector
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. Amazon Inspector
- en: d. Amazon X-Ray
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d. Amazon X-Ray
- en: Review answers
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审查答案
- en: a, c
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: a, c
- en: b
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: b
- en: b, d
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: b, d
