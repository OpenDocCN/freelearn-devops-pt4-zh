- en: 3\. Design pattern – Networks, storage, messaging, and events
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3. 设计模式 – 网络、存储、消息传递和事件
- en: In the previous chapter, you got an overview of the Azure cloud and learned
    about some of the important concepts related to it. This chapter is about Azure
    cloud patterns that are related to virtual networks, storage accounts, regions,
    Availability Zones, and Availability Sets. These are important constructs that
    affect the final architecture delivered to customers in terms of cost, efficiencies,
    and overall productivity. The chapter also briefly discusses the cloud patterns
    that help us to implement scalability and performance for an architecture.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你概览了 Azure 云并了解了一些相关的重要概念。本章讲解的是与虚拟网络、存储帐户、区域、可用性区域和可用性集相关的 Azure 云设计模式。这些是影响最终架构的重要构建块，直接关系到成本、效率和整体生产力。本章还简要讨论了帮助我们实现架构可扩展性和性能的云设计模式。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Azure Virtual Network design
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 虚拟网络设计
- en: Azure Storage design
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 存储设计
- en: Azure Availability Zones, regions, and Availability Sets
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 可用性区域、区域和可用性集
- en: Azure design patterns related to messaging, performance, and scalability
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与消息传递、性能和可扩展性相关的 Azure 设计模式
- en: Azure Availability Zones and Regions
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure 可用性区域和区域
- en: Azure is backed up by large datacenters interconnected into a single large network.
    The datacenters are grouped together, based on their physical proximity, into
    Azure regions. For example, datacenters in Western Europe are available to Azure
    users in the West Europe region. Users cannot choose their preferred datacenter.
    They can select their Azure region and Azure will allocate an appropriate datacenter.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 由大型数据中心支持，这些数据中心通过一个庞大的网络互联。数据中心根据其物理位置的接近性，分组为 Azure 区域。例如，西欧的数据中心对西欧区域的
    Azure 用户可用。用户无法选择其偏好的数据中心，他们只能选择 Azure 区域，Azure 会分配一个合适的数据中心。
- en: 'Choosing an appropriate region is an important architectural decision as it
    affects:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 选择合适的区域是一个重要的架构决策，因为它会影响：
- en: The availability of resources
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源的可用性
- en: Data and privacy compliance
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据和隐私合规性
- en: The performance of the application
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序的性能
- en: The cost of running applications
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行应用程序的成本
- en: Let's discuss each of these points in detail.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细讨论一下这些要点。
- en: Availability of resources
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 资源的可用性
- en: Not all resources are available in every Azure region. If your application architecture
    demands a resource that is not available in a region, choosing that region will
    not help. Instead, a region should be chosen based on the availability of the
    resources required by the application. It might be that the resource is not available
    while developing the application architecture, and it could be on Azure's roadmap
    to make it available subsequently.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有资源都在每个 Azure 区域中可用。如果你的应用架构要求的资源在某个区域不可用，那么选择该区域是没有帮助的。相反，应该根据应用程序所需资源的可用性来选择区域。可能在开发应用程序架构时该资源不可用，但它可能在
    Azure 的发展路线图中，后续会使其可用。
- en: 'For example, Log Analytics is not available in all regions. If your data sources
    are in Region A and the Log Analytics workspace is in Region B, you need to pay
    for the bandwidth, which is the data egress charges from Region A to B. Similarly,
    some services can work with resources that are located in the same region. For
    instance, if you would like to encrypt the disks of your virtual machine that
    is deployed in Region A, you need to have Azure Key Vault deployed in Region A
    to store the encryption keys. Before deploying any services, you need to check
    whether your dependency services are available in that region. A good source to
    check the availability of Azure products across regions is this product page:
    [https://azure.microsoft.com/global-infrastructure/services](https://azure.microsoft.com/global-infrastructure/services).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Log Analytics 并非在所有区域都可用。如果你的数据源位于区域 A，而 Log Analytics 工作区位于区域 B，你需要支付带宽费用，即从区域
    A 到 B 的数据出口费用。类似地，一些服务只能与位于同一区域的资源一起使用。例如，如果你希望加密部署在区域 A 的虚拟机磁盘，你需要在区域 A 部署 Azure
    Key Vault 来存储加密密钥。在部署任何服务之前，你需要检查你的依赖服务是否在该区域内可用。查看 Azure 产品在各个区域的可用性的一个好途径是这个产品页面：[https://azure.microsoft.com/global-infrastructure/services](https://azure.microsoft.com/global-infrastructure/services)。
- en: Data and privacy compliance
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据和隐私合规性
- en: Each country has its own rules for data and privacy compliance. Some countries
    are very specific about storing their citizens' data in their own territories.
    Hence, such legal requirements should be taken into consideration for every application's
    architecture.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每个国家都有自己的数据和隐私合规性规定。有些国家对于将其公民的数据存储在本国领土内有非常明确的要求。因此，在设计每个应用程序的架构时，必须考虑到这些法律要求。
- en: Application performance
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用程序性能
- en: The performance of an application is dependent on the network route taken by
    requests and responses to get to their destinations and back again. The location
    that is geographically closer to you may not always be the region with the lowest
    latency. We calculate distance in kilometers or miles, but latency is based on
    the route the packet takes. For example, an application deployed in Western Europe
    for Southeast Asian users will not perform as well as an application deployed
    to the East Asia region for users in that region. So, it's very important that
    you architect your solutions in the closest region to provide the lowest latency
    and thus the best performance.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的性能取决于请求和响应到达目标并返回时所经过的网络路由。地理上更接近的区域不一定是延迟最低的区域。我们可以按公里或英里来计算距离，但延迟是基于数据包所经过的路径。例如，部署在西欧的面向东南亚用户的应用程序，其性能可能不如部署在东亚区域面向该地区用户的应用程序。因此，确保在离您最近的区域架构解决方案至关重要，以提供最低的延迟和最佳的性能。
- en: Cost of running applications
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行应用程序的成本
- en: The cost of Azure services differs from region to region. A region with an overall
    lower cost should be chosen. There is a complete chapter on cost management in
    this book (*Chapter 6, Cost management for Azure solutions*), and it should be
    referred to for more details on cost.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Azure服务的费用因区域而异。应选择整体成本较低的区域。本书中有完整的一章讲解成本管理（*第六章，Azure解决方案的成本管理*），可以参考其中的详细信息。
- en: So far, we have discussed how to choose the right region to architect our solution.
    Now that we have a suitable region in mind for our solution, let's discuss how
    to design our virtual networks in Azure.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了如何选择合适的区域来架构我们的解决方案。现在我们已经确定了适合解决方案的区域，接下来我们将讨论如何在Azure中设计我们的虚拟网络。
- en: Virtual networks
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 虚拟网络
- en: Virtual networks should be thought of like a physical office or home LAN network
    setup. Conceptually, they are the same, although **Azure Virtual Network** (**VNet**)
    is implemented as a software-defined network backed up by a giant physical network
    infrastructure.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟网络应该像物理办公室或家庭局域网一样考虑。从概念上讲，它们是相同的，尽管**Azure虚拟网络**（**VNet**）作为一种软件定义网络，通过庞大的物理网络基础设施实现。
- en: A VNet is required to host a virtual machine. It provides a secure communication
    mechanism between Azure resources so that they can connect to each other. The
    VNets provide internal IP addresses to the resources, facilitate access and connectivity
    to other resources (including virtual machines on the same virtual network), route
    requests, and provide connectivity to other networks.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: VNet是托管虚拟机所必需的。它提供了Azure资源之间的安全通信机制，使得它们能够相互连接。VNet为资源提供内部IP地址，便于访问和连接其他资源（包括同一虚拟网络上的虚拟机），路由请求，并提供与其他网络的连接。
- en: A virtual network is contained within a resource group and is hosted within
    a region, for example, West Europe. It cannot span multiple regions but can span
    all datacenters within a region, which means we can span virtual networks across
    multiple Availability Zones in a region. For connectivity across regions, virtual
    networks can be connected using VNet-to-VNet connectivity.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟网络包含在一个资源组中，并托管在某个区域内，例如西欧。它不能跨多个区域，但可以跨该区域内的所有数据中心，这意味着我们可以跨区域的多个可用性区域构建虚拟网络。对于跨区域的连接，虚拟网络可以通过VNet对VNet连接实现互联。
- en: Virtual networks also provide connectivity to on-premises datacenters, enabling
    hybrid clouds. There are multiple types of VPN technologies that you can use to
    extend your on-premises datacenters to the cloud, such as site-to-site VPN and
    point-to-site VPN. There is also dedicated connectivity between Azure VNet and
    on-premises networks through the use of ExpressRoute.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟网络还提供与本地数据中心的连接，支持混合云架构。可以使用多种VPN技术将本地数据中心扩展到云端，例如站点对站点VPN和点对站点VPN。还可以通过使用ExpressRoute，在Azure
    VNet与本地网络之间建立专用连接。
- en: Virtual networks are free of charge. Every subscription can create up to 50
    virtual networks across all regions. However, this number can be increased by
    reaching out to Azure Support. You will not be charged if data does not leave
    the region of deployment. At the time of writing, inbound and outbound data transfers
    within Availability Zones from the same region don't incur charges; however, billing
    will commence from July 1, 2020.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟网络是免费的。每个订阅可以在所有区域内创建最多 50 个虚拟网络。然而，如果需要增加此数量，可以联系 Azure 支持团队。如果数据不离开部署区域，将不会收费。截止撰写本文时，来自同一地区的可用性区域之间的进出数据传输不会产生费用；但是，从
    2020 年 7 月 1 日起，将开始计费。
- en: Information about networking limits is available in the Microsoft documentation
    at [https://docs.microsoft.com/azure/azure-resource-manager/management/azure-subscription-service-limits](https://docs.microsoft.com/azure/azure-resource-manager/management/azure-subscription-service-limits).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有关网络限制的信息可以在 Microsoft 文档中找到，网址为 [https://docs.microsoft.com/azure/azure-resource-manager/management/azure-subscription-service-limits](https://docs.microsoft.com/azure/azure-resource-manager/management/azure-subscription-service-limits)。
- en: Architectural considerations for virtual networks
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 虚拟网络的架构考虑因素
- en: Virtual networks, like any other resource, can be provisioned using ARM templates,
    REST APIs, PowerShell, and the CLI. It is quite important to plan the network
    topology as early as possible to avoid troubles later in the development life
    cycle. This is because once a network is provisioned and resources start using
    it, it is difficult to change it without having downtime. For example, moving
    a virtual machine from one network to another will require the virtual machine
    to be shut down.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟网络与其他资源一样，可以通过 ARM 模板、REST API、PowerShell 和 CLI 进行配置。在开发生命周期的早期尽可能规划网络拓扑非常重要，以避免后续出现问题。这是因为一旦网络被配置并且资源开始使用它，就很难在没有停机的情况下进行更改。例如，将虚拟机从一个网络移动到另一个网络时，需要先关闭虚拟机。
- en: Let's look at some of the key architectural considerations while designing a
    virtual network.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在设计虚拟网络时的一些关键架构考虑因素。
- en: '**Regions**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**区域**'
- en: VNet is an Azure resource and is provisioned within a region, such as West Europe.
    Applications spanning multiple regions will need separate virtual networks, one
    per region, and they also need to be connected using VNet-to-VNet connectivity.
    There is a cost associated with VNet-to-VNet connectivity for both inbound and
    outbound traffic. There are no charges for inbound (ingress) data, but there are
    charges associated with outbound data.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: VNet 是 Azure 的一项资源，并且在某个区域内进行配置，例如西欧。跨多个区域的应用程序需要分别为每个区域配置虚拟网络，并且还需要通过 VNet-to-VNet
    连接进行连接。VNet-to-VNet 连接会产生进出流量的费用。对于传入（入口）数据没有费用，但传出数据会产生费用。
- en: '**Dedicated DNS**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**专用 DNS**'
- en: VNet by default uses Azure's DNS to resolve names within a virtual network,
    and it also allows name resolution on the internet. If an application wants a
    dedicated name resolution service or wants to connect to on-premises datacenters,
    it should provision its own DNS server, which should be configured within the
    virtual network for successful name resolution. Also, you can host your public
    domain in Azure and completely manage the records from the Azure portal, without
    the need to manage additional DNS servers.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: VNet 默认使用 Azure 的 DNS 来解析虚拟网络中的名称，并且也支持互联网名称解析。如果应用程序需要专用的名称解析服务或希望连接到本地数据中心，它应该配置自己的
    DNS 服务器，并且该服务器应在虚拟网络内配置以确保名称解析成功。此外，你可以将公共域名托管在 Azure 中，并通过 Azure 门户完全管理记录，而无需管理额外的
    DNS 服务器。
- en: '**Number of virtual networks**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**虚拟网络数量**'
- en: The number of virtual networks is affected by the number of regions, bandwidth
    usage by services, cross-region connectivity, and security. Having fewer but larger
    VNets instead of multiple smaller VNets will eliminate the management overhead.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟网络的数量受区域数量、服务的带宽使用、跨区域连接和安全性的影响。比起多个较小的 VNet，拥有较少但更大的 VNet 可以消除管理负担。
- en: '**Number of subnets in each virtual network**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**每个虚拟网络中的子网数量**'
- en: Subnets provide isolation within a virtual network. They can also provide a
    security boundary. **Network security groups** (**NSGs**) can be associated with
    subnets, thereby restricting or allowing specific access to IP addresses and ports.
    Application components with separate security and accessibility requirements should
    be placed within separate subnets.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 子网提供虚拟网络内的隔离。它们还可以提供安全边界。**网络安全组**（**NSG**）可以与子网关联，从而限制或允许对 IP 地址和端口的特定访问。具有独立安全性和可访问性要求的应用组件应放置在独立的子网中。
- en: '**IP ranges for networks and subnets**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络和子网的 IP 范围**'
- en: Each subnet has an IP range. The IP range should not be so large that IPs are
    underutilized, but conversely shouldn't be so small that subnets become suffocated
    because of a lack of IP addresses. This should be considered after understanding
    the future IP address needs of the deployment.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 每个子网都有一个 IP 范围。IP 范围不应过大，以免 IP 地址未得到充分利用，但也不应过小，以免由于缺乏 IP 地址而使子网变得无法使用。部署的未来
    IP 地址需求应考虑在内。
- en: Planning should be done for IP addresses and ranges for Azure networks, subnets,
    and on-premises datacenters. There should not be an overlap to ensure seamless
    connectivity and accessibility.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 应为 Azure 网络、子网和本地数据中心的 IP 地址和范围进行规划。为了确保无缝连接性和可访问性，应该避免重叠。
- en: '**Monitoring**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**监控**'
- en: 'Monitoring is an important architectural facet and must be included within
    the overall deployment. Azure Network Watcher provides logging and diagnostic
    capabilities with insights on network performance and health. Some of the capabilities
    of the Azure Network Watcher are:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 监控是一个重要的架构方面，必须包含在整体部署中。Azure 网络监视器提供了日志记录和诊断功能，能够洞察网络性能和健康状况。Azure 网络监视器的一些功能包括：
- en: Diagnosing network traffic filtering problems to or from a virtual machine
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 诊断虚拟机的网络流量过滤问题
- en: Understanding the next hop of user-defined routes
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解用户定义路由的下一跳
- en: Viewing the resources in a virtual network and their relationships
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看虚拟网络中的资源及其关系
- en: Communication monitoring between a virtual machine and an endpoint
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控虚拟机与终端之间的通信
- en: Traffic capture from a virtual machine
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 捕获来自虚拟机的流量
- en: NSG flow logs, which log information related to traffic flowing through an NSG.
    This data will be stored in Azure Storage for further analysis
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NSG 流量日志，用于记录与通过 NSG 的流量相关的信息。这些数据将存储在 Azure 存储中，以供进一步分析。
- en: It also provides diagnostic logs for all the network resources in a resource
    group.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 它还提供了资源组中所有网络资源的诊断日志。
- en: Network performance can be monitored through Log Analytics. The Network Performance
    Monitor management solution provides network monitoring capability. It monitors
    the health, availability, and reachability of networks. It is also used to monitor
    connectivity between public cloud and on-premises subnets hosting various tiers
    of a multi-tiered application.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 网络性能可以通过日志分析进行监控。网络性能监视器管理解决方案提供了网络监控功能。它监控网络的健康状况、可用性和可达性。它还用于监控公共云和本地子网之间的连接性，这些子网承载多层应用的不同层。
- en: '**Security considerations**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全性考虑事项**'
- en: Virtual networks are among the first components that are accessed by any resource
    on Azure. Security plays an important role in allowing or denying access to a
    resource. NSGs are the primary means of enabling security for virtual networks.
    They can be attached to virtual network subnets, and every inbound and outbound
    flow is constrained, filtered, and allowed by them.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟网络是 Azure 上任何资源访问的首要组件。安全性在允许或拒绝访问资源中起着重要作用。NSG 是启用虚拟网络安全性的主要手段。它们可以附加到虚拟网络子网上，每个进出流量都受到其约束、过滤和允许。
- en: '**User-defined routing** (**UDR**) and IP forwarding also helps in filtering
    and routing requests to resources on Azure. You can read more about UDR and forced
    tunneling at [https://docs.microsoft.com/azure/virtual-network/virtual-networks-udr-overview](https://docs.microsoft.com/azure/virtual-network/virtual-networks-udr-overview).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**用户定义的路由**（**UDR**）和 IP 转发也有助于过滤和路由请求到 Azure 上的资源。你可以在 [https://docs.microsoft.com/azure/virtual-network/virtual-networks-udr-overview](https://docs.microsoft.com/azure/virtual-network/virtual-networks-udr-overview)
    阅读更多关于 UDR 和强制隧道的信息。'
- en: Azure Firewall is a fully managed Firewall as a Service offering from Azure.
    It can help you protect the resources in your virtual network. Azure Firewall
    can be used for packet filtering in both inbound and outbound traffic, among other
    things. Additionally, the threat intelligence feature of Azure Firewall can be
    used to alert and deny traffic from or to malicious domains or IP addresses. The
    data source for IP addresses and domains is Microsoft's threat intelligence feed.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 防火墙是 Azure 提供的完全托管的防火墙即服务。它可以帮助你保护虚拟网络中的资源。Azure 防火墙可以用于传入和传出的流量包过滤等操作。此外，Azure
    防火墙的威胁情报功能可以用于提醒并拒绝来自或去往恶意域名或 IP 地址的流量。IP 地址和域名的数据来源是 Microsoft 的威胁情报数据流。
- en: Resources can also be secured and protected by deploying network appliances
    ([https://azure.microsoft.com/solutions/network-appliances](https://azure.microsoft.com/solutions/network-appliances))
    such as Barracuda, F5, and other third-party components.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以通过部署网络设备（[https://azure.microsoft.com/solutions/network-appliances](https://azure.microsoft.com/solutions/network-appliances)）来保护资源，这些设备包括
    Barracuda、F5 和其他第三方组件。
- en: '**Deployment**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**部署**'
- en: Virtual networks should be deployed in their own dedicated resource groups.
    Network administrators should have the owner's permission to use this resource
    group, while developers or team members should have contributor permissions to
    allow them to create other Azure resources in other resource groups that consume
    services from the virtual network.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟网络应部署在各自独立的资源组中。网络管理员应获得所有者的许可才能使用该资源组，而开发人员或团队成员应拥有贡献者权限，以便他们可以在其他资源组中创建使用虚拟网络服务的其他
    Azure 资源。
- en: It is also a good practice to deploy resources with static IP addresses in a
    dedicated subnet, while dynamic IP address–related resources can be on another
    subnet.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 将具有静态 IP 地址的资源部署在专用子网中是一个好的实践，而与动态 IP 地址相关的资源可以部署在另一个子网中。
- en: Policies should not only be created so that only network administrators can
    delete the virtual network, but also should also be tagged for billing purposes.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 策略不仅应创建，以确保只有网络管理员可以删除虚拟网络，还应对其进行标签标记，以便用于计费目的。
- en: '**Connectivity**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**连接性**'
- en: Resources in a region on a virtual network can talk seamlessly. Even resources
    on other subnets within a virtual network can talk to each other without any explicit
    configuration. Resources in multiple regions cannot use the same virtual network.
    The boundary of a virtual network is within a region. To make a resource communicate
    across regions, we need dedicated gateways at both ends to facilitate conversation.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟网络中同一地区的资源可以无缝地互相通信。即使是虚拟网络中其他子网的资源，也可以在没有任何明确配置的情况下相互通信。不同地区的资源无法使用相同的虚拟网络。虚拟网络的边界是在一个地区内。要实现跨区域的资源通信，我们需要在两端部署专用网关以促进通信。
- en: Having said that, if you would like to initiate a private connection between
    two networks in different regions, you can use Global VNet peering. With Global
    VNet peering, the communication is done via Microsoft's backbone network, which
    means no public internet, gateway, or encryption is required during the communication.
    If your virtual networks are in the same region with different address spaces,
    resources in one network will not be able to communicate with the other. Since
    they are in the same region, we can use virtual network peering, which is similar
    to Global VNet peering; the only difference is that the source and destination
    virtual networks are deployed in the same region.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，如果你希望在不同地区的两个网络之间建立私有连接，你可以使用全球 VNet 对等互联。使用全球 VNet 对等互联时，通信通过 Microsoft
    的骨干网进行，这意味着在通信过程中不需要公共互联网、网关或加密。如果你的虚拟网络位于同一区域但使用不同的地址空间，那么一个网络中的资源将无法与另一个网络中的资源通信。由于它们位于同一区域，我们可以使用虚拟网络对等互联，这类似于全球
    VNet 对等互联；唯一的区别是源虚拟网络和目标虚拟网络部署在同一区域内。
- en: As many organizations have a hybrid cloud, Azure resources sometimes need to
    communicate or connect with on-premises datacenters or vice versa. Azure virtual
    networks can connect to on-premises datacenters using VPN technology and ExpressRoute.
    In fact, one virtual network is capable of connecting to multiple on-premises
    datacenters and other Azure regions in parallel. As a best practice, each of these
    connections should be in their dedicated subnets within a virtual network.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 由于许多组织采用了混合云，Azure资源有时需要与本地数据中心进行通信或连接，反之亦然。Azure虚拟网络可以使用VPN技术和ExpressRoute连接到本地数据中心。实际上，一个虚拟网络能够同时连接多个本地数据中心和其他Azure区域。作为最佳实践，每个连接应位于虚拟网络内的专用子网中。
- en: Now that we have explored several aspects of virtual networking, let's go ahead
    and discuss the benefits of virtual networks.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探讨了虚拟网络的多个方面，接下来让我们讨论虚拟网络的好处。
- en: Benefits of virtual networks
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 虚拟网络的好处
- en: 'Virtual networks are a must for deploying any meaningful IaaS solution. Virtual
    machines cannot be provisioned without virtual networks. Apart from being almost
    a mandatory component in IaaS solutions, they provide great architectural benefits,
    some of which are outlined here:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟网络是部署任何有意义的IaaS解决方案所必需的。没有虚拟网络，无法配置虚拟机。除了在IaaS解决方案中几乎是一个强制性组件外，它们还提供了巨大的架构优势，其中一些在此列出：
- en: '**Isolation**: Most application components have separate security and bandwidth
    requirements and have different life cycle management. Virtual networks help to
    create isolated pockets for these components that can be managed independently
    of other components with the help of virtual networks and subnets.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隔离性**：大多数应用组件有独立的安全性和带宽要求，并且生命周期管理不同。虚拟网络帮助为这些组件创建隔离的区域，可以借助虚拟网络和子网独立管理这些组件，而不影响其他组件。'
- en: '**Security**: Filtering and tracking the users that are accessing resources
    is an important feature provided by virtual networks. They can stop access to
    malicious IP addresses and ports.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：过滤和跟踪访问资源的用户是虚拟网络提供的重要功能。它们可以阻止对恶意IP地址和端口的访问。'
- en: '**Extensibility**: Virtual networks act like a private LAN on the cloud. They
    can also be extended into a **Wide Area Network** (**WAN**) by connecting other
    virtual networks across the globe and can be extensions to on-premises datacenters.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：虚拟网络就像云上的私人局域网。通过连接全球的其他虚拟网络，它们还可以扩展为**广域网**（**WAN**），并且可以作为本地数据中心的扩展。'
- en: We have explored the benefits of virtual networks. Now the question is how we
    can leverage these benefits and design a virtual network to host our solution.
    In the next section, we will look at the design of virtual networks.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经探讨了虚拟网络的好处。现在的问题是我们如何利用这些好处并设计一个虚拟网络来托管我们的解决方案。在接下来的部分，我们将讨论虚拟网络的设计。
- en: Virtual network design
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 虚拟网络设计
- en: In this section, we will consider some of the popular designs and use case scenarios
    of virtual networks.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将考虑一些流行的虚拟网络设计和用例场景。
- en: There can be multiple usages of virtual networks. A gateway can be deployed
    at each virtual network endpoint to enable security and transmit packets with
    integrity and confidentiality. A gateway is a must when connecting to on-premises
    networks; however, it is optional when using Azure VNet peering. Additionally,
    you can make use of the Gateway Transit feature to simplify the process of extending
    your on-premises datacenter without deploying multiple gateways. Gateway Transit
    allows you to share an ExpressRoute or VPN gateway with all peered virtual networks.
    This will make it easy to manage and reduce the cost of deploying multiple gateways.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟网络有多种用途。可以在每个虚拟网络端点部署网关，以启用安全性并传输完整性和保密性的数据包。在连接到本地网络时，必须使用网关；然而，在使用Azure
    VNet对等连接时，网关是可选的。此外，您还可以利用网关传输功能，简化扩展本地数据中心的过程，而无需部署多个网关。网关传输功能允许您与所有对等虚拟网络共享ExpressRoute或VPN网关。这将使管理变得更加容易，并减少部署多个网关的成本。
- en: In the previous section, we touched on peering and mentioned that we don't use
    gateways or the public internet to establish communication between peered networks.
    Let's move on and explore some of the design aspects of peering, and which peering
    needs to be used in particular scenarios.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们提到了对等连接，并提到我们不使用网关或公共互联网来建立对等网络之间的通信。接下来我们将进一步探讨对等连接的设计方面，以及在特定场景下需要使用哪些对等连接。
- en: Connecting to resources within the same region and subscription
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接同一区域和订阅内的资源
- en: 'Multiple virtual networks within the same region and subscription can be connected
    to each other. With the help of VNet peering, both networks can be connected and
    use the Azure private network backbone to transmit packets to each other. Virtual
    machines and services on these networks can talk to each other, subject to network
    traffic constraints. In the following diagram, VNet1 and VNet2 both are deployed
    in the West US region. However, the address space for VNet1 is 172.16.0.0/16,
    and for VNet2 it is 10.0.0.0/16\. By default, resources in VNet1 will not be able
    to communicate with resources in VNet2\. Since we have established VNet peering
    between the two, the resources will be able to communicate with each other via
    the Microsoft backbone network:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 同一区域和订阅内的多个虚拟网络可以相互连接。在 VNet 对等连接的帮助下，两个网络可以连接，并使用 Azure 私有网络骨干网互相传输数据包。这些网络上的虚拟机和服务可以相互通信，但受限于网络流量的约束。在下图中，VNet1
    和 VNet2 都部署在美国西部区域。然而，VNet1 的地址空间是 172.16.0.0/16，而 VNet2 的地址空间是 10.0.0.0/16。默认情况下，VNet1
    中的资源无法与 VNet2 中的资源通信。由于我们已经在两者之间建立了 VNet 对等连接，因此这些资源将能够通过 Microsoft 骨干网络相互通信：
- en: '![VNet peering for connecting resources within the same region and subscription](img/3.1.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![同一区域和订阅内资源的 VNet 对等连接](img/3.1.jpg)'
- en: 'Figure 3.1: VNet peering for resources with the same subscription'
  id: totrans-83
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3.1：相同订阅内资源的 VNet 对等连接
- en: Connecting to resources within the same region in another subscription
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接到另一个订阅内同一区域的资源
- en: 'This scenario is very similar to the previous one except that the virtual networks
    are hosted in two different subscriptions. The subscriptions can be part of the
    same tenant or from multiple tenants. If both the resources are part of the same
    subscription and from the same region, the previous scenario applies. This scenario
    can be implemented in two ways: by using gateways or by using virtual network
    peering.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这个场景与前一个场景非常相似，唯一不同的是虚拟网络托管在两个不同的订阅中。这些订阅可以属于同一个租户，也可以来自多个租户。如果两个资源属于同一个订阅并且位于同一区域，则适用前一个场景。这个场景可以通过两种方式实现：使用网关或使用虚拟网络对等连接。
- en: 'If we are using gateways in this scenario, we need to deploy a gateway at both
    ends to facilitate communication. Here is the architectural representation of
    using gateways to connect two resources with different subscriptions:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在这个场景中使用网关，我们需要在两端部署网关以促进通信。以下是使用网关连接两个不同订阅资源的架构表示：
- en: '![VNet peering of resources within the same region with different subscriptions
    through gateway](img/Figure_3.2.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![通过网关实现不同订阅的同一区域内资源的 VNet 对等连接](img/Figure_3.2.jpg)'
- en: 'Figure 3.2: VNet peering for resources with different subscriptions using gateways'
  id: totrans-88
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3.2：使用网关进行不同订阅资源的 VNet 对等连接
- en: However, the deployment of gateways incurs some charges. We will discuss VNet
    peering, and after that we will compare these two implementations to see which
    is best for our solution.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，部署网关会产生一些费用。我们将讨论 VNet 对等连接，之后我们会比较这两种实现方式，看看哪种方式最适合我们的解决方案。
- en: 'While using peering, we are not deploying any gateways. *Figure 3.3* represents
    how peering is done:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用对等连接时，我们不会部署任何网关。*图 3.3* 展示了如何进行对等连接：
- en: '![VNet peering of resources with different subscriptions without using gateway](img/Figure_3.3.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![不使用网关的不同订阅资源的 VNet 对等连接](img/Figure_3.3.jpg)'
- en: 'Figure 3.3: VNet peering across subscriptions'
  id: totrans-92
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3.3：跨订阅的 VNet 对等连接
- en: VNet peering provides a low-latency, high-bandwidth connection, and, as shown
    in the diagram, we are not deploying any gateways to make the communication happen.
    This is useful for scenarios such as data replication or failover. As mentioned
    earlier, peering uses the Microsoft backbone network, which eliminates the need
    for the public internet.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: VNet 对等连接提供了低延迟、高带宽的连接，如图所示，我们没有部署任何网关来实现通信。这对于数据复制或故障转移等场景非常有用。如前所述，对等连接使用
    Microsoft 骨干网络，消除了对公共互联网的需求。
- en: Gateways are used in scenarios where encryption is needed and bandwidth is not
    a concern, as this will be a limited-bandwidth connection. However, this doesn't
    mean that there is a constraint on bandwidth. Also, this approach is used where
    customers are not so latency-sensitive.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 网关用于需要加密且带宽不是问题的场景，因为这将是一个带宽有限的连接。然而，这并不意味着带宽有约束。此方法适用于对延迟不太敏感的客户。
- en: So far, we have looked at resources in the same region across subscriptions.
    In the next section, we will explore how to establish a connection between virtual
    networks in two different regions.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经查看了跨订阅的同一区域资源。在下一节中，我们将探讨如何在两个不同区域的虚拟网络之间建立连接。
- en: Connecting to resources in different regions in another subscription
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接到另一个订阅中不同区域的资源
- en: In this scenario, we have two implementations again. One uses a gateway and
    the other uses Global VNet peering.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种场景中，我们有两个实现方式，一个使用网关，另一个使用全球 VNet 对等连接。
- en: 'Traffic will pass through the public network, and we will have gateways deployed
    at both ends to facilitate an encrypted connection. *Figure 3.4* explains how
    it''s done:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 流量将通过公共网络传输，我们将在两端部署网关以便建立加密连接。*图 3.4* 说明了实现方法：
- en: '![Connecting resources in different regions with different subscriptions](img/Figure_3.4.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![使用不同订阅连接不同区域的资源](img/Figure_3.4.jpg)'
- en: 'Figure 3.4: Connecting resources in different regions with different subscriptions'
  id: totrans-100
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3.4：使用不同订阅连接不同区域的资源
- en: 'We will take a similar approach using Global VNet peering. *Figure 3.5* shows
    how Global VNet peering is done:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将采用类似的方式使用全球 VNet 对等连接。*图 3.5* 显示了如何使用全球 VNet 对等连接：
- en: '![Connecting resources in different regions using Global VNet peering](img/Figure_3.5.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![使用全球 VNet 对等连接连接不同区域的资源](img/Figure_3.5.jpg)'
- en: 'Figure 3.5: Connecting resources in different regions using Global VNet peering'
  id: totrans-103
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3.5：使用全球 VNet 对等连接连接不同区域的资源
- en: The considerations in choosing gateways or peering have already been discussed.
    These considerations are applicable in this scenario as well. So far, we have
    been connecting virtual networks across regions and subscriptions; we haven't
    talked about connecting an on-premises datacenter to the cloud yet. In the next
    section, we will discuss ways to do this.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 选择网关或对等连接的考虑因素已在之前讨论过，这些考虑因素在本场景中同样适用。到目前为止，我们已经讨论了跨区域和订阅连接虚拟网络；但我们还没有讨论如何将本地数据中心连接到云。接下来的部分将讨论实现这一目标的方法。
- en: Connecting to on-premises datacenters
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接到本地数据中心
- en: Virtual networks can be connected to on-premises datacenters so that both Azure
    and on-premises datacenters become a single WAN. An on-premises network needs
    to be deployed on gateways and VPNs on both sides of the network. There are three
    different technologies available for this purpose.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟网络可以连接到本地数据中心，从而使 Azure 和本地数据中心成为一个单一的广域网（WAN）。需要在网络的两侧部署网关和 VPN。为此，有三种不同的技术可供选择。
- en: '**Site-to-site VPN**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**站点到站点 VPN**'
- en: 'This should be used when both the Azure network and the on-premises datacenter
    are connected to form a WAN, where any resource on both networks can access any
    other resource on the networks irrespective of whether they are deployed on Azure
    or an on-premises datacenter. VPN gateways are required to be available on both
    sides of networks for security reasons. Also, Azure gateways should be deployed
    on their own subnets on virtual networks connected to on-premises datacenters.
    Public IP addresses must be assigned to on-premises gateways for Azure to connect
    to them over the public network:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Azure 网络和本地数据中心连接以形成一个广域网（WAN），且两个网络中的任何资源都可以访问网络中的任何其他资源，无论它们是部署在 Azure 还是本地数据中心时，应使用此方法。为了安全起见，需要在两端的网络上部署
    VPN 网关。此外，Azure 网关应部署在与本地数据中心连接的虚拟网络的子网中。本地网关必须分配公共 IP 地址，以便 Azure 通过公共网络连接到它们：
- en: '![Site-to-site VPN connectivity](img/Figure_3.6.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![站点到站点 VPN 连接](img/Figure_3.6.jpg)'
- en: 'Figure 3.6: Site-to-site VPN architecture'
  id: totrans-110
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3.6：站点到站点 VPN 架构
- en: '**Point-to-site VPN**'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**点对站点 VPN**'
- en: 'This is similar to site-to-site VPN connectivity, but there is a single server
    or computer attached to the on-premises datacenter. It should be used when there
    are very few users or clients that would connect to Azure securely from remote
    locations. Also, there is no need for public IPs and gateways on the on-premises
    side in this case:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这类似于站点到站点的 VPN 连接，但有一个单一的服务器或计算机连接到本地数据中心。当需要从远程位置安全地连接到 Azure 且只有少数用户或客户端时，应使用此方式。此外，在这种情况下，无需在本地侧配置公共
    IP 和网关：
- en: '![Point-to-site VPN connectivity](img/Figure_3.7.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![点对站点 VPN 连接](img/Figure_3.7.jpg)'
- en: 'Figure 3.7: Point-to-site VPN architecture'
  id: totrans-114
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3.7：点对站点 VPN 架构
- en: '**ExpressRoute**'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**ExpressRoute**'
- en: Both site-to-site and point-to-site VPNs work using the public internet. They
    encrypt the traffic on the networks using VPN and certificates technology. However,
    there are applications that want to be deployed using hybrid technologies—some
    components on Azure, with others on an on-premises datacenter—and at the same
    time do not want to use the public internet to connect to Azure and on-premises
    datacenters. Azure ExpressRoute is the best solution for them, although it's a
    costly option compared to the two other types of connection. It is also the most
    secure and reliable provider, with higher speed and reduced latency because the
    traffic never hits the public internet. Azure ExpressRoute can help to extend
    on-premises networks into Azure over a dedicated private connection facilitated
    by a connectivity provider. If your solution is network intensive, for example,
    a transactional enterprise application such as SAP, use of ExpressRoute is highly
    recommended.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是站点到站点（site-to-site）还是点对站点（point-to-site）VPN，均使用公共互联网工作。它们通过 VPN 和证书技术对网络流量进行加密。然而，一些应用程序希望使用混合技术进行部署——一部分组件部署在
    Azure，另一部分部署在本地数据中心——同时又不希望使用公共互联网连接 Azure 和本地数据中心。对于这些需求，Azure ExpressRoute 是最佳解决方案，尽管它比另外两种连接方式成本更高。它也是最安全和可靠的提供商，速度更快，延迟更低，因为流量不会经过公共互联网。Azure
    ExpressRoute 可以通过连接提供商通过专用私有连接将本地网络扩展到 Azure。如果你的解决方案是网络密集型的，例如事务性企业应用程序（如 SAP），强烈建议使用
    ExpressRoute。
- en: '![ExpressRoute network architecture for hybrid deployment](img/Figure_3.8.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![用于混合部署的 ExpressRoute 网络架构](img/Figure_3.8.jpg)'
- en: 'Figure 3.8: ExpressRoute network architecture'
  id: totrans-118
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3.8：ExpressRoute 网络架构
- en: '*Figure 3.9* shows all three types of hybrid networks:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3.9* 显示了三种混合网络类型：'
- en: '![Different types of hybrid networks](img/Figure_3.9.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![不同类型的混合网络](img/Figure_3.9.jpg)'
- en: 'Figure 3.9: Different types of hybrid networks'
  id: totrans-121
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3.9：不同类型的混合网络
- en: It is a good practice for virtual networks to have separate subnets for each
    logical component with separate deployments, from a security and isolation perspective.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 从安全性和隔离的角度来看，虚拟网络为每个逻辑组件创建单独的子网并进行独立部署是一种良好的实践。
- en: All the resources we deploy in Azure require networking in one way or another,
    so a deep understanding of networking is required when architecting solutions
    in Azure. Another key element is storage. In the next section, you will be learning
    more about storage.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 Azure 部署的所有资源都需要某种方式的网络支持，因此在架构设计 Azure 解决方案时，需要深入理解网络知识。另一个关键要素是存储。在接下来的章节中，你将进一步了解存储。
- en: Storage
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存储
- en: Azure provides a durable, highly available, and scalable storage solution through
    storage services.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 通过存储服务提供了一个持久、高可用且可扩展的存储解决方案。
- en: Storage is used to persist data for long-term needs. Azure Storage is available
    on the internet for almost every programming language.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 存储用于持久化数据，以满足长期需求。Azure 存储可以通过互联网为几乎所有编程语言提供服务。
- en: Storage categories
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 存储类别
- en: 'Storage has two categories of storage accounts:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 存储有两类存储账户：
- en: A standard storage performance tier that allows you to store tables, queues,
    files, blobs, and Azure virtual machine disks.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种标准存储性能层，允许你存储表格、队列、文件、Blob 和 Azure 虚拟机磁盘。
- en: A premium storage performance tier supporting Azure virtual machine disks, at
    the time of writing. Premium storage provides higher performance and IOPS than
    standard general storage. Premium storage is currently available as data disks
    for virtual machines backed up by SSDs.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种支持 Azure 虚拟机磁盘的高级存储性能层，写作时，Premium 存储比标准通用存储提供更高的性能和 IOPS。Premium 存储当前作为虚拟机的数据磁盘，使用
    SSD 作为支持。
- en: Depending on the kind of data that is being stored, the storage is classified
    into different types. Let's look at the storage types and learn more about them.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 根据存储的数据类型，存储可以分为不同的类型。让我们来看一下存储类型，并深入了解它们。
- en: Storage types
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 存储类型
- en: 'Azure provides four types of general storage services:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 提供四种常见的存储服务：
- en: '**Azure Blob storage:** This type of storage is most suitable for unstructured
    data, such as documents, images, and other kinds of files. Blob storage can be
    in the Hot, Cool, or Archive tier. The Hot tier is meant for storing data that
    needs to be accessed very frequently. The Cool tier is for data that is less frequently
    accessed than data in the Hot tier and is stored for 30 days. Finally, the Archive
    tier is for archival purposes where the access frequency is very low.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Blob 存储：** 这种存储类型最适合非结构化数据，如文档、图片和其他类型的文件。Blob 存储可以分为热存储、冷存储和归档存储。热存储适用于需要非常频繁访问的数据。冷存储适用于访问频率低于热存储的数据，并且数据的存储时间为
    30 天。最后，归档存储适用于归档目的，访问频率非常低。'
- en: '**Azure Table storage:** This is a NoSQL key-attribute data store. It should
    be used for structured data. The data is stored as entities.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure 表格存储：** 这是一个 NoSQL 键值数据存储，适用于结构化数据。数据以实体的形式存储。'
- en: '**Azure Queue storage:** This provides reliable message storage for storing
    large numbers of messages. These messages can be accessed from anywhere via HTTP
    or HTTPS calls. A queue message can be up to 64 KB in size.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure 队列存储：** 这提供了可靠的消息存储，用于存储大量消息。这些消息可以通过 HTTP 或 HTTPS 调用从任何地方访问。队列消息的最大大小为
    64 KB。'
- en: '**Azure Files:** This is shared storage based on the SMB protocol. It is typically
    used for storing and sharing files. It also stores unstructured data, but its
    main distinction is that it is sharable via the SMB protocol.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure 文件：** 这是基于 SMB 协议的共享存储，通常用于存储和共享文件。它也存储非结构化数据，但其主要区别在于它可以通过 SMB 协议进行共享。'
- en: '**Azure disks:** This is block-level storage for Azure Virtual Machines.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure 磁盘：** 这是 Azure 虚拟机的块级存储。'
- en: These five storage types cater to different architectural requirements and cover
    almost all types of data storage facilities.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这五种存储类型满足不同的架构需求，涵盖几乎所有类型的数据存储设施。
- en: Storage features
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 存储功能
- en: 'Azure Storage is elastic. This means that you can store as little as a few
    megabytes or as much as petabytes of data. You do not need to pre-block the capacity,
    and it will grow and shrink automatically. Consumers just need to pay for the
    actual usage of storage. Here are some of the key benefits of using Azure Storage:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 存储是弹性的，这意味着您可以存储从几兆字节到几拍字节的数据。您无需预先设置存储容量，它会自动增长和收缩。用户只需为实际使用的存储付费。以下是使用
    Azure 存储的一些主要好处：
- en: Azure Storage is secure. It can only be accessed using the SSL protocol. Moreover,
    access should be authenticated.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 存储是安全的，只能通过 SSL 协议访问。此外，访问必须经过身份验证。
- en: Azure Storage provides the facility to generate an account-level **Secure Access
    Signature** (**SAS**) token that can be used by storage clients to authenticate
    themselves. It is also possible to generate individual service-level SAS tokens
    for blobs, queues, tables, and files.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 存储提供了生成帐户级**安全访问签名**（**SAS**）令牌的功能，存储客户端可以使用该令牌进行身份验证。还可以为 Blob、队列、表格和文件生成单独的服务级
    SAS 令牌。
- en: Data stored in Azure storage can be encrypted. This is known as secure data
    at rest.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储在 Azure 存储中的数据可以被加密，这被称为静态数据加密。
- en: Azure Disk Encryption is used to encrypt the OS and data disks in IaaS virtual
    machines. **Client-Side Encryption** (**CSE**) and **Storage Service Encryption**
    (**SSE**) are both used to encrypt data in Azure Storage. SSE is an Azure Storage
    setting that ensures that data is encrypted while data is being written to storage
    and decrypted while it is read by the storage engine. This ensures that no application
    changes are required to enable SSE. In CSE, client applications can use the Storage
    SDK to encrypt data before it is sent and written to Azure Storage. The client
    application can later decrypt this data while it is read. This provides security
    for both data in transit and data at rest. CSE is dependent on secrets from Azure
    Key Vault.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 磁盘加密用于加密 IaaS 虚拟机中的操作系统和数据磁盘。**客户端加密**（**CSE**）和**存储服务加密**（**SSE**）都用于加密
    Azure 存储中的数据。SSE 是 Azure 存储的一个设置，确保在数据写入存储时加密，并在存储引擎读取数据时解密。这确保了启用 SSE 不需要任何应用程序更改。在
    CSE 中，客户端应用程序可以使用存储 SDK 在数据发送并写入 Azure 存储之前对数据进行加密。客户端应用程序可以在读取数据时再解密这些数据。这为数据传输中的数据和静态数据提供了安全性。CSE
    依赖于 Azure 密钥保管库中的密钥。
- en: Azure Storage is highly available and durable. What this means is that Azure
    always maintains multiple copies of Azure accounts. The location and number of
    copies depend on the replication configuration.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 存储具有高度的可用性和持久性。这意味着 Azure 始终保持多个 Azure 账户的副本。副本的地点和数量取决于复制配置。
- en: 'Azure provides the following replication settings and data redundancy options:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 提供以下复制设置和数据冗余选项：
- en: '**Locally redundant storage** (**LRS**): Within a single physical location
    in the primary region, there will be three replicas of your data synchronously.
    From a billing standpoint, this is the cheapest option; however, it''s not recommended
    for solutions that require high availability. LRS provides a durability level
    of 99.999999999% for objects over a given year.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地冗余存储**（**LRS**）：在主区域的单一物理位置内，将同步存储三份数据副本。从计费的角度来看，这是最便宜的选项；然而，它不推荐用于需要高可用性的解决方案。LRS
    提供在给定一年内对象的 99.999999999% 的持久性级别。'
- en: '**Zone-redundant storage** (**ZRS**): In the case of LRS, the replicas were
    stored in the same physical location. In the case of ZRS, the data will be replicated
    synchronously across the Availability Zones in the primary region. As each of
    these Availability Zones is a separate physical location in the primary region,
    ZRS provides better durability and higher availability than LRS.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**区域冗余存储**（**ZRS**）：在 LRS 的情况下，副本存储在同一物理位置。而在 ZRS 的情况下，数据将同步复制到主区域内的可用区。由于这些可用区都是主区域内的独立物理位置，ZRS
    提供比 LRS 更好的持久性和更高的可用性。'
- en: '**Geo-redundant storage (GRS)**: GRS increases the high availability by synchronously
    replicating three copies of data within a single primary region using LRS. It
    also copies the data to a single physical location in the secondary region.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**地理冗余存储（GRS）**：GRS 通过使用 LRS 在单一主区域内同步复制三份数据副本，从而提高高可用性。它还将数据复制到次要区域的单一物理位置。'
- en: '**Geo-zone-redundant storage** (**GZRS**): This is very similar to GRS, but
    instead of replicating data within a single physical location in the primary region,
    GZRS replicates it synchronously across three Availability Zones. As we discussed
    in the case of ZRS, since the Availability Zones are isolated physical locations
    within the primary region, GZRS has better durability and can be included in highly
    available designs.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**地理区域冗余存储**（**GZRS**）：这与 GRS 非常相似，但不同之处在于，GZRS 不是在主区域内单一物理位置复制数据，而是跨三个可用区同步复制数据。正如我们在
    ZRS 的案例中所讨论的，由于可用区是主区域内独立的物理位置，GZRS 提供了更好的持久性，并且可以包含在高可用设计中。'
- en: '**Read-access geo-redundant storage** (**RA-GRS**) **and read-access geo-zone-redundant
    storage**: The data replicated to the secondary region by GZRS or GRS is not available
    for read or write. This data will be used by the secondary region in the case
    of the failover of the primary datacenter. RA-GRS and RA-GZRS follow the same
    replication pattern as GRS and GZRS respectively; the only difference is that
    the data replicated to the secondary region via RA-GRS or RA-GZRS can be read.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**读取访问地理冗余存储**（**RA-GRS**）**和读取访问地理区域冗余存储**：通过 GZRS 或 GRS 复制到次要区域的数据无法进行读写。这些数据将在主数据中心发生故障转移时由次要区域使用。RA-GRS
    和 RA-GZRS 遵循与 GRS 和 GZRS 相同的复制模式；唯一的区别是通过 RA-GRS 或 RA-GZRS 复制到次要区域的数据可以进行读取。'
- en: Now that we have understood the various storage and connection options available
    on Azure, let's learn about the underlying architecture of the technology.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 Azure 上各种存储和连接选项，接下来让我们了解该技术的底层架构。
- en: Architectural considerations for storage accounts
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 存储帐户的架构考虑事项
- en: Storage accounts should be provisioned within the same region as other application
    components. This would mean using the same datacenter network backbone without
    incurring any network charges.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 存储帐户应在与其他应用程序组件相同的区域中进行配置。这意味着使用相同的数据中心网络骨干，避免产生任何网络费用。
- en: Azure Storage services have scalability targets for capacity, transaction rate,
    and bandwidth associated with each of them. A general storage account allows 500
    TB of data to be stored. If there is a need to store more than 500 TB of data,
    then either multiple storage accounts should be created, or premium storage should
    be used.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 存储服务具有与每个服务相关的容量、事务速率和带宽的可扩展性目标。一个通用的存储帐户允许存储 500 TB 的数据。如果需要存储超过 500
    TB 的数据，则应创建多个存储帐户或使用高级存储。
- en: General storage performs at a maximum of 20,000 IOPS or 60 MB of data per second.
    Any requirements for higher IOPS or data managed per second will be throttled.
    If this is not enough for your applications from a performance perspective, either
    premium storage or multiple storage accounts should be used. For an account, the
    scalability limit for accessing tables is up to 20,000 (1 KB each) entries. The
    count of entities being inserted, updated, deleted, or scanned will contribute
    toward the target. A single queue can process approximately 2,000 messages (1
    KB each) per second, and each of the `AddMessage`, `GetMessage`, and `DeleteMessage`
    counts will be treated as a message. If these values aren't sufficient for your
    application, you should spread the messages across multiple queues.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 通用存储的最大性能为 20,000 IOPS 或每秒 60 MB 的数据。如果需要更高的 IOPS 或每秒管理的数据量，则会受到限制。如果从性能角度来看，这些不足以满足应用程序的需求，那么应使用高级存储或多个存储帐户。对于一个帐户，访问表格的可扩展性限制为最多
    20,000（每个 1 KB）条目。插入、更新、删除或扫描的实体数量将计入目标。单个队列每秒可处理大约 2,000 条消息（每条 1 KB），每个 `AddMessage`、`GetMessage`
    和 `DeleteMessage` 的计数将被视为一条消息。如果这些值不足以满足你的应用程序需求，你应该将消息分布到多个队列中。
- en: The size of virtual machines determines the size and capacity of the available
    data disks. While larger virtual machines have data disks with higher IOPS capacity,
    the maximum capacity will still be limited to 20,000 IOPS and 60 MB per second.
    It is to be noted that these are maximum numbers and so generally lower levels
    should be taken into consideration when finalizing storage architecture.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机的大小决定了可用数据磁盘的大小和容量。虽然较大的虚拟机具有更高 IOPS 容量的数据磁盘，但最大容量仍将限制为 20,000 IOPS 和每秒 60
    MB。需要注意的是，这些是最大值，因此在最终确定存储架构时，应考虑较低的值。
- en: 'At the time of writing, GRS accounts offer a 10 Gbps bandwidth target in the
    US for ingress and 20 Gbps if RA-GRS/GRS is enabled. When it comes to LRS accounts,
    the limits are on the higher side compared to GRS. For LRS accounts, ingress is
    20 Gbps and egress is 30 Gbps. Outside the US, the values are lower: the bandwidth
    target is 10 Gbps and 5 Gbps for egress. If there is a requirement for a higher
    bandwidth, you can reach out to Azure Support and they will be able to help you
    with further options.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 截至目前，GRS 帐户在美国的入站带宽目标为 10 Gbps，如果启用了 RA-GRS/GRS，则为 20 Gbps。对于 LRS 帐户，限制相对较高，入站带宽为
    20 Gbps，出站带宽为 30 Gbps。在美国以外，带宽目标较低：入站带宽为 10 Gbps，出站带宽为 5 Gbps。如果需要更高的带宽，可以联系 Azure
    支持团队，他们将帮助你获取更多的选项。
- en: Storage accounts should be enabled for authentication using SAS tokens. They
    should not allow anonymous access. Moreover, for blob storage, different containers
    should be created with separate SAS tokens generated based on the different types
    and categories of clients accessing those containers. These SAS tokens should
    be periodically regenerated to ensure that the keys are not at risk of being cracked
    or guessed. You will learn more about SAS tokens and other security options in
    *Chapter 8, Architecting secure applications on Azure*.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 存储帐户应启用使用 SAS 令牌进行身份验证。它们不应允许匿名访问。此外，对于 Blob 存储，应根据不同类型和类别的客户端创建不同的容器，并为每个容器生成独立的
    SAS 令牌。这些 SAS 令牌应定期重新生成，以确保密钥不会被破解或猜测。你将会在*第 8 章，构建 Azure 上的安全应用程序*中了解更多关于 SAS
    令牌和其他安全选项的内容。
- en: Generally, blobs fetched for blob storage accounts should be cached. We can
    determine whether the cache is stale by comparing its last modified property to
    re-fetch the latest blob.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，从 Blob 存储帐户获取的 Blob 应该进行缓存。我们可以通过将其最后修改属性与重新获取的最新 Blob 进行比较，来判断缓存是否过时。
- en: 'Storage accounts provide concurrency features to ensure that the same file
    and data is not modified simultaneously by multiple users. They offer the following:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 存储帐户提供并发功能，以确保同一文件和数据不会被多个用户同时修改。它们提供以下功能：
- en: '**Optimistic concurrency**: This allows multiple users to modify data simultaneously,
    but while writing, it checks whether the file or data has changed. If it has,
    it tells the users to re-fetch the data and perform the update again. This is
    the default concurrency for tables.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**乐观并发**：这允许多个用户同时修改数据，但在写入时，它会检查文件或数据是否已经更改。如果有更改，它会提示用户重新获取数据并再次执行更新操作。这是表格的默认并发方式。'
- en: '**Pessimistic concurrency**: When an application tries to update a file, it
    places a lock, which explicitly denies any updates to it by other users. This
    is the default concurrency for files when accessed using the SMB protocol.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**悲观并发**：当一个应用尝试更新文件时，它会加锁，明确拒绝其他用户对文件的任何更新。这是通过 SMB 协议访问文件时的默认并发模式。'
- en: '**Last writer wins**: The updates are not constrained, and the last user updates
    the file irrespective of what was read initially. This is the default concurrency
    for queues, blobs, and files (when accessed using REST).'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最后写者获胜**：更新没有限制，最后一个用户会更新文件，而不管最初读取的内容是什么。这是队列、Blob 和文件（通过 REST 访问时）的默认并发模式。'
- en: By this point, you should know what the different storage services are and how
    they can be leveraged in your solutions. In the next section, we will look at
    design patterns and see how they relate to architectural designs.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该已经知道了不同的存储服务是什么，以及如何在你的解决方案中利用它们。在接下来的章节中，我们将讨论设计模式，并看看它们如何与架构设计相关。
- en: Cloud design patterns
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 云设计模式
- en: Design patterns are proven solutions to known design problems. They are reusable
    solutions that can be applied to problems. They are not reusable code or designs
    that can be incorporated as is within a solution. They are documented descriptions
    and guidance for solving a problem. A problem might manifest itself in different
    contexts, and design patterns can help to solve it. Azure provides numerous services,
    with each service providing specific features and capabilities. Using these services
    is straightforward, but creating solutions by weaving multiple services together
    can be a challenge. Moreover, achieving high availability, super scalability,
    reliability, performance, and security for a solution is not a trivial task.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 设计模式是针对已知设计问题的成熟解决方案。它们是可重用的解决方案，可以应用于问题中。它们不是可以直接嵌入到解决方案中的可重用代码或设计，而是解决问题的文档化描述和指导。一个问题可能在不同的上下文中表现出来，设计模式可以帮助解决这些问题。Azure
    提供了大量的服务，每个服务都提供特定的功能和能力。使用这些服务很简单，但将多个服务结合起来创建解决方案可能会有挑战。而且，为解决方案实现高可用性、超高可扩展性、可靠性、性能和安全性并非易事。
- en: Azure design patterns provide ready solutions that can be tailored to individual
    problems. They help us to make highly available, scalable, reliable, secure, and
    performance-centric solutions on Azure. Although there are many patterns and some
    of the patterns are covered in detail in subsequent chapters, some of the messaging,
    performance, and scalability patterns are mentioned in this chapter. Also, links
    are provided for detailed descriptions of these patterns. These design patterns
    deserve a complete book by themselves. They have been mentioned here to make you
    aware of their existence and to provide references for further information.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 设计模式提供了可以根据具体问题定制的现成解决方案。它们帮助我们在 Azure 上构建高可用、可扩展、可靠、安全和以性能为中心的解决方案。尽管有许多模式，并且一些模式将在后续章节中详细讨论，但本章提到了其中的一些消息传递、性能和可扩展性模式。同时，还提供了这些模式的详细描述链接。这些设计模式本身值得一本完整的书来讨论。它们在这里被提及，旨在让你意识到它们的存在，并为进一步了解提供参考。
- en: Messaging patterns
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 消息传递模式
- en: Messaging patterns help connect services in a loosely coupled manner. What this
    means is that services never talk to each other directly. Instead, a service generates
    and sends a message to a broker (generally a queue) and any other service that
    is interested in that message can pick it and process it. There is no direct communication
    between the sender and receiver service. This decoupling not only makes services
    and the overall application more reliable but also more robust and fault tolerant.
    Receivers can receive and read messages at their own speed.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 消息传递模式有助于以松耦合的方式连接服务。这意味着服务之间从不直接通信。相反，服务会生成并将消息发送到一个代理（通常是队列），任何对该消息感兴趣的服务都可以取出并处理它。发送方和接收方服务之间没有直接通信。这种解耦不仅使服务和整个应用程序更可靠，还使其更强健和容错。接收方可以根据自己的速度接收和读取消息。
- en: Messaging helps the creation of asynchronous patterns. Messaging involves sending
    messages from one entity to another. These messages are created and forwarded
    by a sender, stored in durable storage, and finally consumed by recipients.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 消息传递有助于创建异步模式。消息传递涉及从一个实体向另一个实体发送消息。这些消息由发送方创建并转发，存储在持久存储中，最后被接收方消费。
- en: 'The top architectural concerns addressed by messaging patterns are as follows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 消息传递模式解决的主要架构问题如下：
- en: '**Durability**: Messages are stored in durable storage, and applications can
    read them after they are received in case of a failover.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**耐久性**：消息被存储在持久化存储中，应用程序可以在故障转移后读取已接收到的消息。'
- en: '**Reliability**: Messages help implement reliability as they are persisted
    on disk and never lost.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可靠性**：消息通过持久化存储在磁盘上，确保不会丢失，从而实现可靠性。'
- en: '**Availability of messages**: The messages are available for consumption by
    applications after the restoration of connectivity and before downtime.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息的可用性**：在恢复连接并在停机之前，消息可以供应用程序消费。'
- en: Azure provides Service Bus queues and topics to implement messaging patterns
    within applications. Azure Queue storage can also be used for the same purpose.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 提供了服务总线队列和主题来实现应用程序内的消息传递模式。Azure 队列存储也可以用于相同的目的。
- en: Choosing between Azure Service Bus queues and Queue storage is about deciding
    on how long the message should be stored, the size of the message, latency, and
    cost. Azure Service Bus provides support for 256 KB messages, while Queue storage
    provides support for 64 KB messages. Azure Service Bus can store messages for
    an unlimited period, while Queue storage can store messages for 7 days. The cost
    and latency are higher with Service Bus queues.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择 Azure 服务总线队列与队列存储时，需要考虑消息存储的时间、消息大小、延迟和成本等因素。Azure 服务总线支持 256 KB 的消息，而队列存储支持
    64 KB 的消息。Azure 服务总线可以存储消息无限期，而队列存储则只能存储 7 天。服务总线队列的成本和延迟较高。
- en: Depending on your application's requirements and needs, the preceding factors
    should be considered before deciding on the best queue. In the next section, we
    will be discussing different types of messaging patterns.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 根据应用程序的需求和要求，在决定最佳队列之前，应考虑上述因素。在下一部分中，我们将讨论不同类型的消息传递模式。
- en: '**The Competing Consumers pattern**'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '**竞争消费者模式**'
- en: A single consumer of messages works in a synchronous manner unless the application
    implements the logic of reading messages asynchronously. The Competing Consumers
    pattern implements a solution in which multiple consumers are ready to process
    incoming messages, and they compete to process each message. This can lead to
    solutions that are highly available and scalable. This pattern is scalable because
    with multiple consumers, it is possible to process a higher number of messages
    in a smaller period. It is highly available because there should be at least one
    consumer to process messages even if some of the consumers crash.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序没有实现异步读取消息的逻辑，单一消费者将以同步方式处理消息。竞争消费者模式则提供了一种解决方案，其中多个消费者准备好处理传入的消息，并竞争处理每一条消息。这种方式可以实现高可用性和可扩展的解决方案。此模式可扩展，因为通过多个消费者，可以在较短的时间内处理更多的消息。它具有高可用性，因为即使部分消费者崩溃，仍然会有至少一个消费者可以处理消息。
- en: This pattern should be used when each message is independent of other messages.
    The messages by themselves contain all the information required for a consumer
    to complete a task. This pattern should not be used if there is any dependency
    among messages. The consumers should be able to complete the tasks in isolation.
    Also, this pattern is applicable if there is variable demand for services. Additional
    consumers can be added or removed based on demand.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 当每条消息独立于其他消息时，应使用此模式。消息本身包含了消费者完成任务所需的所有信息。如果消息之间存在依赖关系，则不应使用此模式。消费者应能够在隔离的情况下完成任务。此外，如果服务需求波动，则此模式适用。可以根据需求增加或删除消费者。
- en: 'A message queue is required to implement the Competing Consumers pattern. Here,
    patterns from multiple sources pass through a single queue, which is connected
    to multiple consumers at the other end. These consumers should delete each message
    after reading so that they are not re-processed:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 实现竞争消费者模式需要一个消息队列。在这里，来自多个来源的模式通过一个单一的队列传递，队列的另一端连接着多个消费者。这些消费者在读取每条消息后应删除该消息，以防止它们被重新处理：
- en: '![Queue structure in a Competing Consumers pattern](img/Figure_3.10.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![竞争消费者模式中的队列结构](img/Figure_3.10.jpg)'
- en: 'Figure 3.10: The Competing Consumers pattern'
  id: totrans-185
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3.10：竞争消费者模式
- en: Refer to the Microsoft documentation at [https://docs.microsoft.com/azure/architecture/patterns/competing-consumers](https://docs.microsoft.com/azure/architecture/patterns/competing-consumers)
    to learn more about this pattern.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 Microsoft 文档 [https://docs.microsoft.com/azure/architecture/patterns/competing-consumers](https://docs.microsoft.com/azure/architecture/patterns/competing-consumers)
    以了解有关此模式的更多信息。
- en: '**The Priority Queue pattern**'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**优先队列模式**'
- en: There is often a need to prioritize some messages over others. This pattern
    is important for applications that provide different **service-level agreements**
    (**SLAs**) to consumers, which provide services based on differential plans and
    subscriptions.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 经常需要优先处理某些消息。这个模式对那些为消费者提供不同**服务级别协议**（**SLA**）的应用程序非常重要，这些应用程序根据不同的计划和订阅提供服务。
- en: 'Queues follow the first-in, first-out pattern. Messages are processed in a
    sequence. However, with the help of the Priority Queue pattern, it is possible
    to fast-track the processing of certain messages due to their higher priority.
    There are multiple ways to implement this. If the queue allows you to assign priority
    and re-order messages based on priority, then even a single queue is enough to
    implement this pattern:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 队列遵循先进先出（FIFO）模式。消息按顺序处理。然而，在优先级队列模式的帮助下，可以根据消息的优先级加速某些消息的处理。实现这一点有多种方法。如果队列允许你分配优先级并根据优先级重新排序消息，那么即使是单一队列也足以实现这一模式：
- en: '![Queue structure in a single Priority Queue pattern](img/Figure_3.11.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![单一优先级队列模式中的队列结构](img/Figure_3.11.jpg)'
- en: 'Figure 3.11: The single Priority Queue pattern'
  id: totrans-191
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3.11：单一优先级队列模式
- en: 'However, if the queue cannot re-order messages, then separate queues can be
    created for different priorities, and each queue can have separate consumers associated
    with it:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果队列无法重新排序消息，可以为不同的优先级创建独立的队列，并且每个队列可以有与之关联的独立消费者：
- en: '![Using separate message queues for different priorities](img/Figure_3.12.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![使用独立消息队列处理不同优先级](img/Figure_3.12.jpg)'
- en: 'Figure 3.12: Using separate message queues for different priorities'
  id: totrans-194
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3.12：使用独立消息队列处理不同优先级
- en: In fact, this pattern can use the Competing Consumer pattern to fast-track the
    processing of messages from each queue using multiple consumers. Refer to the
    Microsoft documentation at [https://docs.microsoft.com/azure/architecture/patterns/priority-queue](https://docs.microsoft.com/azure/architecture/patterns/priority-queue)
    to read more about the Priority Queue pattern.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，该模式可以使用竞争消费者模式（Competing Consumer pattern）来加速使用多个消费者处理每个队列中的消息。有关优先级队列模式的更多信息，请参阅微软文档
    [https://docs.microsoft.com/azure/architecture/patterns/priority-queue](https://docs.microsoft.com/azure/architecture/patterns/priority-queue)。
- en: '**The Queue-Based Load Leveling pattern**'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '**基于队列的负载均衡模式**'
- en: The Queue-Based Load Leveling pattern reduces the impact of peaks in demand
    on the availability and alertness of both tasks and services. Between a task and
    a service, a queue will act as a buffer. It can be invoked to handle the unexpected
    heavy loads that can cause service interruption or timeouts. This pattern helps
    to address performance and reliability issues. To prevent the service from getting
    overloaded, we will introduce a queue that will store a message until it's retrieved
    by the service. Messages will be taken from the queue by the service in a consistent
    manner and processed.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 基于队列的负载均衡模式减少了需求峰值对任务和服务的可用性和警觉性的影响。在任务和服务之间，队列将充当缓冲区。它可以在发生突发负载时被调用，避免服务中断或超时。该模式有助于解决性能和可靠性问题。为了防止服务超载，我们将引入一个队列，直到服务取出消息。服务将以一致的方式从队列中取出并处理消息。
- en: '*Figure 3.13* shows how the Queue-Based Load Leveling pattern works:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3.13* 展示了基于队列的负载均衡模式的工作原理：'
- en: '![Using the Queue-Based Load Levelling pattern to process tasks via a queue](img/Figure_3.13.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![使用基于队列的负载均衡模式通过队列处理任务](img/Figure_3.13.jpg)'
- en: 'Figure 3.13: The Queue-Based Load Leveling pattern'
  id: totrans-200
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3.13：基于队列的负载均衡模式
- en: Even though this pattern helps to handle spikes of unexpected demand, it is
    not the best choice when you are architecting a service with minimal latency.
    Talking of latency, which is a performance measurement, in the next section we
    will be focusing on performance and scalability patterns.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管该模式有助于处理意外需求的激增，但在构建低延迟服务时，它不是最佳选择。说到延迟，它是一个性能指标，下一节我们将专注于性能和可扩展性模式。
- en: Performance and scalability patterns
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 性能和可扩展性模式
- en: Performance and scalability go together. Performance is the measure of how quickly
    a system can execute an action within a given time interval in a positive manner.
    On the other hand, scalability is the ability of a system to handle unexpected
    load without affecting the performance of the system, or how quickly the system
    can be expanded with the available resources. In this section, a couple of design
    patterns related to performance and scalability will be described.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 性能和可扩展性是相辅相成的。性能是衡量系统在给定时间间隔内如何快速、有效地执行操作的指标。另一方面，可扩展性是指系统在不影响性能的情况下处理意外负载的能力，或者系统如何利用现有资源迅速扩展。在本节中，将介绍与性能和可扩展性相关的几个设计模式。
- en: '**The Command and Query Responsibility Segregation** (**CQRS**) **pattern**'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '**命令与查询职责分离**（**CQRS**）**模式**'
- en: CQRS is not an Azure-specific pattern but a general pattern that can be applied
    in any application. It increases the overall performance and responsiveness of
    an application.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: CQRS 不是一个特定于 Azure 的模式，而是一个可以应用于任何应用程序的一般模式。它可以提高应用程序的整体性能和响应能力。
- en: CQRS is a pattern that segregates the operations that read data (queries) from
    the operations that update data (commands) by using separate interfaces. This
    means that the data models used for querying and updates are different. The models
    can then be isolated, as shown in *Figure 3.14*, although that's not an absolute
    requirement.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: CQRS 是一种将读取数据（查询）操作与更新数据（命令）操作隔离开来的模式，通过使用不同的接口。这意味着用于查询和更新的数据模型是不同的。然后，这些模型可以像*图3.14*中所示那样隔离，尽管这不是强制要求。
- en: This pattern should be used when there are large and complex business rules
    executed while updating and retrieving data. Also, this pattern has an excellent
    use case in which one team of developers can focus on the complex domain model
    that is part of the write model, and another team can focus on the read model
    and the user interfaces. It is also wise to use this pattern when the ratio of
    read to write is skewed. The performance of data reads should be fine-tuned separately
    from the performance of data writes.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 当在更新和检索数据时，涉及大量复杂的业务规则时，应该使用该模式。此外，这种模式在某些情况下非常适用，其中一个开发团队可以专注于写模型中复杂的领域模型，另一个团队可以专注于读模型和用户界面。当读写比例失衡时，使用该模式也是明智的。数据读取的性能应该与数据写入的性能分开调优。
- en: 'CQRS not only improves the performance of an application, but it also helps
    the design and implementation of multiple teams. Due to its nature of using separate
    models, CQRS is not suitable if you are using model and scaffolding generation
    tools:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: CQRS 不仅可以提高应用程序的性能，还能帮助多团队的设计和实现。由于其使用不同模型的特性，如果你使用模型和脚手架生成工具，CQRS 就不太适用：
- en: '![The segregation of operations in a CQRS pattern](img/Figure_3.14.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![CQRS模式中的操作隔离](img/Figure_3.14.jpg)'
- en: 'Figure 3.14: The CQRS pattern'
  id: totrans-210
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图3.14：CQRS模式
- en: Refer to the Microsoft documentation at [https://docs.microsoft.com/azure/architecture/patterns/cqrs](https://docs.microsoft.com/azure/architecture/patterns/cqrs)
    to read more about this pattern.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考 Microsoft 文档 [https://docs.microsoft.com/azure/architecture/patterns/cqrs](https://docs.microsoft.com/azure/architecture/patterns/cqrs)，了解有关该模式的更多信息。
- en: '**The Event Sourcing pattern**'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '**事件溯源模式**'
- en: 'As most applications work with data and as the users are working with it, the
    classic approach for the application would be to maintain and update the current
    state of the data. Reading data from the source, modifying it, and updating the
    current state with the modified value is the typical data processing approach.
    However, there are some limitations:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 由于大多数应用程序都涉及数据操作，并且用户也在操作数据，因此应用程序的经典方法是维护和更新数据的当前状态。从源头读取数据，修改数据，然后用修改后的值更新当前状态是典型的数据处理方法。然而，这种方法有一些局限性：
- en: As the update operations are directly made against the data store, this will
    slow down the overall performance and responsiveness.
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于更新操作直接作用于数据存储，这会降低整体的性能和响应能力。
- en: If there are multiple users working on and updating the data, there may be conflicts
    and some of the relevant updates may fail.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有多个用户在操作和更新数据，可能会出现冲突，并且一些相关的更新可能会失败。
- en: The solution for this is to implement the Event Sourcing pattern, where the
    changes will be recorded in an append-only store. A series of events will be pushed
    by the application code to the event store, where they will be persisted. The
    events persisted in an event store act as a system of record about the current
    state of data. Consumers will be notified, and they can handle the events if needed
    once they are published.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案是实现事件溯源（Event Sourcing）模式，其中变更将被记录在仅追加的存储中。应用程序代码会将一系列事件推送到事件存储中，并在那里持久化。这些持久化的事件充当当前数据状态的系统记录。消费者将在事件发布后收到通知，并在需要时处理这些事件。
- en: 'The Event Sourcing pattern is shown in *Figure 3.15*:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 事件溯源模式如*图 3.15*所示：
- en: '![Event Sourcing pattern architecture](img/Figure_3.15.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![事件溯源模式架构](img/Figure_3.15.jpg)'
- en: 'Figure 3.15: The Event Sourcing pattern'
  id: totrans-219
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3.15：事件溯源模式
- en: More information about this pattern is available at [https://docs.microsoft.com/azure/architecture/patterns/event-sourcing](https://docs.microsoft.com/azure/architecture/patterns/event-sourcing).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于此模式的信息，请访问 [https://docs.microsoft.com/azure/architecture/patterns/event-sourcing](https://docs.microsoft.com/azure/architecture/patterns/event-sourcing)。
- en: '**The Throttling pattern**'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '**限流模式**'
- en: At times, there are applications that have very stringent SLA requirements from
    a performance and scalability perspective, irrespective of the number of users
    consuming the service. In these circumstances, it is important to implement the
    Throttling pattern because it can limit the number of requests that are allowed
    to be executed. The load on applications cannot be predicted accurately in all
    circumstances. When the load on an application spikes, throttling reduces pressure
    on the servers and services by controlling the resource consumption. The Azure
    infrastructure is a very good example of this pattern.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 有些应用程序对性能和可扩展性有非常严格的SLA（服务级别协议）要求，无论用户数量如何。在这种情况下，实施限流模式非常重要，因为它可以限制允许执行的请求数量。在所有情况下，无法准确预测应用程序的负载。当应用程序的负载激增时，限流通过控制资源消耗来减少服务器和服务的压力。Azure基础设施是该模式的一个很好的示例。
- en: This pattern should be used when meeting the SLA is a priority for applications
    to prevent some users from consuming more resources than allocated, to optimize
    spikes and bursts in demand, and to optimize resource consumption in terms of
    cost. These are valid scenarios for applications that have been built to be deployed
    on the cloud.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 当满足SLA是应用程序的优先事项时，应该使用此模式，以防止某些用户消耗超过分配的资源，优化需求的峰值和波动，并在成本方面优化资源消耗。这些是为部署在云上的应用程序设计的有效场景。
- en: There can be multiple strategies for handling throttling in an application.
    The Throttling strategy can reject new requests once the threshold is crossed,
    or it can let the user know that the request is in the queue and it will get the
    opportunity to be executed once the number of requests is reduced.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序中处理限流可以采用多种策略。限流策略可以在超过阈值后拒绝新的请求，或者可以让用户知道请求已在队列中，并且在请求数量减少后会有机会执行。
- en: '*Figure 3.16* illustrates the implementation of the Throttling pattern in a
    multi-tenant system, where each tenant is allocated a fixed resource usage limit.
    Once they cross this limit, any additional demand for resources is constrained,
    thereby maintaining enough resources for other tenants:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3.16*展示了在多租户系统中实施限流模式的情况，其中每个租户都有固定的资源使用限制。一旦超过此限制，任何额外的资源需求都会受到限制，从而为其他租户保留足够的资源：'
- en: '![Implementing a Throttling pattern in a multi-tenant system](img/Figure_3.16.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![在多租户系统中实现限流模式](img/Figure_3.16.jpg)'
- en: 'Figure 3.16: The Throttling pattern'
  id: totrans-227
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3.16：限流模式
- en: Read more about this pattern at [https://docs.microsoft.com/azure/architecture/patterns/throttling](https://docs.microsoft.com/azure/architecture/patterns/throttling).
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读更多关于此模式的信息，请访问 [https://docs.microsoft.com/azure/architecture/patterns/throttling](https://docs.microsoft.com/azure/architecture/patterns/throttling)。
- en: '**Retry pattern**'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '**重试模式**'
- en: The Retry pattern is an extremely important pattern that makes applications
    and services more resilient to transient failures. Imagine you are trying to connect
    to and use a service, and the service is not available for some reason. If the
    service is going to become available soon, it makes sense to keep trying to get
    a successful connection. This will make the application more robust, fault tolerant,
    and stable. In Azure, most of the components are running on the internet, and
    that internet connection can produce transient faults intermittently. Since these
    faults can be rectified within seconds, an application should not be allowed to
    crash. The application should be designed in a manner that means it can try to
    use the service again repeatedly in the case of failure and stop retrying when
    either it is successful or it eventually determines that there is a fault that
    will take time to rectify.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 重试模式是一个非常重要的模式，使应用程序和服务能够更好地应对瞬时故障。假设你正在尝试连接并使用一个服务，但该服务由于某种原因无法使用。如果该服务很快就会恢复，继续尝试建立连接是有意义的。这将使应用程序更加健壮、容错和稳定。在
    Azure 中，大多数组件都运行在互联网环境下，而互联网连接可能会间歇性地产生瞬时故障。由于这些故障可以在几秒钟内修复，因此应用程序不应该崩溃。应用程序应该设计为在失败的情况下反复尝试使用服务，并在成功或最终确定存在需要时间修复的故障时停止重试。
- en: This pattern should be implemented when an application could experience transient
    faults as it interacts with a remote service or accesses a remote resource. These
    faults are expected to be short-lived, and repeating a request that has previously
    failed could succeed on a subsequent attempt.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序与远程服务交互或访问远程资源时可能会遇到瞬时故障时，应该实现此模式。这些故障预计会是短暂的，重复以前失败的请求可能在后续尝试中成功。
- en: 'The Retry pattern can adopt different retry strategies depending on the nature
    of the errors and the application:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 重试模式可以根据错误的性质和应用程序的需求采用不同的重试策略。
- en: '**Retry a fixed number of times**: This denotes that the application will try
    to communicate with the service a fixed number of times before determining that
    there''s been a failure and raising an exception. For example, it will retry three
    times to connect to another service. If it is successful in connecting within
    these three tries, the entire operation will be successful; otherwise, it will
    raise an exception.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重试固定次数**：这意味着应用程序在确定发生失败并引发异常之前，会尝试与服务通信固定的次数。例如，它会重试三次连接到另一个服务。如果在这三次尝试内成功连接，整个操作将成功；否则，它将引发异常。'
- en: '**Retry based on schedule**: This denotes that the application will try to
    communicate with the service repeatedly for a fixed number of seconds or minutes
    and wait for a fixed number of seconds or minutes before retrying. For example,
    the application will try to connect to the service every three seconds for 60
    seconds. If it is successful in connecting within this time, the entire operation
    will be successful. Otherwise, it will raise an exception.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于计划的重试**：这意味着应用程序将在固定的秒数或分钟数内反复尝试与服务通信，并在重试前等待固定的秒数或分钟数。例如，应用程序将在 60 秒内每三秒尝试连接一次服务。如果在此期间成功连接，整个操作将成功；否则，它将引发异常。'
- en: '**Sliding and delaying the retry**: This denotes that the application will
    try to communicate with the service repeatedly based on the schedule and keep
    adding an incremental delay in subsequent tries. For example, for a total of 60
    seconds, the first retry happens after a second, the second retry happens two
    seconds after the previous retry, the third retry happens four seconds after the
    previous retry, and so on. This reduces the overall number of retries.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**滑动和延迟重试**：这意味着应用程序将根据计划反复尝试与服务通信，并在随后的尝试中逐渐增加延迟。例如，在总计 60 秒内，第一次重试发生在一秒后，第二次重试发生在上一次重试后两秒，第三次重试发生在上一次重试后四秒，以此类推。这减少了重试的总次数。'
- en: '*Figure 3.17* illustrates the Retry pattern. The first request gets an HTTP
    500 response, the second retry again gets an HTTP 500 response, and finally the
    request is successful and gets HTTP 200 as the response:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 3.17* 演示了重试模式。第一次请求得到 HTTP 500 响应，第二次重试仍然得到 HTTP 500 响应，最后请求成功并得到 HTTP 200
    响应：'
- en: '![The implementation of the Retry pattern ](img/Figure_3.17.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![重试模式的实现](img/Figure_3.17.jpg)'
- en: 'Figure 3.17: The Retry pattern'
  id: totrans-238
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3.17：重试模式
- en: Refer to this Microsoft documentation at [https://docs.microsoft.com/azure/architecture/patterns/retry](https://docs.microsoft.com/azure/architecture/patterns/retry)
    to find out more about this pattern.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考此 Microsoft 文档[https://docs.microsoft.com/azure/architecture/patterns/retry](https://docs.microsoft.com/azure/architecture/patterns/retry)，了解更多关于此模式的信息。
- en: '**The Circuit Breaker pattern**'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '**电路断路器模式**'
- en: This is an extremely useful pattern. Imagine again that you are trying to connect
    to and use a service, and the service is not available for some reason. If the
    service is not going to become available soon, there is no use continuing to retry
    the connection. Moreover, keeping other resources occupied while retrying wastes
    a lot of resources that could potentially be used elsewhere.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常有用的模式。再想象一下，当您尝试连接并使用某个服务，而该服务因某种原因不可用。如果该服务在短期内无法恢复，那么继续重试连接毫无意义。此外，在重试时占用其他资源会浪费大量本可以在其他地方使用的资源。
- en: The Circuit Breaker pattern helps eliminate this waste of resources. It can
    prevent applications from repeatedly trying to connect to and use a service that
    is not available. It also helps applications to detect whether a service is up
    and running again, and allow applications to connect to it.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 电路断路器模式有助于消除资源浪费。它可以防止应用程序重复尝试连接和使用一个不可用的服务。它还帮助应用程序检测服务是否已恢复运行，并允许应用程序连接到它。
- en: To implement the Circuit Breaker pattern, all requests to the service should
    pass through a service that acts as a proxy to the original service. The purpose
    of this proxy service is to maintain a state machine and act as a gateway to the
    original service. There are three states that it maintains. There could be more
    states included, depending on the application's requirements.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现电路断路器模式，所有对服务的请求都应通过一个充当原始服务代理的服务。这个代理服务的目的是维护一个状态机，并充当原始服务的网关。它维持三种状态。根据应用程序的需求，可能会包含更多的状态。
- en: 'The minimal states needed to implement this pattern are as follows:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 实现此模式所需的最小状态如下：
- en: '**Open**: This denotes that the service is down and the application is shown
    as an exception immediately, instead of allowing it to retry or wait for a timeout.
    When the service is up again, the state is transitioned to Half-Open.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**打开**：这表示服务不可用，应用程序会立即显示为异常，而不是允许它重试或等待超时。当服务恢复后，状态会过渡到半打开。'
- en: '**Closed**: This state denotes that the service is healthy and the application
    can go ahead and connect to it. Generally, a counter shows the number of failures
    before it can transition to the Open state.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关闭**：该状态表示服务正常，应用程序可以继续连接到它。通常，会显示一个计数器，显示在过渡到打开状态之前的失败次数。'
- en: '**Half-Open**: At some point, when the service is up and running, this state
    allows a limited number of requests to pass through it. This state is a litmus
    test that checks whether the requests that pass through are successful. If the
    requests are successful, the state is transitioned from Half-Open to Closed. This
    state can also implement a counter to allow a certain number of requests to be
    successful before it can transition to Closed.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**半打开**：在某个时刻，当服务恢复运行时，该状态允许有限数量的请求通过。这个状态是一个试金石，用来检查通过的请求是否成功。如果请求成功，状态将从半打开过渡到关闭。此状态还可以实现一个计数器，允许一定数量的请求成功后，再过渡到关闭状态。'
- en: 'The three states and their transitions are illustrated in *Figure 3.18*:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.18 中展示了三种状态及其过渡：
- en: '![Transition among three states in a Circuit Breaker pattern](img/Figure_3.18.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![电路断路器模式中的三种状态的过渡](img/Figure_3.18.jpg)'
- en: 'Figure 3.18: The Circuit Breaker pattern'
  id: totrans-250
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 3.18：电路断路器模式
- en: Read more this pattern in the Microsoft documentation at [https://docs.microsoft.com/azure/architecture/patterns/circuit-breaker](https://docs.microsoft.com/azure/architecture/patterns/circuit-breaker).
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Microsoft 文档中阅读更多关于此模式的信息：[https://docs.microsoft.com/azure/architecture/patterns/circuit-breaker](https://docs.microsoft.com/azure/architecture/patterns/circuit-breaker)。
- en: In this section, we discussed design patterns that can be used to architect
    reliable, scalable, and secure applications in the cloud. There are other patterns,
    though, which you can explore at [https://docs.microsoft.com/azure/architecture/patterns](https://docs.microsoft.com/azure/architecture/patterns).
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了可以用于构建可靠、可扩展且安全的云应用程序的设计模式。然而，还有其他模式，您可以在[https://docs.microsoft.com/azure/architecture/patterns](https://docs.microsoft.com/azure/architecture/patterns)上进行探索。
- en: Summary
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: There are numerous services available on Azure, and most of them can be combined
    to create real solutions. This chapter explained the three most important services
    provided by Azure—regions, storage, and networks. They form the backbone of the
    majority of solutions deployed on any cloud. This chapter provided details about
    these services and how their configuration and provisioning can affect design
    decisions.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 提供了众多服务，大多数可以组合起来创建真正的解决方案。本章解释了Azure提供的三个最重要的服务——区域、存储和网络。它们构成了部署在任何云上的大多数解决方案的基础。本章详细介绍了这些服务及其配置和预配如何影响设计决策。
- en: Important considerations for both storage and networks were detailed in this
    chapter. Both networks and storage provide lots of choices, and it is important
    to choose an appropriate configuration based on your requirements.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 本章详细介绍了存储和网络的重要考虑因素。网络和存储都提供了许多选择，根据您的需求选择合适的配置至关重要。
- en: Finally, some of the important design patterns related to messaging, such as
    Competing Consumers, Priority Queue, and Load Leveling, were described. Patterns
    such as CQRS and Throttling were illustrated, and other patterns, such as Retry
    and Circuit Breaker, were also discussed. We will keep these patterns as the baseline
    when we deploy our solutions.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，介绍了与消息相关的一些重要设计模式，例如竞争消费者、优先队列和负载平衡。还详细说明了诸如CQRS和节流等模式，并讨论了其他模式，如重试和断路器。在部署解决方案时，我们将把这些模式作为基准。
- en: In the next chapter, we will be discussing how to automate the solutions we
    are going to architect. As we move ahead in the world of automation, every organization
    wants to eliminate the overhead of creating resources one by one, which is very
    demanding. Since automation is the solution for this, in the next chapter you
    will learn more about it.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何自动化我们打算设计的解决方案。随着自动化技术的发展，每个组织都希望消除逐一创建资源的开销，这是非常具有挑战性的。由于自动化是解决这一问题的方法，下一章将更深入地探讨这个话题。
