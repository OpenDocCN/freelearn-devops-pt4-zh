- en: 11\. Azure solutions using Azure Logic Apps, Event Grid, and Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11. 使用 Azure Logic Apps、Event Grid 和 Functions 的 Azure 解决方案
- en: This chapter continues from the previous chapter and will go into further depth
    about serverless services available within Azure. In the previous chapter, you
    learned in detail about Azure Functions, functions as a service, Durable Functions,
    and Event Grid. Going forward, this chapter will focus on understanding Logic
    Apps and then move on to creating a complete end-to-end serverless solution that
    combines multiple serverless and other kinds of services, such as Key Vault and
    Azure Automation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章接续上一章内容，进一步深入探讨 Azure 中可用的无服务器服务。在上一章中，你详细了解了 Azure Functions、函数即服务、耐久性函数以及
    Event Grid。接下来，本章将重点讲解 Logic Apps，并且将展示如何创建一个完整的端到端无服务器解决方案，该解决方案结合了多个无服务器服务及其他服务，例如
    Key Vault 和 Azure Automation。
- en: 'In this chapter, we will further explore Azure services by covering the following
    topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过以下主题进一步探索 Azure 服务：
- en: Azure Logic Apps
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Logic Apps
- en: Creating an end-to-end solution using serverless technologies
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用无服务器技术创建端到端解决方案
- en: Azure Logic Apps
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure Logic Apps
- en: Logic Apps is a serverless workflow offering from Azure. It has all the features
    of serverless technologies, such as consumption-based costing and unlimited scalability.
    Logic Apps helps us to build a business process and workflow solution with ease
    using the Azure portal. It provides a drag-and-drop UI to create and configure
    workflows.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Logic Apps 是 Azure 提供的一种无服务器工作流服务。它具有所有无服务器技术的特点，例如按使用量计费和无限的可扩展性。Logic Apps
    帮助我们通过 Azure 门户轻松构建业务流程和工作流解决方案。它提供了一个拖拽式界面，用于创建和配置工作流。
- en: Using Logic Apps is the preferred way to integrate services and data, create
    business projects, and create a complete flow of logic. There are several important
    concepts that should be understood before building a logic app.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Logic Apps 是集成服务和数据、创建业务项目以及创建完整逻辑流的首选方式。在构建 Logic Apps 之前，应该理解几个重要的概念。
- en: Activities
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动
- en: 'An activity is a single unit of work. Examples of activities include converting
    XML to JSON, reading blobs from Azure Storage, and writing to a Cosmos DB document
    collection. Logic Apps provides a workflow definition consisting of multiple co-related
    activities in a sequence. There are two types of activity in Logic Apps:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 活动是一个独立的工作单元。活动的例子包括将 XML 转换为 JSON、从 Azure 存储读取 Blob 和写入 Cosmos DB 文档集合。Logic
    Apps 提供了一个工作流定义，包含多个相关活动按顺序执行。Logic Apps 中有两种类型的活动：
- en: '**Trigger**: A trigger refers to the initiation of an activity. All logic apps
    have a single trigger that forms the first activity. It is the trigger that creates
    an instance of the logic app and starts the execution. Examples of triggers are
    the arrival of Event Grid messages, an email, an HTTP request, or a schedule.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**触发器**：触发器是指启动活动的事件。所有 Logic Apps 都有一个触发器，它是第一个活动。触发器创建 Logic Apps 实例并启动执行。触发器的例子包括
    Event Grid 消息的到达、电子邮件、HTTP 请求或计划任务。'
- en: '**Actions:** Any activity that is not a trigger is a step activity, and each
    of them is responsible to perform one task. Steps are connected to each other
    in a workflow. Each step will have an action that needs to be completed before
    going to the next step.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作**：任何不是触发器的活动都是步骤活动，每个步骤负责执行一个任务。步骤按顺序连接在工作流中。每个步骤都需要完成一个操作，才能继续到下一个步骤。'
- en: Connectors
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接器
- en: Connectors are Azure resources that help connect a logic app to external services.
    These services can be in the cloud or on-premises. For example, there is a connector
    for connecting logic apps to Event Grid. Similarly, there is another connector
    to connect to Office 365 Exchange. Almost all types of connectors are available
    in Logic Apps, and they can be used to connect to services. Connectors contain
    connection information and also logic to connect to external services using this
    connection information.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 连接器是 Azure 资源，用于将 Logic Apps 与外部服务连接。这些服务可以位于云端或本地。例如，有一个连接器可以将 Logic Apps 连接到
    Event Grid。同样，还有一个连接器可以连接到 Office 365 Exchange。Logic Apps 中几乎所有类型的连接器都可以用来连接服务。连接器包含连接信息，并利用这些信息提供连接外部服务的逻辑。
- en: The entire list of connectors is available at [https://docs.microsoft.com/connectors](https://docs.microsoft.com/connectors).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 所有连接器的完整列表可以在 [https://docs.microsoft.com/connectors](https://docs.microsoft.com/connectors)
    查看。
- en: Now that you know about connectors, you need to understand how they can be aligned
    in a step-by-step manner to make the workflow work as expected. In the next section,
    we will be focusing on the workings of a logic app.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你了解了连接器，你需要了解如何按步骤将它们对齐，以便工作流按预期运行。在接下来的部分，我们将重点介绍逻辑应用的工作原理。
- en: The workings of a logic app
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 逻辑应用的工作原理
- en: 'Let''s create a Logic Apps workflow that gets triggered when an email account
    receives an email. It replies to the sender with a default email and performs
    sentiment analysis on the content of the email. For sentiment analysis, the Text
    Analytics resource from Cognitive Services should be provisioned before creating
    the logic app:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个逻辑应用工作流，当电子邮件账户收到邮件时触发。它会回复发件人一封默认的电子邮件，并对邮件内容进行情感分析。对于情感分析，应该在创建逻辑应用之前配置Cognitive
    Services中的Text Analytics资源：
- en: Navigate to the Azure portal, log in to your account, and create a **Text Analytics**
    resource in a resource group. Text Analytics is part of Cognitive Services and
    has features such as sentiment analysis, key phrase extraction, and language detection.
    You can find the service in the Azure portal, as shown in *Figure 11.1*:![Entering
    the keywords ‘Text Analytics’ in the search box of the Azure portal to find the
    Text Analytics service.](img/Figure_11.1.jpg)
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到Azure门户，登录到你的账户，并在资源组中创建一个**Text Analytics**资源。Text Analytics是Cognitive Services的一部分，提供情感分析、关键短语提取和语言检测等功能。你可以在Azure门户中找到该服务，如*图11.1*所示：![在Azure门户的搜索框中输入‘Text
    Analytics’关键词以查找Text Analytics服务。](img/Figure_11.1.jpg)
- en: 'Figure 11.1: Navigating to the Text Analytics service from the Azure portal'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图11.1：从Azure门户导航到Text Analytics服务
- en: Provide the **Name**, **Location**, **Subscription**, **Resource group**, and
    **Pricing tier** values. We'll be using the free tier (F0 tier) of this service
    for this demo.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供**名称**、**位置**、**订阅**、**资源组**和**定价层**值。我们将在此演示中使用该服务的免费层（F0层）。
- en: Once the resource is provisioned, navigate to the **Overview** page, and copy
    the endpoint URL. Store it in a temporary location. This value will be required
    when configuring the logic app.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 资源配置完成后，导航到**概览**页面，复制端点URL，并将其存储在临时位置。配置逻辑应用时将需要此值。
- en: Navigate to the **Keys** page and copy the value from **Key 1** and store it
    in a temporary location. This value will be needed when configuring the logic
    app.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**密钥**页面，复制**密钥1**的值并将其存储在临时位置。配置逻辑应用时将需要此值。
- en: The next step is to create a logic app. To create a logic app, navigate to the
    resource group in the Azure portal in which the logic app should be created. Search
    for Logic App and create it by providing **Name**, **Location**, **Resource group**,
    and **Subscription** values.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是创建一个逻辑应用。要创建逻辑应用，请在Azure门户中导航到应创建逻辑应用的资源组。搜索“Logic App”，并通过提供**名称**、**位置**、**资源组**和**订阅**值来创建它。
- en: After the logic app has been created, navigate to the resource, click on **Logic
    app designer** in the left-hand menu, and then select the **When a new email is
    received in Outlook.com** template to create a new workflow. The template provides
    a head start by adding boilerplate triggers and activities. This will add an Office
    365 Outlook trigger automatically to the workflow.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建完逻辑应用后，导航到该资源，点击左侧菜单中的**Logic app designer**，然后选择**当在Outlook.com中收到新邮件时**模板来创建新工作流。该模板通过添加基本触发器和活动来为你提供一个起点。这将自动向工作流中添加一个Office
    365 Outlook触发器。
- en: Click on the **Sign in** button on the trigger; it will open a new Internet
    Explorer window. Then, sign in to your account. After successfully signing in,
    a new Office 365 mail connector will be created, containing the connection information
    to the account.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击触发器上的**登录**按钮，它将打开一个新的Internet Explorer窗口。然后，登录到你的账户。成功登录后，将创建一个新的Office 365邮件连接器，包含连接到账户的相关信息。
- en: Click on the **Continue** button and configure the trigger with a 3-minute poll
    frequency, as shown in *Figure 11.2*:![Configuring the trigger with a 3-minute
    poll frequency by setting Interval as ‘3’ and Frequency as minute.](img/Figure_11.2.jpg)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**继续**按钮，并将触发器配置为每3分钟轮询一次，如*图11.2*所示：![通过将间隔设置为‘3’，频率设置为分钟，配置触发器为3分钟轮询频率。](img/Figure_11.2.jpg)
- en: 'Figure 11.2: Configuring the trigger with a 3-minute poll frequency'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图11.2：配置触发器为3分钟轮询频率
- en: Click on `variable` in the search bar. Then, select the **Initialize variable**
    action, as demonstrated in *Figure 11.3*:![In the ‘Choose an action’ pane, entering
    the keyword ‘variable’ and then selecting the Initialize variable action.](img/Figure_11.3.jpg)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索栏中点击`variable`。然后，选择**初始化变量**操作，如*图11.3*所示：![在“选择操作”面板中，输入关键字‘variable’，然后选择初始化变量操作。](img/Figure_11.3.jpg)
- en: 'Figure 11.3: Adding the Initialize variable action'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图11.3：添加初始化变量操作
- en: Next, configure the variable action. When the **Value** box is clicked on, a
    pop-up window appears that shows **Dynamic content** and **Expression**. Dynamic
    content refers to properties that are available to the current action and are
    filled with runtime values from previous actions and triggers. Variables help
    in keeping workflows generic. From this window, select **Body** from **Dynamic
    content**:![In the ‘Initialize variable’ pane, adding the name as emailContent,
    the type as string, and the value as Body.](img/Figure_11.4.jpg)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，配置变量操作。当点击**值**框时，会弹出一个窗口，显示**动态内容**和**表达式**。动态内容是指当前操作可用的属性，并填充来自先前操作和触发器的运行时值。变量有助于保持工作流的通用性。从此窗口中，选择**动态内容**中的**正文**：![在“初始化变量”面板中，设置名称为emailContent，类型为字符串，值为正文。](img/Figure_11.4.jpg)
- en: 'Figure 11.4: Configuring the variable action'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图11.4：配置变量操作
- en: Add another action by clicking on `outlook` in the search bar, and then selecting
    the **Reply to email** action:![Searching with the keyword ‘Outlook’ in the searchbox
    of the ‘Choose an action’ pane and then adding the action ‘Reply to email’.](img/Figure_11.5.jpg)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击搜索栏中的`outlook`，然后选择**回复电子邮件**操作，添加另一个操作：![在“选择操作”面板的搜索框中输入关键字‘Outlook’，然后添加‘回复电子邮件’操作。](img/Figure_11.5.jpg)
- en: 'Figure 11.5: Adding the Reply to email action'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图11.5：添加回复电子邮件操作
- en: Configure the new action. Ensure that **Message Id** is set with the dynamic
    content, **Message Id**, and then type the reply in the **Comment** box that you'd
    like to send to the recipient:![Configuring the Reply to email action by adding
    the Message id, the comment “Thanks for your email. We will get back to you”,
    and the Reply All option as ‘Yes’.](img/Figure_11.6.jpg)
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置新操作。确保**消息ID**已设置为动态内容，**消息ID**，然后在**评论**框中输入你希望发送给收件人的回复：![通过添加消息ID、评论“感谢您的邮件。我们会尽快回复您”和选择‘是’的“回复所有”选项来配置回复电子邮件操作。](img/Figure_11.6.jpg)
- en: 'Figure 11.6: Configuring the Reply to email action'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图11.6：配置回复电子邮件操作
- en: Add another action, type `text analytics` in the search bar, and then select
    **Detect Sentiment (preview)**:![Adding the Detect Sentiment (preview) action.](img/Figure_11.7.jpg)
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加另一个操作，在搜索栏中输入`text analytics`，然后选择**检测情感（预览）**：![添加检测情感（预览）操作。](img/Figure_11.7.jpg)
- en: 'Figure 11.7: Adding the Detect Sentiment (preview) action'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图11.7：添加检测情感（预览）操作
- en: Configure the sentiment action as shown in *Figure 11.8*—both the endpoint and
    key values should be used here. Now click on the **Create** button, as demonstrated
    in *Figure 11.8*:![Configuring the sentiment action by providing the Connection
    name as EmailAnalysis, and entering the account key and the Site URL.](img/Figure_11.8.jpg)
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照*图11.8*中的示例配置情感操作——此处应使用端点和密钥值。现在点击**创建**按钮，如*图11.8*所示：![通过提供连接名称为EmailAnalysis，输入账户密钥和站点URL来配置情感操作。](img/Figure_11.8.jpg)
- en: 'Figure 11.8: Configuring the Detect Sentiment (preview) action'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图11.8：配置检测情感（预览）操作
- en: Provide the text to the action by adding dynamic content and selecting the previously
    created variable, **emailContent**. Then, click on **Show advanced options** and
    select **en** for **Language**:![In the ‘Detect Sentiment(preview) pane, setting
    text field as emailContent and Language as en.](img/Figure_11.9.jpg)
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加动态内容并选择之前创建的变量**emailContent**，向操作提供文本。然后，点击**显示高级选项**，并为**语言**选择**en**：![在“检测情感（预览）”面板中，设置文本字段为emailContent，语言为en。](img/Figure_11.9.jpg)
- en: 'Figure 11.9: Selecting the language for the sentiment action'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图11.9：选择情感操作的语言
- en: Next, add a new action by selecting **Outlook**, and then select **Send an email**.
    This action sends the original recipient the email content with the sentiment
    score in its subject. It should be configured as shown in *Figure 11.10*. If the
    score is not visible in the dynamic content window, click on the **See more**
    link beside it:![Configuring the Send an email action and setting Body as emailCOntent,
    Subject as Score, and To as ‘To’ from (Outlook).](img/Figure_11.10.jpg)
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过选择**Outlook**并选择**发送电子邮件**来添加一个新操作。此操作会将包含情感评分的电子邮件内容发送给原始收件人，并将其作为主题。它应该如*图
    11.10*所示进行配置。如果动态内容窗口中未显示评分，请点击旁边的**查看更多**链接：![配置发送电子邮件操作，并将正文设置为emailContent，主题设置为Score，收件人设置为“收件人”来自（Outlook）。](img/Figure_11.10.jpg)
- en: 'Figure 11.10: Adding the Send an email action'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11.10：添加发送电子邮件操作
- en: Save the logic app, navigate back to the overview page, and click on **Run trigger**.
    The trigger will check for new emails every 3 minutes, reply to the senders, perform
    sentiment analysis, and send an email to the original recipient. A sample email
    with negative connotations is sent to the given email ID:![A sample email with
    negative connotations, sent to the given email ID.](img/Figure_11.11.jpg)
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存逻辑应用，返回概述页面，然后点击**运行触发器**。该触发器每隔 3 分钟检查一次新邮件，回复发件人，执行情感分析，并将电子邮件发送给原始收件人。一个包含负面含义的电子邮件样本会发送到指定的电子邮件
    ID：![包含负面含义的电子邮件样本，发送到指定的电子邮件 ID。](img/Figure_11.11.jpg)
- en: 'Figure 11.11: Sample email'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11.11：电子邮件示例
- en: After a few seconds, the logic app executes, and the sender gets the following
    reply:![The autogenerated reply from the logic app with the text specified in
    the ‘Reply to email’ action.](img/Figure_11.12.jpg)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 几秒钟后，逻辑应用执行，发件人收到以下回复：![来自逻辑应用的自动生成回复，包含“回复电子邮件”操作中指定的文本。](img/Figure_11.12.jpg)
- en: 'Figure 11.12: Reply email to the original sender'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11.12：回复原始发件人的电子邮件
- en: The original recipient gets an email with the sentiment score and the original
    email text, as shown in *Figure 11.13*:![An HTML view of the email message with
    the sentiment score and the original email text.](img/Figure_11.13.jpg)
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 原始收件人收到包含情感评分和原始邮件文本的电子邮件，如*图 11.13*所示：![带有情感评分和原始电子邮件文本的电子邮件的 HTML 视图。](img/Figure_11.13.jpg)
- en: 'Figure 11.13: HTML view of the email message'
  id: totrans-49
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11.13：电子邮件消息的 HTML 视图
- en: From the activity, we were able to understand the workings of a logic app. The
    app was triggered when an email was received in the inbox of the user and the
    process followed the sequence of steps that were given in the logic app. In the
    next section, you will learn how to create an end-to-end solution using serverless
    technologies.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个活动，我们了解了逻辑应用的工作原理。当用户的收件箱收到电子邮件时，应用会被触发，随后流程按照逻辑应用中给定的步骤顺序执行。在下一节中，您将学习如何使用无服务器技术创建端到端解决方案。
- en: Creating an end-to-end solution using serverless technologies
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用无服务器技术创建端到端解决方案
- en: In this section, we will create an end-to-end solution comprising serverless
    technologies that we discussed in the previous sections. The following example
    will give you an idea of how workflows can be intelligently implemented to avoid
    management overhead. In the next activity, we will create a workflow to notify
    the users when the keys, secrets, and certificates get stored in Azure Key Vault.
    We will take this as a problem statement, figure out a solution, architect the
    solution, and implement it.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个端到端解决方案，包含我们在前几节中讨论的无服务器技术。以下示例将帮助您了解如何智能地实现工作流，避免管理开销。在接下来的活动中，我们将创建一个工作流，当密钥、机密和证书存储在
    Azure Key Vault 中时，通知用户。我们将以此为问题陈述，找出解决方案，架构解决方案，并实现它。
- en: The problem statement
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题陈述
- en: The problem that we are going to solve here is that users and organizations
    are not notified regarding the expiration of secrets in their key vault, and applications
    stop working when they expire. Users are complaining that Azure does not provide
    the infrastructure to monitor Key Vault secrets, keys, and certificates.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要解决的问题是，用户和组织未收到关于其密钥保管库中密钥过期的通知，且密钥过期后应用程序会停止工作。用户抱怨 Azure 没有提供监控 Key Vault
    密钥、机密和证书的基础设施。
- en: Solution
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决方案
- en: The solution to this problem is to combine multiple Azure services and integrate
    them so that users can be proactively notified of the expiration of secrets. The
    solution will send notifications using two channels—email and SMS.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的方法是将多个 Azure 服务组合并集成，以便用户能主动收到密钥过期的通知。该解决方案将通过电子邮件和短信两种渠道发送通知。
- en: 'The Azure services used to create this solution include the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 用于创建此解决方案的 Azure 服务包括：
- en: Azure Key Vault
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 密钥库
- en: '**Azure Active Directory** (**Azure AD**)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure 活动目录**（**Azure AD**）'
- en: Azure Event Grid
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 事件网格
- en: Azure Automation
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 自动化
- en: Logic Apps
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑应用
- en: Azure Functions
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 函数
- en: SendGrid
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SendGrid
- en: Twilio SMS
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twilio 短信
- en: Now that you know the services that will be used as part of the solution, let's
    go ahead and create an architecture for this solution.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了解决方案中将使用的服务，让我们开始为这个解决方案创建架构。
- en: Architecture
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 架构
- en: In the previous section, we explored the list of services that will be used
    in the solution. If we want to implement the solution, the services should be
    laid out in the proper order. The architecture will help us to develop the workflow
    and take a step closer to the solution.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们探索了将用于解决方案的服务列表。如果我们要实现该解决方案，这些服务应按正确的顺序布局。架构将帮助我们开发工作流，并让我们更接近解决方案。
- en: 'The architecture of the solution comprises multiple services, as shown in *Figure
    11.14*:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 该解决方案的架构由多个服务组成，如*图 11.14*所示：
- en: '![An architectural diagram of solution services such as PowerShell Runbook,
    Event Grid, Key Vault, Logic Apps, and so on, showing the flow of messages between
    the services.](img/Figure_11.14.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![解决方案服务的架构图，展示了 PowerShell 运行簿、事件网格、密钥库、逻辑应用等服务之间的消息流。](img/Figure_11.14.jpg)'
- en: 'Figure 11.14: Solution architecture'
  id: totrans-71
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11.14：解决方案架构
- en: Let's go through each of these services and understand their roles and the functionality
    that they provide in the overall solution.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一了解这些服务，并理解它们在整个解决方案中提供的角色和功能。
- en: '**Azure Automation**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**Azure 自动化**'
- en: Azure Automation provides runbooks, and these runbooks can be executed to run
    logic using PowerShell, Python, and other scripting languages. Scripts can be
    executed either on-premises or in the cloud, which provides rich infrastructure
    and facilities to create scripts. These kinds of scripts are known as **runbooks**.
    Typically, runbooks implement a scenario such as stopping or starting a virtual
    machine, or creating and configuring storage accounts. It is quite easy to connect
    to the Azure environment from runbooks with the help of assets such as variables,
    certificates, and connections.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 自动化提供了运行簿，这些运行簿可以执行逻辑，使用 PowerShell、Python 以及其他脚本语言。脚本可以在本地或云端执行，这为创建脚本提供了丰富的基础设施和工具。这些脚本被称为**运行簿**。通常，运行簿实现的场景包括停止或启动虚拟机，或创建和配置存储帐户。通过资产如变量、证书和连接，连接到
    Azure 环境变得非常简单。
- en: In the current solution, we want to connect to Azure Key Vault, read all the
    secrets and keys stored within it, and fetch their expiry dates. These expiry
    dates should be compared with today's date and, if the expiry date is within a
    month, the runbook should raise a custom event on Event Grid using an Event Grid
    custom topic.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前的解决方案中，我们希望连接到 Azure 密钥库，读取其中存储的所有机密和密钥，并获取它们的到期日期。这些到期日期应与今天的日期进行比较，如果到期日期在一个月内，则运行簿应使用事件网格自定义主题在事件网格上触发一个自定义事件。
- en: An Azure Automation runbook using a PowerShell script will be implemented to
    achieve this. Along with the runbook, a scheduler will also be created that will
    execute the runbook once a day at 12.00 AM.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 将实现一个使用 PowerShell 脚本的 Azure 自动化运行簿。与运行簿一起，还将创建一个调度器，每天在凌晨 12:00 执行该运行簿。
- en: '**A custom Azure Event Grid topic**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**自定义 Azure 事件网格主题**'
- en: Once the runbook identifies that a secret or key is going to expire within a
    month, it will raise a new custom event and publish it to the custom topic created
    specifically for this purpose. Again, we will go into the details of the implementation
    in the next section.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦运行簿识别到某个机密或密钥将在一个月内到期，它将触发一个新的自定义事件，并将其发布到专门为此目的创建的自定义主题上。我们将在下一节中详细介绍实现的细节。
- en: '**Azure Logic Apps**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**Azure 逻辑应用**'
- en: A logic app is a serverless service that provides workflow capabilities. Our
    logic app will be configured to be triggered as and when an event is published
    on the custom Event Grid topic. After it is triggered, it will invoke the workflow
    and execute all the activities in it one after another. Generally, there are multiple
    activities, but for the purpose of this example, we will invoke one Azure function
    that will send both email and SMS messages. In a full-blown implementation, these
    notification functions should be implemented separately in separate Azure functions.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑应用是一种无服务器服务，提供工作流功能。我们的逻辑应用将被配置为在自定义 Event Grid 主题上发布事件时触发。触发后，它将调用工作流并依次执行其中的所有活动。通常，工作流中有多个活动，但为了本例的目的，我们将调用一个
    Azure 函数，发送电子邮件和短信通知。在全面实施中，这些通知功能应该在单独的 Azure 函数中分别实现。
- en: '**Azure Functions**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**Azure Functions**'
- en: Azure Functions is used to notify users and stakeholders about the expiration
    of secrets and keys using email and SMS. SendGrid is used to send emails, while
    Twilio is used to send SMS messages from Azure Functions.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Azure Functions 通知用户和利益相关者有关机密和密钥过期的信息，通过电子邮件和短信发送通知。使用 SendGrid 发送电子邮件，Twilio
    用于通过 Azure Functions 发送短信。
- en: In the next section, we will take a look at the prerequisites before implementing
    the solution.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，我们将了解实施解决方案之前的先决条件。
- en: Prerequisites
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 先决条件
- en: You will need an Azure subscription with contributor rights at the very least.
    As we are only deploying services to Azure and no external services are deployed,
    the subscription is the only prerequisite. Let's go ahead and implement the solution.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您至少需要一个具有贡献者权限的 Azure 订阅。由于我们仅将服务部署到 Azure，并且没有部署外部服务，因此订阅是唯一的先决条件。现在让我们开始实施解决方案。
- en: Implementation
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实施
- en: A key vault should already exist. If not, one should be created.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 应该已经存在一个密钥库。如果没有，需要创建一个。
- en: This step should be performed if a new Azure Key Vault instance needs to be
    provisioned. Azure provides multiple ways in which to provision resources. Prominent
    among them are Azure PowerShell and the Azure CLI. The Azure CLI is a command-line
    interface that works across platforms. The first task will be to provision a key
    vault in Azure. In this implementation, we will use Azure PowerShell to provision
    the key vault.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要配置一个新的 Azure Key Vault 实例，则应该执行此步骤。Azure 提供了多种方式来配置资源，其中突出的方式有 Azure PowerShell
    和 Azure CLI。Azure CLI 是一个跨平台的命令行接口。首要任务是配置一个 Azure 密钥库。在本次实施中，我们将使用 Azure PowerShell
    来配置密钥库。
- en: Before Azure PowerShell can be used to create a key vault, it is important to
    log into Azure so that subsequent commands can be executed successfully to create
    the key vault.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Azure PowerShell 创建密钥库之前，重要的是要登录 Azure，以便后续的命令能够成功执行以创建密钥库。
- en: '**Step 1: Provisioning an Azure Key Vault instance**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 1：配置 Azure Key Vault 实例**'
- en: 'The first step is to prepare the environment for the sample. This involves
    logging into the Azure portal, selecting an appropriate subscription, and then
    creating a new Azure resource group and a new Azure Key Vault resource:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是为示例准备环境。这包括登录 Azure 门户，选择合适的订阅，然后创建一个新的 Azure 资源组和一个新的 Azure Key Vault 资源：
- en: Execute the `Connect-AzAccount` command to log into Azure. It will prompt for
    credentials in a new window.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 `Connect-AzAccount` 命令以登录 Azure。系统会在新窗口中提示输入凭据。
- en: 'After a successful login, if there are multiple subscriptions available for
    the login ID provided, they will all be listed. It is important to select an appropriate
    subscription—this can be done by executing the `Set-AzContext` cmdlet:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成功登录后，如果提供的登录 ID 有多个订阅，它们都会列出。需要选择一个合适的订阅——可以通过执行 `Set-AzContext` cmdlet 来完成：
- en: '[PRE0]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create a new resource group in your preferred location. In this case, the name
    of the resource group is `IntegrationDemo` and it is created in the `West Europe`
    region:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您选择的区域创建一个新的资源组。此处的资源组名称为 `IntegrationDemo`，并且它被创建在 `西欧` 区域：
- en: '[PRE1]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create a new Azure Key Vault resource—the name of the vault, in this case,
    is `keyvaultbook`, and it is enabled for deployment, template deployment, disk
    encryption, soft delete, and purge protection:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 Azure Key Vault 资源——此处的密钥库名称为 `keyvaultbook`，并且启用了部署、模板部署、磁盘加密、软删除和清除保护功能：
- en: '[PRE2]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Please note that the key vault name needs to be unique. You may not be able
    to use the same name for two key vaults. The preceding command, when executed
    successfully, will create a new Azure Key Vault resource. The next step is to
    provide access to a service principal on the key vault.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，密钥库名称需要是唯一的。您可能无法为两个密钥库使用相同的名称。成功执行前面的命令后，将创建一个新的 Azure 密钥库资源。下一步是为服务主体提供对密钥库的访问权限。
- en: '**Step 2: Creating a service principal**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 2：创建服务主体**'
- en: Instead of using an individual account to connect to Azure, Azure provides service
    principals, which are, in essence, service accounts that can be used to connect
    to Azure Resource Manager and run activities. Adding a user to an Azure directory/tenant
    makes them available everywhere, including in all resource groups and resources,
    due to the nature of security inheritance in Azure. Access must be explicitly
    revoked from resource groups for users if they are not allowed to access them.
    Service principals help by assigning granular access and control to resource groups
    and resources, and, if required, they can be given access to the subscription
    scope. They can also be assigned granular permissions, such as reader, contributor,
    or owner permissions.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 提供服务主体，而不是使用个人账户连接到 Azure，服务主体本质上是服务账户，可以用于连接到 Azure 资源管理器并执行活动。将用户添加到
    Azure 目录/租户后，由于 Azure 安全继承的性质，用户在所有资源组和资源中都可用。若不允许用户访问某些资源组，必须显式地从这些资源组中撤销访问权限。服务主体通过分配细粒度的访问权限和控制权限来提供帮助，必要时，可以授予它们订阅级别的访问权限。它们还可以被分配细粒度的权限，如读取者、贡献者或所有者权限。
- en: 'In short, service principals should be the preferred mechanism to consume Azure
    services. They can be configured either with a password or with a certificate
    key. Service principals can be created using the `New-AzAdServicePrinicipal` command,
    as shown here:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，服务主体应成为使用 Azure 服务的首选机制。它们可以通过密码或证书密钥进行配置。可以使用 `New-AzAdServicePrinicipal`
    命令创建服务主体，如下所示：
- en: '[PRE3]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The important configuration values are the scope and role. The scope determines
    the access area for the service application—it is currently shown at the subscription
    level. Valid values for scope are as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的配置值是范围和角色。范围决定了服务应用的访问区域——当前显示的是在订阅级别。范围的有效值如下：
- en: '[PRE4]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The role provides permissions to the assigned scope. The valid values are as
    follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 该角色为分配的范围提供权限。有效值如下：
- en: Owner
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有者
- en: Contributor
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 贡献者
- en: Reader
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取者
- en: Resource-specific permissions
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定资源权限
- en: In the preceding command, owner permissions have been provided to the newly
    created service principal.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的命令中，已将所有者权限提供给新创建的服务主体。
- en: We can also use certificates if needed. For simplicity, we will proceed with
    the password.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，我们也可以使用证书。为了简化起见，我们将继续使用密码。
- en: 'With the service principal we created, the secret will be hidden. To find out
    the secret, you can try the following commands:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们创建的服务主体时，密钥将被隐藏。要查看密钥，您可以尝试以下命令：
- en: '[PRE5]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`$UnsecureSecret` will have your secret key.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`$UnsecureSecret` 将包含您的密钥。'
- en: 'Along with the service principal, an Application Directory application will
    be created. The application acts as the global representation of our application
    across directories and the principal is like a local representation of the application.
    We can create multiple principals using the same application in a different directory.
    We can get the details of the application created using the `Get-AzAdApplication`
    command. We will save the output of this command to a variable, `$app`, as we
    will need this later:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 与服务主体一起，将创建一个应用程序目录应用。该应用程序作为我们应用在各个目录中的全局表示，服务主体则像是该应用的本地表示。我们可以使用相同的应用在不同目录中创建多个服务主体。我们可以使用
    `Get-AzAdApplication` 命令获取所创建应用程序的详细信息。我们将该命令的输出保存到一个变量 `$app` 中，因为稍后我们需要用到它：
- en: '[PRE6]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We have now created a service principal using a secret; another secure way of
    creating one is using certificates. In the next section, we will create a service
    principal using certificates.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经使用密钥创建了一个服务主体；创建服务主体的另一种安全方式是使用证书。在接下来的部分，我们将使用证书创建服务主体。
- en: '**Step 3: Creating a service principal using certificates**'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 3：使用证书创建服务主体**'
- en: 'To create a service principal using certificates, the following steps should
    be executed:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用证书创建服务主体，应执行以下步骤：
- en: '**Create a self-signed certificate or purchase a certificate**: A self-signed
    certificate is used to create this example end-to-end application. For real-life
    deployments, a valid certificate should be purchased from a certificate authority.'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建自签名证书或购买证书**：自签名证书用于创建此示例的端到端应用程序。对于实际部署，应该从证书授权机构购买有效的证书。'
- en: 'To create a self-signed certificate, the following command can be run. The
    self-signed certificate is exportable and stored in a personal folder on the local
    machine—it also has an expiry date:'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要创建一个自签名证书，可以运行以下命令。自签名证书是可导出的，并存储在本地机器的个人文件夹中——它也有一个到期日期：
- en: '[PRE7]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`Get-Item` cmdlet reads the certificate from the certificate store and stores
    it in the `$cert1` variable. The `Export-PfxCertificate` cmdlet actually exports
    the certificate in the certificate store to the filesystem. In this case, it is
    in the `C:\book` folder.'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Get-Item` cmdlet 从证书存储中读取证书并将其存储在 `$cert1` 变量中。`Export-PfxCertificate` cmdlet
    实际上将证书从证书存储导出到文件系统中。在此案例中，它位于 `C:\book` 文件夹中。'
- en: '`X509Certificate2` is created to hold the certificate in memory, and the data
    is converted to a Base64 string using the `System.Convert` function:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`X509Certificate2` 被创建用于在内存中保存证书，并且数据通过 `System.Convert` 函数转换为 Base64 字符串：'
- en: '[PRE8]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We will be using this same principal to connect to Azure from the Azure Automation
    account. It is important that the application ID, tenant ID, subscription ID,
    and certificate thumbprint values are stored in a temporary location so that they
    can be used to configure subsequent resources:'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将使用相同的服务主体从 Azure 自动化帐户连接到 Azure。重要的是，应用程序 ID、租户 ID、订阅 ID 和证书指纹值需要存储在临时位置，以便用于配置后续资源：
- en: '[PRE9]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We have our service principal ready. The key vault we created doesn't have an
    access policy set, which means no user or application will be able to access the
    vault. In the next step, we will grant permissions to the Application Directory
    application we created to access the key vault.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好服务主体。我们创建的密钥保管库没有设置访问策略，这意味着没有用户或应用程序能够访问该保管库。在接下来的步骤中，我们将授予我们创建的应用程序目录应用程序访问密钥保管库的权限。
- en: '**Step 4: Creating a key vault policy**'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 4：创建密钥保管库策略**'
- en: At this stage, we have created the service principal and the key vault. However,
    the service principal still does not have access to the key vault. This service
    principal will be used to query and list all the secrets, keys, and certificates
    from the key vault, and it should have the necessary permissions to do so.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，我们已经创建了服务主体和密钥保管库。然而，服务主体仍然没有访问密钥保管库的权限。这个服务主体将用于查询并列出密钥保管库中的所有机密、密钥和证书，它应该拥有执行此操作所需的权限。
- en: 'To provide the newly created service principal permission to access the key
    vault, we will go back to the Azure PowerShell console and execute the following
    command:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为新创建的服务主体提供访问密钥保管库的权限，我们将返回 Azure PowerShell 控制台并执行以下命令：
- en: Set-AzKeyVaultAccessPolicy -VaultName keyvaultbook -ResourceGroupName IntegrationDemo
    -ObjectId $ServicePrincipal.Id -PermissionsToKeys get,list,create -PermissionsToCertificates
    get,list,import -PermissionsToSecrets get,list -Verbose
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Set-AzKeyVaultAccessPolicy -VaultName keyvaultbook -ResourceGroupName IntegrationDemo
    -ObjectId $ServicePrincipal.Id -PermissionsToKeys get,list,create -PermissionsToCertificates
    get,list,import -PermissionsToSecrets get,list -Verbose
- en: 'Referring to the previous command block, take a look at the following points:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 参考之前的命令块，请查看以下几点：
- en: '`Set-AzKeyVaultAccessPolicy` provides access permissions to users, groups,
    and service principals. It accepts the key vault name and the service principal
    object ID. This object is different from the application ID. The output of the
    service principal contains an `Id` property, as shown here:'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Set-AzKeyVaultAccessPolicy` 提供对用户、组和服务主体的访问权限。它接受密钥保管库名称和服务主体的对象 ID。这个对象与应用程序
    ID 不同。服务主体的输出包含 `Id` 属性，如下所示：'
- en: '![The output displaying the details of the service principal, such as Service
    principal name, Application ID, Object Type, and so on.](img/Figure_11.15.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![显示服务主体的详细信息，例如服务主体名称、应用程序 ID、对象类型等。](img/Figure_11.15.jpg)'
- en: 'Figure 11.15: Finding the object ID of the service principal'
  id: totrans-137
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11.15：查找服务主体的对象 ID
- en: '`PermissionsToKeys` provides access to keys in the key vault, and the `get`,
    `list`, and `create` permissions are provided to this service principal. There
    is no write or update permission provided to this principal.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PermissionsToKeys` 提供对密钥保管库中密钥的访问权限，且为该服务主体提供了 `get`、`list` 和 `create` 权限。没有为该主体提供写入或更新权限。'
- en: '`PermissionsToSecrets` provides access to secrets in the key vault, and the `get`
    and `list` permissions are provided to this service principal. There is no write
    or update permission provided to this principal.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PermissionsToSecrets` 提供对密钥保管库中机密的访问权限，`get` 和 `list` 权限已授予此服务主体。此服务主体没有提供写入或更新权限。'
- en: '`PermissionsToCertificates` provides access to secrets in the key vault, and
    `get`, `import`, and `list` permissions are provided to this service principal.
    There is no write or update permission provided to this principal.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PermissionsToCertificates` 提供对密钥保管库中机密的访问权限，并且 `get`、`import` 和 `list` 权限已授予此服务主体。此服务主体没有提供写入或更新权限。'
- en: At this point, we have configured the service principal to work with the Azure
    key vault. The next part of the solution is to create an Automation account.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们已配置服务主体以便与 Azure 密钥保管库一起使用。解决方案的下一部分是创建一个自动化帐户。
- en: '**Step 5: Creating an Automation account**'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 5：创建自动化帐户**'
- en: 'Just like before, we will be using Azure PowerShell to create a new Azure Automation
    account within a resource group. Before creating a resource group and an Automation
    account, a connection to Azure should be established. However, this time, use
    the credentials for the service principal to connect to Azure. The steps are as
    follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 就像之前一样，我们将使用 Azure PowerShell 在资源组中创建一个新的 Azure 自动化帐户。在创建资源组和自动化帐户之前，应该先建立与
    Azure 的连接。不过，这次，我们将使用服务主体的凭据连接到 Azure。步骤如下：
- en: 'The command to connect to Azure using the service application is as follows.
    The value is taken from the variables that we initialized in the previous steps:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用服务应用程序连接到 Azure 的命令如下。该值来自我们在之前步骤中初始化的变量：
- en: '[PRE10]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Make sure that you have access by checking `Get-AzContext` as shown here. Make
    a note of the subscription ID as it will be needed in subsequent commands:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过检查 `Get-AzContext` 来确保你有权限，如下所示。记下订阅 ID，因为后续命令需要用到它：
- en: '[PRE11]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After connecting to Azure, a new resource containing the resources for the
    solution and a new Azure Automation account should be created. You are naming
    the resource group `VaultMonitoring`, and creating it in the `West Europe` region.
    You will be creating the remainder of the resources in this resource group as
    well:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接到 Azure 后，应该创建一个包含解决方案资源的新资源以及一个新的 Azure 自动化帐户。你将资源组命名为 `VaultMonitoring`，并在
    `West Europe` 区域创建它。其余资源也将创建在此资源组中：
- en: '[PRE12]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, create three automation variables. The values for these, that is, the
    subscription ID, tenant ID, and application ID, should already be available using
    the previous steps:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建三个自动化变量。它们的值，即订阅 ID、租户 ID 和应用程序 ID，应该已经通过之前的步骤获得：
- en: '[PRE13]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now it''s time to upload a certificate, which will be used to connect to Azure
    from Azure Automation:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是时候上传证书了，这个证书将用于从 Azure 自动化连接到 Azure：
- en: '[PRE14]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The next step is to install PowerShell modules related to Key Vault and Event
    Grid in the Azure Automation account, as these modules are not installed by default.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是安装与密钥保管库和事件网格相关的 PowerShell 模块，因为这些模块默认没有安装。
- en: From the Azure portal, navigate to the already-created `VaultMonitoring` resource
    group by clicking on **Resource Groups** in the left-hand menu.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Azure 门户，点击左侧菜单中的 **资源组**，然后导航到已经创建的 `VaultMonitoring` 资源组。
- en: Click on the already-provisioned Azure Automation account, `Az.profile` module,
    and so we have to install it before the Event Grid module.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击已经配置的 Azure 自动化帐户，`Az.profile` 模块，所以我们必须先安装它，然后再安装事件网格模块。
- en: Click on `Az.profile` in the search box, as shown in *Figure 11.16*:![Searching
    for the Az.profile module in the Browser Gallery.](img/Figure_11.16.jpg)
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如 *图 11.16* 所示，在搜索框中点击 `Az.profile`：![在浏览器库中搜索 Az.profile 模块](img/Figure_11.16.jpg)
- en: 'Figure 11.16: The Az.Profile module in the module gallery'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11.16：模块库中的 Az.Profile 模块
- en: From the search results, select `Az.Profile` and click on the **Import** button
    in the top menu. Finally, click on the **OK** button. This step takes a few seconds
    to complete. After a few seconds, the module should be installed.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从搜索结果中，选择 `Az.Profile`，然后点击顶部菜单中的 **导入** 按钮。最后，点击 **确定** 按钮。此步骤需要几秒钟完成。几秒钟后，模块应已安装。
- en: The status of the installation can be checked from the **Module** menu item.
    *Figure 11.17* demonstrates how we can import a module:![The Az.Profile pane displaying
    the status of the module](img/Figure_11.17.jpg)
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以从 **模块** 菜单项检查安装状态。*图 11.17* 展示了如何导入模块：![显示模块状态的 Az.Profile 面板](img/Figure_11.17.jpg)
- en: 'Figure 11.17: Az.Profile module status'
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11.17：Az.Profile 模块状态
- en: Perform *steps 9*, *10*, and *11* again in order to import and install the `Az.EventGrid`
    module. If you are warned to install any dependencies before proceeding, go ahead
    and install the dependencies first.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请再次执行*步骤 9*、*步骤 10*和*步骤 11*，以导入和安装`Az.EventGrid`模块。如果在继续操作之前出现安装任何依赖项的提示，请先安装这些依赖项。
- en: Perform *steps 9*, *10*, and *11* again in order to import and install the `Az.KeyVault`
    module. If you are warned to install any dependencies before proceeding, go ahead
    and install the dependency first.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请再次执行*步骤 9*、*步骤 10*和*步骤 11*，以导入和安装`Az.KeyVault`模块。如果在继续操作之前出现安装任何依赖项的提示，请先安装这些依赖项。
- en: Since we have imported the necessary modules, let's go ahead and create the
    Event Grid topic.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经导入了必要的模块，接下来让我们创建 Event Grid 主题。
- en: '**Step 6: Creating an Event Grid topic**'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 6：创建 Event Grid 主题**'
- en: If you recall the architecture that we used, we need an Event Grid topic. Let's
    create one.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还记得我们使用的架构，我们需要一个 Event Grid 主题。让我们来创建一个。
- en: 'The command that''s used to create an Event Grid topic using PowerShell is
    as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 PowerShell 创建 Event Grid 主题的命令如下：
- en: '[PRE15]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The process of creating an Event Grid topic using the Azure portal is as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Azure 门户创建 Event Grid 主题的过程如下：
- en: From the Azure portal, navigate to the already-created `Vaultmonitoring` resource
    group by clicking on **Resource Groups** in the left-hand menu.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Azure 门户中，点击左侧菜单中的**资源组**，然后导航到已创建的`Vaultmonitoring`资源组。
- en: Next, click on the `Event Grid Topic` in the search box. Select it and then
    click on the **Create** button.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在搜索框中点击`Event Grid Topic`。选择它后，点击**创建**按钮。
- en: Fill in the appropriate values in the resultant form by providing a name, selecting
    a subscription, and selecting the newly created resource group, the location,
    and the event schema.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在生成的表单中填写适当的值，包括提供名称、选择订阅、选择新创建的资源组、位置和事件架构。
- en: As we already discussed, the Event Grid topic provides an endpoint where the
    source will send the data. Since we have our topic ready, let's prepare the source
    Automation account.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，Event Grid 主题提供了一个端点，源系统将通过该端点发送数据。既然我们已经准备好主题，接下来让我们准备源 Automation
    帐户。
- en: '**Step 7: Setting up the runbook**'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 7：设置 Runbook**'
- en: 'This step will focus on creating an Azure Automation account and PowerShell
    runbooks that will contain the core logic of reading Azure key vaults and retrieving
    secrets stored within them. The steps required for configuring Azure Automation
    are as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步将重点介绍如何创建 Azure Automation 帐户和 PowerShell Runbooks，这些 Runbooks 包含读取 Azure
    密钥保管库并检索其中存储的秘密的核心逻辑。配置 Azure Automation 所需的步骤如下：
- en: '`Vaultmonitoring` resource group by clicking on **Resource Groups** in the
    left-hand menu.'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击左侧菜单中的**资源组**来访问`Vaultmonitoring`资源组。
- en: Click on the already-provisioned Azure Automation account, `MonitoringKeyVault`.
    Then, click on **Runbooks** in the left-hand menu, and click on **+Add a Runbook**
    from the top menu.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击已配置好的 Azure Automation 帐户`MonitoringKeyVault`，然后在左侧菜单中点击**Runbooks**，再点击顶部菜单中的**+添加
    Runbook**。
- en: Click on **Create a new Runbook** and provide a name. Let's call this runbook
    **CheckExpiredAssets**, and then set **Runbook type** to **PowerShell**:![Creating
    a Runbook and giving the Runbook name as CheckExpiredAssets, and Runbook type
    as PowerShell.](img/Figure_11.18.jpg)
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建新 Runbook**并提供一个名称。我们将这个 Runbook 命名为**CheckExpiredAssets**，然后将**Runbook
    类型**设置为**PowerShell**：![创建 Runbook，并将 Runbook 名称设置为 CheckExpiredAssets，Runbook
    类型设置为 PowerShell。](img/Figure_11.18.jpg)
- en: 'Figure 11.18: Creating a runbook'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11.18：创建 Runbook
- en: '`AutomationCertifcate`. The values are retrieved from these stores and are
    assigned to the variables, as shown next:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`AutomationCertifcate`。这些值会从这些存储中获取并赋给变量，如下所示：'
- en: '[PRE16]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The next code within the runbook helps to log into Azure using the service
    principal with values from the variables declared previously. Also, the code selects
    an appropriate subscription. The code is shown next:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Runbook 中的下一段代码帮助使用之前声明的变量中的值，通过服务主体登录到 Azure。同时，代码还会选择一个合适的订阅。代码如下所示：
- en: '[PRE17]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Since Azure Event Grid was provisioned in *step 6* of this section, its endpoint
    and keys are retrieved using the `Get-AzEventGridTopic` and `Get-AzEventGridTopicKey`
    cmdlets.
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于 Azure Event Grid 已在本节的*步骤 6*中进行了配置，因此可以使用`Get-AzEventGridTopic`和`Get-AzEventGridTopicKey`
    cmdlet来检索其端点和密钥。
- en: 'Azure Event Grid generates two keys—a primary and a secondary. The first key
    reference is taken as follows:'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Azure Event Grid 会生成两个密钥——一个主密钥和一个辅助密钥。第一个密钥的引用如下：
- en: '[PRE18]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Next, all key vaults that were provisioned within the subscription are retrieved
    using iteration. While looping, all secrets are retrieved using the `Get-AzKeyVaultSecret`
    cmdlet.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用迭代检索订阅中所有已配置的密钥库。在循环过程中，使用`Get-AzKeyVaultSecret` cmdlet检索所有机密。
- en: The expiry date of each secret is compared to the current date, and if the difference
    is less than a month, it generates an Event Grid event and publishes it using
    the `invoke-webrequest` command.
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个机密的过期日期与当前日期进行比较，如果差异小于一个月，则生成一个Event Grid事件，并使用`invoke-webrequest`命令发布。
- en: The same steps are executed for certificates stored within the key vault. The
    cmdlet used to retrieve all the certificates is `Get-AzKeyVaultCertificate`.
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于存储在密钥库中的证书，执行相同的步骤。用于检索所有证书的cmdlet是`Get-AzKeyVaultCertificate`。
- en: The event that is published to Event Grid should be in the JSON array. The generated
    message is converted to JSON using the `ConvertTo-Json` cmdlet and then converted
    to an array by adding `[` and `]` as a prefix and suffix.
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 发布到Event Grid的事件应为JSON数组。生成的消息通过`ConvertTo-Json` cmdlet转换为JSON，然后通过添加`[`和`]`作为前缀和后缀转换为数组。
- en: 'In order to connect to Azure Event Grid and publish the event, the sender should
    supply the key in its header. The request will fail if this data is missing in
    the request payload:'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了连接到Azure Event Grid并发布事件，发送方应在其请求头中提供密钥。如果请求负载中缺少此数据，请求将失败：
- en: '[PRE19]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Publish the runbook by clicking on the **Publish** button, as shown in *Figure
    11.19*:![The Runbook is published and the script is displayed on the screen in
    the portal.](img/Figure_11.19.jpg)
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**发布**按钮发布运行手册，如*图11.19*所示：![运行手册已发布，脚本在门户中显示。](img/Figure_11.19.jpg)
- en: 'Figure 11.19: Publishing the runbook'
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图11.19：发布运行手册
- en: '**Scheduler**: Create an Azure Automation scheduler asset to execute this runbook
    once every day at 12.00 AM. Click on **Schedules** from the left-hand menu of
    Azure Automation and click on **+Add a schedule** in the top menu.'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**调度器**：创建一个Azure Automation调度器资产，使此运行手册每天在午夜12:00执行一次。点击Azure Automation左侧菜单中的**调度**，然后在顶部菜单中点击**+添加调度**。'
- en: Provide scheduling information in the resulting form.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在生成的表单中提供调度信息。
- en: This should conclude the configuration of the Azure Automation account.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该完成Azure Automation帐户的配置。
- en: '**Step 8: Working with SendGrid**'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤8：与SendGrid合作**'
- en: 'In this step, we will be creating a new SendGrid resource. The SendGrid resource
    is used to send emails from the application without needing to install a **Simple
    Mail Transfer Protocol (SMTP)** server. It provides a REST API and a C# **Software
    Development Kit (SDK)**, by means of which it is quite easy to send bulk emails.
    In the current solution, Azure Functions will be used to invoke the SendGrid APIs
    to send emails, and so this resource needs to be provisioned. This resource has
    separate costing and is not covered as part of the Azure cost—there is a free
    tier available that can be used for sending emails:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在本步骤中，我们将创建一个新的SendGrid资源。SendGrid资源用于从应用程序发送电子邮件，而无需安装**简单邮件传输协议（SMTP）**服务器。它提供一个REST
    API和一个C# **软件开发工具包（SDK）**，通过这些工具，发送批量电子邮件变得非常容易。在当前的解决方案中，将使用Azure Functions来调用SendGrid
    API发送电子邮件，因此需要配置此资源。该资源有单独的费用，并不包括在Azure成本中—可以使用一个免费的层级来发送电子邮件：
- en: A `SendGrid` resource is created just like any other Azure resource. Search
    for `sendgrid`, and we will get **SendGrid Email Delivery** in the results.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SendGrid`资源的创建方式与其他Azure资源相同。搜索`sendgrid`，我们将在结果中看到**SendGrid电子邮件投递**。'
- en: Select the resource and click on the **Create** button to open its configuration
    form.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择资源并点击**创建**按钮以打开其配置表单。
- en: Select an appropriate pricing tier.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个合适的定价层。
- en: Provide the appropriate contact details.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供适当的联系信息。
- en: Tick the **Terms of use** check box.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 勾选**使用条款**复选框。
- en: Complete the form and then click on the **Create** button.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成表单后，点击**创建**按钮。
- en: After the resource is provisioned, click on the **Manage** button in the top
    menu—this will open the SendGrid website. The website may request email configuration.
    Then, select **API Keys** from the **Settings** section and click on the **Create
    API Key** button:![The API Keys window displaying the message “Get started creating
    API Keys”.](img/Figure_11.20.jpg)
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在资源配置后，点击顶部菜单中的**管理**按钮—这将打开SendGrid网站。网站可能会请求进行电子邮件配置。然后，从**设置**部分选择**API密钥**，并点击**创建API密钥**按钮：![API密钥窗口显示消息“开始创建API密钥”。](img/Figure_11.20.jpg)
- en: 'Figure 11.20: Creating API keys for SendGrid'
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图11.20：为SendGrid创建API密钥
- en: From the resulting window, select **Full Access** and click on the **Create
    & View** button. This will create the key for the SendGrid resource; keep a note
    of this key, as it will be used with the Azure Functions configuration for SendGrid:![The
    ‘Create API Key’ pane displaying the option for API key permissions as Full Access,
    Restricted Access, and Billing Access; of which we select the Full Access option.](img/Figure_11.21.jpg)
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出的窗口中，选择**Full Access**并点击**Create & View**按钮。这将为SendGrid资源创建密钥；请记下此密钥，因为它将在Azure
    Functions配置中与SendGrid一起使用：![“创建API密钥”窗格显示了API密钥权限选项，包括完全访问、受限访问和计费访问，我们选择了完全访问选项。](img/Figure_11.21.jpg)
- en: 'Figure 11.21: Setting up the access level in the SendGrid portal'
  id: totrans-209
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图11.21：在SendGrid门户中设置访问级别
- en: Now that we have configured access levels for SendGrid, let's configure another
    third-party service, which is called Twilio.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置好了SendGrid的访问级别，接下来让我们配置另一个第三方服务，即Twilio。
- en: '**Step 9: Getting started with Twilio**'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 9：开始使用Twilio**'
- en: 'In this step, we will be creating a new Twilio account. Twilio is used for
    sending bulk SMS messages. To create an account with Twilio, navigate to [twilio.com](http://twilio.com)
    and create a new account. After successfully creating an account, a mobile number
    is generated that can be used to send SMS messages to receivers:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在此步骤中，我们将创建一个新的Twilio帐户。Twilio用于发送批量短信。要在Twilio上创建帐户，请导航到[twilio.com](http://twilio.com)并创建一个新帐户。成功创建帐户后，会生成一个可以用来向接收者发送短信的手机号码：
- en: '![Choosing the first Twilio number.](img/Figure_11.22.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![选择第一个Twilio号码。](img/Figure_11.22.jpg)'
- en: 'Figure 11.22: Choosing a Twilio number'
  id: totrans-214
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图11.22：选择Twilio号码
- en: 'The Twilio account provides both production and test keys. Copy the test key
    and token to a temporary location, such as Notepad, as they will be required later
    within Azure Functions:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: Twilio帐户提供生产和测试密钥。将测试密钥和令牌复制到临时位置（例如记事本），因为稍后在Azure Functions中将需要它们：
- en: '![The Twilio account dashboard displaying project info such as Trial Balance,
    Trial number, Account SID, and Auth token.](img/Figure_11.23.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![Twilio账户仪表盘显示了项目信息，如试用余额、试用号码、帐户SID和身份验证令牌。](img/Figure_11.23.jpg)'
- en: 'Figure 11.23: Setting up Twilio'
  id: totrans-217
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图11.23：设置Twilio
- en: We have SendGrid and Twilio in place for the notification service; however,
    we need something that can take the event and notify the users. Here comes the
    role of a function app. In the next section, we will be creating a function app
    that will help with sending SMS and emails.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为通知服务配置好了SendGrid和Twilio；然而，我们还需要一些东西来接收事件并通知用户。这就是功能应用程序的作用。在接下来的部分中，我们将创建一个功能应用程序，它将有助于发送短信和电子邮件。
- en: '**Step 10: Setting up a function app**'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 10：设置功能应用程序**'
- en: 'In this step, we will be creating a new function app responsible for sending
    emails and SMS notifications. The purpose of the function app within the solution
    is to send notification messages to users regarding the expiry of secrets in the
    key vault. A single function will be responsible for sending both emails and SMS
    messages—note that this could have been divided into two separate functions. The
    first step is to create a new function app and host a function within it:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在此步骤中，我们将创建一个新的功能应用程序，用于发送电子邮件和短信通知。功能应用程序在解决方案中的作用是向用户发送关于密钥库中机密到期的通知消息。一个功能将负责发送电子邮件和短信消息——请注意，这本可以分成两个独立的功能。第一步是创建一个新的功能应用程序，并在其中托管一个功能：
- en: As we have done before, navigate to your resource group, click on the `function
    app` resource. Then, click on the **Create** button to get the **Function App**
    form.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如我们之前所做，导航到资源组，点击`function app`资源。然后点击**Create**按钮以获取**Function App**表单。
- en: Fill in the **Function App** form and click on the **Create** button. The name
    of the function app must be unique across Azure.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写**Function App**表单并点击**Create**按钮。功能应用程序的名称必须在Azure中是唯一的。
- en: Once the function app is provisioned, create a new function called `SMSandEMailFunction`
    by clicking on the **+** button next to the **Functions** item in the left-hand
    menu. Then, select **In-portal** from the central dashboard.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦功能应用程序被配置好，点击左侧菜单中**Functions**项目旁的**+**按钮，创建一个名为`SMSandEMailFunction`的新功能。然后，在中央仪表盘中选择**In-portal**。
- en: Select `SMSandEMailFunction`. Then, click on the **Create** button—the **Authorization
    level** option can be any value.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`SMSandEMailFunction`。然后点击**Create**按钮——**Authorization level**选项可以是任何值。
- en: 'Remove the default code, replace it with the code shown in the following listing,
    and then click on the **Save** button in the top menu:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除默认代码，替换为以下清单中显示的代码，然后点击顶部菜单中的**保存**按钮：
- en: '[PRE20]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Click on the function app name in the left-hand menu and click again on the
    **Application settings** link in the main window:![Navigating to the NotificationFunctionAppBook
    pane and then selecting the Application settings option.](img/Figure_11.24.jpg)
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧菜单中的函数应用名称，然后再次点击主窗口中的**应用程序设置**链接：![导航到 NotificationFunctionAppBook 面板，然后选择应用程序设置选项。](img/Figure_11.24.jpg)
- en: 'Figure 11.24: Navigating to Application settings'
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11.24：导航到应用程序设置
- en: Navigate to the `adminPhone` and `servicePhone` should already be configured
    on the Twilio website. `servicePhone` is the phone number generated by Twilio
    that is used for sending SMS messages, and `adminPhone` is the phone number of
    the administrator to whom the SMS should be sent.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`adminPhone`和`servicePhone`，这两个号码应该已经在Twilio网站上配置。`servicePhone`是由Twilio生成的用于发送短信的电话号码，`adminPhone`是管理员的电话号码，短信将发送到该号码。
- en: Also note that Twilio expects the destination phone number to be in a particular
    format depending on the country (for India, the format is `+91 xxxxx xxxxx`).
    Note the spaces and country code in the number.
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还要注意，Twilio要求目标电话号码根据国家/地区采用特定格式（例如，印度的格式是`+91 xxxxx xxxxx`）。请注意号码中的空格和国家代码。
- en: 'We also need to add the keys for both SendGrid and Twilio within the application
    settings. These settings are mentioned in the following list. You may already
    have these values handy because of activities performed in earlier steps:'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还需要在应用程序设置中添加SendGrid和Twilio的密钥。这些设置在以下清单中提到。你可能已经通过之前的步骤获取了这些值：
- en: The value of `SendGridAPIKeyAsAppSetting` is the key for SendGrid.
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SendGridAPIKeyAsAppSetting`的值是SendGrid的密钥。'
- en: '`TwilioAccountSid` is the system identifier for the Twilio account. This value
    was already copied and stored in a temporary location in *Step 9: Getting started
    with Twilio*.'
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TwilioAccountSid`是Twilio账户的系统标识符。该值已在*步骤 9：开始使用Twilio*中复制并存储在临时位置。'
- en: '`TwilioAuthToken` is the token for the Twilio account. This value was already
    copied and stored in a temporary place in an earlier step.'
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TwilioAuthToken`是Twilio账户的令牌。该值已在之前的步骤中复制并存储在临时位置。'
- en: Save the settings by clicking on the **Save** button in the top menu:![The App
    settings pane displaying the App setting name and the value for it.](img/Figure_11.25.jpg)
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击顶部菜单中的**保存**按钮保存设置：![显示应用程序设置名称及其值的应用程序设置面板。](img/Figure_11.25.jpg)
- en: 'Figure 11.25: Configuring application settings'
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11.25：配置应用程序设置
- en: Click on the **Integrate** link in the left-hand menu just below the name of
    the function, and click on **+ New Output**. This is to add an output for the
    SendGrid service:![Adding output to the function app.](img/Figure_11.26.jpg)
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧菜单中函数名称下方的**集成**链接，然后点击**+ 新输出**。这是为了为SendGrid服务添加输出：![向函数应用添加输出。](img/Figure_11.26.jpg)
- en: 'Figure 11.26: Adding an output to the function app'
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11.26：向函数应用添加输出
- en: Next, select **SendGrid**; it might ask you to install the SendGrid extension.
    Install the extension, which will take a couple of minutes:![Configuring the function
    app by selecting the SendGrid option.](img/Figure_11.27.jpg)
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择**SendGrid**；系统可能会要求你安装SendGrid扩展。安装扩展，这可能需要几分钟：![通过选择SendGrid选项来配置函数应用。](img/Figure_11.27.jpg)
- en: 'Figure 11.27: Configuring a function app'
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11.27：配置函数应用
- en: After installing the extension, the output configuration form appears. The important
    configuration items in this form are **Message parameter name** and **SendGrid
    API Key App Setting**. Leave the default value for **Message parameter name**
    and click on the drop-down list to select **SendGridAPIKeyAsAppSetting** as the
    API app setting key. This was already configured in a previous step within the
    app settings configuration. The form should be configured as shown in *Figure
    11.28*, and then you need to click on the **Save** button:![Setting up the SendGrid
    output by adding values in fields such as Message parameter name, To address,
    From address, and so on.](img/Figure_11.28.jpg)
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装扩展后，输出配置表单将出现。表单中的重要配置项是**消息参数名称**和**SendGrid API 密钥应用设置**。保持**消息参数名称**的默认值，然后点击下拉列表选择**SendGridAPIKeyAsAppSetting**作为API应用设置密钥。该配置已在应用设置配置的前一步中完成。表单应按*图
    11.28*所示进行配置，然后点击**保存**按钮：![通过在字段中添加消息参数名称、收件人地址、发件人地址等值来设置SendGrid输出。](img/Figure_11.28.jpg)
- en: 'Figure 11.28: Setting up SendGrid'
  id: totrans-242
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11.28：设置 SendGrid
- en: Click on **+ New Output** again; this is to add an output for the Twilio service.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击**+ 新建输出**；这是为了为 Twilio 服务添加输出。
- en: Then, select **Twilio SMS**. It might ask you to install the Twilio SMS extension.
    Install the extension, which will take a couple of minutes.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，选择**Twilio SMS**。系统可能会提示你安装Twilio SMS扩展。安装该扩展，安装过程大约需要几分钟。
- en: After installing the extension, the output configuration form appears. The important
    configuration items in this form are `sms`. This is done because the `message`
    parameter is already used for the SendGrid service parameter. Ensure that the
    value of `TwilioAccountSid` and that the value of **Auth Token setting** is **TwilioAuthToken**.
    These values were already configured in a previous step of the app settings configuration.
    The form should be configured as shown in *Figure 11.29*, and then you should
    click on **Save**:![Setting up Twilio SMS output.](img/Figure_11.29.jpg)
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装扩展后，输出配置表单会出现。此表单中的重要配置项是`sms`。这样做是因为`message`参数已经被用于 SendGrid 服务参数。确保`TwilioAccountSid`的值以及**Auth
    Token 设置**的值是**TwilioAuthToken**。这些值在应用设置配置的前一个步骤中已经配置过了。该表单应该按*图 11.29*的示例进行配置，然后点击**保存**：![设置
    Twilio SMS 输出。](img/Figure_11.29.jpg)
- en: 'Figure 11.29: Setting up Twilio SMS output'
  id: totrans-246
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11.29：设置 Twilio SMS 输出
- en: Our SendGrid and Twilio accounts are ready. Now it's time to use the connectors
    and add them to the logic app. In the next part, we will create the logic app
    and will use connectors to work with the resources we have created so far.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 SendGrid 和 Twilio 账户已准备好。现在是时候使用连接器并将其添加到逻辑应用中。在接下来的部分，我们将创建逻辑应用，并使用连接器与我们迄今为止创建的资源进行交互。
- en: '**Step 11: Creating a logic app**'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 11：创建逻辑应用**'
- en: 'In this step, we will be creating a new logic app workflow. We have authored
    an Azure Automation runbook that queries all the secrets in all key vaults and
    publishes an event if it finds any of them expiring within a month. The logic
    app''s workflow acts as a subscriber to these events:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在此步骤中，我们将创建一个新的逻辑应用工作流。我们已经编写了一个 Azure 自动化运行簿，它查询所有密钥保管库中的密钥，并在发现其中任何密钥将在一个月内到期时发布事件。逻辑应用的工作流作为这些事件的订阅者：
- en: The first step within the **Logic App** menu is to create a logic app workflow.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**逻辑应用**菜单中的第一步是创建一个逻辑应用工作流。'
- en: Fill in the resultant form after clicking on the **Create** button. We are provisioning
    the logic app in the same resource group as the other resources for this solution.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**按钮后填写弹出的表单。我们正在将逻辑应用配置到与该解决方案其他资源相同的资源组中。
- en: After the logic app is provisioned, it opens the designer window. Select **Blank
    Logic App** from the **Templates** section.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在逻辑应用被配置后，它将打开设计器窗口。请选择**空白逻辑应用**，该选项位于**模板**部分。
- en: In the resultant window, add a trigger that can subscribe to Event Grid. Logic
    Apps provides a trigger for Event Grid, and you can search for this to see whether
    it's available.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出的窗口中，添加一个可以订阅 Event Grid 的触发器。逻辑应用提供了一个 Event Grid 触发器，你可以搜索它以查看是否可用。
- en: Next, select the **When a resource event occurs (preview)** trigger:![In the
    Azure Event Grid pane, selecting a trigger from the Event Grid.](img/Figure_11.30.jpg)
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择**当资源事件发生时（预览）**触发器：![在 Azure Event Grid 窗格中，从 Event Grid 选择触发器。](img/Figure_11.30.jpg)
- en: 'Figure 11.30: Selecting a trigger from Event Grid'
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11.30：从 Event Grid 选择触发器
- en: In the resultant window, select **Connect with Service Principal**.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出的窗口中，选择**与服务主体连接**。
- en: 'Provide the service principal details, including the application ID (**Client
    ID**), tenant ID, and password. This trigger does not accept a service principal
    that authenticates with the certificate—it accepts a service principal only with
    a password. Create a new service principal at this stage that authenticates with
    a password (the steps for creating a service principal based on password authentication
    were covered earlier, in *step 2*) and use the details of the newly created service
    principal for Azure Event Grid configuration, as shown in *Figure 11.31*:'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提供服务主体详细信息，包括应用 ID（**客户端 ID**）、租户 ID 和密码。此触发器不接受使用证书进行身份验证的服务主体，它仅接受使用密码的服务主体。在此阶段创建一个使用密码进行身份验证的新服务主体（有关基于密码身份验证的服务主体创建步骤，请参考之前的*第2步*），并使用新创建的服务主体的详细信息进行
    Azure Event Grid 配置，如*图 11.31*所示：
- en: '![Adding the service principal details for the connection, such as Connection
    Name, Client ID, Client Secret, and Tenant.](img/Figure_11.31.jpg)'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![添加连接的服务主体详细信息，例如连接名称、客户端 ID、客户端密钥和租户。](img/Figure_11.31.jpg)'
- en: 'Figure 11.31: Providing the service principal details for connection'
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11.31：提供服务主体的连接详细信息
- en: Select the subscription. Based on the scope of the service principal, this will
    get auto-filled. Select **Microsoft.EventGrid.Topics** as the **Resource Type**
    value and set the name of the custom topic as **ExpiredAssetsKeyVaultEvents**:![On
    the ‘When a resource event occurs (preview)’ pane, adding Event Grid trigger details
    such as Subscription, Resource type, Resource Name, and so on.](img/Figure_11.32.jpg)
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择订阅。根据服务主体的范围，相关内容会自动填充。选择**Microsoft.EventGrid.Topics**作为**资源类型**值，并将自定义主题的名称设置为**ExpiredAssetsKeyVaultEvents**:![在“当资源事件发生时（预览）”面板中，添加事件网格触发器的详细信息，例如订阅、资源类型、资源名称等。](img/Figure_11.32.jpg)
- en: 'Figure 11.32: Providing Event Grid trigger details'
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11.32：提供事件网格触发器详细信息
- en: The previous step will create a connector, and the connection information can
    be changed by clicking on **Change connection**.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上一步将创建一个连接器，连接信息可以通过点击**更改连接**来修改。
- en: The final configuration of the Event Grid trigger should be similar to *Figure
    11.33*:![The ‘When a resource event occurs (preview)’ pane displaying the final
    overview of the Event Grid trigger.](img/Figure_11.33.jpg)
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 事件网格触发器的最终配置应类似于*图 11.33*：![“当资源事件发生时（预览）”面板显示事件网格触发器的最终概览。](img/Figure_11.33.jpg)
- en: 'Figure 11.33: Event Grid trigger overview'
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11.33：事件网格触发器概览
- en: Add a new **Parse JSON** activity after the Event Grid trigger—this activity
    needs the JSON schema. Generally, the schema is not available, but this activity
    helps generate the schema if valid JSON is provided to it:![The Parse JSON activity
    showing the Content as Data object and the schema as JSON script.](img/Figure_11.34.jpg)
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在事件网格触发器后添加一个新的**解析 JSON**活动——此活动需要 JSON 架构。通常，架构不可用，但如果提供有效的 JSON，它会帮助生成架构：![解析
    JSON 活动，显示内容为数据对象，架构为 JSON 脚本。](img/Figure_11.34.jpg)
- en: 'Figure 11.34: Parse JSON activity'
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11.34：解析 JSON 活动
- en: 'Click on **Use sample payload to generate schema** and provide the following
    data:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**使用示例负载生成架构**并提供以下数据：
- en: '[PRE21]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'A question might arise here regarding the sample payload. At this stage, how
    do you calculate the payload that''s generated by the Event Grid publisher? The
    answer to this lies in the fact that this sample payload is exactly the same as
    is used in the data element in the Azure Automation runbook. You can take a look
    at that code snippet again:'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里可能会有一个问题，关于示例负载。在此阶段，如何计算事件网格发布者生成的负载？答案在于这个示例负载与在 Azure 自动化运行簿中数据元素所使用的完全相同。你可以再次查看那个代码片段：
- en: '[PRE22]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The **Content** box should contain dynamic content coming out from the previous
    trigger, as demonstrated in *Figure 11.35*:![Providing dynamic content to the
    Parse JSON activity.](img/Figure_11.35.jpg)
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**内容**框应包含来自先前触发器的动态内容，如*图 11.35*所示：![将动态内容提供给解析 JSON 活动。](img/Figure_11.35.jpg)'
- en: 'Figure 11.35: Providing dynamic content to the Parse JSON activity'
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11.35：将动态内容提供给解析 JSON 活动
- en: Add another **Azure Functions** action after **Parse JSON**, and then select
    **Choose an Azure function**. Select the Azure function apps called **NotificationFunctionAppBook**
    and **SMSAndEmailFunction**, which were created earlier:![In the Choose action
    pane, entering the keywords ‘Azure function’ in the search box and then selecting
    the Azure Functions action.](img/Figure_11.36.jpg)
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**解析 JSON**后添加另一个**Azure Functions**操作，然后选择**选择 Azure 函数**。选择先前创建的名为**NotificationFunctionAppBook**和**SMSAndEmailFunction**的
    Azure 函数应用：![在选择操作面板中，输入关键字“Azure function”并在搜索框中选择 Azure Functions 操作。](img/Figure_11.36.jpg)
- en: 'Figure 11.36: Adding an Azure Functions action'
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11.36：添加 Azure Functions 操作
- en: 'Click on the **Request Body** text area and fill it with the following code.
    This is done to convert the data into JSON before sending it to the Azure function:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**请求正文**文本区域，并用以下代码填充它。这是为了在将数据发送到 Azure 函数之前将其转换为 JSON：
- en: '[PRE23]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Place the cursor after the `":"` in the preceding code and click on **Add dynamic
    content | Body** from the previous activity:![Converting data to JSON before sending
    it to an Azure function.](img/Figure_11.37.jpg)
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将光标放在前述代码中的`":"`后，点击**添加动态内容 | 正文**，从先前的活动中获取：![在将数据发送到 Azure 函数之前将数据转换为 JSON。](img/Figure_11.37.jpg)
- en: 'Figure 11.37: Converting data to JSON before sending it to an Azure function'
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11.37：在将数据发送到 Azure 函数之前将数据转换为 JSON
- en: Save the entire logic app; it should look as follows:![The Logic App workflow
    displayed in the widget, showing the action flow from when the resource event
    occured, to the Parse JSON action, and finally, reaching the SMSandEmailFunction
    action.](img/Figure_11.38.jpg)
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存整个逻辑应用程序，它应如下所示：![在小部件中显示的逻辑应用程序工作流，展示从资源事件发生到 Parse JSON 操作，再到最终触发 SMSandEmailFunction
    操作的流程。](img/Figure_11.38.jpg)
- en: 'Figure 11.38: Logic app workflow'
  id: totrans-280
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11.38：逻辑应用程序工作流
- en: Once you save the logic app, your solution is ready to be tested. If you don't
    have any keys or secrets, try adding them with an expiry date so that you can
    confirm whether your solution is working.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦保存了逻辑应用程序，您的解决方案就准备好进行测试。如果没有密钥或机密，请尝试添加具有过期日期的密钥或机密，以便您可以确认解决方案是否正常工作。
- en: Testing
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试
- en: Upload some secrets and certificates that have expiry dates to Azure Key Vault
    and execute the Azure Automation runbook. The runbook is scheduled to run on a
    schedule. Additionally, the runbook will publish events to Event Grid. The logic
    app should be enabled, and it will pick the event and finally invoke the Azure
    function to send email and SMS notifications.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 将一些具有过期日期的机密和证书上传到 Azure Key Vault，并执行 Azure 自动化运行簿。该运行簿已安排按计划运行。此外，运行簿还将向 Event
    Grid 发布事件。逻辑应用程序应启用，它会捕捉到事件，并最终调用 Azure 函数以发送电子邮件和短信通知。
- en: 'The email should look as follows:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 电子邮件应如下所示：
- en: '![A widget showing that the email has been received regarding the expiring
    keys and the header reads “Key Vault Assets Expiring Soon…”](img/Figure_11.39.jpg)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![小部件显示关于即将过期密钥的电子邮件，标题为“密钥保管库资产即将过期……”](img/Figure_11.39.jpg)'
- en: 'Figure 11.39: Email received regarding the expiring keys'
  id: totrans-286
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 11.39：关于即将过期密钥的电子邮件
- en: In this exercise, we had a problem, we architected a solution, and we implemented
    it. This is exactly what happens in the role of an architect. Customers will have
    specific requirements and, based on those, you must develop a solution. On that
    note, we are concluding this chapter. Let's do a quick recap of what we have discussed.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在本练习中，我们遇到了一个问题，设计了一个解决方案并加以实施。这正是架构师角色中会发生的事情。客户会提出具体的需求，基于这些需求，您必须开发解决方案。基于此，我们即将结束本章内容。让我们快速回顾一下我们讨论过的内容。
- en: Summary
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter introduced Logic Apps and demonstrated a complete end-to-end solution
    using multiple Azure services. The chapter focused heavily on creating an architecture
    that integrated multiple Azure services to create an end-to-end solution. The
    services used in the solution were Azure Automation, Azure Logic Apps, Azure Event
    Grid, Azure Functions, SendGrid, and Twilio. These services were implemented through
    the Azure portal and PowerShell using service principals as service accounts.
    The chapter also showed a number of ways of creating service principals with password
    and certificate authentication.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了逻辑应用程序，并展示了使用多个 Azure 服务的完整端到端解决方案。本章重点介绍了创建集成多个 Azure 服务的架构，以实现端到端解决方案。解决方案中使用的服务包括
    Azure 自动化、Azure 逻辑应用程序、Azure 事件网格、Azure 函数、SendGrid 和 Twilio。这些服务通过 Azure 门户和
    PowerShell 实现，并使用服务主体作为服务帐户。本章还展示了多种使用密码和证书身份验证创建服务主体的方法。
- en: A solution to a problem can be found in multiple ways. You could use an Outlook
    trigger in a logic app instead of SendGrid. There will be many solutions to a
    problem—the one to go with depends on what approach you are taking. The more familiar
    you are with the services, the greater the number of options you will have. In
    the next chapter, you will learn about the importance of events in both Azure
    and Azure application architecture.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 解决问题的方法有多种。您可以在逻辑应用程序中使用 Outlook 触发器，而不是 SendGrid。一个问题有许多解决方案，选择哪一种取决于您采取的方案。您对服务越熟悉，选择的余地就越大。在下一章中，您将学习到事件在
    Azure 和 Azure 应用程序架构中的重要性。
