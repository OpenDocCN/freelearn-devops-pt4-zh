- en: 'Chapter 5:'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 第5章：
- en: Running Quality Tests in a Build Pipeline
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在构建管道中运行质量测试
- en: In the previous chapter, we introduced Azure Pipelines and learned how to implement
    a CI/CD process using Azure DevOps, GitHub, and containers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们介绍了Azure Pipelines，并学习了如何使用Azure DevOps、GitHub和容器实现CI/CD流程。
- en: In this chapter, we are going to cover how to run quality tests in a build pipeline.
    We will begin by explaining what the benefits of automatic testing are. Then,
    we will look at how to run unit tests in a build pipeline, how to perform code
    coverage testing, and how to view the test results. Finally, we will cover how
    to use Feature Flags to test code in production.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讲解如何在构建管道中运行质量测试。我们将首先解释自动化测试的好处。接着，我们将探讨如何在构建管道中运行单元测试，如何进行代码覆盖测试，以及如何查看测试结果。最后，我们将介绍如何使用特性标志在生产环境中测试代码。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Benefits of automatic testing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化测试的好处
- en: Introduction to unit testing
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试介绍
- en: Running unit tests in a build pipeline
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在构建管道中运行单元测试
- en: Introduction to code coverage testing
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码覆盖测试介绍
- en: Performing code coverage testing
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行代码覆盖测试
- en: Assigning test results to work items
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将测试结果分配给工作项
- en: Introduction to Feature Flags
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特性标志介绍
- en: Using Feature Flags to test in production
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用特性标志在生产环境中测试
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow this chapter, you need to have an active Azure DevOps organization.
    The organization that will be used in this chapter is called the Parts Unlimited
    organization. It was created in [*Chapter 1*](B16392_01_Final_JM_ePub.xhtml#_idTextAnchor027)*,
    Azure DevOps Overview*. You also need to have Visual Studio 2019 installed, which
    can be downloaded from [https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/).
    For the latest demo, you will need Visual Studio Code with the C# extension installed
    and the .NET Core SDK, version 3.1 or later.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章内容，您需要有一个活跃的Azure DevOps组织。本章将使用的组织名为Parts Unlimited组织，它是在[*第1章*](B16392_01_Final_JM_ePub.xhtml#_idTextAnchor027)*，Azure
    DevOps概述*中创建的。您还需要安装Visual Studio 2019，可以从[https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/)下载。为了获得最新的演示，您需要安装Visual
    Studio Code并配置C#扩展，以及安装.NET Core SDK版本3.1或更高版本。
- en: 'The source code for our sample application can be downloaded from the following
    link:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例应用程序的源代码可以从以下链接下载：
- en: '[https://github.com/PacktPublishing/Learning-Azure-DevOps---B16392/tree/master/Chapter%205/RazorFeatureFlags](https://github.com/PacktPublishing/Learning-Azure-DevOps---B16392/tree/master/Chapter%205/RazorFeatureFlags)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Learning-Azure-DevOps---B16392/tree/master/Chapter%205/RazorFeatureFlags](https://github.com/PacktPublishing/Learning-Azure-DevOps---B16392/tree/master/Chapter%205/RazorFeatureFlags)'
- en: Benefits of automatic testing
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化测试的好处
- en: After adding a new feature to your application, you want to know if it will
    work correctly, given all the possible interactions. You also don't want to break
    any other features with this new functionality and want to know if the code is
    easily understood by others, as well as being maintainable.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在为应用程序添加新功能后，您希望知道它是否能够在所有可能的交互情况下正确运行。您还希望确保这个新功能不会破坏其他功能，并希望知道代码是否容易理解且可维护。
- en: All of this can be tested manually. But as the project and code base grows over
    time, testing all these features manually can become repetitive and error-prone.
    This is where automatic testing comes in.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都可以手动测试。但是随着项目和代码库的不断增长，手动测试所有这些功能可能会变得重复且容易出错。这时，自动化测试就显得至关重要。
- en: There has always been a great deal of controversy around automatic testing.
    Many people believe that testing is too expensive to create and maintain. This
    is indeed true when tests are created badly. But when automatic tests are created
    properly, it will absolutely lower the amount of time and costs compared to frequent
    manual testing or releasing poor-quality software. Using automatic testing, your
    project will benefit from the ability to release software more frequently. It
    can be reused and run repeatedly, delivering faster results and feedback to the
    team. The earlier a bug is detected, the more cost-effective it is to fix it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 关于自动化测试一直存在许多争议。很多人认为测试创建和维护成本过高。的确，当测试创建不当时，这种观点是成立的。但如果自动化测试得当，它将大大降低与频繁手动测试或发布低质量软件相比的时间和成本。通过使用自动化测试，您的项目将能够更频繁地发布软件。它可以重复使用并反复运行，为团队提供更快的结果和反馈。问题越早被发现，修复的成本就越低。
- en: In conjunction with CI, where the code is automatically pushed into production,
    automatic testing will protect teams from releasing bugs into their software.
    However, there is a trade-off. Developers need to dedicate more time to writing
    and maintaining test code. However, by investing this extra time, the outcome
    will be higher quality code, and code that has been proven to function completely
    as expected.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 与 CI 配合使用时，代码会自动推送到生产环境，自动测试将帮助团队避免在软件中发布漏洞。然而，这也有权衡。开发人员需要投入更多时间来编写和维护测试代码。然而，通过投入这额外的时间，最终的结果将是更高质量的代码，并且这些代码已经经过验证，能够完全按预期运行。
- en: There are different types of automated testing you can perform; for instance,
    you can run regression, acceptance, and security tests. In this chapter, we are
    going to focus on **development testing**, which is also used in CI and can be
    done directly from the build pipeline.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以执行不同类型的自动化测试；例如，你可以运行回归测试、验收测试和安全性测试。在本章中，我们将重点介绍**开发测试**，这也是 CI 中使用的，可以直接从构建流水线中完成。
- en: Visual Studio and Azure DevOps both offer features for testing. They are test
    framework-agnostic, so you can plug in your own framework and bring third-party
    tools as well. You can easily add test adapters in order to run the tests and
    explore the results. This can make testing part of your daily software build process.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 和 Azure DevOps 都提供了测试功能。它们与测试框架无关，因此你可以插入自己的框架并引入第三方工具。你可以轻松地添加测试适配器以便运行测试并查看结果。这可以使测试成为你日常软件构建过程的一部分。
- en: In the upcoming sections, we will cover unit testing and code coverage testing,
    which is part of development testing. First, we will describe how to run an automatic
    unit test from a build pipeline, and then how to perform code coverage and UI
    tests from a build pipeline.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将介绍单元测试和代码覆盖率测试，这些都是开发测试的一部分。首先，我们将描述如何从构建流水线中运行自动单元测试，然后介绍如何从构建流水线中进行代码覆盖率测试和
    UI 测试。
- en: Introduction to unit testing
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试简介
- en: With unit testing, you break up code into small pieces, called units, that can
    be tested independently from each other. These units can consist of classes, methods,
    or single lines of code. The smaller the better works best here. This will give
    you a better view of how your code is performing and allows tests to be run fast.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用单元测试，你将代码拆分成小块，称为单元，这些单元可以独立地进行测试。这些单元可以是类、方法或单行代码。这里越小越好。这样可以让你更好地了解代码的表现，并且测试可以快速运行。
- en: 'In most cases, unit tests are written by the developer that writes the code.
    There are two different ways of writing unit tests: before you write the actual
    production code, or after. Most programmers write it afterwards, which is the
    traditional way of doing things, but if you are using **test-driven development**
    (**TDD**), you will typically write them beforehand. Unit testing will also make
    code documentation easier. It encourages better coding practices and you can leave
    code pieces to describe the code''s functionality behind. Here, you will focus
    more on updating a system of checks.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，单元测试是由编写代码的开发人员来编写的。编写单元测试有两种不同的方式：在编写实际的生产代码之前，或者之后。大多数程序员是在事后编写的，这是一种传统的做法，但如果你使用的是**测试驱动开发**（**TDD**），你通常会在之前编写单元测试。单元测试还可以使代码文档变得更容易。它鼓励更好的编码实践，你可以在代码中留下描述代码功能的部分。这里，你将更多地关注更新检查系统。
- en: In the next section, we are going to cover how to run unit tests in a build
    pipeline.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将介绍如何在构建流水线中运行单元测试。
- en: Running unit tests in a build pipeline
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在构建流水线中运行单元测试
- en: Our **Parts Unlimited** test project already has unit tests created. So, this
    is a good pick for this demo. First, we are going to look at the application and
    the tests that are created. Therefore, we have to clone the repository to our
    local filesystem and open the solution in Visual Studio.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的**Parts Unlimited**测试项目已经创建了单元测试。因此，这是进行演示的一个好选择。首先，我们将查看应用程序和已创建的测试。因此，我们需要将仓库克隆到本地文件系统并在
    Visual Studio 中打开解决方案。
- en: Downloading the source code
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载源代码
- en: 'We are going to create unit tests for the web application for Parts Unlimited.
    First, we need to clone the repository from Azure DevOps to our filesystem. This
    will allow us to add the unit tests to it using Visual Studio Code. Therefore,
    we must take the following steps:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为 Parts Unlimited 的 Web 应用程序创建单元测试。首先，我们需要将仓库从 Azure DevOps 克隆到本地文件系统。这将允许我们使用
    Visual Studio Code 添加单元测试。因此，我们必须执行以下步骤：
- en: Open a web browser and navigate to [https://dev.azure.com/](https://dev.azure.com/).
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开网页浏览器，访问 [https://dev.azure.com/](https://dev.azure.com/)。
- en: Log in with your Microsoft account and select the **Parts.Unlimited** project.
    Then, from the left menu, select **Repos**. This will let you navigate to the
    source code of the project.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的 Microsoft 帐户登录并选择**Parts.Unlimited**项目。然后，从左侧菜单中选择**Repos**。这样您就可以导航到项目的源代码。
- en: From the top-right menu, select **Clone**:![Figure 5.1 – Search result
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从右上角菜单中，选择**克隆**：![图 5.1 – 搜索结果
- en: '](img/B16392_05_001.jpg)'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_05_001.jpg)'
- en: Figure 5.1 – Search result
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.1 – 搜索结果
- en: On the next screen, make sure that **Clone in Visual Studio** is selected and
    click the button shown as follows:![Figure 5.2 – Clone repository
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，确保选择了**在 Visual Studio 中克隆**，然后点击如下所示的按钮：![图 5.2 – 克隆仓库
- en: '](img/B16392_05_002.jpg)'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_05_002.jpg)'
- en: Figure 5.2 – Clone repository
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.2 – 克隆仓库
- en: Now, Visual Studio will open. From here, we will take a brief look at the test
    classes that are already in the project. For this, open the **Solution Explorer**
    window and navigate to **test** > **PartsUnlimited.UnitTests**:![Figure 5.3 –
    Unit test project
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，Visual Studio 将会打开。在这里，我们将简要查看已经存在于项目中的测试类。为此，请打开**解决方案资源管理器**窗口，并导航至**test**
    > **PartsUnlimited.UnitTests**：![图 5.3 – 单元测试项目
- en: '](img/B16392_05_003.jpg)'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_05_003.jpg)'
- en: Figure 5.3 – Unit test project
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.3 – 单元测试项目
- en: There are different test projects available in this project. Take some time
    to become familiar with what is actually being tested. The default testing framework
    for Visual Studio is being used here, which is **MS Test**.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该项目中有不同的测试项目。花些时间熟悉一下实际测试的内容。这里使用的是 Visual Studio 的默认测试框架，即**MS Test**。
- en: From Visual Studio, you will be able to build and run the application. To do
    this, press *F5*. Alternatively, from the top menu, select **Debug** > **Start
    Debugging**:![Figure 5.4 – Unit test project
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中，您可以构建并运行应用程序。为此，请按*F5*。或者，从顶部菜单中选择**调试** > **开始调试**：![图 5.4
    – 单元测试项目
- en: '](img/B16392_05_004.jpg)'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_05_004.jpg)'
- en: Figure 5.4 – Unit test project
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.4 – 单元测试项目
- en: Once the project has been built, the website will look as follows:![Figure 5.5
    – Sample website
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦项目构建完成，网站将如下所示：![图 5.5 – 示例网站
- en: '](img/B16392_05_005.jpg)'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_05_005.jpg)'
- en: Figure 5.5 – Sample website
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.5 – 示例网站
- en: Go back to Visual Studio and stop the debugger.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Visual Studio 并停止调试器。
- en: Now that everything is working, we can start creating a build pipeline, which
    includes running the unit test projects.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切都已正常工作，我们可以开始创建构建管道，其中包括运行单元测试项目。
- en: Creating the pipeline
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建管道
- en: 'To create the pipeline, we need to go back to Azure DevOps. From there, follow
    these steps:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建管道，我们需要回到 Azure DevOps。在那里，按照以下步骤操作：
- en: From the left-hand menu, select **Pipelines**.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧菜单中，选择**管道（Pipelines）**。
- en: At the top-right of the screen, find and click **New pipeline**:![Figure 5.6
    – Creating a new pipeline
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕右上角，找到并点击**新建管道**：![图 5.6 – 创建新管道
- en: '](img/B16392_05_006.jpg)'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_05_006.jpg)'
- en: Figure 5.6 – Creating a new pipeline
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.6 – 创建新管道
- en: The wizard for creating a build pipeline will appear. On the first screen, select
    **Use the classic editor** to create a pipeline using the designer:![Figure 5.7
    – Use the classic designer option
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建构建管道的向导将会出现。在第一个屏幕上，选择**使用经典编辑器**，以使用设计器创建管道：![图 5.7 – 使用经典设计器选项
- en: '](img/B16392_05_007.jpg)'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_05_007.jpg)'
- en: Figure 5.7 – Use the classic designer option
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.7 – 使用经典设计器选项
- en: On the next screen, make sure that **Azure Repos Git** is selected. Keep the
    default settings as they are and click **Continue**:![Figure 5.8 – Pipeline source
    settings
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，确保选择了**Azure Repos Git**。保持默认设置不变，并点击**继续**：![图 5.8 – 管道源设置
- en: '](img/B16392_05_008.jpg)'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_05_008.jpg)'
- en: Figure 5.8 – Pipeline source settings
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.8 – 管道源设置
- en: Next, we need to select a template. Select **ASP.NET** from the overview and
    click **Apply**:![Figure 5.9 – Selecting the ASP.NET template
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要选择一个模板。从概览中选择**ASP.NET**，然后点击**应用**：![图 5.9 – 选择 ASP.NET 模板
- en: '](img/B16392_05_009.jpg)'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_05_009.jpg)'
- en: Figure 5.9 – Selecting the ASP.NET template
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.9 – 选择 ASP.NET 模板
- en: With that, the pipeline will be created. Various tasks are added to the pipeline
    by default. We are going to use these tasks here. For this demo, we are going
    to focus on the **Test Assemblies** task. Click on this task and make sure that
    version **2** is selected. Under **Test selection**, you will see the following
    settings:![Figure 5.10 – Test selection settings
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这样，流水线就会创建完成。默认情况下，流水线会添加各种任务。我们将在这里使用这些任务。在本次演示中，我们将重点关注**测试程序集**任务。点击此任务并确保选择版本**2**。在**测试选择**下，您将看到以下设置：![图
    5.10 – 测试选择设置
- en: '](img/B16392_05_010.jpg)'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_05_010.jpg)'
- en: Figure 5.10 – Test selection settings
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.10 – 测试选择设置
- en: By default, **Test assemblies** will be selected under **Select tests using**.
    Keep that selected. Since we want to run our unit tests automatically, this is
    the option we need to choose. Unit tests are usually stored inside an assembly.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，在**选择测试方式**下会选择**测试程序集**。请保持选择此项。由于我们希望自动运行单元测试，这是我们需要选择的选项。单元测试通常存储在程序集内部。
- en: Also, by default, there are some assemblies already filled in. You can make
    changes to them if needed. For this demo, we will keep the default settings as
    they are because the task looks for assemblies in different folders that have
    `test` in them. Our test project is called **PartsUnlimited.UnitTests**, so this
    will be picked up by the task.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，默认情况下，已经填充了一些程序集。如果需要，您可以更改它们。在本次演示中，我们将保持默认设置不变，因为任务会在不同的文件夹中查找包含`test`的程序集。我们的测试项目名为**PartsUnlimited.UnitTests**，所以任务会自动找到该程序集。
- en: The search folder is the folder that's used to search for test assemblies. In
    this case, this is the default working directory.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索文件夹是用来搜索测试程序集的文件夹。在这种情况下，这是默认的工作目录。
- en: The **test results** folder is where test results are stored. The results directory
    will always be cleaned before the tests are run.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**测试结果**文件夹是存储测试结果的地方。测试运行之前，结果目录将始终被清空。'
- en: We are now ready to run the test. Click on **Save & queue** from the top menu
    and then again on the **Save & queue** sub-menu item to execute the build pipeline:![Figure
    5.11 – Executing the build pipeline
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在准备运行测试。点击顶部菜单中的**保存并排队**，然后再次点击**保存并排队**子菜单项以执行构建流水线：![图 5.11 – 执行构建流水线
- en: '](img/B16392_05_011.jpg)'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_05_011.jpg)'
- en: Figure 5.11 – Executing the build pipeline
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.11 – 执行构建流水线
- en: The wizard for running the pipeline will open. Here, you can specify a comment
    and then select an **Agent Pool**, **Agent Specification**, and which **Branch/tag**
    you would like to use:![Figure 5.12 – Parameters for running a pipeline
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行流水线的向导将打开。在这里，您可以指定一个评论，然后选择**代理池**、**代理规范**以及您希望使用的**分支/标签**：![图 5.12 – 运行流水线的参数
- en: '](img/B16392_05_012.jpg)'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_05_012.jpg)'
- en: Figure 5.12 – Parameters for running a pipeline
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.12 – 运行流水线的参数
- en: Click **Save and run** to queue the pipeline.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存并运行**以排队流水线。
- en: 'The overview page of the job will be displayed, which is where you can view
    the status of the execution:'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将显示作业的概览页面，在这里您可以查看执行状态：
- en: '![Figure 5.13 – Overview of our jobs'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 5.13 – 我们的作业概览'
- en: '](img/B16392_05_013.jpg)'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_05_013.jpg)'
- en: Figure 5.13 – Overview of our jobs
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.13 – 我们的作业概览
- en: After a couple of minutes, the pipeline will have completed. From the right-top
    menu, under **Tests and coverage**, you will be able to see the pass percentage
    for the tests for this build. You can click on this to navigate to the test results
    (alternatively, you can navigate to it by clicking **Tests** from the top-left
    menu:![Figure 5.14 – Tests overview
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 几分钟后，流水线将完成。从右上角的菜单中，点击**测试与覆盖率**，您将能够看到此构建的测试通过百分比。点击此处可查看测试结果（另外，您也可以通过点击左上角的**测试**菜单来查看：![图
    5.14 – 测试概览
- en: '](img/B16392_05_014.jpg)'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_05_014.jpg)'
- en: Figure 5.14 – Tests overview
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.14 – 测试概览
- en: On the **Tests** screen, you will see the number of tests you have, as well
    as the tests that passed and failed. You can also see the duration of the run
    from here.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**测试**页面，您将看到测试数量，以及通过和失败的测试。您还可以看到运行的持续时间。
- en: 'At the bottom of the screen, you can filter by specific tests. For instance,
    you can filter for tests that have been **Passed**, **Failed**, and **Aborted**:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕底部，您可以按特定的测试进行筛选。例如，您可以筛选出**通过**、**失败**和**中止**的测试：
- en: '![Figure 5.15 – Test results in more detail'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.15 – 更详细的测试结果'
- en: '](img/B16392_05_015.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_05_015.jpg)'
- en: Figure 5.15 – Test results in more detail
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.15 – 更详细的测试结果
- en: In this demonstration, we have created a build pipeline that includes automatic
    unit testing for our source code. In the next section, we are going to look at
    code coverage testing.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个演示中，我们创建了一个包含自动单元测试的构建管道，用于我们的源代码。在下一部分，我们将探讨代码覆盖率测试。
- en: Introduction to code coverage testing
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码覆盖率测试简介
- en: With code coverage testing, you can measure what source code for an application
    is going to be tested. Code coverage testing measures how many lines, blocks,
    and classes are executed while automated tests, such as unit tests, are running.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通过代码覆盖率测试，你可以衡量应用程序的哪些源代码将被测试。代码覆盖率测试衡量的是在运行自动化测试（如单元测试）时，执行了多少行代码、代码块和类。
- en: The more code that's tested, the more confident teams can be about their code
    changes. By reviewing the outcome of the code coverage tests, teams can identify
    what code is not covered by these tests. This information is very helpful as it
    reduces test debt over time.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 测试的代码越多，团队对其代码更改的信心就越大。通过查看代码覆盖率测试的结果，团队可以识别出哪些代码没有被这些测试覆盖。这些信息非常有用，因为它有助于随着时间推移减少测试负担。
- en: Azure DevOps supports code coverage testing from the build pipeline. The **Test
    Assemblies** task allows us to collect code coverage testing results. There is
    also a separate task, called **Publish Code Coverage Results**, that can also
    publish these results. This task offers out-of-the-box support for popular coverage
    results formats such as Cobertura and JaCoCo.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps 支持从构建管道执行代码覆盖率测试。**测试程序集**任务允许我们收集代码覆盖率测试结果。还有一个独立的任务，称为**发布代码覆盖率结果**，它也可以发布这些结果。该任务对流行的覆盖率结果格式（如
    Cobertura 和 JaCoCo）提供开箱即用的支持。
- en: Important Note
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Cobertura and JaCoCo are both Java tools that calculate the percentage of code
    that's accessed by tests. For more information about Cobertura, you can refer
    to [https://cobertura.github.io/cobertura/](https://cobertura.github.io/cobertura/).
    For more information about JaCoCo, you can refer to [https://www.eclemma.org/jacoco/](https://www.eclemma.org/jacoco/).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Cobertura 和 JaCoCo 都是计算测试访问的代码百分比的 Java 工具。有关 Cobertura 的更多信息，请参考 [https://cobertura.github.io/cobertura/](https://cobertura.github.io/cobertura/)。有关
    JaCoCo 的更多信息，请参考 [https://www.eclemma.org/jacoco/](https://www.eclemma.org/jacoco/)。
- en: In the next section, we are going to look how to perform code coverage testing
    by using Azure DevOps.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，我们将讨论如何使用 Azure DevOps 执行代码覆盖率测试。
- en: Performing code coverage testing
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行代码覆盖率测试
- en: 'To perform code coverage testing, we need to open the build pipeline that we
    created in the previous demo. Let''s get started:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行代码覆盖率测试，我们需要打开在前一演示中创建的构建管道。让我们开始吧：
- en: With the build pipeline open, select the **Edit** button in the right-hand corner:![Figure
    5.16 – Editing the pipeline from the previous demo
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开构建管道后，选择右上角的**编辑**按钮：![图 5.16 – 编辑前一演示中的管道
- en: '](img/B16392_05_016.jpg)'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_05_016.jpg)'
- en: Figure 5.16 – Editing the pipeline from the previous demo
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.16 – 编辑前一演示中的管道
- en: Navigate to the **Test Assemblies** task to open the settings.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**测试程序集**任务以打开设置。
- en: 'Under **Execution** settings, check the **Code coverage enabled** box:'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在**执行**设置中，勾选**启用代码覆盖率**框：
- en: '![Figure 5.17 – Enabling code coverage testing'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 5.17 – 启用代码覆盖率测试'
- en: '](img/B16392_05_017.jpg)'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_05_017.jpg)'
- en: Figure 5.17 – Enabling code coverage testing
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.17 – 启用代码覆盖率测试
- en: Now, `.coverage` files that can be downloaded and used for further analysis
    in Visual Studio.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，`.coverage` 文件可以下载并用于在 Visual Studio 中进行进一步分析。
- en: After executing the pipeline, on the overview page of the build, select `.coverage`
    extension will be downloaded to your local filesystem.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行管道后，在构建概览页面上，选择`.coverage` 扩展名将被下载到你的本地文件系统。
- en: 'Double-click the downloaded file so that it opens in Visual Studio. From here,
    you can drill down into the different classes and methods to get an overview of
    the test results:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击下载的文件，这样它会在 Visual Studio 中打开。从这里，你可以深入查看不同的类和方法，获取测试结果的概览：
- en: '![Figure 5.18 – Code coverage testing results in Visual Studio](img/B16392_05_018.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.18 – Visual Studio 中的代码覆盖率测试结果](img/B16392_05_018.jpg)'
- en: Figure 5.18 – Code coverage testing results in Visual Studio
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.18 – Visual Studio 中的代码覆盖率测试结果
- en: In this demonstration, we enabled code coverage testing from our build pipeline.
    In the next section, we are going to assign these test results to the User Stories.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个演示中，我们从构建管道启用了代码覆盖率测试。在下一部分，我们将把这些测试结果分配到用户故事中。
- en: Assigning test results to work items
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将测试结果分配到工作项
- en: 'Once the test has run automatically and the build process has finished, you
    can assign the results to work items that have been added to the backlog and sprint.
    For this, you must perform the following steps:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦测试自动运行并且构建过程完成，你可以将结果分配给已添加到待办事项和冲刺中的工作项。为此，你需要执行以下步骤：
- en: Go back to the build pipeline and select the pipeline that ran last. Click **Test**
    from the top menu.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回构建流水线，选择上次运行的流水线。在顶部菜单中点击**测试**。
- en: For the results table, make sure that **Passed** is selected and that **Failed**
    and **Aborted** have been deselected:![Figure 5.19 – Selecting all the passed
    tests
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于结果表格，确保选中了**已通过**，并且**已失败**和**已中止**已被取消选择：![图 5.19 – 选择所有通过的测试
- en: '](img/B16392_05_019.jpg)'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_05_019.jpg)'
- en: Figure 5.19 – Selecting all the passed tests
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.19 – 选择所有通过的测试
- en: Then, select a couple of tests. After doing this, from the top menu, click **Link**:![Figure
    5.20 – Linking the items
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，选择几个测试。完成后，在顶部菜单中点击**链接**：![图 5.20 – 链接项目
- en: '](img/B16392_05_020.jpg)'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_05_020.jpg)'
- en: Figure 5.20 – Linking the items
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.20 – 链接项目
- en: Search for `As a tester` and select the work item that is displayed as a search
    result:![Figure 5.21 – Selecting the work item
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索`作为测试人员`并选择显示为搜索结果的工作项：![图 5.21 – 选择工作项
- en: '](img/B16392_05_021.jpg)'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_05_021.jpg)'
- en: Figure 5.21 – Selecting the work item
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.21 – 选择工作项
- en: Click **Associate** to link the work item to the test result.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**关联**以将工作项链接到测试结果。
- en: Now, click on one of the test results that's linked to the work item. This will
    show the details for this item. From here, you can click on **work items** from
    the top menu. This will display the work item that we linked in the previous step:![Figure
    5.22 – Linked work item
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击一个与工作项链接的测试结果。这将显示该项目的详细信息。在这里，你可以点击顶部菜单中的**工作项**，这将显示我们在前一步中链接的工作项：![图
    5.22 – 链接的工作项
- en: '](img/B16392_05_022.jpg)'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_05_022.jpg)'
- en: Figure 5.22 – Linked work item
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.22 – 链接的工作项
- en: By clicking on that work item, you can look at its details.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击该工作项，你可以查看它的详细信息。
- en: In this demonstration, we covered how to link test results to work items. In
    the next section, we are going to cover how to use Feature Flags to test in production.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示范中，我们讲解了如何将测试结果链接到工作项。在接下来的部分，我们将讲解如何使用功能标志在生产环境中进行测试。
- en: Introduction to Feature Flags
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能标志简介
- en: 'You can use a Feature Flag to turn features in your code, such as specific
    methods or sections in your code, on or off. This can be extremely helpful when
    you want to hide (disable) and expose (enable) features in a solution. Features
    that are not complete and ready for release yet can be hidden or exposed in the
    solution. This allows us to test code in production for a subset of users. You
    can enable the code for a subset of users, for instance, based on the login name
    of the user and let them test the features before releasing them to others. However,
    there is a drawback to Feature Flags: they introduce more complexity in your code,
    so it is better to constrain the number of toggles in your application.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用功能标志来打开或关闭代码中的功能，比如特定的方法或代码段。当你想在解决方案中隐藏（禁用）或公开（启用）某些功能时，这非常有帮助。尚未完成并准备发布的功能可以被隐藏或公开。这使得我们可以在生产环境中针对一部分用户进行代码测试。例如，你可以基于用户的登录名为一部分用户启用代码，并让他们在将功能发布给其他用户之前进行测试。然而，功能标志也有一个缺点：它们会增加代码的复杂性，因此最好限制应用程序中切换标志的数量。
- en: The recommended approach when creating Feature Flags is to keep them outside
    the application. For instance, a web or app configuration file is a good place
    to add Feature Flags because you can change them easily, without the need to redeploy
    the application again.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 创建功能标志时，推荐的方法是将它们保存在应用程序外部。例如，网页或应用配置文件是添加功能标志的好地方，因为你可以轻松更改它们，而无需重新部署应用程序。
- en: In the next section, we are going to implement a Feature Flag in a .NET Core
    solution.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将实现一个 .NET Core 解决方案中的功能标志（Feature Flag）。
- en: Using Feature Flags to test in production
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用功能标志在生产环境中进行测试
- en: In this demonstration, we are going to create a new .NET Core application in
    Visual Studio Code. Then, we are going to implement a Feature Flag for this application.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示范中，我们将创建一个新的 .NET Core 应用程序，在 Visual Studio Code 中进行开发。然后，我们将为此应用程序实现功能标志。
- en: We are going to add a very basic Feature Flag that changes the welcome message
    from *Welcome* to *Welcome to Learn Azure DevOps*. This is only going to be tested
    by a subset of users. Therefore, we need to open `Razor` application with .NET
    Core. I have created a new folder on my local filesystem called `FeatureFlags`
    for this. Open this folder in Visual Studio Code. Check the next section for the
    detailed steps.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加一个非常基本的功能标志，将欢迎信息从*Welcome*更改为*Welcome to Learn Azure DevOps*。这将仅对一部分用户进行测试。因此，我们需要打开带有.NET
    Core的`Razor`应用程序。我在本地文件系统中创建了一个名为`FeatureFlags`的新文件夹用于此目的。在Visual Studio Code中打开该文件夹。有关详细步骤，请查看下一部分。
- en: Creating a new .NET Core application
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个新的.NET Core应用程序
- en: 'To create a new .NET Core application, follow these steps:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的.NET Core应用程序，请按照以下步骤操作：
- en: With **Visual Studio Code** open, click on **Terminal** > **New terminal** from
    the top menu.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Visual Studio Code**打开时，从顶部菜单中点击**终端** > **新终端**。
- en: 'In the Terminal, add the following line of code to create a new project:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中，添加以下代码行以创建一个新项目：
- en: '[PRE0]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The newly created project will now open. Open the Terminal once more and add
    the following line of code to test the project:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新创建的项目现在将打开。再次打开终端，并将以下代码行添加到终端中测试项目：
- en: '[PRE1]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The output of running this code will look as follows:'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运行此代码的输出如下所示：
- en: '![Figure 5.23 – Output in the Terminal'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 5.23 – 终端中的输出'
- en: '](img/B16392_05_023.jpg)'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_05_023.jpg)'
- en: Figure 5.23 – Output in the Terminal
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.23 – 终端中的输出
- en: Navigate to the .NET Core application by clicking on one of the localhost URLs
    in the Terminal output. You will then see the following:![Figure 5.24 – Running
    the new project
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击终端输出中的本地主机URL之一，导航到.NET Core应用程序。您将看到以下内容：![图 5.24 – 运行新项目
- en: '](img/B16392_05_024.jpg)'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_05_024.jpg)'
- en: Figure 5.24 – Running the new project
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.24 – 运行新项目
- en: 'The next step is to add the `Microsoft.FeatureManagement` NuGet package to
    the project. Therefore, add the following line of code to the Terminal:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是将`Microsoft.FeatureManagement` NuGet包添加到项目中。因此，请将以下代码行添加到终端：
- en: '[PRE2]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once the package has been installed, open the `Program.cs` class and add the
    following `using` statement:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完该包后，打开`Program.cs`类，并添加以下`using`语句：
- en: '[PRE3]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, open the `appsettings.json` file. We are going create a `FeatureManagement`
    section in this file. Replace the code inside the file with the following:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开`appsettings.json`文件。我们将在此文件中创建一个`FeatureManagement`部分。将文件中的代码替换为以下内容：
- en: '[PRE4]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, open the `Startup.cs` class. Here, add the `using` statement again and
    add the following to the `ConfigureServices` method:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，打开`Startup.cs`类。在这里，再次添加`using`语句，并将以下内容添加到`ConfigureServices`方法中：
- en: '[PRE5]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, we can inject this into a controller, for instance. Open the code behind
    the home page of the application, which can be found in the `Index.cshtml.cs`
    file, and add the `using` statement again. Then, replace the `IndexModel` class
    with the following code:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以将其注入到一个控制器中。例如，打开应用程序首页背后的代码，代码可以在`Index.cshtml.cs`文件中找到，并再次添加`using`语句。然后，将`IndexModel`类替换为以下代码：
- en: '[PRE6]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `Index.cshtml.cs` class will look as follows:![Figure 5.25 – Overview of
    the Index.cshtml.cs file
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Index.cshtml.cs`类将如下所示：![图 5.25 – `Index.cshtml.cs`文件概览'
- en: '](img/B16392_05_025.jpg)'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_05_025.jpg)'
- en: Figure 5.25 – Overview of the Index.cshtml.cs file
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.25 – `Index.cshtml.cs`文件概览
- en: 'Finally, open the `Index.cshtml` file and replace the code inside it with the
    following:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，打开`Index.cshtml`文件，并用以下内容替换其中的代码：
- en: '[PRE7]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will inject the welcome message into the web page.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将把欢迎信息注入到网页中。
- en: 'Build and run the code by opening a new Terminal window and adding the following
    line of code to the Terminal:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过打开一个新的终端窗口并将以下代码行添加到终端来构建并运行代码：
- en: '[PRE8]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let the application open in the browser and open the `appsettings.json` file
    again in Visual Studio Code. Change the `ChangeBanner` Feature Flag to **true**
    and reload the website in your browser by pressing *F5*. This will result in the
    following output:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让应用程序在浏览器中打开，然后再次在Visual Studio Code中打开`appsettings.json`文件。将`ChangeBanner`功能标志更改为**true**，然后通过按*F5*重新加载浏览器中的网站。这样将会得到以下输出：
- en: '![Figure 5.26 – Welcome message changed based on the Feature Flag provided'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.26 – 基于提供的功能标志更改的欢迎信息'
- en: '](img/B16392_05_026.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_05_026.jpg)'
- en: Figure 5.26 – Welcome message changed based on the Feature Flag provided
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.26 – 基于提供的功能标志更改的欢迎信息
- en: In this demonstration, we added some Feature Flags to our application using
    the `Featuremanagement` NuGet package of Microsoft. Using these Feature Flags,
    we changed the welcome message for the home page of the application. This concludes
    this chapter.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个演示中，我们使用 Microsoft 的 `Featuremanagement` NuGet 包向我们的应用程序添加了一些功能标志（Feature
    Flags）。通过这些功能标志，我们更改了应用程序首页的欢迎信息。本章到此结束。
- en: Summary
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we covered how to run quality tests in a build pipeline in
    more depth. With this, you can now run unit tests from the build pipeline and
    execute coverage tests from Azure DevOps. Lastly, we covered how to create Future
    Flags inside an application that you can use in your future projects as well.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们更深入地讨论了如何在构建管道中运行质量测试。通过这些，你现在可以从构建管道中运行单元测试，并从 Azure DevOps 执行覆盖率测试。最后，我们讲解了如何在应用程序中创建未来标志（Future
    Flags），这些标志可以在你的未来项目中使用。
- en: In the next chapter, we are going to focus on how to host build agents in Azure
    Pipelines.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将专注于如何在 Azure Pipelines 中托管构建代理。
- en: Further reading
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Check out the following links for more information about the topics that were
    covered in this chapter:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下链接以获取更多关于本章所涵盖主题的信息：
- en: 'Unit test basics: [https://docs.microsoft.com/en-us/visualstudio/test/unit-test-basics?view=vs-2019](https://docs.microsoft.com/en-us/visualstudio/test/unit-test-basics?view=vs-2019)'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试基础：[https://docs.microsoft.com/en-us/visualstudio/test/unit-test-basics?view=vs-2019](https://docs.microsoft.com/en-us/visualstudio/test/unit-test-basics?view=vs-2019)
- en: 'Run quality tests in your build pipeline by using Azure Pipelines: [https://docs.microsoft.com/en-us/learn/modules/run-quality-tests-build-pipeline/](https://docs.microsoft.com/en-us/learn/modules/run-quality-tests-build-pipeline/)'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用 Azure Pipelines 在你的构建管道中运行质量测试：[https://docs.microsoft.com/en-us/learn/modules/run-quality-tests-build-pipeline/](https://docs.microsoft.com/en-us/learn/modules/run-quality-tests-build-pipeline/)
- en: 'Explore how to progressively expose your features in production for some or
    all users: [https://docs.microsoft.com/en-us/azure/devops/migrate/phase-features-with-feature-flags?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/migrate/phase-features-with-feature-flags?view=azure-devops)'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索如何为部分或所有用户逐步在生产环境中暴露你的功能：[https://docs.microsoft.com/en-us/azure/devops/migrate/phase-features-with-feature-flags?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/migrate/phase-features-with-feature-flags?view=azure-devops)
