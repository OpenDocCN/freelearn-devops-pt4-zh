- en: 'Chapter 8:'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 第8章：
- en: Deploying Applications with Azure DevOps
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Azure DevOps部署应用程序
- en: In previous chapters, we saw how you can automate your development processes
    by using build pipelines for your code. But an important part of the software
    life cycle is also the release phase. In this chapter, we will cover an overview
    of release pipelines; we'll see how to create a release pipeline with Azure DevOps
    and how you can automate and improve the deployment of your solutions by using
    release approvals and multi-stage pipelines.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们看到如何通过使用构建流水线自动化代码的开发过程。但软件生命周期中一个重要的部分是发布阶段。在本章中，我们将介绍发布流水线的概述；我们将学习如何使用Azure
    DevOps创建发布流水线，以及如何通过使用发布审批和多阶段流水线自动化和改进解决方案的部署。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: An overview of release pipelines
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布流水线概述
- en: Creating a release pipeline with Azure DevOps
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Azure DevOps创建发布流水线
- en: Configuring continuous deployment on a release pipeline
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在发布流水线上配置持续部署
- en: Creating a multi-stage release pipeline
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建多阶段发布流水线
- en: Using approvals and gates for controlling your release process
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用审批和门控控制你的发布过程
- en: Using environments and deployment groups
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用环境和部署组
- en: Using YAML-based pipelines for release
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基于YAML的流水线进行发布
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow this chapter, you need to have an active Azure DevOps organization.
    The organization used in this chapter is the **PartsUnlimited** organization we
    created in [*Chapter 1*](B16392_01_Final_JM_ePub.xhtml#_idTextAnchor027), *Azure
    DevOps Overview*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章内容，你需要有一个有效的Azure DevOps组织。本章中使用的组织是我们在[*第1章*](B16392_01_Final_JM_ePub.xhtml#_idTextAnchor027)中创建的**PartsUnlimited**组织，*Azure
    DevOps概述*。
- en: An overview of release pipelines
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布流水线概述
- en: '**Release pipelines** permit you to implement the continuous delivery phase
    of a software life cycle. With a release pipeline, you can automate the process
    of testing and deliver your solutions (committed code) to the final environments
    or directly to the customer''s site (continuous delivery and continuous deployment).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**发布流水线**允许你实现软件生命周期中的持续交付阶段。通过发布流水线，你可以自动化测试过程，并将你的解决方案（提交的代码）交付到最终环境或直接交付到客户现场（持续交付和持续部署）。'
- en: With **continuous delivery**, you deliver code to a certain environment for
    testing or quality control, while **continuous deployment** is the phase where
    you release code to a final production environment.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通过**持续交付**，你将代码交付到某个环境进行测试或质量控制，而**持续部署**则是将代码发布到最终生产环境的阶段。
- en: A release pipeline can be triggered manually (you decide when you want to deploy
    your code) or it can be triggered according to events such as a code commit on
    the master branch, after the completion of a stage (for example, the production
    testing stage), or according to a schedule.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 发布流水线可以手动触发（你决定何时部署代码），也可以根据事件触发，如主分支上的代码提交、阶段完成后（例如，生产测试阶段），或根据计划触发。
- en: A release pipeline is normally connected to an **artifact store** (a deployable
    component for an application and output of a build). An artifact store contains
    a set of artifacts for a build (distinct artifact versions), and a release pipeline
    takes these artifacts and provisions the needed infrastructure and steps for deploying
    the artifacts.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 发布流水线通常连接到**工件存储**（应用程序的可部署组件和构建的输出）。工件存储包含一组构建的工件（不同版本的工件），而发布流水线则取这些工件并提供所需的基础设施和步骤来部署这些工件。
- en: A release pipeline (exactly as we saw in [*Chapter 4*](B16392_04_Final_JM_ePub.xhtml#_idTextAnchor096),
    *Understanding Azure DevOps Pipelines*, for the build pipeline definition) is
    composed of different stages (parts of the pipeline that can run independently),
    and each stage is composed of **jobs** and **tasks**.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 发布流水线（正如我们在[*第4章*](B16392_04_Final_JM_ePub.xhtml#_idTextAnchor096)中所看到的，*理解Azure
    DevOps流水线*，针对构建流水线定义）由不同的阶段（可以独立运行的流水线部分）组成，每个阶段由**作业**和**任务**组成。
- en: 'A schema of a release pipeline is as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 发布流水线的架构如下：
- en: '![](img/Figure_8.01_B16392.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_8.01_B16392.jpg)'
- en: Figure 8.1 – Release pipeline schema
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1 – 发布流水线架构
- en: As you can see in the preceding diagram, a release pipeline starts from artifacts
    (the output of a successfully completed build) and then moves between stages,
    executing jobs and tasks.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在上面的图示中看到的，发布流水线从工件（成功完成构建的输出）开始，然后在各个阶段之间移动，执行作业和任务。
- en: 'In Azure DevOps, a release pipeline is executed according to the following
    steps:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure DevOps 中，发布管道按以下步骤执行：
- en: When a deployment request is triggered, Azure Pipelines checks whether a pre-deployment
    approval phase is required and eventually sends approval notifications to the
    involved people in a team.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当触发部署请求时，Azure Pipelines 会检查是否需要预部署审批阶段，并最终将审批通知发送给团队中相关人员。
- en: When approved, the deployment job is queued and waits for an agent.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 经批准后，部署作业会排队并等待代理程序。
- en: An agent that is able to run this deployment job picks up the job.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 能够运行此部署作业的代理程序将获取该作业。
- en: The agent downloads the artifacts as specified in the release pipeline definition.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代理程序会下载发布管道定义中指定的工件。
- en: The agent runs the tasks defined in the deployment job and creates a log for
    each step.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代理程序运行部署作业中定义的任务，并为每个步骤创建日志。
- en: When the deployment for a stage is completed, Azure Pipelines executes a post-deployment
    approval (if present).
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当某个阶段的部署完成后，Azure Pipelines 会执行后部署审批（如果有的话）。
- en: The deployment then goes to the next stage.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后部署进入下一个阶段。
- en: 'In a release pipeline, an artifact is deployed to an **environment** (where
    your final application will run), and these environments can be the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布管道中，工件被部署到**环境**（你的最终应用将运行的地方），这些环境可以是以下几种：
- en: A machine on your corporate network
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你公司网络上的一台机器
- en: A virtual machine in the cloud
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云中的一台虚拟机
- en: A containerized environment, such as Docker or Kubernetes
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个容器化环境，例如 Docker 或 Kubernetes
- en: A managed service, such as Azure App Service
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种托管服务，例如 Azure 应用服务
- en: A serverless environment, such as Azure Functions
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无服务器环境，例如 Azure Functions
- en: A way to define an Azure Pipelines environment is with a YAML file, where you
    can include an environment section that specifies the Azure Pipelines environment
    where you'll deploy your artifact, or by using the classic UI-based editor
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 Azure Pipelines 环境的一种方式是使用 YAML 文件，你可以在其中包含一个环境部分，指定你将部署工件的 Azure Pipelines
    环境，或者使用经典的基于 UI 的编辑器
- en: In the next section, we'll see how to define a release pipeline with the Azure
    DevOps UI in detail.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将详细了解如何使用 Azure DevOps UI 定义发布管道。
- en: Creating a release pipeline with Azure DevOps
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Azure DevOps 创建发布管道
- en: The final goal for implementing a complete CI/CD process with DevOps is to automate
    the deployment of your software to a final environment (for example, the final
    customer), and to achieve this goal, you need to create a **release pipeline**.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 实现完整 CI/CD 流程的最终目标是自动化将软件部署到最终环境（例如，最终客户），为了实现这一目标，你需要创建一个**发布管道**。
- en: A release pipeline takes the build artifacts (the result of your build process)
    and deploys those artifacts to one or more final environments.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 发布管道将构建产物（构建过程的结果）部署到一个或多个最终环境。
- en: 'To create our first release pipeline, we''ll use the **PartsUnlimited** web
    application project previously deployed on Azure DevOps:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建我们的第一个发布管道，我们将使用之前在 Azure DevOps 上部署的**PartsUnlimited** Web 应用项目：
- en: To create a release pipeline with Azure DevOps, click on **Pipelines** on the
    left menu, select **Releases**, and then click on **New release pipeline**:![Figure
    8.2 – Creating a new release pipeline
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在 Azure DevOps 中创建发布管道，请点击左侧菜单中的**管道**，选择**发布**，然后点击**新建发布管道**:![图 8.2 – 创建新发布管道
- en: '](img/Figure_8.02_B16392.jpg)'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.02_B16392.jpg)'
- en: Figure 8.2 – Creating a new release pipeline
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.2 – 创建新发布管道
- en: In the **Select a template** list that appears on the right, you have a set
    of available templates for creating releases for different types of applications
    and platforms. For our application, select **Azure App Service deployment** and
    click **Apply**:![Figure 8.3 – Release pipeline template selection
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧出现的**选择模板**列表中，你可以看到一组可用模板，用于创建适用于不同类型应用和平台的发布。对于我们的应用，选择**Azure 应用服务部署**，然后点击**应用**:![图
    8.3 – 发布管道模板选择
- en: '](img/Figure_8.03_B16392.jpg)'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.03_B16392.jpg)'
- en: Figure 8.3 – Release pipeline template selection
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.3 – 发布管道模板选择
- en: Now, provide a name for the stage that will contain the release tasks. Here,
    I'm calling it `Deploy to cloud`:![Figure 8.4 – Stage name
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，为将包含发布任务的阶段提供一个名称。在这里，我将其命名为 `Deploy to cloud`:![图 8.4 – 阶段名称
- en: '](img/Figure_8.04_B16392.jpg)'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.04_B16392.jpg)'
- en: Figure 8.4 – Stage name
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.4 – 阶段名称
- en: 'In the **Stages** section, click on the **1 job, 1 task** link. Here, you need
    to provide the settings of the Azure web app environment where your application
    will be deployed, such as your Azure subscription and the App Service instance
    (web app) where the code will be deployed:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**阶段**部分，点击**1个任务，1个工作**链接。在这里，你需要提供你的应用程序将要部署的 Azure Web 应用环境的设置，例如 Azure
    订阅和应用服务实例（Web 应用），其中代码将被部署：
- en: '![Figure 8.5 – Stage settings'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.5 – 阶段设置'
- en: '](img/Figure_8.05_B16392.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.05_B16392.jpg)'
- en: Figure 8.5 – Stage settings
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5 – 阶段设置
- en: You have now defined the stage of your release pipeline (single-stage). In the
    next section, we'll see how to specify the artifacts for your release pipeline.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经定义了发布管道的阶段（单阶段）。在下一部分，我们将看到如何为发布管道指定工件。
- en: Defining artifacts for a release pipeline
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 定义发布管道的工件
- en: '**Artifacts** are all the items (output of a build) that must be deployed in
    your final environment, and Azure Pipelines can deploy artifacts that come from
    different artifact sources:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**工件**是所有必须部署到最终环境中的项目（构建的输出），Azure Pipelines 可以部署来自不同工件源的工件：'
- en: To select artifacts, on the main release pipeline screen, click on **Add an
    artifact**:![Figure 8.6 – Adding an artifact to a release pipeline
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要选择工件，在主发布管道屏幕上，点击**添加工件**：![图 8.6 – 向发布管道添加工件
- en: '](img/Figure_8.06_B16392.jpg)'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.06_B16392.jpg)'
- en: Figure 8.6 – Adding an artifact to a release pipeline
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.6 – 向发布管道添加工件
- en: In the **Add an artifact** panel, you have **Source type** automatically set
    to **Build** (this means that you're deploying the output of a build pipeline).
    Here, you need to select the build pipeline that you want to use as the source
    (the name or ID of the build pipeline that publishes the artifact; here, I'm using
    the **PartsUnlimitedE2E** build pipeline) and the default version (the default
    version will be deployed when new releases are created. The version can be changed
    for manually created releases at the time of release creation):![Figure 8.7 –
    Add an artifact
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**添加工件**面板中，**源类型**默认设置为**构建**（这意味着你正在部署构建管道的输出）。在这里，你需要选择你想作为源的构建管道（发布工件的构建管道的名称或
    ID；这里我使用的是**PartsUnlimitedE2E**构建管道）和默认版本（默认版本将在创建新发布时部署。对于手动创建的发布，版本可以在发布创建时更改）：![图
    8.7 – 添加工件
- en: '](img/Figure_8.07_B16392.jpg)'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.07_B16392.jpg)'
- en: Figure 8.7 – Add an artifact
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.7 – 添加工件
- en: 'Click on the **Add** button to save the artifact configuration, and then click
    on the **Save** button in the top-right corner to save your release pipeline:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮保存工件配置，然后点击右上角的**保存**按钮保存你的发布管道：
- en: '![Figure 8.8 – Saving a release pipeline'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.8 – 保存发布管道'
- en: '](img/Figure_8.08_B16392.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.08_B16392.jpg)'
- en: Figure 8.8 – Saving a release pipeline
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.8 – 保存发布管道
- en: Your release pipeline is now ready. In the next section, we'll see how to create
    the Azure DevOps release process.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你的发布管道现在已经准备就绪。在下一部分，我们将看到如何创建 Azure DevOps 发布过程。
- en: Creating the Azure DevOps release
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Azure DevOps 发布
- en: 'After defining our release pipeline (stages and artifacts), we need to create
    a **release**. A release is simply a run of your release pipeline:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义了发布管道（阶段和工件）之后，我们需要创建一个**发布**。发布只是运行你的发布管道的一次执行：
- en: To create a release, on the release pipeline definition page, click on the **Create
    release** button in the top-right corner:![Figure 8.9 – Creating a release
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建发布，在发布管道定义页面，点击右上角的**创建发布**按钮：![图 8.9 – 创建发布
- en: '](img/Figure_8.09_B16392.jpg)'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.09_B16392.jpg)'
- en: Figure 8.9 – Creating a release
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.9 – 创建发布
- en: On the **Create a new release** page, accept all the default values (you need
    to have a successfully completed build with artifacts created), and then click
    on **Create**:![Figure 8.10 – Creating a release
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**创建新发布**页面，接受所有默认值（你需要有一个成功完成的构建，且已创建工件），然后点击**创建**：![图 8.10 – 创建发布
- en: '](img/Figure_8.10_B16392.jpg)'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.10_B16392.jpg)'
- en: Figure 8.10 – Creating a release
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.10 – 创建发布
- en: A new release is now created, and you will see a green bar indicating that:![Figure
    8.11 – Release created
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个新的发布已创建，你会看到一个绿色的进度条，表示：![图 8.11 – 发布已创建
- en: '](img/Figure_8.11_B16392.jpg)'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.11_B16392.jpg)'
- en: Figure 8.11 – Release created
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.11 – 发布已创建
- en: Now, you can click on the release name (here, it is **Release-1**) and you will
    be redirected to the details of the release process:![Figure 8.12 – Release details
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以点击发布名称（这里是**Release-1**），你将被重定向到发布过程的详细信息：![图 8.12 – 发布详情
- en: '](img/Figure_8.12_B16392.jpg)'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.12_B16392.jpg)'
- en: Figure 8.12 – Release details
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.12 – 发布详情
- en: 'If you click on the stage, you can see the details of each step:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你点击阶段，你可以看到每个步骤的详细信息：
- en: '![Figure 8.13 – Details of the stage'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.13 – 阶段详细信息'
- en: '](img/Figure_8.13_B16392.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.13_B16392.jpg)'
- en: Figure 8.13 – Details of the stage
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.13 – 阶段详细信息
- en: You have completed your first release pipeline. Here, we have triggered it manually.
    In the next section, we'll see how to use variables in your pipeline.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经完成了第一个发布管道。在这里，我们手动触发了它。在下一部分，我们将看到如何在管道中使用变量。
- en: Using variables in a release pipeline
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在发布管道中使用变量
- en: 'In a release pipeline, you can also use variables and variable groups to specify
    variable parameters that can be used in your pipeline tasks. To specify a variable
    for your release pipeline, select the **Variables** tab and specify the name and
    value of your variable:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布管道中，你还可以使用变量和变量组来指定可以在管道任务中使用的变量参数。要为发布管道指定变量，选择**变量**选项卡并指定变量的名称和值：
- en: '![Figure 8.14 – Release pipeline variables'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.14 – 发布管道变量'
- en: '](img/Figure_8.14_B16392.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.14_B16392.jpg)'
- en: Figure 8.14 – Release pipeline variables
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.14 – 发布管道变量
- en: 'You can then use the variables in your pipeline''s tasks by using the `$(VariableName)`
    notation, as in the following screenshot:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以通过使用`$(VariableName)`符号在管道任务中使用这些变量，如下图所示：
- en: '![Figure 8.15 – Using a variable in a release pipeline task'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.15 – 在发布管道任务中使用变量'
- en: '](img/Figure_8.15_B16392.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.15_B16392.jpg)'
- en: Figure 8.15 – Using a variable in a release pipeline task
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.15 – 在发布管道任务中使用变量
- en: Using variables is recommended if you have parameters that change on your pipeline.
    In the next section, we'll see how to configure triggers for continuous deployment.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的管道中有会变化的参数，建议使用变量。在下一部分，我们将看到如何为持续部署配置触发器。
- en: Configuring the release pipeline triggers for continuous deployment
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置持续部署的发布管道触发器
- en: 'To automate the continuous deployment of your application, you need to configure
    triggers in your release pipeline definition:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了自动化你的应用程序的持续部署，你需要在发布管道定义中配置触发器：
- en: To do that, click on the **Continuous deployment trigger** icon in the pipeline's
    **Artifacts** section:![Figure 8.16 – Continuous deployment trigger
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要做到这一点，点击管道**工件**部分的**持续部署触发器**图标：![图 8.16 – 持续部署触发器
- en: '](img/Figure_8.16_B16392.jpg)'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.16_B16392.jpg)'
- en: Figure 8.16 – Continuous deployment trigger
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.16 – 持续部署触发器
- en: In the **Continuous deployment trigger** panel, enable it to automatically create
    a new release after every successfully completed build and select a branch filter
    (for example, the build pipeline's default branch):![Figure 8.17 – Continuous
    deployment trigger configuration
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**持续部署触发器**面板中，启用它以在每次成功完成构建后自动创建新版本，并选择一个分支过滤器（例如，构建管道的默认分支）：![图 8.17 – 持续部署触发器配置
- en: '](img/Figure_8.17_B16392.jpg)'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.17_B16392.jpg)'
- en: Figure 8.17 – Continuous deployment trigger configuration
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.17 – 持续部署触发器配置
- en: Now, in the **Stages** section, select the **Pre-deployment conditions** icon:![Figure
    8.18 – Pre-deployment conditions
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在**阶段**部分，选择**部署前条件**图标：![图 8.18 – 部署前条件
- en: '](img/Figure_8.18_B16392.jpg)'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.18_B16392.jpg)'
- en: Figure 8.18 – Pre-deployment conditions
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.18 – 部署前条件
- en: 'In the **Pre-deployment conditions** pane, check that the trigger for this
    stage is set to **After release** (this means that the deployment stage will start
    automatically when a new release is created from this pipeline):'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**部署前条件**面板中，检查此阶段的触发器是否设置为**发布后**（这意味着当从此管道创建新发布时，部署阶段将自动开始）：
- en: '![Figure 8.19 – Pre-deployment conditions definition'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.19 – 部署前条件定义'
- en: '](img/Figure_8.19_B16392.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.19_B16392.jpg)'
- en: Figure 8.19 – Pre-deployment conditions definition
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.19 – 部署前条件定义
- en: In this pane, you can also define other parameters, such as selecting artifact
    condition(s) to trigger a new deployment (a release will be deployed to this stage
    only if all the artifact conditions match), setting up a schedule for the deployment,
    allowing pull request-based releases to be deployed to this stage, selecting the
    users who can approve or reject deployments to this stage (pre-deployment approvals),
    defining gates to evaluate before deployment, and defining behavior when multiple
    releases are queued for deployment.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在此面板中，你还可以定义其他参数，例如选择触发新部署的工件条件（仅当所有工件条件匹配时，才会将发布部署到此阶段）、设置部署的时间表、允许基于拉取请求的发布部署到此阶段、选择可以批准或拒绝部署到此阶段的用户（预部署审批）、定义部署前需要评估的门控，并定义在多个发布排队等待部署时的行为。
- en: You have now created a release pipeline that takes your artifacts and deploys
    them to the cloud by using Azure DevOps and also by applying continuous deployment
    triggers and pre-deployment conditions checks.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经创建了一个发布管道，它将你的工件通过 Azure DevOps 部署到云，并应用了持续部署触发器和预部署条件检查。
- en: In the next section, we'll see how to improve our release pipeline by using
    multiple stages.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何通过使用多个阶段来改进我们的发布管道。
- en: Creating a multi-stage release pipeline
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个多阶段发布管道
- en: A multi-stage release pipeline is useful when you want to release your applications
    with multiple steps (staging), such as, for example, development, staging, and
    production. A quite common scenario in the real world is, for example, deploying
    an application initially to a testing environment. When tests are finished, the
    application is moved to a quality acceptance stage, and then, if the customer
    accepts the release, the application is moved to a production environment.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 多阶段发布管道在你想通过多个步骤（例如开发、预发布和生产）发布应用程序时非常有用。一个非常常见的实际场景是，例如，首先将应用程序部署到测试环境。当测试完成后，应用程序会移动到质量验收阶段，然后如果客户接受发布，应用程序会移动到生产环境。
- en: 'Here, we''ll do the same: starting from the previously created single-stage
    pipeline, we''ll create a new release pipeline with three stages, called **DEV**,
    **QA**, and **Production**. Each stage is a deployment target for our pipeline:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将做相同的事情：从之前创建的单阶段管道开始，我们将创建一个新的发布管道，包含三个阶段，分别为**DEV**、**QA**和**Production**。每个阶段都是我们管道的部署目标：
- en: In the previously defined pipeline, as a first step, I renamed the **Deploy
    to cloud** stage to **Production**. This will be the final stage of the release
    pipeline.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在之前定义的管道中，作为第一步，我将**部署到云**阶段重命名为**Production**。这将是发布管道的最终阶段。
- en: Now, click on the **Clone** action to clone the defined stage into a new stage:![Figure
    8.20 – Cloning a stage
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击**克隆**操作，将已定义的阶段克隆为一个新阶段：![图 8.20 – 克隆一个阶段](img/Figure_8.20_B16392.jpg)
- en: '](img/Figure_8.20_B16392.jpg)'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.20_B16392.jpg)'
- en: Figure 8.20 – Cloning a stage
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.20 – 克隆一个阶段
- en: A new cloned stage appears after the previously created stage. Change the name
    of this stage to `QA`:![Figure 8.21 – Cloned stage (QA)
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个新的克隆阶段出现在之前创建的阶段后面。将此阶段的名称更改为`QA`：![图 8.21 – 克隆的阶段（QA）](img/Figure_8.21_B16392.jpg)
- en: '](img/Figure_8.21_B16392.jpg)'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.21_B16392.jpg)'
- en: Figure 8.21 – Cloned stage (QA)
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.21 – 克隆的阶段（QA）
- en: Now, we need to reorganize the stages because the **QA** stage must occur before
    the **Production** stage. To reorganize these stages, select the **QA** stage
    and choose the pre-deployment conditions. In the **Pre-deployment conditions**
    pane, select **After release** as the trigger (instead of **After stage**):![Figure
    8.22 – Pre-deployment conditions for the QA stage
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要重新组织阶段，因为**QA**阶段必须在**Production**阶段之前执行。要重新组织这些阶段，请选择**QA**阶段并选择预部署条件。在**预部署条件**面板中，将触发器设置为**After
    release**（而不是**After stage**）：![图 8.22 – QA阶段的预部署条件](img/Figure_8.22_B16392.jpg)
- en: '](img/Figure_8.22_B16392.jpg)'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.22_B16392.jpg)'
- en: Figure 8.22 – Pre-deployment conditions for the QA stage
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.22 – QA 阶段的预部署条件
- en: As you can see, the pipeline diagram has now changed (you have the **QA** and
    **Production** stages executed in parallel). Now, select the **Pre-deployment
    conditions** properties for the **Production** stage; set the trigger to **After
    stage** and select **QA** as the stage:![Figure 8.23 – Pre-deployment conditions
    for the Production stage
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如你所见，管道图现在发生了变化（你现在有**QA**和**Production**阶段并行执行）。现在，选择**Production**阶段的**预部署条件**属性；将触发器设置为**After
    stage**，并选择**QA**作为阶段：![图 8.23 – Production阶段的预部署条件](img/Figure_8.23_B16392.jpg)
- en: '](img/Figure_8.23_B16392.jpg)'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.23_B16392.jpg)'
- en: Figure 8.23 – Pre-deployment conditions for the Production stage
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.23 – Production 阶段的预部署条件
- en: The stages are now ordered as we want (**QA** occurs before **Production**).
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，阶段已按我们想要的顺序排列（**QA** 发生在 **Production** 之前）。
- en: At this point, we have two stages that deploy the application to the same environment
    (**QA** was created as a clone of **Production**). Select the **QA** stage from
    the **Tasks** drop-down list and change **App service name** to a new instance:![Figure
    8.24 – QA stage details
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，我们有两个阶段将应用部署到相同的环境（**QA** 是作为 **Production** 的克隆创建的）。从 **Tasks** 下拉列表中选择
    **QA** 阶段，并将 **App service name** 更改为一个新实例：![Figure 8.24 – QA 阶段详情
- en: '](img/Figure_8.24_B16392.jpg)'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.24_B16392.jpg)'
- en: Figure 8.24 – QA stage details
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.24 – QA 阶段详情
- en: 'Now, we need to repeat the same steps for creating the **DEV** stage. Clone
    it from **QA**, set its **Pre-deployment conditions** properties with the trigger
    set to **After Release**, and change the **QA** trigger to **After stage**, with
    **DEV** as the selected stage. Your pipeline will now look as follows:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要重复相同的步骤来创建 **DEV** 阶段。从 **QA** 克隆它，设置其 **Pre-deployment conditions**
    属性，将触发器设置为 **After Release**，并将 **QA** 的触发器更改为 **After stage**，选择 **DEV** 作为所选阶段。你的流水线现在将如下所示：
- en: '![Figure 8.25 – Multi-stage release pipeline defined'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 8.25 – 定义的多阶段发布流水线'
- en: '](img/Figure_8.25_B16392.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.25_B16392.jpg)'
- en: cYou have now created a release pipeline with different stages (**Dev**, **QA**,
    and **Production**) for controlling the deployment steps of your code.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经创建了一个包含不同阶段（**Dev**、**QA** 和 **Production**）的发布流水线，用于控制代码的部署步骤。
- en: In the next section, we'll see how to add approvals for moving between stages.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，我们将看到如何在阶段之间移动时添加审批。
- en: Using approvals and gates for managing deployments
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用审批和门控来管理部署
- en: As previously configured, our release pipeline will move between stages only
    if the previous stage is completed successfully. This is okay for moving from
    **DEV** to **QA** because on this transition, our application is deployed to a
    testing environment, but the transition from **QA** to **Production** should usually
    be controlled because the release of an application into a production environment
    normally occurs after an approval.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述配置，我们的发布流水线只有在前一个阶段成功完成后才会移动到下一个阶段。这对于从 **DEV** 到 **QA** 的过渡是可以的，因为在这个过渡中，我们的应用程序被部署到测试环境，但从
    **QA** 到 **Production** 的过渡通常应该受到控制，因为应用程序发布到生产环境通常发生在审批之后。
- en: Creating approvals
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建审批
- en: 'Let''s follow these steps to create approvals:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤创建审批：
- en: To create an approval step, from our pipeline definition, select the **Pre-deployment
    conditions** properties of the **Production** stage. Here, go to the **Pre-deployment
    approvals** section and enable it. Then, in the **Approvers** section, select
    the users that will be responsible for approving. Please also check that the **The
    user requesting a release or deployment should not approve it** option is not
    ticked:![Figure 8.26 – Setting approvals
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建审批步骤，从我们的流水线定义中，选择 **Production** 阶段的 **Pre-deployment conditions** 属性。然后，进入
    **Pre-deployment approvals** 部分并启用它。接着，在 **Approvers** 部分，选择将负责审批的用户。请同时检查 **The
    user requesting a release or deployment should not approve it** 选项未被勾选：![Figure
    8.26 – 设置审批
- en: '](img/Figure_8.26_B16392.jpg)'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.26_B16392.jpg)'
- en: Figure 8.26 – Setting approvals
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.26 – 设置审批
- en: Click on **Save** to save your pipeline definition.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Save** 保存你的流水线定义。
- en: Now, create a new release to start our pipeline and click on the name of the
    created release (here, it is called **Release-2**):![Figure 8.27 – Multi-stage
    release triggered
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个新的发布以启动我们的流水线，并点击已创建发布的名称（这里叫做 **Release-2**）：![Figure 8.27 – 多阶段发布触发
- en: '](img/Figure_8.27_B16392.jpg)'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.27_B16392.jpg)'
- en: Figure 8.27 – Multi-stage release triggered
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.27 – 多阶段发布触发
- en: The release pipeline starts. The **DEV** and **QA** stages are completed, while
    on the **Production** stage, a **Pending approval** status appears:![Figure 8.28
    – Pending approval
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发布流水线启动。**DEV** 和 **QA** 阶段已完成，而在 **Production** 阶段，出现 **Pending approval**
    状态：![Figure 8.28 – 待批准
- en: '](img/Figure_8.28_B16392.jpg)'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.28_B16392.jpg)'
- en: Figure 8.28 – Pending approval
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.28 – 待批准
- en: The release pipeline is waiting for approval. You can click on the **Pending
    approval** icon and the approval dialog is opened. Here, you can insert a comment
    and then approve or reject the release:![Figure 8.29 – Approving a stage
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发布流水线正在等待审批。你可以点击 **Pending approval** 图标，打开审批对话框。在这里，你可以插入评论，然后批准或拒绝发布：![Figure
    8.29 – 批准阶段
- en: '](img/Figure_8.29_B16392.jpg)'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.29_B16392.jpg)'
- en: Figure 8.29 – Approving a stage
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.29 – 批准一个阶段
- en: You can also defer the stage to a specific date if needed or reassign the approval
    to another user.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，你还可以将该阶段推迟到特定日期，或将批准任务重新分配给其他用户。
- en: If you click on **Approve**, the stage is approved and the release pipeline
    is completed:![Figure 8.30 – Multi-stage pipeline completed
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你点击**批准**，该阶段将被批准，发布管道完成：![图 8.30 – 完成的多阶段管道
- en: '](img/Figure_8.30_B16392.jpg)'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.30_B16392.jpg)'
- en: Figure 8.30 – Multi-stage pipeline completed
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.30 – 完成的多阶段管道
- en: 'If you now click on the Azure App Service instance deployed by your pipeline,
    you can see that the final code (the **PartsUnlimited** website) is deployed in
    the cloud:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你现在点击由管道部署的 Azure 应用服务实例，你可以看到最终的代码（**PartsUnlimited** 网站）已部署到云端：
- en: '![Figure 8.31 – Web app deployed from the release pipeline'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '![图 8.31 – 从发布管道部署的 Web 应用程序'
- en: '](img/Figure_8.31_B16392.jpg)'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.31_B16392.jpg)'
- en: Figure 8.31 – Web app deployed from the release pipeline
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.31 – 从发布管道部署的 Web 应用程序
- en: Using gates to check conditions
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用网关检查条件
- en: In the previously explained scenario, we saw how to configure a manual approval
    process for a release pipeline. Sometimes, you need to avoid the manual process
    and instead have a policy in place that permits your pipeline to go ahead only
    if some checks are successfully performed. This is where **gates** come in action.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前讲解的场景中，我们了解了如何为发布管道配置手动批准过程。有时，你需要避免手动过程，而是设定一个策略，只有在某些检查成功执行后，管道才可以继续。这就是**网关**发挥作用的地方。
- en: In Azure Pipelines, a gate allows you to automatically check for specific conditions
    from Azure DevOps from external services and then enable the release process only
    when the conditions are met. You can use gates to check the status of work items
    and issues of a project and enable the release only if you have no open bugs.
    You can also query test results, check whether security scans on artifacts are
    performed before releasing, monitor the infrastructure health before releasing,
    and so on.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure Pipelines 中，网关允许你自动检查来自 Azure DevOps 或外部服务的特定条件，然后仅在满足这些条件时才启用发布过程。你可以使用网关来检查项目的工作项和问题状态，并仅在没有开放漏洞时启用发布。你还可以查询测试结果，检查在发布前是否执行了对构件的安全扫描，监控基础设施健康状况等。
- en: 'As an example, here we want to configure a gate for our previously created
    release pipeline where we check for open bugs on Azure Boards. We will see how
    to do this with the help of the following steps:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，在这里我们希望为之前创建的发布管道配置一个网关，以便检查 Azure Boards 上的开放漏洞。我们将通过以下步骤来完成此操作：
- en: Important note
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If there are open bugs, the release pipeline cannot go ahead.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有开放漏洞，发布管道无法继续执行。
- en: To check for open bugs in our project, we need to define a query for work items.
    From our Azure DevOps project, select **Boards**, click on **Queries**, and then
    select **New query**:![Figure 8.32 – Cresting a new query for the gate conditions
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查我们项目中的开放漏洞，我们需要为工作项定义一个查询。从我们的 Azure DevOps 项目中，选择**Boards**，点击**查询**，然后选择**新查询**：![图
    8.32 – 为网关条件创建新查询
- en: '](img/Figure_8.32_B16392.jpg)'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.32_B16392.jpg)'
- en: Figure 8.32 – Cresting a new query for the gate conditions
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.32 – 为网关条件创建新查询
- en: Here, I've defined a query as follows:![Figure 8.33 – Query definition
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我定义了如下查询：![图 8.33 – 查询定义
- en: '](img/Figure_8.33_B16392.jpg)'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.33_B16392.jpg)'
- en: Figure 8.33 – Query definition
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.33 – 查询定义
- en: This query checks for active bugs in our project.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此查询检查我们项目中的活动漏洞。
- en: Save the query by giving it a name (for example, **ActiveBugs**) and specifying
    a folder (here, I've selected the **Shared Queries** folder):![Figure 8.34 – Saving
    the query definition
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过为查询命名（例如，**ActiveBugs**）并指定一个文件夹（这里我选择了**共享查询**文件夹）来保存查询：![图 8.34 – 保存查询定义
- en: '](img/Figure_8.34_B16392.jpg)'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.34_B16392.jpg)'
- en: Figure 8.34 – Saving the query definition
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.34 – 保存查询定义
- en: Now we're ready to define our gate. From the multi-stage release pipeline we
    previously created, select the **Production** stage, click on the bolt icon, and
    then enable gates, as shown in the following screenshot:![Figure 8.35 – Enabling
    gates
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们准备定义网关。从我们之前创建的多阶段发布管道中，选择**生产**阶段，点击螺栓图标，然后启用网关，如下截图所示：![图 8.35 – 启用网关
- en: '](img/Figure_8.35_B16392.jpg)'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.35_B16392.jpg)'
- en: Figure 8.35 – Enabling gates
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.35 – 启用网关
- en: Here, you can also specify the delay before the evaluation of gates (the time
    before the added gates are evaluated for the first time. If no gates are added,
    then the deployment will wait for the specified duration before proceeding), and
    we can specify the deployment gates (adding gates that evaluate health parameters).
    These gates are periodically evaluated in parallel and if the gates succeed, the
    deployment will proceed; otherwise, the deployment is rejected.
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这里，你还可以指定评估门控前的延迟（在添加的门控第一次被评估之前的时间。如果没有添加门控，则部署将在指定的持续时间后再继续），我们还可以指定部署门控（添加评估健康参数的门控）。这些门控会并行定期评估，如果门控成功，部署将继续；否则，部署将被拒绝。
- en: To specify our gate, click on **Add** and then select **Query work items** (this
    will execute a work item query and check the results):![Figure 8.36 – Gate definition
    (Query work items)
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要指定我们的门控，点击**添加**，然后选择**查询工作项**（这将执行一个工作项查询并检查结果）：![图 8.36 – 门控定义（查询工作项）
- en: '](img/Figure_8.36_B16392.jpg)'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.36_B16392.jpg)'
- en: Figure 8.36 – Gate definition (Query work items)
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.36 – 门控定义（查询工作项）
- en: 'Now, select the `0` (the maximum number of matching work items from the query)
    because we want the release pipeline to only be completed if we have 0 active
    bugs:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择 `0`（查询中匹配的工作项的最大数量），因为我们希望发布管道仅在没有活动错误时才完成：
- en: '![Figure 8.37 – Specifying conditions for the gate'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.37 – 指定门控条件'
- en: '](img/Figure_8.37_B16392.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.37_B16392.jpg)'
- en: Figure 8.37 – Specifying conditions for the gate
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.37 – 指定门控条件
- en: Here, you can also define evaluations options such as `0` means deployment will
    proceed when all gates succeed in the same evaluation cycle), **timeout after
    which gates fail** (the maximum evaluation period for gates; the deployment will
    be rejected if the timeout is reached before gates succeed).
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你还可以定义评估选项，如 `0` 表示当所有门控在同一评估周期内成功时，部署将继续；**门控失败后的超时**（门控的最大评估周期；如果门控在达到超时之前未成功，部署将被拒绝）。
- en: Our gate is now defined and active. You can also define other types of gates
    and you can also have gates that call Azure Functions to evaluate a release condition
    (which is useful if you want to integrate your release check with specific conditions
    on an external system).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的门控现在已经定义并启用了。你还可以定义其他类型的门控，甚至可以有调用 Azure Functions 来评估发布条件的门控（如果你想将发布检查与外部系统的特定条件集成，这会非常有用）。
- en: Using deployment groups
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用部署组
- en: A **deployment group** is a set of machines with a deployment agent installed
    on each of them. Each deployment group represents a physical environment and it
    defines a logical group of target machines for parallel deployment.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '**部署组**是一组每台机器上都安装了部署代理的机器。每个部署组代表一个物理环境，并定义了一个并行部署的目标机器逻辑组。'
- en: 'You can define a deployment group in Azure DevOps by going to the **Pipeline**
    section and selecting **Deployment groups**:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 Azure DevOps 中定义一个部署组，通过进入**管道**部分并选择**部署组**：
- en: '![Figure 8.38 – Creating a deployment group'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.38 – 创建部署组'
- en: '](img/Figure_8.38_B16392.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.38_B16392.jpg)'
- en: Figure 8.38 – Creating a deployment group
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.38 – 创建部署组
- en: Here, you can add servers where the build and release agent is installed.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以添加已安装构建和发布代理的服务器。
- en: Each created deployment group is a member of a **deployment pool**, and this
    pool can also be shared across projects. Deployment groups can only be used on
    release pipelines.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 每个创建的部署组都是**部署池**的一部分，并且此池也可以跨项目共享。部署组只能用于发布管道。
- en: 'You can add a deployment group job by going to the release pipeline editor,
    selecting the job, and clicking on the three-dots button. Here, you can see the
    **Add a deployment group job** option:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过进入发布管道编辑器，选择作业，并点击三点按钮来添加部署组作业。在这里，你可以看到**添加部署组作业**选项：
- en: '![Figure 8.39 – Adding a deployment group job'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.39 – 添加部署组作业'
- en: '](img/Figure_8.39_B16392.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.39_B16392.jpg)'
- en: Figure 8.39 – Adding a deployment group job
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.39 – 添加部署组作业
- en: At the time of writing, deployment group jobs are not yet supported on YAML
    pipelines.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在写作时，YAML 管道尚不支持部署组作业。
- en: YAML release pipelines with Azure DevOps
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: YAML 发布管道与 Azure DevOps
- en: A recently added feature of Azure DevOps is the option to define release pipelines
    by using YAML (previously, this was possible only for the CI part). This is now
    possible by using multi-stage pipelines and with that, you can use a unified YAML
    experience for configuring Azure DevOps pipelines for CI, CD, and CI/CD.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps最近新增的一个功能是通过使用YAML定义发布流水线的选项（之前这仅限于CI部分）。现在，通过使用多阶段流水线，你可以使用统一的YAML体验来配置Azure
    DevOps流水线，涵盖CI、CD和CI/CD。
- en: Defining the release YAML pipeline can be done exactly as described in [*Chapter
    4*](B16392_04_Final_JM_ePub.xhtml#_idTextAnchor096), *Understanding Azure DevOps
    Pipelines*. There are, however, some concepts to understand, such as **environments**.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 定义发布YAML流水线可以按照[*第4章*](B16392_04_Final_JM_ePub.xhtml#_idTextAnchor096)中描述的方式进行，*理解Azure
    DevOps流水线*。然而，有一些概念需要理解，例如**环境**。
- en: '**Environments** are a group of resources targeted by a pipeline – for example,
    Azure Web Apps, virtual machines, or Kubernetes clusters. You can use environments
    to group resources by scope – for example, you can create an environment called
    **development** with your development resources and an environment called **production**
    with the production resources. Environments can be created by going to the **Environments**
    section under **Pipelines**:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '**环境**是流水线所针对的一组资源——例如，Azure Web Apps、虚拟机或Kubernetes集群。你可以使用环境来按范围对资源进行分组——例如，你可以创建一个名为**development**的环境，用于存放开发资源，创建一个名为**production**的环境，用于存放生产资源。可以通过进入**Pipelines**下的**Environments**部分来创建环境：'
- en: '![Figure 8.40 – Creating environments'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.40 – 创建环境'
- en: '](img/Figure_8.40_B16392.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.40_B16392.jpg)'
- en: Figure 8.40 – Creating environments
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.40 – 创建环境
- en: 'The following is an example of a multi-stage release pipeline for deploying
    a .NET Core application on Azure Web Apps:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个多阶段发布流水线的示例，用于将.NET Core应用程序部署到Azure Web Apps：
- en: '[PRE0]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'As you can see in the preceding YAML file, the pipeline defines four stages:
    **Build Source**, **Deploy in Dev**, **Deploy in QA**, and **Deploy in Production**.
    At each of these stages, the application is deployed on the specified environment.'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的YAML文件所示，流水线定义了四个阶段：**Build Source**、**Deploy in Dev**、**Deploy in QA**和**Deploy
    in Production**。在每个阶段，应用程序都会在指定的环境中部署。
- en: Summary
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we had a full overview of how to work with release pipelines
    in Azure DevOps.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们对如何在Azure DevOps中使用发布流水线进行了全面的概述。
- en: We created a basic release pipeline for the **PartsUnlimited** project, defined
    artifacts, and created our first release by adding continuous deployment conditions.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为**PartsUnlimited**项目创建了一个基本的发布流水线，定义了工件，并通过添加持续部署条件创建了我们的第一个发布。
- en: Then, we improved our pipeline definition by using multiple stages (**DEV**,
    **QA**, and **Production**), and at the end of this chapter, we saw how to define
    approvals and gates for managing the release of our code in a more controlled
    way and the concepts around YAML-based release pipelines
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过使用多个阶段（**DEV**、**QA**和**Production**）来改进我们的流水线定义，在本章的最后，我们展示了如何定义审批和控制点，以更受控的方式管理代码的发布，并介绍了基于YAML的发布流水线的相关概念。
- en: In the next chapter, we'll see how to integrate Azure DevOps with GitHub.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将看到如何将Azure DevOps与GitHub集成。
