- en: CD and DevOps Beyond Traditional Software Delivery
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 超越传统软件交付的 CD 和 DevOps
- en: CD and DevOps are normally associated with delivering web server-based solutions—that's
    not to say it is exclusively the case, however; this is the norm. As you have
    learned, CD and DevOps are not specifically associated with tools or techniques.
    A true adoption of CD and DevOps is based on enhancing culture, behaviors, and
    ways of working to smoothen the flow of changes so that value can be delivered
    continuously. This means that they don't need to be constrained to the usual flavor
    of software delivery. Once your business has adopted CD and DevOps as the way
    we do things around here, you could, should, and can apply the same approaches
    to solve other business problems.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CD 和 DevOps 通常与交付基于 Web 服务器的解决方案相关——这并不意味着它仅限于此，然而，这是常态。正如你所学到的，CD 和 DevOps
    并不特别与工具或技术相关。CD 和 DevOps 的真正采纳是基于文化、行为和工作方式的提升，以顺畅变更流程，从而实现持续交付价值。这意味着它们不必局限于传统的软件交付方式。一旦你的业务采用了
    CD 和 DevOps 作为我们这里的工作方式，你就可以、应该，并且能够将相同的方法应用到解决其他业务问题上。
- en: 'The most obvious would be to apply the CD and DevOps approach to something
    that is normally painful for most businesses that delivery software solutions:
    mobile apps.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 最显而易见的做法是将 CD 和 DevOps 方法应用到大多数交付软件解决方案的企业通常认为困难的事情上：移动应用。
- en: CD, DevOps, and the mobile world
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CD、DevOps 与移动世界
- en: 'CD and DevOps are based on culture, behaviors, and ways of working, and therefore
    applying these approaches to delivering mobile applications—which is a large and
    ever-growing industry—can work. That isn''t to say that it''s a cookie-cutter
    adoption; there are a few caveats in terms of how delivering mobile-application
    software differs from web-based/server-based software delivery, the main ones
    at the time of writing being as follows:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: CD 和 DevOps 基于文化、行为和工作方式，因此，将这些方法应用于交付移动应用程序——这是一个庞大且不断增长的行业——是可行的。这并不是说它是一个千篇一律的采纳；在交付移动应用软件与
    Web 基于服务器的软件交付方式之间，确实存在一些不同之处，当前的主要差异如下：
- en: Delivering software to a web platform 10 times per day seamlessly without impacting
    the end user is achievable—you are in full control of the infrastructure and the
    mechanism for releasing it. Doing the same with a mobile application will have
    a major impact on the end user—can you imagine what would happen if you sent a
    mobile app to end users' smartphones 10 times per day?
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每天无缝地将软件交付到 Web 平台 10 次而不影响最终用户是可以实现的——你完全控制着基础设施和发布机制。而同样的操作如果应用到移动应用程序上，会对最终用户产生重大影响——你能想象如果每天向最终用户的智能手机发送移动应用
    10 次会发生什么吗？
- en: There is no Ops team living within the end user's smartphone/tablet, speakers,
    fridge, lights, door locks, dog cams, and so on; therefore, the Ops side of the
    DevOps partnership doesn't strictly exist.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 终端用户的智能手机/平板电脑、音响、冰箱、灯具、门锁、宠物监控摄像头等设备中没有 Ops 团队，因此，DevOps 合作中的 Ops 部分并不严格存在。
- en: You cannot guarantee the spec, size, network capabilities, and so on, of the
    device you'll be deploying to.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你无法保证你将要部署的设备的规格、尺寸、网络能力等。
- en: You are not, strictly speaking, in control of the final distribution of your
    software.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 严格来说，你并不完全控制软件的最终分发。
- en: So, how do you square this circle? Let's go through each in turn.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，你如何解决这个难题呢？让我们依次来看看。
- en: 'In relation to the first point, you wouldn''t realistically want to ship more
    frequently than every few weeks—even if you do have the capability—as this would
    simply spam the end user. You should therefore apply the release train approach.
    In essence, this amounts to incrementally building up the changes (which are all
    independently built, tested, and published via your CD pipeline) until such a
    point that you feel enough time has passed to ship. There is one exception to
    this: you can (and should) be shipping very frequently to internal beta test/dogfooding
    users so that they can try out the latest version whenever they want.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 关于第一个要点，实际上你不会希望比每几周一次的频率更频繁地发布——即便你具备这样的能力——因为这样只会骚扰终端用户。因此，你应该采用发布列车的方法。实质上，这意味着逐步积累变更（这些变更都是独立构建、测试和通过你的
    CD 管道发布的），直到你觉得足够的时间已经过去，可以进行发布。有一个例外：你可以（并且应该）频繁地向内部 Beta 测试/自用用户发布，以便他们随时体验最新版本。
- en: In relation to the second point, unless you can miniaturize the Ops team and
    clone them millions of times, there's not a vast amount you can do. However, if
    you have followed the advice in [Chapter 5](6a4f746d-b386-49b3-b82b-154ff1f604e8.xhtml),
    *Approaches, Tools, and Techniques*, and [Chapter 7](390f69c0-7f66-41a7-93a6-ee5c1bc8733a.xhtml),
    *Vital Measurements*, you will have embedded analytics and metrics within your
    software and have in-depth monitoring in place, so you'll be able to spot issues
    out in the wild in exactly the same way as you would with the software running
    on your servers. If something is spotted, the Dev and Ops team can collaborate,
    work out what's wrong, and rectify it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 关于第二点，除非你能将运维团队缩小并克隆成数百万倍，否则你能做的也不多。不过，如果你按照[第5章](6a4f746d-b386-49b3-b82b-154ff1f604e8.xhtml)《方法、工具和技术》和[第7章](390f69c0-7f66-41a7-93a6-ee5c1bc8733a.xhtml)《关键指标》的建议，你会在软件中嵌入分析和度量，并且已经实施了深入的监控，因此，你将能够像在服务器上运行软件一样，发现应用程序在运行中可能出现的问题。如果发现了问题，开发和运维团队可以协作，找出问题所在并加以修复。
- en: In relation to the third point, you could try to cater for this in your testing,
    but in all honesty that's a thankless task. I would recommend focusing on the
    bestsellers, and based upon analytics and metrics captured, ascertain which sizes,
    specs, and types of devices your users prefer—if you see usage of a specific device
    type trending up, then you should consider adding this to your list of supported
    devices and include it in your test-automation suite. Either that or look at using
    external solutions/providers that specialize in mobile-device testing—many can
    be driven via APIs, which means your testing solution can orchestrate and control
    the test's execution.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 关于第三点，你可以尝试在测试中考虑这一点，但说实话，这是一项非常没有回报的工作。我建议集中精力关注畅销应用，并根据捕获的分析数据和指标，确定用户更喜欢哪些尺寸、规格和设备类型——如果你看到某个设备类型的使用趋势上升，那么你应该考虑将其加入到支持的设备列表中，并将其包含在自动化测试套件中。否则，你可以考虑使用专门从事移动设备测试的外部解决方案/提供商——许多这样的解决方案可以通过API驱动，这意味着你的测试解决方案可以协调并控制测试的执行。
- en: As regards the last point, there's not much you can do about it. The leading
    app stores are now very established and reliable, and have good global coverage.
    The advantage CD gives you is that the app store is in reality a binary repository,
    which is something your CD pipeline is already used to publishing to, so the mechanism
    of publishing your shippable app is very similar to that of your server-based
    software. In addition, most app stores will allow for automated updates, which
    means when you publish a new version of your app, the end users should get it
    soon after. There are, however, no guarantees, so you need to take into account
    that you'll have a few versions still out in the wild that need supporting.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 关于最后一点，你能做的并不多。目前，领先的应用商店已经非常成熟且可靠，且在全球范围内具有良好的覆盖。持续交付（CD）给你带来的优势是，应用商店实际上是一个二进制仓库，而这正是你的CD流水线已经习惯发布到的地方，因此发布可发布的应用程序的机制与服务器端软件的发布机制非常相似。此外，大多数应用商店都支持自动更新，这意味着当你发布新版本的应用程序时，最终用户应该很快就能收到更新。然而，也没有绝对的保证，因此你需要考虑到，仍然会有一些版本在外面运行，需要支持。
- en: This is realistically skimming the surface, but it goes some way to highlight
    how similar traditional server-based apps and mobile apps are in terms of the
    SDLC process.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上只是表面上的探讨，但它在某种程度上突出了传统基于服务器的应用程序和移动应用程序在软件开发生命周期（SDLC）过程中的相似性。
- en: Now, you may be reading this and thinking that there are a vast number of tech
    companies that are building and shipping mobile apps without formally following
    the CD and DevOps approach we've been going through within this book, so why should
    you bother? Because you can, and it will add value. The work undertaken to embed
    collaboration, trust, and honesty within your organization can easily be applied
    to your mobile apps. You have implemented tools and techniques to automate the
    process of building, testing, shipping, and monitoring your server platform, so
    extending these for your mobile apps should be (relatively) straightforward.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能在阅读这段文字时会想，许多科技公司正在构建并发布移动应用程序，而并没有正式遵循我们在本书中讨论的持续交付（CD）和DevOps方法，那么为什么你还需要去在意呢？因为你可以，而且它会带来价值。将协作、信任和诚实融入到组织中的工作，可以轻松地应用到你的移动应用程序上。你已经实现了工具和技术来自动化构建、测试、发布和监控服务器平台的过程，因此将这些扩展到你的移动应用程序上应该是（相对）简单的。
- en: Added to this is the fact that mobile apps can now be written in the same technologies
    as you would use on a server-based website and built into native mobile apps.
    This, in turn, means that the same code base could potentially be shipped to both
    server and mobile; therefore, using the same techniques, tools, and approaches
    will make the process seamless and save a hell of a lot of time, effort, and money.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，现在可以使用与服务器端网站相同的技术编写移动应用，并将其构建为本地移动应用程序。这意味着同一代码库可能被部署到服务器和移动端，因此使用相同的技术、工具和方法将使流程无缝，并节省大量时间、精力和金钱。
- en: Another non-traditional area to which you can apply CD and DevOps ways of working
    is completely outside the world of software delivery.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非传统领域可以应用CD和DevOps工作方式的领域完全超出了软件交付的世界范围。
- en: Expanding beyond software delivery
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拓展至软件交付之外
- en: So far, this book has been espousing the advantages of the adoption CD and DevOps
    to vastly improve the capability to deliver software seamlessly, quickly, and
    continuously. CD and DevOps need not be restricted to software/product delivery.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 迄今为止，本书一直倡导采用持续交付（CD）和DevOps来显著改进软件无缝、快速和持续交付的能力。CD和DevOps并不仅限于软件/产品交付。
- en: The tools, processes, and best practices that come with this way of working
    can be extended to include other areas of the business. There will, of course,
    have to be some tweaks and changes to some of the tools and techniques, but on
    the whole it's the behavioral, cultural, and environmental elements that are important.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这种工作方式带来的工具、流程和最佳实践可以扩展到业务的其他领域。当然，某些工具和技术可能需要进行一些调整和更改，但总体而言，重要的是行为、文化和环境因素。
- en: Let's look at some areas outside of software delivery that can benefit from
    the CD and DevOps ways of working approach, starting with UX and design.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看一些超出软件交付范围的领域，可以从CD和DevOps工作方式中受益，首先是UX和设计。
- en: UX and design
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UX和设计
- en: Most business that deliver software—especially software that includes user interfaces
    (web sites, desktop apps, and so on)—will have some form of UX and/or design team
    involved in working on the UI and user experience assets (wireframes, and so on).
    Even the most agile of organizations will—on the whole—work in a waterfall way
    when it comes to UX and design. For example, most UX and design teams normally
    sit outside of software engineering. The usual approach is to have the assets
    created up front—before development starts—which are fed into the product backlog.
    Agile software-development approaches go some way to overcoming this, but the
    thing that most don't focus on is the need for close collaboration and the importance
    of culture, behaviors, ways of working, and delivering continuously.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数交付软件的企业——尤其是包含用户界面的软件（网站、桌面应用等）——通常都会有UX和/或设计团队参与UI和用户体验资产（线框图等）的工作。即使是最敏捷的组织，在处理UX和设计时也通常会采用瀑布式的方式。例如，大多数UX和设计团队通常独立于软件工程之外。通常的做法是在开发开始之前预先创建资产，这些资产会输入产品积压列表。敏捷软件开发方法在某种程度上解决了这个问题，但大多数方法并未关注密切的协作需求以及文化、行为方式和持续交付的重要性。
- en: You can (and should) take your newfound experience and skills and apply them
    to improving the way in which design and UX assets are built and delivered. If
    you collaborate with the UX/design team and get them to consider how these assets
    can be broken down into smaller logical chunks—as you did with your software platform—and
    have them delivered incrementally, you may find that things become smoother, more
    streamlined, and less wasteful. In terms of tools, there are plenty of well-established
    and mature design/UX software solutions that incorporate collaboration features
    and agile delivery.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以（也应该）利用您新获得的经验和技能，改善设计和UX资产的构建和交付方式。如果与UX/设计团队合作，并让他们考虑如何将这些资产拆分为更小的逻辑块（就像您的软件平台一样），并逐步交付，您可能会发现流程变得更加顺畅、高效，减少浪费。在工具方面，有许多成熟的设计/UX软件解决方案提供协作功能和敏捷交付。
- en: Business process improvements
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 业务流程改进
- en: Let's presume that you have followed the advice within this book and have identified
    and removed the waste from your product delivery process, which is now optimal
    and efficient due to the adoption of CD and DevOps, but there are business functions
    and processes that sit before and/or after the actual product delivery process
    that are starting to slow things down.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经按照本书中的建议，识别并移除了产品交付过程中浪费的部分，现在通过采用CD和DevOps，流程已变得最优和高效，但在实际的产品交付过程之前和/或之后的业务职能和流程开始拖慢了进度。
- en: For example, you may have a team managing the sales leads and business portfolio/requirements-gathering,
    which feeds into product delivery or post-delivery implementation/support teams,
    both/either of which are struggling to keep up with the rapid volume of changes.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可能有一个团队在管理销售线索和业务组合/需求收集，这些信息最终流入产品交付或交付后的实施/支持团队，这两个团队中的一个或两个正在努力跟上快速变化的步伐。
- en: There is no reason why using the same techniques covered earlier in this book
    cannot be used to address wider-reaching business problems. As an organization,
    you now have the experience, confidence, and respect to take something that is
    unwieldy and cumbersome and streamline it to work more effectively, so why not
    apply this further afield?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 没有理由不能使用本书前面提到的相同技术来解决更广泛的商业问题。作为一个组织，你现在拥有了足够的经验、信心和尊重，能够将那些笨重和复杂的事务简化并高效运作，那么为什么不将这一经验应用到更广泛的领域呢？
- en: '![](img/b95ed6ae-d77c-46e1-b2ca-898eff9356b9.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b95ed6ae-d77c-46e1-b2ca-898eff9356b9.png)'
- en: Going back to the previous example, you should be able to isolate business processes
    that precede and follow your product delivery process and go through a similar
    process of inspection (finding the elephant), address behavioral, cultural, and
    environmental issues, and define and implement tools, techniques, and approaches
    to streamline and measure outcomes.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 回到之前的例子，你应该能够隔离出在产品交付流程之前和之后的业务流程，并进行类似的检查（找出问题所在），解决行为、文化和环境问题，并定义和实施工具、技术和方法，以简化流程并衡量结果。
- en: Doing this could provide even greater business value and allow more parts of
    the business to realize the huge benefits of the CD and DevOps ways of working.
    The more seamless your overall business process is, the greater the overall impact.
    If you can capture customer requirements in an effective and efficient way, you
    can deliver what they want and provide the level of service they expect.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做可以带来更大的商业价值，并使更多业务部门意识到CD和DevOps工作方式的巨大好处。你的整体业务流程越无缝，整体影响力就越大。如果你能以一种高效的方式捕捉客户需求，你就能够交付他们想要的，并提供他们期望的服务水平。
- en: Business growth
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 业务增长
- en: Previously, we covered PaaS and Saas as models of delivering software solutions
    to your customers, but what about looking at new business opportunities? If you
    have successfully implemented automated provisioning, you may want to look into
    extending your business to provide IaaS to your customers—after all, you have
    the expertise to do this for yourselves, so why not your customers?
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们讨论了PaaS和SaaS作为向客户交付软件解决方案的模式，但那我们应该如何看待新的商业机会呢？如果你已经成功实现了自动化配置，或许你应该考虑扩展业务，为客户提供IaaS——毕竟，你们已经具备了为自己提供这一服务的专业能力，为什么不为客户提供呢？
- en: Other areas of business growth could come from leveraging the skills and experience
    now embedded within your organization. Think back to when you needed the help
    of experts in the field of CD and DevOps. On the presumption that you acquired
    some assistance, I would wager that it was not cheap. What if your customers themselves
    delivered their own software but needed assistance getting started with adopting
    CD and DevOps? You may be able to offer such assistance as a value-add—maybe you
    should suggest they buy a few copies of this book? Don't blame me for trying.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 业务增长的其他领域可能来自于利用目前已在组织内部嵌入的技能和经验。回想一下当初你需要CD和DevOps领域专家的帮助时。如果你曾经得到过一些帮助，我敢打赌那并不便宜。那么，如果你的客户自己交付软件，但需要帮助开始采用CD和DevOps呢？你或许能提供这种帮助作为附加价值——也许你应该建议他们购买几本这本书？别怪我试图这么做。
- en: Optimized feedback loops
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化的反馈循环
- en: This phrase has been knocking around for a while in relation to agile software
    delivery approaches. For those not in the know, this relates to reducing the time
    taken to get feedback from users in terms of how the software you have supplied
    functions, works, and operates. This can come in many forms—NPS (net promoter
    score) functionality, feedback forms, rating score— but the main thing is to get
    this feedback as soon as possible. If you have adopted CD and DevOps and have
    the ability to deliver changes rapidly, then you really need feedback in a timely
    manner to ensure what has been delivered matches expectations (and quality standards).
    There's pretty much no point in getting feedback two or three months after the
    feature has been built as the world may have moved on and the feedback is therefore
    worthless.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个短语在敏捷软件交付方法中已经讨论了一段时间。对于那些不熟悉的人，这与减少从用户那里获得反馈的时间有关，反馈的内容是你提供的软件如何运作、如何执行。反馈可以有多种形式——如NPS（净推荐值）功能、反馈表单、评分——但最重要的是尽早获取这些反馈。如果你已经采用了CD和DevOps，并能够快速交付变化，那么你确实需要及时获取反馈，以确保交付的内容符合预期（和质量标准）。如果等到特性构建完成两三个月后才得到反馈，那就没多大意义了，因为此时世界可能已经发生变化，反馈也就失去了价值。
- en: The simplest form of optimized feedback loops is to leverage the enhancing culture,
    behaviors, and collaboration now embedded within the organization to get open
    and honest views from internal team members (or anyone else within the organization)
    as the features and functionality are incrementally being delivered through the
    CD pipeline. You can utilize the self-service functionality mentioned in [Chapter
    9](0069e24c-33a3-410a-a2b1-f86895bb646f.xhtml), *Expanding Your Opportunity Horizon*.
    However, the greater value will come from getting feedback from the target end
    users in a timely manner.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的优化反馈循环方式是利用组织内已经植入的文化、行为和协作方式，向内部团队成员（或组织中的任何其他人）获取公开、诚实的看法，随着功能和特性的逐步交付。你可以利用在[第9章](0069e24c-33a3-410a-a2b1-f86895bb646f.xhtml)中提到的自助功能，*拓展你的机会视野*。然而，更大的价值来自于及时从目标终端用户那里获取反馈。
- en: With CD and DevOps adoption giving you the ability to ship software quickly,
    repeatably, and reliably, you should be able to incorporate tooling to capture
    feedback (such as those mentioned previously) from end users, which, if combined
    with the metrics and analytics you have embedded (see [Chapter 7](390f69c0-7f66-41a7-93a6-ee5c1bc8733a.xhtml),
    *Vital Measurements*), will give you some very rich feedback and associated data.
    Traditionally, this feedback would be collected and/or collated by a team outside
    of software engineering, whereas with the CD and DevOps ways of working, the software
    engineering team will be used to working with such data so they can react relatively
    quickly.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 随着CD和DevOps的采用，使你能够快速、可重复和可靠地交付软件，你应该能够整合工具来收集终端用户的反馈（如之前提到的），如果结合你所嵌入的度量和分析（见[第7章](390f69c0-7f66-41a7-93a6-ee5c1bc8733a.xhtml)，*关键指标*），将为你提供非常丰富的反馈和相关数据。传统上，这些反馈会由软件工程以外的团队收集和/或整理，而采用CD和DevOps工作方式后，软件工程团队将习惯于处理这些数据，从而能够更快速地作出反应。
- en: As I say, CD and DevOps is not just about delivering software; the way things
    get done, the collaboration, the open and honest environment, the trust-based
    relationships, and even the language used, can and will help revitalize and enhance
    any business process.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我所说，CD和DevOps不仅仅是交付软件；完成工作的方式、协作、公开诚实的环境、基于信任的关系，甚至是使用的语言，都可以并且将有助于振兴和增强任何业务流程。
- en: What about me?
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 那我呢？
- en: The preceding are simply examples, but none will have the chance of becoming
    a reality without someone helping the business and steering it in the right direction.
    Like it or not, you will have the experience, skills, and reputation as the go-to
    person for things related to CD and DevOps.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 上述内容只是一些示例，但如果没有人为业务提供帮助并引导其走向正确方向，它们都无法成为现实。无论你喜不喜欢，你将会拥有经验、技能和声誉，成为与CD和DevOps相关事务的首选人。
- en: You now have the opportunity to start a new journey and help the business help
    itself by driving forward the sort of changes that can only be realized with a
    mature and strong CD and DevOps culture.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你有机会开始一段新的旅程，通过推动只有在成熟且强大的CD和DevOps文化下才能实现的变化，帮助业务自我发展。
- en: If this doesn't float your boat, then maybe keeping up with the ever-changing
    and ever-growing CD and DevOps landscape is your thing. Just trying to keep up
    with the new ways to do things, new tools, new ideas, and new insights could take
    most of your time and attention. More and more businesses are realizing the huge
    value of having evangelists in their ranks— especially when it comes to software
    and product delivery.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这不符合你的兴趣，或许跟上不断变化和扩展的CD与DevOps领域才是你感兴趣的事情。仅仅追赶新的做事方式、新的工具、新的想法和新的见解就可能占据你大部分的时间和注意力。越来越多的企业意识到，拥有倡导者对他们至关重要——尤其是在软件和产品交付方面。
- en: You might have hooked yourself into the global CD and DevOps communities, which
    will give you an opportunity to share or present your experiences with others
    and, more importantly, bring others' experiences and knowledge back into your
    business. Maybe you could even capture this and publish it on public blogs and
    forums, or even get it printed in book form. Stranger things have happened.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经将自己融入了全球CD和DevOps社区，这将为你提供与他人分享或展示自己经验的机会，更重要的是，将他人的经验和知识带回到你的业务中。也许你甚至可以将这些经验记录下来，发布到公共博客和论坛，甚至出版成书。奇怪的事情时有发生。
- en: 'Whatever you choose to do, you will not be bored, and nor will you be able
    to go back to how things were. You have learned a very valuable lesson: there
    is a better way, and CD and DevOps is it.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你选择做什么，你都不会感到无聊，也无法回到以前的状态。你已经学到了一课：有更好的方法，而CD和DevOps正是其中之一。
- en: What have you learned?
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你学到了什么？
- en: 'I keep making references to your experience, knowledge, and expertise, but
    until you have actually gone through the motions of adopting and implementing
    CD and DevOps, this will amount to what you have read. Let''s take a final chance
    to recap what we have covered:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我一直在提到你的经验、知识和专业技能，但直到你真正经历过采用和实施CD与DevOps的过程，这些都只是你读到的内容。让我们最后再总结一下我们所讨论的内容：
- en: CD and DevOps are not just about technical choices and tools; a vast amount
    of the success is built on the behaviors, culture, and environment.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CD和DevOps不仅仅是关于技术选择和工具的，它们的成功很大程度上取决于行为、文化和环境。
- en: Implementing and adopting CD and DevOps is a journey that might seem long and
    daunting at first, but once you've taken the first step and then put one foot
    in front of the other, you'll hardly notice the miles passing.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施和采用CD与DevOps是一个过程，刚开始可能看起来漫长而令人生畏，但一旦你迈出了第一步，接着一步步前进，你几乎不会注意到时光的流逝。
- en: Teams who have successfully adopted CD and DevOps seldom regret it or are tempted
    to go back to the bad old days when releases were synonymous with working weekends
    and late nights—working late nights and weekends should be synonymous with innovation
    and wanting to create some killer app or the next world-changing technological
    breakthrough.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 那些成功采纳了CD和DevOps的团队很少后悔，或者想要回到以前那个发布版本意味着加班和熬夜的时代——熬夜和周末加班应该和创新以及创造一款杀手级应用或下一个改变世界的技术突破紧密相连。
- en: You don't have to adopt both CD and DevOps at the same time, but one complements
    the other. You don't have to, but you should seriously consider it.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不必同时采用CD和DevOps，但它们是相互补充的。你不一定要同时做，但你应该认真考虑一下。
- en: Where you do need to make technical choices, ensure that you implement something
    that enhances and complements your ways of working—never change your ways of working
    to fit the tooling.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在需要做出技术选择时，确保你所实施的内容能够增强并补充你当前的工作方式——永远不要为了工具而改变你的工作方式。
- en: It can be big and scary, but if you start with your eyes wide open, you should
    be able to get through. CD and DevOps are now very well-established and there
    is a global community available that can help and give advice, so don't be afraid
    to reach out.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这可能很庞大且令人害怕，但如果你睁大眼睛开始，你应该能够走下去。CD和DevOps现在已经非常成熟，并且有一个全球社区可以提供帮助和建议，所以不要害怕去寻求支持。
- en: Don't start implementing CD or DevOps just because it's the next big thing that
    everyone else is doing. You need to have a good reason to adopt both/either, or
    you will not reap the benefits, and nor you will truly believe in what you are
    doing.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要仅仅因为CD或DevOps是下一个大家都在做的大趋势，就开始实施它们。你需要有充分的理由来采用这些方法，否则你将无法收获它们的好处，也不会真正相信你所做的事情。
- en: Although we have covered a vast amount, you don't have to implement everything
    you have read about; take the best parts that work for you and your situation
    and go from there—just as you would with any good agile methodology.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虽然我们已经讨论了大量内容，但你不必实施你所阅读的所有内容；选择最适合你和你当前情况的部分，从那里开始——就像你会对待任何一种良好的敏捷方法一样。
- en: Just because you can ship software doesn't mean you are done. CD and DevOps
    are ways of working, and the approaches within can be applied to other business
    areas and problems.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅仅因为你能交付软件，并不意味着你就完成了。CD和DevOps是一种工作方式，其中的方法可以应用到其他业务领域和问题上。
- en: Share failures and successes so that you learn and others have the opportunity
    to learn from you.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分享失败和成功，这样你可以从中学习，别人也有机会从你身上学习。
- en: Summary
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This book, like all good things, has come to an end. As pointed out numerous
    times, we've covered quite a lot in these pages. This book is by no means the
    definitive opus for adopting CD and DevOps; it is a collection of suggestions
    laid out in a logical order based on real-world experience and war stories. I
    recommend you put some effort into fleshing out your knowledge with other reading
    materials and books, or even attending a conference or two.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书，和所有美好的事物一样，已经结束了。如同多次指出的，我们在这些页面中讨论了相当多的内容。 本书绝不是采用CD和DevOps的权威著作；它只是基于真实世界的经验和战斗故事，按逻辑顺序整理出的一系列建议。我建议你花些时间通过其他阅读材料和书籍来扩展自己的知识，甚至参加一两场会议。
- en: Even if you are simply window-shopping and looking at what is needed to implement
    and adopt CD and DevOps ways of working, you should now have a clearer idea of
    what you are getting yourself and your organization into. Forewarned is forearmed,
    as they say. It's not an easy journey, but it is worth it.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你只是看看需要什么来实施和采纳CD与DevOps的工作方式，现在你应该对自己和组织将要面临的情况有了更清晰的了解。正如人们所说，“有准备就是有优势”。这不是一段轻松的旅程，但它值得。
- en: So, go grab yourself a hot beverage, a notepad, and a pen; skip back to [Chapter
    2](03ef279d-c51d-4e35-a137-701636c17d5f.xhtml), *Understanding Your Current Pain
    Poin*ts, and start mapping out why you need to adopt CD and DevOps and how you
    are going to do it.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，去拿一杯热饮，一本笔记本和一支笔；跳回到[第2章](03ef279d-c51d-4e35-a137-701636c17d5f.xhtml)，*理解你当前的痛点*，开始绘制出为什么你需要采用CD和DevOps，以及你打算如何去做。
- en: Go on then. Stop reading and go!
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 那就去吧。别再读了，赶紧去做！
- en: Good luck!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 祝你好运！
