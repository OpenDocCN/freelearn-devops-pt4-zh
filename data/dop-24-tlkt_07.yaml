- en: Deploying Stateful Applications At Scale
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大规模部署有状态应用程序
- en: Most of the applications are deployed to Kubernetes using Deployments. It is,
    without a doubt, the most commonly used controller. Deployments provide (almost)
    everything we might need. We can specify the number of replicas when our applications
    need to be scaled. We can mount volumes through PersistentVolumeClaims. We can
    communicate with the Pods controlled by Deployments through Services. We can execute
    rolling updates that will deploy new releases without downtime. There are quite
    a few other features enabled by Deployments. Does that mean that Deployments are
    the preferable way to run all types of applications? Is there a feature we might
    need that is not already available through Deployments and other resources we
    can associate with them?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用程序通过部署到 Kubernetes 使用 Deployments。毫无疑问，它是最常用的控制器。Deployments 提供了我们可能需要的（几乎）所有功能。当我们的应用需要扩展时，我们可以指定副本数。我们可以通过
    PersistentVolumeClaims 挂载卷。我们可以通过 Services 与由 Deployments 控制的 Pods 进行通信。我们可以执行滚动更新，在没有停机的情况下部署新版本。Deployments
    启用了许多其他功能。这是否意味着 Deployments 是运行所有类型应用程序的首选方式？是否有某个功能是我们需要的，但 Deployments 和我们可以与其关联的其他资源中并没有提供？
- en: When running stateful applications in Kubernetes, we soon realize that Deployments
    do not offer everything we need. It’s not that we require additional features,
    but that some of those available in Deployments do not behave just as we might
    want them to. In many cases, Deployments are an excellent fit for stateless applications.
    However, we might need to look for a different controller that will allow us to
    run stateful applications safely and efficiently. That controller is StatefulSet.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 中运行有状态应用程序时，我们很快意识到 Deployments 并不能提供我们所需要的所有功能。并不是说我们需要额外的功能，而是
    Deployments 中的一些功能并不完全按我们期望的方式运作。在许多情况下，Deployments 非常适合无状态应用程序。然而，我们可能需要寻找一个不同的控制器，它能让我们安全高效地运行有状态应用程序。这个控制器就是
    StatefulSet。
- en: Let’s experience some of the problems behind stateful applications, and the
    benefits *StatefulSets* bring to the table. To do that, we need a cluster.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们体验一下有状态应用程序背后的某些问题，以及 *StatefulSets* 带来的好处。为了做到这一点，我们需要一个集群。
- en: We’ll skip the theory (for now), and dive straight into examples. To do that,
    we need a cluster.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们暂时跳过理论，直接进入示例。为了做到这一点，我们需要一个集群。
- en: Creating A Cluster
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建集群
- en: We’ll start the hands-on walk-through by cloning the `vfarcic/k8s-specs` repository
    that contains all the example definitions we’ll use throughout the book.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过克隆 `vfarcic/k8s-specs` 仓库开始动手演示，这个仓库包含了本书中将使用的所有示例定义。
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
