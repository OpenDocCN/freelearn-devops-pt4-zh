- en: Creating A Continuous Deployment Pipeline With Jenkins
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Jenkins创建持续部署流水线
- en: This is it. The time has come to put all the knowledge we obtained into good
    use. We are about to define a “real” continuous deployment pipeline in Jenkins.
    Our goal is to move every commit through a set of steps until the application
    is installed (upgraded) and tested in production. We will undoubtedly face some
    new challenges, but I am confident that we’ll manage to overcome them. We already
    have all the base ingredients, and the main thing left is to put them all together
    into a continuous deployment pipeline.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 就是现在，时机已经成熟，我们可以将所学的知识付诸实践。我们即将定义一个“真实”的持续部署流水线（continuous deployment pipeline）在Jenkins中。我们的目标是将每一次提交通过一系列步骤，直到应用程序在生产环境中被安装（或升级）并经过测试。我们无疑会面临一些新的挑战，但我相信我们能够克服它们。我们已经拥有所有基础要素，剩下的主要任务就是将它们组装成一个持续部署流水线。
- en: Before we move into a practical section, we might want to spend a few moments
    discussing our goals.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入实际操作部分之前，我们可能需要花一点时间讨论我们的目标。
- en: Exploring The Continuous Deployment Process
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 探索持续部署过程
- en: Explaining continuous deployment (CDP) is easy. Implementing it is very hard,
    and the challenges are often hidden and unexpected. Depending on the maturity
    of your processes, architecture, and code, you might find out that the real problems
    do not lie in the code of a continuous deployment pipeline, but everywhere else.
    As a matter of fact, developing a pipeline is the easiest part. That being said,
    you might wonder whether you made a mistake by investing your time in reading
    this book since we are focused mostly on the pipeline that will be executed inside
    a Kubernetes cluster.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 解释持续部署（CDP）很简单，实施起来却非常困难，挑战常常是隐形的且出乎意料。根据你流程、架构和代码的成熟度，你可能会发现，真正的问题并不在于持续部署流水线的代码，而是在其他地方。事实上，开发流水线是最简单的部分。话虽如此，你可能会想知道，是否在阅读这本书上投入时间是个错误，因为我们主要关注的是在Kubernetes集群中执行的流水线。
- en: We did not discuss the changes in your other processes. We did not explore what
    a good architecture that will support CDP pipelines is. We did not dive into how
    to code your application to be pipeline-friendly. I assumed that you already know
    all that. I hope that you do understand the basic concepts behind Agile and DevOps
    movements and that you already started dismantling the silos in your company.
    I assume that you do know what it means for your software architecture to be cloud-native
    and that you do implement some if not all of the [12 factors](https://12factor.net/).
    I guessed that you are already practicing Test-Driven Development, Behavior-Driven
    Development, Acceptance-Driven Development, or any other technique that help you
    design your applications.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有讨论你其他流程中的变化。我们没有探讨如何设计支持CDP流水线的良好架构。我们也没有深入讨论如何编写适合流水线的应用程序代码。我假设你已经了解这些。我希望你能理解敏捷（Agile）和DevOps运动背后的基本概念，并且你已经开始打破公司内部的孤岛。我还假设你知道什么是云原生架构，并且你已实施了[12个因素](https://12factor.net/)中的一些，甚至全部。我猜测你已经在实践测试驱动开发（TDD）、行为驱动开发（BDD）、验收驱动开发（Acceptance-Driven
    Development）或任何其他有助于设计应用程序的技术。
- en: I might be wrong. To be more precise, I’m sure that I’m wrong. Most of you are
    not there yet. If you are one of those, please get informed. Read more books,
    do some courses, and convince your managers to give you time, space, and resources
    you’ll need to modernize your applications. It needs to be done. All those things
    and many others are what differentiates top performers (e.g., Google, Amazon,
    Netflix) and the rest of us. Still, none of them is the same. Every high-performing
    company is different, and yet, they all share some things in common. They all
    need to ship features fast. They all need to have a high level of quality. And
    they all acknowledge that highly-available, fault-tolerant, and distributed systems
    require a very different approach than what most of the rest of us are used to.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我可能错了。更准确地说，我确信自己错了。大多数人还没有做到这一点。如果你是其中之一，请加强学习。读更多的书，参加一些课程，并说服你的管理者给你时间、空间和资源，帮助你更新现代化的应用程序。这是必须要做的。所有这些事情以及许多其他因素，正是区分顶尖企业（例如Google、Amazon、Netflix）与我们其他公司之间的差异。尽管如此，这些公司也各自不同。每个高效的公司都是独一无二的，但它们都有一些共同点。它们都需要快速交付功能，都需要高水平的质量，并且它们都意识到，高可用性、容错性和分布式系统需要采取与我们大多数人习惯的方式截然不同的方法。
- en: If you got depressed by thinking that you are not yet ready and that you are
    on the verge of quitting, my advice is to continue. Even though you might need
    to make a lot of changes before you are able to practice continuous deployment,
    knowing what the end result looks like will put you on the right path. We are
    about to design a fully operational continuous deployment pipeline. Once we’re
    done, you’ll know which other changes you’ll need to make. You’ll understand where
    the finish line is, and you will be able to go back to where you are and start
    moving in the right direction.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你因为认为自己还没有准备好而感到沮丧，甚至有放弃的念头，我的建议是继续前进。即使你可能需要进行大量更改才能实践持续部署，了解最终结果应该是什么样子，也会让你走上正确的道路。我们现在要设计一个完全可操作的持续部署流水线。一旦完成，你会知道还需要进行哪些其他更改。你会理解终点在哪里，并且能够回到现状，从正确的方向开始前进。
- en: We already discussed what a continuous deployment pipeline looks like. In case
    you’re forgetful (I know I am), here are a few of the rules that represent the
    short version.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论过持续部署流水线的样子。如果你忘记了（我知道我有时也会忘记），这里有一些规则的简短版本，代表了最关键的内容。
- en: '**Rule number one**: Every commit to the master branch is deployed to production
    if it passes all the steps of a fully automated pipeline. If you need to involve
    humans after the commit, it’s not continuous deployment, nor it is continuous
    delivery. At best, you’re doing continuous integration.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**规则一**：每次提交到主分支后，如果通过了全自动化流水线的所有步骤，则会部署到生产环境。如果提交后还需要人工介入，那么这就不是持续部署，也不是持续交付。最多，你是在做持续集成。'
- en: '**Rule number two**: You commit directly to the master branch, or you’re using
    short-living feature branches. The master branch is the only one that matters.
    Production releases are made from it. If you do use branches, they are taken from
    the master branch, since that’s the only one that truly matters. When you do create
    a feature branch, you are merging back to master soon afterward. You’re not waiting
    for weeks to do so. If you are, you are not “continuously” validating whether
    your code integrates with the code of others. If that’s the case, you’re not even
    doing continuous integration. Unless, you have an elaborate branching strategy,
    in which case you are only making everyone’s lives more complicated than they
    should be.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**规则二**：你直接提交到主分支，或者使用短生命周期的特性分支。主分支是唯一重要的分支，生产版本是从它发布的。如果你使用分支，它们是从主分支派生的，因为主分支才是唯一真正重要的。当你创建一个特性分支时，很快就会合并回主分支。你不会等待几个星期再合并。如果你在等待，那就意味着你没有“持续”验证你的代码是否与他人的代码兼容。如果是这种情况，你甚至没有在做持续集成。除非你有一个复杂的分支策略，在这种情况下，你只是让每个人的工作变得比应该更复杂。'
- en: '**Rule number three**: You trust your automation. When a test fails, there
    is a bug, and you fix it before anything else. I hope that you do not belong to
    a big group of companies that have flaky tests that sometimes work, and sometimes
    fail for random reasons. If you do, fix your tests first or remove those that
    are flaky. It’s pointless to run tests you do not trust. The same can be said
    for builds, deployments, and just about any other step of the process. If you
    see yourself in the group of those that do not trust their code, you’ll have to
    fix it first. Tests are code, just as builds, deployments, and everything else
    is. When code produces inconsistent results, we fix it, we do not restart it.
    Unfortunately, I do see a lot of companies that rather re-run a build that failed
    because of flaky tests than fix the cause of that flakiness. There’s an alarming
    number of those that solve half of the production problems by restarting applications.
    Anyways, if you do not trust your automation, you cannot deploy to production
    automatically. You cannot even say that it is production ready.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**规则三**：你需要信任你的自动化工具。当测试失败时，就表示有漏洞，必须先修复它。我希望你不是那些拥有不稳定测试的大公司之一，那些测试有时能通过，有时由于随机原因失败。如果你是这种公司，请先修复不稳定的测试，或者删除那些不可靠的测试。运行不可信的测试是没有意义的。同样的道理适用于构建、部署以及流程中的其他任何步骤。如果你发现自己属于那些不信任自己代码的群体，那么你必须先解决这个问题。测试是代码，就像构建、部署和其他所有环节一样。当代码产生不一致的结果时，我们应该修复它，而不是重启它。不幸的是，我确实看到很多公司更愿意重新运行因为不稳定的测试而失败的构建，而不是修复那些不稳定测试的根本原因。有很多公司通过重新启动应用来解决一半的生产问题，这个现象值得警惕。总之，如果你不信任你的自动化工具，就不能自动部署到生产环境，甚至不能说你的代码是生产就绪的。'
- en: Now that we established a set of straightforward ground rules, we can move on
    and describe the pipeline we should develop. We are going to build something.
    Since building without running unit and other types of static tests should be
    declared officially illegal and punishable with public shame, we’ll include those
    in our **build stage**. Then we’re going execute the steps of the **functional
    testing stage** that will run all sorts of tests that require a live application.
    Therefore, we’ll need to deploy a test release during this stage. Once we’re confident
    that our application behaves as expected, we’re going to make a **production release**,
    followed with the **deploy stage** that will not only upgrade the production release
    but also run another round of tests to validate whether everything works as expected.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经建立了一套简单明了的基本规则，就可以继续描述我们应该开发的管道了。我们将构建一些东西。由于在没有运行单元测试和其他类型的静态测试的情况下进行构建应该被正式宣告为非法，并且会因公共耻辱而受到惩罚，所以我们将在
    **构建阶段** 包含这些测试。然后，我们将执行 **功能测试阶段** 的步骤，运行所有需要实际应用程序的测试。因此，在这个阶段我们需要部署一个测试发布版本。一旦我们确信应用程序按预期运行，我们将进行
    **生产发布**，随后是 **部署阶段**，该阶段不仅会升级生产发布版本，还会再进行一轮测试，以验证一切是否按预期工作。
- en: '![Figure 7-1: The stages of a continuous deployment pipeline](img/00028.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图 7-1: 持续部署管道的各个阶段](img/00028.jpeg)'
- en: 'Figure 7-1: The stages of a continuous deployment pipeline'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '图 7-1: 持续部署管道的各个阶段'
- en: You might not agree with the names of the stages. That’s OK. It does not matter
    much how you name things, nor how you group steps. What matters is that the pipeline
    has everything we need to feel confident that a release is safely deployed to
    production. Steps matter, stages are only labels.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能不同意这些阶段的名称。没关系。事情的命名和步骤的分组并不重要。重要的是管道中包含了我们需要的一切，确保我们能够自信地将发布安全地部署到生产环境。步骤很重要，阶段只是标签。
- en: We won’t discuss the exact steps just yet. Instead, we’ll break the stages apart
    and build one at the time. During the process, we’ll discuss which steps are required.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们暂时不讨论具体步骤。相反，我们将把阶段拆分开来，一次构建一个。在这个过程中，我们将讨论哪些步骤是必需的。
- en: It is almost certain that you’ll need to add steps that I do not use. That’s
    OK as well. It’s all about principles and knowledge. Slight modifications should
    not be a problem.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你几乎可以确定，可能需要添加一些我没有使用的步骤。没关系，这也是可以的。关键是原则和知识。稍微的修改不应该是问题。
- en: Let’s create a cluster.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个集群。
- en: Creating A Cluster
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个集群
- en: We’ll start the practical section of the chapter by going to the *vfarcic/k8s-specs*
    repository and by making sure that we have the latest revision.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过进入 *vfarcic/k8s-specs* 仓库，并确保我们拥有最新的版本，来开始本章的实践部分。
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
