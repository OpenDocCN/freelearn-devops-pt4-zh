- en: Continuous Delivery With Jenkins And GitOps
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Jenkins 和 GitOps 实现持续交付
- en: Given that we already explored continuous deployment, you might be wondering
    why are we even talking at this point about continuous delivery. There are a few
    reasons for that. First of all, I am conscious that many of you will not or can
    not implement continuous deployment. Your tests might not be as reliable as you’d
    need them to be. Your processes might not allow full automation. You might have
    to follow regulations that prevent you from reaching nirvana. There could be many
    other reasons. The point is that not everyone can apply continuous deployment.
    Even among those that can get there, there are indeed some that do not want that
    as the destination. So, we’ll explore continuous delivery as an alternative to
    continuous deployment.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经探讨过持续部署，你可能会好奇为什么我们现在还要讨论持续交付。原因有几个。首先，我知道你们中的许多人可能无法或不能实施持续部署。你们的测试可能没有你们所需的可靠性，或者你们的流程可能不允许完全自动化。你们可能需要遵守一些法规，导致无法达到理想状态。还有许多其他原因。关键是，并不是每个人都能应用持续部署。即便是在那些能够做到的人中，也确实有些人并不希望将其作为最终目标。所以，我们将探讨持续交付，作为持续部署的替代方案。
- en: There are other reasons for writing this chapter. So far, I showed you one possible
    implementation of the continuous deployment pipeline. We could modify the existing
    pipeline by adding an `input` step before making the release and upgrading production.
    That would add *proceed* and *cancel* buttons that we could use to choose whether
    to upgrade the production release or not. This chapter would be the shortest chapter
    ever, and that would be boring. Where’s the fun in doing a small variation of
    the same?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 编写本章还有其他原因。到目前为止，我向你展示了一个持续部署管道的可能实现。我们可以通过在发布和升级生产之前，添加一个 `input` 步骤来修改现有管道。这样就会添加
    *继续* 和 *取消* 按钮，我们可以选择是否升级生产版本。如果这样做，本章将成为最短的一章，而那会很无聊。做一些小变动有什么趣味呢？
- en: We’ll use this chapter to explore a few alternative approaches to writing Jenkins
    pipeline. Just as the pipeline from the previous chapter could be easily converted
    from continuous deployment to continuous delivery process, what we’re going to
    do next could also go both ways. So, even though our objective is to write a continuous
    delivery pipeline, the lessons from this chapter could be easily applied to continuous
    deployment as well.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中探索编写 Jenkins 管道的一些替代方法。就像前一章的管道可以轻松地从持续部署转换为持续交付流程一样，我们接下来做的也可以两种方式互换。所以，尽管我们的目标是编写一个持续交付管道，但本章的教训也可以很容易地应用于持续部署。
- en: We’ll use this opportunity to explore declarative pipeline as an alternative
    to scripted. We’ll switch from using a separate VM for building docker image to
    using the Docker socket to build it in one of the nodes of the cluster. We’ll
    explore how we can define our whole productions environment differently. We’ll
    even introduce GitOps.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将借此机会探索声明式管道作为脚本式管道的替代方案。我们将从使用单独的虚拟机构建 Docker 镜像，转变为在集群中的某个节点上使用 Docker 套接字来构建镜像。我们将探讨如何以不同的方式定义整个生产环境。我们甚至会引入
    GitOps。
- en: The real goal is to give you valid alternatives to the approaches we used so
    far, thus allowing you to make better decisions when implementing lessons-learned
    in your organization. I hope that by the end of this chapter you will be able
    to cherry-pick things that suit you the best and assemble your own process.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 真正的目标是为你提供有效的替代方案，以便你在实现所学经验时能做出更好的决策。我希望在本章结束时，你能挑选出最适合你的方法，组建出你自己的流程。
- en: That’s it for the prep-talk. You know what continuous delivery is, and you know
    how to use Kubernetes. Let’s define some pipelines.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 预备讨论就到这里。你已经知道什么是持续交付，也知道如何使用 Kubernetes。让我们定义一些管道吧。
- en: Creating A Cluster
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个集群
- en: Just as before, we’ll start the practical part by making sure that we have the
    latest version of the *k8s-specs* repository.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 和之前一样，我们将通过确保我们拥有 *k8s-specs* 仓库的最新版本来开始实践部分。
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
