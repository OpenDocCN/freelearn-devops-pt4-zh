- en: '*Chapter 1*: Introducing DevOps and Agile'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第一章*：介绍 DevOps 和敏捷'
- en: In this chapter, we'll introduce DevOps and Agile. We'll explore a few questions,
    including *What does DevOps set out to achieve?*, and *How does Agile play a part
    in DevOps?*. We'll also explore the values of a successful DevOps transformation
    and the challenges that DevOps solves for organizations. We will also learn how
    to build the four phases of DevOps maturity.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍 DevOps 和敏捷。我们将探讨一些问题，包括 *DevOps 想要实现什么？*，以及 *敏捷在 DevOps 中扮演什么角色？*。我们还将探讨成功的
    DevOps 转型的价值，以及 DevOps 为组织解决的挑战。我们还将学习如何构建 DevOps 成熟度的四个阶段。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主要内容：
- en: Exploring the goals of DevOps
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 DevOps 的目标
- en: Values associated with DevOps
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 DevOps 相关的价值
- en: Challenges solved by DevOps
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps 解决的挑战
- en: Phases of DevOps maturity
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps 成熟度的阶段
- en: How does Agile play a part in DevOps?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敏捷在 DevOps 中扮演什么角色？
- en: Exploring the goals of DevOps
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 DevOps 的目标
- en: The subject of DevOps is one that tends to prompt many different opinions on
    what it means and exactly how you do DevOps within your organization. The goals
    of DevOps and what it helps you achieve within your organization is also something
    that you will get different answers for from different people, depending on their
    experience, the industry they work in, and how successful those organizations
    have been at adopting DevOps.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 是一个通常会引发许多不同意见的话题，关于它意味着什么，以及如何在你的组织中实施 DevOps。DevOps 的目标和它在组织中帮助实现的目标也是根据不同人的经验、他们所在的行业以及组织在采纳
    DevOps 方面的成功与否，会得到不同答案的内容。
- en: 'For many organizations, you can define the following common goals of DevOps.
    These are goals that apply to most organizations:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多组织来说，你可以定义以下共同的 DevOps 目标。这些是适用于大多数组织的目标：
- en: Deployment frequency
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署频率
- en: Faster time to market
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更快的市场交付时间
- en: Lower failure rates
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更低的失败率
- en: Shorter lead times
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更短的交付周期
- en: Improved recovery time
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更好的恢复时间
- en: Of course, your organization may be driven by different reasons and even for
    similar organizations, I would expect their goals to be slightly different. After
    all, while most organizations share the same challenges, how these challenges
    can be addresses and which of these challenges will result in the biggest gain
    in value will also differ, depending on the organization.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你的组织可能有不同的驱动因素，甚至对于相似的组织，我也预计他们的目标会略有不同。毕竟，虽然大多数组织面临相同的挑战，但这些挑战如何解决，以及哪些挑战会带来最大的价值增益，也会根据组织的不同而有所不同。
- en: Deployment frequency
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署频率
- en: Improving the frequency at which you release or deploy software in your organization
    is often a key driver of the adoption of DevOps. We must start to change the way
    we collaborate and communicate within our organization to deliver value to our
    end users.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 提高你在组织中发布或部署软件的频率通常是推动 DevOps 采用的关键因素。我们必须开始改变我们在组织内部的协作和沟通方式，以便为最终用户提供价值。
- en: When developers and operations teams start focusing on the same shared goals,
    they start working together more effectively and deliver better value.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发和运维团队开始专注于相同的共同目标时，他们开始更有效地合作并提供更好的价值。
- en: Faster time to market
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更快的市场交付时间
- en: Most organizations will compete with another for the services they provide.
    Having a faster time to market gives you a competitive edge over your competitors.
    With DevOps, you can work to increase value by reducing the amount of time it
    takes from idea inception to product release.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数组织将与其他组织竞争其提供的服务。拥有更快的市场交付时间可以为你提供比竞争对手更大的竞争优势。通过 DevOps，你可以通过减少从构想到产品发布所需的时间来增加价值。
- en: As a business, your value degrades the longer it takes you to release features
    to your product and the quicker your competition can get ahead of you. So, achieving
    a faster time to market is a key goal of not just DevOps but the business as well.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个企业，你的价值会随着发布产品功能的时间延长而下降，而你的竞争对手能够更快地领先于你。因此，实现更快的市场交付时间不仅是 DevOps 的关键目标，也是业务的关键目标。
- en: Lower failure rates
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更低的失败率
- en: Every organization has failures, but with DevOps, you can, over time, expect
    to realize lower failure rates through teams collaborating with each other and
    communicating better with each other.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 每个组织都会遇到失败，但通过 DevOps，随着时间的推移，你可以预期通过团队之间的协作和更好的沟通来实现较低的失败率。
- en: Tip
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Cross-functional in DevOps denotes where people from different areas work together
    in one team.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 中的跨职能指的是来自不同领域的人们在一个团队中共同工作。
- en: DevOps gives teams the ability to work more closely and communicate more effectively.
    In mature organizations, it allows for cross-functional teams. The shared knowledge
    between these teams and the individuals within them and the greater understanding
    of each other's roles leads to lower failure rates.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps使团队能够更紧密地合作并进行更有效的沟通。在成熟的组织中，它允许跨职能团队的协作。这些团队之间及其中个体之间共享的知识，以及对彼此角色的更大理解，有助于降低失败率。
- en: Shorter lead times
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更短的交付周期
- en: Lead time is the amount of time between the initiation and completion of a specific
    task. In DevOps, this would be the amount of time between work starting on a user
    story and that story making it to release.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 交付时间是指从开始到完成特定任务所花费的时间。在DevOps中，这指的是从用户故事开始工作到该故事发布所需的时间。
- en: Tied hand in hand with faster time to market, shorter lead times is not just
    about your product but everything in the whole life cycle. This could be anything
    from planning where you capture requirements more effectively all the way to building
    infrastructure quicker than before.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 与更快的市场响应时间和更短的交付周期紧密相连，缩短交付时间不仅仅是关于产品，还涉及整个生命周期中的各个方面。这可能包括从规划阶段有效捕获需求，到比以前更快地建设基础设施。
- en: Through slick processes, effective communication and collaboration, and high
    levels of automation, the lead times throughout your cycle will be quicker, leading
    to high performance within your team.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过流畅的流程、有效的沟通与协作，以及高水平的自动化，整个生命周期的交付时间将会更短，从而带来团队的高效表现。
- en: Improved recovery time
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进的恢复时间
- en: Of course, we all know that most organizations have **Service-Level Agreements**
    (**SLAs**) to measure the performance of key service-based metrics such as availability.
    However, how many organizations can tell you, on average, how long it takes to
    recover a service? Not many.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们都知道大多数组织都有**服务级别协议**（**SLAs**）来衡量关键服务指标的表现，如可用性。然而，有多少组织能告诉你，平均需要多长时间才能恢复一个服务呢？并不多。
- en: Having the level of collaboration that lets you discuss the reasons behind failures,
    understand them, and implement steps to prevent them from happening again is a
    sign of a mature organization. An organization that measures this metrics and
    takes steps to reduce them is an even more mature organization.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有能够讨论失败原因、理解原因并采取措施防止失败再次发生的协作水平，是成熟组织的标志。一个能够衡量这些指标并采取措施减少这些指标的组织，才是一个更加成熟的组织。
- en: Downtime is lost revenue and reputational damage to your organization, so reducing
    that level of downtime is very important.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 停机时间是组织收入的损失和声誉的损害，因此减少停机时间非常重要。
- en: In this section, we have explored what the key goals of DevOps are and the business
    value behind the adoption of DevOps. Next, we'll take this further by looking
    at the values that make DevOps successful.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了DevOps的关键目标以及采用DevOps背后的商业价值。接下来，我们将更深入地讨论使DevOps成功的价值观。
- en: Values associated with DevOps
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与DevOps相关的价值观
- en: DevOps can be split into various pillars when it comes to transformation. That
    being said, if you wanted to take a high-level view of DevOps rather than one
    at a deeper level, you can talk about DevOps as four specific buckets.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当谈到转型时，DevOps可以分为不同的支柱。也就是说，如果你想从一个高层次的角度而非更深层次的角度来了解DevOps，你可以将DevOps视为四个具体的领域。
- en: 'These buckets are as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这些领域如下：
- en: Culture
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文化
- en: People
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 人员
- en: Process
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流程
- en: Technology
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术
- en: I firmly believe the order of these matters. While the ambition may be to work
    on tooling first, following the order set out here will ensure your organizations
    get much more value from their DevOps transformation.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我坚信这些顺序是很重要的。虽然初衷可能是先处理工具问题，但遵循这里列出的顺序将确保你的组织能够从DevOps转型中获得更多的价值。
- en: Important note
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Culture is one of the most important aspects of a successful DevOps transformation,
    even above the use of technology.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 文化是成功的DevOps转型中最重要的方面之一，甚至比技术的使用更为重要。
- en: The importance of culture in DevOps cannot be overstated; getting the right
    culture in your organization enables you to drive in the right direction and get
    more value later in the transformation. You should also not underestimate the
    challenge of changing an organization's culture – it requires drive and executive-level
    support to be successful.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps中文化的重要性不可过分强调；在组织中建立正确的文化可以帮助你朝着正确的方向前进，并在转型后期获得更多价值。你也不应低估改变组织文化的挑战——这需要强大的推动力和高层领导的支持才能成功。
- en: Next is people, the lifeblood of any business and any product. You must ensure
    that you have the right people to get the right culture to achieve the goals that
    have been set out by your organization, and those people must have the right skills
    to achieve this. As important as executive-level support is to DevOps, so is having
    the right people to execute it.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是人员，任何企业和产品的命脉。你必须确保拥有合适的人才，建立起正确的文化，以实现组织设定的目标，而这些人必须具备实现这一目标所需的技能。就像高层管理支持对
    DevOps 的重要性一样，拥有合适的人才来执行它同样至关重要。
- en: Now, we have process. The right-minded people will be the ones who can work
    with and drive your processes in the right direction, applying appropriate techniques
    to ensure your processes are fit for purpose in a DevOps world. To work together,
    you need to adopt some processes for continuous collaboration, such as plan, develop,
    release, and monitor. Finally, you need the ability to repeat those processes
    on demand to deliver maximum value.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们谈到流程。拥有正确思维的人将是那些能够正确引导和推动流程的人，他们会应用适当的技术确保你的流程在 DevOps 的环境中适用。为了实现协同工作，你需要采用一些持续协作的流程，比如计划、开发、发布和监控。最后，你需要具备按需重复这些流程的能力，以提供最大价值。
- en: Finally, technology. By this point, the work you have undertaken in your DevOps
    transformation should have gained incredible value for your organization, but
    by introducing technology, you can add yet more value. Through automation tools,
    your processes can now be run on demand, more frequently, and, importantly, with
    a level of idempotency. This means that results with the same input parameters
    should not change over time. This is the value automation brings over human execution.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 最后是技术。到这个阶段，你在 DevOps 转型过程中所做的工作应该已经为你的组织带来了极大的价值，但通过引入技术，你可以再增加更多的价值。通过自动化工具，你的流程现在可以按需运行，更频繁地执行，且更重要的是，具有幂等性。这意味着使用相同输入参数的结果随着时间的推移不应发生变化。这就是自动化相比人工执行带来的价值。
- en: In this section, we have looked at the values that make DevOps successful. Now
    that we understand what it means to implement DevOps, we will understand the challenges
    that DevOps will solve in our organization.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了让 DevOps 成功的价值观。现在我们理解了实施 DevOps 的含义，接下来我们将理解 DevOps 在我们组织中所能解决的挑战。
- en: Challenges solved by DevOps
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 解决的挑战
- en: DevOps does solve many challenges in organizations. You need to be mindful that
    many of these challenges have existed for a significant amount of time, have become
    engrained in how people operate, and that it will take some time to unpick the
    different levels to achieve what you want to achieve.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 确实解决了组织中的许多挑战。你需要注意的是，许多挑战已经存在了相当长的时间，并深深根植于人们的工作方式中，要解决这些问题将需要一些时间。
- en: Prior to the adoption of DevOps, organizations were ordered in functional teams
    and reported to line managers, siloed away from the wider business and often each
    other. If all the conditions were met for deployment, then code was moved through
    to the operations teams to deploy the application. All these teams, along with
    others, worked individually, in isolation, resulting in time-consuming activities
    that were repeated and results that were not satisfactory.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在采用 DevOps 之前，组织通常按职能团队进行划分，并向直线经理汇报，彼此之间以及与更广泛的业务常常是孤立的。如果所有部署条件都满足，代码会被移交给运营团队进行应用部署。这些团队与其他团队一样，各自独立工作，孤立操作，导致了时间消耗大的活动被重复执行，结果也不尽如人意。
- en: 'The challenges of DevOps can generally be explained by three statements, which
    are as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 的挑战通常可以通过以下三句话来解释：
- en: Developers are unaware of quality assurance and operations roadblocks.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员对质量保障和运营中的障碍不清楚。
- en: Quality assurance and operations teams are generally unaware of the business
    purpose and value of the product.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 质量保障和运营团队通常不了解产品的商业目的和价值。
- en: As teams work individually, each team has their own set of goals, often in conflict
    with other teams' goals. This leads to inefficiencies.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当团队各自独立工作时，每个团队都有自己的目标，这些目标往往与其他团队的目标相冲突。这导致了低效率。
- en: The best example for the last point in the preceding list can be made using
    development and operations teams. The developer's priority is to release new features
    to the product quickly, while the operations team's priority is to keep the application
    available and performing highly. These two goals are conflicting, which leads
    to inefficiencies between those teams.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面列表中的最后一点，可以通过开发团队和运维团队的合作来举例。开发人员的优先任务是快速发布新特性，而运维团队的优先任务是保持应用程序的可用性和高性能。这两个目标是冲突的，导致了这两个团队之间的低效。
- en: Addressing these challenges
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决这些挑战
- en: These challenges are addressed in DevOps by making teams cross-functional, working
    in collaboration with each other and communicating about other's work and the
    end results. Overall, this approach increases the feedback's quality and resolves
    issues with existing automation.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这些挑战通过在 DevOps 中将团队转变为跨职能团队来解决，团队成员之间相互协作并沟通彼此的工作及最终结果。总体而言，这种方法提高了反馈的质量，并解决了现有自动化中的问题。
- en: In DevOps, most processes are continuous. With the help of feedback cycles to
    improve on what you already have, this gives you the ability to constantly mature
    and evolve your processes, thus learning from previous situations and becoming
    a more mature team.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DevOps 中，大多数过程是持续的。通过反馈周期来改进已有的内容，这使你能够不断地成熟和演变你的过程，从而从以往的情况中学习，成为一个更加成熟的团队。
- en: Important ote
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Addressing the challenges of DevOps is a time-consuming task; you should not
    expect instant results from a few days or weeks of effort. It will take many months
    to achieve the goals you have set out.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 解决 DevOps 挑战是一个耗时的任务；你不应指望通过几天或几周的努力就能看到即时效果。要实现你设定的目标，可能需要几个月的时间。
- en: Now that we have understood the challenges associated with DevOps, it's time
    to look at the phases of maturity in DevOps and see how an organization will progress
    based on them.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了与 DevOps 相关的挑战，是时候看看 DevOps 中的成熟度阶段，并了解一个组织如何根据这些阶段进行进展。
- en: Phases of DevOps maturity
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 成熟度阶段
- en: Organizations should be looking to mature the more they process and adopt different
    DevOps best practices. This is known as maturity, and four phases are used to
    describe the phases of maturity in DevOps.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 组织应该随着处理和采纳不同的 DevOps 最佳实践而逐步成熟。这被称为成熟度，四个阶段用于描述 DevOps 中的成熟度阶段。
- en: 'These phases are as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这些阶段如下：
- en: Waterfall
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 瀑布式
- en: Continuous integration
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续集成
- en: Continuous delivery
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续交付
- en: Continuous deployment
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续部署
- en: Throughout the cycle of DevOps transformation, organizations should move from
    waterfall toward continuous deployment, visiting each stage along the way. However,
    it is worth noting that waterfall is not always the starting point; some organizations
    start later in the phases.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DevOps 转型的过程中，组织应从瀑布式方法逐步向持续部署过渡，并在此过程中访问每个阶段。然而，值得注意的是，瀑布式方法并不总是起始点；一些组织在后期才开始进入这些阶段。
- en: During the transformation process, you will find that different teams gain maturity
    quicker than others. There are many factors for this, including the type of work
    that the team does, the processes they have to follow, and, to a degree, the level
    of automation and tooling they already have in place.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在转型过程中，你会发现不同的团队成熟的速度不同。造成这种差异的因素有很多，包括团队所做的工作类型、他们必须遵循的流程，以及一定程度上他们已有的自动化和工具的水平。
- en: Waterfall
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 瀑布式
- en: The term waterfall will be common to you if you have worked on projects in the
    past. Waterfall is a project delivery mechanism where tasks are completed in a
    sequential order to achieve a specific goal. It can also be used to explain a
    method of software development.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前在项目中工作过，“瀑布式”这个术语你一定会很熟悉。瀑布式是一种项目交付机制，任务按顺序完成，以实现特定目标。它也可以用来解释一种软件开发的方法。
- en: Where development teams write code over a long period of time, those teams then
    merge their code in order to release the latest version. In this case, so many
    changes have been made to the code base that integrating the new version could
    take months. This is because the code looks so different from the previous version.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 开发团队在长时间内编写代码后，这些团队会将代码合并，以发布最新版本。在这种情况下，代码库已经进行了许多更改，集成新版本可能需要几个月的时间。这是因为代码与之前的版本差异太大。
- en: Waterfall has been in the world of project management for a long time, and even
    with the adoption of Agile getting more and more popular, many projects are executed
    using the waterfall methodology successfully.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 瀑布模型已经在项目管理领域存在很长时间了，即使敏捷方法越来越流行，许多项目仍然使用瀑布方法成功执行。
- en: 'The advantages of using waterfall as a delivery method are as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用瀑布交付方法的优势如下：
- en: Simple model to use and easy to understand.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型简单易用，易于理解。
- en: Rigidity makes it easy to manage; each phase has specific deliverables.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于其僵化性，管理起来较为简单；每个阶段都有明确的交付物。
- en: In smaller projects, it works well as the requirements are well understood.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在较小的项目中，由于需求已经非常明确，它能够很好地运作。
- en: Stages for delivery are clearly defined.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交付阶段被明确定义。
- en: Milestones are well understood.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 里程碑已被充分理解。
- en: Arranging tasks with resources is simple.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务与资源的安排简单易行。
- en: Processes and their results are well documented.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过程及其结果有详细的文档记录。
- en: 'That being said, waterfall does have several disadvantages, as with all process
    models. Some of these disadvantages are as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，瀑布模型确实存在一些缺点，正如所有过程模型一样。以下是其中一些缺点：
- en: No time for revision or reflection.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有时间进行修订或反思。
- en: High amounts of risks and uncertainty.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 风险和不确定性很高。
- en: Not a good model for projects that are complex and object-oriented.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于复杂且面向对象的项目而言，这不是一个好的模型。
- en: Poor model for long-term projects.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于长期项目而言，模型效果不佳。
- en: No working software is produced until late in the project.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直到项目后期才会产生可工作的软件。
- en: Measuring success within stages is difficult.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在各个阶段衡量成功是困难的。
- en: Integration is done at the end in a big bang, making identifying bottlenecks
    hard.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成在最后以大爆炸方式进行，使得识别瓶颈变得困难。
- en: Agile addresses some of these challenges and together with DevOps, you can address
    a large number of the challenges described here.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷方法解决了这些挑战，并且与DevOps结合使用，可以解决许多在这里描述的挑战。
- en: Continuous integration
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续集成
- en: '**Continuous integration** (**CI**) is the practice of quickly integrating
    newly developed code with the rest of the application code to be released. This
    saves time when the application is ready to be released. This process is usually
    automated and produces a build artifact at the end of the process.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）是将新开发的代码快速与其余应用程序代码集成的实践，直到最终发布。这样可以在应用程序准备发布时节省时间。这个过程通常是自动化的，并在过程结束时生成构建工件。'
- en: 'The process of CI contains a number of steps, and these are critical to achieving
    CI, which is meaningful and efficient. Automated testing is the first step toward
    CI. Four main types of tests exist that can be automated as part of CI. These
    tests are as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成（CI）过程包含多个步骤，这些步骤对于实现有意义且高效的持续集成至关重要。自动化测试是实现持续集成的第一步。持续集成中有四种主要类型的测试可以自动化。这些测试如下：
- en: '**Unit tests**: Tests that are narrow in their scope. They usually focus on
    a specific part of code, such as the method of a function, and is used to test
    the behavior of a given set of parameters.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**：测试的范围较窄，通常聚焦于特定的代码部分，例如函数的方法，用于测试给定参数集的行为。'
- en: '**Integration tests**: Ensures that different components work together. This
    can involve several parts of your application, as well as other services.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成测试**：确保不同组件能够协同工作。这可能涉及到应用程序的多个部分，以及其他服务。'
- en: '**Acceptance tests**: In many ways, this is similar to integration tests. The
    big difference is that acceptance tests focus on the business case.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验收测试**：在许多方面，这与集成测试相似。最大区别在于，验收测试聚焦于业务案例。'
- en: '**User interface tests**: Tests that focus on how the application performs
    from a user''s perspective.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户界面测试**：专注于从用户的角度测试应用程序的性能。'
- en: Important note
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: One vitally important element of CI is that you integrate early and integrate
    often.
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 持续集成的一个至关重要的要素是，进行早期集成并频繁集成。
- en: When you integrate early and often, you reduce the scope of changes, which,
    in turn, makes it easier to identify and understand conflicts when they occur.
    Another big advantage of this approach is that sharing knowledge is easier as
    the changes are more digestible than big bang sets of code changes.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当你进行频繁且早期的集成时，你能够减少变更范围，从而更容易在发生冲突时识别和理解冲突。这个方法的另一个大优点是，随着变更变得更易于消化，知识共享变得更加容易，而不像大规模的代码变更那样难以处理。
- en: Another note is that if the main branch becomes broken by a commit in code,
    then the number one priority is fixing it. The more changes that are made to the
    build while it's broken, the harder it will become to understand what has broken
    it.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个要注意的事项是，如果主分支由于代码提交而出现问题，那么优先级最高的是修复它。在构建失败时，越多的更改会使得理解问题的根源变得越难。
- en: Every new piece of work that you implement should have its own set of tests.
    It's important to get into this habit of writing granular tests and aiming for
    a level of code coverage, as this gives you a comfortable level of knowledge that
    you are testing the functionality of your application sufficiently.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 每一个新实现的工作都应该有一套独立的测试。养成编写细粒度测试并追求一定代码覆盖率的习惯非常重要，因为这样可以让你有足够的信心，确保你正在充分测试应用程序的功能。
- en: The value of CI is realized when the team makes changes on a frequent basis.
    It's important to make sure that your team integrate these changes daily. Integrating
    often, as you may recall, is key to making sure we can easily identify what is
    broken.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成的价值在于团队频繁地进行更改时得以体现。确保团队每天都进行这些更改集成非常重要。正如你所记得的那样，频繁集成是确保我们能够轻松识别问题所在的关键。
- en: Continuous delivery
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续交付
- en: '**Continuous delivery** (**CD**) is an approach where teams release products
    frequently and with high quality, and with a level of predictability from source
    code repositories through to a production environment using automation. It builds
    on the work that''s done in CI to take the build artifact and then deliver that
    build to a production environment.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续交付**（**CD**）是一种方法，团队通过自动化工具频繁且高质量地发布产品，并从源代码库到生产环境都具有可预测性。这是在持续集成（CI）工作的基础上，利用构建工件将构建成果交付到生产环境。'
- en: CD is, in fact, a collection of best practices associated with Agile. It focuses
    your organizations on developing a highly streamlined and automated software release
    process. At the core of the process is an interactive feedback loop.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付实际上是与敏捷方法相关的一系列最佳实践。它将你的组织聚焦于开发一个高度精简和自动化的软件发布流程。这个流程的核心是一个互动的反馈环。
- en: This feedback loop, sometimes referred to as continuous feedback, centers around
    delivering software to the end users as quickly as possible, learning from experience,
    and then taking that feedback and incorporating it into the next release.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这个反馈环路，有时称为持续反馈，着重于尽快将软件交付给最终用户，通过经验学习，然后将这些反馈纳入到下一次发布中。
- en: CD is a separate process to CI, but they chain off each other and in mature
    organizations, they are used together. This means that on top of the work you
    have done in CI to attain levels of automated testing, you can now automatically
    deploy all those changes after the build stage.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付是一个独立于持续集成的过程，但它们是相互关联的，在成熟的组织中，二者是一起使用的。这意味着，在你为实现自动化测试所做的持续集成工作之上，你现在可以在构建阶段之后，自动部署所有这些更改。
- en: With CD, you can decide on a schedule that best suits your organization, whether
    that's daily, weekly, or monthly – whatever your requirements may be. If you want
    to get the true benefits of CD, then deploy to production as soon as possible
    to make sure that you release small batches that are easy to solve in case of
    problems that may arise.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 通过持续交付，你可以决定最适合组织的发布计划，无论是每日、每周还是每月——根据你的需求来定。如果你想获得持续交付的真正好处，那就应该尽快部署到生产环境，确保发布的小批量可以在出现问题时轻松解决。
- en: Continuous deployment
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续部署
- en: Continuous deployment is one step beyond continuous delivery. Every change that
    passes through all the stages of your production pipeline is released to your
    customers. There is no human intervention – a failed test, at this stage, will
    prevent new releases to production.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 持续部署是持续交付的进一步发展。每一个通过生产流水线所有阶段的更改都会直接发布给客户。没有人工干预——在此阶段，测试失败会阻止新的版本发布到生产环境。
- en: 'Continuous deployment is a great way to speed up the feedback loop and take
    the pressure off as there is no release day. Developers are then able to focus
    on building high quality software while seeing their work go live minutes after
    they''ve finished working on it. Continuous integration is part of both continuous
    delivery and continuous deployment. Continuous deployment is very similar to continuous
    delivery; the difference is that releases take place automatically:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 持续部署是加速反馈循环并减轻压力的好方法，因为没有发布日。开发人员可以专注于构建高质量的软件，同时在完成工作后的几分钟内看到自己的工作上线。持续集成是持续交付和持续部署的一部分。持续部署与持续交付非常相似；它们的区别在于，发布是自动进行的：
- en: '![Figure 1.1 – Showing the differences between continuous integration, delivery,
    and deployment'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.1 – 显示持续集成、持续交付和持续部署之间的差异'
- en: '](img/B17192_01_01.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17192_01_01.jpg)'
- en: Figure 1.1 – Showing the differences between continuous integration, delivery,
    and deployment
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – 显示持续集成、持续交付和持续部署之间的差异
- en: In this section, we have looked at the major phases of maturity in DevOps. Armed
    with this information, we can now look at how Agile plays a role in DevOps.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已了解了 DevOps 成熟度的主要阶段。掌握了这些信息后，我们可以进一步探讨敏捷在 DevOps 中的作用。
- en: How does Agile play a part in DevOps?
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 敏捷在 DevOps 中扮演了什么角色？
- en: It is common to confuse the terms Agile and DevOps. Both are used together frequently
    and can be used interchangeably, but they are mutually exclusive terms. Where
    DevOps is the practice of bringing together development and operations teams,
    Agile is an iterative approach that focuses on collaboration, feedback, and small
    rapid releases.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 常常会混淆“敏捷”（Agile）和“DevOps”这两个术语。它们经常一起使用，甚至可以互换使用，但它们是互斥的术语。DevOps 是将开发团队和运维团队结合起来的实践，而敏捷则是一种强调协作、反馈和小规模快速发布的迭代方法。
- en: While both are exclusive, you will find that, by the short comparison provided
    previously, the goals and values of DevOps are those of Agile as well. Agile is
    a key part of DevOps. While Agile focuses on constant changes and making developers
    and development cycles more efficient, DevOps brings in the operations teams to
    enable continuous integration and continuous delivery.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然两者是互斥的，但从前面的简短对比中，你会发现 DevOps 的目标和价值观也是敏捷的目标和价值观。敏捷是 DevOps 的关键部分。尽管敏捷专注于持续变化，并使开发人员和开发周期更加高效，DevOps
    则引入了运维团队来实现持续集成和持续交付。
- en: As a project delivery framework, Agile helps address some of the disadvantages
    of waterfall. It would be very difficult, if not impossible, to implement DevOps
    using waterfall practices due to the practices of continuous integration, continuous
    deployment, and continuous delivery. This is one major reason why, in organizations
    that practice DevOps well, teams use Agile as a delivery method.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个项目交付框架，敏捷帮助解决了瀑布模型的一些缺点。由于持续集成、持续部署和持续交付的实践，使用瀑布模型实现 DevOps 是非常困难的，甚至是不可能的。这也是为什么在那些成功实践
    DevOps 的组织中，团队会选择使用敏捷作为交付方法的一个主要原因。
- en: The Agile manifesto
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 敏捷宣言
- en: In 2001, 17 people met in the Wasatch Mountains in Snowbird, Utah. Their aim
    was to discuss the future of software development. What followed was an agreement
    on the frustration of the current situation of software development, even if the
    group could not agree on how to resolve the situation.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 2001 年，17 位成员在犹他州雪鸟的 Wasatch 山脉中会面。 他们的目标是讨论软件开发的未来。接下来达成的是关于当前软件开发现状的沮丧，即使小组无法就如何解决这一问题达成一致。
- en: 'The group agreed that organizations were too focused on planning and documenting
    their software development cycles, which meant organizations lost focus and sight
    of what was important: customer satisfaction.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 小组一致认为，组织过于专注于规划和记录软件开发周期，这导致组织失去了关注的重点——客户满意度。
- en: Most organizations discuss corporate values such as excellence and integrity,
    but these values have done nothing to foster people toward a better way of working,
    especially software developers. This was something that needed to change. Several
    members of the Snowbird 17, as they came to be known, already had ideas about
    how to revolutionize software development and start a new era. This trip to the
    mountains was the group's chance to define this new era.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数组织讨论企业价值观，如卓越和诚信，但这些价值观并没有促使人们走向更好的工作方式，尤其是软件开发人员。这是一个需要改变的地方。被称为“雪鸟 17”的几位成员已经有了如何改革软件开发并开启新纪元的想法。这次前往雪鸟山的旅程是该小组定义新纪元的机会。
- en: What came out of this trip was the Agile manifesto. At just 68 words, this short
    and sweet document changed software development forever. The publication of the
    12 principles defined in the manifesto has arguably led to the biggest change
    in software development. In the two decades that have followed, these 12 principles
    have been embraced by individuals, teams, and organizations around the world.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这次旅行的成果就是敏捷宣言。仅68个字，这份简洁的文件永远改变了软件开发。宣言中定义的12条原则的发布可以说是软件开发历史上最大的变革。在随后的二十年里，这12条原则被世界各地的个人、团队和组织广泛采用。
- en: Defining culture
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文化定义
- en: The Agile landscape is cluttered with ideas that seem to take Agile and transform
    them into real-world scenarios. This isn't anything new, though; in fact, the
    manifesto was born out of the need to find some common ground between Scrum, Crystal
    Clear, Extreme Programming, and other frameworks.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷领域充斥着许多看似将敏捷转化为实际场景的想法。然而，这并不新鲜；事实上，宣言的诞生源于寻找Scrum、Crystal Clear、极限编程和其他框架之间的共同点。
- en: One of the biggest goals of the Snowbird 17 was to see if the representatives
    of these frameworks could agree – they did. The agreement ended up as a set of
    values that define a culture.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Snowbird 17 的最大目标之一是看看这些框架的代表是否能达成一致——他们做到了。最终达成的协议形成了一套定义文化的价值观。
- en: 'The Agile manifesto defines the following set of values:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷宣言定义了以下价值观：
- en: Individuals and interactions over processes and tools
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 个人和互动优于流程和工具
- en: Working software over comprehensive software
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可工作的软件优于全面的软件
- en: Customer collaboration over contract negotiation
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户协作优于合同谈判
- en: Responding to change over following a plan
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 响应变化优于遵循计划
- en: You can look at the full manifesto that came out of the meeting in the mountains
    on the Agile Manifesto website at [http://Agilemanifesto.org/](http://Agilemanifesto.org/).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以访问在山上会议中产生的完整宣言，地址为 [http://Agilemanifesto.org/](http://Agilemanifesto.org/)。
- en: Another product of the summit was the 12 principles ([https://agilemanifesto.org/principles.html](https://agilemanifesto.org/principles.html)),
    which adhere to these values. They expand on the preceding four sentences that
    make up the values.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个来自峰会的产物是12条原则（[https://agilemanifesto.org/principles.html](https://agilemanifesto.org/principles.html)），它们遵循这些价值观。它们扩展了构成这些价值观的四个句子。
- en: 'These 12 principles are as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这12条原则如下：
- en: Our highest priority is to satisfy the customer through early and continuous
    delivery of valuable software.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的最高优先级是通过早期和持续交付有价值的软件来满足客户需求。
- en: Welcome changing requirements, even late in development. Agile processes harness
    change for the customer's competitive advantage.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欢迎变更需求，即使在开发后期。敏捷流程利用变化为客户提供竞争优势。
- en: Deliver working software frequently, from a couple of weeks to a couple of months,
    with a preference for a shorter timescale.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经常交付可工作的软件，从几周到几个月不等，优先选择较短的时间周期。
- en: Businesspeople and developers must work together daily, throughout the project.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 商务人员和开发人员必须在项目期间每天合作。
- en: Build the project around motivated individuals. Give them the environment and
    support they need and trust them to get the job done.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 围绕积极的个体构建项目。为他们提供所需的环境和支持，并信任他们完成工作。
- en: The most efficient and effective method of conveying information to and within
    a development team is face-to-face conversation.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向开发团队及其内部传递信息的最有效方法是面对面的交流。
- en: Working software is the primary measure of progress.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可工作的软件是进展的主要衡量标准。
- en: Agile processes promote sustainable development. The sponsors, developers, and
    users should be able to maintain a constant pace indefinitely.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敏捷流程促进可持续发展。赞助商、开发人员和用户应能够保持稳定的工作节奏，持续不断地推进。
- en: Continuous attention to technical excellence and good design enhances agility.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续关注技术卓越和良好设计能够增强敏捷性。
- en: Simplicity – the art of maximizing the amount of work not done is essential.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简洁——最大化减少不必要工作的艺术至关重要。
- en: The best architectures, requirements, and designs emerge from self-organizing
    teams.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最好的架构、需求和设计源自自组织团队。
- en: At regular intervals, the team reflects on how to become more effective, then
    tune and adjust their behavior accordingly.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定期反思团队如何变得更有效，然后根据情况调整和优化他们的行为。
- en: Even if you had very little exposure to Agile and DevOps before reading this
    book, in those 12 principles, I hope you can see the connection between what we
    have explored so far and the principles of the Agile manifesto.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你在阅读本书之前对敏捷和DevOps的了解很少，我希望你能在那12条原则中看到我们迄今为止探索的内容与敏捷宣言原则之间的联系。
- en: Do Agile and DevOps work together?
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 敏捷和DevOps能否协同工作？
- en: Agile and DevOps can sound like very different concepts. In fact, most people
    I speak to in the early stages of transformation are very confused by the idea
    of both. This confusion is also compounded as both have their own jargon and slogans.
    It is common for people to become frustrated with the plethora of definitions
    for DevOps.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷和DevOps听起来像是两个截然不同的概念。事实上，在转型初期，我与许多接触的人对这两个概念感到非常困惑。这种困惑也因为两者各自有自己的术语和口号而加剧。人们通常对DevOps众多的定义感到沮丧。
- en: Most people think that when you say Agile, you mean Scrum, and that when you
    say DevOps, you really mean continuous delivery. This simplification then creates
    tension between Agile and DevOps, to the degree that you would be forgiven for
    not realizing that Agile and DevOps are friends.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人认为，当你提到“敏捷”时，你指的是Scrum，而当你提到“DevOps”时，你实际上指的是持续交付。这种简化的理解导致了敏捷与DevOps之间的紧张关系，甚至让人误以为敏捷和DevOps是敌人。
- en: It was back in 2008, at the Agile Conference, that a session about Agile Infrastructure
    by Patrick Debois and Andrew Clay Schafer was undertaken, and the connection to
    DevOps was born. Patrick later coined the term DevOps, and the Agile Conference
    continues with a DevOps track to this day.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 早在2008年，在敏捷大会上，Patrick Debois和Andrew Clay Schafer主持了一场关于敏捷基础设施的讲座，DevOps与敏捷的关系由此诞生。Patrick随后创造了“DevOps”这个术语，敏捷大会至今仍然设有DevOps主题。
- en: There is more to this than history, though. Now, let's look at the practical
    connections between Agile and DevOps by looking deeper than Scrum and continuous
    delivery.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 但这不仅仅是历史的原因。现在，让我们深入了解敏捷和DevOps之间的实际联系，超越Scrum和持续交付的范畴。
- en: Agile is more than Scrum
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 敏捷不仅仅是Scrum
- en: At the point when the limitations of the business or the work itself request
    something else, a deft group will use the basic standards of Scrum, review their
    practices, and adjust them to turn out to be more viable. This is especially significant
    when Scrum is applied external to the setting of programming advancement.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当业务或工作本身的局限性要求做出改变时，一个灵活的团队会运用Scrum的基本原则，审视自己的实践，并对其进行调整以提高效率。尤其在Scrum应用于软件开发之外的领域时，这一点尤为重要。
- en: Dealing with unplanned work
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理未计划的工作
- en: 'In the DevOps people group, those with Agile experience recognize that Scrum
    is helpful for following arranged work. Some work in activities can be arranged:
    delivering a major framework change, moving between server farms, or performing
    framework overhauls. In any case, a large part of crafting tasks is spontaneous:
    execution spikes, framework blackouts, and traded off security. These occasions
    request quick reaction. There''s no longer an ideal opportunity to trust that
    the things will be organized in excess or for the following run arranging meeting.
    Consequently, numerous groups that have come to grasp DevOps thinking look past
    Scrum to Kanban. This encourages them track the two sorts of work and causes them
    to comprehend the interaction between them. Then again, they embrace a cross-breed
    approach, frequently called Scrumban or Kanplan (Kanban with an accumulation).'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在DevOps社群中，那些有敏捷经验的人认识到，Scrum对于跟踪计划中的工作是非常有帮助的。一些工作可以预先安排：比如交付一个重要的框架变更，迁移到不同的服务器，或进行系统升级。然而，很多任务的执行是自发的：如执行冲刺、系统故障、以及安全漏洞等。这些事件要求快速响应。此时，已没有时间等待任务的过度排队或等到下一个规划会议。因此，许多已经接受DevOps思想的团队，会把目光从Scrum转向Kanban。这使他们能够同时跟踪两种工作，并理解它们之间的互动。另一方面，他们采用一种混合方法，通常被称为Scrumban或Kanplan（Kanban加积累）。
- en: From various perspectives, the way into Scrum's wide appropriation might be
    that it endorses no specialized practices. Scrum's lightweight administration
    rehearses frequently have a major effect on a group. Where there was once contending
    needs from different experts, there is currently a solitary arrangement of needs
    in the overabundance. What's more, where there was once an excessive amount of
    work in advancement, there is currently an arrangement that's obliged by what
    time has demonstrated is truly conceivable. In the mix, these can take a group
    higher than ever in terms of efficiency. Be that as it may, the group may wind
    up obliged due to the absence of specialized practices, such as coding audits,
    computerized acknowledgment tests, and persistent joining.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 从多个角度来看，Scrum 广泛应用的关键可能在于它不提倡任何技术实践。Scrum 轻量级的管理实践通常对团队产生很大影响。在之前，团队中可能有来自不同专业的需求冲突，而现在，所有的需求都集中在额外任务中。而且，曾经开发中的工作量过大，现在的工作量则由时间实际能完成的任务所限制。通过这种方式，这些变化可以帮助团队提高效率。然而，由于缺乏技术实践，如代码审查、自动化验收测试和持续集成，团队可能会感到受限。
- en: Other Agile cycles such as Extreme Programming have solid feelings about how
    specialized practices uphold the group's capacity to keep an economical movement
    and give straightforwardness and perceivability to executives and partners. Some
    Scrum groups resort to placing specialized undertakings in this overabundance.
    While that fits well for the direction of Scrum, it rapidly hits the handy issue
    of Product Owner inclination toward highlights. Unless the Product Owner is very
    specialized, she or he might not have the right stuff to assess the cost/advantage
    of specialized practices. That gets much harder for a Product Owner as the specialized
    assignments stretch into tasks to help unwavering quality, execution, and security.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 其他敏捷周期，例如极限编程，明确表达了技术实践如何支持团队保持高效流动并为管理者和相关方提供透明度和可见性。一些 Scrum 团队会把技术任务放入这些额外任务中。虽然这对于
    Scrum 的指导是合理的，但它很快会面临产品负责人对功能的偏好这一实际问题。除非产品负责人具有非常强的技术背景，否则他们可能没有足够的技能来评估技术实践的成本/效益。当技术任务涉及到支持可靠性、性能和安全性的项目时，产品负责人面临的难度更大。
- en: What is Scrum?
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 Scrum？
- en: Scrum is a system that assists groups with cooperating. Scrum urges groups to
    learn through encounters, self-coordinate while dealing with an issue, and consider
    their successes and misfortunes to constantly improve.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Scrum 是一个帮助团队合作的系统。Scrum 鼓励团队通过经验学习，在处理问题时自我协调，并回顾他们的成功与失败，以不断改进。
- en: While the Scrum I'm discussing is most often utilized by programming improvement
    groups, its standards and exercises can be applied to a wide range of cooperation.
    This is one reason Scrum is so well-known. Regularly considered as a coordinated
    venture of the board system, Scrum depicts a bunch of gatherings, apparatuses,
    and jobs that work together to help groups structure and deal with their work.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我所讨论的 Scrum 最常被程序开发团队使用，但它的原则和实践可以应用于各种合作。这也是 Scrum 如此流行的原因之一。Scrum 通常被视为一种协作项目管理方法，描述了一组活动、工具和角色，它们共同协作以帮助团队构建和管理他们的工作。
- en: 'Applying Scrum within your organization is no easy task and you will come up
    against a whole new set of terminology. Here is a short list, which is by no means
    exhaustive:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的组织中应用 Scrum 不是一项简单的任务，你会遇到一整套全新的术语。这里有一个简短的清单，尽管它并不全面：
- en: Sprints
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sprint
- en: Sprint planning
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sprint 计划
- en: Ceremonies
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仪式
- en: Backlog
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 待办事项
- en: Retrospective
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回顾
- en: Standups
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 站会
- en: While Scrum is probably one of the most common frameworks in Agile, many others
    do exist. Kanban and Kanplan, for example, as we will discuss next, are useful
    for organizations that are new to Agile.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Scrum 可能是敏捷中最常用的框架，但也有许多其他框架。比如看板和 Kanplan，正如我们接下来要讨论的，它们对新接触敏捷的组织非常有用。
- en: Kanban
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 看板
- en: Kanban is a well-known structure that's used to execute Agile and DevOps programming
    advancement. It requires continuous communication of work limits and provides
    a clear view of work which is planned, in progress, and completed.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 看板是一种常见的框架，用于执行敏捷和 DevOps 软件开发。它需要持续沟通工作限制，并提供一个清晰的视图，显示计划中的工作、进行中的工作和已完成的工作。
- en: Kanban works by placing work on a physical or digital board. This visualization
    enables you limit work in progress and maximize your efficiency, sometimes referred
    to as the flow of your teams.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Kanban 通过将工作放置在物理或数字看板上来工作。这种可视化使你能够限制在制品的数量，并最大化你的工作效率，有时被称为团队的流动（flow）。
- en: Many people use a form of Kanban board for their everyday work. In fact, I know
    plenty of people who use one for everyday common tasks around the home. The board
    is split into various columns, and these columns define the different statuses
    of tasks.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人在日常工作中使用某种形式的 Kanban 看板。事实上，我认识很多人，他们在家里做日常任务时也会用看板。这个看板被分成不同的列，每一列定义了任务的不同状态。
- en: Your Kanban board will also define limits around work in progress items, delivery
    points, and commitment points.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 Kanban 看板还将定义在制品（work in progress）、交付点和承诺点方面的限制。
- en: Kanplan
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kanplan
- en: You may not have heard of the term Kanplan before. It is a mixture of methodologies,
    but something that may be right for your team.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能没听说过“Kanplan”这个词。它是一种方法论的混合，但也许正适合你的团队。
- en: Important note
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: When it comes to picking an Agile framework for your team, there is no silver
    bullet. Different methodologies in the framework have pros and cons based on many
    different parameters. Every team will need to determine which framework will work
    best for them when it comes to planning, tracking, and releasing software.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 当为团队选择敏捷框架时，并没有“灵丹妙药”。框架中不同的方法论根据许多不同的参数有其优缺点。每个团队都需要确定哪个框架最适合他们在规划、跟踪和发布软件时的需求。
- en: Kanplan combines features from both Scrum and Kanban. It is ideal for teams
    who want the ability to groom their backlog, but do not have the ability to work
    in sprints. It provides a great mix because teams cannot always apply the whole
    of Scrum, including sprints, but can quite easily work with Kanplan to start getting
    a better handle on their work, work in progress, their backlog, and the priority
    of the work in that backlog.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Kanplan 结合了 Scrum 和 Kanban 的特点。它非常适合那些希望整理待办项但没有能力进行冲刺（sprint）的团队。它提供了一个很好的折中，因为团队并不总能完全应用
    Scrum 的所有内容（包括冲刺），但可以很容易地使用 Kanplan 开始更好地管理他们的工作、在制品、待办项以及这些待办项的优先级。
- en: Mixing methodologies within organizations
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在组织内混合方法论
- en: There is nothing wrong at all with different teams adopting different methodologies
    of the Agile framework, mixing them together, and making it work for them. I've
    not worked with any organization who can simply lift something out of an Agile
    textbook and implement it in their organization.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的团队采用敏捷框架中的不同方法论，互相混合并使之适合自己，并没有什么不对。我从未与任何一个组织合作过，他们能够简单地从敏捷教科书中挑选某种方法并在他们的组织中实施。
- en: Think of operational teams who cannot work with traditional Scrum, mostly because
    their work contains elements of unplanned work such as incidents. For them, Kanban
    works well as it puts no emphasis on planning. Think of a full DevOps teams working
    on a product within your organization. Here, the normal approach of Scrum would
    work for them as everything is within their control and they have no reliance
    on external teams.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 想想那些无法使用传统 Scrum 的运营团队，主要是因为他们的工作中包含了许多不可预见的工作，如事故处理。对于他们来说，Kanban 非常适用，因为它不强调规划。再想想在你们组织中，负责产品的完整
    DevOps 团队。在这种情况下，传统的 Scrum 方法对他们是有效的，因为一切都在他们的控制之内，并且他们不依赖于外部团队。
- en: Finally, think of engineering teams who want to be more Agile, but work with
    other teams who do not practice any level of Agile. This is a tricky situation
    as there is a need to be more Agile to deliver better quality but no appetite
    in the rest of the organization to adopt Agile methodologies. In this example,
    Kanplan would work well for them, giving them the ability to groom a backlog of
    work based on priority, then work in a Kanban-style board, which enables them
    to visually see work, work in progress limits, and work done.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，想想那些希望更具敏捷性的工程团队，但又需要与其他不实践任何敏捷方法的团队合作。这是一个棘手的情况，因为虽然他们希望更具敏捷性以交付更高质量的工作，但组织内其他团队没有采纳敏捷方法论的意愿。在这种情况下，Kanplan
    对他们来说是个不错的选择，它能让他们根据优先级整理工作待办项，并在 Kanban 风格的看板上进行工作，从而使他们能够直观地看到工作、在制品限制以及已完成的工作。
- en: This approach is a great starting point for teams who fit this description,
    and it will enable them to work toward a higher quality of work, integrating some
    of the technical methods of DevOps without needing the rest of the organization
    to follow suit.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法是适合这种描述的团队的一个很好的起点，它将使他们朝着更高质量的工作目标迈进，能够在不需要整个组织跟进的情况下，融入一些DevOps的技术方法。
- en: Scaling Agile teams
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展敏捷团队
- en: Through what we've learned so far, we can see how implementing Agile in our
    organization can provide several benefits. However, organizations are bigger than
    individual teams, and you may have several teams working on one product. It is
    at this point that we need to understand how Agile can be scaled up to many teams
    within one organization. As opposed to implementing Agile at an individual team
    level, which is relatively easy, implementing across the organization is a real
    challenge.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 通过我们到目前为止学到的内容，我们可以看到在组织中实施敏捷可以带来许多好处。然而，组织的规模远大于单个团队，你可能会有多个团队共同开发一个产品。此时我们需要理解如何将敏捷扩展到一个组织中的多个团队。与在单个团队层面实施敏捷相比，后者相对容易，企业级的实施才是真正的挑战。
- en: Scaling Agile at an enterprise level requires that we adopt Agile concepts,
    as well as Lean-Agile at a functional level. This includes finance, procurement,
    HR, and sales, for example. At the enterprise level, Agile is practices being
    implemented across many teams and lots of engineers working in a portfolio manner.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在企业级别扩展敏捷要求我们采用敏捷概念，以及在职能层面采用精益敏捷。这包括财务、采购、人力资源和销售等领域。在企业级别，敏捷是跨多个团队和大量工程师以投资组合方式进行实施的实践。
- en: Important note
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: Scaling Agile in the enterprise requires you to think functionally. So far,
    what we have explored is at a team level. To scale Agile, you must think of it
    as an organization-wide effort.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在企业中扩展敏捷要求你从职能角度思考。到目前为止，我们所探讨的内容仅限于团队层面。要扩展敏捷，你必须把它看作是一项全组织的工作。
- en: Netflix coined the phrase *highly aligned, loosely coupled*, and you can still
    see this phrase on their main jobs page. It describes a highly mature organization
    that uses Agile development across the whole enterprise.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: Netflix创造了“*高度一致，松散耦合*”这一短语，你仍然可以在他们的主要招聘页面看到这句话。它描述了一个高度成熟的组织，整个企业都使用敏捷开发。
- en: Two models that are highly popular when it comes to scaling Agile at the enterprise
    level are the **Scaled Agile Framework** (**SAFe**) ([https://www.scaledagile.com/enterprise-solutions/what-is-safe/](https://www.scaledagile.com/enterprise-solutions/what-is-safe/))
    and the Spotify model for scaling Agile in the enterprise ([https://www.atlassian.com/agile/agile-at-scale/spotify](https://www.atlassian.com/agile/agile-at-scale/spotify)).
    Both are very popular, so let's look at them both in more detail.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 当谈到在企业级别扩展敏捷时，两个非常受欢迎的模型是**规模化敏捷框架**（**SAFe**）([https://www.scaledagile.com/enterprise-solutions/what-is-safe/](https://www.scaledagile.com/enterprise-solutions/what-is-safe/))和Spotify模型([https://www.atlassian.com/agile/agile-at-scale/spotify](https://www.atlassian.com/agile/agile-at-scale/spotify))。这两者都非常受欢迎，所以我们来更详细地了解它们。
- en: Scaled Agile Framework
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 规模化敏捷框架
- en: 'Taken directly from the SAFe website, this is the definition of SAFe:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 直接引用自SAFe官网，这是SAFe的定义：
- en: '''''Scaled Agile Framework (SAFe) empowers complex organizations to achieve
    the benefits of Lean-Agile software and systems development at scale.'''''
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '''''规模化敏捷框架（SAFe）使复杂的组织能够在大规模上实现精益敏捷软件和系统开发的好处。'''''
- en: 'The framework defines four core values:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 该框架定义了四个核心价值：
- en: Alignment
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一致性
- en: Built-in quality
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内建质量
- en: Transparency
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 透明性
- en: Program execution
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序执行
- en: 'SAFe is actually pretty broad and covers four primary areas: Agile development,
    lean product development, systems thinking, and DevOps. However, its core places
    more value on the four values described in the preceding list.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: SAFe实际上涵盖了四个主要领域：敏捷开发、精益产品开发、系统思维和DevOps。然而，它的核心更注重前述列表中描述的四个价值观。
- en: Alignment is needed to ensure you keep pace with changes that are happening
    fast, disruptive competitive forces, and geographically dispersed teams. Alignment
    is key in these scenarios since Agile teams are great, but strategy and alignment
    does not and cannot rest with opinions from all the Agile teams. Alignment comes
    from enterprise-level business objectives.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 一致性是确保你跟上快速变化、破坏性竞争力量和地域分散团队的步伐所必需的。在这些场景中，一致性至关重要，因为敏捷团队非常出色，但战略和一致性不能仅仅依赖所有敏捷团队的意见。一致性来自于企业级的商业目标。
- en: The larger the system, the higher the quality. There can be no argument as to
    the importance of quality, especially in large systems. Built-in quality ensures
    that every element in the overall solution reflects the quality that's required
    over the entire life cycle of development. You can think of this with Agile testing,
    **behavior-driven development** (**BDD**), and **test-driven development** (**TDD**).
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 系统越大，质量越高。关于质量的重要性，尤其是在大型系统中，是无可争议的。内建质量确保了整体解决方案中的每个元素都能够反映出在整个开发生命周期中所需的质量。你可以通过敏捷测试、**行为驱动开发**（**BDD**）和**测试驱动开发**（**TDD**）来理解这一点。
- en: Transparency stems from the fact that it is difficult to develop solutions.
    As things go wrong or do not go as planned, without a high level of transparency,
    the facts become obscure, and any decision-making process will not be based on
    actual data where the best decisions are taken. Building trust takes time, however,
    and transparency is a source of trust, which is provided at several levels through
    SAFe. Above all, none of this matters if the teams are unable to perform or deliver
    value on an ongoing basis. SAFe places a strong focus on working systems and the
    business outcomes. We know that while many organizations begin transforming with
    individual teams, they become frustrated as these teams then struggle to deliver
    more value reliably and efficiently.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 透明性源于开发解决方案的难度。随着问题的发生或计划未能如预期进行，如果没有高度的透明性，事实就会变得模糊，任何决策过程将无法基于实际数据做出最佳决策。建立信任需要时间，然而，透明性是信任的来源，它通过
    SAFe 在多个层次提供。最重要的是，如果团队无法持续执行或交付价值，那么这一切都无关紧要。SAFe 强调工作系统和业务成果。我们知道，虽然许多组织开始时通过单个团队进行转型，但随着这些团队在可靠且高效地交付更多价值时遇到困难，他们会感到沮丧。
- en: Spotify model for scaling Agile
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Spotify 模型用于扩展敏捷
- en: With a large number of globally distributed engineers, a key part of the success
    of Spotify is the company's approach to ensuring work is organized in a way that
    enhances agility. Throughout the journey that engineering teams at Spotify have
    gone through, this has been documented and shared with the rest of the world.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 对于全球分布的众多工程师而言，Spotify 成功的一个关键部分是公司确保工作的组织方式能够增强敏捷性的做法。在 Spotify 工程团队的历程中，这一做法已经被记录并与世界其他地方分享。
- en: This model, now known as the Spotify model, is a people focused approach that
    focuses on autonomy for scaling Agile, with a strong focus on network and culture.
    Over the years, this has helped Spotify and many other organizations increase
    their levels of innovation and productivity by focusing on autonomy, communication,
    collaboration, accountability, and quality, but overall, delivery.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模型，现在被称为 Spotify 模型，是一种以人为中心的方法，专注于敏捷扩展中的自主性，且强烈关注网络和文化。多年来，这帮助了 Spotify 以及许多其他组织通过专注于自主性、沟通、协作、问责和质量来提升创新和生产力，但最重要的是交付。
- en: Important note
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: While commonly known as the Spotify model, it's not a framework. This is simply
    Spotify's view of how to scale Agile from both a cultural and technical perspective.
    It is one example of how to organize multiple teams in a product environment.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然通常被称为 Spotify 模型，但它并不是一个框架。这只是 Spotify 从文化和技术角度看待如何扩展敏捷的一种方式。它是如何在产品环境中组织多个团队的一个示例。
- en: First introduced in 2012 ([https://blog.crisp.se/wp-content/uploads/2012/11/SpotifyScaling.pdf](https://blog.crisp.se/wp-content/uploads/2012/11/SpotifyScaling.pdf)),
    the model has been subject to much scrutiny from experts in the field. Upon inspection,
    it shows the radically simple way that Spotify has approached levels of agility.
    Since then, it's generated a large amount of buzz and became popular.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 该模型首次在 2012 年引入（[https://blog.crisp.se/wp-content/uploads/2012/11/SpotifyScaling.pdf](https://blog.crisp.se/wp-content/uploads/2012/11/SpotifyScaling.pdf)），并且受到了领域专家的广泛审视。经过检查，它展现了
    Spotify 在敏捷性方面的极简方法。从那时起，它引起了大量的关注并变得流行。
- en: 'The overarching theme is the championing of team autonomy, and it has several
    ways of describing the structure of your organization. It does so by using the
    following terms:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这个总体主题是提倡团队自主权，它通过几种方式描述了组织的结构。它通过以下术语来实现这一点：
- en: Squads
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小队
- en: Tribes
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部落
- en: Chapters
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 章节
- en: Guilds
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行会
- en: Squads are teams that are organized into Tribes, Chapters help subject matter
    experts keep in touch with each other, and Guilds are there to help people keep
    aligned across the whole organization, where Chapters enable you to keep together
    within a single Tribe.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 小队是组成部落的团队，章节帮助主题专家相互保持联系，行会则帮助团队在整个组织内保持一致，而章节则使你能够在一个部落内保持团结。
- en: Important note
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: Like any other Agile model, it's important to make sure that if you implement
    it within your organization, you have the feedback and transparency in place to
    generate and sustain a culture of trust and autonomy.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 像其他敏捷模型一样，确保在组织内部实施时，有足够的反馈机制和透明度，以建立和维持信任与自主的文化，是非常重要的。
- en: Now that we understand what role Agile has to play in DevOps, we know it's central
    to DevOps in so many ways and that it is vitally important if we want to succeed.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经理解了敏捷在DevOps中的角色，我们知道它在许多方面是DevOps的核心，并且如果我们想要成功，它至关重要。
- en: Summary
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: That concludes this first chapter. So far, we have introduced some terminology
    we will be using throughout the rest of this book and ensured you have a good
    foundational understanding of the main concepts of DevOps, the values it brings
    to your organization, the challenges it can help you solve, and looked at how
    Agile plays a part in DevOps.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是第一章的内容。到目前为止，我们已经介绍了一些将在本书其余部分中使用的术语，并确保你对DevOps的主要概念有了良好的基础理解，包括它给组织带来的价值、它能够帮助你解决的挑战，以及敏捷方法在DevOps中的作用。
- en: In the next chapter, we will be taking a look at how the business benefits from
    DevOps, as well as looking at various team topologies you can use, depending on
    your structure, to achieve great things, as well as highlight some of the pitfalls
    of DevOps and how to avoid them.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨DevOps如何给业务带来好处，以及根据你的结构，如何使用不同的团队拓扑来取得伟大成就，并强调一些DevOps的陷阱以及如何避免它们。
