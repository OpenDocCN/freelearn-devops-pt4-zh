- en: Introducing Jeff Sussna
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍Jeff Sussna
- en: 'In 2011, Jeff Sussna founded Sussna Associates, a company specializing in corporate
    workshops, coaching, and strategic design that enables clients to integrate DevOps.
    The author of *Designing Delivery: Rethinking IT in the Digital Service Economy*,
    Jeff has more than 30 years of IT experience, from software development to IT
    integration. You can follow him on Twitter at `@jeffsussna`.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 2011年，Jeff Sussna创立了Sussna Associates，这是一家专注于企业工作坊、辅导和战略设计的公司，帮助客户整合DevOps。他是《设计交付：在数字服务经济中重新思考IT》的作者，拥有超过30年的IT经验，从软件开发到IT集成。你可以在Twitter上关注他，账号是`@jeffsussna`。
- en: '**Viktor Farcic**: Hi, Jeff. Before we start talking about DevOps, could you
    introduce yourself?'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：嗨，Jeff。在我们开始讨论DevOps之前，你能自我介绍一下吗？'
- en: '**Jeff Sussna**: I''m an independent consultant focused on Agile, DevOps, and
    coaching design thinking. Through my company, Sussna Associates, I''ve been in
    the IT industry for 30 years and during that time, I''ve built systems and led
    organizations across the entire development QA (quality assurance) and operation
    spectrum.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**Jeff Sussna**：我是一个独立顾问，专注于敏捷、DevOps和设计思维的辅导。通过我的公司Sussna Associates，我在IT行业工作了30年，在此期间，我构建了系统并领导了跨越整个开发、QA（质量保证）和运维领域的组织。'
- en: I was introduced to design thinking and, in particular, service design and cloud
    computing in 2008, which was somewhat of an epiphany for me because I realized
    that in the 21st century, service is really at the core of cloud computing and
    IT. Whether it's infrastructure as a service or software as a service or microservices,
    you're talking about service that needs to be user-centered at every level of
    the organization.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我在2008年接触到了设计思维，特别是服务设计和云计算，这对我来说有点像顿悟，因为我意识到在21世纪，服务实际上是云计算和IT的核心。无论是基础设施即服务、软件即服务，还是微服务，你所谈论的都是需要在组织的每一个层面上以用户为中心的服务。
- en: I've really built that into the heart of my consulting practice, helping IT
    teams, whether they're enterprises or start-ups, to get them to really think in
    terms of whether it's their users, customers, database team, network team, application
    team, or whatever you may have. Because of that, I was responsible for introducing
    the idea of empathy into DevOps.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我实际上已经将这一理念融入到我的咨询实践中，帮助IT团队，无论是企业还是初创公司，让他们真正思考无论是他们的用户、客户、数据库团队、网络团队、应用团队，还是其他任何团队的需求。正因如此，我负责将同理心的概念引入到DevOps中。
- en: 'In my opinion, at the heart of what I''m doing is learning about how development
    and operations can think in terms of each other''s needs. I brought all of those
    ideas together in a book I wrote called *Designing Delivery: Rethinking IT in
    the Digital Service Economy*.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，我所做工作的核心是学习开发和运维如何在考虑彼此需求的情况下进行思考。我将所有这些想法融入到我写的书《设计交付：在数字服务经济中重新思考IT》中。
- en: What is DevOps?
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是DevOps？
- en: '**Viktor Farcic**: In your view, what''s the meaning of the word "DevOps"?
    It''s as if nobody has a clear idea of what it is, or at least everybody''s idea
    is different. Some say it''s about new tools, some claim it''s a change in culture,
    while others associate it with a DevOps engineer role. Some even say the word
    DevOps doesn''t exist. It goes on and on like that as if DevOps is a conspiracy
    meant to confuse everyone.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：在你看来，“DevOps”这个词是什么意思？似乎没有人对它有清晰的理解，或者至少每个人的理解都不同。有些人说它与新工具有关，有些人认为它是文化的变化，还有人将其与DevOps工程师角色联系在一起。甚至有人说DevOps这个词根本不存在。事情就像这样一直延续下去，好像DevOps是一个用来迷惑每个人的阴谋。'
- en: '**Jeff Sussna**: For me, the meaning of "DevOps" is right there in the word
    itself. We have to start thinking about development and operations as part of
    one larger unified entity. The guiding principle I used to come to that conclusion
    again returns to this idea of service. The way we deliver service is digitally,
    and the thing about service is that the *way* you make it is part of *what* you
    make.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**Jeff Sussna**：对我来说，“DevOps”这个词的意义就在它本身。我们必须开始将开发和运维视为一个更大统一体的一部分。我用来得出这个结论的指导原则再次回到“服务”这一概念。我们交付服务的方式是数字化的，而关于服务的关键在于，*你制作它的方式*是*你制作什么*的一部分。'
- en: If you look at some of the public relations nightmares that have occurred in
    the airline industry over the last couple of years, flights are being canceled
    because reservation systems are going down. There was one incident recently when
    an airline couldn't check people in because their computer systems went down,
    and they were trying to use their cell phones to check people in.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看看过去几年航空业中发生的一些公共关系噩梦，就会发现，航班取消是因为预定系统出现故障。最近就有一个事件，一家航空公司无法为乘客办理登机手续，因为他们的计算机系统瘫痪了，他们尝试使用手机为乘客办理登机手续。
- en: '"For me, the meaning of ''DevOps'' is right there in the word itself. We have
    to start thinking about development and operations as part of one larger unified
    entity."'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: “对我来说，‘DevOps’的意义就在这个词本身。我们必须开始把开发和运维视为一个更大统一实体的一部分。”
- en: —Jeff Sussna
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: ——杰夫·苏斯纳
- en: '**Viktor Farcic**: I think that everyone takes software for granted these days.
    We are impatient and expect things to happen immediately, and if things fail,
    users just move somewhere else. There''s no loyalty anymore.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克多·法尔西奇**：我认为现在每个人都把软件当成理所当然了。我们变得不耐烦，期望事情立即发生，如果失败了，用户就会转向其他地方。现在没有忠诚度了。'
- en: What many have not yet realized is that it's not only about the features a piece
    of software offers, but also the stability of its systems. Would you agree with
    that?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 很多人还没有意识到，这不仅仅是软件功能的问题，还有它系统的稳定性。你同意吗？
- en: '**Jeff Sussna**: More and more, what''s happening is that the user experience
    of the customer is very powerfully impacted by operation successes and failures,
    as much as by features and functionality. The example I like to use is that we
    imagine there''s a new restaurant in town. You try it on a Saturday night, and
    when you come to work on Monday morning people ask you how it was, and you say,
    "Well, the food was great, but the service was awful." People are a lot less likely
    to try the restaurant because they think of the food and the service as part of
    one overall experience. In my opinion, DevOps reflects the idea that we have to
    think about functionality and operability together.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰夫·苏斯纳**：越来越多的情况是，客户的用户体验受操作成功和失败的影响，程度不亚于功能和特性的影响。我喜欢举的例子是，假设城里开了一家新餐厅。你在一个星期六晚上去尝试，周一早上上班时，别人问你餐厅怎么样，你说：“食物很棒，但服务很差。”人们就会更少尝试这家餐厅，因为他们认为食物和服务是一个整体体验的一部分。在我看来，DevOps反映了我们必须把功能性和可操作性放在一起考虑的观点。'
- en: It doesn't matter how wonderful your design or how well coded your website is,
    if it's very, very slow or if people are constantly getting 500 errors, their
    level of satisfaction will drop.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你的设计多么出色，或者你的网站编写得多么完美，如果它非常慢，或者用户不断遇到500错误，他们的满意度都会下降。
- en: You have to think about system architecture and application architecture. You
    have to think about how deployment happens, and you have to think about security
    all as part of one equation. In my mind, DevOps is a portmanteau, which means
    that we took two words and smashed them together, and the reason we smashed them
    together is that we started to understand that they're really part of one thing.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须思考系统架构和应用架构。你必须考虑部署是如何发生的，并且你必须将安全性与所有这些因素一起作为一个整体来思考。在我看来，DevOps是一个合成词，意味着我们将两个词合并在一起，之所以这样做，是因为我们开始理解它们实际上是一个整体的一部分。
- en: '**Viktor Farcic**: Like one big theme instead of departments?'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克多·法尔西奇**：就像是一个大主题，而不是分部门的结构？'
- en: '**Jeff Sussna**: Yes, and one thing that''s important to me is the idea that
    smashing DevOps together doesn''t necessarily mean that everybody must work for
    the same manager or VP. Everybody has to think about their work as part of something
    larger. You have to think about your code in terms of, "how will this code get
    deployed, how secure will this code be, how efficient will this code be, and how
    well will this code scale?"'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰夫·苏斯纳**：是的，对我来说，重要的一点是，DevOps的融合并不意味着每个人都必须为同一个经理或副总裁工作。每个人都必须把自己的工作看作是更大事物的一部分。你必须从“这段代码如何部署？这段代码的安全性如何？这段代码的效率如何？这段代码如何扩展？”的角度思考你的代码。'
- en: That doesn't necessarily mean that you have to be the person who deploys it
    into production or answers the pager, whatever the case may be. I work with a
    lot of enterprises that have this notion of segregation of duties, and the idea
    that developers aren't allowed to push code into production doesn't mean that
    they can't do DevOps. If you're a large organization, whether it's a multinational
    insurance company or Netflix, with a lot of layers and a lot of pieces of technology,
    then maybe there are a lot of microservices. If not, there's still a lot of applications.
    The idea that you can have them all as part of one big department with one big
    giant foosball table and one big giant open office space doesn't really make any
    sense.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不一定意味着你必须是那个将它部署到生产环境中或响应警报的人，无论情况如何。我与许多企业合作，这些企业有职责分离的观念，认为开发人员不能将代码推送到生产环境中，但这并不意味着他们不能做
    DevOps。如果你是一家大型组织，无论是跨国保险公司还是 Netflix，拥有很多层次和许多技术组成部分，那么可能有很多微服务。如果没有，仍然有很多应用程序。认为你可以将它们都整合成一个大部门，配备一个巨大的桌上足球台和一个巨大的开放办公空间，这样的想法其实没有太大意义。
- en: You have to think about DevOps in terms of collaboration among groups that don't
    necessarily report to the same person, don't necessarily sit next to each other
    in the office, or don't necessarily even work in the same city, and there's no
    problem with that. The problem comes when each group thinks, "Well, this is my
    job, and I worry about my job, and anybody else who wants something from me has
    to get in line, and I'm just going to think about my part of the puzzle."
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须从跨团队协作的角度看待 DevOps，这些团队不一定向同一个人报告，不一定坐在办公室的同一排，也不一定在同一个城市工作，这没有问题。问题在于，当每个团队都认为，“这是我的工作，我只关心我的工作，任何其他需要我帮助的人都得排队等着，我只会考虑我的那部分拼图。”
- en: '"You have to think about DevOps in terms of collaboration among groups that
    don''t necessarily report to the same person, don''t necessarily sit next to each
    other in the office, or don''t necessarily even work in the same city."'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: “你必须从跨团队协作的角度看待 DevOps，这些团队不一定向同一个人报告，不一定坐在办公室的同一排，也不一定在同一个城市工作。”
- en: —Jeff Sussna
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: —Jeff Sussna
- en: DevOps in the team environment
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 团队环境中的 DevOps
- en: '**Viktor Farcic**: I often see the same thing happening, with people saying,
    "This is my job, but *that''s* not my job." With that being said, how do you prevent
    this type of thinking if different managers are giving different teams different
    objectives, especially ones that are not necessarily in line with the global vision
    because everybody thinks only, as you said, of their part of the puzzle?'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我经常看到同样的事情发生，人们说，“这是我的工作，但*那*不是我的工作。” 既然如此，如何防止这种思维方式，尤其是在不同的经理给不同的团队下达不同的目标时，尤其是那些目标不一定与整体愿景一致的情况，因为每个人都像你说的，只关注自己那部分拼图呢？'
- en: '**Jeff Sussna**: The way that I coach teams to do it is by getting them to
    think of each other as the customers, in the same way that the company thinks
    about people who pay the money to their customers. The network team has customers,
    and it''s really funny because in DevOps, we engage in this little bit of magical
    thinking where we''re all thinking, "Well, one key component of DevOps is the
    cloud." The cloud solves a bunch of problems, and I agree with that, but if you
    think about an AWS, Azure, or Google Cloud Platform, it''s the ultimate silo.
    There is no bigger silo than the one between your organization and AWS.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**Jeff Sussna**：我指导团队的方式是让他们把彼此视为客户，就像公司把支付费用的人视为客户一样。网络团队也有客户，这非常有趣，因为在 DevOps
    中，我们有时会陷入这种稍微带点魔幻色彩的思维方式，我们都在想，“嗯，DevOps 的一个关键组件就是云计算。” 云计算解决了很多问题，我同意这一点，但如果你考虑
    AWS、Azure 或 Google Cloud Platform，它们就是最终的“信息孤岛”。没有比你们组织和 AWS 之间的隔阂更大的孤岛了。'
- en: AWS won't even tell you where the data center is, let alone who works on your
    code, your systems, or whatever the case may be. The thing about these organizations
    is that they understand they're in the service business and their job is to help
    you succeed, and they're continually innovating in order to help you succeed.
    I think exactly the same model applies inside the organization; whether it's split,
    whether you have two pizza teams that are cross-functional, or if you have departmental
    breakouts – it doesn't really matter. The question has to change from how do we
    *run* the network to how do we help people *use* the network, and that's a very,
    very subtle but very important and really significant mind shift.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 甚至不会告诉你数据中心在哪里，更不用说谁在处理你的代码、你的系统，或者其他什么事情了。这些组织的特点在于，它们明白自己处于服务行业，它们的工作就是帮助你成功，并且它们持续创新以帮助你成功。我认为同样的模型也适用于组织内部；无论是分拆，还是有两个跨职能的披萨团队，或者有部门划分——这并不重要。问题必须从“我们如何*运营*网络”转变为“我们如何帮助人们*使用*网络”，这是一个非常微妙，但非常重要且真正意义深远的思维转变。
- en: If you're thinking in terms of how do we run the network and somebody wants
    an IP address, a DNS entry, or a firewall change, they'll have to get in line
    behind your process. But if you put them at the center, and you say, "Okay, our
    job is to make sure that these applications can successfully run and scale on
    top of our network," then things such as IP addresses, DNS entries, and firewall
    changes become the core of your job. So, through that, your job becomes primarily
    one of thinking about who are the people who need to use our services and answering
    the traditional question of, "Well, how do we make sure the router doesn't fall
    over?" It doesn't go away, but it becomes an implementation detail as opposed
    to being the core of your job.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还在想着如何运营网络，而有人需要一个 IP 地址、一个 DNS 条目或防火墙更改，他们将不得不排队等候你的流程。但是如果你将他们置于中心，告诉他们，“好的，我们的工作是确保这些应用程序可以在我们的网络上成功运行并扩展”，那么像
    IP 地址、DNS 条目和防火墙更改之类的事项就成了你工作的核心。因此，通过这种方式，你的工作主要就是考虑那些需要使用我们服务的人，并回答传统问题：“我们如何确保路由器不宕机？”这个问题虽然并不会消失，但它变成了一个实现细节，而不再是你工作的核心内容。
- en: '**Viktor Farcic**: That makes perfect sense. Everyone''s work becomes user-centric,
    no matter whether those users are external or internal. Meanwhile, everyone''s
    job is to help someone, even when that someone is a colleague from a different
    department.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：这完全合理。每个人的工作都会以用户为中心，无论这些用户是外部的还是内部的。同时，每个人的工作都是帮助别人，即便这个“别人”是来自不同部门的同事。'
- en: Empathy in DevOps
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps中的同理心
- en: You've both written and spoken a lot about empathy. I'm not sure whether you
    coined the term EmpathyOps, but can you elaborate on what you mean by empathy?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你们都写过并且讲过很多关于同理心的内容。我不确定你们是否创造了“EmpathyOps”这个词，但能否详细解释一下你们所说的同理心是什么？
- en: '**Jeff Sussna**: There''s a lot of confusion and anxiety about its meaning,
    and a lot of people tend to misunderstand it. Sometimes people think empathy means
    wallowing in someone else''s pain. In fact, there''s actually a philosopher from
    Yale University who is now putting out the idea that empathy is actually bad,
    and that it''s the cause of all of the world''s problems and what we need instead
    is compassion.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**Jeff Sussna**：关于同理心的意义有很多困惑和焦虑，很多人往往误解它。有时候人们认为同理心意味着沉溺于别人的痛苦。实际上，现在有一位来自耶鲁大学的哲学家提出，同理心其实是有害的，是所有世界问题的根源，我们所需要的应该是同情。'
- en: From my perspective, that represents a misunderstanding of both empathy and
    compassion, but my favorite is when people say things like, "Sociopaths are really
    good at empathizing". My answer to that is, if you have a sociopath in your organization,
    you have a much bigger problem, and DevOps isn't going to solve it. At that point,
    you have an HR problem. What you need to distinguish between is emotional empathy
    and cognitive empathy, and I use cognitive empathy in the context of DevOps in
    a very simple way, which is the ability to think about things as if from another's
    perspective.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 从我的角度看，这代表着对同理心和同情心的误解，但我最喜欢的是当人们说，“社会病态者在同理心方面表现得特别好”时。对此我的回答是，如果你的组织里有社会病态者，那你有一个更大的问题，DevOps是无法解决的。此时，你的问题在于人力资源管理。你需要区分的是情感同理心和认知同理心，我在
    DevOps 的语境下使用认知同理心的方式非常简单，那就是从他人的视角思考问题的能力。
- en: If you're a developer and you think, "What is the experience of deploying and
    running my application going to be?" you're thinking about it from the perspective
    of the operations person. If you're an operations person and you're thinking in
    terms of, "What is the experience going to be when you need to spin up a test
    server in a matter of hours in order to test a hotfix because all of your testing
    swim lanes are full of other things, and what does that mean for my process of
    provisioning servers?," then you're thinking about things from the tester's point
    of view. And so, to me, that's empathy, and that's empathizing, which is really
    at the heart of customer service. It's at the heart of design thinking, and it's
    at the heart of product development. What is it that our customers are trying
    to accomplish, what help do they need from us, and how can we help them?
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是开发人员，且你在思考，“部署和运行我的应用程序的体验是什么？”那么你是在从运维人员的角度思考。如果你是运维人员，并且你在考虑，“当你需要在几个小时内启动一个测试服务器来测试一个热修复，因为所有测试的泳道都被其他事情占满了，这对我的服务器配置流程意味着什么？”那么你是在从测试人员的角度思考。所以，对我而言，这就是共情，这就是共情能力，它正是客户服务的核心，设计思维的核心，产品开发的核心。我们的客户试图完成什么，他们需要我们提供什么帮助，我们怎样才能帮助他们？
- en: '"I use cognitive empathy in the context of DevOps in a very simple way, which
    is the ability to think about things as if from another''s perspective."'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: “我在 DevOps 中以一种非常简单的方式使用认知共情，即从别人的角度去思考问题的能力。”
- en: —Jeff Sussna
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: —杰夫·萨斯纳
- en: '**Viktor Farcic**: So, everyone has a customer, and we all need to start thinking
    about whether our work makes our customer''s life easier or better, no matter
    whether that customer is internal or external. We shouldn''t hide behind artificial
    objectives anymore.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：所以，每个人都有客户，我们都需要开始思考我们的工作是否能让客户的生活更轻松、更好，无论这个客户是内部的还是外部的。我们不应该再隐藏在虚构的目标后面。'
- en: '**Jeff Sussna**: I''ll give you an example of that. I actually got a little
    grief about this recently because I tend to be a bit of an AWS fanboy, but the
    reason for that is that I think they understand the idea of user-centered innovation
    better than anybody else.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰夫·萨斯纳**：我给你们举个例子。其实最近我因为这个有点小麻烦，因为我倾向于有点 AWS 的粉丝情结，但之所以这样，是因为我认为他们比任何人都更理解以用户为中心的创新理念。'
- en: A number of years ago, I was helping a client port an application from a colocation
    center to Amazon. It was a fairly simple app, and it was primarily a forklift
    port. It was running on old hardware that was starting to fail, and they didn't
    want to manage their hardware anymore. So we said, "Okay, let's just put it to
    Amazon." In this case, we were not going to try and do anything fancy like re-architect
    the application or anything like that, but we should take advantage of some of
    the more basic Amazon capabilities, like being able to run the web server auto-scaled
    across multiple availability zones.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 几年前，我曾帮助一个客户将一个应用程序从共置中心迁移到亚马逊。这是一个相当简单的应用程序，主要是一个“叉车”迁移。它运行在一台开始出现故障的旧硬件上，客户不再想管理他们的硬件了。所以我们说，“好吧，那就把它搬到亚马逊去。”在这种情况下，我们并不打算做一些复杂的工作，比如重新设计应用程序之类的，但我们应该利用一些更基本的亚马逊功能，比如能够让网页服务器在多个可用区之间自动扩展。
- en: It's a pretty straightforward thing to do, and there's no reason not to do it.
    We then came to one piece of our architecture, which was a Memcached server, and
    we couldn't figure out how to cluster it. It turned out that in those days, it
    was fairly hard to do. There was a product available that was very expensive,
    and we weren't sure if it really worked. So, we went around for a while, before
    we finally decided, let's not worry about it; it's a cache, and if the cache falls
    over, the application is smart enough to fall back and go straight to the database.
    Yes, it'll be slow, but it'll survive until we have a chance to tip the cache
    back up. Let's not sweat it, let's just go on with our work and finish.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当直接的操作，没有理由不去做。然后我们来到了架构中的一个环节，那就是 Memcached 服务器，我们无法弄清楚如何将其集群化。结果是，在那个时候，做到这一点相当困难。确实有一个产品可以实现，但非常昂贵，而且我们不确定它是否真正有效。于是我们试探了一段时间，最后决定，别担心它；它只是一个缓存，如果缓存崩溃了，应用程序足够智能，会回退并直接访问数据库。是的，它会慢，但它会存活下来，直到我们有机会重新启动缓存。别纠结了，继续工作，完成任务。
- en: We finished, and I think it was something like a few weeks later when AWS announced
    a new service called ElastiCache, which was – guess what? – a clustered Memcached
    server that ran across data centers. All you had to do was push a couple of buttons
    and type a few things into the console, and you could spin it up as a service.
    I remember thinking that it was as if they had been reading our emails.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们完成了工作，我记得大约几周后，AWS 宣布了一项新服务，叫做 ElastiCache，猜猜是什么？——一个跨数据中心运行的集群式 Memcached
    服务器。你只需要按下几个按钮，输入几个命令，就能将它作为服务启动。我记得当时我想，简直就像他们在读我们的邮件一样。
- en: 'The point of the story is that Amazon wasn''t just resting on their laurels
    and saying, "We do infrastructure as a service, and we do storage and VMs and
    networking." They were looking at what it was that their customers were struggling
    with and how they could help make it easier. I think that is the essence of what
    we''re talking about with DevOps: how do I, as a developer, make operations''
    lives easier and better, and as an operations person, how do I make development''s
    life easier and better?'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个故事的重点是，亚马逊并不仅仅停留在“我们提供基础设施即服务、存储、虚拟机和网络”这些现有业务上。它们在看自己的客户面临什么困难，如何帮助他们简化这些问题。我认为这就是我们所说的
    DevOps 精髓：作为开发人员，我如何让运营的工作变得更轻松、更高效；作为运维人员，我又如何让开发的工作变得更轻松、更高效？
- en: '**Viktor Farcic**: But then what prevents companies from applying this type
    of thinking? Is it that they don''t want to take this approach, that they don''t
    see value in this line of thinking, or is it something else?'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：但是，是什么阻止公司们应用这种思维方式？是因为他们不想采取这种方法，不认为这种思维有价值，还是其他原因？'
- en: '**Jeff Sussna**: I was talking with a client just the other day about this
    blockage in their process, to do with deploying code to a test environment. I
    started the conversation by asking, "Why can''t developers deploy their own code?
    It''s not production. There is no segregation of duty issues." They just hadn''t
    thought about it. We talked it through, and they said there were no underlying
    reasons they couldn''t. We would need to make some technical changes but there
    were no rules that say they shouldn''t. It''s a simple example of making available
    that which would make developers'' lives easier. I think that expands out from
    there.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰夫·苏斯纳**：就在前几天，我和一个客户谈论了他们在流程中遇到的一个障碍，涉及到将代码部署到测试环境。我开始时问：“为什么开发人员不能自己部署代码？那不是生产环境，没有职责分离问题。”他们当时没有想过这个问题。我们讨论了一下，他们说没有任何原因阻止他们这么做。我们需要做一些技术上的改变，但没有规则规定他们不能这么做。这是一个简单的例子，展示了如何提供那些能让开发人员工作更轻松的工具。我认为这背后的思路是可以推广的。'
- en: It has to do with the relationship between development and design, product and
    development, development and operations, and security and development. We all
    need to think from the perspective of, "How do we help each other better accomplish
    what we're trying to accomplish?" Empathy is what enables you to do this. But
    empathy is also thinking in terms of, "Forget about what I'm doing, what is it
    that you're trying to accomplish and how could I use my expertise to help you
    accomplish it?"
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这与开发和设计、产品和开发、开发和运营、以及安全和开发之间的关系有关。我们都需要从“我们如何能更好地帮助彼此完成我们想做的事情？”的角度来思考。**同理心**是使你能够做到这一点的关键。但同理心也意味着，“忘记我在做什么，你在做什么，你的目标是什么，我该如何利用我的专业知识帮助你实现它？”
- en: The big DevOps guy versus the little DevOps guy
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大型 DevOps 公司与小型 DevOps 公司
- en: '**Viktor Farcic**: When you visit companies, do you see any recurring themes,
    or any commonalities between them? Are they facing the same problems, apart from
    the obvious of one company is smaller and the other one is bigger?'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：当你拜访公司时，你是否看到一些反复出现的主题，或者它们之间有一些共性？它们是否面临相同的问题，除了一个公司较小，另一个公司较大这个显而易见的差异？'
- en: '**Jeff Sussna**: I''m surprised at how common they are, regardless of the size
    of the company. For example, pretty much every single client that I''ve had, regardless
    of size, has compliance issues.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰夫·苏斯纳**：令我吃惊的是，无论公司大小，它们遇到的这些问题是如此普遍。例如，几乎每一个我接触过的客户，不论大小，都面临合规性问题。'
- en: Maybe they're a start-up, but they're a healthcare start-up, which means they
    have to deal with HIPAA (The Health Insurance and Accountability Act of 1996);
    or maybe they process credit cards, which means they have to deal with PCI (Payment
    Card Industry); or they provide services to the Federal Government, which means
    they have to comply with FedRAMP, which is as draconian as any of the other compliance
    rule sets as you can find. Issues about audits, and segregation duties and access
    control; all of those things are common across my clients, regardless of their
    size.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '也许他们是一家初创公司，但他们是一家医疗初创公司，这意味着他们必须处理 HIPAA（1996年健康保险流通与问责法案）；或者他们可能处理信用卡事务，这意味着他们必须遵守
    PCI（支付卡行业）；或者他们为联邦政府提供服务，这意味着他们必须遵守 FedRAMP，这和其他任何合规规则集一样严格。审计问题、职责分离和访问控制；这些问题在我的客户中都是普遍存在的，无论他们的规模如何。  '
- en: '"Pretty much every single client that I''ve had, regardless of size, has compliance
    issues."'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '“几乎我遇到的每一个客户，无论规模大小，都有合规性问题。”  '
- en: —Jeff Sussna
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '—杰夫·萨斯纳  '
- en: I see the challenges between development and operations as being surprisingly
    universal. I think the main difference is that in the big companies, the dysfunction
    tends to be structural, as in, "I don't like your organization because we have
    different VPs and the VPs are competing for power," or something like that. Or
    maybe they're not competing for power, but they're just sort of separate and they're
    in competition with each other in some fashion.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '我看到开发与运维之间的挑战是出乎意料的普遍存在。我认为主要的区别在于，在大公司中，功能失调往往是结构性的，比如，“我不喜欢你的组织，因为我们有不同的副总裁，而副总裁们在争夺权力”，或者类似的事情。或者他们可能并不争夺权力，而是只是彼此独立，在某种程度上存在竞争关系。  '
- en: There are institutionalized boundaries that keep people apart. In smaller companies,
    it tends to be much more personal. For instance, "I don't trust you because two
    and a half years ago, you broke things in a major way and so I don't ever want
    you deploying to production ever again," but these sorts of struggles to trust
    and to understand are surprisingly universal.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '有一些制度化的边界将人们隔开。在小公司中，这往往是更个人化的。例如，“我不信任你，因为两年半前，你在重大问题上搞砸了，所以我再也不想让你部署到生产环境了”，但这种信任问题和理解问题出乎意料地具有普遍性。  '
- en: It's funny because in both Agile and DevOps, we talk a lot about feedback loops
    and how we can learn faster. If you look at the three ways of DevOps, you have
    flow, feedback, and continuous learning. It's surprising how difficult feedback
    is.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '这很有趣，因为在敏捷和 DevOps 中，我们经常讨论反馈环路，以及如何更快地学习。如果你看看 DevOps 的三大方式，你会看到流动、反馈和持续学习。令人惊讶的是，反馈竟然是如此困难。  '
- en: '**Viktor Farcic**: I think that people tend to adopt practices, but where they
    fail is in understanding the goals behind those practices. As a result, we implement
    practices but fail to connect with them and gain any real benefits. Almost everyone
    collects feedback these days. The real question is, how many use that feedback
    to learn and adapt?'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：我认为人们往往会采用一些实践，但失败的地方在于没有理解这些实践背后的目标。因此，我们实施了这些实践，却没有真正与它们建立联系，也没有获得任何实质性的好处。如今几乎每个人都会收集反馈，真正的问题是，有多少人利用这些反馈进行学习和适应？'
- en: '**Jeff Sussna**: I did a workshop with a client, a whole section of which was
    dedicated to feedback loops. The client was a very mature Agile and DevOps organization,
    and at one point I gave them an exercise, which was to take some linear processes
    they had and reimagine them as circular, feedback-driven processes in order to
    see what was different. They all chuckled and nodded wisely at me. Someone raised
    their hand and said, "We don''t really have any linear processes anymore; we''ve
    made them all circular," and I said, "Alright, well, indulge me – just try and
    see what happens, this may be a very fast and easy exercise."'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰夫·萨斯纳**：我曾与一个客户进行过一次研讨会，其中一部分内容专门讨论反馈环路。这个客户是一个非常成熟的敏捷和 DevOps 组织，在某个时刻，我给他们安排了一个练习，让他们将一些线性流程重新构想为循环、反馈驱动的流程，以便看看有什么不同。他们都笑了笑，智慧地点点头。有人举手说：“我们现在基本上没有线性流程了；我们已经把它们都变成了循环的。”我说：“好吧，那就听我说一次
    – 试试看会发生什么，这可能是一个非常快速且简单的练习。”  '
- en: I'd split the group into four teams, and three of the four teams independently
    came to the same conclusion, which they reported to me very sheepishly after the
    exercise. They all came to the conclusion that they were very, very good at collecting
    feedback but they didn't actually do anything with it. They realized they were
    wasting an incredible amount of time and energy because they had this whole feedback
    loop mechanism that they never really closed all the way. If there's a danger
    that I see both with Agile and DevOps, it's that we get really focused on how
    fast we can get stuff to production, and we see it as essentially a push problem.
    One of the misconceptions I see about DevOps is that DevOps is about deployment
    automation.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我会把小组分成四个团队，其中三分之四的团队独立得出了相同的结论，他们在练习后非常羞涩地向我报告了这一点。他们得出的结论是，他们非常擅长收集反馈，但实际上并没有利用这些反馈。他们意识到自己浪费了大量时间和精力，因为他们有一个完整的反馈机制，但从未真正把它关闭。如果我看到敏捷和DevOps中有危险的话，那就是我们过于关注如何尽快将工作交付到生产环境，而把它看作是一个推送问题。我看到的关于DevOps的一个误解是，DevOps只是关于部署自动化。
- en: '"If there''s a danger that I see both with Agile and DevOps, it''s that we
    get really focused on how fast we can get stuff to production, and we see it as
    essentially a push problem. One of the misconceptions I see about DevOps is that
    DevOps is about deployment automation."'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: “如果我看到敏捷和DevOps中有危险的话，那就是我们过于关注如何尽快将工作交付到生产环境，而把它看作是一个推送问题。我看到的关于DevOps的一个误解是，DevOps只是关于部署自动化。”
- en: —Jeff Sussna
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: —杰夫·苏斯纳
- en: The problem with that is it's one-way, and you don't actually learn. If you
    push stuff to production and then all you do is go and pick the next thing out
    of your backlog, how are you really going to know that that's the right next thing
    to take out of your backlog unless you pay attention to what's happened to the
    thing you've just deployed? I would say the struggle to really get beyond this
    sort of an industrial-age approach, of the kind of pushing products out the factory
    door, is a universal challenge.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于这是单向的，你实际上并没有学习。如果你把东西推向生产环境，然后只是去从待办事项中挑选下一个任务，你怎么能真正知道下一个任务是不是待办事项中最合适的任务呢，除非你关注你刚刚部署的东西发生了什么？我会说，真正突破这种工业时代的思维方式——像把产品推出工厂的大门那样——是一个普遍的挑战。
- en: '**Viktor Farcic**: Isn''t that an example of blindly following processes without
    understanding the reasoning behind them? The idea behind short sprints is not
    to be able to do more work but to get that feedback sooner and better decide what
    to do next. If we just pick up a new item from the backlog, we are missing the
    point.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：这不就是一个盲目遵循流程而不理解背后原因的例子吗？短周期冲刺的理念并不是为了做更多的工作，而是为了更早得到反馈，从而更好地决定下一步该做什么。如果我们只是从待办事项中挑选一项任务，那么我们就错过了重点。'
- en: With that being said, let's change the subject. When you work with teams or
    companies, what is the approach? Are we starting from the top, from the bottom,
    or in the middle?
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，我们换个话题。当你与团队或公司合作时，采用的是什么方法？是从顶部开始、从底部开始，还是从中间开始？
- en: '**Jeff Sussna**: I start all over the place; it really depends on the client.
    I mean, generally, it''s anywhere from the CIO to some director of operations
    or director of development. It very much depends. It''s an interesting question
    because what I find is that at some point, the two have to come together.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰夫·苏斯纳**：我从各个地方开始；这真的取决于客户。我的意思是，一般来说，可能是从首席信息官到某个运营总监或开发总监，具体情况非常依赖。这个问题很有意思，因为我发现，在某个时刻，这两者必须结合起来。'
- en: There's this interesting question about whether DevOps requires an executive
    buy-in or whether it should be a grassroots thing. In my experience, it doesn't
    matter where it starts, but at some point, it needs both.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 关于DevOps是否需要高层支持，或者它应该是一个草根驱动的事情，存在一个有趣的问题。根据我的经验，起点在哪里并不重要，但在某个时刻，它需要两者的结合。
- en: 'I''ve seen places where, particularly with Agile, a CIO comes back from a conference
    and says, "We''re doing Agile now," which is great; the process of actually going
    from that to an organization that implements it really doesn''t require a lot
    of on-the-ground activity. Some of it is very grassroots: propagation of new behaviors
    and activities. One of the places that I focus on more and more is what the adoption
    process looks like, and in my opinion, in my experience – and I think this is
    another place where organizations struggle – changing how the organization behaves
    is no different from changing how your website works, or changing how your continuous
    integration pipeline works.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我见过一些地方，尤其是在敏捷方面，一位首席信息官（CIO）参加完会议回来后说：“我们现在要做敏捷了”，这很好；但从这个阶段到一个能够实施敏捷的组织，实际上并不需要很多地面上的活动。有些活动非常草根化：新行为和新活动的传播。我越来越关注的一个方面是采纳过程是什么样的，在我看来，在我的经验中——我认为这是组织面临的另一个难题——改变组织的行为与改变你的网站工作方式，或者改变你的持续集成流水线的工作方式并没有什么不同。
- en: It's something that has to happen over time, and it has to happen in an Agile
    way. What I mean by that is that there has to be learning based on feedback; you
    can't just drop a plan in and do it, because what happens is people interact with
    that plan, they struggle, they resist, they learn, they make mistakes, and you
    find out that your plan maybe needs a little adjustment based on your corporate
    culture, so it's something that really has to unfold.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个必须随着时间推移而发生的过程，并且它必须以敏捷的方式进行。我的意思是，必须基于反馈进行学习；你不能只是简单地放入一个计划然后执行，因为发生的情况是人们与那个计划互动时，他们会遇到困难、抵制、学习、犯错，你会发现你的计划可能需要根据你的企业文化做一些调整，因此这真的是一个必须逐步展开的过程。
- en: Changing the culture around DevOps
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改变DevOps文化
- en: '**Viktor Farcic**: When you try to change the culture, do you have a plan?
    I remember someone told me that you could not really predict a complex system;
    the only thing you can do is poke it and see what comes out.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：当你试图改变文化时，你有计划吗？我记得有人告诉我，你不能真正预测一个复杂的系统；你能做的唯一事情就是戳它，看看会发生什么。'
- en: '**Jeff Sussna**: You''re correct in thinking that you can have techniques that
    you use to introduce people to your system, and then you have to relate to what
    happens when they interact with those techniques. Everybody is a little bit different.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰夫·萨斯纳**：你说得对，你可以使用一些技术将人们引入你的系统，然后你必须与他们互动时的反应相结合。每个人都稍有不同。'
- en: I teach, and when I do a coaching engagement, I always start with, depending
    on the size of the organization, anywhere from a week to a month spending a lot
    of time doing an embedded observation to really understand who and where they
    are. From there, I start introducing new techniques; whether it be stand-ups,
    continuous integration, or automated server provisioning, it really doesn't matter.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我教学时，每次进行教练辅导时，我总是根据组织的规模，从一周到一个月不等，花很多时间进行嵌入式观察，真正理解他们是谁以及他们的现状。然后，我开始引入新的技术；无论是站立会议、持续集成，还是自动化服务器配置，实际上都无关紧要。
- en: Then the fun starts when we're introducing Kanban. We're thinking, "That's straightforward
    – we simply show people how it works and explain the principal tool." But what
    actually happens is that when people start to work with it, they struggle in ways
    that are very unique to who they are, what their personalities are, and what their
    corporate culture is. And that's where the real work starts, trying to actually
    relate to those. I don't think you can really predict that. That's something that's
    very emergent.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，介绍看板时就开始变得有趣了。我们想，“这很简单——我们只是向人们展示它是如何工作的并解释主要的工具。”但实际发生的是，当人们开始使用它时，他们在使用过程中会遇到非常独特的困难，这些困难与他们是谁、他们的个性如何、他们的企业文化如何密切相关。真正的工作开始于这里，试图理解这些问题。我认为你真的无法预测这一点。这是一个非常突现的过程。
- en: '**Viktor Farcic**: Right, we cannot blindly adopt anything since each of us
    is very different, as is the culture of each company, and our projects. To think
    that we can have such a vast difference and yet hope that a single solution will
    solve everyone''s problems is childish, in my view. We all need to gain experience,
    understand ourselves, and use that knowledge to discover what works best for us.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：没错，我们不能盲目地接受任何事物，因为我们每个人都非常不同，每个公司的文化也不同，我们的项目也不同。认为我们有如此大的差异，却仍希望一个单一的解决方案能够解决所有人的问题，这在我看来是幼稚的。我们都需要积累经验，理解自己，并利用这些知识去发现最适合我们的方式。'
- en: I'm curious about design thinking, which is something you've mentioned a few
    times now. Can you elaborate on that?
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我对设计思维很感兴趣，这是你提到过几次的内容。能否详细讲讲这个概念？
- en: '**Jeff Sussna**: Design thinking is quite simply the notion that you can take
    something about the way designers solve problems, whether it be graphics, industrial,
    or user interface designers, and you can extract that into a methodology that
    you can then apply to other problems. For example, how would you introduce DevOps
    to a new company?'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**Jeff Sussna**：设计思维非常简单，指的是你可以借鉴设计师解决问题的方式，无论是图形设计、工业设计，还是用户界面设计师的方式，然后将其提炼成一种方法论，进而应用到其他问题上。例如，如何将DevOps引入一家新公司？'
- en: At the heart of design thinking is the notion of user-centered design, which
    is based around empathy, but it has particular techniques for helping you empathize,
    which are all based on observing and interacting with your customers.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 设计思维的核心是以用户为中心的设计理念，它基于同理心，但它有特定的技巧来帮助你实现同理心，这些技巧都基于观察和与客户的互动。
- en: One of the things that I tell teams even deep within IT is that if you're going
    to redesign something – for instance, you're the database team and you want to
    redesign the process that application teams use to get new database instances
    – start by just observing how they do it, and actually go and sit with them and
    just watch; and then from that you come up with a solution, prototype that solution,
    and get feedback on it.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我告诉团队的一个关键点，即使是在IT部门深处，也是：如果你们要重新设计某个东西——例如，你们是数据库团队，想要重新设计应用团队获取新数据库实例的流程——首先要做的就是观察他们是如何操作的，真正去和他们一起坐下来，看他们的操作；然后从这个过程中，你们可以提出解决方案，制作原型并获取反馈。
- en: '"Current Agile and DevOps practices are incomplete because we don''t really
    have a mechanism to incorporate true feedback from the people we''re trying to
    serve."'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: “当前的敏捷和DevOps实践是不完整的，因为我们没有真正的机制来融入来自我们想要服务的人的真实反馈。”
- en: —Jeff Sussna
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: —Jeff Sussna
- en: Too many times IT does this thing where we sort of figure out what the right
    solution should be, we build it, and then we send out these emails saying that
    we're going to roll it out over the next three months with training. What we've
    failed to do is take the time to understand how well our solution actually works
    for the people who are going to be using it.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 太多时候，IT部门会做出这样的决策：我们先搞清楚正确的解决方案是什么，然后构建它，接着发送邮件宣布将在接下来的三个月里逐步推广，并提供培训。而我们没有做的是花时间去了解我们所提供的解决方案对实际使用它的人们来说是否有效。
- en: The idea of design thinking starts with empathetic observation. It can get more
    or less formal in terms of how it actually does that, and from there uses a very
    iterative process of prototyping, user testing, redesigning, and re-implementing
    to, almost in an Agile way, find its way to a solution.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 设计思维的核心是同理心观察。它在实际执行时可以有更多或更少的形式化，从此出发，采用一个非常迭代的过程，包括原型设计、用户测试、重新设计和重新实施，几乎以敏捷的方式，找到通向解决方案的路径。
- en: Part of why I talk about design thinking so much is that I think current Agile
    and DevOps practices are incomplete because we don't really have a mechanism to
    incorporate true feedback from the people we're trying to serve. But validating
    our ideas, beliefs, solutions, and strategies with them is the reason why I think
    it's important to incorporate design thinking into what we're doing.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我之所以谈论设计思维这么多，是因为我认为当前的敏捷和DevOps实践是不完整的，因为我们没有真正的机制来融入来自我们想要服务的人的真实反馈。但与他们一起验证我们的想法、信念、解决方案和策略，这正是我认为将设计思维融入我们所做的工作中的重要原因。
- en: '**Viktor Farcic**: How about Agile and DevOps, then? Are they separate things
    that you adopt, do they extend across each other, or are they different names
    for the same thing? Because from what you''ve said, there are things that sound
    similar about the two.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：那么敏捷和DevOps又是怎样的呢？它们是分别独立的实践吗？还是彼此相互延伸，抑或是同一件事的不同名称？因为根据你所说，似乎两者有些相似之处。'
- en: Agile versus DevOps
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 敏捷与DevOps
- en: '**Jeff Sussna**: DevOps completes the Agile equation. Agile talks a lot about
    delivering value and working code, but the problem is that by itself, it doesn''t
    actually deliver anything. Instead, Agile kind of stops when you have code that''s
    been written and tested, which nobody can use, so it doesn''t do anybody any good.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**Jeff Sussna**：DevOps完善了敏捷的方程式。敏捷强调交付价值和有效的代码，但问题是，仅仅这样做，它并不能实际交付任何东西。实际上，敏捷在编写和测试完成代码后就停止了，但这些代码没人能用，所以它对任何人都没有用处。'
- en: The reason for that is Agile grew up in the product age when you would take
    your code, put it on a CD, and send it to your customer, who were the ones responsible
    for actually deploying and operating it. Those days are pretty much gone now,
    so that development and operations elements are really part of the same equation.
    Agile can't actually deliver the value unless that code can be deployed, and that
    deployment environment can be operated, and the problems can be fixed, including
    where new code can be deployed, and so on.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的原因是，敏捷发展是在产品时代兴起的，那时候你将代码写好，放在CD上，然后寄给客户，由客户负责实际的部署和运营。但那种日子现在几乎已经过去了，因此开发和运维元素实际上是同一方程式的一部分。敏捷实际上无法提供价值，除非这些代码能够部署，且部署环境能够运营，并且问题能够解决，包括新代码的部署，等等。
- en: I don't think development without operations is meaningful anymore; and again,
    to clarify, when I say "operations," I mean in the largest sense of overall operability,
    so that includes not just running servers or running infrastructure, but also
    security, which is an integral part of that.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我不认为没有运维的开发还有什么意义；再强调一下，当我说“运维”时，我指的是从整体可操作性的最大意义上来说，这不仅仅是指运行服务器或基础设施，还包括安全性，这是其中不可或缺的一部分。
- en: If your code or your infrastructure isn't secure, that's probably worse than
    if they don't scale. If your code doesn't scale, your website is slow, or your
    data entry application is slow, and that's annoying.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的代码或基础设施不安全，那可能比它们不具备扩展性更糟。如果你的代码不具备扩展性，你的网站会很慢，或者你的数据录入应用很慢，这很烦人。
- en: '**Viktor Farcic**: Being slow is definitely better than not being available
    at all due to a security exploit that someone has used to bring your whole cluster
    down. If my data gets stolen from your system, not only will I not be your customer
    anymore, but I am likely to sue you as well. The part that confuses me is the
    talk about DevSecOps, because I come away feeling, like, why are we even talking
    about security? Isn''t security something that is mandatory anyway and therefore
    part of DevOps? Or, did it somehow become optional and now we need to talk about
    including it as a separate practice?'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：慢总比因有人利用安全漏洞使整个集群崩溃而导致完全不可用要好。如果我的数据被从你的系统中盗取，不仅我将不再是你的客户，甚至很可能会起诉你。我感到困惑的是，关于DevSecOps的讨论，因为我总是有种感觉，为什么我们还在讨论安全性？安全性难道不是必需的吗？所以它应该是DevOps的一部分？或者，它是不是变成了可选项，现在我们才需要将它作为一个独立的实践来讨论？'
- en: '**Jeff Sussna**: If my personal health data, credit card, or social security
    number gets stolen, then that''s a lot more than just annoying. I know that when
    people talk about DevSecOps, they talk about rugged DevOps, which is the idea
    of DevOps with security built in. But the thing is, would you ever want to propose
    doing non-rugged DevOps? I certainly wouldn''t.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**Jeff Sussna**：如果我的个人健康数据、信用卡或社会安全号码被盗，那可不只是令人烦恼而已。我知道，当人们谈论DevSecOps时，他们谈论的是坚固的DevOps，也就是内建安全性的DevOps理念。但问题是，你会想提议做一个非坚固的DevOps吗？我肯定不会。'
- en: I certainly wouldn't want to go to my CIO and say that we don't want to do rugged
    DevOps, we're just going to do unrugged DevOps, and that we're not going to worry
    about security. I wouldn't think that would go down very well. But, going from
    there, I think I would say that if we were trying to be Agile, at this point,
    you can't really be Agile without extending that into your operational approach
    to things.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我肯定不想去找我的CIO说，我们不想做坚固的DevOps，我们只想做非坚固的DevOps，不会担心安全性。我不认为那会得到好评。但从这一点出发，我认为我会说，如果我们想要做敏捷，现在，你真的不能没有将这种思维延伸到你的操作方法中。
- en: I think it's more and more questionable how meaningful Agile and DevOps are
    without each other. I look forward to the day when we have a better word that
    just encompasses the whole thing, and we don't even worry anymore about whether
    there's a division. I mean, if you think about it, the dividing line between Agile
    and DevOps is still this strange space between development and operations, which
    is what we're trying to get rid of with DevOps. You could say that if you take
    DevOps seriously, you can't really believe in a fundamental separation between
    Agile and DevOps.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为，敏捷和DevOps没有彼此支持的情况下，它们的意义越来越值得怀疑。我期待有一天我们能找到一个更好的词，能够涵盖整个过程，我们甚至不再关心是否存在划分。我的意思是，如果你想想看，敏捷和DevOps之间的分界线仍然存在于开发和运维之间这个奇怪的空间，而这正是我们通过DevOps想要消除的地方。可以说，如果你认真对待DevOps，你就不可能相信敏捷和DevOps之间存在本质的分隔。
- en: '"I think it''s more and more questionable how meaningful Agile and DevOps are
    without each other."'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '"我认为，敏捷和DevOps如果没有彼此配合，其意义变得越来越值得怀疑。"'
- en: —Jeff Sussna
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: —Jeff Sussna
- en: '**Viktor Farcic**: In your experience, are there expertise groups that are
    more or less willing to adopt this line of thinking, or is that a universal problem
    for everybody?'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：根据你的经验，是否有某些专家团队更愿意接受这种思维方式，还是说这是每个人都会面临的普遍问题？'
- en: '**Jeff Sussna**: I think that more and more people are comfortable with the
    idea of joining Agile and DevOps together from the perspective of how fast we
    can get something from the product manager''s brain into production. I think the
    backside of the feedback loop is a lot harder, and I think most people are still
    struggling with that, and that''s a sin. As I''ve said before, I think both Agile
    and DevOps discussions often share the same sin, which is we think it''s one-directional.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**Jeff Sussna**：我认为越来越多的人开始接受将敏捷与DevOps结合的想法，特别是从如何将产品经理的脑海中的想法快速推向生产的角度来看。我认为反馈循环的后端要困难得多，我觉得大多数人仍然在为此而挣扎，这是一种错误。正如我之前所说，我认为敏捷和DevOps的讨论经常有一个共同的错误，那就是我们总认为它们是单向的。'
- en: 'I''ll give you an example: I worked with an organization where I was told by
    the head of development that they did sprint demos to show people what they were
    going to deploy before they deployed it. The point of a sprint demo is information;
    it''s gathering feedback, it''s making sure you''re about to deploy the right
    thing in the right way before you deploy it. This head of development was approaching
    the sprint demo in a pure sense: "well, we''re done, and we''re going to let you
    see it before we ship it, but don''t expect us to make any changes or listen to
    your feedback." I see that problem all over the place.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我给你举个例子：我曾经和一个组织合作，开发负责人告诉我他们会做冲刺演示，展示他们将在部署前展示给大家的内容。冲刺演示的重点是信息收集；它是为了收集反馈，确保在部署之前，你将以正确的方式部署正确的东西。这个开发负责人以一种纯粹的方式对待冲刺演示：“好吧，我们完成了，在发货之前让你们看看，但不要指望我们会做任何改动或听取你们的反馈。”我在很多地方看到这个问题。
- en: '**Viktor Farcic**: It''s almost as if I''m giving you permission to see it
    but whether you see it or not doesn''t matter much to me.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：这就像是我在给你许可去看它，但你是否看得到对我来说并不重要。'
- en: '**Jeff Sussna**: That''s exactly right, and I think part of the benefit of
    infusing design thinking is that at the very heart of it is the idea that you''re
    going to show it to somebody, and then you''re going to make changes based on
    their response to it.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**Jeff Sussna**：没错，我认为融入设计思维的好处之一就在于其核心理念是，你要将其展示给某个人，然后根据他们的反馈做出相应的更改。'
- en: '**Viktor Farcic**: If I understand it right, that means that even if we go
    years back, in many places Agile didn''t work, because if it did then that type
    of thinking would be engraved already, at least, in parts of an organization.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：如果我理解得没错，这意味着即使我们回顾过去很多年，在许多地方敏捷方法并没有成功，因为如果它真的成功，那么这种思维方式早就应该深入人心，至少在组织的某些部分。'
- en: You mentioned complex systems, and I think that's actually worth talking about
    a little bit.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你提到复杂系统，我觉得这实际上值得稍微谈一谈。
- en: You hit the nail on the head when you said that complex systems are ones that
    you can't predict. So, in that sense, you can't plan for them; you can only really
    probe them and interact with them based on what you learned from that probe.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你说得非常对，复杂系统是那些你无法预测的系统。所以，从这个意义上讲，你无法为它们制定计划；你只能根据从探索中获得的知识去探索并与之互动。
- en: '**Jeff Sussna**: The systems we are building are complex systems, so even in
    enterprises where there are very legacy environments, I see more and more that
    they''ll have outages that are caused by interactions between the application,
    database, network, load balancer, and firewall.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**Jeff Sussna**：我们所构建的系统是复杂系统，即使在那些有着悠久传统环境的企业中，我也越来越看到它们会因为应用程序、数据库、网络、负载均衡器和防火墙之间的交互而发生故障。'
- en: In order to understand the outage, you have to understand how all of the components
    interact with each other, and if any of those had been different, then the outage
    might have been different, or it might not have happened at all. What digital
    business and the digital economy and all that the fun stuff is doing is breaking
    down the boundaries between these different systems.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解故障，你必须了解所有组件如何相互作用，如果其中任何一个组件有所不同，那么故障可能会有所不同，或者根本就不会发生。数字化业务和数字经济以及所有这些有趣的东西，正在打破这些不同系统之间的边界。
- en: '**Viktor Farcic**: When I see things like this whole idea of bimodal IT, to
    me it doesn''t actually connect to reality, because what I see is customer-facing
    applications that, in order to work properly, have to interact with ERP, or Enterprise
    Resource Planning, systems, and the lack of agility in the ERP system becomes
    a blocker to agility in the frontend system.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：当我看到像双模IT这种理念时，对我来说它并没有和现实连接起来，因为我看到的是面向客户的应用程序，为了正常运行，它们必须与ERP（企业资源规划）系统进行交互，而ERP系统缺乏的敏捷性成了前端系统敏捷性的一大障碍。'
- en: Nowadays, we have to think about our whole organization and all of our systems
    together as this one complex system.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须将整个组织和所有系统视为一个复杂的整体。
- en: '**Jeff Sussna**: If we can''t predict or control complex systems, what do we
    do? Do we just give up? No, we have to have the ability to continually learn.
    So, why do we need Agile? Why do we need DevOps? Why do we need design thinking?'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰夫·苏斯纳**：如果我们不能预测或控制复杂系统，那我们该怎么办？我们就放弃吗？不，我们必须具备持续学习的能力。那么，为什么我们需要敏捷？为什么我们需要DevOps？为什么我们需要设计思维？'
- en: Because when we approach them correctly, they give us the ability to very efficiently,
    and effectively, continuously learn from each other, from our customers, from
    our systems, from our incidents, and I think that's ultimately what we are trying
    to accomplish with all of these new practices.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 因为当我们正确地处理这些问题时，它们使我们能够非常高效、有效地持续地从彼此、从客户、从我们的系统、从我们的事件中学习，我认为这最终是我们想通过所有这些新实践来实现的目标。
- en: '**Viktor Farcic**: In my experience, when I dig a bit deeper, beyond what people
    tell me, I find somehow that the blame is always the biggest obstacle because
    when those things happen, like what you said – for example, an outage – somebody
    needs to be blamed for that, and that means nobody''s going to give me enough
    information so I can learn from it.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：根据我的经验，当我深入探讨时，超越人们告诉我的表面，我总能发现归咎于某人总是最大的障碍。因为当类似你说的事件发生时——比如停机——总会有人需要为此负责，这意味着没有人会提供足够的信息让我从中学习。'
- en: '**Jeff Sussna**: Even beyond that, the idea of blame assumes that you could
    isolate causes.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰夫·苏斯纳**：即便是这样，归咎于某个人的想法也假设了你能够将原因孤立开来。'
- en: '**Viktor Farcic**: Right, which brings us back to the complex system.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：没错，这又把我们带回了复杂系统的问题。'
- en: '**Jeff Sussna**: Exactly.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰夫·苏斯纳**：完全正确。'
- en: '**Viktor Farcic**: I think that gives us a nice place to wrap up unless you
    have anything else to say, Jeff?'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：我觉得这样就可以很好地结束讨论，除非你还有其他想说的，杰夫？'
- en: '**Jeff Sussna**: No, I don''t, but it''s been great talking to you, Viktor.
    I can''t wait to see what everyone else thinks about DevOps.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**杰夫·苏斯纳**：不，我不这样认为，但和你聊得很愉快，维克托。我迫不及待想看看其他人对DevOps的看法。'
