- en: Introducing James Turnbull
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍 James Turnbull
- en: James Turnbull leads a team of "CTOs in residence" at Microsoft who help start-ups
    build the right architecture and teams in order to be successful. A seasoned engineering
    and infrastructure author, James has published a series of books on those subjects.
    You can follow him on Twitter at `@kartar`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: James Turnbull 领导着微软的“常驻 CTO”团队，帮助初创公司构建正确的架构和团队，以实现成功。作为一位经验丰富的工程与基础设施作家，James
    已经出版了多本关于这些主题的书籍。你可以在 Twitter 上关注他，用户名是 `@kartar`。
- en: What is DevOps?
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 DevOps？
- en: '**Viktor Farcic**: Hello, James. I wanted to start our discussion with a question:
    what does DevOps mean to you? It''s a question that I find fascinating because
    everyone I''ve interviewed for this book has given me a different answer.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：你好，James。我想以一个问题开始我们的讨论：DevOps 对你来说意味着什么？这是一个我觉得非常有趣的问题，因为我为这本书采访的每个人都给出了不同的答案。'
- en: '**James Turnbull**: I''m not sure that there is a single description for DevOps
    anymore. I started talking about DevOps in 2009, and although I wasn''t at the
    first DevOps event in Ghent, Belgium, that year, I was at the next one.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**James Turnbull**：我不确定现在是否还能给 DevOps 一个单一的定义。我从 2009 年开始谈论 DevOps，尽管那年我没有参加比利时根特的第一次
    DevOps 事件，但我参加了下一次。'
- en: I think when it first started out, DevOps was really about trying to build bridges
    between operations and their functions and developers and their functions, which
    largely focused around the moment of handover where the code goes from being in
    development to being deployed and in production. Then from there, we analyzed
    a lot of the problems with that particular challenge and identified that some
    of the issues were cultural, some were technological, like automation and tooling,
    while other issues were process-oriented.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为 DevOps 刚开始时，确实是试图建立运维与开发之间的桥梁，主要集中在交接的时刻——代码从开发阶段过渡到部署并进入生产阶段。然后从那里，我们分析了这个特定挑战的许多问题，并发现其中一些问题是文化上的，一些是技术上的，比如自动化和工具，另外一些问题则是流程导向的。
- en: '"These days, I think DevOps is a lot of different things to a lot of different
    people."'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: “现在，我认为 DevOps 对很多不同的人来说有很多不同的含义。”
- en: —James Turnbull
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: —James Turnbull
- en: These days, I think DevOps is a lot of different things to a lot of different
    people. I think if you work in marketing, there was a time when you just relabeled
    all your tools as your DevOps toolkit. It's 2019, and you still see a lot of companies
    with a DevOps page, or they outright call themselves "DevOps something" – as to
    whether those tools are DevOps or not, I'm not sure.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我认为 DevOps 对很多不同的人来说有很多不同的含义。我认为，如果你从事市场营销工作，曾经有一段时间，你只是将所有工具重新标记为你的 DevOps
    工具包。到了 2019 年，你仍然会看到许多公司有一个 DevOps 页面，或者他们直接称自己为“DevOps 什么”——至于这些工具是否真的是 DevOps
    工具，我不确定。
- en: At the end of the day, DevOps is about ensuring that applications and products
    are built in a cross-functional way, so that product engineers, designers, operations,
    security, and business people all have a common understanding of their mission,
    which is to build products for their organizations that hopefully make that organization
    money.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到头来，DevOps 关乎确保应用和产品以跨职能的方式构建，这样产品工程师、设计师、运营、安保和商业人员都能对他们的使命有共同的理解——那就是为他们的组织构建产品，希望这些产品能够为组织创造利润。
- en: '**Viktor Farcic**: That makes sense. You mentioned DevOps tools, and at least
    when I visit companies and attend conferences, every single tool has the word
    DevOps attached to it. It''s kind of as if nobody can sell anything without DevOps,
    which leads me to think: is there even such a thing as DevOps tools?'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：这很有道理。你提到了 DevOps 工具，至少当我访问公司并参加会议时，每一个工具都有“DevOps”这个词。就好像没有
    DevOps，没人能卖任何东西，这让我开始思考：真的有 DevOps 工具这种东西吗？'
- en: '**James Turnbull**: No, I don''t think there is. I believe there are tools
    that make the process of being a cross-functional team better. I would argue that
    for many companies, Slack is a DevOps tool because it''s an easy way for companies
    to communicate across teams.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**James Turnbull**：不，我认为没有。我的看法是，确实有一些工具可以使跨职能团队的工作流程变得更好。我认为对于许多公司来说，Slack
    就是一个 DevOps 工具，因为它是一个便捷的方式，可以让公司跨团队进行沟通。'
- en: I would also say Puppet might be a DevOps tool, even Chef, Salt, Ansible, or
    Docker, because they all enable automation and workflow that makes it easier to
    manage and move assets and code around. Any tool that facilitates building that
    cross-functionality is probably a DevOps tool to the point where the term is likely
    meaningless.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我还想说，Puppet可能算是一个DevOps工具，甚至Chef、Salt、Ansible或Docker也是，因为它们都能实现自动化和工作流，使得管理和迁移资产与代码变得更加容易。任何促进跨职能构建的工具，可能都可以被视为DevOps工具，以至于这个术语可能已经没有什么实际意义了。
- en: What's the best stack available today?
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 今天最好的技术栈是什么？
- en: '**Viktor Farcic**: You''re a very technically oriented, hands-on person. All
    of your books, at least those that I''ve read, are highly technical, which gets
    me wondering whether you have a favorite stack. I saw that you wrote a lot about
    Puppet and Terraform. Is one replacing another? Moreover, where do you see the
    industry moving to now?'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇克**：你是一个非常技术导向、动手能力强的人。你所有的书，至少我读过的那些，都非常技术性强，这让我不禁想知道你有没有最喜欢的技术栈。我看到你写了很多关于Puppet和Terraform的内容。是其中一个在取代另一个吗？而且，你怎么看待现在行业的发展方向？'
- en: '**James Turnbull**: I''m probably less technical than I used to be. I''ve moved
    between a lot of different roles; these days, I''m primarily a people leader.
    I''m a CTO, and I''ve been a VP of engineering for a number of years, so I dabble
    in this space in my spare time, but I wouldn''t consider myself a practicing SRE
    or a practicing Systems Engineer anymore.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**詹姆斯·特恩布尔**：我可能不再像以前那样技术性强了。我曾在很多不同的角色之间转换；现在，我主要是一个领导者。我是CTO，也曾担任过多年的工程副总裁，所以现在我在业余时间涉猎这一领域，但我不再认为自己是一个实践中的SRE或系统工程师。'
- en: In terms of things like Puppet and Terraform, I think they do different things.
    Terraform is clearly an infrastructure build tool, and if you want to build a
    virtual private cloud (VPC) and a bunch of Amazon EC2 instances and a bunch of
    other things hooking them all together, then Terraform is the ideal tool. If you
    want to configure those assets and deploy the application on top of it, then I
    think Puppet, or another configuration management tool, is a more appropriate
    choice.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Puppet和Terraform这样的工具，我认为它们的作用不同。Terraform显然是一个基础设施构建工具，如果你想构建一个虚拟私有云（VPC），并创建一些Amazon
    EC2实例，以及其他一些将它们连接在一起的东西，那么Terraform是理想的工具。如果你想配置这些资产并在其上部署应用程序，那么我认为Puppet或其他配置管理工具是更合适的选择。
- en: '**Viktor Farcic**: How about the O''Reilly conferences? Do you see any trends
    there? Can you predict what''s coming next, at least within DevOps or infrastructure-related
    subjects?'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇克**：那么O''Reilly的会议呢？你在那儿看到什么趋势了吗？你能预测接下来会发生什么，至少在DevOps或基础设施相关的领域吗？'
- en: '**James Turnbull**: We''ve changed the purpose of Velocity considerably over
    the last couple of years. The future is really in distributed systems. I think
    that monolithic applications that are based in a single geography are the dodo
    of the infrastructure and architecture world. They have a long tail, and it will
    take a long time for them to go away, but people who are building new systems
    really need to think about whether that is the most appropriate way to develop
    their application or their service.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**詹姆斯·特恩布尔**：过去几年，我们大大改变了Velocity的目的。未来的重点确实是在分布式系统上。我认为基于单一地域的单体应用已经是基础设施和架构世界的“恐龙”。它们的生命周期很长，可能需要很长时间才能消失，但那些正在构建新系统的人，真的需要考虑这是否是开发他们的应用或服务的最合适方式。'
- en: I think there's a couple of reasons for that, one of them obviously being that
    monolithic applications tend to move slowly, and speed to market really matters
    now, as does your ability to deploy a new feature, a new capability, or a new
    offering of some kind that actually makes a marked difference, as does performance,
    and scaling, and availability. Monolithic applications are notoriously not great
    at that.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为有几个原因，其中一个显然是单体应用程序往往更新缓慢，而市场速度现在非常重要，就像你部署一个新特性、新功能或某种能带来显著变化的服务一样，性能、扩展性和可用性也同样重要。单体应用在这方面通常做得不太好。
- en: '"Customers have very high expectations about the performance of applications
    and services, which are significantly changing the way that data is distributed."'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: “客户对应用程序和服务的性能有很高的期望，这正在显著改变数据分发的方式。”
- en: —James Turnbull
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: — 詹姆斯·特恩布尔
- en: The second reason is that I think customer expectation is much higher now. The
    last couple of generations of folks, who are probably the third generation who
    grew up as sort of internet natives or cloud natives, have never known a time
    where they didn't have data on their phones. Customers have very high expectations
    about the performance of applications and services, which are significantly changing
    the way that data is distributed. For example, no longer is the optimum model
    for a lot of applications a large centralized data center; it is, in fact, an
    edge computing-centric distributed application where the data for a particular
    cohort of customers is closer to those customers rather than your core infrastructure.
    I think, overall, what we see now is that, for the next two or three years at
    least, distributed systems will be the focus of infrastructure and application
    development, and certainly the backend.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个原因是我认为客户的期望现在要高得多。过去几代人，可能是第三代互联网或云原生的成长者，他们从未经历过没有手机数据的时光。客户对应用程序和服务的性能有很高的期望，这显著地改变了数据的分发方式。例如，不再是很多应用程序的最佳模型是一个大型集中式数据中心；事实上，它是一个以边缘计算为中心的分布式应用程序，在这种模式下，某个特定用户群体的数据更接近这些用户，而不是靠近核心基础设施。我认为，总的来说，我们现在看到的是，至少在未来两到三年，分布式系统将成为基础设施和应用开发的重点，尤其是在后端。
- en: Monoliths and microservices
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单体架构与微服务
- en: '**Viktor Farcic**: You mentioned monoliths and microservices. Can you explain
    why they''ve only become popular now? I mean, obviously, microservices have existed
    for a number of years. Is that because our needs changed or the tools that we
    have access to changed? It''s not that that concept didn''t exist for a long time,
    but everybody only started talking about them recently.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇克**：你提到了单体架构和微服务。你能解释一下为什么它们现在才开始流行吗？显然，微服务已经存在了几年。这是因为我们的需求发生了变化，还是我们能使用的工具发生了变化？并不是说这个概念很久以前就存在了，而是大家最近才开始谈论它们。'
- en: '**James Turnbull**: When I first started out in the industry, there was a concept
    called service-oriented architecture. Primarily, it was a way to break services
    into individual fault domains that allowed them to scale, manage, and interact
    on their own. The definition of service was pretty broad. It generally didn''t
    resemble a microservice.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**詹姆斯·特恩布尔**：我刚开始进入这个行业时，有一个概念叫做面向服务的架构（SOA）。主要是将服务分解为独立的故障域，使它们能够独立扩展、管理和交互。服务的定义相当广泛，通常并不像微服务那样。'
- en: But I think a couple of things have happened, namely that virtualization, the
    cloud, and containers have enabled microservices architecture. They're very easy
    tools to allow someone to build those services.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 但我认为发生了几件事情，即虚拟化、云计算和容器使得微服务架构得以实现。这些工具非常易用，允许人们构建这些服务。
- en: I think the reason those services have also become popular is that if you are
    building an application that is designed to be retail and customer facing, and
    you want that application to be able to move fast, then building independent services
    that are easy to iterate on is significantly easier than building a giant monolith
    where, at some point in time, you'll lose the ability to reason about the model.
    You will lose the ability to understand the model as a whole, and you will lose
    the ability to make changes to the model without potentially impacting other things,
    whereas microservices with appropriate protocols and APIs can be versioned and
    managed, and canary-deployed and rolled out.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这些服务之所以变得流行的原因是，如果你正在构建一个面向零售和客户的应用程序，并且希望该应用程序能够快速迭代，那么构建独立的服务比构建一个庞大的单体架构要容易得多，因为在某个时刻，你会失去对模型的理解能力。你将无法全面理解这个模型，也无法在不影响其他部分的情况下对其进行更改，而微服务则可以通过合适的协议和
    API 进行版本控制、管理，并可以进行金丝雀发布和滚动更新。
- en: '**Viktor Farcic**: Do you have any contact or experience with security in that
    model? Because I hear security is kind of a concern, especially when joined with
    containers.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇克**：你有接触或在这种模式下的安全经验吗？因为我听说安全性是一个问题，特别是当与容器结合时。'
- en: '**James Turnbull**: I was a security engineer for a few years, so I see containers
    as having some security challenges. Obviously, a container is not as robust as
    a virtual machine in the sense that the walls between compute resources are considerably
    thinner. For example, in most cases, a container represents a process separation
    versus a hypervisor separation. But I think that, realistically, a lot of it comes
    down to how you deploy your services, and how you build your environment.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**詹姆斯·特恩布尔**：我曾是一名安全工程师几年，所以我认为容器在安全性方面有一些挑战。显然，从计算资源之间的隔离来看，容器不如虚拟机稳健。例如，在大多数情况下，容器代表的是进程隔离，而不是虚拟机管理程序的隔离。但我认为，实际上，很多问题归根结底还是取决于你如何部署你的服务，以及如何构建你的环境。'
- en: If you put security architecture up front and apply security in depth at both
    an application and infrastructure level, and you design it into your environment,
    then a lot of the common issues that have tripped people up in the past start
    to become less of a concern. There's a lot of work being done around building
    zoned security models and deploying like-risk-level workloads together. You deploy
    your cluster of marketing web servers together, but not on the same host as your
    payroll system. There's a lot of common-sense stuff that has been done for years
    and years, and that, I think, makes a large number of the security concerns in
    that space not as severe as they look.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在前期就将安全架构考虑进去，并在应用程序和基础设施层面都实施深度安全，并且将其设计进你的环境中，那么过去让人困扰的许多常见问题就会变得不那么令人担忧。在构建区域化安全模型和将相似风险水平的工作负载一起部署方面，已经做了大量工作。你可以将营销网页服务器群集部署在一起，但不能与工资系统部署在同一主机上。多年来，很多常识性的做法已经被采用，我认为这使得该领域的大多数安全问题不如看起来那么严重。
- en: '**Viktor Farcic**: When I look at the software, at least as you describe it
    in the books you''ve written, it''s always open source. Do you see that as the
    death of closed source? Or does closed source even exist anymore?'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：当我看待软件时，至少在你书中描述的方式下，它总是开源的。你认为这意味着封闭源代码的死亡吗？还是封闭源代码现在依然存在？'
- en: '**James Turnbull**: I think the same thing that''s happening to the customer
    is also happening to software in other places. I like open source software because
    I like the ability to control my own destiny. I also believe in composable applications.
    The fundamental principle of a Unix application is small, composable tools that
    I can put together and build a stack of, and I''m very attracted to that model.
    For myself, and a lot of other people who are probably reasonably experienced
    engineers, I like choosing a stack where I can take a bit of Kubernetes and a
    bit of Prometheus, and maybe a bit of this and a bit of that, and I can combine
    them together to provide me with a stack that I like and can work with.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**詹姆斯·特恩布尔**：我认为对客户发生的事情，也同样发生在其他领域的软件上。我喜欢开源软件，因为我喜欢能够控制自己命运的能力。我也相信可组合应用程序。Unix
    应用程序的基本原则是小巧、可组合的工具，我可以将它们组合起来，构建一个堆栈，我非常喜欢这种模式。对我自己来说，和许多其他可能有相当经验的工程师一样，我喜欢选择一个堆栈，在这个堆栈中，我可以取一些
    Kubernetes，取一些 Prometheus，也许再加一点这个和一点那个，然后将它们结合起来，提供我喜欢并且能够使用的堆栈。'
- en: '"I like open source software because I like the ability to control my own destiny."'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '"我喜欢开源软件，因为我喜欢能够控制自己命运的能力。"'
- en: —James Turnbull
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: —詹姆斯·特恩布尔
- en: I still think a lot of companies, particularly enterprise companies, want someone
    to talk to if something goes wrong with a product or an application. They want
    a neck to choke, or someone to be able to provide them with support and indemnification,
    so I think there's definitely still a market for closed source enterprise software.
    But I'm not convinced that the demand is as large as it used to be. More and more
    people are building things that are primarily open source. When there's open source
    at the core of it, they're selling additional bits of technology or functionality
    that is either closed source or commercial in some way on top of that. If you
    look at a significant number of the movements happening around orchestration tools,
    then at the heart of it, a lot of them are Kubernetes and then other things are
    built around or on top of that.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我仍然认为很多公司，特别是企业公司，仍然希望有人可以在产品或应用程序出现问题时与之沟通。他们想找一个责任人，或者需要有人为他们提供支持和赔偿，因此我认为封闭源代码的企业软件仍然有市场。但我并不确信需求仍然像以前那样庞大。越来越多的人在构建主要是开源的东西。当它的核心是开源时，他们会在此基础上出售额外的技术或功能，这些技术或功能可能是封闭源代码的，也可能以某种方式是商业化的。如果你看看围绕编排工具发生的大量变化，那么其中很多的核心都是
    Kubernetes，其他的一些工具则围绕它或基于它构建。
- en: Kubernetes, RHEL, and Ubuntu
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kubernetes、RHEL 和 Ubuntu
- en: '**Viktor Farcic**: You mention Kubernetes. Do you think Kubernetes will affect
    operating systems? Are we going to continue seeing RHEL and Ubuntu dominating
    the market?'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：你提到 Kubernetes。你认为 Kubernetes 会影响操作系统吗？我们会继续看到 RHEL 和 Ubuntu
    主导市场吗？'
- en: '**James Turnbull**: I don''t think so. I personally think the operating system
    is dead; I don''t see a purpose for it. I want to build composable things that
    just use the system-level resources that I care about, whether they are disk,
    CPU, or memory. I want to be able to take libraries or middleware from a selection
    of stuff and then combine those without needing a huge surface area of other materials.
    I think that we''ll see more and more things that are shaped like Alpine and CoreOS,
    where the operating system is largely a black box, or you''re getting a piece
    of the operating system where you don''t configure any of it, as a lot of it''s
    not exposed to you.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**James Turnbull**：我不这么认为。我个人认为操作系统已经过时；我看不出它的存在意义。我想构建的是那些可以组合的东西，它们只使用我关心的系统级资源，无论是磁盘、CPU
    还是内存。我希望能够从一系列库或中间件中选择，然后将这些组合起来，而无需大量其他材料的支持。我认为我们将会看到越来越多像 Alpine 和 CoreOS 这样的东西，在这些系统中，操作系统在很大程度上是一个黑匣子，或者你得到的是操作系统的一个片段，你并不需要配置它，因为很多内容对你是隐藏的。'
- en: I still think that people will want some sort of support. They'll want somebody
    to be able to talk to when something breaks. I just wonder if it might be at a
    different level of abstraction that they wish to support. Do they need a RHEL
    support account or do they need a support account for a particular workload, application
    server, or a stack running on, say, OpenShift? Again, this is a long tail problem,
    so I suspect it'll be a number of years before this is over, but I don't see the
    operating system market having a long future.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我仍然认为人们会需要某种形式的支持。当某些东西出现故障时，他们希望能有人可以沟通。我只是想知道他们是否希望在一个不同的抽象层次上获得支持。比如他们是需要一个
    RHEL 支持账户，还是需要一个针对特定工作负载、应用服务器或在比如 OpenShift 上运行的堆栈的支持账户？再次强调，这是一个长尾问题，所以我猜测在这方面可能需要几年时间，但我不认为操作系统市场会有太长的未来。
- en: '**Viktor Farcic**: Do you think that it will be replaced with new operating
    systems like CoreOS, or will it be the do-it-yourself unikernel type?'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：你认为它会被像 CoreOS 这样的新操作系统取代吗？还是会变成类似于自己动手的 unikernel 类型？'
- en: '**James Turnbull**: I think unikernel is a possibility. With serverless stuff,
    you don''t really care about the underlying hardware, or whether you should run
    AWS Lambda or Azure, for example. It doesn''t really matter whether that''s Ubuntu,
    Fedora, or RHEL – it''s not relevant to you. Therefore, I think we''ll see things
    where it''s either hidden from the end user because it''s a black box to them,
    because they never need to change anything in it, or it''s a segment, a slice
    of the operating system rather than a whole operating system.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**James Turnbull**：我认为 unikernel 是一种可能性。对于无服务器的东西来说，你并不关心底层硬件，或者比如说你应该运行 AWS
    Lambda 还是 Azure。这并不重要，不管它是 Ubuntu、Fedora 还是 RHEL —— 对你来说并不相关。因此，我认为我们将会看到一些东西，它要么对终端用户隐藏，因为它对他们来说是一个黑匣子，他们不需要更改任何内容，要么它是操作系统的一部分、一个切片，而不是整个操作系统。'
- en: '**Viktor Farcic**: You mentioned serverless. I often hear concerns about people
    being vendor-locked-in. Do you feel that''s a valid concern?'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：你提到了无服务器计算。我常常听到人们担心会被供应商锁定。你认为这是一个有效的担忧吗？'
- en: '**James Turnbull**: I mean, that''s what those cloud vendors want you to do.
    They want you to buy all of the pieces of their product and lock you into their
    ecosystem, so I do think that''s a concern.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**James Turnbull**：我的意思是，那正是这些云供应商希望你做的事情。他们希望你购买他们产品的所有部分，并将你锁定在他们的生态系统中，因此我确实认为这是一个需要关注的问题。'
- en: Over time, we'll see more and more things look like standards, like, to a large
    extent, a RESTful API, GraphQL API, or a function of some kind where it's very
    easy to create sort of patterns for. Whether that runs on top of Azure Functions
    or Lambda, it might just be a bit of deployment functionality rather than changes
    to the core code of the function itself. I'd be curious, because I haven't written
    very much outside of Azure and AWS to see if you could write a function that had
    multiple backends and multiple deployment paths that were essentially identical.
    I suspect it would be pretty easy.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，我们会看到越来越多的事物看起来像是标准，比如，在很大程度上，RESTful API、GraphQL API 或某种功能，它们非常容易创建模式。无论这些是运行在
    Azure Functions 还是 Lambda 上，它们可能只是一些部署功能，而不是对函数核心代码的更改。我很好奇，因为我在 Azure 和 AWS 之外的编程不多，我想看看你是否可以写一个函数，拥有多个后台和多个部署路径，但它们本质上是相同的。我猜这应该会很容易。
- en: '**Viktor Farcic**: How about schedulers? I mean, with Kubernetes, I saw 2017
    as being more about schedules. Do you think that''s over, or are we going to continue
    seeing multiple solutions? Right now, is Kubernetes the only thing or is there
    is still Swarm and Mesos?'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：那关于调度器呢？我指的是，在 Kubernetes 方面，我看到 2017 年更多的是关于调度的内容。你认为这种情况已经结束了吗，还是我们将继续看到多个解决方案？现在，Kubernetes
    是唯一的选择，还是仍然有 Swarm 和 Mesos 存在？'
- en: '"You still need a reasonable amount of infrastructure-centric knowledge to
    run Kubernetes, and scheduling is not a trivial tool to build.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: “你仍然需要相当多的基础设施知识来运行 Kubernetes，而调度不是一个简单的工具。”
- en: —James Turnbull
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: —James Turnbull
- en: '**James Turnbull**: I think that''s a hard question to answer because I don''t
    think the market has shaken itself out yet. I like Kubernetes, Mesos, and things
    like Nomad, but I suspect for the vast majority of people, these tools are at
    the wrong level of abstraction. You still need a reasonable amount of infrastructure-centric
    knowledge to run Kubernetes, and scheduling is not a trivial tool to build. I
    think there''s a long way to go before you can think about Kubernetes or any of
    those other orchestration tools as more platform as a service where a developer
    can just push the workload at a black box like Heroku, and it''ll just work.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**James Turnbull**：我认为这个问题很难回答，因为我认为市场还没有完全稳定。我喜欢 Kubernetes、Mesos 和类似 Nomad
    这样的工具，但我猜对于绝大多数人来说，这些工具的抽象层级可能过高。你仍然需要相当多的基础设施知识来运行 Kubernetes，而调度不是一个简单的工具。我要说的是，我们距离可以把
    Kubernetes 或其他任何编排工具看作是一个平台即服务的工具还很远，在那个时候，开发者可以像在 Heroku 上一样，将工作负载推送到一个黑盒子里，它就会自动工作。'
- en: I think that'll happen as some of the clouds start to roll out tools like the
    Amazon, Azure, or Google Kubernetes services, where if you take something like
    Amazon's EC2 Fargate product, where you don't manage the instances anymore, combine
    that with AKS, their Kubernetes product, and suddenly it's heading very close
    to a continuous delivery and integration model where I just push container images
    with some metadata about how many of them, and maybe wired into some metrics or
    something to scale or shrink them, and then it's fine. I think that's probably
    where we're going, but I think we're a little way off from that being a realistically
    useful tool for a vast audience.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这将会发生，因为一些云服务商开始推出类似亚马逊、Azure 或 Google Kubernetes 服务的工具，如果你拿 Amazon 的 EC2
    Fargate 产品来说，你不再管理实例，将其与 AKS（他们的 Kubernetes 产品）结合起来，突然之间，它就非常接近持续交付和集成模型，在这个模型中，我只需推送包含一些元数据的容器镜像，说明它们的数量，并可能与某些度量数据或其他内容连接以进行扩展或缩减，然后一切就绪。我认为这可能是我们未来的发展方向，但我认为我们离这成为一个对广大用户真正有用的工具还有一段距离。
- en: '**Viktor Farcic**: Are there any other subjects you would like to discuss or
    comment upon?'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：你还有其他想讨论或评论的话题吗？'
- en: '**James Turnbull**: I think there''s a fascinating discussion happening at
    the moment about the definition of monitoring. Monitoring has traditionally been
    very infrastructure-centric, where you''d have a machine out there that monitors
    the CPU and the memory and the disk, and maybe some transactions and error rates.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**詹姆斯·特恩布尔**：我认为目前有一个非常有趣的讨论，关于监控的定义。传统上，监控非常侧重于基础设施，通常会有一台机器在外面监控CPU、内存和磁盘，可能还会监控一些事务和错误率。'
- en: 'Today, though, we see two things happening: one, we see much more framework-oriented
    monitoring; for example, things like Google''s four golden signals or Brendan
    Gregg''s USE method, Utilization Saturation and Errors. Then, we are also seeing
    observability-centric things like tracing and end-to-end analysis of performance.
    I''m really interested to see what tools will emerge in that space in the next
    couple of years.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然而今天，我们看到了两件事：一是我们看到更多框架导向的监控；例如，像谷歌的四个黄金信号或布伦丹·格雷格的USE方法——利用率、饱和度和错误率。其次，我们也看到了以可观测性为中心的东西，比如跟踪和端到端性能分析。我非常感兴趣的是，在未来几年里，这个领域会出现哪些新工具。
- en: '**Viktor Farcic**: I get the impression that they are not catching up with
    the increase in services we are running today.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：我觉得他们并没有跟上我们今天运行的服务量的增长。'
- en: '**James Turnbull**: I agree. I think that it''s an aspect of monitoring that
    has always been a bit of an afterthought or a reactive thing that happens after
    something goes wrong. I believe we are now starting to see that injected a bit
    earlier into the development process, so the monitoring, metrics, and exposing
    metrics can be consumed by health checks, which are happening more often, in which
    case it''ll be super interesting to see what tools and changes in infrastructure
    emerge out of that.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**詹姆斯·特恩布尔**：我同意。我认为这是监控的一个方面，过去它总是有点被忽视，或者是在出现问题后才进行反应的事情。我相信我们现在开始看到这种做法稍微提前注入到开发过程中，所以监控、指标和暴露指标可以被健康检查消耗，而健康检查现在进行得更频繁，这样的话，看看到底会有什么工具和基础设施上的变化出现，将会非常有趣。'
- en: I think a lot of people still have legacy Nagios installations, and it will
    be interesting to see what replaces those in the next five years.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为很多人仍然使用遗留的Nagios安装，未来五年内看看到底是什么将取代它们，会很有趣。
- en: '**Viktor Farcic**: Do you think then that tools like Prometheus are already
    getting there, or we are going to see something even more radically different?'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：你认为像Prometheus这样的工具已经在走向正确的方向了吗，还是我们将看到一些更为彻底的不同工具出现？'
- en: '**James Turnbull**: I think Prometheus is an exciting avenue, for certain types
    of services like microservices, container-driven applications, and Kubernetes.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**詹姆斯·特恩布尔**：我认为Prometheus是一个令人兴奋的方向，适用于某些类型的服务，比如微服务、容器驱动的应用和Kubernetes。'
- en: However, I'm not necessarily convinced it's a very good fit everywhere. But
    then again, I don't think any tool is a universal panacea, so I think we'll see
    a lot more from Prometheus. It has a bright future.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我并不完全相信它在所有地方都适用。但话说回来，我认为没有任何工具是万能的灵丹妙药，所以我认为我们会看到Prometheus更多的应用。它有一个光明的未来。
- en: I think we'll also see a lot more of tracing-style tools. In addition, we'll
    see a second or third wave of SaaS tools. The first wave tools, which were simple
    things like probing tools where you would connect to a service, and if it returns
    an HTTP response with a 200 exit code, then it's up, and maybe you sample a little
    bit of data to confirm that it's doing the right thing. And then in the second
    and third generations there are things like New Relic and Dynatrace, which were
    more APM tools.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为我们还会看到更多类似跟踪风格的工具。此外，我们还会看到第二波或第三波的SaaS工具。第一波工具比较简单，像探测工具，你连接到一个服务，如果它返回一个带有200退出代码的HTTP响应，那么它就是正常的，也许你会抽样一点数据确认它正在做正确的事情。然后在第二代和第三代工具中，出现了像New
    Relic和Dynatrace这样的应用性能管理（APM）工具。
- en: '"I think we''ll see a lot more from Prometheus. It has a bright future."'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: “我认为我们会看到Prometheus更多的应用。它有一个光明的未来。”
- en: —James Turnbull
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: —詹姆斯·特恩布尔
- en: In the next wave of SaaS services, we'll see a combination, a hybrid of infrastructure-level
    monitoring, middleware application-level monitoring, performance-level monitoring,
    transaction-level tracing, and then layered on top some business-level monitoring.
    I don't know what those tools are yet, but I think there is definitely some interesting
    stuff that will happen in that space.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一波SaaS服务中，我们将看到一种组合，一种混合模式，结合了基础设施级监控、中间件应用级监控、性能级监控、事务级跟踪，然后再叠加一些业务级监控。我现在还不知道这些工具是什么，但我认为在这个领域肯定会有一些非常有趣的事情发生。
- en: '**Viktor Farcic**: Since we talked about Prometheus, it might be worthwhile
    mentioning that you wrote a book about it. Where can we get it?'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔西奇**：既然我们谈到了Prometheus，或许值得一提的是你写了一本关于它的书。我们可以在哪里购买这本书？'
- en: '**James Turnbull**: The book is called *Monitoring with Prometheus* (https://prometheusbook.com),
    and there''s a discount code, `TALKINGDEVOPS`, that''ll give the readers 25 percent
    off.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**詹姆斯·特恩布尔**：这本书叫做*《Prometheus监控》*（[https://prometheusbook.com](https://prometheusbook.com)），并且有一个折扣码`TALKINGDEVOPS`，读者可以享受25%的折扣。'
- en: '**Viktor Farcic**: I think we can agree that the future will be a fascinating
    space. Thank you.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔西奇**：我想我们都能同意，未来将会是一个令人着迷的领域。谢谢。'
