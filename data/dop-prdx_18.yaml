- en: Introducing Liz Keogh
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍Liz Keogh
- en: A holder of the Gordon Pask Award, given by the Agile Alliance, Liz Keogh specializes
    in Cynefin, and putting Agile at Scale in context. Liz embraces the many risks
    inherent in software delivery, driving collaboration and transparency between
    teams. You can follow her on Twitter at `@lunivore`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 作为敏捷联盟颁发的戈登·帕斯克奖得主，Liz Keogh 专注于 Cynefin 框架，并将敏捷在规模化中的应用置于背景中。Liz 接受软件交付中的各种风险，推动团队之间的协作和透明度。你可以在
    Twitter 上关注她，用户名是`@lunivore`。
- en: '**Viktor Farcic**: I want to start by asking what exactly do we mean when we
    say DevOps? I was also wondering though if you could touch upon the relationship,
    if there is one, between DevOps and Agile.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我想先问一个问题，当我们说 DevOps 时，究竟指的是什么？另外，我也在想，能否简单谈一下 DevOps 与敏捷之间的关系，如果有的话。'
- en: The relationship between DevOps and Agile
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps 与敏捷的关系
- en: '**Liz Keogh**: DevOps used to be when you did Agile with a small team; back
    then, it was just developers in small, cross-functional teams who were writing
    code directly for the customers. The customers would give the DevOps team their
    requirements; the developers would then develop the code and give it back to the
    customers. Now you''ve got much larger enterprise organizations where operations
    is a separate department, and possibly even a separate company within the larger
    group, and yet you still want to ship stuff. I always say that DevOps is a good
    start.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**Liz Keogh**：DevOps 曾经是当你在小团队中做敏捷时的情形；那时，只有小型跨职能团队的开发人员直接为客户编写代码。客户会将需求交给
    DevOps 团队；开发人员然后开发代码并交还给客户。现在，你有了更大的企业组织，其中运维是一个单独的部门，甚至可能在更大的集团内是一个独立的公司，但你仍然希望能够发布东西。我总是说
    DevOps 是一个很好的开始。'
- en: '"DevOps used to be when you did Agile with a small team; back then, it was
    just developers in small, cross-functional teams who were writing code directly
    for the customers."'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: “DevOps 曾经是当你在小团队中做敏捷开发时的情况；那时，只有小型跨职能团队的开发人员直接为客户编写代码。”
- en: —Liz Keogh
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: —Liz Keogh
- en: Agile generally starts with the development teams. You've likely got some business
    analyst types, testers, and developers all writing the code, and then they think
    they're done. Except they're not done, because they still haven't actually shipped
    the product yet. Operations is the next stage of that.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷通常从开发团队开始。你可能有一些业务分析人员、测试人员和开发人员一起编写代码，然后他们认为自己完成了工作。实际上他们还没有完成，因为他们还没有真正发布产品。运维是接下来的阶段。
- en: The way you engage with your customers hasn't really changed, but if you can
    actually get to the point where you can ship stuff reliably to the customer and
    get feedback from people on how it's going, then you're doing well. It's the difference
    between changing direction within the team and actually changing direction with
    whatever you put out there. I'm personally a massive fan of the Agile Fluency
    Model.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你与客户的互动方式并没有什么变化，但如果你能做到可靠地将东西交付给客户，并从客户那里获得反馈，了解进展如何，那你就做得很好了。这是团队内部调整方向和实际改变你发布的内容之间的区别。我个人非常喜欢敏捷流畅度模型。
- en: '**Viktor Farcic**: Does that mean that Agile somehow excluded operations, or
    is that why DevOps was not Agile?'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：这是否意味着敏捷某种程度上排除了运维，或者这就是为什么 DevOps 不是敏捷的原因？'
- en: '**Liz Keogh**: I don''t know quite what''s happened, except that Agile has
    generally always been a development-focused thing. The Scrum framework talks about
    cross-functional teams, but I guess it''s because of the nature of enterprise
    that we''ve always put things into these horizontally sliced departments within
    both large-scale enterprises, and even some small-scale companies who''ve got
    their little fledgling departments. As soon as you compartmentalize, you''ve created
    a gap between development and operations that needs to be bridged.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**Liz Keogh**：我不太清楚到底发生了什么，只知道敏捷通常一直是一个以开发为中心的东西。Scrum框架谈到了跨职能团队，但我猜这与企业的性质有关，我们总是把事情划分到这些水平切割的部门中，不论是在大型企业，还是一些拥有自己初创部门的小公司中。只要你进行划分，你就创建了一个开发和运维之间的鸿沟，需要去弥合这个差距。'
- en: When I was working with ThoughtWorks, a community of individuals whose purpose
    was to revolutionize software design, creation, and delivery, I had rudimentary
    Linux admin skills, and I mean *really* rudimentary. I actually started as a sysadmin,
    but it was within Windows in 1998, so it wasn't as though much advanced skill
    was necessary. But now you look at all the specialist skills required to get stuff
    shipped, plus what it takes to make things maintainable and to be able to monitor
    things, to be able to back them up, and all the rest of the things you need, and
    it's generally beyond my skills as a developer.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当我在ThoughtWorks工作时，那是一个旨在革新软件设计、创建和交付的社区，我的Linux管理员技能是非常基础的，*真的*很基础。我实际上是从系统管理员做起的，但那是在1998年，主要是Windows，所以并不需要什么高级技能。但现在，你看看为了发布产品所需的各种专业技能，以及让产品可维护、能够监控、能够备份和其他所有需要的技术，这些通常超出了我作为开发者的能力范围。
- en: Nowadays, you've got Puppet, Chef, Docker, and Kubernetes; these are all tools
    I've never even touched because they've come along in the time since I've stepped
    away from doing hands-on development. I only tend to do hands-on development as
    part of my consulting work now, but you look at these specialist skills that they've
    got and it's really tempting to say, "Okay, well, that's your bit—we'll do our
    bit as development, and then we'll give it to you, and you'll ship it for us,
    and that'll be great."
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，你有Puppet、Chef、Docker和Kubernetes；这些工具我从未接触过，因为它们是在我离开实际开发工作后才出现的。我现在只在做咨询工作时参与一些实际的开发，但你看看这些专业技能，真的是很诱人让人想说，“好吧，那是你们的部分——我们做我们的开发部分，然后交给你们，你们负责发布，那就太好了。”
- en: 'When you actually look at what''s needed to make something reliable, and maintainable,
    and to stop those people having phone calls at 4:00 a.m. because something you
    wrote as a developer broke, then there''s a ton of things that you can do to help
    each other. Operations can talk to developers about what they need, and developers
    can speak with operations about what they''re going to do to help. That''s really
    what DevOps is: adults talking to each other and working together.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当你真正看清楚使某些东西可靠、可维护，并且避免因为你作为开发者写的东西坏掉而让那些人凌晨4点接到电话时，你会发现有很多事情可以做来帮助彼此。运维可以和开发者谈论他们需要什么，开发者也可以与运维沟通他们将做些什么来帮助。那才是真正的DevOps：成年人相互沟通并协作。
- en: 'I''ve spoken to people in enterprises who say, "I can''t do DevOps because
    operations is a separate department." But if you''re reporting a bug in production,
    all you need to do is put your name on the bug report, and you''ve started off
    well: you''re in operations.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾和一些企业中的人交谈，他们说，“我做不了DevOps，因为运维是一个独立的部门。”但如果你在生产环境中报告了一个bug，你所需要做的就是在bug报告上写上你的名字，这样你就做得很好：你就进入了运维部门。
- en: 'If you''re a developer, you just have to say, "Hey, if you have any problems
    with this bit of code, come and talk to me—don''t just write a report, we''re
    up here, why don''t you come and talk to the team, and we''ll help you fix it?"
    It''s that attitude to shipping software. That''s what DevOps really is: an attitude
    change and the building up of a relationship.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是开发者，你只需要说，“嘿，如果你在这段代码中遇到问题，来找我谈谈——不要只是写报告，我们在这里，为什么不来找团队谈谈，我们帮你解决？”这就是对发布软件的态度。这才是真正的DevOps：态度的转变和关系的建立。
- en: '"That''s what DevOps really is: an attitude change and the building up of a
    relationship."'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: “这才是真正的DevOps：态度的转变和关系的建立。”
- en: —Liz Keogh
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: —Liz Keogh
- en: '**Viktor Farcic**: That''s a brilliant point. It''s as if you went back in
    time and replaced the word "Ops" with "a tester of the problems we''re trying
    to solve with Agile." Those guys don''t speak to each other; they live in different
    departments.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**: 这是一个绝妙的观点。就好像你回到过去，把“Ops”一词换成了“我们用敏捷方法解决问题的测试员”。那些人彼此不沟通，他们生活在不同的部门里。'
- en: '**Liz Keogh**: Exactly!'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**Liz Keogh**: 正是如此！'
- en: '**Viktor Farcic**: I''ve heard you speak quite frequently about the Cynefin
    framework. Could you explain what it is?'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**: 我经常听你谈到Cynefin框架。你能解释一下它是什么吗？'
- en: The Cynefin framework
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Cynefin框架
- en: '**Liz Keogh**: The Cynefin framework is very much about making sense of different
    situations and how you approach them. For that reason, it''s called a "sense-making
    device." Think of it this way: there are five ordered domains – simple (or obvious),
    complicated, complex, chaotic, and disorder. The boundaries between them are fuzzy.
    In the simple, or obvious, domain, problems are easily solved because the solutions
    are obviously apparent and easily categorized.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**丽兹·基奥**：Cynefin 框架非常注重理解不同的情境以及你如何应对它们。出于这个原因，它被称为“感知装置”。你可以这样想：有五个有序的领域——简单（或显而易见）、复杂、复杂、混乱和无序。它们之间的边界是模糊的。在简单或显而易见的领域，问题很容易解决，因为解决方案显而易见且容易分类。'
- en: Take a landlady in the pub. I say, "What do you do when the beer runs out?"
    She responds by saying, "Well, I change the barrel, obviously."
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你是酒吧里的女房东。我问她：“啤酒用完了怎么办？”她回答说：“嗯，我当然是换桶。”
- en: When problems enter the complicated domain, they require expertise. A watchmaker
    can fix your watch, a car mechanic can fix your car, and that's great—both of
    those have predictable outcomes. In the complicated domain, problems can be analyzed
    and solved only if you've got the relevant expertise.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当问题进入复杂领域时，它们需要专业知识。一个钟表匠可以修理你的手表，一个汽车修理工可以修理你的汽车，这很好——这两者都有可预测的结果。在复杂领域中，只有当你具备相关的专业知识时，问题才能被分析和解决。
- en: The problem is that human beings crave certainty. We want predictability. We
    like knowing what's going to happen next. In all of our evolutionary experience,
    unpredictable things typically spell disaster, and that's chaotic, which, within
    the Cynefin framework, puts us in the chaotic domain. Chaos is accident and emergency,
    it's your house burning down, it's people bleeding to death. Chaos is a transient
    domain, however, which means it resolves itself really quickly. It doesn't like
    to stick around for long, but, unfortunately, it might not resolve itself in your
    favor. Chaos is also the domain of urgent opportunity, but it's normally a really
    bad place to be, and that's the problem, because there's a bunch of stuff that
    isn't predictable, or chaotic either. And this is the complex domain within which
    a lot of software development takes place.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于人类渴望确定性。我们想要可预测性。我们喜欢知道接下来会发生什么。在我们所有的进化经历中，不可预测的事情通常意味着灾难，那是混乱的，这在 Cynefin
    框架中把我们置于混乱领域。混乱是事故和紧急情况，是你的房子着火了，是人们在流血至死。混乱是一个暂时性的领域，这意味着它会迅速自我解决。它不喜欢长时间停留在那里，但不幸的是，它可能不会以对你有利的方式解决。混乱也是紧急机会的领域，但它通常是一个非常糟糕的地方，这就是问题所在，因为有一堆事情既不可预测，也不混乱。而这就是许多软件开发发生的复杂领域。
- en: We have to allow things to emerge. We know where we've got to when we look back
    with hindsight. This is called "correlated in retrospect." You can see where you've
    got to, but you couldn't have predicted the outcome. Anybody on Agile projects
    working in combination with the business, getting their feedback and changing
    direction, will be experienced with that, to an extent. Take, for example, the
    fact that you're working in a very high-uncertainty environment. You're doing
    product development or creating new products. One of the things that Toyota frequently
    does, for instance, is concurrent set-based engineering. They'll try three different
    types of engines at the same time, and from that, they work out which aspects
    of their engine they want to settle on for that new car. The complexity thinkers,
    or particularly the Cynefin thinkers, call these "parallel probes."
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须允许事物自然发展。当我们回顾过去时，我们知道我们已经达到了什么。这被称为“事后相关性”。你可以看到你达到了哪里，但你不可能预测结果。任何与业务合作、获取反馈并改变方向的敏捷项目工作者，都在某种程度上有这种经验。举个例子，你在一个高度不确定的环境中工作。你在做产品开发或创造新产品。比如，丰田经常做的一件事是并行的基于集的工程。他们会同时尝试三种不同类型的发动机，从中他们会找出他们想为新车定型的发动机方面。复杂性思考者，或特别是
    Cynefin 思考者，将这些称为“平行探针”。
- en: '**Viktor Farcic**: Could you explain what a probe is and how it relates to
    DevOps? I mean, how does this fold into the world that we live in today?'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：你能解释一下什么是探针以及它如何与 DevOps 相关吗？我的意思是，这如何融入我们今天所处的世界？'
- en: '**Liz Keogh**: A probe is something that''s safe to fail. As you get more and
    more innovative, you''ll get higher and higher levels of uncertainty in what you''re
    doing. Your variance increases, as do the chances of getting something wrong.
    You''re guaranteed to make discoveries, though you won''t make them in the safety
    of the team anymore. Many of these discoveries will take place in production,
    and you can''t help it because things are so new and unpredictable.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**Liz Keogh**：探测器是一种可以安全失败的东西。随着你变得越来越创新，你所做的事情中的不确定性也会越来越大。你的变化增多，犯错的机会也随之增大。不过你一定会做出一些发现，尽管这些发现不再发生在团队的安全环境中。许多这样的发现将在生产环境中发生，你无法避免，因为事情是如此新颖和不可预测。'
- en: '"I regard DevOps as absolutely essential for innovation, at scale certainly."'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: “我认为 DevOps 对于创新，特别是在大规模应用上，绝对是必要的。”
- en: —Liz Keogh
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: —Liz Keogh
- en: What you need to be able to do then is to change direction really, really quickly,
    and this is where my focus in DevOps is. A lot of people think of DevOps as a
    path to predictability rather than a safety net that allows you to do unpredictable,
    high-discovery things. I regard DevOps as absolutely essential for innovation,
    at scale certainly.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你需要能够非常非常快速地改变方向，而这正是我在 DevOps 中关注的地方。很多人把 DevOps 看作是通向可预测性的道路，而不是一个允许你做出不可预测、高度探索性工作的安全网。我认为
    DevOps 对于创新是绝对必要的，尤其是在大规模时。
- en: You need to have those automated tests, like the probes, not just because they're
    catching things, but because they provide living documentation and they keep the
    code easy to change. What's probably more important is that you want monitoring
    in place; you really want great relationships with operations, so that when those
    discoveries do come along, and when you do have a bug in production, and something
    does go haywire, you can spot it really quickly and you can roll back. This is
    where this idea of phoenix servers comes from, where you can release these bugs
    to one server, see how it goes, and if it doesn't work, you just trash your server.
    This is where the world is going now, where we can actually just play and see
    what's happening out there. We're used to playing as children in safe-to-fail
    places; this is how we learn as kids. Now we're kids in the playground of production,
    and it's still important that it's safe to fail out there. That's why I love DevOps
    so much.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要拥有那些自动化测试，比如探测器，不仅仅因为它们能捕捉到问题，更因为它们提供了活文档并且保持代码易于更改。可能更重要的是，你需要有监控机制到位；你真的需要与运维建立良好的关系，这样当那些发现发生时，当生产环境中出现
    bug，当某些东西出错时，你能够迅速发现并回滚。这就是凤凰服务器的概念，你可以将这些 bug 释放到一台服务器上，看看情况如何，如果不起作用，你就丢弃这台服务器。这就是现在世界的发展趋势，我们实际上可以“玩”并看到外面发生了什么。我们小时候习惯在安全的地方玩耍；这是我们学习的方式。现在我们就像是在生产环境的游乐场里玩耍，但仍然很重要的是，那里需要是一个可以失败的安全空间。这就是我如此热爱
    DevOps 的原因。
- en: '"It''s still important that it''s safe to fail out there. That''s why I love
    DevOps so much."'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: “在那里安全地失败仍然很重要。这就是我如此热爱 DevOps 的原因。”
- en: —Liz Keogh
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: —Liz Keogh
- en: '**Viktor Farcic**: DevOps kind of allows you to deploy to production and fail
    fast. Effectively, you''re validated in production instead of in a testing environment.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：DevOps 某种程度上让你能够快速部署到生产环境并快速失败。实际上，你是在生产环境中验证，而不是在测试环境中。'
- en: '**Liz Keogh**: The thing is, there''s a balance between getting it right and
    making it okay to get it wrong. I always say if it''s something that''s reasonable
    for you to predict, then you should probably try and get it right. As an example,
    you should use a production-like environment where you can run your tests using
    production-like data.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**Liz Keogh**：问题是，必须在做到正确与允许犯错之间找到平衡。我总是说，如果某件事是你可以合理预测的，那么你应该尽量做到正确。举个例子，你应该使用类似生产环境的环境，并用类似生产的数据来运行你的测试。'
- en: You won't be able to do it for everything unless you're actually going to have
    exactly the same customer base, data, and software landscape, which you never
    do; then you're going to end up testing some stuff in production. There's no way
    around that, so then you've got to have really good stuff in place to spot when
    it goes wrong.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你真的有完全相同的客户群、数据和软件环境，否则你是无法做到每件事都如此的，而这几乎是不可能的；你最终会在生产环境中测试某些东西。没有办法绕过这一点，所以你必须有非常好的机制来及时发现问题。
- en: '**Viktor Farcic**: You would then have to have exactly the same users as well
    if we follow the same logic, no?'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：如果我们遵循相同的逻辑，你也必须拥有完全相同的用户群，不是吗？'
- en: '**Liz Keogh**: Exactly!'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**Liz Keogh**：完全正确！'
- en: Behavior-driven development (BDD)
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行为驱动开发（BDD）
- en: '**Viktor Farcic**: You''re big on BDD. Can you explain to us, for those who
    may not know, what it is?'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：你对行为驱动开发（BDD）很感兴趣。你能向我们解释一下，对于那些可能不了解的人，它是什么吗？'
- en: '**Liz Keogh**: BDD came about as a replacement for test-driven development
    (TDD). TDD wasn''t really about testing, because anyone who''s done TDD would
    say that you wrote the test before there was even any code. Essentially, you''re
    not really testing anything; you''re describing how the code you''re about to
    write is going to work, why it''s going to be valuable to you, while coming up
    with some examples of how you want to use it.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**Liz Keogh**：BDD出现是作为测试驱动开发（TDD）的替代。TDD并不真正关于测试，因为任何做过TDD的人都会说，在甚至还没有任何代码之前，你就已经编写了测试。本质上，你并不真正测试任何东西；你在描述你将要编写的代码如何工作，为什么它对你有价值，并提出了一些你想要使用它的方式的示例。'
- en: 'When we actually start thinking of them as just examples of behavior, that''s
    class-level behavior. You would say, "Here''s an example of how my class behaves."
    But then you''ve got your system: "Here''s an example of how my system behaves,
    here''s an example of my application in use," and we call those scenarios. It''s
    the same. You take your scenarios, and now you''ve got an example of how you think
    your system is going to work.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始把它们视为行为的示例时，那就是类级行为。你会说：“这是我的类如何行为的一个例子。”但是然后你有了你的系统：“这是我的系统如何行为的一个例子，这是我应用程序使用的一个例子”，我们称之为场景。原理是一样的。你拿出你的场景，现在你有了你认为你的系统将如何工作的一个例子。
- en: When things are predictable, they require expertise, and having the conversation
    around those scenarios is a really great way of gathering that expertise yourself
    and picking up a language that people want to use around it so that you all have
    a common language, which they call a ubiquitous language. When things are really
    uncertain, those scenarios provide what we call coherence, so it's a realistic
    reason for thinking that what you're about to do is a good idea. You might decide
    that that example doesn't quite match what you're thinking, or it might turn out
    that customers don't quite want to use it that way, and then you'll have to change
    your scenario. The more uncertain you get, the more important it is to have the
    conversations that just explore, and the less important it is to put the automation
    around them, because automation is a commitment, and if you're committing to stuff
    that's changing, it's an over-investment on your end.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当事情是可预测的时候，它们需要专业知识，并围绕这些场景进行对话是一个非常好的方法，这样你可以自己获取专业知识，并掌握人们希望使用的语言，这就是我们称之为普遍语言的东西。当事情真的不确定时，这些场景提供了我们所说的一致性，因此有一个现实的理由认为你即将做的事情是一个好主意。你可能会发现，这个例子并不完全符合你的想法，或者客户并不完全想以这种方式使用它，然后你将不得不改变你的场景。你越是不确定，你就越需要进行探索性对话，而自动化的重要性就越小，因为自动化是一种承诺，如果你致力于那些正在变化的事物，那么这是一种过度投资。
- en: You want to commit as little as possible until you reckon you have a good understanding
    of the problem that you're trying to solve, and then when you understand the problem,
    you can start writing those scenarios, automating them, and having a stab at what
    you think the solution ought to look like. But sometimes it takes learning by
    doing, and you actually have to try something out and then you understand it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望在你认为自己已经对要解决的问题有了很好的理解之前，尽可能少地做承诺，然后当你理解了问题，你可以开始编写这些场景，自动化它们，并试图猜测你认为解决方案应该是什么样子。但有时候需要通过实践学习，你实际上必须尝试一些东西，然后你才能理解它。
- en: There's a lot of spiking and prototyping these days compared to when I started
    doing software development.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 与我开始软件开发时相比，现在的开发中有很多试验和原型制作。
- en: '**Viktor Farcic**: I''m guessing you started on Waterfall. Could you take us
    through your experience with that?'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我猜你开始是用瀑布模型。你能告诉我们你的经验吗？'
- en: '"There''s a lot of spiking and prototyping these days compared to when I started
    doing software development."'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '"与我开始软件开发时相比，现在的开发中有很多试验和原型制作。"'
- en: —Liz Keogh
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: —Liz Keogh
- en: '**Liz Keogh**: So, yes, when I started, I was on a Waterfall project, and we
    had three years'' worth of development, and I believe before that, there was a
    year and a half''s worth of analysis. I was in a basement for three years working
    on this thing, and we did not ship at all in those three years, but now we''re
    able to ship. Diana Larsen and James Shore, the people behind the Agile Fluency
    Model, call it to release at will. In this model, you''re able to release when
    you want to if you get this stuff right, which means you can change direction
    really, really quickly. This also means that spiking and prototyping is probably
    more important than it used to be, while automating is actually less important,
    though the conversations you have are still important.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**Liz Keogh**：是的，当我刚开始时，我参与了一个瀑布项目，我们有三年的开发周期，我相信在那之前还有一年半的分析周期。我在地下室待了三年，做这个项目，在这三年里我们根本没有发布任何东西，但现在我们能够发布了。Diana
    Larsen 和 James Shore——敏捷流畅度模型的背后人物——称之为“按需发布”。在这个模型中，如果你把这些东西做对了，你就能在你想要的时候发布，这意味着你可以非常快速地改变方向。这也意味着快速试探和原型开发可能比以前更重要，而自动化实际上变得不那么重要，尽管你进行的对话依然非常重要。'
- en: These conversations around those scenarios—around what you think this might
    do for people, how they might use it, what other stakeholders need to be considered
    and how it's going to work for them, what other outcomes we need, and what contexts
    are going to be in and out of scope—are still really crucial, while also being
    very lightweight. They don't take long to have.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这些场景的讨论——关于你认为这对人们有什么帮助、他们可能如何使用它、需要考虑哪些其他利益相关者，以及它如何为他们工作，我们需要什么其他结果，以及哪些上下文在范围内或不在范围内——这些讨论依然非常关键，同时也非常轻量化。它们并不会占用太多时间。
- en: I always recommend starting with the conversations and only moving to the tools
    when you've gotten really good at having those conversations. It only takes about
    a month to retrofit scenarios around a small code base while you're still developing
    it; obviously, it's not a month of full-time work. If you started with the tools,
    put them down and then have some conversations. You'll come back having a better
    understanding once you've had those conversations around the scenarios.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我总是建议先从对话开始，只有在你非常擅长进行这些对话时才转向工具。在你仍在开发一个小的代码库时，改造场景大约需要一个月的时间；显然，这并不是一个月的全职工作。如果你从工具开始，放下它们，然后进行一些对话，一旦你围绕场景进行了这些对话，你会回头时对问题有更好的理解。
- en: '**Viktor Farcic**: If we''re inviting operations to the party, does it mean
    that BDD is extending in that direction as well?'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：如果我们邀请运维参与进来，是否意味着BDD也在朝这个方向扩展呢？'
- en: '**Liz Keogh**: A little bit, but you''re still going to want to talk through
    examples of the kinds of things they want. Generally, their examples will focus
    on monitoring; it will be, "What if we have a bug like this? What should we do?"
    They''re going to be examples of how you want to use that relationship.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**Liz Keogh**：有一点，但你仍然需要通过他们想要的东西来讨论一些示例。通常，他们的示例会集中在监控上；例如，“如果我们遇到像这样的 bug，我们应该怎么做？”这些会是你如何利用这种关系的示例。'
- en: The best conversations I've had are not about what the software should be but
    rather how we as teams are going to work together to quickly solve any potential
    issues that might come up after the software's release. It's the human aspect
    that I really enjoy. This is where the complexity stuff—Cynefin—really comes into
    play, because human systems are what we call complex adaptive systems. They're
    systems in which the agents of the system can change the system itself.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我经历过的最好的讨论，不是关于软件应该是什么样子的，而是我们作为团队如何合作，快速解决软件发布后可能出现的任何问题。我真正喜欢的是人的因素。这就是复杂性问题——Cynefin框架——真正发挥作用的地方，因为人类系统是我们所说的复杂自适应系统。它们是这样的系统，系统中的个体可以改变系统本身。
- en: While you might be able to look at the behavior of software and go, "Okay, that's
    relatively predictable," as soon as you've got two groups of people working together,
    you'll need to be a bit more forgiving and a little more mindful of how that relationship
    is building, what's going on with it, what's not working, and how you fix what's
    not working.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可能能通过观察软件的行为，认为“好吧，这是相对可预测的”，但一旦你有两组人一起工作，你就需要更加宽容，并且更加关注这种关系的构建，关注它的发展，哪些方面没有起作用，以及如何修复那些不起作用的地方。
- en: 'I really like it when the conversations and the scenarios switch from how the
    software is going to behave to how we''re going to behave as human beings. Having
    said that, if you''ve been diligent in how you monitor things, you''ll have examples
    of the kinds of thresholds at which you''re going to trigger your monitoring,
    and can ask questions about what it''s going to look like: "Are you going to email
    me or am I going to get a notification on my pager?" You can have those conversations
    as well, but BDD isn''t the only way to develop software, and it''s certainly
    not the only way to test things. There are tons of great testing practices that
    have nothing whatsoever to do with BDD. When people think of testing and BDD synonymously,
    they miss out on all the other things that testers do.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我真的很喜欢当对话和情境从软件如何表现转到我们作为人类如何表现时。话虽如此，如果你在监控方面做得很仔细，你会有一些例子，告诉你在什么阈值下会触发你的监控，并且你可以提出问题，询问它将如何表现：“你会给我发邮件，还是我会收到我的呼叫器通知？”你也可以进行这样的对话，但BDD并不是开发软件的唯一方式，当然也不是唯一的测试方式。有许多优秀的测试实践与BDD完全无关。当人们把测试和BDD视为同义词时，他们错过了测试人员所做的所有其他事情。
- en: I love my testers because they make it safe for me to fail. I think it's the
    inherent nature of humans to pick one thing and then go with it. For example,
    I adopted BDD, and it used to be BDD and nothing else. The same thing happened
    for almost everything else; everything needs to be a container today.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢我的测试人员，因为他们让我在失败时感到安全。我认为人类的天性就是选择一件事然后坚持下去。例如，我采用了BDD，曾经只关注BDD，别无其他。几乎所有其他事情也都发生了同样的情况；今天，一切都需要是一个容器。
- en: '**Viktor Farcic**: How about the relationship between Agile and DevOps? What
    are your thoughts on that? Does DevOps replace Agile? Does it complement it, or
    is it conflicting?'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：那么敏捷与DevOps之间的关系呢？你对此有什么看法？DevOps会替代敏捷吗？它是互补的，还是相互冲突的？'
- en: '**Liz Keogh**: Agile is just an anchor term to help people look up different
    practices, knowledge, experience, stories, and to find a community. They''re all
    related.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**莉兹·凯欧**：敏捷只是一个帮助人们查找不同实践、知识、经验、故事的锚点，帮助找到一个社区。它们都是相互关联的。'
- en: Is DevOps part of that? It's definitely related to it, and if you've got a cross-functional
    team, then yes, absolutely, it's related to it. I'm a massive Kanban fan, and
    when we do Kanban, we start from where we are right at this moment. I've got people
    doing Kanban just in the testing phase of big Waterfall projects, so you don't
    need that cross-functional team anymore, and the advantage to that is that you
    can just start wherever you are. You don't need to rearrange the structure of
    the organization or worry about the line management; you can just start improving.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps是其中的一部分吗？它绝对与之相关，如果你有一个跨职能的团队，那是的，绝对相关。我是一个狂热的看板（Kanban）爱好者，当我们做看板时，我们从现在此刻的状态开始。我有些人在做大瀑布项目的测试阶段做看板，所以你不再需要跨职能的团队了，且这样做的优势是你可以从你所在的任何地方开始。你不需要重组组织结构，也不必担心管理线，你只需要开始改进。
- en: The way you do this is to look at the value stream and see where the parts are
    that you can improve. The big obvious one is development and operations working
    together. Your development team, which is probably cross-functional, and then
    your operations team. You want them working better, and you want them handing
    over more smoothly; that's the ideal situation. Even if they're a separate organization,
    or even if they are a completely separate department and they've got different
    line management or different KPIs, they can still work together.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你开始改进的方式是看看价值流，看看有哪些部分可以改进。一个显而易见的大问题就是开发和运维要合作。你的开发团队，可能是跨职能的，然后是你的运维团队。你希望他们合作得更好，交接更顺畅；这是理想的情况。即使他们是一个独立的组织，或者是完全不同的部门，并且拥有不同的管理线或不同的KPI，他们仍然可以合作。
- en: '"The way you do this [start improving] is to look at the value stream and to
    see where the parts are that you can improve. The big obvious one is development
    and operations working together."'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '"你开始改进的方式是看看价值流，看看有哪些部分可以改进。一个显而易见的大问题就是开发和运维要合作。"'
- en: —Liz Keogh
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: —莉兹·凯欧
- en: Consulting with Agile or DevOps
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用敏捷或DevOps进行咨询
- en: '**Viktor Farcic**: When you consult for companies with Agile or DevOps, do
    you have a prescriptive type of approach? For instance, thou shalt do Scrum!'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：当你为采用敏捷或DevOps的公司提供咨询时，你有一种规范性的做法吗？例如，你必须做Scrum！'
- en: '**Liz Keogh**: Thou shalt learn Cynefin because it''s pretty much the first
    thing I teach. After that, if you want to start with Scrum, go ahead. I think
    Scrum is a great way to get started, especially if it''s a new project and you
    don''t have anything in play already.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**Liz Keogh**：你必须学习 Cynefin，因为这几乎是我教的第一件事。之后，如果你想从 Scrum 开始，那就开始吧。我认为 Scrum
    是一个很好的入门方式，特别是对于一个新项目，如果你还没有任何现成的工作内容。'
- en: Typically, large organizations have already done a bunch of analysis work. We
    talk about how great it would be if we had this flexible scope, but most organizations
    have already done three months' worth of UX research and analysis, and it tends
    to constrain things. So, let's slice it up vertically; let's work out what the
    most important bits are and deliver those first—where are the risky bits, where
    are the highest-uncertainty bits, and where's the new stuff?
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，大型组织已经做了大量的分析工作。我们经常讨论如果我们能拥有灵活的范围该有多好，但大多数组织已经做了三个月的用户体验研究和分析，而这些分析往往限制了我们的选择。那么，让我们从垂直方向切分，先弄清楚最重要的部分，优先交付这些——哪些部分风险较大，哪些部分不确定性最高，哪些是新东西？
- en: Let's do those first and do it early. Let's spike it out and see what it looks
    like, and then see what it would actually take to ship this. What else do we need
    to get this new thing that you're really interested in live, but also, what's
    the smallest way we can actually deliver that?
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先做这些，并尽早做。让我们先试探一下，看看效果如何，然后再看看实际需要做什么才能发布这个功能。我们还需要做些什么才能让这个你真的感兴趣的新东西上线，但同时，我们可以用最小的方式来交付它吗？
- en: Somebody on Twitter asked for a different term for minimum viable product (MVP),
    and I told them it means no smaller than the minimum functionality that you can
    ship because I'm yet to meet anybody aggressive enough that's actually shipping
    something valuable fast. You can ship really small things and learn a lot from
    them, or at least get them into a state where you could just click a button and
    ship them. I've had people say, "Oh, but, you know, we're not allowed to change
    our databases in production." Well, great, change them in your own environment
    and then provide the scripts to operations.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有人在 Twitter 上问是否有更合适的术语来替代最小可行产品（MVP），我告诉他们，它意味着不小于你可以交付的最小功能，因为我还没有遇到过足够有攻击性的人，能真正快速交付有价值的东西。你可以交付非常小的功能并从中学习很多，或者至少能把它们弄成一个你可以轻松点击按钮就发布的状态。我曾听到有人说，“哦，但是你知道，我们不被允许在生产环境中更改数据库。”好吧，那就改变你自己的环境中的数据库，然后把脚本提供给运营团队。
- en: 'There are ways of managing this, and there are things that operations need:
    there are places where they''re having pain. I spoke to one team, and they''d
    been up until 4:00 a.m. fixing bugs, trying to work out why things were falling
    over, and desperately trying to get releases out. When there are five teams all
    trying to release at the same time, these poor people are not happy. There''s
    a lot that we can do to make them happy as developers, and all I want to see is
    us reaching out going, "Hey, how do we avoid you being woken up at 4:00 a.m. again?"'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些管理的方法，也有运营所需要的东西：有些地方是他们正在遭遇困境的。我和一个团队沟通过，他们一直工作到凌晨四点，修复错误，试图找出系统崩溃的原因，并且拼命地想发布新版本。当五个团队都在尝试同时发布时，这些可怜的人肯定不开心。我们可以做很多事情让他们作为开发者更开心，我只希望看到我们伸出援手，问一句：“嘿，怎样才能避免你们再被叫醒到凌晨四点？”
- en: There are some people who are really big fans of giving pagers to the actual
    developers and making them wake up at 4:00 a.m.—I don't really have the experience
    to deal with things at 4:00 a.m. and I wouldn't have a clue where to start, but
    just having the conversation around what it would take so that you didn't have
    to wake people up at 4:00 a.m., and what you can do to help—that would be nice.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人非常喜欢给实际的开发者发警报器，让他们在凌晨四点被叫醒——我自己没有凌晨四点处理问题的经验，根本不知道从哪里开始，但如果能聊一聊需要做什么，才能避免凌晨四点叫醒人，以及你能做什么来帮助他们——那将会是很好的。
- en: '**Viktor Farcic**: Indeed. Judging from what you''ve said so far, you seem
    to put a much bigger emphasis on transforming or improving the people and culture
    rather than relying on the tools.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：确实。根据你到目前为止所说的内容，似乎你更加强调转变或改善人和文化，而不是依赖工具。'
- en: '**Liz Keogh**: This is about delivering software, and it turns out that focusing
    on people is the best way to do that. I don''t want people to think I''m fluffy;
    I''m not interested in people for people''s sake.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**Liz Keogh**：这是关于交付软件的，事实证明，关注人是实现这一目标的最佳方式。我不希望人们觉得我说的都是空话；我并不是为了人而关注人。'
- en: '"This is about delivering software, and it turns out that focusing on people
    is the best way to do that."'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: “这是关于交付软件的，事实证明，专注于人是做这件事的最佳方式。”
- en: —Liz Keogh
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: —Liz Keogh
- en: When I'm talking to enterprises and organizations, my focus is on delivering,
    and getting people to work together is part of delivering. It turns out that all
    the things that you reckon make a really great workplace—that motivate people
    and result in having some fun at work—are also the things that help delivery.
    If you focus on delivery, you'll end up doing the right thing by the people anyway.
    You can use it as a nice test; if you're finding that yelling at people is the
    way you're getting things done, then there's probably something wrong with your process.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当我与企业和组织交谈时，我的重点是交付，而让人们协作是交付的一部分。事实证明，所有你认为能创造一个非常棒的工作环境——那些激励人们并使工作变得有趣的东西——也是有助于交付的东西。如果你专注于交付，你最终会为人们做正确的事。你可以把它当作一个很好的测试；如果你发现自己通过对人们大喊大叫来推动工作进展，那么你的流程可能就有问题。
- en: '**Viktor Farcic**: When you try to help organizations improve, how do you make
    certain predictions about how they''ll behave?'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：当你尝试帮助组织改进时，你是如何预测它们的行为的？'
- en: '**Liz Keogh**: Some things will be fiercely resisted. When that happens, don''t
    worry about it; try something else. There will always be some things that you
    can change, and if you find the things that you can change—this is the heart of
    Cynefin and of what probing really means—focus on that and on the people who can
    help you effect that change. Don''t worry about that which is out of your control.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**Liz Keogh**：有些事情会遭到激烈反抗。当这种情况发生时，不要担心，尝试其他方法。总会有一些事情是你可以改变的，如果你找到那些你能改变的东西——这正是Cynefin的核心，也是探索真正含义的关键——集中精力去做，并且找出那些能够帮助你实施变革的人。不要为那些不在你控制范围内的事情担忧。'
- en: If you find one person who's managed to get BDD working in a project, now you
    know there's organizational support for BDD. If you find that one person has also
    managed to have a conversation with somebody over in operations, you can get those
    two people to do a presentation on what they learned together. Anything you find
    that works toward positive change, support it, amplify it, jump on it, and make
    a big deal of it, because every little bit of positive change buys some room for
    positive change elsewhere, until one day you find that the bits that were resistant
    are now no longer, and everybody's cloud-based, and you're not even sure how that
    happened.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你找到一个人在项目中成功实现了BDD，那么你就知道组织支持BDD。如果你发现那个人还成功地与运营部门的人进行了对话，你可以让这两个人一起做一个关于他们共同学习内容的演讲。任何你发现能够推动积极变化的东西，都要支持它，放大它，抓住它，给予足够重视，因为每一点积极的变化都为其他地方的积极变化赢得了一些空间，直到有一天，你发现那些曾经抵触的部分不再存在，大家都在使用云技术，而你甚至不知道它是怎么发生的。
- en: I spend most of my time now as a consultant just wandering around going, "Wow,
    that's awesome," and then asking how we do it more, how we do it bigger, and how
    we do it elsewhere, while spreading those good stories.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在大部分时间作为顾问，都在四处游走，一边感叹“哇，真棒”，一边问怎么做得更多，怎么做得更大，怎么把这种做法推广到其他地方，同时传播这些好故事。
- en: '**Viktor Farcic**: Are there certain types of expertise, experts, or departments
    that are more defensive, or others that are easier to work with, or do you find
    it to be more or less on the same ground everywhere?'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：是否有某些类型的专业知识、专家或部门更具防御性，或者其他一些更容易合作，还是你觉得无论在哪里，它们基本上都是在同一层面上？'
- en: '**Liz Keogh**: It depends on the organization. Every organization has their
    tribes. If you read *Great Boss Dead Boss*, by Ray Immelman, you''ll learn about
    tribal behavior and organizations. I found it so absolutely true that anywhere
    where you see a tribe being threatened, that tribe has strengthened their borders.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**Liz Keogh**：这取决于组织。每个组织都有自己的部落。如果你读过Ray Immelman的《Great Boss Dead Boss》，你会了解到部落行为与组织的关系。我发现这完全是对的，在任何你看到部落受到威胁的地方，那些部落的边界都会被强化。'
- en: I've had one situation where backend developers were learning to do a bit of
    UI work, and the UI developers strengthened their borders. In fact, I've seen
    this in about three different places now where UI developers strengthened the
    borders of their tribe. Now, for me at ThoughtWorks, that would be completely
    bizarre because I was a frontend developer working on Swing and desktop apps.
    I only did a bit of web, but I knew how to write some HTML, CSS, and some basic
    JavaScript.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾遇到过一次后端开发人员开始学习做一些 UI 工作，而 UI 开发人员加强了他们的边界。事实上，我已经在三个不同的地方看到过 UI 开发人员加强自己小部落边界的情况。对我来说，在
    ThoughtWorks 这会完全是不可思议的，因为我曾是一个前端开发人员，做 Swing 和桌面应用程序。我只做过一点点 Web 开发，但我知道如何编写一些
    HTML、CSS 和基本的 JavaScript。
- en: I could correct a typo and change a color, but the idea that it's somebody else's
    domain seems so strange to me. But when you find that people feel threatened,
    and they feel like their expertise is being devalued, and then they'll strengthen
    the borders of their little tribe, and suddenly you've got, "UI developers are
    more awesome than backend developers," and you've got a schism within your organization.
    The trick is to make your internal tribes feel valued and secure.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以纠正一个拼写错误并更改颜色，但觉得这是别人领域的事情对我来说真的很奇怪。但是当你发现人们感到威胁，并且觉得他们的专业知识被贬低时，他们就会加强自己小部落的边界，突然间你会听到，“UI
    开发人员比后端开发人员更厉害”，这时组织内部就出现了裂痕。诀窍是让你的内部团队感到被重视和安全。
- en: You want development and operations to both feel like they can work together
    because they're both skilled professionals, and they both have deep experience.
    With DevOps, all you're doing is bridging those two groups; you're not tearing
    them apart, you're not chucking everybody into cross-functional teams because
    every team must have an operations person in it. This is one of the reasons why
    I think Kanban works better than Scrum in some situations and certainly when you're
    dealing with enterprises. You want to be mindful and respectful of those groups;
    you don't want the organization as a whole to feel threatened.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你希望开发和运维都能觉得他们可以合作，因为他们都是技术娴熟的专业人员，且都有深厚的经验。通过 DevOps，你所做的就是连接这两个群体；你不是把它们拆开，也不是将所有人都扔进跨职能团队，因为每个团队都必须有一个运维人员。这也是为什么我认为在某些情况下，特别是在处理企业时，Kanban
    比 Scrum 更有效的原因之一。你需要尊重并关注这些团队；你不希望整个组织感到被威胁。
- en: This is where John Kotter's sense of urgency really comes in. In his talks,
    Kotter discusses the need for creating a sense of urgency around your competition.
    He talks about how hard it is to go up against Amazon, Google, or Facebook. He
    also discusses how your threats are not coming from inside your organization,
    but outside of it. What you want is for everybody within your organization to
    be working together against the external threats and not against each other.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是约翰·科特尔（John Kotter）提出的紧迫感真正发挥作用的地方。在他的演讲中，科特尔讨论了围绕竞争对手建立紧迫感的必要性。他谈到与亚马逊、谷歌或
    Facebook 竞争有多么困难。他还讨论了你的威胁并不来自组织内部，而是外部。你希望的是组织内部的每个人都能团结起来应对外部威胁，而不是彼此对立。
- en: '"You want development and operations to both feel like they can work together
    because they''re both skilled professionals, and they both have deep experience.
    With DevOps, all you''re doing is bridging those two groups; you''re not tearing
    them apart."'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: “你希望开发和运维都能觉得他们可以合作，因为他们都是技术娴熟的专业人员，且都有深厚的经验。通过 DevOps，你所做的就是连接这两个群体；你不是把它们拆开。”
- en: —Liz Keogh
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: —Liz Keogh
- en: '**Viktor Farcic**: I love that. I might be mistaken, but I remember once hearing
    you say that there''s more to delivery than development and operations. What did
    you mean by that?'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我喜欢这个。我可能记错了，但我记得曾听你说过，交付不仅仅是开发和运维。你是什么意思？'
- en: '**Liz Keogh**: When I look at an end-to-end value stream in an enterprise situation,
    what I usually do is say, "Okay, let''s put the development team in the middle."'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**Liz Keogh**：当我在企业环境中看一个端到端的价值流时，我通常会说，“好吧，让我们把开发团队放在中间。”'
- en: The customers have a need, or maybe some customer representative has an idea
    about how to help them and how to make things better, or maybe even some stakeholder
    has something they want, who gets between them and the development team. Can they
    just go to a development team and say, "Hey could you do this for me?" Probably
    not, because there's going to be some level of prioritization.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 客户有需求，或者可能是某个客户代表有一个想法，知道如何帮助他们，或者也可能是某个利益相关者有某种需求，这些人将成为开发团队和他们之间的障碍。他们能直接去找开发团队，说：“嘿，你能为我做这个吗？”可能不能，因为会有某种优先级排序的限制。
- en: I've worked for companies in the past where you wasted precious time jumping
    through various interdepartmental hoops to either get funding or be allowed to
    get a project off the ground or to move on to the next phase. You'd be getting
    your team of developers together while waiting for various board approvals. Six
    months could pass by before the developers even got a sniff at the code, and then
    on the way out—and this is typically what we see from Agile—by the time we get
    hold of the project, all of the previous work had already been done.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾为一些公司工作过，在那里你浪费了宝贵的时间跳过各种部门之间的障碍，不是为了获得资金，就是为了让项目启动，或者是推进到下一个阶段。你需要在等待各种董事会审批的同时，组织开发团队。六个月过去，开发人员甚至还没机会接触到代码，而接下来的情况通常是这样的——这正是敏捷方法中我们经常看到的——等我们接手项目时，之前的所有工作已经完成。
- en: The reality is that there are all kinds of people who get between your development
    team and actually releasing something. If you've got a low-trust business who
    are not exactly used to getting what they want from IT, you've probably got some
    user acceptance testing group somewhere as well who are going to test the hell
    out of your software.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现实情况是，有各种各样的人介于你的开发团队和真正发布某个东西之间。如果你所在的公司信任度较低，且不太习惯从IT部门获得所需，那你可能还会有一个用户验收测试组，准备对你的软件进行严格的测试。
- en: What I tend to do as a consultant is draw this on the board, and I say value
    streams are made of people. I identify all the different groups of people involved
    in getting something live, and then I get the person who brought me in to draw
    a dotted line around their area of influence.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 作为顾问，我通常会在白板上画出这个图，我会说价值流是由人组成的。我会标出所有参与将某个东西推向上线的不同团队，然后我会让带我进来的那个人画出他们影响范围的虚线。
- en: '**Viktor Farcic**: Getting people involved seems like a great way to make organizations
    aware, but surely implementing this between multiple teams and getting them to
    make the actual change takes a long time.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：让人们参与进来似乎是让组织意识到问题的好方法，但将其实施到多个团队之间，并让他们真正进行改变，显然需要很长时间。'
- en: '**Liz Keogh**: What I usually find if I''m being brought in for DevOps is that
    it doesn''t go as far as operations. There''s a bunch of other groups for whom
    it doesn''t go that far as well, and usually operations is about 10 different
    teams that don''t talk to each other. There will be one team for pen testing,
    another for monitoring, another for analytics, and yet another team for support.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**Liz Keogh**：我通常发现，如果我被引入到DevOps中，情况往往没有延伸到运维层面。还有一些其他团队，DevOps的范围也没能触及，通常运维是由大约10个不同的团队组成，而这些团队之间并不交流。会有一个团队负责渗透测试，另一个团队负责监控，再有一个负责分析，甚至还有一个团队负责支持。'
- en: 'You''re going to end up being the people who bring those groups together as
    well, so, Dev and Ops: great start. If you can get those teams working together,
    you''ll start finding that your portfolio and your governance needs to be addressed.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你最终会成为那些将各个团队汇聚在一起的人，所以，开发和运维：一个很好的开始。如果你能让这些团队合作，你会发现你的项目组合和治理需求也需要被解决。
- en: Now you also start finding your funding model, and then finally you'll get the
    business on board, and the business will go, "Hold on—if we can do these small
    things now, can we just do this experiment? Can we just do this one small thing?"
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你还会开始发现你的资金模型，然后最终你会让业务部门参与进来，业务部门会说：“等等——如果我们现在做这些小事，可以做这个实验吗？我们能做这件小事吗？”
- en: Then you're innovating, which is a point that it takes years for a large organization
    to even get to. I think that sometimes when people bring in things like the Scaled
    Agile Framework and large-scale Scrum and impose them on an organization and restructure
    everything, the habits of a lifetime are still there and the stories being told
    are still the same stories. You don't change the stories just by restructuring
    things; you change the stories by creating great relationships. And yes, Dev and
    Ops is a good start for that, but it is only a start.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你就在进行创新，这也是大型组织要花几年时间才能达到的一个点。我认为有时，当人们引入像敏捷框架（Scaled Agile Framework）和大规模
    Scrum 等方法，并将其强加到组织中，重构一切时，一生的习惯依然存在，讲述的故事仍然是相同的故事。你不能仅通过重构来改变故事；你通过建立良好的关系来改变故事。是的，开发与运维（Dev和Ops）是一个良好的开始，但它仅仅是一个开始。
- en: '"A good DevOps culture makes things safe to fail."'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: “良好的 DevOps 文化让失败变得安全。”
- en: —Liz Keogh
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: —莉兹·凯奥
- en: '**Viktor Farcic**: You mentioned innovation. How do you foster that? When I
    visit companies, I always get the same response: "We would like to do this and
    we would like to try that, but we don''t have time."'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：你提到了创新。你是如何促进创新的呢？每当我拜访公司时，我总是听到相同的回答：“我们想做这个，我们想尝试那个，但我们没有时间。”'
- en: Fostering innovation
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 培养创新
- en: '**Liz Keogh**: There''s a couple of things you can do: one is to make sure
    things are safe to fail. If it''s not safe to fail, nobody''s going to try anything
    that might fail, and so DevOps, at least a good DevOps culture, makes things safe
    to fail. If you can''t get innovation, focus on how we make sure it''s safe to
    fail, how we get good quality in production, how we get the things that you can
    get right *right*, and then make sure it''s okay to get things wrong.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**莉兹·凯奥**：你可以做几件事：首先是确保事情在失败时是安全的。如果不允许失败，那么没人会去尝试可能会失败的事情，因此 DevOps，至少是良好的
    DevOps 文化，使得失败是可以接受的。如果你无法实现创新，那就专注于如何确保失败是安全的，如何确保生产中的高质量，如何确保能把能做到的事情做到*正确*，然后确保犯错是可以接受的。'
- en: You can focus on continuous delivery and then continuous deployment, and that's
    great—get your phoenix servers up and running. Then there's the other thing you
    can do. There's a thing called the shallow dive into chaos, which Cognitive Edge
    teaches as part of their Cynefin training. It involves taking people and splitting
    them up so that you get a divergence of ideas, and the idea, like chaos, is to
    create an urgent opportunity, but it's also a place where you have nothing to
    lose. When you can't talk to other people, the ideas you come up with on your
    own tend to be crazier than the ideas that you come up with if you're in a group.
    When people are in groups, they want consensus. I actually spend a bit of time
    splitting up consensus cultures.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以专注于持续交付，然后是持续部署，这样很好——让你的凤凰服务器上线。然后还有其他可以做的事情。有一个叫做浅尝混乱的做法，这是 Cognitive Edge
    在其 Cynefin 培训中教授的内容。它涉及将人们分开，这样就能产生不同的观点，这种做法，就像混乱一样，创造了一个紧迫的机会，但同时也是一个没有什么可失去的地方。当你不能与别人交流时，你自己产生的想法往往比你和别人一起想出来的更疯狂。当人们处于团队中时，他们更倾向于寻求共识。实际上，我花了一些时间打破共识文化。
- en: You need to make it safe to fail and then create a forgiving system where you
    have permission to try things. You do that by getting people to try things on
    their own or in very small groups, so that it doesn't matter if there's a bit
    of rework and duplication. Usually, the cost of delay eclipses the cost of rework,
    and I think a lot of people don't see that. People don't see how quickly they
    could move if you weren't waiting for everybody to agree on what the right thing
    to do is. So, you need to make it okay to do the wrong thing.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要让失败变得安全，然后创建一个宽容的系统，在这个系统中，你有尝试的权限。你可以通过让人们自己尝试或者在非常小的团队中尝试来做到这一点，这样即使有一些返工和重复工作也无所谓。通常，延迟的成本远大于返工的成本，我认为很多人没有意识到这一点。人们没有看到，如果不等所有人达成共识，实际上他们能多么迅速地行动。因此，你需要让做错事也变得可以接受。
- en: '**Viktor Farcic**: Does anybody stand out to you in this situation, where they
    say it''s okay to do the wrong thing?'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：在这种情况下，有没有人给你留下深刻印象，说他们认为做错事是可以接受的？'
- en: '**Liz Keogh**: Chris Matts does. He started the Real Options movement, and
    he''s my guru for real options. He says that if you''re faced with two different
    situations, and you''re not sure which is the right one, rather than doing a whole
    bunch of analysis that doesn''t work in complexity, pick the one that''s easiest
    to change. If it turns out to be wrong, you can change it. But if it turns out
    to be right, then that''s great.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**Liz Keogh**：Chris Matts做到了。他发起了“实物期权”运动，他是我在实物期权方面的导师。他说，如果你面对两种不同的情况，并且不确定哪一个是正确的，那与其做大量无效的复杂分析，不如选择那个最容易改变的。如果发现它是错误的，你可以改变它。但如果发现它是正确的，那就太好了。'
- en: It's that kind of thinking. It's about how we move forward without having to
    go to absolutely everybody else in the organization and pick their brains for
    what they think is the right thing. And again, once you get started with that,
    and once people realize that it's safe to do that and you start supporting them,
    and you start going around saying, "Wow that's awesome," other people will want
    to try things too, and you start building a culture where people will try things
    out and do the right thing as well.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是那种思维方式。它是关于我们如何前进，而不需要去问组织中所有其他人的意见，去了解他们认为正确的做法。再次强调，一旦你开始这样做，当人们意识到这是安全的，并且你开始支持他们，并且你开始到处说：“哇，这太棒了”，其他人也会想尝试一些事情，你就开始建立一种文化，让人们愿意尝试新事物，并做出正确的决策。
- en: '**Viktor Farcic**: If I understood correctly, delivery is a team effort, but
    innovation is more individual?'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：如果我理解得对，交付是团队的努力，而创新更多是个人的努力？'
- en: '**Liz Keogh**: Coming up with the ideas is certainly individual or small team-based.
    There''s actually a great talk by Jabe Bloom called *The Value of Social Capital*,
    in which he refers to Ronald S. Burt''s structural holes. The holes where people
    aren''t connected is where innovation comes from. Everybody is too over-connected,
    and you get massive stability, but you can''t try new things, so you have to shake
    it up—for instance, getting individual development groups to try things. If you
    want to move to Git, don''t agree to move to Git as an organization; get one small
    team to try it out, and they can tell you whether or not it''s worthwhile.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**Liz Keogh**：提出创意无疑是个人或小团队的工作。实际上，Jabe Bloom有一场精彩的演讲，名为*《社会资本的价值》*，他提到了Ronald
    S. Burt的结构性空洞。人们没有联系的空洞正是创新的源泉。每个人都过于紧密地连接，造成了巨大的稳定性，但你无法尝试新的事物，所以你必须打破这种状态——例如，让各个独立的开发小组去尝试一些新的事物。如果你想迁移到Git，不要作为一个组织统一决定迁移到Git；让一个小团队先尝试，他们可以告诉你是否值得这么做。'
- en: If you want to try a particular BDD tool, get two teams to try two different
    tools. You might end up having to rewrite one of them, or use two different tools
    for a few years until one of them dies out, but it's better than not moving, and
    it's better than six months of analysis to see whether it will work. Instead,
    you learn by doing. So, do some stuff. Fostering that culture is how you foster
    innovation.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想尝试某个特定的BDD工具，可以让两个团队分别尝试两个不同的工具。你可能最终需要重写其中一个，或者使用两个不同的工具，直到其中一个被淘汰，但这总比什么都不做要好，也比花六个月时间进行分析来判断是否可行要好。相反，你是通过实践来学习的。所以，做点事吧。培养这种文化就是促进创新的方式。
- en: '**Viktor Farcic**: We''ve spoken quite a lot about including people and fostering
    collaboration, so I wanted to ask you why there aren''t more women in the field.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我们已经讨论了很多关于包含不同人群并促进合作的内容，所以我想问你，为什么这个领域里女性这么少？'
- en: Diversity, gender roles, and representation in DevOps
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps中的多样性、性别角色和代表性
- en: '**Liz Keogh**: You know, I''m not the right person to ask. Every time somebody
    asks me what the difference is between a team with a woman on it and a team without
    one, I say I don''t know because I''ve never been on a team without a woman on
    it. I''m not an expert; being a woman does not make me an expert on what it''s
    like to be a woman in development—I couldn''t possibly tell you. I do know that
    nobody told me I wasn''t supposed to be there.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**Liz Keogh**：你知道的，我不是适合回答这个问题的人。每次有人问我，团队中有女性和没有女性的团队有什么区别时，我都会说我不知道，因为我从来没有加入过没有女性的团队。我不是专家；作为女性并不意味着我能成为开发领域中“女性”的专家——我根本无法告诉你。我知道的是，没有人告诉我我不应该在这里。'
- en: 'I started programming when I was seven years old because my dad left the BBC
    computer lying around with the manual, which was illustrated with beautiful colored
    robots. It was deliberately marketed to kids. So, I had an early start. For almost
    as long as I can remember, I had computers, and I think maybe that''s the secret:
    it''s just making sure that you''re supporting girls as they come up through school,
    and making sure they have a role model as well. That''s one of the things I''ve
    taken on board.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我七岁时开始编程，因为我爸爸把BBC电脑放在那儿，旁边有一本手册，里面插图是一些美丽的彩色机器人。这是专门为孩子们设计的。所以，我算是很早就接触了编程。几乎从我记事起，我身边就有电脑，我想也许这就是秘密所在：确保在学校里支持女生，并确保她们也有榜样。这是我学到的一点。
- en: I always hated being the token female. Everybody says how they want more female
    speakers. But my response to that is, "How about you just get me because I'm really
    good at talking about DevOps and Cynefin or something? But no, you want a female
    speaker." It took me a long time to realize that having a female role model is
    actually important to girls, and to young women coming into the industry as well.
    However, I've taken that on board somewhat reluctantly, as I don't really want
    to be a speaker for quality and gender diversity.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我一直讨厌被当作“女性代表”。每个人都说他们希望有更多女性讲者。但我对这个的回应是：“你为什么不请我，因为我真的很擅长谈论DevOps和Cynefin之类的东西？但是不，你们想要的是一位女性讲者。”我花了很长时间才意识到，拥有一个女性榜样对女孩们，尤其是对进入这个行业的年轻女性来说，确实很重要。然而，我有点不情愿地接受了这一点，因为我并不想成为质量和性别多样性的讲者。
- en: '"How about you just get me because I''m really good at talking about DevOps
    and Cynefin or something? But no, you want a female speaker. It took me a long
    time to realize that having a female role model is actually important to girls,
    and to young women coming into the industry as well."'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: “你为什么不请我，因为我真的很擅长谈论DevOps和Cynefin之类的东西？但是不，你们想要的是一位女性讲者。我花了很长时间才意识到，拥有一个女性榜样对女孩们，尤其是对进入这个行业的年轻女性来说，确实很重要。”
- en: —Liz Keogh
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: —Liz Keogh
- en: I want to be a speaker for Cynefin and BDD, but sometimes the gender diversity
    stuff, the sexism, and the sexual harassment becomes a thing because all of that
    stuff gets in the way. So, then I have to be a speaker about that as well. But
    it's not what I want to be speaking about. My passion is delivering software and
    doing it as a woman, but that means I've had to talk about these other issues
    too.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我想成为Cynefin和BDD的讲者，但有时性别多样性问题、性别歧视和性骚扰成了问题，因为这些都会成为障碍。所以，我也得成为这些问题的讲者。但这并不是我想谈论的内容。我的热情是交付软件，而且是作为一名女性来做，但这也意味着我不得不谈论这些其他问题。
- en: The difference between the self-taught engineer and the schooled engineer of
    today
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自学工程师与今天的受教育工程师之间的区别
- en: '**Viktor Farcic**: Switching gears, you mentioned that you started with computers
    when you were seven. Do you have any thoughts about the difference between the
    self-taught engineers or schooled engineers of today? More broadly speaking, how
    do you see education in today''s world?'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：换个话题，你提到你七岁时就开始接触电脑。你对今天的自学工程师和受教育工程师之间的区别有什么看法？更广泛地说，你如何看待当今世界的教育？'
- en: '**Liz Keogh**: I didn''t know what I didn''t know. Back then, I was a little
    bit more disciplined than a hacker. I have a fairly ordered mind when it comes
    to programming, so I got taught how to test my software, and I very quickly realized
    I was second-guessing myself if I wrote the tests afterward. At first, I was writing
    the tests around empty interfaces, and just making them compile, which, of course,
    is a lot like TDD now. There were no IDEs back when I started professional coding.
    We were all working in whatever text editors we had. I think it was Vi or Emacs
    or something like that, and you compiled on the command line.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**Liz Keogh**：我不知道自己不知道什么。那时，我比一个黑客更有纪律性。我在编程方面的思维相当有条理，所以我学会了如何测试我的软件，我很快意识到，如果我在后期写测试，我会产生怀疑。最开始，我是围绕空接口写测试，只是让它们能编译，当然，这现在很像TDD。当我开始职业编程时，没有IDE。我们都在用我们能找到的文本编辑器。我记得是Vi或者Emacs之类的，然后通过命令行编译。'
- en: IDEs didn't exist, I didn't know about things like design patterns, and I definitely
    didn't know about domain-driven design. I didn't know there were communities out
    there where you could learn, and the internet was fledgling. It was 1998 when
    I graduated, so the internet was still in its infancy; companies didn't all have
    domain names, and they didn't have addresses.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: IDE（集成开发环境）那时候还不存在，我不知道什么是设计模式，也完全不懂领域驱动设计。我不知道有社区可以学习这些东西，那时候互联网还处于初级阶段。我是在1998年毕业的，所以互联网还在起步阶段；公司们都没有域名，也没有网址。
- en: '**Viktor Farcic**: But that''s all changed in the 20 years since then—the internet
    has exploded.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：但过去20年这一切都发生了变化——互联网爆炸式发展。'
- en: '**Liz Keogh**: Exactly. Now the internet is everything, and you''ve got access
    to so much more information, and so much more around what good programming could
    look like. I''ve got some friends who are working in academia, and as part of
    their academia, they program, and by and large, they still haven''t caught up
    with modern programming practices. They''re not learning TDD or BDD, or about
    DevOps. But they know those things exist. All you need to do is reach out because
    there are people who will help you.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**Liz Keogh**：没错。现在互联网无所不包，你可以获取到更多的信息，了解更多优秀编程实践的内容。我有一些朋友在学术界工作，他们在学术工作中也会编程，但总体来说，他们仍然没有跟上现代编程的步伐。他们没有学习TDD（测试驱动开发）或BDD（行为驱动开发），也没有接触到DevOps（开发与运维）。不过，他们知道这些东西的存在。你只需要主动联系，因为总有愿意帮助你的人。'
- en: For instance, Stack Overflow and the Stack Exchange network is fantastic, and
    it's not even just true of developers and operations, or Dev and Ops; it's true
    of anybody in a leadership position. There's a PM Stack Exchange, places where
    you can learn about psychology. Wikipedia is phenomenal because there's so much
    free information on there. I used to have to go to a library and check out a book
    when I was at school, but you don't have to do that anymore. You've got the whole
    of human knowledge on tap, and all it takes is finding out what it is that you
    don't know, and what of that you want to know, because there's more than you can
    possibly learn in a lifetime.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，Stack Overflow和Stack Exchange网络非常棒，这不仅仅适用于开发人员和运维人员，或者Dev和Ops，它对任何处于领导岗位的人都适用。这里有PM
    Stack Exchange，你可以在这些地方学习心理学。维基百科非常棒，因为上面有大量免费的信息。我以前在上学时必须去图书馆借书，但现在你不再需要这么做了。你可以随时接触到整个人类的知识，所需的只是找出你不知道的东西，和你希望了解的那些，因为有比你一生能学到的还要多的东西。
- en: '**Viktor Farcic**: How do you know what you don''t know? I think that that
    might be the problem, because if I''ve never heard about BDD, how do I know that
    I don''t know about it? I''m inventing an example.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：你怎么知道自己不知道什么呢？我认为这可能是问题所在，因为如果我从未听说过BDD，我怎么知道我不知道它呢？我是在举例子。'
- en: '"You''ve got the whole of human knowledge on tap, and all it takes is finding
    out what it is that you don''t know, and what of that you want to know, because
    there''s more than you can possibly learn in a lifetime."'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: “你可以随时接触到整个人类的知识，所需的只是找出你不知道的东西，和你希望了解的那些，因为有比你一生能学到的还要多的东西。”
- en: —Liz Keogh
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: —Liz Keogh
- en: '**Liz Keogh**: You find somebody who is working in the space that you want
    to be working in, and you ask them, "What is it that I don''t know? Where would
    you start?" If you''re working in a new place and you don''t have access to expertise,
    you learn by trying it out. I was there pretty much very early on in BDD, and
    I worked on the story of JBehave, which was the first English system-level BDD
    natural language tool. We learned by trying. JBehave 1.0 was not usable, nobody
    ever used it.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**Liz Keogh**：你找到一个在你想要从事的领域工作的人，然后问他们：“我不知道什么？你会从哪里开始？”如果你在一个新地方工作，且没有专家的帮助，你就通过实践来学习。我几乎是BDD的早期参与者之一，我参与了JBehave的故事，它是第一个英文的系统级BDD自然语言工具。我们是通过尝试来学习的。JBehave
    1.0是不可用的，没人使用它。'
- en: I very recently tweeted a blog by David Chelimsky, in which he took the Ruby
    version of JBehave that was written as RSpec Story Runner and converted it to
    plain text. That's obviously the precursor for Cucumber, JBehave 2, and all of
    the English language tools that followed. In that case, you learn by doing, and
    it's okay to get it wrong. It's okay to create something that nobody uses because
    maybe it will lead to something that people do use.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我最近在推特上分享了David Chelimsky的一篇博客，他在文中将Ruby版的JBehave（作为RSpec Story Runner编写）转化为了纯文本。这显然是Cucumber、JBehave
    2以及所有后续英语工具的前身。在这种情况下，你通过实践来学习，犯错是可以的。创造一些没人使用的东西也没关系，因为它可能会引导出一些人们真正会使用的东西。
- en: '**Vik****tor Farcic**: To close this up, I''m going to ask you a question that
    I hate being asked. What do you see in the future?'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：最后，我要问你一个我最讨厌被问到的问题。你对未来有什么看法？'
- en: The future
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未来
- en: '**Liz Keogh**: Mars. I want to go to Mars. I would love to see the human race
    on Mars, and I know Elon Musk is still chasing that.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**Liz Keogh**：火星。我想去火星。我非常希望看到人类在火星上生存，我知道Elon Musk仍在追逐这个目标。'
- en: So, what do I think we're going to see? I think we're going to see more cars
    in space, and more large-scale experimentation where it's safe to fail. I think
    that the future is going to be really exciting. I think companies are going to
    be held a little bit more accountable for their ethics, which means no more behavior
    like Uber, and no more Volkswagen emission scandals. That being said, I want to
    see transparency in organizations. I think that we're going to see some of the
    large banks dying off, and I genuinely think that you're going to start seeing
    mergers as banks die.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我认为我们将会看到什么呢？我认为我们会看到更多的汽车进入太空，更多的大规模实验在安全的环境下进行。我觉得未来会非常激动人心。我认为公司将会更加对自己的伦理负责，这意味着不会再有像Uber那样的行为，也不会再有大众排放丑闻。话虽如此，我希望看到组织的透明度。我认为我们会看到一些大型银行的消亡，真心觉得当银行消亡时，合并现象会开始出现。
- en: There's no way that people with money will support the level of waste that I
    see in some of the big enterprises. Capitalism will result in those things merging
    together, and I'm really, really hoping that that happens in a good way. I think
    that there's probably some space to make it happen in a good way, to make investment
    more transparent, to make the world a better place. I think we're probably going
    to see an economic crash in the next five years just because the wealth is so
    concentrated and it's such a level of concentration that human society just resists that.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我看到一些大企业中的浪费现象，实在无法理解有钱的人怎么支持这种程度的浪费。资本主义会导致这些事情的融合，我真的非常希望这一切能够朝着好的方向发展。我认为，或许在一个好的方向上是有空间的，去让投资更透明，让这个世界变得更好。我认为，在接下来的五年内，我们可能会看到一次经济危机，因为财富过于集中，且这种集中程度让人类社会无法接受。
- en: In the last year or so I've also had a chance to look at the IPCC report on
    climate change. That's less exciting but more urgent. So right now, my focus is
    on that. I'm still hopeful that companies will step up to deal with it; that we'll
    see new emerging technologies that will help too. It's going to be hard, but there's
    a lot we can do from our end.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的一年里，我还看了气候变化方面的IPCC报告。这个话题没有那么令人兴奋，但却更为紧迫。所以现在，我的重点就在于此。我仍然希望公司们能够挺身而出应对这个问题；我也希望我们会看到一些新兴的技术，能够为此提供帮助。这将会很艰难，但我们从自己的角度能做的事情还是很多的。
- en: '**Viktor Farcic**: So, you think that there''s going to be a big blowout in
    the next few years?'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：那么，你认为未来几年会有大规模的爆发吗？'
- en: '**Liz Keogh**: I think when you have a sense of urgency, you have chaos. It
    buys you a lot of space for innovation and a lot of space for trying things out,
    because you have nothing to lose.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**Liz Keogh**：我认为，当你有紧迫感时，就会有混乱。它为创新提供了大量空间，也为尝试新事物提供了大量空间，因为你没有什么可失去的。'
- en: I have a feeling we're going to see some really exciting things in the next
    10 years. We've got blockchain, we've got a bunch of new tools coming into play,
    we've got great DevOps practices, and we've got a whole open source ecosystem
    available that did not exist when I started programming. Java was free, and that
    was about it. I've been in IT for 20 years now, and I've seen so many changes
    already. I think the next 20 years is going to be even bigger than that. In another
    20 years' time, I don't think the world's going to be recognizable from what I
    knew 20 years ago.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我感觉在接下来的10年里，我们将看到一些非常令人兴奋的事物。我们有区块链，许多新工具正在进入市场，我们有出色的DevOps实践，并且有一个完整的开源生态系统，这是我开始编程时没有的。Java是免费的，仅此而已。我已经在IT行业工作了20年，已经见证了许多变化。我认为接下来的20年将会比这还要大。在另外20年后，我认为这个世界将无法与我20年前所知道的世界相提并论。
- en: '**Viktor Farcic**: Do you think then that the traditional, slow-moving, rigid
    enterprises will survive that future?'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：你认为传统的、缓慢的、僵化的企业能够在那个未来中生存下来吗？'
- en: '"In another 20 years'' time, I don''t think the world''s going to be recognizable
    from what I knew 20 years ago."'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: “在另外20年后，我认为这个世界将无法与我20年前所知道的世界相提并论。”
- en: —Liz Keogh
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: ——Liz Keogh
- en: '**Liz Keogh**: They''ll survive the commoditized stuff, and stuff that''s really
    boring and very, very predictable, but the way people provide electricity and
    provide water—there won''t be a lot of money in it. Simon Wardley says it with
    respect to his mapping; everything moves to the right. You see it with Cynefin
    as well, and everything moves clockwise. It becomes stable, and then you build
    on the stable stuff. Everything''s going to be stabilizing, so the innovative
    stuff that we''re used to seeing right now—we think of DevOps as being innovative—it''s
    going to be just the way that software is done. People will ask, "Why would you
    do it any other way?"'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**Liz Keogh**：他们会在那些商品化的、无聊且非常可预测的事情中生存下来，但就像人们提供电力和水一样——这类事情将不会赚到很多钱。Simon
    Wardley在他的映射中提到这一点；一切都会朝着右边发展。你在Cynefin中也看到了这一点，一切都会顺时针旋转。它变得稳定，然后你在稳定的基础上构建。所有的东西都将稳定化，所以我们现在看到的那些创新的东西——我们认为DevOps是创新的——它将成为软件开发的常态。人们会问，“为什么要用其他方式做呢？”'
- en: You'll have DevOps out of the box; you'll have Google servers that will be really
    cheap, and so why wouldn't you use them? Nobody's going to have their own infrastructure.
    If you build your own infrastructure and you're not working with Google, Facebook,
    or some other large company, people will be asking, "What are you doing? Are you
    genuinely configuring a server by hand? Why would you do that?" It will be that
    level of crazy. We're not there yet, but we will be.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 你将能够即插即用DevOps；你将拥有非常便宜的Google服务器，那么为什么不使用它们呢？没有人会有自己的基础设施。如果你建立了自己的基础设施，而你又没有和Google、Facebook或其他大型公司合作，人们会问，“你在做什么？你真的在手动配置服务器吗？为什么要这样做？”那时会是这种疯狂的程度。虽然我们现在还没到那个程度，但我们会到达的。
- en: '**Viktor Farcic**: I might be a bit more skeptical than that, because I have
    the impression that when I go and visit enterprises, I get answers along the lines
    of, "We''re all Agile," and then you spend the day with them and you realize,
    they''ve only just started Agile.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我可能比这更怀疑一些，因为我有种感觉，每当我去拜访企业时，他们的回答通常是“我们都在做敏捷”，然后你和他们待一天，你会意识到，他们其实才刚刚开始做敏捷。'
- en: '**Liz Keogh**: Try not using the word Agile. I don''t use the word Agile when
    I do my consulting; I focus on delivery and talk about uncertainty and predictability
    and things like that. I focus on the awesome.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**Liz Keogh**：尽量不要使用“敏捷”这个词。在我做咨询时，我不使用“敏捷”这个词；我专注于交付，讨论不确定性、可预测性以及类似的事情。我专注于令人惊叹的东西。'
- en: When you do see something moving—when you do see something really great—focus
    on that, spread it, and tell stories. Encourage other people to tell stories,
    because stories have power and are a really great way of getting change working.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 当你看到某些东西正在变化——当你看到一些真正了不起的事情——专注于它，传播它，讲述故事。鼓励其他人讲述故事，因为故事有力量，是推动变革的非常有效的方式。
- en: '**Viktor Farcic**: Is there anything else that you would like to share?'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：还有什么是你想分享的吗？'
- en: '**Liz Keogh**: Somebody once asked me what my favorite thing and worst thing
    about working in software development was. I said the worst thing was the human
    tendency to see patterns in uncertainty that don''t exist, and then move forward
    getting things wrong. The best thing is the human ability to see patterns in uncertainty
    that don''t exist so they can move forward. Those two things go hand in hand.
    So, the same things that trip us up are the things that allow us to move forward,
    and I think it''s worth just celebrating that.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**Liz Keogh**：曾经有人问我，工作在软件开发领域中，最喜欢和最讨厌的是什么。我说最讨厌的是人类倾向于在不确定性中看到不存在的模式，然后继续前进，结果做错事情。而最喜欢的则是人类能够在不确定性中看到不存在的模式，从而推动前进。这两者是相辅相成的。所以，那些让我们跌倒的东西，也是让我们能够前进的东西，我觉得值得庆祝这一点。'
