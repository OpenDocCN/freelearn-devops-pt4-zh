- en: Introducing Sean Hull
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍肖恩·霍尔
- en: A seasoned industry advisor, author, speaker, and entrepreneur with over 20
    years' of experience, Sean Hull specializes in DevOps cloud automation, scalability,
    Docker, and Kubernetes. His experience scales from small start-ups to Fortune
    500 companies. You can follow him on Twitter at `@hullsean`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一位经验丰富的行业顾问、作者、演讲者和企业家，肖恩·霍尔在 DevOps 云自动化、可扩展性、Docker 和 Kubernetes 方面有超过 20
    年的经验。他的经验涵盖了从小型初创公司到财富 500 强企业。你可以在 Twitter 上关注他，账号是 `@hullsean`。
- en: Sean Hull and the world of databases
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 肖恩·霍尔与数据库世界
- en: '**Viktor Farcic**: To kick things off, tell us a little bit about yourself
    and how you got involved in DevOps.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇克**：让我们开始吧，先介绍一下你自己，告诉我们你是如何接触到 DevOps 的。'
- en: '**Sean Hull**: I''m based in New York, and I''ve been working in technology
    and alongside start-ups for over a decade. I got my start back when I did database
    work, scalability, and performance tuning for high-scale websites, such as the
    *Hollywood Reporter* and *Billboard*, sites that got a hundred million unique
    visitors per month. Back when Amazon started getting bigger, a lot of start-up
    companies were either migrating to the cloud or natively deploying their applications
    in the cloud, and so I saw an opportunity there to specialize in automation.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**肖恩·霍尔**：我住在纽约，已经在技术领域和初创公司中工作了十多年。我最早的工作是为高流量网站做数据库工作、可扩展性和性能调优，像 *好莱坞报道*
    和 *公告牌* 这样的站点，每个月有一亿独立访客。那时候，亚马逊开始变得更大，很多初创公司要么迁移到云端，要么原生部署他们的应用程序到云端，因此我看到了在自动化方面专业化的机会。'
- en: My background really is in Unix and Linux, and so it was a good match for me
    to shift gears and pivot in that direction, but I still do a lot of database-related
    work with MySQL, Postgres, and Redshift. These days I also do a lot of Python
    programming and all the automation stuff like CloudFormation and Terraform, which
    allows you to script all the objects in your cloud or in your AWS account, and
    that in turn allows you to version all the changes that you're making.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我的背景其实是在 Unix 和 Linux 领域，因此对我来说转向这个方向是一个不错的选择，但我仍然做很多与 MySQL、Postgres 和 Redshift
    相关的数据库工作。如今，我还做很多 Python 编程，以及像 CloudFormation 和 Terraform 这样的自动化工作，它们允许你在云端或
    AWS 账户中编写脚本，管理所有对象，这也使你能够对所做的所有更改进行版本控制。
- en: '**Viktor Farcic**: I always get asked the same question in every talk I do:
    what do we do with databases?'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇克**：每次做演讲时，我都会被问到一个相同的问题：我们应该如何处理数据库？'
- en: '**Sean Hull**: I read articles sometimes about people trying to put MySQL databases
    inside of a Docker container and the horrible performance that results, so that''s
    absolutely a good question. A lot of the types of things that automation attempts
    to remedy with repeatability and so forth don''t necessarily apply equally to
    databases. For instance, if you have a large MySQL database made up of users and
    activity, those tables have evolved over time. I mean, you have inserts, you have
    deletes, and the database tunes and optimizes a lot of that I/O to the disk based
    on usage.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**肖恩·霍尔**：我有时会读到一些关于人们尝试将 MySQL 数据库放入 Docker 容器中的文章，以及由此产生的糟糕性能，所以这个问题确实非常值得探讨。很多自动化尝试通过重复性等方法来解决的问题，并不一定适用于数据库。例如，如果你有一个由用户和活动组成的大型
    MySQL 数据库，这些表随着时间的推移已经发生了变化。我的意思是，你有插入操作，也有删除操作，数据库会根据使用情况调整和优化大量的 I/O 操作到磁盘。'
- en: Now, if you were to go ahead and rebuild that database, the layout on the disk
    would be different. So, the presumption is that a rebuilt database is exactly
    the same as the other, which isn't necessarily the case. In microservices, when
    you do a backup, you have to either version or timestamp all of those backups,
    and then the question arises of how do you restore across your entire application
    at a particular point in time. It might potentially become much more difficult
    when you have 10 microservices databases if you wanted to restore them all.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你要重新构建这个数据库，磁盘上的布局会有所不同。因此，假设一个重新构建的数据库与另一个完全相同，这种假设并不一定成立。在微服务中，当你进行备份时，你必须为所有这些备份添加版本号或时间戳，然后问题就来了：如何在特定的时间点恢复整个应用程序。如果你有
    10 个微服务数据库，想要恢复它们，可能会变得更加困难。
- en: Dev versus Ops – how to define DevOps
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发与运维 – 如何定义 DevOps
- en: '**Viktor Farcic**: Moving on to a more general subject, how would you define
    DevOps? I''ve gotten a different answer from every single person I''ve asked.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇克**：转到一个更广泛的话题，你如何定义 DevOps？我问过的每一个人给出的答案都不一样。'
- en: '**Sean Hull**: I have a lot of opinions about it actually. I wrote an article
    on my blog a few years ago called *The Four-Letter Word Dividing Dev and Ops*,
    with the implication being that the four-letter word might be a swear word, akin
    to the development team swearing at the operations team, and the operations team
    swearing at the development team. But the four-letter word I was referring to
    was "risk."'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sean Hull**：事实上，我对这个问题有很多看法。几年前，我在我的博客上写过一篇文章，名为*划分开发与运维的四个字母词*，暗示这四个字母词可能是一个脏话，就像开发团队对运维团队咒骂一样，而运维团队也对开发团队咒骂。但我指的四个字母词是“风险”。'
- en: To summarize my article, in my view, the development and the operations teams
    of old were separate silos in business, and they had very different mandates.
    Developers are tasked with writing code to build a product and to answer the needs
    of the customers, while directly building change into and facilitating a more
    sophisticated product. So, their thinking from day to day is about change and
    answering the requirements of the products team.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 总结我的文章，我认为，过去的开发团队和运维团队在业务中是分隔的，他们有着截然不同的任务。开发人员的任务是编写代码来构建产品，并满足客户的需求，同时直接将变更纳入并推动更复杂的产品。因此，他们的日常思维关注的是变更和回应产品团队的需求。
- en: On the other hand, the operations team's mandate is stability. It's "I don't
    want these systems going down at 2:00 a.m." So, over the long term, the operations
    teams are thinking about being as conservative as possible and having fewer moving
    parts, less code, and less new technologies. The simpler your stack is, the more
    reliable it is and the more robust and less likely it is to fail. I think the
    traditional reason why developers and operations teams were separated into silos
    was because of those two very different mandates.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，运维团队的任务是稳定性。就是“我不希望这些系统在凌晨2:00宕机”。因此，从长远来看，运维团队的思维方式是尽量保守，减少可变部件、减少代码和新技术。你的技术栈越简单，就越可靠，越稳健，越不容易失败。我认为，开发团队和运维团队被分隔成孤岛的传统原因是因为这两者有着截然不同的任务。
- en: They're two different ways of prioritizing your work and your priorities when
    you think about the business and the technology. However, the downside was that
    those teams didn't really communicate very well, and they were often at each other's
    throats, pushing each other in opposite directions. But to answer your question,
    "What is DevOps?," I think of it as a cultural movement that has made efforts
    to allow those teams to communicate better, and that's a really good thing.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这两者是两种不同的方式，来优先考虑你的工作和优先事项，特别是在思考业务和技术时。然而，缺点是这些团队之间的沟通并不畅通，他们经常针锋相对，推彼此朝着相反的方向发展。但为了回答你的问题，“DevOps是什么？”，我认为它是一种文化运动，努力让这些团队更好地沟通，而这是一件非常好的事情。
- en: '**Viktor Farcic**: What about infrastructure?'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：那基础设施呢？'
- en: '**Sean Hull**: What I see happening is that as the infrastructure code has
    caught on, a lot of companies don''t have operations at all, or DBAs, or even
    operations teams. All they have are developers. That''s fine insofar as you can
    build the infrastructure, but we''ve lost some of that mindset of stability, reliability,
    and the conservative thinking that would have come out of the operations teams.
    And now everything is on a developer''s shoulders to not only write the code but
    often to deploy the infrastructure as well.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sean Hull**：我所看到的情况是，随着基础设施代码的普及，很多公司根本没有运维人员、DBA，甚至没有运维团队。他们只有开发人员。只要你能够构建基础设施，这没问题，但我们已经失去了运维团队所带来的那种稳定性、可靠性和保守思维的心态。而现在，一切都落在开发人员肩上，他们不仅要编写代码，往往还要部署基础设施。'
- en: In larger companies, there is a separate DevOps team, so hopefully, they still
    carry some of those operations, but I'm thinking in terms of keeping things simple.
    "What is DevOps?" is an interesting question. I think it means different things
    to different people.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在大公司中，通常会有一个独立的DevOps团队，因此希望他们仍然承担一些运维任务，但我更倾向于简化的思考方式。“DevOps是什么？”是一个有趣的问题，我认为它对不同的人意味着不同的事情。
- en: '"It [DevOps] means different things to different people."'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: “它[DevOps]对不同的人意味着不同的事。”
- en: —Sean Hull
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: —Sean Hull
- en: '**Viktor Farcic**: I agree. Everybody has a different answer, so nobody knows
    what it is. What you just said leads me to an interesting, or rather horrifying—I
    don''t know which—case that I once heard. I was speaking with a guy who said,
    "Oh I love that. That''s really interesting for us because if we implement the
    serverless approach, we can get rid of all the operations because we would have
    no servers." What do you think of that?'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：我同意。每个人的答案都不同，所以没有人知道这是什么。你刚才说的让我想起了一个有趣的，或者说是令人恐惧的——我不知道是哪一种——案例。我曾与一个人交谈，他说：“哦，我喜欢这个。对我们来说真的很有趣，因为如果我们实施无服务器方法，我们就可以摆脱所有操作，因为我们将没有服务器。”你怎么看待这个问题？'
- en: '**Sean Hull**: Actually, that''s a great question, but it''s a bit more complicated
    than that. I wrote an article called *The 30 Questions To Ask a Serverless Fanboy*
    where I talked in-depth about the question of whether we have to worry about anything
    if we''re serverless. While being serverless definitely does simplify operations,
    there''s still a lot to be mindful of. For instance, in a serverless framework,
    you may have one service to do authentication, and another, let''s say DynamoDB
    or Firebase, as your data store. And then you have your Lambda functions that
    are running. As you add more components into the mix, you have more surface areas
    that become vulnerable to malicious code.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**肖恩·赫尔**：实际上，这是一个很好的问题，但比那更复杂一些。我写过一篇文章叫做 *《向无服务器迷问的30个问题》*，在文章中我深入探讨了我们是否需要担心在使用无服务器架构时的相关问题。虽然无服务器架构确实简化了操作，但仍然有很多需要注意的地方。例如，在一个无服务器框架中，你可能有一个服务用于身份验证，另一个服务，比如
    DynamoDB 或 Firebase，作为数据存储。然后你有运行中的 Lambda 函数。随着更多组件的加入，你会有更多的暴露面，这些暴露面可能会受到恶意代码的攻击。'
- en: For example, in the traditional three-tier, the database is hidden behind a
    VPC. But in serverless, that database is on the internet, so how do you test and
    deploy your API gateway changes? In a traditional application, you have the web
    server, and you deploy your application code and so forth—while in serverless,
    you have to deploy the API gateway configuration.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在传统的三层架构中，数据库隐藏在 VPC 后面。但在无服务器架构中，数据库位于互联网上，那么你如何测试和部署 API 网关的更改呢？在传统应用中，你有
    Web 服务器，部署应用代码等——而在无服务器架构中，你必须部署 API 网关配置。
- en: For Lambda, there's a serverless framework that takes a serverless YAML file
    that you can configure the API gateway for and then when you deploy it, it will
    do all that for you using CloudFormation. But testing is another area that's more
    complex in serverless applications. You can test locally to some degree, but it's
    quite a bit different than testing an application that runs with the database
    on which you can run those web servers and databases locally.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Lambda，有一个无服务器框架，可以使用无服务器 YAML 文件来配置 API 网关，部署时，它会使用 CloudFormation 为你完成所有这些工作。但在无服务器应用中，测试是另一个更复杂的领域。你可以在本地进行某种程度的测试，但它与在本地运行数据库的应用程序测试有很大不同。
- en: '**Viktor Farcic**: But with serverless, you''re typically tying into a database
    somewhere else, so where do you run that development database?'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：但是在无服务器架构中，你通常是连接到其他地方的数据库，那么你在哪儿运行开发数据库？'
- en: '**Sean Hull**: You may not be able to have all those components running locally,
    because it turns out the serverless framework has built stubs to provide Amazon-types
    of resources running locally on your computer. In terms of the management of a serverless
    framework, I definitely think that serverless simplifies certain things but makes
    other things more complex.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**肖恩·赫尔**：你可能无法在本地运行所有这些组件，因为事实证明，无服务器框架已经构建了存根，以便在你的计算机上本地运行类似 Amazon 的资源。在管理无服务器框架方面，我确实认为无服务器简化了某些事情，但也使其他事情变得更加复杂。'
- en: Exploring serverless functions, SQL, and the cloud
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索无服务器函数、SQL 和云服务
- en: '**Viktor Farcic**: How do you load-test serverless functions?'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：你如何进行无服务器函数的负载测试？'
- en: '**Sean Hull**: You''re paying every time that function is called, so do you
    really want to load-test it on a hundred thousand customers? I don''t know. Then,
    there are timeout questions. You have resource limitations across your AWS account,
    so maybe you''re going to hit a wall because you can only run a certain number
    of Lambda functions for the month, or you have 10 Lambda functions, and one function
    runs off the rails, which then takes all the other ones offline because you''ve
    hit some resource limit.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**肖恩·赫尔**：每次调用该函数，您都需要支付费用，那么您真的想在十万客户身上进行负载测试吗？我不知道。此外，还有超时的问题。您在AWS账户中有资源限制，所以也许会碰到瓶颈，因为您每个月只能运行一定数量的Lambda函数，或者您有10个Lambda函数，其中一个函数失控，导致其他所有函数下线，因为您已经达到了某些资源限制。'
- en: I think that there are still things to manage, for sure. I think that DevOps,
    infrastructure as code, and serverless have changed the nature of systems administration,
    site reliability engineers, and operational engineers. It changes their day-to-day
    jobs, but I still think there's a lot of work to do.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为肯定还有一些需要管理的事情。我认为DevOps、基础设施即代码和无服务器已经改变了系统管理、站点可靠性工程师和运维工程师的工作性质。这改变了他们的日常工作，但我仍然认为还有很多工作要做。
- en: '"DevOps, infrastructure as code, and serverless have changed the nature of
    systems administration, site reliability engineers, and operational engineers."'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '"DevOps、基础设施即代码和无服务器已经改变了系统管理、站点可靠性工程师和运维工程师的工作性质。"'
- en: —Sean Hull
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: ——肖恩·赫尔
- en: '**Viktor Farcic**: How can we integrate database processes with all the automation
    that we''re doing?'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托尔·法尔奇克**：我们如何将数据库过程与我们正在进行的所有自动化集成起来？'
- en: '**Sean Hull**: Database management is quite a bit more complex than automating,
    say, a web server deployment, a caching server, Memcached, Redis, or even a search
    server or any of the other types of components. There''s definitely more complexity.
    Another thing too with continuous integration is that your code is often deployed
    with code that affects the database.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**肖恩·赫尔**：数据库管理要比自动化Web服务器部署、缓存服务器（如Memcached、Redis）或搜索服务器等组件复杂得多。显然有更多的复杂性。另外，持续集成中的另一件事是，您的代码通常与影响数据库的代码一起部署。'
- en: For example, maybe you have a user's table, and a cell phone number, and you
    want to add a work phone number. So, you write the code around that, and then
    you write the DDL, the SQL statements that add the column, and you deploy those
    together, with the Python or Node.js code along with SQL. Those are called migrations.
    So, you're migrating the version of the database forward in time so that now that
    table can support that additional column.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，也许您有一个用户表，其中有一个手机号码，而您想添加一个工作电话号码。因此，您围绕此编写代码，然后编写DDL，即SQL语句来添加该列，并将它们与Python或Node.js代码一起部署。这些被称为迁移。因此，您正在将数据库版本向前迁移，以便现在该表可以支持该附加列。
- en: The thing is, migration scripts typically include a roll forward and a roll
    backward script. But with a database, you can see how with code that's no problem.
    You roll back to an older version. That's not a big deal. However, if you roll
    back the database now, you may have data in that additional column.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，迁移脚本通常包括前进和回退脚本。但对于数据库来说，您可以看到，对于代码来说这没问题。您可以回滚到旧版本。这没什么大不了的。但是，如果您现在回滚数据库，可能会有数据存在于该附加列中。
- en: If you've just added a work phone number, and maybe 10,000 of your users added
    their work phone numbers, if you roll back, you would drop that column and lose
    the data.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您刚刚添加了一个工作电话号码，也许您的10000个用户中有10000人添加了他们的工作电话号码，如果您回滚，您将删除该列并丢失数据。
- en: In some cases, roll forward and rollback scripts are managed by a DBA or somebody
    who's tasked with managing the database. But if you're an enterprise who's built
    your own application, then you don't have the luxury of that. Maybe you write
    your code blindly, and it drops the column, and you lose data? That's just another
    example of how the automation that we do in other parts of the enterprise doesn't
    necessarily always work the same way around with the database tier.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，回滚和前进脚本由DBA或负责管理数据库的人员管理。但如果您是一家自建应用程序的企业，那么您就没有这样的奢侈。也许您会盲目编写代码，删除该列，并丢失数据？这只是我们在企业其他部分进行的自动化不一定总是在数据库层面同样有效的另一个例子。
- en: '**Viktor Farcic**: As I said, it''s not my expertise, but I always have the
    impression that I would prefer not to have a rollback feature at all rather than
    having people relying on such a thing with databases. It seems more dangerous
    than actually having any real value. The moment that the first transaction enters
    your system, how do you roll back? You can''t.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：正如我所说，这不是我的专长，但我一直有一种印象，我宁愿没有回滚功能，而不是让人们依赖这种功能在数据库中。这似乎比实际提供任何真实的价值更危险。第一笔交易进入系统时，你怎么回滚？你做不到。'
- en: '**Sean Hull**: That''s definitely a complicated question, and one that lots
    of folks have thought about. But at the same time, it used to be that database
    schema changes were done sort of ad hoc, in that you''d hand the script to the
    DBA and say, "Hey, add these columns," and it was not tightly bound to the version
    control system, because it''s hard to do that. Databases don''t have versioned
    schemas—at least MySQL and Postgres don''t—and as far as I know, Redshift doesn''t
    either. So, at this point, they''re not really supporting that.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sean Hull**：这确实是一个复杂的问题，很多人都曾思考过这个问题。但与此同时，过去数据库模式更改通常是临时的做法，比如你把脚本交给DBA说：“嘿，添加这些列。”这与版本控制系统没有紧密绑定，因为这很难做到。数据库没有版本化的模式——至少MySQL和Postgres没有——据我所知，Redshift也没有。所以目前，它们并不真正支持这个功能。'
- en: '**Viktor Farcic**: Do you have a preferred tool, or just plain SQL, when you''re
    doing migrations?'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：在做迁移时，你有偏好的工具吗，还是直接使用SQL？'
- en: '**Sean Hull**: Some languages support that. For example, Ruby has migrations
    built in, so when you''re making code changes you can also deploy SQL. The response
    is that those chunks of SQL DDL (data definition language) commands are then set
    alongside the other branches of code, so that when you check out a particular
    version of the application, you''re also checking out a version of the database.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sean Hull**：一些语言支持这种做法。例如，Ruby内置了迁移功能，所以当你进行代码更改时，也可以部署SQL。响应是，这些SQL DDL（数据定义语言）命令块会和其他代码分支一起存放，这样当你检出应用程序的特定版本时，你也在检出数据库的某个版本。'
- en: '**Viktor Farcic**: How about zero-downtime deployments of applications, where
    people are using a blue-green deployment or rolling updates, which effectively
    means that you will have multiple versions of your application running at the
    same time. How do you handle that on a database level?'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：那么关于应用程序的零停机部署呢？比如人们使用蓝绿部署或滚动更新，这实际上意味着你的应用程序会同时运行多个版本。那么，你在数据库层面上如何处理这个问题？'
- en: '**Sean Hull**: That''s another good question. A lot of companies are using
    Amazon Relational Database Service (RDS) now. It''s a managed MySQL, Postgres,
    or Oracle, and because it''s managed, you don''t have access to the command line,
    or to the server itself.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sean Hull**：这是另一个好问题。现在很多公司都在使用Amazon关系型数据库服务（RDS）。它是一个托管的MySQL、Postgres或Oracle数据库，由于它是托管的，你无法访问命令行，也无法访问服务器本身。'
- en: A few years back, I was working for a company called ROBO, and I had to do a
    database upgrade of RDS. With a MySQL installation, you log into the command line,
    and you have direct access to the MySQL instance. With this, you can restart it
    in a matter of seconds, and with replication you can have two masters. One is
    read-only, and you're replicating data back and forth so that you can do both
    zero-downtime deployments and zero-downtime upgrades while having the database
    set in read-only mode for a very short period of time.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 几年前，我为一家名为ROBO的公司工作，当时需要对RDS进行数据库升级。在MySQL安装中，你可以登录命令行，直接访问MySQL实例。这样，你可以在几秒钟内重启它，且通过复制可以实现双主模式。其中一个是只读的，数据在两者之间进行双向复制，这样你可以在数据库设置为只读模式的情况下进行零停机部署和零停机升级，而且只需短时间保持只读模式。
- en: My experience in trying to upgrade RDS was that it took at least five minutes
    to restart after the upgrade and we didn't really have much visibility in terms
    of what was going on behind the scenes because Amazon controlled the server. We
    only had access to the MySQL database; we didn't have access to the instance,
    so we couldn't really see what the status of that restart and that upgrade was,
    and whether it was held up by something such as corrupted data.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我在尝试升级RDS时的经验是，升级后重启至少需要五分钟，而且我们对幕后发生的事情几乎没有可视化，因为服务器是由Amazon控制的。我们只能访问MySQL数据库；我们没有权限访问实例，所以我们无法真正看到重启和升级的状态，也无法知道它是否因为数据损坏等问题而被拖延。
- en: '**Viktor Farcic**: So, how did you deal with that?'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：那么，你是怎么处理的？'
- en: '**Sean Hull**: We ran through a number of fire drills, and created the database
    on another AWS account, then upgraded it and timed it to see how long it took.
    It''s a very cumbersome way to go about upgrading a database, and not only was
    it not zero downtime, it was in fact guaranteed downtime. There was no real way
    to avoid that. For some start-ups it''s worth it because you have this managed
    solution: the database is always running, you have a dashboard, and you can see
    what''s going on.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sean Hull**：我们进行了多次演练，并在另一个 AWS 账户上创建了数据库，然后对其进行了升级，并计时以查看需要多长时间。这是一种非常繁琐的数据库升级方式，不仅没有实现零停机，实际上还保证了停机时间。没有真正的办法避免这一点。对于一些初创公司来说，这样做是值得的，因为你有一个托管的解决方案：数据库始终在运行，你有一个仪表板，可以查看发生了什么。'
- en: However, if you don't have a database expert around to manage your database,
    it's a lot simpler. But if you do have a DBA, it's much better to roll your own
    MySQL or Postgres and manage it because you can reduce your downtime quite a bit.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你没有数据库专家来管理你的数据库，那么这会简单很多。但如果你有 DBA，自己管理 MySQL 或 Postgres 会更好，因为你可以显著减少停机时间。
- en: '**Viktor Farcic**: How about the other case? Let''s say we''re not upgrading
    the database, but instead, are rolling out a new release of an application that
    speaks to the database and potentially changes the schema. In that case, we would
    have two releases of an application that potentially requires a different schema.
    Let''s say that release 1 and release 2 introduced a new column. Do you have any
    suggestions about how to handle that?'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：那另一种情况呢？假设我们不是在升级数据库，而是在发布一个与数据库交互并可能更改模式的新版本应用程序。在这种情况下，我们将有两个版本的应用程序，它们可能需要不同的数据库模式。假设版本
    1 和版本 2 引入了一个新列。你有什么建议来处理这种情况吗？'
- en: '**Sean Hull**: Yes, so the migration scripts that I was talking about before,
    alongside your code changes; so, when you check out that newer version of the
    application, you would also check out a newer version of the SQL and the DDL statements
    that add that column. So, if you''re starting from scratch, you would start from
    a database dump and then apply all the migration scripts that point to that.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sean Hull**：是的，之前我提到的迁移脚本，加上你的代码更改；所以，当你检出应用程序的新版时，你也应该检出新版的 SQL 语句和 DDL
    语句，这些语句会添加那个新列。所以，如果你从头开始，你会从数据库的导出文件开始，然后应用所有指向它的迁移脚本。'
- en: '**Viktor Farcic**: Would those changes need to be backward-compatible with
    the previous version of the application, or would you just go straight ahead with
    a new schema?'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：这些更改是否需要与应用程序的先前版本向后兼容，还是直接采用新模式？'
- en: '**Sean Hull**: Usually you''re rolling forward. If you were to go backward,
    you may or may not need to apply the dropped column because, for example, in the
    case where I described before, we added the user''s cell phone and work phone
    numbers. If you go back to a previous version of the application, it just won''t
    access the work phone.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sean Hull**：通常你是在向前推进。如果你要倒退，你可能需要或不需要应用已删除的列，因为例如在我之前描述的情况中，我们添加了用户的手机号码和工作电话。如果你回到应用程序的早期版本，它就不会访问工作电话。'
- en: It won't be a problem if that extra column is there, except in one particular
    case if you do `select *` in your application, and the `select *` is very frowned
    upon for exactly that reason. If you're selecting star and you change the database
    columns, you're going to get a different number of columns back, and your code
    could break. You never want to use a select star; you want to specify all the
    columns that you're accessing.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果那个额外的列存在，通常不会有问题，除非在某种特定情况下，如果你在应用程序中使用了 `select *`，而 `select *` 正是因为这个原因而受到批评。如果你使用
    `select *` 并更改了数据库列，你将得到不同数量的列返回，可能会导致代码出错。你永远不应该使用 `select *`，而应该明确指定你访问的所有列。
- en: '**Viktor Farcic**: Definitely. So, in your experience, when companies you''ve
    worked with are migrating to the cloud, what would you identify as the biggest
    problem that''s waiting around the corner for them?'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：当然。那么，根据你的经验，当你曾经合作过的公司迁移到云时，你认为最大的潜在问题是什么？'
- en: '"I think the biggest obstacle is cultural; everything is done completely differently
    in the cloud now."'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: “我认为最大的障碍是文化问题；现在云中的一切都做得完全不同。”
- en: —Sean Hull
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: — Sean Hull
- en: '**Sean Hull**: I think the biggest obstacle is cultural; everything is done
    completely differently in the cloud now. In the traditional computing world, you
    have physical servers where you set up the server, you give it a name, plug it
    into your network, and you configure all those things the same way you would in
    the real world. It''s almost like physical things have names.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sean Hull**：我认为最大的障碍是文化上的；现在云中一切的运作方式都完全不同。在传统的计算世界里，你有物理服务器，你设置服务器，给它命名，把它插入网络，并像在现实世界中一样配置所有这些东西。几乎就像物理物品都有名字。'
- en: Before we had managed hosting, people had a cage or a closet in their business,
    and you could physically see the machine to plug a cable into. But in the cloud,
    everything's virtualized, and that ends up being a completely new paradigm that
    doesn't only challenge the business people, it also challenges the technology
    people to think in a new way.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们拥有托管服务之前，人们在自己的业务中有一个机柜或者一个机房，你可以实际看到机器并插入电缆。但在云中，一切都是虚拟化的，这最终成为一个完全新的范式，这不仅对业务人员构成挑战，也迫使技术人员以全新的方式思考。
- en: '**Viktor Farcic**: You say challenges, like security?'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：你说挑战，像是安全吗？'
- en: '**Sean Hull**: Yes, let''s take security. In AWS, you have VPCs, and it''s
    like virtual networking, so you can set up private and public subnets, and you
    can control access to servers inside of those subnets through two methods: one
    being security groups, and the other being access control lists. That''s very
    different from the way you would control access to servers in the old world where
    you need to have a firewall, which the networking team manages and configures,
    and/or you would have a firewall on each server like, for example, iptables.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sean Hull**：是的，我们以安全为例。在AWS中，你有VPC，它就像虚拟网络一样，因此你可以设置私有子网和公共子网，并且可以通过两种方法来控制对子网内服务器的访问：一种是安全组，另一种是访问控制列表。这与旧世界中控制服务器访问的方式非常不同，在旧世界中，你需要有一个防火墙，由网络团队管理和配置，或者你会在每个服务器上配置防火墙，比如使用iptables。'
- en: In the Amazon world, it's definitely as sophisticated, but the configuration
    of those firewalls is in the form of security groups and ACLs on your VPC, so
    its virtualized networking is very powerful, but it's also very complex and troubleshooting
    is difficult. When you try to access the server, and you get no response, and
    you're trying to figure out what could be the cause of that through debugging
    and troubleshooting, those problems are big challenges.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在亚马逊的世界里，它无疑是复杂的，但那些防火墙的配置是以安全组和VPC上的ACL的形式呈现的，因此它的虚拟化网络功能非常强大，但也非常复杂，故障排除也很困难。当你尝试访问服务器，却没有响应，并且你通过调试和故障排除试图找出可能的原因时，这些问题是巨大的挑战。
- en: But back to your question, the biggest challenge to migrating to the cloud is
    that for enterprises, there's a big learning curve, not only in understanding
    how an EC2 server spins up and how it uses disk, but how it accesses Amazon's
    Elastic Block Store (EBS), how it stores files in S3, and how you write Lambda
    functions that respond to events taking action in that environment. It's a completely
    new paradigm and a new set of technologies, so it's a big learning curve for both
    the engineers and the business folks.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 但回到你的问题，迁移到云端的最大挑战是，对于企业来说，这有一个很大的学习曲线，不仅仅是理解一个EC2服务器是如何启动的，它是如何使用磁盘的，还是如何访问亚马逊的弹性块存储（EBS），如何在S3中存储文件，以及如何编写响应事件并在该环境中采取行动的Lambda函数。这是一个全新的范式和一套全新的技术，因此对工程师和业务人员来说，都是一个巨大的学习曲线。
- en: '**Viktor Farcic**: I''ve seen quite a few of these tools that tell you if you
    buy our tool, we''re going to transfer whatever you have to the cloud. For example,
    Docker announced in the last DockerCon that they''re going to put in containers
    without a single change and everything will work. What do you think about that?'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我见过很多这样的工具，它们告诉你，如果你购买我们的工具，我们将把你现有的东西迁移到云端。例如，Docker在最近的DockerCon上宣布，他们将容器直接迁移，而不需要做任何改动，一切都会正常运行。你对此怎么看？'
- en: '**Sean Hull**: Salespeople often simplify things quite a bit in order to sell
    a product; in my experience, the devil is in the detail. It''s not to say that
    an automation tool like that might not be valuable and useful. It might be a good
    first step to getting your application in the cloud, and it might be an easier
    way than to rebuild everything one by one. But I doubt that it''s going to work
    magically just with one script.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sean Hull**：销售人员为了卖产品，往往会大大简化问题；以我的经验来看，关键就在于细节。并不是说像那样的自动化工具就没有价值或用处。它可能是将你的应用部署到云端的第一步，而且可能比逐一重建所有东西要更简单。但我怀疑，单单依靠一个脚本，它就能神奇地解决所有问题。'
- en: EC2 instances, for example, have different performance characteristics, not
    only in terms of the disk I/O, memory, and CPU, but in smaller instances, they
    actually throttle network access so you might spin up an instance and it just
    might not behave well. It might take time. In fact, all sorts of things could
    happen. You might have written MySQL scripts that assume you have root access
    to the server and then you rebuild that in an RDS and you get errors because you
    don't have access to those resources on the RDS. There's a lot of things to consider.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，EC2 实例有不同的性能特征，不仅仅体现在磁盘 I/O、内存和 CPU 上，在较小的实例中，实际上它们会限制网络访问，因此你可能启动一个实例，但它的表现可能不尽如人意。可能会花费一些时间。事实上，可能会发生各种问题。你可能写过一些假设你有
    root 权限的 MySQL 脚本，然后你将它们迁移到 RDS 中，却因为没有访问权限而出现错误。要考虑的事情有很多。
- en: '**Viktor Farcic**: How about applications? Say I''m a company and I have OpenFrame
    applications that were developed in the last 10 years. Does that require some
    kind of changing paradigm or architecture? What are your thoughts on that?'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：那么，应用程序呢？假设我是一个公司，过去 10 年开发了 OpenFrame 应用程序。这是否需要某种改变范式或架构？你对此有何看法？'
- en: '**Sean Hull**: It may. For example, a lot of applications might use shared
    storage. Amazon now has something called Elastic File System (EFS), which is meant
    to mirror the functionality that you see in traditional datacenters. But really,
    the right way to do it is to store your assets and your content on S3, but S3
    didn''t exist in those old applications in that environment, so you have to rewrite
    portions of your application to use S3\. I worked with a media publishing company
    last year that used an NFS server to store some of their content.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sean Hull**：可能会。例如，许多应用可能使用共享存储。现在，Amazon 有一个叫做弹性文件系统（EFS）的东西，旨在镜像传统数据中心中看到的功能。但真正正确的做法是将资产和内容存储在
    S3 上，不过在那些旧的应用环境中，S3 是不存在的，所以你必须重写应用的部分内容来使用 S3。我去年和一家媒体出版公司合作，他们使用 NFS 服务器来存储一些内容。'
- en: '"A number of years have passed since a lot of companies were locked in with
    Oracle, and so much time has passed that there''s a new generation of folks that
    haven''t been bitten by that."'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: “很多年过去了，很多公司曾经被 Oracle 锁定，现在已经过去了这么久，出现了新一代的人，他们还没受到过那样的伤害。”
- en: —Sean Hull
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: —Sean Hull
- en: The right way to do that would be to use the plugin—in this case, it was WordPress—to
    access those files in S3\. But they wanted to move it to Amazon with a fewer number
    of changes. For the short term, we set up EFS, which is Amazon's version of NFS.
    The only reason Amazon built EFS in the cloud is because, exactly as in the use
    case you're talking about where you have applications, you're moving them, and
    you don't want to. The native way to do it in Amazon would be to store it in S3
    because S3 has life cycle control and infrequent access. It also has Glacier and
    all the rest so that would be the native way to do it in the cloud.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 正确的做法是使用插件——在这种情况下，是 WordPress——来访问 S3 中的文件。但是他们希望在尽量减少变更的情况下将其迁移到 Amazon。短期内，我们设置了
    EFS，这是 Amazon 的 NFS 版本。Amazon 在云中构建 EFS 的唯一原因正是因为，就像你提到的那种情况一样，你有应用要迁移，而你不想进行重构。在
    Amazon 中，原生的做法是将文件存储在 S3，因为 S3 提供生命周期控制和不常访问的功能，它还有 Glacier 以及其他相关服务，这就是在云端的原生做法。
- en: Vendor lock-in, AWS, and keeping up with the DevOps world
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 供应商锁定、AWS 和跟上 DevOps 世界
- en: '**Viktor Farcic**: With the companies you work with, do they express concern
    about vendor lock-in, for example, when they go to Amazon?'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：你合作的公司是否会在迁移到 Amazon 时，表达对供应商锁定的担忧？'
- en: '**Sean Hull**: Yes, actually I think a number of years have passed since a
    lot of companies were locked in with Oracle, and so much time has passed that
    there''s a new generation of folks that haven''t been bitten by that. I sense
    that there''s less fear right now around Amazon lock-in than maybe there should
    be. There are tools like Terraform that can plug into Google Cloud; it can talk
    to the IBM Cloud, Azure, and AWS, among others, so you can deploy resources in
    any of those clouds if you''ve built your infrastructure code in Terraform. Terraform
    is like a layer on top of CloudFormation that implements that stuff in a generic
    way.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sean Hull**：是的，实际上我觉得很多公司已经与 Oracle 深度绑定已经过去了很多年，时间已经过去得很久，以至于现在有一代人没有经历过这种情况。我感觉现在关于
    Amazon 锁定的恐惧感可能没有想象中的那么强。像 Terraform 这样的工具可以连接到 Google Cloud；它可以与 IBM Cloud、Azure
    和 AWS 等云平台进行交互，因此，如果你在 Terraform 中构建了基础设施代码，就可以在任何一个云平台上部署资源。Terraform 就像是 CloudFormation
    上的一层，能够以通用的方式实现这些功能。'
- en: '**Viktor Farcic**: What''s your take on container schedulers: Kubernetes, Mesos,
    Swarm, and so on?'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：你对容器调度器怎么看：Kubernetes、Mesos、Swarm 等等？'
- en: '**Sean Hull**: I haven''t done much with Kubernetes and Docker Swarm. Docker
    is awesome, and containerization has been around for a long time, since the late
    1970s. In fact, I think there was an original BSD project that really popularized
    containers, but obviously, Docker is the modern version that everybody knows so
    well, and it does a lot of powerful things.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sean Hull**：我没怎么使用过 Kubernetes 和 Docker Swarm。Docker 很棒，容器化已经存在很久了，从1970年代末期就有了。事实上，我认为最初的
    BSD 项目是容器化的先驱，虽然显然 Docker 是大家现在都非常熟悉的现代版本，它做了很多强大的事情。'
- en: You can spin up development environments and QA test very easily, and so you
    can encapsulate all the code to rebuild everything you need to get your application
    working, and that makes everything more repeatable, and so forth. I don't think
    containers are going away anytime soon because they serve a really big need.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以非常轻松地启动开发环境和 QA 测试，因此你可以将所有代码封装起来，重建一切你需要的东西来让你的应用程序运行，这使得所有事情都变得更加可重复等等。我认为容器不会很快消失，因为它们满足了一个非常大的需求。
- en: '**Viktor Farcic**: I have the impression that the speed with which new things
    are coming is only increasing. How do you keep up with it, and how do companies
    you work with keep up with all that?'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我有一种感觉，新事物出现的速度只是在不断加快。你是如何跟上这个节奏的，与你合作的公司又是如何应对这些变化的？'
- en: '**Sean Hull**: I don''t think they do keep up. I''ve gone to a lot of companies
    where they''ve never used serverless. None of their engineers know serverless
    at all. Lambda, web tasks, and Google Cloud functions have been out for a while,
    but I think there are very few companies that are able to really take advantage
    of them. I wrote another article blog post called *Is Amazon Web Services Too
    Complex for Small Dev Teams?* where I sort of implied that it is.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sean Hull**：我觉得他们并没有跟上。我去过很多公司，他们从未使用过无服务器架构。他们的工程师根本不知道无服务器是什么。Lambda、Web
    任务和 Google Cloud Functions 已经发布一段时间了，但我认为能够真正利用它们的公司非常少。我写过另一篇文章博客，叫做 *Is Amazon
    Web Services Too Complex for Small Dev Teams?*，我在其中暗示了它确实是。'
- en: I do find a lot of companies want the advantage of on-demand computing, but
    they really don't have the in-house expertise yet to really take advantage of
    all the things that Amazon can do and offer. That's exactly why people aren't
    up to speed on the technology, as it's just changing so quickly. I'm not sure
    what the answer is. For me personally, there's definitely a lot of stuff that
    I don't know. I know I'm stronger in Python than I am with Node.js. Some companies
    have Node.js, and you can write Lambda functions in Java, Node.js, Python, and
    Go. So, I think Amazon's investment in new technology allows the platform to evolve
    faster than a lot of companies are able to really take advantage of it.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现很多公司想要按需计算的优势，但他们实际上还没有足够的内部专长，无法充分利用 Amazon 所能提供的所有功能。这正是人们未能跟上技术进展的原因，因为它变化得太快了。我不确定答案是什么。就我个人而言，确实有很多我不知道的东西。我知道自己在
    Python 上比在 Node.js 上更强。有些公司使用 Node.js，你可以用 Java、Node.js、Python 和 Go 编写 Lambda
    函数。所以，我认为 Amazon 在新技术上的投资使得平台能够比许多公司更快速地发展，而这些公司还无法充分利用这一点。
- en: '"Amazon''s investment in new technology allows the platform to evolve faster
    than a lot of companies are able to really take advantage of it."'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: “Amazon 在新技术上的投资使得平台能够比许多公司更快速地发展，而这些公司还无法充分利用这一点。”
- en: —Sean Hull
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: —Sean Hull
- en: '**Viktor Farcic**: That was my impression when I heard the announcements from
    their conference. I was like, it would take me a year just to go, and if I would
    dedicate a year, I would still have trouble keeping up with everything they announced
    in just a single day.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔西奇**：这是我从他们会议的公告中听到的印象。我当时想，要是我去的话，光是准备可能就得一年，如果我专心致志去做这一年，我还是很难在一天内跟上他们宣布的所有内容。'
- en: '**Sean Hull**: I had a customer recently ask me if I have experience with Lambda.
    I said, "Yes," and he said, "We want to use something called Lambda@Edge," and
    I said, "I have no idea what Lambda@Edge is as I''ve never even heard of it."
    It turned out Lamba@Edge is a product released four or five months ago that is
    actually kind of cool. Normally, in your applications, your content is either
    fed off of the web server or in S3, and then you have CDNs that can then fetch
    that content and keep it closer to where the traffic is coming from.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**肖恩·赫尔**：最近有个客户问我是否有使用过 Lambda 的经验。我说：“有的。”他说：“我们想用一个叫 Lambda@Edge 的东西。”我说：“我不知道
    Lambda@Edge 是什么，我甚至没听说过它。”结果发现，Lambda@Edge 是四五个月前发布的一个产品，实际上挺酷的。通常情况下，在你的应用程序中，内容要么是从
    Web 服务器提供，要么是从 S3 提供，然后你有 CDNs 来获取这些内容，并将其保存在离流量来源更近的位置。'
- en: Say I'm hosting an application in New York, but I have a customer in Japan,
    and they're hitting that piece of content. They would hit a CDN endpoint that's
    closer to Japan, and therefore the application would be quicker. All the graphical
    images and CSS and the other things that it can cache, it would keep them cached
    at the endpoint. Lambda@Edge allows you to write Lambda code that executes at
    the edge, so you can examine a cookie that the user authenticated with and then
    see at the CDN if they have permission to access something. You can write Lambda
    code that executes at the edge, hence further speeding up your application. If
    most of your application is in Lambda, you'd be completely distributed at point,
    and you'd see really huge performance improvement there.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我在纽约托管一个应用程序，但我有一个在日本的客户，他们访问那个内容。他们会访问一个离日本更近的 CDN 端点，因此应用程序会更快。所有的图形图像、CSS
    和其他可以缓存的内容都会在该端点进行缓存。Lambda@Edge 允许你编写在边缘执行的 Lambda 代码，因此你可以检查用户认证时的 Cookie，然后查看
    CDN 是否允许他们访问某些内容。你可以编写在边缘执行的 Lambda 代码，从而进一步加速你的应用程序。如果你的应用程序大部分是 Lambda，你将完全实现分布式，到那时你会看到巨大的性能提升。
- en: '**Viktor Farcic**: I haven''t even heard about Lambda@Edge until today.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔西奇**：直到今天，我都没听说过 Lambda@Edge。'
- en: '**Sean Hull**: Lambda@Edge exposes four new events: there''s both a before
    and after endpoint, and a before and after origin, so you can respond just like
    any other Lambda code would respond to events in the AWS world, and Lambda@Edge
    exposes those four new events to allow you to write code that runs at the CDN
    endpoint.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**肖恩·赫尔**：Lambda@Edge 提供了四个新的事件：既有请求前和请求后的端点，也有源前和源后的事件，因此你可以像任何其他 Lambda 代码响应
    AWS 世界中的事件一样做出响应，而 Lambda@Edge 提供这四个新事件，允许你编写在 CDN 端点上运行的代码。'
- en: The future of DevOps and closing remarks
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps 的未来及总结
- en: '**Viktor Farcic**: I''m going to ask you a question now that I hate being asked,
    so you''re allowed not to answer. Where do you see the future, let''s say a year
    from now?'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔西奇**：我现在要问你一个我最讨厌别人问我的问题，所以你可以选择不回答。你怎么看未来？假设一年后的情况？'
- en: '**Sean Hull**: I see more fragmentation happening across the technology landscape,
    and I think that that is ultimately making things more fragile because, for example,
    with microservices, companies don''t think twice about having Ruby, Python, Node.js,
    and Java. They have 10 different stacks, so when you hire new people, either you
    have to ask them to learn all those stacks or you have to hire people with each
    of those individual areas of expertise. The same is true with all these different
    clouds with their own sets of features: there''s a fragmentation happening.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**肖恩·赫尔**：我看到技术领域越来越碎片化，我认为这最终会让事情变得更脆弱，因为例如，使用微服务的公司不会犹豫使用 Ruby、Python、Node.js
    和 Java。它们有 10 个不同的技术栈，因此当你招聘新员工时，要么让他们学习所有这些栈，要么必须雇佣每个技术领域的专家。所有这些不同的云服务以及它们各自的特性也是如此：这种碎片化正在发生。'
- en: Let's look at the iPhone as an example. Think about how complex application
    testing is for Android versus the iPhone. I mean, you have hundreds of different
    smartphones that run Android, all with different screen sizes, different hardware,
    different amounts of memory, and the underlying stuff. Some may even have some
    extra chips that others don't have, so how do you test your application across
    all those different platforms?
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以 iPhone 为例。想一想，在 Android 和 iPhone 之间，应用程序测试有多复杂。我的意思是，你有数百种不同的智能手机运行 Android，它们的屏幕尺寸、硬件配置、内存大小、底层硬件都不同。有些可能甚至有其他手机没有的额外芯片，那么你该如何在所有这些不同平台上测试你的应用程序呢？
- en: '"You have hundreds of different smartphones that run Android, all with different
    screen sizes, different hardware, different amounts of memory, and the underlying
    stuff. […] How do you test your application across all those different platforms?"'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: “你有数百种不同的智能手机运行 Android，它们的屏幕尺寸、硬件配置、内存大小、底层硬件都不同。[…] 那么，如何在所有这些不同平台上测试你的应用程序呢？”
- en: —Sean Hull
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: — Sean Hull
- en: When you have fragmentation like that, it means the applications end up not
    working as well. I think the same thing is happening across the technology spectrum
    today that happened 10 to 15 years ago, where for your database backend there
    was Oracle, SQL Server, MySQL, and Postgres. Maybe somebody who's a DB2 enterprise
    customer uses DB2, but now there are hundreds of open source databases, graph
    databases, and DynamoDB versus Cassandra, and so on and so on. There's no real
    deep expertise in any of those databases.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当出现这种碎片化时，意味着应用程序的效果会受到影响。我认为今天技术领域发生的事情，跟 10 到 15 年前一样，那时你的数据库后端有 Oracle、SQL
    Server、MySQL 和 Postgres。也许一些使用 DB2 的企业客户会选择 DB2，但现在有数百种开源数据库、图数据库、DynamoDB 和 Cassandra
    等等。对于这些数据库来说，并没有真正深入的专业知识。
- en: What ends up happening is you have cases like what happened with customers who
    were using MongoDB. They found out the hard way about all of the weird behaviors
    and performance problems it had, because there just weren't people around with
    deep knowledge of what was happening behind the scenes, whereas in Oracle's space,
    for example, there are career DBAs that are performance experts that specialize
    in Oracle internals, so you can hire somebody to solve particular problems in
    that space.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 最终发生的情况是，像那些使用 MongoDB 的客户一样，他们通过艰难的方式发现了 MongoDB 中存在的各种奇怪行为和性能问题，因为在幕后发生的事情，几乎没有人掌握深入的知识。而在
    Oracle 的领域，例如，有一些职业数据库管理员（DBA）专门研究 Oracle 的内部，成为性能专家，所以你可以雇佣这些专家来解决特定的问题。
- en: There aren't, as far as I know, a lot of people with MongoDB internals expertise.
    You'd have to call MongoDB themselves; maybe they have a few engineers that they
    can send out, so what's the future? I see a lot of fragmentation and complexity,
    and that makes the internet and internet applications more fragile, more brittle,
    and more prone to failure.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 据我所知，掌握 MongoDB 内部知识的专家并不多。你只能直接联系 MongoDB；也许他们有一些工程师可以派出来，那么未来会怎样呢？我看到很多碎片化和复杂性，这使得互联网和互联网应用变得更加脆弱，更易出现故障。
- en: '**Viktor Farcic**: Do you think that trend will continue, or will it kind of
    reverse itself?'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：你认为这种趋势会继续下去，还是会有所逆转？'
- en: '**Sean Hull**: I don''t know if it would or how it could reverse itself; it
    seems like it''s a more general trend of all human knowledge. Look at science
    and the different specializations; that have gotten more complex across the spectrum,
    and I think that complexity can lead to very unexpected surprises.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sean Hull**：我不知道它是否会逆转，或者如何逆转；这似乎是一个更加普遍的趋势，涉及到所有人类知识的增长。看看科学和不同的专业领域，它们变得更加复杂，我认为这种复杂性可能会带来非常意外的惊喜。'
- en: For example, I recently read a research paper that talked about depression among
    teens. I know this is a long side note, but the researchers believe teenage depression
    is related to the overuse of smartphone devices, because they're messing up how
    people socialize. I think that more complex fragmentation across the technology
    spectrum can lead to very unexpected surprises. I don't know how we wrestle that
    and how we rein that in, because it just seems to be growing more and more every
    day.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，我最近读到一篇关于青少年抑郁症的研究论文。我知道这有点偏题，但研究人员认为，青少年抑郁症与智能手机的过度使用有关，因为智能手机改变了人们的社交方式。我认为，技术领域日益复杂的碎片化可能会带来一些非常意想不到的后果。我不知道我们该如何应对这个问题，也不清楚如何遏制这一趋势，因为它似乎每天都在不断增长。
- en: '**Viktor Farcic**: I share the same impression. I think that nothing ever goes
    away, like how we still have mainframes to think about as well. But to finish
    up, is there anything else you would like to talk about?'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我有同样的印象。我认为没有什么会消失，就像我们现在还得考虑主机一样。但为了结束，是否还有什么你想讨论的？'
- en: '**Sean Hull**: Not long ago I wrote an article titled *How is Automation Impacting
    the DBA Role?*. I was talking to a colleague of mine who works in the Oracle space,
    and they were lamenting how things are changing so quickly, and a lot of companies
    don''t hire a traditional DBA role anymore. That''s partly because there are managed
    services like Amazon RDS that simplify that process, so you don''t need a dedicated
    resource person just for that role.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sean Hull**：不久前，我写了一篇文章，标题是*自动化如何影响DBA角色？*。我和一个在Oracle领域工作的同事聊过，他感叹事情变化太快，很多公司现在不再招聘传统的DBA角色了。这部分是因为有像Amazon
    RDS这样的托管服务简化了这个过程，因此不再需要专门的人来承担这个角色。'
- en: To summarize, in the article I wrote that there's a lot of opportunity for people
    with deep database knowledge, but they need to step up, pivot, and present their
    skills and their knowledge and frame it in a new way.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，在我写的文章中，我提到有很多机会留给那些拥有深厚数据库知识的人，但他们需要主动出击，转变思维，并以全新的方式展示自己的技能和知识。
- en: I do think that deep database knowledge is very valuable for companies, especially
    as they adopt microservices and try to put databases into containers, and you
    have other weird performance issues around multi-tenant, Amazon-related stuff.
    I think someone who has deep database knowledge and performance should still be
    able to apply that and be of value in today's technology landscape. I just think
    it's a matter of packaging it and selling yourself in a new way.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我确实认为，深厚的数据库知识对公司来说非常有价值，尤其是在它们采用微服务并尝试将数据库容器化时，或者遇到多租户、与Amazon相关的奇怪性能问题时。我认为，具备深厚数据库知识和性能优化经验的人，依然能够在当今的技术环境中发挥作用并创造价值。我只是认为，关键在于如何将这些知识打包，并以新的方式推销自己。
- en: '**Viktor Farcic**: I have the same impression. I think it actually goes way
    beyond specific examples like databases. I feel the same thing is happening in
    other areas, and I''m seeing more and more Java developers who actually know how
    to write getters and setters and stuff like that. I have the impression that''s
    happening all around, and to me, this is a very big warning that we might get
    into trouble.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我有同样的印象。我认为这实际上远远超出了像数据库这样的具体例子。我感觉其他领域也发生了类似的事情，我看到越来越多的Java开发者其实知道如何编写getter和setter之类的东西。我有一种印象，这种情况正在到处发生，对我来说，这是一个非常严重的警告，提醒我们可能会遇到麻烦。'
- en: '**Sean Hull**: I think what is happening is that hiring managers are starting
    to realize that they''re not going to find somebody with the exact specific skill
    that they''re looking for, and they have to look for a more general skillset and
    someone with more general computing understanding and knowledge. Once they''ve
    found them, they need to ask, "Hey, do you want to step up and learn this new
    stuff, or do you feel confident to solve this problem?"'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sean Hull**：我认为，发生的事情是，招聘经理们开始意识到他们不太可能找到完全符合他们要求的具体技能的人，所以他们必须寻找更为通用的技能组合以及具有更广泛计算机理解和知识的人。一旦找到了，他们需要问：“嘿，你愿意提升自己，学习这些新知识吗？还是你觉得自己有信心解决这个问题？”'
- en: '**Viktor Farcic**: That''s a great place to end the interview. Thank you.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：这是结束采访的一个很好的地方。谢谢你。'
