- en: Introducing Bret Fisher
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍 Bret Fisher
- en: Bret Fisher is a freelance DevOps and Docker consultant, Udemy instructor, trainer,
    speaker, and open source volunteer. He also teaches courses on Docker and container
    technology. You can follow him on Twitter at `@BretFisher`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Bret Fisher 是一位自由职业的 DevOps 和 Docker 顾问、Udemy 讲师、培训师、演讲者以及开源志愿者。他还教授有关 Docker
    和容器技术的课程。你可以通过 Twitter 关注他，用户名是 `@BretFisher`。
- en: What is DevOps?
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 DevOps？
- en: '**Viktor Farcic**: I want to start by asking if you could give us the elevator
    pitch as to who you are, and how you''re involved with the DevOps community.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我想从问你一个问题开始，你能否为我们提供一个简短的介绍，告诉我们你是谁，以及你是如何参与 DevOps 社区的？'
- en: '**Bret Fisher**: Firstly, I would say that I''m a DevOps consultant who mainly
    focuses on Docker. That being said, I''m actually a Docker Captain, who both works
    and teaches the program. I guess you could say I live and breathe Docker 24/7.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**：首先，我会说我是一个主要专注于 Docker 的 DevOps 顾问。也就是说，我其实是 Docker Captain，既工作又教授该程序。可以说，我
    24/7 都活在 Docker 中。'
- en: '**Viktor Farcic**: Last night, I was talking to three self-proclaimed DevOps
    engineers who were all from different companies. You''d think they would all describe
    their jobs in the same way, but they didn''t. In fact, each of them described
    their jobs using different terms. So, my question for you is, and it''s something
    I''ve asked everyone in this book, what the heck is DevOps?'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：昨晚，我和三位自称为 DevOps 工程师的人交谈，他们都来自不同的公司。你会以为他们会以相同的方式描述自己的工作，但事实并非如此。事实上，他们每个人都用不同的术语描述自己的工作。所以，我想问你一个问题，也是我在这本书中问过每一个人的问题，DevOps
    到底是什么？'
- en: '**Bret Fisher**: The definition of DevOps today is not what people who do DevOps
    actually do, so it''s funny that you''ve asked me this question. People have asked
    me to inject more DevOps into my Docker course because they''re self-proclaimed
    beginners in DevOps. But they''re actually not beginners of DevOps, they''re beginners
    in IT.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**：今天的 DevOps 定义并不是那些从事 DevOps 的人所做的事情，所以你问我这个问题真有趣。人们曾要求我在我的
    Docker 课程中加入更多的 DevOps 内容，因为他们自称是 DevOps 的初学者。但他们其实并不是 DevOps 的初学者，而是 IT 的初学者。'
- en: '"The definition of DevOps today is not what people who do DevOps actually do."'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: “今天的 DevOps 定义并不是那些从事 DevOps 的人所做的事情。”
- en: —Bret Fisher
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: —Bret Fisher
- en: If John or Jane, who are just starting out in IT, comes to me saying that they
    want to do DevOps, I find it difficult to do. Why? Because, to me, DevOps is something
    you can only do after you've been in operations or in development for a while,
    because you have to know both in some form before you really get the overarching
    idea of DevOps. You can't really be a part of DevOps if you're new to either area.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果刚刚开始从事 IT 的 John 或 Jane 来找我说他们想做 DevOps，我会发现这很难实现。为什么？因为对我来说，DevOps 是只有在你有一定的运维或开发经验后才能做的事情，因为你必须在某种程度上了解这两个领域，才能真正理解
    DevOps 的整体概念。如果你对这两个领域都很陌生，你就无法真正成为 DevOps 的一部分。
- en: '**Viktor Farcic**: So, really nobody knows what DevOps actually is?'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：所以，实际上没有人知道 DevOps 究竟是什么？'
- en: '**Bret Fisher**: To me, DevOps is literally if you''re a developer, you''re
    working with operations, and you''re sharing the same concerns around the concept
    of getting the software off of the developer''s laptop, into production, and everything
    in between. Then, after the software is in production, the job of DevOps is making
    sure that the project remains up and that you can update it reliably, and that
    there''s this continuous feedback loop between everyone involved in the process.
    The loop is how the software is getting from the developer all the way through
    to the servers and then getting updated in an ever-increasingly faster loop.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**：对我来说，DevOps 其实就是如果你是开发者，你需要和运维人员一起工作，分享关于将软件从开发者的笔记本电脑迁移到生产环境，并处理其中的一切问题的共同关注点。然后，在软件进入生产环境后，DevOps
    的工作就是确保项目保持正常运行，并且可以可靠地更新，同时在整个过程中，所有参与者之间形成持续的反馈循环。这个循环是软件如何从开发者端一直到服务器，然后再通过越来越快的循环进行更新。'
- en: But let's, for a minute, imagine that I'm in a DevOps team with you. If, in
    the future, we're still shipping software at the same pace that we're shipping
    it now, I would say that we're not doing very well as a team. We should be optimizing
    and making the system more efficient, assuming of course that we wanted to go
    faster. If the company's not trying to go faster, then that's fine. I find it
    funny that DevOps is now becoming this entryway thing for people want to get into
    technology. Everybody's saying that technology is awesome and that DevOps is something
    we all should be doing, but I just don't see how that works. If I don't know how
    to be a developer, and I don't know how to be operations, then how could I possibly
    do both of them and DevOps?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但是让我们暂时想象一下，我和你在一个DevOps团队里。如果将来我们仍然以现在的速度发布软件，我会说我们团队的表现不太好。我们应该优化并使系统更高效，当然前提是我们想要更快。如果公司不打算更快，那也没关系。我觉得很有趣的是，DevOps现在成了那些想要进入技术行业的人的入门门槛。每个人都在说技术很棒，DevOps是我们都应该做的事情，但我就是看不懂这怎么可能运作。如果我既不知道怎么做开发，也不知道怎么做运维，那我怎么可能同时做好这两项工作并成为DevOps呢？
- en: '**Viktor Farcic**: That''s the issue I keep coming across. I''m continuously
    meeting people who are just starting their IT journey. At that stage of their
    career, they know nothing about anything. They''re starting from scratch.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：这就是我不断遇到的问题。我不断遇到那些刚刚开始IT旅程的人。在他们职业生涯的那个阶段，他们对任何事情一无所知。那时他们从零开始。'
- en: 'It would be as if my first introduction to IT is me saying: "I''m going to
    become a DevOps engineer." It''s as if I''m choosing whether I''m going to become
    a tester. I''m going to become a developer, and I really don''t understand how
    that happened. You said earlier that you do Docker courses, but to me, when you''ve
    completed them, you''re certified DevOps, and you have an ability to say: "I''m
    a certified DevOps beginner."'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这就像我第一次接触IT时说：“我要成为一名DevOps工程师。”这就像我在选择我要成为一名测试员一样。我将成为一名开发者，我完全不理解怎么就发生了这种情况。你刚才说你上过Docker课程，但在我看来，当你完成这些课程后，你就是一名认证的DevOps工程师，你可以说：“我是一名认证的DevOps初学者。”
- en: '**Bret Fisher**: If someone said that he or she was new in the industry and
    wanted to get into DevOps, then I could hire them with the idea of training them
    towards that specific goal. If I had to make them a DevOps engineer, their first
    job would obviously be to learn the developing language that the team is running
    and effectively become a very junior developer.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**：如果有人说他或她是行业新人，想要进入DevOps领域，那么我可以以培训他们朝着这个具体目标前进的方式雇佣他们。如果我必须让他们成为一名DevOps工程师，他们的第一份工作显然是学习团队正在使用的开发语言，并有效地成为一个非常初级的开发者。'
- en: I would stick the newbie on the build team, so they would have to be someone
    involved with using Jenkins and either building or testing the app and automating
    that part. For me, that's the only role where they don't have to develop the code
    but, instead, have to understand the code just a little bit. They don't really
    have to know the operations, but they're going to have to talk to the operators,
    and as a result, they're going to learn a little bit of the operators' pain.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我会把新人安排到构建团队，这样他们就得参与使用Jenkins，或者构建和测试应用程序并自动化这一部分。对我来说，这是唯一一个他们不需要开发代码，而是稍微理解代码的角色。他们其实不需要懂运维，但他们会和运维人员打交道，结果是，他们会稍微了解一些运维的痛点。
- en: '"If I had to make them a DevOps engineer, their first job would obviously be
    to learn the developing language that the team is running and effectively become
    a very junior developer."'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: “如果我必须让他们成为一名DevOps工程师，他们的第一份工作显然是学习团队正在使用的开发语言，并有效地成为一个非常初级的开发者。”
- en: —Bret Fisher
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: —Bret Fisher
- en: 'Fast-forward a year: I would now say that you''ve done all that for a while,
    let''s actually have you be responsible for some servers, and from there, you
    get a little bit of operations sysadmin experience. Fast-forward another year,
    and now you can say: "OK, maybe you can start focusing on DevOps-related issues."
    People that are new to operations find it a tough thing because they don''t understand
    software and servers, which raises the question of what exactly are they operating?'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 快进一年：我现在会说，既然你已经做了这些一段时间了，那么我们实际上可以让你负责一些服务器工作，从中你将获得一点点运维系统管理员经验。再快进一年，你就可以说：“好吧，也许你可以开始关注与DevOps相关的问题。”刚接触运维的人会觉得很难，因为他们不了解软件和服务器，这就引出了一个问题：他们到底在操作什么？
- en: I'm sure there are some job descriptions out there that say they're looking
    for a junior DevOps engineer. I just have to ask, who would do that job well?
    Is it somebody who's a developer and likes to tinker with servers, or is it a
    server admin who knows a little bit about how to script and code? I really don't
    know, but what I do know is that I don't have a good answer to your question.
    What's funny is that there are all of these courses that say you can do DevOps
    now, but all they do is teach you a tool like Jenkins, which doesn't make you
    DevOps.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我敢肯定，外面有一些职位描述写着他们在寻找初级DevOps工程师。我只想问，谁能做得好这个工作？是一个开发者，喜欢捣鼓服务器，还是一个服务器管理员，懂得一点脚本编写和编码？我真的不知道，但我知道的是，我没有一个很好的答案来回答你的问题。搞笑的是，现在有很多课程说你可以做DevOps，但它们只教你一个像Jenkins这样的工具，这并不会让你成为DevOps。
- en: Right here, right now
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 就在此时此刻
- en: '**Viktor Farcic**: I find that interesting because, when I''ve gone to conferences—say,
    over the last two years—all I''m seeing is every single vendor and every single
    product being labeled as DevOps. Yes, it has already existed for years, but today,
    every single product is called a DevOps product. Just look at Jenkins. I know
    that you go to a lot of conferences, so I was wondering what your thoughts are
    on this?'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我觉得这很有趣，因为每当我去参加会议——比如过去两年——我看到的每个厂商和每个产品都被贴上了DevOps的标签。是的，它已经存在很多年了，但今天，所有的产品都被称为DevOps产品。就像Jenkins一样。我知道你去过很多会议，所以我想知道你对此有什么看法？'
- en: '**Bret Fisher**: DevOps is like the new cloud. Remember when we were all joking
    in 2013 about what is the cloud? All we knew was that it''s just servers on the
    internet. That''s all it is. But we had this new term, and everybody had to use
    it. All of these companies came out with all of these products, and they all had
    the word "cloud" in it somewhere.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**：DevOps就像是新的云。还记得我们在2013年都在开玩笑说，什么是云吗？我们知道的只是，它就是互联网上的服务器。就这么简单。但我们有了这个新词，每个人都得用它。所有这些公司推出了各种各样的产品，而它们的名字里都包含了“云”这个词。'
- en: So, now, what is the cloud? The cloud doesn't mean anything. It's just the internet.
    I feel like that's what the word DevOps is going toward, though I must put my
    hands up as I'm guilty of this because my course has DevOps in the title.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在，什么是云？云其实并没有什么特别的含义。它只是互联网。我觉得这个词DevOps也是朝这个方向走的，尽管我得承认我也是有罪的，因为我的课程标题里有DevOps。
- en: '**Viktor Farcic**: Even my previous books have DevOps in their title—the *DevOps
    Toolkit* series.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：即使是我以前的书，它们的标题里也有DevOps——*DevOps工具包*系列。'
- en: '**Bret Fisher**: My title is *DevOps Dude*, simply because it works. I get
    more requests to interview for jobs on LinkedIn simply because DevOps is in my
    title.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**：我的头衔是*DevOps Dude*，仅仅因为它有效。我在LinkedIn上收到更多面试请求，单纯是因为我的头衔里有DevOps。'
- en: '**Viktor Farcic**: I can tell you if I named my books *Operations Toolkit*,
    instead of *DevOps Toolkit*, it would just sell seven copies, and six of those
    seven copies would be bought by my relatives. But let''s shift focus onto containers.
    I don''t ever recall seeing something becoming so popular so quickly, so I''m
    left wondering why is that?'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我可以告诉你，如果我把我的书命名为*Operations Toolkit*而不是*DevOps Toolkit*，它可能只会卖出七本，而其中六本会被我的亲戚买走。但让我们把焦点转到容器上。我不记得曾经有什么东西能这么快地变得如此流行，所以我在想，为什么会这样呢？'
- en: '**Bret Fisher**: Whenever I do a Docker 101 talk, I talk about how we''ve been
    around in IT for a long time, and that, in the past, we never got paid for it,
    but actually we were still doing it. We were doing it just for fun, but now we
    get paid to do it for fun. I was in technology back when we took out the mainframe
    and put in PCs, which were actually just DOS operating systems. We also had to
    actually put mice on the PCs because they were going to get Windows, which is
    something we then had to install on the machines—machines that didn''t have the
    internet. Then, eventually, we finally got the TCP/IP suite of communication protocols
    and were able to simply plug up all of the computers to the internet.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**：每当我做Docker 101的讲座时，我都会讲到我们在IT行业工作了很长时间，过去，我们做这些事情并没有得到报酬，但实际上我们还是在做。我们是为了好玩而做的，但现在我们能因为好玩而拿到报酬。我那时在技术行业，还是在我们拆掉主机机房，换成PC的时候，而这些PC实际上只是运行DOS操作系统。我们还必须在PC上装上鼠标，因为它们要装Windows，而我们必须在没有互联网的机器上安装Windows。然后，最终我们终于得到了TCP/IP协议套件，并能够将所有计算机连接到互联网。'
- en: Then, after the internet, we had virtualization, and during those times, I was
    the guy in the big company with half a million employees that was walking around
    saying, "Virtualization is the future." Meanwhile, everyone else was saying, "You're
    stupid, you're crazy, the servers will run slow, we're never going to be able
    to build security." It's the same arguments we hear today for containers, and
    last year, for the cloud. Now, with the cloud, it's basically all about putting
    our data on the internet. You're taking your data out of the data center, putting
    it on the internet, and letting someone else take care of it. Even though that
    was 11 years ago when Amazon's AWS service launched, it's still happening today.
    Even though we were all like, "Oh, everybody's going to be there." The truth is,
    not everyone is there yet.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在互联网之后，我们有了虚拟化。在那些日子里，我是那家有五十万员工的大公司里，四处走动的人，告诉大家：“虚拟化是未来。”与此同时，其他人都在说：“你傻，你疯了，服务器会变慢，我们永远无法构建安全性。”这些论点，今天我们听到的关于容器的论点，去年我们听到的关于云计算的论点，都是一样的。现在，云计算基本上就是将我们的数据放到互联网。你把数据从数据中心拿出来，放到互联网，并让别人来管理它。尽管那是在亚马逊AWS服务发布的11年前，但今天仍然在发生。即使我们都曾说过：“哦，每个人都会去的。”但事实是，并不是每个人现在都在那里。
- en: '**Viktor Farcic**: Out of interest, what would you say is today''s version
    of the cloud?'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：出于兴趣，你会说现在的云计算是什么版本？'
- en: '**Bret Fisher**: I would say containers. It was only three years ago when I
    changed my entire career to focus on containers. Why? Because I''ve been a part
    of enough of these transitions to know that this is the next one. If you look
    at these waves, every single one of them—from mainframe to PC, PC to the internet,
    PC to virtualization, virtualization to cloud, and now containers—seems to happen
    faster than the one before it. At least, that''s my theory.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**：我会说是容器。仅仅三年前，我就转行专注于容器。为什么？因为我参与了足够多的这种技术转型，知道容器是下一个技术。如果你看这些浪潮，每一波—从大型主机到个人电脑，从个人电脑到互联网，从个人电脑到虚拟化，从虚拟化到云计算，现在是容器—每一波似乎都比前一波来得更快。至少，这是我的理论。'
- en: Virtualization took a decade, but it was taken on pretty quickly. But moving
    to the cloud for a lot of companies happened much quicker than virtualization.
    Today, we're seeing containers having a much faster adoption rate, at least when
    compared to virtualization. I think that's the nature of where we're at in the
    industry, and so whatever the next thing is going to be, it's going to happen
    faster than containers.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化花了十年时间，但它被快速接受了。但是对于许多公司而言，迁移到云计算的速度比虚拟化要快得多。今天，我们看到容器的采用速度比虚拟化快得多，至少与虚拟化相比。我认为这就是我们行业所处的状态，所以无论下一个技术是什么，它将比容器出现得更快。
- en: '**Viktor Farcic**: And when I think about it, it''s probably going to last
    a shorter amount of time as well.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：当我想想这件事时，它可能持续的时间也会更短。'
- en: '**Bret Fisher**: It might just as well last that long. But here''s the thing:
    it might be more volatile, where we''ll eventually get containers that will be
    so good that we won''t even need most virtualization. Maybe in the future, virtualization
    will become unnecessary.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**：这可能会持续那么长时间。但问题是：这可能会更不稳定，最终我们会得到如此优秀的容器，以至于我们根本不再需要大多数虚拟化技术。也许未来虚拟化将变得不再必要。'
- en: '**Viktor Farcic**: But then, if it''s happening so fast, how can humanity keep
    up with that?'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：但是，如果变化这么快，人类如何跟得上呢？'
- en: '**Bret Fisher**: It doesn''t.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**：不能。'
- en: '**Viktor Farcic**: Each time I read about the next release of something—say,
    Docker—I feel like I''m in a position where I haven''t even finished with the
    last one, and yet there''s already a new one to learn, and I end up having no
    idea what''s going on.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：每次我读到某个新版本的东西——比如说Docker——我感觉自己还没有完成上一个版本的学习，而新的版本又出来了，结果我完全不知道发生了什么。'
- en: Skipping a generation – a good or bad idea?
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跳过一个世代——这是好主意还是坏主意？
- en: '**Bret Fisher**: Exactly, so you''ll have companies that skip a generation.
    For example, company X might now be doing virtualization. They didn''t really
    do cloud, so they skipped it, but now they''re going to do containers instead
    of just virtualization in the cloud.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**：没错，所以有些公司会跳过一个世代。例如，X公司现在可能正在做虚拟化，他们其实并没有做过云计算，所以跳过了这一部分，但现在他们将转向使用容器，而不仅仅是在云中做虚拟化。'
- en: '**Viktor Farcic**: But can you do that? Is jumping a generation a good idea?'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：但你能做到吗？跳过一个世代是个好主意吗？'
- en: '**Bret Fisher**: Not without your pain increasing. The pain increases because
    you''re part of a team, and organizational learning means that we''ve both got
    to know that you''re never a silo of knowledge. The entire team has to learn together
    and so, even if you were to hire a container expert, in a good-sized organization,
    it''s going to take them years to get the entire team up to speed on all of that
    tech.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**：没有你的痛苦增加是不可能的。痛苦增加是因为你是团队的一部分，组织学习意味着我们都要知道你永远不是一个知识孤岛。整个团队必须一起学习，因此，即使你雇佣了一位容器专家，在一个良好的规模组织中，还是需要几年的时间才能让整个团队掌握所有这些技术。'
- en: If the companies aren't doing cloud yet and you're going to take them to the
    cloud, but now they're also going to do containers too, that's going to suck.
    They're probably going to make more mistakes, but it's still going to get there,
    eventually. You're just going to incur more pain and more suffering. Laura Frank,
    the Director of Engineering at CloudBees, actually has a new term for this. She
    calls it the laggard tax.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些公司还没有做云计算，而你要把它们带到云上，但现在它们也要做容器，那会很糟糕。它们可能会犯更多错误，但最终还是会做到的。你只是会经历更多的痛苦和折磨。CloudBees的工程总监Laura
    Frank其实为此创造了一个新术语，她称之为“滞后税”。
- en: '"We still have people using mainframes, and we still have people that are not
    fully virtualized. There are still companies out there running 10-year-old servers
    that were never virtualized."'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: “我们仍然有一些人使用大型机，仍然有一些人没有完全虚拟化。还有一些公司在运行10年前的服务器，这些服务器从未被虚拟化。”
- en: —Bret Fisher
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: —Bret Fisher
- en: If you've ever seen that bell chart diagram where you have your people up at
    the front when the technology first starts, then there's also the people at the
    very beginning of it and, after that, the majority of us, and finally, there are
    the laggards. Laura describes laggard tax as being if you're so slow to adopt
    the technology—let's say, as in our case, the cloud—it's actually going to cost
    you more in the long term because you might have to completely skip a generation
    of technology. But the thing is, none of these are absolutes. We still have people
    using mainframes, and we still have people that are not fully virtualized. There
    are still companies out there running 10-year-old servers that were never virtualized.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经看到过那张钟形图，图中显示了技术刚开始时，最前面的是那些最早开始使用的人，然后是处于技术起步阶段的人，接下来是大多数人，最后是那些滞后者。Laura
    描述的滞后税就是，如果你在采用技术上非常缓慢——比如我们这儿的云计算——实际上从长远来看会让你付出更高的代价，因为你可能不得不完全跳过一个技术代际。然而，问题是，这些都不是绝对的。我们仍然有一些人使用大型机，仍然有一些人没有完全虚拟化。还有一些公司在运行10年前的服务器，这些服务器从未被虚拟化。
- en: '**Viktor Farcic**: I know people, and I''m not joking, who are still graduating
    in the COBOL language.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我认识一些人，我不是开玩笑，他们仍然在学习COBOL语言。'
- en: '**Bret Fisher**: Even looking forward a decade, there will still be people
    that are not yet doing containers, and instead only doing virtualization or something
    along those lines.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**：即使展望十年后，仍然会有一些人没有使用容器，而只是做虚拟化或类似的事情。'
- en: There was a good session at GOTO Chicago a couple of weeks ago where the keynoter
    talked about how 30 years ago in technology, life was great because you could
    be someone who, if you were fully invested in the community, knew a little bit
    about most things. You could know a good amount about most languages and most
    technologies. But what stood out was how he said that now no one knows anything
    about anything. We all have just a fraction of the knowledge available about current
    technology. Even in a team, you probably don't even know a tenth of the languages
    out there. How can we possibly make educated decisions fully aware of everything
    that's available to us? The answer is just we don't.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 几周前，在GOTO芝加哥大会上有一场很不错的演讲，演讲者谈到了30年前的技术生活是多么美好，因为那时如果你全身心投入社区，你就能对大多数事情都有一些了解。你可能会对大多数编程语言和技术有所掌握。但他特别提到，现在没有人对任何事情了解。我们每个人对于当前技术所掌握的知识都只是一小部分。即使是在一个团队中，你可能也根本不知道现有编程语言的十分之一。我们怎么可能做出完全了解所有可用技术的明智决策呢？答案就是，我们做不到。
- en: '"No one knows anything about anything."'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: “没有人对任何事情了解。”
- en: —Bret Fisher
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: —Bret Fisher
- en: As an industry, we're stumbling through the dark, only engaging with whatever
    works for us right here and now. There's no right or wrong until you've been hacked
    and then you're wrong. The number one way to fail in this industry is to just
    wait until your product has been hacked, and then suddenly everybody will blame
    you for everything at that point. But until you've been hacked, as long as it
    works, it doesn't really matter.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个行业，我们在黑暗中摸索，只关注眼前对我们有效的东西。在你被黑客攻击之前，根本没有对错，直到你被黑了，你才会发现自己错了。这个行业中失败的首要原因就是等到你的产品被黑了，然后突然每个人都会把所有问题都归咎于你。但只要你没有被黑，只要它能正常工作，其实也没什么大问题。
- en: I believe it was back at GOTO where I got on a rant about how you walk in the
    average company—and by "average", I don't mean the Google- or Netflix-type companies—and
    you start critiquing all of the different parts of their technology stack. There's
    going to be at least a half a dozen things at that company that would be front-page-worthy.
    Company A still stores their passwords in a spreadsheet, while company B doesn't
    even monitor their most critical DNS servers. Or company C has had the same root
    password for their servers for the past five years, while in that time period,
    30 people have been fired from the company, and yet they've never changed the
    password. You're going to find these issues in every company. If it's all that
    mixed up, if it's all horrible, or if it's simply just luck that we're not all
    doomed to crash and fail, then I think, at the end of the day, all that really
    matters is getting stuff to work and doing the best you can at that moment. It's
    never going to be perfect, and it's never going to be great.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我记得在GOTO大会上，我曾激烈批评过，如何走进一家普通公司——我这里所说的“普通”并不是指谷歌或Netflix那类公司——然后开始批判他们技术栈中的各个部分。在那家公司里，至少会有六个方面值得登上头条。公司A仍然把密码存储在电子表格里，而公司B甚至没有监控他们最关键的DNS服务器。或者公司C的服务器根密码已经用了五年，期间已经有30人离职，但密码始终没有改变。你会在每个公司中发现这些问题。如果一切都这么混乱，甚至一切都很糟糕，或者仅仅是幸运，我们才没有完全崩溃失败，那么我认为，最终真正重要的是让一切正常运作，并在那个时刻做到最好。它永远不会完美，也永远不会出色。
- en: Using containers
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用容器
- en: Going back to your earlier question though, I think that the definition of DevOps
    itself inherently means compromise. The operations and developers at any company
    have to compromise to get the stuff to work together and to go faster. Maybe that's
    compromising on security or on testing. Maybe our testing lifecycle isn't four
    weeks' worth of user testing anymore; maybe it's just four days before we go to
    production? But in a lot of cases, we can't just speed things up without making
    some sort of eventual compromise that every party involved in would be okay with.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 回到你之前的问题，我认为DevOps的定义本身就意味着妥协。任何公司的运维和开发人员都必须做出妥协，才能让系统协同工作并加速进展。也许在安全性或测试方面做了妥协。也许我们的测试周期不再是四周的用户测试；也许只是在上线前的四天？但在很多情况下，我们不能仅仅加速进程，而不做出某种妥协，而这种妥协能让所有相关方都能接受。
- en: '**Viktor Farcic**: Let''s talk more about you, Bret. From my understanding,
    most of the time, you''re helping companies or people adapt to using containers.
    Do you think we should be shipping everything in containers? As someone who''s
    so invested in the concept, do you ever sit back and say that, actually, no, this
    stays as it is—we''re not going to use containers?'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：我们再多谈谈你，布雷特。从我的理解来看，大多数时候，你是在帮助公司或个人适应使用容器。你认为我们应该将所有东西都打包成容器吗？作为一个如此投入这个概念的人，你有没有坐下来思考过，实际上不，这些东西保持原样——我们不打算使用容器？'
- en: '**Bret Fisher**: Obviously, we can say that, technically, everything can run
    in a container. The real question that needs to be asked is about how much pain
    and suffering you want to go through in order to make your "thing" run in a container.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**布雷特·费舍尔**：显然，我们可以说，技术上讲，一切都可以在容器中运行。真正需要问的问题是，你愿意经历多少痛苦和折磨，才能让你的“东西”在容器中运行。'
- en: In my own experience, if I'm starting a project with a client, I'll look at
    whatever tool or technology they're going to run, and together, we'll try to imagine
    what the end goal is. If that's in a container, how will that make their product
    or service better? If their goal is a database and we only update that database's
    engine once every six months, they don't need to patch it every month. They're
    not moving it around in the environment, it's already on a server with redundant
    power supplies, redundant memory, redundant switching, and redundant NICs, which
    is a lot of data centers.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在我自己的经验中，如果我开始一个与客户的项目，我会先了解他们将要使用的工具或技术，然后我们一起尝试想象最终目标是什么。如果这是在容器中，这将如何使他们的产品或服务变得更好？如果他们的目标是数据库，而我们每六个月才更新一次该数据库的引擎，他们就不需要每月修补它。它们不会在环境中移动，已经在一个拥有冗余电源、冗余内存、冗余交换机和冗余网卡的服务器上运行，这就是许多数据中心的情况。
- en: '"I will always prefer the thing that they''re going to update every day/week
    versus the thing that''s just going to sit there reliably and never change for
    months at a time."'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: “我总是倾向于选择那些他们每天/每周都会更新的东西，而不是那些会一直稳定存在，几个月都不变的东西。”
- en: —Bret Fisher
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: —Bret Fisher
- en: A lot of private data centers are still very hardware redundancy focused, unlike
    the cloud where it's the complete opposite. For me, I will always prefer the thing
    that they're going to update every day/week versus the thing that's just going
    to sit there reliably and never change for months at a time. Usually, that means
    your web APIs or your new worker jobs for your PHP workers on the backend of your
    system are constantly changing; those are always the things that I try to get
    them to do first. Then, by the time we get to the things that require really big
    and complicated databases, the companies are usually out of money, and so we won't
    ever do those things, and they'll stay where they are.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 许多私有数据中心仍然非常注重硬件冗余，这与云计算恰恰相反。对我来说，我总是倾向于选择那些他们每天/每周都会更新的东西，而不是那些会一直稳定存在，几个月都不变的东西。通常，这意味着你的网站API或你的PHP工作者的后台新任务会不断变化；这些都是我尝试让他们首先做的事情。然后，等到我们要处理那些需要大规模且复杂数据库的工作时，通常公司已经没有钱了，所以我们也不会做这些事情，它们就会停留在原地。
- en: A lot of companies, especially if it's a new product or app, will containerize
    the database to begin with. But I'm always telling them, "Don't make this database
    the first thing you put in a container!" Anything with persistent data is always
    going to be harder no matter what you do, whether it's in or out of a container,
    so I would try to avoid that at first. But if it's brand new, and if I can give
    them a Docker file that they can put in a container—even if it's not in orchestration,
    it's just on a server in a container and that's the only thing on that server,
    and it never moves—then that's fine. I'll be happy. Because, at least, at that
    point, it's in a container and they're not writing shell scripts to do `apt-get`
    installs of MySQL.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 很多公司，特别是当它是一个新产品或应用时，通常会首先将数据库容器化。但我总是告诉他们，“不要把数据库作为第一个放入容器的东西！”任何持久性数据，无论是放在容器内还是外，都会变得更加复杂，所以我建议一开始尽量避免这样做。但如果是全新的项目，如果我能给他们提供一个Docker文件，让他们将其放入容器中——即使它不在编排中，它也只是放在服务器上的一个容器里，而且服务器上只有这个容器，且永远不会移动——那也可以。我会很高兴。因为，至少在那时，它已经在容器中，他们就不会再写Shell脚本去执行`apt-get`安装MySQL了。
- en: '**Viktor Farcic**: Let''s say somebody doesn''t know anything about containers.
    Would you recommend still teaching them to start from the beginning, in a similar
    way to what we experienced with containers four years ago? Let''s get them started
    with containers, then move onto schedulers, or should they just jump straight
    into schedulers? Where should the newbie go today?'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：假设有人对容器一无所知，你会建议他们从头开始学习，像我们四年前接触容器时那样吗？我们先让他们从容器入手，再转到调度器，还是直接跳进调度器的内容？现在的新人该往哪里去？'
- en: '**Bret Fisher**: I would always want to teach them the localhost. I feel that
    maybe because it''s universal, even if you''re not a developer, and you''re just
    a sysadmin, showing how your Mac/Windows machine can run an Ubuntu container or
    a CentOS container and then having all of those tools right there in front of
    you so that you don''t have to figure out how to put curl on your Windows desktop.
    I feel like that is valuable for everybody regardless of your background.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**布雷特·费舍尔**：我总是想教他们localhost。我觉得也许因为它是通用的，即使你不是开发人员，只是一个系统管理员，展示你的Mac/Windows机器如何运行Ubuntu容器或CentOS容器，然后将所有工具都放在你面前，这样你就不必再为如何在Windows桌面上安装curl而烦恼。我觉得不论你的背景如何，这对每个人都有价值。'
- en: Maybe I'm a traditionalist, and I don't want to teach you an orchestrator because
    I feel that sometimes, by teaching orchestration first, it would be like telling
    you the solution before you even know the problem. To me, it's like if you're
    a Windows admin in a data center. Traditionally, you would use something like
    System Center for Microsoft or some big enterprisey server management tool, but
    if you're new to server admin, showing you that tool at the start would be confusing.
    To the newbie, it would seem very complex, because the newbie doesn't even know
    how to run one server much less a thousand servers. If I'm teaching you that tool
    and you don't even know how to manage one or two servers, I feel like the tool
    that's going to help you to manage a thousand servers isn't going to seem very
    useful.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 也许我是个传统主义者，我不想教你一个编排工具，因为我觉得有时候，通过首先教授编排工具，就像是在你甚至不知道问题是什么的时候就告诉你解决方案。对我来说，就像你是一个数据中心的Windows管理员。传统上，你会使用像System
    Center这样的微软工具，或者一些大型企业级的服务器管理工具，但如果你是服务器管理的新手，刚开始就向你展示这个工具会让人感到困惑。对新手来说，它看起来非常复杂，因为新手甚至不知道如何管理一台服务器，更不用说一千台服务器了。如果我在教你这个工具，而你连一两台服务器都不知道怎么管理，我觉得这个工具对你管理一千台服务器似乎没什么用处。
- en: '"Maybe I''m a traditionalist, and I don''t want to teach you an orchestrator
    because I feel that sometimes, by teaching orchestration first, it would be like
    telling you the solution before you even know the problem."'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '"也许我是个传统主义者，我不想教你一个编排工具，因为我觉得有时候，通过首先教授编排工具，就像是在你甚至不知道问题是什么的时候就告诉你解决方案。"'
- en: —Bret Fisher
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: —布雷特·费舍尔
- en: '**Viktor Farcic**: It''s kind of a doubt that I have. I''ve been in a number
    of situations where I explain containers and then it turns out that I''m explaining
    it to somebody who is very new to IT in general. "What''s the benefit of me explaining
    this to you?" I feel like asking them, "How can you see the benefit if you haven''t
    experienced the pain first?"'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：我有一个疑问。我曾经遇到过许多情况，向别人解释容器技术，结果发现我是在向一些对IT非常陌生的人解释。"我向你解释这些有什么好处呢？"我觉得我想问他们，"如果你没有先经历过痛苦，怎么能看出这些的好处呢？"'
- en: '**Bret Fisher**: That''s tough, but it''s possible. If you go back to 2013,
    you''ll remember that Solomon Hyke, who founded Docker, talked about why we all
    teach Docker. He talked about the matrix from hell with all of the little question
    marks in the boxes, and he also explained the matrix of hell and why we have all
    of these systems and patches for various things.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**布雷特·费舍尔**：这确实很难，但也是可能的。如果你回到2013年，你会记得Docker的创始人所罗门·海克曾谈到过为什么我们都在教授Docker。他提到了地狱矩阵，里面有许多小问号框框，他还解释了为什么我们有这些系统和修补程序来应对各种问题。'
- en: 'Let''s say you want to install a Ruby app on my local machine and my development
    team has a mixture of both Windows, Mac, and Linux machines. But then, I also
    have servers that are Linux, and some of those servers are in the cloud running
    a different distribution of Linux, and I have a different package manager. Now
    I have all of these different environments. My goal is to install the same thing
    on all of them and to ensure it works exactly the same way when you hear someone
    describe that. Hopefully, this will make sure that you realize you have two options.
    You can think: "OK, that sounds very painful," or equally, "I could just do this
    one thing and keep doing it over and over." So maybe, if you''re brand new, you
    should go through that whole "why Docker?" thing.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想在我的本地机器上安装一个 Ruby 应用，而我的开发团队有不同的操作系统，包括 Windows、Mac 和 Linux。然后，我也有一些 Linux
    服务器，其中一些是在云上运行的不同 Linux 发行版，而且我使用的是不同的包管理器。现在，我有了这些不同的环境。我的目标是在所有这些环境中安装相同的东西，并确保它们的运行方式完全一致。希望这能让你意识到你有两个选择。你可以想：“好吧，这听起来很痛苦，”或者同样的，“我可以只做一件事，并不断重复。”所以，也许如果你是全新手，应该了解一下“为什么选择
    Docker？”的整个问题。
- en: '**Viktor Farcic**: Yeah, shouldn''t that be included in courses? That''s kind
    of like saying: "I''m going to make you do everything without Docker to realize
    how beneficial Docker is, or even containers in general."'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：是的，这不应该包含在课程中吗？这有点像是在说：“我要让你在没有 Docker 的情况下完成所有任务，以便你意识到
    Docker 或者容器的一般好处。”'
- en: '**Bret Fisher**: Exactly, it''s like saying that, first, we''re going to do
    this on Ubuntu. We''re going to install your Node.js app on Ubuntu, and then we''re
    going to use Node v10, which means you can''t use the latest `apt-get`. Sorry,
    but you''re going to have to go get something else. You have to build it yourself,
    and then we''re going to make you do it on CentOS. After that, we''re going to
    make you do it on Red Hat, Enterprise, and Linux. Oh, and by the way, we''re also
    going to make you do it all on Windows. But we''re not done yet. After all four
    of those, we''re now going to do it on Docker on those same four systems. That''s
    going to waste a lot of their time. And the simple fact is, they may not want
    to do that at all. But maybe you would just be good enough to show an installation
    document that says: This is what you would have to do. You just show them these
    12 pages of documentation for how to do this, and maybe that''s enough.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**：没错，这就像是先说：“我们将首先在 Ubuntu 上做这件事。我们将在 Ubuntu 上安装你的 Node.js 应用，然后我们将使用
    Node v10，这意味着你不能使用最新的 `apt-get`。抱歉，你得去找其他东西。你必须自己构建它，然后我们会让你在 CentOS 上做这件事。之后，我们会让你在
    Red Hat 企业版 Linux 上做这件事。哦，顺便说一下，我们还会让你在 Windows 上做这一切。但我们还没完呢。在这四个系统上做完之后，我们现在会在
    Docker 上做这件事。这会浪费他们很多时间。简单的事实是，他们可能根本不想这么做。但也许你只需要做一个安装文档，说明：这是你需要做的事情。你只需向他们展示这
    12 页的文档，告诉他们如何做，也许这就够了。”'
- en: The future of the OS
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作系统的未来
- en: '**Viktor Farcic**: I have the impression that many OSes, apart from being Docker
    containers, made us question quite a few things, such as do we even need Ubuntu
    and Red Hat?'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我有一种印象，除了 Docker 容器之外，很多操作系统让我们质疑了许多事情，比如我们是否真的需要 Ubuntu
    和 Red Hat？'
- en: '**Bret Fisher**: That''s the distribution issue. The Linux distributions don''t
    want to hear the fact that they''re becoming less relevant, but the truth is that
    they are becoming less relevant. I have no doubt that several of them will succeed
    in making themselves more relevant in the container space, and that they''ll come
    up with tools that will make it worth me using Ubuntu to run containers instead
    of choosing something else. To an extent, it''s already true today because I would
    choose one over the other simply because it comes with a more modern kernel that''s
    going to work better with Docker. If you''ve got a five-year-old kernel that''s
    still on the 3 series, I know I''m not going to prefer you just because I now
    have to go and update the kernel before I even want to put Docker on it. So that''s
    step one.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**：这就是分发问题。Linux 发行版不想听到它们变得不再重要的事实，但事实是它们确实正在变得不那么重要。我毫不怀疑它们中的几个将成功地让自己在容器领域变得更加相关，并且它们会推出一些工具，让我觉得使用
    Ubuntu 来运行容器比选择其他东西更有价值。某种程度上，今天这已经是事实，因为我会选择其中一个而不是另一个，仅仅是因为它带有一个更现代的内核，能够更好地与
    Docker 配合。如果你有一个五年前的内核，还是在 3 系列上，我知道我不会因为你现在让我更新内核，才开始安装 Docker，而偏爱你。所以这就是第一步。'
- en: '"The Linux distributions don''t want to hear the fact that they''re becoming
    less relevant, but the truth is that they are becoming less relevant."'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: “Linux发行版不愿听到它们变得越来越不重要的事实，但事实是它们确实变得越来越不重要。”
- en: —Bret Fisher
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: —布雷特·费舍尔
- en: '**Viktor Farcic**: Back to your question about learning the basics first, and
    learning the problem before you can learn the solution. I''ve been saying this
    about things such as TCP/IP, for example. You''ve been around long enough to know
    that when we got started, we were reading a book literally called *TCP/IP*.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：回到你说的先学基础，再学问题再学解决方案的观点。我一直在说像TCP/IP这样的东西，你待得够久就知道，当我们开始时，我们读的书就是一本叫做*TCP/IP*的书。'
- en: '**Bret Fisher**: I''ve actually been trying to suppress that memory, and you''ve
    just brought it back. Thanks!'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**布雷特·费舍尔**：我实际上一直在试图压抑那个记忆，而你刚刚把它带了回来。谢谢！'
- en: '**Viktor Farcic**: I remember that the book was actually called *TCP/IP Unleashed*,
    and it was either the 4th or 5th edition because they just kept re-releasing the
    books because that''s how we all learned before the age of Google. This meant
    that, for years and years, I kept thinking I was lucky to build networks for the
    first time. We were switching mainly from IPX to TCP/IP, Thicknet and Thinnet,
    and all of these different protocols and standards to Ethernet. Because of that,
    I had to learn about TCP packet size, headers, different protocols, and all of
    that stuff.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：我记得那本书实际上叫做*TCP/IP Unleashed*，而且是第4版或第5版，因为他们总是不断重新发布书籍，这就是我们在谷歌时代之前学习的方式。这意味着，多年来，我一直认为自己很幸运，第一次构建网络。我们主要是从IPX切换到TCP/IP、厚网和薄网，以及所有这些不同的协议和标准到以太网。因此，我必须学习TCP数据包大小、头部、不同的协议，等等。'
- en: '**Bret Fisher**: But today, the issue is that you can ask anyone younger than
    30 years old to break down what the OSI layers are and they''re probably not going
    to know any of it, yet they can still get employed and do the work.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**布雷特·费舍尔**：但现在的问题是，你可以问任何30岁以下的人，要求他们讲解OSI层次结构是什么，他们可能什么都不知道，但他们仍然可以找到工作并做得很好。'
- en: '**Viktor Farcic**: Which is a good thing.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：这倒是件好事。'
- en: '**Bret Fisher**: It''s both a good thing and a bad thing at the same time.
    I was convinced for the longest time that, eventually, we''re going to have this
    world where very few people even understand how networks work. It''s all going
    to start to just crumble underneath the weight of the lack of knowledge. In your
    team, when things start to go wrong, you''re thinking we don''t know how any of
    this other stuff that we use works because it''s always just worked.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**布雷特·费舍尔**：这既是好事，也是坏事。我曾经长时间坚信，最终，我们将拥有这样一个世界，只有很少的人甚至理解网络是如何工作的。一切将开始在缺乏知识的重压下崩溃。在你的团队中，当事情开始出错时，你会觉得我们根本不知道我们使用的其他东西是如何工作的，因为它一直都在正常运作。'
- en: It's like public infrastructure. How many of us know how to fix an electrical
    grid? None of us do. Yet, when it breaks, we're all wishing we really could help.
    But we haven't yet had a problem, so I don't know. Maybe it's just not a big issue.
    When I interview people though, I still ask them questions like, "Which layer
    of the OSI stack does a switch operate on?" or "Which one does a router operate?"
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这就像公共基础设施。我们中有多少人知道如何修复电力网？没有人知道。然而，当它坏了，我们都希望我们真的能帮忙。但我们还没有遇到问题，所以我不知道，也许这根本不是大问题。不过，当我面试人时，我仍然会问他们一些问题，比如，“交换机在哪一层操作？”或“路由器在哪一层操作？”
- en: '**Viktor Farcic**: Do you ever get the answer?'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：你有没有得到过答案？'
- en: '**Bret Fisher**: Sometimes, but it really depends on who you ask. If they''re
    going to be a developer, they''re not going to care about that. But if I''m hiring
    a sysadmin or something, then they should. They all have to really think about
    it, because to me, it''s the foundation of how everything talks to everything
    else. If you don''t even know the basics of that, how could you possibly troubleshoot
    a computer even in Docker?'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**布雷特·费舍尔**：有时是这样，但这真的取决于你问谁。如果他们要成为开发人员，他们不会在乎这些。但是如果我要雇佣一个系统管理员之类的人员，那么他们就应该了解这些。他们都必须认真思考，因为在我看来，这就是一切事物如何相互通信的基础。如果你连基本的东西都不了解，那你怎么可能解决一个计算机问题，哪怕是在Docker中？'
- en: We're creating all of these virtual networks in Docker, but then the minute
    you have an IP address conflict, suddenly you must start caring about subnets
    and subnet masking.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Docker中创建了所有这些虚拟网络，但一旦你遇到IP地址冲突，突然你必须开始关注子网和子网掩码。
- en: '**Viktor Farcic**: It opens an issue.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：这揭示了一个问题。'
- en: '**Bret Fisher**: Yes, which is for somebody else to solve.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**：是的，那就得让别人来解决了。'
- en: '**Viktor Farcic**: I have a feeling that this is actually where we are moving
    in the industry. I see the same thing with programming. Nobody knows how to program
    anymore, and instead, we all just know how to use the libraries to do stuff.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我有一种感觉，实际上这正是我们在行业中正在前进的方向。我在编程中也看到了类似的情况。现在几乎没有人知道如何编程了，我们都只知道如何使用库来完成任务。'
- en: '**Bret Fisher**: That''s a good point. If you''re doing nothing but libraries,
    and you had to write it all by yourself, how would you do it? It sounds like we
    both learned originally by copying code out of books, which is how I learned BASIC.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**：这是个很好的观点。如果你做的只是使用库，而如果你必须完全自己编写代码，你会怎么做呢？听起来我们都一开始是通过抄写书中的代码来学习的，我就是这样学会BASIC的。'
- en: '**Viktor Farcic**: I don''t know whether it was happening in your part of the
    world, but when I was a kid, I would get those computer magazines that featured
    around four to five pages of code that you would read and write.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我不知道这在你所在的地区是否发生过，但当我还是个孩子的时候，我会拿到一些计算机杂志，杂志上大约有四到五页代码，你需要阅读并写下来。'
- en: '**Bret Fisher**: I don''t remember the name of the magazines, but I do remember
    my dad bringing home this huge 3-inch book, and within it, there would be five
    or six programs. What I do remember is spending an entire weekend never going
    outside, just sitting at the computer typing from the book, line for line, just
    to make an app or game.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**：我不记得杂志的名字了，但我记得爸爸曾带回家一本厚厚的3英寸书籍，里面有五六个程序。我记得的是，整个周末我都没有出门，一直坐在计算机前，从书上逐行输入代码，制作应用程序或游戏。'
- en: '**Viktor Farcic**: Let me guess, it''s not a strongly typed language. You needed
    to finish it before you could discover if something was wrong?'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：让我猜一下，它不是强类型语言。你需要完成它才能发现是否有问题吗？'
- en: '**Bret Fisher**: Yes! Because if it didn''t work, you had to go through line
    by line, all 600 of them. This was done on the Tandy color computer, TRS-80\.
    The biggest problem was that the saving device was a tape recorder. Because of
    this, you had to plug in an analog line, which would make a sound like a modem
    to record to the tape. The only way to know if your save worked was to turn the
    computer off and then back on, play back the tape and then hope your program ran.
    If it didn''t run, you had to type all 600 lines of it all over again.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**：是的！因为如果代码不能运行，你必须逐行检查，所有600行代码。这个过程是在Tandy彩色计算机上完成的，型号是TRS-80。最大的问题是保存设备是磁带录音机。因此，你必须插入一个模拟线路，这个线路发出的声音就像调制解调器一样，用来将数据录入磁带。唯一知道保存是否成功的方法就是关掉计算机然后再打开，播放磁带，然后希望程序能运行。如果不能运行，你只能重新输入所有600行代码。'
- en: I just remember the weekend that I left the computer on overnight because I
    wasn't finished. I recorded it to tape on Sunday, I played it back, and it didn't
    work. I had the sound up too loud or something, and there was distortion. So,
    I had to retype the whole program just to play it again, which was a horrible
    way to learn.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我记得有一个周末，我把计算机开着一整晚，因为我还没完成。星期天我把它录到磁带上，播放时却没有成功。我可能是把声音调得太大了，或者有其他问题，造成了失真。所以，我只好重新输入整个程序再试一遍，这是一种非常痛苦的学习方式。
- en: '**Viktor Farcic**: I found myself telling the stories in terms of saying: "You
    kids have no idea what you''re doing." But then I find myself thinking I sound
    like my mother saying this new generation has no idea what to do.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我发现自己经常讲这样的话：“你们这些孩子根本不知道自己在做什么。”但随后我又发现自己在想，我听起来像是我妈妈说新一代根本不知道该做什么一样。'
- en: '**Bret Fisher**: Yeah, your story is boring, but you''re exactly right, and
    that''s why this story is boring. Because everybody''s first website is very exciting,
    no matter how old you are. That first time you make a program or anything you''ve
    coded work, it''s always super exciting to you, and it''s always incredibly boring
    to everyone else.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**：是的，你的故事很无聊，但你完全正确，这也是为什么这个故事很无聊。因为每个人的第一个网站都很激动人心，不管你多大年纪。当你第一次让程序或你写的任何东西成功运行时，那总是让你非常激动，而对别人来说却是非常无聊的。'
- en: Looking into the future
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展望未来
- en: '**Viktor Farcic**: If you had a crystal ball, where would you predict we''re
    going to be in the next year, next decade, or even further out? Obviously, now
    the leading-edge tech is containers, but what''s coming after?'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：如果你有一颗水晶球，你会预测我们在接下来的一年、十年，甚至更远的未来会去哪里？显然，现在前沿技术是容器技术，但之后会有什么呢？'
- en: '**Bret Fisher**: I think it''s going to take us a long time before orchestration
    is normal.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**: 我认为在编排变得普遍之前，我们需要很长时间。'
- en: '**Viktor Farcic**: I mean, with that, we''re just starting.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**: 我的意思是，我们才刚刚开始。'
- en: '**Bret Fisher**: It''s a lot harder now than it''s going to be, and it has
    to get a lot easier before most people are going to use it. I''m really a fan
    of the whole one container per VM concept, such as Clear Containers with Linux.
    VMware is doing a little bit of it, Microsoft''s doing it, and Docker''s doing
    it with the LinuxKit. I don''t necessarily know if we''re going to end up with
    a world where it''s a lot of just one container per VM or if it''s going to be
    this world of mini containers in a VM. But I think locked-down apps, whatever
    the future of containers is, will be the norm.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**: 现在比将来要难得多，必须让它变得更简单，才能让大多数人开始使用它。我真的很喜欢每个虚拟机一个容器的概念，比如 Linux
    的 Clear Containers。VMware 做了一些，微软也在做，Docker 也在用 LinuxKit 做。我不一定知道我们是否最终会进入一个世界，那里只有每个虚拟机一个容器，或者是一个虚拟机中有许多小型容器的世界。但我认为，锁定的应用，无论未来容器是什么样子，都将成为常态。'
- en: '"I don''t know what the next thing is, and I don''t have the pulse on what''s
    going to replace containers. But I think it''s going to take us a long time to
    come up with a new concept at the OS level."'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '"我不知道接下来会是什么，也不了解什么会取代容器。但我认为我们需要很长时间才能在操作系统层面上提出一个新概念。"'
- en: —Bret Fisher
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: —Bret Fisher
- en: It'll be weird in 10 years for you to be a software company that sells software
    that doesn't ship in some form of container image. I mean, it's kind of weird
    now, depending on where you are in the industry. It'd be very normal to download
    images. It wouldn't surprise me if we somehow got to the point where we had a
    bunch of package managers that were downloading. Right now, you have to use `docker
    pull` to get a Docker image, but I can see it as the future `apt-get`. The future
    of `yum` is it's downloading of images, tarballs of container images, and it's
    running containerd or something in the background, but that's just normal for
    those apps.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 十年后，如果你是一家软件公司，卖的软件没有以某种形式的容器镜像发货，那将会很奇怪。我的意思是，这现在就有点奇怪，取决于你在行业中的位置。下载镜像会变得非常正常。如果我们最终到了那种地步，拥有一堆下载的包管理器也不足为奇。现在，你必须使用
    `docker pull` 来获取 Docker 镜像，但我可以看出它将来会像 `apt-get` 那样使用。`yum` 的未来就是下载镜像，下载容器镜像的
    tarball，并且它会在后台运行 containerd 或其他类似工具，但这对这些应用来说将是正常的。
- en: But I think it's going to take us a lot longer. I don't know what the next thing
    is, and I don't have the pulse on what's going to replace containers. But I think
    it's going to take us a long time to come up with a new concept at the OS level.
    Everyone talks about unikernels, but I'm not entirely convinced.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 但我认为这会花费我们更多的时间。我不知道接下来会是什么，也不了解什么会取代容器。但我认为我们需要很长时间才能在操作系统层面上提出一个新概念。每个人都在谈论
    unikernels（单内核），但我并不完全相信这一点。
- en: '**Viktor Farcic**: I haven''t heard anybody really talk about using unikernels.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**: 我没听说过有人真正谈论使用 unikernels。'
- en: '**Bret Fisher**: No, I think the distribution wars are over. The future is
    roll-your-own distribution. All of the distribution packages will become much
    more modular, and so it won''t really matter what distribution you''re running.
    I love the LinuxKit idea. That''s something I''m behind.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**: 不，我认为发行版的战争已经结束了。未来是自定义发行版。所有的发行版包将变得更加模块化，所以你使用的是什么发行版实际上并不重要。我喜欢
    LinuxKit 的想法。那是我支持的。'
- en: '**Viktor Farcic**: Likewise.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**: 我也是。'
- en: '**Bret Fisher**: I hope that the idea of building your own distribution catches
    on and that it becomes more mainstream and popular. I''d love to be able to say
    that I''m on DigitalOcean, or I''m on AWS—wherever I am—and just have my preferred
    distribution. I would have a YAML file that makes it, and I just give it to this
    instead of me choosing Ubuntu, Amazon, or CentOS. I''d just upload my YAML, and
    then they''ll make my OS for me and put it on a virtual machine. I don''t know
    that it''s going to be the future, but I''d love for that to be possible.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**: 我希望构建自己发行版的想法能够流行开来，并变得更加主流和受欢迎。我很想能说我在 DigitalOcean 上，或者我在
    AWS 上——无论我在哪儿——只要有我喜欢的发行版。我会有一个 YAML 文件来生成它，然后我只需要将其交给这个，而不是让我选择 Ubuntu、Amazon
    或 CentOS。我只需上传我的 YAML 文件，然后它们会为我制作操作系统并将其放入虚拟机中。我不知道这会不会成为未来，但我希望这能成为可能。'
- en: '**Viktor Farcic**: Is serverless computing going to kill containers?'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**: 无服务器计算会取代容器吗？'
- en: '**Bret Fisher**: I personally think serverless and containers go hand-in-hand.
    You really can''t do serverless well without containers.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**: 我个人认为无服务器和容器是相辅相成的。你真的无法做到很好的无服务器服务，而不依赖容器。'
- en: '**Viktor Farcic**: Thank you! You''re the first one to say that. I try to explain
    to people how serverless and containers support each other, and they all look
    at me like, *no*.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**: 谢谢！你是第一个这么说的人。我尝试向大家解释无服务器和容器是如何互相支持的，但他们看我的眼神就像是，*不行*。'
- en: '**Bret Fisher**: Serverless is to me containers as a service.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**: 对我来说，无服务器（Serverless）就像是容器即服务。'
- en: '**Viktor Farcic**: But does that mean everything below the level of orchestrators
    and containers is going to be commodities? Do you even have to care about what''s
    happening below it, for instance, the operating systems that you commented on?'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**: 但这是否意味着，低于编排工具和容器级别的所有东西都会变成商品化的？比如你提到的操作系统，你还需要关心它们的情况吗？'
- en: '**Bret Fisher**: I really don''t think so. We''ve had this talk before. If
    we''re looking out, five years is a long time. I mean, five years ago, there were
    no container orchestrators. Five years would be two to three times the current
    lifecycle of these tools. So, certainly.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**: 我真的不这么认为。我们之前讨论过这个问题。如果我们展望未来，五年确实是很长的时间。我的意思是，五年前，根本没有容器编排工具。五年的时间大约是当前这些工具生命周期的两到三倍。所以，当然。'
- en: Let me back that up. For me, any new tool that I'm going to recommend to someone
    has to be able to replace at least one other tool. It can't be a net add because
    nobody has any time for anything new. They can't add another tool to their stack
    if it doesn't replace at least one—if not ideally two—tools, it's very unlikely
    they're going to adopt it. But right now, I don't feel like orchestrators will
    really replace any single tool completely.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我解释一下。对我来说，任何我要推荐给别人的新工具，必须至少能替代一个现有工具。它不能是一个净增加的工具，因为没人有时间去学习新东西。如果一个工具不能替代至少一个——理想情况下是两个——工具，它很可能不会被采用。但是现在，我感觉编排工具并不会完全替代任何单一工具。
- en: '**Viktor Farcic**: That''s very true.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**: 这真是太对了。'
- en: '**Bret Fisher**: I still need Ansible, Chef, or Puppet to deploy my servers.
    But now, you look at something like InfraKit, which has not yet taken off, but
    is like a Terraform plus Swarm. It''s basically the idea that the same tool could
    be my orchestrator and yet also deploy my infrastructure and manage the infrastructure
    all at the same time. That sounds like a better play and a better pitch to someone.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**: 我仍然需要 Ansible、Chef 或 Puppet 来部署我的服务器。但现在，像 InfraKit 这样的工具虽然还没有大规模流行，但它类似于
    Terraform 和 Swarm 的结合。它基本上是一个概念，意味着同一个工具既可以是我的编排工具，又可以同时部署和管理我的基础设施。这听起来像是一个更好的选择，也是对别人更有吸引力的推销。'
- en: Now, you've got this tool that you already manage your infrastructure with,
    but it's a real big pain to do updates to that infrastructure. So, what if I gave
    you a tool that does that, plus updates and daily automated management of everything?
    Maybe that's where we end up in five years. I know today it can manage your infrastructure,
    but that's not the always-on default option.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经有了一个管理基础设施的工具，但对这个基础设施进行更新非常麻烦。那么，如果我给你一个工具，不仅能够做这些更新，还能自动化管理所有内容，那会怎样呢？也许五年后我们会走到这一步。我知道今天它可以管理你的基础设施，但那并不是默认的常开选项。
- en: Perhaps, eventually, whatever tool we're using will be the same tool to create
    your infrastructure, update your infrastructure, and deploy your apps. All of
    those things happen by default without any extra packages or any extra tools on
    top of it. It just comes as a single distribution of tools. I feel like that's
    the only way we're going to get people to adopt it. Because you've got to get
    rid of something. And maybe that means you truly have tools that aren't being
    used anymore. Like, we can get rid of Puppet, Chef, or Ansible, and we only really
    need this tool.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 也许最终，无论我们现在使用什么工具，都会变成一个统一的工具来创建基础设施、更新基础设施和部署应用程序。所有这些事情都会默认发生，而不需要额外的包或额外的工具。这一切都作为工具的单一分发包提供。我觉得这就是我们让人们采纳它的唯一途径。因为你必须要去掉一些东西。也许这意味着你会真正丢弃那些已经不再使用的工具。比如，我们可以去掉
    Puppet、Chef 或 Ansible，而只需要这个工具。
- en: '**Viktor Farcic**: Because that''s kind of a problem. I have the impression
    that I''m yet to find a big enterprise company that ever removed anything. Maybe
    I was unlucky, but I''ve never seen that.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**: 因为这确实是一个问题。我有一种印象，就是我还没有找到任何一家大企业完全移除了某些东西。也许是我运气不好，但我从未见过这种情况。'
- en: Closing thoughts
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结束语
- en: '**Bret Fisher**: The last thing I''ll say is that it''s both hard, and rare.
    A tool has to be extremely awesome in order to be a net add, on top of everything
    you''re already currently doing Docker did that. Docker was beneficial enough
    by itself that you could still use your Ansibles and your Puppets. You were also
    able to still have your VMware, all of your `apt-get` and other package install
    tools such as your npms, and your composer. What you had was this extra tool in
    the stack and people used it. It''s not going to happen very often, so whatever''s
    next probably won''t be able to do that. But again, I don''t know, and it might
    just be because I''m skeptical.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**: 我最后想说的是，这既难，也罕见。一个工具必须非常棒，才能成为你当前正在做的一切之上的增值，Docker做到了这一点。Docker本身足够有利，你可以继续使用你的Ansible、Puppet等工具。你还可以继续使用VMware、所有的`apt-get`和其他安装工具，比如npm和composer。你拥有的是这个堆栈中的额外工具，人们使用它。这种情况不会经常发生，所以接下来的事情可能不会像这样。但我还是不确定，可能只是因为我持怀疑态度。'
- en: '**Viktor Farcic**: Great! I know we''re out of time now, so I just wanted to
    say thank you for taking the time to talk to me today. I really enjoyed talking
    to you, and I hope to talk to you soon.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**: 很棒！我知道我们现在时间不多了，所以我想说谢谢你今天抽空和我交谈。我很享受和你的交流，希望很快再与你聊天。'
- en: '**Bret Fisher**: No problem! It''s been great talking to you too, Viktor.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bret Fisher**: 没问题！和你交谈也很愉快，Viktor。'
