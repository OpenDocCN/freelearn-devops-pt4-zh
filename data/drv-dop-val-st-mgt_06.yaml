- en: '[*Chapter 5*](B17087_05_Final_PD_epub.xhtml#_idTextAnchor126): Driving Business
    Value through a DevOps Pipeline'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第5章*](B17087_05_Final_PD_epub.xhtml#_idTextAnchor126): 通过DevOps流水线推动商业价值'
- en: In the previous four chapters, you learned there are many different ways to
    define the term *value* and the importance of understanding its use in context.
    Therefore, we spent some time learning about these terms to ensure that we have
    a common semantic understanding when communicating about using **value stream
    management** (**VSM**) and DevOps to deliver customer-centric value.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前四章中，你学习了有多种不同的方式来定义“*价值*”这一术语，以及理解其在特定语境中使用的重要性。因此，我们花了一些时间学习这些术语，以确保在讨论如何使用**价值流管理**（**VSM**）和DevOps交付以客户为中心的价值时，能够拥有共同的语义理解。
- en: You learned how Lean and Agile practices complement each other to help an organization
    deliver customer-centric value. You also learned why we need to take a systems-thinking
    view to improve value delivery within large and complex organizations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你学习了精益（Lean）和敏捷（Agile）实践如何互补，帮助组织交付以客户为中心的价值。你还学习了为什么我们需要采取系统思维的视角，在大型复杂的组织中改善价值交付。
- en: 'This chapter explains how and why IT organizations represent very complex systems
    across two primary functions: **development** and **operations**. In a traditional
    IT shop, the development and operations organizations function as separate departments
    with different activities, and each has a different focus and culture. This type
    of separation of people and responsibilities only adds to the complexity of the
    IT organization.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了IT组织如何以及为何代表着两大主要职能之间非常复杂的系统：**开发**和**运营**。在传统的IT组织中，开发和运营部门作为独立的部门运作，分别进行不同的活动，每个部门有不同的关注点和文化。这种人员和职责的分离只会增加IT组织的复杂性。
- en: This chapter will explain why this functional split in the IT organization can
    become a problem. You will also learn about a collaboration and integration strategy
    that can be used to resolve such issues. That strategy is called **DevOps**, which
    is a concatenation of development and operations.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将解释为什么IT组织中的这种职能分裂可能会成为一个问题。你还将学习到一种合作与集成策略，可以用来解决这些问题。这个策略被称为**DevOps**，即开发和运营的合成词。
- en: The topics presented in this chapter are a necessary precursor to our discussions
    on the implementation of VSM tools and methods, which we'll cover in *Section
    2* of this book.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章所介绍的主题是我们在*第二部分*中将讨论的VSM工具和方法实施之前必要的前提。
- en: 'In this chapter, we''re going to cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Breaking down barriers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打破障碍
- en: Improving flows with DevOps pipelines
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过DevOps流水线改善流程
- en: Understanding virtualization
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解虚拟化
- en: Defining **continuous integration** (**CI**)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义**持续集成**（**CI**）
- en: Defining **continuous delivery** (**CD**)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义**持续交付**（**CD**）
- en: Enabling CI/CD and DevOps pipeline flows
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用CI/CD和DevOps流水线流程
- en: Understanding the scope of DevOps
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解DevOps的范围
- en: Integrating **IT service management** (**ITSM**)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成**IT服务管理**（**ITSM**）
- en: Moving beyond projects and into products
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从项目转向产品
- en: In this last chapter of *Section 1* of this book, you will gain an appreciation
    of the disparate technologies, portfolio-level investments, and genuine complexities
    involved in developing a competitive DevOps pipeline capability. Let's start this
    introduction to DevOps by understanding the business drivers that led to its evolution
    in the software industry.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书*第一部分*的最后一章中，你将了解开发具有竞争力的DevOps流水线能力所涉及的不同技术、投资组合层级的投入以及真正的复杂性。让我们从理解导致DevOps在软件行业演变的商业驱动因素开始这段介绍。
- en: Breaking down barriers
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打破障碍
- en: Nowadays, with a quick search on the internet, you will find many industry analysts
    and other commentators who will agree that DevOps has become the table stakes
    to effectively compete in our modern digital economy (Dietrich, 2019). Those organizations
    that master the integration and automation of tools of activities across the IT
    value streams of development and operations have orders of magnitude better velocity
    in software delivery and better quality and efficiency.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，只需在互联网上快速搜索，你会发现许多行业分析师和评论员会同意，DevOps已经成为在现代数字经济中有效竞争的基础（Dietrich, 2019）。那些掌握开发和运营IT价值流中各类活动工具的集成与自动化的组织，在软件交付的速度、质量和效率上有着数量级的优势。
- en: Just as Lean practices transformed the competitive landscape in manufacturing
    and other services-based companies, DevOps has similarly transformed the IT industry.
    Specifically, DevOps pipelines implement a software development strategy that
    is equivalent to the Lean production flow concepts in manufacturing and other
    industries. As a result, those organizations that effectively implement DevOps
    pipelines have significant competitive advantages when responding to new market
    opportunities, evolving competitive pressures, and changing customer needs.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 正如精益实践在制造业和其他服务型公司中改变了竞争格局，DevOps也同样改变了IT行业。具体来说，DevOps流水线实现了一种软件开发策略，这与制造业及其他行业中的精益生产流程概念相当。因此，那些有效实施DevOps流水线的组织，在响应新的市场机会、不断变化的竞争压力和客户需求时，具有显著的竞争优势。
- en: Moreover, DevOps is an amalgamation of Lean and Agile practices or, for short,
    Lean-Agile. Agile provides values and principles to guide customer-centric software
    development practices; Lean production concepts provide proven approaches to eliminate
    waste and achieve efficient software value delivery. As you will learn in *Section
    2* of this book, modern VSM methods and tools enable organizations to implement
    Lean transformations across their IT value streams.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，DevOps是精益（Lean）和敏捷（Agile）实践的结合，简称为精益敏捷（Lean-Agile）。敏捷提供了指导以客户为中心的软件开发实践的价值观和原则；而精益生产概念则提供了经过验证的方法，旨在消除浪费并实现高效的软件价值交付。正如你将在本书*第二章*中学习到的那样，现代的价值流映射（VSM）方法和工具使得组织能够在其IT价值流中实施精益转型。
- en: DevOps concepts began to emerge in 2008\. Specifically, Andrew Shafer and Patrick
    Debois were given credit for initially discussing these concepts in a private
    meeting during the Agile Conference held in Toronto that same year. DevOps then
    became popularized a bit later when Patrick Debois organized the first *DevOpsDays*
    conference, held in Belgium in 2009.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps的概念在2008年开始浮现。具体来说，Andrew Shafer和Patrick Debois因在同年举行的敏捷大会上，在一次私人会议中首次讨论了这些概念而受到认可。随后，DevOps在2009年Patrick
    Debois组织的第一次*DevOpsDays*大会上变得广为人知，该会议在比利时举行。
- en: It's important to note that DevOps began as a collaboration strategy in **Agile
    systems administration**. The goal was to overcome conflicts between Agile-based
    software development teams, who could now deliver new software products and features
    with increased frequency (that is, increased *velocity*), and the traditionally
    risk-averse system administration organizations.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，DevOps起初是在**敏捷系统管理**中作为一种协作策略开始的。其目标是克服敏捷软件开发团队之间的冲突，这些团队现在可以更频繁地交付新的软件产品和功能（即，提高了*速度*），而传统上更为保守的系统管理组织则不愿接受这种变更。
- en: CI capabilities, which we'll introduce later in this chapter (see *Defining
    CI*), allowed developers to increase the velocity of application delivery to the
    IT operations' function. However, there was very little in the way of integrated
    processes or cultures of collaboration to facilitate the frequent releases of
    new software products into an organization's test and production environments.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: CI能力，我们将在本章稍后介绍（见*定义CI*），使得开发人员能够提高应用交付到IT运维功能的速度。然而，原先并没有多少集成的流程或协作文化来促进新软件产品频繁发布到组织的测试和生产环境中。
- en: In a traditional IT organization, development and operations are two separate
    functions. They have different goals and objectives. They also have different
    mindsets. Software developers thrive in a world of change, delivering new features
    and capabilities continuously. That's a good thing because customers and users
    want new features that add value, and the sooner the better.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的IT组织中，开发和运维是两个独立的职能。它们有不同的目标和任务，也有不同的思维方式。软件开发人员在变化的环境中蓬勃发展，不断交付新的功能和能力。这是件好事，因为客户和用户希望获得能够增加价值的新功能，而且越快越好。
- en: On the other hand, systems administrators don't care for change because they
    are responsible for ensuring all networks, systems, and applications are running,
    stable, and secure. In short, changes can break their systems, infrastructures,
    and security. And their hesitancy is a good thing, as we need our networks and
    software to work and be secure.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，系统管理员不喜欢变更，因为他们负责确保所有网络、系统和应用程序的运行、稳定和安全。简而言之，变更可能会破坏他们的系统、基础设施和安全性。而他们的犹豫是件好事，因为我们需要确保网络和软件的正常运作和安全。
- en: 'Think of the difference in cultures like this: developers thrive in making
    changes, and they are rewarded when they release new functionality that supports
    the needs of customers and users. In contrast, any changes in operations are scary
    – as those changes can break their deployed networks, systems, and applications.
    Even worse than this is that the systems administrators will receive the blame
    when the systems go down, and they alone feel all of the pressure until the systems
    are back up and running.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将文化差异理解为这样的对比：开发人员擅长进行变更，并且当他们发布支持客户和用户需求的新功能时，会获得奖励。相比之下，运营中的任何变更都是可怕的——因为这些变更可能会破坏已部署的网络、系统和应用程序。更糟糕的是，当系统发生故障时，系统管理员将受到责备，而他们自己将承受所有压力，直到系统恢复正常运行。
- en: Sharing accountability
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 共享责任
- en: First and foremost, DevOps is a communications and collaboration strategy. In
    this context, DevOps' objective is to get the two teams working together in a
    coordinated manner, with information flowing both ways. Developers need to know
    why their new releases fail in production. In contrast, an operations team needs
    detailed information regarding installation configurations, system administration
    and support information, and whether the product releases have been thoroughly
    tested via systems testing, security testing, performance testing, load testing,
    and stress testing. However, such collaborations are nearly impossible when the
    development and operations teams remain separated by responsibilities, desired
    outcomes, and their differing measurements of success.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，DevOps是一种沟通和协作策略。在这种背景下，DevOps的目标是让两个团队以协调的方式共同工作，信息双向流动。开发人员需要了解为什么他们的新版本在生产环境中失败。相比之下，运营团队需要有关安装配置、系统管理和支持信息的详细信息，以及产品发布是否已经通过系统测试、安全测试、性能测试、负载测试和压力测试进行彻底测试。然而，当开发和运营团队因各自的责任、期望的结果以及成功标准的差异而分开时，这种协作几乎是不可能的。
- en: Development teams frequently want to put out new releases that they've built
    and tested and believe are ready for release. But since the operations team traditionally
    works apart from the development team, the operations group will be reluctant
    to put out a new release until they have confirmed the product won't fail or cause
    other issues with systems configurations, performance, or security in their production
    environments.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 开发团队经常希望发布他们已经构建并测试过、并且认为准备就绪的新版本。但由于运营团队传统上与开发团队分开工作，运营团队会不愿意发布新版本，直到确认该产品不会在生产环境中导致故障或其他系统配置、性能或安全问题。
- en: While the development team implements the new changes, the operations department
    is held accountable for ensuring everything works properly in deployment. For
    example, the operations team might conduct tests, such as **user acceptance testing
    (UAT)**, that should have been completed earlier in development. If the software
    fails, the operations team has to go back to development with bug and defect lists,
    and then try to make them a development priority.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发团队实施新变更时，运营部门负责确保一切在部署中正常工作。例如，运营团队可能会进行**用户验收测试（UAT）**，这种测试本应在开发早期完成。如果软件失败，运营团队必须将错误和缺陷列表返回给开发团队，然后尝试将这些问题作为开发优先事项。
- en: Other tests, such as **performance testing**, **load testing**, **stress testing**,
    and **systems testing**, require the duplication of the organization's production
    environments. If the development team cannot fully replicate the production environments
    in their testing environments, they might fail to discover potential problems
    with scaling the applications. That means performance and integration issues might
    not be uncovered until after the application has been moved into production. Even
    then, it could take some time before a set of events triggers a failure. As a
    result, it might look to be a failure of the operations team when, in fact, it
    was a failure to thoroughly test the system in a production-like environment.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 其他测试，如**性能测试**、**负载测试**、**压力测试**和**系统测试**，需要复制组织的生产环境。如果开发团队无法在其测试环境中完全复制生产环境，他们可能无法发现应用程序扩展中的潜在问题。这意味着，性能和集成问题可能要等到应用程序进入生产后才会被发现。即使那时，也可能需要一段时间，直到一组事件触发故障。结果，看起来像是运营团队的失误，实际上却是没有在类似生产环境中彻底测试系统的失误。
- en: Ideally, the development or operations team will build a preproduction or staging
    environment to mimic its production environments. When that's not possible, the
    operations team could be forced to run a limited set of tests directly on their
    production environments, and by doing so, hope for the best but be prepared for
    the worst.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，开发或运维团队会构建一个预生产或暂存环境，以模拟其生产环境。当这不可行时，运维团队可能被迫直接在生产环境中运行一小部分测试，尽管这样做是希望能够尽量避免问题，但仍然要做好应对最坏情况的准备。
- en: All of the operation team's testing takes time to plan and execute. In addition
    to this, those tests won't occur until after the development team has already
    moved on to develop new features and functions during their next set of sprints.
    Any bugs or defects discovered by the operations team have to flow back into the
    product backlog for reprioritization and scheduling, potentially delaying the
    release of new features that customers are expecting. Moreover, the responsibility
    and blame for any failed releases tend to shift to the operations department.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 运维团队的所有测试都需要时间来规划和执行。除此之外，这些测试只有在开发团队已经进入下一个迭代周期，开始开发新的特性和功能时，才会进行。运维团队发现的任何错误或缺陷都需要重新进入产品待办事项列表，以便重新排序和安排，这可能会延迟客户期待的新特性发布。而且，任何失败的发布责任和指责往往会转嫁到运维部门。
- en: This cultural logjam cannot be fixed if the development and operations teams
    remain separated in any fashion. Leveraging the Lean-Agile concepts you learned
    in [*Chapter 2*](B17087_02_Final_PD_epub.xhtml#_idTextAnchor062), *Building on
    a Lean-Agile Foundation*, the organization needs to integrate, streamline, and
    orchestrate the flow of work and information across both the IT development and
    operations groups.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果开发和运维团队仍然各自为政，这种文化上的障碍是无法解决的。利用你在[*第二章*](B17087_02_Final_PD_epub.xhtml#_idTextAnchor062)中学到的精益-敏捷概念，*构建在精益-敏捷基础之上*，组织需要整合、简化并协调信息和工作的流动，跨越IT开发和运维团队。
- en: Organizations must remove the barriers that keep these functions apart. For
    smaller organizations, eliminating communication barriers can be as simple as
    getting the two teams to communicate together well before each release. However,
    larger organizations might have multiple product lines, multiple software product
    development teams, and even different operations support teams. In those situations,
    communication, integration, and synchronization challenges grow exponentially.
    The only practical way to remove the wedges between development and operations
    in larger organizations is to integrate the two functions within product teams
    or product lines and have everyone on the product teams be equally responsible
    for each release's velocity and quality.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 组织必须消除那些使这些职能相互隔离的障碍。对于较小的组织来说，消除沟通障碍可以简单地通过在每次发布之前让两个团队提前进行良好的沟通。然而，较大的组织可能拥有多个产品线、多个软件开发团队，甚至不同的运维支持团队。在这些情况下，沟通、整合和同步的挑战呈指数级增长。对于大型组织来说，消除开发和运维之间的隔阂的唯一实际方法是将这两项职能整合到产品团队或产品线中，并让每个团队成员对每次发布的速度和质量负有同等责任。
- en: The practical ramifications of such a strategy are that the activities across
    development and operations must be linked, streamlined, and synchronized to each
    product under development. In other words, development and operations need to
    interoperate as a single product team.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这种战略的实际影响是，开发和运维的活动必须与每个正在开发的产品紧密关联、简化并同步。换句话说，开发和运维需要作为一个单一的产品团队进行协作。
- en: Product team members share accountability for each new feature release from
    ideation to delivery. The product teams are also accountable for effectively supporting
    operations-oriented activities across the product's life.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 产品团队成员共同负责每一个新特性的发布，从创意到交付。产品团队还需要有效地支持产品生命周期中的运维相关活动。
- en: Another set of issues arises from the two IT organizations – development and
    operations – having different velocities. Traditionally, an operations team requires
    more time to manage the risks associated with deploying a new release into the
    organization's production environments. This mismatch in velocities creates a
    bottleneck that slows down the release of new features into the organization's
    production environments.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个问题源自两个IT组织——开发和运维——的速度不同。传统上，运维团队需要更多的时间来管理将新版本部署到组织的生产环境中所带来的风险。速度上的不匹配会造成瓶颈，进而减缓新特性发布到生产环境的速度。
- en: In the next section, you will learn how modern **CI** and **CD** capabilities
    address these issues.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，你将学习现代**CI**和**CD**功能如何解决这些问题。
- en: Improving flows with CI/CD pipelines
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过CI/CD管道改善流动
- en: In [*Chapter 6*](B17087_06_Final_PD_epub.xhtml#_idTextAnchor165)*, Launching
    the VSM Initiative (VSM Steps 1-3),* through to [*Chapter 11*](B17087_11_Final_PD_epub.xhtml#_idTextAnchor291),
    *Identifying VSM Tool Types and Capabilities*, we will use the concepts you learn
    in this section as a use case to introduce how you can use an eight-step VSM methodology
    to improve work and information flow across a CI/CD pipeline. However, before
    we get to that use case, we need to have a basic understanding of the purpose
    of a CI/CD pipeline, its component activities, and the complexities of implementing
    a fully integrated and automated toolchain. Those are the topics that we'll cover
    in this subsection.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第6章*](B17087_06_Final_PD_epub.xhtml#_idTextAnchor165)*，启动VSM倡议（VSM步骤1-3）*到[*第11章*](B17087_11_Final_PD_epub.xhtml#_idTextAnchor291)，*识别VSM工具类型和功能*，我们将使用你在本节中学到的概念作为一个用例，介绍如何利用八步VSM方法学来改善CI/CD管道中的工作和信息流。然而，在进入该用例之前，我们需要对CI/CD管道的目的、其组成活动以及实现完全集成和自动化工具链的复杂性有一个基本的理解。这些就是我们将在本小节中讨论的话题。
- en: 'CI/CD toolchains enable the pipeline flows of work items and information during
    the software development life cycle. Another helpful way to think about CI/CD
    pipelines is that they enable the implementation of Lean-oriented production concepts
    across IT value streams. Before we discuss the components of a CI/CD pipeline,
    let''s review the purposes of its two constituent elements:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD工具链使得软件开发生命周期中的工作项和信息流能够在管道中流动。另一种有用的方式来看待CI/CD管道是，它们使得在IT价值流中实施精益生产理念成为可能。在我们讨论CI/CD管道的组成部分之前，先来回顾一下其两个组成元素的目的：
- en: '**CI**: This provides the infrastructure that allows several software developers
    or even different development teams to implement and test code changes to a software
    product under development.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CI**：这提供了基础设施，允许多个软件开发者甚至不同的开发团队在开发中的软件产品上实现并测试代码更改。'
- en: '**CD**: This enables the automated provisioning of development, test, and production
    environments as **configurable items**.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CD**：这使得开发、测试和生产环境的自动化配置成为可能，作为**可配置项**。'
- en: 'There are three critical capabilities and related tools that support the implementation
    of CI/CD pipelines. These include the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 支持CI/CD管道实施的三个关键能力和相关工具如下：
- en: '**Configuration management** (**CM**)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置管理**（**CM**）'
- en: Task management/automation
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务管理/自动化
- en: Containerization
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器化
- en: Let's take a look at these three enabling technologies and tools in more detail.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看看这三种支持技术和工具。
- en: Tooling to establish CI/CD pipelines
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建立CI/CD管道的工具
- en: CM helps us to track and manage the proper versions of CI that make up each
    software release. A configurable item is a system component or associated information
    artifact that has been uniquely identified for version and change control and
    identification purposes. **Source control management** (**SCM**) tools help developers
    maintain version control of source code and other CIs.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: CM帮助我们跟踪和管理构成每个软件发布的CI的正确版本。可配置项是一个系统组件或关联信息文档，已被唯一标识用于版本和变更控制以及标识目的。**源代码管理**（**SCM**）工具帮助开发人员维持源代码和其他CI的版本控制。
- en: Git and GitHub are two of the better-known SCM tools. But there are other tools,
    such as **Apache Subversion** (**SVN**), Azure DevOps Server (formerly Team Foundation
    Server), Bazaar, Bitbucket Server, CVS, GitLab, Gerrit, Kallithea, Mercurial,
    Monotone, Perforce Helix Core, Rational ClearCase, and **Revision Control System**
    (**RCS**).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Git和GitHub是两种比较知名的源代码管理（SCM）工具。但还有其他工具，如**Apache Subversion**（**SVN**）、Azure
    DevOps Server（前身为Team Foundation Server）、Bazaar、Bitbucket Server、CVS、GitLab、Gerrit、Kallithea、Mercurial、Monotone、Perforce
    Helix Core、Rational ClearCase，以及**版本控制系统**（**RCS**）。
- en: '**Task management** tools facilitate the automation of CI/CD and DevOps workflows.
    In both CI/CD and DevOps platforms, the software industry refers to automated
    workflows as pipelines. Typically, a CI/CD workflow automates the pipeline activities
    of planning, designing, developing, testing, provisioning, and delivering software
    releases. In addition, task management supports tracking a work item''s progress,
    monitoring and analyzing key metrics across the pipeline, and reporting the results.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**任务管理**工具促进了CI/CD和DevOps工作流的自动化。在CI/CD和DevOps平台中，软件行业将自动化的工作流称为管道（pipelines）。通常，CI/CD工作流自动化了规划、设计、开发、测试、供应和交付软件发布的管道活动。此外，任务管理还支持跟踪工作项的进度，监控和分析管道中的关键指标，并报告结果。'
- en: One of the better-known task management tools is Jenkins, which lauds its community
    as providing the industry-leading open source automation server. Jenkins is used
    to automate software build, test, and deployment processes in a CI/CD environment.
    Though free, Jenkins is considered by some to be outdated and cumbersome to use.
    There are alternatives to Jenkins, including AutoRABIT, Bamboo, Bitrise, Buddy,
    Buildkite, CircleCI, CruiseControl, FinalBuilder, GitLab CI, GoCD, Integrity,
    Strider, TeamCity, UrbanCode, and Werker.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一款广为人知的任务管理工具是Jenkins，它以其社区被誉为提供行业领先的开源自动化服务器。Jenkins用于自动化软件的构建、测试和部署过程，在CI/CD环境中运行。尽管Jenkins是免费的，但一些人认为它已经过时且使用繁琐。Jenkins有一些替代品，包括AutoRABIT、Bamboo、Bitrise、Buddy、Buildkite、CircleCI、CruiseControl、FinalBuilder、GitLab
    CI、GoCD、Integrity、Strider、TeamCity、UrbanCode和Werker。
- en: '**Containerization** is a mechanism that is used to package an application''s
    code and its related configuration files, libraries, and other dependencies to
    run an application in its target hardware environments. Conceptually, containers
    implement a virtualization strategy to maximize the utilization of computing resources.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**容器化**是一种机制，用于将应用程序的代码及其相关的配置文件、库和其他依赖项打包，以便在目标硬件环境中运行应用程序。从概念上讲，容器实现了一种虚拟化策略，以最大化计算资源的利用率。'
- en: Before virtualization, organizations had to dedicate servers to run specific
    applications, such as email, web-based applications, and backend business applications.
    Having dedicated application servers is extraordinarily inefficient and inflexible.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚拟化技术出现之前，组织必须为运行特定应用程序（如电子邮件、基于Web的应用程序和后台业务应用程序）专门配置服务器。拥有专用应用服务器极其低效且不灵活。
- en: Two of the better-known container technologies are **Docker** and **Kubernetes**,
    and they work together. Docker is a software tool that developers use to build
    and deploy containers, while **Kubernetes** (that is, **k8s** or **Kube**) orchestrates
    and manages multiple containers in clusters. Orchestration is necessary to schedule
    and automate the deployment, management, and scaling of containerized applications.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 两种广为人知的容器技术是**Docker**和**Kubernetes**，它们共同协作。Docker是开发人员用来构建和部署容器的软件工具，而**Kubernetes**（即**k8s**或**Kube**）负责协调和管理集群中的多个容器。协调是必要的，用于调度和自动化容器化应用程序的部署、管理和扩展。
- en: As with SCM and task management, there are alternative tools available in the
    industry for both Docker and Kubernetes. Docker alternatives include Canonical
    (Ubuntu), **Linux Containers** (**LXD**), CoreOS rkt, **Open Container Initiative**
    (**OCI**), LXC Linux Containers, Mesos Containerizer, and OpenVZ. The Kubernetes
    alternatives include **Amazon ECS** (**Elastic Container Service**), AWS Fargate,
    AZK, **Azure Kubernetes Service** (**AKS**), Cloudify, Containership, **Google
    Kubernetes Engine** (**GKE**), OpenShift, Marathon, Minikube, Nomad, and Rancher.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 与SCM和任务管理一样，行业中也有许多Docker和Kubernetes的替代工具。Docker的替代品包括Canonical（Ubuntu）、**Linux
    Containers**（**LXD**）、CoreOS rkt、**Open Container Initiative**（**OCI**）、LXC Linux
    Containers、Mesos Containerizer和OpenVZ。Kubernetes的替代品包括**Amazon ECS**（**Elastic
    Container Service**）、AWS Fargate、AZK、**Azure Kubernetes Service**（**AKS**）、Cloudify、Containership、**Google
    Kubernetes Engine**（**GKE**）、OpenShift、Marathon、Minikube、Nomad和Rancher。
- en: If you think the number of tools available to support these three technologies
    is daunting, just wait until we examine the larger tool options that are available
    to support the entire DevOps toolchain. These tools are a small subset of the
    DevOps pipeline tools that are available as commercial and open source offerings.
    Later, in [*Chapter 11*](B17087_11_Final_PD_epub.xhtml#_idTextAnchor291), *Identifying
    VSM Tool Types and Capabilities*, you will learn that there are 17 categories
    of tools and more than 400 offerings available to support the full scope of a
    DevOps **value stream delivery platform** (**VSDP**).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你认为支持这三种技术的工具数量让人不知所措，那就等着看看我们将在稍后探讨的支持整个 DevOps 工具链的更多工具选择吧。这些工具只是 DevOps
    管道工具的一个小子集，既有商业化工具，也有开源工具。稍后在 [*第11章*](B17087_11_Final_PD_epub.xhtml#_idTextAnchor291)中，*识别
    VSM 工具类型与功能*，你将了解到支持 DevOps **价值流交付平台**（**VSDP**）的工具有 17 个类别，且超过 400 种工具可以供选择。
- en: We'll revisit all three of these technologies later in this chapter. However,
    before we get into the details of containerization, you need to understand the
    basic concepts behind virtualization.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章稍后重新审视这三种技术。然而，在深入探讨容器化之前，你需要理解虚拟化背后的基本概念。
- en: Understanding virtualization
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解虚拟化
- en: IT organizations, especially larger ones, need to maximize their computing resources'
    flexibility, utilization, and scalability. These goals are difficult, if not impossible,
    to achieve without virtualization. Virtualization is an approach taken by IT organizations
    to simplify their operations and respond faster to changing business demands.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: IT 组织，尤其是大型 IT 组织，需要最大化其计算资源的灵活性、利用率和可扩展性。没有虚拟化，这些目标很难（甚至不可能）实现。虚拟化是 IT 组织用来简化操作并更快响应不断变化的业务需求的方法。
- en: Virtualization offers a practical approach to distribute an application across
    any number of computing devices. For example, in many cases, one computing device
    is not sufficient to run a business application due to the high demand loads.
    In a related example, application demand loads can vary over time across the organization's
    applications. Virtualization offers an approach to reapportion loads across servers
    as demands vary, enabling high availability for demand-critical applications while
    also streamlining the process to deploy and migrate applications.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化提供了一种实际的方法，将应用程序分布在任意数量的计算设备上。例如，在许多情况下，由于负载需求过高，单一计算设备不足以运行业务应用程序。在一个相关的例子中，应用程序的需求负载会随着时间变化而波动，覆盖整个组织的应用程序。虚拟化提供了一种方法，可以在服务器间重新分配负载，随着需求变化，确保关键需求应用的高可用性，同时简化应用程序的部署和迁移过程。
- en: Additionally, modern data centers employ servers deployed in racks to maximize
    their computing resource utilization. Virtualization makes it possible to coordinate
    the use of rack-mounted servers to utilize those resources maximally. These rack-based
    server strategies reduce power consumption for the computing devices and air conditioning
    needs; additionally, they reduce the land and facility space requirements of the
    data centers.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，现代数据中心使用部署在机架中的服务器以最大化计算资源的利用率。虚拟化使得协调使用机架式服务器成为可能，从而最大化资源的利用。这些基于机架的服务器策略减少了计算设备的功耗和空调需求；此外，还减少了数据中心对土地和设施空间的需求。
- en: Virtualizing data center resources
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 虚拟化数据中心资源
- en: Virtualization creates a logical (virtual) computing environment that sits on
    top of a physical computing environment. Each virtualized environment mimics the
    hardware, **operating systems** (**OSes**), storage devices, and other system
    and security components that are necessary to run a specific software application.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化创建了一个逻辑（虚拟）计算环境，它位于物理计算环境之上。每个虚拟化环境模拟了硬件、**操作系统**（**OSes**）、存储设备以及运行特定软件应用所需的其他系统和安全组件。
- en: Virtualization allows IT organizations to partition a single physical computer
    or racks of servers into **virtual machines** (**VMs**). Each VM operates independently
    and can run different OSes or applications while sharing a single host machine's
    resources.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化使得 IT 组织能够将单个物理计算机或机架服务器划分为**虚拟机**（**VMs**）。每个虚拟机独立运行，并且可以在共享单一主机资源的同时运行不同的操作系统或应用程序。
- en: The primary benefit of virtualization is that each physical computing system
    can manage multiple virtual environments, thereby maximizing its utilization.
    Moreover, the IT department can automate building and taking down virtual environments
    to match demand loads and business application needs, maximizing the IT organization's
    responsiveness and flexibility.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化的主要好处是，每个物理计算系统可以管理多个虚拟环境，从而最大化其利用率。此外，IT部门可以自动化构建和拆除虚拟环境，以匹配需求负载和业务应用的需求，从而最大化IT组织的响应能力和灵活性。
- en: Virtualization concepts employ a specific semantic description to distinguish
    between physical versus virtualized environments, as hosts versus guest machines.
    Host machines are the physical machines used for virtualization, and guest machines
    are the VMs. The host versus guest machine terminology makes it easier to distinguish
    the OS that runs on the physical machine from the OSes that run on its VMs.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟化概念使用特定的语义描述来区分物理环境与虚拟化环境，以及主机与客户机。主机是用于虚拟化的物理机器，而客户机是虚拟机。主机与客户机的术语使得区分运行在物理机器上的操作系统与运行在虚拟机上的操作系统变得更为简单。
- en: Employing hypervisor software for virtualization
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用虚拟机监控程序软件进行虚拟化
- en: '*Figure 5.1* shows a traditional application server architecture on the left
    and a virtualized server on the right. The diagram clearly shows that the traditional
    model requires a separate computer as a server for each application requirement.
    In contrast, the virtualized host machine shares its resources among all the virtualized
    guest machines and their applications:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.1*展示了传统应用服务器架构（左侧）和虚拟化服务器架构（右侧）。该图清楚地表明，传统模型需要为每个应用程序需求配备独立的计算机作为服务器。相比之下，虚拟化的主机通过共享其资源为所有虚拟化的客户机及其应用程序提供支持：'
- en: '![](img/B17087_Figure_5.1.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17087_Figure_5.1.jpg)'
- en: Figure 5.1 – Traditional (left) versus virtualized (right) servers
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1 – 传统（左）与虚拟化（右）服务器
- en: In the original virtualization model, **hypervisor** software (that is, *virtual
    machine monitor*, *VMM*, or *virtualizer*) is installed on a host machine to enable
    multiple VMs to operate as guest machines on one physical server. The hypervisor
    software is a lightweight OS that serves as an abstraction layer separating the
    applications and their required OS from the server's OS.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在原始虚拟化模型中，**虚拟机监控程序**（即*虚拟机监控器*，*VMM*，或*虚拟化程序*）安装在主机上，以便多个虚拟机作为客户机在一台物理服务器上运行。虚拟机监控程序是一种轻量级操作系统，作为抽象层将应用程序及其所需的操作系统与服务器的操作系统隔离开来。
- en: 'Hypervisors work in two types of operating modes:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机监控程序有两种工作模式：
- en: '**Bare-metal hypervisors** run multiple OSes on top of one hardware server.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**裸金属虚拟机监控程序**在单一硬件服务器上运行多个操作系统。'
- en: '**Hosted hypervisors** are installed on top of the hardware''s standard OS
    but isolate the virtualized applications'' OSes.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**托管虚拟机监控程序**安装在硬件标准操作系统之上，但将虚拟化应用程序的操作系统隔离开来。'
- en: '*Figure 5.2* depicts the two standard hypervisor software implementation models,
    that is, bare-metal and hosted:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.2*展示了两种标准虚拟机监控程序软件实现模型，即裸金属和托管模型：'
- en: '![](img/B17087_Figure_5.2.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17087_Figure_5.2.jpg)'
- en: Figure 5.2 – Hypervisor software implementation models
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2 – 虚拟机监控程序软件实现模型
- en: 'The benefits of using hypervisor software for virtualization include the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用虚拟机监控程序软件进行虚拟化的好处包括：
- en: It offers greater speed, efficiency, and flexibility in provisioning VMs instead
    of installing one or more physical servers for every software application.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在配置虚拟机时提供更高的速度、效率和灵活性，而不需要为每个软件应用程序安装一台或多台物理服务器。
- en: It allows multiple OSes to reside on the same host machine. Therefore, software
    applications do not need to be rewritten to run on the host machine's OS.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许多个操作系统驻留在同一台主机上。因此，软件应用程序无需重新编写即可在主机的操作系统上运行。
- en: All virtualized applications share the same virtual computing, storage, and
    memory resources, thereby reducing computing equipment needs, computer room space,
    energy costs, and equipment maintenance.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有虚拟化的应用程序共享相同的虚拟计算、存储和内存资源，从而减少了计算设备的需求、机房空间、能源成本和设备维护成本。
- en: It improves disaster recovery by making it simpler and faster to create and
    recover snapshot images.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过简化和加速创建和恢复快照映像来提高灾难恢复能力。
- en: It simplifies the process of creating test environments as VMs.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它简化了将测试环境创建为虚拟机（VM）的过程。
- en: To put the virtualization's power into perspective, it's not unusual to have
    thousands of servers dedicated to supporting just one critical business application
    in large enterprises. Indeed, the largest commercial data centers might have more
    than a million servers deployed on tens of thousands of racks running any number
    of applications for any number of customers.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解虚拟化的强大功能，在大型企业中，通常会有成千上万的服务器专门用于支持一个关键的业务应用程序。事实上，最大的商业数据中心可能会在成千上万的机架上部署超过一百万台服务器，运行着为无数客户提供服务的各种应用程序。
- en: These data centers offer a network of remote servers hosted on the internet
    as a cloud-based service. Over time, the data centers could employ different technologies.
    The virtualization of servers is critical to the efficient storage, management,
    and processing of data for external customers regardless of the underlying physical
    environments.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据中心提供基于云的服务，网络上托管了远程服务器。随着时间的推移，数据中心可能会采用不同的技术。服务器虚拟化对于外部客户的数据存储、管理和处理至关重要，无论其底层物理环境如何。
- en: However, as it turns out, hypervisor-based virtualization is not a perfect solution.
    Since the hypervisor software emulates virtual hardware, the hypervisor must include
    all the guest machines' application OS and system functionality, making them relatively
    inefficient.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，事实证明，基于虚拟机监控程序的虚拟化并不是一个完美的解决方案。由于虚拟机监控程序软件模拟虚拟硬件，它必须包含所有客户端机器的应用程序操作系统和系统功能，使得它们相对低效。
- en: In the following subsection, you will learn how containers resolve these issues
    by sharing a lightweight OS.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的子节中，你将学习容器如何通过共享轻量级操作系统来解决这些问题。
- en: Using containers for virtualization
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用容器进行虚拟化
- en: Both containers and hypervisors make applications faster, more portable, and
    more efficient to deploy. However, they achieve those objectives differently.
    You've already learned that hypervisor software implements a light OS over a host
    machine's environment. In contrast, a container's OS is smaller and more efficient
    than hypervisor software. Containers package an application and its dependencies
    and run them as an OS process on the host machine.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 容器和虚拟机监控程序都能使应用程序更快、更具可移植性，并且更高效地部署。然而，它们实现这些目标的方式不同。你已经学过，虚拟机监控程序软件通过在宿主机的环境上实现一个轻量级操作系统。而与此不同，容器的操作系统比虚拟机监控程序软件更小、更高效。容器将应用程序及其依赖项打包，并将它们作为宿主机上的操作系统进程运行。
- en: 'A container package can run anywhere a container engine is installed. For example,
    please refer to *Figure 5.2* for a graphical depiction of the container-based
    architecture, and then compare it with the hypervisor virtualization architectures
    shown in the following figure:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 容器包可以在安装了容器引擎的任何地方运行。例如，请参考*图5.2*，了解基于容器的架构的图示，然后将其与下图所示的虚拟机监控程序虚拟化架构进行比较：
- en: '![Figure 5.3 – Container-based virtualization'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.3 – 基于容器的虚拟化'
- en: '](img/B17087_Figure_5.3.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17087_Figure_5.3.jpg)'
- en: Figure 5.3 – Container-based virtualization
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.3 – 基于容器的虚拟化
- en: At first glance, the container-based virtualization model looks relatively similar
    to the hosted hypervisor model. They both provide an abstraction layer between
    the host OS and the applications. However, VMs with hypervisors isolate the hardware
    and its OS to run the virtualized applications' full OSes. In contrast, the container
    engines provide an abstraction layer on top of the hardware's OSes in order to
    run the applications directly with their OS of preference without utilizing the
    OS installed on the VMs.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，基于容器的虚拟化模型看起来与托管虚拟机监控程序模型相似。它们都在宿主操作系统和应用程序之间提供一个抽象层。然而，虚拟机与虚拟机监控程序通过隔离硬件及其操作系统来运行虚拟化应用程序的完整操作系统。相比之下，容器引擎在硬件操作系统之上提供一个抽象层，使得应用程序能够直接运行其首选的操作系统，而无需使用安装在虚拟机上的操作系统。
- en: A commercial OS, such as Linux, Windows, or macOS, needs to provide numerous
    common services to support computer applications that are running on the hardware
    where the OS is installed. However, most of those services are not required by
    any single application. Therefore, containers do not contain a complete OS – only
    the bare-bones elements that are necessary to run the application it supports.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 商业操作系统，如Linux、Windows或macOS，需要提供许多常见服务，以支持在其安装的硬件上运行的计算机应用程序。然而，大多数服务并不是单个应用程序所需要的。因此，容器不包含完整的操作系统——只有运行其支持的应用程序所必需的最基本元素。
- en: The container-based virtualization approach is much more lightweight and flexible
    than hypervisor-based VMs. For example, where a VM might take up tens of gigabytes
    of space, a container might only require tens of megabytes. Additionally, containers
    tend to be more secure since each container's OS is self-contained, thereby offering
    fewer entry points for malicious actors (for instance, through malware or intrusion
    attacks).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 基于容器的虚拟化方法比基于虚拟机监视器的虚拟机更加轻量级和灵活。例如，虚拟机可能需要几十GB的空间，而容器可能仅需几十MB。此外，由于每个容器的操作系统是自包含的，因此容器通常更安全，因为对恶意行为（例如通过恶意软件或入侵攻击）的入口点较少。
- en: Metaphorically, containers serve a transport function that mimics the shipping
    containers used to move physical products by ships, trains, and trucks (for instance,
    one container type from the origin to the final destination). In the software-based
    analogy, developers build products and deploy them to their target host environments
    via their containers. But in our software-based variant, the containers transport
    the application together with just the resources it needs to execute during runtime
    as virtualized guests on the targeted host's physical environment.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 隐喻上，容器扮演着一种运输功能，模拟了用于通过船舶、火车和卡车移动物理产品的集装箱（例如，一种容器类型从起点到最终目的地）。在软件类比中，开发人员通过容器构建产品，并将其部署到目标主机环境。但在我们的软件类比中，容器将应用程序及其在目标主机物理环境中运行时所需的资源一起作为虚拟化客户端。
- en: These resources include the code, runtime, system libraries, system tools, and
    configuration settings. The containers are constructed as *images* that are separate
    from their runtime environment. Thus, they can be deployed anywhere – just as
    long as the target environment has a container engine installed, such as Docker
    Engine.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这些资源包括代码、运行时、系统库、系统工具和配置设置。容器被构建为*镜像*，与其运行时环境分开。因此，它们可以在任何地方部署 - 只要目标环境安装有容器引擎，比如
    Docker Engine。
- en: A modern approach to software development, especially in DevOps-oriented pipelines,
    defines and creates very small pieces of code as independent services, called
    microservices. The microservices-based development strategy allows the rapid coding,
    testing, and deployment of new functionality into production – often, this can
    be multiple times per day. Conceptually, the microservices approach mimics the
    concept of single-piece flow concepts in Lean production practices.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发的现代方法中，特别是在面向 DevOps 的流水线中，将定义和创建非常小的代码片段作为独立服务，称为微服务。基于微服务的开发策略允许将新功能快速编码、测试和部署到生产环境中
    - 这通常可以是每天多次。在概念上，微服务方法模仿了精益生产实践中单件流概念的概念。
- en: You will learn about the value of implementing single-piece flows in [*Chapter
    7*](B17087_07_Final_PD_epub.xhtml#_idTextAnchor183), *Mapping the Current State
    (VSM Step 4)*, and [*Chapter 8*](B17087_08_Final_PD_epub.xhtml#_idTextAnchor209),
    *Identifying Lean Metrics (VSM Step 5)*, of this book. For now, it's essential
    to understand that single-piece flows represent the most efficient Lean development
    processes.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 您将了解在[*第 7 章*](B17087_07_Final_PD_epub.xhtml#_idTextAnchor183)中实施单件流的价值，*映射当前状态（VSM
    第 4 步）*，以及[*第 8 章*](B17087_08_Final_PD_epub.xhtml#_idTextAnchor209)，*识别精益指标（VSM
    第 5 步）*。目前，重要的是理解单件流代表最高效的精益开发流程。
- en: 'Container engines perform two critical services: **clustering** and **orchestration**.
    Clustering connects two or more servers as a single virtualized computer. The
    clustering of servers allows them to operate in parallel, and the container engines
    manage load balancing and fault tolerance activities across the cluster of servers.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 容器引擎提供两项关键服务：**集群**和**编排**。集群将两个或多个服务器连接为一个虚拟化的计算机。服务器的集群允许它们并行操作，容器引擎管理跨服务器集群的负载均衡和容错活动。
- en: Container orchestration automates the deployment, management, scaling, and networking
    of containers. Orchestration is critical when scheduling between hundreds or thousands
    of individual containers consisting of microservices that operate across multiple
    clusters.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 容器编排自动化容器的部署、管理、扩展和网络配置。在调度数百或数千个由微服务组成的单个容器时，编排至关重要，这些微服务跨多个集群运行。
- en: When using software containers, software developers do not need to worry about
    deployments across multiple types of production environments nor the virtualization
    of hardware resources; the containers have everything they need to run the application
    on a desktop, an organization's backend servers, or computing environments available
    in the cloud.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用软件容器时，软件开发人员无需担心在多种生产环境中部署，也不用担心硬件资源的虚拟化；容器具有在桌面、组织后端服务器或云中提供应用程序运行所需的一切。
- en: Having it both ways
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 兼得其利
- en: Still, an IT organization could deploy both hypervisor and container-based virtualization
    strategies to maximize their flexibility when deploying and managing applications.
    Both hypervisors and container engines can live on the same physical server.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: IT 组织可以在部署和管理应用程序时，通过部署虚拟化策略，例如半导体和基于容器的虚拟化策略，来最大化其灵活性。两种虚拟化技术，即半导体和容器引擎可以在同一台物理服务器上共存。
- en: Containers do well in cloud-based environments and when developers want to build
    fine-grained services, called microservices. IT shops without many legacy applications
    might prefer to go down this route right from the beginning as microservices offer
    the greatest speed and flexibility to build, test, and deploy new IT services.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于云的环境中，容器表现良好，并且当开发人员希望构建称为微服务的细粒度服务时，容器表现良好。没有太多传统应用程序的 IT 店可能更倾向于从一开始采用这种方法，因为微服务提供了构建、测试和部署新
    IT 服务的最大速度和灵活性。
- en: On the other hand, VMs provide all the management capabilities and security
    tools available within a mature OS. VMs provide a **hardware abstraction layer**
    (**HAL**) that eliminates software application compatibility issues with the underlying
    hardware. VMs effectively utilize memory capacities and multiple cores in CPUs
    that allow the consolidation of numerous applications and tasks across each physical
    system. In fact, VMs are optimal for running applications requiring persistent
    and high-transaction volume workloads. For example, applications with large transactional
    databases – think of bank ATMs that require resilient and persistent backends
    – cannot lose data, and have high **input/output** (**I/O**) transaction requirements.
    Finally, some third-party applications have not and might not adopt the container
    model.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，虚拟机提供了所有成熟操作系统中可用的管理功能和安全工具。虚拟机提供了消除与底层硬件兼容性问题的**硬件抽象层**（**HAL**）。虚拟机有效地利用了内存容量和多核
    CPU 中的多个核心，允许在每个物理系统上合并大量应用程序和任务。实际上，虚拟机非常适合运行需要持久性和高事务量工作负载的应用程序。例如，具有大型事务数据库的应用程序——考虑需要具有弹性和持久性后端的银行
    ATM，不得丢失数据，并且具有高**输入/输出**（**I/O**）事务需求。最后，一些第三方应用程序尚未采用容器模型，可能也不会采用。
- en: Now that you understand the necessary tooling required to support CI/CD, we
    can introduce the types of activities included in CI and CD processes. We'll start
    by defining the activities of CI.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您了解了支持 CI/CD 所需的必要工具，我们可以介绍包括在 CI 和 CD 进程中的活动类型。我们将从定义 CI 的活动开始。
- en: Defining CI
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义 CI
- en: Fundamentally, CI is a development approach that speeds up the velocity of software
    development. CI enforces a discipline that merges all developers' working copies
    of their code to a shared repository several times a day on a technical level.
    The purpose of this is to verify each incremental code integration's functionality
    through software build and test processes when developing the code. The goal is
    to ensure the main software code is always in a working and potentially deployable
    state.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 从根本上说，CI 是一种加快软件开发速度的开发方法。CI 在技术层面上强制执行一种纪律，即将所有开发者的代码工作副本几次每天合并到共享存储库中。其目的是通过软件构建和测试过程验证每个增量代码集成的功能。其目标是确保主要软件代码始终处于工作且可能部署的状态。
- en: A mature CI pipeline includes automated build and automated test capabilities;
    though, these two capabilities were not part of the original definition. Today,
    CI workflows encompass the process of taking each new code *commit* from the main
    branch (that is, the mainline code, trunk, or master) and running the appropriate
    steps to verify that commit.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 成熟的 CI 流水线包括自动化构建和自动化测试功能；尽管这两种功能不是原始定义的一部分。今天，CI 工作流程涵盖了从主分支（即主线代码、主干或主）获取每个新代码提交，并运行适当步骤以验证该提交的过程。
- en: 'A basic CI pipeline spans the following software development activities, as
    shown in *Figure 5.4*:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的 CI 流水线涵盖以下软件开发活动，如*图5.4*所示：
- en: '![Figure 5.4 – CI pipeline flow'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.4 – CI 流水线流程'
- en: '](img/B17087_Figure_5.4.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17087_Figure_5.4.jpg)'
- en: Figure 5.4 – CI pipeline flow
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – CI管道流程
- en: 'The preceding diagram is a high-level view of a more complicated process. As
    an example of the complexities, the following tasks are usually marshaled via
    a CI automation server, such as Jenkins:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的图示是一个更复杂过程的高层次视图。作为复杂性的一个例子，以下任务通常通过CI自动化服务器（如Jenkins）来管理：
- en: Move the source code to the version control system.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将源代码移至版本控制系统。
- en: Manage the version control system's push, pull, and merge functions.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理版本控制系统的推送、拉取和合并功能。
- en: Execute the software build process (for example, compiling the source code,
    linking the object files and libraries, and packaging the libraries and tools).
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行软件构建过程（例如，编译源代码，链接目标文件和库，以及打包库和工具）。
- en: Execute static code analysis.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行静态代码分析。
- en: Run automated unit tests.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行自动化单元测试。
- en: Execute code coverage analysis.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行代码覆盖率分析。
- en: Provision test servers.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供测试服务器。
- en: Set up test fixtures (for example, code that sets up the test environment and
    then returns it to its original state once the test is complete).
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置测试环境（例如，设置测试环境的代码，并在测试完成后将其恢复到原始状态）。
- en: Run automated tests.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行自动化测试。
- en: Publish logs and reports.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布日志和报告。
- en: Send information to the developers.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将信息发送给开发者。
- en: The CI process appears to be a lot of work and a highly complex process – and
    it is when implemented as a manual process. However, as an automated CI process,
    the complete feedback loop should run for less than 10–20 minutes. The goal is
    to make the process so quick and straightforward that developers won't hesitate
    to initiate the process several times per day.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: CI过程看起来是一项繁重且高度复杂的工作——确实如此，特别是在作为手动过程实施时。然而，作为自动化的CI过程，完整的反馈循环应该在10到20分钟内完成。目标是使这个过程快速且简单到，开发者每天都能毫不犹豫地多次启动它。
- en: The CI strategy addresses two fundamental problems. The first is to make sure
    every new piece of code implements its functionality correctly, according to its
    requirements and acceptance criteria, before making the change part of the main
    code. The second is to ensure the newly integrated code doesn't cause problems
    or bugs in the application's mainline code.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: CI策略解决了两个根本性问题。第一个问题是确保每一块新代码在变更成为主代码的一部分之前，能够根据需求和验收标准正确实现其功能。第二个问题是确保新集成的代码不会在应用程序的主干代码中引起问题或错误。
- en: Encouraging frequent testing
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 鼓励频繁测试
- en: It should be pretty clear that, fundamentally, CI is a process used to develop
    and test small increments of new software functionality rapidly and frequently.
    This strategy supports the first and seventh principles of the *Manifesto for
    Agile Software Development* (Beck et al., 2001).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 从根本上来说，CI是一个用于快速且频繁地开发和测试小增量新功能的软件开发过程。这个策略支持《敏捷软件开发宣言》中的第一条和第七条原则（Beck等人，2001年）。
- en: The Agile Manifesto principles 1 and 2
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 《敏捷宣言》原则 1 和 2
- en: 1) Our highest priority is to satisfy the customer through early and continuous
    delivery of valuable software.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 1) 我们的首要任务是通过早期和持续交付有价值的软件来满足客户需求。
- en: 2) Working software is the primary measure of progress.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 2) 可工作的软件是进展的主要衡量标准。
- en: Please refer to [https://agilemanifesto.org/principles.html](https://agilemanifesto.org/principles.html)
    for more details.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 [https://agilemanifesto.org/principles.html](https://agilemanifesto.org/principles.html)
    获取更多详情。
- en: While the first principle is valuable, it turns out the seventh principle is
    often more important, at least in terms of the benefits of CI. Let's take a moment
    to understand why.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然第一条原则很有价值，但事实证明，第七条原则通常更为重要，至少在持续集成（CI）的好处方面是如此。让我们花点时间来理解为什么。
- en: In the traditional waterfall model, software developers create all of the code
    that is necessary to implement all identified requirements before initiating any
    testing. A significant problem with that development strategy is that the source
    of the software bugs becomes increasingly challenging to locate and resolve in
    larger code sets. A much better strategy is to test small increments, or units,
    of new code every step of the way. The advantage of this is that the developers
    know more precisely what they changed in the code when an error or bug shows up
    in testing.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的瀑布模型中，软件开发者在启动任何测试之前，首先创建实现所有已识别需求的所有代码。这个开发策略的一个重大问题是，当代码集越来越大时，软件漏洞的源头变得越来越难以定位和解决。一个更好的策略是，每一步都对新代码的小增量或单元进行测试。这样做的好处是，当测试中出现错误或漏洞时，开发者可以更准确地知道他们在代码中做了什么修改。
- en: Additionally, frequent code updates can help identify code merge conflicts,
    diverging code strategies, and duplication attempts. In other words, with CI and
    automated testing, developers are forced to address these issues as they arise
    and not wait until they become exceedingly complex, time-consuming, and expensive
    to fix.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，频繁的代码更新有助于识别代码合并冲突、代码策略的分歧以及重复尝试。换句话说，借助 CI 和自动化测试，开发人员必须在问题出现时立即处理这些问题，而不是等到它们变得极其复杂、耗时且昂贵时才解决。
- en: This section ends our discussion on CI. Next, we will learn how CD capabilities
    both augment and improve the velocity of the CI phase of software delivery.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 本节结束了我们对 CI 的讨论。接下来，我们将学习 CD 功能如何增强和改善软件交付中 CI 阶段的速度。
- en: Defining CD
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义 CD
- en: CD capabilities allow product teams to stand up new environments to test new
    code updates with minimal manual labor and rapidly. CD's primary goal is to turn
    new updates into routine and high-velocity tasks that a development team can perform
    on-demand.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: CD 功能使产品团队能够快速搭建新的环境，以最小的人工干预测试新的代码更新。CD 的主要目标是将新更新转变为常规的、高速的任务，开发团队可以按需执行。
- en: 'Just as CI has a sequential sequence of steps, so does the CD process, as depicted
    in *Figure 5.5*:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 正如 CI 具有一系列连续的步骤，CD 过程也如此，如*图 5.5*所示：
- en: '![Figure 5.5 – CD pipeline flow'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.5 – CD 管道流程'
- en: '](img/B17087_Figure_5.5.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17087_Figure_5.5.jpg)'
- en: Figure 5.5 – CD pipeline flow
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5 – CD 管道流程
- en: 'The CD pipeline view depicted in the preceding diagram provides a high-level
    view, and similarly to the CI pipeline, it can be decomposed into a lengthier
    list of related activities. These activities might include the following:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图表中展示的 CD 管道视图提供了一个高层次的视图，类似于 CI 管道，它也可以被分解为一系列相关活动的更长列表。这些活动可能包括以下内容：
- en: Conducting static code analysis
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进行静态代码分析
- en: Conducting unit tests
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进行单元测试
- en: Conducting API tests
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进行 API 测试
- en: Staging to test environment(s)
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署到测试环境
- en: Parallel testing (for instance, useability/accessibility, exploratory, UI, and
    performance testing)
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并行测试（例如，可用性/可访问性测试、探索性测试、UI 测试和性能测试）
- en: Staging to preproduction environment
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署到预生产环境
- en: Executing application tests (for example, acceptance, exploratory, capacity,
    load, and stress testing)
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行应用程序测试（例如，验收测试、探索性测试、容量测试、负载测试和压力测试）
- en: Executing software and network security tests
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行软件和网络安全测试
- en: Conducting UAT
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进行用户验收测试（UAT）
- en: Deploying the application to production environments
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用程序部署到生产环境
- en: Again, this list is not meant to be an exhaustive summary of all the possible
    tests that a team might need to execute.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，这个列表并不打算全面总结团队可能需要执行的所有测试。
- en: One final comment is that there is no definitive place where CI as a process
    ends and CD begins. For example, some analysts put the merge code process – a
    source code integration activity – in the CI pipeline, while others view it as
    a CD pipeline activity. In reality, CI/CD pipelines represent a continuous flow
    across the entire **systems development life cycle** (**SDLC**). There's no reason
    to make the distinction except to communicate the type of work that occurs in
    each section of the pipeline.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一个最终的评论是，CI 作为一个过程的结束与 CD 开始之间并没有明确的界限。例如，一些分析师将合并代码过程——一个源代码集成活动——放在 CI 管道中，而其他人则视其为
    CD 管道活动。实际上，CI/CD 管道代表了整个**系统开发生命周期**（**SDLC**）中的连续流程。除了为了传达每个管道部分的工作类型外，没有理由去做这种区分。
- en: Once the development team determines which tests to run and which tools they
    require, they can automate the tests' execution by writing configuration instructions
    in machine-readable code.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦开发团队确定了要运行的测试和所需的工具，他们可以通过编写机器可读代码中的配置指令来自动化测试的执行。
- en: Automating configuration tasks via code
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过代码自动化配置任务
- en: Before the advent of CD methods and tools, development teams had to ask the
    operations staff to set up testing and preproduction staging environments. Then,
    the operations staff manually followed the instructions in the configuration documentation
    to set up networks, computing equipment, and software. Such manual processes are
    expensive and time-consuming.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CD 方法和工具出现之前，开发团队必须要求运维人员设置测试和预生产环境。然后，运维人员手动按照配置文档中的指示设置网络、计算设备和软件。这样的手动过程既昂贵又耗时。
- en: In a modern CD environment, developers can deploy software and systems configuration
    instructions as machine-readable code. Moreover, these configurations can be managed
    in a source control repository and made available for rapid deployment as a self-service
    offering. The infrastructure and software resources are provisioned on demand
    in a cloud environment and are made available within minutes after executing the
    machine-readable code.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代的持续交付（CD）环境中，开发人员可以将软件和系统配置指令作为机器可读的代码进行部署。此外，这些配置可以在源代码控制库中进行管理，并作为自助服务提供，供快速部署使用。基础设施和软件资源在云环境中按需提供，并在执行机器可读代码后几分钟内即可使用。
- en: The term used in the software industry to describe automated deployment configurations
    is Infrastructure as Code (IaC). However, you might have also come across the
    term Configuration as Code (CaC), which individual IT practitioners and vendors
    use to connote the general implementation of configurations as source code. We'll
    discuss the semantic differences between IaC and CaC later in this chapter.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 软件行业中用来描述自动化部署配置的术语是基础设施即代码（IaC）。然而，您可能也遇到过“配置即代码”（CaC）这一术语，它是单个IT从业者和供应商用来表示将配置作为源代码进行实现的通用说法。我们将在本章后面讨论IaC和CaC之间的语义差异。
- en: For now, it's essential to understand that IaC and CaC implement configuration
    instructions as machine-readable code to stand up and configure environments and
    software on demand. Before we get into the details of IaC and CaC, first, let's
    understand why CM is so important and why some configuration items cannot be deployed
    as code.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，理解基础设施即代码（IaC）和配置即代码（CaC）如何通过机器可读的代码实现配置指令，用于按需搭建和配置环境以及软件至关重要。在详细讨论IaC和CaC之前，让我们首先理解为什么配置管理（CM）如此重要，以及为什么某些配置项不能以代码形式进行部署。
- en: Both infrastructure and software configurations broadly fall under the discipline
    of **software configuration management**, as described in the following subsection.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 基础设施和软件配置广泛地属于**软件配置管理**这一学科，具体内容请参见以下小节。
- en: Protecting our software assets
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护我们的软件资产
- en: Complex software releases involve deploying and configuring a lot of hardware,
    network and application security, software components, and other related information
    artifacts. CM ensures that we have a complete understanding of the state and artifacts
    that make up each unique software release. Without that information, it's challenging,
    if not impossible, to go back to fix bugs and defects, sustain the product, or
    enhance previous software releases.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂的软件发布涉及部署和配置大量硬件、网络和应用安全、软件组件及其他相关信息工件。配置管理确保我们对构成每个独特软件发布的状态和工件有一个完整的理解。没有这些信息，我们很难，甚至不可能，回溯修复bug和缺陷、维持产品或增强以前的软件版本。
- en: As the software evolves, each new release has a unique configuration. With each
    release, some of the components will have changed, while others will not. Although
    all the components might start with the same version control number, those version
    control IDs will vary across the software components and other information-oriented
    artifacts over time. Therefore, assigning a version control ID to the release
    is not enough. We need to know the specific versions of each of the information
    artifacts and software components that make up the release.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 随着软件的演进，每个新版本都有其独特的配置。每次发布时，某些组件会发生变化，而其他组件则不会。尽管所有组件可能从相同的版本控制编号开始，但随着时间推移，这些版本控制ID会在软件组件和其他信息导向的工件之间有所不同。因此，单单给发布版本分配一个版本控制ID是不够的。我们需要了解构成该发布的每个信息工件和软件组件的具体版本。
- en: Modern version control repositories, such as Git (a local repo) and GitHub (a
    web-based collaboration SCM platform and repository), use a tree structure as
    a metaphor for managing the configuration items associated with each software
    release.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现代版本控制库，如Git（本地仓库）和GitHub（基于Web的协作源代码管理平台和仓库），使用树状结构作为隐喻来管理与每个软件发布相关的配置项。
- en: Getting back to the tree metaphor applied to SCM repositories, developers create
    (and evolve), integrate, and test components as separate *branches* of an application
    before merging them with the main *trunk* of code. The main code is the closest
    code set available for release at any given time. That's not to say the main code
    is releasable, but it is the furthest along in terms of integrated capabilities
    and testing.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 回到应用于软件配置管理（SCM）仓库的树形隐喻，开发人员会创建（并演化）、集成和测试作为应用程序独立*分支*的组件，然后再将它们与主*干*代码合并。主代码是任何给定时间点上最接近发布的代码集。并不是说主代码一定能发布，但它在集成功能和测试方面是最为成熟的。
- en: However, besides tracking our source code, we also need to track all the other
    information artifacts that go with each release, which is the purpose of SCM.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，除了追踪源代码外，我们还需要追踪与每次发布相关的所有其他信息工件，这就是软件配置管理（SCM）的目的。
- en: 'Information and software artifacts under SCM encompass the entire SDLC processes,
    including the following:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件配置管理（SCM）下的信息和软件工件涵盖了整个软件开发生命周期（SDLC）过程，包括以下内容：
- en: '**Software requirements**: This includes functional and nonfunctional requirements
    specified in specifications, use cases, epics, and user stories.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件需求**：这包括在规范、用例、史诗和用户故事中指定的功能性和非功能性需求。'
- en: '**Environment**: This includes network switches, firewalls, routers, servers,
    OSes, cybersecurity systems, databases, and other critical infrastructure elements.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境**：这包括网络交换机、防火墙、路由器、服务器、操作系统、安全网络系统、数据库和其他关键基础设施元素。'
- en: '**Software builds**: This includes instructions to compile, link, and otherwise
    convert source code files into a standalone software artifact(s) so they can run
    on a computer.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件构建**：这包括编译、链接和将源代码文件转换为独立软件工件的指令，以便它们可以在计算机上运行。'
- en: '**Software release plan**: This provides instructions on how to release the
    product into production, its timelines, delivery dates, and production-oriented
    testing requirements such as **UAT**, QA testing, preproduction testing (for instance,
    stress, load, and performance), and field testing, as applicable.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件发布计划**：这提供了如何将产品发布到生产环境中的指示，包括其时间表、交付日期以及面向生产的测试要求，如**用户验收测试（UAT）**、质量保证（QA）测试、预生产测试（例如压力测试、负载测试和性能测试）以及现场测试等。'
- en: '**Software reviews**: This could include peer reviews, **software quality assurance**
    (**SQA**) reviews, or **independent verification and validation** (**IV&V**) testing
    by third parties.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件评审**：这可能包括同行评审、**软件质量保证**（**SQA**）评审或由第三方进行的**独立验证与验证**（**IV&V**）测试。'
- en: '**Version control**: This includes information on the current and past versions
    of all software system components and related artifacts, which are usually managed
    within a source control repository.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本控制**：这包括当前和过去所有软件系统组件及相关工件的版本信息，通常在源代码控制仓库中进行管理。'
- en: '**Configuration items**: This includes all the software components and artifacts,
    as identified by their independent names and version control IDs and belonging
    to a specific release.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置项**：这包括所有软件组件和工件，它们由独立的名称和版本控制ID标识，并属于特定的发布版本。'
- en: '**Testing information**: This includes test cases, test scripts, test scenarios,
    and test results associated with each software release.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试信息**：这包括与每次软件发布相关的测试用例、测试脚本、测试场景和测试结果。'
- en: '**User support**: The support team''s information provides user assistance
    guidance and helps troubleshoot user problems during the product''s implementation
    and use.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户支持**：支持团队的信息提供用户帮助指南，并在产品实施和使用过程中协助解决用户问题。'
- en: '**Documentation**: This can include training aids, systems administration documentation,
    and architecture and design documentation.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档**：这可以包括培训工具、系统管理文档、架构和设计文档。'
- en: '**Issue tracking**: This is used to document information related to bugs and
    defects. A bug results from a coding error, while a defect is an identified deviation
    from the requirements.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题跟踪**：这用于记录与缺陷和漏洞相关的信息。漏洞是由编码错误引起的，而缺陷则是已识别的与需求偏离的地方。'
- en: '**Task management**: This is used to maintain information on activities across
    the development and delivery life cycle.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**任务管理**：这用于维护开发和交付生命周期中活动的信息。'
- en: Most of the preceding information-based components that go with a release are
    not part of the application's source code. Therefore, the product team must implement
    processes and systems that will record and maintain this information for each
    product release. We need to manage all this information by release to ensure operability
    and sustainability in the production environments, fix bugs or defects upon discovery,
    and enhance the product over its life cycle.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数与版本发布相关的信息组件并不属于应用程序的源代码。因此，产品团队必须实施流程和系统，记录并维护每个产品版本的这些信息。我们需要按版本管理所有这些信息，以确保在生产环境中的可操作性和可持续性，发现后修复错误或缺陷，并在产品生命周期内进行改进。
- en: Now that we understand the more significant software configuration issues, let's
    examine the differences between managing and executing CaC and IaC. We'll start
    with a description of CaC.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了更重要的软件配置问题，让我们来看一下管理和执行 CaC 与 IaC 之间的区别。我们将从描述 CaC 开始。
- en: CaC
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: CaC
- en: CaC is a broad term that implies implementing configuration files in a source
    code repository, but the term is more generally applied to application configuration
    information. The purpose of CaC is to facilitate the versioned migration of application
    configurations between different environments.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: CaC 是一个广泛的术语，意味着在源代码库中实现配置文件，但该术语通常更广泛地应用于应用程序的配置信息。CaC 的目的是促进在不同环境之间迁移应用程序配置的版本化。
- en: CaC configurations are implemented as machine-readable code via configuration
    files that focus on the settings and parameters that are required to install software
    applications, servers, and OSes. Developers specify configuration settings in
    CaC with parameters that can be changed to affect the target information system's
    remote hardware, software, or firmware components. These configuration settings
    and parameters affect the security levels and functionality of the system.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: CaC 配置通过配置文件以机器可读的代码形式实现，重点关注安装软件应用程序、服务器和操作系统所需的设置和参数。开发人员通过 CaC 指定配置设置，参数可以更改以影响目标信息系统的远程硬件、软件或固件组件。这些配置设置和参数会影响系统的安全级别和功能。
- en: 'A virtually unending list of potential configurations must be implemented and
    maintained across IT products, especially for those in which security-related
    configuration settings can be defined. The US **National Institute of Standards
    and Technology** (**NIST**) *Special Publication 800-53 (Rev. 4)* documents the
    following examples of configurable items:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 必须在 IT 产品中实现和维护几乎无尽的潜在配置，特别是在可以定义与安全相关的配置设置的产品中。美国**国家标准与技术研究院**（**NIST**）*特别出版物
    800-53（第4版）*列出了以下可配置项目的示例：
- en: Mainframe computers, servers (for example, database, email, authentication,
    web, proxy, file, domain name), workstations, I/O devices (for example, scanners,
    copiers, and printers), network components (for example, firewalls, routers, gateways,
    voice and data switches, wireless access points, network appliances, sensors),
    OSes, middleware, and applications ([https://nvd.nist.gov/800-53/Rev4/control/CM-6](https://nvd.nist.gov/800-53/Rev4/control/CM-6)).
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 大型主机、服务器（例如，数据库、电子邮件、身份验证、Web、代理、文件、域名）、工作站、I/O 设备（例如，扫描仪、复印机和打印机）、网络组件（例如，防火墙、路由器、网关、语音和数据交换机、无线接入点、网络设备、传感器）、操作系统、中间件和应用程序（[https://nvd.nist.gov/800-53/Rev4/control/CM-6](https://nvd.nist.gov/800-53/Rev4/control/CM-6)）。
- en: 'The NIST publication also lists standard security-related parameters, as noted
    in the passage that follows:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: NIST 出版物还列出了标准的安全相关参数，如下文所示：
- en: Security-related parameters impact the security state of information systems,
    including the parameters required to satisfy other security control requirements.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 与安全相关的参数会影响信息系统的安全状态，包括满足其他安全控制要求所需的参数。
- en: (i) registry settings,
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: (i) 注册表设置，
- en: (ii) account, file, directory permission settings,
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: (ii) 账户、文件、目录权限设置，
- en: (iii) settings for functions, ports, protocols, services, and remote connections.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: (iii) 功能、端口、协议、服务和远程连接的设置。
- en: Established settings become part of the system's configuration baseline parameters.
    In a manual process, the software developers create security configuration checklists,
    lockdown and hardening guides, security reference guides, and security technical
    implementation guides. The operations staff follow these guides to configure the
    systems and applications properly. The value of CaC is that it automates and streamlines
    the process of establishing the configuration settings and parameters.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 已建立的设置成为系统配置基准参数的一部分。在手动过程中的软件开发人员会创建安全配置检查清单、锁定和加固指南、安全参考指南和安全技术实施指南。操作人员根据这些指南正确配置系统和应用程序。CaC
    的价值在于它自动化并简化了配置设置和参数的建立过程。
- en: In contrast with CaC, IaC is about configuring IT infrastructures, including
    servers, networks, load balancing, and security, as described in the following
    subsection.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 与 CaC 相对，IaC 是关于配置 IT 基础设施，包括服务器、网络、负载均衡和安全性，如以下小节所述。
- en: IaC
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IaC
- en: As its name implies, IaC allows developers to use a programming or scripting
    language to generate a repeatable set of code or scripted instructions to provision
    IT infrastructures. With IaC capabilities, developers do not need to manually
    provision or change the configurations of infrastructure components, such as servers,
    OSes, database connections, storage, networks, VMs, load balancers, and network
    topologies.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名称所示，IaC 允许开发人员使用编程或脚本语言生成一组可重复的代码或脚本指令来配置 IT 基础设施。通过 IaC 功能，开发人员不需要手动配置或更改基础设施组件的配置，例如服务器、操作系统、数据库连接、存储、网络、虚拟机、负载均衡器和网络拓扑。
- en: Without IaC capabilities, the developers must manually set up and configure
    new system environments every time they want to develop, test, or deploy a software
    application. From the perspective of Lean, and therefore our customers, these
    activities are unnecessarily repetitive and non-value-added. That's not to say
    they are not necessary. However, automating such processes improve cycle times
    and eliminate waste in the form of human, or other errors.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有 IaC 功能，开发人员必须每次都手动设置和配置新的系统环境，当他们想要开发、测试或部署软件应用程序时。从精益的角度来看，因此从客户的角度看，这些活动是不必要的重复且没有增值的。这并不是说这些活动不必要。然而，自动化这些过程能提高周期时间，并消除以人为或其他错误形式的浪费。
- en: The issue of human error is especially concerning as the accumulation of configuration
    errors leads to **environmental drift** where each new environment configuration
    becomes uniquely different to previous configurations. Developers call the new
    configurations *snowflakes* because they share a similar characteristic in that
    each is unique from the others.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 人为错误的问题尤其令人担忧，因为配置错误的积累会导致**环境漂移**，其中每个新的环境配置都与以前的配置截然不同。开发人员称这些新配置为*雪花*，因为它们有一个相似的特征——每个配置都是独一无二的。
- en: Managing environmental drift
  id: totrans-206
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 管理环境漂移
- en: The problem with environmental drift is that each new change in the system's
    configuration can affect previously deployed assets. Recall that the function
    of operations is to maintain stable, secure, and available environments and applications.
    However, let's suppose a developer fails to communicate a new configuration change
    to the infrastructure or applications. In that case, those modifications cause
    the production environments to fail or expose them to security-related risks.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 环境漂移的问题在于，每次系统配置的更改都可能影响之前部署的资产。回想一下，操作的功能是保持环境和应用程序的稳定、安全和可用。然而，假设某个开发人员未能将新的配置更改通知基础设施或应用程序，那么这些修改可能导致生产环境失败或暴露于与安全相关的风险。
- en: The same situation is valid for engineering and test environments. Changes in
    configurations make it increasingly difficult to isolate and fix errors that result
    from the configuration changes, as opposed to bugs or defects in the code. Again,
    each new configuration change can introduce waste in the form of defects that
    are time-consuming and expensive to resolve.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 对于工程和测试环境，情况也是如此。配置更改使得从配置变化而不是代码中的 bug 或缺陷中隔离和修复错误变得越来越困难。同样，每个新的配置更改都可能引入以缺陷形式的浪费，这些缺陷需要花费大量时间和成本来解决。
- en: There are innumerable issues that contribute to environmental drift. However,
    most often, these configuration changes result from improper documentation, communication,
    or the implementation of new or modified parameters when setting up servers, configuring
    networks, or other computing resources.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 有无数的问题会导致环境漂移。然而，这些配置变更大多数来源于文档不当、沟通不畅或在搭建服务器、配置网络或其他计算资源时引入了新的或修改过的参数。
- en: The preceding examples show human error as the root cause. Computers are better
    at executing rote instructions with accurately described configurations defined
    via code. But those types of errors can be discovered during the testing process,
    thereby avoiding any negative consequences and limiting any risks when new releases
    move into production.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例显示人类错误是根本原因。计算机在执行通过代码精确描述的配置时更擅长执行重复指令。然而，这些类型的错误可以在测试过程中被发现，从而避免负面后果，并限制新发布版本进入生产时的风险。
- en: Avoiding configuration errors
  id: totrans-211
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 避免配置错误
- en: As with the CaC concepts, development teams employ IaC write scripts or code
    to describe the configuration settings and parameters. Each configuration file
    represents a single and authoritative source of defining and setting up an environment
    or updating an environment over time.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 与CaC概念类似，开发团队使用IaC编写脚本或代码来描述配置设置和参数。每个配置文件代表一个单一的、权威的环境定义来源，并随时间推移更新环境设置。
- en: The code or scripts are saved as standalone configuration files and checked
    into the development team's version control and SCM systems. The advantage of
    managing IaC files in an SCM system is that the executable routines become freely
    available to all developers and operations staff via a self-service model.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 代码或脚本被保存为独立的配置文件，并检查到开发团队的版本控制和SCM系统中。将IaC文件管理在SCM系统中的好处是，可执行的例程通过自服务模型自由地提供给所有开发人员和运维人员。
- en: In other words, both CaC and IaC help to improve the velocity of software deliveries
    while simultaneously reducing errors.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，CaC和IaC有助于提升软件交付速度，同时减少错误。
- en: Improving velocities while reducing errors
  id: totrans-215
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 提高交付速度的同时减少错误
- en: With CaC and IaC, IT staff can download and execute configuration files on demand
    and set up a new environment in minutes without introducing manual errors. The
    self-service model means that developers don't need to involve the operations
    team to stand up and provision new testing environments. Moreover, the operations
    team can ensure the code and configurations for new releases are appropriately
    tested before releasing new updates to the production environments.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 通过CaC和IaC，IT人员可以按需下载并执行配置文件，在几分钟内搭建新的环境而不引入人工错误。自服务模型意味着开发人员无需涉及运维团队即可搭建和配置新的测试环境。此外，运维团队可以确保在发布新版本到生产环境之前，代码和配置已经过充分的测试。
- en: IaC enables high velocities for CD to match the same types of velocities developers
    have available via their CI tools. With a CI/CD pipeline, developers can change
    both the code and configurations on the fly and stand up test environments to
    quickly determine that everything is working correctly. Moreover, high-performing
    shops can deploy new functionality multiple times per day with lead times of less
    than 1 hour (Forsgren et al., Accelerate, 2018).
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: IaC（基础设施即代码）使得持续交付（CD）能够达到与开发人员通过其持续集成（CI）工具所能获得的相同速度。通过CI/CD流水线，开发人员可以实时更改代码和配置，并快速搭建测试环境，以确保一切正常运行。此外，高效的团队每天可以部署多次新功能，且交付时间不超过1小时（Forsgren
    等，Accelerate，2018）。
- en: IaC is the critical enabler for specifying CI/CD and DevOps pipeline configurations
    and flows. Manual configuration processes are simply too slow and too inefficient.
    As you will discover in the chapters on VSM, CI/CD and DevOps pipelines implement
    Lean production concepts across all IT value streams when they are adequately
    implemented.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: IaC是指定CI/CD和DevOps流水线配置及流程的关键工具。手动配置过程过于缓慢且效率低下。如你将在《VSM、CI/CD和DevOps流水线》章节中发现的，当这些流程得到充分实施时，CI/CD和DevOps流水线能够在所有IT价值流中实现精益生产概念。
- en: However, before we get to those chapters, we need to understand how CI/CD and
    DevOps pipelines support work and information flow across all IT value streams.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在我们深入这些章节之前，我们需要理解CI/CD和DevOps流水线如何支持整个IT价值流中的工作和信息流。
- en: Enabling CI/CD and DevOps pipeline flows
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用CI/CD和DevOps流水线流程
- en: 'This book makes a clear distinction between CI/CD and DevOps toolchains and
    pipelines:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 本书清楚地区分了CI/CD和DevOps工具链及流水线：
- en: A toolchain is a combination of tools that collectively perform a specific set
    of IT tasks or functions. This term may or may not imply an integration or automation
    strategy and is somewhat vague.
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具链是多个工具的组合，这些工具共同执行一组特定的IT任务或功能。这个术语可能包含集成或自动化策略，也可能不包含，因此有些模糊。
- en: DevOps pipelines and CI/CD pipelines include a series of integrated tools to
    streamline and automate IT tasks or functions across an IT value stream. Pipelines
    are more equivalent to the Lean and VSM concepts presented later in this book.
    For now, let's understand CI/CD and DevOps pipelines as improving the speed and
    reliability of software value delivery.
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps流水线和CI/CD流水线包括一系列集成工具，用于简化和自动化IT任务或功能，贯穿整个IT价值流。流水线更类似于本书后续介绍的精益和VSM概念。现在，让我们将CI/CD和DevOps流水线理解为提高软件价值交付的速度和可靠性。
- en: The term **toolchain** specifies a scope of tools that support IT value stream
    activities. Again, by itself, the term toolchain does not necessarily imply an
    integration or automation strategy. Although not ideal, developers can manually
    set up the following tool in line with the previous tools' outputs.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '**工具链**（toolchain）一词指定了支持IT价值流活动的一系列工具。仅仅这个术语本身并不一定暗示集成或自动化策略。虽然不是最理想的情况，开发人员仍然可以手动设置以下工具，以便与之前工具的输出相对应。'
- en: A better strategy is to improve efficiencies by integrating and automating the
    toolchains to coordinate and streamline work and information flows. In this context,
    the word **pipeline** connotes a flow. In the case of Lean-oriented production
    philosophies, we want streamlined and efficient flows of both work and information
    across our IT value streams.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的策略是通过集成和自动化工具链来提高效率，从而协调和简化工作和信息流。在此背景下，**流水线**（pipeline）一词表示流动。对于精益生产理念，我们希望工作和信息能够在IT价值流中实现简化和高效流动。
- en: CI/CD and DevOps toolchains are integrated and automated to support the efficient
    and streamlined flow of work and information across all IT value streams. CI/CD
    and DevOps toolchains are called *pipelines* when the tools are integrated and
    automated to support streamlined and efficient work and information flows.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD 和 DevOps 工具链已经集成并自动化，以支持在所有IT价值流中高效、简化的工作和信息流。当工具被集成并自动化，以支持简化和高效的工作和信息流时，CI/CD
    和 DevOps 工具链被称为*流水线*（pipelines）。
- en: Improving pipeline flows
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改善流水线流
- en: The distinction between toolchains versus pipelines is an important one. For
    example, an Agile-based software development team can procure a set of tools that
    collectively make up a toolchain. However, when chartered under a project-based
    operating model, it is unlikely that the team has the time or budget to implement
    an integrated or automated toolchain.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 工具链与流水线之间的区别非常重要。例如，一个基于敏捷的软件开发团队可以采购一组工具，这些工具共同构成一个工具链。然而，在项目驱动的运营模式下，团队不太可能有足够的时间或预算来实施集成或自动化的工具链。
- en: In such scenarios, Agile teams never achieve the same production efficiencies
    that are available to the product-oriented teams that implement a complete pipeline.
    Since the product team lives across its product's life cycle, they can justify
    and amortize the CI/CD and DevOps pipeline toolchain investments.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，敏捷团队无法像实施完整流水线的产品导向团队那样实现相同的生产效率。由于产品团队贯穿其产品生命周期，因此他们能够证明并摊销CI/CD和DevOps流水线工具链的投资。
- en: However, there is a workaround for Agile teams. For example, the Agile team
    can access an integrated and automated toolchain as a cloud-based service via
    a commercial or internal DevOps platform provider. You will learn more about those
    options in *Section 3* of this book. For the remainder of this chapter, we will
    go beyond the CI/CD activities to look at the full scope of DevOps-related activities.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，敏捷团队有一种解决办法。例如，敏捷团队可以通过商业或内部DevOps平台提供商，作为基于云的服务访问集成和自动化的工具链。你将在本书的*第3章*了解更多这些选项。在本章的其余部分，我们将超越CI/CD活动，探讨与DevOps相关的全面活动。
- en: Understanding the full scope of DevOps
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解DevOps的完整范围
- en: CI/CD activities only take us as far as traditional SDLC processes, that is,
    from concept to deployment. But the IT organization must also maintain and support
    its software applications. For the remainder of this chapter, you will learn that
    DevOps goes beyond software development and delivery to ensure the proper life
    cycle support of deployed software products.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD 活动只能将我们带到传统的 SDLC 过程，即从概念到部署。但是 IT 组织还必须维护和支持其软件应用程序。在本章的剩余部分，你将学习到 DevOps
    超越了软件开发和交付，确保已部署软件产品的适当生命周期支持。
- en: 'While DevOps still includes the base CI/CD activities you''ve learned so far
    in this chapter, the overall scope of work in DevOps expands to encompass all
    software life cycle stages. These include the following:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 DevOps 仍然包括你在本章中学习的基本 CI/CD 活动，但 DevOps 的总体工作范围扩展到了涵盖软件生命周期的所有阶段。这些阶段包括以下内容：
- en: Build automation and CI
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建自动化和 CI
- en: Test automation
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试自动化
- en: CD and provisioning
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CD 和供应
- en: Deployment automation
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署自动化
- en: Operating, monitoring, supporting, and providing feedback
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作、监控、支持和提供反馈
- en: Release coordination and automation
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布协调和自动化
- en: Let's discuss what these activities are beyond the CI/CD phase of software development
    and delivery. In the following subsection, we will begin to define the boundaries
    between CI/CD pipelines and DevOps pipelines.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一下这些活动在软件开发和交付的 CI/CD 阶段之外的内容。在以下小节中，我们将开始定义 CI/CD 流水线和 DevOps 流水线之间的边界。
- en: Defining CI/CD and DevOps pipeline boundaries
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义 CI/CD 和 DevOps 流水线的边界
- en: As you learned at the beginning of this chapter, DevOps began as a collaboration
    strategy to enable Agile systems administration. The primary goal was to improve
    information flows between IT development and operations teams as a risk management
    strategy. However, DevOps necessarily evolved to address the issues related to
    mismatched velocities. In other words, the velocity of operations-oriented services
    needs to match the velocities of the Agile-based development teams.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在本章开始时所学，DevOps 最初作为一种协作策略，旨在实现敏捷系统管理。其主要目标是作为一种风险管理策略，改善 IT 开发和运维团队之间的信息流。然而，DevOps
    必然会发展以解决速度不匹配的问题。换句话说，运维服务的速度需要与基于敏捷的开发团队的速度相匹配。
- en: In traditional IT vernacular, we use the term SDLC to refer to IT value stream
    activities and tools implemented by the development teams. In contrast, the operations
    team uses the term **ITSM** to describe all the activities and supporting tools
    involved in designing, creating, delivering, supporting, and managing IT services-related
    activities.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的 IT 行话中，我们使用术语 SDLC 来指代由开发团队实施的 IT 价值流活动和工具。相比之下，运维团队使用术语 **ITSM** 来描述与设计、创建、交付、支持和管理与
    IT 服务相关的活动及其支持工具。
- en: It should be no surprise that the term **DevOps pipeline** encompasses both
    SDLC and ITSM activities and tools, ultimately forming an integrated DevOps pipeline.
    In the following subsection, we'll take a look at how the CI/CD model is expanded
    to become a DevOps pipeline.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 毫不奇怪，术语 **DevOps 流水线** 包含了 SDLC 和 ITSM 的活动与工具，最终形成了一个集成的 DevOps 流水线。在接下来的小节中，我们将探讨
    CI/CD 模型如何扩展成为 DevOps 流水线。
- en: Expanding the CI/CD model
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展 CI/CD 模型
- en: The CI/CD model spans the activities customarily performed by a software development
    team spanning an iterative SDLC. DevOps expands the CI/CD pipeline concepts to
    include the IT operations team's activities. In other words, DevOps seeks to merge
    the activities of development and operations, ideally at the product team level.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD 模型涵盖了通常由软件开发团队执行的活动，跨越一个迭代的 SDLC。DevOps 将 CI/CD 流水线的概念扩展到包括 IT 运维团队的活动。换句话说，DevOps
    旨在将开发和运维的活动合并，理想情况下是在产品团队层面。
- en: 'In an article titled *8 CI/CD best practices to set you up for success*, Taz
    Brown created the following diagram to show the larger complexities of implementing
    and supporting Lean value streams across the IT function. This diagram breaks
    the value stream into three distinct flows, that is, **Software Development**,
    **User Support**, and **Incident Management**:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在一篇名为 *8 个 CI/CD 最佳实践助你成功* 的文章中，Taz Brown 创建了以下图表，展示了在 IT 功能中实施和支持精益价值流的更大复杂性。这个图表将价值流分为三个不同的流，即
    **软件开发**、**用户支持** 和 **事件管理**：
- en: '![Figure 5.6 – IT value streams'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.6 – IT 价值流](img/B17087_Figure_5.6.jpg)'
- en: '](img/B17087_Figure_5.6.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17087_Figure_5.6.jpg)'
- en: Figure 5.6 – IT value streams
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.6 – IT 价值流
- en: '[https://opensource.com/article/20/5/cicd-best-practices (Taz Brown, CC BY-SA
    4.0)](https://opensource.com/article/20/5/cicd-best-practices)'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://opensource.com/article/20/5/cicd-best-practices (Taz Brown, CC BY-SA
    4.0)](https://opensource.com/article/20/5/cicd-best-practices)'
- en: This diagram simplifies the view of the activities needed to build, deploy,
    and support a product. While this model is incomplete from a DevOps perspective,
    it does highlight the separations between development and support-related activities.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 此图简化了构建、部署和支持产品所需活动的视图。虽然从 DevOps 的角度来看，这个模型是不完整的，但它确实突出了开发与支持相关活动之间的分离。
- en: The first line of the diagram, which is within the boundary line, depicts a
    standard CI/CD pipeline set of activities. Note that there is a decision point
    within the boundary to decide whether the development and operations teams are
    ready to deploy the software into the organization's production environments.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 图表的第一行位于边界线内，描述了一组标准的 CI/CD 流水线活动。请注意，在边界内有一个决策点，用来决定开发和运维团队是否准备好将软件部署到组织的生产环境中。
- en: Given its presence outside the boundary line, the **Deploy Product** node suggests
    a manual decision and process. However, that doesn't have to be the case. With
    a mature CI/CD pipeline capability, the software release is automated.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它位于边界线外，**部署产品**节点暗示了一个手动决策和流程。然而，情况并非一定如此。通过成熟的 CI/CD 流水线能力，软件发布可以实现自动化。
- en: The development and operations teams might still prefer some manual review process
    before release. However, even that requirement becomes unnecessary when releasing
    tiny increments of new functionality with increased velocity, using automated
    testing capabilities, and perhaps automating UAT across a small segment of users
    before deploying the releases to the larger community of users.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 开发和运维团队可能仍然倾向于在发布前进行一些手动审查流程。然而，当通过自动化测试功能和在向更大用户群体部署版本前，自动化用户验收测试（UAT）对小部分用户进行测试，并且以更高的速度发布微小增量的新功能时，即使是这种需求也变得不再必要。
- en: Looking at lines two and three in *Figure 5.6*, we move into the operations
    team's traditional IT support and incident management functions. These activities
    fall under the ITSM processes.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 从*图 5.6*的第二行和第三行来看，我们进入了运维团队的传统 IT 支持和事件管理职能。这些活动属于 ITSM 过程。
- en: However, this model is still missing the operations-oriented **IT operations
    management** (**ITOM**) processes. ITOM spans IT operations' control and facilities
    management but also overlaps with technical management and application management.
    A very mature DevOps pipeline integrates and automates these activities at the
    product team level.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个模型仍然缺少面向运营的**IT 运维管理**（**ITOM**）流程。ITOM 涵盖了 IT 运维的控制和设施管理，但也与技术管理和应用管理有重叠。一个非常成熟的
    DevOps 流水线将在产品团队层级集成并自动化这些活动。
- en: We will dive into ITOM and ITSM in the last part of this chapter. But before
    we get to those topics, let's examine how the mismatched velocities between development
    and operations became the driver for evolving DevOps strategies and, later, DevOps
    toolchains and pipelines. That is the topic of our following subsection.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章的最后部分深入探讨 ITOM 和 ITSM。但在我们进入这些话题之前，让我们先看看开发和运维之间速度不匹配如何成为推动 DevOps 策略、后来的
    DevOps 工具链和流水线发展的动力。这是我们下一小节的主题。
- en: Resolving issues of mismatched velocities
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解决速度不匹配问题
- en: As noted in the previous subsection, the speed of development often exceeds
    the ability of operations to manage the risks associated with effectively deploying
    new releases frequently. However, all of these issues can go away with CD and
    continuous deployment capabilities.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前一小节所提到的，开发的速度通常超过了运维管理有效地频繁部署新版本所面临的风险管理能力。然而，所有这些问题都可以通过 CD 和持续部署能力来解决。
- en: Many Agile-based IT developers employ innovative practices to deploy small increments
    of new functionality frequently using CI methods and tools. CI capabilities automate
    the frontend SDLC development processes to perform automated code integrations,
    builds, and integration tests every time developers check their code into the
    source code repository.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 许多基于敏捷的 IT 开发人员采用创新的实践，使用 CI 方法和工具频繁地部署小增量的新功能。CI 能力通过自动化前端 SDLC 开发流程，在开发人员每次将代码提交到源代码库时，执行自动化的代码集成、构建和集成测试。
- en: CD initially evolved to support automation testing needs, which sits at the
    boundaries between development and operations. Development teams should thoroughly
    test all new software releases before deployment, including systems, acceptance,
    load, stress, performance, and other critical tests. It takes time, computing
    resources, and human effort to manually set up the test environments to support
    these testing requirements.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付（CD）最初是为了支持自动化测试需求而发展起来的，测试需求位于开发和运营之间的边界。开发团队应在部署前彻底测试所有新的软件发布，包括系统、验收、负载、压力、性能以及其他关键测试。手动设置测试环境以支持这些测试需求需要时间、计算资源和人力。
- en: Put simply, manual testing processes cannot approach the velocities of CI. CD
    automates the activities that are required to read application and infrastructure
    configurations in code, provision testing servers, install and configure the applications,
    and then run all of the necessary tests.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，手动测试过程无法与持续集成（CI）的速度相提并论。持续交付（CD）自动化了读取应用程序和基础设施配置代码、配置测试服务器、安装和配置应用程序，然后运行所有必要测试的活动。
- en: Continuous deployment takes the provisioning process one step further to automate
    the deployment process in the production environments. Moreover, continuous deployment
    can automate infrastructure resource provisioning in near real time to meet changing
    production demands.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 持续部署将配置过程进一步推进，自动化了生产环境中的部署过程。此外，持续部署还可以在接近实时的情况下自动化基础设施资源的配置，以满足变化的生产需求。
- en: The operations function can match the Agile-based development teams' velocities
    using CI methods and tools with CD and deployment capabilities. With its emphasis
    on the rapid delivery of high-quality products and services and just-in-time deliveries,
    Lean production processes offer a way to integrate the IT DevOps pipeline activities
    within a single IT value stream.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 运营职能可以通过使用CI方法和工具以及CD和部署能力来匹配基于敏捷的开发团队的速度。精益生产过程强调高质量产品和服务的快速交付，以及准时交付，它为将IT
    DevOps管道活动整合到单一IT价值流中提供了一个方法。
- en: When you get to *Section 2* of this book, which is on *implementing VSM*, you
    will learn how to implement Lean production concepts across the IT value stream
    to create Lean pipeline flows. But before we move on to that part of the book,
    we need to look at the full scope of DevOps activities.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 当你阅读到本书的*第二部分*，即*实施价值流管理（VSM）*时，你将学到如何在IT价值流中实施精益生产理念，以创建精益管道流程。但在我们进入书中的这一部分之前，我们需要了解DevOps活动的完整范围。
- en: Scoping DevOps pipeline activities
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确定DevOps管道活动的范围
- en: As it turns out, a fully evolved DevOps pipeline encompasses quite a few integrated
    activities beyond CI/CD pipeline flows. In this section, we will explore the higher-level
    activities and how they operate as a continuous iterative and incremental development
    and support process.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，完全发展的DevOps管道包含了许多超出CI/CD管道流程的集成活动。在本节中，我们将探索这些更高级别的活动，以及它们如何作为一个持续的迭代和增量开发与支持过程运作。
- en: 'As you read this section, bear in mind what you learned in [*Chapter 1*](B17087_01_Final_PD_epub.xhtml#_idTextAnchor014),
    *Delivering Customer-Centric Value*, about organizations having two types of value
    streams: development and operations. As a reminder, operations-oriented value
    streams deliver products and services to an organization''s external customers,
    while development value streams create things used by the organization''s operations-oriented
    value streams.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读本节时，请记住你在[*第1章*](B17087_01_Final_PD_epub.xhtml#_idTextAnchor014)《交付以客户为中心的价值》中学到的内容，关于组织有两种类型的价值流：开发和运营。提醒一下，面向运营的价值流将产品和服务交付给组织的外部客户，而开发价值流则创造供组织的运营价值流使用的东西。
- en: The DevOps acronym is confusing as the term implies operations and development
    are part of the same value stream, and they are. But the semantic meanings of
    development and operations in the DevOps acronym are different from Lean's contextual
    meanings. The DevOps paradigm includes the iterative SDLC activities associated
    with CI/CD pipelines, plus the operations activities include the product's ITSM
    activities.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps这个缩写令人困惑，因为该术语暗示运营和开发是同一价值流的一部分，实际上它们确实是。但是，DevOps中“开发”和“运营”这两个词的语义，与精益生产中的语境意义有所不同。DevOps范式包括与CI/CD管道相关的迭代软件开发生命周期（SDLC）活动，而运营活动则包括产品的IT服务管理（ITSM）活动。
- en: '*Figure 5.7* is a standard display for a DevOps pipeline. Although a DevOps
    pipeline can be displayed as a linear-sequential flow, the more common approach
    is to show it as an infinity loop. The infinity loop implies that iterative and
    incremental DevOps delivery activities operate as a continuous flow:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5.7* 是 DevOps 流水线的标准展示。虽然 DevOps 流水线可以显示为线性顺序流，但更常见的方法是显示为无限循环。无限循环暗示迭代和增量的
    DevOps 交付活动作为连续流动进行：'
- en: '![Figure 5.7 – Infinite DevOps pipeline flows'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.7 – 无限的 DevOps 流水线流程'
- en: '](img/B17087_Figure_5.7.jpg)'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17087_Figure_5.7.jpg)'
- en: Figure 5.7 – Infinite DevOps pipeline flows
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.7 – 无限的 DevOps 流水线流程
- en: Modern Agile and Lean-Agile practices both implement iterative development cycles
    that deliver frequent increments of customer value. DevOps simply expands the
    iterative and incremental development model to encompass the IT service's management
    activities.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 现代敏捷和精益敏捷实践都实施了交替开发周期，以提供客户价值的频繁增量。DevOps 简单地扩展了迭代和增量开发模型，以涵盖 IT 服务管理活动。
- en: This DevOps model is overly simplistic, as its focus is only on conveying high-level
    pipeline processes. Just as we discovered with the CI/CD pipeline activities,
    the DevOps pipeline's ITSM portion includes many more activities than portrayed
    in the DevOps infinity loop diagram.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 此 DevOps 模型过于简单化，因为它的重点仅在于传达高级管道流程。正如我们在 CI/CD 管道活动中发现的那样，DevOps 管道的 ITSM 部分包含的活动比
    DevOps 无限循环图表中描绘的要多得多。
- en: You already know how to implement CI/CD activities as pipelines into the DevOps
    pipeline model. In the next section, we will take a look at the activities associated
    with ITSM and their flows.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经知道如何将 CI/CD 活动作为管道集成到 DevOps 管道模型中。在下一节中，我们将看一下与 ITSM 相关的活动及其流程。
- en: Integrating ITSM
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 整合 ITSM
- en: In [*Chapter 1*](B17087_01_Final_PD_epub.xhtml#_idTextAnchor014), *Delivering
    Customer-Centric Value*, you learned that organizational value streams support
    development or operations and are often linked. You also learned that IT-based
    development-oriented value streams often create software products that support
    the operations-oriented value streams.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 1 章*](B17087_01_Final_PD_epub.xhtml#_idTextAnchor014)，*交付客户中心的价值*，您了解到组织价值流支持开发或运营，并经常是相互关联的。您还了解到，以
    IT 为基础的开发导向价值流通常创建支持运营导向价值流的软件产品。
- en: For example, an insurance company's internal software development team might
    create web-based services to support the company's insurance products' promotion,
    sales, and delivery. Similarly, health care software providers have development
    teams supporting multiple value streams. These can include patient registrations,
    claims management, financial management, accounting, diagnostic and billing codes,
    patient health data, appointment scheduling, compliance, and reporting.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，保险公司的内部软件开发团队可能会创建支持公司保险产品推广、销售和交付的基于 Web 的服务。同样，医疗软件提供商有多个开发团队支持多个价值流。这些可能包括患者注册、理赔管理、财务管理、会计、诊断和计费代码、患者健康数据、预约安排、合规性和报告。
- en: However, as you already know, IT value streams go beyond the implementation
    of software development and delivery activities. Besides these capabilities, the
    IT organization or software product team must install ITOM capabilities and ITSM
    processes and platforms.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，正如您已经了解的那样，IT 价值流不仅限于实施软件开发和交付活动。除了这些能力之外，IT 组织或软件产品团队还必须安装 ITOM 能力和 ITSM
    流程及平台。
- en: ITSM focuses on how IT teams deliver services. In contrast, ITOM focuses on
    the activities and tools used for event management, performance monitoring, and
    the operations processes depicted in the **OPS** portion of the DevOps pipeline
    (please refer to *Figure 5.7*). Ideally, the IT organization installs ITOM and
    ITSM activities at the product team level as part of their DevOps pipeline flows.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: ITSM 关注 IT 团队如何交付服务。相比之下，ITOM 关注事件管理、性能监控和 DevOps 流水线中 **OPS** 部分中所使用的活动和工具。理想情况下，IT
    组织在产品团队层面安装 ITOM 和 ITSM 活动作为其 DevOps 流程的一部分。
- en: Conveniently, ITIL 4 already addresses ITOM and ITSM from a **service value
    s****ystem** (**SVS**) perspective. If the organization has implemented ITIL 4
    practices or equivalent, the VSM team needs to assess the operations-oriented
    work within the DevOps pipeline.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 令人方便的是，ITIL 4 已经从 **服务价值系统** (**SVS**) 的视角解决了 ITOM 和 ITSM。如果组织已经实施了 ITIL 4 的实践或等效实践，VSM
    团队需要评估 DevOps 管道中与运营相关的工作。
- en: Delivering service value
  id: totrans-284
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交付服务价值
- en: In the previously displayed *Figure 5.7*, the DevOps pipeline's **OPS** portion
    includes **Release**, **Deploy**, **Operate**, and **Monitor** as its primary
    activities. Two of these activities, **Release** and **Deploy**, are transition
    activities that require support from both the development and operations side
    of the product teams.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前展示的 *图 5.7* 中，DevOps 管道的 **OPS** 部分包括 **发布**、**部署**、**操作** 和 **监控** 作为其主要活动。其中两个活动，**发布**
    和 **部署**，是过渡活动，要求产品团队的开发和运维方面的支持。
- en: However, in this section, you will learn that these 4 operations-oriented processes
    decompose into at least 34 separate ITSM domains spanning 3 management practices.
    The word domain implies a specified area of activity or knowledge. In the context
    of ITSM, you can presume the term domain includes specific areas of knowledge
    and related sets of activities.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在本节中，你将学习到，这些 4 个面向运营的过程被分解为至少 34 个独立的 ITSM 领域，涵盖 3 个管理实践。领域一词意味着指定的活动或知识领域。在
    ITSM 的背景下，你可以假设领域一词包括特定的知识领域和相关的一系列活动。
- en: The term service management broadly describes the practices and activities designed
    to improve a company's customer service processes. Service management includes
    activities spanning strategy, design, development, integration, operation, and
    service improvements. ITSM then includes the practices and activities to support
    customers using software and related infrastructure and security components produced
    or acquired by an IT organization.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 服务管理广义上描述了旨在改善公司客户服务流程的实践和活动。服务管理包括涵盖战略、设计、开发、集成、运营和服务改进的活动。ITSM 然后包括支持客户使用
    IT 组织生产或获得的相关基础设施和安全组件的软件的实践和活动。
- en: There are multiple ITSM frameworks that a product team can choose to use, such
    as ISO/IEC 20000-1, ITIL 4®, COBIT 5, FitSM, **Microsoft Operations Framework**
    (**MOF**), The Open Group IT4IT Reference Architecture, VeriSM™, SIAM®, and YaSM®.
    Given its leadership position, this chapter evaluates how ITIL 4® defines its
    **service value chain** as part of its best practices to deliver ITSM in the context
    of DevOps, Agile, and Lean approaches.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 产品团队可以选择使用多种 ITSM 框架，例如 ISO/IEC 20000-1、ITIL 4®、COBIT 5、FitSM、**微软运营框架** (**MOF**)、The
    Open Group IT4IT 参考架构、VeriSM™、SIAM® 和 YaSM®。鉴于其领导地位，本章评估了 ITIL 4® 如何将其 **服务价值链**
    定义为其最佳实践的一部分，以在 DevOps、敏捷和精益方法的背景下交付 ITSM。
- en: ITIL 4® defines a *service value chain* as a set of "joined-up practices, activities,
    and actions used across the ITSM value stream." In other words, the ITIL 4® service
    value chain represents a flow. Of course, we know an ITSM value stream is only
    a component of the larger IT value stream work and information flows that are
    encompassed within a DevOps pipeline.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: ITIL 4® 将 *服务价值链* 定义为一组“在 ITSM 价值流中使用的连接实践、活动和行动。”换句话说，ITIL 4® 的服务价值链代表了一种流程。当然，我们知道
    ITSM 价值流仅仅是更大 IT 价值流工作和信息流的一部分，而这些工作和信息流被包含在 DevOps 管道中。
- en: Before we get into the service value chain activities and flows, first, let's
    quickly take a look at the four dimensions of ITSM that help deliver value.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入探讨服务价值链的活动和流程之前，首先让我们快速看一下帮助交付价值的 ITSM 四个维度。
- en: Encompassing the four dimensions of ITSM
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包括 ITSM 的四个维度
- en: 'ITIL 4 describes four dimensions of service management as the foundations of
    an ITSM provider''s capabilities. From a systems-thinking perspective, these four
    dimensions are elements that participate in value-based ITSM deliveries. They
    include the following:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: ITIL 4 将服务管理的四个维度描述为 ITSM 提供者能力的基础。从系统思维的角度来看，这四个维度是参与基于价值的 ITSM 交付的要素。它们包括以下内容：
- en: '**Organizations and People**: This is to build the right organizational structures
    and competencies.'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组织和人员**：这是为了构建正确的组织结构和能力。'
- en: '**Information and Technology**: This is to build IT systems and infrastructures
    with the right technologies to support service deliveries.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信息和技术**：这是为了构建使用正确技术的 IT 系统和基础设施，以支持服务交付。'
- en: '**Partners and Suppliers**: This is to implement third-party service delivery
    contracts that are financially and technically appropriate.'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合作伙伴和供应商**：这是为了实施在财务和技术上适当的第三方服务交付合同。'
- en: '**Value Streams and Processes**: This is to develop efficient and customer-centric
    service value delivery capabilities.'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**价值流和流程**：这是为了开发高效且以客户为中心的服务价值交付能力。'
- en: All four dimensions of service management help the product team deliver service
    value. Software product teams must coordinate their service value chain responses
    to involve all four dimensions. If not, the service delivery function does not
    operate optimally and will fail to deliver value to its customers and product
    users.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 服务管理的四个维度有助于产品团队提供服务价值。软件产品团队必须协调其服务价值链响应，涵盖所有四个维度。如果没有，服务交付功能将无法最佳运行，无法为客户和产品用户提供价值。
- en: 'As a final note, external factors such as the following can impact a service
    delivery''s four dimensions: economic, environmental, legal, political, social,
    and technological. All of these factors must be considered when deciding how to
    deploy the four dimensions of service management.'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 最后需要注意的是，以下外部因素可能会影响服务交付的四个维度：经济、环境、法律、政治、社会和技术。这些因素在决定如何部署服务管理的四个维度时必须考虑。
- en: Now that we understand the foundational elements of service management, let's
    explore the activity flows associated with ITSM.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了服务管理的基础要素，接下来让我们探讨与ITSM相关的活动流程。
- en: Defining ITSM delivery flows
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义ITSM交付流程
- en: 'As with any value stream, the ITIL 4® service value chain represents an activity
    flow; although it is described at a high level, as we''ll see in the following
    subsection. The service value chain includes six primary activities to respond
    to the IT service demands from a value delivery perspective:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何价值流一样，ITIL 4®服务价值链代表了一个活动流程；虽然它在高层次上进行了描述，正如我们将在接下来的小节中看到的那样。服务价值链包括六个主要活动，以从价值交付的角度响应IT服务需求：
- en: '**Plan**: This is to define an as-is/to-do assessment of the service capabilities,
    requirements, and policies to develop a common vision of what services are required
    and how they will be delivered.'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**规划**：这是对服务能力、需求和政策进行现状/待办评估，以制定共同愿景，明确所需服务及其交付方式。'
- en: 'Value delivered: New service identification and provisioning plan.'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 交付的价值：新服务的识别与供应计划。
- en: '**Improve**: This is to ensure the continual improvement of all products, services,
    and practices across all four dimensions of service management.'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**改进**：确保在服务管理的四个维度中持续改进所有产品、服务和实践。'
- en: 'Value delivered: Attainment of service-level targets.'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 交付的价值：达成服务级别目标。
- en: '**Engage**: This is to confirm our understanding of stakeholder needs, plus
    ensure timely engagement and positive outcomes with our stakeholders.'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**互动**：确认我们对利益相关者需求的理解，并确保及时的互动和与利益相关者的积极成果。'
- en: 'Value delivered: Managing and resolving a user''s complaint.'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 交付的价值：管理和解决用户投诉。
- en: '**Design and transition**: This is to ensure that new releases of products
    and related services repeatedly meet stakeholder expectations for quality, cost,
    and time to market.'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**设计与过渡**：确保产品和相关服务的新版本不断满足利益相关者在质量、成本和市场时间方面的期望。'
- en: 'Value delivered: Enable upgrades to the next version of a business application.'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 交付的价值：启用业务应用程序的下一版本升级。
- en: '**Obtain/build**: This is to ensure that service components are available when
    and where they are needed and that they meet agreed specifications.'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**获取/构建**：确保服务组件在需要的时间和地点可用，并且符合约定的规格。'
- en: 'Value delivered: Timely and accurate fulfillment of a user request.'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 交付的价值：及时和准确地完成用户请求。
- en: '**Deliver and support**: This is to ensure services are delivered and supported
    according to the agreed specifications or service-level agreement while meeting
    stakeholder expectations.'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**交付与支持**：确保按照约定的规格或服务级别协议交付和支持服务，同时满足利益相关者的期望。'
- en: 'Value delivered: Successful resolution of all incident reports.'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 交付的价值：成功解决所有事件报告。
- en: These six activities express the general flow of work to define, create, and
    deliver customer-centric services. So, just as software development has a flow
    that defined ideation through delivery, ITSM provides a value stream flow to define
    and deliver IT services. In DevOps, we need to integrate the two flows, as shown
    in *Figure 5.7*. Now, let's define the total potential scope of work involved
    in delivering value-based ITSM.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 这六个活动展示了定义、创建和交付以客户为中心的服务的工作流程。因此，正如软件开发有一个从构思到交付的流程，ITSM也提供了一个价值流流程，用于定义和交付IT服务。在DevOps中，我们需要将这两个流程整合，如*图5.7*所示。现在，让我们定义涉及交付基于价值的ITSM的全部潜在工作范围。
- en: Delivering ITSM value
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提供ITSM价值
- en: Earlier in this section, we mentioned, though not explicitly attributed to ITIL
    4®, the service value chain document's 34 separate ITSM domains spanning 3 management
    practices. Again, the term domains refers to both knowledge areas and related
    sets of activities. The scope of this book limits our abilities to dive deeper
    into describing each domain. However, ITIL 4® provides detailed guidance on planning,
    managing, and improving these management practices and domain-related activities.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节前面，我们提到过，虽然没有明确归因于ITIL 4®，但服务价值链文档涵盖了34个独立的ITSM领域，跨越了3个管理实践。再次说明，领域一词既指知识领域，也指相关的活动集。本书的范围限制了我们深入描述每个领域的能力。然而，ITIL
    4®提供了关于规划、管理和改进这些管理实践及其领域相关活动的详细指南。
- en: 'The three groups of management practices include the following:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 三个管理实践组包括以下内容：
- en: '**General Management Practices**: This group spans 14 service management domains
    from general business management that helps support work or accomplishing specific
    objectives. The domains include the following:'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一般管理实践**：这一组涵盖了14个服务管理领域，涉及一般业务管理，有助于支持工作或实现特定目标。领域包括以下内容：'
- en: '![](img/B17087_05_Table_01.jpg)'
  id: totrans-319
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17087_05_Table_01.jpg)'
- en: '**Service Management Practices**: This group spans 17 domains to ensure that
    services deliver agreed availability levels to meet customers'' and users'' needs.
    The domains include the following:![](img/B17087_05_Table_02.jpg)'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务管理实践**：这一组涵盖了17个领域，确保服务能够提供约定的可用性水平，以满足客户和用户的需求。领域包括以下内容：![](img/B17087_05_Table_02.jpg)'
- en: '**Technical Management Practices**: This group spans three domains to implement
    service management practices that expand or shift the focus from technology solutions
    to IT services. The domains include the following:'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**技术管理实践**：这一组涵盖了三个领域，以实施服务管理实践，将焦点从技术解决方案转向IT服务。领域包括以下内容：'
- en: '![](img/B17087_05_Table_03.jpg)'
  id: totrans-322
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17087_05_Table_03.jpg)'
- en: It should be apparent that ITSM brings in a much broader host of practices and
    activities to implement, improve, and support in a DevOps-oriented value stream.
    However, it's not necessary to go into the details of ITSM in this book. This
    chapter's primary goal is to introduce the scope of work involved in building
    and streamlining DevOps as orchestrated pipeline flows.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 应该很明显，ITSM引入了更多广泛的实践和活动，以在面向DevOps的价值流中实施、改进和支持。然而，在本书中没有必要深入探讨ITSM的细节。本章的主要目标是介绍构建和简化DevOps作为编排管道流程所涉及的工作范围。
- en: We are approaching the end of this chapter. By now, you should appreciate the
    complex challenges that lie ahead in developing a streamlined DevOps production
    flow. There are investments required in toolchains and innumerable activities
    to implement, integrate, automate, and orchestrate.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接近本章的结束。到目前为止，你应该已经意识到，在开发简化的DevOps生产流程时面临的复杂挑战。需要在工具链上进行投资，并实施、集成、自动化和编排无数活动。
- en: This book does not attempt to solve your specific CI/CD and DevOps pipeline
    flow issues but instead gives you the tools to do so. Specifically, *Section 2*
    of this book introduces an eight-step VSM methodology, modern VSM tools, and their
    capabilities. In this context, VSM encompasses the methods and tools you can use
    to improve Lean production flows across your CI/CD and DevOps pipelines.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 本书并不试图解决你在CI/CD和DevOps管道流程中遇到的具体问题，而是为你提供解决问题的工具。具体来说，本书的*第2节*介绍了一个八步VSM方法论、现代VSM工具及其功能。在这个背景下，VSM涵盖了你可以使用的方法和工具，用于改善CI/CD和DevOps管道中的精益生产流程。
- en: Before we finish this chapter and this part of the book, there is one other
    topic we need to address, which is moving from a project-oriented development
    paradigm to a product-oriented development strategy.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束本章和本书的这一部分之前，还有一个话题需要讨论，那就是从项目导向的开发模式转向产品导向的开发策略。
- en: Moving beyond projects and into products
  id: totrans-327
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从项目到产品的转变
- en: The traditional waterfall model for software development is project-based. In
    the industry's early days, the project-oriented approach seemed to make sense
    due to the high costs, complexities, and risks involved in software development.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的瀑布模型用于软件开发是基于项目的。在行业的早期，由于软件开发中的高成本、复杂性和风险，项目导向的方法似乎是合乎逻辑的。
- en: 'Let''s review the type of work that is best suited to traditional project management
    practices. For example, the characteristics of project-based work include the
    following:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下最适合传统项目管理实践的工作类型。例如，基于项目的工作的特点包括以下内容：
- en: Projects have definable *deliverables* or outputs in the form of *products*,
    *services*, or *results*.
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目有可定义的*交付成果*或输出，形式可以是*产品*、*服务*或*结果*。
- en: Project-based deliverables are relatively unique, and, therefore, the work has
    significant risks.
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于项目的交付成果是相对独特的，因此，工作具有显著的风险。
- en: Project constraints are defined in project charters, approved by customers or
    executive sponsors, with specific boundaries on authorized *scope*, *schedule*,
    *costs*, and *quality*.
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目约束在项目章程中定义，由客户或执行发起人批准，具体限制包括授权的*范围*、*时间表*、*成本*和*质量*。
- en: Project-oriented work is highly tailored to support each product's unique requirements,
    and, therefore, the work is relatively non-repetitive from one project to another.
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面向项目的工作高度定制，以支持每个产品的独特需求，因此，从一个项目到另一个项目，工作内容相对不具重复性。
- en: Given that software product requirements are relatively unique, the work's full
    details and scope might only become apparent as the project progresses (this is
    also true for Agile-based work).
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鉴于软件产品需求相对独特，工作的完整细节和范围可能只有在项目推进过程中才能显现（这一点对于基于敏捷的方法的工作也同样适用）。
- en: Project teams employ formal change management practices to minimize scope creep,
    budget shortfalls, and schedule overruns.
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目团队采用正式的变更管理实践，以最小化范围蔓延、预算不足和进度超支。
- en: Schedules help enforce the temporary nature of projects with defined start and
    delivery dates and predefined activities, dependencies, and durations.
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间表有助于强化项目的临时性，明确项目的开始和交付日期，以及预定义的活动、依赖关系和持续时间。
- en: Project-based work often crosses organizational boundaries, thereby involving
    multiple skills.
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于项目的工作往往跨越组织边界，因此需要涉及多种技能。
- en: Managing highly customized work under a dictated set of constraints seems like
    an odd dichotomy – and it is. That said, we should understand why customers place
    constraints on project-related work. Specifically, our paying customers establish
    project constraints to ensure the projected ROI is achievable in the timeline
    and at a cost at which the investments make economic sense.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在一组强制性的约束条件下管理高度定制化的工作似乎是一个矛盾——确实如此。尽管如此，我们应该理解客户为什么会对项目相关工作设定约束条件。具体而言，我们的付费客户设定项目约束，是为了确保预计的投资回报率（ROI）能够在时间框架内实现，并且在成本上具有经济意义。
- en: Nevertheless, developing software under project-based constraints creates a
    host of problems, three of which are critical. First, given each software product's
    unique nature, the development team cannot foresee all of the issues they might
    encounter. Second, customers and users often don't know what they want or need
    until they have a version of the software product in hand to evaluate. Third,
    customer needs evolve, and their priorities change over time.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在基于项目的约束下开发软件会产生一系列问题，其中有三个是至关重要的。首先，鉴于每个软件产品的独特性质，开发团队无法预见他们可能遇到的所有问题。其次，客户和用户往往不知道他们需要什么，直到他们手上有了一个可以评估的软件版本。第三，客户需求会不断变化，优先级也随时间而改变。
- en: The bottom line is that no matter how much time and effort the project team
    applies to project planning, it will be outdated before it can be executed.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 关键点是，无论项目团队在项目规划上投入多少时间和精力，这些规划在执行前都会变得过时。
- en: Modern software methods and tools have evolved to support the unique needs of
    software development, such as being responsive to customer demands and changes
    in priorities. That type of responsiveness was not possible under the traditional
    waterfall project management model. With fully developed CI/CD and DevOps pipelines,
    the most mature software development teams can iteratively, incrementally, and
    rapidly deliver new functionality, perhaps multiple times per day. Therefore,
    the CI/CD and DevOps pipelines have the functional equivalence of modern manufacturing
    facilities.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 现代软件方法和工具已经发展，以支持软件开发的独特需求，例如响应客户需求和优先级变化。这种响应能力在传统的瀑布式项目管理模型下是无法实现的。通过完全发展的
    CI/CD 和 DevOps 流水线，最成熟的软件开发团队可以迭代、增量并快速地交付新功能，甚至可能一天多次。因此，CI/CD 和 DevOps 流水线在功能上等同于现代制造设施。
- en: In *Section* *2* of this book, we'll explore how VSM helps improve Lean production
    flows across DevOps pipelines. But before we get to that, first, let's take a
    moment to understand why a product-based development and delivery model is superior
    to the traditional project-based waterfall model in software development.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的*第二章*，我们将探讨如何通过VSM帮助改善DevOps流水线中的精益生产流。但在此之前，让我们先花一点时间了解为什么基于产品的开发和交付模型优于传统的基于项目的瀑布模型。
- en: Funding product teams
  id: totrans-343
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 产品资金支持
- en: There is no need to constrain software development activities to a specific
    scope, schedule, cost, or quality metric. Instead, just as a manufacturing plant
    operates for as long as they have new customers' orders, the modern software factory
    continues to operate for as long as their customers have evolving product needs.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要将软件开发活动限制在特定的范围、时间表、成本或质量指标内。相反，正如制造工厂只要有新的客户订单就会继续运营一样，现代软件工厂也会在客户的产品需求不断发展的情况下持续运作。
- en: Physical products tend to wear out, forcing customers to replace them. In contrast,
    software products do not physically wear out. On the other hand, the requirements
    that drove the initial software development objectives tend to have a shelf life.
    In that context, customers eventually need to replace or update their software
    applications.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 实体产品往往会磨损，迫使客户进行更换。相比之下，软件产品不会物理磨损。另一方面，驱动最初软件开发目标的需求通常有其生命周期。在这种情况下，客户最终需要更换或更新他们的软件应用程序。
- en: For these reasons, it makes sense to move beyond the project model to implement
    a product-oriented development model. In a product-oriented development model,
    product teams replace project teams, and the teams stay together for as long as
    customers use the product.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这些原因，将项目模型转变为产品导向的开发模型是合理的。在产品导向的开发模型中，产品团队取代了项目团队，团队会一直维持下去，直到客户不再使用该产品。
- en: The composition of the teams could change over time to support evolving requirements.
    At the beginning of the product's life cycle, development has an outsized role
    in efforts and costs. Toward the end of life, the development resources could
    dwindle, and the resource emphasis moves toward operations-oriented support.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 团队的组成可能会随着时间的推移而变化，以支持不断变化的需求。在产品生命周期的初期，开发在工作量和成本中占据主导地位。到生命周期的后期，开发资源可能会减少，资源重点转向面向运营的支持。
- en: A product-based funding model is different than a project-based funding model.
    Project-based funding builds on projected future returns on investments. The risk
    of project-based funding is twofold. First, there is a question of whether the
    product can be built within the authorized constraints. Second, there is a question
    of whether the market will exist in the future to support the investment.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 基于产品的资金支持模式不同于基于项目的资金支持模式。基于项目的资金支持依赖于预计未来的投资回报。基于项目的资金支持有两个风险。首先，存在产品能否在授权的限制条件内完成的疑问。其次，存在未来市场是否会存在并支持这项投资的问题。
- en: Product-based funding is less risky as it turns the project-based model upside
    down. Instead of asking whether the product will eventually pay back the investment,
    product-based funding models evaluate current costs and revenues to assess how
    much money to invest in development and operations support.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 基于产品的资金支持风险较低，因为它颠覆了基于项目的模型。与其问“产品是否最终能够回报投资”，基于产品的资金支持模型会评估当前的成本和收入，以此来评估投入开发和运营支持的资金数量。
- en: There is still risk in the initial development cost investments. However, those
    risks move to the portfolio level, where corporate executives determine what investments
    they need to make to best position the company for future business. Those investments
    can develop new products or investments as enhancements to existing products to
    attract customers in new market niches. Portfolio-level investments are strategic,
    while ongoing adjustments to product team budgets are tactical decisions based
    on actual costs compared to actual revenues.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 初始开发成本投资依然存在风险。然而，这些风险转移到了投资组合层面，企业高层管理人员决定他们需要做出哪些投资，以便为公司未来的业务定位做好准备。这些投资可以开发新产品，或者作为对现有产品的增强，以吸引新市场细分中的客户。投资组合层面的投资具有战略意义，而对产品团队预算的持续调整则是根据实际成本与实际收入对比所做出的战术决策。
- en: This section completes our final chapter of *Section 1* of this book. We'll
    close with a summary section and a set of 10 questions that will help you to analyze
    your comprehension of this chapter's content.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 本节完成了本书*第1章*的最后一部分。我们将以总结部分和一组10个问题来结束，这将帮助你分析自己对本章内容的理解。
- en: Summary
  id: totrans-352
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter introduced the complexities of implementing CI/CD and DevOps pipeline
    flows. The information is a precursor to *Section 3* of this book, where you learn
    how to employ the methods and tools of VSM to implement and improve Lean production
    flows across your IT value streams.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了实施CI/CD和DevOps流水线流的复杂性。该信息是本书*第3章*的前置内容，在那里你将学习如何运用VSM的方法和工具，在你的IT价值流中实施和改进精益生产流。
- en: Specifically, in this chapter, you learned the complexities of implementing
    mature CI/CD and DevOps pipelines. You learned that virtualization, primarily
    through container-based technologies, is crucial in order to support the efficient
    use of IT infrastructure resources and enable the rapid delivery of small increments
    of new software capabilities. Finally, you learned that CI/CD pipelines integrate
    and automate the traditional SDLC processes, but DevOps extends the CI/CD pipeline
    to include service management functions.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，在本章中，你学习了实施成熟CI/CD和DevOps流水线的复杂性。你了解到虚拟化，主要通过基于容器的技术，是支持高效利用IT基础设施资源并实现快速交付小规模的新软件功能的关键。最后，你学习到CI/CD流水线集成并自动化了传统的SDLC过程，而DevOps则将CI/CD流水线扩展到包括服务管理功能。
- en: With this knowledge, you are now well prepared to understand how to use VSM
    methods and tools to implement and improve DevOps activities as Lean production-oriented
    flows. VSM methods and tools form the next part of this book's subject – *Section
    2*, *Implementing Value Stream Management (VSM) Methods and Tools* – to improve
    IT value streams.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些知识，你现在已经为理解如何使用VSM方法和工具实施并改进作为精益生产导向的DevOps活动做好了充分准备。VSM方法和工具构成了本书主题的下一部分——*第2章*，*实施价值流管理（VSM）方法和工具*——以改善IT价值流。
- en: Questions
  id: totrans-356
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What drove the development of DevOps concepts and later its methods and tools?
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么驱动了DevOps概念的产生，后来又推动了其方法和工具的发展？
- en: What are the three critical capabilities and related tools that support the
    implementation of CI/CD pipelines?
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持CI/CD流水线实施的三个关键能力和相关工具是什么？
- en: What is CI, and what is its purpose?
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是CI，它的目的是什么？
- en: What are the significant cultural differences between a software development
    team and an IT operations team?
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 软件开发团队和IT运维团队之间有哪些显著的文化差异？
- en: What is CD, and what is its goal?
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是CD，它的目标是什么？
- en: What is the difference between IaC and CaC?
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IaC和CaC有什么区别？
- en: What is the primary difference when using the term "toolchains" compared to
    "pipelines"?
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用“工具链”和“流水线”这两个术语时，主要区别是什么？
- en: Using two terms only, what is the best way to describe the IT value streams
    that make up a DevOps pipeline?
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仅用两个术语，如何最好地描述构成DevOps流水线的IT价值流？
- en: How can you differentiate ITOM from ITSM?
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何区分ITOM和ITSM？
- en: How are project-oriented teams funded differently from product-oriented teams?
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目导向团队与产品导向团队的资金来源有何不同？
- en: Further reading
  id: totrans-367
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Dietrich, E. (June 2019) *DevOps Table Stakes: The Minimum Amount Required
    to Play the Game*. DZone/DevOps Zone. [https://dzone.com/articles/devops-table-stakes-the-minimum-amount-required-to](https://dzone.com/articles/devops-table-stakes-the-minimum-amount-required-to).
    Accessed 2nd February 2021.'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Dietrich, E. (2019年6月) *DevOps Table Stakes: The Minimum Amount Required to
    Play the Game*. DZone/DevOps Zone。[https://dzone.com/articles/devops-table-stakes-the-minimum-amount-required-to](https://dzone.com/articles/devops-table-stakes-the-minimum-amount-required-to)。访问日期：2021年2月2日。'
- en: '**US National Institute of Standards and Technology** (**NIST**) Information
    Technology Laboratory. NATIONAL VULNERABILITY DATABASENIST. Special Publication
    800-53 (Rev. 4). *Security and Privacy Controls for Federal Information Systems
    and Organizations*. [https://nvd.nist.gov/800-53/Rev4/control/CM-6](https://nvd.nist.gov/800-53/Rev4/control/CM-6).
    Accessed 2nd February 2021.'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**美国国家标准与技术研究院**（**NIST**）信息技术实验室。国家漏洞数据库NIST。特别出版物800-53（修订版4）。*联邦信息系统和组织的安全与隐私控制*。[https://nvd.nist.gov/800-53/Rev4/control/CM-6](https://nvd.nist.gov/800-53/Rev4/control/CM-6)。访问日期：2021年2月2日。'
- en: Forsgren, N., Humble, J., Kim, G. (2018) *Accelerate. Building and Scaling High-Performance
    Technology Organizations*. IT Revolution. Portland, OR.
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Forsgren, N., Humble, J., Kim, G. (2018) *Accelerate. Building and Scaling High-Performance
    Technology Organizations*. IT Revolution. Portland, OR.
