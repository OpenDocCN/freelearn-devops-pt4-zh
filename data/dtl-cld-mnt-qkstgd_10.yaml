- en: '*Chapter 8*: Integrating with Platform Components'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第8章*：与平台组件集成'
- en: We learned about monitors and alerts, key elements of a monitoring infrastructure
    that are central to the 24x7 monitoring of software systems in production, in
    the last chapter. Earlier in the book, we saw how infrastructure resources, the
    basic building blocks of any computational environment that runs a software system,
    are monitored by Datadog.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了监视器和警报，它们是监控基础设施的关键要素，对于对生产环境中的软件系统进行24小时全天候监控至关重要。在书中的早期章节，我们看到如何通过Datadog来监控基础设施资源，基础设施资源是任何运行软件系统的计算环境的基本构建块。
- en: In [*Chapter 1*](B16483_01_Final_VK_ePub.xhtml#_idTextAnchor014), *Introduction
    to Monitoring*, we discussed various types of monitoring and briefly mentioned
    platform monitoring, the monitoring of software and cloud computing components
    that are used to build the computing platform where application software runs.
    In a public cloud environment, there are overlaps between infrastructure and platform
    components because compute, storage, and network components are software-defined
    in those environments, and, for monitoring purposes, they could be treated as
    a platform component such as **MySQL Database** or the **RabbitMQ** messaging
    system.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第1章*](B16483_01_Final_VK_ePub.xhtml#_idTextAnchor014)中，*监控简介*，我们讨论了各种类型的监控，并简要提到了平台监控，平台监控是监控用于构建应用程序软件运行计算平台的软件和云计算组件。在公共云环境中，基础设施和平台组件之间存在重叠，因为计算、存储和网络组件在这些环境中是软件定义的，并且出于监控目的，它们可以被视为平台组件，如**MySQL数据库**或**RabbitMQ**消息系统。
- en: However, it's not difficult to differentiate infrastructure resources from platform
    components. A cloud platform is essentially a software layer running on top of
    infrastructure resources and applications either run them or use them at runtime.
    Typically, the infrastructure resources are provisioned on the public cloud, and
    the platform components are provided by third-party software vendors or open source
    communities and the applications are built by another company. Please note that
    a popular public cloud provider such as AWS also offers services that can be substituted
    for platform components. Examples on AWS are **Relational Database Service** (**RDS**),
    **Amazon MQ**, and **Elastic Kubernetes Service** (**EKS**).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，区分基础设施资源和平台组件并不困难。云平台本质上是在基础设施资源之上运行的软件层，应用程序要么运行它们，要么在运行时使用它们。通常，基础设施资源是托管在公共云中的，而平台组件则由第三方软件供应商或开源社区提供，应用程序由其他公司构建。请注意，像AWS这样的流行公共云提供商也提供可以替代平台组件的服务。AWS上的示例包括**关系数据库服务**（**RDS**）、**Amazon
    MQ**和**弹性Kubernetes服务**（**EKS**）。
- en: We learned earlier, in [*Chapter 6*](B16483_06_Final_VK_ePub.xhtml#_idTextAnchor214),
    *Infrastructure Monitoring*, that most of the infrastructure monitoring is covered
    by Datadog out of the box with minimal configuration requirements. While most
    features of infrastructure resources are standard, the same could not be said
    about platform components, which basically are software applications that perform
    a specific set of tasks and the monitoring requirements are feature-dependent.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在之前的[*第6章*](B16483_06_Final_VK_ePub.xhtml#_idTextAnchor214)，*基础设施监控*中了解到，大多数基础设施监控由Datadog开箱即用，且配置要求极少。虽然大多数基础设施资源的功能是标准化的，但平台组件则不能简单地这样说，因为平台组件本质上是执行特定任务集的软件应用程序，其监控要求依赖于特性。
- en: 'Datadog addresses platform monitoring in two ways:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Datadog通过两种方式解决平台监控问题：
- en: Shipping integrations with popular platform software components. With these
    integrations available out of the box, the users only need to enable whichever
    integrations are needed for the platform components used in their applications.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供与流行平台软件组件的集成。通过这些现成的集成，用户只需启用所需的集成，以便监控他们应用程序中使用的平台组件。
- en: Providing the option to run custom checks that can be used to monitor platform
    components that may not have integrations readily available out of the box.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供运行自定义检查的选项，这些检查可以用来监控可能没有现成集成的的平台组件。
- en: 'In this chapter, we will learn about the details of platform monitoring using
    the integration options available in Datadog as outlined above. Specifically,
    we will cover these topics:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍使用Datadog中可用的集成选项进行平台监控的详细信息，如上所述。具体来说，我们将涵盖以下主题：
- en: Configuring an integration
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置集成
- en: Tagging an integration
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记集成
- en: Reviewing supported integrations
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审查支持的集成
- en: Implementing custom checks
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施自定义检查
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To try out the examples mentioned in this book, you need to have the following
    tools installed and resources available:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 若要尝试本书中提到的示例，您需要安装以下工具并确保有可用的资源：
- en: '- An Ubuntu 18.04 environment with Bash shell. The examples might work on other
    Linux distributions as well but suitable changes must be done to the Ubuntu specific
    commands.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '- 一个安装了Bash shell的Ubuntu 18.04环境。虽然这些示例可能在其他Linux发行版上也能运行，但需要对特定于Ubuntu的命令进行适当的修改。'
- en: '- A Datadog account and a user with admin-level access.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '- 一个Datadog帐户和一个具有管理员权限的用户。'
- en: '- A Datadog Agent running at host level or as a microservice depending on the
    example, pointing to the Datadog account.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '- 在主机级别运行的Datadog代理，或者根据示例作为微服务运行，指向Datadog帐户。'
- en: Configuring an integration
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置集成
- en: Datadog provides integration with most of the popular platform components and
    they need to be enabled as needed. We will see the general steps involved in enabling
    integration with an example.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Datadog提供了与大多数流行平台组件的集成，需要根据需要启用这些集成。我们将通过一个示例查看启用集成的一般步骤。
- en: 'The available integrations are listed on the **Integrations** dashboard as
    in the following screenshot, and it''s directly accessible from the main menu:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的集成列在**集成**仪表板上，如下截图所示，可以直接从主菜单访问：
- en: '![Figure 8.1 – List of available integrations'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.1 – 可用集成列表'
- en: '](img/Figure_8.1_B16483.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.1_B16483.jpg)'
- en: Figure 8.1 – List of available integrations
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1 – 可用集成列表
- en: As you can see, in *Figure 8.1*, the third-party software components are listed
    on the **Integrations** dashboard. Using the search option available at the top
    of this dashboard, the integrations that are already installed can be filtered
    out. Also, the available integrations can be looked up using keywords.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在*图8.1*中，第三方软件组件列在**集成**仪表板上。可以使用该仪表板顶部的搜索选项筛选出已安装的集成。此外，还可以通过关键词查找可用的集成。
- en: 'By clicking on a specific integration listing, you can get all the details
    related to that integration. For example, the following screenshot provides such
    details for integration with NGINX, a popular web server:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击特定的集成列表项，可以查看与该集成相关的所有详细信息。例如，以下截图提供了与NGINX（一款流行的Web服务器）集成的相关信息：
- en: '![Figure 8.2 – Overview of NGINX integration'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.2 – NGINX集成概览'
- en: '](img/Figure_8.2_B16483.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.2_B16483.jpg)'
- en: Figure 8.2 – Overview of NGINX integration
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 – NGINX集成概览
- en: From this dashboard, we can get the complete list of metrics that will be published
    by the integration once that is enabled. Also, this specific integration provides
    a few monitors, which is an optional feature. The main objective of using an integration
    is to get access to the platform's component-related metrics that could be used
    in custom-built monitors, dashboards, and other Datadog resources.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 从该仪表板中，我们可以获得启用集成后将发布的所有度量指标的完整列表。此外，这个特定的集成还提供了一些监控器，这是一个可选功能。使用集成的主要目的是获取与平台组件相关的度量指标，这些指标可以用于定制的监控器、仪表板以及其他Datadog资源。
- en: 'The configuration of an integration requires two main steps:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 配置集成需要两个主要步骤：
- en: '**Install integration**: An integration can be installed in your account by
    just clicking on the **Install** button available, as in the following screenshot,
    pertaining to NGINX integration:![Figure 8.3 – Install an integration'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装集成**：可以通过点击可用的**安装**按钮来安装集成，以下截图展示了NGINX集成的安装界面：![图8.3 – 安装集成'
- en: '](img/Figure_8.3_B16483.jpg)'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.3_B16483.jpg)'
- en: Figure 8.3 – Install an integration
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.3 – 安装集成
- en: The **Install** button will be displayed when you move the cursor over an available
    integration.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当你将光标悬停在可用集成上时，**安装**按钮将显示出来。
- en: '**Configure integration**: Configuration of the integration is the main part
    of rolling out an integration in a Datadog account. The steps to do that are provided
    under the **Configuration** tab of the integration (see *Figure 8.2*). These steps
    are platform component dependent and would require changes in the Datadog monitoring
    infrastructure. For example, if the component runs on a host, such as the NGINX
    web server, the changes will be needed in the configuration of the Datadog agent
    running on that host.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**配置集成**：集成的配置是将集成部署到Datadog帐户中的关键步骤。配置步骤可以在集成的**配置**标签下找到（见*图8.2*）。这些步骤依赖于平台组件，并且可能需要在Datadog监控基础设施中进行更改。例如，如果某个组件运行在主机上（如NGINX
    Web服务器），则需要在运行该主机上的Datadog代理配置中进行更改。'
- en: Now let's see how the NGINX integration is configured to get it enabled for
    a specific NGINX instance and that will demonstrate the general steps involved
    in configuring any integration.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何为特定的 NGINX 实例配置 NGINX 集成，这将展示配置任何集成的一般步骤。
- en: The first step is to enable the integration in your account and that can be
    accomplished by just clicking the **Install** button on the integration listing
    as you can see in *Figure 8.3*.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是启用你帐户中的集成，这可以通过点击集成列表中的 **安装** 按钮来完成，如 *图 8.3* 所示。
- en: 'In the sample case here, we will try to enable the integration for an open
    source version of an NGINX instance running on an **AWS EC2** host that runs on
    the Linux distribution **Ubuntu 16.04**. Note that the actual configuration steps
    would also differ depending on the operating system where the platform component
    and Datadog agent run, and these steps are specific to the environment described
    previously:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将尝试为运行在 **AWS EC2** 主机上的开源版本 NGINX 实例启用集成，该主机运行的是 **Ubuntu 16.04**
    Linux 发行版。请注意，实际的配置步骤也会根据平台组件和 Datadog agent 所运行的操作系统而有所不同，这些步骤仅适用于前述环境：
- en: 'Make sure that both the Datadog Agent and NGINX services are running on the
    host. This could be checked as follows on Ubuntu 16.04:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保 Datadog Agent 和 NGINX 服务都在主机上运行。可以通过以下方式在 Ubuntu 16.04 上进行检查：
- en: '[PRE0]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You will see a status similar to the following if the service runs OK:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果服务正常运行，你将看到类似于以下的状态：
- en: '[PRE1]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*(Only the line corresponding to service status is provided here for brevity.)*'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*(这里只提供与服务状态相关的行，简洁起见。)*'
- en: Let's do the configuration changes needed on the NGINX side first.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们首先完成 NGINX 端所需的配置更改。
- en: 'Check if the stub status module is installed with the NGINX instance that is
    needed for the integration to work:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查需要用于集成的 NGINX 实例是否已安装 stub status 模块：
- en: '[PRE2]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Under the NGINX configuration directory `/etc/nginx/conf.d/`, create a new
    file, `status.conf`, and add the following configuration:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 NGINX 配置目录 `/etc/nginx/conf.d/` 下，创建一个新的文件 `status.conf`，并添加以下配置：
- en: '[PRE3]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Reload the configuration change in NGINX:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新加载 NGINX 配置更改：
- en: '[PRE4]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To complete the configuration changes, they must be done on the Datadog Agent
    side also. Let''s do that next. For each integration supported by Datadog, a configuration
    directory is available under `/etc/datadog-agent/conf.d/`. For NGINX integration,
    it''s `nginx.d`. Usually, a sample configuration file is available in this directory
    that can be customized for your specific requirements. To keep it simple, we will
    make a copy of the sample file that already contains the basic configuration needed
    for getting this integration working, and then restart Datadog Agent:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要完成配置更改，必须在 Datadog Agent 端也进行相应操作。接下来我们来做这个。对于 Datadog 支持的每个集成，都会在 `/etc/datadog-agent/conf.d/`
    目录下提供一个配置目录。对于 NGINX 集成，该目录为 `nginx.d`。通常，目录中会有一个示例配置文件，可以根据你的具体需求进行定制。为了简单起见，我们将复制该示例文件，文件中已包含实现此集成所需的基本配置，然后重启
    Datadog Agent：
- en: '[PRE5]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To check if the integration works correctly, you can look at the related information
    in the Datadog Agent status:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查集成是否正常工作，你可以查看 Datadog Agent 状态中的相关信息：
- en: '[PRE6]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*(The preceding output is only an excerpt related to NGINX integration status.)*'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*(上述输出仅为与 NGINX 集成状态相关的摘录。)*'
- en: 'When the configurations on the host are done and we''ve checked that it''s
    working successfully, we can expect to see the related NGINX metrics to be available
    on the Datadog UI for use in monitors and dashboards. The easiest way to verify
    that is to search for some sample metrics on the `nginx.net.connections` is looked
    up and located successfully:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当主机上的配置完成并且我们确认它正常工作后，可以预期在 Datadog UI 上看到相关的 NGINX 指标，用于监控和仪表盘。验证的最简单方法是搜索一些示例指标，确认
    `nginx.net.connections` 被成功查找和定位：
- en: '![](img/Figure_8.4_B16483.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_8.4_B16483.jpg)'
- en: Figure 8.4 – NGINX metrics in Metrics Explorer
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4 – 在 Metrics Explorer 中查看 NGINX 指标
- en: This way, any metric supported by the integration, as documented under the **Metrics**
    tab on the dashboard for the integration, can be looked up. If you are looking
    for metrics published from a specific host to verify a new rollout of the integration
    for that host, the metrics listing could be filtered down by selecting the specific
    host in the **Over** field as shown in the preceding screenshot.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，可以查找集成支持的任何度量标准，这些度量标准在集成的仪表板的 **Metrics** 标签下有所文档记录。如果您希望查找从特定主机发布的度量标准以验证该主机的新集成部署，可以通过在
    **Over** 字段中选择特定主机来过滤度量标准列表，正如前面的截图所示。
- en: We just looked at the generic steps of rolling out an agent-based integration
    and how to verify whether that is working. In a real-life production environment,
    there would be multiple such integrations enabled for many platform components
    such as NGINX. Even the same component could be used for multiple purposes. For
    example, NGINX could be used as an HTTP server serving a simple web application
    or as a proxy server directing web traffic to more complex computing environments
    such as a cluster of hosts running JVM or a Kubernetes cluster. In such cases,
    there must be some means to differentiate the source of metrics easily without
    depending on the hostnames, as the life of a host in a public cloud environment
    is not long-term. We already saw in [*Chapter 5*](B16483_05_Final_VK_ePub.xhtml#_idTextAnchor178),
    *Metrics, Events, and Tags*, how metrics are tagged to facilitate filtering and
    aggregation. We will revisit that in the next section in the context of rolling
    out an integration.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚了解了如何推出基于代理的集成的通用步骤，以及如何验证它是否正常工作。在实际的生产环境中，通常会为多个平台组件启用多个此类集成，例如 NGINX。即使是同一个组件，也可以用于多个不同的用途。例如，NGINX
    可以用作 HTTP 服务器，提供简单的 Web 应用程序服务，或者用作代理服务器，将 Web 流量引导到更复杂的计算环境，如运行 JVM 的主机集群或 Kubernetes
    集群。在这种情况下，必须有一些方式来轻松区分度量标准的来源，而不依赖主机名，因为公共云环境中的主机寿命通常较短。我们已经在[*第 5 章*](B16483_05_Final_VK_ePub.xhtml#_idTextAnchor178)《度量标准、事件与标签》中看到，度量标准是如何进行标签化以方便筛选和聚合的。我们将在下一节中回顾这一点，讨论如何在推出集成时使用。
- en: Tagging an integration
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 给集成打标签
- en: The metrics published by an integration can be tagged at the integration level
    for better visibility with Datadog resources where those metrics will be used
    eventually. We will see how that's done with the intention of implementing the
    best practices for effectiveness. We already learned in [*Chapter 2*](B16483_02_Final_VK_ePub.xhtml#_idTextAnchor115),
    *Deploying Datadog Agent*, and, in [*Chapter 5*](B16483_05_Final_VK_ePub.xhtml#_idTextAnchor178),
    *Metrics, Events, and Tags*, that host-level, custom tags can be added by using
    the tags configuration item in the `datadog.yaml` file. Custom tags added using
    this option will be available on all the metrics generated by various integrations
    running on that host. The tagging option is available at the integration level
    also, and the related tags will be applied only on the integration-specific metrics.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一个集成发布的度量标准可以在集成层面进行标签化，以便在 Datadog 资源中更好地展示这些度量标准，最终这些度量标准将在其中使用。我们将看到如何实现这一点，目的是实施最佳实践以提高效果。我们已经在[*第
    2 章*](B16483_02_Final_VK_ePub.xhtml#_idTextAnchor115)《部署 Datadog 代理》和[*第 5 章*](B16483_05_Final_VK_ePub.xhtml#_idTextAnchor178)《度量标准、事件与标签》中了解到，可以通过在
    `datadog.yaml` 文件中使用标签配置项来添加主机级的自定义标签。通过此选项添加的自定义标签将在该主机上运行的各种集成生成的所有度量标准中可用。标签选项也可以在集成层面使用，并且相关的标签将仅应用于特定集成的度量标准。
- en: In the use case that was mentioned in the previous section related to using
    NGINX for different roles, this multi-level tagging method will be useful to filter
    the NGINX metrics originating from multiple hosts. For example, at the host level,
    it can be identified as a web server or proxy server with the tag `role:proxy-server`
    or `role:web-server`, and at the integration level, more tags can be applied indicating
    the specific name of the component with the tag `component:nginx`. Note that this
    approach provides the flexibility to track the role of platform components such
    as **HAProxy**, NGINX, and **Apache** that could be used for a variety of HTTP
    and proxy serving roles in the entire application system.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节提到的使用 NGINX 执行不同角色的用例中，这种多层级标签方法将有助于筛选来自多个主机的 NGINX 度量标准。例如，在主机级别，可以通过标签
    `role:proxy-server` 或 `role:web-server` 来标识其作为 Web 服务器或代理服务器，而在集成层面，可以应用更多标签，标明该组件的具体名称，例如
    `component:nginx`。请注意，这种方法为跟踪平台组件的角色提供了灵活性，例如 **HAProxy**、NGINX 和 **Apache**，这些组件可能在整个应用系统中用于多种
    HTTP 和代理服务角色。
- en: Now, let's see how this tagging strategy we just discussed could be implemented
    in the sample case from the last section.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看我们刚才讨论的标签策略如何在上一节的示例案例中实现。
- en: 'In the `datadog.yaml` file, the following tag is added:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `datadog.yaml` 文件中，添加了以下标签：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the `conf.d/nginx.d/conf.yaml` file, the following two tags are added:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `conf.d/nginx.d/conf.yaml` 文件中，添加了以下两个标签：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note that the additional tag `nginx-version` will help to identify what kind
    of NGINX is used. To start applying these tags to the metrics, the Datadog Agent
    has to be restarted. After that, you can filter the metrics using these tags as
    in the following examples.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，附加标签 `nginx-version` 将帮助识别使用的是哪种类型的 NGINX。为了开始将这些标签应用到指标，必须重启 Datadog Agent。之后，你可以像以下示例一样使用这些标签过滤指标。
- en: 'In the first example, as shown in the following screenshot in *Figure 8.5*,
    you can see that an integration metric, `nginx.net.connections`, is tagged with
    a host-level tag, `proxy-server`. Note that all the host-level metrics and the
    metrics from other integrations will also be tagged in the same fashion. For example,
    the system-level metric `system.mem.used` will also be tagged with `role:proxy-server`
    once that is enabled:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个示例中，如以下屏幕截图所示的 *图 8.5*，你可以看到一个集成指标 `nginx.net.connections` 被标记为主机级标签 `proxy-server`。请注意，所有主机级别的指标以及来自其他集成的指标都会以相同的方式进行标记。例如，一旦启用，系统级指标
    `system.mem.used` 也会被标记为 `role:proxy-server`：
- en: '![Figure 8.5 – Host-level tag applied on an integration metric'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.5 – 应用于集成指标的主机级标签'
- en: '](img/Figure_8.5_B16483.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.5_B16483.jpg)'
- en: Figure 8.5 – Host-level tag applied on an integration metric
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.5 – 应用于集成指标的主机级标签
- en: 'In the next example, shown in *Figure 8.6*, the integration-level tags, `component:nginx`
    and `nginx-version:open-source`, are available only for filtering integration-level
    metrics. You cannot filter a host-level metric like `system.mem.used` using those
    tags:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，如 *图 8.6* 所示，集成级标签 `component:nginx` 和 `nginx-version:open-source` 仅用于过滤集成级指标。你不能使用这些标签来过滤主机级别的指标，例如
    `system.mem.used`：
- en: '![Figure 8.6 – Integration-level tag'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.6 – 集成级标签'
- en: '](img/Figure_8.6_B16483.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.6_B16483.jpg)'
- en: Figure 8.6 – Integration-level tag
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.6 – 集成级标签
- en: In the last two sections, we have learned the basics of how to enable an integration
    and how to tag the metrics published by an integration. With that basic understanding,
    we will dig deeper into the broader picture of the Datadog support for third-party
    applications and how they are integrated and organized. We will also look at some
    of the important integrations that we will see ourselves using most of the time
    with Datadog as they are the common platform components used to build a variety
    of software application systems.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的两个部分中，我们了解了如何启用集成的基础知识，以及如何标记集成发布的指标。通过这些基本的理解，我们将深入了解 Datadog 对第三方应用的支持，以及它们是如何集成和组织的。我们还将探讨一些重要的集成，这些集成将是我们在使用
    Datadog 时最常用的，因为它们是用于构建各种软件应用系统的常见平台组件。
- en: Reviewing supported integrations
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审查支持的集成
- en: It has been already mentioned that Datadog provides integrations for a lot of
    third-party platform components. Some of them, such as Apache, NGINX, Docker,
    MySQL, and the like, are more important than the rest because of their ubiquitous
    use across a variety of software applications. In this section, we will look at
    the important integrations and call out points of any importance.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Datadog 提供了许多第三方平台组件的集成。其中一些组件，如 Apache、NGINX、Docker、MySQL 等，比其他组件更为重要，因为它们在各种软件应用中广泛使用。在本节中，我们将探讨重要的集成，并重点介绍任何重要的要点。
- en: 'Datadog provides three different options for integrating platform components:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Datadog 提供了三种不同的方式来集成平台组件：
- en: '**Agent-based**: In the example we saw earlier in this chapter, the Datadog
    Agent configuration had to be updated to enable the integration. That is required
    because the platform component, NGINX in the example, runs on a host. It could
    be run as a microservice also and yet an agent is needed to monitor that environment.
    Essentially, the integration in that case is managed by the local agent. The Datadog
    Agent is shipped with official integrations and they are readily available as
    we saw in the example on NGINX. There are more integrations available that are
    community-built and they can be checked out at [https://github.com/DataDog/integrations-extras](https://github.com/DataDog/integrations-extras)
    on GitHub. Each integration is documented in its own README file there.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于Agent的**：在我们前面看到的本章示例中，必须更新Datadog Agent配置以启用集成。这是因为平台组件（例如示例中的NGINX）运行在主机上。它也可以作为微服务运行，但仍然需要一个Agent来监控该环境。本质上，在这种情况下，集成是由本地Agent管理的。Datadog
    Agent配备了官方集成，并且这些集成是现成可用的，正如我们在NGINX示例中所看到的那样。还有更多由社区构建的集成，您可以在GitHub上的[https://github.com/DataDog/integrations-extras](https://github.com/DataDog/integrations-extras)查看。每个集成都有自己的README文件进行文档化。'
- en: '**Crawler-based**: A software platform is not always built using components
    running only locally. Some services could be cloud-based and Datadog provides
    integrations with popular services such as GitHub, **Slack**, and **PagerDuty**.
    In such cases, credentials to access those service accounts are provided to Datadog
    and it will crawl the account to report metrics related to the given service account.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于爬虫的**：软件平台并不总是仅通过在本地运行的组件来构建。有些服务可能是基于云的，Datadog提供与流行服务（如GitHub、**Slack**和**PagerDuty**）的集成。在这种情况下，Datadog需要获取访问这些服务账户的凭证，并会爬取该账户以报告与给定服务账户相关的指标。'
- en: '**Custom integration**: Custom integration options are extensive with Datadog
    and they are general-purpose in nature and not specific to integrating platform
    components. The option to run custom checks from a Datadog Agent is the easiest
    option available to integrate a platform component for which official support
    is not available or adequate. We will see how that could be implemented in a sample
    later in this section. The following are the other options that can be used for
    rolling out a custom integration.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义集成**：Datadog提供了广泛的自定义集成选项，这些选项是通用的，而非特定于平台组件的集成。通过Datadog Agent运行自定义检查是集成没有官方支持或支持不足的平台组件的最简单方式。稍后我们将在本节的示例中看到如何实现这一点。以下是可以用于推出自定义集成的其他选项。'
- en: '**Use the Datadog API**: One of the major attractions of using Datadog for
    monitoring is its extensive REST API support. While you need a skilled team to
    roll out integrations using the Datadog API, having that option makes your monitoring
    infrastructure extensible and flexible.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用Datadog API**：使用Datadog进行监控的主要吸引力之一是其广泛的REST API支持。尽管您需要一支熟练的团队来通过Datadog
    API推出集成，但拥有此选项使得您的监控基础设施具有可扩展性和灵活性。'
- en: '**Build your own integration**: Datadog provides a developer toolkit to build
    your own integration following the Datadog norms. The details can be checked out
    at [https://docs.datadoghq.com/developers/integrations/new_check_howto](https://docs.datadoghq.com/developers/integrations/new_check_howto).'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建您自己的集成**：Datadog提供了一个开发工具包，允许您按照Datadog的规范构建自己的集成。详细信息可以在[https://docs.datadoghq.com/developers/integrations/new_check_howto](https://docs.datadoghq.com/developers/integrations/new_check_howto)中查看。'
- en: '**Publish metrics using StatsD**: We will look at this generic integration
    option in detail in [*Chapter 10*](B16483_10_Final_VK_ePub.xhtml#_idTextAnchor302),
    *Working with Monitoring Standards*.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用StatsD发布指标**：我们将在[*第10章*](B16483_10_Final_VK_ePub.xhtml#_idTextAnchor302)中详细介绍这一通用集成选项，*与监控标准一起工作*。'
- en: 'Now let''s look at some of the important integrations that are shipped with
    the Datadog Agent and available for users to enable and use:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一些与Datadog Agent一起提供并且用户可以启用和使用的重要集成：
- en: '**Integrations with the public cloud**: Datadog supports integrations with
    major public cloud platforms such as **AWS**, **Azure**, and **GCP** and the individual
    services offered on those platforms. These crawler-based integrations require
    access to your public cloud account and that can be provided in different ways.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与公共云的集成**：Datadog支持与主要公共云平台（如**AWS**、**Azure**和**GCP**）以及这些平台上提供的各个服务进行集成。这些基于爬虫的集成需要访问您的公共云账户，可以通过不同的方式提供访问权限。'
- en: '**Microservices resources**: Both **Docker** and **Kubernetes** are key components
    in building a microservices infrastructure. Integrations for both these platform
    components and related products are supported by Datadog.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微服务资源**：**Docker** 和 **Kubernetes** 是构建微服务基础架构中的关键组件。Datadog 支持这两个平台组件及相关产品的集成。'
- en: '**Proxy and HTTP services**: Apache, **Tomcat**, NGINX, HAProxy, **Microsoft
    IIS**, and **Memcached** are popular in this category and integrations are available
    for these components.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代理和 HTTP 服务**：Apache、**Tomcat**、NGINX、HAProxy、**Microsoft IIS** 和 **Memcached**
    在这一类别中非常流行，并且这些组件都有相关的集成可用。'
- en: '**Messaging services**: Popular messaging software and cloud services such
    as RabbitMQ, IBM MQ, Apache Active MQ, and Amazon MQ are supported.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息服务**：流行的消息软件和云服务，如 RabbitMQ、IBM MQ、Apache Active MQ 和 Amazon MQ，都得到了支持。'
- en: '**RDBMS**: Almost every popular **Relational Database Management System** (**RDBMS**),
    such as **Oracle**, **SQL Server**, **MySQL**, **PostgreSQL**, and **IBM DB2**,
    is supported. Monitoring databases is an important requirement as databases are
    central to many software applications. These integrations supply a variety of
    metrics that could be used to monitor the workings and performance of databases.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关系数据库管理系统** (**RDBMS**)：几乎所有流行的 **关系数据库管理系统**（**RDBMS**），如 **Oracle**、**SQL
    Server**、**MySQL**、**PostgreSQL** 和 **IBM DB2**，都得到了支持。监控数据库是一个重要需求，因为数据库在许多软件应用中是核心。通过这些集成，可以提供多种指标，用于监控数据库的工作状态和性能。'
- en: '**NoSQL and Big Data**: NoSQL databases are widely used in big data and cloud-based
    applications due to their flexibility and scalability. Popular software such as
    **Redis**, **Couchbase**, **Cassandra**, **MongoDB**, **Hadoop**, and related
    products from this category are supported by Datadog.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NoSQL 和大数据**：由于灵活性和可扩展性，NoSQL 数据库在大数据和云应用中被广泛使用。像 **Redis**、**Couchbase**、**Cassandra**、**MongoDB**、**Hadoop**
    以及来自这一类别的相关产品，均受到 Datadog 的支持。'
- en: '**Monitoring tools**: It''s common to have multiple monitoring tools in use
    as part of rolling out a comprehensive monitoring solution for a target environment.
    In such a scenario, Datadog will be one of the services in the mix, and it''s
    a good platform to aggregate inputs from other monitoring systems due to its superior
    UI and dashboarding features. Datadog also provides integrations with other monitoring
    tools to facilitate that consolidation. Currently, integrations for monitoring
    applications such as **Catchpoint**, **Elasticsearch**, **Nagios**, **New Relic**,
    **Pingdom**, **Prometheus**, **Splunk**, and **Sumo Logic** are available.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控工具**：在部署全面的监控解决方案时，通常会使用多个监控工具。在这种情况下，Datadog 将是其中一个服务平台，凭借其优越的用户界面和仪表盘功能，它是聚合其他监控系统输入的一个良好平台。Datadog
    还提供与其他监控工具的集成，以促进这一整合。目前，支持 **Catchpoint**、**Elasticsearch**、**Nagios**、**New
    Relic**、**Pingdom**、**Prometheus**、**Splunk** 和 **Sumo Logic** 等监控应用的集成。'
- en: If the Datadog-supplied integrations don't meet an important custom requirement,
    you can extend Datadog to cover that by implementing a custom check. In the next
    section, you will learn how to implement a sample custom check using a simple
    Python script that publishes a custom metric.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Datadog 提供的集成无法满足重要的自定义需求，你可以通过实现自定义检查来扩展 Datadog 以满足这些需求。在接下来的章节中，你将学习如何使用一个简单的
    Python 脚本来实现一个示例自定义检查，该脚本将发布一个自定义指标。
- en: Implementing custom checks
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现自定义检查
- en: Custom checks can be used to monitor a platform component if the available integration
    features are not adequate or an integration doesn't exist at all for that component.
    The Datadog API could be used as well in reporting custom-generated metrics to
    Datadog. We will explore this option with an example.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现有的集成功能不足，或者某个平台组件根本没有集成，可以使用自定义检查来监控该组件。Datadog API 也可以用来向 Datadog 报告自定义生成的指标。我们将通过一个示例来探讨这个选项。
- en: The process involved in implementing a check that publishes custom metrics is
    simple in Datadog and we can learn about that from the following example.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Datadog 中实现发布自定义指标的检查过程是简单的，我们可以通过以下示例来学习这个过程。
- en: Continuing with the example of NGINX from the previous sections in this chapter,
    we will try to extend that integration by adding a custom metric to Datadog. This
    custom metric, `kurian.nginx.error_log.size`, tracks the size of the NGINX error
    log file. It's better to begin the metric name with a namespace specific to your
    company or department, as the metric is labeled in this example, to filter custom
    metrics easily.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 继续本章前面部分关于NGINX的示例，我们将通过将自定义度量指标添加到Datadog来扩展该集成。这个自定义度量指标`kurian.nginx.error_log.size`跟踪NGINX错误日志文件的大小。最好以与你的公司或部门相关的命名空间开头度量指标名称，如本示例所示，以便轻松过滤自定义度量指标。
- en: Manually, the file size information could be gathered by running the command
    `ls -al` on any UNIX-compatible shell. The same command could be run from the
    Datadog custom check also and the output can be parsed to obtain the desired result.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 手动情况下，可以通过在任何UNIX兼容的Shell上运行`ls -al`命令来收集文件大小信息。也可以从Datadog自定义检查中运行相同的命令，并解析输出以获得所需的结果。
- en: 'Let''s call this custom check `custom_nginx`. The configuration steps largely
    follow those we did for enabling the NGINX integration earlier. In this case,
    the configuration directory and related resources have to be created:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们称这个自定义检查为`custom_nginx`。配置步骤大体上与我们之前为启用NGINX集成所做的相同。在这种情况下，必须创建配置目录和相关资源：
- en: 'Create a configuration directory and set up a configuration file for the check:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个配置目录，并为检查设置配置文件：
- en: '[PRE9]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create a `custom_nginx.yaml` file in the new directory and save the following
    string in it:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新目录中创建一个`custom_nginx.yaml`文件，并将以下内容保存到其中：
- en: '[PRE10]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Install the Python script in `/etc/datadog-agent/checks.d`:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Python脚本到`/etc/datadog-agent/checks.d`目录：
- en: 'Save the following script as `custom_nginx.py`. Note that the naming convention
    matters as that''s how the Datadog Agent relates the custom check to the script:'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将以下脚本保存为`custom_nginx.py`。请注意命名约定很重要，因为这就是Datadog Agent将自定义检查与脚本关联的方式：
- en: '[PRE11]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Besides the template requirements of the script, it does the following tasks:'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 除了脚本的模板要求外，它还执行以下任务：
- en: A. Runs the `ls -al` command on the `/var/log/nginx/error.log` file
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: A. 在`/var/log/nginx/error.log`文件上运行`ls -al`命令
- en: B. Parses the file size from the command output
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: B. 从命令输出中解析文件大小
- en: C. Reports the file size as a metric value to Datadog with the `component:nginx`
    tag applied
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: C. 将文件大小作为度量值报告给Datadog，并应用`component:nginx`标签
- en: 'Restart the Datadog Agent to enable the custom check. To check if it runs successfully,
    you can run the `status check` command and look for the status related to the
    custom check:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重启Datadog Agent以启用自定义检查。要检查是否成功运行，可以运行`status check`命令并查找与自定义检查相关的状态：
- en: '[PRE12]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Once you have verified the working of the custom check on the server side,
    you can expect the custom metric to be available on the Datadog UI, and it can
    be verified as in the following screenshot:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你验证了服务器端自定义检查的工作情况，你就可以预期在Datadog UI上看到自定义度量指标，并可以像以下截图所示那样进行验证：
- en: '![Figure 8.7 – Looking up the custom metric on Metrics Explorer'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.7 – 在Metrics Explorer中查找自定义度量指标](img/Figure_8.7_B16483.jpg)'
- en: '](img/Figure_8.7_B16483.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.8_B16483.jpg)'
- en: Figure 8.7 – Looking up the custom metric on Metrics Explorer
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.7 – 在Metrics Explorer中查找自定义度量指标
- en: A custom check typically goes through this sequence with varying methods to
    collect values for the related custom metrics it supports. By default, the check
    will be run every 15 seconds, and that behavior can be controlled by setting the
    configuration item `min_collection_interval`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义检查通常会经过此序列，使用不同的方法来收集它支持的相关自定义度量指标的值。默认情况下，检查每15秒运行一次，这一行为可以通过设置配置项`min_collection_interval`进行控制。
- en: 'Defining metrics with a custom namespace has other advantages also. The custom
    check will be identified as an **App** on the host dashboard, as you can see in
    the following screenshot, where the custom check and the metric it generates are
    identified using the namespace used:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 使用自定义命名空间定义度量指标还有其他优点。自定义检查将被识别为主机仪表盘上的**应用程序**，如以下截图所示，其中使用命名空间标识了自定义检查及其生成的度量指标：
- en: '![Figure 8.8 – Custom check listed as an app'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.8 – 自定义检查列为应用程序](img/Figure_8.8_B16483.jpg)'
- en: '](img/Figure_8.8_B16483.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.8_B16483.jpg)'
- en: Figure 8.8 – Custom check listed as an app
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.8 – 自定义检查列为应用程序
- en: The dashboard also tracks the NGINX integration as one of the apps on the host
    dashboard.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表盘还会将NGINX集成跟踪为主机仪表盘上的应用程序之一。
- en: Now let's look at the best practices related to the topics that we have covered
    in this chapter in the following section.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在接下来的部分中回顾一下与本章所涵盖的主题相关的最佳实践。
- en: Best practices
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最佳实践
- en: 'Between the Datadog-provided integrations and the hooks it provides to roll
    out your own custom integrations, there are many options available to you and
    so it''s better to follow the best practices instead of implementing something
    that works but is suboptimal:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Datadog 提供的集成和其提供的自定义集成接口之间，你有很多可用的选择，因此最好遵循最佳实践，而不是实现一个虽然可行但不够优化的方案：
- en: Explore all the Datadog-provided integrations fully and check whether you could
    meet the monitoring requirements using those. Custom code and configurations are
    costly to develop, error-prone, and hard to deploy and maintain, in the context
    of monitoring, and you should consider writing custom code as the last resort.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全探索所有 Datadog 提供的集成，并检查是否可以通过这些集成满足监控需求。在监控的上下文中，自定义代码和配置的开发成本高，易出错，且难以部署和维护，因此你应该将编写自定义代码作为最后的手段。
- en: If Datadog-supported integrations are not readily available, check in the big
    collection of community-maintained integrations.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有现成的 Datadog 支持的集成，请检查社区维护的庞大集成库。
- en: If you need to tweak a community-maintained integration to get it working for
    you, consider collaborating on that project and commit the changes publicly, as
    that will help to obtain useful feedback from the Datadog community.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你需要调整一个社区维护的集成使其适合你的需求，考虑参与该项目并公开提交更改，因为这样可以帮助获得 Datadog 社区的有价值反馈。
- en: Come up with a strategy for naming tags and custom metrics before you start
    using them with integrations. Systematic naming of metrics with appropriate namespaces
    will help to organize and aggregate them easily.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开始使用标签和自定义指标进行集成之前，先制定命名策略。对指标进行系统化命名并使用合适的命名空间，有助于轻松地组织和聚合它们。
- en: Maintain the custom code and configurations used for enabling and implementing
    integrations in the source code control system as a backup and, optionally, use
    that as the source for automated provisioning of Datadog resources using tools
    such as Terraform and Ansible. This best practice is not specific to integrations;
    it has to be followed whenever custom code and configurations are involved in
    setting up anything.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将用于启用和实现集成的自定义代码和配置保存在源代码控制系统中作为备份，并且可以选择将其作为自动化配置 Datadog 资源的源，使用如 Terraform
    和 Ansible 等工具。这个最佳实践不仅适用于集成；每当自定义代码和配置参与设置任何内容时，都应遵循这一原则。
- en: In a public cloud environment, the host-level configurations needed for enabling
    integrations must be baked into the machine image. For example, in AWS, such configurations
    and custom code, along with the Datadog Agent software, can be rolled out as part
    of the related AMI used for spinning a host.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在公有云环境中，启用集成所需的主机级配置必须内嵌到机器镜像中。例如，在 AWS 中，这些配置和自定义代码以及 Datadog Agent 软件可以作为相关
    AMI 的一部分进行部署，用于创建主机。
- en: Summary
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have looked at both Datadog-supplied integrations and the options to implement
    integrations on your own. A Datadog environment that monitors a large-scale production
    environment would use a mixed bag of out-of-the-box integrations and custom checks.
    Though it's easy to roll out custom checks in Datadog, it is advised to look at
    the total cost of doing so. In this chapter, you have learned how to select the
    right integrations and how to configure them. Also, you learned how to do custom
    checks if that is warranted, in the absence of an out-of-the-box integration.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经探讨了 Datadog 提供的集成以及自行实现集成的选项。一个监控大规模生产环境的 Datadog 环境通常会使用现成集成和自定义检查的组合。虽然在
    Datadog 中推出自定义检查非常简单，但建议你考虑实施这些检查的总成本。在本章中，你已经学习了如何选择合适的集成并进行配置。此外，你还学习了如何在缺少现成集成的情况下进行自定义检查。
- en: Continuing with the discussion on extending Datadog beyond the out-of-the-box
    features available to you, in the next chapter, we will look at how the Datadog
    API can be used to access Datadog features and use them for implementing custom
    integrations.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续讨论如何扩展 Datadog 以超越其现成功能的过程中，下一章我们将探讨如何使用 Datadog API 来访问 Datadog 功能，并利用这些功能来实现自定义集成。
