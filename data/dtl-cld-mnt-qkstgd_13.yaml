- en: '*Chapter 11*: Integrating with Datadog'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 11 章*：与 Datadog 集成'
- en: In the previous chapter, you learned about some of the important monitoring
    standards and how they are implemented in Datadog, with the objective of extending
    the features of the Datadog monitoring platform. So far, in this part of the book,
    we have been looking only at extending the monitoring capabilities of an organization
    focused on Datadog. The integration with Datadog can happen both ways – in addition
    to populating Datadog with monitoring related data for use with various Datadog
    features, the information available in Datadog could be utilized by other internal
    applications also.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您了解了一些重要的监控标准以及它们如何在 Datadog 中实现，目的是扩展 Datadog 监控平台的功能。到目前为止，在本书的这一部分，我们一直只关注于扩展专注于
    Datadog 的组织的监控能力。与 Datadog 的集成是双向的——除了向 Datadog 填充与监控相关的数据以便与各种 Datadog 功能一起使用外，Datadog
    中的信息也可以被其他内部应用程序利用。
- en: To roll out such general-purpose integrations between applications, a rich set
    of APIs should be available. We have already seen that the Datadog REST API is
    a comprehensive programming interface that other applications can use to access
    the Datadog platform to publish and extract information. We have also looked at
    DogStatsD as one of the methods to publish information to the Datadog platform,
    and we will learn more about how that interface can be used from other applications.
    We will also review other methods, which are mainly community-based efforts that
    are not officially shipped with the Datadog product suite but are very useful
    in rolling out custom integrations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要在应用程序之间推出此类通用集成，应该提供丰富的 API 集合。我们已经看到，Datadog REST API 是一个全面的编程接口，其他应用程序可以利用它来访问
    Datadog 平台，发布和提取信息。我们还介绍了 DogStatsD 作为一种向 Datadog 平台发布信息的方法，并且我们将进一步了解如何从其他应用程序使用该接口。我们还将回顾其他方法，这些方法主要是社区驱动的努力，并非官方与
    Datadog 产品套件一起发布，但在推出自定义集成时非常有用。
- en: 'In this chapter, you will learn about the commonly used libraries for Datadog
    integration and cover these topics specifically:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习关于 Datadog 集成的常用库，并具体涵盖以下主题：
- en: Using client libraries
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用客户端库
- en: Evaluating community projects
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估社区项目
- en: Developing integrations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发集成
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To implement the examples given in this chapter, you need to have an environment
    with the following tools installed:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现本章中的示例，您需要安装以下工具的环境：
- en: The Datadog Agent
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Datadog 代理
- en: '`pip3`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pip3`'
- en: '**Python 2.7** (optional)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python 2.7**（可选）'
- en: The Datadog developer toolkit
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Datadog 开发工具包
- en: A Git client
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git 客户端
- en: Using client libraries
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用客户端库
- en: In this section, we will look at two different client libraries – the first
    group consists of libraries that are wrappers for the Datadog REST API, and the
    second group of libraries are native **DogStatsD** client libraries. Both these
    groups of libraries are available for popular programming languages such as **C++**,
    **Java**, **Python**, **Java**, and **Go**.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看两类不同的客户端库——第一类是 Datadog REST API 的封装库，第二类是本地的 **DogStatsD** 客户端库。这两类库都适用于流行的编程语言，如
    **C++**、**Java**、**Python**、**Java** 和 **Go**。
- en: Datadog provides both categories of libraries for most programming languages.
    While a lot of community libraries are listed on the official Datadog website,
    we will only look at those that are actively maintained.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Datadog 为大多数编程语言提供了这两类库。尽管许多社区库在官方 Datadog 网站上有列出，但我们只关注那些正在积极维护的库。
- en: REST API-based client libraries
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于 REST API 的客户端库
- en: The basic Datadog client library is the REST API set, and the programming language-specific
    libraries are essentially wrappers on top of the REST APIs that facilitate the
    usage of APIs. In this section, we will look at some of the important client libraries
    specific to programming languages, and wherever relevant, we will look at sample
    code also.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的 Datadog 客户端库是 REST API 集合，而特定编程语言的库本质上是 REST API 上的封装，便于 API 的使用。在本节中，我们将探讨一些重要的特定编程语言的客户端库，并且在相关的地方，我们也会展示示例代码。
- en: The Datadog Python library
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Datadog Python 库
- en: We have already seen this library in action earlier in the sample programs in
    [*Chapter 9*](B16483_09_Final_VK_ePub.xhtml#_idTextAnchor261)*, Using the Datadog
    API*. This official library supports both REST APIs and DogStatsD to interact
    with Datadog programmatically.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在 [*第 9 章*](B16483_09_Final_VK_ePub.xhtml#_idTextAnchor261)*《使用 Datadog
    API》中看到过这个库的实际应用。这款官方库支持 REST API 和 DogStatsD，可以通过编程方式与 Datadog 进行交互。
- en: 'The library can be installed into your Python environment using the Python
    installation tool `pip` as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 该库可以通过 Python 安装工具 `pip` 安装到您的 Python 环境中，安装方法如下：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The code is available on GitHub at [https://github.com/DataDog/datadogpy](https://github.com/DataDog/datadogpy)
    and the library can be installed from the source code as well. To do that, clone
    the code repository to your local environment and run the setup program as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 代码可以在 GitHub 上找到，网址是 [https://github.com/DataDog/datadogpy](https://github.com/DataDog/datadogpy)，并且该库也可以从源代码安装。要执行此操作，克隆代码库到本地环境中，并按如下方式运行设置程序：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once installed, the REST API-specific calls can be done from the program by
    importing the `API` module, and the DogStatsD specific calls can be done by importing
    the `statsd` module into the Python environment.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，可以通过导入 `API` 模块在程序中执行 REST API 特定的调用，也可以通过将 `statsd` 模块导入 Python 环境来执行 DogStatsD
    特定的调用。
- en: The Python API client for Datadog
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Datadog 的 Python API 客户端
- en: 'This is an official Python library that maps to a collection of all public
    Datadog REST APIs. On GitHub, it is available at [https://github.com/DataDog/datadog-api-client-python](https://github.com/DataDog/datadog-api-client-python).
    Using `pip`, this library can be installed in a compatible Python environment
    as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个官方的 Python 库，映射了所有公共 Datadog REST API 的集合。它可以在 GitHub 上找到，网址是 [https://github.com/DataDog/datadog-api-client-python](https://github.com/DataDog/datadog-api-client-python)。使用
    `pip`，可以按如下方式在兼容的 Python 环境中安装该库：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As of now, it is compatible only with **Python 3.6** and above.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，该客户端仅与 **Python 3.6** 及以上版本兼容。
- en: The Java client for Datadog
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Datadog 的 Java 客户端
- en: When it comes to developing enterprise applications, Java is one of the most
    popular programming languages. Therefore, if a Java application needs to be integrated
    directly with Datadog, this official Java client library, which is a wrapper for
    the core Datadog REST API, is the default choice.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发企业级应用程序时，Java 是最流行的编程语言之一。因此，如果 Java 应用程序需要直接与 Datadog 集成，这个官方 Java 客户端库（它是
    Datadog REST API 的封装）是默认选择。
- en: The code repository related to this client library is available on GitHub at
    [https://github.com/DataDog/datadog-api-client-java](https://github.com/DataDog/datadog-api-client-java).
    Review the documentation available there to understand how this Java library can
    be built and installed in Java development environments using build tools such
    as **Maven** and **Gradle**.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 与该客户端库相关的代码库可以在 GitHub 上找到，网址是 [https://github.com/DataDog/datadog-api-client-java](https://github.com/DataDog/datadog-api-client-java)。请查阅那里提供的文档，以了解如何使用
    **Maven** 和 **Gradle** 等构建工具，在 Java 开发环境中构建和安装此 Java 库。
- en: The Go API client for Datadog
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Datadog 的 Go API 客户端
- en: Go is a modern, compiled language that is fast but has the flexibility of an
    interpreted language such as Python. While it's a general-purpose programming
    language, it has been popular with systems programming and is used for building
    **Command-Line Interface** (**CLI**) tools in the DevOps space. For example, part
    of the latest version of the Datadog Agent itself is developed in Go.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Go 是一种现代的编译型语言，它具有快速的执行速度，但又具备像 Python 这样的解释型语言的灵活性。虽然它是一种通用编程语言，但在系统编程中非常流行，并且被广泛用于在
    DevOps 领域构建**命令行接口**（**CLI**）工具。例如，最新版本的 Datadog Agent 部分就是用 Go 开发的。
- en: The officially supported Go client library for the Datadog REST API is maintained
    on GitHub at [https://github.com/DataDog/datadog-api-client-go](https://github.com/DataDog/datadog-api-client-go).
    The details of building and installing the library are available at the same location.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Datadog REST API 的官方 Go 客户端库在 GitHub 上维护，网址是 [https://github.com/DataDog/datadog-api-client-go](https://github.com/DataDog/datadog-api-client-go)。构建和安装该库的详细信息也可以在该位置找到。
- en: The Node.js client for Datadog
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Datadog 的 Node.js 客户端
- en: The Node.js platform is for running JavaScript on the server side, and it has
    been popular for developing web browser-based user interfaces. Datadog doesn't
    have an official client library to support this platform, and the `node-dogapi`
    code repository by *Brett Langdon* that is available on GitHub at [https://github.com/brettlangdon/node-dogapi](https://github.com/brettlangdon/node-dogapi)
    could be used instead. The code base has not been updated recently and its compatibility
    with the Datadog API has to be verified for the intended uses.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js 平台用于在服务器端运行 JavaScript，且在开发基于 Web 浏览器的用户界面时非常流行。Datadog 并没有提供官方的客户端库来支持这个平台，但可以使用由
    *Brett Langdon* 提供的 `node-dogapi` 代码库，GitHub 上的链接为 [https://github.com/brettlangdon/node-dogapi](https://github.com/brettlangdon/node-dogapi)。该代码库最近没有更新，其与
    Datadog API 的兼容性需要验证，以确保符合预期的使用要求。
- en: WebService-DataDog – a Perl client
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: WebService-DataDog – 一个 Perl 客户端
- en: Before the widespread use of Python, **Perl** used to be the default scripting
    language for building systems tools, especially where the processing of logs and
    textual data was concerned. This Perl client library, maintained by Jennifer Pinkham,
    has not been updated recently, yet it's worth it for Perl enthusiasts to try out.
    The code repository is available on GitHub at [https://github.com/jpinkham/webservice-datadog](https://github.com/jpinkham/webservice-datadog),
    with steps on how to install the related Perl module.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 广泛使用之前，**Perl** 曾是构建系统工具的默认脚本语言，尤其是在处理日志和文本数据方面。这个由 Jennifer Pinkham
    维护的 Perl 客户端库最近没有更新，但对于 Perl 爱好者来说，仍然值得一试。代码库可在 GitHub 上找到，链接为 [https://github.com/jpinkham/webservice-datadog](https://github.com/jpinkham/webservice-datadog)，并附有如何安装相关
    Perl 模块的步骤说明。
- en: Ruby client for Datadog API
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ruby 客户端用于 Datadog API
- en: '**Ruby** is a scripting language mostly used for building web applications,
    especially with the development framework **Ruby on Rails**. However, it''s a
    general-purpose programming language like Python, PHP, and Perl. Datadog has an
    official client library for Ruby that is an abstraction on top of the Datadog
    REST API.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ruby** 是一种脚本语言，主要用于构建 Web 应用程序，特别是结合 **Ruby on Rails** 开发框架使用。然而，它和 Python、PHP、Perl
    一样，都是通用编程语言。Datadog 为 Ruby 提供了一个官方客户端库，这是在 Datadog REST API 之上的抽象层。'
- en: The code repository is available at [https://github.com/DataDog/dogapi-rb](https://github.com/DataDog/dogapi-rb)
    with steps for installing the library and code samples for how to use the Datadog
    API in Ruby.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 代码库可以在 GitHub 上找到，链接为 [https://github.com/DataDog/dogapi-rb](https://github.com/DataDog/dogapi-rb)，附有安装库的步骤和如何在
    Ruby 中使用 Datadog API 的代码示例。
- en: DogStatsD client libraries
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DogStatsD 客户端库
- en: As mentioned in [*Chapter 10*](B16483_10_Final_VK_ePub.xhtml#_idTextAnchor302),
    *Working with Monitoring Standards*, DogStatsD is an implementation of the monitoring
    standard StatsD. Therefore, a general-purpose implementation of StatsD would work
    with the DogStatsD interface provided by the Datadog Agent. The community-based
    libraries reviewed here take advantage of that feature and thus provide a wrapper
    for the targeted programming language.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如在 [*第 10 章*](B16483_10_Final_VK_ePub.xhtml#_idTextAnchor302) 中提到的，*与监控标准一起工作*，DogStatsD
    是监控标准 StatsD 的一种实现。因此，任何通用的 StatsD 实现都可以与 Datadog Agent 提供的 DogStatsD 接口一起使用。这里回顾的社区库利用了这一特性，从而为目标编程语言提供了一个封装。
- en: The C++ DataDog StatsD client
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C++ DataDog StatsD 客户端
- en: Using this library, metrics and events can be published into the Datadog backend
    via the StatsD interface. The code base is available at [https://github.com/BoardiesITSolutions/cpp-datadogstatsd](https://github.com/BoardiesITSolutions/cpp-datadogstatsd)
    on GitHub.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个库，指标和事件可以通过 StatsD 接口发布到 Datadog 后端。代码库可以在 GitHub 上找到，链接为 [https://github.com/BoardiesITSolutions/cpp-datadogstatsd](https://github.com/BoardiesITSolutions/cpp-datadogstatsd)。
- en: The code can be built into a shared library for the target operating system,
    typically a Linux distribution. Some Windows platforms are also supported. The
    custom application that needs to publish metrics data and events can be dynamically
    linked to this shared library.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 代码可以被构建成适用于目标操作系统的共享库，通常是 Linux 发行版。一些 Windows 平台也得到支持。需要发布指标数据和事件的自定义应用程序可以动态链接到这个共享库。
- en: The Java DogStatsD client
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Java DogStatsD 客户端
- en: For **Java**, Datadog provides an official DogStatsD client library and it's
    available at [https://github.com/DataDog/java-dogstatsd-client](https://github.com/DataDog/java-dogstatsd-client)
    on GitHub. It supports more features than a standard StatsD library that is limited
    to publishing metrics data. Using the Java DogStatsD client, you can also maintain
    events and service checks.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于**Java**，Datadog提供了一个官方的DogStatsD客户端库，地址为[https://github.com/DataDog/java-dogstatsd-client](https://github.com/DataDog/java-dogstatsd-client)在GitHub上。它比标准的StatsD库支持更多功能，标准StatsD库仅限于发布度量数据。使用Java
    DogStatsD客户端，你还可以维护事件和服务检查。
- en: 'A specific version of the client JAR file could be imported into your project
    using Maven, through a configuration setting as given in the following example:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过Maven导入特定版本的客户端JAR文件到你的项目中，具体配置如下所示：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The StatsD APIs can be called from the Java application and can be built once
    the preceding configuration is added to the Maven setting.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从Java应用程序调用StatsD API，并在添加了前述配置到Maven设置之后构建。
- en: The DogStatsD client for C#
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C#的DogStatsD客户端
- en: '**C#** is a general-purpose programming language like Java and **C++** and
    it is part of the **.NET** application development framework originally promoted
    by Microsoft. It is supported on Windows platforms and multiple distributions
    of Linux. This library is maintained by Datadog and its source code repository
    is available on GitHub at [https://github.com/DataDog/dogstatsd-csharp-client](https://github.com/DataDog/dogstatsd-csharp-client).'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**C#**是像Java和**C++**一样的通用编程语言，是最初由微软推广的**.NET**应用开发框架的一部分。它在Windows平台和多个Linux发行版上得到支持。此库由Datadog维护，源代码仓库可以在GitHub上找到，地址为[https://github.com/DataDog/dogstatsd-csharp-client](https://github.com/DataDog/dogstatsd-csharp-client)。'
- en: This popular client library could be installed using the packages available
    at **NuGet** or using the source available on GitHub. As with the rest of the
    official DogStatsD client libraries, support is available for events and service
    checks in addition to the standard support for metrics. The details of installation
    and library usage are available with the code repository on GitHub.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个流行的客户端库可以通过**NuGet**上的软件包或通过GitHub上的源代码进行安装。与其他官方DogStatsD客户端库一样，除了标准的度量指标支持外，它还支持事件和服务检查。安装和库使用的详细信息可以在GitHub上的代码仓库中找到。
- en: datadog-go
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: datadog-go
- en: '**datadog-go** is a DogStatsD client library for the Go programming language
    and it is maintained by Datadog at [https://github.com/DataDog/datadog-go](https://github.com/DataDog/datadog-go)
    on GitHub. As with other official DogStatsD client libraries, this also supports
    events and service checks in addition to metrics.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**datadog-go**是一个为Go编程语言提供的DogStatsD客户端库，由Datadog在GitHub上的[https://github.com/DataDog/datadog-go](https://github.com/DataDog/datadog-go)进行维护。与其他官方的DogStatsD客户端库一样，它除了支持度量指标外，还支持事件和服务检查。'
- en: The library officially supports **Go** versions **1.12** and above. The details
    of the installation and usage of the library are available in the code repository
    on GitHub.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 该库正式支持**Go**版本**1.12**及以上。安装和使用该库的详细信息可以在GitHub上的代码仓库中找到。
- en: dogstatsd-ruby
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: dogstatsd-ruby
- en: '**dogstatsd-ruby** is a DogStatsD client library for the Ruby programming language
    and it''s maintained by Datadog at [https://github.com/DataDog/dogstatsd-ruby](https://github.com/DataDog/dogstatsd-ruby)
    on GitHub. As with other official DogStatsD client libraries, this also supports
    events and service checks in addition to metrics.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**dogstatsd-ruby**是一个为Ruby编程语言提供的DogStatsD客户端库，由Datadog在GitHub上的[https://github.com/DataDog/dogstatsd-ruby](https://github.com/DataDog/dogstatsd-ruby)进行维护。与其他官方的DogStatsD客户端库一样，它也支持事件和服务检查，除了度量指标外。'
- en: The details of the installation and usage of the library are available with
    the code repository on GitHub. Full API documentation is available at [https://www.rubydoc.info/github/DataDog/dogstatsd-ruby/master/Datadog/Statsd](https://www.rubydoc.info/github/DataDog/dogstatsd-ruby/master/Datadog/Statsd).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 该库的安装和使用的详细信息可以在GitHub上的代码仓库中找到。完整的API文档可以在[https://www.rubydoc.info/github/DataDog/dogstatsd-ruby/master/Datadog/Statsd](https://www.rubydoc.info/github/DataDog/dogstatsd-ruby/master/Datadog/Statsd)查阅。
- en: Community DogStatsD client libraries
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 社区版DogStatsD客户端库
- en: 'While there are DogStatsD client libraries available for popular programming
    languages that are maintained by Datadog, as with REST API-based client libraries,
    community efforts have been active to support other languages such as Node.js
    and Perl. In general, the community-based libraries are wrappers over the general-purpose
    StatsD libraries and they support only metrics. The following are some of the
    notable libraries:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Datadog 为流行的编程语言提供了由 Datadog 维护的 DogStatsD 客户端库，但与基于 REST API 的客户端库一样，社区也积极支持其他语言，如
    Node.js 和 Perl。通常，基于社区的库是通用 StatsD 库的封装，并且仅支持指标。以下是一些值得注意的库：
- en: '**Host-shots client library for Node.js**: This is available at [https://github.com/brightcove/hot-shots](https://github.com/brightcove/hot-shots)
    on GitHub. It''s a general-purpose client library that supports other monitoring
    tools that provide a StatsD interface.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node.js 的 Host-shots 客户端库**：此库可以在 GitHub 上的 [https://github.com/brightcove/hot-shots](https://github.com/brightcove/hot-shots)
    找到。这是一个通用的客户端库，支持其他提供 StatsD 接口的监控工具。'
- en: '**NodeDogStatsD**: This is another Node.js client library and the code repository
    and documentation are available at [https://github.com/mrbar42/node-dogstatsd](https://github.com/mrbar42/node-dogstatsd)
    on GitHub.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NodeDogStatsD**：这是另一个 Node.js 客户端库，代码仓库和文档可以在 GitHub 上的 [https://github.com/mrbar42/node-dogstatsd](https://github.com/mrbar42/node-dogstatsd)
    找到。'
- en: '**DataDog DogStatsD – A Perl module for DogStatsd**: Using this module, metrics
    data can be published to Datadog from Perl programs. The code and documentation
    are available at [https://github.com/binary-com/dogstatsd-perl](https://github.com/binary-com/dogstatsd-perl)
    on GitHub.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DataDog DogStatsD – 用于 DogStatsD 的 Perl 模块**：使用此模块，可以从 Perl 程序向 Datadog 发布指标数据。代码和文档可以在
    GitHub 上的 [https://github.com/binary-com/dogstatsd-perl](https://github.com/binary-com/dogstatsd-perl)
    找到。'
- en: For a complete and up-to-date list of client libraries, check out the official
    compilation at [https://docs.datadoghq.com/developers/libraries/](https://docs.datadoghq.com/developers/libraries/).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看完整且最新的客户端库列表，请访问官方编译的 [https://docs.datadoghq.com/developers/libraries/](https://docs.datadoghq.com/developers/libraries/)。
- en: In this section, you have become familiar with two groups of client libraries
    that could be used with major programming languages to access Datadog resources.
    Those client libraries are useful in building Datadog-specific features from a
    program or a script from the ground up, as part of integrating with the Datadog
    SaaS backend. In the next section, we will look at some of the tools that provide
    either well-integrated features or building blocks to develop such integrations.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你已经了解了两组可以与主要编程语言一起使用的客户端库，以访问 Datadog 资源。这些客户端库对于从头开始构建 Datadog 特定功能（例如程序或脚本）非常有用，作为与
    Datadog SaaS 后端集成的一部分。在下一节中，我们将介绍一些提供良好集成功能或构建块的工具，用于开发这些集成。
- en: Evaluating community projects
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估社区项目
- en: There are tools developed by other companies and community groups that make
    your life easier with Datadog-related integration and automation. In this section,
    we will look at some of the useful tools and frameworks available in that category.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些由其他公司和社区团体开发的工具，可以让你在 Datadog 相关的集成和自动化方面更加轻松。在本节中，我们将介绍一些在这一类别中非常有用的工具和框架。
- en: dog-watcher by Brightcove
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Brightcove 的 dog-watcher
- en: In a large-scale environment with several dashboards and monitors built on Datadog
    for operational use, maintaining them could quickly become a major chore. This
    Node.js utility can be used to take backup of Datadog dashboards and monitors
    in JSON format and save it into a Git repository. Such backups are also very useful
    in recreating similar resources in the same account or elsewhere.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个大规模环境中，若有多个仪表板和监控项基于 Datadog 构建用于操作使用，维护它们可能会迅速变成一项重大工作。这个 Node.js 实用工具可以用来备份
    Datadog 的仪表板和监控项，以 JSON 格式保存到 Git 仓库中。这样的备份也在重新创建相似资源到同一账户或其他地方时非常有用。
- en: The utility needs to be run as a Node.js service. The code and the details of
    configuring it to run are available on GitHub at [https://github.com/brightcove/dog-watcher](https://github.com/brightcove/dog-watcher).
    It could be scheduled to take periodic backups or take backups as and when there
    would be changes to the Datadog resources being tracked for backing up.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具需要作为 Node.js 服务运行。代码和配置运行的详细信息可以在 GitHub 上的 [https://github.com/brightcove/dog-watcher](https://github.com/brightcove/dog-watcher)
    找到。它可以安排定期备份，或者在跟踪的 Datadog 资源发生变化时备份。
- en: kennel
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: kennel
- en: '**kennel** is a utility developed in Ruby that can be used to manage Datadog
    monitors, dashboards, and **Service Level Objects** (**SLOs**) as code. Managing
    all kinds of infrastructure resources as code is a DevOps tenet and this tool
    is useful in implementing that. The code and detailed documentation on the utility
    are available on GitHub at [https://github.com/grosser/kennel](https://github.com/grosser/kennel).'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**kennel** 是一个用 Ruby 开发的工具，可以作为代码来管理 Datadog 监控、仪表盘和 **服务水平对象**（**SLOs**）。将各种基础设施资源作为代码进行管理是
    DevOps 的一个原则，这个工具在实现这一目标中非常有用。该工具的代码和详细文档可以在 GitHub 上找到，地址是 [https://github.com/grosser/kennel](https://github.com/grosser/kennel)。'
- en: Managing monitors using Terraform
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Terraform 管理监控
- en: '**Terraform** is a general-purpose tool to stand up and maintain **infrastructure
    as code** (**IaC**). It can be used to manage Datadog monitors by defining the
    monitors in a Terraform configuration language.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**Terraform** 是一个通用工具，用于搭建和维护 **基础设施即代码**（**IaC**）。它可以通过在 Terraform 配置语言中定义监控来管理
    Datadog 监控。'
- en: Terraform maintains the state of a resource it manages by bringing the current
    status of the resource to match with its definition in the code. If the resource
    doesn't exist, it will be created.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 通过将资源的当前状态与代码中的定义进行匹配，来维护它所管理的资源的状态。如果资源不存在，它将会被创建。
- en: 'A variety of Datadog resources and integrations can be managed using Terraform,
    and some of the important ones are the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 Terraform 管理多种 Datadog 资源和集成，其中一些重要的资源如下：
- en: Users
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户
- en: Roles
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 角色
- en: Metrics
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指标
- en: Monitors
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控
- en: Dashboards
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仪表盘
- en: Downtimes
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 停机时间
- en: Integrations with public cloud platforms
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与公共云平台的集成
- en: The standard Terraform documentation about these resources is available at [https://registry.terraform.io/providers/DataDog/datadog/latest/docs](https://registry.terraform.io/providers/DataDog/datadog/latest/docs).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这些资源的标准 Terraform 文档可以在 [https://registry.terraform.io/providers/DataDog/datadog/latest/docs](https://registry.terraform.io/providers/DataDog/datadog/latest/docs)
    中找到。
- en: Ansible modules and integration
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ansible 模块和集成
- en: '**Ansible** is a configuration management tool that is very popular with DevOps
    engineers due to its general-purpose utility in addition to its core configuration
    management features. When it comes to managing infrastructure, it''s very similar
    to Terraform, with direct support for Datadog resources.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ansible** 是一个配置管理工具，由于其通用性，除了核心配置管理功能外，它在 DevOps 工程师中非常受欢迎。在基础设施管理方面，它与 Terraform
    非常相似，直接支持 Datadog 资源。'
- en: In general, Ansible provides modules to support a certain type of infrastructure
    resource. Currently, there are Ansible modules available to publish events and
    manage monitors. Using these modules, Ansible playbooks can be built to manage
    events and monitors in a Datadog account.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，Ansible 提供了模块来支持某种类型的基础设施资源。目前，已经有 Ansible 模块可以发布事件和管理监控。通过这些模块，可以构建 Ansible
    playbooks 来管理 Datadog 账户中的事件和监控。
- en: Datadog ships an official integration for Ansible also. It can be used to track
    the execution of Ansible playbooks using a callback mechanism. However, this is
    not very useful in terms of the information published to the Datadog platform.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Datadog 还提供了一个官方的 Ansible 集成。它可以通过回调机制跟踪 Ansible playbook 的执行。然而，就公开到 Datadog
    平台的信息而言，这个集成并不十分有用。
- en: Datadog ships integrations for a lot of applications and public cloud platforms
    and services. It's possible to develop one if one is not available for a third-party
    tool of your choice or an internal application that needs to be monitored by Datadog.
    We will learn the basics of developing and deploying a custom integration in the
    next section.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Datadog 提供了许多应用程序和公共云平台及服务的集成。如果您选择的第三方工具或需要通过 Datadog 监控的内部应用没有现成的集成，您可以开发一个自定义集成。我们将在下一节学习如何开发和部署自定义集成的基础知识。
- en: Developing integrations
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发集成
- en: In [*Chapter 8*](B16483_08_Final_VK_ePub.xhtml#_idTextAnchor248), *Integrating
    with Platforms Components*, you learned how to configure an integration. Datadog
    ships official integrations with a lot of third-party applications that are used
    to build the cloud platform where a software application runs. The best thing
    about using an official integration is that the metrics specific to that integration
    will be available for use in dashboards, monitors, and other Datadog resources
    after minimal configuration.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 8 章*](B16483_08_Final_VK_ePub.xhtml#_idTextAnchor248)，*与平台组件集成*，您学习了如何配置集成。Datadog
    提供了许多与第三方应用程序集成的官方集成，这些应用程序被用于构建运行软件应用程序的云平台。使用官方集成的最大好处是，经过最少的配置后，该集成特定的指标将可以在仪表板、监视器和其他
    Datadog 资源中使用。
- en: 'Datadog lets you build custom integrations that would work exactly like the
    official ones. It would require DevOps expertise, especially coding skills in
    Python, and it''s not easy to learn the procedure Datadog lays out to build an
    integration that would be compatible with the Datadog Agent. However, it might
    make sense to build an integration for the following reasons:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Datadog 允许您构建自定义集成，使其像官方集成一样工作。这需要 DevOps 专业知识，特别是在 Python 编程方面的技能，而且学习 Datadog
    提供的构建与 Datadog Agent 兼容的集成程序并不容易。然而，出于以下原因，构建集成可能是有意义的：
- en: '**Building an integration for an internal application**: Even though it is
    internally used, the application might be deployed at large scale in production,
    and a Datadog integration would help to standardize the monitoring requirements
    of the application.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为内部应用程序构建集成**：尽管是内部使用，但该应用程序可能会在生产环境中大规模部署，Datadog 集成有助于标准化该应用程序的监控需求。'
- en: '**Building an integration for a third-party application**: The monitoring requirement
    is similar to that of an internal application as described in the last use case,
    but no official or community-level integration is available yet or the requirements
    aren''t met.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为第三方应用程序构建集成**：监控需求与上一使用案例中描述的内部应用程序类似，但尚无官方或社区级的集成，或者需求没有得到满足。'
- en: '**Providing monitoring support for an application intended for external use**:
    You may have an application that is intended for an external audience as third-party
    software, and providing Datadog with an integration could be part of the monitoring
    support strategy for that application.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为面向外部使用的应用程序提供监控支持**：您可能有一个面向外部用户的应用程序作为第三方软件，向 Datadog 提供集成可能是该应用程序监控支持策略的一部分。'
- en: In this section, you will learn the steps to build an integration from scratch.
    Building a full-fledged integration is beyond the scope of this chapter, but you
    will learn the general steps to do so with some hands-on work.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习从头开始构建集成的步骤。构建一个完整的集成超出了本章的范围，但您将通过一些实践操作了解一般步骤。
- en: Prerequisites
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 先决条件
- en: 'Some setup is needed in your local development environment for the integration
    to be developed, tested, built, packaged, and deployed:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地开发环境中需要进行一些设置，以便开发、测试、构建、打包和部署集成：
- en: Python 3.8 and above, and optionally Python 2.7 installed.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Python 3.8 及以上版本，Python 2.7 为可选项。
- en: 'The developer toolkit. This can be installed using the `pip3` utility as follows:'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者工具包。可以使用 `pip3` 工具安装，方法如下：
- en: '[PRE4]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will install a lot of things in the local Python 3 environment and the
    output will look like the following if everything goes well:'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将安装许多内容到本地 Python 3 环境中，如果一切顺利，输出将如下所示：
- en: '[PRE5]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Docker, to run unit and integration tests.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker，用于运行单元测试和集成测试。
- en: If the integration is to be tested by deploying with a Datadog Agent, have the
    Agent installed. Note that an integration package can be deployed anywhere, and
    so the Datadog Agent doesn't have to run locally where the integration is developed
    and tested for compatibility.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果集成需要通过部署 Datadog Agent 来进行测试，请确保已安装该 Agent。请注意，集成包可以部署到任何地方，因此 Datadog Agent
    不需要在开发和测试集成兼容性的位置本地运行。
- en: The commands and output provided here are verified on a Unix-like system such
    as Linux or Mac. The development could be done on Windows as well; refer to the
    official documentation for platform-specific directions.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这里提供的命令和输出已在类 Unix 系统（如 Linux 或 Mac）上验证。也可以在 Windows 上进行开发；有关平台特定的操作，请参见官方文档。
- en: Setting up the tooling
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置工具链
- en: 'The `integrations-extras` code repository needs to be cloned from GitHub to
    the local environment to have all the scaffolding in place for developing and
    building the integration. Follow these steps to set that up:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`integrations-extras` 代码仓库需要从 GitHub 克隆到本地环境，以便为开发和构建集成提供所有框架。按照以下步骤进行设置：'
- en: 'Create a directory for the development work in your home directory:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的主目录中创建一个开发工作目录：
- en: '[PRE6]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Clone the `integrations-extras` repository:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆 `integrations-extras` 仓库：
- en: '[PRE7]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Set `integrations-extras` as the default repository:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `integrations-extras` 设置为默认仓库：
- en: '[PRE8]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Next, we will set up a dedicated folder for the integration.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将为集成设置一个专用文件夹。
- en: Creating an integration folder
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建集成文件夹
- en: For the new integration, the development kit can create the whole directory
    structure populated with template files. You can try a dry run to see the directory
    structure and files that would be created.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 对于新集成，开发工具包可以创建整个目录结构，并填充模板文件。你可以尝试进行演练，以查看将要创建的目录结构和文件。
- en: For the purpose of describing the steps better, let's assume that you have an
    application named *CityWeather* that supplies a bunch of weather-related information
    for a specific city at any time of day. The objective of the integration is to
    get some of that weather info to be published into Datadog.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地描述这些步骤，假设你有一个名为 *CityWeather* 的应用，它随时提供特定城市的天气相关信息。集成的目标是将这些天气信息的一部分发布到
    Datadog。
- en: 'The dry run of creating the directory can be done as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 创建目录的演练可以按如下方式进行：
- en: '[PRE9]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The output would show a hierarchical list of directories and files in the scaffolding;
    for brevity, it is not provided here.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将显示框架中目录和文件的层次列表；为了简洁起见，这里没有提供。
- en: 'The directory structure can be created by running the same command without
    the `-n` option. Though the name used has mixed characters, the top-level directory
    name will be all lowercase. So, you can change directory into the newly created
    directory as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过运行相同的命令而不带 `-n` 选项来创建目录结构。尽管使用的名称包含混合字符，但顶级目录名称将全部小写。因此，你可以按如下方式进入新创建的目录：
- en: '[PRE10]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In that directory, you will find these files and directories:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在该目录中，你将找到以下文件和目录：
- en: '`README.md`: The README file used for documenting the new integration in Git.
    The template provided has the correct headers and formatting for the documentation
    to be standard.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`README.md`：用于在 Git 中记录新集成的 README 文件。提供的模板具有正确的头部和格式，以确保文档标准化。'
- en: '`manifest.json`: The manifest describing the integration and file locations.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`manifest.json`：描述集成和文件位置的清单文件。'
- en: '`tests`: The directory where unit and integration tests will be configured
    and maintained.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tests`：用于配置和维护单元测试和集成测试的目录。'
- en: '`metadata.csv`: Maintains the list of all collected metrics.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`metadata.csv`：维护所有收集到的度量指标列表。'
- en: '`tox.ini`: Now, `tox` is used to run the tests. Make sure that the Python version
    specified in this configuration file used by `tox` matches the Python versions
    available locally. For example, if Python 2.7 and Python 3.9 are used, the content
    of this file would look like the following and you would make changes as needed:'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tox.ini`：现在，`tox` 用于运行测试。确保该配置文件中指定的 Python 版本与本地可用的 Python 版本匹配。例如，如果使用的是
    Python 2.7 和 Python 3.9，该文件的内容将如下所示，并根据需要进行更改：'
- en: '[PRE11]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, with the tooling for developing an integration in place locally, let's
    try running the rest of the steps using an existing integration that is available
    in the repository. Note that there are about 100 extra integrations available
    in this repository and you could use them by building the corresponding related
    package, a trick that you will learn soon.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，本地已经具备了开发集成的工具，接下来让我们尝试使用仓库中现有的集成来执行其余步骤。请注意，在这个仓库中大约有 100 个额外的集成，你可以通过构建相应的相关包来使用它们，接下来你将学到这个技巧。
- en: For the purposes of testing and deployment practice, let's select an integration
    available for **Zabbix**. This is a popular on-premises monitoring tool and is
    widely used in both data centers and cloud platforms. Many companies that are
    migrating to using Datadog might have Zabbix installations to deal with, and a
    more practical strategy would be to integrate with Zabbix rather than trying to
    replace it, with a focus on rolling out Datadog for monitoring any new infrastructure.
    In such scenarios, you will see Datadog and Zabbix (or another on-premises monitoring
    application) running side by side.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试和部署的实践目的，我们选择一个 **Zabbix** 集成。这是一个流行的本地监控工具，广泛应用于数据中心和云平台。许多正在迁移到 Datadog
    的公司可能需要处理现有的 Zabbix 安装，更实用的策略是与 Zabbix 集成，而不是试图替代它，重点是为监控任何新基础设施推出 Datadog。在这种情况下，Datadog
    和 Zabbix（或其他本地监控应用）将并行运行。
- en: Running tests
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行测试
- en: For the code developed for the integration, both unit and integration tests
    can be run locally with the help of Docker. In the case of Zabbix integration,
    Zabbix will be run locally as a microservice on Docker and the tests will be run
    against that instance. The Zabbix deployment details are provided in a `docker-compose.yml`
    file.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 对于集成开发的代码，可以借助 Docker 在本地运行单元测试和集成测试。对于 Zabbix 集成，Zabbix 将作为 Docker 上的微服务本地运行，并且测试将针对该实例运行。Zabbix
    部署的详细信息提供在 `docker-compose.yml` 文件中。
- en: 'Follow these steps to deploy Zabbix and test the integration:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤部署 Zabbix 并测试集成：
- en: Change directory to the top level of the Git repository.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Git 仓库的顶层目录。
- en: 'Change directory to that of Zabbix integration:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Zabbix 集成的目录：
- en: '[PRE12]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Look up the `docker-compose.yml` file:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找 `docker-compose.yml` 文件：
- en: '[PRE13]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The output is not provided here for brevity.
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里没有提供输出结果，以简洁为主。
- en: 'Run the tests:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行测试：
- en: '[PRE14]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output is verbose and it would end with messages similar to the following,
    indicating the success of the tests:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出信息较为详细，最后会以类似以下的消息结束，表示测试成功：
- en: '[PRE15]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Next, let's see how to build a configuration file for the integration.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何为集成构建配置文件。
- en: Building a configuration file
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建配置文件
- en: 'The example configuration file available with an integration, `conf.yaml.example`,
    is generated from the template file available at `assets/configuration/spec.yaml`.
    After making changes to the template file, the sample configuration file can be
    generated as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 集成提供的示例配置文件 `conf.yaml.example` 是从 `assets/configuration/spec.yaml` 中的模板文件生成的。更改模板文件后，可以按如下方式生成示例配置文件：
- en: '[PRE16]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Next, let's look at how the integration code can be packaged for installation.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何将集成代码打包以便安装。
- en: Building a package
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建包
- en: 'To deploy the integration, it needs to be packaged into a wheel, a format used
    for packing and distributing Python programs. The wheel will have only those files
    needed for the working of the integration, and it will not contain most of the
    source files used to build the integration. The integration can be built as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署集成，需要将其打包成 wheel 格式，这是一种用于打包和分发 Python 程序的格式。wheel 文件仅包含集成功能所需的文件，并不会包含构建集成所用的大多数源文件。可以按如下方式构建集成：
- en: '[PRE17]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The wheel file can be found at the location mentioned in the build command
    output:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: wheel 文件可以在构建命令输出中提到的位置找到：
- en: '[PRE18]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Next, let's look at how the integration is installed using the package just
    built.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何使用刚构建的包安装集成。
- en: Deploying an integration
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署集成
- en: 'If the Datadog Agent runs locally, you can install it by pointing to the wheel
    built in the last step. The wheel must be copied to other locations wherever it
    is planned to be installed. Once the wheel file is available locally, it can be
    installed as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Datadog Agent 在本地运行，可以通过指向上一步中构建的 wheel 来安装它。wheel 文件必须复制到计划安装的其他位置。一旦 wheel
    文件在本地可用，可以按如下方式安装：
- en: '[PRE19]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This will basically make the integration available to the Datadog Agent to
    be enabled as an official integration shipped with the Datadog Agent. Now if you
    check under the `conf.d` directory of the Datadog Agent home directory, you can
    see that `zabbix.d` is listed as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上会使集成可以供 Datadog Agent 使用，并作为官方集成与 Datadog Agent 一起启用。如果你检查 Datadog Agent
    主目录下的 `conf.d` 目录，你可以看到 `zabbix.d` 列出如下：
- en: '[PRE20]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: As with any other standard integration, to enable it, `conf.yaml` needs to be
    created from the sample file provided and the Datadog Agent service needs to be
    restarted.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他标准集成一样，要启用它，需要根据提供的示例文件创建`conf.yaml`，并重启Datadog Agent服务。
- en: The complete procedure to build a Datadog integration is officially documented
    at [https://docs.datadoghq.com/developers/integrations/new_check_howto](https://docs.datadoghq.com/developers/integrations/new_check_howto).
    Refer to that documentation for finer details and updates. Now, let's look at
    the best practices related to the topics you have just looked at.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 构建Datadog集成的完整流程在[https://docs.datadoghq.com/developers/integrations/new_check_howto](https://docs.datadoghq.com/developers/integrations/new_check_howto)上有官方文档。请参考该文档以获取更详细的细节和更新。现在，让我们来看看与你刚才看到的主题相关的最佳实践。
- en: Best practices
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最佳实践
- en: 'The availability of client libraries and the option to build custom integrations
    add a lot of flexibility to your toolbox for integrating Datadog with another
    application or even a batch job. However, there are certain best practices that
    you need to look at before starting to implement automation or customization using
    one or more of those options:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端库的可用性以及构建自定义集成的选项为你提供了很大的灵活性，可以将Datadog与其他应用程序甚至批处理作业集成。然而，在开始使用这些选项之一或多个进行自动化或自定义时，你需要先了解一些最佳实践：
- en: If you can choose the programming language, pick a language that is better supported
    and popular, such as Python for scripting and Java for enterprise applications.
    If the application to be integrated runs primarily runs on Microsoft Windows platforms,
    choosing C# would be wise.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你能选择编程语言，建议选择更受支持和流行的语言，例如用于脚本的Python和用于企业应用的Java。如果需要集成的应用主要运行在Microsoft
    Windows平台上，选择C#是明智的。
- en: Choose a client library that is officially maintained. It's a no-brainer – you
    need to rely on a library that will keep up with the enhancements made to the
    Datadog platform and REST API.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择一个官方维护的客户端库。这是显而易见的——你需要依赖一个能够跟上Datadog平台和REST API增强功能的库。
- en: Plan to manage Datadog resources as code using Terraform. Ansible can help there
    too, but its support for Datadog is limited as of now.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计划使用Terraform将Datadog资源管理为代码。Ansible也可以提供帮助，但目前它对Datadog的支持有限。
- en: If you build an integration and if it has an external use, publish it to Datadog's
    **integrations-extras** repository on GitHub. Use by others can help to get valuable
    feedback and fixes to make it more robust and useful.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你构建了一个集成，并且它有外部使用，请将其发布到Datadog的**integrations-extras** GitHub仓库。其他人的使用可以帮助获得有价值的反馈和修复，使其更加健壮和实用。
- en: Following these best practices and related patterns will help you choose the
    right approach for implementing your integration requirements.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循这些最佳实践和相关模式将帮助你选择正确的方法来实现集成需求。
- en: Summary
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: By now, you should be aware of all the important integration options available
    in Datadog for a variety of use cases; let's recap what we covered in this chapter
    specifically.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你应该已经了解了Datadog中针对各种使用场景提供的所有重要集成功能；让我们回顾一下本章具体讨论的内容。
- en: Many Datadog client libraries targeting popular programming languages are available,
    both officially maintained and at the community level. There are two types of
    client libraries – ones that provide a language wrapper to the Datadog REST API
    and libraries that provide support interfacing with Datadog via the StatsD-compatible
    DogStasD service. Also, there are community-level efforts to integrate with Datadog
    that are available on GitHub.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 针对流行编程语言的许多Datadog客户端库是可用的，既有官方维护的，也有社区层级的。有两种类型的客户端库——一种提供对Datadog REST API的语言封装，另一种通过与StatsD兼容的DogStatsD服务提供Datadog接口支持。此外，GitHub上也有社区级的Datadog集成项目。
- en: There are other types of Datadog client libraries that are not discussed here,
    such as **APM** and **distributed tracing libraries**, libraries that support
    serverless computing resources such as **AWS Lambda**, and client libraries that
    specifically target the log management feature of Datadog. The usage of these
    libraries is not different from how the core API and DogStatsD libraries are used,
    and you should check those out if you have any related use cases.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有讨论其他类型的Datadog客户端库，例如**APM**和**分布式追踪库**，支持无服务器计算资源（如**AWS Lambda**）的库，以及专门针对Datadog日志管理功能的客户端库。这些库的使用方式与核心API和DogStatsD库的使用方式没有不同，如果你有相关的使用场景，应该查看这些库。
- en: With this chapter, *Part 3* of this book, *Extending Datadog*, has been completed.
    In the next part of the book, you will learn more advanced monitoring concepts
    and features that are implemented by Datadog. We looked at monitoring microservices
    briefly earlier, and, in the next chapter, you will learn more about monitoring
    microservices, especially how this is done in an environment orchestrated by Kubernetes.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 本章完成了本书的*第三部分*，*扩展Datadog*。在本书的下一部分，你将学习Datadog实现的更高级的监控概念和功能。我们之前简要地看了微服务监控，接下来的章节中，你将深入了解微服务监控，特别是如何在Kubernetes编排的环境中进行监控。
