- en: '*Chapter 3*: Architecting for DevOps Quality'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第三章*：为DevOps质量架构设计'
- en: The overall aim of **DevOps** is to deliver high performance and quality to
    IT projects. In this chapter, you will learn how DevOps can add value to the quality
    of **IT delivery**. In this chapter, we will learn how to define test strategies,
    proving that quality has been delivered according to the **Definition of Done**
    (**DOD**). But what happens if something breaks? The golden rule in DevOps is
    you build it, run it, break it, and then you fix it. But then, we must detect
    what the issue is by executing a **root cause analysis** (**RCA**). In the final
    section, we will discuss **remediation** and, with that, **continuous improvement**.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**DevOps**的总体目标是为IT项目提供高性能和高质量。在本章中，你将了解DevOps如何为**IT交付**的质量增加价值。在本章中，我们将学习如何定义测试策略，证明质量已经按照**完成定义**（**DOD**）交付。但如果出现故障怎么办？DevOps中的黄金法则是你构建它、运行它、弄坏它，然后修复它。但是，我们必须通过执行**根本原因分析**（**RCA**）来检测问题是什么。在最后一节中，我们将讨论**补救措施**，以及由此带来的**持续改进**。'
- en: After completing this chapter, you will be able to identify and implement quality
    measures in DevOps projects. You will have learned what tests can be included,
    how the are organized, and what the value of these tests is, thus continuously
    improving the product or service.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，你将能够在DevOps项目中识别和实施质量措施。你将学会可以包含哪些测试，它们如何组织，以及这些测试的价值是什么，从而持续改进产品或服务。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: Defining test strategies
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义测试策略
- en: Implementing quality measures
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施质量措施
- en: Designing test automation and execution
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计测试自动化和执行
- en: Understanding root cause analysis
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解根本原因分析
- en: Designing for remediation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计补救措施
- en: Defining test strategies
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义测试策略
- en: In the previous chapter, we concluded that testing is a crucial step in the
    CI/CD process to ensure the quality of the build. In this section, we will learn
    how to define test strategies in DevOps.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们得出结论，测试是CI/CD过程中确保构建质量的关键步骤。在本节中，我们将学习如何在DevOps中定义测试策略。
- en: 'First, DevOps requires a different approach to testing: it''s part of the continuous
    deployment and integration of *builds*. The reason we should adopt DevOps is because
    enterprises want to speed up releases so that they can act much quicker to changing
    demands. For testing, this means that there is a shift from testing the end product
    to continuous testing, with a focus on reducing build and test times.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，DevOps需要一种不同的测试方法：它是持续部署和集成*构建*的一部分。我们应当采用DevOps的原因是企业希望加快发布速度，以便能够更快速地响应变化的需求。对于测试来说，这意味着从测试最终产品转变为持续测试，重点是减少构建和测试时间。
- en: In other words, testing is no longer just a matter of detecting the faults in
    the end product; it has become part of the full life cycle of the build, collecting
    feedback during this whole cycle.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，测试不再仅仅是检测最终产品中的缺陷，它已经成为整个构建生命周期的一部分，贯穿于整个周期的反馈收集。
- en: '**Testers** should be members of the DevOps team. Their responsibility is to
    constantly collect feedback, measure the cycle time, and find ways to reduce these
    times. Testers should be invited to monitor code during the whole build process
    so that they can look at errors and bugs as soon as they appear. This will give
    the team opportunities to fix issues before code is released to the next stage.
    The big benefit of this approach is that the end product will already have fewer
    issues and the total cycle time will be decreased during every iteration.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试人员**应该是DevOps团队的成员。他们的职责是不断收集反馈、衡量周期时间，并寻找减少这些时间的方法。测试人员应该被邀请在整个构建过程中监控代码，这样他们就能在错误和缺陷出现时立即发现。这将为团队提供在代码进入下一个阶段之前修复问题的机会。这种方法的主要好处是，最终产品将已经有更少的问题，并且在每次迭代中总周期时间都会减少。'
- en: Overall, we can say that the role of quality assurance is changing in DevOps.
    In traditional IT projects, quality assurance was done as soon as the product
    – for instance, an application – was delivered at the final stage. Testers would
    execute functional testing and involve a group of users to perform **user acceptance
    tests** (**UAT**). This was done for a given period, usually a week or two. Then,
    the results were handed back to the developers that would go over the findings
    and fix the issues. Then, the whole thing was submitted to testers again so that
    they could retest and validate whether all the findings had been addressed. In
    DevOps, we don't work that way anymore. Firstly, this is because it takes too
    much time, and secondly, there's hardly any interaction between the testers and
    the developers.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，我们可以说，质量保障在DevOps中的角色正在发生变化。在传统的IT项目中，质量保障通常是在产品——例如应用程序——交付到最终阶段时进行的。测试人员会执行功能测试，并组织一群用户来进行**用户验收测试**（**UAT**）。这个过程通常持续一到两周。然后，结果会反馈给开发人员，开发人员会查看问题并修复。之后，整个项目会再次交给测试人员，以便他们重新测试并验证所有问题是否已经解决。在DevOps中，我们不再按这种方式工作。首先，因为这种方式花费时间过长，其次，测试人员和开发人员之间几乎没有互动。
- en: 'What are the requirements for a test strategy in DevOps that ensures quality
    through the whole development cycle? They are as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在DevOps中，确保整个开发周期的质量的测试策略需要满足哪些要求？它们如下：
- en: '**Create user story awareness**: First, there needs to be a clear **user story**.
    The user story will drive the test scenarios. This means that the team scopes
    the testing topics. **TMAP**, the most used testing framework, divides the topics
    into two categories: *organizing* and *performing*. Organizing topics cover the
    way tests are planned, prepared, and managed. Performing topics concern the tests
    themselves.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建用户故事意识**：首先，需要有一个明确的**用户故事**。用户故事将驱动测试场景。这意味着团队会明确测试的主题范围。**TMAP**，最常用的测试框架，将这些主题分为两类：*组织*和*执行*。组织类主题涵盖测试的规划、准备和管理方式。执行类主题则涉及具体的测试内容。'
- en: '**Create the strategy**: In DevOps, the **strategy** should be that tests are
    executed throughout the whole build, which means that testers need to run automated
    test scripts on iterations of the build. In other words, code is constantly tested
    to verify it performs well without issues. This requires strong cooperation between
    the developers and the testers: during the build, developers will have to supply
    code to testers, as well as to interim builds, until the code is stable.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**制定策略**：在DevOps中，**策略**应该是测试在整个构建过程中都得以执行，这意味着测试人员需要在构建的各个迭代中运行自动化测试脚本。换句话说，代码会不断进行测试，以验证其是否顺利运行且没有问题。这需要开发人员和测试人员之间的紧密合作：在构建过程中，开发人员需要向测试人员提供代码，以及临时构建，直到代码稳定为止。'
- en: Obviously, there has to be a balance between the number of tests, the testing
    time, and the goals of the tests. Enterprises run tests to avoid risks such as
    materializing and causing damage. One of the first topics that needs to be addressed
    in defining a test strategy is creating a clear view of risks.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 显然，测试的数量、测试时间以及测试目标之间必须保持平衡。企业进行测试是为了避免潜在的风险，如风险变为现实并造成损害。定义测试策略时需要解决的第一个话题之一是清晰地识别风险。
- en: Be aware that this is not just something technical. It also involves soft skills
    in collaboration and communication. Where testers were used to get the whole package
    delivered at the end of the development cycle and then run their tests, they are
    now part of the DevOps team, continuously communicating about timing, the way
    of testing, and what will be tested. This is crucial for the success of DevOps.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要意识到，这不仅仅是技术上的问题。它还涉及到协作和沟通的软技能。过去，测试人员习惯于在开发周期结束时获得整个产品包，然后进行测试，现在他们成为了DevOps团队的一部分，持续沟通关于时间安排、测试方式以及将要测试的内容。这对DevOps的成功至关重要。
- en: '**Define tools and environments**: Honestly, it''s not about the tools – it''s
    about the code and the level of **standardization**. Testers need to make sure
    they capture all the code: we refer to this as code coverage, which should be
    100% or very near that at the least. Test cases must be automated. **Automation**
    requires standardization: code needs to be automatically deployed to standardized
    test environments where the pre-testing, cleanup, and post-testing tasks are automated.
    This will increase efficiency and reliability, preventing human errors in repetitive
    tasks, assuming that a number of tests will be executed more than once.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定义工具和环境**：说实话，这并不是关于工具——而是关于代码和**标准化**的水平。测试人员需要确保捕获到所有代码：我们称之为代码覆盖率，至少应该达到100%或接近这个值。测试用例必须自动化。**自动化**需要标准化：代码需要自动部署到标准化的测试环境中，在该环境中，预测试、清理和后期测试任务都是自动化的。这将提高效率和可靠性，防止在重复任务中出现人为错误，前提是一些测试将会执行多次。'
- en: 'A first test, very early in the development process, includes *static analysis*
    to check whether the code is complete. With static analysis, the code is not executed:
    tools validate that the code is complete and consistent. An example is when testers
    can use tools and scripts to validate that security policies have been applied
    to the code and that the code is compliant with industry standards. Reviewing
    the static analysis process should provide a detailed overview of the quality
    of the code and the surrounding documentation.'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一次测试，在开发过程的初期，包括*静态分析*来检查代码是否完整。在静态分析中，代码不会被执行：工具验证代码是否完整且一致。例如，测试人员可以使用工具和脚本验证安全政策是否已应用于代码，并确保代码符合行业标准。回顾静态分析过程应该提供关于代码及相关文档质量的详细概述。
- en: '**Execute**: Test scenarios must be very well structured. This needs to be
    defined in the test design, which we will discuss in the *Designing test automation
    and execution* section. There, we will look at various executing techniques:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**执行**：测试场景必须结构化得非常清晰。这需要在测试设计中定义，我们将在*设计测试自动化和执行*一节中讨论。在那里，我们将查看各种执行技术：'
- en: '- Process focused'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 以过程为中心'
- en: '- Condition focused'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 以条件为中心'
- en: '- Data focused'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 以数据为中心'
- en: '- Experience focused'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 以体验为中心'
- en: An important goal of DevOps is to speed up delivery by reducing waiting times
    between process steps. This also includes testing. We already noted that testers
    do not have to wait until the code is finally delivered, but that they can run
    automated tests in subsequent iterations of the build cycle. To reduce the test
    time – and with that, the whole build – *parallel execution* of tests is advised.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DevOps的一个重要目标是通过减少过程步骤之间的等待时间来加速交付。这也包括测试。我们已经指出，测试人员不必等到代码最终交付后才开始测试，他们可以在构建周期的后续迭代中运行自动化测试。为了减少测试时间——进而减少整个构建时间——建议进行测试的*并行执行*。
- en: There's more that can be done to improve quality and tests and that's not the
    sole responsibility of quality engineers and testers. DevOps really is a team
    effort, encouraging all members to contribute to various steps and stages. Developers
    are therefore also invited to contribute and add test cases. It's good practice
    to collect cases, scripts, runbooks, reports, and other documentation in a quality
    repository. From this repository, quality engineers and testers can pick up cases
    and further automate these in the development and deployment process.
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还有很多方法可以提升质量和测试，这不仅仅是质量工程师和测试人员的责任。DevOps实际上是一个团队合作的过程，鼓励所有成员参与到各个步骤和阶段中。因此，开发人员也被邀请参与并添加测试用例。一个好的做法是将测试用例、脚本、运行手册、报告以及其他文档集中到质量存储库中。从这个存储库中，质量工程师和测试人员可以挑选用例，并在开发和部署过程中进一步自动化这些用例。
- en: '**Creating and interpreting reports**: Test results must be evaluated. At the
    beginning of this section, we stated that tests are executed to identify, analyze,
    and mitigate risks. Test outcomes must match these risks, meaning that they should
    result in expected outcomes. If the outcomes are completely different, then the
    risks need to be investigated further. Only then will the tests really contribute
    to the quality.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建和解释报告**：必须评估测试结果。在本节开始时，我们提到，测试是为了识别、分析并减少风险。测试结果必须与这些风险相匹配，这意味着它们应该得出预期的结果。如果结果完全不同，那么风险需要进一步调查。只有这样，测试才能真正对质量做出贡献。'
- en: So, testing is much more than just detecting bugs. Tests must be focused on
    the overall desired outcome of the build. Consequently, testers need to report
    on much more than purely the issues. Reporting is now really focusing on improving
    the quality of both the build and the build process. An example is when the test
    results may show where automation can be improved or code can be enhanced. The
    overall goal is to reduce risks.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因此，测试远不止是发现 bug。测试必须专注于构建的整体期望结果。因此，测试人员需要报告的内容远不止是纯粹的问题。报告现在真正专注于改善构建和构建过程的质量。一个例子是，测试结果可能会显示哪里可以改进自动化，或者代码可以优化。总体目标是降低风险。
- en: Blocking issues – issues that inflict a big risk – must be reported instantly
    and looped back to the start of the development chain.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 阻塞问题——那些带来巨大风险的问题——必须立即报告，并反馈到开发链的起始阶段。
- en: '**Setting exit criteria**: Results matter in tests and they lead to decisions
    about if and how to proceed. That''s what **exit criteria** are for. If all the
    necessary tests have been conducted, the results should give you enough information
    to do a *go*/*no go* and push the software to the next stage, typically production.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设定退出标准**：测试中的结果很重要，它们会导致关于是否以及如何继续的决策。这就是**退出标准**的作用。如果所有必要的测试都已执行，结果应该能够提供足够的信息，以做出*通过*/*不通过*的决定，并将软件推向下一个阶段，通常是生产阶段。'
- en: In this section, you learned how to compose a quality and test strategy. Before
    we learn how to implement quality measures, we will briefly look at different
    types of tests.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你学会了如何制定质量和测试策略。在我们学习如何实施质量措施之前，我们将简要了解不同的测试类型。
- en: Understanding types of tests
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解测试类型
- en: 'In this section, we will introduce the different, most commonly known types
    of tests. There are three tiers of testing:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍不同的、最常见的测试类型。测试分为三个层级：
- en: '**Level 1**: **Small tests** that focus on separate components. Unit tests
    are an example where small pieces of the code are tested.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第 1 层**：**小规模测试**，专注于单个组件。单元测试就是一个例子，测试代码的各个小块。'
- en: '**Level 2**: **Integration tests** that involve more than one component. Integration
    itself is tested, but also how components interact and if the integrated packages
    perform well. Integration and performance tests are executed at this level.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第 2 层**：**集成测试**，涉及多个组件。测试集成本身，但也测试组件之间的交互，以及集成包是否能良好运行。在这一层级执行集成和性能测试。'
- en: '**Level 3**: **Usability tests** that focus on how easy the end product can
    be used – for example, using the graphical interface – and if it''s easy to manage.
    The **User Acceptance Test** (**UAT**) is typically the final test at this level.
    To be clear, the UAT also involves performance testing from the end user''s perspective.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第 3 层**：**可用性测试**，专注于最终产品的易用性——例如，使用图形界面——以及是否易于管理。**用户验收测试**（**UAT**）通常是这一层级的最终测试。明确来说，UAT
    还包括从最终用户的角度进行的性能测试。'
- en: 'These three levels are shown in the following diagram:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这三种层级展示在下图中：
- en: '![Figure 3.1 – Levels of testing'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.1 – 测试的层级'
- en: '](img/B17492_03_001.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_03_001.jpg)'
- en: Figure 3.1 – Levels of testing
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – 测试的层级
- en: The complexity increases as testing moves from single components to a usability
    test, which involves the full stack of the solution.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 随着测试从单一组件扩展到涉及整个解决方案栈的可用性测试，复杂性增加。
- en: In the test strategy, the teams will define, based on the business requirements,
    what tests must be conducted and what the expected outcome must be to deploy a
    build successfully.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试策略中，团队将根据业务需求定义必须执行哪些测试，以及成功部署构建所需的预期结果。
- en: 'A couple of specific tests have not been mentioned yet:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些特定的测试尚未提及：
- en: '**Regression test**: These tests were very common in the traditional approach
    of software development. Functional and technical tests were re-executed to make
    sure that software – code – that was changed during the development cycle still
    performed without issues after the change. As we have seen, DevOps has changed
    the way we approach testing. It''s not a one-time exercise anymore, where we run
    a regression test, find bugs, fix these, and rerun the tests. In DevOps, code
    is continuously tested and improved throughout the build. Regression tests have
    become *less important*. In some cases, it still might be valuable to execute
    regression tests.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回归测试**：在传统的软件开发方法中，这些测试非常常见。功能性和技术性的测试会被重新执行，以确保在开发周期中变更的代码在更改后依然能够正常工作。正如我们所看到的，DevOps已经改变了我们对待测试的方式。这不再是一次性的操作，我们运行回归测试，发现问题，修复后再运行测试。在DevOps中，代码在整个构建过程中都会持续进行测试和改进。回归测试变得*不那么重要*。在某些情况下，执行回归测试仍然可能具有价值。'
- en: '**Security test**: The same applies to security tests that were often executed
    once the build was delivered. In DevOps, we check for vulnerabilities and compliancy
    issues during the first static analysis stage. In [*Chapter 14*](B17492_14_ePub_RK.xhtml#_idTextAnchor168),
    *Integrating DevSecOps with DevOps*, we will go into this in more detail.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全测试**：同样适用于安全测试，传统上这些测试通常是在构建交付后执行。在DevOps中，我们在第一次静态分析阶段就检查漏洞和合规性问题。在[*第14章*](B17492_14_ePub_RK.xhtml#_idTextAnchor168)，*将DevSecOps与DevOps整合*中，我们将更详细地讨论这一点。'
- en: Testing is about validating quality. In the next section, we will learn about
    quality measures and how to implement them in our DevOps projects.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是为了验证质量。在接下来的章节中，我们将学习质量措施以及如何在我们的DevOps项目中实施这些措施。
- en: Implementing quality measures
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施质量措施
- en: By now, it should be clear that everything in DevOps is about being **continuous**,
    which, in other words, means **continuous deployment**, **continuous integration**,
    **continuous testing**, and **continuous quality** engineering. DevOps projects
    constantly focus on **quality** at every stage of development and operations.
    It's different from traditional approaches where teams have a separate phase to
    fix issues. In DevOps, teams constantly measure the products and fix issues as
    soon as they occur. One of the six DevOps principles is **continuous improvement**,
    which refers to the feedback loop wherein products are improved in every iteration,
    but also to the DevOps process itself.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，应该很清楚DevOps中的一切都是关于**持续性**，换句话说，这意味着**持续部署**、**持续集成**、**持续测试**和**持续质量**工程。DevOps项目始终关注每个开发和运维阶段的**质量**。这与传统的方法不同，在传统方法中，团队会有一个单独的阶段来修复问题。而在DevOps中，团队会不断地衡量产品，并在问题发生时立即进行修复。DevOps的六大原则之一是**持续改进**，这不仅指的是在每个迭代中改进产品的反馈循环，也指的是DevOps流程本身。
- en: 'A common practice in IT projects was to have a fixing phase, something that
    Gerald Weinberg describes in his book *Perfect Software and other illusions about
    testing*. The fixing phase was put at the end of the development phase before
    software was handed over to operations. In DevOps, we don''t have a fixing phase
    because quality is measured and tested as teams go along, during the whole development
    and operations cycle. This can be seen in the following diagram:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在IT项目中，一个常见的做法是设置修复阶段，Gerald Weinberg在他的书籍*《完美软件与关于测试的其他幻想》*中描述了这一过程。修复阶段通常安排在开发阶段结束后，软件交付给运维部门之前。在DevOps中，我们没有修复阶段，因为质量在整个开发和运维周期中都在不断衡量和测试。可以通过下图看到这一点：
- en: '![Figure 3.2 – Continuous testing (based on TMAP)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.2 – 持续测试（基于TMAP）'
- en: '](img/B17492_03_002.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_03_002.jpg)'
- en: Figure 3.2 – Continuous testing (based on TMAP)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2 – 持续测试（基于TMAP）
- en: How do you measure quality? First, what is quality? We started this book by
    saying that it all starts with the business. That's why **enterprise architects**
    have such an important role to play in DevOps. Enterprise architects have a major
    task in translating business needs into solutions. From business demand, the product
    portfolio should be clear about what standards these products should be delivered
    to. That's quality. It's a product or service that meets the needs and expectations
    of the user. Quality is a product or service that satisfies the users. Hence,
    testing is about validating if the user can be satisfied with the delivered product
    or service.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如何衡量质量？首先，什么是质量？我们在本书的开头提到，一切都始于业务。这就是为什么**企业架构师**在 DevOps 中扮演如此重要的角色。企业架构师的主要任务是将业务需求转化为解决方案。从业务需求出发，产品组合应清晰地列出这些产品应达到的交付标准。这就是质量。质量是指能够满足用户需求和期望的产品或服务。质量是一个满足用户的产品或服务。因此，测试就是验证用户是否能对交付的产品或服务感到满意。
- en: 'What do enterprises measure in terms of DevOps quality? Two main things: the
    build itself and its *functional validation*. For the build itself, topics such
    as the number of successful builds, the total number of defects, and code coverage
    are important. For functional validation, the main topics are whether all the
    requirements have been tested and if all the identified risks have been covered.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 企业在衡量 DevOps 质量时关注哪些内容？主要有两件事：构建本身和其*功能验证*。对于构建本身，成功构建的数量、缺陷总数和代码覆盖率等是重要的指标。对于功能验证，主要关注是否所有的需求都已被测试，是否所有识别的风险都已被覆盖。
- en: In the next few sections, we will learn what instruments we can use to define
    quality and how to measure it, starting with acceptance criteria.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我们将学习如何定义质量以及如何衡量质量，从验收标准开始。
- en: Defining acceptance criteria
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义验收标准
- en: 'Before we can start testing, we need to know what we will be testing. That''s
    why we need to define **acceptance criteria**. To put it very simply: when is
    good, *good enough?* Again, it starts with the user story, which defines what
    a product or service should include. The user story sets the scope and the specific
    functionality a product or service must have.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始测试之前，我们需要知道我们将测试什么。这就是为什么我们需要定义**验收标准**。简单来说：什么时候算“好”，*足够好*？同样，这从用户故事开始，用户故事定义了产品或服务应该包含什么内容。用户故事确定了范围和产品或服务必须具备的具体功能。
- en: 'How do you set acceptance criteria? The question is, *what is it that we''re
    building?* "It" must be specified and with that, "it" must become tangible. The
    DevOps team looks at specifications from four angles:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如何设定验收标准？问题是，*我们正在构建什么？* "它"必须明确，并且必须使“它”变得具体可触。DevOps 团队从四个角度来看待规格：
- en: '**Business**: What does the business require?'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**业务**：业务要求是什么？'
- en: '**Development**: How can we build a solution that meets the business requirements?'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发**：我们如何构建一个满足业务需求的解决方案？'
- en: '**Quality**: How can we test the solution and validate that it meets the requirements?'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**质量**：我们如何测试解决方案并验证它是否满足需求？'
- en: '**Operations**: How can we manage the solution so that it keeps meeting these
    requirements?'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运营**：我们如何管理解决方案，以便它持续满足这些要求？'
- en: 'In DevOps, we''re not building the whole package at once, as in a waterfall
    type of project. The team starts with a minimal viable product and then iterates
    the product, continuously improving it. Acceptance criteria are set per requirement
    and thus, following the logic of DevOps and quality measures, each requirement
    is tested. This is what **test-driven development** (**TTD**) does. In TDD, the
    team writes the test case first and then the code. The code is written to the
    specifications of the test case, proving that the requirements have been met.
    The TDD flow is shown in the following diagram:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DevOps 中，我们并不是一次性构建整个包，如同瀑布式项目那样。团队从一个最小可行产品开始，然后迭代产品，持续改进。验收标准是针对每个需求设定的，因此，遵循
    DevOps 和质量措施的逻辑，每个需求都会经过测试。这就是**测试驱动开发**（**TDD**）的做法。在 TDD 中，团队首先编写测试用例，然后编写代码。代码是根据测试用例的规范编写的，证明需求已经得到满足。TDD
    流程如图所示：
- en: '![Figure 3.3 – Test-driven development'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.3 – 测试驱动开发'
- en: '](img/B17492_03_003.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_03_003.jpg)'
- en: Figure 3.3 – Test-driven development
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – 测试驱动开发
- en: TDD is nothing new and has existed since the mid-fifties, but the most commonly
    used version is described by Kent Beck (refer to the *Further reading* section).
    The team picks a requirement, writes the test case, develops the code, and runs
    the test. When the tests are successful, the code is refactored or rewritten,
    meaning that the code is cleaned and remediated to the standards the architect
    has set for the code. After this step, the code is tested once more with the test
    case. This cycle is repeated for every requirement.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: TDD并不是什么新鲜事物，它自五十年代中期就已存在，但最常用的版本由Kent Beck描述（请参见*进一步阅读*部分）。团队挑选一个需求，编写测试用例，开发代码，并运行测试。当测试成功时，代码将进行重构或重写，也就是对代码进行清理和修复，以达到架构师对代码设定的标准。完成此步骤后，代码将使用测试用例再次进行测试。这个循环将为每个需求重复进行。
- en: The next steps are assessing the Definition of Ready and agreeing on the Definition
    of Done. We will study them in the next section.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是评估“准备好定义”（Definition of Ready）并达成“完成定义”（Definition of Done）。我们将在下一节中详细讨论它们。
- en: Defining the Definition of Ready and Definition of Done
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义“准备好定义”和“完成定义”
- en: In the previous section, we learned how to set acceptance criteria and how TDD
    can help in making sure that we meet a specific requirement. However, a product
    or service likely has many requirements before it can really be launched into
    production.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们学习了如何设置接受标准，以及TDD如何帮助确保我们满足特定要求。然而，一个产品或服务在真正进入生产之前，可能有许多要求。
- en: In DevOps, we use two important processes to validate if a fully developed product
    or service is ready for production. These processes are the **Definition of Ready**
    (**DoR**) and the **Definition of Done** (**DoD**).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在DevOps中，我们使用两个重要的过程来验证一个完全开发的产品或服务是否准备好进入生产。这两个过程是**准备好定义**（**DoR**）和**完成定义**（**DoD**）。
- en: 'To avoid mistakes, bear in mind that the acceptance criteria are not the same
    in both DoR and DoD:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免错误，请记住，“接受标准”在DoR和DoD中并不相同：
- en: '**Definition of Ready**: To understand DoR, it''s important to know how *Agile
    Scrum* works. DevOps teams typically work in sprints, a short period of time in
    which a piece of the product is developed. The work that needs to be done is defined
    in **product backlog items** (**PBIs**). The whole product or service is defined
    in a user story and then broken down into PBIs – tasks that a team can work on
    during a specific sprint and that can be completed during that sprint.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**准备好定义**（DoR）：要理解DoR，重要的是要知道*敏捷Scrum*是如何工作的。DevOps团队通常在短周期内进行工作，这一周期称为迭代（sprint），在此期间开发产品的一个部分。需要完成的工作定义为**产品待办事项**（**PBIs**）。整个产品或服务通过用户故事来定义，然后拆解成PBIs——即团队可以在特定迭代中工作并能够在该迭代中完成的任务。'
- en: Agile Scrum actually doesn't mention DoR. Yet, it has become a common practice
    to have a set of agreements to define when PBIs are ready to be picked up by the
    team. The problem with user stories is that, in some cases, they don't contain
    enough concrete information to start the build. The DoR contains entry criteria
    so that the team knows what to build. The process of defining the DoR is referred
    to as refinement.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Agile Scrum实际上并没有提到DoR。然而，已成为一种常见做法，制定一套协议来定义何时PBIs准备好由团队接手。用户故事的问题在于，在某些情况下，它们没有足够具体的信息来开始构建。DoR包含了入场标准，让团队知道要构建什么。定义DoR的过程称为细化。
- en: '**Definition of Done**: In contrast to DoR, the DoD is part of Agile Scrum
    and describes exactly what a **Product Backlog Items** (**PBI)** looks like when
    it''s finished. So, the DoD is a very strong instrument for validating the quality
    of the builds. Developers commit to the DoD. They commit to the fact that they
    must be absolutely clear about what they need to build. In IT projects, the DoD
    must contain the following topics as a minimum:'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完成定义**（DoD）：与DoR不同，DoD是Agile Scrum的一部分，准确描述了一个**产品待办事项**（**PBI**）完成时的状态。因此，DoD是验证构建质量的一个非常强大的工具。开发人员承诺遵守DoD。他们承诺必须清楚了解需要构建的内容。在IT项目中，DoD至少应包含以下主题：'
- en: '- All the code has been written.'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 所有代码已编写完成。'
- en: '- All the code has been reviewed and validated.'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 所有代码已被审核并验证。'
- en: '- The relevant documentation has been written and made available.'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 相关文档已经编写并可供使用。'
- en: '- All the tests have been executed and signed off.'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 所有测试已执行并签字确认。'
- en: '- All functionality has been proven to be delivered.'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 所有功能已证明已交付。'
- en: 'Where the DoR takes care of the entry criteria, the DoD contains the exit criteria
    – the statement of completion. All team members must agree upon the DoD: the business,
    developers, testers, and operations. Don''t forget the last group, where operations
    need to sign off the DoD and run the software. For them, it''s crucial to validate
    that the code and relevant documentation are completed. Furthermore, in true DevOps,
    we will not have separate developers, testers, or members doing operations. Instead,
    we will have members with skills in development or testing.'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在DoR负责入场标准时，DoD包含出场标准——完成声明。所有团队成员必须就DoD达成一致：业务方、开发人员、测试人员和运维人员。不要忘记最后一组，运维人员需要签署DoD并运行软件。对他们来说，验证代码和相关文档是否完成至关重要。此外，在真正的DevOps中，我们不会有单独的开发人员、测试人员或运维人员。相反，我们将有具备开发或测试技能的成员。
- en: So far, we have discussed the test strategy, the quality measures, and the acceptance
    criteria. In the next section, we will learn how to design test automation and
    execution.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了测试策略、质量措施和验收标准。在接下来的部分，我们将学习如何设计测试自动化和执行。
- en: Designing test automation and execution
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计测试自动化和执行
- en: In this section, we will learn how to design and implement tests. We will study
    the most common different test varieties and learn where we can use them. When
    we start discussing testing in IT, we need to discuss and agree upon a test management
    approach. In this book, we will use TMAP, introduced by ICT service provider Sogeti
    in 1995 and widely accepted as the standard in software testing.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何设计和实施测试。我们将研究最常见的各种测试类型，并了解在何种情况下使用它们。当我们开始讨论IT中的测试时，我们需要讨论并达成一致的测试管理方法。在本书中，我们将使用TMAP，这一方法由ICT服务提供商Sogeti于1995年提出，并广泛被接受为软件测试的标准。
- en: 'The traditional phases of TMAP are as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: TMAP的传统阶段如下：
- en: Planning
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计划
- en: Preparation
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备
- en: Specification
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规范
- en: Execution
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行
- en: Evaluation
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估
- en: In DevOps, this is not a one-off exercise; we will be working with continuous
    testing. One major difference with the traditional way of working is that there's
    no separate test unit with a manager and testers. These professionals are now
    part of the DevOps team and they do their work alongside the developers. Next,
    in DevOps, we are working according to the *everything as code* principle, thus
    allowing teams to automate as much as possible.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在DevOps中，这不是一次性的工作；我们将进行持续测试。与传统工作方式的一个主要区别是，不再有单独的测试单元和经理与测试人员。这些专业人员现在是DevOps团队的一部分，他们与开发人员一起工作。接下来，在DevOps中，我们按照*一切皆代码*的原则进行工作，从而使团队能够尽可能地自动化。
- en: 'Before we learn more about continuous testing, we need to understand the various
    types of testing. The most important ones are as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入了解持续测试之前，我们需要了解各种测试类型。最重要的类型如下：
- en: '**Process focused**: The test focuses on the paths and flows in software. In
    TMAP, this is called **path coverage**. The test covers the path that a transaction
    follows to reach a certain end stage. This can become very complicated when lots
    of paths need to be followed. In that case, the test covers all possible paths
    and various decision points.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过程聚焦**：测试关注软件中的路径和流程。在TMAP中，这被称为**路径覆盖**。测试覆盖了事务到达某一终点阶段时所遵循的路径。当需要跟随大量路径时，这可能变得非常复杂。在这种情况下，测试会覆盖所有可能的路径和各种决策点。'
- en: '**Condition focused**: A condition can be a decision point. The test covers
    the decision points and the conditions that it points to be either *true* or *false*.
    The question is how that will influence the outcome of the test. Be aware that
    this is a very simple explanation. In theory, software will have many decision
    points with specific conditions, thus influencing the outcome of the test. In
    a **Condition Decision Coverage** (**CDC**) test, all decision points and decision
    outcomes will be tested against the condition *true* or *false*.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**条件聚焦**：条件可以是决策点。测试覆盖了决策点及其指向的条件，判断该条件是*真*还是*假*。问题在于这将如何影响测试的结果。需要注意的是，这是一个非常简单的解释。从理论上讲，软件将有许多决策点和特定条件，从而影响测试结果。在**条件决策覆盖**（**CDC**）测试中，所有决策点和决策结果将根据条件*真*或*假*进行测试。'
- en: '**Data focused**: This test uses data input to verify the test results. This
    type of test is commonly done through **boundary value analysis** (**BVA**). In
    the test, we enter the minimum and the maximum values, known as the *boundaries*.
    These can be numeric, but also *statements*. If we then, as a test case, enter
    a value that''s outside these boundaries, the result should be "invalid." Any
    input within the range that is specified should lead to the result "valid."'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据驱动**：此测试通过数据输入来验证测试结果。这类测试通常通过**边界值分析**（**BVA**）进行。在测试中，我们输入最小值和最大值，即所谓的*边界*。这些值可以是数字，也可以是*语句*。如果我们作为测试用例输入一个超出这些边界的值，那么结果应为“无效”。任何在指定范围内的输入应导致“有效”的结果。'
- en: '**Experience focused**: These are more often referred to as **user experience**
    (**UX**) tests. All of the previous tests are binary. The software follows the
    expected paths, the conditions of the decision points lead to expected results,
    and the entered data gives the expected results. Experience is something completely
    different since it''s very subjective by nature. Yet, testers would like to know
    how the software "feels." Is it responsive enough, does it perform well, and is
    it easy to use? The basic question is: *is there a way to test experience in an
    objective manner?* There are some methodologies that aim for this, with one of
    them being the "experience honeycomb," which was developed in 2004 by Peter Morville.
    This can be seen in the following diagram:'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**以体验为中心**：这些测试通常被称为**用户体验**（**UX**）测试。所有前面的测试都是二元的。软件按照预期的路径执行，决策点的条件导致预期的结果，输入的数据产生预期的结果。体验则完全不同，因为它天生非常主观。然而，测试人员还是想知道软件“感觉如何”。它反应够快吗？性能如何？是否易于使用？基本问题是：*有没有办法以客观的方式测试体验？*
    有一些方法论致力于此，其中之一是“经验蜂巢模型”，该模型由 Peter Morville 于 2004 年开发。以下是该模型的示意图：'
- en: '![Figure 3.4 – The experience honeycomb'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.4 – 经验蜂巢模型'
- en: '](img/B17492_03_004.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_03_004.jpg)'
- en: Figure 3.4 – The experience honeycomb
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4 – 经验蜂巢模型
- en: Still, experience remains a bit intangible. It's very useful for finding out
    whether software is meeting the user's expectations, but to find faults and issues
    in the software, testers will need to perform more exact tests. Note that experience-oriented
    tests are very hard to automate.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，经验仍然显得有些难以捉摸。它对于了解软件是否符合用户期望非常有用，但要发现软件中的缺陷和问题，测试人员需要进行更精确的测试。需要注意的是，面向经验的测试非常难以自动化。
- en: Again, testing in DevOps is not a one-off. In the next section, we will discuss
    continuous testing.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，DevOps 中的测试并不是一次性的。在接下来的部分，我们将讨论持续测试。
- en: Understanding the principles of continuous testing
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解持续测试的原则
- en: 'In [*Chapter 2*](B17492_02_ePub_RK.xhtml#_idTextAnchor027), *Managing DevOps
    from Architecture*, we learned about the CI/CD pipeline. We saw that testing was
    an integrated part of the pipeline. This assumes that all software is developed
    using CI/CD, which, in enterprises, is often not the case. There will still be,
    as an example, legacy systems that are not integrated in CI/CD. The same applies
    to **Software as a Service** (**SaaS**) applications: these are purchased as a
    service, and for that reason, not "developed" within the enterprise. However,
    they need to be tested.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第 2 章*](B17492_02_ePub_RK.xhtml#_idTextAnchor027)《从架构管理 DevOps》中，我们了解了 CI/CD
    流水线。我们看到测试是流水线的一个集成部分。这假设所有软件都是通过 CI/CD 开发的，但在企业中，这通常并非如此。例如，仍然会有遗留系统未集成到 CI/CD
    中。同样，**软件即服务**（**SaaS**）应用程序也适用：这些是作为服务购买的，因此不会在企业内“开发”。然而，它们仍然需要进行测试。
- en: 'The first step in continuous testing is automating the **test cases**. This
    is easier said than done, but it''s feasible if tests have been set up from known
    patterns – for instance, simulating how a user would use the application. If we
    have an application that processes purchases, we could think of three use patterns:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 持续测试的第一步是自动化**测试用例**。这说起来容易做起来难，但如果测试是从已知模式设置的——例如模拟用户如何使用应用程序，那么这是可行的。如果我们有一个处理购买的应用程序，我们可以考虑三种使用模式：
- en: Place an order
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下订单
- en: Cancel an order
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取消订单
- en: Check the order's status
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查订单状态
- en: Steps can be automated and with that, we can create a test case that can be
    executed.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤可以自动化，通过这一点，我们可以创建一个可以执行的测试用例。
- en: Once we have the test cases and the code that needs to be tested, we need an
    environment where we can execute the tests. This can also be automated. By using
    the public cloud, it's easy to create a (temporary) test environment on demand
    and decommission it automatically when the tests have run. It could even be part
    of the full test scenario, where you can spin up an environment in Azure, AWS,
    or any other cloud, deploy the code (or rather, a copy of the source code), run
    the tests, and decommission the environment after completion. This does require
    automated infrastructure to set up and **Infrastructure as Code** (**IaC**) to
    be implemented, something that we will discuss later in this section.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了测试用例和需要测试的代码，就需要一个环境来执行测试。这也可以自动化。通过使用公共云，轻松地按需创建一个（临时）测试环境，并在测试完成后自动停用它。它甚至可以是完整测试场景的一部分，你可以在Azure、AWS或其他任何云平台上创建环境，部署代码（或者更准确地说，部署源代码的副本），运行测试，然后在完成后停用该环境。这确实需要自动化基础设施的设置和**基础设施即代码**（**IaC**）的实施，稍后我们将讨论这一部分内容。
- en: 'In summary, continuous testing requires the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，持续测试需要以下几个方面：
- en: '*Integrated quality engineering and testing*: Testing is an integrated part
    of the DevOps team – meaning that every member of the team is involved in testing.
    However, in large enterprises running multiple DevOps projects, it is recommended
    to have a quality team that helps implement quality measures and tests the strategies
    in these projects.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*集成质量工程与测试*：测试是DevOps团队的一个集成部分——意味着团队中的每个成员都参与到测试中。然而，在运行多个DevOps项目的大型企业中，建议有一个质量团队，帮助实施质量措施并测试这些项目中的策略。'
- en: '*Automated test cases*: It''s recommended to start small. Pick one test case
    and automate that. Set the baseline for this test case: what data is absolutely
    required to run a successful test? What metrics will be used and for how long
    will a test need to run? Don''t make tests too big; use small test sets and run
    them for a short period of time. Evaluate and, if needed, adjust the test sets
    and their duration.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*自动化测试用例*：建议从小规模开始。选择一个测试用例并自动化它。为这个测试用例设定基准：成功执行测试所需的绝对数据是什么？将使用哪些指标，测试需要运行多久？不要让测试过于复杂；使用小规模的测试集并进行短时间运行。评估并在需要时调整测试集和测试时间。'
- en: '*Test tools*: These tools need to integrate with the CI/CD pipelines. This
    book is not about test tooling, but some popular tools are **Selenium** and **Micro
    Focus Unified Functional Testing** (**UFT**). How do you pick the right tools?
    That really depends on your approach. Some enterprises prefer a single stack solution,
    meaning that one tool covers the whole testing strategy. Others have a toolset,
    using separate tools for test modeling and test execution. Again, integration
    with the CI/CD pipeline is crucial.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*测试工具*：这些工具需要与CI/CD流水线集成。本书并不专注于测试工具，但一些流行的工具包括**Selenium**和**Micro Focus统一功能测试**（**UFT**）。如何选择合适的工具？这实际上取决于你的方法。有些企业偏好单一堆栈解决方案，意味着一个工具涵盖整个测试策略。其他企业则有一套工具，分别用于测试建模和测试执行。同样，与CI/CD流水线的集成至关重要。'
- en: '*Automated test environments*: Automate how the test data is provisioned, how
    the test case is executed, and how the test environments are provisioned using
    cloud services. Automating environments requires that we define everything as
    code:'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*自动化测试环境*：自动化测试数据的提供方式、测试用例的执行方式以及如何通过云服务自动化测试环境的配置。自动化环境要求我们将一切定义为代码：'
- en: 'a) **Infrastructure as Code** (**IaC**): Virtual machines, network components,
    containers, firewalls – everything is defined as code. In Azure, we use **Azure
    Resource Manager** (**ARM**) templates, and in AWS, the preferred way of working
    is to use **CloudFormation**.'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) **基础设施即代码**（**IaC**）：虚拟机、网络组件、容器、防火墙——一切都定义为代码。在Azure中，我们使用**Azure资源管理器**（**ARM**）模板，而在AWS中，首选的方法是使用**CloudFormation**。
- en: 'b) **Configuration as Code** (**CaC**): As soon as infrastructure components
    are deployed, they need to be configured so that they match the standards and
    policies of the enterprise. Think of DNS settings, certificates, and security
    policies such as hardening and patching. Once the configuration has been applied,
    we reach the **Desired State Configuration** (**DSC**).'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) **配置即代码**（**CaC**）：一旦基础设施组件被部署，就需要对它们进行配置，以确保它们符合企业的标准和政策。比如DNS设置、证书以及安全策略（如强化和打补丁）。一旦配置完成，我们就达到了**期望状态配置**（**DSC**）。
- en: Important Note
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: DSC is a term that is typically associated with Microsoft Azure. In this book,
    we will use DSC as a generic term to explain that the cloud infrastructure needs
    to meet specific requirements, as defined by the architecture, in order to be
    compliant.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DSC是一个通常与Microsoft Azure相关的术语。在本书中，我们将使用DSC作为一个通用术语，解释云基础设施需要满足架构定义的特定要求，以确保合规性。
- en: 'c) **Pipeline as Code** (**PaC**): Every step in the CI/CD process is defined
    in code, from pulling the source code to its actual deployment, including the
    test procedures.'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) **管道即代码**（**PaC**）：CI/CD过程中每一步都通过代码来定义，从拉取源代码到实际部署，包括测试流程。
- en: 'd) **Test as Code** (**TaC**): Test as code refers to the test automation process
    itself, from collecting, assessing, and deploying test data to actually executing
    (running) the various tests and collecting the results. We can also validate the
    results automatically using *artificial intelligence* and *machine learning*.'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) **代码即测试**（**TaC**）：代码即测试指的是测试自动化过程本身，从收集、评估和部署测试数据，到实际执行（运行）各种测试并收集结果。我们还可以使用*人工智能*和*机器学习*自动验证结果。
- en: 'In this section, we learned all about testing as a methodology to validate
    quality in DevOps projects. We saw that automation can bring a lot of value to
    our testing strategy. One important remark must be made as a conclusion: *it''s
    not about automation itself*. The goal should be to optimize the builds and improve
    their quality. It''s the quality value that matters, not the test itself. Tests
    will help teams improve the quality of their work by identifying risks and helping
    them understand how to mitigate issues. That''s what we will talk about in the
    next section. We''ve found a problem – *now what?*'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们了解了测试作为一种方法论，在DevOps项目中验证质量的作用。我们看到自动化可以为我们的测试策略带来很大的价值。需要做出一个重要的结论：*问题不在于自动化本身*。目标应该是优化构建并提高其质量。重要的是质量的价值，而不是测试本身。测试将帮助团队通过识别风险并帮助他们了解如何缓解问题，来提升工作质量。这就是我们将在下一部分讨论的内容。我们已经发现了一个问题——*接下来怎么办？*
- en: Understanding root cause analysis
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解根本原因分析
- en: In the previous sections, we discussed quality measures and testing to validate
    these criteria in a highly structured and automated way. Still, things can go
    wrong. The golden rule in DevOps is *you build it, you run it*, often followed
    by the statement *you break it, you fix it*. Or even it could be *you destroy
    it, you rebuild it better*. If something breaks, the team will need to find out
    what exactly happened. In this section, we will talk about **root cause analysis**
    (**RCA**) as one of the most important instruments for finding the cause of a
    problem.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分，我们讨论了质量措施和测试，如何以高度结构化和自动化的方式验证这些标准。尽管如此，问题仍然可能发生。DevOps的黄金法则是*你构建它，你运行它*，通常后面跟着一句话*你破坏它，你修复它*。甚至可以是*你摧毁它，你重新构建它*。如果发生故障，团队需要找出到底发生了什么。在这一部分，我们将讨论**根本原因分析**（**RCA**），这是寻找问题根本原因的最重要工具之一。
- en: 'RCA is the methodology for finding the exact cause of an issue. With that,
    RCA provides insights on how the team can improve products or services. These
    can be quick fixes or long-term enhancements. RCA is more than just a way to find
    problems; it''s the start of improvement. Important questions that need to be
    addressed in RCA are as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: RCA（根本原因分析）是一种寻找问题确切原因的方法。通过RCA，团队可以获得如何改进产品或服务的洞见。这些改进可能是快速修复或长期优化。RCA不仅仅是寻找问题的方式；它是改进的起点。在RCA中需要解决的重要问题如下：
- en: What is the problem?
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个问题是什么？
- en: Where was it found?
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现问题的地方是哪里？
- en: Why did the problem occur?
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么会出现这个问题？
- en: What caused the problem?
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是什么导致了这个问题？
- en: What improvements can we make to avoid the problem in the future?
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以做出哪些改进，以避免将来出现这个问题？
- en: There are several ways to conduct an RCA. Popular methods are the *5 whys* and
    the *fishbone* diagram (also known as the *Ishikawa* diagram). The 5 whys method
    is an easy way to literally drill down to the root cause of a problem, simply
    by asking "why" five times. It's a bit like a little child that constantly repeats
    the same question up until the point where it's satisfied with the answer.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方法可以进行RCA。常用的方法包括*5个为什么*和*鱼骨图*（也称为*石川图*）。5个为什么是一种通过简单地连续问五次“为什么”来逐步挖掘问题根本原因的简单方法。这有点像小孩不停地重复同一个问题，直到他们对答案感到满意为止。
- en: 'The fishbone, invented by Professor Ishikawa, is more suitable for drilling
    down to more complex issues. Again, it starts with the problem and then the team
    identifies what could contribute to that problem: infrastructure, code, programmers,
    and so on. These are the "fish bones." Each of the bones is then analyzed. The
    basic diagram for this is as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 鱼骨图由石川教授发明，更适合深入分析复杂问题。它从问题开始，然后团队确定可能导致该问题的因素：基础设施、代码、程序员等。这些就是“鱼骨”。然后分析每一根骨头。其基本图示如下：
- en: '![Figure 3.5 – Fishbone diagram'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.5 – 鱼骨图'
- en: '](img/B17492_03_005.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_03_005.jpg)'
- en: Figure 3.5 – Fishbone diagram
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5 – 鱼骨图
- en: 'Regardless of the methodology, the basic steps for RCA are always the same,
    as shown in the following diagram:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 无论采用哪种方法论，根本原因分析的基本步骤始终相同，如下图所示：
- en: '![Figure 3.6 – Steps of RCA'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.6 – 根本原因分析的步骤'
- en: '](img/B17492_03_006.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_03_006.jpg)'
- en: Figure 3.6 – Steps of RCA
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6 – 根本原因分析的步骤
- en: 'The RCA starts by gathering data to find out what exactly happened. The next
    step is the problem statement: when did it happen, where, and what is the impact
    of the problem? The last question in particular – *what is the impact?* – is important.
    It drives prioritization in the project and the business case. If the impact is
    low but the mitigation solution will require a huge investment in time and thus
    costs, the team might decide to give it a low priority and put it on the backlog
    of the project. If the problem has a high impact, it might become an impediment.
    It needs to be solved before the team picks up any new tasks. It''s one of the
    main principles in *Site Reliability Engineer*, which we will discuss in detail
    in [*Chapter 5*](B17492_05_ePub_RK.xhtml#_idTextAnchor066), *Architecting Next-Level
    DevOps with SRE*.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 根本原因分析从收集数据开始，以找出究竟发生了什么。下一步是问题陈述：它是什么时候发生的？在哪里发生？这个问题的影响是什么？尤其是最后一个问题——*影响是什么？*——很重要。它驱动了项目和商业案例的优先级。如果影响较小，但缓解解决方案将需要大量时间投资，因此会产生高成本，团队可能会决定给予它低优先级，并将其放在项目的待办事项列表中。如果问题影响较大，它可能会成为障碍。需要在团队开始处理任何新任务之前解决它。这是
    *网站可靠性工程师* 的主要原则之一，我们将在 [*第 5 章*](B17492_05_ePub_RK.xhtml#_idTextAnchor066) 中详细讨论，*通过
    SRE 架构下一代 DevOps*。
- en: After analyzing the cause and the impact, the team can work on solutions to
    mitigate the problem. The last step is the final report. It's a common practice
    to test the solution first and validate if the solution is really solving the
    problem. RCA is a quality measure and quality measures need to be tested, as we
    learned in the previous sections.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析了原因和影响后，团队可以着手解决方案，以减轻问题。最后一步是最终报告。通常的做法是先测试解决方案，并验证该方案是否真的解决了问题。根本原因分析是一个质量度量，而质量度量需要进行测试，正如我们在前面章节中学到的那样。
- en: With that, we have discussed testing and how to handle RCA to improve the product
    by finding solutions for problems. But as with everything in DevOps, we are aiming
    for continuous improvement. That also includes roadmaps for improving the building
    blocks themselves, known as the infrastructure, the coding framework, and the
    DevOps environment. That's the topic of the next section.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些内容，我们讨论了测试以及如何通过解决问题来改善产品。但是像 DevOps 中的所有事物一样，我们的目标是持续改进。这也包括了改进基础构建块的路线图，所谓的基础设施、编码框架和
    DevOps 环境。这就是下一节的主题。
- en: Designing for remediation
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计缓解方案
- en: So far, we've talked about coding the software, implementing the required infrastructure,
    automating it all through CI/CD pipelines, testing the environments, detecting
    issues, and, if needed, fixing the problems. But there's something that we haven't
    been discussing yet and that's the speed of software development and DevOps itself.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了如何编码软件、实现所需的基础设施、通过 CI/CD 管道自动化所有操作、测试环境、检测问题，并在需要时修复问题。但我们还没有讨论的是软件开发和
    DevOps 本身的速度。
- en: DevOps is about learning. As the team and projects grow, they learn how to improve.
    They learn from the product itself and how it's used, and they learn from looking
    at other projects, technologies, and methodologies. These lessons are adopted
    and injected into their own project. The team doesn't need to start over, though
    – they can adopt and adapt as they proceed. We call this **remediation**, which
    is the process of improving an existing situation.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps就是学习。随着团队和项目的成长，他们学会了如何改进。他们从产品本身及其使用方式中学习，并通过观察其他项目、技术和方法论来学习。这些教训会被采纳并融入到他们自己的项目中。然而，团队不需要重新开始
    – 他们可以在前进过程中采用和调整。我们称之为**修复**，这是改进现有情况的过程。
- en: 'Remediation can take place on three levels, as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 修复可以在三个层级进行，如下所示：
- en: '*Infrastructure*: Assuming that we build everyone according to the "everything
    as code" principles in public clouds such as Azure or AWS, teams will have to
    take into account that these platforms evolve rapidly. It''s the responsibility
    of the architect to "track" the roadmap of the cloud services, and then decide
    whether to include new features in the roadmap of the project and improve the
    infrastructure.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*基础设施*：假设我们根据“万物皆代码”的原则在Azure或AWS等公共云中构建每个人，团队将必须考虑这些平台快速发展的情况。架构师有责任“跟踪”云服务的路线图，然后决定是否将新功能纳入项目的路线图中，并改进基础设施。'
- en: '*Software/application code*: Software developers work in code frameworks or
    versions, such as *.NET*. The framework contains the **Framework Class Library**
    (**FCL**), which holds the languages that code can be written in to ensure interoperability
    between different platforms. By using compilers, code written in C#, VB.net, and
    J# (Java) is translated into **Common Language Infrastructure** (**CLI**) so that
    it runs on Windows platforms without us having to write machine code directly.
    CIL produces executables that can run on Windows and various Linux distributions
    such as **Red Hat Enterprise Linux** (**RHEL**), Ubuntu, Debian, Fedora, CentOS,
    Oracle, and SUSE. .NET is just one example. Other frameworks include ASP.NET,
    Java, Python, PHP, and JavaScript. They all run specific versions and developers
    must make sure that their code is running a supported version. Again, it''s recommended
    to have the framework versions set out in a technology roadmap to keep track of
    the life cycles.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*软件/应用程序代码*：软件开发人员在代码框架或版本中工作，例如*.NET*。该框架包含**框架类库**（**FCL**），其中包含用于编写代码的语言，以确保不同平台之间的互操作性。通过使用编译器，用C#、VB.net和J#（Java）编写的代码被转换成**公共语言基础架构**（**CLI**），以便它可以在Windows平台上运行，而无需我们直接编写机器代码。CIL生成的可执行文件可以在Windows和各种Linux发行版上运行，如**Red
    Hat Enterprise Linux**（**RHEL**）、Ubuntu、Debian、Fedora、CentOS、Oracle和SUSE等。 .NET只是其中的一个例子。其他框架包括ASP.NET、Java、Python、PHP和JavaScript。它们都运行特定版本，开发人员必须确保他们的代码正在运行受支持的版本。同样，建议在技术路线图中列出框架版本，以跟踪生命周期。'
- en: '*DevOps*: Finally, DevOps itself has various implementations, typically in
    combination with a specific way of agile working. In other words, it''s not only
    the tool or toolsets that change, although it''s important to keep track of the
    DevOps tool roadmaps. It''s crucial for source control. For example, Azure DevOps
    – widely used to run DevOps projects in Azure – currently runs Azure DevOps Server
    2020 as a version control system, allowing developers to work together on code
    and track changes.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*DevOps*：最后，DevOps本身有多种实现方式，通常与特定的敏捷工作方式结合使用。换句话说，不仅仅是工具或工具集发生了变化，尽管跟踪DevOps工具路线图也很重要。它对源代码控制至关重要。例如，Azure
    DevOps – 广泛用于在Azure中运行DevOps项目 – 目前运行Azure DevOps Server 2020作为版本控制系统，允许开发人员在代码上共同工作并跟踪更改。'
- en: The key takeaway from this section is basically to never stop learning and never
    stop improving. IT is changing rapidly and so is DevOps. DevOps teams have a great
    responsibility in staying ahead so that the business really can benefit from new
    developments. It's the architect that has the responsibility of guiding the teams
    in this and making the right decisions. With that, the architect should focus
    on *quality*.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的关键要点基本上是永远不要停止学习，永远不要停止改进。IT正在迅速变化，DevOps也是如此。DevOps团队肩负着保持领先的巨大责任，以便企业能够真正从新技术中受益。架构师有责任指导团队，在这方面做出正确的决策。因此，架构师应专注于*质量*。
- en: Summary
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter was all about quality. We learned how to identify quality measures
    and that this is more than just about fixing bugs. Quality is about meeting expectations,
    but DevOps teams need to be able to measure these expectations. That's why businesses,
    developers, and operators need to be clear on the acceptance criteria. In this
    chapter, we discussed the DoR as an entry point to working on a project and DoD
    for measuring whether a product is really complete.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主题是质量。我们学习了如何识别质量度量标准，以及这不仅仅是修复漏洞的问题。质量是关于满足期望的，但DevOps团队需要能够衡量这些期望。这就是为什么企业、开发人员和运维人员需要明确验收标准的原因。在本章中，我们讨论了DoR作为项目工作入门的标准，以及DoD用于衡量产品是否真正完成的标准。
- en: Measuring means that teams have to test. In a traditional way of working, testing
    is done as soon as the whole product is delivered. In DevOps, we work with continuous
    testing. In other words, all the team members are involved in testing and validating
    the quality of the product. In this chapter, we discussed different ways and types
    of testing that are common in DevOps. Lastly, we talked about continuous improvement
    using remediation. Cloud platforms, software development technology, and DevOps
    tools are constantly evolving, and DevOps teams need to adapt and adopt these
    changes in their projects to allow businesses to benefit.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 测量意味着团队必须进行测试。在传统的工作方式中，测试是在整个产品交付后进行的。而在DevOps中，我们采用持续测试。换句话说，所有团队成员都参与到测试和验证产品质量的过程中。在本章中，我们讨论了DevOps中常见的不同测试方式和类型。最后，我们谈到了使用补救措施进行持续改进。云平台、软件开发技术和DevOps工具在不断发展，DevOps团队需要适应并采纳这些变化，以便让企业从中受益。
- en: The role of the architect is crucial in that they need to guide in these developments
    and enable the team to make the right decisions.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 架构师的角色至关重要，因为他们需要在这些开发中提供指导，并帮助团队做出正确的决策。
- en: In the next chapter, we will discuss scaling DevOps. We start small, but in
    enterprises, we need to scale out if we want an entire business to start working
    agile and work in DevOps teams. On this note, what do we do with existing programs
    and projects? Let's find out!
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论DevOps的扩展。我们从小规模开始，但在企业中，如果我们希望整个业务开始敏捷工作并在DevOps团队中工作，就需要扩展。在这一点上，我们该如何处理现有的程序和项目呢？让我们一起来看看！
- en: Questions
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: In this chapter, we discussed different types of tests. One of them is unit
    tests. Give a short description of a unit test.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了不同类型的测试。其中之一是单元测试。请简要描述一下单元测试。
- en: In a data-oriented test, we enter the minimum and the maximum values. If we
    enter a value within these boundaries, the test result should be valid. What is
    this test method called?
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据导向的测试中，我们输入最小值和最大值。如果我们输入一个在这些边界内的值，测试结果应该是有效的。这种测试方法叫什么？
- en: To decide if a product is complete, DevOps uses a certain technique. What is
    this technique called?
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了决定一个产品是否完成，DevOps使用了一种特定的技术。这种技术叫什么？
- en: '*True or False*: A fishbone diagram is a good practice for analyzing the root
    cause of a problem.'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*对与错*：鱼骨图是分析问题根本原因的好方法。'
- en: Further reading
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 延伸阅读
- en: '*Quality for DevOps Teams*, by Rik Marselis, Berend van Veenendaal, Dennis
    Geurts and Wouter Ruigrok, Sogeti, 2020'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*DevOps团队的质量*，作者：Rik Marselis、Berend van Veenendaal、Dennis Geurts和Wouter Ruigrok，Sogeti，2020年'
- en: '*Test-Driven Development: By Example*, by Kent Beck, 2002'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*测试驱动开发：通过示例*，肯特·贝克著，2002年'
