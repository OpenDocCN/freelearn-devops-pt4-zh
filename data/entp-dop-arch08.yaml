- en: '*Chapter 6*: Defining Operations in Architecture'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第六章*：在架构中定义运维'
- en: The role of operations is changing in enterprises that adopt DevOps. The number
    one task of operations is to keep services up and running, but in the new digital
    operating model, a lot of these tasks can and will be automated. Before we start
    thinking about automating operations, we need to have a clear view of roles, mandates,
    activities, and domains of operations in the enterprise. This chapter is the guardrail
    to capturing ops in the enterprise architecture. We will learn how to design architecture
    for operations and define the digital operating model.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在采用 DevOps 的企业中，运维的角色正在发生变化。运维的首要任务是保持服务的正常运行，但在新的数字化运营模式中，许多这些任务可以并且将会被自动化。在我们开始考虑自动化运维之前，我们需要对企业中运维的角色、任务、活动和领域有清晰的了解。本章是捕捉企业架构中运维的指导框架。我们将学习如何为运维设计架构，并定义数字化运营模型。
- en: After completing this chapter, you will have learned what the roles and responsibilities
    are of operations and how this can be addressed in the architecture. We will also
    see how operations is changing and impacted by the cloud, cloud-native services,
    and event-driven architectures that use microservices. We will design a digital
    operating model while making a distinction between platform and product operations.
    Finally, we will discuss how to elevate the enterprise to continuous operations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，你将了解运维的角色和责任是什么，以及如何在架构中处理这些问题。我们还将看到运维如何在云、云原生服务和使用微服务的事件驱动架构的影响下发生变化。我们将设计一个数字化运营模型，并区分平台和产品运维。最后，我们将讨论如何将企业提升到持续运维的水平。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要内容：
- en: Understanding operations management
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解运维管理
- en: Defining operations in an enterprise architecture
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在企业架构中定义运维
- en: Defining the digital operating demarcation model
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义数字化运营边界模型
- en: Understanding ops in an event-driven architecture
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解事件驱动架构中的运维
- en: Planning operations with a maturity model
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用成熟度模型进行运维规划
- en: Understanding operations management
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解运维管理
- en: Before we can start defining operations management in an enterprise architecture,
    including the roles and demarcations between these roles, we need to understand
    what IT operations include. In this section, we will discuss the definition of
    IT operations and **IT Operations Management** (**ITOM**).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始定义企业架构中的运维管理之前，包括这些角色之间的角色划分，我们需要了解 IT 运维的内容。在本节中，我们将讨论 IT 运维的定义以及**IT
    运维管理**（**ITOM**）。
- en: 'First, why is this important? DevOps has a tendency to focus on development:
    exploring and building new features and new products. In discussing release management
    and CI/CD, there''s also focus on the development and deployment process. But
    operations is just as important as development, and the role of IT operations
    is changing. Not only because of DevOps, but also because of the digital transformation
    that a lot of enterprises are going through. We will learn more about this in
    this section.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，为什么这很重要？DevOps 有时倾向于专注于开发：探索和构建新特性和新产品。在讨论发布管理和 CI/CD 时，也会关注开发和部署过程。但运维和开发同样重要，而且
    IT 运维的角色正在发生变化。不仅仅是因为 DevOps，还因为许多企业正在经历数字化转型。我们将在本节中深入了解这一点。
- en: As a short definition, we can say that IT operations includes all the processes
    that support hardware and software that are used by the enterprise to fulfill
    customers' services. So, IT operations is responsible for the functionality of
    end user devices such as laptops, but also for products that deliver services
    to customers of the enterprise. A simple example is a website where customers
    can order goods, including its infrastructure (web server) and application code
    (frontend application and database). IT operations also have a major task in assuring
    the quality of IT assets.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，我们可以说，IT 运维包括支持企业用来满足客户服务的硬件和软件的所有过程。因此，IT 运维负责终端用户设备的功能，如笔记本电脑，但也包括为企业客户提供服务的产品。一个简单的例子是一个网站，客户可以在上面订购商品，包括其基础设施（Web
    服务器）和应用代码（前端应用和数据库）。IT 运维还有一个重要任务，就是确保 IT 资产的质量。
- en: 'The following processes are important in ITOM:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下过程在 ITOM 中至关重要：
- en: '**Monitoring**: IT operations are the eyes of IT, so robust, resilient monitoring
    systems are crucial. There''s not really a *one size fits all* approach when it
    comes to monitoring. Operations will work with different systems to control the
    infrastructure, the applications, interfaces, backup jobs, and many other components.
    The challenge is to get one overview out of these systems so that system states,
    failures, and potential issues can be correlated. For example, a web service might
    be not responding because the database is not available. End-to-end monitoring
    is a term that is often used in IT, and it means that monitoring systems simulate
    transactions throughout the chain of IT systems.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控**：IT运维是IT的“眼睛”，因此，强大且具备弹性的监控系统至关重要。在监控方面，并没有真正的*一刀切*方法。运维将与不同的系统合作，控制基础设施、应用程序、接口、备份任务以及许多其他组件。挑战在于如何从这些系统中得到一个概览，以便能够关联系统状态、故障和潜在问题。例如，某个Web服务可能没有响应，因为数据库不可用。端到端监控是IT中常用的术语，它指的是监控系统模拟整个IT系统链中的事务。'
- en: '**Incident management**: Any event that disrupts the normal operation of systems
    is an incident. It''s up to operations to identify the incident (using monitoring)
    and solve it as soon as possible. This can be done by applying a temporary workaround
    to get systems back to normal, but it''s best to fix the issue and make sure it
    doesn''t happen again. That''s what problem management is all about.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件管理**：任何中断系统正常运行的事件都是一次事件。运维的任务是通过监控识别事件，并尽快解决它。可以通过应用临时解决方法来恢复系统正常，但最好还是修复问题并确保它不再发生。这就是问题管理的核心。'
- en: Tip
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提示
- en: 'Being involved in operations for quite a number of years as an architect, there''s
    one important lesson that every engineer and architect should learn well: there''s
    nothing as permanent as a temporary solution to quickly solve an issue. It might
    be the fastest way to get systems back up and running, but in the long run, these
    quick fixes will cause new issues. One reason for this is that quick fixes are
    often not very well documented and after a while, no one knows how they were applied.'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 作为一名架构师，参与运维工作多年后，我学到了一条每个工程师和架构师都应该好好掌握的重要经验：没有什么比临时解决方案更持久的了，尽管它能快速解决问题。它可能是最快让系统恢复正常的方式，但从长远来看，这些快速修复会导致新问题。其原因之一是，快速修复通常文档不充分，过了一段时间后，没人知道它们是如何应用的。
- en: '**Problem management**: Here, incidents are analyzed in more depth. Also, trends
    in incidents are explored. Operations will need to align with engineers and architects
    to come up with solutions to prevent incidents from occurring again.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题管理**：在这里，事件会被更深入地分析。此外，还会探讨事件的趋势。运维需要与工程师和架构师保持一致，提出解决方案，以防止事件再次发生。'
- en: '**Change control and release management**: Operations will be confronted with
    changes to systems and in DevOps, these changes will occur quite often. However,
    it''s the responsibility of operations to ensure that systems keep running without
    major, unplanned interruptions. This is the change control process. Part of this
    process might be running a final backup before the change is executed so that
    system states and data are secured. Developers and operations need to be fully
    aligned in applying changes. This is done in the process of release management.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变更控制和发布管理**：运维将面临系统变更，在DevOps中，这些变更将会经常发生。然而，确保系统在没有重大、未计划的中断情况下持续运行是运维的责任。这就是变更控制过程。这个过程的一部分可能是在变更执行之前进行最后一次备份，以确保系统状态和数据的安全。开发人员和运维需要在应用变更时保持充分的协调。这是在发布管理过程中完成的。'
- en: In the more traditional way of working, operations will simply receive the new
    release and then decide when this is deployed so that existing services can continue
    without any disruptions. In DevOps, the process works differently. Here, the team
    has a shared responsibility in deploying the new release.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的工作方式中，运维将收到新的发布版本，然后决定何时部署，以确保现有服务能够继续运行而不受干扰。在DevOps中，流程则不同。在这里，团队共同承担部署新版本的责任。
- en: 'In short, operations must keep the services up and running under all circumstances.
    DevOps and digital transformation have a significant impact on operations. Let''s
    review some trends:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，运维必须在任何情况下保持服务的持续运行。DevOps和数字化转型对运维有着重大影响。让我们回顾一些趋势：
- en: '**Cloud and cloud native**: This may sound obvious, but cloud and cloud-native
    technologies have an enormous impact on IT operations. The contradiction is that
    a lot of these technologies aim to reduce the complexity in the IT landscape,
    but on the other hand, they add complexity with cloud-born assets. The IT landscape
    is turning more and more into an API ecosystem, where operations have to manage
    not only virtual machines, applications, and network connections, but also **Application
    Programmable Interfaces** (**APIs**) that connect the PaaS and SaaS solutions
    to the IT landscape of the enterprise.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云与云原生**：这可能听起来显而易见，但云和云原生技术对 IT 运维有着巨大的影响。矛盾之处在于，这些技术的许多目标是减少 IT 环境的复杂性，但另一方面，它们也因云端资产而增加了复杂性。IT
    环境正越来越变成一个 API 生态系统，运维人员不仅要管理虚拟机、应用程序和网络连接，还要管理将 PaaS 和 SaaS 解决方案与企业 IT 环境连接的**应用程序编程接口**（**API**）。'
- en: '**Data center decommissioning**: With enterprises moving IT systems to cloud
    platforms, it''s logical to assume that the private owned data centers are being
    emptied and decommissioned. Here, traditional operations work, including datacenter
    management, is not disappearing, but being transformed into managing the virtual
    data center in cloud platforms. Once more, everything is turning into code, whereas
    in traditional data centers, operators would still have physical machines to look
    after.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据中心退役**：随着企业将 IT 系统迁移到云平台，可以合理推测私有数据中心正在被清空并退役。在这里，传统的运维工作，包括数据中心管理，并没有消失，而是转变为管理云平台中的虚拟数据中心。再次强调，一切都在变成代码，而在传统的数据中心，操作人员仍需照料物理机器。'
- en: '**Faster networks**: There''s less of a need to have systems near the enterprise
    itself. Systems can be hosted in global cloud platforms. High-speed network connections
    solve problems with latency, so there''s virtually no limit to where systems can
    *land*. In the near future, we will see faster networks coming to the market:
    it''s a requirement for a lot of new services that are being developed. Think
    of real-time data analytics, quantum computing or simulation, and technologies
    that rely on high-speed connections to, for instance, transmit images across the
    world. Networks are the foundation for everything, and operations will need to
    focus more on the resilience, agility, and performance of these networks.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更快的网络**：企业对系统与自身更近的需求已不再那么迫切。系统可以托管在全球云平台上。高速网络连接解决了延迟问题，因此几乎没有限制系统可以*落地*的地方。在不久的未来，我们将看到更快的网络进入市场：这是许多新兴服务的要求。想想实时数据分析、量子计算或仿真技术，以及依赖高速连接的技术，例如跨全球传输图像的技术。网络是一切的基础，运营将需要更多关注这些网络的弹性、敏捷性和性能。'
- en: '**Globalization**: Global cloud providers such as Azure, AWS, Google Cloud,
    and Alibaba Cloud have data centers around the globe. There''s a big benefit in
    being able to have disaster recovery enabled in a completely different region,
    thus increasing the resiliency of systems. However, there''s also a lot to consider,
    such as if enterprises are bound by legal regulations to have data within the
    borders of the country or region where they reside or deliver services. Globalization
    of IT has pros, but also cons.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全球化**：全球云服务提供商，如 Azure、AWS、Google Cloud 和阿里巴巴云，在全球范围内都有数据中心。能够在完全不同的地区启用灾难恢复，从而增强系统的弹性，这是一个巨大的好处。然而，也有许多需要考虑的因素，比如企业是否受到法律法规的约束，要求将数据存储在其所在国家或地区的境内，或是在该地区提供服务。IT
    的全球化有其优点，但也有缺点。'
- en: '**Shift to left-left**: The idea of knowledge sharing in IT has gained a lot
    of momentum over the past few years. Shift left also means that IT systems cater
    for *self-help*: systems are designed in such a way that users can easily find
    ways to overcome issues. With shift left-left, an element is added to this: systems
    are learning from users and adapting software so that the issue doesn''t occur
    again. This is where the final trend will play a huge role: **artificial intelligence**
    (**AI**) and **machine learning** (**ML**).'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**左移到更左移**：过去几年里，IT 知识共享的理念获得了很大的推动。左移也意味着 IT 系统迎合了*自助帮助*：系统的设计使得用户可以轻松找到解决问题的方法。在更左移的情况下，新增了一个元素：系统从用户那里学习，并调整软件，以避免问题再次发生。这也是最终趋势将发挥巨大作用的地方：**人工智能**（**AI**）和**机器学习**（**ML**）。'
- en: '**AI and ML**: Last but not least, one of the major trends that will change
    the operations domain is AI and ML. This includes self-learning, self-healing
    systems, and systems that can even predict certain behavior and act accordingly
    to that behavior. In operations. we will see diagnostic systems that learn from
    issues and either fix these or give advice on how to deal with them. These systems
    are also capable of correlating events: if a system in the chain fails, AI will
    know how it will impact other systems in that chain and take mitigating actions,
    for instance, taking a snapshot of the system''s state so that the root cause
    can be identified faster and more accurately.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**人工智能与机器学习**：最后但同样重要的，是人工智能（AI）和机器学习（ML）将改变运营领域的主要趋势。这包括自学习、自修复系统，甚至能够预测某些行为并据此采取相应行动的系统。在运营中，我们将看到诊断系统，它们从问题中学习，或者修复问题，或者提供处理建议。这些系统还能够关联事件：如果链条中的某个系统失败，AI将知道它将如何影响该链条中的其他系统，并采取缓解措施，例如拍摄系统状态的快照，以便更快、更准确地识别根本原因。'
- en: At this point, you should know that operations will not become easier and that
    IT won't become less complex. This complexity will shift and transform. The good
    news is that these new technologies will allow you to predict system behavior
    better, design for more resiliency, and reduce risks further by finding the root
    causes of issues faster and taking swift, accurate corrective actions.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你应该知道运营不会变得更简单，IT也不会变得更不复杂。这种复杂性将会转变和演变。好消息是，这些新技术将帮助你更好地预测系统行为，设计更具弹性，并通过更快地找到问题的根本原因并采取迅速、准确的纠正措施，进一步降低风险。
- en: How does this fit into our architecture? We will discuss this in the next section.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这如何融入我们的架构？我们将在下一部分讨论。
- en: Defining operations in an enterprise architecture
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在企业架构中定义运营
- en: IT operations is not a part of the enterprise architecture, meaning that an
    enterprise architecture doesn't define how an enterprise must perform operations.
    At best, the operations architecture is part of the technical architecture. In
    this section, we will elaborate on the components of the enterprise architecture
    and then study the specifics of the operations architecture.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: IT运营不是企业架构的一部分，这意味着企业架构并不定义企业必须如何进行运营。充其量，运营架构是技术架构的一部分。在这一部分，我们将详细阐述企业架构的组件，然后研究运营架构的具体内容。
- en: 'The enterprise architecture includes the following architectural components:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 企业架构包括以下架构组件：
- en: '**Business architecture**: This covers the business functions and the organization
    of the business, including its operations. From the business architecture, it
    should be clear how products and services are delivered, as well as what processes
    are followed for designing, building, and running them. The business architecture
    starts with the product strategy, which includes describing the products and services
    that the enterprise delivers.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**业务架构**：这涵盖了业务功能和组织架构，包括其运营。从业务架构中，应该能清楚地看到产品和服务是如何交付的，以及在设计、构建和运行它们时所遵循的流程。业务架构从产品战略开始，其中包括描述企业交付的产品和服务。'
- en: '**Governance architecture**: This defines who''s responsible for fulfilling
    processes. This is the blueprint for how the enterprise operates, including the
    tactical plans for IT that state how processes are implemented, operated, and
    monitored.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**治理架构**：这定义了谁负责执行各项流程。这是企业运营的蓝图，包括IT的战术计划，明确了流程的实施、操作和监控方式。'
- en: Ops are key components in both the business and governance architecture. Ops
    is responsible for delivering products and services in a stable manner throughout
    the whole delivery chain. It's important to realize that there is a difference
    between operational service management and operations management, with the latter
    often referred to as ITOM. Service management comprises the typical ITSM or ITIL
    processes that we discussed in the first section about *Understanding operations
    management*, such as incident and problem management. ITOM is more IT technology
    oriented and focuses on the operations of applications and infrastructure. The
    enterprise architecture also addresses this.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运营是商业和治理架构中的关键组成部分。运营负责在整个交付链中稳定地交付产品和服务。重要的是要意识到运营服务管理和运营管理之间的区别，后者通常被称为ITOM。服务管理包括我们在第一部分《理解运营管理》中讨论的典型ITSM或ITIL流程，如事件管理和问题管理。ITOM更多侧重于IT技术，并专注于应用程序和基础设施的运营。企业架构也涉及到这一点。
- en: '**Data architecture**: This describes how data is used; that is, why and by
    who or what process to fulfill a service. Operations have a role in making and
    keeping data available according to the data principles of an enterprise. These
    principles typically involve data privacy and compliancy rules. Due to this, operations
    need to work closely with security and data privacy officers.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据架构**：这描述了数据如何被使用；即为什么以及由谁或什么过程来履行某项服务。运营在根据企业的数据原则确保数据可用方面起着重要作用。这些原则通常涉及数据隐私和合规性规则。因此，运营需要与安全和数据隐私官员密切合作。'
- en: '**Applications architecture**: This describes the build and usage of applications.
    Again, operations play a key role in keeping the applications running, including
    databases and middleware. It''s highly recommended to involve operations in the
    very first stage of application development, to make sure that applications can
    really be managed by operations. Think of applying new cloud-native technologies
    to applications: an enterprise needs to be sure that operations have the skills
    to operate these technologies.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用架构**：这描述了应用程序的构建和使用。同样，运营在保持应用程序运行，包括数据库和中间件方面，发挥着关键作用。强烈建议在应用程序开发的最初阶段就将运营纳入其中，以确保应用程序可以真正由运营管理。想象一下将新的云原生技术应用于应用程序：企业需要确保运营团队具备操作这些技术的技能。'
- en: '**Technology architecture**: Finally, this describes all the technical components
    that are used in the enterprise. It should include products such as hardware and
    software, standards and principles, services, and policies.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**技术架构**：最后，这描述了企业中使用的所有技术组件。它应包括硬件和软件等产品、标准和原则、服务和政策。'
- en: 'The following diagram shows the levels in the enterprise architecture:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了企业架构中的各个层级：
- en: '![Figure 6.1 – Components of the enterprise architecture'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.1 – 企业架构的组成部分'
- en: '](img/B17492_06_001.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_06_001.jpg)'
- en: Figure 6.1 – Components of the enterprise architecture
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – 企业架构的组成部分
- en: 'The operations architecture can be part of the technology architecture, but
    at a more detailed level. It includes the following components at a minimum:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 运营架构可以是技术架构的一部分，但在更详细的层面。它至少包括以下组件：
- en: Production scheduling/monitoring
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产调度/监控
- en: System monitoring
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统监控
- en: Performance monitoring
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性能监控
- en: Network monitoring
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络监控
- en: Event management (incidents, problems, changes)
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件管理（事件、问题、变更）
- en: 'Two items deserve special attention:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 两个事项值得特别关注：
- en: '**Service-level agreements (SLAs)**: The contract between a supplier and a
    customer that describes exactly what conditions a service is provided with, typically
    using **key performance indicators** (**KPIs**). Operations need to deliver the
    service according to these KPIs.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务级别协议（SLAs）**：供应商与客户之间的合同，明确描述服务提供的具体条件，通常使用**关键绩效指标（KPIs）**。运营需要根据这些KPIs提供服务。'
- en: '**Operating-level agreements (OLAs)**: Part of the SLA can be OLAs, defining
    the interdependent relationships between components, and composing the service
    that is covered by the SLA. For example, the SLA might describe a web application
    that needs to be available 99.9% percent of the time. The application itself might
    be depending on database services that are not part of the application chain and
    are operated by a different ops group. The OLA will address this interdependency.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运营级别协议（OLAs）**：SLA的一部分可以是OLAs，定义组件之间的相互依赖关系，并构成SLA所涵盖的服务。例如，SLA可能描述一个需要99.9%时间可用的Web应用程序。该应用程序本身可能依赖于数据库服务，而这些服务并不在应用程序链中，由不同的运维组负责。OLA将处理这种相互依赖关系。'
- en: In this section, we concluded that IT is becoming more complex. Enterprises
    expect more from operations to keep systems stable, but also to keep up with new
    developments. To allow ops to fulfill these increasingly demanding tasks, they
    need an adjusted operating model that deals with this digital transformation.
    For that, they also need the right tools. In the next section, we will discuss
    this new, digital operating model before we step into the world of tools with
    AIOps.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们得出结论，IT变得越来越复杂。企业期望运维不仅能保持系统稳定，还能跟上新发展的步伐。为了使运维能够完成这些越来越苛刻的任务，他们需要一个调整过的运营模型来应对这种数字化转型。为此，他们还需要合适的工具。在下一节中，我们将讨论这种新的数字化运营模型，然后进入AIOps工具的世界。
- en: Defining the digital operating demarcation model
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义数字化运营划分模型
- en: The role and position of operations is changing; we saw that in the first section
    of this chapter. Besides new and evolving technology impacting operations, the
    most important reason for this is the shift from projects to product-oriented
    continuous delivery.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 运维的角色和位置正在发生变化；我们在本章的第一节中已经看到这一点。除了新技术和不断发展的技术对运维的影响外，最重要的原因是从项目导向向产品导向的持续交付转变。
- en: 'What do we mean by this? Most enterprises used to work in projects, typically
    waterfall type projects. There''s a specific end date and the whole project is
    set out in a timeline with milestones. In DevOps, the focus is on the product:
    it starts with a Minimal Viable Product, and then the teams keep improving it
    in short sprints of 2 or 3 weeks.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是什么意思呢？大多数企业曾经习惯于做项目，通常是瀑布式项目。每个项目都有一个明确的结束日期，整个项目按照时间线和里程碑规划。在DevOps中，焦点转向了产品：它从最小可行产品（MVP）开始，然后团队在短期的2到3周的冲刺中不断改进它。
- en: At the end of the sprint, the product and the deliverables are reviewed. The
    developers and operations collaborate with these teams. In the traditional model,
    operations would get a final product and then decide how and when it would be
    released. The new operating model has to be more agile, adaptive, and embedded
    in DevOps. In this section, we will look at that new operating model in more detail.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在冲刺结束时，产品和交付物会进行审查。开发人员和运维团队会与这些团队合作。在传统模型中，运维会获得最终产品，然后决定如何以及何时发布。而新的运营模型必须更加敏捷、适应性强，并且嵌入到DevOps中。在本节中，我们将更详细地讨论这种新的运营模型。
- en: 'It''s important to understand what the role of dev is and what the role of
    ops is in a digital operating model:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在数字化运营模型中，理解开发和运维的角色非常重要：
- en: Dev designs and deploys.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发设计并部署。
- en: Ops fulfills and manages, including detection and correction. However, in DevOps,
    detection and correction is looping back into dev.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运维完成并管理，包括检测和修复。然而，在DevOps中，检测和修复会反馈回开发阶段。
- en: To create agility, we need to set **demarcation** in the different ops tasks.
    We will have operations focusing on the products and operations focusing on the
    platform. This is a requirement if we wish to provide product-oriented delivery.
    In a digital operating model based on agile and DevOps, we have businesses working
    together with product teams to define the necessary products and their features.
    Product ops engineers will support the delivery of such products, while the platform
    engineers will make sure that the platform – the infrastructure – is ready to
    land the products and provide an enduring stable service.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创造敏捷性，我们需要在不同的运维任务中设定**划分**。我们将有运维专注于产品，运维专注于平台。如果我们希望提供以产品为导向的交付，这是一个必要条件。在基于敏捷和DevOps的数字化运营模型中，业务部门与产品团队合作，共同定义所需的产品及其特性。产品运维工程师将支持这些产品的交付，而平台工程师则确保平台——即基础设施——准备好接纳产品并提供持久稳定的服务。
- en: 'The following diagram shows a model with demarcation layers:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了一个具有划分层次的模型：
- en: '![Figure 6.2 – Layered demarcation model with product ops and platform ops'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.2 – 具有产品运维和平台运维的分层界定模型'
- en: '](img/B17492_06_002.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_06_002.jpg)'
- en: Figure 6.2 – Layered demarcation model with product ops and platform ops
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – 具有产品运维和平台运维的分层界定模型
- en: 'In the next section, we will explain the model further:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将进一步解释该模型：
- en: '**Platform Ops**: The platform is the landing zone – the foundation. It needs
    to be there, and it needs to be stable. Product teams should not have to worry
    about the availability of the platform. In most digital operating models, the
    platform is usually a (public) cloud platform.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平台运维**：平台是着陆区——基础设施。它需要稳定存在，且保持稳定。产品团队不应该担心平台的可用性。在大多数数字化运营模型中，平台通常是（公共）云平台。'
- en: The platform team that manages this is decoupled from the product teams. Platform
    operations include updates, upgrades, and optimization and also deploys new infrastructure
    features. These are planned in close cooperation with the product teams to avoid
    disruptions to services.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 管理平台的团队与产品团队是解耦的。平台运维包括更新、升级和优化，还会部署新的基础设施功能。这些都需要与产品团队紧密合作，以避免对服务的干扰。
- en: Roles that are advised in platform operations are (cloud) platform manager,
    (cloud) platform architect, and platform engineers. There might be a great need
    to have an API integrations specialist in this ops team as well, since platforms
    are tending to become more like API ecosystems. These APIs, such as SaaS and PaaS
    solutions, need to be integrated with the platform.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在平台运维中，建议的角色有（云）平台经理、（云）平台架构师和平台工程师。这个运维团队可能还需要有一个 API 集成专家，因为平台越来越像是一个 API
    生态系统。这些 API，例如 SaaS 和 PaaS 解决方案，需要与平台集成。
- en: '**Product Ops**: This is the layer where the product is designed, build, deployed,
    and managed in DevOps mode. Simply put, this is the layer where the product is
    defined as a basic idea and through iterations, all of which are eventually brought
    under product ops control. In this team, we will need platform engineers that
    bridge the requirements of the product to the platform. These platform engineers
    need to be trained and skilled in Infrastructure as Code, Configuration as Code,
    automation, and API programming. They will liaise with platform operations.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**产品运维**：这是设计、构建、部署和管理产品的层级，以 DevOps 模式进行。简单来说，这就是产品从基本想法开始，通过多次迭代，最终由产品运维控制的层级。在这个团队中，我们需要平台工程师来桥接产品的需求与平台之间的联系。这些平台工程师需要接受培训，具备基础设施即代码、配置即代码、自动化和
    API 编程技能。他们将与平台运维团队进行对接。'
- en: Ops roles that are advised in this layer and the product team are infrastructure
    engineers and testers, developers, and specific domain architects who are involved
    in designing the product.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这一层以及产品团队中建议的运维角色有基础设施工程师和测试人员、开发人员，以及参与产品设计的特定领域架构师。
- en: 'One of the pitfalls of introducing agile and DevOps is that enterprises might
    step away from the traditional IT service management processes. However, the operational
    processes that we briefly discussed in the first section about *Understanding
    operations management* are still very valid. This is why, in a digital operating
    model, we need roles and responsibilities to address these processes:'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引入敏捷和 DevOps 的一个陷阱是，企业可能会远离传统的 IT 服务管理流程。然而，在第一节中我们简要讨论的关于*理解运营管理*的操作流程依然非常有效。这就是为什么在数字化运营模型中，我们需要角色和责任来解决这些流程：
- en: '- (Major) Incident manager'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- （主要）事件经理'
- en: '- Problem manager'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 问题经理'
- en: '- Change manager'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 变更经理'
- en: '- Asset manager'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 资产经理'
- en: 'We can do this using a RACI matrix. RACI stands for **Responsible, Accountable,
    Consulting, and Informed**. The following table represents a simple example of
    a RACI for service management processes:'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以通过使用 RACI 矩阵来实现这一点。RACI 代表**责任人、负责人、咨询者和知情人**。下表展示了服务管理流程的一个简单 RACI 示例：
- en: '![Figure 6.3 – Example of a RACI matrix for service management processes'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.3 – 服务管理流程的 RACI 矩阵示例'
- en: '](img/B17492_06_003.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_06_003.jpg)'
- en: Figure 6.3 – Example of a RACI matrix for service management processes
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – 服务管理流程的 RACI 矩阵示例
- en: The placing of the **R**, **A**, **C**, and **I** are debatable, which is fine
    – as long as it is perfectly clear to all involved who's responsible for what.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**R**、**A**、**C** 和 **I** 的位置是有争议的，但这没关系——只要所有相关人员都清楚地知道谁负责什么就行。'
- en: '**Business**: This is the top level and is where the strategy is laid out and
    the requirements for the products are defined. In the new digital operating model,
    new roles are added to this layer, such as customer journey analysts and designers.
    The whole idea behind the model is that the enterprise caters for more agility
    and gets new products to the market faster. The business will need to know what
    customers want and how they experience the products to make them successful.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**业务**：这是最顶层，战略在此制定，产品的需求也在此定义。在新的数字化运营模式中，新增了一些角色，例如客户旅程分析师和设计师。该模型的核心思想是使企业更具敏捷性，并能更快地将新产品推向市场。企业需要了解客户的需求以及他们如何体验产品，以便使产品成功。'
- en: 'This is also important for operations. Remember that dev and ops have to be
    aligned from the beginning to the end. Ops needs to be involved in the customer''s
    journeys too. A specific ops role in this case is the service manager role: they
    need to be aware of what''s coming and how this can be adopted in the new services,
    all while ensuring the existing services are not disrupted.'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这对于运维也非常重要。记住，开发和运维必须从头到尾保持一致。运维也需要参与到客户旅程中。在这种情况下，运维的一个特定角色是服务经理：他们需要了解即将到来的内容，以及如何在新服务中采用这些内容，同时确保现有服务不会受到干扰。
- en: There's one important layer that's missing, but this is actually not a separate
    layer. Security and security management is an overarching layer and should be
    embedded in every other layer.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个重要的层级缺失了，但实际上这并不是一个单独的层级。安全性和安全管理是一个跨越的层级，应嵌入到每个其他层级中。
- en: So, we have engineers and architects on all the layers, closely collaborating.
    But it should be clear that they need some sort of framework where they can work.
    That is the enterprise architecture. The enterprise architect sits at the very
    top of the model, closely working together with the customer journey designers,
    the domain architects in development, and the architects in operations.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们在各个层级都有工程师和架构师，紧密合作。但应该明确的是，他们需要某种框架来进行工作。那就是企业架构。企业架构师位于模型的最顶部，紧密与客户旅程设计师、开发中的领域架构师以及运维架构师合作。
- en: 'IT4IT, by The Open Group, addresses this new model and suggests a way forward
    for enterprises. IT4IT marks four stages or *value streams* for products. These
    value streams are very accurate since IT creates value – a product being developing
    from an idea and becoming a real service:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: IT4IT由The Open Group提出，针对这种新模式提出了企业的前进方向。IT4IT划分了四个阶段或*价值流*，用于产品的生命周期。这些价值流非常准确，因为IT创造了价值——从一个想法到实际服务的产品开发过程：
- en: '**Plan**: Strategy to portfolio'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**规划**：从战略到组合'
- en: '**Build**: Requirement to deploy'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**构建**：从需求到部署'
- en: '**Deliver**: Requirement to fulfill'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**交付**：从需求到履行'
- en: '**Run**: Detect to correct'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**运行**：从检测到修复'
- en: 'These value streams are shown in the following diagram:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了这些价值流：
- en: '![Figure 6.4 – IT4IT value streams'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.4 – IT4IT价值流'
- en: '](img/B17492_06_004.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_06_004.jpg)'
- en: Figure 6.4 – IT4IT value streams
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 – IT4IT价值流
- en: The deliver and run value streams are the ops streams. Request to fulfill includes
    cataloging, fulfilling, and managing the usage of the service. Run is about anticipating
    and resolving issues. Ops can help with these tasks by using an event-driven architecture.
    We will discuss this in the next section.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 交付和运行价值流是运维流。请求到履行包括目录管理、履行和服务使用管理。运行是关于预测和解决问题。运维可以通过使用事件驱动架构来帮助完成这些任务。我们将在下一部分讨论这一点。
- en: Understanding ops in an event-driven architecture
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解事件驱动架构中的运维
- en: 'Let''s review the most important task of ops once more: keeping services up
    and running. To enable this, we have defined a number of processes that help manage
    systems. Incident and problem management are key processes; that is, in IT4IT
    terms, detect to correct. The issue is that incident management is almost by default
    reactive: an issue is detected and actions are triggered to find and fix the issue.
    In the next phase, typically in problem management, a deeper analysis is done,
    where solutions are designed to prevent the issue from happening again.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次回顾运维的最重要任务：保持服务的正常运行。为了实现这一点，我们定义了一些帮助管理系统的流程。事件和问题管理是关键流程；也就是说，按照IT4IT的术语，从检测到修复。问题在于，事件管理几乎默认是反应式的：一旦发现问题，就会触发行动以寻找并修复问题。在下一个阶段，通常是在问题管理中，会进行更深入的分析，设计解决方案以防止问题再次发生。
- en: Event management is a component of operations. The challenge in a digital operating
    model is to orchestrate and automate these events across different IT systems
    and even platforms. The event-driven architecture addresses this and is actually
    the starting point of AIOps. We will discuss this in more detail in [*Chapter
    8*](B17492_08_ePub_RK.xhtml#_idTextAnchor095), *Architecting AIOps*.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 事件管理是运营的一个组成部分。在数字化运营模式中，挑战在于如何在不同的 IT 系统甚至平台之间编排和自动化这些事件。事件驱动架构解决了这个问题，实际上，它是
    AIOps 的起点。我们将在[*第8章*](B17492_08_ePub_RK.xhtml#_idTextAnchor095)《AIOps架构设计》中详细讨论这一点。
- en: 'The event-driven architecture was originally meant to help design applications
    so that they react to events. An event is defined as a change of state that triggers
    a reaction. The following diagram provides an example of a build in Archimate:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 事件驱动架构最初旨在帮助设计应用程序，使其能够响应事件。事件被定义为触发反应的状态变化。以下图表提供了一个在 Archimate 中构建的示例：
- en: '![Figure 6.5 – Simple Archimate model for processing payments'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.5 – 用于处理支付的简单 Archimate 模型'
- en: '](img/B17492_06_005.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_06_005.jpg)'
- en: Figure 6.5 – Simple Archimate model for processing payments
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.5 – 用于处理支付的简单 Archimate 模型
- en: 'Here, we have a business event: **Order placed**. This triggers a business
    function, which in this example is called **Order fulfillment**. Part of this
    function is **Payment**, which triggers an external system at the bank that delivers
    the payment service. As soon as the payment is accepted, the order leaves the
    function to the next business event, which is the **Order delivery**.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有一个业务事件：**订单已下单**。这触发了一个业务功能，在这个示例中被称为 **订单履行**。这个功能的一部分是 **支付**，它触发了银行的外部系统，提供支付服务。一旦支付被接受，订单就会从该功能转移到下一个业务事件，即
    **订单配送**。
- en: Tip
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Archimate is a recommended methodology for designing functions and mapping these
    to processes that need to be fulfilled by IT components. Archimate uses viewpoints
    to model business processes to applications and technology. A common viewpoint
    is the product viewpoint, which shows the value that a product delivers to customers.
    The architect can use Archimate models to define the composition of the product,
    including the different services and interfaces between the services. Archi is
    a free tool that can be used to design Archimate models. Archi can be downloaded
    from [https://www.archimatetool.com/download/](https://www.archimatetool.com/download/).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Archimate 是一种推荐的建模方法，用于设计功能并将其映射到 IT 组件需要履行的流程上。Archimate 使用视角来建模从业务流程到应用程序和技术的过程。一个常见的视角是产品视角，它展示了产品为客户带来的价值。架构师可以使用
    Archimate 模型来定义产品的组成，包括不同的服务和服务之间的接口。Archi 是一个免费的工具，可以用于设计 Archimate 模型。Archi
    可以从 [https://www.archimatetool.com/download/](https://www.archimatetool.com/download/)
    下载。
- en: In this – very simple – example, the customer pays their placed order. The order
    status now changes to paid and triggers a process that pushes the order to delivery.
    In fact, the payment process itself will also trigger other new events, such as
    a connection that needs to be established with a bank or payment service. Within
    the bank, there will be a trigger that checks the back account of the buyer and
    sends a message to the order system with a status of OK or not OK.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个——非常简单——的示例中，客户支付了他们下的订单。订单状态现在变为已支付，并触发一个将订单推送到配送的过程。事实上，支付过程本身也会触发其他新事件，例如需要与银行或支付服务建立连接。在银行内部，会触发一个检查买家账户的过程，并向订单系统发送“OK”或“不OK”的状态消息。
- en: In short, a change of state will trigger a lot of new events. These events do
    not have to occur in the same system, as we have seen in this example. Events
    can drive decisions in other systems that are connected through APIs. This is
    the foundation of microservices and the **service-oriented architecture** (**SOA**).
    Microservices are contained, independent operating services that communicate with
    each other using APIs. These services are managed by self-contained teams that
    develop, build, and run these services. So, it's fair to say that the event-driven
    architecture using microservices is well supported by DevOps with teams that are
    end-to-end responsible for delivering that particular service.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，状态的变化将触发许多新的事件。这些事件不一定发生在同一个系统中，正如我们在这个例子中所看到的那样。事件可以驱动通过 API 连接的其他系统中的决策。这是微服务和**面向服务架构**（**SOA**）的基础。微服务是独立运行的服务，通过
    API 相互通信。这些服务由自给自足的团队管理，团队负责开发、构建和运行这些服务。因此，可以公平地说，采用微服务的事件驱动架构得到了 DevOps 的良好支持，DevOps
    团队对交付特定服务负有端到端的责任。
- en: To enable this type of architecture, we need services to be defined as separate
    functions that are reusable, scalable, and interoperable. These are the corner
    stones of SOA and in fact, a lot of cloud technologies are derived from SOA principles.
    PaaS and SaaS solutions are defined as SOA, which means that they can be reused
    and shared in different environments, are scalable, and are interoperable between
    different platforms.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这种架构，我们需要将服务定义为可重用、可扩展和可互操作的独立功能。这些是 SOA 的基石，实际上，许多云技术源自 SOA 原则。PaaS 和 SaaS
    解决方案被定义为 SOA，这意味着它们可以在不同的环境中重用和共享，可扩展，并且在不同平台之间具有互操作性。
- en: 'How does this all impact operations? To put it very simply: they have to keep
    services – microservices, to be precise – up and running across a lot of different
    applications, systems, and platforms. Ops must deal with decentralized continuous
    delivery by using interfaces that connect independent deployed services. The traditional
    way of monitoring will not be sufficient anymore: ops needs a single pane of glass
    view – a holistic view of all the services and their interconnections.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切如何影响运维？简单来说：他们必须在许多不同的应用、系统和平台之间保持服务——准确地说是微服务——的正常运行。运维必须通过使用连接独立部署服务的接口来处理分散的持续交付。传统的监控方式将不再足够：运维需要一个统一的视图——所有服务及其相互连接的整体视图。
- en: 'Now, let''s go back to our example where we have an order that needs to be
    paid. The order status will change from not paid to paid and trigger the delivery.
    The status will only change if the bank has approved the payment, so the trigger
    to change the status comes from a service that''s outside the service that actually
    holds the order. If the API between the bank and the order queue fails, the operators
    will need to know about this. So, monitoring should also include monitoring the
    API to the bank and checking if the bank service is *online*. Here, event monitoring
    across the full chain becomes key, as shown in the following diagram:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回到我们的例子，假设我们有一个需要支付的订单。订单状态将从未支付变为已支付，并触发配送。只有当银行批准支付后，状态才会发生变化，因此状态变化的触发来自一个与实际持有订单的服务不同的外部服务。如果银行和订单队列之间的
    API 失败，操作员需要知道这一情况。因此，监控应该包括监控到银行的 API，并检查银行服务是否*在线*。在这里，跨整个链路的事件监控变得至关重要，如下图所示：
- en: '![Figure 6.6 – Full chain event management and monitoring'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.6 – 完整链路事件管理和监控](img/B17492_06_006.jpg)'
- en: '](img/B17492_06_006.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_06_006.jpg)'
- en: Figure 6.6 – Full chain event management and monitoring
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.6 – 完整链路事件管理和监控
- en: 'This will certainly lead to more complexity in ops, and that''s why we need
    to look for ways to automate this as much as possible. Microservices, SOA, and
    the event-driven architecture create more reliable systems: independent services
    simply wait for the trigger before the action is executed and the next service
    is started. Independent services allow for a fire and forget model: a system fires
    a trigger and then forgets about it; then, the system moves on to the next event
    and the next trigger. But we want to ensure that the trigger is actually received
    and maybe even check if the trigger is processed correctly.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这必然会增加运维的复杂性，这就是为什么我们需要尽可能寻找自动化的方法。微服务、SOA和事件驱动架构创建了更可靠的系统：独立服务仅等待触发器执行动作并启动下一个服务。独立服务允许“点火并忘记”模型：系统触发一个触发器，然后忘记它；接着，系统继续下一个事件和下一个触发器。但我们希望确保触发器确实被接收，并可能甚至检查触发器是否被正确处理。
- en: 'In the next few chapters, we will learn how to monitor these processes and
    how we can automate event management in event-driven systems using microservices.
    This is exactly what AIOps does: making operations easier by means of AI and ML.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几章中，我们将学习如何监控这些过程，以及如何在基于微服务的事件驱动系统中自动化事件管理。这正是AIOps的作用：通过AI和ML使运营变得更加简单。
- en: Planning operations with a maturity model
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用成熟度模型进行运营规划
- en: In this section, we will look at a maturity model for IT operations. Then, we
    will learn how to apply this to the enterprise and get it to continuous operations.
    Finally, we'll learn how to get it ready so that it can be implemented by AIOps.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将研究IT运营的成熟度模型。然后，我们将学习如何将其应用到企业，并使其实现持续运营。最后，我们将学习如何准备好以便AIOps可以实施。
- en: 'The basic operations maturity model looks as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的运营成熟度模型如下所示：
- en: '![](img/B17492_06_007.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17492_06_007.jpg)'
- en: Figure 6.7 – Operations maturity model
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7 – 运营成熟度模型
- en: The first level is sometimes referred to as chaotic. Processes are not documented
    here; operations are merely just firefighting. At this level, it's the tools that
    define how operations work, instead of having an architecture in place that also
    defines the toolset. Most enterprises have passed this level.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 第一级有时被称为混乱阶段。这里的过程没有记录；操作只是简单地在应急情况下应对问题。在这个级别，工具决定了操作的方式，而不是建立一个定义工具集的架构。大多数企业已经经历了这个阶段。
- en: However, a lot of enterprises are stuck at the second level. This is the committed
    level, where processes are defined. Incident, problem change, and project management
    is in place, but the processes are only integrated in a very limited way. There's
    no overarching event management or *single pane glass view*. In other words, events
    will still trigger unexpected system behavior and might cause severe disruptions
    to the business.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，许多企业卡在第二级。这是承诺级别，在这里流程是被定义的。事件、问题变更和项目管理已经就位，但这些流程只是以非常有限的方式集成在一起。没有全面的事件管理或*单一面板视图*。换句话说，事件仍会触发意外的系统行为，并可能严重影响业务。
- en: Most enterprises will be somewhere between levels 3 and 4, depending on where
    they are in their digital transformation. The third, proactive level is already
    quite challenging to achieve. At this level, enterprises can analyze trends, have
    end-to-end event monitoring in place, have larger parts of their IT automated,
    and, most importantly, can predict events and taking proactive measures. This
    is the level where AIOps can play a significant role. We will learn more about
    this in [*Chapter 7*](B17492_07_ePub_RK.xhtml#_idTextAnchor086), *Understanding
    the Impact of AI on DevOps*.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数企业将处于第3和第4级之间，具体取决于它们在数字转型过程中的位置。第三级，积极预防级别已经相当具有挑战性。在这个级别，企业可以分析趋势，实施端到端的事件监控，自动化其IT的较大部分，并且最重要的是，可以预测事件并采取积极措施。这是AIOps可以发挥重要作用的级别。我们将在[*第7章*](B17492_07_ePub_RK.xhtml#_idTextAnchor086)中详细了解这一点，*理解AI对DevOps的影响*。
- en: At level 4, IT delivery is fully defined as services to the business. This is
    the level where the event-driven architecture becomes relevant. Business functions
    are mapped to IT services. In fact, IT services can support business decisions.
    There's a well-defined service catalogue and all the processes are integrated,
    including cost management. The final stage in the maturity model in IT is real-time
    responsiveness to business events and innovations that are part of operations,
    thus adding value to the business. This is continuous operations stage, where
    we loop feedback to the development processes but in real time and in a fully
    automated fashion. Most enterprises will get there for some applications and some
    business functions, but hardly ever for the entire enterprise and all business
    processes.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在四级，IT交付完全被定义为业务服务。在这一层级中，事件驱动架构变得相关。业务功能与IT服务相对应。实际上，IT服务可以支持业务决策。有一个明确定义的服务目录，所有的流程都已经整合，包括成本管理。IT成熟度模型中的最终阶段是对业务事件和创新的实时响应，这些都融入了运营过程中，从而为业务创造价值。这是持续运营阶段，在这一阶段，我们将反馈环路整合到开发流程中，但这是实时且完全自动化的。大多数企业会在某些应用程序和业务功能中达到这一层级，但很少会在整个企业和所有业务流程中达到这一层级。
- en: 'The operations maturity model aligns with the **Capability Maturity Model**
    (**CMM**), which also has five levels. Level 1 is the initial level, where processes
    are poorly controlled and unpredictable. At level 3, which is where most companies
    are at, the processes are clearly defined and well understood, allowing for proactive
    event management. Level 5 is the optimization level, where processes and delivery
    are continuously improved. As we mentioned previously, most enterprises will reach
    this level for certain processes and products, but rarely for the whole enterprise.
    The CMM model looks as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 运营成熟度模型与**能力成熟度模型**（**CMM**）相一致，后者也有五个层级。一级是初始层级，在这一层级中，流程控制差，难以预测。在三级，最常见的企业层级，流程被明确定义并且得到了很好的理解，从而可以进行主动的事件管理。五级是优化层级，在这一层级中，流程和交付会不断改进。正如我们之前提到的，大多数企业对于某些流程和产品会达到这一层级，但整个企业通常很难达到这一层级。CMM模型如下所示：
- en: '![Figure 6.8 – The Capability Maturity Model (CMM)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.8 – 能力成熟度模型（CMM）'
- en: '](img/B17492_06_008.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_06_008.jpg)'
- en: Figure 6.8 – The Capability Maturity Model (CMM)
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8 – 能力成熟度模型（CMM）
- en: 'Level 3 is the focus level: becoming proactive. In the next few chapters, we
    will learn how AI and ML can help us with that.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 三级是关注的层级：变得更加主动。在接下来的几章中，我们将学习人工智能（AI）和机器学习（ML）如何帮助我们实现这一目标。
- en: Summary
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed operations management and how this is changing
    due to digital transformations and the implementation of DevOps. First, we looked
    at the roles and responsibilities of operations and the different operational
    service management processes. We also discussed some trends that will impact operations
    in the near future. The overall conclusion we attained is that the role of ops
    will change, mainly because of digital transformation and the implementation of
    agile and DevOps. To become agile, we need operators to be able to focus on their
    distinctive tasks. We then discussed a demarcation model with product ops and
    platform ops.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了运营管理以及由于数字化转型和DevOps实施而发生的变化。首先，我们看了运营的角色与责任以及不同的运营服务管理流程。我们还讨论了几种即将在不久的将来影响运营的趋势。我们得出的总体结论是，运营的角色将会发生变化，主要是由于数字化转型以及敏捷和DevOps的实施。为了实现敏捷，我们需要运营人员能够专注于他们的独特任务。然后，我们讨论了产品运营和平台运营的划分模型。
- en: 'Next, we learned how the architecture will change to become a more event-driven
    architecture and what the position of ops will be here. Ops will need to have
    a single pane of glass view, overseeing and even predicting events in the full
    chain so that proactive measures can be taken. This is what level 3 describes
    in the operations maturity model: proactive and predictable. AI and ML will help
    in this.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们学习了架构如何变得更加以事件为驱动，以及运营在这一过程中所处的位置。运营需要有一个统一的视图，全面监控甚至预测整个链条中的事件，以便采取主动措施。这就是运营成熟度模型中三级的描述：主动且可预测。人工智能和机器学习将在这方面提供帮助。
- en: In the next chapter, we will discuss the impact of AI in the enterprise and
    IT operations.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论人工智能在企业和IT运营中的影响。
- en: Questions
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Name three components that must be part of the technology architecture.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列举三个必须包含在技术架构中的组件。
- en: Name the four value streams that IT4IT defines for IT delivery.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出IT4IT定义的四个价值流，以支持IT交付。
- en: An important component of the event-driven architecture is the principle of
    contained, independent operating services that communicate with each other using
    APIs. What do we call these services?
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 事件驱动架构的一个重要组成部分是包含的、独立运行的服务，这些服务通过 API 互相通信。我们称这些服务为什么？
- en: On what level in the maturity model would AIOps fit?
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AIOps 在成熟度模型中适合哪个层次？
- en: Further reading
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*The New IT Operating Model for Digital*, by Gartner. Published on https://www.gartner.com/en/documents/3770165/the-new-it-operating-model-for-digital.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*数字化新 IT 操作模型*，由 Gartner 发布。发表在 https://www.gartner.com/en/documents/3770165/the-new-it-operating-model-for-digital。'
- en: '*Designing and Implementing the I&T Operating Model: Components and Interdependencies*,
    by Gartner. Published on [https://www.gartner.com/en/documents/3956725/designing-and-implementing-the-i-t-operating-model-compo](https://www.gartner.com/en/documents/3956725/designing-and-implementing-the-i-t-operating-model-compo).'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*设计与实施 I&T 操作模型：组件与相互依赖性*，由 Gartner 发布。发表在 [https://www.gartner.com/en/documents/3956725/designing-and-implementing-the-i-t-operating-model-compo](https://www.gartner.com/en/documents/3956725/designing-and-implementing-the-i-t-operating-model-compo)。'
- en: 'Blog on IT4IT by Rob Akershoek: [https://www.4me.com/blog/it4it/](https://www.4me.com/blog/it4it/).'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Rob Akershoek 在 IT4IT 博客上的文章: [https://www.4me.com/blog/it4it/](https://www.4me.com/blog/it4it/)。'
- en: '*Solutions Architect''s Handbook*, by Saurabh Shrivastava and Neelanjali Srivastav,
    PacktPub, 2020.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*解决方案架构师手册*，由 Saurabh Shrivastava 和 Neelanjali Srivastav 编著，PacktPub，2020年。'
