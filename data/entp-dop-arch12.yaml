- en: '*Chapter 10*: Making the Final Step to NoOps'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第10章*：迈向NoOps的最终一步'
- en: Is it possible to execute IT operations without hands-on operations? Research
    and advisory companies, such as Gartner and Forrester, foresee an IT future based
    on NoOps. The big idea behind NoOps is that literally everything can be automated.
    It means an even bigger role for AI, and something called **heuristic automation**.
    How can an enterprise move to NoOps, and what is the role of an architect in this
    field? We will discuss this in this chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 是否可以在没有实际操作的情况下执行IT运维？研究和咨询公司，如Gartner和Forrester，预见到基于NoOps的IT未来。NoOps背后的核心理念是，几乎一切都可以自动化。这意味着AI的作用将更为重要，并且有一种叫做**启发式自动化**的技术。企业如何向NoOps转型，架构师在这一领域中的角色是什么？我们将在本章中讨论这些问题。
- en: After completing this chapter, you will be able to explain NoOps as a concept
    and why enterprises should adopt the principles of NoOps. You will learn what
    heuristic automation is and how it's driving the architecture of NoOps. The most
    important lesson that you will learn is that NoOps is not simply about having
    no need for any operations at all.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，你将能够解释NoOps这一概念，并了解为什么企业应采纳NoOps的原则。你将学习什么是启发式自动化，它如何推动NoOps的架构。你将学到的最重要的一课是，NoOps不仅仅是指完全不需要任何运维。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要内容：
- en: Understanding the paradigm shift to NoOps
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解向NoOps的范式转变
- en: Understanding the role of AI in NoOps
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解AI在NoOps中的角色
- en: Creating an architecture for heuristic automation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为启发式自动化创建架构
- en: Defining the roadmap to NoOps
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义NoOps的路线图
- en: Understanding the paradigm shift to NoOps
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解向NoOps的范式转变
- en: 'In the previous chapters, we discussed the introduction of **artificial intelligence**
    (**AI**) and **machine learning** (**ML**) into operations and development. In
    [*Chapter 9*](B17492_09_ePub_RK.xhtml#_idTextAnchor111), *Integrating AIOps in
    DevOps*, we learned how an enterprise can leverage AI and ML in DevOps pipelines.
    The reason to do this is to make a lot of manual tasks obsolete through intelligent
    automation. NoOps takes all of this one step further: automate IT systems completely
    so there''s no need for operators to manually intervene in the systems. How far
    away are we from that paradigm shift? In addition, *is it realistic?* We will
    discuss that in this section.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们讨论了**人工智能**（**AI**）和**机器学习**（**ML**）在运维和开发中的应用。在[*第9章*](B17492_09_ePub_RK.xhtml#_idTextAnchor111)《将AIOps融入DevOps》中，我们学习了企业如何在DevOps流水线中利用AI和ML。这样做的原因是通过智能自动化让大量手动任务变得过时。NoOps将这一点推向了一个更远的层次：完全自动化IT系统，不再需要操作员手动干预系统。我们离这一范式转变还有多远？此外，*这是否现实？*
    我们将在本节中讨论这个问题。
- en: 'To answer the last question: NoOps seems to be more of an ideal than a real
    practice. The discussion around NoOps was initiated through the idea that teams
    could actually automate a lot of processes in development, especially regarding
    the deployment of applications. This started with services being provided as **Software
    as a Service** (**SaaS**) propositions, meaning an enterprise didn''t need to
    worry about maintaining the services anymore. Updates and upgrades in SaaS and
    **Platform as a Service** (**PaaS**) were taken care of by the provider. Getting
    software and maintaining applications became as easy as working with a smartphone:
    at night you put your phone away, the manufacturer of the phone updates your phone,
    and when the phone is started again in the morning, all of the applications still
    work. In reality, for this to happen, a lot of actions must be executed in the
    background. In other words, NoOps might be superficial.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于最后一个问题的回答是：NoOps似乎更像是一种理想，而非现实实践。关于NoOps的讨论始于一个观点：团队实际上可以在开发过程中自动化很多流程，尤其是应用程序的部署。这一想法起源于将服务作为**软件即服务**（**SaaS**）提供，这意味着企业不再需要担心维护这些服务。SaaS和**平台即服务**（**PaaS**）中的更新和升级由提供商负责。获取软件和维护应用程序变得像使用智能手机一样简单：晚上你把手机放到一边，手机制造商更新你的手机，早上重新启动时，所有应用程序仍然可以正常使用。事实上，要实现这一点，很多操作必须在后台执行。换句话说，NoOps可能是表面上的。
- en: However, the idea of NoOps does deserve some credit. It's in line with the principles
    of DevOps and automating as much as possible in the development, deployment, and
    operation of code. According to Deloitte, NoOps was a logical evolution in automating
    IT tasks and shifting activities from operations to development, focusing on business
    outcomes. That's nothing new. DevOps and especially **Site Reliability Engineering**
    (**SRE**) have these as basic principles.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，NoOps 的理念确实值得肯定。它符合 DevOps 的原则，尽可能自动化代码的开发、部署和操作。根据德勤的说法，NoOps 是自动化 IT 任务和将活动从运维转移到开发中的一种逻辑演进，专注于业务成果。这并不是什么新鲜事。DevOps，特别是**站点可靠性工程**（**SRE**），将这些作为基本原则。
- en: To be clear, NoOps is not the same as automated infrastructure provisioning.
    NoOps is about automated management of the full stack – applications, middleware,
    databases, and infrastructure. In terms of infrastructure, the concept of NoOps
    relies on infrastructure components that can be coded and controlled by code.
    Virtual machines might be an option, but these are still not very flexible in
    terms of automation of operations. Containers, and especially serverless solutions,
    are more logical.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要明确的是，NoOps 并不等同于自动化基础设施的配置。NoOps 是关于全栈的自动化管理——包括应用程序、中间件、数据库和基础设施。在基础设施方面，NoOps
    的概念依赖于可以通过代码编写和控制的基础设施组件。虚拟机可能是一个选择，但在操作自动化方面，它们仍然不够灵活。容器，尤其是无服务器解决方案，更具逻辑性。
- en: We can automate coding, provisioning of infrastructure, deployment of APIs,
    and configurations. We can add technology that will detect issues and anomalies
    fast, and maybe even have systems automatically remediate these based on predefined
    policies. We might be able to automate one application completely, but the reality
    is that today's enterprise IT consists of complex ecosystems, within and outside
    the enterprise. This will make it hard, if not impossible, to really have NoOps
    in practice. On the contrary, operations are getting more complex. But then again,
    NoOps is not about getting rid of operations completely.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以自动化编码、基础设施的配置、API 的部署和配置。我们可以加入技术，快速检测问题和异常，甚至可能让系统根据预定义的策略自动进行修复。我们可能能够完全自动化某个应用程序，但现实情况是，今天的企业
    IT 由复杂的生态系统组成，涵盖企业内部和外部。这使得在实践中真正实现 NoOps 变得困难，甚至不可能。相反，运维变得更加复杂。但再说一遍，NoOps 并不是要完全摆脱运维。
- en: NoOps should be perceived as a concept and guidance in leveraging automation,
    saving costs, and speeding up developments, while also keeping systems stable,
    resilient, and unhindered by manual operational actions. NoOps will help architects
    with shift-left principles, injecting AI into operations, and also help in automating
    IT. We will explore shift-left and AI-enabled operations further in the next sections.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: NoOps 应该被视为一种概念和指导思想，旨在利用自动化节省成本、加快开发进程，同时保持系统的稳定性、弹性，并避免手动操作的干扰。NoOps 将帮助架构师实施
    Shift-left 原则，将 AI 融入操作中，并且有助于自动化 IT。我们将在接下来的章节中进一步探讨 Shift-left 和 AI 驱动的操作。
- en: Understanding the role of AI in NoOps
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 AI 在 NoOps 中的作用
- en: In the previous section, we discussed whether NoOps provides a realistic way
    of operating for future enterprises. We've concluded that NoOps should be seen
    as both a concept and a way of thinking to leverage automation for operations.
    It's not about getting rid of operations as a whole – IT environments in enterprises
    have become too complex for that. Still, they have the challenge of using their
    IT talents in the most optimized way.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们讨论了 NoOps 是否为未来企业提供了一种切实可行的运营方式。我们的结论是，NoOps 应该被视为一种概念和思维方式，旨在通过自动化来优化运维。它并不是要完全摆脱运维——企业的
    IT 环境已经过于复杂，无法做到这一点。不过，企业依然面临如何最优化使用 IT 人才的挑战。
- en: IT talent is becoming scarce, since the market demand for skilled and trained
    engineers is increasing at high speed. Because of this scarcity, the costs of
    staff are also increasing. To keep costs down and still be able to work as agile
    as possible, enterprise architects will have to search for other ways to operate
    IT. IT talent can then fully focus on developments.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: IT 人才变得越来越稀缺，因为市场对熟练且经过培训的工程师的需求正在以高速增长。因此，人才的稀缺性也导致了员工成本的增加。为了降低成本，同时尽可能保持敏捷，企业架构师必须寻找其他方式来运营
    IT。这样，IT 人才就可以专注于开发工作。
- en: However, operations will be needed. We need people to look after systems, and
    make sure that these systems are running stably. You can't leave it all to machines.
    For that reason, it's good to narrow the definition of NoOps down a little bit.
    We can define NoOps as the stage where dedicated operators are no longer required
    to manage IT. It would then be a logical step in the evolution of enterprise DevOps,
    where teams operate as one in development, deployment, and operations.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，仍然需要运维人员。我们需要有人来照看系统，并确保这些系统的稳定运行。不能把所有事情都交给机器。因此，将NoOps的定义略微缩小是好的。我们可以将NoOps定义为不再需要专门的运维人员来管理IT的阶段。它将是企业DevOps演进的一个逻辑步骤，在这个阶段，团队在开发、部署和运维中作为一个整体协作。
- en: 'There are two things that will play an important role to get this stage:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 要达到这一阶段，有两个因素将起到重要作用：
- en: '**Adopting shift-left**: In [*Chapter 7*](B17492_07_ePub_RK.xhtml#_idTextAnchor086),
    *Understanding the Impact of AI on DevOps*, we concluded that shift-left is also
    applicable to both deployment and operations in DevOps. With automated templates,
    pre-approved patterns, and processes, we can start testing in an early stage of
    development and deploy consistent, stable code to the next stages (including production).
    It will certainly lead to less work for operations.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**采用左移策略**：[ *第7章*](B17492_07_ePub_RK.xhtml#_idTextAnchor086)，*理解AI对DevOps的影响*中，我们得出结论，左移策略同样适用于DevOps中的部署和运维。通过自动化模板、预批准的模式和流程，我们可以在开发的早期阶段开始测试，并将一致且稳定的代码部署到后续阶段（包括生产环境）。这无疑将减少运维的工作量。'
- en: Operators will typically define how production is monitored, whereas developers
    control this themselves in *sandboxes*, development, and testing environments.
    In NoOps, this is shifted to the very beginning of the whole cycle – the DevOps
    teams decide how code is tested and monitored. The team is end-to-end responsible.
    The distinction between operators and developers becomes obsolete.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 运维人员通常定义如何监控生产环境，而开发人员在*沙盒*、开发和测试环境中自行控制这一过程。在NoOps中，这一职责被移到整个生命周期的开始——DevOps团队决定如何测试和监控代码。团队承担端到端的责任。运维人员和开发人员之间的区别变得不再重要。
- en: '**Artificial intelligence and machine learning**: As we''ve seen with AIOps,
    AI and ML will help in detecting issues quickly, and can even be trained to give
    recommendations or initiate actions such as these:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**人工智能和机器学习**：正如我们在AIOps中看到的，AI和ML将帮助快速检测问题，甚至可以经过训练给出建议或启动如下操作：'
- en: '- **Automated software life cycle management**: AI will help in recognizing
    when software needs to be updated and will take care of the update process, keeping
    the services that run on the software operational and stable. Think of the smartphone
    analogy in the first section. The phone is updated, and when the user switches
    it back on, all functionality will normally be there again. This is enabled by
    the fact that the phone *knows* the dependencies in different apps, along with
    the underlying protocols and code. It uses AI for this.'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **自动化软件生命周期管理**：AI将帮助识别何时需要更新软件，并负责更新过程，保持运行在软件上的服务的稳定性和可操作性。可以参考第一部分中的智能手机类比。当手机进行更新后，用户重新启动时，所有功能通常会恢复正常。这是因为手机*知道*不同应用程序之间的依赖关系，以及底层协议和代码。它利用AI来实现这一点。'
- en: '- **Automated remediation**: AI can trigger automated actions to fix issues
    even before the issue materializes. Predictive maintenance is enabled.'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **自动化修复**：AI可以在问题出现之前就触发自动化操作来修复问题，从而实现预测性维护。'
- en: '- **Auto-healing**: When an unexpected issue occurs, AI will detect it, know
    how to solve it from history or by learning, and eventually apply the fix. The
    process of solving the problem is referred to as auto-healing. Be aware that all
    these actions – life cycle management, remediation, and healing – need to be logged
    so every change is traceable.'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- **自愈**：当出现意外问题时，AI将检测到问题，并根据历史记录或学习的方式知道如何解决问题，最终应用修复。这一解决问题的过程称为自愈。请注意，所有这些操作——生命周期管理、修复和自愈——都需要进行日志记录，以便每个变更都可以追溯。'
- en: Now, we have discussed automation in DevOps, introduced AI in DevOps, and also
    discussed leveraging automation even further in NoOps. The foundation under this
    level of automation is heuristic automation. In the next section, we will study
    architecture for heuristic automation.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经讨论了DevOps中的自动化，介绍了DevOps中的AI，并且还讨论了在NoOps中进一步利用自动化。此级别自动化的基础是启发式自动化。在下一节中，我们将研究启发式自动化的架构。
- en: Creating an architecture for heuristic automation
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建启发式自动化的架构
- en: 'First, let''s get a definition of heuristic: in the literature, it is referred
    to as applying a solution to an issue without the aim of being the optimal solution,
    but sufficient to fix the immediate problem that was discovered. *Trial and error*
    would certainly match this definition. The Hungarian mathematician George Pólya
    used the term in his book, *How to Solve It*, first published in 1945\. He provided
    some practical ways of solving problems.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们定义一下启发式：在文献中，它被指应用一种解决方案来解决问题，目的是解决当前发现的问题，而非达到最优解决方案。*试错法*显然符合这个定义。匈牙利数学家乔治·波利亚在他1945年首次出版的《如何解决问题》一书中使用了这个术语。他提供了一些实际的解题方法。
- en: 'One of his principles is commonly used in architecture applying ML: if you
    don''t have a solution, assume that you have a solution and see what it does.
    Keep the good stuff and analyze the bits that didn''t work well. Try the iterated
    solution again and learn from it. This is the base of heuristic automation. It
    uses heuristic learning that can be leveraged through AI that is able to recognize
    and learn from patterns. AI will use algorithms and automation – it constantly
    learns and adapts the analytics, up until the point where the solution is optimized.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 他的一个原则常用于应用机器学习（ML）的架构中：如果没有解决方案，可以假设自己有一个解决方案，然后看看它的效果。保留有效部分，分析不太有效的部分。再试一次迭代的解决方案，并从中学习。这是启发式自动化的基础。它使用启发式学习，可以通过能够识别和学习模式的人工智能来实现。人工智能将使用算法和自动化——它不断学习并调整分析，直到解决方案得到优化。
- en: 'First, we will need to understand the principle of learning. AI and ML in automation
    typically use deduction. This is shown in the following figure. There are more
    learning principles, such as induction and abduction, but these do not really
    add value to the goal of automation:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要理解学习原理。自动化中的人工智能和机器学习通常使用演绎推理。如下图所示。还有更多的学习原理，如归纳和溯因，但这些对自动化的目标没有实际帮助：
- en: '![Figure 10.1 – Principle of deduction in ML'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.1 – ML 中的演绎原理'
- en: '](img/B17492_10_001.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_10_001.jpg)'
- en: Figure 10.1 – Principle of deduction in ML
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1 — ML 中的演绎原理
- en: With deduction, the system will analyze an event by observing and comparing
    it with previous experiences, examples, and common theories. Based on that analysis,
    it will reach a conclusion. A rule base will tell the system what to do next.
    Obviously, this rule base is dynamic, since the system will add things it has
    learned to the rule base.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 通过演绎，系统将通过观察事件并与先前的经验、示例和常见理论进行比较来分析事件。基于该分析，系统将得出结论。规则库将告诉系统下一步该做什么。显然，这个规则库是动态的，因为系统会将其学习到的内容添加到规则库中。
- en: 'With that in mind, we can define the components for heuristic automation:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 记住这一点，我们可以定义启发式自动化的组件：
- en: '**Event sources**: Aggregating data from events throughout systems and system
    components.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件源**：从系统及其组件的事件中聚合数据。'
- en: '**Data on patterns and correlations**: Repository with known patterns and correlations
    between systems.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模式和关联数据**：包含已知模式和系统间关联的存储库。'
- en: '**Analytics engine**: Algorithms and rules enabling analytics and the prediction
    of outcomes.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分析引擎**：支持分析和预测结果的算法和规则。'
- en: '**Analytics processes**: The processes that tell the system what to do if anomalies
    are detected, and what solutions should be applied from the rule base.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分析过程**：告知系统在检测到异常时应做什么，以及应从规则库中应用哪些解决方案。'
- en: '**Dynamic rule base**: Possible solutions based on induction patterns. This
    is a dynamic process, since solutions will continuously be improved. Based on
    the findings, the solutions are updated.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态规则库**：基于归纳模式的可能解决方案。这是一个动态过程，因为解决方案会不断改进。根据发现，解决方案会被更新。'
- en: 'The logical architecture for heuristic automation is shown in the following
    figure:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 启发式自动化的逻辑架构如下图所示：
- en: '![Figure 10.2 – Logical architecture for heuristic automation'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.2 – 启发式自动化的逻辑架构'
- en: '](img/B17492_10_002.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_10_002.jpg)'
- en: Figure 10.2 – Logical architecture for heuristic automation
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2 – 启发式自动化的逻辑架构
- en: 'Heuristic automation will enable the enterprise to do the following:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 启发式自动化将使企业能够做到以下几点：
- en: Identify and solve issues without human intervention through the automated analysis
    of complex systems.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过自动分析复杂系统，识别并解决问题，无需人工干预。
- en: Recognize, identify, and understand relationships between systems and predict
    the impact of issues.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别、识别并理解系统之间的关系，预测问题的影响。
- en: Solve issues through ML using various data sources and real-time analytics.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过机器学习使用各种数据源和实时分析解决问题。
- en: We stress once more that NoOps and heuristic automation by no means intends
    to replace operators. It will help them in solving issues faster, as well as helping
    businesses with more stable and resilient systems.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次强调，NoOps 和启发式自动化绝不是为了取代操作员。它将帮助他们更快地解决问题，同时帮助企业建立更稳定、更具弹性的系统。
- en: Defining the roadmap to NoOps
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义 NoOps 的路线图
- en: NoOps is not a leap of faith. As with DevOps and AIOps, any next step requires
    a plan and a roadmap. Using the principles of heuristic automation and AIOps,
    we can leverage automation for intelligent automation, collaborating with cloud-native
    automation, and automated application deployment in CI/CD pipelines.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: NoOps 不是一场盲目的信任跳跃。与 DevOps 和 AIOps 一样，任何下一步都需要一个计划和路线图。利用启发式自动化和 AIOps 的原则，我们可以利用自动化实现智能自动化，与云原生自动化协作，并在
    CI/CD 流水线中实现自动化应用部署。
- en: 'The following figure shows how NoOps consists of three major components. These
    three components are the roadmap to get to a level of automation where dedicated
    operations are no longer required. DevOps teams are end-to-end responsible for
    the development, deployment, running, and maintenance of the code, supported by
    fully automated processes and AI:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了 NoOps 由三个主要组成部分构成。这三个部分是达到自动化水平的路线图，在这个水平上，专门的运营不再需要。DevOps 团队对代码的开发、部署、运行和维护承担端到端的责任，得到完全自动化的流程和人工智能的支持：
- en: '![Figure 10.3 – Components of NoOps'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.3 – NoOps 的组成部分'
- en: '](img/B17492_10_003.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_10_003.jpg)'
- en: Figure 10.3 – Components of NoOps
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3 – NoOps 的组成部分
- en: 'The end state is predictive automation using predictive analytics that analyzes
    current data to eventually make predictions for the future. It includes the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最终状态是使用预测分析的自动化，通过分析当前数据来最终做出未来的预测。它包括以下内容：
- en: Scaling for future needs, for instance by analyzing usage of software, predicting
    future use, and actioning this in scaling the systems
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为未来的需求扩展，例如通过分析软件使用情况，预测未来的使用，并在系统扩展时采取相应行动
- en: Foreseeing business trends and preparing systems for this, including preparing
    code by collecting and analyzing requirements
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预见业务趋势并为此准备系统，包括通过收集和分析需求来准备代码
- en: Code suggestions for improving code, fulfilling predicted future needs
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进代码的建议，满足预测的未来需求
- en: 'A very simplified roadmap to NoOps could look like the following figure:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常简化的 NoOps 路线图可能如下图所示：
- en: '![Figure 10.4 – Simplified representation of NoOps roadmap'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.4 – NoOps 路线图的简化表示'
- en: '](img/B17492_10_004.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_10_004.jpg)'
- en: Figure 10.4 – Simplified representation of NoOps roadmap
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.4 – NoOps 路线图的简化表示
- en: Adopting NoOps requires both the right mindset and full support from the enterprise's
    management. Management will need to learn to trust automation. Only when this
    trust is established will they be willing to invest in the right tools. This will
    take time, and that timeline needs to be realistic, as reflected in the roadmap.
    Lastly, be prepared for pushback and setbacks. NoOps and full automation are more
    about adoption than technology, and adoption is a process.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 采用 NoOps 需要正确的思维方式和企业管理层的全力支持。管理层需要学会信任自动化。只有当这种信任建立起来时，他们才会愿意投资合适的工具。这将需要时间，这个时间表需要是现实的，正如路线图所反映的那样。最后，要准备面对反对和挫折。NoOps
    和完全自动化更关乎采用而非技术，采用是一个过程。
- en: 'Is NoOps a leap of faith? Could there be automation without human intervention?
    Think of this: already in 2018, the Open Road project has been defined, studying
    the possibilities for computers to design their own new generation of chips. In
    June 2021, the science magazine Nature published an article stating that computers
    no longer need humans to design new chips. Using AI, computers can design chips
    in a matter of hours, whereas humans would need months for the same outcome. The
    foundation technology that was used for this was ML, and the use of cloud-native
    analytics tools in Google Cloud to run parallel sessions and achieve predictability
    in the outcomes of the design.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: NoOps 是一场盲目的信任跳跃吗？是否可以实现没有人工干预的自动化？想一想：早在 2018 年，Open Road 项目就已被定义，研究计算机设计自己新一代芯片的可能性。在
    2021 年 6 月，科学杂志《自然》发表了一篇文章，指出计算机不再需要人类来设计新芯片。通过使用人工智能，计算机可以在数小时内设计芯片，而人类则需要几个月才能达到相同的结果。为此所使用的基础技术是机器学习，以及在
    Google Cloud 中使用云原生分析工具运行并行会话，从而实现设计结果的可预测性。
- en: In this part of the book, we extensively discussed the approach for DevOps,
    SRE, and AIOps. All of these methodologies leverage automation in development
    and operations, to the point that human intervention might become obsolete. The
    subsequent question, then – is this safe? Can we really leave IT to automation
    and AI? How secure will our systems then be? We need to map our DevOps strategy
    to security standards, including industry security frameworks and enterprise proprietary
    security policies. These need to be embedded in DevOps. This is the domain of
    DevSecOps. In the third part of this book, we will discuss this further.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的这一部分，我们深入讨论了 DevOps、SRE 和 AIOps 的方法论。这些方法论都在开发和运营中大量使用自动化，甚至到了人类干预可能变得过时的地步。那么，随之而来的问题是——这安全吗？我们真的可以把
    IT 留给自动化和 AI 吗？我们的系统安全性如何保障？我们需要将 DevOps 战略与安全标准对接，包括行业安全框架和企业专有的安全政策。这些都需要嵌入到
    DevOps 中。这就是 DevSecOps 的领域。在本书的第三部分，我们将进一步讨论这个问题。
- en: Summary
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed the concept of NoOps – no operations. We discovered
    that the term might be misleading, since NoOps doesn't mean that the enterprise
    will no longer need operations at all. NoOps is a concept that leverages automation
    to its maximum potential. By automating development, deployment, and operations,
    scarce IT talent can focus on new features, since NoOps will help them by identifying
    and solving issues in IT systems fast. We've learned that NoOps (like AIOps) uses
    AI and ML. But NoOps also means that enterprises will need to embrace the shift-left
    mentality.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了 NoOps 的概念——无操作。我们发现这个术语可能具有误导性，因为 NoOps 并不意味着企业将完全不再需要运营。NoOps 是一个最大化自动化潜力的概念。通过自动化开发、部署和运营，稀缺的
    IT 人才可以专注于新功能，因为 NoOps 会通过快速识别和解决 IT 系统中的问题来帮助他们。我们了解到，NoOps（像 AIOps 一样）使用了 AI
    和 ML。但 NoOps 还意味着企业需要接受“向左迁移”的思维方式。
- en: 'We''ve also learned that NoOps requires a specific type of architecture for
    heuristic automation: applying iterative solutions, learning from these solutions,
    and continuously improving them. We also discussed the different components of
    heuristic automation. In the final section, we explored a possible roadmap from
    DevOps to NoOps. We concluded that we already have the technology available, but
    that enterprises will need to adopt it to really leverage full automation and,
    with that, the concept of NoOps.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还了解到，NoOps 需要一种特定类型的架构来支持启发式自动化：应用迭代解决方案，从这些解决方案中学习，并持续改进它们。我们还讨论了启发式自动化的不同组成部分。在最后一部分，我们探讨了从
    DevOps 到 NoOps 的可能路线图。我们得出结论，虽然我们已经具备了可用的技术，但企业需要采纳这些技术，才能真正实现全面自动化，进而实现 NoOps
    的概念。
- en: In the next part of this book, we will examine an important topic related to
    enterprise DevOps – security. We will learn how to integrate security with DevOps
    in DevSecOps.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的下一部分，我们将探讨一个与企业 DevOps 相关的重要话题——安全性。我们将学习如何将安全性与 DevOps 融合到 DevSecOps 中。
- en: Questions
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: A system detects an unexpected issue, knows how to solve it from history or
    by learning, and eventually applies the fix automatically. What do we call this
    type of action?
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个系统检测到一个意外问题，能够通过历史记录或学习知道如何解决它，并最终自动应用修复措施。我们如何称呼这种行为？
- en: What type of learning is typically used by AI-driven systems to automate remediating
    actions?
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AI 驱动的系统通常使用什么类型的学习来自动化修复操作？
- en: 'True or false: predictive automation is applied to scaling that predicts the
    future usage of systems.'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 判断正误：预测性自动化用于预测系统未来的使用情况以进行扩展。
- en: Further reading
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'Blog about NoOps on CIO.com by Mary K. Pratt: [https://www.cio.com/article/3407714/what-is-noops-the-quest-for-fully-automated-it-operations.html](https://www.cio.com/article/3407714/what-is-noops-the-quest-for-fully-automated-it-operations.html
    )'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 NoOps 的博客，发表于 CIO.com，由 Mary K. Pratt 撰写：[https://www.cio.com/article/3407714/what-is-noops-the-quest-for-fully-automated-it-operations.html](https://www.cio.com/article/3407714/what-is-noops-the-quest-for-fully-automated-it-operations.html)
- en: 'Blog about heuristic automation of infrastructure by Ramkumar Balasubramanian:
    [https://www.linkedin.com/pulse/heuristic-automation-infrastructure-ramkumar-balasubramanian/](https://www.linkedin.com/pulse/heuristic-automation-infrastructure-ramkumar-balasubramanian/)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于基础设施启发式自动化的博客，由 Ramkumar Balasubramanian 撰写：[https://www.linkedin.com/pulse/heuristic-automation-infrastructure-ramkumar-balasubramanian/](https://www.linkedin.com/pulse/heuristic-automation-infrastructure-ramkumar-balasubramanian/)
