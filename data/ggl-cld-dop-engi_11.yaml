- en: '*Chapter 9*: Securing the Cluster Using GKE Security Constructs'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第9章*：使用GKE安全构造保护集群'
- en: Kubernetes, or K8s, is an open source container orchestration system that runs
    containerized applications but requires significant effort to set up and maintain.
    **Google Kubernetes Engine** (**GKE**) is an enhanced version of K8s that is managed
    in nature, abstracts the master plane components from the user, provides the ability
    to auto-upgrade, and supports features such as DNS, logging, and monitoring dashboards
    as built-ins rather than maintaining them as external plugins. Kubernetes has
    a lot of critical concepts, jargon, and objects. The last two chapters ([*Chapter
    7*](B15587_07_Final_ASB_ePub.xhtml#_idTextAnchor154), *Understanding Kubernetes
    Essentials to Deploy Containerized Applications*, and [*Chapter 8*](B15587_08_Final_ASB_TD_ePub.xhtml#_idTextAnchor182),
    *Understanding GKE Essentials to Deploy Containerized Applications*) focused on
    native Kubernetes features such as cluster anatomy, elaborated on key Kubernetes
    objects, and discussed how applications are scheduled on a cluster. In addition,
    the focus was extended to learning about specific GKE features such as node pools,
    cluster configurations, options to auto scale workloads, and understand how GKE
    interacts with other GCP services.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes（或K8s）是一个开源的容器编排系统，用于运行容器化应用程序，但它需要大量的工作来设置和维护。**Google Kubernetes
    Engine**（**GKE**）是K8s的增强版本，具有托管性质，将主控组件从用户中抽象出来，提供自动升级功能，并支持如DNS、日志记录和监控仪表板等内建功能，而不是将这些功能作为外部插件进行维护。Kubernetes包含许多关键概念、术语和对象。最后两章（[*第7章*](B15587_07_Final_ASB_ePub.xhtml#_idTextAnchor154)，*理解Kubernetes基本知识以部署容器化应用*，和
    [*第8章*](B15587_08_Final_ASB_TD_ePub.xhtml#_idTextAnchor182)，*理解GKE基本知识以部署容器化应用*）专注于原生Kubernetes的功能，如集群结构，详细讲解了Kubernetes的关键对象，并讨论了应用程序如何在集群中调度。此外，还扩展了对特定GKE功能的学习，例如节点池、集群配置、自动扩展工作负载的选项，并理解GKE如何与其他GCP服务交互。
- en: This chapter specifically focuses on understanding the basic security constructs
    in Kubernetes, their application, and then specific GKE security features that
    are fundamental to hardening a cluster's security. The key here is to secure the
    applications running inside the cluster using GKE-specific features.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章特别专注于理解Kubernetes中的基本安全构造及其应用，然后是GKE中的特定安全功能，这些功能对于加固集群的安全性至关重要。这里的关键是使用GKE特定的功能来保护运行在集群中的应用程序。
- en: 'This chapter will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: '**Essential security patterns in Kubernetes**: This section deep dives into
    fundamental security constructs in native Kubernetes, such as authentication,
    authorization, securing the control plane, and Pod security. We will also look
    at each of the security constructs with respect to their GKE implementations.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes中的基本安全模式**：本节深入探讨了原生Kubernetes中的基本安全构造，如身份验证、授权、控制平面安全性和Pod安全性。我们还将查看每个安全构造及其在GKE中的实现。'
- en: '**Hardening cluster security**: This section deep dives into GKE-specific security
    features that provide options for securing applications running inside the GKE
    cluster. This includes features such as private cluster, binary authorization,
    container-optimized OS, and more.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加固集群安全性**：本节深入探讨了GKE特定的安全功能，这些功能为在GKE集群中运行的应用程序提供了安全选项。包括私有集群、二进制授权、容器优化操作系统等功能。'
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'There are two main technical requirements for this chapter:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章有两个主要的技术要求：
- en: 'A valid **Google Cloud Platform** (**GCP**) account to go hands-on with GCP
    services: [https://cloud.google.com/free](https://cloud.google.com/free)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有效的**Google Cloud Platform**（**GCP**）账户，以便实际操作GCP服务：[https://cloud.google.com/free](https://cloud.google.com/free)
- en: 'Install Google Cloud SDK: [https://cloud.google.com/sdk/docs/quickstart](https://cloud.google.com/sdk/docs/quickstart)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Google Cloud SDK：[https://cloud.google.com/sdk/docs/quickstart](https://cloud.google.com/sdk/docs/quickstart)
- en: Essential security patterns in Kubernetes
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubernetes中的基本安全模式
- en: A Kubernetes cluster can run multiple types of workloads. This includes stateful
    applications, stateless applications, jobs, and DaemonSets. However, it is critical
    to secure these workloads from potential security attacks. Native Kubernetes provides
    some essential security constructs that focus on the fundamentals, including a
    request being sent to the cluster and how the request is authenticated and authorized.
    Additionally, it is important to understand how the master plane components are
    secured and how the pods running the applications can also be secured. We will
    cover these from a native Kubernetes standpoint, but their implementation in GKE
    will also be discussed. The first such security construct we will deep dive into
    is authentication.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Kubernetes 集群可以运行多种类型的工作负载。这包括有状态应用程序、无状态应用程序、作业和 DaemonSets。然而，保护这些工作负载免受潜在安全攻击是至关重要的。原生
    Kubernetes 提供了一些基本的安全构建模块，专注于基础内容，包括请求发送到集群的方式以及如何对请求进行身份验证和授权。此外，了解如何确保主控平面组件的安全，以及如何确保运行应用程序的
    Pod 也能得到保护是非常重要的。我们将从原生 Kubernetes 的角度探讨这些内容，但在 GKE 中的实现也会进行讨论。我们将深入探讨的第一个安全构建模块是身份验证。
- en: Authentication
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 身份验证
- en: '**Authentication** is the process of determining the identity of the user.
    It essentially confirms that the user is who they say they are and eventually
    provides access to eligible resources once authentication is successful.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**身份验证** 是确定用户身份的过程。它本质上确认用户是否如其所说的那样，并且在身份验证成功后，最终会提供对合格资源的访问权限。'
- en: 'Kubernetes supports two categories of authentication or user:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 支持两种类别的身份验证或用户：
- en: User accounts
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户账户
- en: Kubernetes service accounts
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 服务账户
- en: Let's look at these in more detail.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看一下这些。
- en: User accounts
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用户账户
- en: 'By default, Kubernetes does not have any objects that can support normal user
    accounts. Hence, these can never be created through an API call. Normal or regular
    users in Kubernetes are created in any of the following ways:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Kubernetes 没有任何支持普通用户账户的对象。因此，这些账户不能通过 API 调用创建。在 Kubernetes 中，普通或常规用户可以通过以下方式创建：
- en: By an admin distributing private keys
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由管理员分发私钥
- en: With a file that contains a list of usernames and their associated passwords
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用包含用户名及其关联密码列表的文件
- en: Through external identity service providers
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过外部身份服务提供商
- en: In the case of GKE, normal **user accounts** can be provisioned by Cloud IAM
    users. These user accounts are referred to as members. Members can also be defined
    as part of a G Suite domain or a Cloud Identity domain. It is also possible to
    add members or users to Cloud IAM by linking to an existing active directory through
    Google Cloud Directory Sync. In addition to Cloud IAM users, GCP service accounts
    are also considered members, like users. These are different from Kubernetes service
    accounts.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GKE 的情况下，普通的 **用户账户** 可以由 Cloud IAM 用户提供。这些用户账户被称为成员。成员也可以作为 G Suite 域或 Cloud
    Identity 域的一部分进行定义。也可以通过 Google Cloud Directory Sync 将成员或用户链接到现有的活动目录，从而将其添加到
    Cloud IAM。除了 Cloud IAM 用户外，GCP 服务账户也被视为成员，类似于用户。这些与 Kubernetes 服务账户不同。
- en: '**GCP service accounts** are managed by Google Cloud IAM and specifically used
    if GCP resources need to have identities that are tied to an application or a
    virtual machine, instead of a human being. In contrast, Kubernetes service accounts
    provide an identity to a process running inside a pod and provides access to the
    cluster.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**GCP 服务账户** 由 Google Cloud IAM 管理，专门用于当 GCP 资源需要与应用程序或虚拟机绑定身份，而非人类时。与此不同，Kubernetes
    服务账户为运行在 Pod 内的进程提供身份，并提供对集群的访问权限。'
- en: Kubernetes service accounts
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Kubernetes 服务账户
- en: '**Kubernetes service accounts** are users that are managed by the Kubernetes
    API. This means that unlike regular user accounts, the service accounts can be
    created and managed through API calls. In fact, every namespace in Kubernetes
    has a default Kubernetes service account. These are automatically created by the
    API server. The *service account admission controller* associates the created
    service accounts with the running pods. In fact, service accounts are stored as
    secrets and are mounted onto pods when they''re created. These secrets are used
    by processes running inside the pod for in-cluster access to the API server.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kubernetes 服务账户**是由 Kubernetes API 管理的用户。这意味着与常规用户账户不同，服务账户可以通过 API 调用进行创建和管理。事实上，Kubernetes
    中的每个命名空间都有一个默认的 Kubernetes 服务账户。这些账户由 API 服务器自动创建。*服务账户接纳控制器*将创建的服务账户与运行的 Pod
    关联。实际上，服务账户作为秘密存储，并在 Pod 创建时挂载到 Pod 上。这些秘密由运行在 Pod 内部的过程使用，用于访问集群内的 API 服务器。'
- en: 'In addition, Kubernetes service accounts are used to create identities for
    long-running jobs where there is a need to talk to the Kubernetes API, such as
    running a Jenkins server. You can use the following CLI command to create a Kubernetes
    service account:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Kubernetes 服务账户用于为需要与 Kubernetes API 通信的长期运行的任务创建身份，例如运行 Jenkins 服务器。您可以使用以下
    CLI 命令创建 Kubernetes 服务账户：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding command creates a `serviceaccount` object, generates a token
    for the service account, and creates a secret object to store the token. The secret
    bearing the token can be retrieved using the following CLI command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令会创建一个 `serviceaccount` 对象，为服务账户生成一个令牌，并创建一个秘密对象来存储该令牌。可以使用以下 CLI 命令检索包含令牌的秘密：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding command will result in the following output:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将产生以下输出：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The secret that's displayed under the secrets section will contain the public
    **Certificate Authority** (**CA** – an entity that issues digital certificates)
    of the API server, the specific namespace, and a signed **JSON Web Token** (**JWT**).
    The signed JWT can be used as the bearer account to authenticate the provided
    service account. This service account can eventually be used either for in-cluster
    communication or even to authenticate from outside the cluster, as in the case
    of a Jenkins server.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在秘密部分显示的秘密将包含 API 服务器的公共 **证书颁发机构**（**CA** – 一个颁发数字证书的实体）、特定的命名空间和一个签名的 **JSON
    Web 令牌**（**JWT**）。该签名的 JWT 可以用作持有账户来验证提供的服务账户。这个服务账户最终可以用于集群内通信，甚至用于从集群外部进行身份验证，例如在
    Jenkins 服务器的情况下。
- en: 'Every request to Kubernetes needs to be authenticated before it can serve requests.
    The incoming request is handled by the `kube-api` server by listening on port
    `443` using HTTPS. Authentication can be done in various ways. GKE supports the
    following authentication methods:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 每个对 Kubernetes 的请求在被处理之前需要经过身份验证。传入请求由 `kube-api` 服务器处理，它通过监听端口 `443` 并使用 HTTPS
    协议进行身份验证。身份验证可以通过多种方式完成。GKE 支持以下身份验证方法：
- en: OpenID Connect tokens
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenID Connect 令牌
- en: x509 client certs
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: x509 客户端证书
- en: Basic authentication using static passwords
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用静态密码的基本身份验证
- en: '**OpenID Connect** is a layer on top of the OAuth 2.0 protocol and allows clients
    to verify the identity of an end user by querying the authorization server. **x509
    client certificates and static passwords** present a wider surface of attack than
    OpenID. In GKE, both x509 and static password authentication is disabled by default,
    specifically in clusters created with Kubernetes 1.12 and later. This helps improve
    the default security posture as the area of impact in the event of an attack is
    significantly reduced or lowered.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**OpenID Connect** 是建立在 OAuth 2.0 协议之上的一层，它允许客户端通过查询授权服务器来验证最终用户的身份。**x509
    客户端证书和静态密码**相比 OpenID，呈现了更大的攻击面。在 GKE 中，默认情况下禁用了 x509 和静态密码身份验证，特别是在 Kubernetes
    1.12 及更高版本创建的集群中。这有助于提高默认安全态势，因为在发生攻击时，影响的范围大大减少或降低。'
- en: This completes this topic on authentication in Kubernetes. The next topic will
    cover authorization in Kubernetes.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了关于 Kubernetes 中身份验证的主题。下一个主题将介绍 Kubernetes 中的授权。
- en: Authorization
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 授权
- en: '**Authorization** is the process of determining whether a user has permission
    to access a specific resource or perform a specific function. In Kubernetes, a
    user must be authenticated or logged in and authorized to access or use specific
    resources. It''s generally recommended to enforce the principle of least privilege
    as a security best practice, as this ensures that a user only has the required
    level of access to the resource based on the access requirements.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**授权**是确定用户是否有权限访问特定资源或执行特定功能的过程。在 Kubernetes 中，用户必须先进行身份验证或登录，并获得授权才能访问或使用特定资源。通常建议作为安全最佳实践，执行最小权限原则，因为这确保用户仅根据访问要求拥有访问资源所需的最低权限。'
- en: 'Specific to GKE, a user authenticating via Cloud Identity can be authorized
    using two approaches. In fact, GKE recommends using both approaches to authorize
    access to a specific resource:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 特定于 GKE，用户通过 Cloud Identity 进行身份验证后，可以使用两种方法进行授权。实际上，GKE 推荐同时使用这两种方法来授权访问特定资源：
- en: Cloud **Identity and Access Management** (**IAM**)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cloud **身份与访问管理** (**IAM**)
- en: Kubernetes **Role-Based Access Control** (**RBAC**)
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes **基于角色的访问控制** (**RBAC**)
- en: '**Cloud IAM** is the access control system for managing GCP resources. Google
    Account, service account, and Google Group are entities that have an identity
    in Cloud IAM. Cloud IAM allows users to perform operations at the project level
    (such as listing all GKE clusters in the project) or at the cluster level (such
    as viewing the cluster) but specifically outside the cluster. This includes adding
    specific GKE security configuration options to an existing cluster or even to
    a new cluster. However, **Kubernetes RBAC** provides access to inside the cluster,
    even specifically at the namespace level. RBAC allows you to fine-tune rules to
    provide granular access to resources within the cluster.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**Cloud IAM** 是用于管理 GCP 资源的访问控制系统。Google 账户、服务账户和 Google 群组是 Cloud IAM 中具有身份的实体。Cloud
    IAM 允许用户在项目级别（例如列出项目中的所有 GKE 集群）或集群级别（例如查看集群）执行操作，但主要是在集群外部进行操作。这包括向现有集群或新集群添加特定的
    GKE 安全配置选项。然而，**Kubernetes RBAC** 提供了对集群内部的访问，甚至可以细化到命名空间级别。RBAC 允许您微调规则，以便为集群内的资源提供精细化的访问控制。'
- en: To summarize, Cloud IAM defines who can view or change the configuration of
    a GKE cluster, while Kubernetes RBAC defines who can view or change Kubernetes
    objects inside the specific GKE cluster. GKE integrates Cloud IAM and Kubernetes
    RBAC to authorize users to perform actions on resources if they have the required
    permissions. Now, let's look at both authorization methods, starting with GKE
    authorization via Cloud IAM.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，Cloud IAM 定义了谁可以查看或更改 GKE 集群的配置，而 Kubernetes RBAC 定义了谁可以查看或更改特定 GKE 集群内的
    Kubernetes 对象。GKE 将 Cloud IAM 和 Kubernetes RBAC 集成在一起，根据用户是否拥有必要的权限来授权用户在资源上执行操作。现在，让我们从通过
    Cloud IAM 授权 GKE 开始，了解这两种授权方法。
- en: GKE authorization via Cloud IAM
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 Cloud IAM 授权 GKE
- en: 'There are three main elements that comprise Cloud IAM access controls. They
    are as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Cloud IAM 访问控制由三个主要元素组成，具体如下：
- en: '**Who**: This refers to authentication; specifically, the identity of the member
    making the request.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**谁**：指的是身份验证；具体来说，是发出请求的成员的身份。'
- en: '**What**: This refers to authorization; specifically, the set of permissions
    that are required to authorize the request. Permissions cannot be directly assigned
    to members; instead, a set of permissions comprises a role that is assigned to
    members.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**什么**：指的是授权；具体来说，是授权请求所需的权限集。权限不能直接分配给成员；而是通过一组权限组成角色，然后将角色分配给成员。'
- en: '**Which**: This refers to the resources that the request is authenticated and
    authorized to access. In the case of GKE, this refers to GKE resources such as
    the clusters or objects inside the cluster.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**哪个**：指的是请求已通过身份验证和授权可以访问的资源。在 GKE 中，这指的是 GKE 资源，如集群或集群内部的对象。'
- en: 'GKE provides several predefined Cloud IAM roles that provide granular access
    to Kubernetes engine resources. The following table summarizes the critical pre-defined
    IAM roles required to authorize or perform actions on GKE:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: GKE 提供了多个预定义的 Cloud IAM 角色，这些角色为 Kubernetes 引擎资源提供细粒度访问权限。下表总结了授权或执行 GKE 操作所需的关键预定义
    IAM 角色：
- en: '![](img/B15587_09_Table_9.1.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15587_09_Table_9.1.jpg)'
- en: You can always use custom roles with the minimum required set of permissions.
    This is specifically true in situations where the GKE pre-defined roles are too
    permissive or do not fit the use case at hand to meet the principle of least privilege.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你始终可以使用自定义角色并指定最小所需的权限集。这在 GKE 预定义角色权限过于宽松或不适合当前用例时尤为重要，以确保符合最小权限原则。
- en: Next, we will look at Kubernetes RBAC.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将了解 Kubernetes RBAC。
- en: Kubernetes RBAC
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Kubernetes RBAC
- en: '**Kubernetes RBAC** is an authorization mechanism that can limit access to
    specific resources based on roles that have been assigned to individual users.
    RBAC is a native Kubernetes security feature that provides options to manage user
    account permissions. Kubernetes RBAC can be used as an added supplement to Cloud
    IAM. If Cloud IAM can define roles to operate on clusters and API objects within
    the cluster, then RBAC can be used to define granular access to specific API objects
    inside the cluster.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kubernetes RBAC** 是一种授权机制，可以基于分配给个别用户的角色限制对特定资源的访问。RBAC 是 Kubernetes 的本地安全功能，提供了管理用户帐户权限的选项。Kubernetes
    RBAC 可以作为 Cloud IAM 的补充。如果 Cloud IAM 可以定义操作集群及集群内 API 对象的角色，则可以使用 RBAC 来定义对集群内特定
    API 对象的精细访问权限。'
- en: 'There are three main elements to Kubernetes RBAC. These are as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes RBAC 主要有三个元素，具体如下：
- en: '**Subjects**: This refers to a set of users or processes (including Kubernetes
    service accounts) that can make requests to the Kubernetes API.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主体**：指一组可以向 Kubernetes API 发出请求的用户或流程（包括 Kubernetes 服务帐户）。'
- en: '**Resources**: This refers to a set of Kubernetes API objects, such as Pod,
    Deployment, Service, and so on.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源**：指一组 Kubernetes API 对象，例如 Pod、Deployment、Service 等。'
- en: '**Verbs**: This refers to a set of operations that can be performed on resources
    such as get, list, create, watch, describe, and so on.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作符**：指可以对资源执行的一组操作，例如获取（get）、列出（list）、创建（create）、观察（watch）、描述（describe）等。'
- en: 'The preceding elements are connected by two RBAC API objects:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 上述元素通过两个 RBAC API 对象连接：
- en: '**Roles**: Connects API resources and verbs'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**角色**：连接 API 资源和操作符'
- en: '**RoleBindings**: Connects Roles to subjects'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RoleBindings**：将角色与主体连接'
- en: Roles and RoleBindings can be applied at either the cluster level or at the
    namespace level. These will be discussed in the upcoming subsections, starting
    with *Roles*.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 角色和 RoleBindings 可以应用于集群级别或命名空间级别。接下来的子章节将讨论这些内容，首先是 *角色*。
- en: Roles
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 角色
- en: '**Roles** connect API resources and verbs. There are two types of roles in
    RBAC. RBAC Roles are defined at the namespace level, while RBAC ClusterRole are
    defined at the cluster level. We''ll look at these in the following sub-sections,
    starting with RBAC Roles.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**角色** 连接 API 资源和操作符（verbs）。RBAC 中有两种类型的角色。RBAC 角色在命名空间级别定义，而 RBAC ClusterRole
    在集群级别定义。我们将在接下来的子章节中详细介绍这些内容，首先从 RBAC 角色开始。'
- en: RBAC Roles
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: RBAC 角色
- en: 'The following is an RBAC Role that''s been defined for a specific namespace:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为特定命名空间定义的 RBAC 角色：
- en: '[PRE3]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The definition represents a role of `viewer` that connects the resource pod
    with specific verbs, `get` and `list`, in the `production` namespace. Only one
    namespace can be defined per role. For core groups, the `apiGroups` section is
    optional. However, `apiGroups` should be specified for groups other than core
    groups. In addition, it is also possible to define a granular role where a specific
    resource name is also specified.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 该定义表示一个 `viewer` 角色，该角色将资源 pod 与特定操作符（`get` 和 `list`）连接，在 `production` 命名空间中定义。每个角色只能定义一个命名空间。对于核心组，`apiGroups`
    部分是可选的。但是，`apiGroups` 应该为非核心组指定。此外，还可以定义一个更精细的角色，其中还会指定特定的资源名称。
- en: 'Multiple rules can be added to a role. Rules are additive in nature. An RBAC
    Role doesn''t support deny rules. The following is an extension of the earlier
    RBAC Role, which now includes multiple rules and specifies a resource name:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 可以向角色添加多个规则。规则是累加的。RBAC 角色不支持拒绝规则。以下是对先前 RBAC 角色的扩展，现在包括多个规则并指定资源名称：
- en: '[PRE4]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding specification, the viewer RBAC Role can now perform `get` and
    `list` actions on *Pods* and `ConfigMap`. However, the operations on `ConfigMap`
    are strictly restricted to a specific `ConfigMap` named `prodEnvironmentVariables`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述规范中，viewer RBAC 角色现在可以对 *Pods* 和 `ConfigMap` 执行 `get` 和 `list` 操作。但是，对 `ConfigMap`
    的操作严格限制为名为 `prodEnvironmentVariables` 的特定 `ConfigMap`。
- en: This completes this sub-section on RBAC Role, one of the two possible RBAC roles.
    The other – *RBAC ClusterRole* – will be detailed in the following sub-section.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了关于 RBAC Role 的这一小节，这是两种可能的 RBAC 角色之一。另一个——*RBAC ClusterRole*——将在接下来的小节中详细介绍。
- en: RBAC ClusterRole
  id: totrans-76
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: RBAC ClusterRole
- en: RBAC ClusterRole grants permissions at the cluster level, so you don't need
    to define a specific namespace. The rest of the elements and their usage is the
    same as RBAC Role.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: RBAC ClusterRole 在集群级别授予权限，因此你无需定义特定的命名空间。其余元素及其用法与 RBAC Role 相同。
- en: Namespace Scope versus Cluster Scope
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间范围与集群范围
- en: There are specific resources that are scoped at the namespace level and others
    that are scoped at the cluster level. Pods, Deployments, Services, Secrets, ConfigMaps,
    PersistentVolumeClaim, Roles, and RoleBindings are namespace scoped. Nodes, PersistentVolume,
    CertificateSigningRequests, Namespaces, ClusterRoles, and ClusterRoleBindings
    are cluster scoped.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有些资源是按命名空间级别作用的，有些则是按集群级别作用的。Pods、Deployments、Services、Secrets、ConfigMaps、PersistentVolumeClaim、Roles
    和 RoleBindings 是命名空间级别的资源。Nodes、PersistentVolume、CertificateSigningRequests、Namespaces、ClusterRoles
    和 ClusterRoleBindings 是集群级别的资源。
- en: 'The following is the definition of an RBAC ClusterRole, where the intent is
    to define a role that can perform `list`, `get`, `create`, and `delete` operations
    against nodes in the cluster:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 RBAC ClusterRole 的定义，目的是定义一个可以对集群中的节点执行 `list`、`get`、`create` 和 `delete`
    操作的角色：
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This completes this sub-section on Roles. The following sub-section explains
    how roles and users are tied through the *RoleBindings* Kubernetes API object.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了关于角色的这一小节。接下来的小节将解释如何通过 *RoleBindings* Kubernetes API 对象将角色与用户绑定。
- en: RoleBindings
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: RoleBindings
- en: '**RoleBindings** connect the subject to a role through a Kubernetes API object.
    There are two types of RoleBindings in RBAC. RBAC RoleBindings are defined at
    the namespace level, while RBAC ClusterRoleBindings are defined at the cluster
    level. Both will be discussed in the following sub-sections.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**RoleBindings** 通过 Kubernetes API 对象将主题与角色连接。RBAC 中有两种类型的 RoleBindings。RBAC
    RoleBindings 定义在命名空间级别，而 RBAC ClusterRoleBindings 定义在集群级别。两者将在接下来的子节中讨论。'
- en: RBAC RoleBindings
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: RBAC RoleBindings
- en: 'The following is the definition of an RBAC RoleBinding that''s been defined
    for a specific namespace that connects users to RBAC Roles:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为特定命名空间定义的 RBAC RoleBinding 的定义，用于将用户与 RBAC 角色连接：
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The preceding RBAC RoleBinding has been defined for a production namespace and
    connects the elements defined under subjects to elements defined under `roleRef`.
    To be specific, the RBAC RoleBinding connects the user `joe@organization.com`
    to the `viewer` RBAC Role.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 RBAC RoleBinding 已为生产命名空间定义，并将主题部分下定义的元素与 `roleRef` 下定义的元素连接起来。具体来说，RBAC
    RoleBinding 将用户 `joe@organization.com` 连接到 `viewer` RBAC 角色。
- en: It's important to note that `kind` under the subject section can be of the *User*,
    *Group*, or *ServiceAccount* type. These values, from a GKE perspective, can either
    be from a Cloud IAM User, Cloud IAM service account, or a Kubernetes service account.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，主题部分下的 `kind` 可以是 *User*、*Group* 或 *ServiceAccount* 类型。从 GKE 的角度来看，这些值可以来自
    Cloud IAM 用户、Cloud IAM 服务账户或 Kubernetes 服务账户。
- en: RBAC ClusterRoleBindings
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: RBAC ClusterRoleBindings
- en: RBAC ClusterRoleBindings bind subjects to RBAC ClusterRoles at the cluster level
    and are not restricted at the namespace level. You can only bind resources that
    are cluster scoped, not namespace scoped.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: RBAC ClusterRoleBindings 将主题与集群级别的 RBAC ClusterRole 绑定，并且不受命名空间级别的限制。你只能绑定集群范围的资源，而不能绑定命名空间范围的资源。
- en: 'The following is the definition of RBAC `ClusterRoleBindings`, where the intent
    is to bind a specific admin user to the RBAC `ClusterRole`, called `node-administrator`,
    to perform operations against GKE nodes:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 RBAC `ClusterRoleBindings` 的定义，目的是将特定的管理员用户绑定到名为 `node-administrator` 的
    RBAC `ClusterRole`，以便对 GKE 节点执行操作：
- en: '[PRE7]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This completes this sub-section on RoleBindings, where both kinds of RoleBindings
    were explained. Overall, this also concludes the sub-section on Kubernetes RBAC
    and authorization in Kubernetes in particular. The upcoming sub-section discusses
    another key Kubernetes security construct – *control plane security* – which focuses
    on securing master control plane components.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了关于 RoleBindings 的这一小节，其中解释了两种类型的 RoleBindings。总体而言，这也结束了关于 Kubernetes RBAC
    和 Kubernetes 授权的这一小节。接下来的小节将讨论另一个关键的 Kubernetes 安全构件——*控制平面安全*——它专注于保护主控制平面组件。
- en: Control plane security
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制平面安全
- en: As per GCP's shared responsibility model, GKE's `etcd` database, controller
    manager, and so on are all managed by Google. So, Google is responsible for securing
    the control plane, while the end user is responsible for securing nodes, containers,
    and pods.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 GCP 的共享责任模型，GKE 的 `etcd` 数据库、控制器管理器等由 Google 管理。因此，Google 负责保护控制平面，而最终用户负责保护节点、容器和
    Pod。
- en: Every GKE cluster has its own root CA. This CA represents an entity that issues
    a trusted certificate. This trusted certificate is used to secure the connection
    between machines. The root keys for a CA are managed by an internal service from
    Google. Communication between the master and the nodes in a cluster is secured
    based on the shared root of trust provided by the certificates issued by the CA.
    By default, GKE uses a separate per-cluster CA to provide certificates for the
    `etcd` databases within a cluster. Since separate CAs are used for each separate
    cluster, a compromised CA in one cluster cannot be used to compromise another
    cluster.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 GKE 集群都有自己的根证书颁发机构（CA）。这个 CA 代表一个发行受信证书的实体。这个受信证书用于保护机器之间的连接。CA 的根密钥由 Google
    的内部服务管理。集群中的主节点与节点之间的通信是基于由 CA 颁发的证书所提供的共享信任根来进行加密的。默认情况下，GKE 使用单独的集群 CA 来为集群内的
    `etcd` 数据库提供证书。由于每个集群使用不同的 CA，一个集群中的 CA 被破坏时无法用来破坏另一个集群。
- en: The Kubernetes API server and `kubelet` use secured network communication protocols
    such as TLS and SSH. They do this by using the certificates issued by the cluster
    root CA. When a new node is created in the cluster, the node is injected with
    a shared secret at the time of its creation. This secret is then used by its `kubelet`
    to submit certificate signing requests to the cluster root CA. This allows `kubelet`
    to get client certificates when the node is created, and new certificates when
    they need to be renewed or rotated. `kubelet` uses these client certificates to
    communicate securely with the API server.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes API 服务器和 `kubelet` 使用安全的网络通信协议，如 TLS 和 SSH。它们通过使用集群根 CA 颁发的证书来实现这一点。当集群中创建一个新节点时，该节点会在创建时注入一个共享密钥。然后，`kubelet`
    使用这个密钥向集群根 CA 提交证书签名请求。这使得 `kubelet` 能够在节点创建时获取客户端证书，并在需要更新或轮换时获得新证书。`kubelet`
    使用这些客户端证书与 API 服务器进行安全通信。
- en: You must periodically rotate the certificates or credentials to limit the impact
    of a breach. But sometimes, it might be difficult to strike a balance in terms
    of how often the credentials should be rotated. This is because the cluster API
    server will remain unavailable for a short period of time. Note that the credentials
    that are used by the API server and the clients can be rotated except for the
    `etcd` certificates, since these are managed by Google.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须定期轮换证书或凭证，以减少泄露的影响。但有时，可能很难平衡凭证应轮换的频率。这是因为集群 API 服务器会在短时间内不可用。请注意，API 服务器和客户端使用的凭证可以进行轮换，除了
    `etcd` 证书，这些由 Google 管理。
- en: '**The following is the step-by-step process you should follow to rotate credentials**:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**以下是您应遵循的逐步凭证轮换过程**：'
- en: The rotation process starts by creating a new IP address for the cluster master,
    along with its existing IP address.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 轮换过程从为集群主节点创建一个新的 IP 地址开始，同时保留现有的 IP 地址。
- en: '`kube-apiserver` will not be available during the rotation process, but existing
    pods will continue to run.'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在轮换过程中，`kube-apiserver` 将不可用，但现有的 Pod 会继续运行。
- en: New credentials are issued to the control plane as the result of a new IP address.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于新 IP 地址的结果，新的凭证会被颁发给控制平面。
- en: Once GKE has reconfigured the masters, the nodes are automatically updated by
    GKE to use the new IP and credentials. In addition, the node version is also updated
    to the closest supported version.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦 GKE 重新配置了主节点，节点会自动由 GKE 更新为使用新的 IP 地址和凭证。此外，节点版本也会更新为最接近的支持版本。
- en: Each API client must be updated with the new address. Rotation must be completed
    for the cluster master to start serving with the new IP address and new credentials
    and to remove the old IP address and old credentials.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个 API 客户端必须更新为新地址。轮换过程必须完成，集群主节点才能开始使用新的 IP 地址和新的凭证，并移除旧的 IP 地址和旧的凭证。
- en: The master node will stop serving the old IP address.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主节点将停止提供旧的 IP 地址。
- en: If the rotation process is started but not completed within 7 days, then GKE
    will automatically complete the rotation.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果轮换过程已开始但在 7 天内未完成，则 GKE 会自动完成轮换。
- en: 'Pods run on nodes and by default, pods can access the metadata of the nodes
    they are running on. This includes node secrets, which are used for node configuration.
    So, if a pod is compromised, the node secret also gets compromised, thus negatively
    impacting the entire cluster. The following steps should be taken to prevent such
    a compromised event and to protect cluster metadata:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Pod运行在节点上，默认情况下，Pod可以访问它们所在节点的元数据。这包括节点的密钥，用于节点配置。因此，如果Pod被攻破，节点密钥也会被攻破，从而对整个集群产生负面影响。为防止这种事件发生并保护集群元数据，应该采取以下步骤：
- en: The service account tied to the nodes should not include the `compute.instance.get`
    permission. This blocks Compute Engine API calls to those nodes.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绑定到节点的服务帐户不应包括`compute.instance.get`权限。这样可以阻止对这些节点的计算引擎API调用。
- en: The legacy Compute Engine API endpoint should be disabled (versions 0.1 and
    v1-beta-1) as these endpoints support metadata being queried directly.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传统的计算引擎API端点应禁用（版本0.1和v1-beta-1），因为这些端点支持直接查询元数据。
- en: Use a workload identity to access Google Cloud services from applications running
    within GKE. This prevents pods from accessing the Compute Engine metadata server.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用工作负载身份从运行在GKE中的应用程序访问Google Cloud服务。这可以防止Pod访问计算引擎元数据服务器。
- en: This completes this sub-section on how master control plane components are secured
    in GKE. Next, we'll look at how to secure pods running in a cluster by looking
    at pod security.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了本小节关于如何在GKE中保护主控平面组件的内容。接下来，我们将通过查看Pod安全性来了解如何保护集群中运行的Pod。
- en: Pod security
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pod安全性
- en: 'One or more containers run inside a pod. By default, these containers can be
    deployed with privileged elevation. These are also known as privileged containers.
    **Privileged containers** have the root capabilities of a host machine and can
    access resources that can otherwise not be accessed by ordinary containers. The
    following are a few use cases for privileged containers:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一个或多个容器运行在Pod内。默认情况下，这些容器可以部署为特权提升。它们也被称为特权容器。**特权容器**具有主机机器的root权限，可以访问普通容器无法访问的资源。以下是特权容器的一些使用场景：
- en: Running a Docker daemon inside a Docker container
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Docker容器内运行Docker守护进程
- en: Requiring direct hardware access to the container
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要直接硬件访问容器
- en: Automating CI/CD tasks on an open source automation server, such as Jenkins
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开源自动化服务器（如Jenkins）上自动化CI/CD任务
- en: Running privileged containers is convenient but undesirable from a security
    perspective as it allows critical access to host resources. This privilege can
    be a disadvantage if it's exploited by cybercriminals. The attackers will have
    root access, which means they can identify and exploit software vulnerabilities
    and possible misconfigurations, such as containers with no authentication or minimum
    strength credentials. It is essentially a playground for coin miners to use this
    privilege for unauthorized needs.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 运行特权容器很方便，但从安全角度来看是不可取的，因为它允许对主机资源的关键访问。如果被网络犯罪分子利用，这种特权可能会成为一个缺点。攻击者将获得root访问权限，这意味着他们可以识别和利用软件漏洞以及可能的配置错误，例如没有身份验证或最低强度凭据的容器。对于加密货币矿工来说，基本上这是一个可以利用这种特权进行未经授权需求的游乐场。
- en: 'There are two potential ways to define restrictions on what containers in a
    pod can do. They are as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种可能的方式来定义对Pod中容器操作的限制。它们如下：
- en: Pod security context
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pod安全上下文
- en: Pod security policy
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pod安全策略
- en: Let's look at these options in more detail.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地了解这些选项。
- en: Pod Security Context
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Pod安全上下文
- en: The security settings for a pod can be specified using the `securityContext`
    field in the pod specification. This applies to all the containers inside the
    pod and enforces the use of specific security measures. They can define whether
    privileged containers can run and whether the code in the container can be escalated
    to root privileges.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Pod的安全设置可以通过Pod规格中的`securityContext`字段进行指定。这适用于Pod内的所有容器，并强制执行特定的安全措施。它们可以定义是否可以运行特权容器，以及容器中的代码是否可以提升到root权限。
- en: 'A security context can be defined both at the pod level and the container level.
    The container-level security context takes precedence over the pod-level security
    context. The following is an extract from the pod manifest YAML for `securityContext`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 安全上下文可以在Pod级别和容器级别定义。容器级别的安全上下文优先于Pod级别的安全上下文。以下是`securityContext`的Pod清单YAML摘录：
- en: '[PRE8]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding specification represents a pod with two containers: `nginx` and
    `hello`. The `securityContext` definition on the pod specifies that processes
    inside containers run with a user ID of `3000`. It is important to specify a non-zero
    number as 0 in Linux as this represents a privileged user''s user ID. Not specifying
    0 takes away the root privilege of the code running inside the container. `securityContext`
    on the pod applies to all the containers inside the pod, unless each individual
    container has an optional `securityContext` defined. In that case, `securityContext`
    on the container takes precedence. So, in the preceding example, the `hello` container
    will run the process inside its container while using `3000` as the user ID, whereas
    the `nginx` container will run the process while using `1000` as the user ID.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 上述规范表示一个包含两个容器的 pod：`nginx` 和 `hello`。pod 中的 `securityContext` 定义指定容器内的进程以用户
    ID `3000` 运行。重要的是要指定一个非零的数字，因为在 Linux 中，0 表示特权用户的用户 ID。不指定 0 会去除容器内运行代码的 root
    特权。pod 上的 `securityContext` 适用于 pod 内的所有容器，除非每个单独的容器定义了可选的 `securityContext`。在这种情况下，容器上的
    `securityContext` 优先。因此，在上面的例子中，`hello` 容器将在其容器内以 `3000` 作为用户 ID 运行进程，而 `nginx`
    容器则以 `1000` 作为用户 ID 运行进程。
- en: Using allowPrivilegeEscalation on a Container
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器中使用 allowPrivilegeEscalation
- en: There are various ways we can use this field. One such scenario is that this
    field can be explicitly used where `securityContext` is not defined at the pod
    level but privilege escalation needs to be avoided at a specific container level.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以以多种方式使用这个字段。一种情形是，当 pod 层没有定义 `securityContext`，但需要在特定容器层面避免权限提升时，可以显式地使用此字段。
- en: 'Security contexts allow you to exercise control over the use of host namespaces,
    networking, filesystems, and volume types. A security context can be used to control
    additional security settings:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 安全上下文允许你控制主机命名空间、网络、文件系统和卷类型的使用。安全上下文可以用来控制其他安全设置：
- en: '`NET_ADMIN` allows you to perform network-related operations, such as modifying
    routing tables, enabling multicasting, and so on. `SYS_TIME` allows you to set
    the system clock:'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NET_ADMIN` 允许你执行与网络相关的操作，例如修改路由表、启用多播等。`SYS_TIME` 允许你设置系统时钟：'
- en: '[PRE9]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Enable seccomp**: Blocks code that''s running in containers from making system
    calls.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用 seccomp**：阻止容器中的代码进行系统调用。'
- en: '**Enable AppArmor**: Restricts individual program actions using security profiles.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用 AppArmor**：使用安全配置文件限制单个程序的操作。'
- en: The downside of configuring `securityContext` for each pod and, sometimes, at
    each container level is that it involves a lot of effort, especially when hundreds
    of pods are involved in a cluster. This can be solved by using *Pod Security Policies*.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个 pod 甚至每个容器配置 `securityContext` 的缺点是它需要大量的工作，尤其是在集群中涉及成百上千个 pod 时。这可以通过使用
    *Pod 安全策略* 来解决。
- en: Pod Security Policies
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Pod 安全策略
- en: A **Pod Security Policy** is a cluster-level resource that manages access for
    creating and updating pods, based on defined policies. A policy is a set of conditions
    that need to be met. A pod security policy makes it easier to define and manage
    security configurations separately. This allows you to apply security restrictions
    to multiple pods, without having to specify and manage those details in individual
    pod definitions.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**Pod 安全策略** 是一个集群级别的资源，基于定义的策略管理创建和更新 pod 的访问权限。策略是一组需要满足的条件。Pod 安全策略使得定义和管理安全配置变得更容易。这允许你将安全限制应用于多个
    pod，而不需要在每个 pod 定义中指定和管理这些细节。'
- en: 'Pod security Policies can enforce the following:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Pod 安全策略可以强制执行以下内容：
- en: '**Disable privileged containers**: This can be disabled and can be optionally
    applied against a specific namespace and specific service account.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**禁用特权容器**：可以禁用特权容器，并且可以选择性地针对特定的命名空间和特定的服务账户应用。'
- en: '`readOnlyRootFilesystem` can be set to `true`.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`readOnlyRootFilesystem` 可以设置为 `true`。'
- en: '`MustRunAsNonRoot` flag to `true`.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MustRunAsNonRoot` 标志设置为 `true`。'
- en: '`hostpath` for specific directories and not the entire filesystem.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对特定目录使用 `hostpath`，而不是整个文件系统。
- en: 'There are two elements you need in order to define a Pod Security Policy:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 Pod 安全策略时需要的两个元素是：
- en: '`PodSecurityPolicy` object represents a set of restrictions, requirements,
    and defaults that are defined similar to a security context inside a pod. This
    object also specifies all the security conditions that need to be met for a pod
    to be admitted into a cluster. These rules are specifically applied when a pod
    is created or updated.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PodSecurityPolicy`对象代表一组限制、要求和默认值，这些值的定义类似于Pod内的安全上下文。此对象还指定了需要满足的所有安全条件，以便Pod能够被接纳到集群中。这些规则在Pod创建或更新时会被特别应用。'
- en: '`PodSecurityPolicy` controller is an admission controller. The admission controller
    validates and modifies requests against one or more Pod Security Policies. The
    controller essentially determines whether a pod can be created or modified.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PodSecurityPolicy`控制器是一个准入控制器。准入控制器根据一个或多个Pod安全策略验证和修改请求。该控制器实质上决定Pod是否可以创建或修改。'
- en: Creating a PodSecurityPolicy object
  id: totrans-146
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建PodSecurityPolicy对象
- en: 'If you need to create a `PodSecurityPolicy` object where privileged containers
    cannot be run in a specific namespace and by a specific service account, then
    you should follow these steps:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要创建一个`PodSecurityPolicy`对象，以便在特定命名空间和特定服务账户中不能运行特权容器，您应该遵循以下步骤：
- en: 'Define a `PodSecurityPolicy` Kubernetes object using the `pod-security-policy.yaml`
    file. The following is an example specification:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`pod-security-policy.yaml`文件定义一个`PodSecurityPolicy`Kubernetes对象。以下是一个示例规范：
- en: '[PRE10]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Create pod security policy
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Pod安全策略
- en: kubectl apply -f pod-security-policy.yaml
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: kubectl apply -f pod-security-policy.yaml
- en: '[PRE11]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To authorize the specific `PodSecurityPolicy`, define a ClusterRole with the
    resource set to `podsecuritypolicies` and against the specific policy''s resource
    name. An example `ClusterRole` specification for `my-cluster-role.yaml` is as
    follows:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要授权特定的`PodSecurityPolicy`，请定义一个ClusterRole，其资源设置为`podsecuritypolicies`，并且针对特定策略的资源名称。以下是`my-cluster-role.yaml`的`ClusterRole`示例：
- en: '[PRE12]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Create your `ClusterRole` using the following CLI command:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下CLI命令创建您的`ClusterRole`：
- en: '[PRE13]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To authorize the created ClusterRole against a specific subject (which could
    be a service account) and, optionally, in a specific namespace, define a `RoleBinding`.
    An example specification for `my-role-binding.yaml` is as follows, where a RoleBinding
    is being applied to a specific service account:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要授权已创建的ClusterRole针对特定主体（可以是服务账户），并且可选地在特定命名空间中定义一个`RoleBinding`。以下是`my-role-binding.yaml`的示例规范，其中将RoleBinding应用于特定服务账户：
- en: '[PRE14]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create your `RoleBinding` using the following CLI command:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下CLI命令创建您的`RoleBinding`：
- en: '[PRE15]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Enable the `PodSecurityPolicy` controller either at the time of cluster creation
    or while you''re updating an existing cluster. The following are the CLI commands
    for both options:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在集群创建时或更新现有集群时启用`PodSecurityPolicy`控制器。以下是这两种选项的CLI命令：
- en: '[PRE16]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If you ever need to disable the `PodSecurityPolicy` controller, use the following
    CLI command:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您需要禁用`PodSecurityPolicy`控制器，请使用以下CLI命令：
- en: '[PRE17]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In GKE, the `PodSecurityPolicy` controller is disabled by default or is not
    enabled at the time of cluster creation. So, it needs to be explicitly enabled.
    However, the controller should only be enabled once all the relevant `PodSecurityPolicy`
    objects have been defined, along with their authorization requirements. If there
    are multiple pod security policies, then these are evaluated alphabetically.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在GKE中，`PodSecurityPolicy`控制器在集群创建时默认是禁用的，或者没有启用。因此，您需要显式启用它。然而，控制器应该仅在定义了所有相关的`PodSecurityPolicy`对象及其授权要求之后启用。如果有多个Pod安全策略，这些策略将按字母顺序进行评估。
- en: This concludes this section, which discussed the essential security concepts
    in the control plane (authentication), worker nodes, and deployments (authorization).
    This section also drew references to GKE and how these concepts are also implemented
    in GKE. The upcoming section focuses on specific GKE recommendations around hardening
    cluster security to ensure the applications running inside the cluster are secure.
    GKE offers certain features to support these recommendations, all of which will
    be outlined in detail.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 本节内容已结束，讨论了控制平面（身份验证）、工作节点和部署（授权）中的基本安全概念。本节还参考了GKE及这些概念如何在GKE中实现。接下来的部分将重点讨论GKE在加固集群安全方面的具体建议，以确保在集群内运行的应用程序安全。GKE提供了一些功能来支持这些建议，所有这些功能将详细列出。
- en: Hardening cluster security in GKE
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在GKE中加固集群安全
- en: Securing the Kubernetes cluster should be your topmost priority when it comes
    to securing applications running inside your cluster. GKE supports many such features
    to harden the cluster. For example, the GKE control plane is patched and upgraded
    automatically as part of the shared responsibility model. In addition, node auto-upgrades
    are also enabled for a newly created GKE cluster.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在保护集群内部运行的应用程序时，确保 Kubernetes 集群的安全应当是首要任务。GKE 提供了许多功能来强化集群的安全性。例如，GKE 控制平面会根据共享责任模型自动打补丁和升级。此外，新的
    GKE 集群还会启用节点自动升级功能。
- en: 'The following are some key additional GKE features that can be used to secure
    and harden clusters. Some of these features are enabled by default while you''re
    creating a GKE cluster:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些可用于保护和强化集群的 GKE 关键功能。这些功能中的部分会在创建 GKE 集群时默认启用：
- en: GKE supports a cluster type called **Private Cluster**, which provides options
    to restrict access to control planes and nodes. This needs to be specified at
    the time of cluster creation.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GKE 支持一种名为**私有集群**的集群类型，它提供了限制控制平面和节点访问的选项。需要在集群创建时指定此配置。
- en: GKE supports **container-optimized OS** images. It is a container-optimized
    OS that has been custom-built, optimized, and hardened specifically for running
    containers.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GKE 支持**容器优化操作系统**镜像。这是一个为运行容器量身定制、优化和强化的容器优化操作系统。
- en: GKE supports **shielded GKE nodes** as they help increase cluster security using
    verifiable node identities and integrity. This feature can be enabled on cluster
    creation or can be updated for an existing cluster.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GKE 支持**受保护的 GKE 节点**，通过使用可验证的节点身份和完整性来增强集群安全性。此功能可以在集群创建时启用，也可以更新现有集群来启用。
- en: GKE allows you to enforce the use of **Network Policies** on a new or existing
    cluster. A network policy can restrict pod-to-pod communication within a cluster,
    thus reducing your footprint in the event of a security incident.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GKE 允许在新建或现有集群上强制使用**网络策略**。网络策略可以限制集群内 pod 之间的通信，从而在发生安全事件时减少影响范围。
- en: GKE recommends using **binary authorization**, a process that ensures supply
    chain software security. Here, you have the option to exercise control so that
    only trusted images in the cluster are deployed.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GKE 推荐使用**二进制授权**，这是一种确保供应链软件安全的过程。通过此方法，您可以控制只部署集群中受信任的镜像。
- en: GKE can authenticate with other Google services and APIs through **Workload
    Identity**. This is the recommended way of doing things, instead of using the
    service account keys at the node level.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GKE 可以通过**工作负载身份**与其他 Google 服务和 API 进行身份验证。这是推荐的做法，应该避免在节点级别使用服务账户密钥。
- en: GKE provides an additional layer of protection for sensitive data such as secrets
    by integrating with Google Secret Manager. **Secret Manager** is a GCP service
    that's used to secure API keys, passwords, certificates, and other sensitive data.
    GKE also supports the use of third-party secret managers such as HashiCorp Vault.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GKE 通过与 Google Secret Manager 集成，为敏感数据（如机密信息）提供额外的保护层。**Secret Manager** 是一个
    GCP 服务，用于保护 API 密钥、密码、证书和其他敏感数据。GKE 还支持使用第三方密钥管理工具，如 HashiCorp Vault。
- en: Each of the preceding GKE features will be covered in their respective sections.
    We will start with GKE private clusters.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 以上每个 GKE 特性将在各自的章节中进行详细讲解。我们将从 GKE 私有集群开始。
- en: GKE private clusters
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GKE 私有集群
- en: '**GKE private clusters** are one of the possible cluster configurations in
    GKE, especially when it comes to network isolation. This cluster configuration
    isolates node connectivity to the public internet. This includes both inbound
    traffic to the cluster and outbound traffic from the cluster. This is because
    the nodes inside the cluster will not have a public-facing IP address and will
    only have an internal IP address.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '**GKE 私有集群**是 GKE 中的一种可能的集群配置，特别是在网络隔离方面。这种集群配置隔离了节点与公共互联网的连接，包括集群的入站流量和出站流量。因为集群中的节点将没有公开的
    IP 地址，仅拥有内部 IP 地址。'
- en: If nodes require outbound internet access, then a managed `NodePort` or `LoadBalancer`
    type. If the service is of the `LoadBalancer` type, GCP's HTTP(S) load balancer
    can be used and will provide an external IP address to allow inbound traffic into
    the cluster. The key to GKE private clusters is the functionality of their control
    planes, since this is the main differentiating factor compared to a non-private
    cluster. We will look at this next.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果节点需要外部互联网访问，可以使用托管的 `NodePort` 或 `LoadBalancer` 类型。如果服务是 `LoadBalancer` 类型，则可以使用
    GCP 的 HTTP(S) 负载均衡器，并将提供一个外部 IP 地址，以允许流量进入集群。GKE 私有集群的关键在于其控制平面的功能，因为这是与非私有集群的主要区别。我们接下来会详细讨论这一点。
- en: Control plane in private clusters
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 私有集群中的控制平面
- en: In GKE, `kube-apiserver` is managed by the control plane. Google runs the control
    plane on a VM that is in a VPC network in a Google-owned project. In the case
    of a private cluster, the master control plane sitting on a Google-owned VPC network
    connects to your cluster's VPC network through VPC network peering. The traffic
    between the nodes and the control plane is routed through an internal IP address.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GKE 中，`kube-apiserver` 由控制平面管理。Google 在 Google 自有项目中的 VPC 网络上运行控制平面。对于私有集群，主控制平面位于
    Google 自有的 VPC 网络中，并通过 VPC 网络对等连接到你的集群的 VPC 网络。节点和控制平面之间的流量通过内部 IP 地址进行路由。
- en: 'You can access the control plane through endpoints. In general, there are two
    types of endpoints:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过端点访问控制平面。一般来说，端点有两种类型：
- en: '`kubectl` tool go through the public endpoint.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubectl` 工具通过公共端点访问。'
- en: '**Private endpoint**: This represents the internal IP address in the control
    plane''s VPC network. This is very specific to private clusters. The nodes in
    the private cluster communicate with the components in the control plane through
    internal IP addresses.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**私有端点**：这表示控制平面 VPC 网络中的内部 IP 地址。这个设置非常特定于私有集群。私有集群中的节点通过内部 IP 地址与控制平面中的组件进行通信。'
- en: 'To summarize, a public cluster control plane has an internet-facing endpoint,
    while a private cluster control plane can be accessed both through private and
    public endpoints. In addition, a private cluster can only be created in a VPC-native
    mode (refer to [*Chapter 8*](B15587_08_Final_ASB_TD_ePub.xhtml#_idTextAnchor182),
    *Understanding GKE Essentials for Deploying Containerized Applications*). The
    level of access to a private cluster via endpoints can be controlled through one
    of the following three configurations:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，公共集群控制平面具有面向互联网的端点，而私有集群控制平面可以通过私有端点和公共端点进行访问。此外，私有集群只能在 VPC 本地模式下创建（参见
    [*第 8 章*](B15587_08_Final_ASB_TD_ePub.xhtml#_idTextAnchor182)，*理解 GKE 基础知识以便部署容器化应用程序*）。可以通过以下三种配置之一来控制通过端点访问私有集群的级别：
- en: Public endpoint access disabled
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已禁用公共端点访问
- en: Public endpoint access enabled; authorized networks enabled for limited access
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已启用公共端点访问；已启用授权网络以进行有限访问
- en: Public endpoint access enabled; authorized networks disabled
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已启用公共端点访问；已禁用授权网络
- en: Each of the preceding configurations will be discussed in detail in the upcoming
    sub-sections, starting with *Public endpoint access disabled*.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的子章节将详细讨论每种配置，从 *已禁用公共端点访问* 开始。
- en: Public endpoint access disabled
  id: totrans-191
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 已禁用公共端点访问
- en: This configuration represents a private GKE cluster with no access to a public
    endpoint. This is very secure as there is no access to the control plane via public
    internet. The cluster can only be accessed from the subnet and a secondary range
    used for pods. A VM in the same region can be added by updating the master authorized
    networks with the private IP of the VM in CIDR format.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置表示一个没有公共端点访问权限的私有 GKE 集群。这非常安全，因为没有通过公共互联网访问控制平面的方式。集群只能从子网以及用于 pod 的次要范围进行访问。可以通过更新主授权网络并使用虚拟机的私有
    IP（CIDR 格式）将同一区域的虚拟机添加到集群中。
- en: If the cluster needs to be accessed from outside, then connect to the GKE private
    cluster's VPC network through Cloud VPN or Cloud Interconnect. The connection
    gets established through internal IP addresses. The list of internal IP addresses
    that can access the control plane can also be limited by using `master-authorized-networks`.
    This does not include public IP addresses as access to public endpoints is disabled.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要从外部访问集群，则可以通过 Cloud VPN 或 Cloud Interconnect 连接到 GKE 私有集群的 VPC 网络。连接通过内部
    IP 地址建立。可以通过使用 `master-authorized-networks` 来限制可以访问控制平面的内部 IP 地址列表。这不包括公共 IP 地址，因为公共端点的访问已被禁用。
- en: 'Use the following CLI command if you need to create a private GKE cluster where
    you don''t want client access to the public endpoint:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要创建一个不允许客户端访问公共端点的私有 GKE 集群，请使用以下 CLI 命令：
- en: '[PRE18]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The key flags in the preceding CLI command are as follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 CLI 命令中的关键标志如下：
- en: '`--enable-master-authorized-networks`: Access to the cluster control plane
    is restricted to the list of internal IP addresses. Cannot include external IP
    addresses.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--enable-master-authorized-networks`：集群控制平面的访问仅限于内部 IP 地址列表。不能包含外部 IP 地址。'
- en: '`--enable-private-nodes`: This indicates that the cluster nodes do not have
    external IP addresses.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--enable-private-nodes`：表示集群节点没有外部 IP 地址。'
- en: '`--enable-private-endpoint`: This indicates that the cluster is only managed
    by the private IP address of the master API endpoint.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--enable-private-endpoint`：表示该集群仅由主 API 端点的私有 IP 地址管理。'
- en: The next sub-section focuses on a configuration where public endpoint access
    is enabled but access is restricted.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 下一部分聚焦于一个配置，其中启用了公共端点访问，但访问受限。
- en: Public endpoint access enabled; authorized networks enabled for limited access
  id: totrans-201
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 启用公共端点访问；授权网络启用以进行有限访问
- en: This configuration represents a private GKE cluster configuration where there
    is restricted access to the control plane from both internal and external IP addresses.
    The specific set of internal and external IP addresses can be specified as part
    of the authorized networks. So, a machine with an external IP address can only
    communicate with a GKE Private Cluster if that IP address is included in the authorized
    networks.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 该配置表示一个私有 GKE 集群配置，其中对控制平面的访问既受内部也受外部 IP 地址的限制。可以将特定的内部和外部 IP 地址作为授权网络的一部分进行指定。因此，只有当外部
    IP 地址包含在授权网络中时，具有外部 IP 地址的机器才能与 GKE 私有集群通信。
- en: 'Use the following CLI command if you need to create a private GKE cluster where
    there is limited access to a public endpoint:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要创建一个仅对公共端点提供有限访问的私有 GKE 集群，请使用以下 CLI 命令：
- en: '[PRE19]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Note that most of these flags are the same as they were in the previous sub-section,
    except for the omission of the `--enable-private-endpoint` flag. Omitting this
    flag implies that the cluster control plane can be reached both by private and
    public endpoints, but access is restricted only to the allowed IP address as part
    of the master authorized networks.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这些标志大部分与前一部分相同，唯一不同的是省略了 `--enable-private-endpoint` 标志。省略此标志意味着集群控制平面既可以通过私有端点也可以通过公共端点访问，但访问仅限于作为主授权网络的一部分的允许
    IP 地址。
- en: The next sub-section focuses on a configuration where public endpoint access
    is enabled and access is not restricted.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 下一部分聚焦于一个配置，其中启用了公共端点访问，且访问没有受到限制。
- en: Public endpoint access enabled; authorized networks disabled
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 启用公共端点访问；禁用授权网络
- en: This is the default configuration option while creating a private GKE cluster.
    Essentially, the cluster will have access to the control plane from any IP address.
    This is the least restrictive option.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这是创建私有 GKE 集群时的默认配置选项。本质上，集群可以从任何 IP 地址访问控制平面。这是最不限制的选项。
- en: 'Use the following CLI command if you need to create a private GKE cluster where
    you wish there to be unrestricted access to the public endpoint:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要创建一个允许不受限制访问公共端点的私有 GKE 集群，请使用以下 CLI 命令：
- en: '[PRE20]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note that most of these flags are the same as the ones in the configuration
    where public endpoint access is enabled but master authorized networks are not
    enabled. As a result, there are no restricts in terms of the IP addresses that
    can access the control plane of the private GKE cluster either via a private endpoint
    or a public endpoint.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这些标志大部分与启用了公共端点访问但未启用主授权网络的配置中的标志相同。因此，在通过私有端点或公共端点访问私有 GKE 集群的控制平面时，不会有
    IP 地址访问限制。
- en: This completes this sub-section on private clusters, where nodes in the cluster
    can potentially be isolated or restricted from the public internet. The next topic
    shifts focus to container-optimized OS, which essentially protects the application
    by hardening the images that are used in containers with key security features.
    This feature is available in GKE.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分结束了关于私有集群的讨论，私有集群中的节点可能会被隔离或限制访问公共互联网。接下来的主题将重点介绍容器优化操作系统，它通过强化容器镜像并添加关键的安全特性，从而保护应用程序。此功能在
    GKE 中可用。
- en: Container-optimized OS
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器优化操作系统
- en: '`cos_containerd` image) is a Linux-based kernel that is custom-built from Google
    and is based on Chromium OS. It can continuously scan vulnerabilities at the kernel
    level or against any package of the OS. It can patch and update any package in
    case of a vulnerability. It is optimized and hardened specifically for running
    containers in production. The following are some of its key features:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`cos_containerd` 镜像是一个基于 Linux 的内核，经过 Google 定制，基于 Chromium OS。它可以持续扫描内核级别或操作系统任何包的漏洞。在发现漏洞时，可以修补和更新任何包。它特别针对生产环境中的容器运行进行优化和加固。以下是其一些关键特性：'
- en: '**Minimal OS footprint**: Doesn''t include packages that are not required,
    thereby reducing the OS attack surface.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最小化操作系统占用空间**：不包含不必要的包，从而减少操作系统的攻击面。'
- en: '**Immutable root system and verified boot**: The root filesystem is always
    mounted as read-only. This prevents attackers from making changes on the filesystem.
    Checksum is also computed at build time and verified by the kernel on each boot.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不可变根系统和验证启动**：根文件系统始终以只读方式挂载。这可以防止攻击者在文件系统上进行更改。校验和也会在构建时计算，并在每次启动时由内核进行验证。'
- en: '`/etc/`. This is useful as you can allow write configuration at runtime, such
    as adding users to the filesystem. However, these changes are not persisted across
    reboots.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/etc/`。这很有用，因为您可以在运行时允许写入配置，例如向文件系统添加用户。然而，这些更改在重启后不会持久化。'
- en: '**Security-hardened kernel**: Supports features such as seccomp and AppArmor
    to enforce fine-grained security policies.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全加固内核**：支持 seccomp 和 AppArmor 等功能，以强制执行精细化的安全策略。'
- en: '**Automatic updates**: Supports automatic updates for new security features
    or security patches for running GCE VMs.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动更新**：支持自动更新以获取新的安全功能或运行中的 GCE 虚拟机的安全补丁。'
- en: '`22`.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`22`。'
- en: Container-optimized OS ensures that the base image that's used to containerize
    the applications is secure and has a minimal footprint, but it is also important
    that these containers run on nodes that are equally secured or shielded. We will
    cover this in the next topic.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 容器优化操作系统确保用于容器化应用程序的基础镜像是安全的并且具有最小的占用空间，但同样重要的是，这些容器需要在同样安全或受保护的节点上运行。我们将在下一个主题中讨论这一点。
- en: Shielded GKE nodes
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 受保护的 GKE 节点
- en: '**Shielded GKE nodes** is a GKE feature that increases cluster security by
    providing strong, verifiable node identity and integrity. These nodes are based
    on Compute Engine Shielded VMs.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '**受保护的 GKE 节点**是一个 GKE 功能，通过提供强大且可验证的节点身份和完整性来增强集群的安全性。这些节点基于计算引擎受保护的虚拟机（Shielded
    VMs）。'
- en: Shielded VMs
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 受保护的虚拟机
- en: Shielded VMs is a GCP feature where VM instances are ensured they won't be compromised
    at the boot or kernel level. GCP makes this possible by using secure boot and
    **virtual Trusted Platform Modules** (**vTPMs**). Shielded VMs enforce and verify
    the digital signature of all the components at the time of boot process and halt
    the boot process on failure.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 受保护的虚拟机是 GCP 的一项功能，确保虚拟机实例在启动或内核级别不会被攻破。GCP 通过使用安全启动和 **虚拟受信平台模块**（**vTPM**）来实现这一点。受保护的虚拟机会在启动过程中强制执行并验证所有组件的数字签名，在失败时停止启动过程。
- en: 'The shielded GKE nodes feature prevents the attacker from impersonating nodes
    in a cluster in the event of a pod vulnerability being exploited. If the shielded
    GKE nodes feature is enabled, the GKE control plane will cryptographically verify
    the following and limit the ability of the attacker to impersonate a node in the
    cluster:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 受保护的 GKE 节点功能可防止攻击者在 Pod 漏洞被利用时伪装成集群中的节点。如果启用了受保护的 GKE 节点功能，GKE 控制平面将通过加密方式验证以下内容，并限制攻击者伪装集群中节点的能力：
- en: Every node in the GKE cluster is a GCE VM running in a Google data center.
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GKE 集群中的每个节点都是在 Google 数据中心运行的 GCE 虚拟机。
- en: Every node is part of the cluster-provisioned managed instance group.
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个节点都是集群提供的托管实例组的一部分。
- en: '`kubelet` authenticates with the node with a cluster-provisioned certificate.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubelet` 使用集群提供的证书与节点进行身份验证。'
- en: 'You can use the following CLI commands to enable shielded GKE nodes in a new/existing
    cluster, to verify whether shielded GKE nodes are enabled, and to disable shielded
    GKE nodes:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下 CLI 命令在新的/现有集群中启用受保护的 GKE 节点，验证是否启用了受保护的 GKE 节点，并禁用受保护的 GKE 节点：
- en: '[PRE21]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: There is no extra cost in running shielded GKE nodes. However, they produce
    more logs than regular nodes, thus leading to an overall increase in costs with
    respect to Cloud Logging. The next topic explains another GKE security feature
    where the surface area of the attack is reduced in case of a security threat,
    by restricting the traffic among pods in a cluster.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 运行受保护的GKE节点不会产生额外费用。然而，它们比常规节点产生更多的日志，从而导致Cloud Logging的总体费用增加。下一个主题将解释另一个GKE安全功能，该功能通过限制集群中pod之间的流量，在发生安全威胁时减少攻击面。
- en: Network Policies – restricting traffic among pods
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络策略——限制pod之间的流量
- en: All the pods within a Kubernetes cluster can communicate with each other. However,
    Kubernetes provides an option for when the traffic between pods needs to be controlled
    at the IP address or port level. This thought process is strongly recommended
    to ensure that the entire cluster is not compromised, and that the surface area
    is controlled in case of a security attack. Kubernetes Network Policies helps
    you restrict traffic among pods within the cluster.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes集群中的所有pod可以相互通信。然而，Kubernetes提供了在pod之间的流量需要在IP地址或端口级别进行控制时的选项。强烈建议采取这种思路，以确保整个集群不会受到攻击，并且在发生安全攻击时可以控制攻击面。Kubernetes网络策略帮助你限制集群内pod之间的流量。
- en: '**Network Policies** in Kubernetes allow you to specify how a pod can communicate
    with various network entities based on pods with matching label selectors, namespaces
    with matching label selectors, or specific IP addresses with port combinations
    (including the ability to specify exception IP addresses). This can be defined
    for either ingress or egress traffic flowing in both directions.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络策略**在Kubernetes中允许你根据具有匹配标签选择器的pod、具有匹配标签选择器的命名空间，或具有特定IP地址和端口组合的网络实体，指定pod如何与这些网络实体进行通信（包括能够指定例外IP地址）。这可以为入口或出口流量在两个方向上进行定义。'
- en: 'GKE provides options to enforce the use of a network policy when a cluster
    is created,like so:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: GKE提供了在创建集群时强制使用网络策略的选项，如下所示：
- en: '[PRE22]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Optionally, we can enforce this on an existing cluster by using the following
    CLI commands:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，我们可以通过使用以下CLI命令在现有集群上强制执行此操作：
- en: '[PRE23]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: A sample network policy can be found at [https://kubernetes.io/docs/concepts/services-networking/network-policies/](https://kubernetes.io/docs/concepts/services-networking/network-policies/).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在[https://kubernetes.io/docs/concepts/services-networking/network-policies/](https://kubernetes.io/docs/concepts/services-networking/network-policies/)找到一个示例网络策略。
- en: 'In addition to specifying a pinpointed policy, Kubernetes allows you to define
    default network policies. The following are some of the supported default policies:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 除了指定具体的策略外，Kubernetes还允许你定义默认的网络策略。以下是一些支持的默认策略：
- en: Default deny all ingress traffic
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认拒绝所有入口流量
- en: Default deny all egress traffic
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认拒绝所有出口流量
- en: Default deny all ingress and all egress traffic
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认拒绝所有入口和所有出口流量
- en: Default allow all ingress traffic
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认允许所有入口流量
- en: Default allow all egress traffic
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认允许所有出口流量
- en: If a specific network policy or a default policy is not defined, then the cluster
    will allow both ingress and egress traffic to and from pods.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有定义特定的网络策略或默认策略，则集群将允许pod之间的所有入口和出口流量。
- en: The next topic details another key GKE feature known as Binary Authorization,
    which can exercise control to ensure only trusted images are deployed to the GKE
    cluster.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个主题详细介绍了另一个关键的GKE功能——二进制授权，它可以控制确保仅受信任的镜像被部署到GKE集群中。
- en: Binary Authorization
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制授权
- en: '**Binary Authorization** is a deploy-time security service provided by Google.
    It ensures that only trusted containers are deployed in the GKE cluster using
    deployment policies. The goal of the policy is to determine which images to allow
    and which to exempt. To accomplish this goal, Binary Authorization integrates
    with Container Analysis – a GCP service that scans container images stored in
    a Container Registry for vulnerabilities. In addition, **Container Analysis**
    also stores trusted metadata that''s used in the authorization process.'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '**二进制授权**是Google提供的一个部署时安全服务。它通过部署策略确保只有受信任的容器被部署到GKE集群中。该策略的目标是确定允许哪些镜像，哪些镜像可以豁免。为了实现这一目标，二进制授权与容器分析（Container
    Analysis）集成——这是一个GCP服务，用于扫描存储在容器注册表中的容器镜像的漏洞。此外，**容器分析**还存储了在授权过程中使用的受信任元数据。'
- en: Binary Authorization policies are security-oriented and comprise one or more
    rules. Rules are constraints that need to pass before the images can be deployed
    to the GKE cluster. An attested image is one that has been verified or guaranteed
    by an *attestor*. The most common rule that is used is the need for a digitally
    signed attestation to verify whether the image has been attested. When a container
    image is built through Cloud Build, the image's digest is digitally signed by
    a signer, which creates an attestation. At the time of deployment, Binary Authorization
    enforces the use of an attestor to verify the attestation. Binary Authorization
    only allows *attested* images to be deployed to the cluster. Any unauthorized
    images that do not match the Binary Authorization policy are rejected. Additionally,
    a *Denied by Attestor* error can also be returned if no attestations are found
    that were valid and were signed by a key trusted by the attestor. To overcome
    the *Denied by Attestor* error, create an attestation and submit it to Binary
    Authorization.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制授权策略是安全导向的，并包括一个或多个规则。规则是在图像部署到 GKE 集群之前需要通过的约束条件。已认证的图像是已由*签名者*验证或保证的图像。最常见的规则之一是需要数字签名的验真书来验证图像是否已经被认证。当通过
    Cloud Build 构建容器图像时，图像的摘要会由签名者进行数字签名，从而创建验真书。在部署时，二进制授权会强制使用签名者来验证验真书。二进制授权仅允许*已认证*的图像部署到集群中。任何未经授权的图像如果不符合二进制授权策略将被拒绝。此外，如果没有找到有效的并由签名者信任的键签名的验真书，还可能返回*由签名者拒绝*错误。要解决*由签名者拒绝*错误，请创建一个验真书并提交给二进制授权。
- en: 'The following are some common use cases that include attestations:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些包含验真书的常见用例：
- en: '**Build verification**: To verify whether the container image was built by
    a specific build system or from a specific **continuous integration** (**CI**)
    pipeline.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建验证**：验证容器图像是否由特定的构建系统构建，或者是否来自特定的**持续集成**（**CI**）流水线。'
- en: '**Vulnerability scanning**: To verify whether the CI-built container image
    has been scanned for vulnerabilities by Container Analysis and the findings have
    been defined at an acceptable level.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**漏洞扫描**：验证 CI 构建的容器图像是否已通过 Container Analysis 进行漏洞扫描，并且结果已定义在可接受的水平上。'
- en: 'Configuring Binary Authorization is a multi-step process. The following is
    a high-level summary of the steps involved:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 配置二进制授权是一个多步骤的过程。以下是涉及的步骤的高级摘要：
- en: Enabled the required APIs. This includes APIs for GKE, Container Analysis, and
    Binary Authorization.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用所需的 API。这包括 GKE、Container Analysis 和二进制授权的 API。
- en: Create a GKE cluster with binary authorization enabled.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建启用了二进制授权的 GKE 集群。
- en: Set up a note. This is a piece of metadata in Container Analysis storage that
    is associated with an attestor.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个注释。这是与一个签名者相关联的 Container Analysis 存储中的元数据。
- en: Set up cryptographic keys using PKIX keys, to securely verify the identity of
    attestors; only enforce verified parties to authorize a container image. **Public-Key
    Infrastructure** (**PKIX**) keys refer to public key certificates defined in the
    X.509 standard.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 PKIX 密钥设置加密密钥，以安全地验证签名者的身份；仅强制验证方可以授权容器图像。**公钥基础设施**（**PKIX**）密钥是指在 X.509
    标准中定义的公钥证书。
- en: Create an attestor; that is, a person or process that attests to the authenticity
    of the image.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个签名者；也就是说，一个可以证明图像真实性的人或过程。
- en: Create a Binary Authorization policy. The default policy is to allow all images.
    The other option includes denying all images or denying images from a specific
    attestor.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个二进制授权策略。默认策略是允许所有图像。其他选项包括拒绝所有图像或拒绝特定签名者的图像。
- en: Optionally, images can be configured so that they're exempt from the binary
    authorization policy.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，可以配置图像以使其免于二进制授权策略。
- en: 'As we mentioned previously, Binary Authorization can deny images from being
    deployed if the policy conditions are violated or not met. However, you can specify
    the break-glass flag as an annotation in the pod deployment, which allows pod
    creation even if the images violate the policy. The break-glass annotation flag
    is also logged and can be identified by incident response teams through audit
    logs while they''re reviewing or debugging the deployments. The following is a
    snippet of a pod specification that includes the break-glass flag annotation:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，二进制授权（Binary Authorization）可以拒绝部署违反策略条件或未满足的镜像。然而，您可以在 Pod 部署中指定一个名为“break-glass”的标志作为注释，这样即使镜像违反了策略，也允许创建
    Pod。这个“break-glass”注释标志会被记录下来，审计日志中的事件响应团队可以通过它在查看或调试部署时识别出来。以下是包含“break-glass”标志注释的
    Pod 规格片段：
- en: '[PRE24]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This concludes this topic on Binary Authorization. The next topic details another
    key GKE security feature that allows Google Cloud IAM service accounts to be used
    as Kubernetes service accounts through Workload Identity, thus providing more
    secure access to GCP services from applications running inside the GKE cluster.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 本节内容已结束，接下来的主题详细介绍了另一个关键的 GKE 安全功能，该功能通过工作负载身份允许将 Google Cloud IAM 服务账户作为 Kubernetes
    服务账户使用，从而为在 GKE 集群内运行的应用程序提供更安全的 GCP 服务访问。
- en: Workload Identity
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作负载身份
- en: GKE clusters can run applications that might need access to Google-specific
    APIs, such as compute APIs, storage APIs, database APIs, and more. GKE recommends
    using *Workload Identity* to access GCP services from applications running within
    GKE. Workload Identity allows you to use a Kubernetes service account as a Google
    service account. This allows each application to have distinct identities and
    fine-grained authorization.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: GKE 集群可以运行可能需要访问 Google 特定 API 的应用程序，如计算 API、存储 API、数据库 API 等。GKE 推荐使用 *工作负载身份*
    来从在 GKE 内运行的应用程序访问 GCP 服务。工作负载身份允许您将 Kubernetes 服务账户作为 Google 服务账户使用。这使得每个应用程序能够拥有独立的身份和细粒度的授权。
- en: 'Workload Identity uses the concept of a cluster workload identity pool, which
    allows Google Cloud IAM to trust and understand Kubernetes service account credentials.
    The cluster''s workload identity pool will be set to `PROJECT_ID.svc.id.goog`
    and is automatically created at the project level. In such a scenario, Cloud IAM
    will authenticate the Kubernetes service account with the following member name:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 工作负载身份使用集群工作负载身份池的概念，该池允许 Google Cloud IAM 信任并理解 Kubernetes 服务账户凭据。集群的工作负载身份池将设置为
    `PROJECT_ID.svc.id.goog`，并在项目级别自动创建。在这种情况下，Cloud IAM 将通过以下成员名称对 Kubernetes 服务账户进行身份验证：
- en: '[PRE25]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The preceding member's name is unique due to the cluster's Workload Identity
    pool, service account name, and Kubernetes namespace. So, multiple service accounts
    with the matching three tuples will map to the same member name.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 由于集群的工作负载身份池、服务账户名称和 Kubernetes 命名空间的关系，前述成员的名称是唯一的。因此，具有匹配的三元组的多个服务账户将映射到相同的成员名称。
- en: Enabling Workload Identity
  id: totrans-271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用工作负载身份
- en: 'Follow these steps to enable Workload Identity on a GKE cluster:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在 GKE 集群上启用工作负载身份：
- en: Navigate to `IAM service account Credentials` API and enable it.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `IAM 服务账户凭据` API 并启用它。
- en: 'Create a new cluster with Workload Identity enabled via the following CLI command:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下 CLI 命令创建一个启用了工作负载身份的新集群：
- en: '[PRE26]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Update an existing cluster with Workload Identity enabled via the following
    CLI command:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下 CLI 命令更新启用了工作负载身份的现有集群：
- en: '[PRE27]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This concludes this section on Workload Identity, as well as this major section
    on the key GKE security features that are recommended by Google to harden cluster
    security.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 本节关于工作负载身份的内容已经结束，同时也结束了关于 GKE 安全功能的这一主要部分，Google 推荐这些功能来强化集群的安全性。
- en: Summary
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed some fundamental security concepts from a native
    Kubernetes or K8s standpoint. Each of these concepts was extended as we looked
    at their equivalent usage or implementation in GKE. Later, we did a deep dive
    into certain GKE-specific security features that are critical to hardening cluster
    security. This included using node auto upgrades to ensure that the nodes are
    running the latest version of Kubernetes, or using Google's container-optimized
    OS instead of a general-purpose Linux distribution system. We also looked at using
    private clusters, where access to the cluster master can be restricted for enhanced
    security or can be controlled so that it's only accessed from authorized networks.
    We also looked at Binary Authorization, which ensures that only trusted images
    can be deployed to the cluster, and Workload Identity, which allows us to use
    a Cloud IAM service account as a Kubernetes service account, thus providing more
    flexibility in terms of which applications in the GKE cluster can easily interact
    with other GCP services, such as Cloud Storage, Secret Management, and more.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了一些从原生 Kubernetes 或 K8s 角度出发的基本安全概念。我们还扩展了这些概念，探讨了它们在 GKE 中的等效用法或实现方式。随后，我们深入探讨了某些
    GKE 特有的安全功能，这些功能对于加强集群安全至关重要。这包括使用节点自动升级，确保节点运行最新版本的 Kubernetes，或使用 Google 的容器优化操作系统，而不是通用的
    Linux 发行版系统。我们还探讨了使用私有集群，其中可以限制访问集群主节点的权限以增强安全性，或者可以控制只允许从授权网络访问。我们还讨论了二进制授权（Binary
    Authorization），它确保只有受信任的镜像可以部署到集群中，以及工作负载身份（Workload Identity），它允许我们将 Cloud IAM
    服务账户作为 Kubernetes 服务账户使用，从而在 GKE 集群中的应用程序与其他 GCP 服务（如 Cloud Storage、Secret Management
    等）之间提供更多灵活性。
- en: 'In the next chapter, we''ll look at services that are tied to Cloud Operations,
    along with a specific feature that was introduced in Google Cloud to track the
    reliability of services: Service Monitoring. This specific feature/option links
    the SRE technical practices (SLIs, SLOs, and error budget) to the features that
    are available in Google Cloud Operations so that we can monitor services and alert
    others about their reliability.'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍与云操作相关的服务，以及 Google Cloud 中为跟踪服务可靠性而引入的特定功能：服务监控。这个特定的功能/选项将 SRE
    技术实践（SLI、SLO 和错误预算）与 Google Cloud Operations 中可用的功能联系起来，从而让我们能够监控服务并在服务的可靠性出现问题时发出警报。
- en: Points to remember
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需要记住的要点
- en: 'The following are some important points to remember:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些需要记住的重要要点：
- en: GCP service accounts are used if GCP resources must have an identity that is
    tied to an application or a virtual machine.
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 GCP 资源必须有一个与应用程序或虚拟机相关联的身份，则使用 GCP 服务账户。
- en: Kubernetes service accounts are users that are managed by the Kubernetes API.
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kubernetes 服务账户是由 Kubernetes API 管理的用户。
- en: Cloud IAM defines who can view or change the configuration of a GKE cluster
    and Kubernetes RBAC defines who can view or change Kubernetes objects inside the
    specific GKE cluster.
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cloud IAM 定义了谁可以查看或更改 GKE 集群的配置，而 Kubernetes RBAC 定义了谁可以查看或更改特定 GKE 集群内的 Kubernetes
    对象。
- en: Workload Identity is used to access Google Cloud services from applications
    running within GKE. This prevents pods from accessing the Compute Engine metadata
    server.
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作负载身份（Workload Identity）用于从 GKE 内运行的应用程序访问 Google Cloud 服务。这防止了 pod 访问计算引擎元数据服务器。
- en: In RBAC, a Role connects API resources and verbs. An RBAC Role is cluster-wide
    scoped, while an RBAC ClusterRole is namespace scoped.
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 RBAC 中，角色连接 API 资源和动词。RBAC 角色是集群范围的，而 RBAC ClusterRole 是命名空间范围的。
- en: In RBAC, RoleBindings connect Roles to subjects. A RoleBinding is cluster-wide
    scoped, while a ClusterRoleBinding is namespace scoped.
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 RBAC 中，RoleBindings 将角色与主体连接。RoleBinding 是集群范围的，而 ClusterRoleBinding 是命名空间范围的。
- en: Every GKE cluster has its own root **CA**.
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个 GKE 集群都有自己的根 **CA**。
- en: Pod Security Context and Pod Security Policy are two ways we can define restrictions
    regarding what the containers inside a pod can do.
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pod 安全上下文和 Pod 安全策略是我们可以定义容器在 pod 内可以执行的操作限制的两种方式。
- en: A GKE Private Cluster allows you to restrict access to control planes and nodes.
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GKE 私有集群允许您限制对控制平面和节点的访问。
- en: The break-glass flag is used in deployments as an annotation; it allows pod
    creation, even if the images violate a policy.
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: break-glass 标志用于部署时作为注解；它允许创建 pod，即使镜像违反了策略。
- en: '`enable-private-nodes`: The nodes do not have external IP addresses.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enable-private-nodes`：节点没有外部 IP 地址。'
- en: '`enable-private-endpoint`: The cluster is managed by the private IP address
    of the master endpoint.'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enable-private-endpoint`：集群通过主节点的私有 IP 地址进行管理。'
- en: '`enable-master-authorized-networks`: Access to the cluster''s public endpoint
    is restricted to a specific set of source IP addresses.'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enable-master-authorized-networks`：对集群的公共端点访问仅限特定的源 IP 地址集。'
- en: Container Analysis is a service that provides vulnerability scanning and metadata
    storage for software artifacts.
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器分析是一个提供漏洞扫描和软件工件元数据存储的服务。
- en: Container Analysis stores trusted metadata that's used in the authorization process.
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器分析存储在授权过程中使用的受信元数据。
- en: Binary Authorization allows or blocks images from being deployed to GKE based
    on a policy you've configured.
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二进制授权根据您配置的策略，允许或阻止镜像部署到 GKE。
- en: A container-optimized OS or `cos_containerd` image is a Linux-based kernel that
    can continuously scan for vulnerabilities at the kernel level.
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个容器优化的操作系统或 `cos_containerd` 镜像是一个基于 Linux 内核的系统，可以持续扫描内核级别的漏洞。
- en: Shielded GKE nodes increase cluster security by using verifiable node identity
    and integrality. This can be enabled using the `--enable-shielded-nodes` option.
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 受保护的 GKE 节点通过使用可验证的节点身份和完整性提高集群安全性。可以使用 `--enable-shielded-nodes` 选项启用此功能。
- en: You can restrict traffic among pods with Network Policies.
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用网络策略来限制 Pods 之间的流量。
- en: You can configure a secret manager that has been integrated with GKE clusters.
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以配置与 GKE 集群集成的秘密管理器。
- en: You can use admission controllers to enforce a Pod Security Policy.
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以使用准入控制器来强制执行 Pod 安全策略。
- en: In terms of Workload Identity, you can use K8's service account and namespace
    as a GCP service account to authenticate GCP APIs.
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 就工作负载身份而言，您可以使用 K8 的服务帐户和命名空间作为 GCP 服务帐户来认证 GCP API。
- en: Further reading
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more information on GCP''s approach to DevOps, read the following articles:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 GCP 在 DevOps 中的应用方法，请阅读以下文章：
- en: '**Kubernetes**: [https://kubernetes.io/docs/home/](https://kubernetes.io/docs/home/)'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes**: [https://kubernetes.io/docs/home/](https://kubernetes.io/docs/home/)'
- en: '**Google Kubernetes Engine**: [https://cloud.google.com/kubernetes-engine](https://cloud.google.com/kubernetes-engine)'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Google Kubernetes Engine**: [https://cloud.google.com/kubernetes-engine](https://cloud.google.com/kubernetes-engine)'
- en: Practice test
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践测试
- en: 'Answer the following questions:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题：
- en: Network Policies are used to restrict traffic among which of the following?
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 网络策略用于限制以下哪个项之间的流量？
- en: a) Deployments
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) 部署
- en: b) Containers
  id: totrans-314
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) 容器
- en: c) Pods
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) Pods
- en: d) Container images
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) 容器镜像
- en: 'Select the RBAC option that connects a user and a role:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择连接用户和角色的 RBAC 选项：
- en: a) UserRoleBinding
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) 用户角色绑定
- en: b) RoleBindings
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) 角色绑定
- en: c) Roles
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) 角色
- en: d) RoleUserBinding
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) 角色用户绑定
- en: In a private cluster, which Google service can download a Docker image?
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在私有集群中，哪项 Google 服务可以下载 Docker 镜像？
- en: a) Cloud Build
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) Cloud Build
- en: b) Cloud Source Repository
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) Cloud Source Repository
- en: c) Elastic Container Registry
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) 弹性容器注册表
- en: d) Container Registry
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) 容器注册表
- en: What will happen if the process of rotating credentials started but never completed?
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果凭证轮换的过程开始了，但从未完成，会发生什么？
- en: a) GKE will not complete the cluster rotation.
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) GKE 将不会完成集群轮换。
- en: b) GKE will pause the cluster rotation.
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) GKE 将暂停集群轮换。
- en: c) GKE will complete the cluster rotation in 7 days.
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) GKE 将在 7 天内完成集群轮换。
- en: d) GKE will instantly complete the cluster rotation.
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) GKE 将立即完成集群轮换。
- en: Which of the following possible policies will disable privileged containers?
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪项策略会禁用特权容器？
- en: a) Network Policy
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) 网络策略
- en: b) Pod Security Policy
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) Pod 安全策略
- en: c) Network Security Policy
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) 网络安全策略
- en: d) Pod Policy
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) Pod 策略
- en: 'Select the GKE Role that allows you to manage clusters, including creating,
    deleting, getting, listing, or updating clusters. No access is given to cluster
    resources or API objects:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择允许您管理集群（包括创建、删除、获取、列出或更新集群）的 GKE 角色。此角色不授予访问集群资源或 API 对象的权限：
- en: a) GKE Admin
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) GKE 管理员
- en: b) GKE Cluster Admin
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) GKE 集群管理员
- en: c) GKE Developer
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) GKE 开发者
- en: d) GKE Cluster Developer
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) GKE 集群开发者
- en: 'With regards to a **Pod Security Policy** (**PSP**), select the order of operations:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关于**Pod 安全策略**（**PSP**），请选择操作顺序：
- en: a) Enable PSP Controller, Create PSP, Define Authorization Requirements
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) 启用 PSP 控制器，创建 PSP，定义授权要求
- en: b) Create PSP, Enable PSP Controller, Define Authorization Requirements
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) 创建 PSP，启用 PSP 控制器，定义授权要求
- en: c) Create PSP, Define Authorization Requirements, Enable PSP Controller
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) 创建 PSP，定义授权要求，启用 PSP 控制器
- en: d) Enable PSP Controller, Define Authorization Requirements, Create PSP
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) 启用 PSP 控制器，定义授权要求，创建 PSP
- en: If a specific network policy or a default policy is not defined, then which
    of the following is true?
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有定义特定的网络策略或默认策略，则以下哪项是正确的？
- en: a) Deny all ingress and all egress traffic.
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) 拒绝所有的入口流量和出口流量。
- en: b) Allow all ingress and all egress traffic.
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) 允许所有入口流量和所有出口流量。
- en: c) Deny all ingress and allow all egress traffic.
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) 拒绝所有的入口流量并允许所有出口流量。
- en: d) Allow all ingress and deny all egress traffic.
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) 允许所有入口流量并拒绝所有出口流量。
- en: 'Select the option that enforces a deploy time policy to GKE:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择强制执行 GKE 部署时策略的选项：
- en: a) Cloud IAM Policies
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) 云 IAM 策略
- en: b) AppArmor
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) AppArmor
- en: c) Cloud Armor
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) Cloud Armor
- en: d) Binary Authorization
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) 二进制授权
- en: The *service account admission controller* associates the created service accounts
    with the running pods. How are the service accounts stored and accessed?
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*服务帐户准入控制器*将创建的服务帐户与正在运行的 Pods 关联。服务帐户是如何存储和访问的？'
- en: a) Stored as plain text and accessed as environment variables at runtime
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) 作为纯文本存储，并作为环境变量在运行时访问
- en: b) Stored as a Kubernetes secret and accessed through the key management service
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) 作为 Kubernetes 密钥存储，通过密钥管理服务访问
- en: c) Stored as a Kubernetes secret and accessed as an environment variable at
    runtime
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) 作为 Kubernetes 密钥存储，作为环境变量在运行时访问
- en: d) Stored as plain text and accessed through the key management service
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) 作为纯文本存储，通过密钥管理服务访问
- en: Answers
  id: totrans-362
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: '(c): Pods'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '(c): Pods'
- en: '(b): RoleBindings'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '(b): 角色绑定'
- en: '(d): Container Registry'
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '(d): 容器注册表'
- en: '(c): GKE will complete the cluster rotation in 7 days.'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '(c): GKE 将在 7 天内完成集群轮换。'
- en: '(b): Pod Security Policy'
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '(b): Pod 安全策略'
- en: '(b): GKE Cluster Admin'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '(b): GKE 集群管理员'
- en: '(c): Create PSP, Define Authorization Requirements, Enable PSP Controller'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '(c): 创建 PSP，定义授权要求，启用 PSP 控制器'
- en: '(b): Allow all ingress and all egress traffic.'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '(b): 允许所有入口流量和所有出口流量。'
- en: '(d): Binary Authorization'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '(d): 二进制授权'
- en: '(c): Stored as a Kubernetes secret and accessed as an environment variable
    at runtime'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '(c): 作为 Kubernetes 密钥存储，作为环境变量在运行时访问'
