- en: Shell Scripts - Provisioning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Shell 脚本 - 配置
- en: 'In this chapter, we are going to look at Vagrant provisioning. We will focus
    on basic concepts and also on shell-script provisioning. By the end of this chapter,
    you will have a good understanding of:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究 Vagrant 配置。我们将重点介绍基本概念以及 Shell 脚本配置。到本章结束时，你将对以下内容有一个很好的理解：
- en: Vagrant provisioning
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vagrant 配置
- en: Understanding configuration management
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解配置管理
- en: Vagrant provisioning with a file
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用文件进行 Vagrant 配置
- en: Vagrant shell provisioning
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vagrant shell 配置
- en: Vagrant inline scripts, external scripts, and script arguments
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vagrant 内联脚本、外部脚本和脚本参数
- en: Introduction to Vagrant provisioning
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vagrant 配置介绍
- en: The idea of provisioning within Vagrant is to create a script that prepares
    and installs software onto the Vagrant machine. Provisioning can be done inline
    in the Vagrantfile using a shell provisioner or external file. Provisioning happens
    during the *vagrant up* process as the machine is being created.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Vagrant 中配置的思想是创建一个脚本，准备并安装软件到 Vagrant 机器上。配置可以通过在 Vagrantfile 中使用 shell 配置器或外部文件进行内联。配置会在
    *vagrant up* 过程中发生，机器正在创建时。
- en: 'When provisioning a Vagrant machine, there are a number of options:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置 Vagrant 机器时，有许多选项：
- en: Install software
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装软件
- en: Alter configurations
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改配置
- en: Operating-system-level changes
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统级别的更改
- en: System settings
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统设置
- en: Understanding configuration management
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解配置管理
- en: In later chapters, we will learn more about using configuration-management tools
    with Vagrant for provisioning. While talking about Vagrant provisioning, this
    will be a good introduction to configuration management.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在后续章节中，我们将进一步了解如何在 Vagrant 中使用配置管理工具进行配置。在讨论 Vagrant 配置时，这将是一个良好的配置管理入门。
- en: Configuration-management tools include Chef, Ansible, and Salt. We will be focusing
    on these three tools. Configuration management is essentially another word for
    provisioning and is used to set a machine to a desired state – this could be installing
    software or configuring certain settings.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理工具包括 Chef、Ansible 和 Salt。我们将专注于这三种工具。配置管理本质上是另一个表示配置的词汇，用于将机器设置为所需状态——这可以是安装软件或配置某些设置。
- en: 'Configuration-management tools often have a special file type or syntax that
    is used. We will be focusing on the following software:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理工具通常具有专门的文件类型或语法。我们将重点关注以下软件：
- en: '**Ansible** (uses playbooks)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ansible**（使用剧本）'
- en: '**Chef** (uses cookbooks)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Chef**（使用食谱）'
- en: '**Docker** (uses images)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker**（使用镜像）'
- en: '**Puppet** (uses manifests)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Puppet**（使用清单）'
- en: '**Salt** (uses states)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Salt**（使用状态）'
- en: Configuration management is often used when a more powerful and flexible option
    is needed in your development and deployment process. A benefit of using configuration-management
    tools is the separation of concerns. Essentially, you don't rely on Vagrant to
    handle too much during the process in case you have any issues or you want the
    flexibility of being able to change which configuration-management tool you use.
    This could be a company decision due to budget or security.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理通常在开发和部署过程中需要更强大和灵活的选项时使用。使用配置管理工具的一个好处是关注点的分离。本质上，你不会依赖 Vagrant 处理太多操作，以防你遇到问题，或者你希望具备能够更换配置管理工具的灵活性。这可能是由于公司决策，考虑到预算或安全性等因素。
- en: Basic usage of Vagrant provisioning
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vagrant 配置的基础用法
- en: To get started with provisioning our Vagrant machine, let's create a new Vagrantfile.
    We can do this by running the `vagrant init -m` command.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始配置我们的 Vagrant 机器，我们可以创建一个新的 Vagrantfile。我们可以通过运行 `vagrant init -m` 命令来实现。
- en: 'Within our Vagrantfile, we can define a provisioning block by using the `config.vm.provision`
    code and pass in a value to declare what type of provisioner we will be using.
    In the following example, we will be using the shell type:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 Vagrantfile 中，我们可以使用 `config.vm.provision` 代码定义配置块，并传递一个值声明我们将使用哪种类型的配置器。在下面的示例中，我们将使用
    shell 类型：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Using the shell provisioner, you can then define additional values inline:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 shell 配置器时，可以在内联中定义额外的值：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Or use a configuration block, where we define our shell value within pipe characters:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用配置块，在其中我们可以在管道字符内定义我们的 shell 值：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Both options would, in this example, update the system packages. Using the configuration
    block method is much easier to read, as each value can have its own line.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，两种选项都会更新系统包。使用配置块方法更容易阅读，因为每个值可以单独占一行。
- en: Vagrant provisioning commands
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vagrant 配置命令
- en: 'Once you''ve created your provisioner values, it''s time to apply those changes
    to your Vagrant machine. There are a few options:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你创建了配置值，就该将这些更改应用到Vagrant虚拟机了。你有几个选项：
- en: When you run the `vagrant up` command for the first time, your machine will
    read the Vagrantfile and run the provisioner script.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你第一次运行`vagrant up`命令时，系统会读取Vagrantfile并运行配置脚本。
- en: If you have a machine that has been halted or you want to force a provision,
    you can run `vagrant up --provision` to enable provisioning.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的机器已被停止，或者你希望强制配置，可以运行`vagrant up --provision`来启用配置。
- en: You can also use the `--no-provision` flag to disable provisioning.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你也可以使用`--no-provision`标志来禁用配置。
- en: 'Within the provision the config block, you can set a key of `run` and a value
    of `always`, which will force the provisioner script to run every time a machine
    is started up. An example of this would be `config.vm.provision "shell", inline:
    "sudo apt-get update -y", run: "always"`.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '在配置块中，你可以设置`run`键并指定`always`值，这将强制配置脚本在每次启动机器时运行。例如，`config.vm.provision "shell",
    inline: "sudo apt-get update -y", run: "always"`。'
- en: The final option will only work if the `--no-provision` flag has not been set.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一种选择仅在没有设置`--no-provision`标志时有效。
- en: Vagrant provisioning with a file
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用文件进行Vagrant配置
- en: The Vagrant file option gives you an easy way to copy a file from your host
    machine onto the Vagrant machine during the startup process.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant文件选项提供了一种简便的方法，在启动过程中将文件从主机复制到Vagrant虚拟机。
- en: This can be a great way of uploading a configuration file that would otherwise
    need to be created by the software or possibly required before the software can
    start working. An example of this would be an `.env` file that holds environment
    variables, such as database-connection details or special keys.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种上传配置文件的绝佳方式，这些文件通常需要由软件创建，或者在软件开始工作之前可能是必需的。例如，`.env`文件用于存储环境变量，如数据库连接信息或特殊密钥。
- en: There are two options available – you can copy/upload a single file or an entire
    directory from your host machine to the guest Vagrant machine.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个可用的选项——你可以从主机复制/上传一个单独的文件或整个目录到虚拟机中。
- en: 'When using this option, we set the provision option to `file` in our Vagrantfile,
    for example:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个选项时，我们在Vagrantfile中将配置选项设置为`file`，例如：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Single file
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单个文件
- en: 'Uploading a file from the host machine to the guest machine is quick and easy.
    We just need to set the provision type as `file`, the source as the file on our
    host, and the destination as:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 从主机上传文件到虚拟机既快速又简单。我们只需要将配置类型设置为`file`，源文件设置为主机上的文件，目标文件夹设置为：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will copy our `secret.env` file into the home folder of our Vagrant guest
    machine.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把我们的`secret.env`文件复制到Vagrant虚拟机的主目录中。
- en: 'If that `secret.env` file does not exist, Vagrant will throw an error during
    the startup process:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`secret.env`文件不存在，Vagrant将在启动过程中抛出错误：
- en: '![](img/00094.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00094.jpeg)'
- en: 'If the file does exist, then you will see something similar to the following
    in your console during the startup process:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件确实存在，你将在启动过程中看到类似以下内容的输出：
- en: '![](img/00095.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00095.jpeg)'
- en: 'And after running the `vagrant ssh` command and connecting to the guest machine,
    we can run the `ls` command to list the files within the directory. We will now
    see the `secret.env` file:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行`vagrant ssh`命令并连接到虚拟机后，我们可以运行`ls`命令列出目录中的文件。现在我们将看到`secret.env`文件：
- en: '![](img/00096.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00096.jpeg)'
- en: Directory
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目录
- en: Another option is to upload a directory of files and folders from your host
    machine into your guest machine. This can be useful if you require multiple assets,
    such as images or configuration files, in a separate and managed way.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是将文件和文件夹的目录从主机上传到虚拟机。如果你需要多个资源文件，如图像或配置文件，并且希望它们在一个独立且可管理的方式中，这将非常有用。
- en: 'It''s very similar to the file option when adding this option into our Vagrantfile:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个选项添加到Vagrantfile中时，它与文件选项非常相似：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We set our source value to be a folder within the current Vagrant directory.
    You can specify an absolute path if the folder is located elsewhere on your host
    system.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将源值设置为当前Vagrant目录中的一个文件夹。如果文件夹位于主机系统的其他位置，你也可以指定绝对路径。
- en: The destination folder can use the `$HOME` variable to create the new folder
    in the home folder of our guest machine. This folder can have the same name or
    a new name on the guest machine. It depends on your requirements.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 目标文件夹可以使用`$HOME`变量，在我们的来宾机器的主文件夹中创建新文件夹。此文件夹可以与来宾机器上的现有文件夹同名，或使用一个新名称，这取决于你的需求。
- en: 'We can run the `vagrant up --provision` command to start up the Vagrant machine.
    We will see the message again in the output during the process:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以运行`vagrant up --provision`命令来启动 Vagrant 机器。在此过程中，我们将在输出中再次看到该消息：
- en: '![](img/00097.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00097.jpeg)'
- en: 'Once the machine is up-and-running, we can run the `vagrant ssh` command machine
    and run the `ls` command. We will then see the folder in the home directory. If
    we run the `ls newsecretfolder/` command to view the contents of our new folder,
    we will see the `secret.env` file:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦机器启动并运行，我们可以运行`vagrant ssh`命令连接到机器并运行`ls`命令。然后我们将在主目录中看到该文件夹。如果我们运行`ls newsecretfolder/`命令查看新文件夹的内容，将看到`secret.env`文件：
- en: '![](img/00098.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00098.jpeg)'
- en: Please note**:** When using this option compared to the synced folder featured,
    any changes made on the host/local machine will not be reflected on the guest
    machine.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意**：**与同步文件夹功能相比，使用此选项时，主机/本地机器上的任何更改将不会反映到来宾机器上。
- en: Vagrant Shell provisioner
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vagrant Shell 配置器
- en: We've seen how to use a basic shell provisioner, but depending on your setup
    and required environment, you may have quite a large, complex provisioner script.
    This script may require arguments or environment variables, or may be linked to
    an external resource hosted elsewhere.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何使用基本的 shell 配置器，但根据你的设置和所需的环境，你可能会有一个非常大且复杂的配置器脚本。这个脚本可能需要参数或环境变量，或者可能链接到其他地方托管的外部资源。
- en: In this section, we will look at the many options available when using shell
    as a Vagrant provisioner. This is often used by beginners but can be very powerful
    and flexible, especially if you do not want to set up configuration-management
    tools such as Chef and Ansible.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将查看使用 shell 作为 Vagrant 配置器时提供的众多选项。这通常是初学者使用的，但它非常强大且灵活，尤其是当你不想设置像 Chef
    和 Ansible 这样的配置管理工具时。
- en: 'When using the shell provisioner, there are optional configuration settings
    available:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 shell 配置器时，有一些可选的配置设置：
- en: '**args**: These are arguments that you specify for use by the provisioning
    script. This can be a string or an array of values.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**args**：这些是你为配置脚本指定的参数。可以是一个字符串或一个值的数组。'
- en: '**env**: This is a list of key-value pairs (hash) as environment variables
    to the script.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**env**：这是传递给脚本的键值对（哈希）列表，作为环境变量。'
- en: '**binary**: Vagrant by default replaces Windows line endings with Unix line
    endings, unless you change this value to true.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**binary**：默认情况下，Vagrant 会将 Windows 的行结束符替换为 Unix 的行结束符，除非你将此值更改为 true。'
- en: '**privileged**: This allows you to change whether the script will be run by
    a privileged user, such as `sudo`. The default value is true.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**特权**：这允许你更改脚本是否由特权用户运行，例如`sudo`。默认值为true。'
- en: '**upload_path**: This is the path on the guest machine that the script will
    be uploaded to. The SSH user account must have access to write to that folder/file
    location, otherwise this will fail.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**upload_path**：这是脚本将上传到的来宾机器上的路径。SSH 用户帐户必须有权限写入该文件夹/文件位置，否则会失败。'
- en: '**keep_color**: Vagrant currently outputs success messages in green and error
    messages in red. If you change this value to false, this behavior will be stopped.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保持颜色**：Vagrant 当前将成功消息输出为绿色，错误消息输出为红色。如果将此值更改为false，则会停止此行为。'
- en: '**name**: This can be used to identify the provisioner output if there are
    many different provisioners running in the process.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**name**：这可以用于标识多个不同配置器在该过程中运行时的输出。'
- en: '**powershell_args**: These are arguments that can be passed to the provisioner
    if you are using PowerShell on Windows.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**powershell_args**：这些是如果在 Windows 上使用 PowerShell 时可以传递给配置器的参数。'
- en: '**powershell_elevated_interactive**: This is used when trying to elevate a
    script in interactive mode on Windows. You must enable auto-login on Windows and
    the user must be logged in for this to work.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**powershell_elevated_interactive**：当在 Windows 上尝试以交互模式提升脚本时使用。你必须启用 Windows
    自动登录，并且用户必须已登录才能使其生效。'
- en: '**md5**: The MD5 value (checksum) is used to verify downloaded shell files.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**md5**：MD5 值（校验和）用于验证已下载的 shell 文件。'
- en: '**sha1**: The SHA1 value (checksum) is used to verify downloaded shell files.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**sha1**：SHA1 值（校验和）用于验证已下载的 shell 文件。'
- en: '**sensitive**: If you specify values in the `env` option, it will mark these
    as sensitive and not show them in the output.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**敏感**：如果你在`env`选项中指定值，它将把这些值标记为敏感并且不会在输出中显示。'
- en: We'll focus on inline scripts, external scrips, and script arguments.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重点讨论内联脚本、外部脚本和脚本参数。
- en: Inline Scripts
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内联脚本
- en: We've briefly touched upon inline scripts, but there are more options available
    that can be added into the configuration for provisioning.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简要提到了内联脚本，但还有更多可添加到配置中的选项，用于配置安装。
- en: 'You can run a script inline using the following syntax:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下语法来运行内联脚本：
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Or you could create a variable outside the block and use that variable for
    a cleaner and easier-to-read format:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以在块外创建一个变量，并使用该变量来获得更简洁、更易读的格式：
- en: '[PRE7]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can experiment with both options and see what works best for you. You may
    find that, when working on a development team, they already have a syntax you
    must follow when creating and editing Vagrantfiles.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以尝试这两种选项，看看哪种最适合你。在开发团队中工作时，你可能会发现他们已经有了你必须遵循的语法，用于创建和编辑 Vagrantfile。
- en: External scripts
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 外部脚本
- en: Another option when using shell provisioning is to use external scripts. This
    can be a good way to keep your script separate, which means it's easier to manage
    and helps keep your Vagrantfile tidy.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 shell 配置的另一个选项是使用外部脚本。这是一种很好的方法，可以将脚本与其他内容分开，这样更容易管理，并有助于保持 Vagrantfile 的整洁。
- en: 'To use an external script, we can use the following syntax:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用外部脚本，我们可以使用以下语法：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the preceding example, the `"[FILELOCATION]"` placeholder could be one of
    two different options:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，`"[FILELOCATION]"`占位符可以是两种不同的选项之一：
- en: A local script on your machine; an example value would be `script.sh`
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地脚本，位于你的机器上；例如值为`script.sh`
- en: A remote script hosted externally; an example value would be `https://example.com/dev/script.sh`
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个托管在外部的远程脚本；例如值为`https://example.com/dev/script.sh`
- en: One benefit of using a remote script is that anyone who is using that Vagrantfile
    to run a specific machine configuration will always get the most up-to-date version.
    If you are on a team of developers and a change is made to the provisioner script,
    all of the other developers just need to run the `vagrant up --provision` command
    and will then be using the same machine.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用远程脚本的一个好处是，任何使用该 Vagrantfile 运行特定机器配置的人都将始终获得最新版本。如果你在一个开发团队中，当对配置脚本进行更改时，其他开发人员只需要运行`vagrant
    up --provision`命令，然后就可以使用相同的机器配置。
- en: Script arguments
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本参数
- en: Another great feature of shell provisioning is the option of using arguments.
    These are values that can be passed in as variables and can be easier to manage
    when data is dynamic.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: shell 配置的另一个好处是可以使用参数。这些是可以作为变量传入的值，当数据是动态时，它们可以更容易地管理。
- en: Script arguments can be passed in as a string or as an array. A string is useful
    when only one argument is required and an array is useful when multiple arguments
    are required.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本参数可以作为字符串或数组传入。字符串在仅需一个参数时很有用，而数组在需要多个参数时很有用。
- en: Script argument – string
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本参数 – 字符串
- en: 'The following is a syntax example when using a string script argument in your
    Vagrantfile:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是在 Vagrantfile 中使用字符串脚本参数时的语法示例：
- en: '[PRE9]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When the *vagrant up* process hits the provisioning stage, we will see an output
    echoed onto the screen with a value of `this is a test`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当*vagrant up*进程进入配置阶段时，我们将看到一个值为`this is a test`的输出回显到屏幕上：
- en: '![](img/00099.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00099.jpeg)'
- en: 'Please note: You must remember to properly escape your string. In this case,
    we are wrapping the string within single quotes. The system would essentially
    see the ''this is a test'' echo, which would not throw any errors.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意：你必须记得正确转义字符串。在这种情况下，我们将字符串包裹在单引号中。系统会看到`'this is a test'`回显，这不会抛出任何错误。
- en: Script argument – array
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本参数 – 数组
- en: 'Here is the syntax example when using an array script argument in your Vagrantfile:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是使用数组脚本参数时在 Vagrantfile 中的语法示例：
- en: '[PRE10]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Similarly to the string argument option, when this provisioner is started within
    the *vagrant up* process, we will see an output echoed on the screen with a value
    of `this is a test`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 与字符串参数选项类似，当在*vagrant up*进程中启动此配置器时，我们将在屏幕上看到值为`this is a test`的输出：
- en: '![](img/00100.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00100.jpeg)'
- en: 'Please note: It''s not necessary to quote the individual values in the array.
    It is still recommended you escape any special characters to minimize any errors.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意：不必为数组中的单个值加引号，但建议你转义任何特殊字符，以减少错误。
- en: Summary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about Vagrant provisioning and configuration management.
    We provisioned a Vagrant machine using the basic usage type, file type, and shell
    type using inline and external scripts with arguments.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了 Vagrant 的配置与管理。我们通过基本用法类型、文件类型和 shell 类型，使用内联和外部脚本带参数来配置 Vagrant
    虚拟机。
- en: In [Chapter 10](part0230.html#6RB1C0-d86fec2f29de42f086efd11bc5538d9c), *Ansible
    - Using Ansible to Provision a Vagrant Box*, we will learn more about the Ansible
    configuration-management tool, and use that to provision a Vagrant machine. We
    will learn how to use Ansible and Ansible playbooks, including the syntax.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第10章](part0230.html#6RB1C0-d86fec2f29de42f086efd11bc5538d9c)，*Ansible - 使用
    Ansible 配置 Vagrant Box*，我们将深入了解 Ansible 配置管理工具，并使用它来配置 Vagrant 虚拟机。我们将学习如何使用 Ansible
    和 Ansible playbooks，包括其语法。
