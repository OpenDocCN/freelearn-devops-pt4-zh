- en: Ansible - Using Ansible to Provision a Vagrant Box
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible - 使用 Ansible 配置 Vagrant Box
- en: 'In the second part in our provisioning series, we will be learning about Ansible
    and how to use it to provision a Vagrant machine. The following are the topics
    we''re going to cover in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的配置系列的第二部分中，我们将学习关于 Ansible 的知识，如何使用它来配置 Vagrant 机器。本章将覆盖以下主题：
- en: Understanding Ansible
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Ansible
- en: Installing Ansible on macOS
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 Ansible
- en: Provisioning Vagrant using Ansible on the host machine
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Ansible 在主机机器上提供 Vagrant
- en: Provisioning Vagrant using Ansible on the guest machine
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在来宾机器上使用 Ansible 配置 Vagrant
- en: Ansible Playbooks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible Playbooks
- en: By the end of this chapter, you will feel confident using Ansible to provision
    Vagrant machines. You will have a good understanding of how Ansible works and
    will have links to Vagrant, and will be able to use Ansible on both the host machine
    and Vagrant machine by using Playbooks to configure exactly what you need.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够自信地使用 Ansible 来配置 Vagrant 机器。你将对 Ansible 的工作原理有一个很好的理解，并且能通过 Playbooks
    配置你所需的内容，能够在主机和 Vagrant 机器上使用 Ansible。
- en: Understanding Ansible
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Ansible
- en: 'Ansible is an open source piece of software used to make *IT automation simple* and
    offers *automation for everyone*. Ansible is a tool used for configuration management,
    software provisioning, and application deployment. It''s a powerful tool that
    offers many features. These features include the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 是一个开源软件，用于使*IT 自动化更简单*，并为*每个人提供自动化*。Ansible 是一个用于配置管理、软件供应和应用程序部署的工具。它是一个功能强大的工具，提供了许多功能。这些功能包括以下内容：
- en: It can run locally on the host or guest machine
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以在主机或来宾机器上本地运行
- en: It has an extensive plugin ecosystem
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它拥有丰富的插件生态系统
- en: It can orchestrate infrastructure using many cloud providers
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以使用许多云提供商来协调基础设施
- en: It can be installed on many different operating systems
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以安装在许多不同的操作系统上
- en: It has simple inventory management
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有简单的库存管理
- en: It has simple and powerful automation with Playbooks
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它拥有简单而强大的自动化功能，通过 Playbooks 来实现
- en: Well-written and extensive documentation
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写良好的详细文档
- en: Ansible offers a minimal approach to provisioning your software with an easy
    to learn syntax and is built to be reliable and secure. We'll learn more about
    Ansible as we work through this chapter by installing it, creating and testing
    Playbooks, and provisioning a Vagrant machine.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 提供了一种简单的方式来配置软件，拥有易于学习的语法，并且构建可靠、安全。我们将在本章中通过安装 Ansible、创建和测试 Playbooks、以及配置
    Vagrant 机器来进一步了解 Ansible。
- en: Some more interesting facts about Ansible are that it is part of Red Hat, it
    is written in Python and PowerShell, its first release was in February 2012, and
    there is a web-based interface called Ansible Tower that can be used to make managing
    Ansible even easier.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Ansible 还有一些有趣的事实：它是 Red Hat 的一部分，使用 Python 和 PowerShell 编写，首次发布是在 2012 年
    2 月，并且有一个基于 Web 的界面，叫做 Ansible Tower，可以用来简化 Ansible 的管理。
- en: Installing Ansible
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Ansible
- en: In this first part, we will learn how to install Ansible on our host machine,
    which in this instance is the macOS. Later in this chapter, we will learn how
    to install Ansible on Ubuntu, which will be running inside our guest Vagrant machine.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一部分中，我们将学习如何在主机机器上安装 Ansible，本例中为 macOS。稍后在本章中，我们将学习如何在 Ubuntu 上安装 Ansible，而
    Ubuntu 将运行在我们的来宾 Vagrant 机器中。
- en: Installing Ansible on macOS High Sierra (version 10.13)
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 macOS High Sierra (版本 10.13) 上安装 Ansible
- en: 'Before we can start provisioning our Vagrant machine using Ansible, we first
    need to install it on our host machine. We won''t look at any advanced installations – just
    the basics to get Ansible up and running on our machine. If you are using another
    operating system, then please feel free to use the excellent Ansible docs available
    at [https://docs.ansible.com/](https://docs.ansible.com/):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用 Ansible 配置 Vagrant 机器之前，我们首先需要在主机上安装它。我们不会讨论任何高级安装方法——仅仅是安装 Ansible
    并使其运行的基础内容。如果你使用的是其他操作系统，请随时参考[Ansible 的官方文档](https://docs.ansible.com/)。
- en: We first need to visit the Installation Guide page at [https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html](https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html).
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先需要访问[安装指南页面](https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html)。
- en: There is a list of supported operating systems, but we need to click on the Latest
    Releases on macOS section.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这里列出了支持的操作系统，但我们需要点击 macOS 部分的最新版本。
- en: Here, we will see that the preferred option is to install Ansible via `pip`.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们会看到首选的选项是通过 `pip` 安装 Ansible。
- en: 'You can check to see whether you have pip installed by running `pip -v`:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以通过运行 `pip -v` 命令来检查是否已安装 pip：
- en: '![](img/00101.jpeg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00101.jpeg)'
- en: 'If you do not have it installed, then you can run the `sudo easy_install pip`
    command:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你没有安装，可以运行 `sudo easy_install pip` 命令：
- en: '![](img/00102.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00102.jpeg)'
- en: You'll need to enter your system password as the command requires `sudo`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要输入系统密码，因为该命令需要 `sudo` 权限。
- en: 'You can now install Ansible by running the `sudo pip install ansible` command:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你可以通过运行 `sudo pip install ansible` 命令来安装 Ansible：
- en: '![](img/00103.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00103.jpeg)'
- en: Again, you will need to enter your system password as the command requires `sudo`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提示，你需要输入系统密码，因为该命令需要 `sudo` 权限。
- en: 'Finally, we can check that Ansible has been successfully installed by running
    the `ansible --version` command:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以通过运行 `ansible --version` 命令来检查 Ansible 是否已成功安装：
- en: '![](img/00104.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00104.jpeg)'
- en: 'You can see that I have the latest version installed: 2.6.3.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到我安装的是最新版本：2.6.3。
- en: Congratulations – you have successfully installed Ansible! We can now start
    to configure and provision our Vagrant machine.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜——你已经成功安装了 Ansible！现在我们可以开始配置和配置我们的 Vagrant 机器。
- en: Provisioning Vagrant using Ansible
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Ansible 配置 Vagrant
- en: In this section, we will look at two different ways of provisioning Vagrant
    with Ansible. The first will involve running Ansible on our host (macOS) machine
    and the second will involve running Ansible on our guest (Ubuntu) machine running
    inside Vagrant.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将研究两种不同的通过 Ansible 配置 Vagrant 的方式。第一种是通过在我们的主机（macOS）机器上运行 Ansible，第二种是在
    Vagrant 内运行的客机（Ubuntu）上运行 Ansible。
- en: '**Please Note:** We will be using the ubuntu/xenial64 box and the version number
    is `virtualbox, 20180510.0.0`.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**请注意：**我们将使用 ubuntu/xenial64 盒子，版本号为 `virtualbox, 20180510.0.0`。'
- en: Provisioning Vagrant using Ansible on the host machine
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在主机上使用 Ansible 配置 Vagrant
- en: 'Let''s set up a basic Vagrant environment and provision it using Ansible from
    our host machine. We''ll learn how to configure Ansible in the Vagrantfile and
    install software into our Vagrant guest machine running Ubuntu:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设置一个基本的 Vagrant 环境，并通过 Ansible 从主机配置它。我们将学习如何在 Vagrantfile 中配置 Ansible，并安装软件到我们运行
    Ubuntu 的 Vagrant 客户机中：
- en: Let's create a new Vagrantfile in a new directory to start afresh. We can run
    the `vagrant init -m` command to do this.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在一个新目录中创建一个新的 Vagrantfile，从头开始。我们可以运行 `vagrant init -m` 命令来做到这一点。
- en: 'In our Vagrant file, we''ll set the box as Ubuntu by adding in the `config.vm.box
    = "ubuntu/xenial64"` line and also the networking line:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的 Vagrant 文件中，我们通过添加 `config.vm.box = "ubuntu/xenial64"` 这一行来设置盒子为 Ubuntu，还要添加网络配置行：
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can now create a `provision` block:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以创建一个 `provision` 块：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Save the Vagrant file and exit your text editor.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存 Vagrant 文件并退出文本编辑器。
- en: 'If you now run the `vagrant up --provision` command, you will see an error
    during the final provisioning stage:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在运行 `vagrant up --provision` 命令，在最后的配置阶段你会看到一个错误：
- en: '![](img/00105.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00105.jpeg)'
- en: This is because Ansible and Vagrant cannot find the playbook `vagrant_playbook.yml`.
    In the same directory as your Vagrantfile, we will now create our playbook file.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为 Ansible 和 Vagrant 无法找到 playbook `vagrant_playbook.yml`。在与你的 Vagrantfile
    相同的目录下，我们现在来创建 playbook 文件。
- en: 'Add in the following code (we''ll go through this later so that you know exactly
    what it does):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 添加以下代码（我们稍后会详细讲解，以便你清楚它的作用）：
- en: '[PRE2]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Please note: The Playbook file is very strict with regards to its formatting
    and syntax. You may only use spaces and not tabs in the YAML file. If you have
    any issues, try removing all spaces and adding natural indent spaces (1 space
    for top level, 2 spaces for child, and so on). You can use a YAML code/syntax
    validator tool online (This is the website/tool that I used: [http://www.yamllint.com](http://www.yamllint.com/)).'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意：Playbook 文件在格式和语法上非常严格。在 YAML 文件中只能使用空格，不能使用制表符（Tab）。如果遇到问题，尝试去除所有空格，并添加适当的缩进（顶级使用
    1 个空格，子级使用 2 个空格，以此类推）。你可以使用在线 YAML 代码/语法验证工具（这是我使用的网站/工具：[http://www.yamllint.com](http://www.yamllint.com/)）。
- en: This markup will install the latest version of Nginx onto the Vagrant machine.
    It will then start the Nginx service so that it will be up and running, ready
    to use. You may need to run the `vagrant destroy -f` command first if you already
    have a machine running.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个标记会将最新版本的 Nginx 安装到 Vagrant 机器上。然后它会启动 Nginx 服务，使其运行并准备好使用。如果你已经有运行中的机器，可能需要先运行
    `vagrant destroy -f` 命令。
- en: Run the `vagrant up --provision` command to start the startup process and get
    Ansible running. You'll see a lot of new coloured output at the provisioning stage,
    and this will be Ansible installing and configuring Nginx.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `vagrant up --provision` 命令以开始启动过程并启动 Ansible。你将在配置阶段看到大量新的彩色输出，这些输出表示 Ansible
    正在安装和配置 Nginx。
- en: 'The provisioner will start running `ansible_local` as we specified in the Vagrantfile:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 配置器将开始运行我们在 Vagrantfile 中指定的 `ansible_local`：
- en: '![](img/00106.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00106.jpeg)'
- en: 'It will then run the ansible-playbook handler:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它将运行 ansible-playbook 处理程序：
- en: '![](img/00107.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00107.jpeg)'
- en: 'Finally, you will see an overview of what Ansible has done (or sometimes not
    done, which results in a red failure). We can see here that the green `ok=3` value
    means that 3 items have been run successfully, and the yellow `changed=1` value
    means that one item has been changed successfully:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你将看到 Ansible 所做工作的概览（或者有时没有做工作，这会导致红色的失败）。我们可以看到绿色的 `ok=3` 值表示有 3 项已成功运行，而黄色的
    `changed=1` 值表示有一项已成功更改：
- en: '![](img/00108.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00108.jpeg)'
- en: We should now be able to access our Vagrant machine using the IP address of
    `10.10.10.10` as we set the networking config in the Vagrantfile.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在应该能够使用 `10.10.10.10` 的 IP 地址访问我们的 Vagrant 机器，因为我们在 Vagrantfile 中设置了网络配置。
- en: 'Open up your browser to that IP address and you should see the default Nginx
    welcome screen:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器并访问该 IP 地址，你应该能看到默认的 Nginx 欢迎页面：
- en: '![](img/00109.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00109.jpeg)'
- en: Congratulations! You have successfully installed Nginx using Ansible to provision
    Vagrant from your host machine. We covered quite a lot here, but in the next section
    we will learn more about playbooks.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经成功使用 Ansible 从宿主机配置 Vagrant 安装了 Nginx。我们在这里讲解了很多内容，但在下一节中，我们将学习更多关于 Playbook
    的知识。
- en: Provisioning Vagrant using Ansible on the guest machine
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在客户机上使用 Ansible 配置 Vagrant
- en: Now that we've successfully provisioned our Vagrant machine and installed the
    Nginx service using the host method, we can learn how to provision Vagrant using
    Ansible on the guest (Vagrant) machine.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经成功配置了 Vagrant 机器并使用宿主机方法安装了 Nginx 服务，接下来我们可以学习如何在客户机（Vagrant 机器）上使用 Ansible
    配置 Vagrant。
- en: This method is much simpler as it allows everything to be done within the guest
    machine. You do not require any additional software on your host machine. Vagrant
    will intelligently try and install Ansible on the guest machine if it cannot be
    found or accessed.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法更简单，因为它允许在客户机内完成所有操作。你不需要在宿主机上安装任何额外的软件。如果找不到或无法访问 Ansible，Vagrant 会智能地尝试在客户机上安装它。
- en: 'The following steps are similar to the previous steps, but we''ll be adding
    some additional configuration into our Vagrantfile:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的步骤与之前的步骤相似，但我们将向 Vagrantfile 中添加一些额外的配置：
- en: Run the `vagrant init -m` command to create a new Vagrantfile (you may need
    to clear our the current directory or use a new, empty directory if you have followed
    the previous steps).
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `vagrant init -m` 命令以创建一个新的 Vagrantfile（如果你按照之前的步骤操作，可能需要清空当前目录或使用一个新的空目录）。
- en: 'In our Vagrant file, we''ll set the box to be Ubuntu by adding in the `config.vm.box
    = "ubuntu/xenial64"` line and also the networking line:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的 Vagrantfile 中，我们将通过添加 `config.vm.box = "ubuntu/xenial64"` 行来设置盒子为 Ubuntu，并且还需要添加网络配置行：
- en: '[PRE3]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We can now create a `provision` block:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以创建一个 `provision` 块：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save the Vagrantfile and run the `vagrant up --provision` command to get the
    Vagrant machine up and running.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存 Vagrantfile 并运行 `vagrant up --provision` 命令，以启动并运行 Vagrant 机器。
- en: 'We''ll see a similar process here until Vagrant gets to the provisioning stage.
    Our guest machine does not have Ansible installed, so it will start to install
    it. We can see the `ansible_local` provisioner being used here:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会看到类似的过程，直到 Vagrant 进入配置阶段。我们的客户机没有安装 Ansible，因此它将开始安装它。我们可以看到这里使用了 `ansible_local`
    配置器：
- en: '![](img/00110.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00110.jpeg)'
- en: 'Since we stated that the install mode would be `pip` in our Vagrantfile, the
    pip package manager will now be installed onto our guest machine:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在 Vagrantfile 中指定了安装模式为 `pip`，因此 pip 包管理器将被安装到我们的客户机上：
- en: '![](img/00111.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00111.jpeg)'
- en: 'The Vagrant provisioner will now find and run the Ansible Playbook:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 配置器将找到并运行 Ansible Playbook：
- en: '![](img/00112.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00112.jpeg)'
- en: 'Ansible will now run within the guest machine to install the contents of the
    Playbook. We can see in the following screenshot that Nginx was installed and
    started successfully, and that we had no failed elements:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 现在将在客户机内运行，以安装 Playbook 中的内容。我们可以在以下截图中看到，Nginx 已成功安装并启动，并且没有失败的元素：
- en: '![](img/00113.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00113.jpeg)'
- en: 'We can now visit `10.10.10.10` in our web browser and see the Nginx default
    page. This will confirm that Nginx has been installed successfully and that the
    service is running:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在浏览器中访问 `10.10.10.10`，并看到 Nginx 的默认页面。这将确认 Nginx 已成功安装并且服务正在运行：
- en: '![](img/00114.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00114.jpeg)'
- en: 'Let''s now SSH into the Vagrant guest machine by running the `vagrant ssh`
    command. Once connected, we can run the `ansible --version` command to confirm
    that Ansible has been installed on our guest system:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过运行 `vagrant ssh` 命令 SSH 进入 Vagrant 客户机。连接后，我们可以运行 `ansible --version`
    命令来确认 Ansible 是否已安装在目标系统上：
- en: '![](img/00115.jpeg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00115.jpeg)'
- en: We can see that the Ansible version that has been installed is 2.6.3\. Within
    our Vagrantfile, we have used some additional Ansible values, which we will learn
    more about in the next section.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到已安装的 Ansible 版本是 2.6.3。在我们的 Vagrantfile 中，我们使用了一些额外的 Ansible 值，我们将在下一部分深入了解。
- en: Additional Ansible options
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外的 Ansible 选项
- en: Vagrant supports additional options when using Ansible and Ansible local as
    a provisioner. These options allow you to add extra functionality and customization
    to the provisioning process.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 在使用 Ansible 和 Ansible local 作为配置器时支持额外的选项。这些选项允许您向配置过程添加额外的功能和自定义设置。
- en: Provisioner – Ansible
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置器 – Ansible
- en: 'In this section, we''ll look at what additional options can be used with the
    Ansible provisioner:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨可以与 Ansible 配置器一起使用的其他选项：
- en: '`ask_become_pass`: When set to true (boolean), it will prompt for a password
    when using the become `sudo` option in Ansible.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ask_become_pass`：当设置为 true（布尔值）时，它会在使用 Ansible 中的 `sudo` 提升权限时提示输入密码。'
- en: '`ask_sudo_pass`: This is essentially ask_become_pass, but will be phased out
    in future versions of Vagrant. It''s used for backward compatibility.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ask_sudo_pass`：这基本上是 `ask_become_pass`，但将在 Vagrant 的未来版本中被淘汰。它用于向后兼容性。'
- en: '`ask_vault_pass` : When set to true (boolean), it will force Ansible to prompt
    for a vault password. Ansible Vault is used to keep sensitive data and passwords
    encrypted so that you don''t have to worry about them being visible in plain text
    in a Playbook.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ask_vault_pass`：当设置为 true（布尔值）时，它会强制 Ansible 提示输入密码。Ansible Vault 用于将敏感数据和密码加密存储，以便您不必担心它们在
    Playbook 中以明文形式暴露。'
- en: '`force_remote_user`: This will require Vagrant to set the `ansible_ssh_user`
    in the inventory. Ansible will use the `config.ssh.username` value from the Vagrantfile
    instead of using the `remote_user` parameters in the Ansible Playbook.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`force_remote_user`：此选项将要求 Vagrant 在清单中设置 `ansible_ssh_user`。Ansible 将使用 Vagrantfile
    中的 `config.ssh.username` 值，而不是使用 Ansible Playbook 中的 `remote_user` 参数。'
- en: '`host_key_checking`: This option will require Ansible to enable SSH host key
    checking.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host_key_checking`：此选项将要求 Ansible 启用 SSH 主机密钥检查。'
- en: '`raw_ssh_args`: This option can be used in order to apply a list of OpenSSH
    client options. The value is typically an array of strings.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`raw_ssh_args`：此选项可用于应用一组 OpenSSH 客户端选项。该值通常是一个字符串数组。'
- en: 'Please note: It''s worth checking out the official Vagrant and Ansible documentation
    for more in-depth explanations of these options and to find out whether there
    is anything that you may require but are not quite sure of the name or how it''s
    applied.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意：建议查看官方的 Vagrant 和 Ansible 文档，获取这些选项的更深入解释，并了解是否有任何您可能需要的内容，但不确定其名称或如何应用。
- en: Provisioner – Ansible local
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置器 – Ansible local
- en: 'In this section, we''ll look at what additional options can be used with the
    Ansible local Provisioner:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨可以与 Ansible local 配置器一起使用的其他选项：
- en: '`install`: This option is enabled by default and will attempt to install Ansible
    on the guest system if it cannot be found/run.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`install`：此选项默认启用，如果目标系统未安装或无法运行 Ansible，则会尝试在目标系统上安装 Ansible。'
- en: '`install_mode`: This option allows you to choose how Ansible is to be installed
    on the guest system. You can choose default, `pip`, or `pip_args_only`. The default
    option will attempt to use the guest operating system''s package manager. The
    pip option will use the Python package manager. The `pip_args_only` option works
    similarly to the pip option, but does not allow Vagrant to automatically set pip
    options.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`install_mode`：此选项允许您选择如何在目标系统上安装 Ansible。您可以选择默认选项、`pip` 或 `pip_args_only`。默认选项将尝试使用目标操作系统的包管理器。`pip`
    选项将使用 Python 包管理器。`pip_args_only` 选项与 `pip` 选项类似，但不允许 Vagrant 自动设置 pip 选项。'
- en: '`pip_args`: This option is used when the `install_mode` is set to use pip.
    It allows you to pass pip arguments into the command line.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pip_args`：当`install_mode`设置为使用pip时，此选项会使用。它允许你将pip参数传递到命令行。'
- en: '`provisioning_path`: This is a path to the directory where Ansible files are
    stored. Commands such as `ansible-playbook` are run from this location.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`provisioning_path`：这是Ansible文件存储的目录路径。诸如`ansible-playbook`之类的命令都从此位置运行。'
- en: '`tmp_path`: This is an absolute path on the guest machine where files can be
    stored temporarily by the Ansible local provisioner.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tmp_path`：这是在客户机上的绝对路径，用于Ansible本地提供者临时存储文件。'
- en: Please note: It's worth checking out the official Vagrant and Ansible documentation
    for more in-depth explanations for these options and to find out whether there
    is anything that you may require but are not quite sure of the name or how it's
    applied.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意：值得查看官方的Vagrant和Ansible文档，以便获得更深入的解释，并了解是否有你需要的内容，但不太确定其名称或如何应用。
- en: Ansible Playbooks
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible Playbooks
- en: 'An Ansible Playbook is a configuration file used by Ansible. You can think
    of it as a Vagrantfile for Vagrant. It uses the YAML (Yet Another Markup Language)
    markup language as the syntax and is easily readable:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible Playbook是Ansible使用的配置文件。你可以把它看作是Vagrant的Vagrantfile。它使用YAML（Yet Another
    Markup Language）标记语言作为语法，并且易于阅读：
- en: '[PRE5]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s look at the example playbook we created in the previous section, shown
    here in the above code block, and dissect it to get a better understanding of
    what it all means:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下我们在上一节中创建的示例Playbook，如上面代码块所示，并对其进行剖析，以便更好地理解它的含义：
- en: The first line is always three dashes to signify the beginning of the file.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一行始终是三个短横线，用于标志文件的开始。
- en: We must then define which hosts this applies to. These can often be defined
    in the Ansible inventory file by setting a value such as [db] and supplying an
    IP address for that node.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们必须定义这些配置适用于哪些主机。通常可以在Ansible的库存文件中定义这些主机，通过设置类似[db]的值，并为该节点提供IP地址。
- en: We then set the `sudo` value to `yes` as we require sudo/root privileges to
    install Nginx on the Vagrant guest machine.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们将`sudo`值设置为`yes`，因为我们需要sudo/root权限来在Vagrant客户机上安装Nginx。
- en: We then move into the tasks section, which is what we want Ansible to do – the
    provisioning stage. We'll separate each task with a name section. This describes
    what we want the task to do, for example, `start nginx`.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们进入任务部分，这就是我们希望Ansible执行的操作——配置阶段。我们将通过名称部分分隔每个任务。它描述了我们希望任务做什么，例如，`start
    nginx`。
- en: Within a task, we can define the actions. In our first one called `apt`, we
    are calling the package manager (apt-get) to install the latest version of the
    Nginx package.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一个任务中，我们可以定义操作。在我们第一个名为`apt`的任务中，我们调用包管理器（apt-get）来安装最新版本的Nginx包。
- en: We then move to our final task which makes sure the Nginx service has been started.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们进入最后一个任务，确保Nginx服务已经启动。
- en: I hope you can see from this example that Ansible Playbooks are very easy to
    read and work down in a logical flow. You'll come across much more complex Playbooks
    and some similar ones compared to this example, but always follow the indentation
    within each block to get a better understanding of what each section does.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你能从这个例子中看到，Ansible Playbooks非常易于阅读，并且按逻辑流程工作。你会遇到比这个例子更复杂的Playbooks，以及一些相似的Playbooks，但始终遵循每个块中的缩进，以更好地理解每个部分的功能。
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to provision Vagrant using Ansible on the host
    and guest machine. We've also learned what Ansible is and about Ansible Playbooks.
    If you use Ansible in your company, then I would recommend trying it with Vagrant
    to help with your development workflow.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何在主机和客户机上使用Ansible来配置Vagrant。我们还学习了Ansible是什么，以及Ansible Playbooks。如果你在公司中使用Ansible，那么我建议你尝试将其与Vagrant结合使用，以帮助你的开发工作流。
- en: In [Chapter 12](part0257.html#7L30I0-d86fec2f29de42f086efd11bc5538d9c), *Docker
    - Using Docker with Vagrant*, we will be continuing our series on provisioning
    by learning about Chef and how to use that configuration management tool to provision
    Vagrant. We will look at multiple Chef options (solo and client) and learn about
    Chef cookbooks.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](part0257.html#7L30I0-d86fec2f29de42f086efd11bc5538d9c)，*Docker - 在Vagrant中使用Docker*，我们将继续我们的配置系列，学习Chef以及如何使用该配置管理工具来配置Vagrant。我们将研究多个Chef选项（solo和client），并了解Chef
    cookbooks。
