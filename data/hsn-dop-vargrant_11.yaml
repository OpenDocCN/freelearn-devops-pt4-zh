- en: Chef - Using Chef to Provision a Vagrant Box
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Chef - 使用 Chef 配置 Vagrant Box
- en: 'In this chapter, we will continue our series on provisioning Vagrant by using
    popular DevOps configuration management tools. We will be focusing on Chef and
    will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将继续使用流行的 DevOps 配置管理工具来配置 Vagrant 的系列教程。我们将重点介绍 Chef，并涵盖以下主题：
- en: Understanding Chef
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Chef
- en: Chef Cookbook
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef Cookbook
- en: Installing Chef on macOS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 Chef
- en: Using Chef Solo to provision a Vagrant machine
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Chef Solo 配置 Vagrant 机器
- en: Using Chef Client to provision a Vagrant machine
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Chef Client 配置 Vagrant 机器
- en: At the end of this chapter, you will have a good understanding of what Chef
    is and the components that make it work. You will feel confident in using Chef
    to provision a Vagrant machine, whether that be on the host or on the Vagrant
    machine itself. You'll understand how to create a Cookbook, which can be a very
    powerful and flexible tool, so that you can manage your machine's state.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束时，你将对 Chef 的概念以及其工作组件有一个清晰的了解。你将能够自信地使用 Chef 来配置 Vagrant 机器，无论是在宿主机上还是在
    Vagrant 机器本身。你将明白如何创建一个 Cookbook，这可以是一个非常强大且灵活的工具，用于管理机器的状态。
- en: Understanding Chef
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Chef
- en: Chef is a popular configuration management tool used to configure and maintain
    servers. It was created by the company named Chef and is written in Ruby and Erlang.
    It was initially released in January 2009 and is offered in two different versions
    – free (open source) and paid (enterprise).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Chef 是一个流行的配置管理工具，用于配置和维护服务器。它由名为 Chef 的公司创建，使用 Ruby 和 Erlang 编写。它最初于 2009 年
    1 月发布，并提供了两个不同的版本——免费（开源）和付费（企业版）。
- en: Chef supports and integrates with many cloud platforms such as Amazon EC2, OpenStack,
    Rackspace, and Microsoft Azure. Chef can be run in solo mode (no dependencies)
    or in client/server mode, where the client communicates with the server and sends
    information about the node that it's installed on.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Chef 支持并与许多云平台集成，如 Amazon EC2、OpenStack、Rackspace 和 Microsoft Azure。Chef 可以在独立模式下运行（无依赖），也可以在客户端/服务器模式下运行，客户端与服务器通信并发送有关安装节点的信息。
- en: Chef uses Cookbooks and recipes as part of its configuration, which we will
    focus on in the next section.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Chef 使用 Cookbook 和配方作为其配置的一部分，我们将在下一部分中详细讨论这一点。
- en: Chef Cookbook
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Chef Cookbook
- en: Chef uses Cookbooks as a key element in its processes and they are used to describe
    the desired state of your node/server.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Chef 使用 Cookbook 作为其过程中的核心元素，Cookbook 用于描述节点/服务器的期望状态。
- en: 'A Chef Cookbook is an important part of configuring machines when using Chef.
    It describes the desired state of the machine. This is similar to using Playbooks
    in Ansible. The Chef Cookbook contains five key elements, which all have their
    own part to play:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Chef Cookbook 是使用 Chef 配置机器时的重要组成部分。它描述了机器的期望状态。这类似于在 Ansible 中使用 Playbooks。Chef
    Cookbook 包含五个关键元素，每个元素都有其特定的作用：
- en: Recipes
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配方
- en: Templates
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板
- en: Attribute values
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性值
- en: Extensions
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展
- en: File distributors
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件分发器
- en: These elements are often pieces of metadata that work together to create an
    overview of the machine. Let's dive deeper into these five elements to learn more
    about them.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些元素通常是一些元数据，它们协同工作，创建机器的概览。让我们深入了解这五个元素，进一步学习它们。
- en: When speaking about a node, we are referring to a machine – whether physical
    or virtual. The node could be a computer, server, network device, or another machine.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们提到节点时，我们指的是一台机器——无论是物理机器还是虚拟机。节点可以是计算机、服务器、网络设备或其他机器。
- en: Recipes
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配方
- en: A recipe is a key part of the Cookbook. It's used to detail what exactly should
    happen with a node. It's similar to a Vagrantfile when setting the state for a
    Vagrant virtual machine.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 配方是 Cookbook 的关键部分。它用于详细描述应该在节点上发生什么。这类似于设置 Vagrant 虚拟机状态时使用的 Vagrantfile。
- en: The recipe is written in Ruby and must be added onto the node's run list, which
    will then allow the node to run that recipe. A Cookbook can use one or more recipes
    or rely on outside recipes, too.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 配方是用 Ruby 编写的，必须添加到节点的运行列表中，节点将根据该列表运行相应的配方。一个 Cookbook 可以使用一个或多个配方，或依赖外部的配方。
- en: A recipe's main aim is to manage resources. A resource could be a software package,
    service, users, groups, files, directories, cron jobs, and more.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 配方的主要目的是管理资源。资源可以是软件包、服务、用户、组、文件、目录、定时任务等。
- en: Templates
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板
- en: Templates are a specific type of file that includes embedded Ruby. These files
    use the `.erb` extension and can be used to create dynamic configuration files.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 模板是一种特定类型的文件，包含嵌入式 Ruby。这些文件使用 `.erb` 扩展名，可以用来创建动态配置文件。
- en: These files can access attribute values (which you will learn about in the next
    section). This is like using variables in the files and not having to hard-code
    the settings. You could have multiple templates referencing the same attribute
    and, when one changes, it will change the value in all of the template files.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件可以访问属性值（您将在下一部分中学习）。这就像是在文件中使用变量，而不必硬编码设置。您可以有多个模板引用相同的属性，当其中一个发生变化时，它会在所有模板文件中更改该值。
- en: Attribute values
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 属性值
- en: Attribute values in Chef are essentially settings. They are often displayed
    as key value pairs. These settings can be used inside the Cookbook.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Chef 中的属性值本质上是设置。它们通常以键值对的形式显示。这些设置可以在 Cookbook 中使用。
- en: Attributes are set in the `attributes` subdirectory of the Cookbook and can
    then be referenced in other parts of the Cookbook. Attributes can be set at the
    top (Cookbook) level but can also be overwritten at the node level by any node-specific
    settings/attributes.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 属性设置在 Cookbook 的 `attributes` 子目录中，然后可以在 Cookbook 的其他部分中引用。属性可以在顶部（Cookbook）级别设置，但也可以通过任何特定于节点的设置/属性在节点级别进行覆盖。
- en: Extensions
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展
- en: These are simply extensions to Chef such as libraries and custom resources.
    These can also be referred to as *tools*, which you can learn more about in the
    *Chef Supermarket* section.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是 Chef 的扩展，如库和自定义资源。这些也可以被称为 *工具*，您可以在 *Chef 超市* 部分了解更多内容。
- en: File distributors
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件分发器
- en: Static files are used to contain simple configurations. They are placed within
    the file's subdirectory and are often moved onto the node by a recipe. These files
    are likely to not be changed and can be thought of as simple, non-dynamic templates.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 静态文件用于包含简单的配置。它们放置在文件的子目录中，通常通过配方移到节点上。这些文件通常不会更改，可以视为简单的、非动态的模板。
- en: Chef Supermarket
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Chef 超市
- en: If you are looking for a specific Cookbook/piece of software, then you can use
    the Chef Supermarket. You can think of the Chef Supermarket like HashiCorp's Vagrant
    Cloud. It hosts Cookbooks for you to view and download. The Supermarket is easy
    to use and offers a simple, fast user interface. Their main feature is the easy-to-use
    search facility.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在寻找特定的 Cookbook/软件，那么您可以使用 Chef 超市。您可以将 Chef 超市视为 HashiCorp 的 Vagrant Cloud。它托管了您可以查看和下载的
    Cookbooks。超市界面简单易用，提供了一个快速的用户界面。其主要特点是易于使用的搜索功能。
- en: Search
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索
- en: 'If you are looking for a specific Cookbook or just want to see what''s available,
    then you can use the powerful search function. It offers a full text search and
    a filter to help narrow down the results. You can use the search by visiting the
    Chef Supermarket home page via the following link: [https://supermarket.chef.io/](https://supermarket.chef.io/):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在寻找特定的 Cookbook 或只是想看看有哪些可用的内容，您可以使用强大的搜索功能。它提供了全文搜索和筛选功能，帮助缩小结果范围。您可以通过访问
    Chef 超市主页来使用搜索，链接如下：[https://supermarket.chef.io/](https://supermarket.chef.io/)：
- en: '![](img/00116.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00116.jpeg)'
- en: In the preceding screenshot, you can see the `Search` feature. You can search
    for specific software packages such as nginx, or something more general to see
    what is available, such as `web server`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，您可以看到 `搜索` 功能。您可以搜索特定的软件包，例如 nginx，或者搜索更一般的内容，看看有哪些可用的，如 `web server`。
- en: 'There are two options when narrowing down your search. The first option is
    that you can use the Advanced Options search option, which can be found underneath
    the search bar, to the right:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在缩小搜索范围时，有两个选项。第一个选项是您可以使用“高级选项”搜索功能，位于搜索栏下方，右侧：
- en: '![](img/00117.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00117.jpeg)'
- en: In the preceding screenshot, you see the Advanced Options expanded menu, which
    allows you to filter the search by Badges and/or Selected Supported Platforms.
    You can also use the text search bar at the bottom to search for a specific platform
    if it's not available in the list.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，您可以看到“高级选项”展开菜单，它允许您按 Badge 和/或选定的支持平台过滤搜索。如果平台不在列表中，您还可以使用底部的文本搜索栏搜索特定的平台。
- en: 'There is currently only one Badge option available, which is partner. This
    option searches for Chef partner Cookbooks, which are Cookbooks that have been
    hand-picked by the Chef engineering team or created by them. We''ll look at the
    other filter option here:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 目前只有一个 Badge 选项可用，即 partner。这个选项用于搜索 Chef 合作伙伴 Cookbooks，这些是由 Chef 工程团队精心挑选或他们创建的
    Cookbooks。我们将在这里查看其他筛选选项：
- en: '![](img/00118.jpeg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00118.jpeg)'
- en: 'To the left of the search bar, you can select the type you wish to search.
    There are currently two options – Cookbooks and Tools. The default is Cookbooks,
    and this will search through the available Cookbooks. The Tools option will search
    through the Chef tools that are available. Tools are pieces of software that can
    be used alongside Chef – these are not plugins as such, but add-ons:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在搜索栏的左侧，您可以选择您希望搜索的类型。目前有两个选项——Cookbooks 和 Tools。默认选项是 Cookbooks，这将搜索可用的 Cookbooks。Tools
    选项将搜索可用的 Chef 工具。Tools 是可以与 Chef 一起使用的软件——这些不是插件，而是附加组件：
- en: '![](img/00119.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00119.jpeg)'
- en: In the preceding screenshot, we are searching for `nginx`, which is the web
    server. You can see that it has found 43 Cookbooks and you have the option to
    sort by Most Followed and Recently Updated. You will see some important information
    such as the Cookbook version, last update date/time, supported platform, code
    to install, and follower count.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们正在搜索 `nginx`，这是一个 Web 服务器。您可以看到它找到了 43 个 Cookbooks，您可以选择按“Most Followed”和“Recently
    Updated”排序。您将看到一些重要信息，如 Cookbook 版本、最后更新的日期/时间、支持的平台、安装代码和关注者数量。
- en: 'You can click on the Cookbook name (in this case, `nginx`) to get more information
    about the Cookbook:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以点击 Cookbook 的名称（此例中为 `nginx`）以获取有关该 Cookbook 的更多信息：
- en: '![](img/00120.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00120.jpeg)'
- en: In the preceding screenshot, you can see the Cookbook page. It includes more
    information, which includes the Cookbook creator/maintainer(s) and gives a detailed
    readme file. There are other bits of information such as dependencies, change
    log, installation instructions/options, and more.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，您可以看到 Cookbook 页面。它包含更多信息，包括 Cookbook 的创建者/维护者，并提供了详细的 README 文件。还有其他信息，如依赖项、更新日志、安装说明/选项等。
- en: Provisioning Vagrant with Chef
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Chef 配置 Vagrant
- en: 'There are four different ways to use Chef to provision a Vagrant machine that
    Vagrant supports. This means that Chef has the most options in Vagrant when it
    comes to provisioning. The four options are as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 有四种不同的方式可以使用 Chef 来配置 Vagrant 支持的虚拟机。这意味着 Chef 在 Vagrant 中配置时有最多的选项。四种选项如下：
- en: Chef Solo
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef Solo
- en: Chef Zero
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef Zero
- en: Chef Client
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef Client
- en: Chef Apply
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef Apply
- en: In this chapter, we will be focusing on Chef Solo and Chef Client. This will
    give you a good mixture of provisioning on the host machine and the Vagrant machine.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点关注 Chef Solo 和 Chef Client。这将为您提供在主机和 Vagrant 虚拟机上进行配置的良好组合。
- en: Installing Chef on macOS
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 Chef
- en: Before we can begin using Chef, we will first need to install it. We'll learn
    how to install Chef on the macOS operating system (the High Sierra 10.13 version).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用 Chef 之前，首先需要安装它。我们将学习如何在 macOS 操作系统（High Sierra 10.13 版本）上安装 Chef。
- en: 'We''ll be installing the Chef DK (development kit), which includes all of the
    dependencies, utilities, and the main Chef software. The list of installed software
    includes the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将安装 Chef DK（开发工具包），它包含所有依赖项、实用程序和主要的 Chef 软件。安装的软件列表包括以下内容：
- en: Chef client
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef 客户端
- en: OpenSSL
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenSSL
- en: Embedded Ruby
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入式 Ruby
- en: RubyGems
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RubyGems
- en: Command-line utilites
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行实用程序
- en: Key value stores
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 键值存储
- en: Parsers
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析器
- en: Utilities
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实用工具
- en: Libraries
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库
- en: Community tools such as Kitchen and ChefSpec
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如 Kitchen 和 ChefSpec 等社区工具
- en: 'Please Note: The Apple XCode software package is required before you are able
    to install Chef.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意：在安装 Chef 之前，必须先安装 Apple XCode 软件包。
- en: 'Let''s now install and test Chef on our system:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在系统上安装并测试 Chef：
- en: Go to the Chef DK downloads page (the following is a link to the macOS section: [https://downloads.chef.io/chefdk#mac_os_x](https://downloads.chef.io/chefdk#mac_os_x)).
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 Chef DK 下载页面（以下是 macOS 部分的链接：[https://downloads.chef.io/chefdk#mac_os_x](https://downloads.chef.io/chefdk#mac_os_x)）。
- en: 'Find the version you are currently running on your system and click the orange
    Download button, as follows:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到您当前在系统上运行的版本，然后点击橙色的下载按钮，如下所示：
- en: '![](img/00121.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00121.jpeg)'
- en: Run the `.dmg` file installer. You'll need to first run the installer file.
    Click on the `.pkg` file to run it.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `.dmg` 文件安装程序。您需要先运行安装文件。点击 `.pkg` 文件以运行它。
- en: 'The installer will run and you''ll be prompted to move through the six steps.
    Please follow these. We will not be changing any values during this installation:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装程序将运行，您将被提示通过六个步骤。请按照这些步骤操作。在此安装过程中我们不会更改任何值：
- en: '![](img/00122.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00122.jpeg)'
- en: Once complete, you should see the *green tick* success screen. Close this window
    by clicking on the Close button. This will then allow you to move the installer
    package into the trash.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，您应该看到*绿色勾选*的成功界面。点击关闭按钮关闭此窗口。接着，您可以将安装包移动到垃圾桶中。
- en: 'To confirm that Chef has been installed, open a terminal window and run the
    `chef -v` command, which should list the Chef version and other dependencies:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了确认Chef是否已经安装，打开终端窗口并运行`chef -v`命令，它应该列出Chef的版本和其他依赖项：
- en: '![](img/00123.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00123.jpeg)'
- en: As you can see, there are many pieces of software running with Chef. There is
    the DK version, the chef-client version, the kitchen version, and more. Knowing
    these versions can come in handy if you have to debug any issues (with specific
    pieces of software) in the future.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，Chef运行时有许多软件组成部分。包括DK版本、chef-client版本、kitchen版本等。了解这些版本会很有帮助，尤其是当您将来需要调试某些软件问题时。
- en: Congratulations! You now have Chef installed on your system. Let's now look
    at provisioning a Vagrant machine using Chef.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您现在已经在系统上安装了Chef。接下来，让我们看看如何使用Chef来配置Vagrant虚拟机。
- en: Using Chef Solo to provision a Vagrant machine
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Chef Solo来配置Vagrant虚拟机
- en: Similar to previous chapters, we will stick with our example of installing the
    nginx web server on our Vagrant machine. Although this is a simple example, it
    does allow us to use a popular piece of software and configure networking, and
    is a simple way of seeing if it was a success.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 与前几章类似，我们将继续使用安装nginx网页服务器的示例。虽然这是一个简单的示例，但它让我们能够使用一款流行的软件，配置网络，并且是验证成功与否的一种简单方法。
- en: Using Chef Solo as a provisioner for Vagrant is a quick and easy way to get
    started with Chef. It has no dependencies (apart from Chef itself) and can be
    used by beginners or advanced users.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Chef Solo作为Vagrant的配置工具，是开始使用Chef的快捷简便方式。它没有依赖项（除了Chef本身），适合初学者或高级用户使用。
- en: We'll first need to create our Vagrantfile by running the `vagrant init -m`
    command.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要通过运行`vagrant init -m`命令来创建Vagrantfile。
- en: 'Inside our Vagrantfile, let''s specify the box and networking for the IP address.
    Let''s also specify our provisioner and configure chef-solo while we are inside
    the Vagrantfile. Your finished file should look like the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的Vagrantfile中，让我们指定虚拟机盒子和网络设置，以便配置IP地址。我们还将指定配置工具，并在Vagrantfile中配置chef-solo。您的完成文件应该如下所示：
- en: '[PRE0]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We have set `config.vm.provision` to `chef_solo` and within this block we are
    setting the `add_recipe` value to `nginx`. This means that we are telling Vagrant
    to specifically use the `nginx` recipe. Vagrant will look inside the `cookbooks` folder,
    which is in the root of our project (where the Vagrantfile is).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`config.vm.provision`设置为`chef_solo`，并且在这个块内我们将`add_recipe`值设置为`nginx`。这意味着我们告诉Vagrant专门使用`nginx`的recipe。Vagrant会在项目的根目录下（即Vagrantfile所在位置）的`cookbooks`文件夹内查找相应的文件。
- en: Before we can run the Vagrant machine, we need to do some Chef groundwork. Here,
    we are going to create the `nginx` recipe. We'll use the official nginx Cookbook
    from the Chef Supermarket, which can be found  via the following link: [https://supermarket.chef.io/cookbooks/nginx](https://supermarket.chef.io/cookbooks/nginx).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们运行Vagrant虚拟机之前，我们需要做一些Chef的基础配置。这里，我们将创建`nginx`的recipe。我们将使用Chef超市中的官方nginx
    Cookbook，可以通过以下链接找到：[https://supermarket.chef.io/cookbooks/nginx](https://supermarket.chef.io/cookbooks/nginx)。
- en: Be default, Vagrant will look for a `cookbooks` directory inside the project
    root (where the Vagrantfile is located). Let's first create this folder on our
    host by running the `mkdir cookbooks` command. Let's now move into this directory
    by running the `cd cookbooks` command in our terminal.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Vagrant会在项目根目录（即Vagrantfile所在位置）寻找一个`cookbooks`目录。我们首先通过运行`mkdir cookbooks`命令在主机上创建该文件夹。然后，通过在终端运行`cd
    cookbooks`命令进入该目录。
- en: 'To satisfy the supermarket command, we''ll need a local git repository. Let''s
    create a basic repository and commit to get started. Run the following commands
    to achieve the minimum requirements:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了满足超市命令，我们需要一个本地的git仓库。让我们创建一个基础仓库并提交以开始使用。运行以下命令来实现最低要求：
- en: '`git init`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git init`'
- en: '`touch null`'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`touch null`'
- en: '`git add -A`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git add -A`'
- en: '`git commit -m ''null''`'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git commit -m ''null''`'
- en: 'Let''s install this recipe using the `knife` command-line utility that we installed
    earlier. On the supermarket page, we can see two commands. Let''s run the `install`
    command:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用之前安装的`knife`命令行工具来安装这个recipe。在Chef超市页面，我们可以看到两个命令。我们运行`install`命令：
- en: '[PRE1]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This should install the `nginx` Cookbook (folder) into your Cookbooks `directory`.
    We can confirm this by running the `ls` and `ls cookbooks` commands inside our
    project directory:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会将 `nginx` Cookbook（文件夹）安装到你的 Cookbook `目录` 中。我们可以通过在项目目录中运行 `ls` 和 `ls cookbooks`
    命令来确认这一点：
- en: '![](img/00124.jpeg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00124.jpeg)'
- en: 'Let''s now run the `vagrant up --provision` command (back in the root directory,
    not in the Cookbooks directory) to start and provision the Vagrant machine. During
    the provision stage, you should see the `Running chef-solo...` message, which
    means that the provisioner has started. You will now see lots of green output,
    which is Chef starting up, installing the dependencies, and running the nginx
    Cookbook. The `nginx` service (once installed) should start running automatically:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们运行 `vagrant up --provision` 命令（回到根目录，而不是 Cookbook 目录）来启动并配置 Vagrant 机器。在配置阶段，你应该会看到
    `Running chef-solo...` 消息，这表示配置器已启动。你将看到大量绿色输出，这是 Chef 启动、安装依赖项并运行 nginx Cookbook
    的过程。一旦安装完成，`nginx` 服务应该会自动启动：
- en: '![](img/00125.jpeg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00125.jpeg)'
- en: 'If you now visit [`http://10.10.10.10`](http://10.10.10.10) in your browser,
    you should see nginx''s default page:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在在浏览器中访问 [`http://10.10.10.10`](http://10.10.10.10)，你应该能看到 nginx 的默认页面：
- en: '![](img/00126.jpeg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00126.jpeg)'
- en: Congratulations! You have successfully installed nginx onto a Vagrant machine
    using the Chef Solo provisioner.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经成功通过 Chef Solo 配置器将 nginx 安装到 Vagrant 机器上。
- en: This was a simple example of using Chef Solo with Vagrant. Please do not be
    fooled into thinking this technique isn't powerful. You can experiment with far
    more complicated Cookbooks.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用 Chef Solo 配置 Vagrant 的简单示例。请不要被误导以为这种技术不强大，你可以使用它来实验更复杂的 Cookbook。
- en: Using Chef Client to provision a Vagrant machine
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Chef Client 配置 Vagrant 机器
- en: Although the *Chef Client* provisioner can be seen as the advanced option, it's
    actually much simpler and quicker to set up than the *Chef Solo* provisioner,
    which we looked at in the previous section.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 *Chef Client* 配置器可以被看作是高级选项，但它实际上比我们在上一节中介绍的 *Chef Solo* 配置器更简单、更快捷。
- en: The reason why the Chef Client provisioner is simpler and quicker is that it
    is just a client. It's essentially a zombie which does not think for itself. It
    uses a Chef Server to get its commands and Cookbook files. When managing a large
    infrastructure, using this Client-to-Server method can be a much easier way than
    having to manage multiple nodes separately.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Chef Client 配置器之所以更简单、更快速，是因为它只是一个客户端。它本质上是一个僵尸，不会自主思考。它通过 Chef 服务器获取指令和 Cookbook
    文件。在管理大型基础设施时，使用这种客户端与服务器的方式比分别管理多个节点要容易得多。
- en: We won't cover how to set up a Chef Server in this book, as it's beyond its
    scope, but you can learn more from the official Chef documentation website here: [https://docs.chef.io/install_server.html](https://docs.chef.io/install_server.html).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中不会介绍如何设置 Chef 服务器，因为这超出了本书的范围，但你可以从官方 Chef 文档网站了解更多：[https://docs.chef.io/install_server.html](https://docs.chef.io/install_server.html)。
- en: 'There isn''t much to cover in this section, since the Chef Server handles the
    main bulk of the work, but there are some configuration settings we can add in
    the Vagrantfile. The following is an example of the provision block (inside the
    Vagrantfile):'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 本节内容不多，因为 Chef 服务器处理了大部分工作，但我们可以在 Vagrantfile 中添加一些配置设置。以下是一个配置块的示例（位于 Vagrantfile
    中）：
- en: '[PRE2]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We are using two new keys here: `chef_server_url` and `validation_key_path` –
    both of which are required to connect the Vagrant machine (in this instance, the
    node) to the Chef Server.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里使用了两个新键：`chef_server_url` 和 `validation_key_path` —— 这两个键都需要连接 Vagrant
    机器（在本例中是节点）到 Chef 服务器。
- en: We must set the Chef Server's URL and the path to the validation key (a `.pem`
    file). This will then register the Vagrant machine as a node, download the run
    list (recipes), and then provision the machine.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须设置 Chef 服务器的 URL 和验证密钥的路径（一个 `.pem` 文件）。这将把 Vagrant 机器注册为一个节点，下载运行列表（配方），然后进行配置。
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about provisioning a Vagrant machine with Chef.
    We did this by using Chef Cookbooks to create a recipe which controls which software
    to install onto the Vagrant machine using either Chef Solo or Chef Client.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们学习了如何使用 Chef 配置 Vagrant 机器。我们通过使用 Chef Cookbook 创建一个配方来控制安装到 Vagrant
    机器上的软件，使用的是 Chef Solo 或 Chef Client。
- en: In [Chapter 12](part0257.html#7L30I0-d86fec2f29de42f086efd11bc5538d9c), *Docker
    - Using Docker with Vagrant*, we will learn how to use Docker to provision a Vagrant
    machine. We will learn about Docker images, containers, and the Docker hub. We
    will then explore the multiple Docker options that are available when provisioning
    a Vagrant machine.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](part0257.html#7L30I0-d86fec2f29de42f086efd11bc5538d9c)，*Docker - 使用
    Docker 配合 Vagrant*中，我们将学习如何使用 Docker 来配置一个 Vagrant 虚拟机。我们将了解 Docker 镜像、容器和 Docker
    Hub。接着，我们将探索在配置 Vagrant 虚拟机时可用的多种 Docker 选项。
