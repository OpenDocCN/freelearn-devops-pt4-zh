- en: Puppet - Using Puppet to Provision a Vagrant Box
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Puppet - 使用 Puppet 配置 Vagrant Box
- en: 'In this chapter, we will continue with provisioning and learn how to provision
    a Vagrant machine using the Puppet software. In this chapter, you will learn about
    the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将继续学习配置过程，并了解如何使用 Puppet 软件配置 Vagrant 机器。本章中，你将学习以下主题：
- en: Understanding Puppet
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 Puppet
- en: What Puppet apply and Puppet agent are
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet apply 和 Puppet agent 是什么
- en: What the Puppet manifest is
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet 清单是什么
- en: How to provision a Vagrant machine with Puppet
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 Puppet 配置 Vagrant 机器
- en: At the end of this chapter, you will have a good understanding of how Puppet
    works with Vagrant to provision machines.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，你将对 Puppet 如何与 Vagrant 一起工作来配置机器有一个很好的理解。
- en: Understanding Puppet
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 Puppet
- en: Puppet is a configuration management tool that is used for deploying, configuring,
    and managing nodes (servers).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 是一种配置管理工具，用于部署、配置和管理节点（服务器）。
- en: Puppet was released by Luke Kanies in 2005\. It was written in C++, and Clojure
    and runs on Linux, Unix, and Windows. The current version is 5.5.3 and was released
    in July 2018\. Puppet as a software falls into the infrastructure as code category,
    which means that you configure and make changes using code and configuration files.
    Puppet uses manifest files to help configure nodes/servers (we'll learn more about
    this in a later section).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 由 Luke Kanies 于 2005 年发布，采用 C++ 和 Clojure 编写，并运行在 Linux、Unix 和 Windows
    上。当前版本是 5.5.3，于 2018 年 7 月发布。作为一款软件，Puppet 属于基础设施即代码（Infrastructure as Code）类别，这意味着你通过代码和配置文件来进行配置和修改。Puppet
    使用清单文件来帮助配置节点/服务器（我们将在后面的章节中深入学习）。
- en: 'Puppet uses a pull configuration (master and slave) architecture in which the
    nodes (Puppet agent) poll the master server for configuration files and changes.
    There is a four-step life cycle in this master/slave process:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 使用拉取配置（主从）架构，其中节点（Puppet 代理）从主服务器拉取配置文件和更改。在这个主从过程中，有一个四步生命周期：
- en: The node sends facts about itself to the master server.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 节点将有关自身的事实发送给主服务器。
- en: The master server uses these facts to compile a catalog as to how the node should
    be configured. It then sends the catalog back to the node.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主服务器使用这些事实来编译一个目录，描述节点应如何配置。然后，它将目录发送回节点。
- en: The node uses the catalog to configure itself to the desired state, as described
    in the manifest file.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 节点使用目录根据清单文件中描述的内容配置自身至预期状态。
- en: The node now sends a report to the master with any changes or errors. These
    reports can then be seen in the Puppet dashboard.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 节点现在将向主服务器发送报告，包含任何更改或错误。这些报告随后可以在 Puppet 仪表板中查看。
- en: Puppet also supports a multi-master architecture to reduce downtime and offer
    high availability. When a master server falls over or faces any issues, another
    master server can take its place. Puppet agents will then poll this new master
    server for any configuration changes.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 还支持多主架构，以减少停机时间并提供高可用性。当主服务器故障或遇到任何问题时，另一个主服务器可以替代它。Puppet 代理随后将轮询这个新的主服务器，查看是否有任何配置更改。
- en: As part of the configuration process, there are multiple steps that Puppet takes
    to transform code in configuration files and configure a node into a desired state.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 作为配置过程的一部分，Puppet 执行多个步骤，将配置文件中的代码转换并将节点配置到预期状态。
- en: Resources
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源
- en: Puppet configuration often starts with a resource. You can think of a resource
    as code that describes the desired state of part of the node. This could be a
    specific package that needs to be installed such as nginx.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 配置通常从资源开始。你可以把资源看作是描述节点某部分预期状态的代码。这可能是一个需要安装的特定包，例如 nginx。
- en: Manifest
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清单
- en: A Puppet program is know as a manifest. A manifest contains Puppet configuration
    code and has the `.pp` file extension. These blocks of code are the resources
    that we spoke about in the previous section.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 程序被称为清单。清单包含 Puppet 配置代码，并以 `.pp` 文件扩展名结尾。这些代码块就是我们在前一节中提到的资源。
- en: Compile
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译
- en: The compile process is when the Puppet master takes the manifest files and compiles
    them into a catalog. This catalog is then used by the nodes for provisioning and
    to reach the desired state.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 编译过程是当 Puppet 主服务器将清单文件编译成目录时进行的。该目录随后被节点用于配置和达到预期状态。
- en: Catalogs
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目录
- en: A Puppet catalog is a document that has been created by the master server. It
    is created by compiling the Puppet manifest file. It can handle multiple manifest
    files, too. The catalog is then used by the node to set the desired system state.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet目录是由主服务器创建的文档。它是通过编译Puppet清单文件生成的。它也可以处理多个清单文件。然后，目录由节点使用来设置所需的系统状态。
- en: Apply
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Apply
- en: If a node/server has a catalog, then it must apply that configuration to itself.
    This is the process of installing any necessary files, services, and software.
    It allows the node to reach the desired state.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个节点/服务器有一个目录，那么它必须将该配置应用到自己。这是安装必要的文件、服务和软件的过程。它允许节点达到期望的状态。
- en: Desired state
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 期望状态
- en: When speaking about Puppet and provisioning,  you will hear about the *desired
    state*. In terms of Puppet, it simply means that the node/server has been completely
    provisioned and is now in the correct state. The software and services have been
    installed and are running correctly.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当谈论Puppet和配置时，你会听到*期望状态*。就Puppet而言，它仅仅意味着节点/服务器已经完全配置，并且现在处于正确的状态。软件和服务已经安装并正常运行。
- en: Puppet apply and Puppet agent
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Puppet apply和Puppet agent
- en: In this section, we will learn more about the two Puppet provisioning options
    available in Vagrant—`puppet apply` and `puppet agent`. In the following section,
    we will use both of these options to provision our own Vagrant machine.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解Vagrant中提供的两种Puppet配置选项——`puppet apply`和`puppet agent`。在接下来的部分，我们将使用这两种选项来配置我们自己的Vagrant机器。
- en: Puppet apply
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Puppet apply
- en: Using the Puppet apply option to provision a Vagrant machine allows you to use
    Puppet without the need for a Puppet master. It works by calling the `puppet apply`
    command on the guest machine. This can be useful for testing Puppet configurations
    if you do not have a Puppet master or you just need to get up and running quickly.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Puppet apply选项为Vagrant机器提供服务，可以让你在不需要Puppet主机的情况下使用Puppet。它通过在客户机上调用`puppet
    apply`命令来工作。如果你没有Puppet主机，或者只是需要快速启动并运行，这将对测试Puppet配置很有帮助。
- en: Options
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选项
- en: 'There are 14 different options available when using Puppet apply in Vagrant.
    These options are to be applied in your Vagrantfile and can help give you more
    control over the Puppet provisioner:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Puppet apply时，有14个不同的选项可用。这些选项可以在你的Vagrantfile中应用，并帮助你对Puppet提供程序进行更多的控制：
- en: '`binary_path`:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binary_path`:'
- en: '**Type**: `string`'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**: `string`'
- en: '**Description**: This is a path on the guest to the Puppet''s bin directory.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**描述**: 这是客机上Puppet的bin目录的路径。'
- en: '`facter`:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`facter`:'
- en: '**Type**: `hash`'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**: `hash`'
- en: '**Description**: This is a hash of available facter variables (also know as
    facts).'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**描述**: 这是一个包含可用facter变量（也称为facts）的hash。'
- en: '`hiera_config_path`:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hiera_config_path`:'
- en: '**Type**: string'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**: string'
- en: '**Description**: This is the path (on the host) to the hiera configuration.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**描述**: 这是（位于主机上的）hiera配置文件的路径。'
- en: '`manifest_file`:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`manifest_file`:'
- en: '**Type**: `string`'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**: `string`'
- en: '**Description**: This is the name of the manifest file that Puppet will use.
    The default is `default.pp`.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**描述**: 这是Puppet将使用的清单文件的名称。默认值是`default.pp`。'
- en: '`manifests_path`:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`manifests_path`:'
- en: '**Type**: `string`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**: `string`'
- en: '**Description**: This is the path to the directory where the manifest files
    are. The default is `manifests`.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**描述**: 这是包含清单文件的目录路径。默认值是`manifests`。'
- en: '`module_path`:'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module_path`:'
- en: '**Type**: `string`/`array of strings`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**: `string`/`array of strings`'
- en: '**Description**: This can be a path or paths to the directory (on the host)
    that contains any Puppet modules.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**描述**: 这可以是包含任何Puppet模块的目录路径（位于主机上）。'
- en: '`environment`:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`environment`:'
- en: '**Type**: `string`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**: `string`'
- en: '**Description**: This is the name of the Puppet environment.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**描述**: 这是Puppet环境的名称。'
- en: '`environment_path`:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`environment_path`:'
- en: '**Type**: `string`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**: `string`'
- en: '**Description**: This is a path to the directory (on the host) which contains
    environment files.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**描述**: 这是包含环境文件的目录路径（位于主机上）。'
- en: '`environment_variables`:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`environment_variables`:'
- en: '**Type**: `hash`'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**: `hash`'
- en: '**Description**: This is a set of environment variables (in a string of key/value
    pairs) which are to be used before Puppet apply runs.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**描述**: 这是一个环境变量集（以键/值对的字符串形式），将在Puppet apply运行之前使用。'
- en: '`options`:'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`options`:'
- en: '**Type**: `array of strings`'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**: `array of strings`'
- en: '**Description**: These are options that can be passed into the Puppet executable
    when Puppet is running.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**描述**: 这些是Puppet执行时可以传递给Puppet可执行文件的选项。'
- en: '`synced_folder_type`:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`synced_folder_type`:'
- en: '**Type**: `string`'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**: `string`'
- en: '**Description**: This option allows you to specify what types of synced folder
    to use. This will use the synced folder type by default.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**描述**：此选项允许您指定要使用的同步文件夹类型。默认情况下将使用同步文件夹类型。'
- en: '`synced_folder_args`:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`synced_folder_args`:'
- en: '**Type**: `array`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：`array`'
- en: '**Description**: This is an array of arguments (values) that are passed to
    the folder sync. You can send specific arguments depending on the type of synced
    folder that you have chosen (see the preceding option).'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**描述**：这是一个传递给文件夹同步的参数数组（值）。您可以根据所选择的同步文件夹类型发送特定的参数（参见前面的选项）。'
- en: '`temp_dir`:'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`temp_dir`:'
- en: '**Type**: `string`'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：`string`'
- en: '**Description**: This is the directory (on the guest machine) where any Puppet
    run data will be stored, such as manifest files.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**描述**：这是 Puppet 运行数据将存储的目录（在客户端机器上），例如清单文件。'
- en: '`working_directory`:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`working_directory`:'
- en: '**Type**: `string`'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：`string`'
- en: '**Description**: This is the working directory (on the guest machine) when
    Puppet is running.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**描述**：这是 Puppet 运行时的工作目录（在客户端机器上）。'
- en: Puppet agent
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Puppet 代理
- en: When using the Puppet agent to provision a Vagrant machine, you will need a
    Puppet master server to connect to. The master server will provide modules and
    manifests for the node to use. This provisioner works by using the `puppet agent`
    command, which is supplied by Puppet.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Puppet 代理来配置 Vagrant 虚拟机时，您需要连接到一个 Puppet 主服务器。主服务器将提供模块和清单供节点使用。该配置程序通过使用
    `puppet agent` 命令来工作，该命令由 Puppet 提供。
- en: Options
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选项
- en: 'There are seven different options available when using Puppet apply in Vagrant.
    These options are to be applied in your Vagrantfile and can help give you more
    control over the Puppet provisioner:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Vagrant 中使用 Puppet apply 时，有七个不同的选项。这些选项将应用到您的 Vagrantfile 中，可以帮助您更好地控制 Puppet
    配置程序：
- en: '`binary_path`:'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`binary_path`:'
- en: '**Type**: `string`'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：`string`'
- en: '**Description**: This is a path on the guest to the Puppet''s bin directory.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**描述**：这是 Puppet 的 bin 目录在客户端机器上的路径。'
- en: '`client_cert_path`:'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`client_cert_path`:'
- en: '**Type**: `string`'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：`string`'
- en: '**Description**: This is the path to the client certificate for the node. The
    default value is nothing, which means that no client certificate will be uploaded.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**描述**：这是节点的客户端证书的路径。默认值为空，表示不会上传客户端证书。'
- en: '`client_private_key_path`:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`client_private_key_path`:'
- en: '**Type**: `string`'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：`string`'
- en: '**Description**: This is the path to the client key for the node. The default
    value is nothing, which means that no client key will be uploaded.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**描述**：这是节点的客户端密钥的路径。默认值为空，表示不会上传客户端密钥。'
- en: '`facter`:'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`facter`:'
- en: '**Type**: `hash`'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：`hash`'
- en: '**Description**: This is a hash of available facter variables (also know as
    facts).'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**描述**：这是可用的 facter 变量（也称为事实）的哈希值。'
- en: '`options`:'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`options`:'
- en: '**Type**: `string`/`array`'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：`string`/`array`'
- en: '**Description**: These are options that can be passed to Puppet when the puppet
    agent command is ran.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**描述**：这些是运行 puppet agent 命令时可以传递给 Puppet 的选项。'
- en: '`puppet_node`:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`puppet_node`:'
- en: '**Type**: string'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：string'
- en: '**Description**: This is the name that you wish to give the node. If no value
    is set, then Vagrant will attempt to use the hostname (if set in the Vagrantfile)
    or fall back to the name of the box used.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**描述**：这是您希望为节点指定的名称。如果未设置值，则 Vagrant 将尝试使用主机名（如果在 Vagrantfile 中设置）或回退到使用的
    box 名称。'
- en: '`puppet_server`:'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`puppet_server`:'
- en: '**Type**: `string`'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**类型**：`string`'
- en: '**Description**: This is the hostname of the Puppet server. If no value is
    set, then the default value will be set to `puppet`.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**描述**：这是 Puppet 服务器的主机名。如果未设置值，则默认值将设置为 `puppet`。'
- en: Puppet Manifest example and syntax
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Puppet 清单示例和语法
- en: A manifest is a Puppet program. It is made up of code that tells Puppet what
    to do, such as executing commands, installing software, and running services.
    A manifest file or multiple manifest files are one of the main part(s) of a module.
    A manifest file uses the `.pp` file extension and can be found in the `manifests`
    folder.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 清单是一个 Puppet 程序。它由告诉 Puppet 执行操作的代码组成，如执行命令、安装软件和运行服务。清单文件或多个清单文件是模块的主要部分之一。清单文件使用
    `.pp` 文件扩展名，并可以在 `manifests` 文件夹中找到。
- en: There are various sections found in a manifest file, such as exec, package,
    service, and file. Let's dive into the syntax of a manifest file.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在清单文件中可以找到各种部分，如 exec、package、service 和 file。让我们深入了解清单文件的语法。
- en: Syntax
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语法
- en: The manifest file is taken up with declaring resources which can be grouped
    into classes. The manifest file uses a domain-specific language called Puppet,
    which is similar to YAML or Ruby (when writing a Vagrantfile).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 清单文件包含声明的资源，这些资源可以分组到类中。清单文件使用一种称为 Puppet 的领域特定语言，这种语言类似于 YAML 或 Ruby（在编写 Vagrantfile
    时）。
- en: 'Here is an example manifest that installs and runs the nginx web server. Let''s
    create a new manifest and call it  `nginx.pp`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例清单，它安装并运行 nginx web 服务器。让我们创建一个新的清单并将其命名为 `nginx.pp`：
- en: '[PRE0]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: There are a few things to note in the preceding example. Each resource (section)
    starts with the category. We are using two categories – package and service. In
    a resource block, we wrap the values within curly parentheses, `{}`, and we then
    reference the name (`nginx`) and set the values we require.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，有几点需要注意。每个资源（部分）从类别开始。我们使用了两种类别——包和服务。在资源块中，我们将值放在大括号 `{}` 中，然后引用名称（`nginx`）并设置所需的值。
- en: There are a few keywords that we are using in the resource blocks – ensure,
    require, and enable. These keywords help describe what should happen for the node
    to reach a desired state. The `ensure` keyword is used to ensure that the package
    or service is doing what you want it to, such as installing or running. The `require`
    keyword is used when a specific resource relies on another resource. In the service
    resource, we are using the keyword `enable`, which allows us to specify if a service
    is active or not. It can be useful if you need to temporarily disable a service
    while testing.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在资源块中，我们使用了几个关键字——ensure、require 和 enable。这些关键字有助于描述节点达到期望状态时应该发生的事情。`ensure`
    关键字用于确保包或服务执行你想要的操作，例如安装或运行。`require` 关键字用于当某个特定资源依赖另一个资源时。在服务资源中，我们使用了 `enable`
    关键字，它允许我们指定服务是否启用。如果你需要在测试时临时禁用某个服务，它会很有用。
- en: 'You can add comments into the manifest file by using the hashtag/pound symbol.
    The following is an example:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用井号/井号符号将注释添加到清单文件中。以下是一个示例：
- en: '[PRE1]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Provisioning with Puppet
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Puppet 进行配置
- en: Let's get to the exciting part! We will now use Puppet apply and Puppet agent
    to provision a Vagrant machine. We'll look at both options and install the nginx
    web server. We'll configure it using the Vagrantfile as a base but also add in
    Puppet-specific configuration such as manifests.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在进入令人兴奋的部分！我们将使用 Puppet apply 和 Puppet agent 来配置 Vagrant 机器。我们将查看这两种选项，并安装
    nginx web 服务器。我们将使用 Vagrantfile 作为基础进行配置，同时还会添加 Puppet 特定的配置，如清单。
- en: Provisioning with Puppet apply
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Puppet apply 进行配置
- en: 'The Puppet apply provision option in Vagrant allows you to get up and running
    quickly with Puppet. You do not require a separate Puppet master server when using
    this option. Let''s get started:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 中的 Puppet apply 配置选项允许你快速启动和运行 Puppet。使用此选项时，你无需独立的 Puppet 主服务器。让我们开始吧：
- en: Create a new directory for this project and move into it.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为这个项目创建一个新目录，并进入该目录。
- en: Create a directory and call it `manifests`.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个目录，并命名为 `manifests`。
- en: 'In the manifests folder, create a manifest file called `nginx.pp`. Inside this
    file, we''ll insert the following instructions:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 manifests 文件夹中，创建一个名为 `nginx.pp` 的清单文件。在此文件中，我们将插入以下指令：
- en: '[PRE2]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Let's break down this manifest file. First of all, we are executing the `apt-get
    update` command to update packages in Ubuntu. We then install the nginx package,
    which is started as a service. We ensure that it's running and enabled.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步解析这个清单文件。首先，我们执行 `apt-get update` 命令以更新 Ubuntu 中的包。然后我们安装 nginx 包，并将其作为服务启动。我们确保它正在运行并已启用。
- en: Back to Vagrant. Let's run the `vagrant init -m` command to create a minimal
    Vagrantfile.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到 Vagrant。让我们运行 `vagrant init -m` 命令来创建一个最小化的 Vagrantfile。
- en: 'Let''s add some configuration into the Vagrantfile:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在 Vagrantfile 中添加一些配置：
- en: '[PRE3]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s break the Vagrantfile down. We first set the box to use Ubuntu Xenial
    64 Bit, and then set the network to use a private network and a static IP address
    of `11.11.11.11`. We need to install Puppet onto the guest machine, otherwise
    you will receive this error:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来逐步解析 Vagrantfile。首先，我们设置盒子使用 Ubuntu Xenial 64 位，然后将网络设置为使用私有网络和静态 IP 地址 `11.11.11.11`。我们需要在来宾机器上安装
    Puppet，否则你将收到以下错误：
- en: '![](img/00140.jpeg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00140.jpeg)'
- en: 'To bypass this error, we are using the `shell` provisioner to first update
    the packages and then install the Puppet software on our Ubuntu box. Once this
    has completed, then the Puppet provisioner will begin. It will install and start
    running nginx:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为了绕过这个错误，我们使用 `shell` 供应商首先更新包，并在我们的 Ubuntu 箱上安装 Puppet 软件。完成后，Puppet 供应商将开始运行。它将安装并启动
    nginx：
- en: '![](img/00141.jpeg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00141.jpeg)'
- en: 'The preceding screenshot shows the shell provisioner. In the following screenshot,
    you can see the Puppet provisioner:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了 shell 供应商。在下面的截图中，您可以看到 Puppet 供应商：
- en: '![](img/00142.jpeg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00142.jpeg)'
- en: 'Once complete, visit `http://11.11.11.11` in your browser, where you should
    see nginx''s default page:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，在浏览器中访问 `http://11.11.11.11`，您应该看到 nginx 的默认页面：
- en: '![](img/00143.jpeg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00143.jpeg)'
- en: 'We can also check that Puppet is running on the Vagrant machine by SSH-ing
    in using the `vagrant ssh` command. Once in, run the `puppet help` command. We
    should see output similar to what''s shown in the following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过使用 `vagrant ssh` 命令 SSH 进入 Vagrant 机器来检查 Puppet 是否正在运行。进入后，运行 `puppet
    help` 命令。我们应该看到类似下面截图的输出：
- en: '![](img/00144.jpeg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00144.jpeg)'
- en: Congratulations! You have successfully provisioned a Vagrant machine using Puppet
    apply. You have created a Vagrantfile and a Puppet manifest file, installed nginx,
    and tested that the service is running correctly.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已成功使用 Puppet apply 配置了 Vagrant 机器。您已创建了一个 Vagrantfile 和一个 Puppet 清单文件，安装了
    nginx，并测试了服务是否正确运行。
- en: This is a fairly simple example, but Puppet is actually a very flexible and
    powerful provisioner. There is a lot you can do with Puppet and Vagrant. I would
    recommend that you experiment and learn more by testing out some of the options
    that are available.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当简单的例子，但 Puppet 实际上是一个非常灵活和强大的供应商。使用 Puppet 和 Vagrant 你可以做很多事情。我建议你通过测试一些可用的选项来进行实验和学习更多。
- en: Provisioning with Puppet agent
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Puppet agent 供应商
- en: The second option when using Puppet as a provisioner is Puppet agent. Although
    this option has an added layer of complexity (the need for a Puppet master server),
    there is less configuration needed locally when it comes to Vagrant. We will not
    create a manifest file or any Puppet-related configuration on the host machine.
    It will all be handled by the Puppet master server.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Puppet 作为供应商的第二个选项是 Puppet agent。尽管这个选项增加了复杂性（需要 Puppet 主服务器），但在涉及 Vagrant
    时本地需要的配置较少。我们不会在主机上创建清单文件或任何与 Puppet 相关的配置。所有这些都将由 Puppet 主服务器处理。
- en: 'The Puppet agent merely acts as a client which receives its commands from the
    server. In the following example, we are going to create a multi-machine setup
    that provisions Puppet master and Puppet agent machines:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet agent 只是作为从服务器接收命令的客户端。在下面的示例中，我们将创建一个多机设置，用于提供 Puppet 主和 Puppet agent
    机器：
- en: 'Let''s first create a new directory and move into that. I''m going to call
    mine `vagrant-puppet-agent` and use the following comments to create and move
    it:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先创建一个新目录并进入其中。我将称其为 `vagrant-puppet-agent` 并使用以下注释来创建和移动它：
- en: '[PRE4]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In our new directory, we can create a Vagrantfile by running the `vagrant init
    -m` command.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的新目录中，通过运行 `vagrant init -m` 命令可以创建一个 Vagrantfile。
- en: 'We now need to edit our Vagrantfile, which requires quite a bit of configuration.
    Not all of this is required for using the `puppet_server`/Puppet agent provision
    option, but we are also creating a Puppet master server:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要编辑我们的 Vagrantfile，这需要相当多的配置。对于使用 `puppet_server` / Puppet agent 供应选项，不是所有这些都是必需的，但我们还在创建一个
    Puppet 主服务器：
- en: '[PRE5]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This is the largest Vagrantfile we''ve created so far, but it covers a lot
    of configuration and it creats multiple Vagrant machines. Let''s break it down:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们迄今为止创建的最大的 Vagrantfile，但它涵盖了很多配置，并创建了多个 Vagrant 机器。让我们逐步分解它：
- en: We first set the box to use Ubuntu Xenial 64 Bit (this will apply to both machines
    as it's outside their configuration blocks).
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先将箱子设置为使用 Ubuntu Xenial 64 位（这将适用于两台机器，因为它在它们的配置块之外）。
- en: Secondly, we define a `puppetmaster` block, which is used to configure the Puppet
    master machine. In this block, there is a large amount of custom configuration.
    Some of these parts are used to help suppress errors and may not always be needed.
    We need a powerful machine to meet the minimum requirements, so we will set the
    RAM memory and CPU count. We then create a shell provisioner, which installs the
    Puppet server software and makes various configuration changes to multiple files.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其次，我们定义了一个`puppetmaster`块，用于配置 Puppet 主机。在此块中，有大量自定义配置。其中一些部分用于帮助抑制错误，并不总是必需的。我们需要一台强大的机器以满足最低要求，因此我们将设置
    RAM 内存和 CPU 数量。然后我们创建一个 shell 提供器，安装 Puppet 服务器软件并对多个文件进行各种配置更改。
- en: Thirdly, we define a `pnode` configuration block, which is used to configure
    the Puppet node/agent machine. We use the shell provisioner to install Puppet
    and make some configuration changes to multiple files. We also set the provisioner
    to use `puppet_server`, which is also known as Puppet agent. We set the node name,
    server host, and some additional options, which are to be sent to the command
    when Puppet is run.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三步，我们定义了一个`pnode`配置块，用于配置 Puppet 节点/代理机。我们使用 shell 提供器安装 Puppet 并对多个文件进行配置更改。我们还设置了提供器使用`puppet_server`，也就是
    Puppet 代理。我们设置节点名称、服务器主机和一些附加选项，这些选项将在 Puppet 执行时传递给命令。
- en: Let's now run the `vagrant up --provision` command. This will take some time
    as it must first configure the Puppet master machine and then the Puppet agent
    machine.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们运行`vagrant up --provision`命令。这将需要一些时间，因为它必须先配置 Puppet 主机，然后再配置 Puppet 代理机。
- en: During the `up` process, you will see lots of out-put – mainly green, but some
    red, too. Don't worry too much about the red as it's not so much an error in our
    scenario as another level of output. Green is the output from the Vagrant machine,
    while red might be output from the Puppet master running within the Vagrant machine.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `up` 过程中，你将看到大量输出——主要是绿色的，也有一些红色的。不要太担心红色输出，因为在我们的场景中它不是错误，而是另一层输出。绿色是来自 Vagrant
    虚拟机的输出，而红色可能是来自运行在 Vagrant 虚拟机中的 Puppet 主机的输出。
- en: 'We''ll first see the Puppet master provisioner begin. During this process,
    we''ll also see the output from our `echo` statement, which is adding two records
    into the `/etc/hosts` file:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先看到 Puppet 主机提供器开始工作。在此过程中，我们还会看到来自 `echo` 语句的输出，该语句将两个记录添加到`/etc/hosts`文件中：
- en: '![](img/00145.jpeg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00145.jpeg)'
- en: 'Nearing the end of provisioning the Puppet master, we will see more output
    while we add additional information into the `puppet.conf` file. In red, we can
    see the Puppet master''s output as it starts the service:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置 Puppet 主机接近尾声时，我们会看到更多输出信息，同时我们会将额外的信息添加到`puppet.conf`文件中。在红色部分，我们可以看到 Puppet
    主机的输出，表示它正在启动服务：
- en: '![](img/00146.jpeg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00146.jpeg)'
- en: 'We now start provisioning the second Vagrant machine, which is acting as our
    client/node in this example and using the Vagrant provision option for `puppet_server`.
    We''ll see the node create and cache an SSL certificate:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们开始配置第二台 Vagrant 虚拟机，它在本例中充当客户端/节点，并使用 Vagrant 提供选项`puppet_server`。我们将看到节点创建并缓存一个
    SSL 证书：
- en: '![](img/00147.jpeg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00147.jpeg)'
- en: 'At the end of the node''s provisioning, we will see it `retrieving pluginfacts` and
    then `applying configuration`. It will create a YAML file with the state and then
    it will use the catalog to reach a `desired state`. In the following screenshot,
    we can see that this was achieved in a swift 7.14 seconds:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在节点配置完成后，我们将看到它正在`retrieving pluginfacts`（检索插件信息），然后是`applying configuration`（应用配置）。它将创建一个
    YAML 文件来存储状态，然后使用清单来达到`desired state`（期望状态）。在以下截图中，我们可以看到这一步骤在 7.14 秒内迅速完成：
- en: '![](img/00148.jpeg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00148.jpeg)'
- en: 'Now, let''s check to make sure that our Puppet configuration has worked correctly
    and that we now have a node in the desired state (running nginx). Visit `http://10.10.10.12`
    in your browser. You should see nginx''s default page:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们检查确保我们的 Puppet 配置已正确工作，并且我们的节点已处于所需状态（正在运行 nginx）。在浏览器中访问 `http://10.10.10.12`，你应该能看到
    nginx 的默认页面：
- en: '![](img/00149.jpeg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00149.jpeg)'
- en: 'We can also SSH into the machines individually to see their state. Run the
    `vagrant status` command to view each machine''s status and their name (as we
    need this for the SSH command):'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以单独通过 SSH 登录到各台机器，查看它们的状态。运行 `vagrant status` 命令查看每台机器的状态及其名称（因为我们需要这些信息来执行
    SSH 命令）：
- en: '![](img/00150.jpeg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00150.jpeg)'
- en: 'Let''s first SSH into the Puppet master by running the `vagrant ssh puppetmaster`
    command. Once in, run the `puppetserver --version` command to confirm that everything
    is running fine and to see what the current version is:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们通过运行`vagrant ssh puppetmaster`命令SSH进入Puppet主机。进入后，运行`puppetserver --version`命令确认一切正常运行，并查看当前版本：
- en: '![](img/00151.jpeg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00151.jpeg)'
- en: 'Let''s now SSH into the Puppet node/agent by running the `vagrant ssh pnode` command.
    Once in, run the `puppet --version` command to confirm that everything is running
    fine and to see what the current version is:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过运行`vagrant ssh pnode`命令SSH进入Puppet节点/代理。进入后，运行`puppet --version`命令确认一切正常运行，并查看当前版本：
- en: '![](img/00152.jpeg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00152.jpeg)'
- en: If you wish to stop both machines, then run the `vagrant halt` command. By doing
    this, you can delete the machine states and any associated files by running the
    `vagrant destroy` command.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望停止两个机器，可以运行`vagrant halt`命令。通过这样做，你可以运行`vagrant destroy`命令删除机器状态和任何相关文件。
- en: Congratulations! You have successfully provisioned a Vagrant machine using the
    Puppet agent option. We have created a traditional Puppet setup of the server
    and client by using the multi machine option in Vagrant, along with various provisioning
    and networking options.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经成功地使用Puppet agent选项配置了一个Vagrant机器。我们通过在Vagrant中使用多机器选项以及各种配置和网络选项，创建了一个传统的Puppet服务器和客户端设置。
- en: Summary
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned all about Puppet and how to use it as a provisioner
    for Vagrant machines. We have also learned about the two supported provisioning
    methods of Puppet apply and Puppet agent.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了所有关于Puppet的内容，以及如何将其作为Vagrant机器的配置工具。我们还学习了Puppet的两种支持的配置方法：Puppet
    apply和Puppet agent。
- en: In [Chapter 14](part0305.html#92RRI0-d86fec2f29de42f086efd11bc5538d9c), *Salt
    - Using Salt to Provision a Vagrant Box*, we will focus on another provisioner
    supported by Vagrant. We’ll learn about Salt and how it can be used to provision
    Vagrant machines. You’ll get a good understanding of Salt as well as Salt states.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第14章](part0305.html#92RRI0-d86fec2f29de42f086efd11bc5538d9c)，*Salt - 使用Salt配置Vagrant
    Box*，我们将专注于Vagrant支持的另一种配置工具。我们将学习Salt及其如何用于配置Vagrant机器。你将深入了解Salt以及Salt状态。
