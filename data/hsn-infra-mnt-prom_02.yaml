- en: Monitoring Fundamentals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控基础
- en: This chapter lays the foundation for several key concepts that will be used
    throughout this book. Starting with the definition of monitoring, we will explore
    various views and factors that emphasize why systematic analysis assumes different
    levels of importance and makes an impact on organizations. You will learn about
    the advantages and disadvantages of different monitoring mechanics, taking a closer
    look at the Prometheus approach regarding collecting metrics. Finally, we will
    discuss some of the controversial decisions that were vital for the design and
    architecture of the Prometheus stack and why you should take them into account
    when designing your own monitoring system.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为本书中将要使用的几个关键概念奠定了基础。从监控的定义开始，我们将探讨不同的视角和因素，强调为何系统化分析在不同层面上具有重要性，并对组织产生影响。你将了解不同监控机制的优缺点，深入了解
    Prometheus 在收集指标方面的做法。最后，我们将讨论一些在 Prometheus 堆栈的设计和架构中至关重要的有争议的决策，及其在设计你自己的监控系统时应当考虑的原因。
- en: 'We will be covering the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Defining of monitoring
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控的定义
- en: Whitebox versus blackbox monitoring
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 白盒监控与黑盒监控
- en: Understanding metrics collection
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解指标收集
- en: Defining of monitoring
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控的定义
- en: A consensual definition of monitoring is hard to come by because it quickly
    shifts between industry- or even job-specific contexts. The diversity of viewpoints,
    the components comprising the monitoring system, and even how the data is collected
    or used are all factors that contribute to the struggle of reaching a clear definition.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 监控的共识定义很难达成，因为它很快就会在行业甚至职位特定的上下文中发生变化。观点的多样性、监控系统的组成组件，甚至数据的收集或使用方式，都是导致难以形成清晰定义的因素。
- en: Without a common ground, it is difficult to sustain a discussion and, usually,
    expectations are mismatched. Therefore, in the following topics, we will outline
    a baseline, orientated to obtain a definition of monitoring that will guide us
    throughout this book.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有共同的基础，很难维持有效的讨论，通常期望会不一致。因此，在接下来的主题中，我们将概述一个基础框架，旨在获得一个监控的定义，帮助我们在本书中进行导航。
- en: The value of monitoring
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控的价值
- en: With the growing complexity of infrastructures, exponentially driven by the
    adoption of microservices-oriented architectures, it has become critical to attain
    a global view of all the different components of an infrastructure. It is unthinkable
    to manually validate the health of each instance, caching service, database, or
    load balancer. There are way too many moving pieces to count—let alone keep a
    close eye on.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 随着基础设施复杂度的增加，特别是由于微服务架构的采用，获取基础设施各个组成部分的全局视图变得至关重要。手动验证每个实例、缓存服务、数据库或负载均衡器的健康状态几乎是不可想象的。移动的组件太多，数目庞大——更不用说还要紧密关注它们了。
- en: Nowadays, it is expected that monitoring will keep track of data from those
    components. However, data might come in several forms, allowing it to be used
    for different purposes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，监控被期望能够跟踪这些组件的数据。然而，数据可能有多种形式，这使得它可以用于不同的目的。
- en: Alerting is one of the standard uses of monitoring data, but the application
    of such data can go far beyond it. You may require historical information to assist
    you in capacity planning or incident investigations, or you may need a higher
    resolution to drill down into a problem and even higher freshness to decrease
    the mean time to recovery during an outage.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 报警是监控数据的标准应用之一，但这些数据的应用可以远远超出报警。你可能需要历史信息来帮助进行容量规划或事件调查，或者你可能需要更高的分辨率来深入挖掘问题，甚至需要更高的时效性以减少故障期间的平均恢复时间。
- en: You can look at monitoring as a source of information for maintaining healthy
    systems, production- and business-wise.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将监控视为维持系统健康的一个信息来源，既包括生产系统，也包括业务系统。
- en: Organizational contexts
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组织背景
- en: 'Looking into an organizational context, roles such as system administrators,
    quality assurance engineers, **Site Reliability Engineers** (**SREs**), or product
    owners have different expectations from monitoring. Understanding the requirements
    of what each role surfaces makes it easier to comprehend why context is so useful
    when discussing monitoring. Let''s expand the following statements while providing
    some examples:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 从组织的角度来看，系统管理员、质量保证工程师、**站点可靠性工程师**（**SRE**）或产品负责人等角色对监控有不同的期望。了解每个角色的需求有助于更容易理解为什么在讨论监控时上下文如此重要。我们可以扩展以下几个陈述，并举些例子：
- en: System administrators are interested in high-resolution, low-latency, and high-diversity
    data. For a system administrator, the main objective of monitoring is to obtain
    visibility across the infrastructure and manage data from CPU usage to **Hypertext
    Transfer Protocol** (**HTTP**) request rate so that problems are quickly discovered
    and the root causes are identified as soon as possible. In this approach, exposing
    monitoring data in high resolution is critical to be able to drill down into the
    affected system. If a problem is occurring, you don't have the privilege to wait
    several hours for your next data point, and so data has to be provided in near
    real time or, in other words, with low latency. Lastly, since there is no easy
    way to identify or predict which systems are prone to be affected, we need to
    collect as much data as possible from all systems; namely, a high diversity of
    data.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统管理员关注的是高分辨率、低延迟和高多样性的数据。对于系统管理员来说，监控的主要目标是获取基础设施的可视化，管理从CPU使用率到**超文本传输协议**（**HTTP**）请求率等数据，以便快速发现问题并尽早识别根本原因。在这种方法中，呈现高分辨率的监控数据至关重要，这样才能深入分析受影响的系统。如果出现问题，你不能等待几个小时才能看到下一个数据点，因此数据必须接近实时提供，换句话说，具有低延迟。最后，由于没有简单的方法可以识别或预测哪些系统容易受到影响，我们需要从所有系统收集尽可能多的数据，即需要高度多样化的数据。
- en: Quality assurance engineers are interested in high-resolution, high-latency,
    and high-diversity data. Besides being important for quality assurance engineers
    to have high resolution monitoring data collected, which enables a deeper drill
    down into effects, the latency is not as critical as it is for system administrators.
    In this case, historical data is much more critical for comparing software releases
    than the freshness of the data. Since we can't wholly predict the ramifications
    of a new release, the available data needs to be spread across as much of the
    infrastructure as possible, touching every system the software release might use
    and invoke it or generally interact with it (directly or indirectly), so that
    we have as much data as possible.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 质量保证工程师关注的是高分辨率、高延迟和高多样性的数据。除了收集高分辨率的监控数据，这对于质量保证工程师深入了解影响因素至关重要外，延迟对他们来说并不像对系统管理员那么关键。在这种情况下，历史数据对于比对软件版本之间的差异比数据的新鲜度更为关键。由于我们无法完全预测新版本发布的后果，因此需要将可用数据分布到尽可能多的基础设施中，触及每一个可能使用、调用或与软件版本互动的系统（直接或间接），以确保我们能够获得尽可能多的数据。
- en: SREs focused on capacity planning are interested in low-resolution, high-latency,
    and high-diversity data. In this scenario, historical data carries much more importance
    for SREs than the resolution that this data is presented in. For example, to predict
    the increase in infrastructure, it is not critical for a SRE to know that some
    months ago at 4 A.M., one of the nodes had a spike of CPU usage reaching 100%
    in 10 seconds, but is useful to understand the trend of the load across the fleet
    of nodes to infer the number of nodes required to handle new scale requirements.
    As such, it is also important for SREs to have a broad visualization of all the
    different parts of the infrastructure that are affected by those requirements
    to predict, for example, the amount of storage for logs, network bandwidth increase,
    and so on, making the high diversity of monitoring data mandatory.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 专注于容量规划的SRE关注的是低分辨率、高延迟和高多样性的数据。在这种情况下，历史数据对SRE来说比数据呈现的分辨率更为重要。例如，在预测基础设施增长时，对于SRE来说，知道几个月前凌晨4点某个节点在10秒内出现了CPU使用率达到100%的峰值并不至关重要，但理解节点负载的趋势，以推测为应对新的规模需求所需的节点数量，则非常有用。因此，对于SRE来说，广泛地了解受这些需求影响的基础设施各个部分也很重要，比如预测日志存储量、网络带宽增长等，这使得高多样性的监控数据变得至关重要。
- en: Product owners are interested in low-resolution, high-latency, and low-diversity
    data. Where product owners are concerned, monitoring data usually steps away from
    infrastructure to the realm of business. Product owners strive to understand the
    trends of specific software products, where historical data is fundamental and
    resolution is not so critical. Keeping in mind the objective of evaluating the
    impact of software releases on the customers, latency is not as essential for
    them as it is for system administrators. The product owner manages a specific
    set of products, so a low diversity of monitoring data is expected, comprised
    mostly of business metrics.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品负责人关注的是低分辨率、高延迟和低多样性的数据。在产品负责人的关注点中，监控数据通常不再局限于基础设施，而是转向业务领域。产品负责人力图理解特定软件产品的趋势，其中历史数据至关重要，分辨率并非那么关键。考虑到评估软件发布对客户的影响，延迟对他们来说不如对系统管理员那么重要。产品负责人管理的是一组特定的产品，因此预期监控数据的多样性较低，主要由业务度量指标组成。
- en: 'The following table sums up the previous examples in a much more condensed
    form:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 下表将之前的示例以更简洁的形式总结：
- en: '|  | **Data resolution** | **Data latency** | **Data diversity** |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '|  | **数据分辨率** | **数据延迟** | **数据多样性** |'
- en: '| **Infrastructure alerting** | High | Low | High |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| **基础设施警报** | 高 | 低 | 高 |'
- en: '| **Software release view** | High | High | High |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| **软件发布视角** | 高 | 高 | 高 |'
- en: '| **Capacity planning** | Low | High | High |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| **容量规划** | 低 | 高 | 高 |'
- en: '| **Product/business view** | Low | High | Low |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| **产品/业务视角** | 低 | 高 | 低 |'
- en: Monitoring components
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控组件
- en: 'The same way the monitoring definition changes across contexts, its components
    follow the same predicament. Depending on how broad you want to be, we can find
    some or all of these components in the following topics:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 就像监控的定义在不同上下文中有所变化一样，其组件也面临着相同的困境。根据你希望定义的范围，我们可以在以下话题中找到这些组件中的某些或全部：
- en: '**Metrics**:This exposes a certain system resource, application action, or
    business characteristic as a specific point in time value. This information is
    obtained in an aggregated form; for example, you can find out how many requests
    per second were served but not the exact time for a specific request, and without
    context, you won''t know the ID of the requests.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**度量**：这表示特定系统资源、应用程序操作或业务特征在某一时刻的值。该信息以汇总形式获得；例如，你可以了解到每秒处理了多少请求，但无法得知特定请求的确切时间，且没有上下文，你也不知道请求的ID。'
- en: '**Logging**:Containing much more data than a metric, this manifests itself
    as an event from a system or application, containing all the information that''s
    produced by such an event. This information is not aggregated and has the full
    context.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志记录**：包含比度量更多的数据，它表现为系统或应用程序的一个事件，包含该事件产生的所有信息。这些信息未经过汇总，且具有完整的上下文。'
- en: '**Tracing**:This is a special case of logging where a request is given a unique
    identifier so that it can be tracked during its entire life cycle across every
    system. Due to the increase of the dataset with the number of requests, it is
    a good idea to use samples instead of tracking all requests.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**追踪**：这是日志记录的一种特殊情况，其中请求被赋予唯一标识符，以便在整个生命周期中追踪每个系统中的请求。由于请求数量的增加会使数据集变大，因此使用样本而不是追踪所有请求是一个好主意。'
- en: '**Alerting**:This is the continuous threshold validation of metrics or logs,
    and fires an action or notification in the case of a transgression of the said
    threshold.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**警报**：这是对度量或日志的持续阈值验证，当超出指定阈值时，触发动作或通知。'
- en: '**Visualization**: This is a graphical representation of metrics, logs, or
    traces.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可视化**：这是度量、日志或追踪的图形化表示。'
- en: Recently, the term monitoring has been overtaken by a superset called **observability**,
    which is regarded as the evolution of monitoring, or a different wrapping to spring
    a hype and revive the concept (the same way it happened with DevOps*)*. From where
    it stands, observability does indeed include all the components we described here.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，“监控”这一术语被一个超集**可观测性**所取代，这被视为监控的演变，或者是为了制造炒作并复兴这一概念的不同包装（就像DevOps*一样）。从目前的角度来看，可观测性确实包含了我们在此描述的所有组件。
- en: Throughout this book, our monitoring definition incorporates metrics, alerting,
    and visualization.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们的监控定义包括度量、警报和可视化。
- en: Monitoring is metrics with associated alerting and visualization.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 监控是具有相关警报和可视化的度量。
- en: Whitebox versus blackbox monitoring
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 白盒监控与黑盒监控
- en: There are many ways we could go about monitoring, but they largely fall into
    two main categories, that is, blackbox and whitebox monitoring.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以采用多种方式进行监控，但它们大体上可以分为两大类：即黑盒监控和白盒监控。
- en: 'In blackbox monitoring, the application or host is observed from the outside
    and, consequently, this approach can be fairly limited. Checks are made to assess
    whether the system under observation responds to probes in a known way:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在黑盒监控中，应用程序或主机从外部被观察，因此，这种方法可能相对有限。检查是否系统响应探测请求，并以已知的方式作出反应：
- en: Does the host respond to **Internet Control Message Protocol** (**ICMP**) echo
    requests (more commonly known as ping)?
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主机是否响应**互联网控制消息协议**（**ICMP**）回显请求（通常称为 ping）？
- en: Is a given TCP port open?
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给定的 TCP 端口是否开放？
- en: Does the application respond with the correct data and status code when it receives
    a specific HTTP request?
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当应用程序收到特定的 HTTP 请求时，它是否以正确的数据和状态码作出响应？
- en: Is the process for a specific application running in its host?
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定应用程序的进程是否在其主机上运行？
- en: 'On the other hand, in whitebox monitoring, the system under observation surfaces
    data about its internal state and the performance of critical sections. This type
    of introspection can be very powerful as it exposes the operating telemetry, and
    consequently the health, of the different internal components, which otherwise
    would be difficult or even impossible to ascertain. This telemetry data is usually
    handled in the following ways:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，在白盒监控中，受监控的系统会展示其内部状态和关键部分的性能数据。这种类型的内省非常强大，因为它暴露了操作遥测数据，从而可以了解不同内部组件的健康状况，否则这些信息可能很难甚至无法得知。通常，这些遥测数据以以下方式处理：
- en: '**Exported through logging**: This is by far the most common case and how applications
    exposed their inner workings before instrumentation libraries were widespread.
    For instance, an HTTP server''s access log can be processed to monitor request
    rates, latencies, and error percentages.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过日志导出**：这是迄今为止最常见的情况，也是应用程序在仪表化库普及之前暴露其内部工作方式的方式。例如，可以处理 HTTP 服务器的访问日志，以监控请求率、延迟和错误百分比。'
- en: '**Emitted as structured events**: This approach is similar to logging but instead
    of being written to disk, the data is sent directly to processing systems for
    analysis and aggregation.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**作为结构化事件发出**：这种方法类似于日志记录，但数据不是写入磁盘，而是直接发送到处理系统进行分析和聚合。'
- en: '**Maintained in memory as aggregates**: Data in this format can be hosted in
    an endpoint or read directly from command-line tools. Examples of this approach
    are `*/*metrics` with Prometheus metrics, HAProxy''s stats page, or the varnishstats
    command-line tool.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**以聚合形式存储在内存中**：这种格式的数据可以托管在端点中，也可以直接通过命令行工具读取。例如，`*/*metrics` 用于 Prometheus
    指标，HAProxy 的统计页面，或者 varnishstats 命令行工具。'
- en: Not all software is instrumented and ready to have its internal state exposed
    for metrics collection. For example, it can be a third-party, closed-source application
    that has no means of surfacing its inner workings. In these cases, external probing
    can be a viable option to gather the data that's deemed essential for a proper
    service state validation.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有软件都经过仪表化，并且准备好暴露其内部状态以进行指标收集。例如，它可能是一个第三方的闭源应用程序，无法展示其内部工作原理。在这些情况下，外部探测可能是收集被认为对于适当服务状态验证至关重要的数据的可行选择。
- en: Regardless, not only third-party applications benefit from blackbox monitoring.
    It can be useful to validate your applications from their clients' standpoint
    by going through, for example, load balancers and firewalls. Probing can be your
    last line of defense—if all else fails, you can rely on blackbox monitoring to
    assess availability.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，黑盒监控不仅对第三方应用程序有益。它还可以从客户端的角度验证您的应用程序，例如，通过负载均衡器和防火墙。探测可以是您的最后一道防线——如果其他方法失败，您可以依赖黑盒监控来评估可用性。
- en: Understanding metrics collection
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解指标收集
- en: The process by which metrics are by monitoring systems can generally be divided
    into two approaches—push and pull. As we'll see in the following topics, both
    approaches are valid and have their pros and cons, which we will thoroughly discuss.
    Nonetheless, it is essential to have a solid grasp on how they differ to understand
    and fully utilize Prometheus. After understanding how collecting metrics works,
    we will delve into what should be collected. There are several proven methods
    to achieve this, and we will give an overview of each one.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 监控系统采集指标的过程通常可以分为两种方法——推送和拉取。正如我们将在接下来的主题中看到的，两种方法都是有效的，并且各有优缺点，我们将详细讨论。然而，了解它们的差异对于理解和充分利用
    Prometheus 至关重要。在了解了指标采集的工作原理之后，我们将深入探讨应该采集哪些内容。实现这一目标有几种经过验证的方法，我们将对每种方法进行概述。
- en: An overview of the two collection approaches
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 两种采集方法概述
- en: 'In push-based monitoring systems, emitted metrics or events are sent either
    directly from the producing application or from a local agent to the collecting
    service, like so:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于推送的监控系统中，生成的指标或事件会直接从生成应用程序或本地代理发送到采集服务，如下所示：
- en: '![](img/122f2a49-80ba-44fb-bc33-44565eee6864.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/122f2a49-80ba-44fb-bc33-44565eee6864.png)'
- en: 'Figure 1.1: Pull-based monitoring system'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1：基于拉取的监控系统
- en: Systems that handle raw event data generally prefer push since the frequency
    of event generation is very high—in the order of hundreds, thousands, or even
    tens of thousands per second, per instance—which would make polling data impractical
    and complex. Some sort of buffering mechanism would be needed to keep events generated
    between polls, and event freshness would still be a problem compared with just
    pushing data. Some examples that use this approach include Riemann, StatsD, and
    the **Elasticsearch**, **Logstash**, and the **Kibana** (**ELK**) stack.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 处理原始事件数据的系统通常更倾向于使用推送，因为事件生成的频率非常高——每个实例每秒钟生成数百、数千甚至数万次事件——这使得轮询数据变得不切实际且复杂。为了在轮询之间保持事件的生成，需要某种缓冲机制，且与直接推送数据相比，事件的新鲜度仍然是一个问题。使用这种方法的一些例子包括
    Riemann、StatsD，以及**Elasticsearch**、**Logstash** 和 **Kibana**（**ELK**）堆栈。
- en: 'That is not to say that only these types of systems use push. Some monitoring
    systems such as Graphite, OpenTSDB, and the **Telegraf**, **InfluxDB**, **Chronograph**,
    and **Kapacitor** (**TICK**) stack have been designed using this approach. Even
    good old Nagios supports push through the **Nagios Service Check Acceptor** (**NSCA**),
    commonly known as passive checks:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不意味着只有这些类型的系统使用推送。一些监控系统，如 Graphite、OpenTSDB，以及**Telegraf**、**InfluxDB**、**Chronograph**
    和 **Kapacitor**（**TICK**）堆栈，都是采用这种方式设计的。即便是老牌的 Nagios，也通过**Nagios Service Check
    Acceptor**（**NSCA**），也就是通常所说的被动检查，支持推送：
- en: '![](img/1a53e36e-c159-4238-bcc1-7a11b4f77a15.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a53e36e-c159-4238-bcc1-7a11b4f77a15.png)'
- en: 'Figure 1.2: Push-based monitoring system'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2：基于推送的监控系统
- en: In contrast, pull-based monitoring systems collect metrics directly from applications
    or from proxy processes that make those metrics available to the system. Some
    notable monitoring software that uses pull are Nagios and Nagios-style systems
    (Icinga, Zabbix, Zenoss, and Sensu, to name a few). Prometheus is also one of
    those that embraces the pull approach and is very opinionated about this.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，基于拉取的监控系统直接从应用程序或通过代理进程收集指标，这些代理进程将指标提供给系统。一些使用拉取方法的知名监控软件包括 Nagios 及其类似系统（如
    Icinga、Zabbix、Zenoss 和 Sensu 等）。Prometheus 也是采用拉取方法的其中之一，并且在这一点上有着明确的立场。
- en: Push versus pull
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推送与拉取
- en: There is much debate in the monitoring community around the merits of each of
    these design decisions. The main point of contention is usually about target discovery,
    which we will discuss in the following paragraphs.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在监控社区中，关于这些设计决策的优劣一直存在着许多争议。主要的争论点通常围绕目标发现展开，我们将在接下来的段落中讨论这一点。
- en: 'In push-based systems, the monitored hosts and services make themselves known
    by reporting to the monitoring system. The advantage here is that no prior knowledge
    of new systems is required for them to be picked up. However, this means that
    the monitoring service''s location needs to be propagated to all targets, usually
    with some form of configuration management. Staleness is a big drawback of this
    approach: if a system hasn''t reported in for some time, does that mean it''s
    having problems or was it purposely decommissioned?'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于推送的系统中，被监控的主机和服务通过向监控系统报告来向系统表明自己的存在。这里的优势是，不需要预先了解新的系统即可将它们纳入监控。然而，这意味着监控服务的位置信息需要传播到所有目标，通常通过某种配置管理方式来实现。陈旧性是这种方法的一个大缺点：如果一个系统长时间没有报告，这是否意味着它出了问题，还是它被故意停用？
- en: Furthermore, when you manage a distributed fleet of hosts and services that
    push data to a central point, the risk of a thundering herd (overload due to many
    incoming connections at the same time) or a misconfiguration causing an unforeseen
    flood of data becomes much more complex and time-consuming to mitigate.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当你管理一个分布式的主机和服务队列，且它们将数据推送到一个中心点时，"雷霆般的群体"（由于许多连接同时到达而导致的过载）或误配置导致的数据洪流的风险变得更加复杂，需要花费更多的时间和精力来缓解。
- en: In pull-based monitoring, the system needs a definitive list of hosts and services
    to monitor so that their metrics are ingested. Having a central source of truth
    provides some level of assurance that everything is where it's supposed to be,
    with the drawback of having to maintain said source of truth and keeping it updated
    with any changes. With the rapid rate of change in today's infrastructures, some
    form of automated discovery is needed to keep up with the full picture. Having
    a centralized point of configuration enables a much faster response in the case
    of issues or misconfigurations.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于拉取的监控中，系统需要一个明确的主机和服务列表，以便监控其度量指标并将其导入。拥有一个集中式的真实数据源可以提供一定程度的保证，确保一切按预期运行，但缺点是需要维护该数据源并保持其随时更新。由于当今基础设施的变化速度极快，因此需要某种形式的自动发现机制来跟上全局变化。拥有一个集中的配置点，可以在出现问题或误配置时提供更快速的响应。
- en: In the end, most of the drawbacks from each approach can be reduced or effectively
    solved by clever design and automation. There are other more important factors
    when choosing a monitoring tool, such as flexibility, ease of automation, maintainability,
    or broad support for the technologies being used.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，每种方法的缺点都可以通过巧妙的设计和自动化来减少或有效解决。在选择监控工具时，还有其他更重要的因素，例如灵活性、自动化的便捷性、可维护性，或对所使用技术的广泛支持。
- en: Even though Prometheus is a pull-based monitoring system, it also provides a
    way of ingesting pushed metrics by using a gateway that converts from push to
    pull. This is useful for monitoring a very narrow class of processes, which we
    will see later in this book.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Prometheus是基于拉取的监控系统，它也提供了一种通过使用网关将推送转为拉取的方式来获取推送的度量。这对于监控一些非常狭窄的进程类非常有用，稍后我们将在本书中看到。
- en: What to measure
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应该测量什么
- en: When planning metrics collection, there is a question that's bound to come up,
    which is defining what metrics to observe. To answer this question, we should
    turn to the current best practices and methodologies. In the following topics,
    we will look at an overview of the most influential and best-regarded methods
    for reducing noise and improving visibility on performance and general reliability
    concerns.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在规划度量收集时，必定会遇到一个问题，即定义要观察的度量指标。为了回答这个问题，我们应该参考当前的最佳实践和方法论。在接下来的主题中，我们将概述一些最具影响力和最受推崇的方法，帮助减少噪声并提高性能和整体可靠性问题的可见性。
- en: Google's four golden signals
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谷歌的四个黄金信号
- en: 'Google''s rationale regarding monitoring is quite simple. It states, pretty
    straightforwardly, that the four most important metrics to keep track of are the
    following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌关于监控的理由非常简单。它直接说明，跟踪的四个最重要的度量指标如下：
- en: '**Latency**: The time required to serve a request'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**延迟**：处理请求所需的时间'
- en: '**Traffic**: The number of requests being made'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**流量**：发起的请求数量'
- en: '**Errors**: The rate of failing requests'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误**：失败请求的比例'
- en: '**Saturation**: The amount of work not being processed, which is usually queued'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**饱和度**：未被处理的工作量，通常是排队等待的'
- en: Brendan Gregg's USE method
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Brendan Gregg的USE方法
- en: 'Brendan''s method is more machine-focused and it states that for each resource
    (CPU, disk, network interface, and so on), the following metrics should be monitored:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Brendan 的方法更侧重于机器，它指出对于每个资源（CPU、磁盘、网络接口等），应该监控以下指标：
- en: '**Utilization**: Measured as the percentage of the resource that was busy'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用率**：以资源忙碌的百分比来衡量'
- en: '**Saturation**: The amount of work the resource was not able to process, which
    is usually queued'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**饱和度**：资源未能处理的工作量，通常以排队的方式存在'
- en: '**Errors**: Amount of errors that occurred'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误**：发生的错误数量'
- en: Tom Wilkie's RED method
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Tom Wilkie 的 RED 方法
- en: 'The RED method is more focused on a service-level approach and not so much
    on the underlying system itself. Obviously, being useful to monitor services,
    this strategy is also valuable to predict the experience of external clients.
    If a service''s error rate increases, it is reasonable to assume those errors
    will impact, directly or indirectly, on the customer''s experience. These are
    the metrics to be aware of:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: RED 方法更侧重于服务层面的监控，而不是底层系统本身。当然，作为监控服务的有用方法，这一策略也对预测外部客户的体验具有价值。如果一个服务的错误率增加，可以合理地假设这些错误将直接或间接地影响客户的体验。以下是需要关注的指标：
- en: '**Rate**: Translated as requests per second'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**速率**：翻译为每秒请求数'
- en: '**Errors**: The amount of failing requests per second'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误**：每秒失败请求的数量'
- en: '**Duration**: The time taken by those requests'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续时间**：这些请求所花费的时间'
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we had the chance to understand the true value of monitoring
    and how to approach the term in a specific context, including the context that's
    used in this book. This will help you avoid any misunderstandings and ensure a
    clear perception of where the book stands on this topic. We also went through
    different aspects of monitoring, such as metrics, logging, tracing, alerting,
    and visualizations, while presenting observability and the benefits it brings.
    Whitebox and blackbox monitoring were addressed, which provide the basis to comprehend
    the benefits of using metrics. Armed with this knowledge about metrics, we went
    through the mechanics of push and pull and all the arguments regarding each one,
    before ending with what the metrics to track on the systems you manage are.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们有机会理解监控的真正价值以及如何在特定上下文中处理这一术语，包括本书中使用的上下文。这将帮助你避免任何误解，并确保你清楚地了解本书在这一主题上的立场。我们还讨论了监控的不同方面，如指标、日志记录、追踪、告警和可视化，同时介绍了可观测性及其带来的好处。白盒和黑盒监控被提及，为理解使用指标的好处提供了基础。掌握了关于指标的知识后，我们深入探讨了推拉机制以及各自的相关论点，最后总结了你所管理的系统中应跟踪的指标。
- en: In the next chapter, we will look at an overview of the Prometheus ecosystem,
    and talk about several of its components.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将概述 Prometheus 生态系统，并讨论其几个组件。
- en: Questions
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Why is monitoring definition so hard to clearly define?
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么监控的定义如此难以清晰界定？
- en: Does a high latency of metrics impact the work of a system administrator who's
    focused on fixing a live incident?
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指标的高延迟是否会影响专注于修复实时事件的系统管理员的工作？
- en: What are the monitoring requirements to properly do capacity planning?
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了正确进行容量规划，监控的要求是什么？
- en: Is logging considered monitoring?
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 日志记录是否算作监控？
- en: Regarding the available strategies for metrics collection, what are the downsides
    of using the push-based approach?
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关于可用的指标收集策略，使用基于推送的方法有什么缺点？
- en: If you had to choose three basic metrics from a generic web service to focus
    on, which would they be?
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你必须选择三个来自通用 Web 服务的基本指标来关注，它们会是哪三个？
- en: When a check verifies whether a given process is running on a host by way of
    listing the running processes in said host, is that whitebox or blackbox monitoring?
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当一个检查通过列出主机中正在运行的进程来验证给定进程是否在主机上运行时，这属于白盒监控还是黑盒监控？
- en: Further reading
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '**The Prometheus blog**: [https://prometheus.io/blog/2016/07/23/pull-does-not-scale-or-does-it](https://prometheus.io/blog/2016/07/23/pull-does-not-scale-or-does-it/)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Prometheus 博客**： [https://prometheus.io/blog/2016/07/23/pull-does-not-scale-or-does-it](https://prometheus.io/blog/2016/07/23/pull-does-not-scale-or-does-it/)'
- en: '**Site Reliability Book**: [https://landing.google.com/sre/sre-book/chapters/monitoring-distributed-systems](https://landing.google.com/sre/sre-book/chapters/monitoring-distributed-systems/)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**站点可靠性书籍**： [https://landing.google.com/sre/sre-book/chapters/monitoring-distributed-systems](https://landing.google.com/sre/sre-book/chapters/monitoring-distributed-systems/)'
- en: '**The USE Method**: [http://www.brendangregg.com/usemethod.html](http://www.brendangregg.com/usemethod.html)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**USE 方法**: [http://www.brendangregg.com/usemethod.html](http://www.brendangregg.com/usemethod.html)'
- en: '**The RED Method**: [https://www.weave.works/blog/the-red-method-key-metrics-for-microservices-architecture](https://www.weave.works/blog/the-red-method-key-metrics-for-microservices-architecture/)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RED 方法**: [https://www.weave.works/blog/the-red-method-key-metrics-for-microservices-architecture](https://www.weave.works/blog/the-red-method-key-metrics-for-microservices-architecture/)'
