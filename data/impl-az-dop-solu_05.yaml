- en: Continuous Deployment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续部署
- en: In the previous chapter, you learned how to use Azure DevOps pipelines for continuous
    integration. Due to this, you now know how to pick up a version of your sources
    and create artifacts that can be deployed. In this chapter, you will learn how
    to extend this practice with continuous delivery and continuous deployment so
    that you automatically deploy these artifacts to the servers or platforms your
    code is running on.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您学习了如何使用 Azure DevOps 流水线进行持续集成。基于此，您现在知道如何提取源代码的版本并创建可以部署的工件。在本章中，您将学习如何通过持续交付和持续部署扩展这一实践，从而自动将这些工件部署到代码运行所在的服务器或平台。
- en: To do this, we will start by introducing Azure DevOps release definitions so
    that you can define and run the releases of your application. Next, a series of
    strategies will be introduced that you can use to perform deployments in a low-risk
    manner. Doing this makes it possible for you to automate the process of deploying
    new versions unattended, with a limited risk of incidents occurring. From here,
    we will shift our attention to automating the creation of release notes. After
    this, we will introduce App Center, which is used for deploying mobile applications.
    Finally, other tools for continuous deployment will be introduced.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们将首先介绍 Azure DevOps 发布定义，以便您可以定义和运行应用程序的发布。接下来，将介绍一系列策略，您可以使用这些策略以低风险的方式进行部署。通过这样做，您可以实现自动化部署新版本的过程，且在没有人工干预的情况下，风险较低。然后，我们将把注意力转向自动化生成发布说明。之后，我们将介绍用于部署移动应用程序的
    App Center。最后，我们将介绍其他用于持续部署的工具。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Continuous delivery and continuous deployment
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续交付和持续部署
- en: Working with Azure DevOps releases
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Azure DevOps 发布功能
- en: Writing multi-stage YAML pipelines
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写多阶段 YAML 流水线
- en: Implementing continuous deployment strategies
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施持续部署策略
- en: Deploying mobile applications
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署移动应用程序
- en: Automating release notes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化发布说明
- en: Other tools
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他工具
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To experiment with the techniques described in this chapter, you might need
    one or more of the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了尝试本章中描述的技术，您可能需要以下一项或多项：
- en: An Azure DevOps account for building release definitions and multi-stage YAML
    pipelines
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于构建发布定义和多阶段 YAML 流水线的 Azure DevOps 账户
- en: An App Center account for deploying mobile applications
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于部署移动应用程序的 App Center 账户
- en: Free trial options are available for both of these.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这两者都有免费试用选项。
- en: Continuous delivery and continuous deployment
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续交付和持续部署
- en: The difference between continuous delivery and continuous deployment is a common
    source of confusion. Some people think these terms are interchangeable and see
    them as two synonyms for the same concept, but they have, in fact, two different
    meanings.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付和持续部署之间的区别是一个常见的困惑来源。有些人认为这些术语可以互换，并将它们视为同一概念的两个同义词，但事实上，它们有两个不同的含义。
- en: Continuous delivery is a practice where teams ensure that the artifacts they
    build are continuously validated and ready to be deployed to the production environment.
    Often, this is done by deploying the artifacts to a production-like environment,
    such as acceptance or even a staging environment, and applying a series of tests,
    such as verification tests, to ensure the application is working correctly.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付是一种实践，团队确保他们构建的工件不断得到验证，并随时准备部署到生产环境中。通常，这通过将工件部署到类似生产的环境中（例如验收环境或甚至是暂存环境），并应用一系列测试（如验证测试）来确保应用程序正常工作。
- en: Continuous deployment is a practice where every version that is deployed to
    a production-like environment and passes all tests and verifications, is also
    deployed to production automatically.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 持续部署是一种实践，每一个部署到类似生产环境并通过所有测试和验证的版本，都会自动部署到生产环境。
- en: When working with Azure DevOps, Azure Pipelines is the tool of choice for implementing
    continuous delivery and deployment. This can be done using either the visual classic
    editor or with multi-stage YAML pipelines, both of which will be discussed in
    the following section.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Azure DevOps 时，Azure Pipelines 是实施持续交付和部署的首选工具。这可以通过使用可视化经典编辑器或多阶段 YAML
    流水线来实现，接下来的章节将详细讨论这两种方法。
- en: Working with Azure DevOps releases
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Azure DevOps 发布功能
- en: Continuous delivery and deployment can both be implemented in Azure DevOps by
    using releases. When creating a new release definition, an outline of the release
    process is created. This process will often start with an artifact that triggers
    the creation of a new release. Next, it is possible to define one or more stages
    that the release can be deployed to. Often, these stages correspond to the different
    application environments, for example, test and production, but this is not mandatory.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在Azure DevOps中，可以通过使用发布来实现持续交付和部署。在创建新的发布定义时，会创建发布过程的轮廓。此过程通常以触发新发布创建的工件开始。接下来，可以定义一个或多个阶段，发布可以部署到这些阶段。这些阶段通常对应于不同的应用程序环境，例如测试环境和生产环境，但这不是强制性的。
- en: 'Let''s learn how to create a new release definition and explore the various
    options we have. First, navigate to Pipelines and choose Releases from the menu.
    From here, it is possible to start creating a new release pipeline, which will
    take us to a screen that looks similar to the one shown in the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们学习如何创建新的发布定义，并探索我们拥有的各种选项。首先，导航到**管道**，并从菜单中选择**发布**。从这里，可以开始创建新的发布管道，这将带我们进入一个类似于以下截图的界面：
- en: '![](img/0df1b9c6-c830-439d-a27f-2a3da15aa37d.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0df1b9c6-c830-439d-a27f-2a3da15aa37d.png)'
- en: 'From the preceding screen, we can perform the following actions (these are
    numbered in the preceding screenshot):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的屏幕中，我们可以执行以下操作（这些操作在前面的截图中已经编号）：
- en: First, notice that, on the left, it is possible to see the outline of the release
    pipeline with a box. Here, you can select one or more artifacts that can be used
    in the release pipeline.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，请注意，在左侧，可以看到发布管道的轮廓，其中有一个框。您可以在此选择一个或多个可以在发布管道中使用的工件。
- en: To the right of this, there is a box where the different stages of the release
    can be seen. By default, one stage is created already.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一部分的右侧，有一个框，可以看到发布的不同阶段。默认情况下，已经创建了一个阶段。
- en: It is possible to pick a template as a starting point for the deployment pipeline
    for this pre-created stage. Choosing to start with an empty job in this view allows
    you to craft a custom deployment pipeline from scratch.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以选择一个模板作为这个预创建阶段的部署管道起点。选择从空白作业开始，允许您从头开始构建自定义部署管道。
- en: After choosing a job template or an empty job to start with, the pane on the
    right will close, and it will be possible to start editing the release pipeline
    from left to right, starting with the artifacts.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 选择作业模板或空白作业作为起点后，右侧窗格会关闭，然后就可以开始从左到右编辑发布管道，从工件开始。
- en: Once a skeleton release pipeline is visible, the first things you will need
    to configure are the artifacts that the release should work with. This is the
    subject of the next section.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦骨架发布管道可见，您需要配置的第一件事是发布所需的工件。这是下一节的内容。
- en: Creating artifacts and release triggers
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建工件和发布触发器
- en: The previous chapter described build definitions and YAML pipelines, which create
    artifacts. These artifacts are picked up in releases and form the basis for deploying
    an application.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 前一章描述了构建定义和YAML管道，这些管道创建工件。这些工件会在发布中被拾取，并形成部署应用程序的基础。
- en: 'To start editing a release pipeline, follow these steps:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始编辑发布管道，请按照以下步骤操作：
- en: 'Click on the Add an artifact button to start building the starting point of
    the release definition. This will open the right-hand pane shown in the following
    screenshot:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加工件**按钮，开始构建发布定义的起点。这将打开右侧窗格，如下图所示：
- en: '![](img/be76633f-7932-4fde-b711-e8e339885004.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/be76633f-7932-4fde-b711-e8e339885004.png)'
- en: In the picker for the project, the current project will be selected by default.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目选择器中，当前项目会默认被选中。
- en: Now, specify the artifacts that the release pipeline should pick up.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，指定发布管道应拾取的工件。
- en: After this, the default version to use and the source alias will be automatically
    selected. The default version can always be overridden when manually starting
    a release, so Latest is a sensible default.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，默认版本和源别名会自动选择。默认版本可以在手动启动发布时始终被覆盖，因此“最新”是一个合理的默认值。
- en: The source alias is the name of the folder where the artifacts can be located
    when we add jobs to the release stages at a later date. The default is often fine.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 源别名是指我们稍后将作业添加到发布阶段时，工件所在文件夹的名称。默认情况下通常是可以接受的。
- en: Finish adding the artifact by clicking Add.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成添加工件后，点击**添加**。
- en: 'Now that we''ve specified the artifacts to work with, it is time to specify
    when a new release should be created. Let''s learn how to do this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经指定了要使用的工件，接下来是指定何时应创建新发布。让我们学习如何操作：
- en: 'To configure the availability of a new artifact to trigger the release, click
    on the lightning bolt next to the artifact to open the configuration pane. This
    can be seen in the following screenshot:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要配置新工件触发发布的可用性，请点击工件旁边的闪电符号以打开配置面板。如下截图所示：
- en: '![](img/79bd2b7c-c408-43a3-8a3d-15b72ea4d7e3.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/79bd2b7c-c408-43a3-8a3d-15b72ea4d7e3.png)'
- en: In this pane, it is possible to create a new release, when one is available,
    using the top slider. This will expand a new section where you can define one
    or more filters so that you can specify conditions under which a new artifact
    should trigger a release.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此面板中，可以使用顶部滑块创建新发布（如果有可用发布）。这将展开一个新区域，在此区域中可以定义一个或多个过滤器，以便指定新的工件在何种条件下触发发布。
- en: Click the Add button to start adding a condition.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“添加”按钮以开始添加条件。
- en: A common example is to only include artifacts that come from the master branch,
    as shown here.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个常见的例子是只包括来自主分支的工件，如下所示。
- en: In addition to artifacts that come from regular builds, it is possible to also
    allow artifacts that come from pull request builds to start a new release.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了来自常规构建的工件，还可以允许来自拉取请求构建的工件来启动新发布。
- en: Finally, it is possible to create a new release on a fixed schedule.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，可以按固定时间表创建新发布。
- en: If no schedule and no trigger are specified, a new release will only be created
    when someone does so manually.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有指定计划或触发条件，则只有在有人手动执行时，才会创建新发布。
- en: Specifying the stages to deploy the release
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指定用于部署发布的阶段
- en: After specifying the artifacts to release, it is time to specify one or more
    stages to deploy the release to. Often, every environment (test, acceptance, and
    production) will correspond to a stage. But it is also possible to have other
    stages if the situation calls for it.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在指定了要发布的工件后，是时候指定一个或多个阶段以部署发布了。通常，每个环境（测试、验收和生产）都会对应一个阶段。但如果情况需要，也可以有其他阶段。
- en: 'Let''s learn how to add a new stage and explore various options. First, click
    on Pipelines to arrive at the following screen:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们学习如何添加新阶段并探索各种选项。首先，点击“管道”以进入以下屏幕：
- en: '![](img/30e40337-f0c1-4f8a-b803-63b4fc5b189b.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/30e40337-f0c1-4f8a-b803-63b4fc5b189b.png)'
- en: 'Now, complete the following steps:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，完成以下步骤：
- en: Click the Add button to create a new stage. A stage can be either new or a clone
    of an existing one.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“添加”按钮以创建新阶段。一个阶段可以是全新的，也可以是现有阶段的克隆。
- en: After selecting an already existing stage, it can be removed using the Delete
    button on the top right.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择已存在的阶段后，可以使用右上角的“删除”按钮将其移除。
- en: Other actions that can be performed on this screen include renaming the stage
    and designating a stage owner. The owner will be notified when a release is deployed
    to the environment.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此屏幕上可以执行的其他操作包括重命名阶段和指定阶段负责人。当发布部署到环境时，负责人将收到通知。
- en: After creating and naming a stage, it is possible to add jobs and tasks to a
    stage, just like it was possible for a build pipeline. To do this, click on the
    link in the box that denotes the stage.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并命名一个阶段后，可以像在构建管道中一样，向阶段添加作业和任务。为此，请点击框中表示该阶段的链接。
- en: 'From here on, this works exactly the same as building pipelines. There is only
    one addition: besides agent jobs and agentless jobs, it is also possible to use
    deployment group jobs. These will be discussed in the *Working with deployment
    groups* section later on. But first, let''s understand which stages we need.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，操作与构建管道完全相同。唯一的区别是：除了代理作业和无代理作业外，还可以使用部署组作业。有关这些内容将在后续的*与部署组协作*部分进行讨论。但首先，让我们了解一下需要哪些阶段。
- en: Which stages do I need?
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我需要哪些阶段？
- en: One of the questions that frequently arises when working with releases is, *which
    stages do I need in my release pipeline*? According to the documentation, stages
    should denote the major divisions of a release pipeline. When starting out with
    releases, this often boils down to having one stage per environment in a release
    pipeline. Appropriate stages include **test**, **acceptance**, and **production**.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理发布时，常见的一个问题是，*我在发布管道中需要哪些阶段*？根据文档，阶段应表示发布管道的主要分区。在开始使用发布时，这通常意味着每个环境对应一个阶段。适当的阶段包括**测试**、**验收**和**生产**。
- en: When working with releases for a long time, we might incorporate more automation
    in the pipelines and want to add extra checking stags to them. An example might
    be a stage called **load test** that is executed in parallel to the **test** stage.
    Another example might be the introduction of a stage for **automated UI tests**.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在长期与发布版本合作时，我们可能会在流水线中加入更多的自动化，并希望为其添加额外的检查阶段。例如，可能会有一个名为**负载测试**的阶段，它与**测试**阶段并行执行。另一个例子可能是引入一个**自动化
    UI 测试**阶段。
- en: No matter which stages are added, the approach to propagating a release to production
    should always stay the same. When a release propagates from stage to stage and
    gets closer to production, this should show that there is confidence in this release,
    that it is working correctly, and that it can be promoted to production.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 无论添加哪些阶段，传播发布版本到生产环境的方法应始终保持一致。当发布版本从一个阶段传播到下一个阶段，并且逐渐接近生产时，这应表明对该发布版本充满信心，它工作正常，并且可以推广到生产环境。
- en: Stage triggers, approvals, and gates
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阶段触发器、审批和门控
- en: 'After defining the required stages and adding jobs and tasks to them, it is
    time to configure when the release to a specific stage should be triggered. The
    steps for this can be seen in the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义所需的阶段并向其添加作业和任务之后，接下来需要配置何时触发发布到特定阶段。具体步骤可以在以下截图中看到：
- en: '![](img/7590041b-a49e-4253-ad67-d3e5fc875808.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7590041b-a49e-4253-ad67-d3e5fc875808.png)'
- en: 'Note that the following steps need to be carried out for every stage individually:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，以下步骤需要针对每个阶段单独执行：
- en: To trigger a release to a specific stage, click on the button with a lightning
    bolt and a person icon, to the left of the square that denotes the stage.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要触发发布到特定阶段，点击带有闪电图标和人形图标的按钮，该按钮位于表示阶段的方块左侧。
- en: The first thing to configure here is when a release should propagate to this
    stage. This can be either upon the availability of the release, after completing
    another stage, or only upon manual request. The choice you make here will also
    be reflected in the visual representation of the pipeline.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里配置的第一件事是发布版本何时应传播到此阶段。可以选择在发布版本可用时、完成另一个阶段后，或者仅在手动请求时进行传播。你在这里做出的选择也会反映在流水线的可视化表示中。
- en: Separate from the trigger, it is possible to define one or more filters that
    limit which artifacts will trigger a deployment to the stage. There can be one
    or more include or exclude branch filters for every artifact.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与触发器分开，你可以定义一个或多个过滤器，限制哪些工件将触发部署到该阶段。每个工件可以有一个或多个包含或排除的分支过滤器。
- en: It is also possible to redeploy on a fixed schedule.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 也可以在固定的时间表上重新部署。
- en: Finally, if the creation of a new release is specified for builds that were
    started from a pull request, the release can also be allowed to propagate to the
    current stage using the slider.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，如果为从拉取请求启动的构建指定了新发布版本的创建，则还可以允许使用滑块将发布传播到当前阶段。
- en: 'Next to these triggers, approvers and gates can be added so that you can configure
    how to handle deployment queue settings. These settings can be accessed from the
    tabs below the section for Triggers, as shown in the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些触发器旁边，可以添加审批人和门控，以便你可以配置如何处理部署队列设置。这些设置可以从触发器部分下方的标签页中访问，如以下截图所示：
- en: '![](img/08f5ca5d-f9bb-4be2-887e-bc7753ed0221.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/08f5ca5d-f9bb-4be2-887e-bc7753ed0221.png)'
- en: 'The first tab is about approvers. Here, groups or users are specified. They
    must give their approval before releasing to this stage can begin. Multiple people
    can be added and if so, an order can be defined in which they have to approve
    or it can be specified that a single approval is enough. By scrolling down, you
    will find the following options:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个标签页是关于审批人的。在这里，可以指定组或用户。他们必须在发布到此阶段之前给予批准。可以添加多个人员，如果是这样，还可以定义他们批准的顺序，或者可以指定只需要一个批准即可。向下滚动，你会找到以下选项：
- en: '![](img/dfc4fb92-1283-48e5-b56d-106e09ff7c4c.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dfc4fb92-1283-48e5-b56d-106e09ff7c4c.png)'
- en: The second tab (on the left) allows you to add one or more gates. Gates are
    automated checks that have to succeed before the release can continue. Currently,
    this shows the configuration details for configuring a work item query and a threshold
    on the number of results, for example, to ensure that there are no open bugs before
    a release proceeds. There are also gates available that can call in Azure Monitor,
    Azure Functions, or a RESTful API. This set of gates can be extended using the
    Azure DevOps extension mechanisms. Some of these extensions also integrate with
    common change management systems.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧的第二个选项卡允许您添加一个或多个关卡。关卡是自动化检查，必须成功才能继续发布。目前，这里显示的是配置工作项查询和结果数阈值的配置详情，例如，确保在发布继续之前没有未解决的漏洞。还有一些关卡可以调用
    Azure Monitor、Azure Functions 或 RESTful API。此关卡集可以使用 Azure DevOps 扩展机制进行扩展。其中一些扩展还与常见的变更管理系统集成。
- en: The final tab (on the right) allows you to configure how to handle a situation
    where different versions of the release are ready for deployment to the same stage.
    Here, it is possible to specify how many releases can run in parallel. If there
    are even more releases coming in, you can queue them up and deploy them one after
    the other, or only deploy the latest.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 最右侧的最后一个选项卡允许您配置如何处理不同版本的发布准备好部署到同一阶段的情况。在这里，您可以指定有多少个发布可以并行运行。如果有更多发布进来，您可以将它们排队，并依次部署，或者只部署最新的发布。
- en: Working with deployment groups
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用部署组
- en: Another topic that you might run into at some point is deploying an application
    to on-premises servers or servers that are behind a firewall. You may also come
    across situations where it is necessary to run scripts on all of the machines
    hosting the application or situations where the target environment does not supply
    a mechanism for deploying applications.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个您可能会遇到的话题是将应用程序部署到本地服务器或位于防火墙后面的服务器。您也可能遇到需要在托管应用程序的所有机器上运行脚本的情况，或者目标环境没有提供部署应用程序机制的情况。
- en: The approach to performing releases, which was shown in the *Working with Azure
    DevOps releases* section of this chapter, relies on being able to connect to the
    target machines or services that will host the application. We call these **push-based
    deployments**, and this is not always possible.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的*与 Azure DevOps 发布配合使用*部分展示的发布方法依赖于能够连接到将托管应用程序的目标机器或服务。我们称之为**基于推送的部署**，但这并非总是可能的。
- en: When deploying to target machines that cannot be connected to, another approach
    needs to be taken. This approach is called **agent-based deployment***.* In an
    agent-based deployment, an Azure DevOps agent is installed on every machine that
    the application will be installed on. Next, these agents must be grouped into
    deployment groups. Once this is done, a **deployment group job** can be added
    to the release.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当部署到无法连接的目标机器时，需要采取另一种方法。这种方法称为**基于代理的部署**。在基于代理的部署中，Azure DevOps 代理会安装在每台要安装应用程序的机器上。接下来，这些代理必须被分组到部署组中。一旦完成此操作，就可以将**部署组任务**添加到发布中。
- en: 'This is very similar to an agent job, except for one thing. In an agent job,
    the tasks in the job will run on **one of the agents** against the target machine.
    In a deployment group job, all of the tasks will run on all of the agents in the
    release group on the target machines. This difference between both approaches
    can be seen in the following diagram:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这与代理任务非常相似，除了一个区别。在代理任务中，任务将在**其中一台代理**上针对目标机器执行。而在部署组任务中，所有任务将在目标机器上的所有代理执行。以下图示可以看到这两种方法的区别：
- en: '![](img/4666901d-34d2-44d2-8d60-57bf09286374.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4666901d-34d2-44d2-8d60-57bf09286374.png)'
- en: When using this approach, it is necessary to have agents on the machines that
    the application needs to be deployed to. These agents listen to Azure DevOps and
    whenever a new release is requested, they retrieve the work and execute it on
    the local machine.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法时，必须在需要部署应用程序的机器上安装代理。这些代理会监听 Azure DevOps，并在请求新的发布时，它们会获取工作并在本地机器上执行。
- en: Managing deployment groups
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理部署组
- en: 'Before you can add a deployment group job to a release pipeline, you need to
    create a deployment group. To do so, perform the following steps:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在将部署组任务添加到发布管道之前，您需要创建一个部署组。为此，请执行以下步骤：
- en: Navigate to the Pipelines menu.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到管道菜单。
- en: Open the Deployment groups menu.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开部署组菜单。
- en: Enter a deployment group name and description and click Create.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入部署组名称和描述，然后点击“创建”。
- en: 'Once the new deployment group has been created, a script will appear on the
    right, as shown in the following screenshot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新部署组后，右侧会出现一个脚本，如下图所示：
- en: '![](img/12b5eabb-1890-4db6-9f3e-b3812675c646.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/12b5eabb-1890-4db6-9f3e-b3812675c646.png)'
- en: Executing this script on the target machine will install the agent and automatically
    register that machine as part of the newly created deployment group.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在目标机器上执行此脚本将安装代理，并自动将该机器注册为新创建的部署组的一部分。
- en: If an application must be deployed to three stages (test, acceptance, and production)
    using deployment groups, there will need to be three separate deployment groups,
    one for each environment.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个应用程序必须通过部署组部署到三个阶段（测试、验收和生产），那么需要为每个环境创建三个独立的部署组。
- en: Creating a release pipeline with a deployment group
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用部署组创建发布管道
- en: 'After creating the necessary deployment group(s), those deployment group(s)
    can be used in releases from the tasks view, as shown in the following screenshot:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了所需的部署组后，可以在任务视图中将这些部署组用于发布，如下图所示：
- en: '![](img/33a72ee4-0edb-4abb-8209-6e620ac7fa7b.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/33a72ee4-0edb-4abb-8209-6e620ac7fa7b.png)'
- en: 'To do this, perform the following steps:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，请执行以下步骤：
- en: Add a new deployment group to the pipeline.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向管道中添加一个新的部署组。
- en: Specify which deployment group the job should run on by picking it from the
    drop-down menu.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从下拉菜单中选择，指定作业应在哪个部署组上运行。
- en: Add one or more tasks to execute the job. The functionality of the user interface
    is the same as that for regular agent jobs.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个或多个任务来执行作业。用户界面的功能与常规代理作业相同。
- en: Besides the different approaches to executing on all agents in a group instead
    of one, deployment group jobs behave the same as regular agent jobs.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在一个组中对所有代理执行任务的不同方法之外，部署组作业的行为与常规代理作业相同。
- en: Writing multi-stage YAML pipelines
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写多阶段 YAML 管道
- en: In addition to the visual designer for release definitions, it is also possible
    to implement continuous deployment using YAML pipelines. When doing so, it is
    still recommended to differentiate between the build (CI) and release (CD) phases
    of a pipeline. The concept of stages is used to make this possible. A YAML pipeline
    can be divided into one or more stages. A stage can represent an environment such
    as test, acceptance, or production, but this isn't always true. If, in an application
    scenario, it makes sense to add extra stages such as pre-production or staging,
    this is possible. It is good practice to publish **pipeline artifacts** to earlier
    stages and to consume or **download artifacts** in later stages.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 除了发布定义的可视化设计器外，还可以使用 YAML 管道实现持续部署。在这种情况下，仍然建议区分管道的构建（CI）阶段和发布（CD）阶段。阶段的概念使得这一点成为可能。一个
    YAML 管道可以划分为一个或多个阶段。一个阶段可以代表一个环境，如测试、验收或生产，但并非总是如此。如果在应用场景中，添加额外的阶段如预生产或暂存是有意义的，也是可以实现的。最佳实践是将**管道工件**发布到早期阶段，并在后续阶段使用或**下载工件**。
- en: Multi-stage YAML pipelines are the new default for creating pipelines in Azure
    DevOps. Since working with YAML pipelines can have a steeper learning curve than
    working with classic releases, some find it easier to work with classic releases
    first and switch to YAML pipelines later. Just like with builds, many of the concepts
    of classic releases translate to multi-stage YAML pipelines as well.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 多阶段 YAML 管道是 Azure DevOps 中创建管道的默认方式。由于与经典发布相比，使用 YAML 管道可能需要较陡的学习曲线，部分用户发现先使用经典发布再转向
    YAML 管道会更容易。就像构建一样，经典发布的许多概念也可以应用到多阶段 YAML 管道中。
- en: Adding stages to YAML pipelines
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向 YAML 管道添加阶段
- en: 'If no stages are defined in a YAML pipeline, there is always one implicit stage
    that holds all the jobs. To convert a pipeline into a multi-stage pipeline, you
    need to add the `stages` keyword and a list of stages, as shown in the following
    code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在 YAML 管道中没有定义任何阶段，则始终存在一个隐式阶段，包含所有作业。要将管道转换为多阶段管道，需要添加 `stages` 关键字和阶段列表，如以下代码所示：
- en: '[PRE0]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding syntax shows that a list of stages is defined at the top of the
    YAML file. Each stage starts by defining a name. This name can be used later on
    so that you can refer to this stage.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语法展示了在 YAML 文件顶部定义了一个阶段列表。每个阶段通过定义一个名称来开始。这个名称可以在后续使用，以便引用该阶段。
- en: While jobs (unless otherwise specified) run in parallel by default, stages always
    run sequentially by default. But just like jobs, stages accept the `dependsOn`
    and `condition` keywords to change the ordering, parallelism, and (potentially)
    to skip stages.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然作业（除非另有指定）默认情况下是并行运行的，但阶段默认情况下始终是按顺序运行的。但就像作业一样，阶段也接受`dependsOn`和`condition`关键字来更改顺序、并行性，并（可能）跳过阶段。
- en: Downloading artifacts
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载工件
- en: A common use of multi-stage pipelines it to separate the build stage and the
    deployment stage. To make this possible, the build stage often publishes one or
    more pipeline artifacts. This was discussed in the previous chapter.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 多阶段流水线的常见用法是将构建阶段与部署阶段分开。为了实现这一点，构建阶段通常会发布一个或多个流水线工件。这在前面的章节中有讨论。
- en: 'All the artifacts that were published in a previous stage of the current pipeline
    can be downloaded using a `download` task:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`download`任务下载在当前流水线前一个阶段中发布的所有工件：
- en: '[PRE1]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It is also possible to download artifacts from other pipelines. To do this,
    the `current` constant has to be replaced with the name of that pipeline. Pipeline
    artifacts are downloaded to the `$(Pipeline.Workspace)` directory.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以从其他流水线下载工件。为此，必须将`current`常量替换为该流水线的名称。流水线工件将下载到`$(Pipeline.Workspace)`目录。
- en: If you want more fine-grained control over downloading pipeline artifacts, for
    example, over the version of the artifact to use or the location to download the
    artifact to, you can also use the Download Pipeline Artifacts tasks, which are
    documented at [https://docs.microsoft.com/bs-cyrl-ba/azure/devops/pipelines/tasks/utility/download-pipeline-artifact?view=azure-devops](https://docs.microsoft.com/bs-cyrl-ba/azure/devops/pipelines/tasks/utility/download-pipeline-artifact?view=azure-devops).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想对下载流水线工件有更精细的控制，例如，控制使用哪个版本的工件或将工件下载到哪个位置，您也可以使用下载流水线工件任务，文档详细描述了这些任务：[https://docs.microsoft.com/bs-cyrl-ba/azure/devops/pipelines/tasks/utility/download-pipeline-artifact?view=azure-devops](https://docs.microsoft.com/bs-cyrl-ba/azure/devops/pipelines/tasks/utility/download-pipeline-artifact?view=azure-devops)。
- en: Publishing and downloading artifacts within a pipeline ensures that the code
    that is built in the first stage is also the code that is deployed in the second
    stage – even if the stages run days apart. In essence, each pipeline run builds
    a local stage of all the artifacts associated with that specific run.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在流水线中发布和下载工件可以确保第一阶段构建的代码也是第二阶段部署的代码——即使这些阶段相隔几天。本质上，每次流水线运行都会构建与该特定运行相关联的所有工件的本地阶段。
- en: Approvals
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审批
- en: In a multi-stage pipeline, it is not possible to define approvers as it is in
    a classic release pipeline. The reason for this is that the pipeline – *the build
    and deployment process – *is viewed as code. Code is worked on by developers and
    operators only. Approvals are worked on by, for example, product owners. However,
    this does not mean that it is not possible to implement approval flows for the
    progression of a pipeline to the next stage.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在多阶段流水线中，无法像经典发布流水线那样定义审批者。原因是流水线——*构建和部署过程——*被视为代码。代码仅由开发人员和操作人员处理。而审批则由例如产品负责人处理。然而，这并不意味着无法为流水线进度到下一个阶段实现审批流程。
- en: To control whether a pipeline is allowed to proceed to a certain stage, the
    concept of environments needs to be introduced. An environment is defined when
    we give it a name and a description. One or more approvers can be attached to
    these environments. Once this is done, jobs can be configured to target such an
    environment. If there is at least one job in a stage that targets an environment,
    then that environment is said to be used by the stage. If an approval has been
    configured on that environment, the deployment to that stage will not continue
    until the approver has given permission.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为了控制是否允许流水线继续进行到某个阶段，需要引入环境的概念。环境通过给它命名和描述来定义。可以将一个或多个审批者附加到这些环境中。完成此操作后，可以配置作业以针对这些环境。如果阶段中至少有一个作业是针对某个环境的，那么该环境就被认为是该阶段使用的环境。如果该环境上配置了审批，那么部署到该阶段将不会继续，直到审批者给出许可。
- en: 'To start working with environments, you''ll need to access the list of environments.
    This list be found in the Pipelines menu, as shown in the following screenshot:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用环境，您需要访问环境列表。该列表可以在流水线菜单中找到，如下图所示：
- en: '![](img/922c7d61-1af0-4e8d-a77b-25d7e990829f.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/922c7d61-1af0-4e8d-a77b-25d7e990829f.png)'
- en: 'To add a new environment, perform the following steps:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加一个新环境，请执行以下步骤：
- en: Open the Pipelines menu and choose Environments.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Pipelines 菜单并选择 Environments。
- en: Select New environment from the top right.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右上角选择“新建环境”。
- en: Specify a name and description.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定名称和描述。
- en: Click Create.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建”。
- en: 'It is possible to associate resources with an environment. Resources that are
    coupled with an environment can be used in a pipeline if, and only if, that pipeline
    is also targeting that environment. To protect the resources of an environment,
    the owner of that environment can add one or more approvers. An example of a configured
    approver can be seen in the following screenshot:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将资源与环境关联。仅当管道也针对该环境时，环境中与资源关联的资源才能在管道中使用。为了保护环境的资源，环境的所有者可以添加一个或多个审批者。以下截图显示了配置审批者的示例：
- en: '![](img/f8684152-29f0-4fd1-8cf4-ce960c1a1dc7.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f8684152-29f0-4fd1-8cf4-ce960c1a1dc7.png)'
- en: 'Approvers can be added to an environment as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 审批者可以通过以下方式添加到环境中：
- en: Navigate to the Environments overview pane.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 Environments 概览面板。
- en: Open an environment by clicking on it.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击环境打开它。
- en: Click the top-right menu marked with the three dots, and and choose Approvals
    and Checks.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右上角带有三个点的菜单，选择“审批与检查”。
- en: Click the Create button.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建”按钮。
- en: Pick a user or group from the list and add extra instructions if needed.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从列表中选择一个用户或组，并在需要时添加额外的说明。
- en: Click the Create button again.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击“创建”按钮。
- en: 'Approvals make it possible for you to control the progression of a pipeline
    to the next stage if that pipeline targets the correct environment. Targeting
    an environment is done by specifying a specific type of job: the deployment job.
    The following YAML shows how to do this:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 审批使您能够控制管道向下一个阶段的推进，前提是该管道目标环境正确。通过指定特定类型的任务：部署任务，来实现目标环境。以下 YAML 显示了如何操作：
- en: '[PRE2]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Deployment jobs do not directly contain the steps to execute like an agent job
    does. Instead, they first have to specify an execution strategy for the tasks
    outlined under the `steps` keyword. At the time of writing, the only strategy
    supported is `runOnce`. Other strategies are expected to be announced in the future.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 部署任务不像代理任务那样直接包含执行步骤。相反，它们首先需要为 `steps` 关键字下列出的任务指定执行策略。撰写本文时，唯一支持的策略是 `runOnce`。预计将来会宣布更多策略。
- en: At the time of writing, only Kubernetes clusters are supported as environment
    resources, but more types of resources have been announced for the future.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，仅支持 Kubernetes 集群作为环境资源，但未来已宣布将支持更多类型的资源。
- en: Now that we know about the technical means for creating release definitions
    and writing multi-stage YAML pipelines, it is time to take a look at the different
    strategies we can use to apply this in practice. These continuous deployment strategies
    are designed to minimize the risk of deploying new versions of an application
    automatically.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了创建发布定义和编写多阶段 YAML 管道的技术手段，是时候看看我们可以在实践中应用的不同策略了。这些持续部署策略旨在最小化自动部署新版本应用程序的风险。
- en: Implementing continuous deployment strategies
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施持续部署策略
- en: Before we deploy an application continuously, it is important to think about
    the strategy we should use. Just doing deployment after deployment may have more
    risks associated with it than the business is willing to accept. It is important
    to think about how to deal with issues that might occur during or after deploying
    a new version of your application.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们持续部署应用程序之前，考虑我们应使用的策略非常重要。仅仅进行一次次部署可能带来的风险可能超过业务所能接受的范围。考虑如何处理在部署新版本的应用程序时，或者部署之后可能发生的问题是很重要的。
- en: There are a few deployment strategies that can be applied to reduce the risks
    that might come with deployments, all of which will be covered in this section.
    Please note that it is possible to combine one or more of the following patterns.
    For example, it is perfectly possible to use a blue-green strategy for every ring
    in a ring-based deployment. Also, all deployment strategies can be combined with
    the use of feature flags.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些部署策略可以应用来降低部署可能带来的风险，本节将涵盖所有这些策略。请注意，可以将一个或多个以下模式组合使用。例如，在基于环的部署中，完全可以对每个环使用蓝绿策略。同时，所有部署策略都可以与功能标志一起使用。
- en: Blue-green deployments
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 蓝绿部署
- en: Blue-green deployments is a technique where a new version of an application
    never gets deployed to the production servers directly. Instead, it gets deployed
    to another set of servers first. Once this has be done successfully, users are
    directed to the new deployment.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝绿部署是一种技术，在这种技术中，应用程序的新版本从不直接部署到生产服务器。相反，它首先部署到另一组服务器中。一旦部署成功，用户会被引导到新的部署上。
- en: 'Let''s assume that an application runs on a total of three hosts by default.
    A typical setup for blue-green deployment would be two sets of three hosts: the
    blue group and the green group. In front of these two sets, there is a reverse
    proxy that functions as a load balancer and redirects the incoming requests to
    the blue group. The following diagram shows how this works:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一个应用程序默认在三台主机上运行。蓝绿部署的典型设置是两组三台主机：蓝色组和绿色组。在这两组前面有一个反向代理，它作为负载均衡器，将传入的请求重定向到蓝色组。以下图示说明了这种工作原理：
- en: '![](img/69ebbc65-d520-4d2c-9ba5-feca9cec8e0d.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/69ebbc65-d520-4d2c-9ba5-feca9cec8e0d.png)'
- en: To deploy a new version of the application in this situation, it needs to be deployed
    to the green group of servers. Since these servers are not receiving any traffic
    from end users, this has no impact on them at all.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，要部署应用程序的新版本，需要将其部署到绿色服务器组。由于这些服务器没有接收到终端用户的流量，因此这对它们完全没有影响。
- en: After the deployment, the new deployment can be verified to ensure it was successful
    and that the application is running correctly. After this verification, the load
    balancer is reconfigured to redirect traffic to the green group. Now, the new
    version of the application is served.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 部署后，可以验证新部署是否成功，并且应用程序是否正确运行。验证完成后，负载均衡器被重新配置，将流量重定向到绿色组。现在，应用程序的新版本就会被提供。
- en: Should there suddenly be any unexpected issues, it is very easy to switch back
    to the previous deployment by reconfiguring the load balancer back to the blue
    group. If the deployment is successful and there are no issues, it is possible
    to start the deployment of the next version by going through the same procedure,
    but now with the roles of the green and the blue groups switched.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 如果突然出现任何意外问题，通过重新配置负载均衡器回到蓝色组，非常容易将系统切换回先前的部署。如果部署成功且没有问题，可以通过相同的程序启动下一个版本的部署，但现在绿色组和蓝色组的角色会互换。
- en: Immutable servers
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不可变服务器
- en: A variation of the blue-green deployment pattern is immutable servers. With
    immutable servers, there is no going back and forth between two groups of servers.
    Instead, the group of servers that are serving the old version of the application
    is completely disregarded or removed. Often, this is done after a grace period.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝绿部署模式的一个变体是不可变服务器。在使用不可变服务器时，不再在两组服务器之间来回切换。相反，服务旧版本应用程序的服务器组会被完全丢弃或移除。通常，这会在一个宽限期之后完成。
- en: 'The result of this is that there will still be means to roll back to a previous
    version – almost instantaneously if the old servers are kept around for a while.
    The other benefit is that there is now a guarantee that no remains from a previous
    deployment are being carried over into the newer deployments. Using immutable
    servers, the change of active servers over time might look as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的结果是，仍然有办法将系统回滚到以前的版本——如果旧的服务器暂时保留，那么回滚几乎是瞬时的。另一个好处是，现在可以保证先前的部署中没有遗留内容被带入新的部署中。使用不可变服务器时，活动服务器随时间变化的方式可能如下所示：
- en: '![](img/8d69a070-129b-409b-9fd5-2064e39a2b03.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d69a070-129b-409b-9fd5-2064e39a2b03.png)'
- en: Of course, an approach like this is only feasible when using technologies such
    as containers or virtual machines. Nobody would expect anyone to disregard physical
    servers after every redeployment.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，像这样的做法只有在使用容器或虚拟机等技术时才可行。没人会期望在每次重新部署后都丢弃物理服务器。
- en: Progressive exposure
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渐进式曝光
- en: Progressive exposure is a deployment strategy in which the number of users that
    have access to a new deployment or a new feature is slowly increased over time.
    The goal of this strategy is to limit the number of users that are experiencing
    issues when a faulty release of a feature is made available.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 渐进式曝光是一种部署策略，在这种策略中，能够访问新部署或新功能的用户数量会随着时间的推移而逐渐增加。该策略的目标是限制在故障版本的功能发布时，出现问题的用户数量。
- en: 'We can also look at this more positively and in line with the continuous deployment
    way of thinking: exposing a new feature to only a few users at first and increasing
    that number over time allows us to increase the amount of trust in a new version
    or feature of an application before exposing it to all users.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以更加积极地看待这一点，并与持续部署的思维方式相一致：首先仅向少数用户暴露新特性，并随着时间的推移逐步增加这个数量，这使我们可以在将新版本或特性暴露给所有用户之前，逐步增加对其的信任度。
- en: Canary deployments
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 金丝雀部署
- en: The first strategy for progressive exposure is to use canary deployments. In
    a canary deployment, not all users are routed to the new version immediately –
    only a limited percentage of the users get access to that version. These users
    are the canaries and they are monitored very closely. If they experience any issues
    or if degradation in performance or a service is measured, the new deployment
    is quickly rolled back.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 渐进式暴露的第一种策略是使用金丝雀部署。在金丝雀部署中，并不是所有用户都立即被引导到新版本——只有一小部分用户可以访问该版本。这些用户就是金丝雀用户，并会受到密切监控。如果他们遇到任何问题，或者测量到性能下降或服务问题，新部署会迅速回滚。
- en: 'A typical approach to realizing canary deployments is to use them in combination
    with blue-green deployments. The difference is that instead of switching all users
    over at the same time, only a small percentage is moved over to the new version
    at the start, and then the number of users that are moved over is gradually increased
    over time. This might look something similar to the following:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 实现金丝雀部署的典型方法是将其与蓝绿部署结合使用。不同之处在于，与同时切换所有用户不同，初始时只有少数用户被切换到新版本，然后逐渐增加切换的用户数量。可能会类似于以下内容：
- en: '![](img/b28dc8db-007c-4f6e-baee-cdcdd9b4fe84.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b28dc8db-007c-4f6e-baee-cdcdd9b4fe84.png)'
- en: If a deployment is rolled back because errors have been observed, this is not
    a fun experience for users. To prevent the same small group of users running into
    issues repeatedly, it might be beneficial to select a different group of canary
    users afterward.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果因为观察到错误而回滚部署，这对用户来说并不是一种愉快的体验。为了防止同一小部分用户重复遇到问题，之后选择一个不同的金丝雀用户组可能会有益。
- en: Ring-based deployments
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于环的部署
- en: In a ring-based environment, there is not just one production environment – there
    are multiple. Each production environment serves only a portion of the users.
    Its difference from a canary deployment is that, instead of just two environments,
    there can be as many environments as needed. Also, every new version goes to all
    the rings, one after the other.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于环的环境中，不仅仅有一个生产环境——而是有多个。每个生产环境仅服务一部分用户。它与金丝雀部署的不同之处在于，不仅只有两个环境，所需的环境数量可以根据需要进行设置。此外，每个新版本都会依次推送到所有的环。
- en: 'So, instead of redirecting the users, in a ring-based environment, the new
    version is propagating to the servers used by those users. The new version just
    keeps propagating from one ring to the next, until they are all done:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在基于环的环境中，与其重新定向用户，不如将新版本传播到这些用户使用的服务器。新版本会从一个环逐步传播到下一个环，直到所有环完成：
- en: '![](img/94cbe569-28fa-4548-bf78-948edbd3d6db.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/94cbe569-28fa-4548-bf78-948edbd3d6db.png)'
- en: Ring-based deployment architectures are especially suitable for products that
    are accessed by customers from all around the world. The different rings can be
    positioned around the world, thus combining the deployment benefits with the added
    benefit of reduced latencies for users.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 基于环的部署架构特别适合全球各地客户访问的产品。不同的环可以分布在全球各地，从而将部署的优势与减少用户延迟的附加优势相结合。
- en: Feature flags
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特性标志
- en: The third form of progressive deployment can be achieved using feature flags,
    also called feature toggles. Where canary deployments and ring-based deployments
    rely on slowly exposing new binaries to an increasing number of users, feature
    flags are used to slowly expose new features to an increasing number of users.
    This can be achieved even if they are all sending requests to the same server.
    Feature flags are used to decouple deploying a new version of the application
    binaries from releasing new features by enabling or disabling specific features
    at runtime.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种渐进式部署的形式可以通过特性标志实现，也叫做特性开关。在金丝雀部署和基于环的部署依赖于将新的二进制文件逐步暴露给越来越多的用户时，特性标志则用于逐步向越来越多的用户暴露新特性。这即使在所有用户都向同一个服务器发送请求的情况下也可以实现。特性标志用于将部署新版本应用程序二进制文件与发布新特性解耦，通过在运行时启用或禁用特定特性来实现。
- en: The best example of a feature flag is showing or hiding a button that gives
    users access to a new feature. Application settings, a database, or an external
    service are used to keep track of which feature has been enabled for which user.
    Depending on that setting, the feature is shown or hidden. Examples of such external
    services include LaunchDarkly, Split.IO, and Prefab.cloud.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 功能标志的最佳示例是显示或隐藏一个按钮，该按钮使用户可以访问新功能。应用程序设置、数据库或外部服务用于跟踪哪个功能已为哪个用户启用。根据该设置，功能会显示或隐藏。此类外部服务的示例包括
    LaunchDarkly、Split.IO 和 Prefab.cloud。
- en: Other feature flags might toggle bug fixes or performance improvements on or
    off. This can help to gradually expose these to ensure there are no issues. When
    using feature toggles for these kinds of changes deeper in a codebase, introducing
    feature toggles also comes with a cost, and a process for this should be in place.
    This process should not only describe adding feature toggles, but also how to
    remove them as soon as possible. An example of such a process can be as follows.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 其他功能标志可能会开启或关闭错误修复或性能改进。这有助于逐步暴露这些内容，确保没有问题。在代码库中较深的地方使用功能开关进行这类变更时，引入功能开关也有成本，因此应该制定一个相关的过程。这个过程不仅应该描述如何添加功能开关，还应该描述如何尽快移除它们。以下是一个此类过程的示例。
- en: A new feature flag is introduced by a developer as soon as the business needs
    to release the feature independently of the deployments that were made by the
    development team, or for a change that the development team qualifies as high
    risk and wants to be able to pull back at any time without redeploying it. Introducing
    a feature flag means a new database entry or a declaration of a new setting is
    applied in the application settings.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当业务需要独立于开发团队的部署发布新功能，或者对于开发团队认为风险较高的变更并希望随时撤回而不重新部署时，开发者会引入新的功能标志。引入功能标志意味着在应用程序设置中应用一个新的数据库条目或声明一个新的设置。
- en: After introducing the feature toggle, the new feature or change is developed
    and tested. This means that there are one or more `if`statements in the codebase
    that execute different code paths, depending on the state of the feature flag.
    At this point, the application must maintain two code execution paths until they
    remove the feature flag again. It is good practice to separate these two code
    paths as much as possible using existing engineering practices, such as dependency
    injection.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在引入功能开关后，新的功能或变更将被开发和测试。这意味着代码库中会有一个或多个`if`语句，根据功能标志的状态执行不同的代码路径。此时，应用程序必须保持两个代码执行路径，直到再次移除功能标志。最好使用现有的工程实践（如依赖注入）尽可能地将这两个代码路径分开。
- en: While the code is continuously being shipped to users, the feature is not enabled
    for anyone. Only when the development team is fully satisfied with the change
    or the product owner feels the time is right for releasing a new feature is the
    feature flag turned on.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管代码持续交付给用户，但功能对任何人都不可用。只有当开发团队完全满意该变更，或产品负责人觉得时机成熟发布新功能时，功能标志才会开启。
- en: It is important not to stop here. After turning the feature flag on, it should
    actively be determined whether the feature or change is working properly. And
    if it is, the feature flag should be removed as soon as possible. This way, the
    time the two code paths need to be maintained for is as short as possible.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是不要止步于此。在开启功能标志后，应该积极判断该功能或变更是否正常工作。如果正常工作，功能标志应尽快移除。这样，两个代码路径需要维护的时间就尽可能短。
- en: Also, note that besides maintaining an increased number of execution paths,
    there is now a larger number of paths to test. The impact of this consequence
    quickly grows if dependencies or exclusions between feature flags are introduced.
    Feature flags that can only be turned on or off, depending on the state of another
    feature flag, can be costly, and it is recommended to avoid this.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 同时需要注意的是，除了维护更多的执行路径外，现在还需要测试更多的路径。如果引入了功能标志之间的依赖关系或排斥关系，这个后果的影响会迅速扩大。功能标志只能根据另一个功能标志的状态开关的情况可能会造成很高的成本，建议避免这种情况。
- en: If implemented properly and removed as soon as possible, the added cost of feature
    flags is often worth it. As with every engineering practice, start small and evaluate
    what works in the given context, before adapting the practice at scale.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如果实施得当并尽早移除，功能标志所带来的额外成本通常是值得的。与每一项工程实践一样，先从小处开始，评估在给定上下文中有效的方法，再根据实际情况在大规模中应用。
- en: Roll back or fail forward
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回滚或前进失败
- en: No matter which strategy is being used, it is necessary to think about the ability
    to roll back one or more versions and how long that will take. For example, blue-green
    deployments give us the ability to go back one version almost instantaneously,
    as long as a new version is not being deployed to the non-active servers yet.
    On the other hand, performing a rollback in a ring-based deployment will require
    a full redeploy of the previous version, which will probably take longer and comes
    with all the risks of deployment in itself. This may even need to be done on multiple
    rings, making it more challenging.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 无论使用哪种策略，都必须考虑回滚一个或多个版本的能力，以及所需的时间。例如，蓝绿部署让我们能够几乎瞬间回滚到上一个版本，只要新的版本尚未部署到非活动服务器上。另一方面，在基于环的部署中执行回滚将需要完全重新部署先前版本，这可能需要更长时间，并且本身伴随部署风险。甚至可能需要在多个环上执行回滚，这使得问题更具挑战性。
- en: 'Another approach that can be adopted is that of failing forward. When adopting
    this approach, it is stated that there will never be a rollback to a previous
    version. Instead, when any issue is encountered, this will be addressed by redeploying
    a new version with the fix of that issue in it. This strategy is gaining traction
    lately since it saves time as we don''t have to prepare, test, and practice rollbacks.
    However, there can be risks involved with this process:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种可以采用的方法是前进失败。当采用这种方法时，声明绝不会回滚到之前的版本。相反，当遇到任何问题时，通过重新部署包含修复问题的新版本来解决问题。这种策略最近越来越受欢迎，因为它节省了时间，因为我们不必准备、测试和实践回滚。然而，这个过程可能涉及风险：
- en: There is no guarantee that the fix will be correct. The issue might not be resolved
    by the new deployed version or, even worse, the new version might result in transitioning
    from one issue to another.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并不能保证修复一定是正确的。问题可能没有被新部署的版本解决，甚至更糟，新的版本可能导致从一个问题转到另一个问题。
- en: Working out a detailed root cause of any issue takes time, just like writing
    a fix does. The consequence of this might be that the fix might take longer than
    a rollback would have taken.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决任何问题的详细根本原因需要时间，就像编写修复方案一样。其后果可能是，修复可能比回滚所需的时间更长。
- en: No matter which approach is taken, consider the consequences and prepare for
    them.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 无论采取哪种方法，都要考虑后果并做好准备。
- en: So far, we have mainly focused on web-based applications. In the next section,
    we will shift our attention to mobile applications.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们主要关注的是基于 Web 的应用程序。在下一节中，我们将把注意力转向移动应用。
- en: Deploying mobile applications
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署移动应用
- en: One type of application that needs a special approach to deployment is mobile
    applications. These applications are often not downloaded and installed by end
    users directly and are mostly consumed via an app store on their mobile device.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 需要特殊部署方法的一种应用类型是移动应用。这些应用通常不是由最终用户直接下载和安装的，而是通过用户手机上的应用商店进行消费。
- en: App Center is a Microsoft offering that can be used for distributing (deploying)
    mobile applications to end users via app stores, but also via private distribution
    lists.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: App Center 是微软提供的服务，可以通过应用商店将移动应用分发（部署）给最终用户，也可以通过私人分发列表进行分发。
- en: 'After logging into App Center, you will be taken to the following screen:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 登录 App Center 后，你将进入以下界面：
- en: '![](img/96a9c809-20ab-4be9-940a-19a1e66de1c7.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/96a9c809-20ab-4be9-940a-19a1e66de1c7.png)'
- en: Here, you can create a new app definition. An app definition should be created
    for every target operating system of an application. If the same application is
    going to be deployed to both Android and iOS, at least two apps have to be created.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以创建一个新的应用定义。每个应用的目标操作系统都应该创建一个应用定义。如果同一应用程序要部署到 Android 和 iOS，则至少需要创建两个应用。
- en: 'Creating an app is done by performing the following steps:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个应用程序的步骤如下：
- en: Log in to App Center.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到 App Center。
- en: Click the blue Add new app button. If there are no existing apps, this button
    will be on the center of the screen; otherwise, it will be at the top right (hidden
    under the popup shown in the preceding screenshot).
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击蓝色的“添加新应用”按钮。如果没有现有应用程序，此按钮将在屏幕中央；否则，它将在右上方（隐藏在前面截图中显示的弹出窗口下）。
- en: Enter the name of the app.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入应用程序的名称。
- en: Select the type of release.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择发布类型。
- en: Select the operating system.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择操作系统。
- en: Select the platform to use.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择要使用的平台。
- en: Click Add new app to create the app.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“添加新应用”来创建应用。
- en: Once an app has been created, it can be connected to the correct app store and
    distribution groups can be created.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用被创建，就可以将其连接到正确的应用商店，并可以创建分发组。
- en: Connecting to the app store
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接到应用商店
- en: 'The app store is the main mechanism for distributing an application for all
    mobile platforms. Once a build is delivered to an app store, users can install
    and use the application. The current list of connections to app stores can be
    opened using the Stores tab, on the left-hand side of App Center. From this list,
    an individual store connection can be opened, which will take us to a screen similar
    to the one shown in the following screenshot:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 应用商店是为所有移动平台分发应用程序的主要机制。一旦构建交付到应用商店，用户就可以安装并使用该应用。当前连接到应用商店的列表可以通过左侧 App Center
    中的 Stores 标签查看。在此列表中，可以打开单个商店连接，这将带我们进入一个类似于以下屏幕截图的界面：
- en: '![](img/11e01b80-57ac-4263-b81e-c327525753d3.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](img/11e01b80-57ac-4263-b81e-c327525753d3.png)'
- en: This view shows a list of all the versions of the application that have been
    published to the connected store account. This is also where a new version of
    the application can be selected for publication to the store. This is done using
    the blue Publish button at the top. This will open a popup where you can select
    the correct release. You only have to confirm this once to publish this version.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 此视图显示所有已发布到连接的商店账户的应用版本列表。这也是选择要发布到商店的新版本的地方。通过顶部的蓝色发布按钮完成此操作。这将打开一个弹出窗口，您可以在其中选择正确的发布版本。只需确认一次，即可发布此版本。
- en: 'New connections to the store can be created by navigating back to the list
    of all store connections and clicking the Add button. This will open a wizard
    where two pieces of information have to be entered:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过返回到所有商店连接的列表并点击添加按钮来创建新的商店连接。这将打开一个向导，要求输入两个信息：
- en: '**The type of store connection**: This list is limited to the stores that are
    available to apps of the type that was chosen when creating the app definition.
    For example, for iOS, this is limited to the Apple App Store and the Intune Company
    Portal.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**商店连接类型**：该列表仅限于适用于所选应用类型的商店。例如，对于 iOS，限制为 Apple App Store 和 Intune 公司门户。'
- en: '**Connection details**: Often, they include the means of authentication between
    App Center and the app store.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接详情**：通常包括 App Center 和应用商店之间的认证方式。'
- en: Once the new connection has been created, it can be found on the list shown
    previously and can be used to distribute the app.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦新连接被创建，它可以在之前显示的列表中找到，并可用于分发应用。
- en: Another means of distribution is using distribution groups, which we'll introduce
    in the next section.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种分发方式是使用分发组，我们将在下一节介绍。
- en: Using distribution groups
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用分发组
- en: 'Distribution groups are used to create named lists of one or more users, often
    testers or alpha users, that install the application through an invitation, rather
    than via the app store. Distribution groups can be found in the left-hand menu,
    under Groups:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 分发组用于创建一个或多个用户的命名列表，这些用户通常是测试人员或早期用户，通过邀请而非通过应用商店安装应用。分发组可以在左侧菜单中找到，位于 Groups
    下：
- en: '![](img/ce71df3b-d743-4238-a772-d68809c6b2d7.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ce71df3b-d743-4238-a772-d68809c6b2d7.png)'
- en: 'Here, a new group can be added, as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，可以添加一个新组，如下所示：
- en: Navigate to Distribution groups using the menu on the left.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用左侧菜单导航到分发组。
- en: Click the blue button labeled with a plus (+) sign (hidden under the popup in
    the preceding screenshot).
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击标有加号（+）的蓝色按钮（隐藏在前面截图中的弹出窗口下）。
- en: Choose a name for the group.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择组的名称。
- en: Add one or more members.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个或多个成员。
- en: Save the new group.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存新组。
- en: Once a distribution group has been created, it can be used for publishing releases,
    which we will discuss in the next section.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了分发组，就可以用于发布版本，我们将在下一节讨论。
- en: Publishing an app
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布应用
- en: 'To publish the first or a new version of an app, it has to be shared with App
    Center. This can be done using the Releases tab on the left-hand side. When opening
    up the releases, the following view, detailing all the current releases, will
    appear. From here, any release can be selected so that you can view the details
    of that release:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 要发布应用的第一个版本或新版本，必须将其与 App Center 共享。这可以通过左侧的 Releases 标签完成。打开发布选项后，会显示以下视图，详细列出当前的所有发布。在这里，可以选择任何一个发布版本，以查看该发布的详细信息：
- en: '![](img/ff331218-9620-4bc3-a888-b4de96a1cd4b.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ff331218-9620-4bc3-a888-b4de96a1cd4b.png)'
- en: In this view, a list of the most recent releases is shown in the middle column.
    After selecting an individual release, the details of that version will be shown.
    This includes its formal version, the store(s) and/or distribution group(s) it
    has been shared with, and other details.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在此视图中，中间列显示了最近的发布列表。选择某个发布后，将显示该版本的详细信息，包括正式版本、已共享的商店和/或分发组，以及其他细节。
- en: From here, it is possible to distribute this specific version to a store connection
    or distribution group directly using the Distribute bottom at the top right.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在此，你可以通过右上角的“分发”按钮直接将此特定版本分发到商店连接或分发组。
- en: 'From here, a new release can also be created by uploading a new build of the
    app. To do this, follow these steps:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在此，你也可以通过上传应用程序的新构建来创建新的发布。为此，请按照以下步骤操作：
- en: 'Click on the New release button, which is available from the list of all releases.
    (It might be necessary to close the details of a specific release first.) This
    will open the following view:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“新发布”按钮，该按钮可从所有发布的列表中找到。（可能需要先关闭某个特定发布的详细信息。）这将打开以下视图：
- en: '![](img/d4c34788-2be7-4547-ac25-7a2c0656a940.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d4c34788-2be7-4547-ac25-7a2c0656a940.png)'
- en: A new wizard will open, where a build needs to be uploaded. Depending on the
    type of app, the correct type of file will be requested. After uploading the binaries,
    click Next.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将打开一个新的向导，在该向导中需要上传构建文件。根据应用类型，将请求正确类型的文件。上传二进制文件后，点击“下一步”。
- en: Now, the release notes have to be filled in. After detailing the changes in
    this release, click Next again.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，需要填写发布说明。详细描述此版本中的更改后，再次点击“下一步”。
- en: Now, it is time to specify where this new build should be distributed. At least
    one destination – either a distribution group or a store – has to be selected.
    After selecting one or more destinations, click Next again.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，是时候指定新构建应分发到哪里了。至少需要选择一个目的地——可以是分发组或商店。选择一个或多个目的地后，再次点击“下一步”。
- en: The final wizard tab will show the selections you've made so far. Check the
    details and click Distribute to complete the creation of a new version and its
    initial distribution.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后的向导选项卡将显示你迄今为止所做的选择。检查细节后，点击“分发”以完成新版本的创建及其初步分发。
- en: Often, the same version or release needs to be distributed to other groups or
    stores over time as well. It is not necessary (nor useful) to create a new release
    every time. Instead, going to the Detail pages of the new destination store connection
    or distribution group allows you to publish an existing release to that destination
    as well.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，同一版本或发布需要随着时间的推移分发到其他组或商店。每次都创建新发布并不是必须的（也没有意义）。相反，进入新目的地商店连接或分发组的详细页面，也可以将现有发布发布到该目的地。
- en: As an alternative to using App Center to perform release management this way,
    it is also possible to use Azure Pipelines for release management.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种替代方法，除了使用App Center进行这种发布管理外，还可以使用Azure Pipelines进行发布管理。
- en: App Center via Azure Pipelines
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过Azure Pipelines使用App Center
- en: App Center can also be integrated with Azure Pipelines. If teams are familiar
    with the release process in Azure Pipelines, it can be sensible to build the app
    in Azure Pipelines and only use App Center for deployment to stores and distribution
    groups.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: App Center还可以与Azure Pipelines集成。如果团队熟悉Azure Pipelines中的发布流程，那么将应用程序构建在Azure
    Pipelines中，并仅在App Center中使用分发到商店和分发组，可能是一个明智的选择。
- en: To make this possible, there are tasks available in Azure Pipelines that allow
    you to upload a release and trigger the deployment of a release to a store or
    distribution group. That way, release management can be done in Azure Pipelines
    while the App Center-specific capabilities are still leveraged where applicable.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，Azure Pipelines中提供了允许上传发布并触发发布到商店或分发组的任务。通过这种方式，发布管理可以在Azure Pipelines中完成，同时在适用的情况下仍能利用App
    Center的特定功能。
- en: This section focused on mobile applications specifically, while the next section
    will apply to all types of releases. When creating releases is automated and new
    versions follow each other quickly, it is useful to start automating the creation
    and publication of release notes as well. This will be discussed in the next section.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 本节专注于移动应用程序，而下一节将适用于所有类型的发布。当发布的创建自动化且新版本快速迭代时，自动化发布说明的创建和发布也变得十分有用。此内容将在下一节中讨论。
- en: Automating release notes
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化发布说明
- en: After automating the build, releasing an application, and working on increasing
    the flow of value to end users, many developers find that it becomes harder and
    harder to keep documentation and release notes up to date. As the amount of releases
    increases, this becomes more and more work, and eventually, the team will fall
    behind or even give up completely.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在自动化构建、发布应用程序并致力于提高向最终用户提供价值的流程后，许多开发人员发现，保持文档和发布说明的更新变得越来越困难。随着发布次数的增加，这项工作变得越来越繁重，最终，团队可能会落后甚至完全放弃。
- en: 'To combat this, it is possible to automate the creation and publication of
    release notes. One way to do this is by using the Azure DevOps Release Notes Generator.
    The generator is an Azure Functions application that is available on GitHub. To
    use the Release Notes Generator, the following needs to be done:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，可以自动化发布说明的创建和发布。一种方法是使用 Azure DevOps 发布说明生成器。该生成器是一个 Azure Functions
    应用，托管在 GitHub 上。要使用发布说明生成器，需完成以下操作：
- en: Download or clone the function code from GitHub.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 GitHub 下载或克隆功能代码。
- en: Create an Azure App Service Plan, function app, and storage account in Azure.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Azure 中创建一个 Azure App Service Plan、功能应用和存储账户。
- en: Create a new blob container in the storage account called `releases`*.*
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在存储账户中创建一个新的 blob 容器，命名为 `releases`*。*
- en: Compile the function code and deploy it to an Azure App Service.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译功能代码并将其部署到 Azure App Service。
- en: Create a new Azure DevOps WebHook to call the deployed function whenever a new
    release is created.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 Azure DevOps WebHook，以便在创建新版本时调用已部署的功能。
- en: 'After setting this up, the generator will run whenever a new release is created.
    It will then do the following:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 设置完成后，生成器将在每次创建新版本时运行。然后，它将执行以下操作：
- en: Query the created release for its name, all associated work items, and all the
    commits that are new since the previous release.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查询创建的版本，获取其名称、所有相关工作项以及自上一个版本以来的所有新提交。
- en: Generate a markdown file containing all of this information.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成一个包含所有这些信息的 Markdown 文件。
- en: Upload that file to the blob container, that is, `releases`*.*
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将该文件上传到 blob 容器，即 `releases`*。*
- en: Of course, the Azure DevOps Release Notes Generator is just one example of automating
    tasks around releases, and there are other alternatives available as well. Also,
    many companies create tailored, in-house automation scripts for updating and publishing
    documentation and other tasks.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，Azure DevOps 发布说明生成器只是自动化发布相关任务的一个示例，市场上还有其他可选方案。此外，许多公司也会为更新和发布文档及其他任务创建量身定制的内部自动化脚本。
- en: Other tools
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他工具
- en: In addition to Azure DevOps and App Center, there are other tools that can be
    used for deploying and releasing software. GitLab CI/CD and Jenkins, which were
    discussed in the previous chapter for executing builds, can also be used for releases.
    Besides those, Octopus Deploy is also a commonly used tool that integrates well
    with Azure DevOps.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Azure DevOps 和 App Center，还有其他工具可用于部署和发布软件。前一章节中讨论过的 GitLab CI/CD 和 Jenkins，也可以用于发布。除此之外，Octopus
    Deploy 也是一个常用的工具，与 Azure DevOps 集成良好。
- en: Octopus Deploy
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Octopus Deploy
- en: '**Octopus Deploy** is a deployment automation tool that is based on the concept
    of running a series of tasks on one or more target machines.'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '**Octopus Deploy** 是一个部署自动化工具，它基于在一个或多个目标机器上运行一系列任务的概念。'
- en: Octopus reaches these machines through a tentacle (an agent) that is installed
    on these machines. In Octopus Deploy, it is possible to define applications and
    environments and assign one or more machines to each of those. To do deployments,
    execution steps can be defined in a graphical editor, comparable to the visual
    release editor of Azure DevOps.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: Octopus 通过安装在这些机器上的触角（代理）来访问这些机器。在 Octopus Deploy 中，可以定义应用程序和环境，并为每个环境分配一个或多个机器。要进行部署，可以在图形编辑器中定义执行步骤，这类似于
    Azure DevOps 的可视化发布编辑器。
- en: One of the main differences is that these steps are not defined per environment,
    only once per pipeline. Next, it is possible to specify which environments each
    task should run on. This way, it is easier to see where the deployment to different
    environments varies.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的区别之一是，这些步骤不是按环境定义的，而是每个管道只定义一次。接下来，可以指定每个任务应在哪些环境中运行。这样，更容易查看不同环境之间的部署差异。
- en: There is an integration between Azure DevOps and Octopus Deploy available, in
    the form of a build and release task. Using this integration, you can start a
    deployment using Octopus Deploy from an Azure DevOps build or release pipeline.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps 和 Octopus Deploy 之间有一个集成，形式为构建和发布任务。通过这个集成，你可以从 Azure DevOps 的构建或发布流水线启动
    Octopus Deploy 部署。
- en: Summary
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about continuous delivery and deployment and how
    you can implement them using Azure DevOps. In addition to the visual release editor,
    you also learned about multi-stage YAML pipelines, which you can use for releasing
    your software to multiple stages, all of the way to production. Next, we discussed
    a series of strategies that you can use for releasing. You now know about blue-green
    deployments, using immutable servers, and different strategies for progressive
    exposure. You also learned how to choose between making sure you have rollback
    capabilities or accepting a fail forward strategy.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了持续交付和持续部署，以及如何使用 Azure DevOps 实现它们。除了视觉发布编辑器外，你还了解了多阶段 YAML 流水线，你可以使用它将软件发布到多个阶段，一直到生产环境。接下来，我们讨论了一系列可以用于发布的策略。现在，你知道了蓝绿部署、使用不可变服务器以及渐进曝光的不同策略。你还学会了如何在确保回滚能力和接受失败前进策略之间做出选择。
- en: Then, you learned about automating release notes and documentation and how you
    can generate those automatically as part of your pipeline. After that, you learned
    about continuous deployment for mobile applications and how that differs from
    the delivery of web applications. Finally, you learned about the existence of
    Octopus Deploy, how it operates, and that it integrates with Azure DevOps.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你了解了如何自动化发布说明和文档，并且你可以将这些作为流水线的一部分自动生成。之后，你了解了移动应用程序的持续部署以及它与 Web 应用程序交付的区别。最后，你了解了
    Octopus Deploy 的存在、它的操作方式以及它与 Azure DevOps 的集成。
- en: In the next chapter, you will learn about topic dependency management using
    Azure Artifacts. Azure Artifacts can be used to host your own NuGet packages or
    to host build artifacts when you are using other products for building or releasing
    your application in combination with Azure Pipelines.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习使用 Azure Artifacts 进行主题依赖管理。Azure Artifacts 可用于托管自己的 NuGet 包，或者在使用其他产品构建或发布应用程序时托管构建工件，并结合
    Azure Pipelines 使用。
- en: Questions
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'As we conclude this chapter, here is a list of questions for you to test your
    knowledge of this chapter''s material. You will find the answers in the *Assessments*
    section of the Appendix:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，这里有一份问题清单，供你测试对本章内容的掌握情况。你可以在附录的*评估*部分找到答案：
- en: 'True or false: An Azure DevOps Classic Release is always triggered by the availability
    of a new version of an artifact.'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 判断对错：Azure DevOps 经典发布总是由新的工件版本的可用性触发。
- en: Which of the following platforms can App Center publish apps to? (You can choose
    more than one.)
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些平台可以通过 App Center 发布应用？（你可以选择多个）
- en: Google Play Store
  id: totrans-267
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Google Play 商店
- en: Apple App Store
  id: totrans-268
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Apple App Store
- en: Microsoft Intune
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Microsoft Intune
- en: Which of the following techniques use progressive exposure for minimizing the
    risks of deploying a new version? (You can choose more than one.)
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些技术使用渐进曝光来最小化部署新版本的风险？（你可以选择多个）
- en: Feature Toggles
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 功能切换
- en: Ring-based deployments
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于环的部署
- en: Canary deployments
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 金丝雀部署
- en: 'True or false: Deployment groups can be used for deploying software to on-premises
    servers when an Azure Pipelines agent is installed on the machine that will be
    running the software.'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 判断对错：部署组可以用于将软件部署到本地服务器，只要在将运行该软件的机器上安装了 Azure Pipelines 代理。
- en: What is the advantage of integrating App Center with Azure Pipelines if you
    have an Azure Pipelines release definition triggering actions in App Center?
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你在 Azure Pipelines 发布定义中触发了 App Center 的操作，将 App Center 与 Azure Pipelines
    集成的优势是什么？
- en: Further reading
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: More information on using stages in YAML pipelines can be found at [https://docs.microsoft.com/en-us/azure/devops/pipelines/process/stages](https://docs.microsoft.com/en-us/azure/devops/pipelines/process/stages).
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于在 YAML 流水线中使用阶段的更多信息，可以在[https://docs.microsoft.com/en-us/azure/devops/pipelines/process/stages](https://docs.microsoft.com/en-us/azure/devops/pipelines/process/stages)找到。
- en: More information on the idea of immutable servers can be found at [https://martinfowler.com/bliki/ImmutableServer.html](https://martinfowler.com/bliki/ImmutableServer.html).
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于不可变服务器的更多信息可以在[https://martinfowler.com/bliki/ImmutableServer.html](https://martinfowler.com/bliki/ImmutableServer.html)找到。
- en: More information about LaunchDarkly can be found at [https://launchdarkly.com/](https://launchdarkly.com/).
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 LaunchDarkly 的更多信息可以在 [https://launchdarkly.com/](https://launchdarkly.com/)
    查找。
- en: More details about the build and release extension for integration with Octopus
    Deploy can be found at [https://marketplace.visualstudio.com/items?itemName=octopusdeploy.octopus-deploy-build-release-tasks](https://marketplace.visualstudio.com/items?itemName=octopusdeploy.octopus-deploy-build-release-tasks).
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于与 Octopus Deploy 集成的构建和发布扩展的更多细节可以在 [https://marketplace.visualstudio.com/items?itemName=octopusdeploy.octopus-deploy-build-release-tasks](https://marketplace.visualstudio.com/items?itemName=octopusdeploy.octopus-deploy-build-release-tasks)
    查找。
- en: The Azure DevOps Release Notes Generator can be found at [https://docs.microsoft.com/en-us/samples/azure-samples/azure-devops-release-notes/azure-devops-release-notes-generator/](https://docs.microsoft.com/en-us/samples/azure-samples/azure-devops-release-notes/azure-devops-release-notes-generator/).
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure DevOps 发布说明生成器可以在 [https://docs.microsoft.com/en-us/samples/azure-samples/azure-devops-release-notes/azure-devops-release-notes-generator/](https://docs.microsoft.com/en-us/samples/azure-samples/azure-devops-release-notes/azure-devops-release-notes-generator/)
    查找。
- en: Some Microsoft hands-on labs for practicing the topics we covered in this chapter
    can be found at [https://docs.microsoft.com/en-us/learn/modules/create-multi-stage-pipeline/index](https://docs.microsoft.com/en-us/learn/modules/create-multi-stage-pipeline/index),
    [https://docs.microsoft.com/en-us/learn/modules/create-release-pipeline/index](https://docs.microsoft.com/en-us/learn/modules/create-release-pipeline/index) and
    [https://docs.microsoft.com/en-us/learn/modules/manage-release-cadence/index](https://docs.microsoft.com/en-us/learn/modules/manage-release-cadence/index).
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些微软的动手实验室，可以帮助你练习本章所涵盖的主题，可以在 [https://docs.microsoft.com/en-us/learn/modules/create-multi-stage-pipeline/index](https://docs.microsoft.com/en-us/learn/modules/create-multi-stage-pipeline/index)、[https://docs.microsoft.com/en-us/learn/modules/create-release-pipeline/index](https://docs.microsoft.com/en-us/learn/modules/create-release-pipeline/index)
    和 [https://docs.microsoft.com/en-us/learn/modules/manage-release-cadence/index](https://docs.microsoft.com/en-us/learn/modules/manage-release-cadence/index)
    查找。
