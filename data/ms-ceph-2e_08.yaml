- en: Developing with Librados
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Librados进行开发
- en: Ceph provides block, file, and object storage via built-in interfaces that will
    meet the requirements of a large number of users. However, in scenarios where
    an application is developed internally, there may be benefits to directly interfacing
    it into Ceph via the use of librados. Librados is the Ceph library that allows
    applications to directly read and write objects to the RADOS layer in Ceph.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Ceph通过内建接口提供块存储、文件存储和对象存储，能够满足大量用户的需求。然而，在内部开发应用程序的场景中，通过使用librados将应用程序直接与Ceph接口对接，可能会带来一些好处。Librados是Ceph提供的一个库，允许应用程序直接读取和写入Ceph的RADOS层中的对象。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: What is librados?
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是librados？
- en: Using librados and what languages it supports
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用librados以及它支持的语言
- en: Writing an example librados application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个示例librados应用程序
- en: Writing a librados application that stores image files in Ceph using Python
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个使用Python将图像文件存储到Ceph中的librados应用程序
- en: Writing a librados application using atomic operations with C++
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用C++编写一个使用原子操作的librados应用程序
- en: What is librados?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是librados？
- en: Librados is a Ceph library that you can include in your applications to allow
    you to directly talk to a Ceph cluster using native protocols. As librados communicates
    with Ceph using its native communication protocols, it allows your application
    to harness the full power, speed, and flexibility of Ceph, instead of having to
    make use of high-level protocols, such as Amazon S3\. A vast array of functions
    allows your application to read and write simple objects all the way to advanced
    operations, where you might want to wrap several operations in a transaction or
    run them asynchronously. Librados is available for several languages, including
    C, C++, Python, PHP, and Java.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Librados是一个Ceph库，你可以将其包含到你的应用程序中，允许你使用原生协议直接与Ceph集群进行通信。由于librados使用Ceph的原生通信协议进行通信，它允许你的应用程序充分利用Ceph的强大功能、速度和灵活性，而不必依赖诸如Amazon
    S3等高级协议。它提供了大量的功能，使得你的应用程序可以从简单的对象读取和写入，到需要将多个操作封装在一个事务中或异步执行的高级操作。Librados支持多种编程语言，包括C、C++、Python、PHP和Java。
- en: How to use librados
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用librados
- en: 'To get started with librados, a development environment is needed. For the
    examples in this chapter, one of the monitor nodes can be used to act as both
    the development environment and the client to run the developed application. The
    examples in this book assume you are using a Debian-based distribution:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用librados，首先需要一个开发环境。对于本章中的示例，可以使用一个监视节点，既作为开发环境，又作为客户端运行开发的应用程序。本书中的示例假设你使用的是基于Debian的发行版：
- en: 'Install the base build tools for the operating system:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装操作系统的基础构建工具：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding command gives the following output:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令会输出以下内容：
- en: '![](img/add38f39-eac4-4a65-8c60-3bf41dbe3ca8.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/add38f39-eac4-4a65-8c60-3bf41dbe3ca8.png)'
- en: 'Install the `librados` development library:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装`librados`开发库：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding command gives the following output:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令会输出以下内容：
- en: '![](img/3ed5943f-e3b8-448f-a41e-c2144c454013.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ed5943f-e3b8-448f-a41e-c2144c454013.png)'
- en: 'Create a quick application written in C to establish a connection to the test
    Ceph cluster:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个用C语言编写的快速应用程序，以建立与测试Ceph集群的连接：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a file called `test_app.c` with your favorite text editor and place
    the following in it:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你喜欢的文本编辑器创建一个名为`test_app.c`的文件，并将以下内容放入其中：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Compile the test application by running the following command:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下命令编译测试应用程序：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It's important to note that you need to tell `gcc` to link to the `librados`
    library to make use of its functions.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，你需要告诉`gcc`链接到`librados`库，以便使用其功能。
- en: 'Test that the app works by running it. Don''t forget to run it as root or use
    `sudo`, otherwise you won''t have access to the Ceph keyring:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行应用程序来测试其是否正常工作。别忘了以root身份运行它，或使用`sudo`，否则你将无法访问Ceph密钥环：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The preceding command gives the following output:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令会输出以下内容：
- en: '![](img/f590224b-717c-4a2f-9a93-7c733dcd80d0.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f590224b-717c-4a2f-9a93-7c733dcd80d0.png)'
- en: The test application simply reads your `ceph.conf` configuration, uses it to
    establish a connection to your Ceph cluster, and then disconnects. It's hardly
    the most exciting of applications, but it tests that the basic infrastructure
    is in place and working, and establishes a foundation for the rest of the examples
    in this chapter.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 测试应用程序简单地读取你的`ceph.conf`配置文件，利用它建立与Ceph集群的连接，然后断开连接。它可能不是最激动人心的应用程序，但它测试了基本架构是否到位且正常工作，并为本章其余示例奠定了基础。
- en: Example librados application
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例 librados 应用程序
- en: We will now go through some example librados applications that use librados
    to get a better understanding of what you can accomplish with the library.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将通过一些使用 librados 的示例应用程序，帮助你更好地理解使用该库能够完成的任务。
- en: 'The following example will take you through the steps to create an application
    which, when given an image file as a parameter, will store the image as an object
    in a Ceph cluster and store various attributes about the image file as object
    attributes. The application will also allow you to retrieve the object and export
    it as an image file. This example will be written in Python, which is also supported
    by librados. The following example also uses the **Python Imaging Library** (**PIL**)
    to read an image''s size and the argument parser library to read command-line
    parameters:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将带你完成创建一个应用程序的步骤，该程序在接收到一个图像文件作为参数时，将该图像存储为 Ceph 集群中的一个对象，并将图像文件的各种属性存储为对象属性。该应用程序还允许你检索对象并将其导出为图像文件。这个示例将使用
    Python 编写，librados 也支持 Python。以下示例还使用了**Python 图像库**（**PIL**）来读取图像的大小，并使用命令行解析库读取命令行参数：
- en: 'Install the librados Python bindings and image-manipulation libraries:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 librados Python 绑定和图像处理库：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding command gives the following output:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 前述命令输出如下：
- en: '![](img/665a9d8b-b782-401f-bfc5-f4e7c3911311.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/665a9d8b-b782-401f-bfc5-f4e7c3911311.png)'
- en: 'Create a new file for your Python application ending with the `.py` extension
    and enter the following into it:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 Python 应用程序文件，文件扩展名为 `.py`，并输入以下内容：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Test the `help` functionality generated by the Argument Parser library:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试由 Argument Parser 库生成的 `help` 功能：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding command gives the following output:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 前述命令输出如下：
- en: '![](img/fa20975e-c1bc-452d-bec0-ec0b2693276d.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fa20975e-c1bc-452d-bec0-ec0b2693276d.png)'
- en: 'Download the Ceph logo to use as a test image:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 Ceph 标志作为测试图像：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding command gives the following output:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 前述命令输出如下：
- en: '![](img/e1656145-ff23-413e-b7c0-1bf3bb8e3743.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e1656145-ff23-413e-b7c0-1bf3bb8e3743.png)'
- en: 'Run our Python application to read an image file and upload it to Ceph as an
    object:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行我们的 Python 应用程序以读取图像文件并将其上传到 Ceph 作为对象：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The preceding command gives the following output:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 前述命令输出如下：
- en: '![](img/951a2ca7-8ecc-4ef8-a1f5-c076400ba028.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/951a2ca7-8ecc-4ef8-a1f5-c076400ba028.png)'
- en: 'Verify that the object has been created:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证对象是否已创建：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The preceding command gives the following output:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 前述命令输出如下：
- en: '![](img/922ccaff-4eee-441f-9505-4fda6f9c1078.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/922ccaff-4eee-441f-9505-4fda6f9c1078.png)'
- en: 'Use `rados` to verify that the attributes have been added to the object:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `rados` 验证属性是否已添加到对象：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The preceding command gives the following output:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 前述命令输出如下：
- en: '![](img/7bc93c14-7054-4ba8-b2d2-dbf92afda207.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7bc93c14-7054-4ba8-b2d2-dbf92afda207.png)'
- en: 'Use `rados` to verify the attributes'' contents, as shown in the following
    screenshot:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `rados` 验证属性内容，如下图所示：
- en: '![](img/c6eaeffc-1649-4530-a1e1-26c03354ce36.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c6eaeffc-1649-4530-a1e1-26c03354ce36.png)'
- en: Example of the librados application with atomic operations
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用原子操作的 librados 应用示例
- en: 'In the previous librados application example, an object was created on the
    Ceph cluster and then the object''s attributes were added. In most cases, this
    two-stage operation may be fine; however, some applications might require that
    the creation of the object and its attributes are atomic. That is to say, if service
    were interrupted, the object should only exist if it has all its attributes set,
    otherwise the Ceph cluster should roll back the transaction. The following example,
    written in C++, shows how to use librados atomic operations to ensure transaction
    consistency across multiple operations. The example will write an object and then
    ask the user whether they wish to abort the transaction. If they choose to abort
    then the object write operation will be rolled back. If they choose to continue,
    the attributes will be written and the whole transaction will be committed. Perform
    the following steps:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的 librados 应用示例中，首先在 Ceph 集群上创建了一个对象，然后添加了该对象的属性。在大多数情况下，这种两阶段操作是可行的；然而，一些应用程序可能要求对象的创建和其属性的设置是原子的。也就是说，如果服务中断，只有当对象的所有属性都已设置时，才能存在该对象，否则
    Ceph 集群应该回滚该事务。以下示例使用 C++ 编写，展示了如何使用 librados 原子操作来确保跨多个操作的事务一致性。该示例将写入一个对象，并询问用户是否希望中止事务。如果用户选择中止，则对象写入操作将回滚；如果用户选择继续，则属性将被写入，整个事务将被提交。请执行以下步骤：
- en: 'Create a new file with a `.cc` extension and place the following into it:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 `.cc` 扩展名文件，并将以下内容放入其中：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Compile the source using `g++`:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `g++` 编译源代码：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s run through the application and abort the transaction:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们运行该应用并中止事务：
- en: '![](img/e5a70bba-5a35-44cf-beda-0dce7728d7a9.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5a70bba-5a35-44cf-beda-0dce7728d7a9.png)'
- en: The preceding screenshot shows that, even though we sent a write object command,
    as the transaction was not committed, the object was never actually written to
    the Ceph cluster.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的截图显示，即使我们发送了一个写对象命令，由于事务没有提交，实际上该对象并未写入 Ceph 集群。
- en: 'Let''s run the application again and, this time, let it continue the transaction:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们重新运行应用程序，这次让它继续执行事务：
- en: '![](img/5944bf12-2dde-4653-8014-19ef5384383d.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5944bf12-2dde-4653-8014-19ef5384383d.png)'
- en: As you can see, this time the object was written along with its attribute.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这次对象与其属性一同被写入。
- en: Example of the librados application that uses watchers and notifiers
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 watchers 和 notifiers 的 librados 应用示例
- en: The following librados application is written in C and shows us how to use the
    watch or notify functionality in RADOS. Ceph enables a client to create a watcher
    on an object and receive notifications from a completely separate client connected
    to the same cluster.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用 C 编写的 librados 应用，它向我们展示了如何在 RADOS 中使用 watch 或 notify 功能。Ceph 使客户端能够在对象上创建一个
    watcher，并从完全独立的连接到同一集群的客户端接收通知。
- en: 'The watcher functionality is implemented via callback functions. When you call
    the librados function to create the watcher, two of the arguments are for callback
    functions: one is for what to do when a notification is received and another is
    for what to do if the watcher loses contact or encounters an error with the object.
    These callback functions contain the code you want to run when a notification
    or error occurs.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: watcher 功能是通过回调函数实现的。当你调用 librados 函数创建 watcher 时，其中两个参数是回调函数：一个是接收到通知时要执行的操作，另一个是在
    watcher 丧失联系或遇到对象错误时要执行的操作。这些回调函数包含了你希望在通知或错误发生时运行的代码。
- en: This simple form of messaging is commonly used to instruct a client that has
    an RBD in use that a snapshot is wished to be taken. The client who wishes to
    take a snapshot sends a notification to all clients that may be watching the RBD
    object so that it can flush its cache and possibly make sure the filesystem is
    in a consistent state.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这种简单的消息传递形式通常用于通知正在使用 RBD 的客户端希望拍摄快照。希望拍摄快照的客户端会向所有可能正在监视该 RBD 对象的客户端发送通知，以便它能够刷新缓存，并可能确保文件系统处于一致状态。
- en: 'The following example creates a `watcher` instance on an object named `my_object`
    and then waits. When it receives a notification, it will display the payload and
    then send a received message back to the notifier:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例在名为 `my_object` 的对象上创建了一个 `watcher` 实例，然后等待。当它接收到通知时，它将显示有效载荷，并将收到的消息发送回通知者：
- en: 'Create a new file with a `.c` extension and place the following into it:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 `.c` 扩展名文件，并将以下内容放入其中：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Compile the `watcher` example code:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译 `watcher` 示例代码：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Run the `watcher` example application:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `watcher` 示例应用：
- en: '![](img/b887acd6-38ab-409d-be42-e84521b3306c.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b887acd6-38ab-409d-be42-e84521b3306c.png)'
- en: 'The `watcher` is now waiting for a notification. In another Terminal window,
    using `rados`, send a notification to the `my_object` object that is being watched:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`watcher` 现在等待通知。在另一个终端窗口中，使用 `rados` 向正在被监视的 `my_object` 对象发送通知：'
- en: '![](img/e1674858-9df0-4520-876c-6a3e575d3390.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e1674858-9df0-4520-876c-6a3e575d3390.png)'
- en: 'You can see that the notification was sent and an acknowledgement notification
    has been received back. If we look at the first Terminal window again, we can
    see the message from the notifier:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以看到通知已发送，并且已收到确认通知。如果我们再查看第一个终端窗口，我们可以看到来自通知者的消息：
- en: '![](img/ef5bdf37-4df8-4a93-91b7-63d04dd30b69.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ef5bdf37-4df8-4a93-91b7-63d04dd30b69.png)'
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This concludes our chapter on developing applications with librados. You should
    now feel comfortable with the basic concepts of how to include librados functionality
    in your application and how to read and write objects to your Ceph cluster. It
    would be recommended to read the official librados documentation if you intend
    to develop an application with librados, so that you can gain a better understanding
    of the full range of functions that are available.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 本章关于使用 librados 开发应用程序的内容到此结束。你现在应该对如何在应用程序中包含 librados 功能以及如何读取和写入对象到 Ceph
    集群的基本概念感到熟悉。如果你打算使用 librados 开发应用程序，建议阅读官方的 librados 文档，以便更好地理解可用的所有功能。
- en: In the next chapter, we will learn about RADOS classes and how they can be used
    to speed up processing for larger applications.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习 RADOS 类以及它们如何被用来加速大型应用程序的处理。
- en: Questions
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Name a reason you might want to write an application that uses the native librados
    API.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请列举一个你可能想编写使用原生 librados API 的应用程序的原因。
- en: What does a RADOS `watcher` do?
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: RADOS `watcher` 是做什么的？
- en: Name the five languages that librados is available in.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请列出 librados 支持的五种编程语言。
