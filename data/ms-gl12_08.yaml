- en: Migrating From CVS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从CVS迁移
- en: For a long time, the **Concurrent Versions System** (**CVS**) was the standard
    in versioning software. It is, in essence, a client-server revision control system
    for software. CVS was written in 1986 by Dick Grune of the University of Amsterdam
    as a collection of shell scripts called **RCS**. RCS can only do version management
    on separate files, so this was a big step forward. In 1989, Brian Berliner made
    an implementation in C, which has been developed further since; it is a piece
    of open source software that's distributed under the GNU **General Public License**
    (**GPL**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 长时间以来，**并行版本控制系统**（**CVS**）是版本控制软件的标准。它本质上是一个为软件设计的客户端-服务器型版本控制系统。CVS由阿姆斯特丹大学的Dick
    Grune于1986年编写，最初是一个名为**RCS**的Shell脚本集合。RCS只能对单独的文件进行版本管理，因此这对版本控制系统来说是一个巨大的进步。1989年，Brian
    Berliner用C语言实现了一个版本，并进一步开发；它是一个开源软件，并以GNU **通用公共许可证**（**GPL**）发布。
- en: In the 2000s, there was a shift to subversion and to decentralized version control
    software such as Git.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在2000年代，版本控制的重心转向了Subversion以及像Git这样的分布式版本控制软件。
- en: In this chapter, we will compare both versioning systems. After that, we will
    prepare and run a migration from CVS to Git.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将对比这两种版本控制系统。之后，我们将准备并执行从CVS到Git的迁移。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: CVS versus Git
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CVS与Git
- en: Preparation for migrating from CVS to Git
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从CVS迁移到Git的准备工作
- en: Running the conversion
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行转换
- en: Cleaning up after migration
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迁移后的清理工作
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along with the instructions in this chapter, please download this
    book''s GitHib repository, along with the examples: [https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter06](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter06).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟随本章中的说明，请下载本书的GitHub仓库及示例：[https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter06](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter06)。
- en: 'The other requirements so that you can follow along with this chapter are as
    follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够跟随本章内容，其他要求如下：
- en: CVS binary: [http://www.nongnu.org/cvs/](http://www.nongnu.org/cvs/)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CVS二进制文件：[http://www.nongnu.org/cvs/](http://www.nongnu.org/cvs/)
- en: 'npm/Node.js binaries to create a JavaScript example: [https://nodejs.org](https://nodejs.org)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: npm/Node.js二进制文件用于创建JavaScript示例：[https://nodejs.org](https://nodejs.org)
- en: '`cvs-fast-export` binary: [http://www.catb.org/~esr/cvs-fast-export](http://www.catb.org/~esr/cvs-fast-export)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cvs-fast-export`二进制文件：[http://www.catb.org/~esr/cvs-fast-export](http://www.catb.org/~esr/cvs-fast-export)'
- en: '`cvs2git` binary: [https://www.mcs.anl.gov/~jacob/cvs2svn/cvs2git.html](https://www.mcs.anl.gov/~jacob/cvs2svn/cvs2git.html)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cvs2git`二进制文件：[https://www.mcs.anl.gov/~jacob/cvs2svn/cvs2git.html](https://www.mcs.anl.gov/~jacob/cvs2svn/cvs2git.html)'
- en: CVS versus Git
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CVS与Git
- en: Centralization versus decentralization – this is the biggest difference between
    CVS, which is centralized, and Git's distributed design. With CVS, all developers
    pull from a centralized repository, thereby creating a single point of failure.
    Git uses a decentralized model, where every developer has a full-blown code repository
    locally available. By using push and pull requests, the decentralized repositories
    share code.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 集中化与去中心化——这是CVS（集中式）与Git（分布式设计）之间最大的区别。在CVS中，所有开发者都从一个集中式仓库拉取代码，从而形成单点故障。Git使用去中心化模型，每个开发者都有一个完整的代码仓库本地可用。通过使用推送和拉取请求，分布式仓库之间共享代码。
- en: 'The following diagram depicts using push and pull on shared and distributed
    repositories:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示展示了在共享和分布式仓库中使用推送和拉取：
- en: '![](img/c038631d-e3a6-44fb-bae6-2dc6047e6dfb.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c038631d-e3a6-44fb-bae6-2dc6047e6dfb.png)'
- en: With Git, there are different options in regards to the network protocol and
    system settings. In particular, you have the decision to communicate with remote
    services over SSH or HTTP. By utilizing SSH, you can generate your SSH keys and
    set them up for use with Git. After this, you can use Git to clone/push or pull
    from SSH locations. You can also use Git to use HTTP as a protocol, which generally
    requires basic HTTP authentication, after which the Git operations can occur.
    Some Git clients have built-in caching mechanisms to help you avoid typing in
    your HTTP password every time.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Git时，在网络协议和系统设置方面有不同的选项。特别是，你可以选择通过SSH或HTTP与远程服务通信。通过使用SSH，你可以生成SSH密钥并设置它们以供Git使用。之后，你可以使用Git从SSH位置克隆/推送或拉取代码。你还可以使用HTTP协议，通常需要基本的HTTP认证，认证后Git操作可以进行。一些Git客户端内置缓存机制，帮助你避免每次都输入HTTP密码。
- en: Publishing your work in this context is done by committing your changes to the
    central repository. CVS uses a specific protocol, called pserver, which is unencrypted
    and in plain text by default. Another option is to use the **remote shell** (**rsh**)
    on the remote server. To enhance security, you can also tunnel the pserver protocol
    through SSH or use SSH as the rsh executable.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，发布工作是通过将更改提交到中央代码库来完成的。CVS 使用一种特定的协议，叫做 pserver，默认情况下是未加密并以纯文本形式传输。另一种选择是使用
    **远程 shell** (**rsh**) 在远程服务器上。为了提高安全性，你还可以通过 SSH 隧道传输 pserver 协议，或使用 SSH 作为 rsh
    可执行文件。
- en: The authorization model that's used in CVS systems is very simple. If you want
    to write something, you need to commit access to a repository. There is no facility
    to accept patches from people who are not authorized. The merge requests with
    all the facilities that modern Git servers provide have to be executed by the
    committer themselves. So, from a development engineering perspective, Git offers
    more complex workflows and is tailored for a world where many people contribute
    to a software project.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: CVS 系统中使用的授权模型非常简单。如果你想进行写操作，你需要提交访问权限给仓库。没有机制可以接受未授权人员的补丁。现代 Git 服务器提供的所有合并请求功能必须由提交者自己执行。因此，从开发工程的角度来看，Git
    提供了更复杂的工作流，适用于多人参与的软件项目。
- en: Besides the infrastructural difference, there are also several differences between
    your local CVS/Git client.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基础设施的差异外，你的本地 CVS/Git 客户端之间也有几个差异。
- en: Filesets versus changesets
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件集与变更集
- en: CVS and Git have a different way of representing changes on a meta level. CVS
    uses filesets, so changes are recorded per file. Git, on the other hand, uses
    changesets, so changes are recorded against the *whole* repository. The advantage
    of this is that you can revert a change easily; however, this means that it is
    almost impossible to do a partial checkout (if you want to do this).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: CVS 和 Git 在元层次上表示更改的方式不同。CVS 使用文件集，因此更改按文件记录。而 Git 则使用变更集，因此更改是针对 *整个* 仓库记录的。这样做的优势在于你可以轻松地恢复更改；然而，这也意味着几乎不可能进行部分检出（如果你想这么做的话）。
- en: Git branching
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git 分支
- en: When using Git, it is very easy and cheap to create new branches – they're just pointers
    (a SHA-1 ID) to a specific commit. You create them on the fly, and that is how
    it should be, especially in agile development and with many collaborating developers.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Git 时，创建新分支非常简单且成本低——它们只是指向特定提交的指针（SHA-1 ID）。你可以随时创建它们，这种方式应该是这样的，特别是在敏捷开发和多个开发人员协作的情况下。
- en: 'The following diagram illustrates how Git uses branching:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示了 Git 如何使用分支：
- en: '![](img/bf2fa7ad-97c8-42ed-af43-f036639ed0cf.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bf2fa7ad-97c8-42ed-af43-f036639ed0cf.png)'
- en: Notice the hash values shown in the preceding objects (98ce9, 22ca2, and f23ae)
    – these are the SHA values that uniquely identify a commit.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 注意前面提到的哈希值（98ce9、22ca2 和 f23ae）——这些是唯一标识提交的 SHA 值。
- en: 'CVS also uses branches, but because it is file-based, a new branch gets you
    a copy of all the files in a new directory, which is much less efficient. This
    situation is depicted in the following diagram:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: CVS 也使用分支，但由于它是基于文件的，新分支会在一个新目录中复制所有文件，这样效率低得多。以下图示了这种情况：
- en: '![](img/d320e715-c141-4212-83f9-4be247354482.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d320e715-c141-4212-83f9-4be247354482.png)'
- en: The way branches and file structures are handled is one of the most fundamental
    differences between these two systems.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 分支和文件结构的处理方式是这两个系统之间最根本的区别之一。
- en: Creating repositories
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建代码库
- en: When using CVS to create repositories, you have to set up a CVSROOT location
    where versioning data is stored. Then, you have to import projects into that location
    and create a working copy somewhere else. This is much easier and more logical
    with Git since you just implement `git init && git add . && git commit` in an
    existing directory only once a `.git` directory is created with repository meta
    information.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 CVS 创建代码库时，你必须设置一个 CVSROOT 位置，用于存储版本控制数据。然后，你需要将项目导入该位置，并在其他地方创建一个工作副本。使用
    Git 则更简单且更具逻辑性，因为你只需在现有目录中执行一次 `git init && git add . && git commit`，只要创建了一个包含仓库元数据的
    `.git` 目录。
- en: Atomic operations
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原子操作
- en: The basic idea of CVS is that it operates on files and not on snapshots. This
    means that when changes are processed and the operation is interrupted, the repository
    as a whole is inconsistent. This differs to Git, where changes succeed as a whole,
    or they fail without the changes combined.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: CVS 的基本概念是，它操作的是文件，而不是快照。这意味着当更改处理并且操作被中断时，整个仓库处于不一致状态。这与 Git 不同，Git 中要么更改成功，要么在更改未完成的情况下失败。
- en: Object naming or referencing versions
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象命名或引用版本
- en: In Git, every object has a unique ID, that is, a SHA-1 ID. This ID makes it
    easier to reference in the future (you can also use a shortened version if you
    so desire). In CVS, every file has its own version number. This number also reflects
    how many times it's been altered. In CVS, to reference changes to the project
    as a whole, you need to use tags.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Git 中，每个对象都有一个唯一的 ID，也就是一个 SHA-1 ID。这个 ID 使得将来引用变得更加方便（你也可以使用简短版本，如果你愿意）。在
    CVS 中，每个文件都有自己的版本号。这个数字也反映了文件被修改的次数。在 CVS 中，要引用整个项目的更改，你需要使用标签。
- en: Keyword substitution
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关键字替换
- en: CVS supports the substitution of certain keywords in source code. For example,
    `$Author$`, `$CVSHeader$`, and `$Id$.Developers` have used this feature frequently
    (some still do). To use this mechanism, you would insert the keyword – let's call
    it a special variable – in your text or source file. Then, you would commit this
    file to your repository. By doing this, CVS will substitute this variable with
    the value in the CVS context during the commit. A lot of people use the `$Id$`
    string in their C source code. You can turn off this behavior completely in CVS
    by specifying `-ko` on the command line.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: CVS 支持在源代码中替换某些关键字。例如，`$Author$`、`$CVSHeader$` 和 `$Id$`。开发者们常常使用这个功能（一些开发者现在仍在使用）。要使用这个机制，你需要在文本或源文件中插入这个关键字——我们称之为一个特殊变量。然后，你会将这个文件提交到你的代码库。通过这样做，CVS
    会在提交过程中将这个变量替换为 CVS 上下文中的值。很多人都会在他们的 C 源代码中使用 `$Id$` 字符串。如果你希望完全禁用这个行为，可以在命令行中指定
    `-ko`。
- en: 'As an example, let''s say I add a keyword to a source file, as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，假设我在源文件中添加一个关键字，如下所示：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, I would commit this change:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我会提交这个更改：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After the commit, the keyword has been substituted by my username:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 提交后，关键字已被我的用户名替换：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Git has a very limited set of keywords, and this is because changes are per
    repository and not per file. Also, Git avoids modifying files that didn't change
    when switching to another branch or rewinding to another point in time.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Git 只支持一组非常有限的关键字，这是因为更改是按仓库进行的，而不是按文件进行的。此外，Git 避免在切换到另一个分支或回滚到另一个时间点时修改那些没有变化的文件。
- en: Binary blobs
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二进制文件
- en: Git and CVS handle binary files differently. In CVS, it is harder to handle
    them since you have to explicitly label them as binary. If you don't, you run
    the risk of corrupting the file with unwanted LR/LF conversions or keyword substitutions.
    Git, on the other hand, can automatically detect whether your file is of the binary
    kind. It uses the same mechanism as GNU diffutils.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Git 和 CVS 对待二进制文件的方式不同。在 CVS 中，处理二进制文件更加困难，因为你必须明确标记它们为二进制文件。如果不这样做，你可能会因为不想要的换行符转换或关键字替换而导致文件损坏。另一方面，Git
    能够自动检测你的文件是否为二进制文件。它使用与 GNU diffutils 相同的机制。
- en: 'Let''s create a simple binary from source and add a reserved keyword. Then,
    we will compile it with GCC and run it:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从源代码创建一个简单的二进制文件并添加一个保留关键字。然后，我们将使用 GCC 编译并运行它：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'So, let''s copy the binary to the CVS project that we used previously:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们把这个二进制文件复制到我们之前使用过的 CVS 项目中：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'What happened? Well, keyword substitution added the author name in the binary!
    It corrupted it. If you run the `cat` command, you will find the following line
    in the file:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了什么？嗯，关键字替换将作者名称添加到了二进制文件中！它把文件损坏了。如果你运行 `cat` 命令，你会在文件中找到以下内容：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Fortunately, you can fix this with `cvs admin`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，你可以通过 `cvs admin` 修复这个问题：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Amending commits
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改提交
- en: 'One frequently used feature of Git is the ability to amend to a commit. This
    is possible because, in Git, there is a difference between creating and publishing
    a commit. This won''t inconvenience users compared to CVS, where it would. If
    you make a typo in your commit message in Git, you can use `git commit --amend` to
    correct it. It''s also technically possible in CVS, but it would be hard to implement:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Git 一个常用的特性是可以修改已提交的内容。这是可能的，因为在 Git 中，创建和发布提交是有区别的。这不会给用户带来不便，而 CVS 就会有这个问题。如果你在
    Git 中提交信息写错了，你可以使用 `git commit --amend` 来修正它。虽然在 CVS 中技术上也是可能的，但实施起来会很困难：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s pretend I forgot to add something to my `README.md` file (a text file
    in my repository). The following code shows you how to add it to the last commit:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我忘记在 `README.md` 文件（我仓库中的一个文本文件）中添加内容。以下代码展示了如何将其添加到最后一次提交中：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: By doing this, you can add to a commit, but this is only reflected in your local
    Git copy. You still have to push your changes to remote servers if you want others
    to see your changes.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做可以向提交中添加内容，但这只会反映在你的本地 Git 副本中。如果你想让其他人看到你的更改，仍然需要将更改推送到远程服务器。
- en: A central repository
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 中央仓库
- en: CVS as a centralized system has one place of origin. Git is a distributed versioning
    system, which means that each developer has its own copy of the repository. They
    have a private one and they can push changes to a public one or merge changes
    from other remotes. In larger organizations, it is common to have a central place
    to aggregate projects. With Git, there is no need to have a single central place
    where you store your changes. Each developer can have their own repository (or
    better repositories, that is, a private one in which they undertake development,
    and a public bare one where they publish parts that are ready), and they can pull/fetch
    from other repositories in a symmetric fashion.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: CVS 作为一个集中式系统只有一个来源地。Git 是一个分布式版本控制系统，这意味着每个开发者都有自己的仓库副本。他们有一个私人仓库，并可以将更改推送到公共仓库，或者从其他远程仓库合并更改。在大型组织中，通常会有一个中央地方来聚合项目。使用
    Git 时，不需要一个唯一的中央地方来存储更改。每个开发者都可以拥有自己的仓库（或者更好的方式是有多个仓库，即一个用于开发的私有仓库和一个用于发布已准备好的部分的公共裸仓库），并且可以以对称的方式从其他仓库拉取/获取更改。
- en: In the Git world, there is no single source of truth like there is in the CVS
    server. There can be several truths, and because it is so easy to integrate changes
    from others, this works.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Git 世界中，没有像 CVS 服务器那样的单一事实来源。可以有多个事实，并且由于如此容易从其他人那里集成更改，这种方式是可行的。
- en: Accompanying toolset
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附带工具集
- en: Git provides a lot of tools that you can work with (Git bisect for one), which
    makes for a more productive way of working.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Git 提供了许多工具供你使用（例如 Git bisect），这使得工作方式更加高效。
- en: Detecting file renames
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测文件重命名
- en: The ability to rename a file is not supported in CVS, and being able to restore
    the state of the project when renames have happened is hard. Git uses heuristic
    rename detection so that it can analyze whether the content or filename are similar.
    You can also configure this detection in order to copy files.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: CVS 不支持重命名文件，且在发生重命名时，恢复项目状态非常困难。Git 使用启发式重命名检测，分析文件内容或文件名是否相似。你也可以配置该检测，以便复制文件。
- en: Commit before merge
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提交后再合并
- en: A side effect of Git, when using a local repository, is that it changes the
    way commits are handled in the system. With CVS, you will need to handle conflicts
    first (if someone else changed something before you pull to update your working
    directory and resolve issues). Having done this, you can commit your changes to
    the CVS repository. This is called **merge-before-commit**. Git works entirely
    differently, since commits are always done in the local repository. This commit-before-merge strategy
    means that you merge changes after the commit, and it is also possible to ask
    the other developer to merge and resolve issues. It can get harder to distinguish
    changes between commits if there are many merges, but to retain a nice linear history,
    it is also possible to mimic CVS behavior by using the Git *rebase* mechanism
    (`git pull --rebase`) in which you apply changes on top of the updated state.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用本地仓库时，Git 的一个副作用是它改变了系统中提交的处理方式。使用 CVS 时，你需要先处理冲突（如果别人先修改了内容，你在拉取并更新工作目录时需要解决这些问题）。解决完这些问题后，你可以将更改提交到
    CVS 仓库。这种方式叫做**合并前提交**。Git 完全不同，因为提交始终发生在本地仓库。提交前合并策略意味着你在提交后再合并更改，也可以让其他开发者合并并解决问题。如果有很多合并，区分不同提交之间的更改会变得更加困难，但为了保持线性的历史，也可以通过使用
    Git 的*rebase*机制（`git pull --rebase`）模拟 CVS 行为，将更改应用到更新后的状态上。
- en: The last big difference is in the way people collaborate with each other. Some
    developers only need a read-only copy of the original software, but they need
    anonymous read-only access to the source code. Both CVS and Git can accommodate
    this. Things become different if people want to contribute something back to the
    project. With CVS, one way of doing this (like with the Linux kernel) is by sending
    patches via email. This is done by people who change a small amount of code. With
    Git, it is actually very easy to execute your changes on top of an existing upstream
    version and then generate an email with `git format-patch`. With bigger contributions,
    the functionality and ease of a pull request become important, and this was what
    Git was designed for. All of this happened because of the snapshot paradigm.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的一个大区别是在人与人之间的协作方式。一些开发者只需要原始软件的只读副本，但他们需要匿名的只读访问权限。CVS和Git都可以满足这一需求。如果人们想要向项目贡献某些东西，情况就不同了。使用CVS，一种做法（例如在Linux内核中）是通过电子邮件发送补丁。这通常由那些只改变少量代码的人完成。而在Git中，实际上非常容易在现有的上游版本上执行你的更改，然后使用`git
    format-patch`生成一个电子邮件。对于较大的贡献，拉取请求的功能和易用性变得很重要，而这正是Git所设计的用途。所有这一切都发生在快照范式的背后。
- en: Preparing to migrate from CVS to Git
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备从CVS迁移到Git
- en: In the next section, we will look at two tools that can help us migrate repositories.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍两种可以帮助我们迁移仓库的工具。
- en: Preparing for a conversion using cvs-fast-export
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`cvs-fast-export`准备转换
- en: This migration tool was created by Eric S. Raymond, a very well-known writer/developer
    who wrote the famous essay *The Cathedral and the Bazaar* about open source software.
    He is also the author of fetchmail (an early open source POP3-client). Let's get
    started.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个迁移工具是由Eric S. Raymond创建的，他是一个非常著名的作家/开发者，写过关于开源软件的著名文章《大教堂与集市》。他也是fetchmail（一个早期的开源POP3客户端）的作者。让我们开始吧。
- en: 'For the this tool, `cvs-fast-export`, I will create a CVS project from scratch
    that we will convert. Let''s get started:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个工具`cvs-fast-export`，我将从头开始创建一个CVS项目，然后进行转换。让我们开始吧：
- en: 'Create a CVS root. This is where the CVS database will reside:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个CVS根目录。这是CVS数据库将要存放的地方：
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add some variables for CVS to your environment:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一些CVS相关的环境变量添加到你的环境中：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'As an example, we will create an empty JavaScript project and add it to CVS.
    First, create a project:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 例如，我们将创建一个空的JavaScript项目并将其添加到CVS中。首先，创建一个项目：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, let''s add the project to CVS:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将项目添加到CVS中：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, the project is present in CVSROOT:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，项目已经存在于CVSROOT中：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, we need to completely erase `~/cvs/cvsproject` because we''re going to
    check it out as a CVS working directory:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要完全清除`~/cvs/cvsproject`，因为我们将把它检出为一个CVS工作目录：
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The next step is checking out the project in CVS, which will create a CVS working
    copy:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是从CVS中检出项目，这将创建一个CVS工作副本：
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Looking into the directory reveals a CVS directory structure:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看目录会发现一个CVS目录结构：
- en: '[PRE16]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s create an image directory and add it to the repository:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个图像目录并将其添加到仓库中：
- en: '[PRE17]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'With the `cvs status` command, we can check which files have changed:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`cvs status`命令，我们可以查看哪些文件已发生更改：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let''s commit these changes into our CVS repository:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将这些更改提交到我们的CVS仓库：
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'With the `cvs log` command, we can see what has changed in more detail:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`cvs log`命令，我们可以更详细地查看有哪些更改。
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Now, we have a CVS repository that's been prepared for migration with `cvs-fast-export`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有了一个准备好迁移的CVS仓库，使用的是`cvs-fast-export`。
- en: Preparing for a conversion using cvs2git
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`cvs2git`准备转换
- en: 'Now, let''s take a look the second tool, `cvs2git`. For this conversion, I
    took a copy of a project I have used before (**itsmyparty**: [https://github.com/Joustie/itsmyparty](https://github.com/Joustie/itsmyparty)),
    like so:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '现在，让我们看一下第二个工具，`cvs2git`。对于这个转换，我使用了一个我以前用过的项目的副本（**itsmyparty**: [https://github.com/Joustie/itsmyparty](https://github.com/Joustie/itsmyparty)），如下所示：'
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then, I imported the source code into a CVS repository (I deleted the `.git`
    directory first):'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我将源代码导入到CVS仓库中（我首先删除了`.git`目录）：
- en: '[PRE22]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As you can see, no conflicts were created by this import, which is great. We
    are now ready to run the conversions.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这次导入没有产生任何冲突，这很棒。我们现在已经准备好运行转换。
- en: Running the conversion
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行转换
- en: There are a couple of ways to convert data from a CVS repository into a Git
    one. After you have converted the repository, you need to push this new Git repository
    to a GitLab server.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以将CVS仓库中的数据转换成Git仓库。在转换仓库之后，你需要将这个新的Git仓库推送到GitLab服务器。
- en: Converting data using cvs-fast-export
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`cvs-fast-export`转换数据
- en: 'Perform the following steps for Converting data using `cvs-fast-export`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以使用`cvs-fast-export`转换数据：
- en: 'First, download the source from Eric Raymond''s site: [http://www.catb.org/~esr/cvs-fast-export](http://www.catb.org/~esr/cvs-fast-export):'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，从Eric Raymond的网站下载源文件：[http://www.catb.org/~esr/cvs-fast-export](http://www.catb.org/~esr/cvs-fast-export)：
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then, build the software:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，构建软件：
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Go to your `cvsroot` directory and run the tool in a pipe with `find` and output
    the results to a file:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入您的`cvsroot`目录，并使用`find`命令将工具与其连接，并将结果输出到文件：
- en: '[PRE25]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then, initiate an empty Git repository:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，初始化一个空的Git存储库：
- en: '[PRE26]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, it''s time to use `git fast-import` to populate our empty Git repository
    with information from the old CVS project:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，是时候使用`git fast-import`将来自旧CVS项目的信息导入到我们空的Git存储库中了：
- en: '[PRE27]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now that all the meta information has been converted, the only thing left to
    do is checkout the code from Git:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，所有的元信息都已转换，剩下的唯一任务是从Git中检出代码：
- en: '[PRE28]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The CVS project is now available as a Git repository.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，CVS项目已作为Git存储库可用。
- en: Converting data using cvs2git
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用cvs2git转换数据
- en: 'Let''s take a look at converting data using `cvs2git`:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看如何使用`cvs2git`转换数据：
- en: 'The first step is to migrate the CVS data structure to something that could
    be imported with `git fast-import`:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是将CVS数据结构迁移到可以通过`git fast-import`导入的格式：
- en: '[PRE29]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The first pass (`CollectRevsPass`) went through all the version files and analyzed
    them for revisions. The next 14 passes will transform all kinds of data from CVS
    and convert it:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个步骤（`CollectRevsPass`）遍历了所有版本文件并分析了它们的修订。接下来的14个步骤将转换各种数据并进行迁移：
- en: '[PRE30]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now the tool is will display statistics about the import:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，工具将显示导入的统计信息：
- en: '[PRE31]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The next step is to create a skeleton Git repository, where we could import
    the converted data:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是创建一个骨架Git存储库，我们可以将转换后的数据导入其中：
- en: '[PRE32]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Then, we start the import, with the blobs being imported first (`git-blob.dat`):'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们开始导入，首先导入blobs（`git-blob.dat`）：
- en: '[PRE33]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Then, we import the Git metadata (`git-dump.dat`):'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接着，我们导入Git元数据（`git-dump.dat`）：
- en: '[PRE34]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now, all we need to do is checkout the data:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们只需检出数据：
- en: '[PRE35]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Now you have a migrated CVS repository.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经有了迁移后的CVS存储库。
- en: Cleaning up after migration
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移后的清理
- en: Usually, after a migration of some sort, you will need to clean up afterwards.
    How this will take place in this situation depends on your use case. If it is
    a one-off migration, you should make a tarball of the old CVSROOT and put it on
    a DVD. You can also choose to let the repository systems coexist and even perform
    updates on the CVS repository from Git. There are also ways to create bidirectional
    communication (prepare for some shell scripting).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在某种迁移之后，您需要进行清理。清理过程在这种情况下的方式取决于您的使用场景。如果这是一次性迁移，您应该将旧的CVSROOT打包成一个tarball并放入DVD中。您也可以选择让存储库系统共存，甚至从Git进行CVS存储库的更新。也有方法可以创建双向通信（准备好进行一些shell脚本编写）。
- en: What definitely needs to happen if you migrated the CVS repository to Git is
    that you will need to add a remote that is pointing to your GitLab server. This
    will be the platform where pull requests (or, in GitLab speak, *merge requests*)
    are created.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经将CVS存储库迁移到Git，接下来必须做的事情是添加一个指向GitLab服务器的远程仓库。这将是创建拉取请求（或者在GitLab中称为*合并请求*）的平台。
- en: 'Here, you need create an empty project in your GitLab server and then add the
    remote, as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您需要在GitLab服务器上创建一个空项目，然后添加远程仓库，如下所示：
- en: '[PRE36]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Your old CVS repository will have been converted and pushed to your GitLab server.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 您的旧CVS存储库将已经被转换并推送到您的GitLab服务器。
- en: Summary
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed the origins of CVS. We compared CVS to Git in
    a variety of way. The basic difference between the two is that CVS is a centralized
    versioning system while Git is of a distributed nature. Afterwards, we set up
    a basic CVS project and prepared to migrate it to GitLab. Then, we made a copy
    of an existing project to be used with the second tool. Finally, we looked at
    two different ways of performing conversion to migrate the repositories.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了CVS的起源。我们以多种方式将CVS与Git进行了比较。两者之间的基本区别在于，CVS是一个集中式版本控制系统，而Git则是分布式的。随后，我们设置了一个基本的CVS项目，并准备将其迁移到GitLab。接着，我们制作了一个现有项目的副本，用于第二个工具。最后，我们看到了两种不同的转换方式来迁移存储库。
- en: 'In the next chapter, we will take a look at what many people consider the *enhanced*
    successor of CVS: subversion. It already incorporates features that are also present
    in Git.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看看许多人认为是CVS的*增强版*继任者：Subversion。它已经整合了Git中也存在的一些功能。
- en: Questions
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the biggest difference between CVS and Git?
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CVS和Git之间最大的区别是什么？
- en: What is the network protocol that's used with CVS called?
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与CVS一起使用的网络协议叫什么？
- en: CVS uses changesets. (True | False)
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CVS使用变更集。（正确 | 错误）
- en: How does Git implement versioning numbers?
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Git如何实现版本号管理？
- en: How can you easily correct a typo in a commit message in Git?
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在Git中轻松修正提交信息中的错字？
- en: Is it possible to rename a file in CVS?
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在CVS中可以重命名文件吗？
- en: What is the command to initialize a new CVS database on your machine?
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化新CVS数据库的命令是什么？
- en: What is the command to initialize a new Git project?
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化一个新的Git项目的命令是什么？
- en: Who created the `cvs-fast-export` tool?
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 谁创建了`cvs-fast-export`工具？
- en: How do you import your migrated repository into GitLab?
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何将迁移的代码库导入到GitLab？
- en: Further reading
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '`cvs-fast-export`: [http://www.catb.org/~esr/cvs-fast-export](http://www.catb.org/~esr/cvs-fast-export)'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cvs-fast-export`：[http://www.catb.org/~esr/cvs-fast-export](http://www.catb.org/~esr/cvs-fast-export)'
- en: '`cvs2git`: [https://www.mcs.anl.gov/~jacob/cvs2svn/cvs2git.html](https://www.mcs.anl.gov/~jacob/cvs2svn/cvs2git.html)'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cvs2git`：[https://www.mcs.anl.gov/~jacob/cvs2svn/cvs2git.html](https://www.mcs.anl.gov/~jacob/cvs2svn/cvs2git.html)'
- en: '*Git Version Control Cookbook - Second Edition* By *Kenneth Geisshirt*, *Emanuele
    Zattin*, *Rasmus Voss*, and *Aske Olsson*: [https://www.packtpub.com/in/application-development/git-version-control-cookbook-second-edition](https://www.packtpub.com/in/application-development/git-version-control-cookbook-second-edition)'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Git版本控制宝典 - 第二版* 由 *Kenneth Geisshirt*、*Emanuele Zattin*、*Rasmus Voss* 和 *Aske
    Olsson* 编写：[https://www.packtpub.com/in/application-development/git-version-control-cookbook-second-edition](https://www.packtpub.com/in/application-development/git-version-control-cookbook-second-edition)'
