- en: Moving Repositories from TFS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从TFS迁移仓库
- en: '**Team Foundation Server** (**TFS**) is the collaboration platform and foundation
    of Microsoft''s **Application Life Cycle Management** (**ALM**) solution, which
    comes with code version management (including package management (NuGet, Maven,
    and so on)), work item management, extensive reporting and dashboard capabilities,
    automated build and release management, and test management. Through extensive
    integration with development tools such as Visual Studio, TFS is used to communicate
    and collaborate with the process of designing, building (continuous integration),
    testing, and deploying (continuous delivery) the software, which should ultimately
    be used to increase productivity and team output, improve quality, and gain more
    insight into the application life cycle.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**团队基金会服务器**（**TFS**）是微软**应用生命周期管理**（**ALM**）解决方案的协作平台和基础，提供代码版本管理（包括包管理（NuGet、Maven等））、工作项管理、丰富的报告和仪表板功能、自动化构建与发布管理、以及测试管理。通过与如Visual
    Studio等开发工具的广泛集成，TFS用于与设计、构建（持续集成）、测试和部署（持续交付）软件的过程进行沟通与协作，最终目的是提高生产力和团队产出，改善质量，并深入了解应用生命周期。'
- en: In this chapter, we will compare TFS to Git, and then we will migrate a TFS
    repository to Git that is in the old TFVC (Team Foundation Version Control) format.
    Note that, nowadays, Microsoft has  standardized on Git for version management,
    so TFVC is not widely used anymore.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将比较TFS与Git，然后我们将把一个老旧的TFVC（Team Foundation Version Control）格式的TFS仓库迁移到Git。请注意，现如今微软已经统一使用Git进行版本管理，因此TFVC不再广泛使用。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: TFS versus Git
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TFS与Git
- en: The git-tfs tool
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: git-tfs工具
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow along with the instructions in this chapter, please download this
    book's GitHub repository, along with the examples, from [https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter08](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter08).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章的指示，请从[https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter08](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter08)下载本书的GitHub仓库和示例。
- en: 'The other requirements for this chapter are as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的其他要求如下：
- en: 'Git: [http://git-scm.org](http://git-scm.org)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git：[http://git-scm.org](http://git-scm.org)
- en: 'Azure DevOps account: [https://azure.microsoft.com/nl-nl/services/devops/](https://azure.microsoft.com/nl-nl/services/devops/)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure DevOps账户：[https://azure.microsoft.com/nl-nl/services/devops/](https://azure.microsoft.com/nl-nl/services/devops/)
- en: 'Git-tfs: [https://github.com/git-tfs/git-tfs](https://github.com/git-tfs/git-tfs)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git-tfs：[https://github.com/git-tfs/git-tfs](https://github.com/git-tfs/git-tfs)
- en: 'GitLab account: ([https://gitlab.com](https://gitlab.com) or on premise)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitLab账户：（[https://gitlab.com](https://gitlab.com)或本地）
- en: TFS versus Git
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TFS与Git
- en: Microsoft created TFS as a product to help teams create software.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 微软创建TFS作为一个产品，旨在帮助团队开发软件。
- en: 'It has the following features:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下功能：
- en: Source code management
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码管理
- en: Requirements management
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需求管理
- en: Lab management
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实验室管理
- en: Reporting
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 报告
- en: Project management (for Agile software and waterfall development)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目管理（适用于敏捷软件和瀑布式开发）
- en: Automated builds
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化构建
- en: Testing
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试
- en: Release management capabilities
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布管理功能
- en: The solution was created to help across the entire life cycle of the product
    (ALM). It can cooperate with several **Integrated Development Environments** (**IDEs**),
    but works best with Microsoft's own Visual Studio, which nowadays is multiplatform.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 该解决方案旨在帮助产品的整个生命周期（ALM）。它可以与多个**集成开发环境**（**IDEs**）合作，但与微软自家的Visual Studio配合使用时效果最佳，现如今它已经是跨平台的。
- en: 'It has been around for some time, but currently the focus is on getting customers
    to use the Cloud version of TFS: Azure DevOps. You get all the features of TFS
    on premise, but it is much more scalable.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 它已经存在一段时间了，但目前的重点是让客户使用TFS的云版本：Azure DevOps。你可以获得本地TFS的所有功能，但它的可扩展性更强。
- en: For source code management, two different kinds of repositories are supported.
    Originally, the default was **Team Foundation Version Control** (**TFVC**), which
    resembles SVN and is very much a centralized **Version Control System** (**VCS**).
    The other choice is Git. Over the past few years, Git has been adopted as the
    default VCS within Microsoft. You probably won't find a team that doesn't use
    Git within Microsoft (well, maybe the team that's responsible for TFS).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于源代码管理，支持两种不同类型的仓库。最初，默认的是 **Team Foundation Version Control** (**TFVC**)，它类似于
    SVN，属于集中式 **版本控制系统** (**VCS**)。另一种选择是 Git。在过去几年中，Git 已成为微软的默认版本控制系统。你可能找不到一个不使用
    Git 的团队（可能除了负责 TFS 的团队）。
- en: 'If you want to migrate your TFS Git repository to GitLab, it''s very easy.
    For instance, you can move a repository to a new one in an on-premise GitLab:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想将 TFS Git 仓库迁移到 GitLab，这是非常简单的。例如，你可以将仓库迁移到一个新的本地 GitLab 实例：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Migrating a TFVC project takes a bit more effort, which I will explain later.
    First, let me explain the differences between TFVC and Git. We will start with
    the most important one: whether it is centralized or decentralized.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移 TFVC 项目需要更多的努力，我稍后会进行解释。首先，让我解释一下 TFVC 和 Git 之间的区别。我们从最重要的一点开始：它们是集中式的还是分布式的。
- en: Centralized or decentralized
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集中式或分布式
- en: 'The basic design of TFVC is that of a centralized repository on a server with
    authorized clients connecting to it to exchange information. Git''s distributed
    nature is the complete opposite, with no central authority by default and the
    possibility to freely push and pull changes with others. Of course, you can create
    a central server that harbors a copy of the Git repository that everyone agrees
    is the newest version. This difference can be seen in the following diagram. The
    Git repository can exist in a local TFS or the Azure instance, while the TFVC
    one can only exist in one central place:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: TFVC 的基本设计是一个集中式仓库，位于服务器上，授权的客户端连接到它以交换信息。Git 的分布式特性与此完全相反，默认情况下没有中央权限，可以自由地与他人推送和拉取变更。当然，你可以创建一个中央服务器，存放一个
    Git 仓库的副本，大家都认为这是最新的版本。这种差异可以在下图中看到。Git 仓库可以存在于本地 TFS 或 Azure 实例中，而 TFVC 仓库只能存在于一个中央位置：
- en: '![](img/22aa8e6b-dcaf-430c-8acc-7da6708203ff.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/22aa8e6b-dcaf-430c-8acc-7da6708203ff.png)'
- en: Handling changes
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理变更
- en: The best tool that you can use to work with TFVC is without a doubt Visual Studio.
    Let's discuss some points regarding the way it handles changes in your files.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用的最佳工具无疑是 Visual Studio。让我们讨论一些关于它如何处理文件变更的要点。
- en: Branching and merging capacity
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分支和合并能力
- en: Compared to branches in Git, which are repository scoped, TFVC branches are
    path scoped and not as lightweight. Generally speaking, team members create additional
    workspaces for each branch they are working on. Changes are branch-independent,
    so to avoid chaos at integration time, you need to forward-integrate as many times
    as possible. The standard merge with TFVC uses a two-way merge (baseless).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Git 中的分支相比，Git 的分支是仓库范围的，而 TFVC 的分支是路径范围的，且不如 Git 分支轻量。一般来说，团队成员会为他们正在处理的每个分支创建额外的工作区。变更是与分支独立的，因此为了避免集成时的混乱，你需要尽可能多地进行前向集成。TFVC
    的标准合并使用的是双向合并（无基准）。
- en: 'Set your bar for creating branches high and only branch when you have a need
    for code or release isolation. It''s more resource-intensive to use branches in
    TFVC. As the number of your feature branches increases, so do your storage requirements
    and branch hierarchy visualization fuzziness. In the following screenshot, you
    can see the situation as a developer; you can''t merge because of conflicts:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 将创建分支的标准设定得高一些，只有在需要代码或发布隔离时才创建分支。在 TFVC 中使用分支更消耗资源。随着功能分支数量的增加，存储需求和分支层次结构的可视化模糊性也会增加。在下面的截图中，作为开发者，你可以看到无法合并，因为存在冲突：
- en: '![](img/bf0c79ac-6d46-4088-8887-571142cce98a.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bf0c79ac-6d46-4088-8887-571142cce98a.png)'
- en: In Git, a branch is only a pointer to a commit. The default diff in Git uses
    three-way merging, which also helps developers merge back.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Git 中，分支仅仅是指向提交的指针。Git 中的默认差异比较使用三方合并，这也有助于开发者进行合并。
- en: History
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 历史
- en: 'Because of the centralized nature of TFVC, some pieces of information are not
    available when you are not connected. File history is not replicated to the client''s
    development machine and can only be viewed when you are online with the server.
    This information is viewable via Visual Studio and the web portal. Via the context
    menu of an item, you can annotate files to see who changed a line, and when they
    changed it. The following screenshot shows what sort of information is given in
    the web portal:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于TFVC的集中式特点，当你没有连接时，有些信息是不可用的。文件历史不会被复制到客户端的开发机器上，只能在你在线连接服务器时查看。这些信息可以通过Visual
    Studio和网页门户查看。通过项目项的右键菜单，你可以注释文件，以查看谁修改了某一行代码，以及他们修改的时间。以下截图展示了在网页门户中可以查看的相关信息：
- en: '![](img/b8e0464d-b6ce-410f-9fa7-02f7854a03ca.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b8e0464d-b6ce-410f-9fa7-02f7854a03ca.png)'
- en: 'With Git, file history is replicated on the client''s development machine.
    You can also view it when there is no connection to the TFS server. You can view
    history in Visual Studio and on the web portal, as well as on the specific Git
    server you are using, such as GitLab. By using Git''s command option, you can
    find out who changed which lines in a file, and why. It can be a useful tool for
    identifying changes in your code as annotation is in TFVC. See the following `git
    blame` command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在Git中，文件历史记录会被复制到客户端的开发机器上。当没有连接到TFS服务器时，你仍然可以查看文件历史。你可以在Visual Studio和网页门户中查看，也可以在你使用的特定Git服务器（如GitLab）中查看。通过使用Git的命令选项，你可以查看谁修改了文件的哪些行，以及为什么进行修改。这可以成为识别代码变更的有用工具，类似于TFVC中的注释功能。请看以下`git
    blame`命令：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We can see that `peter` changed this file.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到`peter`修改了这个文件。
- en: Traceability
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可追溯性
- en: For some use cases, it is of the utmost importance to have good traceability.
    Think of companies such as banks and insurance companies who have to adhere to
    strict policies because of legislation. Since TFVC is a centralized repository
    type, its traceability is quite good out of the box. All change operations are
    recorded on the server and performed only by authorized individuals. There are
    direct links between issues, bugs, boards, and backlog items.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于某些使用场景，良好的可追溯性至关重要。想象一下像银行和保险公司这样的企业，它们由于法规的要求必须遵守严格的政策。由于TFVC是一个集中式的存储库类型，它的可追溯性开箱即用就相当好。所有的变更操作都记录在服务器上，且仅由授权的人员执行。问题、缺陷、看板和待办事项之间有直接的链接。
- en: With Git, it is possible to setup the same system, but you need to make sure
    that your centralized repository enforces some extra checks and handles linking
    between entities (issue tracking in GitLab, for instance). By default, anyone
    can change the history of a Git repository, so out of the box, the traceability
    in Git is not very good.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在Git中，也可以设置相同的系统，但你需要确保你的集中式存储库强制执行一些额外的检查，并处理实体之间的链接（例如，在GitLab中进行问题跟踪）。默认情况下，任何人都可以修改Git存储库的历史记录，因此开箱即用时，Git的可追溯性并不好。
- en: File handling
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件处理
- en: Another big difference between Git and TFVC is when it comes to handling changes.
    This is connected to the fact that TFVC uses a central repository and Git is,
    by its nature, distributed. TFVC, with its central server, keeps all the files
    in a project under a single root path. Within this context, it is possible to
    apply permissions at a file level or lock files on the central server. By default,
    this is not possible with Git or with the basic GitLab configuration since there
    is no central place where you can enforce these authorizations. You can lock files
    somewhere, but a developer can happily continue developing locally and change
    code.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Git和TFVC之间的另一个大区别是在处理变更时。这个区别与TFVC使用集中式存储库，而Git本质上是分布式的这一事实相关。TFVC在其中央服务器上保持项目中所有文件的单一根路径。在这种上下文下，可以在文件级别应用权限或锁定中央服务器上的文件。默认情况下，Git或基本的GitLab配置无法实现这一点，因为没有中央位置可以强制执行这些权限。你可以在某个地方锁定文件，但开发人员可以继续在本地开发并修改代码。
- en: 'On the other hand, with Git, you can have multiple repositories in a GitLab
    project and have protection on a branch level or repository level. You have the
    option to define multiple remotes to which you can push code. This means that
    you can store code in GitLab and also on Windows Azure. The following screenshot
    shows the menu that you can use to lock a file in TFVC:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，在Git中，你可以在一个GitLab项目中拥有多个存储库，并且可以在分支级别或存储库级别进行保护。你还可以定义多个远程仓库来推送代码。这意味着你可以将代码存储在GitLab中，也可以存储在Windows
    Azure上。以下截图展示了你可以用来在TFVC中锁定文件的菜单：
- en: '![](img/8ab340e8-b268-4fd2-bacc-6f1363743f6f.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8ab340e8-b268-4fd2-bacc-6f1363743f6f.png)'
- en: With TFVC, the files are all under one path and under control while in Git,
    there can be many branches and files spread over different remote servers. It's
    hard, if not impossible, to enforce centralized control.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在TFVC中，所有文件都位于一个路径下并且受到控制，而在Git中，可以有多个分支和分布在不同远程服务器上的文件。要强制实施集中式控制是很困难的，甚至是不可能的。
- en: The git-tfs tool
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: git-tfs工具
- en: There are several ways to migrate data from TFVC to Git. The simplest way is
    to do the migration in TFS itself. You can use their own import/export tools from
    the [https://docs.microsoft.com/en-us/azure/devops/repos/git/import-from-tfvc?view=azure-devops&tabs=new-nav&viewFallbackFrom=vsts](https://docs.microsoft.com/en-us/azure/devops/repos/git/import-from-tfvc?view=azure-devops&tabs=new-nav&viewFallbackFrom=vsts)
    website.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以将数据从TFVC迁移到Git。最简单的方法是在TFS本身进行迁移。你可以使用他们自己提供的导入/导出工具，访问[https://docs.microsoft.com/en-us/azure/devops/repos/git/import-from-tfvc?view=azure-devops&tabs=new-nav&viewFallbackFrom=vsts](https://docs.microsoft.com/en-us/azure/devops/repos/git/import-from-tfvc?view=azure-devops&tabs=new-nav&viewFallbackFrom=vsts)网站。
- en: There is also another tool that can be used for migration. It is possible to
    have a bi-directional gateway between TFS and Git, just like there is with git-svn.
    It can put TFS commits into a Git repository, and allows you to push back changes
    to TFS.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一个可以用于迁移的工具。就像git-svn一样，可以在TFS和Git之间建立一个双向网关。它可以将TFS提交放入Git仓库，并允许你将更改推送回TFS。
- en: The existence of these tools is caused by the fact that Microsoft internally
    switched to Git years ago and they have contributed a lot of source code to the
    codebase of Git. That is why it is standard (especially with Azure) to create
    new repositories using the Git format nowadays.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具的存在是因为微软多年前内部切换到了Git，并且他们已经为Git代码库贡献了大量源代码。这就是为什么如今在Azure等平台上创建新仓库时默认使用Git格式的原因。
- en: Preparing to migrate
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备迁移
- en: In this section, we will demonstrate how to migrate a TFVC project located on
    Azure DevOps. First, we will locate our project on Azure DevOps. You can do this
    by navigating to your organization at [https://dev.azure.com](https://dev.azure.com).
    Setting up an organization is outside the scope of this book, but it is quite
    easy and free if you are a small company or an open source project. You can read
    more about this on the Azure page, here: [https://azure.microsoft.com/nl-nl/services/devops/](https://azure.microsoft.com/nl-nl/services/devops/).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将演示如何迁移位于Azure DevOps上的TFVC项目。首先，我们将在Azure DevOps中找到我们的项目。你可以通过导航到你的组织页面来完成此操作：[https://dev.azure.com](https://dev.azure.com)。组织的设置超出了本书的范围，但如果你是小公司或开源项目，这非常简单且免费。你可以在Azure页面阅读更多内容，网址是：[https://azure.microsoft.com/nl-nl/services/devops/](https://azure.microsoft.com/nl-nl/services/devops/)。
- en: 'The project page for the git-tfs migration tool can be be found on GitHub ([https://github.com/git-tfs/git-tfs](https://github.com/git-tfs/git-tfs)).
    Before you install git-tfs, there are a few prerequisites you need to take into
    account:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: git-tfs迁移工具的项目页面可以在GitHub上找到（[https://github.com/git-tfs/git-tfs](https://github.com/git-tfs/git-tfs)）。在安装git-tfs之前，你需要考虑一些先决条件：
- en: You need a Windows machine to install it with.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要一台Windows机器来进行安装。
- en: It has to have Git for Windows.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须安装Git for Windows。
- en: 'The git-tfs binaries can be downloaded from [https://github.com/git-tfs/git-tfs/releases](https://github.com/git-tfs/git-tfs/releases).
    Alternatively, you can do a managed install with chocolatey ([https://chocolatey.org/](https://chocolatey.org/)).
    Installing with such a package manager takes care of the necessary details for
    you. Of course, you could build the package yourself because the source is also
    available. For these examples, we will use a basic Windows machine I already have
    set up. Let''s get started:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从[https://github.com/git-tfs/git-tfs/releases](https://github.com/git-tfs/git-tfs/releases)下载git-tfs二进制文件。或者，你也可以通过chocolatey（[https://chocolatey.org/](https://chocolatey.org/)）进行托管安装。使用这样的包管理器安装可以为你处理必要的细节。当然，你也可以自己构建该包，因为源代码也可以获得。对于这些示例，我们将使用我已经设置好的基本Windows机器。我们开始吧：
- en: 'It''s easy to install Git using chocolatey:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用chocolatey安装Git非常容易：
- en: '![](img/bcd3e27e-e476-4564-9acc-847e44babc9d.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bcd3e27e-e476-4564-9acc-847e44babc9d.png)'
- en: 'The next step is to install git-tfs using the `gittfs` package:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是使用`gittfs`包安装git-tfs：
- en: '![](img/a0e201a5-fe03-4016-9fad-636b3940bc84.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a0e201a5-fe03-4016-9fad-636b3940bc84.png)'
- en: 'In order to perform the migration, we need to create a new project in our GitLab
    instance so that we have a destination for our Azure DevOps project:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了进行迁移，我们需要在GitLab实例中创建一个新项目，以便为我们的Azure DevOps项目提供一个目标位置：
- en: '![](img/3e3bf9f3-5c9b-452d-9d2c-e8fc5f64005b.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3e3bf9f3-5c9b-452d-9d2c-e8fc5f64005b.png)'
- en: 'Now, we will use the git-tfs tool to clone the test project we created in Azure
    DevOps. It will bring up an authentication window:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将使用 git-tfs 工具克隆我们在 Azure DevOps 中创建的测试项目。它将弹出一个认证窗口：
- en: '![](img/5cb26b68-f9f4-4d24-abea-f7a96b80c631.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5cb26b68-f9f4-4d24-abea-f7a96b80c631.png)'
- en: 'It will automatically search through changesets and convert them into Git:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它会自动搜索变更集并将其转换为 Git：
- en: '![](img/4d5d1d73-956d-449a-b81d-6f5535bfbb73.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4d5d1d73-956d-449a-b81d-6f5535bfbb73.png)'
- en: 'To copy this local Git repository to our GitLab project, we need to create
    a remote entry:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将这个本地 Git 仓库复制到我们的 GitLab 项目，我们需要创建一个远程条目：
- en: '[PRE2]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, we will use `push -u` to push it to GitLab. Git for Windows will present
    you with a login screen, which you can authenticate against [gitlab.joustie.nl](https://gitlab-ee.joustie.nl/users/sign_in):'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将使用 `push -u` 将其推送到 GitLab。Git for Windows 会呈现一个登录界面，你可以在该界面通过 [gitlab.joustie.nl](https://gitlab-ee.joustie.nl/users/sign_in)
    进行身份验证：
- en: '![](img/64c4d021-814d-4643-909b-edcd7a43fd74.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/64c4d021-814d-4643-909b-edcd7a43fd74.png)'
- en: 'When the migrations are finished, you can log in to your GitLab project. Here,
    you will find the pushed code:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当迁移完成后，你可以登录到你的 GitLab 项目。在这里，你将看到推送的代码：
- en: '![](img/a2d48576-983d-4068-bf2f-58d1a486bc5b.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a2d48576-983d-4068-bf2f-58d1a486bc5b.png)'
- en: 'You can view the commit history in Git with `git log`:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用 `git log` 查看 Git 中的提交历史：
- en: '![](img/50251b71-1541-488a-8c26-2a1f2fbd5b7b.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50251b71-1541-488a-8c26-2a1f2fbd5b7b.png)'
- en: 'If you compare it with the history in TFVC, you will find it to be the same:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你将其与 TFVC 中的历史记录进行对比，你会发现它们是一样的：
- en: '![](img/f193b796-786d-4593-b130-8da2e49349ad.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f193b796-786d-4593-b130-8da2e49349ad.png)'
- en: By using the git-tfs tool, it is relatively easy to migrate your existing TFVC
    to Git.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 git-tfs 工具，迁移你现有的 TFVC 到 Git 是相对容易的。
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter explained what TFS is and where its place is in the Microsoft product
    gamma. First, we compared TFVC and Git in terms of their architecture, as well
    as the way they handle branching and merging. We also took a look at how they
    treat history and the traceability of changes.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了 TFS 是什么，以及它在 Microsoft 产品系列中的地位。首先，我们比较了 TFVC 和 Git 在架构上的差异，以及它们处理分支和合并的方式。我们还考察了它们如何处理历史记录和变更的可追溯性。
- en: From there, we learned that there are different ways to migrate from TFS to
    Git. For one, you can export from the server itself. There's also a tool that
    you can use to create a mirror between a TFS and a Git repository that's called
    git-tfs.The most logical reason for this tool to exist is because, nowadays, Git
    relies heavily on Git repositories and needs to convert TFVC projects into Git
    format internally.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，我们了解到有多种方法可以从 TFS 迁移到 Git。例如，你可以直接从服务器本身导出。也有一个工具可以用来在 TFS 和 Git 仓库之间创建镜像，这个工具叫做
    git-tfs。这个工具存在的最合理原因是因为，现如今，Git 在很大程度上依赖于 Git 仓库，并需要将 TFVC 项目内部转换为 Git 格式。
- en: This chapter ends the part of this book about migrating data from other systems
    to GitLab. In the next part, we will extensively discuss the ways of connecting
    to GitLab.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束了本书关于将数据从其他系统迁移到 GitLab 的部分。在下一部分，我们将广泛讨论如何连接到 GitLab 的方法。
- en: Questions
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is TFS used for in Microsoft's ALM suite?
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TFS 在 Microsoft 的 ALM 套件中用于什么？
- en: What is the biggest difference between TFVC and Git?
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TFVC 和 Git 之间最大的区别是什么？
- en: TFS is part of what product in Azure?
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TFS 是 Azure 中的哪个产品的一部分？
- en: How do you migrate a TFS Git repository to GitLab?
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何将 TFS Git 仓库迁移到 GitLab？
- en: How are branches scoped in TFVC?
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 TFVC 中，分支是如何作用域化的？
- en: Where is history kept with TFVC?
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TFVC 的历史记录保存在什么地方？
- en: What tool resembles git-tfs?
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个工具类似于 git-tfs？
- en: What tool on Windows makes it easy to install Git?
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Windows 上，哪个工具使得安装 Git 变得容易？
- en: Further reading
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*Microsoft Team Foundation Server 2015 Cookbook* by *Tarun Arora*: [https://www.packtpub.com/networking-and-servers/microsoft-team-foundation-server-2015-cookbook](https://www.packtpub.com/networking-and-servers/microsoft-team-foundation-server-2015-cookbook)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《Microsoft Team Foundation Server 2015 Cookbook》*，*Tarun Arora* 著：[https://www.packtpub.com/networking-and-servers/microsoft-team-foundation-server-2015-cookbook](https://www.packtpub.com/networking-and-servers/microsoft-team-foundation-server-2015-cookbook)'
- en: '*Implementing DevOps with Microsoft Azure* by *Mitesh Soni*: [https://www.packtpub.com/networking-and-servers/implementing-devops-microsoft-azure](https://www.packtpub.com/networking-and-servers/implementing-devops-microsoft-azure)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《Implementing DevOps with Microsoft Azure》*，*Mitesh Soni* 著：[https://www.packtpub.com/networking-and-servers/implementing-devops-microsoft-azure](https://www.packtpub.com/networking-and-servers/implementing-devops-microsoft-azure)'
- en: 'TFS site: [https://visualstudio.microsoft.com/tfs/](https://visualstudio.microsoft.com/tfs/)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'TFS 网站: [https://visualstudio.microsoft.com/tfs/](https://visualstudio.microsoft.com/tfs/)'
- en: 'Git-tfs: [https://github.com/git-tfs/git-tfs](https://github.com/git-tfs/git-tfs)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Git-tfs: [https://github.com/git-tfs/git-tfs](https://github.com/git-tfs/git-tfs)'
