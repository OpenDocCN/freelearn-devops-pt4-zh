- en: Mastering a Modern Development Environment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精通现代开发环境
- en: In the previous chapter, we introduced Dynamics 365 Business Central and revealed
    that its skeleton is Microsoft cloud microservices.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们介绍了 Dynamics 365 Business Central，并揭示其骨架是 Microsoft 云微服务。
- en: In this chapter, we will take a close look at the development environment. We
    will discuss the main shortcuts, tips, and tricks related to Visual Studio Code,
    the official development platform, and the AL language, the development language
    extension. The union between Visual Studio Code and AL defines the so-called modern
    development environment.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入了解开发环境。我们将讨论与 Visual Studio Code（官方开发平台）以及 AL 语言（开发语言扩展）相关的主要快捷键、技巧和窍门。Visual
    Studio Code 与 AL 语言的结合定义了所谓的现代开发环境。
- en: AL is the official extension provided by Microsoft, free of charge, through
    the online marketplace. Officially released in 2017 to extend what was then called
    Dynamics 365 for Financials, it is now a solid fully fledged development language
    that extends Dynamics 365 Business Central. It comes equipped with a lot of features
    that greatly enhance developers' productivity and coding quality.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: AL 是 Microsoft 提供的官方扩展，免费通过在线市场提供。该扩展于 2017 年正式发布，用于扩展当时被称为 Dynamics 365 for
    Financials 的功能，现在它已经成为一个完整的开发语言，扩展了 Dynamics 365 Business Central。它提供了许多功能，大大提升了开发者的生产力和编码质量。
- en: The main goal of this chapter is to help Dynamics 365 Business Central developers
    understand what the development platform offers, unleash all their potential,
    and become proficient in their daily coding activities.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要目标是帮助 Dynamics 365 Business Central 开发人员了解开发平台所提供的功能，释放他们的全部潜力，并提高他们在日常编码活动中的熟练度。
- en: 'In this chapter, you will learn the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下内容：
- en: What the Visual Studio Code user interface is composed of, and the purpose of
    each section
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code 用户界面由哪些部分组成，每个部分的作用是什么
- en: How to be proficient in using the most powerful Visual Studio Code editing features
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何熟练使用 Visual Studio Code 中最强大的编辑功能
- en: What the AL language extension is, and what it consists of
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AL 语言扩展是什么，它包含了哪些内容
- en: Mastering Visual Studio Code
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精通 Visual Studio Code
- en: Visual Studio Code is one of the most widely used development environments worldwide.
    It is engineered to make it easy and quick to design cloud- and web-based applications,
    using a plethora of extensible languages. The application is focused on maximizing
    code editing and also unleashing the developer's potential by providing useful
    shortcuts to provide quick access to all that is needed in a specific development
    context.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code 是全球使用最广泛的开发环境之一。它的设计目的是让云端和基于 Web 的应用程序设计变得简单快速，支持多种可扩展的编程语言。该应用程序专注于最大化代码编辑效率，同时通过提供有用的快捷键，帮助开发者在特定开发场景下快速访问所需的功能，充分释放开发者的潜力。
- en: 'When you start Visual Studio Code, freshly installed, it will show you the
    typical Welcome page:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当你启动 Visual Studio Code 时，首次安装后，它会显示典型的欢迎页面：
- en: '![](img/a7f9c7c7-a01f-41c0-b3ca-69be7d020562.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a7f9c7c7-a01f-41c0-b3ca-69be7d020562.png)'
- en: 'The Welcome page contains the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎页面包含以下内容：
- en: '**Start**: Shortcuts for creating and opening files and folders'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开始**：创建和打开文件及文件夹的快捷键'
- en: '**Recent**: A list of recently opened files and folders'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最近**：最近打开的文件和文件夹列表'
- en: '**Help**: A list of documentation sheets, product docs, videos, and useful
    resources'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**帮助**：文档单页、产品文档、视频和有用资源的列表'
- en: '**Customize**: How to customize Visual Studio Code through extensions, keyboard
    shortcuts, background color themes, and so on'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义**：如何通过扩展、键盘快捷键、背景色主题等来自定义 Visual Studio Code'
- en: '**Learn**: Additional shortcuts to learning resources that are related to the
    most widely used commands, and how to master the user interface'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**学习**：与最常用命令相关的学习资源快捷键，以及如何掌握用户界面'
- en: The Welcome page is loaded whenever you run the Visual Studio Code as a new
    window (*Ctrl* + *Shift* + *N*). It is possible to change this behavior by unchecking
    show welcome page on startup or clicking File | Preferences | Settings and searching
    for Welcome page.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你以新窗口运行 Visual Studio Code 时，都会加载欢迎页面（*Ctrl* + *Shift* + *N*）。你可以通过取消勾选启动时显示欢迎页面，或点击“文件
    | 偏好设置 | 设置”并搜索“欢迎页面”来更改此行为。
- en: 'The Visual Studio Code environment is divided into five main areas:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code 环境分为五个主要区域：
- en: Code editor
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码编辑器
- en: Status bar
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 状态栏
- en: View bar
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看栏
- en: Sidebar
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 侧边栏
- en: Panels area
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面板区域
- en: Let's look at each of them in the following sections.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将分别讨论这些内容。
- en: Code editor
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码编辑器
- en: The code editor is where you write your code and where you spend most of your
    time. It is activated when creating a new file, or when opening an existing file
    or folder.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 代码编辑器是你编写代码并花费大部分时间的地方。当创建新文件或打开现有文件或文件夹时，它会被激活。
- en: 'You are allowed to edit just one single file, or you can even load and work
    with multiple files at the same time, side by side:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以只编辑一个单独的文件，或者你也可以加载并同时处理多个文件，排成并排的方式：
- en: '![](img/4f708006-72d4-4eb9-8294-030702726dc6.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4f708006-72d4-4eb9-8294-030702726dc6.png)'
- en: 'There are different ways to have multiple file views; three are mentioned here:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以查看多个文件；这里提到的三种是：
- en: Select a filename in the EXPLORER bar, then right-click and select Open to the
    Side (*Ctrl* + *Enter*).
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 EXPLORER 栏中选择一个文件名，然后右键点击并选择“在侧边打开” (*Ctrl* + *Enter*)。
- en: '*Ctrl* + click on a filename in the EXPLORER bar.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 EXPLORER 栏中 *Ctrl* + 点击文件名。
- en: '*Ctrl* + *\* to split the editor into two parts.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Ctrl* + *\* 将编辑器分割为两部分。'
- en: It will accommodate several files, dividing the space equally between them.
    You can move through the different file editors by simply pressing *Ctrl* + *1*,
    *Ctrl* + *2*, *Ctrl* + *3*, …, *Ctrl *+ *N*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以容纳多个文件，将空间平均分配给它们。你可以通过简单地按下 *Ctrl* + *1*、*Ctrl* + *2*、*Ctrl* + *3*，……，*Ctrl*
    + *N* 在不同的文件编辑器之间切换。
- en: Editor windows can be resized, reordered, and zoomed in/out according to your
    needs. To zoom in/out press *Ctrl* + *+ */ *Ctrl* + *-*, or View | Zoom in / Zoom
    out.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器窗口可以根据你的需求进行调整大小、重新排序和缩放。要缩放，按 *Ctrl* + *+* 或 *Ctrl* + *-*，或者通过 View | Zoom
    in / Zoom out。
- en: Zooming applies to all Visual Studio Code areas, not only to the code editor.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 缩放适用于所有 Visual Studio Code 区域，而不仅仅是代码编辑器。
- en: Visual Studio Code also provides an easy way of navigating between files with
    shortcuts. The quickest way is to press *Ctrl* + *Tab*. This will open the list
    of files that have been opened since Visual Studio Code started.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code 还提供了一种便捷的方式来通过快捷方式在文件之间导航。最快的方法是按 *Ctrl* + *Tab*。这将打开自 Visual
    Studio Code 启动以来打开过的文件列表。
- en: Status bar
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 状态栏
- en: 'The status bar typically contains information about the currently selected
    file or folder. It also provides some actionable shortcuts:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 状态栏通常包含关于当前选中文件或文件夹的信息。它还提供一些可操作的快捷方式：
- en: '![](img/27851c2c-a1e8-4fac-acbd-16d4361fabe5.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/27851c2c-a1e8-4fac-acbd-16d4361fabe5.png)'
- en: 'From left to right, the status bar contains the following information:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 从左到右，状态栏包含以下信息：
- en: If Git is enabled, it will report version control information, such as the current
    branch.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果启用了 Git，它将报告版本控制信息，例如当前分支。
- en: Number of errors and/or warnings detected in the current code.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当前代码中检测到的错误和/或警告数量。
- en: Cursor position (line position and column position).
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 光标位置（行号和列号）。
- en: Indentation size and type (spaces or tabs).
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 缩进大小和类型（空格或制表符）。
- en: Encoding of the currently selected file.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当前选中文件的编码。
- en: 'Line terminator: **Carriage return** (**CR**) and/or **line feed** (**LF**).'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 行终止符：**回车符**（**CR**）和/或 **换行符**（**LF**）。
- en: Language used to process the code in the selected file. If you click on the
    language, a menu will appear, and you should be able to change the processing
    programming language.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于处理选中文件中代码的语言。如果点击该语言，菜单会出现，你应该能够更改处理的编程语言。
- en: Feedback button, which you can use to share your feedback about Visual Studio
    Code on Twitter.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 反馈按钮，你可以通过它在 Twitter 上分享关于 Visual Studio Code 的反馈。
- en: Notification icon. This shows the number of new notifications, which are typically
    related to product updates.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通知图标。它显示新的通知数量，通常与产品更新有关。
- en: The status bar has a conventional colorization, and it changes depending on
    what's processing. It is purple when opening a file, blue when opening a folder,
    orange when debugging, and so on.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 状态栏有一种常规的颜色显示，它会根据当前正在处理的内容而变化。打开文件时是紫色，打开文件夹时是蓝色，调试时是橙色，等等。
- en: View bar
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视图栏
- en: This is on the left side of the workspace, and contains shortcuts to the sidebar.
    If a shortcut is clicked, the sidebar that belongs to the tool that has been chosen
    becomes visible. Clicking again, or pressing *Ctrl* + *B*, makes it disappear.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这是工作区的左侧，包含通往侧边栏的快捷方式。如果点击一个快捷方式，属于所选工具的侧边栏将变得可见。再次点击，或按 *Ctrl* + *B*，它将消失。
- en: Sidebar
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 侧边栏
- en: The sidebar is the place where you will interact the most with the code editor.
    It is context-sensitive, and you will find five standard activities, each enabled
    by the corresponding icon in the view bar.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 侧边栏是你与代码编辑器互动最多的地方。它是上下文敏感的，你会在视图栏中看到五个标准活动，每个活动都由相应的图标启用。
- en: EXPLORER (Ctrl + Shift + E)
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EXPLORER (Ctrl + Shift + E)
- en: 'EXPLORER provides a structured and organized view of the folder and files that
    you are currently working with. The OPEN EDITORS sub-view contains the list of
    active files in the code editor. Below this section, there might be another sub-view
    with the name of the folder that is open:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: EXPLORER 提供了你当前正在使用的文件夹和文件的结构化和组织化视图。OPEN EDITORS子视图包含代码编辑器中活动文件的列表。在此部分下方，可能会有另一个子视图，显示已打开文件夹的名称：
- en: '![](img/fa48f11f-e75f-46e3-ab38-92cc85b3ed93.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fa48f11f-e75f-46e3-ab38-92cc85b3ed93.png)'
- en: 'If you hover over the OPEN EDITORS sub-view, three action buttons will be shown:
    Toggle Vertical/Horizontal Editor Layout (*Shift* + *Alt* + *O*), Save All (*Ctrl*
    + *K* + *S*), and Close All Files (*Ctrl* + *K* or *Ctrl* + *W*). They are all
    self-explanatory:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将鼠标悬停在OPEN EDITORS子视图上，将显示三个操作按钮：切换垂直/水平编辑器布局（*Shift* + *Alt* + *O*）、全部保存（*Ctrl*
    + *K* + *S*）和关闭所有文件（*Ctrl* + *K* 或 *Ctrl* + *W*）。它们都是显而易见的：
- en: '![](img/c29f2344-95cf-4321-922a-994a3d1a1382.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c29f2344-95cf-4321-922a-994a3d1a1382.png)'
- en: 'Hovering over the folder name (in this example `PW_V2`) will make four action
    buttons visible:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 将鼠标悬停在文件夹名称上（在此示例中为`PW_V2`），四个操作按钮将变得可见：
- en: '![](img/c92ee73d-c3bd-45d5-93e2-c3482cba03e4.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c92ee73d-c3bd-45d5-93e2-c3482cba03e4.png)'
- en: From left to right, these are New File, New Folder, Refresh, and Collapse All.
    They are self-explanatory.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 从左到右，分别是新建文件、新建文件夹、刷新和全部折叠。它们是显而易见的。
- en: Right-clicking on a folder or filename will open a context menu that shows common
    commands such as Reveal in Explorer(*Shift* + *Alt* + *R*), which opens the folder
    that contains the selected file. You can also copy the file path via Copy Path (*Shift*
    + *Alt* + *C*).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 右键单击文件夹或文件名，将打开一个上下文菜单，显示常用命令，如在资源管理器中显示（*Shift* + *Alt* + *R*），它将打开包含选定文件的文件夹。你还可以通过复制路径（*Shift*
    + *Alt* + *C*）来复制文件路径。
- en: 'Down in the EXPLORER bar, there is another section called OUTLINE. It gives
    a very useful tree-view of members and types for a specific file. Consider the
    following screenshot:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在EXPLORER栏的下方，还有一个叫做OUTLINE的部分。它为特定文件提供了非常有用的树形视图，显示了文件中的成员和类型。请参见以下截图：
- en: '![](img/cc0c3d16-ed4a-416d-85ef-30d6fa793a63.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cc0c3d16-ed4a-416d-85ef-30d6fa793a63.png)'
- en: This is indeed a powerful option when you are developing complex objects and
    you want to jump into a specific area in one click.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当你正在开发复杂对象并希望通过点击一下跳转到特定区域时，这确实是一个强大的选项。
- en: SEARCH (Ctrl + Shift + F)
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索 (Ctrl + Shift + F)
- en: This is a powerful tool for searching for and replacing text in files. It is
    possible to opt for a simple search with one or more keywords, and you can use
    wildcards such as * and ?. Alternatively, you can opt for creating a complex search
    based on regular expressions (regex). There are also advanced options to include
    and/or exclude files or file types.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个强大的工具，用于在文件中搜索和替换文本。你可以选择一个或多个关键字进行简单搜索，还可以使用通配符如*和?。或者，你可以选择基于正则表达式（regex）创建复杂搜索。还有高级选项可以包括或排除文件或文件类型。
- en: 'This is really helpful for developers when searching the *where used* field
    or variables in all files within an extension folder. Consider the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当开发者在扩展文件夹中搜索*where used*字段或变量时，这一功能非常有帮助。请参见以下截图：
- en: '![](img/b5654c6c-42b5-45b6-a987-ac5e247a165b.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b5654c6c-42b5-45b6-a987-ac5e247a165b.png)'
- en: Search outputs are listed in a tree-view that lists all files containing the
    search keyword, and shows a small piece of code related to the line that they
    belong to in the file. The keyword match is highlighted in the tree-view, as well
    as within the code editor. These can be all collapsed by clicking the Collapse
    All button.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索结果以树形视图列出，显示包含搜索关键字的所有文件，并显示与该行相关的小段代码。树形视图中的关键字匹配处以及代码编辑器中的匹配处都会被高亮显示。通过点击“全部折叠”按钮，可以将所有结果折叠。
- en: It is possible to reset the search results by clicking the Clear Search Results button.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过点击“清除搜索结果”按钮来重置搜索结果。
- en: SOURCE CONTROL (Ctrl + Shift + G)
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 源代码控制 (Ctrl + Shift + G)
- en: 'Visual Studio Code provides native integration with one of the most widely
    known source control management systems: Git. The basics and integration of Git
    will be discussed in [Chapter 11](bc01dacb-fdbe-496b-82a0-e45d2435e574.xhtml),
    *Source Control Management and DevOps with Business Central*.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code 提供了与最广泛使用的源代码控制管理系统之一：Git的原生集成。Git的基础知识和集成将在[第11章](bc01dacb-fdbe-496b-82a0-e45d2435e574.xhtml)中讨论，*源代码控制管理与业务中心的DevOps*。
- en: DEBUG (Ctrl + Shift + D)
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试 (Ctrl + Shift + D)
- en: Visual Studio Code is not just a code editor for editing flat files. It also
    ships with an out-of-the-box integrated debugger framework that can be extended
    to debug different platforms and languages.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code 不仅仅是一个用于编辑文件的代码编辑器。它还提供了一个开箱即用的集成调试框架，可以扩展用于调试不同的平台和语言。
- en: Visual Studio Code does not provide any debugging capability for Dynamics 365
    Business Central. This comes embedded in the AL language extension for Visual
    Studio Code, which extends the existing .NET core debugger. In [Chapter 9](076505ca-e2a0-40ab-8640-c720c9aa68ee.xhtml),
    *Debugging*, we will discuss this argument in detail.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code 并不提供针对 Dynamics 365 Business Central 的调试功能。这项功能嵌入在 Visual
    Studio Code 的 AL 语言扩展中，扩展了现有的 .NET 核心调试器。在[第 9 章](076505ca-e2a0-40ab-8640-c720c9aa68ee.xhtml)中，*调试*，我们将详细讨论这一议题。
- en: EXTENSIONS (Ctrl + Shift + X)
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EXTENSIONS（Ctrl + Shift + X）
- en: Extensions are used to browse the online marketplace for extensions for Visual
    Studio Code, which include a growing plethora of additional languages, debuggers,
    tools, helpers, and much more. AL is an extension for Visual Studio Code that
    was developed by Microsoft. In the Visual Studio Code marketplace, you can also
    download several helpful extensions that extend (extensions for an extension)
    the AL Language extension and help Dynamics 365 Business Central developers be
    more efficient and productive and write code professionally.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展用于浏览 Visual Studio Code 的在线市场，市场中包括了不断增长的额外语言、调试器、工具、助手等各种扩展。AL 是 Microsoft
    开发的一个 Visual Studio Code 扩展。在 Visual Studio Code 市场中，你还可以下载几个有用的扩展，它们扩展了（对扩展的扩展）AL
    语言扩展，帮助 Dynamics 365 Business Central 开发者提高工作效率，提升生产力，并且编写专业的代码。
- en: 'Consider the following screenshot, which shows typical Visual Studio Code extensions
    installed for Dynamics 365 Business Central:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下截图，展示了为 Dynamics 365 Business Central 安装的典型 Visual Studio Code 扩展：
- en: '![](img/d275b3b5-962b-4c68-96a5-cf7c8c157c41.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d275b3b5-962b-4c68-96a5-cf7c8c157c41.png)'
- en: In the EXTENSIONS bar, it is possible to search the online marketplace or install
    an extension manually. You can also see the list of installed, outdated, recommended,
    and disabled extensions and sort them according to different criteria.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在 EXTENSIONS 栏中，可以搜索在线市场或手动安装扩展。你还可以查看已安装、过时、推荐和禁用的扩展，并根据不同标准对其进行排序。
- en: Some extension packages are meant to download and install a set of extensions.
    With Dynamics 365 Business Central, you might think of downloading and installing
    AL Extension Pack from [https://marketplace.visualstudio.com/items?itemName=waldo.al-extension-pack](https://marketplace.visualstudio.com/items?itemName=waldo.al-extension-pack) or
    SD Extension Pack for Dynamics 365 Business Central from [https://marketplace.visualstudio.com/items?itemName=StefanoDemiliani.sd-extpack-d365bc](https://marketplace.visualstudio.com/items?itemName=StefanoDemiliani.sd-extpack-d365bc).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一些扩展包旨在下载并安装一组扩展。在 Dynamics 365 Business Central 中，你可以考虑从 [https://marketplace.visualstudio.com/items?itemName=waldo.al-extension-pack](https://marketplace.visualstudio.com/items?itemName=waldo.al-extension-pack)
    下载并安装 AL 扩展包，或从 [https://marketplace.visualstudio.com/items?itemName=StefanoDemiliani.sd-extpack-d365bc](https://marketplace.visualstudio.com/items?itemName=StefanoDemiliani.sd-extpack-d365bc)
    下载并安装 Dynamics 365 Business Central 的 SD 扩展包。
- en: It is also possible to perform actions on a single extension by right-clicking
    on it. An extension could be enabled, disabled, disabled per workspace (a workspace
    could be a project or a folder), and so on. One of the newest – and coolest –
    features that has been added is the ability to install another version of the
    extension.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过右键点击单个扩展来执行相关操作。扩展可以被启用、禁用、按工作区禁用（工作区可以是项目或文件夹）等。最新、最酷的功能之一是能够安装该扩展的另一个版本。
- en: 'This is very useful for Dynamics 365 Business Central developers, in case there
    are regression behaviors or bugs in high-AL Language extension versions. Consider
    the following screenshot, which shows the current online AL Language extension
    versions:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于 Dynamics 365 Business Central 开发者非常有用，特别是在高版本 AL 语言扩展中存在回归行为或错误时。请参考以下截图，展示当前在线
    AL 语言扩展版本：
- en: '![](img/61b66e0d-7a6a-4415-ae84-9a75f4efa0e6.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/61b66e0d-7a6a-4415-ae84-9a75f4efa0e6.png)'
- en: This is also useful when developments target a specific platform version.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这在开发针对特定平台版本的功能时也非常有用。
- en: Manage
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理
- en: 'The Manage button is shown with a gear icon at the very bottom of the view
    bar:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 管理按钮以齿轮图标显示在视图栏的最底部：
- en: '![](img/78f519d1-07cc-4959-9bc8-1d0cccf3c727.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/78f519d1-07cc-4959-9bc8-1d0cccf3c727.png)'
- en: If you click on it, a pop-up menu with a list of commands appears. These commands
    are used to customize Visual Studio Code, or to search for updates.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击它，会弹出一个菜单，列出可用的命令。这些命令用于自定义 Visual Studio Code 或查找更新。
- en: Command Palette
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令面板
- en: 'The Command Palette is one of the most important tools in Visual Studio Code.
    Its purpose is to give quick access to standard and extended commands. There are
    different ways to run the Command Palette:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 命令面板是 Visual Studio Code 中最重要的工具之一。它的作用是快速访问标准和扩展命令。运行命令面板有不同的方式：
- en: Manage | Command Palette
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理 | 命令面板
- en: View | Command Palette
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看 | 命令面板
- en: 'Keyboard shortcut: *Ctrl* + *Shift* + *P* (mostly used by all developers)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 键盘快捷键：*Ctrl* + *Shift* + *P*（大多数开发者常用）
- en: The Command Palette is not only good for showing menu commands, but it can also
    perform other actions, such as installing extensions. You can browse through it
    to review the huge list of available commands. Commands are indexed and searchable.
    Just type a few letters to get a filtered list. It's worth mentioning the long
    list of keyboard shortcut(s) that are available for most of these commands.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 命令面板不仅可以显示菜单命令，还可以执行其他操作，例如安装扩展。你可以浏览命令面板，查看可用命令的庞大列表。命令是按索引排列的，并且可以搜索。只需输入几个字母，就能得到筛选后的列表。值得一提的是，大多数这些命令都有对应的键盘快捷键。
- en: 'One very important thing to know about the Command Palette is the use of the `>` sign.
    When you press *Ctrl* + *Shift* + *P*, the Command Palette pops up with the `>` sign
    and shows the list of commands available. Consider the following screenshot:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 了解命令面板时，有一件非常重要的事需要知道，那就是 `>` 符号的使用。当你按下 *Ctrl* + *Shift* + *P* 时，命令面板会弹出，并带有
    `>` 符号，显示可用命令的列表。请看以下截图：
- en: '![](img/a066bda5-23f0-4bb2-8513-3393964c45d2.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a066bda5-23f0-4bb2-8513-3393964c45d2.png)'
- en: 'If you remove the `>` symbol, Visual Studio Code uses the Command Palette to
    show a list of the recently opened files. The following screenshot shows this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你移除 `>` 符号，Visual Studio Code 会使用命令面板显示最近打开的文件列表。以下截图展示了这一点：
- en: '![](img/9b7b15e3-3221-4eec-a1eb-fa5af09c2265.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9b7b15e3-3221-4eec-a1eb-fa5af09c2265.png)'
- en: The power of this feature is that, without using the mouse, you can open the
    Command Palette, run a command, remove the `**>**` character, and select a file
    to edit. That's fantastic for development productivity.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这一功能的强大之处在于，在不使用鼠标的情况下，你可以打开命令面板，运行命令，移除 `**>**` 字符，并选择要编辑的文件。这对提升开发效率非常有帮助。
- en: Panels area
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面板区域
- en: Visual Studio Code not only shows detailed analysis and information related
    to your code, but also has access and display information coming from other sources
    such as Git, installed extensions, and debuggers. These outputs are logged into
    the panels area, which, by default, is at the bottom, but could be easily moved
    to one side of the workspace using the Move Panel Right button, enabled by right-clicking
    on the panel's title bar. It is possible to restore the original layout with the
    Move Panel to Bottom button, or even Hide Panel (*Ctrl* + *J*).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code 不仅显示与代码相关的详细分析和信息，还能访问并展示来自其他来源的信息，例如 Git、已安装的扩展和调试器。这些输出会记录到面板区域，默认情况下显示在底部，但可以通过右键单击面板标题栏并启用“Move
    Panel Right”按钮轻松将其移动到工作区的一侧。可以通过点击“Move Panel to Bottom”按钮恢复原始布局，或者甚至通过按 *Ctrl*
    + *J* 隐藏面板。
- en: The Panels area is not visible by default. It is typically enabled and shown
    when the information needed is requested, such as when the debugger is enabled.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 面板区域默认不可见。当请求所需信息时，通常会启用并显示此区域，例如启用调试器时。
- en: 'In the Panels area, there are four different windows: PROBLEMS, OUTPUT, DEBUG
    CONSOLE, and TERMINAL. Let''s examine them in the following sections.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在面板区域，有四个不同的窗口：PROBLEMS、OUTPUT、DEBUG CONSOLE 和 TERMINAL。我们将在接下来的章节中逐一讲解它们。
- en: PROBLEMS
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PROBLEMS
- en: 'With languages that have advanced editing features, such as AL, Visual Studio
    Code is able to identify code problems while typing. Problems lines have a specific
    colorization. There are three types of notifications: errors, warnings, and info.
    All of these can be shown in the PROBLEMS window. The following screenshot shows
    an example of the PROBLEMS window showing three errors:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有高级编辑功能的语言，例如 AL，Visual Studio Code 能够在输入时识别代码问题。问题所在的行会有特定的颜色标记。通知类型有三种：错误、警告和信息。所有这些都可以在
    PROBLEMS 窗口中显示。以下截图展示了 PROBLEMS 窗口显示三条错误的示例：
- en: '![](img/ad029571-2909-437c-b64e-357397394937.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ad029571-2909-437c-b64e-357397394937.png)'
- en: Typically, blocking errors are shown in red, while warnings are marked in green.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，阻塞错误会以红色显示，而警告则以绿色标记。
- en: OUTPUT
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OUTPUT
- en: The OUTPUT panel is the place where Visual Studio Code typically displays messages
    during or after command execution.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: OUTPUT 面板是 Visual Studio Code 通常在命令执行期间或执行后显示消息的地方。
- en: Because built-in tool actions and multiple extension commands can run concurrently,
    it is possible to make use of a drop-down box in the OUTPUT panel to change the
    view, and see the output for each standard or extension-based command.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 由于内置工具操作和多个扩展命令可以并行运行，因此可以利用 OUTPUT 面板中的下拉框更改视图，查看每个标准或基于扩展的命令的输出。
- en: 'The following screenshot shows the OUTPUT window in the Panels area:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了面板区域中的 OUTPUT 窗口：
- en: '![](img/c61fee8b-c3b0-4b1c-9d02-81aad6e2ada3.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c61fee8b-c3b0-4b1c-9d02-81aad6e2ada3.png)'
- en: Typically, when working with Dynamics 365 Business Central extensions, the AL
    language is selected.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在处理 Dynamics 365 Business Central 扩展时，会选择 AL 语言。
- en: DEBUG CONSOLE
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DEBUG CONSOLE
- en: This is a special window used by native and extension-based debuggers, such
    as the AL language debugger, to display information about code execution. This
    window and its output will be analyzed in detail in [Chapter 9](076505ca-e2a0-40ab-8640-c720c9aa68ee.xhtml), *Debugging*.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个由本地和基于扩展的调试器（例如 AL 语言调试器）使用的特殊窗口，用于显示关于代码执行的信息。此窗口及其输出将在[第9章](076505ca-e2a0-40ab-8640-c720c9aa68ee.xhtml)中详细分析，*调试*。
- en: TERMINAL
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TERMINAL
- en: Visual Studio Code allows us to execute commands in the same way as the Command
    Prompt, directly from within the development environment. The Terminal session
    is based on PowerShell by default.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code 允许我们像在命令提示符中一样直接在开发环境内执行命令。默认情况下，终端会话基于 PowerShell。
- en: Now that we have all elements that are in related to Visual Studio Code place,
    we can move onto the next section and analyze the powerful editing features that
    it offers.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了与 Visual Studio Code 相关的所有元素，可以进入下一部分，分析它所提供的强大编辑功能。
- en: Visual Studio Code – the editing features
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Visual Studio Code – 编辑功能
- en: Visual Studio Code provides many of the features that you would expect from
    the best-in-class code editor. If you are familiar with Visual Studio, you might
    have noticed that some features have been inherited from this IDE, or engineered
    in a similar way.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code 提供了你所期待的顶级代码编辑器的许多功能。如果你熟悉 Visual Studio，你可能已经注意到一些功能是从这个
    IDE 继承过来的，或者是以类似的方式设计的。
- en: '*Developed by developers for developers*, Visual Studio Code has keyboard shortcuts
    for almost every editing command, giving you the option to edit code faster, and
    completely forget about the mouse.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '*由开发人员为开发人员开发*，Visual Studio Code 为几乎所有编辑命令提供键盘快捷键，让你可以更快地编辑代码，完全摆脱鼠标的依赖。'
- en: Let's study these features in the following sections.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在接下来的章节中研究这些功能。
- en: Comment lines
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注释行
- en: Visual Studio Code provides out-of-the-box commands for text selection and professional
    editing in the Edit menu. The Edit menu also includes Toggle Line Comment (*Ctrl *+ *U*),
    which adds a line comment for the selected line. This means that if you select
    10 lines of code, Visual Studio Code will add 10 comment lines. The beauty of
    this command is that it works in reverse as well. If you select the 10 commented
    lines and press Toggle Line Comment, the comments will be magically removed.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code 提供了开箱即用的文本选择和专业编辑命令，这些命令位于编辑菜单中。编辑菜单还包括切换行注释（*Ctrl* + *U*），该命令为选中的行添加行注释。这意味着，如果你选择了
    10 行代码，Visual Studio Code 会添加 10 行注释。这个命令的妙处在于它也能反向操作。如果你选择了 10 行注释并按下切换行注释，注释就会神奇地被移除。
- en: For developers working with CSIDE, the old legacy language for on-premises Dynamics
    365 Business Central, this command is the equivalent of Comment Selection (*Shift*
    + *Ctrl* + *K*) and Uncomment Selection (*Shift *+ *Ctrl *+ *O*).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用 CSIDE 的开发人员来说，CSIDE 是 Dynamics 365 Business Central 传统本地语言，此命令等同于注释选择（*Shift*
    + *Ctrl* + *K*）和取消注释选择（*Shift* + *Ctrl* + *O*）。
- en: Delimiter matching
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定界符匹配
- en: 'Visual Studio Code is capable of detecting pairs of delimiters, such as brackets
    and parentheses. This feature is really helpful if you want to delimit code blocks,
    and it kicks in when the mouse is placed near one of the delimiter pairs:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code 能够检测配对的定界符，如括号和圆括号。如果你想划定代码块，这个功能非常有用，当鼠标靠近某个定界符对时，它会自动触发：
- en: '![](img/89e5b9dc-75f4-43e5-9c85-af684ad075a4.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/89e5b9dc-75f4-43e5-9c85-af684ad075a4.png)'
- en: The preceding code is an example ofdelimiter matching.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码是定界符匹配的示例。
- en: Text selection
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本选择
- en: The Selection menu also has commands that relate to text selection, but most
    of them are used to move or duplicate lines of code above and below the selected
    line.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 选择菜单也有与文本选择相关的命令，但大多数用于移动或复制选中行的代码。
- en: If you position the cursor near an AL function, variable, or constant, you can
    use Add Next Occurrence (*Ctrl* + *D)*, Add Previous Occurrence, or Select All
    Occurrence***s*** (*Shift* + *Ctrl* + *D*) to select occurrences of the selected
    item, and occurrences will be highlighted in a different color.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将光标放置在 AL 函数、变量或常量附近，可以使用“添加下一个出现位置”（*Ctrl* + *D*）、“添加上一个出现位置”或“选择所有出现位置”（*Shift*
    + *Ctrl* + *D*）来选择所选项的所有出现位置，并且这些出现位置会以不同的颜色高亮显示。
- en: In the code editor, you can also press *Ctrl* + *D* for a word or identifier
    selection on the right of the cursor. You can then easily expand (*Shift* + *Alt*
    + →) or shrink (*Shift* + *Alt* + ←) text blocks within delimiters.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码编辑器中，你还可以按*Ctrl* + *D*选择光标右侧的单词或标识符。然后，你可以轻松地扩展（*Shift* + *Alt* + →）或收缩（*Shift*
    + *Alt* + ←）分隔符内的文本块。
- en: Code block folding
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码块折叠
- en: 'If you hover over line numbers in the code editor, a `-` will appear close
    to the initial part of a code block. Click on it to fold it, and a `+` will appear.
    Click on this, and the code block unfolds:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将鼠标悬停在代码编辑器中的行号上，`-`符号会出现在代码块的起始部分旁边。点击它进行折叠，此时会出现`+`符号。点击这个符号，代码块会展开：
- en: '![](img/e5002d69-7f9f-4594-872c-e0e05641d6c0.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e5002d69-7f9f-4594-872c-e0e05641d6c0.png)'
- en: The preceding screenshot shows the code block folding depicted with `+`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 上图展示了代码块折叠的情况，使用了`+`符号。
- en: Multiple cursors (or multi-cursor)
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多光标（或多重光标）
- en: Each cursor operates independently. *Alt* + click will generate a secondary
    cursor at the desired position.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 每个光标都是独立操作的。*Alt* + 点击将在目标位置生成一个次要光标。
- en: 'The most common development situation in which you want to go for multiple
    cursors is when you need to add or replace the same text in different positions,
    but within the same source file. The following screenshot shows three cursors
    in action when editing the `DataClassification` property:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的开发场景是，当你需要在同一源文件中的不同位置添加或替换相同的文本时，你可以使用多光标。下图展示了在编辑`DataClassification`属性时，三个光标的使用情况：
- en: '![](img/9cc8d80f-aa7b-42ec-be6f-c5919670e0fb.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9cc8d80f-aa7b-42ec-be6f-c5919670e0fb.png)'
- en: This is a great feature for AL language developers, especially when they have
    to write down the same sentence many times in the same place (for example, `Caption` or `DataClassification`
    in a table object and for each table field).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 AL 语言开发者来说，这是一个很棒的功能，特别是当他们需要在同一个地方多次写下相同的句子时（例如，在表格对象中的`Caption`或`DataClassification`，以及每个表格字段中）。
- en: Mini-map
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迷你地图
- en: 'Sometimes, when working with very long files such as report source files (RDLs)
    or codeunits, it is pretty difficult to know where the pointer should be positioned
    – or is positioned – within a source file. Visual Studio Code has a full-fledged
    mini-map feature: a small preview of the source code file. The following is an
    example of an RDL:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，当处理非常长的文件（例如报告源文件 RDL 或代码单元）时，很难知道指针应该定位到哪里——或者它当前位于源文件的哪个位置。Visual Studio
    Code 提供了一个完整的迷你地图功能：源代码文件的一个小预览。以下是一个 RDL 示例：
- en: '![](img/feba5994-d844-48b3-8842-e3a1040feaf7.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/feba5994-d844-48b3-8842-e3a1040feaf7.png)'
- en: 'The mini-map feature can be disabled/enabled through View | Toggle Minimap,
    or by running the Command Palette (*Ctrl* + *Shift* + *P*) and selecting View:
    Toggle Minimap.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '迷你地图功能可以通过视图 | 切换迷你地图进行启用或禁用，或者通过运行命令面板（*Ctrl* + *Shift* + *P*）并选择“视图: 切换迷你地图”来操作。'
- en: Breadcrumbs
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面包屑
- en: 'The Show Breadcrumbs command is available in the View menu. With AL files,
    there is an icon in the top-left corner of the code editor. This can be expanded
    to double-check the definitions of properties, functions, fields, keys, and so
    on:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: “显示面包屑”命令可以在视图菜单中找到。在 AL 文件中，代码编辑器的左上角有一个图标。可以展开它，以便重新检查属性、函数、字段、键等的定义：
- en: '![](img/49acd2a0-3d17-436b-b698-7b3cf2032347.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/49acd2a0-3d17-436b-b698-7b3cf2032347.png)'
- en: If you click on an element in the expanded list, the cursor will jump to its
    primary definition, making code navigation quite fast.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击展开列表中的某个元素，光标将跳转到该元素的主定义位置，使得代码导航非常快捷。
- en: IntelliSense
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IntelliSense（智能感知）
- en: 'In visual editors, IntelliSense is a word completion tool that appears as a
    pop-up list while you type. Visual Studio Code IntelliSense can provide smart
    suggestions, showing the definition and purpose – like online help – related to
    a specific element. The following screenshot shows IntelliSense in action:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在视觉编辑器中，IntelliSense 是一个单词自动补全工具，它会在你输入时作为弹出列表出现。Visual Studio Code 的 IntelliSense
    可以提供智能建议，显示与特定元素相关的定义和用途——就像在线帮助一样。下图展示了 IntelliSense 的使用情况：
- en: '![](img/efe59c67-97ef-442c-bfaa-c34e8d82c6fa.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efe59c67-97ef-442c-bfaa-c34e8d82c6fa.png)'
- en: IntelliSense is context-sensitive, and if you need to enable it directly without
    typing anything, just press *Ctrl* + spacebar. Depending on the context where
    the cursor is placed, IntelliSense will show all the items that can be used in
    that context. For example, inside a `Table Field` declaration, it will list all
    the specific field properties, such as `Caption` and `CaptionML`, while in an
    empty codeunit definition, it will show all the properties that are exposed by
    a codeunit object.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliSense 是上下文敏感的，如果你需要直接启用它而不输入任何内容，只需按 *Ctrl* + 空格键。根据光标所在的上下文，IntelliSense
    会显示该上下文中可以使用的所有项。例如，在 `Table Field` 声明内部，它会列出所有特定字段属性，如 `Caption` 和 `CaptionML`，而在空代码单元定义中，它会显示代码单元对象暴露的所有属性。
- en: Word completion
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单词自动补全
- en: 'Through the IntelliSense feature, the code editor in Visual Studio Code implements
    word completion for all native (such as JSON) and extension-based supported languages
    (such as AL). Just press *Enter* or *Tab* to insert the suggested word:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 IntelliSense 功能，Visual Studio Code 中的代码编辑器实现了对所有原生（如 JSON）和基于扩展支持的语言（如 AL）的单词补全。只需按
    *Enter* 或 *Tab* 即可插入建议的单词：
- en: '![](img/4cf2e797-aaba-49c1-90b1-8fc4ee162fdd.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4cf2e797-aaba-49c1-90b1-8fc4ee162fdd.png)'
- en: The preceding screenshot shows an AL variable suggested by the word completion
    engine.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的截图展示了单词自动补全引擎推荐的一个 AL 变量。
- en: The Go To Definition
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义跳转
- en: This is a super-cool, must-know feature. You can hover over a variable, constant,
    function, or whatever code element you want with the mouse, and if you press *Ctrl*,
    the word or identifier (known also as a symbol) will magically switch into a hyperlink.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个超级酷、必须了解的功能。你可以用鼠标悬停在变量、常量、函数或任何你想要的代码元素上，然后按 *Ctrl*，该单词或标识符（也称为符号）会神奇地变成一个超链接。
- en: If you click on the word while pressing *Ctrl*, you will be automatically redirected
    to the code that defines that word. *Ctrl* + hovering over a code element also
    enables the Go To Definition feature.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在按下 *Ctrl* 的同时点击该单词，你将自动跳转到定义该单词的代码位置。*Ctrl* + 鼠标悬停在代码元素上也会启用跳转到定义功能。
- en: 'Other possible ways to enable this feature are as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 启用此功能的其他可能方式如下：
- en: Select a code element and press *F12*.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择一个代码元素并按 *F12*。
- en: Right-click on a code element and then select Go To Definition from the context
    menu.
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右键点击一个代码元素，然后从上下文菜单中选择“跳转到定义”。
- en: Find All References
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找所有引用
- en: Find All References makes it very easy to parse how many times and where an
    object, a function, or any code element has been used across source code. You
    can simply right-click on any variable, function, or element name and then select
    Find All References, or use the keyboard shortcut *Shift* + *Alt* + *F12*.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 查找所有引用可以非常方便地解析一个对象、函数或任何代码元素在源代码中被使用的次数和位置。你只需右键点击任何变量、函数或元素名称，然后选择“查找所有引用”，或者使用快捷键
    *Shift* + *Alt* + *F12*。
- en: 'When it''s enabled, the code editor will create a result list in the activity
    bar showing how many times it has been referenced, and in which object files and
    position(s). A shortcut icon is created in the sidebar called References. The
    following screenshot shows how to find all references in AL files for a specific
    variable:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 当它被启用时，代码编辑器会在活动栏中创建一个结果列表，显示该项被引用的次数，以及在哪些对象文件和位置（s）中引用过。侧边栏中会创建一个名为“引用”的快捷图标。下图展示了如何查找
    AL 文件中特定变量的所有引用：
- en: '![](img/e8a84e83-55b5-4157-9ae4-69c40c107ff6.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e8a84e83-55b5-4157-9ae4-69c40c107ff6.png)'
- en: If you expand an occurrence in the reference list on the left and click on a
    record, the code editor will open the file where it is referenced and position
    the cursor in editing mode, selecting the element searched in that file.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在左侧的引用列表中展开一个出现项并点击记录，代码编辑器会打开引用该项的文件，并将光标定位到编辑模式，选择该文件中搜索到的元素。
- en: The reference list can be cleared and refreshed, and you can collapse all the
    elements in it. If you clear the list, you can always run the previous search
    again, since the history is maintained for you.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 参考列表可以清除并刷新，你可以折叠其中的所有元素。如果清除列表，你可以随时重新运行先前的搜索，因为系统会为你保留历史记录。
- en: Peek Definition
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Peek Definition
- en: Imagine that you have a large number of code files, and you need to edit the
    definition of a variable or field that you are currently using. With many other
    editors – or development environments – you most likely have to save all the files
    in text format, then search through all these code files and be sure to replace
    that variable name. This task not only can be annoying, but can also distract
    you from the original code you were writing.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你有大量的代码文件，你需要编辑当前正在使用的变量或字段的定义。在许多其他编辑器或开发环境中，你可能需要将所有文件保存为文本格式，然后搜索所有这些代码文件，确保替换该变量名。这个任务不仅可能很烦人，而且会让你分心，远离你原来正在编写的代码。
- en: 'Visual Studio Code brilliantly solves this problem by providing the Peek feature,
    which can be enabled in different ways:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code 通过提供 Peek 功能来解决这个问题，可以通过不同的方式启用：
- en: Right-click a variable, field, or function name and select Peek Definition.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右键单击变量、字段或函数名，然后选择 Peek Definition。
- en: Use the *Alt* + *F12* keyboard shortcut.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 *Alt* + *F12* 键盘快捷键。
- en: 'An interactive pop-up window should appear, showing source code that defines
    the selected element. The following screenshot shows the Peek Definition for a
    table source in a report:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 应该会弹出一个交互式弹出窗口，显示定义所选元素的源代码。以下截图显示了报表中表源 Peek Definition 的窗口：
- en: '![](img/067889db-7662-4f38-ade8-fe051f70dbc0.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/067889db-7662-4f38-ade8-fe051f70dbc0.png)'
- en: You can then see what has been written, and also directly edit it.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以看到已经编写的内容，也可以直接编辑它。
- en: Renaming symbols
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重命名符号
- en: For a developer, it is very common to rename a variable, constant, field, or
    function name. These coding elements are technically called symbols. Visual Studio
    Code provides a very powerful feature to rename symbols.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 对于开发人员，重命名变量、常量、字段或函数名是非常常见的。这些编码元素在技术上称为符号。Visual Studio Code 提供了一个非常强大的功能来重命名符号。
- en: 'If you press *F2* on the coding element that you wish to rename, or right-click
    and then select Rename Symbol, a small interactive popup appears in edit mode.
    There, you can write the new element name without using a distracting dialog window,
    allowing you to concentrate on your coding. All references to that code element
    will be renamed accordingly. The following screenshot shows renaming the XMLport
    symbol reference:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在想要重命名的编码元素上按 *F2*，或者右键然后选择重命名符号，一个小的交互式弹出窗口会出现在编辑模式中。在那里，你可以写入新的元素名称，而无需使用分散注意力的对话框窗口，让你可以集中精力编写代码。所有对该代码元素的引用都将相应地被重命名。以下截图显示了重命名
    XMLport 符号引用的过程：
- en: '![](img/79a77faa-f447-4432-b5bd-aa42e2566001.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/79a77faa-f447-4432-b5bd-aa42e2566001.png)'
- en: All of the features shown so far are the most useful features provided by Visual
    Studio Code that support proficient code editing for AL developers.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，所展示的所有功能都是 Visual Studio Code 提供的最有用的功能，支持 AL 开发人员进行高效的代码编辑。
- en: At this stage, it is important to take a closer look at the AL Language extension
    and see how to configure it.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，重要的是仔细看一下 AL 语言扩展，并了解如何配置它。
- en: Understanding the AL Language extension
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 AL 语言扩展
- en: AL is now a cross-platform language that is deployed through an extension for
    Visual Studio Code. This extension not only supports deployment on Windows OSes,
    but is also supported for the macOS version of Visual Studio Code.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: AL 现在是一个跨平台语言，通过 Visual Studio Code 的扩展部署。这个扩展不仅支持在 Windows 操作系统上部署，还支持 macOS
    版本的 Visual Studio Code。
- en: The free AL Language extension ([https://marketplace.visualstudio.com/items?itemName=ms-dynamics-smb.al](https://marketplace.visualstudio.com/items?itemName=ms-dynamics-smb.al))
    is available for download from the Visual Studio Code marketplace. This provides
    an optimized experience for Dynamics 365 Business Central extension development,
    and includes all the support and tools that you need to build apps (from now on,
    a synonym for extension), including the debugger.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 免费的 AL 语言扩展 ([https://marketplace.visualstudio.com/items?itemName=ms-dynamics-smb.al](https://marketplace.visualstudio.com/items?itemName=ms-dynamics-smb.al))
    可在 Visual Studio Code 市场上下载。这为 Dynamics 365 Business Central 扩展开发提供了优化的体验，并包括了构建应用程序（从现在起称为扩展的同义词）所需的所有支持和工具，包括调试器。
- en: 'The easiest way to get the extension installed without further information
    is by opening any Dynamics 365 Business Central code file (`.al`) and following
    the instructions shown by Visual Studio Code when it detects that an extension
    is available for that file type:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 获取扩展并安装的最简单方法是打开任何 Dynamics 365 Business Central 代码文件（`.al`），并按照 Visual Studio
    Code 在检测到该文件类型有可用扩展时显示的说明操作：
- en: '![](img/1e2e7c53-68da-48b4-a4fa-bbc04c788db0.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e2e7c53-68da-48b4-a4fa-bbc04c788db0.png)'
- en: Similarly, you might want to install other extensions that add other languages
    (such as PowerShell), tools (such as Docker), or enhanced editing features to
    the AL Language extension. A list of the most useful marketplace extensions used
    by Dynamics 365 Business Central in combination with AL Language will be provided
    in [Chapter 18](00676a8a-c821-432e-b39f-4f39ea2c55f9.xhtml), *Useful and Proficient
    Tools for AL Developers*.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你可能想要安装其他扩展，以便为 AL 语言扩展添加其他语言（如 PowerShell）、工具（如 Docker）或增强的编辑功能。关于与 AL 语言结合使用的最有用的市场扩展列表将在[第18章](00676a8a-c821-432e-b39f-4f39ea2c55f9.xhtml)中提供，*AL
    开发者的有用且高效工具*。
- en: Let's understand what these extensions are in AL Language in the sections ahead.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们了解 AL 语言中的这些扩展。
- en: AL Language
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AL 语言
- en: Created by the Dynamics 365 Business Central development team, AL Language is
    the official Visual Studio Code extension for developing apps for small, single-tenant
    personalization's and complex add-on vertical solutions that are deployed through
    the online Dynamics 365 Business Central AppSource marketplace.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: AL 语言是由 Dynamics 365 Business Central 开发团队创建的，它是为小型单租户个性化和复杂的垂直解决方案（通过在线 Dynamics
    365 Business Central AppSource 市场部署）开发应用程序的官方 Visual Studio Code 扩展。
- en: 'It can be deployed in two different ways:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以通过两种不同的方式进行部署：
- en: Directly, as a downloadable package from the Visual Studio Code marketplace.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接作为 Visual Studio Code 市场中的可下载包。
- en: 'Manually, as an installable package (`.vsix`):'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动安装，作为可安装包（`.vsix`）：
- en: The installable package is dispatched when creating a Docker-contained sandbox
    from the official Dynamics 365 Business Central image.
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装包会在创建一个基于官方 Dynamics 365 Business Central 镜像的 Docker 沙箱时分发。
- en: Downloaded from Dynamics 365 Business Central on-premises DVD.
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Dynamics 365 Business Central 本地 DVD 下载。
- en: 'To start directly with AL Language, simply download it from the marketplace
    by following these simple steps:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 要直接开始使用 AL 语言，只需通过以下简单步骤从市场中下载它：
- en: Run Visual Studio Code.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Visual Studio Code。
- en: Click on the Extensions view bar.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击扩展视图栏。
- en: In the search field, type Dynamics 365 Business Central.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中输入 Dynamics 365 Business Central。
- en: Select AL Language.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 AL 语言。
- en: 'Click on Install and when the installation finishes, reload Visual Studio Code
    as requested. It shows the following AL Language extension:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击安装，并在安装完成后按要求重新加载 Visual Studio Code。它会显示以下 AL 语言扩展：
- en: '![](img/c45e562c-0b5f-43a5-a69c-693260ebbcf1.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c45e562c-0b5f-43a5-a69c-693260ebbcf1.png)'
- en: The AL Language build number, also known as the development build, is shown
    close to the title. In the preceding screenshot, the AL Language development build
    (or runtime) is `4.0.182565`.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: AL 语言的版本号，也称为开发版本，会显示在标题旁边。在前面的截图中，AL 语言开发版本（或运行时）是`4.0.182565`。
- en: The development build is very important, because new language features and enhancements
    are typically not backported to older builds, so they could be outdated and not
    compatible with the more recent Dynamics 365 Business Central platform updates.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 开发版本非常重要，因为新语言功能和增强功能通常不会回移植到旧版本中，因此它们可能已经过时，并且与更新的 Dynamics 365 Business Central
    平台更新不兼容。
- en: AL developers should always select the latest AL Language development build
    in order to benefit from the latest enhancements and stability features.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: AL 开发者应始终选择最新的 AL 语言开发版本，以便受益于最新的增强功能和稳定性特性。
- en: 'The AL Language development model relates to creating, editing, and organizing
    flat text files with the typical `.al` extension. In short: AL Language development
    is simply folder and file based.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: AL 语言的开发模型涉及创建、编辑和组织具有典型 `.al` 扩展名的平面文本文件。简而言之：AL 语言开发只是基于文件夹和文件的。
- en: It's worth mentioning that the Visual Studio Code terminology calls a root folder
    a workspace. The AL Language root folder represents the source code container
    for an extension. Therefore, the AL Language root folder is also called the Visual
    Studio Code development workspace.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，Visual Studio Code 中的术语将根文件夹称为工作区。AL 语言根文件夹代表扩展的源代码容器。因此，AL 语言根文件夹也被称为
    Visual Studio Code 开发工作区。
- en: 'When creating whatever kind of extension, the workspace consists of the following
    items:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 创建任何类型的扩展时，工作区由以下项目组成：
- en: '`launch.json` file'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`launch.json` 文件'
- en: '`app.json` file'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.json` 文件'
- en: Symbol files
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 符号文件
- en: '`.al` object files (such as table, page, report, and codeunit)'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.al` 对象文件（如表、页面、报告和代码单元）'
- en: Complementary files (such as `WebService.xml` files, the extension logo in `.bmp`
    format, and the `permissions.xml` file)
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 补充文件（如 `WebService.xml` 文件、`.bmp` 格式的扩展徽标文件和 `permissions.xml` 文件）
- en: 'We will analyze AL Language objects and complementary files in more depth all
    throughout this book and in later chapters. We will focus now on the backbone
    of the app development: `launch.json`, `app.json`, and symbol files.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 本书及后续章节将更深入分析 AL 语言对象和补充文件。现在我们将重点讨论应用程序开发的核心部分：`launch.json`、`app.json` 和符号文件。
- en: launch.json
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: launch.json
- en: This file is stored in the extension workspace in a subfolder called `.vscode` and
    mainly determines the specific parameter settings for downloading and uploading
    AL Language commands.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件存储在扩展工作区的名为 `.vscode` 的子文件夹中，主要确定下载和上传 AL 语言命令的具体参数设置。
- en: 'The following table shows the download and upload AL commands:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 下表显示了下载和上传 AL 命令：
- en: '| **Download commands** | **Upload commands** |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| **下载命令** | **上传命令** |'
- en: '| `AL: Download symbols` | `AL: Publish` (*F5*) |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| `AL: 下载符号` | `AL: 发布` (*F5*) |'
- en: '| `AL: Download source code` (*F7*) | `AL: Publish and open in the designer`
    (*F6*) |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| `AL: 下载源代码` (*F7*) | `AL: 发布并在设计器中打开` (*F6*) |'
- en: '|  | `AL: Publish without debugging` (*Ctrl* + *F5*) |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '|  | `AL: 无调试发布` (*Ctrl* + *F5*) |'
- en: '|  | `AL: Rapid Application Publish` (*Alt* + *F5*) |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '|  | `AL: 快速应用发布` (*Alt* + *F5*) |'
- en: '|  | `AL: Rapid Application Publish without debugging` (*Ctrl* + *Alt* + *F5*)
    |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '|  | `AL: 快速应用发布无调试` (*Ctrl* + *Alt* + *F5*) |'
- en: 'It is also used just to establish a connection, as in the case of AL: debug
    without the publishing (*Ctrl* + *Shift* + *F5*) command, or to launch a specific
    debugging feature such as AL: open Event Recorder. The Event Recorder feature
    will be covered in [Chapter 9](076505ca-e2a0-40ab-8640-c720c9aa68ee.xhtml), *Debugging*.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 它还仅用于建立连接，如 AL：调试无发布（*Ctrl* + *Shift* + *F5*）命令，或启动特定的调试功能，如 AL：打开事件记录器。事件记录器功能将在[第
    9 章](076505ca-e2a0-40ab-8640-c720c9aa68ee.xhtml)《调试》中进行介绍。
- en: 'The `launch.json` file is a JSON array that might have different JSON values,
    each representing a set of attributes targeting different deployment: on-premises
    or SaaS. Attributes could be mandatory or optional, depending on the target deployment.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`launch.json` 文件是一个 JSON 数组，可能包含不同的 JSON 值，每个值代表一组针对不同部署目标的属性：本地部署或 SaaS。属性可能是必需的，也可能是可选的，具体取决于目标部署。'
- en: 'The following table shows the `launch.json` attributes:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 下表显示了 `launch.json` 属性：
- en: '| **Attribute** | **Mandatory** | **Deployment type** | **Description** |'
  id: totrans-235
  prefs: []
  type: TYPE_TB
  zh: '| **属性** | **必需** | **部署类型** | **描述** |'
- en: '| `Name` | Yes | All | Name shown in the debugger window to identify the set
    of launch parameters.Default values: Publish to your own server (on-premises),
    Publish to Microsoft cloud (SaaS). |'
  id: totrans-236
  prefs: []
  type: TYPE_TB
  zh: '| `Name` | 是 | 所有 | 在调试器窗口中显示的名称，用于识别启动参数集。默认值：发布到您的服务器（本地部署），发布到微软云（SaaS）。
    |'
- en: '| `Type` | Yes | All | Constant value: `al`. |'
  id: totrans-237
  prefs: []
  type: TYPE_TB
  zh: '| `Type` | 是 | 所有 | 常量值：`al`。 |'
- en: '| `Request` | Yes | All | Constant value: `launch`. |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| `Request` | 是 | 所有 | 常量值：`launch`。 |'
- en: '| `startupObjectType` | No | All | Object type to run after publishing: Table
    or Page. |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| `startupObjectType` | 否 | 所有 | 发布后运行的对象类型：表或页面。 |'
- en: '| `startupObjectId` | No | All | Used together with `StartupObjectType`.Defines
    the object ID to run. |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| `startupObjectId` | 否 | 所有 | 与 `StartupObjectType` 一起使用。定义要运行的对象 ID。 |'
- en: '| `tenant` | No | All | AAD tenant (SaaS) or tenant name (on-premises with
    multitenancy) to connect to extract symbols and/or publish the app package. |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| `tenant` | 否 | 所有 | AAD 租户（SaaS）或租户名称（具有多租户的本地部署）用于连接、提取符号和/或发布应用程序包。 |'
- en: '| `sandbox` | No | Online | Specifies the sandbox name in case of multiple
    online sandboxes created for the same AAD tenant. |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| `sandbox` | 否 | 在线 | 在为同一 AAD 租户创建多个在线沙盒时，指定沙盒名称。 |'
- en: '| `breakOnError` | No | All | Specifies whether the debugger should stop when
    an error occurs.Default value: `true`. |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| `breakOnError` | 否 | 所有 | 指定当发生错误时调试器是否应停止。默认值：`true`。 |'
- en: '| `breakOnErrorWrite` | No | All | Specifies whether the debugger should stop
    on record changes (insert, modify, and delete).Default value: `false`. |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| `breakOnErrorWrite` | 否 | 所有 | 指定调试器是否应在记录更改（插入、修改和删除）时停止。默认值：`false`。 |'
- en: '| `schemaUpdateMode` | No | All | Determines the data synchronization mode.`Synchronize`:
    This is the default value. If there is already data deployed for this extension,
    it will be preserved and not removed. The extension metadata will be synchronized
    with the existing one, if any.`Recreate`: Wipe out previous metadata (tables and
    table extensions, typically) and use the new metadata from scratch.`ForceSync`:
    Force the schema synchronization. This should be used with extreme caution since
    it might lead to data loss scenarios. |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| `schemaUpdateMode` | 否 | 所有 | 确定数据同步模式。`Synchronize`：这是默认值。如果该扩展已经部署了数据，则会保留现有数据并且不被删除。扩展的元数据将与现有的元数据进行同步（如果存在）。`Recreate`：清除之前的元数据（通常是表和表扩展），并从头开始使用新的元数据。`ForceSync`：强制同步架构。由于可能导致数据丢失，应极其小心使用此选项。
    |'
- en: '| `DependencyPublishingOption` | No | All | This parameter was introduced with
    the Dynamics 365 Business Central Fall 2019 update. It applies in complex environments
    where multiple dependent apps are loaded from the same root folder. Possible values
    are as follows:`Default`: Enable rebuilding and publishing of all dependent apps.`Ignore`:
    Does not apply dependency publishing. This option should be used quite carefully
    since it risks breaking existing interdependent solutions.`Strict`: Publishing
    will fail if there are any installed extensions that have a dependency on the
    startup folder. |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| `DependencyPublishingOption` | 否 | 所有 | 此参数在 Dynamics 365 Business Central
    2019 年秋季更新中引入。适用于多个依赖应用从同一根文件夹加载的复杂环境。可能的值如下：`Default`：启用所有依赖应用的重建和发布。`Ignore`：不进行依赖发布。应谨慎使用此选项，因为它有可能破坏现有的相互依赖的解决方案。`Strict`：如果有任何已安装的扩展依赖于启动文件夹，发布将失败。
    |'
- en: '| `Server` | Yes | On-premises | Server name. Default value: `http://localhost`.
    |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| `Server` | 是 | 本地部署 | 服务器名称。默认值：`http://localhost`。|'
- en: '| `serverInstance` | Yes | On-premises | Dynamics 365 Business Central Server
    service name. |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| `serverInstance` | 是 | 本地部署 | Dynamics 365 Business Central 服务器服务名称。 |'
- en: '| `authentication` | Yes | On-premises | Authentication type: Windows or User
    Password.At the time of writing, AAD is not supported for on-premises deployment
    and it is the default, and only, value for online deployments. |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| `authentication` | 是 | 本地部署 | 身份验证类型：Windows 或用户密码。撰写时，AAD 不支持本地部署，并且它是在线部署的默认且唯一值。
    |'
- en: '| `Port` | No | On-premises | Dynamics 365 Business Central port number.Default
    value: `7049`. |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| `Port` | 否 | 本地部署 | Dynamics 365 Business Central 端口号。默认值：`7049`。 |'
- en: '| `applicationFamily` | No | AppSource | Used to develop an embedded extension
    for AppSource. This is a tag for Microsoft to determine the targeted upgrade operation
    if specific AppSource extensions have been deployed in the tenant. |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| `applicationFamily` | 否 | AppSource | 用于为 AppSource 开发嵌入式扩展。该标签用于 Microsoft
    判断目标升级操作，如果在租户中部署了特定的 AppSource 扩展。 |'
- en: '| `launchBrowser` | No | All |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| `launchBrowser` | 否 | 所有 |'
- en: Specifies whether or not to launch a browser when publishing extensions.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 指定在发布扩展时是否启动浏览器。
- en: '|'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `enableLongRunningSqlStatements` | No | All |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| `enableLongRunningSqlStatements` | 否 | 所有 |'
- en: Enable the capability of displaying long-running T-SQL statements while debugging.
    This feature is planned to work for on-premises and online sandbox environments.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 启用在调试时显示长时间运行的 T-SQL 语句。此功能计划支持本地部署和在线沙盒环境。
- en: '|'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `enableSqlInformationDebugger` | No | All | Enable the capability of retrieving
    T-SQL query info. This feature is planned to work for on-premises and online sandbox
    environments.  |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| `enableSqlInformationDebugger` | 否 | 所有 | 启用获取 T-SQL 查询信息的功能。此功能计划支持本地部署和在线沙盒环境。
    |'
- en: If you have set up more than one value in the JSON array, when you perform upload
    or download AL Language commands, you will be prompted to choose one of the parameter
    set names defined in the JSON array.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 JSON 数组中设置了多个值，当执行上传或下载 AL 语言命令时，将提示你选择一个定义在 JSON 数组中的参数集名称。
- en: 'The following screenshot is an example of a `launch.json` file:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是 `launch.json` 文件的示例：
- en: '![](img/fce6197b-48ec-4bbf-9e6f-995eb2dc5204.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fce6197b-48ec-4bbf-9e6f-995eb2dc5204.png)'
- en: This shows the file with two parameter set values.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了带有两个参数设置值的文件。
- en: app.json
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: app.json
- en: Typically stored in the extension workspace root folder, this represents the
    app manifest written in JSON. Inside the JSON file, there are parameters referencing
    base and system applications, and platform and runtime definitions.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 通常存储在扩展工作区的根文件夹中，它代表了用 JSON 编写的应用清单。在 JSON 文件中，包含了引用基础和系统应用的参数，以及平台和运行时的定义。
- en: These terms need to be well understood when developing for Dynamics 365 Business
    Central.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在为 Dynamics 365 Business Central 开发时，必须充分理解这些术语。
- en: System and base application
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统和基础应用
- en: 'With the Fall 2019 update, Microsoft converted all legacy C/AL code into AL
    objects. Currently, the big application monolith has been split into two apps:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2019 年秋季更新中，微软将所有遗留的 C/AL 代码转换为 AL 对象。目前，庞大的应用单体已经被拆分为两个应用：
- en: '**System application**: with approximately 200 objects.'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统应用**：大约包含 200 个对象。'
- en: '**Base application**: depending on the localized version, it spans from 6,000
    to 8,000 objects.'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础应用**：根据本地化版本的不同，它包含 6,000 到 8,000 个对象。'
- en: 'To be extended, these need to be referenced as dependencies in the `app.json`
    file, and their symbols pulled on-premises or from an online sandbox through the `AL:
    Download symbols` AL Language command.'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '要扩展这些应用，需要在 `app.json` 文件中将其作为依赖项引用，并通过 `AL: Download symbols` AL 语言命令将其符号拉取到本地或在线沙盒中。'
- en: When pulled in the `.alpackages` folder, they are typically referenced through
    a version number in the major, minor, build, and revision notations, and this
    is reflected in the name of the symbols that are downloaded (for example, `Microsoft_System
    Application_15.0.36560.0` and `Microsoft_Base Application_15.0.36626.36918`).
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 当拉入 `.alpackages` 文件夹时，它们通常通过主版本号、次版本号、构建号和修订号来引用，并且这一点反映在下载的符号名称中（例如，`Microsoft_System
    Application_15.0.36560.0` 和 `Microsoft_Base Application_15.0.36626.36918`）。
- en: The major version digit typically corresponds to the Dynamics 365 Business Central
    major update release.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 主要版本号通常对应于 Dynamics 365 Business Central 的主要更新发布。
- en: The October 2019 (or Fall 2019) release update is major version 15\. The Spring
    2020 (or April 2020) update release will be major version 16, and so on.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 2019 年 10 月（或 2019 年秋季）发布更新是主要版本 15。2020 年春季（或 2020 年 4 月）发布的更新将是主要版本 16，以此类推。
- en: The minor version typically corresponds to minor updates. The November 2019
    update 1 is minor version 15.1, December 2019 update 2 should be minor version
    15.2, and so on.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 次版本号通常对应于次要更新。2019 年 11 月的更新 1 是次版本 15.1，2019 年 12 月的更新 2 应该是次版本 15.2，以此类推。
- en: The build number is a progressive number that is incremented by Microsoft as
    soon as there are changes committed to the branch that is related to feature enhancements
    or bug fixing.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 构建号是一个递增的数字，每当有更改提交到与功能增强或修复相关的分支时，微软就会增加该数字。
- en: When developing an extension, you must be aware of what system and application
    object level is needed as a minimum requirement, as defined in the `dependency`
    parameter of the `app.json` file.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发扩展时，必须了解 `app.json` 文件中 `dependency` 参数定义的所需系统和应用对象级别的最低要求。
- en: Platform
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 平台
- en: Platform represents the results of the final compilation of the Dynamics 365
    Business Central platform components (client, server, web server, and so on).
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 平台表示 Dynamics 365 Business Central 平台组件（客户端、服务器、Web 服务器等）的最终编译结果。
- en: It is shown with the same notation as the application. Application and platform
    builds typically have a different build number, since platform code changes and
    application code changes are following different compilation paths and are merged
    together in the end.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 它以与应用程序相同的标记显示。应用程序和平台构建通常有不同的构建号，因为平台代码更改和应用程序代码更改遵循不同的编译路径，最终会合并在一起。
- en: When targeting a platform development, you must be aware of the minimum requirement
    that files and APIs should have to make use of the features, properties, and functions
    that they expose in order to avoid unpredictable behaviors from the application.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在针对平台开发时，必须了解文件和 API 的最低要求，以便能够利用它们暴露的特性、属性和功能，避免应用程序出现不可预测的行为。
- en: Runtime
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行时
- en: Runtime represents the results of the final compilation of the Dynamics 365
    Business Central AL Language extension file.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时表示 Dynamics 365 Business Central AL 语言扩展文件的最终编译结果。
- en: The notation is simpler and consists of a major, minor, and build version. For
    example, the Spring 2018 update (or the April 2018 update) is named major version
    1, while the Fall 2018 update (or the October 2018 update) is version 2, and so
    on. The current major version that targets the Dynamics 365 Business Central Fall
    2019 update is version 4.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 该标记法更简洁，由主要版本号、次要版本号和构建版本组成。例如，2018 年春季更新（或 2018 年 4 月更新）命名为主版本 1，而 2018 年秋季更新（或
    2018 年 10 月更新）是版本 2，以此类推。当前针对 Dynamics 365 Business Central 2019 年秋季更新的主要版本是版本
    4。
- en: When developing extensions, within the `app.json` file, you can define what
    runtime version the application is targeting. This enables or disables different
    sets of features that cannot be part of the target platform deployment, and the
    AL Language extension's runtime will detect that.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发扩展时，您可以在 `app.json` 文件中定义应用程序的目标运行时版本。这将启用或禁用不同的功能集，这些功能集不能成为目标平台部署的一部分，AL
    语言扩展的运行时将对此进行检测。
- en: 'The following table shows the `app.json` attributes:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了 `app.json` 属性：
- en: '| **Attribute** | **Mandatory** | **Description** |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| **属性** | **必需** | **描述** |'
- en: '| `Id` | Yes | **Global Unique Identifier** (**GUID**) of the extension. |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| `Id` | 是 | **全局唯一标识符**（**GUID**） |'
- en: '| `Name` | Yes | Extension name. |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| `Name` | 是 | 扩展名称。 |'
- en: '| `Publisher` | Yes | Publisher name. |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| `Publisher` | 是 | 发布者名称。 |'
- en: '| `Version` | Yes | Version of the extension package (for example, 1.0.0.0).
    |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| `Version` | 是 | 扩展包的版本（例如，1.0.0.0）。 |'
- en: '| `Brief` | No (Yes for AppSource) | Short description of the extension. |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| `Brief` | 否（对于 AppSource 是是） | 扩展的简短描述。 |'
- en: '| `Description` | No (Yes for AppSource) | Long and verbose description of
    the extension. |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| `Description` | 否（对于 AppSource 是是） | 扩展的长篇详细描述。 |'
- en: '| `privacyStatement` | No (Yes for AppSource) | URL to the privacy statement.
    |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| `privacyStatement` | 否（对于 AppSource 是是） | 隐私声明的 URL。 |'
- en: '| `EULA` | No (Yes for AppSource) | URL to the license terms and conditions
    for the app. |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| `EULA` | 否（对于 AppSource 是是） | 应用的许可条款和条件的 URL。 |'
- en: '| `Help` | No (Yes for AppSource) | URL to app helpdesk support. |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| `Help` | 否（对于 AppSource 是是） | 应用帮助台支持的 URL。 |'
- en: '| `url` | No (Yes for AppSource) | URL to the extension package''s home page.
    |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| `url` | 否（对于 AppSource 是是） | 扩展包主页的 URL。 |'
- en: '| `Logo` | No (Yes for AppSource) | Relative or full path to the app logo from
    the root directory of the extension |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| `Logo` | 否（对于 AppSource 是是） | 从扩展根目录到应用 logo 的相对路径或完整路径 |'
- en: '| `Dependencies` | Yes | List of dependencies from other extensions. Since
    the Fall 2019 update, it is mandatory to reference at least system application
    and base application extensions.  |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| `Dependencies` | 是 | 其他扩展的依赖项列表。从 2019 年秋季更新开始，必须至少引用系统应用程序和基础应用程序扩展。 |'
- en: '| `Screenshots` | No | Relative or absolute path to app screenshots. |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: '| `Screenshots` | 否 | 应用截图的相对路径或绝对路径。 |'
- en: '| `Platform` | Yes  | Minimum platform version supported (for example, 15.0.0.0).
    |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
  zh: '| `Platform` | 是 | 支持的最低平台版本（例如，15.0.0.0）。 |'
- en: '| `idRanges` | Yes | Range of application object IDs or an array of object
    ID ranges. |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| `idRanges` | 是 | 应用对象 ID 范围或对象 ID 范围的数组。 |'
- en: '| `showMyCode` | No | Enables viewing extension source code while debugging
    and/or downloading source code from the extension management page.Default value:
    `false`. |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| `showMyCode` | 否 | 在调试时启用查看扩展源代码和/或从扩展管理页面下载源代码。默认值：`false`。 |'
- en: '| `Target` | No | Default value: `Cloud`. Extension with the same font as Cloud.
    It''s one of the possible values for Target option (`Cloud` for the new version,
    `Extension` for the previous version).. These are the only two values allowed
    by Dynamics 365 Business Central SaaS.Set this value to `OnPrem` or `Internal`
    if you need to target the extension to on-premises. |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| `Target` | 否 | 默认值：`Cloud`。与 Cloud 相同字体的扩展。它是 Target 选项的两个可能值之一（新版本为 `Cloud`，旧版本为
    `Extension`）。这两个值是 Dynamics 365 Business Central SaaS 所允许的唯一值。如果需要将扩展定向到本地部署，请将该值设置为
    `OnPrem` 或 `Internal`。 |'
- en: '| `helpBaseUrl` | No | URL for the extension''s online help. |'
  id: totrans-304
  prefs: []
  type: TYPE_TB
  zh: '| `helpBaseUrl` | 否 | 扩展的在线帮助的 URL。 |'
- en: '| `contextSensitiveHelpUrl` | No (Yes for AppSource) | URL for the context-sensitive
    help for an AppSource extension. |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| `contextSensitiveHelpUrl` | 否（对于 AppSource 是是） | 针对 AppSource 扩展的上下文敏感帮助的
    URL。 |'
- en: '| `supportedLocales` | No | Comma-separated list of the local languages supported
    by the app. |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| `supportedLocales` | 否 | 应用支持的本地语言的逗号分隔列表。 |'
- en: '| `features` | No | Optional features in preview that could be enabled by the
    compiler. An example is `TranslationFile`. Adding this parameter flag in the features
    enables the generation of a directory called **Translations** in the extension
    folder and a `.xlf` translation file containing all the labels used in all extension
    objects. |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| `features` | 否 | 可由编译器启用的预览版可选特性。例如，`TranslationFile`。将此参数标记添加到特性中时，会在扩展文件夹中生成一个名为**Translations**的目录，并且会生成一个包含所有扩展对象中使用的标签的`.xlf`翻译文件。
    |'
- en: '| `Runtime` | No | Minimum runtime version targeted by the extension. |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| `Runtime` | 否 | 扩展所针对的最低运行时版本。 |'
- en: 'The following screenshot is an example of an `app.json` file:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图是一个`app.json`文件的示例：
- en: '![](img/b7680dcb-1845-4959-9cba-e5a1849f1386.png)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b7680dcb-1845-4959-9cba-e5a1849f1386.png)'
- en: With all of this information, we should now be able to master app configuration
    files and tweak them according to the runtime version. In the next section, we
    will introduce symbols and explain their vital importance in extension development.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些信息后，我们应该能够掌握应用程序配置文件，并根据运行时版本对其进行调整。在下一部分，我们将介绍符号并解释它们在扩展开发中的至关重要性。
- en: Understanding symbols
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解符号
- en: Like in all other languages, symbols represent references to a collection of
    standard objects, properties, and functions. They are a special extension file
    themselves with the typical `.app` naming convention and are used to maintain
    object reference consistency while compiling, and they also populate valid IntelliSense
    entries.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在所有其他语言中一样，符号表示对标准对象、属性和函数集合的引用。它们本身就是一个特殊的扩展文件，采用典型的`.app`命名规则，用于在编译时保持对象引用的一致性，同时还填充有效的IntelliSense条目。
- en: Symbols are typically stored inside the database in a BLOB field in JSON for
    each object record. It is worth mentioning that in multitenancy, the `Object Metadata`
    table is part of the application database, so in customer tenant databases there
    are no system symbols or metadata stored, only data.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 符号通常以JSON格式存储在数据库中的BLOB字段中，每个对象记录都有一个。值得一提的是，在多租户环境中，`Object Metadata`表是应用程序数据库的一部分，因此在客户租户数据库中不会存储系统符号或元数据，只有数据。
- en: 'With Dynamics 365 Business Central, symbols are already preloaded inside the
    application database, and these can be grouped into two classes:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在Dynamics 365 Business Central中，符号已经预先加载到应用程序数据库中，并且可以将它们分为两类：
- en: Standard symbols
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准符号
- en: Extension symbols
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展符号
- en: 'Prior to the Fall 2019 update, standard application symbols were all generated
    by Microsoft through a special compilation of standard legacy objects using the
    CSIDE development environment. The same happened for the on-premises version:
    symbols were generated asynchronously, or could have been imported as a normal
    extension through PowerShell scripts.'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在2019年秋季更新之前，标准应用程序符号都是通过微软使用CSIDE开发环境对标准遗留对象进行特殊编译生成的。对于本地版本，情况也是如此：符号是异步生成的，或者可以通过PowerShell脚本作为常规扩展导入。
- en: Standard application symbols were stored in the Symbol Reference BLOB field
    in the `Object Metadata` table.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 标准应用程序符号存储在`Object Metadata`表中的Symbol Reference BLOB字段中。
- en: 'Find out more on this topic by reading the following official reference:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 通过阅读以下官方参考文档，可以了解更多关于此主题的信息：
- en: '[https://docs.microsoft.com/it-it/dynamics365/business-central/dev-itpro/developer/devenv-running-cside-and-al-side-by-side](https://docs.microsoft.com/it-it/dynamics365/business-central/dev-itpro/developer/devenv-running-cside-and-al-side-by-side)'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/it-it/dynamics365/business-central/dev-itpro/developer/devenv-running-cside-and-al-side-by-side](https://docs.microsoft.com/it-it/dynamics365/business-central/dev-itpro/developer/devenv-running-cside-and-al-side-by-side)'
- en: 'The following table shows us the standard symbols. Understanding what they
    are and their importance is vital for the successful compilation and deployment
    of any kind of extension prior to the Fall 2019 update:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 下表展示了标准符号。在2019年秋季更新之前，了解这些符号及其重要性对成功编译和部署任何类型的扩展至关重要：
- en: '| Application | Contains symbols for all the application objects described
    in the CSIDE object designer, except system tables in the 2000000004 to 2000000199
    ID range and standard Test Toolkit objects. With an on-premises version or Docker-contained
    sandbox, if you''re making changes to a standard legacy object, you must opt for
    (re)generating symbols through the CSIDE development environment, as described
    in the following blog post:Generate Symbols in a Modern Development environment
    with Microsoft Dynamics NAV 2018 ([https://blogs.msdn.microsoft.com/nav/2018/01/16/generate-symbols-in-a-modern-development-environment-with-microsoft-dynamics-nav-2018/](https://blogs.msdn.microsoft.com/nav/2018/01/16/generate-symbols-in-a-modern-development-environment-with-microsoft-dynamics-nav-2018/)).With
    the upgraded on-premises version, symbols coming from earlier versions must be
    extracted from a standard on-premises database (or from the product DVD), imported
    in the upgrade database, and regenerated, as described in the following blog post:[https://blogs.msdn.microsoft.com/nav/2018/02/02/import-symbols-in-new-or-upgrade-databases-with-microsoft-dynamics-nav-2018/](https://blogs.msdn.microsoft.com/nav/2018/02/02/import-symbols-in-new-or-upgrade-databases-with-microsoft-dynamics-nav-2018/)
    |'
  id: totrans-323
  prefs: []
  type: TYPE_TB
  zh: '| 应用程序 | 包含CSIDE对象设计器中描述的所有应用程序对象的符号，除了2000000004到2000000199 ID范围内的系统表和标准测试工具对象。在本地版本或Docker沙盒中，如果你正在修改标准遗留对象，你必须选择通过CSIDE开发环境（重新）生成符号，正如以下博客文章中所述：[在现代开发环境中使用Microsoft
    Dynamics NAV 2018生成符号](https://blogs.msdn.microsoft.com/nav/2018/01/16/generate-symbols-in-a-modern-development-environment-with-microsoft-dynamics-nav-2018/)。在升级后的本地版本中，来自早期版本的符号必须从标准本地数据库（或产品DVD）中提取，导入到升级数据库中，并重新生成，正如以下博客文章中所述：[在新建或升级数据库中导入符号与Microsoft
    Dynamics NAV 2018](https://blogs.msdn.microsoft.com/nav/2018/02/02/import-symbols-in-new-or-upgrade-databases-with-microsoft-dynamics-nav-2018/)。
    |'
- en: '| System | Contains symbols for system tables in the 2000000004 to 2000000199
    ID range, and also virtual table definitions.System and virtual table structures
    cannot be modified through extensions.System and virtual table symbols cannot
    be regenerated.For this reason, if you are developing extensions, they should
    never be considered for any changes within the CSIDE development environment.
    |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
  zh: '| 系统 | 包含2000000004到2000000199 ID范围内的系统表符号，也包括虚拟表定义。系统和虚拟表结构无法通过扩展进行修改。系统和虚拟表符号无法重新生成。因此，如果你正在开发扩展，它们永远不应该在CSIDE开发环境中进行任何更改。
    |'
- en: '| Test | Contains symbols for application Test Toolkit objects. Standard application
    Test Toolkit object symbols cannot be regenerated. Developers should create their
    own test objects.For this reason, in a modern development environment for SaaS
    deployment, they should never be considered for any changes within the CSIDE development
    environment. |'
  id: totrans-325
  prefs: []
  type: TYPE_TB
  zh: '| 测试 | 包含应用程序测试工具对象的符号。标准应用程序测试工具对象的符号无法重新生成。开发人员应创建自己的测试对象。因此，在现代开发环境中进行SaaS部署时，它们永远不应在CSIDE开发环境中进行任何更改。
    |'
- en: 'Whenever you extend an application, you always need to have the appropriate
    symbols in place. You can achieve this in two ways:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你扩展一个应用程序时，你总是需要确保适当的符号到位。你可以通过两种方式实现这一点：
- en: 'Connect to a sandbox environment, run the Command Palette (*Ctrl* + *Shift*
    + *P*), and type and select `AL: Download Symbols`.'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '连接到沙盒环境，运行命令面板（*Ctrl* + *Shift* + *P*），然后输入并选择`AL: Download Symbols`。'
- en: Download the required symbols from another place (such as the product DVD, for
    on-premises deployment) and store them in the defined symbol storage directory.
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从其他地方（例如产品DVD，用于本地部署）下载所需的符号，并将其存储在定义的符号存储目录中。
- en: 'For on-premises deployment, you will find the `System.app` and `Test.app` symbols
    on the Dynamics 365 Business Central Spring 2019 product DVD in the following
    directory: `\ModernDev\program files\Microsoft Dynamics NAV\140\AL Development`
    `Environment`. In the Dynamics 365 Business Central Fall 2019 DVD you will only
    find `System.app` in the following directory: `\ModernDev\program files\Microsoft
    Dynamics NAV\150\AL Development Environment`. Since the Fall 2019 update, application
    and test symbols are no longer downloaded automatically by the AL Language runtime,
    and they no longer need to be stored inside the database, since all of the objects
    that belong to the application, including Test Toolkit ones, have been converted
    into AL objects. These AL objects are now part of standard extension packages.
    Extension packages contain symbols natively.'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本地部署，您将在 Dynamics 365 Business Central 2019 年春季版产品 DVD 中找到 `System.app` 和
    `Test.app` 符号，路径为：`\ModernDev\program files\Microsoft Dynamics NAV\140\AL Development`
    `Environment`。在 Dynamics 365 Business Central 2019 年秋季版 DVD 中，您只会在以下路径找到 `System.app`：`\ModernDev\program
    files\Microsoft Dynamics NAV\150\AL Development Environment`。自 2019 年秋季更新以来，AL
    语言运行时不再自动下载应用程序和测试符号，且这些符号不再需要存储在数据库内，因为所有属于应用程序的对象，包括 Test Toolkit 中的对象，已经转化为
    AL 对象。这些 AL 对象现在是标准扩展包的一部分。扩展包本身就包含符号。
- en: If you have a multiuser environment with developers that are working on the
    same staging tenant, you might think of downloading symbols through the Command
    Palette once and then setting a common path for storing the symbols for all users.
    In this way, it is possible to avoid downloading the same set of symbols every
    time, thereby increasing the development productivity.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个多用户环境，且开发人员在同一个暂存租户上工作，您可以考虑通过命令面板下载符号一次，然后为所有用户设置一个公共的符号存储路径。这样可以避免每次都下载相同的符号集，从而提高开发生产力。
- en: 'The default symbol-storing path can be changed using one of the following shortcuts:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的符号存储路径可以通过以下快捷键之一进行更改：
- en: From the Menu bar, go to File (*Alt* + *F*) | Preferences (*P*) | Settings (*S*)
    and then select AL Language settings.
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从菜单栏中，选择“文件”（*Alt* + *F*）| “首选项”（*P*）| “设置”（*S*），然后选择 AL 语言设置。
- en: Use the settings shortcuts (*Ctrl*) and then select AL Language settings.
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用设置快捷键（*Ctrl*），然后选择 AL 语言设置。
- en: 'The parameter to change is *Al: Package Cache Path*, the default value of which
    is set to the relative path, `./.alpackages`.'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '要更改的参数是 *Al: Package Cache Path*，其默认值设置为相对路径 `./.alpackages`。'
- en: 'Alternatively, you could run the Command Palette (*Ctrl* + *Shift* + *P*),
    type and select Preferences: Configure language specific settings…, then choose
    AL. The `settings.json` file will open, and you can then add or change the values
    of the `al.packageCachePath` parameter. The following screenshot shows the AL
    settings symbol path when it has been changed to a storage location:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '或者，您可以运行命令面板（*Ctrl* + *Shift* + *P*），输入并选择“Preferences: Configure language
    specific settings...”，然后选择 AL。`settings.json` 文件将打开，您可以在其中添加或更改 `al.packageCachePath`
    参数的值。下图显示了 AL 设置符号路径在更改为存储位置时的情况：'
- en: '![](img/c14ca852-89f4-4fd1-865c-7c4319f350eb.png)'
  id: totrans-336
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c14ca852-89f4-4fd1-865c-7c4319f350eb.png)'
- en: Later in this chapter, we will also discuss other AL Language configuration
    settings.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 本章后续将讨论其他 AL 语言配置设置。
- en: 'Together with system application extension, base application extension, and
    standard symbols, your extension might also depend on other custom or third-party
    extensions. These extensions, then, should emit symbols that you should be able
    to download from the application database when invoking AL: Download Symbols from
    the Command Palette.'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 结合系统应用扩展、基础应用扩展和标准符号，您的扩展可能还依赖于其他自定义或第三方扩展。然后，这些扩展应该会发出符号，您应该能够在调用 AL：从命令面板下载符号时从应用程序数据库中下载这些符号。
- en: Extension symbols are stored in the Symbols BLOB field in the `NAV App` table.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展符号存储在 `NAV App` 表的 Symbols BLOB 字段中。
- en: 'To specify that your extension has a dependency on another extension(s), you
    must populate the relevant JSON array parameter in the `app.json` file. This is
    what the `app.json` file parameter looks like for an extension that depends on
    two other apps:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 要指定您的扩展依赖于另一个扩展，您必须在 `app.json` 文件中填充相关的 JSON 数组参数。下面是一个依赖于两个其他应用的扩展在 `app.json`
    文件中的参数示例：
- en: '[PRE0]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you have installed the CRS AL language Extension toolbox from Cloud Ready
    Software ([https://marketplace.visualstudio.com/items?itemName=waldo.crs-al-language-extension](https://marketplace.visualstudio.com/items?itemName=waldo.crs-al-language-extension)
    ), you could type `tdependency` to enable the code snippet to easily edit each
    JSON array element for this parameter. This will make your coding faster and prevent
    syntax errors. We will discuss the standard and custom code snippet features in
    the last section of this chapter.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经从 Cloud Ready Software 安装了 CRS AL Language Extension 工具箱（[https://marketplace.visualstudio.com/items?itemName=waldo.crs-al-language-extension](https://marketplace.visualstudio.com/items?itemName=waldo.crs-al-language-extension)），你可以输入
    `tdependency` 来启用代码片段，轻松编辑该参数的每个 JSON 数组元素。这将加快你的编码速度，防止语法错误。在本章最后一节中，我们将讨论标准和自定义代码片段的功能。
- en: The version parameter of the dependent extension(s) represents the lower bound
    for the compiler to accept the symbols. In other words, symbol versions of the
    dependent extension lower than the one reported are not considered valid for download
    or compile operations.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖扩展的版本参数表示编译器接受符号的最低要求。换句话说，低于报告版本的依赖扩展符号不被认为是有效的，无法下载或编译。
- en: Inside symbols
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 符号内部
- en: Symbols are the result of a compression (`.zip`) operation of several files
    that are used by the AL Language extension. To demonstrate what is under the hood,
    just use the most common decompression tool (for example, 7-zip) to extract their
    content after renaming the `.app` package with the `.navx` extension.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 符号是多个文件的压缩（`.zip`）操作的结果，这些文件由 AL Language 扩展使用。为了展示其内部原理，只需使用最常见的解压工具（例如 7-zip）在将
    `.app` 包重命名为 `.navx` 扩展名后提取其内容。
- en: 'The following tables show the standard symbol components (files and directories)
    for the base application extension:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了基础应用程序扩展的标准符号组件（文件和目录）：
- en: '| **File name** | **Description** |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
  zh: '| **文件名** | **描述** |'
- en: '| `[Content_Types.xml]` | Specify the content of the package: XML and JSON
    files. |'
  id: totrans-348
  prefs: []
  type: TYPE_TB
  zh: '| `[Content_Types.xml]` | 指定包的内容：XML 和 JSON 文件。 |'
- en: '| `MediaIdListing.xml` | Specify the extension logo filename and its ID.  |'
  id: totrans-349
  prefs: []
  type: TYPE_TB
  zh: '| `MediaIdListing.xml` | 指定扩展标志文件名及其 ID。 |'
- en: '| `navigation.xml` | It contains an entry for the Departments menu. |'
  id: totrans-350
  prefs: []
  type: TYPE_TB
  zh: '| `navigation.xml` | 包含部门菜单的条目。 |'
- en: '| `NavxManifest.xml` | It will report the manifest for the standard symbol
    or extension. The most relevant parameters for the base application symbols are
    as follows:`- version`: Identify the application version of the JSON file (such
    as 15.0.36626.36675)`- platform`: Target the recommended major platform version
    that''s compatible with these symbols (such as 15.0.0.0)`- runtime`: Recommended
    runtime version to be used for these symbols (such as 4.0)System symbols typically
    only specify the version and the runtime. |'
  id: totrans-351
  prefs: []
  type: TYPE_TB
  zh: '| `NavxManifest.xml` | 它将报告标准符号或扩展的清单。基础应用程序符号的最相关参数如下：`- version`：标识 JSON
    文件的应用程序版本（如 15.0.36626.36675）`- platform`：目标推荐的与这些符号兼容的主要平台版本（如 15.0.0.0）`- runtime`：建议用于这些符号的运行时版本（如
    4.0）系统符号通常只指定版本和运行时。 |'
- en: '| `SymbolReference.json` | Contains all references in JSON notation to AL objects.These
    JSON files are heavily used by the AL Language extension to maintain reference
    integrity while compiling/building the app package and to enable all IntelliSense-related
    features.Basically, it is structured as an array containing a list of valid AL
    object parameters, as shown in the following snippet:`"Tables": [],``  "Codeunits":
    [],``  "Pages": [],``  "PageExtensions": [],`For each of these object elements,
    there are specified fields, properties, functions, and so on. |'
  id: totrans-352
  prefs: []
  type: TYPE_TB
  zh: '| `SymbolReference.json` | 包含所有 AL 对象的 JSON 格式引用。这些 JSON 文件被 AL Language 扩展广泛使用，用于在编译/构建应用程序包时保持引用完整性，并启用所有与
    IntelliSense 相关的功能。基本上，它的结构是一个数组，包含有效 AL 对象参数的列表，如下所示：`"Tables": [],`` "Codeunits":
    [],`` "Pages": [],`` "PageExtensions": []`对于这些对象元素，每个都有指定的字段、属性、函数等。 |'
- en: Symbol JSON files cannot be hacked/changed to manually generate or modify a
    symbol file.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 符号 JSON 文件不能被篡改/更改以手动生成或修改符号文件。
- en: 'Next, let''s also have a look at what the various directories do:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们还将看看不同目录的作用：
- en: '| **Directory name** | **Content description** |'
  id: totrans-355
  prefs: []
  type: TYPE_TB
  zh: '| **目录名称** | **内容描述** |'
- en: '| `addin` | Controls add-ins definitions. |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
  zh: '| `addin` | 控制插件定义。 |'
- en: '| `layout` | RDL and DOCX report layouts. |'
  id: totrans-357
  prefs: []
  type: TYPE_TB
  zh: '| `layout` | RDL 和 DOCX 报告布局。 |'
- en: '| `logo` | Extension logo. |'
  id: totrans-358
  prefs: []
  type: TYPE_TB
  zh: '| `logo` | 扩展标志。 |'
- en: '| `ProfileSymbolReferences` | Symbols for profiles and related page customizations.
    |'
  id: totrans-359
  prefs: []
  type: TYPE_TB
  zh: '| `ProfileSymbolReferences` | 配置文件符号和相关页面自定义的符号。 |'
- en: '| `src` | AL files. Their content is used typically to show the code while
    debugging. |'
  id: totrans-360
  prefs: []
  type: TYPE_TB
  zh: '| `src` | AL文件。其内容通常用于在调试时显示代码。 |'
- en: '| `Translations` | Translation files in the XLIFF format. |'
  id: totrans-361
  prefs: []
  type: TYPE_TB
  zh: '| `Translations` | XLIFF格式的翻译文件。 |'
- en: Symbols are the beating heart of the extension validation mechanism and, as
    shown in the previous tables, they also carry out the code (if the `showmycode`
    parameter has been set to true in the extension `app.json` file).
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 符号是扩展验证机制的核心，正如之前的表格所示，它们还执行代码（如果在扩展的`app.json`文件中将`showmycode`参数设置为true的话）。
- en: Based on AL symbols, in the Visual Studio Code marketplace you could find very
    useful extensions that are targeting AL development environments.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 AL 符号，你可以在 Visual Studio Code 市场中找到非常有用的扩展，这些扩展专门针对 AL 开发环境。
- en: 'The most commonly used ones are as follows:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的配置项如下：
- en: AL Object Designer by Marton Sagi
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Marton Sagi的AL对象设计器
- en: AZ AL Dev Tools/AL Code Outline by Andrzej Zwierzchowski
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Andrzej Zwierzchowski的AZ AL开发工具/AL代码大纲
- en: Both are very easy to use and are useful for inspecting symbols and their content.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 两者都非常易于使用，并且对检查符号及其内容非常有用。
- en: After learning about symbols, we have completed an overview of the main items
    that are needed to build an app. Let's have a look now at AL Language extension
    configuration, and how to set them up in order to have a more productive development
    environment.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了符号之后，我们已经完成了构建应用所需的主要内容的概述。接下来，让我们看看AL语言扩展配置，了解如何配置它们以创建更高效的开发环境。
- en: Understanding AL Language extension configuration
  id: totrans-369
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 AL 语言扩展配置
- en: 'General and per workspace settings can be easily shown through the shortcut
    key, *Ctrl*+. An intuitive menu will be shown, and by selecting Extension | AL
    language extension configuration, a set of configuration parameters is listed.
    The following screenshot shows the AL Language extension configuration parameters:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过快捷键 *Ctrl*+ 来轻松查看常规设置和每个工作区设置。会弹出一个直观的菜单，选择“扩展 | AL语言扩展配置”，即可列出一系列配置参数。以下截图显示了AL语言扩展配置参数：
- en: '![](img/e292a06b-c8f1-4464-b78c-0731b5fcc917.png)'
  id: totrans-371
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e292a06b-c8f1-4464-b78c-0731b5fcc917.png)'
- en: Basically, these configuration values are saved into a file called `settings.json`.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，这些配置值保存在一个名为`settings.json`的文件中。
- en: 'The following is a list of the description and values of the most common ones:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是常见配置项的描述和值：
- en: 'For the following Path parameters:'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于以下路径参数：
- en: '`"al.packageCachePath": "./.alpackages"`: It is possible to change the default
    value to a local folder or to a shared folder for multi-developer environments.
    It represents the path to store and look for symbols.'
  id: totrans-375
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"al.packageCachePath": "./.alpackages"`：可以将默认值更改为本地文件夹或多开发者环境下的共享文件夹。它表示存储和查找符号的路径。'
- en: '`"al.assemblyProbingPaths": ["./.netpackages"]`: This parameter is fundamental
    to compiling extensions when there are references to external assemblies. Its
    data type is a JSON array, so the developer has to specify a comma-separated list
    of paths where the assemblies are stored.'
  id: totrans-376
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"al.assemblyProbingPaths": ["./.netpackages"]`：这个参数在编译扩展时至关重要，特别是当存在外部程序集引用时。它的数据类型是JSON数组，因此开发者需要指定一个以逗号分隔的路径列表，表示程序集存储的位置。'
- en: '`"al.ruleSetPath": null`: This is used if developers would like to provide
    a custom override of standard code analyzer rules. It will be discussed in more depth
    in [Chapter 9](076505ca-e2a0-40ab-8640-c720c9aa68ee.xhtml), *Debugging*.'
  id: totrans-377
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"al.ruleSetPath": null`：如果开发者希望提供自定义的标准代码分析器规则覆盖，可以使用此设置。它将在[第9章](076505ca-e2a0-40ab-8640-c720c9aa68ee.xhtml)
    *调试*中进行详细讨论。'
- en: 'For the following Code Analyzer parameters:'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于以下代码分析器参数：
- en: '`"al.enableCodeAnalysis": false`: This helps to enable code analysis and is
    discussed in more depth in [Chapter 9](076505ca-e2a0-40ab-8640-c720c9aa68ee.xhtml),
    *Debugging*. In large projects, with several thousands of objects, it would be
    better if it was turned off, in order to prevent performance issues while coding
    or compiling.'
  id: totrans-379
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"al.enableCodeAnalysis": false`：此设置用于启用代码分析，具体内容将在[第9章](076505ca-e2a0-40ab-8640-c720c9aa68ee.xhtml)
    *调试*中详细讨论。在大型项目中，若有数千个对象，建议关闭此功能，以避免在编码或编译过程中出现性能问题。'
- en: '`"al.codeAnalyzers": []`: This has the type of code analyzers. It will be discussed
    in more depth in [Chapter 9](076505ca-e2a0-40ab-8640-c720c9aa68ee.xhtml), *Debugging*.'
  id: totrans-380
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"al.codeAnalyzers": []`：这是代码分析器的类型。其详细内容将在[第9章](076505ca-e2a0-40ab-8640-c720c9aa68ee.xhtml)
    *调试*中进一步探讨。'
- en: '`"al.enableCodeActions": false`: Enables code actions such as automatically
    converting multiple `if` statements to a `CASE` statement or spell check. It is
    disabled by default.'
  id: totrans-381
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"al.enableCodeActions": false`：启用代码操作，如自动将多个`if`语句转换为`CASE`语句或拼写检查。默认情况下该功能为禁用状态。'
- en: '`"al.backgroundCodeAnalysis": true`: This is enabled by default. In large projects,
    this could be a real performance killer, and it is recommended that it is turned
    off in such scenarios.'
  id: totrans-382
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"al.backgroundCodeAnalysis": true`：默认启用。在大型项目中，这可能会对性能造成严重影响，建议在此类场景中关闭此功能。'
- en: 'For the following Compilation parameters:'
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于以下**编译**参数：
- en: '`"al.compilationOptions": {"generateReportLayout": true, "parallel": true}`:
    Used to specify if a report layout should be generated or not when compiling,
    if it does not exist, and to have a serialized or parallel build of the package.'
  id: totrans-384
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"al.compilationOptions": {"generateReportLayout": true, "parallel": true}`：用于指定在编译时是否生成报告布局（如果报告布局不存在），以及是否对包进行串行或并行构建。'
- en: '`"al.incrementalBuild": false`: In complex extension development environments,
    where multiple extension folders are loaded from a root folder, this parameter
    specifies if the reference resolution will happen from the referenced project,
    instead of happening from the symbols that are stored in the package cache path.
    Switching this parameter to true will result in an increase in performance in
    such scenarios.'
  id: totrans-385
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"al.incrementalBuild": false`：在复杂的扩展开发环境中，如果从根文件夹加载多个扩展文件夹，则此参数指定是否从引用的项目中进行引用解析，而不是从存储在包缓存路径中的符号中进行解析。将此参数切换为true会在此类场景中提高性能。'
- en: 'For the following Service Log parameters:'
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于以下**服务日志**参数：
- en: '`"al.editorServicesLogLevel": null`: This is very useful for debugging situations
    where compilation reports unhandled errors or crashes. Logging could include errors
    up to a very verbose description of what is happening behind the scenes. It will
    be discussed more in deep in [Chapter 9](076505ca-e2a0-40ab-8640-c720c9aa68ee.xhtml),
    *Debugging*.'
  id: totrans-387
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"al.editorServicesLogLevel": null`：这对于调试编译报告中未处理的错误或崩溃的情况非常有用。日志可能包含错误，甚至详细描述发生在后台的过程。将会在[第9章](076505ca-e2a0-40ab-8640-c720c9aa68ee.xhtml)中更深入地讨论，*调试*部分。'
- en: '`"al.editorServicesPath": "bin/"`: If the service log is enabled, it determines
    the log path.'
  id: totrans-388
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"al.editorServicesPath": "bin/"`：如果启用了服务日志，则决定日志路径。'
- en: 'For the following Browser parameters:'
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于以下**浏览器**参数：
- en: '`"al.browser": "Edge"`: Choose your preferred browser to launch your Dynamics
    365 Business Central application from Visual Studio Code. Options are SystemDefault,
    Edge, Chrome, or Firefox. This is useful if you have multiple browsers installed.'
  id: totrans-390
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"al.browser": "Edge"`：选择首选浏览器，从Visual Studio Code启动Dynamics 365 Business Central应用程序。选项包括SystemDefault、Edge、Chrome或Firefox。如果安装了多个浏览器，则此选项非常有用。'
- en: '`"al.incognito": false`: Choose to start the browser in a normal session that
    stores existing credentials or use private/incognito browsing.'
  id: totrans-391
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"al.incognito": false`：选择以正常会话启动浏览器，该会话存储现有的凭证，或使用私人/隐身浏览。'
- en: 'After exploring the core settings that are needed to develop an extension,
    let''s analyze one of the best code-editing features that is provided with AL
    Language: code snippets.'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索了开发扩展所需的核心设置之后，让我们分析一下AL语言提供的最佳代码编辑功能之一：代码片段。
- en: Mastering AL Language code snippets
  id: totrans-393
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精通AL语言代码片段
- en: AL Language standard code snippets in Visual Studio Code are available after
    installing the AL Language extension. These are triggered as you type within the
    code editor, and you can recognize them by a squared prefix symbol.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 安装AL语言扩展后，Visual Studio Code中提供了AL语言标准代码片段。这些片段会在你在代码编辑器中输入时触发，你可以通过方框前缀符号识别它们。
- en: Typically, they start with the letter `t` and are followed by a meaningful name
    that describes what the snippet is about, for example, `ttable` or `tpage`. A
    tooltip shows a preview of the code snippet.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，它们以字母`t`开头，后跟一个有意义的名称，用以描述代码片段的内容，例如`ttable`或`tpage`。悬浮提示显示代码片段的预览。
- en: 'The following screenshot shows the standard snippet for an if-then-else conditional
    sentence:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了一个if-then-else条件语句的标准代码片段：
- en: '![](img/1623b328-1ca2-46c8-b716-0bbf99fa40da.png)'
  id: totrans-397
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1623b328-1ca2-46c8-b716-0bbf99fa40da.png)'
- en: Notice that if the snippet contains variable names or code identifiers, they
    could be highlighted, suggesting that you should give them a different name and
    that they act as a sort of placeholder. When you rename a highlighted identifier,
    all occurrences will be also renamed, making snippet usage very flexible. This
    will not only reduce coding time, preventing writing or copying and pasting repeating
    sentences, but it also uses the appropriate complex structure syntax that a developer
    might not keep in mind.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果代码片段包含变量名或代码标识符，它们可能会被高亮显示，提示你应该为其指定不同的名称，并且它们充当某种占位符。当你重命名一个被高亮的标识符时，所有该标识符的出现位置也会被重命名，这使得代码片段的使用非常灵活。这不仅会减少编码时间，避免写或复制粘贴重复的语句，还能使用开发者可能忽略的复杂结构语法。
- en: It is possible to download code snippets that have been produced by other developers
    in the form of extensions directly from the Visual Studio marketplace. Typically,
    many of the extensions that extend support for AL Language also include a series
    of code snippets of their own.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 可以直接从 Visual Studio 市场下载由其他开发者制作的代码片段，形式为扩展。通常，许多扩展程序会扩展 AL 语言的支持，并附带一系列自己的代码片段。
- en: A typical example is the free CRS AL Language extension.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的例子是免费的 CRS AL 语言扩展。
- en: Together with several very useful developer tools, this extension also implements
    a set of AL code snippets that integrate with and enrich the existing standard
    ones. Currently, it implements 68 extra AL code snippets, and the list is growing
    with every extension update.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 除了几个非常有用的开发者工具外，这个扩展还实现了一组与现有标准片段集成并丰富它们的 AL 代码片段。目前，它实现了68个额外的 AL 代码片段，并且随着每次扩展更新，列表还在不断增长。
- en: 'The following screenshot shows all the available extra snippets that appear
    if you type CRS in an `.al` file:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了如果你在 `.al` 文件中输入 CRS 时，所有可用的额外代码片段：
- en: '![](img/2063ec22-341a-43e3-ae8d-9be56b4556c4.png)'
  id: totrans-403
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2063ec22-341a-43e3-ae8d-9be56b4556c4.png)'
- en: Another way to search for code snippets while coding is to run the Command Palette
    (*Ctrl* + *Shift* + *P*) and then type snippet or insert snippet to bring up a
    drop-down list of the AL snippets that are available.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个在编码时搜索代码片段的方法是运行命令面板 (*Ctrl* + *Shift* + *P*)，然后输入 snippet 或 insert snippet
    来调出一个下拉列表，显示可用的 AL 代码片段。
- en: 'The following screenshot shows the drop-down list of AL snippets from the Command
    Palette:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了来自命令面板的 AL 代码片段下拉列表：
- en: '![](img/438bb2db-46b4-4c30-aa5a-c0d6aeaaee32.png)'
  id: totrans-406
  prefs: []
  type: TYPE_IMG
  zh: '![](img/438bb2db-46b4-4c30-aa5a-c0d6aeaaee32.png)'
- en: If you still did not find the code snippets that are useful to you in the marketplace,
    with Visual Studio Code it is also possible to manually add new code snippets
    from scratch. To accomplish this, you have to click on the Menu bar and go to
    File (*Alt* + *F*) | Preferences (*P*) | User Snippets (*S + S*)***.***
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仍然没有在市场中找到对你有用的代码片段，使用 Visual Studio Code 你也可以手动从零开始添加新的代码片段。要做到这一点，你需要点击菜单栏并进入
    文件 (*Alt* + *F*) | 首选项 (*P*) | 用户代码片段 (*S + S*)***.***
- en: The shortcut sequence, *Alt* + *F*, *P*, *S*, *S*, *Enter* will bring you straight
    there without needing to use the mouse.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 快捷键序列 *Alt* + *F*，*P*，*S*，*S*，*Enter* 可以直接将你带到那里，而无需使用鼠标。
- en: You can then select whether to create a global snippet for all languages, a
    local snippet for the current workspace, or one that's specific for a target language.
    In this example, we will create a new snippet to be used with AL Language files
    by choosing al (AL) from the language list.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以选择是为所有语言创建一个全局代码片段，还是为当前工作区创建一个本地代码片段，或者为特定目标语言创建一个片段。在这个例子中，我们将选择从语言列表中选择
    al (AL)，创建一个新的代码片段以供 AL 语言文件使用。
- en: 'The following screenshot shows the available options when creating a specific
    code snippet:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了创建特定代码片段时的可用选项：
- en: '![](img/e66e468e-6db6-4a4d-9973-9f74ba95e6ab.png)'
  id: totrans-411
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e66e468e-6db6-4a4d-9973-9f74ba95e6ab.png)'
- en: 'If you have enabled the breadcrumb feature, you might have noticed that a specific
    configuration file is open in editing mode for custom AL Language snippets. Typically,
    the file is called `al.json`, and it is stored in the following location:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你启用了面包屑功能，可能已经注意到一个特定的配置文件处于编辑模式，用于自定义 AL 语言代码片段。通常，这个文件叫做 `al.json`，并存储在以下位置：
- en: '[PRE1]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Each snippet is defined by a unique name and is composed of three elements:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 每个代码片段由一个独特的名称定义，并由三个元素组成：
- en: '**Prefix**: Used to search and trigger the snippet in the editor'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**前缀**：用于在编辑器中搜索并触发代码片段'
- en: '**Body**: The section that is pasted inside the editor'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主体**：粘贴到编辑器中的部分'
- en: '**Description**: A verbose description of what the snipper is for'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述**：对代码片段功能的详细描述'
- en: 'Inside the body, you could use a specific syntax to enable placeholders:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码块内，你可以使用特定的语法来启用占位符：
- en: '`$1`, `$2`, `$3`, `…`, `$n` are used to move the cursor position within the
    snippet by pressing the Tab key.'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$1`、`$2`、`$3`、`…`、`$n` 用于通过按下 Tab 键来移动代码片段中的光标位置。'
- en: '`$0` is used as the final cursor position.'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$0` 用作最终的光标位置。'
- en: '`${1:labelX}`, `${2:labelY}`, and `${3:labelZ}` are used for placeholders.
    Placeholders with the same IDs are connected to each other, enabling the multiple
    cursors feature.'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`${1:labelX}`、`${2:labelY}` 和 `${3:labelZ}` 用作占位符。具有相同 ID 的占位符会相互关联，从而启用多个光标功能。'
- en: Now, we'll go through a simple example.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将通过一个简单的示例进行演示。
- en: Imagine that you would like to add a standard code header block on top of the
    object, like it was in the old designer (the CSIDE development environment), and
    you need a smart way to implement this repeatedly and quickly on every object.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想在对象顶部添加一个标准的代码头块，就像在旧版设计器（CSIDE 开发环境）中一样，并且你需要一个智能的方式，在每个对象上快速且重复地实现这一功能。
- en: 'The easiest solution is to create an ad hoc custom snippet to be invoked on
    every new object file creation, as follows:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的解决方案是创建一个特定的自定义代码片段，在每次新建对象文件时调用，如下所示：
- en: 'Add the following code to the `al.json` file and save it:'
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到 `al.json` 文件中并保存：
- en: '[PRE2]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can enable the amazing autosave feature by simply going to the Menu bar
    and selecting File (*Alt *+ *F*) | Auto Save (*U*). A check mark will appear beside
    the Auto Save menu item. Another way to accomplish this task is to run the Command
    Palette (*Ctrl* + *Shift* + *P*) and type `File: Toggle Auto Save` (or type part
    of it and select the entry from the drop-down action list).'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '你可以通过简单地进入菜单栏并选择 文件（*Alt* + *F*）| 自动保存（*U*）来启用惊人的自动保存功能。自动保存菜单项旁会出现一个勾选标记。另一种方法是运行命令面板（*Ctrl*
    + *Shift* + *P*），然后输入 `File: Toggle Auto Save`（或者输入其中一部分并从下拉列表中选择该条目）。'
- en: Create a new file inside your extension and save it with the `.al` extension (for
    example, `MyCodeunit.al`). The cursor should be automatically positioned in the
    first line and column of the file.
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的扩展中创建一个新文件，并将其保存为 `.al` 扩展名（例如，`MyCodeunit.al`）。光标应该会自动定位到文件的第一行和第一列。
- en: Start typing `tcomment` and IntelliSense will detect the existence of your custom
    snippet. Select it.
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始输入 `tcomment`，IntelliSense 将检测到你自定义代码片段的存在。选择它。
- en: The cursor will be placed in the first placeholder element. Just type the current
    date in the `YY.MM.DD` format and press Tab. You might notice that since two placeholders
    share the same ID, they are edited together, enabling the multiple cursor feature.
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 光标将定位到第一个占位符元素。只需输入当前日期（格式为 `YY.MM.DD`），然后按 Tab。你可能会注意到，由于两个占位符共享相同的 ID，它们会一起编辑，从而启用多个光标功能。
- en: Now, it is time to write down something useful that is related to the object
    description, and what it is for.
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，是时候写下与对象描述相关的有用信息，说明它的用途。
- en: 'The following screenshot shows the custom comment block snippet in action with
    multiple cursors:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了带有多个光标的自定义注释块代码片段的实际应用：
- en: '![](img/218bb777-f46d-4d80-8416-6fd7f3941407.png)'
  id: totrans-433
  prefs: []
  type: TYPE_IMG
  zh: '![](img/218bb777-f46d-4d80-8416-6fd7f3941407.png)'
- en: These code snippets make it easy to understand Visual Studio Code. Try them
    out and master them!
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 这些代码片段使理解 Visual Studio Code 变得更加简单。试试看，掌握它们吧！
- en: Summary
  id: totrans-435
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Visual Studio Code is a code-centric tool that supports, out of the box, a wide
    variety of languages, providing coding features such as syntax colorization, delimiter
    matching, code block folding, multiple cursors, code snippets, IntelliSense, and
    so much more.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code 是一个以代码为中心的工具，开箱即用支持多种语言，提供诸如语法着色、分隔符匹配、代码块折叠、多光标、代码片段、IntelliSense
    等编程功能，还有更多功能。
- en: By installing the AL Language extension, this modern development environment
    is fully set up as an app playground for beginner and skilled developers. We have
    unleashed some tips and tricks in this chapter that enable you to be proficient
    in the developer's daily work of creating modern apps for Dynamics 365 Business
    Central.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 通过安装 AL 语言扩展，这个现代化的开发环境已完全设置好，成为初学者和有经验开发者的应用沙盒。在本章中，我们释放了一些技巧和窍门，使你能够熟练掌握开发人员日常工作，快速为
    Dynamics 365 Business Central 创建现代应用。
- en: We then moved on to learn about the powerful coding features that this modern
    development environment offers. After all of this, it is time to see the AL Language
    in action throughout this book. But before moving to structured and advanced extension
    development, it is important to understand how to implement and maintain a sandbox/staging
    environment. This is what we will do in the next chapter.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，我们开始学习这个现代开发环境所提供的强大编码功能。所有这些学习结束后，是时候在本书中看到 AL 语言的实际应用了。但是，在进入结构化和高级扩展开发之前，了解如何实现和维护一个沙箱/预发布环境是很重要的。这正是我们在下一章要做的内容。
