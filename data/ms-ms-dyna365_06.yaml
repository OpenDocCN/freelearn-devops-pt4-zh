- en: Extension Development Fundamentals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展开发基础
- en: In the previous chapter, we had an overview of the new Modern Development Environment
    and we learned how to start a new Dynamics 365 Business Central extension project
    by using the AL Language extension and the Modern Development Environment.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们概述了新的现代开发环境，并且学习了如何使用AL语言扩展和现代开发环境启动一个新的Dynamics 365 Business Central扩展项目。
- en: 'In this chapter, we''ll examine the details of the objects of the new extension''s
    development model and how to create new objects with AL, extend standard objects,
    and handle an AL extension project. More specifically, we''ll cover the following
    topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将详细探讨新扩展开发模型中的对象，并讲解如何使用AL创建新对象、扩展标准对象，以及如何处理AL扩展项目。更具体地说，我们将涵盖以下主题：
- en: The basics of extension development
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展开发基础
- en: An overview of the main AL objects
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AL对象的概述
- en: How to create basic objects in an extension project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在扩展项目中创建基本对象
- en: Best practices for handling your AL project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理AL项目的最佳实践
- en: Guidelines for AL objects
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AL对象指南
- en: By the end of this chapter, you will have learned about the different AL object
    types, as well as how to create and use them, and (more generally speaking) you
    will be ready to start a Dynamics 365 Business Central extension project with
    the AL Language extension and the Modern Development Environment (Visual Studio
    Code).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，你将了解不同的AL对象类型，如何创建和使用它们，并且（更广泛地说）你将准备好开始一个Dynamics 365 Business Central扩展项目，使用AL语言扩展和现代开发环境（Visual
    Studio Code）。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow this chapter and in order to experiment with basic object creation
    in the AL Language, you will need the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟随本章内容并实验AL语言中的基本对象创建，你将需要以下内容：
- en: A Microsoft Dynamics 365 Business Central sandbox environment (locally installed
    on a Docker container or an online one)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Dynamics 365 Business Central沙箱环境（本地安装在Docker容器中或在线环境）
- en: Visual Studio Code
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code
- en: The AL Language extension, which can be installed from the Visual Studio Code
    marketplace
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AL语言扩展，可以从Visual Studio Code市场安装
- en: Basic concepts regarding extensions
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于扩展的基本概念
- en: As you already know, with Microsoft Dynamics 365 Business Central SaaS, you
    don't have access to the database or to the standard base code (this is different
    in the on-premise version, where you can still have access to the base code, and
    modifying that core is your responsibility). In the SaaS world, you cannot alter
    the database schema and cannot alter the standard business logic.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你已经知道的，在Microsoft Dynamics 365 Business Central SaaS中，你无法访问数据库或标准的基础代码（这在本地版本中有所不同，在本地版本中你仍然可以访问基础代码，并且修改该核心是你的责任）。在SaaS世界中，你无法更改数据库架构，也不能修改标准的业务逻辑。
- en: 'In the previous versions of the Microsoft Dynamics ERP, we have always talked
    about *code modification*. In the SaaS world, we have to start thinking about
    a new concept: *code extension*. To customize Dynamics 365 Business Central, you
    have to create **extensions**.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在以前版本的Microsoft Dynamics ERP中，我们一直在讨论*代码修改*。在SaaS世界中，我们必须开始思考一个新概念：*代码扩展*。要自定义Dynamics
    365 Business Central，你必须创建**扩展**。
- en: An extension (according to Microsoft's guidelines) is defined as *an installable
    feature built in a way that it does not directly alter source resources and that
    is distributed as a preconfigured package*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展（根据微软的指南）被定义为*一种可安装的功能，其构建方式不会直接改变源资源，并且以预配置包的形式分发*。
- en: 'An extension interacts with the standard base code by using *events*. The following
    diagram shows how events interact between the different layers in a Dynamics 365
    Business Central extension:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展通过使用*事件*与标准基础代码进行交互。以下图示展示了在Dynamics 365 Business Central扩展中的不同层次之间如何进行事件交互：
- en: '![](img/0b0b9898-b8e8-4931-8fcb-3286f7eeed49.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b0b9898-b8e8-4931-8fcb-3286f7eeed49.png)'
- en: An event is essentially a function that is triggered by code when something
    happens in the business process. This function is normally defined as the *event
    publisher* function. It comprises only a signature and does not execute any code.
    The object that contains the event publisher function is defined as the *publisher*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 事件本质上是一个由代码触发的函数，当业务流程中发生某些事情时该函数会被调用。这个函数通常定义为*事件发布者*函数。它仅包含一个签名，并不会执行任何代码。包含事件发布者函数的对象被定义为*发布者*。
- en: 'In Dynamics 365 Business Central, events are classified according to the following
    types:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在Dynamics 365 Business Central中，事件根据以下类型进行分类：
- en: '**Database events**: These are events that are automatically raised by the
    system during database operations on a table object (such as insert, modify, delete,
    and rename).'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库事件**：这些是在对表对象进行数据库操作（如插入、修改、删除和重命名）时由系统自动触发的事件。'
- en: '**Page events**: These are events that are automatically raised by the system
    during operations in a page object.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**页面事件**：这些是在页面对象中执行操作时由系统自动触发的事件。'
- en: '**Business events**: These are custom events that are raised by C/AL code.
    A business event defines a formal contract with an implicit promise not to change
    in future application releases.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**业务事件**：这些是由 C/AL 代码触发的自定义事件。业务事件定义了一个正式契约，并隐含承诺在未来的应用程序版本中不进行更改。'
- en: '**Integration events**: These are custom events that are raised by C/AL code.
    They are similar to business events but they can change their signature in future
    releases of the application.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成事件**：这些是由 C/AL 代码触发的自定义事件。它们与业务事件类似，但在应用程序的未来版本中，它们的签名可能会发生变化。'
- en: '**Global events**: These are system events that are raised by the application.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全局事件**：这些是由应用程序触发的系统事件。'
- en: When an event is published and raised by code, it is available in the application
    for subscriptions. A *subscriber* is a code function that listens for and handles
    a published event. It subscribes to a specific event publisher function and handles
    the event by adding custom business logic to it. When the application raises an
    event, the subscriber function is automatically called and its code is executed.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当事件被发布并由代码触发时，它将可供应用程序订阅。*订阅者*是一个代码功能，它监听并处理已发布的事件。它订阅一个特定的事件发布器功能，并通过向其中添加自定义业务逻辑来处理该事件。当应用程序触发事件时，订阅者功能会自动被调用，并执行其代码。
- en: Remember that you can have multiple subscribers to a single event publisher
    function. In this case, the order of the subscriber's execution cannot be determined
    (it's random), so be careful regarding the event chain when you architect your
    code.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，你可以有多个订阅者订阅同一个事件发布器功能。在这种情况下，订阅者执行的顺序是无法确定的（是随机的），因此在设计代码时要小心事件链的顺序。
- en: Events guarantee that you can interact or modify the behavior of standard business
    processes without changing the base code.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 事件确保你可以与标准业务流程交互或修改其行为，而无需更改基础代码。
- en: Dynamics 365 Business Central exposes a lot of events in its standard code and
    new events are added monthly. You can request new events by going to the following
    link: [https://github.com/Microsoft/ALAppExtensions/issues](https://github.com/Microsoft/ALAppExtensions/issues). To
    get a complete overview of published events in Dynamics 365 Business Central,
    I suggest that you take a look at the following GitHub repository:[ ](https://github.com/Microsoft/ALAppExtensions/issues)[https://github.com/waldo1001/blog.CALAnalysis/tree/master/Published%20Events](https://github.com/waldo1001/blog.CALAnalysis/tree/master/Published%20Events)[.](https://github.com/Microsoft/ALAppExtensions/issues)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Dynamics 365 Business Central 在其标准代码中暴露了大量事件，并且每月都会添加新的事件。你可以通过以下链接请求新的事件：[https://github.com/Microsoft/ALAppExtensions/issues](https://github.com/Microsoft/ALAppExtensions/issues)。要获得
    Dynamics 365 Business Central 中已发布事件的完整概览，建议你查看以下 GitHub 仓库：[https://github.com/waldo1001/blog.CALAnalysis/tree/master/Published%20Events](https://github.com/waldo1001/blog.CALAnalysis/tree/master/Published%20Events)。
- en: In this section, we learned how events are the fundamental building blocks of
    every AL extension. In the next section, we'll have an overview of the available
    AL objects and learn how to create them with the AL Language extension.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了事件是每个 AL 扩展的基本构建块。在下一节中，我们将概述可用的 AL 对象，并学习如何使用 AL 语言扩展创建它们。
- en: Understanding the basics of the AL Language
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 AL 语言的基础
- en: An extension of Dynamics 365 Business Central is written using the **AL Language**.
    With AL, you can create new objects, extend standard objects, and create custom
    business logic for your application.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Dynamics 365 Business Central 的扩展是使用**AL 语言**编写的。使用 AL 语言，你可以创建新对象、扩展标准对象，并为你的应用程序创建自定义业务逻辑。
- en: You create an extension for Dynamics 365 Business Central by using Visual Studio
    Code as your development environment and by using the AL Language extension (as
    we described in [Chapter 2](215c2304-db18-4145-bb3f-8c10cdca949d.xhtml), *Mastering
    a Modern Development Environment*). When installed, you have full support for
    developing AL projects.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你通过使用Visual Studio Code作为开发环境，并使用AL语言扩展（如我们在[第2章](215c2304-db18-4145-bb3f-8c10cdca949d.xhtml)中描述的，*掌握现代开发环境*）来为Dynamics
    365 Business Central创建扩展。安装后，你将获得完整的AL项目开发支持。
- en: All Dynamics 365 Business Central functionalities are coded as objects (new
    objects or extensions of standard objects), and these objects are defined in `.al`
    files. A single `.al` file can define multiple objects (although we don't recommend
    that).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Dynamics 365 Business Central功能都作为对象进行编码（新对象或标准对象的扩展），这些对象在`.al`文件中定义。一个`.al`文件可以定义多个对象（尽管我们不推荐这样做）。
- en: Extensions are then compiled as `.app` package files, and this file is the final
    extension that you will publish in your final environment.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展程序随后被编译为`.app`包文件，这个文件就是你在最终环境中发布的扩展。
- en: 'At the time of writing, the following objects are available with the AL Language
    extension for Visual Studio Code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 截至目前，AL语言扩展对于Visual Studio Code提供了以下对象：
- en: Table object
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表对象
- en: Table extension object
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表扩展对象
- en: Page object
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面对象
- en: Page extension object
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面扩展对象
- en: Codeunit object
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码单元对象
- en: Report object
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 报表对象
- en: Enum object
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 枚举对象
- en: XMLport object
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XMLport对象
- en: Query object
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询对象
- en: Control add-in (JavaScript)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控件附加组件（JavaScript）
- en: Profile and page customizations
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文件和页面自定义
- en: We'll look at the main objects in detail in the following sections. Some of
    these objects (such as reports, page customizations, and add-ins) will be covered
    in later chapters.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的章节中详细查看主要对象。其中一些对象（如报告、页面自定义和附加组件）将在后续章节中介绍。
- en: 'The AL Language extension contains a lot of snippets for defining objects and
    for handling the language''s tasks. The main standard snippets are as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: AL语言扩展包含了许多用于定义对象和处理语言任务的代码片段。主要的标准代码片段如下：
- en: '**Objects**:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象**：'
- en: '`tpagecust`: New customization of a standard page'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tpagecust`: 标准页面的新自定义'
- en: '`tpageext`: New extension of a standard page'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tpageext`: 标准页面的新扩展'
- en: '`ttableext`: New extension of a standard table'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ttableext`: 标准表的新扩展'
- en: '`tquery`: New query'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tquery`: 新查询'
- en: '`treport`: New report'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`treport`: 新报告'
- en: '`txmlport`: New xmlport'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`txmlport`: 新的xmlport'
- en: '`tpage`: Here, we can choose whether we want to get a new List or a new Card'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tpage`: 在这里，我们可以选择是获取一个新的列表还是一个新的卡片'
- en: '`tcodeunit`: New codeunit'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tcodeunit`: 新代码单元'
- en: '**Code**:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码**：'
- en: '`tcaseelse`: Case statement with else'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tcaseelse`: 带有else的Case语句'
- en: '`tcaseof`: Case statement without else'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tcaseof`: 没有else的Case语句'
- en: '`tfor`: For statement'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tfor`: For语句'
- en: '`tforeach`: Foreach statement'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tforeach`: Foreach语句'
- en: '`tif`: If statement with begin and end'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tif`: 带有begin和end的If语句'
- en: '`tifelse`: If statement with begin and end else'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tifelse`: 带有begin和end else的If语句'
- en: '`tisempty`: Isempty statement with begin end'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tisempty`: 带有begin和end的Isempty语句'
- en: '`tisemptyelse`: Isempty statement with begin end else'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tisemptyelse`: 带有begin end else的Isempty语句'
- en: '`trepeat`: Repeat loop with begin and end clause'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`trepeat`: 带有begin和end子句的重复循环'
- en: '`twhile`: While statement'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`twhile`: While语句'
- en: '`twith`: With statement'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`twith`: With语句'
- en: '**Profile**:'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置文件**：'
- en: '`tprofile`: Allows us to create a new profile with page customizations'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tprofile`: 允许我们创建一个带有页面自定义的新的配置文件'
- en: '**Events**:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件**：'
- en: '`teventbus`: Allows us to create a business event'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`teventbus`: 允许我们创建一个业务事件'
- en: '`teventint`: Allows us to create an integration event'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`teventint`: 允许我们创建一个集成事件'
- en: '`teventsub`: Allows us to create a subscriber event'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`teventsub`: 允许我们创建一个订阅者事件'
- en: '**Fields and Keys**:'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字段和键**：'
- en: '`tfield`: New field without a type (we need to put one in manually).'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tfield`: 新字段，无类型（我们需要手动填写一个类型）。'
- en: '`tfieldbiginteger`: Big Integer type.'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tfieldbiginteger`: 大整数类型。'
- en: '`tfieldboolean`: Boolean field.'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tfieldboolean`: 布尔字段。'
- en: '`tfieldblob`: Blob field.'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tfieldblob`: Blob字段。'
- en: '`tfieldcode`: Code field. You will need just to put the length of the field.'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tfieldcode`: 代码字段。你只需要设置字段的长度。'
- en: '`tfielddate`: Date field.'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tfielddate`: 日期字段。'
- en: '`tfielddateformula`: Dateformula field.'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tfielddateformula`: 日期公式字段。'
- en: '`tfielddatetime`: Datetime field.'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tfielddatetime`: 日期时间字段。'
- en: '`tfielddecimal`: Decimal field.'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tfielddecimal`: 十进制字段。'
- en: '`tfieldduration`: Duration field.'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tfieldduration`: 持续时间字段。'
- en: '`tfieldguid`: GUID field.'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tfieldguid`: GUID字段。'
- en: '`tfieldoption`: Option field. In this case, the `OptionMember` property is
    automatically added.'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tfieldoption`: 选项字段。在这种情况下，`OptionMember`属性会自动添加。'
- en: '`tfieldrecorid`: RecordID field.'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tfieldrecorid`: RecordID字段。'
- en: '`tfieldtext`: Text field. You will need just to put the length of the field.'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tfieldtext`：文本字段。你只需要输入字段的长度。'
- en: '`tfieldtime`: Time field.'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tfieldtime`：时间字段。'
- en: '`tkey`: Adds a new key to a table.'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tkey`：向表中添加一个新键。'
- en: '**Fields and Action on Pages**:'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**页面上的字段和操作**：'
- en: '`tfieldpage`: Adds a field to a page'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tfieldpage`：向页面添加一个字段。'
- en: '`taction`: Adds an action to a page'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`taction`：向页面添加一个操作。'
- en: '**T****riggers**:'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**触发器**：'
- en: '`ttrigger`: Creates a trigger definition'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ttrigger`：创建触发器定义。'
- en: '`tprocedure`: Creates a procedure definition'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tprocedure`：创建过程定义。'
- en: After installing the AL Language extension in Visual Studio Code, you can start
    a new AL project by going to View | Command Palette and selecting AL:Go!.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在Visual Studio Code中安装AL语言扩展后，你可以通过转到“视图” | “命令面板”并选择AL:Go!来启动一个新的AL项目。
- en: 'Visual Studio Code asks you for a folder that it can create the project in
    and then asks you to select the target platform (Dynamics 365 Business Central
    version). Select 4.0 Business Central 2019 release wave 2:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code会要求你提供一个文件夹，以便它可以在其中创建项目，然后要求你选择目标平台（Dynamics 365 Business
    Central版本）。选择4.0 Business Central 2019版本第二波发布：
- en: '![](img/76a129b4-ea58-4eee-9b66-f6a1088115fe.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/76a129b4-ea58-4eee-9b66-f6a1088115fe.png)'
- en: Now, Visual Studio Code will configure the project for you. It creates the `launch.json`
    file so that you can connect to your development environment and the `app.json`
    file with the extension's manifest file (as described in [Chapter 2](215c2304-db18-4145-bb3f-8c10cdca949d.xhtml),
    *Mastering a Modern Development Environment*).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Visual Studio Code将为你配置项目。它会创建`launch.json`文件，以便你可以连接到开发环境，以及带有扩展清单文件的`app.json`文件（如[第二章](215c2304-db18-4145-bb3f-8c10cdca949d.xhtml)，*掌握现代开发环境*所述）。
- en: Now, you can start defining the objects that comprise your solution.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以开始定义组成你解决方案的对象。
- en: Table definition
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表定义
- en: With the AL extension, you don't have a graphical tool for designing tables
    (like we did previously in CSIDE); instead, you need to create a table using code.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 使用AL扩展，你没有图形化工具来设计表（就像我们以前在CSIDE中做的那样）；相反，你需要使用代码来创建表。
- en: 'A table definition can be created by using the `ttable` snippet:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用`ttable`代码段创建一个表定义：
- en: '[PRE0]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To define a table, you need to specify an *ID* (which must be unique in your
    application) and a *name* (which must also be unique). Then, you can set the table''s
    properties (use *Ctrl* + spacebar to discover all the available properties):'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义一个表，你需要指定一个*ID*（必须在应用程序中唯一）和一个*名称*（也必须是唯一的）。然后，你可以设置表的属性（使用*Ctrl* + 空格键来发现所有可用属性）：
- en: '![](img/bffce792-71fd-4ffb-ba92-663c196b944a.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bffce792-71fd-4ffb-ba92-663c196b944a.png)'
- en: 'A table object has the following main properties:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一个表对象具有以下主要属性：
- en: '`Caption`: The string that identifies the table in the user interface.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Caption`：标识表在用户界面中显示的字符串。'
- en: '`DataCaptionFields`: Sets the fields that appear to the left of the caption
    on pages that display the content of this table.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DataCaptionFields`：设置在显示此表内容的页面中，位于标题左侧的字段。'
- en: '`DataPerCompany`: Sets a value that indicates whether the table data applies
    to all the companies in the database or only the current company (when default
    = `true`, data is only available for the current company).'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DataPerCompany`：设置一个值，指示表数据是适用于数据库中的所有公司，还是仅适用于当前公司（当默认值为`true`时，数据仅适用于当前公司）。'
- en: '`DrillDownPageID`: Sets the ID of the page to use as a drill-down.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DrillDownPageID`：设置用作下钻的页面ID。'
- en: '`LookupPageID`: Sets the ID of the page to use as a lookup.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LookupPageID`：设置用作查找的页面ID。'
- en: '`LinkedObject`: Available for on-premise only; it specifies a link to a SQL
    Server object.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LinkedObject`：仅适用于本地部署；它指定一个指向SQL Server对象的链接。'
- en: '`Permissions`: Sets whether an object has additional permissions that are required
    to perform some operations on one or more tables.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Permissions`：设置对象是否具有执行某些操作所需的额外权限，这些操作适用于一个或多个表。'
- en: '`TableType`: Specifies the table type (Normal, CRM, ExternalSQL, Exchange,
    or MicrosoftGraph).'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TableType`：指定表的类型（普通、CRM、ExternalSQL、Exchange或MicrosoftGraph）。'
- en: '`ExternalName`: This property appears when you specify CRM or ExternalSQL in
    the `TableType` property and specifies the name of the original table in the external
    database.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExternalName`：当你在`TableType`属性中指定CRM或ExternalSQL时，此属性出现，并指定外部数据库中原始表的名称。'
- en: '`ExternalSchema`: This property appears when you specify CRM or ExternalSQL
    in the `TableType` property and specifies the name of the database schema in the
    external database.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExternalSchema`：当你在`TableType`属性中指定CRM或ExternalSQL时，此属性出现，并指定外部数据库中数据库架构的名称。'
- en: '`ReplicateData`: Specifies whether the table must be replicated to the cloud
    service (the default value is true).'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ReplicateData`: 指定表是否必须复制到云服务（默认值为 true）。'
- en: '`Extensible`: Sets whether the object can be extended or not.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Extensible`: 设置对象是否可以扩展。'
- en: 'A table object contains a set of fields. A table''s field can be created by
    using the `tfield` snippet:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 表对象包含一组字段。表的字段可以通过使用 `tfield` 代码段创建：
- en: '[PRE1]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: A field is defined by an *ID* (which must be unique within the declaring table
    and all its extensions), a *name* (which must also be unique within the declaring
    table and all its extensions), and a *type* (the data type of the field).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 字段由 *ID*（必须在声明表及其所有扩展中唯一）、*名称*（也必须在声明表及其所有扩展中唯一）和 *类型*（字段的数据类型）定义。
- en: 'It''s recommended to always set the `Caption` property (for tables and fields)
    and to set the `DataClassification` property (used for defining the data sensitivity
    for GDPR regulations) to a value other than `ToBeClassified`. A field can have
    its own specific properties that you can set as needed (optional properties, as
    shown in the following screenshot):'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 建议始终设置 `Caption` 属性（对于表和字段），并将 `DataClassification` 属性（用于定义 GDPR 法规的数据敏感性）设置为除
    `ToBeClassified` 以外的值。字段可以具有其特定的属性，您可以根据需要进行设置（如以下屏幕截图所示的可选属性）：
- en: '![](img/b8264379-9c65-4a61-8fab-e37b94c9e958.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b8264379-9c65-4a61-8fab-e37b94c9e958.png)'
- en: 'A table also contains a set of *keys*. You can define keys using the `tkey`
    snippet:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 表还包含一组 *键*。您可以使用 `tkey` 代码段定义键：
- en: '[PRE2]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A table's key is defined by a *name* and the *fields* that comprise the key
    (a comma-separated list of table fields). A key can have the `Clustered` property
    set to `true` if it's the primary key of the table. A clustered index is a special
    type of index that reorders the way the records in the table are physically stored,
    and so a table can have only one clustered index.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 表的键由 *名称* 和组成键的 *字段*（以逗号分隔的表字段列表）定义。如果表的主键是该键，则键可以将 `Clustered` 属性设置为 `true`。聚集索引是一种特殊类型的索引，它重新排序表中记录的物理存储方式，因此一个表只能有一个聚集索引。
- en: A table can also have triggers (`OnInsert`, `OnModify`, `OnDelete`, and `OnRename`),
    and inside a table, you can define your own methods.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 表还可以具有触发器（`OnInsert`、`OnModify`、`OnDelete` 和 `OnRename`），在表内部，您可以定义自己的方法。
- en: Page object definition
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 页面对象定义
- en: 'A page object is the user interface for your users in Dynamics 365 Business
    Central. You can define a page object in AL using the `tpage` snippet:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 页面对象是您在 Dynamics 365 Business Central 中为用户提供的用户界面。您可以使用 `tpage` 代码段在 AL 中定义页面对象：
- en: '![](img/5a02afc5-14a3-43c0-9220-6a04d9880558.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5a02afc5-14a3-43c0-9220-6a04d9880558.png)'
- en: 'The first three options allow you to create the following page types:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 前三个选项允许您创建以下页面类型：
- en: '`Card` page'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Card` 页面'
- en: '`API` page'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`API` 页面'
- en: '`List` page'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`List` 页面'
- en: 'A `Card` page (the first option) is defined as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`Card` 页面（第一个选项）定义如下：'
- en: '[PRE3]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'A `Card` page is identified by its *ID* and its *name* (both of which must
    be unique inside the application). A page also has its own properties. The main
    things to define are as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`Card` 页面通过其 *ID* 和 *名称* 来标识（这两个值在应用程序内部必须唯一）。页面也有自己的属性。需要定义的主要内容如下：'
- en: '`PageType`: Identifies the type of the page.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PageType`: 标识页面的类型。'
- en: '`SourceTable`: Sets the underlying table for this page.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SourceTable`: 设置此页面的基础表。'
- en: '`SourceTableView`: Sets the key, sort order, and filter you want to use to
    determine the view of the source table presented to the user.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SourceTableView`: 设置您希望使用的键、排序顺序和过滤器，以确定呈现给用户的源表的视图。'
- en: '`ApplicationArea`: Sets the visibility of the page inside the Business Central
    application. The standard values are All, Basic, Suite, and Advanced.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ApplicationArea`: 设置页面在 Business Central 应用程序中的可见性。标准值包括 All、Basic、Suite 和
    Advanced。'
- en: '`UsageCategory`: Sets the Departments column for the searched page in the web
    client.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UsageCategory`: 设置网页客户端中搜索页面的部门列。'
- en: '`Extensible`: Sets whether the object can be extended or not.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Extensible`: 设置对象是否可以扩展。'
- en: 'A page has a `layout` (which defines the page appearance in the UI) and an
    `actions` section (which defines the available menu items for adding code actions
    inside a page). Inside the layout, you have a content area, which contains a set
    of groups, and every group can contain one or more page fields. You can add a
    field inside a page group by using the `tpagefield` snippet:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 页面有一个 `layout`（定义页面在 UI 中的外观）和一个 `actions` 部分（定义可用的菜单项，以便在页面内添加代码操作）。在布局内，您有一个内容区域，其中包含一组组，且每个组可以包含一个或多个页面字段。您可以使用
    `tpagefield` 代码段在页面组中添加字段：
- en: '[PRE4]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: A field on a page is defined by a *name* (the field keyword inside the page)
    and a *field source* (the source expression of the page field, which corresponds
    to the physical fields defined in the underlying table).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 页面上的字段通过*名称*（页面中的字段关键字）和*字段源*（页面字段的源表达式，对应底层表中定义的物理字段）来定义。
- en: A field can have its own properties and it must have an `ApplicationArea` set.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 字段可以具有自己的属性，并且必须设置`ApplicationArea`。
- en: 'A `List` page (the third option) is defined as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`List`页面（第三种选项）定义如下：'
- en: '[PRE5]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: A `List` page has the `PageType` property set to `List` and the `layout` section
    has a `Content` area and a `FactBox` area. The `Content` area has a `repeater`
    group, which contains all the fields you want to display on that list. After that,
    you have the `actions` section.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`List`页面的`PageType`属性设置为`List`，并且`layout`部分有`Content`区域和`FactBox`区域。`Content`区域包含一个`repeater`组，显示你希望在该列表上展示的所有字段。之后，你可以设置`actions`部分。'
- en: If your page contains a `repeater` control (for example, a `List` page), you
    can define actions that apply to the entire page or to the repeater control itself
    (a single record). For this, the action has a property called **Scope**, which
    can be defined as a *page* (the action is at the page level) or a `repeater` (the
    action is at the record level).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果页面包含`repeater`控件（例如，`List`页面），你可以定义适用于整个页面或单个记录的操作。为此，操作有一个名为**Scope**的属性，可以定义为*页面*（操作位于页面级别）或`repeater`（操作位于记录级别）。
- en: Table extension definition
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 表扩展定义
- en: As we mentioned previously, with Dynamics 365 Business Central, you cannot modify
    an existing table; instead, you need to create a table extension.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，在Dynamics 365 Business Central中，你不能修改现有表；相反，你需要创建一个表扩展。
- en: 'A table extension can be defined by using the `ttableext` snippet:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`ttableext`片段定义表扩展：
- en: '[PRE6]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: A `tableextension` object is defined by an *ID* and a *name* (which must be
    unique) and by the table that must be extended (or altered). Then, inside the
    fields group, you can add new fields or change existing field properties.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`tableextension`对象通过*ID*和*名称*（必须是唯一的）以及必须扩展（或修改）的表来定义。然后，在字段组内部，你可以添加新字段或更改现有字段的属性。'
- en: 'The following code is an example of an extension to the standard `Customer`
    table that adds some new fields and changes an existing field property:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是对标准`Customer`表的扩展示例，添加了一些新字段并更改了现有字段的属性：
- en: '[PRE7]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In a `tableextension` object, you can also add new keys to the extended table
    by adding a *keys* group, like you can in a table definition. For example, in
    our previous `tableextension` object, we''ve added two new fields, and we want
    also to create a secondary key on those fields in the `Customer` table. We can
    create a `key` group with the key name and the key fields:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在`tableextension`对象中，你还可以通过添加*keys*组来向扩展的表添加新键，就像在表定义中一样。例如，在我们之前的`tableextension`对象中，我们添加了两个新字段，并且我们还希望在这些字段上创建一个二级键。我们可以创建一个`key`组，定义键名和键字段：
- en: '[PRE8]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You cannot create a key based on a new field or a standard field, and you cannot
    alter an existing key in an extended table.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 你不能基于新字段或标准字段创建键，也不能在扩展的表中修改现有键。
- en: Here, we have defined a secondary key called `PacktKey` in the `Customer` table,
    which consists of two custom fields (`PacktCodeSD` and `PacktEnabledSD`). Defining
    secondary keys is extremely useful for increasing the performance of some calculations,
    sorting records, and reports.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在`Customer`表中定义了一个名为`PacktKey`的二级键，它由两个自定义字段（`PacktCodeSD`和`PacktEnabledSD`）组成。定义二级键对于提高某些计算、排序记录和报告的性能非常有用。
- en: Page extension definition
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 页面扩展定义
- en: Exactly like tables, with Dynamics 365 Business Central, you cannot directly
    modify an existing page; instead, you need to create a page extension (using the `pageextension`
    object in AL).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 与表一样，在Dynamics 365 Business Central中，你不能直接修改现有页面；相反，你需要创建一个页面扩展（使用AL中的`pageextension`对象）。
- en: 'A `pageextension` object can be defined by using the `tpageext` snippet:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`tpageext`片段定义`pageextension`对象：
- en: '[PRE9]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: A `pageextension` object is defined by an *ID* and a *name* (which must be unique)
    and by the page that must be extended. A `pageextension` object contains a `layout`
    block (where you can add changes to the standard page layout, such as adding new
    fields or new sections or changing standard fields) and an `actions` block (where
    you can add your new actions).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 一个`pageextension`对象由*ID*和*名称*（必须唯一）以及必须扩展的页面定义。一个`pageextension`对象包含一个`layout`块（你可以在其中添加对标准页面布局的更改，如添加新字段或新部分，或更改标准字段）和一个`actions`块（你可以在其中添加新的操作）。
- en: 'The following is an example of a `pageextension` object in which we have added
    a new field to the `Customer Card` page (the field is added at the end of the
    `General` tab) and we have modified the `Style` property of an existing field
    (the `Name` field):'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个`pageextension`对象的示例，其中我们向`Customer Card`页面添加了一个新字段（该字段被添加到`General`选项卡的末尾），并修改了现有字段（`Name`字段）的`Style`属性：
- en: '[PRE10]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As you can see, we have added a field to the page and modified the `Style` property
    of the `Name` field so that it is in bold. Remember that not all the available
    field properties can be modified via a `pageextension` object.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们已向页面添加了一个字段，并修改了`Name`字段的`Style`属性，使其显示为粗体。请记住，并非所有可用的字段属性都可以通过`pageextension`对象进行修改。
- en: Codeunit definition
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码单元定义
- en: A codeunit is a container of AL code, and this code can be triggered by directly
    executing the codeunit (with the `OnRun` trigger) or by calling the functions
    defined in the codeunit itself.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 代码单元是AL代码的容器，这些代码可以通过直接执行代码单元（使用`OnRun`触发器）或通过调用代码单元中定义的函数来触发。
- en: 'We can define a codeunit in AL by using the `tcodeunit` snippet:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用`tcodeunit`片段在AL中定义代码单元：
- en: '[PRE11]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: A codeunit is defined by an *ID* and a *name* (which must be unique inside your
    application). By default, the codeunit skeleton only contains the `OnRun` trigger
    definition, and inside this trigger, you can write the code that you want to execute
    when calling the `Codeunit.RUN` method.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 代码单元由*ID*和*名称*（在你的应用程序中必须唯一）定义。默认情况下，代码单元框架只包含`OnRun`触发器的定义，在此触发器中，你可以编写希望在调用`Codeunit.RUN`方法时执行的代码。
- en: 'A codeunit has its own properties that you can set:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 代码单元有其自己的属性，你可以进行设置：
- en: '![](img/2de302f6-93b0-4dcb-b29d-3de9bfa8e97d.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2de302f6-93b0-4dcb-b29d-3de9bfa8e97d.png)'
- en: In a codeunit, you can define procedures (functions) that can be local to the
    codeunit or global (that is, publicly exposed to objects that instantiate the
    codeunit).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码单元中，你可以定义可以是本地或全局（即公开暴露给实例化该代码单元的对象）的过程（函数）。
- en: 'A procedure can be defined by using the `tprocedure` snippet:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用`tprocedure`片段来定义一个过程：
- en: '[PRE12]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: By default, this snippet creates a local procedure without parameters and without
    a return value. You can change the scope from local (the default value, meaning
    that it is visible only inside the object that declares the procedure) to global
    (so that it is also visible outside the object) by removing the `local` keyword.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，这段代码创建了一个没有参数且没有返回值的本地过程。通过移除`local`关键字，你可以将作用域从本地（默认值，意味着它仅在声明该过程的对象内部可见）更改为全局（使其在对象外部也可见）。
- en: 'As an example, this is a global procedure with parameters and a return value:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是一个带有参数和返回值的全局过程：
- en: '[PRE13]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: A codeunit can have more than one procedure (local or global) defined.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 一个代码单元可以定义多个过程（本地或全局）。
- en: Event definitions
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件定义
- en: 'As we mentioned previously, events are fundamental building blocks when it
    comes to developing extensions for Dynamics 365 Business Central. When working
    with events, we have two main entities: the event *publisher* and the event *subscriber*.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，事件是开发Dynamics 365 Business Central扩展时的基础构件。在处理事件时，我们有两个主要实体：事件*发布者*和事件*订阅者*。
- en: 'An **event publisher** (an event that''s raised by the application) can be
    defined in AL by using the **teventbus** (for a business event) or **teventint**
    (for an integration event) snippets:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 一个**事件发布者**（由应用程序引发的事件）可以通过使用**teventbus**（用于业务事件）或**teventint**（用于集成事件）片段在AL中定义：
- en: '![](img/c67bafb2-7efd-40a4-b321-8c1667fdd4d8.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c67bafb2-7efd-40a4-b321-8c1667fdd4d8.png)'
- en: 'A **business event** has the following schema:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 一个**业务事件**具有以下模式：
- en: '[PRE14]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, `IncludeSender` is a Boolean value that specifies whether the global methods
    defined in the object that contain the event publisher method will be visible
    to the event subscriber methods that will subscribe to this event (this is `true` if
    the global methods must be visible and `false` (the default value) if not).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`IncludeSender`是一个布尔值，指定包含事件发布者方法的对象中定义的全局方法是否对订阅此事件的事件订阅者方法可见（当全局方法必须可见时为`true`，默认为`false`表示不可见）。
- en: When the `IncludeSender` argument is set to `true`, the signature of the event
    subscriber methods that will subscribe to this published event will automatically
    include a `VAR` parameter (a reference value) for the published event object.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 当`IncludeSender`参数设置为`true`时，订阅此发布事件的事件订阅者方法的签名将自动包含一个`VAR`参数（引用值），用于发布事件对象。
- en: 'An **integration event** has the following schema:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '**集成事件**具有以下结构：'
- en: '[PRE15]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, the `IncludeSender` Boolean parameter has the same meaning as we described
    previously.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`IncludeSender`布尔参数与我们之前描述的意义相同。
- en: '`GlobalVarAccess` is a Boolean parameter that specifies whether the global
    variables defined in the object, which contains the event publisher method, are
    accessible to the event subscriber methods that subscribe to this published event
    (this is `true` if they must be exposed and `false` – which is the default value
    – if not).'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`GlobalVarAccess`是一个布尔参数，指定是否可以访问包含事件发布者方法的对象中定义的全局变量，供订阅此发布事件的事件订阅者方法使用（当需要暴露时为`true`，默认值为`false`表示不可访问）。'
- en: When the `GlobalVarAccess` argument is set to `true`, all the event subscriber
    methods that subscribe to this event will be able to access the global variables
    in the object where the event publisher method is declared. You have to manually
    add the variable parameters to the event subscriber methods, and you need to use
    a name and a type that match the variable declaration in the event publisher object.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 当`GlobalVarAccess`参数设置为`true`时，所有订阅此事件的事件订阅者方法都将能够访问事件发布者方法所在对象中的全局变量。你必须手动将变量参数添加到事件订阅者方法，并且需要使用与事件发布者对象中的变量声明匹配的名称和类型。
- en: After an event has been published by an event publisher (your previously defined
    method), you need to raise that event in your code where needed (event subscribers
    will not react to the event until it's raised in your application code).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在事件发布者（你之前定义的方法）发布事件后，你需要在代码中适当的位置触发该事件（事件订阅者在应用程序代码中触发事件之前不会响应该事件）。
- en: 'As an example, the following is a codeunit with a public method that raises
    a business event and an integration event:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，以下是一个包含公共方法的代码单元，该方法触发业务事件和集成事件：
- en: '[PRE16]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'An **event subscriber** (a function that handles a raised event in the application)
    can be declared using the `teventsub` snippet:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '**事件订阅者**（处理应用程序中已触发事件的函数）可以使用`teventsub`代码片段声明：'
- en: '[PRE17]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'From the preceding code, we can see the following:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述代码中，我们可以看到以下内容：
- en: '`ObjectType` is an enumeration that identifies the object type that publishes
    the event to subscribe to (the object that contains the event publisher method)
    or that raises the trigger event to subscribe to.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ObjectType`是一个枚举，标识发布事件以供订阅的对象类型（包含事件发布者方法的对象），或触发事件以供订阅的对象类型。'
- en: '`ObjectId` is an integer value that specifies the ID of the object that publishes
    the event to subscribe to (when declaring it, don''t use the ID; use the `ObjectType::Name` syntax).'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ObjectId`是一个整数值，指定发布事件以供订阅的对象的ID（声明时不要使用ID，而是使用`ObjectType::Name`语法）。'
- en: '`OnSomeEvent` is a text parameter that specifies the name of the method that
    publishes the event in the object identified by the `ObjectId` parameter.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnSomeEvent`是一个文本参数，指定由`ObjectId`参数标识的对象中发布事件的方法的名称。'
- en: '`ElementName` is a text parameter that''s used for database trigger events.
    It specifies the table field that the trigger event pertains to.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ElementName`是一个文本参数，用于数据库触发事件。它指定触发事件相关的表字段。'
- en: '`SkipOnMissingLicense` is a Boolean parameter that specifies what happens to
    the event subscriber method when the Dynamics 365 Business Central license of
    the user account that runs the current session does not include the permissions
    on the object that contains the subscriber method (`true`if the method call must
    be ignored and `false` if an error must be thrown and the code''s execution must
    be stopped).'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SkipOnMissingLicense` 是一个布尔参数，用于指定当运行当前会话的用户帐户的 Dynamics 365 Business Central
    许可证未包含对包含订阅者方法的对象的权限时，事件订阅者方法会发生什么（`true` 表示方法调用必须被忽略，`false` 表示必须抛出错误并停止代码执行）。'
- en: '`SkipOnMissingPermission` is a Boolean parameter that specifies what happens
    to the subscriber method when the user account that runs the current session does
    not have permission on the object that contains the event subscriber method (`true` if
    the method call must be ignored and `false` (the default value)if an error must
    be thrown and the code execution must be stopped).'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SkipOnMissingPermission` 是一个布尔参数，用于指定当运行当前会话的用户帐户没有对包含事件订阅者方法的对象的权限时，订阅者方法会发生什么（`true`
    表示方法调用必须被忽略，`false`（默认值）表示必须抛出错误并停止代码执行）。'
- en: 'As an example, this is a codeunit with two event subscribers for the business
    and integration events we defined in the previous example:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个示例，这是一个代码单元，包含我们在前面示例中定义的业务事件和集成事件的两个事件订阅者：
- en: '[PRE18]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'When defining the event subscriber, if you press *Ctrl* + spacebar on the event
    parameters, you will see a list of the objects that the event can interact with
    (exposed by the publisher). In our example, the business event subscriber can
    see the event parameter and the sender object (because we''ve declared the event
    publisher with `IncludeSender` set to `true`), as follows:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义事件订阅者时，如果你在事件参数上按 *Ctrl* + 空格键，你将看到事件可以与之交互的对象列表（由发布者暴露）。在我们的示例中，业务事件订阅者可以看到事件参数和发送者对象（因为我们已将事件发布者声明为`IncludeSender`设置为`true`），如下所示：
- en: '![](img/a671131f-dfce-4ad3-8021-cb37b4518ff2.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a671131f-dfce-4ad3-8021-cb37b4518ff2.png)'
- en: 'The integration event subscriber can see the event parameter, the sender object
    (because we''ve declared the event publisher with `IncludeSender` set to `true`),
    and the global variables of the sender object (because we''ve declared the event
    publisher with `GlobalVarAccess = true`):'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 集成事件订阅者可以看到事件参数、发送者对象（因为我们已将事件发布者声明为`IncludeSender`设置为`true`），以及发送者对象的全局变量（因为我们已将事件发布者声明为`GlobalVarAccess
    = true`）：
- en: '![](img/d0630f16-21ce-4050-99eb-556b165df950.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d0630f16-21ce-4050-99eb-556b165df950.png)'
- en: 'When using events, always remember the following:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 使用事件时，始终记住以下几点：
- en: When the code that calls the event publisher method is run, all the event subscriber
    methods that subscribe to the event are run.
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当调用事件发布者方法的代码运行时，所有订阅该事件的事件订阅者方法都会被执行。
- en: If there are multiple subscribers, the subscriber methods are run one at a time
    in a random order (there's no way to specify the order in which the subscriber
    methods are called).
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有多个订阅者，订阅者方法将按随机顺序逐一运行（无法指定订阅者方法调用的顺序）。
- en: If there are no subscribers to the published event, then the line of code that
    calls the event publisher method is ignored and not executed.
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有订阅发布事件的订阅者，那么调用事件发布者方法的代码行将被忽略，并且不会执行。
- en: XMLport definition
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XMLport 定义
- en: '**XMLports** are objects that are used for importing and exporting XML or text-based
    data between an external source and Dynamics 365 Business Central.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '**XMLport** 是用于在外部源与 Dynamics 365 Business Central 之间导入和导出 XML 或基于文本的数据的对象。'
- en: 'An XMLport can be defined in AL by using the `txmlport` snippet:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `txmlport` 代码片段在 AL 中定义一个 XMLport：
- en: '[PRE19]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'As an example, this is a simple XMLport definition for importing some customer
    data (the `No.` and `Name` fields):'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个示例，这是一个简单的 XMLport 定义，用于导入一些客户数据（`No.` 和 `Name` 字段）：
- en: '[PRE20]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The `xmlport` object has the `Direction` property set to `Import` (only used
    for importing data to Dynamics 365 Business Central) and reads the `No` and `Name`
    fields from an XML object called `Customer`.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`xmlport` 对象的 `Direction` 属性设置为 `Import`（仅用于将数据导入 Dynamics 365 Business Central），并从名为
    `Customer` 的 XML 对象中读取 `No` 和 `Name` 字段。'
- en: Defining query objects
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义查询对象
- en: A `query` object allows you to define an object that can be used to retrieve
    data from a single table or from multiple tables by applying filters and joins
    between tables. The returned result is a single dataset.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '`query` 对象允许你定义一个对象，可以通过应用过滤器和在表之间建立连接，从一个单独的表或多个表中检索数据。返回的结果是一个单一的数据集。'
- en: 'You can create a query in AL by using the `tquery` snippet:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用`tquery`代码片段在AL中创建查询：
- en: '[PRE21]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As you can see, a `query` object has an `elements` section, and inside that
    section, you define a `dataitem` and its `column` elements that must be retrieved
    (the table fields to be included in the resulting dataset).
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`query`对象有一个`elements`部分，在该部分内，你定义了一个`dataitem`及其必须检索的`column`元素（要包含在结果数据集中的表字段）。
- en: You can also create links between `dataitems` to retrieve data from more than
    one table.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以在`dataitems`之间创建链接，以从多个表中检索数据。
- en: 'As an example, the following is a `query` object that''s been defined in AL
    so that it retrieves a list of customers, along with their sales and profit data:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，以下是一个`query`对象，它已在AL中定义，用于检索客户列表及其销售和利润数据：
- en: '[PRE22]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The query loops through the `Customer` table and then (for every customer) retrieves
    data from the other tables specified in the `DataItemLink` property.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 查询循环遍历`Customer`表，然后（对于每个客户）从在`DataItemLink`属性中指定的其他表中检索数据。
- en: 'Query objects are extremely useful and powerful for retrieving records in your
    code. The first basic problem that you can solve with query objects is to avoid
    using nested loops when retrieving data from linked tables (joins). If you have
    `Table1` linked through a foreign key to `Table2`, instead of looping through
    `Table1` and, for every record of this table, going to `Table2` to retrieve the
    related data, you can use a query object and apply the pattern described in the
    following diagram:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 查询对象在代码中非常有用和强大，用于检索记录。你可以通过查询对象解决的第一个基本问题是避免在从关联表（联接）中检索数据时使用嵌套循环。如果你有一个通过外键与`Table1`关联的`Table2`，那么你可以使用查询对象，避免通过循环遍历`Table1`并为每个记录去`Table2`检索相关数据，可以应用以下图示所描述的模式：
- en: '![](img/bf854d9f-10d7-46ff-9419-915f201d56d0.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bf854d9f-10d7-46ff-9419-915f201d56d0.png)'
- en: Here, you can define a query that returns the full filtered join of the two
    tables and then you can loop through the record set that's returned by the query
    object (this requires only one loop).
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以定义一个查询，它返回两个表的完整过滤联接，然后你可以循环遍历由查询对象返回的记录集（这只需要一个循环）。
- en: 'If (as an example) we want to use our previously defined `Customer Overview`
    query in our code, this is what we have to do in AL:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 如果（例如）我们想在代码中使用之前定义的`Customer Overview`查询，那么我们需要在AL中这样做：
- en: '[PRE23]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Here, we execute the query object by calling the `Open` method, and then we
    loop through the returned dataset by using the `Read` method. Inside the loop,
    you have the complete record being returned by the query (the master table and
    the joined tables) and you can work on this data as needed.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们通过调用`Open`方法执行查询对象，然后通过使用`Read`方法循环遍历返回的数据集。在循环内，你将获得查询返回的完整记录（主表和已联接的表），并且可以根据需要处理这些数据。
- en: Extending the options – enums
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展选项 – 枚举
- en: A field of the **option** type is used in Dynamics 365 Business Central to define
    a field that provides a fixed and predefined list of values.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '**选项**类型的字段在Dynamics 365 Business Central中用于定义一个提供固定且预定义值列表的字段。'
- en: 'When you define an option field, you define the admitted values for that field
    in the following way:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 当你定义一个选项字段时，你可以通过以下方式定义该字段的允许值：
- en: '[PRE24]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the preceding code, we can see that the `OptionMembers` property contains
    the predefined value for the field. Here, the License Type field contains three
    values (blank, Full, Limited), and blank (the first value) is the default one.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们可以看到`OptionMembers`属性包含了字段的预定义值。在这里，许可证类型字段包含三个值（空白、完整、限制），其中空白（第一个值）是默认值。
- en: But what if you want to extend these options, for example, by adding a new license
    type called *Teams*? This isn't possible! Option fields cannot be extended.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你想扩展这些选项，例如，添加一个新的许可证类型叫做*Teams*，该怎么办呢？这是不可能的！选项字段不能扩展。
- en: 'To create an extendable option field, AL introduced the `enum` object. An e*num*
    is a type that consists of a set of named constants, and it can be extended from
    other extensions if you set the `Extensible` property to `true`, as shown here:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个可扩展的选项字段，AL引入了`enum`对象。一个*enum*是由一组命名常量组成的类型，并且如果你将`Extensible`属性设置为`true`，它可以从其他扩展中进行扩展，如下所示：
- en: '[PRE25]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'You can define a field so that it has the `enum` type in the following way:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以按照以下方式定义一个字段，使其具有`enum`类型：
- en: '[PRE26]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This allows you to define a field that has the same behavior as an option:
    when a user clicks on that field, Dynamics 365 Business Central presents a list
    of possible values to choose from.'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得你能够定义一个字段，它的行为与选项相同：当用户点击该字段时，Dynamics 365 Business Central 会展示一个可供选择的值列表。
- en: 'To extend the `enum` field from another extension and add a new possible value
    called `Team`, you need to create an `enumextension` object, as follows:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 要从另一个扩展中扩展 `enum` 字段并添加一个新的可能值 `Team`，你需要创建一个 `enumextension` 对象，具体如下：
- en: '[PRE27]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: After that, your `License Type` field will have one more option value to choose
    from.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，你的 `License Type` 字段将有一个新的选项值可以选择。
- en: 'You can also use an `enum` object directly from AL code (as a variable):'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以直接在 AL 代码中使用 `enum` 对象（作为变量）：
- en: '[PRE28]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You can also extend the `TableRelation` property of an `enum` value. For example,
    imagine you have the following table:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以扩展 `enum` 值的 `TableRelation` 属性。例如，假设你有以下表格：
- en: '[PRE29]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In this table, we have a field called `LicenseType` (which is an `enum`) and
    a field called `LicenseDetail`, which has a `tablerelation` property (to the `FullLicenseTable`
    and `LimitedLIcenseTable` tables) based on the value of the `enum` field.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个表中，我们有一个名为 `LicenseType`（这是一个 `enum` 类型）的字段，以及一个名为 `LicenseDetail` 的字段，它有一个
    `tablerelation` 属性（指向 `FullLicenseTable` 和 `LimitedLicenseTable` 表），其基于 `enum`
    字段的值。
- en: 'Another app could extend both the `enum` field and the table relation so that
    it can handle the new extended enum. Here''s an example:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个应用程序可以同时扩展 `enum` 字段和表关系，这样它就可以处理新的扩展枚举。以下是一个示例：
- en: '[PRE30]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Here, the new app creates the `LicenseType` enum extension (as we described previously)
    and creates a new `tableextension` object, where it modifies the `TableRelation`
    property of the `LicenseDetail` field by adding a new relationship to a `TeamLicenseTable`
    if the enum has the value of `Team`.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，新应用程序创建了 `LicenseType` 的枚举扩展（如我们之前所述），并创建了一个新的 `tableextension` 对象，在这个对象中，它通过添加一个新的关系来修改
    `LicenseDetail` 字段的 `TableRelation` 属性，当 `enum` 的值为 `Team` 时，关联一个 `TeamLicenseTable`。
- en: The combined `TableRelation` is always evaluated from the top down, so the first
    unconditional relationship will prevail. This means that you cannot change an
    existing `TableRelation` from table A to table B if the original field has a relationship
    with table A.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 合并后的 `TableRelation` 始终从上到下进行评估，因此第一个无条件的关系将优先。这意味着，如果原字段与表 A 有关系，你无法将其 `TableRelation`
    从表 A 更改为表 B。
- en: By using `enums`, you can extend all your option's values. We recommend using
    this new approach in your extensions if you want extensibility.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 `enums`，你可以扩展所有选项的值。如果你希望具有可扩展性，我们建议在你的扩展中使用这种新方法。
- en: In this section, you've had a complete overview of the available objects in
    the AL Language extension. In the next section, we'll learn about some of the
    best practices when it comes to creating and handling an AL project.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，你已经全面了解了 AL 语言扩展中的可用对象。在下一部分，我们将学习一些创建和处理 AL 项目时的最佳实践。
- en: Creating a profile object
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个配置文件对象
- en: A `profile` object allows you to define the user experience (main page) of a
    particular user profile. You can create a `profile` object with the AL Language
    extension by using the `tprofile` snippet.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `profile` 对象使你能够定义特定用户配置文件的用户体验（主页）。你可以通过使用 AL 语言扩展中的 `tprofile` 代码片段来创建一个
    `profile` 对象。
- en: 'A profile object is defined as in the following example:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 一个配置文件对象的定义如下所示：
- en: '[PRE31]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Here, we have defined a profile called **Sales Manager**, which uses the `RoleCenter`
    page with `ID = 9005` (standard Sales Manager role center object in Dynamics 365
    Business Central).
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了一个名为 **Sales Manager** 的配置文件，它使用 `RoleCenter` 页面，`ID = 9005`（这是 Dynamics
    365 Business Central 中的标准销售经理角色中心对象）。
- en: To deploy a `profile` object from your extension, I recommend creating a `Profile`
    folder in your AL project and, inside that folder, placing all the `.al` files
    that define your profiles.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 要从你的扩展中部署一个 `profile` 对象，我建议在你的 AL 项目中创建一个 `Profile` 文件夹，并将所有定义配置文件的 `.al` 文件放在该文件夹内。
- en: Understanding AL project structure best practices
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 AL 项目结构的最佳实践
- en: As we mentioned previously, an AL project is file-based. You have all your `.al`
    files inside a project folder. The main problem that you encounter when you start
    working with a complex project is how to structure the project. How do we organize
    the objects and the `.al` files?
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，AL 项目是基于文件的。你所有的 `.al` 文件都位于一个项目文件夹中。当你开始处理一个复杂项目时，最常遇到的问题就是如何组织项目。我们该如何组织对象和
    `.al` 文件呢？
- en: 'There''s no written rule for this topic. What we wholeheartedly suggest is
    to avoid having all the objects (`.al` files) at the project root level, as shown
    in the following screenshot:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 这个话题没有书面规则。我们真诚地建议避免将所有对象（`.al` 文件）放在项目根目录级别，如下图所示：
- en: '![](img/e9f8cf4b-750b-4f97-8368-cf847df4c532.png)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e9f8cf4b-750b-4f97-8368-cf847df4c532.png)'
- en: Here, none of the objects are organized, and if you have a large number of objects,
    your object list will grow a lot, causing difficulties with handling and retrieving
    files.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，没有对对象进行任何组织，如果您有大量对象，您的对象列表将会增长很多，导致处理和查找文件时遇到困难。
- en: 'The most sought-after way of structuring your project could be to organize
    your files by object type, as shown in the following screenshot:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 组织项目的最常见方式是按对象类型组织文件，如下图所示：
- en: '![](img/b7304209-a466-48b0-bcac-edf3fc7d38b8.png)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b7304209-a466-48b0-bcac-edf3fc7d38b8.png)'
- en: 'Here, all the extension''s code is inside the `SRC` folder. Then, all the objects
    are organized per type, according to the objects that we have defined (there''s
    a subfolder for every object type that we have in our solution). It''s easier
    to find an object with this organization (just go to the object type folder),
    but this project structure has a drawback: it''s not easy to recognize the objects
    that we need in order to implement a particular business functionality in our
    extension project.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，所有扩展的代码都在 `SRC` 文件夹内。然后，所有对象按类型进行组织，根据我们定义的对象（每种对象类型都有一个子文件夹）。这种组织方式使得查找对象更容易（只需进入相应的对象类型文件夹），但是这种项目结构有一个缺点：不容易识别出我们需要哪些对象来实现扩展项目中的特定业务功能。
- en: 'Our suggestion is to try to organize your project tree first by functionality
    and then by object type, as shown in the following screenshot:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议先按功能组织项目树，再按对象类型组织，如下图所示：
- en: '![](img/99fc5863-4178-4171-aa26-d395a490171d.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![](img/99fc5863-4178-4171-aa26-d395a490171d.png)'
- en: Here, in the SRC folder, there are two subfolders: `Functionality1` and `Functionality2`.
    In these folders, objects are organized by type. This is our recommended way of
    working, and this structure helps us find objects by functionality.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，在 `SRC` 文件夹中，有两个子文件夹：`Functionality1` 和 `Functionality2`。在这些文件夹中，对象按类型组织。这是我们推荐的工作方式，这种结构有助于我们按功能查找对象。
- en: In the next section, we'll learn how to name objects in AL and how to use object
    ranges.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将学习如何在 AL 中命名对象，以及如何使用对象范围。
- en: Naming guidelines and AL object ranges
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名规范和 AL 对象范围
- en: 'When creating extensions for Dynamics 365 Business Central, you need to assign
    a numerical ID to your objects. The rules for assigning object IDs are as follows:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在为 Dynamics 365 Business Central 创建扩展时，您需要为对象分配一个数字 ID。分配对象 ID 的规则如下：
- en: '| **Range** | **Purpose** |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| **范围** | **用途** |'
- en: '| 0 – 49,999 | Business Central base application. It cannot be used by partners.
    |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| 0 – 49,999 | Business Central 基础应用程序。合作伙伴不能使用此范围。 |'
- en: '| 5,0000 – 99,999 | Per-tenant extensions (resellers who want to customize
    the delivered solution to the individual needs of a customer). |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| 5,0000 – 99,999 | 每租户扩展（希望根据客户的个别需求定制已交付解决方案的经销商）。 |'
- en: '| 80,000 – 99,999 | Extended objects that you have to modify the permissions
    of in your development license. |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| 80,000 – 99,999 | 需要在开发许可证中修改权限的扩展对象。 |'
- en: '| 100,000 – 999,999 | Reserved for localizing Dynamics 365 Business Central
    for a specific country or region. It cannot be used by partners. |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| 100,000 – 999,999 | 用于为特定国家或地区本地化Dynamics 365 Business Central。合作伙伴不能使用此范围。
    |'
- en: '| 1,000,000 – 69,999,999 | **Registered Solution Program** (**RSP**) range.
    |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| 1,000,000 – 69,999,999 | **注册解决方案计划** (**RSP**) 范围。 |'
- en: '| 70,000,000 – 74,999,999 | Business Central SaaS apps (AppSource). |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: '| 70,000,000 – 74,999,999 | Business Central SaaS 应用程序（AppSource）。 |'
- en: 'Regarding file naming, each `.al` filename must start with the corresponding
    object type prefix and object ID and must be written only with characters [`A-Za-z0-9`].
    The file naming notation (which is mandatory for `AppSource`) should be as follows:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 关于文件命名，每个 `.al` 文件名必须以相应的对象类型前缀和对象 ID 开头，并且只能使用字符 [`A-Za-z0-9`]。文件命名规则（对于 `AppSource`
    是强制要求的）应该如下所示：
- en: 'Full objects: `<ObjectNameExcludingPrefix>.<FullTypeName>.al`'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整对象：`<ObjectNameExcludingPrefix>.<FullTypeName>.al`
- en: 'Extension objects: `<ObjectNameExcludingPrefix>.<FullTypeName>Ext.al`'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展对象：`<ObjectNameExcludingPrefix>.<FullTypeName>Ext.al`
- en: 'For each object type, you can use the following abbreviation (prefixes):'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每种对象类型，您可以使用以下缩写（前缀）：
- en: '| **Object Type** | **Abbreviation (prefix)** |'
  id: totrans-304
  prefs: []
  type: TYPE_TB
  zh: '| **对象类型** | **缩写（前缀）** |'
- en: '| --- | --- |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Page | `Page` |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| 页面 | `Page` |'
- en: '| Page Extension | `PageExt` |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| 页面扩展 | `PageExt` |'
- en: '| Page Customization | `PageCust` |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| 页面自定义 | `PageCust` |'
- en: '| Codeunit | `Codeunit` |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| 代码单元 | `Codeunit` |'
- en: '| Table | `Table` |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| 表 | `Table` |'
- en: '| Table Extension | `TableExt` |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| 表扩展 | `TableExt` |'
- en: '| XML Port | `Xmlport` |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| XML 端口 | `Xmlport` |'
- en: '| Report | `Report` |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| 报告 | `Report` |'
- en: '| Query | `Query` |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| 查询 | `Query` |'
- en: '| Enum | `Enum` |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| 枚举 | `Enum` |'
- en: '| Enum Extension | `EnumExt` |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
  zh: '| 枚举扩展 | `EnumExt` |'
- en: 'As an example, here are some AL objects and their corresponding filenames:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下是一些 AL 对象及其对应的文件名：
- en: Table 50100 *Book* should be called `Book.Table.al`
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表 50100 *书籍* 应命名为 `Book.Table.al`
- en: Page 50100 *Book Card* should be called `BookCard.Page.al`
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面 50100 *书籍卡片* 应命名为 `BookCard.Page.al`
- en: Codeunit 50110 *Book Management* should be called `BookManagement.Codeunit.al`
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码单元 50110 *书籍管理* 应命名为 `BookManagement.Codeunit.al`
- en: Pageextension 50101 `MyCustomerCardExt`, which extends `Customer Card`, should
    be called `CustomerCard.PageExt.al`
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面扩展 50101 `MyCustomerCardExt`，扩展 `客户卡片`，应命名为 `CustomerCard.PageExt.al`
- en: You should also use a prefix/suffix to target your objects (reserved for you
    by Microsoft, as we'll explain later). This allows you to have objects that are
    named in a unique way between extensions, which avoids naming conflicts.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该使用前缀/后缀来标识您的对象（由 Microsoft 为您保留，如下文所述）。这使您能够在扩展之间为对象命名一个唯一的方式，从而避免命名冲突。
- en: 'The rules for using the prefix/suffix are as follows:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前缀/后缀的规则如下：
- en: The prefix/suffix must be at least three characters long.
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前缀/后缀必须至少为三个字符。
- en: The object/field name must start or end with the prefix/suffix.
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象/字段名称必须以前缀/后缀开始或结束。
- en: When you modify a core Dynamics 365 object using a table extension or a page
    extension, the prefix/suffix must be defined at the control/field/action/group
    level.
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您使用表扩展或页面扩展修改核心 Dynamics 365 对象时，前缀/后缀必须在控件/字段/操作/组级别定义。
- en: Use a caption to handle the label that you want in the UI.
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用标题处理您想要在 UI 中显示的标签。
- en: 'For example, if you have reserved the `PACKT` prefix and you want to create
    a field called `CustomerCategory`, the valid field names that you can use are
    as follows:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您已保留 `PACKT` 前缀，并且想要创建一个名为 `CustomerCategory` 的字段，则可以使用以下有效字段名：
- en: '`PACKTCustomerCategory`'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PACKTCustomerCategory`'
- en: '`CustomerCategoryPACKT`'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CustomerCategoryPACKT`'
- en: '`CustomerCategory_PACKT`'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CustomerCategory_PACKT`'
- en: '`CustomerCategory PACKT`'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CustomerCategory PACKT`'
- en: 'If you want to create the *Customer Category* table, the valid names for the
    table object are as follows:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想创建 *客户类别* 表，表对象的有效名称如下：
- en: table 70000000 `PACKT Customer Category`
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表 70000000 `PACKT 客户类别`
- en: table 70000000 `Customer Category PACKT`
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表 70000000 `Customer Category PACKT`
- en: table 70000000 `Customer Category_PACKT`
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表 70000000 `Customer Category_PACKT`
- en: Using the reserved name as a prefix or a suffix is absolutely your choice. We
    prefer to use it as a suffix because it's more natural to find the field with
    Visual Studio IntelliSense (if the field that appears to you in the UI is Customer
    Category, typing these words will present the real field name, along with its
    suffix).
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 使用保留名称作为前缀或后缀完全由您选择。我们建议将其用作后缀，因为在 Visual Studio IntelliSense 中查找字段更自然（如果您在
    UI 中看到的字段是客户类别，输入这些词会呈现实际字段名称及其后缀）。
- en: These guidelines are mandatory for AppSource, but are not mandatory for your
    per-tenant extensions. Our suggestion is to always follow these guidelines.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 这些指南对于 AppSource 是强制性的，但对于您的每租户扩展并非强制执行。我们的建议是始终遵循这些指南。
- en: To register a prefix/suffix for your objects, you need to send an email to `d365val@microsoft.com` specifying
    the name you want to reserve for your app. Remember that the prefix/suffix should
    be app-based and not company-based.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 要为您的对象注册前缀/后缀，您需要发送电子邮件到 `d365val@microsoft.com`，并指定您希望为应用保留的名称。请记住，前缀/后缀应该是基于应用的，而不是基于公司的。
- en: Working on AL coding guidelines
  id: totrans-340
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AL 编码指南工作中
- en: When creating your AL project (and your `.al` files), remember to always follow
    these main guidelines.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 AL 项目（和 `.al` 文件）时，请记住始终遵循这些主要指南。
- en: 'Inside a `.al` code file, the structure for all your objects must follow this
    sequence:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `.al` 代码文件中，所有对象的结构必须遵循以下顺序：
- en: Properties
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性
- en: 'Object-specific constructs:'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定对象结构：
- en: Table fields
  id: totrans-345
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表字段
- en: Page layout
  id: totrans-346
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面布局
- en: Actions
  id: totrans-347
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作
- en: 'Global variables:'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局变量：
- en: Labels (old text constants)
  id: totrans-349
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签（旧文本常量）
- en: Global variables
  id: totrans-350
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局变量
- en: Methods
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法
- en: 'Remember to always reference the AL objects by their object name and not by
    their ID. So, for example, this is how you reference a `Record` variable or a
    `Page` variable:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，始终通过对象名称而非对象 ID 来引用 AL 对象。例如，以下是如何引用 `Record` 变量或 `Page` 变量：
- en: '[PRE32]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In an event subscriber object, this is how you should reference the publisher
    object:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 在事件订阅者对象中，应该这样引用发布者对象：
- en: '[PRE33]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'So, let''s sum this up:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们总结一下：
- en: '**Format your AL code**: Take care of indentation and spacing (it keeps the
    code more readable). You can use *Alt* + *Shift* + *F* to auto-format your code.'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**格式化你的 AL 代码**：注意缩进和空格（它保持代码的可读性）。你可以使用 *Alt* + *Shift* + *F* 来自动格式化代码。'
- en: '**Keep your .al files clean**: When using snippets, they automatically create
    an object skeleton with methods, properties, variables, triggers, or sections
    that you might not be using. Please remove all the code that isn''t being used.
    A typical example is triggers definitions on tables (which you can remove if you''re
    not handling them) or global variables inside objects (if you don''t remove them,
    your app will be full of myInt: integer variables).'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保持你的 .al 文件整洁**：使用代码片段时，它们会自动创建带有方法、属性、变量、触发器或你可能未使用的部分的对象骨架。请删除所有未使用的代码。一个典型的例子是表格上的触发器定义（如果你没有处理它们，可以删除）或对象中的全局变量（如果不删除，它们会导致你的应用充满
    `myInt: integer` 变量）。'
- en: '**Method declarations**: Be as local as possible. Only use global methods if
    you need to expose them to other objects.'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方法声明**：尽量保持本地化。只有在需要将其暴露给其他对象时，才使用全局方法。'
- en: '**Use events to trigger business logic, but** **do not code in these triggers**: Putting
    a lot of code inside triggered events is just like putting a lot of code into
    field validation triggers. Identify your methods instead and call them from the
    triggered events.'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用事件触发业务逻辑，但** **不要在这些触发器中编写代码**：将大量代码放入触发事件中，就像把大量代码放入字段验证触发器中一样。应识别你的方法并从触发事件中调用它们。'
- en: 'For complex code, you can start using the *Generic Method* pattern:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 对于复杂代码，你可以开始使用 *通用方法* 模式：
- en: Declare each method on its class (table).
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在其类（表格）中声明每个方法。
- en: Each method is a codeunit on its own (encapsulation).
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个方法都是一个独立的代码单元（封装）。
- en: Invoke a method only from its class (table/codeunit).
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅从其类（表格/代码单元）中调用方法。
- en: Each method's codeunit only has one global function.
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个方法的代码单元只有一个全局函数。
- en: 'Local functions include the following categories (in this order):'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地函数包括以下类别（按此顺序）：
- en: Main (one function; a method header in the form of a readable flowchart)
  id: totrans-367
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主函数（一个函数；以可读流程图形式呈现的方法头）
- en: Main business process (multiple functions)
  id: totrans-368
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主要业务流程（多个函数）
- en: UI wrapper (two functions)
  id: totrans-369
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: UI 包装器（两个函数）
- en: Business extension (one or more functions to provide extensibility)
  id: totrans-370
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 业务扩展（一个或多个函数提供可扩展性）
- en: Event wrapper (two functions)
  id: totrans-371
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 事件包装器（两个函数）
- en: 'This is an example of some AL code that''s been organized according to this
    pattern:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 这是根据此模式组织的一些 AL 代码示例：
- en: '![](img/a7f27459-d4c4-42bf-bc77-8f6805fc6b2d.png)'
  id: totrans-373
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a7f27459-d4c4-42bf-bc77-8f6805fc6b2d.png)'
- en: You can find more information regarding other coding rules to follow at [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/compliance/apptest-bestpracticesforalcode](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/compliance/apptest-bestpracticesforalcode).
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/compliance/apptest-bestpracticesforalcode](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/compliance/apptest-bestpracticesforalcode)
    上找到有关其他编码规则的更多信息。
- en: Respecting coding rules and guidelines is extremely important for increasing
    code readability, and many of these rules are mandatory for AppSource.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 遵守编码规则和指南对于提高代码可读性非常重要，而且这些规则中的许多是 AppSource 强制要求的。
- en: Summary
  id: totrans-376
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at the fundamentals of extension development with
    the AL Language, along with an overview of the main objects for creating applications
    (tables, pages, codeunits, and so on) and how to create them in Visual Studio
    Code. Then, we had an overview of the best practices for handling an AL project
    (project organization, object IDs, naming conventions) and guidelines for writing
    better code by focusing on the extensibility aspect of our extensions.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了使用 AL 语言进行扩展开发的基础知识，并概述了创建应用程序的主要对象（表格、页面、代码单元等）以及如何在 Visual Studio
    Code 中创建它们。接着，我们回顾了处理 AL 项目的最佳实践（项目组织、对象 ID、命名约定），并提供了编写更好代码的指南，重点关注我们扩展的可扩展性方面。
- en: We learned how to create objects, how to create an AL project, how to handle
    its structure, and how to stick to naming conventions with objects.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何创建对象，如何创建 AL 项目，如何处理其结构，以及如何遵守对象命名规范。
- en: In the next chapter, we'll implement a real-word extension for Dynamics 365
    Business Central by applying all these rules and best practices.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将通过应用所有这些规则和最佳实践，为 Dynamics 365 Business Central 实现一个现实世界的扩展。
