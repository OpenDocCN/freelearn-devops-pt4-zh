- en: Source Control Management and DevOps with Business Central
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与Business Central的源代码管理和DevOps
- en: Developing applications without using source code management is like driving
    without wearing a seat belt. Creating an app that must be supported for years
    and will be extended and modified to fit new requirements without knowing who
    wrote which code and why it was written is like going to the wilderness without
    a map and compass. Maybe you will manage to get through one day, but there will
    be nobody left with you.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有使用源代码管理的情况下开发应用程序，就像开车时没有系安全带。创建一个必须支持多年的应用，并且需要根据新的需求进行扩展和修改，而不知道是谁写了哪些代码以及为何这样写，就像在没有地图和指南针的情况下进入荒野。也许你能勉强度过一天，但再也没有人和你在一起。
- en: By using Visual Studio Code to develop our app, we have all of the tools we
    need. The tools are **Git** for source code management and **Azure DevOps** for
    managing your app development, which will tighten cooperation between development
    and operation.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用Visual Studio Code来开发我们的应用程序，我们拥有所需的所有工具。工具包括**Git**用于源代码管理，**Azure DevOps**用于管理应用开发，这将加强开发与运维之间的合作。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Understanding Azure DevOps and what it offers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Azure DevOps及其提供的功能
- en: Managing tasks, sprints, and boards in Azure DevOps
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Azure DevOps中管理任务、冲刺和看板
- en: Creating a repository for your code
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为你的代码创建一个代码库
- en: Managing repositories
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理仓库
- en: Branching policies
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分支策略
- en: Branching strategies
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分支策略
- en: Understanding Git merge strategies
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Git合并策略
- en: Exploring Git with Visual Studio Code
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Visual Studio Code探索Git
- en: Understanding Azure DevOps Pipelines
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Azure DevOps管道
- en: Understanding the YAML pipeline
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解YAML管道
- en: Understanding Azure DevOps and what it offers
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Azure DevOps及其提供的功能
- en: 'Perhaps you have heard terms such as *Team Foundation Server*, *Team Foundation
    Service*, *TFS*, or *Visual Studio Team Services—*all of this is now **Azure DevO****ps**.
    You can find all that you need to develop your software in a team in Azure DevOps,
    such as the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你听过像*Team Foundation Server*、*Team Foundation Service*、*TFS*或*Visual Studio
    Team Services*这样的术语——这些现在统称为**Azure DevOps**。在Azure DevOps中，你可以找到开发团队所需的一切，例如：
- en: '**Azure Pipelines**: This provides CI/CD for any language, platform, and cloud.
    It looks like this:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Pipelines**：它为任何语言、平台和云提供CI/CD。它看起来像这样：'
- en: '![](img/4c0dc6df-2476-4bf5-a532-a357452a50de.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4c0dc6df-2476-4bf5-a532-a357452a50de.png)'
- en: '**Azure Boards**: This is the area where you can track your project activities
    by using Kanban boards, backlogs, team dashboards, and reporting. It looks like
    this:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Boards**：这是你可以通过使用看板、待办事项、团队仪表板和报告来跟踪项目活动的区域。它看起来像这样：'
- en: '![](img/19644b93-c057-463d-94c1-ded0d05af54b.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/19644b93-c057-463d-94c1-ded0d05af54b.png)'
- en: '**Azure Artifacts**: This is a tool for saving and distributing packages. It
    looks like this:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Artifacts**：这是一个用于保存和分发包的工具。它看起来像这样：'
- en: '![](img/8901dfeb-f1cc-4fb2-9f1c-1f03436a718b.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8901dfeb-f1cc-4fb2-9f1c-1f03436a718b.png)'
- en: '**Azure Repos**: This has cloud-hosted private and public Git repositories. It
    looks like this:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Repos**：这提供云托管的私有和公共Git仓库。它看起来像这样：'
- en: '![](img/126f9e00-6804-4ef0-acd4-8a7693966586.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/126f9e00-6804-4ef0-acd4-8a7693966586.png)'
- en: '**Azure Test Plans**: This has tools for planned and exploratory testing. It
    looks like this:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Test Plans**：这提供用于计划和探索性测试的工具。它看起来像这样：'
- en: '![](img/7124f58a-d242-47d1-862c-876767520493.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7124f58a-d242-47d1-862c-876767520493.png)'
- en: Of course, you do not need to use all of the available tools. You can begin
    with Azure Repos, then add Azure Pipelines and connect all of this to Azure Boards.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你不需要使用所有可用的工具。你可以从Azure Repos开始，然后添加Azure Pipelines并将所有这些连接到Azure Boards。
- en: Since you get five users for free, there is no cost associated with using these
    tools. And if your developers have MSDN subscriptions, they already have the license
    for Azure DevOps included. If this is not enough for you, you can buy additional
    licenses (from $6 per user per month—see [https://azure.microsoft.com/en-us/pricing/details/devops/](https://azure.microsoft.com/en-us/pricing/details/devops/)).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你可以免费获得五个用户，因此使用这些工具没有任何费用。如果你的开发人员有MSDN订阅，他们已经包括了Azure DevOps的许可证。如果这对你来说还不够，你可以购买额外的许可证（每个用户每月从$6起—请参见[https://azure.microsoft.com/en-us/pricing/details/devops/](https://azure.microsoft.com/en-us/pricing/details/devops/))。
- en: If your company domain is connected to **Azure Active Directory** (**AAD**),
    you can manage access to Azure DevOps by using these accounts and groups. It means
    your users do not need another account just to work with all of this.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的公司域连接到**Azure Active Directory**（**AAD**），你可以通过这些账户和组来管理 Azure DevOps 的访问。这意味着你的用户无需额外的账户即可处理所有相关事务。
- en: Creating an Azure DevOps account and project
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Azure DevOps 账户和项目
- en: 'On **Azure DevOps**, you can have multiple accounts. On each account, you can
    have multiple projects. When you create a new project with Azure DevOps, the resulting
    project URL will look like the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在**Azure DevOps**中，你可以拥有多个账户。在每个账户下，你可以有多个项目。当你使用 Azure DevOps 创建一个新项目时，生成的项目
    URL 会如下所示：
- en: '[https://dev.azure.com/myaccount/myproject](https://dev.azure.com/myaccount/myproject)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://dev.azure.com/myaccount/myproject](https://dev.azure.com/myaccount/myproject)'
- en: Let's begin by creating a new account on Azure DevOps. You can choose whether
    you will use Microsoft accounts to access Azure DevOps or use your company's AAD
    accounts.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建一个新的 Azure DevOps 账户开始。你可以选择使用 Microsoft 账户访问 Azure DevOps，或使用公司的 AAD
    账户。
- en: If you use a personal account to create the Azure DevOps, you can transfer ownership
    to the company account later.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用个人账户创建 Azure DevOps 账户，之后可以将所有权转移到公司账户。
- en: 'To create a new Azure DevOps account, follow these steps:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新的 Azure DevOps 账户，请按照以下步骤进行：
- en: Go to [https://go.microsoft.com/fwlink/?LinkId=307137](https://go.microsoft.com/fwlink/?LinkId=307137)
    and sign in with your Microsoft or AAD account.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [https://go.microsoft.com/fwlink/?LinkId=307137](https://go.microsoft.com/fwlink/?LinkId=307137)
    并使用你的 Microsoft 或 AAD 账户登录。
- en: Read through and accept the Terms of Service, Privacy Statement, and Code of
    Conduct. Click Continue.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 阅读并接受《服务条款》、《隐私声明》和《行为准则》。点击继续。
- en: If you have already used your account with Azure DevOps, you can create a new
    organization with the New Organization button.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你已经使用你的账户在 Azure DevOps 上工作，你可以通过点击“新建组织”按钮来创建一个新的组织。
- en: Enter the name of your organization and select the location to host your projects.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入你的组织名称并选择托管项目的区域。
- en: Now, you can create your first project. Select if it will be Public (accessible
    by anyone) or Private (accessible only by users you give access to).
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以创建你的第一个项目。选择该项目是公开的（任何人都可以访问）还是私有的（仅限你授权的用户访问）。
- en: 'You are now the owner of a new Azure DevOps account and project; congratulations!
    The following screenshot shows this:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在是新 Azure DevOps 账户和项目的拥有者，恭喜！以下截图展示了这一点：
- en: '![](img/88cfb5c0-5638-49ae-a5e8-10e5142558bf.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/88cfb5c0-5638-49ae-a5e8-10e5142558bf.png)'
- en: If you have access to multiple Azure DevOps accounts, you can freely switch
    between them and create projects in them, if you have permission.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你拥有多个 Azure DevOps 账户，你可以在它们之间自由切换，并在其中创建项目，前提是你拥有相应的权限。
- en: By default, the new project will be using a **Git** repository and an **Agile**
    work item process template. You can change the process to **Scrum** if you prefer
    product backlog items to user stories and impediments to issues (among other differences,
    which are described at [https://docs.microsoft.com/en-us/azure/devops/boards/work-items/guidance/choose-process](https://docs.microsoft.com/en-us/azure/devops/boards/work-items/guidance/choose-process)).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，新的项目将使用**Git** 仓库和**敏捷**工作项流程模板。如果你更倾向于将产品待办事项视为用户故事，将障碍视为问题（以及其他一些差异，详见[https://docs.microsoft.com/en-us/azure/devops/boards/work-items/guidance/choose-process](https://docs.microsoft.com/en-us/azure/devops/boards/work-items/guidance/choose-process)），你可以将流程更改为**Scrum**。
- en: You can create a project per product/customer, or you can use one project for
    everything and use other tools to group things together per product/customer.
    It depends on whether there are separate groups working on the projects or you
    are sharing resources between projects.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以为每个产品/客户创建一个项目，或者你也可以将所有内容放在一个项目中，并使用其他工具按产品/客户将内容分组。这取决于是否有不同的团队在各自的项目上工作，或者你是否在项目之间共享资源。
- en: I recommend starting with one project where you have one backlog (queue) for
    prioritizing the work for the team. If you have two queues or two separate teams,
    you can use separate projects.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议从一个项目开始，该项目包含一个待办事项列表（队列），用来为团队优先安排工作。如果你有两个队列或两个独立的团队，可以使用不同的项目。
- en: Managing tasks, sprints, and boards in Azure DevOps
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Azure DevOps 中管理任务、冲刺和看板
- en: '**Azure DevOps** is an essential tool for managing Dynamics 365 Business Central
    projects, starting from the very early stages of the project. By using the Boards
    feature, you can start managing your project''s tasks, features, bugs, and general
    activities in a centralized way.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**Azure DevOps** 是管理 Dynamics 365 Business Central 项目的一个重要工具，从项目的早期阶段开始。通过使用
    Boards 功能，你可以开始集中管理项目的任务、功能、缺陷和一般活动。'
- en: 'In your Azure DevOps project, if you click on Boards, you get the following
    options:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 Azure DevOps 项目中，如果你点击 Boards，你会看到以下选项：
- en: '![](img/f8c68a95-9e84-465f-922e-7d7dd8f77087.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f8c68a95-9e84-465f-922e-7d7dd8f77087.png)'
- en: 'Here is a brief description of the available options (we''ll see them in detail
    later):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可用选项的简要描述（我们稍后会详细查看）：
- en: 'Work Items: Here, you can manage the list of your activities (activities that
    are assigned to you or that you follow, or your team''s activities).'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Work Items：在这里，你可以管理你的活动列表（分配给你或你跟踪的活动，或你团队的活动）。
- en: 'Boards: Here, you can access your Board view.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Boards：在这里，你可以访问你的看板视图。
- en: 'Backlogs: Here, you can access your product backlogs are a list of work items
    that a project team plans to develop and deliver.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Backlogs：在这里，你可以访问你的产品待办事项，它是一个项目团队计划开发和交付的工作项列表。
- en: 'Sprints: Here, you can manage your project''s iterations (in Scrum methodology,
    a sprint is normally defined as a period of not more than three weeks where tasks
    are grouped and must be completed).'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sprints：在这里，你可以管理项目的迭代（在 Scrum 方法论中，冲刺通常定义为一个不超过三周的时间段，其中任务被分组并必须完成）。
- en: 'Queries: This is an area where you can set up your queries to find and list
    work items.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Queries：这是一个可以设置查询来查找和列出工作项的区域。
- en: As a project manager, the first thing you can do is to select Backlogs and create
    a product backlog for your project (a product backlog corresponds to your project
    plan—the roadmap that your team plans to deliver).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 作为项目经理，你可以做的第一件事是选择 Backlogs，并为你的项目创建一个产品待办事项（产品待办事项对应你的项目计划——你的团队计划交付的路线图）。
- en: 'Here, you can create phases and work items (tasks, bugs, and so on) and assign
    tasks to your team''s users. The following screenshot shows this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以创建阶段和工作项（任务、缺陷等），并将任务分配给团队的用户。下图显示了这一点：
- en: '![](img/86129be1-7047-440e-882d-bfcbdd7e4da1.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/86129be1-7047-440e-882d-bfcbdd7e4da1.png)'
- en: 'In the following screenshot, we have defined some work items whose type is Product
    Backlog Item. These items correspond to a group of activities. Under each of these
    Product Backlog Items, we have the corresponding tasks. Each task has its own
    **state** (To Do, In Progress, or Done), a description, and an associated priority:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，我们定义了一些类型为产品待办事项（Product Backlog Item）的工作项。这些工作项对应一组活动。在每个产品待办事项下，我们有相应的任务。每个任务都有自己的**状态**（待办、进行中或完成），描述，以及一个优先级：
- en: '![](img/f2a7e0a7-95b9-46ff-a7df-8a8619c51ec5.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f2a7e0a7-95b9-46ff-a7df-8a8619c51ec5.png)'
- en: On the right-hand side of the Backlog page, you have the Sprint panel.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Backlog 页面右侧，你有一个 Sprint 面板。
- en: According to the Scrum methodology, teams plan and track work at regular time
    intervals, referred to as a *sprint cadence*. You can define sprints to correspond
    to the cadence your team uses for your project.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 Scrum 方法论，团队以固定的时间间隔计划和跟踪工作，这个时间间隔被称为 *冲刺节奏*。你可以定义冲刺，以对应你的团队在项目中使用的节奏。
- en: In Azure DevOps, you can select a **sprint**, define the start and end date,
    and then assign activities from Backlog to a specific sprint by dragging the activities
    (in the preceding screenshot, for example, I assigned the Customer Category Development activity
    to Sprint 2).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure DevOps 中，你可以选择一个 **冲刺**，定义开始和结束日期，然后通过拖放活动将来自 Backlog 的活动分配到特定的冲刺（例如，在上图中，我将“客户类别开发”活动分配到了
    Sprint 2）。
- en: 'After scheduling activities and sprints for your project, there are also some
    other interesting views available. If you click on Work Items, you can see the
    work items status (such as the work items assigned to you, all work items, and
    recently created work items):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在为你的项目安排活动和冲刺后，还有一些其他有趣的视图可供使用。如果你点击 Work Items，你可以查看工作项的状态（例如，分配给你的工作项、所有工作项和最近创建的工作项）：
- en: '![](img/efae64a6-c3a1-48c8-b80d-f7b81b2a601e.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efae64a6-c3a1-48c8-b80d-f7b81b2a601e.png)'
- en: 'If you click on Boards, you can have a board of your project (a view of your
    project''s tasks as a card ordered by status; you can drag and drop tasks to change
    their status):'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击 Boards，你可以看到项目的看板（以卡片形式按状态排序的任务视图；你可以拖放任务来更改其状态）：
- en: '![](img/3b0c73ab-5195-4a68-a99f-32ad3e2efa9a.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3b0c73ab-5195-4a68-a99f-32ad3e2efa9a.png)'
- en: 'If you select Sprints, you can see details of every sprint (iteration path)
    defined in your project. Here, you can have a Taskboard view and you can see the
    sprint backlog and capacity:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择冲刺（Sprints），你可以查看项目中定义的每个冲刺（迭代路径）的详细信息。在这里，你可以查看任务板（Taskboard）视图，并查看冲刺待办事项和容量：
- en: '![](img/0fc64d6c-0f37-47fa-a716-87938d2acfcc.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0fc64d6c-0f37-47fa-a716-87938d2acfcc.png)'
- en: From here, you can monitor the progress of every sprint and the activities associated
    with every task.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以监控每个冲刺的进度以及与每个任务相关的活动。
- en: 'On the Queries page, you can define custom queries to retrieve work items.
    Here, I''ve defined a query to immediately see all tasks declared as completed
    in my project:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在查询页面，你可以定义自定义查询来检索工作项。在这里，我定义了一个查询，用于立即查看我项目中已声明完成的所有任务：
- en: '![](img/a7596d60-4315-4f5f-9dcd-4505404f28b1.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a7596d60-4315-4f5f-9dcd-4505404f28b1.png)'
- en: 'When executed, the query returns the desired results (which can be viewed in
    different formats):'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 执行时，查询返回所需的结果（可以以不同的格式查看）：
- en: '![](img/603b2c19-214c-42ef-9b15-b1234644edb2.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/603b2c19-214c-42ef-9b15-b1234644edb2.png)'
- en: Another interesting feature is what is called the Delivery Plans. Delivery Plans display
    work items as cards along with a timeline or calendar view. It is very useful
    to see expected release dates or delivery dates for your team's activities.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的功能是所谓的 Delivery Plans。Delivery Plans 将工作项以卡片形式展示，并配有时间线或日历视图。它非常有用，可以查看团队活动的预期发布或交付日期。
- en: 'Delivery Plans is not a standard feature, and to get it, you need to download
    and install an Azure DevOps extension from the Marketplace (click on the bag icon
    in the top-right corner of your page). The extension is shown here:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Delivery Plans 不是一个标准功能，要获取它，你需要从市场下载并安装 Azure DevOps 扩展（点击页面右上角的袋子图标）。扩展如下所示：
- en: '![](img/0d76ccf7-8f5c-4c73-8dd7-225c0fea6de7.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0d76ccf7-8f5c-4c73-8dd7-225c0fea6de7.png)'
- en: 'When it''s installed, you have a new menu called Plans on the left and, if
    you click on it, you can see your project delivery plan in a timeline:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你会在左侧看到一个名为 Plans 的新菜单，点击它，你可以在时间线上查看你的项目交付计划：
- en: '![](img/59b981a6-ebf3-412f-a7ff-8ded0a0051e5.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/59b981a6-ebf3-412f-a7ff-8ded0a0051e5.png)'
- en: The coolest part is that all of these project management features are available
    in a single tool and are totally integrated with the development tools you use
    every day (such as Visual Studio Code). In Visual Studio Code you can, for example,
    commit your code and attach the commit to a task assigned to you. In this way,
    you have a complete product life cycle and a project manager can check what code
    modifications have been made to develop or solve a particular task or problem.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最酷的部分是，所有这些项目管理功能都可以在一个工具中使用，并且与日常使用的开发工具（例如 Visual Studio Code）完全集成。在 Visual
    Studio Code 中，你可以例如提交代码并将该提交关联到分配给你的任务。通过这种方式，你可以拥有完整的产品生命周期，项目经理可以查看为开发或解决特定任务或问题所做的代码修改。
- en: 'For example, if we select the completed Customer Category development task
    and click on Links, we can see all of the task''s details. In particular, with
    the History link, we can see the entire history of the tasks:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们选择已完成的客户类别开发任务，并点击链接，我们可以看到任务的所有详细信息。特别是，通过历史（History）链接，我们可以查看任务的整个历史：
- en: '![](img/0b41e438-b7fb-433f-9cc2-40fd6fb9563e.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0b41e438-b7fb-433f-9cc2-40fd6fb9563e.png)'
- en: 'If we click on Links, we can see all of the commits related to this task. Here,
    we can see that, for this task, we have three commits and a pull request:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击链接，我们可以看到与该任务相关的所有提交。在这里，我们可以看到，对于此任务，我们有三个提交和一个拉取请求：
- en: '![](img/fa66cca1-43e4-4913-9544-ca854510d65c.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fa66cca1-43e4-4913-9544-ca854510d65c.png)'
- en: 'If you select a particular commit, you can see the details of the code modifications:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择特定的提交，你可以查看代码修改的详细信息：
- en: '![](img/f61199ab-c56a-4928-bd3d-e58c76430ff7.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f61199ab-c56a-4928-bd3d-e58c76430ff7.png)'
- en: As you can see, you have complete control over all of the aspects of your project
    from a single portal and a unified interface.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，你可以从单一门户和统一界面中完全控制项目的各个方面。
- en: Creating a repository for your code
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建代码库
- en: Repositories are there to keep your source code safe, secure, and available
    when needed. Azure DevOps offers unlimited repositories. Having this secure store
    with unlimited space for free is a great way to calm your nerves if a notebook is stolen
    or hardware breaks. And you can access it from everywhere; no is VPN needed. Additionally,
    you can easily connect the changes to requirements (work items) to find out why
    something was done and by whom.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库的目的是为了将你的源代码保存在安全、可靠并且在需要时可以访问的地方。Azure DevOps 提供了无限制的仓库。拥有这样一个安全的存储空间，并且不限空间，免费提供，这对于当笔记本被盗或硬件损坏时，可以大大缓解你的焦虑。而且你可以随时随地访问它；不需要
    VPN。此外，你还可以轻松地将更改与需求（工作项）连接起来，了解某些操作的原因以及是谁完成的。
- en: 'To create a new repository, follow these steps:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新仓库，按照以下步骤操作：
- en: Go to the Repos section of Azure DevOps.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 Azure DevOps 的 Repos 部分。
- en: Expand the repository selection at the top (you can manage existing repositories,
    import repositories, or create a new one).
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开顶部的仓库选择（你可以管理现有仓库，导入仓库或创建新仓库）。
- en: Select New Repository.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择新仓库。
- en: Enter a name.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入名称。
- en: Click Create.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击创建。
- en: 'In a while, your new repository is available, and the main page gives you all
    of the information you need to fill the repository with your code. The following
    screenshot shows this:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 不久后，你的新仓库就可以使用了，主页面会提供你所需要的所有信息，帮助你将代码填充到仓库中。以下截图展示了这一点：
- en: '![](img/d0a773c5-6c39-4108-a6ea-566773002e17.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d0a773c5-6c39-4108-a6ea-566773002e17.png)'
- en: 'In the main page of the repository we''ve just created, you have links for
    the following features:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们刚创建的仓库主页面上，你可以找到以下功能的链接：
- en: 'Clone to your computer: You can use the project''s URL with Git to clone the
    repository, or click Clone in VS Code to open Visual Studio Code (or some other
    supported development tool), select the target folder, and let Visual Studio Code
    clone the repository to your local disk. Then, you can fill it with your source
    code as you wish.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 克隆到你的计算机：你可以使用项目的 URL 和 Git 来克隆仓库，或者点击 VS Code 中的 Clone 按钮来打开 Visual Studio
    Code（或其他支持的开发工具），选择目标文件夹，然后让 Visual Studio Code 将仓库克隆到本地磁盘。然后，你可以根据需要将源代码填充进去。
- en: 'Push an existing repository from the command line: Copy the commands, go to
    your local repository, and run the commands, and your local repository will be
    connected to this new Azure DevOps repository and will be pushed into it.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从命令行推送现有仓库：复制命令，转到你的本地仓库并运行这些命令，你的本地仓库将与这个新的 Azure DevOps 仓库连接，并将推送到其中。
- en: 'Import a repository: If you have a Git repository somewhere else and you want
    to import it, just enter the URL and the current state will be imported.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入仓库：如果你在其他地方有一个 Git 仓库，想要将其导入，只需输入 URL，当前状态将被导入。
- en: 'Initialize with `README` or `gitignore`: If you want, just create `README`
    with a project description or just a `.gitignore` file and you will fill the repository
    later with something else.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `README` 或 `gitignore` 初始化：如果你愿意，可以只创建一个包含项目描述的 `README` 文件，或者仅创建一个 `.gitignore`
    文件，稍后再向仓库中添加其他内容。
- en: Next, let's see how to manage repositories.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们来看一下如何管理仓库。
- en: Managing repositories
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理仓库
- en: 'In each repository you create, you can set multiple settings. We will go through
    the most interesting ones. You can manage repositories by clicking on Project
    Settings | Repos | Repositories:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在你创建的每个仓库中，你可以设置多个设置。我们将介绍其中最有趣的设置。你可以通过点击项目设置 | Repos | 仓库来管理仓库：
- en: '![](img/6382c3b3-9f58-4a62-9003-3a4764483e66.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6382c3b3-9f58-4a62-9003-3a4764483e66.png)'
- en: On the repository's settings page, we can manage the main settings, which we'll
    see in the following sections.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在仓库的设置页面中，我们可以管理主要设置，我们将在接下来的章节中查看这些设置。
- en: Security
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全
- en: 'You can assign groups and set permissions for all repositories and refine them
    for each repository and even per branch or tag as needed. I recommend to check
    which users can do the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以为所有仓库分配组并设置权限，也可以根据需要为每个仓库、每个分支或标签进行细化设置。我建议检查哪些用户可以执行以下操作：
- en: Delete the repository
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除仓库
- en: Force push (this could rewrite the history in the repository)
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制推送（这可能会重写仓库中的历史记录）
- en: Create a repository
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建仓库
- en: Bypass policies
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳过策略
- en: If you set the right settings, you can prevent the loss of your code.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你设置了正确的配置，可以防止代码丢失。
- en: Options
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选项
- en: 'On all Git repositories and each separate repository, you can set the following
    things:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有 Git 仓库和每个单独的仓库中，你可以设置以下内容：
- en: '**Cross-platform compatibility**: This ensures that the settings are set to
    prevent problems with file/folder names that differ only by case. Git is case-sensitive
    and will allow the developer to add `File.txt` and `file.txt` as two separate
    files. But Windows and iOS are case-insensitive and will have problems in this
    regard. A best practice is to be consistent in naming and not to create such a
    file. Enabling the options in the repository will force developers to keep the
    names unique. And because even tags and branches are files internally in Git,
    the conflict could exist even in tag and branch names.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨平台兼容性**：这确保设置能够防止因文件/文件夹名称仅因大小写不同而导致的问题。Git 是区分大小写的，允许开发者将 `File.txt` 和
    `file.txt` 作为两个独立的文件添加。但 Windows 和 iOS 不区分大小写，因此在这方面会出现问题。最佳实践是命名保持一致，避免创建此类文件。启用仓库中的选项将强制开发者保持名称唯一。因为即使标签和分支在
    Git 内部也是文件，所以标签和分支名称也可能存在冲突。'
- en: '**Forks**: If you do not want to allow users to create forks from the repository,
    you can disable this function. A fork is a copy of the repository that maintains
    a connection to the original repository. A developer can create a pull request
    to transfer changes from one repository to another, using forks. It is using the
    fact that Git is a distributed system and one repository can exist in multiple
    places (multiple servers or multiple repositories on one server—it doesn''t matter).'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Fork**：如果您不希望允许用户从仓库创建 Fork，您可以禁用此功能。Fork 是仓库的副本，并保持与原始仓库的连接。开发者可以使用 Fork
    创建拉取请求，将更改从一个仓库传输到另一个仓库。Git 是一个分布式系统，一个仓库可以存在于多个地方（多个服务器或同一服务器上的多个仓库——都可以）。'
- en: '**Work item management (per repository)**: Keep this enabled to be able to
    connect your commit to existing work items. In this way, you will have information
    about what was done for each requirement, and you will even be able to say which
    changes are part of each build or release of your application. This could help
    you to create a change log for each version.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作项管理（每个仓库）**：保持此设置开启，以便将提交与现有工作项连接。通过这种方式，您将获得每个需求所做的工作的信息，甚至可以知道哪些更改是每个构建或发布版本的一部分。这有助于为每个版本创建变更日志。'
- en: '**Code search branches (per repository)**: You can select up to five branches
    per repository to be indexed for code search. The files from these branches will
    be searchable by the search function of Azure DevOps. Just enter the text you
    want to search for and Azure DevOps will quickly find it in all your repositories.
    It''s a very handy tool.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码搜索分支（每个仓库）**：您可以为每个仓库选择最多五个分支进行代码搜索索引。这些分支中的文件将可以通过 Azure DevOps 的搜索功能进行搜索。只需输入您想搜索的文本，Azure
    DevOps 将在所有仓库中快速找到它。这是一个非常方便的工具。'
- en: '**Branching Policies (per branch)**: See the *Branching policies*section.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分支策略（每个分支）**：请参见*Branching policies*部分。'
- en: Let's see these branching policies in the next section.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节中查看这些分支策略。
- en: Branching policies
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分支策略
- en: To maintain the quality of your app, you can define policies that must be met
    before changes from the developer can be integrated into the selected branch.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持应用程序的质量，您可以定义一些必须满足的政策，才能将开发者的更改合并到选定的分支中。
- en: 'Mostly, the policy is defined on the *master* branch, but it could be any branch
    you want to keep healthy. If you define the policy for a branch, changes cannot
    be pushed into this branch directly, but only through Pull Requests (PRs). See
    the *Pull request* section for more details. In this way, each change is checked
    and tested, and if the policy is not met, the change will not make it into the
    branch. You can define the following in the policy:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，政策是在*master*分支上定义的，但它也可以是您希望保持健康的任何分支。如果您为某个分支定义了策略，则不能直接将更改推送到该分支，只能通过 Pull
    Request（PR）进行。有关更多详细信息，请参见*Pull request*部分。通过这种方式，每个更改都会被检查和测试，如果不符合政策，该更改将无法进入分支。您可以在策略中定义以下内容：
- en: '**The minimum number of reviewers**: This is how many reviewers must approve
    the PR to be accepted.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最少审阅者数量**：这是指必须有多少位审阅者批准 PR 才能被接受。'
- en: '**Check for linked work items**: This forces developers to associate the PR
    with work items to have links between requirements and changes.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查关联的工作项**：这强制开发者将 PR 与工作项关联，以建立需求和更改之间的链接。'
- en: '**Check for comment resolution**: If the reviewer wrote some comment, the comment
    must be resolved before the PR is accepted.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查评论是否解决**：如果审阅者写了评论，则必须在接受 PR 之前解决这些评论。'
- en: '**Enforce a merge strategy**: You can prohibit a fast-forward merge (you lose
    some detail but gain simplicity) or enforce a squash merge, which will condense
    all commits from the developer into one new commit on the target branch.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**强制合并策略**：你可以禁止快速前进合并（虽然失去了一些细节，但得到了简化），或者强制使用压缩合并，这将把开发者的所有提交合并为目标分支上的一个新提交。'
- en: '**Build validation**: You can define a build pipeline that will be used to
    build and test the changes. If the build succeeds, the PR could be accepted. Failing
    the build may prevent the PR from being accepted (optional behavior). In this
    way, you can keep the branch healthy.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建验证**：你可以定义一个构建管道，用来构建和测试更改。如果构建成功，PR 可以被接受。构建失败可能会阻止 PR 被接受（可选行为）。通过这种方式，你可以保持分支的健康状态。'
- en: '**Automatically include code reviewers**: This defines user groups or users
    that will be used as reviewers by default. Reviewers could be chosen by specific
    changes, for example, when a script file or the settings of the app are changed,
    the responsible person will be added as a reviewer automatically.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动包括代码审查员**：这定义了将默认作为审查员的用户组或用户。审查员可以根据特定的更改来选择，例如，当脚本文件或应用程序的设置发生更改时，负责人将被自动添加为审查员。'
- en: Some developers tend to view branching policies as just additional hurdles in
    their way, but it is a great opportunity to grow your team and improve the quality
    through the reviews. It gives the team a chance to learn from each other and teach
    themselves new things. And additional eyes on the code are always good.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 一些开发者倾向于将分支策略视为增加的障碍，但这是一个很好的机会，可以通过代码审查提升团队成长和质量。它为团队提供了相互学习的机会，并帮助彼此传授新知识。额外的代码审查人员总是有益的。
- en: Branching strategies
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分支策略
- en: We have set the policies for branches to make rules and technical checks, but
    the question is, how swap use branches in Git to support your work? Which strategy
    should you use? When should you create a new branch? When should you merge branches?
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为分支设置了策略，以便进行规则和技术检查，但问题是，如何在 Git 中使用分支来支持你的工作？你应该使用哪种策略？什么时候应该创建新分支？什么时候应该合并分支？
- en: There are plenty of strategies you can use, and there is no silver-bullet solution.
    The best strategy for your team could be different for another team, or you may
    have one strategy for your **AppSource** app and another for your **PerTenant**
    app.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用许多策略，而且没有万能的解决方案。适合你团队的最佳策略可能对另一个团队来说并不合适，或者你可能会为你的 **AppSource** 应用程序使用一种策略，为你的
    **PerTenant** 应用程序使用另一种策略。
- en: Before you decide which way you will go, think about the **KISS principle**
    (**Keep It Simple, Stupid**).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在你决定采用哪种方式之前，考虑一下**KISS 原则**（**Keep It Simple, Stupid**）。
- en: In all of the examples in this chapter, we will consider the master branch the
    most stable one, the one that represents the app as it is released to production.
    You can decide to name this branch differently and it has no impact on the strategies
    themselves. You just need to define the name and make it consistent through the
    team. Let's go through the branches in the following sections.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的所有示例中，我们将主分支视为最稳定的分支，它代表着已发布到生产环境的应用程序。你可以决定将该分支命名为其他名称，这不会影响策略本身。你只需要定义名称并确保全团队保持一致。接下来，我们将讨论各类分支。
- en: Only a master branch
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仅有一个主分支
- en: 'Having one branch is the simplest strategy you can use. If you have only one
    developer working on the app, there is no need to create a branch. Even when there
    are more developers, they could still work on one branch, merging their changes
    into it each time they conflict. But it is hard to keep the product stable because
    half-done changes could be pushed into the branch:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一个分支是你可以使用的最简单策略。如果只有一个开发者在开发应用程序，就不需要创建分支。即使有更多的开发者，他们也可以继续在一个分支上工作，每次出现冲突时将更改合并到该分支中。但由于未完成的更改可能被推送到分支中，这会使产品很难保持稳定：
- en: '![](img/43a2e748-3e32-44c1-aa9f-6e2fbc307f27.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/43a2e748-3e32-44c1-aa9f-6e2fbc307f27.png)'
- en: To stabilize the app, you will need to pause development. Still, you can change
    the strategy to something else later, when you see the need for it.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 为了稳定应用程序，你需要暂停开发。不过，当你看到需要时，仍然可以稍后将策略更改为其他方案。
- en: Feature/developer branches
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能/开发分支
- en: To isolate changes for one feature or one developer, you can create a branch
    for each feature or developer. In this way, the developers are working on their
    own branches, with no conflicts with others until they hit a point when their
    work is done, and they then integrate the changes back into the master branch.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将一个功能或者一个开发者的变更隔离开来，你可以为每个功能或者开发者创建一个分支。这样，开发者们就可以在各自的分支上进行工作，直到完成工作并将变更集成回主分支之前，不会与其他人的工作产生冲突。
- en: 'After the feature is finished and integrated back to the master branch, the
    feature branch can be deleted. If the branch is per developer, you can expect
    that the branch will live a long time. This could be a problem from a long-term
    point of view. The following diagram depicts this:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 当功能完成并集成回主分支后，功能分支可以被删除。如果分支是按开发者分的，那么可以预期分支将长时间存在。从长远来看，这可能会成为一个问题。以下图表描述了这一点：
- en: '![](img/02a47d18-3809-46fb-817d-b3e2ffa3cd49.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/02a47d18-3809-46fb-817d-b3e2ffa3cd49.png)'
- en: Using one branch per developer will mix different changes for different features
    together, and it could be a problem to release only selected features later in
    the process.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 每个开发者使用一个分支会将不同功能的不同变更混合在一起，以后选择性地释放选定的功能可能会成为问题。
- en: Using branches per feature gives you the possibility to release only selected
    features or cancel feature development for no cost (before it is integrated back
    into the master branch).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 使用功能分支可以让你有可能仅发布选定的功能或在流程后期取消功能开发而无需付出成本。
- en: Release branching
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布分支
- en: 'The next strategy is to create a branch for each release you are preparing.
    It gives you the ability to stabilize the product before release and isolate it
    from ongoing development:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个策略是为你正在准备的每个发布创建一个分支。它使你能够在发布之前稳定产品并将其与正在进行的开发隔离开来：
- en: '![](img/0789341c-9221-44af-8b5a-c0b63ae86a39.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0789341c-9221-44af-8b5a-c0b63ae86a39.png)'
- en: As we can see in the preceding diagram, it is good for apps going to AppSource
    because you can fix issues based on the AppSource validation procedure and the
    app will not be affected by new development in between. The fixes could be integrated
    back to the master branch at any time.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的图表中所看到的，它非常适合适用于 AppSource 的应用程序，因为你可以根据 AppSource 验证程序修复问题，而应用程序不会受到在此期间进行的新开发的影响。修复可以随时集成回主分支。
- en: Other strategies
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他策略
- en: You can create a new branch even for servicing (if support for the released
    version is done by another team and is long-term, for example, when creating service
    packs), or per hotfix, when creating the hotfix takes a long time and you need
    to isolate it from the release and development.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 即使为了服务创建一个新的分支（例如，通过另一个团队完成已发布版本的支持并长期支持时，例如创建服务包），或者为了热修复而创建热修复分支时，也可以创建一个新分支并将其与发布和开发分离开来。
- en: As you can see, the only purpose of the branch is to isolate changes in it from
    other changes done for a different purpose in case you need to keep it isolated
    for a long time.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，分支的唯一目的是为了将其变更与其他为不同目的进行的变更隔离开来，以防需要长时间保持隔离状态。
- en: Every strategy can be combined with the others, and in this way, you can create
    your own strategies based on your needs. One of these combinations is named `Git
    flow`, and we will explore it next.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 每种策略都可以与其他策略结合使用，这样你可以根据自己的需求创建自己的策略。其中一种组合被命名为`Git flow`，我们将在接下来探讨它。
- en: Git flow
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git flow
- en: '**Git flow** is a workflow that uses feature branching together with bug and
    release branching. It is widely used, and you can even find tools that support
    this flow by automating different parts of it. In Git flow, the master branch
    represents the released versions, that is, each commit in it represents a released
    version of the product.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**Git flow** 是一种工作流程，结合了特性分支和 bug 和发布分支。它被广泛使用，你甚至可以找到支持此流程的工具，通过自动化不同部分来支持它。在
    Git flow 中，主分支代表已发布的版本，即其中的每个提交代表产品的一个发布版本。'
- en: The second branch is the development branch, and it serves as the integration
    branch for feature branches that are created from it for each feature that is
    developed.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个分支是开发分支，用作从中创建每个功能分支的集成分支。
- en: When a new release is prepared, a new release branch is created from the development
    branch. On the release branch, stabilization and fine-tuning is done until the
    version is ready for release. The release is finished by merging the release branch
    with the master branch.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 当准备发布新版本时，首先从开发分支创建一个新的发布分支。在发布分支上进行稳定性和微调，直到版本准备好发布。发布通过将发布分支与主分支合并来完成。
- en: If there is a bug in the released version, a new bug fix branch is created from
    the master branch. All fixes are made in this branch, and it is then integrated
    back into the master branch (creating a new fixed version of the app) and into
    the development branch (to keep the bug fix for the next releases).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发布的版本有 bug，可以从主分支创建一个新的 bug 修复分支。所有修复都在这个分支上进行，然后将其合并回主分支（创建一个新的修复版本的应用）并合并到开发分支（以便在下一个发布版本中保留
    bug 修复）。
- en: 'The following diagram depicts this:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示展示了这一点：
- en: '![](img/31223925-853c-4063-bd72-d21e5f33da78.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/31223925-853c-4063-bd72-d21e5f33da78.png)'
- en: This flow is suitable for developing apps for AppSource because the release
    can be isolated and you can support multiple versions of the app easily.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这种流程适用于开发 AppSource 应用，因为发布可以被隔离，并且你可以轻松地支持多个版本的应用。
- en: GitHub flow
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitHub flow
- en: 'GitHub flow is a workflow used for development on GitHub. It is based on two
    rules:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub flow 是一种用于 GitHub 上开发的工作流。它基于两个规则：
- en: Everything in the master branch is releasable at any time.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主分支中的一切都可以随时发布。
- en: Release could be done at any time, even multiple times per day.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布可以随时进行，甚至一天多次。
- en: 'It is basically feature branching. Bug fixing is done like with the development
    of any other feature:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 它本质上是特性分支。修复 bug 的方式与开发其他任何特性相同：
- en: '![](img/f0b511d3-3aff-40bc-8e02-0a6e3e287d87.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f0b511d3-3aff-40bc-8e02-0a6e3e287d87.png)'
- en: As we can see in the preceding diagram, it requires an automated release of
    the product, and hence, it could be applicable only for PerTenant or OnPrem apps
    in Business Central. AppSource has a long release time, and hence the flow is
    not suitable for it. It even assumes that only one version of the product is released,
    which is not true in the case of AppSource.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的图示中看到的，它需要产品的自动化发布，因此可能仅适用于 Business Central 中的 PerTenant 或 OnPrem 应用。AppSource
    的发布周期较长，因此此流程不适合它。它甚至假设只有一个版本的产品会发布，但对于 AppSource 来说，这并不真实。
- en: Branching considerations
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分支考虑因素
- en: You can use multiple branching strategies in your company because each one is
    suitable for a different situation. But do not forget KISS! Having a complicated
    strategy that brings nothing to the team only leads to shortcuts and teams not
    sticking to the rules. Having one branch is a strategy too. Start with it and
    add other branches as needed. The strategy can grow with your team.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在公司中可以使用多种分支策略，因为每种策略适用于不同的情况。但不要忘记 KISS（保持简单！）。采用复杂的策略而对团队没有任何帮助，只会导致捷径和团队不遵守规则。采用单一分支也是一种策略。可以从一个分支开始，根据需要再添加其他分支。随着团队的成长，策略也可以不断发展。
- en: For AppSource development, you can use any strategy, but the most suitable is
    Git flow because it allows you to separate each release and support multiple versions.
    Do not forget that apps on customer tenants are only automatically updated on
    major releases or when needed because of the presence of a critical bug (this
    occurs after a partner's request). It means multiple versions can live in the
    cloud together.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 AppSource 开发，你可以使用任何策略，但最适合的策略是 Git flow，因为它允许你分离每个发布并支持多个版本。不要忘记，客户租户上的应用只有在进行重大版本发布或因出现关键
    bug 时（这是在合作伙伴请求之后）才会自动更新。这意味着多个版本可以一起在云中共存。
- en: For PerTenant app development, because in this case, you have only one version
    of the product released to the customer tenant, you can use any strategy, including
    GitHub flow.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 PerTenant 应用开发，因为在这种情况下，你只会向客户租户发布一个版本的产品，所以你可以使用任何策略，包括 GitHub flow。
- en: Understanding Git merge strategies
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Git 合并策略
- en: We will not go deep into all of the possibilities of the `git merge` command,
    but we will explain some of the terms used in connection with Git and merging.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会深入探讨 `git merge` 命令的所有可能性，但我们会解释一些与 Git 和合并相关的术语。
- en: Fast-forward merge
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快进合并
- en: 'When you merge two branches in Git, and one branch is a subset of the commits
    of the other, the result will be a **fast-forward merge**, where no merge is done
    at all. Consider the following diagram:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在 Git 中合并两个分支，其中一个分支是另一个分支提交的子集时，结果将是**快进合并**，此时根本不会进行合并。请参考以下图示：
- en: '![](img/1a9295f0-78d7-45af-8afc-c27bf79fe0e4.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a9295f0-78d7-45af-8afc-c27bf79fe0e4.png)'
- en: The branch will reset to a new position.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 分支将重置到一个新的位置。
- en: Squash commit
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Squash 提交
- en: 'Using **squash commit** can help you to keep the branch clean and simple. When
    you want to merge one branch to another, by using squash commit, you can join
    the commits in the branch into new one commit, with a new commit message, and
    connect this new commit to the target branch. The following diagram shows this:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **squash commit** 可以帮助你保持分支的简洁。当你想要将一个分支合并到另一个分支时，使用 squash commit 可以将分支中的提交合并成一个新的提交，并附上新的提交信息，并将这个新的提交连接到目标分支。下图展示了这一过程：
- en: '![](img/7d852665-29fe-4e46-a8e0-9be0ffb4eff6.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7d852665-29fe-4e46-a8e0-9be0ffb4eff6.png)'
- en: There will be no real merge between the branches. You just throw away the old
    branch because all changes are now committed to the target. You will lose detail
    but gain simplicity. It depends on what your priority is.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 分支之间不会有真正的合并。你只需丢弃旧分支，因为所有的更改现在都已经提交到目标分支。你会失去一些细节，但获得了简洁性。这取决于你的优先级是什么。
- en: Rebase
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rebase
- en: 'Instead of `merge`, you can use the `rebase` command. As the name suggests,
    you take the branch, cut it from the tree, and rebase it on another commit. In
    this way, you can base your changes on the new version without merging. The following
    diagram shows this:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`rebase`命令代替`merge`。顾名思义，你将分支从树上剪切下来，并将其重新基于另一个提交。通过这种方式，你可以在不进行合并的情况下将更改基于新版本。下图展示了这一过程：
- en: '![](img/7094ca8b-0b60-422f-a36d-122fbcb520fb.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7094ca8b-0b60-422f-a36d-122fbcb520fb.png)'
- en: All of the commits between the original base and the branch head (the starting
    point of a branch) will be taken and reapplied to the new base. Again, you gain
    simplicity, but you lose reality because you are influencing the history.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 所有从原始基点到分支头（分支的起始点）之间的提交都会被获取并重新应用到新的基点上。同样，你获得了简洁性，但失去了现实，因为你在影响历史。
- en: Git merge considerations
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git 合并的考虑事项
- en: When you need to integrate the changes back to the target branch, you can choose
    whether you will use fast-forward merges, merge or rebase, or use squash commit.
    By combining the techniques, you can have a simple history in Git, but you can
    lose the required detail. But again, do not be afraid of having choices. Just
    start with the simplest way, and you can change the rules later if you think that
    it will help.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要将更改合并回目标分支时，你可以选择使用快速前进合并、常规合并或rebase，或者使用squash提交。通过结合这些技巧，你可以在Git中保持简单的历史记录，但可能会丢失一些必要的细节。但再次强调，不要害怕做出选择。只需从最简单的方式开始，如果你觉得这会有所帮助，可以以后再修改规则。
- en: Next, let's move on to see how we can use Git from Visual Studio Code.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们继续看看如何在 Visual Studio Code 中使用 Git。
- en: Exploring Git with Visual Studio Code
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Visual Studio Code 探索 Git
- en: '**Git** is the default SCM system for Visual Studio Code, and you can execute
    the basic Git tasks (such as push, pull, fetch, and clone) from the Visual Studio
    Code GUI. You can also benefit from installing extensions that will enrich the
    integration.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '**Git** 是 Visual Studio Code 的默认版本控制系统，你可以通过 Visual Studio Code 的 GUI 执行基本的
    Git 操作（如 push、pull、fetch 和 clone）。你还可以通过安装扩展来丰富集成体验。'
- en: 'I recommend these extensions:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我推荐这些扩展：
- en: '**Azure Repos**: Connects to the Azure DevOps repository, including work items
    and build pipelines'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Repos**：连接到 Azure DevOps 仓库，包括工作项和构建流水线'
- en: '**GitLens**: Adds different views to Git history, such as blame functionality'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitLens**：为 Git 历史记录添加不同的视图，如 blame 功能'
- en: Let's see what Git has to offer.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看 Git 能为我们提供什么。
- en: Visual Studio Code GUI for Git
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Visual Studio Code 中的 Git GUI
- en: 'Visual Studio Code offers a totally integrated experience with Git and SCM.
    Here''s the Visual Studio Code interface:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code 提供了一个与 Git 和版本控制管理系统（SCM）完全集成的体验。以下是 Visual Studio Code 的界面：
- en: '![](img/3c2eaefc-b74d-4d66-998f-5f162ce5d1ff.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c2eaefc-b74d-4d66-998f-5f162ce5d1ff.png)'
- en: 'The numbers on the left-hand side of the screenshot represent the following
    details:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 截图左侧的数字表示以下详细信息：
- en: 'Current branch: If you click on this, you can create a new branch or check
    out another existing branch.'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当前分支：点击此处，你可以创建一个新分支或切换到另一个现有分支。
- en: 'Status of the repository: We are in sync with the remote repository. If not,
    you can see the number of incoming and outgoing commits of the current branch.
    By clicking on them, you will perform synchronization, that is, fetch and merge
    with the remote repository.'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仓库状态：我们与远程仓库保持同步。如果不同步，你可以看到当前分支的进出提交数量。点击它们时，你将执行同步操作，即从远程仓库拉取和合并。
- en: 'The name of the project in Azure DevOps (Azure Repo extension): Clicking this
    will open the Azure DevOps portal.'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Azure DevOps 中的项目名称（Azure Repo 扩展）：点击此项将打开 Azure DevOps 门户。
- en: 'The number of pull requests (Azure Repo extension): Clicking on this allows
    you to select and browse pull requests.'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拉取请求的数量（Azure Repo 扩展）：点击此项可以选择并浏览拉取请求。
- en: 'Last build status (Azure Repo extension): Clicking on this opens the last build
    for the repository.'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上次构建状态（Azure Repo 扩展）：点击此项可以查看仓库的最后一次构建。
- en: 'The number of work items (Azure Repo extensions): Clicking on this allows you
    to browse the work items and open them in the web portal.'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工作项的数量（Azure Repo 扩展）：点击此项可以浏览工作项并在 Web 门户中打开它们。
- en: 'Source control activity bar: You can see the number of changed files. You can
    switch the activity to source control, where you can commit the changes.'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 源代码控制活动栏：你可以看到更改文件的数量。你可以切换到源代码控制活动，在哪里你可以提交这些更改。
- en: 'Commit message textbox: Enter the commit message before you commit the changes.'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交消息文本框：在提交更改之前，输入提交信息。
- en: 'List of changes: You can select which changes you want to undo or stage for
    committing. If you double-click on this, you can open the diff window, which shows
    you the differences between the current and the last committed state.'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改列表：你可以选择你希望撤销或暂存以便提交的更改。如果你双击此项，你可以打开差异窗口，查看当前状态与最后一次提交状态之间的差异。
- en: 'Source Control menu: You will find more commands regarding source control here.'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 源代码控制菜单：你将在这里找到更多关于源代码控制的命令。
- en: After this, let's explore the Git/Visual Studio Code workflow.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些之后，我们来探索 Git/Visual Studio Code 的工作流。
- en: Workflow with Git
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git 工作流
- en: 'When working with Visual Studio Code and Git, this is the common workflow you
    have:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在 Visual Studio Code 和 Git 中工作时，以下是你常见的工作流：
- en: The first step is to get the repository in which you want to work into your
    local system.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是将你想要工作的仓库获取到本地系统中。
- en: 'If you want to work on existing code, you need to have the URL of the remote
    repository. Then, you can use the `Git: Clone` command, enter the URL, and select
    the folder where the repository will be cloned (it will be cloned into a subfolder
    with the name of the repository).'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '如果你想处理现有的代码，你需要获取远程仓库的 URL。然后，你可以使用 `Git: Clone` 命令，输入 URL，并选择仓库克隆到的文件夹（它会被克隆到一个以仓库名命名的子文件夹中）。'
- en: 'If you are creating a new app, you can first create the folder, open it in
    Visual Studio Code, create the basic structure (using `AL: GO!` or another command),
    and then use `Git: Initialize Repository` to make the folder into a Git repository.
    Later, you can connect the local repository to some new remote one by using Command
    Prompt. See the *How to create a repository for your code *section.'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '如果你正在创建一个新的应用程序，你可以先创建文件夹，打开它并在 Visual Studio Code 中创建基本结构（使用 `AL: GO!` 或其他命令），然后使用
    `Git: Initialize Repository` 将文件夹变成一个 Git 仓库。之后，你可以通过命令提示符将本地仓库连接到新的远程仓库。请参见 *如何为你的代码创建仓库*
    部分。'
- en: Check out existing branches or create a new branch on which you want to do your
    development. You can do this by clicking the branch button at the bottom. Do not
    forget to check that you are working on the correct branch.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检出现有分支或创建一个你想进行开发的新分支。你可以通过点击底部的分支按钮来完成此操作。别忘了检查你正在工作的是正确的分支。
- en: After you make some changes, go to the **Source Control Activity Bar** (press
    *Ctrl* + *Shift* + *G* for Git), write a meaningful message (such as `My first
    commit`), and commit the changes (click on the checkmark over the message or press *Ctrl*
    + *Enter*). If you haven't staged some changes (selected a changed file in the
    changes list and moved it into staged changes), Visual Studio Code will ask you
    whether you want to commit all changes instead. I recommend going through the
    changes and manually checking and staging them, because fixing something that
    has already been committed is not simple or nice. By staging changes, you can
    select a subset of all of the modifications that will be committed. You can stage/unstage
    even on the line level if you open the diff window, right-click on the lines,
    and select Stage/Unstage Selected Ranges. In this way, you can split your changes
    to separate commits if they, for example, are related to different requirements.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你进行了一些更改后，转到**源代码管理活动栏**（按 *Ctrl* + *Shift* + *G* 打开 Git），写下有意义的消息（例如 `My first
    commit`），然后提交更改（点击消息上的勾号或按 *Ctrl* + *Enter*）。如果你还没有暂存一些更改（即在更改列表中选择已更改的文件并将其移动到暂存区），Visual
    Studio Code 会询问你是否想提交所有更改。我建议你逐一查看更改并手动检查和暂存它们，因为修复已经提交的内容并不简单或方便。通过暂存更改，你可以选择所有修改中的一部分进行提交。你甚至可以在行级别上进行暂存/取消暂存，方法是打开差异窗口，右键点击行并选择“暂存/取消暂存选中的范围”。通过这种方式，你可以将更改拆分为独立的提交，例如，如果它们与不同的需求相关。
- en: If you want to undo the changes, just click Discard Changes in the changed line.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想撤销更改，只需点击已更改行中的“放弃更改”。
- en: 'After you have committed the changes and you want to make them available for
    others, you can click on the **Synchronize** button at the bottom of the window
    and it will push the commit to the remote repository (and pull changes from the
    remote repository if there are any). This is what the button looks like:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交更改后，如果你想让其他人能够使用这些更改，你可以点击窗口底部的**同步**按钮，它将把提交推送到远程仓库（如果有更改，它还会从远程仓库拉取更改）。这就是按钮的样子：
- en: '![](img/599ef93d-f14b-4edd-a9aa-0cef589b2d06.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](img/599ef93d-f14b-4edd-a9aa-0cef589b2d06.png)'
- en: If you want to merge your changes into the development branch (or any other
    branch you are not responsible for), create a pull request in the Azure DevOps
    portal. You can go there through the Browse your pull request option when you
    click on the Pull Request button in the status bar (number 4 in the *Visual Studio
    Code GUI for Git* section). If you need to fix something, for example, because
    there is conflict during the pull request, just make the change, commit, and push,
    and the pull request will be updated with the new commit automatically.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想将更改合并到开发分支（或任何你不负责的其他分支），请在 Azure DevOps 门户中创建一个拉取请求。你可以通过点击状态栏中的“拉取请求”按钮（在*Visual
    Studio Code Git 图形界面*部分中的第4项），然后选择“浏览你的拉取请求”选项进入。如果你需要修复某些问题，例如在拉取请求期间发生冲突，只需进行修改、提交并推送，拉取请求将会自动更新为新的提交。
- en: If everything is in the remote repository and a change is merged, you can just
    delete the folder on your disk if you do not need it anymore.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果所有内容都在远程仓库中，并且更改已经合并，你可以在不再需要该文件夹时直接删除磁盘上的该文件夹。
- en: 'It is a good practice to make some rules about what the commit message should
    look like, to be consistent through the company. Mastering the skill of writing
    good commit messages should be part of every developer''s continuous improvement.
    You can refer to work items by writing `#1234`, where 1234 is the ID of the work
    item. You can find some examples and rules on the internet about how to write
    good Git commit messages. Here''s an example:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 制定关于提交信息格式的规则是一种良好的实践，以确保公司内部的一致性。掌握写好提交信息的技能应该是每个开发者持续改进的一部分。你可以通过写 `#1234`
    来引用工作项，其中 1234 是工作项的 ID。你可以在网上找到一些示例和规则，了解如何写出好的 Git 提交信息。以下是一个示例：
- en: '[PRE0]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can create a new branch directly from a work item in Azure DevOps by clicking
    on Create a new branch:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过点击“创建新分支”直接从 Azure DevOps 中的工作项创建一个新分支：
- en: '![](img/683cb346-cd35-4fb0-b3a8-02857d2a12cb.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](img/683cb346-cd35-4fb0-b3a8-02857d2a12cb.png)'
- en: In this way, the branch will be connected to the work item and everybody will
    know where the changes are developed. It is good when you are using the feature
    branching strategy.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，分支将与工作项关联，大家都知道更改是在哪里开发的。当你使用特性分支策略时，这种做法是非常好的。
- en: Merges
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合并
- en: In some cases, you will need to merge changes from the remote repository with
    your local changes. In this case, after you sync your repository, you will have a
    new section named MERGE CHANGES in the Source Control section (during normal development
    work there are CHANGES and STAGED CHANGES sections).
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你需要将远程仓库中的更改与本地更改合并。在这种情况下，同步仓库后，你将在源代码控制部分看到一个名为 MERGE CHANGES 的新部分（在正常开发工作中会有
    CHANGES 和 STAGED CHANGES 部分）。
- en: When you click on each line/file, Visual Studio Code will open an editor window
    with the changes, and you can accept the changes or manually correct them. After
    all of the conflicts are resolved, stage the changes and commit them into a new
    merge commit and synchronize (push) the changes to the remote repository.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击每一行/文件时，Visual Studio Code 会打开一个编辑窗口，显示更改，你可以接受这些更改或手动修正它们。所有冲突解决后，将更改暂存并提交为新的合并提交，并将更改同步（推送）到远程仓库。
- en: After learning about Git, let's see how Azure DevOps Pipelines work.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 学习了 Git 之后，让我们来看一下 Azure DevOps Pipelines 是如何工作的。
- en: Understanding Azure DevOps Pipelines
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Azure DevOps Pipelines
- en: Because the life cycle of business case apps is short and the cadence with which
    you are deploying new versions should be much higher than in the past (before
    the AL era), you cannot build, test, and deploy the app manually.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 由于业务案例应用程序的生命周期较短，并且你发布新版本的频率应该比过去（AL 时代之前）要高得多，你不能手动构建、测试和部署应用程序。
- en: 'To automate this part of the life cycle, you can use Azure DevOps Pipelines,
    which will build, test, and deploy for you. You feed the pipeline on one side
    with the source code you are producing, and at the other end, you have a tested
    application, which can be even automatically delivered or deployed. Right now,
    there are two types of pipeline:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 为了自动化生命周期的这一部分，你可以使用 Azure DevOps Pipelines，它将为你构建、测试和部署。你将生成的源代码作为输入提供给管道，而在管道的另一端，你将获得一个经过测试的应用程序，甚至可以自动交付或部署。现在，管道有两种类型：
- en: '**Build** pipeline: The input is the source code, and the output is the application
    and other artifacts.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建**管道：输入是源代码，输出是应用程序和其他工件。'
- en: '**Release** pipeline: The input is the output produced by the build pipeline,
    and the output is a tested application delivered or deployed to selected places.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布**管道：输入是构建管道生成的输出，输出是经过测试的应用程序，已交付或部署到选定位置。'
- en: 'The plan is that there will be one multi-stage pipeline instead that will cover
    the whole process. Consider the following diagram:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 计划是将会有一个多阶段管道，覆盖整个过程。请参考以下图表：
- en: '![](img/d881b4bc-688a-4335-89dd-6a1332749368.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d881b4bc-688a-4335-89dd-6a1332749368.png)'
- en: During the build stage, you are working with the source code and producing the
    product/application and testing it. In general, running tests on an application
    doesn't require the application to be deployed somewhere. For Dynamics 365 Business
    Central, it differs, and you need to deploy the app to a server to be able to
    test it—whether you use containers for this or not doesn't matter.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建阶段，你将与源代码进行工作，生成产品/应用并进行测试。通常，运行应用程序的测试不需要将应用程序部署到某个地方。对于 Dynamics 365 Business
    Central，它有所不同，你需要将应用部署到服务器上才能进行测试——是否使用容器并不重要。
- en: In the release pipeline, you are trying to deliver or deploy the application
    to different environments (the current version, the next version, different localizations,
    a new environment, or an environment with the previous version to test upgrades
    of the data, for example), test it in the environment, and carry out other steps
    that you need to deliver/deploy the app. This allows you to be able to deliver
    or deploy the application any time you want with as little manual input as possible.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布管道中，你尝试将应用程序交付或部署到不同的环境中（当前版本、下一个版本、不同的本地化、新环境，或者是包含先前版本的环境以测试数据升级等），在该环境中进行测试，并执行交付/部署应用程序所需的其他步骤。这使得你可以随时以尽可能少的人工干预交付或部署应用程序。
- en: Everything related to the work items you put into your commits or pull requests
    is transferred through the pipelines and, on each release, you can see all of
    the work items related to the release. This helps you to identify and describe
    the changes that are part of the specific version of your application, and the
    list could be automatically delivered with the application.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 你在提交或拉取请求中添加的与工作项相关的所有内容都会通过管道传输，并且在每次发布时，你都能看到与该发布相关的所有工作项。这帮助你识别和描述属于应用特定版本的更改，并且这个列表可以随应用程序一起自动交付。
- en: Agents
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代理
- en: Pipelines that you create must be executed somewhere. Execution is done by an
    application called an **agent**.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 你创建的管道必须在某个地方执行。执行由名为**代理**的应用程序完成。
- en: You can use hosted agents, which are maintained by Microsoft in Azure and run
    on different operating systems with different additional software (such as macOS,
    Ubuntu, and Windows 2019 with Visual Studio 2019). For these hosted agents, you
    have some free minutes that you can use for your Azure DevOps organization (you
    can see the amount in the Organization Settings in the Billing section). But the
    use of these hosted agents is limited because you cannot install additional software.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用托管代理，这些代理由微软在 Azure 上维护，并运行在不同操作系统上，安装了不同的附加软件（如 macOS、Ubuntu 和带有 Visual
    Studio 2019 的 Windows 2019）。对于这些托管代理，你可以在 Azure DevOps 组织中使用一些免费的分钟数（你可以在“组织设置”的“计费”部分查看使用的分钟数）。但是，由于不能安装附加软件，使用这些托管代理是有限制的。
- en: 'You can use your own agents if you want. This means that you can install and
    configure a small application somewhere on your own server. This application will
    connect through a RESTful API to Azure DevOps and will execute the tasks from
    the pipelines on your server. How to install the agent is described on the web
    portal when you click on the Download the agent button in the Agent Pool section
    in Settings, as shown here:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，也可以使用自己的代理。这意味着你可以在自己的服务器上安装并配置一个小应用程序，该应用程序通过 RESTful API 连接到 Azure DevOps，并在你的服务器上执行管道中的任务。如何安装代理的详细信息，在点击“下载代理”按钮时，会在设置中的“代理池”部分显示，如下所示：
- en: '![](img/395ca764-7b4d-45d7-b89a-c71ad7eb8a81.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![](img/395ca764-7b4d-45d7-b89a-c71ad7eb8a81.png)'
- en: Details on how to configure the agent and get the access token needed to authenticate
    the agent can be found if you click on Detailed instructions on the Download agent
    page ([http://go.microsoft.com/fwlink/?LinkID=825113](http://go.microsoft.com/fwlink/?LinkID=825113)
    ). Do not forget to run the agent as an administrator to be able to do what is
    needed when running tasks for Dynamics 365 Business Central.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何配置代理并获取认证代理所需的访问令牌的详细信息，可以在下载代理页面点击“详细说明”找到 ([http://go.microsoft.com/fwlink/?LinkID=825113](http://go.microsoft.com/fwlink/?LinkID=825113))。不要忘记以管理员身份运行代理，这样才能在执行
    Dynamics 365 Business Central 任务时做必要的操作。
- en: Which agent will be used for executing the pipeline is determined by the Agent's
    capabilities (which you can set in the Agent Pools section) and by the required
    agent task capabilities (that you can set later on the agent tasks in the pipeline
    definition). It means that each run of the pipeline can be processed by another
    agent if there are multiple agents available with the same capabilities. After
    this, let's see how to create a build pipeline.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 用于执行管道的代理由代理的能力（你可以在“代理池”部分设置）和所需的代理任务能力（你可以稍后在管道定义中的代理任务上设置）决定。这意味着，如果有多个具有相同能力的代理可用，每次运行管道时都可以由不同的代理处理。接下来，让我们看看如何创建构建管道。
- en: Creating a build pipeline
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建构建管道
- en: 'To create your first build pipeline, open the Pipelines section of your Azure
    DevOps portal and click New pipeline:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建你的第一个构建管道，请打开 Azure DevOps 门户中的管道部分，然后点击“新建管道”：
- en: '![](img/86796189-bebe-4763-bca1-57eccb12279a.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![](img/86796189-bebe-4763-bca1-57eccb12279a.png)'
- en: Now you can choose the source of your code to build. To start with, we will
    use the **Classic Editor**, which means we will create the pipeline manually,
    just to look at the different parts of the pipeline settings. Later, we will use
    **Azure Repos Git** to create the whole pipeline in one step from a YAML file.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以选择要构建的代码源。首先，我们将使用**经典编辑器**，这意味着我们将手动创建管道，只是为了查看管道设置的不同部分。稍后，我们将使用**Azure
    Repos Git**从 YAML 文件一步创建整个管道。
- en: After you click Use the classic editor, you can select the source of the code
    (select Azure Repos Git | Team project, then select the Repository for the source
    code and the branch from the repository itself). Select the correct values and
    click Continue.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“使用经典编辑器”后，你可以选择代码的来源（选择 Azure Repos Git | 团队项目，然后选择源代码的存储库和该存储库的分支）。选择正确的值后点击“继续”。
- en: 'Because there are no predefined pipeline templates for Dynamics 365 Business
    Central, we need to start with an empty job:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 因为没有预定义的 Dynamics 365 Business Central 管道模板，我们需要从空工作开始：
- en: '![](img/85b9eaa7-02fb-416f-9a6e-8bd8afb3dcb7.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![](img/85b9eaa7-02fb-416f-9a6e-8bd8afb3dcb7.png)'
- en: Now you are in the pipeline editor, where you can add pipeline agent jobs, which
    represent separate steps of the pipeline you need to execute to build and test
    the application. On the right, you can see the parameters of the actual steps
    you select on the left.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经进入了管道编辑器，您可以添加管道代理作业，这些作业代表了您需要执行的构建和测试应用程序的管道步骤。在右侧，您可以看到您在左侧选择的实际步骤的参数。
- en: In the parameters, you can use variables, which can be defined in the Variables
    tab or can be defined by the system. You can find a detailed explanation of the
    variables in the documentation for Azure DevOps.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在参数中，您可以使用变量，这些变量可以在“变量”标签中定义，也可以由系统定义。您可以在 Azure DevOps 文档中找到有关变量的详细解释。
- en: To use a variable in the parameters of the task, use the `$(variablename)` syntax.
    To use it inside your PowerShell script, use the `$env:VARIABLENAME` syntax. All
    of the variables that are accessible as environment variables are in uppercase,
    with dots replaced with underscores.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 要在任务的参数中使用变量，请使用 `$(variablename)` 语法。在 PowerShell 脚本中使用时，请使用 `$env:VARIABLENAME`
    语法。所有可作为环境变量访问的变量都是大写的，且点被替换为下划线。
- en: Note the View YAML button. It will be handy when we investigate YAML build pipelines.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 注意查看“查看 YAML”按钮。当我们研究 YAML 构建管道时，它会很有用。
- en: When building applications for Business Central, you will mostly use the PowerShell
    task that can run existing scripts (for example, if they are part of the source
    code) or run inline defined scripts.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在为 Business Central 构建应用程序时，您通常会使用可以运行现有脚本（例如，如果它们是源代码的一部分）或运行内联定义脚本的 PowerShell
    任务。
- en: 'After you have defined all of the tasks you need, you can define the triggers
    for your new build pipeline. You can choose from the following:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义了所有所需任务后，您可以为新的构建管道定义触发器。您可以选择以下几种方式：
- en: '**Continuous integration**: This will run each time a new commit is pushed
    to the server. Check the branch filter to only run the build for branches where
    you want to save computing time. You can even specify a filter for paths inside
    the repository, which must be changed to trigger your pipeline (for example, to
    not trigger it when `readme.md` is changed).'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续集成**：每当新的提交被推送到服务器时，这将会运行。检查分支过滤器，只为您希望节省计算时间的分支运行构建。您甚至可以为仓库中的路径指定过滤器，只有当路径发生变化时，才会触发管道（例如，当`readme.md`被修改时不触发）。'
- en: '**Scheduled**: The pipeline will be triggered automatically at a set time.
    You can choose to trigger it only when something changed from last time.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定时**：管道将在设定的时间自动触发。您可以选择仅在上次有变化时触发它。'
- en: '**Build completion**: This triggers the pipeline when another pipeline completes.
    It can be handy when you have dependencies between apps to run builds of the app
    when the dependency was built.'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建完成**：当另一个管道完成时，会触发该管道。这在您有应用程序之间的依赖关系时非常有用，可以在依赖项构建完成后，触发应用程序的构建。'
- en: When all is ready and set, save the pipeline and try to run it. In most cases,
    you will need multiple runs and modifications before you get your first successful
    build.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 当一切准备就绪后，保存管道并尝试运行它。在大多数情况下，您需要多次运行和修改，才能获得第一次成功的构建。
- en: 'Common build tasks will have these steps:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的构建任务包括以下步骤：
- en: Prepare the build environment (install scripts, download tools, create a Docker
    container, and so on).
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备构建环境（安装脚本、下载工具、创建 Docker 容器等）。
- en: Compile the app (download symbols, use `ALC.exe` to compile the app, and so
    on).
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译应用程序（下载符号，使用 `ALC.exe` 编译应用程序等）。
- en: Install the app (publish and install it into the Docker container).
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装应用程序（将其发布并安装到 Docker 容器中）。
- en: Run tests for the app and download the results.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序的测试并下载结果。
- en: Publish the test results (should be done even when the tests fail).
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发布测试结果（即使测试失败，也应该执行此操作）。
- en: Publish the artifacts (push the app to the Azure DevOps store or a shared folder).
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发布构件（将应用程序推送到 Azure DevOps 商店或共享文件夹）。
- en: Clean up the environment (drop the Docker container, for example; this should
    be done regardless of whether failing steps exist in the pipeline).
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清理环境（例如，删除 Docker 容器；无论管道中是否存在失败的步骤，都应该进行此操作）。
- en: Variable groups and secure files
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量组和安全文件
- en: 'When creating your pipelines, you mostly need to define values that are shared
    between builds (such as usernames, passwords, keys, and so on). For this, you
    can create **Variable group**. To define a new Variable group, open the Library:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建管道时，您主要需要定义在构建之间共享的值（例如用户名、密码、密钥等）。为此，您可以创建**变量组**。要定义新的变量组，请打开库：
- en: '![](img/b0d8ecaa-8bb6-45a6-8c71-a673d91d5326.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b0d8ecaa-8bb6-45a6-8c71-a673d91d5326.png)'
- en: When creating the variable group, define the name and description. For better
    security, you can store your variables in an Azure key vault if you want, or you
    can just create variable name/value pairs and, on the password, just use the lock
    icon to hide the value. Additionally, you can define security for each variable
    group.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建变量组时，定义名称和描述。为了更好的安全性，你可以选择将变量存储在Azure密钥库中，或者仅创建变量名称/值对，并在密码字段上使用锁图标来隐藏值。此外，你还可以为每个变量组定义安全性。
- en: To be able to use the variables from a variable group, you need to link the
    group to your pipeline. Just open the editor, go to the Variables tab and select
    variable groups, and use the Link variable group button. After the group is linked,
    you can use the variables in your tasks.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够使用变量组中的变量，你需要将该变量组链接到你的流水线。只需打开编辑器，转到“变量”标签，选择变量组，然后使用“链接变量组”按钮。变量组链接后，你就可以在任务中使用这些变量。
- en: If you need to use a certificate or another file in your build pipeline, you
    can store it in the library as a secure file. You can download such a file using
    the Download Secure File task in your pipeline. In this way, the users do not
    need to have access to the file and the file does not need to be able to access
    network resources to be used. The process will download the file from Azure DevOps
    storage where it is secured.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在构建流水线中需要使用证书或其他文件，你可以将其存储为库中的安全文件。你可以通过流水线中的“下载安全文件”任务来下载这个文件。这样，用户不需要访问该文件，并且该文件也不需要能够访问网络资源。该过程将从Azure
    DevOps存储中下载该文件，在那里它是被保护的。
- en: Next, let's see what the YAML pipeline is.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们来看看什么是YAML流水线。
- en: Understanding the YAML pipeline
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解YAML流水线
- en: In the previous section, we used the classic editor to create a pipeline to
    show you the different parts of the pipeline and to give you an idea of what the
    pipeline is. But creating a pipeline in the editor is not very convenient, and
    you cannot version the definition. This is why **YAML pipelines** exist. They
    have the same properties and parts as the classic pipelines but are defined by
    a YAML file as part of your source code. This means you can define *Pipelines
    as Code* (you can directly code a pipeline) and you can use all of the tools you
    are using to work with your code.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们使用经典编辑器创建了一个流水线，向你展示流水线的不同部分，并让你对流水线有一个初步了解。但在编辑器中创建流水线并不方便，而且你无法对定义进行版本控制。这就是**YAML流水线**的存在意义。它们与经典流水线有相同的属性和部分，但它们是通过YAML文件定义的，作为源代码的一部分。这意味着你可以将流水线定义为代码（你可以直接编写流水线代码），并且可以使用你正在使用的所有工具来处理代码。
- en: 'First, here''s some information about **YAML**. YAML is a file syntax like
    XML and JSON, but it is primarily focused to be read by humans (XML and JSON are
    defined to be read by computers). This means that the syntax is easily understandable.
    Instead of artificial marks to give meaning, it uses indentation and symbols such
    as `-` for list items and `:` to separate names and values:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，下面是一些关于**YAML**的信息。YAML是一种类似于XML和JSON的文件语法，但它主要是为了让人类阅读（而XML和JSON是为了计算机读取）。这意味着YAML的语法非常易于理解。它不像XML和JSON那样使用人工标记来传达意义，而是使用缩进和一些符号，比如`-`来表示列表项，`:`用来分隔名称和值：
- en: '![](img/1232ddc2-0626-4411-bbda-f69d07ae40f3.png)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1232ddc2-0626-4411-bbda-f69d07ae40f3.png)'
- en: 'If you look at the example, you should be able to recognize the properties
    (the format is `name: value`), objects with properties (for example, `customer`
    in the preceding screenshot), and lists (`items` in the preceding screenshot)
    with objects.'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你查看示例，你应该能够识别出属性（格式为`name: value`）、包含属性的对象（例如前面截图中的`customer`）以及带有对象的列表（例如前面截图中的`items`）。'
- en: 'By using YAML, you can define all of the parts of the pipeline you saw in the
    pipeline editor:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用YAML，你可以定义流水线编辑器中看到的所有部分：
- en: Jobs and tasks with parameters and properties
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有参数和属性的作业和任务
- en: Variables, including variable groups
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量，包括变量组
- en: Triggers
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触发器
- en: If you created some pipeline in the editor, you can use the View YAML button
    in the editor to see the YAML that defines the same thing as you have in the editor.
    In this way, you can start creating your YAML pipeline. Just create an `azure-pipelines.yaml`
    file in your project, put the pipeline description into it, and commit the file
    into your repository.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在编辑器中创建了某些流水线，你可以使用编辑器中的“查看YAML”按钮来查看定义相同内容的YAML文件。这样，你就可以开始创建你的YAML流水线。只需在你的项目中创建一个`azure-pipelines.yaml`文件，将流水线描述写入其中，然后将该文件提交到你的代码仓库中。
- en: When you want to change something in the pipeline, change the YAML file, commit,
    and push. The pipeline will change automatically.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想要更改管道中的内容时，只需更改YAML文件，提交并推送。管道将自动更改。
- en: Creating a YAML pipeline
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建YAML管道
- en: 'To create a pipeline based on a YAML file, go to the Pipelines | Builds section
    and do the following:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 若要基于YAML文件创建管道，请转到Pipelines | Builds部分并执行以下操作：
- en: Click on New Pipeline.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“New Pipeline”。
- en: Select Azure Repos Git (YAML).
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Azure Repos Git（YAML）。
- en: Select the repository.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择仓库。
- en: Azure DevOps will autodetect the YAML pipeline file in the repository and open
    it.
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Azure DevOps将自动检测仓库中的YAML管道文件并打开它。
- en: Click on Run.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“Run”。
- en: You are done. Your new pipeline was created! Wasn't it easy?
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了。您的新管道已创建！是不是很简单？
- en: YAML pipeline templates
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: YAML管道模板
- en: To make it more generic, you can use templates in your YAML pipeline. This means
    that you store the YAML file definitions for each task as separate files in a
    repository and you can refer to these templates from your YAML pipeline. The definitions
    are shared with all of the apps using them in their YAML pipeline, and if you
    need to fix something in the definition, you will fix it in one place. Of course,
    in this way, you can screw up all of your pipelines from one place. Be warned!
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使其更加通用，您可以在YAML管道中使用模板。这意味着您将每个任务的YAML文件定义作为单独的文件存储在仓库中，并且可以从YAML管道中引用这些模板。这些定义与所有在其YAML管道中使用它们的应用程序共享，如果您需要修复某些内容，您只需在一个地方进行修复。当然，这样做的结果是，您可能会从一个地方影响到所有管道。请注意！
- en: 'This is how you create the pipeline:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 这是创建管道的方法：
- en: Create a new repository for your templates.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的模板创建一个新的仓库。
- en: 'Put the YAML files with the definitions of the tasks into it:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将包含任务定义的YAML文件放入其中：
- en: '![](img/cf999ca4-f727-4216-8a41-8a8cda080e61.png)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cf999ca4-f727-4216-8a41-8a8cda080e61.png)'
- en: 'Add a reference to the repository to the YAML pipeline file:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将仓库引用添加到YAML管道文件中：
- en: '![](img/66d66345-fecc-46ad-8554-8b999bc4eca1.png)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
  zh: '![](img/66d66345-fecc-46ad-8554-8b999bc4eca1.png)'
- en: 'The reference parameters are as follows:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 引用参数如下：
- en: '**Repository**: The name as it is used in the YAML pipeline file'
  id: totrans-311
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Repository**：在YAML管道文件中使用的名称'
- en: '**Type**: The source repository type'
  id: totrans-312
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Type**：源仓库类型'
- en: '**Name**: The repository name'
  id: totrans-313
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Name**：仓库名称'
- en: '**Ref**: The branch or a reference to the version of templates to be used'
  id: totrans-314
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ref**：要使用的模板版本的分支或引用'
- en: '**Endpoint**: The name of the endpoint defined in the Azure DevOps Service
    connections section'
  id: totrans-315
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Endpoint**：在Azure DevOps Service connections部分中定义的端点名称'
- en: 'Add a service connection with the same name as your repository into Azure DevOps
    Service connections:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Azure DevOps Service connections中添加与您的仓库同名的服务连接：
- en: '![](img/5d5dae3c-a9d6-4dba-be2a-de857338314a.png)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5d5dae3c-a9d6-4dba-be2a-de857338314a.png)'
- en: 'Change the YAML file to reference these templates as the steps:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改YAML文件以将这些模板作为步骤引用：
- en: '![](img/2ff68881-0438-42ca-87ee-4b4c4131a258.png)'
  id: totrans-319
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ff68881-0438-42ca-87ee-4b4c4131a258.png)'
- en: 'In the YAML file, we have these references:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 在YAML文件中，我们有这些引用：
- en: '**Template**: The path and name of the file in the `@MSDYN365BC_Yaml` repository'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Template**：`@MSDYN365BC_Yaml`仓库中的文件路径和名称'
- en: '**Parameters**: The parameter values for the task'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Parameters**：任务的参数值'
- en: All repository-specific settings should stay in your YAML pipeline file. All
    shared things such as step definitions should be in the template repository.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 所有特定于仓库的设置应保留在您的YAML管道文件中。所有共享的内容，如步骤定义，应放在模板仓库中。
- en: You can find the example for the template and pipeline file at [https://github.com/kine/MSDYN365BC_Yaml](https://github.com/kine/MSDYN365BC_Yaml).
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/kine/MSDYN365BC_Yaml](https://github.com/kine/MSDYN365BC_Yaml)找到模板和管道文件的示例。
- en: To swap a new app using this template, you can clone the app as a template at [https://github.com/kine/MSDyn365BC_AppTemplate](https://github.com/kine/MSDyn365BC_AppTemplate).
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用此模板交换新应用程序，您可以将应用程序克隆为模板，网址为[https://github.com/kine/MSDyn365BC_AppTemplate](https://github.com/kine/MSDyn365BC_AppTemplate)。
- en: 'Just for future reference, as a generic YAML pipeline for Dynamics 365 Business
    Central, you can also refer to the following YAML definition:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 仅供将来参考，作为Dynamics 365 Business Central的通用YAML管道，您还可以参考以下YAML定义：
- en: '[PRE1]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This pipeline model uses a set of PowerShell scripts that you can store in
    your repository  in a folder called `BuildScripts`. This can be stored together
    with your extension''s files, as shown in the following screenshot:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 该管道模型使用一组PowerShell脚本，您可以将其存储在名为`BuildScripts`的文件夹中。它可以与您的扩展文件一起存储，如下图所示：
- en: '![](img/e2ec1949-4356-4c78-9755-8f44a207ae71.png)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e2ec1949-4356-4c78-9755-8f44a207ae71.png)'
- en: If successfully executed, this pipeline publishes the final `.app` file for
    your Dynamics 365 Business Central extension as an Artifact (output of the pipeline),
    which you can download from the build summary page.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功执行，此管道将发布你的 Dynamics 365 Business Central 扩展的最终 `.app` 文件作为工件（管道输出），你可以从构建摘要页面下载。
- en: Release pipeline
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布管道
- en: After the **build** pipeline finishes, you can use the **release** pipeline
    to deliver or deploy the build artifacts or do other actions that you want. To
    create a new release pipeline, go to the Release section and click on New Release
    pipeline. Because there is no template for Business Central release pipelines,
    begin with an empty job.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在**构建**管道完成后，你可以使用**发布**管道来交付或部署构建工件，或者执行你想做的其他操作。要创建一个新的发布管道，请进入发布部分并点击新建发布管道。由于没有
    Business Central 发布管道的模板，请从空作业开始。
- en: 'Each release pipeline is created with the following:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 每个发布管道的创建包括以下内容：
- en: '**Artifacts**: This could be the output of the build pipeline, an Azure DevOps
    Git repository, a GitHub repository, a TFVC repository, an Azure artifact, an
    Azure container, a Docker Hub repository, or a Jenkins job.'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工件**：这可以是构建管道的输出，Azure DevOps Git 仓库，GitHub 仓库，TFVC 仓库，Azure 工件，Azure 容器，Docker
    Hub 仓库，或 Jenkins 作业。'
- en: '**Stages**: Each stage is a separate process that can be executed on different
    agents and can be triggered by different events.'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阶段**：每个阶段是一个独立的过程，可以在不同的代理上执行，并且可以由不同的事件触发。'
- en: '**Variables**: These are the same as in build pipelines.'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变量**：这些与构建管道中的变量相同。'
- en: For each **artifact***,* you can define triggers to start the pipeline. It could
    be each time the artifact is updated (continuous deployment) or on a given schedule
    (such as nightly releases).
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个**工件**，你可以定义触发器来启动管道。可以是每次工件更新时（持续部署），或者按照给定的时间表（例如每晚发布）。
- en: 'At each stage, you can set pre-deployment conditions and post-deployment conditions:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个阶段，你可以设置预部署条件和后部署条件：
- en: 'Pre-deployment conditions: These include the following:'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预部署条件：这些包括以下内容：
- en: 'After release: This triggers when the selected artifact is deployed or on a
    given schedule.'
  id: totrans-340
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布后：当选定的工件被部署或按照给定的时间表时，会触发此操作。
- en: 'After stage: This triggers when another stage is finished.'
  id: totrans-341
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阶段结束后：当另一个阶段完成时会触发此操作。
- en: 'Manual only: Someone must trigger the deployment in the portal.'
  id: totrans-342
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅手动：必须有人在门户中触发部署。
- en: 'Pre-deployment approvals: Selected users must approve the deployment to this
    stage.'
  id: totrans-343
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预部署审批：选定的用户必须批准部署到此阶段。
- en: 'Gates: These are automated processes that can approve the deployment according
    to certain conditions (for example, when there are no errors after release to
    the previous stage).'
  id: totrans-344
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 闸门：这些是可以根据某些条件批准部署的自动化过程（例如，在发布到上一个阶段后没有错误时）。
- en: 'Post-deployment conditions: These include the following:'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后部署条件：这些包括以下内容：
- en: 'Post-deployment approvals: Selected users must approve that the release stage
    succeeded and that the release can continue.'
  id: totrans-346
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后部署审批：选定的用户必须批准发布阶段成功，并且发布可以继续。
- en: 'Gates: Automated processes can approve the stage release.'
  id: totrans-347
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 闸门：自动化过程可以批准阶段发布。
- en: 'Auto-redeploy trigger: You can trigger redeployment when needed; for example,
    after the stage fails, you can redeploy the last successful deployment. This could
    be useful for restoring to the last known working version.'
  id: totrans-348
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动重新部署触发器：你可以在需要时触发重新部署；例如，在阶段失败后，你可以重新部署上次成功的部署。这对于恢复到最后一个已知的工作版本非常有用。
- en: 'Here''s an example of a **release pipeline** for Dynamics 365 Business Central:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Dynamics 365 Business Central 的**发布管道**示例：
- en: '![](img/2c11b674-a11b-4702-bf75-4c4275ed8a3e.png)'
  id: totrans-350
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c11b674-a11b-4702-bf75-4c4275ed8a3e.png)'
- en: Each stage is deploying the app (and running tests) to a different version of
    the Business Central sandbox (the current version, the future version, and the
    master version). If everything is OK, the app is deployed to the QA environment
    for user testing. If the tests succeed, the app is signed by a certificate and
    stored on the server for later use (to be sent to AppSource) or is deployed to
    the target environment (a per-tenant app). This is what the YAML pipeline is about.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 每个阶段将应用程序（并运行测试）部署到 Business Central 沙盒的不同版本（当前版本、未来版本和主版本）。如果一切正常，应用程序将部署到
    QA 环境进行用户测试。如果测试成功，应用程序将由证书签名并存储在服务器上以供以后使用（发送到 AppSource）或部署到目标环境（每租户应用）。这就是
    YAML 管道的意义所在。
- en: Summary
  id: totrans-352
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we learned what Azure DevOps is and what it provides, then
    created our account on Azure DevOps. We looked at how to manage and plan our work
    using Azure DevOps. We created a repository for our code and learned what we can
    set up to support our development cycle.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了 Azure DevOps 的概念以及它所提供的功能，然后在 Azure DevOps 上创建了我们的账户。我们查看了如何使用 Azure
    DevOps 来管理和规划我们的工作。我们为我们的代码创建了一个仓库，并学习了可以设置哪些内容来支持我们的开发周期。
- en: In the *Branching strategies* section, we learned how to use branches in our
    project to make the development stable and traceable. In the *Git merge strategies*
    and *Git in Visual Studio Code* sections, we looked at some specific aspects related
    to Git source control and how to use Git SCM from Visual Studio Code to keep our
    code safe.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 在*分支策略*部分，我们学习了如何在项目中使用分支来保持开发的稳定性和可追溯性。在*Git 合并策略*和*在 Visual Studio Code 中使用
    Git*部分，我们查看了一些与 Git 源代码控制相关的特定方面，并了解了如何通过 Visual Studio Code 使用 Git SCM 来确保我们的代码安全。
- en: We learned about Azure DevOps Pipelines, how to use them, and how to create
    them through the classic designer. In the last section, we looked at YAML files
    and how to use them to define our pipeline as part of our code.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了 Azure DevOps Pipelines，如何使用它们以及如何通过经典设计器创建它们。在上一节中，我们查看了 YAML 文件，并了解了如何使用它们将管道定义为我们代码的一部分。
- en: In the next chapter, we'll go in depth into Dynamics 365 Business Central APIs
    and we'll explore how to create new APIs and use existing APIs to perform integrations.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨 Dynamics 365 Business Central APIs，并探索如何创建新的 API 以及如何使用现有的 API
    来执行集成操作。
