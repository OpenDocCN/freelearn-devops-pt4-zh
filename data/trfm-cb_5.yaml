- en: Sharing Terraform Configuration with Modules
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 使用模块共享 Terraform 配置
- en: The real challenge for developers and software factories in recent years has
    been to stop writing the portions of code that are repeated between applications
    and even between teams. Hence the emergence of language, framework, and software
    packages that are easily reusable in several applications and that can be shared
    between several teams (such as NuGet, NPM, Bower, PyPI, RubyGems, and many others).
    In **Infrastructure as Code** (**IaC**) in general, we also encounter the same
    problems of code structure, its homogenization, and its sharing in the company.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，开发人员和软件工厂面临的真正挑战是停止编写在应用程序之间，甚至在团队之间重复的代码。因此，出现了可以在多个应用程序中轻松重用、并且能够在多个团队之间共享的语言、框架和软件包（如
    NuGet、NPM、Bower、PyPI、RubyGems 等）。在**基础设施即代码**（**IaC**）领域，我们也面临着相同的代码结构问题、代码的同质化及其在公司内的共享问题。
- en: We learned in the *Provisioning infrastructure in multiple environments* recipe of
    [Chapter 2](3099c9ac-8c38-4e7d-8146-411fac26a2b7.xhtml), *Writing Terraform Configuration*, some
    topologies of the structure of the Terraform configuration, that gave us a partial
    answer to the question of how to structure a Terraform configuration well. But
    that doesn't stop there—Terraform also allows you to create modules with which
    you can share Terraform configuration between several applications and several
    teams.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第 2 章](3099c9ac-8c38-4e7d-8146-411fac26a2b7.xhtml)《编写 Terraform 配置》的*在多个环境中配置基础设施*配方中学到了
    Terraform 配置结构的一些拓扑结构，部分解答了如何合理构建 Terraform 配置的问题。但这并不是终点——Terraform 还允许你创建模块，进而在多个应用程序和多个团队之间共享
    Terraform 配置。
- en: 'In this chapter, we will study the main stages of the modules, which are: the
    creation, use, and publishing of Terraform modules. We will learn about the creation
    of a Terraform module and its local use, as well as the rapid bootstrapping of
    the code of a module. We will also study the use of Terraform modules using the
    public registry or a Git repository. Finally, we will study how to test a module
    as well as an example of a CI/CD pipeline of a Terraform module in Azure Pipelines
    and GitHub Actions.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将学习模块的主要阶段，包括：Terraform 模块的创建、使用和发布。我们将了解如何创建 Terraform 模块及其本地使用，以及如何快速引导模块代码的工作。我们还将研究如何使用公共注册表或
    Git 仓库来使用 Terraform 模块。最后，我们将学习如何测试模块，并举一个 Terraform 模块在 Azure Pipelines 和 GitHub
    Actions 中的 CI/CD 流水线示例。
- en: 'In this chapter, we cover the following recipes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下配方：
- en: Creating a Terraform module and using it locally
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 Terraform 模块并本地使用
- en: Using modules from the public registry
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用公共注册表中的模块
- en: Sharing a Terraform module using GitHub
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GitHub 分享 Terraform 模块
- en: Using another file inside a custom module
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在自定义模块中使用其他文件
- en: Using the Terraform module generator
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Terraform 模块生成器
- en: Generating module documentation
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成模块文档
- en: Using a private Git repository for sharing Terraform modules
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用私有 Git 仓库共享 Terraform 模块
- en: Applying a Terrafile pattern for using modules
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用 Terrafile 模式来使用模块
- en: Testing Terraform module code with Terratest
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Terratest 测试 Terraform 模块代码
- en: Building CI/CD for Terraform modules in Azure Pipelines
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Azure Pipelines 中构建 Terraform 模块的 CI/CD
- en: Building a workflow for Terraform modules using GitHub Actions
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GitHub Actions 为 Terraform 模块构建工作流
- en: Technical requirements
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, for some recipes, we will need certain prerequisites, which
    are as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，对于某些配方，我们需要以下一些前置条件：
- en: '**To have Node.js and NPM installed on your computer**: The download website
    is here: [https://nodejs.org/en/](https://nodejs.org/en/).'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在你的计算机上安装 Node.js 和 NPM**：下载网站在这里：[https://nodejs.org/en/](https://nodejs.org/en/)。'
- en: '**To have a GitHub account**: If you don''t have one, the creation of the account
    is free and can be done here: [https://github.com/](https://github.com/).'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拥有 GitHub 账户**：如果你没有账户，可以在这里免费创建：[https://github.com/](https://github.com/)。'
- en: '**To have an Azure DevOps organization**: You can create one with a Live or
    GitHub account here: [https://azure.microsoft.com/en-in/services/devops/](https://azure.microsoft.com/en-in/services/devops/).'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拥有 Azure DevOps 组织**：你可以使用 Live 或 GitHub 账户在这里创建：[https://azure.microsoft.com/en-in/services/devops/](https://azure.microsoft.com/en-in/services/devops/)。'
- en: '**To have a basic knowledge of Git commands and workflow**: The documentation
    is available here: [https://git-scm.com/doc](https://git-scm.com/doc).'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**具备基本的 Git 命令和工作流知识**：相关文档可以在这里找到：[https://git-scm.com/doc](https://git-scm.com/doc)。'
- en: '**To know about Docker**: The documentation is here: [https://docs.docker.com/](https://docs.docker.com/).'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**了解Docker**：文档可以在这里找到：[https://docs.docker.com/](https://docs.docker.com/)。'
- en: '**To install Golang on our workstation**: The documentation is here: [https://golang.org/doc/install](https://golang.org/doc/install).
    We will see the main steps of its installation in the *Testing a Terraform module
    using Terratest* recipe.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在我们的工作站上安装Golang**：文档可以在这里找到：[https://golang.org/doc/install](https://golang.org/doc/install)。我们将在*使用Terratest测试Terraform模块*食谱中看到安装的主要步骤。'
- en: The complete source code for this chapter is available on GitHub at [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的完整源代码可以在GitHub上找到：[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05)。
- en: Check out the following video to see the Code in Action: [https://bit.ly/3ibKgH2](https://bit.ly/3ibKgH2)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，了解代码如何运行：[https://bit.ly/3ibKgH2](https://bit.ly/3ibKgH2)
- en: Creating a Terraform module and using it locally
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Terraform模块并在本地使用它
- en: A Terraform module is a Terraform configuration that contains one or more Terraform
    resource. Once created, this module can be used in several Terraform configuration
    files either locally or even remotely.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Terraform模块是一个Terraform配置，包含一个或多个Terraform资源。创建后，可以在多个Terraform配置文件中使用该模块，无论是本地使用还是远程使用。
- en: In this recipe, we will look at the basics of a Terraform module with the steps
    involved in creating a module and using it locally.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍Terraform模块的基础知识，包括创建模块和在本地使用模块的步骤。
- en: Getting ready
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To start this recipe, we will use the Terraform configuration that we have already
    written in the *Provisioning infrastructure in multiple environments* recipe in [Chapter
    2](3099c9ac-8c38-4e7d-8146-411fac26a2b7.xhtml), *Writing Terraform Configuration*,
    and whose sources can be found at [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/sample-app](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/sample-app).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始这个食谱，我们将使用我们在[第二章](3099c9ac-8c38-4e7d-8146-411fac26a2b7.xhtml)的*在多个环境中配置基础设施*食谱中已经编写的Terraform配置，源代码可以在这里找到：[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/sample-app](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/sample-app)。
- en: The module we will create in this recipe will be in charge of providing a Service
    Plan, one App Service, and an Application Insights resource in Azure. Its source
    code is available here: [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/Modules/webapp](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/Modules/webapp).
    Then, we will write a Terraform configuration that uses this module and the code
    is here: [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/MyApp](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/MyApp).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本节中创建的模块将负责在Azure中提供一个服务计划、一个应用服务和一个应用洞察资源。其源代码可以在这里找到：[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/Modules/webapp](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/Modules/webapp)。接下来，我们将编写一个使用该模块的Terraform配置，代码可以在这里找到：[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/MyApp](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/MyApp)。
- en: How to do it…
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To create the module, perform the following steps:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建模块，请执行以下步骤：
- en: In a new folder called `moduledemo`, create the `Modules` and `webapp` folders.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个名为`moduledemo`的新文件夹中，创建`Modules`和`webapp`文件夹。
- en: 'In the `webapp` folder, create a new `variables.tf` file with the following
    code:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`webapp`文件夹中，创建一个新的`variables.tf`文件，内容如下：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, create the `main.tf` file with the following code:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，创建`main.tf`文件，内容如下：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, create the `output.tf` file with the following code:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，创建`output.tf`文件，内容如下：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Inside the `moduledemo` folder, create a subfolder called `MyApp`.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`moduledemo`文件夹内，创建一个名为`MyApp`的子文件夹。
- en: 'Inside the `MyApp` folder, create a `main.tf` file with the following code:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MyApp`文件夹内，创建一个`main.tf`文件，内容如下：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works…
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'In *step 1*, we create the `moduledemo` directory, which will contain the code
    for all modules with one subdirectory per module. So, we create a `WebApp` subdirectory for
    our recipe, which will contain the Terraform configuration of the `webapp` module.
    Then in *steps 2*, *3*, and *4*, we create the module code, which is the standard
    Terraform configuration and contains the following files:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*中，我们创建了`moduledemo`目录，里面包含所有模块的代码，每个模块有一个子目录。因此，我们为本教程创建了一个`WebApp`子目录，它将包含`webapp`模块的Terraform配置。接下来在*步骤2*、*3*和*4*中，我们创建了模块代码，这是标准的Terraform配置，包含以下文件：
- en: '`main.tf`: This file contains the code of the resources that will be provided
    by the module.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main.tf`：该文件包含将由模块提供的资源的代码。'
- en: '`variables.tf`: This file contains the input variables needed by the module.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`variables.tf`：该文件包含模块所需的输入变量。'
- en: '`outputs.tf`: This file contains the outputs of the module that can be used
    in the main Terraform configuration.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`outputs.tf`：该文件包含可以在主Terraform配置中使用的模块输出。'
- en: In *step 5*, we created the directory that will contain the Terraform configuration
    of our application. Finally, in *step 6*, we created the Terraform configuration
    of our application with the `main.tf` file.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤5*中，我们创建了将包含应用程序Terraform配置的目录。最后，在*步骤6*中，我们通过`main.tf`文件创建了应用程序的Terraform配置。
- en: 'In the code of this file, we have three Terraform elements:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在此文件的代码中，我们有三个Terraform元素：
- en: There is the Terraform `azurerm_resource_group` resource, which provides a Resource
    Group.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其中有Terraform的`azurerm_resource_group`资源，它提供了一个资源组。
- en: The Terraform configuration that uses the module we created, using the `module
    "<module name>"` expression. In this module type block, we used the source properties
    whose value is the relative path of the directory that contains the `webapp` module.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用我们创建的模块的Terraform配置，采用`module "<module name>"`表达式。在这个模块类型的块中，我们使用了source属性，其值是包含`webapp`模块的目录的相对路径。
- en: Note that if some variables of the module are defined with default values, then
    in some cases, it will not be necessary to instantiate them when calling the module.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果某些模块的变量已定义默认值，则在某些情况下，调用模块时无需实例化这些变量。
- en: We also have the Terraform output, `webapp_url`, which gets the output of the
    module to use it as output for our main Terraform configuration.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还获得了Terraform输出`webapp_url`，它获取模块的输出，并将其作为我们主Terraform配置的输出。
- en: There's more…
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'At the end of all of these steps, we obtain the following directory tree:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些步骤结束后，我们获得了以下目录树：
- en: '![](img/6e656a99-2a8a-4950-8783-897189d53e81.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e656a99-2a8a-4950-8783-897189d53e81.png)'
- en: 'To apply this Terraform configuration, you have to navigate in a command terminal
    to the `MyApp` folder containing the Terraform configuration and then execute
    the following Terraform workflow commands:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要应用此Terraform配置，您需要在命令终端中导航到包含Terraform配置的`MyApp`文件夹，然后执行以下Terraform工作流命令：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When executing the `terraform init` command, Terraform will get the module''s
    code and hence integrate its configuration with that of the application, as shown
    in the following screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行`terraform init`命令时，Terraform会获取模块的代码，从而将其配置与应用程序的配置集成，如下截图所示：
- en: '![](img/6f9e7a26-66eb-4026-bbc8-6fab3039e54f.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6f9e7a26-66eb-4026-bbc8-6fab3039e54f.png)'
- en: 'Finally, at the end of the execution of the `terraform apply` command, the
    value of the output is displayed in the terminal, as shown in the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在执行`terraform apply`命令结束时，输出的值会显示在终端中，如下截图所示：
- en: '![](img/6523c357-2ea2-4570-b671-ffe78fda2790.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6523c357-2ea2-4570-b671-ffe78fda2790.png)'
- en: Our Terraform configuration has therefore retrieved the output of the module
    and used it as the output of our main code.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Terraform配置因此获取了模块的输出，并将其作为主代码的输出。
- en: In this recipe, we have shown the basics of the creation of a Terraform module
    and its local use. In this chapter, we will see how to generate the structure
    of a module and how to use remote modules in the *Using the Terraform module generator*
    recipe.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们展示了创建Terraform模块及其本地使用的基本知识。在本章中，我们将看到如何生成模块的结构，以及如何在*使用Terraform模块生成器*教程中使用远程模块。
- en: See also
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The documentation on module creation is available at [https://www.terraform.io/docs/modules/index.html](https://www.terraform.io/docs/modules/index.html)
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块创建的文档可通过[https://www.terraform.io/docs/modules/index.html](https://www.terraform.io/docs/modules/index.html)查看。
- en: General documentation on the modules is available at [https://www.terraform.io/docs/configuration/modules.html](https://www.terraform.io/docs/configuration/modules.html)
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于模块的一般文档可以在 [https://www.terraform.io/docs/configuration/modules.html](https://www.terraform.io/docs/configuration/modules.html)
    找到。
- en: Terraform's learning lab on module creation is available at [https://learn.hashicorp.com/terraform/modules/creating-modules](https://learn.hashicorp.com/terraform/modules/creating-modules)
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Terraform 的模块创建学习实验室可通过 [https://learn.hashicorp.com/terraform/modules/creating-modules](https://learn.hashicorp.com/terraform/modules/creating-modules)
    访问。
- en: Using modules from the public registry
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用公共注册表中的模块
- en: In the previous recipe, we studied how to create a module and how to write a
    Terraform configuration that uses this module locally.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个教程中，我们学习了如何创建一个模块，以及如何编写使用此模块的本地 Terraform 配置。
- en: To facilitate the development of Terraform configuration, HashiCorp has set
    up a public Terraform module registry.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了便于 Terraform 配置的开发，HashiCorp 设置了一个公共的 Terraform 模块注册表。
- en: 'This registry actually solves several problems, such as the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这个注册表实际上解决了几个问题，例如以下几点：
- en: Discoverability with search and filter
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过搜索和筛选提高可发现性
- en: The quality provided via a partner verification process
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过合作伙伴验证过程提供的质量
- en: Clear and efficient versioning strategy, which is otherwise impossible to solve
    universally across other existing module sources (HTTP, S3, and Git)
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清晰高效的版本控制策略，否则在其他现有模块源（HTTP、S3 和 Git）中无法普遍解决
- en: These public modules published in this registry are developed by cloud providers,
    publishers, communities, or even individual users who wish to share their modules
    publicly. In this recipe, we will see how to access this registry and how to use
    a module that has been published in this public registry.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这些在此注册表中发布的公共模块是由云服务提供商、出版商、社区，甚至是希望公开分享其模块的个人用户开发的。在本教程中，我们将看到如何访问这个注册表，以及如何使用已在此公共注册表中发布的模块。
- en: Getting ready
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will write a Terraform code from scratch that does not require
    any special prerequisite.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将从零开始编写一个 Terraform 代码，它不需要任何特别的前提条件。
- en: The purpose of this recipe is to provision a Resource Group and network resources
    in Azure, which are a Virtual Network and Subnet. We will see the public module
    call but we won't look at the Terraform configuration of the module in detail.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的目的是在 Azure 中配置一个资源组和网络资源，包括一个虚拟网络和子网。我们将看到如何调用公共模块，但不会详细查看该模块的 Terraform
    配置。
- en: The code source of this recipe is available here: [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/publicmodule](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/publicmodule).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的代码源可以在此访问：[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/publicmodule](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/publicmodule)。
- en: How to do it…
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To use the Terraform module from a public registry, perform the following steps:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用来自公共注册表的 Terraform 模块，请执行以下步骤：
- en: In a web browser, go to the URL: [https://registry.terraform.io/browse/modules](https://registry.terraform.io/browse/modules).
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，访问网址：[https://registry.terraform.io/browse/modules](https://registry.terraform.io/browse/modules)。
- en: 'On this page, in the FILTERS list in the left panel, choose azurerm:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此页面的左侧面板的“过滤器”列表中，选择 azurerm：
- en: '![](img/7c860d58-f9aa-4f31-b1ef-def165da076b.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7c860d58-f9aa-4f31-b1ef-def165da076b.png)'
- en: 'In the results list, click on the first result, that is, the Azure / network module:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在结果列表中，点击第一个结果，即 Azure / 网络模块：
- en: '![](img/b621e18d-f5a1-4e7c-a355-a86af97eb9b2.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b621e18d-f5a1-4e7c-a355-a86af97eb9b2.png)'
- en: 'Then, on the Details page of this module, copy the code from the Usage section:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在此模块的详细页面上，复制“使用”部分的代码：
- en: '![](img/eea095d2-77ae-4687-bf7b-84f079b8ce08.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eea095d2-77ae-4687-bf7b-84f079b8ce08.png)'
- en: 'Finally, in your workstation, create a new file, `main.tf`, then paste the
    preceding code and update it as follows:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在你的工作站上创建一个新文件，`main.tf`，然后粘贴之前的代码，并根据以下内容进行更新：
- en: '[PRE5]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works…
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In *steps 1* to *2*, we explored Terraform's public registry to look for a module
    that allows the provisioning of resources for Azure (using the `azurerm` filter).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 1* 到 *步骤 2* 中，我们浏览了 Terraform 的公共注册表，寻找一个能够为 Azure 提供资源配置的模块（使用 `azurerm`
    过滤器）。
- en: Then, in *steps 3* and *4*, we accessed the Details page of the Network module
    published by the Azure team.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在*步骤 3* 和 *步骤 4* 中，我们访问了 Azure 团队发布的网络模块的详细页面。
- en: In *step 5*, we used this module by specifying these necessary input variables
    with the `source` property, which is worth of a public module-specific alias, `Azure/network/azurerm`, provided
    by the registry.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 5*中，我们通过指定这些必要的输入变量和 `source` 属性来使用这个模块，该属性值为公共模块特定的别名，`Azure/network/azurerm`，由注册表提供。
- en: There's more…
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容…
- en: We have seen in this recipe that using a module from the public registry saves
    development time. Here, in our recipe, we used a verified module but you can perfectly
    use the other community modules.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本食谱中已经看到，使用公共注册表中的模块能够节省开发时间。在我们的食谱中，我们使用了一个经过验证的模块，但你完全可以使用其他社区模块。
- en: 'It is possible to use the versioning of these modules by choosing the desired
    version of the module in the version drop-down list:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在版本下拉列表中选择所需版本，来使用这些模块的版本控制：
- en: '![](img/57fa38f5-1215-4c2c-9c70-6193c50246ee.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/57fa38f5-1215-4c2c-9c70-6193c50246ee.png)'
- en: And so in the module call, use the `Version` property with the chosen version
    number.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在模块调用中，使用 `Version` 属性并选择所需的版本号。
- en: Note that, like all modules or community packages, you must check that their
    code is clean and secure before using them by manually reviewing the code inside
    their GitHub repository. Indeed, in each of these modules, there is a link to
    the GitHub repository, which contains the sources.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，像所有模块或社区包一样，使用它们之前，必须通过手动检查其 GitHub 仓库中的代码，确保代码干净且安全。事实上，在每个模块中，都有一个指向 GitHub
    仓库的链接，里面包含源代码。
- en: In the *Sharing a Terraform module using GitHub* recipe of this chapter, we
    will see how to publish a module in the public registry.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的*使用 GitHub 分享 Terraform 模块*食谱中，我们将学习如何将模块发布到公共注册表。
- en: Also, before using a module in a company project, you must take into account
    that in case of a request for correction or evolution of a module, you need to
    create an issue or make a pull request in the GitHub repository of this module.
    This requires waiting for a period of time (validation waiting time and merge
    of the pull request) before it can be used with the fixed or the requested evolution.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在公司项目中使用模块之前，必须考虑到如果需要对模块进行修正或扩展，你需要在该模块的 GitHub 仓库中创建问题或发起拉取请求。这要求等待一段时间（验证等待时间和拉取请求合并时间），才能使用修复或请求的扩展。
- en: However, it's worth using these modules daily, as they are very handy and save
    a lot of time for demonstrations, labs, and sandbox projects.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，值得每天使用这些模块，因为它们非常实用，并能为演示、实验和沙盒项目节省大量时间。
- en: We have seen the use of the public registry in this recipe; we will study in
    [Chapter 8](7a338622-bf1e-4c4b-9c08-88eb36f079da.xhtml), *Using Terraform Cloud
    to Improve Collaboration*, how to use a private registry of modules in Terraform.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本食谱中已经看到了使用公共注册表的内容；在[第 8 章](7a338622-bf1e-4c4b-9c08-88eb36f079da.xhtml)中，我们将学习如何使用
    Terraform 的私有模块注册表来提高协作。
- en: See also
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The documentation on the Terraform module registry is available at [https://www.terraform.io/docs/registry/](https://www.terraform.io/docs/registry/).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 模块注册表的文档可以在此找到：[https://www.terraform.io/docs/registry/](https://www.terraform.io/docs/registry/)。
- en: Sharing a Terraform module using GitHub
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GitHub 分享 Terraform 模块
- en: In the *Creating a Terraform module and using it locally* recipe of this chapter,
    we studied how to create a module and in the previous recipe, *Using a module
    from the public registry*, of this chapter, how to use a module from the public
    registry.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的*创建 Terraform 模块并在本地使用*食谱中，我们学习了如何创建模块，在前面的*使用公共注册表中的模块*食谱中，我们学习了如何使用来自公共注册表的模块。
- en: In this recipe, we'll see how to publish a module in the public registry by
    storing its code on GitHub.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何通过将代码存储在 GitHub 上，将模块发布到公共注册表。
- en: Getting ready
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To apply this recipe, we need to have a GitHub account (which is currently the
    only Git provider available for publishing public modules) that you can create
    here: [https://github.com/join](https://github.com/join). Also, you'll need to
    know the basics of Git commands and workflow ([https://www.hostinger.com/tutorials/basic-git-commands](https://www.hostinger.com/tutorials/basic-git-commands)).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 要应用本食谱，我们需要拥有一个 GitHub 账户（这是目前唯一可用于发布公共模块的 Git 提供者），你可以在此处创建账户：[https://github.com/join](https://github.com/join)。此外，你还需要了解
    Git 命令和工作流的基础知识（[https://www.hostinger.com/tutorials/basic-git-commands](https://www.hostinger.com/tutorials/basic-git-commands)）。
- en: Concerning the code of the module we are going to publish, we will use the code
    of the module we created in the first recipe of this chapter, the sources of which
    are available at [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/Modules/webapp](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/Modules/webapp).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 关于我们将要发布的模块代码，我们将使用本章第一个配方中创建的模块代码，源代码可以在[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/Modules/webapp](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/Modules/webapp)找到。
- en: How to do it…
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作……
- en: 'To share our custom module in the public registry, perform the following steps:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要在公共注册表中共享我们的自定义模块，请执行以下步骤：
- en: 'In our GitHub account, create a new repository named `terraform-azurerm-webapp`
    with basic configuration, as shown in the following screenshot:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的GitHub帐户中，创建一个名为`terraform-azurerm-webapp`的新存储库，并配置基本信息，如下图所示：
- en: '![](img/b3a6fec8-43ca-4401-a3ff-e70af59eedb1.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b3a6fec8-43ca-4401-a3ff-e70af59eedb1.png)'
- en: 'In the local workstation, execute the Git command to clone this repository:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地工作站上，执行Git命令以克隆此存储库：
- en: '[PRE6]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Copy the sources code from [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/Modules/webapp](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/Modules/webapp)
    and paste it inside the new folder created by the `git clone` command.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/Modules/webapp](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/Modules/webapp)复制源代码，并将其粘贴到`git
    clone`命令创建的新文件夹中。
- en: Update the content of the `Readme.md` file with more description of the module
    role.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`Readme.md`文件的内容，增加关于模块角色的更多描述。
- en: Commit and push all files in this folder; to perform this action, you can use
    Visual Studio Code or Git commands (`commit` and `push`)
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交并推送该文件夹中的所有文件；你可以使用Visual Studio Code或Git命令（`commit`和`push`）执行此操作。
- en: 'Add and push a Git tag on this commit with the name `v0.0.1`, by executing
    this command:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令，添加并推送一个名为`v0.0.1`的Git标签：
- en: '[PRE7]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In a web browser, go to the URL [https://registry.terraform.io/](https://registry.terraform.io/).
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中，访问网址[https://registry.terraform.io/](https://registry.terraform.io/)。
- en: 'On this page, click on the Sign-in link on the top menu:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此页面上，点击顶部菜单中的“Sign-in”链接：
- en: '![](img/5634bdda-72b1-4500-8c03-bfe84d503226.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5634bdda-72b1-4500-8c03-bfe84d503226.png)'
- en: 'On the newly opened window, click on the Sign in with GitHub button, and if
    prompted, authorize HashiCorp to read your repositories:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新弹出的窗口中，点击“Sign in with GitHub”按钮，如果提示，授权HashiCorp读取你的存储库：
- en: '![](img/f29e1357-63dd-40f0-aac8-e7aaa4d98800.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f29e1357-63dd-40f0-aac8-e7aaa4d98800.png)'
- en: 'Once authenticated, click on the Publish link on the top menu:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦验证成功，点击顶部菜单中的“Publish”链接：
- en: '![](img/ce25e395-258e-4263-a602-4f7bfe13370b.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ce25e395-258e-4263-a602-4f7bfe13370b.png)'
- en: 'On the next page, select the mikaelkrief/terraform-azurerm-webapp repository, which
    contains the code of the module to publish, and check the I agree to the Terms
    of Use checkbox:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一页中，选择包含要发布模块代码的mikaelkrief/terraform-azurerm-webapp存储库，并勾选我同意使用条款的复选框：
- en: '![](img/7bd318aa-446e-4c20-81f8-af18d58b2b99.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7bd318aa-446e-4c20-81f8-af18d58b2b99.png)'
- en: Click on the PUBLISH MODULE button and wait for the module page to load.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“PUBLISH MODULE”按钮，并等待模块页面加载。
- en: How it works…
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: In *steps 1* and *2*, we created a Git repository in GitHub and cloned it locally,
    and in *steps 3* to *6*, we wrote the Terraform configuration for the module (using
    an existing code). We also edited the `Readme.md` file that will be used as documentation
    to use the module.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*和*步骤2*中，我们在GitHub上创建了一个Git存储库并将其克隆到本地，而在*步骤3*到*步骤6*中，我们编写了该模块的Terraform配置（使用现有代码）。我们还编辑了将作为模块使用文档的`Readme.md`文件。
- en: Then, we made a commit and pushed this code in the remote Git repository, and
    we added a tag that will be in the form `vX.X.X` and will be used to version the
    module.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们进行了提交并将代码推送到远程Git存储库，并添加了一个标签，该标签形式为`vX.X.X`，用于为模块进行版本控制。
- en: Finally, in *steps 7* to *12*, we published this module in the public registry,
    by logging in with our GitHub credentials in the registry and then selecting the
    repository that contains the module code.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，在*步骤7*到*步骤12*中，我们通过在注册表中使用我们的GitHub凭据登录，并选择包含模块代码的存储库，成功将该模块发布到公共注册表。
- en: The registry automatically detects the version of the module in relation to
    the Git tag that was pushed (in *step 6*).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 注册表会自动检测模块版本与所推送的Git标签（在*步骤6*中）之间的关系。
- en: 'After all of these steps, the module is available in Terraform''s public registry,
    as shown in the following screenshot:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有这些步骤后，模块将可用，并显示在 Terraform 的公共注册表中，如下图所示：
- en: '![](img/25926ff4-cb3c-49ce-935d-100cdec2f059.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/25926ff4-cb3c-49ce-935d-100cdec2f059.png)'
- en: The module is publicly accessible; the instructions for use are displayed in
    the right panel and the `Readme.md` text is displayed as documentation in the
    content of the page.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 模块是公开可访问的；使用说明显示在右侧面板中，`Readme.md` 文本作为文档显示在页面内容中。
- en: There's more…
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容…
- en: 'Concerning the name of the repository that will contain the module code, it
    must be composed as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 关于将包含模块代码的存储库的名称，它必须按以下方式组成：
- en: '[PRE8]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Similarly, for the Git tag, it must be in the form `vX.X.X` to be integrated
    into the registry. To learn more about module resumes, see the documentation: [https://www.terraform.io/docs/registry/modules/publish.html#requirements](https://www.terraform.io/docs/registry/modules/publish.html#requirements).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，对于 Git 标签，它必须采用 `vX.X.X` 的格式才能集成到注册表中。要了解更多关于模块简历的信息，请参阅文档：[https://www.terraform.io/docs/registry/modules/publish.html#requirements](https://www.terraform.io/docs/registry/modules/publish.html#requirements)。
- en: 'Once published, it is possible to delete a module by choosing Delete module from
    the Manage Module drop-down list:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 发布后，可以通过从“管理模块”下拉菜单中选择“删除模块”来删除模块：
- en: '![](img/ead4f621-5465-4017-b9f3-12edecb517c4.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ead4f621-5465-4017-b9f3-12edecb517c4.png)'
- en: 'Be careful: after deleting it from the registry, the module becomes unusable.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 请小心：从注册表中删除后，模块将无法使用。
- en: See also
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: Module publishing documentation is available here: [https://www.terraform.io/docs/registry/modules/publish.html](https://www.terraform.io/docs/registry/modules/publish.html).
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块发布文档可以在这里找到：[https://www.terraform.io/docs/registry/modules/publish.html](https://www.terraform.io/docs/registry/modules/publish.html)。
- en: Documentation on the Registry APIs is available here: [https://www.terraform.io/docs/registry/api.html](https://www.terraform.io/docs/registry/api.html).
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于注册表 API 的文档可以在这里找到：[https://www.terraform.io/docs/registry/api.html](https://www.terraform.io/docs/registry/api.html)。
- en: Using another file inside a custom module
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在自定义模块中使用另一个文件
- en: In the *Creating Terraform module and using it locally* recipe of this chapter,
    we studied the steps to create a basic Terraform module.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的 *创建 Terraform 模块并在本地使用* 中，我们研究了创建一个基本 Terraform 模块的步骤。
- en: We can have scenarios where we need to use another file in the module that doesn't
    describe the infrastructure via Terraform (`.tf` extension), for example, in the
    case where the module needs to execute a script locally for operating an internal
    program.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会遇到需要在模块中使用另一个文件的场景，该文件并不描述基础设施（例如 `.tf` 扩展名），例如，当模块需要在本地执行一个脚本以操作内部程序时。
- en: In this recipe, we will study how to use another file in a Terraform module.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将研究如何在 Terraform 模块中使用另一个文件。
- en: Getting ready
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we don't need any prerequisites; we will write the Terraform
    configuration for the module from scratch.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本教程，我们不需要任何先决条件；我们将从头开始编写模块的 Terraform 配置。
- en: The goal of this recipe is to create a Terraform module that will execute a
    Bash script that will perform actions on the local computer (for this recipe,
    a `hello world` display will suffice).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的目标是创建一个 Terraform 模块，该模块将执行一个 Bash 脚本，脚本将在本地计算机上执行操作（在本教程中，`hello world`
    显示即可）。
- en: Since we will be running a Bash script as an example, we will run Terraform
    under a Linux system.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将以 Bash 脚本为例，因此我们将在 Linux 系统下运行 Terraform。
- en: It is important to keep in mind that provisioners such as this reduce the reusability
    of your configuration by assuming that the system where Terraform runs has Bash
    installed. This is otherwise usually not a limiting factor in Terraform as it
    offers builds for different OSes and architectures and runs cross-platform.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 需要牢记的是，像这样的供应程序通过假设 Terraform 运行的系统上安装了 Bash，降低了配置的可重用性。否则，通常 Terraform 并不受此限制，因为它提供了不同操作系统和架构的构建，并支持跨平台运行。
- en: The source code of the created module in this recipe is available here: [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/Modules/execscript](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/Modules/execscript).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程中创建的模块的源代码可以在这里找到：[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/Modules/execscript](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/Modules/execscript)。
- en: How to do it…
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Perform the following steps to use the file inside the module:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以在模块内部使用文件：
- en: 'In a new folder called `execscript` (inside the `Modules` folder) that will
    contain the code of the module, we create a new file, `script.sh`, with the following
    content:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名为`execscript`的新文件夹（位于`Modules`文件夹中）内，创建一个新的文件`script.sh`，并写入以下内容：
- en: '[PRE9]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Create a `main.tf` file in this module and write the following code inside
    it:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此模块中创建一个`main.tf`文件，并在其中编写以下代码：
- en: '[PRE10]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, in the Terraform configuration, call this module using the following
    code:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在Terraform配置中，使用以下代码调用此模块：
- en: '[PRE11]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, in a command-line terminal, navigate to the folder of the Terraform
    configuration and execute the basic Terraform workflow with the following commands:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在命令行终端中，导航到Terraform配置的文件夹，并使用以下命令执行基本的Terraform工作流：
- en: '[PRE12]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How it works…
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: In *steps 1* and *2*, we created a module that executes a script locally using
    the resource, `local_exec` ([https://www.terraform.io/docs/provisioners/local-exec.html](https://www.terraform.io/docs/provisioners/local-exec.html)).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 1*和*步骤 2*中，我们创建了一个使用`local_exec`资源（[https://www.terraform.io/docs/provisioners/local-exec.html](https://www.terraform.io/docs/provisioners/local-exec.html)）在本地执行脚本的模块。
- en: '`local_exec` executes a script that is in a `script.sh` file that is stored
    inside the module. To configure the path relative to this `script.sh` file, which
    can be used during the execution of Terraform, we used the `path.module` expression,
    which returns the complete path relative to the module.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`local_exec`执行的是存储在模块中的`script.sh`文件中的脚本。为了配置相对于`script.sh`文件的路径，在执行Terraform时可以使用`path.module`表达式，它返回相对于模块的完整路径。'
- en: 'Then, in *step 3*, we wrote the Terraform configuration that calls this module.
    Finally, in *step 4*, we run Terraform on this code and we get the following result:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在*步骤 3*中，我们编写了调用此模块的Terraform配置。最后，在*步骤 4*中，我们运行了该代码的Terraform，并得到了以下结果：
- en: '![](img/1a6cc0f5-b01a-4979-b71b-1c0babb545a8.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1a6cc0f5-b01a-4979-b71b-1c0babb545a8.png)'
- en: You can see that the script executed successfully and it displays `Hello World`
    in the console.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到脚本执行成功，并且在控制台中显示了`Hello World`。
- en: There's more…
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: 'Let''s see what would happen if we hadn''t used the `path.module` expression in
    the code of this module and we had written the module code in the following way:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如果我们没有在此模块的代码中使用`path.module`表达式，而是以以下方式编写模块代码会发生什么：
- en: '[PRE13]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When executing the `apply` command, the following error would have occurred:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`apply`命令时，将会发生以下错误：
- en: '![](img/6d27804a-779a-47c3-bc2f-f5cd0bffb60d.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d27804a-779a-47c3-bc2f-f5cd0bffb60d.png)'
- en: This is because Terraform runs in the `main.tf` file, which does not have access
    to the `relatif` path of the `script.sh` file in the module directory.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为Terraform在`main.tf`文件中运行，而该文件无法访问模块目录中`script.sh`文件的`relatif`路径。
- en: See also
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: Documentation on the `Path.Module` expression is available here: [https://www.terraform.io/docs/configuration/expressions.html#references-to-named-values](https://www.terraform.io/docs/configuration/expressions.html#references-to-named-values).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`Path.Module`表达式的文档，请参见：[https://www.terraform.io/docs/configuration/expressions.html#references-to-named-values](https://www.terraform.io/docs/configuration/expressions.html#references-to-named-values)。
- en: Using the Terraform module generator
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Terraform模块生成器
- en: We learned how to create, use, and share a Terraform module and we studied the
    module's files structure good practices, which consists of having a main file,
    another for variables, and another that contains the outputs of the module. In
    the *Sharing a Terraform module using GitHub* recipe, we also discussed that we
    could document the use of the module with a `Readme.md` file.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学会了如何创建、使用和共享Terraform模块，并研究了模块文件结构的最佳实践，其中包括有一个主文件、一个变量文件和一个包含模块输出的文件。在*使用GitHub共享Terraform模块*食谱中，我们还讨论了如何通过`Readme.md`文件记录模块的使用。
- en: Apart from these standard files for the operation of the module, we can also
    add scripts, tests (which we will see in the *Testing Terraform module code with
    Terratest *recipe), and other files.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些标准文件外，我们还可以添加脚本、测试（稍后我们将在*使用Terratest测试Terraform模块代码*食谱中看到）和其他文件。
- en: For company projects with large infrastructures and a lot of resources to be
    provided with Terraform, we will need to create a lot of Terraform modules.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 对于需要使用Terraform提供大量资源的大型基础设施公司项目，我们需要创建大量的Terraform模块。
- en: To facilitate the creation of the structure of the modules, Microsoft has published
    a tool that allows us to generate the basic structure (also called a **template**)
    of a Terraform module.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化模块结构的创建，微软发布了一个工具，允许我们生成 Terraform 模块的基本结构（也称为**模板**）。
- en: In this recipe, we will see how to create the base of a module using the module
    generator.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将看到如何使用模块生成器创建模块的基础结构。
- en: Getting ready
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The software prerequisites to use this module generator are in the following
    order:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个模块生成器的前提软件如下：
- en: Install Node.js (6.0+) locally; its download documentation is available at [https://nodejs.org/en/download/](https://nodejs.org/en/download/).
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本地安装 Node.js（6.0+）；其下载文档可以在[https://nodejs.org/en/download/](https://nodejs.org/en/download/)找到。
- en: 'Then install the `npm` package, Yeoman ([https://www.npmjs.com/package/yo](https://www.npmjs.com/package/yo)),
    by executing the following command:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过执行以下命令安装 `npm` 包 Yeoman ([https://www.npmjs.com/package/yo](https://www.npmjs.com/package/yo))：
- en: '[PRE14]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: To illustrate this recipe, we will use this generator to create the structure
    of a module that will be in charge of provisioning a Resource Group.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这个步骤，我们将使用这个生成器来创建一个负责配置资源组的模块结构。
- en: A sample of the generated module from this recipe is available at [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/generatedmodule](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/generatedmodule).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程生成的模块样本可以在[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/generatedmodule](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/generatedmodule)找到。
- en: How to do it…
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To generate a structure for a Terraform module perform the following steps:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成 Terraform 模块的结构，请执行以下步骤：
- en: 'In a command-line terminal, execute the command:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行终端中，执行以下命令：
- en: '[PRE15]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Create a new folder with the name of the module as `terraform-azurerm-rg`.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `terraform-azurerm-rg` 的新文件夹。
- en: 'Then, in this folder, in the command-line terminal, execute this command:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在这个文件夹中，在命令行终端中执行此命令：
- en: '[PRE16]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, the generator will ask some questions; type the responses like this
    following screenshot:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，生成器会提出一些问题；按照下面的截图输入相应的回答：
- en: '![](img/8b5e3dd2-1dbb-4b0c-bac8-461c44db7382.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8b5e3dd2-1dbb-4b0c-bac8-461c44db7382.png)'
- en: How it works…
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In *step 1*, we installed the module generator, which is an `npm` package called
    `generator-az-terra-module`. So we used the classical `npm` command line, which
    installs a package globally, that is to say, for the whole machine.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 1*中，我们安装了模块生成器，它是一个名为 `generator-az-terra-module` 的 `npm` 包。所以我们使用了经典的
    `npm` 命令行，它会全局安装包，也就是说，安装到整台机器上。
- en: In *step 2*, we created the folder that will contain the code of the module;
    for our recipe, we used the nomenclature required by the Terraform registry.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 2*中，我们创建了一个将包含模块代码的文件夹；在我们的教程中，我们使用了 Terraform 注册表要求的命名规范。
- en: In *steps 3 and 4*, we executed the `az-terra-module` generator. During its
    execution, this generator asks the user questions that will allow the customization
    of the module template that will be generated. The first question concerns the
    name of the module. The second one concerns the existence of the module in `npm`;
    we answered `No`. Then, the next three questions concern the module metadata.
    Finally, the last question is to know whether we want to add to the module code
    a Dockerfile that will be used to run the tests on the module—we answer `Yes`.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 3 和 4*中，我们执行了 `az-terra-module` 生成器。在执行过程中，这个生成器会提出一些问题，允许定制将生成的模块模板。第一个问题是关于模块名称的。第二个问题是关于模块是否存在于
    `npm` 中；我们回答了`否`。接下来的三个问题涉及模块元数据。最后，最后一个问题是问我们是否想在模块代码中添加一个 Dockerfile，用于运行模块的测试——我们回答了`是`。
- en: 'At the end of all of these questions, the generator copies all of the files
    necessary for the module in our directory:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有这些问题的最后，生成器将把所有必要的文件复制到我们目录中的模块：
- en: '![](img/8f924608-681f-47a0-92fa-5941ad9149e3.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8f924608-681f-47a0-92fa-5941ad9149e3.png)'
- en: As you can see in this screen, the generator displays in the terminal the list
    of folders and files that have been created.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在此屏幕中所见，生成器会在终端中显示已创建的文件夹和文件列表。
- en: 'Finally, in our file explorer, we can actually see all of these files:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在我们的文件资源管理器中，我们可以看到所有这些文件：
- en: '![](img/fccd8fd0-fd81-42d0-86d1-1e11a14e4b99.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fccd8fd0-fd81-42d0-86d1-1e11a14e4b99.png)'
- en: The basic structure of our Terraform module is well generated.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 Terraform 模块的基本结构已经生成。
- en: There's more…
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: In this recipe, we have seen that it is possible to generate the file structure
    of a Terraform module. At the end of the execution of this generator, the directory
    of the created module contains the Terraform files of the module, which will be
    edited afterward with the code of the module. This folder will also contain other
    test files and a Dockerfile whose usefulness we will see in the *Testing a Terraform
    module with Terratest* recipe of this chapter.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们看到可以生成 Terraform 模块的文件结构。在此生成器执行完成后，创建的模块目录将包含该模块的 Terraform 文件，随后将使用模块的代码进行编辑。此文件夹还将包含其他测试文件和一个
    Dockerfile，其用途将在本章的 *使用 Terratest 测试 Terraform 模块* 食谱中介绍。
- en: Also, although this generator is published by Microsoft, it can be used to generate
    the structure of any Terraform modules you need to create even if it does not
    provide anything in Azure.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，虽然此生成器是由 Microsoft 发布的，但它可以用于生成任何 Terraform 模块的结构，即使它与 Azure 无关。
- en: See also
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The source code for the module generator is available on GitHub at [https://github.com/Azure/generator-az-terra-module](https://github.com/Azure/generator-az-terra-module).
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块生成器的源代码可以在 GitHub 上找到，网址为 [https://github.com/Azure/generator-az-terra-module](https://github.com/Azure/generator-az-terra-module)。
- en: Documentation on the use of the generator is available at [https://docs.microsoft.com/en-us/azure/developer/terraform/create-a-base-template-using-yeoman](https://docs.microsoft.com/en-us/azure/developer/terraform/create-a-base-template-using-yeoman).
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成器使用文档可以在 [https://docs.microsoft.com/en-us/azure/developer/terraform/create-a-base-template-using-yeoman](https://docs.microsoft.com/en-us/azure/developer/terraform/create-a-base-template-using-yeoman)
    找到。
- en: Yeoman documentation is available at [https://yeoman.io/](https://yeoman.io/).
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Yeoman 文档可以在 [https://yeoman.io/](https://yeoman.io/) 上找到。
- en: The `npm` package of the generator is available at [https://www.npmjs.com/package/generator-az-terra-module](https://www.npmjs.com/package/generator-az-terra-module).
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成器的 `npm` 包可以在 [https://www.npmjs.com/package/generator-az-terra-module](https://www.npmjs.com/package/generator-az-terra-module)
    上找到。
- en: Generating module documentation
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成模块文档
- en: We have learned from the previous recipes that in the composition of a Terraform
    module we have input variables, as well as outputs.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 从之前的教程中我们已经了解到，在 Terraform 模块的组成中，有输入变量以及输出变量。
- en: As with all packages that are made available to other teams or even publicly,
    it is very important to document your Terraform module.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 和所有发布给其他团队或公开使用的包一样，记录 Terraform 模块的文档非常重要。
- en: The problem with this documentation is that it is tedious to update the document
    with each change and therefore quickly becomes obsolete.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 这份文档的问题在于，每次更改时都需要手动更新文档，因此很快就会变得过时。
- en: Among all of the tools in the Terraform toolbox, there is `terraform-docs`,
    an open source, cross-platform tool that allows the documentation of a Terraform
    module to be generated automatically.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Terraform 工具箱中的所有工具中，有一个名为 `terraform-docs` 的开源跨平台工具，可以自动生成 Terraform 模块的文档。
- en: We will discuss in this recipe how to automatically generate the markdown documentation
    of a module with `terraform-docs`.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将讨论如何使用 `terraform-docs` 自动生成模块的 markdown 文档。
- en: Getting ready
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we are going to generate the documentation of the module we
    created in the *Creating a Terraform module and using it locally* recipe of this
    chapter, which allowed us to create a web app in Azure, the sources of which are
    here: [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/Modules/webapp](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/Modules/webapp).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本教程，我们将生成在本章的 *创建 Terraform 模块并在本地使用* 食谱中创建的模块的文档，该模块使我们能够在 Azure 中创建一个 Web
    应用，源代码位于这里： [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/Modules/webapp](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/Modules/webapp)。
- en: If you are working on a Windows OS, you will need to install **Chocolatey**
    by following this documentation: [https://chocolatey.org/install](https://chocolatey.org/install).
    The documentation we will generate for the `webapp` module is available at [https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP05/moduledemo/Modules/webapp/Readme.md](https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP05/moduledemo/Modules/webapp/Readme.md).
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Windows 操作系统，你需要按照以下文档安装**Chocolatey**：[https://chocolatey.org/install](https://chocolatey.org/install)。我们为
    `webapp` 模块生成的文档可以在 [https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP05/moduledemo/Modules/webapp/Readme.md](https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP05/moduledemo/Modules/webapp/Readme.md)
    查阅。
- en: How to do it…
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Perform the following steps to generate the module documentation:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤生成模块文档：
- en: 'If you work on a Linux OS, execute the following script in a command-line terminal:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用的是 Linux 操作系统，请在命令行终端中执行以下脚本：
- en: '[PRE17]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If you work on a Windows OS, execute the following script:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Windows 操作系统，请执行以下脚本：
- en: '[PRE18]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Execute the following script to test the installation:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下脚本来测试安装：
- en: '[PRE19]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In a command-line terminal, navigate inside the `moduledemo` folder and execute
    the following command:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行终端中，进入 `moduledemo` 文件夹并执行以下命令：
- en: '[PRE20]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works…
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In *step 1*, we install `terraform-docs` according to the operating system.
    For Linux, the provided script downloads the `terraform-docs` package from GitHub,
    decompresses it with the TAR tool, gives it execution rights with `chmod`, and
    finally copies it to the local directory, `/usr/bin/local` (which is already configured
    in the `PATH` environment variable).
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *第 1 步* 中，我们根据操作系统安装 `terraform-docs`。对于 Linux，提供的脚本从 GitHub 下载 `terraform-docs`
    包，使用 TAR 工具解压，使用 `chmod` 赋予执行权限，最后将其复制到本地目录 `/usr/bin/local`（该目录已在 `PATH` 环境变量中配置）。
- en: 'The following screenshot shows the installation in Linux:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在 Linux 中的安装过程：
- en: '![](img/8f3b3fb7-3a62-47eb-97af-c58b812637ad.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8f3b3fb7-3a62-47eb-97af-c58b812637ad.png)'
- en: For Windows, the script uses the `choco install` command from **Chocolatey**
    to download the `terraform-docs` package.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows，脚本使用 **Chocolatey** 的 `choco install` 命令来下载 `terraform-docs` 包。
- en: 'The following screenshot shows the installation in Windows:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在 Windows 中的安装过程：
- en: '![](img/5df811ca-9c44-4cec-9e0a-5fa57040dd0e.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5df811ca-9c44-4cec-9e0a-5fa57040dd0e.png)'
- en: 'Then, in *step 2*, we check its installation by running `terraform-docs` and
    adding the `--version` option. This command displays the installed version of
    `terraform-docs`, as shown in the following screenshot:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在 *第 2 步* 中，我们通过运行 `terraform-docs` 并添加 `--version` 选项来检查其安装情况。此命令将显示已安装的
    `terraform-docs` 版本，如以下截图所示：
- en: '![](img/a070d16a-6475-47ba-9c1c-396cb914f9ce.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a070d16a-6475-47ba-9c1c-396cb914f9ce.png)'
- en: 'Finally, in *step 3*, we execute `terraform-docs` specifying in the first argument
    the type of format of the documentation. In our case, we want it in `markdown`
    format. Then, in the second argument, we specify the path of the `modules` directory.
    At this stage, we could execute the command this way and during its execution,
    the documentation is displayed in the console, as shown in the following screenshot:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 *第 3 步* 中，我们执行 `terraform-docs`，在第一个参数中指定文档的格式类型。在我们的案例中，我们希望它是 `markdown`
    格式。然后，在第二个参数中，指定 `modules` 目录的路径。在这个阶段，我们可以这样执行命令，并且在执行过程中，文档会显示在控制台上，如以下截图所示：
- en: '![](img/9e7a2608-68cd-49f2-a879-69582c8389f8.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9e7a2608-68cd-49f2-a879-69582c8389f8.png)'
- en: But to go further, we added the `> Modules/webapp/Readme.md` command, which
    indicates that the content of the generated documentation will be written in the
    `Readme.md` file that will be created in the module directory.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 但为了进一步操作，我们添加了 `> Modules/webapp/Readme.md` 命令，它表示生成的文档内容将写入模块目录中创建的 `Readme.md`
    文件。
- en: At the end of the execution of this command, a new `Readme.md` file can be seen
    inside the module folder that contains the module documentation. The generated
    documentation is composed of the providers used in the module, the input variables,
    and the outputs.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 执行该命令结束后，可以在模块文件夹中看到一个新的 `Readme.md` 文件，里面包含模块文档。生成的文档由模块中使用的提供程序、输入变量和输出组成。
- en: There's more…
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: In our recipe, we chose to generate markdown documentation, but it is also possible
    to generate it in JSON, XML, YAML, or text (pretty) format. To do so, you have
    to add the format option to the `terraform-docs` command. To know more about the
    available generation formats, read the documentation here: [https://github.com/segmentio/terraform-docs/blob/master/docs/FORMATS_GUIDE.md](https://github.com/segmentio/terraform-docs/blob/master/docs/FORMATS_GUIDE.md).
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的食谱中，我们选择生成Markdown格式的文档，但也可以生成JSON、XML、YAML或文本（漂亮的）格式。为此，你需要在`terraform-docs`命令中添加格式选项。欲了解更多可用的生成格式，请阅读文档：[https://github.com/segmentio/terraform-docs/blob/master/docs/FORMATS_GUIDE.md](https://github.com/segmentio/terraform-docs/blob/master/docs/FORMATS_GUIDE.md)。
- en: You can also improve your processes by automating the generation of documentation
    by triggering the execution of `terraform-docs` every time you commit code in
    Git. For this, you can use a pre-commit Git Hook, as explained in the documentation
    here: [https://github.com/segmentio/terraform-docs/blob/master/docs/USER_GUIDE.md#integrating-with-your-terraform-repository](https://github.com/segmentio/terraform-docs/blob/master/docs/USER_GUIDE.md#integrating-with-your-terraform-repository).
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过自动化生成文档来改善你的工作流程，每次在Git中提交代码时触发`terraform-docs`的执行。为此，你可以使用一个预提交的Git钩子，具体可以参考文档中的说明：[https://github.com/segmentio/terraform-docs/blob/master/docs/USER_GUIDE.md#integrating-with-your-terraform-repository](https://github.com/segmentio/terraform-docs/blob/master/docs/USER_GUIDE.md#integrating-with-your-terraform-repository)。
- en: Also, to get the latest version of `terraform-docs`, follow the release here: [https://github.com/segmentio/terraform-docs/releases](https://github.com/segmentio/terraform-docs/releases),
    as well as `CHANGELOG` here: [https://github.com/segmentio/terraform-docs/blob/master/CHANGELOG.md](https://github.com/segmentio/terraform-docs/blob/master/CHANGELOG.md),
    to see the changes.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，要获取最新版本的`terraform-docs`，请查看这里的发布：[https://github.com/segmentio/terraform-docs/releases](https://github.com/segmentio/terraform-docs/releases)，以及这里的`CHANGELOG`：[https://github.com/segmentio/terraform-docs/blob/master/CHANGELOG.md](https://github.com/segmentio/terraform-docs/blob/master/CHANGELOG.md)，以查看变更内容。
- en: If you want to publish your module in the Terraform registry as we have seen
    in the *Sharing a Terraform module using GitHub* recipe in this chapter, you do
    not need to generate this documentation because it is already included in the
    registry's functionalities.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想像我们在本章的*使用GitHub共享Terraform模块*食谱中所看到的那样，将你的模块发布到Terraform注册表中，你不需要生成这些文档，因为它已经包含在注册表的功能中了。
- en: See also
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: Source code for `terraform-docs` is available here: [https://github.com/segmentio/terraform-docs](https://github.com/segmentio/terraform-docs).
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`terraform-docs`的源代码可以在这里找到：[https://github.com/segmentio/terraform-docs](https://github.com/segmentio/terraform-docs)。'
- en: The Chocolatey `terraform-docs` package page is available here: [https://chocolatey.org/packages/Terraform-Docs](https://chocolatey.org/packages/Terraform-Docs).
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chocolatey的`terraform-docs`包页面可以在这里找到：[https://chocolatey.org/packages/Terraform-Docs](https://chocolatey.org/packages/Terraform-Docs)。
- en: Using a private Git repository for sharing a Terraform module
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用私人Git仓库共享Terraform模块
- en: In this chapter dedicated to Terraform modules, we have seen that it is possible
    to put the code of a module in a GitHub repository to publish it in the Terraform
    public registry.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章专门讲解Terraform模块的内容中，我们已经看到，可以将模块的代码放入GitHub仓库中，以便将其发布到Terraform公共注册表中。
- en: However, in enterprises, there is a need to create modules without exposing
    the code of these modules publicly by archiving them in GitHub repositories, which
    are public, that is, accessible by everyone.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在企业中，确实需要创建模块，但又不希望将这些模块的代码公开，可以通过将它们归档在GitHub的公共仓库中（即每个人都可以访问的仓库）来实现。
- en: What you need to know is that there are several types of Terraform module sources,
    as indicated in this documentation: [https://www.terraform.io/docs/modules/sources.html](https://www.terraform.io/docs/modules/sources.html).
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要知道的是，Terraform模块有几种不同的源类型，详细内容请见文档：[https://www.terraform.io/docs/modules/sources.html](https://www.terraform.io/docs/modules/sources.html)。
- en: In this recipe, we will study how to expose a Terraform module through a private
    Git repository. That is to say, either this Git is installed internally (so-called
    on-premises) or in cloud mode, SaaS, but requires authentication.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将学习如何通过一个私人Git仓库公开一个Terraform模块。也就是说，Git仓库可以是内部安装的（即所谓的本地部署）或云模式的SaaS，但需要身份验证。
- en: Getting ready
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will use a Git repository in **Azure Repos **(Azure DevOps),
    which is free and requires authentication to access it. For more information and
    how to create a free Azure DevOps account, go to [https://azure.microsoft.com/en-us/services/devops/](https://azure.microsoft.com/en-us/services/devops/).
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我们将使用**Azure Repos**（Azure DevOps）中的一个Git仓库，它是免费的，并且需要认证才能访问。有关更多信息以及如何创建免费的Azure
    DevOps账户，请访问[https://azure.microsoft.com/en-us/services/devops/](https://azure.microsoft.com/en-us/services/devops/)。
- en: As a prerequisite, we need a project that has already been created; it can be
    named, for example, `Terraform-modules`, and it will contain the Git repository
    of all of the modules.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 作为前提条件，我们需要一个已经创建的项目，例如，`Terraform-modules`，它将包含所有模块的Git仓库。
- en: 'The next screenshot shows the form to create this Azure DevOps project:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 下一张截图展示了创建该Azure DevOps项目的表单：
- en: '![](img/f1b7b966-5572-46a0-94b1-3ababfa7a565.png)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f1b7b966-5572-46a0-94b1-3ababfa7a565.png)'
- en: The purpose of this recipe is not to focus on the use of Azure DevOps; we will
    use it just to have an example of a private repository.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例的目的是不专注于Azure DevOps的使用；我们仅使用它作为私有仓库的示例。
- en: You will also need to know the basics of the commands and workflow of Git: [https://www.hostinger.com/tutorials/basic-git-commands](https://www.hostinger.com/tutorials/basic-git-commands).
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要了解Git的命令和工作流程的基础知识：[https://www.hostinger.com/tutorials/basic-git-commands](https://www.hostinger.com/tutorials/basic-git-commands)。
- en: Concerning the code of the module that we are going to put in Azure Repos, we
    are going to use the code of the module that we created in the first recipe of
    this chapter, the source code for which is available here: [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/Modules/webapp](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/Modules/webapp).
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 关于我们将放入Azure Repos的模块代码，我们将使用本章第一个示例中创建的模块代码，其源代码可在这里找到：[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/Modules/webapp](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/Modules/webapp)。
- en: How to do it…
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To use a private module repository, we need to perform the following steps:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用私有模块仓库，我们需要执行以下步骤：
- en: 'In the Azure DevOps project, `Terraform-modules`, create a new Git repository
    named `terraform-azurerm-webapp` with basic configuration, as shown in the following
    screenshot:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Azure DevOps项目`Terraform-modules`中，创建一个名为`terraform-azurerm-webapp`的新Git仓库，并进行基本配置，如下图所示：
- en: '![](img/bf2184cd-59b0-44b5-b8bd-ce42afa205e8.png)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bf2184cd-59b0-44b5-b8bd-ce42afa205e8.png)'
- en: 'In a local workstation, execute the Git command for cloning this repository:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本地工作站上，执行Git命令以克隆该仓库：
- en: '[PRE21]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: During the first operation, you will have to enter your Azure DevOps login and
    password for identification.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一次操作时，你需要输入你的Azure DevOps登录名和密码以进行身份验证。
- en: Copy the source code from [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/Modules/webapp](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/Modules/webapp)
    and paste it the new folder created by the Git clone.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/Modules/webapp](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/moduledemo/Modules/webapp)复制源代码，并将其粘贴到Git克隆创建的新文件夹中。
- en: Update the content of the `Readme.md` file with more of a description of the
    module role.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`Readme.md`文件的内容，增加模块角色的描述。
- en: 'Commit and push all files in this folder; to perform this action, you can use
    VS Code or Git commands:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交并推送此文件夹中的所有文件；要执行此操作，可以使用VS Code或Git命令：
- en: '[PRE22]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add and push a Git tag on this commit with the name, `v0.0.1`, by executing
    this command:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加并推送此提交的Git标签，名称为`v0.0.1`，通过执行以下命令：
- en: '[PRE23]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This operation can also be done via the web interface of Azure Repos, in the
    Tags tab of the repository.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以通过Azure Repos的网页界面在仓库的Tags标签页中执行此操作。
- en: 'Finally, in the Terraform `main.tf` file, the following code is written that
    uses the module:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在Terraform的`main.tf`文件中，写入以下代码以使用该模块：
- en: '[PRE24]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works…
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'In *steps 1* and *2*, we created a Git repository in Azure Repos and cloned
    it locally. Then, in *steps 3* to *7*, we wrote the Terraform configuration for
    the module (using an already existing code). We also edited the `Readme.md` file
    that will be used as a documentation for the use of the module. Then, we made
    a commit and pushed this code into the remote Git Azure repository. The following
    screenshot shows the remote repository in Azure Repos:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第 1 步*和*第 2 步*中，我们在 Azure Repos 中创建了一个 Git 仓库并将其克隆到本地。然后，在*第 3 步*到*第 7 步*中，我们为该模块编写了
    Terraform 配置（使用已有的代码）。我们还编辑了将作为模块使用文档的 `Readme.md` 文件。接着，我们提交并推送了代码到远程 Git Azure
    仓库。以下截图展示了远程仓库在 Azure Repos 中的情况：
- en: '![](img/4805b372-65d4-4fbb-b6bf-0e44050f51fb.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4805b372-65d4-4fbb-b6bf-0e44050f51fb.png)'
- en: And finally, we added a Git tag, which will be in the form `vX.X.X` and which
    will be used to version the module.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们添加了一个 Git 标签，格式为 `vX.X.X`，用于版本管理模块。
- en: Finally, in *step 8*, we wrote the Terraform configuration, which remotely uses
    this module with a Git type source. For this, we specified the `source` property
    of the module with the Git URL of the repository. In addition to this URL, we
    added the `ref` parameter to which we give as a value the Git tag we created.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在*第 8 步*中，我们编写了 Terraform 配置，通过 Git 类型的源来远程使用这个模块。为此，我们在模块的 `source` 属性中指定了仓库的
    Git URL。除了这个 URL，我们还添加了 `ref` 参数，并为其指定了我们创建的 Git 标签作为值。
- en: 'It will be during the execution of the `terraform init` command that Terraform
    will clone the repository locally:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行 `terraform init` 命令时，Terraform 会将仓库克隆到本地：
- en: '![](img/4e78e09e-fbd3-4fb6-ba58-74239f1689b1.png)'
  id: totrans-303
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e78e09e-fbd3-4fb6-ba58-74239f1689b1.png)'
- en: 'The module code will be cloned into the Terraform context directory, as shown
    in the following screenshot:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 模块代码将被克隆到 Terraform 上下文目录中，如下图所示：
- en: '![](img/794c0775-d955-42ae-8377-cf3219380985.png)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
  zh: '![](img/794c0775-d955-42ae-8377-cf3219380985.png)'
- en: The `webapp` module is downloaded inside the `.terraform` folder.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`webapp` 模块将被下载到 `.terraform` 文件夹中。'
- en: There's more…
  id: totrans-307
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多内容……
- en: In this recipe, the majority of the steps are identical to the ones already
    studied in the *Sharing a Terraform module using GitHub* recipe in which we stored
    the module code in GitHub and shared it in the public registry. The difference
    is that, in *step 8* of this recipe, we filled the value of the `source` property
    with the Git repository URL.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，大部分步骤与之前在*使用 GitHub 分享 Terraform 模块*食谱中所学的步骤相同，其中我们将模块代码存储在 GitHub 中并将其共享到公共注册表。不同之处在于，在本食谱的*第
    8 步*中，我们在 `source` 属性中填写了 Git 仓库的 URL。
- en: The advantages of using a private Git repository are, on the one hand, that
    it's only accessible by people who have permissions for that repository. On the
    other hand, in the `ref` parameter that we put in the module call URL, we used
    a specific version of the module using a Git tag. We can also perfectly name a
    specific Git branch, which is very useful when we want to evolve the module without
    impacting the master branch.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 使用私有 Git 仓库的优势，一方面是只有具有权限的人才能访问该仓库；另一方面，在我们为模块调用 URL 设置的 `ref` 参数中，我们使用了一个特定版本的模块，使用的是
    Git 标签。我们也可以完全指定一个特定的 Git 分支，这在我们想要开发模块而不影响主分支时非常有用。
- en: We could also very well store the module's code in a GitHub repository and fill
    the `source` properties with the GitHub repository URL, as shown in this documentation: [https://www.terraform.io/docs/modules/sources.html#github](https://www.terraform.io/docs/modules/sources.html#github).
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以将模块的代码存储在 GitHub 仓库中，并将 `source` 属性填写为 GitHub 仓库的 URL，具体说明请见这篇文档：[https://www.terraform.io/docs/modules/sources.html#github](https://www.terraform.io/docs/modules/sources.html#github)。
- en: In this recipe, we took a Git repository in Azure DevOps as an example, but
    it works very well with other Git repository providers such as Bitbucket ([https://www.terraform.io/docs/modules/sources.html#bitbucket](https://www.terraform.io/docs/modules/sources.html#bitbucket)).
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们以 Azure DevOps 中的 Git 仓库为例，但它也能很好地与其他 Git 仓库提供商（如 Bitbucket）兼容（[https://www.terraform.io/docs/modules/sources.html#bitbucket](https://www.terraform.io/docs/modules/sources.html#bitbucket)）。
- en: Regarding Git repository authentication, you can check out this documentation
    at [https://www.terraform.io/docs/modules/sources.html#generic-git-repository](https://www.terraform.io/docs/modules/sources.html#generic-git-repository),
    for information on access to and authentication of the Git repository in HTTPS
    or SSH.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Git 仓库的身份验证，您可以查看这篇文档：[https://www.terraform.io/docs/modules/sources.html#generic-git-repository](https://www.terraform.io/docs/modules/sources.html#generic-git-repository)，了解通过
    HTTPS 或 SSH 访问和验证 Git 仓库的信息。
- en: See also
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The module source documentation is available here: [https://www.terraform.io/docs/modules/sources.html](https://www.terraform.io/docs/modules/sources.html).
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 模块源文档可以在这里找到：[https://www.terraform.io/docs/modules/sources.html](https://www.terraform.io/docs/modules/sources.html)。
- en: Applying a Terrafile pattern for using modules
  id: totrans-315
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用 Terrafile 模式以使用模块
- en: We have seen throughout this chapter's recipes how to create Terraform modules
    and how to use them either locally or remotely with the public registry or Git
    repositories.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的教程中，我们已经学习了如何创建 Terraform 模块，并且如何使用它们，无论是本地使用还是通过公共注册表或 Git 仓库远程使用。
- en: However, when you have a Terraform configuration that uses many modules, managing
    these modules can become complicated. This is indeed the case when the versions
    of these modules change; it is necessary to browse through all of the Terraform
    configurations to make version changes. Moreover, we do not have global visibility
    on all of the modules called in this Terraform configuration as well as their
    versions.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当你拥有一个使用多个模块的 Terraform 配置时，管理这些模块可能变得复杂。特别是当这些模块的版本发生变化时，我们需要遍历所有 Terraform
    配置来进行版本更新。此外，我们也无法全面了解这个 Terraform 配置中调用的所有模块及其版本。
- en: Analogous to the classic package managers (NPM and NuGet), a pattern has been
    exposed by several people that allows users to gather the configuration of the
    Terraform modules used in a Terraform configuration in a centralized file called
    a **Terrafile**.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于经典的包管理工具（NPM 和 NuGet），有许多人提出了一种模式，允许用户将 Terraform 配置中使用的模块的配置集中在一个名为**Terrafile**的文件中。
- en: In this recipe, we will study how to use the Terrafile pattern to manage the
    sources of the Terraform modules.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何使用 Terrafile 模式来管理 Terraform 模块的源。
- en: Getting ready
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will use the Terraform source code that is already written
    and available here: [https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP05/terrafile/initial/main.tf](https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP05/terrafile/initial/main.tf).
    This Terraform configuration is at first classically configured—it calls several
    modules and in each of the calls to these modules, we use the source property
    with the GitHub repositories' URLs.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，我们将使用已经编写好的 Terraform 源代码，代码可以在这里找到：[https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP05/terrafile/initial/main.tf](https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP05/terrafile/initial/main.tf)。这个
    Terraform 配置一开始是经典配置的——它调用了多个模块，并且在每次调用这些模块时，我们使用了 GitHub 仓库的 URL 作为 source 属性。
- en: Moreover, we will execute a code written in Ruby with Rake ([https://github.com/ruby/rake](https://github.com/ruby/rake)).
    For this, we need to have Ruby installed on our computer. The installation documentation
    is available here: [https://www.ruby-lang.org/en/documentation/installation/](https://www.ruby-lang.org/en/documentation/installation/).
    However, no prior Ruby knowledge is required; the complete script is provided
    in the source code of this recipe.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还将执行用 Ruby 编写的代码，并使用 Rake 工具（[https://github.com/ruby/rake](https://github.com/ruby/rake)）。为此，我们需要在计算机上安装
    Ruby。安装文档可以在这里找到：[https://www.ruby-lang.org/en/documentation/installation/](https://www.ruby-lang.org/en/documentation/installation/)。不过，不需要提前了解
    Ruby；本教程中的完整脚本已经提供。
- en: The goal of this recipe will be to integrate the Terrafile pattern in this code
    by centralizing the management of the modules to be used. The code source of this
    recipe is available at [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/terrafile](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/terrafile).
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的目标是通过将模块的管理集中化，集成 Terrafile 模式。此教程的源代码可以在这里找到：[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/terrafile](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/terrafile)。
- en: How to do it…
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps to use the Terrafile pattern:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以使用 Terrafile 模式：
- en: Copy the content of `main.tf` available at [https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP05/terrafile/initial/main.tf](https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP05/terrafile/initial/main.tf)
    inside a new folder.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将[https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP05/terrafile/initial/main.tf](https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP05/terrafile/initial/main.tf)中的
    `main.tf` 内容复制到一个新文件夹中。
- en: 'In this new folder, create a new file called `Terrafile` (without an extension)
    with the following content:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个新文件夹中，创建一个名为 `Terrafile`（无扩展名）的新文件，内容如下：
- en: '[PRE25]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create another new file, `Rakefile` (without an extension), with the following
    content (the complete source code is at [https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP05/terrafile/new/Rakefile](https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP05/terrafile/new/Rakefile)):'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建另一个新文件，`Rakefile`（没有扩展名），其内容如下（完整的源代码见[https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP05/terrafile/new/Rakefile](https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP05/terrafile/new/Rakefile)）：
- en: '[PRE26]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In `main.tf`, update all source module properties with the following content:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main.tf`中，使用以下内容更新所有源模块属性：
- en: '[PRE27]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In a command-line terminal, inside this folder, execute the following script:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行终端中，在此文件夹内执行以下脚本：
- en: '[PRE28]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: How it works…
  id: totrans-335
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: The mechanism of the Terrafile pattern is that instead of using the Git sources
    directly in module calls, we reference them in a file in Terrafile YAML format.
    In the Terraform configuration, in the module call, we instead use a local path
    relative to the `modules` folder. Finally, before executing the Terraform workflow,
    we execute a script that runs through this `Terrafile` file and will locally clone
    each of these modules referenced in its specific folder (which is in the module
    call).
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: Terrafile模式的机制是，在模块调用中不直接使用Git源，而是在一个Terrafile YAML格式的文件中引用它们。在Terraform配置中，在模块调用时，我们改为使用相对于`modules`文件夹的本地路径。最后，在执行Terraform工作流之前，我们执行一个脚本，遍历此`Terrafile`文件，并在其指定的文件夹中本地克隆每个引用的模块（该文件夹在模块调用中）。
- en: 'In *step 1*, we created the `Terrafile` file, which is in YAML format and contains
    the repository of the modules we are going to use in the Terraform configuration.
    For each of the modules, we indicate the following:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 1*中，我们创建了`Terrafile`文件，该文件采用YAML格式，并包含我们将在Terraform配置中使用的模块的仓库。对于每个模块，我们指定以下内容：
- en: The name of the folder where the module will be copied
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块将被复制到的文件夹名称
- en: The URL of the Git repository of the module
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块的Git仓库的URL
- en: Its version, which is the Git tag or its branch
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它的版本，即Git标签或分支
- en: In *step 2*, we wrote the Ruby Rake script called Rakefile, which, when executed,
    will browse the Terrafile and will execute the `git clone` command on all modules
    into the specified folder.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 2*中，我们编写了名为Rakefile的Ruby Rake脚本，该脚本执行时会浏览Terrafile并对所有模块执行`git clone`命令，将它们克隆到指定文件夹中。
- en: Then, in *step 3*, we modify the Terraform configuration to call the modules,
    no longer with the Git URL but earlier with the relative path of their specified
    folder in the Terrafile.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在*步骤 3*中，我们修改了Terraform配置，调用这些模块，使用的不是Git URL，而是之前在Terrafile中指定文件夹的相对路径。
- en: Finally, in *step 4*, we execute the Rakefile script by calling the `get_modules`
    function of this script, which will make a Git clone of all of these modules in
    their folders.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在*步骤 4*中，我们通过调用此脚本的`get_modules`函数来执行Rakefile脚本，该函数会在各自的文件夹中进行Git克隆所有这些模块。
- en: Once these steps are done, we can execute the classic Terraform workflow commands
    with `init`, `plan`, and `apply`.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，我们可以使用`init`、`plan`和`apply`等经典的Terraform工作流命令。
- en: There's more…
  id: totrans-345
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: As we have learned in this recipe, we have created a `Terrafile` file that serves
    as a repository for the modules we will use in our Terraform configuration. It
    allows for better management and maintenance of the modules and versions to be
    used.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本食谱中学到的，我们创建了一个`Terrafile`文件，它作为我们在Terraform配置中将使用的模块的仓库。它允许更好地管理和维护将要使用的模块和版本。
- en: 'In this Terrafile, for each module, we have specified its destination folder,
    and as you can see, we have added the version number in the folder name. Hence,
    the name of the folder is unique and will allow us to use several versions of
    the same module in the Terraform configuration. The following code shows an extract
    of a Terrafile with two different versions of the same module:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个Terrafile中，对于每个模块，我们指定了它的目标文件夹，正如您所看到的，我们在文件夹名称中添加了版本号。因此，文件夹名称是唯一的，这将允许我们在Terraform配置中使用同一模块的多个版本。以下代码展示了一个包含同一模块的两个不同版本的Terrafile摘录：
- en: '[PRE29]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Also, it allows you to specify, if necessary, the authorized Git credentials to
    clone the module code. Be careful, however, not to write passwords in this file,
    which will be archived in a Git repository.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它还允许您在必要时指定授权的Git凭据来克隆模块代码。但请注意，不要在此文件中写入密码，因为该文件会被存档到Git仓库中。
- en: In this recipe, the Rakefile script was provided and is available in the original
    article of the Terrafile pattern ([https://bensnape.com/2016/01/14/terraform-design-patterns-the-terrafile/](https://bensnape.com/2016/01/14/terraform-design-patterns-the-terrafile/)).
    You are free to adapt it according to your needs.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，提供了Rakefile脚本，并且它可以在Terrafile模式的原始文章中找到（[https://bensnape.com/2016/01/14/terraform-design-patterns-the-terrafile/](https://bensnape.com/2016/01/14/terraform-design-patterns-the-terrafile/)）。你可以根据需要自由调整它。
- en: Finally, the essentials of the Terrafile pattern is not the script, the language,
    or the format used but, rather, its working principle. There are alternative scripts
    and tools to this Rakefile with, for example, a Python script available at [https://github.com/claranet/python-terrafile](https://github.com/claranet/python-terrafile), or
    a tool written in Go available at [https://github.com/coretech/terrafile](https://github.com/coretech/terrafile).
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Terrafile模式的核心不在于脚本、语言或所使用的格式，而在于其工作原理。比如说，这个Rakefile有替代的脚本和工具，比如可以在[https://github.com/claranet/python-terrafile](https://github.com/claranet/python-terrafile)找到的Python脚本，或者可以在[https://github.com/coretech/terrafile](https://github.com/coretech/terrafile)找到的Go编写的工具。
- en: See also
  id: totrans-352
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: The main reference article on the Terrafile pattern is available here: [https://bensnape.com/2016/01/14/terraform-design-patterns-the-terrafile/](https://bensnape.com/2016/01/14/terraform-design-patterns-the-terrafile/).
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Terrafile模式的主要参考文章可以在这里找到：[https://bensnape.com/2016/01/14/terraform-design-patterns-the-terrafile/](https://bensnape.com/2016/01/14/terraform-design-patterns-the-terrafile/)。
- en: The Python Terrafile package is available here: [https://pypi.org/project/terrafile/](https://pypi.org/project/terrafile/)
    [and its use is described here](https://pypi.org/project/terrafile/) [https://github.com/claranet/python-terrafile](https://github.com/claranet/python-terrafile).
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python Terrafile包可以在这里找到：[https://pypi.org/project/terrafile/](https://pypi.org/project/terrafile/)
    [并且其使用方法可以在这里查看](https://pypi.org/project/terrafile/) [https://github.com/claranet/python-terrafile](https://github.com/claranet/python-terrafile)。
- en: The Terrafile tool written in Go is available here: [https://github.com/coretech/terrafile](https://github.com/coretech/terrafile).
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用Go编写的Terrafile工具可以在这里获取：[https://github.com/coretech/terrafile](https://github.com/coretech/terrafile)。
- en: Testing Terraform module code with Terratest
  id: totrans-356
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Terratest测试Terraform模块代码
- en: When developing a Terraform module that will be used in multiple Terraform configurations
    and shared with other teams, there is one step that is often neglected and that
    is the testing of the module.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发将用于多个Terraform配置并与其他团队共享的Terraform模块时，有一个步骤常常被忽略，那就是模块的测试。
- en: Among the Terraform framework and testing tools is the **Terratest** framework,
    created by the *Gruntwork* community ([https://gruntwork.io/static/](https://gruntwork.io/static/)),
    which is popular and allows testing on code written in the Go language.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 在Terraform框架和测试工具中，有一个**Terratest**框架，由*Gruntwork*社区（[https://gruntwork.io/static/](https://gruntwork.io/static/)）创建，它非常流行，并允许对用Go语言编写的代码进行测试。
- en: In this recipe, we will study how to use Terratest to write and run integration
    tests on Terraform configuration and modules in particular.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何使用Terratest编写并运行针对Terraform配置和模块的集成测试。
- en: Getting ready
  id: totrans-360
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The **Terratest** test framework is written in Golang (Go language) and the
    tests run on the Go runtime. That's why, as a prerequisite, we need to install
    Go by going to [https://golang.org/](https://golang.org/).
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '**Terratest**测试框架是用Golang（Go语言）编写的，测试在Go运行时上运行。因此，作为前提条件，我们需要通过访问[https://golang.org/](https://golang.org/)来安装Go。'
- en: The minimum Go version required for Terratest is specified here: [https://terratest.gruntwork.io/docs/getting-started/quick-start/#requirements](https://terratest.gruntwork.io/docs/getting-started/quick-start/#requirements).
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: Terratest所需的最小Go版本可以在这里查看：[https://terratest.gruntwork.io/docs/getting-started/quick-start/#requirements](https://terratest.gruntwork.io/docs/getting-started/quick-start/#requirements)。
- en: 'Here are some important steps to install Go: for the Windows OS, you can install
    the Golang package using Chocolatey ([https://chocolatey.org/packages/golang](https://chocolatey.org/packages/golang))
    by executing this command:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是安装Go的一些重要步骤：对于Windows操作系统，你可以使用Chocolatey安装Golang包（[https://chocolatey.org/packages/golang](https://chocolatey.org/packages/golang)），通过执行以下命令：
- en: '[PRE30]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'For the Linux OS, run the following script:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Linux操作系统，运行以下脚本：
- en: '[PRE31]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The preceding script creates the workspace directories of Go (`bin` and `src`),
    then downloads the Go SDK, and sets the environment variables, `GOPATH` and `PATH`.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 上述脚本会创建Go的工作区目录（`bin`和`src`），然后下载Go SDK，并设置环境变量，`GOPATH`和`PATH`。
- en: If you are on Linux, you will also need the `gcc` package that you can install
    by running the `apt install gcc` command.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是Linux，你还需要安装`gcc`包，可以通过运行`apt install gcc`命令来安装。
- en: The goal of this recipe is to write the integration tests for a very simple
    module that we will also write in this recipe to serve as a demonstration.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱的目标是为一个非常简单的模块编写集成测试，我们将在这个食谱中编写该模块作为演示。
- en: The source code of this chapter with the module and its test is available here: [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/testing-terratest](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/testing-terratest).
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码，包括模块及其测试，可以在这里找到：[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/testing-terratest](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/testing-terratest)。
- en: How to do it…
  id: totrans-371
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: This recipe is in two parts. The first part concerns the writing of the module
    and its tests and the second part concerns the execution of the tests.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱分为两部分。第一部分是关于编写模块及其测试，第二部分是关于执行测试。
- en: 'To write the module and its tests, we perform the following steps:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编写模块及其测试，我们执行以下步骤：
- en: We create a new `module` folder that will contain the Terraform configuration
    of the module.
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建了一个新的`module`文件夹，该文件夹将包含模块的Terraform配置。
- en: 'In this `module` folder, we create a `main.tf` file, which contains the following
    code:'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个`module`文件夹中，我们创建了一个`main.tf`文件，其中包含以下代码：
- en: '[PRE32]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In this `module` folder, we create the `fixture` folder inside a `test` folder.
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个`module`文件夹中，我们在`test`文件夹内创建了`fixture`文件夹。
- en: 'Then, in this `fixture` folder, we create a `main.tf` file, which contains
    the following Terraform configuration:'
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在这个`fixture`文件夹中，我们创建了一个`main.tf`文件，其中包含以下Terraform配置：
- en: '[PRE34]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In the test folder, we create a `test_module.go` file, which contains the following
    code:'
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在测试文件夹中，我们创建了一个`test_module.go`文件，其中包含以下代码：
- en: '[PRE35]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'To execute the tests, we perform the following steps:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行测试，我们执行以下步骤：
- en: 'The first step is to download the `terratest` Go package by executing the following
    command:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是通过执行以下命令来下载`terratest` Go包：
- en: '[PRE36]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Then, in the directory that contains the `test_module.go` file, we execute
    this command:'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在包含`test_module.go`文件的目录中，我们执行以下命令：
- en: '[PRE37]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: How it works…
  id: totrans-388
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In the first part of this recipe, we worked on the development of the module
    and its tests with the Terratest framework. In *step 2*, we wrote the module's
    code, which is extremely simple and focuses on the module's output. In *step 3*,
    in the `fixture` folder, we wrote a Terraform configuration that uses the module
    locally and that we will use to test it. What is important in this configuration
    is to have an output in the module. Indeed, in Terratest, we will use the outputs
    to test that the module correctly returns the correct expected value.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱的第一部分，我们使用Terratest框架开发了模块及其测试。在*步骤2*中，我们编写了模块的代码，这非常简单，主要关注模块的输出。在*步骤3*中，在`fixture`文件夹中，我们编写了一个Terraform配置，它本地使用该模块，并将用于测试模块。这个配置中的关键是确保模块有输出。事实上，在Terratest中，我们将使用这些输出测试模块是否正确返回了预期的值。
- en: 'In *step 4*, we write the module tests in a file written in Golang. The code
    is composed as follows: in the first lines of this code, we import the libraries
    needed to run the tests, including the `terratest` and `assert` libraries. Then,
    we create a `TestTerraformModule` function, which takes `testing.T` as a parameter,
    which is a Go pointer that indicates that it is a test code.'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤4*中，我们在一个用Golang编写的文件中编写了模块测试。代码如下：在代码的前几行，我们导入了运行测试所需的库，包括`terratest`和`assert`库。然后，我们创建了一个`TestTerraformModule`函数，该函数接受`testing.T`作为参数，`testing.T`是一个Go指针，表示这是一个测试代码。
- en: Following are the details of the code of this function, which is composed of
    five lines of code.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该函数代码的详细内容，包含五行代码。
- en: 'In the first line, we define the test options with the folder containing the
    Terraform configuration that will be executed during the tests:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，我们定义了测试选项，指定包含将在测试过程中执行的Terraform配置的文件夹：
- en: '[PRE38]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Then, we define the `terrafom.Destroy` function, which allows us to execute
    the `terraform destroy` command at the end of the tests, as described in the following
    code:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们定义了`terrafom.Destroy`函数，该函数允许我们在测试结束时执行`terraform destroy`命令，如下代码所示：
- en: '[PRE39]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Then, we call the `terraform.InitAndApply` function, which allows us to execute
    the `terraform init` and `apply` commands, as described in the following code:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们调用了`terraform.InitAndApply`函数，该函数允许我们执行`terraform init`和`apply`命令，如下代码所示：
- en: '[PRE40]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'After executing the `apply` command, we will retrieve the value of the output,
    which is called `outmodule`:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`apply`命令后，我们将获取输出的值，称为`outmodule`：
- en: '[PRE41]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Finally, we use `assert`, testing the previously recovered value of the output
    with the value we expect:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用`assert`，将之前获取的输出值与我们预期的值进行测试：
- en: '[PRE42]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Then, in the second part of this recipe, we work on the execution of the tests.
    The first step is to download the Terratest Go package with the `go get <package
    source>` command.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在本食谱的第二部分，我们开始测试的执行。第一步是使用`go get <package source>`命令下载 Terratest Go 包。
- en: We can also run the `go get -v -t -d ./...` command to get all required package
    dependencies.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以运行`go get -v -t -d ./...`命令来获取所有所需的包依赖。
- en: 'Then, inside the `test` folder, we run the tests by executing this command:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`test`文件夹内，我们通过执行以下命令运行测试：
- en: '[PRE43]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'During this execution, Terratest will carry out the following actions in order:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行过程中，Terratest 将按顺序执行以下操作：
- en: Execute the `terraform init` and `terraform apply` commands on the Terraform
    test code located in the fixture folder.
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在位于 fixture 文件夹中的 Terraform 测试代码上执行`terraform init`和`terraform apply`命令。
- en: Get the value of the `outmodule` output.
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取`outmodule`输出的值。
- en: Compare this value with the expected value.
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此值与预期值进行比较。
- en: Execute the `terraform destroy` command.
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`terraform destroy`命令。
- en: Display the test results.
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示测试结果。
- en: 'The next screenshot shows the execution of the tests on our module:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 下一张截图展示了我们模块的测试执行情况：
- en: '![](img/580cf530-5ff2-420e-8361-1c013229ffb5.png)'
  id: totrans-413
  prefs: []
  type: TYPE_IMG
  zh: '![](img/580cf530-5ff2-420e-8361-1c013229ffb5.png)'
- en: You can see, in this screenshot, the different operations that have been executed
    by the `go test -v` command as well as the result of the tests.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这个截图中看到`go test -v`命令执行的不同操作以及测试结果。
- en: There's more…
  id: totrans-415
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: Terratest allows you to execute integration tests on Terraform configuration
    with a powerful routine that allows you to provision resources, execute the tests,
    and finally destroy the resources.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: Terratest 允许你对 Terraform 配置执行集成测试，拥有一个强大的流程，可以使你配置资源、执行测试，并最终销毁资源。
- en: We have seen in the prerequisites of this recipe that the setup of the Golang
    development environment requires actions that can vary from one operating system
    to another. To facilitate this task, you can execute your Terratest tests in a
    Docker container that already has an environment configured. The Dockerfile corresponding
    to this container is available here: [https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP05/testing-terratest/Dockerfile](https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP05/testing-terratest/Dockerfile).
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本食谱的前提条件中看到，Golang 开发环境的设置需要执行的操作可能因操作系统不同而有所不同。为了简化这个任务，你可以在一个已经配置好环境的 Docker
    容器中执行 Terratest 测试。该容器对应的 Dockerfile 可以在这里找到：[https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP05/testing-terratest/Dockerfile](https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP05/testing-terratest/Dockerfile)。
- en: If Terraform modules provide resources in cloud providers, the authentication
    parameters must be set before running tests.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Terraform 模块提供了云服务提供商的资源，在运行测试之前必须设置身份验证参数。
- en: Finally, as said in the introduction of this recipe, Terratest is not limited
    to Terraform—it also allows testing on Packer, Docker, and Kubernetes code. But
    it goes further by also doing tests on cloud providers such as AWS, Azure, and
    GCP.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，正如本食谱开头所说，Terratest 不仅限于 Terraform，它还支持 Packer、Docker 和 Kubernetes 代码的测试。更进一步，它还可以对云服务提供商如
    AWS、Azure 和 GCP 进行测试。
- en: 'The following code snippet shows how to test the existence of the VM in Azure
    based on Terraform''s output:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了如何根据 Terraform 的输出测试 Azure 中虚拟机的存在：
- en: '[PRE44]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: In the next recipes, we will study its integration in a CI/CD pipeline in Azure
    Pipelines and then in GitHub with GitHub Actions.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的食谱中，我们将研究它在 Azure Pipelines 中的 CI/CD 流程集成，然后是 GitHub Actions 中的集成。
- en: See also
  id: totrans-423
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另见
- en: Terratest's official website is available here: [https://terratest.gruntwork.io/](https://terratest.gruntwork.io/).
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Terratest 的官方网站可以在这里找到：[https://terratest.gruntwork.io/](https://terratest.gruntwork.io/)。
- en: Terratest's documentation is available here: [https://terratest.gruntwork.io/docs/](https://terratest.gruntwork.io/docs/).
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Terratest 的文档可以在这里查看：[https://terratest.gruntwork.io/docs/](https://terratest.gruntwork.io/docs/)。
- en: Sample Terratest code is available here: [https://github.com/gruntwork-io/terratest/tree/master/examples](https://github.com/gruntwork-io/terratest/tree/master/examples).
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例 Terratest 代码可以在这里找到：[https://github.com/gruntwork-io/terratest/tree/master/examples](https://github.com/gruntwork-io/terratest/tree/master/examples)。
- en: Read this great article about Terratest: [https://blog.octo.com/en/test-your-infrastructure-code-with-terratest/](https://blog.octo.com/en/test-your-infrastructure-code-with-terratest/).
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读这篇关于 Terratest 的精彩文章：[https://blog.octo.com/en/test-your-infrastructure-code-with-terratest/](https://blog.octo.com/en/test-your-infrastructure-code-with-terratest/)。
- en: Building CI/CD for Terraform modules in Azure Pipelines
  id: totrans-428
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Azure Pipelines 中为 Terraform 模块构建 CI/CD
- en: Throughout this chapter, we have studied recipes for creating, using, and testing
    Terraform modules. On the other hand, in the *Using a private Git repository for
    sharing a Terraform module* recipe in this chapter, we discussed the possibility
    of using a private Git repository, such as Azure DevOps, to store and version
    your Terraform modules.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了创建、使用和测试 Terraform 模块的配方。另一方面，在本章中*使用私人 Git 仓库共享 Terraform 模块*这一配方中，我们讨论了使用私人
    Git 仓库（例如 Azure DevOps）存储和管理 Terraform 模块版本的可能性。
- en: In a DevOps context, when the module is created and the tests have been written,
    we need to create a DevOps CI/CD pipeline that will automate all of the steps
    we discussed for the execution of the tests that we performed manually.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DevOps 环境中，当模块创建完成并且测试编写完成后，我们需要创建一个 DevOps CI/CD 管道，该管道将自动执行我们之前手动执行的测试步骤。
- en: There are many CI/CD pipeline platforms; in this recipe, we will see the implementation
    of a CI/CD pipeline to automate the tests and the publication of a Terraform module
    in Azure Pipelines.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多 CI/CD 管道平台；在本配方中，我们将看到如何在 Azure Pipelines 中实现一个 CI/CD 管道，以自动化测试并发布 Terraform
    模块。
- en: Getting ready
  id: totrans-432
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To start this recipe, we must first create a Terraform module and tests with
    Terratest. For this, we will use the same module and its tests that we created
    in the previous recipe, the source code for which is available from [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/testing-terratest/module](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/testing-terratest/module).
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始这个配方，我们必须首先创建一个 Terraform 模块并使用 Terratest 进行测试。为此，我们将使用在前一个配方中创建的相同模块及其测试，源代码可从[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/testing-terratest/module](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/testing-terratest/module)获取。
- en: Also, as far as the Azure Pipeline is concerned, you will assume that we have
    already archived the module code in Azure Repos as we saw in the *Using a private
    Git repository for sharing a Terraform module* recipe of this chapter.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，就 Azure Pipeline 而言，您需要假设我们已经将模块代码归档到 Azure Repos 中，正如本章中*使用私人 Git 仓库共享 Terraform
    模块*这一配方所示。
- en: To avoid having to install the tools needed to run tests in an Azure Pipelines
    agent, we will use a Docker image. You should, therefore, have a basic knowledge
    of Docker and the Docker Hub by referring to the documentation here: [https://docs.docker.com/](https://docs.docker.com/).
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免在 Azure Pipelines 代理中安装运行测试所需的工具，我们将使用 Docker 镜像。因此，您应该具备 Docker 和 Docker
    Hub 的基本知识，可以通过参考此文档了解：[https://docs.docker.com/](https://docs.docker.com/)。
- en: Finally, in Azure Pipelines, we will use the YAML pipelines, which allows us
    to have pipelines as code, the documentation for which is here: [https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema](https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema).
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 Azure Pipelines 中，我们将使用 YAML 管道，这使我们能够将管道作为代码，相关文档请参见：[https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema](https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema)。
- en: How to do it…
  id: totrans-437
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到……
- en: 'Perform the following steps to create a pipeline for the module in Azure Pipelines:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤，以在 Azure Pipelines 中为该模块创建一个管道：
- en: 'In the `module` directory, we will create a Dockerfile with the following content:'
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`module`目录中，我们将创建一个包含以下内容的 Dockerfile：
- en: '[PRE45]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'In this same directory, we create a `runtests.sh` file with the following content:'
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一目录中，我们创建一个包含以下内容的`runtests.sh`文件：
- en: '[PRE46]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Then, we create an `azure-pipeline.yaml` file with the following extract YAML
    code:'
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们创建一个包含以下 YAML 代码片段的`azure-pipeline.yaml`文件：
- en: '[PRE47]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The complete code source of this file is available here: [https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP05/testing-terratest/azure-pipeline.yaml](https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP05/testing-terratest/azure-pipeline.yaml).
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件的完整源代码可在此处查看：[https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP05/testing-terratest/azure-pipeline.yaml](https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP05/testing-terratest/azure-pipeline.yaml)。
- en: We `commit` and `push` these three files to the Azure Repos of the Terraform
    module.
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将这三文件`commit`并`push`到Terraform模块的Azure Repos。
- en: 'In Azure Pipelines, in the Pipelines section, we click on the Create Pipeline button:'
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Azure Pipelines中，在流水线部分，我们点击创建流水线按钮：
- en: '![](img/0e60774e-1885-4fa2-930d-a62f4e4f0261.png)'
  id: totrans-448
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0e60774e-1885-4fa2-930d-a62f4e4f0261.png)'
- en: 'Then, we choose the repository in Azure Repos that contains the code of the
    module:'
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们选择Azure Repos中包含模块代码的仓库：
- en: '![](img/c73e23c2-eab4-4e07-aa68-b54bf04aa41e.png)'
  id: totrans-450
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c73e23c2-eab4-4e07-aa68-b54bf04aa41e.png)'
- en: 'Then, select the Existing Azure Pipelines YAML file option in the pipeline
    configuration window:'
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在流水线配置窗口中选择现有的Azure Pipelines YAML文件选项：
- en: '![](img/4315e680-1548-4068-a2c9-9903d46c08b8.png)'
  id: totrans-452
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4315e680-1548-4068-a2c9-9903d46c08b8.png)'
- en: 'In the layout that opens on the right, we choose the `azure-pipeline.yaml` file that
    we wrote in *step 3*, then we validate it by clicking on the Continue button:'
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧打开的布局中，我们选择了在*步骤3*中编写的`azure-pipeline.yaml`文件，然后通过点击继续按钮进行验证：
- en: '![](img/ecce28a1-00e5-4681-bd0c-72b658de6e82.png)'
  id: totrans-454
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ecce28a1-00e5-4681-bd0c-72b658de6e82.png)'
- en: 'Finally, the next page displays the contents of the YAML file of the pipeline
    we have selected. To trigger the pipeline, we click on the Run button:'
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，下一页面显示了我们选择的流水线YAML文件的内容。要触发流水线，我们点击运行按钮：
- en: '![](img/d742f325-ca0f-4805-9d76-3ab44854de6b.png)'
  id: totrans-456
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d742f325-ca0f-4805-9d76-3ab44854de6b.png)'
- en: How it works…
  id: totrans-457
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: In *step 1*, we wrote the Dockerfile that will run the Terratest tests—this
    Docker image is based on an image called `go-terraform` that I created and already
    contains Terraform and the Go SDK.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*中，我们编写了将运行Terratest测试的Dockerfile—这个Docker镜像是基于我创建的名为`go-terraform`的镜像，该镜像已经包含了Terraform和Go
    SDK。
- en: This `go-terraform` image is publicly available in Docker Hub ([https://hub.docker.com/repository/docker/mikaelkrief/go-terraform](https://hub.docker.com/repository/docker/mikaelkrief/go-terraform))
    and the source code is available at [https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP05/testing-terratest/Dockerfile-go-terraform](https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP05/testing-terratest/Dockerfile-go-terraform).
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`go-terraform`镜像在Docker Hub上公开可用（[https://hub.docker.com/repository/docker/mikaelkrief/go-terraform](https://hub.docker.com/repository/docker/mikaelkrief/go-terraform)），源代码可在[https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP05/testing-terratest/Dockerfile-go-terraform](https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP05/testing-terratest/Dockerfile-go-terraform)找到。
- en: 'The following code is the `FROM` instruction of the Dockerfile:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是Dockerfile中的`FROM`指令：
- en: '[PRE48]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Then, in this Dockerfile, we create the `src` folder and copy the module sources
    into this `src` directory, as shown in the following code:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在此Dockerfile中，我们创建了`src`文件夹，并将模块源代码复制到该`src`目录，如下代码所示：
- en: '[PRE49]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Finally, we give the execution rights to the `runtest.sh` script, and we define
    `entrypoint` on this script, as shown in the following code:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们为`runtest.sh`脚本赋予执行权限，并在该脚本上定义`entrypoint`，如下代码所示：
- en: '[PRE50]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: In *step 2*, we write the code of the shell script, `runtest.sh`, which will
    be in charge of executing the Terratest tests using the `dep ensure` and `go test
    -v` commands as we learned in the *Testing a Terraform module with Terratest*
    recipe in this chapter.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤2*中，我们编写了shell脚本`runtest.sh`的代码，该脚本负责使用`dep ensure`和`go test -v`命令执行Terratest测试，正如我们在本章的*使用Terratest测试Terraform模块*食谱中所学的那样。
- en: 'In *step 3*, we write the YAML code of the Azure DevOps pipeline, which consists
    of three steps:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤3*中，我们编写了Azure DevOps流水线的YAML代码，其中包括三个步骤：
- en: Build the Docker image using the `docker build` command.
  id: totrans-468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`docker build`命令构建Docker镜像。
- en: Instantiate a new container with this image using the `docker run` command,
    which will run the tests.
  id: totrans-469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`docker run`命令实例化一个新容器，并运行测试。
- en: Version-control the module code by adding a tag to the module code.
  id: totrans-470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过为模块代码添加标签来对模块代码进行版本控制。
- en: Then, we `commit` and push these files to the Azure Repos repository of the
    module.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将这些文件`commit`并推送到模块的Azure Repos仓库。
- en: Finally, in *steps 5* to *8*, we create a new pipeline in Azure Pipelines by
    choosing the module repository and the YAML file that contains the pipeline definition.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在*步骤5*到*步骤8*中，我们通过选择模块仓库和包含流水线定义的YAML文件，在Azure Pipelines中创建一个新流水线。
- en: 'In *step 9*, we execute the pipeline and wait for the end of its execution.
    As soon as the pipeline ends, you can see that all of the steps have been executed
    successfully, as shown in the following screenshot:'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤9*中，我们执行流水线并等待其执行完成。一旦流水线结束，你可以看到所有步骤都已成功执行，如下截图所示：
- en: '![](img/b6adf142-c0a0-469c-80c7-319344ea67b1.png)'
  id: totrans-474
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b6adf142-c0a0-469c-80c7-319344ea67b1.png)'
- en: 'And the new tag version is applied to the code:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 新的标签版本已经应用到代码中：
- en: '![](img/fc65aecd-2165-4599-ab34-6d2214e2fc51.png)'
  id: totrans-476
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fc65aecd-2165-4599-ab34-6d2214e2fc51.png)'
- en: This added tag will be used to version the Terraform module so that it can be
    used when calling the module.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新增的标签将用于版本管理 Terraform 模块，以便在调用该模块时使用。
- en: Hence, with this implementation, when calling the module, we will use a version
    of the module that has been automatically tested by the pipeline.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过此实现，在调用模块时，我们将使用已由管道自动测试的模块版本。
- en: There's more…
  id: totrans-479
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: In this recipe, we have studied the basic steps of the YAML pipeline installation
    in Azure Pipelines. It is possible to go further by additionally using the reporting
    of the tests in the pipeline. To learn more, read this blog post: [https://blog.jcorioland.io/archives/2019/09/25/terraform-microsoft-azure-ci-docker-azure-pipeline.html](https://blog.jcorioland.io/archives/2019/09/25/terraform-microsoft-azure-ci-docker-azure-pipeline.html).
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇食谱中，我们研究了 Azure Pipelines 中 YAML 管道安装的基本步骤。你可以通过在管道中额外使用测试报告来进一步学习。欲了解更多信息，请阅读这篇博客文章：[https://blog.jcorioland.io/archives/2019/09/25/terraform-microsoft-azure-ci-docker-azure-pipeline.html](https://blog.jcorioland.io/archives/2019/09/25/terraform-microsoft-azure-ci-docker-azure-pipeline.html)。
- en: In the next recipe, we will see the same pipeline process but for a Terraform
    module that is stored in GitHub and that we want to publish in the Terraform public
    registry.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个食谱中，我们将看到相同的管道过程，但用于一个存储在 GitHub 中并且我们希望发布到 Terraform 公共注册表中的 Terraform
    模块。
- en: See also
  id: totrans-482
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参见
- en: Documentation for Azure Pipelines is available here: [https://docs.microsoft.com/en-us/azure/devops/pipelines/?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/pipelines/?view=azure-devops)[.](https://docs.microsoft.com/en-us/azure/devops/pipelines/?view=azure-devops)
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Pipelines 的文档可在此找到：[https://docs.microsoft.com/en-us/azure/devops/pipelines/?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/pipelines/?view=azure-devops)[.](https://docs.microsoft.com/en-us/azure/devops/pipelines/?view=azure-devops)
- en: Building a workflow for Terraform modules using GitHub Actions
  id: totrans-484
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GitHub Actions 为 Terraform 模块构建工作流
- en: In the *Sharing a Terraform module using GitHub* recipe of this chapter, we
    studied how to publish a Terraform module in the Terraform public registry by
    putting its code on GitHub. Then, we learned in the *Testing a Terraform module
    with Terratest* recipe how to write and run module tests using Terratest.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的*使用 GitHub 共享 Terraform 模块*食谱中，我们研究了如何通过将模块代码放到 GitHub 上，将 Terraform 模块发布到
    Terraform 公共注册表。然后，我们在*使用 Terratest 测试 Terraform 模块*食谱中学习了如何使用 Terratest 编写和运行模块测试。
- en: We will go further in this recipe by studying the implementation of an automated
    module publishing workflow using GitHub Actions.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将进一步研究如何使用 GitHub Actions 实现自动化模块发布工作流。
- en: Getting ready
  id: totrans-487
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To start this recipe, you must have assimilated the two recipes, *Sharing a
    Terraform module using GitHub* and *Testing a Terraform module with Terratest*,
    which include all of the bases and artifacts necessary for this recipe.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始本食谱，您必须掌握前两个食谱：*使用 GitHub 共享 Terraform 模块* 和 *使用 Terratest 测试 Terraform 模块*，这两个食谱包含了本食谱所需的所有基础和工件。
- en: In this recipe, we will use the module code we wrote in the *Testing Terraform
    module code with Terratest* recipe, the source code for which is available here: [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/testing-terratest/module](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/testing-terratest/module).
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将使用我们在*使用 Terratest 测试 Terraform 模块代码*一文中编写的模块代码，其源代码可以在此找到：[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/testing-terratest/module](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/testing-terratest/module)。
- en: Also, we will be using GitHub Actions, which is a free service for public GitHub
    repositories, the documentation for which is available here: [https://github.com/features/actions](https://github.com/features/actions).
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将使用 GitHub Actions，它是一个适用于公共 GitHub 仓库的免费服务，其文档可在此找到：[https://github.com/features/actions](https://github.com/features/actions)。
- en: The source code for this recipe is available here: [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/githubaction](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/githubaction).
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的源代码可以在此找到：[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/githubaction](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/githubaction)。
- en: How to do it…
  id: totrans-492
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Perform the following steps to use GitHub Actions on our Terraform module:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以在我们的 Terraform 模块中使用 GitHub Actions：
- en: 'In the root of the GitHub repository that contains the module code, we create,
    via the GitHub web interface, a new file called `integration-test.yaml` in the
    `.github` | `workflows` folder:'
  id: totrans-494
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在包含模块代码的 GitHub 仓库根目录中，我们通过 GitHub 网页界面，在 `.github` | `workflows` 文件夹中创建一个名为
    `integration-test.yaml` 的新文件：
- en: '![](img/a69394c7-e2bd-4c99-b1f3-2da0f24ad09c.png)'
  id: totrans-495
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a69394c7-e2bd-4c99-b1f3-2da0f24ad09c.png)'
- en: 'In this file, we write the following extract YAML code (the complete code is
    here: [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/githubaction](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/githubaction)):'
  id: totrans-496
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此文件中，我们编写以下 YAML 代码（完整代码可以在这里找到：[https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/githubaction](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP05/githubaction)）：
- en: '[PRE51]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Then, we validate the page by clicking on the Commit new file button at the
    bottom of the page:'
  id: totrans-498
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们通过点击页面底部的提交新文件按钮来验证页面：
- en: '![](img/f97fe323-4ae4-4293-9d5b-7f3c199b170f.png)'
  id: totrans-499
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f97fe323-4ae4-4293-9d5b-7f3c199b170f.png)'
- en: 'Finally, we click on the Actions tab of our repository and we can see the workflow
    that has been triggered:'
  id: totrans-500
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们点击仓库的 Actions 选项卡，就可以看到已触发的工作流：
- en: '![](img/9db2b775-91d7-40d9-a241-c040af9ac966.png)'
  id: totrans-501
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9db2b775-91d7-40d9-a241-c040af9ac966.png)'
- en: How it works…
  id: totrans-502
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: To create the workflow in GitHub Actions, we have created a new YAML file in
    the repository that contains the module code, in the specific `.github` | `workflows`
    folder that contains the steps that the GitHub Action agent will perform.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在 GitHub Actions 中创建工作流，我们在包含模块代码的仓库中创建了一个新的 YAML 文件，位于特定的 `.github` | `workflows`
    文件夹中，包含了 GitHub Action 代理将执行的步骤。
- en: 'The steps of our workflow are as follows:'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 我们工作流的步骤如下：
- en: 'The first step is to do a checkout to retrieve the repository code:'
  id: totrans-505
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是进行检出操作以获取仓库代码：
- en: '[PRE52]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Then, we install the SDK for Go with the following code:'
  id: totrans-507
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们使用以下代码安装 Go SDK：
- en: '[PRE53]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: For more information about the minimum Go version, read the documentation here: [https://terratest.gruntwork.io/docs/getting-started/quick-start/#requirements](https://terratest.gruntwork.io/docs/getting-started/quick-start/#requirements).
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 关于最小 Go 版本的更多信息，请阅读此文档：[https://terratest.gruntwork.io/docs/getting-started/quick-start/#requirements](https://terratest.gruntwork.io/docs/getting-started/quick-start/#requirements)。
- en: 'Then, we download the dependencies with this code:'
  id: totrans-510
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们使用以下代码下载依赖项：
- en: '[PRE54]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'We run the Terratest tests with the following code:'
  id: totrans-512
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用以下代码运行 Terratest 测试：
- en: '[PRE55]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Finally, the last step is to add a tag to the code. To do this, we use the
    `Github-tag` action provided by the `mathieudutour/github-tag-action@v4` repository and
    we use the built-in `GITHUB_TOKEN` variable that allows the agent to authenticate
    itself to perform Git commands on the repository:'
  id: totrans-514
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，最后一步是为代码添加标签。为此，我们使用由 `mathieudutour/github-tag-action@v4` 仓库提供的 `Github-tag`
    操作，并使用内置的 `GITHUB_TOKEN` 变量，允许代理进行身份验证并执行 Git 仓库中的 Git 命令：
- en: '[PRE56]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'At the end of the execution of the workflow, you can see the results, as in
    the following screenshot:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 在工作流执行结束时，您可以看到如下截图所示的结果：
- en: '![](img/82012d6b-a8f5-4f26-8cb3-450772e3dc20.png)'
  id: totrans-517
  prefs: []
  type: TYPE_IMG
  zh: '![](img/82012d6b-a8f5-4f26-8cb3-450772e3dc20.png)'
- en: 'If the workflow runs correctly, a new tag will be added to the code, as shown
    in the following screenshot:'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 如果工作流运行正常，代码中将添加一个新标签，如下图所示：
- en: '![](img/818b1ad7-1ace-4d61-9b27-e9116f3339b7.png)'
  id: totrans-519
  prefs: []
  type: TYPE_IMG
  zh: '![](img/818b1ad7-1ace-4d61-9b27-e9116f3339b7.png)'
- en: And if this module is published in the public registry, a new version of this
    module will be available.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 如果该模块已发布到公共注册表中，则该模块的新版本将可用。
- en: There's more…
  id: totrans-521
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: The incrementing of the tag in the repository (major, minor, or patch) is done
    automatically and will depend on the content of the commit description that triggered
    the action. For more information, read the documentation at [https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines](https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines).
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库中标签的递增（主版本、次版本或修复版本）是自动完成的，具体取决于触发操作的提交描述的内容。更多信息，请阅读文档：[https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines](https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines)。
- en: See also
  id: totrans-523
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Documentation on the GitHub-Tag action is available here: [https://github.com/marketplace/actions/github-tag](https://github.com/marketplace/actions/github-tag).
  id: totrans-524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub-Tag 操作的文档可以在这里找到：[https://github.com/marketplace/actions/github-tag](https://github.com/marketplace/actions/github-tag)。
- en: Read this blog post about Terratest and GitHub Actions, provided by HashiCorp: [https://www.hashicorp.com/blog/continuous-integration-for-terraform-modules-with-github-actions/](https://www.hashicorp.com/blog/continuous-integration-for-terraform-modules-with-github-actions/)[.](https://github.com/marketplace/actions/github-tag)
  id: totrans-525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读这篇关于 Terratest 和 GitHub Actions 的博客文章，由 HashiCorp 提供：[https://www.hashicorp.com/blog/continuous-integration-for-terraform-modules-with-github-actions/](https://www.hashicorp.com/blog/continuous-integration-for-terraform-modules-with-github-actions/)[.](https://github.com/marketplace/actions/github-tag)
