- en: Introduction to Automated Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化测试简介
- en: I did finally get an agreement on writing a book on application test automation—one
    I had wanted to write for years already, as automated testing doesn't appear to
    be a *love at first sight* topic for many. And, like testing in general, in many
    implementations, it tends to be subordinate to requirements specifications and
    application coding, be it a project or a product. And, hell, who really loves
    testing? It is not typically what the average developer gets enthusiastic about.
    When raising the question during many of my workshops on automated testing, it
    often even takes a while for functional consultants to raise their hand.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我得到了一个关于写一本关于应用测试自动化的书的同意——这是我多年来一直想写的书，因为自动化测试似乎对很多人来说并不是*一见钟情*的话题。而且，像测试一样，在许多实现中，它往往是从属于需求规格和应用程序编码的，不论是项目还是产品。说实话，谁真正喜欢测试呢？这通常不是普通开发者热衷的事情。在我进行的许多自动化测试研讨会中，当我提出这个问题时，往往需要一些时间，功能顾问才会举手。
- en: 'Inevitably, I did pose the question to myself: do I love testing? And I answered
    it with a yes. A big YES. This subsequently led to additional questions, such
    as: what makes me love testing? Did I always love testing? Why do I love it while
    the rest of the world seems not to? Questions with answers that makes me go around
    the world evangelizing test automation, stubbornly sharing my findings, and pushing
    Microsoft to improve their tests to make them better and reusable. And all because
    I reckon that it is fun—big fun!'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 不可避免地，我问自己：我喜欢测试吗？我的答案是：是的，强烈的YES。这接着引发了一些额外的问题，比如：是什么让我喜欢测试？我一直都喜欢测试吗？为什么我喜欢它，而其他人似乎不喜欢呢？这些问题的答案让我环游世界，宣扬测试自动化，固执地分享我的发现，并推动微软改进测试，使其变得更好、更可复用。这一切，都是因为我认为这很有趣——非常有趣！
- en: Having been an app tester in the former Dynamics NAV **Global Development Localization**
    (**GDL**) team at Microsoft, I surely got exposed to the testing virus. You could
    say that I had to learn to do the testing job, as I was paid for it. But it also
    suited me well, with me apparently having this specific DNA kind of thing that
    makes testers what testers are. Having a pride in breaking *the thing* and, meanwhile,
    loving to prove, hopefully, its robustness. And, not in the least, daring to break
    it, running the risk that your developer will no longer like you.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 曾在微软前任Dynamics NAV **全球开发本地化** (**GDL**) 团队担任应用测试员的我，当然接触过测试的“病毒”。可以说，我必须学习如何进行测试，因为这是我的工作，而我也因此获得报酬。但这项工作对我来说也非常适合，显然我有一种特定的基因，使得我能成为一名测试员。喜欢打破*东西*，同时又喜欢证明它的健壮性——希望如此。最重要的是，敢于打破它，冒着开发者可能再也不喜欢你的风险。
- en: One afternoon at Microsoft, my developer team member walked into our office
    and stopped next to my desk. Him being very tall and me sitting, I had to turn
    my head up to look at him.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在微软的一个下午，我的开发团队成员走进了我们的办公室，停在我的桌旁。他个子非常高，而我坐着，我不得不抬起头才能看见他。
- en: '"What''s up?" I asked.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: “怎么了？”我问道。
- en: '"Don''t you like me anymore?" he responded.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: “你不喜欢我了吗？”他回答道。
- en: 'Me: ?'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我：？
- en: 'Him: "Don''t you like me anymore?"'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 他：“你不喜欢我了吗？”
- en: 'Me: "Nope, still like you. Why?"'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我：“不，还是喜欢你。怎么了？”
- en: 'Him: "You rejected my code; don''t you like me anymore?"'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 他：“你拒绝了我的代码，你不喜欢我了吗？”
- en: 'Me: "Dude, I still like you, but concerning your code, my tests show it somehow
    useless."'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我： “伙计，我还是喜欢你，但关于你的代码，我的测试显示它似乎没什么用。”
- en: Testing is not rocket science. Nor is automated testing. It's just another learnable
    skill. From a developer's perspective, however, it requires a change of mindset
    to write code with a totally different purpose than you are used to. And we all
    know that change is often not the easiest thing to achieve. Because of this, it's
    not unusual for attendees at my workshops to get to a certain level of frustration.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 测试不是火箭科学。自动化测试也不是。它只是另一项可以学习的技能。然而，从开发者的角度来看，它需要转变思维方式，用与你习惯的目的完全不同的方式来编写代码。我们都知道，改变往往不是最容易实现的事情。正因如此，在我的研讨会中，参会者达到一定程度的挫败感并不罕见。
- en: 'Application testing is a mindset and it needs a big dose of discipline too—the
    discipline to do what needs to be done: to verify that the feature was built right;
    to verify that the feature under test meets the requirements—and the discipline
    when bugs are reported and fixed to execute the whole test run again, and again,
    with any new bug, to ensure that the verification is complete.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 应用测试是一种思维方式，并且它也需要大量的纪律——做需要做的事情的纪律：验证功能是否构建正确；验证被测功能是否符合要求；以及在报告和修复 bug 后，执行整个测试过程，反复测试每个新
    bug，以确保验证完整。
- en: 'I tend to see myself as a disciplined professional. I have been quite a disciplined
    tester, with a high rate of bug reporting. But, did I always love testing? You
    know, in those days, all our tests were executed manually, and with each bug I
    found my discipline was challenged in some way. Imagine my mind running when executing
    the fifth test run after another bug fix. It''s 4:00 PM and I am almost done.
    At breakfast, I promised my wife that I would be home on time for whatever reason.
    Let''s pick a random one: our wedding anniversary. So, me being a disciplined
    tester, my promise to be home on time, 4:00 PM, and … I … hit … another … bug.
    Knowing that fixing it and re-running the tests will take at least a couple hours;
    how do you think my mind is running? Right: binary.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我倾向于把自己看作一个有纪律的专业人士。我一直是一个非常有纪律的测试员，报告 bug 的频率也很高。但，我总是喜欢做测试吗？你知道的，在那些日子里，我们的所有测试都是手动执行的，每当我找到一个
    bug，我的纪律就会在某种程度上受到挑战。想象一下，在修复完一个 bug 后执行第五次测试时，我的内心在怎么想。现在是下午 4 点，我快完成了。早上，我向妻子承诺会按时回家，不管出于什么原因。我们随便选一个原因：我们的结婚纪念日。所以，作为一个有纪律的测试员，我承诺按时回家，下午
    4 点，结果……我……又……碰到……一个……bug。知道修复它并重新运行测试至少要花几个小时，你觉得我当时的心情怎么样？没错：二进制。
- en: 'I had two options:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我有两个选择：
- en: Reporting the bug would keep me at work and make my wife highly disappointed,
    to say the least
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 报告 bug 会让我加班，至少会让我的妻子非常失望
- en: Not reporting the bug would get me home on time and save a lot of hassle at
    home
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不报告 bug 会让我按时回家，免去很多家庭麻烦
- en: 'Had automated tests been in place, the choice would have been quite simple:
    the first option, resulting in no hassle at home and no hassle at work.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当时有自动化测试，选择就会变得非常简单：第一个选择，既没有家庭麻烦，也没有工作上的麻烦。
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Why automated testing?
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么选择自动化测试？
- en: When to use automated testing.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 何时使用自动化测试。
- en: What is automated testing?
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是自动化测试？
- en: If you prefer to read the *what* first, you might first want to jump to *What
    is automated testing?*
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你更喜欢先看*什么*，你可能首先想跳到*什么是自动化测试？*
- en: Why automated testing?
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择自动化测试？
- en: 'Plainly said: it all boils down to saving you a lot of hassle. There are no
    emotions or time-intensive execution will keep you from (re)running tests. It''s
    just a matter of pushing the button and getting the tests carried out. This is
    reproducible, fast, and objective.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 直白地说：归根结底，自动化测试可以为你节省很多麻烦。它没有情感，也没有耗时的执行来阻止你（重新）运行测试。只是按下按钮，测试就会自动执行。这是可重现的，快速的，且客观的。
- en: 'To clarify, automated tests are the following things:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了澄清，自动化测试是以下内容：
- en: Easy to reproduce
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容易重现
- en: Fast to execute
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行速度快
- en: Objective in its reporting
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其报告是客观的
- en: 'If it was as straightforward as that, then why haven''t we been doing this
    in the Dynamics 365 Business Central world all those years? You probably can come
    up with a relevant number of arguments yourself, of which the most prominent might
    be: we do not have time for that. Or maybe: who''s going to pay for that?'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果事情真这么简单，那为什么这些年我们在Dynamics 365 Business Central的世界里没有一直做这个呢？你可能能列出一些相关的论点，其中最突出的可能是：我们没有时间做这个。或者也许是：谁来为这个付费？
- en: Why not?
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么不呢？
- en: Before elaborating on any arguments, pro or con, let me create a more complete
    *why not?* list. Let's call it the *whys of non-automated testing:*
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在详细阐述任何论点之前，让我先列出一个更完整的*为什么不？*列表。我们可以称之为*非自动化测试的理由*：
- en: Costs are too high and will make us uncompetitive.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成本太高，会让我们失去竞争力。
- en: Dynamics 365 Business Central platform does not enable it.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dynamics 365 Business Central平台不支持此功能。
- en: Customers do the testing, so why should we bother?
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户来做测试，那我们为什么还要费心呢？
- en: Who's going to write the test code? We already have a hard time finding people.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谁来写测试代码？我们已经很难找到人手了。
- en: Our everyday business does not leave room to add a new discipline.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的日常业务没有空闲时间来增加新的学科。
- en: There are too many different projects to allow for test automation.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目太多，无法实现测试自动化。
- en: Microsoft has tests automated, and still, Dynamics 365 Business Central is not
    bug free.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软已经实现了测试自动化，但Dynamics 365 Business Central仍然不是无bug的。
- en: Why yes?
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么是这样呢？
- en: 'Dynamics 365 Business Central is not as simple as it used to be way back when
    it was called Navigator, Navision Financials, or Microsoft Business Solutions—Navision.
    And the world around us isn''t as one fold either. Our development practices are
    becoming more formal, and, with this, the call for testing automation is pressing
    on us for almost the same reasons as the *why of non-automated testing*:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Dynamics 365 Business Central不像以前那么简单了，当时它叫做Navigator、Navision Financials或Microsoft
    Business Solutions—Navision。周围的世界也不再单一。我们的开发实践变得更加规范化，随着这一点，测试自动化的需求几乎出于与*非自动化测试的原因*相同的原因，迫切需要。
- en: Drive testing upstream and save costs
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推动测试向上游发展，节省成本
- en: Dynamics 365 Business Central platform enables test automation
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dynamics 365 Business Central平台支持测试自动化
- en: Relying on customers to do the testing isn't a great idea
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖客户进行测试并不是一个好主意
- en: Having a hard time finding people—start automating your tests
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 找不到合适的人选？开始自动化你的测试吧
- en: Test automation will free up time for everyday business
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试自动化将释放出更多时间用于日常业务
- en: Keep on handling different projects because of test automation
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因为测试自动化继续处理不同的项目
- en: Automated tests are code too
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化测试也是代码
- en: Drive testing upstream and save costs
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推动测试向上游发展，节省成本
- en: Regarding the costs, I am inclined to say that, on average, the Dynamics 365
    Business Central project goes 25% over budget in the end, mainly due to after
    go-live bug fixing. I am not going to elaborate much on who's to pay for this,
    but my experiences are that it's often the implementation partner. The math is
    quite simple if assuming that to be the case. If you're spending 25% extra on
    your own account at the end of the line, why not push it upstream and spend it
    during the development phase on automated testing, building up a reusable collateral?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 关于成本，我倾向于说，平均而言，Dynamics 365 Business Central项目最终会超出预算的25%，主要是因为上线后修复bug。我不打算详细讨论由谁来支付这部分费用，但我的经验是，通常是实施伙伴承担。如果假设这是事实，那么数学很简单。如果你最终需要额外花费25%的费用，为什么不把这笔钱推向上游，在开发阶段进行自动化测试并建立可重用的支持文件呢？
- en: During my time at Microsoft in the 2000s, research had been performed on the
    cost of catching a bug in the different stages of developing a major release of
    a product. If my memory is not failing, the cost of catching a bug after release
    was found to be approximately 1,000 times higher than when catching the bug already
    at requirement specification.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在我2000年代在微软工作期间，曾对在产品重大版本开发的不同阶段发现错误的成本进行过研究。如果我的记忆没错的话，研究发现，在发布后发现一个bug的成本大约是提前在需求规格阶段发现它的成本的1000倍。
- en: Translating this to the world of an **independent software vendor** (**ISV**),
    this might roughly be a factor 10 lower. So, the cost of catching a bug all the
    way downstream would be 100 times higher than all the way upstream. In case of
    a **value-added reseller** (**VAR**) doing one-off projects, this could be another
    factor of 10 lower. Whatever the factors would be, any spending upstream is more
    cost effective than downstream, be it more formalized testing, better app coding,
    code inspection, or more detailed requirements specifying.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 把这个转化到**独立软件供应商**（**ISV**）的世界，可能大致是一个低十倍的因素。因此，发现一个bug在下游的成本将比在上游发现的成本高出100倍。对于一个做一次性项目的**增值经销商**（**VAR**）来说，成本可能再低十倍。不管这些因素是什么，任何上游的支出都比下游更具成本效益，无论是更规范的测试、更好的应用编程、代码检查，还是更详细的需求说明。
- en: Note that people often do correct me, saying that the percentage of 25% is even
    on the low side.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，人们常常纠正我，说25%的比例实际上偏低。
- en: Dynamics 365 Business Central platform enables test automation
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dynamics 365 Business Central平台支持测试自动化
- en: In all honesty, this is a no-brainer, as this is the topic of this book. But
    it is worthwhile realizing that the testability framework inside the platform
    has been there ever since version 2009 SP1, released in the summer of 2009\. So,
    for over nine years the platform has enabled us to build automated tests. Does
    it sound strange if I say that we have been sleeping for all that time? At least,
    most of us.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 说实话，这个问题不难理解，因为这正是本书的主题。但值得注意的是，平台内部的可测试性框架自2009年夏季发布的2009 SP1版本起就已经存在。因此，平台已经支持我们构建自动化测试超过九年了。如果我说我们在这段时间里一直处于“沉睡”状态，你觉得奇怪吗？至少，大多数人是这样的。
- en: Relying on customers to do the testing isn't a great idea
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖客户进行测试并不是一个好主意
- en: I agree that customers might know their features the best, and as such, are
    the presumable testers. But can you rely 100% that testing isn't squeezed between
    deadlines of an implementation, and, in addition, between deadlines of their daily
    work? And still, in what way does their testing contribute to a more effective
    test effort in the future? How structured and reproducible will it be?
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我同意客户可能最了解他们的功能，因此他们是可能的测试者。但你能百分之百地依赖他们的测试不被夹在实施的截止日期之间，并且还要在他们日常工作中的截止日期之间吗？而且，他们的测试将如何为未来更有效的测试工作做出贡献？它的结构性和可重现性如何？
- en: Posing these questions answers them already. It isn't a great idea, in general,
    to rely on customers testing if you want to improve your development practices.
    Having said that, this doesn't mean that customers should not be included; by
    all means, incorporate them in setting up your automated tests. We will elaborate
    on that more later.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 提出这些问题本身就已经回答了这些问题。一般来说，如果你希望改进开发实践，依赖客户进行测试并不是一个好主意。话虽如此，这并不意味着客户不应该被纳入其中；无论如何，应将他们纳入自动化测试的设置过程中。我们稍后会详细阐述这一点。
- en: Having a hard time finding people – start automating your tests
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 找人很困难——开始自动化你的测试
- en: At this very moment, while I am writing this, all implementation partners in
    the Dynamics world are having a hard time finding people to add to their teams
    in order to get the work done. Note that I deliberately didn't use the adjective
    *right* in that sentence. We all are facing this challenge. And, even if human
    resources were abundant, practices show that, with growing business, in either
    volume or size, the number of resources used does not grow proportionally.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 就在此时，当我写下这些文字时，Dynamics领域的所有实施合作伙伴都在为找到合适的人才以完成工作而苦恼。请注意，我故意没有在那句话中使用形容词*right*（正确）。我们都面临着这个挑战。即便人力资源充足，实践表明，随着业务的增长，无论是规模还是体量，所使用的资源数量并不会按比例增长。
- en: Consequently, we must all invest in changing our daily practices, which very
    often leads to automation, using, for example, PowerShell to automate administrative
    tasks and RapidStart methodology for configuring new companies. Likewise, writing
    automated tests to make your test efforts easier and faster. Indeed, it needs
    a certain investment to get it up and running, but it will save you time in the
    end.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们都必须投资改变日常实践，这往往会导致自动化的出现，例如使用PowerShell来自动化行政任务，使用RapidStart方法来配置新公司。同样，编写自动化测试以使测试工作变得更加轻松和快捷。确实，启动它需要一定的投入，但最终它会节省你的时间。
- en: Test automation will free up time for everyday business
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试自动化将为日常业务释放时间
- en: Similar to getting the job done with proportionally fewer resources, test automation
    will eventually be of help in freeing up time for everyday business. This comes
    with an initial price, but will pay off in due time.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于用相对较少的资源完成工作，测试自动化最终会帮助释放时间来处理日常业务。这需要一定的初期投入，但随着时间的推移，它将带来回报。
- en: A logical question being posed when I touch the topic of spending time when
    introducing test automation, concerns the ratio of time spent on app and test
    coding. Typically, at the Microsoft Dynamics 365 Business Central team, this is
    a 1:1 ratio, meaning that for each hour of app coding there is one hour of test
    coding.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当我讨论花时间进行测试自动化时，一个常见的问题是关于应用程序和测试编码所花时间的比例。通常，在微软Dynamics 365 Business Central团队中，这是1:1的比例，意味着每花一小时进行应用程序编码，就需要花一小时进行测试编码。
- en: Keep on handling different projects because of test automation
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 继续处理不同的项目，因为有了测试自动化
- en: Traditional Dynamics 365 Business Central implementation partners typically
    have their hands full of customers with a one-off solution. And, due to this have
    dedicated teams or consultants taking care of these installations, testing is
    handled in close cooperation with the end-user with every test run putting a significant
    load on those involved. Imagine what it would mean to have an automated test collateral
    in place—how you would be able to keep on servicing those one-off projects as
    your business expands.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的Dynamics 365 Business Central实施合作伙伴通常忙于客户的一次性解决方案。因此，他们有专门的团队或顾问负责这些安装，测试与最终用户密切合作，每次测试都给参与者带来显著的负担。试想一下，如果有一个自动化的测试辅助工具，你将如何在业务扩展的同时继续服务这些一次性项目。
- en: On any major development platform, such as Visual Studio, it has been common
    practice for a long time already that applications are delivered with test automation
    in place. Note that more and more customers are aware of these practices. And
    more and more, they will be asking you why you are not providing automated tests
    to their solution.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何主要的开发平台上，比如 Visual Studio，已经有很长一段时间的惯例是，应用程序会附带自动化测试。请注意，越来越多的客户已经意识到这些做法。越来越多的客户会问你为什么不为他们的解决方案提供自动化测试。
- en: Each existing project is a threshold to take having a lot of functionality and
    no automated tests. In a lot of cases, the major part of the features used is
    standard Dynamics 365 Business Central functionality, and, for these, Microsoft
    has made their own tests available since version 2016\. Altogether, over 21,000
    tests have been made available for the latest version of Business Central. This
    is a humongous number, of which you might take advantage and make a relatively
    quick start on. We will discuss these tests and how you could get them running
    on any solution later.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 每个现有的项目都是一个门槛，拥有大量功能却没有自动化测试。在很多情况下，使用的主要功能是标准的 Dynamics 365 Business Central
    功能，对于这些功能，微软自2016年起就提供了他们自己的测试。总的来说，最新版本的 Business Central 提供了超过21,000个测试。这是一个巨大的数字，你可以利用这一点，快速开始。稍后我们将讨论这些测试以及如何让它们在任何解决方案上运行。
- en: Automated tests are code too
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化测试也是代码
- en: 'There is no way of denying it: automated tests are also code. And any line
    of code has a certain probability of containing a bug.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 不能否认的是：自动化测试也是代码。而任何一行代码都有一定的几率包含缺陷。
- en: Does this mean you should refrain from test automation? If so, it sounds like
    refraining from coding in general. For sure, the challenge is to keep the bug
    probability to a bare minimum by making the test design a part of the requirements
    and requirements review, by reviewing the test code like you would want to review
    the app code, and by making sure that tests always end with an adequate number
    of verifications by putting them under source code management.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这是否意味着你应该避免进行测试自动化？如果是这样，那听起来就像是避免编码一样。挑战无疑是将测试设计作为需求和需求评审的一部分，像审查应用代码一样审查测试代码，并确保测试总是以适当数量的验证结束，将其纳入源代码管理，从而将缺陷概率控制在最低水平。
- en: Ages ago, I watched a documentary on this topic, stating that research had shown
    that this probability was somewhere between two and five percent. The exact probability
    was likely to depend on the coding skills of the developer concerned.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 很久以前，我看过一部关于这个主题的纪录片，指出研究表明这种概率大约在2%到5%之间。具体的概率可能取决于相关开发者的编码技能。
- en: Some more arguments
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多的论据
- en: Still not convinced on why you would/should/could start using test automation?
    Do you need more arguments to sell it inside your company and to your customers?
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 还是不确定为什么你应该开始使用测试自动化？你需要更多的论据来在公司内部和向客户推销它吗？
- en: 'Here are some of the arguments:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些论据：
- en: Nobody loves testing
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有人喜欢测试
- en: Reduced risks and higher satisfaction
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 降低风险，提高满意度
- en: Once the learning curve is over, it will often be quicker than manual testing
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦学习曲线过去，它通常会比手动测试更快
- en: Shorter update cycles
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更短的更新周期
- en: Test automation is required
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要进行测试自动化
- en: Nobody loves testing
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 没有人喜欢测试
- en: Well, almost nobody. And, surely, when testing means re-running and re-running
    today, tomorrow, next year, it tends to become a nuisance, which deteriorates
    the testing discipline. Automate tasks that bore people and free up time for more
    relevant testing where manual work makes a difference.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，几乎没有人喜欢。当测试意味着今天、明天、明年反复进行时，它往往会变得令人厌烦，从而影响测试的纪律性。自动化那些让人感到无聊的任务，为更有意义的测试释放时间，在这些测试中，手动工作能够产生更大的影响。
- en: Reduced risks and higher satisfaction
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 降低风险，提高满意度
- en: Having an automated test collateral enables you to have a quicker insight than
    ever before into the state of the code. And, at the same time, when building up
    this collection, the regression of bugs and the insertion of new ones will be
    much lower than ever before. This all leads to reduced risks and higher customer
    satisfaction, and your management will love this.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有自动化测试材料使你能够比以往更快速地洞察代码的状态。同时，在建立这些集合的过程中，回归性缺陷和新缺陷的引入将比以往更少。这一切都带来了更低的风险和更高的客户满意度，而你的管理层会喜欢这个。
- en: Once the learning curve is over, it will often be quicker than manual testing
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一旦学习曲线过去，它通常会比手动测试更快
- en: Learning this new skill of automating your tests will take a while, no doubt
    about that. But, once mastered, conceiving and creating them will often be much
    quicker than doing the thing manually, as tests often are variations of each other.
    Copying and pasting with code is ... well ... can you do such a thing with manual
    testing? Not to mention re-running these automated tests or the manual tests.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 学习自动化测试这一新技能肯定需要一段时间，毫无疑问。但一旦掌握，构思和创建自动化测试的速度往往比手动执行要快得多，因为测试通常是彼此的变体。用代码复制粘贴是……嗯……你能用手动测试做到这一点吗？更不用说重新运行这些自动化测试或手动测试了。
- en: Shorter update cycles
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更短的更新周期
- en: With agile methodologies and cloud services, it has become normal practice that
    updates are delivered with shorter time intervals, leaving even less time to get
    full testing done. And Dynamics 365 Business Central is part of this story. If
    Microsoft isn't forcing us in, our customers will be requesting this from us more
    and more. See also the preceding discussion.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 随着敏捷方法和云服务的发展，更新以更短的时间间隔交付已成为常态，留给全面测试的时间更少了。而Dynamics 365 Business Central正是这一故事的一部分。如果微软不强制我们这么做，我们的客户会越来越多地向我们提出这一要求。参见前面的讨论。
- en: Test automation is required
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需要进行测试自动化
- en: 'Last but not least on this incomplete discussion of argument on *the why of
    test automation*, and perhaps the sole reason for you reading this book: automated
    tests are required by Microsoft when you are going to sell your Dynamics 365 Business
    Central extension on *AppSource*. It is also great for me to be able to share
    my great passions with you: being a speaker on various conferences; conducting
    workshops; writing this book.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，这一段对*为什么要进行测试自动化*的讨论，也许是你读这本书的唯一理由：当你准备在*AppSource*上销售你的Dynamics 365
    Business Central扩展时，微软要求进行自动化测试。这对我来说也是一个绝佳机会，可以与您分享我对讲学、举办研讨会、写这本书的激情。
- en: All joking aside, this is a great opportunity for all of us. Yes, we're pushed,
    but we have been lingering on this topic for too long. Now, let's get on with
    it.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 说正经的，这是我们大家的一个巨大机会。是的，我们面临压力，但我们在这个话题上徘徊太久了。现在，让我们开始吧。
- en: Silver bullet?
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 灵丹妙药？
- en: 'Nevertheless, you might rightfully wonder whether test automation is the silver
    bullet that will solve everything. And I cannot deny that. However, I can tell
    you that, if exercised well, it will surely raise the quality of your development
    effort. As mentioned before, it has the following benefits:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你或许有理由怀疑，测试自动化是否真的是解决一切问题的灵丹妙药。我不能否认这一点。然而，我可以告诉你，如果操作得当，它肯定会提高你开发工作的质量。如前所述，它具有以下优点：
- en: Easy to reproduce
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 易于重现
- en: Fast to execute
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行速度快
- en: Objective in its reporting
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客观的报告
- en: When to use automated testing
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时使用自动化测试
- en: Those are enough arguments to convince you why you would want to use automated
    tests, I guess. But how about *when* to use them? Ideally, this would be whenever
    code is changed to show that this functionality, already having been tested, is
    still working as it should, to show that recent modifications do not compromise
    the existing application.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这些理由大概足以说服你为什么要使用自动化测试了吧。那么，*何时*使用它们呢？理想情况下，应该是在每次代码更改时，测试已经经过测试的功能是否仍然正常工作，以确保最近的修改不会影响现有的应用程序。
- en: 'This sounds logical, but what does this mean when you have no automated tests
    in place? How do you go about start creating your first ones? Basically, I would
    advise you to use the two following criteria:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来很有道理，但如果没有自动化测试，这意味着什么呢？你该如何开始创建你的第一个自动化测试？基本上，我建议你使用以下两个标准：
- en: What code change will give the highest return on investment when creating automated
    tests?
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪种代码更改会在创建自动化测试时带来最高的投资回报率？
- en: For what code change will your test automation creation improve your test coding
    skills the most?
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪种代码更改会让你的测试自动化创建最能提升测试编码技能？
- en: 'Using these two criteria, the following kind of code changes are typical candidates
    for your first efforts:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这两个标准，以下类型的代码更改通常是你首次尝试的理想候选：
- en: After go-live bug fixing
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上线后修复漏洞
- en: Buggy code
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有缺陷的代码
- en: Frequently modified code
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经常修改的代码
- en: Business-critical code being changed
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业务关键代码被更改
- en: Refactoring of existing code
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现有代码的重构
- en: New feature development
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能开发
- en: Microsoft updates
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软更新
- en: After go-live bug fixing
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上线后修复漏洞
- en: An after go-live bug reveals an omission in the initial test efforts that can
    often be traced back to a flaw in the requirements. Frequently, it has a restricted
    scope, and, not the least important, a clear reproduction scenario. And by all
    means, such a bug should be prevented from ever showing its ugly face.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Buggy code
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have this feature that keeps on bugging you and your customers. Bugs keep
    on popping up in this code and it never seems to stop. The most elementary thing
    you should start with is the *after go-live* bug fixing approach as previously
    discussed. But, even more importantly, use this code to create a full test suite
    for the first time.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: 'Bugs are a particularly useful starting point, because they usually provide
    the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: A defined expectation
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steps to reproduce the scenario
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A clear definition of how the code fails
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Frequently modified code
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the basic rules of good code governance is that code should only be changed
    when it is going to be tested. So, if code is modified frequently, the consequence
    is that it will also be tested frequently. Automating these tests will give a
    good return on investment for sure.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: Business-critical code being changed
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thorough testing should always be the case, but, given circumstances, it is
    unfortunately not always doable. Testing changes made to business-critical code,
    however, should always be exhaustive. You can simply not afford any failure on
    them. Make it a point of honor to find even the two to five percent of bugs that
    statistics tell us are always there!
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring of existing code
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Refactoring code can be nerve-racking. Removing, rewriting, and reshuffling.
    How do you know it is still doing the job it used to? Does it not break anything
    else? It certainly needs to be tested. But, when manually done, it is often executed
    after the whole refactoring is ready. That might be already too late, as too many
    pieces got broken. Grant yourself peace of mind and start, before any refactoring,
    by getting an automated test suite in place for this code to prove its validity.
    With every refactor step you take, run the damn suite. And again. This way, refactoring
    becomes fun.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: New feature development
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting from scratch, both on test and app code, will be an irrefutable experience.
    For some, this might be the ultimate way to go. For others, this is a *bridge
    too far*, in which case, all previous candidates are probably better ones. In
    [Section 3](13a9d0b2-ae46-45ba-8790-8489439e70fc.xhtml), *Designing and Building
    Automated Tests for Microsoft Dynamics 365 Business Central*, we will take this
    approach and show you the value of writing test code alongside app code.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft updates
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Incorporating any update from Microsoft, be it on-premises or in the cloud,
    your features must be (re)tested to prove they're still functioning like before.
    In case you do not have automated tests in place, begin creating them. Do this
    based on the analysis of the various changes and the risks they might entail of
    introducing errors.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: What is automated testing?
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We discussed why you might want to automate your tests and when to do this;
    or more specifically, where to start. But we didn't spend any thoughts on what
    automated testing is. So, let's do that before we conclude this chapter.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: 'With automated testing, we address the automation of application tests, scripting
    manual application tests that check the validity of features. In our case, these
    are the features that reside in Dynamics 365 Business Central. You might have
    noticed that we have been using somewhat different terms for it:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Test automation
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated tests
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated testing
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These all mean the same thing.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: On one hand, automated testing is replacing manual, often exploratory, testing.
    It's replacing those manual tests that are reproducible and often no fun (anymore)
    to execute.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'What is exploratory testing? Check out the following link for more information:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[https://en.wikipedia.org/wiki/Exploratory_testing](https://en.wikipedia.org/wiki/Exploratory_testing).'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, they are complementary. Manual testing will still contribute
    to raising the quality of a feature, making use of creative and experienced human
    minds able to find holes in the current test design. Automated testing might also
    include so-called unit tests. These are tests that verify the working of atomic
    units that altogether make up a feature. Typically, these units would be single,
    global AL functions – units that would never be tested manually.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: 'Ultimately, both manual and automated tests serve the same goal: to verify
    that the object under test meets the requirements.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: 'More on unit and functional tests can be found at the following link: [https://www.softwaretestinghelp.com/the-difference-between-unit-integration-and-functional-testing/](https://www.softwaretestinghelp.com/the-difference-between-unit-integration-and-functional-testing/).'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed *why* you would want to automate your application
    tests, and *when* you might want to create and run them. And we concluded with
    a short description of the *what*—what is automated testing?
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 2](1e679d13-4037-48e2-b8ae-f550f507f8c9.xhtml), *The Testability
    Framework*, you will learn what technical features are built into the Dynamics
    365 Business Central platform that enable us to run and create automated tests.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
