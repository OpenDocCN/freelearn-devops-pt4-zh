- en: The Test Tool and Standard Tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ever since NAV 2009 SP1, providing automated tests has been a major part of
    Microsoft''s work on the application. Using the testability framework, they have
    created the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A humongous set of automated tests to verify the standard application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Test Tool feature, that has become part of the standard application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A vast number of test helper libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will discuss all three matters in more details.
  prefs: []
  type: TYPE_NORMAL
- en: Note that each of these is provided by Microsoft as a separate component; that
    is, a `.fob`, on the product DVD and in the Docker images from NAV 2016 and up.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Test Tool is also present in Business Central online, but you will only
    be able to fetch tests for the extensions that reside in CRONUS, not for the standard
    application. To get yourself a free trial, visit: [https://dynamics.microsoft.com/en-us/business-central/overview/](https://dynamics.microsoft.com/en-us/business-central/overview/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the use of Docker, visit: [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/devenv-running-container-development](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/devenv-running-container-development).'
  prefs: []
  type: TYPE_NORMAL
- en: Test Tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Goal: Understand what the Test Tool entails and learn how to use and apply it.
  prefs: []
  type: TYPE_NORMAL
- en: The Test Tool is a standard application feature that allows you to manage and
    run the automated tests that reside in the database, and collect their results,
    be they test codeunits that belong to the standard application or that are part
    of extensions. With the various hands-on example tests, we will be using this
    tool a lot. However, before we do this, let's elaborate a little bit on it.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can easily access the Test Tool using the TELL ME WHAT YOU WANT TO DO feature
    in Dynamics 365 Business Central, as displayed in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8c97af4-613c-4400-8a11-f5b1054bb943.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When in a clean database, or at least a database or company where the Test
    Tool has not been used yet, this is how the Test Tool appears. A suite called
    DEFAULT with no records in it appears, as seen as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/38bd9b71-d616-45ea-bd41-aa3a1faf8585.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To populate the suite take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Get Test Codeunits** action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the dialog that opens, you have the following two options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Test Codeunits: This will open a list page showing all test codeunits
    that are present in the database from which you can select specific test codeunits;
    once you have selected and clicked OK, these codeunits will be added to the suite
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: All Test Codeunits:This will add all test codeunits that exist in the database
    to the test suite
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s select the first option, Select Test Codeunits. This will open the CAL
    Test Get Codeunits page. Unsurprisingly, it shows the four test codeunits we have
    created in [Chapter 2](1e679d13-4037-48e2-b8ae-f550f507f8c9.xhtml), *The Testability
    Framework*, followed by the long list of over 700 standard test codeunits:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9ef589c-646a-4561-88ba-222360dc4f32.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the four test codeunits 60000 through 60003 and click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The suite now shows for each test Codeunit a line with LINE TYPE = Codeunit
    and, linked to this line and indented, all its test functions (LINE TYPE = Function)
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ecf55f01-53d7-4b41-8af4-4dfe14a00a70.png)'
  prefs: []
  type: TYPE_IMG
- en: To run the tests, select the Run action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the following dialog that opens, with options Active Codeunit and All, select
    All and press OK. Now all four test codeunits will be run and each test will yield
    a result, Success or Failure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5a6ee3af-1cdb-4554-b5ad-ac5e009f28c1.png)'
  prefs: []
  type: TYPE_IMG
- en: Had we selected the option Active Codeunit only, the selected codeunit would
    have been executed.
  prefs: []
  type: TYPE_NORMAL
- en: For each failure, the First Error field will display the error that caused the
    failure. As you can see, First Error is a FlowField. If you drill down into it,
    the CAL Test Result window opens. This displays the whole test run history for
    a specific test.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the message dialog in `MyFirstTestCodeunit` yields an `Unhandled UI`
    error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the test by selecting Run will call the standard test runner codeunit
    `CAL Test Runner` (130400) and will make sure that the following happen:'
  prefs: []
  type: TYPE_NORMAL
- en: Tests run from the Test Tool will be run in isolation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The results of each test function will be logged
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this short overview of the Test Tool, we used the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Get test codeunits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating multiple test suites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When diving into test coding, the Test Tool will be our companion. There we
    will be using various other features of it, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Run selected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drilling into the test results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Referencing the call stack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clearing the results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test coverage map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Regarding on-premises installation: The Test Tool can be accessed and executed
    using an end-user license. This has been enabled since the fall of 2017.'
  prefs: []
  type: TYPE_NORMAL
- en: Standard tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Goal: Get to know the basics of the standard tests provided by Microsoft.
  prefs: []
  type: TYPE_NORMAL
- en: Ever since NAV 2016, Microsoft made their own application test collateral a
    part of the product. A humongous set of tests is delivered as a `.fob` file on
    the product DVD, in the `TestToolKit` folder, and in the Docker images. Indeed,
    the tests haven't been delivered as an extension yet.
  prefs: []
  type: TYPE_NORMAL
- en: The standard test suite does contain mainly test codeunits. But there are also
    a number of supporting table, page, report, and XMLport objects in the `.fob`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: For Dynamics 365 Business Central, the whole set contains almost 23,000 tests
    in more than 700 test codeunits, for w1 and local functionality for each country
    in which Microsoft releases. And with every bug that's fixed and with every new
    feature introduced in the application, the number of tests is growing. It has
    been built over the last ten years and it covers all functional areas of Business
    Central.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s set up a new suite in the Test Tool called **ALL W1**:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the Assist Edit button in the Suite Name control
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the CAL Test Suites pop-up window select New
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Populate the Name and Description fields
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click OK
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To open the newly created test suite:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0713c7d2-02b0-4d0f-8baa-2bc6ed490ffd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, using the Get Test Codeunits action, let Business Central fetch all standard
    test codeunits as shown in the next screenshot. Note that I did remove our test
    codeunit 60000 through 60003:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c10fced8-a914-4b0e-b932-23e6712fff61.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Reading the names of all test codeunits will give you a first impression of
    what they entail, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Enterprise Resource Management** (**ERM**) and **Supply Chain Management**
    (**SCM**) codeunits:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These two categories contain almost 450 codeunits to form the major part of
    standard test collateral
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ERM test codeunits cover G/L, sales, purchase, and inventory
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SCM test codeunits cover warehouse and production
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Apart from ERM and SCM, several other categories can be noted, of which the
    biggest are:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service (approximately 50 test codeunits)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: O365 integration (approximately 35)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Job (approximately 25)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Marketing (approximately 15)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Most of these test codeunits contain functional, end-to-end tests. But there
    are also codeunits that hold **unit tests** (**UT**). These are marked by the
    addition of Unit Test to their name. Some examples are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Codeunit 134155 - ERM Table Fields UT`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Codeunit 134164 - Company Init UT II`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Codeunit 134825 - UT Customer Table`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With headless testing being the initial trigger for bringing the testability
    framework into the platform, it''s no surprise that the clear majority of standard
    test codeunits comprises headless tests. Test codeunits that are meant to test
    the **user interface** (**UI**) are marked using `UI` or `UX` in their name. Some
    examples are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Codeunit 134280 - Simple Data Exchange UI UT`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Codeunit 134339 - UI Workflow Factboxes`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Codeunit 134711 - Autom. Payment Registration.UX`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Codeunit 134927 - ERM Budget UI`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that these are not the only test codeunits addressing the UI. Any other
    might contain one or more UI tests, where, in general, the bulk will be headless
    tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'As I am often asked how to test reports, it is noteworthy to mention as a last
    category those test codeunits that are dedicated to testing reports. Search for
    any test codeunit that is marked with the word `Report` in its name. You will
    find 50+ of them. The following are a couple of examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Codeunit 134063 - ERM Intrastat Reports`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Codeunit 136311 - Job Reports II`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Codeunit 137351 - SCM Inventory Reports – IV`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Categorization by FEATURE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By inspecting the names of the standard test codeunits, we got an impression
    of what kind of tests this collateral is made. Microsoft, however, has a better
    structured categorization, which so far, due to low priority, hasn't been explicitly
    shared with the outside world. Now that automated testing is being picked up more
    and more, it's pressing on Microsoft to put this on higher priority. But for now,
    we can access it already inside most of the test codeunits. You need to look for
    the `FEATURE` tag. This tag is part of the **Acceptance Test-Driven Development**
    (**ATDD**) test case design pattern, which we will be discussing later in [Chapter
    4](db955f66-11f4-4d9a-90c7-5af04058ebbe.xhtml), *Test Design*. Using the `[FEATURE]`
    tag, Microsoft categorizes their test codeunits and, in some cases, individual
    test functions. Note that this tagging is far from complete as not all test codeunits
    have it, yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Have a look at the (partial) abstract of the following codeunits:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Codeunit 134000 - ERM Apply Sales/Receivables`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnRun`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[FEATURE] [Sales]`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[Test] PROCEDURE VerifyAmountApplToExtDocNoWhenSetValue`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[FEATURE] [Application] [Cash Receipt]`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[Test] PROCEDURE PmtJnlApplToInvWithNoDimDiscountAndDefDimErr`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[FEATURE] [Dimension] [Payment Discount]`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Codeunit 134012 - ERM Reminder Apply Unapply`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnRun`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[FEATURE] [Reminder] [Sales]`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[Test] PROCEDURE CustomerLedgerEntryFactboxReminderPage`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[FEATURE] [UI]`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In later chapters, we will look in more detail at various standard test functions.
    You will see how to take them as examples for your own test writing ([Chapter
    4](db955f66-11f4-4d9a-90c7-5af04058ebbe.xhtml), *Test Design*, [Chapter 5](56634efe-664c-421a-9582-b2a6ae69722a.xhtml),
    *From Customer Wish to Test Automation - The Basics*, [Chapter 6](0f8efb81-438e-48ed-9f7f-bcfa5caa8e92.xhtml),
    *From Customer Wish to Test Automation - Next Level*, and [Chapter 7](bb9ee41e-4c60-4a27-8fad-5343adfcd86a.xhtml),
    *From Customer Wish to Test Automation - And Some More*), and how to get them
    to run on your own solution ([Chapter 9](795b3870-b6f5-43be-953c-0ffd01db9102.xhtml),
    *Getting Business Central Standard Tests Working on Your Code*).
  prefs: []
  type: TYPE_NORMAL
- en: 'At this very moment, the standard test suite objects are to be found in the
    following ID ranges:'
  prefs: []
  type: TYPE_NORMAL
- en: '134000 to 139999: w1 tests'
  prefs: []
  type: TYPE_NORMAL
- en: '144000 to 149999: local tests'
  prefs: []
  type: TYPE_NORMAL
- en: Standard libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Goal: Get to know the basics about the standard test helper libraries provided
    by Microsoft.
  prefs: []
  type: TYPE_NORMAL
- en: Supporting their standard tests, Microsoft has created a nice and very useful
    collection of helper functions in more than 70 library codeunits. These helper
    functions range from random data generations and master data generation to standard
    generic and more specific check routines.
  prefs: []
  type: TYPE_NORMAL
- en: Need a new item? You might make use of the `CreateItem` or `CreateItemWithoutVAT`
    helper functions in `Library - Inventory` (codeunit 132201).
  prefs: []
  type: TYPE_NORMAL
- en: Need a random text? Use the `RandText` helper function in `Library – Random`
    (codeunit 130440).
  prefs: []
  type: TYPE_NORMAL
- en: Want to get the same formatted error messages when verifying your test outcome?
    Use one of the helper functions in the `Assert` (codeunit 130000), such as `IsTrue`,
    `AreNotEqual`, and `ExpectedError`.
  prefs: []
  type: TYPE_NORMAL
- en: 'A frequently reappearing question during my workshops is:'
  prefs: []
  type: TYPE_NORMAL
- en: How do I know if these libraries contain a helper function I need in my own
    test? Is there an overview of the various helper functions?
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, there is no overview of all available helper functions for Dynamics
    365 Business Central. However, up to NAV 2018, a `.chm` help file containing this
    information was included in the `TestToolKit` folder on the product DVD. You might
    want to make use of this, but I always use a very simple method. Having all our
    code in a source code management system, I can do a quick file search in the standard
    test objects folder. In case I need a helper that will create me a service item,
    I might open VS Code on that folder and search for `CreateServiceItem`, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3d7319ea-4dfa-4769-87f1-09ee9980adf6.png)'
  prefs: []
  type: TYPE_IMG
- en: In [Section 3](13a9d0b2-ae46-45ba-8790-8489439e70fc.xhtml), *Designing and Building
    Automated Tests for Microsoft Dynamics 365 Business Central*, of this book, when
    building tests, we will happily make use of various standard helper functions,
    making our work much more efficient and consistent.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this very moment, the standard test library objects are to be found in the
    following ID ranges:'
  prefs: []
  type: TYPE_NORMAL
- en: '130000 to 133999: w1 test helper libraries'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that all test tool objects also reside in the lower part of this range:'
  prefs: []
  type: TYPE_NORMAL
- en: '140000 to 143999: local test helper libraries'
  prefs: []
  type: TYPE_NORMAL
- en: 'More on unit and functional tests? Go to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.softwaretestinghelp.com/the-difference-between-unit-integration-and-functional-testing/](https://www.softwaretestinghelp.com/the-difference-between-unit-integration-and-functional-testing/)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed in a nutshell what the Test Tool is and how to
    use it to run your tests, or even run the collection of tests Microsoft has built
    and provided us with. We gave a short overview of the various categories of tests
    this vast collection contains. We concluded with a brief description of the 70+
    libraries containing useful helper functions to support your own test writing.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have discussed the various test features that exist in Dynamics
    365 Business Central, we are ready to go and start designing and coding our own
    test. We will start in [Chapter 4](db955f66-11f4-4d9a-90c7-5af04058ebbe.xhtml),
    *Test Design*, to introduce several design patterns that facilitate easier and
    consistent test case coding.
  prefs: []
  type: TYPE_NORMAL
