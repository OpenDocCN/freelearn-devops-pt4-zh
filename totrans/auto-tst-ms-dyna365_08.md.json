["```\n[FEATURE] LookupValue Customer\n```", "```\n[SCENARIO #0001] Assign lookup value to customer\n```", "```\n[GIVEN] A lookup value\n[GIVEN] A customer\n```", "```\n[WHEN] Set lookup value on customer\n```", "```\n[THEN] Customer has lookup value code field populated\n```", "```\n[FEATURE] LookupValue Customer \n[SCENARIO #0001] Assign lookup value to customer\n[GIVEN] A lookup value\n[GIVEN] A customer\n[WHEN] Set lookup value to customer\n[THEN] Customer has lookup value code field populated\n```", "```\ntable 50000 \"LookupValue\"\n{\n    LookupPageId = \"LookupValues\";\n\n    fields\n    {\n        field(1; Code; Code[10]){}\n        field(2; Description; Text[50]){}\n    }\n\n    keys\n    {\n        key(PK; Code)\n        {\n            Clustered = true;\n        }\n    }\n}\npage 50000 \"LookupValues\"\n{\n    PageType = List;\n    SourceTable = \"LookupValue\";\n\n    layout\n    {\n        area(content)\n        {\n            repeater(RepeaterControl)\n            {\n                field(\"Code\"; \"Code\"){}\n                field(\"Description\"; \"Description\"){}\n            }\n        }\n    }\n}\ntableextension 50000 \"CustomerTableExt\" extends Customer\n{\n    fields\n    {\n        field(50000; \"Lookup Value Code\"; Code[10])\n        {\n            TableRelation = \"LookupValue\";\n        }\n    }\n}\npageextension 50000 \"CustomerCardPageExt\" extends \"Customer Card\"\n{\n    layout\n    {\n        addlast(General)\n        {\n            field(\"Lookup Value Code\"; \"Lookup Value Code\"){}\n        }\n    }\n}\n```", "```\ncodeunit 81000 \"LookupValue UT Customer\"\n{\n    Subtype = Test;\n\n    //[FEATURE] LookupValue UT Customer\n}\n```", "```\ncodeunit 81000 \"LookupValue UT Customer\"\n {\n     Subtype = Test;\n\n     //[FEATURE] LookupValue UT Customer\n\n     [Test]\n     procedure AssignLookupValueToCustomer()\n     begin\n         //[SCENARIO #0001] Assign lookup value to customer\n         //[GIVEN] A lookup value\n         //[GIVEN] A customer\n         //[WHEN] Set lookup value on customer\n         //[THEN] Customer has lookup value code field populated\n     end;\n }\n```", "```\ncodeunit 81000 \"LookupValue UT Customer\"\n {\n     Subtype = Test;\n\n     //[FEATURE] LookupValue UT Customer\n\n     [Test]\n     procedure AssignLookupValueToCustomer()\n     begin\n         //[SCENARIO #0001] Assign lookup value to customer\n         //[GIVEN] A lookup value\n         CreateLookupValueCode();\n         //[GIVEN] A customer\n         CreateCustomer();\n\n         //[WHEN] Set lookup value on customer\n         SetLookupValueOnCustomer();\n\n         //[THEN] Customer has lookup value code field populated\n         VerifyLookupValueOnCustomer();\n     end;\n }\n```", "```\nlocal procedure CreateLookupValueCode(): Code[10]\nvar\n    LookupValue: Record LookupValue;\nbegin\n    with LookupValue do begin\n        Init();\n        Validate(\n            Code,\n            LibraryUtility.GenerateRandomCode(FIELDNO(Code),\n            Database::LookupValue));\n        Validate(Description, Code);\n        Insert();\n        exit(Code);\n   end;\nend;\n```", "```\nlocal procedure CreateCustomer(var Customer: record Customer)\nbegin\n    LibrarySales.CreateCustomer(Customer);\nend;\n```", "```\nlocal procedure SetLookupValueOnCustomer(var Customer: record Customer;\n    LookupValueCode: Code[10])\nbegin\n    with Customer do begin\n        Validate(\"Lookup Value Code\", LookupValueCode);\n        Modify();\n    end;\nend;\n```", "```\nlocal procedure VerifyLookupValueOnCustomer(CustomerNo: Code[20];\n    LookupValueCode: Code[10])\nvar\n    Customer: Record Customer;\n    FieldOnTableTxt: Label '%1 on %2';\nbegin\n    with Customer do begin\n        Get(CustomerNo);\n        Assert.AreEqual(\n            LookupValueCode,\n            \"Lookup Value Code\",\n            StrSubstNo(\n                FieldOnTableTxt\n                FieldCaption(\"Lookup Value Code\"),\n                TableCaption())\n            );\n    end;\nend;\n```", "```\n[External] procedure AreEqual(Expected: Variant;Actual: Variant;Msg: Text)\n begin\n     if not Equal(Expected,Actual) then\n         Error(\n             AreEqualFailedMsg, \n             Expected, \n             TypeNameOf(Expected), \n             Actual, \n             TypeNameOf(Actual), \n             Msg)\n end;\n```", "```\ncodeunit 81000 \"LookupValue UT Customer\"\n{\n    Subtype = Test;\n    var\n        Assert: Codeunit Assert;\n        LibraryUtility: Codeunit \"Library - Utility\";\n        LibrarySales: Codeunit \"Library - Sales\";\n\n    //[FEATURE] LookupValue UT Customer\n\n    [Test]\n    procedure AssignLookupValueToCustomer()\n    var\n        Customer: Record Customer;\n        LookupValueCode: Code[10];\n    begin\n        //[SCENARIO #0001] Assign lookup value to customer\n        //[GIVEN] A lookup value\n        LookupValueCode := CreateLookupValueCode();\n        //[GIVEN] A customer\n        CreateCustomer(Customer);\n\n        //[WHEN] Setlookup value on customer\n        SetLookupValueOnCustomer(Customer, LookupValueCode);\n\n        //[THEN] Customer has lookup value code field populated\n        VerifyLookupValueOnCustomer(\n            Customer.\"No.\",\n            LookupValueCode);\n    end;\n\n    local procedure CreateLookupValueCode(): Code[10]\n    var\n        LookupValue: Record LookupValue;\n    begin\n        with LookupValue do begin\n            Init();\n            Validate(\n                Code,\n                LibraryUtility.GenerateRandomCode(FIELDNO(Code),\n                Database::LookupValue));\n                Validate(Description, Code);\n            Insert();\n            exit(Code);\n        end;\n    end;\n\n    local procedure CreateCustomer(var Customer: record Customer)\n    begin\n        LibrarySales.CreateCustomer(Customer);\n    end;\n\n    local procedure SetLookupValueOnCustomer(\n        var Customer: record Customer; LookupValueCode: Code[10])\n    begin\n        with Customer do begin\n            Validate(\"Lookup Value Code\", LookupValueCode);\n            Modify();\n        end;\n    end;\n\n    local procedure VerifyLookupValueOnCustomer(\n        CustomerNo: Code[20]; LookupValueCode: Code[10])\n    var\n        Customer: Record Customer;\n        FieldOnTableTxt: Label '%1 on %2';\n    begin\n        with Customer do begin\n            Get(CustomerNo);\n            Assert.AreEqual(\n                LookupValueCode,\n                \"Lookup Value Code\",\n                StrSubstNo(\n                    FieldOnTableTxt,\n                    FieldCaption(\"Lookup Value Code\"),\n                    TableCaption())\n                );\n        end;\n    end;\n}\n```", "```\n\"startupObjectType\": \"Page\",\n \"startupObjectId\": 130401\n```", "```\n//[THEN] Customer has lookup value code field populated\n VerifyLookupValueOnCustomer(\n     Customer.\"No.\",\n     'LUC');\n```", "```\nAssert.AreEqual failed. Expected:<LUC> (Text). Actual:<GU00000000> (Text). Lookup Value Code on Customer.\n```", "```\n[FEATURE] LookupValue UT Customer [SCENARIO #0002] Assign non-existing lookup value to customer\n[GIVEN] A non-existing lookup value\n[GIVEN] A customer\n[WHEN] Set non-existing lookup value on customer\n[THEN] Non existing lookup value error thrown\n```", "```\nprocedure AssignNonExistingLookupValueToCustomer()\nbegin\n    //[SCENARIO #0002] Assign non-existing lookup value to\n    //                 customer\n    //[GIVEN] A non-existing lookup value\n    //[GIVEN] A customer\n    //[WHEN] Set non-existing lookup value on customer\n    //[THEN] Non existing lookup value error thrown\nend;\n```", "```\nprocedure AssignNonExistingLookupValueToCustomer()\nvar\n    Customer: Record Customer;\n    LookupValueCode: Code[10];\nbegin\n    //[SCENARIO #0002] Assign non-existing lookup value to\n    //                 customer\n    //[GIVEN] A non-existing lookup value\n    LookupValueCode := 'SC #0002';\n    //[GIVEN] A customer record variable\n    // See local variable Customer\n\n    //[WHEN] Set non-existing lookup value on customer\n    asserterror SetLookupValueOnCustomer(\n                    Customer,\n                    LookupValueCode);\n\n    //[THEN] Non existing lookup value error thrown\n    VerifyNonExistingLookupValueError(LookupValueCode);\nend;\n```", "```\nlocal procedure VerifyNonExistingLookupValueError(\n                    LookupValueCode: Code[10])\nvar\n    Customer: Record Customer;\n    LookupValue: Record LookupValue;\n    ValueCannotBeFoundInTableTxt: Label\n            'The field %1 of table %2 contains a value (%3) that\n             cannot be found in the related table (%4).';\nbegin\n    with Customer do\n        Assert.ExpectedError(\n            StrSubstNo(\n                ValueCannotBeFoundInTableTxt \n                FieldCaption(\"Lookup Value Code\"),\n                TableCaption(),\n                LookupValueCode,\n                LookupValue.TableCaption()));\nend;\n```", "```\n//[THEN] Non existing lookup value error thrown\n VerifyNonExistingLookupValueError('LUC');\n```", "```\nAssert.ExpectedError failed.\n Expected: The field Lookup Value Code of table Customer contains a value (LUC) that cannot be found in the related table (Lookup Value)..\n Actual: The field Lookup Value Code of table Customer contains a value (SC #0002) that cannot be found in the related table (Lookup Value)..\n```", "```\nThe field Lookup Value Code of table Customer contains a value (SC #0002) that cannot be found in the related table (Lookup Value).\n```", "```\n[FEATURE] LookupValue UT Customer\n[SCENARIO #0003] Assign lookup value on customer card\n[GIVEN] A lookup value\n[GIVEN] A customer card\n[WHEN] Set lookup value on customer card\n[THEN] Customer has lookup value code field populated\n```", "```\npageextension 50000 \"CustomerCardPageExt\" extends \"Customer Card\"\n{\n    layout\n    {\n        addlast(General)\n        {\n            field(\"Lookup Value Code\"; \"Lookup Value Code\"){}\n        }\n    }\n}\n```", "```\n[Test]\nprocedure AssignLookupValueToCustomerCard()\nbegin\n    //[SCENARIO #0003] Assign lookup value on customer card\n    //[GIVEN] A lookup value\n    //[GIVEN] A customer card\n    //[WHEN] Set lookup value on customer card\n    //[THEN] Customer has lookup value field populated\nend;\n```", "```\n[Test]\nprocedure AssignLookupValueToCustomerCard()\nbegin\n    //[SCENARIO #0003] Assign lookup value on customer card\n    //[GIVEN] A lookup value\n    CreateLookupValueCode();\n    //[GIVEN] A customer card\n    CreateCustomerCard();\n\n    //[WHEN] Set lookup value on customer card\n    SetLookupValueOnCustomerCard();\n\n    //[THEN] Customer has lookup value field populated\n    VerifyLookupValueOnCustomer();\nend;\n```", "```\n[Test]\nprocedure AssignLookupValueToCustomerCard()\nvar\n    CustomerCard: TestPage \"Customer Card\";\n    CustomerNo: Code[20];\n    LookupValueCode: Code[10];\nbegin\n    //[SCENARIO #0003] Assign lookup value on customer card\n    //[GIVEN] A lookup value\n    LookupValueCode := CreateLookupValueCode();\n    //[GIVEN] A customer card\n    CreateCustomerCard(CustomerCard);\n\n    //[WHEN] Set lookup value on customer card\n    CustomerNo := SetLookupValueOnCustomerCard(\n                    CustomerCard,\n                    LookupValueCode);\n\n    //[THEN] Customer has lookup value field populated\n    VerifyLookupValueOnCustomer(CustomerNo, LookupValueCode);\nend;\n```", "```\nlocal procedure CreateCustomerCard(\n                   var CustomerCard: TestPage \"Customer Card\")\nbegin\n    CustomerCard.OpenNew();\nend;\n```", "```\nlocal procedure SetLookupValueOnCustomerCard(\n                   var CustomerCard: TestPage \"Customer Card\";\n                   LookupValueCode: Code[10]) CustomerNo: Code[20]\nbegin\n    with CustomerCard do begin\n        \"Lookup Value Code\".SetValue(LookupValueCode);\n        CustomerNo := \"No.\".Value();\n        Close();\n    end;\nend;\n```", "```\nlocal procedure SetLookupValueOnCustomerCard(\n                   var CustomerCard: TestPage \"Customer Card\";\n                   LookupValueCode: Code[10]) CustomerNo: Code[20]\nbegin\n    with CustomerCard do begin\n        Assert.IsTrue(\"Lookup Value Code\".Editable(), 'Editable');\n        \"Lookup Value Code\".SetValue(LookupValueCode);\n        CustomerNo := \"No.\".Value();\n        Close();\n    end;\nend;\n```", "```\nUnexpected CLR exception thrown.: Microsoft.Dynamics.Framework.UI. FormAbortException: Page New - Customer Card has to close ---> Microsoft. Dynamics.Nav.Types.Exceptions.NavNCLMissingUIHandlerException: Unhandled UI: ModalPage 1340 ---> System.Reflect\n```", "```\n[ModalPageHandler]\n procedure HandleConfigTemplates(\n             var ConfigTemplates: TestPage \"Config Templates\")\n begin\n     ConfigTemplates.OK.Invoke();\n end;\n```", "```\n[Test]\n[HandlerFunctions('HandleConfigTemplates')]\nprocedure AssignLookupValueToCustomerCard()\n```", "```\nAssert.IsTrue(\"Lookup Value Code\".Editable(), 'Editable');\n```"]