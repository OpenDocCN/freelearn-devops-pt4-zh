["```\n[SCENARIO #0012] Assign lookup value to customer template\n[GIVEN] A lookup value\n[GIVEN] A customer template\n[WHEN] Set lookup value on customer template\n[THEN] Customer template has lookup value code field populate\n[SCENARIO #0013] Assign non-existing lookup value to customer template\n[GIVEN] A non-existing lookup value\n[GIVEN] A customer template record variable\n[WHEN] Set non-existing lookup value to customer template\n[THEN] Non existing lookup value error was thrown\n[SCENARIO #0014] Assign lookup value on customer template card\n[GIVEN] A lookup value\n[GIVEN] A customer template card\n[WHEN] Set lookup value on customer template card\n[THEN] Customer template has lookup value code field populated\n```", "```\n[SCENARIO #0004] Assign lookup value to sales header\n[SCENARIO #0005] Assign non-existing lookup value on sales header\n[SCENARIO #0006] Assign lookup value on sales quote document page\n[SCENARIO #0007] Assign lookup value on sales order document\n                 page\n[SCENARIO #0008] Assign lookup value on sales invoice document\n                 page\n[SCENARIO #0009] Assign lookup value on sales credit memo document\n                 page\n[SCENARIO #0010] Assign lookup value on sales return order\n                 document page\n[SCENARIO #0011] Assign lookup value on blanket sales order\n                 document page\n```", "```\n [GIVEN] A lookup value\n```", "```\ntableextension 50001 \"SalesHeaderTableExt\" extends \"Sales Header\"\n{\n    fields\n    {\n        field(50000; \"Lookup Value Code\"; Code[10])\n        {\n            Caption = 'Lookup Value Code';\n            DataClassification = ToBeClassified;\n            TableRelation = \"LookupValue\";\n        }\n    }\n}\n```", "```\npageextension 50002 \"SalesOrderPageExt\" extends \"Sales Order\" \n{\n    layout\n    {\n        addlast(General)\n        {\n            field(\"Lookup Value Code\"; \"Lookup Value Code\")\n            {\n                 ToolTip = 'Specifies the lookup value the\n                                 transaction is done for.';\n                 ApplicationArea = All;\n            }\n        }\n    }\n}\n```", "```\ncodeunit 81001 \"LookupValue UT Sales Document\"\n{\n    Subtype = Test;\n    //[FEATURE] LookupValue UT Sales Document\n}\n```", "```\ncodeunit 81001 \"LookupValue UT Sales Document\"\n{\n    Subtype = Test;\n\n    //[FEATURE] LookupValue UT Sales Document\n\n    [Test]\n    procedure AssignLookupValueToSalesHeader()\n    begin\n        //[SCENARIO #0004] Assign lookup value to sales header\n        //                 page\n        //[GIVEN] A lookup value\n        //[GIVEN] A sales header\n        //[WHEN] Set lookup value on sales header\n        //[THEN] Sales header has lookup value code field\n        //       populated\n    end;\n\n    [Test]\n    procedure AssignLookupValueToSalesQuoteDocument()\n    begin\n        //[SCENARIO #0006] Assign lookup value on sales quote\n        //                 document page\n        //[GIVEN] A lookup value\n        //[GIVEN] A sales quote document page\n        //[WHEN] Set lookup value on sales quote document\n        //[THEN] Sales quote has lookup value code field populated\n    end;\n\n    [Test]\n    procedure AssignLookupValueToSalesOrderDocument()\n    begin\n        //[SCENARIO #0007] Assign lookup value on sales order\n        //                 document page\n        //[GIVEN] A lookup value\n        //[GIVEN] A sales order document page\n        //[WHEN] Set lookup value on sales order document\n        //[THEN] Sales order has lookup value code field populated\n    end;\n}\n```", "```\ncodeunit 81001 \"LookupValue UT Sales Document\"\n{\n    Subtype = Test;\n\n    //[FEATURE] LookupValue UT Sales Document\n\n    [Test]\n    procedure AssignLookupValueToSalesOrderDocument()\n    begin\n        //[SCENARIO #0007] Assign lookup value on sales order\n        //                 document page\n        //[GIVEN] A lookup value\n        CreateLookupValueCode();\n        //[GIVEN] A sales order document page\n        CreateSalesOrderDocument();\n        //[WHEN] Set lookup value on sales order document\n        SetLookupValueOnSalesOrderDocument();\n        //[THEN] Sales order has lookup value code field populated\n        VerifyLookupValueOnSalesHeader();\n    end;\n}\n```", "```\n[Test]\nprocedure AssignLookupValueToSalesOrderDocument()\nbegin\n    //[SCENARIO #0007] Assign lookup value on sales order\n    //                 document page\n    //[GIVEN] A lookup value\n    Initialize();\n    //[GIVEN] A sales order document page\n    CreateSalesOrderDocument();\n    //[WHEN] Set lookup value on sales order document\n    SetLookupValueOnSalesOrderDocument();\n    //[THEN] Sales order has lookup value code field populated\n    VerifyLookupValueOnSalesHeader();\nend;\n```", "```\nlocal procedure Initialize()\nbegin\n    if isInitialized then\n        exit;\n\n    LookupValueCode := CreateLookupValueCode();\n\n    isInitialized := true;\n    Commit();\nend;\n```", "```\ncodeunit 81001 \"LookupValue UT Sales Document\"\n{\n    Subtype = Test;\n\n    var\n        Assert: Codeunit Assert;\n        LibrarySales: Codeunit \"Library - Sales\";\n        isInitialized: Boolean;\n        LookupValueCode: Code[10];\n\n    //[FEATURE] LookupValue UT Sales Document\n\n    procedure AssignLookupValueToSalesOrderDocument()\n    var\n        SalesHeader: Record \"Sales Header\";\n        SalesDocument: TestPage \"Sales Order\";\n        DocumentNo: Code[20];\n    begin\n        //[SCENARIO #0007] Assign lookup value on sales order\n        //                 document page\n        //[GIVEN] A lookup value\n        Initialize();\n        //[GIVEN] A sales order document page\n        CreateSalesOrderDocument(SalesDocument);\n        //[WHEN] Set lookup value on sales order document\n        DocumentNo := SetLookupValueOnSalesOrderDocument(\n                        SalesDocument, LookupValueCode);\n        //[THEN] Sales order has lookup value code field populated\n        VerifyLookupValueOnSalesHeader(\n                SalesHeader.\"Document Type\"::Order,\n                DocumentNo,\n                LookupValueCode);\n    end;\n\n    local procedure Initialize()\n    begin\n        if isInitialized then\n            exit;\n\n        LookupValueCode := CreateLookupValueCode();\n\n        isInitialized := true;\n        Commit();\n    end;\n\n    local procedure CreateLookupValueCode(): Code[10]\n    begin\n        //for implementation see test example 1; this smells like\n        //duplication ;-)\n    end;\n\n    local procedure CreateSalesOrderDocument(\n                        var SalesDocument: TestPage \"Sales Order\")\n    begin\n        SalesDocument.OpenNew();\n    end;\n\n    local procedure SetLookupValueOnSalesOrderDocument(\n                        var SalesDocument: TestPage \"Sales Order\";\n                        LookupValueCode: Code[10])\n                            DocumentNo: Code[20]\n    begin\n        with SalesDocument do begin\n            //for rest of implementation see test example 1 \n        end;\n    end;\n\n    local procedure VerifyLookupValueOnSalesHeader(\n                        DocumentType: Option Quote,Order,Invoice,\n                                    \"Credit Memo\",\"Blanket Order\",\n                                    \"Return Order\";\n                        DocumentNo: Code[20];\n                        LookupValueCode: Code[10])\n    var\n        SalesHeader: Record \"Sales Header\";\n        FieldOnTableTxt: Label '%1 on %2';\n    begin\n        with SalesHeader do begin\n            Get(DocumentType, DocumentNo);\n            //for rest of implementation see test example 1 \n        end;\n    end;\n}\n```", "```\n[FEATURE] LookupValue Sales Archive\n\n[SCENARIO #0018] Archive sales order with lookup value\n[GIVEN] A sales order with a lookup value\n[WHEN] Sales order is archived\n[THEN] Archived sales order has lookup value from sales order\n\n[SCENARIO #0019] Archive sales quote with lookup value\n[GIVEN] A sales quote with a lookup value\n[WHEN] Sales quote is archived\n[THEN] Archived sales quote has lookup value from sales quote\n\n[SCENARIO #0020] Archive sales return order with lookup value\n[GIVEN] A sales return order with a lookup value\n[WHEN] Sales return order is archived\n[THEN] Archived sales return order has lookup value from sales return order\n```", "```\ntableextension 50009 \"SalesHeaderArchiveTableExt\"\n                            extends \"Sales Header Archive\"\n{\n    fields\n    {\n        field(50000; \"Lookup Value Code\"; Code[10])\n        {\n            Caption = 'Lookup Value Code';\n            DataClassification = ToBeClassified;\n            TableRelation = \"LookupValue\";\n        }\n    }\n}\n```", "```\npageextension 50042 \"SalesQuoteArchivePageExt\"\n                            extends \"Sales Quote Archive\"\n{\n    layout\n    {\n        addlast(General)\n        {\n            field(\"Lookup Value Code\"; \"Lookup Value Code\")\n            {\n                ToolTip = 'Specifies the lookup value the\n                                transaction is done for.';\n                ApplicationArea = All;\n            }\n        }\n    }\n}\n\npageextension 50045 \"SalesQuoteArchivesPageExt\"\n                            extends \"Sales Quote Archives\"\n{\n    layout\n    {\n        addfirst(Control1)\n        {\n            field(\"Lookup Value Code\"; \"Lookup Value Code\")\n            {\n                ToolTip = 'Specifies the lookup value the\n                                transaction is done for.';\n                ApplicationArea = All;\n            }\n        }\n    }\n}\n```", "```\ncodeunit 81004 \"LookupValue Sales Archive\"\n{\n    Subtype = Test;\n\n    //[FEATURE] LookupValue Sales Archive\n\n    [Test]\n    procedure ArchiveSalesOrderWithLookupValue();\n    begin\n        //[SCENARIO #0018] Archive sales order with lookup value\n        //[GIVEN] A sales order with a lookup value\n        CreateSalesOrderWithLookupValue();\n        //[WHEN] Sales order is archived\n        ArchiveSalesOrderDocument();\n        //[THEN] Archived sales order has lookup value from\n        //       sales order\n        VerifyLookupValueOnSalesOrderArchive();\n    end;\n\n    [Test]\n    procedure ArchiveSalesQuoteWithLookupValue();\n    begin\n        //[SCENARIO #0019] Archive sales quote with lookup value\n        //[GIVEN] A sales quote with a lookup value\n        CreateSalesQuoteWithLookupValue();\n        //[WHEN] Sales quote is archived\n        ArchiveQuoteDocument();\n        //[THEN] Archived sales quote has lookup value from\n        //       sales quote\n        VerifyLookupValueOnSalesQuoteArchive();\n    end;\n\n    [Test]\n    procedure ArchiveSalesReturnOrderWithLookupValue();\n    begin\n        //[SCENARIO #0020] Archive sales return order with lookup\n        //                 value\n        //[GIVEN] A sales return order with a lookup value\n        CreateSalesReturnOrderWithLookupValue();\n        //[WHEN] Sales return order is archived\n        ArchiveSalesReturnOrderDocument();\n        //[THEN] Archived sales return order has lookup value from\n        //       sales return order\n        VerifyLookupValueOnSalesReturnOrderArchive();\n    end;\n}\n```", "```\n[Test]\nprocedure ArchiveSalesDocumentWithLookupValue();\nbegin\n    //[SCENARIO #....] Archive sales document with lookup\n    //                 value\n    //[GIVEN] A sales document with a lookup value\n    CreateSalesDocumentWithLookupValue();\n    //[WHEN] Sales document is archived\n    ArchiveSalesDocumentDocument();\n    //[THEN] Archived sales document has lookup value from\n    //       sales document\n    VerifyLookupValueOnSalesDocumentArchive();\nend;\n```", "```\nlocal procedure ArchiveSalesDocumentWithLookupValue(\n                    DocumentType: Option\n                            Quote,Order,Invoice,\n                            \"Credit Memo\",\"Blanket Order\",\n                            \"Return Order\"): Code[20]\nvar\n    SalesHeader: record \"Sales Header\";\nbegin\n    //[GIVEN] A sales document with a lookup value\n    CreateSalesDocumentWithLookupValue(SalesHeader, DocumentType);\n    //[WHEN] Sales document is archived\n    ArchiveSalesDocument(SalesHeader);\n    //[THEN] Archived sales document has lookup value from sales\n    //       document\n    VerifyLookupValueOnSalesDocumentArchive(\n        DocumentType,\n        SalesHeader.\"No.\",\n        SalesHeader.\"Lookup Value Code\",\n        1);  // Used 1 for No. of Archived Versions\n    exit(SalesHeader.\"No.\")\nend;\n```", "```\n[Test]\nprocedure ArchiveSalesOrderWithLookupValue();\nvar\n    SalesHeader: record \"Sales Header\";\nbegin\n    //[SCENARIO #0018] Archive sales order with lookup value\n    ArchiveSalesDocumentWithLookupValue(\n        SalesHeader.\"Document Type\"::Order)\nend;\n\n[Test]\nprocedure ArchiveSalesQuoteWithLookupValue();\nvar\n    SalesHeader: record \"Sales Header\";\nbegin\n    //[SCENARIO #0019] Archive sales quote with lookup value\n    ArchiveSalesDocumentWithLookupValue(\n        SalesHeader.\"Document Type\"::Quote)\nend;\n\n[Test]\nprocedure ArchiveSalesReturnOrderWithLookupValue();\nvar\n    SalesHeader: record \"Sales Header\";\nbegin\n    //[SCENARIO #0020] Archive sales return order with lookup value\n    ArchiveSalesDocumentWithLookupValue(\n        SalesHeader.\"Document Type\"::\"Return Order\")\nend;\n```", "```\n[ConfirmHandler]\nprocedure ConfirmHandlerYes(Question: Text[1024]; var Reply: Boolean);\nbegin\n    Reply := true;\nend;\n\n[MessageHandler]\nprocedure MessageHandler(Message: Text[1024]);\nbegin\nend;\n```", "```\n[HandlerFunctions('ConfirmHandler,MessageHandler')]\n```", "```\n[Test]\n[HandlerFunctions('ConfirmHandler,MessageHandler')]\nprocedure ArchiveSalesOrderWithLookupValue();\nvar\n    SalesHeader: record \"Sales Header\";\nbegin\n    //[SCENARIO #0018] Archive sales order with lookup value\n    ArchiveSalesDocumentWithLookupValue(\n        SalesHeader.\"Document Type\"::Order)\nend;\n```", "```\n[FEATURE] LookupValue Inheritance [SCENARIO #0028] Create customer from configuration template with\n                  lookup value\n[GIVEN] A configuration template (customer) with lookup value\n[WHEN] Create customer from configuration template\n[THEN] Lookup value on customer is populated with lookup value of\n        configuration template\n```", "```\ncodeunit 81006 \"LookupValue Inheritance\"\n{\n    Subtype = Test;\n\n    [Test]\n    procedure\n        InheritLookupValueFromConfigurationTemplateToCustomer();\n    begin\n        //[SCENARIO #0028] Create customer from configuration\n        //                 template with lookup value\n        Initialize();\n        //[GIVEN] A configuration template (customer) with lookup\n        //        value\n        CreateCustomerConfigurationTemplateWithLookupValue();\n        //[WHEN] Create customer from configuration template\n        CreateCustomerFromConfigurationTemplate();\n        //[THEN] Lookup value on customer is populated with lookup\n        //       value of configuration template\n        VerifyLookupValueOnCustomer();\n    end;\n}\n```", "```\ncodeunit 81006 \"LookupValue Inheritance\"\n{\n    Subtype = Test;\n\n    [Test]\n    [HandlerFunctions('HandleConfigTemplates')]\n    procedure\n        InheritLookupValueFromConfigurationTemplateToCustomer();\n    var\n        CustomerNo: Code[20];\n        ConfigTemplateHeaderCode: Code[10];\n        LookupValueCode: Code[10];\n    begin\n        //[SCENARIO #0028] Create customer from configuration\n        //                 template with lookup value\n        Initialize();\n        //[GIVEN] A configuration template (customer) with lookup\n        //        value\n        ConfigTemplateHeaderCode :=\n               CreateCustomerConfigurationTemplateWithLookupValue(\n                   LookupValueCode);\n        //[WHEN] Create customer from configuration template\n        CustomerNo :=\n                CreateCustomerFromConfigurationTemplate(\n                        ConfigTemplateHeaderCode);\n        //[THEN] Lookup value on customer is populated with lookup\n        //       value of configuration template\n        VerifyLookupValueOnCustomer(CustomerNo, LookupValueCode);\n    end;\n}\n```", "```\nlocal procedure CreateCustomerConfigurationTemplateWithLookupValue(\n        LookupValueCode: Code[10]): Code[10]\n// Adopted from Codeunit 132213 Library - Small Business\nvar\n    ConfigTemplateHeader: record \"Config. Template Header\";\n    Customer: Record Customer;\nbegin\n    LibraryRapidStart.CreateConfigTemplateHeader(\n       ConfigTemplateHeader);\n    ConfigTemplateHeader.Validate(\"Table ID\", Database::Customer);\n    ConfigTemplateHeader.Modify(true);\n\n    LibrarySmallBusiness.CreateCustomerTemplateLine(\n        ConfigTemplateHeader,\n        Customer.FieldNo(\"Lookup Value Code\"),\n        Customer.FieldName(\"Lookup Value Code\"),\n        LookupValueCode);\n\n    exit(ConfigTemplateHeader.Code);\nend;\n\nlocal procedure CreateCustomerFromConfigurationTemplate(\n        ConfigurationTemplateCode: Code[10]) CustomerNo: Code[20]\nvar\n    CustomerCard: TestPage \"Customer Card\";\nbegin\n    CustomerCard.OpenNew();\n    CustomerNo := CustomerCard.\"No.\".Value();\n    CustomerCard.Close();\nend;\n\n[ModalPageHandler]\nprocedure HandleConfigTemplates(\n        var ConfigTemplates: TestPage \"Config Templates\")\nbegin\n    ConfigTemplates.GoToKey(\n        <provide the PK of the Config Template>);\n    ConfigTemplates.OK.Invoke();\nend;\n```", "```\nConfigTemplateCode :=\n       CreateCustomerConfigurationTemplateWithLookupValue(\n           LookupValueCode);\n```", "```\n//[GIVEN] A configuration template (customer) with lookup\n//        value\nConfigTemplateCode :=\n       CreateCustomerConfigurationTemplateWithLookupValue(\n           LookupValueCode);\n//[WHEN] Create customer from configuration template\nLibraryVariableStorage.Enqueue(ConfigTemplateCode);\nCustomerNo :=\n       CreateCustomerFromConfigurationTemplate(\n           ConfigTemplateCode);\n```", "```\n[ModalPageHandler]\nprocedure HandleConfigTemplates(\n        var ConfigTemplates: TestPage \"Config Templates\")\nvar\n    ConfigTemplateCode: Code[10];\n    \"Value\": Variant;\nbegin\n    LibraryVariableStorage.Dequeue(\"Value\");\n    ConfigTemplateCode:= \"Value\";\n\n    ConfigTemplates.GoToKey(ConfigTemplateCode);\n    ConfigTemplates.OK.Invoke();\nend;\n```", "```\nUnexpected CLR exception thrown.: Microsoft.Dynamics.Framework.UI.FormAbortException: Page New - Customer Card has to close ---> Microsoft.Dynamics.Nav.Types.Exceptions.NavTestRowNotFoundException: The row does not exist on the TestPage. ---> System.\n```"]