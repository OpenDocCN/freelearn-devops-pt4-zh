- en: From Customer Wish to Test Automation - Next Level
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从客户需求到测试自动化——下一步
- en: 'In the previous chapter, we built our first basic test automation in Dynamics
    365 Business Central. We looked at three simple examples that show how to apply
    the **Acceptance Test-Driven Development** (**ATDD**) test case pattern and our
    *4-steps recipe* to get customer wishes converted into an application and test
    code. In this chapter, we will use the same methodology to create some more tests
    that:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们构建了我们在Dynamics 365 Business Central中的第一个基础测试自动化。我们查看了三个简单的示例，展示了如何应用**验收测试驱动开发**（**ATDD**）测试用例模式，并使用我们的*4步法*将客户需求转化为应用程序和测试代码。在本章中，我们将使用相同的方法论创建更多的测试，这些测试：
- en: Use a shared fixture
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用共享固定设施
- en: Are parametrized
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是参数化的
- en: Hand over variables to UI handlers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将变量交给UI处理器
- en: Sales documents, customer template, and warehouse shipment
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 销售文档、客户模板和仓库发货
- en: With the three examples of [Chapter 5](56634efe-664c-421a-9582-b2a6ae69722a.xhtml), *From
    Customer Wish to Test Automation - The Basics*, we added the `Lookup Value Code`
    field to the `Customer` table. However, that's just a part of the customer wish
    as it describes clearly that…
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](56634efe-664c-421a-9582-b2a6ae69722a.xhtml)《从客户需求到测试自动化——基础》中的三个例子中，我们将`Lookup
    Value Code`字段添加到`Customer`表中。 然而，这只是客户需求的一部分，因为它明确描述了……
- en: '"… this field has to be carried over to the whole bunch of sales documents
    and, at the same time, it needs to be included in the warehouse shipping."'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '"……这个字段必须传递到所有销售文档，并且同时需要包含在仓库发货中。"'
- en: So, before we dive into the following test examples, a note needs to be made
    that, parallel to the implementation of the `Lookup Value Code` field on the `Customer`
    table, the same field has to be implemented on the `Sales Header` table, the `Customer
    Template` table, the `Warehouse Shipment Line` table, and all related pages. The
    ATDD test case descriptions are very much alike, and this will be the same case
    for the application and test code. Copy and paste—the great virtue of any Business
    Central developer.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在深入以下测试示例之前，需要注意的是，在`Customer`表上实现`Lookup Value Code`字段的同时，必须在`Sales Header`表、`Customer
    Template`表、`Warehouse Shipment Line`表以及所有相关页面上实现相同的字段。ATDD测试用例描述非常相似，应用程序和测试代码也是如此。复制和粘贴——任何Business
    Central开发人员的伟大美德。
- en: 'Let’s have a look at how the ATDD test case descriptions do look like for customer
    template:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看客户模板的ATDD测试用例描述是什么样的：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Do you see the resemblance with scenarios `#0001`, `#0002`, and `#0003`?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否看到了与场景`#0001`、`#0002`和`#0003`的相似性？
- en: On GitHub, you will find both the full list of ATDD scenarios and the complete
    test code.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub上，你将找到完整的ATDD场景列表和完整的测试代码。
- en: Test example 4 – how to set up a shared fixture
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试示例4——如何设置共享固定设施
- en: Although it isn't explicitly mentioned, we created a *fresh fixture* for each
    of the three previous tests as defined per the `[GIVEN]` tags, being a lookup
    value record and a customer record. For speed purposes, however, it does make
    sense to consider whether you need a fresh fixture for each test or a shared fixture
    for a group of tests. In the case of scenarios `#0001` and `#0003`, we could perfectly
    do with the same `LookupValueCode`, no need to create a new lookup value record
    for each of these tests.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然没有明确提到，但我们为前面三个测试每个都创建了一个*全新的固定设施*，根据`[GIVEN]`标签定义，为每个创建了一个查找值记录和一个客户记录。然而，为了提高速度，确实有必要考虑你是否需要为每个测试创建一个全新的固定设施，还是可以为一组测试使用共享固定设施。就`#0001`和`#0003`这两个场景而言，我们完全可以使用相同的`LookupValueCode`，不需要为每个测试创建新的查找值记录。
- en: Customer wish
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户需求
- en: 'Let''s use the part of the customer wish that prescribes to have a `Lookup
    Value Code` field on all sales documents to illustrate how a shared fixture can
    be achieved. This would come down to the following eight scenarios, leaving out
    the `GIVEN`-`WHEN`-`THEN` part to save space:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用客户需求中要求所有销售文档都具有`Lookup Value Code`字段的部分，来说明如何实现共享的固定设施。这将归结为以下八个场景，省略`GIVEN`-`WHEN`-`THEN`部分以节省空间：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With [Chapter 5](56634efe-664c-421a-9582-b2a6ae69722a.xhtml),* From Customer
    Wish to Test Automation – The Basics*, fresh in your mind, you might notice that
    scenario `#0001` and `#0004` are quite similar. This is the same for scenario
    `#0003` and `#0006` through `#0011`. As such, all of these scenarios share the
    following same `[GIVEN]` part:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第5章](56634efe-664c-421a-9582-b2a6ae69722a.xhtml)《从客户需求到测试自动化——基础》还历历在目时，你可能会注意到，场景`#0001`和`#0004`非常相似。场景`#0003`和`#0006`至`#0011`也是如此。因此，所有这些场景都共享以下相同的`[GIVEN]`部分：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Straightforward implementation of this requirement would lead to creating a
    lookup value record seven times. So, we'll be lazy and apply the shared fixture,
    or lazy setup, pattern.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个需求的直接实现将导致创建七次查找值记录。因此，我们将采取懒汉式的共享夹具模式或懒惰设置模式。
- en: Application code
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序代码
- en: This part of the customer wish leads to the implementation of the `Lookup Value
    Code` field on the sales header, and a page control for this field on each of
    the sales document pages.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分客户需求导致了`销售头`中的`Lookup Value Code`字段的实现，并在每个销售文档页面上创建了该字段的页面控制。
- en: 'The next code snippet implements the extension of the `Sales Header` table,
    that is, scenarios `#0004` and `#0005`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个代码片段实现了`销售头`表的扩展，也就是场景`#0004`和`#0005`：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Furthermore, the following code block will implement the extension of the `Sales
    Order` page (see scenario `#0007`):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，以下代码块将实现`销售订单`页面的扩展（参见场景`#0007`）：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Scenarios `#0006`, `#0008`, `#0009`, `#0010`, and `#0011` would lead in a similar
    manner to the extension of the `Sales Quote`, `Sales Invoice`, `Sales Credit Memo`,
    `Sales Return Order`, and `Blanket Sales Order` document pages.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 场景`#0006`、`#0008`、`#0009`、`#0010`和`#0011`会以类似的方式扩展`销售报价`、`销售发票`、`销售贷项通知单`、`销售退货订单`和`长期销售订单`文档页面。
- en: Test Code
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试代码
- en: With some big steps, we'll create our test code for scenarios `#0004`, `#0006`,
    and `#0007`, leaving scenarios `#0005`, `#0008`, `#0009`, `#0010`, and `#0011`
    for you to review on GitHub.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一些大的步骤，我们将为场景`#0004`、`#0006`和`#0007`创建测试代码，其余场景`#0005`、`#0008`、`#0009`、`#0010`和`#0011`留给你在GitHub上复习。
- en: Create a test codeunit
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个测试代码单元
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Embed the customer wish into a test function
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将客户需求嵌入到测试函数中
- en: 'Embedding the three scenarios, `#0004`, `#0006`, and `#0007`, into test functions
    makes our new test codeunit look as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 将三个场景`#0004`、`#0006`和`#0007`嵌入到测试函数中后，我们的新测试代码单元如下所示：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Write your test story
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写测试故事
- en: 'Now that the structure is clear, we can pick out scenario `#0007` to create
    more detail:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在结构已明确，我们可以选择场景`#0007`来创建更多细节：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'So, how do we go about setting up the shared fixture? We do this by using the
    `Initialize` function, as introduced in [Chapter 4](db955f66-11f4-4d9a-90c7-5af04058ebbe.xhtml),
    *Test Design*. This would change `AssignLookupValueToSalesOrderDocument` into
    the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何设置共享的夹具呢？我们通过使用`Initialize`函数来实现，如[第4章](db955f66-11f4-4d9a-90c7-5af04058ebbe.xhtml)《测试设计》中所介绍的。这将把`AssignLookupValueToSalesOrderDocument`改为如下：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Construct the real code
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建实际代码
- en: 'Let''s build a simple `Initialize`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个简单的`Initialize`：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, both `isInitialized` and `LookupValueCode` are global variables of respectively
    `Boolean` and `Code[10]` data types. Once `Initialize` has been called, `isInitialized`
    will be `true` and the `if`-statement will evaluate to `true` any time `Initialize`
    is being called, always leading to a straight exit from `Initialize`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`isInitialized`和`LookupValueCode`分别是`Boolean`和`Code[10]`数据类型的全局变量。一旦调用了`Initialize`，`isInitialized`将变为`true`，并且每次调用`Initialize`时，`if`语句都会评估为`true`，始终直接退出`Initialize`。
- en: 'With respect to scenario `#0007`, our test codeunit would become as follows,
    including the various variables, parameters, and other helper functions:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 关于场景`#0007`，我们的测试代码单元将如下所示，包括各种变量、参数和其他辅助函数：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Test execution
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试执行
- en: 'Running a full-fledged codeunit 81001 yields a bunch of successes:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 运行完整的代码单元81001会产生一系列成功：
- en: '![](img/1d92a997-0fcd-4fad-a2b6-9dd9f9bc234f.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1d92a997-0fcd-4fad-a2b6-9dd9f9bc234f.png)'
- en: Test the test
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试测试
- en: 'By now, I guess you know what to do here: adjust the test so the verification
    errs. Give it a try, or use the completed code on GitHub as your cheat sheet.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，我猜你已经知道该怎么做了：调整测试，使验证出现错误。试试看，或者使用GitHub上的完成代码作为备忘单。
- en: Test example 5 – how to parametrize tests
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试示例5——如何参数化测试
- en: Writing test automation, including design and coding, is a considerable effort,
    which has a lot of details to pay attention to. However, once you've got the hang
    of it and have it in place, you will enjoy it and continue to profit from it.
    This is the case unless you're sloppy on the details at both the design and coding
    levels, and thus have to keep fixing your tests. Nevertheless, you will enjoy
    writing even more if you make your tests generic by parameterizing them. By the
    nature of the testability framework, you will not be able to parametrize a test
    function, but you can achieve this by encapsulating your generic test code in
    a helper function.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 编写测试自动化，包括设计和编码，是一项相当大的工作，需要关注很多细节。然而，一旦你掌握了并且将其完成，你会享受它并从中受益。除非你在设计和编码阶段疏忽细节，导致不得不不断修复测试，否则你会更享受编写测试。如果你通过参数化测试来使测试更通用，你会更加喜欢编写测试。由于测试框架的性质，你无法直接参数化测试函数，但你可以通过将通用测试代码封装在辅助函数中来实现这一点。
- en: Customer wish
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户需求
- en: 'Let''s illustrate this with another part of our customer''s wish: archiving
    a sales document. As Business Central enables the user to archive a sales quote,
    a sales order, and a sales return order, we have to include this in our extension.
    This is expressed in the following three scenarios:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过另一个客户需求来说明：归档销售文档。由于Business Central允许用户归档销售报价单、销售订单和销售退货订单，因此我们需要将其包含在扩展中。以下是这三个场景的表达：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Application code
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用代码
- en: 'The data model extension is implemented by the following `.al` object:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 数据模型扩展由以下`.al`对象实现：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'And the UI is extended subsequently as follows for scenario `#0019`. It will
    look very much alike for scenarios `#0018` and `#0020`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，UI根据场景`#0019`进行了扩展。场景`#0018`和`#0020`也将非常相似：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Test code
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试代码
- en: Now that the app code has set lets have a look at the test code.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应用程序代码已设置好，接下来我们来看一下测试代码。
- en: Create, embed, and write
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建、嵌入并编写
- en: 'With one big step of "creating, embedding and writing" this is how the test
    stories `#0018`, `#0019`, and `#0020` could look like, when placed in a new test
    codeunit:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通过“创建、嵌入和编写”这一大步骤，测试故事`#0018`、`#0019`和`#0020`可能如下所示，当它们被放入新的测试代码单元中：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Construct the real code
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建真实代码
- en: 'When all three scenarios are testing the process of archiving a sales document,
    they boil down to a generic story with only one variable being the document type—quote,
    order, or return order. Consequently, we can thicken this into one test story:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当三个场景都在测试归档销售文档的过程时，它们归结为一个通用故事，唯一的变量是文档类型——报价单、订单或退货订单。因此，我们可以将其浓缩成一个测试故事：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As said, we cannot parametrize a `test` function, but we can cast this into
    a local method to be called from the three tests:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们无法参数化`test`函数，但我们可以将其转化为一个本地方法，从三个测试中调用该方法：
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The three tests will then become:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个测试将变为：
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Copy and paste: three birds in one stroke.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 复制并粘贴：一举三得。
- en: Go to GitHub to have a look at the implementation of the other helper functions
    and an additional scenario, `#00021`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 前往GitHub查看其他辅助函数的实现以及额外的场景`#00021`。
- en: Test execution
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试执行
- en: 'Show me the green successes:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 给我看看绿色的成功：
- en: '![](img/dbb328b0-9275-4e1a-92e8-56e3e90b98c5.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dbb328b0-9275-4e1a-92e8-56e3e90b98c5.png)'
- en: Ouch ...... RED?
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀...... 红色？
- en: Apparently, as the test errors indicate in Test Tool, we need to handle a `Confirm`.
    Let's go into the application and try to archive a sales order.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，正如测试工具中的测试错误所指示的，我们需要处理一个`Confirm`。让我们进入应用程序，尝试归档一个销售订单。
- en: 'To accomplish this take the following steps:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，请按以下步骤操作：
- en: Use *Alt* + *Q*, the Tell Me What You Want feature
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*Alt* + *Q*，即“告诉我你想要什么”功能
- en: Type `Sales Orders` and select the Sales Orders hyperlink to open the `Sales
    Orders` page
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`Sales Orders`并选择“销售订单”超链接，打开`Sales Orders`页面
- en: Open the document page of the first sales order
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开第一个销售订单的文档页面
- en: Select Actions | Functions | Archive Document
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择操作 | 功能 | 归档文档
- en: 'Indeed, a dialog appears here asking the user to confirm (or not):'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，这里会弹出一个对话框，要求用户确认（或不确认）：
- en: '![](img/9b476d1b-f990-4a2b-bf29-fd6a38d16317.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9b476d1b-f990-4a2b-bf29-fd6a38d16317.png)'
- en: 'See what happens when we click Yes in the confirm dialog: a message appears
    informing the user that the document has been archived, as shown in the following
    screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 看看当我们在确认对话框中点击“是”时会发生什么：会出现一条消息，告知用户文档已被归档，如下图所示：
- en: '![](img/043f228f-2772-456d-86c4-ca7916b6aaef.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/043f228f-2772-456d-86c4-ca7916b6aaef.png)'
- en: 'Once the user clicks OK in the message dialog, the archiving of the document
    is complete. With respect to our test automation, we need to create two handler
    functions—one handler function to handle the confirm dialog, and the other to
    handle the message, as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户在消息对话框中点击“确定”，文档的归档就完成了。对于我们的测试自动化，我们需要创建两个处理程序函数——一个处理确认对话框，另一个处理消息，如下所示：
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Both the handlers are minimally implemented; they will just handle the dialogs
    and not check anything. I will elaborate on that some more in the next example.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 两个处理程序实现得很简单；它们只会处理对话框，而不会检查任何内容。我将在下一个示例中对此做更详细的说明。
- en: 'Link them to our tests using the `HandlerFunctions` tag:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`HandlerFunctions`标签将它们链接到我们的测试：
- en: '[PRE19]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The test codeunit for scenario `#0018` will then become:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 场景`#0018`的测试代码单元将变成：
- en: '[PRE20]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, run it again! Do show us the green, please:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，再次运行它！请展示给我们绿色的结果：
- en: '![](img/3c67e45c-c8fc-47ec-ad04-91fe40430c82.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c67e45c-c8fc-47ec-ad04-91fe40430c82.png)'
- en: Test the test
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试测试
- en: You know what to do. Yes, you do, right?
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道该怎么做。是的，你知道，对吧？
- en: A missing scenario?
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 漏掉的场景？
- en: 'One of the great reviewers of this book, Steven Renders, pointed out to me
    that there is a hole in the scenarios for the customer wish that, when archiving
    a sales document, the lookup value should be carried over to the archived sales
    document. Before I step into the specifics, this a perfect illustration of what
    I already mentioned in [Chapter 4](db955f66-11f4-4d9a-90c7-5af04058ebbe.xhtml),
    *Test Design*: "a test design is an object to help the team discuss their test
    effort, to reveal the holes in their thoughts…"'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的一位重要评审者 Steven Renders 提醒我，客户需求的场景中存在一个空白，即在归档销售单据时，查找值应该被传递到归档后的销售单据中。在我进入具体细节之前，这正好是我在[第4章](db955f66-11f4-4d9a-90c7-5af04058ebbe.xhtml)中提到的一个完美例子，*测试设计*：“测试设计是一个帮助团队讨论他们测试工作、揭示思维漏洞的工具……”
- en: So, what is this hole? If you have a confirmation, asking the user for a Yes
    or No, there are at least two scenarios that need to be tested, and my scenarios
    only handles the Yes. So, what about the No? This indeed is a user scenario as
    such, but I do not consider it a scenario to be tested within the context of our
    customer wish. It is a scenario that relates to the bigger feature of archiving
    sales documents. As such, this scenario was not added to our collection on the
    assumption that this is handled by standard tests.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这个空白是什么？如果你有一个确认对话框，询问用户是否选择“是”或“否”，那么至少有两个场景需要测试，而我的场景只处理“是”。那么，“否”呢？这确实是一个用户场景，但我不认为它是我们客户需求范围内需要测试的场景。它是一个与归档销售单据的大功能相关的场景。因此，我们没有将此场景添加到我们的集合中，假设这将通过标准测试来处理。
- en: Nevertheless, in any future project be triggered when confirm statements are
    used, as in principle, these lead to at least two scenarios.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在未来的任何项目中，只要使用确认语句时都会触发它们，因为原则上，这些语句至少会导致两个场景。
- en: Test example 6 – how to hand over data to UI handlers
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试示例 6 – 如何将数据交给 UI 处理程序
- en: Just now, with the previous test example where we hit upon the need for two
    dialog handlers, it makes sense to discuss how to hand over data to a UI handler,
    as we cannot directly control this. However, the platform does, and the argument
    list is a fixed one.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 就像之前的测试示例中，我们遇到了需要两个对话框处理程序的情况，现在有必要讨论如何将数据交给 UI 处理程序，因为我们无法直接控制它。然而，平台是可以控制的，而且参数列表是固定的。
- en: Customer wish
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户需求
- en: 'In this context, we pick up another part of our customer wish—when creating
    a new customer from the UI, by clicking the standard New action on the ribbon,
    the user has to select a template to base the new customer on (or simply bypass
    it by selecting Cancel), as shown in this screenshot:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个上下文中，我们提取了客户需求的另一部分——当通过点击功能区上的标准“新建”操作创建新客户时，用户必须选择一个模板来基于该模板创建新客户（或者通过选择“取消”来绕过此步骤），如下图所示：
- en: '![](img/50b3e26d-4519-4cbb-b764-830f685f9c71.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50b3e26d-4519-4cbb-b764-830f685f9c71.png)'
- en: We've had to tackle the appearance of the ModalPage already in test example
    3 of the previous chapter. This part of the customer wish tells us that the configuration
    template that's behind the templates the user can choose should be set up, so
    that it will autopopulate the `Lookup Value Code` field on the newly created customer
    from the selected template.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在上一章的测试示例 3 中处理过 ModalPage 的显示。客户需求的这一部分告诉我们，用户可以选择的模板背后应该设置好配置模板，以便它会自动填充新创建客户的`查找值代码`字段。
- en: 'This is what scenario `#0028` entails:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是场景`#0028`的内容：
- en: '[PRE21]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We can accomplish this by setting up a configuration template. There is no need
    for any application code.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过设置配置模板来实现这一点。无需任何应用程序代码。
- en: Test code
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试代码
- en: Let's wrap scenario `#0028` in a new test codeunit.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将场景`#0028`包装在一个新的测试代码单元中。
- en: Create, embed, and write
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建、嵌入并写入
- en: 'This leads to the following code construction:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致以下代码构建：
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Construct the real code
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建实际代码
- en: 'Including all technical details, like variables and arguments, this codeunit
    would become:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 包括所有技术细节，如变量和参数，这个代码单元将变成：
- en: '[PRE23]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We need to create the following four helper functions and one UI handler:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建以下四个辅助函数和一个UI处理程序：
- en: '`Initialize`'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Initialize`'
- en: '`CreateCustomerConfigurationTemplateWithLookupValue`'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CreateCustomerConfigurationTemplateWithLookupValue`'
- en: '`CreateCustomerFromConfigurationTemplate`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CreateCustomerFromConfigurationTemplate`'
- en: '`VerifyLookupValueOnCustomer`'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VerifyLookupValueOnCustomer`'
- en: '`HandleConfigTemplates`'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HandleConfigTemplates`'
- en: 'Two of the five procedures needed can be *inherited* from earlier test examples:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的五个过程中的两个可以*继承*自早期的测试示例：
- en: '`Initialize` takes care of the Lookup Value and can be copied from test example
    4'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Initialize`负责处理Lookup值，可以从测试示例4中复制'
- en: '`VerifyLookupValueOnCustomer` can be taken from test example 1'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VerifyLookupValueOnCustomer`可以从测试示例1中获取'
- en: 'The other three functions, `CreateCustomerConfigurationTemplateWithLookupValue`,
    `CreateCustomerFromConfigurationTemplate`, and `HandleConfigTemplates`, will be
    as follows. The function names describe exactly what the function is doing. I
    will leave it you to read and grasp the meaning of the first two. In the context
    of this test example we will elaborate more on `HandleConfigTemplates`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 另外三个函数，`CreateCustomerConfigurationTemplateWithLookupValue`、`CreateCustomerFromConfigurationTemplate`和`HandleConfigTemplates`，将如下所示。函数名称准确地描述了该函数的作用。我会让你自己阅读并理解前两个函数的含义。在这个测试示例中，我们将更多地阐述`HandleConfigTemplates`：
- en: '[PRE24]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: As soon as a new customer card is created in `CreateCustomerFromConfigurationTemplate`,
    the `Config Templates` page needs to be handled by the ModalPageHandler `HandleConfigTemplates`.
    Out of the list of configuration templates, it should select the configuration
    template created by `CreateCustomerConfigurationTemplateWithLookupValue`. With
    the `GoToKey` method of a TestPage, we can achieve this, but it needs to provide
    the PK value of the template, as marked by the triangular brackets in the preceding
    code.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在`CreateCustomerFromConfigurationTemplate`中创建了新的客户卡片，就需要通过`ModalPageHandler`的`HandleConfigTemplates`来处理`Config
    Templates`页面。在配置模板列表中，它应该选择由`CreateCustomerConfigurationTemplateWithLookupValue`创建的配置模板。通过`TestPage`的`GoToKey`方法，我们可以实现这一点，但需要提供模板的PK值，如前面代码中的三角括号所标注的。
- en: 'A straightforward solution would be to create a global variable called `ConfigTemplateCode`,
    which would be populated in the `[GIVEN]` part of our test, as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的解决方案是创建一个名为`ConfigTemplateCode`的全局变量，并在我们的测试的`[GIVEN]`部分填充它，如下所示：
- en: '[PRE25]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This would successively be picked up by our `ModalPageHandler`. This would undoubtedly
    be a perfectly valid solution. But picture yourself having to hand over multiple
    different values of different data types in one test codeunit, stacking global
    variable upon global variable. To overcome this, Microsoft has provided us with
    a neat feature implemented in the codeunit, `Library - Variable Storage`. It consists
    of a queue of 25 variant elements. Using `Enqueue` and `Dequeue`, you can store
    and retrieve your variable in a first in, first out manner.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这将依次被我们的`ModalPageHandler`捕获。这无疑是一个完全有效的解决方案。但想象一下，你不得不在一个测试代码单元中传递多个不同类型的数据值，不断堆叠全局变量。为了解决这个问题，微软为我们提供了一个很棒的功能，在代码单元中实现了`Library
    - Variable Storage`。它由一个包含25个变体元素的队列组成。通过使用`Enqueue`和`Dequeue`，你可以以先进先出的方式存储和检索变量。
- en: Enqueue
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Enqueue
- en: 'Call `Enqueue` in your test code before the handler is triggered, as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理程序触发之前，在测试代码中调用`Enqueue`，如下所示：
- en: '[PRE26]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Dequeue
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dequeue
- en: 'In the handler, call `Dequeue` to retrieve the variable, as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理程序中，调用`Dequeue`来检索变量，如下所示：
- en: '[PRE27]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Test execution
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试执行
- en: 'Fingers crossed for green results:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 祈祷结果是绿色的：
- en: '![](img/e8a6f37d-a354-4b90-9518-8350b2e1af54.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e8a6f37d-a354-4b90-9518-8350b2e1af54.png)'
- en: Success! Notice the first test function line of codeunit `81006`, `LookupValue
    Inheritance`, containing another scenario, `#0024`, implemented by test function
    `InheritLookupValueFromCustomerOnSalesDocument`.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 成功！注意代码单元`81006`的第一行测试函数`LookupValue Inheritance`，它包含另一个场景`#0024`，由测试函数`InheritLookupValueFromCustomerOnSalesDocument`实现。
- en: Test the test
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试测试
- en: By now, you know how to adjust a test so the verification errs. But does the
    queue do its job right? How about enqueuing a none existing configuration template
    code? Let's randomly choose one—`LUC`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经知道如何调整测试以便让验证失败。但是队列能否正确执行它的任务呢？试试将一个不存在的配置模板代码加入队列怎么样？我们随便选一个—`LUC`。
- en: 'Running the test now throws the following error:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行测试会抛出以下错误：
- en: '[PRE28]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '![](img/369bccd4-6217-4849-be30-e6c0254f08e8.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/369bccd4-6217-4849-be30-e6c0254f08e8.png)'
- en: The error message does not mention the row key value, but it surely lets us
    know that it cannot find the row the test wants to be selected—`LUC`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 错误消息没有提到行键值，但它明确告诉我们无法找到测试想要选择的行—`LUC`。
- en: Summary
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: By building three more test examples, we learned how to set up a shared fixture,
    how to parametrize tests, and how to hand over variables to UI handlers. These
    are three techniques that will be of invaluable worth in your future test automation
    practices.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 通过构建三个额外的测试示例，我们学习了如何设置共享固定装置、如何参数化测试，以及如何将变量传递给UI处理程序。这三项技术将在你未来的测试自动化实践中具有无价的价值。
- en: In the next chapter, we will add two more *tools* to your test toolkit. You
    will learn how to test a report dataset and how to workout a more complex scenario.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将向你的测试工具包中添加两个*工具*。你将学习如何测试报告数据集以及如何处理更复杂的场景。
