["```\nLookup Value Code must have a value in Sales Header: Document Type=Invoice, No.=1004\\. It cannot be zero or empty.\n\nAssert.ExpectedError failed. Expected: . Actual: Lookup Value Code must have a value in Sales Header: Document Type=Order, No.=1001\\. It cannot be zero or empty.\n\nAssert.ExpectedError failed. Expected: The total amount for the invoice must be 0 or greater.. Actual: Lookup Value Code must have a value in Sales Header: Document Type=Order, No.=1001\\. It cannot be zero or empty.\n```", "```\ncodeunit 80050 \"Library - Sales Events\"\n{\n    [EventSubscriber(ObjectType::Codeunit,\n       Codeunit::\"Library - Sales\", 'OnAfterCreateCustomer',\n        '', false, false)]\n    local procedure OnAfterCreateCustomerEvent(\n                        var Customer: Record Customer)\n    begin\n        SetLookupValueOnCustomer(Customer);\n    end;\n\n    local procedure SetLookupValueOnCustomer(\n                        var Customer: record Customer)\n    var\n        LibraryLookupValue: Codeunit \"Library - Lookup Value\";\n    begin\n        with Customer do begin\n            Validate(\"Lookup Value Code\",\n                LibraryLookupValue.CreateLookupValueCode());\n            Modify();\n        end;\n    end;\n}\n```", "```\nlocal Initialize()\n// Generic Fresh Setup\nLibraryTestInitialize.OnTestInitialize(<codeunit id>);\n<generic fresh data initialization>\n\n// Lazy Setup\nif isInitialized then\n  exit();\n\nLibraryTestInitialize.OnBeforeTestSuiteInitialize(<codeunit id>);\n<shared data initialization>\nInitialized := true;\nCommit();\nLibraryTestInitialize.OnAfterTestSuiteInitialize(<codeunit id>);\n```", "```\ncodeunit 80051 \"Library - Initialize\"\n{\n    [EventSubscriber(ObjectType::Codeunit,\n         Codeunit::\"Library - Test Initialize\",\n         'OnBeforeTestSuiteInitialize','', false, false)]\n    local procedure OnBeforeTestSuiteInitializeEvent(\n             CallerCodeunitID: Integer)\n    begin\n        Initialize(CallerCodeunitID);\n    end;\n\n    local procedure Initialize(CallerCodeunitID: Integer)\n    var\n        LibraryLookupValue: Codeunit \"Library - Lookup Value\";\n        LibrarySetup: Codeunit \"Library - Setup\";\n    begin\n        case CallerCodeunitID of\n            Codeunit::\"ERM Fixed Assets Journal\",\n            Codeunit::\"ERM Fixed Assets GL Journal\":\n                LibrarySetup.UpdateCustomers(\n                  LibraryLookupValue.CreateLookupValueCode());\n            Codeunit::\"Service Order Release\":\n                LibrarySetup.UpdateSalesHeader(\n                  LibraryLookupValue.CreateLookupValueCode());\n            Codeunit::\"Sales E2E\":\n                LibrarySetup.UpdateCustomerTemplates(\n                  LibraryLookupValue.CreateLookupValueCode());\n        end;\n    end;\n}\n```", "```\nMicrosoft.Dynamics.Nav.Types.Exceptions.NavNCLAssertErrorException: An error was expected inside an ASSERTERROR statement.\\   at Microsoft.Dynamics.Nav.Runtime.NavMethodScope.AssertError(Action body)\\   at Microsoft.Dynamics.Nav.BusinessApplication.C\n```", "```\nprocedure PostSalesOrderWithNoLookupValue();\n//[FEATURE] LookupValue Posting Sales Document\nvar\n    SalesHeader: Record \"Sales Header\";\n    PostedSaleInvoiceNo: Code[20];\n    SalesShipmentNo: Code[20];\nbegin\n    //[SCENARIO #0027] Check posting throws error on sales\n    //                 order with empty lookup value\n    Initialize();\n\n    //[GIVEN] A sales order without a lookup value\n    CreateSalesOrder(SalesHeader, UseNoLookupValue());\n    //[WHEN] Sales order is posted (invoice & ship)\n    asserterror PostSalesDocument(\n                    SalesHeader,\n                    PostedSaleInvoiceNo,\n                    SalesShipmentNo);\n    //[THEN] Missing lookup value on sales order error thrown\n    VerifyMissingLookupValueOnSalesOrderError(SalesHeader);\nend;\n```", "```\n[EventSubscriber(ObjectType::Codeunit,\n    Codeunit::\"Library - Sales\", 'OnAfterCreateCustomer',\n    '', false, false)]\nlocal procedure OnAfterCreateCustomerEvent(\n                    var Customer: Record Customer)\nvar\n    LibraryTestsSetup: Codeunit \"Library - Tests Setup\";\nbegin\n    if LibraryTestsSetup.SkipOnAfterCreateCustomer() then\n        exit;\n\n    SetLookupValueOnCustomer(Customer);\nend;\n```", "```\nprocedure SkipOnAfterCreateCustomer(): Boolean\nvar\n    TestsSetup: Record TestsSetup;\nbegin\n    with TestsSetup do begin\n        Get();\n        exit(\"Skip OnAfterCreateCustomer\");\n    end;\nend;\n```", "```\nlocal procedure Initialize()\nvar\n    LibraryTestsSetup: Codeunit \"Library - Tests Setup\";\nbegin\n    if isInitialized then\n        exit;\n    LibraryTestsSetup.SetSkipOnAfterCreateCustomer(true);\n    LocationSetup();\n\n    isInitialized := true;\n    Commit();\nend;\n```"]