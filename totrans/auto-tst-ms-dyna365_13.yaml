- en: Getting Business Central Standard Tests Working on Your Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让 Business Central 标准测试在你的代码中运行
- en: 'Now you know how to write your automated tests and have integrated them in
    your daily development practice, how could you also take profit from this humongous
    collateral of tests Microsoft have provided? This chapter shows you how to add
    them to your own collateral. We''ll discuss:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道如何编写自动化测试，并且已经将其集成到日常开发实践中，你如何从微软提供的庞大测试文档中受益呢？本章将展示如何将这些测试添加到你自己的文档中。我们将讨论：
- en: Why to use the standard tests
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么使用标准测试
- en: Executing standard tests
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行标准测试
- en: Fixing failing standard tests
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复失败的标准测试
- en: Making your code testable
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使你的代码可测试
- en: Why use the standard tests?
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么使用标准测试？
- en: Ever since they introduced the testability framework in 2009, Microsoft have
    been building on their application test collateral. As already pointed out in
    [Chapter 3](fdf2b65f-be7c-4710-a3a9-39f4cc34ee5c.xhtml), *The Test Tool and Standard
    Tests*, it contains an immense number of tests. These tests cover the whole standard
    application, from financial management, sales and purchase, through warehouse
    and manufacturing, to service management. With every major release or cumulative
    update, new tests have been and will continue to be added to cover new features
    and recent bug fixes. Years of work we all can profit from. If your code extends
    the standard application, what will be the impact of it on the standard application?
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 自从2009年引入可测试性框架以来，微软一直在构建其应用程序测试文档。正如[第3章](fdf2b65f-be7c-4710-a3a9-39f4cc34ee5c.xhtml)中已经提到的，*测试工具与标准测试*，它包含了大量的测试。这些测试涵盖了整个标准应用程序，从财务管理、销售和采购，到仓库和制造，再到服务管理。每次主要发布或累积更新时，都会添加新的测试，以覆盖新功能和最近的
    bug 修复。这是我们所有人都可以受益的多年工作。如果你的代码扩展了标准应用程序，这对标准应用程序会有什么影响？
- en: You could go about writing your own tests. You could also choose to run the
    standard tests and see the results. And, of course, in the end, you could do both,
    as your extension most probably will not only change standard behavior, but also
    add new functionality not covered by any test in the Microsoft collateral.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择编写你自己的测试，也可以选择运行标准测试并查看结果。当然，最终你也可以两者兼顾，因为你的扩展很可能不仅会改变标准行为，还会增加微软文档中没有覆盖的新的功能。
- en: 'We could discuss a lot and bang each other''s heads on the validity of running
    the Microsoft tests, but instead we could just as well run them and see if our
    code makes the standard tests fail. This is exactly what I did years ago as my
    first step in structurally picking up test automation for Business Central. Those
    that have been following my blog might recall that, some years ago, I dedicated
    a post on this called *How-to: Run Standard Tests against Your Code*. As the title
    clearly unveils, it discusses the steps to take to get the standard tests run
    on your solution. Go there, read it, execute, and examine the results. There is
    little or no reason not to do this. Within 30 minutes, you will have the tests
    running. And within a couple of hours, you will have the results. The next chart
    shows our results where only 23% of the standard tests were successful (the dark
    spikes):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以讨论很多并互相争论运行微软测试的有效性，但我们不如直接运行它们，看看我们的代码是否导致标准测试失败。这正是我多年前作为迈出自动化测试第一步所做的。那些一直关注我的博客的人可能记得，几年前，我专门写了一篇文章，标题是
    *如何：在你的代码上运行标准测试*。正如标题所示，文章讨论了如何在你的解决方案上运行标准测试的步骤。去阅读它，执行并检查结果。几乎没有理由不这么做。30分钟内，你就可以让测试开始运行。几小时内，你将看到结果。下图展示了我们的结果，其中只有23%的标准测试成功（深色尖峰）：
- en: '![](img/b4b94c61-248f-466a-8212-2fbd26363e2f.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b4b94c61-248f-466a-8212-2fbd26363e2f.png)'
- en: 'Here is where you can find my post: [https://dynamicsuser.net/nav/b/vanvugt/posts/how-to-run-standard-tests-against-your-code](https://dynamicsuser.net/nav/b/vanvugt/posts/how-to-run-standard-tests-against-your-code)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我文章的链接：[https://dynamicsuser.net/nav/b/vanvugt/posts/how-to-run-standard-tests-against-your-code](https://dynamicsuser.net/nav/b/vanvugt/posts/how-to-run-standard-tests-against-your-code)
- en: Executing standard test
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行标准测试
- en: 'The proof is in eating the pudding, so let''s effectuate it as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 证明在实践中，所以我们按如下方式执行：
- en: Deploy the solution we built and tested in [Section 3](13a9d0b2-ae46-45ba-8790-8489439e70fc.xhtml),
    *Designing and Building Automated Tests for* *Microsoft Dynamics 365 Business
    Central*, to Business Central
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们在[第3节](13a9d0b2-ae46-45ba-8790-8489439e70fc.xhtml)中构建和测试的解决方案，*设计并构建自动化测试以适用于*
    *Microsoft Dynamics 365 Business Central*，部署到 Business Central
- en: Import the standard tests
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入标准测试
- en: Set up a test suite in the test tool using the All Test Codeunits option, as
    discussed in [Chapter 3](fdf2b65f-be7c-4710-a3a9-39f4cc34ee5c.xhtml), *The Test
    Tool and Standard Tests*
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用测试工具中的“All Test Codeunits”选项设置测试套件，正如[第3章](fdf2b65f-be7c-4710-a3a9-39f4cc34ee5c.xhtml)中所讨论的，*测试工具和标准测试*
- en: Run all the tests
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行所有测试
- en: As it will take a couple of hours, we'll make a jump in time and have a look
    at the results. Out of the almost 23,000 tests, more than 3,000 have failed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这需要几个小时，我们将跳过时间并查看结果。在近23,000个测试中，有超过3,000个失败。
- en: What does this tell us?
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这告诉了我们什么？
- en: 'First of all, as 3,000 is quite a substantial number of failures, this should
    mainly be related to our extension for the following reasons:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，考虑到3,000个失败是一个相当大的数字，这应该主要与我们的扩展有关，原因如下：
- en: Running standard tests on standard Business Central always throws a number of
    errors.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在标准的Business Central上运行标准测试总是会抛出一些错误。
- en: This number might be a couple of hundred and some of them have to do with environmental
    settings, like not having permission to write data to a file.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个数字可能有几百个，其中一些与环境设置有关，比如没有权限将数据写入文件。
- en: As automated tests are also code, there might even be bugs in a couple of them.
    3,000 plus tests failing, however, is way beyond a couple of hundred.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于自动化测试本身也是代码，它们中也可能存在一些错误。然而，3,000多个测试失败远远超出了几百个的范围。
- en: Secondly, this means that a major number of standard tests do hit our code.
    Using the test coverage map, we can find out what test codeunits indeed do touch
    our extension and add them to our own test collateral we have built so far. But,
    of course, only if we can fix them.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，这意味着大量的标准测试确实会触及我们的代码。通过使用测试覆盖率图，我们可以找出哪些测试代码单元实际上会影响到我们的扩展，并将其添加到我们迄今为止构建的测试资源中。当然，前提是我们能够修复这些问题。
- en: Until now, we have been using the Business Central web client to run our tests.
    In this chapter, we will be making use of the Windows client and debugger, as
    the web client cannot handle running thousands of tests very well at this point
    in time. And, with the display and manipulation of all the test function lines,
    the test tool isn't, unfortunately, your best friend.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用Business Central的Web客户端来运行测试。在本章中，我们将使用Windows客户端和调试器，因为目前Web客户端在运行成千上万的测试时并不好用。而且，由于测试功能行的显示和操作，测试工具不幸的是并不是你最好的朋友。
- en: Fixing failing standard tests
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复失败的标准测试
- en: 'Let''s have a look at some of the errors that relate to the extension. They
    might already unclose some of their secrets:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些与扩展相关的错误。它们可能已经揭示出一些它们的秘密：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'With approximately 2,500 hits, the first error is the most striking one. And
    for those of you with some years as a developer in the Business Central world,
    it may already hint at its cause: the format of the error message is typically
    the error the record method `TestField` throws. Clearly this is an error that
    was not expected in any of the failing tests.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 首个错误是最为显著的，约有2,500个命中。对于那些在Business Central领域有几年开发经验的人来说，它可能已经暗示了错误的原因：错误信息的格式通常是记录方法`TestField`抛出的错误。这显然是一个在任何失败的测试中都没有预期到的错误。
- en: The two other errors were caught by `asserterror` and picked out by the `ExpectedError`
    method of the `Assert` library as part of the verification of the test concerned.
    Looking closer at the *Actual* error message, we can recognize that it's the same
    type of error as the first one. Most likely the same `TestField`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 另外两个错误是由`asserterror`捕获的，并通过`Assert`库的`ExpectedError`方法在测试验证过程中被挑选出来。仔细查看*实际*错误信息，我们可以识别出它与第一个错误是相同类型的错误。很可能是同一个`TestField`。
- en: 'Now let''s handle the errors. This is what I call my *attack* protocol:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们处理这些错误。这就是我所称的*攻击*协议：
- en: Open the test tool and select the failing test
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开测试工具并选择失败的测试
- en: Start up a debug session
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动调试会话
- en: Run the individual test using Run Selected
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用“运行选定项”来运行单个测试
- en: Let the debugger break on the error
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让调试器在错误处暂停
- en: See where the error occurred
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看错误发生的位置
- en: Use the Call Stack to step back in the code and see if you can already distinguish
    the cause, or if you want to get some more details
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用调用栈回溯代码，看看是否能分辨出原因，或者是否需要获取更多的细节
- en: Place a breakpoint somewhat earlier in the code
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码中较早的地方设置一个断点
- en: Finish the code execution and rerun the test
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成代码执行并重新运行测试
- en: Debug by stepping through the code
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过逐步调试代码来排除错误
- en: Implement the fix and restart from *Step 1*
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实施修复并从*步骤1*重新开始
- en: OK, follow me in attacking the most occurring error on our list first.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，跟随我首先解决我们列表中最常见的错误。
- en: Attacking the error
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决错误
- en: 'For attacking the error, we need to take the following steps:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了攻击这个错误，我们需要采取以下步骤：
- en: Open the test tool and select the failing test.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开测试工具并选择失败的测试。
- en: 'In our case, take out any test that fails with the `Lookup Value Code must
    have a value…` error, the first of the three errors listed previously:'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在我们的案例中，剔除掉任何因为`Lookup Value Code must have a value…`错误而失败的测试，这个错误是之前列出的三个错误中的第一个：
- en: '![](img/af49e852-44c3-49c2-ac9f-f29de41f4194.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/af49e852-44c3-49c2-ac9f-f29de41f4194.png)'
- en: 'Start up a debug session:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动调试会话：
- en: '![](img/e19e0507-af20-437a-96d8-bdfb621ee245.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e19e0507-af20-437a-96d8-bdfb621ee245.png)'
- en: 'Run the individual test using Run Selected:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用“运行选中的测试”运行单独的测试：
- en: '*![](img/2b8fe29a-6b23-4b45-ad80-7f7a56400ad0.png)*'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*![](img/2b8fe29a-6b23-4b45-ad80-7f7a56400ad0.png)*'
- en: 'Let the debugger break on the error:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让调试器在错误处中断：
- en: '![](img/51499435-32ca-408b-b95e-1b4704011547.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/51499435-32ca-408b-b95e-1b4704011547.png)'
- en: See where the error occurred. See where the error occurred
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 看看错误发生的位置。
- en: 'It clearly happens in an object in our extension. It might not be familiar
    to you as we haven''t had a look at this code yet. It''s the implementation of
    the business rule when posting a sales document, it is mandatory that the `Lookup
    Value Code` field is populated. See the call to the `TestField` method:'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个问题显然发生在我们扩展中的一个对象里。你可能不太熟悉，因为我们还没有查看过这段代码。这是发布销售单据时，业务规则的实现，要求`Lookup Value
    Code`字段必须被填写。看看调用`TestField`方法的地方：
- en: '![](img/0d6526b0-d65a-4dc2-a381-5ac41e78a9e8.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0d6526b0-d65a-4dc2-a381-5ac41e78a9e8.png)'
- en: Use the call stack to step back in the code.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用调用栈回溯代码。
- en: 'Notice that I selected the line on the call stack just above the line with
    `RunTest`. `RunTest` is the main function in the standard test runner codeunit
    (130400) that calls each test codeunit. The line on top of that is always the
    call to the current test function. In this specific case `TestCustNoMatchOutsideThreshold`:'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，我选择了调用栈中紧接着`RunTest`所在行的上一行。`RunTest`是标准测试运行器代码单元（130400）中的主函数，用于调用每个测试代码单元。它上面的一行总是当前测试函数的调用。在这个特定的例子中是`TestCustNoMatchOutsideThreshold`：
- en: '![](img/fc7a4efe-ba96-4875-8b51-f485922371d3.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fc7a4efe-ba96-4875-8b51-f485922371d3.png)'
- en: 'Having jumped to `TestCustNoMatchOutsideThreshold` and knowing what my extension
    is about, the statement line with `CreateCustomer`, four lines above the green
    pointer, triggers me. Apparently, a local method exists that creates a customer
    as part of the *fresh fixture*. I bet my money on it, all my money, that this
    customer did not get a `Lookup Value` assigned. Inspecting the variable `Customer` as
    follows, shows me that I''m right:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 跳转到`TestCustNoMatchOutsideThreshold`后，知道我的扩展是什么，我被`CreateCustomer`的语句行所触发，这一行在绿色指针上方的四行处。显然存在一个本地方法，它作为*新鲜的测试环境*创建了一个客户。我敢打赌，这个客户没有被分配`Lookup
    Value`。检查`Customer`变量，如下所示，证明了我的猜测是对的：
- en: '![](img/e9c208f9-bc2e-4c8e-ab5a-6437d91628f8.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e9c208f9-bc2e-4c8e-ab5a-6437d91628f8.png)'
- en: Place a breakpoint somewhat earlier in the code.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码中稍早的地方设置一个断点。
- en: 'You might have guessed already, at the line calling `CreateCustomer`:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能已经猜到，在调用`CreateCustomer`的那一行：
- en: '![](img/c389dba6-5a24-45d7-8e8e-9515f99ce4bd.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c389dba6-5a24-45d7-8e8e-9515f99ce4bd.png)'
- en: Finish the code execution and rerun the test.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成代码执行并重新运行测试。
- en: 'As planned it stops at the `CreateCustomer` call:'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 按计划，它在`CreateCustomer`调用处停止：
- en: '![](img/ac537e61-d589-4c41-9676-74611a514a00.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac537e61-d589-4c41-9676-74611a514a00.png)'
- en: Debug by stepping through the code.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过逐步调试代码来排查问题。
- en: 'We take a big step now by skipping the local `CreateCustomer` method to the
    generic helper method `CreateCustomer` in the `Library - Sales` codeunit:'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们现在迈出了重要的一步，跳过了本地的`CreateCustomer`方法，直接调用了`Library - Sales`代码单元中的通用辅助方法`CreateCustomer`：
- en: '![](img/f57527be-d23b-4bce-a48e-b2067bc61da3.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f57527be-d23b-4bce-a48e-b2067bc61da3.png)'
- en: And typically this is where we would like to fix our issue. Typically this helper
    function will be called upon from almost any test that is needing a newly created
    customer. Notice the `OnAfterCreateCustomer` publisher. Our fix will contain a
    subscriber to it.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 通常我们会在这里修复问题。通常，这个辅助函数会在几乎所有需要新创建客户的测试中被调用。注意`OnAfterCreateCustomer`发布器。我们的修复将包含一个订阅器。
- en: Implement the fix and restart from *Step 1*. We will elaborate on this in the
    following sections.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实施修复并从*步骤1*重新开始。我们将在接下来的章节中详细说明这一点。
- en: Only recently, Microsoft has started to add publishers like `OnAfterCreateCustomer`
    to helper functions in their libraries. You might still run into quite a number
    of helpers that have not yet been *blessed* with a publisher.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，微软才开始在其库中的辅助函数中添加像`OnAfterCreateCustomer`这样的发布者。你可能仍然会遇到一些尚未被*批准*的辅助函数，缺乏发布者。
- en: Fixing the error
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修复错误
- en: 'To fix the error, the trick is to add a codeunit to our extension with a subscriber
    to the `OnAfterCreateCustomer` publisher that sets a lookup value on the customer:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了修复该错误，诀窍是向我们的扩展添加一个代码单元，并为`OnAfterCreateCustomer`发布者添加一个订阅者，该订阅者会在客户上设置查找值：
- en: '[PRE1]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note the reference to the codeunit `Library - Lookup Value`. This is the result
    of the discussion on refactoring at the end of [Chapter 7](bb9ee41e-4c60-4a27-8fad-5343adfcd86a.xhtml),
    *From Customer Wish to Test Automation - And Some More*. The `Library - Lookup
    Value` contains a reusable function `CreateLookupValueCode`. Go to GitHub to have
    a look at the details.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 注意代码单元`Library - Lookup Value`的引用。这是[第7章](bb9ee41e-4c60-4a27-8fad-5343adfcd86a.xhtml)中关于重构讨论的结果，*从客户需求到测试自动化——以及更多内容*。`Library
    - Lookup Value`包含一个可重用的函数`CreateLookupValueCode`。可以去GitHub查看详细信息。
- en: Running the failing tests again
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 再次运行失败的测试
- en: Deploy everything again and rerun all the failing tests. Use the Select on Failures
    feature from our test tool extension to select only the failing tests. It will
    take a while before 3,000 plus tests have been processed. The result will be that
    the amount of failing tests has declined to 559\. Clearly this fix was a good
    investment.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 再次部署所有内容并重新运行所有失败的测试。使用我们的测试工具扩展中的“选择失败测试”功能，仅选择失败的测试。在3,000多个测试完成处理前，可能需要一些时间。结果是，失败的测试数量降至559个。显然，这个修复是一个值得的投资。
- en: Viewing the call stack from the test tool
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从测试工具查看调用堆栈
- en: 'If you''re not debugging your failing test but would like to have a look at
    the call stack right from the test tool, drill down from the First Error field
    into the CAL Test Results window as shown already in [Chapter 5](56634efe-664c-421a-9582-b2a6ae69722a.xhtml),
    *From Customer Wish to Test Automation - The Basics*. Thenselect the Call Stack
    action. In the next screenshot, the call stack is displayed for the `TestCustNoMatchOutsideThreshold`
    test we were examining already:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有调试失败的测试，但仍然希望从测试工具查看调用堆栈，可以从"First Error"字段进入CAL测试结果窗口，如[第5章](56634efe-664c-421a-9582-b2a6ae69722a.xhtml)中所示，*从客户需求到测试自动化——基础知识*。然后选择调用堆栈操作。在接下来的截图中，调用堆栈显示了我们之前查看的`TestCustNoMatchOutsideThreshold`测试：
- en: '![](img/d9398167-65a7-4ff2-b6a6-87fb03f970b2.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9398167-65a7-4ff2-b6a6-87fb03f970b2.png)'
- en: It's all about data
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一切都与数据有关
- en: 'In my experience, getting the standard tests working on your code is mainly
    about getting the test fixture right. As in the previous exercise, fixing the
    first error on our list isn''t a coincident. It''s a plain example of what you
    will be doing in getting the standard tests run on your code: bring the test fixture
    in the right state. In this specific case, we fixed the fresh fixture. Solving
    the remaining errors is again about updating the test fixture. In those cases,
    it concerns the shared fixture.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的经验，确保标准测试在代码中正常运行，主要是关于正确配置测试环境。就像之前的练习一样，修复我们列表上的第一个错误并非巧合。这是你在让标准测试在代码上运行时会做的一个简单例子：让测试环境处于正确状态。在这个具体的案例中，我们修复了新创建的测试环境。解决其余的错误同样需要更新测试环境。在这些情况下，涉及的是共享的测试环境。
- en: 'Looking closer at the remaining failing tests, it seems that our first error
    did not completely vanish. Saving you the trouble of going through all of them,
    I have picked out the following three failing tests:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 更仔细地查看剩余的失败测试，似乎我们的第一个错误并没有完全消失。为了省去你逐一检查的麻烦，我挑选了以下三个失败的测试：
- en: '![](img/6b4eafef-7346-4446-bab3-0e1686839db8.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b4eafef-7346-4446-bab3-0e1686839db8.png)'
- en: 'Apparently, our generic fix for the `CreateCustomer` helper method did not
    have any effect on these. Debugging each of them shows eventually that the prebuilt
    fixture, that is, data from the `CRONUS` demo company, is being used. Taking the
    first test, `PartialDisposalOfFA` from test codeunit 134450 (`ERM Fixed Assets
    Journal`), shows the obvious. Have a look:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我们为`CreateCustomer`辅助方法提供的通用修复并未对这些产生影响。调试每个失败的测试最终会发现，正在使用预构建的测试环境，也就是来自`CRONUS`演示公司的数据。以第一个测试`PartialDisposalOfFA`为例，来自测试代码单元134450（`ERM固定资产日记账`），很明显。来看一下：
- en: '![](img/6b4849d6-ad00-45da-95b0-d3d388cf5d24.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b4849d6-ad00-45da-95b0-d3d388cf5d24.png)'
- en: Within a set of filters, the first customer record is retrieved from the database.
    Reading from the Watches pane, it is a well-known customer in `CRONUS`, customer
    `10000`. As we haven't touched the prebuilt fixture, any customer record in `CRONUS`
    must do without a lookup value.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在一组过滤条件下，从数据库中检索第一条客户记录。从 Watches 窗格可以看到，这是 `CRONUS` 中一个熟悉的客户，客户编号为 `10000`。由于我们没有修改预构建的测试数据，`CRONUS`
    中的任何客户记录都必须没有查找值。
- en: 'In the case of the other two test their errors also find root in an insufficient
    prebuilt fixture:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 对于另外两个测试，它们的错误也源于一个不足的预构建测试数据：
- en: '`SalesFromContactToPayment` in test codeunit 134640 (`Sales E2E`) makes use
    of a customer template from `CRONUS`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试代码单元 134640（`Sales E2E`）中的 `SalesFromContactToPayment` 使用了来自 `CRONUS` 的客户模板
- en: '`PullAndPostMixedHeadersUsingUseFilters` in test codeunit 136140 (`Service
    Order Release`) retrieves a sales document from `CRONUS`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试代码单元 136140（`Service Order Release`）中的 `PullAndPostMixedHeadersUsingUseFilters`
    从 `CRONUS` 中检索一个销售单据
- en: 'The conclusion is that in all three cases we have to update the prebuilt fixture,
    that is, create a shared fixture, making sure that customers, customer templates,
    and sales documents already residing in `CRONUS` get their `Lookup Value Code`
    field populated. To achieve this we can make use of one of the publishers in the
    shared fixture method, `Initialize`, implemented in most of the Microsoft test
    functions. You might recall from [Chapter 4](db955f66-11f4-4d9a-90c7-5af04058ebbe.xhtml), *Test
    Design*, this structure:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 结论是，在这三种情况下，我们必须更新预构建的测试数据，也就是创建一个共享的测试数据，确保 `CRONUS` 中已经存在的客户、客户模板和销售单据能够填充它们的
    `Lookup Value Code` 字段。为了实现这一点，我们可以利用共享测试数据方法中的一个发布者 `Initialize`，该方法在大多数 Microsoft
    测试函数中都有实现。你可能还记得在[第 4 章](db955f66-11f4-4d9a-90c7-5af04058ebbe.xhtml)中提到的结构：*测试设计*。
- en: '[PRE2]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Either we subscribe to the `OnBeforeTestSuiteInitialize` or `OnAfterTestSuiteInitialize`
    publisher. In general, I chose to subscribe to the first one to make sure this
    is done before any standard update to the fixture is performed and to make use
    of the already present call on `Commit`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要么订阅 `OnBeforeTestSuiteInitialize`，要么订阅 `OnAfterTestSuiteInitialize` 发布者。一般来说，我选择订阅第一个，以确保在对测试数据进行任何标准更新之前完成此操作，并且利用
    `Commit` 上已经存在的调用。
- en: 'This is how our fix implementation looks:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们修复实现的样子：
- en: '[PRE3]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice this code also fixes the errors thrown by tests in codeunit 134453 (`ERM
    Fixed Assets GL Journal`) by updating the existing records in the `Customer` table.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这段代码通过更新 `Customer` 表中现有的记录，修复了代码单元 134453（`ERM 固定资产 GL 日志`）中测试抛出的错误。
- en: 'The three newly introduced helper functions in the new library codeunit `Library
    - Setup` do exactly what their names describes:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 新库代码单元 `Library - Setup` 中引入的三个辅助函数正是它们名称所描述的功能：
- en: '`UpdateCustomers` updates all customer records already existing in `CRONUS`
    so their `Lookup Value Code` field is populated'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UpdateCustomers` 更新 `CRONUS` 中已存在的所有客户记录，以便填充它们的 `Lookup Value Code` 字段'
- en: '`UpdateCustomerTemplates` and `UpdateSalesHeader` do the same with respect
    to all customer templates and sales headers'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UpdateCustomerTemplates` 和 `UpdateSalesHeader` 对所有客户模板和销售单头做了相同的操作'
- en: Go to GitHub to study the details of each of these functions.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 前往 GitHub 学习这些函数的详细信息。
- en: Ready? Almost.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好了吗？差不多了。
- en: Making your code testable
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使你的代码可测试
- en: We were looking at getting standard tests fixed and we did. But at the same
    time we did overlook that fixing them made a pair of our own tests fall over.
    Do you see?
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们本来是想修复标准测试的，结果修复了。但是同时我们忽略了修复它们导致我们自己的一些测试失败了。你明白吗？
- en: '![](img/4ce6a9a4-974f-43d5-b663-fe474acfd9cf.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4ce6a9a4-974f-43d5-b663-fe474acfd9cf.png)'
- en: 'We have two failing tests and in the same codeunit `LookupValue Posting`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有两个失败的测试，它们位于同一个代码单元 `LookupValue Posting` 中：
- en: '`PostSalesOrderWithNoLookupValue`'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PostSalesOrderWithNoLookupValue`'
- en: '`PostWarehouseShipmentFromSalesOrderWithNoLookupValue`'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PostWarehouseShipmentFromSalesOrderWithNoLookupValue`'
- en: 'This is their error text:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这是他们的错误文本：
- en: '[PRE4]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Without debugging, this information already tells me a whole story. This is
    confirmed by the code of the first test method:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有调试的情况下，这些信息已经讲述了一个完整的故事。第一测试方法的代码也确认了这一点：
- en: '[PRE5]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `asserterror` is placed here to catch an error supposedly expected to be
    thrown by `PostSalesDocument`. And this is precisely what the test error message
    is hinting at. The fact that we get the error means that there did not occur an
    error at all. The expected error should have been reporting that the `SalesHeader`,
    being posted, was missing a lookup value. This is the one-fold goal of `PostSalesOrderWithNoLookupValue`
    (see also the `[THEN]` tag).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`asserterror`被放置在这里，用来捕捉本应由`PostSalesDocument`抛出的错误。这正是测试错误信息所提示的。我们收到错误的事实意味着并没有发生错误。预期的错误应该是报告`SalesHeader`在发布时缺少查找值。这是`PostSalesOrderWithNoLookupValue`的单一目标（参见`[THEN]`标签）。'
- en: The very reason that no error is happening, is that the `Lookup Value Code`
    field on the `SalesHeader` record is empty. This is due to our generic fix we
    implemented a number of pages back, where we extended the `CreateCustomer` helper
    method by means of our subscriber `OnAfterCreateCustomerEvent`. Leaving it to
    you to dig into the details on GitHub, I will only mention here that the customer
    linked to the `SalesHeader` record is created by the standard `CreateCustomer`
    helper method. As this is triggered by our test, it yields a result opposite to
    what was intended. How do we go about resolving the errors?
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 没有发生错误的真正原因，是因为`SalesHeader`记录中的`Lookup Value Code`字段为空。这是因为我们在若干个页面之前实现的通用修复，扩展了`CreateCustomer`辅助方法，并通过我们的订阅者`OnAfterCreateCustomerEvent`实现。虽然我把细节留给你在GitHub上查看，我在这里只提到，链接到`SalesHeader`记录的客户是通过标准的`CreateCustomer`辅助方法创建的。由于这是由我们的测试触发的，因此结果与预期相反。那么我们该如何解决这些错误呢？
- en: 'Removing the `OnAfterCreateCustomerEvent` subscriber is not an option as it''s
    there to get 2,500 standard tests to succeed. We could, however, try to disable
    the subscriber when our own tests run. Or using another term: we could *mock*
    the behavior of the subscriber by applying the *Handled pattern*. In solving our
    issue as follows, we will apply a variation on this pattern.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 移除`OnAfterCreateCustomerEvent`订阅者不是一个选项，因为它是为了让2,500个标准测试成功而存在的。然而，我们可以尝试在我们的测试运行时禁用该订阅者。或者换句话说，我们可以通过应用*Handled模式*来*模拟*订阅者的行为。在解决我们的问题时，我们将基于这个模式做一些变体。
- en: 'Read more on the Handled pattern here:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里阅读更多关于Handled模式的内容：
- en: '[https://markbrummel.blog/2015/11/25/the-handled-pattern/](https://markbrummel.blog/2015/11/25/the-handled-pattern/)
    and [https://community.dynamics.com/nav/b/navigateintosuccess/archive/2016/10/04/gentlemen-s-agreement-pattern-or-handling-the-handled-pattern](https://community.dynamics.com/nav/b/navigateintosuccess/archive/2016/10/04/gentlemen-s-agreement-pattern-or-handling-the-handled-pattern)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://markbrummel.blog/2015/11/25/the-handled-pattern/](https://markbrummel.blog/2015/11/25/the-handled-pattern/)
    和 [https://community.dynamics.com/nav/b/navigateintosuccess/archive/2016/10/04/gentlemen-s-agreement-pattern-or-handling-the-handled-pattern](https://community.dynamics.com/nav/b/navigateintosuccess/archive/2016/10/04/gentlemen-s-agreement-pattern-or-handling-the-handled-pattern)'
- en: Applying the Handled pattern
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用Handled模式
- en: 'A test codeunit that wants to circumvent the effect of the subscriber creates
    a record in this table as part of their shared fixture, and check marks a Boolean
    field, which will be called `Skip OnAfterCreateCustomer`. Check marking this field
    in the `OnAfterCreateCustomerEvent` subscriber will enable us to execute the subscriber
    in its full extend, or to just skip it. This is how the subscriber has been updated:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 想要绕过订阅者影响的测试代码单元会在共享的测试环境中创建一条记录，并选中一个布尔字段，名为`Skip OnAfterCreateCustomer`。在`OnAfterCreateCustomerEvent`订阅者中勾选这个字段将使我们能够完全执行订阅者，或者直接跳过它。这就是订阅者的更新方式：
- en: '[PRE6]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The helper function `SkipOnAfterCreateCustomer`, part of a new library codeunit
    called `Library - Tests Setup`, will check the `Skip OnAfterCreateCustomer` field
    in our new setup table:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 辅助函数`SkipOnAfterCreateCustomer`是一个新的库代码单元`Library - Tests Setup`的一部分，它将检查我们新设置表中的`Skip
    OnAfterCreateCustomer`字段：
- en: '[PRE7]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The only step to be taken is to add the following code to the relevant `Initialize`
    function:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一需要采取的步骤是将以下代码添加到相关的`Initialize`函数中：
- en: '[PRE8]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This is one of the ways of making code testable. In this example, we applied
    it to test code, but in a similar matter, you can apply it to application code.
    By inserting publishers into your code, you enable subscribers to take control
    of the process flow, like for example form you test code.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种让代码可测试的方法。在这个示例中，我们将其应用于测试代码，但以类似的方式，你也可以将其应用于应用程序代码。通过在代码中插入发布者，你使得订阅者能够控制流程，就像你测试代码中的表单一样。
- en: As you might know, Dynamics 365 Business Central allows you to bind and unbind
    subscriber on the fly given the right circumstances. Alas, in the case of our
    tests, this was not feasible as we are not fully in control of the standard test
    codeunits.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能知道的，Dynamics 365 Business Central 允许你在合适的情况下动态绑定和解绑订阅者。遗憾的是，在我们的测试案例中，这并不可行，因为我们不能完全控制标准的测试代码单元。
- en: 'Read more on binding subscribers here: [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/session/session-bindsubscription-method](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/session/session-bindsubscription-method)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读更多关于绑定订阅者的信息，请访问：[https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/session/session-bindsubscription-method](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/session/session-bindsubscription-method)
- en: Is it all really about data?
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这一切真的都是关于数据吗？
- en: 'Of course not. But in the majority of the cases of failing standard tests,
    it worked out that way for me. Based on this experience, my best practice in getting
    a failing standard test fixed is the following sequence. Try fixing the error
    by adjusting:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当然不是。但在大多数标准测试失败的案例中，结果通常是这样的。基于这个经验，我在解决标准测试失败时的最佳实践是以下步骤。尝试通过调整以下内容来修复错误：
- en: The shared fixture; if that does not do the job.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 共享夹具；如果这没有解决问题。
- en: The fresh fixture; if not.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新的夹具；如果仍然不行。
- en: The test code, often the verification part, in this case you hit upon a test
    code bug; if still not working.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试代码，通常是验证部分，在这种情况下你遇到了测试代码的 bug；如果仍然不起作用。
- en: The app code, you found a *real* bug!
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用代码中，你发现了一个*真正的* bug！
- en: Summary
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned why you would want to use the Microsoft tests,
    how to start applying them on your Business Central code, and how to fix the errors
    they might throw. You learned that most fixes relate to adjusting the test fixture,
    be it *shared* or *fresh*.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了为什么你需要使用微软测试，如何在你的 Business Central 代码中应用它们，以及如何修复它们可能引发的错误。你了解到，大多数修复都与调整测试夹具有关，无论是*共享*的还是*新的*。
- en: With this chapter, the book has come to an end. But your journey into test automation
    has just started. To me, every time it's still fun to pick up. It enables me to
    go astray in my application code, finding the results of my test recalling me.
    It allows me to refactor my code at any time. It also enables me to more easily
    reflect on the quality of the code, because it can be changed and instantly checked.
    I could go on with my praising and more or less redo the first chapter of this
    book. But I won't, as it is time to conclude for now. I hope you enjoyed reading
    and practising with me, as much as I did while writing.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 本章内容到此为止，本书也即将结束。但你在测试自动化的旅程才刚刚开始。对我而言，每次拿起它依然很有趣。它让我在应用代码中迷失方向，发现我的测试结果并提醒我。它让我可以随时重构代码。它还让我更容易反思代码质量，因为它可以被修改并立即检查。我可以继续称赞它，或多或少地重新写一遍本书的第一章。但我不会，因为现在是时候总结一下了。我希望你像我写书时一样享受阅读和实践的过程。
