- en: Getting Business Central Standard Tests Working on Your Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now you know how to write your automated tests and have integrated them in
    your daily development practice, how could you also take profit from this humongous
    collateral of tests Microsoft have provided? This chapter shows you how to add
    them to your own collateral. We''ll discuss:'
  prefs: []
  type: TYPE_NORMAL
- en: Why to use the standard tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing standard tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixing failing standard tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making your code testable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why use the standard tests?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ever since they introduced the testability framework in 2009, Microsoft have
    been building on their application test collateral. As already pointed out in
    [Chapter 3](fdf2b65f-be7c-4710-a3a9-39f4cc34ee5c.xhtml), *The Test Tool and Standard
    Tests*, it contains an immense number of tests. These tests cover the whole standard
    application, from financial management, sales and purchase, through warehouse
    and manufacturing, to service management. With every major release or cumulative
    update, new tests have been and will continue to be added to cover new features
    and recent bug fixes. Years of work we all can profit from. If your code extends
    the standard application, what will be the impact of it on the standard application?
  prefs: []
  type: TYPE_NORMAL
- en: You could go about writing your own tests. You could also choose to run the
    standard tests and see the results. And, of course, in the end, you could do both,
    as your extension most probably will not only change standard behavior, but also
    add new functionality not covered by any test in the Microsoft collateral.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could discuss a lot and bang each other''s heads on the validity of running
    the Microsoft tests, but instead we could just as well run them and see if our
    code makes the standard tests fail. This is exactly what I did years ago as my
    first step in structurally picking up test automation for Business Central. Those
    that have been following my blog might recall that, some years ago, I dedicated
    a post on this called *How-to: Run Standard Tests against Your Code*. As the title
    clearly unveils, it discusses the steps to take to get the standard tests run
    on your solution. Go there, read it, execute, and examine the results. There is
    little or no reason not to do this. Within 30 minutes, you will have the tests
    running. And within a couple of hours, you will have the results. The next chart
    shows our results where only 23% of the standard tests were successful (the dark
    spikes):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b4b94c61-248f-466a-8212-2fbd26363e2f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is where you can find my post: [https://dynamicsuser.net/nav/b/vanvugt/posts/how-to-run-standard-tests-against-your-code](https://dynamicsuser.net/nav/b/vanvugt/posts/how-to-run-standard-tests-against-your-code)'
  prefs: []
  type: TYPE_NORMAL
- en: Executing standard test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The proof is in eating the pudding, so let''s effectuate it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Deploy the solution we built and tested in [Section 3](13a9d0b2-ae46-45ba-8790-8489439e70fc.xhtml),
    *Designing and Building Automated Tests for* *Microsoft Dynamics 365 Business
    Central*, to Business Central
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the standard tests
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up a test suite in the test tool using the All Test Codeunits option, as
    discussed in [Chapter 3](fdf2b65f-be7c-4710-a3a9-39f4cc34ee5c.xhtml), *The Test
    Tool and Standard Tests*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run all the tests
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As it will take a couple of hours, we'll make a jump in time and have a look
    at the results. Out of the almost 23,000 tests, more than 3,000 have failed.
  prefs: []
  type: TYPE_NORMAL
- en: What does this tell us?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First of all, as 3,000 is quite a substantial number of failures, this should
    mainly be related to our extension for the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: Running standard tests on standard Business Central always throws a number of
    errors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This number might be a couple of hundred and some of them have to do with environmental
    settings, like not having permission to write data to a file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As automated tests are also code, there might even be bugs in a couple of them.
    3,000 plus tests failing, however, is way beyond a couple of hundred.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secondly, this means that a major number of standard tests do hit our code.
    Using the test coverage map, we can find out what test codeunits indeed do touch
    our extension and add them to our own test collateral we have built so far. But,
    of course, only if we can fix them.
  prefs: []
  type: TYPE_NORMAL
- en: Until now, we have been using the Business Central web client to run our tests.
    In this chapter, we will be making use of the Windows client and debugger, as
    the web client cannot handle running thousands of tests very well at this point
    in time. And, with the display and manipulation of all the test function lines,
    the test tool isn't, unfortunately, your best friend.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing failing standard tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s have a look at some of the errors that relate to the extension. They
    might already unclose some of their secrets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'With approximately 2,500 hits, the first error is the most striking one. And
    for those of you with some years as a developer in the Business Central world,
    it may already hint at its cause: the format of the error message is typically
    the error the record method `TestField` throws. Clearly this is an error that
    was not expected in any of the failing tests.'
  prefs: []
  type: TYPE_NORMAL
- en: The two other errors were caught by `asserterror` and picked out by the `ExpectedError`
    method of the `Assert` library as part of the verification of the test concerned.
    Looking closer at the *Actual* error message, we can recognize that it's the same
    type of error as the first one. Most likely the same `TestField`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s handle the errors. This is what I call my *attack* protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the test tool and select the failing test
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start up a debug session
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the individual test using Run Selected
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let the debugger break on the error
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: See where the error occurred
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the Call Stack to step back in the code and see if you can already distinguish
    the cause, or if you want to get some more details
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place a breakpoint somewhat earlier in the code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finish the code execution and rerun the test
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Debug by stepping through the code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement the fix and restart from *Step 1*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OK, follow me in attacking the most occurring error on our list first.
  prefs: []
  type: TYPE_NORMAL
- en: Attacking the error
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For attacking the error, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the test tool and select the failing test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In our case, take out any test that fails with the `Lookup Value Code must
    have a value…` error, the first of the three errors listed previously:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/af49e852-44c3-49c2-ac9f-f29de41f4194.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Start up a debug session:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e19e0507-af20-437a-96d8-bdfb621ee245.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the individual test using Run Selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*![](img/2b8fe29a-6b23-4b45-ad80-7f7a56400ad0.png)*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let the debugger break on the error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/51499435-32ca-408b-b95e-1b4704011547.png)'
  prefs: []
  type: TYPE_IMG
- en: See where the error occurred. See where the error occurred
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It clearly happens in an object in our extension. It might not be familiar
    to you as we haven''t had a look at this code yet. It''s the implementation of
    the business rule when posting a sales document, it is mandatory that the `Lookup
    Value Code` field is populated. See the call to the `TestField` method:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/0d6526b0-d65a-4dc2-a381-5ac41e78a9e8.png)'
  prefs: []
  type: TYPE_IMG
- en: Use the call stack to step back in the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Notice that I selected the line on the call stack just above the line with
    `RunTest`. `RunTest` is the main function in the standard test runner codeunit
    (130400) that calls each test codeunit. The line on top of that is always the
    call to the current test function. In this specific case `TestCustNoMatchOutsideThreshold`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/fc7a4efe-ba96-4875-8b51-f485922371d3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Having jumped to `TestCustNoMatchOutsideThreshold` and knowing what my extension
    is about, the statement line with `CreateCustomer`, four lines above the green
    pointer, triggers me. Apparently, a local method exists that creates a customer
    as part of the *fresh fixture*. I bet my money on it, all my money, that this
    customer did not get a `Lookup Value` assigned. Inspecting the variable `Customer` as
    follows, shows me that I''m right:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e9c208f9-bc2e-4c8e-ab5a-6437d91628f8.png)'
  prefs: []
  type: TYPE_IMG
- en: Place a breakpoint somewhat earlier in the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You might have guessed already, at the line calling `CreateCustomer`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/c389dba6-5a24-45d7-8e8e-9515f99ce4bd.png)'
  prefs: []
  type: TYPE_IMG
- en: Finish the code execution and rerun the test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As planned it stops at the `CreateCustomer` call:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/ac537e61-d589-4c41-9676-74611a514a00.png)'
  prefs: []
  type: TYPE_IMG
- en: Debug by stepping through the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We take a big step now by skipping the local `CreateCustomer` method to the
    generic helper method `CreateCustomer` in the `Library - Sales` codeunit:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/f57527be-d23b-4bce-a48e-b2067bc61da3.png)'
  prefs: []
  type: TYPE_IMG
- en: And typically this is where we would like to fix our issue. Typically this helper
    function will be called upon from almost any test that is needing a newly created
    customer. Notice the `OnAfterCreateCustomer` publisher. Our fix will contain a
    subscriber to it.
  prefs: []
  type: TYPE_NORMAL
- en: Implement the fix and restart from *Step 1*. We will elaborate on this in the
    following sections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Only recently, Microsoft has started to add publishers like `OnAfterCreateCustomer`
    to helper functions in their libraries. You might still run into quite a number
    of helpers that have not yet been *blessed* with a publisher.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing the error
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To fix the error, the trick is to add a codeunit to our extension with a subscriber
    to the `OnAfterCreateCustomer` publisher that sets a lookup value on the customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note the reference to the codeunit `Library - Lookup Value`. This is the result
    of the discussion on refactoring at the end of [Chapter 7](bb9ee41e-4c60-4a27-8fad-5343adfcd86a.xhtml),
    *From Customer Wish to Test Automation - And Some More*. The `Library - Lookup
    Value` contains a reusable function `CreateLookupValueCode`. Go to GitHub to have
    a look at the details.
  prefs: []
  type: TYPE_NORMAL
- en: Running the failing tests again
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploy everything again and rerun all the failing tests. Use the Select on Failures
    feature from our test tool extension to select only the failing tests. It will
    take a while before 3,000 plus tests have been processed. The result will be that
    the amount of failing tests has declined to 559\. Clearly this fix was a good
    investment.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing the call stack from the test tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you''re not debugging your failing test but would like to have a look at
    the call stack right from the test tool, drill down from the First Error field
    into the CAL Test Results window as shown already in [Chapter 5](56634efe-664c-421a-9582-b2a6ae69722a.xhtml),
    *From Customer Wish to Test Automation - The Basics*. Thenselect the Call Stack
    action. In the next screenshot, the call stack is displayed for the `TestCustNoMatchOutsideThreshold`
    test we were examining already:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9398167-65a7-4ff2-b6a6-87fb03f970b2.png)'
  prefs: []
  type: TYPE_IMG
- en: It's all about data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In my experience, getting the standard tests working on your code is mainly
    about getting the test fixture right. As in the previous exercise, fixing the
    first error on our list isn''t a coincident. It''s a plain example of what you
    will be doing in getting the standard tests run on your code: bring the test fixture
    in the right state. In this specific case, we fixed the fresh fixture. Solving
    the remaining errors is again about updating the test fixture. In those cases,
    it concerns the shared fixture.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking closer at the remaining failing tests, it seems that our first error
    did not completely vanish. Saving you the trouble of going through all of them,
    I have picked out the following three failing tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b4eafef-7346-4446-bab3-0e1686839db8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Apparently, our generic fix for the `CreateCustomer` helper method did not
    have any effect on these. Debugging each of them shows eventually that the prebuilt
    fixture, that is, data from the `CRONUS` demo company, is being used. Taking the
    first test, `PartialDisposalOfFA` from test codeunit 134450 (`ERM Fixed Assets
    Journal`), shows the obvious. Have a look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6b4849d6-ad00-45da-95b0-d3d388cf5d24.png)'
  prefs: []
  type: TYPE_IMG
- en: Within a set of filters, the first customer record is retrieved from the database.
    Reading from the Watches pane, it is a well-known customer in `CRONUS`, customer
    `10000`. As we haven't touched the prebuilt fixture, any customer record in `CRONUS`
    must do without a lookup value.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of the other two test their errors also find root in an insufficient
    prebuilt fixture:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SalesFromContactToPayment` in test codeunit 134640 (`Sales E2E`) makes use
    of a customer template from `CRONUS`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PullAndPostMixedHeadersUsingUseFilters` in test codeunit 136140 (`Service
    Order Release`) retrieves a sales document from `CRONUS`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The conclusion is that in all three cases we have to update the prebuilt fixture,
    that is, create a shared fixture, making sure that customers, customer templates,
    and sales documents already residing in `CRONUS` get their `Lookup Value Code`
    field populated. To achieve this we can make use of one of the publishers in the
    shared fixture method, `Initialize`, implemented in most of the Microsoft test
    functions. You might recall from [Chapter 4](db955f66-11f4-4d9a-90c7-5af04058ebbe.xhtml), *Test
    Design*, this structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Either we subscribe to the `OnBeforeTestSuiteInitialize` or `OnAfterTestSuiteInitialize`
    publisher. In general, I chose to subscribe to the first one to make sure this
    is done before any standard update to the fixture is performed and to make use
    of the already present call on `Commit`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how our fix implementation looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Notice this code also fixes the errors thrown by tests in codeunit 134453 (`ERM
    Fixed Assets GL Journal`) by updating the existing records in the `Customer` table.
  prefs: []
  type: TYPE_NORMAL
- en: 'The three newly introduced helper functions in the new library codeunit `Library
    - Setup` do exactly what their names describes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`UpdateCustomers` updates all customer records already existing in `CRONUS`
    so their `Lookup Value Code` field is populated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UpdateCustomerTemplates` and `UpdateSalesHeader` do the same with respect
    to all customer templates and sales headers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go to GitHub to study the details of each of these functions.
  prefs: []
  type: TYPE_NORMAL
- en: Ready? Almost.
  prefs: []
  type: TYPE_NORMAL
- en: Making your code testable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We were looking at getting standard tests fixed and we did. But at the same
    time we did overlook that fixing them made a pair of our own tests fall over.
    Do you see?
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4ce6a9a4-974f-43d5-b663-fe474acfd9cf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have two failing tests and in the same codeunit `LookupValue Posting`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PostSalesOrderWithNoLookupValue`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PostWarehouseShipmentFromSalesOrderWithNoLookupValue`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is their error text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Without debugging, this information already tells me a whole story. This is
    confirmed by the code of the first test method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `asserterror` is placed here to catch an error supposedly expected to be
    thrown by `PostSalesDocument`. And this is precisely what the test error message
    is hinting at. The fact that we get the error means that there did not occur an
    error at all. The expected error should have been reporting that the `SalesHeader`,
    being posted, was missing a lookup value. This is the one-fold goal of `PostSalesOrderWithNoLookupValue`
    (see also the `[THEN]` tag).
  prefs: []
  type: TYPE_NORMAL
- en: The very reason that no error is happening, is that the `Lookup Value Code`
    field on the `SalesHeader` record is empty. This is due to our generic fix we
    implemented a number of pages back, where we extended the `CreateCustomer` helper
    method by means of our subscriber `OnAfterCreateCustomerEvent`. Leaving it to
    you to dig into the details on GitHub, I will only mention here that the customer
    linked to the `SalesHeader` record is created by the standard `CreateCustomer`
    helper method. As this is triggered by our test, it yields a result opposite to
    what was intended. How do we go about resolving the errors?
  prefs: []
  type: TYPE_NORMAL
- en: 'Removing the `OnAfterCreateCustomerEvent` subscriber is not an option as it''s
    there to get 2,500 standard tests to succeed. We could, however, try to disable
    the subscriber when our own tests run. Or using another term: we could *mock*
    the behavior of the subscriber by applying the *Handled pattern*. In solving our
    issue as follows, we will apply a variation on this pattern.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Read more on the Handled pattern here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://markbrummel.blog/2015/11/25/the-handled-pattern/](https://markbrummel.blog/2015/11/25/the-handled-pattern/)
    and [https://community.dynamics.com/nav/b/navigateintosuccess/archive/2016/10/04/gentlemen-s-agreement-pattern-or-handling-the-handled-pattern](https://community.dynamics.com/nav/b/navigateintosuccess/archive/2016/10/04/gentlemen-s-agreement-pattern-or-handling-the-handled-pattern)'
  prefs: []
  type: TYPE_NORMAL
- en: Applying the Handled pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A test codeunit that wants to circumvent the effect of the subscriber creates
    a record in this table as part of their shared fixture, and check marks a Boolean
    field, which will be called `Skip OnAfterCreateCustomer`. Check marking this field
    in the `OnAfterCreateCustomerEvent` subscriber will enable us to execute the subscriber
    in its full extend, or to just skip it. This is how the subscriber has been updated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The helper function `SkipOnAfterCreateCustomer`, part of a new library codeunit
    called `Library - Tests Setup`, will check the `Skip OnAfterCreateCustomer` field
    in our new setup table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The only step to be taken is to add the following code to the relevant `Initialize`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This is one of the ways of making code testable. In this example, we applied
    it to test code, but in a similar matter, you can apply it to application code.
    By inserting publishers into your code, you enable subscribers to take control
    of the process flow, like for example form you test code.
  prefs: []
  type: TYPE_NORMAL
- en: As you might know, Dynamics 365 Business Central allows you to bind and unbind
    subscriber on the fly given the right circumstances. Alas, in the case of our
    tests, this was not feasible as we are not fully in control of the standard test
    codeunits.
  prefs: []
  type: TYPE_NORMAL
- en: 'Read more on binding subscribers here: [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/session/session-bindsubscription-method](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/session/session-bindsubscription-method)'
  prefs: []
  type: TYPE_NORMAL
- en: Is it all really about data?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Of course not. But in the majority of the cases of failing standard tests,
    it worked out that way for me. Based on this experience, my best practice in getting
    a failing standard test fixed is the following sequence. Try fixing the error
    by adjusting:'
  prefs: []
  type: TYPE_NORMAL
- en: The shared fixture; if that does not do the job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The fresh fixture; if not.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The test code, often the verification part, in this case you hit upon a test
    code bug; if still not working.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The app code, you found a *real* bug!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned why you would want to use the Microsoft tests,
    how to start applying them on your Business Central code, and how to fix the errors
    they might throw. You learned that most fixes relate to adjusting the test fixture,
    be it *shared* or *fresh*.
  prefs: []
  type: TYPE_NORMAL
- en: With this chapter, the book has come to an end. But your journey into test automation
    has just started. To me, every time it's still fun to pick up. It enables me to
    go astray in my application code, finding the results of my test recalling me.
    It allows me to refactor my code at any time. It also enables me to more easily
    reflect on the quality of the code, because it can be changed and instantly checked.
    I could go on with my praising and more or less redo the first chapter of this
    book. But I won't, as it is time to conclude for now. I hope you enjoyed reading
    and practising with me, as much as I did while writing.
  prefs: []
  type: TYPE_NORMAL
