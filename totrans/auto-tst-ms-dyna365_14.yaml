- en: Test-Driven Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As the title of this appendix tells us, we will be talking about **Test-Driven
    Development** (**TDD**), a term we haven''t used anywhere in this book so far.
    I deliberately chose not to. Why? Because I wanted us to focus on the following
    topics that I wanted to discuss in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: Why we should use automated tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When to use automated tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to write automated tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I didn't want anyone getting blocked by their knowledge of TDD, with it being
    a proven methodology, but also surrounded with skepticism. It makes sense, however, to
    pay some attention to it, as there are a number of practical parts of TDD that
    are worth drawing attention to. Hence, this appendix will not fully expose what
    TDD is. Rather, it will be a condensed description with annotations that point
    out parts that can be of value to your daily development practices.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this appendix, we will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: A short description of TDD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The so-called red-green-refactor mantra as the way to implement code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How close our test examples were to TDD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indeed, we did use the term **Acceptance Test-Driven Development** (**ATDD**),
    which was introduced in [Chapter 3](fdf2b65f-be7c-4710-a3a9-39f4cc34ee5c.xhtml),
    *The Test Tool and Standard Tests*, which contains the word TDD, and we did adopt
    a part of ATDD, but it is not equal to the TDD methodology.
  prefs: []
  type: TYPE_NORMAL
- en: TDD, a short description
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The shortest possible description of TDD is actually the term itself. It is
    self-containing. It is describing that, by using this as your methodology for
    your software application development, the development will be driven by tests.
    Tests need to be defined to drive the writing of your application code, and in
    this way, your tests are directly derived from the requirements. This is an often
    uttered one-liner to describe TDD in a nutshell:'
  prefs: []
  type: TYPE_NORMAL
- en: '"No tests, no code."'
  prefs: []
  type: TYPE_NORMAL
- en: The ultimate consequence of this is that you will never build application code
    that does not have tests to it. And, as the tests are one-to-one related to the
    requirements, your application code should not have any undocumented features.
  prefs: []
  type: TYPE_NORMAL
- en: 'But this description is actually not the basic definition of TDD. TDD is defined
    only by the following two rules, and everything else is deduced from that:'
  prefs: []
  type: TYPE_NORMAL
- en: Never write a single line of code unless you have a failing automated test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eliminate duplication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The *no tests, no code* one-liner is a direct result of these two rules. The
    following are the actionable steps derived from these rules:'
  prefs: []
  type: TYPE_NORMAL
- en: Transform requirements to code by defining the tests, a so-called **test list**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code one test at a time and write application code against it only to make the
    test pass
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refactor the code, both test and application, to clean up and eliminate duplication;
    the rerun of the test ensures that refactored code is still valid
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The great gain you will accomplish by bringing this into your daily practice
    is that you will end up with code that has been tested already, you only implement
    what is required, and you have accompanying test collateral that allows you to
    run and check the sanity of the application code.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to read more on TDD, read the series I wrote years ago on TDD on
    my blog at: [https://dynamicsuser.net/nav/b/vanvugt/posts/test-driven-development-in-nav-intro](https://dynamicsuser.net/nav/b/vanvugt/posts/test-driven-development-in-nav-intro),
    there you will also find a number of useful references.'
  prefs: []
  type: TYPE_NORMAL
- en: TDD, red-green-refactor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Given a test list, the *actionable steps* are described by what has become
    the *red-green-refactor* mantra. Where red and green respectively refer to a failing
    (red) and succeeding (green) test, this *mantra* tells you to take the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Take a test from the list and write the test code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compile the test code yielding **red** as the application code that is not yet
    there
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement *just enough* application code to make the test code compile
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the test seeing it probably fail, still **red**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adjust the application code *just enough* to make it pass, that is, **green**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Refactor** your code, either test or application code or both, one after
    the other, and rerun the test after each change to prove all code is still well
    (green)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move to the next test on the list and repeat from *Step 1*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The *red-green-refactor* mantra urges you to get things done step by step and
    as efficiently, that is, as minimalistic as possible. Only implement what is needed
    and one thing at a time. Taking this mantra seriously, your first test might end
    up being of a somewhat ridiculous level. Given that the test list has sufficient
    details, that is, consist of an adequate number of tests, implementing the next
    test will bring more detail to your code.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need an example of the *red-green-refactor* mantra in action, this can
    be found at: [https://dynamicsuser.net/nav/b/vanvugt/posts/test-driven-development-in-nav-test-1](https://dynamicsuser.net/nav/b/vanvugt/posts/test-driven-development-in-nav-test-1)'
  prefs: []
  type: TYPE_NORMAL
- en: TDD and our test examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What if we applied TDD to our test examples in [Section 3](13a9d0b2-ae46-45ba-8790-8489439e70fc.xhtml),
    *Designing and Building Automated Tests for Microsoft Dynamics 365 Business Central*?
  prefs: []
  type: TYPE_NORMAL
- en: 'To be honest, it wouldn''t have looked much different, as a lot of the TDD
    principles were implicitly exercised as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: By defining our customer wishes by means of the ATDD scenarios, we created ourselves
    a sufficient set of tests, that is, a test list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By implementing our tests with the four steps recipe, we did the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We took small steps
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We created a structure for each test based on the `GIVEN`-`WHEN`-`THEN` tags
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We constructed the real code to get it to work
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We ran the test, and if **red**, we adjusted the code till the test passed,
    that is **green**
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: And even though not worked out in the test examples as such, as discussed at
    the end of [Chapter 7](bb9ee41e-4c60-4a27-8fad-5343adfcd86a.xhtml), *From Customer
    Wish to Test Automation - And Some More*, I did refactor the code to get reusable
    parts and profit a lot from the automated tests I had available
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The only deviation from TDD is that application code was conceived before we
    started working on the test code. By the way, that's also how I prepared the `LookupValue`
    extension for this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The conclusion from this is, in my humble opinion, you can perfectly use TDD
    for Business Central. The biggest challenge is to get your team disciplined to
    spec the customer wish in ATDD scenarios. Note that the following describes the
    simplest way to start exercising this for bugs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Get the bug described in ATDD format:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In a way, this is not far off from what you do when reproducing the bug
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that the ATDD scenario is describing how the feature is expected to work
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Based on the ATDD scenario(s), you build the test code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the test(s) should lead to red, as the bug is still there
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fix the application code to make the test pass: green'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Wrapping up this appendix, I would point out that the value of TDD is that it
    shows that it makes a lot of sense to do you work in small steps, define tests
    before coding (ATDD), and take one step at a time obeying the red-green-refactor
    rule.
  prefs: []
  type: TYPE_NORMAL
