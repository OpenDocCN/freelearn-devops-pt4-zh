- en: Test-Driven Development
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试驱动开发
- en: 'As the title of this appendix tells us, we will be talking about **Test-Driven
    Development** (**TDD**), a term we haven''t used anywhere in this book so far.
    I deliberately chose not to. Why? Because I wanted us to focus on the following
    topics that I wanted to discuss in this book:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本附录标题所示，我们将讨论**测试驱动开发**（**TDD**），这是我们在本书中到目前为止尚未提到的一个术语。我故意没有使用它。为什么？因为我希望我们专注于本书中我想讨论的以下主题：
- en: Why we should use automated tests
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么我们应该使用自动化测试
- en: When to use automated tests
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 何时使用自动化测试
- en: How to write automated tests
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何编写自动化测试
- en: I didn't want anyone getting blocked by their knowledge of TDD, with it being
    a proven methodology, but also surrounded with skepticism. It makes sense, however, to
    pay some attention to it, as there are a number of practical parts of TDD that
    are worth drawing attention to. Hence, this appendix will not fully expose what
    TDD is. Rather, it will be a condensed description with annotations that point
    out parts that can be of value to your daily development practices.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我不希望任何人因为他们对TDD的了解而被阻碍，尽管它是一种经过验证的方法论，但也常常伴随着怀疑。然而，关注TDD是有意义的，因为TDD有很多实际部分值得关注。因此，本附录不会全面揭示TDD是什么。相反，它将是一个简洁的描述，并附有注释，指出对您日常开发实践有价值的部分。
- en: 'In this appendix, we will discuss the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，我们将讨论以下主题：
- en: A short description of TDD
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TDD的简短描述
- en: The so-called red-green-refactor mantra as the way to implement code
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所谓的红绿重构法则（red-green-refactor）是实现代码的一种方式
- en: How close our test examples were to TDD
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的测试示例与TDD的接近程度
- en: Indeed, we did use the term **Acceptance Test-Driven Development** (**ATDD**),
    which was introduced in [Chapter 3](fdf2b65f-be7c-4710-a3a9-39f4cc34ee5c.xhtml),
    *The Test Tool and Standard Tests*, which contains the word TDD, and we did adopt
    a part of ATDD, but it is not equal to the TDD methodology.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，我们使用了**验收测试驱动开发**（**ATDD**）这一术语，该术语在[第3章](fdf2b65f-be7c-4710-a3a9-39f4cc34ee5c.xhtml)《测试工具与标准测试》中出现，包含了TDD这个词，我们确实采用了ATDD的一部分，但它并不等同于TDD方法论。
- en: TDD, a short description
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TDD的简短描述
- en: 'The shortest possible description of TDD is actually the term itself. It is
    self-containing. It is describing that, by using this as your methodology for
    your software application development, the development will be driven by tests.
    Tests need to be defined to drive the writing of your application code, and in
    this way, your tests are directly derived from the requirements. This is an often
    uttered one-liner to describe TDD in a nutshell:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: TDD的最简短描述实际上就是这个术语本身。它是自包含的。它描述的是，通过将其作为软件应用开发的方法论，开发将由测试驱动。测试需要被定义以驱动应用代码的编写，通过这种方式，您的测试直接源自需求。这是用一句话概述TDD的常见表达：
- en: '"No tests, no code."'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '"没有测试，就没有代码。"'
- en: The ultimate consequence of this is that you will never build application code
    that does not have tests to it. And, as the tests are one-to-one related to the
    requirements, your application code should not have any undocumented features.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的结果是，你永远不会编写没有测试的应用代码。而且，由于测试与需求是一对一对应的，您的应用代码不应包含任何未文档化的功能。
- en: 'But this description is actually not the basic definition of TDD. TDD is defined
    only by the following two rules, and everything else is deduced from that:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 但这个描述实际上并不是TDD的基本定义。TDD仅通过以下两条规则来定义，其他一切都由此推导出：
- en: Never write a single line of code unless you have a failing automated test
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除非您有一个失败的自动化测试，否则绝不编写一行代码
- en: Eliminate duplication
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消除重复
- en: 'The *no tests, no code* one-liner is a direct result of these two rules. The
    following are the actionable steps derived from these rules:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '*没有测试，就没有代码*的这句简短语句直接源自这两条规则。以下是从这些规则中得出的可操作步骤：'
- en: Transform requirements to code by defining the tests, a so-called **test list**
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过定义测试，将需求转化为代码，这就是所谓的**测试列表**
- en: Code one test at a time and write application code against it only to make the
    test pass
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一次编写一个测试，并仅针对它编写应用代码以使测试通过
- en: Refactor the code, both test and application, to clean up and eliminate duplication;
    the rerun of the test ensures that refactored code is still valid
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重构代码，包括测试代码和应用代码，以清理并消除重复；重新运行测试以确保重构后的代码仍然有效
- en: The great gain you will accomplish by bringing this into your daily practice
    is that you will end up with code that has been tested already, you only implement
    what is required, and you have accompanying test collateral that allows you to
    run and check the sanity of the application code.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将这一做法融入到你的日常实践中，你将获得的巨大收益是：你最终会得到已经过测试的代码，你只实现所需的部分，同时你还有伴随的测试资料，允许你运行并检查应用代码的正确性。
- en: 'If you want to read more on TDD, read the series I wrote years ago on TDD on
    my blog at: [https://dynamicsuser.net/nav/b/vanvugt/posts/test-driven-development-in-nav-intro](https://dynamicsuser.net/nav/b/vanvugt/posts/test-driven-development-in-nav-intro),
    there you will also find a number of useful references.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于TDD的内容，可以阅读我多年前在我的博客上写的关于TDD的系列文章，网址是：[https://dynamicsuser.net/nav/b/vanvugt/posts/test-driven-development-in-nav-intro](https://dynamicsuser.net/nav/b/vanvugt/posts/test-driven-development-in-nav-intro)，在那里你还会找到一些有用的参考资料。
- en: TDD, red-green-refactor
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TDD，红绿重构
- en: 'Given a test list, the *actionable steps* are described by what has become
    the *red-green-refactor* mantra. Where red and green respectively refer to a failing
    (red) and succeeding (green) test, this *mantra* tells you to take the following
    steps:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个测试列表，*可操作步骤*通过已成为*红绿重构*的口号来描述。这里的红色和绿色分别指代失败（红色）和成功（绿色）的测试，这个*口号*告诉你要采取以下步骤：
- en: Take a test from the list and write the test code
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从列表中选择一个测试并编写测试代码
- en: Compile the test code yielding **red** as the application code that is not yet
    there
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译测试代码，结果是**红色**，因为应用代码尚未到位
- en: Implement *just enough* application code to make the test code compile
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现*足够的*应用代码，使测试代码能够编译通过
- en: Run the test seeing it probably fail, still **red**
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行测试，看它可能失败，仍然是**红色**
- en: Adjust the application code *just enough* to make it pass, that is, **green**
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调整应用代码，*足够的*以使其通过，即**绿色**
- en: '**Refactor** your code, either test or application code or both, one after
    the other, and rerun the test after each change to prove all code is still well
    (green)'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**重构**你的代码，无论是测试代码、应用代码还是两者，依次进行，每次变更后重新运行测试以验证所有代码仍然良好（绿色）'
- en: Move to the next test on the list and repeat from *Step 1*
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动到列表上的下一个测试并从*步骤1*开始重复
- en: The *red-green-refactor* mantra urges you to get things done step by step and
    as efficiently, that is, as minimalistic as possible. Only implement what is needed
    and one thing at a time. Taking this mantra seriously, your first test might end
    up being of a somewhat ridiculous level. Given that the test list has sufficient
    details, that is, consist of an adequate number of tests, implementing the next
    test will bring more detail to your code.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*红绿重构*口号促使你一步一步地高效完成任务，也就是尽可能*简约*。只实现所需的内容，每次做一件事。认真对待这个口号，你的第一个测试可能会非常基础。鉴于测试列表已经有足够的细节，即包含了足够数量的测试，实施下一个测试将为你的代码带来更多细节。'
- en: 'If you need an example of the *red-green-refactor* mantra in action, this can
    be found at: [https://dynamicsuser.net/nav/b/vanvugt/posts/test-driven-development-in-nav-test-1](https://dynamicsuser.net/nav/b/vanvugt/posts/test-driven-development-in-nav-test-1)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要一个*红绿重构*口号实际应用的例子，可以在以下网址找到：[https://dynamicsuser.net/nav/b/vanvugt/posts/test-driven-development-in-nav-test-1](https://dynamicsuser.net/nav/b/vanvugt/posts/test-driven-development-in-nav-test-1)
- en: TDD and our test examples
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TDD和我们的测试示例
- en: What if we applied TDD to our test examples in [Section 3](13a9d0b2-ae46-45ba-8790-8489439e70fc.xhtml),
    *Designing and Building Automated Tests for Microsoft Dynamics 365 Business Central*?
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将TDD应用到[第3节](13a9d0b2-ae46-45ba-8790-8489439e70fc.xhtml)中的测试示例，*设计和构建Microsoft
    Dynamics 365 Business Central的自动化测试*，会怎么样呢？
- en: 'To be honest, it wouldn''t have looked much different, as a lot of the TDD
    principles were implicitly exercised as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 老实说，它看起来也不会有太大不同，因为许多TDD原则已经隐性地被以下方式执行：
- en: By defining our customer wishes by means of the ATDD scenarios, we created ourselves
    a sufficient set of tests, that is, a test list
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用ATDD场景定义客户需求，我们创建了足够的测试集，也就是测试列表
- en: 'By implementing our tests with the four steps recipe, we did the following:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用这四步方法来实现我们的测试，我们做了以下事情：
- en: We took small steps
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们采取了小步伐
- en: We created a structure for each test based on the `GIVEN`-`WHEN`-`THEN` tags
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们为每个测试创建了一个基于`GIVEN`-`WHEN`-`THEN`标签的结构
- en: We constructed the real code to get it to work
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们构建了实际的代码以使其工作
- en: We ran the test, and if **red**, we adjusted the code till the test passed,
    that is **green**
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们运行测试，如果是**红色**，我们调整代码直到测试通过，即**绿色**
- en: And even though not worked out in the test examples as such, as discussed at
    the end of [Chapter 7](bb9ee41e-4c60-4a27-8fad-5343adfcd86a.xhtml), *From Customer
    Wish to Test Automation - And Some More*, I did refactor the code to get reusable
    parts and profit a lot from the automated tests I had available
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽管在测试示例中没有完全体现出来，正如在[第七章](bb9ee41e-4c60-4a27-8fad-5343adfcd86a.xhtml)的结尾部分所讨论的，*从客户需求到测试自动化——以及更多内容*，我确实重构了代码，提取了可复用的部分，并从我可用的自动化测试中获益良多。
- en: The only deviation from TDD is that application code was conceived before we
    started working on the test code. By the way, that's also how I prepared the `LookupValue`
    extension for this book.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一偏离 TDD 的地方是，在我们开始编写测试代码之前，应用程序代码已经被构思出来。顺便说一下，这也是我为本书准备 `LookupValue` 扩展的方式。
- en: 'The conclusion from this is, in my humble opinion, you can perfectly use TDD
    for Business Central. The biggest challenge is to get your team disciplined to
    spec the customer wish in ATDD scenarios. Note that the following describes the
    simplest way to start exercising this for bugs:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人的结论是，你完全可以在 Business Central 中使用 TDD。最大的挑战是让你的团队在 ATDD 场景中规范客户需求。请注意，以下内容描述了开始实践这一方法来解决
    bug 的最简单方式：
- en: 'Get the bug described in ATDD format:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以 ATDD 格式描述 bug：
- en: In a way, this is not far off from what you do when reproducing the bug
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从某种意义上说，这和你在重现 bug 时所做的非常相似
- en: Note that the ATDD scenario is describing how the feature is expected to work
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，ATDD 场景描述了该功能的预期工作方式
- en: Based on the ATDD scenario(s), you build the test code
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于 ATDD 场景，你构建测试代码
- en: Running the test(s) should lead to red, as the bug is still there
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行测试应该导致红色结果，因为 bug 仍然存在
- en: 'Fix the application code to make the test pass: green'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复应用程序代码，使测试通过：绿色
- en: Summary
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Wrapping up this appendix, I would point out that the value of TDD is that it
    shows that it makes a lot of sense to do you work in small steps, define tests
    before coding (ATDD), and take one step at a time obeying the red-green-refactor
    rule.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在总结本附录时，我想指出，TDD 的价值在于它表明以小步前进的方式进行工作、在编码之前定义测试（ATDD），并遵循红绿重构规则逐步进行，确实是非常有意义的。
