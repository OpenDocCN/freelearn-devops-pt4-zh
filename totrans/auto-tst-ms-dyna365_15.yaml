- en: Setting Up VS Code and Using the GitHub Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a book about writing automated tests in Microsoft Dynamics 365 Business
    Central, not about how to develop extensions with VS Code and the AL language.
    It is assumed that you know how to use VS Code in conjunction with the AL development
    language and how Dynamics 365 Business Central works as a platform and an application.
    Based on this, we dived straight into coding in [Chapter 2](1e679d13-4037-48e2-b8ae-f550f507f8c9.xhtml),
    *The Testability Framework*, without explaining anything about the development
    tools we are using, and continued to do that in the following chapters.
  prefs: []
  type: TYPE_NORMAL
- en: In this appendix, however, we pay some attention to VS Code and AL development,
    and the code examples to be found in the repository on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: VS Code and AL development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are new to extension development with VS Code and the AL language, you
    might want to practice this first. There are various resources out there, but
    a very comprehensive one, though not too voluminous, is *Dynamics 365 Business
    Central* *Development Quick Start Guide* by Stefano Demiliani and Duilio Tacconi.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a link to the Packt page where you also can order the book: [https://www.packtpub.com/business/dynamics-365-business-central-development-quick-start-guide](https://www.packtpub.com/business/dynamics-365-business-central-development-quick-start-guide)'
  prefs: []
  type: TYPE_NORMAL
- en: VS Code project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In *Dynamics 365 Business Central* *Development Quick Start Guide*, Stefano
    Demiliani and Duilio Tacconi explain in a practical way how to set up a new extension
    project in VS Code, start programming in AL, and deploy the extension to Business
    Central. The projects you will find in the GitHub repository for this book have
    been created in the same way: for each chapter there is a separate folder containing
    the AL code objects and the `app.json` file. If you have been working on extensions
    already, you will notice that one major resource is missing: the `launch.json`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that we will discuss the structure of the GitHub repository in more detail
    in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: launch.json
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To be able to use a chapter folder as a complete VS Code AL extension project
    folder, you need to add a `launch.json` file to it. The `launch.json` file is
    typically stored in the `.vscode` subfolder of the project folder and contains
    information on the Business Central installation that the extension will be launched
    on. To get a `.vscode` folder with a `launch.json` file, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open VS Code with the AL Language extension installed
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the `AL: GO!` command to create a new VS Code AL project'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this project, configure the `launch.json` file to set up a relation with
    the Business Central installation you are going to perform your test coding on
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy this `.vscode` folder to the chapter project folder you want to work with
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your `launch.json` might look somewhat like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Compared to the default `launch.json `file, you will note that I have added/updated
    a couple of useful keywords, such as `startupObjectId`, the startup page 130401,
    which is the `Test Tool` page.
  prefs: []
  type: TYPE_NORMAL
- en: You will find more details in *Dynamics 365 Business Central* *Development Quick
    Start Guide,* by Stefano Demiliani and Duilio Tacconi.
  prefs: []
  type: TYPE_NORMAL
- en: app.json
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `app.json` file, also called the manifest, defines the meta description
    of the extension and has been provided for each chapter folder already on GitHub.
    Here is the one for [Chapter 5](56634efe-664c-421a-9582-b2a6ae69722a.xhtml), [Chapter
    6](0f8efb81-438e-48ed-9f7f-bcfa5caa8e92.xhtml), [Chapter 7](bb9ee41e-4c60-4a27-8fad-5343adfcd86a.xhtml), and
    [Chapter 9](795b3870-b6f5-43be-953c-0ffd01db9102.xhtml) only listing relevant
    parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Instead of using the `app.json` file, as provided on GitHub, you might also
    use the `app.json` file of a newly created VS Code AL project folder, such as
    the one created previously, to get a `launch.json` file. If you do that, make
    sure that your extension has a different (and unique) name and ID, as I already,
    while working on this book, deployed the extension `LookupValue` a zillion times.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Tip #10 of the *Top tips and tricks on how to create Per-tenant extensions*
    blog ([https://simplanova.com/top-tips-tricks-per-tenant-extensions/](https://simplanova.com/top-tips-tricks-per-tenant-extensions/)),
    Dmitry Katson explains what happens if your extension is not unique and how to
    make it unique.'
  prefs: []
  type: TYPE_NORMAL
- en: The GitHub repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The various code examples we used in this book have been uploaded in a dedicated
    GitHub repository. This repository can be accessed through this link: [https://github.com/PacktPublishing/Automated-Testing-in-Microsoft-Dynamics-365-Business-Central](https://github.com/PacktPublishing/Automated-Testing-in-Microsoft-Dynamics-365-Business-Central).'
  prefs: []
  type: TYPE_NORMAL
- en: Structure of the GitHub repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'On the main page of this repository, you will find the following folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ATDD Scenarios`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Chapter 2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Chapter 5 (LookupValue Extension)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Chapter 6 (LookupValue Extension)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Chapter 7 (LookupValue Extension) - refactored and completed`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Chapter 7 (LookupValue Extension)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Chapter 9 (LookupValue Extension)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LookupValue Extension (app only)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LookupValue Test Extension (test only)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we will discuss what the various folders contain. Notice that
    GitHub puts them in alphabetical order. This does not relate to the order in which
    the folders are used in the book. However, I will elaborate on the order of the
    book.
  prefs: []
  type: TYPE_NORMAL
- en: Like any other GitHub repository, ours also contains a `LICENSE` and `README.md`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This folder contains the code examples from [Chapter 2](1e679d13-4037-48e2-b8ae-f550f507f8c9.xhtml),
    *The Testability Framework*, including the `MyTestsExecutor` page and the `app.json` file
    that allows you to deploy the code as an extension.
  prefs: []
  type: TYPE_NORMAL
- en: ATDD Scenarios
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This folder holds the following two Excel files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Clean sheet.xlsx`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LookupValue.xlsx`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `LookupValue` file contains a listing of all **Acceptance Test-Driven Development**
    (**ATDD**) scenarios, that is `GIVEN`-`WHEN`-`THEN`, detailing the full customer
    wish, as introduced in [Chapter 5](56634efe-664c-421a-9582-b2a6ae69722a.xhtml),
    *From Customer Wish to Test Automation - The Basics*, for our `LookupValue` extension.
    This was elaborated on further in [Chapter 5](56634efe-664c-421a-9582-b2a6ae69722a.xhtml) through
    to [Chapter 7](bb9ee41e-4c60-4a27-8fad-5343adfcd86a.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: The `Clean sheet.xlsx` file is a ready to use clean version to use to write
    your own ATDD scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: LookupValue Extension (app only)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This folder contains the application code of the `LookupValue` extension, the
    application code we have been writing test code for in [Chapter 5](56634efe-664c-421a-9582-b2a6ae69722a.xhtml), [Chapter
    6](0f8efb81-438e-48ed-9f7f-bcfa5caa8e92.xhtml), [Chapter 7](bb9ee41e-4c60-4a27-8fad-5343adfcd86a.xhtml),
    and [Chapter 9](795b3870-b6f5-43be-953c-0ffd01db9102.xhtml), including the `app.json` file
    that allows you to deploy the code as an extension. Notice that it already contains
    a `Test Codeunits` folder with the bare structure of the first codeunit build
    in [Chapter 5](56634efe-664c-421a-9582-b2a6ae69722a.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 5 (LookupValue Extension)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting from the code in the `LookupValue Extension (app only)` folder, this
    folder adds the completed code examples from [Chapter 5](56634efe-664c-421a-9582-b2a6ae69722a.xhtml),
    *From Customer Wish to Test Automation - The Basics*, to the extension. It also
    includes the `app.json` file that allows you to deploy the code as an extension.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 6 (LookupValue Extension)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting from the code in the `Chapter 5 (LookupValue Extension)` folder, this
    folder adds the completed code examples from [Chapter 6](0f8efb81-438e-48ed-9f7f-bcfa5caa8e92.xhtml),
    *From Customer Wish to Test Automation - Next Level*. It also includes the `app.json` file
    that allows you to deploy the code as an extension.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 7 (LookupValue Extension)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting from the code in the `Chapter 6 (LookupValue Extension)` folder, this
    folder adds the completed code examples from [Chapter 7](bb9ee41e-4c60-4a27-8fad-5343adfcd86a.xhtml),
    *From Customer Wish to Test Automation - And Some More*. It also includes the
    `app.json` file that allows you to deploy the code as an extension.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 7 (LookupValue Extension) - refactored and completed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This folder contains the refactored and completed application and test code
    for the whole `LookupValue` extension, including the `app.json` file that allows
    you to deploy the code as an extension.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 9 (LookupValue Extension)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting from the code in the `Chapter 7 (LookupValue Extension) - refactored
    and completed` folder, this folder adds the completed code examples from [Chapter
    9](795b3870-b6f5-43be-953c-0ffd01db9102.xhtml), *Getting Business Central Standard
    Tests Working on Your Code*. It also includes the `app.json` file that allows
    you to deploy the code as an extension.
  prefs: []
  type: TYPE_NORMAL
- en: LookupValue Test Extension (test only)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned already in the book, when releasing an extension, it is best practice
    to separate the application from the test code. For `AppSource`, this is even
    a requirement. This means that the final test extension is built with a dependency
    on the real extension. This folder contains a separate test extension that belongs
    to the extension in the `LookupValue Extension (app only)` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Notes on the AL code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, a final couple of notes on the code on GitHub and the code examples in
    the book.
  prefs: []
  type: TYPE_NORMAL
- en: VS Code versus C/SIDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book has been focused completely on the modern way of developing a feature,
    by means of an extension, for Microsoft Dynamics 365 Business Central. The code
    on GitHub and the code examples in the book are, therefore, all in the AL language.
    But all of the principles that have been presented and used do also apply to developing
    automated tests in C/SIDE, this being the development environment for Microsoft
    Dynamics NAV. At this very moment, the standard application and test code of Business
    Central is still provided by Microsoft in C/SIDE objects.
  prefs: []
  type: TYPE_NORMAL
- en: Prefix or suffix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When building your own extension, it is best practice to make use of a so-called
    *prefix* or *suffix* in the names of your objects, fields, and controls. We chose
    not to use a prefix/suffix for the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: The `LookupValue` extension is not a registered extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The use of a prefix/suffix would not contribute to the readability of the code
    examples
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'More information on the usage of a *prefix* or *suffix* can be found here:
    [http://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/compliance/apptest-prefix-suffix](http://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/compliance/apptest-prefix-suffix)'
  prefs: []
  type: TYPE_NORMAL
- en: Word wrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When adding code examples to a book, there is always the challenge of how to
    neatly format long-lined statements to keep the code readable. In the code examples
    in this book, this has been done by enforcing *word wrap,* even though the code
    might not even compile anymore. All of the code in the GitHub repository, however,
    is technically OK.
  prefs: []
  type: TYPE_NORMAL
