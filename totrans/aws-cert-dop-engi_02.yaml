- en: 'Chapter 1: Amazon Web Service Pillars'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DevOps is, at its heart, a combination of the skills of development and operations
    and breaking down the walls between these two different teams. DevOps includes
    enabling developers to perform operational tasks easily. DevOps also involves
    empowering operational team members to create their Infrastructure as Code and
    use other coding techniques, such as continuous integration pipelines, to spin
    up the same infrastructure in multiple regions quickly.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will go through the services and concepts that are part of
    the DevOps professional exam so that you have a solid understanding from a practical
    standpoint, in terms of both explanations and hands-on exercises.
  prefs: []
  type: TYPE_NORMAL
- en: Becoming Amazon Web Services (AWS) Certified not only gives you instant validation
    of the technical skills that you hold and maintain – it also strengthens you as
    a technical professional. The AWS DevOps Engineer Professional Certification is
    a cumulative test that incorporates the base knowledge of fundamental AWS services,
    including system operations capabilities for running, managing, and monitoring
    workloads in AWS. This is in addition to developing and deploying code to functions,
    containers, and instances.
  prefs: []
  type: TYPE_NORMAL
- en: We go look at the test itself in more depth in [*Chapter 23*](B17405_23_Final_JM_ePub.xhtml#_idTextAnchor501),
    *Overview of the DevOps Professional Certification Test*, as well as provide tips
    for taking the exam.
  prefs: []
  type: TYPE_NORMAL
- en: The AWS pillars are the five guiding principles that guide architects and developers
    in generally accepted cloud architecture and design. They are subtly referenced
    in the DevOps Professional exam, but the pillars and their guidelines are tenets
    of best practices for working with any cloud service provider – especially Amazon
    Web Services. These are all guiding principles in DevOps practices and pipelines,
    and having a sound understanding of these five items will not only help you come
    exam time, but serve you throughout your DevOps career journey.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Operational excellence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reliability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance efficiency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cost optimization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service pillars overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At first glance, you may be wondering why we aren't just jumping right into
    AWS, **continuous integration/continuous delivery** (**CI/CD**), and other DevOps
    topics. The main reason is that these five pillars are the foundational fabric
    of the exams. In addition, they will help you provide the most effective, dependable,
    and efficient environment for your company or clients. These design principles
    are not only important when architecting for success on Amazon Web Services, or
    any cloud provider for that matter, but in guiding the practices that you use
    throughout your day-to-day endeavors.
  prefs: []
  type: TYPE_NORMAL
- en: Once you become familiar with these pillars, you will see them and their themes
    in the testing questions as you go down your path for certification. This is especially
    true when working to obtain the DevOps Professional Certification as there are
    specific sections for Operations, Security, and Reliability.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the five pillars of a well-architected framework:'
  prefs: []
  type: TYPE_NORMAL
- en: Operational excellence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reliability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance efficiency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cost optimization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use these pillars as the guiding principles, not only for designing your workloads
    in AWS but also for improving and refactoring current workloads. Every organization
    should strive to achieve well-architected applications and systems. Therefore,
    improving any AWS applications you are working on will make you a valuable asset.
    Now, let's look at each of these pillars in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Operational excellence
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we look at the *operational excellence* pillar, especially in the context
    of DevOps, this is one – if not the most – important service pillar for your day-to-day
    responsibilities. We will start by thinking about how our teams are organized;
    after all, the DevOps movement came about from breaking down silos between Development
    and Operations teams.
  prefs: []
  type: TYPE_NORMAL
- en: Question – How does your team determine what its priorities are?
  prefs: []
  type: TYPE_NORMAL
- en: '* Does it talk to customers (whether they''re internal or external)?'
  prefs: []
  type: TYPE_NORMAL
- en: '* Does it get its direction from product owners who have drawn out a roadmap?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Amazon outlines five design principles that incorporate operational excellence
    in the cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: Performing Operations as Code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refining operations frequently
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making small, frequent, and reversible changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anticipating failure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning from all operational failures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's take a look at each of these operational design principals in detail to
    see how they relate to your world as a DevOps engineer. As you go through the
    design principles of not only this pillar but all the service pillars, you will
    find that the best practices are spelled out, along with different services, to
    help you complete the objective.
  prefs: []
  type: TYPE_NORMAL
- en: Performing Operations as Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the contrivance of Infrastructure as Code, the cloud allows teams to create
    their applications using code alone, without the need to interact with a graphical
    interface. Moreover, it allows any the underlying networking, services, datastores,
    and more that''s required to run your applications and workloads. Moving most,
    if not all, the operations to code does quite a few things for a team:'
  prefs: []
  type: TYPE_NORMAL
- en: Distributes knowledge quickly and prevents only one person on the team from
    being able to perform an operation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows for a peer review of the environment to be conducted, along with quick
    iterations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows changes and improvements to be tested quickly, without the production
    environment being disrupted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In AWS, you can perform Operations as Code using a few different services, such
    as **CloudFormation**, the **Cloud Development Kit** (**CDK**), language-specific
    **software development kits** (**SDK**), or by using the **command-line interface**
    (**CLI**).
  prefs: []
  type: TYPE_NORMAL
- en: Refining operations frequently
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you run your workload in the cloud, you should be in a continual improvement
    process for not only your application and infrastructure but also your methods
    of operation. Teams that run in an agile process are familiar with having a retrospective
    meeting after each sprint to ask three questions: what went well, what didn''t
    go well, and what has room for improvement?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Operating a workload in the cloud presents the same opportunities for retrospection
    and to ask those same three questions. It doesn''t have to be after a sprint,
    but it should occur after events such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Automated, manual, or hybrid deployments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automated, manual, or hybrid testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After a production issue
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running a game day simulation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After each of these situations, you should be able to look at your current operational
    setup and see what could be better. If you have step-by-step runbooks that have
    been created for incidents or deployments, ask yourself and your team whether
    there were any missing steps or steps that are no longer needed. If you had a
    production issue, did you have the correct monitoring in place to troubleshoot
    that issue?
  prefs: []
  type: TYPE_NORMAL
- en: Making small, frequent, and reversible changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we build and move workloads into the cloud, instead of placing multiple systems
    on a single server, the best design practices are to break any large monolith
    designs into smaller, decoupled pieces. With the pieces being smaller, decoupled,
    and more manageable, you can work with smaller changes that are more reversible,
    should a problem arise.
  prefs: []
  type: TYPE_NORMAL
- en: The ability to reverse changes can also come in the form of good coding practices.
    AWS CodeCommit allows Git tags in code repositories. By tagging each release once
    it has been deployed, you can quickly redeploy a previous version of your working
    code, should a problem arise in the code base. Lambda has a similar feature called
    versions.
  prefs: []
  type: TYPE_NORMAL
- en: Anticipating failure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Don't expect that just because you are moving to the cloud and the service that
    your application is relying on is labeled as a managed service, that you no longer
    need to worry about failures. Failures happen, maybe not often; however, when
    running a business, any sort of downtime can translate into lost revenue. Having
    a plan to mitigate risks (and also test that plan) can genuinely mean the difference
    in keeping your **service-level agreement** (**SLA**) or having to apologize or,
    even worse, having to give customers credits or refunds.
  prefs: []
  type: TYPE_NORMAL
- en: Learning from failure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Things fail from time to time, but when they do, it's important not to dwell
    on the failures. Instead, perform post-mortem analysis and find the lessons that
    can make the team and the workloads stronger and more resilient for the future.
    Sharing learning across teams helps bring everyone's perspective into focus. One
    of the main questions that should be asked and answered after failure is, *Could
    the issue be resolved with automatic remediation?*
  prefs: []
  type: TYPE_NORMAL
- en: One of the significant issues in larger organizations today is that in their
    quest of trying to be great, they stop being good. Sometimes, you need to be good
    at the things you do, especially on a daily basis. It can be a steppingstone to
    greatness. However, the eternal quest for excellence without the retrospective
    of what is preventing you from becoming good can sometimes be an exercise in spinning
    your wheels, and not gaining traction.
  prefs: []
  type: TYPE_NORMAL
- en: Example – operational excellence
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following relevant example, which shows the implementation
    of automated patching for the instances in an environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Operational excellence – automated patching groups'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.1_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.1 – Operational excellence – automated patching groups
  prefs: []
  type: TYPE_NORMAL
- en: If you have instances in your environment that you are self-managing and need
    to be updated with patch updates, then you can use **System Manager** – **Patch
    Manager** to help automate the task of keeping your operating systems up to date.
    This can be done on a regular basis using a Systems Manager Maintenance Task.
  prefs: []
  type: TYPE_NORMAL
- en: The initial step would be to make sure that the **SSM** agent (formally known
    as **Simple Systems Manager**) is installed on the machines that you want to stay
    up to date with patching.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you would create a patching baseline, which includes rules for auto-approving
    patches within days of their release, as well as a list of both approved and rejected
    patches.
  prefs: []
  type: TYPE_NORMAL
- en: After that, you may need to modify the IAM role on the instance to make sure
    that the SSM service has the correct permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Optionally, you can set up patch management groups. In the preceding diagram,
    we can see that we have two different types of servers, and they are both running
    on the same operating system. However, they are running different functions, so
    we would want to set up one patching group for the Linux servers and one group
    for the Database servers. The Database servers may only get critical patches,
    whereas the Linux servers may get the critical patches as well as the update patches.
  prefs: []
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next is the Security pillar of the AWS Well-Architected Framework. Today, security
    is at the forefront of everyone's minds. Bad actors are consistently trying to
    find vulnerabilities in any code and infrastructure (both on-premises and in the
    cloud). When looking back at the lessons learned from the first 10 years of AWS,
    CTO Werner Vogels said *Protecting your customers should always be your number
    one priority… And it certainly has been for AWS.* (Vogels, 2016)
  prefs: []
  type: TYPE_NORMAL
- en: It is everyone's job these days to have secure practices across all cloud systems.
    This (protection) includes the infrastructure and networking components that serve
    the application and using secure coding practices and data protection, ultimately
    ensuring that the customer has a secure experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you think about security, there are four main areas that the security
    pillar focuses on. They are shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – The four main areas of security in the security pillar'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.2_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.2 – The four main areas of security in the security pillar
  prefs: []
  type: TYPE_NORMAL
- en: 'The security pillar is constructed of seven principles:'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a strong identity foundation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling traceability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying security at all layers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating security best practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protecting data in transit and at rest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keeping people away from data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing for security events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we move through this book, you will find practical answers and solutions
    to some of the security principles introduced here in the security pillar. This
    will help you develop the muscle memory needed to instill security in everything
    you build, rather than putting your piece out there and letting the *security
    team* worry about it. Remember, security is everyone's responsibility. Initially,
    we will look at these security principles in a bit more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a strong identity foundation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When building a strong identity foundation, it all starts with actualizing the
    principle of least privilege. No user or role should have more or less permissions
    than it actually needs to perform its job or duties. Taking this a step further,
    if you are using IAM to manage your users, then ensure that a password policy
    is in place to confirm that passwords are being rotated on a regular basis, and
    that they don't become too stale. It is also a good idea to check that the IAM
    password policy is in sync with your corporate password policy.
  prefs: []
  type: TYPE_NORMAL
- en: Also, as your organization grows and managing users and permissions starts to
    become a more complex task, you should look to establish central identity management
    either with Amazon Single Sign-on or by connecting a corporate Active Directory
    server.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling traceability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Security events can leave you in a reactive state; however, your ability to
    react can rely on the amount of information you can gather about the event. Putting
    proper monitoring, logging, alerting, and the ability to audit your environments
    and systems in place before an event happens is crucial to being able to perform
    the correct assessments and steps, when the need arises.
  prefs: []
  type: TYPE_NORMAL
- en: Capturing enough logs from a multitude of sources can be done with AWS services
    such as CloudWatch Logs, VPC Flow Logs, CloudTrail, and others. We will look at
    logging and monitoring extensively in Part 3 of this book as it is important to
    the DevOps Professional exam.
  prefs: []
  type: TYPE_NORMAL
- en: '**Think about the following scenario**:'
  prefs: []
  type: TYPE_NORMAL
- en: Someone has gained access to a server via a weak password and compromised some
    data. You feel that you are currently capturing many logs; however, would you
    be able to figure out the following?
  prefs: []
  type: TYPE_NORMAL
- en: The username used to access the system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The IP address that was used where the access originated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The time access was started
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The records that were changed, modified, or deleted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How many systems were affected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying security at all layers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Securing all the levels of your environment helps protect you by giving your
    actions an extra expansiveness throughout your environment. To address network-level
    security, different VPCs can be secured using simple techniques such as Security
    Groups and Network ACLs. Seasoned AWS professionals know that additional security
    layers add an expansive security footprint – for example, at the edge (network
    access points to the AWS cloud), at the operating system level, and even making
    a *shift left* to secure the application code itself.
  prefs: []
  type: TYPE_NORMAL
- en: Automating security best practices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you and your team get more educated about secure practices in the cloud,
    repetitive tasks should become automated. This allows you to react quicker to
    events that are happening and even react when you don't realize when things are
    happening.
  prefs: []
  type: TYPE_NORMAL
- en: This should be a topic when you start to dive in headfirst. As a DevOps specialist,
    you are used to taking repetitive manual processes and making them more efficient
    with automation. Automation can take the form of automatically analyzing logs,
    removing or remediating resources that don't comply with your organization's security
    posture, and intelligently detecting threats.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Web Services has come out with tools to help with this process, including
    GuardDuty, CloudWatch, EventHub, and AWS Config.
  prefs: []
  type: TYPE_NORMAL
- en: Protecting data in transit and at rest
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bad actors are all around, constantly looking for exploitable data that is traveling
    across the internet unprotected. You definitely can't rely on end users to use
    best practices such as secure communications over VPN, so it is up to you and
    your team to put the best practices in place on the server side. Basic items such
    as implementing certificates on your load balancers, on your CloudFront distribution,
    or even at the server level allows transmissions to be encrypted while going from
    point to point.
  prefs: []
  type: TYPE_NORMAL
- en: On the same token, figuratively speaking, making sure that you authenticate
    network communications either by enabling **Transport Layer Security** (**TLS**)
    or IPsec at the protocol layer helps ensure that network communications are authenticated.
  prefs: []
  type: TYPE_NORMAL
- en: There are AWS services to help protect your data, both in transit and at rest,
    such as AWS Certificate Manager, AWS Shield, AWS **Web Application Firewall**
    (the other **WAF**), and Amazon CloudFront. The **Key Management Service** (**KMS**)
    can also help protect your data at rest by allowing you to create, use, and rotate
    cryptographic keys easily.
  prefs: []
  type: TYPE_NORMAL
- en: For a deeper look at protecting data in transit and at rest, see [*Chapter 19*](B17405_19_Final_JM_ePub.xhtml#_idTextAnchor447),
    *Protecting Data in Flight and at Rest*.
  prefs: []
  type: TYPE_NORMAL
- en: Using mechanisms to keep people away from data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are ways to automate how data is accessed, rather than allowing individuals
    to directly access the data. It is a better idea to have items that can be validated
    through a change control process. These would be items, such as System Manager
    runbooks or Lambda Functions, that would access the data. The opposite of this
    would be allowing direct access to data sources through either a bastion host
    or Elastic IP address/CNAME.
  prefs: []
  type: TYPE_NORMAL
- en: Providing this direct access can either lead to human mistakes or having a username
    and password compromised, which will ultimately lead to data loss or leakage.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing for security events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even if you enact all the security principles described previously, there is
    no guarantee that a security event won't be coming in the future. You are much
    better off practicing and having a prepared set of steps to enact quickly in case
    the need ever arises.
  prefs: []
  type: TYPE_NORMAL
- en: You may need to create one or more runbooks or playbooks that outline the steps
    of how to do things such as snapshotting an AMI for forensic analysis and moving
    it to a secured account (if available). If the time comes when these steps are
    necessary, there will be questions coming from many different places. The answers
    will have a timeline aspect to them. If the team whose responsibility is to perform
    these duties has never even practiced any of these tasks, nor has a guide been
    established to help them through the process, then valuable cycles will be wasted,
    just trying to get organized.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the *Shared Responsibility Model* between AWS and you, the
    customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – The AWS shared responsibility model'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.3_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.3 – The AWS shared responsibility model
  prefs: []
  type: TYPE_NORMAL
- en: Questions to ask
  prefs: []
  type: TYPE_NORMAL
- en: '* How do you protect your root account?'
  prefs: []
  type: TYPE_NORMAL
- en: '- Is there a **Multi-Factor Authentication** (**MFA**) device on the root account?'
  prefs: []
  type: TYPE_NORMAL
- en: '- Is there no use of the root account?'
  prefs: []
  type: TYPE_NORMAL
- en: '* How do you assign IAM users and groups?'
  prefs: []
  type: TYPE_NORMAL
- en: '* How do you delegate API/CLI access?'
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's learn about the five design principles for reliability in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Reliability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are five design principles for reliability in the cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: Automating recover from failure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing recovery procedures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scaling horizontally to increase aggregate workload availability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stopping guessing capacity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing changes in automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating recovery from failure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you think of automating recovery from failure, the first thing most people
    think of is a technology solution. However, this is not necessarily the context
    that is being referred to in the reliability service pillar. These points of failure
    really should be based on **Key Performance Indicators** (**KPIs**) set by the
    business.
  prefs: []
  type: TYPE_NORMAL
- en: 'As part of the recovery process, it''s important to know both the **Recovery
    Time Objective** (**RTO**) and **Recovery Point Objective** (**RPO**) of the organization
    or workload:'
  prefs: []
  type: TYPE_NORMAL
- en: '**RTO** (**Recovery Time Objective**): The maximum acceptable delay between
    the service being interrupted and restored'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RPO** (**Recovery Point Objective**): The maximum acceptable amount of time
    since the last data recovery point (backup) (Amazon Web Services, 2021)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing recovery procedures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In your cloud environment, you should not only test your workload functions
    properly, but also that they can recover from single or multiple component failures
    if they happen on a service, Availability Zone, or regional level.
  prefs: []
  type: TYPE_NORMAL
- en: Using practices such as Infrastructure as Code, CD pipelines, and regional backups,
    you can quickly spin up an entirely new environment. This could include your application
    and infrastructure layers, which will give you the ability to test that things
    work the same as in the current production environment and that data is restored
    correctly. You can also time how long the restoration takes and work to improve
    it by automating the recovery time.
  prefs: []
  type: TYPE_NORMAL
- en: Taking the proactive measure of documenting each of the necessary steps in a
    runbook or playbook allows for knowledge sharing, as well as fewer dependencies
    on specific team members who built the systems and processes.
  prefs: []
  type: TYPE_NORMAL
- en: Scaling horizontally to increase workload availability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When coming from a data center environment, planning for peak capacity means
    finding a machine that can run all the different components of your application.
    Once you hit the maximum resources for that machine, you need to move to a bigger
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you move from development to production or as your product or service grows
    in popularity, you will need to scale out your resources. There are two main methods
    for achieving this: scaling vertically or scaling horizontally:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Horizontal versus vertical scaling'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.4_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.4 – Horizontal versus vertical scaling
  prefs: []
  type: TYPE_NORMAL
- en: One of the main issues with scaling vertically is that you will hit the ceiling
    at some point in time, moving to larger and larger instances. At some point, you
    will find that there is no longer a bigger instance to move up to, or that the
    larger instance will be too cost-prohibitive to run.
  prefs: []
  type: TYPE_NORMAL
- en: Scaling horizontally, on the other hand, allows you to gain the capacity that
    you need at the time in a cost-effective manner.
  prefs: []
  type: TYPE_NORMAL
- en: Moving to a cloud mindset means decoupling your application components, placing
    multiple groupings of the same servers behind a load balancer, or pulling from
    a queue and optimally scaling up and down based on the current demand.
  prefs: []
  type: TYPE_NORMAL
- en: Stop guessing capacity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If resources become overwhelmed, then they have a tendency to fail, especially
    on-premises, as demands spike and those resources don't have the ability to scale
    up or out to meet demand.
  prefs: []
  type: TYPE_NORMAL
- en: There are service limits to be aware of, though many of them are called *soft
    limits*. These can be raised with a simple request or phone call to support. There
    are others called *hard limits*. They are set a specified number for every account,
    and there is no raising them.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Although there isn't a necessity to memorize all these limitations, it is a
    good idea to become familiar with them and know about some of them since they
    do show up in some of the test questions – not as pure questions, but as context
    for the scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Managing changes in automation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although it may seem easier and sometimes quicker to make a change to the infrastructure
    (or application) by hand, this can lead to infrastructure drift and is not a repeatable
    process. A best practice is to automate all changes using Infrastructure as Code,
    a code versioning system, and a deployment pipeline. This way, the changes can
    be tracked and reviewed.
  prefs: []
  type: TYPE_NORMAL
- en: Performance efficiency
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you and your architectural design team are coming from a data center infrastructure
    and a provisioning process takes weeks or months to get the system you need, then
    the quickness and availability of cloud resources is certainly a breath of fresh
    air. There is a need to understand how to select either the correct instance type
    or compute option (that is, server-based, containerized, or function-based compute)
    based on the workload requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have made an initial selection, a benchmarking process should be undertaken
    so that you can see if you are utilizing all the CPU and memory resources that
    you have allocated, as well as to confirm that the workload can handle the duty
    that it is required to handle. As you select your instance types, don't forget
    to factor in costs and make a note of the cost differences that could either save
    you money or cost you more as you perform your baseline testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'AWS provides native tools to create, deploy, and monitor benchmark tests, as
    shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.5 – Baseline testing with AWS tooling'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.5_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.5 – Baseline testing with AWS tooling
  prefs: []
  type: TYPE_NORMAL
- en: Using the tools provided by AWS, you can quickly spin up an environment for
    right-sizing, benchmarking, and load testing the initial value that you chose
    for your compute instance. You can also easily swap out other instance types to
    see how performant they are with the same test. Using CloudFormation to build
    the infrastructure, you can, in a quick and repeated fashion, run the tests using
    CodeBuild, all while gathering the metrics with CloudWatch to compare the results
    to make sure that you have made the best decision – with data to back up that
    decision. We will go into much more detail on how to use CodeBuild in [*Chapter
    7*](B17405_07_Final_JM_ePub.xhtml#_idTextAnchor188), *Using CloudFormation Templates
    to Deploy Workloads*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The *performance efficiency* pillar includes five design principles to help
    you maintain efficient workloads in the cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: Making advanced technologies easier for your team to implement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Being able to go global in minutes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using serverless architectures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allowing your teams to experiment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using technology that aligns with your goals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making advanced technologies easier for your team to implement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having the ability to use advanced technologies has become simplified in the
    cloud with the advent of managed services. No longer do you need full-time DBAs
    on staff who specialize in each different flavor of database, to test whether
    Postgres or MariaDB will perform in a more optimal fashion. In the same way, if
    you need replication for that database, you simply check a box, and you instantly
    have a Highly Available setup.
  prefs: []
  type: TYPE_NORMAL
- en: Time that would otherwise be spent pouring over documentation, trying to figure
    out how to install and configure particular systems, is now spent on the things
    that matter the most to your customers and your business.
  prefs: []
  type: TYPE_NORMAL
- en: Being able to go global in minutes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Depending on the application or service you are running, your customers may
    be centralized into one regional area, or they may be spread out globally. Once
    you have converted your infrastructure into code, there are built-in capabilities,
    either through constructs in CloudFormation templates or the CDK, that allow you
    to use regional parameters to quickly reuse a previously built pattern or architecture
    and deploy it to a new region of the world.
  prefs: []
  type: TYPE_NORMAL
- en: Even without deploying your full set of applications and architecture, there
    are still capabilities that allow you to serve a global audience using the **Content
    Delivery Network** (**CDN**) known as CloudFront. Here, you can create a secure
    global presence using the application or deploy content in the primary region,
    which is the origin.
  prefs: []
  type: TYPE_NORMAL
- en: Using serverless architectures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First and foremost, moving to serverless architectures means servers are off
    your to-do list. This means no more configuring servers with packages at startup,
    no more right-sizing servers, and no more patching servers.
  prefs: []
  type: TYPE_NORMAL
- en: Serverless architectures also mean that you have decoupled your application.
    Whether you are using functions, events, or microservices, each of these should
    be doing a specific task. And with each component doing only their distinct task,
    it allows you to fine-tune memory and utilize CPU at the task level, as well as
    scale out at a particular task level.
  prefs: []
  type: TYPE_NORMAL
- en: This is not the best option for every workload, but don't allow a workload to
    be disqualified just because it would need a little refactoring. When an application
    can be moved to a serverless architecture, it can make life easier, the application
    itself more efficient, and there are usually cost savings to reap as a result
    – especially in the long run.
  prefs: []
  type: TYPE_NORMAL
- en: Allowing your teams to experiment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you move to the cloud, you can quickly and constantly refactor your workload
    to improve it for both performance and cost. If you have built your Infrastructure
    as Code, creating a new temporary environment just for testing can be a quick
    and cost-efficient way to try new modular pieces of your application, without
    having to worry about disrupting any customers or other parts of the organization.
  prefs: []
  type: TYPE_NORMAL
- en: Many of the experiments may not work, but that is the nature of experimentation.
    Business is extremely competitive in this day and age, and finding an item that
    does work and makes your service faster, cheaper, and better can be a real game
    changer.
  prefs: []
  type: TYPE_NORMAL
- en: Using technology that aligns with your workload's goals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: List your business goals and let the product owner help drive some of the product
    and service selections based on those goals. If a development team has previous
    familiarity with certain technologies, they may be inclined to sway toward those
    technologies that they already feel confident using.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, there are other teams that strive to use the latest and greatest
    technologies – but not necessarily because the technology solves a problem that
    has been identified. Rather, they are interested in constantly resume-building
    and making sure that they have both exposure to and experience with cutting-edge
    services as soon as they become available.
  prefs: []
  type: TYPE_NORMAL
- en: Cost optimization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many have the misconception that moving to the cloud will become an instant
    cost saver for their company or organization. A stark reality is faced once more,
    and more teams find out that provisioning new resources is as easy as clicking
    a button. Once the bills start appearing from an environment that doesn't have
    strict guardrails or the ability to chargeback the workloads to the corresponding
    teams, most of the time, there comes a cost reduction movement from the top down.
  prefs: []
  type: TYPE_NORMAL
- en: As you look to optimize your costs, understand that cloud services that have
    been proven to be managed services come at a high cost per minute; however, the
    human resources cost is much lower. There is no need to *care and feed* the underlying
    servers, nor worry about updating the underlying operating systems. Many of the
    services allow you to scale to user demands, and this is taken care of for you
    automatically.
  prefs: []
  type: TYPE_NORMAL
- en: The ability to monitor cost and usage is also a key element in a cost optimization
    strategy. Having a sound strategy for resource tagging allows those who are responsible
    for financially managing the AWS account to perform chargebacks for the correct
    department.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are five design principles for cost optimization in the cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing cloud financial management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adopting a consumption model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Measuring overall efficiency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stop spending money on undifferentiated heavy lifting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing and attributing expenditure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing cloud financial management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cloud financial management is something that is starting to grow across organizations,
    both big and small, rapidly. It takes a dedicated team (or a group of team members
    that has been partially allocated this responsibility) to build out the ability
    to see where the cloud spend is going. This part of the organization will be looking
    at the cost usage reports, setting the budget alarms, tracking the spend, and
    hopefully enforcing a costing tag that can show the chargebacks for each department,
    cost center, or project.
  prefs: []
  type: TYPE_NORMAL
- en: What is a chargeback?
  prefs: []
  type: TYPE_NORMAL
- en: An IT chargeback is a process that allows units to associate costs with specific
    departments, offices, or projects to try and accurately track the spend of IT.
    We are specifically referring to cloud spend in this example, but IT chargebacks
    are used in other areas of IT as well, such as for accounting purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Adopting a consumption model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the cloud doesn't require a sophisticated forecasting model to keep costs
    under control, especially when you have multiple environments. Development and
    testing environments should have the ability to spin down or be suspended when
    not in use, hence saving on charges when they would otherwise be sitting idle.
    This is the beauty of on-demand pricing in the cloud. If developers gripe over
    the loss of data, then educate them on the use of snapshotting database instances
    before shutting them down; then, they can start their development from where they
    left off.
  prefs: []
  type: TYPE_NORMAL
- en: An even better strategy is to automate the process of shutting down the development
    and test environments when the workday is finished and require a specialized tag,
    which would prevent an instance from being shut down after hours or on the weekend.
    You can also automate the process of restarting instances 30 to 60 minutes before
    the workday begins so that there is ample time for operating systems to become
    functional, allowing the team to think that they had never been turned off in
    the first place. Just be sure to watch out for any EC2 instances running on the
    instance store that may lose data.
  prefs: []
  type: TYPE_NORMAL
- en: Measuring overall efficiency
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the most evident ways that organizations lose efficiency when it comes
    to their cloud budgets is neglecting to decommission unused assets. Although it
    is easier to spin up new services and create backups in the cloud, not having
    a plan to retire depreciated data, volume backups, machine images, log files,
    and other items adds to the bottom line of the monthly bill. This should be done
    with a scalpel and not a machete. Data, once deleted, is gone and irretrievable;
    however, there is no need to keep everything forever. Even with compliance, there
    is a fade-out period, and data can be stored in cold storage at a much more reasonable
    rate.
  prefs: []
  type: TYPE_NORMAL
- en: A perfect example is EBS snapshots. A customer who is trying to be proactive
    about data protection may be both snapshotting volumes multiple times per day
    as well as copying those snapshots to a Disaster Recovery region. If there is
    no way to depreciate the old snapshots after 30, 60, or 90 days, then this cost
    center item can become an issue rather quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Stop spending money on undifferentiated heavy lifting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we talk about heavy lifting, we're talking about racking, stacking, and
    cooling servers in a data center. Running a data center is a 24/7/365 endeavor,
    and you can't easily turn off machines and storage when you're not using them.
    Moving workloads to the cloud takes the onus of running those data centers off
    your team members and allows more time and effort to go into focusing on customer
    needs and features, rather than caring for and feeding servers and hardware.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing and attributing expenditure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The cloud – and the AWS cloud, in particular – has tools available to help you
    analyze and reference where the charges for your account(s) are coming from. The
    first tool in your toolbox is tags and a tagging strategy. Once you have decided
    on a solid set of base tags, including things such as cost center, department,
    and application, then you have a foundation for the rest of the tools that are
    available to you.
  prefs: []
  type: TYPE_NORMAL
- en: Breaking out from a single account structure into multiple accounts and organizational
    units using AWS Organizations can automatically categorize spend, even without
    the use of tags at the account level.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Cost Explorer allows your financial management team to dig into the services
    and regions where spend is occurring, as well as create automatic dashboards to
    visualize the spend quickly. Amazon Web Services also has pre-set service quotas
    in place, some of which are hard quotas that cannot be changed, but many of which
    are soft quotas that allow you to raise the number of particular services (in
    a region) in a simple request.
  prefs: []
  type: TYPE_NORMAL
- en: Overarching service pillar principals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Well-Architected Framework identifies a set of general design principles
    to facilitate good design in the cloud:'
  prefs: []
  type: TYPE_NORMAL
- en: Test systems at full production scale.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automate as many components as possible to make experimentation as easy as possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drive architectures using data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stop guessing capacity needs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow architectures to evolve with new technologies and services.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use game days to drive team improvement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you are thinking about these service principals and how to put them into
    practice, realize that sometimes, the principles can feel like they are contradicting
    each other. The most obvious case is with the *cost optimization* pillar. If this
    is the pillar that the organization you are working for is trying to give the
    most attention, the other pillars can get in the way of pure cost savings. Strengthening
    weaknesses that you have found in the *reliability* pillar, most times, means
    more assets, and assets mean money. However, you can still strive to make those
    assets as cost-effective as possible so that you comply with all the pillars.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the five service principals that guide architects
    and developers to be well architected. We talked about how these are the underlying
    themes that run through the test questions in the DevOps pro exam, and how having
    this foundational knowledge can help when you're trying to determine the correct
    answer to a question. As we discussed each service pillar, we also talked about
    their underlying design principals.
  prefs: []
  type: TYPE_NORMAL
- en: We briefly mentioned several different AWS services and which service pillar
    or design principals where specific services come into play. In the next chapter,
    we will learn about the fundamental AWS services that are used throughout the
    environments and accounts you will be working in.
  prefs: []
  type: TYPE_NORMAL
- en: Review questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the five pillars of the Well-Architected Framework?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the five main areas that security in the cloud consists of?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the four areas that the performance efficiency pillar consists of?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the three areas that the reliability pillar consists of?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the definition of RTO?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the definition of RPO?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**C**ost Optimization, **R**eliability, **O**perational Excellence, **P**erformance
    Efficiency, and **S**ecurity. (Use the Mnemonic **CROPS** to help remember the
    five pillars using the first letter of each pillar.)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Data protection, infrastructure protection, privilege management, incident response,
    and detective controls.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compute, storage, database, and network.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Foundations, change management, and failure management.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Recover Time Objective** – The maximum acceptable delay between interrupting
    the service and restoring the service.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Recovery Point Objective** – The maximum acceptable amount of time since
    the last data recovery point (backup).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is a list of recommended papers and resources for further reading:'
  prefs: []
  type: TYPE_NORMAL
- en: 'AWS Well-Architected Whitepaper: [https://d1.awsstatic.com/whitepapers/architecture/AWS_Well-Architected_Framework.pdf](https://d1.awsstatic.com/whitepapers/architecture/AWS_Well-Architected_Framework.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cost Optimization Whitepaper: [https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/wellarchitected-cost-optimization-pillar.pdf](https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/wellarchitected-cost-optimization-pillar.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Reliability Whitepaper: [https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/wellarchitected-reliability-pillar.pdf#welcome](https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/wellarchitected-reliability-pillar.pdf#welcome)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Operational Excellence Whitepaper: [https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/wellarchitected-operational-excellence-pillar.pdf](https://docs.aws.amazon.com/wellarchitected/latest/operational-excellence-pillar/wellarchitected-operational-excellence-pillar.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Performance Efficiency Whitepaper: [https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/wellarchitected-performance-efficiency-pillar.pdf#welcome](https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/wellarchitected-performance-efficiency-pillar.pdf#welcome)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Security Whitepaper: [https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/wellarchitected-security-pillar.pdf](https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/wellarchitected-security-pillar.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Calculating Total System Availability:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.delaat.net/rp/2013-2014/p17/report.pdf](https://www.delaat.net/rp/2013-2014/p17/report.pdf)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Well-Architected Labs:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.wellarchitectedlabs.com/](https://www.wellarchitectedlabs.com/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'AWS Well-Architected Framework pillars:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://wa.aws.amazon.com/wat.pillars.wa-pillars.en.html](https://wa.aws.amazon.com/wat.pillars.wa-pillars.en.html)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '10 Lessons from 10 Years of AWS: [https://www.allthingsdistributed.com/2016/03/10-lessons-from-10-years-of-aws.html](https://www.allthingsdistributed.com/2016/03/10-lessons-from-10-years-of-aws.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
