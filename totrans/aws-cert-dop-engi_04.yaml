- en: 'Chapter 3: Identity and Access Management and Working with Secrets in AWS'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章：AWS 中的身份与访问管理以及密钥管理
- en: With a firm understanding of a myriad of fundamental services under our belt,
    we now move on to **Identity and Access Management** (**IAM**).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在掌握了众多基本服务的基础上，我们现在进入 **身份与访问管理** (**IAM**) 部分。
- en: Defining the controls and policies that are used to manage access to different
    **Amazon Web Services** **(AWS**) services is what the premise of IAM is all about.
    This can come in the form of users, groups, policies, and even access, with federated
    access or short-term credentials. There is also the ability to use outside **identity
    providers** (**IdPs**) to allow users to access your applications. Understanding
    how to secure secrets using native AWS tools, especially in the context of a **continuous
    development** **(CD**) process, is an enterprise-level skill that is not only
    present in the DevOps professional exam, but also on the job.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 定义用于管理对不同 **Amazon Web Services** **(AWS)** 服务的访问的控制和政策，正是 IAM 的基本内容。这可以通过用户、组、政策，甚至访问控制来实现，包括联合访问或短期凭证。还可以使用外部
    **身份提供者** (**IdPs**) 来允许用户访问您的应用程序。理解如何使用本地 AWS 工具保护密钥，尤其是在 **持续开发** (**CD**)
    过程中，是一种企业级技能，这不仅出现在 DevOps 专业考试中，而且在工作中也至关重要。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将覆盖以下主要主题：
- en: Understanding the Shared Responsibility Model in AWS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 AWS 中的共享责任模型
- en: IAM roles, groups, users, and policies
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IAM 角色、组、用户和政策
- en: Using **AWS Organizations** as part of your guidance
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 **AWS Organizations** 作为指导的一部分
- en: Integrating federation with an AWS account
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 AWS 账户进行联合身份验证
- en: Storing secrets securely in AWS
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 AWS 中安全存储密钥
- en: Using **Amazon Cognito** with application authentication
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **Amazon Cognito** 与应用程序身份验证
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: As we go through this chapter, you should already have an AWS account created,
    along with the AWS **Command-Line Interface** (**CLI**) **version 2** (**v2**)
    installed so that you can follow along with the hands-on activities presented
    in this chapter. You will also need more than one AWS account if you are going
    to practice along with the AWS assume-role exercise.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读本章时，您应该已经创建了一个 AWS 账户，并安装了 AWS **命令行界面** (**CLI**) **版本 2** (**v2**)，以便您可以跟随本章中的实际操作活动进行练习。如果您打算跟随
    AWS 假设角色练习进行实践，您还需要多个 AWS 账户。
- en: Understanding the Shared Responsibility Model in AWS
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 AWS 中的共享责任模型
- en: Although we touched on it briefly in [*Chapter 1*](B17405_01_Final_JM_ePub.xhtml#_idTextAnchor015),
    *Amazon Web Service Pillars*, understanding the Shared Responsibility Model is
    imperative in order to work with the security of your account, and especially
    the IAM service.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们在 [*第 1 章*](B17405_01_Final_JM_ePub.xhtml#_idTextAnchor015) 中简要提到过它，*亚马逊
    Web 服务支柱*，但理解共享责任模型对于管理账户的安全性，特别是 IAM 服务，是至关重要的。
- en: 'The following diagram provides an overview of the model:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 下图提供了该模型的概览：
- en: '![Figure 3.1 – AWS Shared Responsibility Model: Infrastructure as a Service
    (IaaS)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.1 – AWS 共享责任模型：基础设施即服务（IaaS）'
- en: '](img/Figure_3.1_B17405.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.1_B17405.jpg)'
- en: 'Figure 3.1 – AWS Shared Responsibility Model: Infrastructure as a Service (IaaS)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – AWS 共享责任模型：基础设施即服务（IaaS）
- en: 'The essence of this Shared Responsibility Model is about providing flexibility
    and customer control. With this model there are two major concepts, outlined as
    follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 共享责任模型的本质是提供灵活性和客户控制。在此模型下，有两个主要概念，如下所示：
- en: 'Who is responsible for *security OF the cloud*:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谁负责 *云的安全性*：
- en: This is where AWS holds the responsibility.
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是 AWS 承担责任的部分。
- en: 'Who is responsible for *security IN the cloud*:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谁负责 *云中的安全性*：
- en: This is where you as the customer hold the responsibility.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是您作为客户需要承担的责任。
- en: AWS controls the global infrastructure, which includes the data centers that
    host the servers running all of the AWS services. These data centers are run according
    to security best practices and a range of security compliance conventions. Although
    no customer is allowed to visit an actual data center, independent outside bodies
    certify and audit the centers and practices to ensure that the controls, policies,
    and procedures are being followed.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 控制着全球基础设施，其中包括承载所有 AWS 服务的服务器的数据中心。这些数据中心根据安全最佳实践和一系列安全合规规范进行管理。虽然客户不允许访问实际的数据中心，但独立的外部机构会对这些中心和实践进行认证和审计，以确保控制措施、政策和程序得到了遵循。
- en: 'There are multiple layers in which AWS secures its data centers, outlined as
    follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 在多个层级上保护其数据中心，具体如下：
- en: At the perimeter layer—The buildings that AWS chooses to house its data and
    compute facilities are not disclosed to the public. These facilities also have
    strict entry requirements, along with intrusion detection and heavy surveillance
    to protect them.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在边界层——AWS 选择用于容纳其数据和计算设施的建筑物并未向公众披露。这些设施也有严格的进入要求，并配备入侵检测和严密的监控来保护它们。
- en: At the environmental layer—Before even choosing a location, AWS looks at environmental
    risks such as severe weather, flooding, and potential earthquake activity.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在环境层——在选择位置之前，AWS 会考虑环境风险，如恶劣天气、洪水和潜在的地震活动。
- en: At the infrastructure layer—Inside the building, there is a combination of fire
    detection and suppression equipment.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在基础设施层——在建筑物内部，有一套结合了火灾检测和抑制设备的系统。
- en: As a customer, one of the things that you are responsible for is the data you
    upload, store, and create in your account. You could both store and transmit it
    unencrypted, depending on what the requirements are for both you and your customers.
    If this is more stringent than just plaintext data, AWS offers a number of encryption
    options, or you could manage your own encryption. We will talk more about encrypting
    data both at rest and in transit later, in [*Chapter 19*](B17405_19_Final_JM_ePub.xhtml#_idTextAnchor447)*,*
    *Protecting Data in Flight and at Rest.*
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 作为客户，你的责任之一是你在账户中上传、存储和创建的数据。根据你和客户的需求，你可以选择以未加密的形式存储和传输数据。如果要求比明文数据更严格，AWS
    提供了多种加密选项，或者你可以管理自己的加密。我们将在稍后的[*第十九章*](B17405_19_Final_JM_ePub.xhtml#_idTextAnchor447)《保护静态和传输中的数据》中进一步讨论如何加密数据。
- en: Your responsibility on the AWS cloud also lies in who and what you allow to
    gain access to the various services in your accounts. This is where the IAM service
    plays a key role. By default, AWS will not allow access from any application or
    user to any other services.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你在 AWS 云上的责任还包括你允许谁和什么访问你账户中的各种服务。这时，IAM 服务发挥着关键作用。默认情况下，AWS 不允许任何应用程序或用户访问其他任何服务。
- en: Keeping the operating system up to date with any patches and updates on your
    **Elastic Compute Cloud** (**EC2**) instances is also part of your responsibility
    in the Shared Responsibility Model. There are services such as **Systems Manager**
    (**SSM**) and Amazon Inspector that can help you with this task, identifying crucial
    security patches and adhering to a maintenance schedule. If you run the actual
    infrastructure services, then the ultimate responsibility falls to you.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 保持操作系统的更新，包括对你**弹性计算云**（**EC2**）实例的任何补丁和更新，也属于你在共享责任模型中的责任。这些服务如**系统管理器**（**SSM**）和
    Amazon Inspector 可以帮助你完成这项任务，识别关键的安全补丁并遵循维护计划。如果你运行实际的基础设施服务，那么最终责任就落在你身上。
- en: How you allow traffic into your instance via the network layer is also your
    responsibility. In [*Chapter 2*](B17405_02_Final_JM_ePub.xhtml#_idTextAnchor056),
    *Fundamental AWS Services*, we discussed the **virtual private cloud** (**VPC**)
    and the tools you have to secure your network using security groups and **network
    access control lists** (**network ACLs**). Keeping your security rules to only
    the traffic that you need to allow—and nothing more—prevents outside entities
    gaining unwanted information from acts such as port scanning and other malicious
    activities.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你如何通过网络层允许流量进入你的实例也是你的责任。在[*第二章*](B17405_02_Final_JM_ePub.xhtml#_idTextAnchor056)《基础
    AWS 服务》中，我们讨论了**虚拟私有云**（**VPC**）以及你用来通过安全组和**网络访问控制列表**（**网络 ACL**）来保护网络的工具。将安全规则限制为仅允许必要的流量——而不是更多——可以防止外部实体通过端口扫描和其他恶意活动获取不必要的信息。
- en: This main shared security and responsibility model that was originally published
    by AWS reflects the responsibilities around the IaaS model. However, with different
    cloud computing models such as **Platform as a Service** (**PaaS**), in the case
    of container service offerings and managed service offerings that respond more
    like **Software as a Service** (**SaaS**), then Amazon takes even more of the
    responsibility.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个最初由 AWS 发布的主要共享安全和责任模型反映了 IaaS 模型中的责任。然而，随着不同的云计算模型的出现，例如**平台即服务**（**PaaS**），在容器服务和更像**软件即服务**（**SaaS**）的托管服务的情况下，Amazon
    承担了更多的责任。
- en: 'With the use of containers (especially in the case of Fargate), the security
    model shifts more to a PaaS model, so more of the responsibilities are pushed
    to AWS. No longer are you—the customer—responsible for the operating system, since
    AWS is managing this aspect. You are still, however, responsible for your customer
    data and the network traffic in and out of the system, as illustrated in the following
    diagram:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用容器（特别是在 Fargate 的情况下）时，安全模型更倾向于 PaaS 模式，因此更多的责任被推向 AWS。你不再负责操作系统，因为 AWS 正在管理这一部分。然鹅，你仍然负责客户数据以及进出系统的网络流量，正如下图所示：
- en: '![Figure 3.2 – AWS Shared Responsibility Model: container services'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.2 – AWS 共享责任模型：容器服务'
- en: '](img/Figure_3.2_B17405.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.2_B17405.jpg)'
- en: 'Figure 3.2 – AWS Shared Responsibility Model: container services'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2 – AWS 共享责任模型：容器服务
- en: One of the main things to understand is that in all of the Shared Responsibility
    Models, you are responsible for the protection of your data. This includes how
    many ports it will be exposed to, along with how it will be encrypted or whether
    it will be left unencrypted.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 需要理解的主要内容之一是，在所有共享责任模型中，您需要对数据的保护负责。这包括数据将暴露到多少个端口，以及数据将如何加密或是否保持未加密状态。
- en: Authorization versus authentication
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 授权与认证
- en: As we start to look at IAM, one of the first concepts we need to have a full
    understanding of is that of authorization versus authentication. Although the
    two terms may sound similar and are used in conjunction with each other quite
    frequently, understanding the differences between them is important as we move
    further.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始了解身份和访问管理（IAM）时，我们首先需要完全理解授权与认证的概念。尽管这两个术语听起来相似，并且经常一起使用，但理解它们之间的区别对于我们深入探讨非常重要。
- en: Authentication
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 认证
- en: Authentication is the process of verifying who you claim to be. The system is
    asking who you are and you are going to respond, many times, with a username and
    password, but other times with a secure session token. Authentication is answering
    the questions *Who are you?* and *Can you verify who you say you are?*
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 认证是验证你所声称身份的过程。系统在询问你是谁，你通常会用用户名和密码进行回答，但有时也会使用安全会话令牌。认证是在回答问题*你是谁？* 和 *你能验证你自己说的身份吗？*
- en: Authorization
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 授权
- en: Authorization happens after authentication and establishes what you are allowed
    to do. Most of the time, it happens after authentication. Rules and policies govern
    what you are authorized to access. In the world of computing, this can be relayed
    through a token, such as a bearer token or a **JavaScript Object Notation (JSON)
    Web Token** (**JWT**) that grants you access to services or **application processing
    interfaces** (**APIs**).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 授权发生在认证之后，确定你被允许执行的操作。大多数情况下，它发生在认证之后。规则和政策决定了你被授权访问的内容。在计算机世界中，这可以通过令牌传达，例如承载令牌或**JavaScript
    对象表示法（JSON）Web 令牌**（**JWT**），它授予你访问服务或**应用程序处理接口**（**API**）的权限。
- en: 'The processes of authentication and authorization are illustrated in the following
    diagram:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 认证与授权的过程如下图所示：
- en: '![Figure 3.3 – Authentication versus authorization'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.3 – 认证与授权'
- en: '](img/Figure_3.3_B17405.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.3_B17405.jpg)'
- en: Figure 3.3 – Authentication versus authorization
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – 认证与授权
- en: It can be easy to confuse authentication and authorization since they seem similar,
    but think of authentication as your picture identification and authorization as
    a **radio-frequency identification** (**RFID**) badge that allows you access.
    Let's take a look at another example for further clarity.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 认证和授权容易混淆，因为它们看起来相似，但可以将认证看作是你的照片身份证明，而授权则像是一个**射频识别**（**RFID**）徽章，它允许你访问。让我们通过另一个例子进一步明确这一点。
- en: A practical example of authorization versus authentication
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 授权与认证的实际示例
- en: At many large office buildings, you need an ID badge with a photo to enter the
    building. In most cases, you are required to wear the badge at all times to show
    you have **authorization** to be in the building without being stopped by security.
    As you move to the elevator, you might need to scan your badge to access the floor
    you work on. Pressing your ID badge, which contains an RFID chip that is tied
    back to the policy system and your user profile, lets the central system know
    which floors you are allowed to access. If you work on the third floor, then you
    are **authenticated** to press button number 3 and then travel up to the third
    floor. There might be other doors in the building to which you may or may not
    have access at all, based on the level of your authentication.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多大型办公楼中，您需要一张带照片的身份证明才能进入大楼。在大多数情况下，您被要求随时佩戴该证件，以证明您已获得**授权**进入大楼，不会被安保人员拦截。当您走向电梯时，您可能需要扫描您的证件才能访问您工作的楼层。按下您的身份证明，其中包含一个与政策系统和用户资料相关联的
    RFID 芯片，系统会知道您可以访问哪些楼层。如果您在三楼工作，那么您已经**验证**了可以按下 3 号按钮并乘坐电梯到三楼。大楼中可能还有其他门，您可能没有权限访问，具体取决于您的身份验证级别。
- en: Terms to understand for IAM
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IAM 需要理解的术语
- en: 'As we begin to talk about the IAM service and its individual components, it''s
    important to initially lay out the terms we will be using, along with their definitions.
    There is no need to memorize these terms for the professional exam, but they are
    the components of the whole service that you are expected to know from the lower
    exams. These terms are listed out here:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始讨论 IAM 服务及其各个组件时，首先需要列出我们将使用的术语及其定义。对于职业考试来说，没有必要记住这些术语，但它们是您需要了解的整个服务的组成部分，尤其是低级考试中必考的内容。以下列出了这些术语：
- en: '**Principal**: An application or person that uses either the AWS root account
    user, an IAM user, or an IAM role to authenticate to the account and make requests.
    This is someone or something that can take action on an AWS resource.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主体**：一个应用程序或人员，使用 AWS 根账户用户、IAM 用户或 IAM 角色进行身份验证并发起请求。这是可以对 AWS 资源执行操作的对象或人员。'
- en: '**Resources**: A resource is an item that you can work with inside of an AWS
    account. An example of a resource could include a Lambda function, an EC2 instance,
    or a **Simple Storage Service** (**S3**) bucket.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源**：资源是您可以在 AWS 账户内操作的项目。资源的一个示例可能包括 Lambda 函数、EC2 实例或 **简单存储服务**（**S3**）存储桶。'
- en: '**Entities**: An entity can be an IAM user, a federated user, or a user who
    is coming in from an IdP, or it can be an assumed IAM role in the context of AWS.
    It is simply the IAM resource object that AWS uses for authentication.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实体**：实体可以是 IAM 用户、联合用户，或来自身份提供者（IdP）的用户，或者在 AWS 上下文中的假设 IAM 角色。它仅仅是 AWS 用于身份验证的
    IAM 资源对象。'
- en: '**Identities**: The resources that are used to identify who is using the services
    are known as identities in IAM. These are your users, groups, and roles.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份**：用于识别谁在使用服务的资源称为 IAM 中的身份。这些包括用户、组和角色。'
- en: Ways IAM can authenticate with a principal
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IAM 可以进行主体身份验证的方式
- en: 'IAM has several ways in which it can authenticate with a principal, outlined
    as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: IAM 具有多种方式可以进行主体身份验证，具体如下：
- en: '**Username and p****assword**—A username and password are the initial way to
    get into the AWS Management Console.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户名和密码**——用户名和密码是进入 AWS 管理控制台的初始方式。'
- en: '**Access key and secret access key**—These are long-term security credentials
    that can be associated with users or the root user. They can be rotated, and a
    maximum of two access keys can be associated with any user at any single time.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**访问密钥和秘密访问密钥**——这些是可以与用户或根用户关联的长期安全凭证。它们可以被轮换，并且每个用户在任何时刻最多可以关联两个访问密钥。'
- en: '**Session token**—You can use an assumed role to take advantage of the **Security
    Token Service** (**STS**) to pass a token that will allow you or your application
    to gain the allocated access.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**会话令牌**——您可以使用假设的角色来利用**安全令牌服务**（**STS**）传递一个令牌，允许您或您的应用程序获得分配的访问权限。'
- en: Note
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: AWS Management Console users can't use their username and password credentials
    to run any particular program and access AWS services or underlying infrastructure
    by default. This all comes with the authorization provided by IAM policies.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: AWS 管理控制台用户默认不能使用其用户名和密码凭证运行任何特定程序并访问 AWS 服务或底层基础设施。所有这些都依赖于 IAM 策略提供的授权。
- en: Authorization concepts with IAM
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IAM 的授权概念
- en: 'As you look to add authorization to your users and applications, there are
    two models to be aware of: **role-based access control** (**RBAC**) and **attribute-based
    access control** (**ABAC**). We will go over the concepts of each next.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在为用户和应用程序添加授权时，有两个模型需要注意：**基于角色的访问控制**（**RBAC**）和**基于属性的访问控制**（**ABAC**）。接下来我们将讲解每个概念。
- en: RBAC
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: RBAC
- en: Traditional access control is based on grouping users and applications into
    groups (or roles) and then assigning permissions to the group. Many times, these
    are job functions, and the permissions that are associated with the group deal
    with the responsibilities of that job function.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的访问控制基于将用户和应用程序分组为组（或角色），然后为这些组分配权限。很多时候，这些组代表的是工作职能，与该职能相关的权限处理该职能的责任。
- en: Mapping specific sets of permissions to a role, defining that role as a group
    in an authentication service such as **Active Directory** (**AD**) or AWS IAM,
    and then placing users in that group so that they may assume those permissions
    is defined as RBAC.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 将特定的权限集映射到一个角色，将该角色定义为认证服务中的一个组，如**Active Directory**（**AD**）或AWS IAM，然后将用户加入该组，以便他们能够假设这些权限，这被定义为RBAC。
- en: ABAC
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ABAC
- en: 'There are three different types of attributes on which ABAC can base access
    control, listed here:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: ABAC可以基于三种不同类型的属性进行访问控制，列举如下：
- en: User attributes
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户属性
- en: Attributes associated with the system to be accessed
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与要访问的系统相关的属性
- en: Current environmental conditions
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前环境条件
- en: In AWS, most of these attributes are managed with tags, account information
    (that is, account number, alias, or **organizational unit** (**OU**)), and federated
    data associated with the user.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在AWS中，这些属性大多数通过标签、账户信息（即账户号码、别名或**组织单位**（**OU**））以及与用户关联的联合数据来管理。
- en: IAM service concepts
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IAM服务概念
- en: One of the most important concepts when using IAM and as you navigate through
    AWS access is to give only the minimal permissions necessary to do the job, and
    no more.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用IAM时，最重要的概念之一，以及在浏览AWS访问时的关键点，是只授予完成任务所需的最小权限，绝不多给。
- en: IAM roles, groups, users, and policies
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IAM角色、组、用户和策略
- en: Controlling access to your resources in IAM comes down to how you craft your
    policies that you attach to your users, groups, and roles. Services themselves
    assume roles, and users are created in IAM and are much more easily managed if
    placed into groups.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在IAM中控制对资源的访问，归结于你如何设计附加到用户、组和角色的策略。服务本身假设角色，而在IAM中创建的用户，如果被放入组中，将更容易进行管理。
- en: Note
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There is a service limit of 500 IAM users per account.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 每个账户有500个IAM用户的服务限制。
- en: IAM policies
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IAM策略
- en: An IAM policy is a set of permissions expressed as a JSON statement that says
    which access permissions an entity has.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: IAM策略是一组权限，以JSON语句的形式表示，指定实体拥有哪些访问权限。
- en: As you start to dole out the permissions in your account, you will deal with
    these IAM policies. There are a number of policies that have been pre-crafted
    by AWS to help you get started, either to attach to users and groups or for services.
    Many AWS-based policies will have the resource listed as `*`; however, this allows
    for any resource to be accessed. There are multiple ways in which we can constrain
    the amount of resources that can be accessed, even in the case of a simple policy.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始分配账户中的权限时，你将处理这些IAM策略。AWS提供了许多预先制定的策略，帮助你快速入门，可以附加到用户和组或服务上。许多基于AWS的策略将资源列为`*`，但这意味着任何资源都可以被访问。即使是简单策略，也有多种方式可以限制可以访问的资源数量。
- en: 'Let''s look here at a very simple example of an IAM policy that shows how we
    can give access to all object actions on all S3 buckets in the account, using
    wildcards:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个非常简单的IAM策略示例，展示了如何使用通配符在账户中为所有S3存储桶上的所有对象操作授予访问权限：
- en: '[PRE0]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can, however, restrict which bucket our user can access by changing the
    resource line of the policy, as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们可以通过修改策略中的资源行来限制我们的用户可以访问的存储桶，如下所示：
- en: '[PRE1]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'There are a number of different policy types that are available for use in
    AWS, as outlined in the following list. Each has its own role when it comes to
    permissions:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: AWS中有多种不同类型的策略可以使用，如下所示。每种策略在权限管理中扮演着不同的角色：
- en: Identity-based policies
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于身份的策略
- en: Resource-based policies
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于资源的策略
- en: Permissions boundaries
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 权限边界
- en: Organizations' **service control policies** (**SCPs**)
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织的**服务控制策略**（**SCPs**）
- en: ACLs
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ACLs
- en: Session policies
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话策略
- en: Now we know how IAM policies work, along with the different types of policies
    available, let's look at some of fundamental concepts around IAM policies and
    how the different types of policies work together to form effective permissions.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了 IAM 策略如何工作，以及可用的不同类型的策略，让我们来看看一些 IAM 策略的基本概念，以及不同类型的策略如何协同工作形成有效的权限。
- en: IAM policy concepts
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IAM 策略概念
- en: 'As you start to use IAM, you need to have an understanding of how the service
    evaluates policy requests based on its internal logic. Here is an overview of
    the rules that you need to remember:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始使用 IAM 时，你需要理解该服务是如何根据其内部逻辑评估策略请求的。以下是你需要记住的规则概览：
- en: By default, all requests are denied (unless you are the root user).
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，所有请求都会被拒绝（除非你是根用户）。
- en: If any service has been explicitly denied, this rule takes precedence, even
    if another rule has the service allowed.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果某项服务已被明确拒绝，则该规则优先，即使另一个规则允许该服务。
- en: An explicit `allow` in a policy will override the default implicit `deny`.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 策略中的显式 `allow` 将覆盖默认的隐式 `deny`。
- en: If a SCP, session policy, or permissions boundary grants access to a service
    then it too will override the implicit `deny`.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个 SCP、会话策略或权限边界授予某项服务访问权限，那么它也会覆盖隐式的 `deny`。
- en: 'For a deeper understanding of how the rules are processed, I suggest you read
    the documentation available here: [https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html).'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更深入理解规则是如何处理的，我建议你阅读此处提供的文档：[https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html)。
- en: 'In the diagram pictured in *Figure 3.4* are three circles. The bottommost circle
    is the identity-based policy—that is, where the user or group is granting the
    permissions for that effective user. However, there are other identity policies
    at play that can limit—or in some cases expand—the effective permissions for a
    user. The center of where all the policies intersect—and in this case where the
    arrow is pointing—is the effective permission set for the user, as illustrated
    here:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图 3.4* 所示的图示中，有三个圆圈。最底部的圆圈是基于身份的策略——即用户或组授予该有效用户权限的位置。然而，还有其他身份策略在起作用，这些策略可以限制——在某些情况下扩展——用户的有效权限。所有策略交汇的中心——在此情况下箭头指向的地方——是该用户的有效权限集，如下所示：
- en: '![Figure 3.4 – Effective policy permissions'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.4 – 有效的策略权限'
- en: '](img/Figure_3.4_B17405.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.4_B17405.jpg)'
- en: Figure 3.4 – Effective policy permissions
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4 – 有效的策略权限
- en: With knowledge of how these different types of polices interact together to
    form effective permissions, we can now go about creating our identities in the
    forms of roles, groups, and users.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通过了解这些不同类型的策略如何相互作用以形成有效的权限，我们现在可以开始创建我们的身份，包括角色、组和用户。
- en: Identities
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 身份
- en: When you first create your AWS account, the email account you use to sign up
    with becomes your AWS root user. Although you have the ability to access the Management
    Console with this root user, and this user has a full unrestricted set of permissions
    to all services and resources in your AWS account, it is not recommended that
    you start creating resources and workloads with this user.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当你首次创建 AWS 账户时，注册时使用的电子邮件账户将成为你的 AWS 根用户。尽管你可以使用这个根用户访问管理控制台，并且该用户拥有对 AWS 账户中所有服务和资源的完整无限制权限，但不建议你使用该用户来创建资源和工作负载。
- en: 'In the following diagram, we can see an example of how the root user is at
    the top of the AWS account structure, and then our groups are inherited by both
    users and roles:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，我们可以看到根用户位于 AWS 账户结构的顶部，然后我们的组会继承给用户和角色：
- en: '![Figure 3.5 – IAM users and groups'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.5 – IAM 用户和组'
- en: '](img/Figure_3.5_B17405.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.5_B17405.jpg)'
- en: Figure 3.5 – IAM users and groups
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5 – IAM 用户和组
- en: Once we have mapped out which groups we want to create in our account, along
    with the basis of the permissions that each group or role will be inheriting,
    we can then go about creating these groups.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们确定了要在账户中创建的组，并了解每个组或角色将继承的权限基础，我们就可以开始创建这些组。
- en: IAM groups
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IAM 组
- en: 'Here are some important things to know about groups:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是关于组的一些重要事项：
- en: A user can belong to multiple groups, and groups can have multiple users.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用户可以属于多个组，组也可以有多个用户。
- en: Groups can only contain users, not other groups, hence groups can't be nested
    inside of each other and inherit privileges.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组只能包含用户，而不能包含其他组，因此组不能相互嵌套和继承权限。
- en: Users must be manually added to a group. Upon creation of a user or role, there
    is no default group where permissions are automatically assigned.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户必须手动添加到组中。在创建用户或角色时，不会自动为其分配权限的默认组。
- en: Creating IAM groups
  id: totrans-120
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建IAM组
- en: 'Before we actually add our users, let''s create our groups and associate the
    Amazon-managed IAM policies with those groups, as shown in *Figure 3.5*. We will
    make the following groups and then associate the following managed policies with
    them:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们实际添加用户之前，让我们创建这些组并将Amazon托管的IAM策略与这些组关联，如*图3.5*所示。我们将创建以下组，并将以下托管策略与它们关联：
- en: '![Figure 3.6 – Groups and their associated managed policies'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.6 – 组及其关联的托管策略'
- en: '](img/Figure_3.6_B17405.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.6_B17405.jpg)'
- en: Figure 3.6 – Groups and their associated managed policies
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.6 – 组及其关联的托管策略
- en: 'Now that we know which groups we are going to set up, let''s use our CLI to
    create those groups, as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道要设置哪些组，让我们使用CLI来创建这些组，如下所示：
- en: 'Open up your terminal and type the following commands so that we can create
    our first group (`Admins`):'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的终端并输入以下命令，我们来创建第一个组（`Admins`）：
- en: '[PRE2]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, let''s check the current groups in our account, as follows:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们检查我们账户中的当前组，如下所示：
- en: '[PRE3]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Notice how I changed the output here—this method for the four groups I''m about
    to show is not going to take multiple pages with the spacing that JSON formatting
    takes up. The output should be similar to what is shown here:'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意我如何更改输出——对于我即将展示的四个组，这种方法不会占用像JSON格式那样多的页面空间。输出应该类似于此处显示的内容：
- en: '[PRE4]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once we see all the groups listed, we can now start to attach the managed policies
    we identified before. However, in using the CLI, we need to know the `grep` to
    help our search, as illustrated in the following code snippet:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们看到列出的所有组，我们就可以开始附加我们之前识别的托管策略。然而，在使用CLI时，我们需要知道`grep`来帮助我们的搜索，具体如下所示的代码片段：
- en: '[PRE5]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: AdministratorAccess, which was the first returned result. The others were returned
    because they had AdministratorAccess as part of their name.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: AdministratorAccess，这是第一个返回的结果。其他的返回是因为它们的名称中包含了AdministratorAccess。
- en: '[PRE6]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now that we have found the ARN for our managed policy, we can attach it to
    our group, as illustrated in the following code snippet. Once the IAM policy is
    attached to the group, any users we add later will automatically assume those
    permissions:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们找到了托管策略的ARN，我们可以将其附加到组中，具体如下所示的代码片段。一旦IAM策略附加到组，任何我们稍后添加的用户将自动获得这些权限：
- en: '[PRE7]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Once you execute this command, it will not give you any return or feedback.
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行此命令后，它不会返回任何结果或反馈。
- en: 'We could check from the command line to see if our policy was attached to our
    group by using the following command:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以通过命令行检查我们的策略是否已附加到组中，方法如下：
- en: '[PRE8]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This will then bring back the policy we just affixed to the group, as illustrated
    in the following code snippet:'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将返回我们刚刚附加到组上的策略，具体如下所示的代码片段：
- en: '[PRE9]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: At this point, we're done for the moment. We will need to create our users in
    order to add them to the group.
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 到此为止，我们暂时完成了这一步。我们需要创建用户以便将其添加到组中。
- en: Note
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: We could have also done this using a CloudFormation script, which would have
    made it a lot easier to roll back or clean up any groups we just made. We are
    going to take a deep dive into CloudFormation and **Infrastructure as Code** (**IaC**)
    in [*Chapter 7*](B17405_07_Final_JM_ePub.xhtml#_idTextAnchor188), *Using CloudFormation
    Templates to Deploy Workloads*.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们也可以使用CloudFormation脚本来完成这项任务，这样可以更容易地回滚或清理我们刚刚创建的任何组。我们将深入探讨CloudFormation和**基础设施即代码**（**IaC**）的内容，在[*第7章*](B17405_07_Final_JM_ePub.xhtml#_idTextAnchor188)中，*使用CloudFormation模板部署工作负载*。
- en: IAM users
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IAM用户
- en: An IAM user is a person or application who is credentialed to access and interact
    with a specified set of AWS services.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: IAM用户是有凭证访问和与指定AWS服务集进行交互的人员或应用程序。
- en: When you create your account, you are automatically provisioned as a root account
    user.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建账户时，你会自动成为根账户用户。
- en: After creating a user, they start with no permissions, nor are they authorized
    to perform any actions on AWS resources until you or another administrator (or
    person with IAM permissions) grant them access via an inline policy, attach a
    managed policy to their user, or add them to a group.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 创建用户后，他们初始没有任何权限，且未经授权无法对AWS资源执行任何操作，直到你或其他管理员（或具有IAM权限的人员）通过内联策略授予他们访问权限，或者将他们添加到一个组中。
- en: IAM users cannot be associated with more than one AWS account.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: IAM用户不能与多个AWS账户关联。
- en: The user's section of IAM is also where you store each individual user's **Secure
    Shell** (**SSH**) keys to access the AWS Git service CodeCommit. We don't dive
    deep into CodeCommit until [*Chapter 8*](B17405_08_Final_JM_ePub.xhtml#_idTextAnchor212),
    *Creating Workloads with CodeCommit and CodeBuild* ; however, understanding how
    the keys, users, and IAM permissions interact is important, especially if you
    want your users to have the ability to self-manage, add, remove, and rotate their
    own SSH keys.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: IAM的用户部分也是你存储每个用户的**安全外壳**（**SSH**）密钥的地方，以访问AWS Git服务CodeCommit。我们在[*第八章*](B17405_08_Final_JM_ePub.xhtml#_idTextAnchor212)中才会深入探讨CodeCommit，*使用CodeCommit和CodeBuild创建工作负载*；然而，理解密钥、用户和IAM权限之间的相互作用是很重要的，特别是当你希望你的用户能够自我管理、添加、移除和轮换他们自己的SSH密钥时。
- en: If you would like to create more users with specified roles for your account
    then you can do so with the new roles that you have just created, using the steps
    outlined in [*Chapter 2*](B17405_02_Final_JM_ePub.xhtml#_idTextAnchor056), *Fundamental
    AWS Services,* to create a user.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想为你的账户创建更多具有指定角色的用户，可以使用你刚刚创建的新角色，并按照[*第二章*](B17405_02_Final_JM_ePub.xhtml#_idTextAnchor056)的步骤，*基础AWS服务*，来创建一个用户。
- en: Roles
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 角色
- en: IAM roles allow you to empower services, applications, and other AWS services
    to have access without hardcoding credentials such as access key and secret access
    key directly into the application—or in the case of a user, even create an access
    key and secret access key pair.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: IAM角色允许你授权服务、应用程序和其他AWS服务在不将访问密钥和秘密访问密钥等凭证硬编码到应用程序中的情况下访问——或者对于用户而言，甚至创建一个访问密钥和秘密访问密钥对。
- en: Roles are also extremely useful when switching between accounts. If you have
    multiple accounts—let's say, development, testing, and production accounts—you
    can use your user in the development account and then create a role in the other
    two accounts, which are allowed to be assumed by your main user.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 角色在切换账户时也非常有用。如果你有多个账户——例如，开发、测试和生产账户——你可以在开发账户中使用你的用户，然后在其他两个账户中创建角色，这些角色可以被你的主用户假设。
- en: Another advantage to roles is that they can be assumed by multiple instances
    of the same service (for example, EC2/Lambda). Just as in IAM groups, if you need
    to add more permissions or remove permissions from a role's policy, those changes
    take effect almost immediately.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 角色的另一个优点是它们可以由同一服务的多个实例承担（例如，EC2/Lambda）。就像在IAM组中一样，如果你需要为角色的策略添加更多权限或移除权限，这些更改几乎会立即生效。
- en: In the case of EC2, you would use an **instance profile** to pass a role to
    an EC2 instance. An instance profile can only contain one role, and this is a
    hard service limit that cannot be increased. If the permission needs of the instance
    change, you can remove the current role attached to the instance profile and then
    attach a different role that contains a distinct set of permissions.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 对于EC2，你会使用**实例配置文件**将角色传递给EC2实例。实例配置文件只能包含一个角色，这是一个无法增加的硬性服务限制。如果实例的权限需求发生变化，你可以移除当前附加到实例配置文件的角色，然后附加一个包含不同权限集的角色。
- en: Roles and role assumption are also a way to provide access to third parties
    who may also have their own AWS account but may need limited access to your account.
    This could be a third-party partner or an auditor who may just need read-only
    access.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 角色和角色假设也是一种提供访问给第三方的方式，这些第三方可能也有自己的AWS账户，但可能需要有限的访问权限。这可能是一个第三方合作伙伴，或者是一个只需要只读访问权限的审计员。
- en: Note
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'For this exercise we will need two accounts, as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本次练习，我们将需要两个账户，如下所示：
- en: '**Account A**: This will be the account where we will create a role that we
    will allow to be assumed.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**账户A**：这将是我们创建一个角色的账户，允许该角色被假设。'
- en: '**Account B**: This will be the account we have been working on previously
    and will use one of our previously created users to assume the role and go to
    the other account.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**账户B**：这将是我们之前在操作的账户，我们将使用之前创建的一个用户来假设该角色并访问另一个账户。'
- en: Before you start, it would be a good idea to know the account numbers and have
    them in a text document labeled *Account A* and *Account B*. This will make things
    easier when we start to go through the process of setting up the role. If you
    don't know your AWS account number, then the easiest way to find it is to click
    on your username on the top of the main menu. When the drop-down menu appears,
    then one of the items in that menu is **Account**, with your account number.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，最好知道账户编号，并将其保存在名为*账户 A*和*账户 B*的文本文件中。这样在我们开始设置角色的过程时会更加方便。如果您不知道您的 AWS
    账户编号，找到它最简单的方法是点击主菜单顶部的用户名。下拉菜单出现后，其中一项是**账户**，显示您的账户编号。
- en: 'We will first go into *Account A* and create a role to be assumed, as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先进入*账户 A*，并创建一个角色，具体步骤如下：
- en: Sign in to the console with a user on *Account A* who has either Admin user
    privileges or the ability to create IAM users and roles.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用具有管理员用户权限或能够创建 IAM 用户和角色的*账户 A*中的用户登录控制台。
- en: Navigate to the IAM service at [https://console.aws.amazon.com/iam/home](https://console.aws.amazon.com/iam/home).
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 IAM 服务：[https://console.aws.amazon.com/iam/home](https://console.aws.amazon.com/iam/home)。
- en: In the left-hand menu, click **Roles**.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧菜单中，点击**角色**。
- en: Once the **Roles** screen appears in the main window, click the blue button
    labeled **Create Role**.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦**角色**屏幕出现在主窗口中，点击标签为**创建角色**的蓝色按钮。
- en: The type of trusted identity you want to choose on the next screen is **Another
    AWS account**, as illustrated in the following screenshot:![Figure 3.7 – Creating
    an IAM role
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一屏幕上，您要选择的可信身份类型是**另一个 AWS 账户**，如下面的截图所示：![图 3.7 – 创建 IAM 角色
- en: '](img/Figure_3.7_B17405.jpg)'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_3.7_B17405.jpg)'
- en: Figure 3.7 – Creating an IAM role
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.7 – 创建 IAM 角色
- en: 'Enter the account number of *Account B* into the **Account** field and then
    press the **Next: Permissions** button at the bottom of the page.'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**账户**字段中输入*账户 B*的账户编号，然后点击页面底部的**下一步：权限**按钮。
- en: 'On the `S3FullAccess`. This should bring up the `AmazonS3FullAccess` policy.
    Click the box next to this policy name. After you have checked the box, as illustrated
    in the following screenshot, then click the blue button at the bottom of the page,
    labeled **Next: Tags**:![Figure 3.8 – IAM S3 full access policy'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`S3FullAccess`上。这将调出`AmazonS3FullAccess`策略。勾选此策略名称旁边的框。在勾选框后，参照下面的截图，点击页面底部的蓝色按钮，标记为**下一步：标签**：![图
    3.8 – IAM S3 完全访问策略
- en: '](img/Figure_3.8_B17405.jpg)'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_3.8_B17405.jpg)'
- en: Figure 3.8 – IAM S3 full access policy
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.8 – IAM S3 完全访问策略
- en: 'We are not adding any tags in this exercise, so just click the blue button
    at the bottom of the screen that says **Next: Review**.'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在本练习中不会添加任何标签，所以只需点击屏幕底部的蓝色按钮，标签为**下一步：审查**。
- en: 'Once we get to the `AssumeS3`; if you would like to type a description, you
    can do so (see the example description in the following screenshot), but this
    is not necessary. Make sure that everything looks correct and then click the **Create
    role** button at the bottom:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们进入`AssumeS3`，如果您想输入描述，可以输入（请参见下面截图中的示例描述），但这不是必要的。确保一切看起来正确，然后点击底部的**创建角色**按钮：
- en: '![Figure 3.9 – IAM assume S3 role review'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.9 – IAM 假设 S3 角色审查'
- en: '](img/Figure_3.9_B17405.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.9_B17405.jpg)'
- en: Figure 3.9 – IAM assume S3 role review
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.9 – IAM 假设 S3 角色审查
- en: 'Now that we have our role set up in *Account A*, we can log out of this account
    and then log back in to *Account B* so that we can use this new role we created
    to switch from our main role to the `AssumeS3` role in *Account A*, as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在*账户 A*中设置了角色，可以退出该账户，然后重新登录到*账户 B*，以便使用我们创建的新角色，从主角色切换到*账户 A*中的`AssumeS3`角色，步骤如下：
- en: Once we have logged in, then click on your name in the top right-hand menu to
    expose the drop-down menu (we did this previously to find our account numbers).
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们登录后，点击右上角菜单中的您的名字，显示下拉菜单（我们之前通过这种方式查找了账户编号）。
- en: With the drop-down menu exposed, click on the menu item labeled **Switch Roles**,
    as illustrated in the following screenshot:![Figure 3.10 – Switching roles from
    AWS Management Console
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下拉菜单显示时，点击菜单项**切换角色**，如下面的截图所示：![图 3.10 – 从 AWS 管理控制台切换角色
- en: '](img/Figure_3.10_B17405.jpg)'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_3.10_B17405.jpg)'
- en: Figure 3.10 – Switching roles from AWS Management Console
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.10 – 从 AWS 管理控制台切换角色
- en: Now, on the **Switch Roles** screen, click the blue button labeled **Switch
    Role**.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在**切换角色**屏幕上，点击标签为**切换角色**的蓝色按钮。
- en: 'On the next screen, you will be presented with three textboxes to fill out,
    as follows:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一屏中，你将看到三个文本框需要填写，具体如下：
- en: a. In the box labeled `AssumeS3`).
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. 在标有`AssumeS3`的框中）。
- en: 'c. In the box labeled `AccountA_S3`, as illustrated in the following screenshot:'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. 在标有`AccountA_S3`的框中，如以下截图所示：
- en: '![Figure 3.11 – Assuming role in Account A'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 3.11 – 假设角色在账户A'
- en: '](img/Figure_3.11_B17405.jpg)'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_3.11_B17405.jpg)'
- en: Figure 3.11 – Assuming role in Account A
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.11 – 假设角色在账户A
- en: With this information entered, you are now ready to switch roles.
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 填入这些信息后，你现在可以切换角色了。
- en: After entering all this information, click the blue **Switch Role** button.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填入所有信息后，点击蓝色的**切换角色**按钮。
- en: 'You should now be in *Account A* with the `AssumeS3` permissions signified
    by the color at the top of the menu bar, along with the display name of the role,
    as illustrated in the following screenshot:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你应该已处于*账户A*中，并且菜单栏顶部的颜色标示了`AssumeS3`权限，以及角色的显示名称，具体如以下截图所示：
- en: '![Figure 3.12 – AWS Management Console showing successful role switch'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.12 – AWS 管理控制台显示成功切换角色'
- en: '](img/Figure_3.12_B17405.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.12_B17405.jpg)'
- en: Figure 3.12 – AWS Management Console showing successful role switch
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.12 – AWS 管理控制台显示成功切换角色
- en: We've just seen how roles can help us manage the permissions in our own account,
    as well as giving us the ability to take on a defined permission set in another
    account. Next, we will look at both ways to put limits in place from an account
    level with permissions boundaries, along with some IAM best practices.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚了解了角色如何帮助我们管理自己账户中的权限，同时也赋予我们在另一个账户中承担定义权限集的能力。接下来，我们将介绍如何通过权限边界在账户级别设置限制，并分享一些IAM的最佳实践。
- en: Permissions boundaries
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 权限边界
- en: Permissions boundaries are an advanced feature of IAM that allows you to use
    AWS managed policies but set the maximum resource limits for those policies. In
    practical usage, permissions boundaries can be extremely helpful to allow you
    to take an AWS managed policy that has the permissions you need for a service
    and attach it to a user, group, or role and then keep that entity from going outside
    of the resources they need to access using the permissions boundary policy.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 权限边界是IAM的高级功能，它允许你使用AWS托管策略，但为这些策略设置最大资源限制。在实际使用中，权限边界可以非常有用，允许你将具有所需权限的AWS托管策略应用到用户、组或角色上，并通过权限边界策略确保该实体不会访问超出所需的资源。
- en: If we refer back to *Figure 3.4*, look where the identity-based policy intersects
    with the permissions boundary policy. In the middle of those two policies is the
    effective policy for the entity. Most managed policies provided by AWS allow for
    a full scope in the `*`). For most organizations, both large and small, this is
    too wide open a permission set. Not only does this present a security concern
    across different sectors of an organization, but also limiting the access helps
    mitigate any blast radius that a user could cause in an accidental situation.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回顾一下*图 3.4*，可以看到身份基础的策略与权限边界策略的交集。两者之间的部分即为该实体的有效策略。AWS提供的大多数托管策略允许在`*）`范围内使用。对于大多数组织，无论大小，这都是一个过于宽松的权限集。这不仅在组织的不同部门之间存在安全隐患，而且限制访问有助于减轻用户在意外情况下可能造成的影响范围。
- en: IAM best practices
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: IAM最佳实践
- en: 'Let''s take a look at some best practices when using IAM, as follows:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看在使用IAM时的一些最佳实践，如下所示：
- en: Don't use the root account for day-to-day access. Only use the root account
    for the initial setup of administrative users and in emergency/break-glass scenarios.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要使用根账户进行日常访问。根账户仅应在初始化管理员用户时使用，或在紧急/破玻璃场景中使用。
- en: Always set up **multi-factor authentication** (**MFA**) for your root user.
    Also, it's a best practice to put MFA in place for any account administrators.
    Try to put MFA in place for all users.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终为根用户设置**多因素认证**（**MFA**）。此外，最佳实践是为任何账户管理员配置MFA。尽量为所有用户启用MFA。
- en: Set up a password policy that requires users to set a strong password that needs
    to be rotated on a regular basis.
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置一个密码策略，要求用户设置强密码，并定期更换密码。
- en: Don't set permissions directly to users; instead, use groups or allow users
    to assume roles—set permission sets to the roles and allow users to assume the
    roles.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要直接将权限赋给用户；应使用组或允许用户承担角色—将权限集分配给角色，并允许用户承担这些角色。
- en: Don't allow secrets to be left in plaintext in code. Use a secret store such
    as Secrets Manager or Parameter Store to securely store secrets.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要让秘密以明文形式留在代码中。使用 Secrets Manager 或 Parameter Store 等秘密存储服务来安全地存储秘密。
- en: In the next section, we will learn about using **AWS Organizations** as part
    of your guidance.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分中，我们将学习如何将 **AWS Organizations** 作为你指导的一部分。
- en: Using AWS Organizations as part of your guidance
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 AWS Organizations 作为你指导的一部分
- en: '**AWS Organizations** is a service that helps you consolidate multiple AWS
    accounts for ease of management and billing. Not only does AWS Organizations help
    you create new accounts under the organizational umbrella quickly and easily,
    but it also provides features for governance that are not available in a standalone
    AWS account.'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '**AWS Organizations** 是一个帮助你整合多个 AWS 账户以便于管理和计费的服务。AWS Organizations 不仅帮助你在组织框架下快速轻松地创建新账户，还提供了在独立
    AWS 账户中无法获得的治理功能。'
- en: The two features of relevance to IAM are OUs and SCPs.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 与 IAM 相关的两个功能是 OU 和 SCP。
- en: Separation with OUs
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 OU 进行分离
- en: 'To understand OUs, we need to initially look at two basic concepts, as follows:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解 OU，首先需要了解两个基本概念，如下所示：
- en: Organization
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织
- en: Root
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根账户
- en: An **organization** is an entity that you create to unify the different AWS
    accounts under your control so that you can oversee them as a single unit. There
    is one master account assigned to an organization that can then branch off into
    zero or more units. Many times, organizations are organized in a tree-like configuration,
    with the root account at the top and the OUs and child accounts branching out
    underneath.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '**组织** 是你创建的实体，用于统一你控制下的不同 AWS 账户，以便你能够作为一个单元进行管理。一个主账户会分配给一个组织，该组织可以分支成零个或多个单元。许多时候，组织是以树状结构组织的，根账户位于顶部，OU
    和子账户在下面分支。'
- en: The **root** is the origin container for all other accounts in your organization.
    If you apply an SCP to the root account, it trickles down and hence gets applied
    to all organizational accounts and child accounts that are part of the organization.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '**根账户** 是组织中所有其他账户的源容器。如果你将 SCP 应用于根账户，它会向下流动，并因此应用于所有组织账户和子账户。'
- en: An OU is simply a container for grouping accounts under the root account. Organizational
    accounts can be nested inside of other OU units creating the hierarchy of your
    organization, with the root account sitting at the top.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: OU 只是一个用于将账户分组在根账户下的容器。组织账户可以嵌套在其他 OU 单元中，从而创建你的组织层次结构，根账户位于顶部。
- en: Features of organizations
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组织的功能
- en: Organizations allow you to centrally manage policies across AWS accounts. This
    helps you improve control over your AWS environment by using **AWS Organizations**
    to create a group of accounts and then attaching policies to a specified group,
    establishing that the correct policies are applied across those accounts without
    a need for any custom scripting.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 组织允许你在 AWS 账户之间集中管理策略。这有助于你通过使用 **AWS Organizations** 创建一个账户组，并将策略附加到指定的组，从而提升对
    AWS 环境的控制，确保在这些账户上应用正确的策略，而无需任何自定义脚本。
- en: You can integrate AWS **single sign-on** (**SSO**) to simply provision access
    for your users to different accounts in your organizations, in a single place.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以集成 AWS **单点登录**（**SSO**），以便在一个地方简化为你的用户提供不同账户的访问权限。
- en: SCPs allow organizations to administer permission guardrails to AWS services,
    resources, and regions.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: SCP 允许组织为 AWS 服务、资源和区域管理权限保护措施。
- en: '**AWS Organizations** also allows you to easily set up consolidated billing,
    using a single payment method for all of the accounts in an organization. This
    allows you to benefit from pricing advantages such as aggregated usage and volume
    discounts on different services that would not be available if all accounts were
    separated.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '**AWS Organizations** 还允许你轻松设置合并计费，为组织中的所有账户使用单一支付方式。这使你能够享受价格优势，如聚合使用量和不同服务的批量折扣，而这些在账户分开的情况下是无法获得的。'
- en: SCPs
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SCP
- en: SCPs are a tool that you can use to manage policies throughout a specific OU
    or throughout your entire organization, through inheritance. They can either enhance
    or limit the scope of the permissions that your users currently have, and they
    are at their most effective when combined with advanced IAM constructs such as
    `Condition`, `ArnNotLike`, `StringNotLike`, and specific regions to provide the
    guardrails that your organization agrees upon, to ensure that users don't intentionally
    or unintentionally perform inappropriate actions.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: SCP 是一种工具，您可以使用它通过继承管理特定 OU 或整个组织的策略。它们可以增强或限制用户当前权限的范围，且在与高级 IAM 结构（如 `Condition`、`ArnNotLike`、`StringNotLike`
    和特定区域）结合使用时最为有效，从而提供组织一致同意的保护措施，确保用户不会故意或无意地执行不当的操作。
- en: Example of a SCP
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SCP 示例
- en: 'The following code snippet provides an example of a SCP that you could attach
    at the root level of your organization to make sure that if anyone were going
    to delete an EC2 or **Relational Database Service** (**RDS**) instance, then a
    multi-factor device would first need to be present for verification:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码示例提供了一个 SCP 示例，您可以将其附加到组织的根级别，以确保如果有人要删除 EC2 或 **关系型数据库服务**（**RDS**）实例，则必须先提供多因素设备进行验证：
- en: '[PRE10]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You'll notice how the SCP syntax looks almost exactly like the normal IAM policy
    syntax, containing an `Effect`, `Action`, `Resource`, and `SID`. This SCP actually
    has an optional value of a condition, which is where we are checking to see whether
    the MFA exists and if not, then the action is denied.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到 SCP 语法几乎与普通的 IAM 策略语法完全相同，包含 `Effect`、`Action`、`Resource` 和 `SID`。此 SCP
    实际上有一个可选的条件值，在这里我们检查是否存在 MFA，如果不存在，则拒绝该操作。
- en: Integrating federation with an AWS account
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将联合身份验证与 AWS 账户集成
- en: If the users who will be accessing your account already have an authentication
    method, then there are a few different methods to incorporate federation into
    your AWS account.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将要访问您账户的用户已经拥有身份验证方法，那么有几种不同的方法可以将联合身份验证集成到您的 AWS 账户中。
- en: '*"Identity federation is a system of trust between two parties for the purpose
    of authenticating users and conveying information needed to authorize access to
    resources. In this system, an Identity Provider (IdP) is responsible for user
    authentication, and a service provider (SP), such as a service or application,
    controls access to resources."* (AWS, 2021)'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '*“身份联合是一种两方之间的信任系统，用于验证用户身份并传递授权访问资源所需的信息。在此系统中，身份提供者（IdP）负责用户身份验证，而服务提供者（SP），如服务或应用程序，控制对资源的访问。”*（AWS，2021）'
- en: When you incorporate federation, then your users are going to use STS to request
    a session for authorization into your account.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 当您集成联合身份验证时，您的用户将使用 STS 来请求一个会话以授权访问您的账户。
- en: 'A session consists of the following:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 一个会话包含以下内容：
- en: An access key
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个访问密钥
- en: A secret access key
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个秘密访问密钥
- en: A security token
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个安全令牌
- en: An expiration date (for when the security token is no longer valid)
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个过期日期（用于指示安全令牌何时不再有效）
- en: A federated token by default will expire in 12 hours, but can be set to time
    out in as little as 15 minutes or as long as 36 hours.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，联合令牌将在 12 小时后过期，但可以设置为在最短 15 分钟或最长 36 小时后超时。
- en: 'Federated tokens are handed out from the STS service via a few different request
    types, a couple of which are listed here:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 联合令牌是通过几种不同的请求类型从 STS 服务发放的，其中列出了一些请求类型：
- en: '`GetFederatedToken`'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GetFederatedToken`'
- en: '`AssumeRoleWithSAML`'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AssumeRoleWithSAML`'
- en: When would you use federation?
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 何时使用联合身份验证？
- en: There are a few scenarios where federation makes perfect sense to use in your
    environment or accounts. The first would be if you have a **Security Assertion
    Markup Language** (**SAML**) 2.0-compatible corporate directory. Examples of this
    would be **AD Federation Service** (**AD FS**), Okta, Shibboleth, and many others.
    When your directory is SAML 2.0-compliant, then you can configure it to provide
    SSO access to the AWS Management Console.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些场景下，联合身份验证在您的环境或账户中是非常适用的。首先是如果您有一个**安全断言标记语言**（**SAML**）2.0 兼容的企业目录。此类目录的例子有
    **AD 联合身份验证服务**（**AD FS**）、Okta、Shibboleth 等。当您的目录符合 SAML 2.0 标准时，您可以将其配置为为 AWS
    管理控制台提供 SSO 访问。
- en: Even if the directory isn't SAML 2.0-compliant, you still have the ability to
    furnish SSO to your users. In this case, though, you will need to produce an identity
    broker application to provide SSO access.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 即使目录不符合 SAML 2.0 标准，您仍然可以为用户提供单点登录（SSO）功能。然而，在这种情况下，您需要创建一个身份代理应用程序来提供 SSO 访问。
- en: The second scenario in which you would likely use federation is if your users
    have identity management through a third party such as a web identity. In this
    case, the web IdP provides the authentication step, and then you can use federation
    to grant your users AWS access to the services they need. We will discuss this
    more when we talk about the use of the AWS Cognito service later in the chapter.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会使用联合身份验证的第二种场景是，如果你的用户通过第三方进行身份管理，例如 Web 身份。在这种情况下，Web 身份提供者（IdP）提供身份验证步骤，然后你可以使用联合身份验证授权用户访问他们需要的
    AWS 服务。我们将在本章后面讨论如何使用 AWS Cognito 服务时进一步探讨这一点。
- en: Using AD federation with IAM
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 AD 联合身份验证与 IAM
- en: 'When you use AD FS to provide access to your account, the flow happens in the
    following order:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用 AD FS 提供账户访问时，流程按以下顺序进行：
- en: The user (or application) requests a session from the federation proxy.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户（或应用程序）向联合身份验证代理请求会话。
- en: The user is then authenticated via AD to ensure that they are an active user
    and have permissions to access the AWS cloud.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户然后通过 AD 进行身份验证，以确保他们是活跃用户并且具有访问 AWS 云的权限。
- en: Next, AD determines the quantity of permissions the user is entitled to receive.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，AD 确定用户有权接收的权限数量。
- en: Then, the federation proxy initiates a `GetFederationToken` request from the
    STS service in the AWS account.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，联合身份验证代理会从 AWS 账户中的 STS 服务发起 `GetFederationToken` 请求。
- en: The STS service then responds with the federated token (including the access
    key, secret key, and session token).
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: STS 服务随后返回联合令牌（包括访问密钥、秘密密钥和会话令牌）。
- en: The federation proxy then passes the token to the user.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 联合身份验证代理随后将令牌传递给用户。
- en: The user is then able to make API calls to the AWS account.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户然后可以向 AWS 账户发出 API 调用。
- en: Using federation to authenticate to your AWS account is especially useful if
    you have a large organization and don't want to manage users in both AD and AWS
    IAM. It can also help you get around the service limit of 500 IAM users per account.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 使用联合身份验证来访问你的 AWS 账户，对于拥有大型组织的用户尤其有用，因为这样你就不需要在 AD 和 AWS IAM 中分别管理用户了。它还可以帮助你绕过每个账户最多只能创建
    500 个 IAM 用户的服务限制。
- en: AWS offers a number of different *flavors* of AD depending on your needs, which
    we will look at next.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 根据你的需求提供了多个不同的*版本*的 AD，接下来我们将讨论这些选项。
- en: AWS Directory Service
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AWS 目录服务
- en: AWS provides a multitude of different options for using AD in the cloud according
    to your needs. There are three levels of the AWS Directory Service offered, and
    each serves a different purpose.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 根据你的需求提供了多种不同的云中使用 AD 的选项。AWS 目录服务提供了三个不同级别的服务，每个服务的用途不同。
- en: AWS Directory Service for Microsoft AD (MS AD)
  id: totrans-262
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AWS 目录服务 for Microsoft AD (MS AD)
- en: If you are looking to run a managed service Enterprise version of AD in the
    cloud, then the AWS AD service is an excellent option. This service can handle
    up to 50,000 users and up to 200,000 AD objects. It also has the ability to be
    implemented in a highly available fashion across multiple regions. Multi-Region
    replication is only supported in the Enterprise edition of AWS Managed MS AD.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望在云中运行托管服务版的企业版 AD，那么 AWS AD 服务是一个非常好的选择。该服务可以处理最多 50,000 个用户和最多 200,000
    个 AD 对象。它还支持在多个区域中以高可用的方式进行部署。多区域复制仅在 AWS 托管 MS AD 的企业版中支持。
- en: If you have more than 5,000 users and don't currently have an AD server or the
    need to manage users and/or AD objects in the AWS cloud, then AWS Directory Service
    is your best option.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有超过 5,000 个用户，并且当前没有 AD 服务器或无需在 AWS 云中管理用户和/或 AD 对象，那么 AWS 目录服务是你最好的选择。
- en: One disadvantage of using this service is if you run into performance issues,
    you don't have a lot of knobs and levers to pull. This is, after all, a managed
    service and is supposed to take administrative tasks off your plate. This is also
    not fitting for web federation.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此服务的一个缺点是，如果遇到性能问题，你没有很多可调整的选项。这毕竟是一个托管服务，目的是减轻你的管理任务。这也不适用于 Web 联合身份验证。
- en: AD connector
  id: totrans-266
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: AD 连接器
- en: If you already have an AD server on-premises and you want a way to quickly extend
    this to the cloud, then an AD connector is a good option. An AD connector doesn't
    cache information in the cloud, but rather serves as a proxy for your on-premises
    AD server. This also means that you can't make any changes to the AD connector
    in the cloud. All changes and updates have to take place on the on-premises server.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经有一个本地的 AD 服务器，并且想要快速将其扩展到云端，那么 AD 连接器是一个不错的选择。AD 连接器不会在云端缓存信息，而是作为本地 AD
    服务器的代理。这也意味着您不能在云端对 AD 连接器进行任何更改，所有更改和更新都必须在本地服务器上进行。
- en: Simple AD
  id: totrans-268
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 简单 AD
- en: 'Simple AD comes in two different sizes: small and large. The small version
    can support up to 500 users and 2,000 objects and the large version can support
    up to 5,000 users and 20,000 objects. If these numbers don''t support the growth
    rate of your organization, then you need to consider an alternative solution such
    as MS AD.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 简单 AD 有两个版本：小型版和大型版。小型版支持最多 500 个用户和 2000 个对象，大型版支持最多 5000 个用户和 20000 个对象。如果这些数字无法满足您组织的增长需求，您需要考虑其他解决方案，例如
    MS AD。
- en: Simple AD does support Kerberos-based SSO authentication and can be spun up
    using a CloudFormation script.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 简单 AD 支持基于 Kerberos 的 SSO 身份验证，并且可以通过 CloudFormation 脚本快速启动。
- en: Important note
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Simple AD is based on Samba 4 and isn't true MS AD. It won't support TRUST with
    other AD systems. It also doesn't support items such as MFA, PowerShell, AWS SSO,
    or Amazon Chime. While it is a good option if you only have a small set of users
    or if you are trying to provide a **fully qualified domain name** (**FQDN**) for
    a small number of Windows machines in the cloud, be mindful of its limitations—especially
    when reading through exam questions.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 简单 AD 基于 Samba 4，并不是真正的 MS AD。它不支持与其他 AD 系统的信任关系，也不支持 MFA、PowerShell、AWS SSO
    或 Amazon Chime 等功能。虽然如果您只有少量用户，或者需要为少量 Windows 机器提供**完全合格的域名**（**FQDN**）来使用云端服务，它是一个不错的选择，但请注意其局限性，尤其是在阅读考试题目时。
- en: AWS SSO
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS SSO
- en: Even with the vast offerings of AWS, there are still other services you or your
    customers probably want to incorporate as SaaS offerings that require authentication.
    Rather than making users verify themselves to each and every **service provider**
    (**SP**), AWS makes this simple with its own SSO service.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 即便 AWS 提供了丰富的服务，仍然有其他服务是您或您的客户可能希望作为 SaaS 服务集成，并且这些服务需要身份验证。与其让用户每次都验证自己对每个**服务提供商**（**SP**），AWS
    使用其自有的 SSO 服务使这一过程变得简单。
- en: This is even the case if you are using AD, be it on-premises or Azure-based
    AD. You might be using third-party authentication such as Okta or Ping Identity,
    and SSO can be incorporated with these services as well.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您使用的是本地的 AD 或 Azure 基础的 AD，您也可以使用第三方身份验证服务，例如 Okta 或 Ping Identity，并且这些服务同样可以与
    SSO 集成。
- en: Where AWS SSO really eases the burden from administrators is when you are managing
    multiple AWS accounts, as you can map your users and their roles quickly and easily
    to accounts with a single point of entry. There is no longer a need to set up
    a SAML token or to go through the process of showing users which account to use
    to switch roles.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: AWS SSO 使管理员轻松管理多个 AWS 账户，您可以快速且轻松地将用户及其角色映射到账户，并通过单一入口点进行管理。这样，您无需再设置 SAML
    令牌或让用户去选择切换角色的账户。
- en: Choosing a user identity strategy
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择用户身份策略
- en: With all of these different methods to manage your users and different ways
    to manage their authorization, you might need some guidelines on when to use each
    method.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些不同的方法来管理用户及其授权管理方式时，您可能需要一些关于何时使用每种方法的指南。
- en: If you have a small group, then that size of team is usually best served by
    using IAM groups.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个小团队，那么通常使用 IAM 组来管理最为合适。
- en: If you want to use federation to manage your user logins and you already have
    an AD in place, then SAML federation via AD is going to be the correct route.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想使用联合身份验证来管理用户登录，并且已经有一个 AD 环境，那么通过 AD 实现 SAML 联合身份验证将是正确的选择。
- en: If you want federation and you don't yet have an AD and you want the extra features
    that AD provides, such as providing **Domain Name System** (**DNS**) management
    to Windows instances, then you can go to AWS Directory Services.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要联合身份验证，并且尚未拥有 AD，且希望获得 AD 提供的额外功能，例如为 Windows 实例提供**域名系统**（**DNS**）管理，那么可以使用
    AWS 目录服务。
- en: However, if you want federation and don't want the hassle of setting up and
    managing AD or the licensing costs, then AWS SSO is going to be your best option.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你需要联合身份认证，并且不想麻烦地设置和管理 AD 或承担许可费用，那么 AWS SSO 将是你最好的选择。
- en: Storing secrets securely in AWS
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 AWS 中安全地存储机密
- en: Being a DevOps engineer and codifying our infrastructure and applications for
    deployment through deployment pipelines doesn't take out the necessity of credentialing
    items such as usernames and passwords or third-party API authentication from our
    application. It does, however, present a need to authenticate on a much more secure
    and repeatable basis so that development and testing aren't hindered, along with
    only sharing access only with those who absolutely need to know. Not every developer
    who is working on a system needs a username and password to the database if they
    are all using the same application. You can also limit the management overhead
    of having to change the credentials every time there is a personal change if you,
    instead of passing the credentials out to every developer, have the developer
    request the credentials from a secrets manager. Although there are third-party
    solutions that perform this task, AWS does provide two different native services
    that allow for secrets management, and even secrets rotation.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名 DevOps 工程师，负责通过部署管道对我们的基础设施和应用程序进行编码并部署，并不意味着可以省略诸如用户名、密码或第三方 API 身份验证等凭证管理。然而，这确实要求我们在更加安全和可重复的基础上进行身份验证，从而避免影响开发和测试，并且仅与那些真正需要知道的人共享访问权限。如果所有开发人员都在使用相同的应用程序，并不需要每个人都有数据库的用户名和密码。此外，如果你不直接将凭证分发给每位开发人员，而是让开发人员从秘密管理器中请求凭证，便可以减少每次人员变动时需要更改凭证的管理负担。虽然市场上有第三方解决方案可以执行此任务，但
    AWS 提供了两种不同的本地服务，允许进行机密管理，甚至机密轮换。
- en: AWS Secrets Manager
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS Secrets Manager
- en: You can use Secrets Manager to store, rotate, monitor, and control access to
    secrets such as database credentials, API keys, and **Open Authorization** (**OAuth**)
    tokens. One of the main features of Secrets Manager is that it allows for automatic
    rotation of secrets using AWS Lambda functions.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 Secrets Manager 来存储、轮换、监控和控制对诸如数据库凭证、API 密钥以及 **开放授权**（**OAuth**）令牌等机密的访问。Secrets
    Manager 的主要特点之一是它允许通过 AWS Lambda 函数自动轮换机密。
- en: There is no longer a need to place hardcoded secrets in your IaC or application
    code, or even to download to your instances at startup and have them stored in
    an unencrypted vulnerable state. You can now retrieve secrets when you need them
    simply and securely, with a call to Secrets Manager.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 不再需要将硬编码的机密存放在你的 IaC 或应用程序代码中，甚至不需要在启动时将其下载到实例并以未加密的易受攻击状态存储。现在，你可以通过调用 Secrets
    Manager 简单而安全地在需要时检索机密。
- en: Access to Secrets Manager is also governed by IAM policies. Users or roles must
    have been granted access to either the Secrets Manager service as a whole or the
    specific instance of Secrets Manager in order to perform operations such as storing
    and retrieving secrets.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 对 Secrets Manager 的访问也受到 IAM 策略的管控。用户或角色必须获得访问 Secrets Manager 服务整体或特定实例的权限，才能执行如存储和检索机密等操作。
- en: Another feature of Secrets Manager is that every time a secret is accessed,
    an audit trail is left. This is a valuable feature in highly compliant industries.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: Secrets Manager 的另一个功能是每次访问机密时，都会留下审计跟踪记录。这在高合规性行业中是一个非常有价值的功能。
- en: 'You might be wondering: *Just what is a secret?* Well, in the context of Secrets
    Manager, a secret is typically a set of credentials (username and password) and
    the connection details that you use to access a secured device.'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想：*什么是机密？* 在 Secrets Manager 中，机密通常是用于访问受保护设备的一组凭证（用户名和密码）以及连接详细信息。
- en: The basic structure of a secret in Secrets Manager
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Secrets Manager 中机密的基本结构
- en: 'In Secrets Manager, a secret contains encrypted secret text and several metadata
    elements that express the secret and define how Secrets Manager should deal with
    the secret, as illustrated in the following diagram:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Secrets Manager 中，机密包含加密的机密文本以及多个元数据元素，这些元素表示机密并定义 Secrets Manager 应如何处理机密，如下图所示：
- en: '![Figure 3.13 – Anatomy of a secret in Secrets Manager'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.13 – Secrets Manager 中机密的结构'
- en: '](img/Figure_3.13_B17405.jpg)'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.13_B17405.jpg)'
- en: Figure 3.13 – Anatomy of a secret in Secrets Manager
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13 – Secrets Manager 中机密的结构
- en: Now that we have seen how Secrets Manager stores and versions the secrets that
    we place into it for safekeeping, let's go through an exercise of creating and
    storing a secret using AWS Secrets Manager.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 Secrets Manager 如何存储和管理我们为安全存储而放入的密钥版本，让我们通过一个练习来创建和存储一个密钥，使用 AWS
    Secrets Manager。
- en: Creating and storing a secret in AWS Secrets Manager
  id: totrans-297
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 AWS Secrets Manager 中创建和存储密钥
- en: 'In the following exercise, we are going to store a secret securely using the
    AWS Management Console and AWS Secrets Manager. Proceed as follows:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下练习中，我们将使用 AWS 管理控制台和 AWS Secrets Manager 安全地存储一个密钥。操作步骤如下：
- en: Open up your browser and go back to the Amazon web console. You may have to
    log in if your session has expired. In the search bar at the top, type `Secrets
    Manager` to have the **Secrets Manager** icon appear. Click on the icon to go
    to the main **AWS Secrets Manager** page, as illustrated in the following screenshot:![Figure
    3.14 – The main Secrets Manager page
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器，返回到亚马逊 Web 控制台。如果您的会话已过期，您可能需要重新登录。在顶部的搜索栏中，输入`Secrets Manager`，以使**Secrets
    Manager**图标显示。点击该图标以进入主**AWS Secrets Manager**页面，如下图所示：![图 3.14 – 主 Secrets Manager
    页面
- en: '](img/Figure_3.14_B17405.jpg)'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_3.14_B17405.jpg)'
- en: Figure 3.14 – The main Secrets Manager page
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.14 – 主 Secrets Manager 页面
- en: On either the main `Secrets Manager` page or the **secrets list** page, once
    you have entered into the **Secrets Manager** section of the console, click **Store
    a new secret**.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主 `Secrets Manager` 页面或**密钥列表**页面中，一旦进入控制台中的**Secrets Manager**部分，点击**存储新密钥**。
- en: On the **Store a new secret** page, choose **Other type of secrets**, as illustrated
    in the following screenshot:![Figure 3.15 – Choosing the secret type on the Store
    a new secret page
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**存储新密钥**页面上，选择**其他类型的密钥**，如下图所示：![图 3.15 – 在存储新密钥页面上选择密钥类型
- en: '](img/Figure_3.15_B17405.jpg)'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_3.15_B17405.jpg)'
- en: Figure 3.15 – Choosing the secret type on the Store a new secret page
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.15 – 在存储新密钥页面上选择密钥类型
- en: Under **Specify the key/value pairs to be stored in this secret**, choose **Secret
    key/value** so that you can type in the secret as key-value pairs, as illustrated
    in the following screenshot:![Figure 3.16 – Adding the key pair and values to
    your secret in Secrets Manager
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**指定要存储在此密钥中的键/值对**下，选择**密钥/值**，这样您就可以将密钥作为键值对输入，如下图所示：![图 3.16 – 向您的密钥添加键值对及值到
    Secrets Manager
- en: '](img/Figure_3.16_B17405.jpg)'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_3.16_B17405.jpg)'
- en: Figure 3.16 – Adding the key pair and values to your secret in Secrets Manager
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.16 – 向您的密钥添加键值对及值到 Secrets Manager
- en: For `DefaultEncryptionKey`, as illustrated in the following screenshot:![Figure
    3.17 – Secrets Manager encryption
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`DefaultEncryptionKey`，如以下屏幕截图所示：![图 3.17 – Secrets Manager 加密
- en: '](img/Figure_3.17_B17405.jpg)'
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_3.17_B17405.jpg)'
- en: Figure 3.17 – Secrets Manager encryption
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 3.17 – Secrets Manager 加密
- en: In the first box, type `username`. In the second box, type `devopspro`.
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个框中，输入`username`。在第二个框中，输入`devopspro`。
- en: Choose **+ Add row** to add a second key-value pair.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**+ 添加行**以添加第二个键值对。
- en: In the first box, type `password`. In the second box, type `MyTopSecretP@ssword#`.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个框中，输入`password`。在第二个框中，输入`MyTopSecretP@ssword#`。
- en: Once we have typed in the values for our secret, we can view it in a JSON context
    before moving on to ensure it is correct.
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦我们输入了密钥的值，我们可以在 JSON 格式下查看它，以确保其正确性。
- en: Choose `SecretString` field of the secret.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择密钥的`SecretString`字段。
- en: For `DefaultEncryptionKey` and click **Next**.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`DefaultEncryptionKey`，然后点击**下一步**。
- en: Under `chapter3/SecretManager`. This stores your secret in a virtual `chapter3`
    folder.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`chapter3/SecretManager`下。这会将您的密钥存储在一个虚拟的`chapter3`文件夹中。
- en: For `Secret Manager Tutorial` and click **Next**.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`Secret Manager Tutorial`，然后点击**下一步**。
- en: We don't need to rotate this secret, so choose **Disable automatic rotation**,
    and then click **Next**.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们不需要轮换此密钥，因此选择**禁用自动轮换**，然后点击**下一步**。
- en: On the **Review** page, you can check all of the settings that you have chosen.
    If you are using the secret within an application, be sure to review the **Sample
    code** section that has cut-and-paste-enabled code that you can put into your
    own applications to use this secret to retrieve the credentials. Each tab has
    the same code in different programming languages.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**复审**页面上，您可以检查您所选择的所有设置。如果您在应用程序中使用该密钥，请务必查看**示例代码**部分，其中包含可以粘贴到您自己应用程序中的代码，以便使用此密钥来检索凭证。每个标签页都包含不同编程语言中的相同代码。
- en: To save your changes, choose **Store**.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要保存更改，请选择**存储**。
- en: Retrieving your secret from Secrets Manager
  id: totrans-323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 Secrets Manager 中检索您的密钥
- en: 'Now that we know how to use the AWS Management Console to save a secret, we
    will use the AWS CLI to retrieve the secret and see that it has been stored successfully.
    Proceed as follows:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何使用AWS管理控制台保存秘密，我们将使用AWS CLI检索秘密，并查看它已成功存储。操作如下：
- en: 'Open up your terminal if you closed it previously, and type the following command
    so that we can retrieve the secret:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您之前关闭了终端，请打开它，并输入以下命令，以便我们可以检索秘密：
- en: '[PRE11]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After executing the preceding command, there should be a return somewhat like
    this:'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 执行上述命令后，应该会返回类似于以下内容：
- en: '[PRE12]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now that we can see our secret with the name `chapter3/SecretManager` stored
    in Secrets Manager, we can go about retrieving the secret by running the following
    command:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们可以看到我们在Secrets Manager中以名称`chapter3/SecretManager`存储的秘密，我们可以通过运行以下命令来检索秘密：
- en: '[PRE13]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We just used AWS Secrets Manager to successfully create, store, and retrieve
    a secret. One of the reasons why we could retrieve the secret is because our IAM
    role gives us the permissions to do so. Next, we will look at the other service
    that AWS offers for safekeeping of secrets: SSM Parameter Store.'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚使用AWS Secrets Manager成功创建、存储和检索了一个秘密。我们能够检索秘密的原因之一是因为我们的IAM角色赋予了我们这样做的权限。接下来，我们将查看AWS为秘密的安全保管提供的另一项服务：SSM参数存储。
- en: SSM Parameter Store
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SSM参数存储
- en: '**Parameter Store** is a managed service from AWS to store strings. These can
    be plaintext strings or, in the case of using it as a secrets manager, it can
    store encrypted data. Access to the parameters is governed by IAM policy access.'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '**参数存储**是AWS提供的一项托管服务，用于存储字符串。这些可以是明文字符串，或者在将其用作秘密管理器时，它可以存储加密数据。访问这些参数受IAM策略访问的管理。'
- en: Parameter Store is more flexible than Secrets Manager and if you store standard
    parameters there is no charge, but there is a limit of 10,000 parameters.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 参数存储比Secrets Manager更灵活，如果您在那里存储标准参数，则没有费用，但参数数量有限制为10,000个。
- en: 'Secrets and values stored in Parameter Store can be accessed from many different
    AWS services, including the following:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在参数存储中的秘密和值可以从许多不同的AWS服务中访问，包括以下服务：
- en: EC2
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EC2
- en: '**Elastic Container Service** (**ECS**)'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹性容器服务** (**ECS**)'
- en: Secrets Manager
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Secrets Manager
- en: AWS Lambda
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS Lambda
- en: CloudFormation
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CloudFormation
- en: CodePipeline
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CodePipeline
- en: CodeBuild
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CodeBuild
- en: CodeDeploy
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CodeDeploy
- en: If you or your team are looking for a central way to separate your secrets and
    configuration data from your code base, along with the ability to store different
    values for different environments, then Parameter Store could be a good option
    for you.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您或您的团队正在寻找一种集中的方法来将秘密和配置数据与代码库分离，以及存储不同环境的不同值的能力，那么参数存储可能是一个不错的选择。
- en: Secrets Manager versus Parameter Store
  id: totrans-345
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Secrets Manager与Parameter Store
- en: 'As we look at the different services that allow us to store secrets securely
    in AWS, we might wonder why we would choose one over the other. Let''s take a
    quick comparison of the two services and see the main differences, as follows:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看不同的AWS安全存储秘密的服务时，我们可能会想知道为什么选择其中一个而不是另一个。让我们快速比较这两种服务，看看它们的主要区别，如下所示：
- en: If you are looking for an option that won't add any more to your budget, then
    SSM Parameter Store is the right choice for you and your organization.
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您正在寻找一种不会增加预算的选项，则SSM参数存储是您和您的组织的正确选择。
- en: If you want the ability to store plaintext secrets, then SSM Parameter Store
    has this ability. AWS Secrets Manager cannot store values in plaintext.
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您希望能够存储明文秘密，则SSM参数存储具有此功能。AWS Secrets Manager无法存储明文值。
- en: Both services are proportionately secure as both can use **Key Management Service**
    (**KMS**) to securely encrypt values at rest.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 两种服务在安全性方面都是成比例的，因为两者都可以使用**密钥管理服务** (**KMS**) 在静态时安全地加密值。
- en: If you want the ability to automatically rotate secrets, then AWS Secrets Manager
    needs to be your service choice. (With Parameter Store, you would have to rotate
    the secrets manually.)
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望能够自动轮换秘密，则AWS Secrets Manager需要成为您的服务选择。（使用参数存储，您将不得不手动轮换秘密。）
- en: Using Cognito with application authentication
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Cognito进行应用程序身份验证
- en: Cognito is a service that allows web and mobile applications to authenticate
    to your platform using either username and password or third-party identification
    social IdPs such as Amazon, Facebook, or Google. The three main functions of **Amazon
    Cognito** are user management, authentication, and synchronization. Cognito can
    be used to coordinate the authentication of external users to your applications
    via third-party IdPs. You can also federate your users with any SAML-based IdP.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: Cognito 是一项服务，允许 Web 和移动应用程序通过用户名和密码或第三方身份验证社交 IdP（如 Amazon、Facebook 或 Google）来进行身份验证。**Amazon
    Cognito** 的三个主要功能是用户管理、身份验证和同步。Cognito 可用于协调外部用户通过第三方 IdP 进行身份验证。您还可以通过任何基于 SAML
    的 IdP 联邦化您的用户。
- en: 'Some of the advantages of using Cognito include the following:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Cognito 的一些优势包括以下几点：
- en: Ease of setup, whereby you can have an authentication and authorization system
    that integrates into your AWS services up and running in a matter of minutes,
    versus the amount of time it would take you for custom programming to do the same
    task.
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置简便，您可以在几分钟内让集成到 AWS 服务中的身份验证和授权系统上线，而与之相对的，自定义编程同样任务所需的时间要长得多。
- en: You can quickly and easily integrate MFA into **Amazon Cognito**.
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以快速而轻松地将 MFA 集成到 **Amazon Cognito** 中。
- en: Cognito metrics are easily monitored using the CloudWatch service, with no extra
    effort or coding.
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cognito 指标可以通过 CloudWatch 服务轻松监控，无需额外的工作或编码。
- en: Any API calls made to the Cognito service are recorded to CloudTrail (assuming
    you have turned on CloudTrail for the account and region).
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对 Cognito 服务的任何 API 调用都会记录到 CloudTrail（假设您已为该帐户和区域启用 CloudTrail）。
- en: Where would you use Cognito?
  id: totrans-358
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您会在哪里使用 Cognito？
- en: As you build out an application for external customers (customers that are not
    part of your company) and you want these customers to have the same experience
    no matter what type of device they are using, this is a case to use AWS Cognito.
    Cognito allows users to have a similar login experience whether they are using
    a mobile device, tablet, laptop, or **virtual machine** (**VM**).
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 当您为外部客户（即不是您公司的一部分的客户）构建应用程序，并希望这些客户无论使用何种设备都能有相同的体验时，这时使用 AWS Cognito 就是一个合适的选择。Cognito
    允许用户无论使用手机、平板、笔记本电脑还是 **虚拟机**（**VM**），都能拥有相似的登录体验。
- en: Another case for using Cognito is if you want to quickly incorporate **two-factor
    authentication** (**2FA**) such as email or **Simple Message Service** (**SMS**)
    authentication into your application.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Cognito 的另一个案例是，如果您希望快速将 **双重身份验证**（**2FA**），如电子邮件或 **简单消息服务**（**SMS**）身份验证集成到您的应用程序中。
- en: User pools
  id: totrans-361
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户池
- en: 'The first main component of Cognito is user pools. Essentially, user pools
    present sign-up and sign-in services. Understand these facts about user pools:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: Cognito 的第一个主要组件是用户池。实际上，用户池提供了注册和登录服务。了解关于用户池的以下事实：
- en: They provide sign-up and sign-in services.
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们提供注册和登录服务。
- en: User pools have a built-in **user interface** (**UI**) that is customizable.
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户池有一个内置的 **用户界面**（**UI**），并且可以自定义。
- en: They allow for sign-in via social IdPs such as Amazon, Google, Facebook, and
    Apple, along with SAML IdPs from your user pool.
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们允许通过社交 IdP（如 Amazon、Google、Facebook 和 Apple）以及来自用户池的 SAML IdP 进行登录。
- en: They allow for security features such as MFA authentication, can check for compromised
    credentials, and have account takeover protection.
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们支持诸如 MFA 身份验证等安全功能，可以检查泄露的凭证，并具有帐户接管保护。
- en: User pools have phone and email verification.
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户池支持电话和电子邮件验证。
- en: User pools allow for customized workflows along with user migration via AWS
    Lambda triggers.
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户池允许通过 AWS Lambda 触发器进行自定义工作流以及用户迁移。
- en: 'Once you have successfully authenticated a user with a user pool, then Cognito
    issues a JWT that can be used to authorize access to either your AWS credentials
    or your APIs, as illustrated in the following diagram:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您成功通过用户池对用户进行身份验证，Cognito 就会发放一个 JWT，可以用于授权访问您的 AWS 凭证或 API，如下图所示：
- en: '![Figure 3.18 – Cognito user pool authentication'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 3.18 – Cognito 用户池身份验证'
- en: '](img/Figure_3.18_B17405.jpg)'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.18_B17405.jpg)'
- en: Figure 3.18 – Cognito user pool authentication
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.18 – Cognito 用户池身份验证
- en: 'With an understanding of user pools and what function they serve, we can look
    at the other main component of **Amazon Cognito**: identity pools.'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 了解了用户池及其功能后，我们可以来看一下 **Amazon Cognito** 的另一个主要组件：身份池。
- en: Identity pools
  id: totrans-374
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 身份池
- en: The second main component of **Amazon Cognito** is that of identity pools. Identity
    pools provide the credentials to access AWS services. With an identity pool, you
    can create unique identities for your users that give them temporary access credentials
    to AWS services.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '**Amazon Cognito**的第二个主要组成部分是身份池。身份池提供访问AWS服务的凭证。使用身份池，你可以为用户创建独特的身份，使他们能够临时访问AWS服务。'
- en: 'If you look at the workflow shown in *Figure 3.17*, you will see that the user
    initiates the login (usually from an application on their device) with the web
    IdP. Once authenticated with the web IdP, a `GetId` call is passed to Amazon Cognito,
    which then validates the request. The app will then make a `GetCredentialsForIdentity`
    request. Cognito will once again validate this request. At this point, Cognito
    will call out to the STS service and get a short-lived token for the services
    the app is authorized for and will then pass that back on to the application,
    as illustrated in the following diagram:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看*图3.17*中显示的工作流，你会看到用户从其设备上的应用程序启动登录（通常是通过Web IdP）。一旦通过Web IdP验证，`GetId`调用会传递给Amazon
    Cognito，后者会验证请求。然后，应用程序会发出`GetCredentialsForIdentity`请求。Cognito会再次验证此请求。此时，Cognito将调用STS服务并为应用程序授权的服务获取一个短期令牌，然后将其返回给应用程序，如下图所示：
- en: '![Figure 3.19 – Cognito identity pool authorization flow'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.19 – Cognito身份池授权流程'
- en: '](img/Figure_3.19_B17405.jpg)'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.19_B17405.jpg)'
- en: Figure 3.19 – Cognito identity pool authorization flow
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.19 – Cognito身份池授权流程
- en: Identity pools also allow you to define your own custom developer-authenticated
    identities in addition to the social IdPs supported for authentication. You can
    do this in the Cognito console by choosing **Custom**, setting your own name,
    and then using the sample code provided by AWS as the base for creating your new
    custom federated identity pool.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 身份池还允许你定义自己的自定义开发者认证身份，除了AWS支持的社交IdP进行身份验证之外。你可以在Cognito控制台中选择**自定义**，设置自己的名称，然后使用AWS提供的示例代码作为创建新自定义联邦身份池的基础。
- en: Tip to remember
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 记住的提示
- en: User pools provide the authentication, and identity pools provide the authorization.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 用户池提供身份验证，身份池提供授权。
- en: Summary
  id: totrans-383
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about authentication and authorization methods in
    AWS. We talked about how to authorize users either with username and password
    or via federation using the IAM service and then authenticating them using IAM
    policies. **AWS Organizations** also showed us how we could further restrict the
    authorization settings using SCPs. We looked at different models of federation
    with services such as AD, AWS SSO, and Cognito. We also looked at how to securely
    store secrets as we start to work with our applications using Secrets Manager
    or SSM Parameter Store.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了AWS中的身份验证和授权方法。我们讨论了如何使用用户名和密码或通过IAM服务进行联邦授权用户，然后通过IAM策略对他们进行身份验证。**AWS
    Organizations**还向我们展示了如何通过使用SCP进一步限制授权设置。我们查看了与AD、AWS SSO和Cognito等服务的不同联邦模型。我们还了解了如何使用Secrets
    Manager或SSM Parameter Store安全地存储密钥，以便在开始与应用程序工作时使用。
- en: In the next chapter, we will wrap up our section on AWS fundamentals with a
    look at the NoSQL service DynamoDB.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过介绍NoSQL服务DynamoDB来总结AWS基础知识部分。
- en: Review questions
  id: totrans-386
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复习问题
- en: In the Shared Responsibility Model presented by AWS for IaaS, who is responsible
    for operating system security and patching?
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在AWS为IaaS提出的共享责任模型中，谁负责操作系统的安全性和补丁管理？
- en: What are the major differences between a user and a role from the choices presented
    here?
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此处提供的选择中，用户和角色之间的主要区别是什么？
- en: a. A role can be assumed by multiple principals; a user cannot be assumed.
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. 角色可以由多个主体假定；用户不能被假定。
- en: b. A role uses long-term credentials.
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. 角色使用长期凭证。
- en: c. A role can be part of a group.
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. 角色可以是一个组的成员。
- en: d. A role does not use long-term credentials.
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d. 角色不使用长期凭证。
- en: 'Which comes first: authorization or authentication?'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 授权和身份验证哪个先进行？
- en: Which native service in AWS that stores secrets offers automatic secret rotation?
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS中哪个原生服务存储密钥并提供自动密钥轮换？
- en: A company wants to extend their current AD into the AWS cloud but doesn't want
    to manage more servers. Which service is the best choice for them?
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一家公司希望将当前的AD扩展到AWS云中，但不想管理更多的服务器。对于他们来说，哪个服务是最佳选择？
- en: a. AWS Simple Directory Service
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. AWS简单目录服务
- en: b. AWS Cognito
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. AWS Cognito
- en: c. AWS User Pools
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. AWS用户池
- en: d. AWS AD Connector
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d. AWS AD连接器
- en: Review answers
  id: totrans-400
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复习答案
- en: The customer is responsible for operating system patching and security.
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户负责操作系统的补丁和安全性。
- en: a and d.
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: a 和 d。
- en: Authentication.
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 认证。
- en: AWS Secrets Manager.
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS Secrets Manager。
- en: d.
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: d.
