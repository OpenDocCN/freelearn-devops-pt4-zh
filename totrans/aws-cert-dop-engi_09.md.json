["```\n    $aws s3 cp sqs-queues.yml s3://devopspro-beyond/sqs-queues.yml\n    ```", "```\n$aws cloudformation deploy --template my-template.json --stack-name CLI-stack --parameter-overrides Key1=Value1 Key2=Value2\n```", "```\naws cloudwatch put-metric-alarm --alarm-name \"SQS_stack_errors\"  \\\n   --alarm-description \"example alarm\" --namespace \"SQS_log_errors\"  \\\n   --metric-name Errors --statistic Maximum --period 10 \\\n   --evaluation-periods 1 --threshold 0  \\\n   --treat-missing-data notBreaching  \\\n   --comparison-operator GreaterThanThreshold \n```", "```\naws cloudwatch describe-alarms --alarm-names \"SQS_stack_errors\"\n```", "```\nRB_TRIGGER=$(cat <<EOF\n{\n  \"RollbackTriggers\": [\n    {\n      \"Arn\": \"arn:aws:cloudwatch:us-east-2:470066103307:alarm:SQS_stack_errors\",\n      \"Type\": \"AWS::CloudWatch::Alarm\"\n    }\n  ],\n  \"MonitoringTimeInMinutes\": 5\n}\nEOF\n)\n```", "```\naws cloudformation create-change-set \\\n    --change-set-name \"SQS-UPDATE\" \\\n    --stack-name \"SQSqueue\" \\\n    --template-url \"https://devopspro-beyond.s3.us-east-2.amazonaws.com/sqs-queues_change_set.yml\" \\\n    --change-set-type \"UPDATE\" \\\n    --parameters ParameterKey=QueueName,ParameterValue=chapter7 \\\n    --capabilities CAPABILITY_IAM \\\n    --rollback-configuration \"$RB_TRIGGER\" \n```", "```\n    Mappings: \n    RegionMap: \n    us-east-1: \n          HVM64: \"ami-032930428bf1abbff\"\n        us-east-2:\n          HVM64: \"ami-027cab9a7bf0155df\"  \n    us-west-1: \n          HVM64: \"ami-088c153f74339f34c\"\n    eu-west-1: \n          HVM64: \"ami-015232c01a82b847b\"\n    ap-southeast-1: \n          HVM64: \"ami-0ba35dc9caf73d1c7\"\n    ap-northeast-1: \n          HVM64: \"ami-0b2c2a754d5b4da22\"\n    Resources: \n    EC2Instance: \n        Type: \"AWS::EC2::Instance\"\n    Properties: \n          ImageId: !FindInMap\n            - RegionMap\n            - !Ref 'AWS::Region'\n            - HVM64\n          InstanceType: t2.small\n    ```", "```\n    PublicSubnet1:\n        Type: AWS::EC2::Subnet\n        Properties:\n          AvailabilityZone:\n    Fn::Select: \n            - 0\n            - Fn::GetAZs: \"\"\n    ```", "```\n    SourceSecurityGroupName: !GetAtt EC2.SourceSecurityGroup.GroupName\n    ```", "```\n    Conditions:\n      PublicSubnetsCondition:\n          Fn::Equals: [ !Ref CreatePublicSubnets, \"true\" ]\n      NoPublicSubnetsCondition:\n          Fn::Equals: [ !Ref CreatePublicSubnets, \"false\" ]\n    ```", "```\n  MySQLInstance:\n    Type: 'AWS::RDS::DBInstance'\n    Properties:\n      DBName: MyRDSInstance\n      AllocatedStorage: '20'\n      DBInstanceClass: db.t2.micro\n      Engine: mysql\n      MasterUsername: '{{resolve:secretsmanager:MyRDSSecret:SecretString:username}}'\n      MasterUserPassword: '{{resolve:secretsmanager:MyRDSSecret:SecretString:password}}'  \n```", "```\n$aws cloudformation package \\\n --template-file /path_to_template/template.json \\\n --s3-bucket bucket-name \\\n --output-template-file packaged-template.json\n```", "```\n    aws s3 cp nested_dynamo.yml s3://devopspro-beyond/\n    ```", "```\n    aws cloudformation package \\\n      --template-file nested_root.yml \\\n      --s3-bucket devopspro-beyond \\\n      --output-template-file packaged_template.yml\n    ```", "```\n    aws cloudformation deploy --template-file /AWS-Certified-DevOps-Engineer-Professional-Certification-and-Beyond/Chapter-7/nested/packaged_template.yml --stack-name <YOUR STACK NAME>\n    ```", "```\n    aws cloudformation deploy --template-file /AWS-Certified-DevOps-Engineer-Professional-Certification-and-Beyond/Chapter-7/nested/packaged_template.yml --stack-name Chapt7 --capabilities CAPABILITY_IAM\n    ```", "```\nServerWaitCondition:\n    Type: 'AWS::CloudFormation::WaitCondition'\n    DependsOn: Server\n    Properties:\n      Handle: !Ref ServerWaitHandle\n      Timeout: '1200'\n…\n      UserData: !Base64 \n        'Fn::Join':\n          -\"\n          - - |\n              #!/bin/bash -v\n            - |\n              # Send Wait Condition URL \n            - '/usr/local/bin/aws s3 cp s3://'\n            - !Ref BucketFolder\n            - |\n              /templates/success.json /tmp/a \n            - SignalURL=\n            - !Ref ServerWaitHandle\n            - |+\n            - |\n              echo $SignalURL \n            - curl -T /tmp/a \"\n            - !Ref AdminServerWaitHandle\n            - |\n              \"\n```"]