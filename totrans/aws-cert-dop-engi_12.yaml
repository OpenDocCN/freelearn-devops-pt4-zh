- en: 'Chapter 10: Using AWS Opsworks to Manage and Deploy your Application Stack'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If your operations team is already managing infrastructure and applications
    with either Puppet or Chef, then you should have already heard of OpsWorks. We'll
    look at how stacks can use pre-defined code to create the infrastructure applications
    and even the data tier for you. Need to perform updates to your apps? We will
    look into that as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: OpsWorks essentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Available OpsWorks platforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpsWorks and Chef Automate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and deploying a recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although not necessary, familiarity with either the Chef or Puppet platform
    will be helpful when reading this chapter. It is required that you understand
    the different components of a full-stack application and how they interact with
    each other.
  prefs: []
  type: TYPE_NORMAL
- en: OpsWorks essentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 7*](B17405_07_Final_JM_ePub.xhtml#_idTextAnchor188), *Using CloudFormation
    Templates to Deploy Workloads,* we took a look at the **Infrastructure as a Service**
    (**IaaS**) offering from **Amazon Web Services** (**AWS**). Now we will look at
    one of the **Platform as a Service** (**PaaS**) offerings from AWS, OpsWorks.
  prefs: []
  type: TYPE_NORMAL
- en: 'OpsWorks is, in essence, a wrapper around the automation packages Chef and
    Puppet. Why would you want to use OpsWorks? The following bullet points outline
    why you would choose to implement OpsWorks as a solution for your client or enterprise:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Simple**: OpsWorks is easy to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Productive**: OpsWorks helps reduce errors by using scripted configuration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flexible**: Deployments of any size can be simplified by using OpsWorks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Powerful**: OpsWorks helps reduce both the time of deployment and the costs
    to deploy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Secure**: The OpsWorks service allows for fine-grained access control.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: OpsWorks is one of the few services that doesn't require a region. It is a global
    service that shows all stacks created, no matter what region your cloud resources
    are currently residing in.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'OpsWorks can be especially helpful if you have a lean team that is responsible
    for all or most components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1 – OpsWorks serving users from an app'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.1_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.1 – OpsWorks serving users from an app
  prefs: []
  type: TYPE_NORMAL
- en: 'Through a series of events, you can both construct and manage your applications
    using AWS OpsWorks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2 – Overview of how OpsWorks operates'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.2_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.2 – Overview of how OpsWorks operates
  prefs: []
  type: TYPE_NORMAL
- en: First, you create a stack for your application. Multiple applications can reside
    on the same stack. They should all be components of the same system, such as a
    LAMP stack, a Rails deployment, or even a single- or double-tiered application.
  prefs: []
  type: TYPE_NORMAL
- en: Second, after your stack has been provisioned, you must define your layers.
    In the case of a LAMP stack, those layers would be an Apache web server with PHP
    pages, along with a MySQL data store.
  prefs: []
  type: TYPE_NORMAL
- en: Third, you will have your applications defined in a combination of code versioning
    repositories and deployment code, such as Puppet manifests or Chef recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Fourth, EC2 instances need to be defined in both number and size so that our
    application has a spot to be deployed to.
  prefs: []
  type: TYPE_NORMAL
- en: And finally, for the fifth step, we need to choose a deployment strategy for
    our different layers. This strategy can vary based on whether you are performing
    manual or automated deployments.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the components of OpsWorks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we start to talk about OpsWorks, it will be essential to understand specific
    keywords. Let's now look at the components that make up the parts of OpsWorks.
  prefs: []
  type: TYPE_NORMAL
- en: Stacks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A **stack** represents the cloud infrastructure and applications that you want
    to manage.
  prefs: []
  type: TYPE_NORMAL
- en: You cannot mix and match Windows and Linux instances in a stack. You can, however,
    run different distributions of Linux in the same stack.
  prefs: []
  type: TYPE_NORMAL
- en: Your stack can comprise custom **Amazon Machine Images** (**AMIs**) as long
    as the base operating system from which the image was made is one of the supported
    operating systems. OpsWorks does not support custom Windows AMIs.
  prefs: []
  type: TYPE_NORMAL
- en: Layers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A **layer** defines how to set up and configure a set of instances, as well
    as any related resources. Every stack in OpsWorks contains one or more layers.
    You can think of a layer as a blueprint for OpsWorks to use for a set of one or
    more EC2 instances.
  prefs: []
  type: TYPE_NORMAL
- en: At the layer level, you can define how to configure the instances, what packages
    are installed, and also define critical events that will happen during the lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several different types of layers that you can define in OpsWorks:'
  prefs: []
  type: TYPE_NORMAL
- en: Load balancer layers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database layers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application server layers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom OpsWorks layers (this is when no pre-defined layer will meet your requirements).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other layers: Linux stacks have the ability to create Ganglia layers for monitoring
    or Memcached layers for caching.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instances
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An instance in OpsWorks comprises a computing resource, such as an EC2 instance
    or on-premises server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Users can add instances to an OpsWorks stack in one of two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: You can use OpsWorks to provision the instance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the case of Linux-based stacks, you can register a previously created EC2
    instance or on-premises server. This would then allow OpsWorks to manage the instance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS OpsWorks supports 64-bit versions of a few of the operating systems offered
    on the AWS EC2 platform, including Ubuntu and Amazon Linux, along with Windows
    Server.
  prefs: []
  type: TYPE_NORMAL
- en: Apps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In OpsWorks, an **app** represents code that you would like to apply to an application
    server. The code itself will reside in an application repository, such as GitHub
    or S3\. When you deploy an application, OpsWorks triggers a deploy event.
  prefs: []
  type: TYPE_NORMAL
- en: Lifecycle events in OpsWorks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are five series of events that happen during the lifecycle of an instance
    when managed by OpsWorks. The events are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Undeploy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shutdown
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s take a look at some of the events in a bit more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Setup**: This is triggered every time an instance boots up. It is also used
    for the initial installation of packages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deploy**: This event is triggered when deploying a new software version.
    The Deploy event also allows for customizable software deployments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configure**: The Configure event is triggered on all instances when there
    is a state change. This event is used to ensure that the configuration is up to
    date on all instances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access management in OpsWorks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have a requirement to provide individual user-level access to instances,
    be they Linux or Windows instances, then OpsWorks might be the solution you are
    looking for. The AWS OpsWorks service provides an easy way to allow individual
    users to log in to the server with their own credentials without the use of custom
    scripts.
  prefs: []
  type: TYPE_NORMAL
- en: If you have ever stood up EC2 instances and tried to get in via SSH, then you
    are most likely going to use the EC2 user or Ubuntu user, depending on the flavor
    of the operating system that you have used to provision your instance. If you
    would like to have custom users be able to access individual EC2 instances then
    this can become a complex setup, provisioning individual users and having them
    authenticate with either LDAP or an Active Directory Server.
  prefs: []
  type: TYPE_NORMAL
- en: The same is true if you are allocating Windows servers on AWS. You need to take
    the key pair that you used to stand up the instance and then, using that key pair,
    decrypt the administrator password.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: All users for AWS OpsWorks Stacks must originate from **Identity and Access
    Management** (**IAM**) users.
  prefs: []
  type: TYPE_NORMAL
- en: Opsworks lets you provision access for users to access to the instances in the
    stack quickly and easily without the need to set up an Active Directory or LDAP
    server.
  prefs: []
  type: TYPE_NORMAL
- en: Types of users in OpsWorks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are two types of users inside of the AWS OpsWorks service: administrative
    users and regular OpsWorks users.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Regular users in OpsWorks do not require an attached policy or any special
    OpsWorks permissions in their IAM user permissions. On a stack-by-stack basis,
    you can designate one or more of the following four permissions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Show**: This permission allows users to view the stack only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deploy**: The deploy permission also includes the show permission, and adds
    on extra permissions for users to update and deploy apps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Manage**: The manage permission includes the deploy permission set along
    with adding stack management permissions, such as adding layers or instances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deny**: The deny permission is used to deny specific permissions across a
    stack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing users into OpsWorks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Throughout the course of the exercises we have performed so far, we have created
    a number of IAM users in the account we have been using. We are going to use these
    users in our next exercise to practice importing users into OpsWorks:'
  prefs: []
  type: TYPE_NORMAL
- en: Log on to the AWS terminal as the administrative user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once logged in, navigate to the `OpsWorks` in the top search box. Once **OpsWorks**
    appears, click on the **OpsWorks** icon to be taken to the **OpsWorks** service:![Figure
    10.3 – The OpsWorks service from the top search bar in the AWS Console
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.3_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 10.3 – The OpsWorks service from the top search bar in the AWS Console
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Even though once you import users, they appear in any one of the three sections
    of the OpsWorks service, we are going to import our users into **OpsWorks Stacks**.
    Click on the blue button on the bottom right, which is labeled **Go to OpsWorks
    Stacks**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, in the OpsWorks Stacks service, look to the left-hand menu and find the
    menu item named **Users**. Click on **Users** to be taken to the **Users** management
    screen:![Figure 10.4 – The Users menu item on the OpsWorks Stacks side menu bar
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.4_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 10.4 – The Users menu item on the OpsWorks Stacks side menu bar
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the main window pane, under any current users, find the link labeled **Import
    IAM users to US East (Ohio)**. Click on this link to be brought to the import
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have clicked on this link, a new menu will appear, allowing you to
    select the users that you want to import into OpsWorks. Select one or more users
    that you want to import into OpsWorks as OpsWorks users, and then click the blue
    **Import to OpsWorks** button:![Figure 10.5 – Selecting the users to import inside
    of the OpsWorks service
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.5_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 10.5 – Selecting the users to import inside of the OpsWorks service
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now we should see a list of our users that we have imported into OpsWorks. If
    we wanted to add further users or restrict their permissions (such as giving a
    user self-management access to add their own SSH key, or the ability to change
    their own password), we could do that by editing the user. Let's edit one user.
    Click on the edit link next to our developer, Mariel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In another terminal window, print out the contents of your developer''s public
    SSH key that you created previously for the exercise in [*Chapter 8*](B17405_08_Final_JM_ePub.xhtml#_idTextAnchor212)*,*
    *Creating Workloads with CodeCommit and CodeBuild*. Copy this public key to your
    clipboard for use in the next step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Switching back to the AWS Console, and now on the user Mariel's screen, scroll
    down until you see the multi-line text box to the left of **Public SSH key**.
    Paste the public key that you have previously copied into this box:![Figure 10.6
    – Adding the developer's public SSH key to the OpsWorks user
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.6_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 10.6 – Adding the developer's public SSH key to the OpsWorks user
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'With the public key added, our developer can log in to an instance with the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have now gone through the exercise of importing previously created IAM users
    into OpsWorks, along with setting up our developer's previously created SSH key
    so that they can easily log into an OpsWorks instance with their own username.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at some of the scenarios where you would want to use the
    OpsWorks service.
  prefs: []
  type: TYPE_NORMAL
- en: Use cases for AWS OpsWorks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After getting this far, you may be wondering what the best cases to put this
    service into practical use are. We will look at a few scenarios detailing when
    it would make sense to use the OpsWorks service. You need to understand that when
    evaluating either scenarios presented by test questions or real-life situations,
    OpsWorks is one of a number of deployment and management tools that AWS offers.
    Elastic Beanstalk is another tool that can be used to provision, deploy, and manage
    instances and code. We will cover this in much more depth in the next chapter,
    [*Chapter 11*](B17405_11_Final_JM_ePub.xhtml#_idTextAnchor284), *Using Elastic
    Beanstalk to Deploy your Application*.
  prefs: []
  type: TYPE_NORMAL
- en: Available OpsWorks platforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpsWorks, by its nature, is a configuration management service that provides
    managed instances of Chef and Puppet. Both of these software packages are industry-recognized
    automation platforms that enable you to use code and configure your servers via
    automation.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's take a look at the three platforms that OpsWorks offers in a bit more
    depth.
  prefs: []
  type: TYPE_NORMAL
- en: OpsWorks Stacks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The original service offering from OpsWorks was OpsWorks Stacks. By using layers,
    it helps you manage and organize your EC2 instances.
  prefs: []
  type: TYPE_NORMAL
- en: OpsWorks for Chef Automate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have a team that is well versed in the creation of Chef cookbooks and
    knows how to use some of the more advanced features of Chef, such as Knife, yet
    doesn't want to deal with the hassles and headaches of maintaining their own Chef
    servers, then Chef Automate can be a logical choice for your team.
  prefs: []
  type: TYPE_NORMAL
- en: If you are currently using Chef to manage some of your on-premises infrastructure,
    OpsWorks for Chef Automate can be set up to manage hybrid environments from a
    single source.
  prefs: []
  type: TYPE_NORMAL
- en: OpsWorks for Chef Automate also has the ability to perform compliance scans.
    These compliance scans allow you to audit your applications on a regular basis
    to detect exposures and non-compliant configurations.
  prefs: []
  type: TYPE_NORMAL
- en: There is no need to worry about patching, updating, or backing up your Chef
    server, since these are some of the tasks that OpsWorks takes care of for you.
    OpsWorks for Chef Automate also allows you to manage the instance of Chef through
    the Chef Console, or via the command line with Knife.
  prefs: []
  type: TYPE_NORMAL
- en: OpsWorks for Puppet Enterprise
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Puppet helps enforce the desired state of the infrastructure with its set of
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: If you are an existing Puppet user, then OpsWorks for Puppet Enterprise would
    be the most logical choice for you. Using OpsWorks for Puppet Enterprise, you
    can launch a Puppet master server in minutes, and then allow the OpsWorks service
    to handle operations tasks such as backup, software upgrades, and restorations.
  prefs: []
  type: TYPE_NORMAL
- en: When using the Puppet Enterprise version of OpsWorks, the Puppet master houses
    and provisions all of the Puppet modules for the instances that need to run **Puppet
    Agent**.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have looked at the various different options available for OpsWorks,
    including the two options that use Chef recipes as the basis, and the one option
    that uses Puppet manifests, we will now examine a quick example. This example
    will give us a better understanding of how all the different components of OpsWorks
    come together when trying to pick out the best solution, both for our clients
    and when looking at possible solutions for the *DevOps Professional Exam*.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and deploying a recipe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this example, we will use OpsWorks to set up a stack and then create a layer.
    After our layer has been created, we will then use a recipe that is publicly available
    to deploy to our app:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the AWS Console as your administrative user and use the unified search
    bar to search for the `OpsWorks` service. Once you see the OpsWorks icon appear,
    click on the icon to be taken to the **OpsWorks** main page:![Figure 10.7 – The
    OpsWorks service from the unified search bar
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.7_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 10.7 – The OpsWorks service from the unified search bar
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the OpsWorks Stacks page, click on the blue **Go to OpsWorks Stacks** button,
    which should be at the bottom left. This is the original offering from OpsWorks:![Figure
    10.8 – The OpsWorks Stacks option on the OpsWorks service page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.8_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 10.8 – The OpsWorks Stacks option on the OpsWorks service page
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once on the OpsWorks Stacks page, click on the blue **Create stack** button
    at the top right-hand side of the page. This will start the process of creating
    a new stack in OpsWorks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we are going to create a `Chef-11` stack with the following options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`chapt-10`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`US East (Ohio)`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`11.10`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`YES`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Git`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Repository URL** – [https://github.com/amazonwebservices/opsworks-example-cookbooks.git](https://github.com/amazonwebservices/opsworks-example-cookbooks.git)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Leave everything else as it is.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the blue **Add Stack** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refer to the following screenshot:![Figure 10.9 – Adding the options to create
    the stack
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.9_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 10.9 – Adding the options to create the stack
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now we should have seen a **Congratulations! Your stack was created** notification.
    Our next step is to add a layer to our stack. We can click the **Add a layer**
    link and click add a layer:![Figure 10.10 – The congratulations banner showing
    the link to add a layer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.10_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 10.10 – The congratulations banner showing the link to add a layer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now on the layer screen, we will select **PHP App Server** from the drop-down
    list. Once that is selected, then we can click the blue button that says **Add
    Layer**:![Figure 10.11 – Adding the layer in OpsWorks
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.11_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 10.11 – Adding the layer in OpsWorks
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With our layer available, we need to add an instance to our layer. With our
    **PHP App Server** page showing, we need to click the **Add instance** link at
    the very right-hand side:![Figure 10.12 – Showing our created layer in OpsWorks
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.12_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 10.12 – Showing our created layer in OpsWorks
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now add the instance with the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`php-app1`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`c5.large`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Subnet** – (leave the default subnet that is selected)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When you have filled in all of these options, click the blue **Add Instance**
    button at the bottom right-hand side of the selection window:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 10.13 – Adding an instance to the OpsWorks layer'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_10.13_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 10.13 – Adding an instance to the OpsWorks layer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With your instance added, you can now start your instance. You will notice that
    on the screen this instance type is designated as a 24/7 instance. Press the **start**
    link under the **Actions** column to start your instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After about a minute or so, the instance status should change from `stopped`
    or `booting` to `online`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congratulations, you now have your stack up and running!
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have seen how to create an OpsWorks stack, including its layers,
    instances, and app, we will take a closer look at deployments in OpsWorks. We
    will continue with our current stack that we just created, using that stack to
    create an app and then deploy it to the stack.
  prefs: []
  type: TYPE_NORMAL
- en: Deployments in OpsWorks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you deploy an app in OpsWorks, its primary purpose is to deploy the application
    code and all of the files to the server instances. We previously created a stack,
    a layer, and an instance in OpsWorks. Now we will add an app and make a deployment
    to the stack:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to the OpsWorks Console and enter back into the stack we had previously
    created – named `chapt-10`. You can enter the stack by clicking on the stack name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once inside the stack, on the left-hand menu, click on the item named **Apps**
    to be taken to the apps page. At the top of this page, click on the blue button
    labeled **Add App** to create a new app:![Figure 10.14 – Apps and Deployments
    in the left-hand menu in OpsWorks
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.14_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 10.14 – Apps and Deployments in the left-hand menu in OpsWorks
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Use the following values to populate your app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`SampleAPP`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PHP`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Git`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Repository URL** – [https://github.com/awslabs/opsworks-demo-php-simple-app.git](https://github.com/awslabs/opsworks-demo-php-simple-app.git)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All other values can be left blank. After you have filled out these values
    click the blue **Add App** button at the bottom of the screen:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 10.15 – Adding the app settings'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_10.15_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 10.15 – Adding the app settings
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You should now see a screen showing our app. It's now time to deploy the app
    using OpsWorks. OpsWorks makes this easy with the **deploy** link being directly
    under the **Actions** column at the right-hand side of the app. Click the **deploy**
    link to start the deployment process:![Figure 10.16 – After the app has been created,
    it is ready to be deployed
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_10.16_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 10.16 – After the app has been created, it is ready to be deployed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the deploy screen, before you deploy, click on the drop-down menu that currently
    has **Deploy** selected to see all of the different options for deployment. In
    this section, you can not only deploy the app, but also allow OpsWorks to undeploy,
    roll back, start, or stop a web server. Make sure that you retain the setting
    on deployment, and simply keep all of the defaults. Then click the blue **Deploy**
    button at the bottom of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have just completed provisioning an app using a custom recipe. We also deployed
    that app to the instance that we previously created.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring OpsWorks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can monitor your AWS OpsWorks stacks in a number of ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Amazon CloudWatch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Amazon CloudWatch Logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Amazon CloudWatch Events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Amazon CloudTrail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With Amazon CloudWatch, there are 13 custom metrics provided for detailed monitoring
    of each of the instances in the stack. There is also a custom monitoring page
    created in OpsWorks that summarizes the data and makes it easy to understand these
    metrics. If you are running Windows instances, the monitoring page will not display
    the metrics for those Windows instances. The metrics are displayed for the entire
    stack, but you can also concentrate on a particular layer or a particular instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you still have the deployment running from the previous exercise, you can
    click the **Monitoring** menu icon to be taken to the dashboard. This can give
    you quick insights into the state of your application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.17 – Monitoring dashboard in OpsWorks'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.17_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.17 – Monitoring dashboard in OpsWorks
  prefs: []
  type: TYPE_NORMAL
- en: We have just covered the full OpsWorks process from creating a stack to monitoring
    the stack. Now let's review what we learned.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we looked at how the OpsWorks service can help us provision
    and deploy both our infrastructure and application. It does this by using stacks
    and layers. We also learned that OpsWorks is a good way to quickly transition
    a team that is currently using either Chef or Puppet to provision their servers
    and/or applications in their current environment.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about the Elastic Beanstalk service and how
    it can help you deploy your applications into environments, create revisions for
    those applications, and help you monitor those applications using a number of
    different programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: Review questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have been brought into a company that is starting its move to the AWS cloud.
    They have a sizable library of Chef recipes that they currently use to manage
    their on-premises systems. The recipes have already been moved to a private GitHub
    repository. The individual who managed and administrated the Chef servers left
    around one month ago. The company is not prepared to re-write all of the recipes
    to another means in the current fiscal year with their current available resources.
    What AWS service or services would be best for their migration?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Use AWS Server Migration Service to move the current Chef server to the AWS
    cloud.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Stand up the latest version of Chef on EC2 with autoscaling for redundancy.
    Add a Route 53 record in a locally hosted zone for the Chef server. Create a base
    AMI that already has the Chef agent pre-installed and connects to the DNS entry
    configured in Route 53\.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Set up the applications as stacks in OpsWorks. Create all the different users
    as IAM users, and then import them into OpsWorks. Then assign the OpsWorks users
    to individual stacks as needed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Create a CodePipeline instance to install and configure the applications
    as needed, using headless Chef in the user `init` script.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A company has developed a PHP shopping cart platform. The platform is currently
    being managed and deployed by AWS OpsWorks with separate stacks for dev, QA, and
    production. With most of the PHP developers who originally developed the platform
    no longer with the company, management has given the go-ahead to start re-developing
    the platform in Python. How should the company manage the deployment?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Create a new OpsWorks stack that contains a new layer with the new Python
    code. To make the transition over to the new stack, the organization should use
    a blue/green deployment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Create a new OpsWorks stack that has the new Python code manage separate
    deployments of the application from the secondary stack.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Update the existing stack with the new Python application code and deploy
    the app using the Deploy lifecycle event.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Create a new layer on the OpsWorks stack with the new Python code. To make
    the transition over to the new stack, the organization should use a rolling deployment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: An enterprise oversees a combination of Windows servers and Linux servers (Red
    Hat Enterprise Linux and Amazon Linux) in their on-premises data center, along
    with their AWS account. After recently being audited, the CTO was told that there
    was no process in place for core application patches, nor for updating the operating
    systems. There was no baseline level of patching for any of the servers, either
    in the on-premises data centers or in the AWS cloud. You have been called in to
    help remedy the situation. What solution would you recommend that would be not
    only the most consistent for providing and maintaining OS and core application
    patch levels but would also prove the most reliable?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Use AWS Systems Manager to store the credentials in the parameter store,
    and then create resource groups for the instances. Allow the Systems Manager `Run`
    command to deploy patches remotely using the credentials stored in the parameter
    store.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Install the OpsWorks agent on all the servers, both on-premises and in the
    AWS account. Using a single stack, create different layers for the different operating
    systems. Create maintenance windows whenever an operating system or core application
    patch needs to be applied.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Configure the AWS Systems Manager agent on all of the servers, both on-premises
    and in the AWS account. Create resource groups for the instances and then allow
    Systems Manager Patch Manager to run with a pre-configured baseline, using set
    maintenance windows.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Install the OpsWorks agent on all the servers, both on-premises and in the
    AWS account. Create two different stacks, one for Windows and the other one for
    the Red Hat Linux instances. Create a Lambda job that will curl an RSS feed two
    times a day, checking for new patch updates. If it finds one, then it will trigger
    the deployment on the OpsWorks layer.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Review answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: c
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: c
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
