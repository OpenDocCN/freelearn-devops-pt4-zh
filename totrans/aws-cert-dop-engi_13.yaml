- en: 'Chapter 11: Using Elastic Beanstalk to Deploy your Application'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Knowing and understanding Elastic Beanstalk is essential to the DevOps Pro exam.
    How to use the service's nuances, what the service's limitations are, and especially
    the way Beanstalk interacts with containers can be vital knowledge for both passing
    the exam and getting application teams up and running quickly in the real world.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the built-in functionality of Elastic Beanstalk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a service role in the IAM console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and using the Elastic Beanstalk command-line interface (EB CLI)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding advanced configuration options with .ebextensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Elastic Beanstalk to deploy an application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elastic Beanstalk use cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since Elastic Beanstalk requires some local development and we will be writing
    our example program in Python, you will need to have Python 3.x locally installed
    on your workstation. At the time of writing, the most up-to-date version of Python,
    which Elastic Beanstalk supported, was 3.8.5, and hence this would be the version
    of Python that we will be using in this chapter. It is the suggestion of the author
    that you install the `pyenv` Python runtime manager to help you to be able to
    develop and manage multiple versions of Python on your local workstation. You
    can find the project's information and how to install it on its GitHub site, which
    can be found at [https://github.com/pyenv/pyenv](https://github.com/pyenv/pyenv).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the built-in functionality of Elastic Beanstalk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Elastic Beanstalk is a flexible platform that allows developers who develop
    in languages such as Python, Java, Ruby, .NET, PHP: Hypertext pre-processor (PHP),
    Go, or even Docker containers to develop and scale out their applications swiftly.
    Elastic Beanstalk is a **Platform as a Service** (**PaaS**), which means that
    it is serving as an abstraction layer above all of the other services that it
    is helping orchestrate and manage. This makes it easy for developers who are eager
    to get going with the **Amazon Web Services** (**AWS**) cloud but might not have
    a vast amount of knowledge of items such as setting up infrastructure or monitoring,
    the ability to get started, and concentrating on their application in the language
    of their choice.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Elastic Beanstalk is constantly updating the languages and platforms that it
    supports. While it does not always support the latest version of a language, it
    does try to keep up to date with newer revisions and then sunset older versions.
    This is important to remember since legacy applications cannot just be pushed
    to the cloud and then left to run forever. There are times when applications will
    need to be upgraded in order to retain the functionality of the Elastic Beanstalk
    service. Here are some of the services that Elastic Beanstalk incorporates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – A look at some of the services that Elastic Beanstalk incorporates'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.1_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.1 – A look at some of the services that Elastic Beanstalk incorporates
  prefs: []
  type: TYPE_NORMAL
- en: Before the Elastic Beanstalk service was available for use, developers had to
    figure out which services to use to work together, and not only for computing,
    load balancing, and routing. They also needed to—either manually or with the help
    of a service such as CloudFormation templates—incorporate security, storage, and
    monitoring into their application. For developers who wanted to get up and running
    quickly on the AWS cloud, this could present a challenge, as they were used to
    creating application code rather than configuring environments.
  prefs: []
  type: TYPE_NORMAL
- en: Different environments in Elastic Beanstalk
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Any type of application that you build and deploy using Elastic Beanstalk allows
    you to manage all of the different components contained for that application as
    a single environment. There are two major classifications of environments that
    are run using the Beanstalk framework: web server environments and worker environments.'
  prefs: []
  type: TYPE_NORMAL
- en: Web server environments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In a web server environment, Elastic Beanstalk manages three things: a load
    balancer, an **Auto Scaling Group** (**ASG**), and the requested number of **Elastic
    Compute Cloud** (**EC2**) instances. Even if your application has been containerized,
    those containers still need an EC2 instance to run on, and hence the web server
    environment will bring up a corresponding set of EC2 instances in which to run
    the containers.'
  prefs: []
  type: TYPE_NORMAL
- en: A web server environment also creates a `53` service and is therefore highly
    available and scalable. If desired, you can register your own domain name and
    use the Route `53` service to point to your load balancer so that instead of the
    generic CNAME that was originally created for you, your customized URL can be
    what drives the traffic to your web application.
  prefs: []
  type: TYPE_NORMAL
- en: Worker environments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The big difference in a worker environment provisioned by Elastic Beanstalk
    versus a web server environment is that in a worker environment, a `53`. Beanstalk
    automatically installs a daemon that allows for autoscaling, as illustrated in
    the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2 – Web server and worker environments in Elastic Beanstalk'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.2_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.2 – Web server and worker environments in Elastic Beanstalk
  prefs: []
  type: TYPE_NORMAL
- en: Next, we are going to cover the different components that make up Elastic Beanstalk.
  prefs: []
  type: TYPE_NORMAL
- en: The different components that make up Elastic Beanstalk
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: No matter which of the different types of environments you are trying to build
    using the Beanstalk service, it will be composed of multiple components.
  prefs: []
  type: TYPE_NORMAL
- en: Application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Elastic Beanstalk, a logical grouping of components is called an **application**.
    This includes environments and environment configurations, along with versions.
    All of these items are grouped into a folder-like structure, and this folder is
    the application.
  prefs: []
  type: TYPE_NORMAL
- en: Application version
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Elastic Beanstalk allows for the packaging and labeling of specific versions
    of an application. Each specific packaged version of an application is known as
    an **application version**. These versions are packaged up and sent to the **Simple
    Storage Service** (**S3**) service behind the scenes for deployment to one or
    more of your environments, as illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.3 – Application versions can only be deployed to a single environment'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.3_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.3 – Application versions can only be deployed to a single environment
  prefs: []
  type: TYPE_NORMAL
- en: You can have multiple versions running in various environments using Elastic
    Beanstalk, such as your current stable version running in your production environment
    and your latest version running in your test environment. Only one version can
    be deployed to a single environment at a time.
  prefs: []
  type: TYPE_NORMAL
- en: Environment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A collection of running resources in Elastic Beanstalk running a specific application
    version is known as an **environment**.
  prefs: []
  type: TYPE_NORMAL
- en: Environment configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As you define the parameters and settings for your environment, these become
    the **environment configuration**. As you iterate on your application and change
    the settings to the underlying configuration of the environment, then Beanstalk
    deploys those changes automatically and adds or removes items based on your configuration,
    as illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.4 – A closer look at an Elastic Beanstalk configuration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.4_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.4 – A closer look at an Elastic Beanstalk configuration
  prefs: []
  type: TYPE_NORMAL
- en: Configuration template
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The configuration template in Elastic Beanstalk is a starting point for creating
    customized environment configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Saved configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Saved configurations are **YAML Ain''t Markup Language** (**YAML**) files stored
    in S3 that can be put to use for other running environments or during environment
    creation. Saved configurations define the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: Platform version
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration option settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Platform
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you incorporate the operating system of your choice and the preferred programming
    language that you will use, your web and application servers all become your **platform**.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have an understanding of the Elastic Beanstalk components and platform,
    let's go through an exercise of creating an application in Elastic Beanstalk,
    starting with creating the necessary permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a service role in the IAM console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we begin, we will need to create a service role for Beanstalk to use
    when pushing out the environments and applications. A failure to do so, or even
    a failure to update a previously created service role that was created a few years
    ago, can result in errors and frustration when moving further along in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by logging in to the **AWS Management Console** with your administrative
    user, and then follow these next steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Once you have logged in, navigate to **IAM service**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left-hand menu, click on **Roles**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once on the **Create Role** page, keep the trusted entity as **AWS Service**,
    and then, in the middle of the page, choose **Elastic Beanstalk** as the service
    for which you would like to create a service role. Click on the **Elastic Beanstalk**
    service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After you have selected the **Elastic Beanstalk** service, another set of selections
    will appear at the bottom of the screen so that you can select your use case.
    Choose the use case of **Elastic Beanstalk**. After you have clicked on **Elastic
    Beanstalk** in the use case and it is highlighted in blue, as shown in the following
    screenshot, then you can click on the blue button on the bottom right-hand side
    of the screen labeled **Next: Tags**:![Figure 11.5 – Selecting the Elastic Beanstalk
    use case in Identity and Access Management (IAM)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.5_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.5 – Selecting the Elastic Beanstalk use case in Identity and Access
    Management (IAM)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After clicking **Next** and landing on the **Roles** screen, the default Beanstalk
    policy should already be populated for you. Click on the blue button at the bottom
    of the screen labeled **Next:Tags** to move on to the next screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tags are optional and you can add them if you wish; otherwise, click the blue
    **Next:Review** button at the bottom of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the `AWSServiceRoleForElasticBeanstalk`. Click the blue **Create role** button
    at the bottom of the page to create this role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have our service role created, we can proceed with using the Elastic
    Beanstalk service.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and using the Elastic Beanstalk command-line interface (EB CLI)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of commands available from the AWS CLI that allow you, as
    a user, to take advantage of Elastic Beanstalk.
  prefs: []
  type: TYPE_NORMAL
- en: 'Basic commands supplied by the EB CLI include those that will do things all
    the way from creating the correct project structure in your local environment
    to quickly and efficiently pulling down the log files from your instances for
    review. We will now review the basic commands that the EB CLI provides, along
    with a short description of their nature, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`eb create`: This command will create a new local environment for Elastic Beanstalk
    and deploys an initial application version to that directory structure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eb status`: This command returns the status of your environment, including
    items such as application name, region, CNAME, and health status.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eb health`: This command returns the health status of the instances in your
    environment, updating every 10 seconds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eb events`: This command returns a list of log statements that state the most
    recent events for the current Elastic Beanstalk environment. Examples of events
    can include the creation of resources such as instances or load balancers or the
    changing of the environment status to different health levels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eb ssh`: This command will temporarily open port `22` on your security groups
    for all incoming traffic if you have not configured port `22` for a specific **classless
    inter-domain routing** (**CIDR**) range of addresses. It will then prompt you
    to connect to your running instance or allow you to select which running instance
    you would like to connect to via **Secure Shell** (**SSH**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eb logs`: This command can perform two explicit commands regarding the logging
    of files, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a. It can toggle the streaming of logs to the CloudWatch Logs service.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. It can fetch instance logs for you to review locally.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`eb open`: This command will use your default browser to open the public URL
    of your application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eb deploy`: This command will deploy your application to the Elastic Beanstalk
    service using the current source bundle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eb config`: This command will allow you to change the environment configuration
    settings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`eb terminate`: This command shuts down and stops your instances and environment
    so that you do not incur additional charges.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the EB CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The simplest way to get the `eb-cli-setup` script, which is available on GitHub
    at [https://github.com/aws/aws-elastic-beanstalk-cli-setup](https://github.com/aws/aws-elastic-beanstalk-cli-setup)).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using a Mac, however, and prefer to install software via the `brew`
    package manager, then the EB CLI is available through this method as well. Just
    make sure that your current version of `brew` is up to date before attempting
    to install the EB CLI. Here''s the code you''ll need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: No matter which method you choose, once installed, you should then be able to
    get directly to the EB CLI from a terminal prompt using just a simple `$ eb` command.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you have previously installed the EB CLI on your machine in the past, it
    is a good idea before proceeding to update the package using the `pip3 install
    --upgrade awsebcli` command.
  prefs: []
  type: TYPE_NORMAL
- en: Now, with the CLI installed, let's look at creating and deploying a project
    using the EB CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Using the EB CLI to create a project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will be using our terminal to invoke the `eb cli` command and then create
    our Elastic Beanstalk project. Start by opening up your terminal window. Then,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'With your terminal window open, use the EB CLI to create a new folder to start
    our project. It''s best to start from the root of your home directory so that
    your folder will be easier to find if you need to come back to it later. We will
    name our local folder `11-beanstalk`. Here''s the code you''ll need:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to make sure that the `virtualenv` program has been installed on our
    system for the Python 3.x set of programming languages. We will do this using
    `pip`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, with our folder created, we can move into that folder so that we can create
    our virtual environment for Python. Once you have enacted the virtual environment,
    you will see your prompt change slightly to be prepended with 11 before the command
    prompt, as illustrated in the following code snippet. This lets you know that
    you are inside the virtual environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the virtual environment has been created successfully, then you should see
    an output like the one shown next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Since we have created our virtual environment, we now need to activate it,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the virtual environment prompt showing, we will now install `flask` locally
    to make a quick web application using Python, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With our environment being set up, we can then move the files that we took
    from the `Chapter-11` GitHub repository and copy them over to our `11-beanstalk`
    directory. Start by going into the directory where you have cloned the files from
    the GitHub repository so that the copy will be a shorter command, as illustrated
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s capture all of the requirements that we will need to install once
    we go to our remote environment using the `pip freeze` command and then push that
    out to a file called `requirements.txt`, as illustrated in the following code
    snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At this point, we should test our `flask` application locally to ensure that
    it runs and is ready for deployment. Use the following command to test your application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Assuming that the application starts successfully, you should see a return
    like the one shown next:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the local URL displayed, you can open up a web browser and see the application
    in action.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you are done testing the local application, press *Ctrl* + *C* in the terminal
    window to stop running the local server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'With our application tested locally, we can now create the environment with
    the EB CLI. Using the command prompt that you still have open, we will initiate
    the Elastic Beanstalk environment. Make sure that you are still inside the `11-beanstalk`
    folder before you run the next command, shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`flask-quiz`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`(Y)es`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Python 3.8`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`(Y)es`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`DevOps-pro` (no passphrase)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have created our environment, we will move on to looking at how
    we can customize our environment using `.ebextensions`.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding advanced configuration options with .ebextensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Elastic Beanstalk allows you to add configuration files to your application's
    source code to customize and configure the AWS resources in your environment.
  prefs: []
  type: TYPE_NORMAL
- en: We can create a *hidden* folder in our directory to create and store our custom
    configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'From inside our `11-beanstalk` directory, we will create a `.ebextensions`
    directory, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now run a `tree` command with a level of `1` and ask it to show all
    files (in order to show the hidden `.ebextensions` folder) and see our current
    working environment structure, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This should show a current structure like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will move the file that we copied over with all of the other files
    named `cloudwatch.config` inside the `.ebextensions` folder, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This file is also available in the GitHub repository in the `Chapter-11` folder
    if needed.
  prefs: []
  type: TYPE_NORMAL
- en: With our extra resources created, we are now ready to look at the deployment
    types available for applications in Elastic Beanstalk before we deploy our application.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment types with Elastic Beanstalk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Elastic Beanstalk allows for multiple deployment types for your application.
    Let's take a look at each one in detail.
  prefs: []
  type: TYPE_NORMAL
- en: All-at-once deployments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using an **all-at-once deployment** strategy, Elastic Beanstalk will take the
    specified version of the application that has been marked for deployment and then
    simultaneously deploy this version to all instances in your environment.
  prefs: []
  type: TYPE_NORMAL
- en: This deployment type takes the least amount of time to implement and has the
    lowest associated cost; however, it also comes with the most risk. If something
    were to go awry during the deployment, then you would be facing downtime with
    your application. This is a deployment strategy that is best served for development
    and test environments but it should seldom or never be used in a production environment.
  prefs: []
  type: TYPE_NORMAL
- en: Rolling deployments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **rolling deployment** will push out a newer version of your application to
    your existing EC2 instances, but instead of pushing out the application to all
    instances at the same time, it uses batches to govern how many instances are updated
    at any single time.
  prefs: []
  type: TYPE_NORMAL
- en: While this deployment type is not as fast as the all-at-once method, it also
    allows for the safeguard of not allowing all your instances to be down at the
    same time in case of an application issue. A rolling instance is also less expensive
    than one of the blue/green types of deployment options since you are utilizing
    EC2 instances that you already have up and running and don't need to create a
    whole new environment.
  prefs: []
  type: TYPE_NORMAL
- en: Rolling with additional batch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although extremely similar to a rolling deployment, **rolling with additional
    batch** has a very distinct difference. That difference is that this deployment
    ensures that your full capacity is maintained throughout the deployment process.
  prefs: []
  type: TYPE_NORMAL
- en: This deployment type will launch an additional set of instances before beginning
    the actual deployment. This is a good option if you are serving a constant flow
    of traffic and need to ensure capacity even while performing application updates.
  prefs: []
  type: TYPE_NORMAL
- en: Immutable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you think of immutable infrastructure, you should think of not making
    an update to a current instance. This is the same concept when using an **immutable
    deployment**, since we are setting up a whole new set of instances and deploying
    to those instances, waiting for them to become healthy before switching the **Domain
    Name System** (**DNS**) of Elastic Beanstalk over from the previous environment,
    as illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.6 – Immutable deployment during deployment'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.6_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.6 – Immutable deployment during deployment
  prefs: []
  type: TYPE_NORMAL
- en: 'This is one of the safest ways to deploy your application, but it can also
    be one of the most expensive since you are setting up double the number of instances,
    as illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.7 – Immutable deployment after deployment'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.7_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.7 – Immutable deployment after deployment
  prefs: []
  type: TYPE_NORMAL
- en: After the health check has been completed on the new version of the instances,
    then the older version of the instances is taken down and the traffic is routed
    to the new version of the application. If there were any problems with any of
    the instances, then the traffic would never get routed to those instances in the
    first place.
  prefs: []
  type: TYPE_NORMAL
- en: Traffic splitting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A **traffic-splitting** deployment is somewhat like an immutable deployment
    in the fact that it creates a whole new set of instances. A major difference is
    that with a traffic-splitting deployment, the older instances don''t terminate
    as soon as the new version is up and healthy. Instead, the traffic is shifted
    at a controlled pace, one that you set in the console or via the CLI, to direct
    a portion of the traffic from one version to the next version, as illustrated
    in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.8 – Traffic-splitting deployment showing the percent of traffic'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.8_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.8 – Traffic-splitting deployment showing the percent of traffic
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have looked at different deployment strategies, we will use the
    EB CLI and our terminal to create and deploy a Beanstalk application.
  prefs: []
  type: TYPE_NORMAL
- en: Using Elastic Beanstalk to deploy an application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best way to understand some of these services is to test them out with a
    hands-on example. This is most certainly the case with Elastic Beanstalk, as you
    need to be able to think about the capabilities of the service when reading through
    both the questions and answers that the DevOps professional exam presents you
    with.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to continue with our example code from before that we started earlier
    in this chapter. If you didn't do the first part of the exercise and you want
    to deploy the application, then it's suggested that you go back to the part of
    the chapter entitled *Using the EB CLI to create a project*.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have previously closed your terminal window, then you will need to open
    it up again and navigate back to the `11-beanstalk` folder. We already initiated
    our environment locally previously, and can now proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since our environment has been initiated previously, we can create our initial
    environment—`developmen`t, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The terminal should show you a return like the one shown next:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Although it will most likely take a few minutes to finish the setup of your
    new environment, once it has been completed, you can see the web application up
    and running by using the `eb` `open` command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can check on all the events of your application by using the `events` command
    from within the EB CLI, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you wanted to check on the health of your environment, then you could log
    in to the AWS console to see the visual dashboard, or you could simply use the
    `eb health` command to get a quick look at the statistics for your environment,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alternatively, if you look at the health of the Beanstalk application from
    the console, then you will be presented with a very easy-to-read **user interface**
    (**UI**), as illustrated in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.9 – A look at the Elastic Beanstalk monitoring dashboard'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_11.9_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.9 – A look at the Elastic Beanstalk monitoring dashboard
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you like, you can check the log files directly from the command line using
    the `eb logs` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you are done, then you should deactivate your virtual environment by running
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Follow the guidance in the next section to help troubleshoot your deployment
    if you are having issues.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting the deployment with the EB CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are running into issues during the deployment of your environment, perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Find the line that states the **Web Server Gateway Interface** (**WSGI**) path.
    An example of this is shown next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Edit this line after the colon to ensure that `.py` appears after the word `application`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save and close the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try deploying your application again with the `eb deploy` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have gone through the exercise of deploying our Beanstalk application
    and looking at the logs and events of the application, we will now look both at
    use cases and anti-patterns of using Elastic Beanstalk.
  prefs: []
  type: TYPE_NORMAL
- en: Elastic Beanstalk use cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Elastic Beanstalk makes it easy for developers to get up and running on the
    cloud without having to worry about the underlying infrastructure or management
    of underlying components. Next, we will look at some of the optimal use cases
    for using Elastic Beanstalk.
  prefs: []
  type: TYPE_NORMAL
- en: '*You have a smaller development team that needs to get going quickly*'
  prefs: []
  type: TYPE_NORMAL
- en: If you have a smaller team that needs to get up and running quickly on AWS but
    is not as familiar with all of the other components, services, and interconnectivity,
    then Elastic Beanstalk can be a good choice to meet deadlines.
  prefs: []
  type: TYPE_NORMAL
- en: '*You don''t have any in-house DevOps expertise*'
  prefs: []
  type: TYPE_NORMAL
- en: Somewhat like the previous example, if a company or development team has an
    application that is needing a rapid deployment to AWS, then Elastic Beanstalk
    presents a very viable solution without the need for any advanced DevOps expertise.
    Since the product itself can be used with Git, a tool that most developers are
    familiar with, getting up and running in a minimal amount of time is a simple
    task. Beanstalk then takes care of tasks such as DNS, autoscaling, easy access
    to application logs, and even pre-built dashboards for metrics on your environment
    without any additional setup.
  prefs: []
  type: TYPE_NORMAL
- en: Elastic Beanstalk anti-patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we just looked at some of the cases where the use of Elastic Beanstalk would
    make sense, there are also cases where Beanstalk would not be a good choice. Here,
    we will examine some of the known anti-patterns for using Elastic Beanstalk, where
    you would want to look at a different service offering from AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Applications or projects that need a lot of environment variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of Elastic Beanstalk's limitations is the fact that it only has 4 **Kilobytes**
    (**KB**) to store all key-value pairs. Taking this fact into account, then, if
    you have numerous environment variables such as different database strings, usernames,
    and passwords for each environment that you create, then you could run up against
    this hard limit, and Elastic Beanstalk would not be a good choice for your application.
  prefs: []
  type: TYPE_NORMAL
- en: Applications that are very large
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Elastic Beanstalk deployment bundles can only be at a maximum of 512 `.ebextensions`
    directory. Also, if you have a lot of static assets, such as pictures or media,
    then those could be stored in S3 with pointers in either your application or in
    a dynamic store such as DynamoDB, and this can keep your source bundle size down.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the Elastic Beanstalk service, another one of the
    deployment services offered by AWS. We covered the different deployment options
    available with Elastic Beanstalk, along with creating and deploying a Beanstalk
    application using the EB CLI tool. We also took a look at some of the best-case
    scenarios for using Elastic Beanstalk, as well as some anti-patterns whereby the
    Elastic Beanstalk service would not be a good fit.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at using Lambda functions and step functions
    in order to deploy our code in a serverless manner.
  prefs: []
  type: TYPE_NORMAL
- en: Review questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have been brought into a company that has an application team whose application
    has two tiers—a web layer and a database layer. The application team needs a method
    to provision and deploy an environment to AWS quickly. Which of the following
    options would be the fastest and most ideal way to get this team set up?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Use the Elastic Beanstalk service to provision an environment and then push
    the application to the environment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Create an OpsWorks stack with two layers, one for the application and another
    for the database. Deploy the application to the application layer.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Use CloudFormation to create an S3 bucket, an RDS database, and an EC2 instance.
    Use user-data scripting to load the application from the S3 bucket and parameters
    for the RDS connection strings, username, and password.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Create an RDS database and then use Lambda to deploy the application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You have been brought into a company that is trying to automate its move to
    the AWS cloud as quickly as possible. The applications that it is trying to move
    are built using a multitude of different programming languages. How can you get
    these applications moved and deployed to the cloud as swiftly as possible?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Create a master CloudFormation template that utilizes a nested stack design
    for the deployment of the applications. Create a child template for each of the
    applications after creating a Docker container for the applications.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Develop each application in one Docker container and use Elastic Beanstalk
    to deploy.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Develop each application in a separate Docker container and use Elastic Beanstalk
    to deploy.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Create a stack using OpsWorks. Create a separate layer for each application
    and then deploy each application to its layer.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There is a service that Elastic Beanstalk can perform for you if your application
    takes a while to complete its activities or workflows. What is that service?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Beanstalk can manage the Elastic Load Balancing (ELB) service and run a daemon
    process on each of the instances.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Beanstalk can manage a Simple Notification Service (SNS) topic and run a
    daemon process on each of the instances.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Beanstalk can manage Lambda functions and run a daemon process on each of
    the instances.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Beanstalk can manage an SQS queue and run a daemon process on each of the
    instances.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You have been brought into a company in order to help automate a recovery strategy
    in case an outage hits the primary region where resources are hosted in AWS. The
    company has a priority on minimizing costs for this recovery strategy but also
    needs to be able to spin up the complete infrastructure if needed. How would you
    suggest that it does this with the least cost?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Create a pilot light infrastructure in another region and automatically resize
    based on CloudWatch events.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Create a duplicate infrastructure by creating a whole new environment in
    the disaster recovery (DR) region using Elastic Beanstalk. Switch the Route 53
    record to the DR region's load balancer in case of an outage.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Use Elastic Beanstalk to create another environment as a copy of the application
    in case of an outage.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Use CloudFormation to spin up resources in another region in case of an outage.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Review answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: a.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: c.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: d.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: d.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
