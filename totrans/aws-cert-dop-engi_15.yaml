- en: 'Chapter 13: Blue Green Deployments'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Releasing applications by shifting traffic between two identical environments
    is better known as using blue/green deployments. Knowing how to use blue/green
    deployments through the different AWS service offerings can help mitigate risk
    when releasing new versions of an application. Walking through the various techniques
    for the various services and understanding the usage of each is essential to passing
    the AWS DevOps Professional exam.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the concept of blue/green deployments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS services that you can use for blue/green deployments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benefits of blue/green with AWS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating Auto Scaling group launch configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using best practices in your data tier with blue/green deployments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the concept of blue/green deployments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you use the blue/green deployment technique, you employ a technique that
    reduces downtime and risk. You do this by running a duplicated environment where
    one is taking the active traffic and the other is receiving the changes. Once
    the changes have been completed and any testing has been commenced, the traffic
    that was previously directed at the initial environment, the blue environment,
    can then be switched over to the green environment. This switch can happen all
    at once or in gradual phases, depending on both your deployment plan and the services
    that you use in your deployment. If there is any issue with the deployment, then
    you can quickly reroute the traffic back to the previously known good state environment,
    the blue environment, while you remediate the new environment.
  prefs: []
  type: TYPE_NORMAL
- en: The foundation of blue/green deployments is two distinct environments. One environment,
    the *blue environment*, refers to the current environment where your application
    or workload is currently running. The second environment, or the *green environment*,
    refers to a duplicated environment where you can deploy your updated changes to
    your application code or workload. Using both of these separate environments in
    symphony allows for near zero-downtime release and rollback proficiencies.
  prefs: []
  type: TYPE_NORMAL
- en: When you perform a blue/green deployment, you are working with an immutable
    infrastructure. This means that you are not upgrading or updating the current
    infrastructure in place. Instead, you are creating a new set of resources for
    each deployment process.
  prefs: []
  type: TYPE_NORMAL
- en: Deployments are not easy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Traditional deployments favor in-place upgrades. However, with in-place upgrades,
    there are many risk factors to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: Resource constraints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Potential downtime
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependencies from other systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Difficulties in rolling back unsuccessful deployments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the cost and complexity involved in the deployment process, teams will
    sometimes choose to deploy to an existing infrastructure. This is a viable deployment
    strategy, but it contains inherent risks, especially when performing a deployment
    such as an all-at-once deployment where all of the instances or applications are
    updated simultaneously. If there was an issue or failure during the deployment,
    this often leads to downtime, loss of revenue, loss of trust in the product brand,
    and loss of customer confidence, depending on how long the outage lasts.
  prefs: []
  type: TYPE_NORMAL
- en: Question
  prefs: []
  type: TYPE_NORMAL
- en: When starting to map out a deployment, try and ask yourself, *What solutions
    reduce downtime, handle dependencies, and can coordinate workloads in an improved
    manner?*
  prefs: []
  type: TYPE_NORMAL
- en: 'There are multiple risks to navigate when performing deployments, including
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Application failure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Infrastructure failure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using blue/green deployment strategies helps mitigate these risks and business
    impacts by allowing an almost seamless cutover from one environment to the next.
  prefs: []
  type: TYPE_NORMAL
- en: The term *environment* is used a great deal when talking about deployments and
    especially blue/green deployments. Having an understanding of the definition of
    environment is critical for understanding what resources are subject to change.
    Knowing what is being defined as the environment is also crucial when navigating
    some of the questions on the AWS DevOps professional test.
  prefs: []
  type: TYPE_NORMAL
- en: An environment is a boundary where things change and where things need to be
    deployed. This can be as small as one component of your application or it can
    be as large as a full tier of the application, such as the web tier.
  prefs: []
  type: TYPE_NORMAL
- en: AWS services that you can use for blue/green deployments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of tools available natively from AWS that allow you to perform
    blue/green deployments. These tools allow for a range of deployment options, from
    full control of all aspects of the environment using a service such as CloudFormation
    to granular changes in services such as Route 53 or Auto Scaling. These more granular
    options would only allow you to perform modifications to a specific section of
    your application but can be just as effective in implementing blue/green deployments.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at the different AWS services that are available to assist us in
    blue/green deployments.
  prefs: []
  type: TYPE_NORMAL
- en: AWS CloudFormation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using **AWS CloudFormation**, you have the ability to use the service''s templating
    capabilities to both describe the AWS resources you are deploying along with quickly
    creating a copy of the environment with any updates that are needed. This is all
    done with one of the two languages that CloudFormation supports: JSON or YAML.'
  prefs: []
  type: TYPE_NORMAL
- en: The templates can be smaller pieces of a more extensive infrastructure. You
    have the ability with CloudFormation templates to create groups of dependent items,
    such as an autoscaling group, and then either use the output of this created group
    to update a previously created template that holds the load balancer to update
    where it is pointing or make the switch manually with the newly created Auto Scaling
    group.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Elastic Beanstalk
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Elastic Beanstalk** is a service that helps developers concentrate on their
    code by managing the underlying infrastructure. This includes items such as ELB,
    EC2 instances, storage for the EC2 instances with EBS volumes, Elastic IPs, Auto
    Scaling groups, security groups, and even monitoring via CloudWatch metrics.'
  prefs: []
  type: TYPE_NORMAL
- en: When you are performing blue/green deployments in Elastic Beanstalk, you can
    easily clone your environments. These clones can be exact replicas of your current
    application code base, or they can even be the latest version of the code if you
    have pushed features and changes to Beanstalk since you last made your deployment.
    Elastic Beanstalk makes it easy for those using the service to switch from one
    environment to the next using the Swap Environment URL feature. This feature takes
    and then performs the DNS switch in the background and reroutes the traffic from
    the previous (blue) environment to the new (green) environment.
  prefs: []
  type: TYPE_NORMAL
- en: AWS CodeDeploy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**AWS CodeDeploy** is a managed deployment service that helps automate the
    deployment of your software to on-premise servers, EC2 instances, AWS Lambda functions,
    and AWS Fargate containers. When creating a deployment with AWS CodeDeploy, you
    have the option to choose either an in-place deployment or a blue/green deployment.'
  prefs: []
  type: TYPE_NORMAL
- en: With the blue/green deployment option, you have the ability in your environment
    configuration to have CodeDeploy automatically copy your EC2 Auto Scaling group
    or manually provision instances for a blue/green deployment. There are also options
    to enable load balancing. There is also an option to reroute the traffic automatically
    or allow for manual rerouting of the traffic after the deployment to the new instances
    or Auto Scaling group is complete.
  prefs: []
  type: TYPE_NORMAL
- en: There is even the ability to integrate CloudFormation templates using the CodeDeploy
    service to perform blue/green ECS deployments.
  prefs: []
  type: TYPE_NORMAL
- en: AWS ELB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**AWS ELB** (**ELB**) is a compute service that allows you to route and distribute
    your traffic to multiple instances, IP addresses, Lambda functions, containers,
    and even virtual containers. As ELB is a managed service, it can also perform
    health checks to determine which instances are healthy and which ones need to
    stop having traffic being directed to them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.1 – An Application Load Balancer deploying traffic to two versions
    of an application at once using target groups ](img/Figure_13.1_B17405.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13.1 – An Application Load Balancer deploying traffic to two versions
    of an application at once using target groups
  prefs: []
  type: TYPE_NORMAL
- en: Using target groups with Application Load Balancers, you can roll out a new
    version of your application to a subset of your users with a canary deployment,
    which is a variety of the blue/green deployment. Using multiple target groups
    that are connected to the same Application Load Balancer, you can determine how
    much traffic will be directed to each version of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon ECS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Amazon **ECS** (**ECS**) uses tasks to make groups of Docker containers easy
    to run, stop, and manage on AWS EC2 instances. With ECS, you can schedule when
    you want your containers to be placed on an instance using the service scheduler.
    ECS also lets you stretch multiple containers running the same task across multiple
    ECS-compatible instances in the same Region but in different Availability Zones:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.2 – Switching from Target Group 1 to Target Group 2 in ECS using
    an ALB'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.2_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.2 – Switching from Target Group 1 to Target Group 2 in ECS using an
    ALB
  prefs: []
  type: TYPE_NORMAL
- en: The use of containers can make deployments, and especially blue/green deployments,
    more straightforward to perform. Containers are not as complex as full instances,
    and multiple containers can run in a single EC2 instance, even those that are
    running different versions of an application.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Elastic Kubernetes Service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Amazon **Elastic Kubernetes Service** (**EKS**) allows you to run Kubernetes
    applications and scale Kubernetes applications both in the AWS cloud and on-premises.
    It helps the management of the clusters by providing secure clusters and allows
    the clusters to be highly available.
  prefs: []
  type: TYPE_NORMAL
- en: EKS can be run on specialized EC2 instances or can be run on **AWS Fargate**,
    which provides on-demand compute capacity for containers. The use of Fargate removes
    the need for provisioning instances, choosing server types, or managing virtual
    machines.
  prefs: []
  type: TYPE_NORMAL
- en: You can perform blue/green deployments with EKS on AWS Fargate with the help
    of the blue/green deployment feature of the CodeDeploy service. When you create
    a new blue/green deployment for EKS, you specify your Application Load Balancer
    name fronting your Kubernetes task, and the CodeDeploy service handles deploying
    the new green service and then phasing out the older blue task.
  prefs: []
  type: TYPE_NORMAL
- en: AWS OpsWorks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**AWS OpsWorks** is a configuration management service that allows you to configure
    stacks based on the Chef or Puppet frameworks.'
  prefs: []
  type: TYPE_NORMAL
- en: Blue/green deployments are simplified with OpsWorks by simply cloning the entire
    stack.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon CloudWatch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Amazon CloudWatch** is the metrics and monitoring service that allows users
    to track and observe their deployed resources. The CloudWatch service also has
    the ability to set alarms and send notifications via other services, such as Amazon
    SNS or Amazon SES.'
  prefs: []
  type: TYPE_NORMAL
- en: When metrics have been set up on the resources in both the blue and green environments,
    then you have the ability to assess the new environment as you start to direct
    traffic to it. Keeping an eye on the metrics that you have set in CloudWatch and
    making sure that all services stay in a steady state while making the switch to
    the new environment can help ease the anxiety of switching to a new environment.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Route 53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Amazon Route 53** is the DNS service that can be used in blue/green deployments
    by allowing the pointing of DNS records to the new green environment. This allows
    DevOps professionals and network administrators to quickly and easily redirect
    traffic by updating the DNS records. Route 53 also includes advanced capabilities,
    such as the ability to adjust the **Time To Live** (**TTL**) for resource records
    and using advanced techniques such as weighted policies so that traffic can be
    shifted gradually to the new environment instead of redirected all at once.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have looked at the different services that can be used to implement
    blue/green deployments, let's look at the benefits of using blue/green deployments.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of blue/green deployments with AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The use of blue/green deployment strategies provides multiple benefits over
    in-place deployments. It is important to note that although these benefits are
    substantial, there are extra costs for the additional environments that are created
    during the blue/green process. The secondary environments may be taken down after
    the deployment has been validated or, in the case of a failed deployment, after
    a rollback has been completed.
  prefs: []
  type: TYPE_NORMAL
- en: Techniques for performing blue/green deployments in AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Implementing blue/green deployments in AWS can be done in a variety of ways.
    Recognized patterns have emerged for successful ways to implement these deployments.
    As we look at each technique described, specific services used will be featured.
    Different applications lean toward different patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Updating DNS routing with Route 53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Route 53 service allows you to use hosted zones once you have brought up
    your new environment. Adding the additional record to the record set will then
    create a seamless transition to the new application deployment for your end users:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.3 – Showing blue/green deployment using Route 53-hosted zones'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.3_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.3 – Showing blue/green deployment using Route 53-hosted zones
  prefs: []
  type: TYPE_NORMAL
- en: This switch can be done all at once to force all the traffic to the new green
    environment. You can also use weighted records to send a portion of the traffic
    to the green environment, initially as a canary test. These canary users would
    then generate logs and metrics that could be evaluated over a period of time.
    If there are no errors being reported in your new environment, then you can change
    the weight of your policy so that 100% of the traffic is now being directed to
    the green environment.
  prefs: []
  type: TYPE_NORMAL
- en: This technique is not limited to creating a new green environment in the same
    set of Availability Zones or even the same Region for that matter. You can create
    your new green environment in a totally separate Region. If you are planning to
    switch from Region to Region in your environment, be sure that you have taken
    into account your data tier and how that would be affected during a regional switch.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is also not limited to instances or services listening for requests behind
    a load balancer. Using a DNS routing switch with Route 53 could be used in all
    of the following scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: Groups or clusters of EC2 instances fronted by ELB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instances in an Auto Scaling group that are fronted by ELB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single instances that have either a public address or an Elastic IP address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elastic Beanstalk web applications in specified environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Services running in ECS or EKS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Process for deployment – DNS routing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The process for implementing a blue/green deployment using Route 53 to switch
    hosted zones is detailed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Start with 100% of your traffic being directed to the **blue** environment,
    with the current version of the application deployed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploy the new version of the application into the **green** environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test that the deployment of the green stack was successful either by running
    a series of manual or scripted tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the weighted record in the Route 53-hosted zone to direct a portion of
    the traffic over to the new green environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Monitor the new environment for errors or failures.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the weighted record in the Route 53-hosted zone to shift the remaining
    traffic to the **green** environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If there was an issue with the deployment, update the Route 53 record to redirect
    all the traffic back to the **blue** environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have seen how to do blue/green deployments using DNS and Route 53,
    let's look next at how we can do blue/green deployments without changing the DNS
    settings.
  prefs: []
  type: TYPE_NORMAL
- en: Swapping the Auto Scaling group behind ELB
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our second blue/green deployment option, we will take the DNS option out
    of the picture. In many organizations, the team that does the application deployment
    is not the same team that deals with the networking configurations, including
    the DNS records hosted by the Route 53 service. Hence, we need to be prepared
    for those scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.4 – Deploying blue/green environments by swapping Auto Scaling
    groups'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.4_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.4 – Deploying blue/green environments by swapping Auto Scaling groups
  prefs: []
  type: TYPE_NORMAL
- en: Once the new Auto Scaling group has been launched, you perform a set of tests
    on the new green stack before registering the new Auto Scaling group, the green
    Auto Scaling group, with ELB.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: We go through the hands-on exercise of creating and deploying Auto Scaling launch
    templates in [*Chapter 18*](B17405_18_Final_JM_ePub.xhtml#_idTextAnchor433), *Autoscaling
    and Lifecycle Hooks*.
  prefs: []
  type: TYPE_NORMAL
- en: An important item of note here is that ELB is only part of the deployment process
    as far as registration and deregistering are concerned. As you are deploying new
    versions of the software, you are not deploying a new load balancer.
  prefs: []
  type: TYPE_NORMAL
- en: Process for deployment – swapping the Auto Scaling group
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The process for carrying out a blue/green deployment by swapping the Auto Scaling
    group is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Before you start, make sure that your ELB instance is not part of your deployment
    environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Begin with the ELB instance pointing to the **blue** Auto Scaling group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploy the new **green** Auto Scaling group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test the **green** Auto Scaling group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register the **green** Auto Scaling group with the ELB instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deregister the **blue** Auto Scaling group from the ELB instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have seen how to carry out a blue/green deployment by swapping Auto
    Scaling groups, let's next look at another technique for blue/green deployments
    that also uses Auto Scaling groups.
  prefs: []
  type: TYPE_NORMAL
- en: Updating Auto Scaling group launch configurations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each Auto Scaling group is associated with a launch configuration. The launch
    configuration contains the information needed to launch new instances whenever
    a scaling event occurs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new launch template (or launch configuration). This new launch configuration
    contains either an updated AMI, updated user data, or both:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.5 – Deploying blue/green environments by swapping launch configurations'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.5_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.5 – Deploying blue/green environments by swapping launch configurations
  prefs: []
  type: TYPE_NORMAL
- en: Process for deployment – updating the Auto Scaling group launch configurations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The process for performing a blue/green deployment by updating Auto Scaling
    group launch configurations is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that your ELB instance is not part of the deployment process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start with your traffic being directed to the current Auto Scaling group using
    the blue launch configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new launch configuration (the green launch configuration) and attach
    it to the Auto Scaling group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scale out the Auto Scaling group to **twice** its original size.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the instances have been launched and have become healthy from the green
    Auto Scaling group, scale down the Auto Scaling group back to its original size.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Updating ECS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Packaging your application in a container makes it easy to deploy.
  prefs: []
  type: TYPE_NORMAL
- en: Use target groups, which allow you to run multiple services behind a single
    load balancer. One can be the blue service and one can be the green service.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the key pieces to executing a blue/green deployment with ECS is the
    Application Load Balancer. It is at the Application Load Balancer where the ECS
    tasks are registered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.6 – Using an ECS service update for a blue/green deployment'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.6_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.6 – Using an ECS service update for a blue/green deployment
  prefs: []
  type: TYPE_NORMAL
- en: 'When using this approach, you need to take the following considerations into
    mind:'
  prefs: []
  type: TYPE_NORMAL
- en: Your code needs to be completely stateless.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Canary deployments aren't possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Long-running connections will be abruptly terminated during the task switch.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Process for deployment – updating ECS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The process for conducting a blue/green deployment by updating ECS is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Start with a blue service that has a task definition defined that is pointing
    to the Application Load Balancer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create a new task definition that is established on the new application
    version, which has been created in a new container; this is your green version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scale up the green service with the green task definition and map this green
    service to the Application Load Balancer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scale down the blue service by setting the number of tasks to zero.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have seen how to perform a blue/green deployment using containers
    and ECS, let's look at using the Elastic Beanstalk service to quickly swap application
    versions in a blue/green deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Swapping the environment of an Elastic Beanstalk application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are going to use a blue/green deployment strategy with Elastic Beanstalk,
    then you must make sure that your application environments are separated from
    your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.7 – A blue/green deployment by swapping an Elastic Beanstalk application'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.7_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.7 – A blue/green deployment by swapping an Elastic Beanstalk application
  prefs: []
  type: TYPE_NORMAL
- en: Process for deployment – swapping an Elastic Beanstalk environment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The process for executing a swap of an Elastic Beanstalk environment to perform
    a blue/green deployment is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open up your AWS Management Console to the Elastic Beanstalk service and ensure
    that you are in the correct Region for your Beanstalk application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clone your environment. You can do this without any changes to the current platform
    or choose `Clone with latest platform` to use the newest version of the platform's
    Git branch. This new platform becomes your green environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you only cloned the environment, you will need to deploy the new version
    of the application to the green environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can now test the new environment using the unique DNS name given to the
    green environment's ELB.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the environment overview page, choose `Environment Actions | Swap URLs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The traffic coming from Route 53 will now be directed to the green environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have looked at how to easily do a blue/green deployment with the Elastic
    Beanstalk service using the Swap URLs feature. Next, let's look at how we can
    perform blue/green deployments in the OpsWorks service by cloning OpsWorks stacks.
  prefs: []
  type: TYPE_NORMAL
- en: Cloning an OpsWorks stack and then updating the DNS record
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you create an application in AWS OpsWorks, you start by creating a stack.
    An OpsWorks stack consists of one or more layers. Once the stack has been created,
    it can easily be cloned to an exact copy of itself to create an entirely new environment.
    Within this new environment, you can update your recipes and deploy a new version
    of your application. You can even use the local DNS name on ELB to test the new
    version of the application before routing any traffic to the new stack.
  prefs: []
  type: TYPE_NORMAL
- en: Combining the OpsWorks stack hosting your application and the Route 53 service
    to direct the traffic for your CNAME, you can quickly and easily switch between
    stacks as you deploy new versions of your application.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.8 – Cloning an OpsWorks stack'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.8_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.8 – Cloning an OpsWorks stack
  prefs: []
  type: TYPE_NORMAL
- en: Process for deployment – cloning the OpsWorks stack
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The process for undertaking a blue/green deployment by cloning an OpsWorks
    stack is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Start with your current stack in OpsWorks; this is your blue stack that contains
    the current version of your application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create the new stack by cloning the stack, which is now your green environment.
    You can do this by clicking on the clone link in the console or by using the CLI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploy the new version of the application to the application layer of the green
    environment. There should not be any traffic being directed to the green environment
    at this point.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If necessary, pre-warm your ELB so that it can handle the traffic for your customer
    base.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you are ready to promote your green stack to the one being used as the
    production stack, update the DNS records to point to ELB using Route 53\. This
    can be done all at once or in a gradual process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you are satisfied with your deployment, then you can decommission the blue
    stack.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have examined a multitude of different blue/green deployment techniques
    using a variety of different AWS services, we will next move on to the data tier.
  prefs: []
  type: TYPE_NORMAL
- en: Using best practices in your data tier with blue/green deployments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the more significant risks that can be present when deploying a newer
    version of an application is making changes to the database. This is especially
    true when performing blue/green deployments since the whole point of them is to
    mitigate risk and create the ability to roll back quickly.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Amazon RDS, it is a good idea to create a snapshot of your
    database prior to starting your deployment if you are going to be performing any
    database changes. This will allow you to restore from that snapshot if the data
    deployment doesn't go as planned and have as little downtime as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Separating schema changes from code changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When performing deployments, it is vitally important to separate any database
    changes, such as schema changes, from the application deployment. The order in
    which you perform some of the database updates may depend on what type of schema
    changes you are performing.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are generally two approaches that you can take when schema changes are
    necessary, yet when to use either of the two approaches depends on whether the
    schema approaches are backward compatible and will work with the current version
    of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.9 – The process for making database schema changes during blue/green
    deployments'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.9_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.9 – The process for making database schema changes during blue/green
    deployments
  prefs: []
  type: TYPE_NORMAL
- en: The second approach is to compete for the schema changes after you have conducted
    your deployment. This is best for any changes that would not be compatible with
    the current version of the application and, if done prior to deployment, would
    cause errors to the current application version.
  prefs: []
  type: TYPE_NORMAL
- en: There are cases when you should perform two separate schema changes. This would
    be when you have both a set of non-breaking changes as well as a set of breaking
    changes. In splitting up the changes into two separate deployments, you have made
    smaller incremental changes to your database and therefore are mitigating the
    risk by breaking the steps into smaller, more manageable pieces.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered blue/green deployments, what they are, and how to
    deploy them successfully. We also talked about the services in AWS that can be
    used to successfully perform blue/green deployments, along with the processes
    for performing the deployment with each of the services. Finally, we looked at
    how to deal with data updates when implementing deployments. We concentrated on
    which schema changes should be performed first.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will begin to look at monitoring and logging for our
    environments and workloads. This starts with a look at the roles that the CloudWatch
    and X-Ray services play in DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: Review questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have been contracted by a company to help architect their application on
    AWS. The company has a requirement to have a hardened AMI that can be auto scaled
    as part of the application. The application is also listening on both HTTP and
    TCP ports, so you have decided to use a Classic Load Balancer that can handle
    both protocols. There is a vanity CNAME, which is being hosted on Route 53\. Blue/green
    deployments must be a part of this architecture. Which routing policy can you
    use in Route 53 to achieve blue/green deployments?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Multi-answer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Latency
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Weighted
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Simple
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You are performing a blue/green deployment, updating an application environment
    within Elastic Beanstalk. Once you have created an identical *green* environment
    to the existing *blue* environment and deployed the new version of the application
    to the green environment, what should be done next to switch over to the new *green*
    environment?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Update the DNS records to point to the green environment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Redirect traffic to the new green environment using Amazon Route 53\.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Replace the Auto Scaling launch configuration that is currently pointed at
    the environment's load balancer.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Select the Swap Environment URLs option.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A company has hired you because they need help implementing their blue/green
    deployment process on AWS. After deployment of the new environment, they want
    to be able to gradually shift the traffic from the blue environment over to the
    new green environment. The application has been deployed on EC2 instances, which
    are in an Auto Scaling group placed behind the Application Load Balancer. Route
    53 is routing the consumer traffic to the load balancer. Finally, the application's
    data tier consists of PostgreSQL RDS Multi-AZ database instances.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which three steps will successfully implement the blue/green deployment process?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: a. Create a new Application Load Balancer and a new Auto Scaling group.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Create a new Auto Scaling group behind the current load balancer.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Create a new alias record in Route 53 that points to the green environment
    and has a failover policy for the two records.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Create a new alias record in Route 53 that points to the green environment
    and uses weighted routing between the two records.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: e. In your new Auto Scaling group, set the EC2 instances to use the same RDS
    instance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: f. In your new Auto Scaling group, set the EC2 instances to use the failover
    node of RDS.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Review answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: C
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: D
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A, D, and E
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
