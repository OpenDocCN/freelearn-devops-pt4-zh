- en: 'Chapter 13: Blue Green Deployments'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章：蓝绿部署
- en: Releasing applications by shifting traffic between two identical environments
    is better known as using blue/green deployments. Knowing how to use blue/green
    deployments through the different AWS service offerings can help mitigate risk
    when releasing new versions of an application. Walking through the various techniques
    for the various services and understanding the usage of each is essential to passing
    the AWS DevOps Professional exam.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在两个相同的环境之间切换流量来发布应用，更广为人知的就是使用蓝绿部署。了解如何通过不同的AWS服务进行蓝绿部署，可以帮助减少发布新版本应用时的风险。掌握各种服务的技术并理解每种服务的使用，对于通过AWS
    DevOps专业认证考试至关重要。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: Understanding the concept of blue/green deployments
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解蓝绿部署的概念
- en: AWS services that you can use for blue/green deployments
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在蓝绿部署中使用的AWS服务
- en: Benefits of blue/green with AWS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蓝绿部署在AWS中的优势
- en: Updating Auto Scaling group launch configurations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新自动扩展组启动配置
- en: Using best practices in your data tier with blue/green deployments
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数据层中使用蓝绿部署的最佳实践
- en: Understanding the concept of blue/green deployments
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解蓝绿部署的概念
- en: When you use the blue/green deployment technique, you employ a technique that
    reduces downtime and risk. You do this by running a duplicated environment where
    one is taking the active traffic and the other is receiving the changes. Once
    the changes have been completed and any testing has been commenced, the traffic
    that was previously directed at the initial environment, the blue environment,
    can then be switched over to the green environment. This switch can happen all
    at once or in gradual phases, depending on both your deployment plan and the services
    that you use in your deployment. If there is any issue with the deployment, then
    you can quickly reroute the traffic back to the previously known good state environment,
    the blue environment, while you remediate the new environment.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用蓝绿部署技术时，你在降低停机时间和风险方面采取了一个有效的措施。你通过运行一个复制环境，其中一个环境承担活跃流量，另一个环境接收更改。一旦更改完成并进行测试后，之前指向初始环境（蓝色环境）的流量可以切换到绿色环境。这个切换可以一次性完成，也可以分阶段进行，这取决于你的部署计划和所使用的服务。如果部署出现问题，你可以快速将流量重新引导回已知的稳定环境，即蓝色环境，同时修复新的环境。
- en: The foundation of blue/green deployments is two distinct environments. One environment,
    the *blue environment*, refers to the current environment where your application
    or workload is currently running. The second environment, or the *green environment*,
    refers to a duplicated environment where you can deploy your updated changes to
    your application code or workload. Using both of these separate environments in
    symphony allows for near zero-downtime release and rollback proficiencies.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝绿部署的基础是两个独立的环境。一个环境，即*蓝色环境*，指的是当前应用或工作负载运行的环境。第二个环境，即*绿色环境*，是一个复制的环境，你可以在其中部署更新的应用代码或工作负载更改。使用这两个独立环境的协作可以实现接近零停机时间的发布和回滚能力。
- en: When you perform a blue/green deployment, you are working with an immutable
    infrastructure. This means that you are not upgrading or updating the current
    infrastructure in place. Instead, you are creating a new set of resources for
    each deployment process.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 执行蓝绿部署时，你正在使用不可变的基础设施。这意味着你不会在现有基础设施上进行升级或更新，而是为每个部署过程创建一套新的资源。
- en: Deployments are not easy
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署过程不容易
- en: 'Traditional deployments favor in-place upgrades. However, with in-place upgrades,
    there are many risk factors to consider:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的部署方式倾向于就地升级。然而，使用就地升级时，需要考虑许多风险因素：
- en: Resource constraints
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源限制
- en: Potential downtime
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 潜在的停机时间
- en: Dependencies from other systems
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自其他系统的依赖
- en: Difficulties in rolling back unsuccessful deployments
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回滚不成功部署的困难
- en: With the cost and complexity involved in the deployment process, teams will
    sometimes choose to deploy to an existing infrastructure. This is a viable deployment
    strategy, but it contains inherent risks, especially when performing a deployment
    such as an all-at-once deployment where all of the instances or applications are
    updated simultaneously. If there was an issue or failure during the deployment,
    this often leads to downtime, loss of revenue, loss of trust in the product brand,
    and loss of customer confidence, depending on how long the outage lasts.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于部署过程中的成本和复杂性，团队有时会选择部署到现有基础设施。这是一种可行的部署策略，但它存在固有的风险，特别是在执行像一次性全量部署这样的操作时，所有实例或应用程序都会同时更新。如果在部署过程中出现问题或故障，这通常会导致停机、收入损失、品牌信任度丧失和客户信心下降，具体情况取决于停机时间的长短。
- en: Question
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 问题
- en: When starting to map out a deployment, try and ask yourself, *What solutions
    reduce downtime, handle dependencies, and can coordinate workloads in an improved
    manner?*
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始规划部署时，尝试问自己，*哪些解决方案能够减少停机时间、处理依赖关系，并且能以更高效的方式协调工作负载？*
- en: 'There are multiple risks to navigate when performing deployments, including
    the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行部署时，有多个风险需要规避，包括以下几点：
- en: Application failure
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序故障
- en: Infrastructure failure
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础设施故障
- en: Using blue/green deployment strategies helps mitigate these risks and business
    impacts by allowing an almost seamless cutover from one environment to the next.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用蓝绿部署策略有助于减轻这些风险和业务影响，因为它可以实现几乎无缝的从一个环境切换到另一个环境。
- en: The term *environment* is used a great deal when talking about deployments and
    especially blue/green deployments. Having an understanding of the definition of
    environment is critical for understanding what resources are subject to change.
    Knowing what is being defined as the environment is also crucial when navigating
    some of the questions on the AWS DevOps professional test.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈论部署，尤其是蓝绿部署时，*环境*这个术语经常被使用。理解“环境”定义对于理解哪些资源会发生变化至关重要。知道什么被定义为环境，在处理 AWS DevOps
    专业考试的一些问题时也非常重要。
- en: An environment is a boundary where things change and where things need to be
    deployed. This can be as small as one component of your application or it can
    be as large as a full tier of the application, such as the web tier.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 环境是一个事物变化的边界，也是需要部署事物的地方。这可以是你应用程序的一个组件，也可以是应用程序的一个完整层级，例如 Web 层。
- en: AWS services that you can use for blue/green deployments
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可用于蓝绿部署的 AWS 服务
- en: There are a number of tools available natively from AWS that allow you to perform
    blue/green deployments. These tools allow for a range of deployment options, from
    full control of all aspects of the environment using a service such as CloudFormation
    to granular changes in services such as Route 53 or Auto Scaling. These more granular
    options would only allow you to perform modifications to a specific section of
    your application but can be just as effective in implementing blue/green deployments.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 提供了许多原生工具，可以让你执行蓝绿部署。这些工具提供了多种部署选项，从使用像 CloudFormation 这样的服务全面控制环境的各个方面，到对
    Route 53 或 Auto Scaling 等服务进行细粒度的更改。这些更细粒度的选项只允许你对应用程序的特定部分进行修改，但在实施蓝绿部署时，它们同样有效。
- en: Let's look at the different AWS services that are available to assist us in
    blue/green deployments.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下 AWS 提供的不同服务，它们可以帮助我们进行蓝绿部署。
- en: AWS CloudFormation
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS CloudFormation
- en: 'Using **AWS CloudFormation**, you have the ability to use the service''s templating
    capabilities to both describe the AWS resources you are deploying along with quickly
    creating a copy of the environment with any updates that are needed. This is all
    done with one of the two languages that CloudFormation supports: JSON or YAML.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **AWS CloudFormation**，你可以利用该服务的模板功能，既可以描述你正在部署的 AWS 资源，又可以快速创建包含所需更新的环境副本。所有这些都可以通过
    CloudFormation 支持的两种语言之一：JSON 或 YAML 来完成。
- en: The templates can be smaller pieces of a more extensive infrastructure. You
    have the ability with CloudFormation templates to create groups of dependent items,
    such as an autoscaling group, and then either use the output of this created group
    to update a previously created template that holds the load balancer to update
    where it is pointing or make the switch manually with the newly created Auto Scaling
    group.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 模板可以是更广泛基础设施中的小组件。通过 CloudFormation 模板，您可以创建一组相关的项目，例如自动扩展组，然后使用该组的输出更新先前创建的模板，该模板包含负载均衡器，并更新其指向的位置，或者使用新创建的自动扩展组手动进行切换。
- en: AWS Elastic Beanstalk
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS Elastic Beanstalk
- en: '**Elastic Beanstalk** is a service that helps developers concentrate on their
    code by managing the underlying infrastructure. This includes items such as ELB,
    EC2 instances, storage for the EC2 instances with EBS volumes, Elastic IPs, Auto
    Scaling groups, security groups, and even monitoring via CloudWatch metrics.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**Elastic Beanstalk** 是一项服务，帮助开发者集中精力于代码，而由它管理底层基础设施。这包括如 ELB、EC2 实例、带有 EBS
    卷的 EC2 实例存储、弹性 IP、自动扩展组、安全组，甚至通过 CloudWatch 指标进行监控等内容。'
- en: When you are performing blue/green deployments in Elastic Beanstalk, you can
    easily clone your environments. These clones can be exact replicas of your current
    application code base, or they can even be the latest version of the code if you
    have pushed features and changes to Beanstalk since you last made your deployment.
    Elastic Beanstalk makes it easy for those using the service to switch from one
    environment to the next using the Swap Environment URL feature. This feature takes
    and then performs the DNS switch in the background and reroutes the traffic from
    the previous (blue) environment to the new (green) environment.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Elastic Beanstalk 中执行蓝绿部署时，您可以轻松克隆环境。这些克隆可以是当前应用程序代码库的精确副本，或者如果自上次部署以来您推送了功能和更改，它们甚至可以是代码的最新版本。Elastic
    Beanstalk 使使用该服务的用户可以轻松地通过“交换环境 URL”功能从一个环境切换到另一个环境。此功能会在后台进行 DNS 切换，并将流量从先前的（蓝色）环境重定向到新的（绿色）环境。
- en: AWS CodeDeploy
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS CodeDeploy
- en: '**AWS CodeDeploy** is a managed deployment service that helps automate the
    deployment of your software to on-premise servers, EC2 instances, AWS Lambda functions,
    and AWS Fargate containers. When creating a deployment with AWS CodeDeploy, you
    have the option to choose either an in-place deployment or a blue/green deployment.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**AWS CodeDeploy** 是一项托管部署服务，帮助自动化将您的软件部署到本地服务器、EC2 实例、AWS Lambda 函数和 AWS Fargate
    容器。当使用 AWS CodeDeploy 创建部署时，您可以选择就地部署或蓝绿部署。'
- en: With the blue/green deployment option, you have the ability in your environment
    configuration to have CodeDeploy automatically copy your EC2 Auto Scaling group
    or manually provision instances for a blue/green deployment. There are also options
    to enable load balancing. There is also an option to reroute the traffic automatically
    or allow for manual rerouting of the traffic after the deployment to the new instances
    or Auto Scaling group is complete.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用蓝绿部署选项，您可以在环境配置中设置 CodeDeploy 自动复制您的 EC2 自动扩展组，或手动配置实例进行蓝绿部署。还可以启用负载均衡选项。此外，还可以选择在部署完成后自动重定向流量，或者允许在部署到新实例或自动扩展组后手动重定向流量。
- en: There is even the ability to integrate CloudFormation templates using the CodeDeploy
    service to perform blue/green ECS deployments.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至可以使用 CodeDeploy 服务将 CloudFormation 模板集成在一起，以执行蓝绿 ECS 部署。
- en: AWS ELB
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS ELB
- en: '**AWS ELB** (**ELB**) is a compute service that allows you to route and distribute
    your traffic to multiple instances, IP addresses, Lambda functions, containers,
    and even virtual containers. As ELB is a managed service, it can also perform
    health checks to determine which instances are healthy and which ones need to
    stop having traffic being directed to them:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**AWS ELB**（**ELB**）是一项计算服务，允许您将流量路由并分发到多个实例、IP 地址、Lambda 函数、容器，甚至虚拟容器。由于 ELB
    是一项托管服务，它还可以执行健康检查，以确定哪些实例健康，哪些实例需要停止接收流量：'
- en: '![Figure 13.1 – An Application Load Balancer deploying traffic to two versions
    of an application at once using target groups ](img/Figure_13.1_B17405.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图 13.1 – 应用程序负载均衡器使用目标组同时将流量部署到两个版本的应用程序](img/Figure_13.1_B17405.jpg)'
- en: Figure 13.1 – An Application Load Balancer deploying traffic to two versions
    of an application at once using target groups
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.1 – 应用程序负载均衡器使用目标组同时将流量部署到两个版本的应用程序
- en: Using target groups with Application Load Balancers, you can roll out a new
    version of your application to a subset of your users with a canary deployment,
    which is a variety of the blue/green deployment. Using multiple target groups
    that are connected to the same Application Load Balancer, you can determine how
    much traffic will be directed to each version of the application.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Amazon ECS
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Amazon **ECS** (**ECS**) uses tasks to make groups of Docker containers easy
    to run, stop, and manage on AWS EC2 instances. With ECS, you can schedule when
    you want your containers to be placed on an instance using the service scheduler.
    ECS also lets you stretch multiple containers running the same task across multiple
    ECS-compatible instances in the same Region but in different Availability Zones:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.2 – Switching from Target Group 1 to Target Group 2 in ECS using
    an ALB'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.2_B17405.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.2 – Switching from Target Group 1 to Target Group 2 in ECS using an
    ALB
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: The use of containers can make deployments, and especially blue/green deployments,
    more straightforward to perform. Containers are not as complex as full instances,
    and multiple containers can run in a single EC2 instance, even those that are
    running different versions of an application.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Elastic Kubernetes Service
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Amazon **Elastic Kubernetes Service** (**EKS**) allows you to run Kubernetes
    applications and scale Kubernetes applications both in the AWS cloud and on-premises.
    It helps the management of the clusters by providing secure clusters and allows
    the clusters to be highly available.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: EKS can be run on specialized EC2 instances or can be run on **AWS Fargate**,
    which provides on-demand compute capacity for containers. The use of Fargate removes
    the need for provisioning instances, choosing server types, or managing virtual
    machines.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: You can perform blue/green deployments with EKS on AWS Fargate with the help
    of the blue/green deployment feature of the CodeDeploy service. When you create
    a new blue/green deployment for EKS, you specify your Application Load Balancer
    name fronting your Kubernetes task, and the CodeDeploy service handles deploying
    the new green service and then phasing out the older blue task.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: AWS OpsWorks
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**AWS OpsWorks** is a configuration management service that allows you to configure
    stacks based on the Chef or Puppet frameworks.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Blue/green deployments are simplified with OpsWorks by simply cloning the entire
    stack.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Amazon CloudWatch
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Amazon CloudWatch** is the metrics and monitoring service that allows users
    to track and observe their deployed resources. The CloudWatch service also has
    the ability to set alarms and send notifications via other services, such as Amazon
    SNS or Amazon SES.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: When metrics have been set up on the resources in both the blue and green environments,
    then you have the ability to assess the new environment as you start to direct
    traffic to it. Keeping an eye on the metrics that you have set in CloudWatch and
    making sure that all services stay in a steady state while making the switch to
    the new environment can help ease the anxiety of switching to a new environment.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当在蓝绿环境中的资源上设置了指标时，你就可以在开始将流量导向新环境时评估该环境。保持关注你在 CloudWatch 中设置的指标，并确保所有服务在切换到新环境时保持稳定状态，这有助于缓解切换到新环境时的焦虑。
- en: Amazon Route 53
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 亚马逊 Route 53
- en: '**Amazon Route 53** is the DNS service that can be used in blue/green deployments
    by allowing the pointing of DNS records to the new green environment. This allows
    DevOps professionals and network administrators to quickly and easily redirect
    traffic by updating the DNS records. Route 53 also includes advanced capabilities,
    such as the ability to adjust the **Time To Live** (**TTL**) for resource records
    and using advanced techniques such as weighted policies so that traffic can be
    shifted gradually to the new environment instead of redirected all at once.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**亚马逊 Route 53** 是一种 DNS 服务，可以在蓝绿部署中使用，通过将 DNS 记录指向新的绿色环境。这使得 DevOps 专业人员和网络管理员可以通过更新
    DNS 记录快速且轻松地重定向流量。Route 53 还包括高级功能，例如调整资源记录的 **生存时间（TTL）**，以及使用加权策略等先进技术，使得流量可以逐步转移到新环境，而不是一次性全部重定向。'
- en: Now that we have looked at the different services that can be used to implement
    blue/green deployments, let's look at the benefits of using blue/green deployments.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了可以用来实现蓝绿部署的不同服务，让我们来看一下使用蓝绿部署的好处。
- en: Benefits of blue/green deployments with AWS
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 AWS 的蓝绿部署的好处
- en: The use of blue/green deployment strategies provides multiple benefits over
    in-place deployments. It is important to note that although these benefits are
    substantial, there are extra costs for the additional environments that are created
    during the blue/green process. The secondary environments may be taken down after
    the deployment has been validated or, in the case of a failed deployment, after
    a rollback has been completed.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用蓝绿部署策略相比于原地部署提供了多重好处。需要注意的是，尽管这些好处相当显著，但在蓝绿过程中新创建的附加环境会带来额外的成本。验证完部署后，副环境可以被拆除，或者如果部署失败，回滚完成后副环境也可以被移除。
- en: Techniques for performing blue/green deployments in AWS
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 AWS 中执行蓝绿部署的技术
- en: Implementing blue/green deployments in AWS can be done in a variety of ways.
    Recognized patterns have emerged for successful ways to implement these deployments.
    As we look at each technique described, specific services used will be featured.
    Different applications lean toward different patterns.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AWS 中实现蓝绿部署可以通过多种方式进行。已经出现了一些经过验证的模式，用于成功实现这些部署。在我们查看每种技术时，将重点介绍所使用的具体服务。不同的应用程序倾向于采用不同的模式。
- en: Updating DNS routing with Route 53
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Route 53 更新 DNS 路由
- en: 'The Route 53 service allows you to use hosted zones once you have brought up
    your new environment. Adding the additional record to the record set will then
    create a seamless transition to the new application deployment for your end users:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Route 53 服务允许你在启动新环境后使用托管区域。将额外的记录添加到记录集中，然后就可以为终端用户创建无缝过渡到新的应用程序部署：
- en: '![Figure 13.3 – Showing blue/green deployment using Route 53-hosted zones'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 13.3 – 显示使用 Route 53 托管区域的蓝绿部署'
- en: '](img/Figure_13.3_B17405.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.3_B17405.jpg)'
- en: Figure 13.3 – Showing blue/green deployment using Route 53-hosted zones
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.3 – 显示使用 Route 53 托管区域的蓝绿部署
- en: This switch can be done all at once to force all the traffic to the new green
    environment. You can also use weighted records to send a portion of the traffic
    to the green environment, initially as a canary test. These canary users would
    then generate logs and metrics that could be evaluated over a period of time.
    If there are no errors being reported in your new environment, then you can change
    the weight of your policy so that 100% of the traffic is now being directed to
    the green environment.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这种切换可以一次性完成，将所有流量强制导向新的绿色环境。你也可以使用加权记录将一部分流量发送到绿色环境，最初作为金丝雀测试。这些金丝雀用户将生成日志和指标，可以在一段时间内进行评估。如果在新环境中没有报告错误，那么你可以改变策略的权重，使得100%的流量现在都被引导到绿色环境。
- en: This technique is not limited to creating a new green environment in the same
    set of Availability Zones or even the same Region for that matter. You can create
    your new green environment in a totally separate Region. If you are planning to
    switch from Region to Region in your environment, be sure that you have taken
    into account your data tier and how that would be affected during a regional switch.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'This is also not limited to instances or services listening for requests behind
    a load balancer. Using a DNS routing switch with Route 53 could be used in all
    of the following scenarios:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Groups or clusters of EC2 instances fronted by ELB
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instances in an Auto Scaling group that are fronted by ELB
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single instances that have either a public address or an Elastic IP address
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elastic Beanstalk web applications in specified environments
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Services running in ECS or EKS
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Process for deployment – DNS routing
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The process for implementing a blue/green deployment using Route 53 to switch
    hosted zones is detailed as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Start with 100% of your traffic being directed to the **blue** environment,
    with the current version of the application deployed.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploy the new version of the application into the **green** environment.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test that the deployment of the green stack was successful either by running
    a series of manual or scripted tests.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the weighted record in the Route 53-hosted zone to direct a portion of
    the traffic over to the new green environment.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Monitor the new environment for errors or failures.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the weighted record in the Route 53-hosted zone to shift the remaining
    traffic to the **green** environment.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If there was an issue with the deployment, update the Route 53 record to redirect
    all the traffic back to the **blue** environment.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have seen how to do blue/green deployments using DNS and Route 53,
    let's look next at how we can do blue/green deployments without changing the DNS
    settings.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Swapping the Auto Scaling group behind ELB
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our second blue/green deployment option, we will take the DNS option out
    of the picture. In many organizations, the team that does the application deployment
    is not the same team that deals with the networking configurations, including
    the DNS records hosted by the Route 53 service. Hence, we need to be prepared
    for those scenarios:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.4 – Deploying blue/green environments by swapping Auto Scaling
    groups'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.4_B17405.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.4 – Deploying blue/green environments by swapping Auto Scaling groups
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Once the new Auto Scaling group has been launched, you perform a set of tests
    on the new green stack before registering the new Auto Scaling group, the green
    Auto Scaling group, with ELB.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: We go through the hands-on exercise of creating and deploying Auto Scaling launch
    templates in [*Chapter 18*](B17405_18_Final_JM_ePub.xhtml#_idTextAnchor433), *Autoscaling
    and Lifecycle Hooks*.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: An important item of note here is that ELB is only part of the deployment process
    as far as registration and deregistering are concerned. As you are deploying new
    versions of the software, you are not deploying a new load balancer.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的一个重要事项是，ELB仅在注册和注销方面参与部署过程。在部署软件的新版本时，你并没有部署一个新的负载均衡器。
- en: Process for deployment – swapping the Auto Scaling group
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署过程 – 替换自动伸缩组
- en: 'The process for carrying out a blue/green deployment by swapping the Auto Scaling
    group is as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通过替换自动伸缩组来执行蓝绿部署的过程如下：
- en: Before you start, make sure that your ELB instance is not part of your deployment
    environment.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开始之前，确保你的ELB实例不属于你的部署环境。
- en: Begin with the ELB instance pointing to the **blue** Auto Scaling group.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始时，ELB实例指向**蓝色**自动伸缩组。
- en: Deploy the new **green** Auto Scaling group.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署新的**绿色**自动伸缩组。
- en: Test the **green** Auto Scaling group.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试**绿色**自动伸缩组。
- en: Register the **green** Auto Scaling group with the ELB instance.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**绿色**自动伸缩组注册到ELB实例。
- en: Deregister the **blue** Auto Scaling group from the ELB instance.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从ELB实例中注销**蓝色**自动伸缩组。
- en: Now that we have seen how to carry out a blue/green deployment by swapping Auto
    Scaling groups, let's next look at another technique for blue/green deployments
    that also uses Auto Scaling groups.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何通过替换自动伸缩组来执行蓝绿部署，接下来我们将探讨另一种也使用自动伸缩组的蓝绿部署技术。
- en: Updating Auto Scaling group launch configurations
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新自动伸缩组的启动配置
- en: Each Auto Scaling group is associated with a launch configuration. The launch
    configuration contains the information needed to launch new instances whenever
    a scaling event occurs.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 每个自动伸缩组都与一个启动配置相关联。启动配置包含在伸缩事件发生时启动新实例所需的信息。
- en: 'Create a new launch template (or launch configuration). This new launch configuration
    contains either an updated AMI, updated user data, or both:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的启动模板（或启动配置）。这个新的启动配置包含更新的AMI、更新的用户数据，或者两者：
- en: '![Figure 13.5 – Deploying blue/green environments by swapping launch configurations'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 13.5 – 通过替换启动配置部署蓝绿环境'
- en: '](img/Figure_13.5_B17405.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.5_B17405.jpg)'
- en: Figure 13.5 – Deploying blue/green environments by swapping launch configurations
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.5 – 通过替换启动配置部署蓝绿环境
- en: Process for deployment – updating the Auto Scaling group launch configurations
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署过程 – 更新自动伸缩组启动配置
- en: 'The process for performing a blue/green deployment by updating Auto Scaling
    group launch configurations is as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 通过更新自动伸缩组启动配置来执行蓝绿部署的过程如下：
- en: Ensure that your ELB instance is not part of the deployment process.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你的ELB实例不参与部署过程。
- en: Start with your traffic being directed to the current Auto Scaling group using
    the blue launch configuration.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从将流量导向当前使用蓝色启动配置的自动伸缩组开始。
- en: Create a new launch configuration (the green launch configuration) and attach
    it to the Auto Scaling group.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的启动配置（绿色启动配置），并将其附加到自动伸缩组。
- en: Scale out the Auto Scaling group to **twice** its original size.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将自动伸缩组扩展为其原始大小的**两倍**。
- en: Once the instances have been launched and have become healthy from the green
    Auto Scaling group, scale down the Auto Scaling group back to its original size.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦绿色自动伸缩组的实例启动并变得健康，将自动伸缩组缩减回原始大小。
- en: Updating ECS
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新ECS
- en: Packaging your application in a container makes it easy to deploy.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的应用程序打包到容器中可以让部署变得更容易。
- en: Use target groups, which allow you to run multiple services behind a single
    load balancer. One can be the blue service and one can be the green service.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 使用目标组，可以让你在单个负载均衡器后运行多个服务。一个可以是蓝色服务，另一个可以是绿色服务。
- en: 'One of the key pieces to executing a blue/green deployment with ECS is the
    Application Load Balancer. It is at the Application Load Balancer where the ECS
    tasks are registered:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 执行蓝绿部署的关键环节之一是应用程序负载均衡器。ECS任务是在应用程序负载均衡器上注册的：
- en: '![Figure 13.6 – Using an ECS service update for a blue/green deployment'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 13.6 – 使用ECS服务更新进行蓝绿部署'
- en: '](img/Figure_13.6_B17405.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.6_B17405.jpg)'
- en: Figure 13.6 – Using an ECS service update for a blue/green deployment
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.6 – 使用ECS服务更新进行蓝绿部署
- en: 'When using this approach, you need to take the following considerations into
    mind:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用这种方法时，你需要考虑以下事项：
- en: Your code needs to be completely stateless.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的代码需要是完全无状态的。
- en: Canary deployments aren't possible.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不支持金丝雀部署。
- en: Long-running connections will be abruptly terminated during the task switch.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Process for deployment – updating ECS
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The process for conducting a blue/green deployment by updating ECS is as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Start with a blue service that has a task definition defined that is pointing
    to the Application Load Balancer.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create a new task definition that is established on the new application
    version, which has been created in a new container; this is your green version.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scale up the green service with the green task definition and map this green
    service to the Application Load Balancer.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scale down the blue service by setting the number of tasks to zero.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have seen how to perform a blue/green deployment using containers
    and ECS, let's look at using the Elastic Beanstalk service to quickly swap application
    versions in a blue/green deployment.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Swapping the environment of an Elastic Beanstalk application
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are going to use a blue/green deployment strategy with Elastic Beanstalk,
    then you must make sure that your application environments are separated from
    your database:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.7 – A blue/green deployment by swapping an Elastic Beanstalk application'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.7_B17405.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.7 – A blue/green deployment by swapping an Elastic Beanstalk application
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Process for deployment – swapping an Elastic Beanstalk environment
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The process for executing a swap of an Elastic Beanstalk environment to perform
    a blue/green deployment is as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: Open up your AWS Management Console to the Elastic Beanstalk service and ensure
    that you are in the correct Region for your Beanstalk application.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clone your environment. You can do this without any changes to the current platform
    or choose `Clone with latest platform` to use the newest version of the platform's
    Git branch. This new platform becomes your green environment.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you only cloned the environment, you will need to deploy the new version
    of the application to the green environment.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can now test the new environment using the unique DNS name given to the
    green environment's ELB.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the environment overview page, choose `Environment Actions | Swap URLs`.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The traffic coming from Route 53 will now be directed to the green environment.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have looked at how to easily do a blue/green deployment with the Elastic
    Beanstalk service using the Swap URLs feature. Next, let's look at how we can
    perform blue/green deployments in the OpsWorks service by cloning OpsWorks stacks.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Cloning an OpsWorks stack and then updating the DNS record
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you create an application in AWS OpsWorks, you start by creating a stack.
    An OpsWorks stack consists of one or more layers. Once the stack has been created,
    it can easily be cloned to an exact copy of itself to create an entirely new environment.
    Within this new environment, you can update your recipes and deploy a new version
    of your application. You can even use the local DNS name on ELB to test the new
    version of the application before routing any traffic to the new stack.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Combining the OpsWorks stack hosting your application and the Route 53 service
    to direct the traffic for your CNAME, you can quickly and easily switch between
    stacks as you deploy new versions of your application.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.8 – Cloning an OpsWorks stack'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.8_B17405.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.8 – Cloning an OpsWorks stack
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Process for deployment – cloning the OpsWorks stack
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The process for undertaking a blue/green deployment by cloning an OpsWorks
    stack is as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Start with your current stack in OpsWorks; this is your blue stack that contains
    the current version of your application.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create the new stack by cloning the stack, which is now your green environment.
    You can do this by clicking on the clone link in the console or by using the CLI.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploy the new version of the application to the application layer of the green
    environment. There should not be any traffic being directed to the green environment
    at this point.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If necessary, pre-warm your ELB so that it can handle the traffic for your customer
    base.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you are ready to promote your green stack to the one being used as the
    production stack, update the DNS records to point to ELB using Route 53\. This
    can be done all at once or in a gradual process.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you are satisfied with your deployment, then you can decommission the blue
    stack.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have examined a multitude of different blue/green deployment techniques
    using a variety of different AWS services, we will next move on to the data tier.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: Using best practices in your data tier with blue/green deployments
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the more significant risks that can be present when deploying a newer
    version of an application is making changes to the database. This is especially
    true when performing blue/green deployments since the whole point of them is to
    mitigate risk and create the ability to roll back quickly.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Amazon RDS, it is a good idea to create a snapshot of your
    database prior to starting your deployment if you are going to be performing any
    database changes. This will allow you to restore from that snapshot if the data
    deployment doesn't go as planned and have as little downtime as possible.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Separating schema changes from code changes
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When performing deployments, it is vitally important to separate any database
    changes, such as schema changes, from the application deployment. The order in
    which you perform some of the database updates may depend on what type of schema
    changes you are performing.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: 'There are generally two approaches that you can take when schema changes are
    necessary, yet when to use either of the two approaches depends on whether the
    schema approaches are backward compatible and will work with the current version
    of the application:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.9 – The process for making database schema changes during blue/green
    deployments'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.9_B17405.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.9 – The process for making database schema changes during blue/green
    deployments
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: The second approach is to compete for the schema changes after you have conducted
    your deployment. This is best for any changes that would not be compatible with
    the current version of the application and, if done prior to deployment, would
    cause errors to the current application version.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: There are cases when you should perform two separate schema changes. This would
    be when you have both a set of non-breaking changes as well as a set of breaking
    changes. In splitting up the changes into two separate deployments, you have made
    smaller incremental changes to your database and therefore are mitigating the
    risk by breaking the steps into smaller, more manageable pieces.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered blue/green deployments, what they are, and how to
    deploy them successfully. We also talked about the services in AWS that can be
    used to successfully perform blue/green deployments, along with the processes
    for performing the deployment with each of the services. Finally, we looked at
    how to deal with data updates when implementing deployments. We concentrated on
    which schema changes should be performed first.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will begin to look at monitoring and logging for our
    environments and workloads. This starts with a look at the roles that the CloudWatch
    and X-Ray services play in DevOps.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Review questions
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have been contracted by a company to help architect their application on
    AWS. The company has a requirement to have a hardened AMI that can be auto scaled
    as part of the application. The application is also listening on both HTTP and
    TCP ports, so you have decided to use a Classic Load Balancer that can handle
    both protocols. There is a vanity CNAME, which is being hosted on Route 53\. Blue/green
    deployments must be a part of this architecture. Which routing policy can you
    use in Route 53 to achieve blue/green deployments?
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Multi-answer
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Latency
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Weighted
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Simple
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You are performing a blue/green deployment, updating an application environment
    within Elastic Beanstalk. Once you have created an identical *green* environment
    to the existing *blue* environment and deployed the new version of the application
    to the green environment, what should be done next to switch over to the new *green*
    environment?
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Update the DNS records to point to the green environment.
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Redirect traffic to the new green environment using Amazon Route 53\.
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Replace the Auto Scaling launch configuration that is currently pointed at
    the environment's load balancer.
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Select the Swap Environment URLs option.
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A company has hired you because they need help implementing their blue/green
    deployment process on AWS. After deployment of the new environment, they want
    to be able to gradually shift the traffic from the blue environment over to the
    new green environment. The application has been deployed on EC2 instances, which
    are in an Auto Scaling group placed behind the Application Load Balancer. Route
    53 is routing the consumer traffic to the load balancer. Finally, the application's
    data tier consists of PostgreSQL RDS Multi-AZ database instances.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which three steps will successfully implement the blue/green deployment process?
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: a. Create a new Application Load Balancer and a new Auto Scaling group.
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Create a new Auto Scaling group behind the current load balancer.
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Create a new alias record in Route 53 that points to the green environment
    and has a failover policy for the two records.
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Create a new alias record in Route 53 that points to the green environment
    and uses weighted routing between the two records.
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: e. In your new Auto Scaling group, set the EC2 instances to use the same RDS
    instance.
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: f. In your new Auto Scaling group, set the EC2 instances to use the failover
    node of RDS.
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Review answers
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: C
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: D
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A, D, and E
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
