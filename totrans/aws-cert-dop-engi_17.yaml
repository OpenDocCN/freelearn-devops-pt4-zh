- en: 'Chapter 14: CloudWatch and X-Ray''s Role in DevOps'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have your application running in the cloud, you need a way to keep
    an eye on it to make sure that it stays healthy and is performing effectively.
    **CloudWatch** can aggregate the logs of your services and applications, but combining
    this with **X-Ray** allows you to trace the performance of your application to
    see where you can enhance performance even further.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: CloudWatch overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using CloudWatch to aggregate your logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CloudWatch alarms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding X-Ray for application tracing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CloudWatch overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Monitoring is important for several reasons that range from both the operational
    side to the business side. First, it gives you visibility into not only what is
    running in your environment but how the resources in your environment are performing.
    Second, monitoring matters from an operational level when you are trying to troubleshoot
    issues in real time. From a business perspective, monitoring lets you know things
    such as whether your deployments have been completed successfully, and whether
    your customers don't see any adverse effects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In today''s world, where information can be dispersed quickly throughout the
    internet and especially social media channels, anything that affects customer
    experience can and usually does spread quickly. This can affect your brand and
    your business bottom line. Monitoring your resources with CloudWatch allows you
    to stay ahead of this and be proactive rather than reactive:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1 – How monitoring continues to evolve'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.1_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.1 – How monitoring continues to evolve
  prefs: []
  type: TYPE_NORMAL
- en: How you monitor your systems and resources today may be different than how you
    monitored things 5 to 10 years ago. Things such as infrastructure changes and
    waterfall deployment philosophies drove what was going to be monitored.
  prefs: []
  type: TYPE_NORMAL
- en: 'Gone are the days where you would be provisioning a server, and that same server
    would be running for up to a decade before being sunsetted. With services in the
    cloud such as auto-scaling, which constantly adds and removes instances based
    on demand, the metrics that you monitor need to not only be relevant to the health
    of your system but the performance of your customers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.2 – The features of AWS CloudWatch'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.2_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.2 – The features of AWS CloudWatch
  prefs: []
  type: TYPE_NORMAL
- en: 'Amazon CloudWatch is an AWS native service that helps you monitor your services
    and resources. It is part of the management tools offered by AWS. The primary
    function of CloudWatch is to help you track and monitor the performance of your
    resources and applications. While monitoring, the CloudWatch service can use alarms
    to notify either personnel via the SNS service or use events to trigger automation
    in response to those alarms. CloudWatch can also be used to collect and monitor
    log files. CloudWatch consists of three main components: *metrics*, *alarms*,
    and *events*.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding and using the CloudWatch unified agent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AWS provides a unified CloudWatch agent that can help you do several things
    both for on-premises servers and on EC2 instances. Let's review a few common scenarios
    where using the CloudWatch unified agent comes in handy.
  prefs: []
  type: TYPE_NORMAL
- en: Running as a different user
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When running the CloudWatch agent on Linux servers, the CloudWatch agent will
    run as the root user by default. If your company does not allow agents and programs
    to be run as the root user, then you can create a custom user for the CloudWatch
    agent to use and then, in the configuration file, tell the agent to `run_as_user`.
  prefs: []
  type: TYPE_NORMAL
- en: Having multiple CloudWatch agent configuration files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Organizations that base their build on an approved **Amazon Machine Image**
    (**AMI**) that must be used for any development or production builds can have
    a CloudWatch configuration file pre-baked into the instance. This configuration
    file would allow standard configurations to be collected across all instances.
    Development teams can then add another configuration file that the CloudWatch
    agent can read and process at startup, which would include any specific application
    metrics or logs.
  prefs: []
  type: TYPE_NORMAL
- en: An example of this could be if an application team is running an NGINX server
    to front their web application; otherwise, they may be using the proxy powers
    of NGINX to redirect traffic. Their custom configuration file can be designated
    to look for 4XX and 5XX errors from NGINX, and they can also be configured to
    consume the logs and ship them back to CloudWatch Logs.
  prefs: []
  type: TYPE_NORMAL
- en: Sending metrics and logs to a different account than the one the instance is
    running in
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The CloudWatch agent has the flexibility to send either metrics, logs, or both
    to another AWS account for monitoring purposes by specifying `role_arn` in the
    configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Adding custom dimensions to metrics collected by the CloudWatch agent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CloudWatch will create its own rollups of the metrics that it collects. These
    might not always be the optimal grouping for you and your team; hence, there are
    ways to customize how things are grouped by using the `append_dimensions` field.
  prefs: []
  type: TYPE_NORMAL
- en: We just saw how the unified CloudWatch agent, whether used on an AWS EC2 instance
    or an on-premises server, allows you to collect logs and metrics in a multitude
    of scenarios. Now, let's go through the process of installing the CloudWatch agent
    on an EC2 instance.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the CloudWatch agent on an EC2 instance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The best way to get a good understanding of the CloudWatch unified agent is
    to go through the process of installing the agent on an EC2 instance. The following
    tutorial will take you through the steps of standing up an EC2 instance and then
    installing and configuring the agent. Finally, we will send some traffic to the
    EC2 instance so that we can look at the metrics and logs that have been generated.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We will go much deeper into CloudWatch metrics in the next chapter. [*Chapter
    15*](B17405_15_Final_JM_ePub.xhtml#_idTextAnchor381), *CloudWatch Metrics and
    Amazon EventBridge*, will discuss both generic metrics and custom metrics.
  prefs: []
  type: TYPE_NORMAL
- en: 'So far, we have been using Amazon Linux for any EC2 instances in our examples.
    Amazon Linux is an excellent operating system and comes pre-installed with many
    packages for use on the AWS cloud computing environment. This is the precise reason
    that for this example, we are going to use a different operating system – *Ubuntu*.
    The Ubuntu OS will not have some of the packages, such as the CloudWatch unified
    agent, installed by default. This allows us to go through the process of installing
    it on this EC2 instance, but the process would be the same if you had an EC2 instance
    running in your data center, except for the fact that you would need to authenticate
    your instance in your data center with a keypair, which would be rotated regularly.
    EC2 instances, on the other hand, may assume roles and would not need the access
    key and secret key to be stored on the instance, and in fact, assuming the role
    is a more secure practice. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s create the IAM role for our instance; we are going to need our
    instance to have permissions for CloudWatch and AWS Systems Manager. To create
    the role, we will need to save an initial `JSON` policy locally, and then we can
    attach the two managed policies that we need. Copy the `JSON` policy to a file
    named `STS.json`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With our initial policy saved, we can now create the role and attach the two
    managed policies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Since we will be launching our instance with the CLI, we will need to create
    an instance profile. Once our instance profile has been created, we can attach
    our new role to `instance profile`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we will need to query the `SSM` parameter store for the AMI, which we
    want to use to spin up our image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you would like to see the value of the AMI that is returned, then you can
    use the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We are going to want to get into our instance later, but rather than creating
    a key pair, we will add the following script, which will install both SSM Agent
    and the unified CloudWatch agent for Debian. We will create this script and save
    it to a file named `agents.sh` so that we can use it when launching our EC2 instance
    later in the `user-data` parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The script to install SSM Agent and `the` `unified` `CloudWatch` `agent` is
    as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once we have the `AMI` value stored in our variable, we can launch our image
    with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'While our instance is initiating and running the startup scripts that we have
    given to it, we can log into the AWS Console and go directly to the SSM session
    manager using the following URL: [https://console.aws.amazon.com/systems-manager/session-manager](https://console.aws.amazon.com/systems-manager/session-manager).
    Once logged in, at the top right-hand side, check that you are in the correct
    region. We specified for our instance to be launched in the Ohio region (`us-east-2`),
    and if another region is listed, then switch to the region where you have spun
    up your instance. As an alternative, you could also do this from the **EC2** screen
    by selecting the instance and then choosing **Connect** from the **Actions** dropdown.
    On the **Connect to instance** screen, choose **Session Manager** and then the
    orange **connect** button. A new window containing your session should appear
    as you connect to your instance.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we are connected to our instance securely without having to use keys,
    we can configure the agent. We have already installed the CloudWatch agent using
    some of the commands in our `user-data` script. To get some of the logs flowing
    to CloudWatch Logs, we will need to tell the agent which logs specifically to
    push. We will need to run the configuration script as a `sudo` user, which is
    located at `/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-config-wizard`.
    To simplify the commands, we will jump into the root user using the `sudo su`
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Running the CloudWatch agent configuration manager will prompt you for quite
    a few questions, but the setup should take less than 5 minutes. The questions
    shown here are the ones that do not follow the defaults:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Which default metrics config do you want? Standard (2) Log file path: `/var/log/amazon/ssm/amazon-ssm-agent.log`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you want to specify any additional log files to monitor? No (2).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you want to store the config in the SSM parameter store? No (2).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When the config wizard has completed, since we are using the Ubuntu operating
    system, we will copy the newly generated `config` file to where the agent is expecting
    it to be and give ownership to the `cwagent` user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With our CloudWatch agent file now configured, we will have to restart the
    agent for the changes to take effect. We can do this with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: One of the first ways we can generate a log is by clicking the orange `CloudWatch`
    service. Once the service name appears, click on **CloudWatch** to be taken to
    the service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once in `amazon-ssm-agent.log`. Click on this log group's name to be taken to
    the log streams.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There should only be one log stream in the log group. The log stream's name
    will be the identifier for your AWS EC2 instance. Click on this **Log stream**
    so that we can view the logs:![Figure 14.3 – A single log stream in our CloudWatch
    log group
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.3_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 14.3 – A single log stream in our CloudWatch log group
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you did log out of your `Session` `worker` `closed`. Any time that you have
    logged out of **Session Manager** while the CloudWatch agent was running should
    appear in the list of logs. You can click the small triangle on the left-hand
    side of the log to expand the contents and see the full log entry.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We are going to continue to use this instance for further exercises in this
    chapter. If you are going to continue at a later point in time, I would suggest
    that you put this instance into hibernation so that you don't get charged for
    it. Then, you don't have to reconfigure everything when you are ready to go again.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we have added the unified CloudWatch agent to a non-Amazon instance,
    we will look at some other features of CloudWatch Logs. If you plan on doing the
    next exercise with the CloudWatch alarms in a relatively short manner, I would
    suggest that you either leave this instance running or simply stop the instance
    so that you have access to the metrics that the CloudWatch agent aggregates and
    pushes for alarming.
  prefs: []
  type: TYPE_NORMAL
- en: Using CloudWatch to aggregate your logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon's CloudWatch service is not only a powerful monitoring tool, but it also
    allows you to route multiple types of logs such as operating systems, applications,
    custom log files, and even CloudTrail logs to the dependable storage of CloudWatch
    Logs.
  prefs: []
  type: TYPE_NORMAL
- en: CloudWatch Logs allow you to group logs that come from the same source (log
    streams) and then search through those groups using filter patterns. Filter patterns
    are like the CloudWatch version of regular expressions and allow you to search
    through the different fields of the logs in your log streams and groups.
  prefs: []
  type: TYPE_NORMAL
- en: Using subscriptions, you can push either all the logs from a particular log
    stream or only those that meet a particular filter pattern. You can have subscriptions
    push data to either an Amazon Kinesis stream for real-time data processing or
    to a Lambda function for event-driven processing. You can even use a Lambda function
    to push logs that are driven into one or more CloudWatch log groups directly into
    the managed Elasticsearch service for easier searching and graphical trending
    using the Kibana interface.
  prefs: []
  type: TYPE_NORMAL
- en: With an overview of CloudWatch Logs out of the way, let's take a closer look
    at some of the terms we just used for this service and how they all work together
    in CloudWatch Logs.
  prefs: []
  type: TYPE_NORMAL
- en: CloudWatch Logs terminology
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we start to get deeper into CloudWatch Logs, there are some terms that we
    need to be familiar with, especially in the context of both the following exercise
    and the professional exam:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Filter pattern**: The filtering expressions that restrict which logs get
    forwarded to the AWS destination resource.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Log events**: A record of some activity that''s been recorded in CloudWatch
    Logs is known as a log event. Event messages must be in UTF-8 format.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Log streams** and **Log groups**: A group of log streams that share the same
    source is grouped in the CloudWatch Logs console as log groups. There is no limit
    on how many log streams can be a part of one log group.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Metric filters**: Using metric filters, you can extract data from ingested
    events. You can then convert them into data points on a CloudWatch metric. Metric
    filters are assigned to log groups. All log streams in a particular log group
    get the particular metric filters assigned.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Retention settings**: How long your log files are kept in CloudWatch Logs
    is determined by the retention settings. By default, logs are kept indefinitely
    and never expire. This can lead to extra costs if you do not need your logs over
    a specified time. Instead, you can choose a retention period between 1 day and
    10 years for each log group, and once the retention period is met, then the logs
    will be automatically deleted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.4 – The flow of logs from resources to CloudWatch Logs'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.4_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.4 – The flow of logs from resources to CloudWatch Logs
  prefs: []
  type: TYPE_NORMAL
- en: Using the terms we just learned, in the preceding diagram, we can see how a
    log that has been generated from an AWS resource becomes a log stream. One or
    more streams are combined to form a log group. Log streams are then retained or
    deleted based on the retention settings.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will learn how to use one of the features of CloudWatch logs, Insights,
    to analyze the data that is being captured by the CloudWatch Logs service.
  prefs: []
  type: TYPE_NORMAL
- en: CloudWatch alarms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to shipping your logs for storage and searching, another aspect
    of monitoring your system is being alerted when something goes awry. These could
    be simple notifications that let you know that a service or server is not being
    responsive. It could also be proactive alerts, letting you know that the platform
    that you are running your application on is running out of CPU or memory and needs
    to be scaled before larger issues arise.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the **CloudWatch** service to monitor either a single metric or
    multiple conditions to create alarms. These alarms can be raised when the metrics
    of the underlying resources meet a certain criterion. There are two types of alarms
    that you can create in CloudWatch: metric alarms and composite alarms.'
  prefs: []
  type: TYPE_NORMAL
- en: A **metric alarm** monitors a specific metric of CloudWatch. It has a threshold
    for monitoring that is set when it's initially created, along with the number
    of periods that can break the threshold before going into an alarm state. Once
    that alarm state has been triggered, then an action can be configured. Available
    actions include sending a notification to an SNS topic, performing an EC2 action,
    performing an AutoScaling action, or creating an OpsItem or incident in Systems
    Manager.
  prefs: []
  type: TYPE_NORMAL
- en: A **composite alarm** uses multiple alarm states that you have created to allow
    you to create specific conditions when the alarm goes off.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the alarm goes off, you can have the alarm perform a variety of actions,
    such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Stop, terminate, or reboot an EC2 instance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have an autoscaling group scale up or down.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Send a notification message to an AWS SNS topic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 14.5 – Examples of CloudWatch alarms'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.5_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.5 – Examples of CloudWatch alarms
  prefs: []
  type: TYPE_NORMAL
- en: 'There are certain facts about CloudWatch alarms that you should know about
    when studying for the DevOps Professional exam. While the Professional exam will
    not test you on these facts verbatim, they can be incorporated into a larger scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: Alarm names can only be comprised of ASCII characters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can create up to 5,000 alarms per region, per account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can add alarms to CloudWatch dashboards.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can test alarms by using the `SetAlarmState` setting (either to engage or
    disengage the alarm).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CloudWatch service saves alarm history for 2 weeks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will create a CloudWatch alarm and create some events to trigger the
    alarm. To receive the notifications for the alarm, we will also need to create
    an SNS topic. However, you can skip this first step if you already have an SNS
    topic and would like to use that previously created topic. Just make sure that
    if you are going to skip this step, you are subscribed to the topic.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a CloudWatch alarm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should have an EC2 instance that is creating metrics that have been stood
    up from our previous exercise. We will use the metrics from this instance to monitor
    for an alarm and then stress the instance so that an alarm is created.
  prefs: []
  type: TYPE_NORMAL
- en: 'For us to receive notifications for the alarm, we will need an SNS topic that
    we can subscribe our email address to:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your terminal and type the following commands to create `topic`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"TopicArn": "arn:aws:sns:us-east-2:470066103307:cwatch"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that we have our `topic`, we need to use `subscribe` with our email address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '{'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"SubscriptionArn": "pending confirmation"'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we need to go to our email account and find the email that the SNS service
    has just sent. Then, we must click on the link that says **Confirm Subscription**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With our SNS topic created, we can now back to the AWS Management Console and
    navigate to the `CW_Agent` and make a note of the instance ID. Once you have this
    marked down, go to the CloudWatch service under the **Services** dropdown at the
    top left of the navigation bar. Open the CloudWatch service in a new tab; we will
    need to come back to this instance to test our alarm later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you're in the CloudWatch service, find the **Alarms** menu setting from
    the left-hand menu. Click on this to expand the menu item and view the sub-menu
    items. Once expanded, click on **All alarms** so that you can be taken to the
    **Alarms** screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Alarms** page, click on the orange button labeled **Create Alarm**
    to create a new alarm. This will bring up the prompts for creating the alarm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Select metric** button. This will bring up a dialog where you
    can choose the metric. Find **Custom Namespaces** and click on **CWAgent**. Once
    you're inside the **CWAgent** namespace, choose the grouping labeled **ImageId,
    InstanceId, InstanceType** and click on this link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the metric named `mem_used_percent`. However, before clicking on the box
    to select it, make sure that the `InstanceId` matches the instance ID that you
    found earlier. If everything matches, then select the checkbox to the left of
    the metric to use this metric in the alarm. When you select this metric or any
    metric, a graph will appear at the top, showing the recorded values for the metric
    you selected. Click on the orange **Select metric** button at the bottom to continue:![Figure
    14.6 – Selecting the single metric to monitor when creating a CloudWatch alarm
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.6_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 14.6 – Selecting the single metric to monitor when creating a CloudWatch
    alarm
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Scroll down to the `20`. Once you have changed these values, click the orange
    **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, on the **Notifications** screen, use the following selections. Once you
    have filled in all the sections, scroll to the bottom of the page and click the
    orange **Next** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'a. **Alarm state trigger**: In Alarm.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'b. **Select an SNS Topic**: Select an existing SNS topic.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'c. **Send notification to**: Choose the cwatch notification topic you just
    created.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, on the `chapter14` as the alarm name. Click the orange **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, on the **Preview and create** page, scroll down to the bottom of the
    page, checking the values of the items on the way down. If everything looks right,
    then click on the orange **Create Alarm** button at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have created our alarm, we need to test it. We could test it by
    changing `SetAlarmState` using the CLI. However, we are going to test our alarm
    by performing a stress test on the EC2 instance itself. Find the tab that contains
    the instance ID that we opened earlier. Select the checkbox next to the instance,
    and then at the top of the **Instances** screen in the AWS Management Console,
    find the dropdown labeled **Actions**. Click on the **Actions** menu to expose
    the sub-menu items. Choose **Connect**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Connect** screen, use **Session Manager** to connect to the instance.
    Once on the **Session Manager** tab, click on the orange **Connect** button at
    the bottom to start our session inside of our EC2 instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we are inside the instance, we will need to install a package to help
    us stress test the instance and set off the alarm. Run the following command to
    install the package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the `stress` package has been installed, we can run it with the following
    options to stresstest the memory of the instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After the **Memory used** percent on the instance goes above 20% for 5 minutes,
    you should receive an email notification to whatever email you subscribed with
    in the SNS topic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have seen how the CloudWatch service can collect and aggregate
    our logs and help us with our monitoring duties with sending alerts, we will take
    a look at another tool in our monitoring and debugging toolbelt: **AWS X-Ray**.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding application tracing with X-Ray
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**X-Ray** is a service that''s used to monitor modern web applications. Modern
    applications are essentially service-oriented applications. These can be serverless
    architecture applications or applications that run inside containers. With these
    modern applications, the app itself is broken into multiple pieces. While this
    presents many advantages, including ease of scaling in a horizontal nature and
    taking full advantage of cloud-native services, it can also present some challenges.
    Understanding where errors are ultimately impacting your service (or business)
    becomes more problematic.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Tracing allows you to connect the dots in a modern application by letting you
    do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Discover multiple services.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get insights into individual operations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See issues isolated within a segment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform root cause analysis for a specific issue.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 14.7 – How an X-Ray trace breaks down pieces into segments'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.7_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.7 – How an X-Ray trace breaks down pieces into segments
  prefs: []
  type: TYPE_NORMAL
- en: Tracing allows you to quickly look at and easily examine what happened for a
    particular API call or a particular user.
  prefs: []
  type: TYPE_NORMAL
- en: A **trace** is a holistic view, and it encapsulates the end-to-end transactions
    from a customer standpoint where the customer created the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: At that point, X-Ray breaks the trace down into segments. Segments are chunks
    that come from individual servers.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand traces, which are one of the main concepts in X-Ray,
    let's look at how the X-Ray service itself works.
  prefs: []
  type: TYPE_NORMAL
- en: The trace is then broken up into various segments. A **segment** furnishes the
    name of the resource, the specifics about the request, and the work being done.
    Segments can also show issues that occur in the segment, such as errors, faults,
    and exceptions.
  prefs: []
  type: TYPE_NORMAL
- en: How does the X-Ray service work?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You start by integrating the X-Ray SDK into your applications. This can be customized
    for different languages such as Python, Java, and Node.js. Next, an on-instance
    daemon starts to collect the data. The daemon then ships this data to the X-Ray
    backend. At the X-Ray backend, the traces are then recorded. There may be feeds
    coming for different services at multiple points in time, yet the X-Ray service
    can piece all of this information together using a **trace id**. Once the trace
    has been collected, the X-Ray service creates an aggregated view called a **Service
    Map**. Finally, X-Ray presents a set of analytics capabilities that allow you
    to dive into and answer three valuable questions.
  prefs: []
  type: TYPE_NORMAL
- en: Another item to note is that the X-Ray service is cloud-agnostic. This means
    that the code you have written doesn't have to only run in the AWS cloud. The
    code can run in other places to take advantage of the X-Ray service's tracing
    capabilities, such as on a developer's laptop or in a corporate data center. This
    assumes that the environment that it is running in has connectivity back to the
    AWS X-Ray service and a set of credentials that will enable it to run.
  prefs: []
  type: TYPE_NORMAL
- en: X-Ray helps you answer three questions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The X-Ray service helps developers answer three specific questions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**How** is my application doing?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Why** is my application performing the way it is?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Who** is impacted by the issues?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The graphical nature of the X-Ray interface, which is depicted as a service
    graph, lets you and your development team see where the users of your application
    are consuming resources. It also gives you the times of responses for the different
    resources so that you can see if a particular resource is the cause of latency
    or trouble issues.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand how X-Ray can help us with developing and troubleshooting
    our applications that are running on the AWS cloud, let's take a look a how the
    X-Ray service integrates with serverless services.
  prefs: []
  type: TYPE_NORMAL
- en: X-Ray and serverless services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When using X-Ray in conjunction with serverless services and Lambda, in particular,
    the X-Ray service brings a few unique benefits to the table that you would not
    get with CloudWatch monitoring. X-Ray lets you obtain information on the timing
    of AWS Lambda cold starts.
  prefs: []
  type: TYPE_NORMAL
- en: When a Lambda service first receives a request to run a function, it needs to
    prepare an execution environment. This means that it needs to retrieve the code
    from an S3 bucket where the code is stored and then allocate the runtime environment,
    which includes the memory and CPU. After performing any last initialization steps,
    Lambda can then run the handler.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing X-Ray on a Lambda function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In [*Chapter 12*](B17405_12_Final_JM_ePub.xhtml#_idTextAnchor307), *Lambda
    Deployments and Versioning*, we went over AWS Lambda. This is the Function-as-a-Service
    offering from AWS. We can take the functions we build and then enable the X-Ray
    service on one of them to see the traces and segments from AWS X-Ray:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you have either not done the *Creating a Lambda function* exercise in [*Chapter
    12*](B17405_12_Final_JM_ePub.xhtml#_idTextAnchor307), *Lambda Deployments and
    Versioning*, where we went through the process of creating the word count function,
    or you have deleted this function from your account, please go back and do/redeploy
    this exercise. We will be using this function to continue our AWS X-Ray exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Log into **AWS Management Console** and navigate to the **Lambda** service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once at the `my_word_count_python`. Click on the name of this function to be
    taken to this function. If you have not created this function or had deleted it
    after performing the exercise, you have two options. You can go back and recreate
    the function or you can try and follow the steps for another function that you
    have created in your account to implement the X-Ray tracing service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that you are in the **Lambda** service, scroll down the page until you find
    the horizontal menu bar and click on the menu item named **Configuration**:![Figure
    14.8 – Configuration highlighted on the Lambda horizontal menu
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.8_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 14.8 – Configuration highlighted on the Lambda horizontal menu
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The **Configuration** menu choice will bring up a vertical menu on the left-hand
    side of the screen. Locate the option named **Monitoring and operations tools**
    and click on it. This will bring **Monitoring and operations view** into focus.
    At the top right of this view, choose **Edit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Edit monitoring tools** page, find the section labeled **AWS X-Ray**.
    Click on the **Slider** button to turn X-Ray tracing on for this Lambda function.
    Then, click **Save** at the bottom of the page:![Figure 14.9 – Adding AWS X-Ray
    to our Lambda function
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.9_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 14.9 – Adding AWS X-Ray to our Lambda function
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Clicking **Save** will take you back to the **Monitoring and operations tools**
    page under the **Configuration** header. You should see that **Active tracing**
    is now enabled. With tracing enabled, let's run a test to see X-Ray in action.
    From the horizontal navigation bar, click the menu item named **Test**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you need to create another test event, then you can use the default data
    and save it as `XRtest`. If you still have the Lambda function up from the previous
    exercise, then you should have a test event named `Test1` that we previously created.
    With your test event created, click the orange **Test** button in the top-right
    corner of the **Test event** section:![Figure 14.10 – The orange test button to
    the right of the Test event section
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.10_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 14.10 – The orange test button to the right of the Test event section
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once your test event has run, we can click on the **Monitor** menu item on the
    horizontal menu to be taken to the **Monitoring** page. By default, this page
    will be on the metrics section. However, we will click on the item named **Traces**
    so that we can see the X-Ray trace that was produced.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the trace screen, we can now see a **Service Map**, which was produced along
    with the trace ID of the function, which was traced in the following table:![Figure
    14.11 – The generated X-Ray Service Map
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_14.11_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 14.11 – The generated X-Ray Service Map
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Go back to the **Test** section and click **Test event** about two to three
    more times. Once the Lambda invocations have been completed, you can go back to
    the **Monitor** tab and look at the trace table once again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 14.12 – Table of traces from the same Lambda function'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.12_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.12 – Table of traces from the same Lambda function
  prefs: []
  type: TYPE_NORMAL
- en: If you clicked the test event multiple times in a row, then in the **Response
    Time** column in the table, you should see that there will be some functions that
    have a much faster response time than others. This is because there is no cold
    start needed for these functions.
  prefs: []
  type: TYPE_NORMAL
- en: We just went through an exercise that took a previous Lambda function that we
    had running, and then allowed us to gain more information on it by adding X-Ray
    traces. We could see the path of the calls, starting from the customer, as well
    as the variations in the time that the function takes to respond initially.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's wrap up what we learned in this chapter regarding AWS CloudWatch
    and X-Ray.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at the importance of monitoring for our different
    environments and applications, especially the CloudWatch service.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will continue to look at the CloudWatch service by looking
    deeper at the monitoring and metrics capabilities of the service. We will also
    learn how to automate reactions from the CloudWatch service using AWS EventHub.
  prefs: []
  type: TYPE_NORMAL
- en: Review questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to test your knowledge of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: You have been hired by a company to help the DevOps team. The team currently
    needs help with their monitoring. The company wants to use all native AWS services
    rather than third-party services. There is currently a production RDS PostgreSQL
    database that needs to be monitored closely as it is the main data store for the
    customer orders. Which services can be used to monitor and alert in real time
    if the IOPs metrics exceed the normal levels and allow the DevOps teams to provision
    more IOPs? (Choose two)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Amazon CloudWatch
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Amazon CloudTrail
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Amazon Simple Notification Service
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Amazon Route 53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You have developed a modern application using AWS Lambda functions for a company
    that is invoked when someone places a file in an S3 bucket. The company would
    like more visibility into the application and has requested that you integrate
    AWS X-Ray into the Lambda function so that they can see the traces. How should
    you do this to ensure that you make sure that all non-instrumented services that
    invoke your Lambda function are traced?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Under the AWS Lambda function configuration, enable Start tracing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Under the AWS Lambda function configuration, enable Active tracing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Lambda functions do not support tracing when invoked by non-instrumented
    services.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Lambda functions do not need any additional configuration to record traces
    when invoked by non-instrumented services.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You have been brought on to a team that is using a mainly serverless architecture
    consisting of Lambda functions. They want to be able to analyze the invocations
    of the functions during the testing phase of their SDLC. Which of the two (2)
    following tools will help them achieve this?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Amazon CloudTrail
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Amazon CloudWatch
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Amazon Inspector
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Amazon X-Ray
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Review answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: a, c
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: b
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: b, d
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
