- en: 'Chapter 15: CloudWatch Metrics and Amazon EventBridge'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Metrics are one of the central tenants of AWS CloudWatch. They record the performance
    of your services and can be used to trigger alarms and actions based on the data
    they provide. There is a multitude of out-of-the-box metrics available, but there
    is also the ability to create custom metrics. This can expand the capabilities
    of CloudWatch even further.
  prefs: []
  type: TYPE_NORMAL
- en: Having the ability to harness the metrics captured when they reach certain thresholds
    is a capability of Amazon EventBridge. As a DevOps engineer, this is a powerful
    tool that can help you automate your systems so that they are self-healing, as
    well as constantly scaling up and down to meet your customers' generated capacity
    needs. These automated responses can be triggered by both native AWS services
    and third-party systems. This is especially useful in routine monitoring and creating
    routines when certain events occur.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: A closer look at CloudWatch metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic metrics in CloudWatch for AWS services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using CloudWatch metrics to create dashboards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon EventBridge overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A closer look at CloudWatch metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we looked at the CloudWatch service and examined a
    few of the features that it offered. We even touched on the topic of metrics when
    creating our alarm.
  prefs: []
  type: TYPE_NORMAL
- en: Metrics, when it comes to applications and monitoring, is data. Many times,
    this is lots of data streaming constantly. This data is used not only from a technical
    perspective but also from a business perspective to see how the company is performing.
  prefs: []
  type: TYPE_NORMAL
- en: Metrics are fundamental in CloudWatch. When recorded, a **metric** represents
    a time-ordered set of data points that are then published to the CloudWatch service.
  prefs: []
  type: TYPE_NORMAL
- en: Metrics endure in a single region. This means that if you have a multi-region
    environment, then the metrics for the different resources will be gathered and
    stored in the same region where the resources have been created and have been
    running at a point in time. Although you cannot delete metrics, they do expire
    automatically after 15 months.
  prefs: []
  type: TYPE_NORMAL
- en: 'A **namespace** is a container for CloudWatch metrics. The namespace where
    you will find the metrics will be the same as the AWS service names for many services:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.1 – Namespaces inside the CloudWatch console'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.1_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.1 – Namespaces inside the CloudWatch console
  prefs: []
  type: TYPE_NORMAL
- en: '`PutMetricData` command with the CloudWatch agent.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The metric data is aggregated over specific periods into **statistics**. These
    aggregations are correlated using the namespaces, metric name, dimensions, and
    data point of measure. You can measure the statistics in one of five ways: average,
    minimum, maximum, sum, or sample count. When choosing sample count, CloudWatch
    will count the number of data points.'
  prefs: []
  type: TYPE_NORMAL
- en: One of the good things about CloudWatch is that the resource does not have to
    be running to access the metrics. You can even access metrics for resources that
    you have terminated, such as terminated EC2 instances, deleted Elastic Load Balancers,
    Fargate containers, and deleted EBS volumes.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing your metrics in CloudWatch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can view graphs of your metrics by logging into the AWS Management Console,
    going to the **CloudWatch** service, and choosing **Metrics** from the left-hand
    menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.2 – An example of a graph from a CloudWatch metric'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.2_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.2 – An example of a graph from a CloudWatch metric
  prefs: []
  type: TYPE_NORMAL
- en: In the `InstanceID`, `functionName`, `Invocations`, `Namespace`, and others.
    One thing that doesn't work is searching by **Amazon Resource Name** (**ARN**).
  prefs: []
  type: TYPE_NORMAL
- en: Streaming metrics with CloudWatch metric streams
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we stated earlier, **CloudWatch** keeps your metric data for 15 months and
    then deletes the data. If you would like to push that data for long-term storage
    in a data store such as an S3 bucket or a data lake via **Amazon Kinesis Data
    Firehose**, this is possible via a metric stream. You also have the option to
    push your metric data using metric streams to a third-party provider.
  prefs: []
  type: TYPE_NORMAL
- en: Data from CloudWatch metrics can be pushed to metric streams in either JSON
    or OpenTelemetry format.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have an understanding of what CloudWatch metric streams are, let's
    take a look at why we would use metric streams.
  prefs: []
  type: TYPE_NORMAL
- en: Why would you push your metrics to a third party via metric streams?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the past, partners who specialized in services such as monitoring and dashboarding
    relied on API calls via the CloudWatch service to get the data from your account
    into their service. As your account grew, this could add additional expenses on
    your side. The `GetMetricData` API call is $0.01 per 1,000 requests. Metric streams
    reduce this cost substantially by only charging $0.003 per 1,000 requests.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned how to store or share our metrics using metric streams,
    let's examine the different types of metrics available in CloudWatch metrics.
  prefs: []
  type: TYPE_NORMAL
- en: Basic metrics in CloudWatch for AWS services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CloudWatch automatically monitors a basic set of metrics at 5-minute intervals
    for free. Most AWS services send metrics automatically for free to CloudWatch
    metrics. These include foundational services such as EC2, S3, EBS, Kinesis, Lambda,
    and many others.
  prefs: []
  type: TYPE_NORMAL
- en: Basic monitoring for the EC2 service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When an instance is created, seven metrics are pushed out to CloudWatch at a
    frequency of every 5 minutes. You can change this frequency to 1-minute intervals
    for an additional charge. CloudWatch also makes a binary status check available
    as part of their Free Tier. Using this check is an essential measurement to see
    if your instance is up and running. It is not a good check to ensure that your
    application is performing correctly. The status check can be a canary in the coalmine
    for things such as AMI issues, accidentally (or purposefully) terminating an instance,
    or even Availability Zone or regional failures.
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides the status check, there are three standard categories that EC2 metrics
    fall into:'
  prefs: []
  type: TYPE_NORMAL
- en: CPU
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disk I/O
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CPU metrics contain metric data points for CPU usage. This can be one of the
    main metrics that you can use for AutoScaling events while gauging to see if your
    instances are starting to breach their compute capacity. For burstable instances,
    such as the `T` family of EC2 instances, you will also get metric data on `CPUCreditUsage`
    and `CPUCreditBalance`.
  prefs: []
  type: TYPE_NORMAL
- en: Remember
  prefs: []
  type: TYPE_NORMAL
- en: With a burstable performance EC2 type instance, you earn a set rate of CPU credits
    every hour that can accrue until needed. When tasks that require more CPU than
    the baseline are processed by the instance, then that instance will spend its
    CPU credit balance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Almost every service from AWS integrates with CloudWatch metrics. As you build
    and deploy your applications, think of some of the most critical metrics that
    need to be monitored so that you can ensure the basic health of your application
    and your environment. These can include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CPUUtilization` for EC2 instances'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of *errors* for Lambda functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Duration* for Lambda functions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DatabaseConnections` for RDS instances'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DiskQueueDepth` for RDS instances'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NumberOfObjects` for S3 buckets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ActiveConnectionCount` for Elastic Load Balancers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HealthyHostCount` for Elastic Load Balancers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TargetResponseTime` for Elastic Load Balancers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have looked at some of the primary metrics that CloudWatch provides
    for us with a few of the common services, let's look at how we can use custom
    metrics in cloudwatch.
  prefs: []
  type: TYPE_NORMAL
- en: Using custom metrics in CloudWatch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The AWS CloudWatch service not only allows you to watch and monitor the metrics
    coming from the resources themselves, such as CPU, memory, and network usage.
    It also allows you to create custom metrics that can be correlated to the number
    of errors in an application or tied directly to key performance indicators for
    business measurement.
  prefs: []
  type: TYPE_NORMAL
- en: High-resolution metrics in CloudWatch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When monitoring your custom metrics, sometimes, 1-minute intervals just don't
    provide enough granular detail. Using the put-metric-data API, either through
    the CLI or from one of the SDKs, you can publish custom metrics in up to 1-second
    intervals.
  prefs: []
  type: TYPE_NORMAL
- en: If you have an application that can have short-lived spikes whose behavior would
    not be captured by the default 1-minute intervals of CloudWatch metrics, then
    enabling high-resolution metrics allows you this visibility. Also, if you desire
    real-time monitoring, then once again, high-resolution metrics can fulfill this
    need.
  prefs: []
  type: TYPE_NORMAL
- en: After looking at the high-resolution metrics that are available to us, let's
    look at how we can create custom metrics that would be even more useful in our
    own scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom metrics in CloudWatch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CloudWatch metrics allow you to create metrics and namespaces for the items
    that matter to you. These can be incorporated into your scripts by using the SDKs
    available from AWS for your specific language or by using the AWS CLI and the
    put-metric-data command.
  prefs: []
  type: TYPE_NORMAL
- en: You can define metrics for things such as the `ERRORS` instances in a log file
    or track items such as the number of items in a cart at checkout for an e-commerce
    application.
  prefs: []
  type: TYPE_NORMAL
- en: When you create and publish a custom metric, you can either define it as standard
    resolution, and it would be measured in 1-minute intervals, or you can define
    it as a high-resolution metric, and it can be measured in 1-second intervals.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's use a Lambda function to create some custom metrics.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing a custom metric
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Custom metrics can be published from several services, including **AWS Lambda**,
    **Elastic Beanstalk**, **Amazon EC2**, or even container services such as ECS,
    EKS, or Fargate.
  prefs: []
  type: TYPE_NORMAL
- en: For our hands-on example, we will use a Lambda function to create our custom
    metrics and then send them to the AWS CloudWatch service. Our example scenario
    contains some example code where we are trying to track signups from a particular
    marketing campaign. This way, both the marketing department and the executive
    team can instantly know how effective the dollars being spent on this particular
    campaign have been, almost in real time. We are pushing these metrics to a CloudWatch
    metric named `custom_metric`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Lambda code that we will use for our example is located in this book''s
    GitHub repository, in the `Chapter-15` folder, under the filename `cw_events.py`.
    We have also included an abbreviated version of the function that doesn''t include
    the section for CloudWatch events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The steps for creating a custom metric and then sending them to the AWS CloudWatch
    service are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into **Amazon Management Console** and navigate to the **Lambda** service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you're on the **Lambda** service, click on the orange **Create function**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you're on the `Author from scratch`. Under the `custom_metric`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Python 3.8`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Permissions**: Create a new role with basic Lambda permissions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.3 – Basic information for creating the Lambda function'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.3_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.3 – Basic information for creating the Lambda function
  prefs: []
  type: TYPE_NORMAL
- en: Once you have filled out all these options, press the orange **Create function**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the function has been created, go into the `lambda_function.py` file in
    the `chapter-15` directory, replacing what is currently in the `lambda_function`
    tab. Once you have replaced the code, click on the **Deploy** button at the top
    of the code window. Doing so will ensure that the **Changes not deployed** message
    disappears and is replaced with a green **Changes deployed** message:![Figure
    15.4 – Lambda function showing the changes that have been deployed
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_15.4_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 15.4 – Lambda function showing the changes that have been deployed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With our function now created, we can start creating a test event so that we
    can both test the function and see the custom metric appear in the CloudWatch
    metrics. Click on the orange **Test** button to configure the test event. No special
    test data is needed, so just set the event name to **Test** and then click the
    orange **Create** button at the bottom of the dialog window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before we test our function, we will need to give our function one more permission
    – the ability to `PutMetricData`. From the **Lambda** vertical menu, click on
    **Configuration**. Once you're in the **Configuration** settings, click on the
    **Permissions** menu item on the left-hand menu. This should bring up **Execution
    role** in the main window. Click on the **Edit** button to the right-hand side
    of the **Execution role** heading.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will bring you to a **Basic Settings** page. At the bottom of the page,
    underneath the name of your existing role, there should be a link in blue that
    allows you to **View the custom_metric_role** on the **IAM console**. Upon clicking
    this link, a new tab will open for the IAM service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you''re on your role in the `Service`: **Choose** | **CloudWatch**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Actions**: **Filter** | **PutMetricData**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.5 – Adding the inline policy from IAM to our Lambda role'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.5_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.5 – Adding the inline policy from IAM to our Lambda role
  prefs: []
  type: TYPE_NORMAL
- en: Once you have added the extra permission, click the blue **Review policy** button
    at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the policy `PutMetricData` and then click the blue **Create policy** button
    at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have modified our IAM role so that it has the `PutMetricData` permission,
    go back to the tab that contains the Lambda function. You should still be on the
    **Basic Settings** page. Click on the orange **Save** button at the bottom of
    the screen. This will take you back to the main Lambda screen's **Configuration**
    menu. Click on the **Code** tab at the top of the horizontal menu. Now, press
    the orange **Test** button to send the test event to our Lambda function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the `CloudWatch` in the top search bar and right-click on it to open it
    in a new tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the left-hand menu of `custom_metric` in **Custom Namespaces**:![Figure
    15.6 – Our custom metric in Custom Namespaces
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_15.6_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 15.6 – Our custom metric in Custom Namespaces
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **custom_metric** namespace. At this point, we will see our secondary
    namespace; that is, **EMAIL_CAMPAIGN**. Click on this value to be taken to the
    metric data. Check the box next to the **cableTV_spot2** value to see the data
    plotted on the graph. The number will vary since we used a random value in our
    function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With that, we have created a Lambda function that creates and publishes a custom
    metric to CloudWatch metrics. Next, we will look at how to incorporate this custom
    metric, along with others, in CloudWatch dashboards to provide a quick view of
    our environment to ourselves, our team, as well as others.
  prefs: []
  type: TYPE_NORMAL
- en: Using CloudWatch metrics to create dashboards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Looking at individual metrics in CloudWatch can provide many insightful details.
    However, sometimes, it can be more useful to glance at a single pane of glass
    where the most relevant metrics are displayed all at once for a quick view. CloudWatch
    dashboards allow us to quickly and easily create these views – not only of the
    metrics created by the Amazon resources in our account but also custom metrics,
    along with text and hyperlinks to runbooks for documentation purposes in case
    of an emergency or other helpful documentation.
  prefs: []
  type: TYPE_NORMAL
- en: The CloudWatch service even comes with automatic dashboards for many of the
    most used AWS services, such as DynamoDB, EC2, Lambda, S3, EBS, and others. Each
    of these pre-configurated dashboards is interactive and can be viewed based on
    custom date ranges.
  prefs: []
  type: TYPE_NORMAL
- en: You can even share the dashboards that you create with people that don't have
    direct access to your AWS account. This can be done in a few ways. The first is
    by projecting the dashboard on a large screen so that a team of users, or anyone
    who comes into the room where the screen or projection is displayed, can view
    the metrics and graphs that are displayed on the dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: The second method is the built-in ability to share a dashboard with a specified
    email address using both a username and password.
  prefs: []
  type: TYPE_NORMAL
- en: This second way of sharing access to a dashboard can be beneficial when you're
    trying to provide real-time metrics to a stakeholder of a particular project.
    This user may not be incredibly technical but is looking for the correct business
    information to help make decisions. Adding some of the custom metrics that we
    discussed earlier in this chapter allows the business stakeholder to review the
    particular KPIs at their leisure, without requesting a special report to be generated
    for them.
  prefs: []
  type: TYPE_NORMAL
- en: When you create a dashboard in CloudWatch Dashboards, it becomes available globally.
    This is because dashboards are not region-specific.
  prefs: []
  type: TYPE_NORMAL
- en: With that, we've looked at how dashboards can allow us, as DevOps engineers,
    our development team, and even stakeholders of a project, to quickly view what
    is going on with our environment or project. Now, let's go through the hands-on
    process of creating a dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a base dashboard to monitor our resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s use some of the metrics that we created previously and incorporate them
    into a custom dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open **Amazon Management Console** and go to the **CloudWatch** service. You
    may need to log into your account if you have lost your session. Also, make sure
    that you are in the Ohio region (or whatever region you have been using to create
    your resources): [https://console.aws.amazon.com/cloudwatch/](https://console.aws.amazon.com/cloudwatch/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you're in the CloudWatch service, find and click on the **Dashboards**
    menu item at the top of the left-hand menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This should bring you to the **Custom Dashboards** screen. We will start the
    process of creating our dashboard by pressing the orange **Create dashboard**
    button:![Figure 15.7 – The Create dashboard button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_15.7_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 15.7 – The Create dashboard button
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Pressing the `Chapter15`. Then, press the orange **Create dashboard** button
    to close the dialog box and start building the dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A new dialog should appear, asking us to add a widget to our dashboard. We will
    begin with the `Explorer` widget:![Figure 15.8 – Adding a widget to a CloudWatch
    dashboard
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_15.8_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 15.8 – Adding a widget to a CloudWatch dashboard
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start your dashboard off by clicking on the **Number** widget. Scroll down to
    **Custom namespaces** and click on the **custom_metric** namespace. Change **Period**
    from **5** minutes to **1** day so that your dashboard will keep the data. Click
    through the **EMAIL_CAMPAIGN** secondary namespace and check the **cableTV_spot2**
    box. Once this value has been checked, select the orange box labeled **Create
    widget** at the bottom of the dialog window:![Figure 15.9 – Adding the values
    for the Number widget
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_15.9_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 15.9 – Adding the values for the Number widget
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once our number widget has been added, click on the orange **Add widget** button
    to add another widget to our dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the `custom_metric` search term so that we can find the metrics for the
    Lambda function that we created in the previous exercise. Scroll past **Custom
    namespaces** and go to **AWS Namespaces**. You can click on either the **Lambda**
    | **By Resource** or **Lambda** | **By Function** name as they should both have
    the same set of metrics available. Find the **Invocations** metric and select
    the checkbox to the left of the function name. Once you have selected the checkbox,
    click on the orange box and then click on the orange **Create widget** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's add one more widget to our dashboard by clicking the `custom_metric lambda`
    function. This should be named `/aws/lambda/custom_metric`. Use the checkbox to
    select this log group. Once you've selected the log group, click the orange **Add
    to dashboard above** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will back on your dashboard, which should now contain three widgets. Click
    the blue **Save dashboard** button at the top of the dashboard. You now have a
    working dashboard that you can view and share:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 15.10 – The Chapter15 dashboard we created'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.10_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.10 – The Chapter15 dashboard we created
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned how to incorporate our metrics into a dashboard so
    that we can quickly and easily monitor our systems, along with any custom metrics
    that we need to view at a glance, let's look at how we can use CloudWatch to kick
    off event-driven architectures using the **Amazon EventBridge** service.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon EventBridge overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Amazon EventBridge** is a serverless event-driven bus that makes it easy
    to ingest and process data from a variety of sources. These sources include AWS
    services, your applications, and third-party SaaS providers. It removes the discord
    of writing point-to-point integrations between services. EventBridge is a managed
    service from AWS. This means that you don''t need to worry about having to provision
    more or less of the service as your needs fall and rise. The EventBridge service
    takes care of this for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.11 – AWS EventBridge flow from events to targets'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.11_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.11 – AWS EventBridge flow from events to targets
  prefs: []
  type: TYPE_NORMAL
- en: An **Event Source** can be almost any of the AWS services, custom applications,
    or SaaS applications.
  prefs: []
  type: TYPE_NORMAL
- en: For SaaS applications, there is special support for partner applications called
    an **Event Source**. This Event Source provides a logical connection between the
    third-party SaaS provider and your AWS account, without the need to provision
    any cross-account IAM roles or credentials.
  prefs: []
  type: TYPE_NORMAL
- en: '**Event Buses** are the core of the **Event Bridge Service**. There is a default
    event bus to handle AWS service events. Event Buses can be custom-created for
    your application.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have set up an event bus, you can create **rules**. With the use of
    rules, you can match values in the metadata or payload of the event that has been
    inspected by the event bus. The rule then determines which events should get routed
    to which destination:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.12 – An example event and the rule it triggers'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.12_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.12 – An example event and the rule it triggers
  prefs: []
  type: TYPE_NORMAL
- en: Once a rule has been triggered, you can associate one or more **Targets** with
    that rule. Targets are various AWS services such as Lambda functions, Step Functions,
    Kinesis Streams, and ECS or Fargate clusters.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The CloudWatch Events service is now known as Amazon EventBridge. If you had
    used CloudWatch events in the past, then that capability is still available through
    the default event bus in EventBridge.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have looked at the Amazon EventBridge service, let's take a look
    at some of the service limits that are automatically imposed on EventBridge.
  prefs: []
  type: TYPE_NORMAL
- en: EventBridge service limits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you start to build event-driven services with EventBridge, it is a good
    idea to keep the service limits that are initially imposed on the EventBridge
    service in mind. This can help you in cases where you are sending too many events
    to your event bus at the same time. It can also help you as you are building out
    your applications since you know how many event buses and rules are allowed by
    default in a single region:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 15.1 – AWS EventBridge service limits'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17405_Table_15.1.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Table 15.1 – AWS EventBridge service limits
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: All of these limits are soft limits. This means that they can be raised by opening
    a service request ticket with AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand what service limits we are working with, let's look at
    how to build event-driven architectures using AWS EventBridge.
  prefs: []
  type: TYPE_NORMAL
- en: Event-driven architectures with EventBridge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Modern cloud applications are based on decoupled services.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three critical components to event-driven architectures: event producers,
    event consumers, and event routers. The producer is the service or trigger that
    produces the event and then sends it to the router. The router or event bus then
    filters the specific events and sends specific events to event consumers.'
  prefs: []
  type: TYPE_NORMAL
- en: Multiple benefits of event-driven architectures
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you''re using architectures that are decoupled, meaning that each component
    performs a specific task, you are gaining multiple benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.13 – A single service using EventBridge and custom rules to push
    to multiple targets'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_15.13_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.13 – A single service using EventBridge and custom rules to push to
    multiple targets
  prefs: []
  type: TYPE_NORMAL
- en: Using EventBridge to capture AWS service events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can use the EventBridge service to automatically trigger events through
    the use of rules and the default event bus. Let''s start by capturing any time
    an EC2 instance has an instance state change and send that to a log file so that
    we can view the event:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into **AWS Management Console** and navigate to the **CloudWatch** service.
    From the left-hand menu, find and expand the menu for **Events**. In the **Events**
    sub-menu, click on the **Rules** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the **Rules** screen appears in the main window, click on the blue **Create
    rule** button:![Figure 15.14 – The EventBridge Rules page with the Create rule
    button](img/Figure_15.14_B17405.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 15.14 – The EventBridge Rules page with the Create rule button
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We should now be on a screen called **Step 1: Create rule**. Under the **Event
    Source** heading, make sure that the radio button next to **Event Pattern** is
    selected so that we can start building out our pattern.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For our event pattern, use the `EC2 service`. Then, from the **Event Type**
    selection dropdown, select **EC2 Instance State-change Notifications**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We don't want every event from EC2; we only want to know when instances are
    being spun up or terminated. Choose **Specific state(s)** and then select the
    **terminated** and **pending** states for the states of the rule. You will have
    to use the dropdown menu twice to populate both selections. Leave the radio checkbox
    next to **Any instance** in the box:![Figure 15.15 – The EventBridge rule's Event
    Pattern populated
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_15.15_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 15.15 – The EventBridge rule's Event Pattern populated
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we can move on to the right-hand side of *Step 1*, where you can find
    the **Targets** heading. Click the **Add target*** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under this first target, find `EC2_STATE`:![Figure 15.16 – Creating the custom
    log group as our EventBridge target
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_15.16_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 15.16 – Creating the custom log group as our EventBridge target
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Scroll down to the bottom of the page and click the blue button labeled **Configure
    details**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the name of the rule, use `chapt15-ec2`. You can insert a description if
    you like. Once you have filled in the name and the description, click the blue
    **Create rule** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our rule should appear on the `ec2` instances and trigger the rule. Don't close
    your browser window – we're going to want to go back and check on the CloudWatch
    log group afterward.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With your terminal window open, use the `create-instance` command to spin up
    an instance quickly (hopefully, these commands look a bit familiar to you if you
    completed the exercises in [*Chapter 14*](B17405_14_Final_JM_ePub.xhtml#_idTextAnchor366),
    *CloudWatch and X-Ray''s Role in DevOps*):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After about 2 to 5 minutes, we are going to terminate our instance to create
    another event for our rule:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we should wait about another minute or two so that our instance can terminate
    completely. As it starts to terminate, go back to the browser that had **Amazon
    Management Console** open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Amazon Management Console**, we should already be on the **CloudWatch**
    service, so we simply need to find the **Log groups** sub-menu under the **Logs**
    heading and click on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, you should be able to find the custom log group we quickly created, called
    `EC2_STATE`. If you have too many log groups in your region, simply search for
    the term `EC2_STATE`, and it should appear. Click on the log group's name so that
    we can see what EventBridge has generated for us.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now have two log entries in your log group. One will correspond to
    the **pending** event, while the other will correspond to the **termination**
    event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With that, we've learned how to use events that occur in our AWS account and
    the AWS EventBridge service to build out an event-driven architecture. Although
    we only used a simple example in our hands-on exercise, this could be expanded
    to perform actions such as sending out SNS notifications in concert with recording
    a log entry, or even creating a new resource if this was a critical piece of infrastructure.
    Now, let's recap everything that we have learned in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took a deeper look at the **AWS CloudWatch** service. We
    focused on the metrics and what makes up a metric. We looked at the different
    types of metrics available from AWS, starting with basic metrics on the Free Tier,
    then moving on to detailed metrics, and finally learned how to create custom metrics.
    We also learned how to use these metrics to create custom dashboards in CloudWatch
    and discovered how the dashboards could be shared with not only team members who
    had IAM access, but also how they can be shared with others outside of our AWS
    account.
  prefs: []
  type: TYPE_NORMAL
- en: We also looked at **EventBridge**, the service that has taken over CloudWatch
    Events. We learned how using event buses for AWS services, custom application
    events, and even SaaS providers can help drive event-driven architectures.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to look at the various types of logs that
    can be generated from the different Amazon services. This includes VPC Flow Logs,
    Elastic Load Balancer logs, CloudTrail logs, and how these logs can help us troubleshoot
    issues with our application or security incidents.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have been hired by a company to help develop an e-commerce application on
    AWS. The stakeholders of the company want to know how many orders have been placed
    via this application with second-level granularity. To get this information, you
    will need to create a custom CloudWatch metric using the AWS CLI. You know that
    by default, custom metrics have a 1-minute granularity. How can you get the application
    to send the custom metric in sub-minute intervals?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Use the AWS CLI `put-metric-data` command to publish the data and set the
    `StorageResolution` option to `1` second to specify the metric as a high-resolution
    metric.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'b. Update the CloudWatch agent config file and then add `line high-resolution:
    true`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Go to the graph in the CloudWatch service on the Amazon Management Console
    and set the resolution to 1-second intervals.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Add the `flag –dimensions=1` to the AWS CLI `put-metric-data` command to
    specify a high-resolution metric.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You are currently working for a mid-sized e-commerce company that has built
    a serverless shopping cart system using AWS Lambda and DynamoDB. An executive
    for the company has asked you to create and share a dashboard with some of the
    board of directors, showing the number of purchases per cart and the number of
    abandoned purchases per cart. The board members do not currently have IAM accounts.
    How can you give the board members real-time access to the data as simply and
    cost-effectively possible?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Use social logins with Amazon Cognito. Have Cognito assume a role that has
    access to the specific dashboard so that the board members have access.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Create IAM users for each of the board members. Create an IAM group that
    has access to CloudWatch dashboards but has a condition to show only the ARN of
    the specific dashboard that they need to see.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Gather the emails of the board members. Share access to the CloudWatch dashboard
    via a username and password using the email access feature.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Gather the emails of the board members. Incorporate SAML for the CloudWatch
    dashboards. Allow the board members to use single sign-on to access the specific
    dashboard.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Review answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: a
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: c
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
