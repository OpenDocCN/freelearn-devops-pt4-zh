- en: 'Chapter 20: Enforcing Standards and Compliance with System Manger''s Role and
    AWS Config'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Systems Manager is a service comprising multiple individual capabilities grouped
    into five categories: Operations Management, Application Management, Change Management,
    Node Management, and Shared Resources. Learning to use this tool effectively can
    make you, as a DevOps professional, much more efficient, especially when implementing
    standards and checking for compliance in one or multiple AWS environments or accounts.
    And as automation and compliance demands increase from organizations, having a
    tool that can check for compliance, alert against discrepancies, and remediate
    violations can be essential in preventing environmental drift.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The various capabilities of AWS Systems Manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using runbooks in Systems Manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS Config essentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The various capabilities of AWS Systems Manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DevOps is a marriage of two responsibilities: development and operations. AWS
    **Systems Manager** (**SSM**) focuses on the operations part of those responsibilities,
    giving you a vast array of tools to use for everyday operations tasks. These tools
    range from creating predefined runbooks to quickly, easily, and repetitively performing
    functions on your instances, whether they''re Linux or Windows instances. Systems
    Manager can also provide you with an interface to track your resources or groups
    of resources from a common place.'
  prefs: []
  type: TYPE_NORMAL
- en: As an added benefit, Systems Manager not only helps with your instances in the
    AWS Cloud, but it can also help manage your servers on-premises by installing
    the lightweight agent on those servers and allowing that agent to communicate
    back to the AWS account.
  prefs: []
  type: TYPE_NORMAL
- en: Key features and benefits of Systems Manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Systems Manager is not just one service; instead, it is a whole set of tools
    for you to use. You may not use all of its capabilities, but knowing them can
    help when you are looking to solve a problem quickly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 20.1 – An overview of many of the critical components that make up
    Systems Manager'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_20.1_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 20.1 – An overview of many of the critical components that make up Systems
    Manager
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have looked at some of the capabilities that Systems Manager provides,
    let's dive deeper into managing our instances and nodes more effectively with
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Node management with Systems Manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Systems Manager provides many capabilities to operations team members, but there
    is a whole category of items that specifically fall into the category of **Node
    management**.
  prefs: []
  type: TYPE_NORMAL
- en: We will look at some of the specialty services in AWS Config that have been
    created for the express purpose of node management.
  prefs: []
  type: TYPE_NORMAL
- en: Fleet Manager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Knowing all the different instances that you are controlling at once can be
    an overwhelming task. SSM Fleet Manager provides you with a user interface to
    see all the instances in which you are in control. Fleet Manager also allows you
    to gather data from those instances to relay back without ever having to go into
    the servers or instances individually.
  prefs: []
  type: TYPE_NORMAL
- en: Inventory
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you need visibility into either your on-premises servers, your Cloud EC2
    instances, or both, then the **Inventory** capability of Systems Manager can be
    extremely useful for you.
  prefs: []
  type: TYPE_NORMAL
- en: Hybrid activations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have servers that are not on the AWS cloud or on-premises, you can use
    SSM **Hybrid Activations** to manage both those devices, along with other EC2
    instances that need to be managed in a single management console. The hybrid activations
    capability helps walk you through the prerequisites required to create an activation
    on an on-premises server. This includes creating an IAM service role, ensuring
    that the operating system is compatible, and installing the Systems Manager agent.
  prefs: []
  type: TYPE_NORMAL
- en: Session manager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Managing all the different PEM keys, for instance, especially when developers
    create their own keys, can be a burdensome task. **Session Manager** helps ease
    this burden by allowing authorized users to use a web-based console to perform
    commands without the need to have a copy of the key. Instead, you can find the
    name of the machine that you need to create a session remotely and then instantly
    start a session.
  prefs: []
  type: TYPE_NORMAL
- en: We will go through an exercise that covers using the Session Manager capability
    later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Run command
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the **run command** capability of Systems Manager, you can securely update
    the configuration of your registered managed instances. **Command documents**
    are created for the run command to execute. Commands are then run for specified
    targets of managed instances using either instance IDs or tags.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: You should always test the run commands that you create on non-production or
    test instances. This way, you can make sure that the command is going to perform
    the way you expect before enacting the commands or servers taking on production
    traffic.
  prefs: []
  type: TYPE_NORMAL
- en: State manager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Systems manager''s **State Manager** allows you to perform the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: You can configure network settings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can have your instances join a Windows domain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It allows you to install software at instance startup using bootstrap scripts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It lets you run scripts on Windows-, Linux-, or even macOS-managed instances
    throughout their life cycle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patch manager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are not running immutable infrastructure in your environment, then you
    should have a strategy to keep your instances up to date system patches. Patch
    manager allows you to add these system patches on a maintenance schedule.
  prefs: []
  type: TYPE_NORMAL
- en: Running remote commands on an EC2 instance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Previously, if you wanted to run a remote command on an EC2 instance, then you
    had to create a PEM-encoded key. SSM Session Manager changes all of this as it
    allows you to log in to an instance using a web browser using a role that has
    the correct permissions instead of managing and rotating keys.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**PEM** stands for **Privacy-Enhanced Mail**, but this is just extra knowledge,
    and knowing the definition of PEM will not be a requirement for the exam.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll see how this works in the following exercise. Before we can go about
    using Systems Manager to remotely access an instance, we need to set up an IAM
    role that will allow the SSM service permissions to access any instance that has
    that role. Luckily for us, AWS already has a managed IAM policy that contains
    all of the permissions that we need to accomplish this task; however, we still
    need to create a role that we can attach to our EC2 instance. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your browser and go to the Amazon web console, navigating to the IAM service:
    [https://console.aws.amazon.com/iam/](https://console.aws.amazon.com/iam/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the left navigation bar, choose **Roles** and then press the blue **Create
    Role** button in the mainframe once it appears.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Select type of trusted entity** page, make sure that **AWS service**
    is selected.![Figure 20.2 – Selecting AWS service as the type of entity when creating
    a role
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_20.2_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 20.2 – Selecting AWS service as the type of entity when creating a role
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then, from the list of common use cases, find **EC2** and click on it to select
    it. Once selected, you can click the blue **Next: Permissions** button located
    at the bottom right of the page.![Figure 20.3 – Common use cases when creating
    a role in IAM'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_20.3_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 20.3 – Common use cases when creating a role in IAM
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now that you''re on the **Attach permissions policies** page, in the search
    box in the middle of the screen, search for the policy named *AmazonEC2RoleforSSM*.
    Select the box next to the policy once it appears in the search results. Once
    selected, you can click the blue **Next: Tags** button to continue.![Figure 20.4
    – Adding a managed permission policy to the IAM role'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_20.4_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 20.4 – Adding a managed permission policy to the IAM role
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'On the **Add Tags** page, just select the **Next: Review** button at the bottom
    of the page since we are not adding tags to this role.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the `Remote2EC2SSM`. You can change the role description if you like to something
    that is more fitting of what the role allows. Once you have made these updates,
    click the blue **Create Role** button at the bottom of the page. Great! Your role
    should now be created.![Figure 20.5 – Adding the role name and description
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_20.5_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 20.5 – Adding the role name and description
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With our role created, we can start creating a temporary EC2 instance that we
    will use for testing the capabilities of SSM.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Find the **Services** menu item on the left-hand side of the top menu. Click
    on the word **services** to bring up the drop-down menu, which will show all the
    AWS services. Click on **EC2**, which should be near the top, under the **Compute**
    heading, to be taken to the **EC2** service page.![Figure 20.6 – EC2 service page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_20.6_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 20.6 – EC2 service page
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you're on the **EC2** page, find the **Launch instance** section in the
    middle of the page. Click on the orange **Launch instance** button inside this
    section to begin launching your instance. When you click on that button, you will
    be presented with two options; choose the option labeled **Launch instance**.![Figure
    20.7 – Launching an EC2 instance from the main EC2 page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_20.7_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 20.7 – Launching an EC2 instance from the main EC2 page
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now you should be on a page where you should be able to select the AMI that
    you want to use. Select any **Amazon Linux** or **Amazon Linux 2** version dated
    2017.09 or later as it will contain the AWS SSM agent already preinstalled. Click
    the blue **Select** button to choose your image.![Figure 20.8 – Amazon Linux 2
    on the AMI selection page
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_20.08_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 20.8 – Amazon Linux 2 on the AMI selection page
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We won''t need much computing power for our test, so we can use a **t2.small
    instance**. Click on the gray **Next: Configure Instance Details** button as we
    need to ensure that we attach our role to our instance.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you''re on the `Remote2EC2SSM`, and choose this value for the field. Once
    you have done this, click on the gray **Next: Add Storage** button.![Figure 20.9
    – Choosing the Remote2EC2SSM role while configuring our EC2 instance'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_20.9_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 20.9 – Choosing the Remote2EC2SSM role while configuring our EC2 instance
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There is nothing to change on the `name` as the key and `Remote` `Test` as the
    value. Make sure that you capitalized the *N* in Name, otherwise, it will not
    set the value of the name of the instance correctly and only set a tag and value
    pair. Once you have set the key-value pair, you can click on the blue **Review
    and Launch** button at the bottom of the page.![Figure 20.10 – Setting the Name
    for the instance using tags
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_20.10_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 20.10 – Setting the name for the instance using tags
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the **Review Instance Launch** page, click the blue **Launch** button at
    the bottom of the page. This will bring up a dialog about which key pair you would
    like to use. However, we are going to clear out the values from the top drop-down
    menu so that the value that is selected reads **Proceed without a key pair**.
    Click on the box to acknowledge that you are proceeding without a key pair, and
    then click the blue **Launch instances** button to start your EC2 instance.![Figure
    20.11 – Launching our EC2 instance without a keypair
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_20.11_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 20.11 – Launching our EC2 instance without a key pair
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that our instance has started launching, we have finished all the prerequisites
    for this exercise. We can now move on to the Systems Manager service in the AWS
    Console to log in without the key and perform the command(s).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the search bar at the top of the AWS Management Console, type in *Systems
    Manager* and click on the menu item when it appears in the list:![Figure 20.12
    – The Systems Manager service as it appears from searching on the AWS Management
    Console](img/Figure_20.12_B17405.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 20.12 – The Systems Manager service as it appears from searching on the
    AWS Management Console
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you're on the **Systems Manager** service page, find the **Node Management**
    heading on the left-hand menu. Under this heading, click on the menu item named
    **Session Manager**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the main **Sessions Manager** page appears, click on the orange **Start
    a session** button at the top right-hand side of the main window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we are on the `Remote Test` when we created the instance earlier. Click
    on the radio button next to the instance's name to select this instance and then
    click the orange **Start session** button to remotely access the instance without
    using a PEM key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A new tab or browser window will appear once the `ssm-user`. This is the user
    that the Systems Manager Sessions Manager connects to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You just saw how Session Manager can make accessing instances much more accessible
    from an operations perspective. You no longer have to create and manage keys for
    your instances. However, let's talk about some of the issues that need to be taken
    into consideration when using Sessions Manager.
  prefs: []
  type: TYPE_NORMAL
- en: Using runbooks in Systems Manager
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since we already have a managed instance up and running, we can create a runbook
    in AWS Systems Manager to see how easy it is to execute commands on one or a thousand
    instances, all with the single click of a mouse remotely.
  prefs: []
  type: TYPE_NORMAL
- en: Before we start, the `clamav.json` scripting file, which we will use for our
    runbook, is going to be available in the `Chapter-20` folder of this book's GitHub
    repository. Since the file is not extremely long, we will also be showing it throughout
    this exercise as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'This exercise also builds upon the previous exercise, so if you wish to complete
    this exercise but did not do the *Running remote commands on an EC2 instance*
    exercise, then you will need to set up your environment by going through steps
    1 to 14 in the previous exercise. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: If you have previously logged out of your AWS Management Console, log back in
    as your administrative user and navigate to the **Systems Manager** service, either
    through the top search bar or via the **Services** dropdown in the top left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will need to create a document for Systems Manager to run. Although several
    predefined run documents are created by AWS, we will create a custom document.
    From the left-hand navigation menu of the **Systems Manager** service, under the
    **Shared Resources** header, click **Documents**.![Figure 20.13 – The Documents
    menu item on the Systems Manager service
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_20.13_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 20.13 – The Documents menu item on the Systems Manager service
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we're on the **Documents** page, we will need to find the orange **Create
    document** button at the top right-hand side. When you click on it, two options
    should appear. Choose the **Command or Session** option.![Figure 20.14 – The Create
    document button showing the two different options
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_20.14_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 20.14 – The Create document button showing the two different options
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once the `Linux_ClamAV_Installer`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Target type**: Leave this value blank.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Document**: **Command document**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 20.15 – The Document details page when creating the document'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_20.15_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 20.15 – The Document details page when creating the document
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom of the **Create document** page will be the **Content** section.
    This is where we load the script that we want to run for our run command. You
    can either cut and paste the script from the **clamav.json** script that you downloaded
    at the beginning of this exercise, or you can type in the script, as shown here.
    Once the script is in the content box, press the orange **Create document** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After pressing the **Create document** button, you will be taken back to the
    main documents page. Here, you should see a green banner at the top of the page,
    confirming that your document was created successfully. If you would like to quickly
    and easily find the document that you just created, click on the middle tab of
    the top menu labeled **Owned by me**. At this point, you should be able to see
    your document.![Figure 20.16 – The notification showing that your document was
    created successfully
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_20.16_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 20.16 – The notification showing that your document was created successfully
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With our document created, we can find the **Run Command** menu item underneath
    the **Node Management** heading from the left-hand set of menu options. Click
    on **Run Command** to be taken to the **Run Command** capability.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Run Command** capability screen, click on the orange **Run command**
    button at the top right of the main window to start the process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the command document to run, we are going to run the document that we just
    created. You can find it by typing `Linux` in the search box. Use a radio button
    to select an instance of the document. We will just leave the default version
    (1) selected since we only have one version of the document.![Figure 20.17 – Finding
    the document that we created based on a search term
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_20.17_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 20.17 – Finding the document that we created based on a search term
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the **Targets** section, we will choose our instances manually since the
    only tag we used when spinning up our instance was the name tag. When you click
    on **Choose instances manually**, if you don't see the instance, then type the
    name of your instance; that is, *Remote Test*. Choose the selection box next to
    the instance's name.![Figure 20.18 – Choosing the target instance to run the command
    on
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_20.18_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 20.18 – Choosing the target instance to run the command on
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For the `devopspro-beyond`. Once you have chosen your bucket, you can click
    the orange **Run** button at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you start the run command, you should be taken to a screen where you can
    see your instance and the status of *in progress* as the command runs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After a few minutes, you should see success after the command has run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have learned how to run remote commands on multiple instances, let's
    look at some of the use cases for AWS Systems Manager.
  prefs: []
  type: TYPE_NORMAL
- en: Use cases for Systems Manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Systems Manager can help with your day-to-day operations management tasks in
    numerous ways. Let's take a look at some real-world use cases for Systems Manager.
  prefs: []
  type: TYPE_NORMAL
- en: You need to make sure that the EC2 instances running in your AWS account stay
    up to date with security patches.
  prefs: []
  type: TYPE_NORMAL
- en: If you have a compliance or security requirement that all the security patches
    that are released must be installed in a specific timeframe, such as 7 days from
    release, then this can be a daunting task without automation. This is especially
    the case if you are not using immutable infrastructure and are maintaining long-running
    instances that need to be updated.
  prefs: []
  type: TYPE_NORMAL
- en: When using the **Maintenance Windows** service, which is part of SSM, you can
    assign a maintenance window to a group of resources that would be out of their
    primary task schedule and then combine this with the **Patch Manager** service
    to install the security patches. This combination works with both Linux and Windows
    operating systems. It will also work for on-premises servers that have the SSM
    agent installed.
  prefs: []
  type: TYPE_NORMAL
- en: One of the keys to success in this is making sure that you have the correct
    tags on your instances so that you can group the resources according to tags.
    With Maintenance Windows, you can combine tags when making your resource group
    that only target the specific types of instances that you are planning to patch.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned how we can manage many of our operations tasks and
    help keep our resources in a compliant state using AWS Systems Manager, we will
    move on to the AWS Config service. With AWS Config, we will learn how we can constantly
    record the history of our environment, visually see what has changed, and even
    proactively remediate items that don't comply with the rules we have set for our
    account.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Config essentials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In most cases, the resources in an AWS account are constantly changing in one
    form or another. Instances are being started and stopped, along with being created
    and destroyed. Security settings are changing as users turn ports on and off to
    allow the correct protocols for communication.
  prefs: []
  type: TYPE_NORMAL
- en: The AWS Config service allows you to gain a comprehensive view of what happens
    in your AWS account. It also lets you see how things change over time.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the AWS Config service, the following capabilities are presented to you:'
  prefs: []
  type: TYPE_NORMAL
- en: You can assess the AWS resource configurations to see whether they conform to
    the desired settings for the account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to save the current configuration settings as a snapshot for supported
    resources.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can retrieve the historical configuration for just one or even multiple
    supported resources.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can set up the ability to receive notifications when resources are created,
    deleted, or modified.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gain a view of the relationships that exist between resources.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another value that Config provides is that you can use common predefined rules
    or even write your own rules to check your environment for compliance.
  prefs: []
  type: TYPE_NORMAL
- en: Concepts to understand about AWS Config
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we dive into the AWS Config service, let's look at some of the key terms
    and concepts that will be discussed.
  prefs: []
  type: TYPE_NORMAL
- en: AWS Resources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The entities that you create and manage either from the AWS Management Console,
    the CLI, or any of the SDKs available, are **AWS Resources**. These can include
    EC2 instances, EBS volumes, DynamoDB tables, RDS instances and security groups,
    S3 buckets, SNS topics, and much more. AWS Config uses the **Amazon Resource Name**
    (**ARN**) to identify each of the unique resources. For a complete list of supported
    resources, visit [https://docs.aws.amazon.com/config/latest/developerguide/resource-config-reference.html](https://docs.aws.amazon.com/config/latest/developerguide/resource-config-reference.html).
  prefs: []
  type: TYPE_NORMAL
- en: Configuration Recorder
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you run the AWS Config service, the **Configuration Recorder** is what saves
    and stores the values and changes of the various supported AWS Resources as configuration
    items. Before it can start recording, however, the Configuration Recorder must
    be created and then started.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration History
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you want to understand what changes have been made to a particular supported
    AWS Resource and when they occurred, then you can use the **Configuration History**.
    The Configuration History is a cumulation of data (configuration items) for a
    specific resource over any period in which the configuration recorder has been
    running.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration Snapshot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unlike the name somewhat implies, a **Configuration Snapshot** is not a graphical
    picture in time of configuration items. Instead, it is a code-based recording
    of how your supported resources and their different settings are used at a particular
    point in time. These snapshots can be saved in a designated S3 bucket so that
    they can be retrieved or compared with future or past configuration snapshots.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration Items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Point-in-time views for supported AWS resources are captured as **configuration
    items**. The information that's captured includes attributes, metadata, current
    configuration, relationships, and related events.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have an understanding of the concepts and pieces that AWS Config
    uses, let's take a deeper look at how AWS Config works.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how Config works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After starting the service, AWS Config starts to scan for supported resources
    within the account. As it finds these resources, it produces a configuration item
    for each one.
  prefs: []
  type: TYPE_NORMAL
- en: As those resources change, a new configuration item is then generated and recorded
    by the config recorder.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 20.19 – Understanding the workflow of AWS Config'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_20.19_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 20.19 – Understanding the workflow of AWS Config
  prefs: []
  type: TYPE_NORMAL
- en: If you have enabled rules for the Config service to evaluate, then the Config
    service will continuously check the configuration items against the rules. If
    an item does not meet the criteria of a rule, then the lambda that is associated
    with that rule will be triggered, and the associated action will be taken.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if a company has enabled a mandate that all EBS data volumes must
    be encrypted, regardless of whether they are deployed from CloudFormation, the
    CLI, an SDK, or created by hand, then a simple rule in AWS could be created to
    send a notification to an SNS topic that contains an email group list once an
    offending volume has been found.
  prefs: []
  type: TYPE_NORMAL
- en: A more complex rule could be created that not only pushes out the notification
    to the SNS topic but also uses one of the AWS SDKs programmed in the corresponding
    lambda function for the rule, which would terminate any created EBS volume that
    was encrypted upon creation.
  prefs: []
  type: TYPE_NORMAL
- en: As your Config item history is compiled, you can view both the inventory of
    the resources that AWS has discovered, as well as view the compliance history
    for any particular AWS resource.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Config rules, then resources can be constantly checked whenever
    changes happen. They can also be set to be checked on timed intervals, such as
    every 12 or 24 hours.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a good understanding of how AWS Config works, let's try it
    out for ourselves with the next exercise so that we can get some hands-on experience.
  prefs: []
  type: TYPE_NORMAL
- en: Standing up AWS Config – a practical example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To see how the AWS Config service works, we will stand up a configuration recorder
    along with two rules that will check our account. Once the recorder has been stood
    up and then turned on, we can go back after a while to see its findings.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Since we are using a CloudFormation template to stand up our Config recorder,
    we can easily take it down once we are done with it. If you were to stand up the
    Config recorder from the AWS Management console, it would be challenging to take
    down the default Config recorder and reset everything back to zero if needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we begin, make sure that you have downloaded the CloudFormation template
    named `configTemplate.yml` from this book''s GitHub repository, under the `Chapter-20`
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your browser and log in to your AWS account using the Administrator user.
    After logging in, navigate to the CloudFormation service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the top right-hand corner, click on the **Create Stack** button. Once pressed,
    choose the **With new resources** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the following options on the `configTemplate.yml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After using these options, click on the orange **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will be presented with all the parameters on the `MaximumExecutionFrequency`:
    `One_Hour`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have filled in these parameters, click the orange **Next** button.
  prefs: []
  type: TYPE_NORMAL
- en: After clicking the initial **Next** button when creating the stack, you will
    be taken to the **Configure stack options** page. Just click the orange **Next**
    button at the bottom right of the page to continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you're on the **Review** page, at the bottom of the page, you will need
    to check the box in the **Capabilities** section, acknowledging that the stack
    may create IAM resources. Once you have done this, click the orange **Create Stack**
    button to start the creation of the Config recorder and rules via CloudFormation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In less than 5 minutes, the resources should have been created, including the
    Configuration Recorder, a new S3 bucket to capture the configuration snapshots,
    and an SNS topic especially for notifications from the AWS Config service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, use the search bar in the middle of the AWS Management Console to search
    for the Config service. Once the icon appears, click on it to be taken to that
    service:![Figure 20.20 – The AWS Config service icon from the search results
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_20.20_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 20.20 – The AWS Config service icon from the search results
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the **AWS Config** dashboard, which should be the first screen you see
    as you are taken to the service, we will see our compliance status right away.
    From our CloudFormation template, we enabled two rules automatically. These rules
    on my demo account are already showing to be in compliance. However, if you did
    not put an MFA on your root account, then it may show that you are out of compliance
    with one or more of the Config rules.![Figure 20.21 – The compliance status on
    the AWS Config dashboard
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_20.21_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 20.21 – The compliance status on the AWS Config dashboard
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To view the rules that we currently have in AWS Config, simply go to the **Rules**
    item via the left menu. Once we click on this item, we should see the names of
    the two rules that were loaded with the template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If we want to look at the resources in our account that AWS Config can check,
    we can go to the **Resources** menu item. Once **Resource Inventory** has loaded
    on the main screen, under the **Resource** category dropdown, change the selection
    to **AWS resources**. This will allow you to see the AWS items in your account
    that Config can keep track of.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On any of these resources, click on the blue **Resource Identifier** button
    to be taken to the **Resource details** page. If you would like to see the timeline
    of how the resource has changed over time, go to the top-right corner of the **Resource
    details** pages. Here, you will see a button labeled **Resource Timeline**. Clicking
    on this button will bring up the timeline interface, showing how the resource
    has changed over time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I would suggest that you leave the Config recorder up for a day or so while
    you make a few changes to different resources in your account. Remember to take
    down the Config recorder via the CloudFormation template; otherwise, you will
    incur the charges of the AWS Config service.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned how to stand up a Config recorder and enable some rules
    in our AWS account, let's take a deeper look at what different types of rules
    are available from AWS Config.
  prefs: []
  type: TYPE_NORMAL
- en: The Config rule structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AWS Config can constantly check the compliance of your AWS resources by using
    **Config rules**. These rules portray the ideal state of how your resources should
    be constructed.
  prefs: []
  type: TYPE_NORMAL
- en: You can use Config rules to help determine how your environment and resources
    conform to industry guidelines, internal best practices, and specified policies
    you need to enforce.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rules can be run on a few different types of triggers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Configuration changes**: When the config service detects that a change has
    been made to the resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Periodic checks**: The Config service runs on a regular schedule such as
    every 3 hours or every 24 hours, looking for changes to the resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managed rules versus custom rules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are lots of predefined rules that have already been designed by Amazon
    to use on many of the most common use cases. These rules can be checking resources,
    such as whether EBS volumes are encrypted or whether certain ports have been opened
    to allow traffic to flow.
  prefs: []
  type: TYPE_NORMAL
- en: These managed rules can be customized with extra items for remediation.
  prefs: []
  type: TYPE_NORMAL
- en: Custom rules can be created for any resource or policy that your organization
    needs checking and or enforcement on.
  prefs: []
  type: TYPE_NORMAL
- en: Using both managed and custom rules, you can automatically keep your organization
    in the state of compliance that it desires.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned how to use both Config and SSM to help keep our AWS
    account in compliance, let's review what we have learned in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at some of the tools that can help make the operations
    part of our DevOps role easier. This included AWS Systems Manager, which, in and
    of itself, provides a variety of services to help you accomplish tasks. These
    range from being able to quickly create a session on a remote instance to creating
    repeatable processes and installing software or gathering files from an instance.
    We also learned that Systems Manager works with both compute instances in the
    cloud as well as servers on-premises.
  prefs: []
  type: TYPE_NORMAL
- en: We also examined the AWS Config service. We saw how it can keep a timeline of
    the state of supported AWS resources. We also looked at how Config rules work
    and how they can be used to flag resources that don't meet the standards we have
    set for our organization.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at using Amazon Inspector. This is a service
    that helps you proactively find security vulnerabilities in your account.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have been asked by a company to configure EC2 instances so that they can
    be managed by AWS Systems Manager. The company is using a distinct version of
    Linux for their base Amazon Machine Image. What actions will ensure that once
    the instance is launched from this AMI, it will be able to be found in the Session
    Manager console? (Choose two answers)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the Systems Manager Agent as part of the base AMI.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a key pair named `ssm-user` and use this key pair when launching the
    instance.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that any Security Group that the instances are associated with allow
    traffic from port `22`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an instance role to any launched instance that allows Systems Manager permissions.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The company you have been working with is asking for a weekly report of the
    top five operating systems that are being used across the EC2 instances in the
    two regions where they are currently operating their production systems. What
    is the quickest and most cost-effective way to get them this information?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use Amazon Athena to gather the CloudTrail data about all running instances.
    Create a report in QuickSight that will display a graph and detailed data of the
    top five operating systems per region. Share this report with the stakeholders
    who have requested it.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure all the instances have instance profiles that allow access by the
    Systems Manager service. Use Systems Manager Inventory to create a report that
    shows the top five operating systems for each region.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the EC2 instances console to group all instances by operating systems. Create
    a report from the sorted data.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a lambda function that uses the CLI to call the operating system type
    of all EC2 instances. Have this output sent to an S3 bucket to be downloaded by
    the stakeholders.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The security department of an e-commerce company has put in force a new company
    policy that no web traffic may travel over non-secure HTTP, or port `80`. Any
    traffic that was previously allowed on port `80` must now be redirected to port
    `443` using a secure certificate. Any security groups found open to port `80`
    will be in violation of this new policy and suspended immediately. What is the
    best way to regularly monitor whether any security group is allowing traffic to
    enter port `80`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use Trusted Advisor to scan for insecure security groups that have been created.
    Set up an SNS topic where Trusted Advisor can send the notifications.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a network ACL rule to all VPCs that blocks traffic from entering port `80`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Use CloudTrail logs to determine whether any security group has opened port
    `80`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up a rule in AWS Config that checks for traffic being allowed on port `80`
    on any security group. If a security group is found in violation, send a notification
    to the security department's SNS topic.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Review answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: a and d
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: b
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: d
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
