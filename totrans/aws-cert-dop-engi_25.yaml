- en: 'Chapter 21: Using Amazon Inspector to Check your Environment'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Amazon Inspector allows you to make security testing a regular part of development
    and **Information Technology** (**IT**) operations. As **Development Operations**
    (**DevOps**) makes the shift left to **Development Security Operations** (**DevSecOps**)
    and security responsibilities fall more to developers, using tools such as Amazon
    Inspector can help to form a more proactive approach to your and your organization's
    security posture.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Amazon Inspector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the Inspector agent both manually and automatically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Amazon Inspector
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Amazon Inspector** enables you to analyze the behavior of your **Amazon Web
    Services** (**AWS**) resources and helps you identify potential security issues.
    With Amazon Inspector, you can run automated assessments over any or all applications
    you are hosting in the AWS cloud, based on hundreds of rules created by AWS security
    experts. These rules look for vulnerabilities as well as deviations from the best
    practices. After performing an assessment, Amazon Inspector delivers a detailed
    list of findings, which are categorized by their level of severity. The process
    is illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 21.1 – The Amazon Inspector process'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_21.1_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 21.1 – The Amazon Inspector process
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing this, the assessments that Amazon Inspector can perform
    are contained to only those on Amazon **Elastic Compute Cloud** (**EC2**) instances.
  prefs: []
  type: TYPE_NORMAL
- en: Since we have just had an overview of Amazon Inspector, let's look at how we
    can get started with the Amazon Inspector service.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Amazon Inspector
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started with Amazon Inspector, there are three initial steps to take,
    outlined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Install the **AWS Inspector agent** on the **Amazon EC2** instances that you
    wish for Inspector to scan.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It's both a good idea and a good practice to tag the instance(s) with a unique
    tag so that you can add these instances to a specific assessment target for an
    assessment run.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create an assessment target, which is a collection of the AWS resources that
    you want Inspector to examine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an assessment template that serves as a blueprint for your assessment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run an assessment on your target.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review your findings and remediate any security issues.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are ways to incorporate other AWS services into the mix as well. You can
    configure a **Simple Notification Service** (**SNS**) topic to send out notifications
    to a particular email address or distribution group once a finding report has
    been published. There are also ways to have **Lambda** functions automatically
    kick off Inspector scans either periodically, using **CloudWatch** events, or
    whenever a particular event happens, such as the creation of a new **Amazon Machine
    Image** (**AMI**).
  prefs: []
  type: TYPE_NORMAL
- en: We just looked at how to get started with Amazon Inspector and even took a high
    overview of how some of the other AWS services could be brought in to be incorporated
    with Inspector assessments. Let's now look at some real-world use cases with Amazon
    Inspector.
  prefs: []
  type: TYPE_NORMAL
- en: Use cases for Amazon Inspector
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Companies are using Amazon Inspector both as a standalone service and by integrating
    Amazon Inspector into their DevOps pipelines to ensure that instances are free
    from vulnerabilities, especially in their production environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of companies working in regulated industries, such as those that
    need to comply with **Health Information Portability and Accountability Act**
    (**HIPAA**) guidelines or **Payment Card Industry Data Security Standard** (**PCI
    DSS**) scanning for vulnerabilities. Amazon Inspector''s assessment reports provide
    not only a trail of which vulnerabilities have been found, but they can also show
    a timeline of what has been fixed by comparing past reports. The following diagram
    shows Inspector being used in a **Continuous Integration/Continuous Deployment**
    (**CI/CD**) pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 21.2 – Inspector in a CI/CD pipeline'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_21.2_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 21.2 – Inspector in a CI/CD pipeline
  prefs: []
  type: TYPE_NORMAL
- en: As the preceding diagram shows, Amazon Inspector can also be added as a vulnerability
    assessment to a CI/CD pipeline as one of the final checks before creating a final
    AMI. This final AMI can either be used as a golden image or just a versioned image
    for an application. If Inspector has findings in this pipeline setup, the build
    is failed, and any issues need to be remediated before being passed on to the
    final stage where an image is created.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we see how Amazon Inspector is being used in the real world, let's
    see how we can install the Amazon Inspector agent so that we can perform our own
    assessments.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Inspector agent both manually and automatically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `run` command feature to automatically install the Inspector agent on the
    instances in which we want the Inspector service to look for vulnerabilities.
    The third way is to incorporate a simple script into the user data so that the
    agent will be installed during the launch of the instance. These three methods
    are depicted in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 21.3 – Three ways to install the Inspector agent'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_21.3_B17405.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 21.3 – Three ways to install the Inspector agent
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have seen how to install the agent, let's go through the exercise
    of spinning up some instances and using Systems Manager to install the agent.
  prefs: []
  type: TYPE_NORMAL
- en: Using Amazon Inspector hands-on
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following hands-on exercise, we are going to launch two instances at
    the same time and provide them with a tag of `Inspector` and a value of `TRUE`.
    Since we are going to be using the `run` command option from Systems Manager,
    we are going to need to have an **Identity and Access Management** (**IAM**) role
    that allows access to our instances. The good news is that we have previously
    created this role in our exercise for [*Chapter 14*](B17405_14_Final_JM_ePub.xhtml#_idTextAnchor366),
    *CloudWatch and X-Ray's Role in DevOps*. If you never completed this exercise
    and you would like to perform it, then you will need to go back and create this
    role before starting this exercise.
  prefs: []
  type: TYPE_NORMAL
- en: We will start off by creating two instances in our group, one of which will
    be of the Ubuntu 16.04 `chapter 21` GitHub repository resources. The script to
    install the SSM agent once again is called `agents.sh`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We just went through how to set up the Amazon Inspector agent using a Systems
    Manager `run` command. We also conducted an Inspector assessment. Next, we will
    see how to ingest the findings contained in the assessment report, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up your terminal so that we can start our commands. Make sure that in
    the directory you are working in, you have either made a copy of the `agents.sh`
    script from where you originally created it when you did the exercises in [*Chapter
    14*](B17405_14_Final_JM_ePub.xhtml#_idTextAnchor366), *CloudWatch and X-Ray''s
    Role in DevOps* or that you have downloaded a fresh copy from the `Chapter 21`
    GitHub folder. We will start off by obtaining the AMI `IMAGE` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With the current AMI stored in the `IMAGE` parameter, we can now start to create
    our first instance. Use the following command to create an instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we will get the AMI ID for the Ubuntu instance. The command will look
    a lot like the command to store the variable for the Amazon Linux AMI, but the
    `names` value is different. Run the following command so that we can store the
    Ubuntu AMI ID in a value named `AMI` and then create our second instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, just as we created our first instance, we will create our second instance.
    Two values will change in this command—the first value will be the `image-id`
    value, and the second will be the `name tag` value. You should also notice that
    we have added a second tag of `Inspector` with a value of `TRUE` to each of these
    instances. Use the command shown next to create a second Ubuntu instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Both instances should be up and running at this point in time. We can now switch
    over to our browser. Log in to the `Ohio`) in which you spun up the instances.
    Once at the **Systems Manager** service, under **Node Management** on the left-hand
    menu, find the sub-menu option named **Run Command** and click on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the AWS Systems Manager `run` command now in the main window, click on
    the orange `run` command to install the Inspector Agent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We should now be on the `Inspector` and hit *Enter*. This will bring up the
    `run` command document named `AmazonInspector-ManageAWSAgent`. Click on the **Radio**
    button next to the document name, as illustrated in the following screenshot:![Figure
    21.4 – The Systems Manager run document to install the Inspector Agent
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_21.4_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 21.4 – The Systems Manager run document to install the Inspector Agent
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once we have the document selected, scroll down on the page until we come to
    a heading of `Inspector` and a `TRUE`, then click the **Add** button to specify
    the tag in our search, as illustrated in the following screenshot:![Figure 21.5
    – Specifying the instance tags to target with our run command](img/Figure_21.5_B17405.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 21.5 – Specifying the instance tags to target with our run command
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, scroll down to `Systems Manager` command. If you do not have an S3 bucket
    readily available, then simply uncheck the **Enable an S3 bucket** box, as this
    step is optional.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll down to the bottom of the page and click on the orange **Run** button.
    You will be taken to the **Command Status** page, where you should see **In Progress**
    in the **Status** section of the targets and outputs. After about a minute, you
    can refresh the **Command Status** page, and you should see **Success** for both
    instances, as illustrated in the following screenshot:![Figure 21.6 – The Inspector
    agent successfully installed on our instances
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_21.6_B17405.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 21.6 – The Inspector agent successfully installed on our instances
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With our agent installed, we can now go to the **Amazon Inspector** service.
    In the top search box from the **Amazon Management Console**, type in **Inspector**
    and then click on the service once it appears. When the main **Inspector** page
    appears, click on the blue **Get started** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now be brought to a page with a heading on the top titled **Welcome
    to Amazon Inspector**. Under **Assessment Setup**, uncheck the box next to **Network
    Assessments**, as we are only trying to run assessments on our EC2 instances.
    This will leave the box next to **Host Assessments** checked. At the bottom of
    the page, click on the gray button labeled **Run once** and *NOT* the blue button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the dialog box pops up, click the blue **OK** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It can take around an hour for the assessment report to become ready.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have now seen how to set up the Amazon Inspector agent on different OSes.
    Next, after our assessment is run, we will look at the report and see how to digest
    the findings of the report.
  prefs: []
  type: TYPE_NORMAL
- en: Comprehending the findings of Inspector assessment reports
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once Amazon Inspector has completed its assessment, it will then return an assessment
    report. Any findings that the report returns will contain both a detailed description
    of the security issue along with a recommendation of how to fix the problem.
  prefs: []
  type: TYPE_NORMAL
- en: You have the ability to store the reports as well as share these reports with
    your team members so that they can perform remediation actions on the findings
    contained in the report.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about Amazon Inspector and how it can scan instances
    running applications for vulnerabilities. We learned about the three ways in which
    we could install the Inspector agent and even performed a hands-on exercise, installing
    the Inspector agent using the Systems Manager `run` command. Finally, we discussed
    the findings that Amazon Inspector returns.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at a number of other policies and standard
    services to know for the certification exam as well as for use in the real world.
    These include services such as **AWS GuardDuty** and **Macie**, as well as others
    that can be present in exam questions. Understanding these services will also
    help you in your current and future positions.
  prefs: []
  type: TYPE_NORMAL
- en: Review questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have been brought into a company where they are trying to rectify their
    security and compliance posture. The security and compliance teams are now requiring
    that all EC2 instances use approved AMIs. As a DevOps engineer, you must find
    a way to implement a process to find any EC2 instances that have been launched
    from unapproved AMIs. Which solution will satisfy the requirements?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Use Trusted Advisor checks to identify EC2 instances that have been launched
    from unapproved AMIs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Create an AWS Config rule that identifies any non-approved AMIs and then
    sends a notification to the security and compliance distribution lists.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Have Systems Manager Inventory create a custom report of all the EC2 instances
    using unapproved AMIs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Have Amazon Inspector run across all the instances in the account. Share
    the findings of unapproved AMIs with the security and compliance team members.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You and your team are running an application in a production environment. The
    application is built and deployed using Elastic Beanstalk but runs on EC2 instances.
    You want to make sure that the application is free of any vulnerabilities; which
    AWS service should you implement to help with this?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. AWS Trusted Advisor
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. AWS **Web Application Firewall** (**WAF**)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. AWS Shield
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. AWS Inspector
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There has been a recent investigation at the company you are working for. During
    this investigation, it was discovered that all application programming interface
    (API) calls were turned off for the production AWS account. It was also discovered
    that a new administrative user account was created, along with an access key and
    a secret access key. This key pair was used several times to create extra-large
    EC2 instances. How could you have used automation to detect and prevent this incident?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Use Amazon CloudTrail to create a new CloudTrail that looks for the events
    of disabling any CloudTrails as well as the creation of any API keys with the
    Amazon administrator managed policy.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Use Amazon Inspector to review all API calls leveraged. Configure the Inspector
    agent to use an SNS topic if any changes are detected to the CloudTrail. Use an
    IAM permissions boundary to prevent the spin-up of any extra-large EC2 instances.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Use AWS Config to create a config rule that detects when CloudTrail is disabled.
    Create a Lambda function to re-enable CloudTrail if the rule is triggered. Use
    an IAM permissions boundary to prevent the spin-up of any extra-large EC2 instances.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Use the Trusted Advisor API to periodically check if CloudTrail has been
    disabled. Create a Lambda function to re-enable CloudTrail if the rule is triggered.
    Use an IAM permissions boundary to prevent the spin-up of any extra-large EC2
    instances.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Review answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: b
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: d
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: c
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
