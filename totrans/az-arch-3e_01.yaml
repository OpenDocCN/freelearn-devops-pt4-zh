- en: 1\. Getting started with Azure
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 开始使用Azure
- en: Every few years, a technological innovation emerges that permanently changes
    the entire landscape and ecosystem around it. If we go back in time, the 1970s
    and 1980s were the time of mainframes. These mainframes were massive, often occupying
    large rooms, and were solely responsible for almost all computing work. Since
    the technology was difficult to procure and time-consuming to use, many enterprises
    used to place orders for mainframes one month in advance before they could have
    an operational mainframe set up.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 每隔几年，就会出现一种技术创新，它会永久性地改变整个周围的格局和生态系统。如果我们追溯历史，1970年代和1980年代是大型主机的时代。这些大型主机体积庞大，通常占据整间房间，几乎承担了所有计算工作。由于技术难以采购且使用繁琐，许多企业曾经需要提前一个月下订单，才能确保安装好可用的大型主机。
- en: Then, the early 1990s witnessed a boom in demand for personal computing and
    the internet. As a result, computers became much smaller in size and comparatively
    easy to procure for the general public. Consistent innovations on the personal
    computing and internet fronts eventually changed the entire computer industry.
    Many people had desktop computers that were capable of running multiple programs
    and connecting to the internet. The rise of the internet also propagated the rise
    of client-server deployments. Now there could be centralized servers hosting applications,
    and services could be reached by anyone who had a connection to the internet anywhere
    on the globe. This was also a time when server technology gained prominence; Windows
    NT was released during this time and was soon followed by Windows 2000 and Windows
    2003 at the turn of the century.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，1990年代初期见证了个人计算和互联网需求的激增。因此，计算机变得更小，且相对容易为大众采购。个人计算和互联网领域的不断创新最终改变了整个计算机行业。许多人拥有能够运行多个程序并连接互联网的台式计算机。互联网的崛起也推动了客户端-服务器部署模式的兴起。现在可以有集中式服务器托管应用程序，任何有互联网连接的人都可以访问这些服务，世界任何地方的人都可以实现这一点。这也是服务器技术获得重要地位的时期；Windows
    NT就是在这个时期发布的，随后是Windows 2000和Windows 2003，它们分别出现在世纪之交。
- en: The most remarkable innovation of the 2000s was the rise and adoption of portable
    devices, especially smartphones, and with these came a plethora of apps. Apps
    could connect to centralized servers on the internet and carry out business as
    usual. Users were no longer dependent on browsers to do this work; all servers
    were either self-hosted or hosted using a service provider, such as an **internet
    service provider** (**ISP**).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 2000年代最显著的创新是便携设备的崛起和普及，尤其是智能手机，随之而来的是大量的应用程序。应用程序可以连接到互联网上的集中式服务器，并照常开展业务。用户不再依赖浏览器来完成这项工作；所有的服务器要么是自托管的，要么是通过服务提供商托管的，例如**互联网服务提供商**（**ISP**）。
- en: Users did not have much control over their servers. Multiple customers and their
    deployments were part of the same server, even without customers knowing about
    it.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 用户对其服务器的控制权有限。多个客户及其部署共用同一台服务器，甚至客户并不知情。
- en: However, something else happened in the middle and latter parts of the first
    decade of the 2000s. This was the rise of cloud computing, and it again rewrote
    the entire landscape of the IT industry. Initially, adoption was slow, and people
    approached it with caution, either because the cloud was in its infancy and still
    had to mature, or because people had various negative notions about what it was.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在2000年代初期和中期发生了另一件事，那就是云计算的崛起，它再次重塑了整个IT行业的格局。最初，云计算的采用速度较慢，人们对其持谨慎态度，原因要么是云计算处于初期阶段，还需要成熟，要么是人们对其存在各种负面看法。
- en: 'To gain a better understanding of the disruptive technology, we will cover
    the following topics in this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解这种颠覆性技术，我们将在本章中介绍以下主题：
- en: Cloud computing
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云计算
- en: '**Infrastructure as a service** (**IaaS**), **platform as a service** (**PaaS**),
    and **Software as a service** (**SaaS**)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础设施即服务**（**IaaS**）、**平台即服务**（**PaaS**）和**软件即服务**（**SaaS**）'
- en: Understanding Azure
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Azure
- en: '**Azure Resource Manager** (**ARM**)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure资源管理器**（**ARM**）'
- en: Virtualization, containers, and Docker
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟化、容器与Docker
- en: Interacting with the intelligent cloud
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与智能云互动
- en: Cloud computing
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 云计算
- en: Today, cloud computing is one of the most promising upcoming technologies, and
    enterprises, no matter how big or small, are adopting it as a part of their IT
    strategy. It is difficult these days to have any meaningful conversation about
    an IT strategy without including cloud computing in the overall solution discussions.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，云计算是最有前景的技术之一，无论大小企业都在将其作为其IT战略的一部分。如今，很难进行任何有意义的IT战略讨论而不将云计算纳入整体解决方案讨论。
- en: Cloud computing, or simply the cloud in layman's terms, refers to the availability
    of resources on the internet. These resources are made available to users on the
    internet as services. For example, storage is available on-demand through the
    internet for users to store their files, documents, and more. Here, storage is
    a service that is offered by a cloud provider.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算，通俗来说就是“云”，指的是互联网资源的可用性。这些资源作为服务通过互联网提供给用户。例如，存储可以通过互联网按需提供，供用户存储文件、文档等。在这里，存储是由云服务提供商提供的一种服务。
- en: A cloud provider is an enterprise or consortium of companies that provides cloud
    services to other enterprises and consumers. They host and manage these services
    on behalf of the user. They are responsible for enabling and maintaining the health
    of services. There are large datacenters across the globe that have been opened
    by cloud providers to cater to the IT demands of users.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 云服务提供商是提供云服务给其他企业和消费者的公司或公司联盟。它们代表用户托管和管理这些服务，负责启用和维护服务的健康运行。全球各地的多个大型数据中心已经由云服务提供商开设，以满足用户的IT需求。
- en: Cloud resources consist of hosting services on on-demand infrastructures, such
    as computing infrastructures, networks, and storage facilities. This flavor of
    the cloud is known as IaaS.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 云资源包括按需基础设施的托管服务，如计算基础设施、网络和存储设施。这种云类型被称为IaaS。
- en: The advantages of cloud computing
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 云计算的优势
- en: 'Cloud adoption is at an all-time high and is growing because of several advantages,
    such as these:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算的采用率达到了历史最高水平，并且因以下几个优势而不断增长：
- en: '**Pay-as-you-go model**: Customers do not need to purchase hardware and software
    for cloud resources. There is no capital expenditure for using a cloud resource;
    customers simply pay for the time that they use or reserve a resource.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按需付费模式**：客户无需购买硬件和软件来使用云资源。使用云资源不需要资本支出；客户只需为使用或预留资源的时间付费。'
- en: '**Global access**: Cloud resources are available globally through the internet.
    Customers can access their resources on-demand from anywhere.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全球访问**：云资源通过互联网在全球范围内可用。客户可以随时随地按需访问他们的资源。'
- en: '**Unlimited resources**: The scaling capability of cloud technology is unlimited;
    customers can provision as many resources as they want, without any constraints.
    This is also known as unlimited scalability.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无限资源**：云技术的扩展能力是无限的；客户可以根据需要配置任何数量的资源，且没有任何限制。这也被称为无限扩展性。'
- en: '**Managed services**: The cloud provider provides numerous services that are
    managed by them for customers. This takes away any technical and financial burden
    from the customer.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**托管服务**：云服务提供商提供许多由他们为客户管理的服务。这可以减轻客户的技术和财务负担。'
- en: Why cloud computing?
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么选择云计算？
- en: To understand the need for cloud computing, we must understand the industry's
    perspective.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解云计算的必要性，我们必须理解行业的视角。
- en: '**Flexibility and agility**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**灵活性和敏捷性**'
- en: Instead of creating a large monolithic application using a big-bang approach
    deployment methodology, today, applications comprise smaller services using the
    microservices paradigm. Microservices help to create services in an independent
    and autonomous manner that can be evolved in isolation without bringing the entire
    application down. They offer large amounts of flexibility and agility in bringing
    changes to production in a faster and better way. There are many microservices
    that come together to create an application and provide integrated solutions for
    customers. These microservices should be discoverable and have well-defined endpoints
    for integration. The number of integrations with the microservices approach is
    very high compared to traditional monolithic applications. These integrations
    add complexity in both the development and deployment of applications.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，应用程序并不是采用“大爆炸”式的部署方法创建的庞大单体应用，而是通过微服务范式由较小的服务组成。微服务帮助以独立和自主的方式创建服务，可以在隔离的状态下演化，而不会导致整个应用程序崩溃。它们在将变更快速而更好的带入生产过程中提供了极大的灵活性和敏捷性。许多微服务共同构成一个应用程序，并为客户提供集成的解决方案。这些微服务应当是可发现的，并具有明确的集成端点。与传统单体应用程序相比，微服务方法的集成数量非常高。这些集成在应用程序的开发和部署中增加了复杂性。
- en: '**Speed, standardization, and consistency**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**速度、标准化和一致性**'
- en: It follows that the methodology for deployments should also undergo changes
    to adapt to the needs of these services, that is, frequent changes and frequent
    deployments. For frequent changes and deployments, it is important to use processes
    that help in bringing about these changes in a predictable and consistent manner.
    Automated agile processes should be used such that smaller changes can be deployed
    and tested in isolation.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，部署的方法论也应当进行调整，以适应这些服务的需求，也就是说，频繁的变更和频繁的部署。对于频繁的变更和部署，使用有助于以可预测且一致的方式进行这些变更的流程非常重要。应当使用自动化的敏捷流程，使得较小的变更可以被隔离地部署和测试。
- en: '**Staying relevant**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**保持相关性**'
- en: Finally, deployment targets should be redefined. Not only should deployment
    targets be easily creatable within seconds, but also the environment built should
    be consistent across versions, with appropriate binaries, runtimes, frameworks,
    and configuration. Virtual machines were used with monolithic applications but
    microservices need more agility, flexibility, and a more lightweight option than
    virtual machines. Container technology is the preferred mechanism for deployment
    targets for these services, and we will cover more about that later in this chapter.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，部署目标应当重新定义。部署目标不仅应当能够在几秒钟内轻松创建，而且构建的环境应该在各个版本间保持一致，具备适当的二进制文件、运行时、框架和配置。单体应用使用虚拟机，但微服务需要比虚拟机更具敏捷性、灵活性和更轻量化的选项。容器技术是这些服务的首选部署目标机制，我们将在本章稍后讨论更多相关内容。
- en: '**Scalability**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**可扩展性**'
- en: Some important tenets of using microservices are that they have an unlimited
    scaling capability in isolation, global high availability, disaster recovery with
    a near-zero recovery point, and time objectives. These qualities of microservices
    necessitate infrastructure that can scale in an unlimited fashion. There should
    not be any resource constraints. While this is the case, it is also important
    that an organization does not pay for resources up front when they are not utilized.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用微服务的一些重要原则是它们在隔离状态下具有无限的扩展能力、全球高可用性、近乎零恢复点的灾难恢复能力和时间目标。微服务的这些特性需要可以无限扩展的基础设施。不应有任何资源限制。虽然如此，组织在未使用资源时，也不应提前支付资源费用。
- en: '**Cost-effectiveness**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**成本效益**'
- en: Paying for resources that are being consumed and using them optimally by increasing
    and decreasing the resource counts and capacity automatically is the fundamental
    tenet of cloud computing. These emerging application requirements demand the cloud
    as the preferred platform to scale easily, be highly available, be disaster-resistant,
    bring in changes easily, and achieve predictable and consistent automated deployments
    in a cost-effective manner.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 按照使用的资源付费，并通过自动增加或减少资源数量和容量来优化使用，是云计算的基本原则。这些新兴的应用需求要求云作为首选平台，能够轻松扩展，具有高可用性，抗灾能力强，能够轻松引入变更，并以成本效益高的方式实现可预测和一致的自动化部署。
- en: Deployment paradigms in Azure
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Azure中的部署范式
- en: 'There are three different deployment patterns that are available in Azure;
    they are as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure 中有三种不同的部署模式，具体如下：
- en: IaaS
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IaaS
- en: PaaS
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PaaS
- en: SaaS
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SaaS
- en: 'The difference between these three deployment patterns is the level of control
    that is exercised by customers via Azure. *Figure 1.1* displays the different
    levels of control within each of these deployment patterns:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这三种部署模式之间的区别在于客户通过 Azure 行使控制的级别。*图 1.1* 显示了每种部署模式中不同的控制级别：
- en: '![A tabular summary on different levels of control within each of the deployment
    patterns in IaaS, PaaS, and SaaS.](img/Figure_1.1.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![关于 IaaS、PaaS 和 SaaS 各种部署模式中不同控制级别的表格摘要。](img/Figure_1.1.jpg)'
- en: 'Figure 1.1: Cloud services—IaaS, PaaS, and SaaS'
  id: totrans-43
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1.1：云服务——IaaS、PaaS 和 SaaS
- en: It is clear from *Figure 1.1* that customers have more control when using IaaS
    deployments, and this level of control continually decreases as we progress from
    PaaS to SaaS deployments.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 从*图 1.1*可以明显看出，使用 IaaS 部署时，客户拥有更多的控制权，而随着从 PaaS 到 SaaS 部署的推进，控制级别逐渐降低。
- en: '**IaaS**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**IaaS**'
- en: IaaS is a type of deployment model that allows customers to provision their
    own infrastructure on Azure. Azure provides several infrastructure resources and
    customers can provision them on-demand. Customers are responsible for maintaining
    and governing their own infrastructure. Azure will ensure the maintenance of the
    physical infrastructure on which these virtual infrastructure resources are hosted.
    Under this approach, customers require active management and operations in the
    Azure environment.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: IaaS 是一种部署模型，允许客户在 Azure 上配置自己的基础设施。Azure 提供了多种基础设施资源，客户可以按需配置它们。客户负责维护和管理自己的基础设施。Azure
    会确保托管这些虚拟基础设施资源的物理基础设施得到维护。在这种模式下，客户需要在 Azure 环境中进行积极的管理和操作。
- en: '**PaaS**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**PaaS**'
- en: PaaS takes away infrastructure deployment and control from the customer. This
    is a higher-level abstraction compared to IaaS. In this approach, customers bring
    their own application, code, and data, and deploy them on the Azure-provided platform.
    These platforms are managed and governed by Azure and customers are solely responsible
    for their applications. Customers perform activities related to their application
    deployment only. This model provides faster and easier options for the deployment
    of applications compared to IaaS.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: PaaS 将基础设施部署和控制权从客户手中移除。相较于 IaaS，这是一种更高级的抽象模式。在这种方式中，客户将自己的应用、代码和数据引入并部署到 Azure
    提供的平台上。这些平台由 Azure 管理和治理，客户仅对其应用程序负责。客户只需进行与应用部署相关的活动。相比于 IaaS，这种模式为应用的部署提供了更快速、更便捷的选项。
- en: '**SaaS**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**SaaS**'
- en: SaaS is a higher-level abstraction compared to PaaS. In this approach, software
    and its services are available for customer consumption. Customers only bring
    their data into these services—they do not have any control over these services.
    Now that we have a basic understanding of service types in Azure, let's get into
    the details of Azure and understand it from the ground up.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: SaaS 是一种相较于 PaaS 更高级的抽象模式。在这种方式中，软件及其服务可以供客户使用。客户只需将数据引入这些服务中——他们无法控制这些服务。现在我们已经对
    Azure 中的服务类型有了基本了解，接下来让我们深入了解 Azure，从基础开始理解它。
- en: Understanding Azure
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 Azure
- en: Azure provides all the benefits of the cloud while remaining open and flexible.
    Azure supports a wide variety of operating systems, languages, tools, platforms,
    utilities, and frameworks. For example, it supports Linux and Windows, SQL Server,
    MySQL, and PostgreSQL. It supports most of the programming languages, including
    C#, Python, Java, Node.js, and Bash. It supports NoSQL databases, such as MongoDB
    and Cosmos DB, and it also supports continuous integration tools, such as Jenkins
    and Azure DevOps Services (formerly **Visual Studio Team Services** (**VSTS**)).
    The whole idea behind this ecosystem is to enable customers to have the freedom
    to choose their own language, platform, operating system, database, storage, and
    tools and utilities. Customers should not be constrained from a technology perspective;
    instead, they should be able to build and focus on their business solution, and
    Azure provides them with a world-class technology stack that they can use.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 提供了云的所有好处，同时保持开放和灵活。Azure 支持多种操作系统、编程语言、工具、平台、实用程序和框架。例如，它支持 Linux 和 Windows、SQL
    Server、MySQL 和 PostgreSQL。它支持大多数编程语言，包括 C#、Python、Java、Node.js 和 Bash。它支持 NoSQL
    数据库，如 MongoDB 和 Cosmos DB，并且还支持持续集成工具，如 Jenkins 和 Azure DevOps Services（前身是**Visual
    Studio Team Services**（**VSTS**））。这个生态系统的核心思想是使客户能够自由选择自己的语言、平台、操作系统、数据库、存储以及工具和实用程序。客户不应该受到技术方面的限制；相反，他们应该能够构建并专注于他们的业务解决方案，而
    Azure 为他们提供了一个世界级的技术栈供其使用。
- en: Azure is very much compatible with the customer's choice of technology stack.
    For example, Azure supports all popular (open-source and commercial) database
    environments. Azure provides Azure SQL, MySQL, and Postgres PaaS services. It
    provides the Hadoop ecosystem and offers HDInsight, a 100% Apache Hadoop–based
    PaaS. It also provides a Hadoop on Linux **virtual machine** (**VM**) implementation
    for customers who prefer the IaaS approach. Azure also provides the Redis Cache
    service and supports other popular database environments, such as Cassandra, Couchbase,
    and Oracle as an IaaS implementation.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 与客户选择的技术栈高度兼容。例如，Azure 支持所有流行的（开源和商业）数据库环境。Azure 提供 Azure SQL、MySQL 和
    Postgres 的 PaaS 服务。它提供了 Hadoop 生态系统，并提供基于 100% Apache Hadoop 的 PaaS 服务 HDInsight。它还为那些更倾向于
    IaaS 方法的客户提供了基于 Linux 的 Hadoop **虚拟机**（**VM**）实现。Azure 还提供 Redis 缓存服务，并支持其他流行的数据库环境，如
    Cassandra、Couchbase 和 Oracle，作为 IaaS 实现。
- en: The number of services is increasing by the day in Azure and the most up-to-date
    list of services can be found at [https://azure.microsoft.com/services](https://azure.microsoft.com/services).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 上的服务数量日益增加，最新的服务列表可以在 [https://azure.microsoft.com/services](https://azure.microsoft.com/services)
    找到。
- en: Azure also provides a unique cloud computing paradigm known as the hybrid cloud.
    The hybrid cloud refers to a deployment strategy in which a subset of services
    is deployed on a public cloud, while other services are deployed on an on-premises
    private cloud or datacenter. There is a **virtual private network** (**VPN**)
    connection between the public and private clouds. Azure offers customers the flexibility
    to divide and deploy their workload on both the public cloud and an on-premises
    datacenter.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 还提供了一种独特的云计算范式——混合云。混合云指的是一种部署策略，其中一部分服务部署在公共云上，而其他服务则部署在本地私有云或数据中心。公共云和私有云之间通过**虚拟专用网络**（**VPN**）连接。Azure
    为客户提供了将工作负载划分并同时部署在公共云和本地数据中心的灵活性。
- en: Azure has datacenters across the globe and combines these datacenters into regions.
    Each region has multiple datacenters to ensure that recovery from disasters is
    quick and efficient. At the time of writing, there are 58 regions across the globe.
    This provides customers with the flexibility to deploy their services in their
    choice of location. They can also combine these regions to deploy a solution that
    is disaster-resistant and deployed near their customer base.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 在全球范围内拥有数据中心，并将这些数据中心组合成区域。每个区域都有多个数据中心，以确保灾难恢复迅速高效。到目前为止，全球已有 58 个区域。这为客户提供了在选择的位置部署服务的灵活性。客户还可以结合这些区域，部署灾难恢复能力强且靠近客户群的解决方案。
- en: Note
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: In China and Germany, the Azure Cloud Services are separate for general use
    and for governmental use. This means that the cloud services are maintained in
    separate datacenters.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在中国和德国，Azure 云服务在普通使用和政府使用方面是分开的。这意味着云服务在不同的数据中心进行维护。
- en: Azure as an intelligent cloud
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure 作为智能云
- en: 'Azure provides infrastructure and services to ingest billions of transactions
    using hyper-scale processing. It provides petabytes of storage for data, and it
    provides a host of interconnected services that can pass data among themselves.
    With such capabilities in place, data can be processed to generate meaningful
    knowledge and insights. There are multiple types of insights that can be generated
    through data analysis, which are as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 提供基础设施和服务，利用超大规模处理技术处理数十亿的事务。它为数据提供了 PB 级的存储，并提供了大量互联的服务，可以在它们之间传递数据。凭借这样的能力，数据可以被处理以生成有意义的知识和见解。通过数据分析可以生成多种类型的见解，具体如下：
- en: '**Descriptive**: This type of analysis provides details about what is happening
    or has happened in the past.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**描述性**：这种类型的分析提供关于正在发生或过去发生的事情的详细信息。'
- en: '**Predictive**: This type of analysis provides details about what is going
    to happen in the future.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预测性**：这种类型的分析提供有关未来将要发生的事情的详细信息。'
- en: '**Prescriptive**: This type of analysis provides details about what should
    be done to either enhance or prevent current or future events.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规范性**：这种类型的分析提供有关应采取什么措施来增强或防止当前或未来事件的详细信息。'
- en: '**Cognitive**: This type of analysis actually executes actions that are determined
    by prescriptive analytics in an automated manner.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**认知性**：这种类型的分析实际上执行由规范性分析确定的自动化操作。'
- en: While deriving insights from data is good, it is equally important to act on
    them. Azure provides a rich platform to ingest large volumes of data, process
    and transform it, store and generate insights from it, and display it on real-time
    dashboards. It is also possible to take action on these insights automatically.
    These services are available to every customer of Azure and they provide a rich
    ecosystem in which customers can create solutions. Enterprises are creating numerous
    applications and services that are completely disrupting industries because of
    the easy availability of these intelligent services from Azure, which are combined
    to create meaningful value for end customers. Azure ensures that services that
    are commercially not viable to implement for small and medium companies can now
    be readily consumed and deployed in a few minutes.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管从数据中提取见解非常重要，但同样重要的是根据这些见解采取行动。Azure 提供了一个强大的平台，用于摄取大量数据、处理和转换数据、存储并生成见解，并将其显示在实时仪表板上。还可以根据这些见解自动采取行动。这些服务面向所有
    Azure 客户提供，形成了一个丰富的生态系统，客户可以在其中创建解决方案。由于 Azure 提供的智能服务的易得性，企业正在创建大量的应用程序和服务，完全颠覆了行业，这些服务结合起来为最终客户创造了有意义的价值。Azure
    确保那些对中小型公司来说商业上不可行的服务，现在可以轻松消费并在几分钟内部署。
- en: Azure Resource Manager
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure 资源管理器
- en: '**Azure Resource Manager** (**ARM**) is the technology platform and orchestration
    service from Microsoft that ties up all the components that were discussed earlier.
    It brings Azure''s resource providers, resources, and resource groups together
    to form a cohesive cloud platform. It makes Azure services available as subscriptions,
    resource types available to resource groups, and resource and resource APIs accessible
    to the portal and other clients, and it authenticates access to these resources.
    It also enables features such as tagging, authentication, **role-based access
    control** (**RBAC**), resource locking, and policy enforcement for subscriptions
    and their resource groups. It also provides deployment and management features
    using the Azure portal, Azure PowerShell, and **command-line interface** (**CLI**)
    tools.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**Azure 资源管理器** (**ARM**) 是微软的技术平台和编排服务，将之前讨论的所有组件结合起来。它将 Azure 的资源提供者、资源和资源组结合起来，形成一个统一的云平台。它使
    Azure 服务以订阅的形式提供，资源类型以资源组的形式提供，并使资源和资源 API 可供门户和其他客户端访问，同时进行身份验证以访问这些资源。它还启用了如标签、身份验证、**基于角色的访问控制**
    (**RBAC**)、资源锁定和策略执行等功能，用于订阅及其资源组的管理。它还通过 Azure 门户、Azure PowerShell 和 **命令行接口**
    (**CLI**) 工具提供部署和管理功能。'
- en: The ARM architecture
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ARM 架构
- en: 'The architecture of ARM and its components is shown in *Figure 1.2*. As we
    can see, an **Azure Subscription** comprises multiple resource groups. Each resource
    group contains resource instances that are created from resource types that are
    available in the resource provider:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: ARM 架构及其组件如*图 1.2*所示。如我们所见，**Azure 订阅**由多个资源组组成。每个资源组包含从资源提供者中可用的资源类型创建的资源实例：
- en: '![The ARM architecture consisting of different components, such as Resource
    Groups, Resource Providers, Azure Resource Manager, and so on.](img/Figure_1.2.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![ARM架构图，包含不同的组件，如资源组、资源提供者、Azure资源管理器等。](img/Figure_1.2.jpg)'
- en: 'Figure 1.2: The ARM architecture'
  id: totrans-71
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1.2：ARM架构
- en: Why ARM?
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么选择ARM？
- en: Prior to ARM, the framework used by Azure was known as **Azure Service Manager**
    (**ASM**). It is important to have a small introduction to it so that we can get
    a clear understanding of the emergence of ARM and the slow and steady deprecation
    of ASM.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在ARM之前，Azure使用的框架被称为**Azure服务管理器**（**ASM**）。了解ASM的一些基本情况非常重要，这样我们才能清楚地理解ARM的出现，以及ASM的逐步弃用过程。
- en: '**Limitations of ASM**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**ASM的限制**'
- en: 'ASM has inherent constraints. For example, ASM deployments are slow and blocking—operations
    are blocked if an earlier operation is already in progress. Some of the limitations
    of ASM are as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: ASM存在固有的限制。例如，ASM部署较慢且会被阻塞——如果前一个操作正在进行，后续操作将会被阻塞。ASM的一些限制如下：
- en: '**Parallelism**: Parallelism is a challenge in ASM. It is not possible to execute
    multiple transactions successfully in parallel. The operations in ASM are linear
    and so they are executed one after another. If multiple transactions are executed
    at the same time, there will either be parallel operation errors or the transactions
    will get blocked.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并行性**：并行性在ASM中是一个挑战。无法成功地并行执行多个事务。ASM中的操作是线性的，依次执行。如果同时执行多个事务，将会出现并行操作错误或事务被阻塞。'
- en: '**Resources**: Resources in ASM are provisioned and managed in isolation of
    each other; there is no relation between ASM resources. Grouping services and
    resources or configuring them together is not possible.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源**：ASM中的资源是相互独立地进行配置和管理的；ASM资源之间没有关系。无法将服务和资源进行分组或一起配置。'
- en: '**Cloud services**: Cloud services are the units of deployment in ASM. They
    are reliant on affinity groups and are not scalable due to their design and architecture.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云服务**：云服务是ASM中的部署单元。它们依赖于亲和性组，并且由于设计和架构的原因，无法进行扩展。'
- en: Granular and discrete roles and permissions cannot be assigned to resources
    in ASM. Customers are either service administrators or co-administrators in the
    subscription. They either get full control over resources or do not have access
    to them at all. ASM provides no deployment support. Either deployments are done
    manually, or we need to resort to writing procedural scripts in .NET or PowerShell.
    ASM APIs are not consistent between resources.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 无法为ASM中的资源分配细粒度和独立的角色和权限。客户要么是服务管理员，要么是订阅中的共同管理员。客户要么对资源拥有完全控制权限，要么根本无法访问这些资源。ASM不提供部署支持。要么需要手动进行部署，要么需要编写.NET或PowerShell脚本进行自动化。ASM的API在不同资源之间并不一致。
- en: ARM advantages
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ARM的优势
- en: 'ARM provides distinct advantages and benefits over ASM, which are as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: ARM相比于ASM提供了明显的优势，具体如下：
- en: '**Grouping**: ARM allows the grouping of resources together in a logical container.
    These resources can be managed together and go through a common life cycle as
    a group. This makes it easier to identify related and dependent resources.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分组**：ARM允许将资源逻辑上分组到一个容器中。这些资源可以一起管理，并作为一个整体经历共同的生命周期。这样更容易识别相关和依赖的资源。'
- en: '**Common life cycles**: Resources in a group have the same life cycle. These
    resources can evolve and be managed together as a unit.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共同生命周期**：分组中的资源具有相同的生命周期。这些资源可以一起发展并作为一个单位进行管理。'
- en: '**RBAC**: Granular roles and permissions can be assigned to resources providing
    discrete access to customers. Customers can also have only those rights that are
    assigned to them.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RBAC**：可以为资源分配细粒度的角色和权限，从而为客户提供独立的访问权限。客户也只能拥有分配给他们的那些权限。'
- en: '**Deployment support**: ARM provides deployment support in terms of templates,
    enabling DevOps and **infrastructure as code** (**IaC**). These deployments are
    faster, consistent, and predictable.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署支持**：ARM通过模板提供部署支持，支持DevOps和**基础设施即代码**（**IaC**）。这些部署速度更快、一致且可预测。'
- en: '**Superior technology**: The cost and billing of resources can be managed as
    a unit. Each resource group can provide its usage and cost information.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更优的技术**：资源的成本和计费可以作为一个单位进行管理。每个资源组可以提供其使用情况和成本信息。'
- en: '**Manageability**: ARM provides advanced features, such as security, monitoring,
    auditing, and tagging, for better manageability of resources. Resources can be
    queried based on tags. Tags also provide cost and billing information for resources
    that are tagged similarly.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可管理性**：ARM 提供了高级功能，如安全性、监控、审计和标记，以便更好地管理资源。可以根据标签查询资源。标签还提供了类似标签资源的成本和计费信息。'
- en: '**Migration**: Migration and updating resources is easier within and across
    resource groups.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**迁移**：在资源组内部和跨资源组迁移和更新资源变得更容易。'
- en: ARM concepts
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ARM 概念
- en: With ARM, everything in Azure is a resource. Examples of resources are VMs,
    network interfaces, public IP addresses, storage accounts, and virtual networks.
    ARM is based on concepts that are related to resource providers and resource consumers.
    Azure provides resources and services through multiple resource providers that
    are consumed and deployed in groups.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ARM，Azure 中的一切都是资源。资源的例子包括虚拟机（VM）、网络接口、公有 IP 地址、存储帐户和虚拟网络。ARM 基于与资源提供者和资源消费者相关的概念。Azure
    通过多个资源提供者提供资源和服务，这些资源和服务在组内被消费和部署。
- en: '**Resource providers**'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**资源提供者**'
- en: These are services that are responsible for providing resource types through
    ARM. The top-level concept in ARM is the resource provider. These providers are
    containers for resource types. Resource types are grouped into resource providers.
    They are responsible for deploying and managing resources. For example, a VM resource
    type is provided by a resource provider called **Microsoft.Compute/virtualMachines**
    resource. **Representational state transfer** (**REST**) API operations are versioned
    to distinguish between them. The version naming is based on the dates on which
    they are released by Microsoft. It is necessary for a related resource provider
    to be available to a subscription to deploy a resource. Not all resource providers
    are available to a subscription out of the box. If a resource is not available
    to a subscription, then we need to check whether the required resource provider
    is available in each region. If it is available, the customer can explicitly register
    for the subscription.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是通过 ARM 提供资源类型的服务。ARM 中的顶级概念是资源提供者。资源提供者是资源类型的容器。资源类型被分组到资源提供者中。它们负责部署和管理资源。例如，虚拟机资源类型由名为
    **Microsoft.Compute/virtualMachines** 的资源提供者提供。**表述性状态传输**（**REST**）API 操作已版本化，以便区分它们。版本命名基于它们由
    Microsoft 发布的日期。为部署资源，相关的资源提供者必须在订阅中可用。并非所有资源提供者在默认情况下都可用。如果某个资源在订阅中不可用，我们需要检查所需的资源提供者是否在每个区域中可用。如果可用，客户可以明确地为该订阅注册。
- en: '**Resource types**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**资源类型**'
- en: Resource types are an actual resource specification defining the resource's
    public API interface and implementation. They implement the working and operations
    supported by the resource. Similar to resource providers, resource types also
    evolve over time in terms of their internal implementation, and there are multiple
    versions of their schemas and public API interfaces. The version names are based
    on the dates that they are released by Microsoft as a preview or **general availability**
    (**GA**). The resource types become available as a subscription after a resource
    provider is registered to them. Also, not every resource type is available in
    every Azure region. The availability of a resource is dependent on the availability
    and registration of a resource provider in an Azure region and must support the
    API version needed for provisioning it.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 资源类型是定义资源公共 API 接口和实现的实际资源规范。它们实现资源所支持的工作和操作。与资源提供者类似，资源类型在其内部实现方面也会随着时间的推移而发展，并且有多个版本的架构和公共
    API 接口。版本名称基于它们由 Microsoft 作为预览或**正式发布**（**GA**）的日期。资源类型在资源提供者注册之后作为订阅可用。此外，并非每个资源类型都在每个
    Azure 区域中可用。资源的可用性取决于资源提供者在 Azure 区域的可用性和注册情况，并且必须支持为其提供所需的 API 版本。
- en: '**Resource groups**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**资源组**'
- en: Resource groups are units of deployment in ARM. They are containers grouping
    multiple resource instances in a security and management boundary. A resource
    group is uniquely named in a subscription. Resources can be provisioned on different
    Azure regions and yet belong to the same resource group. Resource groups provide
    additional services to all the resources within them. Resource groups provide
    metadata services, such as tagging, which enables the categorization of resources;
    the policy-based management of resources; RBAC; the protection of resources from
    accidental deletion or updates; and more. As mentioned before, they have a security
    boundary, and users that don't have access to a resource group cannot access resources
    contained within it. Every resource instance needs to be part of a resource group;
    otherwise, it cannot be deployed.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '**Resources and resource instances**'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Resources are created from resource types and are an instance of a resource
    type. An instance can be unique globally or at a resource group level. The uniqueness
    is defined by both the name of the resource and its type. If we compare this with
    object-oriented programming constructs, resource instances can be seen as objects
    and resource types can be seen as classes. The services are consumed through the
    operations that are supported and implemented by resource instances. The resource
    type defines properties and each instance should configure mandatory properties
    during the provisioning of an instance. Some are mandatory properties, while others
    are optional. They inherit the security and access configuration from their parent
    resource group. These inherited permissions and role assignments can be overridden
    for each resource. A resource can be locked in such a way that some of its operations
    can be blocked and not made available to roles, users, and groups even though
    they have access to it. Resources can be tagged for easy discoverability and manageability.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '**ARM features**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the main features that are provided by ARM:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '**RBAC**: **Azure Active Directory** (**Azure AD**) authenticates users to
    provide access to subscriptions, resource groups, and resources. ARM implements
    OAuth and RBAC within the platform, enabling authorization and access control
    for resources, resource groups, and subscriptions based on roles assigned to a
    user or group. A permission defines access to the operations in a resource. These
    permissions can allow or deny access to the resource. A role definition is a collection
    of these permissions. Roles map Azure AD users and groups to particular permissions.
    Roles are subsequently assigned to a scope; this can be an individual, a collection
    of resources, a resource group, or the subscription. The Azure AD identities (users,
    groups, and service principals) that are added to a role gain access to the resource
    according to the permissions defined in the role. ARM provides multiple out-of-the-box
    roles. It provides system roles, such as the **owner**, **contributor**, and **reader**.
    It also provides resource-based roles, such as SQL DB contributor and VM contributor.
    ARM also allows the creation of custom roles.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tags**: Tags are name-value pairs that add additional information and metadata
    to resources. Both resources and resource groups can be tagged with multiple tags.
    Tags help in the categorization of resources for better discoverability and manageability.
    Resources can be quickly searched for and easily identified. Billing and cost
    information can also be fetched for resources that have the same tags. While this
    feature is provided by ARM, an IT administrator defines its usage and taxonomy
    with regard to resources and resource groups. Taxonomy and tags, for example,
    can relate to departments, resource usage, location, projects, or any other criteria
    that are deemed fit from a cost, usage, billing, or search perspective. These
    tags can then be applied to resources. Tags that are defined at the resource group
    level are not inherited by their resources.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Policies**: Another security feature that is provided by ARM is custom policies.
    Custom policies can be created to control access to resources. Policies are defined
    as conventions and rules, and they must be adhered to while interacting with resources
    and resource groups. The policy definition contains an explicit denial of actions
    on resources or access to resources. By default, every access is allowed if it
    is not mentioned in the policy definition. These policy definitions are assigned
    to the resource, resource group, and subscription scope. It is important to note
    that these policies are not replacements or substitutes for RBAC. In fact, they
    complement and work together with RBAC. Policies are evaluated after a user is
    authenticated by Azure AD and authorized by the RBAC service. ARM provides a JSON-based
    policy definition language for defining policies. Some examples of policy definitions
    are that a policy must tag every provisioned resource, and resources can only
    be provisioned to specific Azure regions.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Locks**: Subscriptions, resource groups, and resources can be locked to prevent
    accidental deletions or updates by an authenticated user. Locks applied at higher
    levels flow downstream to the child resources. Alternatively, locks that are applied
    at the subscription level lock every resource group and the resources within it.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multi-region**: Azure provides multiple regions for provisioning and hosting
    resources. ARM allows resources to be provisioned at different locations while
    still residing within the same resource group. A resource group can contain resources
    from different regions.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Idempotent**: This feature ensures predictability, standardization, and consistency
    in resource deployment by ensuring that every deployment will result in the same
    state of resources and configuration, no matter the number of times it is executed.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extensible**: ARM provides an extensible architecture to allow the creation
    and plugging in of new resource providers and resource types on the platform.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtualization
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Virtualization was a breakthrough innovation that completely changed the way
    that physical servers were looked at. It refers to the abstraction of a physical
    object into a logical object.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: The virtualization of physical servers led to virtual servers known as VMs.
    These VMs consume and share the physical CPU, memory, storage, and other hardware
    of the physical server on which they are hosted. This enables the faster and easier
    provisioning of application environments on-demand, providing high availability
    and scalability with reduced cost. One physical server is enough to host multiple
    VMs, with each VM containing its own operating system and hosting services on
    it.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: There was no longer any need to buy additional physical servers for deploying
    new applications and services. The existing physical servers were sufficient to
    host more VMs. Furthermore, as part of rationalization, many physical servers
    were consolidated into a few with the help of virtualization.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Each VM contains the entire operating system, and each VM is completely isolated
    from other VMs, including the physical hosts. Although a VM uses the hardware
    that is provided by the host physical server, it has full control over its assigned
    resources and its environment. These VMs can be hosted on a network such as a
    physical server with its own identity.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Azure can create Linux and Windows VMs in a few minutes. Microsoft provides
    its own images, along with images from its partners and the community; users can
    also provide their own images. VMs are created using these images.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Containers
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Containers are also a virtualization technology; however, they do not virtualize
    a server. Instead, a container is operating system–level virtualization. What
    this means is that containers share the operating system kernel (which is provided
    by the host) among themselves along with the host. Multiple containers running
    on a host (physical or virtual) share the host operating system kernel. Containers
    ensure that they reuse the host kernel instead of each having a dedicated kernel
    to themselves.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Containers are completely isolated from their host or from other containers
    running on the host. Windows containers use Windows storage filter drivers and
    session isolation to isolate operating system services such as the file system,
    registry, processes, and networks. The same is true even for Linux containers
    running on Linux hosts. Linux containers use the Linux namespace, control groups,
    and union file system to virtualize the host operating system.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: 'The container appears as if it has a completely new and untouched operating
    system and resources. This arrangement provides lots of benefits, such as the
    following:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Containers are fast to provision and take less time to provision compared to
    virtual machines. Most of the operating system services in a container are provided
    by the host operating system.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Containers are lightweight and require fewer computing resources than VMs. The
    operating system resource overhead is no longer required with containers.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Containers are much smaller than VMs.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Containers can help solve problems related to managing multiple application
    dependencies in an intuitive, automated, and simple manner.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Containers provide infrastructure in order to define all application dependencies
    in a single place.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Containers are an inherent feature of Windows Server 2016 and Windows 10; however,
    they are managed and accessed using a Docker client and a Docker daemon. Containers
    can be created on Azure with a Windows Server 2016 SKU as an image. Each container
    has a single main process that must be running for the container to exist. A container
    will stop when this process ends. Additionally, a container can either run in
    interactive mode or in detached mode like a service:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '![The container architecture showing all the technical layers that enable containers,
    including the infrastructure, the operating system, HCSShim, Docker Engine, containers,
    and applications.](img/Figure_1.3.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1.3: Container architecture'
  id: totrans-125
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '*Figure 1.3* shows all the technical layers that enable containers. The bottom-most
    layer provides the core infrastructure in terms of network, storage, load balancers,
    and network cards. At the top of the infrastructure is the compute layer, consisting
    of either a physical server or both physical and virtual servers on top of a physical
    server. This layer contains the operating system with the ability to host containers.
    The operating system provides the execution driver that the layers above use to
    call the kernel code and objects to execute containers. Microsoft created **Host
    Container System Shim** (**HCSShim**) for managing and creating containers and
    uses Windows storage filter drivers for image and file management.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Container environment isolation is enabled for the Windows session. Windows
    Server 2016 and Nano Server provide the operating system, enable the container
    features, and execute the user-level Docker client and Docker Engine. Docker Engine
    uses the services of HCSShim, storage filter drivers, and sessions to spawn multiple
    containers on the server, with each containing a service, application, or database.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Docker
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Docker provides management features to Windows containers. It comprises the
    following two executables:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: The Docker daemon
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Docker client
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Docker daemon is the workhorse for managing containers. It is a Windows
    service responsible for managing all activities on the host that are related to
    containers. The Docker client interacts with the Docker daemon and is responsible
    for capturing inputs and sending them across to the Docker daemon. The Docker
    daemon provides the runtime, libraries, graph drivers, and engine to create, manage,
    and monitor containers and images on the host server. It also has the ability
    to create custom images that are used for building and shipping applications to
    multiple environments.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with the intelligent cloud
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Azure provides multiple ways to connect, automate, and interact with the intelligent
    cloud. All these methods require users to be authenticated with valid credentials
    before they can be used. The different ways to connect to Azure are as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: The Azure portal
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PowerShell
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Azure CLI
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Azure REST API
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Azure portal
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Azure portal is a great place to get started. With the Azure portal, users
    can log in and start creating and managing Azure resources manually. The portal
    provides an intuitive and user-friendly user interface through the browser. The
    Azure portal provides an easy way to navigate to resources using **blades**. The
    blades display all the properties of a resource, including its logs, cost, relationship
    with other resources, tags, security options, and more. An entire cloud deployment
    can be managed through the portal.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: PowerShell
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PowerShell is an object-based command-line shell and scripting language that
    is used for the administration, configuration, and management of infrastructure
    and environments. It is built on top of .NET Framework and provides automation
    capabilities. PowerShell has truly become a first-class citizen among IT administrators
    and automation developers for managing and controlling the Windows environment.
    Today, almost every Windows environment and many Linux environments can be managed
    by PowerShell. In fact, almost every aspect of Azure can also be managed by PowerShell.
    Azure provides rich support for PowerShell. It provides a PowerShell module for
    each resource provider containing hundreds of cmdlets. Users can use these cmdlets
    in their scripts to automate interaction with Azure. The Azure PowerShell module
    is available through the web platform installer and through the `PowerShellGet`
    modules for the quick and easy downloading and installation of PowerShell modules
    from the PowerShell Gallery. The `PowerShellGet` module provides the `Install-Module`
    cmdlet for downloading and installing modules on the system.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing a module is a simple act of copying the module files at well-defined
    module locations, which can be done as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `Import-module` command imports a module and its related functions within
    the current execution scope and `Install-Module` helps in installing modules.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: The Azure CLI
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Azure also provides Azure CLI 2.0, which can be deployed on Linux, Windows,
    and macOS operating systems. Azure CLI 2.0 is Azure's new command-line utility
    for managing Azure resources. Azure CLI 2.0 is optimized for managing and administering
    Azure resources from the command line, and for building automation scripts that
    work against ARM. The CLI can be used to execute commands using the Bash shell
    or the Windows command line. The Azure CLI is very famous among non-Windows users
    as it allows you to talk to Azure on Linux and macOS. The steps for installing
    Azure CLI 2.0 are available at [https://docs.microsoft.com/cli/azure/install-azure-cli?view=azure-cli-latest](https://docs.microsoft.com/cli/azure/install-azure-cli?view=azure-cli-latest).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: The Azure REST API
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All Azure resources are exposed to users through REST endpoints. REST APIs are
    service endpoints that implement HTTP operations (or methods) by providing **create,
    retrieve**, **update**, or **delete** (**CRUD**) access to the service's resources.
    Users can consume these APIs to create and manage resources. In fact, the CLI
    and PowerShell mechanisms use these REST APIs internally to interact with resources
    on Azure.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: ARM templates
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In an earlier section, we looked at deployment features such as multi-service,
    multi-region, extensible, and idempotent features that are provided by ARM. ARM
    templates are the primary means of provisioning resources in ARM. ARM templates
    provide implementation support for ARM's deployment features.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: ARM templates provide a declarative model through which resources, their configuration,
    scripts, and extensions are specified. ARM templates are based on the **JavaScript
    Object Notation** (**JSON**) format. They use JSON syntax and conventions to declare
    and configure resources. JSON files are text-based, user-friendly, and easily
    readable files.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: They can be stored in a source code repository and have version control. They
    are also a means to represent IaC that can be used to provision resources in an
    Azure resource group again and again, predictably and uniformly. A template needs
    a resource group for deployment. It can only be deployed to a resource group,
    and the resource group should exist before executing a template deployment. A
    template is not capable of creating a resource group.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Templates provide the flexibility to be generic and modular in their design
    and implementation. Templates provide the ability to accept parameters from users,
    declare internal variables, define dependencies between resources, link resources
    within the same resource group or different resource groups, and execute other
    templates. They also provide scripting language type expressions and functions
    that make them dynamic and customizable at runtime.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '**Deployments**'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: 'PowerShell allows the following two modes for the deployment of templates:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '**Incremental**: Incremental deployment adds resources declared in the template
    that don''t exist in a resource group, leaves resources unchanged in a resource
    group that is not part of a template definition, and leaves resources unchanged
    in a resource group that exists in both the template and resource group with the
    same configuration state.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Complete**: Complete deployment, on the other hand, adds resources declared
    in a template to the resource group, deletes resources that do not exist in the
    template from the resource group, and leaves resources unchanged that exist in
    both the resource group and template with the same configuration state.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The cloud is a relatively new paradigm and is still in its nascent stage. There
    will be a lot of innovation and capabilities added over time. Azure is one of
    the top cloud providers today and it provides rich capabilities through IaaS,
    PaaS, SaaS, and hybrid deployments. In fact, Azure Stack, which is an implementation
    of the private cloud from Microsoft, will be released soon. This will have the
    same features available on a private cloud as on the public cloud. They both will,
    in fact, connect and work seamlessly and transparently together.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: It is very easy to get started with Azure, but developers and architects can
    also fall into a trap if they do not design and architect their solutions appropriately.
    This book is an attempt to provide guidance and directions for architecting solutions
    the right way, using appropriate services and resources. Every service on Azure
    is a resource. It is important to understand how these resources are organized
    and managed in Azure. This chapter provided context around ARM and groups—which
    are the core frameworks that provide the building blocks for resources. ARM offers
    a set of services to resources that help provide uniformity, standardization,
    and consistency in managing them. The services, such as RBAC, tags, policies,
    and locks, are available to every resource provider and resource. Azure also provides
    rich automation features to automate and interact with resources. Tools such as
    PowerShell, ARM templates, and the Azure CLI can be incorporated as part of release
    pipelines, continuous deployment, and delivery. Users can connect to Azure from
    heterogeneous environments using these automation tools.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will discuss some of the important architectural concerns that
    help to solve common cloud-based deployment problems and ensure applications are
    secure, available, scalable, and maintainable in the long run.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
