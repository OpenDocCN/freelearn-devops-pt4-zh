- en: 4\. Automating architecture on Azure
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 在 Azure 上自动化架构
- en: Every organization wants to reduce manual effort and error in their pursuits,
    and automation plays an important role in bringing about predictability, standardization,
    and consistency in both building a product and in operations. Automation has been
    the focus of almost every **Chief information officer** (**CIO**) and digital
    officer to ensure that their systems are highly available, scalable, reliable,
    and able to cater to the needs of their customers.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 每个组织都希望减少手动工作和错误，自动化在提高可预测性、标准化和一致性方面发挥着重要作用，不仅在产品开发中，也在运营中。自动化一直是几乎每个**首席信息官**（**CIO**）和数字化官员的关注重点，以确保他们的系统具备高可用性、可扩展性、可靠性，并能够满足客户的需求。
- en: Automation became more prominent with the advent of the cloud because new resources
    can be provisioned on the fly without the procurement of hardware resources. Hence,
    cloud companies want automation in almost all of their activities to reduce misuse,
    errors, governance, maintenance, and administration.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 随着云计算的到来，自动化变得更加突出，因为新的资源可以随时配置，无需采购硬件资源。因此，云公司希望在几乎所有活动中都能实现自动化，以减少滥用、错误、治理、维护和管理。
- en: 'In this chapter, we will evaluate Azure Automation as a major service that
    provides automation capabilities, along with its differentiating capabilities
    compared to other apparently similar-looking services. This chapter will cover
    the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将评估 Azure 自动化作为一项主要的自动化服务，以及它与其他看似相似的服务相比的差异化能力。本章将涵盖以下内容：
- en: The Azure Automation landscape
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 自动化生态
- en: The Azure Automation service
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 自动化服务
- en: Resources for Azure Automation services
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 自动化服务的资源
- en: Writing Azure Automation runbooks
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写 Azure 自动化运行书
- en: Webhooks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Webhooks
- en: Hybrid Workers
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 混合工作者
- en: Let's get started with Azure Automation, a cloud service for process automation.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始使用 Azure 自动化，这是一个用于过程自动化的云服务。
- en: Automation
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化
- en: 'Automation is needed for the provisioning, operations, management, and deprovisioning
    of IT resources within an organization. *Figure 4.1* gives you a closer look at
    what each of these use cases represents:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化是组织内部 IT 资源的配置、操作、管理和拆除的必要手段。*图 4.1* 给你展示了每个用例的详细信息：
- en: '![Automation use cases, including provisioning, operation, management, and
    deprovisioning.](img/B15432_04_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![自动化用例，包括配置、操作、管理和拆除。](img/B15432_04_01.jpg)'
- en: 'Figure 4.1: Use cases of automation'
  id: totrans-14
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.1：自动化用例
- en: Before the advent of the cloud, IT resources were primarily on-premises, and
    manual processes were often used for these activities. However, since cloud adoption
    has increased, automation has found increased focus and attention. The primary
    reason is that cloud technology's agility and flexibility provide an opportunity
    to provision, deprovision, and manage these resources on the fly in a tiny fraction
    of the time it used to take. Along with this flexibility and agility come the
    requirements to be more predictable and consistent with the cloud because it has
    become easy for organizations to create resources.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在云计算到来之前，IT 资源主要是在本地，并且这些活动通常依赖手动过程。然而，随着云的采用增加，自动化得到了更多的关注。主要原因是，云技术的敏捷性和灵活性为实时配置、拆除和管理这些资源提供了机会，而这一过程比以前要快得多。随着这种灵活性和敏捷性而来的，是对云计算要求更加可预测和一致，因为组织现在能够轻松创建资源。
- en: Microsoft has a great tool for IT automation known as System Center Orchestrator.
    It is a great tool for automation for on-premises and cloud environments, but
    it is a product and not a service. It should be licensed and deployed on servers,
    and then runbooks can be executed to effect changes on cloud and on-premises environments.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 微软提供了一个非常棒的 IT 自动化工具——System Center Orchestrator。它是一个适用于本地和云环境的自动化工具，但它是一个产品，而不是服务。它需要许可并部署在服务器上，然后可以执行运行书，以对云和本地环境进行更改。
- en: Microsoft realized that an automation solution was required that could be provided
    to customers as a service rather than bought and deployed as a product. Enter
    Azure Automation.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 微软意识到，需要一种自动化解决方案，可以作为服务提供给客户，而不是作为产品购买和部署。于是，Azure 自动化应运而生。
- en: Azure Automation
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure 自动化
- en: 'Azure provides a service called **Azure Automation**, which is an essential
    service for the automation of processes, activities, and tasks not only on Azure
    but also on-premises as well. Using Azure Automation, organizations can automate
    their processes and tasks related to processing, tear-down, operations, and the
    management of their resources across the cloud, IT environments, platforms, and
    languages. In *Figure 4.2*, we can see some features of Azure Automation:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 提供了一项名为 **Azure 自动化** 的服务，这是一项用于自动化流程、活动和任务的核心服务，不仅适用于 Azure，还可以应用于本地环境。通过
    Azure 自动化，组织可以自动化与处理、拆除、运营及管理其跨云、IT 环境、平台和语言资源相关的流程和任务。在*图 4.2*中，我们可以看到 Azure
    自动化的一些功能：
- en: '![Azure Automation features, including Cross-cloud, Cross-environment, Cross-platform,
    and cross-language.](img/B15432_04_02.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![Azure 自动化功能，包括跨云、跨环境、跨平台和跨语言。](img/B15432_04_02.jpg)'
- en: 'Figure 4.2: Features of Azure Automation'
  id: totrans-21
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.2：Azure 自动化功能
- en: Azure Automation architecture
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure 自动化架构
- en: Azure Automation comprises multiple components, and each of these components
    is completely decoupled from the others. Most of the integration happens at the
    data store level, and no components talk to each other directly.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 自动化由多个组件组成，这些组件之间完全解耦。大部分集成发生在数据存储级别，且没有组件直接进行通信。
- en: When an Automation account is created on Azure, it is managed by a management
    service. The management service is a single point of contact for all activities
    within Azure Automation. All requests from the portal, including saving, publishing,
    and creating runbooks, to execution, stopping, suspending, starting, and testing
    are sent to the automation management service and the service writes the request
    data to its data store. It also creates a job record in the data store and, based
    on the status of the runbook workers, assigns it to a worker.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 Azure 上创建一个自动化账户时，它由一个管理服务进行管理。该管理服务是所有 Azure 自动化活动的单一联络点。来自门户的所有请求，包括保存、发布、创建运行簿，执行、停止、暂停、启动和测试，都会发送到自动化管理服务，服务将请求数据写入其数据存储。它还会在数据存储中创建一个作业记录，并根据运行簿工作者的状态，将作业分配给一个工作者。
- en: '![Azure Automation architecture, showing how the Azure portal works with the
    Automation Management Service, Runbook Workers, and the Data Store for Runbook
    execution, Job creation, assignment, and execution.](img/Figure_4.3.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![Azure 自动化架构，展示了 Azure 门户如何与自动化管理服务、运行簿工作者和数据存储一起工作，实现运行簿执行、作业创建、分配和执行。](img/Figure_4.3.jpg)'
- en: 'Figure 4.3: Azure Automation architecture'
  id: totrans-26
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.3：Azure 自动化架构
- en: The worker keeps polling the database for any new jobs assigned to it. Once
    it finds a job assignment, it fetches the job information and starts executing
    the job using its execution engine. The results are written back to the database,
    read by the management service, and displayed back on the Azure portal.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 工作者不断轮询数据库，查找分配给它的新作业。一旦找到作业分配，它会提取作业信息并使用其执行引擎开始执行该作业。结果会写回数据库，由管理服务读取，并显示在
    Azure 门户上。
- en: The Hybrid Workers that we will read about later in this chapter are also runbook
    workers, although they're not shown in *Figure 4.3*.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本章后面我们将要了解的混合工作者也是运行簿工作者，尽管它们未在*图 4.3*中显示。
- en: The first step in getting started with Azure Automation is to create a new account.
    Once the account is created, all other artifacts are created within the account.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用 Azure 自动化的第一步是创建一个新账户。账户创建后，所有其他组件都将在该账户内创建。
- en: The account acts as the main top-level resource that can be managed using Azure
    resource groups and its own control plane.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 账户作为主要的顶级资源，可以通过 Azure 资源组及其自身的控制平面进行管理。
- en: The account should be created within a region, and all automation within this
    account gets executed on servers in that region.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 账户应当在某个区域内创建，且该账户中的所有自动化操作都将在该区域的服务器上执行。
- en: It is important to choose the region wisely, preferably close to other Azure
    resources that the Automation account integrates or manages, to reduce the network
    traffic and latency between the regions.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 选择区域时要谨慎，最好选择靠近其他与自动化账户集成或管理的 Azure 资源的区域，以减少区域之间的网络流量和延迟。
- en: 'The Automation account also supports a couple of **Run As** accounts, which
    can be created from the Automation account. As these Run As accounts are analogous
    to a service account, we mostly create them to execute actions. Even though we
    generally say Run As account, there are two types of Run As account: one is called
    the Azure Classic Run As account, and the other one is simply the Run As account,
    and both of them are used to connect to Azure subscriptions. The Azure Classic
    Run As account is for connecting to Azure using the **Azure Service Management**
    API, and the Run As account is for connecting to Azure using the **Azure Resource
    Management** (**ARM**) API.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化帐户还支持几个**Run As**帐户，可以从自动化帐户中创建。由于这些 Run As 帐户类似于服务帐户，我们通常创建它们以执行操作。尽管我们通常称其为
    Run As 帐户，但实际上有两种类型的 Run As 帐户：一种叫做 Azure 经典 Run As 帐户，另一种则简称为 Run As 帐户，二者都用于连接到
    Azure 订阅。Azure 经典 Run As 帐户用于通过**Azure 服务管理**API连接到 Azure，而 Run As 帐户则用于通过**Azure
    资源管理**（**ARM**）API连接到 Azure。
- en: Both of these accounts use certificates to authenticate with Azure. These accounts
    can be created while creating the Automation account, or you can opt to create
    them at a later stage from the Azure portal.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个帐户使用证书进行身份验证以连接到 Azure。这些帐户可以在创建自动化帐户时创建，也可以选择稍后从 Azure 门户创建。
- en: It is recommended to create these Run As accounts later instead of creating
    them while creating the Automation account because if they are created while setting
    up the Automation account, Automation will generate the certificates and service
    principals behind the scenes with the default configuration. If more control and
    custom configuration is needed for these Run As accounts, such as using an existing
    certificate or service principal, then the Run As accounts should be created after
    the Automation account.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 建议在稍后创建这些 Run As 帐户，而不是在创建自动化帐户时同时创建，因为如果在设置自动化帐户时创建，它们会在后台使用默认配置生成证书和服务主体。如果需要更多的控制和自定义配置（例如使用现有的证书或服务主体），则应在创建自动化帐户后再创建
    Run As 帐户。
- en: Once the Automation account is created, it provides a dashboard through which
    multiple automation scenarios can be enabled.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了自动化帐户，它会提供一个仪表板，通过该仪表板可以启用多个自动化场景。
- en: 'Some of the important scenarios that can be enabled using an Automation account
    are related to:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用自动化帐户可以启用的一些重要场景包括：
- en: Process automation
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流程自动化
- en: Configuration management
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置管理
- en: Update management
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新管理
- en: Automation is about writing scripts that are reusable and generic so that they
    can be reused in multiple scenarios. For example, an automation script should
    be generic enough to start and stop any VM in any resource group in any subscription
    and management group. Hardcoding VM server information, along with resource group,
    subscription, and management group names, will result in the creation of multiple
    similar scripts, and any change in one will undoubtedly result in changing all
    the scripts. It is better to create a single script for this purpose by using
    scripting parameters and variables, and you should ensure that the values are
    supplied by the executor for these artifacts.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化的目标是编写可重用且通用的脚本，以便它们可以在多个场景中重复使用。例如，一个自动化脚本应该足够通用，可以在任何资源组、任何订阅和管理组中启动和停止任何虚拟机（VM）。如果将虚拟机服务器信息与资源组、订阅和管理组的名称硬编码到脚本中，就会创建多个类似的脚本，并且任何一个脚本的更改都无可避免地会导致所有脚本的更改。为了避免这种情况，最好通过使用脚本参数和变量来创建一个通用的脚本，并确保执行者为这些脚本提供相应的值。
- en: Let's take a closer look at each of the aforementioned scenarios.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看一下前面提到的每个场景。
- en: Process automation
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 流程自动化
- en: Process automation refers to the development of scripts that reflect real-world
    processes. Process automation comprises multiple activities, where each activity
    performs a discrete task. Together, these activities form a complete process.
    The activities might be executed on the basis of whether the previous activity
    executed successfully or not.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 流程自动化指的是开发反映现实世界流程的脚本。流程自动化包括多个活动，每个活动执行一个独立的任务。所有这些活动共同组成一个完整的流程。活动的执行可能取决于前一个活动是否成功执行。
- en: 'There are some requirements that any process automation requires from the infrastructure
    it is executed on. Some of them are as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 任何流程自动化都需要其执行所依赖的基础设施满足一些要求。以下是其中的一些要求：
- en: The ability to create workflows
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建工作流的能力
- en: The ability to execute for a long duration
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够执行长时间运行的任务
- en: The ability to save the execution state when the workflow is not complete, which
    is also known as checkpointing and hydration
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够在工作流未完成时保存执行状态，这也被称为检查点和水合作用
- en: The ability to resume from the last saved state instead of starting from the
    beginning
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够从最后保存的状态恢复，而不是从头开始
- en: The next scenario we are going to explore is configuration management.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们要探讨的场景是配置管理。
- en: Configuration management
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置管理
- en: Configuration management refers to the process of managing the system configuration
    throughout its life cycle. Azure Automation State Configuration is the Azure configuration
    management service that allows users to write, manage, and compile PowerShell
    DSC configuration for cloud nodes and on-premises datacenters.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理是指在整个生命周期内管理系统配置的过程。Azure 自动化状态配置是 Azure 的配置管理服务，允许用户为云节点和本地数据中心编写、管理和编译
    PowerShell DSC 配置。
- en: Azure Automation State Configuration lets us manage Azure VMs, Azure Classic
    VMs, and physical machines or VMs (Windows/Linux) on-premises, and it also provides
    support for VMs in other cloud providers.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 自动化状态配置让我们能够管理 Azure 虚拟机、Azure 经典虚拟机以及本地的物理机器或虚拟机（Windows/Linux），并且还支持其他云服务提供商的虚拟机。
- en: One of the biggest advantages of Azure Automation State Configuration is it
    provides scalability. We can manage thousands of machines from a single central
    management interface. We can assign configurations to machines with ease and verify
    whether they are compliant with the desired configuration.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 自动化状态配置的最大优势之一是它提供了可扩展性。我们可以通过单一的中央管理界面管理成千上万台机器。我们可以轻松地将配置分配给机器，并验证它们是否符合预期的配置。
- en: Another advantage is that Azure Automation can be used as a repository to store
    your **Desired State Configuration** (**DSC**) configurations, and at the time
    of need they can be used.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个优势是 Azure 自动化可以作为存储 **所需状态配置**（**DSC**）配置的仓库，且在需要时可以使用这些配置。
- en: In the next section, we will be talking about update management.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论更新管理。
- en: Update management
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更新管理
- en: 'As you already know, update management is the responsibility of the customer
    to manage updates and patches when it comes to IaaS. The Update Management feature
    of Azure Automation can be used to automate or manage updates and patches for
    your Azure VMs. There are multiple methods by which you can enable Update Management
    on your Azure VM:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你已经知道的那样，更新管理是客户在 IaaS 环境中负责管理更新和补丁的任务。Azure 自动化的更新管理功能可以用来自动化或管理 Azure 虚拟机的更新和补丁。有多种方式可以启用
    Azure 虚拟机的更新管理：
- en: From your Automation account
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从你的自动化帐户
- en: By browsing the Azure portal
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过浏览 Azure 门户
- en: From a runbook
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过运行簿
- en: From an Azure VM
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Azure 虚拟机
- en: Enabling it from an Azure VM is the easiest method. However, if you have a large
    number of VMs and need to enable Update Management, then you have to consider
    a scalable solution such as a runbook or from an Automation account.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Azure 虚拟机启用是最简单的方法。然而，如果你有大量虚拟机并且需要启用更新管理，那么你必须考虑一个可扩展的解决方案，例如运行簿或从自动化帐户进行操作。
- en: Now that you are clear about the scenarios, let's explore the concepts related
    to Azure Automation.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经了解了相关场景，我们现在来探讨与 Azure 自动化相关的概念。
- en: Concepts related to Azure Automation
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与 Azure 自动化相关的概念
- en: You now know that Azure Automation requires an account, which is called an Azure
    Automation account. Before we dive deeper, let's examine the concepts related
    to Azure Automation. Understanding the meaning of each of these terms is very
    important, as we are going to use these terms throughout this chapter. Let's start
    with runbook.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道 Azure 自动化需要一个帐户，称为 Azure 自动化帐户。在我们深入探讨之前，让我们先了解与 Azure 自动化相关的概念。理解这些术语的含义非常重要，因为我们将在本章中贯穿使用这些术语。我们从运行簿开始。
- en: Runbook
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行簿
- en: 'An Azure Automation runbook is a collection of scripting statements representing
    a single step in process automation or a complete process automation. It is possible
    to invoke other runbooks from a parent runbook, and these runbooks can be authored
    in multiple scripting languages. The languages that support authoring runbooks
    are as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 自动化运行簿是表示过程自动化中单个步骤或完整过程自动化的一组脚本语句。可以从父级运行簿调用其他运行簿，并且这些运行簿可以用多种脚本语言编写。支持编写运行簿的语言如下：
- en: PowerShell
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PowerShell
- en: Python 2 (at the time of writing)
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 2（截至目前）
- en: PowerShell workflows
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PowerShell 工作流
- en: Graphical PowerShell
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图形化 PowerShell
- en: Graphical PowerShell workflows
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图形化 PowerShell 工作流
- en: 'Creating an Automation account is very easy and can be done from the Azure
    portal. In the **All Services** blade, you can find **Automation Account**, or
    you can search for it in the Azure portal. As mentioned before, during creation
    you will get an option to create a Run As account. *Figure 4.4* shows the inputs
    required to create an Automation account:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自动化账户非常简单，可以通过 Azure 门户完成。在**所有服务**面板中，你可以找到**自动化账户**，或者你可以在 Azure 门户中搜索它。如前所述，在创建过程中你将有机会创建一个
    Run As 账户。*图 4.4*展示了创建自动化账户所需的输入信息：
- en: '![Creating an Automation account in the ‘Add Automation Account’ pane and providing
    the details for the Automation account Name, Subscription, Resource group, and
    Location.](img/Figure_4.4.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![在“添加自动化账户”面板中创建一个自动化账户，并提供自动化账户名称、订阅、资源组和位置的详细信息。](img/Figure_4.4.jpg)'
- en: 'Figure 4.4: Creating an Automation account'
  id: totrans-76
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.4：创建自动化账户
- en: Run As accounts
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Run As 账户
- en: Azure Automation accounts, by default, do not have access to any resources included
    in any Azure subscription, including the subscription in which they are hosted.
    An account needs access to an Azure subscription and its resources in order to
    manage them. A Run As account is one way to provide access to subscriptions and
    the resources within them.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Azure 自动化账户无法访问任何包含在 Azure 订阅中的资源，包括托管它们的订阅。账户需要访问 Azure 订阅及其资源，才能进行管理。Run
    As 账户是一种为订阅及其中的资源提供访问权限的方式。
- en: This is an optional exercise. There can be at most one Run As account for each
    classic and resource manager-based subscription; however, an Automation account
    might need to connect to numerous subscriptions. In such cases, it is advisable
    to create shared resources for each of the subscriptions and use them in runbooks.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个可选练习。每个经典和资源管理器类型的订阅最多只能有一个 Run As 账户；然而，一个自动化账户可能需要连接到多个订阅。在这种情况下，建议为每个订阅创建共享资源并在
    runbook 中使用。
- en: 'After creating the Automation account, navigate to the **Run as accounts**
    view on the portal and you will see that two types of accounts can be created.
    In *Figure 4.5*, you can see that the option to create an **Azure Run As Account**
    and an **Azure Classic Run As Account** is available in the **Run as accounts**
    blade:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自动化账户后，导航到门户中的**Run As 账户**视图，你将看到可以创建两种类型的账户。在*图 4.5*中，你可以看到**Azure Run As
    账户**和**Azure Classic Run As 账户**的创建选项可用：
- en: '![Clicking on the left-hand navigation to get into the ‘Run as accounts’ view
    and then creating a Run As account.](img/Figure_4.5.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![点击左侧导航进入“Run As 账户”视图，然后创建一个 Run As 账户。](img/Figure_4.5.jpg)'
- en: 'Figure 4.5: Azure Run As Account options'
  id: totrans-82
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.5：Azure Run As 账户选项
- en: These Run As accounts can be created using the Azure portal, PowerShell, and
    the CLI. For information about creating these accounts using PowerShell, visit
    [https://docs.microsoft.com/azure/automation/manage-runas-account](https://docs.microsoft.com/azure/automation/manage-runas-account).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 Run As 账户可以通过 Azure 门户、PowerShell 和 CLI 创建。有关通过 PowerShell 创建这些账户的信息，请访问[https://docs.microsoft.com/azure/automation/manage-runas-account](https://docs.microsoft.com/azure/automation/manage-runas-account)。
- en: In the case of the ARM Run As account, this script creates a new Azure AD service
    principal and a new certificate and provides contributor RBAC permissions to the
    newly created service principal on the subscription.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 ARM Run As 账户，该脚本会创建一个新的 Azure AD 服务主体和一个新的证书，并为新创建的服务主体提供在订阅上的贡献者 RBAC 权限。
- en: Jobs
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 作业
- en: The submission of a job request is not linked directly to the execution of the
    job request because of Azure Automation's decoupled architecture. The linkage
    between them is indirect using a data store. When a request to execute a runbook
    is received by Automation, it creates a new record in its database with all the
    relevant information. There is another service running on multiple servers, known
    as Hybrid Runbook Worker, within Azure, which looks for any new entries added
    to the database for the execution of a runbook. Once it sees a new record, it
    locks the record so that no other service can read it and then executes the runbook.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 提交工作请求与执行工作请求并没有直接的关联，这是因为 Azure 自动化采用了松耦合架构。它们之间的联系是间接的，通过数据存储来实现。当自动化接收到执行
    runbook 的请求时，它会在数据库中创建一条包含所有相关信息的新记录。Azure 中还运行着一个名为混合 Runbook Worker 的服务，它分布在多个服务器上，负责查找任何新添加到数据库中的记录，并执行
    runbook。一旦它发现新记录，它会锁定该记录，以防其他服务读取，然后执行 runbook。
- en: Assets
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 资源
- en: 'Azure Automation assets refer to shared artifacts that can be used across runbooks.
    They are shown in *Figure 4.6*:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 自动化资产指的是可以在运行书之间共享并使用的工件。它们显示在*图 4.6*中：
- en: '![The Shared artifacts in Azure Automationare listed under ‘Shared Resources’
    as Credentials, Connections, Certificates, and Variables.](img/Figure_4.6.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![Azure 自动化中的共享工件列在“共享资源”下，作为凭证、连接、证书和变量。](img/Figure_4.6.jpg)'
- en: 'Figure 4.6: Shared artifacts in Azure Automation'
  id: totrans-90
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.6：Azure 自动化中的共享工件
- en: Credentials
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 凭证
- en: 'Credentials refers to the secrets, such as the username/password combination,
    that can be used to connect to other integration services that need authentication.
    These credentials can be used within runbooks using the `Get-AutomationPSCredential`
    PowerShell cmdlet along with its associated name:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 凭证指的是用于连接到需要身份验证的其他集成服务的机密信息，如用户名/密码组合。这些凭证可以在运行书中使用 `Get-AutomationPSCredential`
    PowerShell cmdlet 和其相关名称：
- en: '[PRE0]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The Python syntax requires that we import the `automationassets` module and
    use the `get_automation_credential` function along with the associated credential
    name:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Python 语法要求我们导入 `automationassets` 模块，并使用 `get_automation_credential` 函数及其相关凭证名称：
- en: '[PRE1]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Certificates
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 证书
- en: Certificates refers to the X.509 certificate that can be purchased from certificate
    authorities or can be self-signed. Certificates are used for identification purposes
    in Azure Automation. Every certificate has a pair of keys known as private/public
    keys. The private key is used for creating a certificate asset in Azure Automation,
    and the public key should be available in the target service. Using the private
    key, the Automation account can create a digital signature and append it to the
    request before sending it to the target service. The target service can fetch
    the details (the hash) from the digital signature using the already available
    public key and ascertain the identity of the sender of the request.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 证书指的是可以从证书颁发机构购买或自签的 X.509 证书。证书用于 Azure 自动化中的身份验证。每个证书都有一对密钥，称为私钥/公钥。私钥用于在
    Azure 自动化中创建证书资产，公钥应在目标服务中可用。通过使用私钥，自动化账户可以创建数字签名，并将其附加到请求中，然后将请求发送到目标服务。目标服务可以使用已存在的公钥从数字签名中提取详细信息（哈希），从而确认请求发送者的身份。
- en: Certificate assets store certificate information and keys in Azure Automation.
    These certificates can be used directly within runbooks, and they are also used
    by the connection's assets. The next section shows the way to consume certificates
    in a connection asset. The Azure service principal connection asset uses a certificate
    thumbprint to identify the certificate it wants to use, while other types of connection
    use the name of the certificate asset to access the certificate.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 证书资产存储 Azure 自动化中的证书信息和密钥。这些证书可以在运行书中直接使用，并且也被连接的资产所使用。下一节展示了如何在连接资产中使用证书。Azure
    服务主体连接资产使用证书指纹来识别它想要使用的证书，而其他类型的连接则使用证书资产的名称来访问证书。
- en: A certificate asset can be created by providing a name and uploading a certificate.
    It is possible to upload public certificates (`.cer` files) as well as private
    certificates (`.pfx` files). The private part of the certificate also has a password
    that should be used before accessing the certificate.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过提供名称和上传证书来创建证书资产。可以上传公钥证书（`.cer` 文件）以及私钥证书（`.pfx` 文件）。证书的私钥部分也有一个密码，在访问证书之前需要使用该密码。
- en: '![Navigating to the Certificates blade and then selecting the ‘Add a certificate
    button’, which opens the ‘Add a certificate’ pane. Here, we add the certificate
    details.](img/Figure_4.7.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![导航到证书面板，然后选择“添加证书”按钮，打开“添加证书”窗格。在这里，我们添加证书详细信息。](img/Figure_4.7.jpg)'
- en: 'Figure 4.7: Adding a certificate to Azure Automation'
  id: totrans-101
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.7：向 Azure 自动化添加证书
- en: Creating a certificate involves providing a name and a description, uploading
    the certificate, providing a password (in the case of `.pfx` files), and informing
    the user whether the certificate is exportable or not.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 创建证书需要提供名称和描述，上传证书，提供密码（对于 `.pfx` 文件），并告知用户证书是否可以导出。
- en: There should be a certificate available before this certificate asset can be
    created. Certificates can be purchased from certificate authorities or can be
    generated. Generated certificates are known as self-signed certificates. It is
    always a good practice to use certificates from certificate authorities for important
    environments such as production environments. It is fine to use self-signing certificates
    for development purposes.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建此证书资产之前，必须有一个可用的证书。可以从证书颁发机构购买证书，也可以生成证书。生成的证书称为自签名证书。在生产环境等重要环境中，使用证书颁发机构的证书始终是最佳实践。用于开发目的时，使用自签名证书是可以的。
- en: 'To generate a self-signed certificate using PowerShell, use this command:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 PowerShell 生成自签名证书，请使用以下命令：
- en: '[PRE2]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will create a new certificate in the current user certificate store in
    your personal folder. Since this certificate also needs to be uploaded to the
    Azure Automation certificate asset, it should be exported to the local file system,
    as shown in *Figure 4.8*:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在当前用户的个人文件夹中的证书存储中创建一个新证书。由于该证书还需要上传到 Azure 自动化证书资产，因此应将其导出到本地文件系统，如*图 4.8*所示：
- en: '![Exporting the certificate to the local filesystem using the ‘Certificate
    Export Wizard’.](img/Figure_4.8.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![使用“证书导出向导”将证书导出到本地文件系统。](img/Figure_4.8.jpg)'
- en: 'Figure 4.8: Exporting the certificate'
  id: totrans-108
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.8：导出证书
- en: When exporting the certificate, the private key should also be exported, so
    **Yes, export the private key** should be selected.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 导出证书时，还应导出私钥，因此应该选择**是，导出私钥**。
- en: Select the **Personal Information Exchange** option, and the rest of the values
    should remain as the defaults.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**个人信息交换**选项，其他值应保持默认。
- en: Provide a password and the filename `C:\azureforarchitects.pfx`, and the export
    should be successful.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 提供密码和文件名`C:\azureforarchitects.pfx`，并且导出应该成功。
- en: Connecting to Azure can be done in multiple ways. However, the most secure is
    by way of a certificate. A service principal is created on Azure using the certificate.
    The service principal can be authenticated against using the certificate. The
    private key of the certificate is with the user and the public part is with Azure.
    In the next section, a service principal will be created using the certificate
    created in this section.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到 Azure 有多种方式。然而，最安全的方式是通过证书进行。服务主体是在 Azure 上使用证书创建的，可以使用证书进行身份验证。证书的私钥由用户持有，公钥部分由
    Azure 持有。在下一节中，将使用本节中创建的证书来创建服务主体。
- en: Creating a service principal using certificate credentials
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用证书凭证创建服务主体
- en: A service principal can be created using the Azure portal, Azure CLI, or Azure
    PowerShell. The script for creating a service principal using Azure PowerShell
    is available in this section.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过 Azure 门户、Azure CLI 或 Azure PowerShell 创建服务主体。使用 Azure PowerShell 创建服务主体的脚本在本节中提供。
- en: 'After logging into Azure, the certificate created in the previous section is
    converted into base64 encoding. A new service principal, `azureforarchitects`,
    is created, and the certificate credential is associated with the newly created
    service principal. Finally, the new service principal is provided contributor
    role-based access control permissions on the subscription:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 登录 Azure 后，将上一节中创建的证书转换为 base64 编码。创建一个新的服务主体`azureforarchitects`，并将证书凭证与新创建的服务主体关联。最后，为新服务主体提供基于角色的访问控制权限，以便访问该订阅：
- en: '[PRE3]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To create a connection asset, the application ID can be obtained using the
    `Get-AzADServicePrincipal` cmdlet, and the result is shown in *Figure 4.9*:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建连接资产，可以使用`Get-AzADServicePrincipal` cmdlet获取应用程序 ID，结果如*图 4.9*所示：
- en: '![The output of the Get-AzADServicePrincipal command, which displays the service
    principal name, Application ID, Object ID, and so on.](img/Figure_4.9.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![Get-AzADServicePrincipal 命令的输出，显示了服务主体名称、应用程序 ID、对象 ID 等信息。](img/Figure_4.9.jpg)'
- en: 'Figure 4.9: Checking the service principal'
  id: totrans-119
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.9：检查服务主体
- en: The certificate thumbprint can be obtained using the certificate reference along
    with `SubscriptionId`, which can be obtained using the `Get-AzSubscription` cmdlet.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用证书引用和`SubscriptionId`来获取证书指纹，`SubscriptionId`可以通过`Get-AzSubscription` cmdlet获取。
- en: Connections
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: 'Connection assets are used for creating connection information to external
    services. In this regard, even Azure is considered as an external service. Connection
    assets hold all the necessary information needed for successfully connecting to
    a service. There are three connection types provided out of the box by Azure Automation:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 连接资产用于创建与外部服务的连接信息。在这方面，Azure 也被视为外部服务。连接资产包含成功连接到服务所需的所有必要信息。Azure 自动化提供了三种默认的连接类型：
- en: Azure
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure
- en: Azure classic certificate
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 经典证书
- en: Azure service principal
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 服务主体
- en: It is a good practice to use Azure service principal to connect to Azure Resource
    Manager resources and to use the Azure classic certificate for Azure classic resources.
    It is important to note that Azure Automation does not provide any connection
    type to connect to Azure using credentials such as a username and password.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Azure 服务主体连接到 Azure 资源管理器资源，并使用 Azure 经典证书连接到 Azure 经典资源是一种良好的实践。需要注意的是，Azure
    自动化不提供任何使用用户名和密码等凭据连接到 Azure 的连接类型。
- en: Azure and Azure classic certificates are similar in nature. They both help us
    connect to Azure Service management API-based resources. In fact, Azure Automation
    creates an Azure classic certificate connection while creating a Classic Run As
    account.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 和 Azure 经典证书本质上是相似的。它们都帮助我们连接到基于 Azure 服务管理 API 的资源。实际上，Azure 自动化在创建经典
    Run As 帐户时，会创建一个 Azure 经典证书连接。
- en: Azure service principal is used internally by Run As accounts to connect to
    Azure Resource Manager-based resources.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 服务主体由 Run As 帐户内部使用，用于连接到基于 Azure 资源管理器的资源。
- en: 'A new connection asset of type **AzureServicePrincipal** is shown in *Figure
    4.10*. It needs:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.10 中显示了一个新的类型为 **AzureServicePrincipal** 的连接资产。它需要：
- en: The name of the connection. It is mandatory to provide a name.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接的名称。提供名称是必需的。
- en: A description of the connection. This value is optional.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接的描述。这个值是可选的。
- en: Select an appropriate `AzureServicePrincipal` is selected for creating a connection
    asset for all purposes in this chapter.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本章中，选择适当的 `AzureServicePrincipal` 用于创建连接资产。
- en: '`clientid`, is the application ID generated during the creation of a service
    principal. The next section shows the process of creating a service principal
    using Azure PowerShell. It is mandatory to provide an application ID.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clientid` 是在创建服务主体时生成的应用程序 ID。下一部分将展示如何使用 Azure PowerShell 创建服务主体的过程。提供应用程序
    ID 是必需的。'
- en: '`Get-AzSubscription` cmdlet. It is mandatory to provide a tenant identifier.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Get-AzSubscription` cmdlet。提供租户标识符是必需的。'
- en: '**CertificateThumbprint** is the certificate identifier. This certificate should
    already be uploaded to Azure Automation using the certificate asset. It is mandatory
    to provide a certificate thumbprint.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CertificateThumbprint** 是证书标识符。该证书应已通过证书资产上传到 Azure 自动化。提供证书指纹是必需的。'
- en: '**SubscriptionId** is the identifier of the subscription. It is mandatory to
    provide a subscription ID.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SubscriptionId** 是订阅的标识符。提供订阅 ID 是必需的。'
- en: 'You can add a new connection using the **Connections** blade in the Automation
    account, as shown in *Figure 4.10*:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用自动化帐户中的**连接**面板添加新连接，如*图 4.10*所示：
- en: '![Navigating to the Connections blade and selecting the ‘Add a connection’
    button and then adding the connection details.](img/Figure_4.10.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![导航到“连接”面板，选择“添加连接”按钮，然后添加连接详细信息。](img/Figure_4.10.jpg)'
- en: 'Figure 4.10: Adding a new connection to the Automation Account'
  id: totrans-139
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.10：将新连接添加到自动化帐户
- en: Runbook authoring and execution
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Runbook 编写和执行
- en: Azure Automation allows the creation of automation scripts known as runbooks.
    Multiple runbooks can be created using the Azure portal or PowerShell ISE. They
    can also be imported from **Runbook Gallery**. The gallery can be searched for
    specific functionality, and the entire code is displayed within the runbook.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 自动化允许创建称为 Runbook 的自动化脚本。可以通过 Azure 门户或 PowerShell ISE 创建多个 Runbook。它们也可以从**Runbook
    库**导入。可以搜索特定功能，整个代码将在 Runbook 中显示。
- en: 'A runbook can accept parameter values just like a normal PowerShell script.
    The next example takes a single parameter named `connectionName` of type `string`.
    It is mandatory to supply a value for this parameter when executing this runbook:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Runbook 可以接受参数值，就像普通的 PowerShell 脚本一样。下一个示例接受一个名为 `connectionName` 的参数，类型为 `string`。在执行该
    Runbook 时，必须为此参数提供值：
- en: '[PRE4]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The runbook uses the `Get-AutomationConnection` cmdlet to reference the shared
    connection asset. The name of the asset is contained within the parameter value.
    Once the reference to the connection asset has been made, the values from the
    connection reference are populated into the `$connection` variable, and subsequently,
    they are assigned to multiple other variables.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: runbook 使用 `Get-AutomationConnection` cmdlet 引用共享连接资产。资产的名称包含在参数值中。引用连接资产后，连接引用中的值会填充到
    `$connection` 变量中，并随后分配给多个其他变量。
- en: The `Login-AzureRMAccount` cmdlet authenticates with Azure, and it supplies
    the values obtained from the connection object. It uses the service principal
    created earlier in this chapter for authentication.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`Login-AzureRMAccount` cmdlet 用于与 Azure 进行身份验证，并提供从连接对象中获得的值。它使用本章前面创建的服务主体进行身份验证。'
- en: Finally, the runbook invokes the `Get-AzureRMVm` cmdlet to list all the VMs
    in the subscription.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，runbook 调用 `Get-AzureRMVm` cmdlet 来列出订阅中的所有虚拟机。
- en: By default, Azure Automation still provides `AzureRM` modules for working with
    Azure. It does not install `Az` modules by default. Later we will install an `Az`
    module manually in the Azure Automation account and use cmdlets in runbooks.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Azure Automation 仍提供用于与 Azure 一起工作的 `AzureRM` 模块。默认情况下，它不会安装 `Az` 模块。稍后我们将在
    Azure Automation 帐户中手动安装 `Az` 模块，并在 runbook 中使用 cmdlet。
- en: Parent and child runbooks
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 父级和子级 runbook
- en: Runbooks have a life cycle, from being authored to being executed. These life
    cycles can be divided into authoring status and execution status.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Runbook 具有生命周期，从编写到执行。这些生命周期可以分为编写状态和执行状态。
- en: The authoring life cycle is shown in *Figure 4.11*.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 编写生命周期如*图 4.11*所示。
- en: When a new runbook is created, it has the **New** status and as it is edited
    and saved multiple times, it takes the **In edit** status, and finally, when it
    is published, the status changes to **Published**. It is also possible to edit
    a published runbook, and in that case, it goes back to the **In edit** status.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当新创建一个 runbook 时，它的状态为 **New**，当进行多次编辑和保存后，状态变为 **In edit**，最终，当它被发布时，状态更改为
    **Published**。已发布的 runbook 也可以进行编辑，在这种情况下，状态会返回为 **In edit**。
- en: '![A flow diagram showing the authoring life cycle with three stages—New, In
    edit, and Published.](img/Figure_4.11.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![显示包含三个阶段——新建、编辑中、已发布——的编写生命周期流程图。](img/Figure_4.11.jpg)'
- en: 'Figure 4.11: Authoring life cycle'
  id: totrans-153
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.11：编写生命周期
- en: The execution life cycle is described next.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来将描述执行生命周期。
- en: 'The life cycle starts with the beginning of a runbook execution request. A
    runbook can be executed in multiple ways:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 生命周期从 runbook 执行请求开始。runbook 可以通过多种方式执行：
- en: Manually from the Azure portal
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 Azure 门户手动启动
- en: By using a parent runbook as a child runbook
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将父级 runbook 作为子级 runbook 使用
- en: By means of a webhook
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 webhook 方式
- en: It does not matter how a runbook is initiated; the life cycle remains the same.
    A request to execute the runbook is received by the Automation engine. The Automation
    engine creates a job and assigns it to a runbook worker. Currently, the runbook
    has a status of **Queued**.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 无论 runbook 是如何启动的，生命周期都是相同的。执行 runbook 的请求会被自动化引擎接收，自动化引擎会创建一个作业并将其分配给 runbook
    worker。目前，runbook 的状态为 **Queued**。
- en: There are multiple runbook workers, and the chosen one picks up the job request
    and changes the status to **Starting**. At this stage, if there are any scripting
    and parsing issues in the script, the status changes to **Failed** and the execution
    is halted.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 有多个 runbook worker，选定的 worker 会接收作业请求并将状态更改为 **Starting**。此时，如果脚本中存在任何脚本编写或解析问题，状态会变为
    **Failed**，执行将被中止。
- en: Once the runbook execution is started by the worker, the status is changed to
    **Running**. The runbook can have multiple different statuses once it is running.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 runbook 执行被 worker 启动，状态将变为 **Running**。runbook 在运行时可能会有多种不同的状态。
- en: The runbook will change its status to **Completed** if the execution happens
    without any unhandled and terminating exceptions.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果执行过程中没有未处理的终止异常，runbook 的状态会变为 **Completed**。
- en: The running runbook can be manually stopped by the user, and it will have the
    **Stopped** status.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 运行中的 runbook 可以由用户手动停止，状态将变为 **Stopped**。
- en: '![A block diagram displaying the execution life cycle for runbooks.](img/Figure_4.12.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![显示 runbook 执行生命周期的框图。](img/Figure_4.12.jpg)'
- en: 'Figure 4.12: The execution life cycle for runbooks'
  id: totrans-165
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.12：runbook 的执行生命周期
- en: The user can also suspend and resume the execution of the runbook.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 用户还可以暂停和恢复 runbook 的执行。
- en: Creating a runbook
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个运行簿
- en: A runbook can be created from the Azure portal by going to the **Runbook** menu
    item in the left navigation pane. A runbook has a name and type. The type determines
    the scripting language used for creating the runbook. We have already discussed
    the possible languages, and in this chapter, PowerShell will be used primarily
    for all examples.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过访问 Azure 门户中的左侧导航面板中的**运行簿**菜单项来创建运行簿。一个运行簿具有名称和类型。类型决定了用于创建运行簿的脚本语言。我们已经讨论了可能的语言，本章中将主要使用
    PowerShell 进行所有示例。
- en: Creating a PowerShell runbook is exactly the same as creating a PowerShell script.
    It can declare and accept multiple parameters—the parameters can have attributes
    such as data types, which are mandatory (just like any PowerShell parameter attributes).
    It can invoke PowerShell cmdlets whose modules are available and already loaded
    and declared, and it can invoke functions and return output.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 PowerShell 运行簿与创建 PowerShell 脚本完全相同。它可以声明并接受多个参数—这些参数可以具有数据类型等属性，其中一些是必填的（就像任何
    PowerShell 参数属性一样）。它可以调用已加载和声明的 PowerShell cmdlet 模块，也可以调用函数并返回输出。
- en: A runbook can also invoke another runbook. It can invoke a child runbook inline
    within the original process and context or in a separate process and context.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 运行簿还可以调用另一个运行簿。它可以在原始流程和上下文内调用子运行簿，或者在单独的流程和上下文中调用。
- en: 'Invoking a runbook inline is similar to invoking a PowerShell script. The next
    example invokes a child runbook using the inline approach:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 内联调用运行簿类似于调用 PowerShell 脚本。下一个示例使用内联方法调用子运行簿：
- en: '[PRE5]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding code, we saw how the `ConnectAzure` runbook accepts a parameter
    named `connectionName` and an appropriate value is supplied to it. This runbook
    creates a connection to Azure after authenticating with it using a service principal.
    Check out the syntax for invoking the child runbook. It is very similar to invoking
    a general PowerShell script along with parameters.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们看到`ConnectAzure`运行簿如何接受一个名为`connectionName`的参数，并向其提供适当的值。此运行簿在通过服务主体进行身份验证后创建与
    Azure 的连接。请查看调用子运行簿的语法，它与调用一般 PowerShell 脚本并传递参数非常相似。
- en: The next line of code, `Get-AzVm`, fetches the relevant information from Azure
    and lists the VM details. You will notice that although the authentication happens
    within a child runbook, the `Get-AzVm` cmdlet succeeds and lists all the VMs in
    the subscription because the child runbook executes in the same job as that of
    the parent runbook, and they share the context.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行代码`Get-AzVm`从 Azure 获取相关信息并列出虚拟机的详细信息。你会注意到，尽管身份验证是在子运行簿中进行的，但`Get-AzVm`
    cmdlet 成功执行，并列出了订阅中的所有虚拟机，因为子运行簿在与父运行簿相同的作业中执行，它们共享上下文。
- en: 'Alternatively, a child runbook can be invoked using the `Start-AzurermAutomationRunbook`
    cmdlet provided by Azure Automation. This cmdlet accepts the name of the Automation
    account, the resource group name, and the name of the runbook along with parameters,
    as mentioned here:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，可以使用 Azure 自动化提供的`Start-AzurermAutomationRunbook` cmdlet 来调用子运行簿。此 cmdlet
    接受自动化帐户的名称、资源组名称以及运行簿的名称和参数，详情如下：
- en: '[PRE6]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Using this approach creates a new job that's different from the parent job,
    and they run in different contexts.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法会创建一个新的作业，它与父作业不同，并且在不同的上下文中运行。
- en: Using Az modules
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Az 模块
- en: So far, all examples have used `AzureRM` modules. The previously shown runbooks
    will be re-written to use cmdlets from the `Az` module.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，所有示例都使用了`AzureRM`模块。之前展示的运行簿将重新编写，改为使用`Az`模块中的 cmdlet。
- en: As mentioned before, `Az` modules are not installed by default. They can be
    installed using the **Modules gallery** menu item in Azure Automation.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`Az`模块默认并未安装。可以通过 Azure 自动化中的**模块库**菜单项来安装它们。
- en: 'Search for `Az` in the gallery and the results will show multiple modules related
    to it. If the `Az` module is selected to be imported and installed, it will throw
    an error saying that its dependent modules are not installed and that they should
    be installed before installing the current module. The module can be found on
    the `Az`, as shown in *Figure 4.13*:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在库中搜索`Az`，结果会显示与之相关的多个模块。如果选择导入并安装`Az`模块，系统会抛出一个错误，表示其依赖的模块未安装，并且需要先安装这些模块才能安装当前模块。该模块可以在`Az`上找到，如*图
    4.13*所示：
- en: '![Searching the Az module on the Modules gallery blade.](img/Figure_4.13.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![在模块库面板中搜索 Az 模块。](img/Figure_4.13.jpg)'
- en: 'Figure 4.13: Finding the Az module on the Modules gallery blade'
  id: totrans-183
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.13：在模块库面板中查找 Az 模块
- en: 'Instead of selecting the `Az` module, select **Az.Accounts** and import the
    module by following the wizard, as shown in *Figure 4.14*:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 不选择`Az`模块，而是选择**Az.Accounts**并按照向导导入该模块，如*图4.14*所示：
- en: '![Importing the Az.Accounts module.](img/Figure_4.14.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![导入Az.Accounts模块](img/Figure_4.14.jpg)'
- en: 'Figure 4.14: Importing the Az.Accounts module'
  id: totrans-186
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4.14：导入Az.Accounts模块
- en: After installing `Az.Accounts`, the `Az.Resources` module can be imported. Azure
    virtual machine-related cmdlets are available in the `Az.Compute` module, and
    it can also be imported using the same method as we used to import `Az.Accounts`.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`Az.Accounts`后，可以导入`Az.Resources`模块。与Azure虚拟机相关的cmdlet位于`Az.Compute`模块中，可以使用与导入`Az.Accounts`相同的方法导入它。
- en: 'Once these modules are imported, the runbooks can use the cmdlets provided
    by these modules. The previously shown `ConnectAzure` runbook has been modified
    to use the `Az` module:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 导入这些模块后，runbook可以使用这些模块提供的cmdlet。之前展示的`ConnectAzure` runbook已被修改为使用`Az`模块：
- en: '[PRE7]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The last two lines of the code are important. They are using `Az` cmdlets instead
    of `AzureRM` cmdlets.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的最后两行很重要。它们使用的是`Az` cmdlet，而不是`AzureRM` cmdlet。
- en: 'Executing this runbook will give results similar to this:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此runbook将得到类似以下的结果：
- en: '![Output showing that the Az.Accounts module successfully imported and the
    status is displayed as completed.](img/Figure_4.15.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![输出显示Az.Accounts模块成功导入，状态显示为完成](img/Figure_4.15.jpg)'
- en: 'Figure 4.15: The Az.Accounts module successfully imported'
  id: totrans-193
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4.15：Az.Accounts模块成功导入
- en: In the next section, we will work with webhooks.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将使用Webhook。
- en: Webhooks
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Webhooks
- en: Webhooks became famous after the advent of REST endpoints and JSON data payloads.
    Webhooks are an important concept and architectural decision in the extensibility
    of any application. Webhooks are placeholders that are left within special areas
    of an application so that the user of the application can fill those placeholders
    with endpoint URLs containing custom logic. The application will invoke the endpoint
    URL, automatically passing in the necessary parameters, and then execute the login
    available therein.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: Webhook在REST端点和JSON数据负载出现后变得流行。Webhook是任何应用程序可扩展性中的一个重要概念和架构决策。Webhook是应用程序中特殊区域中的占位符，用户可以用包含自定义逻辑的端点URL填充这些占位符。应用程序将调用端点URL，自动传递必要的参数，并执行其中的登录操作。
- en: Azure Automation runbooks can be invoked manually from the Azure portal. They
    can also be invoked using PowerShell cmdlets and the Azure CLI. There are SDKs
    available in multiple languages that are capable of invoking runbooks.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Automation的runbook可以通过Azure门户手动调用。它们也可以使用PowerShell cmdlet和Azure CLI调用。还有多种语言的SDK可用于调用runbook。
- en: Webhooks are one of the most powerful ways to invoke a runbook. It is important
    to note that runbooks containing the main logic should never be exposed directly
    as a webhook. They should be called using a parent runbook, and the parent runbook
    should be exposed as a webhook. The parent runbook should ensure that appropriate
    checks are made before invoking the main child runbook.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Webhook是调用runbook的最强大方式之一。需要注意的是，包含主要逻辑的runbook不应直接暴露为Webhook。它们应该通过父级runbook来调用，且父级runbook应暴露为Webhook。父级runbook应确保在调用子级runbook之前进行适当的检查。
- en: The first step in creating a webhook is to author a runbook normally, as done
    previously. After a runbook has been authored, it will be exposed as a webhook.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 创建Webhook的第一步是正常编写runbook，如之前所做的。编写完runbook后，它将作为Webhook暴露。
- en: 'A new PowerShell-based runbook named `exposedrunbook` is created. This runbook
    takes a single parameter, `$WebhookData`, of the object type. It should be named
    `verbatim`. This object is created by the Azure Automation runtime and is supplied
    to the runbook. The Azure Automation runtime constructs this object after obtaining
    the HTTP request header values and body content and fills in the `RequestHeader`
    and `RequestBody` properties of this object:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了一个新的基于PowerShell的runbook，名为`exposedrunbook`。此runbook接受一个名为`$WebhookData`的单一参数，类型为对象。它应命名为`verbatim`。该对象由Azure
    Automation运行时创建，并传递给runbook。Azure Automation运行时在获取HTTP请求头值和正文内容后构建该对象，并填充此对象的`RequestHeader`和`RequestBody`属性：
- en: '[PRE8]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The three important properties of this object are `WebhookName`, `RequestHeader`,
    and `RequestBody`. The values are retrieved from these properties and sent to
    the output stream by the runbook.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 该对象的三个重要属性是`WebhookName`、`RequestHeader`和`RequestBody`。这些属性的值将被检索，并由runbook发送到输出流。
- en: The header and body content can be anything that the user supplies when invoking
    the webhook. These values get filled up into the respective properties and become
    available within the runbook. In the previous example, there are two headers set
    by the caller, namely `message` and `status` header. The caller will also supply
    the name of the shared connection to be used as part of the body content.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 头部和正文内容可以是用户在触发 webhook 时提供的任何内容。这些值会填充到相应的属性中，并在 runbook 中使用。在前面的示例中，调用者设置了两个头部，分别是
    `message` 和 `status` 头部。调用者还将提供要作为正文内容一部分使用的共享连接名称。
- en: 'After the runbook is created, it should be published before a webhook can be
    created. After publishing the runbook, clicking on the **Webhook** menu at the
    top starts the process of creating a new webhook for the runbook, as shown in
    *Figure 4.16*:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 runbook 后，必须先发布它，才能创建 webhook。发布 runbook 后，点击顶部的 **Webhook** 菜单，开始为该 runbook
    创建一个新的 webhook，如 *图 4.16* 所示：
- en: '![Navigating to the Webhook menu and creating a new webhook.](img/Figure_4.16.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![导航到 Webhook 菜单并创建一个新的 webhook。](img/Figure_4.16.jpg)'
- en: 'Figure 4.16: Creating a webhook'
  id: totrans-206
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.16：创建 webhook
- en: A name for the webhook should be provided. This value is available within the
    runbook using the `WebhookData` parameter with the `WebhookName` property name.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 应为 webhook 提供一个名称。此值可以在 runbook 中通过 `WebhookData` 参数与 `WebhookName` 属性名称进行访问。
- en: The webhook can be in the `enabled` or `disabled` state, and it can expire at
    a given date and time. It also generates a URL that is unique for this webhook
    and runbook. This URL should be provided to anyone who wishes to invoke the webhook.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: webhook 可以处于 `enabled` 或 `disabled` 状态，并且可以在指定的日期和时间过期。它还会生成一个唯一的 URL，适用于此 webhook
    和 runbook。此 URL 应提供给任何希望触发 webhook 的人。
- en: Invoking a webhook
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 触发 webhook
- en: Webhooks are invoked as HTTP requests using the `POST` method. When a webhook
    is invoked, the HTTP request lands up with Azure Automation to start a runbook.
    It creates the `WebHookData` object, filling it with the incoming HTTP header
    and body data, and creates a job to be picked up by a runbook worker. This call
    uses the webhook URL generated in the previous step.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Webhook 是通过使用 `POST` 方法的 HTTP 请求来触发的。当触发 webhook 时，HTTP 请求会传递到 Azure Automation，以启动一个
    runbook。它会创建 `WebHookData` 对象，填充传入的 HTTP 头部和正文数据，并创建一个任务，由 runbook 工作者处理。此调用使用在前一步中生成的
    webhook URL。
- en: 'The webhook can be invoked using Postman, by any code having the capability
    of calling a `REST` endpoint using the `POST` method. In the next example, PowerShell
    will be used to invoke the webhook:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: webhook 可以通过 Postman 或任何能够使用 `POST` 方法调用 `REST` 端点的代码来触发。在下一个示例中，将使用 PowerShell
    来触发 webhook：
- en: '[PRE9]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The PowerShell code declares the URL for the webhook and constructs the body
    in JSON format, with `name` set to `azureforarchitectsconnection` and a header
    with two header name-value pairs – `subject` and `message`. Both the header and
    body data can be retrieved in the runbook using the `WebhookData` parameter.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 代码声明了 webhook 的 URL，并以 JSON 格式构建正文，`name` 设置为 `azureforarchitectsconnection`，并设置了两个头部名称-值对：`subject`
    和 `message`。头部和正文数据都可以通过 `WebhookData` 参数在 runbook 中获取。
- en: The `invoke-webrequest` cmdlet raises the request on the previously mentioned
    endpoint using the `POST` method, supplying both the header and the body.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`invoke-webrequest` cmdlet 使用 `POST` 方法在前面提到的端点上发起请求，提供头部和正文。'
- en: 'The request is asynchronous in nature, and instead of the actual runbook output,
    the job identifier is returned as an HTTP response. It is also available within
    the response content. The job is shown in *Figure 4.17*:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 请求是异步的，返回的是任务标识符，而不是实际的 runbook 输出，并且该标识符也可以在响应内容中获取。任务显示在 *图 4.17* 中：
- en: '![The job details displayed in the portal with the Id, Status, and the job
    name.](img/Figure_4.17.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![在门户中显示任务详细信息，包括 ID、状态和任务名称。](img/Figure_4.17.jpg)'
- en: 'Figure 4.17: Checking the job'
  id: totrans-217
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.17：检查任务
- en: 'Clicking on `WEBHOOKDATA` shows the values that arrived in the runbook automation
    service in the HTTP request:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 `WEBHOOKDATA` 会显示通过 HTTP 请求到达 runbook 自动化服务的值：
- en: '![The values from WEBHOOKDATA, which is arrived in the runbook automation service
    in the HTTP request (here, displaying the name ‘azureforarchitectsconnection’).](img/Figure_4.18.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![WEBHOOKDATA 中的值，这些值通过 HTTP 请求到达 runbook 自动化服务（此处显示名称为 ''azureforarchitectsconnection''）。](img/Figure_4.18.jpg)'
- en: 'Figure 4.18: Verifying the output'
  id: totrans-220
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.18：验证输出
- en: Clicking on the output menu shows the list of VMs and SQL Server in the subscription.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 点击输出菜单会显示订阅中虚拟机和 SQL 服务器的列表。
- en: The next important concepts in Azure Automation are Azure Monitor and Hybrid
    Workers, and the next sections will explain them in detail.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 自动化中的下一个重要概念是 Azure Monitor 和混合工作者，接下来的章节将详细解释这些概念。
- en: Invoking a runbook from Azure Monitor
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 Azure Monitor 中调用运行书
- en: Azure Automation runbooks can be invoked as responses to alerts generated within
    Azure. Azure Monitor is the central service that manages logs and metrics across
    resources and resource groups in a subscription. You can use Azure Monitor to
    create new alert rules and definitions that, when triggered, can execute Azure
    Automation runbooks. They can invoke an Azure Automation runbook in its default
    form or a webhook that in turn can execute its associated runbook. This integration
    between Azure Monitor and the ability to invoke runbooks opens numerous automation
    opportunities to autocorrect the environment, scale up and down compute resources,
    or take corrective actions without any manual intervention.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 自动化运行书可以作为响应来调用，响应 Azure 中生成的警报。Azure Monitor 是一个集中式服务，用于管理订阅中资源和资源组的日志与指标。您可以使用
    Azure Monitor 创建新的警报规则和定义，触发时可以执行 Azure 自动化运行书。它们可以以默认形式调用 Azure 自动化运行书，或者调用一个
    Webhook，Webhook 进一步执行其关联的运行书。Azure Monitor 与运行书的调用能力之间的集成为自动修正环境、上下调计算资源或在无需人工干预的情况下进行纠正操作提供了无数的自动化机会。
- en: Azure alerts can be created and configured in individual resources and resource
    levels, but it is always a good practice to centralize alert definitions for easy
    and better maintenance and administration.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在单个资源和资源级别创建和配置 Azure 警报，但最佳实践是将警报定义集中管理，便于维护和管理。
- en: Let's go through the process of associating a runbook with an alert and invoking
    the runbook as part of the alert being raised.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步步讲解如何将运行书与警报关联，并在警报触发时调用运行书。
- en: 'The first step is to create a new alert, as shown in *Figure 4.19*:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是创建一个新的警报，如*图 4.19*所示：
- en: '![Selecting the ‘Alerts’ option from the left-hand navigation and clicking
    on the ‘New alert rule’ button.](img/Figure_4.19.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![从左侧导航中选择“警报”选项，然后点击“新建警报规则”按钮。](img/Figure_4.19.jpg)'
- en: 'Figure 4.19: Creating an alert rule'
  id: totrans-229
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.19：创建警报规则
- en: 'Select a resource that should be monitored and evaluated for alert generation.
    A resource group has been selected from the list, and it automatically enables
    all resources within the resource group. It is possible to remove the resource
    selections from the resource group:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个应被监控并评估以生成警报的资源。已经从列表中选择了一个资源组，它会自动启用资源组内的所有资源。也可以从资源组中移除资源选择：
- en: '![Selecting the checkboxesfor the scope of the alert from the available resources.](img/Figure_4.20.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![从可用资源中选择警报的范围复选框。](img/Figure_4.20.jpg)'
- en: 'Figure 4.20: Selecting the scope of the alert'
  id: totrans-232
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.20：选择警报的范围
- en: 'Configure the condition and rules that should get evaluated. Select the **Power
    Off Virtual Machine** signal name after selecting **Activity Log** as the **Signal
    type**:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 配置应评估的条件和规则。在选择**活动日志**作为**信号类型**后，选择**关闭虚拟机**信号名称：
- en: '![Selecting the signal name in the ‘Configure signal logic’ pane.](img/Figure_4.21.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![在“配置信号逻辑”窗格中选择信号名称。](img/Figure_4.21.jpg)'
- en: 'Figure 4.21: Selecting the signal type'
  id: totrans-235
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.21：选择信号类型
- en: 'The resultant window will allow you to configure the `critical` for `Succeeded`:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 结果窗口将允许您为`成功`配置`严重`级别：
- en: '![Setting up the alert logic by configuring the values for the option—event
    level, status, and event initiated by.](img/Figure_4.22.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![通过配置事件级别、状态和发起事件的选项值来设置警报逻辑。](img/Figure_4.22.jpg)'
- en: 'Figure 4.22: Setting up the alert logic'
  id: totrans-238
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.22：设置警报逻辑
- en: After determining the alert condition comes the most important configuration,
    which configures the response to the alert by invoking a runbook. We can use **Action
    groups** to configure the response to an alert. It provides numerous options to
    invoke an Azure function, webhook, or Azure Automation runbook, as well as to
    send emails and SMS.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在确定警报条件之后，最重要的配置就是配置通过调用运行书响应警报。我们可以使用**操作组**来配置警报的响应。它提供了多种选项，可以调用 Azure 函数、Webhook
    或 Azure 自动化运行书，还可以发送电子邮件和短信。
- en: 'Create an action group by providing a name, a short name, its hosting subscription,
    a resource group, and an `Automation Runbook` option as **Action Type**:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个操作组，提供名称、简短名称、托管订阅、资源组，并将**操作类型**设置为`自动化运行书`：
- en: '![Configuring the action group by providing the action name and action type.](img/Figure_4.23.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![通过提供操作名称和操作类型来配置操作组。](img/Figure_4.23.jpg)'
- en: Figure 4.23 Configuring the action group
  id: totrans-242
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.23 配置操作组
- en: 'Selecting an automation runbook will open another blade for selecting an appropriate
    Azure Automation account and runbook. Several runbooks are available out of the
    box, and one of them has been used here:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个自动化运行簿将打开另一个面板，用于选择适当的 Azure 自动化帐户和运行簿。系统提供了多个预设的运行簿，本文中使用了其中一个：
- en: '![Using the ‘ConfigureRunbook‘ pane to create arunbook.](img/Figure_4.24.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![使用“ConfigureRunbook”面板创建运行簿。](img/Figure_4.24.jpg)'
- en: Figure 4.24 Creating the runbook
  id: totrans-245
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.24 创建运行簿
- en: Finally, provide a name and hosting resource group to create a new alert.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，提供一个名称和托管资源组来创建一个新的警报。
- en: 'If the VM is deallocated manually, the alert condition gets satisfied and it
    will raise an alert:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 如果虚拟机被手动取消分配，警报条件将被满足，并会触发警报：
- en: '![Testing the alerts by providing a name and hosting resource group to create
    a new alert.](img/Figure_4.25.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![通过提供名称和托管资源组来测试警报，创建一个新警报。](img/Figure_4.25.jpg)'
- en: Figure 4.25 Testing alerts
  id: totrans-249
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.25 测试警报
- en: 'If you check the details of the VM after a few seconds, you should see that
    the VM is being deleted:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在几秒钟后检查虚拟机的详细信息，你应该会看到虚拟机正在被删除：
- en: '![The details of the VM displayed in the portal, showing the status ‘Deleting’.](img/Figure_4.26.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![门户中显示的虚拟机详细信息，显示状态为“正在删除”。](img/Figure_4.26.jpg)'
- en: Figure 4.26 Verifying the results
  id: totrans-252
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.26 验证结果
- en: Hybrid Workers
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 混合工作者
- en: So far, all the execution of runbooks has primarily been on infrastructure provided
    by Azure. The runbook workers are Azure compute resources that are provisioned
    by Azure with appropriate modules and assets deployed in them. Any execution of
    runbooks happens on this compute. However, it is possible for users to bring their
    own compute and execute the runbook on this user-provided compute rather than
    on default Azure compute.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，所有的运行簿执行主要是在 Azure 提供的基础设施上进行的。运行簿工作者是由 Azure 提供的计算资源，在其中部署了适当的模块和资源。任何运行簿的执行都发生在这些计算资源上。然而，用户也可以提供自己的计算资源，并在用户提供的计算资源上执行运行簿，而不是在默认的
    Azure 计算资源上。
- en: This has multiple advantages. The first and foremost is that the entire execution
    and its logs are owned by the user with Azure having no visibility of it. Second,
    the user-provided compute could be on any cloud, as well as on-premises.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 这有多个优点。首先，整个执行过程及其日志由用户拥有，Azure 无法查看这些内容。其次，用户提供的计算资源可以位于任何云环境中，甚至可以是本地部署的。
- en: '**Adding a Hybrid Worker involves multiple steps**'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '**添加混合工作者涉及多个步骤**'
- en: First and foremost, an agent needs to be installed on the user-provided compute.
    Microsoft provides a script that can download and configure the agent automatically.
    This script is available from [https://www.powershellgallery.com/packages/New-OnPremiseHybridWorker/1.6](https://www.powershellgallery.com/packages/New-OnPremiseHybridWorker/1.6).
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，必须在用户提供的计算资源上安装一个代理。微软提供了一个脚本，可以自动下载并配置代理。此脚本可以从[https://www.powershellgallery.com/packages/New-OnPremiseHybridWorker/1.6](https://www.powershellgallery.com/packages/New-OnPremiseHybridWorker/1.6)获取。
- en: 'The script can also be executed from PowerShell ISE as an administrator from
    within the server that should be part of the Hybrid Worker using the following
    command:'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 脚本也可以通过 PowerShell ISE 以管理员身份在应成为混合工作者一部分的服务器上执行，使用以下命令：
- en: '[PRE10]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'After the script is installed, it can be executed along with parameters related
    to the Azure Automation account details. A name is also provided for the Hybrid
    Worker. If the name does not exist already, it will be created; if it exists,
    the server will be added to the existing Hybrid Worker. It is possible to have
    multiple servers within a single Hybrid Worker, and it is possible to have multiple
    Hybrid Workers as well:'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本安装后，可以与相关的 Azure 自动化帐户详细信息一起执行。同时还为混合工作者提供了一个名称。如果该名称不存在，将会创建；如果已存在，服务器将被添加到现有的混合工作者中。一个混合工作者中可以包含多个服务器，同时也可以有多个混合工作者：
- en: '[PRE11]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Once the execution finishes, navigating back to the portal will show an entry
    for a Hybrid Worker, as shown in *Figure 4.27*:![An entry for a Hybrid Worker
    displayed in the portal.](img/Figure_4.27.jpg)
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行完成后，返回到门户将显示混合工作者的条目，如*图 4.27*所示：![门户中显示的混合工作者条目。](img/Figure_4.27.jpg)
- en: 'Figure 4.27: Checking user Hybrid Worker groups'
  id: totrans-263
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.27：检查用户的混合工作者组
- en: If, at this time, an Azure runbook is executed that has a dependency on the
    `Az` module and a custom certificate uploaded to the certificate asset, it will
    fail with errors related to the `Az` module and the certificate not being found:![The
    Errors tab in the lower pane, displaying the error details on running the Azure
    runbook.](img/Figure_4.28.jpg)
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果此时执行一个依赖于`Az`模块和已上传到证书资产的自定义证书的Azure运行簿，它将由于找不到`Az`模块和证书而失败，并显示相关错误：![错误标签页，在下方窗格中显示运行Azure运行簿时的错误详情。](img/Figure_4.28.jpg)
- en: 'Figure 4.28: Checking errors'
  id: totrans-265
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4.28：检查错误
- en: 'Install the `Az` module using the following command on the server:'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用以下命令在服务器上安装`Az`模块：
- en: '[PRE12]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: It is also important to have the `.pfx` certificate available on this server.
    The previously exported certificate should be copied to the server and installed
    manually.
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，在此服务器上还必须有`.pfx`证书。之前导出的证书应复制到服务器并手动安装。
- en: After installation of the `Az` module and certificate, re-executing the runbook
    on the Hybrid Worker is shown in *Figure 4.29*, and it should show the list of
    VMs in the subscription:![In the ‘Start Runbook’ pane, adding the connection name
    as ‘azureforarchitectsconnection’, running settings as Hybrid Workers, and the
    Hybrid Worker group as ‘localrunbookexecutionengine’.](img/Figure_4.29.jpg)
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装`Az`模块和证书后，在Hybrid Worker上重新执行运行簿，如*图4.29*所示，应该会显示订阅中的虚拟机列表：![在‘开始运行簿’窗格中，添加连接名称为‘azureforarchitectsconnection’，运行设置为Hybrid
    Workers，Hybrid Worker组为‘localrunbookexecutionengine’。](img/Figure_4.29.jpg)
- en: 'Figure 4.29: Setting up a runbook to run on a Hybrid Worker'
  id: totrans-270
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图4.29：在Hybrid Worker上设置运行簿
- en: When we discussed different scenarios, we talked about configuration management.
    In the next section, we will be discussing configuration management with Azure
    Automation in more detail.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们讨论不同的场景时，我们谈到了配置管理。在下一节中，我们将更详细地讨论Azure Automation中的配置管理。
- en: Azure Automation State Configuration
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure Automation状态配置
- en: Azure Automation provides a **Desired State Configuration** (**DSC**) pull server
    along with every Azure Automation account. The pull server can hold configuration
    scripts that can be pulled by servers across clouds and on-premises. This means
    that Azure Automation can be used to configure any server hosted anywhere in the
    world.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Automation为每个Azure Automation帐户提供**期望状态配置**（**DSC**）拉取服务器。拉取服务器可以保存配置脚本，供跨云和本地的服务器拉取。这意味着Azure
    Automation可以用于配置世界上任何地方托管的服务器。
- en: The DSC needs a local agent on these servers, also known as a **local configuration
    manager** (**LCM**). It should be configured with the Azure Automation DSC pull
    server so it can download the required configuration and autoconfigure the server.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: DSC需要在这些服务器上安装本地代理，也叫**本地配置管理器**（**LCM**）。它应该与Azure Automation DSC拉取服务器进行配置，以便能够下载所需的配置并自动配置服务器。
- en: The autoconfiguration can be scheduled to be periodic (by default it is half
    an hour), and if the agent finds any deviation in the server configuration compared
    to the one available in the DSC script, it will autocorrect and bring back the
    server to the desired and expected state.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 自动配置可以设置为周期性（默认情况下为半小时），如果代理发现服务器配置与DSC脚本中提供的配置有任何偏差，它将自动纠正并使服务器恢复到期望的状态。
- en: In this section, we will configure one server hosted on Azure, and the process
    will remain the same irrespective of whether the server is on a cloud or on-premises.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将配置一个托管在Azure上的服务器，无论该服务器是位于云端还是本地，整个过程将保持一致。
- en: 'The first step is to create a DSC configuration. A sample configuration is
    shown here, and complex configurations can be authored similarly:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是创建DSC配置。这里展示了一个示例配置，复杂的配置可以类似地编写：
- en: '[PRE13]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The configuration is quite simple. It imports the `PSDesiredStateConfiguration`
    base DSC module and declares a single-node configuration. This configuration is
    not associated with any specific node and can be used to configure any server.
    The configuration is supposed to configure an IIS web server and ensure that it
    is present on any server to which it is applied.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 配置非常简单。它导入了`PSDesiredStateConfiguration`基础DSC模块，并声明了一个单节点配置。此配置不与任何特定节点关联，可以用于配置任何服务器。该配置旨在配置IIS
    web服务器，并确保其在应用到的任何服务器上存在。
- en: 'This configuration is not yet available on the Azure Automation DSC pull server,
    and so the first step is to import the configuration into the pull server. This
    can be done using the Automation account `Import-AzAutomationDscConfiguration`
    cmdlet, as shown next:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置尚未在 Azure 自动化 DSC 拉取服务器上可用，因此第一步是将配置导入到拉取服务器。这可以通过使用自动化帐户的 `Import-AzAutomationDscConfiguration`
    cmdlet 来完成，如下所示：
- en: '[PRE14]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: There are a few important things to note here. The name of the configuration
    should match the filename, and it must only contain alphanumeric characters and
    underscores. A good naming convention is to use verb/noun combinations. The cmdlets
    need the path of the configuration file and the Azure Automation account details
    to import the configuration script.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几个重要事项需要注意。配置名称应与文件名匹配，且只能包含字母数字字符和下划线。一个好的命名约定是使用动词/名词组合。cmdlet 需要配置文件的路径和
    Azure 自动化帐户的详细信息来导入配置脚本。
- en: 'At this stage, the configuration is visible on the portal:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，配置在门户中可见：
- en: '![From the left-hand navigation, selecting the option ‘State Configuration
    (DSC)’ and then moving to the ‘Configurations’ tab to view the configuration details.](img/Figure_4.30.jpg)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![从左侧导航中选择“状态配置（DSC）”选项，然后转到“配置”标签页以查看配置详情。](img/Figure_4.30.jpg)'
- en: 'Figure 4.30: Adding configuration'
  id: totrans-285
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.30：添加配置
- en: 'Once the configuration script is imported, it is compiled and stored within
    the DSC pull server using the `Start-AzAutomationDscCompilationJob` cmdlet, as
    shown next:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦配置脚本被导入，它会使用 `Start-AzAutomationDscCompilationJob` cmdlet 在 DSC 拉取服务器上进行编译并存储，如下所示：
- en: '[PRE15]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The name of the configuration should match the one that was recently uploaded,
    and the compiled configuration should be available now on the **Compiled configurations**
    tab, as shown in *Figure 4.31*:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 配置的名称应与最近上传的名称匹配，且已编译的配置现在应该可以在 **已编译配置** 标签页中找到，如 *图 4.31* 所示：
- en: '![Moving to the “Compiled Configurations’ tab to view the list of compiled
    configurations.](img/Figure_4.31.jpg)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![转到“已编译配置”标签页以查看已编译配置的列表。](img/Figure_4.31.jpg)'
- en: 'Figure 4.31: Listing compiled configurations'
  id: totrans-290
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.31：列出已编译的配置
- en: It is important to note that the `0`. It means that a node configuration called
    `ensureiss.localhost` exists but it is not assigned to any node. The next step
    is to assign the configuration to the node.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，`0` 表示存在一个名为 `ensureiss.localhost` 的节点配置，但尚未分配给任何节点。下一步是将配置分配给该节点。
- en: 'By now, we have a compiled DSC configuration available on the DSC pull server,
    but there are no nodes to manage. The next step is to onboard the VMs and associate
    them with the DSC pull server. This is done using the `Register-AzAutomationDscNode`
    cmdlet:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在 DSC 拉取服务器上有了一个已编译的 DSC 配置，但没有节点可以管理。下一步是将虚拟机加入并与 DSC 拉取服务器关联。这是通过使用
    `Register-AzAutomationDscNode` cmdlet 完成的：
- en: '[PRE16]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This cmdlet takes the name of the resource group for both the VM and the Azure
    Automation account. It also configures the configuration mode and the `configurationModeFrequencyMins`
    property of the local configuration manager of the VM. This configuration will
    check and autocorrect any deviation from the configuration applied to it every
    30 minutes.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 此 cmdlet 需要提供虚拟机和 Azure 自动化帐户的资源组名称。它还配置了虚拟机本地配置管理器的配置模式和`configurationModeFrequencyMins`属性。此配置每
    30 分钟检查并自动修正任何偏离已应用配置的情况。
- en: If `VMresourcegroup` is not specified, the cmdlet tries to find the VM in the
    same resource group as the Azure Automation account, and if the VM location value
    is not provided, it tries to find the VM in the Azure Automation region. It is
    always better to provide values for them. Notice that this command can only be
    used for Azure VMs as it asks for `AzureVMname` explicitly. For servers on other
    clouds and on-premises, use the `Get-AzAutomationDscOnboardingMetaconfig` cmdlet.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未指定 `VMresourcegroup`，cmdlet 会尝试在与 Azure 自动化帐户相同的资源组中查找虚拟机，如果未提供虚拟机位置值，它会尝试在
    Azure 自动化区域中查找虚拟机。最好为它们提供值。请注意，此命令仅适用于 Azure 虚拟机，因为它明确要求提供 `AzureVMname`。对于其他云和本地服务器，请使用
    `Get-AzAutomationDscOnboardingMetaconfig` cmdlet。
- en: 'Now, a new node configuration entry can also be found in the portal, as shown
    in *Figure 4.32*:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，新的节点配置条目也可以在门户中找到，如 *图 4.32* 所示：
- en: '![The Azure portal displaying a new node configuration entry and verifying
    the node status.](img/Figure_4.32.jpg)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![Azure 门户显示新的节点配置条目并验证节点状态。](img/Figure_4.32.jpg)'
- en: 'Figure 4.32: Verifying node status'
  id: totrans-298
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.32：验证节点状态
- en: 'The node information can be obtained as follows:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过以下方式获取节点信息：
- en: '[PRE17]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And a configuration can be assigned to the node:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将配置分配给节点：
- en: '[PRE18]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Once the compilation is complete, it can be assigned to the nodes. The initial
    status is **Pending**, as shown in *Figure 4.33*:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦编译完成，就可以将其分配给节点。初始状态为**待处理**，如*图 4.33*所示：
- en: '![The initial status of the node being displayed as ‘Pending’.](img/Figure_4.33.jpg)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![节点初始状态显示为“待处理”。](img/Figure_4.33.jpg)'
- en: 'Figure 4.33: Verifying node status'
  id: totrans-305
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.33：验证节点状态
- en: 'After a few minutes, the configuration is applied to the node, the node becomes
    **Compliant**, and the status becomes **Completed**:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，配置应用到节点，节点变为**合规**，状态变为**已完成**：
- en: '![The Azure portal showing the changed status as ‘Completed’ and the node as
    ‘Compliant’.](img/Figure_4.34.jpg)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
  zh: '![Azure 门户显示状态更改为“已完成”，节点状态为“合规”。](img/Figure_4.34.jpg)'
- en: 'Figure 4.34: Verifying if the node is compliant'
  id: totrans-308
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.34：验证节点是否合规
- en: 'Later, logging into the server and checking if the web server (IIS) is installed
    confirms that it is installed, as you can see in *Figure 4.35*:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后，通过登录到服务器并检查 Web 服务器（IIS）是否已安装，确认它已经安装，正如你在*图 4.35*中看到的：
- en: '![The output of the Get-WindowsFeature –Name web-server command, displaying
    the name of the web server and the install state.](img/Figure_4.35.jpg)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![Get-WindowsFeature –Name web-server 命令的输出，显示 Web 服务器名称和安装状态。](img/Figure_4.35.jpg)'
- en: 'Figure 4.35: Checking whether the desired state has been achieved'
  id: totrans-311
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 4.35：检查是否已达到预期状态
- en: In the next section, Azure Automation pricing will be discussed.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将讨论 Azure Automation 定价。
- en: Azure Automation pricing
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure Automation 定价
- en: There is no cost for Azure Automation if no runbooks are executed on it. The
    cost of Azure Automation is charged per minute for execution of runbook jobs.
    This means that if the total number of runbook execution minutes is 10,000, the
    cost of Azure Automation would be $0.002 per minute multiplied by 9,500, as the
    first 500 minutes are free.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Azure Automation 上没有执行任何 runbook，则不收取费用。Azure Automation 的费用按 runbook 任务执行的分钟数计费。这意味着，如果总的
    runbook 执行分钟数为 10,000，则 Azure Automation 的费用为每分钟 0.002 美元，乘以 9,500，因为前 500 分钟是免费的。
- en: There are other costs involved in Azure Automation depending on features consumed.
    For example, a DSC pull server does not cost anything within Azure Automation;
    neither does onboarding Azure VMs on to the pull server. However, if non-Azure
    servers are onboarded, typically from other clouds or on-premises, then the first
    five servers are free and anything on top of that costs $6 per server per month
    in the West US region.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure Automation 中，涉及其他费用，这取决于使用的功能。例如，DSC 拉取服务器在 Azure Automation 中是免费的；将
    Azure 虚拟机添加到拉取服务器也不收费。然而，如果将非 Azure 服务器加入，通常是来自其他云或本地部署的服务器，那么前五台服务器是免费的，超出部分的费用是每台服务器每月
    6 美元（在西美地区）。
- en: 'Pricing may vary from region to region, and it''s always a good practice to
    verify the pricing on the official pricing page: [https://azure.microsoft.com/pricing/details/automation](https://azure.microsoft.com/pricing/details/automation).'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 定价可能会因地区而异，通常最好通过官方定价页面确认定价：[https://azure.microsoft.com/pricing/details/automation](https://azure.microsoft.com/pricing/details/automation)。
- en: You might ask, why do we need an Automation account when we can deploy serverless
    applications via Azure Functions? In the next section, we will explore the key
    differences between Azure Automation and serverless automation.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问，既然我们可以通过 Azure Functions 部署无服务器应用，为什么还需要 Automation 账户？在下一节中，我们将探讨 Azure
    Automation 与无服务器自动化之间的关键区别。
- en: Comparison with serverless automation
  id: totrans-318
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与无服务器自动化的比较
- en: Azure Automation and Azure serverless technologies, especially Azure Functions,
    are quite similar and overlap in terms of functionality. However, these are separate
    services with different capabilities and pricing.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Automation 和 Azure 无服务器技术，尤其是 Azure Functions，在功能上非常相似并有所重叠。然而，这些是不同的服务，具有不同的功能和定价。
- en: It is important to understand that Azure Automation is a complete suite for
    process automation and configuration management, while Azure Functions is meant
    for implementing business functionality.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解，Azure Automation 是一个完整的流程自动化和配置管理套件，而 Azure Functions 是用于实现业务功能的服务。
- en: Azure Automation is used for automating the processes of provisioning, deprovisioning,
    management, and operations of infrastructure and configuration management thereafter.
    On the other hand, Azure Functions is meant for the creation of services, implementing
    functionality that can be part of microservices and other APIs.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 自动化用于自动化基础设施的供应、撤销、管理和操作过程，以及随后的配置管理。另一方面，Azure Functions 旨在创建服务，实现可以作为微服务和其他
    API 一部分的功能。
- en: Azure Automation is not meant for unlimited scale, and the load is expected
    to be moderate, while Azure Functions can handle unlimited traffic and scale automatically.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 自动化并不适用于无限扩展，负载预计为中等，而 Azure Functions 可以处理无限流量并自动扩展。
- en: There are a host of shared assets, such as connections, variables, and modules,
    that can be reused across runbooks in Azure Automation; however, there is no out-of-the-box
    shared concept in Azure Functions.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure 自动化中，有许多共享资产，如连接、变量和模块，可以在运行簿之间重用；然而，Azure Functions 中没有现成的共享概念。
- en: Azure Automation can manage intermediate state by way of checkpointing and continue
    from the last saved state, while Azure functions are generally stateless and do
    not maintain any state.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 自动化通过检查点管理中间状态，并能够从最后保存的状态继续，而 Azure Functions 通常是无状态的，不维护任何状态。
- en: Summary
  id: totrans-325
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: Azure Automation is an important service within Azure and the only service for
    process automation and configuration management. This chapter covered a lot of
    important concepts related to Azure Automation and process automation, including
    shared assets such as connection, certificates, and modules.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 自动化是 Azure 中一项重要服务，也是唯一用于流程自动化和配置管理的服务。本章涵盖了与 Azure 自动化和流程自动化相关的许多重要概念，包括共享资产，如连接、证书和模块。
- en: It covered the creation of runbooks, including invoking runbooks in different
    ways, such as parent-child relationships, webhooks, and using the portal. The
    chapter also discussed the architecture and life cycle of runbooks.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了运行簿的创建，包括以不同方式调用运行簿，如父子关系、Webhook 和使用门户。还讨论了运行簿的架构和生命周期。
- en: We also looked at the usage of Hybrid Workers and, toward the end of the chapter,
    explored configuration management using a DSC pull server and a local configuration
    manager. Finally, we made comparisons with other technologies, such as Azure Functions.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还研究了混合工作者的使用，并在本章结尾探讨了使用 DSC 拉取服务器和本地配置管理器进行配置管理。最后，我们与其他技术（如 Azure Functions）进行了比较。
- en: In the next chapter, we will explore designing policies, locks, and tags for
    Azure deployments.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨为 Azure 部署设计策略、锁定和标签。
