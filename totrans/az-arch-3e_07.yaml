- en: 7\. Azure OLTP solutions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7\. Azure OLTP 解决方案
- en: Azure provides both **Infrastructure as a Service** (**IaaS**) and **Platform
    as a Service** (**PaaS**) services. These types of services provide organizations
    with different levels and controls over storage, compute, and networks. Storage
    is the resource used when working with the storage and transmission of data. Azure
    provides lots of options for storing data, such as Azure Blob storage, Table storage,
    Cosmos DB, Azure SQL Database, Azure Data Lake, and more. While some of these
    options are meant for big data storage, analytics, and presentation, there are
    others that are meant for applications that process transactions. Azure SQL is
    the primary resource in Azure that works with transactional data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 提供了**基础设施即服务**（**IaaS**）和**平台即服务**（**PaaS**）服务。这些服务为组织提供了不同层次的存储、计算和网络控制。存储是处理数据存储和传输时使用的资源。Azure
    提供了多种存储数据的选项，如 Azure Blob 存储、表存储、Cosmos DB、Azure SQL 数据库、Azure 数据湖等。虽然其中一些选项适用于大数据存储、分析和呈现，但也有一些是针对处理事务的应用程序。Azure
    SQL 是 Azure 中与事务数据配合使用的主要资源。
- en: 'This chapter will focus on various aspects of using transactional data stores,
    such as Azure SQL Database and other open-source databases that are typically
    used in **Online Transaction Processing** (**OLTP**) systems, and will cover the
    following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将重点讨论使用事务数据存储的各个方面，如 Azure SQL 数据库以及其他通常用于**在线事务处理**（**OLTP**）系统的开源数据库，并将涵盖以下主题：
- en: OLTP applications
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OLTP 应用程序
- en: Relational databases
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关系型数据库
- en: Deployment models
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署模型
- en: Azure SQL Database
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure SQL 数据库
- en: Single Instance
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单一实例
- en: Elastic pools
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弹性池
- en: Managed Instance
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 托管实例
- en: Cosmos DB
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cosmos DB
- en: We will start this chapter by looking at what OLTP applications are and listing
    the OLTP services of Azure and their use cases.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从了解 OLTP 应用程序是什么开始，并列出 Azure 的 OLTP 服务及其用例。
- en: OLTP applications
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OLTP 应用程序
- en: 'As mentioned earlier, OLTP applications are applications that help in the processing
    and management of transactions. Some of the most prevalent OLTP implementations
    can be found in retail sales, financial transaction systems, and order entry.
    These applications perform data capture, data processing, data retrieval, data
    modification, and data storage. However, it does not stop here. OLTP applications
    treat these data tasks as transactions. Transactions have a few important properties
    and OLTP applications account for these properties. These properties are grouped
    under the acronym **ACID**. Let''s discuss these properties in detail:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，OLTP 应用程序是帮助处理和管理事务的应用程序。一些最常见的 OLTP 实现可以在零售销售、金融交易系统和订单输入中找到。这些应用程序执行数据捕获、数据处理、数据检索、数据修改和数据存储。然而，OLTP
    应用程序不仅限于此。OLTP 应用程序将这些数据任务视为事务。事务具有一些重要的特性，OLTP 应用程序需要考虑这些特性。这些特性被归纳为**ACID**，让我们详细讨论这些特性：
- en: '**Atomicity**: This property states that a transaction must consist of statements
    and either all statements should complete successfully or no statement should
    be executed. If multiple statements are grouped together, these statements form
    a transaction. Atomicity means each transaction is treated as the lowest single
    unit of execution that either completes successfully or fails.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原子性**：该特性表示一个事务必须由多个语句组成，且这些语句要么都执行成功，要么都不执行。如果多个语句被组合在一起，它们就形成了一个事务。原子性意味着每个事务被视为最小的执行单元，要么成功完成，要么失败。'
- en: '**Consistency**: This property focuses on the state of data in a database.
    It dictates that any change in state should be complete and based on the rules
    and constraints of the database, and that partial updates should not be allowed.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致性**：该特性关注数据库中数据的状态。它规定任何状态的变化应当是完整的，并基于数据库的规则和约束，且不允许部分更新。'
- en: '**Isolation**: This property states that there can be multiple concurrent transactions
    executed on a system and each transaction should be treated in isolation. One
    transaction should not know about or interfere with any other transaction. If
    the transactions were to be executed in sequence, by the end, the state of data
    should be the same as before.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隔离性**：该特性表示系统上可以同时执行多个并发事务，并且每个事务应当在隔离状态下执行。一个事务不应了解或干扰任何其他事务。如果事务按顺序执行，那么最终的数据状态应与执行前相同。'
- en: '**Durability**: This property states that the data should be persisted and
    available, even after failure, once it is committed to the database. A committed
    transaction becomes a fact.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持久性**：此属性表明，一旦数据提交到数据库，它应该被持久化并可用，即使发生故障。已提交的事务变为事实。'
- en: Now that you know what OLTP applications are, let's discuss the role of relational
    databases in OLTP applications.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了什么是OLTP应用程序，让我们来讨论关系型数据库在OLTP应用程序中的作用。
- en: Relational databases
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关系型数据库
- en: OLTP applications have generally relied on relational databases for their transaction
    management and processing. Relational databases typically come in a tabular format
    consisting of rows and columns. The data model is converted into multiple tables
    where each table is connected to another table (based on rules) using relationships.
    This process is also known as normalization.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: OLTP应用程序通常依赖关系型数据库进行事务管理和处理。关系型数据库通常以表格格式呈现，由行和列组成。数据模型被转换为多个表，每个表通过关系与另一个表相连接（基于规则）。这个过程也称为规范化。
- en: There are multiple services in Azure that support OLTP applications and the
    deployment of relational databases. In the next section, we will take a look at
    the services in Azure that are related to OLTP applications.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Azure中有多个支持OLTP应用程序和关系型数据库部署的服务。在接下来的部分中，我们将查看与OLTP应用程序相关的Azure服务。
- en: Azure cloud services
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure云服务
- en: 'A search for **sql** in the Azure portal provides multiple results. I have
    marked some of them to show the resources that can be used directly for OLTP applications:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在Azure门户中搜索**sql**会提供多个结果。我已经标记出其中一些，显示可以直接用于OLTP应用程序的资源：
- en: '![List of Azure SQL services](img/B15432_07_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![Azure SQL服务列表](img/B15432_07_01.jpg)'
- en: 'Figure 7.1: List of Azure SQL services'
  id: totrans-25
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.1：Azure SQL服务列表
- en: '*Figure 7.1* shows the varied features and options available for creating SQL
    Server–based databases on Azure.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7.1*展示了在Azure上创建基于SQL Server的数据库时可用的各种功能和选项。'
- en: 'Again, a quick search for **database** in the Azure portal provides multiple
    resources, and the marked ones in *Figure 7.2* can be used for OLTP applications:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，在Azure门户中快速搜索**数据库**会提供多个资源，图*7.2*中标记的部分可以用于OLTP应用程序：
- en: '![List of Azure services used for OLTP applications](img/B15432_07_02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![用于OLTP应用程序的Azure服务列表](img/B15432_07_02.jpg)'
- en: 'Figure 7.2: List of Azure services used for OLTP applications'
  id: totrans-29
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.2：用于OLTP应用程序的Azure服务列表
- en: '*Figure 7.2* shows resources provided by Azure that can host data in a variety
    of databases, including the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*图7.2*展示了Azure提供的可以承载数据的资源，这些资源支持多种数据库，包括以下内容：'
- en: MySQL databases
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MySQL数据库
- en: MariaDB databases
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MariaDB数据库
- en: PostgreSQL databases
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PostgreSQL数据库
- en: Cosmos DB
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cosmos DB
- en: Next, let's discuss deployment models.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们讨论部署模型。
- en: Deployment models
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署模型
- en: Deployment models in Azure are classified based on the level of management or
    control. It's up to the user to select which level of management or control they
    prefer; either they can go for complete control by using services such as Virtual
    Machines, or they can use managed services where things will be managed by Azure
    for them.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Azure中的部署模型是根据管理或控制的级别来分类的。用户可以根据个人偏好选择管理或控制的级别；他们可以选择通过使用虚拟机等服务来获得完全控制，或者使用由Azure为其管理的托管服务。
- en: 'There are two deployment models for deploying databases on Azure:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在Azure上部署数据库有两种部署模型：
- en: Databases on Azure Virtual Machines (IaaS)
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Azure虚拟机上托管数据库（IaaS）
- en: Databases hosted as managed services (PaaS)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 托管为托管服务（PaaS）的数据库
- en: We will now try to understand the difference between deployment on Azure Virtual
    Machines and managed instances. Let's start with Virtual Machines.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将尝试了解在Azure虚拟机和托管实例上的部署区别。让我们从虚拟机开始。
- en: Databases on Azure Virtual Machines
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Azure虚拟机上托管的数据库
- en: Azure provides multiple **stock keeping units** (**SKUs**) for virtual machines.
    There are high-compute, high-throughput (IOPS) machines that are also available
    along with general-use virtual machines. Instead of hosting a SQL Server, MySQL,
    or any other database on on-premises servers, it is possible to deploy these databases
    on these virtual machines. The deployment and configuration of these databases
    are no different than that of on-premises deployments. The only difference is
    that the database is hosted on the cloud instead of using on-premises servers.
    Administrators must perform the same activities and steps that they normally would
    for an on-premises deployment. Although this option is great when customers want
    full control over their deployment, there are models that can be more cost-effective,
    scalable, and highly available compared to this option, which will be discussed
    later in this chapter.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 提供了多个 **库存单位** (**SKUs**) 用于虚拟机。除了通用虚拟机外，还提供了高计算、高吞吐量（IOPS）虚拟机。与其在本地服务器上托管
    SQL Server、MySQL 或其他数据库，不如将这些数据库部署在这些虚拟机上。这些数据库的部署和配置与本地部署没有区别。唯一的区别是数据库托管在云端，而不是使用本地服务器。管理员需要执行与本地部署相同的活动和步骤。尽管当客户希望完全控制其部署时，这个选项是一个不错的选择，但与此选项相比，还有一些模型可能在成本效益、可扩展性和高可用性方面更具优势，本章稍后将讨论这些模型。
- en: 'The steps to deploy any database on Azure Virtual Machines are as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure 虚拟机上部署任何数据库的步骤如下：
- en: Create a virtual machine with a size that caters to the performance requirements
    of the application.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个适应应用程序性能需求的虚拟机。
- en: Deploy the database on top of it.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其上部署数据库。
- en: Configure the virtual machine and database configuration.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置虚拟机和数据库配置。
- en: This option does not provide any out-of-the-box high availability unless multiple
    servers are provisioned. It also does not provide any features for automatic scaling
    unless custom automation supports it.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 该选项不提供任何现成的高可用性，除非配置多个服务器。它也不提供任何自动扩展功能，除非有自定义自动化来支持它。
- en: Disaster recovery is also the responsibility of the customer. Servers should
    be deployed on multiple regions connected using services like global peering,
    VPN gateways, ExpressRoute, or Virtual WAN. It is possible for these virtual machines
    to be connected to an on-premises datacenter through site-to-site VPNs or ExpressRoute
    without having any exposure to the outside world.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 灾难恢复仍然是客户的责任。服务器应部署在多个区域，并通过全球对等、VPN 网关、ExpressRoute 或 Virtual WAN 等服务进行连接。这些虚拟机可以通过站点对站点的
    VPN 或 ExpressRoute 连接到本地数据中心，而无需暴露到外部网络。
- en: These databases are also known as **unmanaged databases**. On the other hand,
    databases hosted with Azure, other than virtual machines, are managed by Azure
    and are known as **managed services**. In the next section, we will cover these
    in detail.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据库也被称为 **非托管数据库**。另一方面，托管在 Azure 上的数据库（除了虚拟机之外）由 Azure 管理，并称为 **托管服务**。在下一节中，我们将详细介绍这些内容。
- en: Databases hosted as managed services
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 托管服务中的数据库
- en: Managed services mean that Azure provides management services for the databases.
    These managed services include the hosting of the database, ensuring that the
    host is highly available, ensuring that the data is replicated internally for
    availability during disaster recovery, ensuring scalability within the constraint
    of a chosen SKU, monitoring the hosts and databases and generating alerts for
    notifications or executing actions, providing log and auditing services for troubleshooting,
    and taking care of performance management and security alerts.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 托管服务意味着 Azure 提供数据库的管理服务。这些托管服务包括数据库的托管、确保主机的高可用性、确保数据在灾难恢复期间进行内部复制以提高可用性、确保在所选
    SKU 的约束下实现可扩展性、监控主机和数据库并生成通知警报或执行操作、提供日志和审计服务以便于故障排除，并负责性能管理和安全警报。
- en: In short, there are a lot of services that customers get out of the box when
    using managed services from Azure, and they do not need to perform active management
    on these databases. In this chapter, we will look at Azure SQL Database in depth
    and provide information on other databases, such as MySQL and Postgres. Also,
    we will cover non-relational databases such as Cosmos DB, which is a NoSQL database.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，客户在使用 Azure 托管服务时，能够立刻获得大量服务，并且不需要对这些数据库进行主动管理。在本章中，我们将深入探讨 Azure SQL 数据库，并提供关于其他数据库的信息，如
    MySQL 和 Postgres。同时，我们还将介绍非关系型数据库，如 Cosmos DB，它是一个 NoSQL 数据库。
- en: Azure SQL Database
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure SQL 数据库
- en: Azure SQL Server provides a relational database hosted as a PaaS. Customers
    can provision this service, bring their own database schema and data, and connect
    their applications to it. It provides all the features of SQL Server when deployed
    on a virtual machine. These services do not provide a user interface to create
    tables and its schema, nor do they provide any querying capabilities directly.
    SQL Server Management Studio and the SQL CLI tools should be used to connect to
    these services and directly work with them.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Azure SQL 服务器提供了作为 PaaS 托管的关系型数据库。客户可以配置此服务，带入自己的数据库架构和数据，并将应用程序连接到它。它提供了在虚拟机上部署
    SQL Server 时的所有功能。这些服务不提供用于创建表格及其架构的用户界面，也不直接提供查询功能。应使用 SQL Server 管理工作室和 SQL
    CLI 工具连接到这些服务并直接操作。
- en: 'Azure SQL Database comes with three distinct deployment models:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Azure SQL 数据库提供三种不同的部署模型：
- en: '**Single Instance:** In this deployment model, a single database is deployed
    on a logical server. This involves the creation of two resources on Azure: a SQL
    logical server and a SQL database.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单实例：** 在这种部署模型中，单个数据库被部署在一个逻辑服务器上。这涉及到在 Azure 上创建两个资源：一个 SQL 逻辑服务器和一个 SQL
    数据库。'
- en: '**Elastic pool:** In this deployment mode, multiple databases are deployed
    on a logical server. Again, this involves the creation of two resources on Azure:
    a SQL logical server and a SQL elastic database pool—this holds all the databases.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹性池：** 在这种部署模式下，多个数据库会被部署在一个逻辑服务器上。再次强调，这涉及到在 Azure 上创建两个资源：一个 SQL 逻辑服务器和一个
    SQL 弹性数据库池——它包含所有的数据库。'
- en: '**Managed Instance:** This is a relatively new deployment model from the Azure
    SQL team. This deployment reflects a collection of databases on a logical server,
    providing complete control over the resources in terms of system databases. Generally,
    system databases are not visible in other deployment models, but they are available
    in the model. This model comes very close to the deployment of SQL Server on-premises:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**托管实例：** 这是 Azure SQL 团队推出的一种相对较新的部署模型。这种部署模式反映了在逻辑服务器上的一组数据库，提供对系统数据库资源的完全控制。通常，在其他部署模型中，系统数据库是不可见的，但在该模型中可以访问。该模型与
    SQL Server 本地部署非常接近：'
- en: '![Deployment options for Azure SQL Database](img/B15432_07_03.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![Azure SQL 数据库的部署选项](img/B15432_07_03.jpg)'
- en: 'Figure 7.3: Azure SQL Database deployment models'
  id: totrans-61
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.3：Azure SQL 数据库的部署模型
- en: If you are wondering when to use what, you should look at a feature comparison
    between SQL Database and SQL Managed Instance. A complete feature comparison is
    available at [https://docs.microsoft.com/azure/azure-sql/database/features-comparison](https://docs.microsoft.com/azure/azure-sql/database/features-comparison).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在疑惑什么时候使用哪种服务，你应该查看 SQL 数据库与 SQL 托管实例之间的功能对比。完整的功能对比可以在[https://docs.microsoft.com/azure/azure-sql/database/features-comparison](https://docs.microsoft.com/azure/azure-sql/database/features-comparison)找到。
- en: Next, we will cover some of the features of SQL Database. Let's start with application
    features.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将介绍 SQL 数据库的一些特性。让我们从应用程序功能开始。
- en: Application features
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用程序特性
- en: 'Azure SQL Database provides multiple application-specific features that cater
    to the different requirements of OLTP systems:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Azure SQL 数据库提供了多种面向应用程序的特性，以满足 OLTP 系统的不同需求：
- en: '**Columnar store**: This feature allows the storage of data in a columnar format
    rather than in a row format.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列式存储：** 该特性允许数据以列的格式而不是行的格式存储。'
- en: '**In-memory OLTP**: Generally, data is stored in back-end files in SQL, and
    data is pulled from them whenever it is needed by the application. In contrast
    to this, in-memory OLTP puts all data in memory and there is no latency in reading
    the storage for data. Storing in-memory OLTP data on SSD provides the best possible
    performance for Azure SQL.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存中 OLTP：** 通常，数据存储在 SQL 的后端文件中，并在应用程序需要时从中提取数据。与此相反，内存中 OLTP 将所有数据存储在内存中，读取存储的数据时没有延迟。将内存中
    OLTP 数据存储在 SSD 上为 Azure SQL 提供了最佳性能。'
- en: All features of on-premises SQL Server.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有本地 SQL Server 的功能。
- en: The next feature we are going to discuss is high availability.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们要讨论的功能是高可用性。
- en: '**High availability**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**高可用性**'
- en: Azure SQL, by default, is 99.99% highly available. It has two different architectures
    for maintaining high availability based on SKUs. For the Basic, Standard, and
    General SKUs, the entire architecture is broken down into the following two layers.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Azure SQL 的高可用性为 99.99%。它根据 SKU 具有两种不同的架构来保持高可用性。对于基础、标准和通用 SKU，整个架构被划分为以下两层。
- en: Compute layer
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算层
- en: Storage layer
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储层
- en: 'There is redundancy built in for both of these layers to provide high availability:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个层次都有冗余设计，以提供高可用性：
- en: '![Compute and storage layers in standard SKUs](img/B15432_07_04.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![标准SKU中的计算和存储层](img/B15432_07_04.jpg)'
- en: 'Figure 7.4: Compute and storage layers in standard SKUs'
  id: totrans-76
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.4：标准 SKU 中的计算和存储层
- en: 'For the Premium and business-critical SKUs, both compute and storage are on
    the same layer. High availability is achieved by the replication of compute and
    storage deployed in a four-node cluster, using technology similar to SQL Server
    Always On availability groups:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于高级和业务关键型 SKU，计算和存储都在同一层。高可用性通过在四节点集群中复制计算和存储来实现，使用类似于 SQL Server Always On
    可用性组的技术：
- en: '![Achieving high availability through four-node cluster deployment](img/B15432_07_05.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![通过四节点集群部署实现高可用性](img/B15432_07_05.jpg)'
- en: 'Figure 7.5: Four-node cluster deployment'
  id: totrans-79
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.5：四节点集群部署
- en: 'Now that you know how high availability is handled, let''s jump to the next
    feature: backups.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你了解了高可用性是如何处理的，接下来我们讨论下一个功能：备份。
- en: '**Backups**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**备份**'
- en: 'Azure SQL Database also provides features to automatically back up databases
    and store them on storage accounts. This feature is important especially in cases
    where a database becomes corrupt or a user accidentally deletes a table. This
    feature is available at the server level, as shown in *Figure 7.6*:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Azure SQL 数据库还提供了自动备份数据库并将其存储在存储账户中的功能。这个功能在数据库损坏或用户不小心删除表时尤其重要。此功能在服务器级别可用，如*图
    7.6*所示：
- en: '![Backing up databases in Azure](img/B15432_07_06.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![在 Azure 中备份数据库](img/B15432_07_06.jpg)'
- en: 'Figure 7.6: Backing up databases in Azure'
  id: totrans-84
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.6：在 Azure 中备份数据库
- en: Architects should prepare a backup strategy so that backups can be used in times
    of need. While configuring backups, ensure that your backups occur neither too
    infrequently nor too frequently. Based on the business needs, a weekly backup
    or even a daily backup should be configured, or even more frequently than that,
    if required. These backups can be used for restoration purposes.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 架构师应准备备份策略，以便在需要时可以使用备份。在配置备份时，确保备份频率既不太少也不太频繁。根据业务需求，可以配置每周备份，甚至每日备份，或根据需要配置更频繁的备份。这些备份可用于恢复目的。
- en: Backups will help in business continuity and data recovery. You can also go
    for geo-replication to recover the data during a region failure. In the next section,
    we will cover geo-replication.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 备份将有助于业务连续性和数据恢复。您还可以使用地理复制来恢复区域故障时的数据。在下一部分，我们将介绍地理复制。
- en: '**Geo-replication**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**地理复制**'
- en: 'Azure SQL Database also provides the benefit of being able to replicate a database
    to a different region, also known as a secondary region; this is completely based
    on the plan that you are choosing. The database at the secondary region can be
    read by applications. Azure SQL Database allows readable secondary databases.
    This is a great business continuity solution as a readable database is available
    at any point in time. With geo-replication, it is possible to have up to four
    secondaries of a database in different regions or the same region. With geo-replication,
    it is also possible to fail over to a secondary database in the event of a disaster.
    Geo-replication is configured at the database level, as shown in *Figure 7.7*:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Azure SQL 数据库还提供了将数据库复制到不同区域（也称为次级区域）的功能；这完全取决于您选择的计划。次级区域中的数据库可以被应用程序读取。Azure
    SQL 数据库允许可读的次级数据库。这是一个很好的业务连续性解决方案，因为任何时刻都可以使用可读数据库。通过地理复制，可以在不同区域或相同区域最多拥有四个次级数据库。通过地理复制，也可以在发生灾难时故障转移到次级数据库。地理复制在数据库级别进行配置，如*图
    7.7*所示：
- en: '![Geo-replication in Azure](img/B15432_07_07.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![Azure 中的地理复制](img/B15432_07_07.jpg)'
- en: 'Figure 7.7: Geo-replication in Azure'
  id: totrans-90
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.7：Azure 中的地理复制
- en: 'If you scroll down on this screen, the regions that can act as secondaries are
    listed, as shown in *Figure 7.8*:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在这个屏幕上向下滚动，将列出可以作为**副本**的区域，如*图 7.8*所示：
- en: '![List of available secondaries for geo-replication](img/B15432_07_08.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![可用于地理复制的副本列表](img/B15432_07_08.jpg)'
- en: 'Figure 7.8: List of available secondaries for geo-replication'
  id: totrans-93
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.8：可用于地理复制的副本列表
- en: Before architecting solutions that involve geo-replication, we need to validate
    the data residency and compliance regulations. If customer data is not allowed
    to be stored outside a region due to compliance reasons, we shouldn't be replicating
    it to other regions.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计涉及地理复制的解决方案之前，我们需要验证数据驻留和合规性法规。如果由于合规原因不允许将客户数据存储在区域外，我们就不应该将其复制到其他区域。
- en: In the next section, we will explore scalability options.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨可扩展性选项。
- en: '**Scalability**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**可扩展性**'
- en: 'Azure SQL Database provides vertical scalability by adding more resources (such
    as compute, memory, and IOPS). This can be done by increasing the number of **Database
    Throughput Units** (**DTUs**) or compute and storage resources in the case of
    the **vCore** model:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Azure SQL 数据库通过增加更多资源（如计算、内存和 IOPS）提供垂直**可扩展性**。这可以通过增加**数据库吞吐量单位**（**DTU**）或在**vCore**模型中增加计算和存储资源来实现：
- en: '![Achieving scalability in DTU and vCore models](img/B15432_07_09.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![DTU 和 vCore 模型中的可扩展性](img/B15432_07_09.jpg)'
- en: 'Figure 7.9: Scalability in Azure SQL Database'
  id: totrans-99
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.9：Azure SQL 数据库中的可扩展性
- en: We have covered the differences between DTU-based model and the vCore-based
    model later in this chapter.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章后面介绍了基于 DTU 模型和基于 vCore 模型之间的区别。
- en: In the next section, we will cover security, which will help you understand
    how to build secure data solutions in Azure.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍安全性，帮助你理解如何在 Azure 中构建安全的数据解决方案。
- en: Security
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全性
- en: Security is an important factor for any database solution and service. Azure
    SQL provides enterprise-grade security for Azure SQL, and this section will list
    some of the important security features in Azure SQL.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性是任何数据库解决方案和服务的重要因素。Azure SQL 为 Azure SQL 提供了企业级的安全性，本节将列出一些 Azure SQL 中的重要安全功能。
- en: '**Firewall**'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**防火墙**'
- en: Azure SQL Database, by default, does not provide access to any requests. Source
    IP addresses should be explicitly accepted for access to SQL Server. There is
    an option to allow all Azure-based services access to a SQL database as well.
    This option includes virtual machines hosted on Azure.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Azure SQL 数据库不提供任何请求的访问权限。必须显式接受源 IP 地址才能访问 SQL 服务器。也可以选择允许所有基于 Azure
    的服务访问 SQL 数据库。此选项包括托管在 Azure 上的虚拟机。
- en: The firewall can be configured at the server level instead of the database level.
    The Allow access to Azure services option allows all services, including virtual
    machines, to access a database hosted on a logical server.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 防火墙可以在服务器级别进行配置，而不是在数据库级别进行配置。**允许访问 Azure 服务**选项允许所有服务，包括虚拟机，访问托管在逻辑服务器上的数据库。
- en: 'By default, this will be turned off due to security reasons; enabling this
    would allow access from all Azure services:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，由于安全原因，此功能将被禁用；启用此功能将允许所有 Azure 服务访问：
- en: '![Configuring a firewall at the server level in Azure](img/B15432_07_10.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![在 Azure 中配置服务器级别的防火墙](img/B15432_07_10.jpg)'
- en: 'Figure 7.10: Configuring a firewall at the server level in Azure'
  id: totrans-109
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.10：在 Azure 中配置服务器级别的防火墙
- en: '**Azure SQL Server on dedicated networks**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**Azure SQL 服务器专用网络**'
- en: Although access to SQL Server is generally available through the internet, it
    is possible for access to SQL Server to be limited to requests coming from virtual
    networks. This is a relatively new feature in Azure. This helps in accessing data
    within SQL Server from an application on another server of the virtual network
    without the request going through the internet.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 SQL 服务器通常可以通过互联网访问，但也可以将 SQL 服务器的访问限制为来自虚拟网络的请求。这是 Azure 中一个相对较新的功能。它帮助通过虚拟网络中的另一台服务器上的应用程序访问
    SQL 服务器中的数据，而不通过互联网发出请求。
- en: 'For this, a service endpoint of the **Microsoft.Sql** type should be added
    within the virtual network, and the virtual network should be in the same region
    as that of Azure SQL Database:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，应该在虚拟网络中添加一个**Microsoft.Sql**类型的服务端点，并且虚拟网络应与 Azure SQL 数据库所在的区域相同：
- en: '![Adding a Microsoft.Sql service endpoint](img/B15432_07_11.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![添加 Microsoft.Sql 服务端点](img/B15432_07_11.jpg)'
- en: 'Figure 7.11: Adding a Microsoft.Sql service endpoint'
  id: totrans-114
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.11：添加 Microsoft.Sql 服务端点
- en: 'An appropriate subnet within the virtual network should be chosen:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 应选择虚拟网络中的一个合适的**子网**：
- en: '![Choosing a subnet for the Microsoft.Sql service](img/B15432_07_12.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![为 Microsoft.Sql 服务选择子网](img/B15432_07_12.jpg)'
- en: 'Figure 7.12: Choosing a subnet for the Microsoft.Sql service'
  id: totrans-117
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.12：为 Microsoft.Sql 服务选择子网
- en: 'Finally, from the Azure SQL Server configuration blade, an existing virtual
    network should be added that has a **Microsoft.Sql** service endpoint enabled:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 Azure SQL Server 配置面板中，应添加一个已启用**Microsoft.Sql**服务终结点的现有虚拟网络：
- en: '![Adding a virtual network with the Microsoft.Sql service endpoint](img/B15432_07_13.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![添加带有 Microsoft.Sql 服务终结点的虚拟网络](img/B15432_07_13.jpg)'
- en: 'Figure 7.13: Adding a virtual network with the Microsoft.Sql service endpoint'
  id: totrans-120
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.13：添加具有 Microsoft.Sql 服务终结点的虚拟网络
- en: '**Encrypted databases at rest**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**静态时加密的数据库**'
- en: The databases should be in an encrypted form when at rest. **At rest** here
    means that the data is at the storage location of the database. Although you might
    not have access to SQL Server and its database, it is preferable to encrypt the
    database storage.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库在静态时应以加密形式存在。这里的**静态**意味着数据处于数据库的存储位置。尽管你可能无法访问 SQL Server 及其数据库，但最好还是加密数据库存储。
- en: Databases on a filesystem can be encrypted using keys. These keys must be stored
    in Azure Key Vault and the vault must be available in the same region as that
    of Azure SQL Server. The filesystem can be encrypted by using the **Transparent
    data encryption** menu item of the SQL Server configuration blade and by selecting **Yes** for **Use
    your own key**.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 文件系统上的数据库可以使用密钥进行加密。这些密钥必须存储在 Azure 密钥保管库中，并且该保管库必须与 Azure SQL 服务器位于同一地区。可以通过
    SQL Server 配置面板中的**透明数据加密**菜单项，并选择**是**来启用**使用您自己的密钥**来加密文件系统。
- en: 'The key is an RSA 2048 key and must exist within the vault. SQL Server will
    decrypt the data at the page level when it wants to read it and send it to the
    caller; then, it will encrypt it after writing to the database. No changes to
    the applications are required, and it is completely transparent to them:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥是一个 RSA 2048 密钥，必须存在于保管库中。SQL Server 在需要读取数据并将其发送给调用方时，会在页面级别解密数据；然后，它会在写入数据库后对其进行加密。应用程序无需任何更改，并且这对它们是完全透明的：
- en: '![Transparent data encryption in SQL Server](img/B15432_07_14.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![SQL Server 中的透明数据加密](img/B15432_07_14.jpg)'
- en: 'Figure 7.14: Transparent data encryption in SQL Server'
  id: totrans-126
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.14：SQL Server 中的透明数据加密
- en: '**Dynamic data masking**'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**动态数据屏蔽**'
- en: SQL Server also provides a feature that masks individual columns that contain
    sensitive data, so that no one apart from privileged users can view actual data
    by querying it in SQL Server Management Studio. Data will remain masked and will
    only be unmasked when an authorized application or user queries the table. Architects
    should ensure that sensitive data, such as credit card details, social security
    numbers, phone numbers, email addresses, and other financial details, is masked.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: SQL Server 还提供了一种功能，能够屏蔽包含敏感数据的单个列，这样除了特权用户之外，其他人无法通过 SQL Server Management
    Studio 查询来查看实际数据。数据将保持屏蔽状态，只有当经过授权的应用程序或用户查询表时，数据才会被解屏蔽。架构师应确保像信用卡信息、社会安全号码、电话号码、电子邮件地址和其他财务信息等敏感数据被屏蔽。
- en: 'Masking rules may be defined on a column in a table. There are four main types
    of masks—you can check them out here: [https://docs.microsoft.com/sql/relational-databases/security/dynamic-data-masking?view=sql-server-ver15#defining-a-dynamic-data-mask](https://docs.microsoft.com/sql/relational-databases/security/dynamic-data-masking?view=sql-server-ver15#defining-a-dynamic-data-mask).'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在表中的列上定义屏蔽规则。有四种主要的屏蔽类型—你可以在这里查看它们：[https://docs.microsoft.com/sql/relational-databases/security/dynamic-data-masking?view=sql-server-ver15#defining-a-dynamic-data-mask](https://docs.microsoft.com/sql/relational-databases/security/dynamic-data-masking?view=sql-server-ver15#defining-a-dynamic-data-mask)。
- en: '*Figure 7.15* shows how data masking is added:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7.15* 显示了如何添加数据屏蔽：'
- en: '![Dynamic data masking in SQL Database](img/B15432_07_15.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![SQL 数据库中的动态数据屏蔽](img/B15432_07_15.jpg)'
- en: 'Figure 7.15: Dynamic data masking in SQL Database'
  id: totrans-132
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.15：SQL 数据库中的动态数据屏蔽
- en: '**Azure Active Directory integration**'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**Azure Active Directory 集成**'
- en: Another important security feature of Azure SQL is that it can be integrated
    with Azure **Active Directory** (**AD**) for authentication purposes. Without
    integrating with Azure AD, the only authentication mechanism available to SQL
    Server is via username and password authentication—that is, SQL authentication.
    It is not possible to use integrated Windows authentication. The connection string
    for SQL authentication consists of both the username and password in plaintext,
    which is not secure. Integrating with Azure AD enables the authentication of applications
    with Windows authentication, a service principal name, or token-based authentication. It
    is a good practice to use Azure SQL Database integrated with Azure AD.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的 Azure SQL 安全特性是，它可以与 Azure **Active Directory**（**AD**）集成，用于身份验证。如果没有与
    Azure AD 集成，SQL Server 唯一的身份验证机制是通过用户名和密码进行身份验证，即 SQL 身份验证。无法使用集成的 Windows 身份验证。SQL
    身份验证的连接字符串包括明文的用户名和密码，这并不安全。与 Azure AD 集成可以启用 Windows 身份验证、服务主体名称或基于令牌的身份验证，从而对应用程序进行身份验证。将
    Azure SQL 数据库与 Azure AD 集成是一个好做法。
- en: There are other security features, such as advanced threat protection, auditing
    of the environment, and monitoring, that should be enabled on any enterprise-level
    Azure SQL Database deployments.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他安全功能，如高级威胁防护、环境审计和监控，应该在任何企业级的 Azure SQL 数据库部署中启用。
- en: With that, we've concluded our look at the features of Azure SQL Database and
    can now move on to the types of SQL databases.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 到此，我们已经结束了对 Azure SQL 数据库功能的介绍，现在可以继续讨论 SQL 数据库的类型。
- en: Single Instance
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单实例
- en: Single Instance databases are hosted as a single database on a single logical
    server. These databases do not have access to the complete features provided by
    SQL Server. Each database is isolated and portable. Single instances support the
    vCPU-based and DTU-based purchasing models that we discussed earlier.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 单实例数据库作为单个数据库托管在单个逻辑服务器上。这些数据库无法访问 SQL Server 提供的所有完整功能。每个数据库都是隔离的且可移植的。单实例支持我们之前讨论的
    vCPU 和 DTU 购买模型。
- en: Another added advantage of a single database is cost-efficiency. If you are
    in a vCore-based model, you can opt for lower compute and storage resources to
    optimize costs. If you need more compute or storage power, you can always scale
    up. Dynamic scalability is a prominent feature of single instances that helps
    to scale resources dynamically based on business requirements. Single instances
    allow existing SQL Server customers to lift and shift their on-premises applications
    to the cloud.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 单数据库的另一个优势是成本效益。如果您使用 vCore 模型，可以选择较低的计算和存储资源来优化成本。如果需要更多的计算或存储能力，您可以随时进行扩展。动态可扩展性是单实例的一个突出特性，可以根据业务需求动态地扩展资源。单实例使现有的
    SQL Server 客户能够将本地应用程序迁移到云端。
- en: Other features include availability, monitoring, and security.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 其他功能包括可用性、监控和安全性。
- en: When we started our section on Azure SQL Database, we mentioned elastic pools
    as well. You can also transition a single database to an elastic pool for resource
    sharing. If you are wondering what resource sharing and what elastic pools are,
    in the next section, we will cover this.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始介绍 Azure SQL 数据库时，我们也提到过弹性池。您还可以将单一数据库转换为弹性池，以便共享资源。如果您在疑惑什么是资源共享和弹性池，下一节我们将详细介绍这一点。
- en: Elastic pools
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弹性池
- en: 'An elastic pool is a logical container that can host multiple databases on
    a single logical server. Elastic pools are available in the vCore-based and DTU-based
    purchasing models. The vCPU-based purchasing model is the default and recommended
    method of deployment, where you''ll get the freedom to choose your compute and
    storage resources based on your business workloads. As shown in *Figure 7.16*,
    you can select how many cores and how much storage is required for your database:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 弹性池是一个逻辑容器，可以在单个逻辑服务器上托管多个数据库。弹性池适用于 vCore 模型和 DTU 模型的购买方式。vCPU 购买模型是默认且推荐的部署方式，您可以根据业务负载选择计算和存储资源。如*图
    7.16*所示，您可以选择需要的核心数和存储量：
- en: '![Setting up elastic pools in the vCore-based model](img/B15432_07_16.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![在 vCore 模型中设置弹性池](img/B15432_07_16.jpg)'
- en: 'Figure 7.16: Setting up elastic pools in the vCore-based model'
  id: totrans-145
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.16：在 vCore 模型中设置弹性池
- en: Also, at the top of the preceding figure, you can see there is an option that
    says **Looking for basic, standard, premium?** If you select this, the model will
    be switched to the DTU model.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在前面的图表顶部，你可以看到一个选项，上面写着 **Looking for basic, standard, premium?** 如果选择此项，模型将切换为
    DTU 模型。
- en: 'The SKUs available for elastic pools in the DTU-based model are as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: DTU 基础模型中可用于弹性池的 SKU 如下：
- en: Basic
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本
- en: Standard
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准
- en: Premium
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级
- en: '*Figure 7.17* shows the maximum amounts of DTUs that can be provisioned for
    each SKU:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7.17* 显示了每个 SKU 可提供的最大 DTU 数量：'
- en: '![Amount of DTUs per SKU in an elastic pool](img/B15432_07_17.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![弹性池每个 SKU 的 DTU 数量](img/B15432_07_17.jpg)'
- en: 'Figure 7.17: Amount of DTUs per SKU in an elastic pool'
  id: totrans-153
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.17：弹性池每个 SKU 的 DTU 数量
- en: All the features discussed for Azure SQL single instances are available to elastic
    pools as well; however, horizontal scalability is an additional feature that enables
    sharding. Sharding refers to the vertical or horizontal partitioning of data and
    the storage of that data in separate databases. It is also possible to have autoscaling
    of individual databases in an elastic pool by consuming more DTUs than are actually
    allocated to that database.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 针对 Azure SQL 单实例讨论的所有功能同样适用于弹性池；然而，水平可扩展性是一个额外功能，支持分片。分片指的是数据的垂直或水平分区，并将数据存储在不同的数据库中。还可以通过消耗比实际分配的
    DTU 更多的 DTU 来实现弹性池中各个数据库的自动扩展。
- en: Elastic pools also provide another advantage in terms of cost. You will see
    in a later section that Azure SQL Database is priced using DTUs, and DTUs are
    provisioned as soon as the SQL Server service is provisioned. DTUs are charged
    for irrespective of whether those DTUs are consumed. If there are multiple databases,
    then it is possible to put these databases into elastic pools and for them to
    share the DTUs among them.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 弹性池还在成本方面提供了另一项优势。你将在后续部分看到，Azure SQL 数据库是按 DTU 定价的，且 DTU 在 SQL Server 服务配置完成后立即分配。无论是否使用这些
    DTU，都会对其收费。如果有多个数据库，可以将这些数据库放入弹性池中，并在它们之间共享 DTU。
- en: All information for implementing sharding with Azure SQL elastic pools has been
    provided at [https://docs.microsoft.com/azure/sql-database/sql-database-elastic-scale-introduction](https://docs.microsoft.com/azure/sql-database/sql-database-elastic-scale-introduction).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 实现使用 Azure SQL 弹性池分片的所有信息可以在 [https://docs.microsoft.com/azure/sql-database/sql-database-elastic-scale-introduction](https://docs.microsoft.com/azure/sql-database/sql-database-elastic-scale-introduction)
    找到。
- en: Next, we will discuss the Managed Instance deployment option, which is a scalable,
    intelligent, cloud-based, fully managed database.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论托管实例部署选项，它是一种可扩展、智能、基于云的完全托管数据库。
- en: Managed Instance
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 托管实例
- en: Managed Instance is a unique service that provides a managed SQL server similar
    to what's available on on-premises servers. Users have access to master, model,
    and other system databases. Managed Instance is ideal when there are multiple
    databases and customers migrating their instances to Azure. Managed Instance consists
    of multiple databases.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 托管实例是一项独特的服务，提供类似于本地服务器上可用的托管 SQL 服务器。用户可以访问主数据库、模型数据库和其他系统数据库。托管实例非常适合多个数据库和客户将其实例迁移到
    Azure。托管实例由多个数据库组成。
- en: 'Azure SQL Database provides a new deployment model known as Azure SQL Database
    Managed Instance that provides almost 100% compatibility with the SQL Server Enterprise
    Edition Database Engine. This model provides a native virtual network implementation
    that addresses the usual security issues and is a highly recommended business
    model for on-premises SQL Server customers. Managed Instance allows existing SQL
    Server customers to lift and shift their on-premises applications to the cloud
    with minimal application and database changes while preserving all PaaS capabilities
    at the same time. These PaaS capabilities drastically reduce the management overhead
    and total cost of ownership, as shown in *Figure 7.18*:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Azure SQL 数据库提供了一种新的部署模型，即 Azure SQL 数据库托管实例，它与 SQL Server 企业版数据库引擎几乎 100% 兼容。该模型提供了本地虚拟网络实现，解决了常见的安全问题，是本地
    SQL Server 客户非常推荐的业务模型。托管实例允许现有的 SQL Server 客户将其本地应用程序迁移到云端，几乎不需要对应用程序和数据库进行更改，同时保留所有
    PaaS 能力。这些 PaaS 能力大大减少了管理开销和总拥有成本，如 *图 7.18* 所示：
- en: '![SQL Database Managed Instance capabilities](img/B15432_07_18.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![SQL 数据库托管实例功能](img/B15432_07_18.jpg)'
- en: 'Figure 7.18: Azure SQL Database Managed Instance'
  id: totrans-162
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.18：Azure SQL 数据库托管实例
- en: 'The complete comparison between Azure SQL Database, Azure SQL Managed Instance,
    and SQL Server on an Azure virtual machine is available here: [https://docs.microsoft.com/azure/azure-sql/azure-sql-iaas-vs-paas-what-is-overview#comparison-table](https://docs.microsoft.com/azure/azure-sql/azure-sql-iaas-vs-paas-what-is-overview#comparison-table).'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Azure SQL数据库、Azure SQL托管实例和在Azure虚拟机上的SQL Server之间的完整比较可在此查看：[https://docs.microsoft.com/azure/azure-sql/azure-sql-iaas-vs-paas-what-is-overview#comparison-table](https://docs.microsoft.com/azure/azure-sql/azure-sql-iaas-vs-paas-what-is-overview#comparison-table)。
- en: 'The key features of Managed Instance are shown in the *Figure 7.19*:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 托管实例的关键功能显示在*图7.19*中：
- en: '![SQL Database Managed Instance features](img/B15432_07_19.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![SQL数据库托管实例功能](img/B15432_07_19.jpg)'
- en: 'Figure 7.19: SQL Database Managed Instance features'
  id: totrans-166
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.19：SQL数据库托管实例功能
- en: We have mentioned the terms vCPU-based pricing model and DTU-based pricing model
    at several points throughout the chapter. It's time that we took a closer look
    at these pricing models.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中提到过vCPU定价模型和DTU定价模型。现在是时候更仔细地了解这些定价模型了。
- en: SQL database pricing
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL数据库定价
- en: Azure SQL previously had just one pricing model—a model based on DTUs—but an
    alternative pricing model based on vCPUs has also been launched. The pricing model
    is selected based on the customer's requirements. The DTU-based model is selected
    when the customer wants simple and preconfigured resource options. On the other
    hand, the vCore-based model offers the flexibility to choose compute and storage
    resources. It also provides control and transparency.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Azure SQL之前只有一种定价模型——基于DTU的模型——但现在也推出了基于vCPU的替代定价模型。定价模型根据客户的需求进行选择。当客户希望使用简单且预配置的资源选项时，选择基于DTU的模型；而基于vCore的模型则提供选择计算和存储资源的灵活性，同时也提供更多的控制和透明度。
- en: Let's take a closer look at each of these models.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看这些模型。
- en: DTU-based pricing
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于DTU的定价
- en: The DTU is the smallest unit of performance measure for Azure SQL Database.
    Each DTU corresponds to a certain amount of resources. These resources include
    storage, CPU cycles, IOPS, and network bandwidth. For example, a single DTU might
    provide three IOPS, a few CPU cycles, and IO latencies of 5 ms for read operations
    and 10 ms for write operations.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: DTU是Azure SQL数据库性能衡量的最小单位。每个DTU对应一定量的资源。这些资源包括存储、CPU周期、IOPS和网络带宽。例如，一个DTU可能提供三个IOPS、少量CPU周期，以及5毫秒的读操作延迟和10毫秒的写操作延迟。
- en: 'Azure SQL Database provides multiple SKUs for creating databases, and each
    of these SKUs has defined constraints for the maximum amount of DTUs. For example,
    the Basic SKU provides just **5** DTUs with a maximum **2 GB** of data, as shown
    in *Figure 7.20*:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Azure SQL数据库提供多种SKU用于创建数据库，每种SKU都有定义的DTU最大限制。例如，Basic SKU只提供**5**个DTU和最大**2
    GB**的数据，如*图7.20*所示：
- en: '![DTUs for different SKUs in Azure](img/B15432_07_20.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![Azure中不同SKU的DTU](img/B15432_07_20.jpg)'
- en: 'Figure 7.20: DTUs for different SKUs'
  id: totrans-175
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.20：不同SKU的DTU
- en: 'On the other hand, the standard SKU provides anything between **10** DTUs and
    **300** DTUs with a maximum of **250** GB of data. As you can see here, each DTU
    costs around 991 rupees, or around $1.40:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，标准SKU提供从**10**个DTU到**300**个DTU之间的任何数量，最大数据量为**250** GB。如你所见，每个DTU的费用大约为991卢比，或大约$1.40：
- en: '![Cost summary for the selected number of DTUs in the Standard SKU](img/B15432_07_21.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![标准SKU中选择数量的DTU费用总结](img/B15432_07_21.jpg)'
- en: 'Figure 7.21: Cost summary for the selected number of DTUs in the Standard SKU'
  id: totrans-178
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.21：标准SKU中选择数量的DTU费用总结
- en: 'A comparison of these SKUs in terms of performance and resources is provided
    by Microsoft and is shown in the *Figure 7.22*:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft提供了这些SKU在性能和资源方面的比较，并显示在*图7.22*中：
- en: '![SKU comparison in Azure](img/B15432_07_22.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![Azure中的SKU比较](img/B15432_07_22.jpg)'
- en: 'Figure 7.22: SKU comparison in Azure'
  id: totrans-181
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图7.22：Azure中的SKU比较
- en: Once you provision a certain number of DTUs, the back-end resources (CPU, IOPS,
    and memory) are allocated and are charged for whether they are consumed or not.
    If more DTUs are procured than are actually needed, it leads to waste, while there
    would be performance bottlenecks if insufficient DTUs were provisioned.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你配置了特定数量的DTU，后端资源（CPU、IOPS和内存）就会被分配，并且无论是否使用，都需要为其付费。如果采购的DTU数量超过实际需要，就会造成浪费；而如果配置的DTU数量不足，则会导致性能瓶颈。
- en: Azure provides elastic pools for this reason as well. As you know, there are
    multiple databases in an elastic pool and DTUs are assigned to elastic pools instead
    of individual databases. It is possible for all databases within a pool to share
    the DTUs. This means that if a database has low utilization and is consuming only
    five DTUs, there will be another database consuming 25 DTUs in order to compensate.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 正因如此，Azure 提供了弹性池。如您所知，弹性池中有多个数据库，DTU 是分配给弹性池的，而不是单个数据库。池内的所有数据库可以共享 DTU。这意味着，如果某个数据库的使用量较低，仅消耗了
    5 个 DTU，则会有其他数据库消耗 25 个 DTU 来进行补偿。
- en: It is important to note that, collectively, DTU consumption cannot exceed the
    amount of DTUs provisioned for the elastic pool. Moreover, there is a minimum
    amount of DTUs that should be assigned to each database within the elastic pool,
    and this minimum DTU count is preallocated for the database.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，总体上，DTU 的消耗不能超过为弹性池分配的 DTU 数量。此外，弹性池内的每个数据库应分配最小的 DTU 数量，这个最小的 DTU 数量是预分配给数据库的。
- en: 'An elastic pool comes with its own SKUs:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 弹性池有自己的 SKU：
- en: '![SKUs in an elastic pool](img/B15432_07_23.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![弹性池中的 SKU](img/B15432_07_23.jpg)'
- en: 'Figure 7.23: SKUs in an elastic pool'
  id: totrans-187
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.23：弹性池中的 SKU
- en: 'Also, there is a limit on the maximum number of databases that can be created
    within a single elastic pool. The complete limits can be reviewed here: [https://docs.microsoft.com/azure/azure-sql/database/resource-limits-dtu-elastic-pools](https://docs.microsoft.com/azure/azure-sql/database/resource-limits-dtu-elastic-pools).'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，单个弹性池中可以创建的数据库数量有限。完整的限制可以在此查看：[https://docs.microsoft.com/azure/azure-sql/database/resource-limits-dtu-elastic-pools](https://docs.microsoft.com/azure/azure-sql/database/resource-limits-dtu-elastic-pools)。
- en: vCPU-based pricing
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于 vCPU 的定价
- en: This is the new pricing model for Azure SQL. This pricing model provides options to
    procure the number of **virtual CPUs** (**vCPUs**) allocated to the server instead
    of setting the amount of DTUs required for an application. A vCPU is a logical
    CPU with attached hardware, such as storage, memory, and CPU cores.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Azure SQL 的新定价模型。此定价模型提供了根据服务器分配的**虚拟 CPU**（**vCPU**）数量来采购，而不是为应用设置所需的 DTU
    数量的选项。vCPU 是附带硬件的逻辑 CPU，例如存储、内存和 CPU 核心。
- en: 'In this model, there are three SKUs: **General Purpose**, **Hyperscale**, and **Business
    Critical**, with a varied number of vCPUs and resources available. This pricing
    is available for all SQL deployment models:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在此模型中，有三个 SKU：**通用型**、**超大规模**和**业务关键型**，每个 SKU 提供不同数量的 vCPU 和资源。此定价适用于所有 SQL
    部署模型：
- en: '![vCPU pricing for the General Purpose SKU](img/B15432_07_24.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![通用 SKU 的 vCPU 定价](img/B15432_07_24.jpg)'
- en: 'Figure 7.24: vCPU pricing for the General Purpose SKU'
  id: totrans-193
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.24：通用 SKU 的 vCPU 定价
- en: How to choose the appropriate pricing model
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何选择合适的定价模型
- en: Architects should be able to choose an appropriate pricing model for Azure SQL
    Database. DTUs are a great mechanism for pricing where there is a usage pattern
    applicable and available for the database. Since resource availability in the
    DTU scheme of things is linear, as shown in the next diagram, it is quite possible
    for usage to be more memory-intensive than CPU-intensive. In such cases, it is
    possible to choose different levels of CPU, memory, and storage for a database.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 架构师应能够为 Azure SQL 数据库选择合适的定价模型。DTU 是一种很好的定价机制，适用于有适用和可用使用模式的数据库。由于 DTU 方案中的资源可用性是线性的，如下图所示，数据库的使用可能更多的是内存密集型而非
    CPU 密集型。在这种情况下，可以为数据库选择不同级别的 CPU、内存和存储。
- en: In DTUs, resources come packaged, and it is not possible to configure these
    resources at a granular level. With a vCPU model, it is possible to choose different
    levels of memory and CPU for different databases. If the usage pattern for an
    application is known, using the vCPU pricing model could be a better option compared
    to the DTU model. In fact, the vCPU model also provides the benefit of hybrid
    licenses if an organization already has on-premises SQL Server licenses. There
    is a discount of up to 30% provided to these SQL Server instances.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DTU 模型中，资源是打包在一起的，无法对这些资源进行细粒度配置。而在 vCPU 模型中，可以为不同的数据库选择不同级别的内存和 CPU。如果已知某应用的使用模式，使用
    vCPU 定价模型可能比 DTU 模型更合适。事实上，vCPU 模型还为已拥有本地 SQL Server 许可证的组织提供了混合许可证的好处。这些 SQL
    Server 实例可获得最高 30% 的折扣。
- en: 'In *Figure 7.25*, you can see from the left-hand graph that as the amount of
    DTUs increases, resource availability also grows linearly; however, with vCPU
    pricing (in the right-hand graph), it is possible to choose independent configurations
    for each database:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图 7.25*中，你可以从左侧的图表看到，随着 DTU 数量的增加，资源可用性也线性增长；然而，在右侧的 vCPU 定价图表中，你可以为每个数据库选择独立的配置：
- en: '![Scalability in DTU and vCore models](img/B15432_07_09.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![DTU 和 vCore 模式的可扩展性](img/B15432_07_09.jpg)'
- en: 'Figure 7.25: Storage-compute graph for the DTU and vCore models'
  id: totrans-199
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.25：DTU 和 vCore 模式的存储计算图
- en: With that, we can conclude our coverage of Azure SQL Database. We discussed
    different deployment methods, features, pricing, and plans related to Azure SQL
    Database. In the next section, we will be covering Cosmos DB, which is a NoSQL
    database service.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些内容，我们可以结束对 Azure SQL 数据库的介绍。我们讨论了与 Azure SQL 数据库相关的不同部署方法、功能、定价和计划。在接下来的章节中，我们将介绍
    Cosmos DB，它是一个 NoSQL 数据库服务。
- en: Azure Cosmos DB
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure Cosmos DB
- en: Cosmos DB is Azure's truly cross-region, highly available, distributed, multi-model
    database service. Cosmos DB is for you if you would like your solution to be highly
    responsive and always available. As this is a cross-region multi-model database,
    we can deploy applications closer to the user's location and achieve low latency
    and high availability.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: Cosmos DB 是 Azure 真实的跨区域、高可用、分布式、多模型数据库服务。如果你希望你的解决方案具有高度响应性并且始终可用，那么 Cosmos
    DB 适合你。由于这是一个跨区域的多模型数据库，我们可以将应用程序部署在离用户位置更近的地方，从而实现低延迟和高可用性。
- en: 'With the click of a button, throughput and storage can be scaled across any
    number of Azure regions. There are a few different database models to cover almost
    all non-relational database requirements, including:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 只需点击按钮，就可以在任意数量的 Azure 区域之间扩展吞吐量和存储。为了涵盖几乎所有非关系型数据库的需求，提供了几种不同的数据库模型，包括：
- en: SQL (documents)
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SQL（文档）
- en: MongoDB
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MongoDB
- en: Cassandra
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Cassandra
- en: Table
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 表
- en: Gremlin Graph
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Gremlin 图
- en: The hierarchy of objects within Cosmos DB starts with the Cosmos DB account.
    An account can have multiple databases, and each database can have multiple containers.
    Depending on the type of database, the container might consist of documents, as
    in the case of SQL; semi-structured key-value data within Table storage; or entities
    and relationships among those entities, if using Gremlin and Cassandra to store
    NoSQL data.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Cosmos DB 中的对象层次结构从 Cosmos DB 账户开始。一个账户可以拥有多个数据库，每个数据库可以拥有多个容器。根据数据库的类型，容器可能包含文档（例如
    SQL 的情况）；在 Table 存储中包含半结构化的键值数据；或者如果使用 Gremlin 和 Cassandra 存储 NoSQL 数据，则包含实体及其之间的关系。
- en: Cosmos DB can be used to store OLTP data. It accounts for ACID with regard to
    transaction data, with a few caveats.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Cosmos DB 可用于存储 OLTP 数据。它在事务数据方面符合 ACID 原则，但有一些例外情况。
- en: Cosmos DB provides for ACID requirements at the single document level. This
    means data within a document, when updated, deleted, or inserted, will have its
    atomicity, consistency, isolation, and durability maintained. However, beyond
    documents, consistency and atomicity have to be managed by the developer themselves.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Cosmos DB 在单个文档级别提供 ACID 要求。这意味着文档中的数据在更新、删除或插入时，其原子性、一致性、隔离性和持久性将得到维护。然而，在文档之外，一致性和原子性需要由开发者自己管理。
- en: 'Pricing for Cosmos DB can be found here: [https://azure.microsoft.com/pricing/details/cosmos-db](https://azure.microsoft.com/pricing/details/cosmos-db).'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Cosmos DB 的定价可以在这里找到：[https://azure.microsoft.com/pricing/details/cosmos-db](https://azure.microsoft.com/pricing/details/cosmos-db)。
- en: '*Figure 7.26* shows some features of Azure Cosmos DB:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 7.26* 展示了 Azure Cosmos DB 的一些特性：'
- en: '![Azure Cosmos DB overview](img/B15432_07_26.jpg)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![Azure Cosmos DB 概览](img/B15432_07_26.jpg)'
- en: 'Figure 7.26: An overview of Azure Cosmos DB'
  id: totrans-215
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 7.26：Azure Cosmos DB 概览
- en: In the next section, we will cover some key features of Azure Cosmos DB.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将介绍 Azure Cosmos DB 的一些关键特性。
- en: Features
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特性
- en: 'Some of the key benefits of Azure Cosmos DB are:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Cosmos DB 的一些主要优点包括：
- en: '**Global distribution**: Highly responsive and highly available applications
    can be built worldwide using Azure Cosmos DB. With the help of replication, replicas
    of data can be stored in Azure regions that are close to users, hence providing
    less latency and global distribution.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全球分布**：可以使用 Azure Cosmos DB 构建全球范围内的高度响应和高可用应用程序。在复制的帮助下，数据副本可以存储在接近用户的 Azure
    区域，从而提供更低的延迟和全球分布。'
- en: '**Replication:** You can opt in to or opt out of replication to a region any
    time you like. Let''s say you have a replica of your data available in the East
    US region, and your organization is planning to shut down their processes in East
    US and migrate to UK South. With just a few clicks, East US can be removed, and
    UK South can be added to the account for replication.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复制：**你可以随时选择是否将数据复制到某个地区。假设你的数据在东部美国地区有一个副本，而你的组织计划在东部美国停用该服务并迁移到英国南部。只需几次点击，你就可以移除东部美国并将英国南部添加到账户中进行复制。'
- en: '**Always On**: Cosmos DB provides 99.999% of high availability for both read
    and write. The regional failover of a Cosmos DB account to another region can
    be invoked via the Azure portal or programmatically. This ensures business continuity
    and disaster recovery planning for your application during a region failure.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**始终在线**：Cosmos DB 提供 99.999% 的高可用性，支持读取和写入。通过 Azure 门户或编程方式，可以触发 Cosmos DB
    账户的区域故障切换到其他地区。这确保了应用在发生区域故障时的业务连续性和灾难恢复计划。'
- en: '**Scalability**: Cosmos DB offers unmatched elastic scalability for writes
    and reads all around the globe. The scalability response is massive, meaning that
    you can scale from thousands to hundreds of millions of requests/second with a
    single API call. The interesting thing is that this is done around the globe,
    but you need to pay only for throughput and storage. This level of scalability
    is ideal for handling unexpected spikes.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：Cosmos DB 提供无与伦比的全球弹性可扩展性，支持读取和写入。其扩展响应非常强大，意味着你可以通过一次 API 调用将请求量从数千增加到数亿次每秒。值得注意的是，这一切是在全球范围内完成的，但你只需要为吞吐量和存储付费。这种可扩展性非常适合应对意外的流量高峰。'
- en: '**Low latency**: As mentioned earlier, replicating copies of data to locations
    nearer to users drastically reduces latency; it means that users can access their
    data in milliseconds. Cosmos DB guarantees less than 10 ms of latency for both
    reads and writes all around the world.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**低延迟**：如前所述，将数据副本复制到离用户更近的地方可以显著减少延迟，这意味着用户可以在毫秒级别访问数据。Cosmos DB 保证全球范围内的读取和写入延迟低于
    10 毫秒。'
- en: '**TCO Savings**: As Cosmos DB is a fully managed service, the level of management
    required from the customer is low. Also, the customer doesn''t have to set up
    datacenters across the globe to accommodate users from other regions.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TCO 节省**：由于 Cosmos DB 是完全托管的服务，客户需要的管理程度较低。此外，客户无需在全球范围内设置数据中心来支持其他地区的用户。'
- en: '**SLA**: It offers an SLA of 99.999% high availability.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SLA**：它提供 99.999% 的高可用性 SLA。'
- en: '**Support for Open-Source Software** (**OSS**) **APIs**: The support for OSS
    APIs is another added advantage of Cosmos DB. Cosmos DB implements APIs for Cassandra,
    Mongo DB, Gremlin, and Azure Table storage.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对开源软件（OSS）** **API**的支持：Cosmos DB 还支持开源软件 API，另一个额外的优势。Cosmos DB 实现了 Cassandra、Mongo
    DB、Gremlin 和 Azure 表存储的 API。'
- en: Use case scenarios
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用案例场景
- en: If your application involves high levels of data reads and writes at a global
    scale, then Cosmos DB is the ideal choice. The common types of applications that
    have such requirements include web, mobile, gaming, and Internet of Things applications.
    These applications would benefit from the high availability, low latency, and
    global presence of Cosmos DB.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用涉及全球范围的大规模数据读写，那么 Cosmos DB 是理想的选择。这类应用通常包括网页应用、移动应用、游戏和物联网应用。这些应用将从 Cosmos
    DB 的高可用性、低延迟和全球覆盖中获益。
- en: Also, the response time provided by Cosmos DB is near real time. The Cosmos
    DB SDKs can be leveraged to develop iOS and Android applications using the Xamarin
    framework.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Cosmos DB 提供的响应时间接近实时。你可以利用 Cosmos DB SDK 开发基于 Xamarin 框架的 iOS 和 Android
    应用。
- en: 'A couple of the popular games that use Cosmos DB are **The Walking Dead: No
    Man''s Land**, by Next Games, and **Halo 5: Guardians**.'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 一些使用 Cosmos DB 的热门游戏包括**行尸走肉：无人之地**（由 Next Games 开发）和**光环 5：守护者**。
- en: 'A complete list of use case scenarios and examples can be found here: [https://docs.microsoft.com/azure/cosmos-db/use-cases](https://docs.microsoft.com/azure/cosmos-db/use-cases).'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的使用案例和示例列表可以在此找到：[https://docs.microsoft.com/azure/cosmos-db/use-cases](https://docs.microsoft.com/azure/cosmos-db/use-cases)。
- en: Cosmos DB is the go-to service in Azure for storing semi-structured data as
    part of OLTP applications. I could write a whole book on the features and capabilities
    of Cosmos DB alone; the intention of this section was to give you an introduction
    to Cosmos DB and the role it plays in handling OLTP applications.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: Cosmos DB 是 Azure 中用于存储半结构化数据的首选服务，尤其适用于 OLTP 应用程序。我可以单独写一本书来讲解 Cosmos DB 的功能和特性；本节的目的是为你介绍
    Cosmos DB 以及它在处理 OLTP 应用程序中的作用。
- en: Summary
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned that Azure SQL Database is one of the flagship
    services of Azure. A plethora of customers are using this service today and it
    provides all the enterprise capabilities that are needed for a mission-critical
    database management system.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习到 Azure SQL 数据库是 Azure 的旗舰服务之一。今天，众多客户正在使用此服务，它提供了构建任务关键型数据库管理系统所需的所有企业级功能。
- en: You discovered that there are multiple deployment types for Azure SQL Database,
    such as Single Instance, Managed Instance, and elastic pools. Architects should
    perform a complete assessment of their requirements and choose the appropriate
    deployment model. After they choose a deployment model, they should choose a pricing
    strategy between DTUs and vCPUs. They should also configure all the security,
    availability, disaster recovery, monitoring, performance, and scalability requirements
    in Azure SQL Database regarding data.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 你发现 Azure SQL 数据库有多种部署类型，如单实例、托管实例和弹性池。架构师应该全面评估他们的需求并选择合适的部署模型。选择部署模型后，他们还需要在
    DTU 和 vCPU 之间选择定价策略。除此之外，他们还应该配置 Azure SQL 数据库中所有与数据相关的安全性、可用性、灾难恢复、监控、性能和可扩展性需求。
- en: In the next chapter, we will be discussing how to build secure applications
    in Azure. We will cover the security practices and features of most services.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将讨论如何在 Azure 中构建安全的应用程序。我们将涵盖大多数服务的安全实践和功能。
