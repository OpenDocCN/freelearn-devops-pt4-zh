["```\n    Set-AzContext -SubscriptionId xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx\n    ```", "```\n    New-AzResourceGroup -Name IntegrationDemo -Location \"West Europe\" -Verbose\n    ```", "```\n    New-AzKeyVault -Name keyvaultbook -ResourceGroupName IntegrationDemo -Location \"West Europe\" -EnabledForDeployment -EnabledForTemplateDeployment -EnabledForDiskEncryption -EnablePurgeProtection -Sku Standard - Verbose\n    ```", "```\n$sp = New-AzADServicePrincipal -DisplayName \"keyvault-book\" -Scope \"/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" -Role Owner -StartDate ([datetime]::Now) -EndDate $([datetime]::now.AddYears(1)) -Verbose\n```", "```\n/subscriptions/{subscriptionId}/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}\n```", "```\n$BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($sp. Secret) \n$UnsecureSecret = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)\n```", "```\n$app = Get-AzAdApplication -DisplayName $sp.DisplayName\n```", "```\n    $currentDate = Get-Date $expiryDate = $currentDate.AddYears(1)$finalDate = $expiryDate.AddYears(1)$servicePrincipalName = \"https://automation.book.com\"$automationCertificate = New-SelfSignedCertificate -DnsName $servicePrincipalName -KeyExportPolicy Exportable -Provider \"Microsoft Enhanced RSA and AES Cryptographic Provider\" -NotAfter $finalDate -CertStoreLocation \"Cert:\\LocalMachine\\My\"\n    ```", "```\n    $newCert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2 -ArgumentList \"C:\\azureautomation.pfx\", $securepfxpwd $newcertdata = [System.Convert]::ToBase64String($newCert.GetRawCertData())\n    ```", "```\n    $adAppName = \"azure-automation-sp\"$ServicePrincipal = New-AzADServicePrincipal -DisplayName $adAppName -CertValue $newcertdata -StartDate $newCert.NotBefore -EndDate $newCert.NotAfter\n    Sleep 10\t\n    New-AzRoleAssignment -ServicePrincipalName $ServicePrincipal.ApplicationId -RoleDefinitionName Owner -Scope /subscriptions/xxxxx-xxxxxxx-xxxxxx-xxxxxxx  \n    ```", "```\n    Login-AzAccount -ServicePrincipal -CertificateThumbprint $newCert.Thumbprint -ApplicationId $ServicePrincipal.ApplicationId -Tenant \"xxxx-xxxxxx-xxxxx-xxxxx\" \n    ```", "```\n    Get-AzContext\n    ```", "```\n    $IntegrationResourceGroup = \"VaultMonitoring\"$rgLocation = \"West Europe\"$automationAccountName = \"MonitoringKeyVault\"New-AzResourceGroup -name $IntegrationResourceGroup -Location $rgLocation New-AzAutomationAccount -Name $automationAccountName -ResourceGroupName $IntegrationResourceGroup -Location $rgLocation -Plan Free\n    ```", "```\n    New-AzAutomationVariable -Name \"azuresubscriptionid\" -AutomationAccountName $automationAccountName -ResourceGroupName $IntegrationResourceGroup -Value \" xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx \" -Encrypted $true New-AzAutomationVariable -Name \"azuretenantid\" -AutomationAccountName $automationAccountName -ResourceGroupName $IntegrationResourceGroup -Value \" xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx \" -Encrypted $true New-AzutomationVariable -Name \"azureappid\" -AutomationAccountName $automationAccountName -ResourceGroupName $IntegrationResourceGroup -Value \" xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx \" -Encrypted $true\n    ```", "```\n    $securepfxpwd = ConvertTo-SecureString -String 'password' -AsPlainText -Force # Password for the private key PFX certificate New-AzAutomationCertificate -Name \"AutomationCertifcate\" -Path \"C:\\book\\azureautomation.pfx\" -Password $securepfxpwd -AutomationAccountName $automationAccountName -ResourceGroupName $IntegrationResourceGroup\n    ```", "```\nNew-AzEventGridTopic -ResourceGroupName VaultMonitoring -Name azureforarchitects-topic -Location \"West Europe\" \n```", "```\n    $subscriptionID = get-AutomationVariable \"azuresubscriptionid\"$tenantID = get-AutomationVariable \"azuretenantid\"$applicationId = get-AutomationVariable \"azureappid\"$cert = get-AutomationCertificate \"AutomationCertifcate\"$certThumbprint = ($cert.Thumbprint).ToString()\n    ```", "```\n    Login-AzAccount -ServicePrincipal -CertificateThumbprint $certThumbprint -ApplicationId $applicationId -Tenant $tenantID Set-AzContext -SubscriptionId $subscriptionID\n    ```", "```\n    $eventGridName = \"ExpiredAssetsKeyVaultEvents\"$eventGridResourceGroup = \"VaultMonitoring\"$topicEndpoint = (Get-AzEventGridTopic -ResourceGroupName $eventGridResourceGroup -Name $eventGridName).Endpoint $keys = (Get-AzEventGridTopicKey -ResourceGroupName $eventGridResourceGroup -Name $eventGridName ).Key1\n    ```", "```\n    $keyvaults = Get-AzureRmKeyVault foreach($vault in $keyvaults) {$secrets = Get-AzureKeyVaultSecret -VaultName $vault.VaultName foreach($secret in $secrets) {if( ![string]::IsNullOrEmpty($secret.Expires) ) {if($secret.Expires.AddMonths(-1) -lt [datetime]::Now){$secretDataMessage = @{id = [System.guid]::NewGuid()subject = \"Secret Expiry happening soon !!\"eventType = \"Secret Expiry\"eventTime = [System.DateTime]::UtcNow data = @{\"ExpiryDate\" = $secret.Expires \"SecretName\" = $secret.Name.ToString()\"VaultName\" = $secret.VaultName.ToString()\"SecretCreationDate\" = $secret.Created.ToString()\"IsSecretEnabled\" = $secret.Enabled.ToString()\"SecretId\" = $secret.Id.ToString()}}...Invoke-WebRequest -Uri $topicEndpoint -Body $finalBody -Headers $header -Method Post -UseBasicParsing }}Start-Sleep -Seconds 5 }}\n    ```", "```\n    #r \"SendGrid\"#r \"Newtonsoft.Json\"#r \"Twilio.Api\"using System.Net;using System;using SendGrid.Helpers.Mail;using Microsoft.Azure.WebJobs.Host;using Newtonsoft.Json;using Twilio;using System.Configuration;public static HttpResponseMessage Run(HttpRequestMessage req, TraceWriter log, out Mail message,out SMSMessage sms){log.Info(\"C# HTTP trigger function processed a request.\");string alldata = req.Content.ReadAsStringAsync().GetAwaiter().GetResult();message = new Mail();var personalization = new Personalization();personalization.AddBcc(new Email(ConfigurationManager.AppSettings[\"bccStakeholdersEmail\"]));personalization.AddTo(new Email(ConfigurationManager.AppSettings[\"toStakeholdersEmail\"]));var messageContent = new Content(\"text/html\", alldata);message.AddContent(messageContent);message.AddPersonalization(personalization);message.Subject = \"Key Vault assets Expiring soon..\";message.From = new Email(ConfigurationManager.AppSettings[\"serviceEmail\"]);string msg = alldata;sms = new SMSMessage();sms.Body = msg;sms.To = ConfigurationManager.AppSettings[\"adminPhone\"];sms.From = ConfigurationManager.AppSettings[\"servicePhone\"];return req.CreateResponse(HttpStatusCode.OK, \"Hello \");}\n    ```", "```\n    {\"ExpiryDate\": \"\",\"SecretName\": \"\",\"VaultName\": \"\",\"SecretCreationDate\": \"\",\"IsSecretEnabled\": \"\",\"SecretId\": \"\"}\n    ```", "```\n    data = @{\"ExpiryDate\" = $certificate.Expires \"CertificateName\" = $certificate.Name.ToString()\"VaultName\" = $certificate.VaultName.ToString()\"CertificateCreationDate\" = $certificate.Created.ToString()\"IsCertificateEnabled\" = $certificate.Enabled.ToString()\"CertificateId\" = $certificate.Id.ToString()}\n    ```", "```\n    {\"alldata\" :}\n    ```"]