- en: 13\. Integrating Azure DevOps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 13. 集成 Azure DevOps
- en: In the previous chapter, you learned about big data eventing and its relationship
    with Azure's Event Hubs and Stream Analytics services. Software development is
    a complex undertaking comprising multiple processes and tools, and involving people
    from different departments. They all need to come together and work in a cohesive
    manner. With so many variables, the risks are high when you are delivering to
    end customers. One small omission or misconfiguration might lead to the application
    coming crashing down. This chapter is about adopting and implementing practices
    that reduce this risk considerably and ensure that high-quality software can be
    delivered to the customer over and over again.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您了解了大数据事件和它与 Azure 的 Event Hubs 和 Stream Analytics 服务的关系。软件开发是一个复杂的工作，涉及多个流程和工具，并且涉及来自不同部门的人们。他们需要共同合作，协调一致。由于有这么多变量，当您向最终客户交付时，风险是非常高的。一个小小的疏漏或配置错误可能导致应用程序崩溃。本章将讨论采纳和实施减少这些风险的实践，确保能够一次又一次地向客户交付高质量的软件。
- en: 'Before getting into the details of DevOps, here is a list of the problems faced
    by software companies that DevOps addresses:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解 DevOps 之前，以下是软件公司面临的 DevOps 解决的一些问题：
- en: Rigid organizations that don't welcome change
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不欢迎变革的僵化组织
- en: Time-consuming processes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 耗时的过程
- en: Isolated teams working in silos
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 孤立的团队在信息孤岛中工作
- en: Monolithic design and big bang deployments
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单体设计和大爆炸式部署
- en: Manual execution
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动执行
- en: A lack of innovation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺乏创新
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: DevOps
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps
- en: DevOps practices
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps 实践
- en: Azure DevOps
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure DevOps
- en: DevOps preparation
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps 准备
- en: DevOps for PaaS solutions
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps 针对 PaaS 解决方案
- en: DevOps for virtual machine-based (IaaS) solutions
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于虚拟机的 DevOps（IaaS）解决方案
- en: DevOps for container-based (IaaS) solutions
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于容器的 DevOps（IaaS）解决方案
- en: Azure DevOps and Jenkins
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure DevOps 和 Jenkins
- en: Azure Automation
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 自动化
- en: Azure tools for DevOps
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure DevOps 工具
- en: DevOps
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps
- en: There's currently no industry-wide consensus regarding the definition of DevOps.
    Organizations have formulated their own definition of DevOps and tried to implement it.
    They have their own perspective and think they've implemented DevOps once they
    implement automation and configuration management, and use Agile processes.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，行业内尚未就 DevOps 的定义达成共识。各组织已经制定了自己的 DevOps 定义，并尝试实施它们。他们有自己的视角，并认为一旦实施了自动化、配置管理，并使用了敏捷流程，就算是实现了
    DevOps。
- en: 'Based on my experience working on DevOps projects in industry, I have defined
    DevOps as the following: DevOps is about the delivery mechanism of software systems.
    It''s about bringing people together, making them collaborate and communicate,
    working together toward a common goal and vision. It''s about taking joint responsibility,
    accountability, and ownership. It''s about implementing processes that foster
    collaboration and a service mindset. It enables delivery mechanisms that bring
    agility and flexibility to the organization. Contrary to popular belief, DevOps
    isn''t about tools, technology, and automation. These are enablers that help with
    collaboration, the implementation of Agile processes, and faster and better delivery
    to the customer.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我在行业中从事 DevOps 项目的经验，我将 DevOps 定义如下：DevOps 是关于软件系统交付机制的，它涉及将人们聚集在一起，使他们协作和沟通，共同朝着一个共同的目标和愿景努力。它意味着共同承担责任、问责和所有权。它是实施促进协作和服务心态的流程。它使交付机制能够为组织带来敏捷性和灵活性。与普遍的看法相反，DevOps
    并非只是关于工具、技术和自动化。这些只是帮助协作、实施敏捷流程并加快更好地交付给客户的促进因素。
- en: There are multiple definitions available on the internet for DevOps, and they
    aren't wrong. DevOps doesn't provide a framework or methodology. It's a set of
    principles and practices that, when employed within an organization, engagement,
    or project, achieve the goal and vision of both DevOps and the organization. These
    principles and practices don't mandate any specific processes, tools and technologies,
    or environments. DevOps provides guidance that can be implemented through any
    tool, technology, or process, although some of the technology and processes might
    be more applicable than others to achieve the vision of DevOps' principles and
    practices.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 网络上有多个DevOps的定义，它们并没有错。DevOps并不提供框架或方法论。它是一组原则和实践，当这些原则和实践在组织、项目或合作中应用时，可以实现DevOps及组织的目标和愿景。这些原则和实践不要求使用特定的流程、工具、技术或环境。DevOps提供的指导可以通过任何工具、技术或流程来实现，尽管某些技术和流程可能比其他技术和流程更适用于实现DevOps原则和实践的愿景。
- en: Although DevOps practices can be implemented in any organization that provides
    services and products to customers, going forward in this book, we'll look at
    DevOps from the perspective of software development and the operations department
    of any organization.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管DevOps实践可以在任何提供服务和产品的组织中实施，但在本书接下来的部分，我们将从软件开发和任何组织的运维部门的角度来看待DevOps。
- en: So, what is DevOps? DevOps is defined as a set of principles and practices bringing
    all teams, including developers and operations, together from the start of the
    project for faster, quicker, and more efficient end-to-end delivery of value to
    the end customer again and again, in a consistent and predictable manner, reducing
    time to market, thereby gaining a competitive advantage.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，什么是DevOps？DevOps被定义为一组原则和实践，将所有团队（包括开发人员和运维人员）从项目一开始就聚集在一起，以更快、更高效、更一致和可预测的方式一次又一次地向最终客户交付价值，从而减少市场推出时间，获得竞争优势。
- en: The preceding definition of DevOps doesn't indicate or refer to any specific
    processes, tools, or technology. It doesn't prescribe any methodology or environment.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 前述对DevOps的定义并未指明或提及任何特定的流程、工具或技术。它也没有规定任何方法论或环境。
- en: The goal of implementing DevOps principles and practices in any organization
    is to ensure that the demands of stakeholders (including customers) and expectations
    are met efficiently and effectively.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何组织中实施DevOps原则和实践的目标是确保高效且有效地满足利益相关者（包括客户）的需求和期望。
- en: 'Customer demands and expectations are met when the following happens:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当以下情况发生时，客户的需求和期望得以满足：
- en: The customer gets the features they want
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户获得他们想要的功能
- en: The customer gets the features they want when they want them
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户在需要的时候获得他们想要的功能
- en: The customer gets faster updates on features
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户更快速地获得功能更新
- en: The quality of delivery is high
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交付的质量很高
- en: When an organization can meet these expectations, customers are happy and remain
    loyal. This, in turn, increases the market competitiveness of the organization,
    which results in a bigger brand and market valuation. It has a direct impact on
    the top and bottom lines of the organization. The organization can invest further
    in innovation and customer feedback, bringing about continuous changes to its
    systems and services in order to stay relevant.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个组织能够满足这些期望时，客户会感到满意并保持忠诚。这反过来又提高了组织的市场竞争力，从而带来更大的品牌和市场估值。它直接影响组织的收入和利润。组织可以进一步投资于创新和客户反馈，带来系统和服务的持续变化，从而保持相关性。
- en: The implementation of DevOps principles and practices in any organization is
    guided by its surrounding ecosystem. This ecosystem is made up of the industry
    and domains the organization belongs to.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何组织中实施DevOps原则和实践的过程受到其周围生态系统的指导。这个生态系统由组织所属的行业和领域组成。
- en: 'DevOps is based on a set of principles and practices. We''ll look into the
    details of these principles and practices later in this chapter. The core principles
    of DevOps are:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps基于一组原则和实践。我们将在本章稍后的部分详细探讨这些原则和实践。DevOps的核心原则包括：
- en: '**Agility**: Being Agile increases the overall flexibility to changes and ensures
    that adaptability increases to every changing environment and being productive.
    Agile processes have a shorter work duration and it''s easy to find issues earlier
    in the development life cycle rather than much later, thereby reducing the technical
    debt.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**敏捷性**：采用敏捷方法可以增加对变化的整体适应能力，确保能够适应不断变化的环境并保持高效。敏捷流程具有较短的工作周期，且在开发生命周期的早期就能发现问题，而不是在后期，从而减少技术债务。'
- en: '**Automation**: The adoption of tools and automation increases the overall
    efficiency and predictability of the process and end product. It helps in doing
    things faster and in an easier and cheaper manner.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化**：采用工具和自动化可以提高过程和最终产品的整体效率和可预测性。它有助于更快、更简便且更经济地完成任务。'
- en: '**Collaboration**: Collaboration refers to a common repository, the rotation
    of work responsibilities, the sharing of data and information, and other aspects
    that improve the productivity of each member of the team, thereby supporting the
    overall effective delivery of the product.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协作**：协作指的是共享一个共同的代码库、轮换工作职责、共享数据和信息以及其他有助于提高团队成员生产力的方面，从而支持产品的整体有效交付。'
- en: '**Feedback**: This refers to quick and early feedback loops between multiple
    teams about things that work and things that don''t work. It helps teams to prioritize
    issues and fix them in subsequent releases.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反馈**：指的是多个团队之间关于有效和无效事物的快速和早期反馈循环。它帮助团队优先处理问题，并在随后的发布版本中修复这些问题。'
- en: 'The core DevOps practices are:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps的核心实践包括：
- en: '**Continuous integration**: This refers to the process of validating and verifying
    the quality and correctness of the code pushed within the repository by developers.
    It can be scheduled, manual, or continuous. Continuous means that the process
    will check for various quality attributes each time a developer pushes the code,
    while scheduled means on a given time schedule, the checks will be conducted.
    Manual refers to manual execution by an administrator or developer.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续集成**：指的是验证和确认开发人员在代码库中提交的代码质量和正确性的过程。它可以是定时的、手动的或持续的。持续意味着每次开发人员推送代码时，过程都会检查各种质量属性，而定时则意味着按照预定的时间表进行检查。手动是指由管理员或开发人员手动执行。'
- en: '**Configuration management**: This is an important facet of DevOps and provides
    guidance for configuring infrastructure and applications either by pulling configurations
    from configuration management servers or by pushing these configurations on a
    schedule. Configuration management should bring back the environment to the expected
    desired state every time it gets executed.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置管理**：这是DevOps的重要组成部分，为配置基础设施和应用程序提供指导，配置可以通过从配置管理服务器拉取或按计划推送这些配置来实现。每次执行时，配置管理应将环境恢复到预期的理想状态。'
- en: '**Continuous delivery**: Continuous delivery refers to the state of readiness
    of an application to be able to be deployed in any existing, as well as a new,
    environment. It is generally executed by means of a release definition in lower
    environments like development and testing.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续交付**：持续交付指的是应用程序在任何现有环境以及新环境中都能随时准备好部署的状态。它通常通过在开发和测试等较低环境中定义发布来执行。'
- en: '**Continuous deployment**: Continuous deployment refers to the ability to deploy
    the environment and application in production automatically. It is generally executed
    by means of a release definition in the production environment.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续部署**：持续部署指的是能够自动将环境和应用程序部署到生产环境中的能力。它通常通过生产环境中的发布定义来执行。'
- en: '**Continuous learning**: This refers to the process of understanding the issues
    faced by operations and customers and ensuring that they get communicated to development
    and testing teams such that they can fix those issues in subsequent releases to
    improve the overall health and usability of the application.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续学习**：指的是理解运营和客户面临的问题，并确保将这些问题传达给开发和测试团队，以便他们在随后的发布版本中解决这些问题，从而改善应用程序的整体健康和可用性。'
- en: The essence of DevOps
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps的本质
- en: DevOps is not a new paradigm; however, it's gaining a lot of popularity and
    traction. Its adoption is at its highest level, and more and more companies are
    undertaking this journey. I purposely mentioned DevOps as a journey because there
    are different levels of maturity within DevOps. While successfully implementing
    continuous deployment and delivery are considered the highest level of maturity
    in this journey, adopting source code control and Agile software development are
    considered the first step in the DevOps journey.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps并不是一种新范式；然而，它正获得越来越多的关注和推广。其采用率处于最高水平，越来越多的公司正在踏上这条道路。我特意将DevOps称为“旅程”，因为在DevOps的实施过程中有不同的成熟度水平。虽然成功实施持续部署和交付被视为这一旅程中的最高成熟度水平，但采用源代码管理和敏捷软件开发则被视为DevOps旅程的第一步。
- en: One of the first things DevOps talks about is breaking down the barriers between
    the development and the operations teams. It brings about close collaboration
    between multiple teams. It's about breaking the mindset that the developer is
    responsible for writing the code only and passing it on to operations for deployment
    once it's tested. It's also about breaking the mindset that operations have no
    role to play in development activities. Operations should influence the planning
    of the product and should be aware of the features coming up as releases. They
    should also continually provide feedback to the developers on operational issues
    such that they can be fixed in subsequent releases. They should influence the
    design of the system to improve the operational working of the system. Similarly,
    developers should help the operations team to deploy the system and solve incidents
    when they arise.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps讨论的第一件事之一是打破开发团队和运维团队之间的壁垒。它促使多个团队之间进行紧密合作。DevOps的核心思想是打破开发者只负责编写代码并在测试完成后将其交给运维进行部署的思维模式。它还意味着打破运维在开发活动中没有角色的观念。运维应当参与产品规划，并且应该清楚即将发布的功能。他们还应持续向开发者提供有关运维问题的反馈，以便在后续版本中进行修复。运维应该影响系统的设计，以改善系统的运作性能。同样，开发者也应当帮助运维团队部署系统，并在发生故障时协助解决问题。
- en: The definition of DevOps talks about faster and more efficient end-to-end delivery
    of systems to stakeholders. It doesn't talk about how fast or efficient the delivery
    should be. It should be fast enough for the organization's domain, industry, customer
    segmentation, and needs. For some organizations, quarterly releases are good enough,
    while for others it could be weekly. Both are valid from a DevOps point of view,
    and these organizations can deploy relevant processes and technologies to achieve
    their target release deadlines. DevOps doesn't mandate any specific time frame
    for **continuous integration/continuous deployment** (**CI/CD**). Organizations
    should identify the best implementation of DevOps principles and practices based
    on their overall project, engagement, and organizational vision.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps的定义提到更快速、更高效地向利益相关者交付系统的端到端流程。但它没有具体说明交付应该多么快速或高效。交付速度应当足够满足组织的领域、行业、客户细分和需求。对于一些组织，季度发布就足够了，而对于其他组织来说，可能需要每周发布。就DevOps而言，这两种方式都是有效的，组织可以部署相应的流程和技术来达到他们的发布目标。DevOps并没有强制规定**持续集成/持续交付**（**CI/CD**）的具体时间框架。组织应当根据他们的整体项目、参与情况和组织愿景来识别最适合的DevOps原则和实践的实现方式。
- en: The definition also talks about end-to-end delivery. This means that everything
    from the planning and delivery of the system through to the services and operations
    should be part of DevOps adoption. Processes should allow greater flexibility,
    modularity, and agility in the application development life cycle. While organizations
    are free to use the best fitting process—Waterfall, Agile, Scrum, or another—typically,
    organizations tend to favor Agile processes with iteration-based delivery. This
    allows faster delivery in smaller units, which are far more testable and manageable
    compared to a large delivery.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 定义中还提到了端到端交付。这意味着从系统的规划和交付到服务和运维的各个方面，都应成为DevOps采用的一部分。流程应当允许在应用开发生命周期中更大的灵活性、模块化和敏捷性。虽然组织可以自由选择最合适的流程——瀑布模型、敏捷开发、Scrum等——但通常，组织倾向于采用基于迭代的敏捷流程。这种方式可以在较小的单元中实现更快速的交付，这些单元比大规模交付更容易测试和管理。
- en: DevOps repeatedly talks about end customers in a consistent and predictable
    manner. This means that organizations should continually deliver to customers
    with newer and upgraded features using automation. We can't achieve consistency
    and predictability without the use of automation. Manual work should be non-existent
    to ensure a high level of consistency and predictability. Automation should also
    be end-to-end, to avoid failures. This also indicates that the system design should
    be modular, allowing faster delivery on systems that are reliable, available,
    and scalable. Testing plays a big role in consistent and predictable delivery.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 一直以一致且可预测的方式谈论终端客户。这意味着组织应通过自动化不断交付更新和升级的功能给客户。没有自动化的帮助，我们无法实现一致性和可预测性。手动工作应该不存在，以确保高水平的一致性和可预测性。自动化应当是端到端的，以避免失败。这也表明系统设计应当是模块化的，从而在可靠、可用和可扩展的系统上更快地交付。测试在一致和可预测的交付中扮演着重要角色。
- en: The end result of implementing these practices and principles is that the organization
    is able to meet the expectations and demands of customers. The organization is
    able to grow faster than the competition, and further increase the quality and
    capability of their product and services through continuous innovation and improvement.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 实施这些实践和原则的最终结果是，组织能够满足客户的期望和需求。组织能够比竞争对手更快地增长，并通过持续的创新和改进，进一步提高其产品和服务的质量和能力。
- en: Now that you understand the idea behind DevOps, it's time to look into core
    DevOps practices.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经理解了 DevOps 背后的理念，接下来让我们深入了解核心的 DevOps 实践。
- en: DevOps practices
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps 实践
- en: 'DevOps consists of multiple practices, each providing a distinct functionality
    to the overall process. The following diagram shows the relationship between them.
    Configuration management, continuous integration, and continuous deployment form
    the core practices that enable DevOps. When we deliver software services that
    combine these three services, we achieve continuous delivery. Continuous delivery
    is the capability and level of maturity of an organization that''s dependent on
    the maturity of configuration management, continuous integration, and continuous
    deployment. Continuous feedback, at all stages, forms the feedback loop that helps
    to provide superior services to customers. It runs across all DevOps practices.
    Let''s deep dive into each of these capabilities and DevOps practices:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 包含多个实践，每个实践为整体流程提供独特的功能。下图展示了它们之间的关系。配置管理、持续集成和持续部署构成了 DevOps 的核心实践。通过结合这三项服务交付软件服务，我们实现了持续交付。持续交付是组织的能力和成熟度，取决于配置管理、持续集成和持续部署的成熟度。持续反馈贯穿于所有阶段，形成反馈环路，帮助提供更优质的客户服务。它贯穿所有
    DevOps 实践。接下来，让我们深入了解每项能力和 DevOps 实践：
- en: '![DevOps capabilities and practices](img/B15432_13_01.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![DevOps 能力与实践](img/B15432_13_01.jpg)'
- en: 'Figure 13.1: DevOps practices'
  id: totrans-57
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13.1：DevOps 实践
- en: Configuration management
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置管理
- en: Business applications and services need an environment in which they can be
    deployed. Typically, the environment is an infrastructure composed of multiple
    servers, computers, network, storage, containers, and many more services working
    together such that business applications can be deployed on top of them. Business applications are
    decomposed into multiple services running on multiple servers, either on-premises
    or on the cloud, and each service has its own configuration along with requirements
    related to the infrastructure's configuration. In short, both the infrastructure
    and the application are needed to deliver systems to customers, and both of them
    have their own configuration. If the configuration drifts, the application might
    not work as expected, leading to downtime and failure. Moreover, as the **Application
    Lifecycle Management** (**ALM**) process dictates the use of multiple stages and
    environments, an application would be deployed to multiple environments with different
    configurations. The application would be deployed to the development environment
    for developers to see the result of their work. It would then be deployed to multiple
    test environments with different configurations for functional tests, load and
    stress tests, performance tests, integration tests, and more; it would also be
    deployed to the preproduction environment to conduct user-acceptance tests, and
    finally into the production environment. It's important that an application can
    be deployed to multiple environments without undertaking any manual changes to
    its configuration.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 商业应用程序和服务需要一个可以部署的环境。通常，这个环境是由多个服务器、计算机、网络、存储、容器等多个服务组成的基础设施，这些服务共同工作，以便商业应用程序能够在其上部署。商业应用程序被分解成多个服务，这些服务运行在多个服务器上，可以是本地服务器或云服务器，每个服务都有自己的配置以及与基础设施配置相关的需求。简而言之，基础设施和应用程序都是交付系统给客户所需要的，它们都有各自的配置。如果配置发生漂移，应用程序可能无法按预期工作，导致停机和故障。此外，由于**应用生命周期管理**（**ALM**）过程要求使用多个阶段和环境，应用程序将被部署到多个不同配置的环境中。应用程序将首先部署到开发环境，供开发人员查看他们工作的结果。然后，它将被部署到多个测试环境，这些环境有不同的配置，用于功能测试、负载和压力测试、性能测试、集成测试等；它还将被部署到预生产环境进行用户验收测试，最后进入生产环境。确保应用程序能够部署到多个环境中而无需进行任何手动配置更改非常重要。
- en: Configuration management provides a set of processes and tools and they help
    to ensure that each environment and application gets its own configuration. Configuration
    management tracks configuration items, and anything that changes from environment
    to environment should be treated as a configuration item. Configuration management
    also defines the relationships between configuration items and how changes in
    one configuration item will impact other configuration items.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理提供了一套流程和工具，它们帮助确保每个环境和应用程序都有自己的配置。配置管理跟踪配置项，任何从一个环境到另一个环境发生变化的内容都应视为配置项。配置管理还定义了配置项之间的关系，以及一个配置项的变化如何影响其他配置项。
- en: '**Usage of configuration management**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**配置管理的使用**'
- en: 'Configuration management helps in the following places:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理在以下方面提供帮助：
- en: '**Infrastructure as Code**: When the process of provisioning infrastructure
    and its configuration is represented through code, and the same code goes through
    the application life cycle process, it''s known as **Infrastructure as Code** (**IaC**).
    IaC helps to automate the provisioning and configuration of infrastructure. It
    also represents the entire infrastructure in code that can be stored in a repository
    and version-controlled. This allows users to employ the previous environment''s
    configurations when needed. It also enables the provisioning of an environment
    multiple times in a consistent and predictable manner. All environments provisioned
    in this way are consistent and equal in all ALM stages. There are many tools that
    help in achieving IaC, including ARM templates, Ansible, and Terraform.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础设施即代码**：当通过代码表示基础设施的配置和配置过程，并且相同的代码贯穿整个应用生命周期过程时，这就是**基础设施即代码**（**IaC**）。IaC有助于自动化基础设施的供应和配置。它还以代码的形式表示整个基础设施，可以存储在代码库中并进行版本控制。这使得用户在需要时可以使用先前环境的配置。它还使得能够以一致且可预测的方式多次供应环境。以这种方式供应的所有环境在所有ALM阶段中都是一致的和平等的。有许多工具可以帮助实现IaC，包括ARM模板、Ansible和Terraform。'
- en: '`webdeploy` package on a server, deploying a SQL server schema and data (`bacpac`)
    on another server, and changing the SQL connection string on the web server to
    represent the appropriate SQL server. Configuration management stores values for
    the application''s configuration for each environment on which it is deployed.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在服务器上使用 `webdeploy` 包，部署 SQL 服务器架构和数据 (`bacpac`) 到另一台服务器，并更改 Web 服务器上的 SQL 连接字符串，以指向适当的
    SQL 服务器。配置管理为每个部署环境存储应用配置的值。
- en: The configuration applied should also be monitored. The expected and desired
    configuration should be consistently maintained. Any drift from this expected
    and desired configuration would render the application unavailable. Configuration
    management is also capable of finding the drift and re-configuring the application
    and environment to its desired state.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 应用的配置也应当被监控。预期的和期望的配置应始终保持一致。任何偏离预期和期望配置的情况都会使应用不可用。配置管理还能够发现这种偏差，并重新配置应用和环境到其期望的状态。
- en: With automated configuration management in place, nobody on the team has to
    deploy and configure environments and applications in production. The operations
    team isn't reliant on the development team or long deployment documentation.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在实施了自动化配置管理后，团队中的任何人都不需要在生产环境中部署和配置环境及应用。运营团队不再依赖开发团队或繁琐的部署文档。
- en: Another aspect of configuration management is source code control. Business
    applications and services comprise code and other artifacts. Multiple team members
    work on the same files. The source code should always be up to date and should
    be accessible by only authenticated team members. The code and other artifacts
    by themselves are configuration items. Source control helps in collaboration and
    communication within the team since everybody is aware of what everyone else is
    doing and conflicts are resolved at an early stage.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理的另一个方面是源代码控制。商业应用和服务由代码及其他构件组成，多个团队成员在相同的文件上工作。源代码应始终保持最新，并且应仅由经过身份验证的团队成员访问。代码及其他构件本身就是配置项。源代码控制有助于团队内的协作和沟通，因为每个人都知道其他人的工作内容，并且冲突能够在早期得到解决。
- en: 'Configuration management can be broadly divided into two categories:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理可以大致分为两类：
- en: Inside the virtual machine
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟机内部
- en: Outside the virtual machine
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟机外部
- en: Configuration management tools
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置管理工具
- en: The tools available for configuration management inside the virtual machine
    are discussed next.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来讨论虚拟机内部可用的配置管理工具。
- en: '**Desired State Configuration**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需状态配置**'
- en: '**Desired State Configuration** (**DSC**) is a configuration-management platform from
    Microsoft, built as an extension to PowerShell. DSC was originally launched as
    part of **Windows Management Framework** (**WMF**) 4.0\. It''s available as part
    of WMF 4.0 and 5.0 for all Windows Server operating systems before Windows 2008
    R2\. WMF 5.1 is available out of the box on Windows Server 2016/2019 and Windows
    10.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**所需状态配置** (**DSC**) 是微软的一种配置管理平台，作为 PowerShell 的扩展构建。DSC 最初作为 **Windows 管理框架**
    (**WMF**) 4.0 的一部分发布。它作为 WMF 4.0 和 5.0 的一部分，适用于所有 Windows Server 操作系统，直到 Windows
    2008 R2 为止。WMF 5.1 在 Windows Server 2016/2019 和 Windows 10 上开箱即用。'
- en: '**Chef, Puppet, and Ansible**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**Chef、Puppet 和 Ansible**'
- en: 'Apart from DSC, there''s a host of configuration-management tools, such as
    Chef, Puppet, and Ansible, supported by Azure. Details about these tools aren''t covered in this book.
    Read more about them here: [https://docs.microsoft.com/azure/virtual-machines/windows/infrastructure-automation](https://docs.microsoft.com/azure/virtual-machines/windows/infrastructure-automation).'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 DSC，还有一系列配置管理工具，如 Chef、Puppet 和 Ansible，这些工具得到 Azure 的支持。本书未涵盖这些工具的详细信息。你可以在这里了解更多：[https://docs.microsoft.com/azure/virtual-machines/windows/infrastructure-automation](https://docs.microsoft.com/azure/virtual-machines/windows/infrastructure-automation)。
- en: The tools available for configuration management outside of a virtual machine
    are mentioned next.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来讨论虚拟机外部可用的配置管理工具。
- en: '**ARM templates**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**ARM 模板**'
- en: ARM templates are the primary means of provisioning resources in ARM. ARM templates
    provide a declarative model through which resources and their configuration, scripts,
    and extensions are specified. ARM templates are based on **JavaScript Object Notation** (**JSON**)
    format. It uses JSON syntax and conventions to declare and configure resources.
    JSON files are text-based, user friendly, and easily readable. They can be stored
    in a source code repository and have version control on them. They are also a
    means to represent infrastructure as code that can be used to provision resources
    in Azure resource groups over and over again, predictably, consistently, and uniformly.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: ARM 模板是 ARM 中资源配置的主要手段。ARM 模板提供了一种声明性模型，通过该模型可以指定资源及其配置、脚本和扩展。ARM 模板基于**JavaScript
    对象表示法**（**JSON**）格式。它使用 JSON 语法和约定来声明和配置资源。JSON 文件是基于文本的，用户友好且易于阅读。它们可以存储在源代码仓库中，并对其进行版本控制。它们还是表示基础架构即代码的一种方式，可用于在
    Azure 资源组中反复地、可预测、一致和统一地配置资源。
- en: 'Templates provide the flexibility to be generic and modular in their design
    and implementation. Templates give us the ability to accept parameters from users,
    declare internal variables, help define dependencies between resources, link resources
    within the same or different resource groups, and execute other templates. They
    also provide scripting language-type expressions and functions that make them
    dynamic and customizable at runtime. There are two chapters dedicated to ARM templates
    in this book: *Chapters 15, Cross Subscription Deployments Using ARM Templates*,
    and *Chapter 16, ARM Templates Modular Design and Implementation*.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 模板提供了在设计和实现中保持通用性和模块化的灵活性。模板使我们能够接受用户参数、声明内部变量、帮助定义资源之间的依赖关系、在同一资源组或不同资源组之间链接资源，并执行其他模板。它们还提供了类似脚本语言的表达式和函数，使得模板在运行时动态且可定制。本书有两章专门讲解
    ARM 模板：*第15章，使用 ARM 模板进行跨订阅部署* 和 *第16章，ARM 模板的模块化设计与实现*。
- en: 'Now, it''s time to focus on the next important DevOps principle: continuous
    integration.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候关注下一个重要的 DevOps 原则：持续集成。
- en: Continuous integration
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 持续集成
- en: Multiple developers write code that's eventually stored in a common repository.
    The code is normally checked in or pushed to the repository when the developers
    have finished developing their features. This can happen in a day or might take
    days or weeks. Some of the developers might be working on the same feature, and
    they might also follow the same practices of pushing/checking in code in days
    or weeks. This can create issues with the quality of the code. One of the tenets
    of DevOps is to fail fast. Developers should check in/push their code to the repository
    often and compile the code to check whether they've introduced bugs and that the
    code is compatible with the code written by their colleagues. If a developer doesn't
    follow this practice, the code on their machine will grow too large and will be
    difficult to integrate with other code. Moreover, if the compile fails, it's difficult
    and time-consuming to fix the issues that arise.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 多个开发者编写代码，并最终将其存储在一个公共仓库中。当开发者完成功能开发后，通常会将代码提交到仓库中。这可能在一天内完成，也可能需要几天或几周。一些开发者可能在同一个功能上工作，并且他们可能也会遵循相同的代码推送/提交实践，这些操作可能发生在几天或几周内。这可能会导致代码质量问题。DevOps
    的一个原则是尽早发现问题。开发者应该经常将代码提交/推送到仓库，并进行编译检查，确保自己没有引入错误，并且代码与同事编写的代码兼容。如果开发者没有遵循这一实践，他们机器上的代码会变得过于庞大，且很难与其他代码进行集成。此外，如果编译失败，修复过程中产生的问题也会变得困难且耗时。
- en: '**Code integration**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码集成**'
- en: Continuous integration solves these kinds of challenges. Continuous integration
    helps in compiling and validating the code pushed/checked in by a developer by
    taking it through a series of validation steps. Continuous integration creates
    a process flow that consists of multiple steps. Continuous integration is composed
    of continuous automated builds and continuous automated tests. Normally, the first
    step is compiling the code. After the successful compilation, each step is responsible
    for validating the code from a specific perspective. For example, unit tests can
    be executed on the compiled code, and then code coverage can be executed to check
    which code paths are executed by unit tests. These could reveal whether comprehensive
    unit tests are written or whether there's scope to add further unit tests. The
    end result of continuous integration is deployment packages that can be used by
    continuous deployment to deploy them to multiple environments.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成解决了这些挑战。持续集成通过一系列验证步骤，帮助编译和验证开发人员推送/检查的代码。持续集成创建了一个包含多个步骤的流程。持续集成由持续自动构建和持续自动测试组成。通常，第一个步骤是编译代码。在成功编译之后，每个步骤负责从特定角度验证代码。例如，可以在编译后的代码上执行单元测试，然后执行代码覆盖率测试，检查单元测试执行了哪些代码路径。这些可以揭示是否编写了全面的单元测试，或者是否还有进一步添加单元测试的空间。持续集成的最终结果是可以由持续部署用于将代码部署到多个环境的部署包。
- en: '**Frequent code push**'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**频繁的代码推送**'
- en: Developers are encouraged to check in their code multiple times a day, instead
    of doing so after days or weeks. Continuous integration initiates the execution
    of the entire pipeline as soon as the code is checked in or pushed. If compilation
    succeeds, code tests, and other activities that are part of the pipeline, are
    executed without error; the code is deployed to a test environment and integration
    tests are executed on it.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 鼓励开发人员每天多次提交代码，而不是几天或几周后才提交。持续集成会在代码提交或推送后立即启动整个管道的执行。如果编译成功，代码测试以及管道中的其他活动会无错误地执行；代码会被部署到测试环境，并进行集成测试。
- en: '**Increased productivity**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**提高生产力**'
- en: 'Continuous integration increases developer productivity. They don''t have to
    manually compile their code, run multiple types of tests one after another, and
    then create packages out of it. It also reduces the risk of getting bugs introduced
    in the code and the code doesn''t get stale. It provides early feedback to the
    developers about the quality of their code. Overall, the quality of deliverables
    is high and they are delivered faster by adopting continuous integration practices.
    A sample continuous integration pipeline is shown here:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成提高了开发人员的生产力。开发人员不需要手动编译代码、连续运行多种类型的测试，然后再生成打包文件。它还减少了代码中引入错误的风险，避免代码过时。它为开发人员提供了有关代码质量的早期反馈。总体而言，通过采用持续集成实践，交付的质量更高，交付速度更快。以下是一个持续集成管道的示例：
- en: '![A sample Continuous Integration pipeline](img/B15432_13_02.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![持续集成管道示例](img/B15432_13_02.jpg)'
- en: 'Figure 13.2: Continuous integration pipeline'
  id: totrans-91
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13.2：持续集成管道
- en: '**Build automation**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**构建自动化**'
- en: Build automation consists of multiple tasks executing in sequence. Generally,
    the first task is responsible for fetching the latest source code from the repository.
    The source code might comprise multiple projects and files. They are compiled
    to generate artifacts, such as executables, dynamic link libraries, and assemblies.
    Successful build automation reflects that there are no compile-time errors in
    the code.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 构建自动化由多个任务按顺序执行。通常，第一个任务负责从代码仓库获取最新的源代码。源代码可能包含多个项目和文件。它们会被编译生成构件，如可执行文件、动态链接库和程序集。成功的构建自动化反映了代码中没有编译时错误。
- en: There could be more steps to build automation, depending on the nature and type
    of the project.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 根据项目的性质和类型，构建自动化可能还会包含更多步骤。
- en: '**Test automation**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试自动化**'
- en: Test automation consists of tasks that are responsible for validating different
    aspects of code. These tasks are related to testing code from a different perspective
    and are executed in sequence. Generally, the first step is to run a series of
    unit tests on the code. Unit testing refers to the process of testing the smallest
    denomination of a feature by validating its behavior in isolation from other features.
    It can be automated or manual; however, the preference is toward automated unit
    testing.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 测试自动化包括负责验证代码不同方面的任务。这些任务从不同的角度对代码进行测试，并按顺序执行。一般来说，第一步是对代码运行一系列单元测试。单元测试是指通过验证特性在与其他特性隔离的情况下的行为，来测试特性最小单位的过程。它可以是自动化的，也可以是手动的；然而，自动化单元测试更受偏好。
- en: Code coverage is another type of automated testing that can be executed on code
    to find out how much of the code is executed when running unit tests. It's generally
    represented as a percentage and refers to how much code is testable through unit
    testing. If the code coverage isn't close to 100%, it's either because the developer
    hasn't written unit tests for that behavior or the uncovered code isn't required
    at all.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 代码覆盖率是另一种自动化测试类型，能够在运行单元测试时执行代码，找出多少代码被执行。它通常以百分比表示，指的是有多少代码可以通过单元测试进行测试。如果代码覆盖率没有接近100%，那可能是因为开发者没有为该行为编写单元测试，或者未覆盖的代码根本不需要。
- en: The successful execution of test automation, resulting in no significant code
    failure, should start executing the packaging tasks. There could be more steps
    to test automation depending on the nature and type of the project.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 测试自动化的成功执行，并且没有出现显著的代码失败后，应开始执行打包任务。根据项目的性质和类型，测试自动化可能还包括更多的步骤。
- en: '**Packaging**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**打包**'
- en: Packaging refers to the process of generating deployable artifacts, such as
    `MSI`, `NuGet`, and `webdeploy` packages, and database packages; versioning them;
    and then storing them in a location such that they can be consumed by other pipelines
    and processes.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 打包是指生成可部署的工件的过程，例如`MSI`、`NuGet`和`webdeploy`包以及数据库包；对其进行版本控制；然后将它们存储在一个位置，以便其他管道和过程可以使用。
- en: Once the process of continuous integration completes, the process of continuous
    deployment starts, and that will be the focus of the next section.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦持续集成过程完成，持续部署的过程就会开始，接下来将重点讲解这个过程。
- en: Continuous deployment
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 持续部署
- en: By the time the process reaches continuous deployment, continuous integration
    has ensured that we have fully working bits of an application that can now be
    taken through different continuous deployment activities. Continuous deployment
    refers to the capability of deploying business applications and services to preproduction
    and production environments through automation. For example, continuous deployment
    could provision and configure the preproduction environment, deploy applications
    to it, and configure the applications. After conducting multiple validations,
    such as functional tests and performance tests on the preproduction environment,
    the production environment is provisioned, configured, and the application is
    deployed through automation. There are no manual steps in the deployment process.
    Every deployment task is automated. Continuous deployment can provision the environment
    and deploy the application from scratch, while it can just deploy delta changes
    to an existing environment if the environment already exists.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当流程达到持续部署时，持续集成已经确保我们拥有完全可用的应用程序部分，接下来可以通过不同的持续部署活动进行处理。持续部署是指通过自动化将业务应用程序和服务部署到预生产环境和生产环境的能力。例如，持续部署可以配置和部署预生产环境，部署应用程序并进行配置。在对预生产环境进行多次有效验证，如功能测试和性能测试后，生产环境将被配置和部署，应用程序通过自动化完成部署。在部署过程中没有手动步骤。每个部署任务都是自动化的。持续部署可以从零开始配置环境并部署应用程序，也可以仅在环境已存在的情况下，部署增量变化。
- en: All environments are provisioned through automation using IaC. This ensures
    that all environments, whether development, test, preproduction, or production,
    are the same. Similarly, the application is deployed through automation, ensuring
    that it's also deployed uniformly across all environments. The configuration across
    these environments could be different for the application.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 所有环境都通过自动化使用基础设施即代码（IaC）来配置。这确保了所有环境，无论是开发、测试、预生产还是生产，都是一致的。同样，应用程序通过自动化部署，确保它在所有环境中也被统一部署。这些环境中的配置对于应用程序可能是不同的。
- en: Continuous deployment is generally integrated with continuous integration. When
    continuous integration has done its work, by generating the final deployable packages,
    continuous deployment kicks in and starts its own pipeline. This pipeline is called
    the release pipeline. The release pipeline consists of multiple environments,
    with each environment consisting of tasks responsible for provisioning the environment,
    configuring the environment, deploying applications, configuring applications,
    executing operational validation on environments, and testing the application
    on multiple environments.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 持续部署通常与持续集成集成。当持续集成完成其工作，生成最终的可部署包时，持续部署将启动并开始执行自己的管道。这个管道被称为发布管道。发布管道包含多个环境，每个环境由负责环境配置、环境设置、应用程序部署、应用程序配置、环境操作验证以及在多个环境中测试应用程序的任务组成。
- en: 'Employing continuous deployment provides immense benefits. There is a high
    level of confidence in the overall deployment process, which helps with faster
    and risk-free releases on production. The chances of anything going wrong decrease
    drastically. The team will be less stressed, and rollback to the previous working
    environment is possible if there are issues with the current release:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 使用持续部署带来了巨大的好处。对整体部署过程有高度的信心，这有助于更快、更无风险地发布到生产环境。出现问题的机会大幅减少。团队的压力也会减轻，如果当前发布存在问题，可以回滚到之前的工作环境：
- en: '![A standard Continuous Deployment pipeline](img/B15432_13_03.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![标准的持续部署管道](img/B15432_13_03.jpg)'
- en: 'Figure 13.3: Continuous deployment pipeline'
  id: totrans-108
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13.3：持续部署管道
- en: Although every system demands its own configuration of the release pipeline,
    an example of continuous deployment is shown in the preceding diagram. It's important
    to note that, generally, provisioning and configuring multiple environments is
    part of the release pipeline, and approvals should be sought before moving to
    the next environment. The approval process might be manual or automated, depending
    on the maturity of the organization.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管每个系统都要求其发布管道具有自己的配置，但前面图示中展示了一个持续部署的示例。需要注意的是，通常情况下，配置和设置多个环境是发布管道的一部分，并且在进入下一个环境之前，应获取相关的批准。批准过程可以是手动的，也可以是自动的，这取决于组织的成熟度。
- en: Next, we will look into aspects related to the test environment.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将关注与测试环境相关的方面。
- en: '**Test environment deployment**'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试环境部署**'
- en: The release pipeline starts once the drop is available from continuous integration
    and the first step it should take is to get all the artifacts from the drop. After
    this, the release pipeline might create a completely new bare-metal test environment
    or reuse an existing one. This is again dependent on the type of project and the
    nature of the testing planned to be executed in this environment. The environment
    is provisioned and configured. The application artifacts are deployed and configured.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦从持续集成中获得构建产物，发布管道就开始启动。发布管道的第一步应该是获取所有的构建产物。此后，发布管道可能会创建一个全新的裸机测试环境，或者重用现有的环境。这再次取决于项目类型和计划在该环境中执行的测试类型。环境会被配置并准备好。应用程序的构建产物会被部署并配置。
- en: '**Test automation**'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试自动化**'
- en: After deploying an application, a series of tests can be performed on the environment.
    One of the tests executed here is a functional test. Functional tests are primarily
    aimed at validating the feature completeness and functionality of the application.
    These tests are written from requirements gathered from the customer. Another
    set of tests that can be executed is related to the scalability and availability
    of the application. This typically includes load tests, stress tests, and performance
    tests. It should also include an operational validation of the infrastructure
    environment.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署应用程序后，可以在环境中执行一系列测试。其中一个测试是功能测试。功能测试主要用于验证应用程序的功能完整性和功能性。这些测试是根据客户需求收集的信息编写的。还可以执行另一组测试，主要与应用程序的可扩展性和可用性相关。这通常包括负载测试、压力测试和性能测试。还应该包括对基础设施环境的操作验证。
- en: '**Staging environment deployment**'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**预生产环境部署**'
- en: This is very similar to the test environment deployment, the only difference
    being that the configuration values for the environment and application would
    be different.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这与测试环境部署非常相似，唯一的区别是环境和应用程序的配置值会有所不同。
- en: '**Acceptance tests**'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**验收测试**'
- en: Acceptance tests are generally conducted by application stakeholders, and these
    can be manual or automated. This step is a validation from the customer's point
    of view about the correctness and completeness of the application's functionality.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 验收测试通常由应用程序的相关方进行，可以是手动的，也可以是自动化的。这一步骤是从客户的角度对应用程序功能的正确性和完整性的验证。
- en: '**Deployment to production**'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**部署到生产环境**'
- en: Once the customer gives their approval, the same steps as that of the test and
    staging environment deployment are executed, the only difference being that the
    configuration values for the environment and application are specific to the production
    environment. A validation is conducted after deployment to ensure that the application
    is running according to expectations.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦客户批准，执行与测试和预生产环境部署相同的步骤，唯一的区别是环境和应用程序的配置值专门针对生产环境。部署后进行验证，确保应用程序按照预期运行。
- en: Continuous delivery is an important DevOps principle and closely resembles continuous
    deployment; however, there are a few differences. In the next section, we will
    look into continuous delivery.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付是一个重要的DevOps原则，并且与持续部署非常相似；然而，它们之间还是有一些区别。在下一节中，我们将深入探讨持续交付。
- en: Continuous delivery
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 持续交付
- en: Continuous delivery and continuous deployment might sound similar to you; however,
    they aren't the same. While continuous deployment talks about deployment to multiple
    environments and finally to the production environment through automation, continuous
    delivery is the ability to generate application packages that are readily deployable
    in any environment. To generate artifacts that are readily deployable, continuous
    integration should be used to generate the application artifacts; a new or existing
    environment should be used to deploy these artifacts and conduct functional tests,
    performance tests, and user-acceptance tests through automation. Once these activities
    are successfully executed without any errors, the application package is considered
    readily deployable. Continuous delivery includes continuous integration and deployment
    to an environment for final validations. It helps get feedback more quickly from
    both the operations and the end user. This feedback can then be used to implement
    subsequent iterations.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付和持续部署听起来可能很相似，但它们并不完全相同。持续部署指的是通过自动化将应用程序部署到多个环境，最终部署到生产环境，而持续交付则是能够生成可随时在任何环境中部署的应用程序包。为了生成可以随时部署的工件，应使用持续集成来生成应用程序工件；然后应使用新的或现有的环境来部署这些工件，并通过自动化进行功能测试、性能测试和用户验收测试。一旦这些活动成功执行且没有错误，应用程序包就被认为是可以随时部署的。持续交付包括持续集成和部署到环境中进行最终验证。它有助于更快地获得来自操作团队和最终用户的反馈，这些反馈可以用于实施后续的迭代。
- en: In the next section, we will look into continuous learning.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨持续学习。
- en: Continuous learning
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 持续学习
- en: With all the previously mentioned DevOps practices, it's possible to create
    great business applications and deploy them automatically to the production environment;
    however, the benefits of DevOps won't last for long if continuous improvement
    and feedback principles are not in place. It's of the utmost importance that real-time
    feedback about the application behavior is passed on as feedback to the development
    team from both end users and the operations team.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 使用之前提到的所有 DevOps 实践，可以创建出色的业务应用程序并将其自动部署到生产环境；然而，如果没有持续改进和反馈原则，DevOps 的好处不会持久。至关重要的是，关于应用程序行为的实时反馈需要从最终用户和运维团队传递给开发团队作为反馈。
- en: Feedback should be passed to the teams, providing relevant information about
    what's going well and what isn't.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 反馈应传递给团队，提供有关进展顺利与否的相关信息。
- en: An application's architecture and design should be built with monitoring, auditing,
    and telemetry in mind. The operations team should collect telemetry information
    from the production environment, capturing any bugs and issues, and pass it on
    to the development team so that it can be fixed for subsequent releases.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的架构和设计应考虑到监控、审计和遥测。运维团队应从生产环境收集遥测信息，捕捉任何漏洞和问题，并将其传递给开发团队，以便在随后的版本中修复。
- en: 'Continuous learning helps to make the application robust and resilient to failure.
    It helps in making sure that the application is meeting consumer requirements.
    *Figure 13.4* shows the feedback loop that should be implemented between different
    teams:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 持续学习有助于使应用程序更加健壮，并增强其对故障的韧性。它有助于确保应用程序满足消费者需求。*图 13.4* 显示了不同团队之间应该实施的反馈循环：
- en: '![Monitoring and feedback practices in DevOps](img/B15432_13_04.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![DevOps 中的监控与反馈实践](img/B15432_13_04.jpg)'
- en: 'Figure 13.4: Feedback loop'
  id: totrans-131
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13.4：反馈循环
- en: After going through the important practices related to DevOps, now it's time
    to get into tools and services that make these possible.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了与 DevOps 相关的重要实践之后，现在是时候深入了解那些使这些实践成为可能的工具和服务了。
- en: Azure DevOps
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure DevOps
- en: 'Let''s look at another top-of-the-line online service that enables continuous
    integration, continuous deployment, and continuous delivery seamlessly: Azure
    DevOps. In fact, it would be more appropriate to call it a suite of services available
    under a single name. Azure DevOps is a PaaS provided by Microsoft and hosted on
    the cloud. The same service is available as **Team Foundation Services** (**TFS**)
    on-premises. All examples shown in this book use Azure DevOps.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看另一个顶级在线服务，它能无缝实现持续集成、持续部署和持续交付：Azure DevOps。事实上，称其为一个服务套件并将其整合为一个名称可能更合适。Azure
    DevOps 是微软提供的 PaaS 服务，托管在云端。相同的服务也可以作为**Team Foundation Services**（**TFS**）在本地部署。书中所有示例都使用
    Azure DevOps。
- en: According to Microsoft, Azure DevOps is a cloud-based collaboration platform
    that helps teams to share code, track work, and ship software. Azure DevOps is
    a new name; earlier, it was known as **Visual Studio Team Services** (**VSTS**). Azure
    DevOps is an enterprise software-development tool and service that enables organizations
    to provide automation facilities to their end-to-end application life cycle management
    process, from planning to deploying applications, and getting real-time feedback
    from software systems. This increases the maturity and capability of an organization
    to deliver high-quality software systems to their customers.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 根据微软的说法，Azure DevOps 是一个基于云的协作平台，帮助团队共享代码、跟踪工作并发布软件。Azure DevOps 是一个新名称，之前被称为**Visual
    Studio Team Services**（**VSTS**）。Azure DevOps 是一个企业级软件开发工具和服务，使组织能够为其端到端的应用生命周期管理过程提供自动化功能，从规划到部署应用程序，并从软件系统中获取实时反馈。这提高了组织交付高质量软件系统给客户的成熟度和能力。
- en: 'Successful software delivery involves efficiently bringing numerous processes
    and activities together. These include executing and implementing various Agile
    processes, increasing collaboration among teams, the seamless and automatic transition
    of artifacts from one phase of the ALM to another phase, and deployments to multiple
    environments. It''s important to track and report on these activities to measure
    and improve delivery processes. Azure DevOps makes this simple and easy. It provides
    a whole suite of services that enables the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的软件交付涉及高效地将多个流程和活动结合在一起。这包括执行和实施各种敏捷流程、增加团队之间的协作、从一个 ALM 阶段到另一个阶段的无缝自动过渡，以及向多个环境的部署。跟踪和报告这些活动非常重要，以便衡量和改进交付流程。Azure
    DevOps 使这一切变得简单而易行。它提供了一整套服务，支持以下内容：
- en: Collaboration among every team member by providing a single interface for the
    entire application life cycle management
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过提供整个应用生命周期管理的单一界面，促进每个团队成员之间的协作
- en: Collaboration among development teams using source-code-management services
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用源代码管理服务促进开发团队之间的协作
- en: Collaboration among test teams using test-management services
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用测试管理服务促进测试团队之间的协作
- en: Automatic validation of code and packaging through continuous integration using
    build-management services
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过构建管理服务，使用持续集成自动验证代码和打包
- en: Automatic validation of application functionality, deployment, and configuration
    of multiple environments through continuous deployment and delivery using release-management
    services
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过发布管理服务，使用持续部署和交付自动验证应用程序功能、部署和多个环境的配置
- en: Tracking and work-item management using work-management services
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用工作管理服务跟踪和管理工作项
- en: 'The following table shows all the services available to a typical project from
    the **Azure DevOps** left navigation bar:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格显示了从**Azure DevOps**左侧导航栏中获取的典型项目可用的所有服务：
- en: '![A list of Azure DevOps services](img/Table_13_01.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![Azure DevOps 服务列表](img/Table_13_01.jpg)'
- en: 'Table 13.1: A list of Azure DevOps services'
  id: totrans-145
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 表 13.1：Azure DevOps 服务列表
- en: 'An organization in Azure DevOps serves as a security boundary and logical container
    that provides all the services that are needed to implement a DevOps strategy.
    Azure DevOps allows the creation of multiple projects within a single organization.
    By default, a repository is created with the creation of a project; however, Azure
    DevOps allows the creation of additional repositories within a single project.
    The relationship between an **Azure DevOps Organization**, **Projects**, and a **Repository** is
    shown in *Figure 13.5*:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps 中的组织作为一个安全边界和逻辑容器，提供实现 DevOps 策略所需的所有服务。Azure DevOps 允许在一个组织内创建多个项目。默认情况下，项目创建时会创建一个代码库；不过，Azure
    DevOps 也允许在同一个项目内创建额外的代码库。**Azure DevOps 组织**、**项目**和**代码库**之间的关系如*图 13.5*所示：
- en: '![Projects and repositories in a DevOps implementation](img/B15432_13_05.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![DevOps 实施中的项目和代码库](img/B15432_13_05.jpg)'
- en: 'Figure 13.5: Relationship between Azure DevOps Organization, Projects, and
    Repository'
  id: totrans-148
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13.5：Azure DevOps 组织、项目和代码库之间的关系
- en: 'Azure DevOps provides two types of repositories:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps 提供两种类型的代码库：
- en: Git
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git
- en: Team Foundation Version Control (TFVC)
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Team Foundation 版本控制（TFVC）
- en: It also provides the flexibility to choose between the Git or TFVC source-control
    repository. There can be a combination of TFS and TFVC repositories available
    within a single project.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 它还提供了在 Git 或 TFVC 源代码管理库之间进行选择的灵活性。在一个项目内，可能会有 TFS 和 TFVC 代码库的组合。
- en: TFVC
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TFVC
- en: TFVC is the traditional and centralized way of implementing version control,
    where there's a central repository and developers work on it directly in connected
    mode to check in their changes. If the central repository is offline or unavailable,
    developers can't check in their code and have to wait for it to be online and
    available. Other developers can see only the checked-in code. Developers can group
    multiple changes into a single changeset for checking in code changes that are
    logically grouped to form a single change. TFVC locks the code files that are
    undergoing edits. Other developers can read a locked file, but they can't edit
    it. They must wait for the prior edit to complete and release the lock before
    they can edit. The history of check-ins and changes is maintained on the central
    repository, while the developers have the working copy of the files but not the
    history.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: TFVC 是传统的集中式版本控制实现方式，采用中央仓库，开发人员直接在连接模式下对其进行操作，提交更改。如果中央仓库处于离线状态或无法访问，开发人员无法提交代码，只能等待仓库恢复在线并可用。其他开发人员只能看到已提交的代码。开发人员可以将多个更改组合成一个单独的变更集，用于提交逻辑上归为一类的代码更改。TFVC
    会锁定正在编辑的代码文件。其他开发人员可以读取已锁定的文件，但无法编辑。必须等待前一个编辑完成并释放锁，才能进行编辑。提交和更改的历史记录保存在中央仓库中，而开发人员拥有文件的工作副本，但没有历史记录。
- en: TFVC works very well with large teams that are working on the same projects.
    This enables control over the source code at a central location. It also works
    best for long-duration projects since the history can be managed at a central
    location. TFVC has no issues working with large and binary files.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: TFVC 非常适合大团队在同一项目中协作工作。这能够在中央位置控制源代码。它也特别适用于长期项目，因为历史记录可以在中央位置进行管理。TFVC 在处理大文件和二进制文件时没有问题。
- en: Git
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Git
- en: Git, on the other hand, is a modern, distributed way of implementing version
    control, where developers can work on their own local copies of code and history in
    offline mode. Developers can work offline on their local clone of code. Each developer
    has a local copy of code and its entire history, and they work on their changes
    with this local repository. They can commit their code to the local repository.
    They can connect to the central repository for the synchronization of their local
    repository on a per-need basis. This allows every developer to work on any file
    since they would be working on their local copy. Branching in Git doesn't create
    another copy of the original code and is extremely fast to create.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Git 是一种现代的分布式版本控制实现方式，开发人员可以在离线模式下使用自己的本地代码副本和历史记录。开发人员可以在本地克隆的代码上离线工作。每个开发人员都拥有代码和整个历史记录的本地副本，他们在此本地仓库上进行更改。开发人员可以将代码提交到本地仓库。根据需要，他们可以连接到中央仓库，同步本地仓库。这使得每个开发人员都可以在任何文件上工作，因为他们是在本地副本上工作。Git
    中的分支不会创建代码的另一个副本，且创建速度极快。
- en: Git works well with both small and large teams. Branching and merging is a breeze
    with the advanced options that Git has.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Git 对于小团队和大团队都非常适用。Git 提供的高级选项使得分支和合并变得轻松。
- en: Git is the recommended way of using source control because of the rich functionality
    it provides. We'll use Git as the repository for our sample application in this
    book. In the next section, we will have a detailed overview of implementing automation
    through DevOps.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Git 是推荐的源代码控制方式，因为它提供了丰富的功能。在本书中，我们将使用 Git 作为示例应用程序的仓库。在下一节中，我们将详细概述如何通过 DevOps
    实现自动化。
- en: Preparing for DevOps
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备 DevOps
- en: 'Going forward, our focus will be on process and deployment automation using
    different patterns in Azure. These include the following:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 展望未来，我们将重点关注通过不同模式在 Azure 中实现过程和部署自动化。这些模式包括以下内容：
- en: DevOps for IaaS solutions
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps 适用于 IaaS 解决方案
- en: DevOps for PaaS solutions
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps 适用于 PaaS 解决方案
- en: DevOps for container-based solutions
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps 适用于基于容器的解决方案
- en: Generally, there are shared services that aren't unique to any one application.
    These services are consumed by multiple applications from different environments,
    such as development, testing, and production. The life cycle of these shared services
    is different for each application. Therefore, they have different version-control
    repositories, a different code base, and build and release management. They have
    their own cycle of plan, design, build, test, and release.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，存在一些共享服务，这些服务并不特定于某一个应用程序。这些服务由来自不同环境（如开发、测试和生产）的多个应用程序使用。每个应用程序中这些共享服务的生命周期不同。因此，它们有不同的版本控制库、不同的代码库以及构建和发布管理。它们有自己的一套计划、设计、构建、测试和发布的周期。
- en: The resources that are part of this group are provisioned using ARM templates,
    PowerShell, and DSC configurations.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 该组的资源是使用 ARM 模板、PowerShell 和 DSC 配置进行配置的。
- en: 'The overall flow for building these common components is shown here:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 构建这些公共组件的整体流程如图所示：
- en: '![Flow for building common components in a DevOps project](img/B15432_13_06.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![在 DevOps 项目中构建公共组件的流程](img/B15432_13_06.jpg)'
- en: 'Figure 13.6: Overall flow for building common components'
  id: totrans-169
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13.6：构建公共组件的整体流程
- en: 'The release process is shown in *Figure 13.7*:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 发布过程如*图 13.7*所示：
- en: '![A standard DevOps release process](img/B15432_13_07.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![标准的 DevOps 发布流程](img/B15432_13_07.jpg)'
- en: 'Figure 13.7: Release process'
  id: totrans-172
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13.7：发布过程
- en: On the DevOps journey, it's important to understand and provision the common
    components and services before starting any software engagement, product, or service.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DevOps 之旅中，理解并在开始任何软件开发、产品或服务之前配置共享组件和服务非常重要。
- en: The first step in getting started with Azure DevOps is to provision an organization.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用 Azure DevOps 的第一步是配置一个组织。
- en: Azure DevOps organizations
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Azure DevOps 组织
- en: A version-control system is needed to collaborate at the code level. Azure DevOps
    provides both centralized and decentralized versions of control systems. Azure
    DevOps also provides orchestration services for building and executing build and
    release pipelines. It's a mature platform that organizes all DevOps-related version
    control and builds and releases work-item-related artifacts. After an organization
    is provisioned in Azure DevOps, an Azure DevOps project should be created to hold
    all project-related artifacts.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 需要一个版本控制系统来进行代码级的协作。Azure DevOps 提供了集中式和分散式版本控制系统。Azure DevOps 还提供了用于构建和执行构建与发布流水线的编排服务。这是一个成熟的平台，组织了所有与
    DevOps 相关的版本控制以及构建和发布工作项相关的工件。在 Azure DevOps 中配置一个组织后，应该创建一个 Azure DevOps 项目来存储所有与项目相关的工件。
- en: An Azure DevOps organization can be provisioned by visiting [https://dev.azure.com](https://dev.azure.com).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过访问[https://dev.azure.com](https://dev.azure.com)来创建 Azure DevOps 组织。
- en: An Azure DevOps organization is the top-level administrative and management
    boundary that provides security, access, and collaboration between team members
    belonging to an organization. There can be multiple projects within an organization
    and each project comprises multiple teams.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps 组织是提供安全性、访问权限和组织内团队成员之间协作的顶级管理边界。一个组织可以包含多个项目，每个项目包含多个团队。
- en: Provisioning Azure Key Vault
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 Azure Key Vault
- en: It isn't advisable to store secrets, certificates, credentials, or other sensitive
    information in code configuration files, databases, or any other general storage
    system. It's advised to store this important data in a vault that's specifically
    designed for storing secrets and credentials. Azure Key Vault provides such a
    service. Azure Key Vault is available as a resource and service from Azure. Now,
    let's move on to exploring the storage options for configurations.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 不建议将密钥、证书、凭据或其他敏感信息存储在代码配置文件、数据库或任何其他通用存储系统中。建议将这些重要数据存储在专门设计用于存储密钥和凭据的保险库中。Azure
    Key Vault 提供了这样的服务。Azure Key Vault 作为 Azure 提供的资源和服务是可用的。现在，让我们继续探索配置的存储选项。
- en: Provisioning a configuration-management server/service
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置管理服务器/服务的配置
- en: A configuration-management server/service that provides storage for configurations
    and applies those configurations to different environments is always a good strategy
    for automating deployments. DSC on custom virtual machines and DSC from Azure
    Automation, Chef, Puppet, and Ansible are some options and can be used on Azure
    seamlessly for both Windows as well as Linux environments. This book uses DSC
    as a configuration-management tool for all purposes, and it provides a pull server
    that holds all configuration documents (MOF files) for the sample application.
    It also maintains the database of all virtual machines and containers that are
    configured and registered with the pull server to pull configuration documents
    from it. The local configuration manager on these targets virtual machines, and
    containers periodically check the availability of new configurations as well as
    drifts in the current configuration and report back to the pull server. It also
    has built-in reporting capabilities that provide information about nodes that
    are compliant, as well as those that are non-compliant, within a virtual machine.
    A pull server is a general web application that hosts the DSC pull server endpoint.
    In the next topic, we will discuss a technique to monitor processes in real time
    with Log Analytics.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 提供配置存储并将这些配置应用于不同环境的配置管理服务器/服务始终是自动化部署的好策略。自定义虚拟机上的 DSC 和来自 Azure 自动化、Chef、Puppet
    以及 Ansible 的 DSC 是一些选项，并且可以在 Azure 上无缝使用，适用于 Windows 和 Linux 环境。本书将 DSC 作为配置管理工具，适用于所有目的，并提供一个拉取服务器，用于存放所有示例应用程序的配置文档（MOF
    文件）。它还维护着所有配置并与拉取服务器注册的虚拟机和容器的数据库，以便从中拉取配置文档。目标虚拟机和容器上的本地配置管理器会定期检查新配置的可用性，以及当前配置中的漂移，并向拉取服务器报告。它还具有内置的报告功能，提供有关虚拟机内合规节点以及不合规节点的信息。拉取服务器是一个托管
    DSC 拉取服务器端点的通用 Web 应用程序。在下一个主题中，我们将讨论一种实时监控进程的技术，使用日志分析。
- en: Log Analytics
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 日志分析
- en: Log Analytics is an audit and monitoring service provided by Azure to get real-time
    information about all changes, drifts, and events occurring within virtual machines
    and containers. It provides a centralized workspace and dashboard for IT administrators
    for viewing, searching, and conducting drill-down searches on all changes, drifts,
    and events that occur on these virtual machines. It also provides agents that
    are deployed on target virtual machines and containers. Once deployed, these agents
    start sending all changes, events, and drifts to the centralized workspace. Let's
    check out the storage options for deploying multiple applications.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 日志分析是 Azure 提供的一个审计和监控服务，用于获取虚拟机和容器中发生的所有更改、漂移和事件的实时信息。它为 IT 管理员提供了一个集中式工作区和仪表板，用于查看、搜索并深入分析所有发生在这些虚拟机上的更改、漂移和事件。它还提供了可以部署在目标虚拟机和容器上的代理。一旦部署，这些代理就会开始将所有更改、事件和漂移信息发送到集中式工作区。接下来，让我们来看看部署多个应用程序的存储选项。
- en: Azure Storage accounts
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Azure 存储帐户
- en: Azure Storage is a service provided by Azure to store files as blobs. All scripts
    and code for automating the provisioning, deployment, and configuration of the
    infrastructure and sample application are stored in the Azure DevOps Git repository
    and are packaged and deployed in an Azure Storage account. Azure provides PowerShell
    script-extension resources that can automatically download DSC and PowerShell
    scripts and execute them on virtual machines during the execution of ARM templates.
    This storage acts as common storage across all deployments for multiple applications.
    Storing scripts and templates in a Storage account ensures that they can be used
    across projects irrespective of projects in Azure DevOps. Let's move on to exploring
    the importance of images in the next section.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 存储是 Azure 提供的一项服务，用于将文件存储为 Blob。用于自动化基础设施和示例应用程序的预配、部署和配置的所有脚本和代码都存储在
    Azure DevOps Git 仓库中，并打包后部署到 Azure 存储帐户中。Azure 提供了 PowerShell 脚本扩展资源，可以在执行 ARM
    模板时自动下载 DSC 和 PowerShell 脚本并在虚拟机上执行。此存储作为多个应用程序部署中所有部署的公共存储。将脚本和模板存储在存储帐户中，可以确保它们可以跨
    Azure DevOps 中的项目使用。接下来，让我们探讨一下镜像在下一节中的重要性。
- en: Docker and OS images
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker 和操作系统镜像
- en: Both virtual machine and container images should be built as part of the common
    services build-and-release pipeline. Tools such as Packer and Docker Build can
    be used to generate these images.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机和容器镜像应作为公共服务的构建和发布流水线的一部分来构建。可以使用 Packer 和 Docker Build 等工具来生成这些镜像。
- en: Management tools
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 管理工具
- en: All management tools, such as Kubernetes, DC/OS, Docker Swarm, and ITIL tools,
    should be provisioned before building and deploying the solution.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 所有管理工具，如 Kubernetes、DC/OS、Docker Swarm 和 ITIL 工具，应该在构建和部署解决方案之前进行配置。
- en: We'll conclude this section on DevOps preparation with management tools. There
    are multiple choices for each activity within a DevOps ecosystem and we should
    enable them as part of the DevOps journey—it should not be an afterthought, but
    rather part of DevOps planning.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本节 DevOps 准备中以管理工具做总结。DevOps 生态系统中每项活动都有多种选择，我们应该在 DevOps 旅程中启用它们——这不应是事后的考虑，而是
    DevOps 规划的一部分。
- en: DevOps for PaaS solutions
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PaaS 解决方案的 DevOps
- en: 'The typical architecture for Azure PaaS app services is based on *Figure 13.8*:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Azure PaaS 应用服务的典型架构基于*图 13.8*：
- en: '![A typical Azure PaaS App Service architecture](img/B15432_13_08.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![典型的 Azure PaaS 应用服务架构](img/B15432_13_08.jpg)'
- en: 'Figure 13.8: A typical Azure PaaS app service architecture'
  id: totrans-195
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13.8：典型的 Azure PaaS 应用服务架构
- en: 'The architecture shows some of the important components—such as Azure SQL,
    Storage accounts, and the version control system—that participate in the Azure
    App Service-based cloud solution architecture. These artifacts should be created
    using ARM templates. These ARM templates should be part of the overall configuration
    management strategy. It can have its own build and release management pipelines,
    similar to the one shown in *Figure 13.9*:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 该架构展示了参与 Azure 应用服务基础的云解决方案架构的一些重要组件——例如 Azure SQL、存储帐户和版本控制系统。这些工件应该通过 ARM
    模板创建。ARM 模板应该是整体配置管理策略的一部分。它可以拥有自己的构建和发布管理管道，类似于*图 13.9*所示的管道：
- en: '![Choosing deployment options for the sample app service](img/B15432_13_09.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![为示例应用服务选择部署选项](img/B15432_13_09.jpg)'
- en: 'Figure 13.9: Choosing deployment options for the app service'
  id: totrans-198
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13.9：为应用服务选择部署选项
- en: Now that we have explored the various deployment source options, let's go ahead
    and dive into understanding how to deploy cloud solutions on Azure.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探索了各种部署源选项，让我们继续深入了解如何在 Azure 上部署云解决方案。
- en: Azure App Service
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Azure 应用服务
- en: Azure App Service provides managed hosting services for cloud solutions. It's
    a fully-managed platform that provisions and deploys cloud solutions. Azure App
    Service takes away the burden of creating and managing infrastructure and provides
    minimum **service-level agreements** (**SLAs**) for hosting your cloud solutions.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 应用服务提供了云解决方案的托管服务。它是一个完全托管的平台，负责云解决方案的配置和部署。Azure 应用服务消除了创建和管理基础设施的负担，并为托管您的云解决方案提供了最低限度的**服务级别协议**（**SLA**）。
- en: Deployment slots
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署槽
- en: Azure App Service provides deployment slots that make deployment to them seamless
    and easy. There are multiple slots, and swapping between slots is done at a DNS
    level. It means anything in the production slot can be swapped with a staging
    slot by just swapping the DNS entries. This helps in deploying the custom cloud
    solution to staging and, after all checks and tests, they can be swapped to production
    if found satisfactory. However, in the event of any issue in production after
    swapping, the previous good values from the production environment can be reinstated
    by swapping again. Let's move on to understanding Azure's database offering and
    some of its key features.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 应用服务提供了部署槽，使得部署变得无缝和简单。提供了多个槽，并且在槽之间的切换是通过 DNS 层面完成的。这意味着任何生产槽中的内容都可以通过切换
    DNS 条目与暂存槽互换。这有助于将定制的云解决方案部署到暂存环境中，并在所有检查和测试完成后，如果确认没有问题，可以切换到生产环境。然而，在切换后如果生产环境出现任何问题，可以通过再次切换恢复先前在生产环境中的良好值。接下来让我们深入了解
    Azure 的数据库服务及其一些关键特性。
- en: Azure SQL
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Azure SQL
- en: Azure SQL is a SQL PaaS service provided by Azure to host databases. Azure provides a
    secure platform to host databases and takes complete ownership to manage the availability,
    reliability, and scalability of the service. With Azure SQL, there's no need to
    provision custom virtual machines, deploy a SQL server, and configure it. Instead,
    the Azure team does this behind the scenes and manages it on your behalf. It also
    provides a firewall service that enables security; only an IP address allowed
    by the firewall can connect the server and access the database. The virtual machines
    provisioned to host web applications have distinct public IP addresses assigned
    to them and they're added to Azure SQL firewall rules dynamically. Azure SQL Server
    and its database is created upon executing the ARM template. Next, we will cover
    build and release pipelines.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Azure SQL 是 Azure 提供的 SQL PaaS 服务，用于托管数据库。Azure 提供了一个安全的平台来托管数据库，并全面负责管理服务的可用性、可靠性和可扩展性。使用
    Azure SQL，无需配置自定义虚拟机、部署 SQL 服务器并进行配置。相反，Azure 团队会在幕后完成这些操作并代表您进行管理。它还提供了防火墙服务，增强了安全性；只有防火墙允许的
    IP 地址才能连接服务器并访问数据库。为托管 Web 应用程序而配置的虚拟机有各自的公共 IP 地址，并会动态添加到 Azure SQL 防火墙规则中。Azure
    SQL 服务器及其数据库将在执行 ARM 模板时创建。接下来，我们将介绍构建和发布管道。
- en: The build and release pipelines
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建和发布管道
- en: In this section, a new build pipeline is created that compiles and validates
    an ASP.NET MVC application, and then generates packages for deployment. After
    package generation, a release definition ensures that deployment to the first
    environment happens in an App Service and Azure SQL as part of continuous deployment.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，创建了一个新的构建管道，该管道编译并验证 ASP.NET MVC 应用程序，然后生成部署包。在生成包之后，发布定义确保在持续部署的过程中，首次部署发生在应用服务和
    Azure SQL 环境中。
- en: 'There are two ways to author build and release pipelines:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方式可以编写构建和发布管道：
- en: Using the classic editor
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用经典编辑器
- en: Using YAML files
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 YAML 文件
- en: YAML files provide more flexibility for authoring build and release pipelines.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: YAML 文件为编写构建和发布管道提供了更大的灵活性。
- en: 'The project structure of the sample application is shown in *Figure 13.10*:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 示例应用程序的项目结构如 *图 13.10* 所示：
- en: '![Project structure of a sample application](img/B15432_13_10.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![示例应用程序的项目结构](img/B15432_13_10.jpg)'
- en: 'Figure 13.10: Project structure of a sample application'
  id: totrans-214
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13.10：示例应用程序的项目结构
- en: 'In this project, there''s an ASP.NET MVC application—the main application—and
    it consists of application pages. Web Deploy packages will be generated out of
    this project from build pipelines and they will eventually be on Web Apps. There
    are other projects that are also part of the solution, as mentioned next:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在此项目中，有一个 ASP.NET MVC 应用程序——主应用程序——它由多个应用程序页面组成。Web Deploy 包将通过构建管道从该项目生成，并最终部署到
    Web 应用程序中。该解决方案中还包含其他项目，如下所述：
- en: '**Unit test project**: Code for unit-testing the ASP.NET MVC application. Assemblies
    from this project will be generated and executed in the build execution.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试项目**：用于对 ASP.NET MVC 应用程序进行单元测试的代码。此项目生成的程序集将在构建执行中生成并执行。'
- en: '`DacPac` files will be generated out of this project using the build definition.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DacPac` 文件将通过构建定义从该项目中生成。'
- en: '**Azure resource group project**: ARM templates and parameter code to provision
    the entire Azure environment on which the ASP.NET MVC application and the SQL
    tables are created.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure 资源组项目**：ARM 模板和参数代码，用于配置 ASP.NET MVC 应用程序和 SQL 表格所在的整个 Azure 环境。'
- en: 'The build pipeline is shown in *Figure 13.11*:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 构建管道如 *图 13.11* 所示：
- en: '![Build pipeline of the ASP.NET MVC application](img/B15432_13_11.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![ASP.NET MVC 应用程序的构建管道](img/B15432_13_11.jpg)'
- en: 'Figure 13.11: Build pipeline of the ASP.NET MVC application'
  id: totrans-221
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13.11：ASP.NET MVC 应用程序的构建管道
- en: 'The configuration of each task is shown in *Table 13.2*:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 每个任务的配置如 *表 13.2* 所示：
- en: '![Configuration of the build pipeline tasks](img/13.2_29.jpg)![Configuration
    of the build pipeline tasks](img/13.2_30.jpg)![Configuration of the build pipeline
    tasks](img/13.2_31.jpg)![Configuration of the build pipeline tasks](img/13.2_32.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![构建管道任务的配置](img/13.2_29.jpg)![构建管道任务的配置](img/13.2_30.jpg)![构建管道任务的配置](img/13.2_31.jpg)![构建管道任务的配置](img/13.2_32.jpg)'
- en: 'Table 13.2: Configuration of the build pipeline tasks'
  id: totrans-224
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 表 13.2：构建管道任务的配置
- en: 'The build pipeline is configured to execute automatically as part of continuous
    integration, as shown in *Figure 13.12*:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 构建管道已配置为在持续集成过程中自动执行，如 *图 13.12* 所示：
- en: '![Enabling continuous integration in the build pipeline](img/B15432_13_12.jpg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![在构建管道中启用持续集成](img/B15432_13_12.jpg)'
- en: 'Figure 13.12: Enabling continuous integration in the build pipeline'
  id: totrans-227
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13.12：在构建管道中启用持续集成
- en: The release definition consists of multiple environments, such as development,
    testing, **System Integration Testing** (**SIT**), **User Acceptance Testing**
    (**UAT**), preproduction, and production. The tasks are pretty similar in each
    environment, with the addition of tasks specific to that environment. For example,
    a test environment has additional tasks related to the UI, and functional and
    integration testing, compared to a development environment.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 发布定义包含多个环境，如开发、测试、**系统集成测试**（**SIT**）、**用户验收测试**（**UAT**）、预生产和生产。各个环境中的任务非常相似，但会增加一些特定环境的任务。例如，测试环境会有更多与
    UI 相关的任务，以及功能性和集成测试任务，而这些在开发环境中是没有的。
- en: 'The release definition for such an application is shown in *Figure 13.13*:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 该应用程序的发布定义如*图 13.13*所示：
- en: '![Stages in the release definition of the ASP.NET-CI application](img/B15432_13_13.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![ASP.NET-CI 应用程序的发布定义阶段](img/B15432_13_13.jpg)'
- en: 'Figure 13.13: Release definition'
  id: totrans-231
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13.13：发布定义
- en: 'The release tasks for a single environment are shown in *Figure 13.14*:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 单个环境的发布任务如*图 13.14*所示：
- en: '![Release tasks for a single environment](img/B15432_13_14.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![单个环境的发布任务](img/B15432_13_14.jpg)'
- en: 'Figure 13.14: Release tasks for a single environment'
  id: totrans-234
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13.14：单个环境的发布任务
- en: 'The configuration for each of the tasks is listed here:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列出了每个任务的配置：
- en: '![Configuration of the release pipeline tasks](img/13.3_34.jpg)![Configuration
    of the release pipeline tasks](img/13.3_35.jpg)![Configuration of the release
    pipeline tasks](img/13.3_36.jpg)![Configuration of the release pipeline tasks](img/13.3_37.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![发布管道任务的配置](img/13.3_34.jpg)![发布管道任务的配置](img/13.3_35.jpg)![发布管道任务的配置](img/13.3_36.jpg)![发布管道任务的配置](img/13.3_37.jpg)'
- en: 'Table 13.3: Configuration of the release pipeline tasks'
  id: totrans-237
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 表 13.3：发布管道任务的配置
- en: In this section, you saw ways to configure build and release pipelines in Azure
    DevOps. In the next section onward, the focus will be on different architectures,
    such as IaaS, containers, and different scenarios.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了如何在 Azure DevOps 中配置构建和发布管道。从下一节开始，将重点介绍不同的架构，如 IaaS、容器以及不同的场景。
- en: DevOps for IaaS
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IaaS 的 DevOps
- en: IaaS involves the management and administration of base infrastructure and applications
    together and there are multiple resources and components that need to be provisioned,
    configured, and deployed on multiple environments. It is important to understand
    the architecture before going ahead.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: IaaS 涉及基础设施和应用程序的管理与维护，这需要在多个环境中配置、部署多个资源和组件。在继续之前，理解架构是非常重要的。
- en: 'The typical architecture for an IaaS virtual machine-based solution is shown
    here:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 这里展示了典型的基于 IaaS 虚拟机的解决方案架构：
- en: '![Architecture for an IaaS virtual machine-based solution](img/B15432_13_15.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![基于 IaaS 虚拟机的解决方案架构](img/B15432_13_15.jpg)'
- en: 'Figure 13.15: Architecture for an IaaS virtual machine-based solution'
  id: totrans-243
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13.15：基于 IaaS 虚拟机的解决方案架构
- en: Each of the components listed in the architecture is discussed from the next
    section onward.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 架构中列出的每个组件将在下一节及之后的内容中进行讨论。
- en: Azure virtual machines
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Azure 虚拟机
- en: Azure virtual machines that host web applications, application servers, databases,
    and other services are provisioned using ARM templates. They're attached to a
    virtual network and have a private IP address from the same network. The public
    IP for virtual machines is optional since they're attached to a public load balancer.
    Operational Insights agents are installed on virtual machines to monitor the virtual
    machines. PowerShell scripts are also executed on these virtual machines, downloaded
    from a Storage account available in another resource group to open relevant firewall
    ports, download appropriate packages, and install local certificates to secure
    access through PowerShell. The web application is configured to run on the provided
    port on these virtual machines. The port number for the web application and all
    its configuration is pulled from the DSC pull server and dynamically assigned.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 托管网页应用、应用服务器、数据库和其他服务的 Azure 虚拟机器是通过 ARM 模板进行配置的。它们附加到一个虚拟网络，并拥有来自同一网络的私有 IP
    地址。虚拟机器的公共 IP 地址是可选的，因为它们已附加到公共负载均衡器。操作洞察代理被安装到虚拟机器上，用于监控这些虚拟机器。PowerShell 脚本也会在这些虚拟机器上执行，这些脚本是从另一个资源组中的存储帐户下载的，用于打开相关防火墙端口、下载适当的包并安装本地证书，以通过
    PowerShell 安全访问。这些虚拟机器上的网页应用配置为在提供的端口上运行。网页应用的端口号和所有配置都从 DSC 拉取服务器中获取，并动态分配。
- en: Azure public load balancers
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Azure 公共负载均衡器
- en: A public load balancer is attached to some of the virtual machines for sending
    requests to them in a round-robin fashion. This is generally needed for front-end
    web applications and APIs. A public IP address and DNS name can be assigned to
    a load balancer such that it can serve internet requests. It accepts HTTP web requests on
    a different port and routes them to the virtual machines. It also probes certain
    ports on HTTP protocols with some provided application paths. **Network Address
    Translation** (**NAT**) rules can also be applied such that they can be used to
    log into the virtual machines using remote desktops.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 公共负载均衡器被附加到一些虚拟机器上，以便以轮询的方式向它们发送请求。这通常需要用于前端网页应用和 API。可以为负载均衡器分配公共 IP 地址和 DNS
    名称，这样它就可以处理来自互联网的请求。它在不同的端口上接受 HTTP 网页请求，并将其路由到虚拟机器。它还会通过提供的应用路径探测 HTTP 协议的某些端口。**网络地址转换**（**NAT**）规则也可以应用，这样就可以通过远程桌面登录到虚拟机器。
- en: An alternative resource to the Azure public Load Balancer is the Azure Application
    Gateway. Application gateways are layer-7 load balancers and provide features
    such as SSL termination, session affinity, and URL-based routing. Let's discuss
    the build pipeline in the next section.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 公共负载均衡器的替代资源是 Azure 应用程序网关。应用程序网关是七层负载均衡器，提供 SSL 终止、会话亲和力和基于 URL 的路由等功能。我们将在下一节讨论构建流水线。
- en: The build pipeline
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建流水线
- en: 'A typical build pipeline for an IaaS virtual machine-based solution is shown
    next. A release pipeline starts when a developer pushes their code to the repository.
    The build pipeline starts automatically as part of continuous integration. It
    compiles and builds the code, executes unit tests on it, checks code quality,
    and generates documentation from code comments. It deploys the new binaries into
    the development environment (note that the development environment is not newly
    created), changes configuration, executes integration tests, and generates build
    labels for easy identification. It then drops the generated artifacts into a location
    accessible by the release pipeline. If there are issues during the execution of
    any step in this pipeline, this is communicated to the developer as part of the
    build pipeline feedback so that they can rework and resubmit their changes. The
    build pipeline should fail or pass based on the severity of issues found, and
    that varies from organization to organization. A typical build pipeline is shown
    in *Figure 13.16*:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是基于 IaaS 虚拟机解决方案的典型构建流水线。发布流水线在开发人员将代码推送到仓库时开始。构建流水线会作为持续集成的一部分自动启动。它编译并构建代码，执行单元测试，检查代码质量，并从代码注释生成文档。它将新的二进制文件部署到开发环境中（注意，开发环境并不是新创建的），更改配置，执行集成测试，并生成构建标签以便于识别。然后，它将生成的工件放入发布流水线可以访问的位置。如果在流水线的任何步骤执行过程中出现问题，会作为构建流水线反馈传达给开发人员，以便他们重新修改并重新提交更改。构建流水线应根据问题的严重性判断失败或成功，而这在不同组织之间可能有所不同。一个典型的构建流水线如*图
    13.16*所示：
- en: '![A typical IaaS build pipeline](img/B15432_13_16.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![典型的 IaaS 构建流水线](img/B15432_13_16.jpg)'
- en: 'Figure 13.16: A typical IaaS build pipeline'
  id: totrans-253
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图13.16：典型的IaaS构建流水线
- en: Similar to the build pipeline, let's learn about the implementation of a release
    pipeline.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于构建流水线，让我们来了解一下发布流水线的实现。
- en: The release pipeline
  id: totrans-255
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发布流水线
- en: A typical release pipeline for an IaaS virtual machine-based deployment is shown
    next. A release pipeline starts after the completion of the build pipeline. The
    first step in the release pipeline is to gather the artifacts generated by the
    build pipeline. They are generally deployable assemblies, binaries, and configuration
    documents. The release pipeline executes and creates or updates the first environment,
    which generally is a test environment. It uses ARM templates to provision all
    IaaS and PaaS services and resources on Azure and configures them as well. They
    also help in executing scripts and DSC configuration after virtual machines are
    created as post-creation steps. This helps to configure the environment within
    the virtual machine and the operating system. At this stage, application binaries
    from the build pipeline are deployed and configured. Different automated tests
    are performed to check the solution and, if found satisfactory, the pipeline moves
    the deployment to the next environment after obtaining the necessary approvals.
    The same steps are executed in the next environment, including the production
    environment. Finally, the operational validation tests are executed in production
    to ensure that the application is working as expected and there are no deviations.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 下一部分展示了基于IaaS虚拟机部署的典型发布流水线。发布流水线在构建流水线完成后开始。发布流水线的第一步是收集构建流水线生成的工件，通常是可部署的程序集、二进制文件和配置文档。发布流水线执行并创建或更新第一个环境，通常是测试环境。它使用ARM模板来配置Azure上的所有IaaS和PaaS服务和资源，并对其进行配置。它们还帮助在创建虚拟机后执行脚本和DSC配置作为后创建步骤。这有助于配置虚拟机内的环境和操作系统。在这一阶段，构建流水线中的应用程序二进制文件将被部署和配置。执行各种自动化测试以检查解决方案，若测试结果令人满意，流水线将在获得必要的批准后将部署转移到下一个环境。相同的步骤将在下一个环境中执行，包括生产环境。最后，在生产环境中执行操作验证测试，以确保应用程序按预期工作，并且没有任何偏差。
- en: 'At this stage, if there are any issues or bugs, they should be rectified and
    the entire cycle should be repeated; however, if this doesn''t happen within a
    stipulated time frame, the last-known snapshot should be restored in the production
    environment to minimize downtime. A typical release pipeline is shown in *Figure
    13.17*:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一阶段，如果出现任何问题或错误，应该予以修复，并且整个周期需要重新执行；但是，如果在规定的时间内没有完成，应该在生产环境中恢复最后已知的快照，以尽量减少停机时间。典型的发布流水线如*图13.17*所示：
- en: '![A typical IaaS release pipeline](img/B15432_13_17.jpg)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![典型的IaaS发布流水线](img/B15432_13_17.jpg)'
- en: 'Figure 13.17: A typical IaaS release pipeline'
  id: totrans-259
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图13.17：典型的IaaS发布流水线
- en: This section concludes the DevOps process for IaaS solutions and the next chapter
    will focus on containers on virtual machines. Please note that containers can
    also run on PaaS like App Service and Azure Functions.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 本节总结了IaaS解决方案的DevOps流程，下一章将重点介绍虚拟机上的容器。请注意，容器也可以在像App Service和Azure Functions这样的PaaS上运行。
- en: DevOps with containers
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps与容器
- en: 'In a typical architecture, container runtimes are deployed on virtual machines
    and containers are run within them. The typical architecture for IaaS container-based
    solutions is shown here:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在典型的架构中，容器运行时被部署在虚拟机上，容器在其中运行。基于IaaS容器解决方案的典型架构如图所示：
- en: '![IaaS container-based solution architecture](img/B15432_13_18.jpg)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![基于IaaS的容器解决方案架构](img/B15432_13_18.jpg)'
- en: 'Figure 13.18: Architecture for IaaS container-based solutions'
  id: totrans-264
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图13.18：基于IaaS的容器解决方案架构
- en: These containers are managed by container orchestrators such as Kubernetes.
    Monitoring services are provided by Log Analytics and all secrets and keys are
    stored in Azure Key Vault. There is also a pull server, which could be on a virtual
    machine or Azure Automation, providing configuration information to the virtual
    machines.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 这些容器由容器编排器（如Kubernetes）管理。监控服务由Log Analytics提供，所有的密钥和机密存储在Azure Key Vault中。此外，还有一个拉取服务器，可以是虚拟机或Azure
    Automation，它向虚拟机提供配置信息。
- en: Containers
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 容器
- en: Containers are a virtualization technology; however, they don't virtualize physical
    servers. Instead, containers are an operating system-level virtualization. This
    means that containers share the operating system kernel provided by their host
    among themselves and with the host. Running multiple containers on a host (physical
    or virtual) shares the host operating system kernel. There's a single operating
    system kernel provided by the host and used by all containers running on top of
    it.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 容器是一种虚拟化技术；然而，它们并不虚拟化物理服务器。相反，容器是一种操作系统级的虚拟化。这意味着容器共享其主机提供的操作系统内核，并且彼此以及与主机共享该内核。在主机（无论是物理的还是虚拟的）上运行多个容器时，容器共享主机的操作系统内核。主机提供一个操作系统内核，所有在其上运行的容器共享这个内核。
- en: Containers are also completely isolated from their host and other containers,
    much like a virtual machine. Containers use operating system namespaces, control
    groups on Linux, to provide the perception of a new operating system environment,
    and use specific operating system virtualization techniques on Windows. Each container
    gets its own copy of the operating system resources.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 容器与其主机和其他容器完全隔离，类似于虚拟机。容器使用操作系统命名空间（在 Linux 上使用控制组）来提供一个新的操作系统环境的感知，并在 Windows
    上使用特定的操作系统虚拟化技术。每个容器都拥有自己的一份操作系统资源。
- en: '**Docker**'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '**Docker**'
- en: 'Docker provides management features to containers. It comprises two executables:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 提供了容器的管理功能。它包含两个可执行文件：
- en: The Docker daemon
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 守护进程
- en: The Docker client
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 客户端
- en: The Docker daemon is the workhorse for managing containers. It's a management
    service that's responsible for managing all activities on the host related to
    containers. The Docker client interacts with the Docker daemon and is responsible
    for capturing inputs and sending them to the Docker daemon. The Docker daemon
    provides the runtime; libraries; graph drivers; the engines to create, manage,
    and monitor containers; and images on the host server. It can also create custom
    images that are used for building and shipping applications to multiple environments.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 守护进程是管理容器的主力军。它是一个管理服务，负责管理与容器相关的所有主机活动。Docker 客户端与 Docker 守护进程进行交互，负责捕获输入并将其发送给
    Docker 守护进程。Docker 守护进程提供运行时、库、图形驱动程序、用于创建、管理和监控容器的引擎，以及主机服务器上的镜像。它还可以创建自定义镜像，用于构建和交付应用程序到多个环境。
- en: '**The Dockerfile**'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '**Dockerfile**'
- en: The `Dockerfile` is the primary building block for creating container images.
    It's a simple text-based human-readable file without an extension and is even
    named `Dockerfile`. Although there's a mechanism to name it differently, generally
    it is named `Dockerfile`. The Dockerfile contains instructions to create a custom
    image using a base image. These instructions are executed sequentially from top
    to bottom by the Docker daemon. The instructions refer to the command and its
    parameters, such as `COPY`, `ADD`, `RUN`, and `ENTRYPOINT`. The Dockerfile enables
    IaC practices by converting the application deployment and configuration into
    instructions that can be versioned and stored in a source code repository. Let's
    check out the build steps in the following section.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`Dockerfile` 是创建容器镜像的主要构建模块。它是一个简单的基于文本的、可读性强的文件，没有扩展名，甚至被命名为 `Dockerfile`。尽管有一种机制可以将其命名为其他名字，但通常它被命名为
    `Dockerfile`。Dockerfile 包含了使用基础镜像创建自定义镜像的指令。这些指令会从上到下由 Docker 守护进程依次执行。指令包括命令及其参数，如
    `COPY`、`ADD`、`RUN` 和 `ENTRYPOINT`。Dockerfile 通过将应用程序部署和配置转化为可以版本化并存储在源代码库中的指令，支持
    IaC（基础设施即代码）实践。接下来让我们查看构建步骤。'
- en: The build pipeline
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建管道
- en: There's no difference, from the build perspective, between the container and
    a virtual-machine-based solution. The build step remains the same. A typical release
    pipeline for an IaaS container-based deployment is shown next.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 从构建的角度来看，容器和基于虚拟机的解决方案没有区别。构建步骤保持不变。一个典型的 IaaS 容器部署发布管道如下所示。
- en: The release pipeline
  id: totrans-278
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 发布管道
- en: 'The only difference between a typical release pipeline for an IaaS container-based
    deployment and the release pipeline is the container-image management and the
    creation of containers using Dockerfile and Docker Compose. Advanced container-management
    utilities, such as Docker Swarm, DC/OS, and Kubernetes, can also be deployed and
    configured as part of release management. However, note that these container management
    tools should be part of the shared services release pipeline, as discussed earlier.
    *Figure 13.19* shows a typical release pipeline for a container-based solution:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: IaaS容器部署的典型发布流水线与发布流水线之间的唯一区别是容器镜像管理以及使用Dockerfile和Docker Compose创建容器。像Docker
    Swarm、DC/OS和Kubernetes这样的高级容器管理工具，也可以作为发布管理的一部分进行部署和配置。不过，值得注意的是，这些容器管理工具应该是共享服务发布流水线的一部分，如前面所讨论的那样。*图13.19*展示了一个基于容器的解决方案的典型发布流水线：
- en: '![A typical container-based release pipeline](img/B15432_13_19.jpg)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![典型的基于容器的发布流水线](img/B15432_13_19.jpg)'
- en: 'Figure 13.19: Container-based release pipeline'
  id: totrans-281
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图13.19：基于容器的发布流水线
- en: The focus of the next section is integration with other toolsets, such as Jenkins.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 下一部分的重点是与其他工具集的集成，如Jenkins。
- en: Azure DevOps and Jenkins
  id: totrans-283
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure DevOps与Jenkins
- en: Azure DevOps is an open platform orchestrator that integrates with other orchestrator
    tools seamlessly. It provides all the necessary infrastructure and features that
    integrate well with Jenkins, as well. Organizations with well-established CI/CD
    pipelines built on Jenkins can reuse them with the advanced but simple features
    of Azure DevOps to orchestrate them.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps是一个开放的**平台**编排器，可以无缝集成其他编排工具。它提供了与Jenkins良好集成所需的所有基础设施和功能。已经建立了基于Jenkins的CI/CD流水线的组织，可以利用Azure
    DevOps的先进但简单的功能来编排这些流水线。
- en: Jenkins can be used as a repository and can execute CI/CD pipelines in Azure
    DevOps, while it's also possible to have a repository in Azure DevOps and execute
    CI/CD pipelines in Jenkins.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins可以用作存储库，并且可以在Azure DevOps中执行CI/CD流水线，同时也可以在Azure DevOps中拥有一个存储库，并在Jenkins中执行CI/CD流水线。
- en: 'The Jenkins configuration can be added in Azure DevOps as service hooks, and
    whenever any code change is committed to the Azure DevOps repository, it can trigger
    pipelines in Jenkins. *Figure 13.20* shows the configuration of Jenkins from the
    Azure DevOps service hook configuration section:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins配置可以作为服务钩子添加到Azure DevOps中，每当任何代码更改被提交到Azure DevOps存储库时，它可以触发Jenkins中的流水线。*图13.20*展示了来自Azure
    DevOps服务钩子配置部分的Jenkins配置：
- en: '![Jenkins configuration as service hooks in Azure DevOps](img/B15432_13_20.jpg)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![Azure DevOps中作为服务钩子的Jenkins配置](img/B15432_13_20.jpg)'
- en: 'Figure 13.20: Configuration of Jenkins'
  id: totrans-288
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图13.20：Jenkins配置
- en: 'There are multiple triggers that execute the pipelines in Jenkins; one of them
    is **Code pushed**, as shown in *Figure 13.21*:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在Jenkins中有多种触发器可以执行流水线；其中之一是**代码推送**，如*图13.21*所示：
- en: '![Executing a Jenkins pipeline through a code-pushed trigger](img/B15432_13_21.jpg)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![通过代码推送触发器执行Jenkins流水线](img/B15432_13_21.jpg)'
- en: 'Figure 13.21: Code pushed trigger executed'
  id: totrans-291
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图13.21：执行的代码推送触发器
- en: It's also possible to deploy to Azure VM and execute Azure DevOps release pipelines,
    as explained here: [https://docs.microsoft.com/azure/virtual-machines/linux/tutorial-build-deploy-jenkins](https://docs.microsoft.com/azure/virtual-machines/linux/tutorial-build-deploy-jenkins).
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以将其部署到Azure虚拟机并执行Azure DevOps发布流水线，具体说明见：[https://docs.microsoft.com/azure/virtual-machines/linux/tutorial-build-deploy-jenkins](https://docs.microsoft.com/azure/virtual-machines/linux/tutorial-build-deploy-jenkins)。
- en: Jenkins should already be deployed before using it in any scenario. The deployment
    process on Linux can be found at [https://docs.microsoft.com/azure/virtual-machines/linux/tutorial-jenkins-github-docker-cicd](https://docs.microsoft.com/azure/virtual-machines/linux/tutorial-jenkins-github-docker-cicd).
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何场景中使用Jenkins之前，应该先进行部署。Linux上的部署过程可以在[https://docs.microsoft.com/azure/virtual-machines/linux/tutorial-jenkins-github-docker-cicd](https://docs.microsoft.com/azure/virtual-machines/linux/tutorial-jenkins-github-docker-cicd)找到。
- en: The next section will be more focused on tools and services related to configuration
    management. Azure automation provides DSC-related services such as the pull server.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 下一部分将更加关注与配置管理相关的工具和服务。Azure自动化提供与DSC相关的服务，如拉取服务器。
- en: Azure Automation
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure自动化
- en: 'Azure Automation is Microsoft''s platform for all automation implementation
    with regard to cloud, on-premises, and hybrid deployments. Azure Automation is
    a mature automation platform that provides rich capabilities in terms of the following:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Automation 是微软的自动化平台，适用于云端、本地和混合部署的所有自动化实现。Azure Automation 是一个成熟的自动化平台，提供了以下方面的丰富功能：
- en: Defining assets, such as variables, connections, credentials, certificates,
    and modules
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义资产，如变量、连接、凭据、证书和模块
- en: Implementing runbooks using Python, PowerShell scripts, and PowerShell workflows
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Python、PowerShell 脚本和 PowerShell 工作流实现运行手册
- en: Providing UIs to create runbooks
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供创建运行手册的用户界面
- en: Managing the full runbook life cycle, including building, testing, and publishing
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理完整的运行手册生命周期，包括构建、测试和发布
- en: Scheduling runbooks
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调度运行手册
- en: The ability to run runbooks anywhere—on cloud or on-premises
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在任何地方运行运行手册的能力——无论是在云端还是本地
- en: DSC as a configuration-management platform
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DSC 作为配置管理平台
- en: Managing and configuring environments—Windows and Linux, applications, and deployment
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理和配置环境——Windows 和 Linux、应用程序以及部署
- en: The ability to extend Azure Automation by importing custom modules
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过导入自定义模块扩展 Azure Automation 的能力
- en: Azure Automation provides a DSC pull server that helps to create a centralized
    configuration management server that consists of configurations for nodes/virtual
    machines and their constituents.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Automation 提供一个 DSC 拉取服务器，帮助创建一个集中式配置管理服务器，包含节点/虚拟机及其组成部分的配置。
- en: It implements the hub and spoke pattern wherein nodes can connect to the DSC
    pull server and download configurations assigned to them, and reconfigure themselves
    to reflect their desired state. Any changes or deviations within these nodes are
    autocorrected by DSC agents the next time they run. This ensures that administrators
    don't need to actively monitor the environment to find any deviations.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 它实现了中心和分支模式，其中节点可以连接到 DSC 拉取服务器，下载分配给它们的配置，并重新配置自己以反映其期望状态。节点中的任何变化或偏差将在下一次运行时由
    DSC 代理自动修正。这确保了管理员无需主动监控环境，以便发现任何偏差。
- en: DSC provides a declarative language in which you define the intent and configuration,
    but not how to run and apply those configurations. These configurations are based
    on the PowerShell language and ease the process of configuration management.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: DSC 提供了一种声明性语言，您在其中定义意图和配置，而不是如何运行和应用这些配置。这些配置基于 PowerShell 语言，简化了配置管理的过程。
- en: In this section, we'll look into a simple implementation of using Azure Automation
    DSC to configure a virtual machine to install and configure the web server (IIS)
    and create an `index.htm` file that informs users that the website is under maintenance.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍如何使用 Azure Automation DSC 配置虚拟机，安装并配置 Web 服务器 (IIS)，并创建一个 `index.htm`
    文件，告知用户网站正在维护中。
- en: Next, you will learn how to provision an Azure Automation account.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将学习如何配置 Azure Automation 帐户。
- en: Provisioning an Azure Automation account
  id: totrans-311
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 Azure Automation 帐户
- en: 'Create a new Azure Automation account from the Azure portal or PowerShell within
    an existing or new resource group. You may notice in *Figure 13.22* that Azure
    Automation provides menu items for DSC:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure 门户或 PowerShell 中，从现有或新资源组创建一个新的 Azure Automation 帐户。您可能会注意到在*图 13.22*中，Azure
    Automation 提供了有关 DSC 的菜单项：
- en: '![The state configuration menu in Azure Automation](img/B15432_13_22.jpg)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
  zh: '![Azure Automation 中的状态配置菜单](img/B15432_13_22.jpg)'
- en: 'Figure 13.22: DSC in an Azure Automation account'
  id: totrans-314
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13.22：Azure Automation 帐户中的 DSC
- en: 'It provides the following:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 它提供了以下功能：
- en: '**DSC nodes**: These list all the virtual machines and containers that are
    enlisted with the current Azure Automation DSC pull server. These virtual machines
    and containers are managed using configurations from the current DSC pull server.'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DSC 节点**：这些列出了当前 Azure Automation DSC 拉取服务器所注册的所有虚拟机和容器。通过当前的 DSC 拉取服务器的配置来管理这些虚拟机和容器。'
- en: '**DSC configurations**: These list all the raw PowerShell configurations imported
    and uploaded to the DSC pull server. They are in human-readable format and aren''t
    in a compiled state.'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DSC 配置**：这些列出了所有导入并上传到 DSC 拉取服务器的原始 PowerShell 配置。它们是人类可读格式，并未编译。'
- en: '**DSC node configurations**: These list all compiles of DSC configurations
    available on the pull server to be assigned to nodes—virtual machines and containers.
    A DSC configuration produces MOF files after compilations and they''re eventually
    used to configure nodes.'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DSC 节点配置**：这些列出了所有可以分配给节点（虚拟机和容器）的 DSC 配置的编译版本，节点可以从拉取服务器获取。DSC 配置经过编译后会生成
    MOF 文件，最终用于配置节点。'
- en: After provisioning an Azure Automation account, we can create a sample DSC configuration,
    as shown in the next section.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置 Azure Automation 账户后，我们可以创建一个示例 DSC 配置，如下一部分所示。
- en: Creating a DSC configuration
  id: totrans-320
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 DSC 配置
- en: The next step is to write a DSC configuration using any PowerShell editor to
    reflect the intent of the configuration. For this sample, a single configuration, `ConfigureSiteOnIIS`,
    is created. It imports the base DSC module, `PSDesiredStateConfiguration`, which
    consists of resources used within the configuration. It also declares a node web
    server. When this configuration is uploaded and compiled, it will generate a DSC
    configuration named `ConfigureSiteOnIISwebserver`. This configuration can then be
    applied to nodes.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是使用任意 PowerShell 编辑器编写 DSC 配置，以反映配置的意图。对于此示例，创建了一个名为 `ConfigureSiteOnIIS`
    的配置。它导入了基本的 DSC 模块 `PSDesiredStateConfiguration`，该模块包含配置中使用的资源。它还声明了一个节点 web 服务器。当这个配置被上传并编译后，它将生成一个名为
    `ConfigureSiteOnIISwebserver` 的 DSC 配置。该配置随后可以应用于节点。
- en: The configuration consists of a few resources. These resources configure the
    target node. The resources install a web server, ASP.NET, and framework, and create
    an `index.htm` file within the `inetpub\wwwroot` directory with content to show
    that the site is under maintenance. For more information about writing DSC configuration,
    refer to [https://docs.microsoft.com/powershell/scripting/dsc/getting-started/wingettingstarted?view=powershell-7](https://docs.microsoft.com/powershell/scripting/dsc/getting-started/wingettingstarted?view=powershell-7).
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 该配置包含几个资源。这些资源配置目标节点。资源安装了 web 服务器、ASP.NET 和框架，并在 `inetpub\wwwroot` 目录中创建了一个
    `index.htm` 文件，文件内容用于显示网站正在维护中。有关编写 DSC 配置的更多信息，请参阅 [https://docs.microsoft.com/powershell/scripting/dsc/getting-started/wingettingstarted?view=powershell-7](https://docs.microsoft.com/powershell/scripting/dsc/getting-started/wingettingstarted?view=powershell-7)。
- en: 'The next code listing shows the entire configuration described in the previous
    paragraph. This configuration will be uploaded to the Azure Automation account:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 下一段代码列出了前述配置的完整内容。该配置将被上传到 Azure Automation 账户：
- en: '[PRE0]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After creating a sample DSC configuration, it should be imported within Azure
    Automation as shown in the next section.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建了一个示例 DSC 配置后，应将其导入到 Azure Automation 中，如下一部分所示。
- en: Importing the DSC configuration
  id: totrans-326
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导入 DSC 配置
- en: 'The DSC configuration still isn''t known to Azure Automation. It''s available
    on some local machines. It should be uploaded to Azure Automation DSC configurations.
    Azure Automation provides the `Import-AzureRMAutomationDscConfiguration` cmdlet
    to import the configuration to Azure Automation:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 该 DSC 配置仍未为 Azure Automation 所知。它目前存在于一些本地机器上。应将其上传到 Azure Automation 的 DSC
    配置中。Azure Automation 提供了 `Import-AzureRMAutomationDscConfiguration` cmdlet 来将配置导入到
    Azure Automation：
- en: '[PRE1]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The commands will import the configuration within Azure Automation. After importing,
    the DSC configuration should be compiled so that it can be assigned to servers
    for compliance checks and autoremediation.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令将会在 Azure Automation 中导入配置。导入后，DSC 配置应被编译，以便可以分配给服务器进行合规性检查和自动修复。
- en: Compiling the DSC configuration
  id: totrans-330
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编译 DSC 配置
- en: 'After the DSC configuration is available in Azure Automation, it can be asked
    to compile. Azure Automation provides another cmdlet for this. Use the `Start-AzureRmAutomationDscCompilationJob` cmdlet
    to compile the imported configuration. The configuration name should match the
    name of the uploaded configuration. Compilation creates an MOF file named after
    the configuration and node name together, which in this case is the `ConfigureSiteOnIIS` web
    server. The execution of the command is shown here:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure Automation 中可用 DSC 配置后，可以请求编译。Azure Automation 提供了另一个 cmdlet 用于此操作。使用
    `Start-AzureRmAutomationDscCompilationJob` cmdlet 来编译已导入的配置。配置名称应与上传的配置名称匹配。编译会创建一个名为配置和节点名称组合的
    MOF 文件，在此案例中是 `ConfigureSiteOnIIS` web 服务器。命令执行过程如下所示：
- en: '[PRE2]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now you have accomplished DSC node configuration. In the next section, you will
    learn to assign configurations to nodes.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经完成了 DSC 节点配置。在接下来的部分中，你将学习如何将配置分配给节点。
- en: Assigning configurations to nodes
  id: totrans-334
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将配置分配给节点
- en: The compiled DSC configurations can be applied to nodes. Use `Register-AzureRmAutomationDscNode` to
    assign the configuration to a node. The `NodeConfigurationName` parameter identifies
    the configuration name that should be applied to the node. This is a powerful
    cmdlet that can also configure the DSC agent, which is `localconfigurationmanager`,
    on nodes before they can download configurations and apply them. There are multiple `localconfigurationmanager` parameters
    that can be configured—details are available at [https://devblogs.microsoft.com/powershell/understanding-meta-configuration-in-windows-powershell-desired-state-configuration](https://devblogs.microsoft.com/powershell/understanding-meta-configuration-in-windows-powershell-desired-state-configuration).
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 编译后的 DSC 配置可以应用于节点。使用 `Register-AzureRmAutomationDscNode` 将配置分配给节点。`NodeConfigurationName`
    参数标识应应用于节点的配置名称。这是一个强大的 cmdlet，它还可以在节点下载配置并应用之前，配置 DSC 代理，即 `localconfigurationmanager`。有多个可以配置的
    `localconfigurationmanager` 参数，详细信息可查看 [https://devblogs.microsoft.com/powershell/understanding-meta-configuration-in-windows-powershell-desired-state-configuration](https://devblogs.microsoft.com/powershell/understanding-meta-configuration-in-windows-powershell-desired-state-configuration)。
- en: 'Let''s heck out the configuration below:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看下面的配置：
- en: '[PRE3]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now, we can test whether the configuration has been applied to the servers by
    browsing the newly deployed website using a browser. After the testing has completed
    successfully, let's move on to validating the connections.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过使用浏览器浏览新部署的网站来测试配置是否已应用到服务器上。在测试成功完成后，我们继续验证连接。
- en: Validation
  id: totrans-339
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证
- en: If appropriate, network security groups and firewalls are opened and enabled
    for port 80, and a public IP is assigned to the virtual machine. The default website
    can be browsed using the IP address. Otherwise, log into the virtual machine that's
    used to apply the DSC configuration and navigate to `http://localhost`.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 如果适当，网络安全组和防火墙应为端口 80 开放并启用，并且为虚拟机分配公共 IP。可以通过该 IP 地址浏览默认网站。否则，登录到用于应用 DSC 配置的虚拟机，并导航至
    `http://localhost`。
- en: 'It should show the following page:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该显示以下页面：
- en: '![Validating the connection through Localhost](img/B15432_13_23.jpg)'
  id: totrans-342
  prefs: []
  type: TYPE_IMG
  zh: '![通过本地主机验证连接](img/B15432_13_23.jpg)'
- en: 'Figure 13.23: Localhost'
  id: totrans-343
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13.23：本地主机
- en: 'This is the power of configuration management: without writing any significant
    code, authoring a configuration once can be applied multiple times to the same
    and multiple servers, and you can be assured that they will run in the desired
    state without any manual intervention. In the next section, we will check out
    the various tools available for Azure DevOps.'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是配置管理的力量：无需编写任何复杂的代码，编写一次配置后，可以多次应用于相同或多个服务器，并且可以确保它们会在所需状态下运行，无需人工干预。在下一节中，我们将查看适用于
    Azure DevOps 的各种工具。
- en: Tools for DevOps
  id: totrans-345
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps 工具
- en: 'As mentioned before, Azure is a rich and mature platform that supports the
    following:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Azure 是一个功能丰富且成熟的平台，支持以下内容：
- en: Multiple choices of languages
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多种语言选择
- en: Multiple choices of operating systems
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多种操作系统选择
- en: Multiple choices of tools and utilities
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多种工具和实用程序的选择
- en: Multiple patterns for deploying solutions (such as virtual machines, app services,
    containers, and microservices)
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多种部署解决方案的模式（例如虚拟机、应用服务、容器和微服务）
- en: 'With so many options and choices, Azure offers the following:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 在如此众多的选项和选择中，Azure 提供了以下内容：
- en: '**Open cloud**: It is open to open source, Microsoft, and non-Microsoft products,
    tools, and services.'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开放云**：它对开源、微软以及非微软的产品、工具和服务都是开放的。'
- en: '**Flexible cloud**: It is easy enough for both end users and developers to
    use it with their existing skills and knowledge.'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活云**：它足够简单，既适合终端用户，也适合开发人员，能够利用现有的技能和知识进行使用。'
- en: '**Unified management**: It provides seamless monitoring and management features.'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**统一管理**：它提供无缝的监控和管理功能。'
- en: 'All the services and capabilities mentioned here are important for the successful
    implementation of DevOps. *Figure 13.24* shows the open source tools and utilities
    that can be used for different phases of managing the application life cycle and
    DevOps in general:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 这里提到的所有服务和功能对于 DevOps 的成功实施至关重要。*图 13.24* 展示了可以用于管理应用生命周期和 DevOps 各个阶段的开源工具和实用程序：
- en: '![Open source tools and utilities for managing the application lifecycle](img/B15432_13_24.jpg)'
  id: totrans-356
  prefs: []
  type: TYPE_IMG
  zh: '![用于管理应用生命周期的开源工具和实用程序](img/B15432_13_24.jpg)'
- en: 'Figure 13.24: Open source tools and utilities'
  id: totrans-357
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13.24：开源工具和实用程序
- en: '*Figure 13.24* shows the Microsoft tools and utilities that can be used for
    different phases of managing the application life cycle and DevOps in general.
    Again, this is just a small representation of all the tools and utilities—there
    are many more options available, such as the following:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 13.24* 显示了可以用于管理应用生命周期和 DevOps 各个阶段的 Microsoft 工具和实用程序。再次强调，这只是所有工具和实用程序的一小部分——实际上有许多其他选项，例如以下内容：'
- en: Azure DevOps build orchestration for constructing a build pipeline
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure DevOps 构建编排，用于构建构建管道
- en: Microsoft Test Manager and Pester for testing
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft 测试管理器和 Pester 用于测试
- en: DSC, PowerShell, and ARM templates for deployment or configuration management
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DSC、PowerShell 和 ARM 模板用于部署或配置管理
- en: Log Analytics, Application Insights, and **System Center Operations Manager** (**SCOM**)
    for alerting and monitoring
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志分析、应用洞察以及**系统中心操作管理器** (**SCOM**) 用于警报和监控
- en: 'Azure DevOps and System Center Service Manager for managing processes:'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure DevOps 和系统中心服务管理器用于管理流程：
- en: '![Microsoft tools and utilities for managing the application lifecycle](img/B15432_13_25.jpg)'
  id: totrans-364
  prefs: []
  type: TYPE_IMG
  zh: '![用于管理应用生命周期的 Microsoft 工具和实用程序](img/B15432_13_25.jpg)'
- en: 'Figure 13.25: Microsoft tools and utilities'
  id: totrans-365
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 13.25：Microsoft 工具和实用程序
- en: There are many tools available for each of the DevOps practices and in this
    section, you saw some of the tools and the way to configure them.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 DevOps 实践都有许多可用的工具，在本节中，您已经了解了一些工具及其配置方式。
- en: Summary
  id: totrans-367
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小结
- en: DevOps is gaining a lot of traction and momentum in the industry. Most organizations
    have realized its benefits and are looking to implement DevOps. This is happening
    while most of them are moving to the cloud. Azure, as a cloud platform, provides
    rich and mature DevOps services, making it easy for organizations to implement
    DevOps.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 在行业中获得了极大的关注和势头。大多数组织已经意识到其好处，并希望实施 DevOps。与此同时，他们中的大多数正在向云迁移。作为云平台，Azure
    提供了丰富且成熟的 DevOps 服务，使组织更容易实现 DevOps。
- en: In this chapter, we discussed DevOps along with its core practices, such as
    configuration management, continuous integration, continuous delivery, and deployment.
    We also discussed different cloud solutions based on PaaS, a virtual machine IaaS,
    and a container IaaS, along with their respective Azure resources, the build and
    release pipelines.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了 DevOps 及其核心实践，如配置管理、持续集成、持续交付和部署。我们还讨论了基于 PaaS 的不同云解决方案、虚拟机 IaaS
    和容器 IaaS，以及它们各自的 Azure 资源、构建和发布管道。
- en: Configuration management was also explained in the chapter, along with DSC services
    from Azure Automation and using pull servers to configure virtual machines automatically.
    Finally, we covered Azure's openness and flexibility regarding the choice of languages,
    tools, and operating systems.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还解释了配置管理，以及如何使用来自 Azure 自动化的 DSC 服务和拉取服务器自动配置虚拟机。最后，我们讨论了 Azure 在语言、工具和操作系统选择方面的开放性和灵活性。
- en: In the next chapter, we will go through the details of Kubernetes and its components
    and interactions, in addition to application design and deployment considerations
    on Kubernetes.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将详细讲解 Kubernetes 及其组件和交互，此外还将讨论 Kubernetes 上的应用设计和部署注意事项。
