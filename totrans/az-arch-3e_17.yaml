- en: In the previous chapter, you learned about ARM templates, and so far, we have
    been dealing with architectural concerns and their solutions in Azure in general.
    However, this chapter is not based on generalized architecture. In fact, it explores
    one of the most disruptive technologies of this century. This chapter will discuss
    the details of the **Internet of Things** (**IoT**) and Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Azure IoT refers to a collection of Microsoft-managed cloud services that can
    connect, monitor, and control billions of IoT assets. In other words, an IoT solution
    comprises one or more IoT devices that constantly communicate with one or more
    back-end servers in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure and IoT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overview of Azure IoT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Device management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registering devices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Device-to-IoT-hub communication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scaling IoT solutions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High availability for IoT solutions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IoT protocols
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using message properties to route messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IoT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The internet was invented in the 1980s and later became widely available. Almost
    everyone moved toward having a presence on the internet and started creating their
    own static web pages. Eventually, the static content became dynamic and could
    be generated on the fly, based on context. In nearly all cases, a browser was
    needed to access the internet. There were a plethora of browsers available, and
    without them, using the internet was a challenge.
  prefs: []
  type: TYPE_NORMAL
- en: During the first decade of this century, there was an interesting development
    that was emerging—the rise of handheld devices, such as mobile phones and tablets.
    Mobile phones started becoming cheaper and were available ubiquitously. The hardware
    and software capabilities of these handheld devices were improving considerably,
    and so much so that people started using browsers on their mobile devices rather
    than on their desktops. But one particularly distinct change was the rise of mobile
    apps. These mobile apps were downloaded from a store and connected to the internet
    to talk to back-end systems. Toward the end of the last decade, there were millions
    of apps available with almost every conceivable functionality built into them.
    The back-end system for these apps was built on the cloud so that they could be
    scaled rapidly. This was the age of connecting applications and servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'But was this the pinnacle of innovation? What was the next evolution of the
    internet? Well, another paradigm has now been taking center stage: IoT. Instead
    of just mobile and tablet devices connecting to the internet, why can''t other
    devices connect to the internet? Previously, such devices were available only
    in select markets; they were costly, not available to the masses, and had limited
    hardware and software capabilities. However, since the first part of this decade,
    the commercialization of these devices has been growing on a grand scale. These
    devices are becoming smaller and smaller, are more capable in terms of hardware
    and software, have more storage and compute power, can connect to the internet
    on various protocols, and can be attached to almost anything. This is the age
    of connecting devices to servers, applications, and other devices.'
  prefs: []
  type: TYPE_NORMAL
- en: This has led to the formulation of the idea that IoT applications can change
    the way that industries are operating. Newer solutions that were previously unheard
    of are beginning to be realized. Now, these devices can be attached to anything;
    they can get information and send it to a back-end system that can assimilate
    information from all the devices and either take action on or report incidents.
  prefs: []
  type: TYPE_NORMAL
- en: IoT sensors and controls can be leveraged in many business use cases. For example,
    they can be used in vehicle tracking systems, which can track all the vital parameters
    of a vehicle and send those details to a centralized data store for analysis.
    Smart city initiatives can also make use of various sensors to track pollution
    levels, temperature, and street congestion. IoT has also found its way into agriculture-related
    activities, such as measuring soil fertility, humidity, and more. You can visit
    Microsoft Technical Case Studies for IoT, at [https://microsoft.github.io/techcasestudies/#technology=IoT&sortBy=featured](https://microsoft.github.io/techcasestudies/#technology=IoT&sortBy=featured),
    for real-life examples of how organizations leverage Azure IoT.
  prefs: []
  type: TYPE_NORMAL
- en: Before we explore the tools and services related to IoT, we will first cover
    IoT architecture in detail.
  prefs: []
  type: TYPE_NORMAL
- en: IoT architecture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before getting into Azure and its features and services regarding IoT, it is
    important to understand the various components that are needed to create end-to-end
    IoT solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Consider that IoT devices across the globe are sending millions of messages
    every second to a centralized database. Why is this data being collected? Well,
    the answer is to extract rich information about events, anomalies, and outliers
    that are to do with whatever those devices are monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: Let's understand this in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'IoT architecture can be divided into distinct phases, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Connectivity**: This phase involves a connection being made between a device
    and the IoT service.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Identity**: After connecting to the IoT service, the first thing that happens
    is the identification of the device and ensuring that it is allowed to send device
    telemetry to the IoT service. This is done using an authentication process.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Capture**: During this phase, the device telemetry is captured and received
    by the IoT service.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Ingestion**: In this phase, the IoT service ingests the device telemetry.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Storage**: The device telemetry is stored. It could be a temporary or permanent
    store.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Transformation**: The telemetry data is transformed for further processing.
    This includes augmenting existing data and inferring data.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Analytics**: The transformed data is used to find patterns, anomalies, and
    insights.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Presentation**: The insights are shown as dashboards and reports. Additionally,
    new alerts can be generated that could invoke automation scripts and processes.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Figure 17.1* shows a generic IoT-based architecture. Data is generated or
    collected by devices and sent over to the cloud gateway. The cloud gateway, in
    turn, sends the data to multiple back-end services for processing. Cloud gateways are optional
    components; they should be used when the devices themselves are not capable of
    sending requests to back-end services, either because of resource constraints
    or the lack of a reliable network. These cloud gateways can collate data from
    multiple devices and send it to back-end services. The data can then be processed
    by back-end services and shown as insights or dashboards to users:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A generic IoT application architecture showing how the data path connects
    the IP-capable devices, Existing IoT devices, Lower Power devices, the Gateway,
    and the Cloud Gateway.](img/B15432_17_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.1: A generic IoT application architecture'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Now that we are clear about the architecture, let's go ahead and understand
    how IoT devices communicate with other devices.
  prefs: []
  type: TYPE_NORMAL
- en: Connectivity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: IoT devices need to communicate to connect to other devices. There are various
    connectivity types; for example, connectivity could exist between devices in a
    region, between devices and a centralized gateway, and between devices and an
    IoT platform.
  prefs: []
  type: TYPE_NORMAL
- en: In all such cases, IoT devices need connectivity capability. This capability
    could be in the form of internet connectivity, Bluetooth, infrared, or any other
    near-device communication.
  prefs: []
  type: TYPE_NORMAL
- en: However, some IoT devices might not have the capability to connect to the internet.
    In these cases, they can connect to a gateway that in turn has connectivity to
    the internet.
  prefs: []
  type: TYPE_NORMAL
- en: IoT devices use protocols to send messages. The major protocols are the **Advanced
    Message Queuing Protocol** (**AMQP**) and the **Message Queue Telemetry Transport** (**MQTT**)
    protocol.
  prefs: []
  type: TYPE_NORMAL
- en: 'Device data should be sent to an IT infrastructure. The MQTT protocol is a
    device-to-server protocol that devices can use to send telemetry data and other
    information to servers. Once the server receives a message through the MQTT protocol,
    it needs to transport the message to other servers using a reliable technology
    that is based on messages and queues. AMQP is the preferred protocol for moving
    messages between servers in an IT infrastructure in a reliable and predictable
    manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A block diagram showing the flow of messages between ‘Servers using the AMQP
    protocol’ and ‘Devices using the MQTT protocol’.](img/B15432_17_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.2: Workings of the MQTT and AMQP protocols'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Servers receiving initial messages from IoT devices should send those messages
    to other servers for whatever processing is necessary, such as saving to logs,
    evaluation, analytics, and presentation.
  prefs: []
  type: TYPE_NORMAL
- en: Some devices do not have the capability to connect to the internet or do not
    support protocols that are compatible with other server technologies. To enable
    these devices to work with an IoT platform and the cloud, intermediate gateways
    can be used. Gateways help in onboarding devices whose connectivity and networking
    capability is slow and not consistent; such devices may use protocols that are
    not standard, or their capabilities may be limited in terms of resources and power.
  prefs: []
  type: TYPE_NORMAL
- en: In such circumstances, when devices need additional infrastructure to connect
    to back-end services, client gateways can be deployed. These gateways receive
    messages from near devices, and forward (or push) them to the IT infrastructure
    and the IoT platform for further consumption. These gateways are capable of protocol
    translation if required.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned about how communication is implemented with other
    devices and about the role that gateways play in terms of communication. In the
    next section, we're going to talk about identity.
  prefs: []
  type: TYPE_NORMAL
- en: Identity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: IoT devices should be registered with a cloud platform. Devices that are not
    registered should not be allowed to connect to a cloud platform. The devices should
    be registered and be assigned an identity. A device should send its identity information
    when connecting to the cloud. If the device fails to send this identity information,
    the connectivity should fail. You will see, later in this chapter, how to generate
    an identity for a device using a simulated application. As you already know, IoT
    devices are deployed to capture information, and in the next section, we will
    briefly talk about the capture process.
  prefs: []
  type: TYPE_NORMAL
- en: Capture
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: IoT devices should be able to capture information. They should have the capability,
    for example, to read or monitor the moisture content in the air or in soil. This
    information can be captured based on frequency—maybe even once per second. Once
    the information is captured, the device should be able to send it across to the
    IoT platform for processing. If a device can't connect to the IoT platform directly,
    it can connect to an intermediary cloud gateway instead and have that push the
    captured information.
  prefs: []
  type: TYPE_NORMAL
- en: The size of captured data and the frequency of capture are the most important
    things for the device. Whether a device should have local storage to be able to
    temporarily store captured data is another important aspect that should be considered.
    For instance, a device can work in offline mode if there is enough local storage
    available. Even mobile devices sometimes act as IoT devices connected to various
    instruments and have the capability to store data. Once we have captured the data,
    we need to ingest it to an IoT platform for further analysis, and in the next
    section, we will explore ingestion.
  prefs: []
  type: TYPE_NORMAL
- en: Ingestion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Data captured and generated by devices should be sent to an IoT platform that
    is capable of ingesting and consuming this data to extract meaningful information
    and insights out of it. The ingestion service is a crucial service because its
    availability and scalability affect the throughput of incoming data. If data starts
    getting throttled due to scalability issues, or if data is not able to be ingested
    due to availability issues, then it will be lost and the dataset might get biased
    or skewed. We have the data captured and we need a place to store this data. In
    the next section, you'll learn about storage.
  prefs: []
  type: TYPE_NORMAL
- en: Storage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: IoT solutions generally deal with millions or even billions of records, spanning
    terabytes or even petabytes of data. This is valuable data that can provide insights
    on operations and their health. This data needs to be stored in such a way that
    analytics can be performed on it. Storage should be readily available for analytics,
    applications, and services to consume it. Storage solutions should provide adequate
    throughput and latency from a performance perspective, and be highly available,
    scalable, and secure. The next section deals with data transformation, which is
    needed to store and analyze data.
  prefs: []
  type: TYPE_NORMAL
- en: Transformation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: IoT solutions are generally data-driven and have considerably high volumes of
    data to deal with. Imagine that every car has a device and each one sends messages
    every five seconds. If there were a million cars sending messages, this would
    be equal to 288 million messages per day and 8 billion messages per month. Together,
    this data has lots of hidden information and insights; however, making sense of
    this kind of data just by looking at it is difficult.
  prefs: []
  type: TYPE_NORMAL
- en: The data that is captured and stored by IoT devices can be consumed to solve
    business problems, but not all data that is captured is of importance. Just a
    subset of data might be needed to solve a problem. Additionally, the data that
    the IoT devices gather might not be consistent either. To ensure that the data
    is consistent and not biased or skewed, appropriate transformations should be
    executed upon it to make it ready for analysis. During transformation, data is
    filtered, sorted, removed, enriched, and transformed into a structure, such that
    the data can be consumed by components and applications further downstream. We
    need to perform some analytics with the transformed data before presenting it.
    As the next step in the workflow, we will discuss analytics.
  prefs: []
  type: TYPE_NORMAL
- en: Analytics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The data transformed in the previous step becomes the input for the analytics
    step. Depending on the problem at hand, there are different types of analytics
    that can be performed on transformed data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the different types of analytics that can be performed:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Descriptive analytics**: This type of analytics helps in finding patterns and details
    about the status of the IoT devices and their overall health. This stage identifies
    and summarizes the data for further consumption by more advanced stages of analytics.
    It will help in summarization, finding statistics related to probability, identifying
    deviation, and other statistical tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Diagnostic analytics**: This type of analytics is more advanced than descriptive
    analytics. It builds on descriptive analytics and tries to answer queries about
    why certain things have happened. That is, it tries to find the root causes of
    events. It tries to find answers using advanced concepts, such as hypothesis and
    correlation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Predictive analytics**: This type of analytics tries to predict things that
    have a high probability of happening in the future. It generates predictions that
    are based on past data; regression is one of the examples that is based on past
    data. Predictive analytics could, for example, predict the price of a car, the
    behavior of stock on the stock market, when a car tire will burst, and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Prescriptive analytics**: This type of analytics is the most advanced. This
    stage helps in identifying the action that should be performed to ensure that
    the health of devices and solutions does not degrade, and identifying proactive
    measures to undertake. The results of this stage of analytics can help in avoiding
    future issues and eliminating problems at their root causes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the final stage, the output from analytics is presented in a human-readable
    manner for a wider audience to understand and interpret. In the next part, we
    will discuss presentation.
  prefs: []
  type: TYPE_NORMAL
- en: Presentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Analytics help in identifying answers, patterns, and insights based on data.
    These insights also need to be available to all stakeholders in formats that they
    can understand. To this end, dashboards and reports can be generated, statistically
    or dynamically, and then be presented to stakeholders. Stakeholders can consume
    these reports for further action and improve their solutions continuously.
  prefs: []
  type: TYPE_NORMAL
- en: As a quick recap of all the preceding steps, we started off this section by
    looking at connectivity, where we introduced gateways for sending the data from
    devices that don't support the standard protocols. Then, we talked about identity
    and how data is captured. The captured data is then ingested and stored for further
    transformation. After transformation, analytics is done on the data before it's
    presented to all stakeholders. As we are working on Azure, in the next section,
    we will cover what Azure IoT is and consider the basics concepts that we have
    learned about so far from an Azure standpoint.
  prefs: []
  type: TYPE_NORMAL
- en: Azure IoT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now you''ve learned about the various stages of end-to-end IoT solutions; each
    of these stages is crucial and their proper implementation is a must for any solution''s
    success. Azure provides lots of services for each of these stages. Apart from
    these services, Azure provides Azure IoT Hub, which is Azure''s core IoT service
    and platform. It is capable of hosting complex, highly available, and scalable
    IoT solutions. We will dive deep into IoT Hub after going through some other services:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A table listing the devices and services for IoT applications. ](img/B15432_17_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.3: List of devices and services for IoT solutions'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the next section, we will follow a similar pattern as we did for our coverage
    of IoT architecture to learn about communication, identity, capture, ingestion,
    storage, transformation, analytics, and presentation with Azure IoT.
  prefs: []
  type: TYPE_NORMAL
- en: Connectivity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'IoT Hub provides all the important protocol suites for devices to connect to
    IoT hubs. It offers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**HTTPS**: The HyperText Transport Protocol Secure method uses certificates
    consisting of a pair of keys, known as private-public keys, that are used to encrypt
    and decrypt data between a device and IoT Hub. It provides one-way communication
    from a device to the cloud.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AMQP**: AMQP is an industry standard for sending and receiving messages between
    applications. It provides a rich infrastructure for the security and reliability
    of messages, and that is one of the reasons why it is quite widely used within
    the IoT space. It provides both device-to-Hub as well as Hub-to-device capabilities,
    and devices can use it to authenticate using **Claims-Based Security** (**CBS**)
    or **Simple Authentication and Security Layer** (**SASL**). It is used primarily
    in scenarios where there are field gateways, and a single identity related to
    multiple devices can transmit telemetry data to the cloud.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MQTT**: MQTT is an industry standard for sending and receiving messages between
    applications. It provides both device-to-Hub as well as Hub-to-device capabilities.
    It is used primarily in scenarios where each device has its own identity and authenticates
    directly with the cloud.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we will discuss identity and how devices are authenticated.
  prefs: []
  type: TYPE_NORMAL
- en: Identity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: IoT Hub provides services for authenticating devices. It offers an interface
    for generating unique identity hashes for each device. When devices send messages
    containing a hash, IoT Hub can authenticate them, after checking in its own database
    for the existence of such a hash. Now let's see how data is captured.
  prefs: []
  type: TYPE_NORMAL
- en: Capture
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Azure provides IoT gateways, which enable devices that do not comply with IoT
    Hub to be adapted and to push data. Local or intermediary gateways can be deployed
    near devices in such a way that multiple devices can connect to a single gateway
    to capture and send their information. Similarly, multiple clusters of devices
    with local gateways can also be deployed. There can be a cloud gateway deployed
    on the cloud itself, which is capable of capturing and accepting data from multiple
    sources and ingesting it for IoT Hub. As discussed previously, we need to ingest
    the data that we capture. In the next section, you will learn about ingestion
    with IoT Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Ingestion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An IoT hub can be a single point of contact for devices and other applications.
    In other words, the ingestion of IoT messages is the responsibility of the IoT
    Hub service. There are other services, such as Event Hubs and the Service Bus
    messaging infrastructure, that can ingest incoming messages; however, the benefits
    and advantages of using IoT Hub to ingest IoT data far outweigh those of using
    Event Hubs and Service Bus messaging. In fact, IoT Hub was made specifically for
    the purpose of ingesting IoT messages within the Azure ecosystem so that other
    services and components can act on them. The ingested data is stored to storage.
    Before we do any kind of transformation or analytics, let's explore the role of
    storage in the workflow in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Storage
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Azure provides multiple ways of storing messages from IoT devices. These include
    storing relational data, schema-less NoSQL data, and blobs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SQL Database**: SQL Database provides storage for relational data, JSON,
    and XML documents. It provides a rich SQL-query language and it uses a full-blown
    SQL server as a service. Data from devices can be stored in SQL databases if it
    is well defined and the schema will not need to undergo changes frequently.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Storage**: Azure Storage provides Table and Blob storage. Table storage
    helps in storing data as entities, where the schema is not important. Blobs help
    in storing files in containers as blobs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cosmos DB**: Cosmos DB is a full-blown enterprise-scale NoSQL database. It
    is available as a service that is capable of storing schema-less data. It is a
    globally distributed database that can span continents, providing high availability
    and scalability of data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**External data sources**: Apart from Azure services, customers can bring or
    use their own data stores, such as a SQL server on Azure virtual machines, and
    can use them to store data in a relational format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next section is on transformation and analytics.
  prefs: []
  type: TYPE_NORMAL
- en: Transformation and analytics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Azure provides multiple resources to execute jobs and activities on ingested
    data. Some of them are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data Factory**: Azure Data Factory is a cloud-based data integration service
    that allows us to create data-driven workflows in the cloud for orchestrating
    and automating data movement and data transformation. Azure Data Factory helps
    to create and schedule data-driven workflows (called pipelines) that can ingest
    data from disparate data stores; process and transform data by using compute services
    such as **Azure HDInsight**, **Hadoop, Spark**, **Azure Data Lake Analytics**,
    **Azure Synapse Analytics**, and **Azure Machine Learning**; and publish output
    data to a data warehouse for **Business Intelligence** (**BI**) applications rather
    than a traditional **Extract-Transform-Load** (**ETL**) platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Databricks**: Databricks provides a complete, managed, end-to-end Spark
    environment. It can help in the transformation of data using Scala and Python.
    It also provides a SQL library to manipulate data using traditional SQL syntax.
    It is more performant than Hadoop environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure HDInsight**: Microsoft and Hortonworks have come together to help companies
    by offering a big data analytics platform with Azure. HDInsight is a high-powered,
    fully managed cloud service environment powered by Apache Hadoop and Apache Spark
    using Microsoft Azure HDInsight. It helps in accelerating workloads seamlessly
    using Microsoft and Hortonworks'' industry-leading big data cloud service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Stream Analytics**: This is a fully managed, real-time, data analytics
    service that helps in performing computation and transformation on streaming data.
    Stream Analytics can examine high volumes of data flowing from devices or processes,
    extract information from the data stream, and look for patterns, trends, and relationships.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Machine Learning**: Machine learning is a data science technique that allows
    computers to use existing data to forecast future behaviors, outcomes, and trends.
    Using machine learning, computers learn behaviors based on the model we create.
    Azure Machine Learning is a cloud-based predictive analytics service that makes
    it possible to quickly create and deploy predictive models as analytics solutions.
    It provides a ready-to-use library of algorithms to create models on an internet-connected
    PC and deploy predictive solutions quickly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Synapse Analytics**: Formerly known as Azure Data Warehouse. Azure
    Synapse Analytics provides analytics services that are ideal for enterprise data
    warehousing and big data analytics. It supports direct streaming ingestion, which
    can be integrated with Azure IoT Hub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that you are familiar with the transformation and analytics tools used in
    Azure for the data ingested by IoT devices, let's go ahead and learn about how
    this data can be presented.
  prefs: []
  type: TYPE_NORMAL
- en: Presentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After appropriate analytics have been conducted on data, the data should be
    presented to stakeholders in a format that is consumable by them. There are numerous
    ways in which insights from data can be presented. These include presenting data
    through web applications that are deployed using Azure App Service, sending data
    to notification hubs that can then notify mobile applications, and more. However,
    the ideal approach for presenting and consuming insights is using **Power BI** reports
    and dashboards. Power BI is a Microsoft visualization tool that is used to render
    dynamic reports and dashboards on the internet.
  prefs: []
  type: TYPE_NORMAL
- en: To conclude, Azure IoT is closely aligned with the basic concepts of IoT architecture.
    It follows the same process; however, Azure gives us the freedom to choose different
    services and dependencies based on our requirements. In the next section, we will
    focus on Azure IoT Hub, a service hosted in the cloud and completely managed by
    Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Azure IoT Hub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IoT projects are generally complex in nature. The complexity arises because
    of the high volume of devices and data. Devices are embedded across the world,
    for example, monitoring and auditing devices that are used to store data, transform
    and analyze petabytes of data, and finally take actions based on insights. Moreover,
    these projects have long gestation periods, and their requirements keep changing
    because of timelines.
  prefs: []
  type: TYPE_NORMAL
- en: If an enterprise wants to embark on a journey with an IoT project sooner rather
    than later, then it will quickly realize that the problems we have mentioned are
    not easily solved. These projects require enough hardware in terms of computing
    and storage to cope, and services that can work with high volumes of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'IoT Hub is a platform that is built to enable the faster, better, and easier
    delivery of IoT projects. It provides all the necessary features and services,
    including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Device registration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Device connectivity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Field gateways
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud gateways
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementation of industry protocols, such as AMQP and the MQTT protocol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A hub for storing incoming messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The routing of messages based on message properties and content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple endpoints for different types of processing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connectivity to other services on Azure for real-time analytics and more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have covered an overview of Azure IoT Hub, so let's take a deep dive to understand
    more about the protocols and how the devices are registered with Azure IoT Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Protocols
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Azure IoT Hub natively supports communication over the MQTT, AMQP, and HTTP
    protocols. In some cases, devices or field gateways might not be able to use one
    of these standard protocols and will require protocol adaptation. In such cases,
    custom gateways can be deployed. The Azure IoT protocol gateway can enable protocol
    adaptation for IoT Hub endpoints by bridging the traffic to and from IoT Hub.
    In the next section, we will discuss how devices are registered with Azure IoT
    Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Device registration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Devices should be registered before they can send messages to IoT Hub. The registration
    of devices can be done manually using the Azure portal or it can be automated
    using the IoT Hub SDK. Azure also provides sample simulation applications, through
    which it becomes easy to register virtual devices for development and testing
    purposes. There is also a Raspberry Pi online simulator that can be used as a
    virtual device, and then, obviously, there are other physical devices that can
    be configured to connect to IoT Hub.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to simulate a device from a local PC that is generally used for
    development and testing purposes, then there are tutorials available in the Azure
    documentation in multiple languages. These are available at [https://docs.microsoft.com/azure/iot-hub/iot-hub-get-started-simulated](https://docs.microsoft.com/azure/iot-hub/iot-hub-get-started-simulated).
  prefs: []
  type: TYPE_NORMAL
- en: The Raspberry Pi online simulator is available at [https://docs.microsoft.com/azure/iot-hub/iot-hub-raspberry-pi-web-simulator-get-started](https://docs.microsoft.com/azure/iot-hub/iot-hub-raspberry-pi-web-simulator-get-started),
    and for physical devices that need to be registered with IoT Hub, the steps given
    at [https://docs.microsoft.com/azure/iot-hub/iot-hub-get-started-physical](https://docs.microsoft.com/azure/iot-hub/iot-hub-get-started-physical)
    should be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'To manually add a device using the Azure portal, IoT Hub provides the **IoT
    devices** menu, which can be used to configure a new device. Selecting the **New**
    option will let you create a new device as shown in *Figure 17.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Moving to the IoT devices blade from the left-hand navigation and then, adding
    the device details in the Create a device pane.](img/B15432_17_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.4: Adding a device via the Azure portal'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'After the device identity is created, a primary key connection string for IoT
    Hub should be used in each device to connect to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the connection strings to the device created in the previous stepand
    providing details such as Device ID, Primary key, Secondary key, and so on.](img/B15432_17_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.5: Creating connecting strings for each device'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: At this stage, the device has been registered with IoT Hub, and our next mission
    is to make communication happen between the device and IoT Hub. The next section
    will give you a good understanding of how message management is done.
  prefs: []
  type: TYPE_NORMAL
- en: Message management
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After devices are registered with IoT Hub, they can start interacting with it.
    Message management refers to how the communication or interaction between the
    IoT device and IoT Hub is done. This interaction could be from the device to the
    cloud, or from the cloud to the device.
  prefs: []
  type: TYPE_NORMAL
- en: '**Device-to-cloud messaging**'
  prefs: []
  type: TYPE_NORMAL
- en: One of the best practices that must be followed in this communication is that
    although the device might be capturing a lot of information, only data that is
    of any importance should be transmitted to the cloud. The size of the message
    is very important in IoT solutions since IoT solutions generally have very high
    volumes of data. Even 1 KB of extra data flowing in can result in a GB of storage
    and processing wasted. Each message has properties and payloads; properties define
    the metadata for the message. This metadata contains data about the device, identification,
    tags, and other properties that are helpful in routing and identifying messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Devices or cloud gateways should connect to IoT Hub to transfer data. IoT Hub
    provides public endpoints that can be utilized by devices to connect and send
    data. IoT Hub should be considered as the first point of contact for back-end
    processing. IoT Hub is capable of further transmission and routing of these messages
    to multiple services. By default, the messages are stored in event hubs. Multiple
    event hubs can be created for different kinds of messages. The built-in endpoints
    used by the devices to send and receive data can be seen in the **Built-in endpoints**
    blade in IoT Hub. *Figure 17.6* shows how you can find the built-in endpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Choosing the Built-in endpoints blade from the left-hand navigationin the
    IoT Hub and checking the Built-in Endpoints.](img/B15432_17_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.6: Creating multiple event hubs'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Messages can be routed to different endpoints based on the message header and
    body properties, as shown in *Figure 17.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding details in the ‘Add a route’ pane,for adding a new route to different
    endpoints.](img/B15432_17_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.7: Adding a new route to different endpoints'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Messages in an IoT hub stay there for seven days by default, and their size
    can go up to 256 KB.
  prefs: []
  type: TYPE_NORMAL
- en: There is a sample simulator provided by Microsoft for simulating sending messages
    to the cloud. It is available in multiple languages; the C# version can be viewed
    at [https://docs.microsoft.com/azure/iot-hub/iot-hub-csharp-csharp-c2d](https://docs.microsoft.com/azure/iot-hub/iot-hub-csharp-csharp-c2d).
  prefs: []
  type: TYPE_NORMAL
- en: '**Cloud-to-device messaging**'
  prefs: []
  type: TYPE_NORMAL
- en: IoT Hub is a managed service providing a bi-directional messaging infrastructure.
    Messages can be sent from the cloud to devices, and then based on the message,
    the devices can act on them.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three types of cloud-to-device messaging patterns:'
  prefs: []
  type: TYPE_NORMAL
- en: Direct methods require immediate confirmation of results. Direct methods are
    often used for the interactive control of devices, such as opening and closing
    garage shutters. They follow the request-response pattern.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up device properties using Azure IoT provides **device twin** properties.
    For example, you can set the telemetry-sending interval to 30 minutes. Device
    twins are JSON documents that store device state information (such as metadata,
    configurations, and conditions). An IoT hub persists a device twin for each device
    in the IoT hub.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud-to-device messages are used for one-way notifications to the device app.
    This follows the fire-and-forget pattern.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In every organization, security is a big concern, and even in the case of IoT
    devices and data, this concern is still there. We will be discussing security
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Security is an important aspect of IoT-based applications. IoT-based applications
    comprise devices that use the public internet for connectivity to back-end applications.
    Securing devices, back-end applications, and connectivity from malicious users
    and hackers should be considered a top priority for the success of these applications.
  prefs: []
  type: TYPE_NORMAL
- en: '**Security in IoT**'
  prefs: []
  type: TYPE_NORMAL
- en: 'IoT applications are primarily built around the internet, and security should
    play a major role in ensuring that a solution is not compromised. Some of the
    most important security decisions affecting IoT architecture are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: Regarding devices using HTTP versus HTTPS REST endpoints, REST endpoints secured
    by certificates ensure that messages transferred from a device to the cloud and
    vice versa are well encrypted and signed. The messages should make no sense to
    an intruder and should be extremely difficult to crack.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If devices are connected to a local gateway, the local gateway should connect
    to the cloud using a secure HTTP protocol.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Devices should be registered to IoT Hub before they can send any messages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The information passed to the cloud should be persisted into storage that is
    well protected and secure. Appropriate SAS tokens or connection strings that are
    stored in Azure Key Vault should be used for connection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Key Vault should be used to store all secrets, passwords, and credentials,
    including certificates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Security Center for IoT provides threat prevention and analysis for every
    device, IoT Edge, and IoT Hub across your IoT assets. We can build our own dashboards
    in Azure Security Center based on the security assessments. Some key features
    include central management from Azure Security Center, adaptive threat protection,
    and intelligent threat detection. It's a best practice to consider Azure Security
    Center while implementing secured IoT solutions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we are going to look at the scalability aspect of IoT Hub.
  prefs: []
  type: TYPE_NORMAL
- en: Scalability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Scalability for IoT Hub is a bit different than for other services. In IoT
    Hub, there are two types of messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Incoming**: Device-to-cloud messages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Outgoing**: Cloud-to-device messages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both need to be accounted for in terms of scalability.
  prefs: []
  type: TYPE_NORMAL
- en: IoT Hub provides a couple of configuration options during provision time to
    configure scalability. These options are also available post-provisioning and
    can be updated to better suit the solution requirements in terms of scalability.
  prefs: []
  type: TYPE_NORMAL
- en: 'The scalability options that are available for IoT Hub are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Stock Keeping Unit** (**SKU**) edition, which is the size of IoT Hub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of units
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will first look into the SKU edition option.
  prefs: []
  type: TYPE_NORMAL
- en: '**The SKU edition**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The SKU in IoT Hub determines the number of messages a hub can handle per unit
    per day, and this includes both incoming and outgoing messages. There are four
    tiers, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Free**: This allows 8,000 messages per unit per day and allows both incoming
    and outgoing messages. A maximum of 1 unit can be provisioned. This edition is
    suitable for gaining familiarity and testing out the capabilities of the IoT Hub
    service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard (S1)**: This allows 400,000 messages per unit per day and allows
    both incoming and outgoing messages. A maximum of 200 units can be provisioned.
    This edition is suitable for a small number of messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard (S2)**: This allows 6 million messages per unit per day and allows
    both incoming and outgoing messages. A maximum of 200 units can be provisioned.
    This edition is suitable for a large number of messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Standard (S3)**: This allows 300 million messages per unit per day and allows
    both incoming and outgoing messages. A maximum of 10 units can be provisioned.
    This edition is suitable for a very large number of messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The upgrade and scaling options are available in the Azure portal, under the
    **Pricing and scale** blade of IoT Hub. The options will be presented to you as
    shown in *Figure 17.8*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Pricing and scale blade of IoT Hub displaying various options to choose
    the pricing and scale tier, such as S1 Standard, S2 Standard, S3 Standard, B1
    Basic, B2 Basic, B3 Basic, and so on.](img/B15432_17_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.8: Choosing a pricing and scale tier'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You may notice that the **Standard S3** tier allows a maximum of only **10 units**,
    compared to other standard units that allow **200 units**. This is directly related
    to the size of the compute resources that are provisioned to run IoT services.
    The size and capability of virtual machines for **Standard S3** are significantly
    higher compared to other tiers, where the size remains the same.
  prefs: []
  type: TYPE_NORMAL
- en: '**Units**'
  prefs: []
  type: TYPE_NORMAL
- en: Units define the number of instances of each SKU running behind the service.
    For example, 2 units of the **Standard S1** SKU tier will mean that the IoT hub
    is capable of handling *400K * 2 = 800K* messages per day.
  prefs: []
  type: TYPE_NORMAL
- en: 'More units will increase the scalability of the application. *Figure 17.9*
    is from the **Pricing and scale** blade of IoT Hub, where you can see the current
    pricing tier and number of units:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Pricing and scale tier displayed as S1 Standard, and the Number of IoT
    Hub units selected as one.](img/B15432_17_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.9: Options to adjust or migrate IoT Hub units'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: One of the booming services in Azure IoT Hub right now is Azure IoT Edge, which
    is a completely managed service built on Azure IoT Hub. We will be exploring what
    Azure IoT Edge is in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Azure IoT Edge
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Microsoft Azure IoT Edge leverages edge compute to implement IoT solutions.
    Edge compute refers to the compute resources that are available on your on-premises
    network, right at the end of your network, where the public internet starts. This
    can be deployed on your main network or a guest network with firewall isolation.
  prefs: []
  type: TYPE_NORMAL
- en: Azure IoT Edge comprises the IoT Edge runtime, which needs to be installed on
    a computer or a device. Docker will be installed on the computer; the computer
    can run either Windows or Linux. The role of Docker is to run the IoT Edge modules.
  prefs: []
  type: TYPE_NORMAL
- en: Azure IoT Edge relies on the hybrid cloud concept, where you can deploy and
    manage IoT solutions on on-premises hardware and easily integrate them with Microsoft
    Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft provides comprehensive documentation for Azure IoT Edge, with quick-start
    templates and guidance on how to install the modules. The link to the documentation
    is [https://docs.microsoft.com/azure/iot-edge](https://docs.microsoft.com/azure/iot-edge).
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at how infrastructure is managed in the case
    of Azure IoT Hub and how high availability is provided to customers.
  prefs: []
  type: TYPE_NORMAL
- en: High availability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IoT Hub is a **platform as a service** (**PaaS**) offering from Azure. Customers
    and users do not directly interact with the underlying number and size of virtual
    machines on which the IoT Hub service runs. Users decide on the region, the SKU
    of the IoT hub, and the number of units for their application. The rest of the
    configuration is determined and executed by Azure behind the scenes. Azure ensures
    that every PaaS service is highly available by default. It does so by ensuring
    that multiple virtual machines provisioned behind the service are on separate
    racks in the datacenter. It does this by placing those virtual machines on an
    availability set and on a separate fault and update domain. This helps ensure
    high availability for both planned and unplanned maintenance. Availability sets
    take care of high availability at the datacenter level.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will discuss Azure IoT Central.
  prefs: []
  type: TYPE_NORMAL
- en: Azure IoT Central
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Azure IoT Central provides a platform to build enterprise-grade IoT applications
    to meet your business requirements in a secure, reliable, and scalable fashion.
    IoT Central eliminates the cost of developing, maintaining, and managing IoT solutions.
  prefs: []
  type: TYPE_NORMAL
- en: 'IoT Central provides centralized management by which you can manage and monitor
    devices, device conditions, rule creation, and device data. In *Figure 17.10*,
    you can see some of the templates that are available in the Azure portal during
    the creation of IoT Central applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The available templates displayed in the Azure portal during the creation
    of IoT Central applicationssuch as Custom application, Connected Logistics, Solar
    Power Monitoring, and so on.](img/B15432_17_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.10 Creating an Azure IoT Central application
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Templates will give you a head start and you can customize them as per your
    requirements. This will save you a lot of time during the development phase.
  prefs: []
  type: TYPE_NORMAL
- en: 'IoT Central offers a seven-day trial at the time of writing, and you can see
    the pricing for this service here: [https://azure.microsoft.com/pricing/details/iot-central/?rtc=1](https://azure.microsoft.com/pricing/details/iot-central/?rtc=1).'
  prefs: []
  type: TYPE_NORMAL
- en: Azure IoT Central is a boon for every organization that is developing IoT applications.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IoT is one of the biggest emerging technologies of this decade and it is already
    disrupting industries. Things that sounded impossible before are now suddenly
    possible.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we explored IoT Hub and discussed the delivery of IoT solutions
    to the customer in a faster, better, and cheaper way than alternative solutions.
    We also covered how IoT can fast-track the entire development life cycle and help
    expedite time-to-market for companies. Finally, you learned about Azure IoT Edge
    and Azure IoT Central.
  prefs: []
  type: TYPE_NORMAL
- en: To help you effectively analyze ever-growing volumes of data, we will discuss
    Azure Synapse Analytics in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 17\. Designing IoT solutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
