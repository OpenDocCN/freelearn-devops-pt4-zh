- en: 19\. Architecting intelligent solutions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 19. 架构智能解决方案
- en: 'Cloud technology has changed a lot of things, including the creation of intelligent
    applications in an agile, scalable, and pay-as-you-go way. Applications prior
    to the rise of cloud technology generally did not incorporate intelligence within
    themselves, primarily because:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 云技术改变了许多事情，包括以灵活、可扩展、按需付费的方式创建智能应用程序。云技术兴起之前的应用程序通常没有内嵌智能，主要是因为：
- en: It was time-consuming and error-prone.
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它既耗时又容易出错。
- en: It was difficult to write, test, and experiment with algorithms on an ongoing
    basis.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续编写、测试和实验算法是困难的。
- en: There was a lack of sufficient data.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺乏足够的数据。
- en: It was immensely costly.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这非常昂贵。
- en: Over the last decade, two things have changed that have led to the creation
    of significantly more intelligent applications than in the past. These two things
    are the cost-effective, on-demand unlimited scalability of the cloud along with
    the availability of data in terms of volume, variety, and velocity.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的十年里，有两件事发生了变化，导致了比以往更加智能的应用程序的诞生。这两件事是云计算的按需无限可扩展性以及数据在体积、种类和速度上的可用性。
- en: 'In this chapter, we will look at architectures that can help build intelligent
    applications with Azure. Some of the topics covered in this chapter are:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨能够帮助在Azure上构建智能应用程序的架构。本章涵盖的一些主题包括：
- en: The evolution of AI
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AI的演变
- en: Azure AI processes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure AI流程
- en: Azure Cognitive Services
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure认知服务
- en: Building an optical character recognition service
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建光学字符识别服务
- en: Building a visual features service using the Cognitive Search .NET SDK
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Cognitive Search .NET SDK构建视觉特征服务
- en: The evolution of AI
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AI的演变
- en: 'AI is not a new field of knowledge. In fact, the technology is a result of
    decades of innovation and research. However, its implementation in previous decades
    was a challenge for the following reasons:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: AI并不是一个新兴的知识领域。实际上，这项技术是几十年的创新和研究的结果。然而，过去几十年的实施面临以下挑战：
- en: '**Cost**: AI experiments were costly in nature and there was no cloud technology.
    All the infrastructure was either purchased or hired from a third party. Experiments
    were also time-consuming to set up and immense skills were needed to get started.
    A large amount of storage and compute power was also required, which was generally
    missing in the community at large and held in the hands of just a few.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**成本**：AI实验本质上非常昂贵，而且当时没有云技术。所有基础设施要么是购买的，要么是从第三方租赁的。实验的设置也非常耗时，并且需要大量技能才能入门。大量的存储和计算能力也被要求，而这些在整个社区中通常缺乏，只掌握在少数几个人手中。'
- en: '**Lack of data**: There were hardly any smart handheld devices and sensors
    available generating data. Data was limited in nature and had to be procured,
    which again made AI applications costly. Data was also less reliable and there
    was a general lack of confidence in the data itself.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数据不足**：几乎没有智能手持设备和传感器生成数据。数据本质上是有限的，并且需要采购，这再次使得AI应用程序成本高昂。数据的可靠性也较差，普遍缺乏对数据本身的信任。'
- en: '**Difficulty**: AI algorithms were not documented enough and were primarily
    in the realms of mathematicians and statisticians. They were difficult to create
    and utilize within applications. Just imagine the creation of an **optical character
    recognition** (**OCR**) system 15 years ago. There were hardly any libraries,
    data, processing power, or the necessary skills to develop applications using
    OCR.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**难度**：AI算法的文档化程度不足，主要存在于数学家和统计学家的领域。它们难以创建并在应用程序中使用。试想15年前创建一个**光学字符识别**（**OCR**）系统，当时几乎没有任何库、数据、处理能力或开发OCR应用程序所需的技能。'
- en: Although the influx of data increased with time, there was still a lack of tools
    for making sense of the data in a way that added business value. In addition,
    good AI models are based on sufficiently accurate data and trained with algorithms
    to be capable of resolving real-life problems. Both cloud technology and the large
    number of sensors and handheld devices have redefined this landscape.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管随着时间的推移数据的流入不断增加，但仍缺乏能够以有助于商业价值的方式理解数据的工具。此外，优秀的AI模型基于足够准确的数据，并通过算法进行训练，以便解决现实生活中的问题。云技术以及大量的传感器和手持设备重新定义了这一格局。
- en: With cloud technology, it is possible to provision on-demand storage and compute
    resources for AI-based applications. Cloud infrastructure provides lots of resources
    for data migration, storage, processing, and computation, as well as generating
    insights and eventually providing reports and dashboards. It does all this at
    a minimal cost in a faster way since there is nothing physical involved. Let's
    dive into understanding what goes on behind building an AI-based application.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 借助云技术，能够为基于AI的应用程序提供按需存储和计算资源。云基础设施提供大量的数据迁移、存储、处理和计算资源，同时生成洞察，并最终提供报告和仪表盘。所有这些都以最低的成本和更快的速度完成，因为没有涉及任何物理设备。让我们深入了解构建基于AI的应用程序背后的过程。
- en: Azure AI processes
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure AI 处理
- en: 'Every AI-based project is required to go through a certain set of steps before
    being operational. Let''s explore these seven phases:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 每个基于AI的项目都需要经过一定的步骤，才能投入使用。让我们来了解这七个阶段：
- en: Data ingestion
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据摄取
- en: In this phase, data is captured from various sources and stored such that it
    can be consumed in the next phase. The data is cleaned before being stored and
    any deviations from the norm are disregarded. This is part of the preparation
    of data. The data could have different velocity, variety, and volume. It can be
    structured similarly to relational databases, semi-structured like JSON documents,
    or unstructured like images, Word documents, and so on.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，数据从多个来源采集并存储，以便在下一阶段使用。数据在存储之前会进行清洗，并且任何偏离常规的数据都会被忽略。这是数据准备的一部分。数据可以具有不同的速度、种类和规模。它可以像关系型数据库一样是结构化的，像JSON文档一样是半结构化的，或像图片、Word文档等一样是非结构化的。
- en: Data transformation
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据转化
- en: The data ingested is transformed into another format as it might not be consumable
    in its current format. The data transformation typically includes the cleaning
    and filtering of data, removing bias from the data, augmenting data by joining
    it with other datasets, creating additional data from existing data, and more.
    This is also part of the preparation of the data.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 所摄取的数据会被转化成另一种格式，因为它可能无法以当前格式使用。数据转化通常包括清洗和过滤数据，去除数据偏差，通过与其他数据集结合来增强数据，基于现有数据创建额外数据等。这也是数据准备的一部分。
- en: Analysis
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分析
- en: The data from the last phase is reused for analysis. The analysis phase contains
    activities related to finding patterns within data, conducting exploratory data
    analysis, and generating further insights from it. These insights are then stored
    along with existing data for consumption in the next phase. This is part of the
    model packaging process.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一阶段的数据会被重新用于分析。分析阶段包括在数据中寻找模式、进行探索性数据分析，并从中生成进一步的洞察。这些洞察与现有数据一起存储，以便在下一阶段使用。这是模型包装过程的一部分。
- en: Data modeling
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据建模
- en: Once the data is augmented and cleaned, appropriate and necessary data is made
    available to the AI algorithms to generate a model that is conducive to achieving
    the overall aim. It is an iterative process known as experimentation by using
    various combinations of data (feature engineering) to ensure that the data model
    is robust. This is also part of the model packaging process.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦数据被增强和清洗，适当且必要的数据会提供给AI算法，以生成有助于实现整体目标的模型。这是一个迭代过程，称为通过使用不同数据组合（特征工程）进行实验，以确保数据模型的健壮性。这也是模型包装过程的一部分。
- en: The data is fed into learning algorithms to identify patterns. This process
    is known as training the model. Later, test data is used on the model to check
    its effectiveness and efficiency.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 数据被输入到学习算法中，以识别模式。这个过程称为训练模型。随后，使用测试数据验证模型的有效性和效率。
- en: Validating the model
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证模型
- en: Once the model is created, a set of test data is used to find its effectiveness.
    If the analysis obtained from the test data is reflective of reality, then the
    model is sound and usable. Testing is an important aspect of the AI process.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦模型创建完成，就会使用一组测试数据来检验其有效性。如果从测试数据中得到的分析结果反映了现实情况，那么该模型是健全且可用的。测试是AI过程中的一个重要环节。
- en: Deployment
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署
- en: The model is deployed to production so that real-time data can be fed into it
    to get the predicted output. This output can then be used within applications.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 模型被部署到生产环境，以便实时数据能够输入模型并获得预测输出。然后，这些输出可以在应用程序中使用。
- en: Monitoring
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 监控
- en: The model deployed to production is monitored on an ongoing basis for the future
    analysis of all incoming data and to retrain and improve the effectiveness models.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 部署到生产环境中的模型会持续进行监控，用于对所有进入的数据进行未来分析，并重新训练和提升模型的效果。
- en: The AI stages and processes, by nature, are time-consuming and iterative. Thus,
    applications based on them have an inherent risk of being long-running, experimental,
    and resource-intensive, along with getting delayed with cost overruns and having
    low chances of success.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: AI的各个阶段和过程本质上是耗时且迭代的。因此，基于它们的应用程序具有固有的风险，可能会长时间运行、处于实验阶段、资源密集，并且可能出现成本超支和延期，成功的几率较低。
- en: 'Keeping these things in mind, there should be out-of-the-box AI-based solutions
    that developers can use in their applications to make them intelligent. These
    AI solutions should be easily consumable from applications and should have the
    following features:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 记住这些要点后，应该有现成的基于AI的解决方案，供开发人员在其应用程序中使用，使它们变得更加智能。这些AI解决方案应该易于从应用程序中消费，并具备以下特性：
- en: '**Cross-platform**: Developers using any platform should be able to consume
    these services. They should be deployed and consumed on Linux, Windows, or Mac
    without any compatibility problems.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨平台**：使用任何平台的开发者都应该能够消费这些服务。它们应该能够在Linux、Windows或Mac平台上进行部署和使用，而不会出现兼容性问题。'
- en: '**Cross-language**: Developers should be able to use any language to consume
    these solutions. Not only will the developers encounter a shorter learning curve
    but they also won''t need to change their preferred choice of language to consume
    these solutions.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨语言**：开发者应该能够使用任何语言来消费这些解决方案。这样，开发者不仅能遇到较短的学习曲线，而且也不需要更改自己偏好的编程语言来使用这些解决方案。'
- en: These solutions should be deployed as services using industry standards and
    protocols. Generally, these services are available as HTTP REST endpoints that
    can be invoked using any programming language and platform.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这些解决方案应该作为服务进行部署，使用行业标准和协议。通常，这些服务作为HTTP REST端点提供，可以使用任何编程语言和平台进行调用。
- en: 'There are many such types of service that can be modeled and deployed for developer
    consumption. Some examples include:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多此类服务可以被建模并部署以供开发者使用。以下是一些示例：
- en: '**Language translation**: In such services, the user provides text in one language
    and gets corresponding text in a different language as output.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语言翻译**：在此类服务中，用户提供一种语言的文本，并获得该文本对应的另一种语言的输出。'
- en: '**Character recognition**: These services accept images and return the text
    present in them.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字符识别**：这些服务接受图像并返回其中的文本内容。'
- en: '**Speech-to-text conversion**: These services can convert input speech to text.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语音转文本转换**：这些服务可以将输入的语音转换为文本。'
- en: Now that we have gone through the details of building an AI/ML-based project,
    let's dive into the applications of various cognitive services offered by Azure.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经详细了解了构建基于AI/ML的项目，让我们深入探讨一下Azure提供的各种认知服务的应用。
- en: Azure Cognitive Services
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure认知服务
- en: Azure provides an umbrella service known as Azure Cognitive Services. Azure
    Cognitive Services is a set of services that developers can consume within their
    applications to turn them into intelligent applications.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Azure提供了一个名为Azure认知服务的总服务。Azure认知服务是一组服务，开发者可以在他们的应用程序中使用这些服务，将应用程序转变为智能应用程序。
- en: '![Set of Azure Cognitive Services](img/Table_19.1.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![Azure认知服务集](img/Table_19.1.jpg)'
- en: 'Table 19.1: Azure Cognitive Services'
  id: totrans-50
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 表19.1：Azure认知服务
- en: 'The services have been divided into five main categories depending on their
    nature. These five categories are as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 根据服务的性质，这些服务已被分为五大类。这五大类如下：
- en: Vision
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 视觉
- en: This API provides algorithms for image classification and helps in image processing
    by providing meaningful information. Computer vision can provide a variety of
    information from images on different objects, people, characters, emotions, and
    more.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个API提供了图像分类的算法，并通过提供有意义的信息来帮助图像处理。计算机视觉可以从图像中提供关于不同物体、人物、字符、情感等的多种信息。
- en: Search
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 搜索
- en: These APIs help in search-related applications. They help with search based
    on text, images, video, and providing custom search options.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这些API有助于与搜索相关的应用程序。它们可以基于文本、图像、视频进行搜索，并提供自定义搜索选项。
- en: Language
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 语言
- en: These APIs are based on natural language processing and help extract information
    about the intent of user-submitted text along with entity detection. They also
    help in text analytics and translation to different languages.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 API 基于自然语言处理，帮助提取用户提交文本的意图信息及实体检测。它们还帮助进行文本分析和翻译成不同语言。
- en: Speech
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 语音
- en: These APIs help in translating speech to text, text to speech, and in speech
    translation. They can be used to ingest audio files and take actions based on
    the content on behalf of users. Cortana is an example that uses similar services
    to take actions for users based on speech.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 API 有助于将语音转换为文本、将文本转换为语音以及语音翻译。它们可以用于接收音频文件并基于内容为用户执行操作。Cortana 是一个使用类似服务，根据语音为用户执行操作的例子。
- en: Decision
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 决策
- en: These APIs help in anomaly detection and content moderation. They can check
    for content within images, videos, and text and find out patterns that should
    be highlighted. An example of such an application is displaying a warning about
    adult content.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 API 有助于异常检测和内容审核。它们可以检查图像、视频和文本中的内容，并找出需要突出显示的模式。此类应用的一个例子是显示有关成人内容的警告。
- en: Now that you have an understanding of the core of Cognitive Services, let's
    discuss how they work in detail.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经理解了认知服务的核心内容，接下来我们将详细讨论它们的工作原理。
- en: Understanding Cognitive Services
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解认知服务
- en: Azure Cognitive Services consists of HTTP endpoints that accept requests and
    send responses back to the caller. Almost all requests are HTTP POST requests
    and consist of both a header and a body.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 认知服务由接受请求并将响应发送回调用者的 HTTP 端点组成。几乎所有的请求都是 HTTP POST 请求，包含请求头和请求体。
- en: The provisioning of Cognitive Services generates two important artifacts that
    help a caller invoke an endpoint successfully. It generates an endpoint URL and
    a unique key.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 认知服务的配置会生成两个重要的产物，帮助调用者成功调用端点。它生成一个端点 URL 和一个唯一的密钥。
- en: 'The format of the URL is `https://{azure location}.api.cognitive.microsoft.com/{cognitive
    type}/{version}/{sub type of service}?{query parameters}`. An example URL is:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: URL 的格式是 `https://{azure location}.api.cognitive.microsoft.com/{cognitive type}/{version}/{sub
    type of service}?{query parameters}`。一个示例 URL 如下：
- en: '`https://eastus.api.cognitive.microsoft.com/vision/v2.0/ocr?language=en&detectOrientation=true`'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`https://eastus.api.cognitive.microsoft.com/vision/v2.0/ocr?language=en&detectOrientation=true`'
- en: Cognitive Service is provisioned in the East US Azure region. The type of service
    is computer vision using version 2 and the subtype is OCR. There are generally
    a few subtypes for each top-level category. Lastly, there are a few query string
    parameters, such as `language` and `detectOrientation`. These query parameters
    are different for each service category and subcategory.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 认知服务在美国东部 Azure 区域配置。服务类型为计算机视觉，使用版本 2，子类型为 OCR。每个顶级类别通常有几个子类型。最后，还有一些查询字符串参数，如
    `language` 和 `detectOrientation`。这些查询参数对于每个服务类别和子类别都是不同的。
- en: Either the header or the query parameters should provide the key value for the
    endpoint invocation to be successful.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是请求头还是查询参数，都应该提供密钥值，以确保端点调用成功。
- en: The key value should be assigned to the `Ocp-Apim-Subscription-Key` header key
    with the request.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥值应该与请求一起分配给 `Ocp-Apim-Subscription-Key` 请求头。
- en: The content of the request body can be a simple string, a binary, or a combination
    of both. Depending on the value, the appropriate content-type header should be
    set in the request.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 请求体的内容可以是简单字符串、二进制数据或两者的组合。根据值的不同，应该在请求中设置适当的 content-type 头。
- en: 'The possible header values are:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 可能的头部值包括：
- en: '`Application/octet-stream`'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Application/octet-stream`'
- en: '`multipart/form-data`'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`multipart/form-data`'
- en: '`application/json`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application/json`'
- en: Use `octet-stream` when sending binary data and `json` for sending string values.
    `form-data` can be used for sending multiple combination values of binary and
    text.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当发送二进制数据时，请使用 `octet-stream`，发送字符串值时使用 `json`。`form-data` 可用于发送二进制和文本的多种组合值。
- en: The key is a unique string used to validate whether the caller has been given
    permission to invoke the URL. This key must be protected such that others who
    should not be able to invoke the endpoints do not get access to it. Later in the
    chapter, you will see ways to safeguard these keys.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 密钥是一个唯一的字符串，用于验证调用者是否被授权调用 URL。这个密钥必须受到保护，确保不应有权限调用端点的人员无法访问它。稍后你将在本章中看到如何保护这些密钥的方法。
- en: Consuming Cognitive Services
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用认知服务
- en: 'There are two ways to consume Cognitive Services:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方式可以使用认知服务：
- en: '**Using an HTTP endpoint directly**: In this case, the endpoint is invoked
    directly by crafting both the header and body with appropriate values. The return
    value is then parsed and data is extracted out of it. All the AI services in Cognitive
    Services are REST APIs. They accept HTTP requests in JSON, as well as other formats,
    and replies in JSON format.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**直接使用 HTTP 端点**：在这种情况下，直接通过构造适当值的标头和请求体来调用端点。然后解析返回值并提取数据。认知服务中的所有 AI 服务都是
    REST API。它们接受 JSON 格式的 HTTP 请求及其他格式，并以 JSON 格式回复。'
- en: '**Using an SDK**: Azure provides multiple **software development kits** (**SDKs**).
    There are SDKs available for the .NET, Python, Node.js, Java, and Go languages.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 SDK**：Azure 提供了多个**软件开发工具包**（**SDKs**）。.NET、Python、Node.js、Java 和 Go 语言都有可用的
    SDK。'
- en: In the following section, we will look into the utilization of one of the Cognitive
    Services using both ways. Let's explore this by building some AI services using
    HTTP endpoints.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将探讨如何通过两种方式使用认知服务之一。我们将通过构建一些 AI 服务并使用 HTTP 端点来探索这一点。
- en: Building an OCR service
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建 OCR 服务
- en: In this section, we will be using some of the AI services using C# as well as
    PowerShell to show their usage using the HTTP endpoint directly. The next section
    will concentrate on doing the same using a .NET SDK.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 C# 和 PowerShell 展示如何使用 HTTP 端点直接调用一些 AI 服务。下一节将重点介绍使用 .NET SDK 完成相同的操作。
- en: Before getting into building a project using Cognitive Services, the first step
    is to provision the API itself.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建使用认知服务的项目之前，第一步是配置 API 本身。
- en: 'Optical character recognition is available as a Vision API and can be provisioned
    using the Azure portal, as shown next. Create a vision API by navigating to **Cognitive
    Services > Compute Vision > Create**, as shown in *Figure 19.1*:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 光学字符识别作为视觉 API 提供，并可以通过 Azure 门户进行配置，如下所示。通过导航到**认知服务 > 计算视觉 > 创建**来创建视觉 API，如*图
    19.1*所示：
- en: '![Creating a Vision API](img/Figure_19.2.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![创建视觉 API](img/Figure_19.2.jpg)'
- en: 'Figure 19.1: Create a Vision API'
  id: totrans-88
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 19.1：创建视觉 API
- en: 'Once the API is provisioned, the overview page provides all the details for
    consuming the API. It provides the base URL and the key information. Make a note
    of the key as it will be used later:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 API 配置完成，概述页面会提供所有用于使用该 API 的详细信息。它提供基础 URL 和密钥信息。请记下该密钥，后续会用到：
- en: '![Details of the API in the Overview section](img/Figure_19.3.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![概述部分的 API 详细信息](img/Figure_19.3.jpg)'
- en: 'Figure 19.2: Overview page'
  id: totrans-91
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 19.2：概述页面
- en: It also provides an API console to quickly test the API. Clicking on it opens
    a new window that has all the endpoints related to this service available. Clicking
    on `POST` method. The URL points to the endpoint in the East US Azure region.
    It is also related to the Vision group of APIs, version 2, and the OCR endpoint.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 它还提供了一个 API 控制台，方便快速测试 API。点击它会打开一个新窗口，显示所有与该服务相关的端点。点击 `POST` 方法后，URL 会指向位于东美国
    Azure 区域的端点。它还与视觉 API 组版本 2 和 OCR 端点相关。
- en: 'The subscription key is passed in the header with the name `ocp-apim-subscription-key`.
    The header also contains the content-type key with `application/json` as a value.
    This is because the body of the request contains a JSON string. The body is in
    the form of JSON with the URL of the image from which text should be extracted:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 订阅密钥会通过名为`ocp-apim-subscription-key`的标头传递。标头还包含 `application/json` 作为值的 content-type
    密钥。这是因为请求体包含 JSON 字符串。请求体是 JSON 格式，包含需要提取文本的图像 URL：
- en: '![Details of the HTTP request](img/Figure_19.4.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![HTTP 请求的详细信息](img/Figure_19.4.jpg)'
- en: 'Figure 19.3: Request URL'
  id: totrans-95
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 19.3：请求 URL
- en: 'The request can be sent to the endpoint by clicking on the **Send** button.
    It will result in an HTTP response 200 OK, as shown next, if everything goes right.
    If there is an error in the request values, the response will be an error HTTP
    code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过点击**发送**按钮将请求发送到端点。如果一切正常，将返回 HTTP 响应 200 OK，如下所示。如果请求值有错误，响应将是一个错误的 HTTP
    代码：
- en: '![HTTP response 200 OK](img/Figure_19.5.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![HTTP 响应 200 OK](img/Figure_19.5.jpg)'
- en: 'Figure 19.4: HTTP response 200 OK'
  id: totrans-98
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 19.4：HTTP 响应 200 OK
- en: The response consists of details related to billing usage, an internal request
    ID generated by the endpoint, the content length, the response content type (being
    JSON), and the data and time of the response. The content of the response consists
    of a JSON payload with the coordinates of the text and the actual text itself.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 响应包含与计费使用相关的详细信息、由端点生成的内部请求 ID、内容长度、响应内容类型（为 JSON）以及响应的日期和时间。响应的内容是一个 JSON 负载，包含文本的坐标和实际文本。
- en: Using PowerShell
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 PowerShell
- en: The same request can be created using PowerShell. The following PowerShell code
    can be executed using the PowerShell ISE.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的请求可以通过 PowerShell 创建。以下 PowerShell 代码可以通过 PowerShell ISE 执行。
- en: 'The code uses the `Invoke-WebRequest` cmdlet to invoke the Cognitive Services
    endpoint by passing the URL to the `Uri` parameter using the `POST` method, and
    adds both the appropriate headers as discussed in the last section, and finally,
    the body consisting of data in JSON format. The data is converted into JSON using
    the `ConvertTo-Json` cmdlet:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 代码使用 `Invoke-WebRequest` cmdlet 通过 `POST` 方法传递 URL 到 `Uri` 参数来调用认知服务端点，并添加上一节中讨论的适当头信息，最后是包含
    JSON 格式数据的请求体。数据使用 `ConvertTo-Json` cmdlet 转换为 JSON 格式：
- en: '[PRE0]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The response from the cmdlet is saved in a variable that also consists of data
    in JSON format. The data is converted into a PowerShell object using the `Convertfrom-Json`
    cmdlet and looped over to find the words in the text.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 cmdlet 的响应被保存在一个变量中，该变量也包含 JSON 格式的数据。使用 `Convertfrom-Json` cmdlet 将数据转换为
    PowerShell 对象，并循环遍历以查找文本中的单词。
- en: Using C#
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 C#
- en: In this section, we will build a service that should accept requests from users,
    extract the URL of the image, construct the HTTP request, and send it to the Cognitive
    Services endpoint. The Cognitive Services endpoint returns a JSON response. The
    appropriate text content is extracted from the response and returned to the user.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将构建一个服务，该服务应接受用户请求，提取图像的 URL，构建 HTTP 请求并将其发送到认知服务端点。认知服务端点返回一个 JSON 响应。响应中提取适当的文本内容并返回给用户。
- en: '**Architecture and design**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**架构与设计**'
- en: 'An intelligent application is an ASP.NET Core MVC application. An MVC application
    is built by a developer on a developer machine, goes through the continuous integration
    and delivery pipeline, generates a Docker image, and uploads the Docker image
    to Azure Container Registry. Here, the major components of the application are
    explained, along with their usage:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 智能应用程序是一个 ASP.NET Core MVC 应用程序。MVC 应用程序由开发人员在开发机上构建，通过持续集成和交付管道，生成 Docker 镜像，并将
    Docker 镜像上传到 Azure 容器注册表。在这里，解释了应用程序的主要组件及其使用方法：
- en: '![ASP.NET Core MVC application architecture](img/19.6.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![ASP.NET Core MVC 应用程序架构](img/19.6.jpg)'
- en: 'Figure 19.5: Workflow of an intelligent application'
  id: totrans-110
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 19.5：智能应用程序的工作流程
- en: '**Docker**'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**Docker**'
- en: Docker is one of the major players within container technologies and is available
    cross-platform, including Linux, Windows, and Mac. Developing applications and
    services with containerization in mind provides the flexibility to deploy them
    across clouds and locations, as well as on-premises. It also removes any dependencies
    on the host platform, which again allows less reliance on platform as a service.
    Docker helps with the creation of custom images, and containers can be created
    out of these images. The images contain all the dependencies, binaries, and frameworks
    needed to make the application or service work, and they are completely self-reliant.
    This makes them a great deployment target for services such as microservices.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 是容器技术中的重要组成部分，并且支持跨平台，包括 Linux、Windows 和 Mac。以容器化为思路开发应用程序和服务，提供了跨云和不同位置以及本地部署的灵活性。它还消除了对宿主平台的依赖，这样就减少了对平台即服务的依赖。Docker
    有助于创建自定义镜像，容器可以从这些镜像中创建。这些镜像包含使应用程序或服务能够运行的所有依赖项、二进制文件和框架，并且它们是完全自给自足的。这使得它们成为微服务等服务的优秀部署目标。
- en: '**Azure Container Registry**'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**Azure 容器注册表**'
- en: Azure Container Registry is a registry that's similar to Docker Hub for the
    storage of container images in a repository. It is possible to create multiple
    repositories and upload multiple images in them. An image has a name and a version
    number, together forming a fully qualified name used to refer to them in a Kubernetes
    Pod definition. These images can be accessed and downloaded by any Kubernetes
    ecosystem. A prerequisite of this is that appropriate secrets for pulling the
    image should already be created beforehand. It need not be on the same network
    as Kubernetes nodes and, in fact, there is no need for a network to create and
    use Azure Container Registry.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Azure容器注册表是一个类似于Docker Hub的注册表，用于存储容器镜像。可以创建多个存储库并上传多个镜像。每个镜像都有一个名称和版本号，合起来形成一个完整的名称，用于在Kubernetes
    Pod定义中引用它们。这些镜像可以被任何Kubernetes生态系统访问和下载。前提是已经为拉取镜像创建了适当的密钥。容器注册表不需要与Kubernetes节点在同一网络中，实际上，创建和使用Azure容器注册表时无需网络。
- en: '**Azure Kubernetes Service**'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**Azure Kubernetes Service**'
- en: The intelligent application that accepts the URL of an image to retrieve the
    text in it can be hosted on vanilla virtual machines or even within Azure App
    Service. However, deploying in Azure Kubernetes Service offers lots of advantages,
    which was covered in *Chapter 8, Architecting Azure Kubernetes Solutions*. For
    now, it is important to know that these applications are self-healing in nature
    and a minimum number of instances is automatically maintained by the Kubernetes
    master along with providing the flexibility to update them in a multitude of ways,
    including blue-green deployments and canary updates.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 接受图像URL并提取其中文本的智能应用程序可以托管在普通虚拟机上，甚至可以在Azure App Service中运行。然而，在Azure Kubernetes
    Service中部署提供了许多优势，这些内容在*第8章，Azure Kubernetes解决方案架构*中有详细介绍。目前，重要的是要知道，这些应用程序天生具有自愈能力，Kubernetes主节点会自动维护最小数量的实例，并提供多种方式来更新它们，包括蓝绿部署和金丝雀更新。
- en: '**Pods, replica sets, and deployments**'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**Pods、副本集和部署**'
- en: The developer also creates a Kubernetes deployment-related YAML file that references
    the images within the Pod specification and also provides a specification for
    the replica set. It provides its own specification related to the update strategy.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员还创建了一个与Kubernetes部署相关的YAML文件，该文件引用了Pod规范中的镜像，并提供了副本集的规范。它还提供了与更新策略相关的自定义规范。
- en: '**Runtime design**'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**运行时设计**'
- en: 'The architecture and design remain the same as in the previous section; however,
    when the application or service is already live and up and running, it has already
    downloaded the images from Azure Container Registry and created Pods running containers
    in them. When a user provides an image URL for decoding the text it contains,
    the application in the Pod invokes the Azure Cognitive Services Computer Vision
    API and passes the URL to it and waits for a response from the service:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 架构和设计与前一部分相同；然而，当应用程序或服务已经上线并运行时，它已经从Azure容器注册表下载了镜像，并在其中创建了运行容器的Pod。当用户提供一个图像URL以解码其中的文本时，Pod中的应用程序调用Azure
    Cognitive Services计算机视觉API，并将URL传递给它，等待服务响应：
- en: '![ASP.NET Core MVC application architecture using Azure Cognitive Services](img/19.7.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![使用Azure Cognitive Services的ASP.NET Core MVC应用架构](img/19.7.jpg)'
- en: Figure 19.6 Workflow of an intelligent application
  id: totrans-122
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图19.6 智能应用的工作流
- en: Once it receives the JSON response from the services, it can retrieve the information
    and return it to the user.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦收到服务返回的JSON响应，它就可以提取信息并返回给用户。
- en: The development process
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发过程
- en: The development environment can be Windows or Linux. It will work with both
    Windows 10 and the Windows 2016/19 server. When using Windows, it is useful to
    deploy Docker for Windows so that it will create both a Linux and a Windows Docker
    environment.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 开发环境可以是Windows或Linux。它可以在Windows 10和Windows 2016/19服务器上运行。在使用Windows时，部署Docker
    for Windows非常有用，这样它会创建Linux和Windows两种Docker环境。
- en: When creating an ASP.NET Core web application project using Visual Studio 2019,
    the `Dockerfile`. The main difference in `Dockerfile` is the base image names.
    It uses different images for Linux compared to Windows.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Visual Studio 2019创建ASP.NET Core Web应用程序项目时，`Dockerfile`的主要区别是基础镜像名称。它使用不同的镜像来支持Linux和Windows。
- en: When installing Docker for Windows, it also installs a Linux virtual machine,
    and so it is important to turn on the Hyper-V hypervisor.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Docker for Windows时，它还会安装一个Linux虚拟机，因此启用Hyper-V虚拟化程序非常重要。
- en: In this example, instead of sending the data as a JSON string, the image is
    downloaded, and binary data is sent to the Cognitive Services endpoint.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，图像被下载而不是将数据作为 JSON 字符串发送，并且二进制数据被发送到认知服务终结点。
- en: It has a function that accepts a string input for URL values. It then invokes
    Cognitive Services with appropriate header values and a body containing the URL.
    The header values should contain the key provided by Cognitive Services while
    provisioning the service. The value in the body can contain vanilla string values
    in the form of JSON or it can contain binary image data itself. The content-type
    header property should be set accordingly.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有一个接受字符串输入的功能，用于 URL 值。然后，它调用认知服务，并使用适当的头部值和包含 URL 的请求体。头部值应包含认知服务在配置服务时提供的密钥。请求体中的值可以包含以
    JSON 形式表示的普通字符串值，也可以包含二进制图像数据。content-type 头部属性应相应设置。
- en: The code declares the URL and the key related to the Cognitive Services. This
    is shown for demonstration purposes only. The URL and key should be placed in
    configuration files.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 代码声明了与认知服务相关的 URL 和密钥。这里只是为了演示 purposes，URL 和密钥应放在配置文件中。
- en: Using the `HttpClient` object, the image corresponding to the URL supplied by
    the user is downloaded and stored within the `responseMessage` variable. Another
    `HttpClient` object is instantiated and its headers are filled with `Ocp-Apim-Subscription-Key`
    and `content-type keys`. The value of the content-type header is `application/octet-stream`
    since binary data is being passed to the endpoint.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `HttpClient` 对象，下载用户提供的 URL 对应的图像并将其存储在 `responseMessage` 变量中。然后实例化另一个 `HttpClient`
    对象，并用 `Ocp-Apim-Subscription-Key` 和 `content-type` 密钥填充其头部。由于传递的是二进制数据，因此 content-type
    头部的值应设置为 `application/octet-stream`。
- en: A post request is made after extracting the content from the `responseMessage`
    variable and passing it as the body of a request to the cognitive service endpoint.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 提取 `responseMessage` 变量中的内容后，发出一个 POST 请求，并将其作为请求体传递给认知服务终结点。
- en: 'The code for the controller action is shown next:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器操作的代码如下所示：
- en: '[PRE1]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: After the endpoint finishes its processing, it returns the response with a JSON
    payload. The context is extracted and deserialized into .NET objects. Multiple
    loops are coded to extract the text from the response.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在终结点完成处理后，它返回一个带有 JSON 有效负载的响应。上下文被提取并反序列化为 .NET 对象。编写了多个循环来从响应中提取文本。
- en: In this section, we created a simple application that uses Cognitive Services
    to provide word extractions from features using the OCR API and deployed it within
    Kubernetes Pods. This process and architecture can be used within any application
    that wants to consume Cognitive Services APIs. Next, we will take a look at another
    Cognitive Services API, known as visual features.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们创建了一个简单的应用程序，利用认知服务通过 OCR API 提供从特征中提取单词的功能，并将其部署到 Kubernetes Pods 中。此过程和架构可以用于任何想要调用认知服务
    API 的应用程序。接下来，我们将了解另一个认知服务 API，称为视觉特征。
- en: Building a visual features service using the Cognitive Search .NET SDK
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Cognitive Search .NET SDK 构建视觉特征服务
- en: The last section was about creating a service that uses an OCR cognitive endpoint
    to return text within images. In this section, a new service will be created that
    will return visual features within an image, such as descriptions, tags, and objects.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 上一节介绍了创建一个使用 OCR 认知终结点返回图像中文本的服务。在本节中，将创建一个新的服务，该服务返回图像中的视觉特征，例如描述、标签和对象。
- en: Using PowerShell
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 PowerShell
- en: 'The code in PowerShell is similar to the previous OCR example, so it is not
    repeated here. The URL is different from the previous code example:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 中的代码与之前的 OCR 示例类似，因此在此不再重复。URL 与之前的代码示例不同：
- en: '![HTTP request URL when using PowerShell](img/Figure_19.8.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![使用 PowerShell 时的 HTTP 请求 URL](img/Figure_19.8.jpg)'
- en: 'Figure 19.7: Request URL'
  id: totrans-142
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 19.7：请求 URL
- en: The request is made using a `POST` method, and the URL points to the endpoint
    in the East US Azure region. It also uses version 2 and consumes the Vision API.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 请求使用 `POST` 方法，并且 URL 指向东部美国 Azure 区域的终结点。它还使用版本 2，并调用视觉 API。
- en: The Cognitive Services access key is part of the HTTP header named `ocp-apim-subscription-key`.
    The header also contains the header content-type with `application/json` as the
    value. This is because the body of the request contains a JSON value. The body
    has the URL of the image from which text should be extracted.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 认知服务访问密钥是 HTTP 头部的一部分，名为 `ocp-apim-subscription-key`。该头部还包含名为 `content-type`
    的头信息，值为 `application/json`。这是因为请求的正文包含 JSON 格式的数据。正文中包含提取文本所需的图像 URL。
- en: The response will be in JSON format containing the image content and a description.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 响应将以 JSON 格式返回，包含图像内容和描述。
- en: Using .NET
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 .NET
- en: 'This example is again an ASP.NET Core MVC application and has the `Microsoft.Azure.CognitiveServices.Vision.ComputerVision`
    NuGet package installed in it:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例再次是一个 ASP.NET Core MVC 应用程序，已安装 `Microsoft.Azure.CognitiveServices.Vision.ComputerVision`
    NuGet 包：
- en: '![ASP.NET Core MVC application with the NuGet package](img/Figure_19.9.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![带有 NuGet 包的 ASP.NET Core MVC 应用程序](img/Figure_19.9.jpg)'
- en: 'Figure 19.8: ASP.NET Core MVC application with the Microsoft.Azure.CognitiveServices.Vision.ComputerVision
    NuGet package'
  id: totrans-149
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 19.8：带有 Microsoft.Azure.CognitiveServices.Vision.ComputerVision NuGet 包的 ASP.NET
    Core MVC 应用程序
- en: The code for the controller action is shown next. In this code, the cognitive
    service and key are declared. It also declares variables for the `ComputerVisionClient`
    and `VisionType` objects. It creates an instance of the `ComputerVisionClient`
    type, providing it the URL and the key.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器操作的代码如下所示。在这段代码中，声明了认知服务和密钥，还声明了 `ComputerVisionClient` 和 `VisionType` 对象的变量。它创建了一个
    `ComputerVisionClient` 类型的实例，提供了 URL 和密钥。
- en: The `VisionTypes` list consists of multiple types of data sought from the image—tags,
    descriptions, and objects are added. Only these parameters will be extracted from
    the image.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`VisionTypes` 列表包含了从图像中提取的多种数据类型——标签、描述和对象等。只有这些参数会从图像中提取。'
- en: 'An `HttpClient` object is instantiated to download the image using the URL
    provided by the user and sends this binary data to the Cognitive Services endpoint
    using the `AnalyzeImageInStreamAsync` function of type `ComputerVisionClient`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 `HttpClient` 对象，通过用户提供的 URL 下载图像，并使用 `ComputerVisionClient` 类型的 `AnalyzeImageInStreamAsync`
    函数将这些二进制数据发送到认知服务端点：
- en: '[PRE2]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The results are looped through and tags are returned to the user. Similarly,
    descriptions and object properties can also be returned to the user. Now let's
    check out the ways we can safeguard the exposure of service keys.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 对结果进行循环处理并将标签返回给用户。同样，描述和对象属性也可以返回给用户。现在让我们来看一下如何保护服务密钥的暴露。
- en: Safeguarding the Cognitive Services key
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护认知服务密钥
- en: There are multiple ways to safeguard the exposure of keys to other actors. This
    can be done using the API Management resource in Azure. It can also be done using
    Azure Functions Proxies.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方法可以保护密钥不被其他方暴露。可以通过 Azure 中的 API 管理资源来实现，也可以通过 Azure Functions 代理来实现。
- en: Using Azure Functions Proxies
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Azure Functions 代理
- en: Azure Functions Proxies can refer to any URL, whether internal or external.
    When a request reaches Azure Functions Proxies, it will use the URL of the cognitive
    service along with the key to invoke the cognitive endpoint, and it will also
    override the request parameters and add the incoming image URL and append it to
    the cognitive endpoint URL as POST data. When a response comes back from the service,
    it will override the response, remove the headers, and pass JSON data back to
    the user.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Functions 代理可以引用任何 URL，无论是内部还是外部。当请求到达 Azure Functions 代理时，它会使用认知服务的 URL
    和密钥来调用认知服务端点，并会覆盖请求参数，将传入的图像 URL 作为 POST 数据附加到认知端点 URL 上。当服务返回响应时，它会覆盖响应，移除头信息，并将
    JSON 数据传递回用户。
- en: Consuming Cognitive Services
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用认知服务
- en: Consuming Cognitive Services follows a consistent pattern. Each cognitive service
    is available as a REST API, with each API expecting different sets of parameters
    to work on. Clients invoking these URLs should check out the documentation for
    associate parameters and provide values for them. Consuming URLs is a relatively
    raw method of using Cognitive Services. Azure provides SDKs for each service and
    for multiple languages. Clients can use these SDKs to work with Cognitive Services.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 使用认知服务遵循一致的模式。每个认知服务都可以通过 REST API 提供，每个 API 需要不同的参数集。调用这些 URL 的客户端应查阅相关文档以获取参数，并为它们提供相应的值。直接使用
    URL 调用是使用认知服务的一种相对原始的方法。Azure 为每项服务提供了 SDK，并支持多种编程语言。客户端可以使用这些 SDK 来与认知服务进行交互。
- en: The `https://{luis resource name}-authoring.cognitiveservices.azure.com/` and
    the production API is available at
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`https://{luis resource name}-authoring.cognitiveservices.azure.com/` 和生产 API
    可在此访问'
- en: '`https://{azure region}.api.cognitive.microsoft.com/luis/prediction/v3.0/apps/{application
    id}/slots/production/predict?subscription-key={cognitive key} &verbose=true&show-all-intents=true&log=true&query=YOUR_QUERY_HERE`.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`https://{azure region}.api.cognitive.microsoft.com/luis/prediction/v3.0/apps/{application
    id}/slots/production/predict?subscription-key={cognitive key} &verbose=true&show-all-intents=true&log=true&query=YOUR_QUERY_HERE`。'
- en: Similarly, the Face API is available at `https://{endpoint}/face/v1.0/detect[?returnFaceId][&returnFaceLandmarks][&returnFaceAttributes][&recognitionModel][&returnRecognitionModel][&detectionModel]`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，Face API 可在 `https://{endpoint}/face/v1.0/detect[?returnFaceId][&returnFaceLandmarks][&returnFaceAttributes][&recognitionModel][&returnRecognitionModel][&detectionModel]`
    访问。
- en: There are many Cognitive Services APIs, with each having multiple flavors in
    terms of URLs, and the best way to know about these URLs is to use the Azure documentation.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多认知服务 API，每个 API 在 URL 方面有不同的版本，了解这些 URL 的最佳方式是使用 Azure 文档。
- en: Summary
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, you gained an understanding of the deployment architecture
    and application architecture for creating intelligent applications in Azure. Azure
    provides Cognitive Services with numerous endpoints—each endpoint is responsible
    for executing an AI-related algorithm and providing outputs. Almost all Cognitive
    Services endpoints work in a similar manner with regard to HTTP requests and responses.
    These endpoints can also be invoked using SDKs provided by Azure for different
    languages, and you saw an example of obtaining visual features using them. There
    are more than 50 different endpoints, and you are advised to get an understanding
    of the nature of endpoints using the API console feature provided by Azure.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您了解了在 Azure 中创建智能应用程序的部署架构和应用程序架构。Azure 提供了大量的认知服务端点——每个端点负责执行与 AI 相关的算法并提供输出。几乎所有的认知服务端点在处理
    HTTP 请求和响应方面工作方式相似。这些端点也可以通过 Azure 提供的不同语言 SDK 进行调用，您已看到使用这些 SDK 获取视觉特征的示例。Azure
    提供了超过 50 个不同的端点，建议您通过 Azure 提供的 API 控制台功能来了解端点的性质。
