- en: 'Chapter 1:'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 第1章：
- en: Azure DevOps Overview
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure DevOps概述
- en: 'This chapter introduces the first topics of this book: **DevOps** principles
    and **Azure****DevOps** project management. In this chapter, we are going start
    by introducing DevOps and provide an overview of the different DevOps principles.
    Then, we are going to cover the key concepts of Azure DevOps and the different
    services that Azure DevOps offers. Finally, we are going to introduce the scenario
    that we will be using throughout this book.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了本书的第一个主题：**DevOps**原则和**Azure DevOps**项目管理。在本章中，我们将从介绍DevOps开始，并概述不同的DevOps原则。接下来，我们将介绍Azure
    DevOps的关键概念及其提供的不同服务。最后，我们将介绍本书将使用的场景。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将覆盖以下主题：
- en: Introducing DevOps
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍DevOps
- en: Understanding DevOps principles
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解DevOps原则
- en: Introducing Azure DevOps key concepts
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Azure DevOps关键概念
- en: Discovering Azure DevOps services
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索Azure DevOps服务
- en: Introducing the scenarios
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍场景
- en: Let's get started!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Introducing DevOps
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍DevOps
- en: For a long time, development and operations had been divided into isolated modules
    with both separate concerns and responsibilities. Developers wrote the code and
    made sure that it worked on their development systems, while the system administrators
    were responsible for the actual deployment and integration in the organization's
    IT infrastructure.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 长时间以来，开发和运维一直被分割成相互独立的模块，双方各自有着不同的关注点和责任。开发人员编写代码并确保其在开发系统上正常运行，而系统管理员则负责在组织的IT基础设施中进行实际的部署和集成。
- en: As there was limited communication between these two isolated modules, both
    teams worked mostly separated on their projects. However, they heavily depended
    on each other because there was no cross-platform knowledge across the different
    teams.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这两个独立模块之间的沟通有限，两支团队大多是分开工作的。然而，他们又非常依赖对方，因为不同团队之间缺乏跨平台的知识。
- en: 'This fitted in nicely with the Waterfall Methodology that was used for most
    projects. The Waterfall Methodology is based on the **Software Development Life
    Cycle** (**SDLC**), which has clearly defined processes for creating software.
    The Waterfall Methodology is a breakdown of project deliverables into linear sequential
    phases, where each phase depends on the deliverables of the previous phase. This
    sequence of events may look as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这一方法与大多数项目中使用的瀑布模型非常契合。瀑布模型基于**软件开发生命周期**（**SDLC**），它有明确的流程来创建软件。瀑布模型将项目交付物分解为线性顺序的阶段，每个阶段依赖于前一个阶段的交付物。这个事件序列可能如下所示：
- en: '![Figure 1.1 – Waterfall Methodology'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.1 – 瀑布模型'
- en: '](img/Figure_1.01_B16392.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.01_B16392.jpg)'
- en: Figure 1.1 – Waterfall Methodology
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – 瀑布模型
- en: 'The Waterfall Methodology is well suited for projects in the following circumstances:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 瀑布模型非常适合以下情况下的项目：
- en: Early in the development life cycle, customers and developers agree on what
    will be delivered, with minimal to no changes during the development of the project.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开发生命周期的早期，客户和开发人员就要达成一致，确定交付内容，并在项目开发过程中尽量避免修改。
- en: For integration with external systems, it is common for multiple components
    of the software to be designed in parallel. In these cases, it is desirable to
    have the design document complete at an early stage in the development life cycle.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于与外部系统的集成，通常需要多个软件组件并行设计。在这种情况下，尽早完成设计文档是理想的做法。
- en: Various team members are involved in other projects simultaneously as well.
    For example, business analysts can gather the requirements and create the design
    while developers are working on another project.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各个团队成员通常也会同时参与其他项目。例如，业务分析师可以收集需求并创建设计，而开发人员则在处理另一个项目。
- en: Where it is not possible to break down the requirements phase, customers are
    not fully engaged in smaller deliverables.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当无法将需求阶段分解时，客户无法充分参与到较小的交付物中。
- en: However, customers may not exactly know what their requirements are before they
    see working software. This can result in changing the requirements, thus leading
    to redesign, reimplementation, and reverification. This can dramatically increase
    the costs of the project.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，客户在看到可工作的软件之前，可能并不完全知道他们的需求。这可能导致需求的变更，从而引发重新设计、重新实现和重新验证。这会显著增加项目的成本。
- en: Due to this, Agile and DevOps were introduced in 2009 and have slowly taken
    over the world of software development. They replaced the Waterfall Methodology
    for most projects that are out there. DevOps is a natural extension of Agile and
    continuous delivery approaches, and it stands for development and operations.
    It is a practice that merges development, IT operations, and quality assurance
    into one single, continuous set of processes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，敏捷和 DevOps 于 2009 年被引入，并慢慢地在软件开发界占据主导地位。它们取代了大多数项目中使用的瀑布模型。DevOps 是敏捷和持续交付方法的自然延伸，代表了开发和运维。它是一种将开发、IT
    运维和质量保证融合为一个连续过程的实践。
- en: 'The following diagram illustrates the different parts that DevOps consists
    of:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了 DevOps 的不同组成部分：
- en: '![Figure 1.2 – DevOps methodology'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.2 – DevOps 方法论'
- en: '](img/Figure_1.02_B16392.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.02_B16392.jpg)'
- en: Figure 1.2 – DevOps methodology
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – DevOps 方法论
- en: It is a team-based and iterative approach to development where all stakeholders,
    such as developers, administrators, testers, and a representative of the customer,
    are part of the same team. Applications are delivered in functional components,
    and rather than creating schedules and tasks at the start of the project, the
    project is divided into smaller phases, called sprints. The duration of each sprint
    is defined up front and has a list of deliverables that are planned at the start
    of each sprint. All those deliverables are defined together with the customer
    and prioritized by business value by the customer. At the end of each sprint,
    when work is completed, it is reviewed and evaluated by the team through daily
    builds and end-of-sprint demos.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种基于团队的迭代式开发方法，所有利益相关者，如开发人员、管理员、测试人员以及客户代表，都属于同一个团队。应用程序以功能组件的形式交付，而不是在项目开始时创建时间表和任务，项目被划分为较小的阶段，称为冲刺。每个冲刺的持续时间在前期定义，并在每个冲刺开始时规划好交付物的清单。所有这些交付物都是与客户一起定义的，并由客户按照业务价值进行优先级排序。在每个冲刺结束时，完成的工作将通过日常构建和冲刺结束时的演示进行团队评审和评估。
- en: 'This results in the following advantages:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这带来了以下优势：
- en: By working directly with the project team throughout the whole project, the
    customer will experience a stronger sense of ownership.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在整个项目过程中与项目团队直接合作，客户将体验到更强的归属感。
- en: The customer has opportunities to see the work being delivered in an early stage
    of the project and can make appropriate decisions and changes to it.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户有机会在项目的早期阶段查看交付的工作，并可以对此做出适当的决策和调整。
- en: Development is more business and value focused. This is a result of working
    closer with the customer and having a better understanding of their needs.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发更加注重业务和价值。这是与客户更紧密合作并更好地理解其需求的结果。
- en: An Agile way of working enables us to quickly create a base version of the product,
    which can be built upon in the next iterations.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敏捷工作方式使我们能够迅速创建产品的基础版本，并在后续迭代中进行构建。
- en: Now that we have covered a very brief introduction to DevOps, we are going to
    look at the different DevOps principles.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在简要介绍完 DevOps 后，我们将探讨不同的 DevOps 原则。
- en: Understanding DevOps principles
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 DevOps 原则
- en: There are a lot of different definitions when it comes to DevOps. Most of them
    are good at explaining the different aspects of finding the right flow in delivering
    software and IT projects. In the upcoming sections, we will highlight six DevOps
    principles that we think are essential when adopting a DevOps way of working.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 DevOps 有很多不同的定义。它们大多数擅长解释在交付软件和 IT 项目中寻找合适流程的不同方面。在接下来的章节中，我们将重点介绍我们认为在采用
    DevOps 工作方式时至关重要的六个 DevOps 原则。
- en: Principle 1 – Customer-centric action
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原则 1 – 以客户为中心的行动
- en: Nowadays, it is important that software development projects have short cycles
    and feedback loops, with end users and real customers integrated into the team.
    To fully meet the customers' requirements, all activity around building software
    and products must involve these clients. DevOps teams and organizations must continuously
    invest in products and services that will allow clients to receive the maximum
    outcome, while also being as lean as possible to continuously innovate and change
    the chosen strategy when it is no longer working.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，软件开发项目需要具有短周期和反馈循环，并将最终用户和真实客户融入团队。为了充分满足客户的需求，所有与构建软件和产品相关的活动必须涉及这些客户。DevOps
    团队和组织必须持续投资于产品和服务，以便让客户获得最大的成果，同时保持尽可能精简，以便在策略不再有效时持续创新并进行调整。
- en: Principle 2 – Create with the end in mind
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原则2 – 以终为始
- en: Organizations need to act more like product companies. They should focus more
    on building working products that are sold to real customers. This engineering
    mindset needs to be shared by all employees. This is required to realize those
    products. This means that they should let go of the approach where each unit focuses
    on a particular role with their own scoped responsibility.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 组织需要更像产品公司一样运作。他们应该更多地关注构建可以销售给真实客户的可用产品。这种工程思维需要被所有员工共享，才能实现这些产品。这意味着他们应该放弃那种每个部门只关注特定角色并承担独立责任的做法。
- en: Principle 3 – End-to-end responsibility
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原则3 – 端到端责任
- en: In most traditional software development projects, the software and services
    that are developed are handed over to operations, where they then deploy and maintain
    those solutions after the initial development process. By adopting a DevOps way
    of working, the DevOps teams become fully responsible and accountable for the
    project they deliver. This means that once the product has been delivered by the
    team and it needs to be maintained, it still remains under the responsibility
    of the team. The team will also provide support for the product until it reaches
    its end of life. This greatly increases the level of responsibility of the team
    and the quality of the products that are developed.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数传统软件开发项目中，开发的软件和服务会交给运维部门，由他们在初始开发过程后进行部署和维护。通过采用 DevOps 工作方式，DevOps 团队将对他们交付的项目承担完全的责任和义务。这意味着，一旦产品由团队交付并需要维护，它仍然由团队负责。团队还将为该产品提供支持，直到它达到生命周期的终点。这大大增加了团队的责任感，并提高了开发产品的质量。
- en: Principle 4 – Cross-functional autonomous teams
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原则4 – 跨职能自治团队
- en: Organizations that work with vertical and fully responsible teams will need
    to let these teams work completely independently throughout the whole life cycle.
    To enable these teams to work completely independently, a broad and balanced set
    of skills are required. Team members need to have T-shaped profiles instead of
    old-school IT specialists who are only skilled in their own role. Examples of
    skills that every team member should have include development, requirement analysis,
    testing, and administration skills.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 与垂直和完全负责的团队合作的组织，需要让这些团队在整个生命周期中完全独立工作。为了使这些团队能够完全独立工作，需要具备广泛且均衡的技能组合。团队成员需要具备T型技能，而不是只擅长自己角色的老派IT专家。每个团队成员应该具备的技能包括开发、需求分析、测试和管理技能等。
- en: Principle 5 – Continuous improvement
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原则5 – 持续改进
- en: Another part of end-to-end responsibility is that, for organizations, it is
    important to adapt changes continuously. There can be a number of changing circumstances,
    such as new technology that has been released, changing customer requirements,
    and so on. Continuous improvement is a strong focus in DevOps when it comes to
    optimizing for speed and costs, minimizing waste, easy of delivery, and to continuously
    improve the software and services that are being built and released. An important
    activity to embed inside these cycles is experimentation. This will allow teams
    to develop a way of learning from their failures, which is essential to continuous
    improvement.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 端到端责任的另一个部分是，对于组织来说，持续适应变化非常重要。可能会有许多变化的情况，比如发布了新技术、客户需求变化等。持续改进是 DevOps 中的一个重要关注点，旨在优化速度和成本，减少浪费，简化交付，并持续改进构建和发布的软件和服务。一个重要的活动是将实验融入这些循环中，这将使团队能够从失败中学习，这对于持续改进至关重要。
- en: Principle 6 – Automate everything
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原则6 – 自动化一切
- en: To fully adopt and embed a continuous improvement culture inside an organization,
    most organizations have a lot of waste and tech depth to eliminate. To work with
    high cycle rates and to process the instant feedback from customers and end users
    as soon as possible, it is imperative to automate everything. This means that
    not only the software development process should be automated using continuous
    delivery (which includes continuous development and integration), but also the
    whole infrastructure landscape needs to be automated. The infrastructure also
    needs to be ready for new ways of working. In this sense, automation is synonymous
    with the drive to renew the way in which the team delivers their services to their
    customers.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要完全采纳并在组织内部嵌入持续改进文化，大多数组织需要消除大量浪费和技术债务。为了实现高循环率并尽早处理来自客户和最终用户的即时反馈，自动化一切变得至关重要。这意味着，不仅软件开发过程应使用持续交付自动化（包括持续开发和集成），而且整个基础设施环境也需要自动化。基础设施还需要为新的工作方式做好准备。从这个角度来看，自动化就是推动团队更新向客户交付服务方式的同义词。
- en: In this section, we have covered the six principles that are very important
    when adopting or migrating to a DevOps way of working. In the next few sections,
    we are going to look at what Azure DevOps has to offer as a tool that supports
    teams so that they can work in a DevOps oriented manner.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了采纳或迁移到 DevOps 工作方式时非常重要的六个原则。在接下来的几个章节中，我们将讨论 Azure DevOps 作为支持团队以
    DevOps 方式工作的工具所提供的功能。
- en: Introducing Azure DevOps key concepts
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入 Azure DevOps 关键概念
- en: Azure DevOps provides a wide variety of services for DevOps teams so that they
    can plan, work, collaborate on code development, and build and deploy software
    and services. Most DevOps teams rely on several tools and build custom toolchains
    for each phase in the application life cycle.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps 为 DevOps 团队提供了多种服务，使他们能够规划、工作、协作开发代码，并构建和部署软件和服务。大多数 DevOps 团队依赖于多种工具，并为应用生命周期的每个阶段构建自定义工具链。
- en: 'The following diagram shows the phases that are defined in the application
    life cycle:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了定义在应用生命周期中的各个阶段：
- en: '![Figure 1.3 – Application life cycle phases'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.3 – 应用生命周期阶段'
- en: '](img/Figure_1.03_B16392.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.03_B16392.jpg)'
- en: Figure 1.3 – Application life cycle phases
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – 应用生命周期阶段
- en: In the following sections, we'll explain these phases and the corresponding
    Microsoft tooling and products in more detail.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将详细解释这些阶段以及相应的 Microsoft 工具和产品。
- en: Plan
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 规划
- en: During the planning phase, teams can use Kanban boards and backlogs to define,
    track, and lay out the work that needs to be done in Azure Boards. They can also
    use GitHub for this. In GitHub, an issue can be created by suggesting a new idea
    or stating that a bug should be tracked. These issues can be organized and assigned
    to teams.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在规划阶段，团队可以使用看板和待办事项列表在 Azure Boards 中定义、跟踪并安排需要完成的工作。他们也可以使用 GitHub 进行此操作。在
    GitHub 中，可以通过建议一个新想法或表示需要追踪一个 bug 来创建一个 issue。这些问题可以进行组织并分配给团队。
- en: Develop
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发
- en: The development phase is supported by Visual Studio Code and Visual Studio.
    Visual Studio Code is a cross-platform editor, while Visual Studio is a Windows-
    and Mac-only IDE. You can use Azure DevOps for automated testing and use Azure
    Pipelines to create automatic builds for building the source code. Code can be
    shared across teams with Azure DevOps or GitHub.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 开发阶段由 Visual Studio Code 和 Visual Studio 支持。Visual Studio Code 是一个跨平台编辑器，而 Visual
    Studio 是仅限 Windows 和 Mac 的 IDE。你可以使用 Azure DevOps 进行自动化测试，并使用 Azure Pipelines
    创建自动构建来编译源代码。代码可以通过 Azure DevOps 或 GitHub 在团队之间共享。
- en: Deliver
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交付
- en: The deliver phase is about deploying your applications and services to target
    environments. You can use Azure Pipelines to deploy code automatically to any
    Azure service or on-premises environments. You can use Azure Resource Manager
    templates or Terraform to spin up environments for your applications or infrastructure
    components. You can also integrate Jenkins and Spinnaker inside your Azure DevOps
    Pipelines.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 交付阶段是关于将应用程序和服务部署到目标环境的过程。你可以使用 Azure Pipelines 自动将代码部署到任何 Azure 服务或本地环境。你可以使用
    Azure Resource Manager 模板或 Terraform 来为你的应用程序或基础设施组件创建环境。你还可以将 Jenkins 和 Spinnaker
    集成到 Azure DevOps Pipelines 中。
- en: Operate
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运维
- en: In this phase, you implement full-stack monitoring for monitoring your applications
    and services. You can also manage your cloud environment with different automation
    tools, such as Azure Automation, Chef, and more. Keeping your applications and
    services secure is also part of this phase. Therefore, you can use features and
    services such as Azure Policy and Azure Security Center.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一阶段，你会为监控你的应用程序和服务实现全栈监控。你还可以使用不同的自动化工具来管理你的云环境，如 Azure Automation、Chef 等。保持你的应用程序和服务的安全也是这一阶段的一部分。因此，你可以使用诸如
    Azure 策略和 Azure 安全中心等功能和服务。
- en: To support the full life cycle of analyzing, designing, building, deploying,
    and maintaining software and infrastructure products and services, Azure DevOps
    provides integrated features that can be accessed through any web browser.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持分析、设计、构建、部署和维护软件及基础设施产品和服务的完整生命周期，Azure DevOps 提供了集成的功能，可以通过任何网络浏览器访问。
- en: Azure DevOps offers a combination of solutions and tooling that can be used
    to create unique and custom workflows throughout each of the application life
    cycle phases. These solutions will be described in the upcoming sections.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps 提供了一套解决方案和工具的组合，可用于在每个应用程序生命周期阶段创建独特且定制的工作流。这些解决方案将在接下来的章节中描述。
- en: Continuous integration and continuous delivery (CI/CD)
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续集成和持续交付（CI/CD）
- en: You can automate each DevOps process with CI/CD (and continuous deployment)
    in Azure DevOps. CI is used in the development phase of a project and refers to
    building and testing code in a fully automated way. Every time you commit changes
    to the master branch, the changes will be validated and then packaged into a build
    artifact automatically. With CD, the delivery phase is automated. Every time a
    build artifact is available, the artifact is automatically deployed to the desired
    environment. When continuous integration and continuous deployment are both used
    by development teams, the code remains ready for production at any time. The only
    thing that teams must do to deploy a working application into production is trigger
    the transition from development to deploy. This will make the automated build
    artifact available for deployment. This triggering can be as simple as pressing
    a button.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过 CI/CD（以及持续部署）在 Azure DevOps 中自动化每个 DevOps 流程。CI 用于项目的开发阶段，指的是以完全自动化的方式构建和测试代码。每当你提交更改到主分支时，变更将会被验证，并自动打包成构建工件。使用
    CD 时，交付阶段也会自动化。每当构建工件可用时，工件会自动部署到所需的环境中。当开发团队同时使用持续集成和持续部署时，代码始终可以随时准备好进行生产部署。团队部署一个可工作的应用程序到生产环境中所需做的唯一事情，就是触发从开发到部署的过渡。这将使自动化构建工件变得可用进行部署。这一触发过程可以简单到按下一个按钮。
- en: With Azure DevOps, you also implement continuous deployment. Adding this to
    your development life cycle means that you can automate the entire process, from
    code commit to production. The trigger between the development and delivery phase
    is completely automatic. So, when code changes are validated and pass all the
    tests that are performed during the development phase, the changes will be published
    to production automatically as well. This means that customers will receive the
    new version, along with the improvements for it, as soon as they are available.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Azure DevOps，你还可以实现持续部署。将其添加到你的开发生命周期中意味着你可以自动化整个过程，从代码提交到生产部署。开发和交付阶段之间的触发过程是完全自动化的。因此，当代码更改经过验证并通过开发阶段进行的所有测试后，变更将自动发布到生产环境。这意味着客户会在新版本和相应的改进一经发布时就能立刻收到。
- en: Agile development support
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 敏捷开发支持
- en: Azure DevOps supports teams that adopt Agile development methods with planning,
    tracking, and reporting capabilities. This will result in shorter release cycles
    and full visibility in the software development process. You can use Azure Boards,
    which will be covered in more detail in the next section of this chapter, to manage
    backlogs and define, assign, and track work items. You can also use advanced analytics
    and reporting and create custom dashboards to track progress.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps 支持采用敏捷开发方法的团队，提供计划、跟踪和报告功能。这将导致更短的发布周期和软件开发过程的完全可见性。你可以使用 Azure
    Boards（将在本章的下一部分详细介绍）来管理待办事项并定义、分配和跟踪工作项。你还可以使用高级分析和报告功能，创建自定义仪表板来跟踪进度。
- en: Version control
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 版本控制
- en: A version control system, also known as a source control system, is an essential
    tool for multi-developer projects. It allows developers to collaborate on the
    code and track changes. The history of all the code files is also maintained in
    the version control system. This makes it easy to go back to a different version
    of the code files in case of errors or bugs.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制系统，也称为源代码控制系统，是多开发者项目的基本工具。它允许开发者在代码上进行协作并跟踪更改。所有代码文件的历史也会保存在版本控制系统中。这使得在出现错误或bug时，能够轻松回退到代码文件的其他版本。
- en: 'Azure DevOps supports two different types of source control: Git (distributed)
    and **Team Foundation Version Control** (**TFVS**). With Git, each developer has
    a copy of the source repository on their development machine. All branch and history
    information is included inside the source repository. Each developer works directly
    with their copy of the repository and all the changes are shared between the local
    and source repositories as a separate step. Changes can be committed on the local
    filesystem, and version control operations can be executed without a network connection.
    Branches can be created easily on the dev machine and later, they can be merged,
    published, or disposed by the developer separately. With TFVC, developers have
    only one version of each file on their local dev machines. All the others, as
    well as the historical data, are maintained only on the server. The branches are
    created on the server as well.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps 支持两种不同类型的源代码管理：Git（分布式）和**团队基础版本控制**（**TFVS**）。使用 Git 时，每个开发者在其开发机器上都有一份源代码库的副本。所有的分支和历史信息都包含在源代码库中。每个开发者直接与自己本地的代码库副本进行工作，所有的更改通过一个单独的步骤在本地和源代码库之间共享。可以在本地文件系统上提交更改，并且可以在没有网络连接的情况下执行版本控制操作。开发者可以在开发机器上轻松创建分支，之后可以将其合并、发布或单独处理。使用
    TFVC 时，开发者的本地开发机器上只有每个文件的一个版本。所有其他的文件以及历史数据都仅保存在服务器上。分支也在服务器上创建。
- en: Infrastructure as Code
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础设施即代码
- en: Teams can also manage the infrastructure in Azure DevOps. Infrastructure components
    that are used in a project, such as networks, virtual machines, and load balancers,
    can be managed using the same versioning features and capabilities that are used
    for the source code.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 团队还可以在 Azure DevOps 中管理基础设施。项目中使用的基础设施组件，如网络、虚拟机和负载均衡器，可以使用与源代码相同的版本控制功能和能力进行管理。
- en: Used together with continuous delivery, an **Infrastructure as Code** (**IaC**)
    model generates the same environment every time it is deployed. Without IaC, teams
    need to configure and maintain the settings of all the individual deployment environments
    manually, which is a time-consuming and error-prone task. The most plausible outcome
    is that, over time, each environment becomes a *snowflake*, which is a unique
    configuration that cannot be reproduced automatically anymore. This inconsistency
    across environments will lead to issues during the deployment phase.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 与持续交付一起使用时，**基础设施即代码**（**IaC**）模型每次部署时都会生成相同的环境。如果没有 IaC，团队需要手动配置和维护所有单独部署环境的设置，这是一项耗时且容易出错的任务。最可能的结果是，随着时间推移，每个环境都会成为一个*独一无二的配置*，这种配置不再能被自动重现。环境之间的不一致性将在部署阶段导致问题。
- en: Configuration Management
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置管理
- en: Configuration Management refers to all the items and artifacts that are relevant
    to the project and the relationship between them. Those items are stored, retrieved,
    and uniquely identified and modified. This includes items such as source code,
    files, and binaries. The configuration management system is the one true source
    of configuration items.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理指的是与项目相关的所有项和工件，以及它们之间的关系。这些项会被存储、检索、唯一标识并修改。这包括源代码、文件和二进制文件等项。配置管理系统是唯一真正的配置项来源。
- en: Using Azure DevOps, resource configuration across the entire system can be managed
    by teams to roll out configuration updates, enforce desired states, and automatically
    resolve unexpected changes and issues. Azure offers multiple DevOps tools and
    capabilities for configuration management, such as Chef, Puppet, Ansible, and
    Azure Automation.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Azure DevOps，团队可以管理整个系统中的资源配置，推出配置更新、强制执行所需的状态，并自动解决意外的变更和问题。Azure 提供了多种
    DevOps 工具和功能来进行配置管理，例如 Chef、Puppet、Ansible 和 Azure Automation。
- en: Monitoring
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监控
- en: You can use Azure Monitor to practice full-stack continuous monitoring. The
    health of your infrastructure and applications can be integrated into existing
    dashboards in Grafana, Kibana, and the Azure portal with Azure Monitor. You can
    also monitor the availability, performance, and usage of your applications, whether
    they are hosted on-premises or in Azure. Most popular languages and frameworks
    are supported by Azure Monitor, such as NET, Java, and Node.js, and they are integrated
    with DevOps processes and tools in Azure DevOps.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 Azure Monitor 来进行全栈持续监控。你的基础设施和应用程序的健康状况可以集成到 Grafana、Kibana 和 Azure 门户中的现有仪表盘中。你还可以监控应用程序的可用性、性能和使用情况，无论它们是托管在本地还是在
    Azure 中。Azure Monitor 支持大多数流行的编程语言和框架，如 .NET、Java 和 Node.js，并与 Azure DevOps 中的
    DevOps 流程和工具集成。
- en: Discovering Azure DevOps services
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 Azure DevOps 服务
- en: In this section, we are going to introduce the different services that are offered
    by Azure DevOps. These services can be used to support teams throughout the whole
    life cycle of realizing business value for customers.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍 Azure DevOps 提供的不同服务。这些服务可以在整个生命周期中支持团队实现客户的业务价值。
- en: Azure Boards
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure Boards
- en: Azure Boards can be used to plan, track, and discuss work across teams using
    the Agile planning tools that are available. Using Azure Boards, teams can manage
    their software projects. It also offers a unique set of capabilities, including
    native support for Scrum and Kanban. You can also create customizable dashboards,
    and it offers integrated reporting and integration with Microsoft Teams and Slack.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Boards 可以用于使用可用的敏捷规划工具计划、跟踪和讨论跨团队的工作。通过 Azure Boards，团队可以管理他们的软件项目。它还提供了一套独特的功能，包括对
    Scrum 和 Kanban 的原生支持。你还可以创建可定制的仪表盘，并提供集成的报告和与 Microsoft Teams 和 Slack 的集成。
- en: You can create and track user stories, backlog items, tasks, features, and bugs
    that are associated with the project using Azure Boards.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 Azure Boards 创建并跟踪与项目相关的用户故事、待办事项、任务、特性和缺陷。
- en: 'The following screenshot shows an example of an Azure Board:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图展示了一个 Azure Board 的示例：
- en: '![Figure 1.4 – Azure Boards'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.4 – Azure Boards'
- en: '](img/Figure_1.04_B16392.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.04_B16392.jpg)'
- en: Figure 1.4 – Azure Boards
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – Azure Boards
- en: Azure Repos
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure Repos
- en: Azure Repos provides support for private Git repository hosting and for **Team
    Foundation Server Control** (**TFSC**). It offers a set of version control tools
    that can be used to manage the source code of every development project, large
    or small. When you edit the code, you ask the source control system to create
    a snapshot of the files. This snapshot is saved permanently so that it can be
    recalled later if needed.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Repos 提供对私有 Git 仓库托管和**团队基础服务器控制**（**TFSC**）的支持。它提供了一套版本控制工具，可以用于管理每个开发项目的源代码，无论项目大小。当你编辑代码时，你要求源代码管理系统创建文件的快照。这个快照会被永久保存，以便以后在需要时可以调用。
- en: Today, Git is the most used version control system among developers. Azure Repos
    offers standard Git so that developers can use the tools and clients of their
    choice, such as Git for Windows, Mac, third-party Git services, and tools such
    as Visual Studio and Visual Studio Code.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，Git 是开发人员中使用最广泛的版本控制系统。Azure Repos 提供标准的 Git，使得开发人员可以使用他们选择的工具和客户端，例如 Git
    for Windows、Mac、第三方 Git 服务，以及像 Visual Studio 和 Visual Studio Code 这样的工具。
- en: 'The following screenshot shows an example of the commits you can push to a
    repo in Azure:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图展示了你可以推送到 Azure 仓库的提交示例：
- en: '![Figure 1.5 – Azure Repos'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.5 – Azure Repos'
- en: '](img/Figure_1.05_B16392.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.05_B16392.jpg)'
- en: Figure 1.5 – Azure Repos
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – Azure Repos
- en: Azure Pipelines
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure Pipelines
- en: You can use Azure Pipelines to automatically build, test, and deploy code to
    make it available to other users and deploy it to different targets, such as a
    **development, test, acceptance, and production** (**DTAP**) environment. It combines
    CI/CD to automatically build and deploy your code.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 Azure Pipelines 自动构建、测试和部署代码，使其可以供其他用户使用，并将其部署到不同的目标，如**开发、测试、验收和生产**（**DTAP**）环境。它结合了
    CI/CD，自动构建和部署你的代码。
- en: Before you can use Azure Pipelines, you should put your code in a version control
    system, such as Azure Repos. Azure Pipelines can integrate with a number of version
    control systems, such as Azure Repos, Git, TFVS, GitHub, GitHub Enterprise, Subversion,
    and Bitbucket Cloud. You can also use Pipelines with most application types, such
    as Java, JavaScript, Node.js, Python, .NET, C++, Go, PHP, and XCode. Applications
    can be deployed to multiple target environments, including container registries,
    virtual machines, Azure services, or any on-premises or cloud target.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在您可以使用 Azure Pipelines 之前，应该将代码放入版本控制系统中，例如 Azure Repos。Azure Pipelines 可以与多种版本控制系统集成，如
    Azure Repos、Git、TFVS、GitHub、GitHub Enterprise、Subversion 和 Bitbucket Cloud。您还可以将
    Pipelines 与大多数应用程序类型一起使用，如 Java、JavaScript、Node.js、Python、.NET、C++、Go、PHP 和 XCode。应用程序可以部署到多个目标环境，包括容器注册表、虚拟机、Azure
    服务或任何本地或云端目标。
- en: 'The following screenshot shows an example of a run for an Azure Pipeline:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了一个 Azure Pipeline 运行的示例：
- en: '![Figure 1.6 – Azure Pipelines'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.6 – Azure Pipelines'
- en: '](img/Figure_1.06_B16392.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.06_B16392.jpg)'
- en: Figure 1.6 – Azure Pipelines
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6 – Azure Pipelines
- en: Azure Test Plans
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure 测试计划
- en: With Azure Test Plans, teams can improve their code quality using planned and
    exploratory services in Azure DevOps. Azure Test Plans offer features for planned
    manual testing, exploratory testing, user acceptance testing, and for gathering
    feedback from stakeholders. With manual testing, tests are organized into test
    plans and test suites by testers and test leads. Teams can begin testing from
    their Kanban boards or from the Work Hub directly. With user acceptance testing,
    the value that's delivered to meet customer requirements is verified. This is
    usually done by designated testers. Exploratory testing includes tests that are
    executed by the whole development team, including developers, product owners,
    and testers. The software is tested by exploring the software systems, without
    the use of test plans or test suites. Stakeholder feedback gathering is done outside
    the development team by marketing or sales teams. Developers can request feedback
    on their user stories and features from Azure DevOps. Stakeholders can then respond
    directly to the feedback item.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Azure 测试计划，团队可以通过 Azure DevOps 中的计划测试和探索性测试服务提高代码质量。Azure 测试计划提供了计划手动测试、探索性测试、用户验收测试和收集利益相关者反馈的功能。通过手动测试，测试人员和测试主管将测试组织到测试计划和测试套件中。团队可以直接从看板或工作中心开始测试。通过用户验收测试，可以验证为满足客户需求所交付的价值。通常由指定的测试人员执行。探索性测试包括由整个开发团队执行的测试，开发人员、产品负责人和测试人员都会参与。软件测试通过探索软件系统进行，而不使用测试计划或测试套件。利益相关者反馈收集通常由市场或销售团队在开发团队外部完成。开发人员可以从
    Azure DevOps 请求对其用户故事和功能的反馈，利益相关者可以直接回复反馈项。
- en: 'The following screenshot shows an example of an Azure Test Plan:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了一个 Azure 测试计划的示例：
- en: '![Figure 1.7 – Azure Test Plan'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.7 – Azure 测试计划'
- en: '](img/Figure_1.07_B16392.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.07_B16392.jpg)'
- en: Figure 1.7 – Azure Test Plan
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.7 – Azure 测试计划
- en: Azure Artifacts
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure Artifacts
- en: With Azure Artifacts, you can create and share NuGet, npm, Python, and Maven
    packages from private and public sources with teams in Azure DevOps. These packages
    can be used in source code and can be made available to the CI/CD pipelines. With
    Azure Artifacts, you can create multiple feeds that you can use to organize and
    control access to the packages.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Azure Artifacts，您可以从私有和公共源与 Azure DevOps 中的团队创建和共享 NuGet、npm、Python 和 Maven
    包。这些包可以在源代码中使用，并可以在 CI/CD 管道中使用。通过 Azure Artifacts，您可以创建多个源，使用它们来组织和控制对包的访问。
- en: 'The following screenshot shows an example of a feed in Azure Artifacts:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了 Azure Artifacts 中一个源的示例：
- en: '![Figure 1.8 – Azure Artifacts'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.8 – Azure Artifacts'
- en: '](img/Figure_1.08_B16392.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.08_B16392.jpg)'
- en: Figure 1.8 – Azure Artifacts
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8 – Azure Artifacts
- en: Extension Marketplace
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展市场
- en: You can download extensions for Azure DevOps from the Visual Studio Marketplace.
    These extensions are simple add-ons that can be used to customize and extend your
    team's experience with Azure DevOps. They can help by extending the planning and
    tracking of work items, code testing and tracking, pipeline build and release
    flows, and collaboration among team members. The extensions are created by Microsoft
    and the community.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从 Visual Studio Marketplace 下载 Azure DevOps 的扩展。这些扩展是简单的插件，可以用来定制和扩展您团队在
    Azure DevOps 中的使用体验。它们可以通过扩展工作项的规划和跟踪、代码测试和跟踪、管道构建和发布流程，以及团队成员之间的协作来提供帮助。这些扩展由微软和社区创建。
- en: 'The following screenshot shows some of the extensions that can be downloaded
    from the marketplace:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了可以从市场下载的一些扩展：
- en: '![Figure 1.9 – Extension Marketplace'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.9 – 扩展市场'
- en: '](img/Figure_1.09_B16392.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.09_B16392.jpg)'
- en: Figure 1.9 – Extension Marketplace
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.9 – 扩展市场
- en: The services that we introduced in the previous sections will be explained more
    thoroughly in the upcoming chapters of this book. In the next section, we will
    introduce the scenarios that will be used throughout this book.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面章节中介绍的服务将在本书接下来的章节中得到更深入的讲解。在下一节中，我们将介绍本书将使用的场景。
- en: Introducing the scenarios
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍场景
- en: Throughout this book, we will use two different scenarios for our demos. We
    are going to use sample projects that can be generated and installed in your Azure
    DevOps environment by using the DevOps generator. For this book, we are going
    to install Tailwind Traders and Parts Unlimited. Tailwind Traders is an example
    retail company that showcases the future of intelligent application experiences,
    while Parts Unlimited is an example e-commerce website.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中，我们将使用两种不同的场景进行演示。我们将使用可以通过 DevOps 生成器在您的 Azure DevOps 环境中生成和安装的示例项目。对于本书，我们将安装
    Tailwind Traders 和 Parts Unlimited。Tailwind Traders 是一个示例零售公司，展示了智能应用体验的未来，而 Parts
    Unlimited 是一个示例电子商务网站。
- en: Creating the starter project
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建启动项目
- en: 'To create the scenario project, we are going to use the Azure DevOps demo generator,
    which will generate the sample project for us. These projects are free to use.
    Before you generate the project, you need to install two different Azure DevOps
    extensions from the marketplace, both of which are used by the Tailwind Traders
    project. These extensions are as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建场景项目，我们将使用 Azure DevOps 演示生成器，它将为我们生成示例项目。这些项目可以免费使用。在生成项目之前，您需要从市场安装两个不同的
    Azure DevOps 扩展，它们都被 Tailwind Traders 项目所使用。以下是这些扩展：
- en: '**ARM Outputs**: This extension reads the output values of ARM deployments
    and sets them as Azure Pipelines variables. You can download and install the extension
    from [https://marketplace.visualstudio.com/items?itemName=keesschollaart.arm-outputs](https://marketplace.visualstudio.com/items?itemName=keesschollaart.arm-outputs).'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ARM 输出**：此扩展读取 ARM 部署的输出值并将其设置为 Azure Pipelines 变量。您可以从[https://marketplace.visualstudio.com/items?itemName=keesschollaart.arm-outputs](https://marketplace.visualstudio.com/items?itemName=keesschollaart.arm-outputs)下载并安装此扩展。'
- en: '**Team Project Health**: This extension enables users to visualize the overall
    health of builds, thereby delivering a visual cue similar to Codify Build Light.
    You can download the extension from [https://marketplace.visualstudio.com/items?itemName=ms-devlabs.TeamProjectHealth](https://marketplace.visualstudio.com/items?itemName=ms-devlabs.TeamProjectHealth).'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**团队项目健康**：此扩展使用户能够可视化构建的整体健康状况，从而提供类似于 Codify Build Light 的视觉提示。您可以从[https://marketplace.visualstudio.com/items?itemName=ms-devlabs.TeamProjectHealth](https://marketplace.visualstudio.com/items?itemName=ms-devlabs.TeamProjectHealth)下载此扩展。'
- en: 'Once the extensions have been installed inside your Azure DevOps organization,
    you can generate the sample project:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您可以在 Azure DevOps 组织中生成示例项目：
- en: 'First, navigate to the following site: [https://azuredevopsdemogenerator.azurewebsites.net/](https://azuredevopsdemogenerator.azurewebsites.net/).'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，访问以下网站：[https://azuredevopsdemogenerator.azurewebsites.net/](https://azuredevopsdemogenerator.azurewebsites.net/)。
- en: Click the **Sign in** button. If you don't have an Azure account yet, you can
    sign up for a trial account by clicking the **Get started for free** button:![Figure
    1.10 – Azure DevOps demo generator
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**登录**按钮。如果您还没有 Azure 账户，可以点击**免费开始**按钮注册试用账户：![图 1.10 – Azure DevOps 演示生成器
- en: '](img/Figure_1.10_B16392.jpg)'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_1.10_B16392.jpg)'
- en: Figure 1.10 – Azure DevOps demo generator
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.10 – Azure DevOps 演示生成器
- en: Name the project `Tailwind Traders`, select an organization, and select a template
    by clicking the **Choose template** button. Select **Tailwind Traders** from the
    list and click **Select Template**.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将项目命名为`Tailwind Traders`，选择一个组织，并通过点击**选择模板**按钮来选择一个模板。从列表中选择**Tailwind Traders**并点击**选择模板**。
- en: After filling in these details, the page should look as follows:![Figure 1.11
    – Creating a new project
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写完这些信息后，页面应如下所示：![图 1.11 – 创建新项目
- en: '](img/Figure_1.11_B16392.jpg)'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_1.11_B16392.jpg)'
- en: Figure 1.11 – Creating a new project
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 1.11 – 创建新项目
- en: Click the **Create Project** button.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建项目**按钮。
- en: With the project created, navigate to [https://dev.azure.com/](https://dev.azure.com/).
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建项目后，导航到[https://dev.azure.com/](https://dev.azure.com/)。
- en: Log in with your credentials and select the organization where you created the
    project. Select the **Tailwind Traders** project to see if anything has been generated.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的凭据登录，并选择您创建项目的组织。选择**Tailwind Traders**项目查看是否有任何内容生成。
- en: Repeat these steps to create the **Parts Unlimited** project in your DevOps
    environment.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复这些步骤，在您的 DevOps 环境中创建**Parts Unlimited**项目。
- en: Tip
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'For more information about the Tailwind Traders sample project, refer to the
    following site: [https://github.com/Microsoft/TailwindTraders](https://github.com/Microsoft/TailwindTraders).
    For more information about the Parts Unlimited example, refer to [https://microsoft.github.io/PartsUnlimited/](https://microsoft.github.io/PartsUnlimited/).'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有关 Tailwind Traders 示例项目的更多信息，请参阅以下网站：[https://github.com/Microsoft/TailwindTraders](https://github.com/Microsoft/TailwindTraders)。有关
    Parts Unlimited 示例的更多信息，请参阅[https://microsoft.github.io/PartsUnlimited/](https://microsoft.github.io/PartsUnlimited/)。
- en: Summary
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小结
- en: In this chapter, we covered some of the basics of DevOps and covered the six
    different DevOps principles. Then, we covered the key concepts of Azure DevOps
    and the different solutions that Azure DevOps has to offer to support teams throughout
    each of the application life cycle phases. After that, we looked at the different
    features that Azure DevOps has to offer, and we introduced and created the two
    scenarios that we will use in the upcoming chapters of this book.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们介绍了 DevOps 的一些基础知识，并涵盖了六个不同的 DevOps 原则。接着，我们介绍了 Azure DevOps 的关键概念，以及
    Azure DevOps 提供的不同解决方案，以支持团队在应用生命周期的各个阶段。之后，我们查看了 Azure DevOps 提供的不同功能，并介绍并创建了将在本书接下来的章节中使用的两个场景。
- en: In the next chapter, we are going to cover how to manage projects with Azure
    Boards.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍如何使用 Azure Boards 管理项目。
- en: Further reading
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'Check out the following links for more information about the topics that were
    covered in this chapter:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下链接，了解更多本章涵盖的主题：
- en: 'Extension Marketplace: [https://marketplace.visualstudio.com/azuredevops](https://marketplace.visualstudio.com/azuredevops)'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展市场：[https://marketplace.visualstudio.com/azuredevops](https://marketplace.visualstudio.com/azuredevops)
- en: 'Azure Automation documentation: [https://docs.microsoft.com/en-us/azure/automation/](https://docs.microsoft.com/en-us/azure/automation/)'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 自动化文档：[https://docs.microsoft.com/en-us/azure/automation/](https://docs.microsoft.com/en-us/azure/automation/)
- en: 'Azure DevOps demo generator: [https://docs.microsoft.com/en-us/azure/devops/demo-gen/use-demo-generator-v2?view=azure-devops&viewFallbackFrom=vsts](https://docs.microsoft.com/en-us/azure/devops/demo-gen/use-demo-generator-v2?view=azure-devops&viewFallbackFrom=vsts)'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure DevOps 演示生成器：[https://docs.microsoft.com/en-us/azure/devops/demo-gen/use-demo-generator-v2?view=azure-devops&viewFallbackFrom=vsts](https://docs.microsoft.com/en-us/azure/devops/demo-gen/use-demo-generator-v2?view=azure-devops&viewFallbackFrom=vsts)
- en: 'An overview of the Tailwind Traders reference apps for Azure: [https://www.youtube.com/watch?v=EP-PME-1tq0](https://www.youtube.com/watch?v=EP-PME-1tq0)'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 的 Tailwind Traders 参考应用概述：[https://www.youtube.com/watch?v=EP-PME-1tq0](https://www.youtube.com/watch?v=EP-PME-1tq0)
