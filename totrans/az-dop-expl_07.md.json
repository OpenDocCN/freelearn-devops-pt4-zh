["```\npool:\n```", "```\n  vmImage: 'ubuntu-latest'\n```", "```\njobs:\n```", "```\n- job: job1\n```", "```\n  steps:\n```", "```\n  - bash: echo \"Hello!\"\n```", "```\n  - bash: echo \"I'm job 1\"\n```", "```\n- job: job2\n```", "```\n  steps:\n```", "```\n  - bash: echo \"Hello again…\"\n```", "```\n  - bash: echo \"I'm job 2\"\n```", "```\n- job: Windows\n```", "```\n  pool:\n```", "```\n    vmImage: 'windows-latest'\n```", "```\nNumber: 1975 quotedText: \"some text description\"notQuotedtext: strings can be also without quotes boolean: true nullKeyValue: null\n```", "```\n? |\n```", "```\n  This is a key\n```", "```\n  that has multiple lines\n```", "```\n: and this is its value\n```", "```\nCars:\n```", "```\n   - Fiat\n```", "```\n   - Mercedes\n```", "```\n   - BMW\n```", "```\n- Drivers:\n```", "```\n      name: Stefano Demiliani\n```", "```\n      age: 45\n```", "```\n      Driving license type:\n```", "```\n          - type: full car license\n```", "```\n            license id: ABC12345\n```", "```\n            expiry date: 2025-12-31\n```", "```\nCarDetails:\n```", "```\n     make: Mercedes\n```", "```\n     model: GLC220\n```", "```\n     fuel: Gasoline\n```", "```\n---# Products purchased\n```", "```\n- item    : Surface Book 2\n```", "```\n  quantity: 1\n```", "```\n- item    : Surface Pro 7\n```", "```\n  quantity: 3\n```", "```\n- item    : Arc Mouse\n```", "```\n  quantity: 1\n```", "```\n# Product out of stock\n```", "```\n---\n```", "```\n- item    : Surface 4\n```", "```\n- item    : Microsoft Trackball\n```", "```\n--- \n```", "```\ninvoice: 20-198754\n```", "```\ndate   : 2020-05-27\n```", "```\nbill-to: C002456\n```", "```\n    Name  : Stefano Demiliani\n```", "```\n    address:\n```", "```\n        lines: \n```", "```\n            Viale Pasubio, 21\n```", "```\n            c/o Microsoft House\n```", "```\n        city    : Milan\n```", "```\n        state   : MI\n```", "```\n        postal  : 20154\n```", "```\nship-to: C002456\n```", "```\nproduct:\n```", "```\n    - itemNo      : ITEM001\n```", "```\n      quantity    : 1\n```", "```\n      description : Surface Book 2\n```", "```\n      price       : 1850.00\n```", "```\n    - sku         : ITEM002\n```", "```\n      quantity    : 2\n```", "```\n      description : Arc Mouse\n```", "```\n      price       : 65.00\n```", "```\ntax  : 80.50\n```", "```\ntotal: 1995.50\n```", "```\ncomments:\n```", "```\n    Please deliver on office hours.\n```", "```\n    Leave on the reception.\n```", "```\n# ASP.NET\n```", "```\n# Build and test ASP.NET projects.\n```", "```\n# Add steps that publish symbols, save build artifacts, deploy, and more:\n```", "```\n# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4\n```", "```\ntrigger:\n```", "```\n- master\n```", "```\npool:\n```", "```\n  vmImage: 'windows-latest'\n```", "```\nvariables:\n```", "```\n  solution: '**/*.sln'\n```", "```\n  buildPlatform: 'Any CPU'\n```", "```\n  buildConfiguration: 'Release'\n```", "```\nsteps:\n```", "```\n- task: NuGetToolInstaller@1\n```", "```\n- task: NuGetCommand@2\n```", "```\n  inputs:\n```", "```\n    restoreSolution: '$(solution)'\n```", "```\n- task: VSBuild@1\n```", "```\n  inputs:\n```", "```\n    solution: '$(solution)'\n```", "```\n    msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation=\"$(build.artifactStagingDirectory)\"'\n```", "```\n    platform: '$(buildPlatform)'\n```", "```\n    configuration: '$(buildConfiguration)'\n```", "```\n- task: VSTest@2\n```", "```\n  inputs:\n```", "```\n    platform: '$(buildPlatform)'\n```", "```\n    configuration: '$(buildConfiguration)'\n```", "```\nHere I add two more tasks for publishing the symbols and the final artifacts of the pipeline:\n```", "```\ntask: PublishSymbols@2\n```", "```\n  displayName: 'Publish symbols path'\n```", "```\n  inputs:\n```", "```\n    SearchPattern: '**\\bin\\**\\*.pdb'\n```", "```\n    PublishSymbols: false\n```", "```\n  continueOnError: true\n```", "```\n- task: PublishBuildArtifacts@1\n```", "```\n  displayName: 'Publish Artifact'\n```", "```\n  inputs:\n```", "```\n    PathtoPublish: '$(build.artifactstagingdirectory)'\n```", "```\n    ArtifactName: '$(Parameters.ArtifactName)'\n```", "```\n  condition: succeededOrFailed()\n```", "```\n- task: CopyFiles@2\n```", "```\n  displayName: 'Copy files to shared network'\n```", "```\n  inputs:\n```", "```\n    SourceFolder: '$(Build.SourcesDirectory)'\n```", "```\n    Contents: '**'\n```", "```\n    TargetFolder: '\\\\networkserver\\storage\\$(Build.BuildNumber)'\n```", "```\nstages:  \n```", "```\n\t- stage: Build  \n```", "```\n\t  jobs:  \n```", "```\n\t  - job: BuildJob  \n```", "```\n\t    steps:  \n```", "```\n\t    - script: echo Build!  \n```", "```\n\t- stage: Test  \n```", "```\n\t  jobs:  \n```", "```\n\t  - job: TestOne  \n```", "```\n\t    steps:  \n```", "```\n\t    - script: echo Test 1  \n```", "```\n\t  - job: TestTwo \n```", "```\n\t    steps:  \n```", "```\n\t    - script: echo Test 2  \n```", "```\n\t- stage: Deploy  \n```", "```\n\t  jobs:  \n```", "```\n\t  - job: Deploy  \n```", "```\n\t    steps:  \n```", "```\n\t    - script: echo Deployment\n```", "```\ntrigger:\n```", "```\n\t- master\n```", "```\n\tstages:\n```", "```\n\t- stage: 'Build'\n```", "```\n\t  variables:\n```", "```\n\t    buildConfiguration: 'Release'\n```", "```\n\t  jobs:\n```", "```\n\t  - job:\n```", "```\n\t    pool:\n```", "```\n\t      vmImage: 'ubuntu-latest'\n```", "```\n\t    workspace:\n```", "```\n\t      clean: all\n```", "```\n\t    steps:\n```", "```\n\t    - task: UseDotNet@2\n```", "```\n\t      displayName: 'Use .NET Core SDK'\n```", "```\n\t      inputs:\n```", "```\n\t        packageType: sdk\n```", "```\n\t        version: 2.2.x\n```", "```\n\t        installationPath: $(Agent.ToolsDirectory)/dotnet\n```", "```\n\t    - task: DotNetCoreCLI@2\n```", "```\n\t      displayName: \"NuGet Restore\"\n```", "```\n\t      inputs:\n```", "```\n\t        command: restore\n```", "```\n\t        projects: '**/*.csproj'\n```", "```\n\t    - task: DotNetCoreCLI@2\n```", "```\n\t      displayName: \"Build Solution\"\n```", "```\n\t      inputs:\n```", "```\n\t        command: build\n```", "```\n\t        projects: '**/*.csproj'\n```", "```\n\t        arguments: '--configuration (buildConfiguration)'\n```", "```\n    - task: DotNetCoreCLI@2\n```", "```\n      displayName: 'Create NuGet Package - Release Version'\n```", "```\n      inputs:\n```", "```\n        command: pack\n```", "```\n        packDirectory: '$(Build.ArtifactStagingDirectory)/packages/releases'\n```", "```\n        arguments: '--configuration $(buildConfiguration)'\n```", "```\n        nobuild: true\n```", "```\n    - task: DotNetCoreCLI@2\n```", "```\n      displayName: 'Create NuGet Package - Prerelease Version'\n```", "```\n      inputs:\n```", "```\n        command: pack\n```", "```\n        buildProperties: 'VersionSuffix=\"$(Build.BuildNumber)\"'\n```", "```\n        packDirectory: '$(Build.ArtifactStagingDirectory)/packages/prereleases'\n```", "```\n        arguments: '--configuration $(buildConfiguration)'\n```", "```\n    - publish: '$(Build.ArtifactStagingDirectory)/packages'\n```", "```\n      artifact: 'packages'\n```", "```\n- stage: 'PublishPrereleaseNuGetPackage'\n```", "```\n  displayName: 'Publish Prerelease NuGet Package'\n```", "```\n  dependsOn: 'Build'\n```", "```\n  condition: succeeded()\n```", "```\n  jobs:\n```", "```\n  - job:\n```", "```\n    pool:\n```", "```\n      vmImage: 'ubuntu-latest'\n```", "```\n    steps:\n```", "```\n    - checkout: none\n```", "```\n    - download: current\n```", "```\n      artifact: 'packages'\n```", "```\n    - task: NuGetCommand@2\n```", "```\n      displayName: 'Push NuGet Package'\n```", "```\n      inputs:\n```", "```\n        command: 'push'\n```", "```\n        packagesToPush: '$(Pipeline.Workspace)/packages/prereleases/*.nupkg'\n```", "```\n        nuGetFeedType: 'internal'\n```", "```\n        publishVstsFeed: 'Test'\n```", "```\n- stage: 'PublishReleaseNuGetPackage'\n```", "```\n  displayName: 'Publish Release NuGet Package'\n```", "```\n  dependsOn: 'PublishPrereleaseNuGetPackage'\n```", "```\n  condition: succeeded()\n```", "```\n  jobs:\n```", "```\n  - deployment:\n```", "```\n    pool:\n```", "```\n      vmImage: 'ubuntu-latest'\n```", "```\n    environment: 'nuget-org'\n```", "```\n    strategy:\n```", "```\n     runOnce:\n```", "```\n       deploy:\n```", "```\n         steps:\n```", "```\n         - task: NuGetCommand@2\n```", "```\n           displayName: 'Push NuGet Package'\n```", "```\n           inputs:\n```", "```\n             command: 'push'\n```", "```\n             packagesToPush: '$(Pipeline.Workspace)/packages/releases/*.nupkg'\n```", "```\n             nuGetFeedType: 'external'\n```", "```\n             publishFeedCredentials: 'NuGet'\n```", "```\naz container create -g RESOURCE_GROUP_NAME -n CONTAINER_NAME --image mcr.microsoft.com/azure-pipelines/vsts-agent --cpu 1 --memory 7 --environment-variables VSTS_ACCOUNT=AZURE_DEVOPS_ACCOUNT_NAME VSTS_TOKEN=PERSONAL_ACCESS_TOKEN VSTS_AGENT=AGENT_NAME VSTS_POOL=Default\n```", "```\npool:\n```", "```\n  vmImage: 'windows-2019'\n```", "```\ncontainer: mcr.microsoft.com/windows/servercore:ltsc2019\n```", "```\nsteps:\n```", "```\n- script: date /t\n```", "```\n  displayName: Gets the current date\n```", "```\n- script: dir  \n```", "```\n  workingDirectory: $(Agent.BuildiDirectory)\n```", "```\n  displayName: list the content of a folder\n```", "```\npool:\n```", "```\n  vmImage: 'ubuntu-16.04'\n```", "```\ncontainer: ubuntu:16.04\n```", "```\nsteps:\n```", "```\n- script: printenv\n```"]