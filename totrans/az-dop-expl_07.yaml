- en: 'Chapter 4:'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 第 4 章：
- en: Understanding Azure DevOps Pipelines
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 Azure DevOps Pipelines
- en: When adopting **Azure DevOps** in your organization, one of the main important
    decisions you must make is how to define the **pipeline** of your development
    process. A pipeline is a company-defined model that describes the steps and actions
    that a code base must support, from building to the final release phase. It's
    a key part of any DevOps architecture.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的组织中采用**Azure DevOps**时，必须做出的一个重要决定是如何定义您开发流程的**流水线**。流水线是公司定义的模型，描述了代码库必须支持的步骤和操作，从构建到最终发布阶段。它是任何
    DevOps 架构中的关键部分。
- en: In this chapter, we'll learn how to define and use pipelines with Azure DevOps
    for building code.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用 Azure DevOps 定义和使用流水线来构建代码。
- en: 'We will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下主题：
- en: Implementing a CI/CD process
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现 CI/CD 流程
- en: An overview of Azure Pipelines
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Pipelines 概述
- en: Creating and using build agents
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和使用构建代理
- en: Overview of the YAML format
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: YAML 格式概述
- en: Creating a CI/CD pipeline with Azure DevOps
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Azure DevOps 创建 CI/CD 流水线
- en: Retention of builds
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保留构建记录
- en: Multi-stage pipeline
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多阶段流水线
- en: Build pipeline with GitHub repositories
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GitHub 仓库构建流水线
- en: Using container jobs in Azure Pipelines
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Azure Pipelines 中使用容器作业
- en: Let's get started!
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow this chapter, you need to have the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要学习本章内容，您需要具备以下条件：
- en: A valid organization in Azure DevOps
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Azure DevOps 中的有效组织
- en: An Azure subscription where you can create an Azure VM or a local machine on
    one of these environments so that you can install the build agent software
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Azure 订阅，您可以在其中创建 Azure 虚拟机或在这些环境中的本地计算机上安装构建代理软件
- en: Visual Studio or Visual Studio Code as your development environment
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Visual Studio 或 Visual Studio Code 作为开发环境
- en: 'Access to the following GitHub repository for cloning the project: [https://github.com/Microsoft/PartsUnlimited](https://github.com/Microsoft/PartsUnlimited)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问以下 GitHub 仓库以克隆项目：[https://github.com/Microsoft/PartsUnlimited](https://github.com/Microsoft/PartsUnlimited)
- en: Implementing a CI/CD process
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现 CI/CD 流程
- en: When adopting DevOps in a company, implementing the right DevOps tools with
    the right DevOps processes is essential and crucial. One of the fundamental flows
    in a DevOps implementation is the **continuous integration** (**CI**) and **continuous
    delivery** (**CD**) process, which can help developers build, test, and distribute
    a code base in a quicker, structured, and safer way.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在公司中采用 DevOps 时，实施正确的 DevOps 工具与正确的 DevOps 流程至关重要。DevOps 实施中的一个基本流程是**持续集成**（**CI**）和**持续交付**（**CD**）过程，这可以帮助开发者以更快、更结构化、更安全的方式构建、测试和分发代码库。
- en: '**CI** is a software engineering practice where developers in a team integrate
    code modifications in a central repository a few times in a day. When a code modification
    integrated into a particular branch (normally with a pull request, as explained
    in the previous chapter), a new build is triggered in order to check the code
    and detect integration bugs quickly. Also, automatic tests (if available) are
    executed during this phase to check for breakages.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**CI** 是一种软件工程实践，开发团队中的开发者在中央仓库中每天多次集成代码修改。当代码修改集成到特定分支（通常通过拉取请求，如上一章所述）时，会触发新的构建，以便快速检查代码并检测集成错误。此外，在此阶段会执行自动化测试（如果有的话）以检查是否存在故障。'
- en: '**CD** is the process that comes after the CI process. In this process, the
    output of the CI phase is packaged and delivered to the production stage without
    bugs. This is extremely helpful so that we always have a master branch that is
    tested, consistent, and ready to be deployed.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**CD** 是紧随 CI 流程之后的过程。在此过程中，CI 阶段的输出会被打包并无错误地交付到生产阶段。这非常有帮助，因为我们始终拥有一个经过测试、一致且准备部署的主分支。'
- en: In DevOps, you can also have a **continuous deployment** process in place, where
    you can automate the deployment of your code modifications to the final production
    environments without manual intervention.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DevOps 中，您还可以实施**持续部署**流程，在此流程中，您可以自动化将代码修改部署到最终生产环境，而无需人工干预。
- en: 'The typical DevOps CI/CD loop is represented in the following famous "loop"
    diagram:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的 DevOps CI/CD 循环在以下著名的“循环”图中表示：
- en: '![Figure 4.1 – DevOps CI/CD loop'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.1 – DevOps CI/CD 循环'
- en: '](img/B16392_04_001.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_001.jpg)'
- en: Figure 4.1 – DevOps CI/CD loop
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1 – DevOps CI/CD 循环
- en: 'A typical CI/CD pipeline implementation contains the following stages:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的 CI/CD 流水线实现包含以下阶段：
- en: '**Commit stage**: Here, new code modifications are integrated into the code
    base and a set of unit tests are performed in order to check code integrity and
    quality.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提交阶段**：在这里，新的代码修改被集成到代码库中，并执行一组单元测试，以检查代码的完整性和质量。'
- en: '**Build stage**: Here, the code is automatically built and then the final results
    of the build process (artifacts) are pushed to the final registry.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建阶段**：在这里，代码会自动构建，然后将构建过程的最终结果（构建产物）推送到最终的注册表。'
- en: '**Test stage**: The build code will be deployed to preproduction, where the
    final testing will be performed and then go to production deployment. Here, the
    code is tested by adopting alpha and beta deployments. The alpha deployment stage
    is where developers check the performance of their new builds and the interactions
    between builds. In the Beta deployment stage, developers execute manual testing
    in order to double-check whether the application is working correctly.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试阶段**：构建的代码将部署到预生产环境，在那里进行最终测试，然后再进行生产部署。在这里，代码会通过采用 Alpha 和 Beta 部署进行测试。Alpha
    部署阶段是开发人员检查新构建的性能以及不同构建之间的交互。在 Beta 部署阶段，开发人员执行手动测试，以再次检查应用程序是否正常工作。'
- en: '**Production deployment stage**: This is where the final application, after
    successfully passing all the testing requirements, goes live to the production
    stage.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生产部署阶段**：这是最终应用程序在成功通过所有测试要求后，正式发布到生产环境的阶段。'
- en: 'There are lots of benefits of implementing a CI/CD process in your organizations.
    The main benefits are as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的组织中实施 CI/CD 流程有很多好处，主要的好处如下：
- en: '**Improved code quality and early bug detection**: By adopting automated tests,
    you can discover bugs and issues at an early stage and fix them accordingly.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高代码质量和早期发现 bug**：通过采用自动化测试，你可以在早期发现 bug 和问题，并及时修复。'
- en: '**Complete traceability**: The whole build, test, and deployment process is
    tracked and can be analyzed later. This guarantees that you can inspect which
    changes in a particular build are included and the impact that they can have on
    the final tests or release.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完整的可追溯性**：整个构建、测试和部署过程都被追踪，可以在之后进行分析。这确保了你可以检查特定构建中包含的哪些更改，以及这些更改对最终测试或发布的影响。'
- en: '**Faster testing and release phases**: Automating building and testing of your
    code base on every new commit (or before a release).'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更快的测试和发布阶段**：自动化地在每次提交（或发布前）对代码库进行构建和测试。'
- en: 'In the next section, we''ll provide an overview of the service offered by the
    Azure platform for implementing CI/CD: Azure Pipelines.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将概述 Azure 平台提供的用于实现 CI/CD 的服务：Azure Pipelines。
- en: Overview of Azure Pipelines
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Pipelines 概述
- en: '**Azure Pipelines** is a cloud service offered by the Azure platform that allows
    you to automate the building, testing, and releasing phases of your development
    life cycle (CI/CD). Azure Pipelines works with any language or platform, it''s
    integrated in Azure DevOps, and you can build your code on Windows, Linux, or
    macOS machines.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**Azure Pipelines** 是 Azure 平台提供的一项云服务，允许你自动化开发生命周期的构建、测试和发布阶段（CI/CD）。Azure
    Pipelines 支持任何语言或平台，它集成在 Azure DevOps 中，你可以在 Windows、Linux 或 macOS 机器上构建你的代码。'
- en: 'Azure Pipelines is free for public projects, while for private projects, you
    have up to 1,800 minutes'' (30 hours) worth of pipelines for free each month.
    More information about pricing can be found here:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Pipelines 对于公共项目是免费的，而对于私有项目，每月提供最多 1,800 分钟（30 小时）的管道使用时间。有关定价的更多信息，请参见这里：
- en: '[https://azure.microsoft.com/en-us/pricing/details/devops/azure-devops-services/](https://azure.microsoft.com/en-us/pricing/details/devops/azure-devops-services/)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://azure.microsoft.com/en-us/pricing/details/devops/azure-devops-services/](https://azure.microsoft.com/en-us/pricing/details/devops/azure-devops-services/)'
- en: 'Some important feature of Azure Pipelines can be summarized as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Pipelines 的一些重要特性总结如下：
- en: It's platform and language independent, which means you can build code on every
    platform using the code base you want.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是平台和语言独立的，这意味着你可以在任何平台上使用你想要的代码库构建代码。
- en: It can be integrated with different types of repositories (Azure Repos, GitHub,
    GitHub Enterprise, BitBucket, and so on).
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以与不同类型的代码库集成（Azure Repos、GitHub、GitHub Enterprise、BitBucket 等）。
- en: Lots of extensions (standard and community-driven) are available for building
    your code and for handling custom tasks.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有很多扩展（标准和社区驱动）可用于构建你的代码和处理自定义任务。
- en: Allows you to deploy your code to different cloud vendors.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许你将代码部署到不同的云服务商。
- en: You can work with containerized applications such as Docker, Azure Container
    Registry, or Kubernetes.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以处理容器化应用程序，如 Docker、Azure 容器注册表或 Kubernetes。
- en: 'To use Azure Pipelines, you need the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Azure Pipelines，你需要具备以下条件：
- en: An organization in Azure DevOps, where you can create public or private projects
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Azure DevOps 组织，你可以在其中创建公共或私有项目
- en: A source code stored in a version control system (such as Azure DevOps Repos
    or GitHub)
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储在版本控制系统中的源代码（如 Azure DevOps Repos 或 GitHub）
- en: 'Azure Pipelines works with the following schema:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Pipelines 按如下架构工作：
- en: '![Figure 4.2 – Azure Pipelines schema'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.2 – Azure Pipelines 架构'
- en: '](img/B16392_04_002.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_002.jpg)'
- en: Figure 4.2 – Azure Pipelines schema
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2 – Azure Pipelines 架构
- en: When your code is committed to a particular branch inside a repository, the
    **build pipeline** engine starts, build and test tasks are executed, and if all
    is successfully completed, your app is built and you have the final output (artifact).
    You can also create a **release pipeline** that takes the output of your build
    and releases it to the target environment (staging or production).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的代码提交到某个仓库中的特定分支时，**构建管道**引擎启动，构建和测试任务会执行，如果所有任务都成功完成，你的应用程序就会构建完成，并且你会得到最终的输出（工件）。你还可以创建一个**发布管道**，将构建的输出发布到目标环境（预发布或生产环境）。
- en: 'To start using Azure Pipelines, you need to create a **pipeline**. A pipeline
    in Azure DevOps can be created in the following two ways:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 Azure Pipelines，你需要创建一个**管道**。Azure DevOps 中的管道可以通过以下两种方式创建：
- en: '**Using the Classic interface**: This allows you to select some tasks visually
    from a list of possible tasks. You only need to fill in the parameters for these
    tasks.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用经典界面**：这允许你从可能的任务列表中以视觉方式选择一些任务。你只需要填写这些任务的参数。'
- en: '**Using a scripting language called YAML**: The pipeline can be defined by
    creating a YAML file inside your repository with all the needed steps.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用一种名为 YAML 的脚本语言**：通过在你的仓库中创建一个 YAML 文件，并在其中定义所有需要的步骤来定义管道。'
- en: Using the classic interface can be easier initially, but remember that many
    features are only available on YAML pipelines. A YAML pipeline definition is a
    file, and this can be versioned and controlled just like any other file inside
    a repository. You can easily move the pipeline definition between projects (this
    is not possible with the Classic interface).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用经典界面最初可能更为简单，但请记住，许多功能仅在 YAML 管道中可用。YAML 管道定义是一个文件，并且可以像仓库中的其他文件一样进行版本控制和管理。你可以轻松地在项目之间移动管道定义（经典界面无法实现此操作）。
- en: 'An Azure Pipeline can be represented as follows (courtesy of Microsoft):'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Azure Pipeline 可以如下表示（感谢 Microsoft）：
- en: '![Figure 4.3 – Representation of an Azure Pipeline'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.3 – Azure Pipeline 表示'
- en: '](img/B16392_04_003.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_003.jpg)'
- en: Figure 4.3 – Representation of an Azure Pipeline
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3 – Azure Pipeline 表示
- en: A pipeline starts from a **trigger** (a manual trigger, a push inside a repository,
    a pull request, or a schedule). A pipeline is normally composed of one or more
    **stages** (logical separation of concerns in a pipeline, such as building, testing,
    deployment, and so on; they can run in parallel), and each stage contains one
    or more **jobs** (a set of steps that can also run in parallel). Every pipeline
    contains at least one stage if you don't explicitly create it. Each job runs on
    an **agent** (service or piece of software that executes the job). Every step
    is composed of a **task** that performs some action on your code (sequentially).
    The final output of a pipeline is an **artifact** (collection of files or packages
    published by the build).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一个管道从**触发器**（手动触发、仓库中的推送、拉取请求或计划任务）开始。管道通常由一个或多个**阶段**（管道中的逻辑分离，如构建、测试、部署等；它们可以并行运行）组成，每个阶段包含一个或多个**作业**（一组也可以并行运行的步骤）。每个管道至少包含一个阶段，如果你没有显式创建，它会自动创建。每个作业都在一个**代理**（执行作业的服务或软件）上运行。每个步骤由一个**任务**组成，该任务对你的代码执行某些操作（按顺序执行）。管道的最终输出是一个**工件**（构建过程中发布的文件或包的集合）。
- en: When creating a pipeline, you need to define a set of jobs and tasks for automating
    your builds (or multi-phased builds). You have native support for testing integration,
    release gates, automatic reporting, and so on.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建管道时，你需要定义一组任务和作业，用于自动化构建（或多阶段构建）。你可以原生支持集成测试、发布门、自动报告等功能。
- en: 'When defining multiple jobs within a pipeline, these jobs are executed in parallel.
    A pipeline that contains multiple jobs is called a **fan-out** scenario:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在管道中定义多个作业时，这些作业会并行执行。包含多个作业的管道被称为**扇出**场景：
- en: '![Figure 4.4 – Fan-out pipeline'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.4 – 扩展管道'
- en: '](img/B16392_04_004.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_004.jpg)'
- en: Figure 4.4 – Fan-out pipeline
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – 扩展管道
- en: 'A pipeline with multiple jobs in a single stage can be represented as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含多个作业的单个阶段管道可以表示如下：
- en: '[PRE0]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you''re using stages when defining your pipeline, this is what is called
    a fan-out/fan-in scenario:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在定义管道时使用阶段，这就属于所谓的扩展/汇集场景：
- en: '![Figure 4.5 – Fan-out pipeline'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.5 – 扩展管道'
- en: '](img/B16392_04_005.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_005.jpg)'
- en: Figure 4.5 – Fan-out pipeline
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5 – 扩展管道
- en: Here, each stage is a fan-in operation, where all the jobs in the stage (which
    can consist of multiple tasks that run in sequence) must be finished before the
    next stage can be triggered (only one stage can be executing at a time). We'll
    talk about multi-stage pipelines later in this chapter.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，每个阶段都是一个汇集操作，阶段中的所有作业（可以由多个顺序执行的任务组成）必须完成，才能触发下一个阶段（每次只能执行一个阶段）。我们将在本章后面讨论多阶段管道。
- en: Understanding build agents
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解构建代理
- en: To build and deploy your code using Azure Pipelines, you need at least one agent.
    An agent is a service that runs the jobs defined in your pipeline. The execution
    of these jobs can occur directly on the agent's host machine or in containers.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Azure Pipelines 构建和部署代码，您至少需要一个代理。代理是一个运行管道中定义作业的服务。这些作业的执行可以直接发生在代理的主机机器上，也可以在容器中进行。
- en: 'When defining agents for your pipeline, you have essentially two types of possible
    agents:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在为您的管道定义代理时，您基本上有两种类型的代理：
- en: '**Microsoft-hosted agents**: This is a service totally managed by Microsoft
    and it''s cleared on every execution of the pipeline (on each pipeline execution,
    you have a fresh new environment).'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Microsoft 托管代理**：这是一个完全由 Microsoft 管理的服务，在每次管道执行时都会清除（每次管道执行时，您都会获得一个全新的环境）。'
- en: '**Self-hosted agents**: This is a service that you need to set up and manage
    by yourself. This can be a custom virtual machine on Azure or a custom on-premise
    machine inside your infrastructure. In a self-hosted agent, you can install all
    the software you need for your builds, and this is persisted on every pipeline
    execution. A self-hosted agent can be on Windows, Linux, macOS, or in a Docker
    container.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自托管代理**：这是一个需要您自己设置和管理的服务。它可以是 Azure 上的自定义虚拟机，也可以是您基础设施内的自定义本地机器。在自托管代理中，您可以安装构建所需的所有软件，并且这些软件会在每次管道执行时保留下来。自托管代理可以运行在
    Windows、Linux、macOS 或 Docker 容器中。'
- en: Microsoft-hosted agents
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Microsoft 托管代理
- en: 'Microsoft-hosted agents is the simplest way to define an agent for your pipeline.
    Azure Pipelines provides a Microsoft-hosed agent pool by default called **Azure
    Pipelines**:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft 托管代理是为您的管道定义代理的最简单方式。Azure Pipelines 默认提供一个名为**Azure Pipelines**的
    Microsoft 托管代理池：
- en: '![Figure 4.6 – Azure Pipelines default agent pool'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.6 – Azure Pipelines 默认代理池'
- en: '](img/B16392_04_006.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_006.jpg)'
- en: Figure 4.6 – Azure Pipelines default agent pool
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6 – Azure Pipelines 默认代理池
- en: 'By selecting this agent pool, you can create different virtual machine types
    for executing your pipeline. At the time of writing, the available standard agent
    types are as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择这个代理池，您可以为执行管道创建不同类型的虚拟机。截止到本文写作时，可用的标准代理类型如下：
- en: '![Table 1.1'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '![表 1.1'
- en: '](img/Table_1.1.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Table_1.1.jpg)'
- en: Table 1.1
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1.1
- en: 'Each of these images has its own set of software automatically installed. You
    can install additional tools by using the pre-defined Tool Installer task in your
    pipeline definition. More information can be found here:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 每个镜像都具有一套自动安装的软件。您可以通过在管道定义中使用预定义的工具安装程序任务来安装额外的工具。更多信息请参阅：
- en: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/?view=azure-devops#tool.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/?view=azure-devops#tool.
- en: 'When you create a pipeline using a Microsoft-hosted agent, you just need to
    specify the name of the virtual machine image to use for your agent from the preceding
    table. As an example, this is the definition of a hosted agent that''s using Windows
    Server 2019 with a Visual Studio 2019 image:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 Microsoft 托管代理创建管道时，您只需要从前面的表格中指定要为代理使用的虚拟机镜像的名称。例如，这是使用 Windows Server
    2019 和 Visual Studio 2019 镜像的托管代理定义：
- en: '[PRE11]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When using a Microsoft-hosted agent, you need to remember the following:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Microsoft 托管代理时，您需要记住以下几点：
- en: You cannot sign in on the agent machine.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您不能在代理机器上登录。
- en: The agent runs on a Standard DS2v2 Azure Virtual Machine and you cannot increase
    that capacity.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该代理运行在标准 DS2v2 Azure 虚拟机上，且无法增加该容量。
- en: It runs as an administrator user on the Windows platform and as a *passwordless
    sudo* user on the Linux platform.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它以管理员用户身份在 Windows 平台上运行，并以 *无密码 sudo* 用户身份在 Linux 平台上运行。
- en: For public projects, you have 10 free Microsoft-hosted parallel jobs that can
    run for up to 360 minutes each time, with no overall time limit per month.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于公共项目，您有 10 个免费的 Microsoft 托管并行作业，每个作业最多可运行 360 分钟，每月没有总体时间限制。
- en: For private projects, you have one free parallel job that can run for up to
    60 minutes each time, with the maximum being 1,800 minutes (30 hours) per month.
    If you need more capacity, you can pay for additional parallel jobs. By doing
    this, you can run each job for up to 360 minutes.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于私人项目，您有一个免费的并行作业，每个作业最多可运行 60 分钟，每月最多为 1,800 分钟（30 小时）。如果您需要更多的容量，可以支付额外的并行作业费用。这样，每个作业的运行时间最多为
    360 分钟。
- en: The Microsoft-hosted agent runs in the same Azure geography as your Azure DevOps
    organization, but it's not guaranteed that it will run in the same region too
    (an Azure geography contains one or more regions).
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft 托管代理运行在与您的 Azure DevOps 组织相同的 Azure 地理区域内，但不能保证它也会在相同的区域内运行（一个 Azure
    地理区域包含一个或多个区域）。
- en: Self-hosted agents
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自托管代理
- en: While Microsoft-hosted agents are a SaaS service, self-hosted agents are private
    agents that you can configure as per your needs by using Azure virtual machines
    or directly using your on-premise infrastructure. You are responsible for providing
    all the necessary software and tools to execute your pipeline and you're responsible
    for maintaining and upgrading your agent.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Microsoft 托管代理是一个 SaaS 服务，但自托管代理是私有代理，您可以通过使用 Azure 虚拟机或直接使用本地基础设施来根据您的需求进行配置。您负责提供执行管道所需的所有软件和工具，并负责维护和升级代理。
- en: 'A self-hosted agent can be installed on the following platforms:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 自托管代理可以安装在以下平台上：
- en: Windows
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows
- en: Linux
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux
- en: macOS
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS
- en: Docker
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker
- en: 'Creating a self-hosted agent involves completing the following activities:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自托管代理包括完成以下活动：
- en: Prepare the environment
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备环境
- en: Prepare permissions on Azure DevOps
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Azure DevOps 上准备权限
- en: Download and configure the agent
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载并配置代理
- en: Start the agent
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动代理
- en: These steps are similar for all the environments. Next, we'll learn how to create
    a self-hosted Windows agent.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤在所有环境中是相似的。接下来，我们将学习如何创建自托管 Windows 代理。
- en: Creating a self-hosted Windows agent
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建自托管 Windows 代理
- en: A self-hosted Windows agent is used to build and deploy applications built on
    top of Microsoft's platforms (such as .NET applications, Azure cloud apps, and
    so on) but also for other types of platforms, such as Java and Android apps.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 自托管 Windows 代理用于构建和部署基于 Microsoft 平台（如 .NET 应用程序、Azure 云应用程序等）构建的应用程序，也可用于其他平台类型，如
    Java 和 Android 应用程序。
- en: 'The first step to perform when creating an agent is to register the agent in
    your Azure DevOps organization. To do so, you need to sign into your DevOps organization
    as an administrator and from the **User Settings** menu, click on **Personal access
    tokens**:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 创建代理时执行的第一步是将代理注册到您的 Azure DevOps 组织中。为此，您需要以管理员身份登录到您的 DevOps 组织，并从 **用户设置**
    菜单中点击 **个人访问令牌**：
- en: '![Figure 4.7 – Personal access tokens'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.7 – 个人访问令牌'
- en: '](img/B16392_04_007.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_007.jpg)'
- en: Figure 4.7 – Personal access tokens
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.7 – 个人访问令牌
- en: 'Here, you can create a new personal access token for your organization with
    an expiration date and with full access or with a custom defined access level
    (if you select the custom defined scope, you need to select the permission you
    want for each scope). To see the complete list of available scopes, click on the
    **Show all scopes** link at the bottom of this window:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以为您的组织创建一个新的个人访问令牌，设置过期日期，并选择完全访问或自定义定义的访问级别（如果选择自定义定义范围，您需要为每个范围选择所需的权限）。要查看可用范围的完整列表，请点击窗口底部的
    **显示所有范围** 链接：
- en: '![Figure 4.8 – Create a new personal access token'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.8 – 创建一个新的个人访问令牌'
- en: '](img/B16392_04_008.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_008.jpg)'
- en: Figure 4.8 – Create a new personal access token
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.8 – 创建一个新的个人访问令牌
- en: Please check that the **Agent Pools** scope has the **Read & manage** permission
    enabled.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保 **代理池** 范围内启用了 **读取和管理** 权限。
- en: When finished, click on **Create** and then copy the generated token before
    closing the window (it will only be shown once).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，点击 **创建**，然后在关闭窗口之前复制生成的令牌（它只会显示一次）。
- en: Important Note
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The user that you will be using for the agent must be a user with permissions
    to register the agent. You can check this by going to **Organization Settings**
    | **Agent pools**, selecting the **Default** pool, and clicking on **Security**.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 用于代理的用户必须具备注册代理的权限。你可以通过进入**组织设置** | **代理池**，选择**默认**池并点击**安全**来检查此权限。
- en: 'Now, you need to download the agent software and configure it. From **Organization
    Settings** | **Agent Pools**, select the **Default** pool and from the **Agents**
    tab, click on **New agent**:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你需要下载代理软件并进行配置。从**组织设置** | **代理池**，选择**默认**池，在**代理**选项卡中点击**新建代理**：
- en: '![Figure 4.9 – Creating a new agent'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.9 – 创建新代理'
- en: '](img/B16392_04_009.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_009.jpg)'
- en: Figure 4.9 – Creating a new agent
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.9 – 创建新代理
- en: 'The **Get the agent** window will open. Select **Windows** as the target platform,
    select **x64** or **x86** as your target agent platform (machine) accordingly,
    and then click on the **Download** button:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**获取代理**窗口将打开。选择**Windows**作为目标平台，根据你的目标代理平台（机器），选择**x64**或**x86**，然后点击**下载**按钮：'
- en: '![Figure 4.10 – Agent software download page'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.10 – 代理软件下载页面'
- en: '](img/B16392_04_010.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_010.jpg)'
- en: Figure 4.10 – Agent software download page
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.10 – 代理软件下载页面
- en: 'This procedure will download a package (normally called `vsts-agent-win-x64-2.166.4.zip`).
    You need to run this package (`config.cmd`) on the agent machine (an Azure VM
    or your on-premise server, which will act as an agent for your builds):'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程将下载一个包（通常名为`vsts-agent-win-x64-2.166.4.zip`）。你需要在代理机器（一个Azure虚拟机或本地服务器，它将作为你的构建代理）上运行这个包（`config.cmd`）：
- en: '![Figure 4.11 – Agent software package'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.11 – 代理软件包'
- en: '](img/B16392_04_011.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_011.jpg)'
- en: Figure 4.11 – Agent software package
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.11 – 代理软件包
- en: 'The setup will ask you for the following:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 设置将要求你输入以下内容：
- en: The URL of your Azure DevOps organization ([https://dev.azure.com/](https://dev.azure.com/){your-organization})
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的Azure DevOps组织的URL（[https://dev.azure.com/](https://dev.azure.com/){your-organization}）
- en: The personal access token to use (created previously)
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用的个人访问令牌（之前创建的）
- en: When running the agent (interactively or as a service), it's recommended to
    run it as a service if you want to automate builds.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代理时（无论是交互式运行还是作为服务运行），如果你想自动化构建，建议将其作为服务运行。
- en: 'After inserting these parameters, the setup registers the agent:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 输入这些参数后，设置将注册代理：
- en: '![Figure 4.12 – Agent registration'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.12 – 代理注册'
- en: '](img/B16392_04_012.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_012.jpg)'
- en: Figure 4.12 – Agent registration
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.12 – 代理注册
- en: To register the agent, you need to insert the agent pool, the agent name, and
    the work folder (you can leave the default value as-is).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要注册代理，你需要插入代理池、代理名称和工作文件夹（你可以保持默认值不变）。
- en: Finally, you need to decide whether your agent must be executed *interactively* or *as
    a service*. As we mentioned previously, running the agent as a service is recommended,
    but in many cases, the interactive option can be helpful because it gives you
    a console where you can see the status and running UI tests.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你需要决定是否让代理以*交互式*或*作为服务*的方式运行。正如我们之前提到的，建议将代理作为服务运行，但在很多情况下，交互式选项也很有帮助，因为它会给你一个控制台，便于查看状态并运行UI测试。
- en: In both cases, please be aware of the user account you select for running the
    agent. The default account is the built-in Network Service user, but this user
    normally doesn't have all the needed permissions on local folders. Using an administrator
    account can help you solve a lot of problems.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，请注意你为运行代理所选择的用户帐户。默认帐户是内置的网络服务用户，但该用户通常没有本地文件夹的所有必需权限。使用管理员帐户可以帮助解决很多问题。
- en: 'If the setup has been completed successfully, you should see a service running
    on your agent machine and a new agent that pops up on your agent pool in Azure
    DevOps:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置成功，你应该能看到在代理机器上运行的服务，并且在Azure DevOps中的代理池中弹出一个新代理：
- en: '![4.13 – New agent created'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '![4.13 – 新代理创建'
- en: '](img/B16392_04_013.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_013.jpg)'
- en: 4.13 – New agent created
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 4.13 – 新代理创建
- en: 'If you select the agent and then go to the **Capabilities** section, you will
    be able to see all its capabilities (OS version, OS architecture, computer name,
    software installed, and so on):'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择代理后进入**功能**部分，你将能够看到它的所有功能（操作系统版本、操作系统架构、计算机名称、已安装的软件等）：
- en: '![Figure 4.14 – Agent capabilities'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.14 – 代理功能'
- en: '](img/B16392_04_014.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_014.jpg)'
- en: Figure 4.14 – Agent capabilities
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.14 – 代理功能
- en: The agent's capabilities can be automatically discovered by the agent software
    or added by you (user-defined capabilities) if you click on the **Add a new capability**
    action. Capabilities are used by the pipeline engine to redirect a particular
    build to the correct agent according to the required capabilities for the pipeline
    (demands).
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 代理的能力可以通过代理软件自动发现，或者如果你点击**添加新能力**操作，你也可以由用户定义能力。能力被流水线引擎用于根据流水线所需的能力（需求）将特定构建重定向到正确的代理。
- en: When the agent is online, it's ready to accept your code build, which should
    be queued.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 当代理在线时，它准备好接受你的代码构建，这些构建应该排队等待。
- en: Remember that you can also install multiple agents on the same machine (for
    example, if you want the possibility to execute core pipelines or handle jobs
    in parallel), but this scenario is only recommended if the agents will not share
    resources.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你还可以在同一台机器上安装多个代理（例如，如果你希望能够执行核心流水线或并行处理任务），但这种情况仅建议在代理不共享资源时使用。
- en: When to use a Microsoft-hosted or a self-hosted agent
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 何时使用微软托管代理或自托管代理
- en: Microsoft-hosted agents are normally useful when you have a standard code base
    and you don't need particular software or environment configuration to build your
    code. If you're in this scenario, using a Microsoft-hosted agent is recommended
    because you don't have to worry about creating environments. As an example, if
    you need to build an Azure Function project, normally, you don't have the need
    to install custom software on the build agent and the Microsoft-hosted agent can
    work perfectly.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 微软托管代理通常在你有一个标准的代码库，且不需要特定软件或环境配置来构建代码时非常有用。如果你处于这种情况，建议使用微软托管代理，因为你不必担心创建环境。例如，如果你需要构建一个Azure
    Function项目，通常你不需要在构建代理上安装自定义软件，微软托管代理可以完美工作。
- en: Self-hosted agents are the way to go when you need a particular environment
    configuration, when you need a particular piece of software or tools installed
    on the agent, and when you need more power for your builds. Self-hosted agents
    are also the way to go when you need to preserve the environment between each
    run of your builds. A self-hosted agent is normally the right choice when you
    need to have better control of your agent or you wish to deploy your build to
    on-premise environments (not accessible externally). It also normally allows you
    to save money.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 自托管代理是在需要特定环境配置时的最佳选择，尤其是当你需要在代理上安装特定的软件或工具，或者需要更强大的构建能力时。自托管代理也是在你需要在每次构建运行之间保持环境一致性时的理想选择。通常，当你需要更好地控制代理，或者希望将构建部署到本地环境（外部不可访问）时，自托管代理是正确的选择。它通常还可以帮助你节省成本。
- en: Now that we've discussed about the possible build agents that you can use for
    your build pipelines, in the next section, we'll provide an overview of YAML,
    the scripting language that allows you to define a pipeline.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了可以用于构建流水线的可能代理，在接下来的部分中，我们将概述YAML，这种脚本语言允许你定义流水线。
- en: Overview of the YAML language
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: YAML语言概述
- en: '**YAML**, an acronym for **YAML Ain''t Markup Language**, is a human-readable
    scripting language used for data serialization and normally used for handling
    configurations definitions for applications. It can be considered a superset of
    JSON.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '**YAML**，即**YAML 不是标记语言**，是一种可读性强的脚本语言，通常用于数据序列化和处理应用程序配置定义。它可以视为JSON的超集。'
- en: YAML uses indentation for handling the structure of the object's definitions,
    and it's insensitive to quotation marks and braces. It's simply a data representation
    language and is not used for executing commands.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: YAML使用缩进来处理对象定义的结构，并且对引号和大括号不敏感。它仅仅是一种数据表示语言，不能用于执行命令。
- en: With Azure DevOps, YAML is extremely important because it allows you to define
    a pipeline by using a script definition instead of a graphical interface (that
    cannot be ported between projects).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在Azure DevOps中，YAML至关重要，因为它允许你通过使用脚本定义来定义流水线，而不是使用图形界面（图形界面无法在项目之间迁移）。
- en: 'The official YAML website can be found here:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 官方YAML网站可以在这里找到：
- en: '[http://yaml.org/](http://yaml.org/)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://yaml.org/](http://yaml.org/)'
- en: 'A YAML structure is based on key-value elements:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: YAML结构是基于键值元素的：
- en: '`Key: Value # This is a comment`'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`Key: Value # 这是一个注释`'
- en: In the following sections, we'll learn how to define objects in YAML.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将学习如何在YAML中定义对象。
- en: Scalars
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标量
- en: 'As an example, the following are scalar variables that have been defined in
    YAML:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下是已在 YAML 中定义的标量变量：
- en: '[PRE14]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can also define multi-line keys by using `?`, followed by a space, as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过使用 `?`，后跟一个空格来定义多行键，如下所示：
- en: '[PRE15]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Collections and lists
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集合和列表
- en: 'This is a YAML definition for a collection object:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于集合对象的 YAML 定义：
- en: '[PRE19]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You can also define nested collections:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以定义嵌套的集合：
- en: '[PRE23]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Dictionaries
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字典
- en: 'You can define a `Dictionary` object by using YAML in the following way:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下方式使用 YAML 定义一个 `Dictionary` 对象：
- en: '[PRE30]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Document structure
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档结构
- en: 'YAML uses three dashes, `---`, to separate directives from document content
    and to identify the start of a document. As an example, the following YAML defines
    two documents in a single file:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: YAML 使用三个破折号 `---` 来分隔指令和文档内容，并标识文档的开始。例如，以下 YAML 定义了一个文件中的两个文档：
- en: '[PRE34]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Complex object definition
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复杂对象定义
- en: 'As an example of how to define a complex object in YAML, the following is the
    representation used for an `Invoice` object:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 作为定义复杂对象的示例，以下是 `Invoice` 对象使用的表示方式：
- en: '[PRE45]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Now that we've provided a quick overview of the YAML syntax, in the next section,
    we'll learn how to create a build pipeline with Azure DevOps.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经简要概述了 YAML 语法，接下来的章节中，我们将学习如何使用 Azure DevOps 创建构建管道。
- en: Creating a build pipeline with Azure DevOps
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Azure DevOps 创建构建管道
- en: Having a build pipeline in place is a fundamental step if you want to implement
    continuous integration for your code (having your code automatically built and
    tested on every commit).
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想为代码实现持续集成（在每次提交时自动构建和测试代码），那么拥有一个构建管道是基础步骤。
- en: The prerequisite to creating a build pipeline with Azure DevOps is obviously
    to have some code stored inside a repository.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Azure DevOps 创建构建管道的前提条件显然是代码已经存储在一个仓库中。
- en: 'To create a build pipeline with Azure DevOps, you need to go to the **Pipelines**
    hub and select the **Pipelines** action:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Azure DevOps 创建构建管道，你需要进入 **管道** 中心并选择 **管道** 操作：
- en: '![Figure 4.15 – Build pipeline creation'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.15 – 构建管道创建'
- en: '](img/B16392_04_015.jpg)'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_015.jpg)'
- en: Figure 4.15 – Build pipeline creation
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.15 – 构建管道创建
- en: 'From here, you can create a new build pipeline by selecting the **New pipeline**
    button. When pressed, you will see the following screen, which asks you for a
    code repository:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以通过选择 **新建管道** 按钮来创建一个新的构建管道。当点击此按钮时，你将看到以下界面，它会询问你代码仓库的信息：
- en: '![Figure 4.16 – Selecting a repository'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.16 – 选择一个仓库'
- en: '](img/B16392_04_016.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_016.jpg)'
- en: Figure 4.16 – Selecting a repository
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.16 – 选择一个仓库
- en: 'This screen is extremely important. From here, you can start creating a build
    pipeline in two possible ways (described previously):'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 这个屏幕非常重要。通过这个界面，你可以以两种可能的方式开始创建构建管道（如前所述）：
- en: Using a YAML file to create your pipeline definition. This is what happens when
    you select the repository in this window.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 YAML 文件来创建你的管道定义。这是在此窗口中选择仓库时发生的事情。
- en: Using the classic editor (graphical user interface). This is what happens when
    you click on the **Use the classic editor** link at the bottom of this page.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用经典编辑器（图形用户界面）。这是当你点击页面底部的 **使用经典编辑器** 链接时发生的事情。
- en: In the next section, we'll learn how to create a build pipeline by using these
    two methods.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将学习如何通过这两种方法创建构建管道。
- en: Pipeline definition with the classic editor
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用经典编辑器定义管道
- en: The classic editor permits you to define a build pipeline for your project graphically
    by selecting pre-defined actions. As we mentioned previously, a pipeline definition
    created in this way is not under source control.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 经典编辑器允许你通过选择预定义的操作图形化地定义项目的构建管道。如前所述，使用这种方式创建的管道定义不在源代码管理之下。
- en: 'When you click on the **Use the classic editor** link, you need to select the
    repository where your code is stored (**Azure Repos Git**, **GitHub**, **GitHub
    Enterprise Server**, **Subversion**, **TFVC**, **Bitbucket Cloud**, or **Other
    Git**) and the branch that the build pipeline will be connected to:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击 **使用经典编辑器** 链接时，你需要选择存储代码的仓库（**Azure Repos Git**、**GitHub**、**GitHub Enterprise
    Server**、**Subversion**、**TFVC**、**Bitbucket Cloud** 或 **其他 Git**）以及构建管道将连接的分支：
- en: '![Figure 4.17 – Classic editor pipeline definition'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.17 – 经典编辑器管道定义'
- en: '](img/B16392_04_017.jpg)'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_017.jpg)'
- en: Figure 4.17 – Classic editor pipeline definition
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.17 – 经典编辑器管道定义
- en: 'Then, you need to choose a template for the kind of app you''re building. You
    have a set of predefined templates to choose from (that you can customize later),
    but you can also start from an empty template:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您需要选择一个适合您正在构建的应用程序类型的模板。您可以选择一组预定义的模板（稍后可以自定义），也可以从空模板开始：
- en: '![Figure 4.18 – Pipeline template selection'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.18 – 管道模板选择'
- en: '](img/B16392_04_018.jpg)'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_018.jpg)'
- en: Figure 4.18 – Pipeline template selection
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.18 – 管道模板选择
- en: If predefined templates fit your needs, you can start by using them; otherwise,
    it's recommended to create a custom pipeline by selecting the actions you need.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 如果预定义模板满足您的需求，您可以直接使用它们；否则，建议通过选择所需的操作创建自定义管道。
- en: 'Here, my application that''s stored in the Azure DevOps project repository
    is an ASP.NET web application (an e-commerce website project called `PartsUnlimited`;
    you can find the public repository at the following URL: [https://github.com/Microsoft/PartsUnlimited](https://github.com/Microsoft/PartsUnlimited)),
    so I''ve selected the ASP.NET template.'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我的应用程序存储在 Azure DevOps 项目仓库中，是一个 ASP.NET Web 应用程序（一个名为 `PartsUnlimited`
    的电子商务网站项目；您可以在以下网址找到公共仓库：[https://github.com/Microsoft/PartsUnlimited](https://github.com/Microsoft/PartsUnlimited)），因此我选择了
    ASP.NET 模板。
- en: 'When selected, this is the pipeline template that will be created for you automatically:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 选择后，这是将自动为您创建的管道模板：
- en: '![Figure 4.19 – Pipeline created from a template'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.19 – 从模板创建的管道'
- en: '](img/B16392_04_019.jpg)'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_019.jpg)'
- en: Figure 4.19 – Pipeline created from a template
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.19 – 从模板创建的管道
- en: Let's check every section of the pipeline in detail.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细查看管道的每个部分。
- en: 'The pipeline (here, this is called `PartsUnlimited-demo-pipeline`) runs on
    a Microsoft-hosted agent (Azure Pipelines agent pool) based on the **vs2017-win2016**
    template (Windows Server 2016 with Visual Studio 2017), as shown in the following
    screenshot:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 该管道（在这里叫做 `PartsUnlimited-demo-pipeline`）基于**vs2017-win2016**模板（Windows Server
    2016 和 Visual Studio 2017），在 Microsoft 托管的代理（Azure Pipelines 代理池）上运行，如下截图所示：
- en: '![Figure 4.20 – Agent specification on the pipeline'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.20 – 管道中的代理规格'
- en: '](img/B16392_04_020.jpg)'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_020.jpg)'
- en: Figure 4.20 – Agent specification on the pipeline
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.20 – 管道中的代理规格
- en: 'The agent job starts by installing the NuGet package manager and restoring
    the required packages for building the project in the selected repository. For
    these actions, the pipeline definition contains the tasks that you can see in
    the following screenshot:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 代理作业首先安装 NuGet 包管理器，并还原所需的包，以便在所选仓库中构建项目。对于这些操作，管道定义包含了您在以下截图中看到的任务：
- en: '![Figure 4.21 – NuGet tasks'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.21 – NuGet 任务'
- en: '](img/B16392_04_021.jpg)'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_021.jpg)'
- en: Figure 4.21 – NuGet tasks
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.21 – NuGet 任务
- en: 'Then, there''s a task for building the solution:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，有一个用于构建解决方案的任务：
- en: '![Figure 4.22 – Build solution task'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.22 – 构建解决方案任务'
- en: '](img/B16392_04_022.jpg)'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_022.jpg)'
- en: Figure 4.22 – Build solution task
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.22 – 构建解决方案任务
- en: 'There''s also a task for testing the solution and publishing the test results:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个用于测试解决方案并发布测试结果的任务：
- en: '![Figure 4.23 – Test Assemblies task'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.23 – 测试程序集任务'
- en: '](img/B16392_04_023.jpg)'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_023.jpg)'
- en: Figure 4.23 – Test Assemblies task
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.23 – 测试程序集任务
- en: 'The last steps are for publishing the sources of the build process as artifacts
    (output of the build):'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的步骤是将构建过程的源代码作为构件（构建输出）发布：
- en: '![Figure 4.24 – Publishing tasks'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.24 – 发布任务'
- en: '](img/B16392_04_024.jpg)'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_024.jpg)'
- en: Figure 4.24 – Publishing tasks
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.24 – 发布任务
- en: 'If you select the **Variables** tab, you will see that there are some parameters
    that are used during the build process. Here, you can create your own variables
    to use inside the pipeline if needed:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择**变量**选项卡，您将看到在构建过程中使用的一些参数。在这里，您可以创建自己的变量，在需要时在管道中使用：
- en: '![Figure 4.25 – Pipeline variables'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.25 – 管道变量'
- en: '](img/B16392_04_025.jpg)'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_025.jpg)'
- en: Figure 4.25 – Pipeline variables
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.25 – 管道变量
- en: 'The next section is called **Triggers**. Here, you can define what triggers
    start your pipeline. By default, no triggers are published initially, but here,
    you can enable CI to automatically start your pipeline on every commit on the
    selected branch:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 下一部分叫做**触发器**。在这里，您可以定义启动管道的触发条件。默认情况下，初始时没有发布任何触发器，但在这里，您可以启用 CI，以便在所选分支的每次提交时自动启动管道：
- en: '![Figure 4.26 – Pipeline triggers'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.26 – 管道触发器'
- en: '](img/B16392_04_026.jpg)'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_026.jpg)'
- en: Figure 4.26 – Pipeline triggers
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.26 – 管道触发器
- en: Important Note
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: Enabling CI is a recommended practice if you want every piece of code that's
    committed on a branch (for example, on the **master** branch) to always be tested
    and safely controlled. In this way, you can be assured that the code is always
    working as expected.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 启用 CI 是推荐的做法，如果您希望每次在分支（例如，**master** 分支）上提交的代码都能得到测试并安全控制。在这种方式下，您可以确保代码始终按预期工作。
- en: 'In the **Option** tab, you can set some options related to your build definition.
    For example, here, you can create links to all the work items so that they''re
    linked to associated changes when a build completes successfully, create work
    items on failure of a build, set the status badge for your pipeline, specify timeouts,
    and so on:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 在**选项**选项卡中，您可以设置与构建定义相关的一些选项。例如，在这里，您可以创建指向所有工作项的链接，以便在构建成功完成时，它们与相关的更改进行关联，构建失败时创建工作项，设置管道的状态徽章，指定超时等：
- en: '![Figure 4.27 – Pipeline options'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.27 – 管道选项'
- en: '](img/B16392_04_027.jpg)'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_027.jpg)'
- en: Figure 4.27 – Pipeline options
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.27 – 管道选项
- en: The **Retention** tab, on the other hand, is used for configuring the retention
    policy for this specific pipeline (how many days to keep artifacts for, the number
    of days to keep runs and pull requests for, and so on). Doing this will override
    the general retention settings. We'll talk about them later in the *Retention
    of builds* section.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '**保留**选项卡则用于配置该特定管道的保留策略（例如，保持工件多少天，保持运行和拉取请求多少天等）。这样做会覆盖一般的保留设置。我们将在后面的*构建的保留*部分讨论这些内容。'
- en: 'Once you''ve finished defining the pipeline, you can click **Save & queue**
    to save your definition. By clicking on **Save and run**, the pipeline will be
    placed in a queue and wait for an agent:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 完成管道定义后，您可以点击**保存并排队**以保存定义。点击**保存并运行**时，管道将被放入队列并等待代理：
- en: '![Figure 4.28 – Run pipeline'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.28 – 运行管道'
- en: '](img/B16392_04_028.jpg)'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_028.jpg)'
- en: Figure 4.28 – Run pipeline
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.28 – 运行管道
- en: 'When the agent is found, the pipeline is executed and your code is built:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 当找到代理时，管道会被执行，您的代码将被构建：
- en: '![Figure 4.29 – Pipeline execution starting'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.29 – 管道执行开始'
- en: '](img/B16392_04_029.jpg)'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_029.jpg)'
- en: Figure 4.29 – Pipeline execution starting
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.29 – 管道执行开始
- en: 'You can follow the execution of each step of the pipeline and see the related
    logs. If the pipeline ends successfully, you can view a summary of its execution:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以跟踪管道每个步骤的执行，并查看相关日志。如果管道成功结束，您可以查看其执行摘要：
- en: '![Figure 4.30 – Pipeline – final result'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.30 – 管道 – 最终结果'
- en: '](img/B16392_04_030.jpg)'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_030.jpg)'
- en: Figure 4.30 – Pipeline – final result
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.30 – 管道 – 最终结果
- en: 'You can also select the **Tests** tab to review the test execution status:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以选择**测试**选项卡以查看测试执行状态：
- en: '![Figure 4.31 – Pipeline tests result'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.31 – 管道测试结果'
- en: '](img/B16392_04_031.jpg)'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_031.jpg)'
- en: Figure 4.31 – Pipeline tests result
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.31 – 管道测试结果
- en: In the next section, we'll learn how to create a YAML pipeline for this application.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，我们将学习如何为这个应用创建一个 YAML 管道。
- en: YAML pipeline definition
  id: totrans-345
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: YAML 管道定义
- en: As previously explained, when you start creating a build pipeline with Azure
    DevOps, the wizard creates a YAML-based pipeline by default.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，当您开始使用 Azure DevOps 创建构建管道时，向导默认会创建一个基于 YAML 的管道。
- en: To start creating a YAML pipeline, go to the **Pipeline** section in Azure DevOps
    and click on **New Pipeline**.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始创建 YAML 管道，请转到 Azure DevOps 中的**管道**部分，并点击**新建管道**。
- en: 'Here, instead of selecting the classic editor (as we did in the previous section),
    just select the type of repository where your code is located (**Azure Repos Git**,
    **GitHub**, **BitBucket**, and so on):'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以选择仓库类型，而不是像我们在上一部分中那样选择经典编辑器（**Azure Repos Git**、**GitHub**、**BitBucket**等）：
- en: '![Figure 4.32 – YAML pipeline definition'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.32 – YAML 管道定义'
- en: '](img/B16392_04_032.jpg)'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_032.jpg)'
- en: Figure 4.32 – YAML pipeline definition
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.32 – YAML 管道定义
- en: 'Then, select your repository from the available repositories list:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从可用的仓库列表中选择您的仓库：
- en: '![Figure 4.33 – YAML pipeline – repository selection'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.33 – YAML 管道 – 仓库选择'
- en: '](img/B16392_04_033.jpg)'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_033.jpg)'
- en: Figure 4.33 – YAML pipeline – repository selection
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.33 – YAML 管道 – 仓库选择
- en: 'The system now analyzes your repository and proposes a set of available templates
    according to the code stored in the repository itself. You can start from a blank
    YAML template or you can select a template. Here, I''m selecting the ASP.NET template:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 系统现在分析您的代码库，并根据代码库中存储的代码推荐一组可用的模板。您可以从一个空白的 YAML 模板开始，也可以选择一个模板。在这里，我选择了 ASP.NET
    模板：
- en: '![Figure 4.34 – YAML pipeline – template selection'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.34 – YAML 管道 – 模板选择'
- en: '](img/B16392_04_034.jpg)'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_034.jpg)'
- en: Figure 4.34 – YAML pipeline – template selection
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.34 – YAML 管道 – 模板选择
- en: 'The system creates a YAML file (called `azure-pipelines.yml`), as shown in
    the following screenshot:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 系统创建了一个 YAML 文件（称为 `azure-pipelines.yml`），如以下截图所示：
- en: '![Figure 4.35 – YAML pipeline definition'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.35 – YAML 管道定义'
- en: '](img/B16392_04_035.jpg)'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_035.jpg)'
- en: Figure 4.35 – YAML pipeline definition
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.35 – YAML 管道定义
- en: 'The generated YAML definition contains a set of tasks, just like in the previous
    example, but here, these tasks are in their YAML definition. The complete generated
    file is as follows:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的 YAML 定义包含了一组任务，就像前面的例子一样，但在这里，这些任务在它们的 YAML 定义中。完整的生成文件如下所示：
- en: '[PRE72]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: As you can see, the YAML file contains the trigger that starts the pipeline
    (here, this is a commit on the master branch), the agent pool to use, the pipeline
    variables, and the sequence of each task to execute (with its specific parameters).
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，YAML 文件包含了触发器，它启动管道（在这里是主分支上的提交），使用的代理池，管道变量，以及每个任务执行的顺序（带有其特定参数）。
- en: Click on Save and run as shown in the previous screenshot to queue the pipeline
    and have it executed. The following screenshot shows the executed YAML pipeline.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所示，点击“保存并运行”以排队执行管道。以下截图显示了已执行的 YAML 管道。
- en: '![Figure 4.36 – YAML pipeline executed'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.36 – 已执行的 YAML 管道'
- en: '](img/B16392_04_036.jpg)'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_036.jpg)'
- en: Figure 4.36 – YAML pipeline executed
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.36 – 已执行的 YAML 管道
- en: 'To add new tasks, it''s useful to use the assistant tool on the right of the
    editor frame. It allows you to have a **Tasks** list where you can search for
    a task, fill in the necessary parameters, and then have the final YAML definition:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 若要添加新任务，可以使用编辑框右侧的助手工具。它允许您拥有一个**任务**列表，您可以在其中搜索任务，填写必要的参数，然后获得最终的 YAML 定义：
- en: '![Figure 4.37 – YAML pipeline task selection'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.37 – YAML 管道任务选择'
- en: '](img/B16392_04_037.jpg)'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_037.jpg)'
- en: Figure 4.37 – YAML pipeline task selection
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.37 – YAML 管道任务选择
- en: 'When you choose to create a pipeline with YAML, Azure DevOps creates a file
    that''s stored in the same repository that your code is stored in:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 当您选择使用 YAML 创建管道时，Azure DevOps 会创建一个文件，并将其存储在与您的代码相同的代码库中：
- en: '![Figure 4.38 – YAML pipeline file created'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.38 – 创建的 YAML 管道文件'
- en: '](img/B16392_04_038.jpg)'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_038.jpg)'
- en: Figure 4.38 – YAML pipeline file created
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.38 – 创建的 YAML 管道文件
- en: This file is under source control and versioned on every modification.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件在源代码管理中，并在每次修改时版本化。
- en: 'For a complete reference to the YAML schema for a pipeline, I suggest following
    this link:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 有关管道 YAML 模式的完整参考，我建议访问以下链接：
- en: '[https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema](https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema.)'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema](https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema.)'
- en: Retention of builds
  id: totrans-421
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建保留
- en: When you run a pipeline, Azure DevOps logs each step's execution and stores
    the final artifacts and tests for each run.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行管道时，Azure DevOps 会记录每个步骤的执行，并存储每次运行的最终工件和测试。
- en: 'Azure DevOps has a default retention policy for pipeline execution of 30 days.
    You can change these default values by going to **Project settings** | **Pipelines**
    | **Settings**:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps 对管道执行的默认保留策略为 30 天。您可以通过进入**项目设置** | **管道** | **设置**来更改这些默认值：
- en: '![Figure 4.39 – Pipeline retention policy'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.39 – 管道保留策略'
- en: '](img/B16392_04_039.jpg)'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_039.jpg)'
- en: Figure 4.39 – Pipeline retention policy
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.39 – 管道保留策略
- en: 'You can also use the **Copy files** task to store your build and artifacts
    data in external storage so that you can preserve them for longer than what''s
    specified in the retention policy:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用**复制文件**任务将构建和工件数据存储到外部存储中，以便您可以将它们保存比保留策略中指定的时间更长：
- en: '![Figure 4.40 – Copy files task'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.40 – 复制文件任务'
- en: '](img/B16392_04_040.jpg)'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_040.jpg)'
- en: Figure 4.40 – Copy files task
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.40 – 复制文件任务
- en: 'The YAML definition for this task is as follows:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 该任务的 YAML 定义如下：
- en: '[PRE112]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Important Note
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 重要说明
- en: Remember that any data saved as artifacts with the **Publish Build Artifacts**
    task is periodically deleted.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，任何通过**发布构建工件**任务保存的数据都会定期删除。
- en: 'More information about the **Copy files** task can be found here:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于**复制文件**任务的信息可以在这里找到：
- en: '[https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/copy-files?view=azure-devops&tabs=yaml](https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/copy-files?view=azure-devops&tabs=yaml).'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/zh-cn/azure/devops/pipelines/tasks/utility/copy-files?view=azure-devops&tabs=yaml](https://docs.microsoft.com/zh-cn/azure/devops/pipelines/tasks/utility/copy-files?view=azure-devops&tabs=yaml)。'
- en: Multi-stage pipeline
  id: totrans-442
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多阶段流水线
- en: As we explained previously, you can organize the jobs in your pipeline into
    `stages`. `Stages` are logical boundaries inside a pipeline flow (units of works
    that you can assign to an agent) that allow you to isolate the work, pause the
    pipeline, and execute checks or other actions. By default, every pipeline is composed
    of one stage, but you can create more than one and arrange those stages into a
    dependency graph.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前解释的，你可以将流水线中的工作组织成 `stages`。`Stages` 是流水线流中的逻辑边界（可以分配给代理的工作单元），它们允许你隔离工作、暂停流水线并执行检查或其他操作。默认情况下，每个流水线由一个阶段组成，但你可以创建多个阶段并将这些阶段安排成依赖关系图。
- en: 'The basic YAML definition of a multi-stage pipeline is as follows:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 多阶段流水线的基本 YAML 定义如下：
- en: '[PRE118]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: As an example of how to create a multi-stage pipeline with YAML, let's look
    at a pipeline that builds code in your repository (with .NET Core SDK) and publishes
    the artifacts as NuGet packages. The pipeline definition is as follows. The pipeline
    uses the `stages` keyword to identify that this is a multi-stage pipeline.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 作为如何使用 YAML 创建多阶段流水线的示例，让我们来看一个在你的代码库中构建代码（使用 .NET Core SDK）并将工件发布为 NuGet 包的流水线。流水线定义如下。该流水线使用
    `stages` 关键字来标识这是一个多阶段流水线。
- en: 'In the first stage definition (`Build`), we have the tasks for building the
    code:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个阶段定义（`Build`）中，我们有构建代码的任务：
- en: '[PRE137]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: 'Here, we installed the .NET Core SDK by using the **UseDotnet** standard task
    template that''s available in Azure DevOps (more information can be found here:
    [https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/tool/dotnet-core-tool-installer?view=azure-devops)](https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/tool/dotnet-core-tool-installer?view=azure-devops)).
    After that, we restored the required NuGet packages and built the solution.'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了 Azure DevOps 中提供的**UseDotnet**标准任务模板安装了 .NET Core SDK（更多信息请参见：[https://docs.microsoft.com/zh-cn/azure/devops/pipelines/tasks/tool/dotnet-core-tool-installer?view=azure-devops)](https://docs.microsoft.com/zh-cn/azure/devops/pipelines/tasks/tool/dotnet-core-tool-installer?view=azure-devops)）。之后，我们恢复了所需的
    NuGet 包并构建了解决方案。
- en: 'Now, we have the task of creating the release version of the NuGet package.
    This package is saved in the packages/release folder of the artifact staging directory.
    Here, we will use `nobuild = true` because in this task, we do not have to rebuild
    the solution again (no more compilation):'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有创建 NuGet 包发布版本的任务。该包保存在工件暂存目录的 `packages/release` 文件夹中。在此任务中，我们将使用 `nobuild
    = true`，因为在此任务中，我们无需重新构建解决方案（无需再进行编译）：
- en: '[PRE167]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: 'As the next step, we have the task of creating the prerelease version of the
    NuGet package. In this task, we''re using the `buildProperties` option to add
    the build number to the package version (for example, if the package version is
    2.0.0.0 and the build number is 20200521.1, the package version will be 2.0.0.0.20200521.1).
    Here, a build of the package is mandatory (for retrieving the build ID):'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步，我们需要创建 NuGet 包的预发布版本。在此任务中，我们使用 `buildProperties` 选项将构建号添加到包版本中（例如，如果包版本是
    2.0.0.0，构建号是 20200521.1，则包版本为 2.0.0.0.20200521.1）。在这里，构建包是强制性的（用于获取构建 ID）：
- en: '[PRE174]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-511
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: 'The next task publishes the package as an artifact:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个任务将包作为工件发布：
- en: '[PRE181]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: 'Next, we need to define the second stage, called `PublishPrereleaseNuGetPackage`.
    Here, we skip the checkout of the repository and the download step downloads the
    `packages` artifact that we published in the previous build stage. Then, the `NuGetCommand`
    task publishes the prerelease package to an internal feed in Azure DevOps called
    `Test`:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要定义第二个阶段，称为 `PublishPrereleaseNuGetPackage`。在这里，我们跳过了代码库的检出步骤，下载步骤下载了我们在先前构建阶段发布的
    `packages` 工件。然后，`NuGetCommand` 任务将预发布包发布到 Azure DevOps 中的一个名为 `Test` 的内部源：
- en: '[PRE183]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: 'Now, we have to define the third stage, called `PublishReleaseNuGetPackage`,
    which creates the release version of our package for NuGet:'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须定义第三个阶段，叫做 `PublishReleaseNuGetPackage`，它用于为 NuGet 创建我们的包的发布版本：
- en: '[PRE202]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: This stage uses a deployment job to publish the package to the configured environment
    (here, this is called `nuget-org`). An environment is a collection of resources
    inside a pipeline.
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 这个阶段使用一个部署任务将包发布到配置好的环境中（在此，我们称之为 `nuget-org`）。环境是管道内的一组资源。
- en: In the `NuGetCommand` task, we specify the package to push and that the feed
    where we're pushing the package to is external (`nuGetFeedType`). The feed is
    retrieved by using the `publishFeedCredentials` property, set to the name of the
    service connection we created.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `NuGetCommand` 任务中，我们指定要推送的包，并且我们推送包的源是外部的（`nuGetFeedType`）。该源通过使用 `publishFeedCredentials`
    属性检索，该属性设置为我们创建的服务连接的名称。
- en: 'For this stage, we have created a new environment:'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个阶段，我们已经创建了一个新的环境：
- en: '![Figure 4.41 – Creating a new environment'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.41 – 创建新的环境'
- en: '](img/B16392_04_041.jpg)'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_041.jpg)'
- en: Figure 4.41 – Creating a new environment
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.41 – 创建新的环境
- en: 'Once the environment has been created, in order to publish it to NuGet, you
    need to create a new service connection by going to **Project Settings** | **Service
    Connections** | **Create Service Connection**, selecting **NuGet** from the list
    of available service connection types, and then configuring the connections according
    to your NuGet account:'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了环境，为了将其发布到 NuGet，您需要通过以下步骤创建一个新的服务连接：进入 **项目设置** | **服务连接** | **创建服务连接**，从可用的服务连接类型列表中选择
    **NuGet**，然后根据您的 NuGet 帐户配置连接：
- en: '![Figure 4.42 – New NuGet service connection'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.42 – 新的 NuGet 服务连接'
- en: '](img/B16392_04_042.jpg)'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_042.jpg)'
- en: Figure 4.42 – New NuGet service connection
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.42 – 新的 NuGet 服务连接
- en: 'With that, we have created a multi-stage build pipeline. When the pipeline
    is executed and all the stages terminate successfully, you will see a results
    diagram that looks as follows:'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这一方式，我们创建了一个多阶段构建管道。当管道执行并且所有阶段成功完成时，您将看到一个如下所示的结果图：
- en: '![Figure 4.43 – Multi-stage build pipeline executed'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.43 – 多阶段构建管道执行情况'
- en: '](img/B16392_04_043.jpg)'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_043.jpg)'
- en: Figure 4.43 – Multi-stage build pipeline executed
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.43 – 多阶段构建管道执行情况
- en: Now that we have understood what a multi-stage pipeline is, we'll create some
    pipelines with GitHub repositories in the next section.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经理解了什么是多阶段管道，我们将在下一节创建一些与 GitHub 仓库相关的管道。
- en: Building a pipeline with GitHub repositories
  id: totrans-572
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GitHub 仓库构建管道
- en: GitHub is one of the most popular platforms for source control management and
    often, it's quite common to have scenarios where the code is stored inside a GitHub
    repository and you want to use Azure DevOps for managing CI/CD.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 是最流行的源代码管理平台之一，通常，我们会遇到将代码存储在 GitHub 仓库中，并且希望使用 Azure DevOps 来管理 CI/CD
    的场景。
- en: 'By using Azure DevOps and the Azure Pipeline service, you can also create pipelines
    for a repository stored on GitHub, thus triggering a build pipeline on every commit
    in a branch inside the GitHub repository. We will do this by following these steps:'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 Azure DevOps 和 Azure Pipeline 服务，您还可以为存储在 GitHub 上的仓库创建管道，从而在 GitHub 仓库中的每次提交时触发构建管道。我们将通过以下步骤实现这一点：
- en: To use Azure Pipelines to build your GitHub repository, you need to add the
    `Azure Pipelines`. Select the **Azure Pipelines** extension and click on **Set
    up a plan**, as shown in the following screenshot:![Figure 4.44 – Azure Pipelines
    on GitHub – setup
  id: totrans-575
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用 Azure Pipelines 构建您的 GitHub 仓库，您需要添加 `Azure Pipelines`。选择 **Azure Pipelines**
    扩展，并点击 **设置计划**，如以下截图所示：![图 4.44 – GitHub 上的 Azure Pipelines – 设置
- en: '](img/B16392_04_044.jpg)'
  id: totrans-576
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_04_044.jpg)'
- en: Figure 4.44 – Azure Pipelines on GitHub – setup
  id: totrans-577
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 4.44 – GitHub 上的 Azure Pipelines – 设置
- en: Select the **Free** plan, click the **Install it for free** button, and then
    click **Complete order and begin installation**.
  id: totrans-578
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **免费** 计划，点击 **免费安装** 按钮，然后点击 **完成订单并开始安装**。
- en: Now, the Azure Pipelines installation will ask you if this app should be available
    for all your repositories or only for selected repositories. Select the desired
    option and click on **Install**:![Figure 4.45 – Azure Pipelines on GitHub – installation
  id: totrans-579
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，Azure Pipelines 安装将询问您是否希望此应用程序对所有仓库可用，还是仅对选定的仓库可用。选择所需的选项并点击 **安装**：![图
    4.45 – GitHub 上的 Azure Pipelines – 安装
- en: '](img/B16392_04_045.jpg)'
  id: totrans-580
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_04_045.jpg)'
- en: Figure 4.45 – Azure Pipelines on GitHub – installation
  id: totrans-581
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 4.45 – GitHub 上的 Azure Pipelines – 安装
- en: You will now be redirected to Azure DevOps, where you can create a new project
    (or select an existing one) for handling the build process. Here, I'm going to
    create a new project:![Figure 4.46 – Setting up your Azure Pipelines project](img/B16392_04_046.jpg)
  id: totrans-582
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将被重定向到 Azure DevOps，在那里你可以创建一个新项目（或选择一个现有项目）来处理构建过程。在这里，我将创建一个新项目：![图 4.46
    – 设置 Azure Pipelines 项目](img/B16392_04_046.jpg)
- en: Figure 4.46 – Setting up your Azure Pipelines project
  id: totrans-583
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 4.46 – 设置 Azure Pipelines 项目
- en: Now, you need to authorize Azure Pipelines so that it can access your GitHub
    account:![Figure 4.47 – Authorizing Azure Pipelines to access GitHub
  id: totrans-584
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你需要授权 Azure Pipelines 以便它可以访问你的 GitHub 账户：![图 4.47 – 授权 Azure Pipelines 访问
    GitHub
- en: '](img/B16392_04_047.jpg)'
  id: totrans-585
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_04_047.jpg)'
- en: Figure 4.47 – Authorizing Azure Pipelines to access GitHub
  id: totrans-586
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 4.47 – 授权 Azure Pipelines 访问 GitHub
- en: 'When the necessary authorization is given, the project will be created for
    you on Azure DevOps and the pipeline creation process will start. You''ll be immediately
    prompted to select a GitHub repository for the build from the list of available
    GitHub repositories in your account:'
  id: totrans-587
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当获得必要的授权后，项目将在 Azure DevOps 上为你创建，管道创建过程将开始。你将立即被提示从你账户中的可用 GitHub 仓库列表中选择一个
    GitHub 仓库作为构建来源：
- en: '![Figure 4.48 – Selecting a GitHub repository'
  id: totrans-588
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 4.48 – 选择 GitHub 仓库'
- en: '](img/B16392_04_048.jpg)'
  id: totrans-589
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_04_048.jpg)'
- en: Figure 4.48 – Selecting a GitHub repository
  id: totrans-590
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 4.48 – 选择 GitHub 仓库
- en: Here, I'm selecting a repository where I have an Azure Function project. As
    you can see, Azure Pipelines has recognized my project and proposed a set of available
    templates for the pipeline (but you can also start from a blank template or from
    a YAML file that you have in any branch of the repository). Here, I will select
    `azure-pipelines.yml`) inside your GitHub repository:![Figure 4.50 – multi.stage
    YAML pipeline definition
  id: totrans-591
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我选择了一个包含 Azure Function 项目的仓库。正如你所见，Azure Pipelines 已经识别了我的项目，并为管道提供了一组可用的模板（但你也可以从空白模板开始，或者从仓库中任何分支的
    YAML 文件开始）。在这里，我将选择 GitHub 仓库中的`azure-pipelines.yml`）:![图 4.50 – 多阶段 YAML 管道定义
- en: '](img/B16392_04_050.jpg)'
  id: totrans-592
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_04_050.jpg)'
- en: Figure 4.50 – multi.stage YAML pipeline definition
  id: totrans-593
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 4.50 – 多阶段 YAML 管道定义
- en: This pipeline is triggered on every commit on the master branch.
  id: totrans-594
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该管道会在每次提交到主分支时触发。
- en: Click the **Save and run** button. Here, the pipeline will be queued and waiting
    for an agent, then executed.
  id: totrans-595
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存并运行**按钮。在这里，管道将被排队并等待代理，然后执行。
- en: Every time you commit code inside your GitHub repository, the build pipeline
    on Azure DevOps will be triggered automatically.
  id: totrans-596
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每次你在 GitHub 仓库中提交代码时，Azure DevOps 上的构建管道将会自动触发。
- en: If you're building a public repository on GitHub, it's quite useful to show
    all your users that the code inside this repository has been checked and tested
    with a build pipeline. Then, you can show the result of the build. You can do
    that by placing a badge in your repository.
  id: totrans-597
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你正在构建一个公共 GitHub 仓库，展示所有用户该仓库中的代码已经通过构建管道检查和测试是非常有用的。然后，你可以展示构建结果。你可以通过在仓库中放置一个徽章来做到这一点。
- en: A badge is a dynamically generated image that reflects the status of a build
    (never built, success, or fail) and it's hosted on Azure DevOps.
  id: totrans-598
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 徽章是一个动态生成的图像，反映构建的状态（未构建、成功或失败），并托管在 Azure DevOps 上。
- en: To do so, select your pipeline in Azure DevOps, click on the three dots on the
    right, and select **Status badge**:![Figure 4.51 – Status badge definition
  id: totrans-599
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此，选择 Azure DevOps 中的管道，点击右侧的三个点，并选择**状态徽章**：![图 4.51 – 状态徽章定义
- en: '](img/B16392_04_051.jpg)'
  id: totrans-600
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B16392_04_051.jpg)'
- en: Figure 4.51 – Status badge definition
  id: totrans-601
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 4.51 – 状态徽章定义
- en: 'From here, you can copy the `Readme.md` file on your GitHub repository:'
  id: totrans-602
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这里，你可以复制 GitHub 仓库中的`Readme.md`文件：
- en: '![Figure 4.52 – Build status badge markdown'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.52 – 构建状态徽章的 Markdown'
- en: '](img/B16392_04_052.jpg)'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_052.jpg)'
- en: Figure 4.52 – Build status badge markdown
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.52 – 构建状态徽章的 Markdown
- en: 'Every time a user accesses your repository, they will be able to see the status
    of the latest build via a graphical badge:'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 每当用户访问你的仓库时，他们将能够通过图形徽章查看最新构建的状态：
- en: '![Figure 4.53 – Build pipeline Status badge'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.53 – 构建管道状态徽章'
- en: '](img/B16392_04_053.jpg)'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_053.jpg)'
- en: Figure 4.53 – Build pipeline Status badge
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.53 – 构建管道状态徽章
- en: Next, let's look at how to execute jobs in parallel.
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何并行执行作业。
- en: Executing jobs in parallel in an Azure Pipeline
  id: totrans-611
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Azure Pipelines 中并行执行作业
- en: Within an Azure Pipeline, you can also execute jobs in parallel. Each job can
    be independent of other jobs and can also be executed on a different agent. This
    will allow you to speed up your build time and improve your pipeline's performance.
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure 管道中，您还可以并行执行作业。每个作业可以独立于其他作业运行，也可以在不同的代理上执行。这将帮助您加速构建时间并提升管道的性能。
- en: As an example of how to handle parallel jobs in a pipeline, consider a simple
    pipeline where you have to execute three PowerShell scripts called **Task 1**,
    **Task 2**, and **Final Task**. **Task 1** and **Task 2** can be executed in parallel,
    while **Final Task** can only be executed when the previous two tasks are completed.
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 作为如何在管道中处理并行作业的示例，考虑一个简单的管道，您需要执行三个 PowerShell 脚本，分别叫做 **任务 1**、**任务 2** 和 **最终任务**。**任务
    1** 和 **任务 2** 可以并行执行，而 **最终任务** 只有在前两个任务完成后才能执行。
- en: 'When you start creating a new pipeline (I''m using the classic editor here
    for simplicity), Azure DevOps creates an agent job (here, this is called **Agent
    Job 1**). You can add your task to this agent. By selecting the agent job, you
    can specify the agent pool where this task runs. Here, I want this task to be
    executed on a Microsoft-hosted agent pool:'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 当您开始创建一个新的管道时（这里为了简便，我使用经典编辑器），Azure DevOps 会创建一个代理作业（这里称为 **代理作业 1**）。您可以将任务添加到此代理中。通过选择代理作业，您可以指定运行该任务的代理池。在这里，我希望此任务在
    Microsoft 托管的代理池中执行：
- en: '![Figure 4.54 – Agent specification'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.54 – 代理规格'
- en: '](img/B16392_04_054.jpg)'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_054.jpg)'
- en: Figure 4.54 – Agent specification
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.54 – 代理规格
- en: 'Then, to add a new agent pool to your pipeline (for executing the other task
    independently), click the three dots beside the pipeline and select **Add an agent
    job**:'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，要将新的代理池添加到管道中（用于独立执行其他任务），请点击管道旁边的三个点，选择 **添加代理作业**：
- en: '![Figure 4.55 – Add an agent job'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.55 – 添加代理作业'
- en: '](img/B16392_04_055.jpg)'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_055.jpg)'
- en: Figure 4.55 – Add an agent job
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.55 – 添加代理作业
- en: 'Now, we''ll add a second agent job (here, this is called **Agent job 2**) that
    runs on a self-hosted agent. This job will execute the **Task 2** PowerShell script:'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将添加一个第二个代理作业（这里称为 **代理作业 2**），它运行在自托管代理上。此作业将执行 **任务 2** PowerShell 脚本：
- en: '![Figure 4.56 – Agent selection'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.56 – 代理选择'
- en: '](img/B16392_04_056.jpg)'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_056.jpg)'
- en: Figure 4.56 – Agent selection
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.56 – 代理选择
- en: 'Finally, we''ll add a new agent job (here, this is called **Agent Job 3)**
    to execute the **Final Task** that will run on a Microsoft-hosted agent. However,
    this job has dependencies from **Agent Job 1** and **Agent Job 2**:'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将添加一个新的代理作业（这里称为 **代理作业 3**），用于执行 **最终任务**，该任务将运行在 Microsoft 托管的代理上。然而，此作业有来自
    **代理作业 1** 和 **代理作业 2** 的依赖：
- en: '![Figure 4.57 – Agent job dependencies'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.57 – 代理作业依赖关系'
- en: '](img/B16392_04_057.jpg)'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16392_04_057.jpg)'
- en: Figure 4.57 – Agent job dependencies
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.57 – 代理作业依赖关系
- en: In this way, the first two tasks start in parallel and the final job will wait
    until the two previous tasks are executed.
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，前两个任务将并行启动，最终作业将在前两个任务执行完成后再运行。
- en: 'For more information about parallel jobs in an Azure pipeline, I recommend
    that you check out this page:'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: 若要了解有关 Azure 管道中并行作业的更多信息，我建议查看以下页面：
- en: '[https://docs.microsoft.com/en-us/azure/devops/pipelines/process/phases?view=azure-devops&tabs=yaml](https://docs.microsoft.com/en-us/azure/devops/pipelines/process/phases?view=azure-devops&tabs=yaml)'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/azure/devops/pipelines/process/phases?view=azure-devops&tabs=yaml](https://docs.microsoft.com/en-us/azure/devops/pipelines/process/phases?view=azure-devops&tabs=yaml)'
- en: Agents on Azure Container Instances
  id: totrans-633
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行在 Azure 容器实例上的代理
- en: If standard Microsoft-hosted agents don't fit your needs (requirements, performance,
    and so on), there's also the possibility to create a self-hosted agent for Azure
    DevOps that runs inside a Docker container on the **Azure Container Instances**
    (**ACI**) service.
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 如果标准的 Microsoft 托管代理无法满足您的需求（如要求、性能等），您还可以为 Azure DevOps 创建一个自托管代理，运行在 **Azure
    容器实例** (**ACI**) 服务的 Docker 容器内。
- en: You can create a build agent running on Azure Container Instances by using a
    custom image or by reusing one of Microsoft's available images.pipe
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用自定义镜像或重用 Microsoft 提供的镜像来创建一个运行在 Azure 容器实例上的构建代理。
- en: To create a build agent running on ACI, you need to create a **personal access
    token** for your Azure DevOps organization. To do so, from your Azure DevOps organization
    home page, open the user settings (top-right corner) and select **Personal access
    tokens**.
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个运行在 ACI 上的构建代理，您需要为您的 Azure DevOps 组织创建一个 **个人访问令牌**。为此，您需要从 Azure DevOps
    组织的首页打开用户设置（右上角），并选择 **个人访问令牌**。
- en: 'When you have the personal access token for your agent, you can create an agent
    on ACI by executing the following command from the Azure CLI (after connecting
    to your Azure subscription):'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 当您拥有代理的个人访问令牌时，您可以通过执行以下 Azure CLI 命令（在连接到您的 Azure 订阅后）在 ACI 上创建代理：
- en: '[PRE222]'
  id: totrans-638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: 'Here, we have the following:'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们有如下内容：
- en: '`RESOURCE_GROUP_NAME` is the name of your resource group in Azure where this
    resource will be created.'
  id: totrans-640
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RESOURCE_GROUP_NAME` 是您在 Azure 中用于创建此资源的资源组名称。'
- en: '`CONTAINER_NAME` is the name of the ACI container.'
  id: totrans-641
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CONTAINER_NAME` 是 ACI 容器的名称。'
- en: '`AZURE_DEVOPS_ACCOUNT_NAME` is the name of your Azure DevOps account.'
  id: totrans-642
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AZURE_DEVOPS_ACCOUNT_NAME` 是您的 Azure DevOps 账户名称。'
- en: '`PERSONAL_ACCESS_TOKEN` is the personal access token you created previously.'
  id: totrans-643
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PERSONAL_ACCESS_TOKEN` 是您之前创建的个人访问令牌。'
- en: '`AGENT_NAME` is the name of the build agent that you want to create. This will
    be displayed on Azure DevOps.'
  id: totrans-644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AGENT_NAME` 是您要创建的构建代理的名称。该名称将在 Azure DevOps 中显示。'
- en: 'In this command, there are also other two important parameters:'
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 在此命令中，还有另外两个重要的参数：
- en: '`--image` is used to select the name of the Azure Pipelines image for creating
    your agent, as described here: [https://hub.docker.com/_/microsoft-azure-pipelines-vsts-agent](https://hub.docker.com/_/microsoft-azure-pipelines-vsts-agent).'
  id: totrans-646
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--image` 用于选择用于创建代理的 Azure Pipelines 镜像的名称，具体说明请见：[https://hub.docker.com/_/microsoft-azure-pipelines-vsts-agent](https://hub.docker.com/_/microsoft-azure-pipelines-vsts-agent)。'
- en: '`VSTS_POOL` is used to select the agent pool for your build agent.'
  id: totrans-647
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VSTS_POOL` 用于选择您的构建代理的代理池。'
- en: Remember that you can start and stop an ACI instance by using the `az container
    stop` and `az container start` commands. This can help you save money.
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，您可以通过使用 `az container stop` 和 `az container start` 命令来启动和停止 ACI 实例。这可以帮助您节省费用。
- en: Using container jobs in Azure Pipelines
  id: totrans-649
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Azure Pipelines 中使用容器作业
- en: In this chapter, we saw that when you create a pipeline, you define jobs, and
    that when the pipeline is executed, these jobs runs on the host machine where
    the agent is installed.
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到，当您创建流水线时，您定义了作业，而当流水线执行时，这些作业会在安装了代理的主机上运行。
- en: If you're using Windows or Linux agents, you can also run a job inside a container
    (in an isolated way from the host). To run a job inside a container, you need
    to have Docker installed on the agent and your pipeline must have permission to
    access the Docker daemon. If you're using Microsoft-hosted agents, running jobs
    in containers is actually supported on the `windows-2019` and `ubuntu-16.04` pool
    images.
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是 Windows 或 Linux 代理，您也可以在容器中运行作业（与主机隔离）。要在容器中运行作业，您需要在代理上安装 Docker，并且流水线必须有权限访问
    Docker 守护进程。如果您使用的是 Microsoft 托管的代理，实际上支持在 `windows-2019` 和 `ubuntu-16.04` 池镜像上运行容器中的作业。
- en: 'As an example, this is a YAML definition for using a container job in a Windows
    pipeline:'
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，这是在 Windows 流水线中使用容器作业的 YAML 定义：
- en: '[PRE223]'
  id: totrans-653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-657
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-661
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: As we mentioned previously, to run a job inside a Windows container, you need
    to use the `windows-2019` image pool. It's required that the kernel version of
    the host and the container match, so here, we're using the `ltsc2019` tag to retrieve
    the container's image.
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，要在 Windows 容器中运行作业，您需要使用 `windows-2019` 镜像池。要求主机和容器的内核版本匹配，因此这里我们使用 `ltsc2019`
    标签来获取容器的镜像。
- en: 'For a Linux-based pipeline, you need to use the `ubuntu-16.04` image:'
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于 Linux 的流水线，您需要使用 `ubuntu-16.04` 镜像：
- en: '[PRE232]'
  id: totrans-664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-665
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-667
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: As you can see, the pipeline creates a container based on the selected image
    and runs the command (steps) inside that container.
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，流水线基于选定的镜像创建一个容器，并在该容器内运行命令（步骤）。
- en: Summary
  id: totrans-670
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we provided an overview of the Azure Pipelines service and
    we saw how to implement a CI/CD process by using Azure DevOps. We also saw how
    to create a pipeline for code hosted in a repository by using the graphical interface
    and by using YAML, as well as how to use and create build agents. We then looked
    at how to create a build pipeline by using the classic editor and by using a YAML
    definition. We also saw an example of a multi-stage pipeline and how to use Azure
    DevOps pipelines to build code inside a GitHub repository, before looking at how
    to use parallel tasks in a build pipeline to improve build performance. Finally,
    we learned how to create a build agent on Azure Container Instances and how to
    use a container's jobs.
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们提供了 Azure Pipelines 服务的概述，并展示了如何通过使用 Azure DevOps 实现 CI/CD 流程。我们还演示了如何通过图形界面和
    YAML 创建一个针对托管在仓库中的代码的流水线，以及如何使用和创建构建代理。接着，我们介绍了如何使用经典编辑器和 YAML 定义创建构建流水线。我们还展示了一个多阶段流水线的示例，以及如何使用
    Azure DevOps 流水线在 GitHub 仓库中构建代码，然后讲解了如何在构建流水线中使用并行任务来提高构建性能。最后，我们学习了如何在 Azure
    容器实例上创建构建代理，并如何使用容器的作业。
- en: In the next chapter, we'll learn how to execute quality tests for our code base
    in a build pipeline.
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何在构建流水线中执行代码库的质量测试。
