- en: 'Chapter 7:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Artifacts with Azure DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we covered how to host build agents in Azure Pipelines.
    In this chapter, we are going to cover how to use artifacts with Azure DevOps.
    We will begin by explaining what artifacts are. Then, we will look at how to create
    them in Azure DevOps, as well as how to produce the artifact package from a built
    pipeline. Next, we are going to cover how to deploy the feed using a release pipeline.
    Then, we are going to cover how to set the feed permissions and how to consume
    the package in Visual Studio. Finally, we are going to cover how to scan for package
    vulnerabilities using WhiteSource Bolt.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Azure Artifacts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an artifact feed with Azure Artifacts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Producing the package using a build pipeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing the package to the feed from a build pipeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the feed permissions from the feed settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consuming the package in Visual Studio from the Artifacts feed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scanning for package vulnerabilities using WhiteSource Bolt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow this chapter, you need to have an active Azure DevOps organization.
    The organization we'll be using in this chapter is the **PartsUnlimited** organization,
    which we created in [*Chapter 1*](B16392_01_Final_JM_ePub.xhtml#_idTextAnchor027)*,
    Azure DevOps Overview*. You also need to have Visual Studio 2019 installed, which
    can be downloaded from [https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/).
  prefs: []
  type: TYPE_NORMAL
- en: The source code for our sample application can be downloaded from [https://github.com/PacktPublishing/Learning-Azure-DevOps---B16392/tree/master/Chapter%207](https://github.com/PacktPublishing/Learning-Azure-DevOps---B16392/tree/master/Chapter%207).
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Azure Artifacts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is likely that every developer has used a third-party or open source package
    in their code to add extra functionalities and speed up the development process
    of their application. Using popular, pre-built components that have been used
    and tested by the community will help you get things done more easily.
  prefs: []
  type: TYPE_NORMAL
- en: Functionalities, scripts, and code that have been built by various teams in
    your organization are often reused by other teams and in different software development
    projects. These different artifacts can be moved into a library or package so
    that others can benefit from this.
  prefs: []
  type: TYPE_NORMAL
- en: There are different ways to build and host these packages. For instance, you
    can use NuGet for hosting and managing packages for the Microsoft Development
    platform or npm for JavaScript packages, Maven for Java, and more. Azure Artifacts
    offers features so that you can share and reuse packages easily. In Azure Artifacts,
    packages are stored in feeds. A feed is a container that allows you to group packages
    and control who has access to them.
  prefs: []
  type: TYPE_NORMAL
- en: You can store packages in feeds that have been created by yourself or other
    teams, but it also has built-in support for **upstream sources**. With upstream
    sources, you can create a single feed to store both the packages that your organization
    produces and the packages that are consumed from remote feeds, such as NuGet,
    npm, Maven, Chocolatey, RubyGems, and more.
  prefs: []
  type: TYPE_NORMAL
- en: It is highly recommended to use Azure Artifacts as the main source for publishing
    internal packages and remote feeds. This is because it allows you to keep a comprehensive
    overview of all the packages being used by the organization and different teams.
    The feed knows the provenance of all the packages that are saved using upstream
    resources; the packages are saved into the feed even when the original source
    goes down or the package is deleted. Packages are versioned, and you typically
    reference a package by specifying the version of the package that you want to
    use in your application.
  prefs: []
  type: TYPE_NORMAL
- en: Many packages allow for unrestricted access, without the need for users to sign
    in. However, there are packages that require us to authenticate by using a username
    and password combination or access token. Regarding the latter, access tokens
    can be set to expire after a given time period.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we are going to look at how to create an **Artifact Feed**
    in Azure DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an artifact feed with Azure Artifacts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this demo, we are going to create an artifact feed in Azure Artifacts. Packages
    are stored in feeds, which are basically organizational constructs that allow
    us to group packages and manage their permissions. Every package type (NuGet,
    npm, Maven, Python, and Universal) can be stored in a single feed.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this demonstration, we are going to use our **PartsUnlimited** sample project
    again and add a new artifact feed to the project. To do this, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a web browser and navigate to [https://dev.azure.com/](https://dev.azure.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in with your Microsoft account and from the left menu, select **Artifacts**.
    Then, click the **+ Create Feed** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Create new feed** dialog box, add the following values (make sure that
    **Upstream sources** is disabled; we are not going to use packages from remote
    feeds in this chapter):![Figure 7.1 – Creating a new feed
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.01_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.1 – Creating a new feed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With that, we have created a new feed so that we can store our packages. In
    the next section, we are going to produce a package using a build pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Producing the package using a build pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have created our feed, we are going to create a build pipeline that
    automatically creates a package during the build of the project. For this example,
    you can use the sample project provided in this book's GitHub repository. This
    sample project consists of all the models from the **PartsUnlimited** project.
    We are going to add all the models to a package and distribute it from Artifacts.
    This way, you can easily share the data model across different projects.
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to import the GitHub repository into the **PartsUnlimited**
    organization in Azure DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the sample project to the PartsUnlimited repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add the sample models project to the PartsUnlimited repository, perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the **PartsUnlimited** project in Azure DevOps and go to **Repos
    > Files**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Import repository** from the **PartsUnlimited** dropdown:![Figure 7.2
    – Importing a repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.02_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.2 – Importing a repository
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enter the URL of the source repository into the **Clone URL** box and add a
    name for your new GitHub repository:![Figure 7.3 – Specifying the repository's
    URL
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.03_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.3 – Specifying the repository's URL
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Import**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the project has been imported, the repository will look as follows:![Figure
    7.4 – Repository in Azure DevOps
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.04_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.4 – Repository in Azure DevOps
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have imported the **PartsUnlimited.Models** project into an Azure
    DevOps repository, we can use in a build pipeline to create a NuGet package of
    it.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we are going to create a build pipeline that will automatically
    package our project into an Artifact package.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the build pipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that the project has been added to the repository, we can create the build
    pipeline. To do this, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Azure DevOps and open the **PartsUnlimited.Models** project once
    more. From the left menu, click on **Pipelines**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **New pipeline** from the top-right menu and select **Use the classic
    editor** on the first screen of the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the second screen, set the properties shown in the following screenshot and
    click **Continue**:![Figure 7.5 – Selecting a source
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.05_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.5 – Selecting a source
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **ASP.NET** on the next screen of the wizard and click **Apply**. With
    that, the Build pipeline will be created. Click on the **+** sign on the right-hand
    side of **Agent job 1** and search for **NuGet**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the NuGet task to the pipeline:![Figure 7.6 – Adding the NuGet task
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.06_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.6 – Adding the NuGet task
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Reorder the tasks and drag the NuGet task so that it's after the **Build Solution**
    task. Delete the **Test Assemblies** method since we don't have any tests in this
    project:![Fig. 7.7 – Reordering the tasks
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.07_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Fig. 7.7 – Reordering the tasks
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Make the following changes to the settings of the newly added task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: --`NuGet pack`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: --`pack`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: --`**/*.csproj`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After making these changes, the task will look as follows:![Figure 7.8 – Configuring
    the task
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.08_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.8 – Configuring the task
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, let's set the versioning of the package. A recommended approach to versioning
    packages is to use `1`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: --`0`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: --`0`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '--**Time zone**: **UTC**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the top menu, select **Save & queue** and then **Save and run.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The build pipeline will now run successfully. In the next section, we are going
    to publish the **PartsUnlimited.Models** NuGet package that we created in the
    first demo to our feed.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing the package to the feed from a build pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've built the application and the package from our build pipeline,
    we can publish the package to the feed that we created in our first demo.
  prefs: []
  type: TYPE_NORMAL
- en: For this, we need to set the required permissions on the feed. The identity
    that the build will run under needs to have **Contributor** permissions on the
    feed. Once these permissions have been set, we can extend our pipeline to push
    the package to the feed.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the required permissions on the feed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To set the required permissions, we need to go to the settings of our feed:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in with your Microsoft account and from the left menu, select **Artifacts**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the settings of the feed by selecting the **Settings** button from the
    top-right menu:![Figure 7.9 – Opening the feed's settings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.09_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.9 – Opening the feed's settings
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then, click on **Permissions** from the top menu and click on **+ Add users/groups**:![Figure
    7.10 – Feed permission settings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.10_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.10 – Feed permission settings
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Add the build that has the same name as the project, which in my case is the
    **Parts.Unlimited Build Service** identity:![Figure 7.11 – Adding the build identity
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.11_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.11 – Adding the build identity
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that the identity of the build pipeline has the required permissions on
    the feed, we can push the package to it during while it's being built.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing the package
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now ready to extend our build pipeline and push the package from it
    to the feed. To do this, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to Azure DevOps and open the **PartsUnlimited.Models** project. Click
    on **Pipelines** in the left menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the build pipeline that we created in the previous step and click on
    the **Edit** button, which can be found in the top-right menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **+** button again next to **Agent job 1** and search for NuGet.
    Add the task to the pipeline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag the newly added task below the NuGet task that we created in the previous
    step. Make the following changes to the settings of the task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: --`NuGet push`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: --`$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '--**Target feed location**: **This organization/collection**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '--**Target feed**: **PacktLearnDevOps**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After making these changes, the task will look as follows:![Figure 7.12 – Adding
    a NuGet push task
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.12_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.12 – Adding a NuGet push task
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: From the top menu, select **Save & queue** and then **Save and run.** Wait until
    the build pipeline has finished successfully.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, let''s check whether the package has been successfully published.
    Click on **Artifacts** from the left menu. You will see that the package has been
    pushed to the feed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.13 – Pushed package'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_7.13_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 7.13 – Pushed package
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a package with models, we can use it in our Visual Projects.
    In the next section, we are going to create an application and consume the package
    from the feed in Azure DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: Consuming the package in Visual Studio from the Artifacts feed
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that our **PartsUnlimited.Models** package has been pushed to our feed in
    Artifacts, we can consume this package from Visual Studio. In this section, we
    are going to create a new console app in Visual Studio and connect to the feed
    from there.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Visual Studio 2019 and create a new .NET Core console application:![Figure
    7.14 – Creating a new console package
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.14_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.14 – Creating a new console package
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once the application has been created, navigate to Azure DevOps and from the
    left menu, select **Artifacts**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the top menu, select **Connect to feed**:![Figure 7.15 – Connect to feed
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.15_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.15 – Connect to feed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the next screen, select **Visual Studio** from the list. We are going to
    use these settings to set up the machine in the next step:![Figure 7.16 – Visual
    Studio machine setup
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.16_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.16 – Visual Studio machine setup
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate back to the console app in Visual Studio. Then, from the top menu,
    select **Tools** > **NuGet package manager** > **Manage NuGet Packages for Solution**:![Figure
    7.17 – NuGet package installer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.17_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.17 – NuGet package installer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To add the feed to the project, click on the settings icon:![Figure 7.18 – NuGet
    settings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.18_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.18 – NuGet settings
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the `https://pkgs.dev.azure.com/PacktLearnDevOps/_packaging/PacktLearnDevOps/nuget/v3/index.json`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The outcome of adding these values will look as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.19 – Adding the feed''s package source'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_7.19_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.19 – Adding the feed's package source
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Update** and then **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we can consume the feed in our application. In the NuGet package manager,
    select the package source that we just added. Make sure that **Include prelease**
    is selected since this package hasn't been released yet:![Figure 7.20 – Selecting
    the package source
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.20_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.20 – Selecting the package source
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the package and install it in the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we can reference the package in our code and use the model classes. Add
    a `using` statement and create a new `CarItem` by replacing the code in the `Program.cs`
    file with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this demonstration, we consumed the package that is automatically built and
    released from the feed. In the next and last section of this chapter, we are going
    to look at how to scan a package for vulnerabilities using WhiteSource Bolt.
  prefs: []
  type: TYPE_NORMAL
- en: Scanning for package vulnerabilities using WhiteSource Bolt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: WhiteSource Bolt can be used to scan packages for vulnerabilities directly from
    the build pipeline. It is a developer tool for scanning for security vulnerabilities
    in application code, as well as open source applications and packages. It offers
    extensions that can be installed through the Azure DevOps marketplace and through
    GitHub. WhiteSource Bolt can be downloaded free of charge, but this version is
    limited to five scans per day, per repository.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about WhiteSource Bolt, you can refer to the following
    website: [https://bolt.whitesourcesoftware.com/](https://bolt.whitesourcesoftware.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we are going to install the extension in our Azure DevOps
    project and implement the tasks that come with it into our existing build pipeline.
    Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a browser and navigate to [https://marketplace.visualstudio.com/](https://marketplace.visualstudio.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for WhiteSource Bolt in the search box and select the **WhiteSource Bolt**
    extension:![Figure 7.21 – Installing WhiteSource Bolt
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.21_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.21 – Installing WhiteSource Bolt
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Install the extension in your DevOps organization by selecting the organization
    and clicking the **Install** button:![Figure 7.22 – Installing the extension in
    your organization
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.22_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.22 – Installing the extension in your organization
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you've installed the package, navigate back to **Azure DevOps** > **Pipelines**.
    You will see that **WhiteSource Bolt** has been added to the menu. Select it:![Figure
    7.23 – WhiteSource Bolt menu item
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.23_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.23 – WhiteSource Bolt menu item
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the **Settings** screen, specify a work email address, company name, and
    country. Then, click the **Get Started** button:![Figure 7.24 – WhiteSource Bolt
    settings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.24_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.24 – WhiteSource Bolt settings
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We can now use WhiteSource Bolt tasks in our pipeline. Select the build pipeline
    that we created in section *Creating the build pipeline*. Now, edit the pipeline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new task to the pipeline again, just like we did in the in *Creating the
    build pipeline section*, and search for **WhiteSource Bolt**. Add the task to
    the pipeline:![Figure 7.25 – Adding the WhiteSource Bolt task
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.25_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.25 – Adding the WhiteSource Bolt task
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Drag the task below the **Build solution** task since we want to scan the solution
    before the package is packed and pushed into the Artifact feed. This will look
    as follows:![Figure 7.26 – Overview of the build pipeline
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.26_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.26 – Overview of the build pipeline
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You don't have to specify any configuration values; this task will run without
    them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the top menu, select **Save & queue** and then **Save and run**. Wait until
    the build pipeline has finished successfully.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the top menu once more and select **WhiteSource Bolt Build Support**.
    There, you will see an overview of the scan:![Figure 7.27 – WhiteSource Bolt vulnerability
    report
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_7.27_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 7.27 – WhiteSource Bolt vulnerability report
  prefs: []
  type: TYPE_NORMAL
- en: With that, we have installed the WhiteSource Bolt extension and scanned our
    solution for vulnerabilities before packaging and pushing the NuGet package to
    our feed in Azure Artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: This concludes this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at Azure Artifacts in more depth. First, we set up
    a feed and created a new NuGet package using the model classes in the **PartsUnlimited**
    project. Then, we created a build pipeline where we packed and pushed the package
    to the feed automatically during the build process. Finally, we used the WhiteSource
    Bolt extension from the Azure marketplace to scan the package for vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to focus on how to deploy applications in
    Azure DevOps using release pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Check out the following links for more information about the topics that were
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'What is Azure Artifacts?: [https://docs.microsoft.com/en-us/azure/devops/artifacts/overview?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/artifacts/overview?view=azure-devops)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Get started with NuGet packages in Azure DevOps Services and TFS: [https://docs.microsoft.com/en-us/azure/devops/artifacts/get-started-nuget?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/artifacts/get-started-nuget?view=azure-devops)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
