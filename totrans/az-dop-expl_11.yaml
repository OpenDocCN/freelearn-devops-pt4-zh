- en: 'Chapter 7:'
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 第七章：
- en: Using Artifacts with Azure DevOps
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Azure DevOps 中使用 Artifacts
- en: In the previous chapter, we covered how to host build agents in Azure Pipelines.
    In this chapter, we are going to cover how to use artifacts with Azure DevOps.
    We will begin by explaining what artifacts are. Then, we will look at how to create
    them in Azure DevOps, as well as how to produce the artifact package from a built
    pipeline. Next, we are going to cover how to deploy the feed using a release pipeline.
    Then, we are going to cover how to set the feed permissions and how to consume
    the package in Visual Studio. Finally, we are going to cover how to scan for package
    vulnerabilities using WhiteSource Bolt.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讲解了如何在 Azure Pipelines 中托管构建代理。在本章中，我们将讲解如何在 Azure DevOps 中使用 Artifacts。我们将从解释什么是
    Artifacts 开始。然后，我们将看看如何在 Azure DevOps 中创建它们，以及如何从构建管道中生成工件包。接下来，我们将讲解如何使用发布管道部署供稿。然后，我们将讲解如何设置供稿权限，以及如何在
    Visual Studio 中消费包。最后，我们将讲解如何使用 WhiteSource Bolt 扫描包漏洞。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introducing Azure Artifacts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 Azure Artifacts
- en: Creating an artifact feed with Azure Artifacts
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Azure Artifacts 创建工件供稿
- en: Producing the package using a build pipeline
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用构建管道生成包
- en: Publishing the package to the feed from a build pipeline
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从构建管道将包发布到供稿中
- en: Configuring the feed permissions from the feed settings
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从供稿设置中配置供稿权限
- en: Consuming the package in Visual Studio from the Artifacts feed
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Artifacts 供稿中在 Visual Studio 中消费包
- en: Scanning for package vulnerabilities using WhiteSource Bolt
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 WhiteSource Bolt 扫描包漏洞
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow this chapter, you need to have an active Azure DevOps organization.
    The organization we'll be using in this chapter is the **PartsUnlimited** organization,
    which we created in [*Chapter 1*](B16392_01_Final_JM_ePub.xhtml#_idTextAnchor027)*,
    Azure DevOps Overview*. You also need to have Visual Studio 2019 installed, which
    can be downloaded from [https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章内容，你需要有一个活跃的 Azure DevOps 组织。我们将在本章中使用的组织是**PartsUnlimited**组织，具体内容在[*第1章*](B16392_01_Final_JM_ePub.xhtml#_idTextAnchor027)*，Azure
    DevOps 概述*中创建。你还需要安装 Visual Studio 2019，可以从[https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/)下载。
- en: The source code for our sample application can be downloaded from [https://github.com/PacktPublishing/Learning-Azure-DevOps---B16392/tree/master/Chapter%207](https://github.com/PacktPublishing/Learning-Azure-DevOps---B16392/tree/master/Chapter%207).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们示例应用程序的源代码可以从[https://github.com/PacktPublishing/Learning-Azure-DevOps---B16392/tree/master/Chapter%207](https://github.com/PacktPublishing/Learning-Azure-DevOps---B16392/tree/master/Chapter%207)下载。
- en: Introducing Azure Artifacts
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Azure Artifacts
- en: It is likely that every developer has used a third-party or open source package
    in their code to add extra functionalities and speed up the development process
    of their application. Using popular, pre-built components that have been used
    and tested by the community will help you get things done more easily.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 每个开发者很可能都在代码中使用过第三方或开源包，以增加额外的功能并加快应用程序开发过程。使用社区已使用并测试过的流行的预构建组件，将帮助你更轻松地完成工作。
- en: Functionalities, scripts, and code that have been built by various teams in
    your organization are often reused by other teams and in different software development
    projects. These different artifacts can be moved into a library or package so
    that others can benefit from this.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的组织中，由不同团队构建的功能、脚本和代码经常被其他团队和不同的软件开发项目重用。这些不同的工件可以被移动到一个库或包中，以便其他人也能从中受益。
- en: There are different ways to build and host these packages. For instance, you
    can use NuGet for hosting and managing packages for the Microsoft Development
    platform or npm for JavaScript packages, Maven for Java, and more. Azure Artifacts
    offers features so that you can share and reuse packages easily. In Azure Artifacts,
    packages are stored in feeds. A feed is a container that allows you to group packages
    and control who has access to them.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方式可以构建和托管这些包。例如，你可以使用 NuGet 托管和管理 Microsoft 开发平台的包，或使用 npm 托管 JavaScript
    包，Maven 托管 Java 包等等。Azure Artifacts 提供了便捷的功能，使你可以轻松地共享和重用包。在 Azure Artifacts 中，包被存储在供稿中。供稿是一个容器，允许你将包进行分组，并控制谁可以访问它们。
- en: You can store packages in feeds that have been created by yourself or other
    teams, but it also has built-in support for **upstream sources**. With upstream
    sources, you can create a single feed to store both the packages that your organization
    produces and the packages that are consumed from remote feeds, such as NuGet,
    npm, Maven, Chocolatey, RubyGems, and more.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将包存储在你自己或其他团队创建的源中，但它也内置支持**上游源**。通过上游源，你可以创建一个单一源，用于存储组织生产的包以及从远程源消费的包，如
    NuGet、npm、Maven、Chocolatey、RubyGems 等。
- en: It is highly recommended to use Azure Artifacts as the main source for publishing
    internal packages and remote feeds. This is because it allows you to keep a comprehensive
    overview of all the packages being used by the organization and different teams.
    The feed knows the provenance of all the packages that are saved using upstream
    resources; the packages are saved into the feed even when the original source
    goes down or the package is deleted. Packages are versioned, and you typically
    reference a package by specifying the version of the package that you want to
    use in your application.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议将 Azure Artifacts 用作发布内部包和远程源的主要来源。原因在于，它能够让你全面了解组织和不同团队使用的所有包。源能够知道所有使用上游资源保存的包的来源，即使原始源宕机或包被删除，包也会被保存在源中。包是有版本管理的，通常你可以通过指定你想在应用程序中使用的包版本来引用一个包。
- en: Many packages allow for unrestricted access, without the need for users to sign
    in. However, there are packages that require us to authenticate by using a username
    and password combination or access token. Regarding the latter, access tokens
    can be set to expire after a given time period.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 许多包允许无需登录即可访问。然而，也有一些包需要我们通过用户名和密码组合或访问令牌进行身份验证。对于后者，访问令牌可以设置为在指定的时间后过期。
- en: In the next section, we are going to look at how to create an **Artifact Feed**
    in Azure DevOps.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，我们将讨论如何在 Azure DevOps 中创建一个**工件源**。
- en: Creating an artifact feed with Azure Artifacts
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Azure Artifacts 创建工件源
- en: In this demo, we are going to create an artifact feed in Azure Artifacts. Packages
    are stored in feeds, which are basically organizational constructs that allow
    us to group packages and manage their permissions. Every package type (NuGet,
    npm, Maven, Python, and Universal) can be stored in a single feed.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个演示中，我们将创建一个 Azure Artifacts 中的工件源。包存储在源中，这些源本质上是组织结构，用于将包分组并管理其权限。每种包类型（NuGet、npm、Maven、Python
    和 Universal）都可以存储在一个源中。
- en: 'For this demonstration, we are going to use our **PartsUnlimited** sample project
    again and add a new artifact feed to the project. To do this, perform the following
    steps:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本次演示中，我们将再次使用我们的**PartsUnlimited**示例项目，并向项目中添加一个新的工件源。为此，请执行以下步骤：
- en: Open a web browser and navigate to [https://dev.azure.com/](https://dev.azure.com/).
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个浏览器并导航到 [https://dev.azure.com/](https://dev.azure.com/)。
- en: Log in with your Microsoft account and from the left menu, select **Artifacts**.
    Then, click the **+ Create Feed** button.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你的 Microsoft 帐户登录，并从左侧菜单选择**Artifacts**。然后，点击**+ 创建源**按钮。
- en: In the **Create new feed** dialog box, add the following values (make sure that
    **Upstream sources** is disabled; we are not going to use packages from remote
    feeds in this chapter):![Figure 7.1 – Creating a new feed
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**创建新源**对话框中，添加以下值（确保**上游源**被禁用；我们在本章中不会使用远程源中的包）：![图 7.1 – 创建一个新源
- en: '](img/Figure_7.01_B16392.jpg)'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_7.01_B16392.jpg)'
- en: Figure 7.1 – Creating a new feed
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.1 – 创建一个新源
- en: Click the **Create** button.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**按钮。
- en: With that, we have created a new feed so that we can store our packages. In
    the next section, we are going to produce a package using a build pipeline.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以上操作，我们已经创建了一个新的源，以便我们可以存储我们的包。在下一部分，我们将通过构建管道生成一个包。
- en: Producing the package using a build pipeline
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过构建管道生成包
- en: Now that we have created our feed, we are going to create a build pipeline that
    automatically creates a package during the build of the project. For this example,
    you can use the sample project provided in this book's GitHub repository. This
    sample project consists of all the models from the **PartsUnlimited** project.
    We are going to add all the models to a package and distribute it from Artifacts.
    This way, you can easily share the data model across different projects.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了我们的源，接下来我们将创建一个构建流水线，在项目构建过程中自动创建一个包。在本例中，你可以使用本书GitHub代码库中提供的示例项目。这个示例项目包含了**PartsUnlimited**项目中的所有模型。我们将把所有模型添加到一个包中，并通过Artifacts进行分发。这样，你就可以在不同的项目之间轻松共享数据模型。
- en: The first step is to import the GitHub repository into the **PartsUnlimited**
    organization in Azure DevOps.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是将GitHub代码库导入到Azure DevOps中的**PartsUnlimited**组织。
- en: Adding the sample project to the PartsUnlimited repository
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将示例项目添加到PartsUnlimited代码库
- en: 'To add the sample models project to the PartsUnlimited repository, perform
    the following steps:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要将示例模型项目添加到PartsUnlimited代码库中，请执行以下步骤：
- en: Navigate to the **PartsUnlimited** project in Azure DevOps and go to **Repos
    > Files**.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到Azure DevOps中的**PartsUnlimited**项目，并转到**Repos > Files**。
- en: Select **Import repository** from the **PartsUnlimited** dropdown:![Figure 7.2
    – Importing a repository
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**PartsUnlimited**下拉菜单中选择**导入代码库**：![图 7.2 – 导入代码库
- en: '](img/Figure_7.02_B16392.jpg)'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_7.02_B16392.jpg)'
- en: Figure 7.2 – Importing a repository
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.2 – 导入代码库
- en: Enter the URL of the source repository into the **Clone URL** box and add a
    name for your new GitHub repository:![Figure 7.3 – Specifying the repository's
    URL
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将源代码库的URL输入到**Clone URL**框中，并为你的新GitHub代码库添加一个名称：![图 7.3 – 指定代码库的URL
- en: '](img/Figure_7.03_B16392.jpg)'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_7.03_B16392.jpg)'
- en: Figure 7.3 – Specifying the repository's URL
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.3 – 指定代码库的 URL
- en: Click **Import**.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**导入**。
- en: Once the project has been imported, the repository will look as follows:![Figure
    7.4 – Repository in Azure DevOps
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦项目被导入，代码库将如下所示：![图 7.4 – Azure DevOps中的代码库
- en: '](img/Figure_7.04_B16392.jpg)'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_7.04_B16392.jpg)'
- en: Figure 7.4 – Repository in Azure DevOps
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.4 – Azure DevOps中的代码库
- en: Now that we have imported the **PartsUnlimited.Models** project into an Azure
    DevOps repository, we can use in a build pipeline to create a NuGet package of
    it.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将**PartsUnlimited.Models**项目导入到Azure DevOps代码库中，可以在构建流水线中使用它来创建NuGet包。
- en: In the next section, we are going to create a build pipeline that will automatically
    package our project into an Artifact package.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将创建一个构建流水线，自动将我们的项目打包成一个Artifact包。
- en: Creating the build pipeline
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建构建流水线
- en: 'Now that the project has been added to the repository, we can create the build
    pipeline. To do this, perform the following steps:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在项目已经添加到代码库中，我们可以创建构建流水线。为此，请执行以下步骤：
- en: Navigate to Azure DevOps and open the **PartsUnlimited.Models** project once
    more. From the left menu, click on **Pipelines**.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次导航到Azure DevOps并打开**PartsUnlimited.Models**项目。从左侧菜单中点击**Pipelines**。
- en: Click on **New pipeline** from the top-right menu and select **Use the classic
    editor** on the first screen of the wizard.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从右上角菜单中点击**新建流水线**，然后在向导的第一个屏幕中选择**使用经典编辑器**。
- en: On the second screen, set the properties shown in the following screenshot and
    click **Continue**:![Figure 7.5 – Selecting a source
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二个屏幕上，设置如下截图所示的属性，然后点击**继续**：![图 7.5 – 选择源
- en: '](img/Figure_7.05_B16392.jpg)'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_7.05_B16392.jpg)'
- en: Figure 7.5 – Selecting a source
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.5 – 选择源
- en: Select **ASP.NET** on the next screen of the wizard and click **Apply**. With
    that, the Build pipeline will be created. Click on the **+** sign on the right-hand
    side of **Agent job 1** and search for **NuGet**.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在向导的下一个屏幕中选择**ASP.NET**，然后点击**应用**。这样，构建流水线就会被创建。点击**Agent job 1**右侧的**+**号，并搜索**NuGet**。
- en: Add the NuGet task to the pipeline:![Figure 7.6 – Adding the NuGet task
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将NuGet任务添加到流水线：![图 7.6 – 添加NuGet任务
- en: '](img/Figure_7.06_B16392.jpg)'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_7.06_B16392.jpg)'
- en: Figure 7.6 – Adding the NuGet task
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.6 – 添加NuGet任务
- en: Reorder the tasks and drag the NuGet task so that it's after the **Build Solution**
    task. Delete the **Test Assemblies** method since we don't have any tests in this
    project:![Fig. 7.7 – Reordering the tasks
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新排列任务，并将NuGet任务拖动到**Build Solution**任务之后。删除**Test Assemblies**方法，因为该项目中没有测试：![图
    7.7 – 重新排序任务
- en: '](img/Figure_7.07_B16392.jpg)'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_7.07_B16392.jpg)'
- en: Fig. 7.7 – Reordering the tasks
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.7 – 重新排序任务
- en: 'Make the following changes to the settings of the newly added task:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对新添加的任务的设置进行以下更改：
- en: --`NuGet pack`
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: --`NuGet pack`
- en: --`pack`
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: --`pack`
- en: --`**/*.csproj`
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: --`**/*.csproj`
- en: After making these changes, the task will look as follows:![Figure 7.8 – Configuring
    the task
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成这些更改后，任务将如下所示：![图 7.8 – 配置任务
- en: '](img/Figure_7.08_B16392.jpg)'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_7.08_B16392.jpg)'
- en: Figure 7.8 – Configuring the task
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.8 – 配置任务
- en: Next, let's set the versioning of the package. A recommended approach to versioning
    packages is to use `1`
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们设置包的版本控制。推荐的包版本控制方法是使用 `1`
- en: --`0`
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: --`0`
- en: --`0`
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: --`0`
- en: '--**Time zone**: **UTC**'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: --**时区**：**UTC**
- en: From the top menu, select **Save & queue** and then **Save and run.**
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从顶部菜单中选择**Save & queue**，然后选择**Save and run**。
- en: The build pipeline will now run successfully. In the next section, we are going
    to publish the **PartsUnlimited.Models** NuGet package that we created in the
    first demo to our feed.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 构建管道现在将成功运行。在下一部分，我们将把在第一个演示中创建的**PartsUnlimited.Models** NuGet 包发布到我们的 feed。
- en: Publishing the package to the feed from a build pipeline
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从构建管道将包发布到 feed
- en: Now that we've built the application and the package from our build pipeline,
    we can publish the package to the feed that we created in our first demo.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经构建了应用程序和包，并从构建管道中生成了包，我们可以将该包发布到我们在第一个演示中创建的 feed。
- en: For this, we need to set the required permissions on the feed. The identity
    that the build will run under needs to have **Contributor** permissions on the
    feed. Once these permissions have been set, we can extend our pipeline to push
    the package to the feed.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们需要在 feed 上设置所需的权限。构建将以其身份运行，该身份需要在 feed 上具有**Contributor**权限。一旦设置了这些权限，我们就可以扩展我们的管道，将包推送到
    feed。
- en: Setting the required permissions on the feed
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 feed 上的所需权限
- en: 'To set the required permissions, we need to go to the settings of our feed:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置所需的权限，我们需要进入 feed 的设置：
- en: Log in with your Microsoft account and from the left menu, select **Artifacts**.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的 Microsoft 帐户登录，并从左侧菜单中选择**Artifacts**。
- en: Go to the settings of the feed by selecting the **Settings** button from the
    top-right menu:![Figure 7.9 – Opening the feed's settings
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 feed 的设置，通过点击右上角菜单中的**Settings**按钮：![图 7.9 – 打开 feed 设置
- en: '](img/Figure_7.09_B16392.jpg)'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_7.09_B16392.jpg)'
- en: Figure 7.9 – Opening the feed's settings
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.9 – 打开 feed 设置
- en: Then, click on **Permissions** from the top menu and click on **+ Add users/groups**:![Figure
    7.10 – Feed permission settings
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，从顶部菜单中点击**Permissions**，点击**+ Add users/groups**：![图 7.10 – Feed 权限设置
- en: '](img/Figure_7.10_B16392.jpg)'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_7.10_B16392.jpg)'
- en: Figure 7.10 – Feed permission settings
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.10 – Feed 权限设置
- en: Add the build that has the same name as the project, which in my case is the
    **Parts.Unlimited Build Service** identity:![Figure 7.11 – Adding the build identity
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加与项目同名的构建，在我的例子中是**Parts.Unlimited Build Service**身份：![图 7.11 – 添加构建身份
- en: '](img/Figure_7.11_B16392.jpg)'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_7.11_B16392.jpg)'
- en: Figure 7.11 – Adding the build identity
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.11 – 添加构建身份
- en: Click **Save**.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Save**。
- en: Now that the identity of the build pipeline has the required permissions on
    the feed, we can push the package to it during while it's being built.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，构建管道的身份已在 feed 上拥有所需的权限，我们可以在构建过程中将包推送到该 feed。
- en: Publishing the package
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 发布包
- en: 'We are now ready to extend our build pipeline and push the package from it
    to the feed. To do this, we need to perform the following steps:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备扩展构建管道，并将包从构建管道推送到 feed。为此，我们需要执行以下步骤：
- en: Navigate to Azure DevOps and open the **PartsUnlimited.Models** project. Click
    on **Pipelines** in the left menu.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 Azure DevOps，打开**PartsUnlimited.Models**项目。在左侧菜单中点击**Pipelines**。
- en: Select the build pipeline that we created in the previous step and click on
    the **Edit** button, which can be found in the top-right menu.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们在上一步中创建的构建管道，然后点击右上角菜单中的**Edit**按钮。
- en: Click on the **+** button again next to **Agent job 1** and search for NuGet.
    Add the task to the pipeline.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击**Agent job 1**旁边的**+**按钮，搜索 NuGet，并将任务添加到管道中。
- en: 'Drag the newly added task below the NuGet task that we created in the previous
    step. Make the following changes to the settings of the task:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新添加的任务拖到我们在上一步中创建的 NuGet 任务下方。对任务的设置进行以下更改：
- en: --`NuGet push`
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: --`NuGet push`
- en: --`$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg`
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: --`$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg`
- en: '--**Target feed location**: **This organization/collection**'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: --**目标 feed 位置**：**此组织/集合**
- en: '--**Target feed**: **PacktLearnDevOps**'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: --**目标源**：**PacktLearnDevOps**
- en: After making these changes, the task will look as follows:![Figure 7.12 – Adding
    a NuGet push task
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在进行这些更改后，任务将如下所示：![图 7.12 – 添加 NuGet 推送任务
- en: '](img/Figure_7.12_B16392.jpg)'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_7.12_B16392.jpg)'
- en: Figure 7.12 – Adding a NuGet push task
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.12 – 添加 NuGet 推送任务
- en: From the top menu, select **Save & queue** and then **Save and run.** Wait until
    the build pipeline has finished successfully.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从顶部菜单选择**保存并排队**，然后选择**保存并运行**。等待构建管道成功完成。
- en: 'Finally, let''s check whether the package has been successfully published.
    Click on **Artifacts** from the left menu. You will see that the package has been
    pushed to the feed:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们检查一下包是否成功发布。点击左侧菜单中的**Artifacts**。你会看到包已成功推送到源中：
- en: '![Figure 7.13 – Pushed package'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 7.13 – 推送的包'
- en: '](img/Figure_7.13_B16392.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_7.13_B16392.jpg)'
- en: Figure 7.13 – Pushed package
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.13 – 推送的包
- en: Now that we have a package with models, we can use it in our Visual Projects.
    In the next section, we are going to create an application and consume the package
    from the feed in Azure DevOps.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个带有模型的包，我们可以在 Visual 项目中使用它。在接下来的部分，我们将创建一个应用程序并从 Azure DevOps 的源中消费该包。
- en: Consuming the package in Visual Studio from the Artifacts feed
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Artifacts 源中消费包
- en: Now that our **PartsUnlimited.Models** package has been pushed to our feed in
    Artifacts, we can consume this package from Visual Studio. In this section, we
    are going to create a new console app in Visual Studio and connect to the feed
    from there.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的**PartsUnlimited.Models**包已经推送到 Artifacts 中的源，我们可以从 Visual Studio 中消费这个包。在这一部分，我们将创建一个新的控制台应用程序，并从那里连接到源。
- en: 'Therefore, we need to perform the following steps:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要执行以下步骤：
- en: Open Visual Studio 2019 and create a new .NET Core console application:![Figure
    7.14 – Creating a new console package
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2019 并创建一个新的 .NET Core 控制台应用程序：![图 7.14 – 创建新的控制台包
- en: '](img/Figure_7.14_B16392.jpg)'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_7.14_B16392.jpg)'
- en: Figure 7.14 – Creating a new console package
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.14 – 创建新的控制台包
- en: Once the application has been created, navigate to Azure DevOps and from the
    left menu, select **Artifacts**.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序创建完成后，导航到 Azure DevOps，从左侧菜单选择**Artifacts**。
- en: From the top menu, select **Connect to feed**:![Figure 7.15 – Connect to feed
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从顶部菜单选择**连接到源**：![图 7.15 – 连接到源
- en: '](img/Figure_7.15_B16392.jpg)'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_7.15_B16392.jpg)'
- en: Figure 7.15 – Connect to feed
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.15 – 连接到源
- en: On the next screen, select **Visual Studio** from the list. We are going to
    use these settings to set up the machine in the next step:![Figure 7.16 – Visual
    Studio machine setup
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个屏幕中，从列表中选择**Visual Studio**。我们将使用这些设置在下一步中设置机器：![图 7.16 – Visual Studio
    机器设置
- en: '](img/Figure_7.16_B16392.jpg)'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_7.16_B16392.jpg)'
- en: Figure 7.16 – Visual Studio machine setup
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.16 – Visual Studio 机器设置
- en: Navigate back to the console app in Visual Studio. Then, from the top menu,
    select **Tools** > **NuGet package manager** > **Manage NuGet Packages for Solution**:![Figure
    7.17 – NuGet package installer
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到 Visual Studio 中的控制台应用程序。然后，从顶部菜单选择**工具** > **NuGet 包管理器** > **管理解决方案的 NuGet
    包**：![图 7.17 – NuGet 包安装器
- en: '](img/Figure_7.17_B16392.jpg)'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_7.17_B16392.jpg)'
- en: Figure 7.17 – NuGet package installer
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.17 – NuGet 包安装器
- en: To add the feed to the project, click on the settings icon:![Figure 7.18 – NuGet
    settings
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将源添加到项目中，点击设置图标：![图 7.18 – NuGet 设置
- en: '](img/Figure_7.18_B16392.jpg)'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_7.18_B16392.jpg)'
- en: Figure 7.18 – NuGet settings
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.18 – NuGet 设置
- en: Click on the `https://pkgs.dev.azure.com/PacktLearnDevOps/_packaging/PacktLearnDevOps/nuget/v3/index.json`.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`https://pkgs.dev.azure.com/PacktLearnDevOps/_packaging/PacktLearnDevOps/nuget/v3/index.json`。
- en: 'The outcome of adding these values will look as follows:'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加这些值后的结果如下所示：
- en: '![Figure 7.19 – Adding the feed''s package source'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 7.19 – 添加源的包源'
- en: '](img/Figure_7.19_B16392.jpg)'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_7.19_B16392.jpg)'
- en: Figure 7.19 – Adding the feed's package source
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.19 – 添加源的包源
- en: Click **Update** and then **OK**.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**更新**，然后点击**确定**。
- en: Now, we can consume the feed in our application. In the NuGet package manager,
    select the package source that we just added. Make sure that **Include prelease**
    is selected since this package hasn't been released yet:![Figure 7.20 – Selecting
    the package source
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以在应用程序中消费这个源。在 NuGet 包管理器中，选择我们刚刚添加的包源。确保勾选**包括预发布版本**，因为这个包尚未发布：![图 7.20
    – 选择包源
- en: '](img/Figure_7.20_B16392.jpg)'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_7.20_B16392.jpg)'
- en: Figure 7.20 – Selecting the package source
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.20 – 选择包源
- en: Select the package and install it in the project.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择包并将其安装到项目中。
- en: 'Now, we can reference the package in our code and use the model classes. Add
    a `using` statement and create a new `CarItem` by replacing the code in the `Program.cs`
    file with the following:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以在代码中引用该包并使用模型类。添加 `using` 语句，并通过以下代码替换 `Program.cs` 文件中的代码，创建一个新的 `CarItem`：
- en: '[PRE0]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this demonstration, we consumed the package that is automatically built and
    released from the feed. In the next and last section of this chapter, we are going
    to look at how to scan a package for vulnerabilities using WhiteSource Bolt.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个演示中，我们使用的是从 feed 自动构建和发布的包。在本章的下一部分也是最后一部分中，我们将探讨如何使用 WhiteSource Bolt 扫描包中的漏洞。
- en: Scanning for package vulnerabilities using WhiteSource Bolt
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 WhiteSource Bolt 扫描包中的漏洞
- en: WhiteSource Bolt can be used to scan packages for vulnerabilities directly from
    the build pipeline. It is a developer tool for scanning for security vulnerabilities
    in application code, as well as open source applications and packages. It offers
    extensions that can be installed through the Azure DevOps marketplace and through
    GitHub. WhiteSource Bolt can be downloaded free of charge, but this version is
    limited to five scans per day, per repository.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: WhiteSource Bolt 可直接从构建管道扫描包中的漏洞。它是一个开发者工具，用于扫描应用代码以及开源应用和包中的安全漏洞。它提供了可以通过 Azure
    DevOps 市场和 GitHub 安装的扩展。WhiteSource Bolt 可以免费下载，但此版本每天每个仓库的扫描次数限制为五次。
- en: Important Note
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'For more information about WhiteSource Bolt, you can refer to the following
    website: [https://bolt.whitesourcesoftware.com/](https://bolt.whitesourcesoftware.com/).'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 WhiteSource Bolt 的更多信息，您可以参考以下网站：[https://bolt.whitesourcesoftware.com/](https://bolt.whitesourcesoftware.com/)。
- en: 'In this section, we are going to install the extension in our Azure DevOps
    project and implement the tasks that come with it into our existing build pipeline.
    Let''s get started:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将安装扩展到我们的 Azure DevOps 项目中，并将其自带的任务实施到现有的构建管道中。让我们开始吧：
- en: Open a browser and navigate to [https://marketplace.visualstudio.com/](https://marketplace.visualstudio.com/).
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开浏览器并访问 [https://marketplace.visualstudio.com/](https://marketplace.visualstudio.com/)。
- en: Search for WhiteSource Bolt in the search box and select the **WhiteSource Bolt**
    extension:![Figure 7.21 – Installing WhiteSource Bolt
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中搜索 WhiteSource Bolt 并选择 **WhiteSource Bolt** 扩展：![图 7.21 – 安装 WhiteSource
    Bolt
- en: '](img/Figure_7.21_B16392.jpg)'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_7.21_B16392.jpg)'
- en: Figure 7.21 – Installing WhiteSource Bolt
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.21 – 安装 WhiteSource Bolt
- en: Install the extension in your DevOps organization by selecting the organization
    and clicking the **Install** button:![Figure 7.22 – Installing the extension in
    your organization
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择组织并点击 **安装** 按钮，在您的 DevOps 组织中安装扩展：![图 7.22 – 在您的组织中安装扩展
- en: '](img/Figure_7.22_B16392.jpg)'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_7.22_B16392.jpg)'
- en: Figure 7.22 – Installing the extension in your organization
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.22 – 在您的组织中安装扩展
- en: Once you've installed the package, navigate back to **Azure DevOps** > **Pipelines**.
    You will see that **WhiteSource Bolt** has been added to the menu. Select it:![Figure
    7.23 – WhiteSource Bolt menu item
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装包后，返回到 **Azure DevOps** > **Pipelines**。您将看到 **WhiteSource Bolt** 已添加到菜单中。选择它：![图
    7.23 – WhiteSource Bolt 菜单项
- en: '](img/Figure_7.23_B16392.jpg)'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_7.23_B16392.jpg)'
- en: Figure 7.23 – WhiteSource Bolt menu item
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.23 – WhiteSource Bolt 菜单项
- en: On the **Settings** screen, specify a work email address, company name, and
    country. Then, click the **Get Started** button:![Figure 7.24 – WhiteSource Bolt
    settings
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **设置** 页面上，指定工作邮箱地址、公司名称和国家/地区。然后，点击 **开始使用** 按钮：![图 7.24 – WhiteSource Bolt
    设置
- en: '](img/Figure_7.24_B16392.jpg)'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_7.24_B16392.jpg)'
- en: Figure 7.24 – WhiteSource Bolt settings
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.24 – WhiteSource Bolt 设置
- en: We can now use WhiteSource Bolt tasks in our pipeline. Select the build pipeline
    that we created in section *Creating the build pipeline*. Now, edit the pipeline.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以在管道中使用 WhiteSource Bolt 任务了。选择我们在 *创建构建管道* 部分中创建的构建管道。现在，编辑管道。
- en: Add a new task to the pipeline again, just like we did in the in *Creating the
    build pipeline section*, and search for **WhiteSource Bolt**. Add the task to
    the pipeline:![Figure 7.25 – Adding the WhiteSource Bolt task
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次向管道中添加一个新任务，就像我们在 *创建构建管道* 部分中所做的那样，搜索 **WhiteSource Bolt**，并将该任务添加到管道中：![图
    7.25 – 添加 WhiteSource Bolt 任务
- en: '](img/Figure_7.25_B16392.jpg)'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_7.25_B16392.jpg)'
- en: Figure 7.25 – Adding the WhiteSource Bolt task
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.25 – 添加 WhiteSource Bolt 任务
- en: Drag the task below the **Build solution** task since we want to scan the solution
    before the package is packed and pushed into the Artifact feed. This will look
    as follows:![Figure 7.26 – Overview of the build pipeline
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将任务拖动到**构建解决方案**任务的下方，因为我们希望在将包打包并推送到Artifact feed之前扫描解决方案。效果如下图所示：![Figure
    7.26 – 构建管道概述
- en: '](img/Figure_7.26_B16392.jpg)'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_7.26_B16392.jpg)'
- en: Figure 7.26 – Overview of the build pipeline
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Figure 7.26 – 构建管道概述
- en: You don't have to specify any configuration values; this task will run without
    them.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您不必指定任何配置值；此任务将在没有它们的情况下运行。
- en: From the top menu, select **Save & queue** and then **Save and run**. Wait until
    the build pipeline has finished successfully.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从顶部菜单中，选择**保存并排队**，然后选择**保存并运行**。等到构建管道成功完成。
- en: Go to the top menu once more and select **WhiteSource Bolt Build Support**.
    There, you will see an overview of the scan:![Figure 7.27 – WhiteSource Bolt vulnerability
    report
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次转到顶部菜单，选择**WhiteSource Bolt Build Support**。在那里，您将看到扫描的概述：![Figure 7.27 –
    WhiteSource Bolt漏洞报告
- en: '](img/Figure_7.27_B16392.jpg)'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_7.27_B16392.jpg)'
- en: Figure 7.27 – WhiteSource Bolt vulnerability report
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 7.27 – WhiteSource Bolt漏洞报告
- en: With that, we have installed the WhiteSource Bolt extension and scanned our
    solution for vulnerabilities before packaging and pushing the NuGet package to
    our feed in Azure Artifacts.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 通过此操作，我们已安装了WhiteSource Bolt扩展，并在将NuGet包打包并推送到Azure Artifacts的feed之前扫描了我们的解决方案中的漏洞。
- en: This concludes this chapter.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这章就到这里了。
- en: Summary
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at Azure Artifacts in more depth. First, we set up
    a feed and created a new NuGet package using the model classes in the **PartsUnlimited**
    project. Then, we created a build pipeline where we packed and pushed the package
    to the feed automatically during the build process. Finally, we used the WhiteSource
    Bolt extension from the Azure marketplace to scan the package for vulnerabilities.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们更深入地了解了Azure Artifacts。首先，我们设置了一个feed，并使用**PartsUnlimited**项目中的模型类创建了一个新的NuGet包。然后，我们创建了一个构建管道，在构建过程中自动打包并将包推送到feed中。最后，我们使用Azure市场上的WhiteSource
    Bolt扩展来扫描包中的漏洞。
- en: In the next chapter, we are going to focus on how to deploy applications in
    Azure DevOps using release pipelines.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将重点介绍如何使用发布管道在Azure DevOps中部署应用程序。
- en: Further reading
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Check out the following links for more information about the topics that were
    covered in this chapter:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下链接以获取本章涵盖的更多信息：
- en: 'What is Azure Artifacts?: [https://docs.microsoft.com/en-us/azure/devops/artifacts/overview?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/artifacts/overview?view=azure-devops)'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Azure Artifacts？：[https://docs.microsoft.com/zh-cn/azure/devops/artifacts/overview?view=azure-devops](https://docs.microsoft.com/zh-cn/azure/devops/artifacts/overview?view=azure-devops)
- en: 'Get started with NuGet packages in Azure DevOps Services and TFS: [https://docs.microsoft.com/en-us/azure/devops/artifacts/get-started-nuget?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/artifacts/get-started-nuget?view=azure-devops)'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Azure DevOps Services和TFS中开始使用NuGet包：[https://docs.microsoft.com/zh-cn/azure/devops/artifacts/get-started-nuget?view=azure-devops](https://docs.microsoft.com/zh-cn/azure/devops/artifacts/get-started-nuget?view=azure-devops)
