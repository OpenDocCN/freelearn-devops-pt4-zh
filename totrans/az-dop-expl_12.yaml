- en: 'Chapter 8:'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying Applications with Azure DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we saw how you can automate your development processes
    by using build pipelines for your code. But an important part of the software
    life cycle is also the release phase. In this chapter, we will cover an overview
    of release pipelines; we'll see how to create a release pipeline with Azure DevOps
    and how you can automate and improve the deployment of your solutions by using
    release approvals and multi-stage pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: An overview of release pipelines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a release pipeline with Azure DevOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring continuous deployment on a release pipeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a multi-stage release pipeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using approvals and gates for controlling your release process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using environments and deployment groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using YAML-based pipelines for release
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow this chapter, you need to have an active Azure DevOps organization.
    The organization used in this chapter is the **PartsUnlimited** organization we
    created in [*Chapter 1*](B16392_01_Final_JM_ePub.xhtml#_idTextAnchor027), *Azure
    DevOps Overview*.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of release pipelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Release pipelines** permit you to implement the continuous delivery phase
    of a software life cycle. With a release pipeline, you can automate the process
    of testing and deliver your solutions (committed code) to the final environments
    or directly to the customer''s site (continuous delivery and continuous deployment).'
  prefs: []
  type: TYPE_NORMAL
- en: With **continuous delivery**, you deliver code to a certain environment for
    testing or quality control, while **continuous deployment** is the phase where
    you release code to a final production environment.
  prefs: []
  type: TYPE_NORMAL
- en: A release pipeline can be triggered manually (you decide when you want to deploy
    your code) or it can be triggered according to events such as a code commit on
    the master branch, after the completion of a stage (for example, the production
    testing stage), or according to a schedule.
  prefs: []
  type: TYPE_NORMAL
- en: A release pipeline is normally connected to an **artifact store** (a deployable
    component for an application and output of a build). An artifact store contains
    a set of artifacts for a build (distinct artifact versions), and a release pipeline
    takes these artifacts and provisions the needed infrastructure and steps for deploying
    the artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: A release pipeline (exactly as we saw in [*Chapter 4*](B16392_04_Final_JM_ePub.xhtml#_idTextAnchor096),
    *Understanding Azure DevOps Pipelines*, for the build pipeline definition) is
    composed of different stages (parts of the pipeline that can run independently),
    and each stage is composed of **jobs** and **tasks**.
  prefs: []
  type: TYPE_NORMAL
- en: 'A schema of a release pipeline is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_8.01_B16392.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – Release pipeline schema
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding diagram, a release pipeline starts from artifacts
    (the output of a successfully completed build) and then moves between stages,
    executing jobs and tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Azure DevOps, a release pipeline is executed according to the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: When a deployment request is triggered, Azure Pipelines checks whether a pre-deployment
    approval phase is required and eventually sends approval notifications to the
    involved people in a team.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When approved, the deployment job is queued and waits for an agent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An agent that is able to run this deployment job picks up the job.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The agent downloads the artifacts as specified in the release pipeline definition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The agent runs the tasks defined in the deployment job and creates a log for
    each step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the deployment for a stage is completed, Azure Pipelines executes a post-deployment
    approval (if present).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The deployment then goes to the next stage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In a release pipeline, an artifact is deployed to an **environment** (where
    your final application will run), and these environments can be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A machine on your corporate network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A virtual machine in the cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A containerized environment, such as Docker or Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A managed service, such as Azure App Service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A serverless environment, such as Azure Functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A way to define an Azure Pipelines environment is with a YAML file, where you
    can include an environment section that specifies the Azure Pipelines environment
    where you'll deploy your artifact, or by using the classic UI-based editor
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll see how to define a release pipeline with the Azure
    DevOps UI in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a release pipeline with Azure DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The final goal for implementing a complete CI/CD process with DevOps is to automate
    the deployment of your software to a final environment (for example, the final
    customer), and to achieve this goal, you need to create a **release pipeline**.
  prefs: []
  type: TYPE_NORMAL
- en: A release pipeline takes the build artifacts (the result of your build process)
    and deploys those artifacts to one or more final environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create our first release pipeline, we''ll use the **PartsUnlimited** web
    application project previously deployed on Azure DevOps:'
  prefs: []
  type: TYPE_NORMAL
- en: To create a release pipeline with Azure DevOps, click on **Pipelines** on the
    left menu, select **Releases**, and then click on **New release pipeline**:![Figure
    8.2 – Creating a new release pipeline
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.02_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.2 – Creating a new release pipeline
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the **Select a template** list that appears on the right, you have a set
    of available templates for creating releases for different types of applications
    and platforms. For our application, select **Azure App Service deployment** and
    click **Apply**:![Figure 8.3 – Release pipeline template selection
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.03_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.3 – Release pipeline template selection
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, provide a name for the stage that will contain the release tasks. Here,
    I'm calling it `Deploy to cloud`:![Figure 8.4 – Stage name
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.04_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.4 – Stage name
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the **Stages** section, click on the **1 job, 1 task** link. Here, you need
    to provide the settings of the Azure web app environment where your application
    will be deployed, such as your Azure subscription and the App Service instance
    (web app) where the code will be deployed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.5 – Stage settings'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.05_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.5 – Stage settings
  prefs: []
  type: TYPE_NORMAL
- en: You have now defined the stage of your release pipeline (single-stage). In the
    next section, we'll see how to specify the artifacts for your release pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Defining artifacts for a release pipeline
  prefs: []
  type: TYPE_NORMAL
- en: '**Artifacts** are all the items (output of a build) that must be deployed in
    your final environment, and Azure Pipelines can deploy artifacts that come from
    different artifact sources:'
  prefs: []
  type: TYPE_NORMAL
- en: To select artifacts, on the main release pipeline screen, click on **Add an
    artifact**:![Figure 8.6 – Adding an artifact to a release pipeline
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.06_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.6 – Adding an artifact to a release pipeline
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the **Add an artifact** panel, you have **Source type** automatically set
    to **Build** (this means that you're deploying the output of a build pipeline).
    Here, you need to select the build pipeline that you want to use as the source
    (the name or ID of the build pipeline that publishes the artifact; here, I'm using
    the **PartsUnlimitedE2E** build pipeline) and the default version (the default
    version will be deployed when new releases are created. The version can be changed
    for manually created releases at the time of release creation):![Figure 8.7 –
    Add an artifact
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.07_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.7 – Add an artifact
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click on the **Add** button to save the artifact configuration, and then click
    on the **Save** button in the top-right corner to save your release pipeline:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.8 – Saving a release pipeline'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.08_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.8 – Saving a release pipeline
  prefs: []
  type: TYPE_NORMAL
- en: Your release pipeline is now ready. In the next section, we'll see how to create
    the Azure DevOps release process.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Azure DevOps release
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After defining our release pipeline (stages and artifacts), we need to create
    a **release**. A release is simply a run of your release pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: To create a release, on the release pipeline definition page, click on the **Create
    release** button in the top-right corner:![Figure 8.9 – Creating a release
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.09_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.9 – Creating a release
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the **Create a new release** page, accept all the default values (you need
    to have a successfully completed build with artifacts created), and then click
    on **Create**:![Figure 8.10 – Creating a release
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.10_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.10 – Creating a release
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A new release is now created, and you will see a green bar indicating that:![Figure
    8.11 – Release created
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.11_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.11 – Release created
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, you can click on the release name (here, it is **Release-1**) and you will
    be redirected to the details of the release process:![Figure 8.12 – Release details
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.12_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.12 – Release details
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you click on the stage, you can see the details of each step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.13 – Details of the stage'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.13_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.13 – Details of the stage
  prefs: []
  type: TYPE_NORMAL
- en: You have completed your first release pipeline. Here, we have triggered it manually.
    In the next section, we'll see how to use variables in your pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Using variables in a release pipeline
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In a release pipeline, you can also use variables and variable groups to specify
    variable parameters that can be used in your pipeline tasks. To specify a variable
    for your release pipeline, select the **Variables** tab and specify the name and
    value of your variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.14 – Release pipeline variables'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.14_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.14 – Release pipeline variables
  prefs: []
  type: TYPE_NORMAL
- en: 'You can then use the variables in your pipeline''s tasks by using the `$(VariableName)`
    notation, as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.15 – Using a variable in a release pipeline task'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.15_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.15 – Using a variable in a release pipeline task
  prefs: []
  type: TYPE_NORMAL
- en: Using variables is recommended if you have parameters that change on your pipeline.
    In the next section, we'll see how to configure triggers for continuous deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the release pipeline triggers for continuous deployment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To automate the continuous deployment of your application, you need to configure
    triggers in your release pipeline definition:'
  prefs: []
  type: TYPE_NORMAL
- en: To do that, click on the **Continuous deployment trigger** icon in the pipeline's
    **Artifacts** section:![Figure 8.16 – Continuous deployment trigger
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.16_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.16 – Continuous deployment trigger
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the **Continuous deployment trigger** panel, enable it to automatically create
    a new release after every successfully completed build and select a branch filter
    (for example, the build pipeline's default branch):![Figure 8.17 – Continuous
    deployment trigger configuration
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.17_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.17 – Continuous deployment trigger configuration
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, in the **Stages** section, select the **Pre-deployment conditions** icon:![Figure
    8.18 – Pre-deployment conditions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.18_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.18 – Pre-deployment conditions
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the **Pre-deployment conditions** pane, check that the trigger for this
    stage is set to **After release** (this means that the deployment stage will start
    automatically when a new release is created from this pipeline):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.19 – Pre-deployment conditions definition'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.19_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.19 – Pre-deployment conditions definition
  prefs: []
  type: TYPE_NORMAL
- en: In this pane, you can also define other parameters, such as selecting artifact
    condition(s) to trigger a new deployment (a release will be deployed to this stage
    only if all the artifact conditions match), setting up a schedule for the deployment,
    allowing pull request-based releases to be deployed to this stage, selecting the
    users who can approve or reject deployments to this stage (pre-deployment approvals),
    defining gates to evaluate before deployment, and defining behavior when multiple
    releases are queued for deployment.
  prefs: []
  type: TYPE_NORMAL
- en: You have now created a release pipeline that takes your artifacts and deploys
    them to the cloud by using Azure DevOps and also by applying continuous deployment
    triggers and pre-deployment conditions checks.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll see how to improve our release pipeline by using
    multiple stages.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a multi-stage release pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A multi-stage release pipeline is useful when you want to release your applications
    with multiple steps (staging), such as, for example, development, staging, and
    production. A quite common scenario in the real world is, for example, deploying
    an application initially to a testing environment. When tests are finished, the
    application is moved to a quality acceptance stage, and then, if the customer
    accepts the release, the application is moved to a production environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we''ll do the same: starting from the previously created single-stage
    pipeline, we''ll create a new release pipeline with three stages, called **DEV**,
    **QA**, and **Production**. Each stage is a deployment target for our pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: In the previously defined pipeline, as a first step, I renamed the **Deploy
    to cloud** stage to **Production**. This will be the final stage of the release
    pipeline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on the **Clone** action to clone the defined stage into a new stage:![Figure
    8.20 – Cloning a stage
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.20_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.20 – Cloning a stage
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A new cloned stage appears after the previously created stage. Change the name
    of this stage to `QA`:![Figure 8.21 – Cloned stage (QA)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.21_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.21 – Cloned stage (QA)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, we need to reorganize the stages because the **QA** stage must occur before
    the **Production** stage. To reorganize these stages, select the **QA** stage
    and choose the pre-deployment conditions. In the **Pre-deployment conditions**
    pane, select **After release** as the trigger (instead of **After stage**):![Figure
    8.22 – Pre-deployment conditions for the QA stage
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.22_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.22 – Pre-deployment conditions for the QA stage
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you can see, the pipeline diagram has now changed (you have the **QA** and
    **Production** stages executed in parallel). Now, select the **Pre-deployment
    conditions** properties for the **Production** stage; set the trigger to **After
    stage** and select **QA** as the stage:![Figure 8.23 – Pre-deployment conditions
    for the Production stage
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.23_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.23 – Pre-deployment conditions for the Production stage
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The stages are now ordered as we want (**QA** occurs before **Production**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, we have two stages that deploy the application to the same environment
    (**QA** was created as a clone of **Production**). Select the **QA** stage from
    the **Tasks** drop-down list and change **App service name** to a new instance:![Figure
    8.24 – QA stage details
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.24_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.24 – QA stage details
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, we need to repeat the same steps for creating the **DEV** stage. Clone
    it from **QA**, set its **Pre-deployment conditions** properties with the trigger
    set to **After Release**, and change the **QA** trigger to **After stage**, with
    **DEV** as the selected stage. Your pipeline will now look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.25 – Multi-stage release pipeline defined'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.25_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: cYou have now created a release pipeline with different stages (**Dev**, **QA**,
    and **Production**) for controlling the deployment steps of your code.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll see how to add approvals for moving between stages.
  prefs: []
  type: TYPE_NORMAL
- en: Using approvals and gates for managing deployments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As previously configured, our release pipeline will move between stages only
    if the previous stage is completed successfully. This is okay for moving from
    **DEV** to **QA** because on this transition, our application is deployed to a
    testing environment, but the transition from **QA** to **Production** should usually
    be controlled because the release of an application into a production environment
    normally occurs after an approval.
  prefs: []
  type: TYPE_NORMAL
- en: Creating approvals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s follow these steps to create approvals:'
  prefs: []
  type: TYPE_NORMAL
- en: To create an approval step, from our pipeline definition, select the **Pre-deployment
    conditions** properties of the **Production** stage. Here, go to the **Pre-deployment
    approvals** section and enable it. Then, in the **Approvers** section, select
    the users that will be responsible for approving. Please also check that the **The
    user requesting a release or deployment should not approve it** option is not
    ticked:![Figure 8.26 – Setting approvals
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.26_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.26 – Setting approvals
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **Save** to save your pipeline definition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, create a new release to start our pipeline and click on the name of the
    created release (here, it is called **Release-2**):![Figure 8.27 – Multi-stage
    release triggered
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.27_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.27 – Multi-stage release triggered
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The release pipeline starts. The **DEV** and **QA** stages are completed, while
    on the **Production** stage, a **Pending approval** status appears:![Figure 8.28
    – Pending approval
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.28_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.28 – Pending approval
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The release pipeline is waiting for approval. You can click on the **Pending
    approval** icon and the approval dialog is opened. Here, you can insert a comment
    and then approve or reject the release:![Figure 8.29 – Approving a stage
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.29_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.29 – Approving a stage
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can also defer the stage to a specific date if needed or reassign the approval
    to another user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you click on **Approve**, the stage is approved and the release pipeline
    is completed:![Figure 8.30 – Multi-stage pipeline completed
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.30_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.30 – Multi-stage pipeline completed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you now click on the Azure App Service instance deployed by your pipeline,
    you can see that the final code (the **PartsUnlimited** website) is deployed in
    the cloud:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.31 – Web app deployed from the release pipeline'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.31_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.31 – Web app deployed from the release pipeline
  prefs: []
  type: TYPE_NORMAL
- en: Using gates to check conditions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previously explained scenario, we saw how to configure a manual approval
    process for a release pipeline. Sometimes, you need to avoid the manual process
    and instead have a policy in place that permits your pipeline to go ahead only
    if some checks are successfully performed. This is where **gates** come in action.
  prefs: []
  type: TYPE_NORMAL
- en: In Azure Pipelines, a gate allows you to automatically check for specific conditions
    from Azure DevOps from external services and then enable the release process only
    when the conditions are met. You can use gates to check the status of work items
    and issues of a project and enable the release only if you have no open bugs.
    You can also query test results, check whether security scans on artifacts are
    performed before releasing, monitor the infrastructure health before releasing,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, here we want to configure a gate for our previously created
    release pipeline where we check for open bugs on Azure Boards. We will see how
    to do this with the help of the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If there are open bugs, the release pipeline cannot go ahead.
  prefs: []
  type: TYPE_NORMAL
- en: To check for open bugs in our project, we need to define a query for work items.
    From our Azure DevOps project, select **Boards**, click on **Queries**, and then
    select **New query**:![Figure 8.32 – Cresting a new query for the gate conditions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.32_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.32 – Cresting a new query for the gate conditions
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Here, I've defined a query as follows:![Figure 8.33 – Query definition
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.33_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.33 – Query definition
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This query checks for active bugs in our project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save the query by giving it a name (for example, **ActiveBugs**) and specifying
    a folder (here, I've selected the **Shared Queries** folder):![Figure 8.34 – Saving
    the query definition
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.34_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.34 – Saving the query definition
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now we're ready to define our gate. From the multi-stage release pipeline we
    previously created, select the **Production** stage, click on the bolt icon, and
    then enable gates, as shown in the following screenshot:![Figure 8.35 – Enabling
    gates
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.35_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.35 – Enabling gates
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Here, you can also specify the delay before the evaluation of gates (the time
    before the added gates are evaluated for the first time. If no gates are added,
    then the deployment will wait for the specified duration before proceeding), and
    we can specify the deployment gates (adding gates that evaluate health parameters).
    These gates are periodically evaluated in parallel and if the gates succeed, the
    deployment will proceed; otherwise, the deployment is rejected.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To specify our gate, click on **Add** and then select **Query work items** (this
    will execute a work item query and check the results):![Figure 8.36 – Gate definition
    (Query work items)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_8.36_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 8.36 – Gate definition (Query work items)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, select the `0` (the maximum number of matching work items from the query)
    because we want the release pipeline to only be completed if we have 0 active
    bugs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.37 – Specifying conditions for the gate'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.37_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.37 – Specifying conditions for the gate
  prefs: []
  type: TYPE_NORMAL
- en: Here, you can also define evaluations options such as `0` means deployment will
    proceed when all gates succeed in the same evaluation cycle), **timeout after
    which gates fail** (the maximum evaluation period for gates; the deployment will
    be rejected if the timeout is reached before gates succeed).
  prefs: []
  type: TYPE_NORMAL
- en: Our gate is now defined and active. You can also define other types of gates
    and you can also have gates that call Azure Functions to evaluate a release condition
    (which is useful if you want to integrate your release check with specific conditions
    on an external system).
  prefs: []
  type: TYPE_NORMAL
- en: Using deployment groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **deployment group** is a set of machines with a deployment agent installed
    on each of them. Each deployment group represents a physical environment and it
    defines a logical group of target machines for parallel deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can define a deployment group in Azure DevOps by going to the **Pipeline**
    section and selecting **Deployment groups**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.38 – Creating a deployment group'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.38_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.38 – Creating a deployment group
  prefs: []
  type: TYPE_NORMAL
- en: Here, you can add servers where the build and release agent is installed.
  prefs: []
  type: TYPE_NORMAL
- en: Each created deployment group is a member of a **deployment pool**, and this
    pool can also be shared across projects. Deployment groups can only be used on
    release pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can add a deployment group job by going to the release pipeline editor,
    selecting the job, and clicking on the three-dots button. Here, you can see the
    **Add a deployment group job** option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.39 – Adding a deployment group job'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.39_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.39 – Adding a deployment group job
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, deployment group jobs are not yet supported on YAML
    pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: YAML release pipelines with Azure DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A recently added feature of Azure DevOps is the option to define release pipelines
    by using YAML (previously, this was possible only for the CI part). This is now
    possible by using multi-stage pipelines and with that, you can use a unified YAML
    experience for configuring Azure DevOps pipelines for CI, CD, and CI/CD.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the release YAML pipeline can be done exactly as described in [*Chapter
    4*](B16392_04_Final_JM_ePub.xhtml#_idTextAnchor096), *Understanding Azure DevOps
    Pipelines*. There are, however, some concepts to understand, such as **environments**.
  prefs: []
  type: TYPE_NORMAL
- en: '**Environments** are a group of resources targeted by a pipeline – for example,
    Azure Web Apps, virtual machines, or Kubernetes clusters. You can use environments
    to group resources by scope – for example, you can create an environment called
    **development** with your development resources and an environment called **production**
    with the production resources. Environments can be created by going to the **Environments**
    section under **Pipelines**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.40 – Creating environments'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.40_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.40 – Creating environments
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of a multi-stage release pipeline for deploying
    a .NET Core application on Azure Web Apps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the preceding YAML file, the pipeline defines four stages:
    **Build Source**, **Deploy in Dev**, **Deploy in QA**, and **Deploy in Production**.
    At each of these stages, the application is deployed on the specified environment.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we had a full overview of how to work with release pipelines
    in Azure DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: We created a basic release pipeline for the **PartsUnlimited** project, defined
    artifacts, and created our first release by adding continuous deployment conditions.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we improved our pipeline definition by using multiple stages (**DEV**,
    **QA**, and **Production**), and at the end of this chapter, we saw how to define
    approvals and gates for managing the release of our code in a more controlled
    way and the concepts around YAML-based release pipelines
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll see how to integrate Azure DevOps with GitHub.
  prefs: []
  type: TYPE_NORMAL
