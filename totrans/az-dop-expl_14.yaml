- en: 'Chapter 9:'
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Azure DevOps with GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitHub is one of the most popular development platforms that's used by open
    source developers and businesses across the globe to store their code. In this
    chapter, you will learn how to leverage Azure DevOp's capabilities while you continue
    to use GitHub as your software development hub.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: An overview of Azure DevOps and GitHub integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Azure Pipelines with GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Azure Boards with GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of GitHub Actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow this chapter, you need to have an active Azure DevOps organization
    and a GitHub account. You can sign up for a GitHub account here: [https://github.com/join](https://github.com/join).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get this chapter''s prerequisites ready. This chapter requires that
    you have the **Parts Unlimited** GitHub repository cloned to your GitHub account.
    You will also need an Azure DevOps project to follow the examples in this chapter.
    Follow these steps before moving on to the next section:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch a browser instance and go to [https://github.com/microsoft/PartsUnlimitedE2E](https://github.com/microsoft/PartsUnlimitedE2E).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Fork**, as shown in the following screenshot:![Figure 9.1 – GitHub repository
    for Parts Unlimited
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.01_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.1 – GitHub repository for Parts Unlimited
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: GitHub should prompt you to log into your account if you're not logged in already.
    Select the account you wish to clone the repository to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will take a couple of minutes to complete. You should see the repository
    in your account upon completion.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will be using this repository to test GitHub integration in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, log into Azure DevOps ([https://dev.azure.com](https://dev.azure.com))
    and create a new empty project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.2 – Creating a new project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.02_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.2 – Creating a new project
  prefs: []
  type: TYPE_NORMAL
- en: You're now ready to try out the examples described in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of Azure DevOps and GitHub integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitHub and Azure DevOps go hand in hand to provide a superior software development
    experience for teams, enabling them to ship and release software at a faster pace
    with minimal effort. In many scenarios, GitHub and Azure DevOps are competitors
    (for example, Azure Repos versus GitHub repositories), so it is typically up to
    you to choose the one that fits your needs and integrate them together for a wholesome
    platform setup.
  prefs: []
  type: TYPE_NORMAL
- en: Azure DevOps provides various RBAC levels, native enterprise identity integration,
    and so on, whereas GitHub enables simple collaboration across identities (while
    including AD integration in its Enterprise version).
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to Continuous Integration/Continuous Development, Azure DevOps
    is way ahead and has matured compared to its counterpart, GitHub Actions. So,
    overall, it depends on your use case and requirements whether you choose Azure
    DevOps and/or GitHub for specific components in your software development life
    cycle.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub includes an extension marketplace where you can find many third-party
    applications to extend GitHub to the applications you use. Azure DevOps integration
    is available through many of these extensions on GitHub Marketplace. Let's look
    at some of them.
  prefs: []
  type: TYPE_NORMAL
- en: 'GitHub and Azure DevOps integration is achieved through the Azure Boards and
    Azure Pipelines extensions. Let''s start by taking a look at the Azure DevOps
    extensions available in GitHub Marketplace:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch a browser instance and go to [https://github.com/marketplace](https://github.com/marketplace).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for `Azure` in the extension marketplace. You'll find many extensions
    that can integrate Azure solutions with your GitHub repositories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here, we''re interested in two specific extensions: Azure Boards and Azure
    Pipelines. Let''s talk about them in a bit more detail:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '--**Azure Boards**: This extension allows you to link your Azure Boards work
    items to GitHub objects such as commits, pull requests, and issues:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.3 – Azure Boards extension'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.03_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.3 – Azure Boards extension
  prefs: []
  type: TYPE_NORMAL
- en: '--**Azure Pipelines**: This extension allows you to build and release software
    using Azure Pipelines while your code is stored and maintained in your GitHub
    repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4 – Azure Pipelines extension'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.04_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.4 – Azure Pipelines extension
  prefs: []
  type: TYPE_NORMAL
- en: You can install these extensions from GitHub Marketplace and start configuration
    from GitHub itself, but in this chapter, we will be starting the integration process
    from Azure DevOps. GitHub and Azure DevOps integration is also supported for the
    on-premise variants of both products (GitHub on-premises and Azure DevOps Server).
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Azure Pipelines with GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Integrating Azure Pipelines with GitHub enables developers to continue using
    GitHub as their preferred source control management platform while leveraging
    Azure Pipelines' build and release capabilities. Azure Pipelines offers unlimited
    pipeline job minutes for open source projects.
  prefs: []
  type: TYPE_NORMAL
- en: We looked at Azure Pipelines in detail previously in this book, so in this section,
    we'll take a look at how to store our Azure Pipelines configuration and source
    code in GitHub and build a CI/CD process with GitHub and Azure DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Azure Pipelines and GitHub integration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to use Azure Pipelines with GitHub, you must authorize Azure Pipelines
    to access your GitHub repositories. Let''s take a look at the steps for this:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into your Azure DevOps account and select the project we created in the
    *Technical requirements* section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Pipelines** > **Create Pipeline**:![Figure 9.5 – Create Pipeline
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.05_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.5 – Create Pipeline
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **GitHub** as your code source location:![Figure 9.6 – GitHub source
    for Azure Pipelines
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.06_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.6 – GitHub source for Azure Pipelines
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will need to grant permission from Azure Pipelines to your GitHub account:![Figure
    9.7 – Authorize Azure Pipelines (OAuth)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.07_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.7 – Authorize Azure Pipelines (OAuth)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Upon successful completion, you will have your GitHub repositories listed in
    Azure DevOps. Select the newly created **PartsUnlimitedE2E** repository:![Figure
    9.8 – Parts Unlimited repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.08_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.8 – Parts Unlimited repository
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will now get the option to install the Azure Pipelines application in your
    GitHub account. You can choose to install it for only a specific repository or
    for all repositories. Once you've made this choice, click **Approve & Install**:![Figure
    9.9 – Installing the Azure Pipeline extension
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.09_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.9 – Installing the Azure Pipelines extension
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Since **Parts Unlimited** is a ASP.NET-based application, please choose **ASP.NET**
    as your pipeline configuration template:![Figure 9.10 – Azure Pipelines task configuration
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.10_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.10 – Azure Pipelines task configuration
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Azure DevOps will automatically generate a pipeline YAML file. You can review
    and modify it based on your requirements. `vs2017-win2016` before continuing:![Figure
    9.11 – Azure Pipelines task YAML
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.11_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.11 – Azure Pipelines task YAML
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Save and run** to save the pipeline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will need to make a commit to the repository to store the pipeline YAML
    file. You can commit the changes to the master branch or create a new branch to
    do so:![Figure 9.12 – Running an Azure pipeline
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.12_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.12 – Running an Azure pipeline
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Clicking on **Save and run** will create the pipeline and start its execution.
    It may take a few minutes for the build job to complete:![Figure 9.13 – Pipeline
    jobs
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.13_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.13 – Pipeline jobs
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: While this completes, let's look at the changes you made to your GitHub repository.
    Browse to your GitHub account and go to the **PartsUnlimitedE2E** repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see a commit and a newly added `azure-pipelines.yml` file, which stores
    the pipeline's configuration:![Figure 9.14 – Pipeline YAML in GitHub
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.14_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.14 – Pipeline YAML in GitHub
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you click on the little yellow dot shown in the preceding screenshot, you
    will be shown the status of your Azure pipeline on your GitHub repository page.
    Upon successful completion of the pipeline job, you should see its status update
    on your GitHub account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.15 – Job logs in GitHub'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.15_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.15 – Job logs in GitHub
  prefs: []
  type: TYPE_NORMAL
- en: With that, you have set up an Azure pipeline with GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Testing continuous integration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will try out the CI capabilities of GitHub and Azure Pipelines.
    We'll make a code change in GitHub and raise a pull request that will trigger
    the Azure Pipelines job automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to your GitHub account and open the **PartsUnlimited E2E** repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on `Readme.MD` and click **Edit**:![Figure 9.16 – Readme.MD
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.16_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.16 – Readme.MD
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Update the file so that it includes some sample text. Choose the option to create
    a new branch and click **Propose changes**:![Figure 9.17 – Propose changes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.17_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.17 – Propose changes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click Create pull request, as shown in the following screenshot:![Figure 9.18
    – Create pull request
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.18_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.18 – Create pull request
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This will open the **Pull request** page. It'll take a couple of minutes for
    the Azure Pipelines job to start. Once started, you can click on **Details** to
    see the status of the pipeline job:![Figure 9.19 – PR automated checks
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.19_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.19 – Pull request automated checks
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This concludes testing out the continuous integration capabilities of GitHub
    and Azure Pipelines. As we can see, Azure Pipelines and GitHub integrate very
    well and provide a whole new DevOps experience. You can merge the pull request
    to complete this process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding a build Status badge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Azure Pipelines provides markup text that can be used in your GitHub repository
    documentation to provide the status of the pipelines job for the project. This
    can help developers be aware of the pipeline's status at any time, without the
    need to go to Azure DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s learn how to set up an Azure Pipelines Status badge:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into Azure DevOps and browse to **Your project** > **Pipelines** > **PartsUnlimited
    E2E**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the ellipses (**…**) and select **Status badge**:![Figure 9.20 – Status
    badge
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.20_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.20 – Status badge
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Copy the **Sample markdown** text box's value. Optionally, you can choose to
    get the markdown for a specific branch. Please save this markdown in a temporary
    location:![Figure 9.21 – Status badge URL
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.21_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.21 – Status badge URL
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, before we can use this in GitHub, we must allow anonymous access to the
    project's badge.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Project Settings** > **Pipelines** > **Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Turn off the **Disable anonymous access to badges** setting. If you find this
    option grayed out, you must turn this off in the organization settings first:![Figure
    9.22 – Status badge access
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.22_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.22 – Status badge access
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, you can use this markdown in your GitHub documentation. It is recommended
    that you keep this in your repository's README file so that it's the first thing
    anyone will see:![Figure 9.23 – Status badge markdown
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.23_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.23 – Status badge markdown
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Upon committing your changes, you should see the Azure Pipelines badge:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.24 –Status badge showcase'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.24_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.24 – Status badge showcase
  prefs: []
  type: TYPE_NORMAL
- en: With that, you've completed the Azure Pipelines integration with GitHub. In
    the next section, we'll take a look at integrating Azure Boards with GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Azure Boards with GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Boards is the best place to plan and track your work items. Integrating
    Azure Boards with GitHub allows you to keep using Azure Boards as your planning
    and managing platform while you continue using GitHub as your source control management
    platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'By integrating Azure Boards with GitHub, you can link objects from Azure Boards
    to GitHub. A few examples are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Work item and Git commit/issue/pull request linking means you can link your
    work items to the corresponding work being done in GitHub.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can update your work item's status from GitHub itself.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overall, integration allows us to track and link the deliverable across the
    two platforms easily.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's set up our Azure Boards integration.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Azure Boards and GitHub integration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Azure Boards is another extension available in GitHub Marketplace. You can configure
    the integration from both Azure DevOps and GitHub Marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s set this up with the help of the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into Azure DevOps and browse to your **Parts Unlimited** project > **Project
    settings** > **Boards** > **GitHub connections**:![Figure 9.25 – Connecting GitHub
    to Boards
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.25_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.25 – Connecting GitHub to Boards
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **Connect your GitHub account**. You will need to authorize Azure Boards
    in order to access your GitHub account. Upon successfully linking them, you'll
    need to select the GitHub organization you want to connect to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Azure DevOps will list your repositories. Please choose **PartsUnlimited E2E**
    for the purpose of this project and click **Save**:![Figure 9.26 – Selecting a
    GitHub repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.26_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.26 – Selecting a GitHub repository
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This will redirect you back to GitHub so that you can install the Azure Boards
    application. You can choose to install it for specific repositories or for all
    your repositories:![Figure 9.27 – Approving the Azure Boards extension
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.27_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.27 – Approving the Azure Boards extension
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Upon installing Azure Boards, you should see your GitHub connection listed
    with a green checkmark, meaning it has been successful:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.28 – GitHub connection status'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.28_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.28 – GitHub connection status
  prefs: []
  type: TYPE_NORMAL
- en: With that, you have set up Azure Boards and GitHub integration.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an Azure Boards Status badge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like the Azure Pipelines status badge, Azure Boards also provides a status badge
    that can show stats about the work items inside your GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we''ll add a status badge from Azure Boards to our GitHub
    repository with the help of the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into Azure DevOps, browse to **Boards**, and click on the settings gear
    icon:![Figure 9.29 – Azure Boards work items
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.29_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.29 – Azure Boards work items
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'On the Settings page, browse to the status badge and set the following settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Check the **Allow anonymous users to access the status badge** box.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) You can choose to show only the 'In Progress' columns or include all columns.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Your screen should look as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.30 – Azure Boards status access'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_9.30_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.30 – Azure Boards status access
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Copy the sample markdown field and save the settings. You can use this markdown
    in your GitHub documentation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you''ve added the markdown to your GitHub README file, it should show
    the **Work Items** status, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.31 – Azure Boards status showcase'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.31_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.31 – Azure Boards status showcase
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll look at linking Azure Boards objects to GitHub objects.
  prefs: []
  type: TYPE_NORMAL
- en: Linking Azure Boards work items to GitHub objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have Azure Boards integrated with GitHub, let''s learn how to link
    and track items across the two platforms. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: In Azure Boards, create a new work item. You can use the Azure board status
    badge task we completed earlier as an example here:![](img/Figure_9.32_B16392.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 9.32 – Azure Boards work items
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will see that your status badge icon in GitHub gets updated immediately
    upon being refreshed, with one item in the **To Do** state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since this task has already been completed, we can link it to the respective
    GitHub commit. Open the newly created task and click on **Add link**:![Figure
    9.33 – Add link
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.33_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.33 – Add link
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Link type** drop-down and choose **GitHub Commit**. Provide your
    GitHub commit URL and click **OK**. Note that you also have the options to link
    to a GitHub issue or pull request:![Figure 9.34 – The Add link window
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.34_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.34 – The Add link window
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will now see the GitHub commit linked to the work item. Change its **State**
    to **Done**:![Figure 9.35 – GitHub link added
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.35_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.35 – GitHub link added
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'By doing this, you can view your GitHub objects in Azure Boards, which can
    be used to directly open the respective commit link in GitHub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.36 – GitHub link added to Azure Boards'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.36_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.36 – GitHub link added to Azure Boards
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll learn how to update a work item's status from GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Updating work items from GitHub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we'll learn how to change the state of a work item in Azure
    Boards from GitHub itself. This will help you link your GitHub objects to an Azure
    Boards work item, enabling a two-way linking and tracking system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Azure Boards** > **Boards** > **New item**. Create a test work item
    with a name of your choice:![Figure 9.37 – Updating the work item
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.37_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.37 – Updating the work item
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Take note of the ID of the work item (it's `347` in this example).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, go to your GitHub repository, make any minor change to any file, and create
    a pull request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the pull request information box, you can refer to the Azure Boards task
    by using `AB#347`, where `347` is your work item ID:![Figure 9.38 – Pull request
    information box
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_9.38_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 9.38 – Pull request information box
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you've completed the pull request, you will see that the commit message
    is now hyperlinked to Azure Boards and that the status for this work item in Azure
    Boards is updated to `AB#<Work Item ID` `>`. As soon as you link the work item
    to GitHub, your Azure Board work item will also be updated with a link to the
    corresponding GitHub object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Along with the link objective, in this demonstration, you also updated the
    state of the work item by using a simple instruction in the commit message. Let''s
    take a look at some of the sample messages you can use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.40 – Sample messages'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.40_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.40 – Sample messages
  prefs: []
  type: TYPE_NORMAL
- en: This concludes how to integrate with Azure Boards and GitHub. In this section,
    we looked at how to manage tasks better by using Azure Boards and GitHub together.
    In the next section, we'll take a look at GitHub Actions.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of GitHub Actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitHub Actions is a CI/CD service from GitHub that's used to build and release
    applications being developed in GitHub repositories. Essentially, GitHub Actions
    is similar to Azure Pipelines, where you can set up your build and release pipelines
    to automate the entire software development life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Actions was launched in early 2019 to provide a simple DevOps experience
    built into GitHub itself. GitHub Actions includes enterprise-grade features, such
    as support for any language with built-in, self-hosted agents for various OSes
    and container images.
  prefs: []
  type: TYPE_NORMAL
- en: It includes various pre-built workflow templates built by the community, which
    can make it easier for you to build your DevOps pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: It is outside the scope of this book to talk about GitHub Actions in detail,
    but you can refer to the GitHub Actions documentation at [https://github.com/features/actions](https://github.com/features/actions)
    to get started.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at how to use GitHub and Azure DevOps together to
    build an integrated software development platform for our software teams. To do
    this, we learned how to set up and manage Azure DevOps pipelines from GitHub,
    as well as build and integrate CI/CD solutions.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned about how to plan and track our work better in Azure Boards
    while doing software development in GitHub. You should now be able to use GitHub
    and Azure DevOps together and improve your overall productivity and DevOps experience.
    You should also be able to set up integration between the two services and use
    it in your daily DevOps work.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll look at several real-world CI/CD examples with the
    help of Azure DevOps.
  prefs: []
  type: TYPE_NORMAL
