- en: 'Chapter 11:'
  prefs: []
  type: TYPE_NORMAL
- en: Real-World CI/CD Scenarios with Azure DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll show you some sample projects where the **continuous
    integration and continuous delivery** (**CI/CD**) processes are handled by using
    Azure DevOps. We'll be taking sample applications and setting up a CI/CD pipeline
    using Azure DevOps for managing the software development, deployment, and upgrade
    life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll be covering the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a CI/CD pipeline for .NET-based applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a CI/CD pipeline for a container-based infrastructure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Architecture Center for DevOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow along with this chapter, you need to have an active Azure DevOps organization
    and an Azure subscription.
  prefs: []
  type: TYPE_NORMAL
- en: You can sign up for a test Azure DevOps organization at [https://dev.azure.com](https://dev.azure.com).
    You can get a trial for an Azure subscription at [https://azure.microsoft.com/en-in/free/](https://azure.microsoft.com/en-in/free/)
    if you do not have one already.
  prefs: []
  type: TYPE_NORMAL
- en: The code for this chapter is available at [https://github.com/PacktPublishing/Learning-Azure-DevOps---B16392/tree/master/Chapter11](https://github.com/PacktPublishing/Learning-Azure-DevOps---B16392/tree/master/Chapter11).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a CI/CD pipeline for .NET-based applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A typical .NET-based application includes applications developed using Microsoft's
    .NET Framework and uses a SQL database in the backend. You may have multiple layers
    of applications, such as a frontend, backend (also known as the middle tier or
    API tier), and data tier (SQL Server).
  prefs: []
  type: TYPE_NORMAL
- en: Azure Pipelines, which is part of Azure DevOps, provides a comprehensive solution
    to build, deploy, and manage your .NET-based infrastructure deployments. In this
    section, we'll look at the steps to configure CI/CD for a sample .NET-based application.
  prefs: []
  type: TYPE_NORMAL
- en: We will be creating two environments, named **staging** and **production**,
    for the application and setup of a CI/CD pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the sample application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll be using a simple **ToDo** application for this walkthrough. It's a web-based
    application that uses a SQL database in the backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is built using Microsoft ASP.NET, targeted for .NET Framework version 4.62\.
    You can access the source code here: [https://github.com/Azure-Samples/dotnet-sqldb-tutorial/tree/master/DotNetAppSqlDb](https://github.com/Azure-Samples/dotnet-sqldb-tutorial/tree/master/DotNetAppSqlDb).'
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended that you take a quick look at the application code to get
    familiar with it before we start building the CI/CD pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the pre-requisite Azure infrastructure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we''ll create the required Azure infrastructure to host the
    application. We will be creating the following resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Contoso-ToDo-Staging`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: b) `Contoso-ToDo-Production`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Application components**: We''ll be creating the following resources for
    both the staging and production environments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Azure App Service to host the web application
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Azure SQL Database to host the SQL database
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Creating a resource group in Azure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A resource group is a container that holds resources in the Azure cloud. Typically,
    a resource group includes resources that you want to manage as a group or are
    maintained in a similar life cycle. We''ll be creating two resource groups: one
    for production and one for staging. Let''s create the resource groups in Azure:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the Azure portal, [https://portal.azure.com](https://portal.azure.com),
    with your Azure credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on `resource group`:![ ](img/Figure_11.01_B16392.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 11.1 – Resource groups in the Azure portal
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Create** on the resource group page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your subscription and enter the resource group name as `Contoso-ToDo-Staging`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose a region close to your location:![Figure 11.2 – Resource group creation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.02_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.2 – Resource group creation
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **Review + Create** and then **Create** to start the deployment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the steps to create another resource group for the production environment
    named `Contoso-ToDo-Prod`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You've now created resource groups to host Azure resources.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Azure App Service
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Azure App Service is Microsoft Azure's **Platform as a Service** (**PaaS**)
    web hosting service. You can host any web-based application built in almost any
    language using App Service. Being a PaaS offering, App Service allows you to just
    push your code and get your application live without worrying about the underlying
    hardware, OS, and platform components.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we''ll be using Azure App Service to host the **ToDo** application:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Azure portal, click on **+ Create a resource** and click on **Web App**:![Figure
    11.3 – Azure Web App in the portal
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.03_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.3 – Azure Web App in the portal
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the `contosotodostagingXX`, where `XX` is your initials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'd) **Publish**: Choose **Code**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'e) **Runtime stack**: Choose **ASP.NET V4.7**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'f) **Operating System**: Choose **Windows**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'g) **Region**: Choose a region close to your location:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.4 – Azure App Service creation'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_11.04_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.4 – Azure App Service creation
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Under **App Service Plan**, choose the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'a) **Windows Plan**: Enter a new App Service plan name'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'b) **Sku and Size**: You can choose any SKU; it is recommended using **S0**
    or **Basic** to avoid any significant Azure costs since this is for testing. In
    production, you''d use a size that is suitable for your application resources
    demand:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.5 – App Service SKU'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_11.05_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.5 – App Service SKU
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Review + Create** and then **Create** to start the deployment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once completed, you'll receive a notification with the status displayed as completed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Repeat the steps in this task to create another Azure app service for the production
    environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this task, we created an Azure app service for hosting the **ToDo** web application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Azure SQL database
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Our sample **ToDo** app is using Microsoft SQL Server to store all its application
    data. In this task, we''ll create a new Azure SQL database that will be used by
    the **ToDo** app to store all the persistent data:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Azure portal, click on **+ Create a resource** and select **SQL Database**:![](img/Figure_11.06_B16392.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 11.6 – SQL Database in Azure
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the SQL Server `contosotodo-staging-db`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: d) `contosotodo-staging-dbserver`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ii) Provide a username and password of your choice.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'iii) **Location**: The Azure region used for deploying the web application.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'e) **Want to use SQL elastic pool?**: **No**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'f) **Compute + storage**: Change the SKU to **S0** or **Basic** to keep the
    Azure costs low during this test project. In reality, you''d need to choose the
    right compute and storage combination as per your application requirements:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.7 – Create SQL Database in Azure'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_11.07_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.7 – Create SQL Database in Azure
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click on **Next: Networking >**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the **Networking** configuration, select **Public endpoint** for **Connectivity
    method** and choose **Yes** for **Allow Azure services and resources to access
    this server**. Please note that this is just for the purpose of this test project
    deployment; in production, it is advised to allow access to SQL Server from your
    specific application servers only. Once selected, click on **Review + create**:![Figure
    11.8 – Reviewing SQL database creation in Azure
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.08_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.8 – Reviewing SQL database creation in Azure
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click **Create** to start the deployment. Once completed, you'll receive a notification
    in the notification menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the newly create Azure SQL database and copy the connection string.
    This will be used in the upcoming sections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the steps to create another Azure SQL database for production.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this task, we've created Azure SQL databases for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an Azure DevOps project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that our Azure infrastructure is ready, we''ll now set up an Azure DevOps
    organization to build the CI/CD pipeline. We will be using Azure Repos as our
    source control management system:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to [https://dev.azure.com](https://dev.azure.com) using your Azure DevOps
    account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new project named `Contoso ToDo` in your DevOps tenant:![Figure 11.9
    – Creating a DevOps project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.09_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.9 – Creating a DevOps project
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We will start by importing the application code in Azure Repos. Click on **Repos**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Import** under **Import a repository**:![Figure 11.10 – Import a
    repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.10_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.10 – Import a repository
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For the repository URL, enter [https://github.com/Azure-Samples/dotnet-sqldb-tutorial/](https://github.com/Azure-Samples/dotnet-sqldb-tutorial/)
    and click **Import**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.11 – Importing a repository from GitHub'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.11_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.11 – Importing a repository from GitHub
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the import is successful, we''ll see that project files are now available
    in Azure Repos. You can explore the code files to look under the hood of the `DotNetAppSQLDb`
    contains the source file of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.12 – Files in the Azure repo'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.12_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.12 – Files in the Azure repo
  prefs: []
  type: TYPE_NORMAL
- en: We will now set up a build pipeline for the application.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up CI for the application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that our application code is in Azure Repos, let''s create a build pipeline
    that will build the application package to be deployed to Azure App Service:'
  prefs: []
  type: TYPE_NORMAL
- en: In Azure DevOps, browse to **Pipelines** and click on **Create Pipeline**:![Figure
    11.13 – Creating a pipeline
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.13_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.13 – Creating a pipeline
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **Use the classic editor** to create the pipeline using the GUI (this
    is optional; as described in previous chapters, you can choose to configure the
    pipeline using a YAML file):![Figure 11.14 – Select the classic editor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.14_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.14 – Select the classic editor
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select your Azure repo and master branch, then click **Continue** to move to
    the next step:![Figure 11.15 – Selecting the repo
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.15_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.15 – Selecting the repo
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **ASP.NET** as the pipeline template:![Figure 11.16 – Selecting the pipeline
    template
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.16_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.16 – Selecting the pipeline template
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Review the pipeline configuration. For the purpose of this project, the default
    configuration does the job. Once it's reviewed, click on **Save & queue**:![Figure
    11.17 – Pipeline build tasks
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.17_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.17 – Pipeline build tasks
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the **Run Pipeline** wizard, you can add a comment and click **Save and run
    to start execution**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the job is in progress, you can review the status by click on the job name:![Figure
    11.18 – Pipeline build status
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.18_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.18 – Pipeline build status
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, let''s enable CI on the pipeline to auto-start the build on commit to
    the **master** branch. Edit the pipeline and browse to **Triggers**, and enable
    CI. You can choose to filter by branch or change to a different branch if you
    are not using **master** as your primary branch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.19 – Enable continuous integration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.19_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.19 – Enable continuous integration
  prefs: []
  type: TYPE_NORMAL
- en: In this task, we created a build pipeline and performed a successful build of
    our sample **ToDo** application. In the next task, we'll perform the deployments.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up continuous delivery for the application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that our application is ready to be deployed, we'll create a release pipeline
    to deploy the application in Azure. In this pipeline, we'll define which Azure
    resources to deploy the application to and add additional deployment controls.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the service connection
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Azure DevOps requires access to an Azure subscription in order to be able to
    deploy and update Azure resources. Service connections in Azure DevOps allow you
    to connect your Azure DevOps project to external services. Let''s create a service
    connection for Azure Pipelines:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to Azure DevOps and browse to **Project Settings** | **Service Connections**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Create service connection**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the connections list, select **Azure Resource Manager**:![Figure 11.20 –
    ARM service connections
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.20_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.20 – ARM service connections
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For the service connection authentication method, choose **Service principal
    (automatic)**:![Figure 11.21 – ARM service connections service principal
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.21_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.21 – ARM service connections service principal
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Azure DevOps will now require you to authenticate to Azure. Please log in with
    an account with at least subscription owner rights and global admin rights in
    the Azure **Active Directory** (**AD**) tenant. You can choose to allow the service
    connection scope to be limited to a resource group or allow the entire subscription.
    Select your Azure subscription and give it a name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.22 – Creating a service connections service principal'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.22_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.22 – Creating a service connections service principal
  prefs: []
  type: TYPE_NORMAL
- en: This service connection is now ready to be used in Azure Pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a release pipeline
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Release pipelines include all the steps and the workflow to deploy the application
    to various environments, such as development, staging, QA, and production. Let''s
    start with creating a release pipeline for our **ToDo** app:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to Azure DevOps and launch your `Contoso ToDo` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browse to **Pipeline** | **Releases**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **New pipeline**:![Figure 11.23 – New release pipeline
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.23_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.23 – New release pipeline
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This will open a page to select a template. Since we're planning to deploy our
    **ToDo** app to App Service, select **Azure App Service deployment**:![Figure
    11.24 – The Azure App Service deployment task
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.24_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.24 – The Azure App Service deployment task
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enter `Staging Environment` for **Stage name**. You can choose to give any other
    meaningful name that best depicts the scenario in your environment:![Figure 11.25
    – Staging stage
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.25_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.25 – Staging stage
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can now close the **Stage** blade. Your pipeline should look as follows:![Figure
    11.26 – Pipeline snapshot
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.26_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.26 – Pipeline snapshot
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In order to deploy the application, first we need to get the application package
    from the outputs of the build pipeline. Under **Artifacts**, click **+ Add**:![Figure
    11.27 – Artifact in the release pipeline
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.27_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.27 – Artifact in the release pipeline
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **Build** as **Source type** and select the build pipeline created in
    the previous task. You can choose to configure which version is to be deployed
    by default:![Figure 11.28 – Artifact source in the release pipeline](img/Figure_11.28_B16392.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 11.28 – Artifact source in the release pipeline
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Continuous deployment trigger** button and enable continuous
    deployment. Enabling continuous deployment will trigger a release every time there's
    a new build version available (typically after you run a build pipeline with CI).
    If you enable **Pull request trigger**, a release will be created every time we
    have a new build version, even with a pull request. This may be a useful scenario
    for pure development pipelines:![Figure 11.29 – Enabling continuous deployment
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.29_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.29 – Enabling continuous deployment
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In **Stages**, click on **1 job, 1 task** in the development environment:![Figure
    11.30 – Pipeline stage
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.30_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.30 – Pipeline stage
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Inside the tasks view, select your Azure subscription service connection and
    the app service that you deployed earlier:![Figure 11.31 – App service deployment
    task
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.31_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.31 – App service deployment task
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **Deploy Azure App Service** and review the app service deployment
    information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **+** to add another task to apply the **SQL migration scripts** for
    getting the database ready. Search for SQL and select **Azure SQL Database deployment**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In **Azure SQL Task**, change the following settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'a) **Display Name**: Apply database migration script.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Select your Azure subscription and provide the database connection details
    captured while creating the Azure SQL database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'c) **Deploy Type**: Inline SQL script'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'd) **Inline SQL Script**: Provide the following script code. This will create
    the required tables in the SQL database. Please note that this is a sample SQL
    script to create the required schema (also available at [https://github.com/PacktPublishing/Learning-Azure-DevOps---B16392/tree/master/Chapter11](https://github.com/PacktPublishing/Learning-Azure-DevOps---B16392/tree/master/Chapter11));
    in a production environment, you may choose to do so using the SQL Server Data
    Tools project in Azure Pipelines. Please refer to this documentation to learn
    more about doing Azure DevOps for SQL: [https://devblogs.microsoft.com/azure-sql/devops-for-azure-sql/](https://devblogs.microsoft.com/azure-sql/devops-for-azure-sql/):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Save** and **+** to add another task. We'll now need to add another
    task to update the connection string of the database in the connection settings
    of Azure App Service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for **Azure App Service Settings** in the task's menu:![Figure 11.32
    – The Azure App Service Settings task
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.32_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.32 – The Azure App Service Settings task
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the **Azure App Service Settings** task, select the Azure subscription and
    app service connection details for the staging environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In **Connection Settings**, provide the database connection string in the following
    format. Please update your database connection details before saving. Since this
    is a test lab, we''re storing the secure information directly in the pipeline
    task. However, in a production environment, please use variables and parameters
    to store any connection string or other information. Please refer to this documentation
    to learn more about securely using variables and parameters in an Azure pipeline:
    [https://docs.microsoft.com/bs-cyrl-ba/azure/devops/pipelines/security/inputs?view=azure-devops](https://docs.microsoft.com/bs-cyrl-ba/azure/devops/pipelines/security/inputs?view=azure-devops):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once all the tasks are updated, click on **Save**. You can save the pipeline
    in the root folder upon prompt. This should be the order of the tasks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) **Apply Database migration script**
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) **Apply Azure App Service Settings**
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'c) **Deploy Azure App Service**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.33 – Saving the release pipeline'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_11.33_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.33 – Saving the release pipeline
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the pipeline, click on **+ Add** to add another stage for production. You
    can select the same Azure App Service deployment, or you can also clone your development
    environment stage. You can configure the production stage while targeting the
    production app service and SQL database instances. Your pipeline should now look
    as follows:![Figure 11.34 – Release pipeline
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.34_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.34 – Release pipeline
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Typically, you wouldn't want to auto-deploy to production. Let's modify the
    flow to include a manual approval for production deployment. Click on **Pre-Deployment
    Conditions**:![Figure 11.35 – Release pipeline trigger control
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.35_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.35 – Release pipeline trigger control
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enable the **pre-deployment approval** and select at least one user to approve
    before deployment to production happens.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can add an additional stage, such as test cases, performance benchmarks,
    and so on, and prepare the overall flow. Click **Save** once you've completed
    reviewing the pipeline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Azure release pipeline to deploy the application is now ready. Let's create
    a release and see whether we can get our application up and running through CI/CD
    pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a release
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s test the release pipeline by creating a release manually:'
  prefs: []
  type: TYPE_NORMAL
- en: In Azure DevOps, browse to **Releases** and click on **Create release**:![Figure
    11.36 – Create release
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.36_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.36 – Create release
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Review the release details and click **Create**:![Figure 11.37 – Reviewing release
    creation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.37_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.37 – Reviewing release creation
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Clicking **Create** will start a release execution; you can review the progress
    by clicking on logs on the stage:![Figure 11.38 – Release status
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.38_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.38 – Release status
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once the development environment deployment has completed, you should try to
    launch the app service and see whether the **ToDo** application is working well
    for you:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.39 – The ToDo app'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_11.39_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.39 – The ToDo app
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can try to add **to-do** items and test the application. Once you''re ready
    to approve this for production deployment, click **Approve** to start the production
    deployment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.40 – Approving the production deployment'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.40_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.40 – Approving the production deployment
  prefs: []
  type: TYPE_NORMAL
- en: You've now completed a release and your application is now ready to be used.
  prefs: []
  type: TYPE_NORMAL
- en: Trying out end-to-end CI/CD flow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that you''ve completed setting up an end-to-end CI/CD pipeline, go ahead
    and try out the following to experience the whole flow:'
  prefs: []
  type: TYPE_NORMAL
- en: In Azure Repos, modify the view for the home page. Go to **Repos** | **DotNetAppSQLDB**
    | **Views** | **Todos** | **index.cshtml** and modify the label from **Create
    new** to **Create New ToDo Item**:![Figure 11.41 – Modifying the app code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.41_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.41 – Modifying the app code
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Commit the change in a new branch and follow through the pull request. You should
    approve and complete the pull request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This should start an automated build pipeline execution followed through automated
    release execution.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the end, you should have your application updated with the change without
    having to do any manual steps except the approval task configured for production.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Congratulations, you've now completed the setup and testing of an end-to-end
    CI/CD pipeline! In the next section, we'll set up a similar pipeline for a Kubernetes-based
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a CI/CD pipeline for a container-based application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we'll take a container-based application and build an end-to-end
    CI/CD pipeline. We'll take a Python and Redis-based sample application for the
    purpose of this demonstration.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we''ll be using various Azure resources in the overall solution
    architecture. This includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Azure DevOps**: CI/CD pipeline'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Kubernetes Service** (**AKS**): For hosting the containers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Container Registry** (**ACR**): Container image storage and management'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to the sample app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we''ll be using a sample application called **Azure Voting
    App**. It is a standard multi-container-based application that uses the following
    components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Azure Voting App backend**: This will be running on Redis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Azure Voting App frontend**: Web application built with Python.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can review the application code here: [https://github.com/Azure-Samples/azure-voting-app-redis](https://github.com/Azure-Samples/azure-voting-app-redis).'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the required infrastructure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to be able to build the pipeline, first we need to set up the required
    infrastructure, including the AKS cluster and Azure container registry. We will
    be creating separate resources for the staging and production environments as
    a standard best practice; however, it is possible to use a single environment
    for both the production and development environments by using a combination of
    tags and a Kubernetes namespace.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we'll be using the Azure **command-line interface** (**CLI**)
    for all infrastructure provisioning tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Azure resource group
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s start by creating an Azure resource group for organizing all the resources
    for your development and production environments:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to Azure Cloud Shell ([https://shell.azure.com](https://shell.azure.com))
    with your Azure credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If this is your first time logging in to Azure Cloud Shell, it will prompt you
    to create an Azure storage account. Select your subscription and click **Create
    Storage**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Bash** on the shell type selection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to list all your subscriptions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you need to select a specific subscription for provisioning resources, run
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a resource named `Contoso-Voting-Stage` by running the following command.
    You can choose to upload the location with a region of your choice:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Repeat the resource group creation command to create another resource group
    named `Contoso-Voting-Prod` for the production environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have now completed the required resource groups. In the next step, you'll
    create an Azure Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Azure Kubernetes service
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: AKS is a managed Kubernetes offering from Microsoft Azure. There are two types
    of hosts in Kubernetes clusters – master (aka the control plane) and nodes. In
    the world of AKS, there's no master for end users. Microsoft creates and manages
    master nodes and hides them away from end users. As a user, you only deploy AKS
    nodes (Kubernetes nodes) in your subscription, whereas the configuration of Kubernetes
    and the joining of Microsoft-managed Kubernetes masters happens in the background.
    With AKS, you only pay for the nodes' infrastructure costs; masters are provided
    for free by Microsoft.
  prefs: []
  type: TYPE_NORMAL
- en: We will be using AKS to host our containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by creating an AKS cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to Cloud Shell with your Azure credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command to create an AKS cluster with the default configuration
    and latest version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It may take up to 10 minutes for the AKS cluster to be ready. You can review
    the status by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once your cluster is ready, you can get the Kubernetes authentication configuration
    in your Cloud Shell session by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can try running `kubectl` commands now to interact with Kubernetes. Run
    the following command to get a list of all the Kubernetes nodes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Your Azure Kubernetes cluster is now ready; please repeat the process to create
    another AKS cluster for the production environment.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Azure container registry
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ACR is a private Docker container registry that's hosted and managed by Microsoft
    Azure. ACR is fully compatible with Docker and works in the same way, except that
    it's managed, hosted, and secured by Microsoft. We will be using ACR to store
    our container images.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a container registry for the project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to Azure Cloud Shell and run the following command to create a container
    registry:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once your container registry is ready, you can get the status and details of
    it by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Integrating ACR with AKS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: AKS needs to have permissions to access the container images from ACR in order
    to run the application. Let's enable access for AKS to interact with our ACR.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to integrate AKS with our ACR:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now that our infrastructure is ready, we'll begin with setting up the code repository
    for the application.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Azure Repos for the voting application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we''ll create a new Azure DevOps project and import the **voting
    app** source code in Azure Repos:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to Azure DevOps and create a new project named `Contoso Voting App` or
    any other name of your choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to Azure Repos and click **Import a Git repository**. Please import
    the Azure voting app repository from: [https://github.com/Azure-Samples/azure-voting-app-redis](https://github.com/Azure-Samples/azure-voting-app-redis):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.42 – Importing the repository'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.42_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.42 – Importing the repository
  prefs: []
  type: TYPE_NORMAL
- en: Now that our repo is ready, let's start with a build pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the CI pipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The build pipeline will be responsible for building the container image and
    pushing them in ACR. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to Azure DevOps and open **Contoso Voting App Project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Pipeline** and click **Create Pipeline**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Use the Classic Editor** for creating the pipeline with the UI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the source Azure repo that you created in the previous section as the
    source for the pipeline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the template, select **Docker Container** as the template type:![Figure
    11.43 – Docker container pipeline template
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.43_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.43 – Docker container pipeline template
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the `root/azure-vote/Dockerfile` repo.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'f) Check **Include Latest Tag**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.44 – Push an image'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_11.44_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.44 – Push an image
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the **Push an image** task, select the Azure subscription and ACR again,
    with the task being **Push an image**. Be sure to check **Include Latest Tag**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you're done, review both tasks and click **Save and Run** to start the
    pipeline job execution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the job logs to see the detailed information about image building and
    pushing to ACR.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Upon completion, navigate to the Azure portal and open the container registry
    you created earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Repositories**; you should see a new image being created there.
    Let's look at the image and find out the image name to update in our application
    deployment configuration:![Figure 11.45 – Container image in ACR
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.45_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.45 – Container image in ACR
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Make a note of the image pull connection string. We'll need it in the next exercise:![Figure
    11.46 – Image syntax in ACR
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.46_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.46 – Image syntax in ACR
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Our pipeline is now ready and tested, so let''s go back and enable CI in the
    pipeline trigger configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.47 – Enabling CI'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.47_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.47 – Enabling CI
  prefs: []
  type: TYPE_NORMAL
- en: Now that our CI pipeline is ready, let's start with the deployment pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the CD pipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we'll set up the deployment pipeline, which will deploy the
    application code to AKS and update when necessary. Azure Pipelines provides native
    integration with Kubernetes clusters hosted on-premises and in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the Kubernetes deployment manifest file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the Kubernetes world, application deployment is managed through manifest
    files written in JSON or YAML. The deployment file for this sample application
    is already included in the Azure repo. You can review the deployment configuration
    by reviewing the `azure-vote-all-in-one-redis.yaml` file in the Azure Repos root.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the deployment manifest is configured to use the Microsoft-provided
    container image. We''ll need to update it to start using our own custom image.
    Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to `azure-vote-all-in-one-redis.yaml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Edit** at the top-right corner of the file editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Look for the following part of the deployment manifest. This redirects the
    container engine to use a Microsoft-provided Docker image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the value with your own container registry and image name. It should
    look like the one given as follows. You should specify the latest tag to ensure
    that the newest image is always used:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Commit the changes to save the deployment manifest file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your application manifest is now ready for deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the release pipeline
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The release pipeline will be applying the deployment manifest in the Kubernetes
    cluster and perform image update tasks. Let''s build a pipeline to automate the
    deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to **Azure DevOps** | **Pipelines** | **Releases**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new release pipeline. Select the **Deploy to a Kubernetes cluster**
    template:![Figure 11.48 – The Deploy to a Kubernetes cluster template
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.48_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.48 – The Deploy to a Kubernetes cluster template
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Update the stage name to `Development Environment`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's start with adding artifacts. Click on **Add** in **artifacts**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Artifact**, select the Azure repo and choose the repository we imported.
    Click **Add**:![Figure 11.49 – Adding an artifact to a pipeline
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.49_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.49 – Adding an artifact to a pipeline
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the `Deploy to Kubernetes`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'b) `azure-vote-all-in-one-redis.yaml`). Browse to your default directory and
    select the deployment YAML file. We can define additional options, such as Kubernetes
    secrets and config maps, if required. Click **Save** after verifying that all
    the configurations are valid:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.51 – Selecting the deployment YAML'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_11.51_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.51 – Selecting the deployment YAML
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'e) Review the task configurations and click **Save** to save the progress so
    far:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.52 – Task configuration'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_11.52_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.52 – Task configuration
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, we'll add another step in the pipeline so that we can update the images
    in AKS after deployment. This will ensure that, at every release, Kubernetes is
    pulling the latest images. Click on the **+** sign to add another **kubectl**
    task to the pipeline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the task so that it uses the same Kubernetes connection. Under `image
    deployments/azure-vote-front azure-vote-front=youracrname.azurecr.io/contosovotingapp:latest`
    as the argument. In a production deployment, you may not want to use the latest
    tag in your pipeline and rather refer to the version tag generated using the build
    pipeline. This will help you manage your deployments with specific versions and
    roll back easily if you wish to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you're ready, save the pipeline and create a release to test the deployment
    pipeline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review the release logs to understand the deployment steps and flow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once it's completed successfully, go back to editing the pipeline again and
    enable continuous deployment:![Figure 11.53 – Enabling continuous deployment
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.53_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.53 – Enabling continuous deployment
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'With that, our build and release configuration with full CI/CD automation is
    ready. Let''s look at the AKS cluster to ensure that our application has been
    deployed properly and is accessible (with the release that we just did):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Connect to your AKS cluster using the Azure shell.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `kubectl get pods` and `kubectl get services`:![Figure 11.54 – The kubectl
    results
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.54_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.54 – The kubectl results
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Make a note of the public IP of the `azure-vote-front` application. You can
    try launching the public IP to check that the application is working as expected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.55 – Voting app launched'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.55_B16392.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.55 – Voting app launched
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will be simulating an end-to-end CI/CD experience for this application.
  prefs: []
  type: TYPE_NORMAL
- en: Simulating an end-to-end CI/CD experience
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous sections, we set up a CI/CD pipeline. Let''s try to play around
    with it and experience the overall flow. Let''s start by updating the title of
    the application from **Azure Voting App** to **Contoso Voting App**:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse to **Azure Repos** | **Files** | **azure-vote** | **azure-vote** | **config_file.cfg**
    and click **Edit**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the value of **Title** from **Azure Voting App** to **Contoso Voting
    App**:![Figure 11.56 – Updating the app name
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_11.56_B16392.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 11.56 – Updating the app name
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Commit the changes through a pull request process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the pull request is completed, a build pipeline will trigger that will
    build the Docker images and push to ACR.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the build pipeline is completed, it'll trigger the release pipeline to
    start another release. In the end, you should see that your web application is
    updated with the title.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This concludes setting up a CI/CD pipeline for container-based infrastructure
    hosted on AKS.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Architecture Center for DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Architecture Center is a centralized place to take guidance for architecting
    solutions on Azure using established patterns and practices. There are several
    sample architectures available around DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can access Azure Architecture Center here: [https://docs.microsoft.com/en-us/azure/architecture/](https://docs.microsoft.com/en-us/azure/architecture/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer to the following links to learn more about planning the right architecture
    for DevOps across various infrastructure and application scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure DevOps: [https://docs.microsoft.com/en-us/azure/architecture/example-scenario/apps/devops-dotnet-webapp](https://docs.microsoft.com/en-us/azure/architecture/example-scenario/apps/devops-dotnet-webapp)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DevOps with containers: [https://docs.microsoft.com/en-us/azure/architecture/example-scenario/apps/devops-with-aks](https://docs.microsoft.com/en-us/azure/architecture/example-scenario/apps/devops-with-aks)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Microservices with AKS and Azure DevOps: [https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/microservices-with-aks](https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/microservices-with-aks)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Secure DevOps for AKS: [https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/secure-devops-for-kubernetes](https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/secure-devops-for-kubernetes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Azure DevOps CI/CD pipelines for chatbots: [https://docs.microsoft.com/en-us/azure/architecture/example-scenario/apps/devops-cicd-chatbot](https://docs.microsoft.com/en-us/azure/architecture/example-scenario/apps/devops-cicd-chatbot)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CI/CD for Azure VMs: [https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/cicd-for-azure-vms](https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/cicd-for-azure-vms)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CI/CD for Azure web apps: [https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/azure-devops-continuous-integration-and-continuous-deployment-for-azure-web-apps](https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/azure-devops-continuous-integration-and-continuous-deployment-for-azure-web-apps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CI/CD for containers: [https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/cicd-for-containers](https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/cicd-for-containers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Container CI/CD using Jenkins and Kubernetes on AKS: [https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/container-cicd-using-jenkins-and-kubernetes-on-azure-container-service](https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/container-cicd-using-jenkins-and-kubernetes-on-azure-container-service)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DevSecOps in Azure: [https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/devsecops-in-azure](https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/devsecops-in-azure)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DevTest deployment for testing IaaS solutions: [https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/dev-test-iaas](https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/dev-test-iaas)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DevTest deployment for testing PaaS solutions: [https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/dev-test-paas](https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/dev-test-paas)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DevTest deployment for testing microservice solutions: [https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/dev-test-microservice](https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/dev-test-microservice)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DevTest Image Factory: [https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/dev-test-image-factory](https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/dev-test-image-factory)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Immutable infrastructure CI/CD using Jenkins and Terraform on Azure virtual
    architecture overview: [https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/immutable-infrastructure-cicd-using-jenkins-and-terraform-on-azure-virtual-architecture-overview](https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/immutable-infrastructure-cicd-using-jenkins-and-terraform-on-azure-virtual-architecture-overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DevOps in a hybrid environment: [https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/java-cicd-using-jenkins-and-azure-web-apps](https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/java-cicd-using-jenkins-and-azure-web-apps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Java CI/CD using Jenkins and Azure web apps: [https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/java-cicd-using-jenkins-and-azure-web-apps](https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/java-cicd-using-jenkins-and-azure-web-apps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Run a Jenkins server on Azure: [https://docs.microsoft.com/en-us/azure/architecture/example-scenario/apps/jenkins](https://docs.microsoft.com/en-us/azure/architecture/example-scenario/apps/jenkins)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SharePoint Farm for development testing: [https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/sharepoint-farm-devtest](https://docs.microsoft.com/en-us/azure/architecture/solution-ideas/articles/sharepoint-farm-devtest)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sharing location in real time using low-cost serverless Azure services: [https://docs.microsoft.com/en-us/azure/architecture/example-scenario/signalr/](https://docs.microsoft.com/en-us/azure/architecture/example-scenario/signalr/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at a .NET and SQL-based application and set up a
    CI/CD pipeline for it using Azure DevOps. We looked at how you manage your production
    and staging environments through approval workflows.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, we also looked at a container-based application and did a walkthrough
    of setting up an end-to-end CI/CD pipeline for the application using ACR and AKS.
  prefs: []
  type: TYPE_NORMAL
- en: In the end, we talked about Azure Architecture Center, which can be referred
    to while planning your DevOps architecture.
  prefs: []
  type: TYPE_NORMAL
- en: This was the final chapter, and we hope you have enjoyed reading this book!
  prefs: []
  type: TYPE_NORMAL
