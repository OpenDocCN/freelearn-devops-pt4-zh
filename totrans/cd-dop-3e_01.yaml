- en: The Evolution of Software Delivery
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As described in the preface, **Continuous Delivery** (**CD**) and DevOps are
    complementary ways of working. The former gives anyone who delivers customer value
    via software the ability to do so rapidly, consistently, and—as the name implies—continuously.
    The latter helps harmonize the teams that deliver and support said software. Both
    approaches can help you to optimize, streamline, and improve the way you work,
    and ultimately how you deliver value by shipping quality software.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: It should be pointed out that the true meaning of these approaches have been
    blurred over the past decade—be that by tech press misunderstanding or recruitment
    businesses wanting to add 10% on salary rates, or software vendors and consultancies
    wanting to make their fortune by jumping on the bandwagon.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'I have summarized what CD and DevOps **are**, but before we proceed, it may
    help if I highlight what they **are not**:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Continuous delivery and continuous deployment are not the same—the former focuses
    on business value and the latter is the mechanism of shipping software
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A DevOps engineer is not a magical wizard. Software engineers and DevOps engineers
    are basically the same—the former creates text files that are used to create software
    assets and the latter creates text files that create environments and configuration
    to run said software
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps does not replace traditional system operations activities and approaches—it
    extends, complements, and enhances them
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps does not remove the need for ensuring your software, and the environments
    in which they run are highly secure—although this can ease the adoption and implementation
    of SecOps
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CD and DevOps are not the silver bullet to remove all of your process and business
    issues, although they can help reduce the overall number
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One thing you need to take into account is that almost all successful software
    businesses go through a number of phases of evolution. They normally start life
    as a small highly-focused team with good ideas, plenty of ambition, and some investment.
    As they build their market share, reach, and revenue, a period of rapid growth
    normally follows both in terms of workforce and spend. As the business matures
    and becomes established, they transition to the next phase of either continued
    and substantial growth to keep ahead of the competition, or make themselves a
    target for acquisition—this usually depends on how quickly investors want to see
    a return.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: It's also inevitable that as a business goes through this evolution, the day-to-day
    business processes will become more complex, which in turn leads to complexity
    and pain in terms of how software is delivered.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: The adoption of CD and DevOps can assist in reducing this complexity and pain;
    however, the effectiveness and benefits a business can reap are very much dependent
    on where the business sits on the evolutionary scale. If you are off the mark,
    then adoption can be more trouble than it is worth, and you may end up making
    things worse for the overall business. Not only that, but business, are strange
    and unique creatures—especially those whose raison d'etre is delivering software
    solutions—and no two are the same; therefore, the adoption needs to be uniquely
    tailored to fit.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics we will cover in this chapter are as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: A more detailed explanation of the various phases of the evolution of software
    delivery
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The positives and negatives of each phase
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How you can ascertain which phase you are in
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The advantages—some unforeseen—that can come from a CD and DevOps way of working
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To make it a little easier to understand what all of this actually means, we'll
    now dig a little deeper into these phases by following the evolution of a typical
    software-based business, called ACME systems.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: ACME systems – evolution phase 1.0
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'ACME started out with a couple of things in common with the many thousands
    of small software businesses scattered around the globe: it had some good ideas
    and a saw gap in the market that it could exploit to make its fortune. It had
    a relatively small amount of cash so it needed to move fast to be able to survive
    and it needed to quickly entice, enlist, and retain customers at all costs. It
    did this by delivering what the customer wants just before the customer needs
    it. Deliver too soon, and it may have wasted money on building solutions that
    the customer decides they no longer want. Deliver too late, and someone else may
    well have taken the company''s market share—and the revenue—away. The keyword
    here is deliver.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'As a small start-up, in the early days, the going is slow and the work is hard:
    lots of R&D, frantically-built pre-sales prototypes, quick and dirty deliveries,
    and unrealistic deadlines. After many long days, nights, weeks, months, and weekends,
    things actually start to come together. The customer base starts to grow and the
    orders—and revenue—start rolling in. After a while, the number of employees are
    in double figures and the founders have become directors.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'So, what has this got to do with CD or DevOps? Well, everything really. The
    culture, default behaviors, and engineering practices of a small software house
    are what would be classed as pretty good in terms of CD and DevOps. For example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: There are next to no barriers between developers and the operations teams—in
    fact, they are generally one and the same
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developers have full access to the production environment and can closely monitor
    their software
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All areas of the business are focused on the same thing, that being to get software
    into the production environment a quickly as possible, thus delighting customers
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speed of delivery is crucial
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If things break, everyone swarms around to help fix the problem—even out of
    hours
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The software evolves quickly and features are added in incremental chunks
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ways of working are normally very agile
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communication and collaboration across the business is efficient and, for the
    most part, effective
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There is a reason for stating that the culture, default behaviors, and engineering
    practices of a small software house would be classed as pretty good rather than
    ideal. This is because there are many flaws in the way a small software business
    typically has to operate to stay alive:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Corners will be cut to hit deadlines, which compromises software design, quality,
    and elegance
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application security best practices are given short shrift or even ignored
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Engineering best practices are compromised to hit deadlines
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The concept of technical debt is pretty much ignored
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing won't be in the forefront of the developer's mind (even if it were,
    there may not be enough time to work in a test-first way)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Source-and version-control systems are not used religiously
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With unrestricted access to the production environment, ad hoc and uncontrolled
    tweaks and changes can be made to the infrastructure and environmental setup
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software releasing will be mainly manual and most of the time an afterthought
    of the overall system design
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At times, a rough and ready prototype may become production code without the
    opportunity for refactoring
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Documentation is scant or non-existent—any that does exist is probably out of
    date
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The work-life balance for an engineer working within a small software house
    is not sustainable and burn out does happen
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's have a look at the software-delivery process for ACME systems Version
    1.0, which, to be honest, shouldn't take too long.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Software-delivery process flow Version 1.0
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following diagram gives an overview of the simple process used by ACME
    systems to deliver software. It''s simple, elegant (in a rough-and-ready kind
    of way), and easy to communicate and understand:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a68dad07-2f2b-44ba-9646-17a43b39baee.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
- en: Overview of ACME Version 1.0 software-delivery process
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: This very simple process is something that many small software businesses and
    start-ups will recognize. From a CD and DevOps perspective, there are next to
    no barriers between those building and delivering the software and those supporting
    it (we'll cover this later in this chapter).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Let's move forward a few years and see how ACME systems is doing, and gain some
    insight into the benefits and pitfalls of being the leader of the field.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: ACME systems evolution phase 2.0
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The business has grown in both size and turnover. The customer base is now global
    and the ACME software platform is being used by millions of customers on a daily
    basis. ACME systems as a business is well-established, well-renowned, and recognized
    as being at the forefront in their area of expertise. However, the level of growth
    and investment has had an impact on profits—which are still pretty much non-existent.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: The board of ACME systems are approached by a larger competitor with an acquisition
    offer. The board and investors feel this makes good commercial sense and that
    this will help stabilize the business for the future so the sale is agreed. On
    the whole, everyone is happy with the deal and most see this as positive recognition
    that they have at last reached the big time.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: ACME 系统的董事会接到了一个来自更大竞争对手的收购提议。董事会和投资者认为这一提议具有良好的商业意义，且将有助于未来业务的稳定，因此同意出售。总体而言，大家都对这笔交易感到满意，大多数人视此为他们终于迎来成功的标志。
- en: At first everything is good—everything is great, in fact. The ACME systems team
    now has the backing it needs to invest in the business and be able to scale out
    and obtain a truly global reach. It can also focus on the important things, such
    as building quality software, scaling out the software platform, investing in
    new technologies, tools, and R&D. The drier side of business—administration, program
    and project management, sales, marketing, and so on—can be passed to the new parent
    company that has all of this in place already.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始，一切都很顺利——事实上，一切都非常好。ACME 系统团队现在获得了所需的支持，可以投资于业务并实现扩展，进而获得真正的全球影响力。它还可以专注于重要事项，例如构建高质量的软件、扩展软件平台、投资于新技术、工具和研发。企业中较为枯燥的一面——行政管理、项目与程序管理、销售、市场营销等等——可以交给已经拥有这些体系的新母公司来处理。
- en: The ACME engineering team moves forward in excited anticipation. The level of
    investment is such that the software engineering team doubles in size in a number
    of months. The R&D team—as it's now called—introduces new development tools and
    processes to enable the speedy delivery of quality software. Agile is adopted
    across the R&D team, and the opportunity to fully exploit engineering best practices
    is realized. The original ACME platform starts to creak and is showing its age,
    so further investment is provided to re-architect and rewrite the software platform
    using the latest architectural approaches and technologies. In short, the R&D
    team feels that it's all starting to come together and it has the opportunity
    to do things right.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: ACME 工程团队满怀期待地向前推进。投资的规模之大，以至于软件工程团队在几个月内翻了一番。现在称为研发团队的团队引入了新的开发工具和流程，以加速高质量软件的交付。敏捷方法在研发团队中得到了广泛采用，充分利用工程最佳实践的机会也得以实现。原先的
    ACME 平台开始出现老化的迹象，逐渐显得力不从心，因此又获得了进一步投资，以重新设计并重写软件平台，采用最新的架构方法和技术。简而言之，研发团队觉得一切开始走向正轨，且有机会做对的事情。
- en: In parallel to this, the ACME engineering team members who looked after the
    production environments are absorbed into the parent's global operations organization.
    On the face of it, this seems a very good idea; there are datacenters filled with
    cutting-edge kit, cloud capabilities, global network capabilities, and scalable
    infrastructure. Everything that is needed to host and run the ACME platform is
    there. Like the R&D team, the operations team has more than they could have dreamed
    of. In addition to the tin and string, the operations team also has resources
    available to help maintain quality, control change to the platform, and ensure
    the platform is stable and available 24 x 7.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，负责生产环境的 ACME 工程团队成员被吸收到母公司的全球运营组织中。从表面上看，这似乎是个非常好的主意；数据中心里充满了尖端设备，云能力、全球网络能力和可扩展的基础设施一应俱全。所有托管和运行
    ACME 平台所需的资源都在这里。和研发团队一样，运营团队拥有比他们曾经梦想的更多资源。除了硬件和基本的设施，运营团队还有可用于维护质量、控制平台变更的资源，并确保平台能够稳定运行并提供
    24 小时不间断的服务。
- en: Sitting above all of this, the parent company also has well-established governance,
    and program—and project-management functions to control and coordinate the overall
    end-to-end product delivery schedule and process.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一切之上，母公司也拥有成熟的治理结构，以及程序和项目管理职能，用以控制和协调整体的端到端产品交付时间表和流程。
- en: 'On the face of it, everything seems rosy and the teams are working more effectively
    than ever. At first, this is true, but very soon things start to take a downward
    turn. Under the surface, things are not all that rosy:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 表面上看，一切似乎都很美好，团队们比以往任何时候都更加高效地工作。最初，这的确是事实，但很快，情况开始发生下滑。在表面之下，情况并非那么美好：
- en: It is getting increasingly difficult to deliver software—what took days now
    takes weeks or even months
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交付软件变得越来越困难——原本只需几天的工作，现在可能需要几周甚至几个月。
- en: Releases are getting overly complex and larger as the new ACME platform rapidly
    grows and more features are added and changes are made
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Despite the advances in re-architecting the ACME platform, there still remain
    large sections of buggy legacy code deep within the bowels of the system, which
    refuses to die
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The R&D team members are now so far removed from the production environment
    that they are ignorant as to how the software they are writing functions or performs,
    once it eventually goes live
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The operations team members are now so far removed from the development process
    that they are ignorant to what's being delivered and how it's being developed
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are many corporate hoops to jump through and process hurdles to overcome
    before software changes can go anywhere near the production servers
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quality is starting to suffer as last-minute changes and frantic bug fixes are
    being applied to fit into release cycles
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical debt amassed during the fast and loose days is starting to cause major
    issues
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More and more R&D resources are being applied to assist in releases, which is
    impacting the development of new features
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployments are causing prolonged production downtime—both planned and unplanned
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deadlines are being missed, stakeholders are being let down, and trust is being
    eroded
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The once-glowing reputation is being tarnished
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main problem here, however, is that this attrition has been happening very
    slowly over a number of months and not everyone has noticed—they're all too busy
    trying to deliver.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Let's now revisit the process flow for delivering software and see what's changed
    since last we looked—it's not a pretty picture.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Software-delivery process flow Version 2.0
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you can see from the following diagram, things have become very complicated
    for the ACME team. What was simple and elegant has become complex, convoluted,
    and highly inefficient. The number of steps and barriers has increased, making
    it extremely difficult to get software delivered. In fact, it''s increasingly
    difficult to get anything done. The following figure gives you an overview of
    the ACME Version 2.0 software-delivery process:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65a61c87-f4ba-4601-b62e-f8b3eafc4369.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: Overview of ACME Version 2.0 software-delivery process
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: This far-from-simple process is something that large software businesses will
    recognize. Looking again from a CD and DevOps perspective, this process is far
    from ideal as there are now many barriers between those delivering software and
    those supporting it.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'If I''m honest, the process as depicted is actually missing some additional
    detail in relation to the change-management hoops that can add more complexity,
    effort, and pain. Let''s add this detail and look again:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dbea9504-24a6-449e-91d9-e6bd1a5cd712.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
- en: More realistic overview of ACME Version 2.0 software-delivery process
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, things are far from ideal. What was efficient and effective
    is now the exact opposite. More importantly, the dialogue, quality of the communication,
    and trust between all of those involved in delivering changes is at best fragmented
    and pretty much non-existent at worst. What used to be a five-minute chat over
    a coffee is now a 20-page email thread, meetings, and Skype chats. The ex-ACME
    engineering team members are less like colleagues and more like entrenched combatants.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Not only is the process long-winded, but the chances of a single change getting
    all the way through the process without issue is very slim—most of the time, changes
    have to go around the loop a number of times before they can be classed as shippable;
    for example, a defect found within any part of the process may push the change
    all the way back to the beginning of the process.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: I mention dialogue, quality of the communication, and trust for a very specific
    reason—most of the things you read about and hear in relation to CD and DevOps
    seem to imply that some new tooling and best-of-breed architectural approaches
    will give you what you need. While this can help, it can also massively hinder—especially
    when trying to bring these changes on board whilst a business is going through
    organizational changes and/or growth. In the ACME example, too much was changing
    too quickly for everyone to understand what was going on and where the journey
    would end. This inevitably lead to human nature kicking in and people building
    up barriers and silos to add some stability within the chaos.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: If you were to take all of this into account, from an outsider's perspective,
    the process(es) ACME systems uses to deliver software is now, for all intents
    and purposes, broken.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: OK, so this may be a little over the top, but it just goes to highlight how
    having a relative chasm between those involved in the delivery of changes—especially
    the R&D team members (who are tasked with delivering much-needed changes and features)
    and the operations team members (who are tasked with supporting the live environment
    into which the changes will be applied)—can completely derail things.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: An outsider's perspective from the inside
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As was previously stated, not everyone noticed the attrition within the organization—luckily,
    a few observant souls did. A small number of the ACME team's members were aware
    things are not great and decided to step back and look at things from an outsider's
    perspective. They then started to see the issues within the overall process as
    clear as day and became determined to expose these issues for all to see. In addition,
    they decided to sort the issues out—there was just the small problem of how to
    do this while everyone was going at full pelt to get software delivered at all
    costs in their own silos with their own problems.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: At first, they invested a vast amount of personal time into investigating and
    building rough and ready tools, including build and test automation, **Continuous
    Integration** (**CI**), a continuous-deployment pipeline, and system-monitoring
    solutions. The intention was to automate as many parts of the broken process as
    possible to reduce the pain. They also applied energies evangelizing within their
    technically-focused peer groups. Although their ideas and suggestions were welcomed
    by the majority, there was not the appetite to adopt these new-fangled tools—everyone
    was far too busy trying to ship software within the broken process. They needed
    another way.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，他们投入了大量个人时间来研究和构建简单粗糙的工具，包括构建和测试自动化、**持续集成**（**CI**）、持续部署流水线和系统监控解决方案。其目的是尽可能自动化断裂流程中的各个部分，以减少痛苦。他们还在技术驱动的同侪群体中积极宣传这些想法。尽管大多数人欢迎他们的想法和建议，但没有足够的动力去采纳这些新式工具——每个人都忙于在断裂的流程中交付软件，他们需要另一种方法。
- en: They decided that they needed some assistance, so they sought out a like-minded
    manager with influence within the wider business who could help them get some
    much-needed traction. After much cajoling, discussions, and pleading, the manager
    agreed to help them to obtain budget to form a small team focusing on advancing
    the CD and DevOps tooling. The newly-formed team's members spent a few months
    identifying and breaking down the immediate and most painful issues, and built,
    installed, and implemented tooling to remove some of the pain—to ease the adoption,
    many of the tools are bespoke to fit into the existing processes.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 他们决定需要一些帮助，于是寻求了一位在更广泛业务中具有影响力、志同道合的经理，帮助他们获得急需的支持。在经过多次劝说、讨论和恳求后，这位经理同意帮助他们获得预算，组建一个专注于推进
    CD 和 DevOps 工具的小团队。新成立的团队成员花了几个月的时间识别并拆解最紧迫和最痛苦的问题，构建、安装并实施了能够缓解一些痛苦的工具——为了便于采用，许多工具是量身定制的，以适应现有的流程。
- en: This went some way to address the broken process but the reality is that the
    tools did not have the impact they envisaged. In fact, the tools themselves needed
    to be altered so much to fit the existing process that they started to become
    unreliable and too complex, so much so that those who were originally behind the
    approach started to question the validity of their decisions.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这在一定程度上解决了断裂的流程，但现实是，这些工具并没有产生他们预期的影响。实际上，为了使工具适应现有流程，它们本身需要做出如此多的修改，以至于它们开始变得不可靠和过于复杂，甚至最初支持这种方法的人开始质疑自己决策的有效性。
- en: Ultimately, there is a much bigger issue that tooling cannot address—the culture
    of the organization itself, the behaviors of those within it, and the many disjointed
    methods of communication between the disconnected silos that had formed over the
    years. It became obvious that all the tools and tea in China will not bring pain
    relief; something more drastic was needed.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，存在一个更大的问题是工具无法解决的——那就是组织本身的文化、其中人员的行为，以及多年来在分裂的业务孤岛之间形成的各种脱节的沟通方式。很明显，所有的工具和中国的茶都无法缓解痛苦；需要更为彻底的变革。
- en: The team's members refocused and soon realized that it's not the tools that
    need to change to fit the process, but the process and ways of working that needs
    to change. If this was addressed, the tools could simply be taken off the shelf—so
    to speak—and used without extensive modification. The team's members have to drastically
    change their direction, become less technology-focused, and act more like agents
    for business change. They then highlighted this now-obvious fact to as many people
    as they can up and down the organization while the influential manager worked
    to obtain backing from the senior leadership to implement far-reaching business
    change. Luckily, their reputation and standing within the organization was such
    that getting backing was easy.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 团队成员重新聚焦，并很快意识到，真正需要改变的不是工具去适应流程，而是流程和工作方式本身需要改变。如果这个问题得到解决，工具可以直接从货架上取下来——可以这么说——并且无需大量修改就能使用。团队成员必须大幅改变方向，减少对技术的关注，更像是业务变革的推动者。他们随后将这一显而易见的事实传递给尽可能多的组织内外人员，同时这位有影响力的经理努力争取高层领导的支持，以实施深远的业务变革。幸运的是，他们在组织内的声誉和地位使得获得支持变得容易。
- en: We're now going on to the third stage of the evolution, where things start to
    come back together and the ACME team regains their ability to deliver quality
    software when it is needed.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在进入了演变的第三阶段，事情开始重新聚集在一起，ACME 团队重新获得了在需要时交付高质量软件的能力。
- en: ACME systems evolution phase 3.0
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the CD and DevOps team has official backing from high up, its members
    start to address the broken culture and behaviors, and develop ways to overcome
    and/or remove the barriers. They are no longer simply a technical team; they are
    a catalyst for business change.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: The remit is clear—do whatever is needed to streamline the process of software
    delivery and make it seamless and repeatable. In essence, implement what we now
    commonly refer to as CD and DevOps.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: The first thing they do is to go out and talk with as many people across the
    business as possible to ensure they are also aware of the broken process and its
    root causes. Simply put, if someone is actively involved in the decision-making
    process of getting software from conception to consumer, or involved in supporting
    it when it's live, they are a chat target. This not only gathers useful information,
    but also gives the team the opportunity to evangelize and form a wider network
    of like-minded individuals.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: The team has a vision, a purpose, that its members passionately believe in what
    needs to be done, and they have the energy and drive to do it.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'Over the next few months, they embark on (among other things):'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Running various in-depth sessions to understand and map out the end-to-end product-delivery
    process
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refining and simplifying the tooling based upon continuous feedback from those
    using it—where applicable, replacing in-house built solutions with off-the-shelf
    ones
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Addressing the complexity of managing dependencies and the order of deployment
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Engaging experts in the field of CD and DevOps to independently assess the progress
    being made (or not, as the case may be)
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arranging offsite CD and DevOps training and encouraging both R&D and Ops team
    members to attend the training together (it's amazing how much DevOps collaboration
    stems from a chat in the hotel bar)
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reducing the many handover and decision-making points throughout the software-release
    process
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing the barriers to allow developers to safely deploy their own software
    to the production platform
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with other business functions to gain trust and help them to refine
    and streamline their processes
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing the us-and-them attitudes and behaviors, and reinforcing trust-based
    relationships
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with R&D and operations teams to experiment with different agile methodologies,
    such as Kanban, scrum, and lean
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Openly and transparently sharing information and data around deliveries and
    progress being made across all areas of the business
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replacing the need for complex performance-testing with the ability for developers
    to closely monitor their own software running in the production environment
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing the need for downtime to release changes
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evangelizing across all areas of the business to share and sell the overall
    vision and value of CD and DevOps
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is by no means a walk in the park and it takes determination, steadfast
    focus, patience, and, above all, time to produce quantifiable, positive results,
    however after some months, the vision and benefits start to be realized. Now the
    process of building and delivering software has transformed to the extent that
    a code change can be built, fully tested, and deployed to the production platform
    in minutes many times per day—all at the press of a button and initiated and monitored
    by the developer who made the change, all with no downtime and little/no impact
    on the customers. The stakeholders have a trusted and reliable way of delivering
    value to their customers, the R&D team has the tooling and empowerment to deliver
    value as and when it is needed, and the Ops team has a stable and reliable platform
    that it can support and optimize.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Let's look again at the software-delivery process flow to see what results have
    been realized.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Software-delivery process flow version 3.0
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you can see from the diagram, the process looks much healthier. It''s not
    as simple as Version 1.0, but it is efficient, reliable, and repeatable. Some
    much-needed checks and balances have been retained from Version 2.0 and optimized
    to enhance rather than impede the overall process:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d75ba352-ff1a-4553-8c93-e5b374b185aa.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
- en: Overview of ACME 3.0 software-delivery process
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: This more elegant and well-oiled process is something that a mature yet modern
    software business will recognize. The barriers between those delivering the software
    and those that support it are there to ensure there is a degree of control and
    quality assurance, but both sides benefit from and embrace them.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: This highly efficient process has freed up valuable R&D and operations resources
    so that they can focus on what they are best at—developing and delivering new
    high-quality features, and ensuring that the production platform is healthy and
    customers are delighted.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: The ACME systems team has got back its mojo and is moving forward with a newfound
    confidence and drive. It now has the best of both worlds, and there's nothing
    stopping it.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: ACME systems beyond Version 3.0
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ACME systems team's members have come through their challenges stronger
    and leaner but their story doesn't end there. As with any successful business,
    they don't rest on their laurels but decide to expand into new markets and opportunities—namely,
    to build and deliver mobile-optimized clients to work with and complement their
    core web-based propositions.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: With all they have learned throughout their evolution, they know they have an
    optimal way of working to allow them to deliver quality products that customers
    want, when they want them, and they know how to deliver quickly, reliably, and
    incrementally. However, the complexities of delivering features to a hosted web-based
    platform are not the same as the complexities of delivering features to an end
    consumer's mobile device—they are comparable but not the same. For example, the
    process of delivering code to production servers many times per day is under the
    control of the ACME team, whereas they have little or no control over how their
    mobile clients are delivered to end customers, nor if and when the end customer
    will install the latest and greatest version from the various app stores onto
    which the mobile client is published. In addition to this, the production platform
    onto which the mobile client will be installed is pretty much an unknown in terms
    of spec, performance, and storage.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: All is not lost, though—far from it. The members of the ACME systems team have
    learned a vast amount throughout their evolutionary journey, and decide to approach
    this new challenge as they had done previously. They know they can build, test,
    and deliver software with consistent quality. They know how to deliver change
    incrementally with little or no impact. They know how to support customers and
    monitor and react quickly to change. They know their culture is mature and that
    the wider organization can work as one to overcome shared challenges.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'As the new venture progresses, they also discover another side-effect of their
    newly rekindled success: the amount of traffic and transactions start to grow
    very quickly. They therefore need to scale out their platform and they need to
    do it as soon as possible. Rather than rely on their own datacenters, they decide
    to move their entire platform to a globally-distributed cloud-based solution.
    This brings with it new challenges: the infrastructure is completely different,
    the provisioning tools are new, the tools used to build and deliver software are
    incompatible with the existing ACME tools. Again, the ACME systems team take this
    in stride and forge ahead with confidence using the highly collaborative ways
    of working, techniques, and approaches that are now part of their DNA.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Would ACME systems Version 1.0 business have been able to take on these new
    challenges and succeeded? It's possible, but the results would have been mixed,
    the risks that much greater, and the quality that much lower. It's pretty obvious
    that ACME systems Version 2.0 business would have had major struggles, and by
    the time the products had hit the market, they would have been out of date and
    fighting for market share with the quicker and leaner competition.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at what this all means from a holistic point of view.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: The evolution in a nutshell
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Throughout this chapter, we have been following the evolution of ACME systems:
    where they started, the growing pains that came from success, how they discovered
    that rapid growth brings with it negatives as well as positives, how they overcame
    their near extinction by adopting CD and DevOps, and how they regained their mojo
    and confidence to move forward. All of this can be represented by the following
    simple diagram:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1bc13852-24f7-421c-a7ad-ac26b5c410d5.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
- en: Overview of ACME systems evolution
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: What they also learned—somewhat late in the evolution—was that CD, and DevOps-adoption
    has little to do with technical tools and everything to do with how people work
    together. Without the changes to the culture and behaviors of everyone involved
    in the end-to-end delivery process, it is almost impossible to realize and maximize
    the benefits that a successful adoption of CD and DevOps brings. It could be said
    that if they knew this simple, yet mostly overlooked, fact from day one, then
    the adoption would have happened sooner and the business would have been far stronger
    far sooner. Hopefully, this will provide some food for thought for you as you
    move through the rest of the book.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Where am I on the evolutionary scale?
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the beginning of this chapter, I stated that the effectiveness of adopting
    CD and DevOps is very much dependent on where a business sits on the evolutionary
    scale. We've been through ACME's evolution and the phases it went through. Please
    take into account that ACME is fictional and its story is pretty simplistic. A
    real-world business is not simple—far from it—and it is pretty difficult to ascertain
    where a given business sits on the CD and DevOps evolutionary scale. Without this
    information, it's hard to understand how receptive, responsive, and open to adoption
    a business actually is.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: 'With that said, there are some simple ways of getting a clearer idea. For example,
    the following list of questions can help you get a rough idea. Looking at your
    business, ask yourself the following:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Option #1** | **Option #2** | **Option #3** |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
- en: '| Does your business favor process over people? | Process | People | We don''t
    have any processes worth mentioning. |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
- en: '| Do immovable deadlines in project plans take precedence over delivering quality
    solutions incrementally? | Yes, meeting deadlines is the only thing that matters.
    | We have the flexibility to make small changes, and re-plan to ensure quality
    doesn''t suffer. | We do whatever is needed to keep the customer happy. |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
- en: '| Are your projects run with fixed timescales, fixed resource, and fixed scope,
    or is there flexibility? | Yes, and this is all agreed up front, signed off, and
    intricately planned. | No, we have flexibility in at least one of these areas.
    | We do whatever is needed to keep the customer happy. |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
- en: '|  | **Option #1** | **Option #2** | **Option #3** |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
- en: '| Do your developers have access to the production environment? | No, why would
    we trust developers to not screw things up? | All developers have secure read-only
    access to the live environments and all configuration via specific tools. | Yes,
    they have full access to do whatever is needed. |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
- en: '| Is failure scorned upon or used as something to learn from? | Failure is
    failure and there are no excuses—heads will roll. | We ensure failure will have
    a small impact and learn from our mistakes. | Failure means no more business and
    we''re all out of a job. |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
- en: '| Who is on-call for out-of-hours production issues? | The T1 help desk, with
    the T2 operations support and T3 applications support teams backing them up. |
    We normally have a point of contact on call who can reach out to anyone they need.
    | Everyone within software engineering |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
- en: '| Are you able to ship code when it is ready or do you have to wait for a scheduled
    release? | The release team schedule and agree on the delivery into production
    via the CAB and transition team based upon the agreed program plan. | We trust
    our engineers to ship code using our deployment tools when they are confident
    it is ready and doesn''t compromise overall quality. | Our engineers normally
    FTP code to the production servers when it''s finished compiling. |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
- en: '| Does your senior leadership understand the complexities and challenges of
    delivering software? | They don''t know in detail, but there are many reports
    compiled and generated by the PMO which are regularly reviewed during project-review
    meetings. | They all have access to tools which give visibility of the various
    projects and metrics representing progress. | They don''t have the time or inclination
    to understand this—they expect stuff gets done. |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
- en: '| Do the engineering teams have an understanding of how the business is doing
    from a commercial perspective? | All of the top-level financial information is
    compiled and published by the CFO to the company intranet every 6-12 months. |
    They all have access to the tools that give visibility of the current KPIs and
    metrics representing progress. | They don''t, but as long as they get paid, that
    should be enough. |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
- en: '| Does the engineering team have access to customer feedback? | This is normally
    collected and vetted by the customer service team and raised as defect or enhancement
    requests. | Customer feedback is captured via specialist tools and available to
    all. | Yes, this normally relates to defects and bugs that need fixing. |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
- en: If you were to apply these to the ACME business at certain points through their
    evolution, you would find that the Version 1.0 business would mostly answer 3,
    the version 2.0 business would mostly answer 1, and the highly-evolved version
    of the business would mostly answer 2.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: The preceding is simply an example that gives you and insight into how you can—at
    a very holistic viewpoint—ascertain how mature the business is and where it sits
    within the CD and DevOps evolutionary scale. You will no doubt have some additional,
    complimentary, or more relevant questions you could use. However, if you follow
    a similar format, you will be able to get a feel for where things sit, and more
    importantly, what areas need the most focus. You should widen the net as much
    as possible to get a view from as many parts of your business as possible—that
    way, you won't come across surprises when you decide to take the plunge.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ACME systems evolution story is not atypical of the many software businesses
    out there today. No doubt, you will recognize and relate to some of the traits
    and challenges detailed in the ACME journey, and you should now be able to plot
    where your business (or your client's/partner's business) currently sits within
    the CD and DevOps evolutionary scale. You also got a holistic view of what CD
    and DevOps is and what it isn't.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: We'll now move from storytelling mode and start to look in more detail at some
    of the practical aspects of adopting CD and DevOps, starting with how you identify
    the underlying problems that can (and do) stifle the delivery of quality software.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 2](03ef279d-c51d-4e35-a137-701636c17d5f.xhtml), *Understanding Your
    Current Pain Points*, we'll be looking into how you go about identifying the problems
    and issues within their **Software Delivery Life Cycle** (**SDLC**) and highlight
    some tools, techniques, and approaches to surface said problems and issues so
    that they can be fixed.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
