- en: Culture and Behaviors are the Cornerstones to Success
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 2](03ef279d-c51d-4e35-a137-701636c17d5f.xhtml), *Understanding Your
    Current Pain Points*, we learned that asking people to be open and honest is not
    that easy, unless you take the time to set the environment up to allow for it.
    The environment had to be such that a culture of honest disclosure could take
    place. On top of this, you had to ensure that every participant agreed to behave
    according to the flexible rules and processes set out.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now take this experience and expand upon it to ensure the environment,
    culture, and behaviors throughout the organization are set up to allow for—what
    can be—potentially massive change. The sorts of things we''ll be covering throughout
    this chapter are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Why culture is so important
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How your working environment can impact your culture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How culture and behaviors affect your progress and success
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encouraging innovation at a grass-roots level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fostering a sense of accountability across all areas of your organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing blame from the working environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embracing and learning from failure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building trust
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rewarding success in the right way
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instilling a sense that change is good
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How good PR can help
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Throughout this chapter, we''ll also be looking at what this means to the three
    personas you were previously introduced to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9768ae3e-3df0-45de-b7e9-0c7f578c35f9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In addition, we''ll include a new persona who runs the show from an IT perspective:'
  prefs: []
  type: TYPE_NORMAL
- en: Victoria the veep
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/bd6b45c6-7f53-48bb-a20a-863e3887bdc2.png)'
  prefs: []
  type: TYPE_IMG
- en: It should be noted that I am by no means an expert in the human sciences nor
    do I have a PhD in psychology. What follows is learning I have gathered through
    observation, experience, and collaboration with experts in this field.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by clarifying why culture is so important to the successful adoption
    of CD and DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: All roads lead to culture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many people in the tech industry—some very influential—who believe
    that the adoption of CD and/or DevOps simply amounts to implementing some technical
    tools and then making slight tweaks to existing heavyweight processes to potentially
    allow software to be released every few weeks/months.
  prefs: []
  type: TYPE_NORMAL
- en: Worse still, some see this as a *bona fide* reason to set up a new DevOps team
    inside the existing organization that—all things considered—spend their time building
    and implementing tools and processes that make little or no difference to successful
    delivery of quality software.
  prefs: []
  type: TYPE_NORMAL
- en: If you believe these views to be correct, then you are simply wrong at best
    and delusional at worst. Just to reiterate, CD and DevOps are—put very simply—agile
    ways of working. The DevOps tools are just that—tools. When we say ways of working,
    we're not simply talking standard operation procedures or HR policies here, we're
    talking about the default way in which people work, think, and behave.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just like any other efficient and effective ways of working, CD and DevOps
    are only as good as the culture and environment in which people work and the behaviors
    they exhibit. All of which play a massive part in the success or failure of adoption
    of any change:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0c9550d4-d50f-4e34-a2c8-16951b96ab32.png)'
  prefs: []
  type: TYPE_IMG
- en: The convergence of many roads
  prefs: []
  type: TYPE_NORMAL
- en: When we talk about culture, this mainly refers to corporate and organizational
    culture rather than geographical, geo-political, or social group culture. That
    said, these can also have some bearing on how people behave, therefore you should
    be cognizant of this. For example, if you were to consider a culture that values
    and respects social hierarchy over individual views and opinions, then those self-same
    individuals may see openness and honesty as an unnatural or alien concept—or at
    the very least, may feel uncomfortable with the approach. This can also lead to
    individuals verbally accepting change simply because someone above them has asked
    (or instructed) then to do so—not because they personally believe in it.
  prefs: []
  type: TYPE_NORMAL
- en: Although you should be mindful of people's cultural values and motivations,
    you should not let this dictate or define your approach—you should simply accommodate
    them along the way.
  prefs: []
  type: TYPE_NORMAL
- en: 'The sorts of cultural and environmental aspects that are not conducive to successful
    adoption of CD or DevOps include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Barriers or power struggles between teams
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Silos across your organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ineffective lines of communication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rigid, old-school hierarchies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strong embedded beliefs that how things have always been done is best
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dysfunctional leadership
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The business is resistant to change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoidance of learning from failure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Command and control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attempting to implement CD or DevOps in an environment where these are prevalent,
    without addressing the underlying and overarching cultural issues that sustain
    them, will ultimately lead to failure.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may be reading this and thinking that you may have worked in (or work in)
    a business that has adopted CD or DevOps and be thinking that some/all of the
    preceding points do apply but on the whole things seem to be working well. The
    key phrase here is *seem to be*, which, if you were to apply it to other everyday
    scenarios, you wouldn''t accept as readily:'
  prefs: []
  type: TYPE_NORMAL
- en: I checked the brakes on your car and things seem to be working
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I pulled together a fix for the DDOS defect that could expose personal details
    of 3 million active users and things seem to be working
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I investigated the reported payroll system issues and things seem to be working
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We've constantly lost 10% of our customer base over the last three quarters,
    but since the recent organizational changes and headcount reductions, things seem
    to be working
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, perception can be a powerfully misleading thing and can set
    a false sense of security. If you were to change *seem to be* with *are* in the
    previous examples, you will notice the way in which you perceive the statements
    would be very different.
  prefs: []
  type: TYPE_NORMAL
- en: If you then apply this rule to your thinking in relation to your organization's
    CD and DevOps adoption, you may struggle to apply *are* within the statement as
    freely because the culture and behaviors of people involved are not as they should
    be. To effectively change *seem to be* to *are*, you need a positive and progressive
    culture to work in.
  prefs: []
  type: TYPE_NORMAL
- en: Defining culture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Culture is a very nebulous thing and can be difficult to visualize, understand,
    and define. This becomes more difficult when applied to a positive and progressive
    culture; however, the following diagram may go some way to visualizing what this
    means in relation to CD and DevOps adoption—some of this we''ll cover in more
    detail throughout this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3da755a2-8edc-4ad4-8829-d9ddaf6a3086.png)'
  prefs: []
  type: TYPE_IMG
- en: The cultural interconnectedness of all things CD and DevOps
  prefs: []
  type: TYPE_NORMAL
- en: In the previous diagram, you'll see that culture is central to enabling, encouraging,
    influencing, reinforcing, and sustaining positive behaviors. These positive behaviors
    will need to become the norm if you are to ensure your adoption succeeds. Some
    may believe that the opposite is true; however, the reality is that culture is
    so central that all of the work, effort, and best intentions in relation to establishing
    and sustaining positive behaviors can be thwarted almost overnight by a dysfunctional
    and poisonous culture. That isn't to say that you can't work from the outside
    in with enough sustained and consistent effort; however, from experience, I know
    this can be very long-winded, difficult, and fragile—it just takes one bad decision
    or event to undo months of work. Ultimately, you need to focus on the culture.
  prefs: []
  type: TYPE_NORMAL
- en: 'To put it another way, try to imagine your organization as an apple tree that
    needs strong and healthy roots to allow for the buds and blossom to form—if the
    roots (or culture) are unhealthy, the tree *seems to be* surviving but it will
    never bear fruit (or positive behaviors):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/63d338e4-6497-4c7c-a9a1-fde5001c99b3.png)'
  prefs: []
  type: TYPE_IMG
- en: The tree of culture
  prefs: []
  type: TYPE_NORMAL
- en: What has this got to do with CD and DevOps adoption? To truly benefit from adopting
    CD and DevOps, you need positive behaviors to be prevalent, encouraged, and embedded
    so that they become the norm. For this to truly happen, you need the culture to
    be positive and progressive. You may have witnessed some of these positive behaviors
    being exhibited while exposing the elephant in the room, so this shouldn't be
    an alien concept.
  prefs: []
  type: TYPE_NORMAL
- en: But what about the environment? Again, going back to the horticultural analogy,
    for healthy roots (culture) to grow and remain healthy, you need fertile and enriched
    soil (environment).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram represents the relationship between the environment,
    the culture, and the behaviors—all of which need to be aligned and healthy for
    the adoption of CD and DevOps to truly work:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc177ddd-c7f4-41c5-9662-ec559437318b.png)'
  prefs: []
  type: TYPE_IMG
- en: The Russian dolls of DevOps adoption
  prefs: []
  type: TYPE_NORMAL
- en: If this sounds familiar, then that's for a good reason. During the elephant
    exposure, you had already planted the seeds by setting up the environment—albeit
    in safe greenhouse conditions—to allow for positive behaviors to surface. The
    culture—even if it was for a short time—was generally positive and progressive.
    Due to this, you managed to expose the problems within your organization, thereby
    proving that with some effort and an aligned approach, you can produce results
    that otherwise would not have been realized. What you need to do is nurture this
    seedling and encourage it to grow, which can be harder to do than you think.
  prefs: []
  type: TYPE_NORMAL
- en: For all intents and purposes, true and successful adoption of CD and DevOps
    can be a pretty big change, and to some organizations it can be quite revolutionary.
    Throughout history, when it comes to cultural revolution, the acceptance and adoption
    normally resonates better with the general populace or those on the shop floor
    than the higher echelons. In terms of the tech industry, it's normally the engineers,
    testers, and other team members who are the ones to grasp and accept the concepts
    and benefits of CD and DevOps and will ultimately benefit the most when it's adopted.
  prefs: []
  type: TYPE_NORMAL
- en: That's all well and good; however, the reality is that the power to make decisive
    change is normally in the hands of those individuals higher up the corporate/social
    food chain. It is therefore crucially important that your leadership has a clear
    understanding and appreciation of the benefits CD and DevOps can bring, and more
    importantly, how the environment, culture, and behaviors can massively help or
    hinder the successful adoption. We'll cover this in more detail later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned, behaviors can have an influence on and be influenced by the environment
    and culture. There are a few other factors that share this symbiotic relationship.
    The key ones are processes, communications, and tools and techniques, as depicted
    in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/451d8611-6f62-4b57-a8bc-8db34b2781f8.png)'
  prefs: []
  type: TYPE_IMG
- en: More Russian dolls of DevOps adoption
  prefs: []
  type: TYPE_NORMAL
- en: Let's briefly look into each of these.
  prefs: []
  type: TYPE_NORMAL
- en: Processes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you will have noticed during the elephant exposure, one of the many problems
    most businesses suffer from are the processes that operate within them—many of
    which will be complex, convoluted, and deeply rooted. Now consider having to retain
    these processes while adopting CD and DevOps—as you can imagine, this would be
    far from an ideal approach.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the adoption to be successful, you will need processes that are streamlined,
    efficient, and effective. They also need to complement and reinforce the positive
    culture, environment, and behaviors. For example, let''s consider a typical example
    of an existing heavyweight process for getting a single-line code change through
    to a production environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69ad0771-d6cd-4a07-9ca3-b8a34f5dd9e2.png)'
  prefs: []
  type: TYPE_IMG
- en: A typical heavyweight process
  prefs: []
  type: TYPE_NORMAL
- en: OK, so this may be slightly over the top; however, it's not unusual—especially
    in large organizations and/corporates that strictly follow frameworks such as
    ITIL or similar. If you also consider that this represents the happy path version
    of the process, it's not hard to imagine the loops and hoops you would have to
    go through should any problems or defects be found during the various steps (normally,
    this will mean starting back at square one). All in all, this kind of process
    would not be conducive to the adoption of CD and DevOps nor would it be closely
    aligned to a positive culture, environment, and behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s compare this to a typical CD and DevOps process for shipping a single-line
    code change:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e7f9bebc-2e4c-4afd-b72e-94a7fb6c1d5b.png)'
  prefs: []
  type: TYPE_IMG
- en: Simple CD equivalent process
  prefs: []
  type: TYPE_NORMAL
- en: Again, this is an over-simplified representation; however, when compared to
    the previous example, you can see the sort of process changes you'll need to implement.
    Not only is the latter process streamlined and optimized when compared to the
    former, but it also helps to encourage positive behaviors, such as collaboration
    and a sense of ownership.
  prefs: []
  type: TYPE_NORMAL
- en: As you can imagine, making radical and impactful changes such as these can be
    nigh on impossible without having a culture and environment that would support
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Communications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Communication is another key factor for the successful adoption of CD and DevOps.
    We'll be covering communication in more detail later in the book; however, let's
    have a look at why it is so key.
  prefs: []
  type: TYPE_NORMAL
- en: As is the case with any change, getting CD and DevOps accepted and adopted will
    need a considerable amount of PR, conversation, evangelism, discussion, and information-
    and knowledge-sharing. This will amount to lots of communication (by lots, I mean
    a vast amount). As was the case during the elephant exposure, the culture and
    environment needs to be such that communication between all involved can to be
    free-flowing, openly encouraged, and, above all, consistent.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of the messaging of CD and DevOps adoption, this needs to be targeted
    to the audience to ensure it is understood. As such, you will need to ensure that
    the communication is tailored to ensure that all concerned have a clear idea of
    what CD and DevOps is about, in terms they understand and can relate to.
  prefs: []
  type: TYPE_NORMAL
- en: As previously noted, there may be individuals whose social and cultural beliefs
    are not truly aligned to the open and honest culture and behaviors that are required
    for a successful adoption of CD and DevOps. You should therefore take time to
    ensure communication is tailored to accommodate these individuals.
  prefs: []
  type: TYPE_NORMAL
- en: Tools and techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we talk about tools and techniques, we're not referring exclusively to
    technical tools, what I'm referring to here is agile tools and techniques that
    will help the adoption of CD and DevOps—sometimes referred to as engineering best
    practices. As previously mentioned, a vast number of the CD and DevOps specialist
    businesses that have come into being in the last decade specialize in technical
    tools targeting CD and DevOps (mainly DevOps, to be honest); however, there's
    not a vast amount of adoption of said tools outside of the traditional (Dev)Ops
    realm. This could be attributed to the specialist knowledge required to master
    the tools—something developers don't normally have the time/inclination to understand.
    The opposite is also true of tools and techniques favored by Dev teams but not
    prevalent within their Ops peers, such as the adoption of scrum, strict version-control,
    and test-first development.
  prefs: []
  type: TYPE_NORMAL
- en: Some development tool vendors have realized this and built technical tooling
    to allow for developers to seamlessly interact with so-called DevOps tools and
    Ops to seamlessly use engineering best practices traditionally targeted at developers.
    It does have to be said that, at the time of writing, this is still far from the
    norm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Going back to environment and culture, consider this: even if developers did
    have access to so - called DevOps tools, unless the environment and culture is
    such that they can freely use them (for example, they are freely able to automatically
    ship code changes to a given environment using a DevOps pipeline), there doesn''t
    seem much point in them having these tools as they can''t actually do anything
    of value with them.'
  prefs: []
  type: TYPE_NORMAL
- en: To allow CD and DevOps adoption to thrive, the culture and environment in which
    both Devs and Ops work should allow for seamless collaboration and interaction.
    Along with this, the tools and techniques used to deliver software changes should
    be chosen by and used across both specialisms (for example, Devs should know how
    to use tools such as Octopus deploy, and Ops should know how to use tool such
    as Visual Studio).
  prefs: []
  type: TYPE_NORMAL
- en: In relation to techniques, one massive win for CD and DevOps is the configuration-as-code
    approach. We'll go into this in more detail later, but suffice it to say that
    without an environment and culture that encourages collaboration, there's a strong
    possibility that such a game-changing technique will not come to fruition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see what our personas can do to help:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Good approach** | **Not-so-good approach** |'
  prefs: []
  type: TYPE_TB
- en: '| Victoria (the veep) and her peers can lead by example; even simple things
    such as being seen to take an interest in the environment and culture, and exhibiting
    positive behaviors will help. If changes are required, they can be executive sponsors
    so that everyone takes it seriously. | Victoria (the veep) ignores what is going
    on below her (or takes no interest), ignores the requests for help, and continues
    to exhibit a command-and-control culture. |'
  prefs: []
  type: TYPE_TB
- en: '| Stan (the manager) should been seen to exhibit positive behaviors and encourage
    his peer group to do the same. He can research some best practice approaches and
    mentor his team(s) to adopt those that are relevant and make time for them to
    refine how they work. | Stan (the manager) does nothing to help improve and reinforce
    positive behaviors nor shows any inclination toward adopting or accepting modern
    agile techniques. |'
  prefs: []
  type: TYPE_TB
- en: '| Devina (the developer) and Oscar (the Ops guy) can work together, exhibit
    positive behaviors, and encourage their peers to do the same. They can also encourage
    their peers to work with their managers and highlight areas for improvement in
    terms of environment and the culture. | Devina (the developer) and Oscar (the
    Ops guy) insist on working apart, only communicating when needed, and avoid collaboration
    wherever possible. |'
  prefs: []
  type: TYPE_TB
- en: Thus far, we've been looking at the various parts you'll need for a successful
    CD and DevOps adoption. Let's now start digging into specific details, starting
    at the top with the environment.
  prefs: []
  type: TYPE_NORMAL
- en: An open, honest, and safe environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apart from sounding like something taken directly out of a management training
    manual, what does having an open, honest, and safe environment actually mean?
    In relation to CD and DevOps adoption, this means that anyone and everyone involved
    in your product-delivery process is willing, encouraged, and able to openly comment
    on and discuss ideas, issues, concerns, and problems, without the fear of ridicule
    or retribution—especially from those in leadership positions.
  prefs: []
  type: TYPE_NORMAL
- en: As you found during the elephant exposure stage, allowing for open discussions
    and honest appraisals of how things are done within the organization and the product-delivery
    process brings to the surface details and facts that otherwise would have been
    missed or stayed hidden. You need to persist the environment where the distinct
    lack of secrets culture and behavior is prevalent and maintained.
  prefs: []
  type: TYPE_NORMAL
- en: If there is a time delay between the elephant exposure and adoption, then you
    will have more work to do to rekindle the initial euphoria, as most will have
    fallen back into their day jobs and ways of working. Therefore, you should seriously
    consider keeping the time delay to a minimum.
  prefs: []
  type: TYPE_NORMAL
- en: On the face of it, this all sounds like common sense, but unfortunately, this
    way of working is not encouraged, or worse still, is actively discouraged in some
    working environments—especially in corporate business. If you find yourself in
    this situation, then you have some additional challenges to overcome simply due
    to the fact that these edicts are normally defined and enforced through the HR
    and management guidelines, which in turn define the policies under which the business
    operates. You therefore can't simply break or bend these rules at will. We'll
    cover this in more detail later in the book, but suffice it to say that you need
    to tread very carefully and ensure you lead by example in terms of your behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: Let's break down these concepts in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Openness and honesty
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Openness and honesty are key factors to ensure that the implementation of CD
    and DevOps is successful. Without these behaviors in place, it's going to be very
    difficult to break down barriers and implement the much-needed changes throughout
    your organization. You already engaged the majority of the business during the
    elephant disclosure to obtain honest feedback about the current situation. You
    now need to ensure that you continue this dialogue with all concerned. Everyone
    involved in the product-delivery process, from developers and testers through
    change and release controllers to product owners and senior managers, must have
    a forum they can use to share their thoughts, suggestions, observations, worries,
    and news.
  prefs: []
  type: TYPE_NORMAL
- en: The most effective way to do this, as was the case previously, is via face-to-face
    human interaction, be this in person or virtually via video-conference systems
    (remember that video is preferable to voice as this allows for greater human interaction).
    There is one potential drawback to this approach—getting everyone in the same
    place at the same time can be difficult. We'll look at some ways to overcome physical
    environment challenges later; if face-to-face is not wholly viable most/all of
    the time, there is a rich and mature market in collaboration tools such as Slack,
    Flowdock, Yammer, or MsTeams (to name but a few), all of which provide you with
    real-time interpersonal interaction.
  prefs: []
  type: TYPE_NORMAL
- en: One thing to be mindful of when considering such collaboration tools—as most
    tools are public-internet-hosted **Platform as a Service** (**PaaS**) or **Software
    as a Service** (**SaaS**) offerings—is how their usage adheres to the IT security
    policy within your business. You should engage with your SecOps team and, if possible,
    get them on board with the implementation—thereby extending the CD and DevOps
    approach and community.
  prefs: []
  type: TYPE_NORMAL
- en: Despite the long-held belief, email is not an effective collaboration tool and
    should not be considered as such.
  prefs: []
  type: TYPE_NORMAL
- en: Whatever approach you choose, it is advisable that you set up some form of etiquette
    or guidelines so that everyone knows what is acceptable and what is not. Normally,
    common sense will prevail; however, with openness and honesty come responsibility
    and maturity—some may forget this, so a gentle reminder can always help. On the
    flip side, what should not prevail is a heavy-handed policing or moderation of
    the content as this will actively discourage openness and honesty and ultimately
    make the solution(s) redundant. You should review existing policies and engage
    with your HR team to see whether they can help.
  prefs: []
  type: TYPE_NORMAL
- en: 'Going back to the main theme of openness and honesty, let''s look at what this
    means in terms of the previously introduced personas:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Good approach** | **Not-so-good approach** |'
  prefs: []
  type: TYPE_TB
- en: '| Victoria (the veep) should openly share plans and information (within reason)
    with her department (ideally in person or via webinar) and openly ask for feedback.
    | Victoria (the veep) doesn''t make the effort to communicate with her department
    and keeps all plans and information held back until the eleventh-hour faceless
    email is sent out. |'
  prefs: []
  type: TYPE_TB
- en: '| Stan (the manager) should opening and regularly share plans and information
    (within reason) with his team(s) and ask for feedback. If collaborative tools
    are implemented, Stan and his peers should be actively using them and encourage
    their team(s) to do so as well. | Stan (the manager) emulates Victoria''s behaviors
    and keep things secret and hidden from his team(s). Information is normally shared
    via email. Collaborative tools are seen as something only the teams use. |'
  prefs: []
  type: TYPE_TB
- en: '| Devina (the developer) and Oscar (the Ops guy) proactively communicate in
    person—physically or via video conference — as much as possible and not just when
    problems occur. Use of collaboration tools over email should be the norm and they
    should encourage their peer group to do the same. | Devina (the developer) and
    Oscar (the Ops guy) continue to work in silos and only communicate when issues
    occur—normally via email. Information is shared on a need-to-know basis. |'
  prefs: []
  type: TYPE_TB
- en: As you can see, it's far easier to fall into the not-so-good approach; however,
    the extra effort required to stay on the good approach path is far more beneficial
    as it will encourage open and honest dialogue.
  prefs: []
  type: TYPE_NORMAL
- en: It's all well and good to ask and encourage others to be open and honest, but
    you should also practice what you preach. As you go through the adoption of CD
    and DevOps, it is extremely important that you have regular open, honest, and
    truthful feedback from all concerned in terms of what is working with the implementation
    and, more importantly, what is not. Again, the simplest and most effective way
    is face-to-face human interaction; simply walk around and ask people. If this
    is not wholly viable, you should consider sort of lightweight survey solutions
    (such as Survey Monkey or similar) to capture feedback. The word *lightweight*
    is important here as no one will provide feedback on a regular basis if they have
    a 10-page questionnaire to fill out every few weeks.
  prefs: []
  type: TYPE_NORMAL
- en: If you follow or use an agile methodology and run regular retrospectives, ask
    those running these sessions to forward any feedback related to your implementation
    or, better still, join the session yourself and observe.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''re hopefully getting an idea of what open and honest dialogue is all about,
    but there is another very important thing you will need to cater for: courageous
    dialogue. Let''s now review what it is, why it''s important, and how it comes
    into the equation.'
  prefs: []
  type: TYPE_NORMAL
- en: Courageous dialogue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There will be times when someone lower down the food chain will have an opinion
    or a view on how those above them help or hinder the product-delivery process.
  prefs: []
  type: TYPE_NORMAL
- en: You may also have individuals whose views are at odds with specific parts of
    the business, or indeed certain teams or individuals. It takes guts and courage
    for an individual to speak up about something like this, especially within a corporate
    environment. If we're honest, most would shy away from this approach for fear
    of retribution in one form or another.
  prefs: []
  type: TYPE_NORMAL
- en: For these people to speak up, they need to be sure that what they say (within
    reason, of course) is not taken as a black mark on their record or held against
    them in other ways. To this end, you should consider setting up a dialogue de-militarized
    zone (or DDMZ for short), where they can freely share their ideas, views, and
    opinions—where they can point out the emperor's new clothes.
  prefs: []
  type: TYPE_NORMAL
- en: You should work with the leadership team and HR department to ensure that there
    is a forum for this type of very important and valuable dialogue. The content
    might not be enlightening, but if you have a good number of people saying the
    same thing, then there is a good chance that something needs to be addressed.
  prefs: []
  type: TYPE_NORMAL
- en: If setting up a DDMZ is not applicable, at the very least, you should look to
    implement some sort of amnesty or a way for anonymous feedback to be collected—something
    as simple as a suggestion box or an online survey may suffice. It should be noted
    that as the culture and environment mature, the need for such measures should
    abate.
  prefs: []
  type: TYPE_NORMAL
- en: 'One important thing to also consider in terms of courageous dialogue is the
    quiet ones. Let me elaborate: generally speaking, there are two distinct types
    of personality traits: individuals who are introverted and those who are extroverted.'
  prefs: []
  type: TYPE_NORMAL
- en: This is a very generalist and overly simplistic statement—in reality, there
    are many personality traits—however, for simplicity's sake, let's stick with the
    two.
  prefs: []
  type: TYPE_NORMAL
- en: The extroverts are the ones who are not afraid to interact, talk, and discuss
    their views and feelings in public. For extroverts, open, honest, and courageous
    dialogue isn't something they would normally shy away from. Introverts, on the
    other hand, when faced with conflict (potential or otherwise), will more often
    than not simply close down or just go with the flow. You, therefore, need to be
    very mindful of this fact and ensure everyone has the opportunity to contribute
    and voice their opinions. It might seem like additional work, but from experience,
    it will be worth it as the contributions from the introverts are normally well-considered
    and enlightening.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have difficulty spotting the different types, then here''s one easy
    tip: extroverts talk to make their brains work, whereas introverts use their brains
    to make their mouths work.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s be very open, honest, and courageous about how easy it will be to implement
    and embed these sorts of behaviors into normal ways of working: it is not. It
    will be challenging, complex, time-consuming, and, at times, extremely frustrating.
    However, if you persevere, and things start to work (and they will), you''ll find
    it''s a very effective way to work. You will find that once openness and honesty
    are embedded into the normal ways of working, things really start coming together.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s summarize what we''ve covered so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Do** | **Don''t** |'
  prefs: []
  type: TYPE_TB
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Allow freedom of expression
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encourage anyone and everyone to have their say (within reason)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be patient with the quiet ones as it will take a bit longer for them to open
    up
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure management and HR understand why openness and honesty are essential
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get management to actively contribute and lead by example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have a distinct lack of secrets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Have a closed and secretive environment and culture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ignore or dismiss people's opinions and views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use open and honest feedback in a negative or nefarious way
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be impatient
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ignore do as I say not as I do attitudes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at what our personas can do to help:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Good approach** | **Not-so-good approach** |'
  prefs: []
  type: TYPE_TB
- en: '| Victoria (the veep) officially sponsors the creation of a DDMZ and encourages
    her department to communicate openly (within reason) on areas that matter to them.
    She also works with her HR peers to ensure actions are taken based upon feedback
    given. | Victoria (the veep) sees open and honest communication and dialogue as
    a way to spot and target the troublemakers who should be removed from the organization.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Stan (the manager) should reinforce Victoria''s message and actions, and
    lead by example. When feedback from his team(s) is given in confidence, it should
    remain so. | Stan (the manager) plays lip service to any feedback provided and
    continues to act in such a way as to improve his career progression. |'
  prefs: []
  type: TYPE_TB
- en: '| Devina (the developer) and Oscar (the Ops guy) take the opportunities given
    to be open and honest with each other, their peers, and managers. When surveys
    are sent out to allow for open and honest feedback, they take the time to complete
    them and provide truthful information. | Devina (the developer) and Oscar (the
    Ops guy) are afraid to say what they really feel for fear of repercussions to
    their career prospects. |'
  prefs: []
  type: TYPE_TB
- en: What might not be obvious is the fact that the physical environment is something
    that can and does cause further complications when looking at encouraging open
    and honest dialogue and behaviors. We'll now look at this.
  prefs: []
  type: TYPE_NORMAL
- en: The physical environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some of you might be lucky enough to work in nice, airy, open-plan offices with
    plenty of opportunities to wander around for a chat and line-of-sight visibility
    of people you collaborate with. The reality is that most of us are not so lucky
    and have teams physically separated by office walls, flights of stairs, the dreaded
    cubicles of doom, or even time zones. At this point, let's hypothesize that the
    office space is not open-plan and there are some physical barriers.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few things you can look at to remove some of these barriers:'
  prefs: []
  type: TYPE_NORMAL
- en: Keep the office doors open or, if possible, remove them altogether.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set aside an area for communal gatherings (normally in the vicinity of the coffee
    machine) with comfortable seating, such as sofas or bean bags, where people can
    chill out and chat.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have regular (at least weekly) sessions where everyone gathers (normally in
    the vicinity of coffee and free doughnuts, cakes, cookies, pastries, or whatever
    would entice people away from their desks) to chat and chill out.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get a foosball or table-tennis table; it's amazing how much ice is broken by
    having a friendly bit of competition within the office.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you use scrum methodology (or similar) and have separate teams locked away
    in offices, each holding their daily stand-up in private, hold a daily scrum of
    scrums (or stand-up of stand-ups) and have one person from each team attend it.
    Better still, mix things up and have members of each scrum team attend other team's
    stand-ups.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have teams hold their daily stand-ups away from the normal team area.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See whether some of the partition walls can be removed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have cubicles, remove them, all of them. I personally think that they
    are the work of the devil and produce more of a negative environment than having
    physical walls separating teams.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See whether an office move-around is possible to get people working closer together,
    or at the very least, mix things up.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where possible, replace desktop PCs with laptops—it's easier to be able to sit
    next to someone you are working with if you can take your workstation with you
    without needing a trolley to shift it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stop relying on email for communications and encourage people to talk—have discussions,
    mutually agree, and follow up with an email, if need be.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are, of course, merely suggestions based upon a very broad assumption
    of your environment and my experience in different organizations. You will no
    doubt have better ideas. The end game here is to remove the barriers, be they
    virtual or physical, which could stifle the successful adoption of CD and DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see what our personas can do to help:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Good approach** | **Not-so-good approach** |'
  prefs: []
  type: TYPE_TB
- en: '| Victoria (the veep) listens to what those below her are saying and works
    with her fellow senior leaders to help facilitate any changes required to the
    physical environment—securing budget if needed. | Victoria (the veep) looks out
    from her plush office and suggests people stop moaning and just get on with their
    work as she orders new cubes for the additional developers she''s budgeted for.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Stan (the manager) works within his peer group to convince those above of
    the importance of changes to the physical environment. Trying this alone, especially
    when money needs to be spent, might be challenging, so having many management
    voices saying the same thing will add weight. He also considers spending time
    working in the office space with his team(s)—a few hours per week may suffice.
    | Stan (the manager) looks out from his slightly-less-plush office and orders
    some blinds so that he doesn''t have to look at the teams that are all crammed
    into the office space. |'
  prefs: []
  type: TYPE_TB
- en: '| Devina (the developer) and Oscar (the Ops guy) work together to make small
    changes and run experiments, for example, to be seen to have face-to-face discussions,
    rather than via email, or take over an area of the office and sit together. |
    Devina (the developer) and Oscar (the Ops guy) insist on continuing to work in
    separate parts of the office, communicate via email, and don''t mention anything
    to their leadership team about the working conditions. |'
  prefs: []
  type: TYPE_TB
- en: We'll now move on from the seemingly simple subject of openness and honesty
    to the seemingly simple area of collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: Encouraging and embracing collaboration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you set out on your journey to adopt CD and DevOps, you will no doubt be
    working with the assumption that everyone involved wants to play ball and collaborate.
  prefs: []
  type: TYPE_NORMAL
- en: A large part of the business actively contributed to the elephant exposure exercise
    to capture and highlight the shortcomings of the incumbent business processes
    and ways of working, and did so in a very collaborative way. Surely, they would
    want to continue in this vein?
  prefs: []
  type: TYPE_NORMAL
- en: At first, this might be true—assuming there has not been an aforementioned delay;
    however, as time goes on, people will start to fall back into their natural siloed
    positions. This is especially true if there is a lull in the CD and DevOps adoption
    activity—you might be busy building/implementing technical tools or applying focus
    to certain areas of an existing process that are most painful. Either way, old
    habits will sneak back in if you're not careful.
  prefs: []
  type: TYPE_NORMAL
- en: It is, therefore, important that you keep collaborative ways of working at the
    forefront of people's minds and encourage everyone to work in these ways as the
    default mode of operation. The challenge is to make this an easy decision for
    all concerned. In essence, what you need is for people to believe and feel that
    working collaboratively is easier to do than not. When people believe and feel
    this, it becomes habitual and commonplace.
  prefs: []
  type: TYPE_NORMAL
- en: 'Luckily, there are many proven ways to encourage collaboration, but whatever
    you choose, you need to keep things lightweight and ensure that those you are
    encouraging don''t feel that this way of working is being forced upon them; some
    reverse-psychology to make them feel it''s their idea would help here. Here are
    some simple examples:'
  prefs: []
  type: TYPE_NORMAL
- en: Encourage everyone to use your online collaborative forum/messaging/chat solution
    as the first port of call instead of email when face-to-face communication isn't
    viable—even incentivize its use with leader boards and prizes at first to get
    some buy-in.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the norm is for problems to be discussed at a weekly departmental meeting,
    rather than having a five-minute discussion at someone's desk, then cancel the
    departmental meeting, instead encourage people to get up and walk and talk (or
    use the aforementioned collaboration tools).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the norm within the office is headphones on and heads down (which encourages
    isolation and stifles good, old-fashioned human-to-human discussion), look for
    ways to change this behavior so it isn't the norm. If people like to listen to
    music while working, you can consider something radical, such as a jukebox or
    some networked speakers. You could also consider agreements of when headphones
    on and heads down is viable (for example, only in the afternoon). In addition,
    if people need quiet time/space, see whether you can change the physical environment
    to allow for it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even if you don't follow a scrum methodology, use the daily stand-up technique
    across the board—you can even mix it up across teams and encourage people to move
    around the stand-ups and listen in.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install some magnetic whiteboards around the office space, which will encourage
    people to get up, mix, and be creative while explaining problems, showing progress,
    or simply having fun and doodling. If you have set up a communal chill-out area,
    have a whiteboard installed there as well—this will encourage collaboration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure you mingle and keep open discussions with all teams—you never know, you
    might hear something that another person has also been discussing, and you can
    act as the CD and DevOps matchmaker.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once collaboration starts to take hold, you must continue to keep your eyes
    and ears open to ensure you get an early indication of when things slip back.
    If you have built up a network of like-minded individuals, make sure you utilize
    it to find out what's happening on the ground and take early action if you hear
    a siloed approach sneaking back in.
  prefs: []
  type: TYPE_NORMAL
- en: You should also be mindful of the fact that collaboration can also be impacted—both
    positively and negatively—by the physical environment. For example, if teams are
    spread out across different buildings or even floors in the same building, collaboration
    can be severely hampered. Some of the previous techniques may not be wholly possible/viable—especially
    when close physical proximity is required—however, being creative with technical
    collaboration tools should be encouraged to fill the gaps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s again see what our personas can do to help:'
  prefs: []
  type: TYPE_NORMAL
- en: Collaboration is not the exclusive realm of engineers. Managers and senior leaders
    can and should collaborate and—more importantly—be seen to do so. Stan (the manager)
    can use some of the previous techniques and the technical collaboration tools.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To be honest, most senior leaders would not normally consider using the aforementioned
    collaborative techniques and tools on a day-to-day basis; however, Victoria (the
    veep) should at least have an appreciation for them and evangelize throughout
    her peer group. Budgeting for the cost of technical tools would also help.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Devina (the developer) and Oscar (the Ops guy) should practice what they preach,
    evangelize, and be highly visible when collaborating (ideally within the team/office
    area rather than hidden in meeting rooms). Even simple things, such as encouraging
    developers and operations engineers to go to the same pub at lunchtime on a Friday,
    can make a difference.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As collaboration becomes embedded within the organization, you will see many
    changes come to life. At first, these will be quite subtle, but if you look closely,
    you''ll soon start to see them: more general conversations at people''s desks,
    more "I''m trying to solve a problem but not sure of the best way to approach
    it, anyone fancy a chat over coffee to look at the options?" in the online chat
    room, and more background noise as people talk or share the joke of the day.'
  prefs: []
  type: TYPE_NORMAL
- en: Some subtle (or sometimes not-so-subtle) PR might help, for example, posters
    around the office, coffee mugs, or even prizes for the most collaborative team;
    anything to keep collaboration in sight and mind.
  prefs: []
  type: TYPE_NORMAL
- en: Let's leave collaboration for now and together move on to innovation and accountability.
  prefs: []
  type: TYPE_NORMAL
- en: Fostering innovation and accountability at a grass-roots level
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're lucky enough to work (or have worked) within a modern technology-based
    business, you should be used to having innovation as an important and valued input
    for your product backlog and overall roadmap. Innovation is something that can
    be very powerful when it comes to implementing CD and DevOps, especially when
    this innovation comes from the grass-roots level.
  prefs: []
  type: TYPE_NORMAL
- en: Many of the world's most successful and most-used products have come from innovation,
    so you should help build a culture throughout the business where innovation is
    recognized as a good and worthwhile thing rather than a risky way of advancing
    a product. Most engineers thrive, or at least enjoy, innovation, and truth be
    told, this was most probably one of the major drives for them choosing to become
    engineers—this and the fine wine, fast cars, and international jet-setter lifestyle
    (OK, this might be stretching things a bit too far).
  prefs: []
  type: TYPE_NORMAL
- en: This isn't to say that they can all go off and do what they want; there are
    still products to deliver and support. What you need to do is allow some room
    for investigation and experimentation—rekindle the R in R&D. Innovation is not
    just in the realm of software; there might be different ways of working, or product-delivery
    methodologies that come to light, that you can and should be considering.
  prefs: []
  type: TYPE_NORMAL
- en: Innovation is not restricted to products and tools; agile techniques, such as
    **Test-Driven Development** (**TDD**), scrum, XP, and Kanban, all started out
    as innovative ideas before gaining wider adoption.
  prefs: []
  type: TYPE_NORMAL
- en: Despite normal convention, innovation is not the exclusive right of solutions
    and systems architects; anyone and everyone should be given the opportunity to
    innovate and contribute new ideas and concepts. There are many ways to encourage
    this kind of activity (competitions, workshops, and so on), but you need to keep
    it simple so that you get a good coverage across the business. One simple idea
    is to have a regular innovation forum or get-together, which allows anyone and
    everyone to put forward, and, if possible, prototype, an idea or concept.
  prefs: []
  type: TYPE_NORMAL
- en: Innovation can increase risk, new things always do; therefore, the engineering
    teams must understand that with the freedom they are given to make decisions and
    choices comes responsibility, ownership, and accountability for the new stuff
    they come up with, produce, and/or implement. They cannot simply implement shiny
    new toys, tools, processes, and software and hand them off to someone else to
    support. The **Somebody Else's Problem** (**SEP**) or throw-it-over-the-wall approaches
    will no longer work.
  prefs: []
  type: TYPE_NORMAL
- en: A good example of this is the ACME systems plan to allow developers to deploy
    code directly to production. On the face of it, this is very much what CD and
    DevOps is all about, but one simple question caused the plan to falter. The question
    was, who is going to hold the pager? Or, to bring this into the 21st century,
    are the developers going to be on-call when things go wrong out of hours? Ultimately,
    you need everyone involved in the process of delivering and supporting software
    to have the same strong sense of accountability so that the question need not
    be asked.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, how can these values and behaviors be instilled in your organization? Let''s
    see what our personas can do to help:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Good approach** | **Not-so-good approach** |'
  prefs: []
  type: TYPE_TB
- en: '| Victoria (the veep) should invest some time investigating and reviewing how
    innovation has transformed the way successful businesses operate and increased
    revenue and profits. | Victoria (the veep) ignores the importance of innovation
    in modern business and sticks to the old approach of delivering to the spec and
    nothing more. |'
  prefs: []
  type: TYPE_TB
- en: '| Stan (the manager) should actively allow time for his team members to try
    things out or experiment, be this by setting aside some notional 10% time or simply
    encouraging them to put forward their ideas and suggestions for product or productivity
    advancement. | Stan (the manager) ignores the importance of innovation and forces
    his team(s) to focus on the delivery of product features over everything else.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Devina (the developer) and Oscar (the Ops guy) should actively pursue this
    agenda as part of discussions with their managers during one-to-ones or team meetings.
    To help things along, using some spare time on an idea, and then presenting it
    back, might be a good thing as it shows commitment and that you''re serious. Working
    together collaboratively will also add credence. | Devina (the developer) and
    Oscar (the Ops guy) should simply keep their heads down and do what they are told,
    even if it goes against modern engineering best practices. |'
  prefs: []
  type: TYPE_TB
- en: As your adoption of CD and DevOps matures, you will find that innovation and
    accountability become commonplace as the engineering teams (both software and
    operations) will have more capacity to focus on new ways of doing things and improving
    the solutions they provide to the business. This isn't just related to new and
    shiny things; you'll find that there is renewed energy to revisit the technical
    debt of old to refine and advance the overall platform.
  prefs: []
  type: TYPE_NORMAL
- en: Believe it or not, sometimes things will go wrong. We'll now look at how things
    that don't go so well should be dealt with, and why a culture of blame is not
    a good thing to have.
  prefs: []
  type: TYPE_NORMAL
- en: The blame game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Encouraging a fail-fast way of working is a critical element to good agile engineering
    practice; it is all well and good to say this, but this has to become a real part
    of the way your business works—as they say, actions speak louder than words. If,
    for example, we have a manager who thinks that pointing the finger and singling
    people out when things go wrong is a good motivational technique, it's going to
    be very difficult to create an environment where people are willing to put themselves
    out there and try new things. A culture of blame can quickly erode all of the
    good work done to foster a culture of openness, honesty, collaboration, innovation,
    and accountability.
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, you should have a working environment where when mistakes happen (we're
    only human and mistakes will happen), instead of the individual(s) being jumped
    upon from on high, they are encouraged to learn from the mistake, take measures
    to make sure it doesn't happen again, and move on. No big song and dance. Not
    only this, but they should also be actively encouraged to share their experiences
    and findings with others, which enforces all the other positive ways of working
    we covered so far.
  prefs: []
  type: TYPE_NORMAL
- en: Blame slowly, learn quickly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a commercial business, it might sound strange and be seen as giving out the
    wrong message (for example, you might seem to be ignoring or encouraging failure),
    but if lessons are being learned, and mistakes are being addressed quickly out
    in the open, then a culture of diligence and quality will be encouraged. Blaming
    individuals for a problem that they quickly rectify is not conducive to a good
    way of working. Praising them for spotting and fixing the issue might seem wrong
    to some, but it does reinforce good behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following illustration shows the possible impact of a blame slowly, learn
    quickly culture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/87e2e77b-d2ef-4fed-9561-9a818fccd1df.png)'
  prefs: []
  type: TYPE_IMG
- en: As blame diminishes, learning will grow as people will no longer feel that they
    have to keep looking over their shoulders and only stick to what they know or
    are told to do.
  prefs: []
  type: TYPE_NORMAL
- en: If managers are no longer preoccupied with the small issues, they can focus
    on the individuals who create issues but don't fix them or take accountability.
  prefs: []
  type: TYPE_NORMAL
- en: As you can understand, this culture change is not going to be easy for some,
    especially for the managers who have built up the reputation of being Mr. or Mrs.
    Shouty. Sometimes they will adapt, and other times they might simply step out
    of the way of progress—as the groundswell gains momentum. They will have little
    choice but to do one or the other.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s again summarize this:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Dos** | **Don''ts** |'
  prefs: []
  type: TYPE_TB
- en: '| Accepting accidents will happen | Pointing fingers |'
  prefs: []
  type: TYPE_TB
- en: '| Encouraging a fail fast, learn quickly culture | Calling out an individual''s
    failings |'
  prefs: []
  type: TYPE_TB
- en: '| Encouraging accountability | Blaming before all of the facts are known |'
  prefs: []
  type: TYPE_TB
- en: '| Encouraging the open and honest sharing of lessons learned | Halting progress
    |'
  prefs: []
  type: TYPE_TB
- en: '| Not making a big deal out of issues |  |'
  prefs: []
  type: TYPE_TB
- en: '| Focusing on individuals who don''t exhibit good behaviors |  |'
  prefs: []
  type: TYPE_TB
- en: Removing the threat and culture of blame from the engineers' working life will
    mean that they are more engaged, willing to be more open and honest about mistakes,
    and more likely to want to fix a given problem quickly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see what our personas can do to help:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Good approach** | **Not-so-good approach** |'
  prefs: []
  type: TYPE_TB
- en: '| Victoria (the veep) actively pursues a blame-free culture where mistakes
    are seen as just that, as long as people proactively learn from them. Her language
    and communication style reflect this as well. | Victoria (the veep) sees a mistake
    as a disciplinary offence and instills a sense of fear within her department that
    whenever a problem occurs, the person at fault will be found. |'
  prefs: []
  type: TYPE_TB
- en: '| Stan (the manager) ensures that time is given to learning and training—especially
    when mistakes occur due to knowledge/skills gaps. His language and approach to
    understanding the root cause of problems is open and avoids use of the term *blame*.
    | Stan (the manager) mirrors and agrees with Victoria''s approach. To emphasize
    this, he will pick out faults and ensure those responsible are identified and
    called out. |'
  prefs: []
  type: TYPE_TB
- en: '| Devina (the developer) and Oscar (the Ops guy) are not afraid to admit when
    there is a gap in their collective knowledge/skillset and highlight this to their
    manager(s). When a mistake is made, they freely admit their part in it and are
    proactively involved in learning how to stop it happening again. | Devina (the
    developer) and Oscar (the Ops guy) work hard to distance themselves from any issues
    found and stick to doing what they are told rather than use their skills and experience
    to find creative was to solve problems—which can carry risk. |'
  prefs: []
  type: TYPE_TB
- en: Of course, there is a large element of trust required on all sides to make this
    work effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Building trust-based relationships across organizational boundaries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, I will freely admit that this does sound like something that has been taken
    directly from an HR or management training manual; however, trust is something
    that is very powerful. We all understand what it is and how it can benefit us.
    We also understand how difficult things can be with a complete lack of it. If
    you have a personal relationship with someone, and you trust them, the relationship
    is likely to be open, honest, and a long and fruitful one. Building trust is extremely
    difficult; you don't simply trust a colleague because you have been told to do
    so—life doesn't work this way. Trust is earned over time through peoples' actions.
    Trust within a working environment is also a very hard thing to build. There are
    many different reasons for this (insecurity, ambition, reputation, personalities,
    and so on), so you need to tread carefully. You also need to be patient as it's
    not going to happen overnight.
  prefs: []
  type: TYPE_NORMAL
- en: 'Building trust between traditional development and operations teams can be
    even harder. There is normally a level or an undercurrent of distrust between
    these two areas of the business:'
  prefs: []
  type: TYPE_NORMAL
- en: The developers don't trust that the operations team know how the platform actually
    works or how to effectively investigate issues when they occur
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The operations team don't trust that the developers won't bring the entire platform
    down by implementing dodgy code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This level of distrust can be deeply ingrained and is evident up and down the
    two sides of the business. These types of attitudes, behaviors, and the culture
    they create are all too negative. It''s hard enough to get software developed,
    shipped, and stable without playing silly games with who does what and who doesn''t.
    If you have an environment like this, the business needs to grow up and act its
    age. There is no silver bullet to forge a good trust-based relationship between
    two or more factions; however, the following techniques have proven to be effective:'
  prefs: []
  type: TYPE_NORMAL
- en: If you arrange for some off-site CD or DevOps training, ensure that you get
    a mix of software and operations engineers to attend and ensure they are in the
    same hotel. You will be amazed by how many collaborative working relationships
    start in the hotel bar.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there are workshops or conferences you are looking at attending (for example,
    DevOpsDays), make sure there's a mix of Devs and Ops in attendance and a hotel
    bar.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are a manager, be very mindful of what promises and/or commitments you
    make and ensure you either deliver against them or you are very open and honest
    as to why you didn't/couldn't. If you are an engineer, act in exactly the same
    way.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have set up an innovation forum (as mentioned previously), encourage
    all sides to attend and contribute.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discourage us and them discussions and behaviors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it's viable, try to organize job swaps or secondments across the software
    and operational engineering teams (for example, get a software engineer to work
    in operations for a month, and vice versa). This can also include management roles.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s see what our personas can do to help:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Good approach** | **Not-so-good approach** |'
  prefs: []
  type: TYPE_TB
- en: '| Victoria (the veep) encourages her management team (Stan and his counterpart
    within the Ops team) to work closely together and, more importantly, to be seen
    to work closely together. She also approves a budget for cross-team events, training,
    and team-building activities. | Victoria (the veep) ignores the fissure between
    the Dev and Ops team (and their management) and maintains the strict separation
    between Dev and Ops in terms of ways of working and priorities. She also refuses
    to fund joint events, training, and team-building activities, and encourages open
    conflict. |'
  prefs: []
  type: TYPE_TB
- en: '| Stan (the manager) is seen to be collaborating with his counterparts within
    Ops team and encourages his team(s) to ignore organizational boundaries to get
    the job done. He also encourages his team to mix with the Ops teams in social
    settings. | Stan (the manager) actively ignores or is seen to avoid collaborating
    with his counterparts within Ops and insists his team(s) are constrained to stay
    within the organizational boundaries. Fraternizing with the Ops team(s) is something
    he frowns upon and hostility is seen as the norm. |'
  prefs: []
  type: TYPE_TB
- en: '| Devina (the developer) and Oscar (the Ops guy) ignore the organizational
    and hierarchical boundaries at work and simply work together to solve problems,
    mirroring the actions of their leadership. | Devina (the developer) and Oscar
    (the Ops guy) mirror the actions of their leadership and avoid every opportunity
    for cross-team collaboration. |'
  prefs: []
  type: TYPE_TB
- en: We'll now move from trust to rewards and incentives.
  prefs: []
  type: TYPE_NORMAL
- en: Rewarding good behaviors and success
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How many of us have worked with or been part of a business that throws a big
    post-release party to celebrate the fact that, against all odds, you managed to
    get the release out of the door? On the face of it, this is good business practice
    and Management 101; after all, most project managers are trained to include an
    end-of-project party task and budget in their project plans. This is not a bad
    thing if everything that was asked for has been delivered on time to the highest
    quality. Let's try rewording the question.
  prefs: []
  type: TYPE_NORMAL
- en: How many of us have worked with or in a business that throws a big post-release
    party to celebrate the fact that, against all odds, you managed to deliver most
    of what was asked for and only took the live platform offline for three hours
    while they tried to sort out some bugs that had not been found in testing?
  prefs: []
  type: TYPE_NORMAL
- en: If the answer to the question is quite a few, but it was a hard slog, and we
    earned it, then you are a fool to yourself. Rewarding this type of behavior is
    100% the wrong thing to do. The businesses that deliver what customers want, and
    do it quickly, are the ones that succeed.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to be a business that succeeds, you need to stop giving out the
    wrong message. We did say that it was OK to fail as long as you learn from it
    quickly; we didn't, however, mention rewarding failure to deliver. You should
    be rewarding everyone when they deliver what is needed when (or before) it is
    needed. The word *everyone* is quite important here as a reward should not be
    targeted at an individual as this can cause more trouble than it's worth. You
    want to instill a sense of collaboration and DevOps ways of working, so make the
    reward a group reward, such as a party or a day out.
  prefs: []
  type: TYPE_NORMAL
- en: The odd few
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OK, so there might be the odd few who will put in extra effort when times get
    sticky, and rewarding those individuals is not a bad thing; however, this should
    not be the norm. If engineering teams (software and operational) are consistently
    being told to work long days, long nights, and weekends, then there is something
    wrong with the priority of the work. If, however, they decide to apply some extra
    effort to overcome some long-outstanding technical debt or implement some labor-saving
    tools to speed things up, then this is completely different, and you should be
    looking at specific rewards for these specific good behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the day, you want to reward individuals or teams for doing something
    amazing that is above and beyond the call of duty, rather than simply successfully
    releasing software. As CD and DevOps ways of working become embedded, you will
    notice that you don't actually have what you would previously have called releases
    anymore (they are happening too quickly to notice each one), and therefore, you
    need to look at other ways to give rewards. For example, you can look at throwing
    a party when a business milestone is hit (such as when you reach the next millionth
    customer), when a new product successfully launches, or simply because it's sunny
    outside and the bosses want to say thank you.
  prefs: []
  type: TYPE_NORMAL
- en: CD and DevOps will change the way the business operates, and this fact needs
    to be recognized across all areas. As such, the way you reward people needs to
    change to instill the good behaviors previously mentioned (openness and honesty,
    innovation, accountability, and so on). This can be quite a shift for some businesses,
    and some might even need to implement new reward systems, solutions, or processes
    to cater for this.
  prefs: []
  type: TYPE_NORMAL
- en: One of the standard ways of rewarding people is via some kind of bonus or incentive
    scheme. This will also need to change, but first you need to recognize how the
    current system might foster the wrong behaviors and can stifle your implementation
    of CD and DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: Recognizing how Dev and Ops teams are incentivized can have an impact
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is a simple and obvious fact that some people might not instantly realize,
    but it is something that is very real and very widespread throughout the entire
    IT industry. This fact is that development teams are incentivized to deliver change,
    whereas operations teams are incentivized to ensure stability and system uptime,
    thus discouraging change. The following diagram highlights this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ff3a1915-e652-44d2-83e3-5854e3dc696f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There''s no simple answer, but there are some examples you can look at to ease
    the pain:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Incentive** | **Pros** | **Cons** |'
  prefs: []
  type: TYPE_TB
- en: '| Having the same incentives across both Dev and Ops. | If you are incentivizing
    to allow for continuous change, you will increase the potential for having CD
    and DevOps becoming the norm as everyone involved will focus on the same goal.
    | There is more risk as people might think that changing things quickly is more
    important than quality and system uptime. |'
  prefs: []
  type: TYPE_TB
- en: '| Including each side of the DevOps partnership in each other''s incentive
    schemes. | If some of the bonus of the software-engineering team is dependent
    on live platform stability, then they''ll think twice before taking a risk. If
    some of the operations-engineering team''s bonus is dependent on enabling CD,
    they will think twice before blocking changes just for the sake of it. | If the
    percentage of the swap is small, it might be ignored as the focus will remain
    on getting the majority of the bonus, which will still encourage the old behaviors.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Replacing the current incentive scheme with one that focuses on good behaviors
    and encourages a DevOps culture. | This has the potential to remove conflict between
    the engineering teams (Dev and Ops) and would encourage them to focus on what
    is important: delivering products customers want and need. | The reality is that
    it will be quite difficult to get a full agreement, and get it in place quickly,
    especially in a corporate environment. This doesn''t mean it''s not something
    worth pursuing. |'
  prefs: []
  type: TYPE_TB
- en: Whatever you do with regard to incentivizing and rewarding people, you need
    to instill a sense of positivity around change, while at the same time ensuring
    risk is reduced.
  prefs: []
  type: TYPE_NORMAL
- en: Embracing change and reducing risk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the same vein as fostering innovation and accountability at a grass-roots
    level, you need to work across the wider organization to ensure they accept the
    fact that change is a good thing and not something to be feared.
  prefs: []
  type: TYPE_NORMAL
- en: It is true to say that changing anything on the production platform—be it a
    new piece of technology, a bug fix to a 15-year old code base, an upgrade to an
    operating system, or a replacement storage array—can increase the risk of the
    platform, or parts thereof, failing. The only way to truly eliminate this risk
    is to change nothing, or simply switch everything off and lock it away, which
    is neither practical nor realistic. What is needed is a way to manage, reduce,
    and accept the risk.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing CD and DevOps will do just that. You have small incremental changes,
    transparency of what's going on, the team that built the change and the team that
    will support it working hand in hand, a sense of ownership and accountability
    from the individual(s) who actually wrote the code, and a focused willingness
    to succeed.
  prefs: []
  type: TYPE_NORMAL
- en: The major challenge here is getting everyone in the business to understand and
    embrace this as the day-to-day way of working. The most effective way to do this
    is to prove it.
  prefs: []
  type: TYPE_NORMAL
- en: Changing people's perceptions with pudding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting the grass roots to understand this concept should be quite simple when
    compared to other parts of the business that are, by their very nature, risk-averse.
  prefs: []
  type: TYPE_NORMAL
- en: 'I''m thinking here of the QA teams, senior managers, project and program managers,
    and so on. There are a few ways to convince them that risks are being controlled,
    but the best way is via using the proof of the pudding methodology:'
  prefs: []
  type: TYPE_NORMAL
- en: Pick a small change and ensure that it is well-publicized around the business
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Engage the wider business, focusing on the risk-averse, and ensure they are
    aware; also invite them to observe and contribute (team stand-ups, planning meetings,
    and so on)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the engineers working on the change are also aware that there is
    a heightened sense of observation for the change
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As the change is progressing, get the engineering teams involved to post regular
    blog entries detailing what they are doing, including stats and figures (code
    coverage, test-pass rate, and so on)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As the release goes through the various environments to production, capture
    as many stats and measurements as possible and publish them
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When all is done, pull all this into a blog post and a post-release report,
    then present them
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You might be thinking that this is a vast amount of work, and to be honest,
    it is if you follow the preceding steps for each and every change you make. What
    it does do is serve a purpose: it proves to the business that change is good,
    and risks can be controlled and managed. I recommend you follow these steps a
    few times to build trust and confidence—you can always refine later down the line.
    Another positive you will find is that it will foster a culture of diligence at
    a grass-roots level; if they are very aware that the business is keeping an eye
    on things, especially when things go wrong, then they will think twice before
    doing something silly.'
  prefs: []
  type: TYPE_NORMAL
- en: It should be noted that even though these steps will generate additional work,
    this is nothing compared to how some organizations currently function; changes
    are fully documented, and risks assessed, progress meetings are held, the project
    progress is publicized, and every meticulous detail is captured and documented.
    Is it any wonder that delivering software can be painful?
  prefs: []
  type: TYPE_NORMAL
- en: As with anything in life, if you make a small change, the risk is vastly reduced.
    If you repeat the process many times, the risk is all but removed and habits are
    formed. To follow this thread, if infrequent releases contain a large amount of
    change, the risk is large. Make it small and frequent, and the risk goes away.
    It's quite simple when you look at it this way.
  prefs: []
  type: TYPE_NORMAL
- en: As part of the proof of the pudding example, there was a lot of publicizing
    and blog-posting going on. This should not be seen as an overhead, but a necessary
    part of CD and DevOps adoption. Being highly visible is key to breaking down barriers
    and ensuring anyone and everyone is aware of what is going on.
  prefs: []
  type: TYPE_NORMAL
- en: Being transparent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we previously covered, being secretive about what you do and how you do it
    is not conducive to building an open, honest, and trust-based working environment
    or culture. If anyone and everyone can see what is going on, there should be no
    surprises. What we're looking for is a culture, and ways of working where change
    is good and frequent, individuals work together on common goals, the wider business
    trusts the product-delivery teams to deliver what is needed when it is needed,
    and the operations teams know what is coming. If there is a high degree of visibility
    across the entire process, anyone and everyone can see this happening, and more
    importantly, how effective it is.
  prefs: []
  type: TYPE_NORMAL
- en: You should look at the option of installing large screens around the office
    to display stats, facts, and figures. You might well have something like this
    set up already, but I suspect these screens display very technical information-system
    stats, CPU graphs, alerts, and so on. I also suspect that most of these reside
    in the technical team areas (development, operations, and so on). This is not
    a bad thing, it's just very specialized, and those of a nontechnical nature might
    ignore them or most likely don't even know that they exist. See whether you can
    move some of the screens to communal areas of the office or try to find some budget
    to buy new ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should also complement this highly technical information with very simple,
    easy-to-read-and-understand data related to your CD and DevOps process. You should
    be looking at displaying the following kinds of information:'
  prefs: []
  type: TYPE_NORMAL
- en: Number of releases this day, week, month, and year against the number yesterday,
    last week, last month, and last year
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The release queue and progress of the current release going through the process
    and who initiated it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Production system availability (current and historical)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you use an online scrum/Kanban board (such as Jira, Rally, or Trello), consider
    having this data displayed to show your backlog, work in progress, and work completed,
    along with related stats such as velocity and burndown
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The latest business information, such as share price, active user numbers, and
    the number of outstanding customer care tickets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last point is very important. You should publish, display, and advertise
    complementary information and data that is business-relevant, rather than simply
    focusing on technical facts and figures. This will help to heighten engagement
    and awareness outside of the technical teams. Having this information visible
    as you progress through your adoption and implementation of CD and DevOps will
    also provide proof that things are improving.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We covered quite a lot of ground in terms of the human side of implementing
    CD and DevOps throughout this chapter. Hopefully, it has been impressed upon you
    that the culture in which you operate dictates the success of CD and DevOps. When
    it comes to collaboration, you will find that trust, honesty, and openness are
    powerful tools that allow individuals to take responsibility for their actions.
    Rewarding good behaviors and removing blame will also help drive adoption.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you should have a plan and some insight into the importance of
    culture and behaviors when implementing CD and DevOps. In [Chapter 4](a19ac942-68bd-48a6-b59e-cd67ced91b65.xhtml),
    *Planning for Success*, we'll look at some practical things that will help as
    you drive forward.
  prefs: []
  type: TYPE_NORMAL
