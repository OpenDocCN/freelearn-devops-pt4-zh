- en: Avoiding Hurdles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up until this point in the book, we have mainly been focusing on the core tools,
    techniques and approaches you'll need in your toolbox to ensure that your adoption
    of CD and DevOps starts well and continues smoothly. We've also covered a few
    of the potential hurdles you'll come across along the way which you'll have somehow
    to get over.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll now apply a little more focus to these hurdles and looks at ways that
    they can be overcome, or at least ways to minimize the impact they have on pushing
    forward towards your goal and vision. Throughout this chapter we will be looking
    into:'
  prefs: []
  type: TYPE_NORMAL
- en: The common hurdles you may (will) encounter along the way
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where to apply your energies and who should get the most attention
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change is scary and how people react and perceive it should not be taken lightly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geography is problematic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Things will go wrong so you should prepare for that
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please take into account that what follows is by no means an exhaustive list,
    but there is a high probability that you'll encounter a good number of these hurdles
    along the way.
  prefs: []
  type: TYPE_NORMAL
- en: As with any major change you will encounter the occasional storm throughout
    your journey, so you need to understand how you can steer your way around or through
    them and ensure that they don't run the adoption aground, scupper your progress
    or completely run the adoption into the rocks—to use a nautical analogy for some
    reason.
  prefs: []
  type: TYPE_NORMAL
- en: What are the potential issues you need to look out for?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What you need to look for really does depend on your culture, environment, ways
    of working, and business maturity. I know that's a bit of a cop-out, but it is,
    unfortunately, true. We've already covered some of this, but it does need pointing
    out that if you have an unhealthy culture, environment, or behaviors, there may
    be more potential hurdles than you can shake a stick at. Which is why it's pretty
    important that you address those areas.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hopefully, this will not be the case and you will have a nice, smooth adoption,
    but just in case I''m being too optimistic, let''s go through some of the more
    obvious potential hurdles. The sorts of things you will encounter will include
    the likes of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Individuals who just don't see why things have to change and/or simply don't
    want to change how things are
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Individuals who want things to go quicker and are impatient for change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The way people react to change at an emotional level can help and/or hinder
    your progress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A lack of understanding or visibility of what you are trying to achieve may
    throw a wrench in the works when business priorities change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Red tape and heavyweight corporate processes grinding the process to a halt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geographically diverse teams and gaps/silos between then
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unforeseen issues with the tooling (technical and non-technical)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Skill gaps and resource constraints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Political upheaval due to leadership changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The list could be (and is) much longer, but there's only so much space in this
    book, so we'll focus on more obvious potential issues, which could, as previously
    mentioned, run the CD and DevOps adoption into shallow waters or, worse still,
    onto the rocks. We'll start by focusing on individuals and how they can have an
    impact, both negative and positive, on your vision and goal.
  prefs: []
  type: TYPE_NORMAL
- en: Dissenters in the ranks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although the word dissenters may seem like a rather powerful one to use, it
    is quite representative of what can happen should individuals decide what you
    are proposing and/or doing doesn't fit with their view of the world.
  prefs: []
  type: TYPE_NORMAL
- en: As with any new concept, idea, or change, you will have some people who are
    uncomfortable. Most will hopefully be rational, and, will try to understand and
    accept that things change. However, you will have some individuals who decide,
    for no seemingly-rational reason, that they are against what you are doing. The
    whys and wherefores can be examined and analyzed to the n^(th) degree, but what
    is important for you to realize is that this will happen. It's also important
    to understand that if a relatively small number of individuals are loud and disruptive
    enough, they can make a vast amount of unwanted noise and can distract your attention
    from your vision and goal. This is exactly what they want, so it's very important
    that you don't let them get their way.
  prefs: []
  type: TYPE_NORMAL
- en: As I say, you expend a vast amount of effort and time digging into the psychological
    reasons for this, but simply knowing and expecting this will happen is a good
    place to be. Forewarned is forearmed, and all that.
  prefs: []
  type: TYPE_NORMAL
- en: 'I should mention that this is nothing new, nor anything directly attributed
    to CD and/or DevOps adoption. If you look back at the early days of agile adoption,
    there are plenty of examples of this phenomenon. The individuals involved in the
    adoption of agile within an organization broadly fall into three types: a small
    number of innovators trailblazing the way, a larger number of followers who are
    either interested in this new way of doing things or can see the benefits and
    have decided to move in the direction that the innovators are going in, and the
    laggards who are undecided or not convinced it''s the right direction to go in.
    The following diagram illustrates these three types:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/facb7515-19ee-4a1c-a4dc-80efa57f18a8.png)'
  prefs: []
  type: TYPE_IMG
- en: The three types of individuals identified during the early years of agile adoption
  prefs: []
  type: TYPE_NORMAL
- en: The general consensus is that effort and attention should be focused on the
    innovators and followers*,* as this makes up the majority of the individuals involved
    and are proactively moving adoption forward. The followers who are moving up the
    curve may need some help to get over the crest, so more attention should be given
    to them. To focus on the *laggards* may take too much attention away from the
    majority, so the painful truth is that they either shape up or ship out—even if
    they're senior managers or leaders. This may seem rather brutal, but this approach
    has worked for a good number of years so there must be something in it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider our dissenters or laggards in terms of CD and DevOps adoption:
    what should you do? As previously pointed out, if they are loud and disruptive
    enough, they can make more than enough noise to derail things, but not for long.
    If the majority of the organization has bought into what you are doing—don''t
    forget that you are executing a plan based upon their input and suggestions—they
    will not easily become distracted, and therefore you should not become distracted.
    If you have managed to build up a good network across the business, use this network
    to reduce the noise and if possible convert the *laggards* into *followers*.'
  prefs: []
  type: TYPE_NORMAL
- en: If these *laggards* are in managerial or leadership positions, this may make
    things more difficult—especially if they are good at playing the political games
    that go on in any business. However, as stated previously, they will ultimately
    be fighting a losing battle as the majority will be behind the goal and vision.
    If you have an executive sponsor or someone influential within leadership who
    is in the innovators or followers camp, ask them to get involved. You just need
    to ignore the political games, be diligent, and stick to what you need to do.
  prefs: []
  type: TYPE_NORMAL
- en: One of the things on you need to do list is keep your eyes peeled and your ear
    to the ground so you will be able to tell when trouble is brewing. I would recommend
    that when this happens, you divert some effort to nip it in the bud and stop it
    becoming a major issue. The nip-it-in-the-bud part can be in the form of a simple,
    non-confrontational face-to-face discussion with the potential troublemaker over
    a coffee—that way, the *dissenter* feels that they are being listened to and you
    get an understanding of what the noise is all about. As a last resort, a face-to-face
    discussion with their boss might do the trick. Don't resort to email tennis, as
    this does not work!
  prefs: []
  type: TYPE_NORMAL
- en: All in all, you should try wherever possible to deal with dissenters as you
    would the naughty child in the classroom; don't let them spoil things for everyone,
    don't give them all of the attention, and use a calm, measured approach. After
    a while, people will stop listening to them or get bored with what they are saying
    anyway (especially if it's not very constructive).
  prefs: []
  type: TYPE_NORMAL
- en: No news is no news
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Something that may increase the risk of *dissenters* spoiling the party is a
    lack of visible or demonstrable progress in terms of the CD and DevOps adoption,
    or, to be more concise, the perceived lack of visible or demonstrable progress.
    It may be that you're busy with some complex process change or implementing tooling
    or focusing on virtualizing the legacy solution, and, as such, there is a perceived
    lull in visible activity.
  prefs: []
  type: TYPE_NORMAL
- en: If you have individuals within your organization who are very driven and delivery-focused,
    they may take this lull as a sign of the adoption faltering or they may even think
    that you're finished. As we covered previously, being highly visible, even if
    there's not a vast amount going on, is very important. If people can see progress
    being made, they will continue to follow. If there is a period of perceived inaction,
    then the followers may not know what way you are heading and may start taking
    notice of the *dissenting* voices.
  prefs: []
  type: TYPE_NORMAL
- en: Any form of communication and/or progress update can help stop this from happening—even
    if there's not a vast amount to report, the act of communication indicates that
    you are still there and still progressing toward the goal. The no news is good
    news analogy is wrong; no news is no news.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see what our personas can do to help:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Good approach** | **Not-so-good approach** |'
  prefs: []
  type: TYPE_TB
- en: '| Victoria (the Veep) should publicly be seen and heard as a innovator (or
    follower) and should openly encourage her department to decide where they stand
    without fear of retribution | Victoria (the Veep) opening accepts without question
    the voices of the laggards and / or announces she is one of them |'
  prefs: []
  type: TYPE_TB
- en: '| Stan (the manager) should back up Victoria''s message and ensure he understands
    who the laggards are within his peer group and team(s) and ensure their voices
    don''t become too loud | Stan (the manager) ignores the noise generated by the
    laggards and the impact that has on the innovators and followers |'
  prefs: []
  type: TYPE_TB
- en: '| Devina (the developer) and Oscar (the Ops guy) should also understand where
    they sit and be mindful of noise from laggards that could easily sway the innovators
    and followers in their peer group | Devina (the developer) and Oscar (the Ops
    guy) simply sit in their bubble of blissful ignorance and leave it to the leadership
    to sort out |'
  prefs: []
  type: TYPE_TB
- en: We briefly covered the fact that some people will be uncomfortable with change
    and they may react in unexpected ways. We'll now look into how change can impact
    individuals in different ways and what you need to be aware of.
  prefs: []
  type: TYPE_NORMAL
- en: The change curve
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s get one thing out in the open, and this is important: you need to recognize
    and accept that the identification of a problem and subsequent removal of it can
    be quite a big change. You have been working with the business to identify a problem
    and you are now working to remove it. This is change, pure and simple.'
  prefs: []
  type: TYPE_NORMAL
- en: Earlier in the book, we stated that the brave men and women of ACME systems
    who helped the business adopt DevOps and CD ways of working were a catalyst for
    change. This wording was intentional, as change did come about for the ACME systems
    team—a very big change as it turned out. The adoption of CD and DevOps should
    not be taken lightly, and the impact on individuals should not be taken lightly;
    even if they originally thought it was the best thing since sliced bread.
  prefs: []
  type: TYPE_NORMAL
- en: Those of you who have been in, or are currently in, management or leadership
    roles may well understand that change can be seen as both a positive and negative
    thing, and sometimes it can be taken very personally, especially where a change
    directly impacts individuals and their current roles. How individuals perceive
    change is normally at an emotional level rather than a logical, rational level.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at some fundamentals in relation to how humans deal with change.
  prefs: []
  type: TYPE_NORMAL
- en: Any change, large or small, work-related or not, can impact individuals in many
    different ways and, as mentioned, at many different levels. Some people welcome
    and embrace change, some are not fazed by it and accept it as something that happens,
    some are concerned and worried by it but also open to see what happens, and some
    are downright hostile and see change as something personal. More importantly,
    some people are all of these—not necessarily all at the same time, of course.
    If one is mindful of these facts before one implements change, there's a good
    chance that one will have a clearer idea of what challenges to overcome during
    the implementation to ensure it is successful.
  prefs: []
  type: TYPE_NORMAL
- en: There has been much research into the subject of how people respond to change,
    and many papers have been published by learned men and women over the years. I
    don't suggest for one minute that I know all there is to know on this subject,
    but there is some degree of common sense required when it comes to change, or
    transition as it is sometimes called, and there are some very obvious and understandable
    traits to take into account.
  prefs: []
  type: TYPE_NORMAL
- en: One of my preferred ways to visualize and understand the impact of change is
    something called the change or transition curve. This depicts the stages an individual
    will go through as a change/transition is being implemented.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram is a very good example of a change/transition curve:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2688db8a-5522-446a-8d11-57f3ff877047.png)'
  prefs: []
  type: TYPE_IMG
- en: John Fisher's personal transition curve diagram courtesy of John Fisher
  prefs: []
  type: TYPE_NORMAL
- en: 'You can clearly see that as change is being planned, discussed, or implemented,
    people will go through several stages. We will not go through each stage in detail
    (you can read through this at your leisure at [https://www.c2d.co.uk/techniques/process-of-transition/](https://www.c2d.co.uk/techniques/process-of-transition/));
    however, there are a few nuggets of information that are very pertinent when looking
    at the adoption of CD and DevOps:'
  prefs: []
  type: TYPE_NORMAL
- en: An individual may go through this curve many times, even at the very early stages
    of change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Everyone is different and the speed at which they go through the curve is unique
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You and those enlightened few around you will also go through this curve
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Those that do not/cannot come out of the dip may need more help, guidance, and
    leadership
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even if someone is quiet and doesn't seem fazed, they will inevitably be at
    some stage in the curve, so they shouldn't be ignored—it's not just the vocal
    ones to look out for
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The long and short of it is that individuals are just that, they will be laggards
    or followers or innovators, and they will also be somewhere along the change curve.
    The leaders and managers within your organization need to be very mindful of this
    and ensure that people are being looked after. You also need to be mindful of
    this, not least because this will also apply to you.
  prefs: []
  type: TYPE_NORMAL
- en: You should also consider that individuals who started the project as followers
    or even innovators may go through the change curve more than once as the initial
    euphoria gives way to the realization that things are actually changing. This
    will explain why some individuals act in one way at the beginning, yet they change
    their approach and outlook as you go through the execution of the plan and vision.
  prefs: []
  type: TYPE_NORMAL
- en: At a personal and emotional level, change is both good and bad, exciting and
    scary, challenging and daunting, welcomed and avoided. It all depends how an individual
    feels at any given point in time. CD and DevOps is potentially a very big change;
    therefore, emotions will play a large part. If you are aware of this and ensure
    you look for the signs and react accordingly, you will have a much better time
    of it. Ignore this and you will have one hell of a battle on your hands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see what our personas can do to help:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Good approach** | **Not-so-good approach** |'
  prefs: []
  type: TYPE_TB
- en: '| Victoria (the Veep) should be very aware of the impact of change upon her
    organization and ensure she publicly acknowledges this. She should also consider
    engaging with her HR team to assist where needed | Victoria (the Veep) simply
    sees CD and DevOps adoption as another project that doesn''t warrant any special
    attention |'
  prefs: []
  type: TYPE_TB
- en: '| Stan (the manager) should back up Victoria''s message and ensure he carves
    out time to help, support and assist his team(s) throughout | Stan (the manager)
    mirrors Victoria''s view and ignores the impact the adoption of CD and DevOps
    has on his team(s) |'
  prefs: []
  type: TYPE_TB
- en: '| Devina (the developer) and Oscar (the Ops guy) should accept that things
    will be changing and that their peers may struggle with this and may well need
    support | Devina (the developer) and Oscar (the Ops guy) simply sit in their bubble
    of blissful ignorance and leave it to the leadership to sort out |'
  prefs: []
  type: TYPE_TB
- en: On that light note, we'll move onto the subject of what to do about those people
    within your organization who are not involved in your journey or may not even
    be aware that it is ongoing. We'll call them the outsiders.
  prefs: []
  type: TYPE_NORMAL
- en: The outsiders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The percentage of those involved with the adoption of CD and DevOps will largely
    depend on the overall size of your organization. If you are a start-up, the chances
    are that pretty much everyone within the organization will be involved. If you
    are an SME (small-to-medium enterprise), there is a good chance that not everyone
    within your organization will be involved. If you are working within a corporate
    business, the percentage of those actively involved will be vastly smaller than
    those not.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram illustrates how distance from the core team working on
    the CD and DevOps adoption correlates directly to the knowledge of what''s actually
    going on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7656cf69-22ac-458e-8423-be08bcd7f84d.png)'
  prefs: []
  type: TYPE_IMG
- en: Individuals closer to the core team will have a greater knowledge of what is
    going on
  prefs: []
  type: TYPE_NORMAL
- en: Those whose involvement is further out from the day-to-day will have little
    or no idea of what is going on. This may (and will) lead to people on the outskirts,
    through this lack of knowledge, inadvertently putting hurdles in the way of progress.
    It should be pointed out that this is nothing new and does not specifically apply
    to the adoption of CD and DevOps; this is a reality for any far-reaching business
    change project. If individuals, especially those in decision-making roles, don't
    know what is going on, then CD and DevOps will not be one of the first things
    they consider.
  prefs: []
  type: TYPE_NORMAL
- en: To give you an example, let's take a look at ACME systems and see how this situation
    impacted their implementation.
  prefs: []
  type: TYPE_NORMAL
- en: During phase 2.0 of their evolution, ACME systems became part of a large corporate.
    They ended up as a satellite office, the corporate HQ being overseas and, on the
    whole, were left to their own devices. They beavered away for a while and started
    to examine and implement CD and DevOps. They were doing so, when viewed at a global
    corporate level, in isolation. Yes, they were making far-reaching and dramatic
    changes to the ACME systems organization, but they were a small cog in a very
    big wheel. No one outside of the ACME systems offices had much visibility or in-depth
    knowledge of what was going on. Consequently, when a new, far-reaching, corporate
    strategic plan related to the global downsizing of the operations organization
    was announced, little or no consideration was given to what ACME systems were
    up to, as, in all honesty, no one making the decisions really knew. As a result,
    the progress of the CD and DevOps implementation very quickly ground to a halt.
    As luck would have it, once the dust had settled, the need for DevOps became even
    greater than it was originally, which lead to a greater focus and acceleration
    in adoption.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of ACME systems, the impact turned out to be positive with respect
    to the CD and DevOps adoption and actually provided an additional boost. If you
    experience wide-reaching changes during your journey, and people are ignorant
    of what you're doing, your story may not end so well. Bear that in mind.
  prefs: []
  type: TYPE_NORMAL
- en: 'The moral of the story is this: not only should you keep an eye on what is
    happening close to home, but you should also keep an eye on what is happening
    in the wider organization. We''ve already looked at how important it is to communicate
    what you are doing and to be highly visible. This communication and visibility
    should not be restricted to those immediately involved in the CD and DevOps adoption;
    you should try to make as many people aware as possible. If you are working within
    a corporate environment, you will no doubt have some sort of internal communications
    team who publish regular news articles to your corporate intranet or newsletter.
    Get in touch with these people and get them to run a story on what you are doing.
    A good bit of public relations will help your cause and widen the circle of knowledge.'
  prefs: []
  type: TYPE_NORMAL
- en: This may seem like quite a lot of work for little gain, but you may be surprised
    how much benefit it can bring. Say, for example, you get the article written and
    published and it is read by the CEO or an SVP who then decides to visit and see
    what all the fuss is about. That is a major moral boost and good PR. Not only
    that, but it may help with your management dissenters—if they see the high-ups
    recognizing what you are doing as a positive thing, they may reconsider their
    position.
  prefs: []
  type: TYPE_NORMAL
- en: We're primarily considering outsiders as individuals outside of your immediate
    sphere of influence who are ignorant of what you are doing and where you're heading.
    You may have others who are well aware, but are either restricted by or hiding
    behind corporate red tape and/or bureaucracy. Let's spend some time looking into
    this potential hurdle and what can be done to overcome it.
  prefs: []
  type: TYPE_NORMAL
- en: Corporate guidelines, red tape, and standards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The size and scale of this potential hurdle is dependent on the size and scale
    of your organization and the market in which you operate. If you work within the
    service sector and have commercial obligations to meet certain SLAs, or you work
    within a financial institution and have regulatory guidelines to adhere to, you
    will be in some ways hampered in how you implement and adopt CD and DevOps. This,
    as they say, comes with the territory.
  prefs: []
  type: TYPE_NORMAL
- en: What you need to do is work with those setting and/or policing the rules to
    see what wiggle room you have. You may find that some of the rules and guidelines
    set in place for the business are actually overkill and have only been implemented
    because it was easier to stick to what it said in the book than it was to refine
    it to fit the business needs.
  prefs: []
  type: TYPE_NORMAL
- en: The need for such rules, guidelines, and policies mainly revolves around change-management
    and auditability. In simple terms, they offer a safety gate and a way to ascertain
    what has recently changed should problems occur. You may find that those managing
    or policing these rules, guidelines, and policies will consider CD and DevOps
    to be incompatible with their ways of working. This may be true, but that doesn't
    mean it's correct.
  prefs: []
  type: TYPE_NORMAL
- en: During the investigation stage, their organization/department may have been
    highlighted as an area of waste within the product-delivery process (I would put
    money on it), so they may be defensive about change. It may even be the case that
    they simply don't know what they can change without breaking a rule or corporate
    policy. Work with these people and help them understand what CD and DevOps is
    about, and help them research what parts of their process they can change to accommodate
    it. Do not simply ignore them and break the rules, as this will catch up with
    you down the road and could completely derail the process. Open, honest, and courageous
    dialogue is the key.
  prefs: []
  type: TYPE_NORMAL
- en: That said, open and honest dialogue may be hindered by geography, so let's look
    at how we can address that.
  prefs: []
  type: TYPE_NORMAL
- en: Geographically diverse teams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We previously touched on the subject of setting up an open and honest physical
    environment to help reinforce open, honest, and collaborative ways of work. This
    is all well and good if the teams are collocated, however trying to recreate this
    with geographically diverse teams can be a tricky problem to solve. It all depends
    on the time zone differences and, to some extent, the differences in culture.
  prefs: []
  type: TYPE_NORMAL
- en: I use the word culture again here on purpose. As previously stated, culture
    is very important to the success of CD an DevOps adoption, and we focused on corporate
    and organizational culture. When it comes to things that can and will trip you
    up, geographical, geo-political, or social-group culture differences can be high
    on the list. When you have teams or team members involved that don't necessarily
    share the same outlook or values as you (or the majority of the organization)
    do, there is a risk that they could easily become dissenters, or at the very least
    innovators or followers who truly believe they are contributing but may have interpreted
    your intentions in their own way and may actually end up hindering. You therefore
    need to pay attention and ensure they feel as if they are treated the same as
    physically-present team members.
  prefs: []
  type: TYPE_NORMAL
- en: 'That segues quite nicely to physical presence. Not having a physical presence
    is always a barrier. There have been many studies, and no doubt will be more,
    on the subject of remote versus collocated teams, and none seem to point to which
    method produces the best results. What these studies do sometimes omit is how
    some external factors also help (or hinder) remote versus collated teams: organizational
    maturity, cultural synergies, shared experience and knowledge, and common language.
    If some of these factors have a negative impact on how collocated teams work together,
    there''s a strong chance that these negatives will be magnified when you add remote
    teams into the mix.'
  prefs: []
  type: TYPE_NORMAL
- en: It should be noted that most research has focused on the Dev side of the DevOps
    partnership. There is sometimes an acceptance that having Dev and Ops teams separated
    is the norm, however if you consider that DevOps is most effective when both are
    working closely together, then you should be applying the whole geographically-diverse
    teams thing to both.
  prefs: []
  type: TYPE_NORMAL
- en: 'From experience, the most effective and efficient teams are collocated simply
    due to the fact that humans are social creatures and therefore tend to prefer
    having other humans nearby to work with, talk to, argue with, or simply share
    a joke with. Unless you have a budget that allows for everyone to work in the
    same physical location, you need to look at ways to replicate this for teams and
    team members who are not physically in the same location. Here are a few things
    that you should consider to help remove the barrier:'
  prefs: []
  type: TYPE_NORMAL
- en: Try to think of all team members as simply that—members of the same team who
    should be treated equally.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure both local and remote teams have regular (ideally daily) teleconference
    (ideally video-conference) calls.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you're using scrum (or a similar methodology) and decide to have a daily
    scrum of scrums, get the remote teams(s) to join as well—even if you call them
    on your cellphone and have them on speakerphone.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up a Skype (or equivalent software) PC within both office spaces and use
    them as a virtual wall/window between the offices. These should be left on during
    norm office hours so team members on each side of the virtual wall/window can
    simply walk up and have a face-to-face conversation as if they were in the same
    room.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If budget allows, try to get people swapped across the offices via secondments,
    placements, and so on for short periods of time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not rely on email as a form of collaboration/communication, instead invest
    in collaboration tools (we covered that previously).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another potential barrier to be mindful of is time zones. This can (will) wreak
    havoc on things such as team meetings and daily stand-ups (from experience, these
    normally happen first thing in the morning, which may be problematic if the teams
    are on different sides of the globe). With some creative thinking, you can overcome
    these small issues, for example pick "first thing in the morning" based upon a
    time zone midway between the teams.
  prefs: []
  type: TYPE_NORMAL
- en: Coming back to culture again, there is another thing to take into account. In
    some parts of the world, the culture may not be the fast and loose western culture
    where everyone has a voice and isn't afraid to use it. Instilling openness, honesty,
    and transparency may be more difficult for some and you should be mindful of this.
    I would suggest you work with the local HR or management team, explain what you're
    trying to do, and see how they can with this.
  prefs: []
  type: TYPE_NORMAL
- en: We'll now look at what you should do if you encounter failure during the execution
    of your goal and vision.
  prefs: []
  type: TYPE_NORMAL
- en: Failure during the evolution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you go along your journey, things will occasionally go wrong, this is inevitable
    and is nothing to be afraid or ashamed of. There may be situations that you didn't
    foresee, or steps in the existing process that were not picked up during the elephant
    exposure. It might be as simple as a problem within the chosen toolset, which
    isn't doing what you had hoped it would or is simply buggy.
  prefs: []
  type: TYPE_NORMAL
- en: Your natural reaction may be to hide such failures or at least not broadcast
    the fact that a failure has occurred. This is not a wise thing to do. You and
    your team are working hard to instill a sense of openness and honesty, so the
    worst thing you can do is the exact opposite. Think back to what we covered previously
    in relation to failing fast in terms of finding defects; the same approach works
    here as well.
  prefs: []
  type: TYPE_NORMAL
- en: Admitting defeat, curling up in a fetal position, and lying in the corner whimpering
    is also not an option. As with any change, things go wrong, so review the situation,
    review your options, and move forward. Once you have a way to move around or through
    the problem, communicate this. Ensure you're candid about what the problem is
    and what is being done to overcome it. This will show others how to react and
    deal with change—a sort of lead-by-example.
  prefs: []
  type: TYPE_NORMAL
- en: You might be concerned that admitting failures might give the laggards more
    ammunition to derail the adoption; however, their win will be short-lived once
    the innovators and followers have found a solution. Hold fast, stand your ground,
    and have faith.
  prefs: []
  type: TYPE_NORMAL
- en: If you're using agile techniques such as scrum or Kanban to drive the CD and
    DevOps adoption, you should be able to change direction relatively quickly without
    impeding progress.
  prefs: []
  type: TYPE_NORMAL
- en: Okay so this is all a very **positive mental attitude** (**PMA**) and may be
    seen by some of you who are more cynical than the rest as management hot air and
    platitudes, so let's look at another example.
  prefs: []
  type: TYPE_NORMAL
- en: 'ACME systems implemented a deployment transaction model (covered in a previous
    chapter) to manage dependencies and ensure only one change went through to the
    production system at any one point in time. This worked well for a while, but
    things started to slow down. Automated integration tests that were previously
    working started to fail intermittently, defects were being raised in areas of
    functionality that were previously seen as bulletproof. This slowdown started
    to impact the wider R&D team''s ability to deliver and the noise level started
    to rise, especially from the vocal laggards. Open and honest discussions between
    all concerned ensued and, after much debate, it transpired that the main source
    of the problem was a very simple dependency, and change management was not keeping
    up with the speed of delivery. In essence, there was no sure way of determining
    which software asset change would be completed before another software asset change
    and there was no simple way to try out different scenarios in terms of integration.
    What it boiled down to was this: if changes within asset A had a dependency on
    changes within asset B, then asset B needed to go live first to allow for full
    integration testing. However, if asset A was ready first, it would have to sit
    and wait—sometimes for days or weeks. The deployment transaction was starting
    to hinder CD.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a reminder of the simple process that ACME systems called the deployment
    transaction:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ae9bc373-1920-42b4-bbef-1fe417396c2d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You''ll recall that everyone had agreed that the deployment transaction worked
    well and provided a working alternative to dependency hell. When used in anger,
    however, it exposed a flaw that started to cause real and painful problems. Even
    if features could be switched off through feature flags, there was no way to fully
    test integration without having everything deployed to production and the like
    live environment. This had not been a problem previously, as the speed of releases
    had been very slow and assets had been clumped together. ACME systems now had
    the ability to deploy to production very quickly and now had a new problem: which
    order to deploy? Many discussions took place and complicated options were looked
    at, but in the end the solution was quite simple: move the boundary of the deployment
    transaction and allow for full integration testing before assets went to production.
    It was then down to the various R&D teams to manually work out in which order
    things should be deployed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram depicts the revised deployment transaction boundary:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c6eca6ea-ac74-4e6e-aa16-caeeee6a0840.png)'
  prefs: []
  type: TYPE_IMG
- en: So ACME had a potential showstopper, which could have completely derailed their
    CD and DevOps adoption. The problem became very visible and many questions were
    asked. The followers started to doubt the innovators, and the laggards became
    vocal. With some good, old-fashioned collaboration, and open and honest discussions,
    the issue was quickly and relatively easily overcome.
  prefs: []
  type: TYPE_NORMAL
- en: Again, open and honest communication and courageous dialogue is key. If you
    keep reviewing and listening to what people are saying, you have a much better
    opportunity to see potential hurdles before they completely block your progress.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see what our personas can do to help:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Good approach** | **Not-so-good approach** |'
  prefs: []
  type: TYPE_TB
- en: '| Victoria (the Veep) publicly acknowledges that things can and will go wrong
    at points in the adoption and should encourage her department to work together
    to iron out any issues collaboratively without fear of retribution | Victoria
    (the Veep) does not tolerate any form of failure and is openly critical of problems
    that occur |'
  prefs: []
  type: TYPE_TB
- en: '| Stan (the manager) should back up Victoria''s message and ensure he carves
    out time to help, support and assist his team(s) when needs be | Stan (the manager)
    sees failure as a sign of incompetence and stamps it out at every opportunity.
    Anyone who raises problems or issues are told to keep them quiet |'
  prefs: []
  type: TYPE_TB
- en: '| Devina (the developer) and Oscar (the Ops guy) should not be afraid of failure
    when trying something new or risky. When problems surface they should work together
    to solve them and ensure their leadership are fully aware | Devina (the developer)
    and Oscar (the Ops guy) simply sit in their bubble of blissful ignorance and leave
    it to the leadership to sort out |'
  prefs: []
  type: TYPE_TB
- en: Another thing that may scupper your implementation and erode trust is inconsistent
    results.
  prefs: []
  type: TYPE_NORMAL
- en: Processes that are not repeatable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a tendency for those of a technical nature to automate everything they
    touch, such as the automated building of an engineer's workstation, automated
    building of software, and automated switching on of the coffee machine when the
    office lights come on. This is nothing new and there is nothing wrong with this
    approach as long as the process is repeatable and provides consistent results.
    If the results are not consistent, others will be reluctant to use the automation
    you spent many hours, days, or weeks pulling together.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to CD and DevOps, the same approach should apply, especially when
    you're looking at tooling. You need to trust the results that you are getting
    time and time again.
  prefs: []
  type: TYPE_NORMAL
- en: Some believe that internal tooling and labor-saving solutions or processes that
    aren't out in the hostile customer world don't have to be of production quality
    as they're only going to be used by people within the business mostly by techies.
    This is 100 percent wrong.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at a very simple example: if you''re a software engineer, you will
    use an IDE to write code and you will use a compiler to generate the binary to
    deploy, and if you''re a **database administrator** (**DBA**), you''ll use a SQL
    admin program to manage your databases and write SQL. You will expect these tools
    to work 100 percent of the time and produce consistent and repeatable results;
    you open a source file and the IDE opens it for editing, and you execute some
    SQL and the SQL admin tool runs it on the server. If your tools keep crashing
    or produce unexpected results, you will be a bit upset (putting it politely) and
    will no doubt refrain from using said tools again. It may drive you insane.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Insanity: doing the same thing over and over again and expecting different
    results.'
  prefs: []
  type: TYPE_NORMAL
- en: '*-Albert Einstein*'
  prefs: []
  type: TYPE_NORMAL
- en: The same goes for the tools (technical and non-technical) you build and/or implement
    for your CD and DevOps adoption. These tools have to be as good as (if not better)
    the software your teams are creating. The users of the tool/processes implemented
    need to be confident that when they do the same actions over and over again, they
    get the same results. As that confidence grows, so does the trust in the tool/process.
    Ultimately, the tool/process will start to be taken for granted and people will
    use it without a second thought.
  prefs: []
  type: TYPE_NORMAL
- en: Consequently, people will also trust the fact that if the results differ from
    the last run, something bad has been introduced (for example, a software bug has
    been created) that needs immediate attention.
  prefs: []
  type: TYPE_NORMAL
- en: Consider how much confidence and trust will be eroded if the tool/process continually
    fails or provides different and/or unexpected results. You therefore need to be
    very confident that the tooling/processes are fit for purpose.
  prefs: []
  type: TYPE_NORMAL
- en: We have already covered the potential hurdles you'll encounter in terms of corporate
    guidelines, red tape, and standards. Just think what fun you will have convincing
    the gatekeepers that CD and DevOps is not risky when you can't provide consistent
    results for repeatable tasks. Okay, maybe fun is not the correct word; maybe pain
    is a better one.
  prefs: []
  type: TYPE_NORMAL
- en: Another advantage of consistent, repeatable results comes into play when looking
    at metrics. If you can trust the fact that to deploy the same asset to the same
    server takes the same amount of time each time you deploy it, you can start to
    spot problems (for example, if it starts taking longer to deploy, there may be
    an infrastructure issue or something fundamental has changed in the configuration).
  prefs: []
  type: TYPE_NORMAL
- en: All in all, it may sound boring and not very innovative, but with consistent
    and repeatable results, you can stop worrying about the mundane and move your
    attention to the problems that need solving, such as the very real requirement
    to recruit new people into a transforming or transformed business.
  prefs: []
  type: TYPE_NORMAL
- en: Bridging the skills gap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This might not seem like a big problem, but as the organization's output increases,
    the efficiency grows, and the organization starts to be recognized as one that
    can deliver quality products quickly (and it will), then growth and expansion
    may well become a high priority—this, I think you'll agree, is a good problem
    to have. You now need to find individuals who will work in the new way and exhibit
    the behaviors that everyone has worked so hard to instill and embed throughout
    the organization. This is not as easy as you might think and it will take some
    time to find the people that not only have the skills, experience, and potential
    but also the mindset you're looking for. Simply adding *experience in CD and DevOps*
    to a job spec will not produce the results you want; even though CD and DevOps
    have been a thing for some time, there aren't that many people out there with
    the sort of experience you'll be looking for.
  prefs: []
  type: TYPE_NORMAL
- en: The other big problem you'll have is the level of knowledge throughout the recruitment
    and talent-acquisition world in terms what CD and DevOps actually is. They may
    have a rough idea based upon tech press and some conferences, but they won't know
    exactly what you are looking for. It's therefore very important to embark on more
    knowledge-sharing with those involved in your recruitment process to ensure that
    they understand what you're looking for (or at least have a grasp of what you're
    not looking for). You may need to do this number of times until it sinks in.
  prefs: []
  type: TYPE_NORMAL
- en: 'In terms of candidate-vetting, there are few things you can do to filter out
    those who get CD and DevOps and those who don''t. For example, if you have a candidate
    whose main experience is in the Ops field, throw in some traditional development-focused
    questions, or for a developer ask them some questions traditionally targeted at
    Ops candidates. Mixing things up will give you a more rounded view of their grasp.
    One of my favorite interview questions is very simple:'
  prefs: []
  type: TYPE_NORMAL
- en: As a software engineer, how would you feel if your code were running in the
    production environment being used by millions of customers 10 minutes after you
    commit it to source control?
  prefs: []
  type: TYPE_NORMAL
- en: The question is worded specifically to get an honest emotional response; the
    key word here being feel. You will be surprised by the responses to this; for
    some, it simply stops them in their tracks, some will be shocked at such a thing
    and think you're crazy to suggest it, and some will think it through and realize
    that although they have never considered it, they quite like the idea. If, however,
    the response is 10 minutes? That's far too slow, you may be onto a winner.
  prefs: []
  type: TYPE_NORMAL
- en: Take your time and ensure you pick the right people. You need innovators and
    followers more than you need laggards.
  prefs: []
  type: TYPE_NORMAL
- en: We'll end this section with something that most wouldn't see as a problem, but
    can stop CD and DevOps adoption in its tracks, which is changes in leadership.
  prefs: []
  type: TYPE_NORMAL
- en: Changes in leadership
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each of us has, at some point in time, worked somewhere that has gone through
    a change of leadership. Normally, the higher up the food chain the change is,
    the more potentially disruptive that change will be. For example, a new CEO will,
    over a period of a few months, change the leadership reporting to them via hiring
    and firing or via organizational realignment (firing by moving chairs around).
    They will also have some new vision and business drivers to increase some business
    metric, which is why they got the job.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the time, those lower down the food chain don't see an impact, at least
    not for a while, however, impact will come. You can guarantee it.
  prefs: []
  type: TYPE_NORMAL
- en: When you're looking at something that can be quite radical, such as the adoption
    of CD and DevOps, there is a massive risk that a decision in a board room could
    completely ruin things, especially in the early stages of adoption. As stated
    previously, CD and DevOps are more about ways of working, behaviors, and culture
    than box-ticking and business metrics. That said, there is a reason for the decision
    to adopt CD and DevOps—to improve the ability to deliver quality software solution
    quickly and repeatedly. This will not go away simply because an org chart has
    been updated.
  prefs: []
  type: TYPE_NORMAL
- en: Your best approach is to keep doing what you're doing and keep being open, honest,
    and transparent. If you have an executive sponsor who is still in situ, encourage
    them to go back on the charm offensive. Don't be afraid to cover old ground and
    reiterate the reasoning and history behind the decision. In addition, make sure
    you share good news stories and ensure that the new leaders are included in your
    regular communications. In essence, do whatever is needed to keep things rolling
    and ensure progress continues.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What new things have we learned throughout this chapter? The main message is
    that change is not something to be afraid of, is something that does and will
    happen and that there will be hurdles that you will experience along the way.
    As long as you plan for and are aware of this fact and you're able help and guide
    those involved and impacted by change get through it you should be in a relatively
    good place. When hidden boulders become apparent, be that in terms of communications,
    red tape, bureaucracy, hiring or geography, you will have some ideas how to overcome
    them. Another thing you have learned is that people, be they within the inner
    circle or far removed, are key to your success.
  prefs: []
  type: TYPE_NORMAL
- en: There will no doubt be other hurdles, hazards, and potential blockers along
    the way that have not been included within these pages but as long as you're prepared
    you will be successful. Talking of success, we'll now move onto the measurement
    of success and why it is so important—something we'll cover within the next chapter.
  prefs: []
  type: TYPE_NORMAL
