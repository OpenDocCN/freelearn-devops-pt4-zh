- en: Expanding Your Opportunity Horizon
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拓宽你的机会视野
- en: As you may have guessed by this point, we have largely been focused on traditional
    software delivery within a traditional, established business that delivers traditional
    web/server software-based solutions and products rather than the young, trendy,
    and innovative start-up software businesses out there, the reason being that they
    normally have the agility and opportunity to be creative in the way they deliver
    software built into their DNA. Most tech startups—especially those formed in the
    last few years—normally build CD and DevOps into their normal day-to-day ways
    of working.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所猜到的，我们的关注点主要集中在传统企业中的传统软件交付上，这些公司提供的是传统的Web/服务器软件解决方案和产品，而非那些年轻、时髦且富有创新精神的初创科技公司。原因在于，初创企业通常具备内在的敏捷性和创新机会，能够灵活交付软件。大多数科技初创企业——尤其是近几年成立的——通常会将CD和DevOps融入到他们的日常工作方式中。
- en: It may be that you currently work within such a hipster business, but CD and
    DevOps wasn't built into the ways of working from the start. That shouldn't be
    a problem, as this book should have given you some good ideas and guidance with
    regards to addressing this gap.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你目前就在这样一家时尚企业工作，但CD和DevOps并未从一开始就融入其工作方式中。这不应成为问题，因为本书应能为你提供一些解决这一差距的好点子和指导。
- en: The vast majority of businesses that deliver software on a day-to-day basis
    are not so lucky—the intention might be there, but the will to act might be lacking.
    Hence, the focus is on the traditional. There's a strong possibility that you
    yourself work within one of these traditional businesses.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 绝大多数日常交付软件的公司并没有那么幸运——尽管有意图，但可能缺乏行动的意愿。因此，关注点依然停留在传统模式上。很有可能你自己也在其中一家传统公司工作。
- en: Having followed the advice provided in this book and successfully adopted CD
    and DevOps, there's a very good chance that you would have caught up with the
    whippersnappers and your business is able to be just as agile and creative in
    how it delivers software, and maybe even more so.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经遵循了本书中提供的建议，并成功采用了CD和DevOps，那么你很可能已经赶上了那些年轻的天才，你的业务在交付软件的方式上能够同样具有敏捷性和创造力，甚至可能更具优势。
- en: At the tail end of [Chapter 8](c2437827-f7ff-49a7-8ee7-5bdd39c5ddbe.xhtml),
    *You Are Not Finished Just Yet*, we turned our focus onto *you* and how *you*
    could take your newfound knowledge, skills, and experience forward, beyond the
    initial goal of embedding the CD and DevOps ways of working within your organization.
    Let's look at what this could actually mean.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](c2437827-f7ff-49a7-8ee7-5bdd39c5ddbe.xhtml)的尾声部分，*你还没有完成*，我们将焦点转向了*你*，以及*你*如何将新获得的知识、技能和经验继续推进，超越最初将CD和DevOps工作方式嵌入组织的目标。让我们来看一下这实际上意味着什么。
- en: What about me?
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 那我呢？
- en: Let's presume at this point in the narrative that you have been instrumental
    in the successful adoption of CD and DevOps and have delivered what you set out
    to do. Things are working well, even better than you envisaged. The business is
    all grown up, can tie its own shoe laces, and doesn't need you to hold its hand
    anymore—well, not quite.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 假设在这个故事的叙述中，你在CD和DevOps的成功采纳中发挥了重要作用，并达成了你最初设定的目标。事情进展顺利，甚至比你预想的还要好。业务已经成熟，能够独立解决问题，不再需要你牵着手走——嗯，差不多吧。
- en: As mentioned in [Chapter 8](c2437827-f7ff-49a7-8ee7-5bdd39c5ddbe.xhtml), *You
    Are Not Finished Just Yet*, you should take a moment or two to consider where
    most of the individuals within the business were at the beginning of the journey
    and where they are now. Consider the changes in ways of working, communication,
    collaboration, and behaviors. Think of the proportion of innovators, followers,
    and laggards in the early stages of the evolution and what the proportion is now.
    Taking all of this into account, you will most probably find that in reality,
    the majority are now at the same point that you were when you started out—they
    are just starting to fully realize that there is another way to do things and
    that it is a better way. Sure, there's still work to be done to make things as
    effective and efficient as possible, and there are still a few kinks to iron out,
    but things are, on the whole, good.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第8章](c2437827-f7ff-49a7-8ee7-5bdd39c5ddbe.xhtml)《你还没有完成》中所提到的，*你还没有结束*，你应该花一两分钟考虑一下，在这段旅程的开始时，大多数企业中的个人处于什么位置，现在他们又处于什么位置。考虑一下工作方式、沟通、协作和行为上的变化。想一想在发展初期创新者、跟随者和滞后者的比例，现在又是什么样子。考虑到所有这些，你很可能会发现，现实中，大多数人现在处于你开始时的同一个位置——他们只是刚刚意识到，事情有另一种做法，而且那是一种更好的做法。没错，依然有工作要做，目标是使一切尽可能有效和高效，还有一些小问题需要解决，但总的来说，事情是好的。
- en: 'Now, look at how far *you* have personally come in comparison; as far as most
    of the people you have been working with and coaching and teaching in the ways
    of the CD and DevOps think, you are akin to a figure way off in the distance:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，看看你个人走了多远；就大多数你曾经合作、指导和教授CD与DevOps方法的人来说，你就像远处的一个身影：
- en: '![](img/a6c1d65a-6359-4569-b979-b57505916d67.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a6c1d65a-6359-4569-b979-b57505916d67.png)'
- en: Others' perception of you
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 他人对你的看法
- en: Regardless of your role at the beginning of the journey, be that a developer,
    a system admin, a manager, or something else, your role has now changed. Like
    it or not, you have become the holder of knowledge, expertise and experience.
    You are the CD and DevOps subject-matter expert. You know your stuff.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你在旅程开始时的角色是什么，开发人员、系统管理员、经理，还是其他什么角色，现在你的角色已经发生了变化。无论你是否喜欢，你已经成为了知识、专业技能和经验的拥有者。你是CD和DevOps的主题专家。你了解你的专业。
- en: You may feel that your fellow early-adopting innovators are also standing shoulder
    to shoulder with you, but for the sake of simplicity, you are the one reading
    this, and therefore you are the one standing in the distance.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能觉得你早期采用的创新者同伴们也都和你肩并肩站在一起，但为了简单起见，今天阅读这些内容的是你，因此你就是那个站在远处的人。
- en: You have traveled far, the landscape has changed quite dramatically from where
    you started, and you have new hills to climb—these are the new opportunities that
    the business is now ready to look at. Maybe these were challenges that the business
    could not overcome earlier; maybe they simply didn't know these opportunities
    existed, but with newfound knowledge, they are keen to try new things. Maybe your
    **Chief Technology Officer** (**CTO**) has been chatting with his young and trendy
    counterparts at the golf club. Whatever the reason, now is the time to apply *your
    stuff* to these new challenges and opportunities. What follows are some examples
    of how you can bring to bear your skills, expertise, and experience beyond traditional
    software delivery.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经走得很远，景象与你最初开始时大不相同，你还有新的高峰需要攀登——这些是现在企业已经准备好要看的新机会。也许这些曾经是企业无法克服的挑战；也许他们根本不知道这些机会的存在，但凭借新获得的知识，他们渴望尝试新的事物。也许你的**首席技术官**（**CTO**）和他年轻时尚的同行在高尔夫球场上聊得很投机。无论是什么原因，现在是时候将*你的东西*应用于这些新的挑战和机会了。接下来是一些示例，说明你如何在传统软件交付之外，运用你的技能、专业知识和经验。
- en: What follows are some examples of doors that can open following that successful
    adoption of CD and DevOps. Some of these may be achievable without CD and/or DevOps,
    but from experience, the results will not be as good without as they would with
    them. These are the sorts of new challenges and opportunities that you—should
    you accept them—could apply some focus, attention, and time to.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是一些在成功采用CD和DevOps后可以开启的机会示例。有些可能在没有CD和/或DevOps的情况下也能实现，但根据经验，没有这些工具，结果不会那么理想。这些是你——如果你愿意接受——可以投入精力、关注和时间去解决的新挑战和机会。
- en: Performance and load-testing
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能和负载测试
- en: The more observant among you might have noticed that there is little mention
    of performance or load-testing throughout this book. This is intentional as, in
    my mind, attempting this activity without the close collaboration, tooling, and
    techniques that come from adopting CD and DevOps is a fool's errand. Yes, there
    are many established and traditional approaches, but these normally amount to
    shoehorning something into the process just before you want to ship your code—which
    might well result in the code not shipping due to the fact that performance issues
    were found at the last minute. You may have overcome this problem by implementing
    a process that periodically takes a build of the software and runs some intensive
    automated tests against it within a controlled and highly-monitored environment.
    This can help, but unless you have set up the automated tests to **exactly** mirror
    real-world usage, you're basically giving everyone false hope that no performance
    issues will be found once the code is live.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你们中更为细心的人可能已经注意到，本书中几乎没有提到性能或负载测试。这是故意为之，因为在我看来，如果没有持续交付（CD）和开发运维（DevOps）所带来的紧密协作、工具和技术，进行这些活动就是一项徒劳的任务。是的，确实有许多传统的方法，但这些方法通常会在你准备发布代码之前将某些东西强行塞进流程中——这可能会导致由于最后一分钟发现性能问题而导致代码无法发布。你可能已经通过实施一种周期性地获取软件版本并在受控且高度监控的环境中进行密集自动化测试的过程来解决这个问题。这有一定帮助，但除非你已经设置了完全**模拟**实际使用场景的自动化测试，否则你基本上是在给大家带来虚假的希望，认为代码上线后不会出现性能问题。
- en: I would also hazard a guess and say performance/load-testing was seen as a burden,
    or even an area of waste, during the elephant-exposing inspection stage. It needn't
    be, and shouldn't be the case.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我还敢猜测，在暴露问题的检查阶段，性能/负载测试被视为一种负担，甚至是浪费资源的行为。实际上，这种看法既不必要，也不应该是如此。
- en: Once you have adopted CD and DevOps, the act of performance/load-testing can
    become relatively simple and straightforward. You just need to change the way
    you think about and approach it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你采用了持续交付（CD）和开发运维（DevOps），性能/负载测试的过程可以变得相对简单直接。你只需要改变思考和处理问题的方式。
- en: There's a very simple and understandable way to consider load- and performance-testing;
    by far the best place to ascertain how your software is performing under real-world
    load and usage is within your production environment. You may be reading this
    and thinking, has the author lost his mind? This may be true, but I would ask
    you to bear with me and decide for yourself.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种非常简单且易于理解的方法来考虑负载和性能测试；迄今为止，最好的方法是在生产环境中检查软件在实际负载和使用下的表现。你可能正在阅读这段话并想，作者是不是疯了？这可能是真的，但我请求你耐心听我说下去，并自行做出判断。
- en: Let's presume that you have implemented extensive monitoring of your overall
    production environment and the software running within (as mentioned in [Chapter
    7](390f69c0-7f66-41a7-93a6-ee5c1bc8733a.xhtml), *Vital Measurements*), from which
    you can observe in great detail what is going on under the covers in terms of
    hardware, infrastructure, and software. From this, you can form a very clear idea
    of how things should look during normal day-to-day operations.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经实施了对整体生产环境以及其中运行的软件进行广泛监控（正如在[第7章](390f69c0-7f66-41a7-93a6-ee5c1bc8733a.xhtml)中提到的，*关键指标*），通过这些监控，你可以详细观察硬件、基础设施和软件在背后发生的情况。通过这些数据，你能够清晰地了解正常日常操作时的表现应当是怎样的。
- en: With this data, you should then be able to safely run controlled experiments
    and observe the results in terms of overall platform performance. For example,
    you could run an experiment to incrementally apply additional load to the platform
    while it's being used, either by routing more user activity to a specific node
    or server or by running some non-intrusive automated test that will generate load
    in a controlled manner. As you turn up the dials and the load increases, you will
    start to see where the pain points are—a heat map of sorts—in near real-time.
    As both Dev and Ops are working closely together, observing the platform as a
    whole, they should be able to work out where the problems are by comparing normal
    day-to-day stats with those generated under load.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些数据，你应该能够安全地进行受控实验，并观察平台整体性能的结果。例如，你可以进行一项实验，逐步施加额外的负载到正在使用的平台上，方法可以是将更多的用户活动路由到特定的节点或服务器，或者通过运行一些非侵入性的自动化测试，以受控的方式生成负载。当你增加负载并提高负载时，你将开始看到痛点——一种近乎实时的热图。由于开发和运维团队密切合作，共同观察平台，他们应该能够通过将正常的日常统计数据与负载下生成的统计数据进行对比，找出问题所在。
- en: If and when issues are pinpointed, they could easily be overcome by applying
    patches in real time using the CD tooling used on a daily basis while the load
    is still in place—giving instant feedback. Alternatively, they might witness an
    overall slowdown of the platform, but the monitoring solution doesn't highlight
    anything specific. This could mean that there is a gap in the overall monitoring
    coverage, which again can be pinpointed and addressed in a collaborative way.
    Either way, simply turning the dials back down will put things back to the normal
    day-to-day load.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在某个时候问题被定位，它们可以通过使用CD工具实时应用补丁来轻松克服，而负载仍然存在——提供即时反馈。或者，他们可能会看到平台的整体慢下来，但监控解决方案没有突出显示任何具体问题。这可能意味着整体监控覆盖存在一个漏洞，这同样可以通过协作方式定位并解决。无论如何，简单地将负载调回正常日常负载即可恢复正常状态。
- en: Some of you may be reading this and thinking that the production environment
    is sacrosanct and should not be used for such activities as this could impact
    customers using the platform at the same time. My view is that unless you are
    purposefully restricting the number of people who can access the production environment,
    then this increase in load will happen without your knowledge in an uncontrolled
    manner—especially if your CD and DevOps adoption directly attributes to an increase
    in customer satisfaction and growth. Why not make sure your production environment
    is ready for this growth before it happens?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你们中的一些人可能正在阅读这篇文章，并认为生产环境是神圣不可侵犯的，不应当用于此类活动，因为这可能会影响到同时使用平台的客户。我的看法是，除非你故意限制可以访问生产环境的人数，否则这种负载增加将会在你不知情的情况下以不受控制的方式发生——特别是当你的CD和DevOps采用直接导致客户满意度和增长提升时。为什么不在增长发生之前，确保你的生产环境已为此做好准备呢？
- en: All in all, trying to run performance- or load-testing without extensive monitoring
    in place and/or a high degree of collaboration between the Dev and Ops teams will
    not provide the results you expect or need. Doing so anywhere other than the production
    environment will give mixed results. This is not an obvious benefit of adopting
    CD and DevOps, but it is a very powerful and compelling benefit, as is reducing
    complexity.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 总而言之，如果没有充分的监控和/或开发与运维团队之间高度的协作，尝试进行性能或负载测试将无法提供预期或所需的结果。在生产环境之外进行测试将得到混合结果。这并不是采用CD和DevOps的明显好处，但它是一个非常强大且令人信服的好处，就像减少复杂性一样。
- en: Reducing feature-flag complexity
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 减少功能标志的复杂性
- en: There are many established approaches to allow for different use cases or user
    flows to be switched on and off in real time, but most revolve around some sort
    of feature flag or configuration setting within the platform. Although this is
    a viable approach, it does add something to the code base, which can, over time,
    become a massive headache. That something is complexity.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多已建立的方法可以在实时中切换不同的使用案例或用户流程，但大多数方法都围绕着某种功能标志或平台中的配置设置展开。尽管这是一个可行的方法，但它确实会在代码库中增加一些内容，随着时间的推移，这可能会成为一个巨大的麻烦。这个“东西”就是复杂性。
- en: Not only does this add complexity to the code base, it also adds complexity
    to related activities such as testing and the setup/support of the overall platform,
    especially if you start to chain the feature flags together. For example, let's
    assume you have a new reporting feature (let's call it feature C) that is automatically
    enabled if the reporting menu feature (let's call it feature B) is manually enabled
    **and** the legacy-reporting feature (let's call that feature A) is manually disabled.
    If feature A **and** B are manually enabled, then feature C is automatically disabled.
    However, if feature A and B are manually disabled, then the third-party reporting
    feature (feature D) becomes automatically enabled.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这不仅增加了代码库的复杂性，还增加了相关活动的复杂性，如测试和整体平台的设置/支持，尤其是当你开始将特性标志链式连接时。例如，假设你有一个新的报告功能（我们称之为特性C），如果报告菜单功能（我们称之为特性B）被手动启用**并且**遗留报告功能（我们称之为特性A）被手动禁用，那么特性C会自动启用。如果特性A**和**B被手动启用，那么特性C会自动禁用。然而，如果特性A和B都被手动禁用，那么第三方报告功能（特性D）将自动启用。
- en: 'The following may make the example easier to understand:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下可能会使这个例子更容易理解：
- en: '![](img/6b9bc518-eba4-41eb-b390-5e188a44f660.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b9bc518-eba4-41eb-b390-5e188a44f660.png)'
- en: It all seems simple enough and based upon simple logic gates, but consider what
    will happen when you have a platform that has feature flags controlling dozens
    or hundreds of features—some independent of each other, and some forming a weird,
    convoluted daisy-chain feature tree. Testing of all of these combinations and
    trying to support a production system that can be set up in hundreds (and sometimes
    thousands) of different states will be a nightmare, saying nothing of the pretty
    pointless task of trying to debug a given problem when it arises.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切看起来足够简单，基于简单的逻辑门，但想一想，当你拥有一个平台，其中有特性标志控制着数十个或数百个特性时，会发生什么——其中一些是相互独立的，而另一些则形成了一个奇怪、复杂的链式特性树。测试所有这些组合并尝试支持一个可以设置成数百种（有时是数千种）不同状态的生产系统将是一场噩梦，更不用说当问题出现时，试图调试特定问题是多么徒劳无功了。
- en: I worked on one product that had in excess of 50,000 feature flags—the origins
    of and features being controlled by the majority had been lost in the mists of
    time, and therefore new flags were continually being added to control newly-added
    features. Complexity gone mad!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾经参与过一个产品的开发，其中有超过50,000个特性标志——大多数特性标志的来源和控制的功能早已被时间的迷雾掩盖，因此，新的特性标志不断被添加，用来控制新添加的功能。复杂性完全失控！
- en: 'Having successfully adopted CD and DevOps, you will be regularly and consonantly
    shipping code with ease, and you''ll have the Dev and Ops team working as one.
    Therefore, it would be far simpler to consider using the CD approach to enable
    and disable features or functionality. In other words, to enable a given feature,
    you just ship the code with it in—no messing around with flags, settings, or daisy-chaining.
    You''ll of course test this first to ensure there''s no unforeseen negative impacts,
    but there is a very simple way back: ship the previous version that didn''t have
    the new feature/functionality (if you follow the "never break your consumer" advice
    from [Chapter 5](6a4f746d-b386-49b3-b82b-154ff1f604e8.xhtml), *Approaches, Tools,
    and Techniques*, rolling back should not cause any issues). Nice and simple to
    comprehend, develop, and support, I think you''ll agree.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 成功采用了持续交付（CD）和DevOps后，你将能够定期且持续地轻松地发布代码，并且开发和运维团队将紧密协作。因此，使用CD方法来启用和禁用功能将变得更加简单。换句话说，要启用某个功能，你只需要发布包含该功能的代码——不需要使用标志、设置或复杂的链式操作。你当然会先进行测试，确保没有出现意外的负面影响，但有一个非常简单的回退方法：发布不包含新功能的先前版本（如果你遵循[第5章](6a4f746d-b386-49b3-b82b-154ff1f604e8.xhtml)中的“永远不破坏你的消费者”建议，*方法、工具与技巧*，回滚应该不会引起任何问题）。我相信你会同意，这种方式既简单易懂，又便于开发和支持。
- en: OK, so this is may actually be an overly simplistic view, but with CD and DevOps,
    you can start looking at these sorts of problems in new and innovative ways. The
    advantages might not be immediately obvious, but reducing complexity, if nothing
    else, will save you time, money and effort, as well as reducing waste in the process.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这可能是一个过于简单化的观点，但通过CD和DevOps，你可以开始以新的和创新的方式看待这些问题。其优势可能不会立即显现出来，但至少减少复杂性将为你节省时间、金钱和精力，同时减少过程中的浪费。
- en: One of reasons for using feature flagging within software is to enable A/B testing.
    Let's now look at what A/B testing actually is and how CD and DevOps can help
    improve this approach.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件中使用功能标记的原因之一是为了实现 A/B 测试。现在我们来看看 A/B 测试到底是什么，以及 CD 和 DevOps 如何帮助改善这种方法。
- en: A/B testing
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A/B 测试
- en: A/B testing has been around for a while and is an extremely effective way of
    trying out changes to user journeys and/or logic flows within a software solution.
    The simple premise being that you can—through configuration, feature-flagging,
    or clever traffic-routing—send a predetermined number of users (or the transactions
    generated by use of the software itself) down different paths. This can help try
    out new features and/or functionality under controlled conditions normally within
    a production environment to prove or disprove certain hypotheses.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: A/B 测试已经存在一段时间，它是一种非常有效的方式，用来尝试对用户旅程和/或软件解决方案中的逻辑流程进行更改。其简单的前提是，通过配置、功能标记或巧妙的流量路由，你可以将一定数量的用户（或通过使用软件本身产生的交易）引导到不同的路径。这有助于在通常是在生产环境中以受控条件下尝试新功能和/或功能，以验证或反驳某些假设。
- en: I won't go into too much depth regarding this subject—there are plenty of books
    and online resources focused on this subject that I encourage you to read.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会深入探讨这个话题——有很多书籍和在线资源专注于这个话题，我鼓励你去阅读。
- en: Let's, for example, say that your business wants to see what the impact would
    be if they introduced a new design or subtle web page layout change. If you can,
    in some way, redirect specific users or groups of users down path A and the rest
    down path B, you can then monitor and compare the user behavior via analytics
    and metrics to see which worked best.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，假设你的业务想要看看如果引入一个新的设计或微妙的网页布局变化会产生什么影响。如果你能够以某种方式将特定的用户或用户群体引导到路径 A，而将其余的用户引导到路径
    B，那么你就可以通过分析和度量来监控并比较用户行为，看看哪种效果最好。
- en: 'The following diagram provides a simplistic overview of this approach:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 下图提供了这种方法的简化概览：
- en: '![](img/9e7f8e11-8381-47fe-96a6-8c1c4797357d.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9e7f8e11-8381-47fe-96a6-8c1c4797357d.png)'
- en: A simplistic example of A/B testing
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的 A/B 测试示例
- en: Another useful approach would be to run A/B experiments covertly. For example,
    if you have a new recommendation service that you want to trial, you could force
    some user traffic and transactions to this new service and see how it works compared
    to the incumbent service. You could even use the same mechanism to route data
    to a specific service as part of load-testing. The possibilities are endless.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种有用的方法是偷偷进行 A/B 实验。例如，如果你有一个新的推荐服务想要试用，你可以将一些用户流量和交易引导到这个新服务上，看看它与现有服务的表现如何。你甚至可以使用相同的机制，将数据路由到特定服务作为负载测试的一部分。可能性是无穷的。
- en: 'You don''t necessarily need CD or DevOps to implement A/B testing; however,
    both do give you some major benefits:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你不一定需要 CD 或 DevOps 来实现 A/B 测试；然而，两者确实能为你带来一些重大好处：
- en: The ability to ship code extremely quickly—for example, you want to implement
    the code to split traffic to A or B across all servers in minutes so that all
    users start using the same code at the same time.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够极其快速地发布代码——例如，你希望在几分钟内在所有服务器上实施代码，将流量分配到 A 或 B，从而确保所有用户同时使用相同的代码。
- en: You have Dev and Ops closely working together, monitoring everything that is
    going on. If gaps are found in the data used to analyze the results, you have
    the ability to address this with relative ease.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你有开发和运维团队紧密合作，监控正在发生的一切。如果在用于分析结果的数据中发现有缺口，你能够相对容易地解决这一问题。
- en: You have the option to roll everything back relatively quickly with little/no
    impact if things take an unexpected turn or you have completed your experiment.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果事情发生意外变化或你已完成实验，你有选择相对快速回滚所有内容的选项，并且几乎没有或完全没有影响。
- en: Without CD and DevOps, you would need to plan this kind of activity very closely
    in advance and hope nothing is missing or amiss when you implement it. Unless
    you have the ability to make small patch releases, you will no doubt need to include
    any changes—however small—within a full release cycle so the normal risk-averse
    process will kick in. The same will apply for rolling the changes back when you're
    done.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有 CD 和 DevOps，你需要提前非常紧密地规划此类活动，并且希望在实施时没有遗漏或错误。除非你有能力进行小规模的补丁发布，否则你无疑需要在完整的发布周期内包含任何变更——无论多小——以便启动正常的、规避风险的流程。完成后，回滚这些变更时也将适用同样的流程。
- en: 'Another variation (or at least a close relation) of A/B testing is alpha and
    beta testing (sometimes referred to as closed or pre-release testing). This gives
    us the ability to try out wide-reaching UI, UX, and functional changes alongside
    the existing solution. Normally, this is narrowed down to specific users and/or
    via invitation only. Where A/B testing is traditionally targeted as small and
    specific changes, this type of testing is normally more far-reaching in nature.
    The basic premise still applies: the ability to try out new features and functionality
    in a controlled manner. Again, this can be achieved without CD and DevOps, but
    it will be far more complex, risky, and prone to failure as old-school processes
    will get in the way, slow things down and—based on experience—ultimately be blamed
    for the failure of the test. Consider what it would take to maintain two versions
    of the entire UI and run them in parallel without a mechanism to react to issues
    in a timely manner.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: A/B 测试的另一种变体（或至少是一个紧密相关的形式）是 Alpha 测试和 Beta 测试（有时称为封闭测试或预发布测试）。这使我们能够在现有解决方案的基础上尝试广泛的
    UI、UX 和功能性变更。通常，这种测试会限定在特定的用户群体中，或仅通过邀请进行。与 A/B 测试传统上针对小范围、具体的变化不同，这种测试通常更为广泛。基本前提仍然适用：以受控的方式尝试新功能和特性。同样，虽然可以在没有
    CD 和 DevOps 的情况下实现这一点，但这样做将更加复杂、风险更高，并且容易失败，因为旧式的流程会妨碍进展，拖慢速度，并且——根据经验——最终会被归咎于测试失败的原因。试想一下，如果没有及时响应问题的机制，如何同时维护两个版本的整个
    UI 并使其并行运行。
- en: As stated, A/B testing pretty much boils down to proving or disproving certain
    hypotheses, whether due to changes in market conditions or as part of a strategic
    direction change. Whatever the reason behind it, running an A/B test is normally
    time-critical. Without CD and DevOps to help you deliver quality software frequently,
    the ability to successfully run A/B tests will be hampered as the world may have
    moved on while you struggle to get releases planned and executed, and the use
    case you originally wanted to test may no longer be relevant. As they say, time
    waits for no man, women, or A/B tests.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，A/B 测试基本上是为了验证或反驳某些假设，无论是由于市场条件变化，还是作为战略方向改变的一部分。无论背后的原因是什么，进行 A/B 测试通常是时间敏感的。如果没有
    CD 和 DevOps 帮助你频繁交付高质量软件，成功运行 A/B 测试的能力将受到阻碍，因为在你努力计划和执行发布的同时，世界可能已经发生变化，而你最初想要测试的用例可能不再相关。正如人们所说，时间不等人，也不等女人和
    A/B 测试。
- en: We'll now move from testing to colors—blue and green, in fact.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将从测试转向颜色——实际上是蓝色和绿色。
- en: Blue-green deployments
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 蓝绿部署
- en: Some of you *au fait* with CD will no doubt have heard of blue-green deployments,
    which are one of the cornerstones of the original CD approach. For those of you
    not in the know, blue-green deployments allow you to deploy (as the name suggests)
    a new version of software (or a new server with updated O/S, or new configuration
    or DB engine, and so on) while the incumbent version/server is up and running,
    and then seamlessly switch new for old. This is a very simplistic overview of
    the approach, but suffice it to say it's quite an easy concept to get your head
    around.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一些熟悉 CD 的人无疑听说过蓝绿部署，它是原始 CD 方法的基石之一。对于那些不了解的人，蓝绿部署允许你在现有版本/服务器运行的同时（如其名所示）部署软件的新版本（或具有更新操作系统的新服务器，或新的配置或数据库引擎等），然后无缝地将新版本切换为旧版本。这是对这种方法的一个非常简化的概述，但可以说这是一个相对容易理解的概念。
- en: 'This approach vastly improves your ability to not only reduce/remove the need
    for downtime (see [Chapter 5](6a4f746d-b386-49b3-b82b-154ff1f604e8.xhtml), *Approaches,
    Tools, and Techniques*), but also to try side-by-side versioning (for example,
    running two different versions of the same thing within the same environment)—which
    is something that can also help A/B testing:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法大大提高了你不仅减少/消除停机时间的能力（见 [第 5 章](6a4f746d-b386-49b3-b82b-154ff1f604e8.xhtml)，*方法、工具与技术*），还可以尝试并行版本控制（例如，在同一环境中运行两个不同版本的相同内容）——这同样能帮助
    A/B 测试：
- en: '![](img/e87e7d70-97bb-4441-871a-5c27db89807d.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e87e7d70-97bb-4441-871a-5c27db89807d.png)'
- en: Although this approach is very much tied to CD, the adoption of DevOps as well
    will make this so much easier to manage, plan, and coordinate. Without close collaboration
    and trust between the Dev and Ops team, there is potential for things to go badly
    wrong—especially when dealing with the production environment. For example, what
    if a developer inadvertently deploys a breaking change within an API alongside
    the existing API but the consuming service (see [Chapter 5](6a4f746d-b386-49b3-b82b-154ff1f604e8.xhtml),
    *Approaches, Tools, and Techniques*) starts to talk to both? This will lead to
    very inconsistent results and some head-scratching. With DevOps, finding the root
    cause will be relatively easy and fixing the potential data issues can be sorted
    collaboratively.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种方法与持续交付（CD）紧密相关，但采用DevOps也会使得管理、规划和协调变得更加容易。如果开发和运维团队之间没有密切的合作与信任，就有可能导致问题严重—尤其是在处理生产环境时。例如，如果一名开发者不小心将破坏性变更部署到API中，并且这个API与现有的API一起存在，但消费者服务（见[第5章](6a4f746d-b386-49b3-b82b-154ff1f604e8.xhtml)，*方法、工具和技术*）开始同时与两者进行交互，这将导致非常不一致的结果，甚至让人摸不着头脑。有了DevOps，找到根本原因相对容易，并且可以通过协作来修复潜在的数据问题。
- en: Rather than going into too much detail, I highly recommend you do some research
    and reading into CD—there's a list of reference materials in the [Appendix A](b212024b-5ba5-4f01-b76d-a8367c6ec41c.xhtml),
    *Some Useful Information*—but, suffice it to say that blue-green deployments is
    a very powerful tool.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我不打算深入细节，但我强烈建议你进行一些CD的研究和阅读—在[附录A](b212024b-5ba5-4f01-b76d-a8367c6ec41c.xhtml)，*一些有用的信息*中有相关参考资料—不过，可以简单地说，蓝绿部署是一种非常强大的工具。
- en: Something else that I would highly recommend is leveraging CD and DevOps to
    ease the burden of security-patching.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈推荐的另一件事是利用CD和DevOps来减轻安全补丁的负担。
- en: Security-patching and bacon-saving
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全补丁与“拯救培根”
- en: It seems that every day the news is full of reports about the latest business
    that has been hacked in some way, or has suffered a **distributed denial-of-service**
    (**DDOS**) attack. These, of course, are only the ones we know about—research
    suggests that there are a good number of business that don't publicly admit to
    large-scale IT security issues (and why would they?). In recent years, this has
    made businesses—especially at the executive level—extremely wary of change and
    very focused on ensuring their IT systems are fully (mostly) up to date in terms
    of security patches. Most times, this is at the expense of software delivery.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来每天新闻中都充斥着关于最新遭到黑客攻击的企业，或是遭受**分布式拒绝服务**（**DDOS**）攻击的报道。当然，这些只是我们知道的—研究表明，很多企业并未公开承认大规模的IT安全问题（又为什么要承认呢？）。近年来，这使得企业，尤其是高层管理人员，对变革变得异常谨慎，并非常关注确保他们的IT系统在安全补丁方面保持完全（或至少大部分）最新。大多数时候，这通常是以软件交付为代价的。
- en: When a business has adopted CD and DevOps, the implementation and validation
    of security patches simply becomes another change to deliver. If the patch is
    at the operating-system (O/S) level, then the configuration-as-code approach covered
    in [Chapter 5](6a4f746d-b386-49b3-b82b-154ff1f604e8.xhtml), *Approaches, Tools,
    and Techniques*, will cater for this. The same would apply for networking, infrastructure,
    and runtime frameworks (for example JAVA, .NET, and so on). If the patch is at
    the software level (for example, found within some open source software used),
    then there is a tried and tested method of shipping software changes via a CD
    pipeline.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当企业采用了CD和DevOps时，安全补丁的实施和验证就变成了另一个需要交付的变更。如果补丁是在操作系统（O/S）级别，那么[第5章](6a4f746d-b386-49b3-b82b-154ff1f604e8.xhtml)，*方法、工具和技术*中讨论的配置即代码方法将会适用。对于网络、基础设施和运行时框架（例如JAVA、.NET等）也是如此。如果补丁是在软件层面（例如，某些使用的开源软件中发现的补丁），那么通过CD管道交付软件变更的方式已经经过了充分的验证。
- en: To keep the narrative simple, let's assume that a business has been hacked and
    customer data has been stolen within the attach due to a security flaw within
    their network and unpatched OS.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化叙述，假设某个企业遭到黑客攻击，客户数据由于网络中的安全漏洞和未打补丁的操作系统而被盗。
- en: 'Let''s now apply this scenario to a traditional listed business that has **not**
    adopted CD or DevOps. Consider the following questions and think of the answers
    that would apply:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将这个场景应用于一个**没有**采用CD或DevOps的传统上市公司。考虑以下问题并思考可能的答案：
- en: How quickly do you think they would apply a patch to overcome the problem?
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你认为他们会多快修补漏洞以解决问题？
- en: How calm do you think their operations team feels with their CEO, VP of PR,
    and SVP of operations all breathing down their necks wanting to know when the
    IT system will be patched?
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你认为他们的运营团队在CEO、公关副总裁和运营高级副总裁都在盯着他们想知道IT系统何时修补时，心情会有多冷静？
- en: How confident are the Ops team that hastily applying an OS and network patch
    that should have been applied months ago will **not** impact the software platform?
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你认为运维团队对匆忙应用本应几个月前就该应用的操作系统和网络补丁**不会**影响软件平台有多自信？
- en: How happy do you think the development team will be when the SVP of engineering
    tells them that they can't go home until they have sorted out a fix to overcome
    the issues introduced by hurriedly applying an OS patch?
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当工程高级副总裁告诉开发团队他们在解决由于匆忙应用操作系统补丁引发的问题之前不能回家时，你认为他们会有多高兴？
- en: How much market value do you think is wiped off a listed company when news gets
    out that they have been hacked and customer data has been stolen?
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当新闻曝光他们被黑客攻击，客户数据被窃取时，你认为一家上市公司会失去多少市值？
- en: How many heads will roll?
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 会有多少人被辞退？
- en: It doesn't take a PhD to guess the answers to these questions. Situations such
    as this are not as isolated or uncommon as they used to be, and the fallout in
    recent years has been very widespread, expensive, and career-limiting for those
    caught up in it all.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 猜测这些问题的答案并不需要博士学位。像这样的情况并不像以前那样孤立或罕见，近年来的后果已经非常广泛，代价高昂，并且让那些卷入其中的人们的职业生涯受到了限制。
- en: 'Now imagine the same situation for a business that has adopted CD and DevOps.
    The answers to the preceding questions would be something like this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，想象一下一个已经采用CD和DevOps的公司的相同情况。对前面问题的回答大致会是这样的：
- en: As quickly as they can normally release—minutes or hours, at the most.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 他们能像平时一样迅速发布——最多几分钟或几小时。
- en: Perfectly calm, and, to be honest, the senior management wouldn't know anything
    about it until they've been informed that an issue had been found during routine
    monitoring and is in the process of being addressed.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完全冷静，坦白说，高层管理人员直到通过常规监控发现问题并被告知正在处理时才会知道。
- en: Very confident, as they can collaborate with the development team to ensure
    that there are no impacts and/or work on a plan to address the impacts in parallel.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 非常自信，因为他们可以与开发团队合作，确保不会产生影响和/或并行工作以制定应对影响的计划。
- en: They won't have to.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 他们不会有这种问题。
- en: If the message delivered is, "We found an issue and have already applied a fix.
    The impact was minimal and we can assure our customers that their data is perfectly
    safe," the news isn't very newsworthy and the markets might not even care. In
    fact, they might even see it as good news and want to invest more in the business.
    (OK, I can't quantify this, but it is plausible.)
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果传达的信息是：“我们发现了一个问题并已经应用了修复。影响非常小，我们可以向客户保证他们的数据是完全安全的，”那么这条新闻不太具有新闻价值，市场甚至可能不在乎。事实上，他们可能会将此视为好消息，并希望加大对该业务的投资。（好吧，我无法量化这个，但它是有可能的。）
- en: None.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有人。
- en: If your CD and DevOps adoption has matured, the probability of a hack due to
    outdated security-patching would be quite small as the monitoring for and implementation
    of regular security patches will be incorporated into the day-to-day ways of working,
    either via configuration-as-code or as part of the software delivery pipeline.
    However, there will always be unforeseen security holes, so it's good to know
    that there's a rapid way to address these situations as and when they arise.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的CD和DevOps采用已经成熟，因安全补丁过时而导致黑客攻击的概率会非常小，因为定期安全补丁的监控和实施将被纳入日常工作流程中，无论是通过配置即代码（configuration-as-code）还是作为软件交付流水线的一部分。然而，始终会有不可预见的安全漏洞，所以了解当这些情况发生时有一种快速的解决方式是很重要的。
- en: As you can see, adopting CD and DevOps can provide some major bacon-saving benefits.
    That isn't to say that you couldn't achieve the same results without CD and DevOps,
    but having the ability to deliver quickly and having a very close working relationship
    across the Dev and Ops teams will make it much easier to spot and fix live issues
    before anything breaks—or your business becomes the top story on the evening news.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，采用持续交付（CD）和DevOps可以带来一些非常重要的拯救局面的好处。这并不是说没有CD和DevOps你不能取得相同的结果，但能够快速交付，并且开发和运维团队之间有非常紧密的合作关系，将使得在问题发生之前更容易发现并修复实时问题——而不是让你的公司成为晚间新闻的头条。
- en: As previously stated, there will always be unforeseen events that can impact
    the running production system, and keeping ahead of this can be difficult. However,
    there is an approach that can help to surface these problems before they manifest
    themselves. This involves actively trying to break the live platform. On purpose.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，总会有无法预见的事件影响生产系统的正常运行，保持领先应对这些事件可能是困难的。然而，确实有一种方法可以帮助在这些问题显现之前发现它们。这就是主动去尝试破坏实时平台。故意的。
- en: Order-out-of-chaos monkey
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混沌猴子中的秩序
- en: It doesn't matter how much care and attention you apply to your platform; something
    can and will inevitably go wrong when you least expect it. For example, a server
    will fail, a process might start looping, a network switch will decide it doesn't
    want to be a network switch anymore, the SAN will decide it likes to function
    in single-user mode, the latest security patch will cause issues in the software
    platform, or someone will decide to hack you because you're a nice big target.
    As the saying goes, you should always expect the unexpected.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你多么细心地照顾和关注你的平台，总会有不可预见的事情发生，尤其是在你最不期望的时候。例如，服务器可能会崩溃，进程可能会开始循环，网络交换机会决定不再作为网络交换机工作，SAN
    会决定自己喜欢在单用户模式下运行，最新的安全补丁可能会导致软件平台出现问题，或者有人会因为你是一个大目标而决定黑你。正如那句老话所说的，你应该时刻准备好应对意外。
- en: Most businesses will have some sort of business contingency plan in place to
    cater for the unexpected, but there's a strong possibility that they don't try
    to purposely force the issue, at least not to the extent that something bad actually
    happens—they just hope nothing bad will ever happen, and if it does, they hope
    and pray that they'll be ready and the plan works.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数企业都会有某种业务应急计划来应对突发情况，但很有可能他们并不会刻意去强迫问题的发生，至少不会让它发展到实际发生坏事的程度——他们只是希望坏事永远不会发生，如果发生了，他们希望并祈祷能够做好准备，计划能够发挥作用。
- en: 'What if you had a set of tools that could safely initiate a failure at will
    in a controlled manner with the goal of observing what happens and, more importantly,
    where the weak spots in your platform are? This is exactly what some bright spark
    did a few years ago, and this has been widely adopted as the **chaos monkey approach**.
    There are a few variations, but what it boils down to is this: a set of tools
    that you can run within your closely-monitored environment whose *raison d''être*
    is to try and break it.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一套工具，能够在受控的方式下安全地启动故障，以观察发生了什么， 更重要的是，观察平台中的薄弱环节在哪里，这样的工具是否有用呢？这正是几年前某个聪明人所做的事情，而这也被广泛采用为**混沌猴子方法**。虽然有一些变种，但其核心内容就是：一套工具，能在你高度监控的环境中运行，其*存在的理由*就是尽力去破坏它。
- en: If you do some research into this subject, you'll find that the majority of
    the tools currently available are very much focused on cloud-based installations.
    That isn't to say that such tools cannot be used within an on-premise environment,
    but the effectiveness may be lower and the risk higher, so you should bear that
    in mind.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对这个话题进行一些研究，你会发现目前大多数工具都集中在基于云的安装环境中。这并不意味着这些工具不能在本地环境中使用，但它们的效果可能较低，且风险较高，所以你需要考虑到这一点。
- en: If you attempted this approach without a strongly-embedded CD and DevOps culture,
    you would end up in a complete mess—to be honest, I doubt if you would be even
    be allowed to try it in the first place without getting someone very high up in
    the organization to understand why this should be done, and be willing to take
    the risk. With close collaboration, in-depth monitoring, and the trust-based relationships
    that come from CD and DevOps, attempting to break the platform to observe what
    happens is relatively (but not totally) risk-free.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在没有强大嵌入式持续交付（CD）和开发运维（DevOps）文化的情况下尝试这种方法，结果会是一团糟——说实话，我怀疑你是否能在一开始就被允许尝试，因为你需要让组织中非常高层的人理解为什么必须这样做，并愿意承担风险。通过紧密合作、深入监控和依赖信任的关系，依赖
    CD 和 DevOps 的做法使得尝试去破坏平台并观察发生的事情相对（但不是完全）没有风险。
- en: 'There is one caveat to this approach: you need to be confident that your platform
    has been designed and built to gracefully allow for failure. You should avoid
    committing platformicide in public with core dumps and HTTP 500 messages available
    for all to see. Again, this can be addressed in a DevOps way by ensuring the environment
    and software that runs within it fail gracefully.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法有一个前提：你需要确信你的平台在设计和构建时已经考虑到优雅地处理失败的机制。你应该避免在公开场合犯平台自杀（platformicide），让核心转储和
    HTTP 500 错误信息暴露在所有人面前。同样，这可以通过 DevOps 的方式来解决，确保环境和运行其中的软件能优雅地失败。
- en: One other advantage to the chaos monkey approach is that it's also a great way
    to share knowledge of how the overall platform works across both the Dev and Ops
    teams. As any creative and technically-minded person will tell you, the best way
    to understand how something works is to push it to its breaking point to see what
    makes it tick. Going back to our F1 racing car analogy in [Chapter 7](390f69c0-7f66-41a7-93a6-ee5c1bc8733a.xhtml),
    *Vital Measurements*, the engineers and drivers regularly push the cars and components
    to the limit during testing and practice laps to ensure the car will work as designed
    when it needs to. The information gleaned from this activity can mean the difference
    between a podium finish and being lapped.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 混乱猴子方法的另一个优势是，它也是一个很好的方式，能让 Dev 和 Ops 团队共享平台如何运作的知识。如任何具有创造性和技术思维的人所说，理解某个事物如何运作的最佳方式就是将其推到极限，看看它的运作机制。回到我们在[第7章](390f69c0-7f66-41a7-93a6-ee5c1bc8733a.xhtml)中提到的F1赛车类比——*关键测量*，工程师和驾驶员会在测试和练习圈中定期将赛车和组件推向极限，确保赛车在需要时按设计工作。通过这种活动获得的信息，可能意味着能否站上领奖台与被超越之间的差距。
- en: We'll now move away from the potentially destructive power of CD and DevOps,
    and consider how CD and DevOps can make the lives of your customers and other
    teams within your organization so much better.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将暂时不讨论持续交付（CD）和 DevOps 的潜在破坏性力量，而是考虑 CD 和 DevOps 如何使你的客户和组织内其他团队的工作变得更加轻松。
- en: End user self-service
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 终端用户自助服务
- en: Over the course of this book, we have been focused on a unidirectional process
    of pushing software out to given environments (including production). This in
    essence revolves around a software-engineering team having confidence in their
    changes, and therefore triggering the process to ship it or an Ops team who are
    confident to ship a config as code change.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的过程中，我们一直关注将软件推送到指定环境（包括生产环境）的单向流程。其本质上是一个软件工程团队对自己的变更充满信心，因此触发将其发布的过程，或是一个
    Ops 团队有信心将配置作为代码的变更发布。
- en: What if you were to turn this around and allow the users of your software platform
    to initiate the *pulling* of your software at will? It might sound strange, but
    there are a few legitimate scenarios in which this could be required.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你把这个情况颠倒过来，允许你软件平台的用户随时主动“拉取”你的软件呢？这听起来可能有些奇怪，但在某些合法的场景下，这种做法可能是必要的。
- en: 'Let''s look at a few scenarios:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看几个场景：
- en: You have an implementation team that supports the on-boarding of new customers,
    and they would like to test out different scenarios and use cases so that they
    can ensure their manual test scripts, FAQs, and training documentation are up
    to date.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你有一个实施团队，负责新客户的引导，他们希望测试不同的场景和用例，以确保他们的手动测试脚本、常见问题解答和培训文档是最新的。
- en: The SecOps team needs to run a set of deep security scans and some DDOS scenarios
    against a copy of the platform within their locked-down test lab.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SecOps 团队需要在他们封闭的测试实验室中，针对平台的副本运行一系列深度安全扫描和一些 DDoS 场景。
- en: The PR and marketing team needs to take screen grabs of the current beta platform
    for a press release.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公关和市场营销团队需要为新闻稿拍摄当前 beta 平台的屏幕截图。
- en: The sales team is about to demo to an important new client and wants a local
    copy of the software platform running in a VM on their Mac as there is no reliable
    Wi-Fi available in the conference center.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 销售团队即将向一个重要的新客户展示，并希望在他们的 Mac 上的虚拟机中运行软件平台的本地副本，因为会议中心内没有可靠的 Wi-Fi。
- en: An internal auditor is investigating a data breach from six months ago and wants
    an exact copy of the platform as it was then.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一名内部审计员正在调查六个月前的数据泄露事件，并希望获取当时平台的精确副本。
- en: Using traditional techniques and approaches, each of the previous scenarios
    would involve quite a large amount of mundane work (and that's putting it very
    mildly) to set up a dedicated environment and get all of the software needed installed
    and working as it should—saying nothing of the infrastructure setup. This mundane
    work would have to be prioritized according to the workload the various teams
    already have, and therefore it may take a very long time—most probably far beyond
    the date when the environments are **needed**. I'm pretty sure that you will have
    experienced this frustration yourself—I know I have many times.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用传统的技术和方法，前述每种场景都会涉及大量琐碎的工作（我这是在轻描淡写）来设置一个专用环境，并让所有需要的软件安装并正常工作——更不用说基础设施的设置了。这些琐碎的工作必须根据各个团队已有的工作负载来进行优先级排序，因此可能需要很长时间——很可能远远超出环境**需要**的时间。我敢肯定，你自己一定也经历过这种沮丧——我知道我经历过很多次。
- en: Now consider how much mundane extra work it would entail if these teams/users
    could press a button and have an entire environment automatically set up for them?
    What if they could also specify the exact version they wanted (for example, production,
    beta, current work in progress, a snapshot in time, and so on) via a self-service
    portal?
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在考虑一下，如果这些团队/用户能够按下一个按钮，自动为他们设置一个完整的环境，这将会减少多少琐碎的额外工作？如果他们还可以通过自助服务门户指定他们想要的精确版本（例如，生产版本、测试版本、当前进行中的工作、时间快照等等），那该多好？
- en: With CD and DevOps embedded into your ways of working, there's no obvious reason
    you shouldn't be able to do this. It will take some work to set up, but you have
    the tooling that can reliably provision environments, deploy software assets,
    and provide in-depth monitoring. If the automation goes a little astray or doesn't
    cater for one of the scenarios, you have a DevOps team who are used to collaborating
    and are, therefore, happy to help solve the problems.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 随着CD和DevOps融入你的工作方式，没有明显的理由不能做到这一点。虽然这需要一些设置工作，但你已经拥有可靠的工具来配置环境、部署软件资产，并提供深入的监控。如果自动化出现了偏差，或者没有涵盖某些场景，你有一个习惯于协作的DevOps团队，他们也乐于帮助解决问题。
- en: Extending the user self-service beyond your organizational boundary is also
    something CD and DevOps can help you realize.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 将用户自助服务的范围扩展到你的组织边界之外，也是CD和DevOps可以帮助你实现的目标。
- en: Thing as a service
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作为服务的物品
- en: As software solutions mature, the businesses that invested in them continually
    look for new and interesting ways of leveraging said investment. In plain terms,
    they want to make more money from the software they have already paid for.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 随着软件解决方案的成熟，投资于这些解决方案的企业不断寻求新的、有趣的方式来利用已作出的投资。通俗来说，他们希望从已支付的软件中赚取更多的利润。
- en: There are a number of well-established ways of doing this, but **PaaS (Platform
    as a Service**) or **SaaS (Software as a Service)** are the most popular and are
    very much in vogue in terms of new and interesting ways of making more money out
    of an existing software platform. You may recall that we briefly touched upon
    these in [Chapter 3](17779905-1394-4db1-995e-04c6af9a5125.xhtml), *Culture and
    Behaviors—The Cornerstones to Success*, in relation to third-party tools. The
    premise is pretty simple; you expose via **Application Programming Interfaces**
    (**APIs**) certain parts of functionality to a first or third party who that uses
    APIs to extend their software platform to include the functionality you provide.
    For example, if your software platform specialized in car rental bookings, you
    could expose APIs to a price comparison web site to allow their users to seamlessly
    book a car via your software platform.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多成熟的方法可以实现这一点，但**PaaS（平台即服务）**或**SaaS（软件即服务）**是最受欢迎的，并且在通过现有软件平台赚取更多收入的全新且有趣的方式中非常流行。你可能还记得我们在[第3章](17779905-1394-4db1-995e-04c6af9a5125.xhtml)，*文化与行为——成功的基石*中简要提到过这些内容，涉及第三方工具。其基本前提非常简单；你通过**应用程序编程接口**（**API**）将某些功能暴露给第一方或第三方，他们使用这些API扩展他们的软件平台，以包括你所提供的功能。例如，如果你的软件平台专注于汽车租赁预订，你可以将API暴露给一个价格比较网站，让他们的用户能够通过你的软件平台无缝地预订汽车。
- en: This type of approach has been around for many years, and sometimes referred
    to as B2B or similar), but has always been seen as something that is painful to
    implement, maintain, secure, monetize, and support—especially by businesses that
    deliver software in the traditional way. There's also complexity in terms of making
    any changes that could impact the APIs, which can lead to technical debt mounting
    up and/or upset customers/clients who use said APIs (see "never break your consumer"
    in [Chapter 5](6a4f746d-b386-49b3-b82b-154ff1f604e8.xhtml), *Approaches, Tools,
    and Techniques*). Counter to this is the problem that any API changes required
    are slow to deliver—more of a problem when the first/third party has adopted CD
    and DevOps and can move far quicker than you. This can sometimes lead to them
    looking at the completion for their next partner.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法已经存在多年，有时被称为 B2B 或类似的东西，但它一直被视为一种实施、维护、安全、变现和支持起来都非常痛苦的东西——尤其是对以传统方式交付软件的公司来说。在涉及对可能影响
    API 的任何更改时，也存在复杂性，这可能导致技术债务的积累和/或使使用这些 API 的客户/客户端不满（参见 [第 5 章](6a4f746d-b386-49b3-b82b-154ff1f604e8.xhtml)中的“永远不要破坏你的消费者”，“方法、工具与技术”）。与此相对的是，任何所需的
    API 更改交付速度较慢——当第一方或第三方已经采用了 CD 和 DevOps 并能比你更快地行动时，这成为了一个问题。这有时会导致他们开始寻找下一个合作伙伴。
- en: I wouldn't say that CD and DevOps adoption will enable this approach without
    some effort and investment, but it will drastically simplify the ability to get
    it up and running and then keep it running. This in turn should remove the perception
    that SaaS/PaaS is too painful to implement and should be seen as something that
    legitimately is a new and interesting way of leveraging your software platform.
    In addition, you'll tend to find that organizations that have already adopted
    CD and DevOps are more likely to work with suppliers who work in a similar way,
    as they know that new requirements can be implemented quickly and reliably and
    that collaboration is something that just happens.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会说 CD 和 DevOps 的采用可以在没有任何努力和投资的情况下实现这种方法，但它确实能大大简化使其启动和运行的过程，并保持其持续运行。这反过来应该消除“SaaS/PaaS
    实施起来过于痛苦”的看法，并应被视为一种利用软件平台的新颖且有趣的方法。此外，你还会发现，已经采用 CD 和 DevOps 的组织更有可能与那些以类似方式运作的供应商合作，因为他们知道新的需求可以快速且可靠地实现，且合作是自然而然发生的事情。
- en: Summary
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Throughout this chapter, we've focused on your evolution beyond leading the
    adoption of CD and DevOps and how you can help the business evolve beyond simply
    delivering quality software frequently. We've looked at some examples of how CD
    and DevOps can further improve the ways of working for everyone involved in product
    delivery and how either/both can help open up new opportunities for the business.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们专注于你在推动 CD 和 DevOps 采用之后的演变，以及你如何帮助业务发展超越仅仅是频繁交付高质量软件的阶段。我们回顾了一些例子，说明
    CD 和 DevOps 如何进一步改善所有参与产品交付的人的工作方式，以及它们如何为业务打开新的机会。
- en: You can probably think of scenarios and interesting problems more pertinent
    to your situation, organization, or business, but the point is that with CD and
    DevOps embedded within your ways of working, you are able to take the load off
    the Ops and Dev team, help them solve new problems, and improve the satisfaction
    of your customers both internally and externally.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你或许能想到一些与自己情况、组织或业务更相关的场景和有趣问题，但重点是，一旦 CD 和 DevOps 融入你的工作方式，你就能够减轻 Ops 和 Dev
    团队的负担，帮助他们解决新问题，并提高你内部和外部客户的满意度。
- en: Thus far, we have been sticking to the kinds of web/server-based software delivery
    that the founders of the CD and DevOps movements sought to optimize, streamline,
    and make far less painful. In our closing chapter, we'll look at how CD and DevOps
    can be used outside of their comfort zone, and how you could add yet more value
    to your organization and business.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在讲述 CD 和 DevOps 运动的创始人力求优化、简化并减少痛苦的网络/服务器软件交付方式。在我们的最后一章中，我们将探讨 CD
    和 DevOps 如何在它们的舒适区外使用，以及你如何为你的组织和业务带来更多的价值。
