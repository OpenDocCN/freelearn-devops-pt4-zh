- en: CD and DevOps Beyond Traditional Software Delivery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CD and DevOps are normally associated with delivering web server-based solutions—that's
    not to say it is exclusively the case, however; this is the norm. As you have
    learned, CD and DevOps are not specifically associated with tools or techniques.
    A true adoption of CD and DevOps is based on enhancing culture, behaviors, and
    ways of working to smoothen the flow of changes so that value can be delivered
    continuously. This means that they don't need to be constrained to the usual flavor
    of software delivery. Once your business has adopted CD and DevOps as the way
    we do things around here, you could, should, and can apply the same approaches
    to solve other business problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most obvious would be to apply the CD and DevOps approach to something
    that is normally painful for most businesses that delivery software solutions:
    mobile apps.'
  prefs: []
  type: TYPE_NORMAL
- en: CD, DevOps, and the mobile world
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CD and DevOps are based on culture, behaviors, and ways of working, and therefore
    applying these approaches to delivering mobile applications—which is a large and
    ever-growing industry—can work. That isn''t to say that it''s a cookie-cutter
    adoption; there are a few caveats in terms of how delivering mobile-application
    software differs from web-based/server-based software delivery, the main ones
    at the time of writing being as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Delivering software to a web platform 10 times per day seamlessly without impacting
    the end user is achievable—you are in full control of the infrastructure and the
    mechanism for releasing it. Doing the same with a mobile application will have
    a major impact on the end user—can you imagine what would happen if you sent a
    mobile app to end users' smartphones 10 times per day?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is no Ops team living within the end user's smartphone/tablet, speakers,
    fridge, lights, door locks, dog cams, and so on; therefore, the Ops side of the
    DevOps partnership doesn't strictly exist.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You cannot guarantee the spec, size, network capabilities, and so on, of the
    device you'll be deploying to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are not, strictly speaking, in control of the final distribution of your
    software.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So, how do you square this circle? Let's go through each in turn.
  prefs: []
  type: TYPE_NORMAL
- en: 'In relation to the first point, you wouldn''t realistically want to ship more
    frequently than every few weeks—even if you do have the capability—as this would
    simply spam the end user. You should therefore apply the release train approach.
    In essence, this amounts to incrementally building up the changes (which are all
    independently built, tested, and published via your CD pipeline) until such a
    point that you feel enough time has passed to ship. There is one exception to
    this: you can (and should) be shipping very frequently to internal beta test/dogfooding
    users so that they can try out the latest version whenever they want.'
  prefs: []
  type: TYPE_NORMAL
- en: In relation to the second point, unless you can miniaturize the Ops team and
    clone them millions of times, there's not a vast amount you can do. However, if
    you have followed the advice in [Chapter 5](6a4f746d-b386-49b3-b82b-154ff1f604e8.xhtml),
    *Approaches, Tools, and Techniques*, and [Chapter 7](390f69c0-7f66-41a7-93a6-ee5c1bc8733a.xhtml),
    *Vital Measurements*, you will have embedded analytics and metrics within your
    software and have in-depth monitoring in place, so you'll be able to spot issues
    out in the wild in exactly the same way as you would with the software running
    on your servers. If something is spotted, the Dev and Ops team can collaborate,
    work out what's wrong, and rectify it.
  prefs: []
  type: TYPE_NORMAL
- en: In relation to the third point, you could try to cater for this in your testing,
    but in all honesty that's a thankless task. I would recommend focusing on the
    bestsellers, and based upon analytics and metrics captured, ascertain which sizes,
    specs, and types of devices your users prefer—if you see usage of a specific device
    type trending up, then you should consider adding this to your list of supported
    devices and include it in your test-automation suite. Either that or look at using
    external solutions/providers that specialize in mobile-device testing—many can
    be driven via APIs, which means your testing solution can orchestrate and control
    the test's execution.
  prefs: []
  type: TYPE_NORMAL
- en: As regards the last point, there's not much you can do about it. The leading
    app stores are now very established and reliable, and have good global coverage.
    The advantage CD gives you is that the app store is in reality a binary repository,
    which is something your CD pipeline is already used to publishing to, so the mechanism
    of publishing your shippable app is very similar to that of your server-based
    software. In addition, most app stores will allow for automated updates, which
    means when you publish a new version of your app, the end users should get it
    soon after. There are, however, no guarantees, so you need to take into account
    that you'll have a few versions still out in the wild that need supporting.
  prefs: []
  type: TYPE_NORMAL
- en: This is realistically skimming the surface, but it goes some way to highlight
    how similar traditional server-based apps and mobile apps are in terms of the
    SDLC process.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you may be reading this and thinking that there are a vast number of tech
    companies that are building and shipping mobile apps without formally following
    the CD and DevOps approach we've been going through within this book, so why should
    you bother? Because you can, and it will add value. The work undertaken to embed
    collaboration, trust, and honesty within your organization can easily be applied
    to your mobile apps. You have implemented tools and techniques to automate the
    process of building, testing, shipping, and monitoring your server platform, so
    extending these for your mobile apps should be (relatively) straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: Added to this is the fact that mobile apps can now be written in the same technologies
    as you would use on a server-based website and built into native mobile apps.
    This, in turn, means that the same code base could potentially be shipped to both
    server and mobile; therefore, using the same techniques, tools, and approaches
    will make the process seamless and save a hell of a lot of time, effort, and money.
  prefs: []
  type: TYPE_NORMAL
- en: Another non-traditional area to which you can apply CD and DevOps ways of working
    is completely outside the world of software delivery.
  prefs: []
  type: TYPE_NORMAL
- en: Expanding beyond software delivery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, this book has been espousing the advantages of the adoption CD and DevOps
    to vastly improve the capability to deliver software seamlessly, quickly, and
    continuously. CD and DevOps need not be restricted to software/product delivery.
  prefs: []
  type: TYPE_NORMAL
- en: The tools, processes, and best practices that come with this way of working
    can be extended to include other areas of the business. There will, of course,
    have to be some tweaks and changes to some of the tools and techniques, but on
    the whole it's the behavioral, cultural, and environmental elements that are important.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at some areas outside of software delivery that can benefit from
    the CD and DevOps ways of working approach, starting with UX and design.
  prefs: []
  type: TYPE_NORMAL
- en: UX and design
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most business that deliver software—especially software that includes user interfaces
    (web sites, desktop apps, and so on)—will have some form of UX and/or design team
    involved in working on the UI and user experience assets (wireframes, and so on).
    Even the most agile of organizations will—on the whole—work in a waterfall way
    when it comes to UX and design. For example, most UX and design teams normally
    sit outside of software engineering. The usual approach is to have the assets
    created up front—before development starts—which are fed into the product backlog.
    Agile software-development approaches go some way to overcoming this, but the
    thing that most don't focus on is the need for close collaboration and the importance
    of culture, behaviors, ways of working, and delivering continuously.
  prefs: []
  type: TYPE_NORMAL
- en: You can (and should) take your newfound experience and skills and apply them
    to improving the way in which design and UX assets are built and delivered. If
    you collaborate with the UX/design team and get them to consider how these assets
    can be broken down into smaller logical chunks—as you did with your software platform—and
    have them delivered incrementally, you may find that things become smoother, more
    streamlined, and less wasteful. In terms of tools, there are plenty of well-established
    and mature design/UX software solutions that incorporate collaboration features
    and agile delivery.
  prefs: []
  type: TYPE_NORMAL
- en: Business process improvements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's presume that you have followed the advice within this book and have identified
    and removed the waste from your product delivery process, which is now optimal
    and efficient due to the adoption of CD and DevOps, but there are business functions
    and processes that sit before and/or after the actual product delivery process
    that are starting to slow things down.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you may have a team managing the sales leads and business portfolio/requirements-gathering,
    which feeds into product delivery or post-delivery implementation/support teams,
    both/either of which are struggling to keep up with the rapid volume of changes.
  prefs: []
  type: TYPE_NORMAL
- en: There is no reason why using the same techniques covered earlier in this book
    cannot be used to address wider-reaching business problems. As an organization,
    you now have the experience, confidence, and respect to take something that is
    unwieldy and cumbersome and streamline it to work more effectively, so why not
    apply this further afield?
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b95ed6ae-d77c-46e1-b2ca-898eff9356b9.png)'
  prefs: []
  type: TYPE_IMG
- en: Going back to the previous example, you should be able to isolate business processes
    that precede and follow your product delivery process and go through a similar
    process of inspection (finding the elephant), address behavioral, cultural, and
    environmental issues, and define and implement tools, techniques, and approaches
    to streamline and measure outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: Doing this could provide even greater business value and allow more parts of
    the business to realize the huge benefits of the CD and DevOps ways of working.
    The more seamless your overall business process is, the greater the overall impact.
    If you can capture customer requirements in an effective and efficient way, you
    can deliver what they want and provide the level of service they expect.
  prefs: []
  type: TYPE_NORMAL
- en: Business growth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Previously, we covered PaaS and Saas as models of delivering software solutions
    to your customers, but what about looking at new business opportunities? If you
    have successfully implemented automated provisioning, you may want to look into
    extending your business to provide IaaS to your customers—after all, you have
    the expertise to do this for yourselves, so why not your customers?
  prefs: []
  type: TYPE_NORMAL
- en: Other areas of business growth could come from leveraging the skills and experience
    now embedded within your organization. Think back to when you needed the help
    of experts in the field of CD and DevOps. On the presumption that you acquired
    some assistance, I would wager that it was not cheap. What if your customers themselves
    delivered their own software but needed assistance getting started with adopting
    CD and DevOps? You may be able to offer such assistance as a value-add—maybe you
    should suggest they buy a few copies of this book? Don't blame me for trying.
  prefs: []
  type: TYPE_NORMAL
- en: Optimized feedback loops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This phrase has been knocking around for a while in relation to agile software
    delivery approaches. For those not in the know, this relates to reducing the time
    taken to get feedback from users in terms of how the software you have supplied
    functions, works, and operates. This can come in many forms—NPS (net promoter
    score) functionality, feedback forms, rating score— but the main thing is to get
    this feedback as soon as possible. If you have adopted CD and DevOps and have
    the ability to deliver changes rapidly, then you really need feedback in a timely
    manner to ensure what has been delivered matches expectations (and quality standards).
    There's pretty much no point in getting feedback two or three months after the
    feature has been built as the world may have moved on and the feedback is therefore
    worthless.
  prefs: []
  type: TYPE_NORMAL
- en: The simplest form of optimized feedback loops is to leverage the enhancing culture,
    behaviors, and collaboration now embedded within the organization to get open
    and honest views from internal team members (or anyone else within the organization)
    as the features and functionality are incrementally being delivered through the
    CD pipeline. You can utilize the self-service functionality mentioned in [Chapter
    9](0069e24c-33a3-410a-a2b1-f86895bb646f.xhtml), *Expanding Your Opportunity Horizon*.
    However, the greater value will come from getting feedback from the target end
    users in a timely manner.
  prefs: []
  type: TYPE_NORMAL
- en: With CD and DevOps adoption giving you the ability to ship software quickly,
    repeatably, and reliably, you should be able to incorporate tooling to capture
    feedback (such as those mentioned previously) from end users, which, if combined
    with the metrics and analytics you have embedded (see [Chapter 7](390f69c0-7f66-41a7-93a6-ee5c1bc8733a.xhtml),
    *Vital Measurements*), will give you some very rich feedback and associated data.
    Traditionally, this feedback would be collected and/or collated by a team outside
    of software engineering, whereas with the CD and DevOps ways of working, the software
    engineering team will be used to working with such data so they can react relatively
    quickly.
  prefs: []
  type: TYPE_NORMAL
- en: As I say, CD and DevOps is not just about delivering software; the way things
    get done, the collaboration, the open and honest environment, the trust-based
    relationships, and even the language used, can and will help revitalize and enhance
    any business process.
  prefs: []
  type: TYPE_NORMAL
- en: What about me?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The preceding are simply examples, but none will have the chance of becoming
    a reality without someone helping the business and steering it in the right direction.
    Like it or not, you will have the experience, skills, and reputation as the go-to
    person for things related to CD and DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: You now have the opportunity to start a new journey and help the business help
    itself by driving forward the sort of changes that can only be realized with a
    mature and strong CD and DevOps culture.
  prefs: []
  type: TYPE_NORMAL
- en: If this doesn't float your boat, then maybe keeping up with the ever-changing
    and ever-growing CD and DevOps landscape is your thing. Just trying to keep up
    with the new ways to do things, new tools, new ideas, and new insights could take
    most of your time and attention. More and more businesses are realizing the huge
    value of having evangelists in their ranks— especially when it comes to software
    and product delivery.
  prefs: []
  type: TYPE_NORMAL
- en: You might have hooked yourself into the global CD and DevOps communities, which
    will give you an opportunity to share or present your experiences with others
    and, more importantly, bring others' experiences and knowledge back into your
    business. Maybe you could even capture this and publish it on public blogs and
    forums, or even get it printed in book form. Stranger things have happened.
  prefs: []
  type: TYPE_NORMAL
- en: 'Whatever you choose to do, you will not be bored, and nor will you be able
    to go back to how things were. You have learned a very valuable lesson: there
    is a better way, and CD and DevOps is it.'
  prefs: []
  type: TYPE_NORMAL
- en: What have you learned?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I keep making references to your experience, knowledge, and expertise, but
    until you have actually gone through the motions of adopting and implementing
    CD and DevOps, this will amount to what you have read. Let''s take a final chance
    to recap what we have covered:'
  prefs: []
  type: TYPE_NORMAL
- en: CD and DevOps are not just about technical choices and tools; a vast amount
    of the success is built on the behaviors, culture, and environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing and adopting CD and DevOps is a journey that might seem long and
    daunting at first, but once you've taken the first step and then put one foot
    in front of the other, you'll hardly notice the miles passing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Teams who have successfully adopted CD and DevOps seldom regret it or are tempted
    to go back to the bad old days when releases were synonymous with working weekends
    and late nights—working late nights and weekends should be synonymous with innovation
    and wanting to create some killer app or the next world-changing technological
    breakthrough.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You don't have to adopt both CD and DevOps at the same time, but one complements
    the other. You don't have to, but you should seriously consider it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where you do need to make technical choices, ensure that you implement something
    that enhances and complements your ways of working—never change your ways of working
    to fit the tooling.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be big and scary, but if you start with your eyes wide open, you should
    be able to get through. CD and DevOps are now very well-established and there
    is a global community available that can help and give advice, so don't be afraid
    to reach out.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't start implementing CD or DevOps just because it's the next big thing that
    everyone else is doing. You need to have a good reason to adopt both/either, or
    you will not reap the benefits, and nor you will truly believe in what you are
    doing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although we have covered a vast amount, you don't have to implement everything
    you have read about; take the best parts that work for you and your situation
    and go from there—just as you would with any good agile methodology.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Just because you can ship software doesn't mean you are done. CD and DevOps
    are ways of working, and the approaches within can be applied to other business
    areas and problems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Share failures and successes so that you learn and others have the opportunity
    to learn from you.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book, like all good things, has come to an end. As pointed out numerous
    times, we've covered quite a lot in these pages. This book is by no means the
    definitive opus for adopting CD and DevOps; it is a collection of suggestions
    laid out in a logical order based on real-world experience and war stories. I
    recommend you put some effort into fleshing out your knowledge with other reading
    materials and books, or even attending a conference or two.
  prefs: []
  type: TYPE_NORMAL
- en: Even if you are simply window-shopping and looking at what is needed to implement
    and adopt CD and DevOps ways of working, you should now have a clearer idea of
    what you are getting yourself and your organization into. Forewarned is forearmed,
    as they say. It's not an easy journey, but it is worth it.
  prefs: []
  type: TYPE_NORMAL
- en: So, go grab yourself a hot beverage, a notepad, and a pen; skip back to [Chapter
    2](03ef279d-c51d-4e35-a137-701636c17d5f.xhtml), *Understanding Your Current Pain
    Poin*ts, and start mapping out why you need to adopt CD and DevOps and how you
    are going to do it.
  prefs: []
  type: TYPE_NORMAL
- en: Go on then. Stop reading and go!
  prefs: []
  type: TYPE_NORMAL
- en: Good luck!
  prefs: []
  type: TYPE_NORMAL
