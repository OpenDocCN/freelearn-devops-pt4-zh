- en: Rumblings Of An Old Men
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 《老年人的低语》
- en: I spend a significant chunk of my time helping companies improve their systems.
    The most challenging part of my job is going back home after an engagement knowing
    that the next time I visit the same company, I will discover that there was no
    significant improvement. I cannot say that is not partly my fault. It certainly
    is. I might not be very good at what I do. Or maybe I am not good at conveying
    the right message. Maybe my advice was wrong. There can be many reasons for those
    failures, and I do admit that they are probably mostly my fault. Still, I cannot
    shake the feeling that my failures are caused by something else. I think that
    the root cause is in false expectations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我花费了大量时间帮助公司改善他们的系统。我工作中最具挑战性的一部分是，在一次合作结束后回到家，知道下次再次拜访同一家公司时，我会发现没有任何实质性的改进。我不能说这完全不是我的错，确实是。可能我在做的事情上并不够好，或者我不擅长传达正确的信息，也许我的建议是错误的。造成这些失败的原因有很多，我承认它们大部分可能是我的错。然而，我还是无法摆脱一种感觉，觉得我的失败是由其他原因引起的。我认为根本原因在于错误的期望。
- en: People want to improve. That is in our nature. Or, at least, most of us do.
    We became engineers because we are curious. We like to play with new toys. We
    love to explore new possibilities. And yet, the more we work in a company, the
    more we become complacent. We learn something, and then we stop learning. We shift
    our focus towards climbing company ladders. The more time passes, the more emphasis
    we put on defending our positions which often mean the status quo.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 人们想要进步，这是我们天性的一部分。或者至少，大多数人是如此。我们成为工程师是因为我们充满好奇心。我们喜欢玩新的玩具，喜欢探索新的可能性。然而，随着我们在公司工作时间的增长，我们变得越来越自满。我们学到一些东西，然后就停止学习。我们的重点转向了爬升公司阶梯。时间一长，我们越来越注重捍卫自己的地位，而这通常意味着维持现状。
- en: We become experts in something, and that expertise brings us to glory and, hopefully,
    it lands a promotion, or two. From there on, we ride on that glory. *Look at me,
    I’m a DB2 expert. That’s me, I set up VMWare virtualization. I brought the benefits
    of Spring to our Java development.* Once that happens, we often try to make sure
    that those benefits stay intact forever. We won’t switch to NoSQL because that
    would mean that my DB2 expertise is not as valuable anymore. We won’t move to
    Cloud, because I am the guru behind VMWare. We will not adopt Go, because I know
    how to code in Java.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在某个领域变得非常专业，这种专业知识让我们获得了荣耀，并希望能带来一次或两次晋升。从那以后，我们就靠着这种荣耀前行。*看我，我是 DB2 专家，没错，就是我，设立了
    VMWare 虚拟化。我把 Spring 的好处带到了我们的 Java 开发中。* 一旦发生这种情况，我们往往会试图确保这些好处永远保持不变。我们不会转向
    NoSQL，因为那意味着我的 DB2 专业知识将不再那么有价值。我们不会转向云计算，因为我是 VMWare 背后的大师。我们不会采用 Go，因为我知道如何用
    Java 编程。
- en: Those voices are critical because they are being voiced by senior people. Everyone
    needs to listen to them, even though the real motivations behind those voices
    are selfish. They are not based on actual knowledge, but often on repeated experience.
    Having twenty years of experience with DB2 is not truly twenty years of improvement,
    but rather the same experience repeated twenty times. Yet, twenty years has weight.
    People listen to you, but not because they trust you, but because you are senior
    and management believes in your capabilities to make decisions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这些声音很重要，因为它们是由资深人士发出的。每个人都需要听他们说话，尽管这些声音背后的真正动机往往是自私的。它们并非基于实际的知识，而是基于反复的经验。拥有二十年
    DB2 经验并不等于二十年的进步，而是将同样的经验重复了二十次。然而，二十年的经验是有分量的。人们听你说话，并不是因为他们信任你，而是因为你资历深厚，管理层相信你有能力做出决策。
- en: Combine voices from the old with management’s fear of unknown and their quest
    for short-term benefits. The result is often status quo. *That worked for years,
    why would we change it to something else. Why would I trust a junior developer
    telling me what to do?* Even if a claim for change is backed by the experience
    from giants like Google, Amazon, and Netflix (just to name a few), you are likely
    to get a response along the following lines. *“We are different”*. *“That does
    not apply here.”* *“I’d like to do that but regulations, which I do not truly
    understand, prevent me from changing anything.”*
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 将老一辈的声音与管理层对未知的恐惧以及他们对短期利益的追求相结合，结果往往是维持现状。*那样做有效好多年了，为什么要改变呢？为什么要听一个初级开发人员告诉我该做什么？*
    即使改变的倡导得到了像 Google、Amazon 和 Netflix 等巨头的经验支持（仅举几例），你也可能会得到类似以下的回应：*“我们不一样。”* *“这里不适用。”*
    *“我想做那件事，但由于一些我并不完全理解的规定，阻止了我做任何改变。”*
- en: Still, sooner or later, a directive to change comes along. Your CTO might have
    gone to the Gartner meeting where he was told to switch to microservices. Too
    many people spoke about Agile for upper management to ignore it. DevOps is a huge
    thing, so we need to employ it as well. Kubernetes is everywhere, so we’ll start
    working on a PoC soon.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，迟早会有改变的指令传来。你的CTO可能去了Gartner会议，在那里他被告知要转向微服务。太多人谈论敏捷，管理层不可能忽视。DevOps是个大趋势，所以我们也需要实施它。Kubernetes无处不在，所以我们很快就会开始做一个PoC。
- en: When those things do happen, when a change is approved, you might be ecstatic.
    This is your moment. This is when you’ll start doing something delicious. That
    is often the moment when I receive a call. *“We want to do this and that. Can
    you help us?”* I usually (not always) say yes. That’s what I do. And yet, I know
    that my engagement will not produce a tangible improvement. I guess that hope
    dies last.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 当这些事情真的发生时，当一个改变获得批准时，你可能会欣喜若狂。这是你的时刻。这时你会开始做一些令人兴奋的事情。往往正是这个时刻，我会接到电话。*“我们想做这个和那个，你能帮忙吗？”*
    我通常（并非总是）会答应。这就是我的工作。尽管如此，我知道我的参与不会带来实质性的改进。我猜希望总是最后死去。
- en: Why am I so pessimistic? Why do I think that improvements do not produce tangible
    benefits? The answer lies in the scope of required changes.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我为什么这么悲观？为什么我认为改进并不会带来切实的好处？答案在于所需改变的范围。
- en: Almost every tool is a result of specific processes. A process, on the other
    hand, is a product of a particular culture. Adopting a process without making
    cultural changes is a waste of time. Adopting tools without accepting the processes
    behind them is a futile effort that will result only in wasted time and potentially
    substantial license costs. In infrequent occasions, companies do choose to accept
    the need to change all three (culture, processes, and tools). They make a decision,
    and sometimes they even start moving in the right direction. Those are precious
    cases that should be cherished. But they are likely to fail as well. After a while,
    usually a few months later, we realize the scope of those changes. Only the brave
    will survive, and only those committed will see it through.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎每个工具都是特定流程的结果。另一方面，一个流程是某种文化的产物。如果在没有文化改变的情况下采用一个流程，那就是浪费时间。如果在没有理解背后流程的情况下采用工具，那也是徒劳的努力，结果只会是浪费时间，并可能导致可观的许可费用。在一些罕见的情况下，企业确实选择接受改变三者（文化、流程和工具）的需要。他们做出了决定，有时他们甚至开始朝着正确的方向迈进。这些是珍贵的案例，值得珍惜。但它们也可能失败。过了一段时间，通常是几个月后，我们会意识到这些改变的范围。只有勇敢的人才能生存下来，只有那些坚定的人才能坚持到底。
- en: Those who do choose to proceed and indeed change their culture, and their processes,
    and their tools, will realize that they are incompatible with the applications
    they’ve been developing over the years. Containers work with everything, but benefits
    are genuinely tremendous when developing microservices, not monoliths. Test-driven
    development increases confidence, quality, and speed, but only if applications
    are designed to be testable. Zero-downtime deployments are not a myth. They work,
    but only if our applications are cloud-native, if they follow at least some of
    [twelve factors](https://12factor.net/), and so on.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 那些选择继续前进并真正改变他们的文化、流程和工具的人，会意识到它们与他们多年来开发的应用程序不兼容。容器与所有东西兼容，但当开发微服务时，效果才真正显著，而不是单体应用。测试驱动开发提高了信心、质量和速度，但前提是应用程序设计必须具有可测试性。零停机时间部署并不是神话。它们确实有效，但前提是我们的应用程序是云原生的，至少遵循了[十二因素](https://12factor.net/)等标准，等等。
- en: It’s not only about tools, processes, and culture, but also about getting rid
    of the technical debt you’ve been accumulating over the years. By debt, I don’t
    necessarily mean that you did something wrong when you started, but rather that
    time converted something awesome into a horrible monster. Do you spend fifty percent
    of your time refactoring? If you’re not, you’re accumulating technical debt. It’s
    unavoidable.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这不仅仅是关于工具、流程和文化，还包括摆脱你多年来积累的技术债务。说到债务，我不一定是指你开始时做错了什么，而是时间把一些曾经很棒的东西变成了可怕的怪物。你是否花费了百分之五十的时间进行重构？如果没有，你就在积累技术债务。这是不可避免的。
- en: When faced with all those challenges, giving up is the expected outcome. It’s
    human to throw down the towel when there’s no light at the end of the tunnel.
    I don’t judge you. I feel your pain. You’re not moving forward because the obstacles
    are too big. Still, you have to get up because there is no alternative. You will
    continue. You will improve. It’ll hurt a lot, but there is no alternative, except
    slow death while your competition is looking over your soon-to-be corpse.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当面对所有这些挑战时，放弃是预期的结果。当隧道尽头没有一丝光明时，扔下毛巾是人之常情。我不会责怪你。我感同身受。你没有前进，因为障碍太大了。但你必须站起来，因为没有其他选择。你会继续前行。你会进步。这会很痛苦，但除了你的竞争对手看着你即将死去的躯壳时缓慢死去之外，别无选择。
- en: You got this far, and I can assume only two possible explanations. You are one
    of those who read technical books as a way to escape from reality, or you are
    applying at least some of the things we discussed thus far. I hope it’s the latter.
    If that’s the case, you do not fall into “yet another failure of mine.” I thank
    you for that. It makes me feel better.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经走到了这一步，我只能假设有两种可能的解释。你是那些通过阅读技术书籍来逃避现实的人之一，或者你至少应用了我们迄今所讨论的一些内容。我希望是后者。如果是这样，你就不会成为“我又失败了”的又一个例子。我为此感谢你。这让我感觉好一些。
- en: If you do employ the lessons from this book, without faking, you are indeed
    doing something great. There is no way of pretending continuous delivery (CD).
    Every commit you make is ready for production if all the stages are green. The
    decision whether to deploy it to production is based on business or marketing
    needs, and it is not technical in any sense. You can even take a step forward
    and practice continuous deployment (CDP). It removes the only action performed
    by a human and deploys every green commit to production. Neither of the two can
    be faked. You cannot do CD or CDP partly. You cannot be almost there. If you are,
    you’re doing continuous integration, it-will-be-deployed-eventually process, or
    something else.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你真正应用了这本书的教训，而不是假装，你确实在做一件伟大的事情。没有办法假装持续交付（CD）。如果所有阶段都通过，你每次提交的代码都可以立即投入生产。是否部署到生产环境是基于业务或市场需求的决策，而非技术上的。你甚至可以更进一步，实践持续部署（CDP）。它消除了人为执行的唯一动作，并将每个通过的代码提交都部署到生产环境。这两者都不能假装。你不能部分地进行CD或CDP。你不能几乎到达目标。如果你做到了，你只是在进行持续集成、最终会被部署的过程，或者其他什么操作。
- en: All in all, you are, hopefully, ready to do this. You will take a step towards
    continuous deployment inside a Kubernetes cluster. By the end of this book, the
    only thing left for you is to spend an unknown amount of time “modernizing” architecture
    of your applications or throwing them to thrash and starting over. You’ll be changing
    your tools, processes, and culture. This book will not help you with all of those.
    We’re focused on tools and processes. You’ll have to figure out what to do with
    your culture and architecture. The same holds true for the way you write your
    tests. I won’t teach you testing, and I won’t preach TDD. I’ll assume that you
    already know all that and that we can focus on continuous deployment pipeline
    only.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 总而言之，希望你已经准备好了。你将在 Kubernetes 集群内迈出实施持续部署的一步。在本书结束时，你唯一剩下的事情就是花费未知的时间“现代化”你的应用架构，或者将它们抛弃重来。你将改变你的工具、流程和文化。本书不会帮助你处理所有这些。我们专注于工具和流程。你将不得不自行解决文化和架构的问题。测试的方式也是如此。我不会教你测试，也不会宣扬TDD。我假设你已经了解所有这些，我们可以专注于持续部署管道。
- en: At this moment, you might feel desperate. You might not be ready. You might
    think that you don’t have a buyout from your management, that the people in your
    company will not accept this direction, or that you don’t have enough time and
    funds. Do not get depressed. Knowing the path is the most crucial part. Even if
    you cannot get there any time soon, you should still know what the destination
    is, so that your steps are at least moving you in the right direction.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你可能感到绝望。你可能还没准备好。你可能认为你的管理层没有同意，你公司的人员不会接受这个方向，或者你没有足够的时间和资金。不要沮丧。知道路径是最关键的部分。即使你不能立即到达那里，你也应该知道目的地是什么，这样你的步骤至少是朝着正确的方向迈进。
- en: What Is Continuous Deployment?
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是持续部署？
- en: That’s it. That’s the shortest, and probably the most accurate definition of
    continuous deployment you’ll ever find. Is that too much for you? If you don’t
    think you can (or should) ever get there, we can fall back to continuous delivery.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。这就是你能找到的最简短、最准确的持续部署定义。对你来说这是不是太多了？如果你认为你永远不能（或不应该）做到这一点，那我们可以退回到持续交付。
- en: The only substantial difference between continuous deployment (CDP) and continuous
    delivery (CD) is that one deploys to production while the other requires that
    we choose which commit is deployed to production. That’s much easier, isn’t it?
    Actually, it isn’t. It’s almost the same since in both cases we are so confident
    in the process that every commit is or can be deployed to production. In the case
    of continuous delivery, we (humans) do need to make a decision on what to deploy.
    However, that is the cause of significant confusion. What follows is the vital
    part so please read it carefully.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 持续部署（CDP）和持续交付（CD）之间唯一实质性的区别是，前者将代码部署到生产环境，而后者需要我们选择要部署到生产环境的提交。这样不就简单多了吗？实际上并不是。其实几乎一样，因为在这两种情况下，我们都对流程有足够信心，认为每个提交都可以部署到生产环境。在持续交付的情况下，我们（人类）确实需要决定部署什么内容。但这正是导致重大混乱的原因。接下来是关键部分，请认真阅读。
- en: If every commit (that did not fail the pipeline) is deployable to production,
    there is no need for an engineer to decide what will be deployed. **Every commit
    is deployable**, we just might not want to have a feature available to users straight
    away. It’s a business decision. Period.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果每次提交（没有失败管道的提交）都可以部署到生产环境，那么就不需要工程师决定什么内容会被部署。**每个提交都可以部署**，我们只是可能不希望功能立刻对用户可用。这是一个商业决策。就这样。
- en: As a learning experience, you should take the least technical person in a company
    and put him (or her) in front of a screen with the builds and let him (or her)
    choose which release to deploy. Someone from cleaning services is an excellent
    candidate to be that person. Now, before that person clicks the button to deploy
    a random release, you need to remove yourself from that room.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种学习经验，你应该让公司里技术能力最弱的人坐到屏幕前，查看构建情况，并让他（或她）选择要部署的版本。清洁服务的工作人员就是一个很好的候选人。在那个人点击按钮部署一个随机版本之前，你需要离开那个房间。
- en: Here comes the critical question. How would you feel in that situation? If you’d
    go to the closest bar to have a coffee confident that nothing wrong will happen,
    you are in the right place. If you would have a nervous breakdown, you’re still
    far from being there. If that’s the case, do not despair. Most of us would have
    a nervous breakdown from letting a random person deploy a random release. That’s
    not what matters. What is important is whether you want to get there. If you do,
    read on. If you don’t, I hope you’re reading a free sample of the book, and you
    can make an educated decision not to waste money. Get something else to read.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有个关键问题。你在那种情况下会有什么感受？如果你可以自信地去最近的酒吧喝咖啡，确信什么问题也不会发生，那么你就处在正确的位置。如果你会因此产生焦虑，那你离那里还很远。如果是这种情况，不必绝望。大多数人也会因为让一个随机的人部署一个随机版本而感到焦虑。但这并不重要。重要的是你是否想要达到那个目标。如果你想，那么继续往下读。如果你不想，那希望你只是在阅读本书的免费样章，并能做出明智的决定，避免浪费钱。换一本书读吧。
- en: “Hold on,” you might say. “I am already doing continuous integration,” could
    be the thought in your head right now. “Is continuous delivery or deployment truly
    that different?” Well, the answer is that it’s not, but that you probably misunderstood
    what continuous integration is. I won’t even try to define it for you. Over fifteen
    years passed since CI became a thing. I will, however, ask you a few questions.
    If you answer with “no” to at least one of them, you’re not doing CI. Here it
    goes.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: “等一下，”你可能会说，“我已经在做持续集成了，”你现在可能会这样想。“那么，持续交付或持续部署真的那么不同吗？”好吧，答案是它们并没有本质不同，但你可能误解了持续集成的定义。我甚至不打算给你定义它。自从持续集成成为一种实践已有超过十五年了。不过，我会问你几个问题。如果你对其中至少一个问题的回答是“否”，那么你并没有在做持续集成。开始吧。
- en: Are you building and, at least partially, testing your application on every
    commit without exceptions and no matter to which branch that commit is pushed
    to?
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你是否在每次提交时都在构建并至少部分测试你的应用程序，无论该提交被推送到哪个分支？
- en: Is everyone committing at least once a day?
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个人每天至少提交一次吗？
- en: Do you merge your branches to the *master* after a couple of days, if not more
    frequently?
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你在几天后才将分支合并到*master*，而不是更频繁地合并，你会怎么做？
- en: Do you stop doing whatever you’re doing to fix a failed build? Is that the highest
    priority (after fire emergency, earthquakes, and other life-threatening events)?
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当构建失败时，你是否会停下正在做的事情去修复？这是否是最高优先级的任务（仅次于火灾紧急情况、地震和其他威胁生命的事件）？
- en: That’s it. Those are the only questions you need to answer. Be honest with yourself.
    Did you really respond with “yes” to all four of those questions? If you did,
    you’re my hero. If you didn’t, there is only one more question left to answer.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这些。这些是你需要回答的唯一问题。对自己诚实一下。你真的对这四个问题都回答了“是”吗？如果是的话，你就是我的英雄。如果不是，剩下的只有一个问题需要回答。
- en: '**Do you really want to do continuous integration (CI), delivery (CD), or deployment
    (CDP)?**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**你真的想做持续集成（CI）、持续交付（CD）或持续部署（CDP）吗？**'
