- en: Enabling Process Communication With Kube API Through Service Accounts
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过 Service Accounts 启用与 Kube API 的进程通信
- en: When we (humans) try to access a Kubernetes cluster with RBAC enabled, we are
    authenticated as users. Our username provides an identity that API server uses
    to decide whether we are allowed to perform intended actions. Similarly processes
    running inside containers might also need to access the API. In such cases, they
    are authenticated as a specific ServiceAccount.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们（人类）尝试访问启用了 RBAC 的 Kubernetes 集群时，我们会以用户身份进行身份验证。我们的用户名提供了一个身份，API 服务器利用这个身份来判断我们是否有权限执行预定的操作。同样，容器内运行的进程也可能需要访问
    API。在这种情况下，它们会作为特定的 ServiceAccount 进行身份验证。
- en: ServiceAccounts provide a mechanism to grant permissions to processes running
    inside containers. In many ways, ServiceAccounts are very similar to RBAC users
    or groups. With humans, we use RoleBindings and ClusterRoleBindings to relate
    users and groups to Roles and ClusterRoles. When working with processes, the main
    difference is in the name and the scope. Instead of users or groups, we create
    ServiceAccounts which we bind to roles.However unlike users that can be global,
    ServiceAccounts are tied to specific Namespaces.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: ServiceAccounts 提供了一种机制，用于授予在容器内运行的进程权限。在许多方面，ServiceAccounts 与 RBAC 用户或组非常相似。对于人类用户，我们使用
    RoleBindings 和 ClusterRoleBindings 将用户和组与 Roles 和 ClusterRoles 关联起来。而在处理进程时，主要的区别在于名称和作用范围。我们不是创建用户或组，而是创建
    ServiceAccounts，并将它们绑定到角色上。然而，与可以是全局的用户不同，ServiceAccounts 仅绑定到特定的 Namespace。
- en: We won’t go into any more theory. Instead, we’ll try to learn different aspects
    of ServiceAccounts through hands-on examples.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会再深入探讨理论，而是通过实际操作来学习 ServiceAccounts 的不同方面。
- en: Creating A Cluster
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个集群
- en: We’ll start the hands-on walk-through by entering the directory where we cloned
    the `vfarcic/k8s-specs` repository.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过进入我们克隆的 `vfarcic/k8s-specs` 仓库所在的目录来开始实际操作演示。
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
