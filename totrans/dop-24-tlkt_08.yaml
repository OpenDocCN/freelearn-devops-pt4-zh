- en: Enabling Process Communication With Kube API Through Service Accounts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we (humans) try to access a Kubernetes cluster with RBAC enabled, we are
    authenticated as users. Our username provides an identity that API server uses
    to decide whether we are allowed to perform intended actions. Similarly processes
    running inside containers might also need to access the API. In such cases, they
    are authenticated as a specific ServiceAccount.
  prefs: []
  type: TYPE_NORMAL
- en: ServiceAccounts provide a mechanism to grant permissions to processes running
    inside containers. In many ways, ServiceAccounts are very similar to RBAC users
    or groups. With humans, we use RoleBindings and ClusterRoleBindings to relate
    users and groups to Roles and ClusterRoles. When working with processes, the main
    difference is in the name and the scope. Instead of users or groups, we create
    ServiceAccounts which we bind to roles.However unlike users that can be global,
    ServiceAccounts are tied to specific Namespaces.
  prefs: []
  type: TYPE_NORMAL
- en: We won’t go into any more theory. Instead, we’ll try to learn different aspects
    of ServiceAccounts through hands-on examples.
  prefs: []
  type: TYPE_NORMAL
- en: Creating A Cluster
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ll start the hands-on walk-through by entering the directory where we cloned
    the `vfarcic/k8s-specs` repository.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
