- en: Defining Continuous Deployment
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义持续部署
- en: We should be able to execute most of the CDP steps from anywhere. Developers
    should be able to run them locally from a Shell. Others might want to integrate
    them into their favorite IDEs. The number of ways all or parts of the CDP steps
    can be executed might be quite huge. Running them as part of every commit is only
    one of those permutations. The way we execute CDP steps should be agnostic to
    the way we define them. If we add the need for very high (if not complete) automation,
    it is clear that the steps must be simple commands or Shell scripts. Adding anything
    else to the mix is likely to result in tight coupling which limits our ability
    to be independent of the tools we’re using to run those steps.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该能够从任何地方执行大部分CDP步骤。开发人员应该能够在本地的Shell中运行它们。其他人可能希望将它们集成到他们最喜欢的IDE中。所有或部分CDP步骤的执行方式可能非常多样。将它们作为每次提交的一部分运行只是其中的一种排列方式。我们执行CDP步骤的方式应该与定义它们的方式无关。如果我们增加了对非常高（如果不是完全）自动化的需求，很明显这些步骤必须是简单的命令或Shell脚本。向其中添加其他内容可能会导致紧耦合，从而限制我们在使用工具运行这些步骤时的独立性。
- en: Our goal in this chapter is to define the minimum number of steps a continuous
    deployment process might need. From there on, it would be up to you to extend
    those steps to serve a particular use-case you might be facing in your project.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是定义持续部署过程中可能需要的最少步骤。从那里开始，具体的步骤扩展将由你来完成，以满足你在项目中可能遇到的特定用例。
- en: Once we know what should be done, we’ll proceed and define the commands that
    will get us there. We’ll do our best to create the CDP steps in a way that they
    can be easily ported to other tools. We’ll try to be tools agnostic. There will
    always be some steps that are very specific to the tools we’ll use, but I hope
    that they will be limited to scaffolding, and not the CDP logic.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们知道应该做什么，我们将继续定义实现目标所需的命令。我们会尽力以一种方式来创建CDP步骤，使其能够轻松地移植到其他工具中。我们会尽量避免与工具绑定。总会有一些步骤是非常特定于我们使用的工具的，但我希望这些步骤仅限于搭建框架，而不是CDP的逻辑。
- en: Whether we’ll manage to reach our goals entirely is yet to be seen. For now,
    we’ll ignore the existence of Jenkins and all the other tools that could be used
    to orchestrate our continuous deployment processes. Instead, we’ll focus purely
    on Shell and the commands we need to execute. We might write a script or two though.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们是否能完全实现我们的目标，还需要观察。现在，我们暂时忽略Jenkins以及所有可能用于编排持续部署过程的其他工具。相反，我们将专注于Shell和我们需要执行的命令。虽然我们可能会写一两个脚本。
- en: To Continuously Deliver Or To Continuously Deploy?
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 是持续交付还是持续部署？
- en: Everyone wants to implement continuous delivery or deployment. After all, the
    benefits are too significant to be ignored. Increase the speed of delivery, increase
    the quality, decrease the costs, free people to dedicate time to what brings value,
    and so on and so forth. Those improvements are like music to any decision maker,
    especially if that person has a business background. If a tech geek can articulate
    the benefits continuous delivery brings to the table, when he asks a business
    representative for a budget, the response is almost always “Yes! Do it.”
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人都想实现持续交付或持续部署。毕竟，这些好处太显著，无法忽视。提高交付速度，提高质量，降低成本，解放人们的时间，让他们专注于创造价值的工作，等等。这些改进对任何决策者来说就像音乐，尤其是当那个人有商业背景时。如果一个技术极客能清晰地表达持续交付带来的好处，当他向业务代表请求预算时，回应几乎总是“是的！做吧。”
- en: By now, you might be confused with the differences between continuous integration,
    delivery, and deployment, so I’ll do my best to walk you through the primary objectives
    behind each.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你可能已经对持续集成、持续交付和持续部署之间的区别感到困惑，所以我会尽力带你了解每个过程背后的主要目标。
- en: You are doing continuous integration (CI) if you have a set of automated processes
    that are executed every time you commit a change to a code repository. What we’re
    trying to accomplish with CI is a state when every commit is validated shortly
    after a commit. We want to know not only whether what we did works, but also whether
    it integrates with the work our colleagues did. That’s why it is crucial that
    everyone merges code to the master branch or, at least, to some other common branch.
    It does not matter much how we name it. What does matter is that not much time
    passes since the moment we fork the code. That can be hours or maybe days. If
    we delay integration for more than that, we are risking spending too much time
    working on something that breaks work of others.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一组自动化的流程，每次提交代码到代码库时都会执行这些流程，那么你就是在做持续集成（CI）。我们通过CI要实现的目标是，每次提交后，能够很快验证提交内容的有效性。我们不仅要知道我们所做的是否有效，还要知道它是否与我们同事的工作集成得很好。这就是为什么每个人都需要将代码合并到主分支，或者至少合并到其他公共分支上。我们如何命名分支不那么重要，重要的是我们分叉代码后的时间间隔不能太长，可能是几小时，甚至几天。如果我们延迟集成超过这个时间，我们就有可能花费太多时间在一些会破坏其他人工作的内容上。
- en: The problem with continuous integration is that the level of automation is not
    high enough. We do not trust the process enough. We feel that it provides benefits,
    but we also require a second opinion. We need humans to confirm the result of
    the process executed by machines.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成的问题在于自动化的水平还不够高。我们对过程的信任度不够。我们觉得它带来了好处，但我们仍然需要第二次确认。我们需要人工确认机器执行过程的结果。
- en: Continuous delivery (CD) is a superset of continuous integration. It features
    a fully automated process executed on every commit. If none of the steps in the
    process fail, we declare the commit as ready for production.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付（CD）是持续集成的超集。它具有在每次提交时执行的完全自动化过程。如果过程中的任何一步没有失败，我们就会宣布该提交已准备好进入生产环境。
- en: Finally, continuous deployment (CDP) is almost the same as continuous delivery.
    All the steps in the process are in both cases fully automated. The only difference
    is that the button that says “deploy to production” is gone.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，持续部署（CDP）几乎与持续交付相同。过程中的所有步骤在这两种情况下都是完全自动化的。唯一的区别是“部署到生产”按钮不再存在。
- en: Even though CD and CDP are almost the same from the process perspective, the
    latter might require changes in the way we develop our applications. We might,
    for example, need to start using feature toggles that allow us to disable partially
    finished features. Most of the changes required for CDP are things that should
    be adopted anyways. However, with CDP that need is increased to an even higher
    level.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管从过程的角度看，CD和CDP几乎是相同的，但后者可能要求我们在开发应用程序的方式上进行一些改变。例如，我们可能需要开始使用功能切换，以允许我们禁用部分完成的功能。CDP所需的大部分变更是本来就应该采纳的。然而，在CDP中，这种需求被提升到了更高的水平。
- en: We won’t go into all the cultural and development changes one would need to
    employ before attempting to reach the stage where CDP is desirable, or even possible.
    That would be a subject for a different book and would require much more space
    than what we have. I am not even going to try to convince you to embrace continuous
    deployment. There are many valid cases when CDP is not a good option and even
    more of those when it is not even possible without substantial cultural and technical
    changes which are outside Kubernetes domain. Statistically speaking, it is likely
    that you are not ready to embrace continuous deployment.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会深入探讨在试图达到CDP理想状态之前，所需要实施的所有文化和开发方面的变更。那将是另一本书的内容，并且需要比我们目前的篇幅更多的空间。我甚至不会尝试说服你接受持续部署。确实有许多有效的案例表明CDP并不是一个好选择，更有许多情况下，CDP在没有大规模的文化和技术变更（这些变更超出了Kubernetes的范畴）时，根本无法实现。从统计学角度讲，你很可能还没有准备好接受持续部署。
- en: At this point, you might be wondering whether it makes sense for you to continue
    reading. Maybe you are indeed not ready for continuous deployment, and maybe thinking
    this is a waste of time. If that’s the case, my message to you is that, it does
    not matter. The fact that you already have some experience with Kubernetes tells
    me that you are not a laggard. You chose to embrace a new way of working. You
    saw the benefits of distributed systems, and you are embracing what surely looked
    like madness when you made your first steps.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 到这个时候，你可能会在想，继续阅读是否有意义。也许你确实还没有准备好进行持续部署，也许你认为这只是在浪费时间。如果是这样，我想告诉你的是，这没有关系。事实上，你已经拥有了一些Kubernetes的经验，这让我知道你并不是一个落后者。你选择了接受一种新的工作方式。你看到了分布式系统的好处，你也接受了那些在你刚开始时看起来肯定像是疯狂的东西。
- en: If you reached this far, you are ready to learn and practice the processes that
    follow. You might not be ready to do continuous deployment. That’s OK. You can
    fall back to continuous delivery. If that is also too big of a scratch, you can
    start with continuous integration. The reason I’m saying that it does not matter
    lies in the fact that most of the steps are the same in all those cases. No matter
    whether you are planning to do CI, CD, or CDP, you have to build something, you
    have to run some tests, and you have to deploy your applications somewhere.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经读到这里，说明你已经准备好学习和实践接下来的流程。你可能还没准备好进行持续部署。没关系，你可以先退回到持续交付。如果这对你来说也太复杂，你可以从持续集成开始。我之所以说这没关系，是因为大多数步骤在这些情况下都是相同的。无论你打算做CI、CD还是CDP，你都必须构建一些东西，必须运行一些测试，并且必须将应用程序部署到某个地方。
- en: From the technical perspective, it does not matter whether we deploy to a local
    cluster, to the one dedicated to testing, or to production. A deployment to a
    Kubernetes cluster is (more or less) the same no matter what its purpose is. You
    might choose to have a single cluster for everything. That’s also OK. That’s why
    we have Namespaces. You might not trust your tests. Still, that’s not a problem
    from the start because the way we execute tests is the same no matter how much
    we trust them. I can continue for a while with statements like that. What truly
    matters is that the process is, more or less, the same, no matter how much you
    trust it. Trust is earned with time.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术角度来看，无论我们是部署到本地集群、专门用于测试的集群，还是生产环境，都是一样的。部署到Kubernetes集群（无论其目的是什么）基本上是相同的。你可能选择拥有一个集群来处理所有的事情。那也是可以的。这就是为什么我们有命名空间。你可能不完全信任你的测试。但从一开始，这也不是问题，因为我们执行测试的方式在信任程度上并没有区别。我可以继续说下去，类似的观点还很多。真正重要的是，整个过程基本相同，不管你信任它的程度如何。信任是随着时间积累的。
- en: The goal of this book is to teach you how to employ continuous deployment into
    a Kubernetes cluster. It’s up to you to decide when are your expertise, culture,
    and code ready for it. The pipeline we’ll build should be the same no matter whether
    you’re planning to use CI, CD, or CDP. Only a few arguments might change.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的目标是教你如何将持续部署应用到Kubernetes集群中。什么时候你的专业技能、文化和代码准备好进行持续部署，这由你决定。我们将构建的流水线无论是用于CI、CD，还是CDP，应该都是一样的。只有一些参数可能会发生变化。
- en: All in all, the first objective is to define the base set of steps for our continuous
    deployment processes. We’ll worry about executing those steps later.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，第一个目标是定义我们的持续部署流程的基本步骤。执行这些步骤的工作，我们稍后再担心。
- en: Defining Continuous Deployment Goals
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义持续部署目标
- en: The continuous deployment process is relatively easy to explain, even though
    implementation might get tricky. We’ll split our requirements into two groups.
    We’ll start with a discussion about the overall goals that should be applied to
    the whole process. To be more precise, we’ll talk about what I consider non-negotiable
    requirements.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 持续部署流程相对容易解释，尽管实施可能会有些棘手。我们将把需求分成两组。我们将从讨论整个过程中应应用的总体目标开始。更精确地说，我们将讨论我认为是不可妥协的要求。
- en: A Pipeline needs to be secure. Typically, that would not be a problem. In past
    before Kubernetes was born, we would run the pipeline steps on separate servers.
    We’d have one dedicated to building and another for testing. We might have one
    for integration and another for performance tests. Once we adopt container schedulers
    and move into clusters, we lose control of the servers. Even though it is possible
    to run something on a specific server, that is highly discouraged in Kubernetes.
    We should let Kubernetes schedule Pods with as few restraints as possible. That
    means that our builds and tests might run in the production cluster and that might
    prove not to be secure. If we are not careful, a malicious user might exploit
    shared space. Even more likely, our tests might contain an unwanted side-effect
    that could put production applications at risk.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 管道需要安全。通常，这不会是问题。在Kubernetes诞生之前，我们会在不同的服务器上运行管道步骤。一个专门用于构建，另一个用于测试。可能有一个用于集成，另一个用于性能测试。一旦我们采用容器调度器并迁移到集群中，我们就失去了对服务器的控制。尽管可以在特定服务器上运行某些东西，但在Kubernetes中强烈不建议这样做。我们应该让Kubernetes尽可能少地限制调度Pods。这意味着我们的构建和测试可能会在生产集群中运行，这可能并不安全。如果不小心，恶意用户可能会利用共享空间。更有可能的是，我们的测试可能包含一个不希望出现的副作用，这可能会使生产应用面临风险。
- en: We could create separate clusters. One can be dedicated to the production and
    the other to everything else. While that is indeed an option we should explore,
    Kubernetes already provides the tools we need to make a cluster secure. We have
    RBAC, ServiceAccounts, Namespaces, PodSecurityPolicies, NetworkPolicies, and a
    few other resources at our disposal. So we can share the same cluster and be reasonably
    secure at the same time.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建独立的集群。一个可以专门用于生产，另一个用于其他所有用途。虽然这是我们应该探索的一个选项，但Kubernetes已经提供了我们需要的工具来确保集群安全。我们拥有RBAC、ServiceAccounts、Namespaces、PodSecurityPolicies、NetworkPolicies和其他一些资源。因此，我们可以共享同一个集群，并在确保合理安全的同时进行操作。
- en: Security is not the only requirement. Even when everything is secured, we still
    need to make sure that our pipelines do not affect negatively other applications
    running inside a cluster. If we are not careful, tests might, for example, request
    or use too many resources and, as a result, we might be left with insufficient
    memory for the other applications and processes running inside our cluster. Fortunately,
    Kubernetes has a solution for those problems as well. We can combine Namespaces
    with LimitRanges and ResourceQuotas. While they do not provide a complete guarantee
    that nothing will go wrong (nothing does), they do provide a set of tools that,
    when used correctly, do provide reasonable guarantees that the processes in a
    Namespace will not go “wild”.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性不是唯一的要求。即使一切都已得到保障，我们仍然需要确保我们的管道不会对集群中运行的其他应用产生负面影响。如果不小心，测试可能会请求或使用过多的资源，结果可能导致集群中的其他应用和进程内存不足。幸运的是，Kubernetes也为这些问题提供了解决方案。我们可以将命名空间（Namespaces）与限制范围（LimitRanges）和资源配额（ResourceQuotas）结合使用。虽然它们不能完全保证不会出问题（没有什么是绝对的），但它们确实提供了一套工具，当正确使用时，可以合理保证命名空间中的进程不会“失控”。
- en: Our pipeline should be fast. If it takes too much time for it to execute, we
    might be compelled to start working on a new feature before the execution of the
    pipeline is finished. If it fails, we will have to decide whether to stop working
    on the new feature and incur context switching penalty or to ignore the problem
    until we are free to deal with it. While both scenarios are bad, the latter is
    worst and should be avoided at all costs. A failed pipeline must have the highest
    priority. Otherwise, what’s the point of having automated and continuous processes
    if dealing with issues is eventual?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的管道应该快速。如果执行时间过长，我们可能会被迫在管道执行完成之前开始处理新功能。如果管道执行失败，我们将不得不决定是停止处理新功能并承受上下文切换的代价，还是忽略这个问题直到有时间处理它。虽然这两种情况都不好，但后者最糟糕，应该尽量避免。失败的管道必须拥有最高优先级。否则，如果处理问题只是一个最终任务，那么自动化和持续过程的意义何在呢？
- en: The problem is that we often cannot accomplish those goals independently. We
    might be forced to make tradeoffs. Security often clashes with speed, and we might
    need to strike a balance between the two.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于，我们通常无法独立完成这些目标。我们可能会被迫做出取舍。安全性通常与速度发生冲突，我们可能需要在两者之间找到平衡。
- en: Finally, the primary goal, that one that is above all the others, is that our
    continuous deployment pipeline must be executed on every commit to the master
    branch. That will provide continuous feedback about the readiness of the system,
    and, in a way, it will force people to merge to the master often. When we create
    a branch, it is non-existent until it gets back to the master, or whatever is
    the name of the production-ready branch. The more time passes until the merge,
    the bigger the chance that our code does not integrate with the work of our colleagues.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，最重要的目标，那是所有目标之上的目标，就是我们的持续部署管道必须在每次提交到主分支时执行。这将提供关于系统准备情况的持续反馈，并且在某种程度上，它将迫使人们经常将代码合并到主分支。当我们创建一个分支时，除非它回到主分支，或者无论哪个是生产就绪分支的名称，否则它是不存在的。合并的时间越长，我们的代码与同事工作的集成问题就越大。
- en: Now that we have the high-level objectives straighten out, we should switch
    our focus to the particular steps a pipeline should contain.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经理清了高层次的目标，现在应该将重点转向管道应该包含的具体步骤。
- en: Defining Continuous Deployment Steps
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义持续部署步骤
- en: We’ll try to define a minimum set of steps any continuous deployment pipeline
    should execute. Do not take them literally. Every company is different, and every
    project has something special. You will likely have to extend them to suit your
    particular needs. However, that should not be a problem. Once we get a grip on
    those that are mandatory, extending the process should be relatively straightforward,
    except if you need to interact with tools that do not have a well-defined API
    nor a good CLI. If that’s the case, my recommendation is to drop those tools.
    They’re not worthy of the suffering they often impose.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尝试定义任何持续部署管道应该执行的最小步骤集。不要把它们当作字面意思来理解。每个公司不同，每个项目都有其特殊之处。你可能需要扩展这些步骤以适应你们特定的需求。然而，这不应该是问题。一旦我们掌握了那些强制执行的步骤，扩展过程应该相对简单，除非你需要与没有明确
    API 或良好 CLI 的工具交互。如果是这种情况，我的建议是放弃这些工具，它们不值得我们忍受它们常常带来的折磨。
- en: We can split the pipeline into several stages. We’ll need to *build* the artifacts
    (after running static tests and analysis). We have to run *functional tests* because
    unit testing is not enough. We need to create a *release* and *deploy* it somewhere
    (hopefully to production). No matter how much we trust the earlier stages, we
    do have to run tests to validate that the deployment (to production) was successful.
    Finally, we need to do some cleanup at the end of the process and remove all the
    processes created for the Pipeline. It would be pointless to leave them running
    idle.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将管道分成几个阶段。我们需要*构建*工件（在运行静态测试和分析之后）。我们必须运行*功能测试*，因为单元测试是不够的。我们需要创建一个*发布*并将其*部署*到某个地方（希望是生产环境）。无论我们多么信任早期的阶段，我们确实需要运行测试以验证部署（到生产环境）是否成功。最后，我们需要在流程结束时进行清理，移除所有为管道创建的进程。将它们闲置运行是没有意义的。
- en: All in all, the stages are as follows.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，阶段如下。
- en: Build stage
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建阶段
- en: Functional testing stage
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能测试阶段
- en: Release stage
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布阶段
- en: Deploy stage
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署阶段
- en: Production testing stage
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产测试阶段
- en: Cleanup stage
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理阶段
- en: Here’s the plan. In the build stage, we’ll build a Docker image and push it
    to a registry (in our case Docker Hub). However, since building untested artifacts
    should be stopped, we are going to run static tests before the actual build. Once
    our Docker image is pushed, we’ll deploy the application and run tests against
    it. If everything works as expected, we’ll make a new release and deploy it to
    production. To be on the safe side, we’ll run another round of tests to validate
    that the deployment was indeed successful in production. Finally, we’ll clean
    up the system by removing everything except the production release.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 计划是这样的。在构建阶段，我们将构建一个 Docker 镜像并推送到注册表（在我们的案例中是 Docker Hub）。然而，由于应该停止构建未经测试的工件，我们将在实际构建之前运行静态测试。一旦我们的
    Docker 镜像被推送，我们将部署应用程序并对其进行测试。如果一切按预期工作，我们将发布一个新版本并将其部署到生产环境。为了安全起见，我们将再进行一轮测试，以验证部署是否在生产环境中确实成功。最后，我们将通过移除除生产版本之外的所有内容来清理系统。
- en: '![Figure 3-1: The stages of a continuous deployment pipeline](img/00007.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 3-1：持续部署管道的各个阶段](img/00007.jpeg)'
- en: 'Figure 3-1: The stages of a continuous deployment pipeline'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3-1：持续部署管道的各个阶段
- en: We’ll discuss the steps of each of those stages later on. For now, we need a
    cluster we’ll use for the hands-on exercises that’ll help us get a better understanding
    of the pipeline we’ll build later. If we are successful with the manually executed
    steps, writing pipeline script should be relatively simple.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后将讨论每个阶段的步骤。现在，我们需要一个集群，用于实际操作练习，帮助我们更好地理解我们稍后要构建的管道。如果我们手动执行的步骤成功，那么编写管道脚本应该相对简单。
- en: Creating A Cluster
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建集群
- en: We’ll start the hands-on part by going back to the local copy of the `vfarcic/k8s-specs`
    repository and pulling the latest version.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过回到本地的`vfarcic/k8s-specs`仓库并拉取最新版本来开始实际操作部分。
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
