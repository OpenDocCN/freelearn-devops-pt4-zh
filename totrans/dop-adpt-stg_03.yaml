- en: '*Chapter 2*: Business Benefits, Team Topologies, and Pitfalls of DevOps'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ability to demonstrate how DevOps can benefit your business is important
    when it comes to driving the changes required to succeed. This chapter looks at
    the business benefits of DevOps transformation, as well as the team topologies
    that can be used during DevOps transformation. Finally, this chapter looks at
    pitfalls and mistakes that can lead to the failure of DevOps transformation projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Key business benefits of DevOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transformation topologies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transformation anti-patterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoiding failed transformation projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key business benefits of DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to DevOps transformation, buy-in from your executive leaders and
    senior management within your organization is fundamental. You will come up against
    serious challenges in your transformation without this support, and may even fail
    before you've really got started.
  prefs: []
  type: TYPE_NORMAL
- en: One way to ensure you have the required buy-in is by making sure that executive
    leaders and senior management understand what the business benefits of DevOps
    are. You cannot simply explain the technical or local benefits to individual teams
    or leaders. They will want to know why this is worth the money they will spend
    on implementing this new way of working and how it will help the business move
    faster.
  prefs: []
  type: TYPE_NORMAL
- en: In short, how can you ensure that DevOps addresses the **key performance indicators**
    (**KPIs**) and business goals of your organization?
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: When starting out with DevOps transformation, look to gain executive support
    early in the process; that way, you can change your approach if needed, based
    on your discussions with executives and senior leaders.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to best prepare for your meetings with senior leaders to discuss DevOps
    transformation with them, you first need to understand what the business goals
    are. This isn''t at a high level; this is at a performance measurement level—what
    things are the business specifically looking for to turn the dial on their performance
    dashboards? These are areas you can look at in terms of how DevOps can help drive
    those KPIs within the business, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Customer experience** (**CX**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Business growth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cost savings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boost in productivity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved employee retention
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Better-quality products
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Higher customer satisfaction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved operational and process efficiency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's now look at these elements in more detail to understand them better.
  prefs: []
  type: TYPE_NORMAL
- en: CX
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In any business, customers drive success, and a better CX ultimately drives
    renewals of products and drives growth in the business. CX is vitally important
    to the success of any business. Improving the overall CX can boost things such
    as customer loyalty, retention, and profits, and can shorten sales cycles.
  prefs: []
  type: TYPE_NORMAL
- en: In DevOps, improved production support is key and is one of the foundational
    pillars of why DevOps exists. This better collaboration between development teams
    and operations teams often ends up in a boost in the quality of the product. It
    is these elements that have a direct impact on CX.
  prefs: []
  type: TYPE_NORMAL
- en: This alone ends up providing a huge boost in CX as the business and technical
    teams are focused on optimal output or—rather—the same goal.
  prefs: []
  type: TYPE_NORMAL
- en: Business growth
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As sales and customer service grow, so do the prospects. In particular, there
    is a lot more capital to work for a company with improved growth. This money can
    be rolled back into the business in order to further develop processes and systems.
    In addition, increased productivity and performance ensures that workers have
    more time and can be freed to work on more efficient, revenue-generating projects.
  prefs: []
  type: TYPE_NORMAL
- en: Cost savings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It should be noted that all of the changes and enhancements listed here help
    to reduce overall costs. Improved production and performance result in higher
    sales, lower operating costs, and higher customer satisfaction ratings, which
    in themselves further improve revenue. DevOps explicitly encourages a continuous
    cycle of change and development.
  prefs: []
  type: TYPE_NORMAL
- en: Boost in productivity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: More engaged and loyal workers means higher productivity rates, particularly
    if they believe in what they do. But it's more than just that factor that leads
    to improved productivity.
  prefs: []
  type: TYPE_NORMAL
- en: In **Information Technology** (**IT**), teams are usually asked to do more with
    less money, which is where automation tools come into play. They can automate
    and refine internal processes that are repetitive and frequently rotate. DevOps
    honors this approach, even though it is extended to other areas of the market.
    Automating typical tasks frees up time for the workers, allowing them to concentrate
    on more meaningful tasks and spend more time on what they do.
  prefs: []
  type: TYPE_NORMAL
- en: Improved employee retention
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hands down, employee engagement is one of the most critical contributors to
    the success of an organization. If your workers are not satisfied, efficient,
    and compliant in their jobs, both performance and overall outcomes will suffer.
  prefs: []
  type: TYPE_NORMAL
- en: High-performance and functional DevOps work environments are proven to greatly
    enhance employee experience. The trend encourages higher employee engagement and
    productivity, but also increases brand loyalty. And when your current workers
    are satisfied, this bodes well for retention rates and invites new talent to come
    your way.
  prefs: []
  type: TYPE_NORMAL
- en: While a little obsolete now, Puppet's 2016 *State of DevOps Report* ([https://puppet.com/resources/whitepaper/2016-state-of-devops-report](https://puppet.com/resources/whitepaper/2016-state-of-devops-report))
    showed that promoters operating in DevOps-based organizations were 2.2 times more
    likely to recommend their business to a friend than those of low-performing DevOps
    firms.
  prefs: []
  type: TYPE_NORMAL
- en: Better-quality products
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DevOps fosters a culture of consistent and optimal development, which inevitably
    results in improved applications and goods. Specifically, in software development,
    the idea is to reduce the amount of errors or bugs that occur in a product.
  prefs: []
  type: TYPE_NORMAL
- en: Higher customer satisfaction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is a strong connection between customer service and satisfaction. The
    better and more optimistic the experience, the higher the satisfaction rating.
    This means, of course, that because DevOps improves CX, it also improves customer
    satisfaction, provided that the deployment is carried out properly.
  prefs: []
  type: TYPE_NORMAL
- en: Improved operational and process efficiency
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As DevOps calls for the reassessment and evolution of current processes and
    development operations, there is a trend toward improved performance. As companies
    aim to enhance their entire operation, they are moving toward processes, methods,
    and practices that deliver improved performance. Common sense dictates that, overall,
    the whole company will see productivity gains as a result.
  prefs: []
  type: TYPE_NORMAL
- en: But there is also data to back up this move. A study by CA Technologies, *Accelerating
    Velocity and Customer Value with Agile and DevOps* ([https://docs.broadcom.com/doc/accelerating-velocity-and-customer-value-with-agile-and-devops-research-paper](https://docs.broadcom.com/doc/accelerating-velocity-and-customer-value-with-agile-and-devops-research-paper)),
    shows that organizations implementing DevOps see a 40% increase in the KPIs they
    monitor for organizational or process performance.
  prefs: []
  type: TYPE_NORMAL
- en: Transformation topologies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every organization is different; even organizations in the same sector are
    different, for a variety of different reasons. To make transition as effective
    as possible, there are many different topologies for working with other teams
    in your organization, outlined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Development and operations collaboration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shared operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps as a service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps advocacy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Site reliability engineering** (**SRE**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Container driven
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will recognize some of these, possibly from your own organization. More
    do exist, though, and all of them are well documented with posters, available
    to purchase from *DevOps Topologies* ([https://web.devopstopologies.com/](https://web.devopstopologies.com/)).
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: It would be commonplace for you to start your transformation journey aligning
    to one of the preceding topologies and then switch to another model once you are
    mature enough. There is nothing wrong with this approach and in most scenarios
    this would lend itself to a higher level of success, rather than aiming for the
    top at the first attempt.
  prefs: []
  type: TYPE_NORMAL
- en: Development and operations collaboration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first model is probably the most popular and is often seen as the golden
    model or the promised land of DevOps. This model enables smooth collaboration
    between the development and operations teams within your organization and is depicted
    in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Diagram showing collaboration between developers and operations'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_02_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.1 – Diagram showing collaboration between developers and operations
  prefs: []
  type: TYPE_NORMAL
- en: Each of the teams share knowledge where needed, but each of them will specialize
    in a specific product or part of the product. This will likely involve many different
    development teams.
  prefs: []
  type: TYPE_NORMAL
- en: This model is highly effective and works very well in organizations that have
    strong technical leadership. A word of caution, though—in order to achieve this
    model, you will need to go through a substantial level of organizational change.
  prefs: []
  type: TYPE_NORMAL
- en: In order to be successful, you will need a level of competence higher up in
    the management team. Also essential is that development and operations have very
    clearly expressed and demonstrably shared goals, be that improving reliability,
    increasing deployment frequency, or whatever your goal is.
  prefs: []
  type: TYPE_NORMAL
- en: Your operations teams must be comfortable working with the development teams
    and be familiar with some of their processes and tooling; this would include **test-driven
    development** (**TDD**) and Git for source control. Added to that, on the developer's
    side, they must take operational features very seriously and seek input from the
    operations team on implementations of the features.
  prefs: []
  type: TYPE_NORMAL
- en: Altogether, this needs a high level of cultural change from how those teams
    worked together in the past, so while highly effective, this is a difficult model
    to achieve. You may find yourself implementing a different model to start with
    and working toward this in the future as you mature.
  prefs: []
  type: TYPE_NORMAL
- en: Shared operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you work in an environment where you operate in product teams rather than
    individual functional teams, then we see the shared operations topology. In this
    topology, you see very little separation between the development and operations
    teams, and everyone is solely focused on a shared responsibility. The following
    diagram illustrates this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Diagram showing little separation between developers and operations'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_02_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.2 – Diagram showing little separation between developers and operations
  prefs: []
  type: TYPE_NORMAL
- en: As with the previous model, this has the potential to be highly effective and
    will suit very well any organization that has a single product or service. Realistically,
    it's a form of the previous model we discussed but has some special features.
  prefs: []
  type: TYPE_NORMAL
- en: Organizations with a single product—such as Netflix, Spotify, Facebook, and
    Twitter—can achieve this topology. I would say, though, that outside of that single
    product focus, this topology is not very applicable.
  prefs: []
  type: TYPE_NORMAL
- en: In organizations where you have multiple product streams, the budget constraints—as
    well as the switching of focus between those product streams—will usually force
    your development and operations teams further apart, most likely back to the previous
    model.
  prefs: []
  type: TYPE_NORMAL
- en: Another way to describe this topology would be **NoOps**. There is no visibly
    distinct operations team in this model.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps as a service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So far, we have looked at topologies that favor start-ups as they can build
    from the ground up in the right way, or enterprise organizations as they look
    to shift their operating model. For smaller organizations that may not have the
    budget, experience, or employees to lead operations aspects of the products they
    produce, the development teams may lean on an external service provider, as illustrated
    in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Diagram showing the DevOps as a service topology'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_02_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.3 – Diagram showing the DevOps as a service topology
  prefs: []
  type: TYPE_NORMAL
- en: The role of the service provider is to help them build out environments, provide
    automation of their infrastructure, and provide monitoring of the platform. The
    provider may also provide advice on the operational features needed in the development
    cycles.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Although we call the topology **DevOps as a service**, it's important to highlight
    that first, this model is not scalable, and customers must work the same way as
    the service provider for this to work well, which is not always possible.
  prefs: []
  type: TYPE_NORMAL
- en: This topology is useful for smaller organizations to learn about the operational
    aspects involved, such as automation, configuration management, and monitoring.
    This is where the issue lies for service providers trying to implement this topology
    as a business, as those smaller organizations are likely to move toward the first
    or second topology once their skills have built up, as they take on more operational
    staff.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, this model has a chance to be somewhat effective with those smaller
    organizations with limited experience, but will likely stall if you try to implement
    it in larger organizations.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps advocacy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When organizations tend to lean toward a large gap between development and
    operations, we can introduce an advocacy topology as a facilitation team. This
    topology can be used to help keep development and operations talking and collaborating,
    and is illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Diagram showing the DevOps advocacy topology'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_02_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.4 – Diagram showing the DevOps advocacy topology
  prefs: []
  type: TYPE_NORMAL
- en: This topology works well in all types of organizations, especially where that
    tendency for drifting applies. The results from this topology can be mixed, but
    you potentially can have extremely effective results.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: When using the DevOps advocacy model, be aware of the DevOps team silo anti-pattern.
  prefs: []
  type: TYPE_NORMAL
- en: In order to be highly effective, the advocacy team must have the specific remit
    of facilitating communication and collaboration between the development and operations
    teams. Members of the team are often called **DevOps Advocates**, as their purpose
    is to help spread awareness of DevOps practices and facilitate bringing teams
    closer together.
  prefs: []
  type: TYPE_NORMAL
- en: A word of caution on this topology is that it can go wrong quickly. You must
    ensure that you keep your advocacy team separate from the day-to-day deliverables
    of the development and operations teams. They cannot get sucked into the work
    they do, otherwise they lose focus on their goal.
  prefs: []
  type: TYPE_NORMAL
- en: SRE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Often referred to as the **Google Model**, this topology is different from
    the others we have explored so far. DevOps will often say that development teams
    should join on-call rotations, but it''s not a requirement. Organizations, including
    Google, run a slightly different model with a specific hand-off from development
    to teams that run the software. This is where SRE comes in, as illustrated in
    the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – Diagram showing the SRE topology'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_02_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.5 – Diagram showing the SRE topology
  prefs: []
  type: TYPE_NORMAL
- en: What is crucial with this topology, though, is the understanding that the SRE
    team has the final say on the deployment of code to production. The team can reject
    releases that do not meet the operational standards and ask developers to resolve
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: Developers need to show the SRE team through logs, metrics, and test results
    that the release is of a high enough standard to be supported by the SRE team.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: With the SRE topology, you need to be careful about the development versus operations
    silos. Simply renaming your team to *Site Reliability Engineers* and hoping it
    will work will fix nothing.
  prefs: []
  type: TYPE_NORMAL
- en: This topology is unique, in that while it sounds like a common model used in
    most organizations today, it will only really be suitable where a high degree
    of engineering and maturity exists. Otherwise, you will not fix anything and,
    without that level of maturity, the SRE team has no power to say no.
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, this topology can either be very ineffective or highly effective—which
    way that turns out is entirely down to your culture.
  prefs: []
  type: TYPE_NORMAL
- en: Container driven
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, we have the container-driven collaboration topology. Containers can
    remove the need for some of the collaboration between development and operations.
    This is achieved by encapsulating the development and any runtime requirements
    of the application in a container. The container acts as a boundary between the
    development and operations responsibilities, as illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Diagram showing the container-driven topology'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_02_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.6 – Diagram showing the container-driven topology
  prefs: []
  type: TYPE_NORMAL
- en: With a good engineering culture this topology works well, but if your developers
    start to ignore or not properly consider operational considerations, then this
    topology can revert to the usual *us and them*, just as with the SRE topology.
  prefs: []
  type: TYPE_NORMAL
- en: Just as with the SRE topology, be aware of the development versus operations
    anti-pattern, where operations are just expected to run anything the developers
    throw their way.
  prefs: []
  type: TYPE_NORMAL
- en: Transformation anti-patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In *Transformation topologies*, we explored the models that aid DevOps transformation
    and looked at what they set out to achieve. Here, though, we are looking at anti-patterns:
    these are ways of working that can be counterproductive to your goals and hinder
    your progress of DevOps transformation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Each of the anti-patterns is specific, and I''m sure you will all have come
    across at least one of the following in your careers so far:'
  prefs: []
  type: TYPE_NORMAL
- en: Development and operations silos.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps team silo.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Development does not need operations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps as a tooling team.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Glorified SysAdmin.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operations embedded in development.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at each of them in detail in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Development and operations silos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is one anti-pattern I know everyone will have experience of. This is the
    classic situation of *throw it over the wall* (or insert any other phrase you
    might use). In many ways, this anti-pattern, illustrated in the following diagram,
    throws up lots of questions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Diagram showing the development and operations silos anti-pattern'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_02_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.7 – Diagram showing the development and operations silos anti-pattern
  prefs: []
  type: TYPE_NORMAL
- en: From the developer's side, features can be marked as done and they can claim
    story points for them when their work is completed, but the feature may not be
    in production yet or may not even work in production.
  prefs: []
  type: TYPE_NORMAL
- en: The operability suffers as well because developers will not have enough context
    for features within operations, and the operations teams do not have the time
    or will to engage with the developers to fix the problems before going live.
  prefs: []
  type: TYPE_NORMAL
- en: Most of you will know that this is not the way we want to be working, but although
    we know this anti-pattern is bad and we know what the problems are, some topologies
    are, I think, worse.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps team silo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The only situation I can think of where a separate DevOps team operating in
    a silo would be acceptable is where that team is around for a temporary purpose.
    This could line up to the advocacy topology we discussed in the previous section,
    whereby that team has a clear mandate to bring teams closer together and improve
    collaboration and communication between them, as illustrated in the following
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.8 – Diagram showing the DevOps team silo anti-pattern'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_02_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.8 – Diagram showing the DevOps team silo anti-pattern
  prefs: []
  type: TYPE_NORMAL
- en: This anti-pattern occurs when management or executives decide *they need to
    do DevOps* and start a *DevOps team*. This team will likely consist of people
    who are *DevOps engineers*; the problem is that this team will very quickly become
    their own silo. It will prevent developers and operations from becoming closer
    together, and tools and skills will become the subject of infighting, with everyone
    defending their corner.
  prefs: []
  type: TYPE_NORMAL
- en: Development does not need operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you mix the arrogance and naivety displayed by developers and their managers,
    specifically when starting new projects, often the assumption is made that operations
    is a thing of the past, especially when working with cloud-native technology.
    A wild underestimation is made about the sheer importance and complexity of good
    operational skills, as illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9 – Diagram showing the ''''don''t need operations'''' anti-pattern'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_02_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.9 – Diagram showing the ''don't need operations'' anti-pattern
  prefs: []
  type: TYPE_NORMAL
- en: The belief is that they can do operations without operations or use their spare
    time to cover the activities they perform. If teams recognize the importance of
    operations as a specialism that is as important and valuable as software development,
    then they would avoid lots of pain and basic operational mistakes.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps as a tooling team
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While the outcomes of this team can be beneficial, its impact is very limited.
    You can benefit from an improved toolchain, but the fundamental problem is a lack
    of early operational involvement and collaboration throughout the development
    life cycle, as illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.10 – Diagram showing the DevOps as a tooling team anti-pattern'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_02_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.10 – Diagram showing the DevOps as a tooling team anti-pattern
  prefs: []
  type: TYPE_NORMAL
- en: A DevOps team is set up to work on the tooling required for deployment, such
    as pipelines, configuration management, secrets management, and so on. This happens
    when you set up a team in order to not affect the current developer team's velocity
    (delivery of stories).
  prefs: []
  type: TYPE_NORMAL
- en: Operations teams continue to work in isolation and will continue to throw releases
    *over the wall*, just as with the first anti-pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Glorified SysAdmin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The question of DevOps engineering has long been discussed. Many believe it''s
    not a thing; I think it is, and it''s widely adopted by many organizations. It''s
    important to understand the differences between infrastructure engineers and DevOps
    engineers, though. I wrote a blog post on this very subject: [https://blog.m12d.com/hiring-the-ideal-devops-candidate](https://blog.m12d.com/hiring-the-ideal-devops-candidate).
    This anti-pattern is illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.11 – Diagram showing the glorified SysAdmin anti-pattern'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_02_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.11 – Diagram showing the glorified SysAdmin anti-pattern
  prefs: []
  type: TYPE_NORMAL
- en: This anti-pattern is very typical in organizations that have a low maturity
    in engineering. There is a strong desire to improve practices and reduce overheads,
    yet they will fail to recognize that IT is a core driver for the business.
  prefs: []
  type: TYPE_NORMAL
- en: Industry success with DevOps is not evident; sadly, this means some organizations
    want to *do DevOps* just because their competitors are. Instead of reflecting
    on the gaps in the current structure and relationships within the teams, the decision
    is made to hire *DevOps engineers* for their operations teams.
  prefs: []
  type: TYPE_NORMAL
- en: All this achieves is a rebranding of the previous infrastructure engineer role
    or SysAdmin role. There is no cultural or organizational change happening, other
    than the title often demanding a higher salary.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: It's the human communication and soft skills that makes DevOps thrive, not the
    technical skills.
  prefs: []
  type: TYPE_NORMAL
- en: This anti-pattern is becoming more and more prevalent as people jump on the
    bandwagon, looking for candidates with tooling, automation, and cloud skills.
  prefs: []
  type: TYPE_NORMAL
- en: Operations embedded in development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When an organization—for whatever reason—does not want to maintain a separate
    operations team, development teams take responsibility for infrastructure. When
    this happens in product-driven environments, those items of operational responsibility
    are subject to resource constraints and often deprioritization, leading to suboptimal
    approaches, as illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.12 – Diagram showing the operations embedded in development anti-pattern'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_02_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.12 – Diagram showing the operations embedded in development anti-pattern
  prefs: []
  type: TYPE_NORMAL
- en: As with many of the anti-patterns we have discussed, this one also shows a lack
    of appreciation for the importance of effective operational skills. The value
    of operations is severely diminished, as it is treated as an annoyance for developers.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding failed transformation projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The reality is that projects fail. DevOps transformation is no different and,
    as with all projects, you should be prepared for this and wherever possible learn
    from others' mistakes, putting controls in place so that you not only learn from
    those mistakes but also prevent them from happening again.
  prefs: []
  type: TYPE_NORMAL
- en: 'The top five reasons for DevOps transformation projects not going as planned
    and often getting abandoned are outlined here:'
  prefs: []
  type: TYPE_NORMAL
- en: Rooting DevOps initiatives within customer values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Poor management of organizational change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Failing to collaborate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Failing to adopt an iterative approach
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Poor management of expectations in terms of DevOps initiatives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's understand these reasons better.
  prefs: []
  type: TYPE_NORMAL
- en: Rooting DevOps initiatives within customer values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many companies across sectors are advised by the business side that they need
    to move faster to seek new opportunities and fight threats. You have this very
    real need for speed, but we have to make sure that we're grounding the need for
    speed in the value of the consumer. It's not enough that we need to get faster.
    We need to deliver value more quickly, or it may be that speed is not the concern;
    it is innovation that is required.
  prefs: []
  type: TYPE_NORMAL
- en: In conditions that cause confusion when attempting to solve a business problem,
    DevOps will help businesses experiment quicker to find the right answer.
  prefs: []
  type: TYPE_NORMAL
- en: Leaders who decide to do DevOps because of DevOps risk failure because workers
    do not have a connection to the word *DevOps*. Instead, you need to relate the
    benefit that these efforts offer to both workers and the company. This means knowing
    who the consumers are, what they consider to be important, and how to meet those
    needs.
  prefs: []
  type: TYPE_NORMAL
- en: Management of organizational change
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the main issues, which I sadly see replicated over and over, is overlooking
    change in an organization.
  prefs: []
  type: TYPE_NORMAL
- en: When you try to incorporate something major all at once without learning time,
    this leads to low success-rate improvements. Leaders should initiate organizational
    change by recognizing and expressing the importance of the consumer. DevOps and
    the required improvements that come with it are not optional, and workers must
    understand that, along with why a change is needed.
  prefs: []
  type: TYPE_NORMAL
- en: We also need to concentrate on consumer satisfaction because customers are linked
    to value, not to the word *DevOps*. We need to iterate, to make sure that we have
    the ability to learn and develop.
  prefs: []
  type: TYPE_NORMAL
- en: Failing to collaborate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Effective DevOps projects require cooperation with all stakeholders to solve
    challenges that occur. However, many DevOps projects are limited to a single domain,
    which restricts their effectiveness.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Collaboration is a cornerstone of DevOps; failing to enable strong collaboration
    between teams will result in few changes to how you work, and may even make silos
    worse.
  prefs: []
  type: TYPE_NORMAL
- en: Organizations also often make the mistake of hiring workers on the basis of
    their technical abilities rather than their willingness to cooperate. When we
    put together a DevOps team, we want a team of people who work together—people
    who enjoy teamwork. They're smart, they're driven, they're skilled, they keep
    themselves and others accountable, and they enjoy learning, because DevOps is
    definitely not static.
  prefs: []
  type: TYPE_NORMAL
- en: We can still train good people on technical skills, but it's very hard to get
    people with poor attitudes and poor motivation to improve.
  prefs: []
  type: TYPE_NORMAL
- en: Failing to adopt an iterative approach
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Launching DevOps in a single phase, giving training on Friday and starting the
    process on Monday, leads to higher failure rates, particularly for large organizations.
    A gradual, iterative approach lets companies concentrate on quality improvement
    and removes the danger of a quicker approach by allowing you a chance to learn,
    correct courses, improve every attempt, and step forward.
  prefs: []
  type: TYPE_NORMAL
- en: We need to create an environment where learning is at the front and middle,
    and iteration will help us do that.
  prefs: []
  type: TYPE_NORMAL
- en: The first-mover strategy is one of the better methods. *First mover* refers
    to a single-value stream with which businesses can be competitive by repetition
    and learning. The first movers should be politically friendly so that the stakeholders
    are willing to give DevOps a fair try, with the understanding that mistakes will
    happen and will be learned from, by creating an appropriate value to build credibility
    and increase support and presenting an acceptable level of risk to the company.
  prefs: []
  type: TYPE_NORMAL
- en: Our aim is not to incorporate the entire toolchain and an end-to-end, be-all
    and end-all, integrated solution from development to output. Our aim is to improve
    the workflow and keep improving over time.
  prefs: []
  type: TYPE_NORMAL
- en: Management of expectations in terms of DevOps initiatives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's normal for stakeholders to get interested in DevOps' efforts to anticipate
    the wrong things. For example, many expect a workflow to minimize costs when it's
    really supposed to be a value game. Another false expectation is that DevOps is
    all about resources that can be applied easily, when it's really a hard lifting
    in terms of organizational change.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: One of the single biggest things you can do to make DevOps transformation successful
    is set appropriate expectations. It always takes longer than you might think to
    transform to DevOps successfully.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the day, it all comes down to making sure that what you can deliver
    is up to standard. It's also one of the reasons why I'm going to warn people to
    be very vigilant about what they're committed to. Whether they're using numbers
    from consulting organizations or using numbers from market surveys, and so on,
    you really don't know what that's going to bring you in particular. But please
    be aware of your expectations.
  prefs: []
  type: TYPE_NORMAL
- en: Decoding failed DevOps transformation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we unravel the reasons behind the failure of DevOps, the crucial part
    is to understand what DevOps is. This is a point that we dealt with in [*Chapter
    1*](B17192_01_Final_ASB_ePub.xhtml#_idTextAnchor012), *Introducing DevOps and
    Agile*, but let''s summarize those points once more, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: DevOps is more than team collaboration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps is more than a toolchain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps is more than a software development model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps is more than agility and quality.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps is more than a bridge between development and operations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arguably, there is so much content about DevOps that it leads to confusion,
    and this causes issues during implementation for organizations. Some large organizations
    with the best tools struggle with DevOps because they do not get the basics right.
  prefs: []
  type: TYPE_NORMAL
- en: Culture has a huge impact on success
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you cast your mind back to [*Chapter 1*](B17192_01_Final_ASB_ePub.xhtml#_idTextAnchor012),
    *Introducing DevOps and Agile*, I illustrated the importance of working on culture
    first before anything else. Culture is traditions, values, and beliefs that strengthen
    the organizational structure. DevOps is not just a collection of tools; you need
    to build a DevOps culture in your organization to get results.
  prefs: []
  type: TYPE_NORMAL
- en: Tools alone cannot help, so how do you set the right culture?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This follows on from the previous point, really. Organizations run after tools
    to achieve their aims, not cultural changes. This alone is one of the biggest
    causes of failure when it comes to DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: The truth is that culture is tricky and difficult. We discuss this in greater
    detail in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Defining DevOps for your organization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this digital age, any organization is a technology-driven organization, regardless
    of the domain. The journey from *digital transformation* to *continuous digital
    journey* requires versatility, agility, and consistency as the most oriented aspects.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps has become a necessity for companies concerned with software distribution
    or that also release upgrades or new functionality to serve their customers with
    consistency and supremacy.
  prefs: []
  type: TYPE_NORMAL
- en: Without a question, DevOps will make software development easier, but every
    company has a different set of requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Automation and speed may not be what you think
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Knight Capital, a real-time stock trading firm, used automation to make trades
    quicker and simpler for their customers. When writing new code for their application,
    the new code was mistakenly named the same as an old feature, which was inactive
    but was not removed from the application.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, Knight's application made purchases worth billions in a matter
    of minutes, and the company had to pay a fine of **US Dollars** (**USD**) 640
    million, which resulted in bankruptcy.
  prefs: []
  type: TYPE_NORMAL
- en: Often, organizations misinterpret automation. DevOps automates the software
    development process with the help of **continuous integration/continuous delivery**
    (**CI/CD**) principles. There are a huge number of tools available for source
    code management, testing, maintenance, and storage.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Automation is an incredibly powerful component, but you should never forget
    the power of the machine-man combination to improve accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps means empowering everyone in the team
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: People are one of the key reasons for the failure of DevOps. It can't be all
    about growth and operating teams.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps needs the participation of all the people on the team who consider teamwork
    to be a key function. To make DevOps effective, you need to find the right people,
    give them the right skills, and give them time to experience the DevOps culture.
  prefs: []
  type: TYPE_NORMAL
- en: A software engineer from a popular website was reorganizing database columns
    into a database-related tool in order to sharpen their own understanding. At the
    same time, they were not aware that they were also modifying column orders in
    the actual database. This resulted in the server being inaccessible to many users.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That concludes the second chapter. In this chapter, we looked at the key business
    benefits that DevOps brings to your organization, as well as looking at the topologies
    you can align your teams to for the greatest success. Flipping that around, we
    looked at anti-patterns, which are the team patterns to avoid when it comes to
    DevOps transformation. Finally, we looked at how to avoid failed DevOps transformation
    projects and looked at an example of how DevOps has failed.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we look at how you can measure success within your organization
    and the importance of setting appropriate goals.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now look back on this chapter and validate what we have learned. See
    if you can answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Which of these is not a key business benefit of DevOps?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) CX
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Boost in productivity
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Doing more with less resources
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Higher customer satisfaction
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Which transformation topology is seen as the gold standard?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Shared operations
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) DevOps as a service
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Container driven
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Development and operations collaboration
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Which of these is a cause for a failed DevOps transformation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Failing to collaborate
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Adopting iterative approaches
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Cost savings
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Better employee retention
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
