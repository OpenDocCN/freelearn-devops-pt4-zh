- en: '*Chapter 4*: Building a DevOps Culture and Breaking Down Silos'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look at what culture means in DevOps, how you build
    a successful DevOps culture within an organization, and why culture is an important
    aspect of DevOps. We'll look at the characteristics of DevOps culture and how
    to maintain a strong culture within your organization, as well as how to break
    down existing silos in your organization.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is a DevOps culture?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why is culture important?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining a strong culture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Breaking down silos in your organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a DevOps culture?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In previous chapters, we discussed a little bit about culture. Now, it''s time
    to go into more detail. Culture has many meanings but for DevOps, when we talk
    about culture, we''re really talking about a shared understanding between development
    and operations teams, as well as a shared responsibility for the applications
    they build. That then roughly translates to the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Increasing transparency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Better communication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collaboration across teams
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Despite what some people think, there is much more to DevOps than technology.
    DevOps is not a technological evolution of your tooling or the platforms that
    you use within your organization.
  prefs: []
  type: TYPE_NORMAL
- en: Culture in DevOps is also not letting teams define their own destiny; it is
    about working together. Implementing these things can be scary, but I want to
    take you through four things that can help practice this and build up the right
    culture in your organization.
  prefs: []
  type: TYPE_NORMAL
- en: All the things we are about to look at will help with the preceding key bullet
    points and start to foster the right culture in your organization.
  prefs: []
  type: TYPE_NORMAL
- en: Roles and responsibilities workshop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Defining very clear roles and responsibilities for your team helps create a
    strong culture. It prevents people from wondering what they should be doing and
    ensures that everyone knows not only what they are doing but how important everyone's
    role is to the overall team.
  prefs: []
  type: TYPE_NORMAL
- en: Include your team in this session; it's a very fulfilling experience and one
    that creates a mutual contract with your team, as everyone has participated in
    the development of the roles and responsibilities for the team.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the following diagram. This is an example of what the output from a
    roles and responsibilities workshop looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – Example roles and responsibilities matrix'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_04_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.1 – Example roles and responsibilities matrix
  prefs: []
  type: TYPE_NORMAL
- en: You can use the preceding example to, with the help of your team, define the
    roles within your organization and then complete the responsibilities the rest
    of the team thinks that role should have.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If you are working remotely, convert this into a Word document and share it
    so it can be edited by the team collaboratively.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have completed this step, work with the team to discuss what you have
    come up with and get an agreement of where the responsibilities lie. You may even
    find yourself moving them to another role, and that's OK, just as long as you
    make sure the team is in agreement.
  prefs: []
  type: TYPE_NORMAL
- en: Once the session is completed, make sure you share it with your team first,
    ensuring that no more feedback needs to happen. Once everyone is finished, inform
    other leaders that this is the way your team will be working.
  prefs: []
  type: TYPE_NORMAL
- en: This highly collaborative approach creates a strong relationship within the
    team, one that is difficult to break and will set you up for success.
  prefs: []
  type: TYPE_NORMAL
- en: Rules of engagement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It may sound like a term from the military, but this is a serious exercise and
    can prove valuable in the future. Think of the output of this exercise as a social
    contract with your team, one that should be refreshed on a quarterly basis.
  prefs: []
  type: TYPE_NORMAL
- en: Defining your rules of engagement defines *how you will work together*. If you
    are in a cross-functional team, then defining these rules early in the process
    can prevent tension from building up in the team. You could also call this a working
    agreement for your team.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by asking your team some simple questions:'
  prefs: []
  type: TYPE_NORMAL
- en: As a team, what is important to us?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can we avoid mistakes of the past?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What do teams who work well together do that we can adopt?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ask your team to write down their answers privately, to begin with. This moment
    of reflection for the team will help set the tone of the session. Next, ask the
    team to write down one statement that will make working together as a team successful.
  prefs: []
  type: TYPE_NORMAL
- en: When you are finished, collate all the answers together and combine any similar
    statements together. If you have a small team of fewer than five people, ask them
    to write down two statements.
  prefs: []
  type: TYPE_NORMAL
- en: Then you vote on the ideas as a team. The idea of the vote is a collaborative
    one, and the result is a commitment written down in the agreement. If an idea
    gets a vote of no, just ask what it would take to make it a yes and see whether
    the team agrees.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Follow up with your agreement regularly with the team; put it somewhere the
    team visits frequently so they are reminded of what you collectively agreed to.
  prefs: []
  type: TYPE_NORMAL
- en: The key is to facilitate an open discussion with the team that gets them thinking
    about how to work together successfully. Keep it open, honest, and, above all,
    respectful.
  prefs: []
  type: TYPE_NORMAL
- en: Retrospectives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Running retrospectives is something that if you practice agile you will be used
    to already. This technique focuses on getting the team together after each sprint
    and discussing the previous sprint in detail. Along with the **Scrum Master**,
    the team will look at the accomplishments of the last sprint as well as the things
    that did not go as planned and could be improved.
  prefs: []
  type: TYPE_NORMAL
- en: The atmosphere in retrospectives is one that fosters continuous improvement
    and learning. It is considered a safe space to discuss what is working, what may
    not be working, and what could be changed. Retrospectives are run after each sprint
    usually.
  prefs: []
  type: TYPE_NORMAL
- en: For larger organizations, you could run them by leaders from each of your teams
    monthly to discuss the adoption of DevOps. Much like sprint retrospectives, discuss
    with your leaders what is working, what is not working, and what they would change
    about your DevOps transformation.
  prefs: []
  type: TYPE_NORMAL
- en: The technique for running a retrospective is easy. A quick search will find
    numerous different ways of running a retrospective and from time to time, you
    should change how you run your retrospectives to keep the team engaged. I find
    them incredibly valuable to run as a leader and preparing for them takes no time
    at all. You should allow around 1 hour for your retrospective. You can even run
    them online very easily.
  prefs: []
  type: TYPE_NORMAL
- en: If you complete your retrospective in the office, then for your meeting space,
    ensure you get a whiteboard and some markers, as well as sticky notes and a timer
    displayed somewhere easily visible.
  prefs: []
  type: TYPE_NORMAL
- en: If you are running a remote retrospective, you can use software to have people
    place their virtual sticky notes on the appropriate heading. For in-person meetings,
    you can set up four different areas for people to place their sticky notes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, for running a very simple retrospective, here is what you need to do with
    some appropriate timings:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Preparation (15 mins)**: Either digitally or on paper, set up four headings:
    *What Went Well*, *What Did Not Go Well*, *What Can We Do Better?*, and finally
    have one for *Actions*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ground rules (5 mins)**: Take no more than a few minutes to explain and set
    the ground rules. The key thing for every retrospective is to remember comments
    are not personal; every comment is valid, so listen with an open mind. Set the
    time period you will discuss (last sprint, month, quarter, and so on) and focus
    on improvement rather than pointing blame.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**What went well (15 mins)**: Either write down and place upon the appropriate
    heading or create a digital card with your personal thoughts for what went well
    in the previous time period.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**What did not go well (15 mins)**: Either write down and place upon the appropriate
    heading or create a digital card with your personal thoughts for what did not
    go well in the previous time period.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**What can we do better? (15 mins)**: Either write down and place upon the
    appropriate heading or create a digital card with your personal thoughts for what
    you can do better compared to the previous time period.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Actions (10 mins)**: Finally, capture any actions from the retrospective.
    Ensure you take pictures of the outcomes or screenshots if you are working virtually.
    Discuss the ideas presented and assign responsibility for follow-up.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you end up with a large amount of action, then use a voting system to enable
    yourself as a team to prioritize any immediate actions. Good examples of voting
    systems include Lean Coffee and Scrum poker.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that we understand what DevOps culture is, it's now necessary to understand
    why that culture is important.
  prefs: []
  type: TYPE_NORMAL
- en: Why is culture important?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I always like to describe culture as the backbone of DevOps. Think of DevOps
    like a tree where you have people, processes, and technology as branches, but
    they're all connected by culture.
  prefs: []
  type: TYPE_NORMAL
- en: In my various years working in and around DevOps with different organizations,
    all the work I have done has taught me that you can have the best processes in
    the world, the best engineers, and the best technology to support it, but if you
    don't have the best culture and do not look to improve on that culture, then it's
    all wasted effort.
  prefs: []
  type: TYPE_NORMAL
- en: 'Earlier in the chapter, we listed out the three important aspects of culture
    in DevOps; let''s take a reminder of what those are:'
  prefs: []
  type: TYPE_NORMAL
- en: Increasing transparency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Better communication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collaboration across teams
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To understand why culture is important, let's take a look at these three areas
    in more detail. That way, we can build up a picture of why culture is so important.
  prefs: []
  type: TYPE_NORMAL
- en: Increasing transparency
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Transparency is fundamental in many parts of business, but the further down
    the hierarchy you get, this can dilute, not on purpose but due to the way teams
    work and have worked historically. It is generally not the fault of specific individuals
    but rather a drift in culture from the organization as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: Development teams are usually under a great deal of pressure to release software
    in their organization, which can lead to those teams going around the edges when
    it comes to controls put in place by operations. This single thing is what fundamentally
    leads to tension between teams as the developers now have infrastructure that
    is nonstandard and consumed in a way that operations cannot control. This all
    leads to what we call **shadow IT**.
  prefs: []
  type: TYPE_NORMAL
- en: You will find that many people point to public cloud services as a reason for
    this lack of transparency; however, this has been an issue long before the public
    cloud was even discussed. It is in fact the era of self-service that made this
    worse but even then, this has happened for a long time before either self-service
    or public cloud.
  prefs: []
  type: TYPE_NORMAL
- en: If you think of developers requesting virtual machines from the self-service
    portal, the operations team will deploy that infrastructure with the operating
    system only. At that point, their operations have no insight into that infrastructure
    anymore.
  prefs: []
  type: TYPE_NORMAL
- en: You can say the same about the public cloud as well, and this is what happens
    in many organizations when developers voice their displeasure about the performance
    of operations slowing down their work. They go to a public cloud provider and
    consume the services themselves.
  prefs: []
  type: TYPE_NORMAL
- en: What are the three main disadvantages of this approach, though?
  prefs: []
  type: TYPE_NORMAL
- en: Verification of compliance with standards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Infrastructure utilization and efficiency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cost control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Almost every organization I have spoken to at the start of their cloud journey
    has cited cost control as a problem. But what does this mean? Let's now look at
    some ways to improve transparency.
  prefs: []
  type: TYPE_NORMAL
- en: Verification of compliance with standards
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the delivery of a baseline operating system, or for cloud-native resources
    the baseline configuration of that resource, applications that are deployed and
    any database instances deployed on the virtual machines are all items that have
    standards in most organizations for compliance.
  prefs: []
  type: TYPE_NORMAL
- en: As an operations team, when you are blind to what is deployed on your servers
    and have limited control, you lose ground in your security posture and end up
    not knowing whether the applications and development tools are security patched.
  prefs: []
  type: TYPE_NORMAL
- en: The exact same scenario can be said when consumed directly from a cloud provider
    without the knowledge of the operations team.
  prefs: []
  type: TYPE_NORMAL
- en: Infrastructure utilization and efficiency
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your developers build 10 machines, with limited control, operations have
    no idea whether those resources are fully utilized, when they are utilized, whether
    they can be turned off outside of working hours, or whether they apply for a special
    licensing benefit.
  prefs: []
  type: TYPE_NORMAL
- en: These decisions, or lack of decisions, can have implications for capacity planning
    and the future ability to scale the platform and build critical services.
  prefs: []
  type: TYPE_NORMAL
- en: Cost control
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finally, developers are unlikely to realize the benefits of a cloud provider
    if they take that route on their own, the benefits of a scalable platform, and
    the benefits of overall spending a cloud platform can bring.
  prefs: []
  type: TYPE_NORMAL
- en: Spending outside of the main budget has an overall detrimental effect on the
    business and its ability to operate without distractions.
  prefs: []
  type: TYPE_NORMAL
- en: Better communication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some of the things we have just discussed fall quite naturally into better communication
    as well. Imagine if developers and operations were able to communicate better
    with each other. From an infrastructure perspective, they could collaborate with
    operations to work on templates that match their requirements and operations could
    explain the controls in place for the security of the business.
  prefs: []
  type: TYPE_NORMAL
- en: That mutual understanding then becomes working practice and the developers get
    the infrastructure builds in a timely manner and operations keep control.
  prefs: []
  type: TYPE_NORMAL
- en: 'This isn''t the only place where better communication helps you build culture
    though. Communication can be made more efficient in a number of different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Operations participation in sprint planning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developers performing releases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operations working in development sprints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developers working in operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These examples may seem trivial, but they can have a real impact on the overall
    experience of those involved and can make them think about their interactions.
    Over time, this helps improve communication.
  prefs: []
  type: TYPE_NORMAL
- en: Operations participating in sprint planning
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the classic pieces of feedback you will hear from operations teams is
    that developers rarely develop for the environment and that operational challenges,
    concerns, and requests are not taken into account.
  prefs: []
  type: TYPE_NORMAL
- en: One of the models we discussed in the *Transformation topologies* section in
    [*Chapter 2*](B17192_02_Final_ASB_ePub.xhtml#_idTextAnchor038), *Business Benefits,
    Team Topologies, and Pitfalls of DevOps*, talks about bringing operations and
    developers closer together. In [*Chapter 1*](B17192_01_Final_ASB_ePub.xhtml#_idTextAnchor012),
    *Introducing DevOps and Agile*, we also discussed how agile plays a part in DevOps.
    When you start to move toward agile working, getting closer to one of the transformation
    topologies we explored, you will start to have operation teams working more closely
    with developers anyway.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: When operations participate in planning and before work on the sprint starts,
    they have a chance to voice any concerns about things the developers may not have
    considered that are in their field of expertise.
  prefs: []
  type: TYPE_NORMAL
- en: Starting this process early can have real benefits. At the beginning, it will
    be tricky, and it may feel unnatural for people who have not worked this way before,
    but persevere with it and the results will be clear.
  prefs: []
  type: TYPE_NORMAL
- en: Completely changing the way people work presents them with challenges and you
    will come up against resistance.
  prefs: []
  type: TYPE_NORMAL
- en: Developers performing releases
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For many organizations, it is the developers who take the compiled applications
    and release them to the production environment. Try having your developers work
    with operations to specifically perform releases.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: We want conversations between operations and development to be authentic and
    transparent. If both teams are notified of this change in the process in advance,
    it can lead to prepared statements and assumptions. Bring the operations team
    into a normal stand-up and allow this feedback to happen in real time.
  prefs: []
  type: TYPE_NORMAL
- en: The benefit of doing this is that your developers should start to understand
    and have an appreciation of the work that needs to be done with every release
    of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Operations working in development sprints
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a similar fashion to previously, flip that around and have your operations
    teams do some work during the sprints with developers. Not only will they gain
    an appreciation and understanding of the development process, but you will also
    find that they can contribute during the sprint on operational matters.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Doing this can mean that operational issues are resolved during the development
    sprint and before release, rather than an issue coming up after release and causing
    more tension between teams.
  prefs: []
  type: TYPE_NORMAL
- en: The majority of the time, you will find that operations teams cannot write software,
    so bring some of the operational tasks you would normally perform into the sprint,
    not only will you get better at communication, but you will start collaborating
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: Developers working in operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just as mentioned before, flip that idea on its head and have developers working
    with operations. This will give the developers an understanding of how important
    it is to understand the operational elements.
  prefs: []
  type: TYPE_NORMAL
- en: This working model can increase collaboration as well as communication and give
    a mutual understanding. Now developers understand what happens during an outage,
    how monitoring works, and how instrumentation in the application affects the operational
    processes, which will make a difference in how the application is developed, for
    the better.
  prefs: []
  type: TYPE_NORMAL
- en: Collaboration across teams
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What exactly do we mean when we say collaboration? In the context of DevOps,
    it is working and creating together. Collaboration is essential for any business
    but when your teams are both diverse and global in presence, this is even more
    important.
  prefs: []
  type: TYPE_NORMAL
- en: From a technology perspective, you'll find no shortage of tools to enable your
    teams to collaborate more. But when we talk about collaboration, how do we define
    it, and how can we improve it?
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Collaboration tools can help, but they're not the whole solution. Choose a collaboration
    tooling that fits your needs the best.
  prefs: []
  type: TYPE_NORMAL
- en: The primary goal of collaboration within DevOps is to reduce any operational
    delays that exist as well as communication gaps with teams that are geographically
    dispersed. This is the part of DevOps that requires the cultural step change so
    many people talk about.
  prefs: []
  type: TYPE_NORMAL
- en: Your teams need both shared goal definitions and a single-team approach to their
    work. Identify a common set of goals, which lays the foundation for the future
    working relationship. Managers and leaders should also create a culture of inspiration,
    honesty, trust, and respect in their teams. This makes everyone feel like a part
    of the team and creates a stronger bond and message of what you are trying to
    achieve.
  prefs: []
  type: TYPE_NORMAL
- en: A clear roadmap is also critical that defines your path to success and helps
    in achieving the goals you have set out to do. The roadmap should be crystal clear
    with the avoidance of any ambiguity. Regular check-ins and discussions with your
    teams also help provide clarity as you progress.
  prefs: []
  type: TYPE_NORMAL
- en: One final point here is about diversity, which is key. A close-knit team requires
    you to get to know everyone and how they work, and even understanding their culture
    and personal situations. In remote teams, when people work in different time zones
    and have different cultures and religions, this is incredibly important.
  prefs: []
  type: TYPE_NORMAL
- en: Now we understand in detail why culture in DevOps is important for our organization.
    Let's look at how you maintain that culture and develop it.
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining a strong culture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have spent time building up the culture in your organization, the
    last thing you want to do is see all that effort go to waste. It's important to
    maintain the culture you have built up so far, so it continues to foster the good
    practices you have put in place already. In fact, a survey by DZone ([https://dzone.com/articles/top-10-barriers-to-devops](https://dzone.com/articles/top-10-barriers-to-devops))
    found that 14% of people said culture was a barrier to DevOps adoption.
  prefs: []
  type: TYPE_NORMAL
- en: 'As with most things, though, the daily running of a team and business can provide
    a number of threats to how strong you can maintain culture. Some things can even
    have a negative effect. Some of these might include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Starters and leavers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pushing too hard for success
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lack of innovation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cultural differences
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lack of buy-in
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can we avoid these roadblocks to our culture? Let's have a look at each
    of them.
  prefs: []
  type: TYPE_NORMAL
- en: Starters and leavers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In any organization, people leave and people start. This is one of the most
    common elements of any business. Hopefully, the culture you have created means
    that when people leave, they are leaving for better opportunities that your business
    cannot provide, rather than leaving because of acrimonious reasons.
  prefs: []
  type: TYPE_NORMAL
- en: Knowing how to deal with starters and leavers in high-performing agile teams
    is something that agile leaders have to deal with all the time. It's important
    that you start off any new member of staff the way you mean to go on.
  prefs: []
  type: TYPE_NORMAL
- en: This starts with making sure you bring the right people on board, which is easier
    said than done. As you already have an open culture with the team, seek out thoughts
    from the team about what a new member of staff should bring to the team. Be prepared
    to listen in a collaborative way, but also be prepared with your own ideas so
    you can counter if you feel the need.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to the interview process, include members of the team to validate
    your thinking on the individual's attributes and what they can bring to the business.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to leavers, following the practices you have in place should ensure
    that when a member of the team leaves, they don't leave a large hole in the way
    you work. Of course, people often become good friends with their colleagues and
    someone leaving can have an emotional impact on a team more than anything else.
  prefs: []
  type: TYPE_NORMAL
- en: Watch out, though, as this emotional impact can start to affect productivity
    and quality. The longer a team has worked together, the better rhythm they have
    together and when that is broken, it can have an effect on the team.
  prefs: []
  type: TYPE_NORMAL
- en: Replace the member of the team as soon as you possibly can to reduce any impact.
    Someone new in the team can often bring new ideas to everyone and give the team
    a renewed energy.
  prefs: []
  type: TYPE_NORMAL
- en: When you have a significant change, run the roles and responsibilities exercise
    at the top of the chapter. Before the member of staff leaves, run a retrospective.
    If you think about it, that person leaving is a key moment and one that can be
    time-boxed. Learn from a wider perspective what worked, what did not work, and
    what could be improved.
  prefs: []
  type: TYPE_NORMAL
- en: Pushing too hard for success
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you have put lots of effort into building a culture and seen positive results,
    you can get into a mindset that makes you push too hard for more success. This
    can be as a team or as an individual. Either one of these will have a detrimental
    effect on what you have done so far and will be something you need to monitor
    closely.
  prefs: []
  type: TYPE_NORMAL
- en: The simple reason to watch out for this is that when you start to push for success,
    you can slip back into old ways and cut corners to get more success. Stick to
    your guns, though, and don't overcommit work you cannot deliver and keep producing
    the strong results you have got used to at this point.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Following the processes of continuous feedback and continuous improvement will
    yield more success as you progress. Let it come naturally and don't force the
    issue.
  prefs: []
  type: TYPE_NORMAL
- en: If you do that, you will find that success comes naturally to you and you don't
    need to push yourself or your team for more success.
  prefs: []
  type: TYPE_NORMAL
- en: Lack of innovation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One attribute of high-performing teams is their ability to innovate. Teams that
    are used to having the ability to innovate will continue to crave innovation.
    The ability to experiment and innovate is critical to the success of any business.
  prefs: []
  type: TYPE_NORMAL
- en: Watch out for the pace of innovation slowing down, or worse, other teams putting
    barriers up to your team innovating. This should be considered a red flag and
    one that makes you focus as a team to resolve the issues preventing you from innovating.
  prefs: []
  type: TYPE_NORMAL
- en: Try not to get too distracted by this and deal with the situation as a leader,
    letting your team continue as normal. Do not, though, engage with the team and
    tell them they're no longer able to innovate.
  prefs: []
  type: TYPE_NORMAL
- en: Many DevOps professionals set themselves apart from others due to their ability
    to innovate quickly and come up with new ideas. Telling them they cannot do something
    that is within their domain of expertise is going to be damaging to the overall
    team and the culture you have built up.
  prefs: []
  type: TYPE_NORMAL
- en: Cultural differences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have already talked a couple of times about remote teams, especially ones
    that are geographically dispersed. We discussed earlier as well about diversity
    and the important role that it plays.
  prefs: []
  type: TYPE_NORMAL
- en: Cultural differences also refer to those of the teams you work with. Everyone
    has an understanding of how things may be done within the organization. The problem,
    as we discussed, when looking at anti-patterns is that they may not line up with
    what you want to do as a team. The whole reason for this is why DevOps now exists.
  prefs: []
  type: TYPE_NORMAL
- en: You can combat cultural differences in the team objectives by aligning goals.
    The key here is to keep doing this time and time again to make sure teams are
    tightly aligned. When team goals start to diverge is when they start to operate
    in old ways again.
  prefs: []
  type: TYPE_NORMAL
- en: Lack of buy-in
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apart from the lack of innovation, one of the biggest impediments to maintaining
    culture is still the lack of buy-in. You may be thinking that to get to this point
    you have done the hard work and executives are already bought in. Of course, you
    are right, but just like in your own team, executives change, priorities of the
    business change, and the business trading environment can change.
  prefs: []
  type: TYPE_NORMAL
- en: This is a common situation, and you need to make sure leaders are still bought
    into what you are doing, the reasons why you are doing it, and the results you
    have achieved so far to get you there.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to buy-in, don't be complacent. Leaders change, and with this
    change can come new ideas on how things should be done.
  prefs: []
  type: TYPE_NORMAL
- en: To combat this, keep a note of the successes you have had as a team and make
    sure you can replay your journey along DevOps to show how that success has come
    about.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, it takes effort to not only build the culture but maintain it
    as well. Make sure you visit some of the tips and exercises shared in this section
    to keep the culture in your teams strong. Now, let's look at how to break down
    the silos that exist within your organization.
  prefs: []
  type: TYPE_NORMAL
- en: Breaking down silos in your organization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In DevOps, culture is brought about by the need to break down silos in your
    organization between certain teams. Silo mentality is behavior-driven and can
    be resolved using a number of techniques. A silo exists when teams operate independently
    and often have a crossover of their activities or lack of consideration for others'
    work.
  prefs: []
  type: TYPE_NORMAL
- en: The danger of silos in the business world is that trust is destroyed, communication
    is cut off, and complacency starts to set into what you do day to day. Teams that
    are siloed cannot react to change quickly or take advantage of opportunities that
    present themselves.
  prefs: []
  type: TYPE_NORMAL
- en: 'Worst of all is transparency, when data cannot be shared between teams freely,
    which impacts your ability to make data-driven decisions about your team or business.
    Some of the things we are about to discuss we have touched upon before:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating one vision for team collaboration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working toward common goals with collaboration tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Educating together, working together, and training together
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communicating often
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evaluating team compensation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at each of these in a little more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Creating one vision for team collaboration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We talked earlier about the importance of creating common goals for your teams
    and how they should also share one vision. It is counterproductive to have a vision
    for one team that is completely separate from another if they do no move toward
    a greater result.
  prefs: []
  type: TYPE_NORMAL
- en: All teams should share, buy into, and adopt that one vision. When goals that
    conflict with other teams are set, silo mentality begins, meaning silos are often
    created by management.
  prefs: []
  type: TYPE_NORMAL
- en: The leadership team must understand the long-term goals, departmental objectives,
    and key initiatives of the organization, before passing the unified vision down
    to the teams. The unified leadership team will, thanks to this approach, encourage
    trust, create a sense of empowerment, and break managers out of the *my department*
    mentality and into the *our organization* mentality.
  prefs: []
  type: TYPE_NORMAL
- en: Working toward common goals with collaboration tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The biggest downside to the silo mentality is that people see things from their
    perspective. This, of course, is not always a bad thing, but when this happens,
    people will make choices toward their own team, rather than from the company perspective.
  prefs: []
  type: TYPE_NORMAL
- en: One of the simplest ways to keep everyone on point with common goals is to use
    a dashboard to highlight progress toward your common goals. This is a form of
    collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: When organizations give their employees quality tools for collaboration, people
    will naturally share more information and because of that communicate better with
    each other.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, when the entire organization looks to understand each department (sometimes
    each team) and the specific issues they face on a day-to-day basis, departmental
    goals can become the goals of the entire company.
  prefs: []
  type: TYPE_NORMAL
- en: Educating together, working together, and training together
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From experience, one of the easiest ways to break down silo thinking is to perform
    cross-organization exercises and events. Training on this level can really help
    start breaking down silos as they get to know other people in the organization.
  prefs: []
  type: TYPE_NORMAL
- en: Working together can also have a big impact. Consider the idea of sitting people
    closer to each other if feasible. When people work close to others, they build
    rapport; as problems in their work arise, they look to those close by for answers.
    This can have a big impact.
  prefs: []
  type: TYPE_NORMAL
- en: Specific training is also a key way to make sure that you can shift the silo
    mindset from your organization. This training involves supporting the ideas of
    collaboration, teamwork, and communication.
  prefs: []
  type: TYPE_NORMAL
- en: Communicating often
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I firmly believe you cannot over-communicate. Regardless of the situation, frequency
    of communication is very important. When you communicate often, this introduces
    a level of trust and transparency.
  prefs: []
  type: TYPE_NORMAL
- en: When teams feel this level of trust and transparency, data flows between teams
    and facilitates the breaking down of silos rather than breaking them down by one
    action of communication.
  prefs: []
  type: TYPE_NORMAL
- en: Organizational structure is a silo and some organizations try and remove this
    structure to remove silos. This will not always work though. It's more effective
    to communicate properly in this situation than to remove that organizational structure,
    which is important to the delegation of duties.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating team compensation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Competition between teams can be very healthy, but compensation plans between
    teams can create silos and an unhealthy relationship where competition becomes
    the goal rather than working together.
  prefs: []
  type: TYPE_NORMAL
- en: If you have bonus or compensation plans within your business, make sure that
    they reflect the goals you set as an organization and do not play teams off against
    each other and what they are setting out to do.
  prefs: []
  type: TYPE_NORMAL
- en: When compensation plans align with the company goals, employees are driven to
    collaborate, communicate, and achieve goals together.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have looked at DevOps culture and understood why culture
    is important in DevOps. We have discussed the need for increased transparency
    and better communication and the need to maintain a strong culture. Finally, we
    discussed the need to break down silos in your organization and the importance
    of this in DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll explore anti-patterns in DevOps and discuss how to
    avoid them.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s now recap some of what we have learned throughout this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What are the key pillars of culture?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Roles and responsibilities, rules of engagement, and retrospectives
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Teamwork and collaboration
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Great social life with colleagues and retrospectives
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Completing work as quickly as possible and pushing other teams hard
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How can you promote better communication in your organization?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Have developers take time off.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Take everyone on team-building courses.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Have developers perform releases.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Let your operations team block all releases.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
