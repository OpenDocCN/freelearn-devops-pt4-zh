- en: '*Chapter 5*: Avoiding Cultural Anti-Patterns in DevOps'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Following on from learning about the specific challenges of breaking down silos
    between teams and understanding the importance of culture in DevOps, in this chapter,
    we will look at the challenges of building culture in DevOps – specifically, the
    anti-patterns that can be blockers to culture. This is not an easy task and requires
    careful planning and thought.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Organizational alignment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resistance to change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Difficulty scaling up
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Excessively focusing on tooling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Legacy infrastructure and systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizational alignment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Alignment across the organization is critical. Later in this chapter, we will
    talk about resistance to change, and when we should instigate change for the sake
    of it, without a clear vision or goals. This will create a high level of resistance
    in the organization. Alignment helps reduce resistance.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Increased competitive advantage, increased revenue, increased profits, and reduced
    costs are just some of the things to expect with better organizational alignment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Success with organizational alignment starts with answering the *what*, *why*,
    and *how*. Putting the appropriate measures in place at each step is what helps
    generate better alignment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Organizational alignment to generate results'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_05_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.1 – Organizational alignment to generate results
  prefs: []
  type: TYPE_NORMAL
- en: Achieving alignment is fundamentally based on the three pillars of **what**,
    **why**, and **how**. The *what* phase revolves around making sure the mission
    statement is well defined. The strategy is also something that should be defined
    here as well. This is done by defining goals, objectives, and activities. A company
    mission statement is an example of defining **what**.
  prefs: []
  type: TYPE_NORMAL
- en: Next, there's the *why*. Define your vision and the support structures that
    help the organization get there. Organizational structure is important here, as
    is the role of leadership and the processes that are used to help us achieve *why*.
    An example of this could be "*Our vision is to create better everyday lives for
    many people*." This could be the vision statement for a medical organization.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of *how*, this is the culture of the organization. Culture is made
    up of defining values, the practices within the business, and the behaviors we
    expect within our business.
  prefs: []
  type: TYPE_NORMAL
- en: Putting all these together is what generates results. Vision also drives *what*
    and *how*. This concept is something that is explained very well by Simon Sinek
    in his session *Start with Why* ([https://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action](https://www.ted.com/talks/simon_sinek_how_great_leaders_inspire_action)).
  prefs: []
  type: TYPE_NORMAL
- en: That concludes our look at the effects of misalignment and how it can derail
    your DevOps transformation. Now, let's have a look at what resistance to change
    means for your organization.
  prefs: []
  type: TYPE_NORMAL
- en: Resistance to change
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Change happens – it is a frequent occurrence in any business. Sometimes, these
    changes are forced, while other times, they happen because of the need to change
    for the good of the business. Regardless of the scenario, in most organizations,
    we will likely come across resistance to change. If that resistance is not handled
    properly, our DevOps transformation can go off the rails before it's even begun.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, it is critical to perform a DevOps transformation to understand how
    to deal with organizational change, understand the roles involved, and the steps
    needed to make it successful.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the roles of organizational change
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When navigating through DevOps transformation, for employees, this is a major
    change to the organization. When we are making any major change to how the organization
    operates, it is important to understand the roles of the two key players that
    make this happen successfully. These roles are management and **human resources**
    (**HR**).
  prefs: []
  type: TYPE_NORMAL
- en: Management
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Leadership is critical in this situation. To avoid scenarios where employees
    become so dissatisfied with how changes are being handled that they leave, leadership
    and the executive team need to have unilateral support for the changes that are
    proposed.
  prefs: []
  type: TYPE_NORMAL
- en: Conversations between managers and their teams, starting from a one-on-one basis,
    will help unify the team toward committing these changes. These conversations
    are crucial. It should be an open environment where we discuss how the changes
    affect them and what they think about the proposed changes.
  prefs: []
  type: TYPE_NORMAL
- en: As managers, we should be asking the **why**, **what**, and **how** questions.
    Unfortunately, though, many managers are not well versed in organizational change
    management. This lack of skills can make it difficult to implement the changes
    required.
  prefs: []
  type: TYPE_NORMAL
- en: To increase skills in this area, HR should provide appropriate training for
    managers, which will be useful for situations like this but also serve as good
    knowledge as managers further their careers up the management chain.
  prefs: []
  type: TYPE_NORMAL
- en: Human resources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In any organization, HR provides a pivotal role in implementing changes of any
    size. HR can provide communication, implementation, and tracking for any changes.
    The real value of HR comes with their ability to speak impartially with concerned
    employees about these changes, why the business is making them, and why employees
    are important to this change.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Whatever we do, we must make sure we engage HR in conversations from the beginning.
    They can only help when they understand the proposals, why we are proposing change,
    and how it will benefit the business.
  prefs: []
  type: TYPE_NORMAL
- en: HR can help increase the buy-in of organizational change by championing the
    change and providing employees with the support that's needed across the various
    impacted teams. SHRM has two great resources that are worth looking at regarding
    this subject.
  prefs: []
  type: TYPE_NORMAL
- en: The first one is *What is HR's role in Managing Change?* ([https://www.shrm.org/hr-today/trends-and-forecasting/special-reports-and-expert-views/pages/deb-cohen.aspx](https://www.shrm.org/hr-today/trends-and-forecasting/special-reports-and-expert-views/pages/deb-cohen.aspx)),
    followed by *HR Can Improve Employee Buy-In for Organizational Change* ([https://www.shrm.org/ResourcesAndTools/hr-topics/organizational-and-employee-development/Pages/ImproveBuyIn.aspx](https://www.shrm.org/ResourcesAndTools/hr-topics/organizational-and-employee-development/Pages/ImproveBuyIn.aspx)).
  prefs: []
  type: TYPE_NORMAL
- en: Organizational change process steps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When going through organizational change, to be successful, we should follow
    a methodical process. It's important to make sure we work with all the stakeholders
    from top to bottom in our organization to, well, ensure success.
  prefs: []
  type: TYPE_NORMAL
- en: Let's have a look at the six key steps to achieving success in organizational
    change.
  prefs: []
  type: TYPE_NORMAL
- en: Clearly defining the change and aligning it with business goals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This may seem obvious, but many organizations don't do this well. It is one
    thing to articulate the change we are making, but it is another thing entirely
    to compare this against your organizational goals and performance objectives.
    This step is important because the right changes aligned with your business goals
    will move the business in the right direction. After all, that is why we are making
    the change in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: The other benefit to this step is that it allows us to evaluate the change we
    are proposing against the value it will bring. Why change if it doesn't bring
    sufficient value?
  prefs: []
  type: TYPE_NORMAL
- en: 'We should be asking the following key questions at this stage to ensure we
    are getting the most value:'
  prefs: []
  type: TYPE_NORMAL
- en: Why is the change needed?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What do we need to change?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's learn how to determine the impact of change across the organization.
  prefs: []
  type: TYPE_NORMAL
- en: Determining impact across the organization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we have determined the change we want to make and know it has real value,
    we should assess our organization and determine the impact it will have.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to understand that change does not just affect one business
    unit within your organization – change reverberates around the business and has
    a cascade effect for everyone. The information that's gathered here will be valuable
    in figuring out where training is needed and where employees need support.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the key questions that you should be answering at this stage are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: How will change be received by employees?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the impacts of the change?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who will the change affect the most?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's learn how to develop strong communication strategies to deliver our
    message of change.
  prefs: []
  type: TYPE_NORMAL
- en: Developing a strong communication strategy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is key that everyone is part of the transformation journey. The first two
    steps will have told us about the employees that are directly affected and obviously
    must be included in any communication. However, transparency is key, so communicating
    with the whole business should be a focus of your communication strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Your strategy for communication should include a timeline on activities, the
    communication channels we want to use, the mediums we want to use to present the
    information, and how it will be communicated incrementally.
  prefs: []
  type: TYPE_NORMAL
- en: 'We should be asking two key questions at this stage of our transformation:'
  prefs: []
  type: TYPE_NORMAL
- en: How will we manage feedback?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How will change be communicated?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Training is a part of change that is often missed. Now, let's look at how to
    provide effective training.
  prefs: []
  type: TYPE_NORMAL
- en: Providing effective training
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that our transformation message is out in the open and we understand the
    gaps in the organization, our employees need to know how training will be delivered
    and what training we will be providing.
  prefs: []
  type: TYPE_NORMAL
- en: This is important because employees will want to know what skills they need
    in order to perform the roles under the proposed changes. Training could be provided
    in the form of online learning modules, classroom-led training, shadowing with
    subject matter experts, or mentoring.
  prefs: []
  type: TYPE_NORMAL
- en: 'To provide effective training, ask the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Which training methods will be the most effective?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What skills and behaviors are required to be successful?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supporting employees through change is critical. Let's look at how we can provide
    support structures to employees.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing an effective support structure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When going through any organizational change, it is important to develop a support
    structure for employees. Change can be unsettling for employees, so having an
    effective support structure can help overcome this.
  prefs: []
  type: TYPE_NORMAL
- en: Effective support structures in organizational change will assist employees
    both emotionally and practically as the skills and behaviors needed for the role
    change. Mentorship, as well as having an open-door policy with leadership, is
    the critical thinking that's needed to allow employees to ask questions as they
    arise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the key questions you should ask when implementing an effective support
    structure are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: What types of support will be the most effective?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What support is required the most?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, let's look at how to measure the progress of change in our organization.
  prefs: []
  type: TYPE_NORMAL
- en: Measuring the progress
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finally, let's look at measurement. Throughout the process of organizational
    change, a structure should be put in place to measure the impact of the changes
    we are making throughout the business. This measurement step allows for continuous
    feedback and improvement along the way.
  prefs: []
  type: TYPE_NORMAL
- en: This is also an opportunity to evaluate your change plan, determine how effective
    it is at what we are setting out to achieve, and document any lessons we are learning.
    We can also use this, if required, as an opportunity to tweak and change the plan.
    There is nothing worse than continuing with a flawed plan that will not lead to
    success. Don't be afraid to change as we go, should that tweak lead to success.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key questions we should be asking at this stage of the process are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Was the process successful?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Did the change assist in achieving our business goals?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What could we have done differently?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we understand the steps of organizational change, let's look at how
    to overcome resistance to change.
  prefs: []
  type: TYPE_NORMAL
- en: Overcoming resistance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have already discussed some steps we should be using during the change process.
    A lot of these things will help us overcome some of the resistance that we are
    facing.
  prefs: []
  type: TYPE_NORMAL
- en: These won't help everyone, though, and communication, as we've mentioned previously,
    is crucial for getting this right. Constant communication to help with aligning
    our goals will help put people at ease. Resistance comes when people feel threatened
    or worried about changes that may occur.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the main reasons for resistance to change within an organization could
    be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Fear of losing your job
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Poor communication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lack of trust
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fear of the unknown
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Poor timing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's look at these reasons in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Fear of losing your job
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In every business, to stay competitive and to stay relevant with your customers,
    change is required. Sometimes, companies will need to add new roles, downsize,
    or even change roles to achieve these goals. For most people, this is where the
    fear of losing their job comes in.
  prefs: []
  type: TYPE_NORMAL
- en: Poor communication
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I'm losing track of the number of times we say communication is important, but
    it really is, as it will make or break a transformational change. Communication
    solves all ills in a change, but lack of communication creates many.
  prefs: []
  type: TYPE_NORMAL
- en: Employees need to clearly understand why change is needed and what it will help
    the business achieve. If employees are thrown the idea that "*everything they've
    been doing is wrong and it's going to completely change*," expect a huge backlash.
  prefs: []
  type: TYPE_NORMAL
- en: Lack of trust
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Successful businesses are built upon trust. If the level of trust between leadership
    and employees on the ground is high, then your resistance is going to be low.
    However, in organizations with mutual distrust between leadership and employees,
    the business is not heading in the right direction, so successfully implementing
    your change will be very difficult.
  prefs: []
  type: TYPE_NORMAL
- en: Fear of the unknown
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There is a saying in business: "*there are unknown unknowns*." When people
    don''t know what is happening, that generates fear, which leads to resistance.
    This can easily be fixed with good communication. The more we communicate, the
    more open we are with our communication, which breaks down the fear of the unknown
    and builds trust. These two things alone will reduce the amount of resistance
    in your organization.'
  prefs: []
  type: TYPE_NORMAL
- en: Poor timing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: From experience, how and when the message of change is delivered is one of the
    key problems. It's usually not the act of change that creates resistance with
    employees, but how and when that change is communicated.
  prefs: []
  type: TYPE_NORMAL
- en: Breakdown in communication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Communication is key, period. In my opinion, we cannot overcommunicate anything
    in business. When communication breaks down, it has a severe impact on business.
    This manifests itself in causing frustration in terms of money and time.
  prefs: []
  type: TYPE_NORMAL
- en: Breakdowns happen when the communicator does not efficiently communicate what
    they are trying to say. This could be through spoken works, how those words are
    understood, or even written words. There is not just one way to break down communication.
    It could be the communicator who misspeaks or the recipient who does not interpret
    the communicator correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Business can take a lot from the aviation industry, where communication is of
    utmost importance. Failure to communicate clearly between pilots and air traffic
    control can result in huge losses of life. Throughout the history of aviation,
    the industry has learned from their mistakes and made the skies safer. We should
    do the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'Avoiding communication breakdowns in your business comes down to five key things.
    Let''s have a look at them:'
  prefs: []
  type: TYPE_NORMAL
- en: Owning mistakes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slowing down
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: People coming together
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Winning people
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patience
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at each of these in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Owning mistakes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Humans have a fear of making mistakes, which can come from the fear of disappointing,
    previous mistakes that have been made, or other reasons. Owning your mistakes
    is important because shifting the blame to an innocent party is just going to
    make things worse.
  prefs: []
  type: TYPE_NORMAL
- en: If we've misunderstood someone, we should just let them know. This helps correct
    the problem before it really becomes a problem. The communicator will then understand
    what went wrong and can improve their communication strategy next time.
  prefs: []
  type: TYPE_NORMAL
- en: Slowing down
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Pace is important, so don't rush things. We can make breakdowns worse by rushing
    into resolutions. Shift the pace to moving more slowly; if we rush into things,
    people think it's not important, or that we want it out the way. When we slow
    down, that changes as we are taking the time to think about it, so it's important
    to solve.
  prefs: []
  type: TYPE_NORMAL
- en: People coming together
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Above all, make sure your strategy is around bringing people together and not
    pushing them apart. Communication breakdowns divide people and destroy trust.
    Getting everyone on the same page – in the same room, if possible – and focused
    on the same goal starts to bring people closer together.
  prefs: []
  type: TYPE_NORMAL
- en: Winning people
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Usually, when communication breaks down, some key people are responsible for
    that. Clearly, it should be around fixing the problem instead of playing a blame
    game. As we discussed earlier, blame just creates problems with trust.
  prefs: []
  type: TYPE_NORMAL
- en: Patience
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Frustrating is a word we might use to describe communication breakdowns and
    getting out of them is quite difficult as well. We need to be patient, though:
    a lack of patience will only make things difficult.'
  prefs: []
  type: TYPE_NORMAL
- en: A lack of patience is often part of the cause of a communication breakdown and
    will only be remedied by acknowledging and enforcing it culturally. Sadly, resistance
    to change is all too common, but we can get through it! Now, let's move on and
    look at the difficulties of scaling up our DevOps transformation.
  prefs: []
  type: TYPE_NORMAL
- en: Difficulty scaling up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the other anti-patterns in DevOps comes with the ability to scale up
    what we are doing. Most businesses will encounter issues in scaling up when they
    start out. With growth, especially rapid growth, comes challenges in scaling up
    your business.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scaling your business is difficult. Many changes are needed and can derail
    even the most successful business. Some challenges we can expect with scaling
    up are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Having to scale before market fit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the wrong people
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Focusing too much on sales and marketing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Price competition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Management structure as growth occurs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ignoring issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forgetting making yourself lean is part of scaling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All these challenges list are really from a business perspective, but what
    about scaling DevOps specifically? When it comes to scaling up, we need to stick
    to specific steps and focus on growing certain aspects of our DevOps practices:'
  prefs: []
  type: TYPE_NORMAL
- en: Start with small teams
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encouraging skill development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prioritizing culture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous feedback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's have a look at these five areas in a little more detail to get an understanding
    of what we need to do.
  prefs: []
  type: TYPE_NORMAL
- en: Start with small teams
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Have you ever heard of the "*innovator's dilemma*"? It speaks to the challenges
    of innovating in your business when we are in a cycle of reality or our day-to-day
    operations. If we wish to scale, removing this impediment is fundamental to our
    success.
  prefs: []
  type: TYPE_NORMAL
- en: We must decide on what we want to deliver, create an agile team to work on advocacy,
    and help scale our operations and remove blockers. We must acquire the skills
    we want in this team and work toward a logical resolution before moving the team
    into other teams.
  prefs: []
  type: TYPE_NORMAL
- en: Encouraging skill development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is where we introduce the growth mindset, or the learner's mindset. We
    must be willing to try something new and work with different teams. The mindset
    of the employees in these teams is crucial in starting out on the right foot.
  prefs: []
  type: TYPE_NORMAL
- en: To get the best from both your developers and operations teams, encourage them
    to grow their skillsets – not just from a technology perspective, but also soft
    skills as well, which are equally important in DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: Prioritizing culture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Success in DevOps comes with developers and operations having a positive culture
    between both teams. It's easy to think that DevOps is all about developing products,
    but it is important to develop the right relationships. Culture is as important
    as other aspects of DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: The hard part is getting everyone onboard. Therefore, small teams are fundamental
    to starting this. Getting these things right will enable your teams to take on
    more as they develop. Teams that follow the early adopters will learn from them
    also.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous feedback
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Continuous feedback is a very important step in adapting your DevOps culture
    based on what is happening and how people are performing. The process of getting
    feedback enables us to understand what is happening with our product and what
    needs to change to make it better.
  prefs: []
  type: TYPE_NORMAL
- en: Wherever possible, if we can, separate release from deployment. We can work
    toward iterated deployment, thereby getting feedback from our user base and incorporating
    those changes into future releases.
  prefs: []
  type: TYPE_NORMAL
- en: Automation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maturing your automation capabilities will help you scale. When it comes to
    automation, find what hurts in your processes and look to automate this. However,
    don't focus too much on this; otherwise, we'll experience some of the things we
    will discuss in the *Excessively focusing on tooling* section.
  prefs: []
  type: TYPE_NORMAL
- en: If we want to achieve continuous delivery, then we really need to be looking
    at automating our testing. Without automated testing in place, we are going to
    find it hard to perform continuous delivery.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have looked at organizational reasons for anti-patterns in DevOps.
    Now, let's look at the effects of focusing too much on tooling.
  prefs: []
  type: TYPE_NORMAL
- en: Excessively focusing on tooling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, I have touched on the importance of the other aspects of DevOps before
    focusing on tooling. The dangers of putting too much focus on tooling are evident
    from numerous studies we can find online.
  prefs: []
  type: TYPE_NORMAL
- en: However, the reality is that we can focus on tooling too much compared to culture,
    people, and processes. Even after this point, you can excessively focus on tooling.
    This can damage your transformation efforts.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most common areas of technology in DevOps is around automation. This
    could be automating your CI/CD pipelines or other processes, be it technical or
    business. From my experience, though, many organizations take the message of automation
    in DevOps to an extreme – one that is counterproductive and sometimes harmful
    to businesses. That begs the question, how much automation is too much? Let's
    have a look.
  prefs: []
  type: TYPE_NORMAL
- en: How much automation is too much?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is important to understand how organizations get to this point. Let's imagine
    that most organizations are moving from a traditional waterfall methodology to
    an agile methodology, which is new to them. It's common to see organizations take
    agile to the extreme, which comes from overusing agile and, in turn, DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: The key question should be, does automation serve the *what* and *why*?
  prefs: []
  type: TYPE_NORMAL
- en: 'Research from *451 Research* ([https://www.scriptrock.com/automation-enterprise-devops-doing-it-wrong](https://www.scriptrock.com/automation-enterprise-devops-doing-it-wrong))
    shows a trend that backs this up:'
  prefs: []
  type: TYPE_NORMAL
- en: '"I think there is a tendency to think that large enterprise organizations,
    with all their divisions and teams and silos, are capable of doing what Facebook
    or Netflix have done with their cutting-edge implementations of configuration
    management tools. All of the legacy technologies and processes have to be considered
    as well."'
  prefs: []
  type: TYPE_NORMAL
- en: – *Jay Lyman*, *451 Research*
  prefs: []
  type: TYPE_NORMAL
- en: The toolchain is full of examples of organizations promising to make your organization
    the next Spotify or Netflix. While that is an admirable place to get to, fundamentally,
    your organization is neither Spotify nor Netflix and never will be.
  prefs: []
  type: TYPE_NORMAL
- en: When we try and replicate the successes of these organizations from any perspective,
    but especially technology, we will quickly find ourselves on a downward path.
    Any investment we have made will, at this point, be worthless as we have tried
    to automate too much and push too much tooling.
  prefs: []
  type: TYPE_NORMAL
- en: Striking a balance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is important to know and understand when to automate or implement a tool
    to achieve a specific thing. In fact, some organizations I have worked with in
    the past do no automation in DevOps; some do CI/CD automation, while others automate
    business processes.
  prefs: []
  type: TYPE_NORMAL
- en: Automation is about taking a manual process and placing technology around parts
    of or the whole of a process so that this can be replicated through automation.
    The problem is that not all processes can or should be automated. Note that different
    parts of a process can be automated; it's not always about automating either the
    whole process or no part of the process.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we''re deciding whether something should be automated, we should take
    a step back and follow a simple process. Let''s put this into the context of software
    development processes:'
  prefs: []
  type: TYPE_NORMAL
- en: Think about the processes that take place during development with the rest of
    team, vet them, and lock them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Decide on the tooling for automation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look at the value of automation, step by step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If your processes are flawed to begin with, adding automation to them just makes
    a bad process happen faster and without oversight.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Your organization is also unique, and vendors have a habit of pulling us in
    with fancy marketing and telling us what they're doing with different software
    vendors. However, our organization has been selling books for 100 years. We're
    not a unicorn start-up and mixing old and new systems is going to be a challenge.
  prefs: []
  type: TYPE_NORMAL
- en: Breaking down processes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When it comes to our software development processes, we can start to break them
    down further. We can do this with any process – I'm just using software development
    as our working example.
  prefs: []
  type: TYPE_NORMAL
- en: During this process, we break down our components into sub-processes. These
    are our candidates for automation. When we have sub-processes, we are in a perfect
    place to look at them in detail. At this point, can decide on whether we should
    keep, fix, or create new processes.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to take your time. Creating processes may seem trivial, but
    think about how the business wants to operate in the future and how it operates
    now. Processes must have the ability to grow with the organization through changes.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps-related enabler tasks such as CI, CD, or continuous testing should also
    be combined with any fixed processes at this point.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you must select your tooling. This is where most organizations fall
    off the rails and things go wrong. When we have defined our processes and figured
    out which DevOps components will be integrated into them, we need to work on the
    right tooling for the job.
  prefs: []
  type: TYPE_NORMAL
- en: Organizations that over-automate will typically focus on the actual tools rather
    than the process itself. Technology in this scenario is often based on emotions,
    such as other organizations using similar tools or their colleagues from a conference
    using them.
  prefs: []
  type: TYPE_NORMAL
- en: This situation just ends up in mass confusion for everyone involved. The result
    is too many tools and processes being used that must be adjusted for the tooling,
    when in fact your tooling should be adjusted for the processes.
  prefs: []
  type: TYPE_NORMAL
- en: When automation causes problems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I want to talk about an example I have come across. I worked with an organization
    that wanted to go from nothing to completely automating the life cycle. That way,
    developers could do everything end to end, at any time of the day. The grand vision
    was to enable the build anywhere, anytime scenario.
  prefs: []
  type: TYPE_NORMAL
- en: However, the reality was that developers would release new code to the platform
    twice a day, sometimes more. The result of this behavior was that end users just
    became frustrated with the constant changes.
  prefs: []
  type: TYPE_NORMAL
- en: For me, the nail in the coffin for this experiment was that the automated testing
    was not holistic. Quality issues that could have easily been resolved by humans
    doing some of the performance and regression testing slipped through the net.
  prefs: []
  type: TYPE_NORMAL
- en: In the end, the organization removed some of the tools from the toolchain, limited
    the types of changes that could be made by the developers, and put more rigor
    around the review process, deployments, and, most importantly, testing.
  prefs: []
  type: TYPE_NORMAL
- en: The moral of the story here is to not let grand plans and visions, along with
    the insatiable need to automate, overrule the part of us that applies rationale
    to how and why we automate.
  prefs: []
  type: TYPE_NORMAL
- en: Do no harm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I hope that, after reading the preceding sections, you are not put off by agile
    or DevOps. That certainly wasn't the intention. The fact remains that the value
    we can get from DevOps will far outweigh the cons of DevOps, but we must be smart
    and methodical about our implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, technology is an enabler, and when used properly, it's something that
    adds a tremendous amount of value to your organization and can make the work we
    are doing much easier and more repeatable.
  prefs: []
  type: TYPE_NORMAL
- en: The gold nirvana that is DevOps is something that comes over time through how
    we need to perform agile and the core DevOps principles in our organization, rather
    than how others do it. Many organizations can end up using tools to satisfy the
    vision of someone else rather than their own.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have looked at the effects of having an excessive focus
    on tooling. Now, let's move on and look at what legacy infrastructure and systems
    mean for DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: Legacy infrastructure and systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Of course, DevOps is not just for the cloud; it can be for hybrid environments
    and, of course, on-premises. DevOps is arguably easier with cloud environments,
    but legacy infrastructure, systems, and thinking can be real blockers to DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: Legacy infrastructure causes several issues when it comes to DevOps adoption
    since these systems are not designed for the continuous processes that come with
    DevOps. Releasing in iterations with legacy infrastructure is also very difficult
    and, in some cases, impossible. This breaks the whole DevOps ethos and starts
    to introduce challenges we need to overcome.
  prefs: []
  type: TYPE_NORMAL
- en: Legacy modernization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the ways we deal with technical debt from legacy infrastructure is to
    go through a modernization process. This represents a journey from traditional
    infrastructure to more modern services, for the most part in a public cloud provider.
  prefs: []
  type: TYPE_NORMAL
- en: Modernization has many benefits for businesses looking to scale as it helps
    reduce costs, improve customer experience, makes the time to market faster, and
    enables agility in the business, among other things.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most common routes to modernization is to move away from existing
    monolithic applications to a **microservice**-based architecture and design patterns.
    This pattern represents a domain-based architecture where services are decoupled
    from one another and can be reused for multiple purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Legacy applications and infrastructure present several challenges to us:'
  prefs: []
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single point of failure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lack of flexibility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The move toward more modern application principles and practices helps solve
    and address concerns in these areas. When it comes to processes and people, this
    is where DevOps can help. These are, of course, non-technical areas. These areas
    are as important as the technical areas when it comes to solving your legacy infrastructure
    concerns.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored the anti-patterns associated with culture in DevOps,
    looked at the challenges this brings to our DevOps transformation, and how to
    resolve some of these issues to prevent them from overburdening our efforts. Finally,
    we looked at the effects excessive tooling has on our environment and the dangers
    this brings to our efforts.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll look at value stream maps and learn how to use them
    to drive process change. We'll also look at the difference between value stream
    mapping and process maps.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s recap what we have learned in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Which of these is not a reason for resistance to change?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Poor timing
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Poor communication
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Concerns about pay rises
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Ownership of mistakes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Which of these can be done to improve breakdowns in communication?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Owning mistakes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Take everyone on team building courses
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Continuous feedback
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Bringing people together
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
