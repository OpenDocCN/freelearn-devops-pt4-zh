- en: '*Chapter 6*: Driving Process Change with Value Stream Maps'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To fully understand processes, we must know who executes the process, when it
    is going to be executed, and why it is going to be executed. This information
    can help in breaking down processes and eliminating redundancies so that useful
    processes can be automated.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will help you improve the process flow within your organization
    by reducing unnecessary processes using **value stream mapping**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding value stream mapping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does value stream mapping help?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Differences between process maps and value stream maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explaining an example value stream map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding value stream mapping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The process of value stream mapping comes from value stream management. In turn,
    value stream management is a lean business practice that aims to understand the
    value of software development, delivery, and resources.
  prefs: []
  type: TYPE_NORMAL
- en: This process can also help the flow of value within an organization, while also
    providing life cycle management for software delivery. With value stream mapping,
    instead of teams focusing on features, this can help your teams focus on what
    works and start to shift away from things that do not work.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have looked heavily at the cultural aspects of DevOps and what it
    means for your organization with respect to their transformational journey toward
    DevOps best practices. This chapter will start to focus on the processes within
    your organization. Processes that are lean are processes that work well, contain
    very little waste, and are highly efficient. Once you have achieved this level
    of efficacy with your processes, you can start to automate.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Automating bad processes implies that you make bad processes happen faster.
    Apply lean practices to them first, such as value stream mapping, to make them
    as efficient as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Going through a value stream mapping exercise offers a plain and simple view
    of your processes from the perspective of customer experience. The result of this
    is better alignment with business objectives and the ability to scale agile and
    DevOps transformation.
  prefs: []
  type: TYPE_NORMAL
- en: The first step in this process is about changing your mindset, so that you look
    at software development as a direct link to business goals. We've spoken about
    the changes that are required several times already. The same can be said when
    we're trying to make our processes lean.
  prefs: []
  type: TYPE_NORMAL
- en: Activities you perform in software development and business goals are often
    given a wide berth from each other, and the different priorities of software teams
    keep them caught up in those priorities. In this scenario, where nobody is aligned,
    you must take a step back to see if you are in alignment.
  prefs: []
  type: TYPE_NORMAL
- en: So, the first logical step is to take a pause and back up a little. Evaluate
    what is happening in the business, and then look at how the work you are doing
    in software development is helping and supporting the business in achieving its
    goals.
  prefs: []
  type: TYPE_NORMAL
- en: During this process, evaluate where you are with the people, processes, tools
    involved, and any dependencies that exist so that leadership has complete visibility
    into how things are going.
  prefs: []
  type: TYPE_NORMAL
- en: Going beyond DevOps for process improvement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is true that DevOps has accounted for a huge amount of organizational change
    and transformation within the software industry. This has evolved over time, from
    the initial focus on teamwork and empathy, to how we can drive real value to the
    organization.
  prefs: []
  type: TYPE_NORMAL
- en: As we have discussed already, to get the best return on investment, you must
    focus on the business value you are generating and the customer satisfaction that
    comes with this. This was something we discussed in [*Chapter 2*](B17192_02_Final_ASB_ePub.xhtml#_idTextAnchor038),
    *Business Benefits, Team Topologies, and Pitfalls of DevOps*.
  prefs: []
  type: TYPE_NORMAL
- en: For many organizations, they would agree that DevOps has provided a large amount
    of transformation. However, you will still find a number of enterprises that fail
    to understand and explain the value that is achieved from the investment required.
  prefs: []
  type: TYPE_NORMAL
- en: As your practice matures, you need to focus more on understanding and creating
    metrics and KPIs to measure success. These metrics should increase the quality
    of any software you deliver further and speed up delivery to satisfy customer
    experience, as well as show the business value you are delivering.
  prefs: []
  type: TYPE_NORMAL
- en: The key message here is that successfully implementing DevOps will help a tremendous
    amount, but you must go much further in your level of process maturity.
  prefs: []
  type: TYPE_NORMAL
- en: Taking a look at value stream mapping diagrams
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following diagram is from an article on value stream mapping from Plutora
    ([https://www.plutora.com/blog/value-stream-mapping](https://www.plutora.com/blog/value-stream-mapping)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Example diagram from a value stream mapping exercise'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_06_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.1 – Example diagram from a value stream mapping exercise
  prefs: []
  type: TYPE_NORMAL
- en: We will look at the preceding diagram in more detail later in this chapter.
    The previous example is some output from a value stream mapping exercise.
  prefs: []
  type: TYPE_NORMAL
- en: The value stream map is a diagram that is split into three primary areas. These
    areas are information flow, product flow, and time ladder.
  prefs: []
  type: TYPE_NORMAL
- en: Information flow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section of the diagram shows how any information related to the process
    communicates, as well as how data is transmitted. The diagram shows the release
    manager taking in all customer requests. Only approved requests are submitted
    to the development queue, which is shown as a supplier.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the goal of the value stream mapping exercise, the collection and
    distribution processes shown in SharePoint and Excel can include numerous levels
    of detail, as well as a number of other integrated systems.
  prefs: []
  type: TYPE_NORMAL
- en: Product flow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section looks to map the steps of the software development life cycle all
    the way from the initial concept through to delivery. Depending on your requirements,
    you can focus on specific parts of the process if you are looking to gain efficiencies
    at specific points. It can be as detailed or as high level as needed.
  prefs: []
  type: TYPE_NORMAL
- en: The task that is being performed is shown in the box, as is the individual or
    team performing the task in the box. Key process data is then shown below this.
    The example in the preceding diagram shows two items. C/T refers to cycle time,
    while S/T refers to setup time.
  prefs: []
  type: TYPE_NORMAL
- en: You can include any number of details at this point that highlight any important
    information you wish to show. Triangles show the queue of features that are waiting
    at each stage of the process, followed by dotted arrows from one stage to another.
    These are called **push arrows**. These show that the product is being moved from
    one stage to another, as opposed to being pulled.
  prefs: []
  type: TYPE_NORMAL
- en: Time ladder
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The purpose of the time ladder is to provide a really high-level or simplistic
    view of the timeline involved in the value stream. The top portion of the ladder
    represents the average amount of time that your feature will spend in a queue,
    gate, or waiting at each stage in the process.
  prefs: []
  type: TYPE_NORMAL
- en: The bottom portion of the ladder shows the average amount of time where active
    work is engaged. More specifically, it shows you when value has been added to
    the feature during that specific stage.
  prefs: []
  type: TYPE_NORMAL
- en: Other terminology
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s look at some of the other terminology you may come across in value stream
    mapping diagrams:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cycle time**: This refers to the frequency of features that are produced,
    or the average time between two completed features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Setup time**: This refers to the amount of time needed to prepare for any
    given step. In software engineering, this could be the time needed to understand
    requirements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Uptime**: This is measured as a percentage and provides you with the total
    time that any processes or systems are active.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lead time**: This measures the average time needed for one request to make
    its way through the entire cycle from concept to delivery. We discussed this in
    [*Chapter 3*](B17192_03_Final_ASB_ePub.xhtml#_idTextAnchor071), *Measuring the
    Success of DevOps*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Takt time**: This is the rate you need in order to produce features to meet
    customer demand. It''s a calculation that takes the number of hours in a working
    day, multiplied by the number of working days in a month, divided by the number
    of work hours available, converted into minutes per month. Based on 9,000 minutes
    in a month and 150 features from your customers, dividing those means you have
    60 minutes or less to complete each of those features to keep up with the volume.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's now look at the symbols used in value stream diagrams.
  prefs: []
  type: TYPE_NORMAL
- en: Value stream symbols
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You will notice some specific symbols in *Figure 6.1*. Much like a flowchart,
    these represent specific things. Let''s look at the symbols you can use within
    your value stream diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Symbols used in value stream diagrams'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_06_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.2 – Symbols used in value stream diagrams
  prefs: []
  type: TYPE_NORMAL
- en: Of course, many more exist, but the ones included in the diagram are common,
    and you will certainly need to use them in your own value stream maps. You can
    also group them into categories. The top row includes all the material flow symbols,
    the second row includes information flow symbols, and the bottom row includes
    a general set.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's discuss the key terms involved in material flow, information flow,
    and process flow diagrams in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Material flow
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following terminology is commonly used in material flow diagrams:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Process**: Represents a single individual or team performing a specific task.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shared Process**: The same as a regular process, but the process is shared
    between numerous parties.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Supplier/Customer**: Generally, when this is in the upper left of a value
    stream, this is the starting place of the flow and indicates a supplier. When
    it''s in the upper right, it represents the customer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inventory**: Use this if you want to add an inventory count between two processes.
    As in our example, we put the number of features outstanding at that point in
    time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information flow
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The following terminology is commonly used in information flow diagrams:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Manual flow**: Indicates where conversations or notes are passed and the
    type of information that''s flowing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Electronic flow**: The same as a manual flow, but it represents an electronic
    information asset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Signal Kanban**: This is used when the inventory drops to a minimum and signals
    the production of several parts. Think supermarket stock levels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kanban Post**: Typically, this indicates a location for collecting signals.
    It can also be used to exchange withdrawal and production in Kanban.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: General
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You may also need to use the following in your diagrams:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Operator**: This shows how many operators are needed to process the value
    stream map at a specific step.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kaizen Burst**: Sometimes called a **Kaizen Blitz**, this is a burst of team
    activity focused on resolving specific challenges. Its purpose is to resolve the
    challenge and focus the team on a problem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Quality Burst**: This indicates a problem in quality and can be used at any
    point in the value stream mapping chain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Safety Stock**: This indicates a temporary safety stock to prevent problems,
    should a failure occur, or if other issues are present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we understand some of the fundamentals of value stream mapping, let's
    look at how value stream mapping can help within your organization. Some of the
    terminology we've used so far has been a little generic, so let's make examples
    more specific to software engineering.
  prefs: []
  type: TYPE_NORMAL
- en: How does value stream mapping help?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Value stream mapping is incredibly important. Not only does it help you understand
    your processes, but it also helps translate that understanding into methods that
    improve your processes. It is critical to business sustainability.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three reasons for this:'
  prefs: []
  type: TYPE_NORMAL
- en: Eliminating waste improves the bottom line for your organization. You also discover
    the root cause and source of waste using this process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Teams will discard individual assumptions and prioritize them based on the perspective
    of the customer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wasteful handoffs can be identified easily through visualizations that have
    been created with value stream mapping. Teams can identify and react to improve
    their collaboration, communication, and culture.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While the process of creating value stream maps can be incredibly useful to
    your organization, it can also present some challenges. Let's look at these challenges
    in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Challenges of value stream mapping
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Value stream mapping can be a wasteful exercise if you are not careful about
    how you execute it. You need to be aware of common pitfalls that exist, including
    creating value stream maps and making sure that what you produce is itself of
    value to your business.
  prefs: []
  type: TYPE_NORMAL
- en: Return on investment is crucial when it comes to value stream mapping. Monitor
    the level of effort you need to invest to conduct a value stream map for a process
    and balance that against any potential value you get from it. Keep an eye on your
    return on investment from the start.
  prefs: []
  type: TYPE_NORMAL
- en: The process of identifying waste can be intensive. It's common to come across
    fear and uncertainty when employees know value stream mapping is occurring. They
    wrongly assume this process is used to identify waste from an employee perspective.
  prefs: []
  type: TYPE_NORMAL
- en: Many processes involve cross-functional teams and several other complexities.
    You should make sure you involve people that are experienced from all sides of
    the process when conducting value stream maps.
  prefs: []
  type: TYPE_NORMAL
- en: While baby steps are a fantastic place to start making savings by improving
    steps here and there, these step improvements may not impact the overall bottom
    line until top-to-bottom changes are completed.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Remember, the goal of value stream mapping is to cut waste, not create any more
    than what you already have.
  prefs: []
  type: TYPE_NORMAL
- en: We discussed the symbols you can use in value stream mapping exercises earlier
    in this chapter. My advice would be not to rush to professional solutions to create
    them. Start off by using paper or a whiteboard; the results are the same and you
    can outline your idea. You can formalize the value stream map later using software
    to achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: Use cases of value stream mapping
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Based on the descriptions of some of the symbols we looked at earlier in this
    chapter, you will hopefully have guessed that, like many lean processes that come
    from manufacturing, value stream mapping has its roots not in software engineering,
    nor in technology, but in manufacturing.
  prefs: []
  type: TYPE_NORMAL
- en: Value stream mapping can bring value to several industries. The principals apply
    equally to each of them, and you can adapt to your needs like in any framework.
    Fundamentally, the industry or domain that you are operating on determines the
    items that flow through the value stream map.
  prefs: []
  type: TYPE_NORMAL
- en: For example, when it comes to supply chains, value stream mapping is essential
    to finding and eliminating costly delays, which leads up to the finished product.
    In the services industry, the process will facilitate timely services for customers,
    as well as effective services.
  prefs: []
  type: TYPE_NORMAL
- en: In healthcare, value stream mapping will ensure that patients receive high-quality
    care while reducing any delays that could be life-threatening. Finally, in manufacturing,
    value stream mapping helps identify waste by analyzing each step of both the material
    and information flows. Process items, which flow through the value stream, are
    called materials.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying and reducing waste
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we mentioned in the previous section, value stream mapping originated in
    manufacturing, just like the lean principals themselves. Lean has its origins
    in the automotive industry in Japan. This enabled the Japanese car industry to
    flourish through lean principles and automation while the rest of the world was
    still catching up.
  prefs: []
  type: TYPE_NORMAL
- en: 'Applying that lean thinking to your day-to-day processes is harder than you
    might think. In the manufacturing industry, the following eight things are wastes:'
  prefs: []
  type: TYPE_NORMAL
- en: Defects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overproduction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Waiting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-utilized talent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transport
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inventory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Motion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extra-processing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When applying lean thinking, try thinking about the eight things in the preceding
    list to see where you can make improvements to your processes. Let's run through
    some examples in software development that can help you identify waste.
  prefs: []
  type: TYPE_NORMAL
- en: Transport
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In manufacturing, we think of transport as something physical: moving from
    one place to another. Transport is probably one of the hardest types of waste
    you can discover in software development. After all, the product is not something
    physical that you move – it is something virtual.'
  prefs: []
  type: TYPE_NORMAL
- en: Instead of thinking physically, think about how your tasks are going from one
    developer to the next. This could be from an architect to a developer, or a designer
    to a developer.
  prefs: []
  type: TYPE_NORMAL
- en: A practical example of this could be developer to tester. Let's assume that
    your tester is ready to work on your task and they've just finished working on
    another, so that it can be worked on immediately. First, the tester will look
    at the task to understand what they need to do. Next, you must start the application
    and get to the step you want them to test. It can take time for them to get to
    that point. This is what is called setup time and, in this example, that time
    is generated by the handover.
  prefs: []
  type: TYPE_NORMAL
- en: Waiting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Waste in terms of waiting can be found with **work in progress** (**WIP**),
    as well as waiting for the next step in the process. If you are waiting, then
    that work is not getting processed efficiently. Tasks that wait on someone or
    something else provide non-value-added time. This delays delivery, not just of
    that item but all items.
  prefs: []
  type: TYPE_NORMAL
- en: Good examples of this in the software engineering area would be quality control
    steps such as testing, as well as technical debt and bug fixes.
  prefs: []
  type: TYPE_NORMAL
- en: Overproduction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In software development, this comes in two clear forms. The first will be very
    familiar to you, and this is scope creep. To clarify, scope creep is when you
    start off with an initial set of requirements, but after you start working on
    those requirements, they change.
  prefs: []
  type: TYPE_NORMAL
- en: The second type of overproduction comes into play along with the **Pareto principle**.
    The application of this principle is that 80% of your target audience will only
    use around 20% of your features. Therefore, this principle dictates you will spend
    a large amount of time developing features that will hardly be used.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand why value stream mapping is so important and understand
    how to identify waste, let's have a look at the differences between process maps
    and value stream mapping.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing differences between process maps and value stream maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Value stream mapping shows a significant amount of information and uses a more
    linear format. It is very different from a process map, which only shows the steps
    involved in the process. The same differences also apply to flowcharts, as shown
    in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – High-level diagram showing some of the elements of a flowchart'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_06_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.3 – High-level diagram showing some of the elements of a flowchart
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, a flowchart or process map does a great job of showing the parts
    of the process, including the points of decision throughout the process. However,
    it does not go that step further as a value stream map does.
  prefs: []
  type: TYPE_NORMAL
- en: Value stream mapping attempts to identify waste within processes and between
    process steps. Process mapping, on the other hand, forms a more detailed picture
    of the business process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take the following example diagram from *Creately* ([https://creately.com/blog/diagrams/process-mapping-guide/](https://creately.com/blog/diagrams/process-mapping-guide/)).
    The following process map diagram clearly shows the different parts of the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Example of a process map with swim lanes'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_06_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.4 – Example of a process map with swim lanes
  prefs: []
  type: TYPE_NORMAL
- en: The preceding diagram shows what are known as swim lanes. These are the vertical
    columns you can see. In the previous example, they separate parts of the process
    into different people who interact with the process. You have the customer, front
    office, and technician in the preceding diagram.
  prefs: []
  type: TYPE_NORMAL
- en: This is useful for highlighting who deals with the parts of the process you
    are documenting; it can move in and out of different swim lanes, and the number
    of swim lanes you have on a diagram is entirely dependent on the process.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram, also from *Creately*, is a simpler example of a process
    map. It''s simply read from left to right, following the arrows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Simple example of a process map'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_06_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.5 – Simple example of a process map
  prefs: []
  type: TYPE_NORMAL
- en: The regular boxes are steps in the process where something happens, while the
    rounded pill shapes are initiators and terminators – in other words, where you
    start and stop the process.
  prefs: []
  type: TYPE_NORMAL
- en: When to use either a process map or a value stream map is clearly something
    critical that you need to understand. You can spend lots of time creating both
    process maps and value stream maps and get the wrong result if you are not careful.
  prefs: []
  type: TYPE_NORMAL
- en: Which should I use?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can take advantage of both process maps and value stream maps, obviously
    due to the difference in the level of detail that's produced, so you want to make
    sure you create the right thing for the right reasons. Each type of map is used
    to identify different variables along the way, but there is value in combining
    the components of value streams with the detailed elements of process maps.
  prefs: []
  type: TYPE_NORMAL
- en: A detailed process map, if you think about it, does have all the elements of
    a value stream map – it can also be broken down into much greater detail.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: When your value stream map has identified waste, consider using a process map
    to include a much greater level of detail.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll understand the difference between process mapping
    and value stream mapping. Let's finish this chapter by looking at an example of
    a value stream map and look at what we can do to improve our processes.
  prefs: []
  type: TYPE_NORMAL
- en: Explaining an example value stream map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this chapter, we have looked at what value stream maps are, how they
    can help your business, and, at a high level, the components involved in your
    value stream map. Now, we'll start looking at how to build value stream maps,
    while also looking at the before and after states of DevOps processes.
  prefs: []
  type: TYPE_NORMAL
- en: The process of creating a value stream map that is meaningful can be a lengthy
    process, depending on how big the process is. As we discussed earlier, make sure
    you are getting something out of the process by monitoring your return on investment
    from your value stream mapping activities.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a value stream map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you start to create a value stream map, you should follow the following
    steps to ensure you are successful. It can be a tough task, creating a value stream
    map for the first time. Follow these steps and tips along the way and you will
    be able to produce value stream maps of true value.
  prefs: []
  type: TYPE_NORMAL
- en: Determining the problem to be solved
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, you need to determine what problem you are trying to solve. Don't try
    to map a value stream just because you want to make a diagram – create your value
    stream map from something where a problem exists.
  prefs: []
  type: TYPE_NORMAL
- en: To give you some insight into this, think of problem solving from your customer's
    perspective. Do they feel it takes you too long to deliver new features? Everyone
    will need to be on the same page, so make sure you publish your problem statement.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, set some goals. It's not realistic to say you want to reduce it by
    a specific percentage; it's an admirable goal, but make sure it's realistic.
  prefs: []
  type: TYPE_NORMAL
- en: Ensuring the team is empowered
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When working through value stream maps, you need a team that's both experienced
    and mature. This will help them navigate the task at hand and, most importantly,
    complete it in a timely manner. Leadership should also set aside the budget required
    to ensure that execution is in line with expectations.
  prefs: []
  type: TYPE_NORMAL
- en: Bounding the process
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you have completed and published your problem statement, it is important
    to limit the scope of your value stream mapping exercise. You may not need to
    map the entire process end to end; you may only need to focus on a specific part
    of the process.
  prefs: []
  type: TYPE_NORMAL
- en: This process of breaking down complex processes into smaller parts and then
    breaking them down even more until the complexity is rendered in understandable,
    discreet components is known as process decomposition.
  prefs: []
  type: TYPE_NORMAL
- en: I would recommend this approach overall; you will get better results from experience
    by focusing on part of the problem rather than everything top to bottom. Tackle
    the full process in stages rather than end to end.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have bounded your efforts to a part of the process, make sure you map
    it by conducting a review. Experience cannot be substituted by biased, incomplete,
    or even inaccurate documentation or narrative by others.
  prefs: []
  type: TYPE_NORMAL
- en: Define the steps of the process; complete this multiple times. Sometimes, things
    come out on the second or even third pass. Make sure you do this at least twice
    to ensure you get a complete picture.
  prefs: []
  type: TYPE_NORMAL
- en: Collecting process data and creating a timeline
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'While you are conducting your value stream mapping exercise, note down any
    applicable process data you wish to collect. This may include, but is certainly
    not limited to, the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: Number of people involved
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Average working hours
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cycle time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wait time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uptime
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, make sure that you include your process times and lead times at the bottom.
    Remember earlier when I explained what the time ladder is used for? This is where
    it comes in.
  prefs: []
  type: TYPE_NORMAL
- en: Assessing the current value stream map
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When you start to assess your current value stream map, look for specific things
    at this stage of the process. Ask the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Do teams have multiple dependencies?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is your wait time or lead time too long?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Might this be because your testing does not run in parallel?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is your environment stable?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All these questions can be used to evaluate your value stream map. It could
    even be that you have valuable steps in your process, but they don't transpire
    into anything meaningful to the customer. You should also be looking for any drag
    in the process or stagnation within the information flow. Make a note of whether
    this is either a push or a pull.
  prefs: []
  type: TYPE_NORMAL
- en: Designing your future state
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this stage, your value stream map may not be completed or a final version,
    but that's fine. The important thing here is to ensure that the value stream map
    for your future state aligns with your organization's vision for the future.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure nothing is set in stone. In the spirit of DevOps as well, ensure you
    can incorporate continuous feedback into this process and make any adjustments
    that make sense.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing your future state
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You must validate that your future state is going to make the differences you
    envisage. Monitor your **objectives and key results** (**OKRs**), as well as your
    **key performance indicators** (**KPIs**), to learn from the trends you are seeing.
    We discussed metrics in [*Chapter 3*](B17192_03_Final_ASB_ePub.xhtml#_idTextAnchor071),
    *Measuring the Success of DevOps*, which can be used to make KPIs.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The goal of a successful value stream mapping exercise is ensuring that everyone
    is now pointing and working in the same direction: that of the customer.'
  prefs: []
  type: TYPE_NORMAL
- en: Of course, all of this should have fixed the problem you set out in the problem
    statement you defined at the beginning. If you cannot say it has, then go back
    and look at what else can be done to make the situation better.
  prefs: []
  type: TYPE_NORMAL
- en: Current state value stream map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let''s look at a real example of what value stream maps look like in the
    DevOps world. Take a look at the following diagram, which is a template from *Lucidchart*
    ([https://www.lucidchart.com/pages/examples/value-stream-mapping-software](https://www.lucidchart.com/pages/examples/value-stream-mapping-software))
    that perfectly illustrates the value you can get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Current value stream map of our DevOps processes'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_06_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.6 – Current value stream map of our DevOps processes
  prefs: []
  type: TYPE_NORMAL
- en: I want to take a little bit of time to explain what is happening in this diagram.
    First, let's discuss the process in a few words. You can see that our customer
    section is the main point of ingress.
  prefs: []
  type: TYPE_NORMAL
- en: It starts with the customer sending a feature request via email. This is picked
    up by one of two service engineers. At this point, they log that request into
    Confluence. The one product manager in the team then approves and prioritizes
    the feature request in Jira.
  prefs: []
  type: TYPE_NORMAL
- en: Then, our software engineering team of two people will work on that item in
    Java using the details from the request in *Jira*. That code is then deployed
    into pre-production by one deployment engineer using *Jenkins* and *Circle CI*.
    Then, using *Selenium*, QA is completed by QA specialists and the customer. Finally,
    one deployment engineer is responsible for pulling all the development effort
    together to release to production.
  prefs: []
  type: TYPE_NORMAL
- en: The total lead time for this process is 243 hours, while the total value-added
    time (the time spent on a task) is 26.08 hours. **%C&A** refers to the output
    that is complete and accurate, while **Rolled %C&A** (24%) refers to the time
    that does not need to be reworked. Finally, the **activity ratio**, at 11%, is
    the time spent working.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, while the process is well-defined and mapped out well, you can see
    several areas of improvement. Let's look at these areas.
  prefs: []
  type: TYPE_NORMAL
- en: Future state value stream map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Future state does not always have to be about removing steps from your process.
    Remember that it is about making efficiency savings for your process. Look at
    the following future state value stream map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7 – Future state value stream map for our DevOps processes'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_06_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.7 – Future state value stream map for our DevOps processes
  prefs: []
  type: TYPE_NORMAL
- en: Before I get into the details of what has changed with our future state, please
    see the dots above the top right of the process boxes, which indicate that a process
    is new. As I just mentioned, this is not about cutting process steps but adding
    them if this adds value.
  prefs: []
  type: TYPE_NORMAL
- en: Next, under each process, the time data shown includes arrows pointing right
    to indicate no change. You will add these if you introduce a new process. The
    arrows pointing down indicate a decrease in time from the previous value stream
    map or current process, while arrows pointing up indicate an increase in time.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's have a look at what has changed. First, let's look at the new processes.
    Here, you can see that instead of having the customer send across an email with
    their new requirement, this is now fulfilled by the direct addition to **Confluence**.
    The product manager will now review and approve/prioritize the request, resulting
    in time being saved.
  prefs: []
  type: TYPE_NORMAL
- en: This also results in a reduction in lead time for the developers to complete
    their development effort, which is now down to 96 hours lead time and 11 minutes
    for completing the actual task.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, you can see savings across several different tasks in the process and
    the introduction of new testing processes, as well as monitoring the code. All
    this means that the total lead time is now 188 hours, down from 243 hours.
  prefs: []
  type: TYPE_NORMAL
- en: The value added time is now 19.54 hours, down from 26.08 hours. We have reduced
    the amount of time people are working on value, which isn't a bad thing. This
    means they can deliver more with the time they have. Introducing testing and monitoring
    makes delivery more mature, but above all, increases the customer's interaction
    with us.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at the process of value stream mapping, understood
    what it is, how it can help us, and how to build a value stream map. We also looked
    at the difference between value stream maps and process maps, discussed the different
    types of process waste you can identify in your processes, and finally looked
    at an example of how to create a value stream map.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at how to take what you have learned in this
    chapter and apply that to delivering process change in your organization. We'll
    do this by looking at eight steps for change, the effects of process change, and
    common challenges within process change.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s recap some of what we have learned throughout this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Which of these will you not find on a value stream map?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Information flow
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Product flow
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Swim lane
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Time ladder
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Which of these is not a type of waste?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Transport
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Underproduction
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Motion
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Overproduction
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
