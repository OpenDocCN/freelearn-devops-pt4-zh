- en: '*Chapter 8*: Continuous Improvement of Processes'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuous feedback and improvement is a key element of DevOps. The ability
    to keep learning and providing feedback on all aspects of DevOps to further improve
    what you are doing and provide more value to the business is a fundamental pillar
    of DevOps. This chapter looks at the techniques for continuous feedback, how to
    iterate process changes, and ensuring everyone stays up to date with changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is continuous improvement and feedback?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Techniques for continuous improvement and feedback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Iterating changes to processes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keeping pace with change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is continuous improvement and feedback?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Continuous improvement** is the process of ongoing effort required to improve
    services, products, or processes. This process can be done in an iterative manner
    over a period or all at once. How this is done is dependent on the degree of change
    we are looking to make.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Continuous feedback** has many different uses, including the ability to provide
    feedback to employees on their performance. You can also use continuous feedback
    in product development to gain valuable insights into the performance of your
    product. The systematic way that strengths and weaknesses of employee performance
    are discussed translates well to the product world and DevOps as well.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's now look at continuous improvement in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Building a continuous improvement culture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The concept of DevOps is primarily built around continuous everything. Lots
    of terminology in DevOps also includes it in the name, such as continuous integration,
    and continuous deployment to name a couple. Continuous everything is a great level
    to achieve, and things like continuous integration, testing, and deployment work
    towards removing bottlenecks in software delivery processes and tools.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous improvement, however, looks at the removal of bottlenecks in DevOps
    systems and processes. Creating a culture of continuous improvement is not specific
    to technology or DevOps though.
  prefs: []
  type: TYPE_NORMAL
- en: Building a successful continuous improvement culture is all about making sure
    you instill the principles at each level of leadership. As time progresses, you
    should make noise about your successes; you have to fight the inertia and reluctance
    to change processes and routines, even the bad ones.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now look at continuous feedback in more detail. Many industries already
    have well-developed practices and methodologies around continuous improvement.
    We can take a lot of learnings from the manufacturing industry, where lean was
    born. In lean, continuous improvement is called **Kaizen**. Let's discuss this
    in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding and implementing Kaizen principles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kaizen was born over 30 years ago thanks to Masaaki Imai, the founder of the
    *Kaizen Institute* (https://www.kaizen.com). Today, Kaizen is recognized as a
    key pillar when it comes to competitive advantage.
  prefs: []
  type: TYPE_NORMAL
- en: 'Kaizen is built on five principles:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Know your customer** – Determine their interests so that you can improve
    their experience.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Let it flow** – Everyone in your organization should strive to add value
    while reducing waste.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Go to gemba** – Value is created where things happen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Empower people** – Performance and improvements should be tangible and visible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Be transparent** – Set the same goals for your teams and provide a system
    and tools to reach them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One of the most famous implementations of Kaizen is the **Toyota Production
    System** or **TPS** for short (https://en.wikipedia.org/wiki/Toyota_Production_System).
    The expectation is that when an anomaly is detected, all production personnel
    stop what they are doing and suggest an improvement to resolve the issue. This
    may then initiate Kaizen.
  prefs: []
  type: TYPE_NORMAL
- en: 'The cycle of Kaizen, known as a blitz, burst, or event is based on **PDCA**,
    or the Deming cycle, and defines four steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Plan**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Do**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Check**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Act**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The fundamental concept of this is to identify any waste in the system and quickly
    remove it. In [*Chapter 7*](B17192_07_Final_ASB_ePub.xhtml#_idTextAnchor146),
    *Delivering Process Change in Your Organization*, on driving process change with
    value stream maps, one of the symbols we discussed was the initiation of a Kaizen
    burst. If you think back to that chapter, then think about what we have discussed
    here, this is where you can see the link between the two activities.
  prefs: []
  type: TYPE_NORMAL
- en: The value stream map is used to map out and identify the activities and the
    waste, then the Kaizen burst is used to eliminate that waste. It is the burst
    that is the activity performed to resolve the waste and implement a new process.
  prefs: []
  type: TYPE_NORMAL
- en: Another common continuous improvement model is *Six Sigma* ([https://en.wikipedia.org/wiki/Six_Sigma](https://en.wikipedia.org/wiki/Six_Sigma)).
    Kaizen and Six Sigma are the two models you will often find in DevOps, used to
    continuously improve processes.
  prefs: []
  type: TYPE_NORMAL
- en: The main difference is that Kaizen seeks to improve the business as a whole
    by establishing a standard way of working, increasing efficiency, and eliminating
    business waste.
  prefs: []
  type: TYPE_NORMAL
- en: Six Sigma is more concerned with output quality (the final product). This is
    made possible by identifying and eliminating the sources of defects.
  prefs: []
  type: TYPE_NORMAL
- en: Lean is all about eliminating waste in order to increase process speed and quality
    by reducing process waste.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now look at how to build a culture of continuous feedback at your organization.
  prefs: []
  type: TYPE_NORMAL
- en: Building a continuous feedback culture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Carrying on from our theme of continuous everything when it comes to DevOps,
    if continuous improvement is the methodology used to improve your processes and
    systems, then continuous feedback is the mechanism that highlights that opportunity
    for change.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like continuous improvement, continuous feedback is not a DevOps exclusive
    idea or model but also takes inspiration from the employee management world. Continuous
    feedback can be considered informal, however, tools and processes do exist to
    define how the feedback is collected, processed, and even acted upon:'
  prefs: []
  type: TYPE_NORMAL
- en: Clear communication of vision and goals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the purpose of continuous feedback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing channels and tools to share feedback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensuring accountability for the feedback given and received
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Educating teams about the importance of continuous feedback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's now look at these five key elements of continuous feedback culture in
    more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Clear communication of vision and goals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Without clear communication of your organization's vision and goals, it's hard
    for your teams to contribute feedback on how to improve. When your teams clearly
    understand vision and goals, it makes it easy for them to provide quality feedback
    on the things that need to change.
  prefs: []
  type: TYPE_NORMAL
- en: Feedback, when you understand the context of both the vision and goals, allows
    your teams to directly think about what parts of processes, systems, and tools
    need to change to enable your organization to have a greater chance of achieving
    its goals.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the purpose of continuous feedback
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Providing good feedback is not simply about just saying "good job" or "you didn't
    execute well enough." Good feedback provides tangible examples with a detailed
    explanation. It should be as descriptive as possible and as real-time as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Feedback allows for the management of performance. This is irrespective of either
    individuals or assets such as products or services. Feedback helps identify areas
    of both improvement and strength, which with feedback can be respectively made
    better or even stronger.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Continuous feedback should not just come from leaders. It should come from everyone
    and be treated the same no matter where it comes from.
  prefs: []
  type: TYPE_NORMAL
- en: From your team's perspective, this also provides the ability for them to voice
    their opinions and concerns in a constructive manner, especially when you are
    starting out on your DevOps transformation. This is a useful way to engage everyone.
  prefs: []
  type: TYPE_NORMAL
- en: Providing channels and tools to share feedback
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Providing several ways, known as channels, to share feedback is crucial. Everyone
    likes to engage in a different way. You will find some people use one channel
    and others use another.
  prefs: []
  type: TYPE_NORMAL
- en: Individual feedback sessions, as well as group feedback sessions, give a great
    balance and you will find that you will get great feedback from both sessions.
    One of the benefits of group feedback sessions is that you will find that feedback
    from one person may spur on similar feedback or validation of that feedback. This
    can be a powerful exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Don't discount the power of anonymous feedback. While it would be great to attribute
    every piece of great feedback to an individual, even in culturally mature environments,
    the truth is that people sometimes want to provide feedback anonymously. There
    is nothing wrong with this approach and anonymous feedback should be welcomed
    and actioned the same way.
  prefs: []
  type: TYPE_NORMAL
- en: Ensuring accountability for the feedback given and received
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Regardless of whether your feedback is anonymous or not, it's key that someone
    is accountable for that feedback, both if you are providing feedback and if you
    are receiving feedback. You need to own that feedback. Everyone needs to be committed
    to the culture of continuous feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Consistency is required for feedback to change a culture. It helps drive accountability
    and transparency horizontally and vertically. Make sure the feedback is public.
    The actions you take and, if possible, the decisions you made to decide on the
    appropriate action to take, should be public.
  prefs: []
  type: TYPE_NORMAL
- en: Educating teams about the importance of continuous feedback
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One thing you cannot do or expect is to implement a system of continuous feedback
    and have teams and employees get it overnight. Training and communication are
    important here as both in tandem allow you to highlight the reasons why you are
    doing the scheme, what the benefits will be, and how it will work.
  prefs: []
  type: TYPE_NORMAL
- en: Highlight to employees that both positive and negative feedback is equal. Both
    positive and negative feedback helps you improve, regardless of whether that is
    employee performance, product performance, or service performance.
  prefs: []
  type: TYPE_NORMAL
- en: Now we understand what continuous feedback and improvement are. Let's now look
    at the techniques we can use to implement them within our organization.
  prefs: []
  type: TYPE_NORMAL
- en: Techniques for continuous improvement and feedback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we looked at *What is continuous improvement and feedback?* at the start
    of the chapter, we briefly discussed the use of Kaizen and there was a quick mention
    of Six Sigma, which are both methodologies you can use to take steps towards continuous
    improvement. What about before you get to that stage though?
  prefs: []
  type: TYPE_NORMAL
- en: Let's now look at techniques you can use for continuous improvement.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous improvement processes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we discussed in the previous section, the PDSA cycle stands for Plan, Do,
    Study, and Act. Behind this is a six-step model that is a systematic approach
    to planning, sequencing, and improving efforts using data and is an elaboration
    of the PDSA model.
  prefs: []
  type: TYPE_NORMAL
- en: 'The six steps used are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Identify opportunities
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Analyze the root cause
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Take action
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Study the results
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Standardize the solution
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plan for the future
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These distinct steps are sequential and an essential part of a continuous improvement
    process. Your continuous improvement plans should always link back to your organization's
    vision, goals, and priorities.
  prefs: []
  type: TYPE_NORMAL
- en: Let's have a look at these six steps in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Identify opportunities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can identify opportunities for process improvement in a few different ways.
    An opportunity is likely to come from continuous feedback where a problem is highlighted
    and the result of that is the opportunity to improve.
  prefs: []
  type: TYPE_NORMAL
- en: It could also come from personal feedback from the team working with the process,
    or in less mature environments, where the continuous feedback loop is not yet
    fully established but an operational issue or complaint has triggered that review.
  prefs: []
  type: TYPE_NORMAL
- en: Analyze the root cause
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before you can start to remediate the problem, you need to understand what the
    problem is. Make sure you identify the root cause of the problem. Remember, in
    some cases, issues occur because of a chain of events, so don't stop at the first
    problem you find. Keep looking backward to find the earliest issue that could
    have set off a chain reaction of events.
  prefs: []
  type: TYPE_NORMAL
- en: The analysis does not stop there though. When you know what the root cause is,
    validate those findings and see what you can do to prove that is indeed the root
    cause. Depending on the process, and of course the inputs, you may even be able
    to reproduce the results.
  prefs: []
  type: TYPE_NORMAL
- en: Take action
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you are ready to act, this is a two-step process. First, you need to be
    able to plan the actions that correct the root cause. Bear in mind, there could
    be numerous actions needed to resolve the problem.
  prefs: []
  type: TYPE_NORMAL
- en: The second step is implementing those planned actions. Implementing that plan
    comes with several actions. Communicating your plan is crucial here. Having the
    right people in place is also important to help make the changes successful.
  prefs: []
  type: TYPE_NORMAL
- en: Study the results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Confirming the actions you have taken and implemented is also important. You
    need to monitor associated metrics with the process you have changed and any associated
    outputs and tooling to make sure that your changes have worked and have not had
    an adverse effect.
  prefs: []
  type: TYPE_NORMAL
- en: Be prepared through your planning to have a route to back out of the changes
    should they be unsuccessful and to make small incremental changes if needed to
    make your changes successful.
  prefs: []
  type: TYPE_NORMAL
- en: Standardize the solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Through regular monitoring, you can see whether the results you are seeing are
    consistent and established. At this point, you must ensure that the improved level
    of performance is consistently maintained.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes you will need to make further changes to make this standardized approach
    stick across the whole organization. You should make sure you plan for those things
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: Plan for the future
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you have completed your implementation, take a step back. A simple retrospective
    will help here. Work with the team to identify what went well. This is a form
    of continuous feedback and what you learn here can be applied next time you make
    a process change.
  prefs: []
  type: TYPE_NORMAL
- en: Any residual problems that come out of the change need to be accounted and planned
    for here as well.
  prefs: []
  type: TYPE_NORMAL
- en: Now we have looked at the six steps involved in continuous improvement, let's
    have a look at other continuous improvement techniques you can use in your organization.
  prefs: []
  type: TYPE_NORMAL
- en: Additional continuous improvement techniques
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have just walked through one example of a continuous improvement process
    that you can use in your organization to help get started. Of course, plenty of
    other frameworks and techniques exist though. Let's have a look at some of them.
  prefs: []
  type: TYPE_NORMAL
- en: Daily huddles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the most common agile practices that almost all organizations will practice
    is the daily huddle, sometimes known as the daily standup. Your daily huddle can
    be a source of inspiration for identifying opportunities to improve.
  prefs: []
  type: TYPE_NORMAL
- en: Having the whole team on that short call to discuss impediments will give people
    the opportunity to have their say about things that can be done to remove that
    impediment, which might even be a Kaizen burst to resolve a bottleneck.
  prefs: []
  type: TYPE_NORMAL
- en: Catchball
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a lean technique that involves the movement of ideas from one person
    or a team to another one for feedback. Strictly speaking, this could also be a
    continuous feedback technique.
  prefs: []
  type: TYPE_NORMAL
- en: This method means people at different levels of the organization get to provide
    feedback and contribute to the development of that idea. It could be anything
    as well – in DevOps, this is commonly a product or service.
  prefs: []
  type: TYPE_NORMAL
- en: Gemba walks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may not have heard of gemba walks, but you'll most likely have seen them
    done before. The practice involves leaders walking around, asking questions, and
    identifying opportunities for improvement with the people on the ground executing
    the work.
  prefs: []
  type: TYPE_NORMAL
- en: Improvements that are found are not implemented at this stage. This is done
    after analysis is done.
  prefs: []
  type: TYPE_NORMAL
- en: Now we have looked at some other continuous improvement techniques you can use
    in your organization, let's move on to looking at the continuous feedback process
    in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: The continuous feedback process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In very simple terms, continuous feedback or a continuous feedback loop can
    be simplified as four simple steps. These four steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Assess
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plan
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It won't come as a shock to you that the four steps outlined above have very
    close relationships with the continuous improvement process we discussed earlier.
    You can connect both processes together though.
  prefs: []
  type: TYPE_NORMAL
- en: The process outlined above for continuous feedback ensures you have the appropriate
    process in place to capture feedback, assess what that feedback means, plan how
    it is going to be actioned, and then implement that plan. This is where continuous
    improvement comes in.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now look at other continuous feedback techniques you can use within your
    organization.
  prefs: []
  type: TYPE_NORMAL
- en: Additional continuous feedback techniques
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most continuous feedback techniques come from the employee performance management
    world and human resources. You can use a number of those techniques for product
    and service feedback though.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at some of them.
  prefs: []
  type: TYPE_NORMAL
- en: The EDGE framework
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The founder of Zoomly *Dawn Sillett* (https://www.zoomly.co.uk/people) outlines
    the **EDGE** feedback framework. It is an acronym for **Explain, Describe, Give**,
    and **End Positively**, this provides a clear structure that aims to improve clarity
    and provides actionable results from that feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Each component of the framework is aimed at improving performance in a sustained
    manner.
  prefs: []
  type: TYPE_NORMAL
- en: 360-degree feedback
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will have come across 360-degree feedback in your time. This is the task
    of collecting feedback from multiple sources to build up a bigger picture of performance.
    In human terms, this is from leaders, managers, colleagues, and peers.
  prefs: []
  type: TYPE_NORMAL
- en: In the DevOps world, this can be from different product managers, engineers,
    security teams, customers, and other sources. Think about whether you want your
    360-degree feedback to be anonymous or not. This is an important factor when it
    comes to quality.
  prefs: []
  type: TYPE_NORMAL
- en: Cross-team feedback is great, but remember, not all teams have the same culture.
    Without a mechanism to provide anonymous feedback, some people may not be as honest
    as they could be.
  prefs: []
  type: TYPE_NORMAL
- en: Feedback ratios
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Different research suggests that the ratio of positive to negative feedback
    should be between 3:1 and 5:1\. This is of course when working with humans, but
    feedback on processes, products, or services is similar.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of which ratio you work with, ensure that you heavily load feedback
    with positives over negatives. Emphasis on positive feedback helps create a culture
    of improvement and performance.
  prefs: []
  type: TYPE_NORMAL
- en: Now we have looked at the continuous feedback techniques available to us in
    our business, let's now look at how to iterate changes to your processes.
  prefs: []
  type: TYPE_NORMAL
- en: Iterating changes to processes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like with application code, it is important to take an iterative approach
    to changing processes. When it comes to application code, we take this approach
    so that if something does go wrong, we can easily know what changes were made,
    who made them, and why. It provides full traceability of what is happening.
  prefs: []
  type: TYPE_NORMAL
- en: We need that same level of traceability and transparency when it comes to iterating
    changes to processes. That way, if at any point we need to see what happened and
    why, it's easy to identify that information. Secondly, we can see the impact of
    a change before moving onto the next one.
  prefs: []
  type: TYPE_NORMAL
- en: This really applies to all types of changes, from technology processes to business
    processes. The biggest impact does not come with individual changes to those processes,
    but large programs of change that involve numerous changes to the same set of
    processes or the same process.
  prefs: []
  type: TYPE_NORMAL
- en: When we work in iterations, or in sprints as we commonly call them in agile
    methodologies, the results are clear, impactful, and wide-ranging across several
    disciplines. In fact, iterative design is commonly adopted as a design methodology
    in the prototyping, testing, analyzing, and refinement of a product. Why not apply
    this in process design as well?
  prefs: []
  type: TYPE_NORMAL
- en: Iterative design processes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When designing new processes, just like in product design, remember that changes
    are easier to make and less expensive to implement in the earliest stages of the
    development cycle.
  prefs: []
  type: TYPE_NORMAL
- en: In iterative design, the first step is to create a prototype. You can do the
    same with a process as well. Using all the requirements you have and the tools
    at your disposal, work on a prototype process and work through scenarios, documenting
    the outcomes, which is valuable feedback on how your process works.
  prefs: []
  type: TYPE_NORMAL
- en: Focus groups are used in iterative design processes as well. Just like gaining
    360-degree feedback, or some of the elements of Kaizen, they work to gain feedback
    from specific groups of people on specific problems.
  prefs: []
  type: TYPE_NORMAL
- en: Iterative design is usually a continual process. The techniques we have discussed
    so far in this chapter have taught us the elements of this continual process.
  prefs: []
  type: TYPE_NORMAL
- en: Using iterative design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Iterative design is a way to face the realities of unpredictable user needs
    and behaviors, which can lead to major changes in the design. User testing often
    shows, when confronted with a user test, that even carefully assessed ideas are
    insufficient. It is therefore important that the flexibility of the iterative
    design approach is, as far as possible, extended to the system. Designers must
    also recognize that user testing results can lead to fundamental changes that
    require designers to be prepared to give up their old ideas in favor of more user-friendly
    new ideas.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of iterative design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When correctly applied, iterative design is a way of making sure that the best
    possible solution is in place. Significant cost savings are also possible when
    the iterative design approach is applied early in the development cycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some other key benefits include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Misinterpretations become evident earlier in the process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It encourages user feedback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The development focuses on issues most critical to the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inconsistencies between the design and requirements are detected early
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have looked at some techniques for continuous improvement and feedback in
    this section. Next, we will look at how to keep pace with change in your organization.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping pace with change
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On top of an individual's day-to-day role, it can be difficult keeping up with
    the technology changes in their field, as well as all the work they are doing
    in the current sprint, thinking about future work coming up as well. It's hard,
    so adding on top of that the process changes you are making makes it very difficult.
  prefs: []
  type: TYPE_NORMAL
- en: You need to be able to manage the pace of change within your organization when
    it comes to process changes. Of course, process changes are very important – they
    are how you improve as an organization, but they can be the thing people forget
    the quickest.
  prefs: []
  type: TYPE_NORMAL
- en: Process changes usually fail because the change fails to stick in the organization.
    With lots of competing priorities in most organizations and lots of information
    to keep on top of, many people sadly forget process information first.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following things can be used to try and make this easier for your employees
    and make your process changes stick:'
  prefs: []
  type: TYPE_NORMAL
- en: Effective communication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowledge transfer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to subject matter experts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's now have a look at these three areas in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Effective communication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having an effective method of communication is part of making your process changes
    stick in your organization.
  prefs: []
  type: TYPE_NORMAL
- en: Working groups
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As a working group that is implementing a change to a process, you can set up
    sessions throughout the process to ensure that the changes you are making are
    bite-sized and that you communicate them frequently.
  prefs: []
  type: TYPE_NORMAL
- en: People are more likely to consume smaller chunks of information, especially
    when they have a high workload. Consider setting up working groups in person and
    virtually to maximize attendance.
  prefs: []
  type: TYPE_NORMAL
- en: Collaboration tools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Collaboration tools such as Microsoft Teams or Slack are effective at grouping
    together communication on such important topics. You can use the channels or groups
    concept to create a process group. Have everyone check this periodically and make
    wider announcements.
  prefs: []
  type: TYPE_NORMAL
- en: One of the benefits of this method is the communications and information you
    share are available for people to look back on. The drawback to attending meetings
    is people don't always make notes. Collaboration tools can fix this by making
    sure you have historical information available to view.
  prefs: []
  type: TYPE_NORMAL
- en: Group-wide emails
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: From experience, group-wide, generic emails to many people don't work. The communication
    isn't personal enough to engage people and have them look at the content properly.
  prefs: []
  type: TYPE_NORMAL
- en: If you do take this approach, consider something to make it more targeted rather
    than a blanket communication, to keep people engaged.
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge transfer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The transfer of knowledge is important. We just discussed the use of collaboration
    tools. Use them to help transfer knowledge and keep documentation stored centrally
    so that there is one master version of truth for all process documents and flowcharts.
  prefs: []
  type: TYPE_NORMAL
- en: Everyone takes in information differently and it's important that you cater
    for these scenarios, but try to make sure that above all, this knowledge is stored
    centrally. Wikis are great tools to help with this and they're open to everyone
    to edit where applicable.
  prefs: []
  type: TYPE_NORMAL
- en: Access to subject matter experts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having appropriate documentation and methods of communication and knowledge
    transfer is of course important, as we have just discussed. One of the simplest
    things you can do though is to make sure your subject matter experts have time
    to work with people who need help.
  prefs: []
  type: TYPE_NORMAL
- en: A common way of doing this I have implemented before that works well is to have
    your subject matter experts sit with the teams affected, so if they have a question,
    they can just ask – no need to raise a formal ticket and wait for a response over
    email.
  prefs: []
  type: TYPE_NORMAL
- en: Added benefits to this are that you increase the collaboration between people
    within your organization and this has longer-term benefits the more people work
    together. It helps establish an open culture and creates trust in turn.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at the topics of continuous improvement and continuous
    feedback. We looked at Kaizen principles and how to build an effective continuous
    improvement and feedback culture in your organization. We also discussed how to
    iterate changes to your processes with iterative design processes, as well as
    how to keep pace with the rate of change in your organization.
  prefs: []
  type: TYPE_NORMAL
- en: The skills learned in this chapter will help you and your team continuously
    improve along your DevOps journey, not just during the initial transformation
    but, as we discussed, during the ongoing evolution of DevOps within your organization.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll look at the technical stack for DevOps. We'll look
    at the groups of DevOps tools available, understand how tooling helps in DevOps,
    and the pros and cons of DevOps tools.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now recap some of what we have learned throughout this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: How do continuous improvement and feedback differ?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Continuous feedback is about gathering rather than acting
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Continuous improvement is about acting on the feedback
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. The models are the same
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. The models are completely different
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What design process aligns well with process change?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Unit testing
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Iterative design
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Continuous deployment
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Continuous integration
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
