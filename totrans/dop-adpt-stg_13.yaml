- en: '*Chapter 9*: Understanding the Technical Stack for DevOps'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第9章*：理解DevOps的技术栈'
- en: Adding tooling to your DevOps investments is key to making sure your adoption
    goes from good to great. There are many DevOps tools on the market today. Understanding
    what toolsets to implement for today and for tomorrow can be challenging. In this
    chapter, we look at the pros and cons of the main tooling involved in DevOps.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 将工具加入到你的DevOps投资中是确保你的采纳从好变得更好的关键。如今市面上有许多DevOps工具。理解今天和明天应实施哪些工具集可能是一个挑战。在本章中，我们将探讨DevOps中主要工具的优缺点。
- en: By the end of this chapter, you can expect to gain an understanding of the different
    families of DevOps tools as well as understanding how tooling helps in DevOps.
    You will also understand the benefits and obstacles of DevOps tooling.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你可以期待理解不同的DevOps工具家族，并了解工具如何在DevOps中发挥作用。你还将理解DevOps工具的好处和障碍。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主要内容：
- en: What are the families of DevOps tools?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps工具的家族有哪些？
- en: How does tooling help the adoption of DevOps?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具如何帮助推动DevOps的采纳？
- en: Understanding the benefits of DevOps tooling
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解DevOps工具的好处
- en: Understanding the obstacles of DevOps tooling
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解DevOps工具的障碍
- en: What are the families of DevOps tools?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps工具的家族有哪些？
- en: The DevOps ecosystem, as we call it, has a number of different categories that
    tools fall into. Some of these tools are designed, developed, and marketed for
    incredibly specific reasons. There are industry-specific tools that solve unique
    problems as well.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所说的DevOps生态系统有许多不同的类别，工具被划分到这些类别中。一些工具是为了非常特定的目的设计、开发和营销的。也有一些行业特定的工具解决了独特的问题。
- en: Of course, you also come across tools that, while specific to a category, also
    apply across many industries, and some tools are suites of tools that provide
    services right across the ecosystem.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你还会遇到一些工具，虽然它们特定于某一类别，但也适用于许多行业，有些工具是提供跨整个生态系统服务的工具套件。
- en: 'We can use a traditional diagram that depicts the DevOps loop to talk about
    the different categories. I like to use the following categories, which closely
    align to those given in traditional diagrams but have slight differences:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一个传统的图表来描述DevOps循环，以讨论不同的类别。我喜欢使用以下这些类别，它们与传统图表中的类别非常接近，但有一些细微的差异：
- en: Collaborating
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 协作
- en: Building
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建
- en: Testing
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试
- en: Deploying
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署
- en: Running
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行
- en: 'You can see a visual depiction of this in the following diagram:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在下面的图表中看到这一点的可视化表示：
- en: '![Figure 9.1 – Visual representation of the toolchain phases'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.1 – 工具链阶段的可视化表示'
- en: '](img/B17192_09_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17192_09_01.jpg)'
- en: Figure 9.1 – Visual representation of the toolchain phases
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 – 工具链阶段的可视化表示
- en: Let's have a look at these in more detail to understand what types of tools
    are part of each section of the ecosystem.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看一下这些，了解哪些类型的工具属于生态系统中的每个部分。
- en: Collaborating
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 协作
- en: I have added collaboration to this list, which is not actually found on most
    traditional lists, because of the importance that collaboration has in DevOps.
    So far, we have looked at collaboration from a cultural perspective as well as
    when it comes to people and processes, but tooling is important to collaboration
    as well.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我将协作加入到这个列表中，这个内容实际上在大多数传统列表中找不到，因为协作在DevOps中的重要性。所以到目前为止，我们已经从文化视角以及人员和流程的角度看过协作，但工具在协作中也非常重要。
- en: You can have great processes, people, and culture within your organization around
    collaboration, but in the end, without the right tools in place, you still won't
    get very far, and scaling will also be a real issue.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在组织内部围绕协作建立出色的流程、人员和文化，但最终，如果没有合适的工具，你仍然无法走得很远，规模化也会成为一个真正的问题。
- en: When you think of collaboration, it's easy to think of the big players such
    as Zoom, Microsoft Teams, Skype, and others, but the toolset is much broader than
    that. Collaboration is also about knowledge sharing.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想到协作时，很容易想到Zoom、Microsoft Teams、Skype等大型平台，但工具集远比这要广泛。协作也涉及到知识共享。
- en: Tools such as Read the Docs, GitHub Pages, and Apiary are all documentation
    tools; they are also classed as collaboration tools.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 像Read the Docs、GitHub Pages和Apiary这样的工具都是文档工具；它们也被归类为协作工具。
- en: Knowledge sharing is important in any organization, but in teams where there
    is a high level of collaboration and a concerted move toward DevOps practices,
    knowledge is incredibly important. Every bit of knowledge about your product should
    be noted down and stored centrally so it can be found should anyone need it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Think of knowledge management as a way to avoid knowledge silos. Without these
    silos in place, you are able to scale much better and ensure that everyone has
    an equal opportunity to learn new skills and learn more about the product.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge also includes documentation. In my opinion, you cannot consider something
    to be completed if no documentation exists for it. This documentation may be public-facing
    or it may be just for internal teams. Either way, it is important.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Building
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Build tools are what enable you to take what you have developed and turn it
    into something that you can later deploy somewhere else. This starts with source
    control tooling. By far the most common such tool today is **Git**. It comes in
    a number of flavors, and one of the most popular is GitHub, although the Git technology
    is to be found within a number of different source control products.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Tooling also enables continuous integration. This practice entails taking your
    artifacts from your source control repository and running them through an automated
    workflow called a pipeline. During the pipeline, a number of tasks are completed,
    and the result of that pipeline is a tangible artifact that you can then later
    deploy.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Build tools are also not exclusively related to software. You can also build
    infrastructure with some tools as well. This is known as infrastructure as code.
    If you are using containers, you will also find tools to help you build them.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: If your application involves the use of a database, you will also find database
    tooling available to you to manage your database schema and structure.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Testing
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Testing is one of the broadest terms when it comes to DevOps tooling. Here you
    will find tools to perform testing for a wide range of requirements. The process
    of testing could be anything from the unit testing of code by developers all the
    way through to user acceptance testing and tools that automate browser testing
    for web applications.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: In addition to this, testing can include security scanning your application
    against baselines from the OWASP Top 10, static and dynamic code analysis for
    vulnerabilities, and load testing to ensure your application performs well under
    load.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Deploying
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The act of deployment is where you can take your built and tested application
    artifact and deploy it to where it needs to go. This could be to a cloud platform
    such as Microsoft Azure, Amazon Web Services, or Google Cloud. It could also be
    a mobile app store or even an on-premises data center.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: If you are deploying to a cloud platform or app store, then you will likely
    be using native tooling to deploy to those environments. Those tools will probably
    only perform the deployment to those specific environments for you and nothing
    else.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将应用部署到云平台或应用商店，那么你很可能会使用本地工具来部署到这些环境。这些工具可能仅仅会将部署执行到这些特定的环境，而不会做其他操作。
- en: You could also be deploying to a package management repository if you are writing
    sharable application libraries for other developers to use. You can also get tools
    that support this scenario.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在为其他开发人员编写可共享的应用程序库并部署到包管理库，你也可能会使用支持这种场景的工具。
- en: If you are working with containers, then you are also likely to be working with
    artifact management tools; these come under the deployment banner as well. Tools
    that enable you to point your containers to container registries, either public
    or private, are accessed at this point.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用容器，那么你也很可能在使用制品管理工具；这些工具也属于部署范畴。此时，可以访问让你将容器指向公共或私有容器注册表的工具。
- en: Finally, even if you are provisioning and deploying virtual machines or other
    types of traditional infrastructure, you may use tools responsible for baseline
    configuration management or provisioning your infrastructure. These tools can
    save huge amounts of time when it comes to managing enterprise-scale infrastructure.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，即便你正在配置和部署虚拟机或其他类型的传统基础设施，你可能也会使用负责基线配置管理或基础设施配置的工具。这些工具在管理企业级基础设施时能够节省大量时间。
- en: Running
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行
- en: Once you have deployed your application, you have entered what is known as the
    run phase. At this point, the operations team uses tooling to manage the application.
    Developers may also have a number of tools in place here to help with the monitoring
    of application performance and the capturing of exceptions.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你部署了应用程序，就进入了所谓的运行阶段。在这一阶段，运营团队使用工具来管理应用程序。开发人员可能在此阶段也会使用一些工具来帮助监控应用程序性能和捕获异常。
- en: Some of the tools in the run phase may be natively built into the platform you
    are using; some may be additional products and tools. For example, you may use
    the native monitoring capabilities in your cloud platform and then use an application
    performance monitoring tool to monitor both the infrastructure performance and
    the application performance.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 运行阶段中的一些工具可能是你所使用平台中本地内建的；也有可能是额外的产品和工具。例如，你可能会使用云平台中的本地监控功能，然后使用应用性能监控工具来同时监控基础设施性能和应用程序性能。
- en: From experience, this is one area of tooling that is lacking at many organizations;
    however, the right run tooling is critical to ensuring that you have the right
    technical feedback in terms of infrastructure and application performance so that
    you can make data-based decisions.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 根据经验，这是许多组织在工具使用上存在不足的一个领域；然而，正确的运行工具对于确保你拥有关于基础设施和应用程序性能的正确技术反馈至关重要，这样你才能做出基于数据的决策。
- en: Now that we understand the different families of DevOps tools within the DevOps
    toolchain, let's now look at how tooling helps with the adoption of DevOps.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了 DevOps 工具链中不同类型的工具家庭，接下来让我们看看工具如何帮助 DevOps 的采纳。
- en: How does tooling help the adoption of DevOps?
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具如何帮助 DevOps 的采纳？
- en: DevOps uses its relationship to Agile development and then looks to create a
    culture that fosters collaboration and value streams. This is achieved by combining
    trusted principles and practices such as Lean, Theory of Constraints, and the
    Toyota Production System with Agile development.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps利用其与敏捷开发的关系，进而创造一种促进协作和价值流的文化。这是通过将精益、约束理论和丰田生产系统等经过验证的原则与实践与敏捷开发结合实现的。
- en: In order to achieve this, DevOps requires an organization to adopt cultural
    changes within teams and adopt technical principles such as automation, version
    control, and continuous integration and delivery. In a similar way to the manufacturing
    industry, the integration of the right tools is fundamental to fully realize the
    benefits of the technical practices within DevOps.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一目标，DevOps要求组织在团队内采纳文化变革，并采纳诸如自动化、版本控制和持续集成与交付等技术原则。与制造业类似，正确工具的整合对于充分实现
    DevOps 内部技术实践的好处至关重要。
- en: 'A word of caution, though: DevOps is not just about using tools – it''s about
    the combination of everything we have learned so far and interaction with tools
    that properly realizes the benefits of DevOps.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，有一点需要提醒：DevOps不仅仅是使用工具——它是关于我们迄今为止学到的所有知识的结合，以及与工具的互动，从而充分实现DevOps的好处。
- en: 'Here is a good set of guidelines that can be used to help pick the right tooling
    for your organization:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一套可以帮助选择适合你组织工具的指导原则：
- en: Choose tools that facilitate collaboration.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择促进协作的工具。
- en: Use tools that enhance communication.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用能增强沟通的工具。
- en: Lean toward tools with APIs.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 偏向有API的工具。
- en: Always encourage learning.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终鼓励学习。
- en: Avoid environment-specific tools.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免使用环境特定的工具。
- en: Now let's look at these guidelines in more detail to get a better understanding
    of how to apply them.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们更详细地看一下这些指导原则，帮助更好地理解如何应用它们。
- en: Choosing tools that facilitate collaboration
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择能促进协作的工具。
- en: The ability to have effective collaboration between teams is critical for the
    success of DevOps. With tools specifically aimed at collaboration, it would be
    easy to think that you should buy a dedicated tool for this, but in the DevOps
    toolchain, there are lots of different tools you can use to enhance collaboration
    between teams.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 团队之间能够有效协作对于DevOps的成功至关重要。虽然有很多专门用于协作的工具，可能让你认为应该为此购买一个专用工具，但在DevOps工具链中，你可以使用许多不同的工具来增强团队之间的协作。
- en: A good example of this is version control, which is really a key element of
    the DevOps approach. As you are trying to encourage more people to make use of
    version control tools in the organizations, consider the impact of your tool choice.
    You and trusted members of your foundational team may be comfortable with a command
    line-only tool, but what about everyone else? Using a command line-only tool can
    end up as a barrier for some people who are more comfortable using user interfaces.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的例子是版本控制，它实际上是DevOps方法中的关键元素。当你在组织中鼓励更多人使用版本控制工具时，要考虑你的工具选择的影响。你和你信任的基础团队成员可能习惯了仅使用命令行工具，但其他人呢？对于那些更习惯使用用户界面的人来说，使用仅支持命令行的工具可能会成为一种障碍。
- en: Important note
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: In this example, a command-line tool for version control is part of the DevOps
    toolchain but is unfamiliar to people, especially non-developers.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，命令行工具用于版本控制，虽然是DevOps工具链的一部分，但对人们来说，尤其是非开发人员来说，它是陌生的。
- en: In this instance, there is very little collaboration opportunity given the limited
    audience of the command-line tool. However, if you adopt a version control platform
    such as GitLab, GitHub, BitBucket, or Azure DevOps, you can take advantage of
    discussion around file changes and commits within the code you are committing;
    this is a form of collaboration.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，命令行工具的受众有限，因此协作机会非常少。然而，如果你采用像GitLab、GitHub、BitBucket或Azure DevOps这样的版本控制平台，你就可以利用关于文件更改和提交的讨论；这也是一种协作形式。
- en: This helps collaboration with people who have different skills and encourages
    more people to learn how to use the platform for their own needs, thus helping
    to encourage collaboration.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这有助于与拥有不同技能的人进行协作，并鼓励更多人学习如何根据自己的需求使用平台，从而促进协作。
- en: The approach we discussed here works in other parts of the toolchain as well,
    not just for version control. It doesn't have to just impact a new tool either;
    this could be on existing tools within your organization.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里讨论的方法同样适用于工具链中的其他部分，而不仅仅是版本控制。它不仅仅影响新的工具；这也可以应用于你组织中现有的工具。
- en: Consider the impact of permissions on collaboration. A number of times, I have
    worked with operations teams who refuse to give developers access to what they
    believe is their tooling, thinking that nobody else should have access. If you
    want to improve collaboration, open that tool up to the developers – the result
    is better collaboration between the two teams. The tool has not changed, but the
    permissions have.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑权限对协作的影响。多次我曾与运维团队合作，他们拒绝向开发人员提供他们认为是自己工具的访问权限，认为其他人不应该有访问权限。如果你想提高协作，就应该向开发人员开放这些工具——结果会是两个团队之间的更好协作。工具本身没有改变，但权限改变了。
- en: Using tools that enhance communication
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用能增强沟通的工具。
- en: In my experience, one of the biggest problems and certainly the most common
    problem among organizations building modern software platforms using a DevOps
    approach is the mismatch that exists between the responsibilities of teams and
    their tools.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes, organizations have multiple tools to achieve something when one
    tool would do the job. The reverse is also true: sometimes organizations have
    one single tool that causes problems when teams need separate tools.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: One of the biggest impacts on the interaction between teams and the effectiveness
    of their communication is around the use of shared tools. Shared tools make sense
    to enable collaboration between teams, but if you need boundaries of responsibility
    to be clear, then using separate tools may be the best way to go. We discussed
    business benefits, team topologies, and the pitfalls of DevOps in [*Chapter 2*](B17192_02_Final_ASB_ePub.xhtml#_idTextAnchor038),
    *Business Benefits, Team Topologies, and Pitfalls of DevOps*. Use this to understand
    which model is right for your organization.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: If you are working toward a close working relationship between your development
    and operations teams, then a separate ticketing system will only result in poor
    communication between those teams. In order to help these teams be effective,
    you should choose a tool that meets the needs of both teams.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: When considering tools, don't pick a tool for the whole organization before
    you have considered the team relationships first.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: The key is to make sure you look at the whole organization, deploy tools that
    are shared for collaborative teams, and where you need to, don't be afraid to
    use separate tools.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Lean toward tools with APIs
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Service-based architectures and API-driven applications are the cornerstones
    of cloud-native or cloud-ready systems. Tools that give you the ability to be
    customizable and highly automated are a major plus. Having tools that have full-featured
    APIs, and HTTP-based ones at that, are a must.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: The use of APIs from a DevOps perspective allows you to take the many different
    tools you are using and connect them together as part of your processes. Tools
    that match these criteria are important, as when you come to change your existing
    tooling for something new, it is easy to change the plumbing that sticks everything
    together.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: It is really easy to chain together tools using this method, but you need to
    be careful about scripts that are undocumented in this process. Tools that power
    the software delivery and operations processes should be treated like production
    tools. This means having the ability to properly document and release these tools.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Many organizations at the lower end of the maturity scale make the mistake of
    implementing new tools without the operational support needed to make those tools
    work well and be effective.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: In summary, you should be aiming to gain new capabilities by combining multiple
    API-driven tools.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Always encouraging learning
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you look at the tools in the DevOps toolchain, quite a few of them are
    rather involved and can be very complicated, especially when people are new to
    the tooling. When tools are complex, you shouldn't expect everyone to adopt them
    quickly.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: The opposite can also happen, in that when a tool is complicated and difficult
    to use, people may dig in their heels and not use it. This is why you have to
    think about providing training opportunities for people with new tools.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: The introduction of a new tool requires you to assess the wider skills within
    your organization and then build a roadmap for the teams to move to improved ways
    of working. Giving people the opportunity to learn at their own pace is crucial,
    so looking at tools with multiple interfaces, such as a user interface, command
    line, and API, gives everyone the ability to learn.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: The process of adopting DevOps is one of moving from manual to automated; not
    everyone will be in the same place at the same time, so giving people the ability
    and especially the space to learn gives you the best chance of people successfully
    adopting new tools and approaches.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'Think of this as a step evolution: avoid fear by introducing tools that are
    scary and give people the option to learn at their own pace. Just like Agile teaches
    incremental improvement through sprints, treat your tooling the same and prefer
    those small gains over future state and a big bang approach.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding environment-specific tools
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the adoption of DevOps comes an increase in speed and frequency of delivery.
    This means that to be successful, you need to increase the feedback loops within
    your delivery and operations processes. As many technology-focused people as possible
    should be learning as much as they can about how production works so that, in
    turn, they can build more reliable products that are more resilient. Changes to
    the system should also be tested before any deployment to production.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Any tools that are only running in production cause problems because this prevents
    people from learning, as production is treated as a special case rather than just
    another environment your application runs in.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: To be as effective as possible, you should choose tools that work in all environments;
    this even includes the developer's local environment in some cases. Watch out
    for tools that charge per environment to deploy or install and try to look for
    tools that provide site-wide license approaches to keep costs down if at all possible.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Think about the automation approach of DevOps as well; good DevOps tools should
    be able to be set up automatically in each environment. Stay away from tools that
    require manual effort to deploy – these tools are not good choices in DevOps.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: When you run the same tool throughout each environment, you are increasing the
    level of engagement between your teams and increasing learning opportunities.
    Keeping a tool to production only locks people out of learning opportunities.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: In summary, when it comes to environment-specific tools, avoid them at all costs.
    This breaks the feedback loop around learning, as well as making your continuous
    integration and delivery difficult.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Now we understand how tooling helps your adoption of DevOps, let's look at the
    benefits of DevOps tooling.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the benefits of DevOps tooling
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: According to the *State of DevOps report (2017)* by Puppet ([https://puppet.com/blog/2017-state-devops-report-here](https://puppet.com/blog/2017-state-devops-report-here)),
    *"the ability to develop and deliver software efficiently and accurately is a
    key differentiator and value driver for all organizations."* While the report
    may be a few years old now, the content is still right on point when we talk about
    why we do DevOps.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: The report finds that DevOps organizations are more than twice as likely to
    overachieve when it comes to efficiency, satisfaction, quality, and the fulfillment
    of organizational goals. Those objectives give a great insight into successful
    DevOps organizations. But how do they do it?
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'Using those key points as a benchmark, integrating the right tools to successfully
    apply DevOps technical practices will enable you to realize the following benefits:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Increased code and deployment velocity
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduction of time to market for new products and features
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decrease in the failure rate of new releases
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve the mean time to recovery
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improvement in reliability metrics
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhanced collaboration and productivity
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eliminating high levels of work in progress and technical debt
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have already explored the benefits of enhanced collaboration and productivity
    through some of the examples earlier in the chapter; one common theme between
    all of these benefits is around collaboration and communication, but let's now
    take a look at these benefits in more detail using tooling as examples.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Increasing code and deployment velocity
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's really not possible to accurately measure velocity around deployments and
    code without having tooling in place. A combination of information from your version
    control software, your backlog management tooling, and your pipeline environment
    will be needed to gain insights into this information.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: 'Having this tooling in place and having the ability to accurately report on
    velocity is important: it helps you plan better as a team as well as understanding
    your limitations in terms of how much work you can complete in a single sprint.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Understanding this in the long term also helps you make decisions about when
    to hire more team members, especially when you combine this information with your
    technical debt and work in progress.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Reduction of time to market for new products and features
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Communication and collaboration are really at the center of this one, especially
    at the start of this process. When you have good tools that foster good collaboration
    between teams, as well as good communication, you have the ability to take your
    ideas from inception to production quicker.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Add into that tooling around continuous integration and deployment, and all
    of a sudden, once your idea has been developed and tested, it can be deployed
    in no time at all, going through the various testing cycles.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 再加上持续集成和部署工具的使用，一旦你的想法被开发并测试完成，它就可以在短时间内部署，经过各种测试周期。
- en: This alone is a huge business driver for many organizations, especially those
    in the business of software. If you are able to take your ideas to market quicker
    than your competitors, this gives you a competitive edge over them, ultimately
    giving your customers more reasons to use your product over theirs.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 仅这一点就成为许多组织，尤其是软件行业中的大企业，巨大的业务驱动因素。如果你能比竞争对手更快地将你的想法推向市场，这将给你带来竞争优势，最终让你的客户有更多理由选择你的产品而非他们的。
- en: Decrease in the failure rate of new releases
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新发布版本故障率的降低
- en: When you have invested in your pipelines to a point where they handle your deployments
    consistently, that brings into focus the need for a feedback loop. That loop,
    in this instance, is around improving the quality of the build and release pipelines.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当你对管道进行投资，并使其能够一致地处理部署时，便需要关注反馈循环的必要性。在这种情况下，反馈循环是围绕提高构建和发布管道的质量展开的。
- en: By introducing the monitoring of your pipelines and using the built-in reporting
    that is in many existing CI and CD tools, you are able to pull metrics that show
    the success of your pipeline executions.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 通过引入对管道的监控，并利用现有的CI和CD工具中内置的报告，你可以提取出显示管道执行成功的指标。
- en: When a failure occurs, see this as a learning opportunity, pull information
    as to why it happened, and find out what you can do to improve quality so it does
    not happen again. This cycle, with the information you are gathering, goes to
    decrease the failure rate of your releases and helps you develop higher-quality
    pipelines.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 当故障发生时，将其视为一个学习机会，提取为什么会发生故障的信息，并找出你可以做些什么来提高质量，以确保问题不再发生。通过收集的信息，这个循环有助于降低发布的故障率，帮助你开发出更高质量的管道。
- en: Improving the mean time to resolution
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 改进平均恢复时间
- en: Nobody likes downtime in their application, no matter how well the infrastructure
    is designed or how well the application is developed. You are likely to experience
    downtime at some point.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 没有人喜欢应用程序停机，无论基础设施设计得多么优秀，应用程序开发得多么出色。你很可能在某个时刻会遇到停机问题。
- en: Monolithic environments or legacy working environments have traditionally had
    a harsh view on application downtime and the impact of that downtime. Today, instead
    of measuring **Service Level Agreements (SLAs)**, many organizations who practice
    DevOps are now turning to the measurement of **mean time to resolution (MTTR)**,
    which measures the mean average time to recover a service from a failure.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 单体环境或遗留工作环境通常对应用程序停机及其影响有着严苛的看法。今天，许多实践DevOps的组织不再仅仅关注**服务水平协议（SLAs）**，而是转向衡量**平均恢复时间（MTTR）**，即衡量从故障中恢复服务的平均时间。
- en: Site reliability tooling is critical in this space to enable you to gain as
    much information as possible about the outage. This includes 360-degree monitoring
    of your infrastructure and application, including performance and exceptions;
    user journeys; and synthetic transactions monitoring every aspect of the application's
    performance, availability, and security.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个领域，站点可靠性工具至关重要，它能够帮助你尽可能多地获取有关停机的信息。这包括对你的基础设施和应用程序的360度监控，包括性能和异常；用户旅程；以及合成事务监控应用程序性能、可用性和安全性的方方面面。
- en: Important note
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You should also not underestimate the importance of log files, which are often
    overlooked.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该不要低估日志文件的重要性，虽然它们经常被忽视。
- en: Log files add another dimension to your troubleshooting capabilities as well.
    So often, I have seen developers and operations teams scratching their heads because
    they don't have the appropriate logs available to diagnose an application outage.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 日志文件为你的故障排除能力提供了另一个维度。我经常看到开发人员和运维团队抓耳挠腮，因为他们没有适当的日志来诊断应用程序停机。
- en: When you have all this information at your disposal, as well as good communication,
    collaboration, and documentation, you stand a better chance of getting to the
    bottom of the issue as quickly as possible.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当你拥有所有这些信息，并且具备良好的沟通、协作和文档时，你更有可能尽快找出问题的根源。
- en: Measuring the endpoint availability of your application also gives you the ability
    to measure MTTR. You can measure the time between outage and the resumption of
    service. After each outage, it is important to sit back and review the information
    collected and look not only at how to avoid the outage again but also how to make
    process changes or changes anywhere else to reduce the amount of time needed to
    restore service next time.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Improvement in reliability metrics
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Right off the back of MTTR is the improvement of reliability metrics. Using
    many of the same principles we discussed previously, you can also improve the
    reliability of all facets of your application.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: The majority of site reliability and instrumentation tools will be able to feed
    into producing a dashboard or scorecard that gives you a picture of your reliability.
    As discussed previously, using this data to actually go forward and improve reliability
    is what sets organizations apart in levels of maturity.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Eliminating high levels of work in progress and technical debt
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the biggest killers of productivity in a DevOps environment is the amount
    of work in progress and high levels of **technical debt** that exist at some organizations.
    All backlog management tools that I have worked with give you the ability to flag
    up via a dashboard or on a Kanban board, for example, the amount of work in progress
    for each team member.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Make sure the level of work here is acceptable. What is acceptable, of course,
    differs per team in general and of course per individual, their skills, and the
    work they are capable of completing.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Striking a balance can be difficult, but when people have too many "work in
    progress" items, it kills productivity. My experience tells me that each individual
    stays highly productive when they have no more than three active work in progress
    items. After this point, their productivity will start to take a tumble.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: Another killer of productivity is the levels of technical debt in the organization.
    Technical debt, sometimes known as design debt, reflects the cost of additional
    rework in your application.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you designed a part of your application using an easy method
    today, instead of using a better approach that would take longer, that is technical
    debt. We usually then add technical debt to the backlog to revisit at a later
    date and resolve.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: In order to understand your levels of technical debt, you need a reliable way
    of recording it. In some tools, you could create a specific backlog template to
    record it, or simply add a tag to a user story or bug – you decide how to record
    it.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: You can then run queries and add data to dashboards to highlight your technical
    debt. When it gets to levels that you deem unacceptable, you can run a technical
    debt sprint aimed at reducing the amount of technical debt.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: We have spent this section looking at the benefits of tooling in the DevOps
    toolchain and seeing how different tools add benefit to our DevOps value. Next,
    let's look at the obstacles that exist when it comes to onboarding successful
    tooling.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the obstacles of DevOps tooling
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we have covered all the positives about tooling in the DevOps toolchain.
    What about some of the obstacles that come from working with so many different
    tools? Here are a few things that are obstacles to the adoption of these tools:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Lack of definition of DevOps
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shortage of knowledge on tooling
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evaluation of tools
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The volume of tools available on the market
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lack of tool integration
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's now look at these points in more detail to better understand the obstacles
    to adopting tools.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: Lack of definition of DevOps outcomes
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It goes without saying that without a properly defined definition of what DevOps
    is and what it means to your organization, you are going to struggle with tooling.
    This leads to organizations deploying tooling because their competitors are deploying
    tools or for other primitive reasons.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Having that definition also helps you understand what the tooling roadmap might
    look like and how you can properly address the gaps that exist with the right
    tools, using all the pointers we have discussed in this chapter.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Not only does your organization need a definition of DevOps, but it also needs
    to be standard across your whole organization. Everyone from top to bottom needs
    to buy into this in order for every part of your DevOps adoption to be successful;
    this includes tooling.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: Inadequate knowledge of tooling
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having a shortage of knowledge on the different tooling available can also be
    a barrier to success. This issue can manifest in a few ways; however, some of
    them are more damaging to overall progress than others.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, a lack of knowledge can hamper your efforts to pick the right tool
    for the task. While nobody will ever be an expert in the whole toolchain, or even
    in one specific area, having broad knowledge will help you make an evaluation
    in line with the information you are able to gather from the vendor.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, the lack of knowledge can leave you in limbo – without that broad
    knowledge of the tooling, you may find yourself in a position where you don't
    understand how the tools are addressing your specific needs. This delay can hurt
    your implementation.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Thirdly, and finally, when you have a lack of tooling knowledge, the worst it
    can do is paralyze your decision making. Rather than making the wrong decision,
    as in point one, or lacking understanding, as in point two, this is more about
    misunderstanding what the tool is there to achieve.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Evaluation of tools
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with any purchase of software from any vendor, your organization is going
    to want to make sure you get the most from any demonstration or trial offers.
    This is a big investment, and you want to make sure you are picking a tool that
    checks the right boxes and delivers what you need.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Take into account the cost of a tool against the value it provides. You must
    make sure that the return on investment for the purchase is in line with expectations.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: If you are evaluating multiple tools, make sure the evaluation of them is equal.
    There is no point performing different evaluations on tools that do the same thing.
    Not only does this not give each of your candidates the opportunity to shine,
    but it ensures that no bias is involved in the decision-making process.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Everyone has an affinity with different technology stacks and tools, but you
    need to make sure you pick the right tool for the organization, not use what you
    have used in the past just because you know the tool.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: The volume of tools available on the market
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Of course, before you even get to the evaluation of tools, you have to tread
    your way through the vast ocean of tools that exist in the various categories
    of the DevOps toolchain.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: 'The number of tools is so vast that the **Cloud Native Computing Foundation
    (CNCF)** has even created a web tool detailing the tools within their area and
    provides a number of filters for you to limit your searches. This is the *CNCF
    Cloud Native Landscape* ([https://landscape.cncf.io](https://landscape.cncf.io)).
    Don''t be mistaken: this is incredibly useful, but it also highlights the issues
    we face when selecting tools.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: To add to the list of tools charted by the CNCF, there are of course other tools
    as well that are not within the CNCF ecosystem. This expansive list of tools adds
    to the paralysis you can feel when looking at the tooling options available.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: You can get through the marketing offered by the vendors by looking at independent
    sources of information on the tools. Go to community posts by people who use the
    products, look at their use cases, and use this information to help you shortlist
    tools.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: Lack of tool integration
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Earlier in the chapter, we talked about the importance of integration within
    DevOps tooling. Working with a tool that lacks sufficient integration limits your
    capability, depending on that limitation depends on the impact it has.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: For example, continuous integration and deployment tooling without sufficient
    integration is going to be a problem if the platform doesn't provide a wide array
    of other services with it. When looking at these tools, we should look for integration
    opportunities with backlog management tools, our deployment platform, and our
    ticketing system if that is a requirement.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: We also must consider integration with tools providing security services for
    them to be valuable to our overall ambitions.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: That lack of integration creates a black box for your tooling, where you are
    unable to interface with it or retrieve what might be valuable data from it.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have looked at tooling within the DevOps toolchain. We have
    looked at the different families of DevOps tooling and looked at how tooling helps
    the adoption of DevOps in your organization. We then looked at the benefits of
    DevOps tooling and looked to understand the obstacles that may prevent the adoption
    of good-quality tools.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at how to develop a strategy for the implementation of tooling.
    We will look at the architectural and security requirements for your tooling and
    how to develop training plans to help the team, and tie this in with defining
    owners and processes for DevOps tools.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now recap some of what we have learned throughout this chapter:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: Which tools have an impact across the whole DevOps toolchain?
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Build tools
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Testing tools
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Collaboration tools
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Run tools
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Why are APIs so important when adopting tooling?
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. They're not – we don't need APIs.
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. They provide automation and integration opportunities.
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. DevOps engineers need to learn about APIs.
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. All good tools come with APIs anyway.
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
