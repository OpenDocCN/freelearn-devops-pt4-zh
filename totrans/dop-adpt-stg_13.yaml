- en: '*Chapter 9*: Understanding the Technical Stack for DevOps'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding tooling to your DevOps investments is key to making sure your adoption
    goes from good to great. There are many DevOps tools on the market today. Understanding
    what toolsets to implement for today and for tomorrow can be challenging. In this
    chapter, we look at the pros and cons of the main tooling involved in DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you can expect to gain an understanding of the different
    families of DevOps tools as well as understanding how tooling helps in DevOps.
    You will also understand the benefits and obstacles of DevOps tooling.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What are the families of DevOps tools?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does tooling help the adoption of DevOps?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the benefits of DevOps tooling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the obstacles of DevOps tooling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the families of DevOps tools?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The DevOps ecosystem, as we call it, has a number of different categories that
    tools fall into. Some of these tools are designed, developed, and marketed for
    incredibly specific reasons. There are industry-specific tools that solve unique
    problems as well.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, you also come across tools that, while specific to a category, also
    apply across many industries, and some tools are suites of tools that provide
    services right across the ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use a traditional diagram that depicts the DevOps loop to talk about
    the different categories. I like to use the following categories, which closely
    align to those given in traditional diagrams but have slight differences:'
  prefs: []
  type: TYPE_NORMAL
- en: Collaborating
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can see a visual depiction of this in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 – Visual representation of the toolchain phases'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_09_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.1 – Visual representation of the toolchain phases
  prefs: []
  type: TYPE_NORMAL
- en: Let's have a look at these in more detail to understand what types of tools
    are part of each section of the ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: Collaborating
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I have added collaboration to this list, which is not actually found on most
    traditional lists, because of the importance that collaboration has in DevOps.
    So far, we have looked at collaboration from a cultural perspective as well as
    when it comes to people and processes, but tooling is important to collaboration
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: You can have great processes, people, and culture within your organization around
    collaboration, but in the end, without the right tools in place, you still won't
    get very far, and scaling will also be a real issue.
  prefs: []
  type: TYPE_NORMAL
- en: When you think of collaboration, it's easy to think of the big players such
    as Zoom, Microsoft Teams, Skype, and others, but the toolset is much broader than
    that. Collaboration is also about knowledge sharing.
  prefs: []
  type: TYPE_NORMAL
- en: Tools such as Read the Docs, GitHub Pages, and Apiary are all documentation
    tools; they are also classed as collaboration tools.
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge sharing is important in any organization, but in teams where there
    is a high level of collaboration and a concerted move toward DevOps practices,
    knowledge is incredibly important. Every bit of knowledge about your product should
    be noted down and stored centrally so it can be found should anyone need it.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Think of knowledge management as a way to avoid knowledge silos. Without these
    silos in place, you are able to scale much better and ensure that everyone has
    an equal opportunity to learn new skills and learn more about the product.
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge also includes documentation. In my opinion, you cannot consider something
    to be completed if no documentation exists for it. This documentation may be public-facing
    or it may be just for internal teams. Either way, it is important.
  prefs: []
  type: TYPE_NORMAL
- en: Building
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Build tools are what enable you to take what you have developed and turn it
    into something that you can later deploy somewhere else. This starts with source
    control tooling. By far the most common such tool today is **Git**. It comes in
    a number of flavors, and one of the most popular is GitHub, although the Git technology
    is to be found within a number of different source control products.
  prefs: []
  type: TYPE_NORMAL
- en: Tooling also enables continuous integration. This practice entails taking your
    artifacts from your source control repository and running them through an automated
    workflow called a pipeline. During the pipeline, a number of tasks are completed,
    and the result of that pipeline is a tangible artifact that you can then later
    deploy.
  prefs: []
  type: TYPE_NORMAL
- en: Build tools are also not exclusively related to software. You can also build
    infrastructure with some tools as well. This is known as infrastructure as code.
    If you are using containers, you will also find tools to help you build them.
  prefs: []
  type: TYPE_NORMAL
- en: If your application involves the use of a database, you will also find database
    tooling available to you to manage your database schema and structure.
  prefs: []
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Testing is one of the broadest terms when it comes to DevOps tooling. Here you
    will find tools to perform testing for a wide range of requirements. The process
    of testing could be anything from the unit testing of code by developers all the
    way through to user acceptance testing and tools that automate browser testing
    for web applications.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to this, testing can include security scanning your application
    against baselines from the OWASP Top 10, static and dynamic code analysis for
    vulnerabilities, and load testing to ensure your application performs well under
    load.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The act of deployment is where you can take your built and tested application
    artifact and deploy it to where it needs to go. This could be to a cloud platform
    such as Microsoft Azure, Amazon Web Services, or Google Cloud. It could also be
    a mobile app store or even an on-premises data center.
  prefs: []
  type: TYPE_NORMAL
- en: If you are deploying to a cloud platform or app store, then you will likely
    be using native tooling to deploy to those environments. Those tools will probably
    only perform the deployment to those specific environments for you and nothing
    else.
  prefs: []
  type: TYPE_NORMAL
- en: You could also be deploying to a package management repository if you are writing
    sharable application libraries for other developers to use. You can also get tools
    that support this scenario.
  prefs: []
  type: TYPE_NORMAL
- en: If you are working with containers, then you are also likely to be working with
    artifact management tools; these come under the deployment banner as well. Tools
    that enable you to point your containers to container registries, either public
    or private, are accessed at this point.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, even if you are provisioning and deploying virtual machines or other
    types of traditional infrastructure, you may use tools responsible for baseline
    configuration management or provisioning your infrastructure. These tools can
    save huge amounts of time when it comes to managing enterprise-scale infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Running
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have deployed your application, you have entered what is known as the
    run phase. At this point, the operations team uses tooling to manage the application.
    Developers may also have a number of tools in place here to help with the monitoring
    of application performance and the capturing of exceptions.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the tools in the run phase may be natively built into the platform you
    are using; some may be additional products and tools. For example, you may use
    the native monitoring capabilities in your cloud platform and then use an application
    performance monitoring tool to monitor both the infrastructure performance and
    the application performance.
  prefs: []
  type: TYPE_NORMAL
- en: From experience, this is one area of tooling that is lacking at many organizations;
    however, the right run tooling is critical to ensuring that you have the right
    technical feedback in terms of infrastructure and application performance so that
    you can make data-based decisions.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand the different families of DevOps tools within the DevOps
    toolchain, let's now look at how tooling helps with the adoption of DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: How does tooling help the adoption of DevOps?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DevOps uses its relationship to Agile development and then looks to create a
    culture that fosters collaboration and value streams. This is achieved by combining
    trusted principles and practices such as Lean, Theory of Constraints, and the
    Toyota Production System with Agile development.
  prefs: []
  type: TYPE_NORMAL
- en: In order to achieve this, DevOps requires an organization to adopt cultural
    changes within teams and adopt technical principles such as automation, version
    control, and continuous integration and delivery. In a similar way to the manufacturing
    industry, the integration of the right tools is fundamental to fully realize the
    benefits of the technical practices within DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: 'A word of caution, though: DevOps is not just about using tools – it''s about
    the combination of everything we have learned so far and interaction with tools
    that properly realizes the benefits of DevOps.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a good set of guidelines that can be used to help pick the right tooling
    for your organization:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose tools that facilitate collaboration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use tools that enhance communication.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lean toward tools with APIs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always encourage learning.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid environment-specific tools.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now let's look at these guidelines in more detail to get a better understanding
    of how to apply them.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing tools that facilitate collaboration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ability to have effective collaboration between teams is critical for the
    success of DevOps. With tools specifically aimed at collaboration, it would be
    easy to think that you should buy a dedicated tool for this, but in the DevOps
    toolchain, there are lots of different tools you can use to enhance collaboration
    between teams.
  prefs: []
  type: TYPE_NORMAL
- en: A good example of this is version control, which is really a key element of
    the DevOps approach. As you are trying to encourage more people to make use of
    version control tools in the organizations, consider the impact of your tool choice.
    You and trusted members of your foundational team may be comfortable with a command
    line-only tool, but what about everyone else? Using a command line-only tool can
    end up as a barrier for some people who are more comfortable using user interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: In this example, a command-line tool for version control is part of the DevOps
    toolchain but is unfamiliar to people, especially non-developers.
  prefs: []
  type: TYPE_NORMAL
- en: In this instance, there is very little collaboration opportunity given the limited
    audience of the command-line tool. However, if you adopt a version control platform
    such as GitLab, GitHub, BitBucket, or Azure DevOps, you can take advantage of
    discussion around file changes and commits within the code you are committing;
    this is a form of collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: This helps collaboration with people who have different skills and encourages
    more people to learn how to use the platform for their own needs, thus helping
    to encourage collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: The approach we discussed here works in other parts of the toolchain as well,
    not just for version control. It doesn't have to just impact a new tool either;
    this could be on existing tools within your organization.
  prefs: []
  type: TYPE_NORMAL
- en: Consider the impact of permissions on collaboration. A number of times, I have
    worked with operations teams who refuse to give developers access to what they
    believe is their tooling, thinking that nobody else should have access. If you
    want to improve collaboration, open that tool up to the developers – the result
    is better collaboration between the two teams. The tool has not changed, but the
    permissions have.
  prefs: []
  type: TYPE_NORMAL
- en: Using tools that enhance communication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In my experience, one of the biggest problems and certainly the most common
    problem among organizations building modern software platforms using a DevOps
    approach is the mismatch that exists between the responsibilities of teams and
    their tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes, organizations have multiple tools to achieve something when one
    tool would do the job. The reverse is also true: sometimes organizations have
    one single tool that causes problems when teams need separate tools.'
  prefs: []
  type: TYPE_NORMAL
- en: One of the biggest impacts on the interaction between teams and the effectiveness
    of their communication is around the use of shared tools. Shared tools make sense
    to enable collaboration between teams, but if you need boundaries of responsibility
    to be clear, then using separate tools may be the best way to go. We discussed
    business benefits, team topologies, and the pitfalls of DevOps in [*Chapter 2*](B17192_02_Final_ASB_ePub.xhtml#_idTextAnchor038),
    *Business Benefits, Team Topologies, and Pitfalls of DevOps*. Use this to understand
    which model is right for your organization.
  prefs: []
  type: TYPE_NORMAL
- en: If you are working toward a close working relationship between your development
    and operations teams, then a separate ticketing system will only result in poor
    communication between those teams. In order to help these teams be effective,
    you should choose a tool that meets the needs of both teams.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: When considering tools, don't pick a tool for the whole organization before
    you have considered the team relationships first.
  prefs: []
  type: TYPE_NORMAL
- en: The key is to make sure you look at the whole organization, deploy tools that
    are shared for collaborative teams, and where you need to, don't be afraid to
    use separate tools.
  prefs: []
  type: TYPE_NORMAL
- en: Lean toward tools with APIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Service-based architectures and API-driven applications are the cornerstones
    of cloud-native or cloud-ready systems. Tools that give you the ability to be
    customizable and highly automated are a major plus. Having tools that have full-featured
    APIs, and HTTP-based ones at that, are a must.
  prefs: []
  type: TYPE_NORMAL
- en: The use of APIs from a DevOps perspective allows you to take the many different
    tools you are using and connect them together as part of your processes. Tools
    that match these criteria are important, as when you come to change your existing
    tooling for something new, it is easy to change the plumbing that sticks everything
    together.
  prefs: []
  type: TYPE_NORMAL
- en: It is really easy to chain together tools using this method, but you need to
    be careful about scripts that are undocumented in this process. Tools that power
    the software delivery and operations processes should be treated like production
    tools. This means having the ability to properly document and release these tools.
  prefs: []
  type: TYPE_NORMAL
- en: Many organizations at the lower end of the maturity scale make the mistake of
    implementing new tools without the operational support needed to make those tools
    work well and be effective.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, you should be aiming to gain new capabilities by combining multiple
    API-driven tools.
  prefs: []
  type: TYPE_NORMAL
- en: Always encouraging learning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you look at the tools in the DevOps toolchain, quite a few of them are
    rather involved and can be very complicated, especially when people are new to
    the tooling. When tools are complex, you shouldn't expect everyone to adopt them
    quickly.
  prefs: []
  type: TYPE_NORMAL
- en: The opposite can also happen, in that when a tool is complicated and difficult
    to use, people may dig in their heels and not use it. This is why you have to
    think about providing training opportunities for people with new tools.
  prefs: []
  type: TYPE_NORMAL
- en: The introduction of a new tool requires you to assess the wider skills within
    your organization and then build a roadmap for the teams to move to improved ways
    of working. Giving people the opportunity to learn at their own pace is crucial,
    so looking at tools with multiple interfaces, such as a user interface, command
    line, and API, gives everyone the ability to learn.
  prefs: []
  type: TYPE_NORMAL
- en: The process of adopting DevOps is one of moving from manual to automated; not
    everyone will be in the same place at the same time, so giving people the ability
    and especially the space to learn gives you the best chance of people successfully
    adopting new tools and approaches.
  prefs: []
  type: TYPE_NORMAL
- en: 'Think of this as a step evolution: avoid fear by introducing tools that are
    scary and give people the option to learn at their own pace. Just like Agile teaches
    incremental improvement through sprints, treat your tooling the same and prefer
    those small gains over future state and a big bang approach.'
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding environment-specific tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the adoption of DevOps comes an increase in speed and frequency of delivery.
    This means that to be successful, you need to increase the feedback loops within
    your delivery and operations processes. As many technology-focused people as possible
    should be learning as much as they can about how production works so that, in
    turn, they can build more reliable products that are more resilient. Changes to
    the system should also be tested before any deployment to production.
  prefs: []
  type: TYPE_NORMAL
- en: Any tools that are only running in production cause problems because this prevents
    people from learning, as production is treated as a special case rather than just
    another environment your application runs in.
  prefs: []
  type: TYPE_NORMAL
- en: To be as effective as possible, you should choose tools that work in all environments;
    this even includes the developer's local environment in some cases. Watch out
    for tools that charge per environment to deploy or install and try to look for
    tools that provide site-wide license approaches to keep costs down if at all possible.
  prefs: []
  type: TYPE_NORMAL
- en: Think about the automation approach of DevOps as well; good DevOps tools should
    be able to be set up automatically in each environment. Stay away from tools that
    require manual effort to deploy – these tools are not good choices in DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: When you run the same tool throughout each environment, you are increasing the
    level of engagement between your teams and increasing learning opportunities.
    Keeping a tool to production only locks people out of learning opportunities.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, when it comes to environment-specific tools, avoid them at all costs.
    This breaks the feedback loop around learning, as well as making your continuous
    integration and delivery difficult.
  prefs: []
  type: TYPE_NORMAL
- en: Now we understand how tooling helps your adoption of DevOps, let's look at the
    benefits of DevOps tooling.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the benefits of DevOps tooling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: According to the *State of DevOps report (2017)* by Puppet ([https://puppet.com/blog/2017-state-devops-report-here](https://puppet.com/blog/2017-state-devops-report-here)),
    *"the ability to develop and deliver software efficiently and accurately is a
    key differentiator and value driver for all organizations."* While the report
    may be a few years old now, the content is still right on point when we talk about
    why we do DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: The report finds that DevOps organizations are more than twice as likely to
    overachieve when it comes to efficiency, satisfaction, quality, and the fulfillment
    of organizational goals. Those objectives give a great insight into successful
    DevOps organizations. But how do they do it?
  prefs: []
  type: TYPE_NORMAL
- en: 'Using those key points as a benchmark, integrating the right tools to successfully
    apply DevOps technical practices will enable you to realize the following benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Increased code and deployment velocity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduction of time to market for new products and features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decrease in the failure rate of new releases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve the mean time to recovery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improvement in reliability metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhanced collaboration and productivity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eliminating high levels of work in progress and technical debt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have already explored the benefits of enhanced collaboration and productivity
    through some of the examples earlier in the chapter; one common theme between
    all of these benefits is around collaboration and communication, but let's now
    take a look at these benefits in more detail using tooling as examples.
  prefs: []
  type: TYPE_NORMAL
- en: Increasing code and deployment velocity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's really not possible to accurately measure velocity around deployments and
    code without having tooling in place. A combination of information from your version
    control software, your backlog management tooling, and your pipeline environment
    will be needed to gain insights into this information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Having this tooling in place and having the ability to accurately report on
    velocity is important: it helps you plan better as a team as well as understanding
    your limitations in terms of how much work you can complete in a single sprint.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding this in the long term also helps you make decisions about when
    to hire more team members, especially when you combine this information with your
    technical debt and work in progress.
  prefs: []
  type: TYPE_NORMAL
- en: Reduction of time to market for new products and features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Communication and collaboration are really at the center of this one, especially
    at the start of this process. When you have good tools that foster good collaboration
    between teams, as well as good communication, you have the ability to take your
    ideas from inception to production quicker.
  prefs: []
  type: TYPE_NORMAL
- en: Add into that tooling around continuous integration and deployment, and all
    of a sudden, once your idea has been developed and tested, it can be deployed
    in no time at all, going through the various testing cycles.
  prefs: []
  type: TYPE_NORMAL
- en: This alone is a huge business driver for many organizations, especially those
    in the business of software. If you are able to take your ideas to market quicker
    than your competitors, this gives you a competitive edge over them, ultimately
    giving your customers more reasons to use your product over theirs.
  prefs: []
  type: TYPE_NORMAL
- en: Decrease in the failure rate of new releases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you have invested in your pipelines to a point where they handle your deployments
    consistently, that brings into focus the need for a feedback loop. That loop,
    in this instance, is around improving the quality of the build and release pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: By introducing the monitoring of your pipelines and using the built-in reporting
    that is in many existing CI and CD tools, you are able to pull metrics that show
    the success of your pipeline executions.
  prefs: []
  type: TYPE_NORMAL
- en: When a failure occurs, see this as a learning opportunity, pull information
    as to why it happened, and find out what you can do to improve quality so it does
    not happen again. This cycle, with the information you are gathering, goes to
    decrease the failure rate of your releases and helps you develop higher-quality
    pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: Improving the mean time to resolution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nobody likes downtime in their application, no matter how well the infrastructure
    is designed or how well the application is developed. You are likely to experience
    downtime at some point.
  prefs: []
  type: TYPE_NORMAL
- en: Monolithic environments or legacy working environments have traditionally had
    a harsh view on application downtime and the impact of that downtime. Today, instead
    of measuring **Service Level Agreements (SLAs)**, many organizations who practice
    DevOps are now turning to the measurement of **mean time to resolution (MTTR)**,
    which measures the mean average time to recover a service from a failure.
  prefs: []
  type: TYPE_NORMAL
- en: Site reliability tooling is critical in this space to enable you to gain as
    much information as possible about the outage. This includes 360-degree monitoring
    of your infrastructure and application, including performance and exceptions;
    user journeys; and synthetic transactions monitoring every aspect of the application's
    performance, availability, and security.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: You should also not underestimate the importance of log files, which are often
    overlooked.
  prefs: []
  type: TYPE_NORMAL
- en: Log files add another dimension to your troubleshooting capabilities as well.
    So often, I have seen developers and operations teams scratching their heads because
    they don't have the appropriate logs available to diagnose an application outage.
  prefs: []
  type: TYPE_NORMAL
- en: When you have all this information at your disposal, as well as good communication,
    collaboration, and documentation, you stand a better chance of getting to the
    bottom of the issue as quickly as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Measuring the endpoint availability of your application also gives you the ability
    to measure MTTR. You can measure the time between outage and the resumption of
    service. After each outage, it is important to sit back and review the information
    collected and look not only at how to avoid the outage again but also how to make
    process changes or changes anywhere else to reduce the amount of time needed to
    restore service next time.
  prefs: []
  type: TYPE_NORMAL
- en: Improvement in reliability metrics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Right off the back of MTTR is the improvement of reliability metrics. Using
    many of the same principles we discussed previously, you can also improve the
    reliability of all facets of your application.
  prefs: []
  type: TYPE_NORMAL
- en: The majority of site reliability and instrumentation tools will be able to feed
    into producing a dashboard or scorecard that gives you a picture of your reliability.
    As discussed previously, using this data to actually go forward and improve reliability
    is what sets organizations apart in levels of maturity.
  prefs: []
  type: TYPE_NORMAL
- en: Eliminating high levels of work in progress and technical debt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the biggest killers of productivity in a DevOps environment is the amount
    of work in progress and high levels of **technical debt** that exist at some organizations.
    All backlog management tools that I have worked with give you the ability to flag
    up via a dashboard or on a Kanban board, for example, the amount of work in progress
    for each team member.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure the level of work here is acceptable. What is acceptable, of course,
    differs per team in general and of course per individual, their skills, and the
    work they are capable of completing.
  prefs: []
  type: TYPE_NORMAL
- en: Striking a balance can be difficult, but when people have too many "work in
    progress" items, it kills productivity. My experience tells me that each individual
    stays highly productive when they have no more than three active work in progress
    items. After this point, their productivity will start to take a tumble.
  prefs: []
  type: TYPE_NORMAL
- en: Another killer of productivity is the levels of technical debt in the organization.
    Technical debt, sometimes known as design debt, reflects the cost of additional
    rework in your application.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you designed a part of your application using an easy method
    today, instead of using a better approach that would take longer, that is technical
    debt. We usually then add technical debt to the backlog to revisit at a later
    date and resolve.
  prefs: []
  type: TYPE_NORMAL
- en: In order to understand your levels of technical debt, you need a reliable way
    of recording it. In some tools, you could create a specific backlog template to
    record it, or simply add a tag to a user story or bug – you decide how to record
    it.
  prefs: []
  type: TYPE_NORMAL
- en: You can then run queries and add data to dashboards to highlight your technical
    debt. When it gets to levels that you deem unacceptable, you can run a technical
    debt sprint aimed at reducing the amount of technical debt.
  prefs: []
  type: TYPE_NORMAL
- en: We have spent this section looking at the benefits of tooling in the DevOps
    toolchain and seeing how different tools add benefit to our DevOps value. Next,
    let's look at the obstacles that exist when it comes to onboarding successful
    tooling.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the obstacles of DevOps tooling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we have covered all the positives about tooling in the DevOps toolchain.
    What about some of the obstacles that come from working with so many different
    tools? Here are a few things that are obstacles to the adoption of these tools:'
  prefs: []
  type: TYPE_NORMAL
- en: Lack of definition of DevOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shortage of knowledge on tooling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evaluation of tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The volume of tools available on the market
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lack of tool integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's now look at these points in more detail to better understand the obstacles
    to adopting tools.
  prefs: []
  type: TYPE_NORMAL
- en: Lack of definition of DevOps outcomes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It goes without saying that without a properly defined definition of what DevOps
    is and what it means to your organization, you are going to struggle with tooling.
    This leads to organizations deploying tooling because their competitors are deploying
    tools or for other primitive reasons.
  prefs: []
  type: TYPE_NORMAL
- en: Having that definition also helps you understand what the tooling roadmap might
    look like and how you can properly address the gaps that exist with the right
    tools, using all the pointers we have discussed in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Not only does your organization need a definition of DevOps, but it also needs
    to be standard across your whole organization. Everyone from top to bottom needs
    to buy into this in order for every part of your DevOps adoption to be successful;
    this includes tooling.
  prefs: []
  type: TYPE_NORMAL
- en: Inadequate knowledge of tooling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having a shortage of knowledge on the different tooling available can also be
    a barrier to success. This issue can manifest in a few ways; however, some of
    them are more damaging to overall progress than others.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, a lack of knowledge can hamper your efforts to pick the right tool
    for the task. While nobody will ever be an expert in the whole toolchain, or even
    in one specific area, having broad knowledge will help you make an evaluation
    in line with the information you are able to gather from the vendor.
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, the lack of knowledge can leave you in limbo – without that broad
    knowledge of the tooling, you may find yourself in a position where you don't
    understand how the tools are addressing your specific needs. This delay can hurt
    your implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Thirdly, and finally, when you have a lack of tooling knowledge, the worst it
    can do is paralyze your decision making. Rather than making the wrong decision,
    as in point one, or lacking understanding, as in point two, this is more about
    misunderstanding what the tool is there to achieve.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluation of tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with any purchase of software from any vendor, your organization is going
    to want to make sure you get the most from any demonstration or trial offers.
    This is a big investment, and you want to make sure you are picking a tool that
    checks the right boxes and delivers what you need.
  prefs: []
  type: TYPE_NORMAL
- en: Take into account the cost of a tool against the value it provides. You must
    make sure that the return on investment for the purchase is in line with expectations.
  prefs: []
  type: TYPE_NORMAL
- en: If you are evaluating multiple tools, make sure the evaluation of them is equal.
    There is no point performing different evaluations on tools that do the same thing.
    Not only does this not give each of your candidates the opportunity to shine,
    but it ensures that no bias is involved in the decision-making process.
  prefs: []
  type: TYPE_NORMAL
- en: Everyone has an affinity with different technology stacks and tools, but you
    need to make sure you pick the right tool for the organization, not use what you
    have used in the past just because you know the tool.
  prefs: []
  type: TYPE_NORMAL
- en: The volume of tools available on the market
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Of course, before you even get to the evaluation of tools, you have to tread
    your way through the vast ocean of tools that exist in the various categories
    of the DevOps toolchain.
  prefs: []
  type: TYPE_NORMAL
- en: 'The number of tools is so vast that the **Cloud Native Computing Foundation
    (CNCF)** has even created a web tool detailing the tools within their area and
    provides a number of filters for you to limit your searches. This is the *CNCF
    Cloud Native Landscape* ([https://landscape.cncf.io](https://landscape.cncf.io)).
    Don''t be mistaken: this is incredibly useful, but it also highlights the issues
    we face when selecting tools.'
  prefs: []
  type: TYPE_NORMAL
- en: To add to the list of tools charted by the CNCF, there are of course other tools
    as well that are not within the CNCF ecosystem. This expansive list of tools adds
    to the paralysis you can feel when looking at the tooling options available.
  prefs: []
  type: TYPE_NORMAL
- en: You can get through the marketing offered by the vendors by looking at independent
    sources of information on the tools. Go to community posts by people who use the
    products, look at their use cases, and use this information to help you shortlist
    tools.
  prefs: []
  type: TYPE_NORMAL
- en: Lack of tool integration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Earlier in the chapter, we talked about the importance of integration within
    DevOps tooling. Working with a tool that lacks sufficient integration limits your
    capability, depending on that limitation depends on the impact it has.
  prefs: []
  type: TYPE_NORMAL
- en: For example, continuous integration and deployment tooling without sufficient
    integration is going to be a problem if the platform doesn't provide a wide array
    of other services with it. When looking at these tools, we should look for integration
    opportunities with backlog management tools, our deployment platform, and our
    ticketing system if that is a requirement.
  prefs: []
  type: TYPE_NORMAL
- en: We also must consider integration with tools providing security services for
    them to be valuable to our overall ambitions.
  prefs: []
  type: TYPE_NORMAL
- en: That lack of integration creates a black box for your tooling, where you are
    unable to interface with it or retrieve what might be valuable data from it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have looked at tooling within the DevOps toolchain. We have
    looked at the different families of DevOps tooling and looked at how tooling helps
    the adoption of DevOps in your organization. We then looked at the benefits of
    DevOps tooling and looked to understand the obstacles that may prevent the adoption
    of good-quality tools.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will look at how to develop a strategy for the implementation of tooling.
    We will look at the architectural and security requirements for your tooling and
    how to develop training plans to help the team, and tie this in with defining
    owners and processes for DevOps tools.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now recap some of what we have learned throughout this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Which tools have an impact across the whole DevOps toolchain?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. Build tools
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Testing tools
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Collaboration tools
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. Run tools
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Why are APIs so important when adopting tooling?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. They're not – we don't need APIs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. They provide automation and integration opportunities.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. DevOps engineers need to learn about APIs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d. All good tools come with APIs anyway.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
