- en: '*Chapter 11*: Keeping Up with Key DevOps Trends'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A number of different disciplines now exist that look to build upon the core
    principles and practices of DevOps and target different areas of the business,
    and even specific departments. Terms such as DataOps, GitOps, and DevSecOps are
    now common terminology in the industry and tooling exists for each of these, too.
    In this chapter, we look at some of these trends in more detail to understand
    what they are, what their goal is, and what tooling can be used.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will understand some of the key trends associated
    with DevOps specialties, understand what they are, how they apply to organizations,
    and how tooling can be used within them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is XOps?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the DataOps ecosystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the DevSecOps ecosystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the GitOps ecosystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is XOps?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**XOps** is a general catch-all term that describes the adoption of other forms
    of operations both inside and outside of technology. In this context, DevOps is
    really just the tip of the iceberg.'
  prefs: []
  type: TYPE_NORMAL
- en: DevOps is just the beginning. You can also include BizOps, FinOps, AIOps, and
    MarketingOps as a start, but the term *XOps* covers more than just the ones listed
    here. These are all cross-functional efforts, like DevOps is, but do organizations
    really need all of them, even some of them, or is the movement just hype?
  prefs: []
  type: TYPE_NORMAL
- en: One thing we can all agree on is that all organizations are at their own stages
    of maturity. The factors for this include their size, age, industry, technical
    adoption, budgets, and, of course, culture.
  prefs: []
  type: TYPE_NORMAL
- en: Organizations are increasingly requiring the benefits of what these different
    kinds of operation models provide. Some organizations will implement as many of
    them as possible, while some will implement what they need and even manipulate
    the processes and level of adoption to best fit with their organization.
  prefs: []
  type: TYPE_NORMAL
- en: This does not mean that the results will be any different depending on the factors
    previously mentioned. As with DevOps, the key element that all of these models
    have in common is the focus on value, which is something unique to each organization.
  prefs: []
  type: TYPE_NORMAL
- en: Where did XOps begin?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some people believe that XOps is just hype, hype that will disappear, and that
    much of what is proposed is a relabeling of what already exists. You can say the
    same about DevOps as well, but it is the way that practices within DevOps are
    brought together and not left fragmented that delivers real value to organizations.
  prefs: []
  type: TYPE_NORMAL
- en: Like DevOps, most of the types of operation models will look at the acceleration
    of the process and improvements in quality when it comes to what they deliver.
    For example, in DataOps, this would be data, and analytical insights into operations
    performance for AIOps.
  prefs: []
  type: TYPE_NORMAL
- en: Those who believe that XOps is overhyped believe that the risk is that fragmentation
    is created by the different groups that are involved. This fragmentation further
    dilutes the faster value that is created and creates a level of additional bureaucracy.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Agility has been at the heart of XOps since the turn of the millennium. Business
    leaders have since been aware that their organizations need to be more Agile in
    order to stay competitive in their industry.
  prefs: []
  type: TYPE_NORMAL
- en: Agile practices that form part of XOps have been around for some time and have
    been rising further up the business stack for some time. Sadly, some leaders take
    the view that agility will equal the ability to do more with less.
  prefs: []
  type: TYPE_NORMAL
- en: The truth is that fundamentally, agility backed up with solid processes provides
    your organization with the ability to scale when needed, deliver more value to
    your end users, improve your processes, and your efficiency.
  prefs: []
  type: TYPE_NORMAL
- en: The link between XOps and DevOps is not just in the similarities in names, approaches
    to achieving the gold standard, or the processes involved. Culture is an important
    part of DevOps, specifically regarding the ability to improve your communication
    and collaboration in your organization.
  prefs: []
  type: TYPE_NORMAL
- en: Other important aspects that XOps takes from DevOps is the focus on continuous
    improvement, as well as the focus on the automation of tasks. Technical staff
    often forget that process automation does not just have to be on technical elements
    of the process. After all, business process automation was around long before
    DevOps was conceived.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the XOps landscape
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To understand the XOps landscape further, let's look at two of the common initiatives
    in XOps, which are FinOps and CloudOps. We will learn about DataOps, DevSecOps,
    and GitOps in more detail later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: FinOps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: FinOps is also known as Cloud Financial Management, and it is the amalgamation
    of finance and operations teams within an organization. Specifically, FinOps focuses
    on the processes involved in managing financial operations while linking together
    the people involved, the processes, and, of course, the technology.
  prefs: []
  type: TYPE_NORMAL
- en: The need for FinOps arises from the traditional financial model in IT, which
    worked separately from other teams and lacked a level of data-driven decision
    making and technical modernization for managing scalable, cloud-enabled applications.
  prefs: []
  type: TYPE_NORMAL
- en: Limitations regarding the lack of flexibility concerning business requirements
    only inflated the costs, which make the system slow moving and more expensive.
    As a result of this, organizations needed to come up with a method for providing
    cost control for their highly scalable cloud environments, understand what those
    costs are, how they are occurring, and keep track of their cloud spend.
  prefs: []
  type: TYPE_NORMAL
- en: As the cloud has evolved, so has the need for the ability to provide chargeback
    of services hosted in cloud environments for other parts of the organization.
    The granular costs involved with cloud computing have made the idea of chargeback
    simpler in many ways, but it is actually hard to implement.
  prefs: []
  type: TYPE_NORMAL
- en: Complexities around how to bill for shared services such as network and storage
    make it difficult to realize how these costs can be charged back to various departments.
    These fabric-level services, or core services, are often consumed by the technology
    department, while application services are charged back to cost centers.
  prefs: []
  type: TYPE_NORMAL
- en: To have robust practices regarding FinOps, it is important to follow three phases
    of adoption. These phases are inform, optimize, and operate. The first phase,
    *inform*, looks at a detailed assessment of assets, budget allocation, and providing
    an understanding of industry standards to detect areas of improvement.
  prefs: []
  type: TYPE_NORMAL
- en: The second phase, *optimize*, helps to set alerts and metrics that identify
    any areas that need to both spend and redistribute resources. These generate decision-making
    capabilities and provide recommendations on architecture changes where required.
  prefs: []
  type: TYPE_NORMAL
- en: The final phase, *operate*, assists in tracking costs and cost control mechanisms
    at a resource level. FinOps provides a level of flexibility in operations, but
    maintains financial accountability to the variable costs that are associated with
    cloud platforms.
  prefs: []
  type: TYPE_NORMAL
- en: CloudOps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CloudOps is the process of defining and identifying operational procedures,
    which are appropriate to optimizing services within cloud environments. CloudOps
    is a bringing together of DevOps and traditional operations allowing cloud platforms,
    applications, and data to provide further technical strengthening while maintaining
    services.
  prefs: []
  type: TYPE_NORMAL
- en: For organizations to accelerate agility any further, they must keep a check
    on any budget constraints, such as waste and overrun. This is one of the reasons
    why organizations decide to move to cloud platforms for their workloads.
  prefs: []
  type: TYPE_NORMAL
- en: CloudOps provides predictability and proactiveness and helps enhance visibility
    and governance. In maintaining on-premises locations, the associated power, network,
    storage, and high availability are always a challenge. This is easier in the cloud
    even though challenges remain, but those challenges differ from on-premises.
  prefs: []
  type: TYPE_NORMAL
- en: Since CloudOps is an extension of DevOps, it aims to build cloud operations
    teams that are responsible for post-migration applications on cloud platforms.
    Governance tools that optimize costs, enhance security posture, and provide capacity
    planning are essential in CloudOps. It also promotes the notion of continuous
    monitoring as well as the management of cloud applications with smaller numbers
    of resources.
  prefs: []
  type: TYPE_NORMAL
- en: Automation provides techniques to increase the agility, speed, and performance
    of cloud applications. Automation in CloudOps also facilitates the handling of
    services, incidents, and problems in a smooth manner. Combining elements of DevOps
    such as continuous integration and continuous deployment with infrastructure services
    and introducing infrastructure as code provides high levels of automation, increases
    the value of CloudOps, and provides level scalability not previously seen by operations
    teams.
  prefs: []
  type: TYPE_NORMAL
- en: Approach to XOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's look at an example approach to XOps. The objective is to transform what
    is currently a monolithic application into a microservice architecture. Additionally,
    the migration process should be automated, along with separate environments for
    production, UAT, and test.
  prefs: []
  type: TYPE_NORMAL
- en: The primary identity should be managed by the DevOps team. This allows you to
    manage users and groups as well as third-party services and applications. This
    approach advocates collaborative culture.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, to make resources modular, the team generates container-based modules
    for multiple resources, and stacks are then broken down, making them scalable
    and ensuring that deployment is easier.
  prefs: []
  type: TYPE_NORMAL
- en: Maintenance and debugging with this approach become simpler for development
    teams as well, and automated processes help enhance code quality. Role-based access
    control ensures secure authentication and authorization.
  prefs: []
  type: TYPE_NORMAL
- en: The deployment of centralized systems for logging and monitoring allows views
    of performance, availability, and security on centralized dashboards. This helps
    to provide cost-effectiveness and improve the performance of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we have discussed a number of disciplines, such as DevOps, CloudOps, and
    FinOps, to make this happen.
  prefs: []
  type: TYPE_NORMAL
- en: We now have an understanding of the term *XOps*. We understand where XOps came
    from and the landscape of XOps. Let's now look at the DataOps ecosystem in more
    detail.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the DataOps ecosystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most common misconceptions around DataOps is that under the covers,
    it is just DevOps applied to data analytics. While the name shares similarities
    with both DevOps and DataOps, they're not the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the following diagram, which depicts the DevOps loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – Graphic showing the phases of DevOps in an infinite loop'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_11_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.1 – Graphic showing the phases of DevOps in an infinite loop
  prefs: []
  type: TYPE_NORMAL
- en: 'DevOps is often depicted as an infinite loop. As you can see in the previous
    diagram, DataOps is different. When illustrating DataOps, it is shown as an intersection
    of value and innovation pipelines, as you can see in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2 – DataOps depiction showing a value pipeline along the top and
    innovation from bottom to top'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_11_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.2 – DataOps depiction showing a value pipeline along the top and innovation
    from bottom to top
  prefs: []
  type: TYPE_NORMAL
- en: DataOps communicates that data analytics can achieve what DevOps accomplished
    for software development. That is, when data teams use new tools and methodologies,
    DataOps can result in an order of magnitude improvement in quality and cycle time.
    The specific methods by which DataOps achieves these gains reflect the distinct
    people, processes, and tools that characterize data teams.
  prefs: []
  type: TYPE_NORMAL
- en: The Agile methodology is particularly useful in environments where requirements
    evolve quickly and often change. This is a situation that data professionals will
    understand all too well. Like in DevOps, Agile in DataOps allows organizations
    to respond very quickly to requirements and accelerate the time to value.
  prefs: []
  type: TYPE_NORMAL
- en: DataOps is also as much about managing people as it is about the tools. The
    needs and preferences of stakeholders are one subtle difference between DataOps
    and DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: In DevOps, our users are software engineers and operations engineers who are
    comfortable with coding, the complexity involved with multiple languages in one
    environment, as well as hardware and software. However, in DataOps, our users
    are data scientists, engineers, and analysts who analyze data and build complex
    data models.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps was developed to meet the needs of software developers. Dev engineers
    enjoy coding and are technologically savvy. Learning a new language or deploying
    a new tool is an opportunity, not a burden. They take a keen interest in all aspects
    of code creation, integration, and deployment. DevOps welcomes complexity.
  prefs: []
  type: TYPE_NORMAL
- en: DataOps users are frequently the polar opposite of that. They are data scientists
    or analysts who specialize in the development and deployment of models and visualizations.
    Engineers are typically more technically savvy than scientists and analysts. They
    concentrate on domain expertise. They are interested in making models more predictive
    or determining the best way to visually render data.
  prefs: []
  type: TYPE_NORMAL
- en: The technology used to create these models and visualizations is merely a tool.
    Data professionals are happiest when they only use one or two tools. Anything
    more adds unwelcome complexity. In the most extreme cases, the complexity exceeds
    their ability to manage it.
  prefs: []
  type: TYPE_NORMAL
- en: DataOps recognizes that data professionals live in a multi-tool, heterogeneous
    world, and strives to make it more manageable for them.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding processes involved in DataOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By examining data analytics development and life cycle processes, we can begin
    to understand the unique complexity that data professionals face. We discovered
    that data analytics professionals face challenges that are both similar to and
    distinct from those faced by software developers.
  prefs: []
  type: TYPE_NORMAL
- en: In DevOps, the life cycle starts with the planning phase, and this feeds back
    to the beginning, which is the code phase. Hence, the process iterates indefinitely.
  prefs: []
  type: TYPE_NORMAL
- en: 'The DataOps life cycle shares these iterative characteristics, but there is
    a significant difference: DataOps consists of two active and intersecting pipelines.
    The previously mentioned data factory is a single pipeline. The other pipeline
    governs how the data factory is updated, which includes the creation and deployment
    of new analytics into the data pipeline.'
  prefs: []
  type: TYPE_NORMAL
- en: The process by which new analytic ideas are introduced into the value pipeline
    is referred to as the innovation pipeline. Although the innovation pipeline conceptually
    resembles the DevOps development process, several factors make the DataOps development
    process more difficult than DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding tools involved in DataOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To deliver a reliable data pipeline, the tooling to directly and indirectly
    support DataOps needs can be broken down into five steps, leveraging existing
    analytics tools along with toolchain components meant to address source control
    management, process management, and efficient communication among groups:'
  prefs: []
  type: TYPE_NORMAL
- en: Source control management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automation of processes and workflow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding data and logic tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working without fear with consistent deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing communication and process management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's provide a little more detail regarding these five steps.
  prefs: []
  type: TYPE_NORMAL
- en: Source control management
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A data pipeline is nothing more than source code that is responsible for converting
    raw data into usable information. We can automate the data pipeline from start
    to finish, resulting in reproducible source code. A revision control tool (such
    as GitHub) aids in the storage and management of all changes to code and configuration
    in order to reduce inconsistent deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Automation of processes and workflow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Automation is essential for the success of the DataOps methodology, which necessitates
    the design of a data pipeline with runtime flexibility. Automated data curation
    services, metadata management, data governance, master data management, and self-service
    interaction are critical requirements for achieving this.
  prefs: []
  type: TYPE_NORMAL
- en: Adding data and logic tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To ensure that the data pipeline is working properly, inputs, outputs, and business
    logic must be tested. To ensure consistent data quality, the data pipeline is
    tested at each stage for accuracy or potential deviation, as well as errors or
    warnings.
  prefs: []
  type: TYPE_NORMAL
- en: Working without fear with consistent deployment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Data analytics professionals are terrified of introducing changes that will
    disrupt the current data pipeline. This can be addressed with two key workflows
    that will be integrated later in production. For starters, the value pipeline
    generates ongoing value for organizations. Second, the innovation pipeline consists
    of new analytics in the development stage that are later added to the production
    pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing communication and process management
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Within a DataOps practice, efficient and automated notifications are critical.
    When changes are made to any source code, or a data pipeline is triggered, failed,
    completed, or deployed, the appropriate stakeholders can be immediately notified.
    The toolchain also includes tools for facilitating cross-stakeholder communication
    (think Slack or Trello).
  prefs: []
  type: TYPE_NORMAL
- en: We now have an understanding of what DataOps is, what it tries to achieve when
    implemented correctly, as well as an understanding of the processes and tooling
    involved in the DataOps life cycle. Now, let's look at the DevSecOps ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the DevSecOps ecosystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**DevSecOps** is a software industry culture shift that aims to incorporate
    security into the rapid-release cycles typical of modern application development
    and deployment, also known as the DevOps movement. Embracing this shift-left mindset
    necessitates organizations bridging the gap that typically exists between development
    and security teams, to the point where many of the security processes are automated
    and handled by engineering teams.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram helps depict how security fits into the existing DevOps
    loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.3 – Diagram showing the interaction between DevOps and DevSecOps'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_11_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.3 – Diagram showing the interaction between DevOps and DevSecOps
  prefs: []
  type: TYPE_NORMAL
- en: Historically, major software developers would release new versions of their
    applications every few months, if not years. This gave the code enough time to
    go through quality assurance and security testing, which was handled by separate
    specialized teams, either internal or externally contracted.
  prefs: []
  type: TYPE_NORMAL
- en: However, the last 10 years have seen a rise in public clouds, containers, and
    the microservice model, which divides monolithic applications into smaller parts
    that run independently. This breakdown has also had a direct impact on the way
    software is developed, resulting in rolling releases and Agile development practices
    in which new features and code are constantly pushed into production at a rapid
    pace.
  prefs: []
  type: TYPE_NORMAL
- en: DevSecOps combines DevOps and SecOps to form a cyclical practice for software
    development, technology operations, and cybersecurity.
  prefs: []
  type: TYPE_NORMAL
- en: DevSecOps aims to promote the rapid development of a secure code base. Rather
    than emphasizing development speed or security, the DevSecOps methodology assists
    developers and security professionals in striking a healthy balance. The use of
    an Agile framework allows development and security teams to collaborate continuously.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps and DevSecOps methodologies are similar in many ways, including the use
    of automation and continuous processes to establish collaborative development
    cycles. While DevOps promotes delivery speed, DevSecOps promotes security.
  prefs: []
  type: TYPE_NORMAL
- en: DevSecOps practices may initially increase development time, but they will ensure
    that the code base is secure from the start. After some practice, and once security
    has been fully integrated into the development process, teams will benefit from
    increased writing and delivery speed for secure code bases.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding processes involved in DevSecOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many of the processes involved in DevSecOps are not new. Your organization will
    hopefully be practicing them already. The main difference will be that current
    processes may not be optimal for use in a DevSecOps environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'A good starting point to look at what needs to be changed in your processes
    is to look at the *DevSecOps manifesto* ([https://www.devsecops.org](https://www.devsecops.org)).
    In a similar way to the Agile manifesto, the DevSecOps manifesto lays out nine
    points to mature your information security practice. These are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Leaning in over and always saying no
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data and security science over fear, uncertainty, and doubt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open contribution and collaboration over security-only requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consumable security services with APIs over mandated security controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Business-driven security scores over rubber stamp security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Red and blue team exploit testing over relying on scans and theoretical vulnerabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 24x7 proactive monitoring over reacting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shared threat intelligence over keeping information to ourselves
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compliance operations over clipboards and checklists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can see that most of what the manifesto lays out involves the maturity of
    your existing investments in information security and goes a long way to retracting
    some of the negative connotations that have become attached to information security
    over the years.
  prefs: []
  type: TYPE_NORMAL
- en: 'DevSecOps is hard, but when done well, you can significantly improve your security
    posture, as well as your understanding of security within your organization. To
    shift to the DevSecOps way of thinking, these five steps should be followed:'
  prefs: []
  type: TYPE_NORMAL
- en: DevSecOps is a cultural change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Align practices with the development workflow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Demonstrable evidence that security keeps pace with velocity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change from prevention to detection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the security budget to support the development workflow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's have a look at the further five steps to understand the implementation.
  prefs: []
  type: TYPE_NORMAL
- en: DevSecOps is a cultural change
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adopting a DevSecOps approach will be a massive undertaking for most businesses,
    so be mindful of how significant a cultural shift it is. Start a conversation,
    be brave, and be the one to take the first step toward change. It will be easier
    to find common ground and reach an agreement if you engage in a clear and simple
    manner that highlights the business, efficiency, and security benefits for each
    organization.
  prefs: []
  type: TYPE_NORMAL
- en: Align practices with the development workflow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is critical that when you engage in discussions with development teams, you
    do not bring your current security practices to the table and expect them to change
    the way they develop code.
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, you should not disregard your security needs in terms of monitoring,
    risk assessment, and so on, but you must be willing to change your security practices
    to align with the development workflow. If you tried to base your DevSecOps approach
    on how you traditionally approach security, the entire speed and cadence of your
    production releases would stall.
  prefs: []
  type: TYPE_NORMAL
- en: Demonstrable evidence that security keeps pace with velocity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Your development, operations, or DevOps teams will most likely be hesitant to
    welcome your security teams or professionals into their *way of doing things*.
    You can overcome this hesitance by offering visibility and monitoring services,
    as well as collaborating to map your processes and identify opportunities to support
    agility.
  prefs: []
  type: TYPE_NORMAL
- en: Early on, you should be less concerned with enforcement, blocking activities,
    and slowing down the pipeline, and more concerned with demonstrating that security
    can keep up with the velocity with which your development teams are building so
    much product to ensure that the pipeline runs smoothly.
  prefs: []
  type: TYPE_NORMAL
- en: Change from prevention to detection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once security has established itself in the development workflow, you can consider
    shifting from a monitoring and visibility role to proactively identifying vulnerabilities
    in code. The security team can become the development team's best friend in this
    situation.
  prefs: []
  type: TYPE_NORMAL
- en: Using your security budget to support the development workflow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finally, consider your own security budget. Are there any areas where you can
    redirect some security budget to that workflow pipeline as you change your practices
    to align with the development workflow? This demonstrates your commitment to the
    sustainability of security in every release by devoting additional resources to
    the continuous integration and continuous deployment pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding tools involved in DevSecOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As DevSecOps is closely aligned from a process perspective with the DevOps
    life cycle, the tooling involved in DevSecOps closely aligns with the flow of
    the DevOps life cycle. The tooling in DevSecOps therefore lines up with the eight
    different phases of DevOps. These are the phases, along with common security tooling
    and processes, that you might find at each point:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Plan**: Threat modeling'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code**: Static analysis and code review'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build**: Penetration testing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test**: Compliance validation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Release**: Logging'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deploy**: Auditing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operate**: Threat intelligence'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monitor**: Detect, respond, recover'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, let's have a look at some of these in more detail to understand some specifics
    regarding the tooling used.
  prefs: []
  type: TYPE_NORMAL
- en: Threat modeling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unfortunately, threat modeling has long been regarded as a time-consuming and
    labor-intensive activity. As a result, as organizations adopt a DevSecOps approach,
    threat modeling is frequently left out of the security practices employed. However,
    the importance of thread modeling in development should not be underestimated.
  prefs: []
  type: TYPE_NORMAL
- en: According to the *2020 DevSecOps Insights Report* ([https://snyk.io/wp-content/uploads/dso_2020.pdf](https://snyk.io/wp-content/uploads/dso_2020.pdf)),
    threat modeling has a significant positive impact on a team's overall confidence
    in their code's security.
  prefs: []
  type: TYPE_NORMAL
- en: At its core, threat modeling is intended to examine planned software to identify
    what might go wrong if an attacker targets that software. The purpose of this
    analysis is to inform the development team about which security controls should
    be considered as part of their implementation. Traditionally, threat modeling
    has been done with a broad scope across the entire application context. As part
    of this process, data flow diagrams, detailed threat analysis frameworks, and
    prescriptive threat prioritization methodologies are frequently used.
  prefs: []
  type: TYPE_NORMAL
- en: Static analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Static analysis tools, or **Static Application Security Testing** (**SAST**),
    work well with almost any software automation toolchain, as well as any development
    methodology and process. This is primarily because they can be used locally by
    developers at their desktop for instantaneous feedback and to analyze a complete
    build, whether it is done hourly or at whatever other cadence.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, because they do not require interaction with testers or developers,
    SAST tools are completely autonomous. They are useful whenever it is necessary
    to check the code for bugs and security vulnerabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Although not a panacea when used alone, these tools should be used in tandem
    with other automation tools. As software teams begin to integrate security into
    their DevOps processes, tools such as *SonarQube* ([https://www.sonarqube.org](https://www.sonarqube.org))
    are simple to implement and integrate into the automation pipeline. By detecting
    vulnerabilities early and preventing them from entering later in the development
    cycle, the pipeline pays off in reducing security fixes later.
  prefs: []
  type: TYPE_NORMAL
- en: Penetration testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While automated tools in your pipeline can go a long way to detecting many different
    vulnerabilities, you will likely still have a need for penetration testing tools.
    Traditionally speaking, penetration testing is an art and a science in many ways.
    You would be forgiven for thinking that penetration testing and the focus on speed,
    frequency, and repeatability with DevOps would mean DevOps and penetration testing
    are juxtaposed.
  prefs: []
  type: TYPE_NORMAL
- en: '*BreachLock* ([https://www.breachlock.com](https://www.breachlock.com)), for
    example, can be fully integrated into a DevOps environment by performing end-to-end
    security testing for your product, ensuring the speed, reliability, and consistency
    of your development process.'
  prefs: []
  type: TYPE_NORMAL
- en: Threat intelligence
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Visibility for threat intelligence grows as more components of the environment
    are defined and documented in code. Many organizations struggle to identify their
    IT assets in such a way that threat intelligence can be effectively linked to
    the assets in their environment. By ensuring that processes are in place to feed
    metadata from the DevSecOps pipeline to threat intelligence capabilities, the
    organization can ensure that the right intelligence is gathered and applied, and
    responded to in a risk-prioritized manner.
  prefs: []
  type: TYPE_NORMAL
- en: We now have an understanding of what DevSecOps is, what it tries to achieve
    when implemented correctly, as well as an understanding of the processes and tooling
    involved in the DevSecOps life cycle. Now, let's look at the GitOps ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the GitOps ecosystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitOps is a technique for implementing continuous deployment in cloud-native
    applications. It focuses on providing a developer-centric experience when operating
    infrastructure by utilizing tools that developers are already familiar with, such
    as Git and continuous deployment tools.
  prefs: []
  type: TYPE_NORMAL
- en: The core concept of GitOps is to have a Git repository that always contains
    declarative descriptions of the infrastructure that is currently desired in the
    production environment, as well as an automated process to match the described
    state in the repository. If you want to deploy a new application or update an
    existing one, all you have to do is update the repository; the automated process
    will handle the rest. It's like having cruise control for managing your production
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: While we are specifically talking about Git, you can use any source control
    repository to achieve the same results.
  prefs: []
  type: TYPE_NORMAL
- en: GitOps provides a complete history of how your environment has changed over
    time. This makes error recovery as simple as running `git revert` and watching
    your environment restore itself.
  prefs: []
  type: TYPE_NORMAL
- en: GitOps enables you to manage deployments entirely from within your environment.
    Your environment only requires access to your repository and image registry for
    this purpose. That is all there is to it. You are not required to grant your developers
    direct access to the environment.
  prefs: []
  type: TYPE_NORMAL
- en: When you use Git to store complete descriptions of your deployed infrastructure,
    everyone on your team can see how it evolves over time. With excellent commit
    messages, anyone can easily reproduce the thought process of changing infrastructure
    and find examples of how to set up new systems.
  prefs: []
  type: TYPE_NORMAL
- en: The deployment process in GitOps is organized around code repositories as the
    central element. There are at least two repositories, one for the application
    and one for the environment configuration. The application repository contains
    the application's source code as well as the deployment manifests used to deploy
    the application.
  prefs: []
  type: TYPE_NORMAL
- en: The environment configuration repository contains all deployment manifests for
    a deployment environment's currently desired infrastructure. It specifies which
    applications and infrastructure services should be run in the deployment environment
    and with what configuration and version.
  prefs: []
  type: TYPE_NORMAL
- en: GitOps is a highly effective workflow pattern for managing modern cloud infrastructure.
    Despite its primary focus on Kubernetes cluster management, the DevOps community
    is applying and publishing GitOps solutions to non-Kubernetes systems. GitOps
    can benefit an engineering team in a variety of ways, including improved communication,
    visibility, stability, and system reliability.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding processes involved in GitOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The great thing about GitOps is that you don't need to be doing anything differently.
    If you are already writing infrastructure as code and you store your code in a
    repository, then you are almost there already.
  prefs: []
  type: TYPE_NORMAL
- en: The hardest thing is moving from an imperative method of deployment to a declarative
    method of deployment. Infrastructure as code promotes a declarative approach to
    system administration, which has led to the development of tools such as Ansible,
    Terraform, and Kubernetes, which all use static files to declare configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following imperative statements, which are steps for deploying
    an application:'
  prefs: []
  type: TYPE_NORMAL
- en: Install the operating system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install these dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the application from this URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the application to this directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat this thrice on three other servers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The declarative version of this would simply be something like *Four machines
    have an application from this URL, installed at this directory*. Instead of a
    sequence of commands, declarative software follows a declaration of an expected
    state.
  prefs: []
  type: TYPE_NORMAL
- en: A pipeline platform is required to complete a full GitOps installation. Some
    popular pipeline tools that complement GitOps include Jenkins, Azure DevOps pipelines,
    and CircleCI. Pipelines automate and connect Git pull requests to the orchestration
    system. Commands are sent to the orchestration piece after pipeline hooks are
    established and triggered by pull requests.
  prefs: []
  type: TYPE_NORMAL
- en: The processes involved in GitOps are therefore not really that much different
    from the same phases involved in the software development life cycle. Those processes
    define how code should be stored, what language should be used, who should review,
    how pipelines should be built, and where those pipelines are executed.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve GitOps, you can extend what you already do in DevOps for software
    engineering and apply it to the infrastructure world.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding tools involved in GitOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we touched on in the previous section, two tools are required to get started
    with GitOps. These tools are version control in the form of Git, as well as a
    tool to build and execute pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: Git is the design center in the GitOps pipeline model. It serves as the source
    of authority for everything in the system, from code to configuration, and the
    entire stack. Building deployable artifacts necessitates the use of continuous
    integration, build, and test services. However, in the GitOps pipeline, the overall
    delivery orchestration is coordinated by the deployment and release automation
    system, which is triggered by repository updates. To summarize, continuous deployment,
    not continuous integration, owns delivery orchestration. It is a very subtle shift
    in how pipelines work from the software development life cycle. Any continuous
    integration provider should be able to adopt this model.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have looked at XOps in detail as well as at the various
    operating models that are available. We have looked at DevSecOps, DataOps, and
    GitOps in further detail to understand their origins, benefits, processes, and
    tooling, looking at how this differs from DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we look to bring together everything we have learned so
    far, review some key learnings, and walk through an example implementation of
    DevOps using an example organization, listing their challenges, what can be done
    to resolve these challenges, and finally how to implement those changes.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now recap some of what we have learned throughout this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What does FinOps set out to achieve?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Manage financial operations in cloud platforms.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Set appropriate budgets.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Ensure accountability for consumption.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Increase agility.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What differentiates DevOps and DataOps?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) DataOps focuses on data and not software.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) DataOps focuses on database management.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) DataOps is not an iterative process like DevOps.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) No difference; both are the same.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
