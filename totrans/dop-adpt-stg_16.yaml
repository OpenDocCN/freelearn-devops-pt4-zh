- en: '*Chapter 12*: Implementing DevOps in a Real-World Organization'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using everything we have learned so far, in this chapter we will look at putting
    everything into practice and see how you might implement DevOps in a real-world
    organization. Using a fictitious organization, we will set out problem statements,
    define what their goals are, and then look at how we can help that company adapt
    and change, starting on the road to DevOps transformation.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have learned how to combine all the elements
    we have covered in the book and put them together to practice a real-world transformation
    to DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding why organizations move to DevOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining our fictional organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Walk-through of a sample DevOps transformation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding why organizations move to DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 1*](B17192_01_Final_ASB_ePub.xhtml#_idTextAnchor012), *Introducing
    DevOps and Agile*, we discussed the goals of DevOps, as well as some of the values
    of DevOps and the challenges that DevOps will help us solve. What about why organizations
    move to DevOps? This is a question we will now look at in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'According to the *2019 DORA State of DevOps Report* (https://cloud.google.com/devops/state-of-devops),
    top performers in DevOps deliver code faster, have fewer bugs, and resolve incidents
    more quickly. Some of the highlights from that report include the following statistics
    backing up the previous statement:'
  prefs: []
  type: TYPE_NORMAL
- en: 208 times more frequent code deployments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 106 times faster lead time from commit to deploy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2,604 times faster time to recover from incidents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7 times lower change failure rate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizations that embrace DevOps practices simply get more done. By utilizing
    a single team comprising cross-functional members all working in collaboration,
    DevOps organizations can deliver with maximum speed, functionality, and innovation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [*Chapter 2*](B17192_02_Final_ASB_ePub.xhtml#_idTextAnchor038), *Business
    Benefits, Team Topologies, and Pitfalls of DevOps*, we focused on looking at the
    key business benefits of DevOps. However, you can put the benefits associated
    with DevOps into three clear buckets:'
  prefs: []
  type: TYPE_NORMAL
- en: Business benefits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical benefits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cultural benefits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we talked about business benefits, we covered things that make a business
    tick; things such as a boost in productivity, better-quality products, and improved
    employee retention were three of these reasons. Also, there are things that directly
    contribute to the success of the business, such as improved growth, customer satisfaction,
    and customer experience.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now look at some of the technical and cultural benefits your organization
    can expect to achieve from implementing DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: Technical benefits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You could list numerous technical benefits associated with DevOps. However,
    when you are working toward DevOps transformation, it is important to not focus
    on the minute details too much and to try and keep your eye on the broader benefits.
    The reason for this is that often those smaller benefits, while beneficial to
    you or your team, may not be broader benefits for other teams, the department,
    or your organization.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping that organizational view will ensure you get maximum buy-in. Teams across
    the organization will feel similar benefits specific to their team, and that is
    great, but you must focus on the bigger benefits.
  prefs: []
  type: TYPE_NORMAL
- en: Three benefits stand out for me as critical and align with the preceding scenario
    of thinking about the bigger picture. They are continuous software delivery, faster
    resolution of problems, and less complexity. This also presents the opportunity
    to provide more proactive and reactive management of technical debt.
  prefs: []
  type: TYPE_NORMAL
- en: Continuous integration and continuous deployment and delivery are cornerstones
    of DevOps and are clear technical benefits. When implemented correctly, not only
    do they provide you clear benefits around the building and deployment of your
    applications but they provide a means to catch bad practices during development,
    as well as catching security issues and threats along the way.
  prefs: []
  type: TYPE_NORMAL
- en: With the practices employed in DevOps, you are making your environment less
    complex. This reduction in complexity is attractive to organizations as well as
    individual teams. The best thing is that the reduction in complexity can be in
    a number of areas, such as your workflows, meaning you've automated manual tasks;
    it could be in the production of documentation, for example. It also means removing
    unnecessary steps from your processes. This comes in the form of value stream
    mapping exercises to identify and remove them from your operation.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, with the improvement in the monitoring of your application and infrastructure
    that comes with DevOps also comes site reliability engineering, which is to do
    with the ability to recover from failures quickly. **Site reliability engineering**
    (**SRE**) is a discipline that applies aspects of software engineering to infrastructure
    and operations problems.
  prefs: []
  type: TYPE_NORMAL
- en: The level of telemetry provided and the shared understanding between teams on
    the application and infrastructure supports the application as well as the goals
    set out by the teams.
  prefs: []
  type: TYPE_NORMAL
- en: Cultural benefits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Throughout the chapters, we have talked heavily about the influence of culture
    in DevOps. Culture in DevOps is what binds our teams together. Happier, more productive
    teams; greater professional development opportunities; and higher employee engagement
    are three of the big cultural benefits you can achieve from a successful implementation
    of DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: I just talked about the shared responsibilities in teams that come with DevOps.
    This is a big driver for cultural benefits. When teams are invested in shared
    responsibilities, common goals, and driving vision, this creates a culturally
    sound working environment that drives happier teams that are more productive.
  prefs: []
  type: TYPE_NORMAL
- en: One further benefit to this is the higher employee engagement from the good
    culture that DevOps can breed. We are taught in DevOps the notions "fail fast"
    and "growth mindset." Both of these mean employees are more likely to voice their
    ideas and be open with each other because the focus is not on blame; the focus
    is on making things better and sharing ideas to achieve the common goal.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, when you put all of these things together, you broaden the skills of
    your team quite naturally. You provide people with the tools and the capabilities
    to expand their knowledge and further their careers. Organizations with true career
    growth opportunities are one of the biggest things new hires will look for. DevOps
    can help your organization be attractive for new hires.
  prefs: []
  type: TYPE_NORMAL
- en: Balancing stability against new features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a non-DevOps environment, there is often a conflict between releasing new
    features and maintaining stability. The development team is evaluated based on
    the number of updates delivered to users, whereas the operations team is evaluated
    based on the overall health of the system.
  prefs: []
  type: TYPE_NORMAL
- en: In a DevOps environment, everyone on the team is responsible for delivering
    new features as well as stability. Because code isn't *thrown over the wall* to
    operations at the end of development, the combination of a shared code base, continuous
    integration, test-driven techniques, and automated deployments, among other things,
    exposes issues in application code, infrastructure, or configuration earlier in
    the process.
  prefs: []
  type: TYPE_NORMAL
- en: Because change sets are smaller, problems tend to be less complex. DevOps engineers
    can use real-time data on system performance to quickly understand the impact
    of application changes. And resolution times are reduced because team members
    do not have to wait for a different team to troubleshoot and resolve the issue.
  prefs: []
  type: TYPE_NORMAL
- en: Increased effectiveness
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a typical IT environment, there is enormous waste as people wait for other
    people and other machinesâ€”or they are stuck solving the same problems over and
    over. Employees prefer to be productive, and time spent churning causes frustration
    and unhappiness. Everyone benefits when people can spend less time on unsatisfying
    aspects of their jobs and more time on adding value to the organization.
  prefs: []
  type: TYPE_NORMAL
- en: Key aspects of DevOps models of IT operations are automated deployments and
    standardized production environments, which make deployments predictable and free
    people from routine repetitive tasks to do more high-value things. For example,
    a large financial services firm with over 4,000 IT employees saved over $8 million
    by implementing DevOps, which reduced MTTR and eliminated legacy tool maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: Now we have looked more broadly at the reasons organizations move to DevOps.
    Let's now define our fictional organization to look at the implementation of a
    DevOps transformation.
  prefs: []
  type: TYPE_NORMAL
- en: Defining our fictional organization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we look at our transformation journey, let''s first define the organization
    we are working with. I would like to introduce you all to *Travelics*. Through
    early discussions with Travelics, we have found out some usual details from them:'
  prefs: []
  type: TYPE_NORMAL
- en: Global organization based in Europe and North America.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Employs around 4,000 employees.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Produces two products for the aviation industry, one focused on baggage tracking
    and one on operational insights.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both products have teams of around 15 developers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operations is a shared entity and part of central IT.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have established some fundamentals about Travelics, let's move into
    learning some more specifics about them and what they are trying to achieve.
  prefs: []
  type: TYPE_NORMAL
- en: Current operating model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Travelics' current operating model is that customers drive feature requests
    to the software engineering teams. The process of doing this is via engagement
    with account managers as well as industry experience from engineers on the team.
    All requests are centrally managed and distributed to teams responsible for that
    feature. The work is undertaken and queued for release.
  prefs: []
  type: TYPE_NORMAL
- en: The operations team is a shared entity that is part of the central IT team.
    They rely on documentation from the development team to troubleshoot the application.
    The application is currently undergoing a transformation from being a monolithic
    application that is deployed on virtual machines in a public cloud environment
    to being one that is more cloud-native and relies on microservices and multi-tenanted
    software as a service model.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, virtual machines are deployed for each new client and if the client
    buys both software packages, these will sit on separate instances.
  prefs: []
  type: TYPE_NORMAL
- en: Challenges that exist within the current model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The current ways of working provide a number of challenges for Travelics. The
    biggest is that they are not agile enough in how they deliver their applications.
    Releases only happen twice a year; this often results in failures at deployment
    and rollback of the application while the issues are resolved. This outage can
    often be around four hours.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another issue is the quality of code: developers are highly skilled but there
    is a general lack of review and oversight of each other''s work. This leads to
    bugs, and the engineering teams have a large list of technical debt that needs
    addressing.'
  prefs: []
  type: TYPE_NORMAL
- en: The lack of scalability and cloud-native approach is also limiting. This provides
    serious operational challenges and results in different configuration approaches
    for different customers; versions of the application are not consistent across
    all customers and some customers also have unsupported versions deployed as they
    are unwilling to allow the company to upgrade them over the fear of outages.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding of DevOps varies throughout the engineering organization, and
    outside of engineering, not many employees may understand DevOps. Pockets of people
    understand what DevOps is, but there is general hesitancy to move toward a different
    model.
  prefs: []
  type: TYPE_NORMAL
- en: Goals for the future
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A driving factor for change is the introduction of a new organization providing
    similar services. This disruptor is much smaller but is able to deliver new features
    quickly and runs a completely "software as a service" solution. Travelics has
    lost three large customers already to this competitor. They believe that with
    changes, they can address these problems and compete once again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Travelics has the following goals for their DevOps transformation:'
  prefs: []
  type: TYPE_NORMAL
- en: Clear vision for the development of the products
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Agility that allows teams to work independently but share practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Focus on faster releases and increased quality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increase customer satisfaction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Realize new features more quickly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduce the amount of failures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Move to a more modern platform capable of scaling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In summary, our DevOps transformation for Travelics needs to look at the organization
    from top to bottom. This includes how the teams are structured as well as how
    they operate. These changes will be fundamental to how Travelics works and, if
    successful, will make a big difference to the way they operate.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now begin the DevOps transformation journey for Travelics.
  prefs: []
  type: TYPE_NORMAL
- en: Walk-through of DevOps transformation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we understand the outline of the Travelics organization, as well as their
    current situation and aspirations and goals for the future. We can start engaging
    with them on making their goals a reality.
  prefs: []
  type: TYPE_NORMAL
- en: 'A number of steps exist for a successful transformation; it''s a long process.
    The complexities involved in transforming large enterprises necessitate buy-in
    at the highest level to make this successful and implement the changes that are
    required. The steps you would look to take for a transformation would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Have initial planning workshops.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Establish a DevOps Center of Excellence.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set up governance of the transformation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Establish an intake process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identify and initiate pilots.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assess current capabilities.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Perform transformation exercises.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scale out the DevOps transformation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's look at these steps in more detail and discuss the specifics we need
    to do with Travelics to achieve their goals.
  prefs: []
  type: TYPE_NORMAL
- en: Having initial planning workshops
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Participants must include all of the towers that comprise the solution delivery.
    Along with operations, security, and development, business participation is required.
    I always recommend that the workshops in this step be led by an experienced external
    consultant or coach. The key here is to gain executive support and to establish
    common goals and understanding of what a DevOps program will entail:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.1 â€“ Diagram showing the inputs and outputs of your initial planning'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_12_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.1 â€“ Diagram showing the inputs and outputs of your initial planning
  prefs: []
  type: TYPE_NORMAL
- en: For Travelics, the initial planning is really important. Remember we said that
    other than a few pockets of people, many people do not understand DevOps, and
    with this comes some hesitancy to move to a new way of working.
  prefs: []
  type: TYPE_NORMAL
- en: Typically, several small DevOps programs exist in silos and lack the maturity
    to scale to the enterprise level. Design thinking is an excellent method to employ
    because it capitalizes on the expertise of all stakeholders, enables them to reach
    a common understanding, and establishes the necessary buy-in.
  prefs: []
  type: TYPE_NORMAL
- en: Now we will look at the elements needed to build a DevOps center of excellence,
    which is a critical step in the adoption of DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: Establishing a DevOps Center of Excellence
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating a **Center of Excellence** (**CoE**) is inadequate if it is not at
    the appropriate organizational level and enterprise authority. It must be led
    by a business leader who has the support and buy-in of all towers. Representatives
    from all delivery towers, as well as vendor organizations, are active participants
    in the CoE. These participants must be chosen with caution.
  prefs: []
  type: TYPE_NORMAL
- en: Building on the diagram in *Figure 12.1*, we can now add several other elements
    to it as we define the stakeholders needed and more tightly define the outputs.
  prefs: []
  type: TYPE_NORMAL
- en: You should note the timeline is pointing down in the diagram; this means starting
    your conversations at the top. For the transformational challenges faced by Travelics,
    my recommendation would be having either the CEO or COO be responsible from a
    sponsorship perspective in the transformation.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Although the timeline is top down, there is nothing wrong with gaining sponsorship
    from the bottom up as well. This is just a formal way of establishing a formal
    CoE.
  prefs: []
  type: TYPE_NORMAL
- en: Starting from day one of the transformation, executives from the software engineering
    teams and senior leaders from operations, development, and even the CTO or CIO
    should be involved in those early discussions.
  prefs: []
  type: TYPE_NORMAL
- en: The output of this stage is to establish a common mindset for the DevOps transformation.
    This will be establishing common goals, objectives, and priorities for the work
    that needs to be done.
  prefs: []
  type: TYPE_NORMAL
- en: 'Around three to five days into the process, our discussion needs to evolve
    to a further level of detail and include the program owner, who is also a sponsor
    of the project. This needs to include representatives from the following areas:'
  prefs: []
  type: TYPE_NORMAL
- en: Application owners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solution architects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Development leads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operations leads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Over the next two weeks, workshops take place with Travelics to perform value
    stream mapping of the software development life cycle. The goal of this is to
    further understand in detail the current state of the organization, development
    state, detailed delivery processes, and any key performance indicators currently
    attributed to performance.
  prefs: []
  type: TYPE_NORMAL
- en: These workshops at this stage also look to expand out of areas that are to be
    prioritized from an impact perspective. Given the needs described about Travelics,
    which do you think is a priority area for them?
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Travelics are losing customers and experiencing issues due to quality. This
    dictates that an immediate area for improvement is customer satisfaction and the
    quality of releases.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, somewhere around 20 days into the initial planning process, the same
    group of people as before come back around the table to look at a deep dive into
    how engineering will look at the end of the process.
  prefs: []
  type: TYPE_NORMAL
- en: Taking into account everything that we know about Travelics and their high-level
    goals and ambitions, this should drive these workshops forward and help provide
    the detail needed to form a plan and direction of travel.
  prefs: []
  type: TYPE_NORMAL
- en: The expected outputs from these final planning workshops would expect to produce
    future state mapping and reference architecture for DevOps. At this point, we
    should have at least a draft of an implementation roadmap with high-level targets
    introduced.
  prefs: []
  type: TYPE_NORMAL
- en: One thing that is clear at this stage is that the current team structure is
    not fit for purpose and does not align with the goals of Travelics. Therefore,
    outputs also include the proposed structure for the teams going forward as well
    as defining any roles and responsibilities.
  prefs: []
  type: TYPE_NORMAL
- en: The final part of this section includes creating a business case for moving
    forward with the transformation and an executive summary of what the proposal
    contains.
  prefs: []
  type: TYPE_NORMAL
- en: I strongly advise that the initial phases of the CoE be led by an external experienced
    partner and then transitioned over time. The initial phases aid in the consolidation
    of the CoE's vision and strategies, as well as the establishment of best practices
    to support them. Typically, it takes 12 to 24 months to transition from business
    partner to internal stakeholders.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up governance of the transformation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the most important step in changing the organization's culture. The
    roles and responsibilities of practitioners will change as a result of Agile and
    DevOps. To succeed, they will require awareness, enablement, and empowerment.
    It is critical that they understand the collaboration between organizations that
    have historically had animosity between them in order to break down these organizational
    walls. KPIs must shift away from individual metrics and toward overall customer
    business outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Establishing governance is not as hard as it is made to sound. Your program
    governance consists of three main things: communication plans, an enablement program,
    and established KPIs.'
  prefs: []
  type: TYPE_NORMAL
- en: Your communication plan involves frequently publicizing your program objectives,
    milestones, and successes. From an enablement perspective, this needs to be looking
    at Agile fundamentals for your business leaders, so they understand the critical
    elements. Enablement also includes starting to look at platform and toolchain
    education for those teams as well as deeper training on DevOps approaches such
    as continuous integration, continuous deployment, continuous testing, and continuous
    feedback and improvement.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, your KPIs must come from solid key metrics, a good strategy to measure,
    and a frequent and detailed reporting cadence as well as milestones for the transformation.
  prefs: []
  type: TYPE_NORMAL
- en: Establishing an intake process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first sprint that onboards the program sets the tone for the rest of the
    sprints. It is not so much a matter of tools and processes as it is of the proper
    sizing of tools and processes. The selection of accelerators, tool chains, and
    development methods must be fit for purpose. Once established, the intake process
    must be communicated throughout the organization. Collect feedback and evolve
    and mature on a continuous basis.
  prefs: []
  type: TYPE_NORMAL
- en: Reusable assets are key to having an effective intake process. Architectural
    patterns, automation scripts, operational cookbooks, and infrastructure assets
    are all critical assets that can be defined and agreed once and reused in multiple
    different scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: The success of sprints comes down to best practices. These best practices help
    enforce consistency and help provide repeatable results across not only pilot
    teams but also for when the transformation is scaled up. Ensuring you have defined
    practices for trunk-based development patterns, branching and merging strategies
    for your source control, and test automation patterns and processes around test-driven
    development as well as continuous integration are keys to success at this stage.
  prefs: []
  type: TYPE_NORMAL
- en: Identifying and initiating pilots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When applied to a specific portfolio of applications or a domain solution, this
    step has the best chance of success. Prior to this workshop, I strongly advise
    opening some working sessions to identify an area of development work that represents
    a portfolio to scale to the enterprise.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this step is to conduct a value stream mapping exercise with participants
    from all towers for a specific application. This must be done in sufficient detail
    to identify the current end-to-end process, tooling, manual and automated processes,
    as well as the skills and people involved.
  prefs: []
  type: TYPE_NORMAL
- en: The collaboration of **subject matter experts** (**SMEs**) from the CoE with
    the project team is the next step in the project intake process. The goal is to
    provide advice on the "to-be" process, including the necessary tooling, reusable
    assets, automation, and SMEs from operations, security, and other relevant areas.
    The application Scrum team will be made up of these SMEs. Identified KPIs for
    the program are captured as the application goes through its development/test
    cycle. This is absolutely required for comparison with existing KPIs.
  prefs: []
  type: TYPE_NORMAL
- en: Assessment of current capabilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Understanding the pockets of DevOps that exist in your organization is really
    important. Some of those pockets may be more mature than you realize, and you
    may be able to take some of the good practices already in place and use them in
    other parts of your transformation.
  prefs: []
  type: TYPE_NORMAL
- en: These assessments can be done in a number of ways, but it needs to be something
    that is repeatable, as you will need to reuse these assessments throughout your
    transformation in order to check your progress and realign if needed. Assessments
    need to be broad and detailed.
  prefs: []
  type: TYPE_NORMAL
- en: Over time, the ambition should be to run assessments with the team, have them
    score each question using a set of cards, and discuss the scores among the team
    to agree on actions for improvement.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the best assessments I have found is one from Marc Hornbeek who is the
    founder of *Engineering DevOps* (https://img1.wsimg.com/blobby/go/1c453e6b-8ce5-4e3d-a110-bba77def37c3/downloads/DevOps%20Practices%20Maturity%20Assessment%20v2.xlsx?ver=1619731527627).
    This assessment is comprehensive and free to use. It covers in detail the nine
    pillars of a DevOps practice, which include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Collaborative culture practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous security practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous monitoring practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design for DevOps practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous delivery practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elastic infrastructure practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous testing practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous integration practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collaborative leadership practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These comprehensive questions give a rounded view of performance. Using the
    same assessment provides you with a clear view of improvement in performance over
    time and something you can look back on to track over time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.2 â€“ Example output from a maturity assessment'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_12_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.2 â€“ Example output from a maturity assessment
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see from the preceding diagram, the output provides us with a comprehensive
    snapshot. Each question has the ability to set the importance of that question
    to your organization and assess your current score. The top bar in the group indicates
    your maturity score in this area:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.3 â€“ Example detailed output from maturity assessment'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_12_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.3 â€“ Example detailed output from maturity assessment
  prefs: []
  type: TYPE_NORMAL
- en: The output also provides a per pillar view of your maturity. This gives you
    an idea of the priority areas by calculating the level of importance against the
    current score, meaning the lowest score becomes the highest area for improvement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Periodically, we should also look at performing more detailed assessments as
    well. This change-up asks different questions and challenges in certain other
    focus areas. The more detailed assessment looks at the following areas:'
  prefs: []
  type: TYPE_NORMAL
- en: DevOps training practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps governance practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps value stream management practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps application performance monitoring practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps SRE practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps service catalog practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps application release automation practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps multi-cloud practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps Infrastructure as Code practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps hybrid cloud practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps version management practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This highly detailed assessment takes a while to run. When running this with
    teams previously, I would set aside a morning to complete the discussions and
    include time for breaks to keep people fresh.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a similar way to the nine-pillar output, the output from the detailed assessment
    is the same in providing a sample chart documenting maturity and a table overview
    looking at highlighting areas of priority focus:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.4 â€“ Example output from the detailed maturity assessment'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_12_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.4 â€“ Example output from the detailed maturity assessment
  prefs: []
  type: TYPE_NORMAL
- en: Other assessments for specific roles are also available at the *Engineering
    DevOps* ([https://engineeringdevops.com/documents#bf990569-1a3f-4eb4-bb3b-73073abf8a31](https://engineeringdevops.com/documents#bf990569-1a3f-4eb4-bb3b-73073abf8a31))
    website. These are incredibly useful resources to assist with your transformation
    and improvement journeys.
  prefs: []
  type: TYPE_NORMAL
- en: Performing transformation exercises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Performing the action tasks that need to be executed to move the transformation
    forward obviously depends on the output of the planning workshops. Looking back
    at our example of Travelics, let's now look at some tasks we would do to aid with
    their DevOps transformation.
  prefs: []
  type: TYPE_NORMAL
- en: The Chocolate, LEGO, and Scrum game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Agile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transforming to Agile working
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reorganizing the team structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looking at process improvement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing DevOps practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting on the feedback loop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's now look at these areas specifically to look at how we would help Travelics
    achieve their goals.
  prefs: []
  type: TYPE_NORMAL
- en: Chocolate, LEGO, and Scrum game
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The initial workshops provide an opportunity to level set on DevOps with a wider
    audience and to gain trust with the people you are working with. Consider using
    a simulation workshop rather than running through slides to promote the benefits
    of DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: In order to do this, I would consider the *Chocolate, LEGO, and Scrum* game
    by Dana Pylayeva (https://www.slideshare.net/danapylayeva/introduction-to-devops-with-lego-and-choco).
    The simulation game provides participants with the opportunity to hear the same
    real-world struggles they face and then act out scenarios that remove these blockers
    so they can see the results of removing them.
  prefs: []
  type: TYPE_NORMAL
- en: This is a powerful exercise that, in my experience, is more powerful than a
    simple slide deck explaining the benefits of DevOps. The aim of the game is for
    people to sit in groups, then using a set of role cards that determine the specific
    activities, people can run through time-boxed exercises we call sprints.
  prefs: []
  type: TYPE_NORMAL
- en: The aim is to sell LEGO animals on the marketplace and produce as many as you
    can that meet the requirements stated. As each sprint begins, roles change and
    blockers are removed, improving the chances of delivering more.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Agile
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this session, aimed at operations teams within Travelics, we are directly
    appealing to people who are generally more swayed against Agile. Development teams,
    in my experience, are more likely to be comfortable with Agile working. The principles
    are born out of software engineering; that does not mean that you cannot work
    with operations teams, though.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is a common misconception that operations teams cannot operate in an Agile
    manner. In my opinion and experience, this is simply not true. I will shortly
    explain why and how we can address some of the common concerns of operations teams
    who are working to Agile methods. We start by asking three simple questions (and
    each attendee has a stack of sticky notes):'
  prefs: []
  type: TYPE_NORMAL
- en: Why is it worth doing?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How is it difficult?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Agile?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each attendee is then given around five minutes to write down answers and put
    them under the appropriate heading. Then we head to a discussion with the team,
    talk about the notes they have written down, and try and get an open conversation
    going. When appropriate, anyone running the workshop can then use experience in
    this field to provide examples to back up or counter the discussion.
  prefs: []
  type: TYPE_NORMAL
- en: If possible, invite someone from a team that is already on an Agile transformation
    or already practices some of the qualities we are trying to highlight. Look to
    invite someone this team trusts; they will value their opinion more than yours
    at this stage. Luckily, we have someone at Travelics who matches this profile.
    They had difficulty closing work down after development and an element of their
    work was ticket-based. For this reason, our CoE asked for someone from the other
    team to come in and join the discussion.
  prefs: []
  type: TYPE_NORMAL
- en: This worked well for several reasons, mainly because the team we were delivering
    the workshop to had someone from another team who was going through this transformation
    and could attest to the things we were saying. Mostly, this individual could attest
    that this process works and it's worth paying more than just lip service to.
  prefs: []
  type: TYPE_NORMAL
- en: Transformation to Agile working
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The plan to transform the team comes in three steps. Individually, the steps
    are small, but together they form the journey:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduce daily standups.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Introduce work management such as stories and introduce Scrumban.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Introduce planning, sprints, and retrospectives.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'During the initial workshop with Travelics, we held the team''s first ever
    standup. The concept of the daily standup is aimed at answering three things:'
  prefs: []
  type: TYPE_NORMAL
- en: What did I work on yesterday?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What am I working on today?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What issues are blocking me?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In sport, a huddle is strategic, keeping everyone informed and connected throughout
    the game. For technology teams, the standup is a huddle; it's designed to enforce
    the *we* and *one team* culture and mentality.
  prefs: []
  type: TYPE_NORMAL
- en: Highlighting issues to the team often results in someone else in the team helping
    unblock them. Your standup should be no longer than 15 minutes. Don't go into
    the minute details of your day. Keep it at a high level and keep it relevant.
    Highlight issues, but don't discuss them in detail.
  prefs: []
  type: TYPE_NORMAL
- en: The next day, someone from the CoE team attended the second daily standup this
    team ran. They only started the day before and it took around five minutes to
    complete. Everyone kept it simple, highlighting what they worked on and what they
    were working on. Blockers were discussed at a high level and agreement was taken
    to move the conversation offline. So, from a session the week before, in less
    than 30 minutes of meeting time, this team were already starting to get in sync
    with each other more than they were before.
  prefs: []
  type: TYPE_NORMAL
- en: By now, we are already a little into this piece of work and one of the most
    important aspects of Agile is the introduction of retrospectives. Most teams,
    in fact, regardless of their Agile working status, already do some kind of retrospective,
    usually a team meeting. A retrospective or retro just focuses the mind on the
    last sprint. We ask different questions depending on the type of retro the Scrum
    master is running. You can get a number of different types of retros to run, such
    as 4 Ls, speedcar, starfish, and many others.
  prefs: []
  type: TYPE_NORMAL
- en: 'The 4 Ls retrospective involves asking participants to add up cards under four
    headings: Liked, Learned, Lacked, and Longed For. This asks the team to discuss
    and highlight the positives and negatives.'
  prefs: []
  type: TYPE_NORMAL
- en: The speedcar retrospective, similar to the following example, is about highlighting
    the things that made the team move faster and things that slowed them down.
  prefs: []
  type: TYPE_NORMAL
- en: The starfish retrospective, like the 4 Ls, asks the team to focus on what the
    team should do less or more, or start, stop, or keep doing. The principle is to
    foster thinking around the value the team gets from different practices in the
    team. The starfish retrospective is an important one when working in continuous
    feedback loops.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the first retrospective, the CoE team decided to run one of the most basic
    ones out there; this was the sailboat retro. In this, we draw a sailboat, add
    an anchor, and ask the team to place things that made the team go faster near
    the sail and things that dragged the team down near the anchor, as you can see
    in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.5 â€“ Example drawing showing the concept of a sailboat retrospective'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_12_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.5 â€“ Example drawing showing the concept of a sailboat retrospective
  prefs: []
  type: TYPE_NORMAL
- en: This exercise is really simple and the feedback from the team was that they
    enjoyed the daily standups; they also enjoyed finding out more about what others
    in the team were up to and the Kanban style of working for visually highlighting
    where work is.
  prefs: []
  type: TYPE_NORMAL
- en: Things that did not work for the team were the additional meeting time, as well
    as a feeling that sometimes the standups went on for too long and that the value
    was maybe not as high as they expected.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: While we are quite statistics-heavy in Agile, you can progress well and teach
    people the required skills and ways of working and see improvements without the
    need for a heavy focus on statistics. Improvements in metrics will come in time.
  prefs: []
  type: TYPE_NORMAL
- en: It sounds crude, but propaganda is important when you are fundamentally changing
    how organizations work. Consider placing posters around the office environment
    and posting them out on communications channels. You can use the free posters
    from *Dandy People* (https://dandypeople.com/posters) as tools to aid in the messaging.
  prefs: []
  type: TYPE_NORMAL
- en: Reorganizing the team structure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Through our discussions with Travelics and our understanding of their goals,
    it's clear that their current team structure will not work. One of the fundamental
    changes is moving to a product-oriented view, away from a project view.
  prefs: []
  type: TYPE_NORMAL
- en: 'The product view enables us to bring in product management roles to help manage
    and prioritize feedback as well as helping us to use market intelligence to drive
    the team''s decision-making on what is a priority over something else:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.6 â€“ Diagram of the Spotify model for scaling Agile'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17192_12_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.6 â€“ Diagram of the Spotify model for scaling Agile
  prefs: []
  type: TYPE_NORMAL
- en: Next is the desire to bring people closer together through collaboration and
    have the ability to scale these teams. One suitable approach to this challenge
    at Travelics could be the use of the *Spotify model* (https://www.atlassian.com/agile/agile-at-scale/spotify).
    This introduces the use of terms such as **squads**, **tribes**, **chapters**,
    and **guilds**.
  prefs: []
  type: TYPE_NORMAL
- en: Squads
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In layman's terms, a squad is a group of developers. In many ways, a squad is
    similar to a Scrum team in that it is intended to feel like a small start-up.
    These teams will typically sit together and have all of the necessary skills and
    tooling to design, develop, test, and release to production. Squads will decide
    how they want to work, which means that some will use Scrum sprints, others will
    use Kanban, and still others will use a combination known as Scrumban.
  prefs: []
  type: TYPE_NORMAL
- en: Every squad has a specific goal, such as developing a specific feature of an
    application, managing the public website, writing the mobile application, or something
    else. Different squads could even be in charge of different aspects of the user
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: Squads are also encouraged to use principles such as **minimum viable product**
    (**MVP**), which means releasing early and frequently. I recall a quote from the
    first article I read about this topic by *Arthur von Kriegenbergh* ([https://medium.com/agile-series/agile-series-how-we-work-think-it-build-it-ship-it-tweak-it-afrogleap-1afb080dedab](https://medium.com/agile-series/agile-series-how-we-work-think-it-build-it-ship-it-tweak-it-afrogleap-1afb080dedab))
    that used the slogan *Think it, build it, ship it, tweak it*. Because each squad
    is laser-focused on one mission and one component of the product for such an extended
    period of time, they develop into key experts.
  prefs: []
  type: TYPE_NORMAL
- en: Tribes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Tribes are collections of squads, and these tribes are all squads that work
    on related parts of the product. For example, in the Spotify case, all of our
    squads could be in a tribe for the desktop application, desktop UI, or something
    else; you get the idea. Each tribe also has a tribe leader, who is responsible
    for ensuring that the tribe has everything the squads require. All squads within
    a tribe should ideally sit in the same physical location, if possible. Communal
    areas should also encourage levels of collaboration between squads.
  prefs: []
  type: TYPE_NORMAL
- en: Have you ever heard of *Dunbar's Number*? Tribes should be sized according to
    this theory in an ideal world. According to this, most people are unable to maintain
    social relationships with more than about 100 people. When the group size exceeds
    this number, restrictive rules, politics, and additional layers of management
    add bureaucracy and other areas of inefficiencies. As a result, tribes should
    be designed to have fewer than 100 members.
  prefs: []
  type: TYPE_NORMAL
- en: The loss of economies is one of the challenges associated with scalability and
    a high degree of autonomy. For example, a developer in one squad may be working
    on a problem that was solved by a developer in another squad the previous week.
    This is precisely what chapters and guilds are designed to address.
  prefs: []
  type: TYPE_NORMAL
- en: Chapters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Chapters, like guilds, serve as the glue that holds the company together. After
    all, with such high levels of autonomy and no communication between squads and
    tribes, your company might as well be divided into many small ones. Chapters and
    guilds allow you to benefit from economies of scale without giving up too much
    autonomy.
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, a chapter is a small group of people with similar skills who
    work in the same general area or within the same tribe. This means that developers,
    testers, security professionals, and any other role can really benefit from other
    people with similar skills who are also working in the same tribe; this glue means
    that within a chapter, you have deep expertise within your domain and can share
    skills and draw on others who understand the domain you are working in.
  prefs: []
  type: TYPE_NORMAL
- en: Guilds
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Guilds are more akin to community organizations. A guild is a group of people
    who want to share their knowledge, tools, code, and practices. A guild is spread
    across the entire organization, whereas a chapter is local to a tribe. You can
    have as many guilds as you want in your organization; for example, consider the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Testing guild
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud technology guild
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scrum guild
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Agile coaching guild
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Doesn't this all sound like a matrix-style organization to you? It does, but
    not in the way you are accustomed to. People with similar skills are typically
    grouped together into functional teams and then assigned to projects, reporting
    to a manager of that team, who reports to a senior leader in that area. The matrix
    we've created and are working in here is geared toward delivery.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider it in two dimensions: the horizontal dimension is for sharing knowledge,
    tools, and code, and the vertical dimension is for sharing code. The vertical
    dimension is the most important, and it is where people collaborate and organize
    to create great products. This describes how people are physically arranged and
    where they spend the majority of their time. Consider the vertical dimension to
    be *what* and the horizontal dimension to be *how*. The matrix structure ensures
    that each squad member receives guidance on both *what to build next* and *how
    to build it well*.'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing DevOps practices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Getting the right practices while being backed up by the right metrics is now
    the focus for Travelics. Using the things we have learned throughout this chapter,
    we can put in place metrics.
  prefs: []
  type: TYPE_NORMAL
- en: So much about the metrics we discussed in [*Chapter 3*](B17192_03_Final_ASB_ePub.xhtml#_idTextAnchor071),
    *Measuring the Success of DevOps*, comes into focus here. Remember what we have
    learned about the goals of Travelics. In simple terms, they want to improve quality,
    increase velocity, and reduce the failure rate or increase stability.
  prefs: []
  type: TYPE_NORMAL
- en: 'All of the metrics we discussed fall into those three categories. Here are
    some metrics that we can propose to help Travelics start to measure their performance
    going forward as they start to implement DevOps practices:'
  prefs: []
  type: TYPE_NORMAL
- en: Lead time â€“ Travelics have a desire to improve their time to market. This metric
    helps them understand the amount of time it takes to take ideas from inception
    on the backlog to completion. Our target for this metric is 60 days; over time,
    this should be reduced as maturity increases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deployment failure rate â€“ Remember the complaints from customers about out-of-date
    software and new releases causing downtime? Well, this metric will help directly
    track that issue and in time, focused effort on pipelines, quality of code, and
    more incremental releases can help. Our target for this metric is 1%.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit test coverage â€“ Improving testing is a good way to improve quality, and
    introducing quality gates in releases around test coverage and test passes is
    key to increasing quality. Our target for this metric is 95%.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defect aging â€“ Travelics also have a problem with high amounts of technical
    debt. Putting a metric around the age of defects is really key to getting that
    number down, as well as introducing technical sprints to address that technical
    debt. Our target for this metrics is 7 days.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mean time to recovery** (**MTTR**) â€“ To address the issue with outages, measuring
    the MTTR will place specific emphasis on the recovery time and improving that.
    It helps also drive levels of automated recovery within the teams and helps focus
    on missing elements that contribute to further downtime.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incidents per deployment â€“ The last metric that will help Travelics is one that
    looks at the number of support incidents generated per deployment. This helps
    to track the satisfaction of customers in line with the release strategy as well
    as helping to determine further improvements that can be made.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is also the phase at which you introduce tooling to help determine the
    direction of travel for process automation. When you have a baseline of metrics,
    introducing tooling helps you further identify areas where you can improve.
  prefs: []
  type: TYPE_NORMAL
- en: Getting on the feedback loop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finally, at this point, your established continuous improvement and feedback
    loops should kick into gear more rigorously and work to evolve what the transformation
    team have created, putting the organization on the way to wider success.
  prefs: []
  type: TYPE_NORMAL
- en: During a transformation process, you learn a large amount about the organization,
    the processes it uses, and the people within it. All of these learnings are critical
    to feedback on the continued investment in DevOps and the continued success of
    Travelics.
  prefs: []
  type: TYPE_NORMAL
- en: Scaling out the DevOps transformation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The penultimate step is to take feedback from pilot metrics and scale them by
    running multiple release trains from various application portfolios. It is insufficient
    to simply perform daily builds and automated deployments. Continuous feedback
    and optimization are the final pieces of the DevOps puzzle.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that I mentioned that this is the penultimate step. Actually, you should
    never finish; just because you have negotiated transformation does not mean you
    are finished. This is an opportunity to take what you have learned from your pilot
    groups and give feedback to sponsors, product owners, and stakeholders.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have provided a summary of the key learning from the book
    and have looked at specific implementation guidance for a fictional travel company.
    This advice has helped drive Travelics in the right direction and they are now,
    after a period of 18 months, hitting consistent metric targets and looking to
    further improve what the CoE has developed within the organization.
  prefs: []
  type: TYPE_NORMAL
- en: As the chapter and indeed the book draws to a close, I would like to thank you
    for coming on the DevOps transformation journey with me. I hope that you have
    found the book informative and can take things we have learned together into your
    organizations to drive change.
  prefs: []
  type: TYPE_NORMAL
