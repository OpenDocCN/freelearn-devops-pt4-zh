- en: 2\. Introducing DevOps and Some Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What Does It Mean to Be DevOps in a Container World? People have different perceptions
    about DevOps, what it means, and how it works.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to explain our view on DevOps and the bottlenecks
    and challenges that DevOps focuses on addressing. We will introduce the idea of
    a value chain in software product delivery and how we can use different techniques
    from lean, agile, and DevOps communities to optimize and speed up the value chain.
  prefs: []
  type: TYPE_NORMAL
- en: We will also introduce some tools, such as the Mobius Loop and the Open Practice
    Library that we will use to navigate our way through the many practices utilized
    in the rest of the book.
  prefs: []
  type: TYPE_NORMAL
- en: '**DevOps** is a bit of a buzzword at the moment! It seems that for every decade
    in technology, there is a new buzzword associated with it.'
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the 2010s, Agile was that buzzword—*This is going to be an Agile
    project*, or *We're going to use Agile to deliver this*, or *We're going to use
    the Agile methodology* were common phrases that many of us have heard. It was
    (and still is) often used incorrectly about delivering software faster. In fact,
    Agile is focused more around delivering business value earlier and more frequently
    and driving a culture of continuous learning. Agile has now officially grown up—it
    had its 18th birthday in February 2019\. Even after all this time, we still love
    to use the values and principles of the Agile Manifesto[1](#footnote-006) created
    back in 2001.
  prefs: []
  type: TYPE_NORMAL
- en: Containers is another buzzword these days. We see it being used by individuals
    without them necessarily understanding the full meaning of what a container is
    and why people, teams, and organizations would benefit by utilizing them.
  prefs: []
  type: TYPE_NORMAL
- en: So, with this book being about DevOps and OpenShift (a container management
    platform), we're going to de-buzzify these terms and talk about very practical,
    real world experience and examples of the real value behind DevOps and OpenShift
    containers.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look back in time and see where we believe these phenomena came
    from.
  prefs: []
  type: TYPE_NORMAL
- en: We all have worked in IT for a number of decades (some more decades than others!).
    While chatting over a beer and looking back at our experiences of delivering IT
    projects, we recognized some common characteristics in all our IT projects that
    have been constant. We also identified a set of gaps in the value chain of delivering
    IT projects that, for us, seemed to slow things down.
  prefs: []
  type: TYPE_NORMAL
- en: The Value Chain
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Every project we''ve ever worked on has had some kind of end customer or user.
    Sometimes they have been external users, such as an online shopper wanting to
    use their mobile app to buy the latest set of Justin Bieber bedsheets! Other times,
    they have been teams internal to an organization, such as an operations team or
    a particular department within a company. One common denominator we all agree
    on is that the objective of our work was always having smiley, happy customers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.1: Happy customers — The ultimate goal of organizations'
  prefs: []
  type: TYPE_NORMAL
- en: '[1](#footnote-006-backlink) [www.agilemanifesto.org](http://agilemanifesto.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: Between us, we have helped many organizations, from the public sector and finance
    to retail and charities. We've seen it all! As we reminisced, we discussed the
    end result of some of our projects; we thought about our why — there was almost
    always some kind of monetary value aspect associated with the reason for us being
    there. There were other motivations, too, such as increased customer satisfaction,
    reduced risk, and improved security and performance, but the bottom line is that
    an essential part of any of our commercial customers' business is to make money
    and reduce costs.
  prefs: []
  type: TYPE_NORMAL
- en: So, in the end, value was often linked to money in some shape or form. Three
    of us authors are Irish and the fourth is from New Zealand, so we felt it was
    appropriate to reflect this as a pot of gold!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.2: Profits — A common goal of every commercial organization'
  prefs: []
  type: TYPE_NORMAL
- en: 'The 1990 book *The Machine That Changed the World*, written by *James Womack,
    Daniel Jones, and Daniel Roos*, first introduced the term **value stream**. The
    idea was further popularized by the book *Lean Thinking*, written by the same
    authors. According to them, the value stream is the sequence of activities an
    organization undertakes to deliver on a customer request. More broadly, a value
    stream is the sequence of activities required to design, produce, and deliver
    a good or service to a customer, and it includes the dual flows of information
    and material. Most value streams are highly cross-functional: the transformation
    of a customer request to a good or service flows through many functional departments
    or work teams within the organization:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.3: Customers dreaming of the pot of gold'
  prefs: []
  type: TYPE_NORMAL
- en: Let's visualize this as our customers dreaming of that pot of gold. They're
    constantly thinking about how they can get the most out of their products or ideas
    to generate the most gold. So, how do they go about doing this?
  prefs: []
  type: TYPE_NORMAL
- en: The Gaps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're going to explore the gaps in the value chain between customers and organization's
    business people, between business people and development people, and between development
    people and operations people.
  prefs: []
  type: TYPE_NORMAL
- en: The Big List of Things to Do
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first gap in the software development process that we consistently saw
    was the process of collecting information from end customers and forming a list
    of customer requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.4: Understanding and collecting customer requirements'
  prefs: []
  type: TYPE_NORMAL
- en: Our early projects often involved long phases of business analysts documenting
    every possible requirement they could conceivably think of into epic volumes of
    business requirements — documents. The goal was to pre-empt every conceivable
    customer journey or scenario and to cover all the bases by building specifications
    that included every possible eventuality. Sounds rigid, right? What if we made
    an incorrect assumption?
  prefs: []
  type: TYPE_NORMAL
- en: Demonstrating Value and Building the Right Thing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The second gap revolved around demonstrating value to customers. Usually, the
    **project** being undertaken was set up to include all of the features and ideas
    needed so that they could be released together. Once the project was in production,
    it would only have a small operations budget to support minor enhancements and
    problem resolution. Sounds like it might take a long time to get the application
    into the end users' hands, right?
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two reasons we call these *gaps*. First, the process was lengthy
    — months, sometimes years, would elapse between starting a project and signing
    off on the requirements. Second, trying to collect every possible requirement
    before delivering anything would mean no real benefit to the end customer for
    years and often, the wrong functionality was built and delivered to an unhappy
    customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.5: Using human-centered practices to understand customer needs'
  prefs: []
  type: TYPE_NORMAL
- en: This gap of *not building the right thing* has been plugged in recent years
    by the emergence of human-centered design and design thinking. These are a set
    of practices that put the end user at the center of capturing the needs and requirements
    of a product.
  prefs: []
  type: TYPE_NORMAL
- en: 'We gather the information by talking directly to users and forming greater
    *empathy*[2](#footnote-005) with them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.6: Merriam-Webster definition of ''empathy'''
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we'll explore how techniques such as impact mapping, event storming,
    and human-centered design can aid the software development process. We'll also
    explore other practices to help us define solutions and features and crucially
    ensure that the solution is connected to business value. We'll show how the act
    of coupling research activities such as user interface prototypes and technical
    spikes with experimentation inform product backlogs that are well prioritized
    according to delivered business value. We will show you how using just enough
    information can lead to a better-understood product.
  prefs: []
  type: TYPE_NORMAL
- en: How Do We Do the Things on Our List?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's consider the second gap in delivering value to users. This gap focuses
    on moving from a shopping list of TODO items into working software.
  prefs: []
  type: TYPE_NORMAL
- en: The traditional approach is to sign off and confirm a finite set of requirements
    that have undergone the lengthy process of business analysis and capture. The
    scope of the project is locked down and a stringent change control process and
    governance is put in place for dealing with any deviation from the documented
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: '[2](#footnote-005-backlink) [https://www.merriam-webster.com/dictionary/empath](https://www.merriam-webster.com/dictionary/empath)'
  prefs: []
  type: TYPE_NORMAL
- en: A team of software designers and architects then gets to work, producing a **high-level
    design** (**HLD**) that will deliver a solution or set of solutions according
    to the business requirements specified. These requirements also go through a formal
    review process by key project stakeholders and, once signed off, become the reference
    source for the solution scope.
  prefs: []
  type: TYPE_NORMAL
- en: 'Often, different design documents are written in the next phase - detail design
    documents, program specifications, data designs, logical architecture blueprints,
    physical architecture solutions, and many more. Each of these is written to support
    a defined, dated, and signed-off version of the HLD, which itself, is signed off
    against a defined set of business requirement specifications:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.7: Traditional application development lifecycle'
  prefs: []
  type: TYPE_NORMAL
- en: Any changes to the earlier documents have direct time and cost implications
    for reassessing and updating each of the following design documents. Software
    development teams may have been involved in the production or review of some of
    these documents. However, they are often encouraged not to start any coding or
    development activities until these designs have been locked down. Some organizations
    reduce project costs by not onboarding development teams until this stage. Development
    is often siloed by function and unaware of the big picture with limited automated
    testing.
  prefs: []
  type: TYPE_NORMAL
- en: At a predefined point in the project plan, all developers are expected to have
    delivered their coded components to a testing environment. Perhaps each developer
    manually builds and deploys their own code to the testing environment. Some larger
    programs seek economies of scale by setting up build infrastructure teams who
    do this on behalf of all developers. Once all components had been delivered, a
    separate team of testers starts executing the hundreds of test scripts they had
    been writing in the preceding weeks and months to test the solution according
    to business requirements and HLD documentation. This is the first time some components
    are integrated and tested together. Of course, problems and bugs drive reworking
    by development teams and designers to fix such issues.
  prefs: []
  type: TYPE_NORMAL
- en: Just as there are different levels of design documentation, testing often undergoes
    different levels of testing, with one starting when the previous phase is completed.
    A test manager would sign off on a set of test results, signaling that the next
    level of testing could start. Testing would range from a set of component integration
    testing to wider system integration testing, security and penetration testing,
    performance testing, failover and operability testing, and finally, user acceptance
    testing!
  prefs: []
  type: TYPE_NORMAL
- en: The final stage before the big-bang go-live of a solution would often be user
    acceptance testing, involving a set of focus users and the test system. In many
    cases, it could often be months or years before this first user saw the implemented
    system. Once user acceptance of the solution was signed off, the green light was
    given to deploy to the production environment. Finally, with the software in the
    hands of real end users, business revenue could hopefully be generated from all
    this work.
  prefs: []
  type: TYPE_NORMAL
- en: 'You''re probably thinking that this process sounds long and drawn out — well
    in truth, it was! Many programs hit delays at different points along the way and
    what started out as a multi-month project plan ended up being years long. For
    the curious, there is even a list of some epic failures on Wikipedia: [https://en.wikipedia.org/wiki/List_of_failed_and_overbudget_custom_software_projects](https://en.wikipedia.org/wiki/List_of_failed_and_overbudget_custom_software_projects).'
  prefs: []
  type: TYPE_NORMAL
- en: Often, business conditions would change during the development period. New feature
    requests would be generated. During testing, gaps in the requirements would emerge
    that no one considered during the analysis and requirements capture. The market
    didn't stand still during development and competitor companies may have started
    to innovate quicker. The competition would even provide more feature requests,
    in a process akin to a feature comparison war.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, there was always some kind of change control procedure to handle
    new scope like this. In a complex program of work, the lead time to get features
    added to the work plan could range from months to years. In order to get something
    into production, program executives would simply say no to any more change and
    just focus on getting to the end of the project plan.
  prefs: []
  type: TYPE_NORMAL
- en: This meant that solutions finally delivered to production were somewhat underwhelming
    to users several years after the first requirements were discussed. Time and industry
    had moved on. The biggest frustration of these programs was that they were frequently
    delivered late, were over budget, and often delivered a solution that lacked user
    satisfaction or quality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stepping back a little, we had this huge gap of converting lists of features
    into a software deliverable. The process known as **Waterfall** due to the nature
    of separate phases of work flowing down to the next phase was associated with
    very lengthy times:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.8: Traditional deliverables with its drawbacks failed to achieve customer
    satisfaction'
  prefs: []
  type: TYPE_NORMAL
- en: Let's think about how we plug that second gap with more modern software development
    processes. How do modern developers manage to translate user needs into working
    software solutions much more quickly compared to previous ways of working?
  prefs: []
  type: TYPE_NORMAL
- en: 'The formation of the Agile movement in 2001, led by the 17 IT individuals who
    wrote the Agile Manifesto, has triggered alternative approaches and mindsets toward
    delivering software. Many of the individuals involved in writing the Agile Manifesto
    had been tackling many of the problems described by Waterfall development. Jeff
    Sutherland and Ken Shwaber had created the Scrum framework for software development,
    which included delivering small incremental releases of value much more frequently
    — they used the term **sprint**, which was a fixed timebox ranging from one to
    four weeks (usually being two weeks), during which a set of events and roles would
    work together such that big solutions could be delivered iteratively and incrementally.
    Kent Beck and Ron Jefferies led much of the **eXtreme Programming** (**XP**) movement,
    focusing on delivering faster releases of value and working on key practices that
    helped drive more efficiency into review, testing, and release processes, using
    better collaboration and increased automation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.9: Implementation of DevOps practices leading to faster delivery and
    better products'
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we'll show you different software delivery practices and how our
    experience using a mixture of different practices from Scrum, Kanban, XP, Lean,
    and some scaling frameworks helps deliver value quicker. All the underlying practices
    are simply tools to help close the gap between an idea or requirement being captured
    and it being delivered. This has been an area we have sought to continuously improve
    to a level where the gaps are minimized and we're working in a mode of continuous
    delivery.
  prefs: []
  type: TYPE_NORMAL
- en: Development to Operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is one more gap to plug in our efforts to optimize the software delivery
    process. The third gap is the one between development teams and operations teams.
  prefs: []
  type: TYPE_NORMAL
- en: In our Waterfall process, we had reached the point where the signed-off solution
    exited user acceptance testing and went through a big-bang go-live. So, what happened
    next?
  prefs: []
  type: TYPE_NORMAL
- en: Often, a whole new team responsible for maintenance and support would then pick
    up the solution. The people who work in this new team were not involved in any
    of the design, development, or testing, so additional time would be built into
    the project plan for knowledge transfer. The delivery team would write lengthy
    documentation in the hope that this would be a useful resource for future operations
    teams.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, the package of software would metaphorically be thrown over
    the wall from the army of developers to the group of operation engineers. The
    operations teams often had to learn about the software the hard way by investigating
    production incidents, addressing bugs that were not found previously, and handling
    new scenarios not considered during the requirement planning stage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.10: Aspiring to bring down the wall between development and operations
    teams'
  prefs: []
  type: TYPE_NORMAL
- en: To plug this gap, we must bring development and operations teams together. Tear
    down that wall and remove the silos! Bringing down the wall forms new teams that
    are focused on development and operations activities. These teams are collectively
    responsible for the whole solution and can design the solution according to each
    others' needs.
  prefs: []
  type: TYPE_NORMAL
- en: The term DevOps was coined by the idea that we no longer have siloed development
    and operations teams. In recent years, we've seen various other terms emerge from
    this idea, such as DevSecOps, BizDevOps, DesOps and even BizDesDevSecOps!
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**BizDesDevSecOps** is a bit of a mouthful, so we''re going to use the term
    **product team** to describe it throughout this book. It addresses the ultimate
    goal of plugging all gaps in the software development process and bringing down
    all the walls.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.11: Plugging the gaps in the software delivery process'
  prefs: []
  type: TYPE_NORMAL
- en: Note that we will not use the **DevOps team** term **DevOps team** — the idea
    of having a team or even an individual purely focused on DevOps runs counter to
    what the DevOps philosophy is all about — collaboration, cross-functionality,
    and the removal of silos. How many times have you seen ads on LinkedIn or other
    sites looking for DevOps engineers? The invention of the DevOps engineer or the
    DevOps team could be seen as creating just another silo.
  prefs: []
  type: TYPE_NORMAL
- en: People, Process, and Technology
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DevOps is really all about collaboration. It's about taking pride in, and ownership
    of, the solution you're building by bringing down walls and silos and by removing
    bottlenecks and obstacles. This speeds up the value stream connecting the customer's
    perceived need to the product delivery.
  prefs: []
  type: TYPE_NORMAL
- en: Technology alone will never solve all your business problems. No matter how
    good the platform or software product you are evaluating or being sold, unless
    your organization has learned to adopt the correct balance of people aspects,
    process changes, and technology adoption, the objectives will not be met.
  prefs: []
  type: TYPE_NORMAL
- en: 'This book is about finding the right combination of people, process, and technology
    changes needed to maximize business outcomes on a continuous basis. This requires
    changes in mindset and changes in behavior. This book will look at the behavioral
    change that we have seen be most effective with the hundreds of organizations
    we have collectively worked with. We''ve observed that such mindset and behavioral
    change is needed across all roles and that we need to break down the silos we
    see inside organizations, which, as we saw previously, is what drives the gaps
    and inefficiencies in software development:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.12: A healthy balance between people, process, and technology'
  prefs: []
  type: TYPE_NORMAL
- en: Everyone in an organization should care about people, process engineering, and
    technology in order to drive the desired outcomes. We want to break down the silos
    between these three pillars and bring them closer together. A reader who may be
    more interested and focused in one of these three things will get as much (if
    not more) value from learning about the other two things.
  prefs: []
  type: TYPE_NORMAL
- en: This means a hardcore software engineer or architect can pick up some great
    insights and guidance on why people, culture, and collaboration are equally important
    for their role.
  prefs: []
  type: TYPE_NORMAL
- en: Someone who has previously been an expert in project management methodologies
    and is now learning about more agile delivery practices such as Scrum can also
    use this book to learn about modern technology approaches such as GitOps, CI/CD,
    and serverless. They can learn why these are important to understand and appreciate
    so that they can articulate the business value such approaches bring to organizations.
  prefs: []
  type: TYPE_NORMAL
- en: A leader who is concerned about employee retention can learn how the mastery
    of these modern tech practices of iterative and incremental delivery strategies
    can maximize the opportunities for organizational success through the delivery
    of highly valuable products being used by happy customers.
  prefs: []
  type: TYPE_NORMAL
- en: The Mobius Loop and the Open Practice Library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this book, we're going to explore lots of different practices. We're going
    to explain what they are and why we use them. We're going to give you some guidance
    on how to use them. We're going to share some real-world examples of how we've
    used them and, where possible, we'll even show them in action. Using our Pet Battle
    case study (more on that later), we're going to bring them to life in a fun way
    and we'll share the best tips that we've picked up in the field.
  prefs: []
  type: TYPE_NORMAL
- en: A problem we hit a few years ago when working with our customers' new teams
    was explaining how and when you might want to use different practices and in what
    order. What practice should we start with? What practice links nicely to the output
    produced from a previous practice, and so on?
  prefs: []
  type: TYPE_NORMAL
- en: To help with this, we have made use of an open-source navigator tool called
    Mobius. This was created by Gabrielle Benefield and Ryan Shriver. There is a huge
    amount of great material, including a number of open-sourced canvases and artifacts,
    available at [www.mobiusloop.com](http://www.mobiusloop.com). Red Hat Open Innovation
    Labs makes use of this open-source material in all of its residencies and in its
    DevOps culture and practice enablement courses.[3](#footnote-004) We will use
    it in this book to structure the content and the sections.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.13: The Mobius loop[4](#footnote-003)'
  prefs: []
  type: TYPE_NORMAL
- en: '[3](#footnote-004-backlink) [https://github.com/rht-labs/enablement-docs](https://github.com/rht-labs/enablement-docs)'
  prefs: []
  type: TYPE_NORMAL
- en: '[4](#footnote-003-backlink) The Mobius Loop ([https://mobiusloop.com/](https://mobiusloop.com/))
    resources by Gabrielle Benefield and Ryan Shriver used here and throughout this
    book are licensed under [CC BY 3.0](https://creativecommons.org/licenses/by/3.0/).
    Later in the book, images include an additional modification of a foundation layer.
    For more information please see [https://creativecommons.org/licenses/by/3.0/](https://creativecommons.org/licenses/by/3.0/)'
  prefs: []
  type: TYPE_NORMAL
- en: Mobius is a framework that connects discovery and delivery and can be used to
    connect strategy to products to operations. The common denominator is measurable
    outcomes. Mobius is used to understand, align, and share measurable target outcomes
    so they can be tested and validated.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a number of principles that underpin the Mobius navigator:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Outcomes over outputs**: We focus on delivering tangible impacts or outcomes
    to people as opposed to delivering lots of features that may not drive outcomes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multi-options strategy** (**options pivot**): We look to build a list of
    options, a list of research initiatives, experiments, and implementation features
    that can be used to test hypotheses about whether those research initiatives,
    experiments, and implementation features will indeed drive the anticipated outcomes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rapid delivery**: We aim to use short iterations of delivery with regular
    feedback and measurement as we strive toward the idea of continuous delivery.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous learning and improvement**: happens throughout the cycle so that
    our next set of options yield an even better impact on outcomes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are **seven core elements** to the Mobius approach across a continuous
    and never-ending flow. They can be visualized on a single canvas that is open
    source and made available under a creative commons license at [www.mobiusloop.com](http://www.mobiusloop.com):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Why** describes the purpose. Why are we doing this? What is the problem we
    are trying to solve? What is the idea we are trying to pursue?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Who** focuses on the end users. Who are we trying to solve the problem for?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Outcomes** are where we want to get to with these people, the changes in
    their human behavior that influences big results, and how we will measure the
    customer and business impacts delivered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Options** are the potential solutions that could deliver these outcomes.
    They help define the hypotheses we can go on to test and help us find the simplest
    way to achieve the desired outcome with the least amount of effort or output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deliver** is the cycle where we run experiments to deliver a solution or
    set of solutions to users so we can measure the impact.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Measure** is where we assess what happened as a result of delivering the
    solution or set of solutions. We check whether the impact of the solution delivered
    the desired outcomes and assess how much of an impact we achieved.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Learn** is the feedback loop that takes us back to the options pivot. We
    learn from what we delivered and assess what to do next. Have we delivered enough
    to make an assessment? Do we go right back around the delivery loop again? Have
    we reached our target outcomes or invalidated assumptions from our learnings?
    Do we return to the discovery loop?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Personas such as Tadhg, our user experience designer, would typically spend
    a lot of time in the discovery loop. Personas such as Caoimhe, our technical lead,
    would traditionally be focused on the delivery loop. Personas such as Fionn, our
    project manager, would typically spend a lot of time here establishing outcomes
    and gathering options. But, as we seek to move to cross-functional teams of T-
    or M-shaped people, we really benefit from everyone being involved at every stage
    of the Mobius loop. And Mobius creates a common language based on targeted measurable
    outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: You can apply the same principles of outcome-driven thinking for strategy, product,
    and services delivery to enabling business and technical operations — we'll return
    to this idea later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Mobius is powerful because it's framework agnostic. It integrates with many
    existing frameworks and methods you may already be familiar with — Scrum, Kanban,
    design thinking, Lean UX, Business Model Generation, Lean startup, and many other
    great frameworks that have surfaced during the last couple of decades. You don't
    have to reinvent the wheel or replace everything you already like and that works
    for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can capture key information on a discovery map, an options map, and a delivery
    map — all of these are open source artifacts available under **Creative Commons**
    at [www.mobiusloop.com](http://www.mobiusloop.com):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.14: Using the Discovery, Options, and Delivery canvases of the Mobius
    loop'
  prefs: []
  type: TYPE_NORMAL
- en: When Red Hat Open Innovation Labs started using Mobius, we placed all of our
    practices around the Mobius loop. Some practices clearly aligned with the discovery
    loop and, in particular, the **Why & Who** end of the discovery loop. Practices
    such as impact mapping, start-at-the-end, and empathy mapping are great at uncovering
    the answers posed in this section of the loop. We'll get into the detail of these
    practices in subsequent chapters of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Practices such as event storming and user story mapping were very helpful in
    establishing and visualizing outcomes on the other side of the discovery loop.
    Again, we'll look at these practices in detail and share some great examples of
    their effect.
  prefs: []
  type: TYPE_NORMAL
- en: Practices such as design sprints, how-might-we, and product backlog refinement
    would help determine and organize the series of options available attempting to
    drive toward outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: Practices such as sprint planning would help plan and execute the incremental
    delivery of products toward outcomes. We'll explore these iterative delivery practices
    and how different Agile frameworks can be used with Mobius.
  prefs: []
  type: TYPE_NORMAL
- en: Practices such as showcases and retrospectives would help with capturing measure-and-learn
    data from incremental delivery.
  prefs: []
  type: TYPE_NORMAL
- en: We still had a large number of practices that we did not feel naturally fitted
    into one of the loops or the options pivot. When we laid out all of the remaining
    practices that we had all used with numerous customers very effectively, we found
    they fitted into one of two areas. One set of practices were all focused on creating
    culture and collaboration. The other practices were all technical engineering
    practices that supported the concept of continuous delivery.
  prefs: []
  type: TYPE_NORMAL
- en: When explaining these practices to others, we talked about these being very
    important practices to put in place, but not necessarily practices that you would
    schedule. For example, you will learn that practices such as impact mapping on
    the discovery loop are important scheduled workshops that you execute and occasionally
    revisit in the future. Practices such as sprint planning, showcases, and retrospectives
    on the delivery loop are also tightly scheduled when working in an iterative delivery
    framework. But the practices associated with culture and collaboration or those
    associated with technical engineering were more like practices that you use all
    the time, continuously.
  prefs: []
  type: TYPE_NORMAL
- en: Practices such as social contracts and definition of done are not one-time-only
    practices where you bring the artifact out on a schedule. These are living and
    breathing artifacts that teams use all the time in their day-to-day work. Likewise,
    continuous integration, test automation, and infrastructure as code — these are
    not the types of practices you schedule one or two times a week. These are practices
    that you do all the time. They are practices in the foundation of where and how
    we're working. In order to effectively practice continuous delivery and continuous
    discovery as presented by the Mobius loop, we need to have a strong foundation
    of culture, collaboration, and technical engineering practices.
  prefs: []
  type: TYPE_NORMAL
- en: 'To visualize this, we added the foundation to the Mobius loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.15: Adding a foundation to the Mobius loop'
  prefs: []
  type: TYPE_NORMAL
- en: 'This graphic has become a simple visualization tool that helps us navigate
    the ever-growing list of practices and techniques we use to achieve continuous
    discovery and continuous delivery of digital products:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.16: Practicing continuous discovery and delivery through the Mobius
    loop'
  prefs: []
  type: TYPE_NORMAL
- en: Open Innovation Labs Residencies involves traveling around the Mobius loop a
    few times, usually starting from discovery before proceeding to delivery and then
    pivoting a few times to either more delivery or returning to discovery continuously.
    We find that, in order for this to be sustainable, you must build a foundation
    of culture and collaboration and you must build a strong foundation of technical
    engineering practices.
  prefs: []
  type: TYPE_NORMAL
- en: Open Innovation Labs kick-started an open source, community-driven project called
    the Open Practice Library. The Open Practice Library is a community-driven repository
    of practices and tools. These are shared by people currently using them day-to-day
    for people looking to be inspired with new ideas and experience.
  prefs: []
  type: TYPE_NORMAL
- en: All of the practices you read about in this book have been contributed to the
    Open Practice Library and, throughout the book, we will use the Mobius loop and
    the foundation of culture, collaboration, and technical practices as a reference
    point to determine where and how all our open practices fit together to deliver
    great DevOps culture and practice with OpenShift.
  prefs: []
  type: TYPE_NORMAL
- en: An important characteristic of Mobius and the Open Practice Library is that
    it is not prescriptive. It is not a methodology. It does not tell you exactly
    which practice to use when and where. Think of the Open Practice Library as a
    box of tools — a really well-organized toolbox with lots of compartments and shelves.
    The practices have been organized into compartments that help with discovery and,
    in particular, the *why* and *who*, followed by deriving outcomes. There is a
    drawer containing all the tools that help form, organize, and prioritize options
    and how to pivot later in the cycle. There is a portion of the toolbox with all
    of the tools that help with delivery — whether that be iterative and incremental
    delivery associated with agile practices or single delivery associated with Waterfall.
    There are tools to help capture and understand the measurements and learning from
    delivery. Finally, there is a huge drawer of tools used to establish culture,
    collaboration, and technical engineering excellence. These are often the first
    tools we go to grab when starting a piece of work.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we introduced the value chain in software product delivery
    and explored how traditional ways of working brought inefficiencies, bottlenecks
    and gaps between users, business stakeholders, development teams, and operational
    teams.
  prefs: []
  type: TYPE_NORMAL
- en: We explored some of the techniques that have been used to plug these gaps and
    how a balanced focus on people, process, and technology is needed by all involved.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we introduced the open-source navigator tool called Mobius that connects
    discovery and delivery in an infinite loop and can connect strategy to product
    to operations with a common denominator of measurable outcomes. The Open Practice
    Library uses mobius on a foundation of culture and technology to navigate between
    an evolving number of open practices — many of which will be explained in subsequent
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we're going to outline how we'll approach the rest of the
    book by introducing our case study and the structure for the remaining sections.
  prefs: []
  type: TYPE_NORMAL
