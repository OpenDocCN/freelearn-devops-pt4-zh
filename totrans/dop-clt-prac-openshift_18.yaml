- en: 12\. Doing Delivery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ultimately, code has no value until it is delivered to production and its associated
    functionalities are in use. It's time to connect all our learning to date to delivery.
  prefs: []
  type: TYPE_NORMAL
- en: We are well into the second half of this book and other than setting up a technical
    foundation, as we did in *Section 3*, *Discover It*. we haven't written any application
    code, nor have we delivered anything yet. What we have done is go through a tremendous
    set of practices to help discover, set outcomes, assess and prioritize options,
    and decide what we are going to deliver next. Now, we have reached the point where
    we will write some code, deliver features, execute experiments, and learn from
    further research.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to look at different delivery approaches. Your
    immediate expectation might be that this chapter is going to be all about **Agile**
    and that using Agile methodologies is now the only way to deliver working software.
    However, in addition to taking a look at Agile, where it came from, and different
    ways we can use it, we will highlight that it is not the only option. There is
    still a place for more traditional approaches to delivery, such as **Waterfall**.
    In this chapter, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Explain the Waterfall and Agile methodologies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Look at the difference between complicated, complex, and clear systems and how
    we can use them to drive the applicability of Agile.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explore how the Mobius Loop is framework-agnostic and, through different perspectives,
    speed, and frequency of iterations, can be used to explain delivery of every type.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Share some tools and tips about getting **ready** for Delivery Iterations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describe the practices with examples we often use to help with Delivery Iterations;
    including, for example, Iteration (or Sprint) Planning, Daily Stand-Ups, Showcases,
    and Retrospectives.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See how, as teams mature and continuously improve, they can adapt their working
    practices and approaches.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Share some tools and tips about getting working software features **done** with
    a focus on both functional and non-functional acceptance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See, for the first time, how all of our practices blend together to give us
    a continuous delivery engine.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B16297_12_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.1: Waterfall and Agile teams'
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by having a look at those two phenomena—Waterfall and Agile. As
    depicted in *Figure 12.1*, Waterfall is often associated with Gantt charts, dependencies,
    and hand-offs and hand-overs from one part of the organization to another. Agile
    takes a different mindset and is more cross-functional. Some may say Waterfall
    is old and dying. We'll see later in this chapter that there remain valid use
    cases for taking a Waterfall approach.
  prefs: []
  type: TYPE_NORMAL
- en: Waterfall
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Waterfall projects are broken down into linear steps; each step relies on the
    previous one being completed before starting the next. The first step is to gather
    user requirements, followed by designing and planning, and then finally software
    development. Once testing and deployment are done, we enter the maintenance and
    operation mode.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.2: Waterfall process'
  prefs: []
  type: TYPE_NORMAL
- en: This type of delivery methodology has a long history outside of software development,
    especially in traditional engineering. When building a bridge or a factory, the
    *project plan* lays out the requirement of all the people, resources, tasks, and
    timelines for the overall project of work. The Waterfall approach can be described
    as a *plan-driven* engineering process where success is measured according to
    how well development is able to keep up with the plan.
  prefs: []
  type: TYPE_NORMAL
- en: By following a plan, individual variations are minimized. In the industrial
    world, this helps make both delivery and cost predictable. Because the traditional
    Waterfall model does not allow for looping, requirements and design are gathered
    in vast documents to begin planning. Changing and understanding the documents
    becomes very tricky for teams because there are no mechanisms for getting a shared
    understanding other than reading all the documents over again. Have you ever participated
    in a book review session? How many different points of view do you get when a
    group of people reads the same book? Coupling this with the likeliness of an organization
    to raise expensive change requests and making changes to the documentation can
    quickly show how disastrous this approach can be for a company. So how does this
    method fare in the world of software?
  prefs: []
  type: TYPE_NORMAL
- en: Often, we find that in the software realm the requirements do not match what
    the end users expect. This is because as we develop the software, questions and
    misunderstandings about the original requirements and design become hard to address.
    As design and business requirement teams are not heavily involved in the development
    phase, there is no opportunity to refresh the designs or ideas.
  prefs: []
  type: TYPE_NORMAL
- en: Delivering customer and business value through working software takes a lot
    longer using Waterfall—as working software is only delivered toward the end of
    a Waterfall process. Think of how much time is lost while you're waiting for your
    great application to arrive. What if it never arrives? Or worse, arrives too late
    and you've missed your market?
  prefs: []
  type: TYPE_NORMAL
- en: Changing requirements during a Waterfall execution is often left to another
    Waterfall phase. If changes are urgent, then they may be handled through some
    form of change request mechanism. However, this is really a form of loop—leading
    us to a more iterative approach. In Waterfall, these loops can still be very time-consuming
    and costly. If only there was a quicker way!
  prefs: []
  type: TYPE_NORMAL
- en: Winston Walker Royce was an American computer scientist and director at Lockheed
    Software Technology Center in Austin, Texas. He was a pioneer in the field of
    software development, known for his 1970 paper from which the idea of the single-pass
    Waterfall model for software development was mistakenly drawn. That's right, Waterfall
    was misunderstood and mistaken!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.3: Waterfall was not designed as a single pass!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Barry Boehm wrote in 1987: "*Royce''s 1970 paper is generally considered to
    be the paper which defined the* *stagewise Waterfall model of the software process.
    But it is surprising to see that both the earlier Benington* *and Hosier papers
    had good approximations to the Waterfall model, and that Royce''s paper already
    incorporates prototyping as an essential step compatible with the Waterfall model*."[1](#footnote-071)'
  prefs: []
  type: TYPE_NORMAL
- en: Royce demonstrated that while the development of large software systems required
    a more thorough approach, there was an inherent risk in the single-pass sequential
    approach. He proposed an iterative approach and advocated that projects should
    pass through this at least twice. But many Waterfall projects started and have
    continued to follow just a single-pass flow, left to right, with just a single
    iteration, which was not intended or recommended by Royce—Waterfall plans were
    never supposed to be executed just once.
  prefs: []
  type: TYPE_NORMAL
- en: The Waterfall model did help in the innovation of other approaches and the focus
    on iteration was corrected in Agile models.
  prefs: []
  type: TYPE_NORMAL
- en: '[1](#footnote-071-backlink) Barry W. Boehm (1987). "Software Process Management:
    Lessons Learned from History" in ICSE ''87 Proceedings of the 9th international
    conference on Software Engineering pp 296-298'
  prefs: []
  type: TYPE_NORMAL
- en: The Birth of Agile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Agile development methods have been talked about and practiced for over two
    decades now. The *Agile Manifesto* came about when a bunch of men, all prominent
    in software development, got together at a ski retreat in Utah to do some critical
    analysis on why IT projects were getting such a bad name. They looked back at
    the previous 10 years of software delivery throughout the '90s and concluded IT
    projects were taking too long to execute, coming over budget, and often not delivering
    value to end users. So these men sat down at the end of their trip and wrote the
    *Manifesto for Agile Software Development*.
  prefs: []
  type: TYPE_NORMAL
- en: 'We know what you''re thinking: this manifesto thing must have been a massive
    document! A huge book filled with detailed instructions on how to write software
    as well as how to manage requirements and costs. In fact, it was much simpler
    than this—so simple you could almost fit it in a tweet!'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.4: The manifesto for Agile software development'
  prefs: []
  type: TYPE_NORMAL
- en: The Agile Manifesto[2](#footnote-070) is a simple set of values, highlighting
    the importance of some values over others.
  prefs: []
  type: TYPE_NORMAL
- en: '*Working software over comprehensive documentation*—*This sounds great, I don''t
    have to write any documentation* is what some are probably thinking. But they
    would be wrong. The values are not saying things on the right are not important,
    but that there is higher value in the items on the left. This is the bit people
    tend to forget when quoting the manifesto.'
  prefs: []
  type: TYPE_NORMAL
- en: '[2](#footnote-070-backlink) [https://agilemanifesto.org/](https://agilemanifesto.org/)'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to this set of values, this group came up with a set of 12 principles[3](#footnote-069)
    to support them.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.5: Principles behind the Agile Manifesto'
  prefs: []
  type: TYPE_NORMAL
- en: These principles provide more detail about the kind of behaviors they foresaw
    as *being agile*. Read together, the principles provide an incredibly useful resource
    when having conversations about what it means to be *agile*. Agile these days
    has really become an overused buzzword and is frequently injected into sentences.
    Examples include—"*We're going to use Agile to deliver this project*" or "*We're
    going to install Agile*." Reading through and having a conversation about the
    12 statements can provide clarity and alignment on what we mean by Agile.
  prefs: []
  type: TYPE_NORMAL
- en: '[3](#footnote-069-backlink) [https://agilemanifesto.org/principles](https://agilemanifesto.org/principles)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Agile Manifesto contrasts with the plan-driven Waterfall approach in that
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: Is more *adaptive*, rather than *prescriptive*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is more *people-oriented*, rather than *process-oriented*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the beginning of the industrial age, people working on the factory floor
    were described by Frederick Taylor, an American mechanical engineer widely known
    for his methods to improve industrial efficiency, as being *lazy*, *venal*, and
    *stupid*. A factory was built and designed by architects and engineers who did
    not work on the factory floor. One of the tenets of Agile is that the people and
    teams who do the work decide on how it gets done.
  prefs: []
  type: TYPE_NORMAL
- en: An important part of Agile is its focus on cross-functional teams delivering
    working software. The designers and business stakeholders are continuously involved
    in this process. Unlike Waterfall, when questions arise about the end user experience,
    these can be researched and answered based on the most up-to-date information
    available to the team.
  prefs: []
  type: TYPE_NORMAL
- en: Agile methodologies focus on simultaneous workflows that form a baseline to
    help us control change. Plans are constantly revised to reflect the learnings
    during a product's development. Success is based on the value delivered by the
    working software.
  prefs: []
  type: TYPE_NORMAL
- en: Agile is focused around products that are directly connected to the end user
    as opposed to effort and output that may not be directly connected. The team comes
    together to drive successful delivery where processes and tools are used to optimize
    product delivery.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most noticeable traits of Agile is its breaking down of project delivery
    into smaller iterative phases. This works really well for software products that
    require regular revisions and testing. Because the work is done incrementally,
    teams can easily adjust what is being worked on. They can pivot to work on high-value
    features and deliver those to customers early and fast.
  prefs: []
  type: TYPE_NORMAL
- en: Some critics of Agile methods quite rightly point out that Agile projects also
    fail. However, it is not methodologies that fail, it is teams and organizations
    that fail. Often the reasons can be clearly articulated as the team taking on
    too much *technical debt*—adding new features or changing existing software is
    just too hard to do quickly because the code base is a mess, or the architecture
    is just plain wrong.
  prefs: []
  type: TYPE_NORMAL
- en: Fundamentally, Agile is an ideology or a philosophy—a way of thinking. It is
    articulated by the four value statements in the Agile Manifesto and defined further
    by the twelve principles. Agile is instantiated and brought to life by a series
    of practices, many of which are in the Open Practice Library. Practices have been
    grouped together to form popular Agile frameworks such as Scrum, Kanban, and **SAFe**
    (**Scaled Agile Framework**). All of these make up the Agile ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.6: Decomposing the Agile mindset into values, principles, practices,
    and frameworks'
  prefs: []
  type: TYPE_NORMAL
- en: Before we get into the detail of Agile, let's consider how OpenShift complements
    Agile and promotes business agility.
  prefs: []
  type: TYPE_NORMAL
- en: How Does OpenShift Help?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Technology is one of the foundational pillars that makes Agile productive and
    responsive to change. OpenShift is the collaborative platform that allows team
    members with diverse sets of skills to come together to securely write, test,
    deliver, and operate their application software. The platform enhances team dynamics,
    as team members can quickly and easily work in a homogenous environment—they are
    not forced to work in isolation. The ability to run simultaneous workflow streams
    in separate OpenShift projects fits extremely well with Agile delivery. Different
    clusters can be used to isolate production from non-production workloads. While
    each environment may be sized differently, they are identical in their software
    makeup. This drives up quality by eliminating version and configuration drift
    across environments.
  prefs: []
  type: TYPE_NORMAL
- en: As we mentioned in the introduction, we still see a place for less Agile approaches
    to delivery (including the use of Waterfall). Let us now look at the characteristics
    of different projects that can determine what approach is best.
  prefs: []
  type: TYPE_NORMAL
- en: Decision-Making Contexts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In 2020, Red Hat produced an eBook entitled *Transformation takes practice*.[4](#footnote-068)
    This was written in response to a question asked time and again by business leaders:
    Why are so many digital transformation efforts failing? In the eBook, Mike Walker,
    Global Director of Red Hat Open Innovation Labs explains: "*In complex sociotechnical
    systems, it is a group of people, not individuals or managers, who can create
    innovative change. These groups must tune the system through a perpetual cycle
    of probing, sensing, and responding to outcomes*."'
  prefs: []
  type: TYPE_NORMAL
- en: To explore that cycle of **probing, sensing, and responding** to outcomes, let's
    introduce a very helpful framework that compares this approach to alternative
    approaches used in different systems.
  prefs: []
  type: TYPE_NORMAL
- en: The Cynefin Framework
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Cynefin framework** was created in 1999 by Dave Snowden when he worked
    for IBM Global Services. *Cynefin* is the Welsh word for *habitat*, and the framework
    offers five decision-making contexts or *domains*:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Clear* (known until 2014 as *simple*, but more recently renamed *clear* by
    Snowden)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Complicated*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Complex*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Chaotic*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Disorder*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4](#footnote-068-backlink) [https://www.redhat.com/en/resources/transformation-takes-practice-open-practice-library-ebook](https://www.redhat.com/en/resources/transformation-takes-practice-open-practice-library-ebook)'
  prefs: []
  type: TYPE_NORMAL
- en: The framework is intended to help managers identify how they perceive situations
    and make sense of their own and other people's behavior. The framework draws on
    research into systems theory,[5](#footnote-067) complexity theory,[6](#footnote-066)
    network theory,[7](#footnote-065) and learning theories.[8](#footnote-064)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.7: The Cynefin framework'
  prefs: []
  type: TYPE_NORMAL
- en: The *clear*, or the *obvious* domain represents the *known knowns*. This means
    that there are rules in place (or best practice), the situation is stable, and
    the relationship between cause and effect is clear—if you do X, Y is expected.
    This is the domain of legal structures, standard operating procedures, and practices
    that are proven to work.
  prefs: []
  type: TYPE_NORMAL
- en: '[5](#footnote-067-backlink) [https://en.wikipedia.org/wiki/Systems_theory](https://en.wikipedia.org/wiki/Systems_theory)'
  prefs: []
  type: TYPE_NORMAL
- en: '[6](#footnote-066-backlink) [https://en.wikipedia.org/wiki/Complexity_theory_and_organizations](https://en.wikipedia.org/wiki/Complexity_theory_and_organizations)'
  prefs: []
  type: TYPE_NORMAL
- en: '[7](#footnote-065-backlink) [https://en.wikipedia.org/wiki/Network_theory](https://en.wikipedia.org/wiki/Network_theory)'
  prefs: []
  type: TYPE_NORMAL
- en: '[8](#footnote-064-backlink) [https://en.wikipedia.org/wiki/Learning_theory_(education)](https://en.wikipedia.org/wiki/Learning_theory_(education))'
  prefs: []
  type: TYPE_NORMAL
- en: The *complicated* domain consists of the *known unknowns*. The relationship
    between cause and effect requires analysis or expertise where there is a range
    of right answers. The framework recommends *sense*–*analyze*–*respond*, that is,
    first assess the facts, then conduct analysis and use that to apply the appropriate
    good operating practice.[9](#footnote-063)
  prefs: []
  type: TYPE_NORMAL
- en: The *complex* domain represents the *unknown unknowns*. Cause and effect can
    only be deduced in retrospect, and there are no right answers. "*Instructive patterns*
    ... *can emerge,*" write Snowden and Boone, "*if the leader conducts experiments
    that are safe to fail.*" Cynefin[10](#footnote-062) calls this process *probe*–*sense*–*respond*.
  prefs: []
  type: TYPE_NORMAL
- en: In the *chaotic* domain, cause and effect are unclear. Events in this domain
    are "*too confusing to wait for a knowledge-based response,*" writes Patrick Lambe.
    "*Action*—*any action*—*is the first and only way to respond appropriately*."[11](#footnote-061)
    In this context, managers must *act*–*sense*–*respond*, *act* to establish order,
    *sense* where stability lies, and *respond* to turn the chaotic into the complex.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the work we do with our customers sits in the complex and complicated
    domains. To differentiate between these two domains further, let's look at a helpful
    example used in the *Transformation takes practice* eBook about the difference
    between a Ferrari and a rainforest.
  prefs: []
  type: TYPE_NORMAL
- en: The Ferrari and the Rainforest
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A recent piece of research by Harvard Business Review[12](#footnote-060) shows
    that 80% of business leaders say their digital transformation efforts are ineffective.
    For organizations pursuing digital transformation, one key step is recognizing
    the difference between complicated and complex systems. Think of a Ferrari. It
    is made of thousands of components, but their sum and how each interacts with
    the other to create the whole are fundamentally knowable. Diagnosing and repairing
    a malfunctioning Ferrari requires you to sense, analyze, and respond to feedback
    and learning. A Ferrari is a complicated system.
  prefs: []
  type: TYPE_NORMAL
- en: '[9](#footnote-063-backlink) [https://hbr.org/2007/11/a-leaders-framework-for-decision-making](https://hbr.org/2007/11/a-leaders-framework-for-decision-making)'
  prefs: []
  type: TYPE_NORMAL
- en: '[10](#footnote-062-backlink) [https://hbr.org/2007/11/a-leaders-framework-for-decision-making](https://hbr.org/2007/11/a-leaders-framework-for-decision-making)'
  prefs: []
  type: TYPE_NORMAL
- en: '[11](#footnote-061-backlink) [Lambe, Patrick (2007). Organising Knowledge:
    Taxonomies, Knowledge and Organisational Effectiveness. Oxford: Chandos Publishing,
    136.](https://www.elsevier.com/books/organising-knowledge/lambe/978-1-84334-227-4)'
  prefs: []
  type: TYPE_NORMAL
- en: '[12](#footnote-060-backlink) [https://www.redhat.com/cms/managed-files/cm-digital-transformation-harvard-business-review-analyst-paper-f22537-202003-en_0.pdf](https://www.redhat.com/cms/managed-files/cm-digital-transformation-harvard-business-review-analyst-paper-f22537-202003-en_0.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: Now think of a rainforest. It is a dynamic ecosystem with billions of interacting
    organisms and elements. We understand those dynamics at some level, but they are
    essentially unpredictable, with cause and effect only evident in hindsight. The
    problems threatening rainforests would be best addressed through probing, sensing,
    and responding. In other words, it requires continuous cycles of hypotheses, experimentation,
    and measurement to arrive at desired outcomes. A rainforest is a complex system.
  prefs: []
  type: TYPE_NORMAL
- en: Today's large organizations behave more like rainforests, not Ferraris. It is
    a complex sociotechnical system with many dynamics—both human and technical—at
    play, that resist quantification. This distinction is important because many enterprise
    leaders assume organizations are complicated systems in which analysis is the
    key to arriving at the best solution. But in complex systems, probing and sensing,
    or hypothesis and experimentation, in rapid and iterative cycles, are more effective
    in identifying the best solutions and ideas.
  prefs: []
  type: TYPE_NORMAL
- en: 'What has all this got to do with the delivery of applications such as the case
    study used throughout this book, PetBattle? There is a lot of terminology attached
    to delivery methodologies. When do we use Scrum versus Kanban? Is a Burndown chart
    just a reverse Gantt chart? How can we show value being delivered when using Waterfall?
    Ultimately, each method or approach is trying to achieve a similar goal: the completion
    of a feature set in any given product that can be released to our end users.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some good starting guidelines when trying to understand which methodology to
    use include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Waterfall works best for projects that are completed in a linear fashion, where
    it is clear to *sense-categorize-respond* as best practice. So, following a standard
    operating procedure to install and test a software product will be a one-time-only
    piece of work and will not benefit from agility or iteration. There will be no
    need to go back to prior phases of work. This is often seen as a traditional way
    of working.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An iterative Agile framework such as Scrum is concerned with getting work done
    by completing and showing small increments of work and inspecting and adapting
    to feedback. In other words, we are taking the *probe-sense-respond* approach
    articulated in the complex domain of Cynefin. Other Agile frameworks such as Kanban
    are primarily concerned with continuous delivery. The highest priority item is
    done next, and a fixed chunk of work is pulled off the backlog into a smaller
    stream of work. This also supports the *probe-sense-respond* mindset.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get back to our visualization and mental model that we have been using
    throughout the book using the Mobius Loop.
  prefs: []
  type: TYPE_NORMAL
- en: When Does a Mobius Loop Mindset Make Sense?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the reasons we love the Mobius Loop is because we can use it to explain
    any project, program, or work we've ever been involved in.
  prefs: []
  type: TYPE_NORMAL
- en: As it is framework-agnostic, it does not demand Scrum or Kanban. It does not
    stipulate how many iterations a team or organization should go through, around
    one or both of the loops. It complies with any of the four established domains
    of Cynefin.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.8: The Cynefin framework and Mobius Loop'
  prefs: []
  type: TYPE_NORMAL
- en: Projects in the **complex** domain fit well with an Agile approach. Visualized
    on the Mobius Loop, this means starting on the Discovery Loop and establishing
    the first set of Target Outcomes. The Options Pivot involves refining what to
    discover or deliver next and deciding on which options to deliver. The Delivery
    Loop creates a design and build for a small increment, runs that increment in
    production to collect data, and takes measurements before learning and reflecting
    on the outcomes achieved. There is then an adaption point to either go through
    another loop of Discovery, do another loop of Delivery, or return to the Options
    Pivot to reprioritize and pivot. This cycle will continue indefinitely as long
    as there are product delivery and/or operations ongoing. There will be a growing
    desire, through continuous improvement, to speed up the iterations of Discovery
    and Delivery.
  prefs: []
  type: TYPE_NORMAL
- en: Projects in the **complicated** domain fit well with an **Agile** approach.
    Visualized on the Mobius Loop, this means starting on the Discovery Loop and establishing
    Target Outcomes. This may be slower and more detailed, given projects in the complicated
    domain benefit from sense and analysis before a response. A similar pattern will
    be experienced for complex projects through Options into Delivery and then either
    a return to Discovery, Delivery, or Options.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, projects in the **chaos** domain need to act quickly and move out of
    that domain as quickly as possible. That may mean starting on the Delivery Loop
    with the urgent act and, as the level of chaos reduces, start to re-group and
    organize options and a loop of Discovery. Once the shift to the Discovery Loop
    is completed, the project moves from one of chaos to more of a complex project.
    Most application development these days would be considered complex.
  prefs: []
  type: TYPE_NORMAL
- en: So, where does an application like PetBattle sit in the Cynefin framework, and
    what is the best delivery approach to consider?
  prefs: []
  type: TYPE_NORMAL
- en: PetBattle—Complex, Complicated, or Clear?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our PetBattle customers cannot use any of our innovative feature ideas until
    we build, test, and deploy our code into a production environment. The old hobbyist
    application was built all in one go and one release. Should the new PetBattle
    organization continue this approach?
  prefs: []
  type: TYPE_NORMAL
- en: 'The team walked the walls of all the artifacts produced during their Discovery
    Loop and options. They talked about what might be the best way to deliver all
    these great ideas. Some of the comments made during this session include:'
  prefs: []
  type: TYPE_NORMAL
- en: During the Discovery Loop explained in *Section 3, Discover It*, we only really
    explored in any depth a small subset of feature ideas, that is, those connected
    to the *Increase Site Engagement for Uploaders* part of the Impact Map. That was
    where the investors invested most of their Donal Dollars! We'll eventually need
    to consider other impacts or dive deeper into this one when we see what happens
    with our early feature builds.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are a lot of pink sticky notes on the Event Storm—these represent questions,
    assumptions, and other unknowns that we'll need to get answers to and eventually
    remove.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Event Storming done to date has focused on *the one where Mary enters the
    daily tournament and wins a prize*. We'll need to do more Event Storming as we
    consider new features and/or answers to the unknowns.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have some good target outcomes and some great hypothesis statements behind
    all the options. But what if the needle doesn't shift and those hypotheses are
    proven false? We'll be back to the drawing board.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we refined our options in *Section 4, Prioritize It*, on the Value Slice
    board, we identified several experiments we need to run. Some will be run as A/B
    tests, feature toggles, and canary launches, while some require UI prototyping
    and technical spikes to run before we can progress.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Empathy Map we produced from interviewing Mary was great. But it showed
    how many things we hadn't thought of about our users. What will happen when we
    Empathy Map other users? Or, when we start to meet advertisers and partners and
    capture Empathy Maps on them? What will they say?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There remain a lot of technical unknowns and learning to be done on the platform.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are many known unknowns and probably even more unknown unknowns! With
    so many unknowns, how do we deliver these changes in a way that ensures quality
    (no breakages to a PetBattle Tournament!), speed (can the team deliver changes
    quickly and on time?), and efficiency (can the team repeatedly deploy changes
    cheaply and easily)?
  prefs: []
  type: TYPE_NORMAL
- en: PetBattle, like most user-centric applications, is a complex sociotechnical
    system with many dynamics, both human and technical. With continued emergent practice,
    we can now move to a *probe-sense-respond* mindset as we approach our first (of
    many) iterations of delivery.
  prefs: []
  type: TYPE_NORMAL
- en: Taking a complex product into the first iteration of delivery means we have
    to decide what, from our list of options, we are going to deliver first. We also
    need to check whether the team are ready to work on the selected items and are
    confident they have the right amount of information and understanding to deliver
    them. This leads to another foundational practice to define and assess readiness
    to deliver.
  prefs: []
  type: TYPE_NORMAL
- en: The Definition of Ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Jeff Sutherland, co-creator of the Scrum framework, called out that one of the
    main reasons that many Scrum projects fail is due to teams working on items that
    are simply not ready to be worked on. They are either too ambiguous, not understood
    by business and technical stakeholders, too big, or they lack ambiguity as to
    the scope of the item in question.
  prefs: []
  type: TYPE_NORMAL
- en: Many teams have chosen to adopt the practice of having a **Definition of Ready**
    to mitigate this risk. The Definition of Done practice has been popular with Agile
    teams for many years—we will explore that later in this chapter. The Definition
    of Ready has been less utilized. A good way to look at this, like every practice
    in the Open Practice Library, is as a tool that can be taken out of the toolbox
    to address a problem. If a team is struggling to get work done because of ambiguity
    and a lack of shared understanding before even starting it, adding a Definition
    of Ready may improve the team's success in the future.
  prefs: []
  type: TYPE_NORMAL
- en: The Definition of Ready is a practice used by a team to set their criteria and
    expectations with others as to what constitutes a Product Backlog item that is
    ready to be worked on. The resulting artifact is collaboratively created, maintained,
    and enforced by the team, and publicly displayed for the team members and others
    to easily reference. It is often informed by experience, like all other artifacts
    generated from the practices in this book. It is a living, breathing artifact
    that will improve over time with learning and experience. We often find discussions
    that happen during Retrospectives lead to improvements being made to the Definition
    of Ready. For example, when a team gets blocked and does not manage to deliver
    the items they pulled into their sprint, they might ask themselves what they could
    have done differently to prevent the items from getting blocked in the sprint.
    If there is a common pattern emerging and an improvement process that can be put
    in place to prepare future items ready for delivery sprints, the criteria can
    be written as a Definition of Ready criteria.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Definition of Ready often starts with the act of writing user stories and/or
    acceptance criteria. When we look at Product Backlog items, they are often quite
    high-level, for example, **Log In**, **Choose Item**, **Submit Order.** At first
    glance, you might think these items are clear in scope and could be delivered
    according to expectation. However, a few simple questions from a Development Team
    member opens up the world of ambiguity that exists:'
  prefs: []
  type: TYPE_NORMAL
- en: When you say log in, do you mean log in with a username and password?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What happens if I don't have a username registered?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What happens if I put in the wrong password?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What should happen immediately after I log in?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The practice of writing user stories has become very popular with Agile teams
    because it turns a feature idea into a conversation (or, at least, a promise to
    create a conversation).
  prefs: []
  type: TYPE_NORMAL
- en: Mike Cohn of Mountain Goat Software has driven the popularity of user stories
    and explains how the practice helps us *shift the focus from writing about requirements
    to talking about them. All Agile user stories include a written sentence or two
    and, more importantly, a series of conversations about the desired functionality*.[13](#footnote-059)
  prefs: []
  type: TYPE_NORMAL
- en: 'User stories tend to follow the template: as a <type of user>, I want <some
    goal> so that <some reason>.'
  prefs: []
  type: TYPE_NORMAL
- en: So, after some brief conversation between the Development Team members, business
    stakeholders, and the Product Ownership, the **Log In** feature could be re-written
    as, "*as a retail banking customer, I want to log in with my username and correct
    password so that I can be presented with my latest bank balance.*" The conversation
    may also have driven the splitting of this feature into several other user stories
    that focus on how to get a username/password, what should happen if incorrect
    credentials are supplied, other information and options available after logging
    in, what other types of customers should be able to see and do, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The user story practice facilitates three outcomes, also known as the three
    Cs:'
  prefs: []
  type: TYPE_NORMAL
- en: It generates a **Card**—the user story is short enough that it can be written
    on a small index card (or a digital equivalent).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It generates a **Conversation**—both in writing this user story and capturing
    unknowns or further clarifications needed, yet provides enough direction for working
    on the item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It provides **Confirmation** of the scope and expectation of this individual
    item that will deliver a small piece of value to the end user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[13](#footnote-059-backlink) [https://www.mountaingoatsoftware.com/agile/user-stories](https://www.mountaingoatsoftware.com/agile/user-stories)'
  prefs: []
  type: TYPE_NORMAL
- en: The INVEST criteria is a good pattern to check against user stories.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.9: INVEST criteria'
  prefs: []
  type: TYPE_NORMAL
- en: You'll notice that the act of re-writing a feature as a user story helped answer
    some of the example questions, but not all of them. While we could write many
    user stories simply to answer every question a developer might have, this may
    result in them being too granular and developers grouping them together to write
    code. So, a second popular practice to prepare items for delivery is the act of
    writing acceptance criteria.
  prefs: []
  type: TYPE_NORMAL
- en: 'Acceptance criteria is a further elaboration of understanding and often written
    on the back of the index card holding a user story. Acceptance criteria are the
    conditions of satisfaction a Product Owner and stakeholders will have when the
    item has been completed. These are low-level binary points of clarification —
    basically, a checkbox list that the Product Owner may go through to convince themselves
    that a feature has been delivered to meet business expectations. So, some acceptance
    criteria for our **Log In** feature may include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: There is a textbox for username and password.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Beneath, there is a hyperlink to create a new username.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The username will be displayed in plain text when typed in.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The password will be masked with asterisks when typed in.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the username/password is correct, the Customer Details page will be presented
    with the bank balance at the top of the page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the username/password is incorrect, an error message will appear.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If an incorrect password is entered three times in a 15-minute period, the session
    will be locked out for a further 15 minutes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these items represents small, standalone tests (which can be automated).
    They are specific to the functionality being built. Later in this chapter, we'll
    show how another practice, the Definition of Done, is used to drive other types
    of testing.
  prefs: []
  type: TYPE_NORMAL
- en: The act of writing user stories and acceptance criteria helps generate shared
    understanding across all team members, Product Owners, and stakeholders. They
    are often practices used in Product Backlog Refinement sessions, which were discussed
    in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: If a team sees the value in these practices, they may choose to add them to
    their Definition of Ready so that they always go through the motions of writing
    user stories and acceptance criteria for a Product Backlog item, so that it will
    be ready to be worked on. If an item does not have acceptance criteria, it is
    NOT ready and the team either needs to do some refinement and write the acceptance
    criteria, or demote the item on the Product Backlog and find alternative items
    that are ready.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it's important to call out some misuses and problems that can come about
    through having a Definition of Ready. First, this is not an opportunity to introduce
    lots of pre-development phase gates. Definitions of Ready should not be about
    writing long specifications, having design documents signed off, having architectural
    review board approvals, and so on. The Definition of Ready is about giving the
    team the confidence that, if they take some work into a Delivery Iteration, they
    will get it done.
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, the Definition of Ready is not a mandatory practice for teams. Like
    all practices in this book, it is a tool that is useful to try and, if the team
    does experience problems with getting work out of the Delivery Iterations they
    take in, it would be recommended to try using the Definition of Ready practice.
  prefs: []
  type: TYPE_NORMAL
- en: When we look at a team's Definition of Ready, we look for statements that are
    focused on the team and their comfort or confidence, as these are clearly the
    criteria that bring the team to the fore.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at the Definition of Ready criteria our PetBattle team put in place.
  prefs: []
  type: TYPE_NORMAL
- en: PetBattle – Definition of Ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The PetBattle team met a few days before their first Delivery Iteration. They
    looked at the Product Backlog that had emerged from Value Slice and Discovery
    Loop practices. There was clearly some discomfort and misalignment in exactly
    what the feature was going to deliver and involve. So, the team booked a series
    of 40-minute Product Backlog Refinement sessions.
  prefs: []
  type: TYPE_NORMAL
- en: During the first session, they brainstormed their Definition of Ready and agreed
    this would be used in all future Product Backlog Refinement sessions to validate
    and assure that they would be ready to work on an item.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Definition of Ready included:'
  prefs: []
  type: TYPE_NORMAL
- en: The team has written and agreed on acceptance criteria with the Product Owner
    and, where it makes sense, business or technical stakeholders.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The team feels the item can be delivered within a few days of development.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The team has collectively sized the item using a relative sizing technique.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The team understands where the item fits into the existing or emergent architecture.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The team has seen and has access to UI and technical research.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Any dependencies identified by the team to complete the item have been satisfied
    or the team is confident that they can be satisfied within the iteration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The team sees the value in doing this work.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The team agreed that they would regularly use the Fist of Five confidence vote
    or Roman vote to assess their comfort and confidence levels for the seven points
    above. They were unified in that they should never take items into a Delivery
    Iteration that were not ready. They would need lots of short Product Backlog Refinement
    sessions to keep the top backlog items ready.
  prefs: []
  type: TYPE_NORMAL
- en: To discuss the Definition of Ready with the wider community or to read more
    information or even improve the practice, have a look at the Open Practice Library
    page at [https://openpracticelibrary.com/practice/definition-of-ready/](https://openpracticelibrary.com/practice/definition-of-ready/).
  prefs: []
  type: TYPE_NORMAL
- en: Now we have some items **ready** to be delivered, let's look at the most popular
    Agile framework used for iterative delivery, Scrum.
  prefs: []
  type: TYPE_NORMAL
- en: Scrum
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you hear someone say that they are now doing agile, their team is using
    agile, or their organization has adopted agile, there's a very strong chance that
    what they are actually doing is some form of Scrum.
  prefs: []
  type: TYPE_NORMAL
- en: Scrum is not the same as agile. As mentioned earlier, Agile is an ideology.
    It is underpinned by those values and principles set out in the Agile Manifesto.
    Scrum is one of several frameworks that instantiates Agile and makes the principles
    a reality through a group of practices. It is also, by far, the most popular Agile
    framework.
  prefs: []
  type: TYPE_NORMAL
- en: It was created by Jeff Sutherland and Ken Shwaber in the 1990s and was inspired
    by Hirotaka Takeuchi and Ikujiro Nonaka when they published *The New New Product
    Development Game*.[14](#footnote-058)
  prefs: []
  type: TYPE_NORMAL
- en: There have been numerous books written about Scrum and, as with any good framework,
    it has evolved and continuously improved with learning and experience. We would
    strongly recommend reading the latest version of the Scrum Guide as presented
    by Sutherland and Schwaber at [https://scrumguides.org/](https://scrumguides.org/).
    It is an artifact we recommend re-reading every now and again to refresh your
    memory and knowledge of this very powerful framework. This is especially true
    when updates are made and there are new releases of the framework.
  prefs: []
  type: TYPE_NORMAL
- en: We're not going to teach Scrum in this book as there are many better articles
    and books and, most importantly, the Scrum Guide can do that much better. What
    we are going to do is demonstrate how we have used Scrum in our engagements, how
    it fits into the Mobius Loop, and share some stories of good and bad Scrum adoptions.
  prefs: []
  type: TYPE_NORMAL
- en: One of the reasons we love Scrum is because of its simplicity. Often people
    confuse the many (now hundreds) of practices associated with Agile as being Scrum.
    In fact, Scrum has very few practices. We tend to describe them as 3-5-3 (which
    sounds a bit like a formation for a sports team!).
  prefs: []
  type: TYPE_NORMAL
- en: '[14](#footnote-058-backlink) [https://hbr.org/1986/01/the-new-new-product-development-game](https://hbr.org/1986/01/the-new-new-product-development-game)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.10: The Scrum framework'
  prefs: []
  type: TYPE_NORMAL
- en: This Scrum picture can be best described by grouping the roles, events, and
    artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: The 3-5-3 Formation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The 3-5-3 formation represents 3 roles, 5 events (previously known as ceremonies),
    and 3 artifacts. The three roles are the Product Owner, the ScrumMaster, and the
    Development Team. The five events are Sprint Planning, the Daily Scrum (often
    known as the Daily Stand-Up), the Sprint Review (sometimes called the Showcase),
    the Sprint Retrospective, and the Sprint itself as a fixed time-box container.
    The three artifacts are the Product Backlog, Sprint Backlog, and Product Increment.
    That's it! That's all there is to Scrum. Those three roles, five events, and three
    artifacts. All those other things you hear and read about, like Definitions of
    Ready and Definitions of Done, Burndown and Burnup, User Stories and Story Points,
    and so on are all great supporting practices, but not a part of the Scrum framework.
    Let's share a few recommendations and examples about each component of the Scrum
    framework, starting with the roles.
  prefs: []
  type: TYPE_NORMAL
- en: The Product Owner Role
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In *Chapter 11,* *The Options Pivot*, we introduced the idea of Product Ownership,
    and strongly recommended watching Henrik Kniberg's *Product Ownership in a Nutshell*
    video[15](#footnote-057). If you haven't watched it yet, then please put this
    book down and go and watch it now. Even if you did watch it then, we'd suggest
    watching it again. It's 15 minutes of information that is pure gold.
  prefs: []
  type: TYPE_NORMAL
- en: '"*The Product Owner should have been a key contributor and supporter throughout
    the Discovery Loop and Options Pivot,*" explains Kniberg, their big focus being
    on enabling communication and collaboration between Development Team members and
    stakeholders. They convey the message of envisioned products and set priorities
    for the team by utilizing many of the Options Pivot practices.'
  prefs: []
  type: TYPE_NORMAL
- en: In a Delivery Iteration, this communication is even more important. Having a
    Product Owner that can be the voice of the business, the voice of the user (even
    the voice of technology stakeholders), and be able to regularly converse with
    developers is a key ingredient in enabling high performance in Scrum teams. That
    means face-to-face interaction, negotiations, alignment, and driving shared understanding
    between the Development Team and the Product Owner.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.11: Collaboration between a Product Owner and her Development Team'
  prefs: []
  type: TYPE_NORMAL
- en: '[15](#footnote-057-backlink) [https://www.youtube.com/watch?v=502ILHjX9EE](https://www.youtube.com/watch?v=502ILHjX9EE)'
  prefs: []
  type: TYPE_NORMAL
- en: The Product Owner needs to be regularly available to the Development Team, especially
    during Product Backlog Refinement to, for example, write and agree on acceptance
    criteria, and during Scrum events, such as Sprint Planning.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.12: Development Team member clarifying his understanding with his
    Product Owner and Business experts'
  prefs: []
  type: TYPE_NORMAL
- en: In the case study story in *Chapter 11*, *The Options Pivot*, *Experimenting
    with different Product Owners*, we mentioned that Product Owners should see their
    current role as one to self-destruct and not be needed long-term. They can make
    themselves obsolete by successfully facilitating the Development Team members,
    directly connecting them with stakeholders and users, and building those relationships
    to a level so that their facilitative role is no longer needed.
  prefs: []
  type: TYPE_NORMAL
- en: The ScrumMaster Role
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have not included a photo of a ScrumMaster in action because the ScrumMaster
    arguably should not ever be seen to be in too much frontline action. Their role
    is an enabling one. ScrumMasters should create an environment and a safe space
    that enables the Development Team to see all the action. Of course, this does
    not happen immediately, especially with a newly formed team or a team unfamiliar
    with Agile or Scrum. In these cases, they have to coach the team on the Scrum
    process and help move them towards a more productive environment.
  prefs: []
  type: TYPE_NORMAL
- en: Through great facilitation, great preparation of practices, and effective coaching
    of practices, the ScrumMaster should promote autonomy in the team, self-correction
    and continuous improvement, and self-organization. It is another role where the
    person in it should be trying to remove the need for themself. The ultimate autonomous,
    self-organizing, self-correcting team should no longer need to be facilitated
    or led.
  prefs: []
  type: TYPE_NORMAL
- en: The Development Team Role
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we have already seen, the Product Owner should aspire to remove the need
    for themselves because the Development Team is so well connected to users and
    stakeholders with strong psychological safety for two-way feedback and conversation
    between the two parties. The ScrumMaster should aspire to remove the need for
    themselves because they have facilitated an environment that is full of information
    radiation, very strong adoption of practices by a team that is fully autonomous,
    self-correcting, self-organizing, and continuously improving all the time.
  prefs: []
  type: TYPE_NORMAL
- en: That just leaves one role in Scrum that doesn't remove the need for themselves,
    the Development Team. The term *Development Team* may be a little confusing. Firstly,
    as we've mentioned several times in this book already, DevOps is about bringing
    down the wall between Development and Operations, yet the Scrum terminology seems
    to still lean heavily towards Development. In reality, this team should include
    T-shaped people with breadth and depth and, between all its members, should be
    able to design, build, test, deploy, operate, and maintain features from the Product
    Backlog all the way to production.
  prefs: []
  type: TYPE_NORMAL
- en: A great Development Team will most likely have been set up for success by a
    great ScrumMaster. Their workspace will be full of information radiators and artifacts
    generated by the Discovery Loop, Options Pivot, Delivery Loop, and foundational
    practices. Lots of care and attention will have gone into their surroundings,
    ensuring that the Development Team has been enabled and set up for the best possible
    success with as many foreseen and unforeseen obstacles removed. They will have
    organized time away from the computer, fed and watered the team, organized socials,
    and continuously monitored and improved the open culture and psychological safety
    of the team. The motivation levels, mood, and feeling of empowerment, autonomy,
    mastery, and purpose should be assessed and measured regularly (using practices
    such as the Social Contract, Stop-the-World events, Mood Marbles, and Real-Time
    Retrospective all introduced in *Chapter 4*, *Open Culture*).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.13: Cross-functional Development Team'
  prefs: []
  type: TYPE_NORMAL
- en: Later in the book, in *Chapter 18*, *Sustain It*, we will look at larger multi-team
    organizations and some of the new patterns that help collaboration between the
    teams. But first, let's look at the artifacts that every team using Scrum should
    always have.
  prefs: []
  type: TYPE_NORMAL
- en: The Product Backlog Artifact
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The term "backlog" is used frequently in Agile. If the team is using Scrum,
    it's important to recognize that there are different types of backlogs and they
    serve very different purposes. The Product Backlog shows all the work and ideas
    of the whole product, prioritized according to value by the Product Owner and
    available for the stakeholders to see; for example, the most prioritized features
    to be built into the product next.
  prefs: []
  type: TYPE_NORMAL
- en: In *Chapter 11, The Options Pivot*, we introduced the Product Backlog and showed
    how it emerged from Value Slicing and User Story mapping and was prioritized using
    practices such as Impact and Effort Prioritization, How-Now-Wow Prioritization,
    the Cost of Delay, and Weighted-Shortest-Job-First. From earlier chapters, we
    know that the Product Backlog items are all generated from practices and conversations
    on the Discovery Loop such as Impact Mapping, Event Storming, Human-Centered Design,
    Non-Functional Mapping, and Metrics-Based Process Mapping.
  prefs: []
  type: TYPE_NORMAL
- en: The Product Backlog is such an important artifact that it should be displayed
    prominently, accessible to everyone, and should regularly be used by Product Owners,
    Development Team members, and ScrumMasters—as well as other stakeholders, and
    anyone else interested in the next steps of this product.
  prefs: []
  type: TYPE_NORMAL
- en: The Product Backlog is living and breathing and can be updated at any time.
    All the practices that lead to Product Backlog items also have artifacts that
    are living and breathing at any time. So, a stakeholder at any time might have
    a new impact or deliverable idea that can go straight onto the Impact Map. The
    Development Team may gather for a time-boxed Event Storming session during their
    sprint to refine and answer some unanswered questions on the existing Event Storm,
    or they may start an Event Storm on a whole new area of the business. More user
    interviews, Human-Centered Design, and Empathy Mapping should continue. All of
    this will result in refined, improved, and new ideas that can be processed through
    Value Slicing, prioritized, and ending up on the Product Backlog.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.14: Product Backlog publicly displayed on a wall'
  prefs: []
  type: TYPE_NORMAL
- en: The Sprint Backlog is a different artifact that is more micro-focused for a
    specific sprint or Delivery Iteration.
  prefs: []
  type: TYPE_NORMAL
- en: The Sprint Backlog Artifact
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Sprint Backlog is created during the Sprint Planning Event and shows all
    of the items the team has pulled from the Product Backlog into the Sprint Backlog
    (having assessed they are ready, according to their Definition of Ready). What
    results from a Sprint Planning session is a Sprint Backlog on a highly utilized
    and very important information radiator—the Sprint Board.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_15_1.jpg)![](img/B16297_12_15_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.15: A Sprint Backlog on a Sprint Board'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Sprint Board is one of the artifacts that sees the most use during a Delivery
    Loop iteration and one of our favorite information radiators. In the preceding
    example, the following information is shown:'
  prefs: []
  type: TYPE_NORMAL
- en: The Sprint number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Sprint Goal—a one- or two-sentence description of what the product should
    do in the next increment that it does not currently do. Ideally, this should link
    to the overall Target Outcomes agreed in the Discovery Loop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Key dates—the Sprint Planning, Sprint Review, and Sprint Retrospective day,
    and the time required for this sprint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Sprint Backlog items that have been pulled from the Product Backlog. There
    is a one-to-one matching and should be easily traceable from Product Backlog to
    Sprint Backlog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Acceptance Criteria that have been agreed for each Sprint Backlog item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The low-level tasks that are needed to deliver the features according to agreed
    acceptance criteria. These are color-coded to radiate the cross-functional aspect
    of feature development, with different colors representing frontend and backend
    development, data, infrastructure, operations, and design.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Columns to represent the flow of work on each task—Sprint Backlog, In Progress,
    Blocked, Ready for Review, and Done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Avatars to show which pairs or mobs are working on a given task in the In Progress
    column.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Burndown chart,[16](#footnote-056) a popular visualization practice showing
    the pace of—in this case—tasks getting plotted against the timeline (in days)
    of the sprint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[16](#footnote-056-backlink) [https://openpracticelibrary.com/practice/burndown/](https://openpracticelibrary.com/practice/burndown/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The following template is available in the book's GitHub repository[17](#footnote-055)
    and can be downloaded to produce the same Sprint Board virtually.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.16: Digital Sprint Board template for a distributed team'
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the most impressive and powerful aspects of the Sprint Board is that
    it provides the (almost) final piece of traceability in the life of developing
    a given feature. If you walk-the-walls with all Discovery, Options, and Delivery
    artifacts available, you should be able to see a low-level task (typically a development
    activity performed by a pair of Development Team members that takes a few hours)
    and see its connection to:'
  prefs: []
  type: TYPE_NORMAL
- en: The overall feature/user story and the acceptance criteria on the Sprint Backlog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where that feature sits on the Product Backlog.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How that feature was prioritized using Value Slicing and other prioritization
    tools.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How that feature fits into the event-driven system and overall business process
    on the Event Storm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The measurable impact that was hypothesized with the feature on the Impact Map.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The actors captured on the Impact Map the features can be user-tested with.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The overall goal captured on the Impact Map and in Target Outcomes that this
    feature should be aiming to achieve.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The final piece of traceability is the working software, which is the third
    increment of the Scrum framework.
  prefs: []
  type: TYPE_NORMAL
- en: '[17](#footnote-055-backlink) [https://github.com/PacktPublishing/DevOps-Culture-and-Practice-with-OpenShift](https://github.com/PacktPublishing/DevOps-Culture-and-Practice-with-OpenShift)'
  prefs: []
  type: TYPE_NORMAL
- en: The Product Increment Artifact
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The seventh principle of the Agile Manifesto states that working software is
    the primary measure of progress. When the original writers of the Agile Manifesto
    met approximately ten years after the original manifesto was written, they ran
    a Retrospective event to see if their learning and experience would drive any
    updates to the values or principles. The general consensus was that it still held
    true, and nothing needed to change other than, in some cases, underlining the
    importance of working software.
  prefs: []
  type: TYPE_NORMAL
- en: Many Scrum teams fall down at this point and cannot show working software at
    the Sprint Review event. Even if they do have partially built software to show
    at this event, that is not enough. There should ALWAYS be working software to
    show.
  prefs: []
  type: TYPE_NORMAL
- en: Show Me the Product!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the many techniques we use to create awareness and share ways of working
    between our staff at Red Hat Open Innovation Labs is to share short write-up summaries
    during a residency engagement.
  prefs: []
  type: TYPE_NORMAL
- en: Often a similar summary is shared with customers with links to artifacts, photos
    of practices in action, and feedback captured or actioned.
  prefs: []
  type: TYPE_NORMAL
- en: Mark O'Callaghan is an Open Innovation Labs Engagement Lead based in New York.
    In January 2018, he was leading an engagement for UNICEF[18](#footnote-054) focused
    on data science with an emphasis on visualizing data from a couple of legacy applications
    to support UNICEF in Columbia.
  prefs: []
  type: TYPE_NORMAL
- en: Mark would share weekly email updates of this engagement with a Red Hat community
    of Labs strategy and other interested parties. In his weekly summary, he would
    always include a link to the latest version of the application. This was working
    software running on OpenShift.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an awesome example: it is always a good idea to have a Product Increment,
    a link to an app that people can click on — to look at, use, and provide feedback
    on.'
  prefs: []
  type: TYPE_NORMAL
- en: '[18](#footnote-054-backlink) [https://www.redhat.com/en/proof-of-concept-series](https://www.redhat.com/en/proof-of-concept-series)'
  prefs: []
  type: TYPE_NORMAL
- en: The final installation of our tour around the Scrum framework and how we use
    it is to explore five Scrum events – Sprint Planning, the Daily Scrum, the Sprint
    Review, the Sprint Retrospective, and the Sprint itself.
  prefs: []
  type: TYPE_NORMAL
- en: The Sprint Planning Event
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the previous part of this chapter, we showed the Sprint Board, an amazing
    information radiator that has a great amount of rich information about what the
    teams are currently doing and will be doing in this iteration of the Delivery
    Loop. The Sprint Planning Event is the event that generates this artifact. The
    Scrum Guide details how a Sprint Planning event should be run, who should attend,
    how long it should take, and so on. The following is how we tend to run it.
  prefs: []
  type: TYPE_NORMAL
- en: First, we establish a goal. This should be a one- or two-sentence summary of
    what the focus of the sprint is. What will the product do in a week's time that
    it does not do now? What outcome might it achieve? This is often a great conversation
    to have with the Product Owner holding the pen by the whiteboard ready to articulate
    his or her motivations in writing. But he or she always has tremendous support
    from the Development Team and a huge number of artifacts. It's useful to reflect
    on the Target Outcomes we established on the Discovery Loop, which should be nearby
    and visible. It's useful to look at the Product Backlog. If it has been well refined
    and prioritized, the items at the top should offer some clues as to what we might
    work on in this next iteration. Of course, it's useful to reflect and be reminded
    of all the wonderful information on other artifacts, Empathy Maps, and other user
    research, Impact Maps, Event Storms, Retrospective feedback, actions, and so on.
    Sometimes, we will draft the goal, then clarify and confirm it later on in the
    Sprint Planning event.
  prefs: []
  type: TYPE_NORMAL
- en: Next, the team will start to pull items from the Product Backlog working from
    the top – the Product Owner or Project Manager does not do this. It's important
    to move away from a push phenomenon associated with traditional delivery models
    and for the team to be engaged in pulling the items needed to achieve the goal.
  prefs: []
  type: TYPE_NORMAL
- en: When pulling items and adding them into the Sprint Backlog, the team should
    confirm that the items are indeed ready to be worked on by consulting their Definition
    of Ready. If, like us, you work in short one-week sprints, it can be difficult
    to find enough time in the week to do enough refinement to have all Definition
    of Ready criteria satisfied before Sprint Planning. So we often will take some
    time to ensure items are ready, acceptance criteria are written and understood,
    and the team is generally feeling comfortable and confident about the item in
    question.
  prefs: []
  type: TYPE_NORMAL
- en: The third step is to decompose the items into low-level tasks. We capture all
    the things we need to do to deliver this feature to satisfy the acceptance criteria
    and to meet the Definition of Done (which we'll cover shortly). This is a great
    opportunity to follow another diverge-converge pattern or liberating structure
    as introduced in *Chapter 4*, *Open Culture*, like 1-2-4-all. Getting everyone
    thinking about the work needed to deliver this increment and visualizing this
    is a really powerful aspect of this approach. This is detailed design on steroids!
    This is fixing bugs before we even write any code! As we saw in the example Sprint
    Board, using different-color sticky notes to reflect different types of tasks
    such as frontend, backend, data, design, infrastructure, operations, and so on,
    visualizes the cross-functional nature of the team.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.17: Product Owner Paul continues to iterate on his goal while a MakMakMakMak
    Development Team member pulls items from the Product Backlog into the Sprint Backlog'
  prefs: []
  type: TYPE_NORMAL
- en: After much collaboration, merging together of individual ideas for tasks into
    pairs, and then into pairs of pairs, and finally into a full group, we should
    have a Sprint Board, a complete visualization of the week ahead. The team should
    be fully aligned on the work that needs to be done. Now, can we achieve this?
    We finish the Sprint Planning event with a Confidence Vote – how confident are
    we? Can we meet the Sprint Goal by delivering the features in the Sprint Backlog?
    Can we satisfy all the Acceptance Criteria agreed and complete all tasks by the
    date of the Sprint Review on the board? Team members vote with their fingers—0
    or 1 means very low confidence and we need to re-scope or discuss what it will
    take to increase confidence. A group consensus of 4 or 5 is what we want, and
    this indicates confidence from the outset.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.18: Confidence Voting on achieving the Sprint Goal'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from the photographs, those big 8-foot by 4-foot foam boards,
    which we explained in *Chapter 5*, *Open Environment and Open Leadership*, are
    incredibly powerful as Sprint Boards. They are light and portable and can easily
    be transported to different areas of the build, for example, to the Daily Scrum
    or to a Daily Stand-Up event.
  prefs: []
  type: TYPE_NORMAL
- en: Iteration or Sprint Planning has its own entry in the Open Practice Library
    and is an excellent resource to find out more, contribute improvements, and discuss
    with the wider community the use of this practice. You can find this page at [https://openpracticelibrary.com/practice/iteration-planning/](https://openpracticelibrary.com/practice/iteration-planning/).
  prefs: []
  type: TYPE_NORMAL
- en: The Daily Scrum Event
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This event is the most popular Agile practice and is often how Agile teams start
    adopting Agile practices. Just meeting for 15 minutes each day to synchronize
    activities can be so valuable in keeping the team connected and driving autonomy.
  prefs: []
  type: TYPE_NORMAL
- en: We tend to find the team **talking to the board** works well. As each member
    summarizes what they worked on yesterday (to take the team towards its sprint
    goal), what they're planning to work on today (to take the team to its sprint
    goal), and any blockers or impediments (preventing the team from meeting its sprint
    goal), the board can be updated to ensure it is radiating the same information
    as what the team members are saying. Are the avatars of individuals showing the
    task they're working on? Have we agreed on what pairs or mobs are going to form
    for upcoming tasks? Are blockers clearly radiated in the Blocked column?
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.19: Daily Scrum practice'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Daily Scrum is often an event where **Scrum-but** antipatterns start to
    emerge. Scrum-but represents activities or behaviors that the Scrum team exhibit
    that do not conform to the Scrum framework. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: We use Scrum but all of our management shows up to Daily Scrums to get status
    updates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use Scrum but our Daily Scrums tend to run to between 30 and 60 minutes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use Scrum but we vary the time of our Daily Scrums and who attends.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are all anti-patterns to an incredibly simple practice that is purely
    for the Development Team to synchronize with each other and highlight any blockers.
    Jeff Sutherland often says if your Daily Scrum takes more than 15 minutes, you're
    doing it wrong.
  prefs: []
  type: TYPE_NORMAL
- en: If you have experiences to share about this practice or suggestions to improve
    it further, please go to the Open Practice Library page at [https://openpracticelibrary.com/practice/daily-standup/](https://openpracticelibrary.com/practice/daily-standup/).
  prefs: []
  type: TYPE_NORMAL
- en: Let's fast-forward to the end of the Sprint and look at a very valuable practice,
    the Sprint Review Event or Showcase.
  prefs: []
  type: TYPE_NORMAL
- en: The Sprint Review Event
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Scrum framework calls this event the Sprint Review and provides an opportunity
    to show the new Product Increment and invites feedback. This Open Practice Library
    entry is called the Showcase.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some hints and tips we''ve picked up on the Showcase are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: First, invite the world! This is such a wonderful opportunity to showcase the
    product increment to valuable stakeholders and users. It's helpful to schedule
    this event at the same time and place as every iteration and also make it accessible
    to join remotely – investing in good video conferencing systems can really improve
    engagement.
  prefs: []
  type: TYPE_NORMAL
- en: This is a great opportunity to reconnect with existing stakeholders and contributors
    to the Discovery Loop practices. Look at the actors on your Impact Map. Look at
    the people for whom we produced an Empathy Map. Can we get those folks back in
    to see the emerging product and provide further feedback?
  prefs: []
  type: TYPE_NORMAL
- en: 'The Showcase should not just be a showcase of shiny new functional features,
    but of everything the team has worked on and wants to show off to the wider stakeholder
    community. Often our Showcases will include:'
  prefs: []
  type: TYPE_NORMAL
- en: CI/CD infrastructure (and perhaps a demonstration of delivering a small code
    feature and how that triggers the CI/CD pipeline).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An update on UI/UX including any new user research or user testing performed,
    the evolution of prototypes, and the learning that has emerged.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The latest iterations of the Big Picture and emerging architecture.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing how the teams have worked and the practices they have used. This often
    includes what we call the Practice Corner—an information radiator made up of the
    Mobius Loop and Foundation, with all the practices that the team have been using.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An updated Product Backlog with words from the Product Owner about what to expect
    next.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A review of the overall Target Outcomes and Enabling Outcomes and whether this
    latest Product Increment has shifted the needle on the measures.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the Showcase in the same physical workspace as where the team normally
    works, opening the options for a walk-the-walls and inspection of all Discovery,
    Options, Delivery, and Foundation artifacts and information radiators.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B16297_12_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.20: Sprint Review/Showcase'
  prefs: []
  type: TYPE_NORMAL
- en: We will explore much more about the measurements and learnings, including those
    captured from Showcase events, in the next chapter. The Showcase should not just
    be limited to an event. We need to seek other creative ways to show the world
    what we've delivered and how we've delivered it in this latest iteration of the
    Delivery Loop.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned earlier, our Engagement Leads tend to do a short write-up to summarize
    progress and share the latest Product Increment and other artifacts. They send
    this via email to all stakeholders and anyone interested in the product and/or
    team. Visually, this can be enhanced by including a few photos of the event, or
    a short video montage of the team in action and the product evolving from the
    last sprint. Our engagement nearly always produces a series of weekly videos,
    which, when watched one after the other, produces an amazing story.
  prefs: []
  type: TYPE_NORMAL
- en: As we explained with the Product Increment Artifact, having working software
    is the most important ingredient of the showcase. Being able to provide a link
    to the application and inviting the Showcase audience to touch and feel the user
    interface is very engaging. Having a laptop in the workspace that always has the
    latest increment of the working software product running is great for stakeholders
    visiting the workspace, walking the walls, tracing feature history through all
    the practices, and seeing them for real in the product.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, Showcases are limited in value if we do not get feedback from them.
    Great ScrumMasters and Engagement Leads will be creative around ways to do this.
    Don't just limit this to an *any questions or feedback* session at the end. Allow
    online feedback in a Google document, or open a feedback channel on Slack or via
    SMS. Invite value voting from stakeholders or use Net Promoter Score to capture
    fresh metric-based feedback on how likely stakeholders are to recommend the product
    and/or team.
  prefs: []
  type: TYPE_NORMAL
- en: When WOULD We Have Uncovered This In a Traditional Mode of Delivery?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](img/author_face_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I was working with a team a few years ago to build a new shopping portal for
    a telecom company in Ireland. We used a Design Thinking framework to gather a
    list of features to develop a product based on Empathy Mapping, scenario maps,
    pain points, and opportunities captured. Getting information directly from users
    was gold, and we distilled all of our learning from them into three Target Outcomes
    for the initial release of the product. We built up a Product Backlog of features
    to build up our portal product.
  prefs: []
  type: TYPE_NORMAL
- en: Then, after five weeks of Discovery, we adopted Scrum. Two-week sprints each
    delivered an increment of the product. Each Sprint included a Sprint Planning
    event, Daily Scrums, a Sprint Review, and a Sprint Retrospective.
  prefs: []
  type: TYPE_NORMAL
- en: If you look at the photograph, it is actually from the Sprint 2 Review! I chose
    this photo because seconds after I took it, the lady just out of the shot called
    out how we'd completely missed some key complexity in pricing administration.
    It was something we had not considered until this moment.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.21: Sprint 2 Review'
  prefs: []
  type: TYPE_NORMAL
- en: This incident highlights the positives of early and regular feedback on an evolving
    product. When would this have been caught if we were not attempting Scrum?
  prefs: []
  type: TYPE_NORMAL
- en: It also highlighted that such feedback triggers the need for some further discovery
    (for example, through Design Thinking).
  prefs: []
  type: TYPE_NORMAL
- en: This example frames nicely where the learning and feedback from a Delivery Loop
    can trigger the need to return to the Discovery Loop. We'll be exploring this
    and other patterns when we return to the Options Pivot in *Chapter 18*, *Sustain
    It*.
  prefs: []
  type: TYPE_NORMAL
- en: To share experiences, learning, contribute improvements to this practice, or
    simply read more about it, take a look at [https://openpracticelibrary.com/practice/showcase/](https://openpracticelibrary.com/practice/showcase/).
    We'll also return to other ways to capture metric-based feedback in the next chapter.
    The Showcase is one of the main forums for collecting this. Another one is the
    Sprint Retrospective Event.
  prefs: []
  type: TYPE_NORMAL
- en: The Sprint Retrospective Event
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is by far the most important practice in this book. If we don't do Retrospectives,
    we don't learn. If we don't learn, we don't improve. If we don't improve, what's
    the point of all of this?
  prefs: []
  type: TYPE_NORMAL
- en: In *Chapter 4, Open Culture*, we introduced Retrospectives as a feedback mechanism
    and, in particular, we introduced the Real-Time Retrospective practice as a great
    way to build an open culture into the team's foundation. Hopefully, the Real-Time
    Retrospective practice has worked well and continued to be used during the journey
    through the Discovery Loop, the Options Pivot, and the Delivery Loop. It offers
    an immediate place to add feedback in reaction to something happening in real
    time.
  prefs: []
  type: TYPE_NORMAL
- en: Retrospectives are short events where the team can take a break from what they
    are doing, take some time out to inspect how they have been working, and reflect
    on what has been working well, what hasn't, and what can be adapted and improved.
  prefs: []
  type: TYPE_NORMAL
- en: If you were involved in a long traditional Waterfall program, you may have done
    some kind of **Lessons Learned** exercise at the very end. This is where everyone
    sits down and captures all the things they might have done differently if they
    were to start over again now. It all gets written up and filed away in some shared
    drive. If we're lucky, some other team or project might benefit from this learning
    but, often, it never gets looked at again. Well, Retrospectives are just like
    this BUT they happen much more regularly and the team in question gets to benefit
    from the learning as they go along!
  prefs: []
  type: TYPE_NORMAL
- en: Retrospectives can happen at any time. In fact, you may well want to schedule
    a Retrospective after a long Event Storming session or after a first Product Backlog
    prioritization meeting. It is a foundational concept in the Open Practice Library
    as it is a tool that can be used at any time. A Sprint Retrospective is an event
    we run at the end of the Sprint or Delivery Loop. The Scrum framework states that
    it should happen immediately after the Sprint Review.
  prefs: []
  type: TYPE_NORMAL
- en: There are hundreds of different formats, styles, and themes of Retrospectives.
    People are coming up with new, fun, creative, and energetic ways to run Retrospectives
    all the time. Check out the Retrospective page of the Open Practice Library[19](#footnote-053),
    which has links to many of these. If you have a link to your own personal favorite
    or have run your own, you could submit a pull request and add it!
  prefs: []
  type: TYPE_NORMAL
- en: We're going to share a few different ways we have run Retrospectives and differentiate
    between *Retrospectives of breadth* and *Retrospectives of depth*.
  prefs: []
  type: TYPE_NORMAL
- en: A Retrospective of breadth essentially inspects the time period that the event
    is focused on and asks what worked well, what did not, and what could be done
    to be better next time so as to address the things that did not work so well.
  prefs: []
  type: TYPE_NORMAL
- en: Our recommended approach to a Retrospective is to use a *diverge-converge* technique
    or liberating structure to ensure everyone has an opportunity to contribute their
    feedback. So, start by allowing a few minutes for everyone to silently write down
    their feedback on what worked well, what didn't, and corrective action that could
    be taken.
  prefs: []
  type: TYPE_NORMAL
- en: Then we converge and merge everyone's ideas together on an information radiator.
    We cluster common themes and have short discussions to achieve alignment. Finally,
    we agree on a set of corrective actions to come out of the Retrospective, prioritize
    them, and agree on owners to take them forward.
  prefs: []
  type: TYPE_NORMAL
- en: '[19](#footnote-053-backlink) [https://openpracticelibrary.com/practice/retrospectives/](https://openpracticelibrary.com/practice/retrospectives/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next Retrospective should always open by reviewing the previous Retrospective''s
    actions. The following are a few alternative ways to ask those questions and provide
    headings on the Retrospective''s information radiator:'
  prefs: []
  type: TYPE_NORMAL
- en: What should we START in the next sprint that we're not currently doing? What
    should we STOP in the next sprint that we are currently doing? What should we
    CONTINUE doing? What should we do MORE OF? What should we do LESS OF?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What should we ADD? What should we DROP? What should we KEEP? What should we
    IMPROVE?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What made us GLAD in the last sprint? What made us MAD? What made us SAD?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What did we LIKE in the last sprint? What did we LEARN? What did we LACK? What
    did we LONG FOR? This format is known as the **4Ls**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing a simple canvas for one of these approaches will allow the team to
    collect and organize their feedback and radiate the resulting learning and actions
    for all to see.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.22: Popular Retrospective formats'
  prefs: []
  type: TYPE_NORMAL
- en: 'A slightly more creative and fun approach that has become popular is to use
    analogies to reflect and inspect the previous sprint. Canvases can be prepared
    with a theme such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Sailboat**: What is our island—the goal or target we are aiming for?
    What is the wind—the things that will take us there? What things represent the
    anchor dragging us back and slowing us? What are the rocks or the risks that we
    might be overlooking?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Hot Air Balloon**: The hot air represents the things that are helping
    us rise up. What represents the weights that might be dragging us down? What is
    the sun that we want to steer towards for a smooth ride? What is the bad weather
    that might give us a bumpy ride?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Motor Racing Car**: What is the engine moving us forward? What is the
    parachute slowing us down?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are many other similar formats: the *Three Little Pigs* Retrospective
    with the houses made of straw, sticks, and bricks; the Star Wars Retrospective
    with the light side and the dark side. We''ve even followed musically themed Retrospectives
    such as Elvis and ABBA, where song titles represent the different inspection aspects.'
  prefs: []
  type: TYPE_NORMAL
- en: Some of the common pitfalls of Retrospectives include focusing far too much
    on the negative and not enough on what has worked well. A good way to look at
    this is if something has been working really well, how might we **turn up** this
    behavior and do even more of it? Another common pitfall is failing to capture
    Retrospective items. It's very easy to whine for an hour about all the things
    that have annoyed us. But what tangible thing can we do to fix it or at least
    make it better?
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, sometimes we come up with too many things we want to fix
    and too many ideas for improvement. Use a prioritization practice (such as those
    outlined in the previous chapter) and radiate the actions on its own backlog,
    for everyone to see and help with.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.23: Example Retrospective canvas and actions list'
  prefs: []
  type: TYPE_NORMAL
- en: Retrospectives should be fun and engaging. They should be something the team
    looks forward to and has everyone motivated to inject energy into. This is an
    opportunity for the team to continuously improve.
  prefs: []
  type: TYPE_NORMAL
- en: To help keep them engaged, especially for long-lived product teams, it really
    helps to mix up the format. Try new ideas out for Retrospectives. Rotate the facilitator
    around the team so they can share the ownership of this practice, figuring out
    what works well with Retrospectives and what we should do more of, and what doesn't.
    In other words, sometimes we should run Retrospectives on our Retrospectives!
  prefs: []
  type: TYPE_NORMAL
- en: A final tip comes from years of experience running Retrospectives away from
    the normal place of work and what we infamously call **The Pub Retro**.
  prefs: []
  type: TYPE_NORMAL
- en: The Pub Retro!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](img/author_face_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Back in 2007, I was experiencing a great Scrum team for the first time. I had
    dipped my toe into Agile in the previous couple of years, but it was really a
    mismatch of practices with a lot of Scrum-buts! One suggestion from a team member
    (who had come from a high-performing software house and was very skilled in Scrum)
    was to take our Retrospectives off-site and run them down at a local pub. He felt
    that removing people from their day-to-day workspace enabled them to look back
    and reflect on how the previous sprint had gone.
  prefs: []
  type: TYPE_NORMAL
- en: We also recognized that, in traditional projects, after many months of effort,
    the software would go live, and we would usually celebrate that with some kind
    of event. With Scrum, we should potentially ship our software at the end of every
    sprint and we should strive to go live with every sprint as we steer towards continuous
    delivery. Therefore, it's right to celebrate, and what better place to do that
    than down at the local pub?
  prefs: []
  type: TYPE_NORMAL
- en: A final point to make is that people can be a little more honest in a relaxed
    pub atmosphere, and more creative with their ideas. I must say, over the years,
    some of the very best ideas for improvement have come out of pub Retrospectives!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.24: Pub Retrospective'
  prefs: []
  type: TYPE_NORMAL
- en: Of course, it's important to bring all the artifacts and learning captured back
    to the physical workspace and that the Retrospective actions are included in backlogs,
    so they are prioritized and actioned.
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the location on Retrospectives. My teams have gone beyond pubs
    by doing things like ten-pin bowling, urban golf, and meeting at a nice café and
    having a *retro*-*breakfast* together!
  prefs: []
  type: TYPE_NORMAL
- en: There is so much to share about Retrospectives. Please take a look at [https://openpracticelibrary.com/practice/retrospectives](https://openpracticelibrary.com/practice/retrospectives).
    There are several great links to resources on the page. If you have found a brilliant
    Retrospective format to contribute, please do add it by hitting the *Improve this
    Practice* button on the page.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have been through the 3-5-3 of Scrum and got some anecdotes and
    learnings from our use of it, let's see Scrum in action with the PetBattle team.
  prefs: []
  type: TYPE_NORMAL
- en: 'A Sprint in the Life of PetBattle: Getting Ready'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The PetBattle team decided to work on a one-week sprint cadence. Aidan, Emma,
    and Jen had used Scrum previously, but always with two-week sprints; they saw
    this as an opportunity to tighten the feedback loop and deliver outcomes quicker.
  prefs: []
  type: TYPE_NORMAL
- en: Reminding themselves of the Scrum values and framework, the team drew up who
    was in the Scrum team on one of the unused whiteboards. There would be a single
    Scrum team (for now). Valerie would, of course, be the Product Owner. The cross-functional
    Development Team would be made up of four engineers (Ciaran, Aidan, Emma, and
    Jen), the UX Designer (Dave), and the Quality Assurance expert (Susan). Eoin would
    be the ScrumMaster.
  prefs: []
  type: TYPE_NORMAL
- en: Valerie was very proud of her Product Backlog. She felt, through using all the
    Discovery Loop and Options Pivot practices, it was well understood by her stakeholders
    and had been well prioritized using the WSJF economic prioritization model.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.25: PetBattle Product Backlog'
  prefs: []
  type: TYPE_NORMAL
- en: The team had their Definition of Ready up on the wall and had been running short
    Product Backlog Refinement sessions to get the top ten items of the Product Backlog
    ready according to the Definition of Ready. This meant talking through the items
    with Valerie (who occasionally would bring in a stakeholder or two to support
    the conversation), writing acceptance criteria.
  prefs: []
  type: TYPE_NORMAL
- en: The team used the Confidence Voting practice to assess whether they felt the
    item could be delivered within a few days of development. They would also talk
    through and update the emerging Logical Architecture diagram to ensure they had
    a collective understanding as to how the feature would be built. Dave had been
    doing lots of sketches and wireframes for the UI and would add these to the conversation
    at the appropriate point.
  prefs: []
  type: TYPE_NORMAL
- en: The Sprint cadence was set. Sprint Planning would take place between 10:00 and
    12:00 every Thursday morning. Daily Scrum meetings would be scheduled between
    09:30 and 09:45 every morning. The Sprint Review showcase would take place on
    Wednesday afternoons at 15:00, immediately followed by the Sprint Retrospective,
    which would be held off-site at 16:30.
  prefs: []
  type: TYPE_NORMAL
- en: 'A Sprint in the Life of PetBattle: Sprint 1 Planning'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first Sprint Planning meeting was excellently facilitated by Eoin, who had
    the agenda up on the wall and managed the time effectively. The team spent 15
    minutes talking about the Sprint 1 Goal. Valerie wanted to see the PetBattle app
    up and running so that she could share a link to it with Mary and a few others
    who volunteered to be user testers. For her to do this, she reckoned a great place
    to start would be by being able to add her pet and starting a competition. If
    the app could do this in a week, she'd be happy. Jen was super keen to use all
    the green from go work they'd done when establishing the technical foundation
    and ensuring that all components were being built using CI/CD with automated deployment
    and tracking. The four engineers were really keen to take an Ops-first mindset
    approach and ensure, from the offset, that they had a good, automated recovery
    framework in place as well as configurable logging.
  prefs: []
  type: TYPE_NORMAL
- en: Bringing all these thoughts together, the team agreed on the Sprint 1 Goal to
    build the walking skeleton of PetBattle, connecting f/e to API to database underpinned
    by CI/CD, and provide the foundation for operations.
  prefs: []
  type: TYPE_NORMAL
- en: Next up on the agenda was to pull items from the Product Backlog, do a final
    check that they were ready, and place them in the Sprint Backlog. Eoin suggested
    the team copy the sticky notes and leave the Product Backlog information radiator
    complete. He would mark the items on the Product Backlog as they were added to
    the Sprint 1 Backlog. Eoin also had the idea to show on the Sprint Backlog what
    outcome the item was linked to. This was easy to see by referring to the Value
    Slice board. Overall, this simply meant that we had a great information radiator
    showing how outcome-focused the team was.
  prefs: []
  type: TYPE_NORMAL
- en: The team pulled the top ten items on the Product Backlog into the Sprint Backlog.
    They talked through and made some final edits to the acceptance criteria. Valerie
    was excited because this would deliver the entire top slice of value from her
    Value Slicing in just one week! Aidan and Ciaran started to get a bit nervous
    as the sprint backlog filled up. They were really pleased that the sprint balanced
    functional development versus non-functional and work focused on operations. The
    team also loved that they could do some educational workshops on CI/CD and put
    the long-awaited breakfast and lunch planning in place to help improve the culture.
    But there was some nervousness around the TLS security and ensuring the performance.
    This would need some technical spikes and research and, with just four working
    days until the first Showcase, Aidan and Ciaran were worried that they would not
    have the time to do everything.
  prefs: []
  type: TYPE_NORMAL
- en: They still proceeded to the second part of the Sprint Planning event and decomposed
    all the items into tasks. They decided to color-code their tasks, which would
    all be written on square sticky notes. Pink stickies would represent application
    development. Blue stickies would represent UI/UX and frontend development. Light
    green tasks would be focused on data configuration. Purple stickies would be automation.
    Dark green stickies would be infrastructure and platform work. Yellow stickies
    would be testing. There were some other tasks that were focused on culture, team
    building, and other squishy/fluffy stuff! They decided to call these squishy tasks,
    and these would be on the orange stickies.
  prefs: []
  type: TYPE_NORMAL
- en: The team divided into pairs and each pair focused on two features. Every 5 minutes,
    they rotated the story so every pair could think about tasks for every feature.
    All tasks were then added to the Sprint Board, duplicates were removed, and a
    discussion took place on each task, until the teams were confident they had all
    the low-level details to deliver regarding each item on the Sprint Backlog as
    per the agreed acceptance criteria.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, Eoin facilitated a confidence vote using the Fist of Five. After a
    count of three, everyone displayed with their fingers (one to five) how confident
    they were that they would achieve the Sprint Goal, by delivering the sprint backlog
    according to the acceptance criteria and tasks set out by next Wednesday at 15:00\.
    The votes ranged from two to four with Ciaran, Aidan, Emma, and Jen all voting
    with just two fingers. The nervousness around getting all ten features done was
    growing. After some discussion, Valerie suggested removing the security- and performance-related
    items and putting them back on the Product Backlog. A second confidence vote now
    had everyone voting either four or five and there were many more smiles around
    the team!
  prefs: []
  type: TYPE_NORMAL
- en: The Sprint Board was ready, which included a Burndown chart to visualize the
    progress of the 26 tasks on the board.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.26: PetBattle Sprint 1 Board following Sprint Planning'
  prefs: []
  type: TYPE_NORMAL
- en: Now we've seen Sprint 1 Planning complete, let's see how the team got on with
    its delivery.
  prefs: []
  type: TYPE_NORMAL
- en: 'A Sprint in the Life of PetBattle: Sprint 1 Delivery'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sprint 1 got underway. True to their social contract, the team worked as a mob
    when learning something for the first time and in pairs for all other tasks. They
    had their Daily Scrum every morning, not always at 09:30, and sometimes it ran
    over 15 minutes. This is something that would end up being discussed at the Sprint
    Retrospective.
  prefs: []
  type: TYPE_NORMAL
- en: Following constant nagging by Eoin, the team started to get better at updating
    the Sprint Board, with their avatars showing more clearly who was working on what.
    They also became more familiar with the Burndown chart, which showed how many
    tasks had been moved to Done at different points in time during the sprint. There
    was some confusion as to when the team could say a feature or task was done. Again,
    this would come up in the Sprint Retrospective.
  prefs: []
  type: TYPE_NORMAL
- en: Before that, at 15:00 on Wednesday, the team had been working frantically to
    get their final tasks done; they were nearly done, but a few remained in progress.
    The CI/CD had been working well and there was a version of the app promoted to
    their testing environment during the morning of their Sprint Review.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.27: PetBattle Sprint 1 Board completed'
  prefs: []
  type: TYPE_NORMAL
- en: 'A Sprint in the Life of PetBattle: Sprint 1 Review And Retrospective'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A few stakeholders showed up to the Sprint Review, but not as many as Valerie
    had hoped for. They had to think about how best to share the updates. The Sprint
    Review had a few glitches here and there but, on the whole, did not go badly for
    a first sprint. Valerie explained the goal she'd set for the team and Eoin ran
    through the Sprint Board. The team, one by one, showed the features they had been
    working on. Some were shown using the app's new frontend. Some were more technically
    involved and the demonstration consisted of walking through config files and running
    some tests. They even showed the breakfast and lunch rota and how they had set
    up a working relationship with Deliveroo! Dave shared a UX update and his plans
    to run some more user tests in the next sprint. Susan showed the automated testing
    framework up and running and even ran the automated tests during the demo.
  prefs: []
  type: TYPE_NORMAL
- en: The showcase closed with Ciaran showing the updated big picture with the latest
    CI/CD infrastructure that this demo had been based on. Eoin brought out a new
    Information Radiator called **The Practice Corner**. This was a big Mobius Loop
    and Foundation that showed all the practices the team had used to date to build
    their Foundation, to get them round the Discovery Loop, through to the Options
    Pivot, and now completing the first Delivery Loop iteration. This really brought
    home how all the practices they had used fitted together. Stakeholders were invited
    to walk the walls to explore them in a bit more detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Development Team adjourned with Eoin to the local pub where they brought
    a load of sticky notes. They ran their Sprint 1 Retrospective, which was run using
    the simple *Start-Stop-Continue* format. The team collectively came up with a
    great summary of the sprint and they agreed that they should:'
  prefs: []
  type: TYPE_NORMAL
- en: CONTINUE pairing and mobbing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: STOP being late for Daily Scrums
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: START holding free weights during Daily Scrum updates to stop updates from going
    on so long
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: START a social playlist to have some music in the afternoon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: START using the Definition of Done practice (including writing the Definition
    of Done in Sprint 2)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CONTINUE using and improving the CI/CD solution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: START having more information radiators such as build monitors and test scores
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The team raised their glasses and toasted SPRINT ONE DONE! The next morning,
    they'd start all over again with Sprint 2 planning.
  prefs: []
  type: TYPE_NORMAL
- en: These PetBattle stories provide an example of the full Scrum delivery cycle.
    As the team choose to do more delivery loops, the same processes are repeated.
  prefs: []
  type: TYPE_NORMAL
- en: Using Scrum with distributed people
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As with earlier practices introduced in this book, the practices introduced
    in this chapter and on the Delivery Loop are highly collaborative and visual.
    A strong success factor is having Scrum teams co-located and being able to use
    physical artifacts like Product Backlogs and Sprint Backlogs.
  prefs: []
  type: TYPE_NORMAL
- en: But many Scrum teams have succeeded with using Scrum with the people distributed,
    especially when they have invested in strong digital collaboration and video conferencing
    tools. The importance of culture and psychological safety introduced in *Chapter
    4*, *Open Culture*, is even more significant here and, crucially, the ability
    to learn and continuously improve. This is key to the success of Scrum teams,
    so investing the time to facilitate that environment of continuous learning can
    set up distributed Scrum teams for success.
  prefs: []
  type: TYPE_NORMAL
- en: There are many tools that will emulate every practice and the way of working
    used physically in the room. We look to replicate every practice we would use
    in a room to work online and in real time. So, if a team used sticky notes and
    whiteboards to collaborate during Sprint Planning, they need to be able to do
    that using a tool. If they use a big board for the Product Backlog, they need
    a tool to host that online. If they used Confidence Voting or planning poker for
    relative estimation, they need a tool to allow them to continue to do that. If
    they use a Burndown chart in the room, they need to find a way to keep doing that
    online.
  prefs: []
  type: TYPE_NORMAL
- en: To help you get started, we have provided a simple Sprint Board that can be
    used to build Sprint Backlogs during Sprint Planning, plan for feature demos during
    Sprint Reviews, and radiate the learnings during Sprint Retrospectives. This is
    available to download at [https://github.com/PacktPublishing/DevOps-Culture-and-Practice-with-OpenShift](https://github.com/PacktPublishing/DevOps-Culture-and-Practice-with-OpenShift).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.28: Digital Sprint Board for use by distributed teams'
  prefs: []
  type: TYPE_NORMAL
- en: To complete this section about Scrum, we're going to drop a bit of a bombshell.
    Scrum is sub-optimal. Scrum does not comply with Continuous Delivery. Scrum can
    actually create bottlenecks in delivery rather than removing them!
  prefs: []
  type: TYPE_NORMAL
- en: You might now be wondering why we have spent so much time and pages explaining
    Scrum, sharing stories and learnings from using Scrum, and having our PetBattle
    team adopt Scrum. Well, Scrum provides a much-needed cadence and set of guardrails
    to start working in a more agile manner. Often, new or immature teams need these
    guardrails and frameworks to stay on the right path and ensure value is being
    delivered. But, as teams mature and get better, there may be a time when we can
    remove some or all of those guardrails.
  prefs: []
  type: TYPE_NORMAL
- en: When should we stop Scrumming?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many teams love Scrum, as do stakeholders. The rhythm of being able to see outcomes
    delivered earlier more frequently is very satisfying and it corrects many of the
    problems experienced with the traditional Waterfall development of complex systems.
  prefs: []
  type: TYPE_NORMAL
- en: In *Chapter 11,* *The Options Pivot*, we talked about how the Product Owner
    should aspire to remove the need for themselves because the Development Team is
    so well connected to users and stakeholders, with strong psychological safety
    for two-way feedback and conversation. Earlier in this chapter, we talked about
    how the ScrumMaster should aspire to remove the need for themselves because they
    have facilitated an environment that is full of information radiation and very
    strong adoption of practices by a team that is fully autonomous, self-correcting,
    self-organizing, and continuously improving. The Product Owner and ScrumMaster
    have two very strong guardrails that facilitate the Scrum framework. They may
    never come down, but we should aspire.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at some other examples of guardrails that we might wish to remove.
  prefs: []
  type: TYPE_NORMAL
- en: Teams asking questions that suggest we've matured out of Scrum
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](img/Noel.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Having worked with long-lived Scrum teams for several months, it''s incredibly
    pleasing to see them continuously improve and become more autonomous with time.
    A pattern I''ve noticed with high-performing teams is that, after a while, they
    start to ask some very good questions about the processes and practices they are
    using. Some examples of questions I''ve had from ScrumMasters, Product Owners,
    and Development Team members include:'
  prefs: []
  type: TYPE_NORMAL
- en: Why are we waiting X days to demo/release? Scrum has the Sprint Review event
    scheduled on the last day of every sprint. But sometimes a team will complete
    a feature and be ready to demo it and release it on the first day of the sprint!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why don't we continuously run Retrospectives? The Real-Time Retrospective is
    an awesome practice at capturing retrospective feedback and actions in more of
    a real-time manner rather than waiting until the end of the sprint. If this is
    being used effectively by the team, maybe there is less of a need to wait until
    the end of the sprint to agree on improvement actions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why are we doing these 15-minute daily standups when we already know what everyone
    is doing? This holds particularly true when the team is using mob programming
    more and more. The team members are so connected with each other and collaborate
    so closely that there is less of a need to formally synchronize every day.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Product Owner I worked with at a European automotive company had a big *A*-*ha*
    moment in his fifth sprint when he asked, "*Why am I waiting till the end of the
    sprint to see feature X*?" He wanted to steer the team into a mindset whereby,
    "*When you've done a feature*, *show it to me and*, *if I'm happy with it*, *let's
    just ship it then and there.*"
  prefs: []
  type: TYPE_NORMAL
- en: The examples above show how Scrum might actually inhibit continuous delivery.
    They can, of course, release more frequently than just once in the sprint. The
    Scrum framework does not say that you can or should only release once.
  prefs: []
  type: TYPE_NORMAL
- en: Teams may also feel, when they reach these points of realization and maturity,
    that they would be able to deliver more continuously if they moved to a different
    approach, to deliver and adopt Kanban.
  prefs: []
  type: TYPE_NORMAL
- en: Kanban
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Kanban is Japanese for *signboard*. Kanban has its roots as a scheduling system
    used in *lean* manufacturing in the car industry and, in particular, Toyota cars.
  prefs: []
  type: TYPE_NORMAL
- en: In the context of Agile, Kanban is another methodology. It specifically strives
    to better coordinate and balance work amongst team members. Most famously, it
    employs a *Kanban* to help visualize the process. The board is split into categories
    of *work to be done*, *work in progress*, and *completed work*. Each task is written
    onto a card that moves from column to column as it progresses through the team's
    process. Tasks are prioritized. The board keeps everyone on the same page and
    is highly visible, so it allows corrections to be made easily.
  prefs: []
  type: TYPE_NORMAL
- en: Kanban Board!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](img/Author_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When running our DevOps Culture and Practice Enablement workshop with members
    of our Open Innovation Labs team in 2018, we had the pleasure of meeting our colleagues
    in Japan. A lot of the lean culture and processes we describe in this book originate
    from Japan, so we always learn a lot from collaborating with our peers there.
  prefs: []
  type: TYPE_NORMAL
- en: During the course, we referred to the Kanban board many times, which seemed
    to generate some laughter! Our Japanese colleagues eventually told us not to say,
    **Kanban board** as we were really saying **signboard board**. That's why we now
    refer to the artifact as the Kanban.
  prefs: []
  type: TYPE_NORMAL
- en: Kanban requires strict limits on the number of tasks in progress at any given
    time. This is called the *Work In Progress,* or WIP limit. No new work can enter
    the column once the WIP limit is reached. Teams need to work collaboratively to
    fix issues, identify bottlenecks, and get tasks Done. This collaborative work
    style leads to continual improvement of the team's processes. The team can meet
    periodically to discuss changes that are needed, and these are displayed on the
    Kanban.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.29: Example Kanban'
  prefs: []
  type: TYPE_NORMAL
- en: Scrum and Kanban are not mutually exclusive. In fact, in our PetBattle example,
    we walked through the team using Scrum but, in the Sprint Board, they were using
    Kanban to visualize and track work.
  prefs: []
  type: TYPE_NORMAL
- en: PetBattle – Release Early, Release Often, Release Continuously
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Implementing and delivering the PetBattle Tournament feature needed to be done
    quickly. The existing hobbyist application was developed in a very ad hoc manner,
    so there is little current process. Adopting Agile Scrum or Kanban looked like
    a great place to start for the cross-functional team.
  prefs: []
  type: TYPE_NORMAL
- en: Can the team decide when the *PetBattle Tournament Feature* gets deployed to
    production? YES! Can the team decide how to build, test, and deploy the *PetBattle
    Tournament Feature*? YES! By allowing the team to be autonomous, decision-making
    happens wherever the information is within the team. This trust and delegation
    of the PetBattle app delivery by the founders to the team is crucial to the product's
    future success.
  prefs: []
  type: TYPE_NORMAL
- en: Kanban has its own page in the Open Practice Library, which can be used for
    more information, discussion, and improvement, at [https://openpracticelibrary.com/practice/kanban/](https://openpracticelibrary.com/practice/kanban/).
  prefs: []
  type: TYPE_NORMAL
- en: An important practice that we have not yet introduced and that applies to teams
    using both Scrum and Kanban is the Definition of Done.
  prefs: []
  type: TYPE_NORMAL
- en: The Definition of Done
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What does Done mean in the context of writing software features? Does it mean
    your code builds and runs on your computer? Does it mean testing has been performed?
    Does it mean the code has been checked in? What about documentation? What about
    operational readiness? These are all good questions, and the chances are that
    if you ask these questions to different people, you will get very different answers.
  prefs: []
  type: TYPE_NORMAL
- en: When we use a Kanban and/or a Sprint Board in Scrum, there is a column on the
    right with the title DONE. So, what does Done mean here? This is why we use a
    Definition of Done practice. The Definition of Done is a criterion agreed across
    the team and shared with others that should be met before any work items are considered
    complete by any team member. It is *collaboratively created, maintained, and enforced
    by the team* where non-functional and functional work that should be performed
    for each and every work item can be managed.
  prefs: []
  type: TYPE_NORMAL
- en: Earlier in this chapter, we talked about how we write Acceptance Criteria against
    features or stories on the Product Backlog. This is a specific criterion that
    applies to the context of the feature in question and only that feature. The Definition
    of Done criteria is additional criteria that also needs to be considered in the
    planning and delivery of every feature.
  prefs: []
  type: TYPE_NORMAL
- en: So, if we say that we are always going to check code into a source-code control
    system to trigger a CI build and a feature should not be considered done unless
    this has been done, we can add this to the Definition of Done. If a team agrees
    that we should always have a percentage of the code covered by automated tests
    and we should never fall below that given percentage, we can write Definition
    of Done criteria to manage this.
  prefs: []
  type: TYPE_NORMAL
- en: PetBattle – Definition of Done
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Sprint 1, the PetBattle team had a Definition of Ready in place and it worked
    effectively in ensuring that items they accepted into the Sprint were well understood
    and the team had confidence they would complete them in the sprint.
  prefs: []
  type: TYPE_NORMAL
- en: However, they did not write a Definition of Done. This led to some challenges
    during the sprint as there was ambiguity as to what should happen before a feature
    is considered Done. It came up in the Sprint Retrospective discussion and the
    team agreed to run a Definition of Done workshop during Sprint 2.
  prefs: []
  type: TYPE_NORMAL
- en: 'Eoin facilitated this and asked the question of what should always be done
    when working on a Sprint Backlog item, regardless of what it is. The team came
    back with several suggestions:'
  prefs: []
  type: TYPE_NORMAL
- en: The code and any other artifacts must always have been committed to a feature
    branch in Git.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The feature branch should have been merged into the master.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CI build should always have run with all tests passing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will have checked the documentation folder and made any updates to product
    documents to support the work being done.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Product Owner should have seen the feature working and the acceptance criteria
    satisfied.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This provided a great starting point and, in particular, Aidan and Emma recognized
    that the Definition of Done was a great tool for ensuring the non-functional aspects
    that they had brainstormed using the Non-Functional Wheel could be considered
    for each and every item.
  prefs: []
  type: TYPE_NORMAL
- en: Some of those items had ended up on the Value Slicing board because there was
    specific work involved in configuring them. But many of them needed team behaviors
    or some automation to be focused on continuously addressing the **non-functional
    requirements** (**NFRs**).
  prefs: []
  type: TYPE_NORMAL
- en: 'The team revisited all of the items on the Non-Functional Wheel and categorized
    each item into one of three lists:'
  prefs: []
  type: TYPE_NORMAL
- en: Requires platform setup/config/spike
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Comes for free with platform
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Team behavior/principle
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B16297_12_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.30: Transferring non-functional requirements to Definition of Done
    criteria'
  prefs: []
  type: TYPE_NORMAL
- en: 'Items in the first column were seen as features to be included on the Product
    Backlog, as they needed specific work to be done to enable them in a sprint. Items
    in the third column were all items that should be considered as a part of the
    Definition of Done. However, given they were so low-level and detailed, the team
    decided to add a few more items to their Definition of Done that would mean they
    were duly considered:'
  prefs: []
  type: TYPE_NORMAL
- en: There must be at least one automated integration test covering acceptance criteria.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checks will be run (automated where possible) to ensure that all non-functional
    principles remain upheld.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The feature is running on the demonstration laptop and ready for the stakeholders
    to see demonstrated at any time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Definition of Done provides a place for non-functional requirements and
    quality to be managed effectively. While it starts as a big visual information
    radiator, it drives more and more quality into the product. It also provides many
    opportunities for automation. Given the Definition of Done criteria is something
    that will be tested for each and every backlog item accepted into a sprint, the
    same tests to meet the criteria should be run over and over again. So, automation
    is certainly our friend here. To explore the Definition of Done practice further,
    visit the Open Practice Library page at [https://openpracticelibrary.com/practice/definition-of-done/](https://openpracticelibrary.com/practice/definition-of-done/).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have introduced the Definition of Done, when we plan sprints or
    the tasks to deliver a specific feature, we can improve the questions that teams
    should ask about each backlog item. What tasks are needed to deliver this feature
    to satisfy the agreed acceptance criteria and comply with the Definition of Done?
    And, as Retrospectives continue to inspect how to improve, the team should consider
    what they can add to their Definition of Done to improve the overall product and
    what to automate to make Done a part of CI/CD.
  prefs: []
  type: TYPE_NORMAL
- en: When a team does not have a Definition of Done visible or they are failing to
    follow it or build it into their CI/CD pipeline, it is a Bad Agile Smell that
    tends to result in the rise of technical debt and the slowdown of team velocity.
    Let's look at a few other Bad Agile Smells we've seen.
  prefs: []
  type: TYPE_NORMAL
- en: Bad Agile Smells
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](img/author_face_11.jpg)![](img/Author_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Over the years, we have spotted several anti-patterns in Agile teams and things
    we look out for and test early in our engagements with customers. Here are our
    top ten:'
  prefs: []
  type: TYPE_NORMAL
- en: There is no Product Owner or there is a Product Owner who lacks the three important
    attributes—empowered, available to the team, and understands the business.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'No working software: Either CI/CD is not working sufficiently (or not in place
    at all) or automated testing is not sufficient. There should always be a working
    version of the product that can be demonstrated or released at any time. It may
    not do very much, and the business may want more features before the release,
    but this has to always be a business decision rather than a technical constraint.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sprints are pre-planned in advance. With variable scope, we need to let the
    teams control what they load into their sprints. Over time, they will establish
    metrics on their velocity and predictability—both should get better and there
    are powerful tools to help them size and forecast accurately.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Retrospectives don't happen or don't result in actions. Continuous improvement
    should be a part of the DNA of everyone involved in this system of work. The Retrospective
    is the fundamental building block to enable this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stand-ups take over 30 minutes and lots of meetings. For Agile delivery to be
    effective, we have to allow the teams to get on with the work and figure out the
    solutions themselves. Overloading them with meetings will only slow them down.
    Let's keep the meetings to the basic events of Scrum and Product Backlog Refinement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Water-Scrum-Fall: Upfront planning and design, delivery of features in iterations,
    but only to pre-production because a tail-end operational readiness phase is needed.
    This removes all the benefits of Agile and does not provide continuous delivery.
    Think about using the Mobius Loop to articulate how quickly and frequently we''re
    really traveling round these loops.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Teams are not cross-functional. This results in dependencies, blockers, and
    an inability to deliver continuously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lack of empowerment in teams to say no to items that are not ready. Using tools
    like the Definition of Ready and empowering teams to be autonomous drives up the
    culture, motivation, and ability to deliver continuously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Imbalance of functional versus non-functional features work pulled into sprints.
    We need to continuously balance the needs and feedback from the team (for example,
    Retrospectives), including the need to continuously improve architecture and CI/CD
    and keep the team filled with autonomy, mastery, and purpose. Otherwise, technical
    debt rises, motivation declines, and continuous delivery slows or stops.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push not pull. The systems we put in place are to empower teams to pull work
    rather than have it planned for them and pushed upon them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These Bad Agile Smells should be kept in mind and, if they start to appear,
    we recommend using the Retrospective event as a starting point to discuss and
    course-correct.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we progressed from the Discovery Loop and Options Pivot and
    focused on how we deliver features into products using practices on the Delivery
    Loop. We explored different domains of delivery using the Cynefin framework and
    saw how Waterfall remains effective for work in the *clear* domain, whereas Agile
    is more suitable for work in the *complex* and *complicated* domains.
  prefs: []
  type: TYPE_NORMAL
- en: We explored where Agile came from, the Agile Manifesto, and took a detailed
    look into Scrum and Kanban methods, the practices they use, as well as supporting
    practices such as the Definition of Ready and the Definition of Done.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.31: Adding Delivery Loop practices and more practices to the Foundation
    to support delivery'
  prefs: []
  type: TYPE_NORMAL
- en: We can now see how Agile frameworks and practices help achieve continuous delivery
    when using platforms such as OpenShift and, when coupled with high-performing
    teams and an autonomous culture, we can deliver outcomes that matter earlier and
    much more frequently.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we're going to dive deeper into the Measure and Learn part
    of the Delivery Loop and look at different mechanisms and tools that facilitate
    measurement and learning.
  prefs: []
  type: TYPE_NORMAL
