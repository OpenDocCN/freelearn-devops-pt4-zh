- en: 12\. Doing Delivery
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12. 做交付
- en: Ultimately, code has no value until it is delivered to production and its associated
    functionalities are in use. It's time to connect all our learning to date to delivery.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，代码没有价值，直到它被交付到生产环境，并且其相关功能被使用。是时候将我们迄今为止学到的内容与交付联系起来。
- en: We are well into the second half of this book and other than setting up a technical
    foundation, as we did in *Section 3*, *Discover It*. we haven't written any application
    code, nor have we delivered anything yet. What we have done is go through a tremendous
    set of practices to help discover, set outcomes, assess and prioritize options,
    and decide what we are going to deliver next. Now, we have reached the point where
    we will write some code, deliver features, execute experiments, and learn from
    further research.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经进入本书的下半部分，除了像*第3节*《发现它》中那样建立技术基础外，我们还没有编写任何应用代码，也没有交付任何内容。我们所做的是通过一系列巨大的实践，帮助我们发现、设定结果、评估和优先排序选项，并决定接下来要交付什么。现在，我们已经到了编写代码、交付功能、执行实验并从进一步的研究中学习的阶段。
- en: 'In this chapter, we are going to look at different delivery approaches. Your
    immediate expectation might be that this chapter is going to be all about **Agile**
    and that using Agile methodologies is now the only way to deliver working software.
    However, in addition to taking a look at Agile, where it came from, and different
    ways we can use it, we will highlight that it is not the only option. There is
    still a place for more traditional approaches to delivery, such as **Waterfall**.
    In this chapter, we will:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨不同的交付方法。你可能会立即预期本章将全是关于**敏捷**，并且使用敏捷方法论是交付工作软件的唯一方式。然而，除了回顾敏捷的起源和我们可以使用它的不同方式外，我们还将强调它并不是唯一的选择。仍然存在适合采用传统交付方法的场景，比如**瀑布模型**。在本章中，我们将：
- en: Explain the Waterfall and Agile methodologies.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释瀑布模型和敏捷方法论。
- en: Look at the difference between complicated, complex, and clear systems and how
    we can use them to drive the applicability of Agile.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看看复杂、复杂性和清晰系统之间的区别，以及我们如何利用它们推动敏捷方法的适用性。
- en: Explore how the Mobius Loop is framework-agnostic and, through different perspectives,
    speed, and frequency of iterations, can be used to explain delivery of every type.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探讨Mobius循环是与框架无关的，通过不同的视角、速度和迭代频率，可以用来解释各种类型的交付。
- en: Share some tools and tips about getting **ready** for Delivery Iterations.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分享一些工具和技巧，帮助你为交付迭代做好**准备**。
- en: Describe the practices with examples we often use to help with Delivery Iterations;
    including, for example, Iteration (or Sprint) Planning, Daily Stand-Ups, Showcases,
    and Retrospectives.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述我们常用的一些实践和示例，帮助完成交付迭代；例如，迭代（或冲刺）计划、每日站会、展示会和回顾会。
- en: See how, as teams mature and continuously improve, they can adapt their working
    practices and approaches.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看看随着团队的成熟和持续改进，他们如何调整自己的工作实践和方法。
- en: Share some tools and tips about getting working software features **done** with
    a focus on both functional and non-functional acceptance.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分享一些工具和技巧，帮助你完成工作软件功能的**交付**，重点关注功能性和非功能性的接受标准。
- en: See, for the first time, how all of our practices blend together to give us
    a continuous delivery engine.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一次看到我们所有的实践如何结合在一起，形成一个持续交付引擎。
- en: '![](img/B16297_12_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16297_12_01.jpg)'
- en: 'Figure 12.1: Waterfall and Agile teams'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1：瀑布模型和敏捷团队
- en: Let's start by having a look at those two phenomena—Waterfall and Agile. As
    depicted in *Figure 12.1*, Waterfall is often associated with Gantt charts, dependencies,
    and hand-offs and hand-overs from one part of the organization to another. Agile
    takes a different mindset and is more cross-functional. Some may say Waterfall
    is old and dying. We'll see later in this chapter that there remain valid use
    cases for taking a Waterfall approach.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先来看一下这两种现象——瀑布模型和敏捷方法。如*图12.1*所示，瀑布模型通常与甘特图、依赖关系以及组织中一个部门到另一个部门的交接工作相关。敏捷则采取不同的思维方式，更加跨职能。有人可能会说瀑布模型已经过时，正在消亡。但我们将在本章后面看到，瀑布模型依然有一些有效的应用场景。
- en: Waterfall
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 瀑布模型
- en: Waterfall projects are broken down into linear steps; each step relies on the
    previous one being completed before starting the next. The first step is to gather
    user requirements, followed by designing and planning, and then finally software
    development. Once testing and deployment are done, we enter the maintenance and
    operation mode.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 瀑布项目被分解为线性步骤；每个步骤都依赖于前一步的完成才能开始下一步。第一步是收集用户需求，接下来是设计和规划，然后是软件开发。一旦测试和部署完成，我们就进入了维护和运营阶段。
- en: '![](img/B16297_12_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16297_12_02.jpg)'
- en: 'Figure 12.2: Waterfall process'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2：瀑布流程
- en: This type of delivery methodology has a long history outside of software development,
    especially in traditional engineering. When building a bridge or a factory, the
    *project plan* lays out the requirement of all the people, resources, tasks, and
    timelines for the overall project of work. The Waterfall approach can be described
    as a *plan-driven* engineering process where success is measured according to
    how well development is able to keep up with the plan.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这种交付方法在软件开发之外有着悠久的历史，尤其是在传统工程领域。在建造桥梁或工厂时，*项目计划*会列出所有人员、资源、任务和整体项目的时间表。瀑布方法可以被描述为一种*计划驱动*的工程过程，其中成功的衡量标准是开发是否能够跟上计划的进度。
- en: By following a plan, individual variations are minimized. In the industrial
    world, this helps make both delivery and cost predictable. Because the traditional
    Waterfall model does not allow for looping, requirements and design are gathered
    in vast documents to begin planning. Changing and understanding the documents
    becomes very tricky for teams because there are no mechanisms for getting a shared
    understanding other than reading all the documents over again. Have you ever participated
    in a book review session? How many different points of view do you get when a
    group of people reads the same book? Coupling this with the likeliness of an organization
    to raise expensive change requests and making changes to the documentation can
    quickly show how disastrous this approach can be for a company. So how does this
    method fare in the world of software?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循计划，个体差异得到了最小化。在工业领域，这有助于使交付和成本可预测。由于传统的瀑布模型不允许循环，需求和设计通常会被收集在大量的文档中以开始规划。对于团队来说，修改和理解这些文档变得非常棘手，因为除了重新阅读所有文档外，几乎没有其他方法来达成共享理解。你是否参加过书籍评审会议？当一群人读同一本书时，你会得到多少不同的观点？将这一点与组织提出昂贵的变更请求，并且修改文档的可能性结合起来，很快就会看到这种方法对公司来说可能是多么灾难性。那么，这种方法在软件领域如何呢？
- en: Often, we find that in the software realm the requirements do not match what
    the end users expect. This is because as we develop the software, questions and
    misunderstandings about the original requirements and design become hard to address.
    As design and business requirement teams are not heavily involved in the development
    phase, there is no opportunity to refresh the designs or ideas.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们常常发现，在软件领域中，需求与最终用户的期望不符。这是因为在我们开发软件的过程中，关于原始需求和设计的问题以及误解变得难以解决。由于设计和业务需求团队在开发阶段的参与较少，因此没有机会更新设计或理念。
- en: Delivering customer and business value through working software takes a lot
    longer using Waterfall—as working software is only delivered toward the end of
    a Waterfall process. Think of how much time is lost while you're waiting for your
    great application to arrive. What if it never arrives? Or worse, arrives too late
    and you've missed your market?
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用瀑布方法交付客户和业务价值要花费更长时间——因为工作软件通常要到瀑布过程的最后阶段才交付。想想看，在等待你的优秀应用程序到来时，你浪费了多少时间。如果它永远不会到来呢？或者更糟，来得太晚，错过了市场机会？
- en: Changing requirements during a Waterfall execution is often left to another
    Waterfall phase. If changes are urgent, then they may be handled through some
    form of change request mechanism. However, this is really a form of loop—leading
    us to a more iterative approach. In Waterfall, these loops can still be very time-consuming
    and costly. If only there was a quicker way!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在瀑布执行过程中，变更需求通常会被留到另一个瀑布阶段。如果变更非常紧急，它们可能会通过某种变更请求机制来处理。然而，这实际上是一种循环形式——这引导我们走向一种更迭代的方法。在瀑布模型中，这些循环仍然可能非常耗时且成本高昂。如果只有更快的方法就好了！
- en: Winston Walker Royce was an American computer scientist and director at Lockheed
    Software Technology Center in Austin, Texas. He was a pioneer in the field of
    software development, known for his 1970 paper from which the idea of the single-pass
    Waterfall model for software development was mistakenly drawn. That's right, Waterfall
    was misunderstood and mistaken!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 温斯顿·沃克·罗伊斯是美国计算机科学家，也是德克萨斯州奥斯丁市洛克希德软件技术中心的主管。他是软件开发领域的先驱，因其1970年的论文而闻名，从中错误地引出了单次通过的瀑布模型。没错，瀑布模型被误解了！
- en: '![](img/B16297_12_03.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16297_12_03.jpg)'
- en: 'Figure 12.3: Waterfall was not designed as a single pass!'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3：瀑布模型并不是为了单次通过而设计的！
- en: 'Barry Boehm wrote in 1987: "*Royce''s 1970 paper is generally considered to
    be the paper which defined the* *stagewise Waterfall model of the software process.
    But it is surprising to see that both the earlier Benington* *and Hosier papers
    had good approximations to the Waterfall model, and that Royce''s paper already
    incorporates prototyping as an essential step compatible with the Waterfall model*."[1](#footnote-071)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Barry Boehm在1987年写道：“*罗伊斯1970年的论文通常被认为是定义了* *阶段性瀑布模型的论文。然而，令人惊讶的是，早期的Benington*
    *和Hosier的论文已经很好地接近了瀑布模型，而且罗伊斯的论文早已将原型开发作为与瀑布模型兼容的一个重要步骤*。”[1](#footnote-071)
- en: Royce demonstrated that while the development of large software systems required
    a more thorough approach, there was an inherent risk in the single-pass sequential
    approach. He proposed an iterative approach and advocated that projects should
    pass through this at least twice. But many Waterfall projects started and have
    continued to follow just a single-pass flow, left to right, with just a single
    iteration, which was not intended or recommended by Royce—Waterfall plans were
    never supposed to be executed just once.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 罗伊斯展示了，虽然大型软件系统的开发需要更为彻底的方法，但单次顺序执行方法中存在固有的风险。他提出了迭代方法，并倡导项目应该至少经过两次这样的过程。然而，许多瀑布项目开始时就只有单次的执行流程，从左到右，仅执行一次迭代，这并非罗伊斯所推荐或预期的方式——瀑布计划从来不应只执行一次。
- en: The Waterfall model did help in the innovation of other approaches and the focus
    on iteration was corrected in Agile models.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 瀑布模型确实推动了其他方法的创新，而敏捷模型则纠正了对迭代的关注。
- en: '[1](#footnote-071-backlink) Barry W. Boehm (1987). "Software Process Management:
    Lessons Learned from History" in ICSE ''87 Proceedings of the 9th international
    conference on Software Engineering pp 296-298'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[1](#footnote-071-backlink) Barry W. Boehm (1987)。在《ICSE ''87 软件工程国际会议论文集》中发表的文章《软件过程管理：从历史中得到的经验教训》，第296-298页'
- en: The Birth of Agile
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 敏捷的诞生
- en: Agile development methods have been talked about and practiced for over two
    decades now. The *Agile Manifesto* came about when a bunch of men, all prominent
    in software development, got together at a ski retreat in Utah to do some critical
    analysis on why IT projects were getting such a bad name. They looked back at
    the previous 10 years of software delivery throughout the '90s and concluded IT
    projects were taking too long to execute, coming over budget, and often not delivering
    value to end users. So these men sat down at the end of their trip and wrote the
    *Manifesto for Agile Software Development*.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷开发方法已经讨论并实践了超过二十年。*敏捷宣言*的诞生源于一群软件开发领域的著名人士，他们在犹他州的滑雪度假胜地聚集，进行了一次关键分析，探讨为何IT项目名声如此糟糕。他们回顾了90年代过去10年的软件交付情况，得出结论认为，IT项目的执行周期过长，超出预算，且常常未能为最终用户提供价值。于是，这些人在旅行结束时坐下来，写下了*敏捷软件开发宣言*。
- en: 'We know what you''re thinking: this manifesto thing must have been a massive
    document! A huge book filled with detailed instructions on how to write software
    as well as how to manage requirements and costs. In fact, it was much simpler
    than this—so simple you could almost fit it in a tweet!'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道你在想什么：这个宣言一定是一个庞大的文档吧！一本填满了关于如何编写软件以及如何管理需求和成本的详细说明书。事实上，它比这简单得多——简单到几乎可以写成一条推文！
- en: '![](img/B16297_12_04.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16297_12_04.jpg)'
- en: 'Figure 12.4: The manifesto for Agile software development'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4：敏捷软件开发宣言
- en: The Agile Manifesto[2](#footnote-070) is a simple set of values, highlighting
    the importance of some values over others.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷宣言[2](#footnote-070)是一套简单的价值观，突出了某些价值高于其他价值的重要性。
- en: '*Working software over comprehensive documentation*—*This sounds great, I don''t
    have to write any documentation* is what some are probably thinking. But they
    would be wrong. The values are not saying things on the right are not important,
    but that there is higher value in the items on the left. This is the bit people
    tend to forget when quoting the manifesto.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*工作软件优于详细文档*——“这听起来不错，我就不用写文档了”，这可能是一些人的想法。但他们错了。这些价值观并不是说右边的东西不重要，而是左边的东西更有价值。这是人们在引用宣言时常常忘记的部分。'
- en: '[2](#footnote-070-backlink) [https://agilemanifesto.org/](https://agilemanifesto.org/)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[2](#footnote-070-backlink) [https://agilemanifesto.org/](https://agilemanifesto.org/)'
- en: In addition to this set of values, this group came up with a set of 12 principles[3](#footnote-069)
    to support them.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这组价值观之外，这个团队还提出了一套12项原则[3](#footnote-069)来支持这些价值观。
- en: '![](img/B16297_12_05.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16297_12_05.jpg)'
- en: 'Figure 12.5: Principles behind the Agile Manifesto'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.5：敏捷宣言背后的原则
- en: These principles provide more detail about the kind of behaviors they foresaw
    as *being agile*. Read together, the principles provide an incredibly useful resource
    when having conversations about what it means to be *agile*. Agile these days
    has really become an overused buzzword and is frequently injected into sentences.
    Examples include—"*We're going to use Agile to deliver this project*" or "*We're
    going to install Agile*." Reading through and having a conversation about the
    12 statements can provide clarity and alignment on what we mean by Agile.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这些原则为我们预见到的*敏捷行为*提供了更多细节。将这些原则一起阅读，它们为讨论什么是*敏捷*提供了极为有用的资源。如今，敏捷已经成为一个过度使用的流行词，常常被插入到句子中。例如，“*我们将使用敏捷来交付这个项目*”或者“*我们将安装敏捷*”。通过阅读并讨论这12条声明，可以为我们对敏捷的理解提供清晰和一致性。
- en: '[3](#footnote-069-backlink) [https://agilemanifesto.org/principles](https://agilemanifesto.org/principles)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[3](#footnote-069-backlink) [https://agilemanifesto.org/principles](https://agilemanifesto.org/principles)'
- en: 'The Agile Manifesto contrasts with the plan-driven Waterfall approach in that
    it:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷宣言与传统的瀑布式方法相比，强调的是：
- en: Is more *adaptive*, rather than *prescriptive*.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更加*适应性强*，而不是*规定性强*。
- en: Is more *people-oriented*, rather than *process-oriented*.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更加*以人为本*，而不是*以过程为本*。
- en: At the beginning of the industrial age, people working on the factory floor
    were described by Frederick Taylor, an American mechanical engineer widely known
    for his methods to improve industrial efficiency, as being *lazy*, *venal*, and
    *stupid*. A factory was built and designed by architects and engineers who did
    not work on the factory floor. One of the tenets of Agile is that the people and
    teams who do the work decide on how it gets done.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在工业革命初期，弗雷德里克·泰勒（Frederick Taylor），一位广为人知的美国机械工程师，曾描述在工厂车间工作的工人是*懒惰的*、*贪婪的*和*愚蠢的*。工厂是由不在车间工作的建筑师和工程师设计建造的。敏捷的一个核心理念是，做实际工作的人员和团队决定如何完成工作。
- en: An important part of Agile is its focus on cross-functional teams delivering
    working software. The designers and business stakeholders are continuously involved
    in this process. Unlike Waterfall, when questions arise about the end user experience,
    these can be researched and answered based on the most up-to-date information
    available to the team.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷的一个重要部分是其聚焦于跨职能团队交付工作软件。设计师和业务相关方持续参与这个过程。与瀑布式不同，当出现有关最终用户体验的问题时，团队可以根据最先进的信息进行研究和回答。
- en: Agile methodologies focus on simultaneous workflows that form a baseline to
    help us control change. Plans are constantly revised to reflect the learnings
    during a product's development. Success is based on the value delivered by the
    working software.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷方法论关注于同时进行的工作流，这些工作流构成了一个基准，帮助我们控制变化。计划会不断修订，以反映产品开发过程中获得的经验教训。成功的关键在于由工作软件所提供的价值。
- en: Agile is focused around products that are directly connected to the end user
    as opposed to effort and output that may not be directly connected. The team comes
    together to drive successful delivery where processes and tools are used to optimize
    product delivery.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷关注于直接与最终用户连接的产品，而不是那些可能与用户无关的努力和产出。团队通过协作来推动成功的交付，使用过程和工具来优化产品交付。
- en: One of the most noticeable traits of Agile is its breaking down of project delivery
    into smaller iterative phases. This works really well for software products that
    require regular revisions and testing. Because the work is done incrementally,
    teams can easily adjust what is being worked on. They can pivot to work on high-value
    features and deliver those to customers early and fast.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷方法最显著的特点之一是将项目交付分解成更小的迭代阶段。这对于需要定期修订和测试的软件产品非常有效。由于工作是逐步进行的，团队可以轻松调整正在处理的内容。他们可以快速调整工作重点，专注于高价值的功能，并将这些功能尽早且迅速地交付给客户。
- en: Some critics of Agile methods quite rightly point out that Agile projects also
    fail. However, it is not methodologies that fail, it is teams and organizations
    that fail. Often the reasons can be clearly articulated as the team taking on
    too much *technical debt*—adding new features or changing existing software is
    just too hard to do quickly because the code base is a mess, or the architecture
    is just plain wrong.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一些敏捷方法的批评者恰当地指出，敏捷项目也会失败。然而，失败的并不是方法论，而是团队和组织。通常，原因可以清楚地表述为团队承受了过多的*技术债务*——添加新功能或修改现有软件变得很难快速完成，因为代码库混乱，或者架构根本就不合理。
- en: Fundamentally, Agile is an ideology or a philosophy—a way of thinking. It is
    articulated by the four value statements in the Agile Manifesto and defined further
    by the twelve principles. Agile is instantiated and brought to life by a series
    of practices, many of which are in the Open Practice Library. Practices have been
    grouped together to form popular Agile frameworks such as Scrum, Kanban, and **SAFe**
    (**Scaled Agile Framework**). All of these make up the Agile ecosystem.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 从根本上讲，敏捷是一种意识形态或哲学——一种思维方式。它通过《敏捷宣言》中的四个价值声明得以阐述，并通过十二条原则进一步定义。敏捷通过一系列实践得以实现，其中许多实践都在开放实践库中。这些实践被归类为流行的敏捷框架，如Scrum、看板和**SAFe**（**Scaled
    Agile Framework**）。所有这些构成了敏捷生态系统。
- en: '![](img/B16297_12_06.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16297_12_06.jpg)'
- en: 'Figure 12.6: Decomposing the Agile mindset into values, principles, practices,
    and frameworks'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.6：将敏捷思维分解为价值观、原则、实践和框架
- en: Before we get into the detail of Agile, let's consider how OpenShift complements
    Agile and promotes business agility.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入探讨敏捷方法之前，先来考虑一下OpenShift如何与敏捷方法相辅相成并推动业务敏捷性。
- en: How Does OpenShift Help?
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenShift如何帮助？
- en: Technology is one of the foundational pillars that makes Agile productive and
    responsive to change. OpenShift is the collaborative platform that allows team
    members with diverse sets of skills to come together to securely write, test,
    deliver, and operate their application software. The platform enhances team dynamics,
    as team members can quickly and easily work in a homogenous environment—they are
    not forced to work in isolation. The ability to run simultaneous workflow streams
    in separate OpenShift projects fits extremely well with Agile delivery. Different
    clusters can be used to isolate production from non-production workloads. While
    each environment may be sized differently, they are identical in their software
    makeup. This drives up quality by eliminating version and configuration drift
    across environments.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 技术是使敏捷方法高效并能应对变化的基础支柱之一。OpenShift是一个协作平台，它允许拥有不同技能的团队成员汇聚在一起，安全地编写、测试、交付和运营他们的应用软件。该平台提升了团队动态，因为团队成员可以快速、轻松地在一个统一的环境中工作——他们不会被迫孤立工作。在不同的OpenShift项目中同时运行多个工作流非常适合敏捷交付。不同的集群可以用来隔离生产和非生产工作负载。尽管每个环境的规模可能不同，但它们在软件构成上是相同的。这通过消除各个环境之间的版本和配置漂移，提升了质量。
- en: As we mentioned in the introduction, we still see a place for less Agile approaches
    to delivery (including the use of Waterfall). Let us now look at the characteristics
    of different projects that can determine what approach is best.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在引言中提到的，我们仍然认为在交付过程中，较少敏捷的方法（包括瀑布方法）也有其存在的价值。现在，让我们来看一下不同项目的特点，这些特点可以决定最佳的方法是什么。
- en: Decision-Making Contexts
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 决策制定背景
- en: 'In 2020, Red Hat produced an eBook entitled *Transformation takes practice*.[4](#footnote-068)
    This was written in response to a question asked time and again by business leaders:
    Why are so many digital transformation efforts failing? In the eBook, Mike Walker,
    Global Director of Red Hat Open Innovation Labs explains: "*In complex sociotechnical
    systems, it is a group of people, not individuals or managers, who can create
    innovative change. These groups must tune the system through a perpetual cycle
    of probing, sensing, and responding to outcomes*."'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 2020年，Red Hat出版了一本名为*变革需要实践*的电子书。[4](#footnote-068) 这是回应商业领袖们反复提出的一个问题：为什么如此多的数字化转型努力失败？在这本电子书中，Red
    Hat Open Innovation Labs的全球总监Mike Walker解释道：“*在复杂的社会技术系统中，创造创新变革的是一群人，而不是个人或经理。这些团队必须通过持续的探测、感知和响应结果的循环来调整系统*。”
- en: To explore that cycle of **probing, sensing, and responding** to outcomes, let's
    introduce a very helpful framework that compares this approach to alternative
    approaches used in different systems.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了探索**探测、感知和响应**结果的循环，让我们引入一个非常有帮助的框架，将这种方法与不同系统中使用的其他方法进行比较。
- en: The Cynefin Framework
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Cynefin框架
- en: 'The **Cynefin framework** was created in 1999 by Dave Snowden when he worked
    for IBM Global Services. *Cynefin* is the Welsh word for *habitat*, and the framework
    offers five decision-making contexts or *domains*:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**Cynefin框架**是由Dave Snowden在1999年创建的，当时他在IBM全球服务部门工作。*Cynefin*是威尔士语中的“栖息地”一词，这一框架提供了五种决策情境或*领域*：'
- en: '*Clear* (known until 2014 as *simple*, but more recently renamed *clear* by
    Snowden)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*清晰*（直到2014年以前被称为*简单*，但最近由Snowden重新命名为*清晰*）'
- en: '*Complicated*'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*复杂*'
- en: '*Complex*'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*复杂*'
- en: '*Chaotic*'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*混乱*'
- en: '*Disorder*'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*无序*'
- en: '[4](#footnote-068-backlink) [https://www.redhat.com/en/resources/transformation-takes-practice-open-practice-library-ebook](https://www.redhat.com/en/resources/transformation-takes-practice-open-practice-library-ebook)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[4](#footnote-068-backlink) [https://www.redhat.com/en/resources/transformation-takes-practice-open-practice-library-ebook](https://www.redhat.com/en/resources/transformation-takes-practice-open-practice-library-ebook)'
- en: The framework is intended to help managers identify how they perceive situations
    and make sense of their own and other people's behavior. The framework draws on
    research into systems theory,[5](#footnote-067) complexity theory,[6](#footnote-066)
    network theory,[7](#footnote-065) and learning theories.[8](#footnote-064)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 该框架旨在帮助经理识别他们如何看待情况，并理解自己和他人的行为。该框架借鉴了系统理论的研究，[5](#footnote-067) 复杂性理论的研究，[6](#footnote-066)
    网络理论的研究，[7](#footnote-065) 以及学习理论的研究。[8](#footnote-064)
- en: '![](img/B16297_12_07.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16297_12_07.jpg)'
- en: 'Figure 12.7: The Cynefin framework'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.7：Cynefin框架
- en: The *clear*, or the *obvious* domain represents the *known knowns*. This means
    that there are rules in place (or best practice), the situation is stable, and
    the relationship between cause and effect is clear—if you do X, Y is expected.
    This is the domain of legal structures, standard operating procedures, and practices
    that are proven to work.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*清晰*，或称*显而易见*的领域代表了*已知的已知*。这意味着已有规则（或最佳实践），情况是稳定的，因果关系是明确的——如果做X，期望得到Y。这是法律结构、标准操作程序和经过验证的有效实践的领域。'
- en: '[5](#footnote-067-backlink) [https://en.wikipedia.org/wiki/Systems_theory](https://en.wikipedia.org/wiki/Systems_theory)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[5](#footnote-067-backlink) [https://en.wikipedia.org/wiki/Systems_theory](https://en.wikipedia.org/wiki/Systems_theory)'
- en: '[6](#footnote-066-backlink) [https://en.wikipedia.org/wiki/Complexity_theory_and_organizations](https://en.wikipedia.org/wiki/Complexity_theory_and_organizations)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[6](#footnote-066-backlink) [https://en.wikipedia.org/wiki/Complexity_theory_and_organizations](https://en.wikipedia.org/wiki/Complexity_theory_and_organizations)'
- en: '[7](#footnote-065-backlink) [https://en.wikipedia.org/wiki/Network_theory](https://en.wikipedia.org/wiki/Network_theory)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[7](#footnote-065-backlink) [https://en.wikipedia.org/wiki/Network_theory](https://en.wikipedia.org/wiki/Network_theory)'
- en: '[8](#footnote-064-backlink) [https://en.wikipedia.org/wiki/Learning_theory_(education)](https://en.wikipedia.org/wiki/Learning_theory_(education))'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[8](#footnote-064-backlink) [https://en.wikipedia.org/wiki/Learning_theory_(education)](https://en.wikipedia.org/wiki/Learning_theory_(education))'
- en: The *complicated* domain consists of the *known unknowns*. The relationship
    between cause and effect requires analysis or expertise where there is a range
    of right answers. The framework recommends *sense*–*analyze*–*respond*, that is,
    first assess the facts, then conduct analysis and use that to apply the appropriate
    good operating practice.[9](#footnote-063)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*复杂*领域由*已知的未知*组成。因果关系需要分析或专业知识，其中有一系列正确答案。该框架建议*感知*–*分析*–*响应*，即首先评估事实，然后进行分析并据此应用适当的良好操作实践。[9](#footnote-063)'
- en: The *complex* domain represents the *unknown unknowns*. Cause and effect can
    only be deduced in retrospect, and there are no right answers. "*Instructive patterns*
    ... *can emerge,*" write Snowden and Boone, "*if the leader conducts experiments
    that are safe to fail.*" Cynefin[10](#footnote-062) calls this process *probe*–*sense*–*respond*.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '*复杂*领域代表了*未知的未知*。因果关系只能事后推断，且没有正确答案。Snowden和Boone写道，“*有启发性的模式*...*可以浮现出来*，”
    “*如果领导者进行可失败的实验*。”Cynefin[10](#footnote-062)将这一过程称为*探测*–*感知*–*回应*。'
- en: In the *chaotic* domain, cause and effect are unclear. Events in this domain
    are "*too confusing to wait for a knowledge-based response,*" writes Patrick Lambe.
    "*Action*—*any action*—*is the first and only way to respond appropriately*."[11](#footnote-061)
    In this context, managers must *act*–*sense*–*respond*, *act* to establish order,
    *sense* where stability lies, and *respond* to turn the chaotic into the complex.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在*混乱*领域，因果关系不明确。Patrick Lambe写道，在这个领域，“事件是‘*太过混乱以至于无法等待基于知识的反应*’”。“*行动*—*任何行动*—*是回应的首要也是唯一方式*”。[11](#footnote-061)
    在这种情况下，管理者必须*行动*–*感知*–*回应*，*行动*以建立秩序，*感知*稳定所在，*回应*以将混乱转变为复杂。
- en: Most of the work we do with our customers sits in the complex and complicated
    domains. To differentiate between these two domains further, let's look at a helpful
    example used in the *Transformation takes practice* eBook about the difference
    between a Ferrari and a rainforest.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们与客户合作的大部分工作都位于复杂和复杂领域之间。为了进一步区分这两个领域，我们来看一下*《转型需要实践》*电子书中使用的一个有帮助的例子，来说明法拉利与雨林的区别。
- en: The Ferrari and the Rainforest
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 法拉利与雨林
- en: A recent piece of research by Harvard Business Review[12](#footnote-060) shows
    that 80% of business leaders say their digital transformation efforts are ineffective.
    For organizations pursuing digital transformation, one key step is recognizing
    the difference between complicated and complex systems. Think of a Ferrari. It
    is made of thousands of components, but their sum and how each interacts with
    the other to create the whole are fundamentally knowable. Diagnosing and repairing
    a malfunctioning Ferrari requires you to sense, analyze, and respond to feedback
    and learning. A Ferrari is a complicated system.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 哈佛商业评论的一项最新研究[12](#footnote-060)显示，80%的企业领导者表示他们的数字化转型努力无效。对于追求数字化转型的组织来说，关键的一步是认识到复杂系统和复杂性系统之间的区别。想象一辆法拉利。它由成千上万个部件组成，但它们的总和以及各部件如何互动以形成整体是可以基本了解的。诊断和修理一辆故障的法拉利需要感知、分析和回应反馈与学习。一辆法拉利是一个复杂的系统。
- en: '[9](#footnote-063-backlink) [https://hbr.org/2007/11/a-leaders-framework-for-decision-making](https://hbr.org/2007/11/a-leaders-framework-for-decision-making)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[9](#footnote-063-backlink) [https://hbr.org/2007/11/a-leaders-framework-for-decision-making](https://hbr.org/2007/11/a-leaders-framework-for-decision-making)'
- en: '[10](#footnote-062-backlink) [https://hbr.org/2007/11/a-leaders-framework-for-decision-making](https://hbr.org/2007/11/a-leaders-framework-for-decision-making)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[10](#footnote-062-backlink) [https://hbr.org/2007/11/a-leaders-framework-for-decision-making](https://hbr.org/2007/11/a-leaders-framework-for-decision-making)'
- en: '[11](#footnote-061-backlink) [Lambe, Patrick (2007). Organising Knowledge:
    Taxonomies, Knowledge and Organisational Effectiveness. Oxford: Chandos Publishing,
    136.](https://www.elsevier.com/books/organising-knowledge/lambe/978-1-84334-227-4)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[11](#footnote-061-backlink) [Lambe, Patrick (2007). 《组织知识：分类法、知识与组织效能》。牛津：Chandos出版公司，136.](https://www.elsevier.com/books/organising-knowledge/lambe/978-1-84334-227-4)'
- en: '[12](#footnote-060-backlink) [https://www.redhat.com/cms/managed-files/cm-digital-transformation-harvard-business-review-analyst-paper-f22537-202003-en_0.pdf](https://www.redhat.com/cms/managed-files/cm-digital-transformation-harvard-business-review-analyst-paper-f22537-202003-en_0.pdf)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[12](#footnote-060-backlink) [https://www.redhat.com/cms/managed-files/cm-digital-transformation-harvard-business-review-analyst-paper-f22537-202003-en_0.pdf](https://www.redhat.com/cms/managed-files/cm-digital-transformation-harvard-business-review-analyst-paper-f22537-202003-en_0.pdf)'
- en: Now think of a rainforest. It is a dynamic ecosystem with billions of interacting
    organisms and elements. We understand those dynamics at some level, but they are
    essentially unpredictable, with cause and effect only evident in hindsight. The
    problems threatening rainforests would be best addressed through probing, sensing,
    and responding. In other words, it requires continuous cycles of hypotheses, experimentation,
    and measurement to arrive at desired outcomes. A rainforest is a complex system.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在想象一下雨林。它是一个动态的生态系统，有数十亿个相互作用的生物和元素。我们在某种程度上理解这些动态，但它们基本上是不可预测的，因果关系只在事后显现。威胁雨林的问题最好通过探测、感知和响应来解决。换句话说，需要持续的假设、实验和测量周期来达到期望的结果。雨林是一个复杂的系统。
- en: Today's large organizations behave more like rainforests, not Ferraris. It is
    a complex sociotechnical system with many dynamics—both human and technical—at
    play, that resist quantification. This distinction is important because many enterprise
    leaders assume organizations are complicated systems in which analysis is the
    key to arriving at the best solution. But in complex systems, probing and sensing,
    or hypothesis and experimentation, in rapid and iterative cycles, are more effective
    in identifying the best solutions and ideas.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如今的大型组织更像是雨林，而不是法拉利。这是一个复杂的社会技术系统，有许多动态——包括人类和技术——在发挥作用，抵制量化。这种区别很重要，因为许多企业领导人认为组织是复杂的系统，分析是达到最佳解决方案的关键。但在复杂系统中，探测和感知，或者假设和实验，通过快速和迭代的周期，更有效地识别最佳解决方案和想法。
- en: 'What has all this got to do with the delivery of applications such as the case
    study used throughout this book, PetBattle? There is a lot of terminology attached
    to delivery methodologies. When do we use Scrum versus Kanban? Is a Burndown chart
    just a reverse Gantt chart? How can we show value being delivered when using Waterfall?
    Ultimately, each method or approach is trying to achieve a similar goal: the completion
    of a feature set in any given product that can be released to our end users.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切与PetBattle等案例研究的应用交付有什么关系？交付方法学附带大量术语。我们何时使用Scrum而不是Kanban？燃尽图只是反向甘特图吗？在使用瀑布模型时如何展示交付的价值？最终，每种方法或方法都试图达到类似的目标：在任何给定产品中完成一个特性集，可以释放给我们的最终用户。
- en: 'Some good starting guidelines when trying to understand which methodology to
    use include the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试理解使用哪种方法论时，一些良好的起点指南包括以下内容：
- en: Waterfall works best for projects that are completed in a linear fashion, where
    it is clear to *sense-categorize-respond* as best practice. So, following a standard
    operating procedure to install and test a software product will be a one-time-only
    piece of work and will not benefit from agility or iteration. There will be no
    need to go back to prior phases of work. This is often seen as a traditional way
    of working.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 瀑布模型最适合按线性方式完成的项目，在这种项目中，清晰地*感知-分类-响应*是最佳实践。因此，遵循标准操作规程安装和测试软件产品将是一次性的工作，不会从敏捷性或迭代中获益。不需要返回先前的工作阶段。这通常被视为传统的工作方式。
- en: An iterative Agile framework such as Scrum is concerned with getting work done
    by completing and showing small increments of work and inspecting and adapting
    to feedback. In other words, we are taking the *probe-sense-respond* approach
    articulated in the complex domain of Cynefin. Other Agile frameworks such as Kanban
    are primarily concerned with continuous delivery. The highest priority item is
    done next, and a fixed chunk of work is pulled off the backlog into a smaller
    stream of work. This also supports the *probe-sense-respond* mindset.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 诸如Scrum之类的迭代敏捷框架关注通过完成和展示小的工作增量并根据反馈进行检查和适应。换句话说，我们采用了Cynefin复杂领域中表达的*探测-感知-回应*方法。其他敏捷框架如Kanban主要关注持续交付。接下来完成优先级最高的项目，并将一定量的工作从积压清单中拉到较小的工作流中。这也支持*探测-感知-回应*的思维方式。
- en: Let's get back to our visualization and mental model that we have been using
    throughout the book using the Mobius Loop.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到我们一直在本书中使用Moebius环的可视化和心智模型。
- en: When Does a Mobius Loop Mindset Make Sense?
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么时候使用Moebius环思维方式才有意义？
- en: One of the reasons we love the Mobius Loop is because we can use it to explain
    any project, program, or work we've ever been involved in.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们喜欢Moebius环的一个原因是我们可以用它来解释我们曾参与的任何项目、计划或工作。
- en: As it is framework-agnostic, it does not demand Scrum or Kanban. It does not
    stipulate how many iterations a team or organization should go through, around
    one or both of the loops. It complies with any of the four established domains
    of Cynefin.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它是框架无关的，因此不要求使用Scrum或Kanban。它没有规定团队或组织应通过多少次迭代，无论是围绕一个循环还是两个循环。它符合Cynefin框架的四个既定领域中的任何一个。
- en: '![](img/B16297_12_08.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16297_12_08.jpg)'
- en: 'Figure 12.8: The Cynefin framework and Mobius Loop'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.8：Cynefin框架与Mobius循环
- en: Projects in the **complex** domain fit well with an Agile approach. Visualized
    on the Mobius Loop, this means starting on the Discovery Loop and establishing
    the first set of Target Outcomes. The Options Pivot involves refining what to
    discover or deliver next and deciding on which options to deliver. The Delivery
    Loop creates a design and build for a small increment, runs that increment in
    production to collect data, and takes measurements before learning and reflecting
    on the outcomes achieved. There is then an adaption point to either go through
    another loop of Discovery, do another loop of Delivery, or return to the Options
    Pivot to reprioritize and pivot. This cycle will continue indefinitely as long
    as there are product delivery and/or operations ongoing. There will be a growing
    desire, through continuous improvement, to speed up the iterations of Discovery
    and Delivery.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**复杂**领域的项目非常适合采用敏捷方法。通过Mobius循环可视化，这意味着从发现循环开始，确立首批目标成果。选项转向涉及细化接下来要发现或交付的内容，并决定要交付的选项。交付循环创建一个小的增量设计并进行构建，在生产中运行该增量以收集数据，并在学习和反思已实现的成果之前进行度量。然后，有一个适应点，可以选择再次进入发现循环，进行另一个交付循环，或返回选项转向以重新优先排序和调整方向。只要产品交付和/或运营持续进行，这个循环将永无止境。通过持续改进，将会越来越渴望加速发现和交付的迭代速度。'
- en: Projects in the **complicated** domain fit well with an **Agile** approach.
    Visualized on the Mobius Loop, this means starting on the Discovery Loop and establishing
    Target Outcomes. This may be slower and more detailed, given projects in the complicated
    domain benefit from sense and analysis before a response. A similar pattern will
    be experienced for complex projects through Options into Delivery and then either
    a return to Discovery, Delivery, or Options.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**复杂**领域的项目非常适合**敏捷**方法。通过Mobius循环可视化，这意味着从发现循环开始并确立目标成果。由于复杂领域的项目在回应之前需要进行感知和分析，因此这一过程可能会更慢且更为详细。对于复杂项目，通过选项进入交付，再到发现、交付或选项的循环，都会经历类似的模式。'
- en: Finally, projects in the **chaos** domain need to act quickly and move out of
    that domain as quickly as possible. That may mean starting on the Delivery Loop
    with the urgent act and, as the level of chaos reduces, start to re-group and
    organize options and a loop of Discovery. Once the shift to the Discovery Loop
    is completed, the project moves from one of chaos to more of a complex project.
    Most application development these days would be considered complex.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，**混乱**领域的项目需要迅速行动，并尽可能快地脱离该领域。这可能意味着从交付循环开始进行紧急行动，随着混乱程度的减轻，开始重新组合并组织选项和发现循环。完成向发现循环的转变后，项目将从混乱状态转变为更复杂的项目。如今，大多数应用程序开发都被视为复杂的。
- en: So, where does an application like PetBattle sit in the Cynefin framework, and
    what is the best delivery approach to consider?
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，像PetBattle这样的应用程序在Cynefin框架中处于何种位置，应该考虑什么样的最佳交付方法？
- en: PetBattle—Complex, Complicated, or Clear?
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PetBattle——复杂、繁琐，还是清晰？
- en: Our PetBattle customers cannot use any of our innovative feature ideas until
    we build, test, and deploy our code into a production environment. The old hobbyist
    application was built all in one go and one release. Should the new PetBattle
    organization continue this approach?
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的PetBattle客户在我们将代码构建、测试并部署到生产环境之前，无法使用任何创新功能的想法。旧的爱好者应用程序是一次性完成并发布的。新的PetBattle组织是否应该继续这种方法？
- en: 'The team walked the walls of all the artifacts produced during their Discovery
    Loop and options. They talked about what might be the best way to deliver all
    these great ideas. Some of the comments made during this session include:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 团队走访了他们在发现循环和选项过程中所产生的所有成果。他们讨论了如何以最佳方式传递这些精彩的想法。在这次会议中，提出的一些评论包括：
- en: During the Discovery Loop explained in *Section 3, Discover It*, we only really
    explored in any depth a small subset of feature ideas, that is, those connected
    to the *Increase Site Engagement for Uploaders* part of the Impact Map. That was
    where the investors invested most of their Donal Dollars! We'll eventually need
    to consider other impacts or dive deeper into this one when we see what happens
    with our early feature builds.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在*第3节，探索它*中解释的探索环节里，我们只对少部分功能创意进行了深入探索，即与影响图中的*增加上传者网站参与度*部分相关的内容。那部分是投资者投入大部分Donal
    Dollars的地方！我们最终需要考虑其他影响，或在看到早期功能构建的结果后深入探索这一部分。
- en: There are a lot of pink sticky notes on the Event Storm—these represent questions,
    assumptions, and other unknowns that we'll need to get answers to and eventually
    remove.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件风暴中有很多粉色便签——这些代表了我们需要回答的疑问、假设和其他未知问题，最终我们需要解答并去除它们。
- en: The Event Storming done to date has focused on *the one where Mary enters the
    daily tournament and wins a prize*. We'll need to do more Event Storming as we
    consider new features and/or answers to the unknowns.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 到目前为止进行的事件风暴集中在*玛丽参加每日锦标赛并赢得奖品*这一情节。随着我们考虑新的功能和/或未知问题的答案，我们将需要进行更多的事件风暴。
- en: We have some good target outcomes and some great hypothesis statements behind
    all the options. But what if the needle doesn't shift and those hypotheses are
    proven false? We'll be back to the drawing board.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们有一些好的目标结果和一些出色的假设声明，支持所有选项。但如果局面没有改变，而这些假设被证明是错误的怎么办？那我们就得重新开始。
- en: When we refined our options in *Section 4, Prioritize It*, on the Value Slice
    board, we identified several experiments we need to run. Some will be run as A/B
    tests, feature toggles, and canary launches, while some require UI prototyping
    and technical spikes to run before we can progress.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们在*第4节，优先排序*中细化我们的选项时，在价值切片板上，我们确定了几个需要进行的实验。一些将通过A/B测试、功能切换和金丝雀发布进行，而一些则需要UI原型制作和技术探索，在进行这些操作后，我们才能推进。
- en: The Empathy Map we produced from interviewing Mary was great. But it showed
    how many things we hadn't thought of about our users. What will happen when we
    Empathy Map other users? Or, when we start to meet advertisers and partners and
    capture Empathy Maps on them? What will they say?
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们通过采访玛丽制作的同理心地图非常好。但它也显示了我们对用户的许多未曾想到的地方。当我们为其他用户制作同理心地图时会发生什么？或者，当我们开始与广告商和合作伙伴接触并为他们制作同理心地图时，他们会说些什么？
- en: There remain a lot of technical unknowns and learning to be done on the platform.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平台上仍然有许多技术未知和待学习的内容。
- en: There are many known unknowns and probably even more unknown unknowns! With
    so many unknowns, how do we deliver these changes in a way that ensures quality
    (no breakages to a PetBattle Tournament!), speed (can the team deliver changes
    quickly and on time?), and efficiency (can the team repeatedly deploy changes
    cheaply and easily)?
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多已知的未知问题，可能还有更多的未知未知问题！面对如此多的未知问题，我们如何以一种确保质量（不会破坏宠物大战锦标赛！）、速度（团队能否快速按时交付变化？）和效率（团队能否以低成本和便捷方式反复部署变化）的方式交付这些变化？
- en: PetBattle, like most user-centric applications, is a complex sociotechnical
    system with many dynamics, both human and technical. With continued emergent practice,
    we can now move to a *probe-sense-respond* mindset as we approach our first (of
    many) iterations of delivery.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 像大多数以用户为中心的应用程序一样，PetBattle是一个复杂的社会技术系统，具有许多动态因素，包括人类和技术方面的因素。随着实践的不断发展，我们现在可以在接近首次（以及许多次）交付迭代时，转向*探测-感知-响应*的思维方式。
- en: Taking a complex product into the first iteration of delivery means we have
    to decide what, from our list of options, we are going to deliver first. We also
    need to check whether the team are ready to work on the selected items and are
    confident they have the right amount of information and understanding to deliver
    them. This leads to another foundational practice to define and assess readiness
    to deliver.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个复杂的产品带入首次交付的迭代意味着我们必须决定从选项清单中优先交付什么内容。我们还需要检查团队是否准备好处理所选项目，并且有信心他们已经具备足够的信息和理解来交付它们。这引出了另一个基础实践，即定义和评估交付准备度。
- en: The Definition of Ready
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备好的定义
- en: Jeff Sutherland, co-creator of the Scrum framework, called out that one of the
    main reasons that many Scrum projects fail is due to teams working on items that
    are simply not ready to be worked on. They are either too ambiguous, not understood
    by business and technical stakeholders, too big, or they lack ambiguity as to
    the scope of the item in question.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Scrum框架的共同创始人杰夫·萨瑟兰指出，许多Scrum项目失败的主要原因之一，是团队在处理根本没有准备好进行工作的项目。它们要么太模糊，无法被业务和技术利益相关者理解，要么太大，或者项目的范围不明确。
- en: Many teams have chosen to adopt the practice of having a **Definition of Ready**
    to mitigate this risk. The Definition of Done practice has been popular with Agile
    teams for many years—we will explore that later in this chapter. The Definition
    of Ready has been less utilized. A good way to look at this, like every practice
    in the Open Practice Library, is as a tool that can be taken out of the toolbox
    to address a problem. If a team is struggling to get work done because of ambiguity
    and a lack of shared understanding before even starting it, adding a Definition
    of Ready may improve the team's success in the future.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 许多团队选择采用**就绪定义（Definition of Ready）**来减少这种风险。完工定义（Definition of Done）已经被敏捷团队广泛使用多年——我们将在本章稍后探讨这一点。而就绪定义的应用则较为少见。像开放实践库中的所有实践一样，定义就绪是一种工具，可以从工具箱中取出，用来解决问题。如果一个团队因为不明确且缺乏共同理解而在开始工作之前就遇到困难，添加一个就绪定义可能会提升团队未来的成功率。
- en: The Definition of Ready is a practice used by a team to set their criteria and
    expectations with others as to what constitutes a Product Backlog item that is
    ready to be worked on. The resulting artifact is collaboratively created, maintained,
    and enforced by the team, and publicly displayed for the team members and others
    to easily reference. It is often informed by experience, like all other artifacts
    generated from the practices in this book. It is a living, breathing artifact
    that will improve over time with learning and experience. We often find discussions
    that happen during Retrospectives lead to improvements being made to the Definition
    of Ready. For example, when a team gets blocked and does not manage to deliver
    the items they pulled into their sprint, they might ask themselves what they could
    have done differently to prevent the items from getting blocked in the sprint.
    If there is a common pattern emerging and an improvement process that can be put
    in place to prepare future items ready for delivery sprints, the criteria can
    be written as a Definition of Ready criteria.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 就绪定义是一项团队用于设定与他人共同理解标准和期望的实践，目的是明确什么样的产品待办事项（Product Backlog item）才算是准备好可以进行工作的。最终的成果是由团队共同创建、维护和执行的，并公开展示，方便团队成员和其他人轻松参考。它通常基于经验，就像本书中其他实践所生成的成果一样。它是一个活生生的工具，随着学习和经验的积累，会不断改进。我们常常发现，在回顾会议期间的讨论，会促使就绪定义得到改进。例如，当一个团队遇到阻碍，未能完成他们在冲刺中拉取的事项时，他们可能会问自己，如果可以做得不同一点，是否能防止这些事项在冲刺中被阻塞。如果出现了共同的模式，并且能够通过改进流程来准备未来的事项，使其能够按时交付，那么这些标准可以写成就绪定义标准。
- en: 'The Definition of Ready often starts with the act of writing user stories and/or
    acceptance criteria. When we look at Product Backlog items, they are often quite
    high-level, for example, **Log In**, **Choose Item**, **Submit Order.** At first
    glance, you might think these items are clear in scope and could be delivered
    according to expectation. However, a few simple questions from a Development Team
    member opens up the world of ambiguity that exists:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 就绪定义通常从编写用户故事和/或验收标准开始。当我们查看产品待办事项时，它们通常都是相当高层次的，例如**登录**、**选择项目**、**提交订单**。乍一看，你可能会觉得这些事项的范围已经很明确，可以按预期交付。然而，开发团队成员提出的几个简单问题就揭示了其中存在的模糊性：
- en: When you say log in, do you mean log in with a username and password?
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你说“登录”时，你是指用用户名和密码登录吗？
- en: What happens if I don't have a username registered?
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我没有注册用户名，会发生什么？
- en: What happens if I put in the wrong password?
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我输入错误的密码，会发生什么？
- en: What should happen immediately after I log in?
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登陆后应该立即发生什么？
- en: The practice of writing user stories has become very popular with Agile teams
    because it turns a feature idea into a conversation (or, at least, a promise to
    create a conversation).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 编写用户故事的实践在敏捷团队中变得非常流行，因为它将一个功能的想法转化为对话（或者至少是创建对话的承诺）。
- en: Mike Cohn of Mountain Goat Software has driven the popularity of user stories
    and explains how the practice helps us *shift the focus from writing about requirements
    to talking about them. All Agile user stories include a written sentence or two
    and, more importantly, a series of conversations about the desired functionality*.[13](#footnote-059)
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Mountain Goat Software的Mike Cohn推动了用户故事的流行，并解释了这一做法如何帮助我们*将关注点从编写需求转移到讨论需求上。所有敏捷用户故事都包含一两句话，且更重要的是，一系列关于期望功能的对话*。[13](#footnote-059)
- en: 'User stories tend to follow the template: as a <type of user>, I want <some
    goal> so that <some reason>.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 用户故事通常遵循以下模板：作为一个<用户类型>，我想要<某个目标>，以便<某个原因>。
- en: So, after some brief conversation between the Development Team members, business
    stakeholders, and the Product Ownership, the **Log In** feature could be re-written
    as, "*as a retail banking customer, I want to log in with my username and correct
    password so that I can be presented with my latest bank balance.*" The conversation
    may also have driven the splitting of this feature into several other user stories
    that focus on how to get a username/password, what should happen if incorrect
    credentials are supplied, other information and options available after logging
    in, what other types of customers should be able to see and do, and so on.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在开发团队成员、业务利益相关者和产品负责人之间进行简短对话后，**登录**功能可以被重新编写为：“*作为一个零售银行客户，我想通过用户名和正确的密码登录，以便查看我的最新银行余额*。”这场对话可能还促使了将这个功能拆分为几个其他用户故事，分别聚焦于如何获取用户名/密码、如果输入了错误的凭证该怎么办、登录后可用的其他信息和选项、其他类型的客户应该能够查看和执行的操作等。
- en: 'The user story practice facilitates three outcomes, also known as the three
    Cs:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 用户故事实践促进了三个结果，也就是所谓的三C：
- en: It generates a **Card**—the user story is short enough that it can be written
    on a small index card (or a digital equivalent).
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它生成了一个**卡片**——用户故事足够简短，可以写在一张小的索引卡片上（或数字等效物）。
- en: It generates a **Conversation**—both in writing this user story and capturing
    unknowns or further clarifications needed, yet provides enough direction for working
    on the item.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它生成了**对话**——通过编写这个用户故事并捕捉需要进一步澄清或未知的内容，同时为处理该项提供了足够的方向。
- en: It provides **Confirmation** of the scope and expectation of this individual
    item that will deliver a small piece of value to the end user.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它提供了**确认**，确认该单个项目的范围和期望，能够为最终用户提供一小部分价值。
- en: '[13](#footnote-059-backlink) [https://www.mountaingoatsoftware.com/agile/user-stories](https://www.mountaingoatsoftware.com/agile/user-stories)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[13](#footnote-059-backlink) [https://www.mountaingoatsoftware.com/agile/user-stories](https://www.mountaingoatsoftware.com/agile/user-stories)'
- en: The INVEST criteria is a good pattern to check against user stories.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: INVEST标准是检查用户故事的一个良好模式。
- en: '![](img/B16297_12_09.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16297_12_09.jpg)'
- en: 'Figure 12.9: INVEST criteria'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.9：INVEST标准
- en: You'll notice that the act of re-writing a feature as a user story helped answer
    some of the example questions, but not all of them. While we could write many
    user stories simply to answer every question a developer might have, this may
    result in them being too granular and developers grouping them together to write
    code. So, a second popular practice to prepare items for delivery is the act of
    writing acceptance criteria.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到，将一个功能重新编写为用户故事有助于回答一些示例问题，但并不是所有问题都能解答。虽然我们可以通过编写许多用户故事来回答开发人员可能有的每个问题，但这可能导致用户故事过于细化，开发人员会将它们组合起来写代码。因此，为了准备交付项，第二种常见做法是编写验收标准。
- en: 'Acceptance criteria is a further elaboration of understanding and often written
    on the back of the index card holding a user story. Acceptance criteria are the
    conditions of satisfaction a Product Owner and stakeholders will have when the
    item has been completed. These are low-level binary points of clarification —
    basically, a checkbox list that the Product Owner may go through to convince themselves
    that a feature has been delivered to meet business expectations. So, some acceptance
    criteria for our **Log In** feature may include the following:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 验收标准是对理解的进一步阐述，通常写在记录用户故事的索引卡背面。验收标准是产品负责人和利益相关方在项完成时的满意条件。这些是低层次的二元澄清点——基本上是产品负责人可以逐一检查的复选框列表，以确保某个功能已经交付并符合业务期望。因此，我们的**登录**功能的一些验收标准可能包括以下内容：
- en: There is a textbox for username and password.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个用于输入用户名和密码的文本框。
- en: Beneath, there is a hyperlink to create a new username.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在下面，有一个超链接，用于创建新的用户名。
- en: The username will be displayed in plain text when typed in.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户名输入时将以纯文本形式显示。
- en: The password will be masked with asterisks when typed in.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码输入时将以星号形式隐藏。
- en: If the username/password is correct, the Customer Details page will be presented
    with the bank balance at the top of the page.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果用户名/密码正确，客户详情页面将显示页面顶部的银行余额。
- en: If the username/password is incorrect, an error message will appear.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果用户名/密码错误，将出现错误信息。
- en: If an incorrect password is entered three times in a 15-minute period, the session
    will be locked out for a further 15 minutes.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在15分钟内连续三次输入错误密码，系统将再锁定15分钟。
- en: Each of these items represents small, standalone tests (which can be automated).
    They are specific to the functionality being built. Later in this chapter, we'll
    show how another practice, the Definition of Done, is used to drive other types
    of testing.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这些条目代表小型的、独立的测试（可以自动化）。它们特定于正在构建的功能。在本章后面，我们将展示如何使用另一个做法——完成定义，来推动其他类型的测试。
- en: The act of writing user stories and acceptance criteria helps generate shared
    understanding across all team members, Product Owners, and stakeholders. They
    are often practices used in Product Backlog Refinement sessions, which were discussed
    in the previous chapter.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 编写用户故事和接受标准有助于在团队成员、产品负责人和利益相关者之间生成共享的理解。这些通常是在产品待办事项梳理会议中使用的做法，前一章节已经讨论过这些会议。
- en: If a team sees the value in these practices, they may choose to add them to
    their Definition of Ready so that they always go through the motions of writing
    user stories and acceptance criteria for a Product Backlog item, so that it will
    be ready to be worked on. If an item does not have acceptance criteria, it is
    NOT ready and the team either needs to do some refinement and write the acceptance
    criteria, or demote the item on the Product Backlog and find alternative items
    that are ready.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 如果团队认为这些做法有价值，他们可以选择将其添加到他们的就绪定义中，以便始终按流程编写用户故事和接受标准，以确保产品待办事项准备好进行处理。如果某个项目没有接受标准，那么它就不准备好，团队需要进行一些优化并编写接受标准，或者将该项目降级到产品待办事项列表中，寻找已准备好的替代项目。
- en: Now, it's important to call out some misuses and problems that can come about
    through having a Definition of Ready. First, this is not an opportunity to introduce
    lots of pre-development phase gates. Definitions of Ready should not be about
    writing long specifications, having design documents signed off, having architectural
    review board approvals, and so on. The Definition of Ready is about giving the
    team the confidence that, if they take some work into a Delivery Iteration, they
    will get it done.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，必须指出通过使用就绪定义可能出现的一些误用和问题。首先，这不是引入大量开发前阶段门槛的机会。就绪定义不应包括编写长篇规格说明、签署设计文档、获得架构审查委员会批准等内容。就绪定义的重点是让团队有信心，如果他们将某项工作带入交付迭代中，他们能够完成它。
- en: Secondly, the Definition of Ready is not a mandatory practice for teams. Like
    all practices in this book, it is a tool that is useful to try and, if the team
    does experience problems with getting work out of the Delivery Iterations they
    take in, it would be recommended to try using the Definition of Ready practice.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，就绪定义不是团队的强制性做法。像本书中的所有做法一样，它是一个有用的工具，值得尝试。如果团队在交付迭代中遇到工作难以开展的问题，建议尝试使用就绪定义这一做法。
- en: When we look at a team's Definition of Ready, we look for statements that are
    focused on the team and their comfort or confidence, as these are clearly the
    criteria that bring the team to the fore.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们查看团队的就绪定义时，我们寻找专注于团队及其舒适度或信心的声明，因为这些显然是促使团队前进的标准。
- en: Let's look at the Definition of Ready criteria our PetBattle team put in place.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看PetBattle团队制定的就绪定义标准。
- en: PetBattle – Definition of Ready
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PetBattle – 就绪定义
- en: The PetBattle team met a few days before their first Delivery Iteration. They
    looked at the Product Backlog that had emerged from Value Slice and Discovery
    Loop practices. There was clearly some discomfort and misalignment in exactly
    what the feature was going to deliver and involve. So, the team booked a series
    of 40-minute Product Backlog Refinement sessions.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: PetBattle团队在他们的第一次交付迭代前几天开会。他们查看了从价值切片和发现循环实践中产生的产品待办事项。显然，团队对功能具体交付内容和涉及的工作存在一些不适和不一致。因此，团队安排了一系列40分钟的产品待办事项梳理会议。
- en: During the first session, they brainstormed their Definition of Ready and agreed
    this would be used in all future Product Backlog Refinement sessions to validate
    and assure that they would be ready to work on an item.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一次会议中，他们集体头脑风暴出了他们的准备好定义，并一致同意在未来的所有产品待办事项精炼会议中使用此定义，以验证和确保任务准备好进行工作。
- en: 'The Definition of Ready included:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好定义包括：
- en: The team has written and agreed on acceptance criteria with the Product Owner
    and, where it makes sense, business or technical stakeholders.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 团队已与产品负责人达成一致，编写并同意了验收标准，并在必要时与业务或技术相关方达成一致。
- en: The team feels the item can be delivered within a few days of development.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 团队认为该项任务可以在开发后的几天内交付。
- en: The team has collectively sized the item using a relative sizing technique.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 团队已经使用相对估算技术共同对该项任务进行了大小估算。
- en: The team understands where the item fits into the existing or emergent architecture.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 团队理解该项任务在现有或新兴架构中的位置。
- en: The team has seen and has access to UI and technical research.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 团队已看到并能够访问UI和技术研究资料。
- en: Any dependencies identified by the team to complete the item have been satisfied
    or the team is confident that they can be satisfied within the iteration.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 团队已满足完成该项任务所需的所有依赖关系，或者团队有信心在迭代内能够满足这些依赖关系。
- en: The team sees the value in doing this work.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 团队认为进行这些工作的价值是显而易见的。
- en: The team agreed that they would regularly use the Fist of Five confidence vote
    or Roman vote to assess their comfort and confidence levels for the seven points
    above. They were unified in that they should never take items into a Delivery
    Iteration that were not ready. They would need lots of short Product Backlog Refinement
    sessions to keep the top backlog items ready.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 团队达成一致，他们将定期使用“五指信心投票”或“罗马投票”来评估他们对上述七个要点的舒适度和信心。他们一致认为，绝不应将未准备好的任务带入交付迭代。为了保持待办事项的准备状态，他们需要大量短时间的产品待办事项精炼会议。
- en: To discuss the Definition of Ready with the wider community or to read more
    information or even improve the practice, have a look at the Open Practice Library
    page at [https://openpracticelibrary.com/practice/definition-of-ready/](https://openpracticelibrary.com/practice/definition-of-ready/).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 若要与更广泛的社区讨论准备好定义，或阅读更多信息甚至改进实践，可以查看[https://openpracticelibrary.com/practice/definition-of-ready/](https://openpracticelibrary.com/practice/definition-of-ready/)上的开放实践库页面。
- en: Now we have some items **ready** to be delivered, let's look at the most popular
    Agile framework used for iterative delivery, Scrum.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一些**准备好**交付的任务，接下来我们来看看最流行的迭代交付敏捷框架——Scrum。
- en: Scrum
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Scrum
- en: When you hear someone say that they are now doing agile, their team is using
    agile, or their organization has adopted agile, there's a very strong chance that
    what they are actually doing is some form of Scrum.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 当你听到有人说他们现在在做敏捷，或者他们的团队在使用敏捷，或者他们的组织已经采纳了敏捷方法时，极有可能他们实际上是在做某种形式的Scrum。
- en: Scrum is not the same as agile. As mentioned earlier, Agile is an ideology.
    It is underpinned by those values and principles set out in the Agile Manifesto.
    Scrum is one of several frameworks that instantiates Agile and makes the principles
    a reality through a group of practices. It is also, by far, the most popular Agile
    framework.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Scrum并不等同于敏捷。正如前面提到的，敏捷是一种理念，它由敏捷宣言中规定的价值观和原则支撑。Scrum是将敏捷理念转化为现实的若干框架之一，并通过一系列实践使这些原则成为可能。它也是目前最受欢迎的敏捷框架。
- en: It was created by Jeff Sutherland and Ken Shwaber in the 1990s and was inspired
    by Hirotaka Takeuchi and Ikujiro Nonaka when they published *The New New Product
    Development Game*.[14](#footnote-058)
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 它是由Jeff Sutherland和Ken Shwaber在1990年代创建的，并且受到Takeuchi Hirotaka和Nonaka Ikujiro在他们发布的*The
    New New Product Development Game*一书中的启发。[14](#footnote-058)
- en: There have been numerous books written about Scrum and, as with any good framework,
    it has evolved and continuously improved with learning and experience. We would
    strongly recommend reading the latest version of the Scrum Guide as presented
    by Sutherland and Schwaber at [https://scrumguides.org/](https://scrumguides.org/).
    It is an artifact we recommend re-reading every now and again to refresh your
    memory and knowledge of this very powerful framework. This is especially true
    when updates are made and there are new releases of the framework.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 已经有大量关于Scrum的书籍出版，正如任何优秀的框架一样，它在学习和经验的基础上不断发展和完善。我们强烈推荐阅读Sutherland和Schwaber所呈现的Scrum指南的最新版本，网址为[https://scrumguides.org/](https://scrumguides.org/)。这是我们建议定期重新阅读的文献，以便刷新对这一强大框架的记忆和知识。尤其是在框架进行更新或发布新版本时，这一点尤为重要。
- en: We're not going to teach Scrum in this book as there are many better articles
    and books and, most importantly, the Scrum Guide can do that much better. What
    we are going to do is demonstrate how we have used Scrum in our engagements, how
    it fits into the Mobius Loop, and share some stories of good and bad Scrum adoptions.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本书中不会教授Scrum，因为有很多更好的文章和书籍，最重要的是，Scrum指南能够做得更好。我们将展示的是我们如何在项目中使用Scrum，它如何融入Mobius循环，并分享一些关于Scrum采纳的成功与失败故事。
- en: One of the reasons we love Scrum is because of its simplicity. Often people
    confuse the many (now hundreds) of practices associated with Agile as being Scrum.
    In fact, Scrum has very few practices. We tend to describe them as 3-5-3 (which
    sounds a bit like a formation for a sports team!).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们喜欢Scrum的原因之一是它的简洁性。人们常常将与敏捷相关的许多（现在已经有几百种）实践误认为是Scrum。事实上，Scrum的实践非常少。我们通常将它们描述为3-5-3（听起来有点像体育队的阵型！）。
- en: '[14](#footnote-058-backlink) [https://hbr.org/1986/01/the-new-new-product-development-game](https://hbr.org/1986/01/the-new-new-product-development-game)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '[14](#footnote-058-backlink) [https://hbr.org/1986/01/the-new-new-product-development-game](https://hbr.org/1986/01/the-new-new-product-development-game)'
- en: '![](img/B16297_12_10.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16297_12_10.jpg)'
- en: 'Figure 12.10: The Scrum framework'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.10：Scrum框架
- en: This Scrum picture can be best described by grouping the roles, events, and
    artifacts.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Scrum图可以通过将角色、事件和工件分组来最好地描述。
- en: The 3-5-3 Formation
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3-5-3阵型
- en: The 3-5-3 formation represents 3 roles, 5 events (previously known as ceremonies),
    and 3 artifacts. The three roles are the Product Owner, the ScrumMaster, and the
    Development Team. The five events are Sprint Planning, the Daily Scrum (often
    known as the Daily Stand-Up), the Sprint Review (sometimes called the Showcase),
    the Sprint Retrospective, and the Sprint itself as a fixed time-box container.
    The three artifacts are the Product Backlog, Sprint Backlog, and Product Increment.
    That's it! That's all there is to Scrum. Those three roles, five events, and three
    artifacts. All those other things you hear and read about, like Definitions of
    Ready and Definitions of Done, Burndown and Burnup, User Stories and Story Points,
    and so on are all great supporting practices, but not a part of the Scrum framework.
    Let's share a few recommendations and examples about each component of the Scrum
    framework, starting with the roles.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 3-5-3阵型代表了3个角色、5个事件（以前称为仪式）和3个工件。这三个角色分别是产品负责人、ScrumMaster和开发团队。五个事件包括Sprint计划会议、每日Scrum（通常称为每日站会）、Sprint评审（有时称为展示会）、Sprint回顾会议，以及作为固定时间框架的Sprint本身。三个工件是产品待办事项、Sprint待办事项和产品增量。就这样！这就是Scrum的全部内容。这三个角色、五个事件和三个工件。你所听到或看到的其他内容，比如“就绪定义”和“完成定义”、燃尽图和燃起图、用户故事和故事点等等，都是很好的辅助实践，但不是Scrum框架的一部分。接下来，我们将分享一些关于Scrum框架每个组成部分的建议和示例，从角色开始。
- en: The Product Owner Role
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 产品负责人角色
- en: In *Chapter 11,* *The Options Pivot*, we introduced the idea of Product Ownership,
    and strongly recommended watching Henrik Kniberg's *Product Ownership in a Nutshell*
    video[15](#footnote-057). If you haven't watched it yet, then please put this
    book down and go and watch it now. Even if you did watch it then, we'd suggest
    watching it again. It's 15 minutes of information that is pure gold.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第11章*，*选项转折*中，我们介绍了产品所有权的概念，并强烈推荐观看Henrik Kniberg的*简明产品所有权*视频[15](#footnote-057)。如果你还没有看过，请先放下这本书，马上去看。即使你看过，我们仍建议再看一遍。那15分钟的视频内容简直是金玉良言。
- en: '"*The Product Owner should have been a key contributor and supporter throughout
    the Discovery Loop and Options Pivot,*" explains Kniberg, their big focus being
    on enabling communication and collaboration between Development Team members and
    stakeholders. They convey the message of envisioned products and set priorities
    for the team by utilizing many of the Options Pivot practices.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '"**产品负责人应当在整个发现循环和选项转折过程中发挥关键作用，并提供支持，**" Kniberg解释道，他们的主要关注点是促进开发团队成员和利益相关者之间的沟通与协作。他们通过利用许多选项转折的实践来传达产品的愿景，并为团队设定优先级。'
- en: In a Delivery Iteration, this communication is even more important. Having a
    Product Owner that can be the voice of the business, the voice of the user (even
    the voice of technology stakeholders), and be able to regularly converse with
    developers is a key ingredient in enabling high performance in Scrum teams. That
    means face-to-face interaction, negotiations, alignment, and driving shared understanding
    between the Development Team and the Product Owner.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_11.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.11: Collaboration between a Product Owner and her Development Team'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '[15](#footnote-057-backlink) [https://www.youtube.com/watch?v=502ILHjX9EE](https://www.youtube.com/watch?v=502ILHjX9EE)'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: The Product Owner needs to be regularly available to the Development Team, especially
    during Product Backlog Refinement to, for example, write and agree on acceptance
    criteria, and during Scrum events, such as Sprint Planning.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_12.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.12: Development Team member clarifying his understanding with his
    Product Owner and Business experts'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: In the case study story in *Chapter 11*, *The Options Pivot*, *Experimenting
    with different Product Owners*, we mentioned that Product Owners should see their
    current role as one to self-destruct and not be needed long-term. They can make
    themselves obsolete by successfully facilitating the Development Team members,
    directly connecting them with stakeholders and users, and building those relationships
    to a level so that their facilitative role is no longer needed.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: The ScrumMaster Role
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have not included a photo of a ScrumMaster in action because the ScrumMaster
    arguably should not ever be seen to be in too much frontline action. Their role
    is an enabling one. ScrumMasters should create an environment and a safe space
    that enables the Development Team to see all the action. Of course, this does
    not happen immediately, especially with a newly formed team or a team unfamiliar
    with Agile or Scrum. In these cases, they have to coach the team on the Scrum
    process and help move them towards a more productive environment.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Through great facilitation, great preparation of practices, and effective coaching
    of practices, the ScrumMaster should promote autonomy in the team, self-correction
    and continuous improvement, and self-organization. It is another role where the
    person in it should be trying to remove the need for themself. The ultimate autonomous,
    self-organizing, self-correcting team should no longer need to be facilitated
    or led.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: The Development Team Role
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we have already seen, the Product Owner should aspire to remove the need
    for themselves because the Development Team is so well connected to users and
    stakeholders with strong psychological safety for two-way feedback and conversation
    between the two parties. The ScrumMaster should aspire to remove the need for
    themselves because they have facilitated an environment that is full of information
    radiation, very strong adoption of practices by a team that is fully autonomous,
    self-correcting, self-organizing, and continuously improving all the time.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，产品负责人应该努力消除对自身的依赖，因为开发团队与用户和利益相关者之间有着良好的连接，且具备强大的心理安全感，能够进行双向反馈和交流。ScrumMaster应该努力消除对自身的依赖，因为他们已经创造了一个充满信息辐射的环境，团队完全自治，自我修正、自我组织，并且不断改进。
- en: That just leaves one role in Scrum that doesn't remove the need for themselves,
    the Development Team. The term *Development Team* may be a little confusing. Firstly,
    as we've mentioned several times in this book already, DevOps is about bringing
    down the wall between Development and Operations, yet the Scrum terminology seems
    to still lean heavily towards Development. In reality, this team should include
    T-shaped people with breadth and depth and, between all its members, should be
    able to design, build, test, deploy, operate, and maintain features from the Product
    Backlog all the way to production.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这就只剩下Scrum框架中的一个角色没有消除对自身的依赖——开发团队。"开发团队"这一术语可能会有些混淆。首先，正如我们在本书中已经提到过的，DevOps旨在打破开发与运维之间的壁垒，但Scrum术语似乎仍然偏重于开发。实际上，开发团队应该包括具备宽度和深度的T型人才，团队成员之间应该能够从产品积压工作中的每个功能设计、构建、测试、部署、运营到维护，涵盖所有环节。
- en: A great Development Team will most likely have been set up for success by a
    great ScrumMaster. Their workspace will be full of information radiators and artifacts
    generated by the Discovery Loop, Options Pivot, Delivery Loop, and foundational
    practices. Lots of care and attention will have gone into their surroundings,
    ensuring that the Development Team has been enabled and set up for the best possible
    success with as many foreseen and unforeseen obstacles removed. They will have
    organized time away from the computer, fed and watered the team, organized socials,
    and continuously monitored and improved the open culture and psychological safety
    of the team. The motivation levels, mood, and feeling of empowerment, autonomy,
    mastery, and purpose should be assessed and measured regularly (using practices
    such as the Social Contract, Stop-the-World events, Mood Marbles, and Real-Time
    Retrospective all introduced in *Chapter 4*, *Open Culture*).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 一个优秀的开发团队很可能是由优秀的ScrumMaster为其创造了成功的条件。团队的工作空间将充满信息辐射器和由发现循环、选项转换、交付循环及基础实践生成的文档。团队的环境会经过精心设计，确保开发团队能够在最佳的条件下工作，尽可能消除所有预见的和不可预见的障碍。他们会组织团队远离电脑的时间，确保团队有足够的食物和水，组织社交活动，并持续监控和改善团队的开放文化和心理安全感。团队的动力水平、情绪以及赋权感、自主性、掌握感和目的感应定期进行评估和衡量（使用*第4章*，*开放文化*中介绍的实践，如社会契约、停止世界事件、情绪弹珠和实时回顾等）。
- en: '![](img/B16297_12_13.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16297_12_13.jpg)'
- en: 'Figure 12.13: Cross-functional Development Team'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.13：跨职能开发团队
- en: Later in the book, in *Chapter 18*, *Sustain It*, we will look at larger multi-team
    organizations and some of the new patterns that help collaboration between the
    teams. But first, let's look at the artifacts that every team using Scrum should
    always have.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的后续章节中，*第18章*，*维持它*，我们将探讨更大规模的多团队组织及其帮助团队间协作的新模式。但首先，让我们看看每个使用Scrum的团队应该始终拥有的文档。
- en: The Product Backlog Artifact
  id: totrans-203
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 产品积压工作文档
- en: The term "backlog" is used frequently in Agile. If the team is using Scrum,
    it's important to recognize that there are different types of backlogs and they
    serve very different purposes. The Product Backlog shows all the work and ideas
    of the whole product, prioritized according to value by the Product Owner and
    available for the stakeholders to see; for example, the most prioritized features
    to be built into the product next.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '"积压工作"这一术语在敏捷开发中经常使用。如果团队采用的是Scrum框架，那么很重要的一点是要认识到存在不同类型的积压工作，它们的用途也各不相同。产品积压工作展示了整个产品的所有工作和创意，按照产品负责人确定的价值优先级进行排序，并且对利益相关者可见；例如，下一步将要开发的优先级最高的功能。'
- en: In *Chapter 11, The Options Pivot*, we introduced the Product Backlog and showed
    how it emerged from Value Slicing and User Story mapping and was prioritized using
    practices such as Impact and Effort Prioritization, How-Now-Wow Prioritization,
    the Cost of Delay, and Weighted-Shortest-Job-First. From earlier chapters, we
    know that the Product Backlog items are all generated from practices and conversations
    on the Discovery Loop such as Impact Mapping, Event Storming, Human-Centered Design,
    Non-Functional Mapping, and Metrics-Based Process Mapping.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第11章，选项枢轴*中，我们介绍了产品待办事项，并展示了它如何从价值切片和用户故事映射中产生，并通过诸如影响与努力优先级排序、如何-现在-哇优先级排序、延迟成本和加权最短工作优先等实践进行优先级排序。从前面的章节中，我们知道，产品待办事项中的所有条目都是通过发现循环中的实践和对话生成的，例如影响映射、事件风暴、人本设计、非功能映射和基于指标的过程映射。
- en: The Product Backlog is such an important artifact that it should be displayed
    prominently, accessible to everyone, and should regularly be used by Product Owners,
    Development Team members, and ScrumMasters—as well as other stakeholders, and
    anyone else interested in the next steps of this product.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 产品待办事项是一个如此重要的工件，应该显眼地展示，供所有人访问，并且应该定期由产品负责人、开发团队成员、ScrumMaster 以及其他利益相关者和任何对该产品下一步感兴趣的人使用。
- en: The Product Backlog is living and breathing and can be updated at any time.
    All the practices that lead to Product Backlog items also have artifacts that
    are living and breathing at any time. So, a stakeholder at any time might have
    a new impact or deliverable idea that can go straight onto the Impact Map. The
    Development Team may gather for a time-boxed Event Storming session during their
    sprint to refine and answer some unanswered questions on the existing Event Storm,
    or they may start an Event Storm on a whole new area of the business. More user
    interviews, Human-Centered Design, and Empathy Mapping should continue. All of
    this will result in refined, improved, and new ideas that can be processed through
    Value Slicing, prioritized, and ending up on the Product Backlog.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 产品待办事项是动态的，可以随时更新。所有导致产品待办事项条目的实践也都有动态的工件，随时可以更新。因此，任何时候，利益相关者可能会有新的影响或交付想法，这些想法可以直接添加到影响图上。开发团队可以在
    Sprint 期间举行一次时间盒的事件风暴会议，以完善并回答现有事件风暴中的一些未解答问题，或者他们可能会针对业务的全新领域开始一个事件风暴。更多的用户访谈、人本设计和同理心映射应该继续进行。所有这些都会导致改进、优化和新的想法，可以通过价值切片进行处理、优先级排序，并最终进入产品待办事项。
- en: '![](img/B16297_12_14.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16297_12_14.jpg)'
- en: 'Figure 12.14: Product Backlog publicly displayed on a wall'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.14：公开展示在墙上的产品待办事项
- en: The Sprint Backlog is a different artifact that is more micro-focused for a
    specific sprint or Delivery Iteration.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Sprint 待办事项是一个不同的工件，更加聚焦于特定的 Sprint 或交付迭代。
- en: The Sprint Backlog Artifact
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Sprint 待办事项工件
- en: The Sprint Backlog is created during the Sprint Planning Event and shows all
    of the items the team has pulled from the Product Backlog into the Sprint Backlog
    (having assessed they are ready, according to their Definition of Ready). What
    results from a Sprint Planning session is a Sprint Backlog on a highly utilized
    and very important information radiator—the Sprint Board.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Sprint 待办事项是在 Sprint 计划会议期间创建的，展示了团队从产品待办事项中提取到 Sprint 待办事项中的所有条目（在评估它们符合就绪定义后）。Sprint
    计划会议的结果是一个 Sprint 待办事项，展示在一个高度使用且非常重要的信息辐射器——Sprint 看板上。
- en: '![](img/B16297_12_15_1.jpg)![](img/B16297_12_15_2.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16297_12_15_1.jpg)![](img/B16297_12_15_2.jpg)'
- en: 'Figure 12.15: A Sprint Backlog on a Sprint Board'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.15：Sprint 看板上的 Sprint 待办事项
- en: 'The Sprint Board is one of the artifacts that sees the most use during a Delivery
    Loop iteration and one of our favorite information radiators. In the preceding
    example, the following information is shown:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: Sprint 看板是交付循环迭代中使用最频繁的工件之一，也是我们最喜欢的信息辐射器之一。在前面的示例中，展示了以下信息：
- en: The Sprint number.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Sprint 编号。
- en: The Sprint Goal—a one- or two-sentence description of what the product should
    do in the next increment that it does not currently do. Ideally, this should link
    to the overall Target Outcomes agreed in the Discovery Loop.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Sprint 目标——用一到两句话描述产品在下一个增量中应该做的，但当前尚未完成的功能。理想情况下，这应该与在发现循环中达成的总体目标成果相连接。
- en: Key dates—the Sprint Planning, Sprint Review, and Sprint Retrospective day,
    and the time required for this sprint.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关键日期——Sprint 计划会议、Sprint 回顾会议和 Sprint 迭代回顾日，以及该 Sprint 所需的时间。
- en: The Sprint Backlog items that have been pulled from the Product Backlog. There
    is a one-to-one matching and should be easily traceable from Product Backlog to
    Sprint Backlog.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Acceptance Criteria that have been agreed for each Sprint Backlog item.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The low-level tasks that are needed to deliver the features according to agreed
    acceptance criteria. These are color-coded to radiate the cross-functional aspect
    of feature development, with different colors representing frontend and backend
    development, data, infrastructure, operations, and design.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Columns to represent the flow of work on each task—Sprint Backlog, In Progress,
    Blocked, Ready for Review, and Done.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Avatars to show which pairs or mobs are working on a given task in the In Progress
    column.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Burndown chart,[16](#footnote-056) a popular visualization practice showing
    the pace of—in this case—tasks getting plotted against the timeline (in days)
    of the sprint.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[16](#footnote-056-backlink) [https://openpracticelibrary.com/practice/burndown/](https://openpracticelibrary.com/practice/burndown/)'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The following template is available in the book's GitHub repository[17](#footnote-055)
    and can be downloaded to produce the same Sprint Board virtually.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_16.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.16: Digital Sprint Board template for a distributed team'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the most impressive and powerful aspects of the Sprint Board is that
    it provides the (almost) final piece of traceability in the life of developing
    a given feature. If you walk-the-walls with all Discovery, Options, and Delivery
    artifacts available, you should be able to see a low-level task (typically a development
    activity performed by a pair of Development Team members that takes a few hours)
    and see its connection to:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: The overall feature/user story and the acceptance criteria on the Sprint Backlog.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where that feature sits on the Product Backlog.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How that feature was prioritized using Value Slicing and other prioritization
    tools.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How that feature fits into the event-driven system and overall business process
    on the Event Storm.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The measurable impact that was hypothesized with the feature on the Impact Map.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The actors captured on the Impact Map the features can be user-tested with.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The overall goal captured on the Impact Map and in Target Outcomes that this
    feature should be aiming to achieve.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The final piece of traceability is the working software, which is the third
    increment of the Scrum framework.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '[17](#footnote-055-backlink) [https://github.com/PacktPublishing/DevOps-Culture-and-Practice-with-OpenShift](https://github.com/PacktPublishing/DevOps-Culture-and-Practice-with-OpenShift)'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: The Product Increment Artifact
  id: totrans-239
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The seventh principle of the Agile Manifesto states that working software is
    the primary measure of progress. When the original writers of the Agile Manifesto
    met approximately ten years after the original manifesto was written, they ran
    a Retrospective event to see if their learning and experience would drive any
    updates to the values or principles. The general consensus was that it still held
    true, and nothing needed to change other than, in some cases, underlining the
    importance of working software.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 《敏捷宣言》的第七条原则指出，工作的软件是进度的主要衡量标准。当《敏捷宣言》的原始作者大约十年后再度聚会时，他们进行了回顾性会议，看看他们的学习和经验是否会推动对价值观或原则的任何更新。普遍共识是，这些原则依然成立，除了在某些情况下强调工作的软件的重要性外，其他没有需要改变的地方。
- en: Many Scrum teams fall down at this point and cannot show working software at
    the Sprint Review event. Even if they do have partially built software to show
    at this event, that is not enough. There should ALWAYS be working software to
    show.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 许多Scrum团队在这一环节失败，无法在Sprint评审会上展示工作的软件。即使他们确实有部分构建好的软件在此次评审会上展示，这也不足够。展示时应该始终有工作的软件。
- en: Show Me the Product!
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展示给我产品！
- en: One of the many techniques we use to create awareness and share ways of working
    between our staff at Red Hat Open Innovation Labs is to share short write-up summaries
    during a residency engagement.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Red Hat Open Innovation Labs中用于提高意识和分享工作方式的众多技巧之一，是在驻场合作期间分享简短的总结报告。
- en: Often a similar summary is shared with customers with links to artifacts, photos
    of practices in action, and feedback captured or actioned.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 通常会将类似的总结分享给客户，附带工件链接、实践过程中的照片以及捕获或采取的反馈。
- en: Mark O'Callaghan is an Open Innovation Labs Engagement Lead based in New York.
    In January 2018, he was leading an engagement for UNICEF[18](#footnote-054) focused
    on data science with an emphasis on visualizing data from a couple of legacy applications
    to support UNICEF in Columbia.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: Mark O'Callaghan是位于纽约的Open Innovation Labs驻场负责人。在2018年1月，他领导了一项面向UNICEF[18](#footnote-054)的合作，重点是数据科学，尤其是将一些遗留应用的数据可视化，以支持联合国儿童基金会在哥伦比亚的工作。
- en: Mark would share weekly email updates of this engagement with a Red Hat community
    of Labs strategy and other interested parties. In his weekly summary, he would
    always include a link to the latest version of the application. This was working
    software running on OpenShift.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: Mark会每周向Red Hat社区的Labs战略团队及其他相关方分享此合作的电子邮件更新。在他的每周总结中，他总是会包括指向最新版本应用的链接。这是运行在OpenShift上的工作软件。
- en: 'This is an awesome example: it is always a good idea to have a Product Increment,
    a link to an app that people can click on — to look at, use, and provide feedback
    on.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很棒的例子：总是一个好主意拥有一个产品增量，一个人们可以点击的应用链接——来查看、使用并提供反馈。
- en: '[18](#footnote-054-backlink) [https://www.redhat.com/en/proof-of-concept-series](https://www.redhat.com/en/proof-of-concept-series)'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '[18](#footnote-054-backlink) [https://www.redhat.com/en/proof-of-concept-series](https://www.redhat.com/en/proof-of-concept-series)'
- en: The final installation of our tour around the Scrum framework and how we use
    it is to explore five Scrum events – Sprint Planning, the Daily Scrum, the Sprint
    Review, the Sprint Retrospective, and the Sprint itself.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对Scrum框架的最后一站，是探索五个Scrum事件——Sprint规划、每日Scrum、Sprint评审、Sprint回顾，以及Sprint本身。
- en: The Sprint Planning Event
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Sprint规划事件
- en: In the previous part of this chapter, we showed the Sprint Board, an amazing
    information radiator that has a great amount of rich information about what the
    teams are currently doing and will be doing in this iteration of the Delivery
    Loop. The Sprint Planning Event is the event that generates this artifact. The
    Scrum Guide details how a Sprint Planning event should be run, who should attend,
    how long it should take, and so on. The following is how we tend to run it.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前一部分，我们展示了Sprint看板，这是一种了不起的信息显示工具，提供了大量关于团队当前在做什么以及在此次交付循环中的计划内容。Sprint规划事件正是产生该工件的事件。Scrum指南详细说明了Sprint规划事件应该如何进行、谁应该参加、应持续多久等等。以下是我们通常如何操作的。
- en: First, we establish a goal. This should be a one- or two-sentence summary of
    what the focus of the sprint is. What will the product do in a week's time that
    it does not do now? What outcome might it achieve? This is often a great conversation
    to have with the Product Owner holding the pen by the whiteboard ready to articulate
    his or her motivations in writing. But he or she always has tremendous support
    from the Development Team and a huge number of artifacts. It's useful to reflect
    on the Target Outcomes we established on the Discovery Loop, which should be nearby
    and visible. It's useful to look at the Product Backlog. If it has been well refined
    and prioritized, the items at the top should offer some clues as to what we might
    work on in this next iteration. Of course, it's useful to reflect and be reminded
    of all the wonderful information on other artifacts, Empathy Maps, and other user
    research, Impact Maps, Event Storms, Retrospective feedback, actions, and so on.
    Sometimes, we will draft the goal, then clarify and confirm it later on in the
    Sprint Planning event.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们确立一个目标。这应该是一个简短的一到两句话，总结冲刺的重点是什么。在一周的时间内，产品将做些什么当前做不到的事情？它可能会取得什么成果？这通常是一个与产品负责人进行对话的好时机，产品负责人可以站在白板旁准备清晰地阐述其动机并写下来。但他或她总是会得到开发团队的大力支持，并且有大量的文档可以参考。回顾我们在发现环节中确立的目标成果是非常有帮助的，这些成果通常会在旁边并且可见。查看产品待办事项列表也是有用的。如果它已经被很好地优化和优先排序，那么列表顶部的项目应该能提供一些线索，指示我们在下一次迭代中可以工作哪些内容。当然，回顾和提醒所有其他文档上的有价值信息，如同理心地图、用户研究、影响地图、事件风暴、回顾反馈、行动项等等也是非常有帮助的。有时，我们会草拟目标，然后在冲刺规划会议中进一步澄清和确认。
- en: Next, the team will start to pull items from the Product Backlog working from
    the top – the Product Owner or Project Manager does not do this. It's important
    to move away from a push phenomenon associated with traditional delivery models
    and for the team to be engaged in pulling the items needed to achieve the goal.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，团队将开始从产品待办事项列表中拉取项目，按照优先级从顶部开始 – 产品负责人或项目经理不会做这个工作。重要的是要摆脱传统交付模式中常见的“推动现象”，并让团队参与拉取所需的项目，以实现目标。
- en: When pulling items and adding them into the Sprint Backlog, the team should
    confirm that the items are indeed ready to be worked on by consulting their Definition
    of Ready. If, like us, you work in short one-week sprints, it can be difficult
    to find enough time in the week to do enough refinement to have all Definition
    of Ready criteria satisfied before Sprint Planning. So we often will take some
    time to ensure items are ready, acceptance criteria are written and understood,
    and the team is generally feeling comfortable and confident about the item in
    question.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在将项目从产品待办事项列表中拉入冲刺待办事项列表时，团队应确认这些项目是否真的准备好进行开发，可以通过查阅他们的“已准备好定义”（Definition
    of Ready）来确认。如果你们像我们一样，采用短周期的一周冲刺，可能很难在一周内找到足够的时间进行精炼，以满足所有“已准备好定义”标准，尤其是在冲刺规划之前。因此，我们通常会花一些时间确保项目已经准备好，验收标准已经编写并且被理解，团队也通常对该项目感到舒适和有信心。
- en: The third step is to decompose the items into low-level tasks. We capture all
    the things we need to do to deliver this feature to satisfy the acceptance criteria
    and to meet the Definition of Done (which we'll cover shortly). This is a great
    opportunity to follow another diverge-converge pattern or liberating structure
    as introduced in *Chapter 4*, *Open Culture*, like 1-2-4-all. Getting everyone
    thinking about the work needed to deliver this increment and visualizing this
    is a really powerful aspect of this approach. This is detailed design on steroids!
    This is fixing bugs before we even write any code! As we saw in the example Sprint
    Board, using different-color sticky notes to reflect different types of tasks
    such as frontend, backend, data, design, infrastructure, operations, and so on,
    visualizes the cross-functional nature of the team.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 第三步是将这些项目拆解为低层次的任务。我们需要捕捉完成该功能所需做的所有事情，以满足验收标准并符合“完成定义”（Definition of Done，稍后会讲到）。这是一个很好的机会，采用另一种发散-聚焦模式或解放结构，如*第4章*中介绍的*开放文化*，例如1-2-4-全体（1-2-4-all）。让每个人思考实现这一增量所需的工作，并将其可视化是这个方法的一个非常强大的方面。这是超级详细设计！这是在我们甚至还没有编写代码之前就解决了Bug！正如我们在示例冲刺看板中看到的那样，使用不同颜色的便利贴来表示不同类型的任务，如前端、后端、数据、设计、基础设施、运维等，可以很好地展示团队的跨职能特性。
- en: '![](img/B16297_12_17.jpg)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16297_12_17.jpg)'
- en: 'Figure 12.17: Product Owner Paul continues to iterate on his goal while a MakMakMakMak
    Development Team member pulls items from the Product Backlog into the Sprint Backlog'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.17：产品负责人Paul继续在他的目标上进行迭代，而MakMakMakMak开发团队的一名成员将项目从产品待办事项列表中拉入到冲刺待办事项列表中。
- en: After much collaboration, merging together of individual ideas for tasks into
    pairs, and then into pairs of pairs, and finally into a full group, we should
    have a Sprint Board, a complete visualization of the week ahead. The team should
    be fully aligned on the work that needs to be done. Now, can we achieve this?
    We finish the Sprint Planning event with a Confidence Vote – how confident are
    we? Can we meet the Sprint Goal by delivering the features in the Sprint Backlog?
    Can we satisfy all the Acceptance Criteria agreed and complete all tasks by the
    date of the Sprint Review on the board? Team members vote with their fingers—0
    or 1 means very low confidence and we need to re-scope or discuss what it will
    take to increase confidence. A group consensus of 4 or 5 is what we want, and
    this indicates confidence from the outset.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 经过大量协作，将个人的任务想法合并成对，再将这些对合并成成对的对，最后合并成一个完整的团队，我们应该得到一个冲刺看板，这将是未来一周工作的完整可视化。团队应该完全一致，知道需要完成哪些工作。那么，我们能做到这一点吗？我们通过信心投票结束冲刺规划活动——我们有多有信心？我们能通过交付冲刺待办事项中的特性来实现冲刺目标吗？我们能满足所有已商定的验收标准并在冲刺评审的日期之前完成所有任务吗？团队成员通过手指投票——0或1表示非常低的信心，我们需要重新规划或讨论如何提高信心。4或5的集体共识是我们想要的，这表明从一开始就充满信心。
- en: '![](img/B16297_12_18.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16297_12_18.jpg)'
- en: 'Figure 12.18: Confidence Voting on achieving the Sprint Goal'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.18：关于实现冲刺目标的信心投票
- en: As you can see from the photographs, those big 8-foot by 4-foot foam boards,
    which we explained in *Chapter 5*, *Open Environment and Open Leadership*, are
    incredibly powerful as Sprint Boards. They are light and portable and can easily
    be transported to different areas of the build, for example, to the Daily Scrum
    or to a Daily Stand-Up event.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 如你从照片中看到的，那些大约8英尺乘4英尺的泡沫板，正如我们在*第五章*中解释的，*开放环境与开放领导力*，作为冲刺看板非常强大。它们轻便且便于携带，可以轻松地运输到不同的区域，例如每日Scrum或每日站立会议。
- en: Iteration or Sprint Planning has its own entry in the Open Practice Library
    and is an excellent resource to find out more, contribute improvements, and discuss
    with the wider community the use of this practice. You can find this page at [https://openpracticelibrary.com/practice/iteration-planning/](https://openpracticelibrary.com/practice/iteration-planning/).
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代或冲刺计划在开放实践库中有自己的条目，这是一个很好的资源，可以进一步了解、贡献改进并与更广泛的社区讨论该实践的使用。你可以在[https://openpracticelibrary.com/practice/iteration-planning/](https://openpracticelibrary.com/practice/iteration-planning/)找到这个页面。
- en: The Daily Scrum Event
  id: totrans-263
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 每日Scrum事件
- en: This event is the most popular Agile practice and is often how Agile teams start
    adopting Agile practices. Just meeting for 15 minutes each day to synchronize
    activities can be so valuable in keeping the team connected and driving autonomy.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 这个事件是最流行的敏捷实践，通常也是敏捷团队开始采用敏捷实践的方式。每天仅花15分钟同步活动，对于保持团队联系和推动自主性非常有价值。
- en: We tend to find the team **talking to the board** works well. As each member
    summarizes what they worked on yesterday (to take the team towards its sprint
    goal), what they're planning to work on today (to take the team to its sprint
    goal), and any blockers or impediments (preventing the team from meeting its sprint
    goal), the board can be updated to ensure it is radiating the same information
    as what the team members are saying. Are the avatars of individuals showing the
    task they're working on? Have we agreed on what pairs or mobs are going to form
    for upcoming tasks? Are blockers clearly radiated in the Blocked column?
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现**与看板交谈**的方式非常有效。每个成员总结他们昨天的工作（以帮助团队实现冲刺目标），今天计划做什么（以帮助团队实现冲刺目标），以及任何阻碍或障碍（阻止团队实现冲刺目标），看板可以被更新，以确保它传达的信息与团队成员所说的相符。个人的头像是否显示他们正在处理的任务？我们是否已经达成共识，哪些任务将组成对或小组？阻碍是否清晰地显示在“阻塞”栏目中？
- en: '![](img/B16297_12_19.jpg)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16297_12_19.jpg)'
- en: 'Figure 12.19: Daily Scrum practice'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.19：每日Scrum实践
- en: 'The Daily Scrum is often an event where **Scrum-but** antipatterns start to
    emerge. Scrum-but represents activities or behaviors that the Scrum team exhibit
    that do not conform to the Scrum framework. For example:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 每日Scrum通常是**Scrum-but**反模式开始出现的地方。Scrum-but代表着Scrum团队所表现出的不符合Scrum框架的活动或行为。例如：
- en: We use Scrum but all of our management shows up to Daily Scrums to get status
    updates.
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用 Scrum，但我们的所有管理人员都会参加 Daily Scrum 以获取状态更新。
- en: We use Scrum but our Daily Scrums tend to run to between 30 and 60 minutes.
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用 Scrum，但我们的 Daily Scrum 通常会持续 30 到 60 分钟。
- en: We use Scrum but we vary the time of our Daily Scrums and who attends.
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用 Scrum，但我们会变动 Daily Scrum 的时间和参与人员。
- en: These are all anti-patterns to an incredibly simple practice that is purely
    for the Development Team to synchronize with each other and highlight any blockers.
    Jeff Sutherland often says if your Daily Scrum takes more than 15 minutes, you're
    doing it wrong.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是与一个极其简单的实践相反的做法，简单的实践仅仅是为了让开发团队互相同步并突出任何阻碍因素。Jeff Sutherland 常说，如果你的 Daily
    Scrum 超过 15 分钟，那你就做错了。
- en: If you have experiences to share about this practice or suggestions to improve
    it further, please go to the Open Practice Library page at [https://openpracticelibrary.com/practice/daily-standup/](https://openpracticelibrary.com/practice/daily-standup/).
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有关于这个实践的经验分享或改进建议，请访问 [https://openpracticelibrary.com/practice/daily-standup/](https://openpracticelibrary.com/practice/daily-standup/)
    页面。
- en: Let's fast-forward to the end of the Sprint and look at a very valuable practice,
    the Sprint Review Event or Showcase.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速跳到 Sprint 结束时，看看一个非常有价值的实践——Sprint 回顾会或展示会。
- en: The Sprint Review Event
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Sprint 回顾会
- en: The Scrum framework calls this event the Sprint Review and provides an opportunity
    to show the new Product Increment and invites feedback. This Open Practice Library
    entry is called the Showcase.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: Scrum 框架称这个事件为 Sprint 回顾会，并提供展示新产品增量和邀请反馈的机会。这个 Open Practice Library 条目被称为展示会。
- en: 'Some hints and tips we''ve picked up on the Showcase are as follows:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 关于展示会的一些提示和建议如下：
- en: First, invite the world! This is such a wonderful opportunity to showcase the
    product increment to valuable stakeholders and users. It's helpful to schedule
    this event at the same time and place as every iteration and also make it accessible
    to join remotely – investing in good video conferencing systems can really improve
    engagement.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，邀请全世界！这是一个展示产品增量给重要利益相关者和用户的绝佳机会。最好将这个活动安排在每个迭代的同一时间和地点，并且让远程加入变得更加便捷——投资于良好的视频会议系统可以真正提高参与度。
- en: This is a great opportunity to reconnect with existing stakeholders and contributors
    to the Discovery Loop practices. Look at the actors on your Impact Map. Look at
    the people for whom we produced an Empathy Map. Can we get those folks back in
    to see the emerging product and provide further feedback?
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个与现有利益相关者和发现环路实践的贡献者重新连接的好机会。看看你影响图上的参与者。看看我们为之制作同理心图的那些人。我们能把他们请回来，看看新兴的产品并提供进一步的反馈吗？
- en: 'The Showcase should not just be a showcase of shiny new functional features,
    but of everything the team has worked on and wants to show off to the wider stakeholder
    community. Often our Showcases will include:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 展示会不仅仅是展示闪亮的新功能特性，而是展示团队所做的所有工作，并展示给更广泛的利益相关者群体。我们的展示会通常包括：
- en: CI/CD infrastructure (and perhaps a demonstration of delivering a small code
    feature and how that triggers the CI/CD pipeline).
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CI/CD 基础设施（也许还包括展示如何交付一个小功能特性，以及如何触发 CI/CD 管道）。
- en: An update on UI/UX including any new user research or user testing performed,
    the evolution of prototypes, and the learning that has emerged.
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 UI/UX 的更新，包括任何新的用户研究或用户测试，原型的演变，以及由此产生的学习成果。
- en: The latest iterations of the Big Picture and emerging architecture.
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最新版本的全局视图和新兴架构。
- en: Showing how the teams have worked and the practices they have used. This often
    includes what we call the Practice Corner—an information radiator made up of the
    Mobius Loop and Foundation, with all the practices that the team have been using.
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 展示团队如何工作以及他们使用的实践。这通常包括我们称之为“实践角”的内容——一个信息展示板，包含 Möbius 循环和基础结构，以及团队使用的所有实践。
- en: An updated Product Backlog with words from the Product Owner about what to expect
    next.
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新的产品待办事项列表，包含产品负责人关于下一步的期望。
- en: A review of the overall Target Outcomes and Enabling Outcomes and whether this
    latest Product Increment has shifted the needle on the measures.
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回顾整体目标结果和启用结果，以及最新的产品增量是否在这些衡量指标上有所改进。
- en: Running the Showcase in the same physical workspace as where the team normally
    works, opening the options for a walk-the-walls and inspection of all Discovery,
    Options, Delivery, and Foundation artifacts and information radiators.
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在与团队通常工作所在的相同物理工作空间中进行展示，开放墙面走动的选项，检查所有发现、选项、交付和基础工件以及信息辐射器。
- en: '![](img/B16297_12_20.jpg)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16297_12_20.jpg)'
- en: 'Figure 12.20: Sprint Review/Showcase'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.20：冲刺回顾/展示
- en: We will explore much more about the measurements and learnings, including those
    captured from Showcase events, in the next chapter. The Showcase should not just
    be limited to an event. We need to seek other creative ways to show the world
    what we've delivered and how we've delivered it in this latest iteration of the
    Delivery Loop.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将深入探讨更多关于度量和学习的内容，包括那些从展示活动中获得的反馈。展示不应仅限于一个活动。我们需要寻找其他创意方式，向世界展示我们在这次最新迭代的交付循环中交付了什么，以及我们是如何交付的。
- en: As mentioned earlier, our Engagement Leads tend to do a short write-up to summarize
    progress and share the latest Product Increment and other artifacts. They send
    this via email to all stakeholders and anyone interested in the product and/or
    team. Visually, this can be enhanced by including a few photos of the event, or
    a short video montage of the team in action and the product evolving from the
    last sprint. Our engagement nearly always produces a series of weekly videos,
    which, when watched one after the other, produces an amazing story.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们的参与负责人通常会简短写一篇总结，概述进展并分享最新的产品增量和其他工件。他们通过电子邮件将其发送给所有利益相关者以及对产品和/或团队感兴趣的人。从视觉上看，可以通过加入一些活动的照片或团队行动的短视频蒙太奇，展示产品从上一个冲刺中不断演变的过程。我们的参与几乎总是会制作一系列每周的视频，当这些视频一个接一个地观看时，会呈现出一个令人惊叹的故事。
- en: As we explained with the Product Increment Artifact, having working software
    is the most important ingredient of the showcase. Being able to provide a link
    to the application and inviting the Showcase audience to touch and feel the user
    interface is very engaging. Having a laptop in the workspace that always has the
    latest increment of the working software product running is great for stakeholders
    visiting the workspace, walking the walls, tracing feature history through all
    the practices, and seeing them for real in the product.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在产品增量工件中所解释的，拥有可工作的软件是展示的最重要组成部分。能够提供应用程序链接并邀请展示观众触摸和体验用户界面非常吸引人。在工作空间中放置一台始终运行最新增量的工作软件产品的笔记本电脑，对访问工作空间的利益相关者来说非常有意义，大家可以在墙上走动，回顾所有实践的功能历史，亲身体验它们在产品中的呈现。
- en: Finally, Showcases are limited in value if we do not get feedback from them.
    Great ScrumMasters and Engagement Leads will be creative around ways to do this.
    Don't just limit this to an *any questions or feedback* session at the end. Allow
    online feedback in a Google document, or open a feedback channel on Slack or via
    SMS. Invite value voting from stakeholders or use Net Promoter Score to capture
    fresh metric-based feedback on how likely stakeholders are to recommend the product
    and/or team.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，如果我们没有从展示中获得反馈，它的价值是有限的。优秀的ScrumMaster和参与负责人会在这方面进行创意发挥。不要仅仅将其局限于结尾时的*任何问题或反馈*环节。可以在Google文档中允许在线反馈，或在Slack或短信上开设反馈渠道。邀请利益相关者进行价值投票，或使用净推荐值（Net
    Promoter Score）来捕捉基于指标的新反馈，了解利益相关者推荐产品和/或团队的可能性。
- en: When WOULD We Have Uncovered This In a Traditional Mode of Delivery?
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果我们采取传统交付模式，我们何时会发现这些问题？
- en: '![](img/author_face_1.jpg)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![](img/author_face_1.jpg)'
- en: I was working with a team a few years ago to build a new shopping portal for
    a telecom company in Ireland. We used a Design Thinking framework to gather a
    list of features to develop a product based on Empathy Mapping, scenario maps,
    pain points, and opportunities captured. Getting information directly from users
    was gold, and we distilled all of our learning from them into three Target Outcomes
    for the initial release of the product. We built up a Product Backlog of features
    to build up our portal product.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 几年前，我与一个团队一起为爱尔兰的一家电信公司构建一个新的购物门户。我们使用设计思维框架，通过同理心映射、情境图、痛点和机会来收集要开发的功能列表。从用户那里直接获得信息是非常宝贵的，我们将从他们那里学到的所有内容提炼成三个目标结果，用于产品的首次发布。我们构建了一个产品待办事项列表，来完善我们的门户产品。
- en: Then, after five weeks of Discovery, we adopted Scrum. Two-week sprints each
    delivered an increment of the product. Each Sprint included a Sprint Planning
    event, Daily Scrums, a Sprint Review, and a Sprint Retrospective.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在五周的发现阶段后，我们采用了Scrum。每两周的迭代交付一个产品增量。每个Sprint都包括Sprint计划会、每日Scrum、Sprint回顾和Sprint回顾活动。
- en: If you look at the photograph, it is actually from the Sprint 2 Review! I chose
    this photo because seconds after I took it, the lady just out of the shot called
    out how we'd completely missed some key complexity in pricing administration.
    It was something we had not considered until this moment.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看这张照片，其实它来自于Sprint 2回顾！我之所以选择这张照片，是因为在我拍完这张照片的几秒钟后，画面外的一位女士叫出了我们完全忽略的定价管理中的一些关键复杂性。这是我们直到这一刻才考虑到的事情。
- en: '![](img/B16297_12_21.jpg)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B16297_12_21.jpg)'
- en: 'Figure 12.21: Sprint 2 Review'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.21：Sprint 2回顾
- en: This incident highlights the positives of early and regular feedback on an evolving
    product. When would this have been caught if we were not attempting Scrum?
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 这一事件凸显了早期和定期反馈在不断发展的产品中的积极作用。如果我们没有尝试Scrum，这一问题何时才会被发现呢？
- en: It also highlighted that such feedback triggers the need for some further discovery
    (for example, through Design Thinking).
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 它还突出了这样一种反馈，触发了进一步发现的需求（例如，通过设计思维）。
- en: This example frames nicely where the learning and feedback from a Delivery Loop
    can trigger the need to return to the Discovery Loop. We'll be exploring this
    and other patterns when we return to the Options Pivot in *Chapter 18*, *Sustain
    It*.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子很好地展示了从交付循环中获得的学习和反馈，如何触发需要回到发现循环的需求。我们将在*第18章*《保持它》中回到这个话题，并探讨其他相关模式。
- en: To share experiences, learning, contribute improvements to this practice, or
    simply read more about it, take a look at [https://openpracticelibrary.com/practice/showcase/](https://openpracticelibrary.com/practice/showcase/).
    We'll also return to other ways to capture metric-based feedback in the next chapter.
    The Showcase is one of the main forums for collecting this. Another one is the
    Sprint Retrospective Event.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 要分享经验、学习，贡献改进，或者仅仅是阅读更多关于此的内容，请查看[https://openpracticelibrary.com/practice/showcase/](https://openpracticelibrary.com/practice/showcase/)。我们还将在下一章中回到如何捕获基于度量的反馈的其他方式。Showcase是收集这些反馈的主要论坛之一。另一个是Sprint回顾活动。
- en: The Sprint Retrospective Event
  id: totrans-305
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Sprint回顾活动
- en: This is by far the most important practice in this book. If we don't do Retrospectives,
    we don't learn. If we don't learn, we don't improve. If we don't improve, what's
    the point of all of this?
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本书中最重要的实践。若我们不进行回顾，我们就无法学习；若我们不学习，我们就无法改进；若我们不改进，那这一切又有何意义呢？
- en: In *Chapter 4, Open Culture*, we introduced Retrospectives as a feedback mechanism
    and, in particular, we introduced the Real-Time Retrospective practice as a great
    way to build an open culture into the team's foundation. Hopefully, the Real-Time
    Retrospective practice has worked well and continued to be used during the journey
    through the Discovery Loop, the Options Pivot, and the Delivery Loop. It offers
    an immediate place to add feedback in reaction to something happening in real
    time.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第4章，开放文化*中，我们将回顾作为反馈机制引入，特别是我们介绍了实时回顾实践，作为将开放文化融入团队基础的好方法。希望实时回顾实践在通过发现循环、选项转折和交付循环的过程中发挥了良好的作用，并继续使用。它提供了一个立即添加反馈的地方，以回应实时发生的事情。
- en: Retrospectives are short events where the team can take a break from what they
    are doing, take some time out to inspect how they have been working, and reflect
    on what has been working well, what hasn't, and what can be adapted and improved.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾是短暂的活动，团队可以暂时从当前的工作中抽身，花些时间检查他们的工作方式，并反思哪些方面做得好，哪些做得不好，以及哪些方面可以调整和改进。
- en: If you were involved in a long traditional Waterfall program, you may have done
    some kind of **Lessons Learned** exercise at the very end. This is where everyone
    sits down and captures all the things they might have done differently if they
    were to start over again now. It all gets written up and filed away in some shared
    drive. If we're lucky, some other team or project might benefit from this learning
    but, often, it never gets looked at again. Well, Retrospectives are just like
    this BUT they happen much more regularly and the team in question gets to benefit
    from the learning as they go along!
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: Retrospectives can happen at any time. In fact, you may well want to schedule
    a Retrospective after a long Event Storming session or after a first Product Backlog
    prioritization meeting. It is a foundational concept in the Open Practice Library
    as it is a tool that can be used at any time. A Sprint Retrospective is an event
    we run at the end of the Sprint or Delivery Loop. The Scrum framework states that
    it should happen immediately after the Sprint Review.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: There are hundreds of different formats, styles, and themes of Retrospectives.
    People are coming up with new, fun, creative, and energetic ways to run Retrospectives
    all the time. Check out the Retrospective page of the Open Practice Library[19](#footnote-053),
    which has links to many of these. If you have a link to your own personal favorite
    or have run your own, you could submit a pull request and add it!
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: We're going to share a few different ways we have run Retrospectives and differentiate
    between *Retrospectives of breadth* and *Retrospectives of depth*.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: A Retrospective of breadth essentially inspects the time period that the event
    is focused on and asks what worked well, what did not, and what could be done
    to be better next time so as to address the things that did not work so well.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: Our recommended approach to a Retrospective is to use a *diverge-converge* technique
    or liberating structure to ensure everyone has an opportunity to contribute their
    feedback. So, start by allowing a few minutes for everyone to silently write down
    their feedback on what worked well, what didn't, and corrective action that could
    be taken.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: Then we converge and merge everyone's ideas together on an information radiator.
    We cluster common themes and have short discussions to achieve alignment. Finally,
    we agree on a set of corrective actions to come out of the Retrospective, prioritize
    them, and agree on owners to take them forward.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: '[19](#footnote-053-backlink) [https://openpracticelibrary.com/practice/retrospectives/](https://openpracticelibrary.com/practice/retrospectives/)'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: 'The next Retrospective should always open by reviewing the previous Retrospective''s
    actions. The following are a few alternative ways to ask those questions and provide
    headings on the Retrospective''s information radiator:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: What should we START in the next sprint that we're not currently doing? What
    should we STOP in the next sprint that we are currently doing? What should we
    CONTINUE doing? What should we do MORE OF? What should we do LESS OF?
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What should we ADD? What should we DROP? What should we KEEP? What should we
    IMPROVE?
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What made us GLAD in the last sprint? What made us MAD? What made us SAD?
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What did we LIKE in the last sprint? What did we LEARN? What did we LACK? What
    did we LONG FOR? This format is known as the **4Ls**.
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing a simple canvas for one of these approaches will allow the team to
    collect and organize their feedback and radiate the resulting learning and actions
    for all to see.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_22.jpg)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.22: Popular Retrospective formats'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: 'A slightly more creative and fun approach that has become popular is to use
    analogies to reflect and inspect the previous sprint. Canvases can be prepared
    with a theme such as:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: '**The Sailboat**: What is our island—the goal or target we are aiming for?
    What is the wind—the things that will take us there? What things represent the
    anchor dragging us back and slowing us? What are the rocks or the risks that we
    might be overlooking?'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Hot Air Balloon**: The hot air represents the things that are helping
    us rise up. What represents the weights that might be dragging us down? What is
    the sun that we want to steer towards for a smooth ride? What is the bad weather
    that might give us a bumpy ride?'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Motor Racing Car**: What is the engine moving us forward? What is the
    parachute slowing us down?'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are many other similar formats: the *Three Little Pigs* Retrospective
    with the houses made of straw, sticks, and bricks; the Star Wars Retrospective
    with the light side and the dark side. We''ve even followed musically themed Retrospectives
    such as Elvis and ABBA, where song titles represent the different inspection aspects.'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: Some of the common pitfalls of Retrospectives include focusing far too much
    on the negative and not enough on what has worked well. A good way to look at
    this is if something has been working really well, how might we **turn up** this
    behavior and do even more of it? Another common pitfall is failing to capture
    Retrospective items. It's very easy to whine for an hour about all the things
    that have annoyed us. But what tangible thing can we do to fix it or at least
    make it better?
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, sometimes we come up with too many things we want to fix
    and too many ideas for improvement. Use a prioritization practice (such as those
    outlined in the previous chapter) and radiate the actions on its own backlog,
    for everyone to see and help with.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_23.jpg)'
  id: totrans-332
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.23: Example Retrospective canvas and actions list'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: Retrospectives should be fun and engaging. They should be something the team
    looks forward to and has everyone motivated to inject energy into. This is an
    opportunity for the team to continuously improve.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: To help keep them engaged, especially for long-lived product teams, it really
    helps to mix up the format. Try new ideas out for Retrospectives. Rotate the facilitator
    around the team so they can share the ownership of this practice, figuring out
    what works well with Retrospectives and what we should do more of, and what doesn't.
    In other words, sometimes we should run Retrospectives on our Retrospectives!
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: A final tip comes from years of experience running Retrospectives away from
    the normal place of work and what we infamously call **The Pub Retro**.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: The Pub Retro!
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](img/author_face_1.jpg)'
  id: totrans-338
  prefs: []
  type: TYPE_IMG
- en: Back in 2007, I was experiencing a great Scrum team for the first time. I had
    dipped my toe into Agile in the previous couple of years, but it was really a
    mismatch of practices with a lot of Scrum-buts! One suggestion from a team member
    (who had come from a high-performing software house and was very skilled in Scrum)
    was to take our Retrospectives off-site and run them down at a local pub. He felt
    that removing people from their day-to-day workspace enabled them to look back
    and reflect on how the previous sprint had gone.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: We also recognized that, in traditional projects, after many months of effort,
    the software would go live, and we would usually celebrate that with some kind
    of event. With Scrum, we should potentially ship our software at the end of every
    sprint and we should strive to go live with every sprint as we steer towards continuous
    delivery. Therefore, it's right to celebrate, and what better place to do that
    than down at the local pub?
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: A final point to make is that people can be a little more honest in a relaxed
    pub atmosphere, and more creative with their ideas. I must say, over the years,
    some of the very best ideas for improvement have come out of pub Retrospectives!
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_24.jpg)'
  id: totrans-342
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.24: Pub Retrospective'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: Of course, it's important to bring all the artifacts and learning captured back
    to the physical workspace and that the Retrospective actions are included in backlogs,
    so they are prioritized and actioned.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: Experiment with the location on Retrospectives. My teams have gone beyond pubs
    by doing things like ten-pin bowling, urban golf, and meeting at a nice café and
    having a *retro*-*breakfast* together!
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: There is so much to share about Retrospectives. Please take a look at [https://openpracticelibrary.com/practice/retrospectives](https://openpracticelibrary.com/practice/retrospectives).
    There are several great links to resources on the page. If you have found a brilliant
    Retrospective format to contribute, please do add it by hitting the *Improve this
    Practice* button on the page.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have been through the 3-5-3 of Scrum and got some anecdotes and
    learnings from our use of it, let's see Scrum in action with the PetBattle team.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: 'A Sprint in the Life of PetBattle: Getting Ready'
  id: totrans-348
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The PetBattle team decided to work on a one-week sprint cadence. Aidan, Emma,
    and Jen had used Scrum previously, but always with two-week sprints; they saw
    this as an opportunity to tighten the feedback loop and deliver outcomes quicker.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: Reminding themselves of the Scrum values and framework, the team drew up who
    was in the Scrum team on one of the unused whiteboards. There would be a single
    Scrum team (for now). Valerie would, of course, be the Product Owner. The cross-functional
    Development Team would be made up of four engineers (Ciaran, Aidan, Emma, and
    Jen), the UX Designer (Dave), and the Quality Assurance expert (Susan). Eoin would
    be the ScrumMaster.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: Valerie was very proud of her Product Backlog. She felt, through using all the
    Discovery Loop and Options Pivot practices, it was well understood by her stakeholders
    and had been well prioritized using the WSJF economic prioritization model.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_25.jpg)'
  id: totrans-352
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.25: PetBattle Product Backlog'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: The team had their Definition of Ready up on the wall and had been running short
    Product Backlog Refinement sessions to get the top ten items of the Product Backlog
    ready according to the Definition of Ready. This meant talking through the items
    with Valerie (who occasionally would bring in a stakeholder or two to support
    the conversation), writing acceptance criteria.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: The team used the Confidence Voting practice to assess whether they felt the
    item could be delivered within a few days of development. They would also talk
    through and update the emerging Logical Architecture diagram to ensure they had
    a collective understanding as to how the feature would be built. Dave had been
    doing lots of sketches and wireframes for the UI and would add these to the conversation
    at the appropriate point.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: The Sprint cadence was set. Sprint Planning would take place between 10:00 and
    12:00 every Thursday morning. Daily Scrum meetings would be scheduled between
    09:30 and 09:45 every morning. The Sprint Review showcase would take place on
    Wednesday afternoons at 15:00, immediately followed by the Sprint Retrospective,
    which would be held off-site at 16:30.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: 'A Sprint in the Life of PetBattle: Sprint 1 Planning'
  id: totrans-357
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first Sprint Planning meeting was excellently facilitated by Eoin, who had
    the agenda up on the wall and managed the time effectively. The team spent 15
    minutes talking about the Sprint 1 Goal. Valerie wanted to see the PetBattle app
    up and running so that she could share a link to it with Mary and a few others
    who volunteered to be user testers. For her to do this, she reckoned a great place
    to start would be by being able to add her pet and starting a competition. If
    the app could do this in a week, she'd be happy. Jen was super keen to use all
    the green from go work they'd done when establishing the technical foundation
    and ensuring that all components were being built using CI/CD with automated deployment
    and tracking. The four engineers were really keen to take an Ops-first mindset
    approach and ensure, from the offset, that they had a good, automated recovery
    framework in place as well as configurable logging.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: Bringing all these thoughts together, the team agreed on the Sprint 1 Goal to
    build the walking skeleton of PetBattle, connecting f/e to API to database underpinned
    by CI/CD, and provide the foundation for operations.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: Next up on the agenda was to pull items from the Product Backlog, do a final
    check that they were ready, and place them in the Sprint Backlog. Eoin suggested
    the team copy the sticky notes and leave the Product Backlog information radiator
    complete. He would mark the items on the Product Backlog as they were added to
    the Sprint 1 Backlog. Eoin also had the idea to show on the Sprint Backlog what
    outcome the item was linked to. This was easy to see by referring to the Value
    Slice board. Overall, this simply meant that we had a great information radiator
    showing how outcome-focused the team was.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: The team pulled the top ten items on the Product Backlog into the Sprint Backlog.
    They talked through and made some final edits to the acceptance criteria. Valerie
    was excited because this would deliver the entire top slice of value from her
    Value Slicing in just one week! Aidan and Ciaran started to get a bit nervous
    as the sprint backlog filled up. They were really pleased that the sprint balanced
    functional development versus non-functional and work focused on operations. The
    team also loved that they could do some educational workshops on CI/CD and put
    the long-awaited breakfast and lunch planning in place to help improve the culture.
    But there was some nervousness around the TLS security and ensuring the performance.
    This would need some technical spikes and research and, with just four working
    days until the first Showcase, Aidan and Ciaran were worried that they would not
    have the time to do everything.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: They still proceeded to the second part of the Sprint Planning event and decomposed
    all the items into tasks. They decided to color-code their tasks, which would
    all be written on square sticky notes. Pink stickies would represent application
    development. Blue stickies would represent UI/UX and frontend development. Light
    green tasks would be focused on data configuration. Purple stickies would be automation.
    Dark green stickies would be infrastructure and platform work. Yellow stickies
    would be testing. There were some other tasks that were focused on culture, team
    building, and other squishy/fluffy stuff! They decided to call these squishy tasks,
    and these would be on the orange stickies.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: The team divided into pairs and each pair focused on two features. Every 5 minutes,
    they rotated the story so every pair could think about tasks for every feature.
    All tasks were then added to the Sprint Board, duplicates were removed, and a
    discussion took place on each task, until the teams were confident they had all
    the low-level details to deliver regarding each item on the Sprint Backlog as
    per the agreed acceptance criteria.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: Finally, Eoin facilitated a confidence vote using the Fist of Five. After a
    count of three, everyone displayed with their fingers (one to five) how confident
    they were that they would achieve the Sprint Goal, by delivering the sprint backlog
    according to the acceptance criteria and tasks set out by next Wednesday at 15:00\.
    The votes ranged from two to four with Ciaran, Aidan, Emma, and Jen all voting
    with just two fingers. The nervousness around getting all ten features done was
    growing. After some discussion, Valerie suggested removing the security- and performance-related
    items and putting them back on the Product Backlog. A second confidence vote now
    had everyone voting either four or five and there were many more smiles around
    the team!
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: The Sprint Board was ready, which included a Burndown chart to visualize the
    progress of the 26 tasks on the board.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_26.jpg)'
  id: totrans-366
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.26: PetBattle Sprint 1 Board following Sprint Planning'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: Now we've seen Sprint 1 Planning complete, let's see how the team got on with
    its delivery.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: 'A Sprint in the Life of PetBattle: Sprint 1 Delivery'
  id: totrans-369
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sprint 1 got underway. True to their social contract, the team worked as a mob
    when learning something for the first time and in pairs for all other tasks. They
    had their Daily Scrum every morning, not always at 09:30, and sometimes it ran
    over 15 minutes. This is something that would end up being discussed at the Sprint
    Retrospective.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: Following constant nagging by Eoin, the team started to get better at updating
    the Sprint Board, with their avatars showing more clearly who was working on what.
    They also became more familiar with the Burndown chart, which showed how many
    tasks had been moved to Done at different points in time during the sprint. There
    was some confusion as to when the team could say a feature or task was done. Again,
    this would come up in the Sprint Retrospective.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: Before that, at 15:00 on Wednesday, the team had been working frantically to
    get their final tasks done; they were nearly done, but a few remained in progress.
    The CI/CD had been working well and there was a version of the app promoted to
    their testing environment during the morning of their Sprint Review.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_27.jpg)'
  id: totrans-373
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.27: PetBattle Sprint 1 Board completed'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: 'A Sprint in the Life of PetBattle: Sprint 1 Review And Retrospective'
  id: totrans-375
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A few stakeholders showed up to the Sprint Review, but not as many as Valerie
    had hoped for. They had to think about how best to share the updates. The Sprint
    Review had a few glitches here and there but, on the whole, did not go badly for
    a first sprint. Valerie explained the goal she'd set for the team and Eoin ran
    through the Sprint Board. The team, one by one, showed the features they had been
    working on. Some were shown using the app's new frontend. Some were more technically
    involved and the demonstration consisted of walking through config files and running
    some tests. They even showed the breakfast and lunch rota and how they had set
    up a working relationship with Deliveroo! Dave shared a UX update and his plans
    to run some more user tests in the next sprint. Susan showed the automated testing
    framework up and running and even ran the automated tests during the demo.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: The showcase closed with Ciaran showing the updated big picture with the latest
    CI/CD infrastructure that this demo had been based on. Eoin brought out a new
    Information Radiator called **The Practice Corner**. This was a big Mobius Loop
    and Foundation that showed all the practices the team had used to date to build
    their Foundation, to get them round the Discovery Loop, through to the Options
    Pivot, and now completing the first Delivery Loop iteration. This really brought
    home how all the practices they had used fitted together. Stakeholders were invited
    to walk the walls to explore them in a bit more detail.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: 'The Development Team adjourned with Eoin to the local pub where they brought
    a load of sticky notes. They ran their Sprint 1 Retrospective, which was run using
    the simple *Start-Stop-Continue* format. The team collectively came up with a
    great summary of the sprint and they agreed that they should:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: CONTINUE pairing and mobbing
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: STOP being late for Daily Scrums
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: START holding free weights during Daily Scrum updates to stop updates from going
    on so long
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: START a social playlist to have some music in the afternoon
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: START using the Definition of Done practice (including writing the Definition
    of Done in Sprint 2)
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CONTINUE using and improving the CI/CD solution
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: START having more information radiators such as build monitors and test scores
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The team raised their glasses and toasted SPRINT ONE DONE! The next morning,
    they'd start all over again with Sprint 2 planning.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: These PetBattle stories provide an example of the full Scrum delivery cycle.
    As the team choose to do more delivery loops, the same processes are repeated.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: Using Scrum with distributed people
  id: totrans-388
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As with earlier practices introduced in this book, the practices introduced
    in this chapter and on the Delivery Loop are highly collaborative and visual.
    A strong success factor is having Scrum teams co-located and being able to use
    physical artifacts like Product Backlogs and Sprint Backlogs.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: But many Scrum teams have succeeded with using Scrum with the people distributed,
    especially when they have invested in strong digital collaboration and video conferencing
    tools. The importance of culture and psychological safety introduced in *Chapter
    4*, *Open Culture*, is even more significant here and, crucially, the ability
    to learn and continuously improve. This is key to the success of Scrum teams,
    so investing the time to facilitate that environment of continuous learning can
    set up distributed Scrum teams for success.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: There are many tools that will emulate every practice and the way of working
    used physically in the room. We look to replicate every practice we would use
    in a room to work online and in real time. So, if a team used sticky notes and
    whiteboards to collaborate during Sprint Planning, they need to be able to do
    that using a tool. If they use a big board for the Product Backlog, they need
    a tool to host that online. If they used Confidence Voting or planning poker for
    relative estimation, they need a tool to allow them to continue to do that. If
    they use a Burndown chart in the room, they need to find a way to keep doing that
    online.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: To help you get started, we have provided a simple Sprint Board that can be
    used to build Sprint Backlogs during Sprint Planning, plan for feature demos during
    Sprint Reviews, and radiate the learnings during Sprint Retrospectives. This is
    available to download at [https://github.com/PacktPublishing/DevOps-Culture-and-Practice-with-OpenShift](https://github.com/PacktPublishing/DevOps-Culture-and-Practice-with-OpenShift).
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_28.jpg)'
  id: totrans-393
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.28: Digital Sprint Board for use by distributed teams'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: To complete this section about Scrum, we're going to drop a bit of a bombshell.
    Scrum is sub-optimal. Scrum does not comply with Continuous Delivery. Scrum can
    actually create bottlenecks in delivery rather than removing them!
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: You might now be wondering why we have spent so much time and pages explaining
    Scrum, sharing stories and learnings from using Scrum, and having our PetBattle
    team adopt Scrum. Well, Scrum provides a much-needed cadence and set of guardrails
    to start working in a more agile manner. Often, new or immature teams need these
    guardrails and frameworks to stay on the right path and ensure value is being
    delivered. But, as teams mature and get better, there may be a time when we can
    remove some or all of those guardrails.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: When should we stop Scrumming?
  id: totrans-397
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many teams love Scrum, as do stakeholders. The rhythm of being able to see outcomes
    delivered earlier more frequently is very satisfying and it corrects many of the
    problems experienced with the traditional Waterfall development of complex systems.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: In *Chapter 11,* *The Options Pivot*, we talked about how the Product Owner
    should aspire to remove the need for themselves because the Development Team is
    so well connected to users and stakeholders, with strong psychological safety
    for two-way feedback and conversation. Earlier in this chapter, we talked about
    how the ScrumMaster should aspire to remove the need for themselves because they
    have facilitated an environment that is full of information radiation and very
    strong adoption of practices by a team that is fully autonomous, self-correcting,
    self-organizing, and continuously improving. The Product Owner and ScrumMaster
    have two very strong guardrails that facilitate the Scrum framework. They may
    never come down, but we should aspire.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at some other examples of guardrails that we might wish to remove.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: Teams asking questions that suggest we've matured out of Scrum
  id: totrans-401
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](img/Noel.jpg)'
  id: totrans-402
  prefs: []
  type: TYPE_IMG
- en: 'Having worked with long-lived Scrum teams for several months, it''s incredibly
    pleasing to see them continuously improve and become more autonomous with time.
    A pattern I''ve noticed with high-performing teams is that, after a while, they
    start to ask some very good questions about the processes and practices they are
    using. Some examples of questions I''ve had from ScrumMasters, Product Owners,
    and Development Team members include:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: Why are we waiting X days to demo/release? Scrum has the Sprint Review event
    scheduled on the last day of every sprint. But sometimes a team will complete
    a feature and be ready to demo it and release it on the first day of the sprint!
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why don't we continuously run Retrospectives? The Real-Time Retrospective is
    an awesome practice at capturing retrospective feedback and actions in more of
    a real-time manner rather than waiting until the end of the sprint. If this is
    being used effectively by the team, maybe there is less of a need to wait until
    the end of the sprint to agree on improvement actions.
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why are we doing these 15-minute daily standups when we already know what everyone
    is doing? This holds particularly true when the team is using mob programming
    more and more. The team members are so connected with each other and collaborate
    so closely that there is less of a need to formally synchronize every day.
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Product Owner I worked with at a European automotive company had a big *A*-*ha*
    moment in his fifth sprint when he asked, "*Why am I waiting till the end of the
    sprint to see feature X*?" He wanted to steer the team into a mindset whereby,
    "*When you've done a feature*, *show it to me and*, *if I'm happy with it*, *let's
    just ship it then and there.*"
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: The examples above show how Scrum might actually inhibit continuous delivery.
    They can, of course, release more frequently than just once in the sprint. The
    Scrum framework does not say that you can or should only release once.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: Teams may also feel, when they reach these points of realization and maturity,
    that they would be able to deliver more continuously if they moved to a different
    approach, to deliver and adopt Kanban.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: Kanban
  id: totrans-410
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Kanban is Japanese for *signboard*. Kanban has its roots as a scheduling system
    used in *lean* manufacturing in the car industry and, in particular, Toyota cars.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: In the context of Agile, Kanban is another methodology. It specifically strives
    to better coordinate and balance work amongst team members. Most famously, it
    employs a *Kanban* to help visualize the process. The board is split into categories
    of *work to be done*, *work in progress*, and *completed work*. Each task is written
    onto a card that moves from column to column as it progresses through the team's
    process. Tasks are prioritized. The board keeps everyone on the same page and
    is highly visible, so it allows corrections to be made easily.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: Kanban Board!
  id: totrans-413
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](img/Author_4.jpg)'
  id: totrans-414
  prefs: []
  type: TYPE_IMG
- en: When running our DevOps Culture and Practice Enablement workshop with members
    of our Open Innovation Labs team in 2018, we had the pleasure of meeting our colleagues
    in Japan. A lot of the lean culture and processes we describe in this book originate
    from Japan, so we always learn a lot from collaborating with our peers there.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: During the course, we referred to the Kanban board many times, which seemed
    to generate some laughter! Our Japanese colleagues eventually told us not to say,
    **Kanban board** as we were really saying **signboard board**. That's why we now
    refer to the artifact as the Kanban.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: Kanban requires strict limits on the number of tasks in progress at any given
    time. This is called the *Work In Progress,* or WIP limit. No new work can enter
    the column once the WIP limit is reached. Teams need to work collaboratively to
    fix issues, identify bottlenecks, and get tasks Done. This collaborative work
    style leads to continual improvement of the team's processes. The team can meet
    periodically to discuss changes that are needed, and these are displayed on the
    Kanban.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_29.jpg)'
  id: totrans-418
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.29: Example Kanban'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: Scrum and Kanban are not mutually exclusive. In fact, in our PetBattle example,
    we walked through the team using Scrum but, in the Sprint Board, they were using
    Kanban to visualize and track work.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: PetBattle – Release Early, Release Often, Release Continuously
  id: totrans-421
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Implementing and delivering the PetBattle Tournament feature needed to be done
    quickly. The existing hobbyist application was developed in a very ad hoc manner,
    so there is little current process. Adopting Agile Scrum or Kanban looked like
    a great place to start for the cross-functional team.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: Can the team decide when the *PetBattle Tournament Feature* gets deployed to
    production? YES! Can the team decide how to build, test, and deploy the *PetBattle
    Tournament Feature*? YES! By allowing the team to be autonomous, decision-making
    happens wherever the information is within the team. This trust and delegation
    of the PetBattle app delivery by the founders to the team is crucial to the product's
    future success.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: Kanban has its own page in the Open Practice Library, which can be used for
    more information, discussion, and improvement, at [https://openpracticelibrary.com/practice/kanban/](https://openpracticelibrary.com/practice/kanban/).
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: An important practice that we have not yet introduced and that applies to teams
    using both Scrum and Kanban is the Definition of Done.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: The Definition of Done
  id: totrans-426
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What does Done mean in the context of writing software features? Does it mean
    your code builds and runs on your computer? Does it mean testing has been performed?
    Does it mean the code has been checked in? What about documentation? What about
    operational readiness? These are all good questions, and the chances are that
    if you ask these questions to different people, you will get very different answers.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: When we use a Kanban and/or a Sprint Board in Scrum, there is a column on the
    right with the title DONE. So, what does Done mean here? This is why we use a
    Definition of Done practice. The Definition of Done is a criterion agreed across
    the team and shared with others that should be met before any work items are considered
    complete by any team member. It is *collaboratively created, maintained, and enforced
    by the team* where non-functional and functional work that should be performed
    for each and every work item can be managed.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: Earlier in this chapter, we talked about how we write Acceptance Criteria against
    features or stories on the Product Backlog. This is a specific criterion that
    applies to the context of the feature in question and only that feature. The Definition
    of Done criteria is additional criteria that also needs to be considered in the
    planning and delivery of every feature.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: So, if we say that we are always going to check code into a source-code control
    system to trigger a CI build and a feature should not be considered done unless
    this has been done, we can add this to the Definition of Done. If a team agrees
    that we should always have a percentage of the code covered by automated tests
    and we should never fall below that given percentage, we can write Definition
    of Done criteria to manage this.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: PetBattle – Definition of Done
  id: totrans-431
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Sprint 1, the PetBattle team had a Definition of Ready in place and it worked
    effectively in ensuring that items they accepted into the Sprint were well understood
    and the team had confidence they would complete them in the sprint.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: However, they did not write a Definition of Done. This led to some challenges
    during the sprint as there was ambiguity as to what should happen before a feature
    is considered Done. It came up in the Sprint Retrospective discussion and the
    team agreed to run a Definition of Done workshop during Sprint 2.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: 'Eoin facilitated this and asked the question of what should always be done
    when working on a Sprint Backlog item, regardless of what it is. The team came
    back with several suggestions:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: The code and any other artifacts must always have been committed to a feature
    branch in Git.
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The feature branch should have been merged into the master.
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CI build should always have run with all tests passing.
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will have checked the documentation folder and made any updates to product
    documents to support the work being done.
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Product Owner should have seen the feature working and the acceptance criteria
    satisfied.
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This provided a great starting point and, in particular, Aidan and Emma recognized
    that the Definition of Done was a great tool for ensuring the non-functional aspects
    that they had brainstormed using the Non-Functional Wheel could be considered
    for each and every item.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: Some of those items had ended up on the Value Slicing board because there was
    specific work involved in configuring them. But many of them needed team behaviors
    or some automation to be focused on continuously addressing the **non-functional
    requirements** (**NFRs**).
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: 'The team revisited all of the items on the Non-Functional Wheel and categorized
    each item into one of three lists:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: Requires platform setup/config/spike
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Comes for free with platform
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Team behavior/principle
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B16297_12_30.jpg)'
  id: totrans-446
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.30: Transferring non-functional requirements to Definition of Done
    criteria'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: 'Items in the first column were seen as features to be included on the Product
    Backlog, as they needed specific work to be done to enable them in a sprint. Items
    in the third column were all items that should be considered as a part of the
    Definition of Done. However, given they were so low-level and detailed, the team
    decided to add a few more items to their Definition of Done that would mean they
    were duly considered:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: There must be at least one automated integration test covering acceptance criteria.
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checks will be run (automated where possible) to ensure that all non-functional
    principles remain upheld.
  id: totrans-450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The feature is running on the demonstration laptop and ready for the stakeholders
    to see demonstrated at any time.
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Definition of Done provides a place for non-functional requirements and
    quality to be managed effectively. While it starts as a big visual information
    radiator, it drives more and more quality into the product. It also provides many
    opportunities for automation. Given the Definition of Done criteria is something
    that will be tested for each and every backlog item accepted into a sprint, the
    same tests to meet the criteria should be run over and over again. So, automation
    is certainly our friend here. To explore the Definition of Done practice further,
    visit the Open Practice Library page at [https://openpracticelibrary.com/practice/definition-of-done/](https://openpracticelibrary.com/practice/definition-of-done/).
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have introduced the Definition of Done, when we plan sprints or
    the tasks to deliver a specific feature, we can improve the questions that teams
    should ask about each backlog item. What tasks are needed to deliver this feature
    to satisfy the agreed acceptance criteria and comply with the Definition of Done?
    And, as Retrospectives continue to inspect how to improve, the team should consider
    what they can add to their Definition of Done to improve the overall product and
    what to automate to make Done a part of CI/CD.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: When a team does not have a Definition of Done visible or they are failing to
    follow it or build it into their CI/CD pipeline, it is a Bad Agile Smell that
    tends to result in the rise of technical debt and the slowdown of team velocity.
    Let's look at a few other Bad Agile Smells we've seen.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: Bad Agile Smells
  id: totrans-455
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](img/author_face_11.jpg)![](img/Author_43.jpg)'
  id: totrans-456
  prefs: []
  type: TYPE_IMG
- en: 'Over the years, we have spotted several anti-patterns in Agile teams and things
    we look out for and test early in our engagements with customers. Here are our
    top ten:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: There is no Product Owner or there is a Product Owner who lacks the three important
    attributes—empowered, available to the team, and understands the business.
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'No working software: Either CI/CD is not working sufficiently (or not in place
    at all) or automated testing is not sufficient. There should always be a working
    version of the product that can be demonstrated or released at any time. It may
    not do very much, and the business may want more features before the release,
    but this has to always be a business decision rather than a technical constraint.'
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sprints are pre-planned in advance. With variable scope, we need to let the
    teams control what they load into their sprints. Over time, they will establish
    metrics on their velocity and predictability—both should get better and there
    are powerful tools to help them size and forecast accurately.
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Retrospectives don't happen or don't result in actions. Continuous improvement
    should be a part of the DNA of everyone involved in this system of work. The Retrospective
    is the fundamental building block to enable this.
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stand-ups take over 30 minutes and lots of meetings. For Agile delivery to be
    effective, we have to allow the teams to get on with the work and figure out the
    solutions themselves. Overloading them with meetings will only slow them down.
    Let's keep the meetings to the basic events of Scrum and Product Backlog Refinement.
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Water-Scrum-Fall: Upfront planning and design, delivery of features in iterations,
    but only to pre-production because a tail-end operational readiness phase is needed.
    This removes all the benefits of Agile and does not provide continuous delivery.
    Think about using the Mobius Loop to articulate how quickly and frequently we''re
    really traveling round these loops.'
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Teams are not cross-functional. This results in dependencies, blockers, and
    an inability to deliver continuously.
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lack of empowerment in teams to say no to items that are not ready. Using tools
    like the Definition of Ready and empowering teams to be autonomous drives up the
    culture, motivation, and ability to deliver continuously.
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Imbalance of functional versus non-functional features work pulled into sprints.
    We need to continuously balance the needs and feedback from the team (for example,
    Retrospectives), including the need to continuously improve architecture and CI/CD
    and keep the team filled with autonomy, mastery, and purpose. Otherwise, technical
    debt rises, motivation declines, and continuous delivery slows or stops.
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push not pull. The systems we put in place are to empower teams to pull work
    rather than have it planned for them and pushed upon them.
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These Bad Agile Smells should be kept in mind and, if they start to appear,
    we recommend using the Retrospective event as a starting point to discuss and
    course-correct.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  id: totrans-469
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we progressed from the Discovery Loop and Options Pivot and
    focused on how we deliver features into products using practices on the Delivery
    Loop. We explored different domains of delivery using the Cynefin framework and
    saw how Waterfall remains effective for work in the *clear* domain, whereas Agile
    is more suitable for work in the *complex* and *complicated* domains.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: We explored where Agile came from, the Agile Manifesto, and took a detailed
    look into Scrum and Kanban methods, the practices they use, as well as supporting
    practices such as the Definition of Ready and the Definition of Done.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_12_31.jpg)'
  id: totrans-472
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.31: Adding Delivery Loop practices and more practices to the Foundation
    to support delivery'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: We can now see how Agile frameworks and practices help achieve continuous delivery
    when using platforms such as OpenShift and, when coupled with high-performing
    teams and an autonomous culture, we can deliver outcomes that matter earlier and
    much more frequently.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we're going to dive deeper into the Measure and Learn part
    of the Delivery Loop and look at different mechanisms and tools that facilitate
    measurement and learning.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
