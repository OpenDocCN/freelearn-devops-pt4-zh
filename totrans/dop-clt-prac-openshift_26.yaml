- en: 18\. Sustain It
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we transitioned from a single trip around the Mobius
    Loop, covered from *Chapter 8*, *Discovering the Why and Who*, through *Chapter
    13*, *Measure and Learn*, into an ongoing, never-ending, continuous journey of
    learning and improvement informed by metric-based outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: This book has focused on how a team can travel round the Mobius Loop from Discovery
    through Options and Delivery and back to Discovery again. The Open Practice Library
    has helped instantiate Mobius into a true outcome-based delivery built on a foundation
    of open culture and open technology.
  prefs: []
  type: TYPE_NORMAL
- en: The PetBattle case study was all about one team achieving one dream to be a
    high-performing, cross-functional, long-lived unit, delivering an awesome product
    and getting the very best out of the underlying technology, including OpenShift.
    Through the use of people, processes, and technology, they are a seed of inspiration
    and a trigger of infectious enthusiasm.
  prefs: []
  type: TYPE_NORMAL
- en: Mobius is more than just a map for a team to follow; it is the navigator for
    the whole system of working.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we are going to ask, *how can we use Mobius and* *open practices
    to drive this* *mindset of continuous discovery, continuous delivery, and Options
    Pivoting on a foundation of culture and technology throughout a much larger organization*?
    In other words, how can we get 50 teams working together like the PetBattle team?
    We will explore how we can enable more Application Product Teams to work the same
    way, what it means for the platform, and what it means for the leadership and
    organizational strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by visualizing the journey undertaken so far.
  prefs: []
  type: TYPE_NORMAL
- en: The Journey So Far
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's use another open source artifact available in the Mobius Kit[1](#footnote-189)
    called the Mobius Navigator. It provides a macro perspective and underlying philosophy
    behind Mobius that can be applied to any complex system. The Mobius Navigator
    is a mental model that can be applied to almost anything, at all levels of an
    organization.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_18_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.1: The Mobius Navigator'
  prefs: []
  type: TYPE_NORMAL
- en: '[1](#footnote-189-backlink) [https://www.mobiusloop.com/kit/](https://www.mobiusloop.com/kit/)'
  prefs: []
  type: TYPE_NORMAL
- en: We typically start on the left loop, although we don't have to. Sometimes legacy
    systems and organizations will start amidst delivery on the right loop and will
    seek to pivot over to the left as soon as is feasible. This happens because there
    are important, powerful questions that need to be asked about Discovery, and the
    sooner the organizations can get back to asking those questions, the better.
  prefs: []
  type: TYPE_NORMAL
- en: As we work our way around the Mobius Navigator from the left, we ask the powerful
    *Why* questions. Why are we doing this? Who are we doing this for, and why will
    it help them? We discover what's really going on to come up with outcomes. We
    then generate ideas, refine and map out how to deliver options, and decide which
    options we're going to work on next. We deliver by designing, creating, and launching,
    measuring the impact as we learn by reflecting and improving. Finally, we adapt
    by discovering more, delivering more, or pivoting completely.
  prefs: []
  type: TYPE_NORMAL
- en: The Mobius Loop allows us to take the Mobius Navigator mindset and drill down
    into, for example, a product team and how they use Discover Maps, Options Maps,
    and Deliver Maps to continuously evolve products, delivering outcomes that matter
    with continuous measurements and learning built in. We saw this in action in PetBattle
    and with the many stories dotted throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: We used a Discover Map at the end of *Chapter 10*, *Setting Outcomes*, to summarize
    *Section 3*, *Discover It*, and capture all the learning harnessed during the
    Discovery Loop. We used an Options Map at the end of *Chapter 11*, *The Options
    Pivot*, to summarize *Section 4*, *Prioritize It*, and capture all the learning
    and decisions made during the Options Pivot. We used a Delivery Map at the end
    of *Chapter 13*, *Measure and Learn*, to summarize *Section 5*, *Deliver It*,
    and capture all the delivered impacts and learnings made during the Delivery Loop.
    If we connect these maps together, we see how the Mobius Loop is used to connect
    these three sections together and summarize the learning of product evolution.
  prefs: []
  type: TYPE_NORMAL
- en: There is a lot of detail in *Figure 18.2*, and you can examine individual maps
    either at the end of the chapters outlined above or access PDF versions in this
    book's GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_18_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.2: PetBattle Mobius maps: Discover, Options, Deliver'
  prefs: []
  type: TYPE_NORMAL
- en: Now, what if we had 10 different product teams in an organization working this
    way, each with their own set of maps for a product or product area they were responsible
    for?
  prefs: []
  type: TYPE_NORMAL
- en: This idea becomes plausible through infectious enthusiasm, increased platform
    adoption, and an enhanced product mindset at different levels throughout the organization.
  prefs: []
  type: TYPE_NORMAL
- en: A side note, but the majority of this book was written during the COVID-19 pandemic
    when **infection** and **spreading** were very negative phenomena. It's nice to
    be writing about a much more positive impact of something being infectious!
  prefs: []
  type: TYPE_NORMAL
- en: Infectious Enthusiasm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the reasons we advocate starting with one team is to test, learn, inspect,
    and adapt with a small slice of the organization or department. Starting the right
    way with a single team and showing rapid success can be incredibly powerful before
    any kind of spread starts. This team is our Patient Zero.[2](#footnote-188) By
    taking this one-team approach first, we are actually taking an Agile approach
    to moving toward a more Agile way of working.
  prefs: []
  type: TYPE_NORMAL
- en: '[2](#footnote-188-backlink) [https://en.wikipedia.org/wiki/Index_case](https://en.wikipedia.org/wiki/Index_case)'
  prefs: []
  type: TYPE_NORMAL
- en: With that first team, we want to enable them to learn as fast as possible by
    doing everything described in this book and by adopting practices in the Open
    Practice Library. No training course, YouTube video, or book will ever, on its
    own, enable a team to instantly work in the way envisioned and achieve the outcomes
    anticipated by this book. We hope you've got a lot of value from this book and
    are armed with inspiration and information, but we don't for one moment think
    your team will instantly transition to this mode of working, even if they read
    the whole thing cover to cover.
  prefs: []
  type: TYPE_NORMAL
- en: People and teams can be enabled by going through the actual journey for themselves.
    They have to build their own foundation of culture and technology. They have to
    travel around the Discovery Loop, Options Pivot, and Delivery Loop to experience
    the Mobius Navigator mindset themselves. In doing this, they need an application,
    a system, something that delivers real business value to real end users, so they
    have the opportunity to Build It, Run It, Own It themselves. We advise starting
    with something that has tangible business value but is also relatively small,
    so that you can experiment and learn with one small team to start with.
  prefs: []
  type: TYPE_NORMAL
- en: Getting one application into production using all the practices and principles
    described in this book is a challenge and your team will almost certainly identify
    bottlenecks and blockers throughout the process. The great news is that the Navigator
    and mental model is built to address this.
  prefs: []
  type: TYPE_NORMAL
- en: Being able to improve in the way described in *Chapter 17*, *Improve It*, enables
    these bottlenecks and blockers to be addressed, one by one, and validated through
    metrics. Many of the underlying blockers come from silos in the organization that
    need to be broken down. The product team, through autonomy, mastery, and purpose,
    need to be able to silo-bust their way all the way to production!
  prefs: []
  type: TYPE_NORMAL
- en: The challenges being surfaced by such a team on a mission to show this new mode
    of operation need timely resolution, either through platform evolution or leadership
    enablement. For example, if there is poor or no Product Ownership in place, this
    blocker needs to be raised through a Retrospective event (as explained in *Chapter
    12*, *Doing Delivery*) or the use of the Real-Time Retrospective or even a Stop-the-World
    event (practices described in *Chapter 4*, *Open Culture*). It's best to identify
    these problems early on and address them with one team, rather than accepting
    what we know is sub-optimal and end up scaling inferior ways of working across
    the organization.
  prefs: []
  type: TYPE_NORMAL
- en: Right at the beginning of this book, we explained how we have a saying that
    we like to *show*, *not tell*. Show, not tell, is how we create infectious enthusiasm.
    We have to show the world the people, the process, and the technology working
    together in full glory. Let's look at a few ways we do this.
  prefs: []
  type: TYPE_NORMAL
- en: Demo Day
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Red Hat, when we run Open Innovation Labs residencies (4-12 immersive engagements
    where our customers experience culture and practices on a real business use case),
    we always finish the engagement with a Demo Day event. Of course, we run demos
    throughout the engagement. We typically use Scrum (as described in *Chapter 12*,
    *Doing Delivery*), which means we run a Sprint Review showcase event every week
    (we tend to run one-week sprints).
  prefs: []
  type: TYPE_NORMAL
- en: While we encourage the idea of **inviting the world** to these weekly events,
    practically it is not possible for every developer, operator, leader, engineer,
    and anyone else connected in the organization to attend. We do record them and
    try other mediums to get the word out about these weekly showcases, but we find
    we need an extra-special Demo Day event.
  prefs: []
  type: TYPE_NORMAL
- en: Demo Day is a showcase of the entire way of working—the people, the processes,
    and the technology. In our residency program, it's the people from our customer's
    organization (also known as the **residents**) who deliver nearly all of the Demo
    Day showcase. By this stage, the infectious enthusiasm has already spread to them
    and this is their opportunity to show (not tell) everything the residents from
    our customer's organization have done to build, run, and own the product that's
    been the focus of their residency engagement. This is an opportunity to show their
    peers and colleagues what they've built, run, and owned; but more importantly,
    it is an opportunity to show the *how* of these stages.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a showcase of all of the practices the residents used in this time-boxed
    period of working together, including:'
  prefs: []
  type: TYPE_NORMAL
- en: Their cultural foundation and how they've used practices such as social contracts,
    Stop-the-World events and Real-Time Retrospectives. They show the team identity
    they've achieved, how they use team sentiment tools, and how they have created
    an awesome, thriving team workspace. They explain and show how they used tools
    such as priority sliders, Definitions of Ready and Done, and acceptance criteria
    to drive easy conversation, aligned and shared understanding, and a strong open
    culture.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Their technical foundation and how they use containers and the OpenShift platform
    as the root of their technical foundation. Adding technical practices such as
    Everything as Code, test-driven development, test automation, CI/CD, and continuous
    deployment is what really provides a strong platform and foundation for continuous
    delivery. They show the value they get from pair programming and mob programming
    to achieve team collective ownership of the product. They show how they have achieved
    autonomy, mastery, and purpose from this foundation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They walk the walls and explain the Impact Maps, Empathy Maps, Event Storms,
    Non-Functional Maps, and Metrics-Based Process Maps and how they collectively
    drove the target measurable outcomes to take the organization toward its North
    Star.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They show how prioritization worked during sprints using User Story Maps, Value
    Slice Boards, and other prioritization practices they chose to use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They show how the product has evolved, how the architecture has emerged, and
    the delivery practices used to iteratively and incrementally deliver.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They demo the app they've built. They demo the platform capabilities being utilized
    and show some of the platform features they've utilized to improve operations,
    drive a more experimental approach to feature development, and radiate real-time
    metrics.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They give some of the mind-blowing metrics that this technology, these practices,
    and this team have managed to achieve and how they compare to the legacy, status
    quo way of working.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They share directly with their leadership what they need to sustain this way
    of working and what their hopes and fears are when they return to their normal
    place of work.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They celebrate with pride what they've achieved and what, as a team, they've
    become.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The infectious enthusiasm is hard to ignore when people are sharing with such
    passion and energy what they've managed to achieve with the technology and practices
    they've adopted. Even the most introverted people have delivered incredible showcases
    at Demo Day. It's something you cannot write down or explain. You need to be there
    to feel and experience the energy and excitement.
  prefs: []
  type: TYPE_NORMAL
- en: Another aspect we often try to build into Demo Day is to show a typical day
    in the life or sprint in the life of the team. To do this, we create lots of videos
    during our engagements.
  prefs: []
  type: TYPE_NORMAL
- en: Documenting the Journey
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's hard to articulate in writing or even verbally the power of collaboration.
    When a team is Event Storming and has a strong open culture in place, it's just
    amazing to watch how the conversations align. When a team comes together to prioritize
    and refine Product Backlogs, the business and technical clarifications achieved
    and the decisions made are very powerful, especially when compared to the status
    quo approach to planning work. All the fun, energy, and banter that gives a team
    such awesome culture cannot be communicated in words.
  prefs: []
  type: TYPE_NORMAL
- en: So, we try to capture that as much as possible through photos and videos. It's
    why we've included lots of photos in this book to try and show, not tell, the
    culture and these practices in operation.
  prefs: []
  type: TYPE_NORMAL
- en: We encourage everyone to work in or near teams to photograph and video everything
    (with permission of those around, of course!) as much as possible. Even in a four-week
    engagement, we end up with literally hundreds of photos and videos.
  prefs: []
  type: TYPE_NORMAL
- en: To create infectious enthusiasm, members of our team tend to compile a weekly
    showcase video. This isn't a professionally made video but something fun, a couple
    of minutes with a montage of photos and short videos that just gives others a
    glimpse of what it feels like in the team space. We show these to the teams (normally
    on a Friday afternoon), which provides a sense of pride and reward. We get feedback
    that team members show these videos to their families, which tends to be a good
    sign that they are loving what they are doing!
  prefs: []
  type: TYPE_NORMAL
- en: We encourage our customers to share these videos and photos around their wider
    organization, especially with those who may benefit or be inspired to see this
    one team working this way and may not have a chance to visit them. Some even end
    up on YouTube,[3](#footnote-187) which is a great way to show the world!
  prefs: []
  type: TYPE_NORMAL
- en: While photos and videos provide a glimpse of a team over a period of time, we
    also look for creative ways to summarize a longer period of time or an entire
    engagement. One approach that has worked really well is to sketch the experience.
  prefs: []
  type: TYPE_NORMAL
- en: '[3](#footnote-187-backlink) [https://youtube.com/playlist?list=PLnqlDDtSH2A4e3dTIGHGyhCYmwIoaYxV5](https://youtube.com/playlist?list=PLnqlDDtSH2A4e3dTIGHGyhCYmwIoaYxV5)'
  prefs: []
  type: TYPE_NORMAL
- en: Sketching the Experience
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Hopefully, you've noticed the value that sketching and doodling can bring to
    areas of complexity. Ilaria Doria has provided many amazing sketches throughout
    this book to bring the content to life a little bit more and show, not tell, the
    practice.
  prefs: []
  type: TYPE_NORMAL
- en: This is another approach that works really well at telling a story and documenting
    an experience. We have sometimes engaged graphic artists to document Demo Day
    as seen in *Figure 18.3*. There's a lot of detail in the image that may not all
    be readable in print. You can, of course, access the digital version using the
    book's GitHub repository at [https://github.com/PacktPublishing/DevOps-Culture-and-Practice-with-OpenShift/](https://github.com/PacktPublishing/DevOps-Culture-and-Practice-with-OpenShift/)
    and zoom in.
  prefs: []
  type: TYPE_NORMAL
- en: There is also an excellent three-part series of blog posts[4](#footnote-186)
    all about this particular engagement written by Eric Schabell that also includes
    the sketch.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_18_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.3: Example sketch of an Open Innovation Labs residency journey'
  prefs: []
  type: TYPE_NORMAL
- en: '[4](#footnote-186-backlink) [https://www.schabell.org/2018/01/inside-my-open-innovation-labs-residency-part-1.html](https://www.schabell.org/2018/01/inside-my-open-innovation-labs-residency-part-1.html)'
  prefs: []
  type: TYPE_NORMAL
- en: We have also incrementally built up the pictures of these people, processes,
    and technology in action over the course of several weeks.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_18_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.4: An Engagement Leader with visual facilitation skills'
  prefs: []
  type: TYPE_NORMAL
- en: These sketches have hung proudly in public areas of the organization's headquarters.
    They stimulate interest and provide inspiration and another source of infectious
    enthusiasm. These visuals often encompass everything you might see if you came
    on a walk-the-walls tour of the team space.
  prefs: []
  type: TYPE_NORMAL
- en: Walk the Walls
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the very best mechanisms we have found to create infectious enthusiasm
    is through a practice called walk the walls. In *Chapter 4*, *Open Culture*, we
    discussed the tremendous value we get from visualizing work and creating the many
    Information Radiators we have learned about in this book. In *Chapter 5*, *Open
    Environment and Open Leadership*, we explained the important success factors of
    an organization's leadership team giving teams open workspaces to show and use
    all of these information radiators. Walk the walls brings both of these together
    and delivers a truly engaging and immersive experience to anyone that might be
    interested in seeing this way of working happen with their own eyes. The idea
    is that people going on a walk-the-walls tour should be able to get all of the
    information they would ever want or need about the team, its product, the technology
    being used, and their way of working. Simply looking at the information radiator
    artifacts and having a conversation with whoever is giving the tour (usually a
    member in the team or someone close to it) provides an honest, energetic, and
    humbling experience to learn about the people, processes, and technology at play.
  prefs: []
  type: TYPE_NORMAL
- en: 'Walk-the-walls tours are not rehearsed and do not follow a script. We simply
    talk about what we see and tell stories about how we built what we''re seeing:
    the Big Picture, the Practice Corner, Impact Maps, Event Storms, the North Star,
    Metrics-Based Process Maps, Value Slice Boards, Product Backlogs, Sprint Boards,
    Retrospective results, build monitors, test metrics, deployment statistics, operational
    dashboards, and many, many more. A great walk-the-walls experience is more than
    simply **Show, Not Tell**—it''s **Feel and Show, not Tell**. A high-performing
    team has a sense of autonomy, mastery, and purpose, uses great open cultural practices,
    and adopts the best technology available on a world-class platform. When you see
    such a team practicing all of this, it''s hard not to feel the culture and energy
    in the room. That is what is truly infectious. Any teams-to-be walking the walls
    and feeling this energy tend to want in—and to be as this team is.'
  prefs: []
  type: TYPE_NORMAL
- en: We have tried to bring to life a couple of walk-the-walls experiences for both
    an in-person product team[5](#footnote-185) and a virtual product team.[6](#footnote-184)
  prefs: []
  type: TYPE_NORMAL
- en: Where we can't have every team and every stakeholder visit the team and walk
    the walls with them, we look for other mediums to help show the world the team
    and technology in action through, for example, what we call **Written Showcases**.
  prefs: []
  type: TYPE_NORMAL
- en: Written Showcases
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Written Showcases are exactly what they say they are—Showcase events but written
    down! We started doing these on a weekly basis where we would be frustrated that
    the weekly Sprint Review Showcase event would not be as well attended as we'd
    hoped for. We'd invited senior leaders, stakeholders, and other teams to come
    and walk the walls but, in a busy world, it's hard to get everyone to visit—especially
    in a time-boxed engagement of perhaps just a few weeks to enable and kick-start
    this team.
  prefs: []
  type: TYPE_NORMAL
- en: So, we write down all the things we want to tell our stakeholders in Sprint
    Review showcase events and walk the walls. And we show as much as possible through
    colorful photos, links, and montage videos.
  prefs: []
  type: TYPE_NORMAL
- en: These written Showcases often take the form of an HTML email or a PDF (so, all
    the photos and videos) that includes links to artifacts and information radiators
    and the latest metrics collected from the evolving application, software delivery,
    and platform.
  prefs: []
  type: TYPE_NORMAL
- en: It's difficult to give a written document the same level of visual appeal as
    an engaging and immersive walk-the-walls tour. But we can try, and the great advantage
    is that such documents can be shared far and wide in the organization and word
    of mouth becomes a trigger of infectious enthusiasm.
  prefs: []
  type: TYPE_NORMAL
- en: '[5](#footnote-185-backlink) [https://youtu.be/70y6SEz6bas](https://youtu.be/70y6SEz6bas)'
  prefs: []
  type: TYPE_NORMAL
- en: '[6](#footnote-184-backlink) [https://youtu.be/TtvDJIT6RYo](https://youtu.be/TtvDJIT6RYo)'
  prefs: []
  type: TYPE_NORMAL
- en: Word of Mouth
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Word of mouth in the field has proven to us time and time again to be a key
    ingredient of sustaining and growing the culture that we are seeing with one team.
    After a few weeks of being invited to Sprint Review Showcase events and walk-the-walls
    tours, receiving written showcase emails, and seeing photos and videos of what
    looks like some awesome team and techie stuff happening, the team in question
    gets talked about.
  prefs: []
  type: TYPE_NORMAL
- en: We start to hear chats in the corridor such as, "*Have you seen those folks
    up on the 5th floor? Sticky notes and monitors everywhere*…*not sure what they're
    doing but it sure does look interesting*" or "*We need to go and see that product
    team who have been in the basement the last few weeks; they seem to be doing some
    awesome techie shizzles and I'm sure we can learn from them*" or even, "*I've
    just done this walk* *the* *walls thing with that team downstairs—they're doing
    all the stuff you read and learn about on training courses but they're doing it
    so much better and for real!*"
  prefs: []
  type: TYPE_NORMAL
- en: And the conversation goes on when you see some of the metrics around software
    delivery and operability. Word of mouth gets around about some of the amazing
    outcomes that one team is achieving. How can others not want to learn more?
  prefs: []
  type: TYPE_NORMAL
- en: Mind-Blowing Metrics That Cannot Be Ignored
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In *Chapter 17*, *Improve It*, we shared a story about how a Product Owner needed
    to prove the value of DevOps using metrics to his Leadership Team and how he used
    Metrics-Based Process Mapping as a practice to enable this.
  prefs: []
  type: TYPE_NORMAL
- en: The headline metrics in *Table 17.1* showed improvements in getting new features
    into production over 34 times faster using a long-lived product team (as opposed
    to a project team), new ways of working (as opposed to the legacy Waterfall project
    management methodology), and a world-class container platform (as opposed to VMs).
  prefs: []
  type: TYPE_NORMAL
- en: The metrics do not lie. They are collected from the underlying systems and tools
    that have helped effect this change. When we showcase these metrics in addition
    to showing all the practices and demonstrations, we are not talking about cost
    savings. Instead, we are shifting the focus to value creation and value realized.
    It leaves stakeholders and leadership thinking about the impact this can have
    on their business if they can get the highest-level features, applications, and
    capabilities into the hands of users 34 times more quickly than what they are
    used to.
  prefs: []
  type: TYPE_NORMAL
- en: And this is just one team. What if all teams in the organization could work
    like this one? This one team has provided an inspirational blueprint for change
    by showing the art of the possible.
  prefs: []
  type: TYPE_NORMAL
- en: Transitioning From One Team To Seven Teams
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](img/author_face_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Continuing the story from *Chapter 17*, *Improve It*, about the need for metrics
    to explain the benefits of DevOps Culture and Practices that they'd now experienced
    for six weeks, what happened next?
  prefs: []
  type: TYPE_NORMAL
- en: The team had been working in a pop-up lab for this residency engagement, so
    the first step was to move them back to their own offices.
  prefs: []
  type: TYPE_NORMAL
- en: And it was more than just moving the people. All the boards, all the artifacts,
    all the information radiators, all the monitors, all the sticky notes—they all
    had to be moved too!
  prefs: []
  type: TYPE_NORMAL
- en: We hired removal men to wrap them up and move them.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_18_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.5: Moving boards and information radiators to show and inspire others'
  prefs: []
  type: TYPE_NORMAL
- en: Through the support of the Leadership Team of this organization, a space was
    secured at the site where many of their IT teams worked from.
  prefs: []
  type: TYPE_NORMAL
- en: There had been a lot of word of mouth about this team. Written showcases had
    been shared weekly, which included an informal fun weekly video. Thousands of
    photos and short videos had been captured, which, along with all the artifacts
    created during the residency, were all shared back to the organization's own SharePoint
    servers. And, of course, those metrics were going viral around the organization!
  prefs: []
  type: TYPE_NORMAL
- en: Keeping the team together and keeping their tools (including all those boards)
    was the most important first step. They did this.
  prefs: []
  type: TYPE_NORMAL
- en: The space they worked in became known as The Board Room!
  prefs: []
  type: TYPE_NORMAL
- en: More walk-the-walls tours, more enablement and training sessions, and many more
    conversations with a growing number of other teams and parts of the organization
    followed.
  prefs: []
  type: TYPE_NORMAL
- en: The team still had a product to evolve further and deploy into more users' hands
    around the world.
  prefs: []
  type: TYPE_NORMAL
- en: 'About six months later, I received an email from the same Product Owner who
    we talked about in *Chapter 17*, *Improve It*, with the need for metrics. First,
    he talked about the app:'
  prefs: []
  type: TYPE_NORMAL
- en: '"*Yes, [the application] is live in production globally on all 89 markets.
    It''s working quite well and aside from minor issues it''s been running flawlessly.*"'
  prefs: []
  type: TYPE_NORMAL
- en: He went on to explain how their CI/CD practices have continued to improve—"*We've
    continued to push code to production on a more or less daily basis; our record
    at the moment is 3 deploys within two hours and the pipeline execution time is
    down to about 20 minutes with a whopping total of 128 test cases part of the regression*."
  prefs: []
  type: TYPE_NORMAL
- en: And, finally, he told me how this approach was organically scaling, through
    infectious enthusiasm to other teams—"*It's super exciting to be part of transforming
    a bigger part of the organization. I'm now responsible for 7 teams. Feels like
    we've hit the ground running and are making good progress even if we still have
    some ways to go.*"
  prefs: []
  type: TYPE_NORMAL
- en: One more thing. He gave me an updated version of the slide he'd previously used
    at Demo Day. The process improvement of getting new functionality done into production
    was no longer 34 times better than the legacy practices and legacy technology.
    It was now 105 times faster.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_Table_18.1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Table 18.1: Metrics-based benefits of using new DevOps Culture and Practices'
  prefs: []
  type: TYPE_NORMAL
- en: This is a great example of continuous improvement!
  prefs: []
  type: TYPE_NORMAL
- en: What is great about this story is that the culture and practices were subject
    to immediate scaling. We saw the journey of ensuring the product team continued
    to perform and improve underpinned by the metrics. I believe several impediments
    and blockers had to be fixed by leadership to enable this. The proof point was
    scaling the team's application operationally across 89 markets while interest
    and infectious enthusiasm grew across the business.
  prefs: []
  type: TYPE_NORMAL
- en: And eventually, some of the key people involved in making that *one team, one
    dream* a success progressed to enabling seven teams to work, behave, and think
    in the same way.
  prefs: []
  type: TYPE_NORMAL
- en: More Teams, More Application Products
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we are ready to unleash that infectious enthusiasm and enable more Application
    Product Teams to work in the same mode as the first one has, what does that look
    like?
  prefs: []
  type: TYPE_NORMAL
- en: We've seen throughout this book how a team built its own foundation—cultural
    foundation, enabled by leadership, and a technical foundation. We've seen how
    that team journeyed around the Discovery Loop through the Options Pivot and onto
    the Delivery Loop, and based on learning either looped around Delivery again,
    returned to the Discovery Loop, or returned to the Options Pivot. This journey
    continues forever.
  prefs: []
  type: TYPE_NORMAL
- en: This is what five Application Product Teams' approaches would look like, as
    seen in *Figure 18.6*. Each of them is an autonomous team with mastery and purpose,
    focused on their individual product (or product area if they're delivering into
    a larger product). So, they each have their own Mobius Loop to journey around.
    They each have their own foundation of culture, their unique team culture. They
    each have their own technical foundation that they can continuously improve.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_18_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.6: Lots of Mobius Loops representing lots of products in an organization'
  prefs: []
  type: TYPE_NORMAL
- en: There is one addition. All the teams need to be supported by an underpinning
    foundation. This foundation is also made up of a cultural and a technical part.
    The cultural part enables teams to safely collaborate, share, and learn together
    using techniques such as inner-source and communities of practice. The technical
    part of the underpinning foundation is heavily contributed to by the platform,
    such as OpenShift, which underpins all the technical practices being applied by
    the adopting teams. How do we bring additional teams into this whole ecosystem?
    How do we add them to the platform?
  prefs: []
  type: TYPE_NORMAL
- en: First, every team needs to go through some kind of enablement. They need to
    build their own foundation of culture and technology. They need to understand
    their Why. They need to be involved in their own Discovery Loop and Delivery Loops.
    We strongly believe that there is a need for three iterations in any team's enablement.
  prefs: []
  type: TYPE_NORMAL
- en: The Power of Three Iterations in Enablement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It always seems to be three. When we do something new and then repeat it and
    then repeat it again, it's the third iteration where things start to click. Sometimes
    it takes longer and more iterations (especially where complexity is high), but
    three is the minimum number of iterations that any team should consider to go
    through an immersive, learn-by-doing, enablement experience. This is why our Open
    Innovation Labs residencies are always between 4 and 12 weeks in duration. A four-week
    residency means the team can take a few days to build their foundation, a few
    days to go round the Discovery Loop and Options Pivot, and then do three one-week
    Delivery Loop iterations using Scrum. Each iteration of the Delivery Loop will
    deliver an increment of working software that is potentially shippable to production.
    These iterations are kick-starting the continuous incremental delivery of the
    application product.
  prefs: []
  type: TYPE_NORMAL
- en: Now, this may not be enough to achieve outcomes and many customers will want
    to get back to Discovery and/or do more Delivery Loop iterations, hence six- and
    eight-week residencies are more common. But it's always in that third Delivery
    Loop or third Sprint where people really start to get it. They realize that one
    of these Showcases is going to happen every Wednesday at 3 PM. They realize that
    there'll be a written Showcase with a fun video on Friday afternoon. They realized
    that that will explain what has been loaded into the new sprint that was planned
    on Thursday mornings. It becomes a pattern and a rhythm that team members and
    stakeholders can feel increasingly confident about. And, most importantly, we
    start to see the impact of continuous improvement in metrics after three iterations.
  prefs: []
  type: TYPE_NORMAL
- en: The App Does Something This Week That It Didn’t Do Last Week!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](img/author_face_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Working with a global oil customer in 2017, we used a four-week Open Innovation
    Labs residency to reimagine one of their pricing applications using DevOps Culture
    and Practices. Of course, this meant bringing the user into the process much earlier,
    and with much more collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: I managed to get the time and support of an asset economist who was one of the
    key users of the application in question. She had never met a software development
    team, never mind worked with them, so this was a whole new world to her.
  prefs: []
  type: TYPE_NORMAL
- en: She didn't attend the Sprint 1 Showcase. She did attend the Sprint 2 Showcase
    and was hugely frustrated because so much of the functionality that she expected
    to see was missing from this replacement app that she relied on in her job. She,
    of course, had not really grasped that this was an early product increment and
    still very early in development. But she did provide feedback on a few things
    she saw demonstrated that were wrong.
  prefs: []
  type: TYPE_NORMAL
- en: The following week was the last Sprint Review showcase and she attended again.
    This time, she saw some of her feedback had been addressed and some (not all)
    of the new features were starting to go into the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The penny dropped and all became clear: she realized that the app was evolving
    with her involved. This week, it did stuff it didn''t do last week. And the team
    had managed to take in her feedback and address it in less than a week! A very
    different experience to the usual user acceptance testing sign-offs she would
    use after several months of siloed development.'
  prefs: []
  type: TYPE_NORMAL
- en: It was the third iteration where this positive realization took place.
  prefs: []
  type: TYPE_NORMAL
- en: So, we've established that every new team needs to go round the Mobius Loop
    at least three times to be engaged and immersed in using the platform and DevOps
    Culture and Practices. What about the foundation?
  prefs: []
  type: TYPE_NORMAL
- en: Bolster the Foundations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is where we do *not* do a copy and paste of that first team's foundation.
    Teams need to build their own foundations. They also need to regularly nurture
    and bolster their own foundations. And where they are connected by culture and
    technology, they all need to contribute to their connected underlying foundation.
  prefs: []
  type: TYPE_NORMAL
- en: When we introduced the Open Practice Library in *Chapter 2*, *Introducing DevOps
    and Some Tools*, we explained that this is a community-driven repository of tools.
    Throughout the book, we've pulled out around 50 of our favorite tools in the Open
    Practice Library toolbox and explained how we use them together to deliver metrics-based
    outcomes that matter.
  prefs: []
  type: TYPE_NORMAL
- en: These are not necessarily the practices that every team should use. Just because
    a set of practices works so well for one team does not mean they will work equally
    well for every subsequent team. Practices used to build the foundation and navigate
    around the Mobius Loop need to emerge and react to the specific context and needs
    of the team at the time in question.
  prefs: []
  type: TYPE_NORMAL
- en: This means every team may mix up their practices compared to any other team.
  prefs: []
  type: TYPE_NORMAL
- en: To draw a comparison, let's think about what happens when your toilet breaks
    in your house. It can be a very stressful experience losing a piece of equipment
    so vital in the home! Assuming you're not an experienced toilet-fixer, you will
    probably call a plumber. Now, when the plumber arrives at your house, we suspect
    you don't greet the plumber by telling him or her what tools they're going to
    use and in what order and for how long. You expect the plumber to arrive with
    a van and/or a toolbox of everything he or she will need to investigate the problem,
    confirm the exact nature of the cause and what is needed to correct it, assess
    the options for making the fix (perhaps with some recommendations), make the fix,
    test it and ensure the problem is fixed and won't happen again, and clean up.
    The plumber will more than likely need a few tools to do this. You don't tell
    them what tools to use. You expect them, the experts, to do that!
  prefs: []
  type: TYPE_NORMAL
- en: It's the same with our product teams. This is why we shouldn't give teams a
    prescriptive, step-by-step set of tools and methods and expect them just to act
    on them. With autonomy, mastery, and purpose, we need them to pick the tools and
    practices they want to use and we expect them to arrive with the very best ones
    to get the job done to the best of their ability. And if a tool or practice isn't
    working out (either at first or after some time), throw it back in the toolbox
    and try another, a better one! Through the sharing of experience and forming communities
    across teams, organizations can find the very best tools and practices as informed
    by the teams on the ground.
  prefs: []
  type: TYPE_NORMAL
- en: As we explained in *Chapter 12*, *Doing Delivery*, we also need to look for
    when to bring the guardrails down that some of these practices provide. Just because
    a product team started using practices associated with the Scrum framework and
    worked really well for a few months, doesn't mean that these practices should
    be used forever for that team. Teams seeking to continuously improve need to inspect
    themselves and recognize when a practice they've been using successfully for some
    time might actually be counterproductive and a bottleneck.
  prefs: []
  type: TYPE_NORMAL
- en: Having a common underpinning foundation of culture and technology is what allows
    many teams to successfully travel around the Mobius Loop. This means creating
    a culture where teams learn from each other, and infectious enthusiasm continues
    to evolve—not just from the first team but by subsequent teams and organizations.
    Much of our experience comes from open source communities where sometimes many
    thousands of people connect to serve a common purpose and iteratively and incrementally
    deliver on this. We're seeing and helping organizations use the principles of
    open source to form communities inside organizations. The practice of inner-sourcing
    allows collaboration, contribution, and openness across the organization. They
    achieve this by forming Communities of Practice and Communities of Interest. **Communities
    of Practice** (**CoPs**) provide a space where people from different teams who
    hold particular specialist skillsets can collaborate, share, ideate, and inspire.
    Good examples include UI/UX CoPs, Product Ownership CoPs, or an OpenShift CoP.
    **Communities of Interest** (**CoIs**) can be on any topic of interest to anyone
    and related to something inside or outside the organization. Inner-sourcing and
    CoPs help to provide and bolster the underpinning foundation of culture that multiple
    teams can leverage sustainably and gain from.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at some ideas on how we might sustain technology.
  prefs: []
  type: TYPE_NORMAL
- en: Sustaining the Technology
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Anyone who has a career in IT will tell you that one of the biggest challenges
    is keeping up to date with all of the technology. In the world today, a very large
    percentage of us are always connected to the internet.[7](#footnote-183) The growth
    and numbers are staggering, especially when you consider that back at the start
    of the 1990s (when the authors of this book were leaving university), only ~5%
    of the developed world were connected to the internet. The pace of change is endless.
  prefs: []
  type: TYPE_NORMAL
- en: '[7](#footnote-183-backlink) [https://en.wikipedia.org/wiki/Global_Internet_usage](https://en.wikipedia.org/wiki/Global_Internet_usage)'
  prefs: []
  type: TYPE_NORMAL
- en: It is with this backdrop in mind that we evolve our applications and services
    atop a platform that has grown from its first commit in 2014, shown in *Figure
    18.7*, to the most prevalent container orchestration platform today.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_18_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.7: First Kubernetes commit'
  prefs: []
  type: TYPE_NORMAL
- en: For technologists, the challenge is keeping pace with this rate of change. To
    *not* change is one option. However, it can be a fatal option; think Betamax and
    cassette tapes and Perl (so sad)! We have said a few times in this book that we
    are optimizing a certain thing to minimize for the cost of change. We need to
    minimize the amount of time it takes to modify or change a software deployment
    pipeline, to enhance it, or to give us faster feedback. We need to minimize the
    time it takes to get ideas from our customers and business into working software
    solutions in production. We need to minimize the time it takes to update the platform.
    These drives to minimize time are based on the realization that *time is money*
    in business and organizations, and that it is often better to be *fast* than *right.*
    Gaining faster feedback allows teams to pivot and change faster based on their
    business and customer needs.
  prefs: []
  type: TYPE_NORMAL
- en: So, how can technologists sustain this? We do this by continually learning,
    evolving the long-lived team's shared knowledge and understanding of technology
    and solutions that are continuously evolving and adapting. Practices such as pair
    programming and mobbing bring to life this continual learning experience. It takes
    technical excellence that can be shared and understood by the team, combined with
    the people and processes practices described in this book, to win.
  prefs: []
  type: TYPE_NORMAL
- en: Businesses small and large are building their business platforms atop a myriad
    of vendor platforms. This platform mindset is critical in today's hybrid cloud.
    One of the main reasons for the success of the platform mindset is that platforms
    can become a place where shared and common best practices are codified among different
    teams. If the public cloud has taught us anything, it is that the right platform
    and infrastructure is a real sustainable competitive advantage. OpenShift is positioned
    to be the platform your organization and teams develop and continuously deploy
    business application services upon, wherever your infrastructure is deployed.
  prefs: []
  type: TYPE_NORMAL
- en: Lifecycle managing these platform architectures is a core skill that every organization
    has to deal with. Many of the intricacies are managed *as* *a* *service* in the
    hybrid cloud; this lowers the operational burden for your product teams. In OpenShift,
    with the operator pattern, all of the expert knowledge can be codified, shared,
    and updated over time to help automate and manage the individual pieces that make
    up the platform. Perhaps most importantly, the operator pattern was used to unify
    the operating system with the platform, making the OpenShift platform installation
    and life cycle far easier from a user's perspective. Practices have also evolved
    to take on this life cycle challenge. Site reliability engineering is a discipline
    born from traditional IT operations and infrastructure that codifies best practices
    for teams managing these platforms in all their possible guises.
  prefs: []
  type: TYPE_NORMAL
- en: To adopt a learning mentality is to accept that what you know today is not necessarily
    going to be enough for the changes and challenges that lie ahead. For us, innovation,
    research, and development happens in the open source communities of the world.
    You can tap into this and become part of this through commercial open source,
    which in turn becomes a competitive advantage to your organization. Commercial
    open source software projects are owned by a single company that derives a direct
    and significant revenue stream from the software through subscriptions, services,
    training, and support.
  prefs: []
  type: TYPE_NORMAL
- en: 'Being adaptive to change is critical in any DevOps or transformation agenda.
    So many times have we come across DevOps done wrong, and often they come down
    to these seven items. Watch out for these anti-patterns and know how to respond
    to them appropriately as, if you don''t, they can lead you down a dark path:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/figure-18-8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.8: Seven anti-patterns and what DevOps is NOT'
  prefs: []
  type: TYPE_NORMAL
- en: 'DevOps is **not** a one-person band: "*Yeah, we do DevOps, Mary is here Tuesdays
    and Thursdays and she manages our pipelines*." So often do we come across phrases
    like "*The DevOps person,*" but this is an anti-pattern. DevOps is not just one
    team either; it''s a desire to want to work a certain way. To want to take end-to-end
    responsibility for the software''s journey and break down walls that impede feedback
    loops. It''s not some gun for hire that swans in and fixes everything before saddling
    up and heading back out of town.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'DevOps is **not** a one-time thing: Following on from this gun-for-hire analogy,
    DevOps is not a one-time thing. It''s not just a matter of configuring a pipeline
    once and it''s static forever. Like all technology, these things need to be nurtured
    and evolved. As new components get added to your architecture or new software
    becomes available, your pipeline and process need to evolve too.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'DevOps is **not** the cloud: Using services from the cloud or just deploying
    a Kubernetes cluster does not mean you''re now doing DevOps. It''s how you use
    the platform as an enabler and view it as a product that can accelerate any transformational
    journey.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'DevOps is **not** giving root/admin access to everyone: This one should feel
    cut and dry, but doing DevOps does not just mean giving the access to production
    and to the developers. It''s about developers and site reliability engineers working
    together, listening to each other''s concerns, and optimizing your delivery capabilities
    with trusted and reliable pipelines.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'DevOps is **not** just the tools: Just because you''re using Jenkins or Tekton
    does not mean you''re doing DevOps. The tools are only a vehicle that can enable
    teams to work together on a shared platform and space. The real goal is creating
    ownership of the software stack and a feedback loop that connects users through
    to development to increase speed to market.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'DevOps is **not** a silver bullet: It''s all about *the people, the process,
    and the technology* combined and balanced. Doing DevOps is not going to solve
    all your problems; it''s just one aspect.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'DevOps is **not** a distinct team: If your **software development life cycle**
    (**SDLC**) consists of developers building code and then throwing it over the
    wall to the DevOps team to deploy/manage, then you need to reevaluate your SDLC.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, if the idea of *the DevOps Team* is such an anti-pattern, the question
    needs to be asked, "*Is the same true for the idea of a* **Platform Team**?"
  prefs: []
  type: TYPE_NORMAL
- en: Our first inclination may be that it is. If we truly want to bring down all
    silos and have a fully cross-functional product team, surely that should mean
    platform expertise is included in the team? Surely one or two of the T-shaped
    or M-shaped people we defined in *Chapter 1*, *Introduction* – *Start with Why*,
    should be specialists in the platform?
  prefs: []
  type: TYPE_NORMAL
- en: This has been a debate we've been having for several years, and perspectives
    do start to change when we start to consider many product teams all working on
    a common platform. This is a problem of scale. Of course, one of the goals of
    having a platform in the first place is to solve this problem of scaling and reuse.
    It provides an underpinning technical foundation for many teams to accelerate
    their development with. A single product team like the PetBattle team will get
    many benefits from a platform. But, if PetBattle were to get acquired by Pet Planet—a
    new Pet Tech firm with 50 product teams—the economies-of-scale benefits offered
    by the platform grow exponentially.
  prefs: []
  type: TYPE_NORMAL
- en: 'Recently, we''ve been inspired by and resonate heavily with the work of Matthew
    Skelton and Manuel Pais, who wrote the book *Team Topologies*. They introduce
    different team topologies, which include:'
  prefs: []
  type: TYPE_NORMAL
- en: The Enabling Team, who help train, coach, and guide a team to learn new practices
    and acquire new skills, much like we do on our Open Innovation Labs residency
    program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Stream Aligned Team, which is a team aligned to a single, valuable stream
    of work. The Application Product Teams we have referred to throughout this book
    align closely to this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Platform Team, which has a purpose to enable stream-aligned teams to deliver
    work with substantial autonomy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The reason we support the idea of a Platform Team and don't see it as an anti-pattern
    like the DevOps team is because the platform is a product and should be treated
    as a product. Where Skelton and Pais differentiate between Stream Aligned Teams
    and Platform Teams, we see both of these teams as Product Teams.
  prefs: []
  type: TYPE_NORMAL
- en: This book has been all about how Product Teams should operate and what is involved
    in taking a product mentality to a team's subject. We visualize any product mental
    model using the Mobius Loop and foundation.
  prefs: []
  type: TYPE_NORMAL
- en: The Double Mobius Loop – Platform and Application Product
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, how does the platform Mobius Loop work? Turn to *Page 1* of this book! It's
    exactly the same! We treat the platform as a Complex product, which means we perform
    continuous discovery, Options Pivoting, and continuous delivery.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_18_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.9: Double Mobius Loop of application products and platform products'
  prefs: []
  type: TYPE_NORMAL
- en: 'A Platform Team can use the same Discovery practices as we introduced in *Section
    3*, *Discover It*. Rather than discovering a business application, they are using
    these practices to discover the platform. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: A Platform Team can have its own North Star metric, as described in *Chapter
    8*, *Discovering the Why and Who*. This gives a single metric that best captures
    the core value that the platform delivers to its customers or, more specifically,
    Application Product Teams.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Platform Team can have its own Impact Map, as described in *Chapter 8*, *Discovering
    the Why and Who*, deliverables that can be built into the platform, and the measurable
    impact we hypothesize these would have on actors (such as developers) to help
    achieve the platform's goal.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Platform Team can use Empathy Mapping and other human-centered design techniques
    to build empathy with, say, developers in Application Product Teams. This is very
    powerful in avoiding a common anti-pattern being mandated across the organization;
    it creates a pull from the development community who want a platform that will
    help them and solve pain points.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Platform Team can use Event Storming as described in *Chapter 9*, *Discovering
    the How*, to map out the processes developers use or want to use to get best use
    out of the platform. This enables the platform architecture to emerge. We can
    also use practices such as Non-Functional Mapping and Metrics-Based Process Mapping
    to trigger a continuous delivery approach with measures on the platform.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Platform Team can set target measurable outcomes as outlined in *Chapter 10*,
    *Setting Outcomes*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Platform Team can organize and prioritize its work using practices such as
    User Story Mapping, Value Slicing, Impact and Effort Prioritization, How-Now-Wow
    Prioritization, and Weight-Shortest-Job-First to build a platform Product Backlog
    prioritized by value delivered to Application Product Teams. Design of experiments,
    design sprints, and even considering the advanced deployment concepts to roll
    out new platform capabilities can all be used by Platform Teams.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Platforms are complex systems as defined by Cynefin and explained in *Chapter 12*,
    *Doing Delivery*. This means they benefit from being delivered iteratively and
    incrementally with learning and feedback built in. An Agile delivery approach
    such as Scrum or Kanban allows platforms to be showcased to developers and operators
    iteratively and allows metrics and learning to be collected.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Platform Teams need to have their own foundation. Platform Teams need to have
    autonomy, mastery, and purpose themselves. They need their own technical foundation
    so they can apply practices such as Everything as Code, the Big Picture, and CI/CD
    as explained in *Section 2*, *Establishing the Foundation*. The technical foundation
    of the Platform Team is twice as important; not only does it provide a foundation
    for emerging platform development, but it morphs into the technical foundation
    of all Application Product Teams.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Platform Teams can work in spaces full of information radiation, collaboration,
    and openness just like Application Product Teams. In fact, the most important
    collaboration is with those Application Product Teams.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do Platform and Application Product Teams interconnect? How do their respective
    loops interconnect? Developers and other members of Application Product Teams
    are the users and the stakeholders of the Platform Team. The decision and motivation
    to use a platform has to come from the power of those users and not a top-down
    management decision. Platform Teams evolve the platform and infrastructure to
    serve needs and opportunities and address problems that developers and Application
    Product Teams are having.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting Many Levels of Product Teams
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](img/author_face_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: One of the best feedback loops I witnessed between Platform Teams and Application
    Teams is in our Open Innovation Labs space in London, where we often have engineers
    from the Red Hat OpenShift business unit working in the space.
  prefs: []
  type: TYPE_NORMAL
- en: We also run Open Innovation Labs residencies in the same space where our customers
    are using OpenShift, sometimes for the first time, and also learning DevOps Culture
    and Practices using OpenShift.
  prefs: []
  type: TYPE_NORMAL
- en: Where there is an opportunity to connect OpenShift engineering to our customers,
    we seize it. There is a two-fold benefit. Our customers get to meet the engineers
    behind the core platform product they are using, can hear directly from them on
    upcoming features, roadmap items, and more; and our OpenShift engineers get to
    see real customers using their product! They get to see how and why they're using
    it, what's working well, and what isn't. It's an awesome feedback loop.
  prefs: []
  type: TYPE_NORMAL
- en: Two of the worst anti-patterns we see are where management makes a product decision
    without talking to users, and where management makes a platform decision without
    talking to developers and operators.
  prefs: []
  type: TYPE_NORMAL
- en: So, what can management take away from this and what can Leadership Teams learn
    from the double Mobius mental model to platform and application product continuous
    discovery and continuous delivery? What if organizational leadership and strategy
    was also treated as a complex product?
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_18_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.10: Mobius ecosystem of leadership, products, and platform'
  prefs: []
  type: TYPE_NORMAL
- en: If an organization's strategy is to be treated as a complex product, that means
    leadership taking a continuous discovery, Options Pivot, and continuous delivery
    approach.
  prefs: []
  type: TYPE_NORMAL
- en: Product Ownership of strategy needs to understand the context and motivation
    of the market, informed by information visualized by product teams (just as Product
    Owners of Application Product Teams need to understand the context and motivations
    of users and business stakeholders; just as Product Owners of Platform Teams need
    to understand the context and motivations of developers and operators).
  prefs: []
  type: TYPE_NORMAL
- en: Leadership needs its own foundation and needs to inject stability into the product
    and platform foundation. In some cases, this means removing the *rotting foundation*
    from legacy processes. Examples we see of this include the way HR, financial,
    legal, and risk processes are conducted. All of these benefit from a product mindset
    and being tightly connected to their users' empathy.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we revisit once again the practices introduced in the different sections
    of this book, we can see how they can be applied by a Leadership Team taking a
    product mindset toward its strategy. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: Every strategy should have a North Star.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Impact Mapping has been used by many organizations to drive the organization's
    company strategy, articulated by a goal, actors, target impacts, and deliverables.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practice such as Event Storming, Empathy Mapping, and other human-centered design
    can be used to gain shared understanding and empathy with shareholders, financial
    stakeholders, owners, competitors, and other market forces.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Options Pivot practices in *Section 5*, *Deliver It*, can be used to prioritize
    work, design experiments, and even consider advanced deployment of products into
    the market.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Delivery practices in *Section 6*, *Build It, Run It, Own It*, can be used
    to deliver increments of the strategy in an Agile way and run Showcases (to the
    company and the market) and Retrospectives to continuously improve. Measure what
    matters and continuously learn. Capture and radiate organizational metrics and
    drive learning and continuous improvement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The outcome of Leadership Strategy as a Product is to set the intent for Application
    Product teams. Product Teams set the intent to Platform Teams. All teams are informed
    by measures, learning, and visualization—both to improve themselves and to radiate
    up from platform to product, and then to leadership.
  prefs: []
  type: TYPE_NORMAL
- en: The final practice from the toolbox of practices to help connect these is called
    **Objectives and Key Results**, or **OKRs**.
  prefs: []
  type: TYPE_NORMAL
- en: OKRs comprise an **objective**—a clearly defined goal—and 3-5 **key results**
    that are specific measures used to track the achievement of that goal. The goal
    of OKRs is to define how to achieve objectives through concrete, specific, and
    measurable actions. Key results can be measured on a scale of 0-100%. Objectives
    should also be supported by initiatives, which are the plans and activities that
    help to achieve the objective and move forward the key results. OKRs can be shared
    across the organization, with the intention of providing teams with the visibility
    of goals and to align and focus effort. OKRs are typically set at the strategic,
    team, and personal levels.
  prefs: []
  type: TYPE_NORMAL
- en: A nice way to start OKRs is to link it to the Impact Mapping practice introduced
    in *Chapter 8, Discovering the Why and Who.* The goal statement in the Impact
    Map translates to an **Objective** (**O**). The measurable impact statement connected
    to the goal translates to **Key Results** (**KR**). So, the Impact Mapping practice
    being used in the Discovery Loop of Strategy and Leadership helps set the intent
    for products, which can each have their own Impact Maps and OKRs. A Platform Team
    can also use the Impact Mapping practice to capture and radiate their *Why* and
    build OKRs to support the application products and strategy above.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B16297_18_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 18.11: Mobius Loops connected by OKRs and information, metrics, and
    learning'
  prefs: []
  type: TYPE_NORMAL
- en: The double loop learning applied throughout this book using Mobius to evolve
    products applies to platforms and leadership strategies. They are all connected
    through OKRs, which flow down the organization and change based on information,
    metrics, and learning flowing up from the platform and products.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we explored how we *Sustain It*—how we sustain everything we've
    covered in this book and potentially even grow it!
  prefs: []
  type: TYPE_NORMAL
- en: A lot of this comes down to infectious enthusiasm—infectious enthusiasm for
    the technology and platform, for the way of working and the practices, and for
    the team and culture. We looked at different ways that infectious enthusiasm is
    generated and some stories on how the *one team, one dream* mantra evolved to
    multiple Application Product Teams and, eventually, the need for a Platform Team.
  prefs: []
  type: TYPE_NORMAL
- en: Whether teams in your organization are the first, second, tenth, or hundredth
    Application Product, Platform, or Leadership Team, treating the subject being
    delivered as a product is the success factor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s leave you with our top 10 tips for transformation towards DevOps Culture
    and Practice with OpenShift:'
  prefs: []
  type: TYPE_NORMAL
- en: Never forget the foundation—building a foundation of culture and technology
    practices enables business agility.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Never stop improving—whether it is the foundation, the technology, or the products.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Never stop learning—the entire system of work is focused on being able to learn
    at every level. Whether it be a product, a team, a platform, or an organization's
    strategy, continuous learning should be central to everything.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Never done. We call this **#neverdone** because we are working in infinite loops—double
    loops of learning that are continuous and never end, right up until product, platform,
    or organizational shutdown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Show, not tell. This is one that might seem over-said, but one of the true measures
    is working software. We need it to get feedback and to go around the loops again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Culture is key. Culture can be hard to define, but it's the sense of camaraderie
    that a team has. It's the in-jokes, the banter that leads to pulling together
    when things are tough. Or being willing to do that rubbish task this sprint because
    you know in the next one, someone else will take their turn.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Invest in your people. A culture is hard to build but easy to break. Demotivation
    can creep in and erode trust.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Listen to the engineers; they also need to listen to and understand the needs
    of the business and users, however.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Learn by doing—experiment, experiment, experiment. Fail safely, fail fast, and,
    most importantly, learn from it. Learn by doing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Have fun!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
