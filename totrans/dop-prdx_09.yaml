- en: Introducing Kevin Behr
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As CSO of PraxisFlow, Kevin Behr spends his time working with clients who seek
    to develop their DevOps process. His 25 years of experience have been driven by
    a passion for engaging with the complex problems that large IT organizations face,
    and how we can use DevOps to solve them. You can follow Kevin on Twitter `at @kevinbehr`.
  prefs: []
  type: TYPE_NORMAL
- en: The journey to DevOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Hi Kevin, you''ve been involved with many topics that have
    become central to DevOps since your early childhood working with your father.
    How did your father''s work prepare you for DevOps?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Well, it''s exactly 30 years since I first got formally involved
    in the world of computing. In my earlier years, I had the fortune of growing up
    with my father, Harold Behr, one of the cofounders of the Association of Field
    Service Managers, or AFSM. For those who don''t know, AFSM was one of the first
    global groups dedicated to global service managers. AFSM would discuss topics
    that are still related to DevOps today, such as how mainframe computing was going
    to be serviced, as well as discussing availability and continuity of value for customers.'
  prefs: []
  type: TYPE_NORMAL
- en: I was seven years old when I started building small digital computers, working
    on vacuum tube equipment. I was about ten years old when I started working with
    midranges and mainframes, in the context of repair. My dad ran a team that would
    charter jets to fly to their customers whenever their mainframes went down, and
    they would fix them at night, so that they'd hopefully be ready and working by
    the time morning came. If they had an outage happen on a Friday, I would often
    go with them if they flew out in the evening. Even back then, it was a fun thing
    that I could do with computers and with my father.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: You were fixing mainframes at ten years old?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: My job would be to hold the solder and heat sinks. This was
    a time back when you could actually service and fix these beasts! One guy would
    be on the phone with IBM Armonk, or whatever mainframe company they were dealing
    with, and they''d be getting traces to test for certain voltages and impedances
    on the boards. Then, they would solder and replace the bad components. I was better
    at soldering than most of them, because I had small hands so I could get into
    places, but they mostly had me hold on to heat sinks and make RS–XXX cables while
    they chain smoked, muttered fresh obscenities, and squinted through reading glasses
    while soldering.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: And by the time you graduated high school, you were in business
    with your father servicing mainframes. How did all that sit with your education
    commitments?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Yes, when I was about 18, we were taking vacations in Moab,
    Utah. But, like a lot of places where you''d go for a vacation, there was no work.
    In our case, that meant that there were no computer services or consulting companies
    or anything like that. So, my dad and I started a small computer consulting company.
    We went out to businesses, government and schools, and we built computers! It
    was just becoming possible back then to build cloned computers for the first time,
    and so we went right ahead and manufactured our own computers. And we serviced
    them, right along with any mainframes and minis that needed servicing in the area.
    I also picked up some work with a company that had a contract with the state.
    I had a pager, and when they gave me a call, I would go fix the mainframes and
    Wang OIS systems.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A few years later, my CS professor asked me how much I made in those years;
    I told him it was anywhere between $35,000 to $40,000, which was pretty good in
    the 1980s. My professor then grabbed me by the arm and said, "Leave and get out!"
    When I asked him why, he said something important to me:'
  prefs: []
  type: TYPE_NORMAL
- en: '"I''m not saying this because you''re a bad student, Kevin, you''re an exemplary
    student. And I''m not saying this because you''re asking a lot of questions about
    who is going to manage all these people we are teaching. I''m saying this to you,
    Kevin, because you''re right: somebody needs to go and write this curriculum.
    But to do that, they have to do it from empirical experience. Somehow, Kevin,
    you have to work your way through these organizations and write your learnings."'
  prefs: []
  type: TYPE_NORMAL
- en: And while I didn't set out with that purpose, I did drop out—and I've taken
    the exact path that my CS professor advised!
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: What did you do right after dropping out of college?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Over the next several years, I held every job in an IT operation.
    I got to know what it''s like to be a network engineer, and what it''s like to
    be a system administrator, and what it''s like to be the lowly guy who checks
    the disk array fault lights, the fans, and the filters on the air-conditioning.
    From rotating the backup tapes to programming firewalls. I did all those jobs.'
  prefs: []
  type: TYPE_NORMAL
- en: I also went to school to develop software. I'm a lazy and slow developer, but
    I made sure that I understood *everything*, from the bottom of the stack to the
    top of the stack. I started with the B language as we used to joke—as in assembler—which
    means staring at a lot of binary, which is hard for us dyslexics.
  prefs: []
  type: TYPE_NORMAL
- en: I found during this period that the more I worked, the more disillusioned and
    confused I became about the folks who were managing the technology. It seemed
    like companies were just promoting technical people who had been there for a while
    up into management positions. In many cases, those people were not very good at
    what they were doing. They were not trained to do those things, and they often
    didn't want to be managing those things.
  prefs: []
  type: TYPE_NORMAL
- en: '"The more I worked, the more disillusioned and confused I became about the
    folks who were managing the technology."'
  prefs: []
  type: TYPE_NORMAL
- en: —Kevin Behr
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: But if you want a raise in your salary, then you need to
    become a manager. It''s like for a long time you might want to continue being
    a coder but then, five years later, you need more money, so you think about becoming
    a manager.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: But back then, there was literally no help or support for the
    people going into technical management positions. There was nobody to mentor these
    technology managers, nobody to answer their questions, and there was no documentation
    for them to read. There just wasn''t anything for them at all, and I found this
    very strange, especially when you reflect for a moment on how much emphasis there
    is around most executive positions to prove competency, education, and experience;
    and to provide training and documentation to ensure professional standards.'
  prefs: []
  type: TYPE_NORMAL
- en: This was very strange, and it affected my view of CIOs profoundly, because I
    didn't see CIOs making any decisions on their own. I stopped seeing it as an equal
    partnership between CEO and CIO as the parents of a company. The CIO job looked
    more like a babysitter than a parent.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: That''s a great way to describe it.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: In my view, the CIO wasn''t a peer with a real position in
    most companies during the 1980s and 1990s. The CIO essentially worked for everybody
    else.'
  prefs: []
  type: TYPE_NORMAL
- en: The management of information systems during the early 1980s involved a lot
    of finance people, and, of course, technology originally came into businesses
    through finance—to help them calculate numbers and construct books and records.
    The first computer from IBM was a time clock that was designed to track people's
    working hours. Technology solutions had always had the backing of finance groups.
  prefs: []
  type: TYPE_NORMAL
- en: It was therefore very interesting and very curious when finance proceeded in
    the 1980s and 1990s to kick technology out of finance! I remember seeing this
    happening when the PC first came out. At that time, I was a mainframe guy, so
    was biased, but, like a lot of people at IBM back then, I believed that desktop
    PCs were just business cards for the mainframes. So, I just sat in front of them
    every day. Computer. IBM. Computer. IBM. I didn't believe that PCs would amount
    to much.
  prefs: []
  type: TYPE_NORMAL
- en: Then, suddenly, we had client-server computing in the 1980s and 1990s. As far
    as I'm concerned, client-server destroyed computing and set us back 40 years.
    The issue with client-server was that we already had all those capabilities in
    mainframes, but they worked better, faster and were actually less expensive by
    the time you counted all the people, weird contractors, and vendors that you would
    need. But finance made the mistake of only looking at the purchase price of the
    computer.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: You could say that finance became its own worst enemy. But
    a mainframe cost a lot more than a PC, so the client-server idea must have been
    very attractive?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Yes, sure, but then there was another false assumption: that
    you could run the PC all by yourself because... it''s personal. The reality is
    that when you have 100,000 personal computers, it is not personal anymore. You
    then need to manage all those PCs, and they are all distributed!'
  prefs: []
  type: TYPE_NORMAL
- en: So, I kept seeing this disconnect between technology and organizations, and
    the disconnect between CIOs and CEOs, become greater and greater. It was not until
    some years later, through the 2000s and 2010s, that DevOps was working to heal
    this disconnect.
  prefs: []
  type: TYPE_NORMAL
- en: Bridging the CEO–CTO gap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: It''s interesting how those first phases of your career
    related to a history before DevOps, including those tensions and disconnects you
    talk about that DevOps tries to address of course. Did your next career step,
    as CTO at IP Services, take you closer to DevOps as we talk about it today?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Yes, in the 2000s, I was the CTO at a company called IP Services,
    which could best be described as an early MSP and outsourcer for infrastructure.
    It provided mission-critical infrastructure for large fortune and global 500 companies.
    While I was at IP Services, we had to develop ways to manage across various systems
    of control, because we would have auditors from every client wanting to come in
    and inspect our operations.'
  prefs: []
  type: TYPE_NORMAL
- en: At this time, I started collaborating and working with Gene Kim, another kindred
    DevOps mind. We were both CTOs reporting to a CEO, and we both experienced a very
    specific process of adopting and adapting our thinking to meet the challenges
    in our work.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Did this experience help the disconnect you mentioned earlier,
    between CTOs and CEOs in organizations?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Yes, we noticed how CEOs often describe things with word pictures,
    using primary colors, and numbers from 0 to 9\. On the face of it, this CEO language
    can feel super-reductive and oversimplified, and that''s certainly how it would
    sometimes feel for Gene and myself, because we were both engineers at heart. And
    the point here is that, as CTOs, it took a *lot of work* for us to learn this
    CEO language and its associated CEO mental frameworks. But that''s what it takes
    sometimes.'
  prefs: []
  type: TYPE_NORMAL
- en: I also remember Gene and I agreeing how humor can help heal a disconnect. Gene
    found this great book called *Throwing the Elephant*, by Stanley Bing, and together
    we began to appreciate how Bing discussed "managing up" in a tongue-in-cheek way,
    like humor, from a Zen perspective.
  prefs: []
  type: TYPE_NORMAL
- en: Listening and finding common links with other people was another important lesson
    for us during that time. Gene and I would often meet at a restaurant/bar called
    Pazos in Portland, Oregon, where we would each describe common scenarios about
    our respective executives and clients. We found that we had a lot of passion and
    many common questions about our industry.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Such as?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Well, we might say "How come Client A has all of these problems?"
    They have the same amount of money, and a lot of the same talent as Client B;
    and yet here we are, with Client B doing so much better. Why?'
  prefs: []
  type: TYPE_NORMAL
- en: Gene and I were very passionate about these types of questions, and we convinced
    our bosses to let us put our pith helmets on. As Gene used to like to say, we
    were like old explorers cataloging plants and animals for the first time. Our
    world was business of course, and so we would study high-performing companies
    to see what they did differently.
  prefs: []
  type: TYPE_NORMAL
- en: We shared a lot of what we learned at the first *Security and Audit Controls
    That Work* workshop in 2003 that Gene and Stephen Northcutt chaired, and I gave
    the talk *Blood, Sweat and Visible Ops*, which was later memorialized in a book
    with Gene Kim and George Spafford called *Visible Ops*, which came out in late
    2004.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Why did you decide to use ITIL in your *Visible Ops* book?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: We decided to use the language of ITIL because ITIL was a standard
    process language that a lot of people understood. We''d also mapped into ITIL
    all the actions that we''d been watching those different companies doing.'
  prefs: []
  type: TYPE_NORMAL
- en: Our objective was to be able to compare the patterns of activity between successful
    and less successful companies using ITIL. What we discovered was that a lot of
    companies were doing things completely differently from the others—most critically,
    around how they managed risk and change. The more successful companies usually
    had the most effective change management processes.
  prefs: []
  type: TYPE_NORMAL
- en: A great example of the positive effect of good change management was at a client
    where we went in to change what was called a WAR, a work authorization request.
    The management of this client didn't like change because it was dangerous—and
    they happened to run one of the largest financial institutions. But the funny
    thing was that this client made way more changes than low-performing clients,
    and I was like wow! Their risk surface was much greater, and yet, they had almost
    no failed changes. Or, if they did, they were reversed very quickly and there
    was almost no impact to production.
  prefs: []
  type: TYPE_NORMAL
- en: We saw such high-performing clients as this one, and we saw low-performing clients,
    where both would be similarly skilled, and have similar budgets. The ITIL analysis
    showed that the key difference was the way that different clients were managing
    the change process that was integrated with release and incident processes. It
    turned out that 80% of failures were caused by things people did, and so the incidents
    are the results, and the changes are what we intended. We therefore started measuring
    things such as change success rate, and how do you know your process works? Is
    it successful?
  prefs: []
  type: TYPE_NORMAL
- en: But one of the things that we found about high performers is that they tended
    to have fewer controls than low performers. That was a big surprise. We were like
    "Hey! Wait a minute here!"
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Do you mean less control over people?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: No, it was all about fewer process controls, such as from a
    management intersection or audit standpoint. So, we''re there thinking our client
    has like 15 controls in here, while the other client has almost 40 from COBIT.
    And I''m like... this doesn''t make any sense at all!'
  prefs: []
  type: TYPE_NORMAL
- en: 'As we looked harder at this, we saw that the people with fewer controls were
    building purpose-built processes: they knew what their process had to do and where
    the risks really were. Meanwhile, low performers were reading best practices and
    they thought more controls were better for the auditors. And the lower performers
    treated every change the same way: they''d get a bunch of people in the room,
    and they''d talk about it, but that didn''t make the outcome any more reliable.'
  prefs: []
  type: TYPE_NORMAL
- en: The high performers were seeing changes as releases. They were looking at their
    whole infrastructure as if it were a platform; and as though they were releasing
    a new piece to this platform. They were looking at everything more holistically,
    and so they would track the interdependencies. They were doing a lot of things
    that were really and simply just in the change process, the incident management
    process, the release process. They had these processes integrated in such a way
    where you knew the outcomes of every step, and it was all very tightly integrated.
  prefs: []
  type: TYPE_NORMAL
- en: '"[The high performers] were looking at everything more holistically, and so
    they would track the interdependencies. [...] They had these processes integrated
    in such a way where you knew the outcomes of every step, and it was all very tightly
    integrated."'
  prefs: []
  type: TYPE_NORMAL
- en: —Kevin Behr
  prefs: []
  type: TYPE_NORMAL
- en: So, let's say you had an incident. You could see the last problem that somebody
    had on the ticket, and you could see the last change that was made on the ticket
    because 80% of the outages were caused by changes. But, 80% of the time it took
    to solve a problem was spent just figuring out what had changed, with the other
    20% used to do the work to actually fix it. What we discovered was that a lot
    of these high performers were eliminating change as a causal factor in the first
    minutes of the problem, giving them a much higher chance of a very, very low mean
    time to restore service and have a better shot at staying within their SLO error
    budgets.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: And so, you discovered a first DevOps pattern?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: That''s right! What distinguished high-performing clients wasn''t
    anything to do with them having fewer failures in those scenarios. We discovered
    that it is what companies do with their failures that tests their organizational
    resilience; and, more importantly, how resilient they really are in small teams.'
  prefs: []
  type: TYPE_NORMAL
- en: Making it safe to fail
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So now, we started to notice these DevOps patterns in our studies, for example,
    where people were willing to focus on learning together versus blaming and co-designing
    resilience. Designing systems that are safe to fail is borrowing thinking from
    flight simulators. The average learner needs to crash several planes in the simulator
    before flying in real life. The point is to decouple deployment from activation
    so that we can learn for free without affecting our customers' experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you look at continuous deployment and continuous delivery, we''re putting
    code out there faster. In some cases, code is on a unit test, and then committed,
    and then through static code analysis, integration tests, fast regression stack
    and—Bam! Production! Well, why do we do that? Because we know that we have options:
    blue green deployments, dark deployments, feature toggles, flags, and switches.
    So, we can turn something off in production if it causes a problem by itself,
    and effectively flip it back to the way it was. Many have adopted blue/green deployments,
    which let the teams run the old system at the same time as the new system from
    the same database. They don''t cut over to the new system until it''s working
    and there''s zero downtime.'
  prefs: []
  type: TYPE_NORMAL
- en: With these new patterns, ideas can arise for engineers to fail safely. That's
    quite the opposite to what the industry had always said before, which was that
    we must rely on fortification, such as redundant data centers. Sure, all the metal,
    namely the big servers, can make us feel good, because everything's fault tolerant.
    But the DevOps generation says that it's all going to fail. So instead, give me
    a resilient and safe-to-fail system so we can move at will, break things, and
    learn fast!
  prefs: []
  type: TYPE_NORMAL
- en: '"Give me a resilient and safe-to-fail system so we can move at will, break
    things, and learn fast!"'
  prefs: []
  type: TYPE_NORMAL
- en: — Kevin Behr
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Saying that everything fails sooner or later is admitting
    the truth!'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Right, so what do you do when it fails? How fast can you make
    it invisible? So that it doesn''t matter. Because Cobb''s thinking, along with
    DevOps, starts to make a different set of possibilities appear!'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Are you saying that DevOps patterns are the heart of DevOps?'
  prefs: []
  type: TYPE_NORMAL
- en: The heart of DevOps is democratizing the work
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kevin Behr**: While those DevOps patterns are vital to DevOps, what I *really*
    believe to be the heart of DevOps, and what I think we''ve lost touch with today,
    is what, in the 1940s and 1950s, was a movement and a discipline called STS, or
    socio-technical systems.'
  prefs: []
  type: TYPE_NORMAL
- en: Social-technical systems started with some sociologists, and it was one of the
    big-funded projects immediately post World War II. I do actually give a talk about
    STS, called *DevOps and Its Roots in Coal Mining*. It's kind of a joke, but one
    of the big things that they had to do after World War II was figure out how to
    make more coal to help power the war recovery. There was a conflict because all
    the coal companies wanted to keep the price of coal high, while the British government
    wanted lower coal prices so that coal and oil could power post-war reconstruction.
    It was in the national interest to get as much out of the mines as possible.
  prefs: []
  type: TYPE_NORMAL
- en: To help achieve this, the British government hired two sociologists, Eric Trist
    and Elliott Jacques, to look at all the mines and figure out which ones were the
    most productive and what made them more productive. Trist and Jacques discovered
    that all the low-productivity mines were highly automated, and that automation
    didn't create the expected returns on productivity. Across many different styles
    of mines, they found one mine design that really stood out, because it put out
    more coal per day than any other design—by many multiples. This most highly productive
    mine design also had fewer significant injuries than any other mine type, and
    had iron-clad, strong team morale!
  prefs: []
  type: TYPE_NORMAL
- en: Trist and Jacques also found that this productive type of mine had 100% attendance,
    and people were coming in every day. And that was odd, because for most mines,
    30% of the workforce wouldn't show up on any working day, because coal mining
    was dangerous and there were a lot of other jobs available most days in post-war
    Britain.
  prefs: []
  type: TYPE_NORMAL
- en: 'To find out why this highly productive mine had 100% attendance, Trist and
    Jacques talked to the people after their shifts, but they still couldn''t find
    anything different. So, they went down the mine themselves with the coal miners.
    At the top, the shift leader would meet all the coal miners to talk about everything
    they were supposed to do. But then, as they were down in the mine with the miners,
    Trist and Jacques immediately noticed something different: the group democratized
    the work.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Okay. That''s a twist.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: What the miners were concerned with was: "What is the whole
    task?" Not what is the thing I''m supposed to do, and the thing you''re supposed
    to do... but what is the whole thing that we''re supposed to get done?'
  prefs: []
  type: TYPE_NORMAL
- en: In one particular case, this might mean saying that we're going to need somebody
    to do the dynamite, or that we've got to blow up some holes here, and we need
    a safety person to make sure everything goes okay; or that we're going to need
    someone to do the jackhammer. They all had these different roles, and so their
    conversations sounded something like, "Hey, who didn't drink last night? You?
    No? Okay, you're doing explosives today."
  prefs: []
  type: TYPE_NORMAL
- en: Through this dialog, they would figure out how to divide the whole task into
    role-based work. They became self-organized and self-regulating based on who was
    the most capable person on the day to perform each important role.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, another priority they had was to teach each other enough about
    each other's job so that if they got hurt in an accident, the team could pick
    up and still do what it needed to do to save everybody. So, they all learned a
    little bit of each other's job, enough to where they could do it. My question
    to you, Viktor, is, are you seeing the piece of modern DevOps here?
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: You''re talking about self-sufficient teams?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Yes, and you know what? They did it! The funny thing is that
    their bosses never knew the difference, because their bosses were above ground
    where it was safe; they would never come down into the actual mines. So, when
    the miners knew what the whole task was, they literally self-organized based on
    capability. Like actual democratization of work.'
  prefs: []
  type: TYPE_NORMAL
- en: But it wasn't only that; they were also cross-training each other. Are you familiar
    with the Pareto principle?
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Yes, it''s the 80/20 rule to most of us.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Now, the *inverse* Pareto principle is very powerful. It says
    that there''s 20% of something you can learn that will allow you to do close to
    80% of the task. The inverse Pareto principle often works both ways, and so, what
    these coal miners were doing, I theorize, is that they were learning the inverse
    Pareto of each other''s jobs. And that is what DevOps is!'
  prefs: []
  type: TYPE_NORMAL
- en: We talk about people who are full-stack, but very rarely are we going to find
    someone who could actually do everybody's job. So, why not spread that out? What's
    really there isn't the tools or the technologies that they use, but the way they
    decide to interact around the day's work.
  prefs: []
  type: TYPE_NORMAL
- en: '"DevOps is [...] helping each other understand enough of each other''s work,
    so that we can think about what''s next."'
  prefs: []
  type: TYPE_NORMAL
- en: — Kevin Behr
  prefs: []
  type: TYPE_NORMAL
- en: I listened to Patrick Dubois give a talk about his work on a contract, I believe
    it was with a government agency, and he developed a piece of code that he needed
    to get into production. He talked about how hard that was. There was a small job
    to do, but the operations people made it so hard, and Patrick was saying "Why
    can't we work together?" And so, to me, that's what DevOps is.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps is working across those lines, helping each other understand enough of
    each other's work, so that we can think about what's next. But the key word is
    empathy. Caring across boundaries.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: You''re not the first person in this book I''ve talked to
    who has said that empathy is so important to DevOps.'
  prefs: []
  type: TYPE_NORMAL
- en: Empathy and culture in an organization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Kevin Behr**: What do we mean when we talk about empathy in DevOps? We''re
    saying that we understand what it feels like to do what you''re doing and that
    I''ll never do that to you again. So, let''s build a system together that will
    allow us to never be there.'
  prefs: []
  type: TYPE_NORMAL
- en: 'DevOps to me has evolved into a lot of tools because we''re humans, and humans
    love tools of all kinds. As a species, we''ve defined ourselves by our tools and
    technologies. And, as a species, we also talk about culture a lot, but, to my
    mind, culture is a rearview mirror. Culture is just all the things that we''ve
    done: our organizational disposition.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The way to change culture is to do things differently. Let''s not wait for
    culture, because culture is in the rearview mirror: it''s the past. If you''re
    in a transition, then what are you transitioning toward and what does that mean
    about how you need to act?'
  prefs: []
  type: TYPE_NORMAL
- en: 'The very interesting thing about DevOps is that while frequently, its mission
    is to create a change in the culture of an organization, this change requires
    far more than coordination: it also requires pure collaboration, and co-laboring.
    These can be particularly awkward to achieve given the likelihood that we haven''t
    worked with the people in an organization before. And it can become intensely
    awkward, when those people may have already made villains out of each other because
    they couldn''t get what they wanted. The goal of the DevOps process is to create
    a new culture, despite these challenges.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Yes, part of the DevOps puzzle is how we can achieve pure
    collaboration in the middle of very awkward situations, with people we don''t
    know very well.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: What people don''t understand is that DevOps is hard. Working
    across those lines is hard. We don''t have to do DevOps, it''s optional—and so
    doing DevOps is hard. But changing culture means changing the way we do things
    in organizations. If we keep doing things differently, then we''ll look back and
    we''ll see that our culture has changed.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Exactly, but these things also take some time.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Yes, if we do things differently for two weeks and we then
    look back and conclude that this didn''t change our culture, the issue is certainly
    that people didn''t understand the relationship between what they''ve always done
    versus what they''re doing now. DevOps empathy enables cultural change because
    it enables behavioral change.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: And DevOps also enables collaboration.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Yes, collaboration is beneficial to both parties. From a game
    theory perspective: if I maximize my utility, then you do too. But also, from
    the non-rational and relational standpoint of human beings, there is the benefit
    of building strength through diversity. When we look at technology teams, we can
    tell from a DevOps standpoint whether they''re together, as a team, or apart.'
  prefs: []
  type: TYPE_NORMAL
- en: '"The goal of the DevOps process is to create a new culture. [...] But changing
    culture means changing the way we do things in organizations. If we keep doing
    things differently, then we''ll look back and we''ll see that our culture has changed."'
  prefs: []
  type: TYPE_NORMAL
- en: — Kevin Behr
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Are most technology teams you see together or apart?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: In America, many large enterprise companies have adopted DevOps,
    but what we tend to encounter there in reality are "special teams" within those
    organizations; or technology groups that are "paramilitary organizations" as it
    were. These types of technology groups don''t have to follow the same rules as
    everybody else, and so they tend to be successful in their short term because
    they have fewer constraints. And, of course, we can make pilots for them that
    have low bars; and can set very easy things for these teams to jump over.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I''ve talked to a lot of CIOs and enterprises, and they love this idea of DevOps
    having agile infrastructure, and agility all the way through their value stream.
    The main issue is that those CIOs just don''t know how to manage DevOps. Do I
    have teams? Do I have a VP? My response is always the same, and I say, "Listen,
    I think of DevOps more like this: you can now have teams working on projects together."'
  prefs: []
  type: TYPE_NORMAL
- en: But consider volunteer fire departments. Do you have those in Spain?
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I know they exist.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: So, in America, some towns can''t afford to professionally
    pay for firemen, and so they have volunteers that all wear radios. If there''s
    a fire, they''ll all get a signal on the radio that''s very loud, and they''ll
    go driving like crazy to the fire station, get in the trucks, and go out and deal
    with the fire.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is called a crew, and in a crew, there''s a very important set of understandings.
    The first is that these people have a day job, and so one minute they might be
    doing some accounting, but in the next minute, if they get the signal, then they
    run: now they''re a firefighter. The second understanding is that when they are
    being a firefighter, perhaps on their way to a fire, they already know what to
    do; they are pre-trained. Much like the scenario with the miners, when they need
    to be firefighters, they already know their roles and responsibilities.'
  prefs: []
  type: TYPE_NORMAL
- en: My point here is that many of the successful DevOps interactions I see also
    involve a crew that assembles. There's some infrastructure, some developers, and
    some security people, who all get on the team; they know their roles, and they
    know the mission. They get it done. Bam!
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: And then you want to start spreading the success of that
    team!'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Yes! Every five times that the team is together, you should
    add another crew. They won''t be great at the start, but they''ll be learning.'
  prefs: []
  type: TYPE_NORMAL
- en: The broad idea here is to create a playbook of signals so that we can let an
    organization know when collaboration is important. Of course, it takes some level
    of ability to make sense out of what's happening around you. This means that,
    as engineers, we sometimes have to look up from the keyboard, or take off our
    headphones, and notice what's actually happening.
  prefs: []
  type: TYPE_NORMAL
- en: '"As engineers, we sometimes have to look up from the keyboard, or take off
    our headphones, and notice what''s actually happening."'
  prefs: []
  type: TYPE_NORMAL
- en: — Kevin Behr
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: You believe that DevOps has a social component then?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Yes, the idea with socio-technical systems is that people come
    before the technology; and that the technology serves the people. This is in contrast
    with when we talk about techno-socio, which means the machines dictate how we
    organize, how we work, and how we even lay out the *way* we work.'
  prefs: []
  type: TYPE_NORMAL
- en: 'What I observe is that DevOps has its roots in socio-technical empathy. This
    comes from individuals such as Patrick Dubois saying: "Why can''t we work together?"
    Likewise, individuals such as Andrew Clay Shafer, who suggests that all our infrastructure
    should be agile, and essentially code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I remain close to Andrew, and I talked briefly to Patrick on Twitter quite
    a while ago. To me, their work is certainly part of a socio-technical system:
    where people work together and share. We''re going to automate stuff on the machines,
    so we have more time to experiment, learn and collaborate on the important things.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: In that sense, tools have an important place in your idea
    that DevOps helps to create a socio-technical system?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Yes, it''s obvious how important tools have now become in DevOps,
    and the reason for this is because people are learning how to perform many of
    the techniques that DevOps people tend to like to do—from continuous delivery,
    continuous integration, continuous deployment, or automated testing. In many cases,
    we''ve now got tools in front of people.'
  prefs: []
  type: TYPE_NORMAL
- en: So today, when you see people talking about how to do DevOps, the first thing
    that they mention is a toolchain; and I'm saying to myself, "So now you're organizing
    your team around the tools?" This doesn't seem right.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Is that *the* fundamental misunderstanding of what DevOps
    is about?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Yes, it''s like the difference between Brandy and Courvoisier.
    All Courvoisiers are Brandies, but not all Brandies are Courvoisier.'
  prefs: []
  type: TYPE_NORMAL
- en: You can be working with some teams, across boundaries, on a very technical project.
    And everyone may even be collaborating in a DevOps style. But the teams are usually
    too focused on the tooling, and the tooling is dictating how the teams are working
    together. The tooling may even start to create divides.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, when I'm working with an organization, I talk about archetypes, or
    stereotypes. When I do this, I use the Winnie the Pooh story. I believe that all
    of Christopher Robin's friends... Pooh Bear, Rabbit, Tigger, all of them, are
    different manifestations of Christopher Robin himself. It's kind of an interesting
    way of exploring different parts of Christopher Robin's personality. And then
    I like to say that product managers are like Tigger because they're very excited
    about the thing I'm going to do. The developers are more like Rabbit, while the
    infrastructure people are like Eeyore, because they walk around saying "thanks
    for noticing me." My point is that teams are a mixture of different personalities.
  prefs: []
  type: TYPE_NORMAL
- en: In most teams, you've got a group of people who are very excited about new things,
    and a group who are not so excited, because all those new things seem to hurt
    them. For example, people in operations are often very skeptical, because they've
    been told a lot of things about how great everything is going to be, and yet they
    get pager calls at 02:30 in the morning to fix something they just deployed. Naturally,
    operations people tend to develop skepticism over time.
  prefs: []
  type: TYPE_NORMAL
- en: When you manage to introduce empathy to a team, the development and the operations
    people seem finally to come together. You suddenly hear someone in operations
    say, "Oh, can we do that differently? When you threw that thing at me last time,
    it gave me a black eye and I had to stay up for four days straight!" And the developer
    is like, "It did? How did it do that? Next time, if something happens, please
    call me, I want to come help." That empathy of figuring out what went wrong, and
    working together, is what builds trust.
  prefs: []
  type: TYPE_NORMAL
- en: Trust is key to successful DevOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: So trust is key to your vision of successful DevOps teams?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Yes, trust is vital. I''m convinced, for example, that the
    US military operates on the principle that you will move at the speed of your
    collective trust. You''ll see this same principle at work within your company
    or in your own team. When you''re frustrated that you can''t get things done,
    you should immediately assess the level of trust around you. Ask yourself, "Are
    things transactional here?" For example, if you place an order, do I then give
    you a plate? Or do we have a relationship, and do we have trust?'
  prefs: []
  type: TYPE_NORMAL
- en: '"That empathy of figuring out what went wrong, and working together, is what
    builds trust."'
  prefs: []
  type: TYPE_NORMAL
- en: — Kevin Behr
  prefs: []
  type: TYPE_NORMAL
- en: 'I have a story I use to explore trust. I read an article where there was a
    conversation between a US General, who was in a foreign country, and a General
    from that poorer country. The General from the poorer country says to the US General,
    "You''re not a very good General!" The US General is curious to know why he''s
    not a very good General, and the conversation went something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**US General:** *"Why don''t you think I''m a very good General?"*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Second General:** *"Because when you hand your soldiers weapons, you know
    that they''re not going to shoot at you."*'
  prefs: []
  type: TYPE_NORMAL
- en: '**US General:** *"Yes, we build, and have trust."*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Second General:** *"And when you give people 30 tanks, they''re not going
    to sell them on eBay."*'
  prefs: []
  type: TYPE_NORMAL
- en: '**US General:** *"Yes. We have trust."*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Second General:** *"So, you don''t have to do very much—and so you must not
    be very good at this!"*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I love that!'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: But then you know what the General said? He said, "*I guess
    you''re right!*" So now, the US military operates on a different principle: mission
    command. It''s no longer command-and-control at every layer. With mission command,
    the leaders state what they want the outcome to be, but not how we can do it.
    The leaders define signs of success and failure, and then they get their people
    to back-brief them, so that they all stay in sync.'
  prefs: []
  type: TYPE_NORMAL
- en: Staying in sync is vital of course, because when the situation changes on the
    ground, the plan isn't necessarily going to stay the same. The team are able to
    improvise because they understand the intent of the commander, so they can find
    new ways of fulfilling that goal.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: That''s brilliant.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Right, and so when we use an intent style of management, it
    allows DevOps teams to figure out how to do things themselves; and they know better,
    because they''re closer to the work and they are guided by the intent and signs
    of success and failure.'
  prefs: []
  type: TYPE_NORMAL
- en: With an intent style of management, we're also doing something that Reed Hastings,
    CEO of Netflix, talks about, which is developing team judgment. We're not just
    telling the team to go here or there and then just having them check to see whether
    they've arrived. Teams don't learn anything that way; they tend to just stop while
    people are shooting at them or until their leader tells them to move.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: There''s a lot of pressure for teams to be efficient, of
    course. Managers want certainty, but we know from the military battlefield that
    the best plans will not always go as expected. Mission command does fix uncertainty.
    It''s a way to try to deal with it, right?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Yes, what the managers want to know is exactly when the plan
    is going to work! In organizations where we have resilience-based engineering,
    the expectations are, of course, that things *will* break. The first step is to
    acknowledge that things break, and the second step is to recognize that it''s
    very important how we deal with things when they do break—both during, and afterward.'
  prefs: []
  type: TYPE_NORMAL
- en: First then, how do we solve the problem in front of us? Then, as we fix what
    is broken, we regain our morale and our strength. Sometimes, this involves taking
    a couple of days off after we've been up awake for two nights straight.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is, how do we get our passion back? We need to apply that passion
    to make sure these things never happen. It's a constant process of celebration,
    defeat, victory, celebration, and defeat.
  prefs: []
  type: TYPE_NORMAL
- en: In the United States, this process tends to create a lot of burnout. We have
    a lot of pressure put on people, and they work a lot of hours that they shouldn't
    need to work. Technology jobs are not only difficult technically, they're also
    a difficult lifestyle. If you are alone and isolated in a hard job, and you don't
    have people to collaborate with, and you have impossible deadlines, and unreasonable
    coworkers, then you're going to be depressed. You're not going to do your best
    work, and you're going to leave the company... which leads to even bigger issues,
    because we all know that software developers and good infrastructure people are
    hard to find.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Those people can find another job in a week, so they will
    leave.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: I try to explain this to company leaders, and they''re like:
    "Well, we''re going to cut costs." But there are a lot of ways you can cut costs;
    the first thing is to become more effective, because only then you can become
    truly efficient. If you''re trying to be efficient before you''re effective, then,
    in the long run, it will always cost more.'
  prefs: []
  type: TYPE_NORMAL
- en: It doesn't have to be this way. I have found that when these teams begin to
    work together, and as people get drawn into new levels of collaboration and coordination,
    those people who were alone, those people who were depressed, and those people
    who have been working too hard, they get empathy from the people around them.
    Suddenly you start to hear things like, "Oh, I know what that feels like," and
    "Oh, I know that woman, and the next time that happens to her like that, maybe
    we'll go get a coffee together so we can encourage her to keep at it."
  prefs: []
  type: TYPE_NORMAL
- en: '"...as people get drawn into new levels of collaboration and coordination,
    those people who were alone, those people who were depressed, and those people
    who have been working too hard, they get empathy from the people around them."'
  prefs: []
  type: TYPE_NORMAL
- en: —Kevin Behr
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: When I was a developer, I don''t think I ever even met an
    infrastructure person. How could I have ever possibly developed an empathy with
    someone when I wasn''t even sure that person existed? For all I knew, there could
    just have been a script running that was making me wait for a long time!'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: A human "for-next" loop!'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Yes, because for all I knew, I''ve never met an infrastructure
    person.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: That''s such a good point, because if we don''t even get to
    meet someone, how can we build empathy? And it''s not enough to only meet people
    during problem situations, or on conference firefighting calls, because those
    are not the places to build empathy.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I''ve met some people only when they yell at me.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Yes, which creates negative reinforcement and deprecates social
    capital. One of the first and most important things you do with a new situation
    is ask your key vendors to support company social events for the teams. You''d
    be surprised; a lot of teams want to engage. Organizations can find creative ways
    to get people together.'
  prefs: []
  type: TYPE_NORMAL
- en: Earning the right to be heard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One very subversive way to get people together is to start a Lean Coffee approach
    to meetings. If you can convince a grumpy Eeyore to come to your Lean Coffee meeting
    and you just ask and listen, then you're already creating change. The change issue
    you're solving when you do this is that people want to be heard and they want
    to feel some interest or empathy from other people before they want to listen.
    But it's important, during change, to earn the right to be heard among each other—by
    first listening.
  prefs: []
  type: TYPE_NORMAL
- en: '"It''s important, during change, to earn the right to be heard among each other—by
    first listening."'
  prefs: []
  type: TYPE_NORMAL
- en: —Kevin Behr
  prefs: []
  type: TYPE_NORMAL
- en: If somebody who has dealt with the operations and infrastructure side can come
    to the Lean Coffee, then everyone can listen to what that operations person is
    saying. People in both the development and the operations groups are likely to
    be cynical at first. To make progress, somebody must be able to start trusting.
    Team members must trust at first, and listen, and listen, and continue to listen.
    People need to remove their filters, and they will find it helpful to imagine
    that the other person has positive intent in what they're saying, even though
    it may not sound like it at first. This is something many have been able to do
    in Lean Coffees. You put all your topics out, and you vote on the topics. If we
    have a new member, I have a bias to make sure new members talk and get it.
  prefs: []
  type: TYPE_NORMAL
- en: 'If it''s your first time on a Lean Coffee, you get to talk about what you want,
    and everyone will listen. I think when people feel heard, they are usually more
    apt to listen to you. Honestly, have you ever noticed how much people talk over
    each other? We''re so busy trying to show each other that we know what we''re
    all talking about and that we''re smart that we often missing the point. I see
    that creep into a lot of things. So yes, you''re right, Viktor: getting together
    when you''re not having a problem is massively important.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: How else can we help people collaborate?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: I like to use Toyota Kata to help people learn how to collaborate.
    Toyota Kata was first established in 2009 by Mike Rother. It''s a simple way to
    improve a problem situation, and it gives us a scientific method to do this.'
  prefs: []
  type: TYPE_NORMAL
- en: You begin the Toyota Kata method by defining a target condition, something that
    should be in good order to have an optimum or positive result. Only then do you
    look at the actual condition you're starting with.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you say: "If we are going to solve this problem, what''s the first obstacle
    we''re going to run into when we try to achieve the target condition?" You make
    a small list, and then you think about the people that are involved in that problem.'
  prefs: []
  type: TYPE_NORMAL
- en: What I'll often do then is bring some infrastructure people and some software
    developers together, and we'll give them a common problem. We'll ask them to use
    Kata together to solve the problem. They will then run experiments together, and
    typically the first one won't go so great; the second one–hmm; and the third one—no
    fights.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Nobody''s hurt.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Correct! They start solving some problems together, and they
    start to appreciate each other''s abilities to solve problems. The operations
    and development teams may speak different languages to each other, but what I
    found is that Kata standardizes the language and the patterns around the problem.
    This allows the operations and development teams to enter a collaborative problem
    solving sequence, because the language barrier is smaller.'
  prefs: []
  type: TYPE_NORMAL
- en: The Improvement Kata is a great way to teach infrastructure people about Agile
    and Lean. I once ran an Improvement Kata with a group of product managers and
    software developers. The problem was that the product managers were just making
    up things for dates. This had led the developers to think "This has to be done
    here, and that has to be done there." Then on the other side, the product managers
    thought the developers were overestimating everything to build themselves safety—which
    is a pretty common problem.
  prefs: []
  type: TYPE_NORMAL
- en: While I was working with that group, I said to them, "Your goal is that you
    want a measurable target condition. You want an average cycle time for a story,
    and your average story is one day size." I then said, "You want your cycle time
    for these sprints to go down by 20 percent." The infrastructure people said things
    such as, "So what does that have to do with us?" Meanwhile, the product managers
    said, "How can we improve? That's up to them!" And the developers replied, "You
    set the deadlines!"
  prefs: []
  type: TYPE_NORMAL
- en: So, the team went immediately into conflict. But I told them that none of that
    was important right at that moment, because the reality was that both teams contributed
    to hitting the target condition. So, using the Improvement Kata, we looked at
    obstacle one; what is it, and what's the first thing we're going to run into?
  prefs: []
  type: TYPE_NORMAL
- en: Engineers are usually awesome at finding problems, because they tell you all
    the problems you're going to have; and so, once you get them focused on the problem,
    they will obliterate it. If engineers have got a problem in their head, they take
    it home, and they can't stop thinking about it; they can't let go of it until
    they crush it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: That''s something I agree with from my own experience as
    an engineer.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Once engineers have put their heads into an issue, they come
    back with an idea, and then we want to tell somebody. But while a lot of that
    is about personalities, and perhaps who is most outgoing, it''s also about making
    space for the person who is quiet, so that they can say what they need to say.'
  prefs: []
  type: TYPE_NORMAL
- en: In the situation I just mentioned with the product managers and developers,
    a product manager finally came back and said, "Listen, I realize that what we've
    been doing is asking you to estimate something, and then turning your estimate
    into a commitment, which isn't fair because I don't like it when people do that
    to me."
  prefs: []
  type: TYPE_NORMAL
- en: That doesn't seem fair does it? To hold someone to an estimate, when they've
    never previously done the thing that they're being asked to do. In which case,
    would it be fairer for me to ask you, "How long would it take if everything went
    right?", and then I checked in with you when that time happens? That way, you
    don't build a buffer, I'm not holding you to this, and all I'm going to do is
    check in with you. So, what would that do?
  prefs: []
  type: TYPE_NORMAL
- en: Let's think about this some more. If a project manager came up to you like in
    the old days and said, "How long does it take you to do this?", you may reply,
    "Well, I've never done that before. But I did something kind of like that, and
    it took me two days. The thing you're asking me to do today is a bit harder, so
    maybe I'll say that it's three days. And then, to be on the safe side, I'll say
    that it will take five days." The person you're talking to in those old days then
    says to you, "Okay, I'll come and see you on Friday then," and they'll know you'll
    be done when they arrive. So, the project manager comes back on the Friday, and
    you say to them, "Ah, it's going to take me another day, maybe two." Now at this
    point, the project manager must go back and move all the things around on the
    plan. It pushes the date out, which often causes a lot of fear.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's try that differently. This time, the project manager says to you,
    "Tell me what you can do if everything goes right, and I'll just check in with
    you, there's no commitment." So, the project manager comes back on day two, and
    they ask you, "How is it going?" You might say, "Well, I'm going to need another
    day and a half." The project manager replies, "Okay, that sounds great, but you're
    pretty sure about that?" And you're like, "Yes, that's a commitment. It's time
    now for me to do this, and I know what I'm doing." The project manager comes back,
    and it's done. Please take note that in this second sequence, the project manager
    finds out that you need more time on day two—instead of day five!
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Exactly.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: If you''re a project manager, or if you''re running sprints
    and you''re a scrum master, then naturally you add the usual buffer that people
    will incorporate in almost every task. Then, as long as your due date is after
    your buffer, all you need to do is manage every little instance where you lose
    some time by finding some extra time somewhere else in the whole project.'
  prefs: []
  type: TYPE_NORMAL
- en: What you're doing in that sequence, most often, is finishing ahead of time!
    This is called Critical Chain, which Goldratt invented. Critical Chain basically
    asks you to identify your most constrained resource in a project, and it then
    subordinates all the other project elements to that constrained resource.
  prefs: []
  type: TYPE_NORMAL
- en: 'We called it the Brent Paradox in *The Phoenix Project*. What we encountered
    there was a very fortunate situation where one of the product managers had read
    *Critical Chain*, the book by Goldratt. This project manager was like: "It''s
    so unfair that developers get yelled at when they can''t meet an estimate." And
    suddenly, we saw all these things that we hadn''t seen before: we had no estimates,
    and we had all these different groups of people reacting to that problem. We also
    had different people thinking about their management style in various ways, and
    different people interpreting in their own ways what it was that we were even
    trying to commit to!'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: That''s a very divisive situation you''re describing.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Yes absolutely, because when something unexpected happens,
    all those groups of people will feel pressure to take the blame or the credit.'
  prefs: []
  type: TYPE_NORMAL
- en: There is an alternative, of course, which is that you give people the ability
    to trust each other through experience of working together. Then, when problems
    do happen, people are a lot more able to withstand the blow of the problem, because
    socially they have a basic understanding of who can do what. They will then know
    what you're good at, and what I'm not good at, and begin to cooperate. I don't
    know about you, Viktor, but I would rather be in a terrible problem with people
    I know and trust!
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: That''s not just you, Kevin! I think that''s true for everybody.
    You would have to be a real psycho to face problems with people you don''t know
    or trust.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Right! So, you''d have to be a management person, because,
    at the end of the day, a lot of things that people in higher management do are
    without compassion, or empathy. They have no idea what difficulties that causes
    for people below them.'
  prefs: []
  type: TYPE_NORMAL
- en: '"In DevOps, we ask ourselves how we can create an environment that''s resilient."'
  prefs: []
  type: TYPE_NORMAL
- en: — Kevin Behr
  prefs: []
  type: TYPE_NORMAL
- en: In DevOps, we ask ourselves how we can create an environment that's resilient.
    We don't all need to be best friends, but we do need to have a working relationship
    together, and it needs to not focus on blame.
  prefs: []
  type: TYPE_NORMAL
- en: The Yin and Yang of DevOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A key part of building a no-blame culture is about how to do the postmortem.
    How do you do the retrospectives correctly, so that blame is not an issue? How
    do you create the environment where, if somebody makes a mistake and it causes
    an outage, that they raise their own hand and say, "Hey that was me, I did that,
    and what do I need to learn because that happened?" Through that kind of attitude,
    the whole team will learn.
  prefs: []
  type: TYPE_NORMAL
- en: What you do in the postmortem *stays in the room*, because the team trusts each
    other, and they'll solve it. I find that a lot of organizations don't build trust
    this way, and people in those organizations tend to be focused instead on building
    security for themselves in their jobs. The result is that those people will sometimes
    be opposed to each other.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: This is surely related to what you were saying at the very
    beginning of this discussion: that companies were, or still are, too much focused
    on how to prevent problems from happening, and how problems will be solved? To
    me, what you just said is the human side of the same coin.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Exactly right. It''s a Yin and Yang situation. To me, watching
    what''s going on with DevOps and the confusion about its meaning is astonishing.
    I recently read that 80% of IT managers are interested in DevOps. They then asked
    those same people if they were confused about what DevOps means, and 80% of them
    again raised their hands! That''s a bad combination—but, you know, we do this
    in all kinds of other aspects of life as well; it''s a human quality!'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Yes, wherever I go, in most cases, I see a complete misunderstanding
    of DevOps, at least from my perspective, and, like you, I happen to think that
    the problem is in human nature itself.'
  prefs: []
  type: TYPE_NORMAL
- en: 'DevOps isn''t as easy to understand as an idea such as Scrum, because with
    Scrum, you just come in every day at nine o''clock and stand on your feet for
    fifteen minutes. The Scrum is very precisely defined: what you do, when you do
    it, and how you do it.'
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to DevOps, you hear people say, "You need to solve problems together
    to do DevOps." And that's all they say, which leaves everyone wondering what it
    really means to solve those problems. You then hear, "Should I buy Jira? Is that
    what you're telling me?" So, they go and buy Jira, and then say, "Now we're DevOps."
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: "Now we''re DevOps," exactly! That''s the joke! I did an engagement
    in Germany, and they were having this same problem: those people *thought* they
    were doing DevOps! They had a very, very detailed plan about where everything
    should go, with procedures and policies. But when I asked them, "What happens
    when you say you are doing DevOps," they replied, "Oh, that''s what we do when
    there''s no playbook." It''s just like you describe, Viktor—they completely misunderstood
    what DevOps is.'
  prefs: []
  type: TYPE_NORMAL
- en: Gene Kim and his team wrote a book called *The DevOps Cookbook* to show people
    how to do some new things in DevOps, but also to introduce some of the thinking
    behind DevOps. As I've already said, what I feel is often missing is that basic
    empathy and compassion, and if you go to a *DevOps Days* conference, you'll hear
    about empathy. Empathy is still my number one priority.
  prefs: []
  type: TYPE_NORMAL
- en: So, if you're doing DevOps, then the job of leaders is to enable empathy, learning,
    and judgment. If you're doing DevOps, then leaders can spend less time managing
    how people do the job, and less time seeking evidence about the way people are
    doing and thinking about the job. If I'm a leader, and I can help you develop
    your mind, then I don't have to keep checking on you. I'd rather have fewer people
    with fewer rules, and people who have better judgment. The more rules you need
    to have, this is a sign that maybe you don't trust people or trust people's judgment.
    We already talked about how important trust is.
  prefs: []
  type: TYPE_NORMAL
- en: '"If you''re doing DevOps, then the job of leaders is to enable empathy, learning,
    and judgment…then leaders can spend less time managing how people do the job,
    and less time seeking evidence about the way people are doing and thinking about
    the job."'
  prefs: []
  type: TYPE_NORMAL
- en: —Kevin Behr
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: The whole point would be that we enable people to use their
    brain. Like they would take the approach of saying, "From now on, I''ll allow
    you to actually solve the problem—instead of just applying steps A, B, and C."'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Yes, because then you enable people to turn the more holistic,
    problem-solving parts of their brain on then. You don''t just want their lizard
    brain, or limbic brain, turned on—because it''s not just about survival.'
  prefs: []
  type: TYPE_NORMAL
- en: In fact, one of the early pioneers in the socio-technical systems approach,
    a guy called Eric Trist, went as far as to say that learning on the job is a *human
    right*, and that if you don't practice this right, then you're a machine, and
    you should really be replaced by a machine. But if people cannot provide an environment
    for you to learn while you're working, you might as well get a job somewhere else.
  prefs: []
  type: TYPE_NORMAL
- en: The good news is that many technology professionals are very fortunate in this
    sense. Not everyone is so lucky of course, but there are ways to learn no matter
    where you are, and even if the company or its managers hinders you, you can still
    learn. If the company helps you and you have the desire to learn, and maybe you
    happen to have someone you can collaborate with, then—suddenly, you have a real
    chance to learn and maybe to solve something together.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is something that people do not understand, the higher up you move in
    an organization. As Russell Ackoff says, and I''m paraphrasing: the lower you
    move in an organization toward the line workers, the more they know about fewer
    things. And yet, the higher up you move in the organization, the less you know
    about more things!'
  prefs: []
  type: TYPE_NORMAL
- en: Engineers always love that joke, but it's true. As you move up an organization,
    you must generalize more, and you must have a lot more knowledge. But the other
    thing is that when you're an individual, you can solve the problems yourself in
    many cases—because you can work on something. When you're a manager or even a
    director, you find that you must instead build consensus, collaboration, and teams
    to solve problems. You realize that your problems are not problems you can solve
    by yourself.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, I have to go talk to marketing if I'm in sales and I want to run
    a promotion, because I need them to tell people about it; and I need the permission
    of the CEO, but I also need to talk to the CFO to make sure we have money. There's
    a natural path of collaboration to get something done.
  prefs: []
  type: TYPE_NORMAL
- en: Toyota, the Taylor Principles, and Kanban
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: This reminds me of Taylor, back in the late 1980s and early
    1990s.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Yes, the division of labor, right? Now Taylor got us a long
    way. Taylor got us to Toyota, and Toyota started with Taylor principles. A lot
    of people do not realize how much of Toyota''s management system was scientific
    management.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: What I''m surprised about is how nobody stopped to consider
    whether it was actually a good idea to apply Taylor''s principles to software
    development. Because if I''m doing the same thing today as yesterday, which is
    the only way to apply Taylorism, then I really suck at my job.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Oh, I''m not saying that it was good. What I want to say is
    that it was better than what was there before, even if it was optimized around
    the idea of mass production.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Exactly.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Right now, we''re in a different era of mass customization,
    with totally different thinking. But you''re right, the thinking that was in place
    when the Taylor management style was a fad was very different from today. Nonetheless,
    Taylorism did get us to the beginning of Toyota, and to the mass production we
    saw in Ford.'
  prefs: []
  type: TYPE_NORMAL
- en: What a lot of people don't know is that Toyota's whole production system (TPS)
    came out of a period of bankruptcy. Toyota hired Taiichi Ohno, in 1950, when the
    bank owned them. The bank had said to Toyota, "You cannot make a car unless you
    have an order," to which Toyota had replied, "Why not?" The bank's point, here,
    was that Toyota had made so many cars that nobody wanted to buy, that they'd now
    spent all their money, and were now bankrupt. The bank was saying to Toyota that
    the only way they could really know that a car they built would sell was if that
    car had already been sold. So, what did Toyota do? They developed the pull system,
    and one-by-one flow, as a system goal.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: That''s certainly one way to think about it.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: But the important thing is that Toyota did all that at the
    lowest cost, because the one-by-one flow is not cheap at the beginning. By the
    end, they''d figured out how to make it cheaper, and continually cheaper, and
    cheaper, and cheaper, and cheaper. Toyota did not have any big bang moments during
    this sequence—they achieved everything through the daily application of Improvement
    Katas.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Including the invention of Kanban, though?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: I mean, there was a point in the 1970s where Taiichi Ohno was
    running around saying, "The point of Kanban is to not need Kanban," and people''s
    heads were exploding! His point was that if you''re constantly looking at a board,
    or looking at a card, then you''re not looking around you. But Kanban is intended
    as a problem-solving method, for a specific problem, for a while; Toyota would
    then use the Kata to grow out of that.'
  prefs: []
  type: TYPE_NORMAL
- en: One day, Toyota realized that Kanban was powerful, and so... *everything* was
    Kanban! There were all these cards flashing around the Toyota plants, and all
    these signals, and Taiichi Ohno would say, "This is too much motion and waste."
    In the end, Toyota figured out how to have *a lot less* motion and waste. I think
    we go through that cycle in all kinds of technological breakthroughs.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Where, if something is good, then a lot *more* must be better?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Yes, and I think we''re there with DevOps right now. You see
    people trying to add things to the portmanteau of DevOps, such as DevSecOps—with
    more and more things coming soon.'
  prefs: []
  type: TYPE_NORMAL
- en: The optimal environment for DevOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is all cross-functional collaboration, and so the management questions
    become: What can you do to get out of the way? And how can you make it possible
    for people that don''t normally talk to talk, and under good circumstances? When
    they hear the vision, or when they hear their direction, you can bring people
    into working groups, and say to the infrastructure people, how are you going to
    help developers? Or developers, how are you going to help infrastructure people
    to do this, right? That is leadership.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: But DevOps has been largely a grassroots movement, and leadership
    hasn''t known what to do with DevOps, right?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: No, management doesn''t know what to do with DevOps. They come
    back after a random meeting and say, "I want three DevOps, give me that! And now
    we need a VP of DevOps!"'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: The funny thing is that this isn''t even a joke! I''ve really
    met one of these "VPs of DevOps"!'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Oh, I''ve met several of them! I must, of course, respect the
    fact that they''re in a leadership position, but I don''t necessarily understand
    why they exist. The DevOps idea is that you''re supposed to be building teams
    with higher and higher levels of trust and judgment, and that''s supposed to move
    through the organization too!'
  prefs: []
  type: TYPE_NORMAL
- en: '"Management doesn''t know what to do with DevOps. They come back after a random
    meeting and say, ''I want three DevOps, give me that! And now we need a VP of
    DevOps!''"'
  prefs: []
  type: TYPE_NORMAL
- en: — Kevin Behr
  prefs: []
  type: TYPE_NORMAL
- en: Organizations don't understand the environment that DevOps requires in order
    to flourish. In our corporate HR- and finance-driven models, structures, and organizational
    charts, we can feel trapped in those positions. We must understand that those
    positions are social constructs.
  prefs: []
  type: TYPE_NORMAL
- en: For example, I point out to people in HR that their organization chart is just
    a hypothesis. I ask them, "Is this your best idea of how to organize the office
    work? How do you know that it works? Where are the tests?" Because if an organization
    chart doesn't work, then someone should change it.
  prefs: []
  type: TYPE_NORMAL
- en: One of the ways I look for flexibility in an organization is by looking at how
    long it has been structured this way. Who can change it here? Could somebody,
    say a developer, walk up and say, "We have a problem. Our organization is keeping
    me from talking to this person, but I need to talk to this person, because we
    have a problem." And will anybody listen to them when they say this?
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Chances are... probably not.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: And because we like our boxes, and our pictures, and our compliance,
    and our work councils, and all those kinds of things, we then feel forced to participate.
    But what I''ve been showing people is that the organization chart is only an idea.
    The organization chart does not know about the project you have right now, nor
    the problem that you have right now. If the organization chart is preventing you
    from taking the correct actions, then maybe it''s time to sit back as a team and
    ask whether there''s a better way to do things. Maybe you don''t need permission
    to just get it done, or maybe you say, "Oh, sorry, I didn''t know that I couldn''t
    work with my neighbor."'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Exactly.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: I think a lot of times, we assume that the way we can work
    is based on boxes and charts, and I think we need to test and raze those assumptions.
    People who control organizational structure need to be more fluid around the possibilities
    for the organization. After all, organizations are always in transition toward
    something; they simply can''t and won''t remain the same.'
  prefs: []
  type: TYPE_NORMAL
- en: '"People in the DevOps community are starting to see the larger organizational
    system. And once you see DevOps in the larger system picture of business, you
    see everything differently."'
  prefs: []
  type: TYPE_NORMAL
- en: —Kevin Behr
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Are you optimistic that organizations can therefore improve?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Yes, I have strong hope for DevOps in organizations, because
    the environment in which DevOps can thrive also exists in other systems. I believe
    that people in the DevOps community are starting to see the larger organizational
    system. And once you see DevOps in the larger system picture of business, you
    see everything differently. I''m hoping that the DevOps community starts to look
    up and see that they''re in this larger system, and how that system is itself
    part of an even larger system. I''m hoping that more organizations see that our
    only chance of steering our systems is by doing so together.'
  prefs: []
  type: TYPE_NORMAL
