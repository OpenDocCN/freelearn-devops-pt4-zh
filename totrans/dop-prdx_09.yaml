- en: Introducing Kevin Behr
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍凯文·贝尔
- en: As CSO of PraxisFlow, Kevin Behr spends his time working with clients who seek
    to develop their DevOps process. His 25 years of experience have been driven by
    a passion for engaging with the complex problems that large IT organizations face,
    and how we can use DevOps to solve them. You can follow Kevin on Twitter `at @kevinbehr`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 作为PraxisFlow的首席安全官（CSO），凯文·贝尔把时间投入到与那些寻求开发DevOps流程的客户的合作中。他25年的经验来源于他对解决大型IT组织面临的复杂问题的热情，以及如何利用DevOps来解决这些问题。你可以在Twitter上关注凯文，`@kevinbehr`。
- en: The journey to DevOps
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通往DevOps的旅程
- en: '**Viktor Farcic**: Hi Kevin, you''ve been involved with many topics that have
    become central to DevOps since your early childhood working with your father.
    How did your father''s work prepare you for DevOps?'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：你好，凯文，你从小与父亲一起工作，涉足了许多后来成为DevOps核心话题的领域。你父亲的工作是如何为你做好进入DevOps的准备的？'
- en: '**Kevin Behr**: Well, it''s exactly 30 years since I first got formally involved
    in the world of computing. In my earlier years, I had the fortune of growing up
    with my father, Harold Behr, one of the cofounders of the Association of Field
    Service Managers, or AFSM. For those who don''t know, AFSM was one of the first
    global groups dedicated to global service managers. AFSM would discuss topics
    that are still related to DevOps today, such as how mainframe computing was going
    to be serviced, as well as discussing availability and continuity of value for customers.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯文·贝尔**：嗯，距离我第一次正式涉足计算机世界已经整整30年了。在我年轻的时候，我很幸运地与我的父亲哈罗德·贝尔一起成长，他是现场服务经理协会（AFSM）的联合创始人之一。对于那些不知道的人来说，AFSM是全球首批致力于全球服务经理的组织之一。AFSM曾讨论一些今天仍然与DevOps相关的话题，例如如何为大型机提供服务，以及讨论客户价值的可用性和持续性。'
- en: I was seven years old when I started building small digital computers, working
    on vacuum tube equipment. I was about ten years old when I started working with
    midranges and mainframes, in the context of repair. My dad ran a team that would
    charter jets to fly to their customers whenever their mainframes went down, and
    they would fix them at night, so that they'd hopefully be ready and working by
    the time morning came. If they had an outage happen on a Friday, I would often
    go with them if they flew out in the evening. Even back then, it was a fun thing
    that I could do with computers and with my father.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我七岁时开始制作小型数字计算机，修理真空管设备。大约十岁时，我开始接触中型计算机和大型机的维修工作。我的父亲带领的团队会租用私人飞机飞往客户所在的地方，每当他们的大型机出现故障时，他们会在晚上进行修理，力求到早晨时系统已经恢复正常。如果周五发生故障，我通常会和他们一起去，尤其是他们傍晚出发时。即便是在那个时候，这也是我能与计算机和父亲一起做的有趣事情。
- en: '**Viktor Farcic**: You were fixing mainframes at ten years old?'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：你十岁时就开始修理大型机了？'
- en: '**Kevin Behr**: My job would be to hold the solder and heat sinks. This was
    a time back when you could actually service and fix these beasts! One guy would
    be on the phone with IBM Armonk, or whatever mainframe company they were dealing
    with, and they''d be getting traces to test for certain voltages and impedances
    on the boards. Then, they would solder and replace the bad components. I was better
    at soldering than most of them, because I had small hands so I could get into
    places, but they mostly had me hold on to heat sinks and make RS–XXX cables while
    they chain smoked, muttered fresh obscenities, and squinted through reading glasses
    while soldering.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯文·贝尔**：我的工作是拿着焊锡和散热器。这是在那种你实际上可以修理这些庞然大物的时代！有一个人会和IBM Armonk或者他们正在处理的大型机公司通话，他们会拿到电路板的跟踪数据来测试某些电压和阻抗。然后，他们会进行焊接和更换坏掉的组件。我在焊接方面比大多数人都更擅长，因为我手小，可以进入狭窄的地方，但他们大多数时候让我拿着散热器，做RS–XXX电缆，而他们则一边链式吸烟，一边低声咒骂，一边戴着眼镜焊接。'
- en: '**Viktor Farcic**: And by the time you graduated high school, you were in business
    with your father servicing mainframes. How did all that sit with your education
    commitments?'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：到你高中毕业时，你和父亲一起从事大型机维修业务。这一切与你的教育承诺有什么关系呢？'
- en: '**Kevin Behr**: Yes, when I was about 18, we were taking vacations in Moab,
    Utah. But, like a lot of places where you''d go for a vacation, there was no work.
    In our case, that meant that there were no computer services or consulting companies
    or anything like that. So, my dad and I started a small computer consulting company.
    We went out to businesses, government and schools, and we built computers! It
    was just becoming possible back then to build cloned computers for the first time,
    and so we went right ahead and manufactured our own computers. And we serviced
    them, right along with any mainframes and minis that needed servicing in the area.
    I also picked up some work with a company that had a contract with the state.
    I had a pager, and when they gave me a call, I would go fix the mainframes and
    Wang OIS systems.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯文·贝尔**：是的，当我大约18岁时，我们在犹他州的莫阿布度假。但像很多度假地一样，那里没有工作。对我们来说，这意味着没有计算机服务公司、咨询公司或类似的东西。所以，我和我爸开了一家小型计算机咨询公司。我们去到企业、政府和学校，为他们组装计算机！当时，组装克隆计算机才刚刚变得可能，于是我们直接开始生产自己的计算机。我们还为那些需要维修的大型主机和小型计算机提供服务。我还在一家和州政府有合同的公司做了一些工作。我有一个寻呼机，每当他们给我打电话时，我就去修理大型主机和Wang
    OIS系统。'
- en: 'A few years later, my CS professor asked me how much I made in those years;
    I told him it was anywhere between $35,000 to $40,000, which was pretty good in
    the 1980s. My professor then grabbed me by the arm and said, "Leave and get out!"
    When I asked him why, he said something important to me:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 几年后，我的计算机科学教授问我在那些年里赚了多少钱；我告诉他大约在$35,000到$40,000之间，在1980年代这算是相当不错的收入。然后，我的教授抓住我的胳膊说：“离开，走！”当我问他为什么时，他对我说了一些对我来说很重要的话：
- en: '"I''m not saying this because you''re a bad student, Kevin, you''re an exemplary
    student. And I''m not saying this because you''re asking a lot of questions about
    who is going to manage all these people we are teaching. I''m saying this to you,
    Kevin, because you''re right: somebody needs to go and write this curriculum.
    But to do that, they have to do it from empirical experience. Somehow, Kevin,
    you have to work your way through these organizations and write your learnings."'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: “凯文，我不是因为你是个不好的学生才这么说，你是一个模范学生。我也不是因为你问了很多关于谁来管理我们教的这些人的问题才这么说。我这么跟你说，凯文，因为你说得对：确实需要有人去编写这份课程。但为了做到这一点，他们必须从实践经验出发。凯文，你必须通过这些组织，亲自写下你的所学。”
- en: And while I didn't set out with that purpose, I did drop out—and I've taken
    the exact path that my CS professor advised!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我并没有一开始就抱有这个目的，但我确实辍学了——而且我走的正是我的计算机科学教授所建议的道路！
- en: '**Viktor Farcic**: What did you do right after dropping out of college?'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：你从大学辍学后做了什么？'
- en: '**Kevin Behr**: Over the next several years, I held every job in an IT operation.
    I got to know what it''s like to be a network engineer, and what it''s like to
    be a system administrator, and what it''s like to be the lowly guy who checks
    the disk array fault lights, the fans, and the filters on the air-conditioning.
    From rotating the backup tapes to programming firewalls. I did all those jobs.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯文·贝尔**：在接下来的几年里，我在IT运维中做过每一份工作。我了解了作为网络工程师是什么样子，作为系统管理员又是什么样子，甚至做过那个低级别的职位，负责检查磁盘阵列的故障指示灯、风扇和空调的滤网。从更换备份磁带到编程防火墙。我做过所有这些工作。'
- en: I also went to school to develop software. I'm a lazy and slow developer, but
    I made sure that I understood *everything*, from the bottom of the stack to the
    top of the stack. I started with the B language as we used to joke—as in assembler—which
    means staring at a lot of binary, which is hard for us dyslexics.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我也上过学，学习软件开发。我是一个懒惰而又慢的开发者，但我确保自己理解了*一切*，从栈底到栈顶。我从B语言开始，我们曾开玩笑地说——像汇编语言——这意味着要面对大量的二进制数据，这对我们这些有阅读障碍的人来说非常困难。
- en: I found during this period that the more I worked, the more disillusioned and
    confused I became about the folks who were managing the technology. It seemed
    like companies were just promoting technical people who had been there for a while
    up into management positions. In many cases, those people were not very good at
    what they were doing. They were not trained to do those things, and they often
    didn't want to be managing those things.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段时间里，我发现自己工作越多，对那些管理技术的人越感到失望和困惑。似乎公司只是将那些在技术岗位上工作了一段时间的人晋升到管理岗位上。在很多情况下，这些人并不擅长他们所做的事情。他们没有接受过这方面的培训，而且他们通常并不愿意管理这些事务。
- en: '"The more I worked, the more disillusioned and confused I became about the
    folks who were managing the technology."'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: “我越是工作，就越是对那些管理技术的人感到幻灭和困惑。”
- en: —Kevin Behr
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: —凯文·贝尔
- en: '**Viktor Farcic**: But if you want a raise in your salary, then you need to
    become a manager. It''s like for a long time you might want to continue being
    a coder but then, five years later, you need more money, so you think about becoming
    a manager.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：但如果你想加薪，那就需要成为一名经理。这就像你可能会一直想做一个程序员，但五年后，你需要更多的钱，所以你开始考虑成为一名经理。'
- en: '**Kevin Behr**: But back then, there was literally no help or support for the
    people going into technical management positions. There was nobody to mentor these
    technology managers, nobody to answer their questions, and there was no documentation
    for them to read. There just wasn''t anything for them at all, and I found this
    very strange, especially when you reflect for a moment on how much emphasis there
    is around most executive positions to prove competency, education, and experience;
    and to provide training and documentation to ensure professional standards.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯文·贝尔**：但在那时，实际上没有任何帮助或支持给那些进入技术管理岗位的人。没有人能为这些技术经理提供指导，没有人能回答他们的问题，也没有文档供他们阅读。根本没有任何资源，而这让我感到非常奇怪，尤其是在你稍微反思一下大多数高管职位所强调的能力、教育和经验的重要性时；以及提供培训和文档以确保专业标准的必要性。'
- en: This was very strange, and it affected my view of CIOs profoundly, because I
    didn't see CIOs making any decisions on their own. I stopped seeing it as an equal
    partnership between CEO and CIO as the parents of a company. The CIO job looked
    more like a babysitter than a parent.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常奇怪，它深刻地影响了我对CIO的看法，因为我没有看到CIO单独做出任何决策。我不再看待CIO和CEO作为公司父母之间的平等合作伙伴关系。CIO的工作更像是一个保姆，而不是父母。
- en: '**Viktor Farcic**: That''s a great way to describe it.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：这真是一个很好的描述方式。'
- en: '**Kevin Behr**: In my view, the CIO wasn''t a peer with a real position in
    most companies during the 1980s and 1990s. The CIO essentially worked for everybody
    else.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯文·贝尔**：在我看来，CIO在1980年代和1990年代并不是大多数公司中的同级职位。CIO实际上是为其他人服务的。'
- en: The management of information systems during the early 1980s involved a lot
    of finance people, and, of course, technology originally came into businesses
    through finance—to help them calculate numbers and construct books and records.
    The first computer from IBM was a time clock that was designed to track people's
    working hours. Technology solutions had always had the backing of finance groups.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 1980年代初期的信息系统管理涉及了很多财务人员，当然，技术最初是通过财务部门进入企业的——帮助他们计算数字、构建账本和记录。IBM的第一台计算机是一台用于跟踪员工工作时间的打卡机。技术解决方案一直得到财务团队的支持。
- en: It was therefore very interesting and very curious when finance proceeded in
    the 1980s and 1990s to kick technology out of finance! I remember seeing this
    happening when the PC first came out. At that time, I was a mainframe guy, so
    was biased, but, like a lot of people at IBM back then, I believed that desktop
    PCs were just business cards for the mainframes. So, I just sat in front of them
    every day. Computer. IBM. Computer. IBM. I didn't believe that PCs would amount
    to much.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当财务部门在1980年代和1990年代决定将技术逐出财务领域时，这非常有趣也很奇怪！我记得在个人电脑首次问世时，我亲眼看到了这一过程。当时，我是一个大型主机技术员，所以有偏见，但像当时许多IBM的人一样，我相信桌面PC只是大型主机的名片。所以，我每天都坐在它们面前。计算机。IBM。计算机。IBM。我不相信个人电脑会有什么了不起的成就。
- en: Then, suddenly, we had client-server computing in the 1980s and 1990s. As far
    as I'm concerned, client-server destroyed computing and set us back 40 years.
    The issue with client-server was that we already had all those capabilities in
    mainframes, but they worked better, faster and were actually less expensive by
    the time you counted all the people, weird contractors, and vendors that you would
    need. But finance made the mistake of only looking at the purchase price of the
    computer.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，突然间，在1980年代和1990年代我们迎来了客户端-服务器计算。就我而言，客户端-服务器摧毁了计算机技术，导致我们倒退了40年。客户端-服务器的问题在于，我们在大型主机中已经拥有了所有这些功能，但它们运作得更好、更快，实际上在计算所有人员、奇怪的承包商和供应商的费用后，还更便宜。但是，财务部门犯了一个错误，只看到了计算机的购买价格。
- en: '**Viktor Farcic**: You could say that finance became its own worst enemy. But
    a mainframe cost a lot more than a PC, so the client-server idea must have been
    very attractive?'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：你可以说，财务部门变成了自己的最大敌人。但大型主机的成本远高于个人电脑，所以客户端-服务器的理念一定非常具有吸引力吧？'
- en: '**Kevin Behr**: Yes, sure, but then there was another false assumption: that
    you could run the PC all by yourself because... it''s personal. The reality is
    that when you have 100,000 personal computers, it is not personal anymore. You
    then need to manage all those PCs, and they are all distributed!'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kevin Behr**：是的，当然，但当时有另一个错误的假设：认为你可以单独管理个人电脑，因为…它是个人的。现实情况是，当你有10万个个人电脑时，它就不再是个人的了。你需要管理所有这些电脑，而且它们是分布式的！'
- en: So, I kept seeing this disconnect between technology and organizations, and
    the disconnect between CIOs and CEOs, become greater and greater. It was not until
    some years later, through the 2000s and 2010s, that DevOps was working to heal
    this disconnect.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我一直看到技术与组织之间的脱节，以及CIO与CEO之间的脱节，越来越大。直到几年后，通过2000年代和2010年代，DevOps才开始着手修复这种脱节。
- en: Bridging the CEO–CTO gap
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弥合CEO与CTO之间的鸿沟
- en: '**Viktor Farcic**: It''s interesting how those first phases of your career
    related to a history before DevOps, including those tensions and disconnects you
    talk about that DevOps tries to address of course. Did your next career step,
    as CTO at IP Services, take you closer to DevOps as we talk about it today?'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：有趣的是，你职业生涯的最初阶段与DevOps之前的历史有关，包括你提到的那些紧张关系和脱节，这些是DevOps试图解决的，当然了。你在IP
    Services担任CTO的下一步职业发展是否让你更接近我们今天所谈论的DevOps？'
- en: '**Kevin Behr**: Yes, in the 2000s, I was the CTO at a company called IP Services,
    which could best be described as an early MSP and outsourcer for infrastructure.
    It provided mission-critical infrastructure for large fortune and global 500 companies.
    While I was at IP Services, we had to develop ways to manage across various systems
    of control, because we would have auditors from every client wanting to come in
    and inspect our operations.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kevin Behr**：是的，在2000年代，我曾是名为IP Services公司的CTO，这家公司可以最好地描述为一个早期的MSP（托管服务提供商）和基础设施外包商。它为大型财富500强公司和全球500强公司提供关键任务基础设施。就在IP
    Services期间，我们不得不开发方法来管理各种控制系统，因为我们每个客户的审计员都希望进来检查我们的运营。'
- en: At this time, I started collaborating and working with Gene Kim, another kindred
    DevOps mind. We were both CTOs reporting to a CEO, and we both experienced a very
    specific process of adopting and adapting our thinking to meet the challenges
    in our work.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段时间，我开始与Gene Kim合作，共同工作，Gene是另一个志同道合的DevOps思想者。我们俩都是CTO，向CEO汇报工作，我们都经历了一个非常具体的过程，就是在工作中采用并调整我们的思维方式，以应对工作中的挑战。
- en: '**Viktor Farcic**: Did this experience help the disconnect you mentioned earlier,
    between CTOs and CEOs in organizations?'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：这段经历是否帮助你弥合了你之前提到的组织中CTO与CEO之间的脱节？'
- en: '**Kevin Behr**: Yes, we noticed how CEOs often describe things with word pictures,
    using primary colors, and numbers from 0 to 9\. On the face of it, this CEO language
    can feel super-reductive and oversimplified, and that''s certainly how it would
    sometimes feel for Gene and myself, because we were both engineers at heart. And
    the point here is that, as CTOs, it took a *lot of work* for us to learn this
    CEO language and its associated CEO mental frameworks. But that''s what it takes
    sometimes.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kevin Behr**：是的，我们注意到CEO们经常用图像语言来描述事物，使用原色和0到9的数字。表面上看，这种CEO语言可能显得过于简化和过度简化，确实，这也是Gene和我有时会有的感觉，因为我们俩本质上都是工程师。关键是，作为CTO，我们花了*大量的时间*学习这种CEO语言及其相关的CEO思维框架。但有时就是这样，必须付出这些努力。'
- en: I also remember Gene and I agreeing how humor can help heal a disconnect. Gene
    found this great book called *Throwing the Elephant*, by Stanley Bing, and together
    we began to appreciate how Bing discussed "managing up" in a tongue-in-cheek way,
    like humor, from a Zen perspective.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我还记得Gene和我曾一致认为幽默可以帮助修复脱节。Gene找到了一本由Stanley Bing写的很棒的书，叫做*Throwing the Elephant*，我们开始欣赏Bing从禅宗的角度幽默地讨论“向上管理”这一话题。
- en: Listening and finding common links with other people was another important lesson
    for us during that time. Gene and I would often meet at a restaurant/bar called
    Pazos in Portland, Oregon, where we would each describe common scenarios about
    our respective executives and clients. We found that we had a lot of passion and
    many common questions about our industry.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在那个时期，倾听并找到与其他人之间的共同联系是我们另一个重要的经验教训。Gene和我经常在俄勒冈州波特兰的一个叫Pazos的餐馆/酒吧碰面，在那里我们会描述关于我们各自的高管和客户的共同场景。我们发现我们对行业充满热情，并且有许多共同的问题。
- en: '**Viktor Farcic**: Such as?'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：比如？'
- en: '**Kevin Behr**: Well, we might say "How come Client A has all of these problems?"
    They have the same amount of money, and a lot of the same talent as Client B;
    and yet here we are, with Client B doing so much better. Why?'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯文·贝尔**：嗯，我们可能会说，“为什么A客户有这么多问题？”他们的钱和人才与B客户差不多，但B客户的表现却好得多。为什么呢？'
- en: Gene and I were very passionate about these types of questions, and we convinced
    our bosses to let us put our pith helmets on. As Gene used to like to say, we
    were like old explorers cataloging plants and animals for the first time. Our
    world was business of course, and so we would study high-performing companies
    to see what they did differently.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 吉恩和我对这些类型的问题非常有激情，我们说服了上司让我们戴上探险帽。正如吉恩常说的，我们就像是第一次为植物和动物做分类的老探险家。我们的世界当然是商业世界，因此我们研究高绩效公司，看看它们做得与众不同的地方。
- en: We shared a lot of what we learned at the first *Security and Audit Controls
    That Work* workshop in 2003 that Gene and Stephen Northcutt chaired, and I gave
    the talk *Blood, Sweat and Visible Ops*, which was later memorialized in a book
    with Gene Kim and George Spafford called *Visible Ops*, which came out in late
    2004.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们分享了在2003年由吉恩和斯蒂芬·诺思卡特主持的第一次*有效的安全与审计控制*研讨会上的很多收获，我在会上做了讲座《血与汗与可见操作》，这后来在与吉恩·金和乔治·斯帕福德合作的《Visible
    Ops》一书中得到了纪实，并于2004年底出版。
- en: '**Viktor Farcic**: Why did you decide to use ITIL in your *Visible Ops* book?'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：你为什么决定在你的*Visible Ops*书中使用ITIL？'
- en: '**Kevin Behr**: We decided to use the language of ITIL because ITIL was a standard
    process language that a lot of people understood. We''d also mapped into ITIL
    all the actions that we''d been watching those different companies doing.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯文·贝尔**：我们决定使用ITIL的语言，因为ITIL是一个许多人都能理解的标准流程语言。我们还将我们观察到的不同公司所做的所有动作映射到ITIL中。'
- en: Our objective was to be able to compare the patterns of activity between successful
    and less successful companies using ITIL. What we discovered was that a lot of
    companies were doing things completely differently from the others—most critically,
    around how they managed risk and change. The more successful companies usually
    had the most effective change management processes.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是能够使用ITIL对成功与不太成功的公司之间的活动模式进行比较。我们发现，许多公司与其他公司做事的方式完全不同——最关键的是，它们在如何管理风险和变更方面的差异。更成功的公司通常拥有最有效的变更管理流程。
- en: A great example of the positive effect of good change management was at a client
    where we went in to change what was called a WAR, a work authorization request.
    The management of this client didn't like change because it was dangerous—and
    they happened to run one of the largest financial institutions. But the funny
    thing was that this client made way more changes than low-performing clients,
    and I was like wow! Their risk surface was much greater, and yet, they had almost
    no failed changes. Or, if they did, they were reversed very quickly and there
    was almost no impact to production.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的例子，说明了良好的变更管理的积极影响，是我们在一个客户那里进行的变更——变更了所谓的工作授权请求（WAR）。这个客户的管理层不喜欢变更，因为它有危险——而且他们恰好经营着一家最大的金融机构之一。但有趣的是，这个客户做的变更远比低绩效客户多，而我当时感到非常惊讶！他们的风险面要大得多，但几乎没有失败的变更。或者，即便发生了，它们也会被迅速撤销，几乎对生产没有任何影响。
- en: We saw such high-performing clients as this one, and we saw low-performing clients,
    where both would be similarly skilled, and have similar budgets. The ITIL analysis
    showed that the key difference was the way that different clients were managing
    the change process that was integrated with release and incident processes. It
    turned out that 80% of failures were caused by things people did, and so the incidents
    are the results, and the changes are what we intended. We therefore started measuring
    things such as change success rate, and how do you know your process works? Is
    it successful?
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到像这样的高绩效客户，也看到低绩效客户，两个客户在技能和预算上都很相似。ITIL分析显示，关键的区别在于不同客户如何管理与发布和事件流程集成的变更过程。结果证明，80%的失败是由人为因素造成的，因此事件是结果，变更是我们的意图。因此，我们开始衡量一些指标，比如变更成功率，以及如何判断你的流程是否有效？它成功了吗？
- en: But one of the things that we found about high performers is that they tended
    to have fewer controls than low performers. That was a big surprise. We were like
    "Hey! Wait a minute here!"
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们发现，高绩效客户的一个特点是，他们的控制措施往往比低绩效客户少。这让我们感到非常惊讶。我们当时就想，“嘿！等一下！”
- en: '**Viktor Farcic**: Do you mean less control over people?'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：你的意思是对人员的控制更少吗？'
- en: '**Kevin Behr**: No, it was all about fewer process controls, such as from a
    management intersection or audit standpoint. So, we''re there thinking our client
    has like 15 controls in here, while the other client has almost 40 from COBIT.
    And I''m like... this doesn''t make any sense at all!'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯文·贝尔**：不，这一切都与更少的流程控制有关，比如从管理交叉点或审计角度来看。所以，我们在那里思考时，发现我们的客户有大约15个控制点，而另一个客户则有接近40个控制点来自COBIT。我想……这根本没有任何意义！'
- en: 'As we looked harder at this, we saw that the people with fewer controls were
    building purpose-built processes: they knew what their process had to do and where
    the risks really were. Meanwhile, low performers were reading best practices and
    they thought more controls were better for the auditors. And the lower performers
    treated every change the same way: they''d get a bunch of people in the room,
    and they''d talk about it, but that didn''t make the outcome any more reliable.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们进一步深入观察时，我们发现控制较少的人在构建专门的流程：他们知道自己的流程需要做什么，真正的风险在哪里。与此同时，表现较差的人则在阅读最佳实践，他们认为更多的控制对审计人员更有利。而且低效能者对待每个变化的方式都是一样的：他们会把一群人召集到房间里讨论，但这样并没有让结果更可靠。
- en: The high performers were seeing changes as releases. They were looking at their
    whole infrastructure as if it were a platform; and as though they were releasing
    a new piece to this platform. They were looking at everything more holistically,
    and so they would track the interdependencies. They were doing a lot of things
    that were really and simply just in the change process, the incident management
    process, the release process. They had these processes integrated in such a way
    where you knew the outcomes of every step, and it was all very tightly integrated.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 高效能者将变化视为发布。他们把整个基础设施看作一个平台，仿佛他们正在向这个平台发布一个新组件。他们以更全面的方式看待一切，因此会追踪相互依赖性。他们做了很多事情，这些事情实际上只是变更过程、事件管理过程和发布过程的一部分。他们的这些过程被集成得如此紧密，你可以知道每一步的结果，而且所有环节都紧密相连。
- en: '"[The high performers] were looking at everything more holistically, and so
    they would track the interdependencies. [...] They had these processes integrated
    in such a way where you knew the outcomes of every step, and it was all very tightly
    integrated."'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '"[高效能者]以更全面的方式看待一切，因此会追踪相互依赖性。[...] 他们的这些过程被集成得如此紧密，你可以知道每一步的结果，而且所有环节都紧密相连。"'
- en: —Kevin Behr
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: —凯文·贝尔
- en: So, let's say you had an incident. You could see the last problem that somebody
    had on the ticket, and you could see the last change that was made on the ticket
    because 80% of the outages were caused by changes. But, 80% of the time it took
    to solve a problem was spent just figuring out what had changed, with the other
    20% used to do the work to actually fix it. What we discovered was that a lot
    of these high performers were eliminating change as a causal factor in the first
    minutes of the problem, giving them a much higher chance of a very, very low mean
    time to restore service and have a better shot at staying within their SLO error
    budgets.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你遇到了一个故障。你可以看到某人在工单上的最后一个问题，以及工单上做的最后一次更改，因为80%的故障是由变更引起的。但是，解决问题所花费的80%时间用来搞清楚发生了什么变更，剩下的20%则用来做实际的修复工作。我们发现，许多高效能者在问题发生的最初几分钟内就排除了变更作为原因因素，从而大大提高了他们恢复服务的平均时间，且有更大的机会保持在他们的SLO误差预算之内。
- en: '**Viktor Farcic**: And so, you discovered a first DevOps pattern?'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：所以，你发现了第一个DevOps模式？'
- en: '**Kevin Behr**: That''s right! What distinguished high-performing clients wasn''t
    anything to do with them having fewer failures in those scenarios. We discovered
    that it is what companies do with their failures that tests their organizational
    resilience; and, more importantly, how resilient they really are in small teams.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯文·贝尔**：没错！高效能客户的不同之处不在于他们在这些场景中失败的次数较少。我们发现，正是公司如何处理失败，测试了它们的组织韧性；更重要的是，它们在小团队中的韧性究竟有多强。'
- en: Making it safe to fail
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让失败变得更安全
- en: So now, we started to notice these DevOps patterns in our studies, for example,
    where people were willing to focus on learning together versus blaming and co-designing
    resilience. Designing systems that are safe to fail is borrowing thinking from
    flight simulators. The average learner needs to crash several planes in the simulator
    before flying in real life. The point is to decouple deployment from activation
    so that we can learn for free without affecting our customers' experience.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在，我们开始在研究中注意到这些 DevOps 模式，例如，人们愿意专注于一起学习，而不是互相指责，并共同设计韧性。设计一个安全可失败的系统，借用了飞行模拟器的思维。普通学习者需要在模拟器中坠毁几架飞机，才能在现实生活中飞行。关键是将部署与激活解耦，这样我们就可以免费学习，而不影响客户的体验。
- en: 'When you look at continuous deployment and continuous delivery, we''re putting
    code out there faster. In some cases, code is on a unit test, and then committed,
    and then through static code analysis, integration tests, fast regression stack
    and—Bam! Production! Well, why do we do that? Because we know that we have options:
    blue green deployments, dark deployments, feature toggles, flags, and switches.
    So, we can turn something off in production if it causes a problem by itself,
    and effectively flip it back to the way it was. Many have adopted blue/green deployments,
    which let the teams run the old system at the same time as the new system from
    the same database. They don''t cut over to the new system until it''s working
    and there''s zero downtime.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当你看到持续部署和持续交付时，我们正在更快地发布代码。在某些情况下，代码首先通过单元测试，然后提交，接着通过静态代码分析、集成测试、快速回归堆栈——砰！生产！那么，为什么我们这么做呢？因为我们知道我们有多种选择：蓝绿部署、暗部署、特性开关、标志和开关。所以，如果某个问题在生产环境中出现，我们可以将其关闭，并有效地将其恢复到原来的状态。许多人采用了蓝绿部署，这允许团队在同一数据库中同时运行旧系统和新系统，直到新系统工作正常且没有停机时才切换到新系统。
- en: With these new patterns, ideas can arise for engineers to fail safely. That's
    quite the opposite to what the industry had always said before, which was that
    we must rely on fortification, such as redundant data centers. Sure, all the metal,
    namely the big servers, can make us feel good, because everything's fault tolerant.
    But the DevOps generation says that it's all going to fail. So instead, give me
    a resilient and safe-to-fail system so we can move at will, break things, and
    learn fast!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些新模式，工程师可以产生安全故障的想法。这与行业以前所说的完全相反，之前行业总是强调必须依赖加固，比如冗余数据中心。当然，所有的金属，尤其是大型服务器，确实让我们感觉很好，因为一切都具有容错性。但
    DevOps 一代人认为一切都会失败。所以，给我一个有韧性且安全可失败的系统，这样我们就能自由行动、破坏事物并快速学习！
- en: '"Give me a resilient and safe-to-fail system so we can move at will, break
    things, and learn fast!"'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '"给我一个有韧性且安全可失败的系统，这样我们就能自由行动、破坏事物并快速学习！"'
- en: — Kevin Behr
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: ——凯文·贝尔
- en: '**Viktor Farcic**: Saying that everything fails sooner or later is admitting
    the truth!'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔西奇**：说一切都会迟早失败就是承认真相！'
- en: '**Kevin Behr**: Right, so what do you do when it fails? How fast can you make
    it invisible? So that it doesn''t matter. Because Cobb''s thinking, along with
    DevOps, starts to make a different set of possibilities appear!'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯文·贝尔**：没错，那么当它失败时你怎么办？你能多快让它变得不可见？这样就不重要了。因为 Cobb 的思维方式，加上 DevOps，开始让一套不同的可能性显现出来！'
- en: '**Viktor Farcic**: Are you saying that DevOps patterns are the heart of DevOps?'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔西奇**：你是说 DevOps 模式是 DevOps 的核心吗？'
- en: The heart of DevOps is democratizing the work
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps 的核心是让工作民主化
- en: '**Kevin Behr**: While those DevOps patterns are vital to DevOps, what I *really*
    believe to be the heart of DevOps, and what I think we''ve lost touch with today,
    is what, in the 1940s and 1950s, was a movement and a discipline called STS, or
    socio-technical systems.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯文·贝尔**：虽然这些 DevOps 模式对 DevOps 至关重要，但我*真正*认为是 DevOps 核心的东西，我认为我们今天失去联系的，是在
    1940 年代和 1950 年代，一种叫做 STS（社会技术系统）的运动和学科。'
- en: Social-technical systems started with some sociologists, and it was one of the
    big-funded projects immediately post World War II. I do actually give a talk about
    STS, called *DevOps and Its Roots in Coal Mining*. It's kind of a joke, but one
    of the big things that they had to do after World War II was figure out how to
    make more coal to help power the war recovery. There was a conflict because all
    the coal companies wanted to keep the price of coal high, while the British government
    wanted lower coal prices so that coal and oil could power post-war reconstruction.
    It was in the national interest to get as much out of the mines as possible.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 社会技术系统起初是由一些社会学家提出的，它是二战后立刻展开的一个重大资金项目。我确实有一场关于STS的演讲，叫做*DevOps与它在煤矿中的根源*。这有点像笑话，但二战后他们必须做的一件大事，就是找出如何生产更多的煤炭来帮助战争后的恢复。那时发生了一个冲突，因为所有的煤炭公司都想保持煤炭价格高，而英国政府则希望降低煤炭价格，以便煤炭和石油能够推动战后的重建。国家的利益是尽可能多地从矿井中提取煤炭。
- en: To help achieve this, the British government hired two sociologists, Eric Trist
    and Elliott Jacques, to look at all the mines and figure out which ones were the
    most productive and what made them more productive. Trist and Jacques discovered
    that all the low-productivity mines were highly automated, and that automation
    didn't create the expected returns on productivity. Across many different styles
    of mines, they found one mine design that really stood out, because it put out
    more coal per day than any other design—by many multiples. This most highly productive
    mine design also had fewer significant injuries than any other mine type, and
    had iron-clad, strong team morale!
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一目标，英国政府雇佣了两位社会学家，Eric Trist和Elliott Jacques，去检查所有的矿井，找出哪些矿井最具生产力，以及是什么使它们更具生产力。Trist和Jacques发现，所有低生产力的矿井都高度自动化，而这种自动化并没有带来预期的生产力回报。在许多不同类型的矿井中，他们发现了一种矿井设计，尤其突出，因为它每天产出的煤炭比其他任何设计都多——而且是多了很多倍。这种生产力最高的矿井设计也比其他矿井类型有更少的重大伤害，并且团队士气极高，像铁一样坚固！
- en: Trist and Jacques also found that this productive type of mine had 100% attendance,
    and people were coming in every day. And that was odd, because for most mines,
    30% of the workforce wouldn't show up on any working day, because coal mining
    was dangerous and there were a lot of other jobs available most days in post-war
    Britain.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Trist和Jacques还发现，这个高生产力的矿井达到了100%的出勤率，工人们每天都来工作。这很奇怪，因为在大多数矿井里，30%的劳动力在任何工作日都不会到场，因为煤矿工作非常危险，而且在战后的英国，其他工作机会也很多。
- en: 'To find out why this highly productive mine had 100% attendance, Trist and
    Jacques talked to the people after their shifts, but they still couldn''t find
    anything different. So, they went down the mine themselves with the coal miners.
    At the top, the shift leader would meet all the coal miners to talk about everything
    they were supposed to do. But then, as they were down in the mine with the miners,
    Trist and Jacques immediately noticed something different: the group democratized
    the work.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了找出这个高生产力矿井为什么能做到100%的出勤率，Trist和Jacques在班后与工人交谈，但他们仍然找不到任何不同之处。于是，他们决定亲自下矿井，与煤矿工人一起工作。上面，班长会与所有的煤矿工人开会，讨论他们需要做的所有工作。但当他们与矿工们一起下到矿井时，Trist和Jacques立刻注意到了一些不同之处：这个小组实现了工作上的民主化。
- en: '**Viktor Farcic**: Okay. That''s a twist.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：好吧。这是个转折。'
- en: '**Kevin Behr**: What the miners were concerned with was: "What is the whole
    task?" Not what is the thing I''m supposed to do, and the thing you''re supposed
    to do... but what is the whole thing that we''re supposed to get done?'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kevin Behr**：矿工们关心的是：“整个任务是什么？”不是我应该做的事，或者你应该做的事……而是我们应该完成的整个任务是什么？'
- en: In one particular case, this might mean saying that we're going to need somebody
    to do the dynamite, or that we've got to blow up some holes here, and we need
    a safety person to make sure everything goes okay; or that we're going to need
    someone to do the jackhammer. They all had these different roles, and so their
    conversations sounded something like, "Hey, who didn't drink last night? You?
    No? Okay, you're doing explosives today."
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个特定的情况下，这可能意味着说我们需要一个人来处理炸药，或者我们需要炸一些洞，我们需要一个安全员来确保一切顺利；或者我们需要一个人来使用气锤。他们都有不同的角色，因此他们的对话听起来像是：“嘿，昨晚谁没喝酒？你？没有？好吧，今天你负责炸药。”
- en: Through this dialog, they would figure out how to divide the whole task into
    role-based work. They became self-organized and self-regulating based on who was
    the most capable person on the day to perform each important role.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种对话，他们会弄清楚如何将整个任务分解为基于角色的工作。他们根据每天谁最有能力来执行每个重要角色，变得自我组织和自我调节。
- en: In addition, another priority they had was to teach each other enough about
    each other's job so that if they got hurt in an accident, the team could pick
    up and still do what it needed to do to save everybody. So, they all learned a
    little bit of each other's job, enough to where they could do it. My question
    to you, Viktor, is, are you seeing the piece of modern DevOps here?
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，他们的另一个优先事项是相互教授足够的彼此工作知识，以便如果他们在事故中受伤，团队仍然能够接手并完成需要做的事情以拯救大家。所以，他们每个人都学了一些彼此的工作，足够让他们能够做这些工作。我的问题是，维克托，你在这里看到现代DevOps的一部分了吗？
- en: '**Viktor Farcic**: You''re talking about self-sufficient teams?'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔西奇**：你是在谈论自给自足的团队吗？'
- en: '**Kevin Behr**: Yes, and you know what? They did it! The funny thing is that
    their bosses never knew the difference, because their bosses were above ground
    where it was safe; they would never come down into the actual mines. So, when
    the miners knew what the whole task was, they literally self-organized based on
    capability. Like actual democratization of work.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯文·贝尔**：是的，你知道吗？他们做到了！有趣的是，他们的老板永远都不知道其中的区别，因为他们的老板都在地面上，待在安全的地方；他们从来不会下到实际的矿井里去。所以，当矿工们知道整个任务是什么时，他们会根据能力自发组织起来。就像是工作的真正民主化。'
- en: But it wasn't only that; they were also cross-training each other. Are you familiar
    with the Pareto principle?
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 但不仅仅是这样；他们还在进行交叉培训。你了解帕累托原则吗？
- en: '**Viktor Farcic**: Yes, it''s the 80/20 rule to most of us.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔西奇**：是的，对于我们大多数人来说，这就是80/20法则。'
- en: '**Kevin Behr**: Now, the *inverse* Pareto principle is very powerful. It says
    that there''s 20% of something you can learn that will allow you to do close to
    80% of the task. The inverse Pareto principle often works both ways, and so, what
    these coal miners were doing, I theorize, is that they were learning the inverse
    Pareto of each other''s jobs. And that is what DevOps is!'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯文·贝尔**：现在，*逆*帕累托原则非常有力。它说，有20%的东西你可以学到，这会让你完成接近80%的任务。逆帕累托原则通常是双向的，所以，我推测这些矿工们正在学习彼此工作的逆帕累托原则。而这正是DevOps！'
- en: We talk about people who are full-stack, but very rarely are we going to find
    someone who could actually do everybody's job. So, why not spread that out? What's
    really there isn't the tools or the technologies that they use, but the way they
    decide to interact around the day's work.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们常说某人是全栈工程师，但我们很少能找到一个人能够做所有人的工作。那么，为什么不把这些工作分开呢？真正重要的不是他们使用的工具或技术，而是他们如何决定在日常工作中互相协作的方式。
- en: '"DevOps is [...] helping each other understand enough of each other''s work,
    so that we can think about what''s next."'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: “DevOps是[...]帮助彼此理解足够的工作内容，以便我们可以考虑接下来做什么。”
- en: — Kevin Behr
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: —— 凯文·贝尔
- en: I listened to Patrick Dubois give a talk about his work on a contract, I believe
    it was with a government agency, and he developed a piece of code that he needed
    to get into production. He talked about how hard that was. There was a small job
    to do, but the operations people made it so hard, and Patrick was saying "Why
    can't we work together?" And so, to me, that's what DevOps is.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我听了帕特里克·杜布瓦斯关于他在一个合同上的工作演讲，我相信那个合同是和某个政府机构合作的，他开发了一段代码，需要把它投入生产。他谈到这有多困难。工作本来不大，但运营人员让事情变得异常复杂，帕特里克当时说：“为什么我们不能一起合作呢？”对我而言，这就是DevOps的本质。
- en: DevOps is working across those lines, helping each other understand enough of
    each other's work, so that we can think about what's next. But the key word is
    empathy. Caring across boundaries.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps是在这些边界之间合作，帮助彼此理解足够的工作内容，以便我们可以考虑接下来做什么。但关键字是同理心。跨越边界的关心。
- en: '**Viktor Farcic**: You''re not the first person in this book I''ve talked to
    who has said that empathy is so important to DevOps.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔西奇**：你是我在这本书中遇到的第一个说同理心对DevOps如此重要的人。'
- en: Empathy and culture in an organization
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 同理心和组织文化
- en: '**Kevin Behr**: What do we mean when we talk about empathy in DevOps? We''re
    saying that we understand what it feels like to do what you''re doing and that
    I''ll never do that to you again. So, let''s build a system together that will
    allow us to never be there.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯文·贝尔**：我们谈到DevOps中的同理心时是什么意思？我们是说我们理解你做的事情的感受，我再也不会让你经历这样的事了。那么，让我们一起构建一个系统，避免我们再陷入这种困境。'
- en: 'DevOps to me has evolved into a lot of tools because we''re humans, and humans
    love tools of all kinds. As a species, we''ve defined ourselves by our tools and
    technologies. And, as a species, we also talk about culture a lot, but, to my
    mind, culture is a rearview mirror. Culture is just all the things that we''ve
    done: our organizational disposition.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，DevOps已经发展成了很多工具，因为我们是人类，而人类喜欢各种各样的工具。作为一个物种，我们通过工具和技术定义了自己。而且，作为一个物种，我们也常常讨论文化，但在我看来，文化就像是后视镜。文化只是我们所做的一切：我们的组织倾向。
- en: 'The way to change culture is to do things differently. Let''s not wait for
    culture, because culture is in the rearview mirror: it''s the past. If you''re
    in a transition, then what are you transitioning toward and what does that mean
    about how you need to act?'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 改变文化的方式是做事的方式不同。我们不要等待文化，因为文化在后视镜里：它是过去。如果你正在经历转型，那么你转型的目标是什么，这意味着你需要如何行动？
- en: 'The very interesting thing about DevOps is that while frequently, its mission
    is to create a change in the culture of an organization, this change requires
    far more than coordination: it also requires pure collaboration, and co-laboring.
    These can be particularly awkward to achieve given the likelihood that we haven''t
    worked with the people in an organization before. And it can become intensely
    awkward, when those people may have already made villains out of each other because
    they couldn''t get what they wanted. The goal of the DevOps process is to create
    a new culture, despite these challenges.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 关于DevOps，非常有趣的一点是，虽然它的使命通常是创造组织文化的变化，但这种变化需要的不仅仅是协调：它还需要纯粹的协作和共同劳动。考虑到我们可能以前没有和组织中的人一起工作，这些都特别难以实现。而且，当这些人可能已经因为没能得到想要的东西而把对方视为敌人时，情况就会变得非常尴尬。DevOps过程的目标是创造一种新文化，尽管面临这些挑战。
- en: '**Viktor Farcic**: Yes, part of the DevOps puzzle is how we can achieve pure
    collaboration in the middle of very awkward situations, with people we don''t
    know very well.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：是的，DevOps难题的一部分是，我们如何在非常尴尬的情况下，与我们不太熟悉的人之间实现纯粹的协作。'
- en: '**Kevin Behr**: What people don''t understand is that DevOps is hard. Working
    across those lines is hard. We don''t have to do DevOps, it''s optional—and so
    doing DevOps is hard. But changing culture means changing the way we do things
    in organizations. If we keep doing things differently, then we''ll look back and
    we''ll see that our culture has changed.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯文·贝尔**：人们没有理解的是，DevOps很难。跨越这些界限工作很难。我们不必做DevOps，它是可选的——因此做DevOps是困难的。但改变文化意味着改变我们在组织中做事的方式。如果我们继续做事不同，那么我们回头看看，会发现我们的文化已经改变。'
- en: '**Viktor Farcic**: Exactly, but these things also take some time.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：没错，但这些事情也需要一些时间。'
- en: '**Kevin Behr**: Yes, if we do things differently for two weeks and we then
    look back and conclude that this didn''t change our culture, the issue is certainly
    that people didn''t understand the relationship between what they''ve always done
    versus what they''re doing now. DevOps empathy enables cultural change because
    it enables behavioral change.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯文·贝尔**：是的，如果我们在两周内做些不同的事情，然后回过头来看，得出结论认为这并没有改变我们的文化，那么问题肯定是人们没有理解他们一直以来做的事情与现在所做的事情之间的关系。DevOps的共情能力促进了文化的变化，因为它促进了行为的改变。'
- en: '**Viktor Farcic**: And DevOps also enables collaboration.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：而且DevOps也促进了协作。'
- en: '**Kevin Behr**: Yes, collaboration is beneficial to both parties. From a game
    theory perspective: if I maximize my utility, then you do too. But also, from
    the non-rational and relational standpoint of human beings, there is the benefit
    of building strength through diversity. When we look at technology teams, we can
    tell from a DevOps standpoint whether they''re together, as a team, or apart.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯文·贝尔**：是的，协作对双方都有益。从博弈论的角度看：如果我最大化我的效用，那么你也会最大化你的效用。但从人类的非理性和关系的角度看，还有通过多样性建立力量的好处。当我们观察技术团队时，我们可以从DevOps的角度看出他们是否作为一个团队聚集在一起，还是分散开来。'
- en: '"The goal of the DevOps process is to create a new culture. [...] But changing
    culture means changing the way we do things in organizations. If we keep doing
    things differently, then we''ll look back and we''ll see that our culture has changed."'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: “DevOps流程的目标是创造一种新文化。[...] 但是，改变文化意味着改变我们在组织中做事的方式。如果我们继续做事不同，那么我们回头看看，会发现我们的文化已经改变。”
- en: — Kevin Behr
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: — 凯文·贝尔
- en: '**Viktor Farcic**: Are most technology teams you see together or apart?'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：你看到的大多数技术团队是聚在一起还是分开？'
- en: '**Kevin Behr**: In America, many large enterprise companies have adopted DevOps,
    but what we tend to encounter there in reality are "special teams" within those
    organizations; or technology groups that are "paramilitary organizations" as it
    were. These types of technology groups don''t have to follow the same rules as
    everybody else, and so they tend to be successful in their short term because
    they have fewer constraints. And, of course, we can make pilots for them that
    have low bars; and can set very easy things for these teams to jump over.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kevin Behr**：在美国，许多大型企业公司已经采纳了DevOps，但在实际情况中，我们通常会遇到这些组织内的“特种团队”；或者说是一些“准军事化组织”的技术团队。这些类型的技术团队不需要遵循与其他团队相同的规则，因此它们在短期内往往能取得成功，因为它们有更少的约束。当然，我们可以为它们设计一些低门槛的试点，并为这些团队设置一些容易跨越的任务。'
- en: 'I''ve talked to a lot of CIOs and enterprises, and they love this idea of DevOps
    having agile infrastructure, and agility all the way through their value stream.
    The main issue is that those CIOs just don''t know how to manage DevOps. Do I
    have teams? Do I have a VP? My response is always the same, and I say, "Listen,
    I think of DevOps more like this: you can now have teams working on projects together."'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我和许多CIO以及企业交流过，他们喜欢DevOps拥有敏捷的基础设施，并且在整个价值流中都具有敏捷性。主要问题在于这些CIO们根本不知道如何管理DevOps。我是不是应该有团队？我是不是应该有一位副总裁？我的回答始终如一，我说：“听着，我更倾向于将DevOps看作这样：现在你可以让团队共同开展项目。”
- en: But consider volunteer fire departments. Do you have those in Spain?
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 但请考虑志愿消防队。西班牙有这样的组织吗？
- en: '**Viktor Farcic**: I know they exist.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我知道它们的存在。'
- en: '**Kevin Behr**: So, in America, some towns can''t afford to professionally
    pay for firemen, and so they have volunteers that all wear radios. If there''s
    a fire, they''ll all get a signal on the radio that''s very loud, and they''ll
    go driving like crazy to the fire station, get in the trucks, and go out and deal
    with the fire.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kevin Behr**：所以，在美国，一些小镇无法负担专业的消防员工资，因此他们有志愿者，所有人都佩戴无线电。如果发生火灾，他们都会收到一个非常响亮的无线电信号，然后他们就会疯狂地开车到消防站，跳上消防车，去处理火灾。'
- en: 'This is called a crew, and in a crew, there''s a very important set of understandings.
    The first is that these people have a day job, and so one minute they might be
    doing some accounting, but in the next minute, if they get the signal, then they
    run: now they''re a firefighter. The second understanding is that when they are
    being a firefighter, perhaps on their way to a fire, they already know what to
    do; they are pre-trained. Much like the scenario with the miners, when they need
    to be firefighters, they already know their roles and responsibilities.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这被称为“工作组”，在一个工作组中，有一套非常重要的理解。首先，这些人有主职工作，因此他们可能一分钟在做会计工作，但下一分钟，如果他们收到信号，他们就会迅速行动：现在，他们是消防员。第二个理解是，当他们成为消防员时，可能在前往火灾现场的路上，他们已经知道该怎么做；他们是经过预训练的。就像矿工的情形一样，当他们需要成为消防员时，他们已经知道自己的角色和责任。
- en: My point here is that many of the successful DevOps interactions I see also
    involve a crew that assembles. There's some infrastructure, some developers, and
    some security people, who all get on the team; they know their roles, and they
    know the mission. They get it done. Bam!
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我的意思是，我看到的许多成功的DevOps互动也涉及到一个组成的工作组。有一些基础设施，一些开发人员，还有一些安全人员，他们都加入了团队；他们知道自己的角色，知道任务是什么。他们完成了任务。砰！
- en: '**Viktor Farcic**: And then you want to start spreading the success of that
    team!'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：然后，你要开始传播那个团队的成功！'
- en: '**Kevin Behr**: Yes! Every five times that the team is together, you should
    add another crew. They won''t be great at the start, but they''ll be learning.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kevin Behr**：是的！每当团队聚集五次时，你应该增加另一个工作组。它们一开始可能不会很出色，但它们会在学习。'
- en: The broad idea here is to create a playbook of signals so that we can let an
    organization know when collaboration is important. Of course, it takes some level
    of ability to make sense out of what's happening around you. This means that,
    as engineers, we sometimes have to look up from the keyboard, or take off our
    headphones, and notice what's actually happening.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的广泛思想是创建一套信号手册，以便我们可以让组织知道何时需要合作。当然，这需要一定的能力来理解你周围发生的事情。这意味着，作为工程师，我们有时必须抬起头离开键盘，或者摘掉耳机，注意到周围到底发生了什么。
- en: '"As engineers, we sometimes have to look up from the keyboard, or take off
    our headphones, and notice what''s actually happening."'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: “作为工程师，我们有时必须抬起头离开键盘，或者摘掉耳机，注意到周围到底发生了什么。”
- en: — Kevin Behr
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: — Kevin Behr
- en: '**Viktor Farcic**: You believe that DevOps has a social component then?'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：你认为 DevOps 有社会组成部分吗？'
- en: '**Kevin Behr**: Yes, the idea with socio-technical systems is that people come
    before the technology; and that the technology serves the people. This is in contrast
    with when we talk about techno-socio, which means the machines dictate how we
    organize, how we work, and how we even lay out the *way* we work.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯文·贝尔**：是的，社会技术系统的理念是人优先于技术；技术为人服务。这与我们讨论的技术社会不同，后者意味着机器决定我们如何组织、如何工作，甚至如何布局我们的*工作方式*。'
- en: 'What I observe is that DevOps has its roots in socio-technical empathy. This
    comes from individuals such as Patrick Dubois saying: "Why can''t we work together?"
    Likewise, individuals such as Andrew Clay Shafer, who suggests that all our infrastructure
    should be agile, and essentially code.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我观察到，DevOps 的根源在于社会技术的共情。这来自像帕特里克·杜博伊斯这样的人，他说：“为什么我们不能一起工作？”同样，像安德鲁·克莱·谢弗这样的人建议，我们所有的基础设施应该是敏捷的，基本上是代码化的。
- en: 'I remain close to Andrew, and I talked briefly to Patrick on Twitter quite
    a while ago. To me, their work is certainly part of a socio-technical system:
    where people work together and share. We''re going to automate stuff on the machines,
    so we have more time to experiment, learn and collaborate on the important things.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我依然与安德鲁保持联系，几个月前我在 Twitter 上与帕特里克简短交流过。对我来说，他们的工作显然是社会技术系统的一部分：人们共同工作并分享。我们将在机器上自动化一些事情，以便有更多时间进行实验、学习和在重要事项上合作。
- en: '**Viktor Farcic**: In that sense, tools have an important place in your idea
    that DevOps helps to create a socio-technical system?'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：从这个意义上讲，工具在你认为 DevOps 有助于创造社会技术系统的理念中占有重要地位吗？'
- en: '**Kevin Behr**: Yes, it''s obvious how important tools have now become in DevOps,
    and the reason for this is because people are learning how to perform many of
    the techniques that DevOps people tend to like to do—from continuous delivery,
    continuous integration, continuous deployment, or automated testing. In many cases,
    we''ve now got tools in front of people.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯文·贝尔**：是的，很明显，工具在 DevOps 中现在变得如此重要，原因在于人们正在学习如何执行 DevOps 中常见的许多技术——从持续交付、持续集成、持续部署到自动化测试。在很多情况下，我们现在将工具放在了人们面前。'
- en: So today, when you see people talking about how to do DevOps, the first thing
    that they mention is a toolchain; and I'm saying to myself, "So now you're organizing
    your team around the tools?" This doesn't seem right.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 所以今天，当你看到人们讨论如何做 DevOps 时，他们首先提到的是工具链；我在心里想，“所以你们现在是围绕工具来组织团队了吗？”这似乎不太对劲。
- en: '**Viktor Farcic**: Is that *the* fundamental misunderstanding of what DevOps
    is about?'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：那是不是*对* DevOps 的根本误解？'
- en: '**Kevin Behr**: Yes, it''s like the difference between Brandy and Courvoisier.
    All Courvoisiers are Brandies, but not all Brandies are Courvoisier.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯文·贝尔**：是的，这就像白兰地和科尔沃锡的区别。所有科尔沃锡都是白兰地，但并非所有白兰地都是科尔沃锡。'
- en: You can be working with some teams, across boundaries, on a very technical project.
    And everyone may even be collaborating in a DevOps style. But the teams are usually
    too focused on the tooling, and the tooling is dictating how the teams are working
    together. The tooling may even start to create divides.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能与一些团队跨越边界，在一个非常技术化的项目上合作。每个人甚至可能都在以 DevOps 风格进行协作。但团队通常太专注于工具，而工具决定了团队如何合作。工具甚至可能开始制造分歧。
- en: Sometimes, when I'm working with an organization, I talk about archetypes, or
    stereotypes. When I do this, I use the Winnie the Pooh story. I believe that all
    of Christopher Robin's friends... Pooh Bear, Rabbit, Tigger, all of them, are
    different manifestations of Christopher Robin himself. It's kind of an interesting
    way of exploring different parts of Christopher Robin's personality. And then
    I like to say that product managers are like Tigger because they're very excited
    about the thing I'm going to do. The developers are more like Rabbit, while the
    infrastructure people are like Eeyore, because they walk around saying "thanks
    for noticing me." My point is that teams are a mixture of different personalities.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，当我与某个组织合作时，我会谈论原型或刻板印象。每当这样做时，我都会用《小熊维尼》的故事。我相信，克里斯托弗·罗宾的所有朋友——小熊维尼、兔子、跳跳虎——他们都是克里斯托弗·罗宾自己的不同表现。这是一种探索克里斯托弗·罗宾个性不同方面的有趣方式。然后，我喜欢说产品经理就像跳跳虎，因为他们对我要做的事情非常兴奋。开发人员更像兔子，而基础设施人员则像厄尔，因为他们走来走去，总是说“谢谢你注意到我。”我的观点是，团队是不同个性混合在一起的。
- en: In most teams, you've got a group of people who are very excited about new things,
    and a group who are not so excited, because all those new things seem to hurt
    them. For example, people in operations are often very skeptical, because they've
    been told a lot of things about how great everything is going to be, and yet they
    get pager calls at 02:30 in the morning to fix something they just deployed. Naturally,
    operations people tend to develop skepticism over time.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数团队中，你会发现有一群人对新事物非常兴奋，而另一群人则不那么兴奋，因为那些新事物似乎会伤害他们。例如，运维人员通常非常怀疑，因为他们已经被告知很多关于一切都会变得多么美好的话，然而他们却在凌晨2:30接到呼叫，去修复他们刚刚部署的东西。自然，运维人员随着时间的推移会发展出怀疑的态度。
- en: When you manage to introduce empathy to a team, the development and the operations
    people seem finally to come together. You suddenly hear someone in operations
    say, "Oh, can we do that differently? When you threw that thing at me last time,
    it gave me a black eye and I had to stay up for four days straight!" And the developer
    is like, "It did? How did it do that? Next time, if something happens, please
    call me, I want to come help." That empathy of figuring out what went wrong, and
    working together, is what builds trust.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当你设法将同理心引入团队时，开发人员和运维人员似乎终于能够走到一起。你突然听到运维人员说：“哦，我们能不能换个方式做？上次你把那东西扔给我时，它把我打了个黑眼圈，我不得不连续四天熬夜！”而开发人员则回答：“真的？它是怎么做到的？下次如果有问题，麻烦叫我，我想过来帮忙。”这种通过弄清楚问题所在并共同解决的同理心，正是建立信任的关键。
- en: Trust is key to successful DevOps
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 信任是成功DevOps的关键
- en: '**Viktor Farcic**: So trust is key to your vision of successful DevOps teams?'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：那么信任是你对成功DevOps团队愿景的关键吗？'
- en: '**Kevin Behr**: Yes, trust is vital. I''m convinced, for example, that the
    US military operates on the principle that you will move at the speed of your
    collective trust. You''ll see this same principle at work within your company
    or in your own team. When you''re frustrated that you can''t get things done,
    you should immediately assess the level of trust around you. Ask yourself, "Are
    things transactional here?" For example, if you place an order, do I then give
    you a plate? Or do we have a relationship, and do we have trust?'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯文·贝尔**：是的，信任至关重要。例如，我确信美国军方是基于这样一个原则运作的：你将以你集体信任的速度前进。你会在你的公司或你自己的团队中看到这个原则的运作。当你感到沮丧，觉得无法完成任务时，你应该立刻评估周围的信任水平。问问自己，“这里的事情是交易性的吗？”例如，如果你下了一个订单，接着我就给你一盘饭？还是我们有关系，并且我们有信任？'
- en: '"That empathy of figuring out what went wrong, and working together, is what
    builds trust."'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: “这种通过弄清楚问题所在并共同解决的同理心，正是建立信任的关键。”
- en: — Kevin Behr
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: — 凯文·贝尔
- en: 'I have a story I use to explore trust. I read an article where there was a
    conversation between a US General, who was in a foreign country, and a General
    from that poorer country. The General from the poorer country says to the US General,
    "You''re not a very good General!" The US General is curious to know why he''s
    not a very good General, and the conversation went something like this:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个故事用来探讨信任。我读过一篇文章，讲述了一位在外国的美国将军和一个来自贫穷国家的将军之间的对话。来自贫穷国家的将军对美国将军说：“你不是一个很好的将军！”美国将军好奇为什么他认为自己不是一个很好的将军，接下来的对话大致是这样的：
- en: '**US General:** *"Why don''t you think I''m a very good General?"*'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**美国将军：** *“为什么你认为我不是一个很好的将军？”*'
- en: '**Second General:** *"Because when you hand your soldiers weapons, you know
    that they''re not going to shoot at you."*'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**第二位将军：** *“因为当你把武器交给你的士兵时，你知道他们不会朝你开枪。”*'
- en: '**US General:** *"Yes, we build, and have trust."*'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**美国将军：** *“是的，我们建立并拥有信任。”*'
- en: '**Second General:** *"And when you give people 30 tanks, they''re not going
    to sell them on eBay."*'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**第二位将军：** *“当你给人们30辆坦克时，他们不会把它们卖到eBay上。”*'
- en: '**US General:** *"Yes. We have trust."*'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**美国将军：** *“是的，我们有信任。”*'
- en: '**Second General:** *"So, you don''t have to do very much—and so you must not
    be very good at this!"*'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**第二位将军：** *“所以，你不必做太多——所以你一定不太擅长这个！”*'
- en: '**Viktor Farcic**: I love that!'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：我喜欢这个！'
- en: '**Kevin Behr**: But then you know what the General said? He said, "*I guess
    you''re right!*" So now, the US military operates on a different principle: mission
    command. It''s no longer command-and-control at every layer. With mission command,
    the leaders state what they want the outcome to be, but not how we can do it.
    The leaders define signs of success and failure, and then they get their people
    to back-brief them, so that they all stay in sync.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯文·贝尔**：但你知道将军说了什么吗？他说：“*我想你是对的!*” 所以现在，美国军方按照不同的原则运作：任务指挥。它不再是每一层级都进行指挥与控制。通过任务指挥，领导者明确他们希望达成的结果，但不告诉我们该怎么做。领导者定义成功和失败的标志，然后让他们的下属向他们汇报，以确保大家保持同步。'
- en: Staying in sync is vital of course, because when the situation changes on the
    ground, the plan isn't necessarily going to stay the same. The team are able to
    improvise because they understand the intent of the commander, so they can find
    new ways of fulfilling that goal.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 保持同步当然至关重要，因为当局势发生变化时，计划不一定会保持不变。团队能够即兴发挥，因为他们理解指挥官的意图，因此能够找到实现目标的新方法。
- en: '**Viktor Farcic**: That''s brilliant.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：真棒。'
- en: '**Kevin Behr**: Right, and so when we use an intent style of management, it
    allows DevOps teams to figure out how to do things themselves; and they know better,
    because they''re closer to the work and they are guided by the intent and signs
    of success and failure.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯文·贝尔**：没错，因此当我们采用意图管理风格时，它允许DevOps团队自己找到解决方法；他们更了解情况，因为他们离工作更近，他们受到意图以及成功和失败的信号的指导。'
- en: With an intent style of management, we're also doing something that Reed Hastings,
    CEO of Netflix, talks about, which is developing team judgment. We're not just
    telling the team to go here or there and then just having them check to see whether
    they've arrived. Teams don't learn anything that way; they tend to just stop while
    people are shooting at them or until their leader tells them to move.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 采用意图管理风格时，我们还在做一件Reed Hastings，Netflix首席执行官所谈论的事情，那就是培养团队的判断力。我们不仅仅告诉团队去哪里或者去哪里后检查是否到达。团队这样是学不到任何东西的；他们往往会在有人向他们开火时停下来，或者直到他们的领导告诉他们继续前进。
- en: '**Viktor Farcic**: There''s a lot of pressure for teams to be efficient, of
    course. Managers want certainty, but we know from the military battlefield that
    the best plans will not always go as expected. Mission command does fix uncertainty.
    It''s a way to try to deal with it, right?'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：当然，团队面临着高效的巨大压力。管理者希望有确定性，但我们从军事战场上知道，最好的计划也不一定会按预期进行。任务指挥确实能解决不确定性。这是试图应对不确定性的一种方式，对吧？'
- en: '**Kevin Behr**: Yes, what the managers want to know is exactly when the plan
    is going to work! In organizations where we have resilience-based engineering,
    the expectations are, of course, that things *will* break. The first step is to
    acknowledge that things break, and the second step is to recognize that it''s
    very important how we deal with things when they do break—both during, and afterward.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯文·贝尔**：是的，管理者想知道的是计划什么时候能够成功！在我们拥有基于韧性工程的组织中，期望当然是事情*会*出错。第一步是承认事情会出错，第二步是认识到我们在事情出错时如何应对是非常重要的——无论是过程中，还是事后。'
- en: First then, how do we solve the problem in front of us? Then, as we fix what
    is broken, we regain our morale and our strength. Sometimes, this involves taking
    a couple of days off after we've been up awake for two nights straight.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们如何解决眼前的问题？然后，在修复已经破损的部分时，我们重新获得士气和力量。有时，这意味着在连续两晚未眠后，休息几天。
- en: The next step is, how do we get our passion back? We need to apply that passion
    to make sure these things never happen. It's a constant process of celebration,
    defeat, victory, celebration, and defeat.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的步骤是，如何找回我们的激情？我们需要把这种激情应用到确保这些事情永远不会发生的过程中。这是一个不断的庆祝、失败、胜利、庆祝和失败的过程。
- en: In the United States, this process tends to create a lot of burnout. We have
    a lot of pressure put on people, and they work a lot of hours that they shouldn't
    need to work. Technology jobs are not only difficult technically, they're also
    a difficult lifestyle. If you are alone and isolated in a hard job, and you don't
    have people to collaborate with, and you have impossible deadlines, and unreasonable
    coworkers, then you're going to be depressed. You're not going to do your best
    work, and you're going to leave the company... which leads to even bigger issues,
    because we all know that software developers and good infrastructure people are
    hard to find.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Those people can find another job in a week, so they will
    leave.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: I try to explain this to company leaders, and they''re like:
    "Well, we''re going to cut costs." But there are a lot of ways you can cut costs;
    the first thing is to become more effective, because only then you can become
    truly efficient. If you''re trying to be efficient before you''re effective, then,
    in the long run, it will always cost more.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: It doesn't have to be this way. I have found that when these teams begin to
    work together, and as people get drawn into new levels of collaboration and coordination,
    those people who were alone, those people who were depressed, and those people
    who have been working too hard, they get empathy from the people around them.
    Suddenly you start to hear things like, "Oh, I know what that feels like," and
    "Oh, I know that woman, and the next time that happens to her like that, maybe
    we'll go get a coffee together so we can encourage her to keep at it."
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '"...as people get drawn into new levels of collaboration and coordination,
    those people who were alone, those people who were depressed, and those people
    who have been working too hard, they get empathy from the people around them."'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: —Kevin Behr
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: When I was a developer, I don''t think I ever even met an
    infrastructure person. How could I have ever possibly developed an empathy with
    someone when I wasn''t even sure that person existed? For all I knew, there could
    just have been a script running that was making me wait for a long time!'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: A human "for-next" loop!'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Yes, because for all I knew, I''ve never met an infrastructure
    person.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: That''s such a good point, because if we don''t even get to
    meet someone, how can we build empathy? And it''s not enough to only meet people
    during problem situations, or on conference firefighting calls, because those
    are not the places to build empathy.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I''ve met some people only when they yell at me.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Yes, which creates negative reinforcement and deprecates social
    capital. One of the first and most important things you do with a new situation
    is ask your key vendors to support company social events for the teams. You''d
    be surprised; a lot of teams want to engage. Organizations can find creative ways
    to get people together.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯文·贝尔**：是的，这会造成负向强化并削弱社会资本。在面对新情况时，首先最重要的事情之一就是要求你的主要供应商支持公司的团队社交活动。你会感到惊讶，很多团队都希望参与。组织可以找到创造性的方法把人们聚在一起。'
- en: Earning the right to be heard
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获得被倾听的权利
- en: One very subversive way to get people together is to start a Lean Coffee approach
    to meetings. If you can convince a grumpy Eeyore to come to your Lean Coffee meeting
    and you just ask and listen, then you're already creating change. The change issue
    you're solving when you do this is that people want to be heard and they want
    to feel some interest or empathy from other people before they want to listen.
    But it's important, during change, to earn the right to be heard among each other—by
    first listening.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 一种非常具有颠覆性的方法是采用 Lean Coffee 方式来召开会议。如果你能说服一个脾气暴躁的伊eyore（小灰）来参加你的 Lean Coffee
    会议，并且你只是提问和倾听，那么你已经在创造改变。你通过这种方式解决的改变问题是，人们希望被倾听，并且希望在愿意倾听之前，能感受到他人的兴趣或同理心。但在变革过程中，重要的是通过先倾听来获得彼此被倾听的权利。
- en: '"It''s important, during change, to earn the right to be heard among each other—by
    first listening."'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: “在变革过程中，重要的是通过先倾听来获得彼此被倾听的权利。”
- en: —Kevin Behr
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: —凯文·贝尔
- en: If somebody who has dealt with the operations and infrastructure side can come
    to the Lean Coffee, then everyone can listen to what that operations person is
    saying. People in both the development and the operations groups are likely to
    be cynical at first. To make progress, somebody must be able to start trusting.
    Team members must trust at first, and listen, and listen, and continue to listen.
    People need to remove their filters, and they will find it helpful to imagine
    that the other person has positive intent in what they're saying, even though
    it may not sound like it at first. This is something many have been able to do
    in Lean Coffees. You put all your topics out, and you vote on the topics. If we
    have a new member, I have a bias to make sure new members talk and get it.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个曾经处理过运营和基础设施方面事务的人能够来参加 Lean Coffee，那么每个人都能听到那个运营人员在说什么。开发和运营小组中的人最初可能会感到怀疑。为了取得进展，必须有人能够开始信任。团队成员首先要学会信任，并且要倾听，持续地倾听。人们需要去除过滤器，设想对方所说的内容是出于积极意图，即使一开始可能听起来并非如此。这是许多人在
    Lean Coffee 中能够做到的事情。你将所有话题列出，并对这些话题投票。如果我们有新成员，我会有偏见，确保新成员能发言并且理解。
- en: 'If it''s your first time on a Lean Coffee, you get to talk about what you want,
    and everyone will listen. I think when people feel heard, they are usually more
    apt to listen to you. Honestly, have you ever noticed how much people talk over
    each other? We''re so busy trying to show each other that we know what we''re
    all talking about and that we''re smart that we often missing the point. I see
    that creep into a lot of things. So yes, you''re right, Viktor: getting together
    when you''re not having a problem is massively important.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是你第一次参加 Lean Coffee，你可以谈论你想谈的事情，大家都会倾听。我认为当人们觉得自己被倾听时，他们通常更愿意去倾听你。老实说，你是否注意到人们是多么地互相打断对方？我们太忙于向彼此展示我们知道自己在谈论什么，并且表明我们很聪明，以至于我们常常会错过重点。我看到这种情况在许多事情中都有出现。所以是的，你说得对，维克托：当你没有问题的时候聚在一起是非常重要的。
- en: '**Viktor Farcic**: How else can we help people collaborate?'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔西奇**：我们还能通过什么方式帮助人们进行合作呢？'
- en: '**Kevin Behr**: I like to use Toyota Kata to help people learn how to collaborate.
    Toyota Kata was first established in 2009 by Mike Rother. It''s a simple way to
    improve a problem situation, and it gives us a scientific method to do this.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**凯文·贝尔**：我喜欢用丰田 Kata 来帮助人们学习如何合作。丰田 Kata 是迈克·罗瑟（Mike Rother）于 2009 年首次提出的。这是一种改善问题局面的简单方法，并且为我们提供了一种科学的方法来实现这一目标。'
- en: You begin the Toyota Kata method by defining a target condition, something that
    should be in good order to have an optimum or positive result. Only then do you
    look at the actual condition you're starting with.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 你开始使用丰田 Kata 方法时，首先要定义一个目标状态，这个目标应该是良好的秩序，以便得到最佳或积极的结果。只有在此之后，你才会查看你当前的实际状态。
- en: 'Next, you say: "If we are going to solve this problem, what''s the first obstacle
    we''re going to run into when we try to achieve the target condition?" You make
    a small list, and then you think about the people that are involved in that problem.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: What I'll often do then is bring some infrastructure people and some software
    developers together, and we'll give them a common problem. We'll ask them to use
    Kata together to solve the problem. They will then run experiments together, and
    typically the first one won't go so great; the second one–hmm; and the third one—no
    fights.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Nobody''s hurt.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Correct! They start solving some problems together, and they
    start to appreciate each other''s abilities to solve problems. The operations
    and development teams may speak different languages to each other, but what I
    found is that Kata standardizes the language and the patterns around the problem.
    This allows the operations and development teams to enter a collaborative problem
    solving sequence, because the language barrier is smaller.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: The Improvement Kata is a great way to teach infrastructure people about Agile
    and Lean. I once ran an Improvement Kata with a group of product managers and
    software developers. The problem was that the product managers were just making
    up things for dates. This had led the developers to think "This has to be done
    here, and that has to be done there." Then on the other side, the product managers
    thought the developers were overestimating everything to build themselves safety—which
    is a pretty common problem.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: While I was working with that group, I said to them, "Your goal is that you
    want a measurable target condition. You want an average cycle time for a story,
    and your average story is one day size." I then said, "You want your cycle time
    for these sprints to go down by 20 percent." The infrastructure people said things
    such as, "So what does that have to do with us?" Meanwhile, the product managers
    said, "How can we improve? That's up to them!" And the developers replied, "You
    set the deadlines!"
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: So, the team went immediately into conflict. But I told them that none of that
    was important right at that moment, because the reality was that both teams contributed
    to hitting the target condition. So, using the Improvement Kata, we looked at
    obstacle one; what is it, and what's the first thing we're going to run into?
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Engineers are usually awesome at finding problems, because they tell you all
    the problems you're going to have; and so, once you get them focused on the problem,
    they will obliterate it. If engineers have got a problem in their head, they take
    it home, and they can't stop thinking about it; they can't let go of it until
    they crush it.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: That''s something I agree with from my own experience as
    an engineer.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Once engineers have put their heads into an issue, they come
    back with an idea, and then we want to tell somebody. But while a lot of that
    is about personalities, and perhaps who is most outgoing, it''s also about making
    space for the person who is quiet, so that they can say what they need to say.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: In the situation I just mentioned with the product managers and developers,
    a product manager finally came back and said, "Listen, I realize that what we've
    been doing is asking you to estimate something, and then turning your estimate
    into a commitment, which isn't fair because I don't like it when people do that
    to me."
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: That doesn't seem fair does it? To hold someone to an estimate, when they've
    never previously done the thing that they're being asked to do. In which case,
    would it be fairer for me to ask you, "How long would it take if everything went
    right?", and then I checked in with you when that time happens? That way, you
    don't build a buffer, I'm not holding you to this, and all I'm going to do is
    check in with you. So, what would that do?
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Let's think about this some more. If a project manager came up to you like in
    the old days and said, "How long does it take you to do this?", you may reply,
    "Well, I've never done that before. But I did something kind of like that, and
    it took me two days. The thing you're asking me to do today is a bit harder, so
    maybe I'll say that it's three days. And then, to be on the safe side, I'll say
    that it will take five days." The person you're talking to in those old days then
    says to you, "Okay, I'll come and see you on Friday then," and they'll know you'll
    be done when they arrive. So, the project manager comes back on the Friday, and
    you say to them, "Ah, it's going to take me another day, maybe two." Now at this
    point, the project manager must go back and move all the things around on the
    plan. It pushes the date out, which often causes a lot of fear.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's try that differently. This time, the project manager says to you,
    "Tell me what you can do if everything goes right, and I'll just check in with
    you, there's no commitment." So, the project manager comes back on day two, and
    they ask you, "How is it going?" You might say, "Well, I'm going to need another
    day and a half." The project manager replies, "Okay, that sounds great, but you're
    pretty sure about that?" And you're like, "Yes, that's a commitment. It's time
    now for me to do this, and I know what I'm doing." The project manager comes back,
    and it's done. Please take note that in this second sequence, the project manager
    finds out that you need more time on day two—instead of day five!
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Exactly.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: If you''re a project manager, or if you''re running sprints
    and you''re a scrum master, then naturally you add the usual buffer that people
    will incorporate in almost every task. Then, as long as your due date is after
    your buffer, all you need to do is manage every little instance where you lose
    some time by finding some extra time somewhere else in the whole project.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: What you're doing in that sequence, most often, is finishing ahead of time!
    This is called Critical Chain, which Goldratt invented. Critical Chain basically
    asks you to identify your most constrained resource in a project, and it then
    subordinates all the other project elements to that constrained resource.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: 'We called it the Brent Paradox in *The Phoenix Project*. What we encountered
    there was a very fortunate situation where one of the product managers had read
    *Critical Chain*, the book by Goldratt. This project manager was like: "It''s
    so unfair that developers get yelled at when they can''t meet an estimate." And
    suddenly, we saw all these things that we hadn''t seen before: we had no estimates,
    and we had all these different groups of people reacting to that problem. We also
    had different people thinking about their management style in various ways, and
    different people interpreting in their own ways what it was that we were even
    trying to commit to!'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: That''s a very divisive situation you''re describing.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Yes absolutely, because when something unexpected happens,
    all those groups of people will feel pressure to take the blame or the credit.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: There is an alternative, of course, which is that you give people the ability
    to trust each other through experience of working together. Then, when problems
    do happen, people are a lot more able to withstand the blow of the problem, because
    socially they have a basic understanding of who can do what. They will then know
    what you're good at, and what I'm not good at, and begin to cooperate. I don't
    know about you, Viktor, but I would rather be in a terrible problem with people
    I know and trust!
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: That''s not just you, Kevin! I think that''s true for everybody.
    You would have to be a real psycho to face problems with people you don''t know
    or trust.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Right! So, you''d have to be a management person, because,
    at the end of the day, a lot of things that people in higher management do are
    without compassion, or empathy. They have no idea what difficulties that causes
    for people below them.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '"In DevOps, we ask ourselves how we can create an environment that''s resilient."'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: — Kevin Behr
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: In DevOps, we ask ourselves how we can create an environment that's resilient.
    We don't all need to be best friends, but we do need to have a working relationship
    together, and it needs to not focus on blame.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: The Yin and Yang of DevOps
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A key part of building a no-blame culture is about how to do the postmortem.
    How do you do the retrospectives correctly, so that blame is not an issue? How
    do you create the environment where, if somebody makes a mistake and it causes
    an outage, that they raise their own hand and say, "Hey that was me, I did that,
    and what do I need to learn because that happened?" Through that kind of attitude,
    the whole team will learn.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: What you do in the postmortem *stays in the room*, because the team trusts each
    other, and they'll solve it. I find that a lot of organizations don't build trust
    this way, and people in those organizations tend to be focused instead on building
    security for themselves in their jobs. The result is that those people will sometimes
    be opposed to each other.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: This is surely related to what you were saying at the very
    beginning of this discussion: that companies were, or still are, too much focused
    on how to prevent problems from happening, and how problems will be solved? To
    me, what you just said is the human side of the same coin.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Exactly right. It''s a Yin and Yang situation. To me, watching
    what''s going on with DevOps and the confusion about its meaning is astonishing.
    I recently read that 80% of IT managers are interested in DevOps. They then asked
    those same people if they were confused about what DevOps means, and 80% of them
    again raised their hands! That''s a bad combination—but, you know, we do this
    in all kinds of other aspects of life as well; it''s a human quality!'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Yes, wherever I go, in most cases, I see a complete misunderstanding
    of DevOps, at least from my perspective, and, like you, I happen to think that
    the problem is in human nature itself.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: 'DevOps isn''t as easy to understand as an idea such as Scrum, because with
    Scrum, you just come in every day at nine o''clock and stand on your feet for
    fifteen minutes. The Scrum is very precisely defined: what you do, when you do
    it, and how you do it.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to DevOps, you hear people say, "You need to solve problems together
    to do DevOps." And that's all they say, which leaves everyone wondering what it
    really means to solve those problems. You then hear, "Should I buy Jira? Is that
    what you're telling me?" So, they go and buy Jira, and then say, "Now we're DevOps."
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: "Now we''re DevOps," exactly! That''s the joke! I did an engagement
    in Germany, and they were having this same problem: those people *thought* they
    were doing DevOps! They had a very, very detailed plan about where everything
    should go, with procedures and policies. But when I asked them, "What happens
    when you say you are doing DevOps," they replied, "Oh, that''s what we do when
    there''s no playbook." It''s just like you describe, Viktor—they completely misunderstood
    what DevOps is.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: Gene Kim and his team wrote a book called *The DevOps Cookbook* to show people
    how to do some new things in DevOps, but also to introduce some of the thinking
    behind DevOps. As I've already said, what I feel is often missing is that basic
    empathy and compassion, and if you go to a *DevOps Days* conference, you'll hear
    about empathy. Empathy is still my number one priority.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: So, if you're doing DevOps, then the job of leaders is to enable empathy, learning,
    and judgment. If you're doing DevOps, then leaders can spend less time managing
    how people do the job, and less time seeking evidence about the way people are
    doing and thinking about the job. If I'm a leader, and I can help you develop
    your mind, then I don't have to keep checking on you. I'd rather have fewer people
    with fewer rules, and people who have better judgment. The more rules you need
    to have, this is a sign that maybe you don't trust people or trust people's judgment.
    We already talked about how important trust is.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '"If you''re doing DevOps, then the job of leaders is to enable empathy, learning,
    and judgment…then leaders can spend less time managing how people do the job,
    and less time seeking evidence about the way people are doing and thinking about
    the job."'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: —Kevin Behr
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: The whole point would be that we enable people to use their
    brain. Like they would take the approach of saying, "From now on, I''ll allow
    you to actually solve the problem—instead of just applying steps A, B, and C."'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Yes, because then you enable people to turn the more holistic,
    problem-solving parts of their brain on then. You don''t just want their lizard
    brain, or limbic brain, turned on—because it''s not just about survival.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: In fact, one of the early pioneers in the socio-technical systems approach,
    a guy called Eric Trist, went as far as to say that learning on the job is a *human
    right*, and that if you don't practice this right, then you're a machine, and
    you should really be replaced by a machine. But if people cannot provide an environment
    for you to learn while you're working, you might as well get a job somewhere else.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: The good news is that many technology professionals are very fortunate in this
    sense. Not everyone is so lucky of course, but there are ways to learn no matter
    where you are, and even if the company or its managers hinders you, you can still
    learn. If the company helps you and you have the desire to learn, and maybe you
    happen to have someone you can collaborate with, then—suddenly, you have a real
    chance to learn and maybe to solve something together.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: 'This is something that people do not understand, the higher up you move in
    an organization. As Russell Ackoff says, and I''m paraphrasing: the lower you
    move in an organization toward the line workers, the more they know about fewer
    things. And yet, the higher up you move in the organization, the less you know
    about more things!'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: Engineers always love that joke, but it's true. As you move up an organization,
    you must generalize more, and you must have a lot more knowledge. But the other
    thing is that when you're an individual, you can solve the problems yourself in
    many cases—because you can work on something. When you're a manager or even a
    director, you find that you must instead build consensus, collaboration, and teams
    to solve problems. You realize that your problems are not problems you can solve
    by yourself.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: For instance, I have to go talk to marketing if I'm in sales and I want to run
    a promotion, because I need them to tell people about it; and I need the permission
    of the CEO, but I also need to talk to the CFO to make sure we have money. There's
    a natural path of collaboration to get something done.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Toyota, the Taylor Principles, and Kanban
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: This reminds me of Taylor, back in the late 1980s and early
    1990s.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Yes, the division of labor, right? Now Taylor got us a long
    way. Taylor got us to Toyota, and Toyota started with Taylor principles. A lot
    of people do not realize how much of Toyota''s management system was scientific
    management.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: What I''m surprised about is how nobody stopped to consider
    whether it was actually a good idea to apply Taylor''s principles to software
    development. Because if I''m doing the same thing today as yesterday, which is
    the only way to apply Taylorism, then I really suck at my job.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Oh, I''m not saying that it was good. What I want to say is
    that it was better than what was there before, even if it was optimized around
    the idea of mass production.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Exactly.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Right now, we''re in a different era of mass customization,
    with totally different thinking. But you''re right, the thinking that was in place
    when the Taylor management style was a fad was very different from today. Nonetheless,
    Taylorism did get us to the beginning of Toyota, and to the mass production we
    saw in Ford.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: What a lot of people don't know is that Toyota's whole production system (TPS)
    came out of a period of bankruptcy. Toyota hired Taiichi Ohno, in 1950, when the
    bank owned them. The bank had said to Toyota, "You cannot make a car unless you
    have an order," to which Toyota had replied, "Why not?" The bank's point, here,
    was that Toyota had made so many cars that nobody wanted to buy, that they'd now
    spent all their money, and were now bankrupt. The bank was saying to Toyota that
    the only way they could really know that a car they built would sell was if that
    car had already been sold. So, what did Toyota do? They developed the pull system,
    and one-by-one flow, as a system goal.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: That''s certainly one way to think about it.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: But the important thing is that Toyota did all that at the
    lowest cost, because the one-by-one flow is not cheap at the beginning. By the
    end, they''d figured out how to make it cheaper, and continually cheaper, and
    cheaper, and cheaper, and cheaper. Toyota did not have any big bang moments during
    this sequence—they achieved everything through the daily application of Improvement
    Katas.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Including the invention of Kanban, though?'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: I mean, there was a point in the 1970s where Taiichi Ohno was
    running around saying, "The point of Kanban is to not need Kanban," and people''s
    heads were exploding! His point was that if you''re constantly looking at a board,
    or looking at a card, then you''re not looking around you. But Kanban is intended
    as a problem-solving method, for a specific problem, for a while; Toyota would
    then use the Kata to grow out of that.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: One day, Toyota realized that Kanban was powerful, and so... *everything* was
    Kanban! There were all these cards flashing around the Toyota plants, and all
    these signals, and Taiichi Ohno would say, "This is too much motion and waste."
    In the end, Toyota figured out how to have *a lot less* motion and waste. I think
    we go through that cycle in all kinds of technological breakthroughs.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Where, if something is good, then a lot *more* must be better?'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Yes, and I think we''re there with DevOps right now. You see
    people trying to add things to the portmanteau of DevOps, such as DevSecOps—with
    more and more things coming soon.'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: The optimal environment for DevOps
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is all cross-functional collaboration, and so the management questions
    become: What can you do to get out of the way? And how can you make it possible
    for people that don''t normally talk to talk, and under good circumstances? When
    they hear the vision, or when they hear their direction, you can bring people
    into working groups, and say to the infrastructure people, how are you going to
    help developers? Or developers, how are you going to help infrastructure people
    to do this, right? That is leadership.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: But DevOps has been largely a grassroots movement, and leadership
    hasn''t known what to do with DevOps, right?'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: No, management doesn''t know what to do with DevOps. They come
    back after a random meeting and say, "I want three DevOps, give me that! And now
    we need a VP of DevOps!"'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: The funny thing is that this isn''t even a joke! I''ve really
    met one of these "VPs of DevOps"!'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Oh, I''ve met several of them! I must, of course, respect the
    fact that they''re in a leadership position, but I don''t necessarily understand
    why they exist. The DevOps idea is that you''re supposed to be building teams
    with higher and higher levels of trust and judgment, and that''s supposed to move
    through the organization too!'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '"Management doesn''t know what to do with DevOps. They come back after a random
    meeting and say, ''I want three DevOps, give me that! And now we need a VP of
    DevOps!''"'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: — Kevin Behr
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: Organizations don't understand the environment that DevOps requires in order
    to flourish. In our corporate HR- and finance-driven models, structures, and organizational
    charts, we can feel trapped in those positions. We must understand that those
    positions are social constructs.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: For example, I point out to people in HR that their organization chart is just
    a hypothesis. I ask them, "Is this your best idea of how to organize the office
    work? How do you know that it works? Where are the tests?" Because if an organization
    chart doesn't work, then someone should change it.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: One of the ways I look for flexibility in an organization is by looking at how
    long it has been structured this way. Who can change it here? Could somebody,
    say a developer, walk up and say, "We have a problem. Our organization is keeping
    me from talking to this person, but I need to talk to this person, because we
    have a problem." And will anybody listen to them when they say this?
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Chances are... probably not.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: And because we like our boxes, and our pictures, and our compliance,
    and our work councils, and all those kinds of things, we then feel forced to participate.
    But what I''ve been showing people is that the organization chart is only an idea.
    The organization chart does not know about the project you have right now, nor
    the problem that you have right now. If the organization chart is preventing you
    from taking the correct actions, then maybe it''s time to sit back as a team and
    ask whether there''s a better way to do things. Maybe you don''t need permission
    to just get it done, or maybe you say, "Oh, sorry, I didn''t know that I couldn''t
    work with my neighbor."'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Exactly.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: I think a lot of times, we assume that the way we can work
    is based on boxes and charts, and I think we need to test and raze those assumptions.
    People who control organizational structure need to be more fluid around the possibilities
    for the organization. After all, organizations are always in transition toward
    something; they simply can''t and won''t remain the same.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '"People in the DevOps community are starting to see the larger organizational
    system. And once you see DevOps in the larger system picture of business, you
    see everything differently."'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: —Kevin Behr
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Are you optimistic that organizations can therefore improve?'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: '**Kevin Behr**: Yes, I have strong hope for DevOps in organizations, because
    the environment in which DevOps can thrive also exists in other systems. I believe
    that people in the DevOps community are starting to see the larger organizational
    system. And once you see DevOps in the larger system picture of business, you
    see everything differently. I''m hoping that the DevOps community starts to look
    up and see that they''re in this larger system, and how that system is itself
    part of an even larger system. I''m hoping that more organizations see that our
    only chance of steering our systems is by doing so together.'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
