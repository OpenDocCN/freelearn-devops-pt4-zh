- en: Introducing James Turnbull
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: James Turnbull leads a team of "CTOs in residence" at Microsoft who help start-ups
    build the right architecture and teams in order to be successful. A seasoned engineering
    and infrastructure author, James has published a series of books on those subjects.
    You can follow him on Twitter at `@kartar`.
  prefs: []
  type: TYPE_NORMAL
- en: What is DevOps?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Hello, James. I wanted to start our discussion with a question:
    what does DevOps mean to you? It''s a question that I find fascinating because
    everyone I''ve interviewed for this book has given me a different answer.'
  prefs: []
  type: TYPE_NORMAL
- en: '**James Turnbull**: I''m not sure that there is a single description for DevOps
    anymore. I started talking about DevOps in 2009, and although I wasn''t at the
    first DevOps event in Ghent, Belgium, that year, I was at the next one.'
  prefs: []
  type: TYPE_NORMAL
- en: I think when it first started out, DevOps was really about trying to build bridges
    between operations and their functions and developers and their functions, which
    largely focused around the moment of handover where the code goes from being in
    development to being deployed and in production. Then from there, we analyzed
    a lot of the problems with that particular challenge and identified that some
    of the issues were cultural, some were technological, like automation and tooling,
    while other issues were process-oriented.
  prefs: []
  type: TYPE_NORMAL
- en: '"These days, I think DevOps is a lot of different things to a lot of different
    people."'
  prefs: []
  type: TYPE_NORMAL
- en: —James Turnbull
  prefs: []
  type: TYPE_NORMAL
- en: These days, I think DevOps is a lot of different things to a lot of different
    people. I think if you work in marketing, there was a time when you just relabeled
    all your tools as your DevOps toolkit. It's 2019, and you still see a lot of companies
    with a DevOps page, or they outright call themselves "DevOps something" – as to
    whether those tools are DevOps or not, I'm not sure.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the day, DevOps is about ensuring that applications and products
    are built in a cross-functional way, so that product engineers, designers, operations,
    security, and business people all have a common understanding of their mission,
    which is to build products for their organizations that hopefully make that organization
    money.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: That makes sense. You mentioned DevOps tools, and at least
    when I visit companies and attend conferences, every single tool has the word
    DevOps attached to it. It''s kind of as if nobody can sell anything without DevOps,
    which leads me to think: is there even such a thing as DevOps tools?'
  prefs: []
  type: TYPE_NORMAL
- en: '**James Turnbull**: No, I don''t think there is. I believe there are tools
    that make the process of being a cross-functional team better. I would argue that
    for many companies, Slack is a DevOps tool because it''s an easy way for companies
    to communicate across teams.'
  prefs: []
  type: TYPE_NORMAL
- en: I would also say Puppet might be a DevOps tool, even Chef, Salt, Ansible, or
    Docker, because they all enable automation and workflow that makes it easier to
    manage and move assets and code around. Any tool that facilitates building that
    cross-functionality is probably a DevOps tool to the point where the term is likely
    meaningless.
  prefs: []
  type: TYPE_NORMAL
- en: What's the best stack available today?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: You''re a very technically oriented, hands-on person. All
    of your books, at least those that I''ve read, are highly technical, which gets
    me wondering whether you have a favorite stack. I saw that you wrote a lot about
    Puppet and Terraform. Is one replacing another? Moreover, where do you see the
    industry moving to now?'
  prefs: []
  type: TYPE_NORMAL
- en: '**James Turnbull**: I''m probably less technical than I used to be. I''ve moved
    between a lot of different roles; these days, I''m primarily a people leader.
    I''m a CTO, and I''ve been a VP of engineering for a number of years, so I dabble
    in this space in my spare time, but I wouldn''t consider myself a practicing SRE
    or a practicing Systems Engineer anymore.'
  prefs: []
  type: TYPE_NORMAL
- en: In terms of things like Puppet and Terraform, I think they do different things.
    Terraform is clearly an infrastructure build tool, and if you want to build a
    virtual private cloud (VPC) and a bunch of Amazon EC2 instances and a bunch of
    other things hooking them all together, then Terraform is the ideal tool. If you
    want to configure those assets and deploy the application on top of it, then I
    think Puppet, or another configuration management tool, is a more appropriate
    choice.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: How about the O''Reilly conferences? Do you see any trends
    there? Can you predict what''s coming next, at least within DevOps or infrastructure-related
    subjects?'
  prefs: []
  type: TYPE_NORMAL
- en: '**James Turnbull**: We''ve changed the purpose of Velocity considerably over
    the last couple of years. The future is really in distributed systems. I think
    that monolithic applications that are based in a single geography are the dodo
    of the infrastructure and architecture world. They have a long tail, and it will
    take a long time for them to go away, but people who are building new systems
    really need to think about whether that is the most appropriate way to develop
    their application or their service.'
  prefs: []
  type: TYPE_NORMAL
- en: I think there's a couple of reasons for that, one of them obviously being that
    monolithic applications tend to move slowly, and speed to market really matters
    now, as does your ability to deploy a new feature, a new capability, or a new
    offering of some kind that actually makes a marked difference, as does performance,
    and scaling, and availability. Monolithic applications are notoriously not great
    at that.
  prefs: []
  type: TYPE_NORMAL
- en: '"Customers have very high expectations about the performance of applications
    and services, which are significantly changing the way that data is distributed."'
  prefs: []
  type: TYPE_NORMAL
- en: —James Turnbull
  prefs: []
  type: TYPE_NORMAL
- en: The second reason is that I think customer expectation is much higher now. The
    last couple of generations of folks, who are probably the third generation who
    grew up as sort of internet natives or cloud natives, have never known a time
    where they didn't have data on their phones. Customers have very high expectations
    about the performance of applications and services, which are significantly changing
    the way that data is distributed. For example, no longer is the optimum model
    for a lot of applications a large centralized data center; it is, in fact, an
    edge computing-centric distributed application where the data for a particular
    cohort of customers is closer to those customers rather than your core infrastructure.
    I think, overall, what we see now is that, for the next two or three years at
    least, distributed systems will be the focus of infrastructure and application
    development, and certainly the backend.
  prefs: []
  type: TYPE_NORMAL
- en: Monoliths and microservices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: You mentioned monoliths and microservices. Can you explain
    why they''ve only become popular now? I mean, obviously, microservices have existed
    for a number of years. Is that because our needs changed or the tools that we
    have access to changed? It''s not that that concept didn''t exist for a long time,
    but everybody only started talking about them recently.'
  prefs: []
  type: TYPE_NORMAL
- en: '**James Turnbull**: When I first started out in the industry, there was a concept
    called service-oriented architecture. Primarily, it was a way to break services
    into individual fault domains that allowed them to scale, manage, and interact
    on their own. The definition of service was pretty broad. It generally didn''t
    resemble a microservice.'
  prefs: []
  type: TYPE_NORMAL
- en: But I think a couple of things have happened, namely that virtualization, the
    cloud, and containers have enabled microservices architecture. They're very easy
    tools to allow someone to build those services.
  prefs: []
  type: TYPE_NORMAL
- en: I think the reason those services have also become popular is that if you are
    building an application that is designed to be retail and customer facing, and
    you want that application to be able to move fast, then building independent services
    that are easy to iterate on is significantly easier than building a giant monolith
    where, at some point in time, you'll lose the ability to reason about the model.
    You will lose the ability to understand the model as a whole, and you will lose
    the ability to make changes to the model without potentially impacting other things,
    whereas microservices with appropriate protocols and APIs can be versioned and
    managed, and canary-deployed and rolled out.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Do you have any contact or experience with security in that
    model? Because I hear security is kind of a concern, especially when joined with
    containers.'
  prefs: []
  type: TYPE_NORMAL
- en: '**James Turnbull**: I was a security engineer for a few years, so I see containers
    as having some security challenges. Obviously, a container is not as robust as
    a virtual machine in the sense that the walls between compute resources are considerably
    thinner. For example, in most cases, a container represents a process separation
    versus a hypervisor separation. But I think that, realistically, a lot of it comes
    down to how you deploy your services, and how you build your environment.'
  prefs: []
  type: TYPE_NORMAL
- en: If you put security architecture up front and apply security in depth at both
    an application and infrastructure level, and you design it into your environment,
    then a lot of the common issues that have tripped people up in the past start
    to become less of a concern. There's a lot of work being done around building
    zoned security models and deploying like-risk-level workloads together. You deploy
    your cluster of marketing web servers together, but not on the same host as your
    payroll system. There's a lot of common-sense stuff that has been done for years
    and years, and that, I think, makes a large number of the security concerns in
    that space not as severe as they look.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: When I look at the software, at least as you describe it
    in the books you''ve written, it''s always open source. Do you see that as the
    death of closed source? Or does closed source even exist anymore?'
  prefs: []
  type: TYPE_NORMAL
- en: '**James Turnbull**: I think the same thing that''s happening to the customer
    is also happening to software in other places. I like open source software because
    I like the ability to control my own destiny. I also believe in composable applications.
    The fundamental principle of a Unix application is small, composable tools that
    I can put together and build a stack of, and I''m very attracted to that model.
    For myself, and a lot of other people who are probably reasonably experienced
    engineers, I like choosing a stack where I can take a bit of Kubernetes and a
    bit of Prometheus, and maybe a bit of this and a bit of that, and I can combine
    them together to provide me with a stack that I like and can work with.'
  prefs: []
  type: TYPE_NORMAL
- en: '"I like open source software because I like the ability to control my own destiny."'
  prefs: []
  type: TYPE_NORMAL
- en: —James Turnbull
  prefs: []
  type: TYPE_NORMAL
- en: I still think a lot of companies, particularly enterprise companies, want someone
    to talk to if something goes wrong with a product or an application. They want
    a neck to choke, or someone to be able to provide them with support and indemnification,
    so I think there's definitely still a market for closed source enterprise software.
    But I'm not convinced that the demand is as large as it used to be. More and more
    people are building things that are primarily open source. When there's open source
    at the core of it, they're selling additional bits of technology or functionality
    that is either closed source or commercial in some way on top of that. If you
    look at a significant number of the movements happening around orchestration tools,
    then at the heart of it, a lot of them are Kubernetes and then other things are
    built around or on top of that.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes, RHEL, and Ubuntu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: You mention Kubernetes. Do you think Kubernetes will affect
    operating systems? Are we going to continue seeing RHEL and Ubuntu dominating
    the market?'
  prefs: []
  type: TYPE_NORMAL
- en: '**James Turnbull**: I don''t think so. I personally think the operating system
    is dead; I don''t see a purpose for it. I want to build composable things that
    just use the system-level resources that I care about, whether they are disk,
    CPU, or memory. I want to be able to take libraries or middleware from a selection
    of stuff and then combine those without needing a huge surface area of other materials.
    I think that we''ll see more and more things that are shaped like Alpine and CoreOS,
    where the operating system is largely a black box, or you''re getting a piece
    of the operating system where you don''t configure any of it, as a lot of it''s
    not exposed to you.'
  prefs: []
  type: TYPE_NORMAL
- en: I still think that people will want some sort of support. They'll want somebody
    to be able to talk to when something breaks. I just wonder if it might be at a
    different level of abstraction that they wish to support. Do they need a RHEL
    support account or do they need a support account for a particular workload, application
    server, or a stack running on, say, OpenShift? Again, this is a long tail problem,
    so I suspect it'll be a number of years before this is over, but I don't see the
    operating system market having a long future.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Do you think that it will be replaced with new operating
    systems like CoreOS, or will it be the do-it-yourself unikernel type?'
  prefs: []
  type: TYPE_NORMAL
- en: '**James Turnbull**: I think unikernel is a possibility. With serverless stuff,
    you don''t really care about the underlying hardware, or whether you should run
    AWS Lambda or Azure, for example. It doesn''t really matter whether that''s Ubuntu,
    Fedora, or RHEL – it''s not relevant to you. Therefore, I think we''ll see things
    where it''s either hidden from the end user because it''s a black box to them,
    because they never need to change anything in it, or it''s a segment, a slice
    of the operating system rather than a whole operating system.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: You mentioned serverless. I often hear concerns about people
    being vendor-locked-in. Do you feel that''s a valid concern?'
  prefs: []
  type: TYPE_NORMAL
- en: '**James Turnbull**: I mean, that''s what those cloud vendors want you to do.
    They want you to buy all of the pieces of their product and lock you into their
    ecosystem, so I do think that''s a concern.'
  prefs: []
  type: TYPE_NORMAL
- en: Over time, we'll see more and more things look like standards, like, to a large
    extent, a RESTful API, GraphQL API, or a function of some kind where it's very
    easy to create sort of patterns for. Whether that runs on top of Azure Functions
    or Lambda, it might just be a bit of deployment functionality rather than changes
    to the core code of the function itself. I'd be curious, because I haven't written
    very much outside of Azure and AWS to see if you could write a function that had
    multiple backends and multiple deployment paths that were essentially identical.
    I suspect it would be pretty easy.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: How about schedulers? I mean, with Kubernetes, I saw 2017
    as being more about schedules. Do you think that''s over, or are we going to continue
    seeing multiple solutions? Right now, is Kubernetes the only thing or is there
    is still Swarm and Mesos?'
  prefs: []
  type: TYPE_NORMAL
- en: '"You still need a reasonable amount of infrastructure-centric knowledge to
    run Kubernetes, and scheduling is not a trivial tool to build.'
  prefs: []
  type: TYPE_NORMAL
- en: —James Turnbull
  prefs: []
  type: TYPE_NORMAL
- en: '**James Turnbull**: I think that''s a hard question to answer because I don''t
    think the market has shaken itself out yet. I like Kubernetes, Mesos, and things
    like Nomad, but I suspect for the vast majority of people, these tools are at
    the wrong level of abstraction. You still need a reasonable amount of infrastructure-centric
    knowledge to run Kubernetes, and scheduling is not a trivial tool to build. I
    think there''s a long way to go before you can think about Kubernetes or any of
    those other orchestration tools as more platform as a service where a developer
    can just push the workload at a black box like Heroku, and it''ll just work.'
  prefs: []
  type: TYPE_NORMAL
- en: I think that'll happen as some of the clouds start to roll out tools like the
    Amazon, Azure, or Google Kubernetes services, where if you take something like
    Amazon's EC2 Fargate product, where you don't manage the instances anymore, combine
    that with AKS, their Kubernetes product, and suddenly it's heading very close
    to a continuous delivery and integration model where I just push container images
    with some metadata about how many of them, and maybe wired into some metrics or
    something to scale or shrink them, and then it's fine. I think that's probably
    where we're going, but I think we're a little way off from that being a realistically
    useful tool for a vast audience.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Are there any other subjects you would like to discuss or
    comment upon?'
  prefs: []
  type: TYPE_NORMAL
- en: '**James Turnbull**: I think there''s a fascinating discussion happening at
    the moment about the definition of monitoring. Monitoring has traditionally been
    very infrastructure-centric, where you''d have a machine out there that monitors
    the CPU and the memory and the disk, and maybe some transactions and error rates.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Today, though, we see two things happening: one, we see much more framework-oriented
    monitoring; for example, things like Google''s four golden signals or Brendan
    Gregg''s USE method, Utilization Saturation and Errors. Then, we are also seeing
    observability-centric things like tracing and end-to-end analysis of performance.
    I''m really interested to see what tools will emerge in that space in the next
    couple of years.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I get the impression that they are not catching up with
    the increase in services we are running today.'
  prefs: []
  type: TYPE_NORMAL
- en: '**James Turnbull**: I agree. I think that it''s an aspect of monitoring that
    has always been a bit of an afterthought or a reactive thing that happens after
    something goes wrong. I believe we are now starting to see that injected a bit
    earlier into the development process, so the monitoring, metrics, and exposing
    metrics can be consumed by health checks, which are happening more often, in which
    case it''ll be super interesting to see what tools and changes in infrastructure
    emerge out of that.'
  prefs: []
  type: TYPE_NORMAL
- en: I think a lot of people still have legacy Nagios installations, and it will
    be interesting to see what replaces those in the next five years.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Do you think then that tools like Prometheus are already
    getting there, or we are going to see something even more radically different?'
  prefs: []
  type: TYPE_NORMAL
- en: '**James Turnbull**: I think Prometheus is an exciting avenue, for certain types
    of services like microservices, container-driven applications, and Kubernetes.'
  prefs: []
  type: TYPE_NORMAL
- en: However, I'm not necessarily convinced it's a very good fit everywhere. But
    then again, I don't think any tool is a universal panacea, so I think we'll see
    a lot more from Prometheus. It has a bright future.
  prefs: []
  type: TYPE_NORMAL
- en: I think we'll also see a lot more of tracing-style tools. In addition, we'll
    see a second or third wave of SaaS tools. The first wave tools, which were simple
    things like probing tools where you would connect to a service, and if it returns
    an HTTP response with a 200 exit code, then it's up, and maybe you sample a little
    bit of data to confirm that it's doing the right thing. And then in the second
    and third generations there are things like New Relic and Dynatrace, which were
    more APM tools.
  prefs: []
  type: TYPE_NORMAL
- en: '"I think we''ll see a lot more from Prometheus. It has a bright future."'
  prefs: []
  type: TYPE_NORMAL
- en: —James Turnbull
  prefs: []
  type: TYPE_NORMAL
- en: In the next wave of SaaS services, we'll see a combination, a hybrid of infrastructure-level
    monitoring, middleware application-level monitoring, performance-level monitoring,
    transaction-level tracing, and then layered on top some business-level monitoring.
    I don't know what those tools are yet, but I think there is definitely some interesting
    stuff that will happen in that space.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Since we talked about Prometheus, it might be worthwhile
    mentioning that you wrote a book about it. Where can we get it?'
  prefs: []
  type: TYPE_NORMAL
- en: '**James Turnbull**: The book is called *Monitoring with Prometheus* (https://prometheusbook.com),
    and there''s a discount code, `TALKINGDEVOPS`, that''ll give the readers 25 percent
    off.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I think we can agree that the future will be a fascinating
    space. Thank you.'
  prefs: []
  type: TYPE_NORMAL
