- en: Introducing Liz Keogh
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A holder of the Gordon Pask Award, given by the Agile Alliance, Liz Keogh specializes
    in Cynefin, and putting Agile at Scale in context. Liz embraces the many risks
    inherent in software delivery, driving collaboration and transparency between
    teams. You can follow her on Twitter at `@lunivore`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I want to start by asking what exactly do we mean when we
    say DevOps? I was also wondering though if you could touch upon the relationship,
    if there is one, between DevOps and Agile.'
  prefs: []
  type: TYPE_NORMAL
- en: The relationship between DevOps and Agile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Liz Keogh**: DevOps used to be when you did Agile with a small team; back
    then, it was just developers in small, cross-functional teams who were writing
    code directly for the customers. The customers would give the DevOps team their
    requirements; the developers would then develop the code and give it back to the
    customers. Now you''ve got much larger enterprise organizations where operations
    is a separate department, and possibly even a separate company within the larger
    group, and yet you still want to ship stuff. I always say that DevOps is a good
    start.'
  prefs: []
  type: TYPE_NORMAL
- en: '"DevOps used to be when you did Agile with a small team; back then, it was
    just developers in small, cross-functional teams who were writing code directly
    for the customers."'
  prefs: []
  type: TYPE_NORMAL
- en: —Liz Keogh
  prefs: []
  type: TYPE_NORMAL
- en: Agile generally starts with the development teams. You've likely got some business
    analyst types, testers, and developers all writing the code, and then they think
    they're done. Except they're not done, because they still haven't actually shipped
    the product yet. Operations is the next stage of that.
  prefs: []
  type: TYPE_NORMAL
- en: The way you engage with your customers hasn't really changed, but if you can
    actually get to the point where you can ship stuff reliably to the customer and
    get feedback from people on how it's going, then you're doing well. It's the difference
    between changing direction within the team and actually changing direction with
    whatever you put out there. I'm personally a massive fan of the Agile Fluency
    Model.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Does that mean that Agile somehow excluded operations, or
    is that why DevOps was not Agile?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Liz Keogh**: I don''t know quite what''s happened, except that Agile has
    generally always been a development-focused thing. The Scrum framework talks about
    cross-functional teams, but I guess it''s because of the nature of enterprise
    that we''ve always put things into these horizontally sliced departments within
    both large-scale enterprises, and even some small-scale companies who''ve got
    their little fledgling departments. As soon as you compartmentalize, you''ve created
    a gap between development and operations that needs to be bridged.'
  prefs: []
  type: TYPE_NORMAL
- en: When I was working with ThoughtWorks, a community of individuals whose purpose
    was to revolutionize software design, creation, and delivery, I had rudimentary
    Linux admin skills, and I mean *really* rudimentary. I actually started as a sysadmin,
    but it was within Windows in 1998, so it wasn't as though much advanced skill
    was necessary. But now you look at all the specialist skills required to get stuff
    shipped, plus what it takes to make things maintainable and to be able to monitor
    things, to be able to back them up, and all the rest of the things you need, and
    it's generally beyond my skills as a developer.
  prefs: []
  type: TYPE_NORMAL
- en: Nowadays, you've got Puppet, Chef, Docker, and Kubernetes; these are all tools
    I've never even touched because they've come along in the time since I've stepped
    away from doing hands-on development. I only tend to do hands-on development as
    part of my consulting work now, but you look at these specialist skills that they've
    got and it's really tempting to say, "Okay, well, that's your bit—we'll do our
    bit as development, and then we'll give it to you, and you'll ship it for us,
    and that'll be great."
  prefs: []
  type: TYPE_NORMAL
- en: 'When you actually look at what''s needed to make something reliable, and maintainable,
    and to stop those people having phone calls at 4:00 a.m. because something you
    wrote as a developer broke, then there''s a ton of things that you can do to help
    each other. Operations can talk to developers about what they need, and developers
    can speak with operations about what they''re going to do to help. That''s really
    what DevOps is: adults talking to each other and working together.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I''ve spoken to people in enterprises who say, "I can''t do DevOps because
    operations is a separate department." But if you''re reporting a bug in production,
    all you need to do is put your name on the bug report, and you''ve started off
    well: you''re in operations.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''re a developer, you just have to say, "Hey, if you have any problems
    with this bit of code, come and talk to me—don''t just write a report, we''re
    up here, why don''t you come and talk to the team, and we''ll help you fix it?"
    It''s that attitude to shipping software. That''s what DevOps really is: an attitude
    change and the building up of a relationship.'
  prefs: []
  type: TYPE_NORMAL
- en: '"That''s what DevOps really is: an attitude change and the building up of a
    relationship."'
  prefs: []
  type: TYPE_NORMAL
- en: —Liz Keogh
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: That''s a brilliant point. It''s as if you went back in
    time and replaced the word "Ops" with "a tester of the problems we''re trying
    to solve with Agile." Those guys don''t speak to each other; they live in different
    departments.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Liz Keogh**: Exactly!'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I''ve heard you speak quite frequently about the Cynefin
    framework. Could you explain what it is?'
  prefs: []
  type: TYPE_NORMAL
- en: The Cynefin framework
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Liz Keogh**: The Cynefin framework is very much about making sense of different
    situations and how you approach them. For that reason, it''s called a "sense-making
    device." Think of it this way: there are five ordered domains – simple (or obvious),
    complicated, complex, chaotic, and disorder. The boundaries between them are fuzzy.
    In the simple, or obvious, domain, problems are easily solved because the solutions
    are obviously apparent and easily categorized.'
  prefs: []
  type: TYPE_NORMAL
- en: Take a landlady in the pub. I say, "What do you do when the beer runs out?"
    She responds by saying, "Well, I change the barrel, obviously."
  prefs: []
  type: TYPE_NORMAL
- en: When problems enter the complicated domain, they require expertise. A watchmaker
    can fix your watch, a car mechanic can fix your car, and that's great—both of
    those have predictable outcomes. In the complicated domain, problems can be analyzed
    and solved only if you've got the relevant expertise.
  prefs: []
  type: TYPE_NORMAL
- en: The problem is that human beings crave certainty. We want predictability. We
    like knowing what's going to happen next. In all of our evolutionary experience,
    unpredictable things typically spell disaster, and that's chaotic, which, within
    the Cynefin framework, puts us in the chaotic domain. Chaos is accident and emergency,
    it's your house burning down, it's people bleeding to death. Chaos is a transient
    domain, however, which means it resolves itself really quickly. It doesn't like
    to stick around for long, but, unfortunately, it might not resolve itself in your
    favor. Chaos is also the domain of urgent opportunity, but it's normally a really
    bad place to be, and that's the problem, because there's a bunch of stuff that
    isn't predictable, or chaotic either. And this is the complex domain within which
    a lot of software development takes place.
  prefs: []
  type: TYPE_NORMAL
- en: We have to allow things to emerge. We know where we've got to when we look back
    with hindsight. This is called "correlated in retrospect." You can see where you've
    got to, but you couldn't have predicted the outcome. Anybody on Agile projects
    working in combination with the business, getting their feedback and changing
    direction, will be experienced with that, to an extent. Take, for example, the
    fact that you're working in a very high-uncertainty environment. You're doing
    product development or creating new products. One of the things that Toyota frequently
    does, for instance, is concurrent set-based engineering. They'll try three different
    types of engines at the same time, and from that, they work out which aspects
    of their engine they want to settle on for that new car. The complexity thinkers,
    or particularly the Cynefin thinkers, call these "parallel probes."
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Could you explain what a probe is and how it relates to
    DevOps? I mean, how does this fold into the world that we live in today?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Liz Keogh**: A probe is something that''s safe to fail. As you get more and
    more innovative, you''ll get higher and higher levels of uncertainty in what you''re
    doing. Your variance increases, as do the chances of getting something wrong.
    You''re guaranteed to make discoveries, though you won''t make them in the safety
    of the team anymore. Many of these discoveries will take place in production,
    and you can''t help it because things are so new and unpredictable.'
  prefs: []
  type: TYPE_NORMAL
- en: '"I regard DevOps as absolutely essential for innovation, at scale certainly."'
  prefs: []
  type: TYPE_NORMAL
- en: —Liz Keogh
  prefs: []
  type: TYPE_NORMAL
- en: What you need to be able to do then is to change direction really, really quickly,
    and this is where my focus in DevOps is. A lot of people think of DevOps as a
    path to predictability rather than a safety net that allows you to do unpredictable,
    high-discovery things. I regard DevOps as absolutely essential for innovation,
    at scale certainly.
  prefs: []
  type: TYPE_NORMAL
- en: You need to have those automated tests, like the probes, not just because they're
    catching things, but because they provide living documentation and they keep the
    code easy to change. What's probably more important is that you want monitoring
    in place; you really want great relationships with operations, so that when those
    discoveries do come along, and when you do have a bug in production, and something
    does go haywire, you can spot it really quickly and you can roll back. This is
    where this idea of phoenix servers comes from, where you can release these bugs
    to one server, see how it goes, and if it doesn't work, you just trash your server.
    This is where the world is going now, where we can actually just play and see
    what's happening out there. We're used to playing as children in safe-to-fail
    places; this is how we learn as kids. Now we're kids in the playground of production,
    and it's still important that it's safe to fail out there. That's why I love DevOps
    so much.
  prefs: []
  type: TYPE_NORMAL
- en: '"It''s still important that it''s safe to fail out there. That''s why I love
    DevOps so much."'
  prefs: []
  type: TYPE_NORMAL
- en: —Liz Keogh
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: DevOps kind of allows you to deploy to production and fail
    fast. Effectively, you''re validated in production instead of in a testing environment.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Liz Keogh**: The thing is, there''s a balance between getting it right and
    making it okay to get it wrong. I always say if it''s something that''s reasonable
    for you to predict, then you should probably try and get it right. As an example,
    you should use a production-like environment where you can run your tests using
    production-like data.'
  prefs: []
  type: TYPE_NORMAL
- en: You won't be able to do it for everything unless you're actually going to have
    exactly the same customer base, data, and software landscape, which you never
    do; then you're going to end up testing some stuff in production. There's no way
    around that, so then you've got to have really good stuff in place to spot when
    it goes wrong.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: You would then have to have exactly the same users as well
    if we follow the same logic, no?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Liz Keogh**: Exactly!'
  prefs: []
  type: TYPE_NORMAL
- en: Behavior-driven development (BDD)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: You''re big on BDD. Can you explain to us, for those who
    may not know, what it is?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Liz Keogh**: BDD came about as a replacement for test-driven development
    (TDD). TDD wasn''t really about testing, because anyone who''s done TDD would
    say that you wrote the test before there was even any code. Essentially, you''re
    not really testing anything; you''re describing how the code you''re about to
    write is going to work, why it''s going to be valuable to you, while coming up
    with some examples of how you want to use it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When we actually start thinking of them as just examples of behavior, that''s
    class-level behavior. You would say, "Here''s an example of how my class behaves."
    But then you''ve got your system: "Here''s an example of how my system behaves,
    here''s an example of my application in use," and we call those scenarios. It''s
    the same. You take your scenarios, and now you''ve got an example of how you think
    your system is going to work.'
  prefs: []
  type: TYPE_NORMAL
- en: When things are predictable, they require expertise, and having the conversation
    around those scenarios is a really great way of gathering that expertise yourself
    and picking up a language that people want to use around it so that you all have
    a common language, which they call a ubiquitous language. When things are really
    uncertain, those scenarios provide what we call coherence, so it's a realistic
    reason for thinking that what you're about to do is a good idea. You might decide
    that that example doesn't quite match what you're thinking, or it might turn out
    that customers don't quite want to use it that way, and then you'll have to change
    your scenario. The more uncertain you get, the more important it is to have the
    conversations that just explore, and the less important it is to put the automation
    around them, because automation is a commitment, and if you're committing to stuff
    that's changing, it's an over-investment on your end.
  prefs: []
  type: TYPE_NORMAL
- en: You want to commit as little as possible until you reckon you have a good understanding
    of the problem that you're trying to solve, and then when you understand the problem,
    you can start writing those scenarios, automating them, and having a stab at what
    you think the solution ought to look like. But sometimes it takes learning by
    doing, and you actually have to try something out and then you understand it.
  prefs: []
  type: TYPE_NORMAL
- en: There's a lot of spiking and prototyping these days compared to when I started
    doing software development.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I''m guessing you started on Waterfall. Could you take us
    through your experience with that?'
  prefs: []
  type: TYPE_NORMAL
- en: '"There''s a lot of spiking and prototyping these days compared to when I started
    doing software development."'
  prefs: []
  type: TYPE_NORMAL
- en: —Liz Keogh
  prefs: []
  type: TYPE_NORMAL
- en: '**Liz Keogh**: So, yes, when I started, I was on a Waterfall project, and we
    had three years'' worth of development, and I believe before that, there was a
    year and a half''s worth of analysis. I was in a basement for three years working
    on this thing, and we did not ship at all in those three years, but now we''re
    able to ship. Diana Larsen and James Shore, the people behind the Agile Fluency
    Model, call it to release at will. In this model, you''re able to release when
    you want to if you get this stuff right, which means you can change direction
    really, really quickly. This also means that spiking and prototyping is probably
    more important than it used to be, while automating is actually less important,
    though the conversations you have are still important.'
  prefs: []
  type: TYPE_NORMAL
- en: These conversations around those scenarios—around what you think this might
    do for people, how they might use it, what other stakeholders need to be considered
    and how it's going to work for them, what other outcomes we need, and what contexts
    are going to be in and out of scope—are still really crucial, while also being
    very lightweight. They don't take long to have.
  prefs: []
  type: TYPE_NORMAL
- en: I always recommend starting with the conversations and only moving to the tools
    when you've gotten really good at having those conversations. It only takes about
    a month to retrofit scenarios around a small code base while you're still developing
    it; obviously, it's not a month of full-time work. If you started with the tools,
    put them down and then have some conversations. You'll come back having a better
    understanding once you've had those conversations around the scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: If we''re inviting operations to the party, does it mean
    that BDD is extending in that direction as well?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Liz Keogh**: A little bit, but you''re still going to want to talk through
    examples of the kinds of things they want. Generally, their examples will focus
    on monitoring; it will be, "What if we have a bug like this? What should we do?"
    They''re going to be examples of how you want to use that relationship.'
  prefs: []
  type: TYPE_NORMAL
- en: The best conversations I've had are not about what the software should be but
    rather how we as teams are going to work together to quickly solve any potential
    issues that might come up after the software's release. It's the human aspect
    that I really enjoy. This is where the complexity stuff—Cynefin—really comes into
    play, because human systems are what we call complex adaptive systems. They're
    systems in which the agents of the system can change the system itself.
  prefs: []
  type: TYPE_NORMAL
- en: While you might be able to look at the behavior of software and go, "Okay, that's
    relatively predictable," as soon as you've got two groups of people working together,
    you'll need to be a bit more forgiving and a little more mindful of how that relationship
    is building, what's going on with it, what's not working, and how you fix what's
    not working.
  prefs: []
  type: TYPE_NORMAL
- en: 'I really like it when the conversations and the scenarios switch from how the
    software is going to behave to how we''re going to behave as human beings. Having
    said that, if you''ve been diligent in how you monitor things, you''ll have examples
    of the kinds of thresholds at which you''re going to trigger your monitoring,
    and can ask questions about what it''s going to look like: "Are you going to email
    me or am I going to get a notification on my pager?" You can have those conversations
    as well, but BDD isn''t the only way to develop software, and it''s certainly
    not the only way to test things. There are tons of great testing practices that
    have nothing whatsoever to do with BDD. When people think of testing and BDD synonymously,
    they miss out on all the other things that testers do.'
  prefs: []
  type: TYPE_NORMAL
- en: I love my testers because they make it safe for me to fail. I think it's the
    inherent nature of humans to pick one thing and then go with it. For example,
    I adopted BDD, and it used to be BDD and nothing else. The same thing happened
    for almost everything else; everything needs to be a container today.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: How about the relationship between Agile and DevOps? What
    are your thoughts on that? Does DevOps replace Agile? Does it complement it, or
    is it conflicting?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Liz Keogh**: Agile is just an anchor term to help people look up different
    practices, knowledge, experience, stories, and to find a community. They''re all
    related.'
  prefs: []
  type: TYPE_NORMAL
- en: Is DevOps part of that? It's definitely related to it, and if you've got a cross-functional
    team, then yes, absolutely, it's related to it. I'm a massive Kanban fan, and
    when we do Kanban, we start from where we are right at this moment. I've got people
    doing Kanban just in the testing phase of big Waterfall projects, so you don't
    need that cross-functional team anymore, and the advantage to that is that you
    can just start wherever you are. You don't need to rearrange the structure of
    the organization or worry about the line management; you can just start improving.
  prefs: []
  type: TYPE_NORMAL
- en: The way you do this is to look at the value stream and see where the parts are
    that you can improve. The big obvious one is development and operations working
    together. Your development team, which is probably cross-functional, and then
    your operations team. You want them working better, and you want them handing
    over more smoothly; that's the ideal situation. Even if they're a separate organization,
    or even if they are a completely separate department and they've got different
    line management or different KPIs, they can still work together.
  prefs: []
  type: TYPE_NORMAL
- en: '"The way you do this [start improving] is to look at the value stream and to
    see where the parts are that you can improve. The big obvious one is development
    and operations working together."'
  prefs: []
  type: TYPE_NORMAL
- en: —Liz Keogh
  prefs: []
  type: TYPE_NORMAL
- en: Consulting with Agile or DevOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: When you consult for companies with Agile or DevOps, do
    you have a prescriptive type of approach? For instance, thou shalt do Scrum!'
  prefs: []
  type: TYPE_NORMAL
- en: '**Liz Keogh**: Thou shalt learn Cynefin because it''s pretty much the first
    thing I teach. After that, if you want to start with Scrum, go ahead. I think
    Scrum is a great way to get started, especially if it''s a new project and you
    don''t have anything in play already.'
  prefs: []
  type: TYPE_NORMAL
- en: Typically, large organizations have already done a bunch of analysis work. We
    talk about how great it would be if we had this flexible scope, but most organizations
    have already done three months' worth of UX research and analysis, and it tends
    to constrain things. So, let's slice it up vertically; let's work out what the
    most important bits are and deliver those first—where are the risky bits, where
    are the highest-uncertainty bits, and where's the new stuff?
  prefs: []
  type: TYPE_NORMAL
- en: Let's do those first and do it early. Let's spike it out and see what it looks
    like, and then see what it would actually take to ship this. What else do we need
    to get this new thing that you're really interested in live, but also, what's
    the smallest way we can actually deliver that?
  prefs: []
  type: TYPE_NORMAL
- en: Somebody on Twitter asked for a different term for minimum viable product (MVP),
    and I told them it means no smaller than the minimum functionality that you can
    ship because I'm yet to meet anybody aggressive enough that's actually shipping
    something valuable fast. You can ship really small things and learn a lot from
    them, or at least get them into a state where you could just click a button and
    ship them. I've had people say, "Oh, but, you know, we're not allowed to change
    our databases in production." Well, great, change them in your own environment
    and then provide the scripts to operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are ways of managing this, and there are things that operations need:
    there are places where they''re having pain. I spoke to one team, and they''d
    been up until 4:00 a.m. fixing bugs, trying to work out why things were falling
    over, and desperately trying to get releases out. When there are five teams all
    trying to release at the same time, these poor people are not happy. There''s
    a lot that we can do to make them happy as developers, and all I want to see is
    us reaching out going, "Hey, how do we avoid you being woken up at 4:00 a.m. again?"'
  prefs: []
  type: TYPE_NORMAL
- en: There are some people who are really big fans of giving pagers to the actual
    developers and making them wake up at 4:00 a.m.—I don't really have the experience
    to deal with things at 4:00 a.m. and I wouldn't have a clue where to start, but
    just having the conversation around what it would take so that you didn't have
    to wake people up at 4:00 a.m., and what you can do to help—that would be nice.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Indeed. Judging from what you''ve said so far, you seem
    to put a much bigger emphasis on transforming or improving the people and culture
    rather than relying on the tools.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Liz Keogh**: This is about delivering software, and it turns out that focusing
    on people is the best way to do that. I don''t want people to think I''m fluffy;
    I''m not interested in people for people''s sake.'
  prefs: []
  type: TYPE_NORMAL
- en: '"This is about delivering software, and it turns out that focusing on people
    is the best way to do that."'
  prefs: []
  type: TYPE_NORMAL
- en: —Liz Keogh
  prefs: []
  type: TYPE_NORMAL
- en: When I'm talking to enterprises and organizations, my focus is on delivering,
    and getting people to work together is part of delivering. It turns out that all
    the things that you reckon make a really great workplace—that motivate people
    and result in having some fun at work—are also the things that help delivery.
    If you focus on delivery, you'll end up doing the right thing by the people anyway.
    You can use it as a nice test; if you're finding that yelling at people is the
    way you're getting things done, then there's probably something wrong with your process.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: When you try to help organizations improve, how do you make
    certain predictions about how they''ll behave?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Liz Keogh**: Some things will be fiercely resisted. When that happens, don''t
    worry about it; try something else. There will always be some things that you
    can change, and if you find the things that you can change—this is the heart of
    Cynefin and of what probing really means—focus on that and on the people who can
    help you effect that change. Don''t worry about that which is out of your control.'
  prefs: []
  type: TYPE_NORMAL
- en: If you find one person who's managed to get BDD working in a project, now you
    know there's organizational support for BDD. If you find that one person has also
    managed to have a conversation with somebody over in operations, you can get those
    two people to do a presentation on what they learned together. Anything you find
    that works toward positive change, support it, amplify it, jump on it, and make
    a big deal of it, because every little bit of positive change buys some room for
    positive change elsewhere, until one day you find that the bits that were resistant
    are now no longer, and everybody's cloud-based, and you're not even sure how that
    happened.
  prefs: []
  type: TYPE_NORMAL
- en: I spend most of my time now as a consultant just wandering around going, "Wow,
    that's awesome," and then asking how we do it more, how we do it bigger, and how
    we do it elsewhere, while spreading those good stories.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Are there certain types of expertise, experts, or departments
    that are more defensive, or others that are easier to work with, or do you find
    it to be more or less on the same ground everywhere?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Liz Keogh**: It depends on the organization. Every organization has their
    tribes. If you read *Great Boss Dead Boss*, by Ray Immelman, you''ll learn about
    tribal behavior and organizations. I found it so absolutely true that anywhere
    where you see a tribe being threatened, that tribe has strengthened their borders.'
  prefs: []
  type: TYPE_NORMAL
- en: I've had one situation where backend developers were learning to do a bit of
    UI work, and the UI developers strengthened their borders. In fact, I've seen
    this in about three different places now where UI developers strengthened the
    borders of their tribe. Now, for me at ThoughtWorks, that would be completely
    bizarre because I was a frontend developer working on Swing and desktop apps.
    I only did a bit of web, but I knew how to write some HTML, CSS, and some basic
    JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: I could correct a typo and change a color, but the idea that it's somebody else's
    domain seems so strange to me. But when you find that people feel threatened,
    and they feel like their expertise is being devalued, and then they'll strengthen
    the borders of their little tribe, and suddenly you've got, "UI developers are
    more awesome than backend developers," and you've got a schism within your organization.
    The trick is to make your internal tribes feel valued and secure.
  prefs: []
  type: TYPE_NORMAL
- en: You want development and operations to both feel like they can work together
    because they're both skilled professionals, and they both have deep experience.
    With DevOps, all you're doing is bridging those two groups; you're not tearing
    them apart, you're not chucking everybody into cross-functional teams because
    every team must have an operations person in it. This is one of the reasons why
    I think Kanban works better than Scrum in some situations and certainly when you're
    dealing with enterprises. You want to be mindful and respectful of those groups;
    you don't want the organization as a whole to feel threatened.
  prefs: []
  type: TYPE_NORMAL
- en: This is where John Kotter's sense of urgency really comes in. In his talks,
    Kotter discusses the need for creating a sense of urgency around your competition.
    He talks about how hard it is to go up against Amazon, Google, or Facebook. He
    also discusses how your threats are not coming from inside your organization,
    but outside of it. What you want is for everybody within your organization to
    be working together against the external threats and not against each other.
  prefs: []
  type: TYPE_NORMAL
- en: '"You want development and operations to both feel like they can work together
    because they''re both skilled professionals, and they both have deep experience.
    With DevOps, all you''re doing is bridging those two groups; you''re not tearing
    them apart."'
  prefs: []
  type: TYPE_NORMAL
- en: —Liz Keogh
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I love that. I might be mistaken, but I remember once hearing
    you say that there''s more to delivery than development and operations. What did
    you mean by that?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Liz Keogh**: When I look at an end-to-end value stream in an enterprise situation,
    what I usually do is say, "Okay, let''s put the development team in the middle."'
  prefs: []
  type: TYPE_NORMAL
- en: The customers have a need, or maybe some customer representative has an idea
    about how to help them and how to make things better, or maybe even some stakeholder
    has something they want, who gets between them and the development team. Can they
    just go to a development team and say, "Hey could you do this for me?" Probably
    not, because there's going to be some level of prioritization.
  prefs: []
  type: TYPE_NORMAL
- en: I've worked for companies in the past where you wasted precious time jumping
    through various interdepartmental hoops to either get funding or be allowed to
    get a project off the ground or to move on to the next phase. You'd be getting
    your team of developers together while waiting for various board approvals. Six
    months could pass by before the developers even got a sniff at the code, and then
    on the way out—and this is typically what we see from Agile—by the time we get
    hold of the project, all of the previous work had already been done.
  prefs: []
  type: TYPE_NORMAL
- en: The reality is that there are all kinds of people who get between your development
    team and actually releasing something. If you've got a low-trust business who
    are not exactly used to getting what they want from IT, you've probably got some
    user acceptance testing group somewhere as well who are going to test the hell
    out of your software.
  prefs: []
  type: TYPE_NORMAL
- en: What I tend to do as a consultant is draw this on the board, and I say value
    streams are made of people. I identify all the different groups of people involved
    in getting something live, and then I get the person who brought me in to draw
    a dotted line around their area of influence.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Getting people involved seems like a great way to make organizations
    aware, but surely implementing this between multiple teams and getting them to
    make the actual change takes a long time.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Liz Keogh**: What I usually find if I''m being brought in for DevOps is that
    it doesn''t go as far as operations. There''s a bunch of other groups for whom
    it doesn''t go that far as well, and usually operations is about 10 different
    teams that don''t talk to each other. There will be one team for pen testing,
    another for monitoring, another for analytics, and yet another team for support.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You''re going to end up being the people who bring those groups together as
    well, so, Dev and Ops: great start. If you can get those teams working together,
    you''ll start finding that your portfolio and your governance needs to be addressed.'
  prefs: []
  type: TYPE_NORMAL
- en: Now you also start finding your funding model, and then finally you'll get the
    business on board, and the business will go, "Hold on—if we can do these small
    things now, can we just do this experiment? Can we just do this one small thing?"
  prefs: []
  type: TYPE_NORMAL
- en: Then you're innovating, which is a point that it takes years for a large organization
    to even get to. I think that sometimes when people bring in things like the Scaled
    Agile Framework and large-scale Scrum and impose them on an organization and restructure
    everything, the habits of a lifetime are still there and the stories being told
    are still the same stories. You don't change the stories just by restructuring
    things; you change the stories by creating great relationships. And yes, Dev and
    Ops is a good start for that, but it is only a start.
  prefs: []
  type: TYPE_NORMAL
- en: '"A good DevOps culture makes things safe to fail."'
  prefs: []
  type: TYPE_NORMAL
- en: —Liz Keogh
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: You mentioned innovation. How do you foster that? When I
    visit companies, I always get the same response: "We would like to do this and
    we would like to try that, but we don''t have time."'
  prefs: []
  type: TYPE_NORMAL
- en: Fostering innovation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Liz Keogh**: There''s a couple of things you can do: one is to make sure
    things are safe to fail. If it''s not safe to fail, nobody''s going to try anything
    that might fail, and so DevOps, at least a good DevOps culture, makes things safe
    to fail. If you can''t get innovation, focus on how we make sure it''s safe to
    fail, how we get good quality in production, how we get the things that you can
    get right *right*, and then make sure it''s okay to get things wrong.'
  prefs: []
  type: TYPE_NORMAL
- en: You can focus on continuous delivery and then continuous deployment, and that's
    great—get your phoenix servers up and running. Then there's the other thing you
    can do. There's a thing called the shallow dive into chaos, which Cognitive Edge
    teaches as part of their Cynefin training. It involves taking people and splitting
    them up so that you get a divergence of ideas, and the idea, like chaos, is to
    create an urgent opportunity, but it's also a place where you have nothing to
    lose. When you can't talk to other people, the ideas you come up with on your
    own tend to be crazier than the ideas that you come up with if you're in a group.
    When people are in groups, they want consensus. I actually spend a bit of time
    splitting up consensus cultures.
  prefs: []
  type: TYPE_NORMAL
- en: You need to make it safe to fail and then create a forgiving system where you
    have permission to try things. You do that by getting people to try things on
    their own or in very small groups, so that it doesn't matter if there's a bit
    of rework and duplication. Usually, the cost of delay eclipses the cost of rework,
    and I think a lot of people don't see that. People don't see how quickly they
    could move if you weren't waiting for everybody to agree on what the right thing
    to do is. So, you need to make it okay to do the wrong thing.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Does anybody stand out to you in this situation, where they
    say it''s okay to do the wrong thing?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Liz Keogh**: Chris Matts does. He started the Real Options movement, and
    he''s my guru for real options. He says that if you''re faced with two different
    situations, and you''re not sure which is the right one, rather than doing a whole
    bunch of analysis that doesn''t work in complexity, pick the one that''s easiest
    to change. If it turns out to be wrong, you can change it. But if it turns out
    to be right, then that''s great.'
  prefs: []
  type: TYPE_NORMAL
- en: It's that kind of thinking. It's about how we move forward without having to
    go to absolutely everybody else in the organization and pick their brains for
    what they think is the right thing. And again, once you get started with that,
    and once people realize that it's safe to do that and you start supporting them,
    and you start going around saying, "Wow that's awesome," other people will want
    to try things too, and you start building a culture where people will try things
    out and do the right thing as well.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: If I understood correctly, delivery is a team effort, but
    innovation is more individual?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Liz Keogh**: Coming up with the ideas is certainly individual or small team-based.
    There''s actually a great talk by Jabe Bloom called *The Value of Social Capital*,
    in which he refers to Ronald S. Burt''s structural holes. The holes where people
    aren''t connected is where innovation comes from. Everybody is too over-connected,
    and you get massive stability, but you can''t try new things, so you have to shake
    it up—for instance, getting individual development groups to try things. If you
    want to move to Git, don''t agree to move to Git as an organization; get one small
    team to try it out, and they can tell you whether or not it''s worthwhile.'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to try a particular BDD tool, get two teams to try two different
    tools. You might end up having to rewrite one of them, or use two different tools
    for a few years until one of them dies out, but it's better than not moving, and
    it's better than six months of analysis to see whether it will work. Instead,
    you learn by doing. So, do some stuff. Fostering that culture is how you foster
    innovation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: We''ve spoken quite a lot about including people and fostering
    collaboration, so I wanted to ask you why there aren''t more women in the field.'
  prefs: []
  type: TYPE_NORMAL
- en: Diversity, gender roles, and representation in DevOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Liz Keogh**: You know, I''m not the right person to ask. Every time somebody
    asks me what the difference is between a team with a woman on it and a team without
    one, I say I don''t know because I''ve never been on a team without a woman on
    it. I''m not an expert; being a woman does not make me an expert on what it''s
    like to be a woman in development—I couldn''t possibly tell you. I do know that
    nobody told me I wasn''t supposed to be there.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I started programming when I was seven years old because my dad left the BBC
    computer lying around with the manual, which was illustrated with beautiful colored
    robots. It was deliberately marketed to kids. So, I had an early start. For almost
    as long as I can remember, I had computers, and I think maybe that''s the secret:
    it''s just making sure that you''re supporting girls as they come up through school,
    and making sure they have a role model as well. That''s one of the things I''ve
    taken on board.'
  prefs: []
  type: TYPE_NORMAL
- en: I always hated being the token female. Everybody says how they want more female
    speakers. But my response to that is, "How about you just get me because I'm really
    good at talking about DevOps and Cynefin or something? But no, you want a female
    speaker." It took me a long time to realize that having a female role model is
    actually important to girls, and to young women coming into the industry as well.
    However, I've taken that on board somewhat reluctantly, as I don't really want
    to be a speaker for quality and gender diversity.
  prefs: []
  type: TYPE_NORMAL
- en: '"How about you just get me because I''m really good at talking about DevOps
    and Cynefin or something? But no, you want a female speaker. It took me a long
    time to realize that having a female role model is actually important to girls,
    and to young women coming into the industry as well."'
  prefs: []
  type: TYPE_NORMAL
- en: —Liz Keogh
  prefs: []
  type: TYPE_NORMAL
- en: I want to be a speaker for Cynefin and BDD, but sometimes the gender diversity
    stuff, the sexism, and the sexual harassment becomes a thing because all of that
    stuff gets in the way. So, then I have to be a speaker about that as well. But
    it's not what I want to be speaking about. My passion is delivering software and
    doing it as a woman, but that means I've had to talk about these other issues
    too.
  prefs: []
  type: TYPE_NORMAL
- en: The difference between the self-taught engineer and the schooled engineer of
    today
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Switching gears, you mentioned that you started with computers
    when you were seven. Do you have any thoughts about the difference between the
    self-taught engineers or schooled engineers of today? More broadly speaking, how
    do you see education in today''s world?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Liz Keogh**: I didn''t know what I didn''t know. Back then, I was a little
    bit more disciplined than a hacker. I have a fairly ordered mind when it comes
    to programming, so I got taught how to test my software, and I very quickly realized
    I was second-guessing myself if I wrote the tests afterward. At first, I was writing
    the tests around empty interfaces, and just making them compile, which, of course,
    is a lot like TDD now. There were no IDEs back when I started professional coding.
    We were all working in whatever text editors we had. I think it was Vi or Emacs
    or something like that, and you compiled on the command line.'
  prefs: []
  type: TYPE_NORMAL
- en: IDEs didn't exist, I didn't know about things like design patterns, and I definitely
    didn't know about domain-driven design. I didn't know there were communities out
    there where you could learn, and the internet was fledgling. It was 1998 when
    I graduated, so the internet was still in its infancy; companies didn't all have
    domain names, and they didn't have addresses.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: But that''s all changed in the 20 years since then—the internet
    has exploded.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Liz Keogh**: Exactly. Now the internet is everything, and you''ve got access
    to so much more information, and so much more around what good programming could
    look like. I''ve got some friends who are working in academia, and as part of
    their academia, they program, and by and large, they still haven''t caught up
    with modern programming practices. They''re not learning TDD or BDD, or about
    DevOps. But they know those things exist. All you need to do is reach out because
    there are people who will help you.'
  prefs: []
  type: TYPE_NORMAL
- en: For instance, Stack Overflow and the Stack Exchange network is fantastic, and
    it's not even just true of developers and operations, or Dev and Ops; it's true
    of anybody in a leadership position. There's a PM Stack Exchange, places where
    you can learn about psychology. Wikipedia is phenomenal because there's so much
    free information on there. I used to have to go to a library and check out a book
    when I was at school, but you don't have to do that anymore. You've got the whole
    of human knowledge on tap, and all it takes is finding out what it is that you
    don't know, and what of that you want to know, because there's more than you can
    possibly learn in a lifetime.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: How do you know what you don''t know? I think that that
    might be the problem, because if I''ve never heard about BDD, how do I know that
    I don''t know about it? I''m inventing an example.'
  prefs: []
  type: TYPE_NORMAL
- en: '"You''ve got the whole of human knowledge on tap, and all it takes is finding
    out what it is that you don''t know, and what of that you want to know, because
    there''s more than you can possibly learn in a lifetime."'
  prefs: []
  type: TYPE_NORMAL
- en: —Liz Keogh
  prefs: []
  type: TYPE_NORMAL
- en: '**Liz Keogh**: You find somebody who is working in the space that you want
    to be working in, and you ask them, "What is it that I don''t know? Where would
    you start?" If you''re working in a new place and you don''t have access to expertise,
    you learn by trying it out. I was there pretty much very early on in BDD, and
    I worked on the story of JBehave, which was the first English system-level BDD
    natural language tool. We learned by trying. JBehave 1.0 was not usable, nobody
    ever used it.'
  prefs: []
  type: TYPE_NORMAL
- en: I very recently tweeted a blog by David Chelimsky, in which he took the Ruby
    version of JBehave that was written as RSpec Story Runner and converted it to
    plain text. That's obviously the precursor for Cucumber, JBehave 2, and all of
    the English language tools that followed. In that case, you learn by doing, and
    it's okay to get it wrong. It's okay to create something that nobody uses because
    maybe it will lead to something that people do use.
  prefs: []
  type: TYPE_NORMAL
- en: '**Vik****tor Farcic**: To close this up, I''m going to ask you a question that
    I hate being asked. What do you see in the future?'
  prefs: []
  type: TYPE_NORMAL
- en: The future
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Liz Keogh**: Mars. I want to go to Mars. I would love to see the human race
    on Mars, and I know Elon Musk is still chasing that.'
  prefs: []
  type: TYPE_NORMAL
- en: So, what do I think we're going to see? I think we're going to see more cars
    in space, and more large-scale experimentation where it's safe to fail. I think
    that the future is going to be really exciting. I think companies are going to
    be held a little bit more accountable for their ethics, which means no more behavior
    like Uber, and no more Volkswagen emission scandals. That being said, I want to
    see transparency in organizations. I think that we're going to see some of the
    large banks dying off, and I genuinely think that you're going to start seeing
    mergers as banks die.
  prefs: []
  type: TYPE_NORMAL
- en: There's no way that people with money will support the level of waste that I
    see in some of the big enterprises. Capitalism will result in those things merging
    together, and I'm really, really hoping that that happens in a good way. I think
    that there's probably some space to make it happen in a good way, to make investment
    more transparent, to make the world a better place. I think we're probably going
    to see an economic crash in the next five years just because the wealth is so
    concentrated and it's such a level of concentration that human society just resists that.
  prefs: []
  type: TYPE_NORMAL
- en: In the last year or so I've also had a chance to look at the IPCC report on
    climate change. That's less exciting but more urgent. So right now, my focus is
    on that. I'm still hopeful that companies will step up to deal with it; that we'll
    see new emerging technologies that will help too. It's going to be hard, but there's
    a lot we can do from our end.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: So, you think that there''s going to be a big blowout in
    the next few years?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Liz Keogh**: I think when you have a sense of urgency, you have chaos. It
    buys you a lot of space for innovation and a lot of space for trying things out,
    because you have nothing to lose.'
  prefs: []
  type: TYPE_NORMAL
- en: I have a feeling we're going to see some really exciting things in the next
    10 years. We've got blockchain, we've got a bunch of new tools coming into play,
    we've got great DevOps practices, and we've got a whole open source ecosystem
    available that did not exist when I started programming. Java was free, and that
    was about it. I've been in IT for 20 years now, and I've seen so many changes
    already. I think the next 20 years is going to be even bigger than that. In another
    20 years' time, I don't think the world's going to be recognizable from what I
    knew 20 years ago.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Do you think then that the traditional, slow-moving, rigid
    enterprises will survive that future?'
  prefs: []
  type: TYPE_NORMAL
- en: '"In another 20 years'' time, I don''t think the world''s going to be recognizable
    from what I knew 20 years ago."'
  prefs: []
  type: TYPE_NORMAL
- en: —Liz Keogh
  prefs: []
  type: TYPE_NORMAL
- en: '**Liz Keogh**: They''ll survive the commoditized stuff, and stuff that''s really
    boring and very, very predictable, but the way people provide electricity and
    provide water—there won''t be a lot of money in it. Simon Wardley says it with
    respect to his mapping; everything moves to the right. You see it with Cynefin
    as well, and everything moves clockwise. It becomes stable, and then you build
    on the stable stuff. Everything''s going to be stabilizing, so the innovative
    stuff that we''re used to seeing right now—we think of DevOps as being innovative—it''s
    going to be just the way that software is done. People will ask, "Why would you
    do it any other way?"'
  prefs: []
  type: TYPE_NORMAL
- en: You'll have DevOps out of the box; you'll have Google servers that will be really
    cheap, and so why wouldn't you use them? Nobody's going to have their own infrastructure.
    If you build your own infrastructure and you're not working with Google, Facebook,
    or some other large company, people will be asking, "What are you doing? Are you
    genuinely configuring a server by hand? Why would you do that?" It will be that
    level of crazy. We're not there yet, but we will be.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I might be a bit more skeptical than that, because I have
    the impression that when I go and visit enterprises, I get answers along the lines
    of, "We''re all Agile," and then you spend the day with them and you realize,
    they''ve only just started Agile.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Liz Keogh**: Try not using the word Agile. I don''t use the word Agile when
    I do my consulting; I focus on delivery and talk about uncertainty and predictability
    and things like that. I focus on the awesome.'
  prefs: []
  type: TYPE_NORMAL
- en: When you do see something moving—when you do see something really great—focus
    on that, spread it, and tell stories. Encourage other people to tell stories,
    because stories have power and are a really great way of getting change working.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Is there anything else that you would like to share?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Liz Keogh**: Somebody once asked me what my favorite thing and worst thing
    about working in software development was. I said the worst thing was the human
    tendency to see patterns in uncertainty that don''t exist, and then move forward
    getting things wrong. The best thing is the human ability to see patterns in uncertainty
    that don''t exist so they can move forward. Those two things go hand in hand.
    So, the same things that trip us up are the things that allow us to move forward,
    and I think it''s worth just celebrating that.'
  prefs: []
  type: TYPE_NORMAL
