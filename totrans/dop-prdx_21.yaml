- en: Introducing Julian Simpson
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Julian Simpson worked at Neo4j until August 2018, where he helped deliver projects
    across both DevOps and continuous delivery. In August 2018, Julian moved to Fuel50,
    where he's now a Global Security and Platforms manager with a focus on building
    out the company's platform. Julian is also an organizer at DevOpsDaysNZ. You can
    follow him on Twitter at `@builddoctor`.
  prefs: []
  type: TYPE_NORMAL
- en: Defining DevOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I want to start by asking you a two-fold question. First,
    how would you define DevOps, and then how has that definition played out in your
    career?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: I used to be a Unix systems administrator. In that role,
    I spent a lot of time during the dot-com boom building Solaris servers and arguing
    with developers. This conflict between system administrators and developers carried
    on for the next three to four years of my career.'
  prefs: []
  type: TYPE_NORMAL
- en: During this time, two things became obvious to me. Firstly, the approach of
    building systems by hand seemed wrong, and secondly, it really seemed counterproductive
    to handle this conflict. While I can be sucked into a good fight, it didn't seem
    like a positive way to go about things. Eventually, in 2002, I discovered the
    CFEngine project and started building all my systems with CFEngine, in order to
    rebuild those builds.
  prefs: []
  type: TYPE_NORMAL
- en: This was combined with Solaris Jumpstart, which was an awesome technology to
    have at the time, because from the hardware point of view, I could just build
    a machine anytime I wanted to. I could also iterate over builds and store that
    source in version control, practices that evolved into DevOps. An important thing
    to add is that I discovered the Agile movement in 2004; I consider the DevOps
    movement to have evolved as a natural progression of the Agile movement.
  prefs: []
  type: TYPE_NORMAL
- en: '"I consider the DevOps movement to have evolved as a natural progression of
    the Agile movement."'
  prefs: []
  type: TYPE_NORMAL
- en: —Julian Simpson
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: That''s how I typically describe it too. While I agree that
    DevOps is an evolution of Agile, the conflicts you described are something that
    I see today between developers, QA, security and everybody else involved. What
    do you think are the causes of those conflicts?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: I think it''s all about structural conflict within organizations.
    To me, it seems insane that, as an industry, we set up teams that have conflicting
    goals and then expect them to resolve the conflict as if it''s something about
    them rather than the game they''ve been asked to play. You''re keeping the system
    secure, up, and available, and your job is to deliver it as fast as you possibly
    can.'
  prefs: []
  type: TYPE_NORMAL
- en: I don't know if it's just folk wisdom or whether there's actual research we
    can rely on, but it seems that there are a lot of teams out there that go out
    of their way to deliver the wrong thing very quickly, but at the cost of security
    or availability. If all those things are causing you to sweat, then actually working
    together on the details of what features to deliver in a project and giving the
    entire team the incentive to deliver it securely and in such a way that you can
    keep it available, to me, seems like an obvious way to go about things.
  prefs: []
  type: TYPE_NORMAL
- en: The difference between DevOps and Agile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Let''s talk more about the evolution from Agile to DevOps.
    What exactly did you mean by that?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: I came to the Agile movement reasonably late in its development.
    I wasn''t around to see some of the earlier Agile projects, but my understanding
    is that we solved some of the problems of how we know what to build and how we
    should go about planning and delivering the build in an iterative fashion. Once
    you''ve solved that problem, there are engineering challenges, such as integration.
    There''s no excuse for having a huge merge phase at the end of your project now
    because continuous integration has been a thing since at least the late 1990s.'
  prefs: []
  type: TYPE_NORMAL
- en: '"DevOps is the response to solving problems that you have when you''re successful
    in the earlier stages of your project''s evolution."'
  prefs: []
  type: TYPE_NORMAL
- en: —Julian Simpson
  prefs: []
  type: TYPE_NORMAL
- en: You'll find other problems that you didn't have originally because you probably
    weren't succeeding anyway. I've only just tried to phrase this now, but maybe
    DevOps is the response to solving problems that you have when you're successful
    in the earlier stages of your project's evolution?
  prefs: []
  type: TYPE_NORMAL
- en: If you're getting better at writing both the correct and the most appropriate
    software at the time and deploying it, suddenly you have all these other operational
    considerations to think of. To me, if you have a deployment problem, it's probably
    a good problem to have.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Exactly, and it changes if part of your pipeline suddenly
    becomes much faster. Then, as you said, you encounter the problem on the next
    page.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: I''m a big fan of the theory of constraints, so that absolutely
    rings true. I believe that you need to optimize across the entire value chain
    rather than optimizing based on cost, which is what a lot of projects do.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Cost per department, to make it even more complicated.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: Exactly. I''ve worked on several projects for consultancies
    where the departmental politics didn''t come into it so much as just the day rates
    of all these developers, which were obvious to the project managers. So, they
    would optimize for developer utilization rather than anything else.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Something like an optimization Excel sheet, when you change
    two numbers and then suddenly, you''re more optimized.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: I saw that on projects where it was entirely feasible for
    the developers to run all the acceptance tests on their development systems. I
    think they should have been doing it at the time because we had a huge Continuous
    Integration (CI) and QA bottleneck, so the sensible thing to do would be for each
    pair to run those tests before they pushed, thereby easing up on the bottleneck
    later. This was a very hard message to get across to project managers.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I recently discovered that you go by the name of The Build
    Doctor? How did you get that name?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: I had a little niche between 2004 and 2008 where I would
    fix people''s Ant builds. At the time, I was very proficient with Apache Ant,
    to the point that I''d written an article in a book about refactoring Ant build
    files. The tool isn''t so popular now, but back then I was wondering if I was
    going to move on from consultancy, or if I would just build my own personal brand.
    I thought, okay, build doctor – I already fix this stuff for a living, so I''ll
    build a brand based on that. But right now, it''s kind of on hold.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: What are you up to now?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: I''ve been working for Neo4j, formerly known as Neo Technology,
    since 2012\. Within the company, I''ve worked in the engineering, marketing, and
    IT departments. I''ve found myself doing everything from working on the product
    to deploying our full-stack website on Amazon.'
  prefs: []
  type: TYPE_NORMAL
- en: Right now, I'm working on internal IT projects and writing internal apps. In
    fact, this morning I've been writing scripts to delete Dropbox accounts.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: So, what makes Neo4j such a great company?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: Simply put, the people.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Could you elaborate on that? Because, relating this back
    to your field of work and the concept of DevOps, in your opinion, is there such
    a thing as a DevOps team?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: When I started at Neo4j, I worked with the Swedish team.
    As a company, we tended to optimize for good people and good attitudes, and we''ve
    had an almost unconsciously very good selection of people in that way.'
  prefs: []
  type: TYPE_NORMAL
- en: DevOps teams, DevOps problems, and configuration management teams
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: But can we have something called a DevOps team? I don't believe so. You might
    spin up a team to solve a DevOps problem, but then I wouldn't even say we specifically
    have a DevOps problem. I'd say you just have a problem. My original thinking about
    the movement from 2009 onward, when the name was coined, was that it would be
    about collaboration and perhaps the tools would sort of come out of that collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: '"Can we have something called a DevOps team? I don''t believe so."'
  prefs: []
  type: TYPE_NORMAL
- en: —Julian Simpson
  prefs: []
  type: TYPE_NORMAL
- en: I expected that a configuration management tool would be adopted by developers,
    so it was possible for a systems person and a developer to collaborate, but I
    didn't expect that a bunch of classic systems administration teams would just
    rebrand to DevOps because there were similarities with some of the tools. I didn't
    expect to have what I'd traditionally think of as a configuration management team
    become a DevOps team. To a certain extent, I think the only difference is with
    outsourced platforms now because we've always had someone running what you would
    call a platform.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: That''s what confuses me. On the one hand, hardly anybody
    disagrees that DevOps is mostly about collaboration. But then you have a huge
    number of DevOps teams, which to me sounds completely contradictory. If you create
    another team, you''re creating another silo that will probably not actually help
    in collaboration at all.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: I don''t see much difference between what you call a DevOps
    team now and what a configuration management team used to be. The only difference
    is that the DevOps team today takes on what a systems or a Unix administration
    team might have done back in the day: the same basic structure with a new name
    for the team in the middle.'
  prefs: []
  type: TYPE_NORMAL
- en: If you're going to have that DevOps team, I would expect that you'd be able
    to take the developers and operations teams from the outside and rotate them through
    with the goal of downsizing or disbanding that team or just replacing it with
    one or two people who are responsible for running the infrastructure that your
    pipelines run on.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: My theory, judging from the companies I''ve visited, is
    that the DevOps team is the team who was the fastest to change the title.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: It becomes a branding or a status thing rather than a useful
    exercise in collaboration.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I''ve worked for a software company, and they don''t help
    either. If you go to a conference, every single tool from 10 years ago is now
    a DevOps tool. They''re all saying that if you buy this tool, you''re going to
    become DevOps-certified.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: Absolutely, and the incentive to do so is too strong. I
    even suggested that CITCON rebrand and at least talk about DevOps more, because
    I see them as one of these sorts of prototypical conferences.'
  prefs: []
  type: TYPE_NORMAL
- en: One of the inspirations for Jez Humble and Dave Farley's book, *Continuous Delivery*,
    was that we had a DevOps team effectively via eight people, including myself,
    Chris Read, Dan North, Tim Harding, and several others. Our job was just to bridge
    the gap between a bunch of contractors on day rates, consultants, and the operations
    team, who were probably too overloaded to take much of that on. We're either paying
    back technical debt or working on how to get the code from CI/CD back into production,
    while passing all of the risk management and internal controls that they needed.
    That did disband; it scaled up to solve a problem, and then once most of those
    problems were solved, it became just me for a while, before even I left.
  prefs: []
  type: TYPE_NORMAL
- en: '"It [DevOps] becomes a branding or a status thing rather than a useful exercise
    in collaboration."'
  prefs: []
  type: TYPE_NORMAL
- en: —Julian Simpson
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Almost everybody gives me a different explanation, though
    I must say that I liked yours the most. I read in one of your blog posts that
    the full definition of DevOps is common sense. So, if DevOps is a theory and had
    existed, say, since the dawn of time, and we know there''s a need for operations
    and development to collaborate in one way or another, why do you think DevOps
    became a thing so relatively recently?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: I think that DevOps has always been a thing. I found it
    interesting that when I used to work at ThoughtWorks, Martin Fowler and Rebecca
    Parsons, their CTO, had both worked as system administrators at universities.
    I think DevOps used to be just a thing that someone on the team did. The developers
    that I used to work with were super competent at whatever Unix system you''d be
    deploying.'
  prefs: []
  type: TYPE_NORMAL
- en: A lot of my experience is very geared toward Unix. I did a talk the other day
    at a company that was mostly .NET, and while I'm not sure my message really got
    across because their problems are slightly different, I think someone will always
    solve those problems. But then I think with the dot-com and the Y2K boom, we literally
    forgot because, remember, Linux on the desktop wasn't really a thing.
  prefs: []
  type: TYPE_NORMAL
- en: You still had a lot of people deploying on to Unix, and I don't think macOS
    was very popular in development shops at all, so there was barely any command
    line being done. My experience, at least, is that everyone wanted to be given
    a Windows machine and an IDE and be told to get some code delivered, and they
    didn't even have the tools to work on the problem in a different OS. I believe
    a lot of my conflict with developers stemmed from the fact that they pretty much
    just needed Java. I think the marketing of the "compile once and run everywhere"
    mantra contributed to the problem as well. Microsoft's "visual everything" mantra
    also contributed to a lack of understanding of what was going on.
  prefs: []
  type: TYPE_NORMAL
- en: You had this incredible demand for developers to be solving important problems
    such as, "Will airliners fall out of the sky on the turn of the millennium?" or
    less important problems like Pets.com. Lots of inexperienced developers joined
    the industry and simply didn't have the skills to work on those problems, so they
    tended to be thrown over the fence even more frequently to an operations team.
  prefs: []
  type: TYPE_NORMAL
- en: Conveniently, the Y2K and dot-com boom era ended after I started working on
    software projects. I used to work tech support, so I may be totally ignorant of
    a couple of decades before that, but my feeling is that we made it very bad in
    the early noughties.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Back when everybody became a programmer.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: Exactly! We always joked about those people who would go
    back to selling life insurance once the dot-com boom was over. For them, it was
    possible to cram in some certificates and then start contracting for a daily rate
    that wasn''t huge but was a huge advantage over a lot of normal jobs, such as
    selling life insurance.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Wasn''t that also the era when software vendors started
    being aggressive with the UI approach to things? I mean, you''ve got Adobe Dreamweaver,
    where you can drag and drop things and suddenly you''ve created a web page. You
    also have VSB, and Oracle ESB where you can also drag, drop, and create all the
    iterations. I hear that it''s part of the "anybody can do this" marketing idea.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: That was the point I was making about Microsoft''s marketing
    around branding everything visually. I worked at one company where there were
    a lot of dominant developers, and we were using Perforce. It was quite complicated
    to roll back and commit in Perforce, and in the end, the best thing to do would
    have been to write a script. I would then put the script together for you, which
    you could just run and revert that commit.'
  prefs: []
  type: TYPE_NORMAL
- en: The person I was working for said no because he believed everything should be
    visual. This was a firm belief. If he couldn't click on a button and drop down
    a bit of text then it was too much and went against their beliefs. Microsoft wanted
    to encourage that; they wanted to differentiate against Unix. This all took place
    during the GPL-is-viral days, so I believe that selling products with GUIs didn't
    help one bit.
  prefs: []
  type: TYPE_NORMAL
- en: I have found that's the litmus test for somebody if you're trying to work out
    where their skills lie. If they don't have a GUI to nudge them in the right place,
    it's very interesting to see how they solve a problem.
  prefs: []
  type: TYPE_NORMAL
- en: '"I think there is a realization that the GUI phase was a bit wrong, and I think
    that encourages developers to explore the command line more."'
  prefs: []
  type: TYPE_NORMAL
- en: —Julian Simpson
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Do you think that''s still a thing? I have the impression
    that the industry, especially from 2017, is moving away from all UI-based things.
    If you look at Docker and Kubernetes, it''s completely command line. Everything
    is moving back toward Unix basics.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: I haven''t spent any time playing with the new version
    of Windows, but the fact that they have Windows PowerShell Core shows they''ve
    changed. I was really, really surprised when I saw Scott Hanselman deploy to Azure
    with a `git push` a few years ago. I think there is a realization that the GUI
    phase was a bit wrong, and I think that encourages developers to explore the command
    line more, which has changed my job. My job used to be understanding how build
    scripts worked and how the Unix or Linux production environment worked, which
    I think a lot of people are just getting now.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: When you mentioned Unix and Linux environments, do you think
    that we''re finally seeing some changes there? It''s one of the areas that hasn''t
    changed in a while, for better or worse.'
  prefs: []
  type: TYPE_NORMAL
- en: The evolution of containers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Julian Simpson**: I think containers have changed a lot because you have
    this constant migration of value up the stack.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: What do you mean by that?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: We used to keep this business logic and store procedures
    in the database, but it moved into code running above the database. I think we''re
    a long way from seeing where the container thing is going to end up, but it seems
    like that''s the biggest change. No one''s interested in the host OS anymore.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: You mean as if it''s not the lowest denominator anymore?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: Yeah, I think in some ways it''s incredibly helpful that
    whether you''re looking at containers or platform as a service, people can deliver
    code using them. I haven''t been that interested in the gory details of container
    runtimes; I''m just happy that if I want to roll out something, I can deploy it on
    ECS, or whatever container runtime as a service exists.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I think CloudBees have one, don''t they?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: Yes, at CloudBees, it''s mostly Jenkins-related, but we
    are now kind of going 100% Kubernetes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I think in a way, containers are fulfilling the promise Java gave a long time
    ago: run anywhere. Microsoft Windows is still shaky in this regard, but it''s
    getting there as well.'
  prefs: []
  type: TYPE_NORMAL
- en: I also think it helps that no container vendor told anybody that they would
    be able to run containers on silicon in the way they promised in the 1990s. As
    you said, they didn't come through with those. I think you're right that my job
    used not just to be running Jenkins or whatever other CI server the project had
    chosen to use, but also configuring the environments for that. Now you can say
    that every build runs in a container. Well, yes, a lot of those problems have
    just vanished. If you can build a container to represent a production runtime
    with a blank wall, well, perfect.
  prefs: []
  type: TYPE_NORMAL
- en: Looking into the future
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Exactly. I hate this next question because I get asked it
    all the time, but I''m going to ask you anyway: where do you see the future?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: I honestly don''t have an answer for that. I think the
    public cloud is one area to keep an eye on. The benefit of such a massive arms
    race taking place between Amazon, Microsoft, Ali Cloud, IBM, and Google Cloud,
    is that for us developers who just want to deliver stuff, our choices are going
    to be amazing.'
  prefs: []
  type: TYPE_NORMAL
- en: '"We all know people who show up to their IT job and do what they''re asked
    to do and then go home again. I think there is a huge risk to their careers when
    the inevitable automation takes place."'
  prefs: []
  type: TYPE_NORMAL
- en: —Julian Simpson
  prefs: []
  type: TYPE_NORMAL
- en: I think the way that Amazon, in particular, is doing a lot around networking,
    so that I can extend an Amazon VPC bridge with my local network if I need to,
    will be interesting. I should probably be able to outsource an awful lot of IT
    stuff to Amazon and just focus on writing things that matter, and then obviously
    competing with Amazon when they write it too.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: When I asked a friend of mine a similar question, he also
    started with the cloud. His theory is that having incompetent people that do the
    same thing every single day will mean that they''ll eventually lose their jobs
    because of Amazon and Azure. It will be kind of a great filter of people who do
    valuable jobs and people who just do "something."'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: I can see that quite easily. We all know people who show
    up to their IT job and do what they''re asked to do and then go home again. I
    think there is a huge risk to their careers when the inevitable automation takes
    place. Some people will literally have their careers automated away. The adage
    "go away, or we''ll replace you with a very small shell script" will never be
    truer.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Exactly. The other thing that confuses me is that I heard
    the same theory about how people will be replaced with shell script 15 years ago,
    and it''s still somehow not happening.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: I think what''s different now is that the shell script
    will just be calling the AWS CLI.'
  prefs: []
  type: TYPE_NORMAL
- en: Addressing vendor lock-in
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Are you concerned at all with vendor lock-in? The idea that
    companies can basically take over and lock you in forever and ever?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: I think I''m concerned. I guess as these companies try
    to differentiate all their services, there will be an inevitable kind of lock-in
    effect from that. It''s obviously in everybody''s interest to keep you locked
    into their platforms. But if they try to sell the same vanilla product, then it''s
    a race to the bottom.'
  prefs: []
  type: TYPE_NORMAL
- en: As a result, these companies will try to differentiate things. I mean, if I
    were a CTO of a company that relied heavily on one cloud platform, I'd be looking
    to mitigate against that risk; for example, possibly by just running a percentage
    of my workload elsewhere so that I have the skills to manage a different platform.
    I think the problem with being able to outsource everything is that you also outsource
    your skills atrophy, as a person and as an organization.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: That shouldn''t be much different than the problems we''ve
    had with mainframes or the problems we had when everybody was outsourcing everything.'
  prefs: []
  type: TYPE_NORMAL
- en: But as I was saying, on the one hand, I hear a lot of concerns about vendor
    lock-in, but on the other hand, I'm not sure that it's any different than when
    companies were outsourcing everything before, or when they were running mainframes,
    which were all vendor lock-ins. Somehow we, or at least some of us, still managed
    to get through those issues.
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: I don''t think it''s going to be as bad as one of the historical
    vendor lock-ins of the past, such as the Bell Telephone Company, something that
    had to be broken up as a monopoly. I think it''s going to be the price you pay
    for taking the convenience of a vendor''s offerings.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: That''s very interesting.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: If you just say that it''s most convenient to run on Azure
    and then you only develop those skills in-house, then yes, I think it''ll be very
    easy to just default to lock-in, and that could lead to an expensive exit. I think
    it''s probably a net positive that you don''t have to build platforms anymore.'
  prefs: []
  type: TYPE_NORMAL
- en: '"If I were a CTO of a company that relied heavily on one cloud platform, I''d
    be looking to mitigate against that risk."'
  prefs: []
  type: TYPE_NORMAL
- en: —Julian Simpson
  prefs: []
  type: TYPE_NORMAL
- en: I've worked in several jobs where I had to install SPARC systems in offices,
    and it's annoying. I think for anyone who wants to deliver software or services,
    it's probably better that they don't have to employ someone to move servers around
    the office, rack them, then install them and try to make them work. That was the
    thing I did in the 1990s, and I think that what we have now is certainly much
    better. I think there's incredible value in being able to rent your IT services
    by the minute.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: If you exclude the big companies such as Netflix, Google,
    and Apple, what do you think about building a private cloud? Does it make sense
    and is it a viable option?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: I would probably bet against my own ability to deliver
    a private cloud. I''m sure I could do that, but trying to keep that secure in
    this kind of security threat environment is probably a much harder challenge than
    it ever was. I am amazed at some of the security issues we''ve seen over the last
    few years.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Do you think we have more security problems or are those
    problems just more visible now?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: I think they''re more visible today, and I think that security
    research seems to follow the trends as well. Once someone discovers one vulnerability,
    then there are more eyeballs looking for similar vulnerabilities. They seem to
    come out in waves. But I think as things become more connected, then security
    is a concern that wasn''t as visible as before. The idea that your corporate network
    isn''t a safe place wasn''t an assumption we had 15 years ago.'
  prefs: []
  type: TYPE_NORMAL
- en: Culture and collaboration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: That''s a valid point. In closing, do you have any parting
    ideas and words, or is there anything that comes to mind that I forgot to ask?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: No, I think we''ve covered what I think is most important,
    which is the culture. I''m super pleased that we haven''t really discussed automation
    or any of the tools, except as examples of something else. To me, DevOps is all
    about culture and collaboration.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Does that mean the culture shapes the tools or do tools
    shape the culture, or both? I mean, can you adopt one without the other?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: My guess is no, because people''s expectations must change.
    I think the tools they use and the culture in which those tools are used are tightly
    linked. If you could change the culture, then the tools might change consequently,
    or vice versa. But I think it''s more than that.'
  prefs: []
  type: TYPE_NORMAL
- en: Lindsay Holmwood did a talk at DevOpsDays 2016 in Wellington, New Zealand, where
    he pointed out that culture is kind of invisible and what you really have are
    artifacts that kind of tell you about culture. Archaeologists would dig something
    up and then make some assumption, and it's the same here. I think we see things
    every day that tell us what our company culture is, and maybe the tool is just
    an artifact of the culture.
  prefs: []
  type: TYPE_NORMAL
- en: '"To me, DevOps is all about culture and collaboration."'
  prefs: []
  type: TYPE_NORMAL
- en: —Julian Simpson
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I haven''t heard that one before, but I love it.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Julian Simpson**: Yeah. This is entirely stolen from Lindsay, so it''ll be
    great if you talk to him. If your company has a need for massive amounts of control,
    then you''re probably not going to go with distributed version control systems,
    or you probably want to use some rational product for capturing requirements.
    Even the phrase "capturing requirements" probably has some kind of cultural impact.
    I guess my parting words would be that I think tools possibly tell you what your
    culture is.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I love it. I really love it.'
  prefs: []
  type: TYPE_NORMAL
