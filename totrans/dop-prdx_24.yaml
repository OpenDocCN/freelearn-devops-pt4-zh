- en: Introducing Andy Clemenko
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍安迪·克莱门科
- en: Andy Clemenko is a senior solutions engineer and architect at Docker, Inc. He's
    also a technologist and DevOps analyst, with a focus on helping organizations
    make the transition from traditional development practices to a modern set of
    culture, tooling, and processes that increase the release frequency and quality
    of software. You can follow him on Twitter at `@clemenko`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 安迪·克莱门科是 Docker 公司的一名资深解决方案工程师和架构师。他还是一名技术专家和 DevOps 分析师，专注于帮助组织从传统的开发实践过渡到一套现代化的文化、工具和流程，提升软件的发布频率和质量。你可以通过
    Twitter 关注他，用户名是 `@clemenko`。
- en: '**Viktor Farcic**: I want to jump right into our discussion with the one question
    I''m asking everyone: what is DevOps?'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔西奇**：我想从我问每个人的一个问题开始我们的讨论：什么是 DevOps？'
- en: What is DevOps?
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 DevOps？
- en: '**Andy Clemenko**: DevOps is a lifestyle. It''s all about being able to adapt
    to new technologies, not only from a developer point of view, but also an operations
    point of view, while still being nimble. That''s not to say DevOps is only that.
    There are a lot of other concepts built into it, which is why I call it a lifestyle.
    Beyond being able just to adapt, you''ve also got containers, twelve-factor apps,
    declarative infrastructure, and infrastructure as code. Yes, you''ve got all of
    these buzzwords around it, but at the end of the day, it''s just a lifestyle.
    It''s about being nimble, retooling, and moving forward.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**安迪·克莱门科**：DevOps 是一种生活方式。它的核心在于能够适应新技术，不仅仅是从开发者的角度来看，也从运维的角度来看，同时保持灵活。这并不是说
    DevOps 仅仅是这些。它还融入了很多其他的概念，这也是为什么我称它为一种生活方式。除了能够适应，你还需要容器、十二因素应用、声明式基础设施和基础设施即代码。是的，周围有很多流行词汇，但归根结底，它只是生活方式。它是关于灵活性、重新调整工具并不断向前迈进。'
- en: '**Viktor Farcic**: So, how does Andy Clemenko fit tools into that picture?
    Because, in today''s field, I''m finding that every tool is a DevOps tool.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔西奇**：那么，安迪·克莱门科是如何将工具融入这个框架中的呢？因为在今天的领域里，我发现每一款工具几乎都是 DevOps 工具。'
- en: '**Andy Clemenko**: To a certain extent, the tools almost don''t matter, because
    you can hand a carpenter any hammer and they''ll still be successful. Within DevOps,
    you give any DevOps or SRE engineer (whatever you want to call it these days)
    a tool—whether it''s OCI, Rocket, Docker, Kube, Swarm, Jenkins, or GitLab, it
    doesn''t matter—and they should be able to work with it. But again, it''s about
    being nimble and open-minded enough to embrace the next thing, which will look
    entirely different.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**安迪·克莱门科**：在某种程度上，工具几乎并不重要，因为你可以给一个木匠任何一把锤子，他们依然能够成功。在 DevOps 中，你可以给任何一个 DevOps
    或 SRE 工程师（现在你想称他们为啥都行）一个工具——无论是 OCI、Rocket、Docker、Kube、Swarm、Jenkins 还是 GitLab，都没关系——他们应该能够使用这些工具。但最终，关键是要足够灵活和开放，接受下一个看起来完全不同的工具。'
- en: '"DevOps is a lifestyle. It''s all about being able to adapt to new technologies,
    not only from a developer point of view, but also an operations point of view."'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '"DevOps 是一种生活方式。它的核心是能够适应新技术，不仅从开发者的角度，也从运维的角度来适应。"'
- en: —Andy Clemenko
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: —安迪·克莱门科
- en: '**Viktor Farcic**: Speaking of tools, I''m fascinated by containers. Do you
    think it''s a coincidence that, as an industry, we''ve started talking about containers,
    microservices, and DevOps all at the same time? Is that pure luck or is there
    some relation behind it?'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔西奇**：说到工具，我对容器非常感兴趣。你认为，作为一个行业，我们开始同时讨论容器、微服务和 DevOps 是巧合吗？这纯粹是运气，还是背后有某种联系？'
- en: '**Andy Clemenko**: I would say that it''s a coincidence. Containers helped
    to accelerate that DevOps lifestyle adoption but, having worked on large Hadoop
    clusters, and having seen the DevOps methodologies with Puppet, Chef, Salt, and
    Ansible, what we''ve just done is effectively retooled and brought our tools up
    in abstraction layers. We''re no longer orchestrating at the operating system
    layer. Instead, we''re orchestrating at the cluster level.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**安迪·克莱门科**：我会说这是一个巧合。容器帮助加速了 DevOps 生活方式的普及，但在我曾经在大型 Hadoop 集群上工作，并且看到过使用
    Puppet、Chef、Salt 和 Ansible 的 DevOps 方法论之后，我们所做的实际上就是重新调整工具，提升了抽象层次。我们不再是在操作系统层面进行编排，而是在集群层面进行编排。'
- en: But that correlation helped accelerate the move up. It's still the same now,
    regardless of whether you're working in industry, government, or anywhere really.
    There's this idea that when you have a development team and an operations team,
    they throw shit over fences. That DevOps lifestyle is about bringing those two
    teams and their functions together. Forget teams, because one team with the ability
    to effect change is quicker than two teams trying to do the same thing. It's in
    this acceleration that I think containers play a part. Honestly, what I'm trying
    to say is that it's about soft skills. It's about the people, it's about the teams,
    and it has nothing to do with the tooling, just like how Docker, DevSecOps, and
    GitOps are all just buzzwords. We're going to get to a point where whatever object
    you're creating—whether it's a container, a VM, or a JAR, it doesn't matter—has
    the metadata within it that says how it should be shipped, and who should approve
    its life cycle.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 但这种关联帮助加速了发展的进程。现在无论你是在工业界、政府部门，还是其他地方，情况都是一样的。大家有一个共识：当你有一个开发团队和一个运维团队时，他们常常会“把东西丢到篱笆另一边”。DevOps的生活方式就是将这两个团队及其职能结合起来。忘记团队吧，因为一个拥有改变能力的团队比两个尝试做同样事情的团队要更快。在这种加速中，我认为容器起到了作用。老实说，我想说的是，这关乎软技能，关乎人，关乎团队，和工具没关系，就像Docker、DevSecOps和GitOps这些都只是流行词汇。我们将达到这样一个阶段，不论你创建的是容器、虚拟机还是JAR包，它里面都有元数据，告诉你它应该如何运输，谁应该批准它的生命周期。
- en: '**Viktor Farcic**: That makes sense.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：这很有道理。'
- en: '**Andy Clemenko**: But I remember last year, during a demo at KubeCon, a practitioner-driven
    conference, Brendan Burns did a presentation on self-deploying images, where your
    object understands not only what it needs to be in order to be healthy, but where
    it needs to go and, who needs to approve its use and security provenance. So,
    now you''ve got an audit trail built in, and you''re wrapping that object with
    as much embedded metadata as possible.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**Andy Clemenko**：但我记得去年在KubeCon上，Brendan Burns在一个面向实践者的会议中做了一个关于自我部署镜像的演示，展示了你的对象不仅了解自己需要什么才能保持健康，而且还知道它需要去哪里，谁需要批准它的使用以及安全来源。所以，现在你有了内置的审计追踪，并且你为这个对象加上了尽可能多的嵌入式元数据。'
- en: '**Viktor Farcic**: So, it''s almost as if we are switching toward communication
    through code and metadata? I don''t need to tell you what I want, as it''s all
    self-contained in my artifact.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：所以，几乎可以说我们正在转向通过代码和元数据进行沟通？我不需要告诉你我想要什么，因为这些内容都已经在我的工件中自包含了。'
- en: '**Andy Clemenko**: Exactly, and as a builder, or as a team building those objects,
    you can describe what it should do, while having the opportunity to divert it.
    But today, if I give you a Docker image, you can do whatever you want with it.
    I love the idea that, in the future, I could give you a Docker image that I could
    lock so that only you could run it, and thus you can''t execute into it, and you
    can''t do funny things with it. But it''s also got a security provenance, so you
    know that somebody gave it to me and then I gave it to you—through cryptography—so
    there''s at least an audit trail.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**Andy Clemenko**：完全正确，作为构建者，或者作为团队来构建这些对象，你可以描述它应该做什么，同时也有机会将其引导到其他方向。但今天，如果我给你一个Docker镜像，你可以对它做任何事情。我喜欢这样一个想法：在未来，我可以给你一个Docker镜像，我可以将其锁定，只允许你运行它，这样你就无法进入其中，也不能对它做任何奇怪的事情。但它也有安全来源，确保你知道是谁把它交给我的，然后我又通过加密技术把它交给你——至少有一个审计追踪。'
- en: The next phase, at least in the way I see it, is having these objects really
    be, I'm not going to say self-aware, but at least have more meaningful metadata
    around security, provenance, and deployment. What if, instead of having a `docker
    run` command that was word wrapped three times with passing in volumes and stuff,
    you just did `docker run`, and the container itself goes, "Hey, I should have
    this, where is it? I should have this variable, and you haven't given it to me.
    Can I have it?" A more self-aware state is kind of a weird way to describe it.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 下一阶段，至少在我看来，是让这些对象真正具备，我不会说是自我意识，但至少有更多有意义的关于安全性、来源和部署的元数据。假如，不是有一个`docker run`命令，里面包含三次换行并传递卷等东西，而是你直接执行`docker
    run`，然后容器自己就会说：“嘿，我应该有这个，在哪里呢？我应该有这个变量，但你没有给我。可以给我吗？”更自我意识的状态算是一种奇怪的描述方式。
- en: Describing the company of today
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 描述今天的公司情况
- en: '**Viktor Farcic**: Switching gears a little, if you were to start a company
    today, what would it look like? How would people behave and interact with it?'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：换个话题，如果你今天要创办一家公司，它会是什么样子？人们会如何与公司互动和沟通？'
- en: '**Andy Clemenko**: I''m a big fan of smaller companies, where the lines between
    teams are blurred. So, if I''m starting a start-up, I want to make sure that our
    internal IT understands our product, and that everybody can work collaboratively.
    I think once you start getting over a couple of hundred people in size, that''s
    when the fences immediately go up.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**安迪·克莱门科**：我非常喜欢小型公司，那里的团队之间的界限较为模糊。所以，如果我要创办一个初创公司，我会确保我们内部的IT团队理解我们的产品，确保每个人都能协作工作。我认为，一旦公司人数超过几百人，围栏立刻就会出现。'
- en: Something I hear time and time again from customer interaction is, "Oh, that's
    the networking team. They'll get to it when they can." With these fences, you
    have different North Stars, different goals, or you have different strategies
    or managers. I'm a fan of a flat organization with cross-functional teams. Like
    today, you might be interested in monitoring and helping with a customer solution,
    but that doesn't mean that internal IT can't take advantage of it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我从客户互动中一再听到的一句话是：“哦，那是网络团队的事，他们能做的时候会去处理。”有了这些围栏，你就会有不同的北极星、不同的目标，或者不同的战略和管理者。我更喜欢一个扁平化的组织结构和跨职能团队。比如，今天你可能对监控和帮助客户解决方案感兴趣，但这并不意味着内部的IT团队不能借此机会。
- en: '**Viktor Farcic**: But are these fences inevitable, then, or are they just
    more familiar? I wonder myself because I''m yet to see a big company that works
    like that, which is something I would love to see.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：但这些围栏是不可避免的吗，还是说它们只是更为熟悉？我自己也在想，因为我还没有见过一家像那样运作的大公司，而这是我很想看到的事情。'
- en: '**Andy Clemenko**: I think you get pockets, but unfortunately the counter to
    that cross-functional team is organizational stability. Because, if you''ve got
    a team, you''ll find that, as your company grows, you''re going to have pockets
    of these teams. So, the question arises about how you organize them? For lack
    of a better term, how do you *control* them, and how do you make sure that they''re
    all moving together? The way you do that is you basically give each team a North
    Star, which starts to create those vertical fences.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**安迪·克莱门科**：我认为你会看到一些团队，但不幸的是，与跨职能团队相对的却是组织的稳定性。因为如果你有一个团队，随着公司规模的增长，你会发现这些团队会分成几个小团队。那么，问题来了，如何组织这些团队？简单来说，如何*控制*它们，确保它们一起前进？你可以通过给每个团队设立一个北极星来做到这一点，这样就能开始形成这些垂直的围栏。'
- en: The thing with that is that it's just organizationally tough, and the problem
    is a lot of people end up in middle management. Because of that, there's a vested
    interest in keeping middle management alive. Look at it from the perspective of
    a 300-employee company threshold. One threshold is 100, the second is 300, and
    then it's about 500 to 600 or possibly even closer to 1,000\. But for me, in my
    ideal company, I like staying in the range of a couple of hundred employees.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这其中的难点在于，组织结构本身就很难，而问题是很多人最终都进入了中层管理。由于这个原因，人们有很大的动机去维持中层管理的存在。看看300人公司门槛的角度。一道门槛是100人，第二道是300人，然后是大约500到600人，甚至可能更接近1000人。但对我来说，在理想的公司中，我喜欢保持在几百人的规模范围内。
- en: Case in point is that I got an email last night saying, "Hey, I know you're
    in Raleigh next Wednesday. Can you be in Houston on Thursday?" I replied saying
    that I'm up for it; as long as they approved my travel requests, I'd be there,
    and I'd get it done. It's not my team, not my region, but they need help, so let's
    go.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，我昨晚收到了一个邮件，内容是：“嘿，我知道你下周三在罗利。你能在周四到休斯顿吗？”我回复说我愿意去，只要他们批准我的差旅申请，我就会去，并完成任务。这不是我的团队，也不是我的区域，但他们需要帮助，那就去吧。
- en: '**Viktor Farcic**: That''s dedication!'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：这就是奉献！'
- en: Personalities, honesty, and breathing the environment
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 个性、诚实与感知环境
- en: '**Andy Clemenko**: The other thing is that right now there are two types of
    personalities in all industries. It''s either type A or type B, quite literally.
    Those As are going to go in and do what it takes to get the job done. To use an
    overused term, for As, it''s "mission, mission, mission." Meanwhile, type Bs are,
    to a certain extent, going to sit back and just push the button. I see it in all
    walks of life.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**安迪·克莱门科**：另外，现在所有行业中有两种类型的性格。要么是A型，要么是B型，字面上的意思。A型人会投入进去，做任何事情以完成任务。用一个用滥的词来说，A型人的座右铭是“任务，任务，任务”。而B型人则在一定程度上会坐下来，按下按钮。我在各行各业中都看到了这种情况。'
- en: I'm a volunteer firefighter on the side, and I see it in the fire service; I
    see it in corporate, and I see it in government. In fact, I see it everywhere.
    The trick is that if you really want to keep that cross-functional team and culture
    going, you need to find those people that are willing to go the extra mile. Not
    every day, because that gets out of control. But find those people that are willing
    to do it, that show gumption and go do it, and then worry about complaining about
    it or getting compensation later.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我是兼职的志愿消防员，我在消防服务中看到这种情况，在公司里也看到，在政府部门也看到了。事实上，我在各个地方都看到了。诀窍是，如果你真的想保持跨职能团队和文化的持续发展，你需要找到那些愿意付出额外努力的人。并不是每天都这样，因为那样会失控。但要找到那些愿意做的人，展示出勇气并付诸实践，然后再考虑抱怨或获得补偿的事情。
- en: '"Those As are going to go in and do what it takes to get the job done. To use
    an overused term, for As, it''s ''mission, mission, mission.'' Meanwhile, type
    Bs are, to a certain extent, going to sit back and just push the button. I see
    it in all walks of life."'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: “A型人会投入进去，做任何事情以完成任务。用一个用滥的词来说，A型人的座右铭是‘任务，任务，任务’。而B型人则在一定程度上会坐下来，按下按钮。我在各行各业中都看到了这种情况。”
- en: —Andy Clemenko
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: —安迪·克莱门科
- en: '**Viktor Farcic**: That''s very interesting, because I''ve had conversations
    with people who have said, "Oh, the company where I work is growing, and as we''re
    growing, I''m starting to question whether I''m going to move on to something
    else, for the same precise reasons." I then often get a follow-up question along
    the lines of, "Oh, but if you grow to 1,000, that''s great because more people
    will equate that growth with better business and stuff like that." I never really
    understood that because then you have to ask, what''s in it for me? It''s not
    my company. Why is it better if we are 1,000 rather than 200?'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：这非常有趣，因为我曾和一些人谈过，他们说，“哦，我所在的公司在增长，而随着公司成长，我开始怀疑是否要换个地方工作，原因正是如此。”然后我常常会收到类似的后续问题，“哦，但如果你们发展到1,000人，那很好，因为更多的人会将这种增长与更好的业务等因素挂钩。”我从未真正理解这一点，因为你不得不问，**这对我有什么好处？**
    这不是我的公司。如果我们是1,000人，而不是200人，那为什么更好呢？'
- en: '**Andy Clemenko**: If you''re looking at it from a purely financial point of
    view, if there are two companies, one with 10 employees and another with 1,000
    employees, who is making the most money? The answer is the person at the top.
    So, the bigger the company, the more revenue there is, and the more the stock''s
    worth.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**安迪·克莱门科**：如果从纯粹的财务角度来看，假设有两家公司，一家有10名员工，另一家有1,000名员工，谁赚得更多？答案是位于公司顶部的人。因此，公司的规模越大，收入越多，股票的价值也就越高。'
- en: Are you directly incentivized to do it? At the end of the day, is money really
    your incentive? I wear a hoodie, and I'm an engineer with a degree in engineering
    who wants to solve problems and build some cool stuff; that's literally it. I'm
    in a place now where I help customers to solve problems and build cool stuff—I'm
    helping, and I love it. Do I see an extra dime if we sell an extra widget? Not
    directly. Maybe indirectly, at the end of the year. But that's not my personal
    North Star. I think it takes a certain kind of CEO to pump the brakes and not
    assume that massive expansion is going to solve all of the problems. Because,
    in my mind, not all growth is good.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否直接被激励去做这些事？说到底，金钱真的是你的动力吗？我穿着连帽衫，我是一个拥有工程学学位的工程师，想要解决问题并制造一些酷炫的东西；这就是我的全部。我现在的工作是帮助客户解决问题，创造一些酷炫的东西——我在帮忙，我喜欢这样做。如果我们多卖了一个小工具，我会得到额外的一分钱吗？**不会直接得到。**
    也许在年底间接得到一点。但那不是我个人的北极星。我认为，需要一种特定类型的CEO，才能按下刹车，并不认为大规模扩张会解决所有问题。因为在我看来，并非所有的增长都是好的。
- en: '**Viktor Farcic**: I guess it depends on what you''re after. I feel the same
    in that I''m definitely after money, up to a point. I cannot live on 100 bucks
    a month; but there is a limit that I reach where I''m kind of like, "OK, it doesn''t
    really make a difference anymore," unless I''ve got ambitions to buy a chopper
    or something like that.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔西奇**：我想这取决于你追求的是什么。我有相同的感觉，我肯定是在追求钱，直到某个程度。我不能每月只赚 100 美元；但我也有一个限度，到了这个限度我就会觉得，“好吧，这已经没什么区别了，”除非我有雄心去买一架直升机之类的东西。'
- en: Finding your North Star
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 寻找你的北极星
- en: '**Andy Clemenko**: It''s your North Star! Putting the brakes on this interview,
    I want to ask what do *you* see? I know our discussion has focused on me, but
    what do you see in terms of company size and embracing DevOps?'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**安迪·克莱门科**：那是你的北极星！暂停一下这次采访，我想问问你怎么看？我知道我们的讨论一直集中在我身上，但你怎么看待公司规模和拥抱 DevOps
    这件事？'
- en: '**Viktor Farcic**: In regard to company size, I feel similar to you in that
    the bigger the company gets, the less fun I have working in it.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔西奇**：关于公司规模，我跟你感觉类似，公司越大，我在其中工作的乐趣就越少。'
- en: '**Andy Clemenko**: It''s great that you see things the same way as me.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**安迪·克莱门科**：很高兴你和我看法一致。'
- en: '**Viktor Farcic**: I think that''s kind of my definition. I feel that being
    in software engineering is, in a way, a privilege. My feeling for that is because
    we are one of the very few professions that we usually join for fun and can continue
    having fun. At the end of the day, as long as I''m having fun, it''s excellent.
    It''s just that I feel that the bigger we are, the less fun I have.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔西奇**：我觉得这算是我的定义。我觉得做软件工程在某种程度上是一种特权。我之所以这么觉得，是因为我们是为数不多的，通常是为了乐趣而加入的职业，而且我们还能一直乐趣满满。归根结底，只要我还在玩得开心，那就太棒了。只是我觉得我们越大，乐趣就越少。'
- en: I visit a lot of companies where I feel there's no hope. I work with them for
    a short period of time and show them how to do this and that. But then, I'll come
    back a year later and ask them what they're doing, and then they ask me, "What
    do you mean, 'Tell you what we're doing?' You were here last year; you know what
    we're doing!"
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我访问了很多公司，我觉得他们没有希望。我和他们合作了短时间，教他们怎么做这做那。但一年后我回来，问他们在做什么，他们却问我，“你是什么意思，‘告诉我们在做什么’？你去年在这儿，知道我们在做什么！”
- en: '**Andy Clemenko**: That''s the thing—nothing''s changed. In terms of buzz phrases
    or buzzwords, bureaucracy is the anti-pattern to both DevOps and the DevOps lifestyle.
    I just want to do the DevOps lifestyle equation, but there''s really a need for
    bureaucracy in these big organizations because you have to be able to organize
    that many people at some level. Otherwise, it''s going to be the Wild West. You''ve
    got to be a better start-up. I really think we need to break up those big companies
    and keep them small. A CEO would have to have the courage not to grow to 10,000
    employees because when you do, you''re going to lose nimbleness, and the ability
    to adapt not only to this lifestyle but also, as the wind changes, to any new
    North Star that comes out.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**安迪·克莱门科**：这就是问题——没有什么变化。就流行语或术语而言，官僚主义是与 DevOps 及其生活方式的反模式。我只是想做 DevOps 生活方式的公式，但在这些大型组织中，确实需要官僚主义，因为你必须在某种程度上组织这么多人。否则，就会变成西部荒野。你得做得像个更好的初创公司。我真的认为我们需要拆分那些大公司，把它们保持得小一点。CEO必须有勇气不让公司发展到
    10,000 名员工，因为一旦公司大了，你就会失去灵活性，也失去了适应这种生活方式以及随着风向变化，适应任何新北极星的能力。'
- en: But, unfortunately, money is power. What we need is the money that the big companies
    have in order to fund the little guys. It's like this weird symbiotic relationship
    that's not mutually beneficial; there's a gap somewhere. I'm on a contract right
    now that's 1,200 hours in, or 50 days, and our team has literally spent 500 hours
    of that time over the last two months getting our laptops and saying, "Hey, we
    need an NFS share; we need Windows VMs." We're very much in a state of saying
    we need this and that. The issue is that the company's response is, "Yeah; it's
    coming, man. Let's investigate." I've got a laptop here for them, which is always
    on VPN. Cool, that works great, but all of a sudden, I can't SSH into Linux boxes,
    and then they're blaming us for turning stuff off.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 但不幸的是，钱就是权力。我们需要的是大公司所拥有的资金，来资助那些小公司。这就像一种奇怪的共生关系，但并非互惠的；中间存在一个空白。我目前正在执行一个合同，已经工作了1200小时，或者说50天，我们的团队在过去两个月里，已经花费了500小时的时间，用来配置我们的笔记本电脑，跟他们说，“嘿，我们需要一个NFS共享，我们需要Windows虚拟机。”我们确实处于一种“需要这个需要那个”的状态。问题是公司的回应是，“是的，它正在来，伙计。让我们调查一下。”我有一台笔记本电脑，始终保持VPN连接。不错，这很好用，但突然之间，我无法通过SSH连接到Linux主机，然后他们又怪我们关闭了某些服务。
- en: I mean, I can bounce and jump through—I'm a geek—but this is clearly a firewall
    issue. So, then the natural response is, "Well, we'll open a ticket." Fine, but
    now you've got to wait six weeks for the networking team to get around to it.
    I'd be there saying to the networking team, "Hey, guys, do you want this project
    to be successful?" To which the company responds, "OK, we'll accept your million-dollar
    check, but now our employees are getting frustrated and annoyed because we're
    not doing anything."
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我的意思是，我可以通过跳跃和跳动来解决——我是个技术宅——但这显然是个防火墙问题。所以，接下来的自然反应是，“好吧，我们会提交一个工单。”没问题，但现在你得等六周，等网络团队处理。那时我会对网络团队说，“嘿，伙计们，你们想让这个项目成功吗？”公司会回应，“好的，我们会接受你们那张百万美元的支票，但现在我们的员工越来越沮丧和烦躁，因为我们没有做任何事情。”
- en: '**Viktor Farcic**: But before I had a feeling that when I''m in those situations,
    it''s like, you''re not wasting my time because I''m getting paid for this, but
    you''re completely wasting your money. At the end of the day, I get paid, so I
    don''t care. But then I came to realize that maybe the perspectives are different.
    Actually, what I consider completely irrelevant—zero improvement—is a big deal.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：但在以前，我有一种感觉，当我处于这种情况时，我不会觉得这是在浪费我的时间，因为我有薪水可以拿，但你们完全是在浪费你们的钱。最终，我会拿到薪水，所以我不在乎。但后来我意识到，也许我们对事情的看法不同。实际上，我认为完全无关紧要——零进步——的事，对于别人来说可能是大事。'
- en: '**Andy Clemenko**: I guess it''s about the DevOps lifestyle, and I think it''s
    also about moving forward. It''s about taking a step, and even if it''s a tiny
    step that went from three months to two months, that''s still a step forward.
    Spiritually, I feel frustrated when I''m not moving forward, whether it''s with
    a company, life, financials, or whatever. I like that forward movement. I do believe
    that there''s a certain extent where companies feel good about at least moving
    forward, even though it''s not where you and I ideally would like to get them.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**Andy Clemenko**：我想这跟DevOps的生活方式有关，我认为这也是关于不断前进的。它意味着迈出一步，即使是从三个月缩短到两个月的微小步伐，那也是向前的一步。在精神上，当我没有前进时，无论是在公司、生活、财务还是其他方面，我都会感到沮丧。我喜欢那种前进的动力。我相信，有一个程度是，公司至少会感觉到前进的方向，尽管这不是你和我理想中的目标。'
- en: '"The issue is that, some of these companies just say, ''We want DevOps.'' That''s
    their goal, but you''re there thinking about how they don''t understand what DevOps
    actually is."'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: “问题是，一些公司只是说，‘我们想要DevOps。’那是他们的目标，但你在那里却在想，他们根本不明白DevOps究竟是什么。”
- en: —Andy Clemenko
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: —Andy Clemenko
- en: One of the things I do when I start an engagement is try to establish a North
    Star, whether it's a short-term, mid-term, or long-term project. It could be a
    bunch of North Stars, or it could be a series, but at least you know where you
    ultimately want to go. Because, that way, at any point in time, you can ask yourself,
    "Am I in line or am I perpendicular? If I'm perpendicular, what's the cause of
    that?" Because sometimes you have to go back to find a new path, and that's fine,
    but you have to understand at least that you are going backward, away from your
    ultimate goal.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我在开始合作时做的一件事就是尽力确立一个北极星目标，不管是短期的、中期的，还是长期的项目。这可以是多个北极星，或者是一个系列，但至少你知道你最终想要去的地方。因为这样，你在任何时候都可以问自己，“我是在朝着目标前进，还是偏离了方向？如果偏离了，原因是什么？”因为有时候你得回头重新寻找路径，那没问题，但至少你得理解自己正在倒退，远离最终的目标。
- en: Unfortunately, the issue is that some of these companies just say, "We want
    DevOps." That's their goal, but you're there thinking about how they don't understand
    what DevOps actually is. My favorite is when companies say that they want Docker,
    which is something they say all the time. But the question is what does Docker
    mean to them?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，问题在于有些公司只是说，“我们想要 DevOps。”这是他们的目标，但你在想的是他们根本不理解 DevOps 实际上是什么。最让我感兴趣的是，当公司说他们想要
    Docker，这几乎是他们常挂在嘴边的话。但问题是，Docker 对他们来说意味着什么？
- en: I joke about the Docker lifestyle because Docker is not just containers. It's
    CI/CD. It's version control. Some of these places don't have sustained version
    control either through monitoring or logging. It's ELK and Splunk and Prometheus
    and Grafana. It's all about these aggregate systems that you bolt on to your infrastructure.
    In fact, it's even a little bit of Puppet or Ansible. It's understanding Kubernetes
    YAMLs, to which all I'll say is, "Lord, help us!"
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我常开玩笑说 Docker 生活方式，因为 Docker 不仅仅是容器。它是 CI/CD，是版本控制。一些地方甚至没有持续的版本控制，无论是通过监控还是日志记录。它包括
    ELK、Splunk、Prometheus 和 Grafana。所有这些都是你要添加到基础设施中的聚合系统。实际上，它甚至有点像 Puppet 或 Ansible。它是理解
    Kubernetes 的 YAML 配置，而我只能说，“天啊，救命！”
- en: '**Viktor Farcic**: Exactly!'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：完全正确！'
- en: Understanding what you're buying
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解你买的是什么
- en: '**Andy Clemenko**: But it''s also Jenkins, GitLab, and all of these things.
    Take the project I''m on now, for example. We need version control, and we need
    a CI system. So, I asked the client, "What have you got?" They''re like, "Well,
    this team over there has—" I ask, "Do you have a central?" They respond by saying,
    "No, we don''t have a central." They may then ask, "But can we stand up on our
    own?" But that''s not really their job. What''s going to end up happening then
    is you''ll need to go to another team and ask them, "Do you understand what you''re
    buying?"'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**Andy Clemenko**：但它也包括 Jenkins、GitLab，所有这些东西。举个例子，以我现在的项目为例。我们需要版本控制，也需要一个
    CI 系统。所以，我问客户，“你们有吗？”他们说，“嗯，那边的团队有——”我问，“你们有中央系统吗？”他们回答说，“没有，我们没有中央系统。”然后他们可能会问，“那我们能自己搞定吗？”但那其实不是他们的工作。最终的结果是，你得去找另一个团队，问他们，“你们知道自己在买什么吗？”'
- en: A classic example is that you buy a car and drive it off a lot, but 200 miles
    later, you scratch your head because the vehicle's stopped working. You didn't
    realize you have to put gas into it, or that you have to change the tires, put
    oil into it, and clean the car, along with the rest of the maintenance. You may
    think of just going back and getting another car. But no, you've got to understand
    what you're buying.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一个经典的例子是，你买了一辆车，开出车行，但200英里后，你会抓耳挠腮，因为车子停了。你没意识到你得加油，或者得换轮胎、加机油、清洁汽车，还要做其他的维护工作。你可能会想直接回去换一辆车。但不行，你得理解自己买的是什么。
- en: '**Viktor Farcic**: Exactly. I feel like one of the significant difficulties
    I have is that when I''m with a customer—let''s say their goal is a continuous
    delivery pipeline—I feel that I shouldn''t cheat them and that maybe I should
    tell them that they should not pursue, in this case, continuous delivery.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：完全正确。我觉得我面临的一个重大困难是，当我和客户合作时——假设他们的目标是持续交付流水线——我觉得我不能欺骗他们，也许我应该告诉他们，他们不应该在这种情况下追求持续交付。'
- en: '**Andy Clemenko**: I''ve had specific conversations with customers and have
    said something along those lines, that maybe containers aren''t the right thing
    for them. If they''re not willing to build a CI system or version control, and
    subsequently they''re not willing to understand all of these things that make
    up the DevOps lifestyle, then maybe it''s not the right thing for them.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**安迪·克莱门科**：我曾与客户进行过具体的对话，并说过类似的话，也许容器并不适合他们。如果他们不愿意建立CI系统或版本控制，随后他们也不愿意理解构成DevOps生活方式的所有这些内容，那么也许容器并不适合他们。'
- en: It comes off sometimes the wrong way, but I pride myself on being honest to
    my customers and saying, "Look. You're going to need this, this, this, and this."
    In fact, I did it yesterday at an integrator. I wrote a laundry list on the board
    of what they need to provide because they're building a reference architecture—infrastructure,
    monitoring, logging, and CI/CD—and they're coming at it from a dev angle, so they're
    more worried about CI/CD, but I'm telling them that providing CI/CD is only one
    thing, because, hey, you're building awesome widgets, but where do they go? How
    are they executed? It's not useful if you can't deploy it efficiently.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有时会被误解，但我为自己能够对客户保持诚实而自豪，并告诉他们：“你们需要这个、这个、这个和这个。”事实上，我昨天在一个集成商那里做了同样的事。我在白板上写下了他们需要提供的清单，因为他们正在构建一个参考架构——基础设施、监控、日志记录和CI/CD——而他们从开发角度出发，更担心CI/CD，但我告诉他们，提供CI/CD只是其中一项工作，因为，嘿，你们在构建很棒的小部件，但它们要去哪里？怎么执行？如果你们无法高效部署，那就没有意义。
- en: '**Viktor Farcic**: But sometimes, I don''t think it''s only to do with willingness
    or even ability.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：但有时，我认为这不仅仅是与意愿或能力有关。'
- en: '**Andy Clemenko**: If your goal is to do the bare minimum, then keep doing
    that. Likewise, if that''s working for you, great. But just don''t get in the
    way of those who want to make a change and move forward.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**安迪·克莱门科**：如果你的目标是做最低限度的工作，那就继续做吧。同样，如果那对你有效，那就太好了。但请不要妨碍那些想要改变并向前迈进的人。'
- en: You've got to be brave enough to say to those people that maybe you should just
    stay in the past. Perhaps you should just stick with Windows Server 2003 and not
    worry about containers, DevOps, and CI/CD, because these are lifestyles. Customers
    don't necessarily like the truth all of the time, but I would rather be honest
    with my customers up front and not try to manipulate them. I think honesty creates
    a healthier relationship because it establishes long-term trust, and sometimes,
    it has facilitated change within a customer. Every once in a while, a slap in
    the face might not be a bad idea.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须足够勇敢地告诉那些人，也许你应该停留在过去。也许你应该坚持使用Windows Server 2003，而不必担心容器、DevOps和CI/CD，因为这些都是生活方式。客户不一定总是喜欢听到真相，但我宁愿对客户保持诚实，而不是试图操控他们。我认为诚实能够建立更健康的关系，因为它建立了长期的信任，有时候，它甚至能促成客户的改变。偶尔给客户一点“耳光”也许并不是个坏主意。
- en: '**Viktor Farcic**: Absolutely, at least for an academic or salesperson.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：完全正确，至少对于学术界或销售人员来说。'
- en: '**Andy Clemenko**: I was on a sales call yesterday, and it was just "sell,
    sell, sell." All this company cared about was moving forward. So, the question
    is, which Docker engine should they use for their Jenkins server? I feel it comes
    down to the fact of asking yourself whether you absolutely need the support. Is
    your corporate policy such that you absolutely have to have support? Because if
    it is, then we can just sell you two licenses for nodes and that''s $1,500 a node
    per year. It''s so tiny that it''s like a rounding error for most of their budgets.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**安迪·克莱门科**：我昨天参加了一个销售电话会议，会议内容就是“卖、卖、卖”。这家公司关心的只是前进。那么问题是，他们应该为他们的Jenkins服务器使用哪个Docker引擎？我觉得关键在于问自己是否真的需要支持。你的公司政策是否规定你们一定要有支持？如果是的话，那我们可以直接为你们卖两张节点许可证，每个节点每年1,500美元。对于他们大多数预算来说，这几乎是一个四舍五入的误差。'
- en: My response is you could run CE, and the amount of support you're actually going
    to need is going to be pretty much zero because I build CE with CI systems all
    of the time. The company's response was for us to send them a quote. The downside
    is we couldn't sell professional services, including the full product suite. But
    you know what? At the end of the day, at least the customer feels they've gotten
    an honest answer from the sales guy and me.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我的回应是你可以运行CE，而你实际需要的支持几乎为零，因为我一直在用CI系统构建CE。公司的回应是让我们给他们发报价。缺点是我们无法销售专业服务，包括完整的产品套件。但你知道吗？归根结底，至少客户感觉他们从销售人员和我这里得到了一个诚实的答复。
- en: '"Customers don''t necessarily like the truth all of the time, but I would rather
    be honest with my customers up front and not try to manipulate them. I think honesty
    creates a healthier relationship because it establishes long-term trust, and sometimes,
    it has facilitated change within a customer."'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: “客户不一定总是喜欢听真话，但我宁愿一开始就对客户诚实，而不是试图操控他们。我认为诚实会创造更健康的关系，因为它建立了长期的信任，有时候，它还能推动客户的变化。”
- en: —Andy Clemenko
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: —Andy Clemenko
- en: '**Viktor Farcic**: Earlier, you mentioned Kubernetes YAML. In fact, I believe
    you said, "Lord, help us!" Why do you say that exactly?'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：之前你提到过Kubernetes的YAML，实际上我记得你说过，“天啊，帮助我们！”你为什么会这么说呢？'
- en: On Kubernetes, Docker, and lowering the barrier to entry
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 论Kubernetes、Docker和降低入门门槛
- en: '**Andy Clemenko**: Any time there''s a new technology, developers have to lower
    the barrier to entry, especially for changing. For changing abstraction views
    and for changing tooling, you''ve got to make it easy. Rancher did a fantastic
    job of making orchestration easy. They had to catalog, and my God, it was great.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**Andy Clemenko**：每当有新技术出现时，开发者必须降低入门门槛，特别是对于改变抽象视图和改变工具来说，你必须让它变得容易。Rancher在使编排变得简单方面做得非常出色。他们需要一个目录，天啊，真是太棒了。'
- en: I had a company director once who wasn't a computer geek at all. To be able
    to deploy a ghost blog server by clicking two buttons blew his mind. You just
    have to make that barrier to entry really low. The problem I see with Kubernetes
    right now is that the YAML in itself uses `spec` four times in a single object
    type. YAML format is fine, and everyone can do the vertical lines and, in their
    code, get the spacing right.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾经有一个公司主管，他完全不是技术宅。能够通过点击两个按钮就部署一个Ghost博客服务器，让他大吃一惊。你必须把这个入门门槛降得非常低。我现在看到的Kubernetes问题是，YAML本身在单个对象类型中用了四次`spec`。YAML格式没问题，每个人都能做垂直线，并且在他们的代码中正确对齐空格。
- en: But its overall structure? Well, a customer yesterday was talking about Swarm
    versus Kubernetes, and how you can take a single object in Swarm, and it describes
    the ingress URL-FQDN, it represents the number of replicas, and it represents
    the number of ports and the volumes in it and one object—in Kubernetes speak,
    that's seven. That gets a little frustrating; not to mention that right now there
    are 37 top-level objects in Kubernetes. And then there's my favorite one known
    as the CRD, the custom one. If our theories are good enough for you, you can make
    one of your own, and we'll just work with it. Kelsey Hightower said that Kubernetes
    is not the endgame. Somebody needs to come along, and I'll tip the hat to IBM
    and Red Hat that OpenShift became an opinionated Kubernetes. That's cool, but
    that's not Kubernetes, and I think it's unfair for them to sell it as Kubernetes.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 但它的整体结构呢？昨天一个客户在谈论Swarm与Kubernetes，如何在Swarm中使用一个对象，它描述了入口URL-FQDN，表示副本数，表示端口数和其中的卷，且是一个对象——在Kubernetes的术语中，这是七个对象。那有点令人沮丧；更不用说目前Kubernetes有37个顶层对象了。然后是我最喜欢的一个，叫做CRD，自定义资源。如果我们的理论足够适合你，你可以自己创建一个，我们就和它一起工作。Kelsey
    Hightower曾说，Kubernetes不是最终目标。有人需要出来，我要向IBM和Red Hat致敬，OpenShift变成了一个有主见的Kubernetes。这很酷，但那不是Kubernetes，我认为把它卖成Kubernetes是不公平的。
- en: '**Viktor Farcic**: Right, so, in your opinion, what needs to come along to
    address that?'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：对，那么，在你看来，应该有什么东西来解决这个问题？'
- en: '**Andy Clemenko**: Someone needs to come along and really say that we''re all
    going to use Kubernetes underneath. We understand the Kubernetes YAML, but we''re
    going to simplify it and make our own converter app to format on top of it.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**Andy Clemenko**：有人需要出来说，我们都将在下面使用Kubernetes。我们理解Kubernetes的YAML格式，但我们会简化它，并制作自己的转换应用程序来格式化它。'
- en: That'll translate to the lower-level primitives, to the 37 top-level objects,
    such that the developer just says, "Here's my image," or better than that, "We
    talked about the metadata being transient with the image, but here's my image.
    Here's the number of replicas, here's the network it should be on, and here are
    the ports it's listening on—the number, and very simply, within 5-20 lines, it's
    minimal."
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 它将转化为更低层次的原语，转化为37个顶级对象，以至于开发人员只需说，“这是我的镜像，”或者更好的是，“我们讨论过元数据是与镜像一起临时存在的，但这是我的镜像。这里是副本数，这是它应该在的网络，这里是它正在监听的端口——端口号，而且非常简单，在5-20行内，最简化的形式。”
- en: 'Look at Helm: they''ve been trying to do that, but Helm in itself is complicated.
    You''ve got to it pull charts. I''m not even looking at Helm, and people are saying
    that Helm''s easy. But, no, it''s not. You see it time and time again as you help
    these companies to understand the DevOps lifestyle—these tools are wicked hard.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 看看Helm：他们一直在尝试做到这一点，但Helm本身就很复杂。你必须拉取图表。我甚至没看Helm，而人们却说Helm很简单。但，不，事实并非如此。你一次又一次看到，在帮助这些公司理解DevOps生活方式时——这些工具非常难。
- en: '**Viktor Farcic**: It''s easy until it doesn''t do exactly what you want, and
    then it becomes a nightmare.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：它很简单，直到它不能完全做到你想要的，然后它就变成了一场噩梦。'
- en: '**Andy Clemenko**: Look at the hype cycle around Kubernetes. I''ve got customers
    that are saying, "We want Kubernetes!" To which I say, "Are you doing something
    specific? Are you pulling? Why specifically do you need Kubernetes?" This is a question
    they can''t answer because they don''t have an answer to it. It really comes down
    to somebody up high having seen it in CIO Weekly, or it''s the buzzword right
    now, and they''ve got to have it. Then you actually start showing them that YAML,
    or the fact that in order to tie an ingress controller to a service that sits
    in front of a deployment, you have to have an ingress object. That''s four objects
    now.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**安迪·克莱门科**：看看围绕Kubernetes的炒作周期。我有客户说，“我们想要Kubernetes！”我就问，“你们在做什么特定的事情吗？你们是拉取的吗？为什么特别需要Kubernetes？”这是一个他们无法回答的问题，因为他们根本没有答案。其实，这归根结底是因为某个高层看到它在《CIO周刊》上，或者它现在正是流行的
    buzzword，他们必须拥有它。然后你开始向他们展示那个YAML，或者是为了将入口控制器与部署前面的服务连接，你必须有一个入口对象。现在这就是四个对象。'
- en: '**Viktor Farcic**: The reason why I''m asking is that when I jumped into Docker,
    I felt that it was one of the very few technology tools that I can use for everybody
    in a company. If you''re a tester, then it''s useful for you, and if you''re a
    developer, then it''s also useful for you, just as if you''re an operator. At
    that time, Docker was almost a communication tool. It''s useful for everybody,
    and the entry point is easy. I can explain it to my mother. But then along comes
    Kubernetes, which I admire because Kubernetes is extremely powerful and extensible,
    and it allows you to do anything, including make coffee. But now, I''m not actually
    able to explain what Kubernetes is anymore unless a person decides to dedicate
    their life to Kubernetes.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：我问这个问题的原因是，当我跳入Docker时，我觉得它是我能为公司里每个人使用的少数几种技术工具之一。如果你是测试员，那它对你有用；如果你是开发人员，它对你也有用，就像你是操作员一样。当时，Docker几乎是一个沟通工具。它对每个人都有用，入门门槛也很低。我甚至能向我妈妈解释它。但是后来，Kubernetes来了，我很佩服它，因为Kubernetes非常强大且可扩展，它允许你做任何事情，甚至包括做咖啡。但现在，我实际上无法再解释Kubernetes是什么，除非某个人决定将自己的生命奉献给Kubernetes。'
- en: '**Andy Clemenko**: It''s a religion.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**安迪·克莱门科**：这是一种信仰。'
- en: '**Viktor Farcic**: Because of the complexity associated with it, I feel Kubernetes
    cannot be just another tool in your toolbelt. You need to be dedicated to it.
    So, in my book, it''s useless for developers because they''re never going to learn
    whatever they need to learn for Kubernetes. Though maybe I''m a bit pessimistic.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：由于其复杂性，我认为Kubernetes不能只是你工具包中的另一个工具。你需要专注于它。因此，在我看来，它对开发人员是没用的，因为他们永远学不到Kubernetes所需的一切。虽然也许我有点悲观。'
- en: '"Solomon Hykes didn''t invent containers; let''s be honest. […] All that he
    and his team were able to do was merely make Docker run in a simpler form, and
    that, to me, was the pivotal moment."'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: “所罗门·海克斯（Solomon Hykes）并没有发明容器；让我们诚实一点。[…] 他和他的团队所做的，只是让Docker以一种更简单的形式运行，对我来说，这是一个转折点。”
- en: —Andy Clemenko
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: — 安迪·克莱门科
- en: '**Andy Clemenko**: No, I agree with you, because that''s something I see too.
    The exciting thing for us at Docker is the fact that Solomon Hykes didn''t invent
    containers; let''s be honest. We''ve had zones, we''ve had attributed, and we''ve
    had encapsulation technologies in the past. All that he and his team were able
    to do was merely make Docker run in a simpler form, and that, to me, was the pivotal
    moment. I really think what we need is an operational platform—a framework—to
    be simple, and that''s why I''m excited about Kubernetes being implemented into
    Docker Enterprise.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**Andy Clemenko**：不，我同意你的观点，因为我也有同感。对我们在 Docker 的激动之处在于，所罗门·海克斯并没有发明容器；让我们老实点。我们过去已经有了分区、属性和封装技术。他和他的团队能做的只是简化
    Docker 的运行形式，对我来说，这是一个关键时刻。我真的认为我们需要一个操作平台——一个简化的框架，这也是我对 Kubernetes 被应用到 Docker
    Enterprise 中感到兴奋的原因。'
- en: 'If only we could take an Apple-like approach to it: let''s make it simple;
    let''s make it work, and let''s lower that barrier to entry and move forward,
    then, hopefully, we can abstract on top of Kube just enough. Leave the door open
    if somebody wants to look behind and use `kubectl` all day long, but abstract
    it just a little bit to make it simple enough to work. When we talked about lifers
    versus go-getters and big companies, I think that the minute you have a barrier
    to entry slightly higher than an inch, it''s enough to cause a lot of resistance.
    If you want to effect change at a company, you''ve got to make that resistance—the
    possibility of resistance—zero. I guess that''s almost like a mathematical function.
    The closer to a zero amount of resistance you get, the higher the probability
    of change within the organization. Because I know when I first started looking
    at Docker, I saw it as a threat, at least from a sysadmin''s point of view.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们能像苹果那样对待它：让它简单些；让它运行起来，降低入门障碍并向前推进，那么，希望我们能在 Kubernetes 之上进行足够的抽象。如果有人想要全天候使用`kubectl`，就留下这扇门开着，但要稍微抽象一点，使其足够简单可行。当我们谈到终身者与主动追求者以及大公司时，我认为，一旦入门门槛稍高于一英寸，就足以引起很大的阻力。如果你想在公司内推动变革，你必须让这种阻力——可能发生的阻力——降到零。我想这几乎就像一个数学函数。你越接近零阻力，组织内变革的可能性就越高。因为我知道，当我第一次接触
    Docker 时，至少从系统管理员的角度来看，我把它看作是一种威胁。
- en: '**Viktor Farcic**: You really saw it as a threat? What''s changed since then?
    Because you''re now a senior solution engineer at Docker, so your initial perception
    must have been wrong.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：你真的把它看作是威胁？那么从那时起到现在有什么变化？因为你现在是 Docker 的高级解决方案工程师，所以你最初的看法一定是错的。'
- en: '**Andy Clemenko**: At the time, I saw Docker as a threat because developers
    could just do things that required sysadmins. Thus, my knee-jerk reaction was
    that Docker is just anti-sysadmin. But that was until my first `docker run`. Then
    a lightbulb went off, and I had the epiphany of, "Holy shit! I need to go and
    work for this excellent company. I''m in!" But again, you''ve got to make the
    barrier to entry as low as possible.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**Andy Clemenko**：当时，我把 Docker 视为威胁，因为开发者可以做那些需要系统管理员的事情。因此，我的第一反应是 Docker
    反对系统管理员。但那是直到我第一次`docker run`。然后灵光乍现，我有了一个顿悟：“天哪！我得去这个了不起的公司工作。我决定了！”但再说一遍，你必须尽可能降低入门门槛。'
- en: Have you ever seen a new developer's eyes when you show them that 1,700-line
    Kubernetes YAML to deploy Prometheus and Grafana? I did it yesterday, and their
    jaw hit the floor.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你有没有看到新开发者看到那个 1,700 行的 Kubernetes YAML 文件用来部署 Prometheus 和 Grafana 时的表情？我昨天做了，他们的下巴都快掉地上了。
- en: '**Viktor Farcic**: I know what you mean; that''s a face I see all the time.
    People will often call me and say, "Viktor, can you help us with this and that?,"
    or they tell me that they want to jump into Kubernetes, and after the first half
    an hour it''s all excitement, but then the reality sets in.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我知道你的意思，我经常看到这种表情。人们经常打电话给我，说：“Viktor，你能帮我们处理这个问题吗？”，或者告诉我他们想要跳入
    Kubernetes，前半个小时都是兴奋的，但随后现实开始显现。'
- en: I think it's interesting in the context of this discussion we're having about
    DevOps. But I think Kubernetes fosters the creation of those roles, and sysadmins
    will be able to use it.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为在我们讨论 DevOps 的背景下，这是一个有趣的话题。但我认为 Kubernetes 促进了这些角色的创建，并且系统管理员将能够使用它。
- en: What I would like to see in the future is for us, as an industry, to stop talking
    about Kubernetes and see that there is something on top of it that only a few
    people know about. I guess it's more or less what you described for Docker E.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望未来我们作为一个行业，能够不再讨论Kubernetes，而是看到它上面有一些只有少数人了解的东西。我猜这和你描述的Docker E差不多。
- en: '**Andy Clemenko**: There is a thing with kernel developers today; there will
    always be extreme experts at each layer, but the number of people directly interacting
    with that layer becomes very small.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**安迪·克莱门科**：现在的内核开发者有一个问题；每一层总会有极端的专家，但直接与这一层互动的人数变得非常少。'
- en: '**Viktor Farcic**: Because you''re not working with it.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔西奇**：因为你没有在使用它。'
- en: '**Andy Clemenko**: Exactly, there''s no need.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**安迪·克莱门科**：没错，没必要。'
- en: '**Viktor Farcic**: I''m running Mac right now while I speak to you. I don''t
    know what''s behind it, because I don''t care.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔西奇**：我现在在使用Mac和你交谈。我不知道它背后是什么，因为我不关心。'
- en: '"I honestly don''t even care whether this container is OCI-compliant. At the
    end of the day, I just want it to work. I want it to be portable. I want it to
    be secure. And I want it to be easy."'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: “老实说，我甚至不关心这个容器是否符合OCI标准。最终，我只希望它能工作。我希望它是可移植的。我希望它是安全的。我希望它是简单的。”
- en: —Andy Clemenko
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: —安迪·克莱门科
- en: '**Andy Clemenko**: That''s a good point. I believe it was Scott McNealy from
    Sun, who talked years ago about Sun Grid deploying and debuting SAS Grid effectively.
    He said that, when you plug in your hairdryer, you don''t need to know about nuclear
    energy. You just want to plug in your hairdryer, and you just want it to work.
    So, apply the same thing today, because I don''t care what orchestrator is underneath—I
    honestly don''t even care whether this container is OCI-compliant. At the end
    of the day, I just want it to work. I want it to be portable. I want it to be
    secure. And I want it to be easy.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**安迪·克莱门科**：这是一个很好的观点。我相信是来自Sun的斯科特·麦克尼利，曾在多年前谈到过Sun Grid的部署以及SAS Grid的首次亮相。他曾说，当你插上吹风机时，你不需要了解核能。你只需要插上吹风机，然后它就能工作。所以，今天应用同样的想法，因为我不关心下面的编排器是什么——老实说，我甚至不关心这个容器是否符合OCI标准。最终，我只希望它能工作。我希望它是可移植的。我希望它是安全的。我希望它是简单的。'
- en: Looking to the future
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展望未来
- en: '**Viktor Farcic**: So, what''s next, then?'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔西奇**：那么，接下来呢？'
- en: '**Andy Clemenko**: In the near future, I see serverless picking up some momentum,
    but I''m still waiting for serverless to be actually written into the lower-level
    orchestrator directly, and not as it currently is, which is as an extra layer
    on top. To me, serverless is just a rapid reaction scheduler, to some extent.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**安迪·克莱门科**：在不久的将来，我认为无服务器架构会逐渐获得更多动力，但我仍在等待无服务器架构能够直接写入底层编排器，而不是像现在这样，作为一个额外的层级存在。对我来说，无服务器架构本质上只是一个快速反应调度器，某种程度上。'
- en: 'Elias Pereira has done some really awesome stuff with OpenVAS, to the point
    where it''s got self-autoscaling of containers because it''s deploying its own
    Prometheus. To me, conceptually, having similar functions at multiple layers seems
    redundant. So, let me ask this: if we can take OpenVAS and build it into the lower
    orchestrator, why don''t we build into right into Kube or right into Swarm?'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 埃利亚斯·佩雷拉在OpenVAS方面做了一些非常棒的工作，甚至让它具备了自我自动扩展容器的能力，因为它部署了自己的Prometheus。对我来说，从概念上讲，在多个层次上拥有类似的功能似乎有些多余。那么，我想问一下：如果我们能将OpenVAS集成到底层的编排器中，为什么不直接将它集成到Kube或者Swarm中呢？
- en: At least that way I'm advocating for a 38 top-level object. But the idea, though,
    is that if you have more batch processes like serverless, they can still use the
    same schedule. You don't need to build on top of them and add all of this extra
    stuff to do the same thing. My point is, I would love to see an orchestrator just
    be able to say, "OK. 1 through 5 are long-running; 6 and 7 are serverless." And
    again, we talked about that self-aware nature. What if you had a container that
    says, "If I haven't been used in 10 minutes, turn me off"?
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 至少这样的话，我会提倡一个38个顶层对象。但是，关键是，如果你有更多的批处理任务，比如无服务器架构，它们仍然可以使用相同的调度。你不需要在它们之上再构建和添加所有这些额外的东西来做同样的事。我的意思是，我希望能看到一个编排器只需要说：“好，1到5是长时间运行的，6和7是无服务器的。”我们刚才还提到了自我感知的特性。如果你有一个容器，它会说，“如果我在10分钟内没有被使用，关闭我”怎么办？
- en: In that case, you don't even have to have a separate object for serverless or
    daemons. The thing is self-aware, and it says, "Hey, I haven't been used. Spin
    me down." It tells the orchestrator, "I'm not busy, so turn me off," and then
    when the next request comes in, the orchestrator says, "Wake up." There you go.
    Why not? I say let's blur those lines. Wouldn't you say that makes it simple?
    Let me ask you, Viktor, do you remember the moment when you did your first `docker
    run`?
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: That''s what I''m saying. My first reaction when I was running
    Docker was, "OK, I started 10 minutes ago, and I already understand how it works.
    I don''t know what''s behind the scenes, but it works."'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '**Andy Clemenko**: And you were able to do a `docker run` and see your web
    page, resulting in you having that lightbulb moment, which is what we need for
    all of the DevOps tools. That''s how change is really going to happen—with these
    lightbulb moments.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Exactly, but going back to serverless, would you place your
    bets on something along the lines of what you''ve explained, or something similar
    to Lambdas with cloud proprietaries and all of those things?'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '**Andy Clemenko**: I wouldn''t place any bet because computing today happens
    everywhere. It happens on your watch, it happens in your datacenter, and it also
    happens in someone else''s data center. There''ll always be this balance between
    on-premises and the cloud, and serverless and full daemon, or whatever you want
    to call it—server/serverless. It might not be 50/50; they''ll flow. I think there''ll
    always be both because of security and financial reasons. Too many times I hear
    customers saying that corporate policy says we can''t touch the internet, so they''re
    fully air-gapped. You can''t use Amazon, you can''t use Azure, or there''s a project
    team building a VPN to the VPC, who''ll dedicate a link, and all of that good
    stuff. But there''ll always be this balance, and, indeed, all we''re doing is
    just shifting responsibilities.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: So, do I think serverless is going to take over? No, but I think it's going
    to consume anywhere up to 20% of the container space today. But guess what? What
    format on the backend is serverless?
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Kubernetes?'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '**Andy Clemenko**: So, it''s the same underlying fundamental object, and the
    same construct. So, why can''t we just make the construct more self-aware, whether
    it''s a batch job—which serverless technically is—or a long-running daemon that''s
    constantly serving traffic?'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Because my current concern with serverless is that I need
    to choose which platform to use and then almost stick with it forever. I would
    technically have liked what you just described—tell me how to explain something
    and then tell me whether it will run as Lambda, Azure function, or VAS. But that
    shouldn''t be my concern.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '"My current concern with serverless is that I need to choose which platform
    to use and then almost stick with it forever."'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: —Viktor Farcic
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '**Andy Clemenko**: It shouldn''t be, but for me, it''s a process. Fundamentally,
    inside the container, it''s just a process executing whatever—whether it''s wrapped
    in a Lambda function, Azure, an OpenVAS container, or a long-running Kube container,
    it''s still just a process. The process doesn''t care what it''s encapsulated
    in. It doesn''t know that it''s not a conscious being where it spins up and it
    goes, "I''m alive! I''m dead. I''m alive! I''m dead." It just runs.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**Andy Clemenko**：这本不应该是，但对我来说，它是一个过程。从根本上讲，在容器内部，它只是一个执行任何操作的过程——无论它是包装在 Lambda
    函数、Azure、OpenVAS 容器，还是一个长时间运行的 Kube 容器中，它本质上都是一个过程。这个过程并不关心它被封装在什么里。它并不知道自己不是一个有意识的存在，不会像“我活着了！我死了。我活着了！我死了”那样循环。它只是运行。'
- en: Having to build separate frameworks is creating, in my mind, more confusion.
    Granted, there's job security. But again, it's not a low barrier to entry; although,
    having played with it, OpenVAS is pretty darn slick. It's straightforward to create
    a function, it's straightforward to integrate it, and it's effortless to execute
    it, not to mention it's got autoscaling and all of these fun things. But again,
    I'd love to see that completely integrated with a single orchestrator.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 需要构建独立的框架在我看来是在制造更多的混乱。没错，这提供了工作保障。但话说回来，这并不是低准入门槛；不过，经过一番尝试，OpenVAS 确实相当流畅。创建一个函数很简单，集成它也很简单，执行它也毫不费力，更不用说它还有自动扩展等有趣的功能了。但我仍然希望看到它完全与一个单一的协调器集成。
- en: I'll give Amazon a lot of credit. I don't like what they're building, so to
    speak, but I'll give them a lot of credit for lowering the barrier to entry. They've
    made it too easy to consume databases in VMs and object stores. But if you actually
    dig into it, it's incredibly complicated, with CloudFormation templates and all
    of the IM policies and security groups. I personally don't use AWS or any of that
    stuff because it's too complicated and annoying.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我会给亚马逊很多肯定。我并不喜欢他们正在构建的东西，怎么说呢，但我会给他们很多肯定，因为他们降低了准入门槛。他们让在虚拟机和对象存储中消费数据库变得过于简单。但如果你深入挖掘的话，实际上非常复杂，包括
    CloudFormation 模板、所有的 IM 策略和安全组。我个人不使用 AWS 或任何类似的东西，因为它太复杂且令人烦恼。
- en: '**Viktor Farcic**: But when you said they made it too easy, my first thought
    was that it used to be, but nowadays it''s not.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：但当你说他们让它变得太简单时，我第一个想到的是，过去确实是，但现在并不是。'
- en: '**Andy Clemenko**: Actually, you''re right.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**Andy Clemenko**：其实，你说得对。'
- en: '**Viktor Farcic**: I prefer DigitalOcean now, because it has what I need, and
    it doesn''t have 50,000 other things that I don''t need but am encumbered with
    anyway.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：现在我更喜欢 DigitalOcean，因为它有我需要的东西，而且没有那五万多种我不需要的东西，尽管我还是被这些东西困扰。'
- en: '**Andy Clemenko**: I''m a huge DigitalOcean fan.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**Andy Clemenko**：我是一个忠实的 DigitalOcean 粉丝。'
- en: '**Viktor Farcic**: To be honest, I''ve worked a lot with AWS, and I still don''t
    fully understand how it works. But now that I think about it, nobody does; it''s
    just madness. I have a feeling that they went in the same trajectory as we described
    earlier for Kubernetes stuff, but it''s becoming heavier and heavier.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：说实话，我与 AWS 合作过很多次，但我仍然完全不理解它是如何工作的。但现在想想，实际上没有人真正懂；这简直是一场疯狂。我有种感觉，他们走的路径和我们之前描述的
    Kubernetes 的路径一样，但它正变得越来越复杂。'
- en: '**Andy Clemenko**: Exactly, and I think one of the disservices or discredits
    to Amazon is that they''ve made AWS very sticky because of how complicated it
    is, and to a certain extent, Kubernetes is going down that same path. It''s very
    sticky because once you get it, you don''t want to use anything else. Just look
    at the fact that if you put "AWS architect" on your resume or "certified Kubernetes"
    on your resume, your phone will not stop ringing. That''s good for the person
    whose resume that is, but, you know, I think it leaves a lot of the little guys
    out of the market to a certain extent.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**Andy Clemenko**：没错，我认为亚马逊的一个不利之处或不公正之处在于，他们让 AWS 变得非常“粘性”，因为它非常复杂，某种程度上，Kubernetes
    也走上了同样的道路。它之所以非常“粘性”，是因为一旦你学会了，你就不想再用其他任何东西。看看这个事实，如果你在简历上写上“AWS 架构师”或者“认证 Kubernetes”这些字眼，你的电话就会一直响。这对那个简历上的人来说是好事，但你知道，我认为它在某种程度上把许多小公司从市场上排除掉了。'
- en: '**Viktor Farcic**: But, you know, if being AWS-certified is in high demand,
    that means that it''s actually too complicated, because I don''t think that anybody
    says, unlike with Kubernetes, that they''re a container-certified person.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：不过，你知道，如果 AWS 认证的需求很高，那就意味着它实际上太复杂了，因为我不认为有人像 Kubernetes
    一样说自己是容器认证专家。'
- en: '**Andy Clemenko**: Or that I''m certified in Docker and Kube.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**Andy Clemenko**：或者说，我已经通过 Docker 和 Kube 认证了。'
- en: '**Viktor Farcic**: But what do you get certified for in Docker? It only takes
    two days to get certified.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：但在 Docker 中，你到底是为了什么获得认证的？只需要两天就能通过认证。'
- en: '**Andy Clemenko**: Our certification is at a basic understanding of registry,
    and push and pull, and things like that. But you can absolutely learn it and pass
    the exam in a week or two; it''s not hard.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**安迪·克莱门科**：我们的认证内容是对注册表的基础理解，以及推送和拉取等相关内容。但是你完全可以在一两周内学会并通过考试，难度不大。'
- en: '**Viktor Farcic**: Exactly. Anyway, I know we''re out of time now. It''s been
    great talking to you, Andy. Thank you so much for your time.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：没错。不管怎样，我知道我们现在没时间了。很高兴和你聊天，安迪。非常感谢你的时间。'
