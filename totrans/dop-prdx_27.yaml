- en: Introducing Chris Riley
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍克里斯·赖利
- en: Based in the Greater Denver Area, Chris Riley is a self-proclaimed bad coder
    turned editor of Sweetcode.io at Fixate IO, a content marketing firm for those
    who sell to technical audiences. Through this, he's involved with DevOps, SecOps,
    big data, machine learning, and blockchain. He's a member of the DevOps Institute
    Board of Regents, a position he's held for over four years. You can follow him
    on Twitter at `@HoardingInfo`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 克里斯·赖利，位于大丹佛地区，是一位自称为糟糕程序员转行做行业分析师，现在是Fixate IO的Sweetcode.io编辑。Fixate IO是一家面向技术受众的内容营销公司。通过这个角色，他涉及DevOps、SecOps、大数据、机器学习和区块链。他是DevOps学院董事会成员，已经担任此职务超过四年。你可以在Twitter上关注他，账号是`@HoardingInfo`。
- en: '**Viktor Farcic**: I know your career has mainly revolved around your work
    as an analyst. But you''re also the editor of Sweetcode. How did you get to where
    you are?'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：我知道你的职业生涯主要围绕着作为分析师的工作。但你也是Sweetcode的编辑。你是如何走到今天这一步的？'
- en: A bad coder turned industry analyst
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一名糟糕的程序员转行做行业分析师
- en: '**Chris Riley**: My answer can best be summed up by the fact that I''m a bad
    coder turned industry analyst. While I couldn''t make it as a coder, I had a big
    passion for software development practices, building applications, and the processes
    around that. So, instead of trying to transform my skill set and become a better
    coder, what I decided to do was really focus on understanding the industry. So,
    I became a DevOps analyst in addition to being the editor of Sweetcode.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**克里斯·赖利**：我的答案可以用一句话来总结：我是一名糟糕的程序员转行做行业分析师。虽然我没能成为一名程序员，但我对软件开发实践、构建应用程序以及围绕这些的流程有着强烈的热情。因此，我决定专注于理解行业，而不是尝试转变我的技能，成为更好的程序员。所以，我除了是Sweetcode的编辑外，还成为了一名DevOps分析师。'
- en: Career-wise, my last employer was a company called CloudShare, which was a DevTest
    environment specifically for large line-of-business application development; in
    other words, a SharePoint-, SAP-, or Oracle-type application. At CloudShare, I
    worked in product management, so I was essentially driving the direction of the
    product and keeping tabs on the market.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在职业生涯方面，我的上一任雇主是一家名为CloudShare的公司，它提供专门用于大型业务应用开发的DevTest环境；换句话说，类似SharePoint、SAP或Oracle类型的应用。在CloudShare，我从事产品管理工作，所以我本质上是推动产品方向并关注市场动态。
- en: I'm also doing a lot of write-ups for DevOps.com, O'Reilly, and TechTarget.
    My content focuses on how organizations assimilate modern development practices
    and a lot of cheerleading to enterprises to encourage them to make a move. I became
    very familiar with the market, which included playing with a lot of the tools
    myself. But after that, I started Sweetcode, which is now a more developer-focused
    site with a lot of really strong tactical content.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我还为DevOps.com、O'Reilly和TechTarget写了很多文章。我的内容主要关注组织如何吸收现代开发实践，并且对企业进行大量的鼓励，促使他们做出改变。我对市场非常熟悉，包括亲自使用了很多工具。但之后，我创办了Sweetcode，它现在是一个更专注于开发者的网站，拥有很多非常强大的战术性内容。
- en: What is DevOps?
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是DevOps？
- en: '**Viktor Farcic**: I''d like to start with a question that will probably sound
    very silly to you: what is DevOps?'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：我想从一个可能听起来非常傻的问题开始：什么是DevOps？'
- en: '**Chris Riley**: I believe very passionately that DevOps is not a thing that
    you can simply do. You don''t just say that, on a specific time and date, you
    "did" DevOps. "Doing DevOps" should never be a phrase anybody ever utters because
    you''re never "done" with DevOps.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**克里斯·赖利**：我非常坚信，DevOps不是你可以简单地“做”的事情。你不能仅仅说，在某个特定的时间和日期，你“做过”DevOps。“做DevOps”永远不应该是任何人说出来的，因为你永远不可能“完成”DevOps。'
- en: '"You don''t just say that, on a specific time and date, you ''did'' DevOps.
    ''Doing DevOps'' should never be a phrase anybody ever utters because you''re
    never ''done'' with DevOps."'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '"你不能仅仅说，在某个特定的时间和日期，你‘做过’DevOps。‘做DevOps’这句话不应该是任何人说出来的，因为你永远不可能‘完成’DevOps。"'
- en: —Chris Riley
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: — 克里斯·赖利
- en: 'DevOps is not a thing; it''s a principle, it''s a practice, and it''s what
    you use to drive all of your decisions on how you build your delivery chain. That
    means it encompasses everything from the dreaded word "culture" to implementation.
    A great example is if you walk into the door of Slack and take a look at their
    development environment. You might say, "Wow, look at you guys: your developers
    are supporting their own code. If they build it, they support it, and you''re
    releasing hundreds of times a day. You guys have continuous delivery—this is amazing!
    You guys have done it, you have hit the jackpot—you are DevOps."'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 不是一种东西；它是一种原则，一种实践，它是你用来驱动所有构建交付链决策的方式。这意味着它涵盖了从那个让人畏惧的词“文化”到实施的所有内容。一个很好的例子是，如果你走进
    Slack 的大门，看看他们的开发环境。你可能会说，“哇，看看你们：你们的开发人员在支持自己的代码。如果他们构建了它，他们就支持它，你们一天发布数百次。你们有持续交付——太神奇了！你们做到了，你们中大奖了——你们就是
    DevOps。”
- en: You can't say that because the "you are DevOps" element is not actually a thing.
    As we saw with Slack, they have been and always will be trying to figure out how
    to do a better job. That's what DevOps is. They're always thinking how they can
    do something better, even though, from an outsider's point of view, it might look
    like they have the best development environment and delivery chain in the world.
    They're still thinking, "How can we do this better? What can we automate more?
    What can we make go faster? How can we do more releases?" If you're concerned
    about better-quality software and releasing it faster and more frequently, then
    you're "doing DevOps," and you don't even need to call it DevOps. That's what
    I think DevOps is.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你不能这么说，因为“你们就是 DevOps”这个说法实际上并不存在。正如我们在 Slack 所看到的，他们一直在并且将永远在努力找出如何做得更好。这就是
    DevOps。他们总是在思考如何做得更好，尽管从外部人的角度看，他们可能拥有世界上最好的开发环境和交付链。但他们仍然在思考，“我们如何能做得更好？我们还能自动化哪些部分？我们如何能做得更快？我们如何能做更多的发布？”如果你关注的是更高质量的软件、更快、更频繁的发布，那么你就是在“做
    DevOps”，你甚至不需要称之为 DevOps。这就是我认为 DevOps 的定义。
- en: '**Viktor Farcic**: I feel as if you''re describing an extended version of Agile,
    or at least something similar to that.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我觉得你在描述一个扩展版的 Agile，或者至少是类似的东西。'
- en: '**Chris Riley**: I disagree. While Agile was more cut and dried, with clearly
    a more defined system of operations, DevOps is a bit more ethereal and philosophical.
    The reason that''s so important is because of Agile, or even before that, what
    we learned with Waterfall development practices.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**Chris Riley**：我不同意。虽然 Agile 更加简洁明了，有着明确的操作系统，但 DevOps 更加虚无缥缈和哲学化。这一点非常重要，因为正是通过
    Agile，或者甚至在那之前，我们从瀑布开发实践中学到了很多东西。'
- en: If you're an organization that thinks you're going to take on a project to implement
    DevOps, and that, by the end of the day, you're going to be doing workable DevOps,
    what you're actually going to have is a *DevOps shop*. What happens is, as soon
    as you've done that, the *DevOps shop* is no longer DevOps. It's dead, because,
    for instance, CloudBees has acquired Codeship and suddenly you need to reconsider
    how you're doing continuous integration because, possibly, you're using a different
    release automation tool, and now you need to consider, "Is my release automation
    tool different, or is there a new generation out?"
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一个组织，认为自己可以启动一个项目来实施 DevOps，并且期望最终能够实现可行的 DevOps，那么你实际上会得到一个*DevOps商店*。实际上发生的情况是，一旦你做到了这一点，*DevOps商店*就不再是
    DevOps 了。它死掉了，因为，例如，CloudBees 收购了 Codeship，突然间你需要重新考虑如何进行持续集成，因为你可能正在使用一个不同的发布自动化工具，现在你需要考虑，“我的发布自动化工具是不是不同了，或者有一个新版本出来了？”
- en: If you architect your delivery chain too rigidly and say, "This is our DevOps
    delivery chain," to the point that you can't adapt the next thing that comes out,
    you're not practicing DevOps. In DevOps, you're always looking forward. You're
    always looking at what's next, with the idea being that we don't end up in a cycle
    where six months down the road, after building something, we're then saying, "Oh,
    man, this is old. We need to retool again because so much is changing, and it's
    better, and we weren't prepared for that, and we didn't know things were going
    to change," which would be the most ridiculous statement in the tech field, period.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你把交付链设计得过于僵化，并且说：“这是我们的 DevOps 交付链”，以至于你无法适应下一个出现的东西，那你就没有在实践 DevOps。在 DevOps
    中，你总是在向前看。你总是在关注下一个是什么，目标是避免陷入这样一个周期：六个月后，构建了一些东西，我们说：“哦，天哪，这已经过时了。我们需要重新调整，因为变化太快了，而且更好了，我们没有做好准备，也没预料到会有变化”，这在技术领域将是最荒谬的说法。
- en: '"You really can''t get a certification in the principles and the philosophy
    of DevOps. As soon as you think you can, you have already alienated the environment."'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: “你真的无法获得 DevOps 原则和哲学的认证。你一旦认为自己可以获得认证，你就已经与环境产生了隔阂。”
- en: —Chris Riley
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: —Chris Riley
- en: That's where I'm uncomfortable about DevOps being a principle and philosophy,
    because it makes it much harder to manage and build a DevOps environment. It becomes
    a very large people problem, and people problems are the hardest problems to solve.
    You can't ignore that fact.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我对 DevOps 被视为一种原则和哲学感到不舒服，因为这让管理和构建 DevOps 环境变得更加困难。这变成了一个非常庞大的人员问题，而人员问题是最难解决的。你不能忽视这一事实。
- en: '**Viktor Farcic**: I completely agree. That''s why I get a bit disappointed
    when I go to conventions, as you do, and I see all of those commercials advertising
    every tool that I knew from three years ago as being DevOps-certified. It''s very
    much, "Buy this, and you become DevOps." I don''t know if you have the same feeling,
    but I''m freaking out because it''s too commercialized.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我完全同意。这就是为什么当我去参加会议时，有点失望，因为你也会看到那些广告，宣传我三年前就知道的每个工具现在是 DevOps
    认证的。广告词大多是“买了这个，你就成为 DevOps 了”。我不知道你有没有同样的感觉，但我真的快疯了，因为这太商业化了。'
- en: '**Chris Riley**: I''m a regent of the DevOps Institute. They started by offering
    courses on the high-level aspects of DevOps and culture, but they have since adapted
    and are now focusing a lot on tactics. You really can''t get a certification in
    the principles and the philosophy of DevOps. As soon as you think you can, you
    have already alienated the environment. What you can get certified in are the
    specific processes and implementations.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**Chris Riley**：我是 DevOps Institute 的理事。他们最初提供的是 DevOps 和文化的高层次课程，但后来他们做出了调整，现在更多关注战术层面的内容。你真的无法获得
    DevOps 原则和哲学的认证。你一旦认为自己可以获得认证，你就已经与环境产生了隔阂。你可以获得认证的是那些具体的流程和实现方式。'
- en: Even in release automation, things are changing. It's not a static environment.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在发布自动化中，事情也在不断变化。这不是一个静态的环境。
- en: The speed of change
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变化的速度
- en: '**V****iktor Farcic**: You''re right about the speed of change being tremendous.
    In today''s world, it''s impossible to follow. If we stick with your Jenkins examples,
    in a couple of years'' time, it moved from one container scheduler to another,
    it got a few hundred new plugins, new UIs, ditched the *old way* of defining jobs
    in favor of the everything-as-code philosophy, and so on. Jenkins is only one
    of many examples. I''m lucky that my job allows me to spend more time learning
    new tech than most other people, and yet I have a constant feeling of falling
    behind.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：你说得对，变化的速度确实非常快。在今天的世界里，跟上变化几乎是不可能的。如果我们以你的 Jenkins 为例，几年时间，它从一个容器调度器切换到另一个，新增了几百个插件，更新了用户界面，摒弃了*旧的*作业定义方式，转而采用一切皆代码的哲学，等等。Jenkins
    只是众多例子中的一个。我很幸运，工作让我能够花更多时间学习新技术，而不是像其他人那样，但我依然常常感到自己在落后。'
- en: Moving on, though, I saw that you're very focused on transitions from one culture
    to another. You've spoken with a range of people, from those in big enterprises
    to those in small start-ups. Have you seen any patterns or differences between
    the approaches?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，继续说下去，我看到你非常关注从一种文化向另一种文化的过渡。你与从大企业到小型初创企业的人们都有过交流。你有没有发现两者之间在方法上的一些模式或差异？
- en: '**Chris Riley**: It''s changed a lot in the last four years from when I had
    the initial conversations with an enterprise, when most people were opportunistic
    and saying, "Oh, yeah, we''re considering DevOps. That''s good. We know something
    new is coming." Then, you had this bifurcation of the small start-ups building
    bottom-up DevOps shops or principles.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**克里斯·赖利**：从我与企业进行初次对话的四年间，事情发生了很大变化，那时大多数人都是机会主义者，表示，“哦，是的，我们在考虑DevOps。这很好。我们知道有一些新的东西在到来。”然后，你会看到这种分化，像小型初创公司从底层构建DevOps商店或原则。'
- en: I shouldn't say that because I just said DevOps is not a thing. In the early
    days of DevOps, it was almost as if you had this exclusive members-only DevOps
    club where enterprises need not apply. The mindset was, "Hey, let's leave this
    to the secret club of people who know how to release software really fast." But
    then it changed very, very quickly, and enterprises very quickly jumped on board.
    However, the huge wave of adoption didn't actually come until Docker. When Docker
    came out, it felt like Docker was already behind, so enterprises picked up the
    pace a little bit, and you saw a lot more adoption because Docker was so pervasive.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我不应该这么说，因为我刚才说过DevOps并不是一种“东西”。在DevOps的早期，几乎就像你有一个只有会员才能加入的DevOps俱乐部，企业是不能加入的。那时的心态是，“嘿，让我们把这个留给那些知道如何快速发布软件的秘密俱乐部成员。”但随后情况发生了非常快速的变化，企业迅速加入进来。然而，大规模的采纳其实直到Docker发布才真正到来。当Docker发布时，它给人的感觉是Docker已经有点落后了，因此企业加快了进程，看到更多的采纳，因为Docker的普及性太强了。
- en: What I should say is *containers* were so pervasive that enterprises accepted
    and bought into DevOps immediately. So, it happened very quickly. The bifurcation
    was not as big. What's big is that enterprises don't have the luxury of just ripping
    out everything and starting over, whereas start-ups can tool their entire delivery
    chain to be in line with the DevOps methodology.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我应该说的是，*容器*如此普及，以至于企业立即接受并采纳了DevOps。因此，变化发生得非常迅速。这种分化并没有那么大。真正重要的是，企业没有奢侈的条件可以彻底剔除一切并重新开始，而初创公司可以将整个交付链工具化，使其与DevOps方法论保持一致。
- en: DevOps in the tech industry
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps在科技行业
- en: '**Viktor Farcic**: Sometimes there is an advantage in starting late. Start-ups
    created now don''t have the baggage that bigger and older companies have. Not
    being able to erase history often slows us down, and in an industry like ours,
    where everything can change from one day to another, being a start-up without
    legacy applications can be a huge advantage.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：有时，晚开始反而是一个优势。现在创建的初创公司没有大公司和老公司所背负的包袱。无法抹去历史往往会让我们变得迟缓，而在像我们这样的行业中，一切都可能在一天之内发生变化，作为一个没有遗留应用程序的初创公司，可能是一个巨大的优势。'
- en: With that frame of mind, how do you promote new values, processes, and tools?
    I guess it doesn't matter whether it is DevOps or something else; there should
    be a mechanism that a company can use to propagate change.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种心态，如何推广新的价值观、流程和工具？我想这并不重要它是DevOps还是其他什么；公司应该有一种机制来传播变革。
- en: '"Application development will generally buy into DevOps, as will most organizations.
    If they don''t, then you have an HR problem."'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: “应用程序开发通常会接受DevOps，大多数组织也是如此。如果他们不接受，那你就有一个HR问题。”
- en: —Chris Riley
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: ——克里斯·赖利
- en: '**Chris Riley**: The coolest thing I''ve seen in enterprises, and it works
    really well, is adoption via stewardship. These companies have built—and I hate
    this term—Centers of Excellence, where they will build an awesome DevOps environment
    and culture somewhere within the organization. It will do a great job of cranking
    out the code for maybe a very small, not super-critical mission application, and
    they will use that, and they will steward it across the organization.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**克里斯·赖利**：我在企业中看到的最酷的事情，而且它确实非常有效，就是通过托管来推动采纳。这些公司建立了——我不喜欢这个词——卓越中心，在那里他们会在组织内部建立一个很棒的DevOps环境和文化。它会非常出色地为一个非常小的、不太关键的应用程序生成代码，并且他们会使用它，并且将其在整个组织中进行管理。'
- en: Some organizations use it as a political thing, and they will steward more naturally,
    such as promoting internally, whereas other organizations make a structure out
    of it. In fact, there's a very large media company in the US where that's exactly
    what they do.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一些组织将其作为一种政治手段，并且他们会更自然地进行托管，比如通过内部晋升，而其他组织则将其构建成一种结构。事实上，美国有一家非常大的媒体公司就是这样做的。
- en: They have this small DevOps environment that invests in tools and the processes.
    They say, "Hey, development teams! We have a thousand small development teams
    (I don't know if it's a thousand, but it's a lot of small 10- and 20-person development
    teams). All of you out there are doing your thing, and you're doing it your way
    and that's fine. However, if you want us to support you, which means both budget
    and technical support, then you're going to have to use one of the tools that
    the DevOps team created." That's a very natural driver rather than having to say,
    "Oh, we probably should get on board with it," and they do.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 他们有一个小型的 DevOps 环境，投资于工具和流程。他们说：“嘿，开发团队！我们有一千个小型开发团队（我不知道是不是一千个，但确实有很多 10 到
    20 人的小团队）。你们每个人都在做自己的事，按照自己的方式做，这是可以的。然而，如果你们希望我们为你们提供支持，这包括预算和技术支持，那么你们就必须使用
    DevOps 团队创建的工具之一。” 这是一种非常自然的驱动，而不是说，“哦，我们大概应该加入这个”，然后他们就这么做了。
- en: With this particular media company, it's a little bit easier because their development
    teams are so separate from each other. They have a development team for each media
    site that they own. There's a lot of them, so it's a little bit easier because
    they're already structured with the two teams, versus, say, a bank that is structured
    with one monolithic team. Even in large banks, what they have is called the shared
    services division, and that's a buttered layer between IT and application development
    and the shared services that will buy into DevOps.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这家特定的媒体公司来说，情况稍微容易一些，因为他们的开发团队彼此独立。他们为自己拥有的每个媒体网站配备一个开发团队。网站很多，所以因为他们已经有两个团队的结构，这让事情稍微容易一些，相比之下，比如说，一家银行只有一个庞大的团队。即便是在大银行中，他们也有一个叫做共享服务部门的组织，这是
    IT 和应用程序开发之间的一个缓冲层，且共享服务将支持 DevOps。
- en: Application development will generally buy into DevOps, as will most organizations.
    If they don't, then you have an HR problem. The hard part is integrating with
    the IT team. What shared services do is approve processes and tools. They negotiate
    with IT on what could be used and what can't be used on behalf of the developers,
    and it works. It's a big effort, but it all works at the end of the day.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序开发通常会支持 DevOps，大多数组织也是如此。如果不支持，那么你就会遇到人力资源方面的问题。最难的部分是与 IT 团队的整合。共享服务的作用是批准流程和工具。他们与
    IT 协商，确定哪些可以使用，哪些不能代表开发者使用，这样就行得通了。这是一项巨大的努力，但最终它会成功。
- en: And I think that's really cool because enterprise adoption is always an excuse,
    but I don't think it is anymore because a lot of people will just say, "Yes, DevOps
    is really cool, but we're too big." The whole "We're too big" response isn't adequate,
    but I think a lot of enterprises have tuned into that.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这真的很酷，因为企业的接受总是一个借口，但我觉得现在不再是了，因为很多人会说，“是的，DevOps 确实很酷，但我们太大了。” 这种“我们太大了”的反应是不够的，但我认为很多企业已经意识到这一点。
- en: '**Viktor Farcic:** When I hear companies use "We''re too big" as an excuse—and
    I hear it quite often—my first thought is always, "No, your culture isn''t ready.
    The type of organization structure or the communication within your company is not aligned."'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：当我听到公司用“我们太大了”作为借口时——我听到过很多次——我的第一反应总是，“不，你们的文化还没有准备好。你们公司内部的组织结构或沟通方式并不协调。”'
- en: '**Chris Riley**: Yes, and unless these companies initiate a DevOps strategy,
    they''re going to fall behind the competition. Eventually, they''re just not going
    to have a choice, because somebody''s application is going to be better. For instance,
    Amazon is going to come and enter healthcare, which is now what Amazon is talking
    about doing. So, now hospitals have to worry about having ease of use and quality
    applications.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**Chris Riley**：是的，除非这些公司开始实施 DevOps 战略，否则它们将会落后于竞争对手。最终，它们将没有选择，因为某个应用程序会更好。例如，亚马逊将进入医疗行业，而亚马逊现在正在谈论要做的事情。所以，现在医院必须担心应用程序的易用性和质量。'
- en: '**Viktor Farcic**: When those things happen, when somebody truly disrupts the
    industry, that results in the industry''s need to suddenly change for the better.
    It leaves me wondering whether it''s already too late when that happens.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：当这些事情发生时，当某人真正颠覆行业时，通常会导致行业急需发生改变，变得更好。这让我不禁想，发生这种事时，是否已经为时太晚。'
- en: '**Chris Riley**: It is, and it isn''t. This isn''t related to DevOps, but before
    Satya Nadella came on board as the current CEO at Microsoft, it felt as though
    Microsoft was too late. And then they did it, but they could do it because they
    had the money. It''s the sheer power of cash behind them.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**Chris Riley**：是的，也不是。这与DevOps无关，但在Satya Nadella成为微软现任CEO之前，微软曾感觉好像太迟了。然后他们做到了，但他们能做到，是因为他们有钱。背后是现金的巨大力量。'
- en: You know, what's funny to me is that there's a very large financial institution
    that's famous in the DevOps space for building its own open source DevOps tool.
    But a small division within this organization already reaches out to the DevOps
    community on a regular basis—and they're not even connected to the group who are
    developing this tool—asking consultants to come in and explain to them what DevOps
    is. It's absolutely baffling. You have an entire team that's going around talking
    about how amazing the DevOps is, who have built their own tool, and it's great,
    but the team developing the tool doesn't even know this other division exists!
    But back to your point. It's like your structure is broken; you have a communication
    problem that means something is seriously wrong.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道，对我来说有趣的是，有一家在DevOps领域非常著名的金融机构，以开发自己的开源DevOps工具而闻名。但这家机构内部的一个小部门，已经定期向DevOps社区求助——而且他们甚至和开发这个工具的小组没有任何联系——请顾问进来向他们解释什么是DevOps。这简直让人困惑。你有一个团队在到处谈论DevOps有多棒，他们还开发了自己的工具，工具很棒，但开发这个工具的团队甚至不知道另一个部门的存在！但回到你的问题。这就像是你的结构出了问题；你有一个沟通问题，意味着有些地方严重出了错。
- en: '**Viktor Farcic**: Exactly. Have you ever been in a situation where somebody
    says, "Oh we tried it and we failed. This does not work, and this was all a waste
    of effort?"'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：没错。你有没有遇到过那种情况，有人说：“哦，我们试过了，失败了。这不起作用，这一切都是徒劳的？”'
- en: '**Chris Riley**: Oh, yeah, the partial-attempt-and-failure response. It''s
    akin to saying you''re too big.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**Chris Riley**：哦，当然，部分尝试并失败的反应。这就像是在说你太大了。'
- en: What I do is ask, "What aspect of the DevOps methodology did you try to input?
    Did you try to go directly to continuous delivery? Because that's not a good idea.
    Why don't you automate testing first? Let's automate something smaller. Don't
    go to canary releases tomorrow and tell me, "Oh, we did the canary release thing;
    it released some software too fast and people were pissed." If you say that, then
    my response would simply be, "Why did you pick that? Automate something else."
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我做的事情是问：“你尝试输入了DevOps方法论的哪个方面？你是否直接尝试了持续交付？因为那并不是一个好主意。为什么不先自动化测试呢？我们先自动化一些较小的东西。别明天就去做金丝雀发布，然后告诉我，‘哦，我们做了金丝雀发布；它把软件发布得太快了，人们都很生气。’如果你这么说，我的回应就会很简单，‘你为什么选择那个？自动化其他的东西吧。’”
- en: '**Viktor Farcic**: I''ve heard the story that nobody can skip through time
    if you don''t know what automation is. They say that you''re going to fail to
    implement containers because your gap is going to be too big to jump into something.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我听过这样的故事，如果你不知道什么是自动化，就无法跳跃穿越时间。他们说，你将无法实施容器，因为你的差距太大，没法跳到下一个阶段。'
- en: '**Chris Riley**: I don''t think you can jump in there, and more widely, that
    mentality has been a problem all along, where people think that a tool is going
    to solve the problem. They think Jenkins is a release automation tool in the DevOps
    market, and that if they buy into it then they''ve done DevOps right, because
    Jenkins is going to bring DevOps to their organization, and then they''re done.
    That mentality never works. If you expect the tool to do it for you, then you''re
    wrong.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**Chris Riley**：我不认为你可以直接跳进去，更广泛地说，这种心态一直是个问题，人们认为一个工具可以解决问题。他们认为Jenkins是DevOps市场中的发布自动化工具，如果他们买了这个工具，就说明他们正确地做了DevOps，因为Jenkins会把DevOps带到他们的组织中，然后他们就完成了。这种心态永远行不通。如果你期待工具来为你解决问题，那你就是错的。'
- en: Bottom-up or top-down?
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自下而上还是自上而下？
- en: '**Viktor Farcic**: That''s why I think it''s very dangerous when you buy into
    tools that promise certain cultural changes just by existing. In your view, then,
    what works better: bottom-up or top-down? And more specifically, when there''s
    an initiative, where should it come from?'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：这就是为什么我认为，购买那些承诺仅凭存在就能带来文化变革的工具是非常危险的。那么，在你看来，哪种方式更有效：自下而上还是自上而下？更具体地说，当有一个倡议时，应该从哪里开始？'
- en: '**Chris Riley**: I''m going to answer that a little bit differently because
    I think both questions, in their own ways, are critical. But that being said,
    if I had to pick one, I would say bottom-up. If you have an issue with bottom-up
    development, as in you have a developer who''s telling you they don''t want to
    focus on building the application and they don''t want to get it out the door
    faster, then you have the wrong developer. If that''s your problem, then that
    presents you with a bigger challenge, because you shouldn''t have to explain to
    a developer why building an application and speed to market are good.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**Chris Riley**：我会稍微不同地回答这个问题，因为我认为这两个问题从各自的角度来看都很关键。不过，话虽如此，如果我必须选择一个，我会说是从下而上。如果你有下而上的开发问题，举例来说，如果一个开发人员告诉你他们不想专注于构建应用程序，并且他们不想更快地把应用程序发布出去，那么你就选错了开发人员。如果这是你的问题，那么这就带来了更大的挑战，因为你不应该需要向一个开发人员解释为什么构建应用程序和加速市场发布是重要的。'
- en: For that reason, when looking at bottom-up versus top-down, I think 90% of the
    effort is top-down because that's where the biggest hurdle is. This is something
    that's very common in quality assurance teams, or Quality Engineering (QE) teams,
    who are driven to do something new because they believe in automation. They have
    this holistic point of view of the entire delivery chain. They see everything.
    But QE teams never have a budget, ever, and they have to justify to research and
    development teams (R&D), who may have to then justify to somebody else in order
    to gain the budgets to get functional testing tools for Selenium, for instance.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 出于这个原因，在下而上与上而下的比较中，我认为90%的努力应该是上而下，因为这是最大的障碍。这在质量保证团队，或者质量工程（QE）团队中非常常见，他们渴望做新事物，因为他们相信自动化。他们有一个关于整个交付链的整体视角，他们看到了所有的环节。但
    QE 团队从来没有预算，他们必须向研发团队（R&D）证明这个需求，研发团队可能又得向其他人证明，才能争取到预算去购买功能测试工具，比如 Selenium。
- en: That's the hardest part. And when these people go to those decision makers,
    if those decision makers don't understand the value of DevOps, they may not say
    it's dumb; but they may say you can't do that, or they may just be dismissive
    because they don't understand how it's going to impact the bottom line. It's becoming
    easier to explain, because you can very easily see a lot of industries now point
    to very high-quality applications that are getting better customer satisfaction,
    more customer engagement, and actually impacting the bottom line.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最困难的部分。当这些人去找决策者时，如果决策者不了解 DevOps 的价值，他们可能不会说这是愚蠢的；但他们可能会说你不能这样做，或者因为他们不了解这将如何影响底线，他们可能会直接不予理会。现在解释变得更容易了，因为你可以很容易看到很多行业现在指向那些质量非常高的应用程序，这些应用程序不仅提升了客户满意度和客户参与度，还真正影响了底线。
- en: '"A lot of industries now point to very high-quality applications that are getting
    better customer satisfaction, more customer engagement, and actually impacting
    the bottom line."'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '"现在很多行业都指出，质量非常高的应用程序正在获得更好的客户满意度、更高的客户参与度，并且真正影响了底线。"'
- en: —Chris Riley
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: —Chris Riley
- en: That's changing minds, and sometimes, changing minds is impossible. But you
    also have the problem of compensation structures. If the operations teams are
    compensated for making sure stuff never breaks, then they're in a direct conflict
    of interest with the developers who are compensated for making sure that they
    get the application out of the door. Operations don't want anything to change,
    ever, because when things change, things can break.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这正在改变人们的想法，有时候，改变想法几乎是不可能的。但你还面临薪酬结构的问题。如果运维团队的薪酬是为了确保东西永远不会坏掉，那么他们与开发人员之间就会产生直接的利益冲突，因为开发人员的薪酬是为了确保他们能把应用程序快速发布出去。运维人员不希望任何事情发生变化，因为变化可能会导致问题。
- en: When IT operations are focused on the fact that they don't want developers to
    release anything, they're naturally going to become a bottleneck. So, compensation
    and organizational structures can only be changed from the top down. Going from
    100-person development teams to 5- to 10-person development teams is just another
    big structural change that can only happen top-down. I just think that's where
    the effort goes, and the effort has to be spent.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当 IT 运维专注于不让开发人员发布任何东西时，他们自然会成为瓶颈。因此，薪酬和组织结构的变化只能从上而下进行。从100人的开发团队到5到10人的开发团队，只是另一种只能从上而下进行的重大结构变化。我认为这就是工作的方向，所有的努力必须在这里投入。
- en: '**Viktor Farcic**: When you mentioned developer teams, do you refer to self-sufficient
    teams that can develop and operate?'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：当你提到开发团队时，你是指那些可以自行开发和运营的自给自足的团队吗？'
- en: '**Chris Riley**: I know there are different ways of approaching this, but the
    cool thing about containers and microservices is that they''re not just infrastructure
    tools; they''re also application architecture tools. If you start to consider
    building and breaking your application down into services, you naturally run into
    the fact that we need smaller development teams because, for example, you don''t
    need 100 people writing a login service. You only need two. I think this new architecture
    naturally takes organizations that way, which is cool, but they have to be ready
    for that change. That being said, I still gravitate toward the small teams that
    have a DevOps engineer, developers, and quality assurance folk.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**克里斯·赖利**：我知道有不同的方式来处理这个问题，但容器和微服务的酷炫之处在于，它们不仅仅是基础设施工具；它们还是应用架构工具。如果你开始考虑将应用程序构建并拆解成服务，你自然会遇到这样一个事实，那就是我们需要更小的开发团队。例如，你不需要
    100 人来编写一个登录服务，你只需要两个人。我认为这种新的架构自然会把组织带向这个方向，这很酷，但他们必须为这种变化做好准备。话虽如此，我仍然倾向于那些拥有
    DevOps 工程师、开发人员和质量保障人员的小团队。'
- en: I have not, with the exception of some very rare environments, bought into the
    idea that if you build it, then you also test it and support it. I do think if
    you test it, you need to test your own code, but somebody else is creating the
    automation. I don't think that it's appropriate to go to a developer and say,
    "You need to write Selenium scripts for your code," because it will never get
    done. Somebody else has to be doing that. I still think that there is a need for
    that QE unit, either a team that butters across all developers or individuals
    within smaller teams.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 除了一些非常罕见的环境之外，我并不完全相信“如果你构建了它，那么你也应该测试并支持它”这一理念。我确实认为，如果你测试了它，你需要测试自己的代码，但自动化的创建应该由其他人来做。我认为，去找开发人员说：“你需要为你的代码编写
    Selenium 脚本，”这种做法是不合适的，因为它永远不会完成。必须由其他人来做这个工作。我仍然认为需要有质量工程（QE）团队，可能是一个跨所有开发人员的团队，或者是小团队中的个别成员。
- en: DevOps departments
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps 部门
- en: '**Viktor Farcic**: What do you think about DevOps departments then? I''m seeing
    quite a lot of them today, especially in enterprises. When I take a closer look
    at these enterprises, I''m told they''re going to form this DevOps department
    that will be in charge of doing DevOps for the whole company.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：那么，你怎么看待 DevOps 部门呢？今天我看到很多这样的部门，尤其是在大企业中。当我仔细观察这些企业时，我听说他们将成立一个
    DevOps 部门，负责为整个公司做 DevOps。'
- en: '**Chris Riley**: Going back to that large media company I referenced earlier,
    that''s what they do. They implement but they''re not responsible for implementing
    organization-wise. They''re more responsible for knowing both what the best practices
    and the best tools are. What they do implement organization-wise are things such
    as chatbots, integrations with AWS or whatever the cloud provider is, and things
    that truly are tools that you would use because what they''re integrating with
    is global.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**克里斯·赖利**：回到我之前提到的那家大型媒体公司，他们的做法就是这样。他们进行实施，但不负责整个组织的实施。他们更关注的是了解什么是最佳实践和最佳工具。他们在组织层面实施的内容包括聊天机器人、与
    AWS 或其他云服务提供商的集成，以及那些真正是你会使用的工具，因为它们所集成的服务是全球性的。'
- en: Everybody uses Slack, so they can create things for Slack. Everybody is using
    the same cloud, so they can create things for this cloud. That's where I think
    you have a DevOps department. I don't think it's necessarily true that you go
    into any organization and say, "We need to form a DevOps department," and then
    that's the answer to the problem.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人都在使用 Slack，因此他们可以为 Slack 创建内容。每个人都在使用相同的云服务，所以他们可以为这个云创建内容。我认为，这就是 DevOps
    部门的所在。我不认为你可以走进任何一个组织，说：“我们需要成立一个 DevOps 部门，”然后这就是解决问题的答案。
- en: '"DevOps engineer," as a title, makes sense to me, but I don''t think you necessarily
    have DevOps *departments*, nor do you seek that out. Instead, I think DevOps is
    a principle that you spread throughout your entire development organization. You
    should look to reform your organization in a way that supports those initiatives
    versus just saying that you need to build this DevOps unit, and there you go,
    you''re done—you''re DevOps. Because by doing that, you really have to empower
    that unit, and most organizations aren''t willing to do that. You can''t just
    set people off on a race to build DevOps and then not give them the tools to actually
    do it. I think that''s normally what happens next if you just build a DevOps organization.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: “DevOps工程师”作为一个职位对我来说是有意义的，但我认为你不一定会有DevOps*部门*，也不需要去追求这一点。相反，我认为DevOps是一种你应该在整个开发组织中推广的原则。你应该以一种支持这些举措的方式来改革你的组织，而不是仅仅说你需要建立这个DevOps单位，然后就完成了——你就是DevOps了。因为那样做的话，你真的需要赋能那个单位，而大多数组织并不愿意这么做。你不能只是让人们去比赛建立DevOps，结果却不给他们实际做的工具。我认为这通常是你只是建立一个DevOps组织之后发生的事情。
- en: '"''DevOps engineer,'' as a title, makes sense to me, but I don''t think you
    necessarily have DevOps departments, nor do you seek that out."'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: “‘DevOps工程师’作为一个职位对我来说是有意义的，但我认为你不一定会有DevOps部门，也不需要去追求这一点。”
- en: —Chris Riley
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: —Chris Riley
- en: '**Viktor Farcic**: In my view, having a DevOps department creates another silo.
    I heard once—and it''s a description that I really like—that DevOps is all about
    empathy, and that by joining different people together in the same team, you develop
    empathy in people, and they finally understand each other''s pain.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：在我看来，建立一个DevOps部门反而会形成另一个孤岛。我曾经听过一句话——这是我非常喜欢的描述——那就是DevOps完全是关于同理心的，通过将不同的人聚集在同一个团队里，你培养了人们之间的同理心，他们最终理解彼此的痛苦。'
- en: '**Chris Riley**: The only problem with saying things like that is the CFO doesn''t
    give a shit about empathy, and the person with the money may not care about that
    at all. The HR department might, but that''s the problem with selling anything.
    You have to speak their language, and the CFO is going to respond to money. Either
    you''re saving us money, or you''re making us more money, and I think DevOps is
    doing both, which is cool. I think what''s nice about that explanation is the
    fact it doesn''t seem insurmountable. It''s kind of like how Pixar was structured.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**Chris Riley**：说这些话的唯一问题是CFO根本不在乎同理心，而有钱的人可能根本不关心这个。人力资源部门可能会在乎，但这就是销售任何东西的问题。你必须讲他们能听得懂的语言，而CFO会关注金钱。要么你为我们省钱，要么你为我们赚更多的钱，我认为DevOps两者都在做，这很酷。我觉得这段解释的好处在于它看起来并不是不可逾越的。这就像皮克斯的结构一样。'
- en: After Steve Jobs started at Pixar, he structured all of the work environments
    where the idea was to create chance encounters among the employees, so that the
    graphic designer of one movie would talk to the application developer of another,
    even when they don't even have any real reason to interact with each other. The
    way they did it at Pixar was that, as everybody has to go to the bathroom, they
    put the bathrooms in a large communal area where these people are going to run
    into each other—that's what created that empathy. They understand what each other's
    job is. They're excited about each other's movies. They're excited about what
    they're working on, and they're aware of that in everything they do. It's a really
    good explanation.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在史蒂夫·乔布斯加入皮克斯后，他构建了所有的工作环境，目的是创造员工之间偶然相遇的机会，这样即便他们没有任何实际的理由互相交流，某个电影的图形设计师也能和另一个电影的应用开发人员交流。皮克斯的做法是，因为每个人都需要上厕所，他们把厕所设在一个大共用区域，让这些人能偶然遇到对方——这就是创造同理心的方式。这样，他们就能理解彼此的工作，彼此对对方的电影充满兴趣，对自己正在做的事情感到兴奋，并且在他们做的每一件事中都意识到这一点。这是一个很好的解释。
- en: '**Viktor Farcic**: I agree that CFOs and the young people very high up on the
    corporate ladder mostly understand money. How do you translate that? What do you
    say and what will you earn if you do DevOps? How is it translated into money and
    how do you measure it?'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我同意CFO和在公司高层职位的年轻人大多了解金钱。你如何将这一点转化呢？你会怎么说，如果你做DevOps，你能赚到什么？它如何转化为金钱，你又如何衡量它？'
- en: '**Chris Riley**: Sometimes it seems like it doesn''t measure directly. When
    I talk to organizations who are building line-of-business applications and the
    internal applications they use to do their job, I explain things differently because,
    in that context, user satisfaction doesn''t matter as much. Their users aren''t
    paying them, and they''re not going to up and leave. They''re going to do what
    they''re told.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**克里斯·赖利**：有时候似乎没有直接的衡量标准。当我与那些构建业务应用程序和内部应用程序的组织沟通时，我会用不同的方式解释问题，因为在这种情况下，用户满意度就没有那么重要了。因为他们的用户并不付钱给他们，而且他们也不会离开。用户会按要求去做。'
- en: There is something to be said for customer satisfaction. Coming from the SharePoint
    space, this is something I know very well. If people inside the organization don't
    like SharePoint, they won't use SharePoint. By virtue of not using SharePoint,
    you're not hitting your initiative. So, users do matter, as does user experience,
    which is both look and feel as well as keeping things up to date and addressing
    issues when they come up. If somebody has a bug, it gets fixed.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 顾客满意度是值得关注的。从SharePoint领域过来，我对此非常了解。如果组织内部的人不喜欢SharePoint，他们就不会使用SharePoint。由于不使用SharePoint，你的计划就无法实现。所以，用户确实很重要，用户体验也同样重要，既包括外观和感觉，也包括保持更新和及时解决问题。如果有人遇到bug，它就会被修复。
- en: Typically, in the line-of-business scenario, it's going to take you at least
    three months to fix that bug, by which point your customers—who are typically
    internal users who hate their jobs—are less productive. That effect then snowballs.
    So, that's the line-of-business case.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在业务应用场景中，修复一个bug至少需要三个月时间，到那时，你的客户——通常是那些讨厌自己工作内部的用户——已经变得不再高效。这个效果随后会呈现出雪球效应。所以，这就是业务应用的情况。
- en: If you're a bank, you're trying to not lose customers, because it's a highly
    competitive market, and by default, everybody hates banks. Firstly, you'll want
    to create a customer experience that reduces costs because people are not engaging
    with your branches and calling your customer support line as much. Secondly, you
    can release new offerings—the new checking account, whatever it is—faster, which
    means that you can get customers of those offerings faster and engage more of
    them. All of these things are not going to be deliverable unless you have a really
    powerful application, and that powerful application is going to have bugs because
    bugs happen. You need to be able to respond to those bugs because the customer
    today is highly critical, and you can't change the customer.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一家银行，你的目标是避免失去客户，因为这是一个高度竞争的市场，而且默认情况下，大家都讨厌银行。首先，你会想要创建一种降低成本的客户体验，因为人们不再频繁光顾你的分行，也不再频繁拨打你的客户支持电话。其次，你可以更快地推出新的产品——新的支票账户，或者其他什么产品——这意味着你可以更快地吸引这些产品的客户并与他们建立更多的联系。所有这些都无法实现，除非你有一个真正强大的应用程序，而这个强大的应用程序是会有bug的，因为bug是不可避免的。你需要能够应对这些bug，因为如今的客户非常挑剔，而你不能改变客户。
- en: You're also going to have to adapt to how your customer uses applications and
    what they expect. What they expect is an app that works. They want to see you
    making frequent changes, resolving problems faster, and being responsive to their
    usage behavior. All of this is an expectation now, and unless you're an organization
    that thinks you're powerful enough to change the world's user behavior, you need
    to be able to respond to that because, if you don't, you'll lose customers no
    matter what you do; or at the very least, you're just going to have angry customers
    who are going to need more support, which, in turn, is going to be more expensive
    for you to work with your customer base, and it's going to be harder to sell them
    new things.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要适应客户使用应用程序的方式和他们的期望。他们的期望就是应用程序能够正常工作。他们希望看到你频繁地进行更改，更快速地解决问题，并且对他们的使用行为做出响应。所有这些现在都是期望，除非你是一个认为自己足够强大能改变世界用户行为的组织，否则你需要能够回应这些期望。因为如果你不回应，你无论做什么都会失去客户；至少，你会有一群愤怒的客户，他们需要更多的支持，而这将使你与客户群体合作的成本增加，也让你更难向他们销售新产品。
- en: '**Viktor Farcic**: That''s a valid point and one I find quite interesting.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇克**：这是一个有效的观点，我觉得很有意思。'
- en: '**Chris Riley**: Really, any organization can relate to the bottom line of
    either losing customers and not being able to compete, or not being able to execute
    on new initiatives fast enough. It''s all boiling down to that day. To me, it
    seems like a no-brainer. If you''re in a room with somebody who''s really going
    to fight against this, then all I can think is, "OK, it''s going to happen to
    you whether you know it or not."'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**Chris Riley**：实际上，任何组织都能感同身受，究竟是失去客户、无法竞争，还是无法快速执行新的计划，最终都会归结到那一天。对我来说，这看起来像是一个显而易见的决定。如果你和一个真的会反对这个的人待在一起，那我只能想，“好吧，不管你知不知道，这事儿都会发生在你身上。”'
- en: Take Apple, for instance. Apple is going into banking in a very sneaky way.
    It's going to creep up on these banks with Apple Pay because now, with Apple Pay,
    I can send you a text message with money. If you don't have a linked card, you
    now have credit with Apple and an account with Apple, and they're just doing that
    because they can. It should scare the banks.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以苹果为例。苹果正在以一种非常隐秘的方式进入银行业。它将通过Apple Pay悄悄渗透这些银行，因为现在，借助Apple Pay，我可以给你发送带钱的短信。如果你没有绑定的银行卡，你现在拥有了苹果提供的信用和账户，而他们这么做只是因为他们能够做到。这应该会让银行感到害怕。
- en: I think it's exactly like, "OK, it'll happen to you, and you're going to regret
    it." You'll lose your job, but then, at the next company you go into, you're going
    to be the biggest DevOps champion in that company because of the experience you
    had in your previous job.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得这就像是，“好吧，这会发生在你身上，你会后悔的。”你会失去工作，但在你进入下一个公司后，由于你在之前的工作中积累的经验，你将成为该公司最大的DevOps支持者。
- en: '**Viktor Farcic**: While I agree with you on many of the things we''ve spoken
    about, I have the impression that you are mostly referring to in-house development.
    Do you have any thoughts about what happens to companies that externalize their
    software, making it a commodity?'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：虽然我同意你说的很多内容，但我有一种感觉，你主要是在谈论内部开发。你对那些将软件外包，进而将其商品化的公司有什么看法吗？'
- en: Outsourcing and the commoditization of software
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 外包和软件的商品化
- en: '**Chris Riley**: That''s an interesting point, and I''m going to be bold. I don''t
    want to alienate an industry, but I think that these outsourced companies have
    hopefully embraced DevOps because they have to support their customers, as well
    as because they want to build applications faster and better.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**Chris Riley**：这是一个有趣的观点，我要大胆一点。我不想让某个行业感到疏远，但我认为这些外包公司希望能够接受DevOps，不仅是因为他们必须支持客户，还因为他们希望更快、更好地构建应用程序。'
- en: That being said, I believe that technology is becoming such a core component
    of business these days that it's a huge mistake to outsource your application
    development. I just don't think it's something that companies should be doing.
    Having experienced something like that before, I know how it works and I know
    the negotiations that happen because you have to succumb to the development firm's
    limitations, skill sets, or whatever it is. Making changes and the complexity
    around that is difficult. I just don't think that any organization should consider
    outsourcing unless something is just not financially feasible. But you have to
    be honest with yourself when you say that you're building a mediocre application
    if it's an issue of money, and you have to be OK with that, and you have to know
    that, at some point in time, you're going to have to make the switch back from
    outsourcing.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，我认为技术如今已经成为商业的核心组成部分，外包应用程序开发是一个巨大的错误。我只是觉得公司不应该做这样的事。经历过这种事情后，我知道它是如何运作的，我也知道谈判的过程，因为你必须屈从于开发公司在技能、资源等方面的限制。做出改变以及围绕变化的复杂性是非常困难的。我认为除非财务上不可行，否则任何组织都不应该考虑外包。但你必须对自己诚实，当你说自己在做一个平庸的应用程序时，如果是因为钱的问题，你必须能接受这一点，而且你必须知道，最终你会不得不从外包中回归。
- en: For example, there's a company that builds an influencer marketing platform,
    and the first three versions of it were not great, mainly because it was super
    buggy. But the platform solved a problem, people were interested, it worked, and
    they got customers—but it wasn't great. This company then decided to go in-house,
    and when they went in house, they focused on hiring a development manager that
    understood DevOps and everything changed. Because of that switch, their application
    quality went through the roof. It just was awesome, and this is a very small company,
    and now their platform is very cool.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，有一家公司构建了一个影响者营销平台，前面三个版本的效果并不理想，主要是因为有很多bug。但这个平台解决了一个问题，人们感兴趣，它有效，他们得到了客户——但它并不完美。然后这家公司决定转向内部开发，当他们转向内部时，他们专注于招聘一位了解DevOps的开发经理，之后一切都改变了。正因为这个转变，他们的应用程序质量飞跃提升。它变得非常棒，这是一家非常小的公司，现在他们的平台非常酷。
- en: '"I think that these outsourced companies have hopefully embraced DevOps because
    they have to support their customers, as well as because they want to build applications
    faster and better."'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: “我认为这些外包公司希望拥抱DevOps，因为他们不仅需要支持客户，而且还希望更快、更好地构建应用程序。”
- en: —Chris Riley
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: —Chris Riley
- en: '**Viktor Farcic**: I think it''s only a question of whether a company has already
    realized that they''re a software company. If they are, then software development
    is a core business, and nobody disputes that you do not externalize core business.
    It''s all about whether a company is aware that every company is a software company
    today.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我认为这只是一个问题，是否公司已经意识到他们是一家软件公司。如果是，那么软件开发就是核心业务，没有人会争辩说核心业务不能外包。关键是公司是否意识到如今每家公司都是一家软件公司。'
- en: With that being said, I'm curious about trust. How do you trust an external
    company will do such important work well? Can you outsource development and yet
    maintain control and quality?
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，我很好奇关于信任的问题。你如何相信一个外部公司能够做好如此重要的工作？你能外包开发工作，同时保持控制和质量吗？
- en: '**Chris Riley**: You see the same on a dating site, which is typically fully
    outsourced. I think this is interesting from a SecOps and application development
    perspective. AshleyMadison.com is a great example. All of their development was
    outsourced, and we''ve all seen how that worked out for them. They blindly accepted
    what was being developed, and it turned out to be a massive exploit and just really
    dumb. I believe it should be illegal for organizations not to encrypt passwords
    in their database. If you do that, then you should be breaking some sort of law,
    because it''s not fair to any of your users, because you don''t have control over
    that data when you outsource, really.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**Chris Riley**：你在一个约会网站上也能看到相同的情况，这类网站通常是完全外包的。我认为从SecOps和应用程序开发的角度来看，这是很有趣的。AshleyMadison.com就是一个很好的例子。他们所有的开发工作都是外包的，我们都看到过那件事的结果。他们盲目地接受了正在开发的内容，结果却成为了一个巨大的漏洞，简直是愚蠢。我认为，组织不加密其数据库中的密码应该是违法的。如果你这样做，那你应该违反了某种法律，因为这对你的用户不公平，因为当你外包时，你并没有真正控制这些数据。'
- en: I just believe that organizations need to have their development in-house and
    the only reason to outsource is if it's just not financially possible. If it's
    not financially possible, you have to realize you're only going to outsource for
    a short amount of time.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我只认为，组织需要将开发工作保留在内部，外包的唯一理由是如果财务上真的不可能。如果财务上不可能，你必须意识到你只会短期外包。
- en: '**Viktor Farcic**: To be honest, you have to question the concept of financial
    feasibility when you''ve seen how much work a single good developer can do, even
    though they might be expensive.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：说实话，当你看到一个优秀的开发人员能够做出多少工作时，你必须质疑财务可行性，尽管他们可能很昂贵。'
- en: '**Chris Riley**: No doubt. We''ve experienced this at Sweetcode, and that''s
    why I''m kind of impassioned about it. We have a platform internally that we use
    to streamline the process of doing research, deciding what we want to write about
    based on that research, finding one of our contributors to write it, and then
    writing it and publishing it.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**Chris Riley**：毫无疑问。我们在Sweetcode有过这样的经验，这也是我对此话题充满热情的原因。我们内部有一个平台，用来简化研究的过程，基于研究来决定我们要写的内容，找到我们的贡献者来写，然后写作并发布。'
- en: We have a platform that streamlines the process, so it takes less manual effort
    to get it done. We have written this platform three times now. The first time
    I wrote it, it sucked really bad. The second time, we went to an outsourced company.
    I know enough about application development as I'm really good at architecture,
    so I was in a luxurious position where I could review their code because I knew
    what was going on. Most organizations don't have this. I realized the quality
    was horrible. The thing worked, but the quality was so bad that any new developer
    coming on board was not going to be able to take it on. In that situation, the
    best option was to rewrite.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: The only thing I would say is that, for those who don't know anything about
    application development and have a great idea, they may have to turn to a firm
    for expertise, and that's a bad position to be in. I mean, if you're a founder,
    it's almost like every company has to have an application, just as every start-up
    has to have a technical founder.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '"For those who don''t know anything about application development and have
    a great idea, they may have to turn to a firm for expertise, and that''s a bad
    position to be in."'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: —Chris Riley
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Does that mean if I externalize something, then that something
    is probably a thing that I don''t consider within the realm of my core business?
    That sounds to me as if it translates into, "Oh, software is not really important
    for me. Let me put it in the same box as cleaning services," or something along
    those lines.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '**Chris Riley**: You''re right—I mean, what do we outsource at our company?
    We outsource our legal, which is actually pretty damn important, our bookkeeping,
    our CPA, and our HR. We are not in the business of law or accounting or HR.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: You're absolutely right that they're all good quality services, but it's not
    important enough for us, for the product and the offering that we're building,
    to try to bring those in-house. I think you're right, though, that if you don't
    give it enough consideration, then you just don't care.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: To finish up, I was wondering whether you had any advice
    for those just starting their DevOps journey.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Starting your journey in DevOps
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Chris Riley**: The DevOps culture will come no matter what. It could come
    with a bloody mess or some kumbaya moment, but it will come on its own as long
    as organizations focus on automation and releasing better applications sooner.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: For that reason, I don't recommend that organizations waste time talking about
    communication or culture. Instead, I think they should be putting quotas on the
    number of releases a day, response time to issues, and the percentage of automation.
    They should make these objectives tied to bonuses and job performance.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: If the organization pushes the needle to have more frequent releases and better
    application quality, then they will figure out the culture, and they'll figure
    out how to communicate better, because these will all be major barriers.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Some will figure it out via employee attrition, and others after lots of arguments.
    But at the same time, that same organization would have distorted the lessons
    of culture to begin with, had it been taught top-down.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人通过员工流失发现问题，而其他人则经过大量争论后才会明白。但与此同时，如果这些内容是自上而下传授的，那么同一个组织一开始就会扭曲文化的教训。
- en: '**Viktor Farcic**: That''s brilliant. Thank you very much for your time.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔西奇**：太棒了，非常感谢你的时间。'
