- en: Introducing Ádám Sándor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ádám works to improve software delivery rates in business by utilizing cloud
    technologies. A certified ScrumMaster and Certified Kubernetes Administrator,
    Ádám spends much of his time involved in the technologies of DevOps. You can follow
    him on Twitter at `@adamsand0r`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: To start, could you tell us what, in your opinion, is DevOps,
    and how do you use DevOps in your career?'
  prefs: []
  type: TYPE_NORMAL
- en: What is DevOps, and how is it used?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: I''m a Java developer turned cloud-native consultant currently
    working for Container Solutions, an Amsterdam-based consultancy company, where
    we help companies adapt to cloud-native technologies while exploring the best
    practices in DevOps.'
  prefs: []
  type: TYPE_NORMAL
- en: I believe that DevOps is a way of developing software where you break down the
    barriers between the people who develop software and the people who run the software
    in production. Ideally, this would mean that a single team can be responsible
    for running their own software in production, which can improve the time it takes
    to fix problems. DevOps can also improve the design of software because developers
    get plenty of feedback—which allows them to design solutions in such a way that
    they will be able to run those solutions. I very much believe this is part of
    the "you build it, you run it" philosophy.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: But why would anyone want to do that?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: Because DevOps helps speed up the delivery of software, while
    reducing the risk of deploying it and breaking something. DevOps also helps meet
    a growing need to improve customer satisfaction by being able to quickly deliver
    new features and to fix any problems that customers are experiencing.'
  prefs: []
  type: TYPE_NORMAL
- en: '"DevOps is a way of developing software where you break down the barriers between
    the people who develop software and the people who run the software in production."'
  prefs: []
  type: TYPE_NORMAL
- en: —Ádám Sándor
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: So, how do you start implementing the DevOps process?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: At Container Solutions, where I''m a cloud technology consultant,
    we begin by conducting a discovery process: two of us go to a company that is
    already working with an idea. We enter the discovery process after some pre-sales
    meetings, and so as a result, we already have an idea of what their problems are,
    and what they would like to solve. The issue is usually focused on their software
    delivery process. Over the course of a couple of days, we conduct workshops that
    explore the company''s software landscape, their delivery processes, and their
    overall architecture. This lets us learn about what''s going on in the company
    and verify whether the problems that the client has identified are the *actual*
    problems that they need to deal with. It''s important to make sure that we''re
    out to solve their actual problems, rather than provide some quick reactions to
    some bad things that might have happened to our client.'
  prefs: []
  type: TYPE_NORMAL
- en: A good comparison here would be a doctor who sees a patient with a headache
    but doesn't just give the patient some aspirin because their head hurts—instead,
    they listen to the patient and they might discover that the patient needs to change
    their diet. In the context of the companies I work with, one company might invite
    us to install Kubernetes so their software development becomes more efficient.
    But we look carefully and we see that the delivery of their software passes through
    three departments. First, the developers develop the software. Then it goes to
    the testing department, before it's finally transferred to the operations department.
    Now, that process right there is the real problem! Kubernetes won't improve that
    company's software delivery. The company's problem, in this case, is not software
    based, and so we try to convince them to break down these barriers and make teams
    responsible for their production environment. Once that problem is solved, we
    might still bring in Kubernetes to more efficiently implement the new processes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: How often do you find people go to the doctor with the wrong
    symptoms? Do people even know what''s wrong with their technology processes to
    begin with?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: It''s hard for me to put a number on how many times people
    come to us with the wrong symptoms, but it happens both ways, and sometimes the
    customer can be very right. Sometimes they''ve done their homework and they come
    to us with a good idea of what their problems are and how to solve them. They
    can still be struggling to reach the next step of actually implementing solutions
    though, and in those cases it''s usually because they don''t have all the knowledge
    they need in-house. That''s where we can help in those situations.'
  prefs: []
  type: TYPE_NORMAL
- en: At other times, clients can be very wrong about their symptoms, even to the
    level where we can't help them because they're simply not ready to change. In
    those extreme scenarios, a company can be grasping at straws for new technology
    to solve their problems without actually identifying the real issues at hand.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes – the solution to all of our problems?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: My understanding is that you mostly work with Kubernetes,
    which means you''re into the latest and greatest. Is that a concern for you?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: We''ve never had experience with this technology failing,
    so in that sense, it''s not an issue in that it''s the latest and greatest. We
    never advise customers to jump into something, even though we are surfing on the
    edge of new technology and watching out for everything that''s coming our way.
    Usually, we recommend technologies that have already proven themselves for at
    least a year and that we know will work for the customer.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Does that mean everybody should move to Kubernetes? What
    does it involve? I imagine it''s not only creating new Docker images and YAML
    files. Let''s say that I''m a company that has existed for a long time and I have
    everything, how does it look for me?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: For such a company it will start with a proof of concept to
    prove internally whether Kubernetes works for you. Depending on your short term
    plans this will either focus on moving a legacy application to Kubernetes or creating
    something new using technologies the company plans to move towards. Whether a
    company wants to move some or all of it''s legacy applications to Kubernetes can
    depend on many factors. What I would point out is that it''s not impossible or
    even undesirable to do so.'
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes is actually a surprisingly good system for supporting legacy applications,
    for example, with simple things like being able to inject configuration into a
    pod using files. You can very easily simulate a configuration files-based environment
    to old-school services that require huge config files, and so containers are a
    pretty backward-compatible technology.
  prefs: []
  type: TYPE_NORMAL
- en: '"Kubernetes is actually a surprisingly good system for supporting legacy applications,
    for example, with simple things like being able to inject configuration into a
    pod using files."'
  prefs: []
  type: TYPE_NORMAL
- en: —Ádám Sándor
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Another thing I''m curious about is if your site has a horribly
    managed legacy infrastructure with poorly designed applications, and you want
    to move them to containers and the cloud, would you first move them to Kubernetes
    on site and then switch to the cloud, or first move into the cloud without Kubernetes,
    or both?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: If possible use a cloud provider. They will do the heavy lifting
    of managing Kubernetes and other services you use freeing up your resources to
    focus on more business-centric tasks. But there can be valid reasons not to do
    that—heavy investments into a new datacenter, regulations about data storage,
    and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Wouldn''t that create a defensive politic? Because if you
    have an army of engineers in charge of infrastructure on site, what do we do with
    them if we move everything? Will there be space for all of them?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: I don''t know if there will be space for all of them, but
    I''ve never seen a project where people would have to be fired because there''s
    simply no need for them anymore. Yes, with a cloud provider you don''t need to
    run Kubernetes. But actually, there is plenty of work in setting up development
    and deployment tooling, and systems to track what''s deployed where. This is the
    more business centric work I mentioned - ditch low value add work for stuff that
    will bring more direct value to your business.'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the motivations for change
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: What do you think is driving all of these requests for improvement?
    Are they driven by the competition or by a genuine interest in new technology?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: I think the biggest motivation we see—and what most companies
    are missing—is the ability to release software fast. They realize that they should
    release new software every half year, but they need to come to this realization
    before the competition is already gaining on them and put the proper processes
    in place early enough so the production pipeline is filled. It''s this big pressure
    in today''s market that ends up making engineers leave because, frankly, it''s
    just a horrible environment to work in.'
  prefs: []
  type: TYPE_NORMAL
- en: There is also an excitement for new technologies because when companies in the
    market are looking for engineers, their HR department feels that new recruits
    will ask, "OK, what technologies are you using?" And when they hear that what's
    being used isn't the very latest iteration, these new recruits won't be interested
    in working for the company. What management still feels most acutely is that when
    they have a new idea, by the time they get it into production, it's already way
    too late.
  prefs: []
  type: TYPE_NORMAL
- en: '"What management still feels most acutely is that when they have a new idea,
    by the time they get it into production, it''s already way too late."'
  prefs: []
  type: TYPE_NORMAL
- en: —Ádám Sándor
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I''ve heard before that one of the motivations is not management''s
    motivation for improvement, but actually attracting and keeping talent.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: Definitely!'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Does this mean that engineers are getting picky?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: Engineers are getting picky. If they''re any good at their
    job, they won''t join a company where they will be manually installing Linux servers.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I''m just thinking that it''s kind of contradictory with
    the politics of externalizing development to a third party because you can get
    on one site and then decide to ship everything to someone else.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: I think the "let''s ship everything" mindset exists because
    the outsourcing trend isn''t as strong as it was before. I''m no expert on this,
    because I''ve worked in only a small part of the market, but I have seen companies
    insourcing, as well as those who outsource but build up long-term development
    teams in cheaper countries. They don''t think of those development teams as disposable
    labor, but know they are building them up for long-term use while attempting to
    integrate them into the company as first-class employees.'
  prefs: []
  type: TYPE_NORMAL
- en: I think that companies and people are realizing that they need to attract people
    in order to keep people. Even if you don't have the challenge of hiring staff
    in another country, usually in Eastern Europe or India, there is just so much
    that needs to be known about the company, its products, and the current state
    of its applications and infrastructure. The process of hiring is expensive anyway.
    You want to retain employees for a long time, and you want to hire good people
    because people who are unskilled are even more expensive to train. You can hire
    someone on a cheap salary but then spend half a year getting them up to speed,
    which is going to cost a lot of money, and even more time.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Is it the economy then that''s driving companies away from
    outsourcing?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: I think it''s also the new way of development for the whole
    DevOps culture: the idea that you build it, you run it, and that what the team
    owns is really a product. You marry the team to the product. The product owner,
    the designers, and the business analysts—everybody''s a part of the product team.
    You want to keep them engaged with that product in the long-term because they
    really understand it. Companies really started valuing this long-term engagement,
    and that just doesn''t work with outsourcing, or hiring disposable people.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: So, what''s next? Is there anything coming next, or will
    we ride Kubernetes for a while to come?'
  prefs: []
  type: TYPE_NORMAL
- en: A future beyond Kubernetes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: I''m quite surprised that the next thing is so slow to arrive,
    and that''s probably because Kubernetes is not yet that widespread within the
    industry. But I do believe the next thing will be products built on top of Kubernetes,
    once Kubernetes becomes more widely used. But until then, Kubernetes is kind of
    at an impasse because it''s a higher-level service than virtual machines and low-level
    networking.'
  prefs: []
  type: TYPE_NORMAL
- en: I believe it's going to be either Kubernetes integrating more and more stuff,
    so it morphs into something that's somewhat different than it is now, or other
    products that will be built on top of it. But I don't see any of those products
    coming along any time soon. I think Helm is a good example, but that's not a commercial
    product.
  prefs: []
  type: TYPE_NORMAL
- en: '"Kubernetes is not yet that widespread within the industry. But I do believe
    the next thing will be products built on top of Kubernetes…until then, Kubernetes
    is kind of at an impasse."'
  prefs: []
  type: TYPE_NORMAL
- en: —Ádám Sándor
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: If you want to run Kubernetes on site, would you recommend
    that I run it on top of a VM, or bare metal?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: I honestly don''t have an informed opinion on that. Theoretically,
    it''s much more efficient to run Kubernetes on bare metal, but the low-level networking
    stuff might just be too hard. Maybe it''s best to let solutions like VMware take
    care of a lot of the really low-level hardware stuff; in which case, it''s better
    that they speed up VMs. I don''t think Kubernetes is mature in this environment,
    but again, I''m no expert.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Do have any experience with or an opinion about unikernels?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: I don''t have much experience. All I see is that they''re
    a great idea. If you just look at it from a high level, they could totally beat
    containers because they feature the good parts of containers while running on
    hypervisors, which are basically what public clouds are—giant hypervisors.'
  prefs: []
  type: TYPE_NORMAL
- en: But what I also see is that unikernels don't seem to mature fast enough to attract
    enough attention. The tooling is simply not there. Actually, cloud providers don't
    let you run whatever you want on their hypervisors, just their own VM images.
    So again, theoretically, it could go there, but practically, it's not really happening
    at the moment, and I don't have enough industry insight to know whether, secretly,
    Amazon is working on something or not.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: How about other cloud providers? This is something that
    I agree with, and correct me if I''m wrong, but for most of us, it doesn''t make
    sense not to use cloud providers like AWS or Google because they''re commoditized
    and know better than we what they do. What does that mean for the future of all
    the software and vendors built around capturing infrastructure and configuration
    management tools?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: I don''t think configuration management tools will become
    obsolete because of cloud providers. You would totally provision your AWS infrastructure
    using Puppet, Chef, or Ansible.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: But should you, or even could you do that?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: As it stands, I don''t think using Puppet, Chef, and Ansible
    makes a difference whether you use it with a cloud provider or with your on-site
    infrastructure. It''s VMware who is on the spot with this; they are the competition
    to the cloud providers.'
  prefs: []
  type: TYPE_NORMAL
- en: The problem with Puppet, Chef, and Ansible is that they don't really push you
    towards better infrastructure. They're just a nicer way of restricting the level
    of abstraction they provide on the operating system. That doesn't lead to a better
    way of deploying software; it's basically just nicer than writing a script that
    SSHs into machines and runs some other script there. But it's not that much nicer,
    so you don't get immutable infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: If you launch a thousand machines and want to run the same Puppet stuff on them,
    three will fail, and what do you do with that? You have no way to deal with this
    stuff, and it will take a really long time to speed up any machine, so basically,
    just these tools by their nature are the wrong thing. If we stay in the world
    of virtual machines, then the right solution is pre-baking images and then managing
    them.
  prefs: []
  type: TYPE_NORMAL
- en: That's where Docker comes in, because it's a hassle to install and to pre-bake
    virtual machines. There is nothing like a golden image and extending, so Docker
    comes in and solves that problem, but instead of doing it with virtual machines,
    they're doing it by building container images.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Does that mean that their potential use from this would
    be building these images?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: It could be. But then, when you are building an image, nobody
    needs to use Ansible in a Docker file, even though they could, but I think nobody
    feels a great need to do that. Actually, we go back to scripting, because it''s
    enough.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: From my understanding, I like those tools because no matter
    the state of my server, it would converge the image into the desired state.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: If I''m building images then I know the initial state, Vanilla
    Ubuntu...'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Exactly. I''m not sure I see why I wouldn''t just run a
    shell script. I need apt-get to install this; I don''t need to check whether this
    is installed because I know it''s not.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: The funny thing is that, actually, these tools sort of work.
    Kubernetes does the same thing; it converges the state to where it should be.
    In that sense, it''s not doing anything different from Ansible. Kubernetes actually
    works so much better because it does it on a whole different level of abstraction.
    When you already have pre-built images and you just need to orchestrate instances
    of those images, then you can do the dynamic state management, and you''re okay.'
  prefs: []
  type: TYPE_NORMAL
- en: Nobody's crying for immutable Kubernetes clusters, but all the crap that you
    do inside the operating system, the low-level things like putting a file here,
    copying another there, and setting a flag here, that's the stuff that you do want
    to pre-bake and get done with and never touch again, unless you build another
    new image.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: That means you follow that logic with immutability and pre-baking
    images. Does that then mean not always, but sometimes, actually using ConfigMaps
    in Kubernetes would be the wrong thing to do, if the idea is immutability?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: Yes, immutability needs to stop somewhere. Kubernetes itself
    is a super-dynamic system so, yes, it''s absolutely contradicting immutability.
    But simply put, immutability makes sense up to a certain degree. I have seen super-configurable
    applications, and if you put those applications in a Docker container, you''ll
    have 150 environment variables to configure that image, and that''s not really
    where you want to be with your infrastructure.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Do we need those things?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: You really want just to have a few very specific things that
    are different between environments. Get them, configure them, and don''t touch
    the rest unless you are building something like a database image, which of course
    needs to be working in thousands of environments. But then, if that''s the case,
    you can again lock down some parameters and build your own image from it that
    only changes those parameters for each environment you actually require. Ideally,
    all your environments would be exactly the same, and you should look at that state
    and then just drift away a little bit from that, just as little as possible.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: What would be a little? A number of replicas?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: Number of replicas, user passwords, whatever. Just these very
    basic things. Certificates, public hostnames, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu and Red Hat in this new world
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I like discussing the question of what''s becoming obsolete.
    That brings me back to operating systems. Do we need Ubuntu or Red Hat in this
    new world?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: Simply put, yes, we do. There are currently two places to
    use operating systems right now. One is on the server that is running the containers,
    and the other is inside a container. So, on the server that''s running the containers,
    we already see a shift towards very minimalistic operating systems where they
    just do the bare minimum.'
  prefs: []
  type: TYPE_NORMAL
- en: '"[Do we need Ubuntu or Red Hat in this new world?] Simply put, yes, we do."'
  prefs: []
  type: TYPE_NORMAL
- en: —Ádám Sándor
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I''m thinking of platforms like Rancher and CoreOS.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: Exactly. Take CoreOS, for example. It''s very minimal and
    just launches containers, that''s all. It runs Docker, and that''s it, the OS
    inside the container.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Is that even an OS?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: Well, we can call it an OS because it acts like one. But of
    course, it steals the kernel from the actual machine it''s running on, while still
    pretending to be an OS. It''s really an OS in the sense that all the tools are
    installed, and all the programs are in the Linux distribution. Do we need all
    that stuff? Often, we don''t. Yes, they''re nice to have for debugging reasons,
    and they''re nice to have around for more legacy applications, but the legacy
    is in the very weakest sense because installing a JVM on a bare Linux where just
    the kernel lives is very difficult.'
  prefs: []
  type: TYPE_NORMAL
- en: So, it's probably alright to have a bit of a Linux distribution around it. Maybe
    in the future somebody could produce a very minimal image that really only has
    what the JVM needs. That would be nice because it'd be more secure and smaller,
    but I really think that one of the main reasons why Docker has become so popular
    is that it's so backward-compatible in the sense that you are inside the image,
    you're just doing Linux stuff. It's very easy to get there, so it provides the
    good stuff without sacrificing much. The fact that there are some programs in
    there that aren't really used is not such a big issue.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I presume then that, in a way, it will be a threat to companies
    like Red Hat, because you just named Ansible and Red Hat as being less relevant.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: Red Hat knows that, and that''s why they''re building OpenShift,
    and then Red Hat Atomic Linux to run OpenShift.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Red Hat was the smart one who recognized Kubernetes early on and jumped on
    board. Now they''re at the point where they can practically get rid of their own
    Linux distribution because they have the new things on OpenShift."'
  prefs: []
  type: TYPE_NORMAL
- en: —Ádám Sándor
  prefs: []
  type: TYPE_NORMAL
- en: Red Hat was the smart one who recognized Kubernetes early on and jumped on board.
    Now they're at the point where they can practically get rid of their own Linux
    distribution because they have the new things on OpenShift. Meanwhile, Ubuntu
    and Zeus are both trying to get on board, and the issue is that they are nowhere
    near the level where Red Hat is, and that's why Red Hat is already at the point
    where they can buy CoreOS, their biggest competition in this space.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: What do you prefer? Vanilla Kubernetes? Or do you prefer
    to layer on top of it?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: I do like OpenShift. If somebody is willing to pay for it,
    then both the support and security it provides are worth it. Kubernetes is like
    Linux. There are countless people committing to it and a lot going on, so nobody
    adheres to strict governance, which is completely fine. But let''s say you want
    to build an internal cloud for your bank. You want to be sure of its security,
    though of course nobody can guarantee it absolutely. The features and security
    that Red Hat provides with OpenShift make sense.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: If I''m not willing to pay, should I go with OpenShift Origin
    or Kubernetes?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: I think you have to choose what you value more. If it''s a
    fast pace with new features and completely open source, then you are going to
    want to go with Kubernetes, versus the slower pace, greater stability, and lack
    of openness that you get with OpenShift. OpenShift does, however, feature extra
    features like CI/CD pipelines and a nice GUI, which some might value. But then
    again, some might not. So that''s your trade-off. OpenShift Origin is open source,
    of course, but you''re not going to be fixing bugs in it.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: What comes to your mind?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: Cloud provider comparison.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: What do you think about the rest, outside of the three big
    guys? Microsoft Azure, for example.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: I don''t know the rest of the pack very well—but currently
    with any cloud provider I would look at the quality of their managed Kubernetes
    and serverless offerings, because you will need those to build modern software.
    But Google Cloud doesn''t seem to be able to capture a large market share even
    though their Kubernetes offering is the best out there.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I think a lot of readers will be shocked by the fact that
    there is an area in which Google is considered a small player.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: It''s weird, but true. Google really messed up in the public
    cloud space. A few years ago their strategy totally broke down. Funnily enough,
    Amazon''s new thing is how they also tried to skip containers and to define the
    future, which is the whole idea of lambdas. It''s a super-restricted programming
    model but has great scaling and is very cloud-native. Google actually kind of
    did the same with App Engine back in the day. They put all their bets on an attempt
    to go serverless, but it was simply too early. They were like, "we''re not doing
    this primitive stuff where you just spin up virtual machines because networking
    is just like VMware." They provide a proper programming model and a special database
    where you''ll be super-tied-into the cloud, but very cloud-native, very easy from
    the cloud providers'' perspective to run your application in a cheap way.'
  prefs: []
  type: TYPE_NORMAL
- en: It was a great idea, except people said, "I just want to go to a GUI, click
    and spin up a VM, and then do the exact same stuff I've been doing for 20-plus
    years." It's slowly changing now Docker containers are popular, because you can
    still do the same stuff you were doing before but in an ever-so-slightly different
    way.
  prefs: []
  type: TYPE_NORMAL
- en: '"Docker containers are popular because you can still do the same stuff you
    were doing before but in an ever-so-slightly different way."'
  prefs: []
  type: TYPE_NORMAL
- en: —Ádám Sándor
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Correct me if I''m wrong, but doesn''t Kubernetes sit on
    top of a provider and abstract whatever the provider is doing? Theoretically,
    if it''s stable, my Kubernetes is going to do the same things no matter if I''m
    running on Azure, AWS, or Google. But isn''t that a threat to the business? What
    will be a differentiator? What prevents me as a user from going from one to another?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: Price. If Kubernetes becomes that much of a commodity, then
    it''s just going to be the price. But there''s more to it than that. It''s also
    the services around it. How is the machine learning stuff? That''s where they
    are really going to differentiate and try to hook you with things like lambda,
    where they can also lock you into their code execution.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: But would they really care about additional services outside
    Kubernetes?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: Of course—there is a lot of stuff Kubernetes just doesn''t
    do. Databases, machine learning, DNS, and others. The ecosystem of the cloud provider
    absolutely matters. So does the depth of integration of that ecosystem with Kubernetes
    and the quality of the Kubernetes offering itself.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: The services offered are what differentiates or will differentiate
    one provider from another. I assume there will be no provider that''s better at
    all the services than any other. One will be better at machine learning, another
    will be better at big data, and stuff like that. But does this mean that the future
    consists of us running our cluster or clusters spread across multiple platforms?'
  prefs: []
  type: TYPE_NORMAL
- en: Does the future revolve around clusters?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: For a larger company that might make sense, but there is a pretty
    big cost involved because the whole management of the cloud itself varies. For
    example, there might be differences in the API or the UI.'
  prefs: []
  type: TYPE_NORMAL
- en: If you're on Google Cloud and you're running your applications on Google Kubernetes
    Engine, just managing the stuff that is not inside Kubernetes is not rocket science
    because the APIs and everything are pretty nice, but you will have plenty of code,
    terraform, or whatever was written that is dealing with that part. It's not that
    easy to just import part of your application over to Azure or AWS and write some
    CloudFormation and deal with the pricing and the whatnot. You have to be sufficiently
    big to be able to utilize these kinds of synergies, as long as you understand
    that it's not going to be easy to just use multiple providers.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: That''s a great point. I know that other contributors in
    this book have also raised the issue of vendor lock-in. But sadly, I know we''re
    out of time now. I just wanted to thank you for taking the time to talk to me
    today.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ádám Sándor**: No problem at all, I''ve really enjoyed it. Thank you.'
  prefs: []
  type: TYPE_NORMAL
