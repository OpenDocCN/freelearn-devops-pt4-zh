- en: Introducing Júlia Biró
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍 Júlia Biró
- en: Júlia is an experienced infrastructure and tooling engineer with interests in
    scalable systems, automation, and DevOps. Her experience at companies including
    Prezi, Ericsson, and currently Contentful give her a wealth of knowledge of how
    DevOps is integrated into modern IT practices. You can follow her on Twitter at
    `@nellgwyn21`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Júlia 是一位经验丰富的基础设施和工具工程师，专注于可扩展系统、自动化和 DevOps。她曾在 Prezi、爱立信等公司工作，现就职于 Contentful，这些经历使她对
    DevOps 如何融入现代 IT 实践有着丰富的理解。你可以在 Twitter 上关注她，用户名是`@nellgwyn21`。
- en: '**Viktor Farcic**: I know you''ve worked in DevOps for most of your career,
    Julia, so I was wondering if we could begin with an overview of your experiences
    with DevOps and how you got involved in it?'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我知道你在 DevOps 领域工作了大部分职业生涯，Julia，我想知道我们能不能从你在 DevOps 方面的经历入手，谈谈你是如何进入这个领域的？'
- en: The lightbulb moment
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 灵光一现
- en: '**Júlia Biró**: I was born and raised in Hungary and trained as a mathematician.
    I wanted to see if I could take my favorite subject from school and turn it into
    a career. That turned out to be not such a smart idea. I was not cut out to do
    math as a career, and I found myself being more interested in the more practical
    problems. Because of that, in the end, someone suggested that I might want to
    learn programming, and this is how I gravitated towards the IT sector.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**Júlia Biró**：我出生并成长在匈牙利，接受过数学训练。我想看看是否可以把我最喜欢的学科从学校带到职业生涯中。然而，这个想法后来证明并不明智。我并不适合做数学工作，反而对更实际的问题产生了更大的兴趣。正因如此，最终有人建议我学习编程，这也使我逐渐走向了
    IT 行业。'
- en: Once I was committed, I started training as a software engineer, and eventually,
    I was lucky enough to join a wonderful company called Prezi, where I was a very
    junior engineer placed on the infrastructure/DevOps team. It was as if a light
    bulb had switched on within me. I suddenly found myself knowing that this kind
    of engineering was what I wanted to do, and from that moment three and a half
    years ago, I would say I became a DevOps engineer.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我决定了，我开始接受软件工程师的培训，最终，我幸运地加入了一家名为 Prezi 的公司，在那里我是一名非常初级的工程师，加入了基础设施/DevOps
    团队。就像我脑海中突然亮起了一盏灯。我突然意识到，这种工程领域正是我想要从事的工作，从三年半前的那一刻开始，我可以说我成了一名 DevOps 工程师。
- en: The dictionary definition of DevOps
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps 的词典定义
- en: '**Viktor Farcic**: Now imagine that we''re looking up the word DevOps in the
    dictionary. What definition would we find?'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：现在假设我们正在查找 DevOps 这个词在字典中的定义。我们会找到什么定义呢？'
- en: '**Júlia Biró**: In my dictionary, you would find that DevOps is an idea of
    the functions and responsibilities of teams running services in a company, and
    the corresponding set of tools to make that happen. There is this fancy name for
    it, the DevOps toolchain, but it''s just a buzzword. It''s really whatever anyone
    wants to understand it as.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**Júlia Biró**：在我的词典里，DevOps 是指公司中负责运行服务的团队的职能和责任，以及实现这一目标的相应工具集。它有一个花哨的名字，叫做
    DevOps 工具链，但这只是一个流行词。实际上，它就是任何人愿意理解的东西。'
- en: '"DevOps is an idea of the functions and responsibilities of teams running services
    in a company, and the corresponding set of tools to make that happen."'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: “DevOps 是指公司中负责运行服务的团队的职能和责任，以及实现这一目标的相应工具集。”
- en: —Júlia Biró
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: —Júlia Biró
- en: '**Viktor Farcic**: Could you expand on what you mean about it being a buzzword?'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：你能否详细说明一下你所说的“流行词”是什么意思？'
- en: '**Júlia Biró**: It''s the idea that DevOps is a silver bullet that will make
    you successful, and that if you adopt DevOps, then everyone will be so much happier.
    But to really adapt to what DevOps is would be akin to changing three of your
    internal organs or becoming an animal. It''s a really deep structural change that
    is hard to make unless you are starting very small and have this idea of going
    towards that ideal from the very beginning. You also must have the flexibility
    to do it from the start. So, unless you have all of that, then it''s very hard
    to achieve, although there are examples of that happening.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**Júlia Biró**：人们常常认为 DevOps 是一种灵丹妙药，会让你取得成功，并且如果你采用了 DevOps，每个人都会变得更加快乐。但要真正适应
    DevOps 的理念，就像是要改变你体内的三个器官，或者变成一种动物。这是一种深刻的结构性变化，除非你从一开始就有这个理想并准备好从小规模着手，否则是很难实现的。你必须从一开始就具备这种灵活性。所以，除非你具备这些条件，否则很难做到，尽管也有成功的例子。'
- en: '**Viktor Farcic**: From what I understand, you worked at Ericsson, which is
    fairly big, before you worked in Prezi, which is comparatively relatively small.
    Did you see a difference?'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇克**：根据我了解的情况，您曾在相对较大的爱立信工作，然后又去了相对较小的 Prezi。在这两者之间，您看到了什么区别吗？'
- en: '**Júlia Biró**: Very much, though I don''t consider Ericsson, at least the
    parts where I worked, to be DevOps in any sense of the word, partly because the
    product that I was working on was very different. I don''t see how DevOps works
    with products that have 15-year life cycles and two-year release cycles, which
    is the case with software that runs on the kind of infrastructure Ericsson produces.
    I''m not saying it''s impossible. It''s just I haven''t seen it.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**朱莉亚·比罗**：非常同意，尽管我不认为爱立信（至少我工作过的部分）在任何意义上都是 DevOps，因为我当时工作的产品与 DevOps 完全不同。我看不出
    DevOps 如何适用于那些有15年生命周期和两年发布周期的产品，这正是爱立信生产的基础设施上运行的软件的情况。我不是说这不可能，只是我没有见过。'
- en: What I have seen up close though is that leaders in DevOps practices seem to
    have adopted the DevOps mentality from the point when their company was very small,
    and as a result, they grew with determination. But it isn't that they decided
    to change a big thing into DevOps.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 但我确实亲眼看到，DevOps 实践中的领导者似乎从公司还很小的时候就开始采用 DevOps 心态，因此他们在成长的过程中带着这种决心。但并不是他们决定把一个大公司转变为
    DevOps。
- en: '**Viktor Farcic**: Your profile says that you enable teams to take full ownership
    of their product. What do you mean by that?'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇克**：您的个人资料中说，您帮助团队完全拥有他们的产品。您是什么意思呢？'
- en: '"There''s this concept in DevOps that the team should own their service, from
    writing and testing the code to running it, and to the point where they should
    actually react if something is not functioning well."'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: “在 DevOps 中有一个概念，团队应该拥有他们的服务，从编写和测试代码到运行它，甚至在出现问题时，他们应该能及时反应。”
- en: —Júlia Biró
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: —朱莉亚·比罗
- en: '**Júlia Biró**: There''s this concept in DevOps that the team should own their
    service, from writing and testing the code to running it, and to the point where
    they should actually react if something is not functioning well. This is an idea
    of DevOps that I think is benefiting companies that are doing that.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**朱莉亚·比罗**：在 DevOps 中有一个概念，团队应该拥有他们的服务，从编写和测试代码到运行它，甚至在出现问题时，他们应该能及时反应。这是我认为对那些执行这一理念的公司有益的
    DevOps 思维。'
- en: The first prerequisite for that is that a service needs to be ownable, meaning
    in size and in complexity. It should be small enough for a reasonable team to
    own it, which is true for microservices. Then the idea is that one team should
    do everything, not that someone writes some code, and then separately someone
    else tests it, another person deploys and runs it, while a third team wakes up
    in the middle of the night when it breaks. I believe most companies will benefit
    if they move towards the full ownership model because then teams can be more active
    and creative in developing new things, and at the end of the day, they will have
    better quality products because there is less friction between the teams and a
    bunch of tools that can help them make that happen.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个前提的第一个要求是，服务需要是可拥有的，这意味着在规模和复杂性上都能被一个合理的团队所拥有。它应该足够小，以便一个合理的团队能够管理它，这对于微服务来说是成立的。接下来的想法是，一个团队应该负责所有工作，而不是某个人写代码，然后另一个人单独测试，另一个人部署并运行，第三个团队则在半夜被叫醒，当服务出问题时再来解决。我相信，如果公司转向完全拥有模式，大多数公司都会受益，因为那样团队能够更积极、更有创造性地开发新东西，最终，他们会有更高质量的产品，因为团队之间的摩擦减少了，而有一堆工具可以帮助他们实现这一点。
- en: '**Viktor Farcic**: I assume that you''re not talking about a 100-person team.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇克**：我猜您不是在谈论一个100人的团队吧？'
- en: '**Júlia Biró**: To me, a team is a number of people who can reasonably cooperate
    in an organic way without someone telling them what to do. From my experience,
    I don''t see how 100 people can do this together. Again, I''m not saying it is
    impossible, but I have no experience with teams this size.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**朱莉亚·比罗**：对我来说，一个团队是一个能够在没有人告诉他们做什么的情况下，以有机的方式合理合作的人数。从我的经验来看，我看不出100个人如何能一起做到这一点。当然，我不是说这不可能，但我没有过这么大团队的经验。'
- en: '**Viktor Farcic**: So, in that case, you have relatively small teams, but with
    a greatly increased amount of expertise they need to cover. Because that one small
    team needs to be capable of testing and deploying, along with all kinds of other
    things. How do those teams get that knowledge? When I speak with some teams, all
    I get from them is that "My people know how to write Java getters and setters."'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：在这种情况下，你的团队规模相对较小，但他们需要掌握的专业知识却大大增加。因为这个小团队需要具备测试和部署的能力，还要处理各种其他事务。那些团队是怎么获取这些知识的呢？当我和一些团队沟通时，他们给我的回答仅仅是：“我的团队知道如何编写
    Java 的 getter 和 setter。”'
- en: '**Júlia Biró**: Maybe you just give the team a piece of paper and tell them
    to build a Turing complete machine on that and go from there. Just joking! There''s
    this idea of a full stack engineer, who can write both frontend code and backend
    code in a service client architecture. But the key here is to provide structured
    and well-documented tooling that people can actually use. It''s the same way that
    you learn to use your washing machine and your coffee maker, or in our case, how
    you learn to use your CI, and your deployment tools. You need to make them easy,
    well documented, and well maintained.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**朱莉娅·比罗**：也许你可以给团队一张纸，让他们在上面构建一个图灵完备的机器，然后从那里开始。开个玩笑！有一种全栈工程师的概念，他们能够编写前端代码和后端代码，在服务客户端架构中都能胜任。但关键在于提供结构化和良好文档化的工具，团队才能真正使用这些工具。就像你学会使用洗衣机和咖啡机一样，或者在我们的案例中，如何学会使用
    CI 和部署工具。你需要让它们易于使用，文档齐全，并且得到良好的维护。'
- en: What the DevOps or infrastructure team does is take away the complexity and
    provide DevOps as a service to the company, and to the other teams who are still
    doing the owning. The teams are still in ownership of what gets deployed when
    it gets deployed, and where it will be deployed, but they don't need a lot of
    access or knowledge to do that.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 或基础设施团队的工作是去除复杂性，并将 DevOps 作为服务提供给公司，以及其他仍在负责所有权的团队。团队仍然拥有部署的内容、部署的时间以及部署的地点，但他们不需要大量的访问权限或知识就能做到这一点。
- en: There are areas where it's easier to do this because the CI systems are very
    clickable and the UI is very good. Admittedly, creating tools with good user interfaces
    for other tasks take more effort. You can create a deployment system where you
    click a button and it's deployed, then you click another button and it's revoked.
    On the other hand, there are tasks where UI is not enough, and your team will
    need to acquire new knowledge. For example, in configuration management, if you
    want your teams to handle the environment that their service is running, they'll
    need to learn some kind of configuration management tool, which is usually, "Oh
    my god, I need to understand what an OS is*," which will definitely require a
    bit more knowledge than just writing JavaScript, unless you go serverless with
    Lambda (*Since the recording of this interview, the pressure for teams to understand
    and manage running environments have seriously decreased, owing to the spreading
    of containerized platforms and serverless.).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有些领域做这件事相对容易，因为 CI 系统非常易于点击，UI 也做得非常好。诚然，为其他任务创建具有良好用户界面的工具需要更多的努力。你可以创建一个部署系统，点击一个按钮就能部署，再点击另一个按钮就能撤销部署。另一方面，有些任务是
    UI 无法满足的，团队需要获得新的知识。例如，在配置管理方面，如果你希望你的团队管理他们服务运行的环境，他们需要学习某种配置管理工具，通常这意味着，“天哪，我需要理解操作系统是什么*”，这显然需要比写
    JavaScript 更多的知识，除非你采用无服务器的 Lambda 方式（*自从本次访谈录制以来，团队理解和管理运行环境的压力已经大大减少，这得益于容器化平台和无服务器技术的普及。*）。
- en: '**Viktor Farcic**: The thing is, when you go serverless with something like
    Lambda, there is no turning back.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：问题是，当你选择 Lambda 等无服务器技术时，就没有回头路了。'
- en: '**Júlia Biró**: But soon, serverless and Lambda will have their own complex
    management tooling. There is always this emerging layer of hiding complexity and
    the need to control that by building very, very complex things from that and then
    that itself becomes complex.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**朱莉娅·比罗**：但很快，无服务器和 Lambda 会有自己复杂的管理工具。总会有这样一层不断出现的隐藏复杂性的需求，通过构建非常非常复杂的东西来控制这些复杂性，而这些复杂的东西本身也会变得更加复杂。'
- en: '**Viktor Farcic**: Now that you''re a site reliability engineer, do you find
    that there''s a difference between a site reliability engineer and a DevOps engineer?'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：既然你是一个站点可靠性工程师，你认为站点可靠性工程师和 DevOps 工程师之间有什么区别吗？'
- en: Site reliability engineering versus DevOps
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 站点可靠性工程与 DevOps
- en: '**Júlia Biró**: In my understanding, site reliability engineering is a subset
    of DevOps engineering, a very specific subset with very different goals. A DevOps
    engineer''s job is to make the other teams effective and to help this full ownership
    principle, while a site reliability engineer is a very simple metric that defines
    the success of my work, which is the uptime of the site.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**Júlia Biró**：根据我的理解，站点可靠性工程是 DevOps 工程的一个子集，是一个非常特定的子集，具有非常不同的目标。DevOps 工程师的工作是让其他团队更加高效，并帮助实施完全所有权原则，而站点可靠性工程师的工作是通过一个非常简单的指标来定义我工作的成功，这个指标就是站点的正常运行时间。'
- en: '"A DevOps engineer''s job is to make the other teams effective and to help
    this full ownership principle."'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: “DevOps 工程师的工作是让其他团队更加高效，并帮助实施完全所有权原则。”
- en: —Júlia Biró
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: —Júlia Biró
- en: In my job, I provide the tools for the other teams so that they can operate
    their systems in a way that achieves high availability. My toolkit provides them
    with good tooling and good guidelines for testing, monitoring, alerting, easy
    deployment, and easy reversion. At the end of the day, I'm making sure that they
    themselves can run their services in a reliable way by owning that knowledge—from
    how to make good tests all the way to knowing how to handle incidents in an effective
    way.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的工作中，我为其他团队提供工具，以便他们能够以实现高可用性的方式运营他们的系统。我的工具包为他们提供了良好的工具和测试、监控、告警、简易部署以及简单回退的良好指南。归根结底，我确保他们自己能够以可靠的方式运行他们的服务，掌握这一知识——从如何进行良好的测试到如何有效处理事故。
- en: '**Viktor Farcic**: On the one hand, it would be managing tools, but on the
    other hand, it would be teaching.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：一方面，这将是管理工具，另一方面，它也将是教学。'
- en: '**Júlia Biró**: That''s exactly it! A DevOps engineer''s job is to provide
    not only tools but also the best practices for teams. For example, it''s within
    the DevOps realm to provide a good local development environment or a good testing
    environment for the organization.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**Júlia Biró**：正是这样！DevOps 工程师的工作不仅仅是提供工具，还需要为团队提供最佳实践。例如，在 DevOps 范畴内，提供一个良好的本地开发环境或一个良好的测试环境给组织。'
- en: As a site reliability engineer, I'm not that interested in the local development
    environments; that is not my realm. Where I am now, I haven't even seen our local
    development environment, and I've been there for five months now. But it is very
    much within my focus what kind of monitoring they should be doing. Monitoring
    should automatically be installed for a service. In fact, I have a constant barrage
    of questions that I should be answering, like how do I empower the other teams
    to create their own monitoring? How can they set up alerts very easily? How can
    they create good dashboards? What makes dashboards good? How is it going to be
    always available and providing the right information?
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 作为站点可靠性工程师，我对本地开发环境并不感兴趣；那不是我的范畴。就我目前所在的地方来说，我甚至都没有见过我们的本地开发环境，而我已经在那里待了五个月了。但我非常关注的是他们应该进行什么样的监控。监控应该自动为服务安装。事实上，我总是被一连串的问题困扰，我需要回答，比如：如何赋能其他团队让他们创建自己的监控？他们如何能够轻松设置告警？他们如何能够创建良好的仪表盘？什么样的仪表盘才算好？它如何才能始终可用并提供正确的信息？
- en: You can only expect teams to run their service responsibly if they have tools
    for that, while also having all the know-how and the concepts around it. It's
    very much my job to provide that. To give you an example, I am pushing right now
    for my company to adopt a new, more effective process for incident handling, because
    if we handle incidents better, then it means those incidents are going to be shorter,
    which is going to raise our availability and generally improve the company's uptime.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当团队拥有相关工具，并且具备所有相关的知识和概念时，才能期望他们负责地运行自己的服务。这是我的工作之一。举个例子，我目前正在推动公司采用一种新的、更有效的事故处理流程，因为如果我们处理事故的方式更好，那么这些事故就会更短，从而提高我们的可用性，并总体上改善公司的正常运行时间。
- en: '**Viktor Farcic**: Correct me if I''m wrong, but if the development teams have
    the ultimate responsibility for what they''re doing, do they have a say or a choice
    in the sense of, for example, making the decision of whether or not to use Kubernetes?
    I mean it doesn''t matter really if the team says no, it''s my responsibility,
    I''m going to use something else. Is that their choice?'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：如果我理解正确的话，但如果开发团队对他们所做的事情负有最终责任，那么他们是否可以在某种程度上拥有决定权或选择权，比如是否使用
    Kubernetes？我的意思是，实际上如果团队说“不，这归我负责，我要用别的东西”，那是否是他们的选择？'
- en: '**Júlia Biró**: There are multiple points of view here. One is that the homogeneity
    of the stack and in the tools is usually beneficial in a company because it enables
    cross-pollination, mobility between teams, building and spreading of knowhow and
    expertise, and code writing. So, all of these are pointing towards it being better
    if we are all speaking the same language.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**Júlia Biró**：这里有多个观点。一个观点是，技术栈和工具的统一性通常对公司有益，因为它能够促进跨团队的合作，团队之间的流动性，知识和专业技能的积累与传播，以及代码编写。因此，所有这些因素都表明，如果我们都使用相同的语言，会更好。'
- en: But on the other hand, with the heterogeneity of tasks we have, you might find
    that there is a better tool for the job. In general, the sense of freedom (and
    autonomy) is not to be underestimated. The approaches that I saw working well
    have one or two standard stacks that are supported. If you choose a different
    tool, then it's on you to get to the same level of quality, but if your team has
    the time for it, then why not? Right now, at Prezi, there are two standard stacks.
    There is tooling, monitoring, testing, whatever around it, and if you choose to
    do another stack for a user-facing service, then you need to build, for example,
    inter-service communication, client libraries, and so on.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 但另一方面，考虑到我们任务的异质性，你可能会发现有更合适的工具来完成某项工作。一般来说，自由感（和自治）是不容小觑的。我看到的有效做法是有一到两个标准技术栈可以支持。如果你选择了不同的工具，那么就需要你自己确保达到相同的质量水平，但如果你的团队有时间来做，那为什么不呢？目前，在Prezi公司，有两个标准技术栈。有相关的工具、监控、测试等等，如果你选择为用户服务创建另一个技术栈，那么你需要自己构建例如服务间通信、客户端库等内容。
- en: 'The other thing that is important is to have a production-readiness checklist,
    with very specific acceptance criteria. You can help people by giving them an
    easy, simple choice: diverging from the standard has an expense. You have the
    teams pay for it and not the whole company, and the rest is just quality and process
    control in the classic sense of the word. Do whatever you want, just make sure
    you meet the criteria, and your tools are compatible, and then it''s okay.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的事情是要有一个生产准备清单，并且包含非常具体的验收标准。你可以通过给他们一个简单的选择来帮助他们：偏离标准是有成本的。你让团队为此付出，而不是整个公司，剩下的就是经典意义上的质量和过程控制。做任何你想做的事情，只要确保你符合标准，工具是兼容的，那就可以了。
- en: '**Viktor Farcic**: So what would you say if I said that it''s as if you could
    choose your responsibility, but it''s in somebody else''s interest to actually
    make it tempting and interesting for you to use, to the point where you don''t
    really want to move away from it much?'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：如果我说，这就像你可以选择你的责任，但从某种意义上讲，实际上是为了让你使用它而使其变得具有吸引力和趣味性，直到你不太想偏离它，你会怎么说？'
- en: '**Júlia Biró**: It doesn''t mean that you are not going to move away, because
    if it''s very important for your user experience that you are actually going to
    provide tooling around the third stack, then other people will start to use it.
    It''s just that the main goal you want to achieve is that people can very easily
    create a new service and own it, and so you want to spare them the work that they
    don''t need to do.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**Júlia Biró**：这并不意味着你就不能偏离，因为如果用户体验非常重要，且你实际上需要围绕第三方技术栈提供工具，那么其他人也会开始使用它。只是你想要实现的主要目标是让人们可以轻松地创建新服务并拥有它，因此你希望减少他们不需要做的工作。'
- en: This is what all the standard stacks and tooling are there for, but also the
    know-how for the same tool. You don't want people to solve the same problem of
    what is the best way to test or monitor a service 60 times independently of each
    other. What you want to do is give them good solutions and if they don't work,
    then they can look for their own solutions or they can raise the problem with
    you. But your end goal is to reduce friction and reuse knowledge wherever you
    can.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是所有标准技术栈和工具存在的意义，当然还有对同一工具的技术积累。你不希望人们独立地重复解决同样的问题，比如测试或监控服务的最佳方式60次。你想做的是给他们提供好的解决方案，如果这些方案不起作用，他们可以自己寻找解决方案，或者把问题反馈给你。但你的最终目标是减少摩擦，并在可能的地方重复利用知识。
- en: '**Viktor Farcic**: I''m curious to know, where are the women in DevOps? I don''t
    see them much in the field.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我很好奇，DevOps中的女性在哪里？我在这个领域很少看到她们。'
- en: Women in DevOps… or the lack thereof
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps中的女性……或者说缺乏女性
- en: '**Júlia Biró**: Well, you''re talking to one! That being said, historically
    speaking since the mid-1980s, the ratio of women in STEM and tech fields has dropped.
    There''s this great article (https://www.npr.org/sections/money/2014/10/21/357629765/when-women-stopped-coding)
    by the National Public Radio about why that''s the case, and I would really recommend
    it to any of your readers.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**Júlia Biró**：嗯，你说的就是我！话说回来，从历史上看，自1980年代中期以来，女性在STEM和科技领域的比例有所下降。美国国家公共广播电台（NPR）有一篇很棒的文章（https://www.npr.org/sections/money/2014/10/21/357629765/when-women-stopped-coding），讨论了为什么会出现这种情况，我真的推荐给你任何读者。'
- en: 'But nowadays, we find that there is a rising tendency, partly owing to the
    attention of diversity gaps and partly owing to the will of the industry, for
    the other half of the population to try to become engineers too. They realized
    that the same ratio of women is going to be good at programming. But here''s the
    thing: currently, the easiest way to get into tech and code learning is via the
    frontend. From my own experience, when I first tried to program it was just HTML
    and CSS, which is not even programming.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 但如今，我们发现有一种上升的趋势，部分原因是由于多样性差距引起的关注，部分原因是行业的意愿，另一半人口也开始尝试成为工程师。人们意识到，女性的比例同样能在编程中表现出色。但问题是：目前进入科技和编程学习的最简单方式是通过前端。从我自己的经验来看，当我第一次尝试编程时，只是HTML和CSS，这甚至不能算作编程。
- en: '"The veterans in DevOps used to be real system administrators crawling between
    servers and configuring routers, which is not what they do anymore. But new people
    are coming from other areas of software engineering and IT."'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: “DevOps的老手们曾经是实际的系统管理员，穿梭于服务器之间，配置路由器，而如今他们已经不再做这些了。但现在的新人成员来自其他软件工程和IT领域。”
- en: —Júlia Biró
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: —Júlia Biró
- en: Most of the incentives that are inviting women into tech are starting in the
    frontend, where they'll be introduced to frontend or dynamic websites, and languages
    and frameworks like HTML+CSS, JavaScript, Python+Django, and Ruby on Rails. Why
    those languages? Probably because they're the easiest to try at home since you
    can become a very good frontend developer at your kitchen table. But infrastructure
    orchestration is not something you can do without some resources, and some problems
    only appear over a certain scale. It's a field that just needs some time for people
    to see into.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 目前邀请女性进入科技领域的大部分激励措施都从前端开始，她们会接触到前端或动态网站，以及像HTML+CSS、JavaScript、Python+Django和Ruby
    on Rails这样的语言和框架。为什么是这些语言？可能是因为它们最容易在家里尝试，因为你可以在厨房桌子上成为一名非常优秀的前端开发者。但基础设施的编排并不是你没有一些资源就能做的，且某些问题只会在一定规模下显现出来。这是一个需要时间让人们逐渐理解的领域。
- en: The veterans in DevOps used to be real system administrators crawling between
    servers and configuring routers, which is not what they do anymore. But new people
    are coming from other areas of software engineering and IT, and simply put, most
    of the women who are present in the field are predominantly at the beginning of
    their careers, so they are more on the frontend side, but they are seeping in
    slowly and steadily. Actually, it's not just me saying that. There's this great
    developer survey from Stack Overflow (https://insights.stackoverflow.com/survey/2017#developer-profile-developer-role-and-gender)
    which shows this.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps的老手们曾经是实际的系统管理员，穿梭于服务器之间，配置路由器，而如今他们已经不再做这些了。但现在的新人成员来自其他软件工程和IT领域，简单来说，当前在这一领域的女性主要处于职业生涯的起步阶段，所以她们更多的是在前端领域，但她们正缓慢且稳步地渗透其中。实际上，不仅仅是我这么说。Stack
    Overflow有一份很棒的开发者调查（https://insights.stackoverflow.com/survey/2017#developer-profile-developer-role-and-gender），它展示了这一点。
- en: '**Viktor Farcic**: The reason I asked is that I know you''re doing a lot of
    out-of-office activities with the likes of Rails Girls and Django Girls.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我之所以问这个问题，是因为我知道你正在与Rails Girls和Django Girls等组织做很多办公室外的活动。'
- en: '**Júlia Biró**: The various events I''m volunteering for are all aimed at inviting
    more women into tech. I''m working with organizations that are very emphatically
    extending this invitation, it''s not about teaching skills to girls and girls
    only; it''s more about letting the girls or women know that they should try tech
    because it''s a fun thing to do.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**Júlia Biró**：我参与的各种志愿活动都是为了邀请更多女性进入科技领域。我正在与一些非常明确提出这一邀请的组织合作，这不仅仅是为了教女孩技能；更重要的是让女孩或女性知道，她们应该尝试科技，因为这是一个有趣的事情。'
- en: I do this in all kinds of ways, such as participating in Rails Girls and Django
    Girls, which are open source workshops for women. These are one-day workshop events
    for building a dynamic web app from scratch attended by people who usually have
    zero previous knowledge of programming. The fun comes into it by the fact that
    at the end of the day they've created something that that they can actually show
    their families because it's deployed on the internet on real servers. The goal
    of these workshops is to give this feeling of how it works when you create something
    with technology. After attending these workshops, some women I know have actually
    changed their careers, and learned Python or Rails, and eventually became professional
    developers who now have totally legit careers in tech.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我以各种方式参与其中，例如参加Rails Girls和Django Girls，这些是面向女性的开源工作坊。这些是为期一天的工作坊活动，旨在从零开始构建动态网页应用，参与者通常没有编程基础。趣味性来自于，到了最后一天，他们创建了一个能够展示给家人的项目，因为它已部署在互联网上的真实服务器上。这些工作坊的目标是让人们体验到，使用技术创造某样东西是如何运作的。参加这些工作坊后，我认识的一些女性实际上改变了职业方向，学习了Python或Rails，最终成为了职业开发者，现在她们在科技行业有了完全合法的职业生涯。
- en: Another area where I'm working is taking the same concepts but aiming them at
    kids. It's said that by age 13, a girl realizes that math and technology aren't
    girly things. In fact, this article (https://www.theguardian.com/society/2017/sep/20/children-are-straitjacketed-into-gender-roles-in-early-adolescence-says-study)
    is a very important read about how we're straitjacketing gender roles in the early
    teenage years. What these programs are trying to do is get to these girls before
    that. We're trying to give them a very good experience with technology by creating
    stuff, where they learn that, *Wow, this can be for me*. If they happen to enjoy
    it, great, and if they don't, then no big deal; all they did was spend a day in
    a workshop with 15 other people and visited a cool office.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个我参与的领域是将相同的概念应用于孩子们。有人说，女孩到13岁时就意识到数学和技术并不是“女孩的事情”。事实上，这篇文章（https://www.theguardian.com/society/2017/sep/20/children-are-straitjacketed-into-gender-roles-in-early-adolescence-says-study）是关于我们在早期青春期如何将性别角色固定化的非常重要的阅读材料。这些项目的目标是希望在这一点之前接触到这些女孩。我们试图通过创作让她们获得与技术的非常好体验，让她们学到，*哇，原来这也可以是属于我的*。如果她们喜欢，那就太棒了；如果她们不喜欢，那也没关系；她们只不过是和其他15人一起度过了一天的工作坊，并参观了一个很酷的办公室。
- en: '**Viktor Farcic**: Have you ever tried anything that aimed to get girls involved
    with tech from a high school age so that they could carry it through to a college
    degree?'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：你有没有尝试过一些旨在让女孩从高中阶段开始接触技术，这样她们可以将这种兴趣延续到大学学位的项目？'
- en: '**Júlia Biró**: Yes! There was a version of the kid''s workshop where we did
    a 10-week course in Processing (https://processing.org/) for high school girls.
    I''m very proud that some of my former pupils from that course are already training
    as engineers.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**Júlia Biró**：是的！我们曾经举办过一个儿童工作坊版本，进行了一项为期10周的Processing（https://processing.org/）课程，面向高中女生。我非常自豪，因为一些曾经是我的学生的女孩，现在已经在接受工程师培训了。'
- en: But it's important to note that it's not just women who are not getting this
    invitation to join the tech world. I have also taught at art universities because
    I think that programming can be a creative tool in art, and I wanted to give this
    tool to artists. During this period, we were teaching introductory programming
    courses to artists, and some of them really liked it, and some of them even tried
    to use it in their work.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 但需要注意的是，不仅仅是女性没有机会加入科技行业。我也曾在艺术大学教授过课程，因为我认为编程可以成为艺术创作的一个工具，我想将这个工具传授给艺术家。在这段时间里，我们为艺术家教授了入门编程课程，其中一些人非常喜欢它，甚至尝试在他们的作品中使用它。
- en: The organization that I'm working with in Hungary is Skool (skool.org.hu)—a
    project of the Technology Education Foundation—which works with young girls. They
    have a program where they are working with kids in children's homes, which is
    amazing because they're usually a group of young people who don't get an invitation
    into tech, but now they are getting 10-week courses in the children's home.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我在匈牙利所合作的组织是Skool（skool.org.hu）——一个由技术教育基金会支持的项目，专注于与年轻女孩合作。这个项目有一个计划，他们与儿童之家中的孩子们合作，这非常了不起，因为这些孩子通常是没有机会接触到技术的群体，而现在他们正在儿童之家里接受为期10周的课程。
- en: '**Viktor Farcic**: That''s really brilliant.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：真是太棒了。'
- en: '"Diversity does not just have to be about getting more women in the field.
    It''s also about having more people from diverse backgrounds, like reaching out
    to underprivileged children."'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: “多样性不仅仅是让更多女性进入这个领域。这也包括让更多来自不同背景的人参与进来，比如帮助那些贫困儿童。”
- en: —Júlia Biró
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: —朱莉娅·比罗
- en: '**Júlia Biró**: It really is, because diversity does not just have to be about
    getting more women in the field. It''s also about having more people from diverse
    backgrounds, like reaching out to underprivileged children. Tech can be a social
    mobility fast elevator. Within a very small amount of time you can grow your earning
    potential a lot. All you need is a laptop and a connection to the internet, and
    you can become a wonderful engineer if you have the talent for it. But some people
    don''t even have access to those basic tools. Trying to give access to those entry-level
    tools is part of the job. But it is also important to recognize that being underprivileged
    has serious negative impact on the skills necessary for learning, so it is not
    just a laptop that is missing.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**朱莉娅·比罗**：的确如此，因为多样性不仅仅是让更多女性进入这个领域。这也包括让更多来自不同背景的人参与进来，比如帮助那些贫困儿童。技术可以是社会流动的快速电梯。在非常短的时间内，你的收入潜力可以大大提高。你只需要一台笔记本电脑和一条互联网连接，如果你有天赋，你就可以成为一名出色的工程师。但有些人甚至没有这些基本工具的使用权。为那些处于入门阶段的人提供工具的机会是工作的一部分。但同样重要的是要认识到，处于贫困状态会对学习所需的技能产生严重的负面影响，所以缺失的可不仅仅是笔记本电脑。'
- en: '**Viktor Farcic**: Moving on, what do you think will happen next in tech? If
    you were to predict the future, what are the bottlenecks of today that need to
    be solved, and what are the major obstacles you see us facing today?'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔西奇**：接下来，你觉得技术会发生什么变化？如果你要预测未来，今天有哪些瓶颈需要解决，你认为我们当前面临的主要障碍是什么？'
- en: The future of tech and the challenges we face
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术的未来与我们面临的挑战
- en: '**Júlia Biró**: This might sound naive, but complexity is one of the biggest
    obstacles that we''re going to face in the near future. Even when we are using
    standard tooling, our infrastructure is made up of so many different pieces, and
    we want to do it right. We want to document it all anyway, so we do it in Terraform.
    It''s just complexity itself.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**朱莉娅·比罗**：这可能听起来有些天真，但复杂性是我们在不久的将来将要面临的最大障碍之一。即使我们使用的是标准工具，我们的基础设施也由许多不同的部分组成，而我们希望能够做到正确。我们无论如何都想记录这些内容，因此我们使用Terraform。它本身就是一种复杂性。'
- en: My gut feeling is that Terraform is a ticking bomb because it's hard to make
    and test modifications on it, and it's just as equally hard to find your way around
    it. Basically, Terraform is a new programming language that has multiple bugs.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我的直觉是，Terraform是一个定时炸弹，因为它很难进行修改和测试，找到合适的使用方法也同样困难。基本上，Terraform就像是一种新的编程语言，存在很多漏洞。
- en: You can also experience complexity when you want to make modifications to a
    service in a microservices environment. At Contentful, although we have a local
    development environment, I needed to start six surrounding services to run locally
    so the servers would start and I could test it. This complexity is related to
    what the human mind can hold, which is why I think this is now a bottleneck.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想对微服务环境中的某个服务进行修改时，你也会遇到复杂性。在Contentful，尽管我们有本地开发环境，但我需要启动六个相关服务才能在本地运行，以便服务器启动并进行测试。这种复杂性与人类大脑能承受的负荷有关，这也是为什么我认为它现在是一个瓶颈。
- en: Scaling used to be a bottleneck 15 years ago, but not anymore. If you do it
    well then with reasonable limits and with infrastructure scaling, it's actually
    a very, very easy thing now; it's just the pace in which technologies change that
    is creating a bottleneck now. Once you become a certain size, changing technology
    is very, very difficult. But this is not a new problem. People will be stuck on
    Kubernetes the same way they were stuck on Java.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 15年前，扩展性是一个瓶颈，但现在不是了。如果你做得好，在合理的限制和基础设施扩展的情况下，现在其实是非常非常容易的；现在的瓶颈实际上是技术变化的速度。一旦你达到一定规模，改变技术就变得非常非常困难。但这并不是一个新问题。人们将像曾经困于Java一样困于Kubernetes。
- en: '**Viktor Farcic**: You mentioned the pace of—I don''t know whether to call
    it new stuff being developed or innovation—but the pace has increased. How do
    you follow that?'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔西奇**：你提到了——我不知道该称之为新事物的开发还是创新——但发展速度加快了。你是如何跟上的呢？'
- en: '**Júlia Biró**: I actually feel bad about not following it.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**朱莉娅·比罗**：实际上，我对没有跟上这个进度感到有些愧疚。'
- en: '**Viktor Farcic**: But if the pace is increasing, are we going to become superhumans?'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔西奇**：但是如果发展速度在加快，我们是不是要变成超人了？'
- en: '**Júlia Biró**: I don''t know, and that''s why I''m saying it''s a bottleneck.
    As new problems and technologies arise, technologies themselves become more quickly
    outdated. But at the same time the next and better tools are becoming available
    at a faster pace. Though this actually has a huge benefit, because no one has
    to have more than two years'' experience with a given tool, and so it doesn''t
    really matter whether you''re in the field for two years or 20 years. It means
    that at the end of the day it''s going to be increasingly easier to access this
    field.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**朱莉娅·比罗**：我不知道，这就是我说它是瓶颈的原因。随着新问题和新技术的出现，技术本身变得更快过时。但与此同时，下一代更好的工具也在以更快的速度出现。尽管如此，这实际上有一个巨大的好处，因为没有人需要在某个工具上拥有超过两年的经验，所以无论你在这个领域工作了两年还是20年，实际上都没有太大关系。这意味着，最终，进入这个领域将变得越来越容易。'
- en: For example, I don't need to have been a hands-on system administrator for 10
    years to become an effective infrastructure or site reliability engineer. Unlike
    me, many of my colleagues, who have 10 more years' experience than me, half of
    that as systems administrators running the internet in the golden days. It'll
    probably be a psychological limit to how fast companies can adopt new technologies,
    and it will not be faster than that. But regarding your question about the learning,
    It's like everything else. If people put their lives to it and spend eight hours
    working and then another eight reading about the next thing, then they're going
    to be super good at it.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我不需要做十年的实际系统管理员才能成为一个有效的基础设施或站点可靠性工程师。不像我，许多同事比我多10年经验，其中一半是在互联网黄金时代担任系统管理员。公司能够采用新技术的速度可能会受到心理限制，而且不会比这个速度更快。但是关于你提到的学习问题，就像其他一切一样。如果人们把精力投入其中，每天工作八小时，然后再花八小时阅读下一个东西，那么他们就会变得非常擅长。
- en: '**Viktor Farcic**: Does that mean if a company is able to follow the trends,
    then people working there need to have free time for studying and learning?'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇克**：这是否意味着，如果一家公司能够跟上趋势，那么在那里工作的人需要有时间来学习和深造？'
- en: '**Júlia Biró**: Of course! I always say that my job is to understand the new
    thing, and then automate it away. All the problems that I have ever solved should
    be automated or at least documented, so I don''t need to figure the answer out
    again. Preferably, if I have the time, automated, so no one else has to think
    about them again. And of course there is time for things like conferences because
    the rest is just programming, which, of course, is not just programming but also
    a skill. It''s always going to be another layer of abstraction and another set
    of complexity that we will need to handle and get the tools for.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**朱莉娅·比罗**：当然！我总是说，我的工作就是理解新事物，然后把它自动化。所有我曾经解决过的问题都应该被自动化，或者至少被记录下来，这样我就不需要再次寻找答案。如果有时间，最好是自动化，这样就没有人需要再去考虑它们。当然，也有时间去参加像会议这样的活动，因为其余的只是编程，而编程当然不仅仅是编程，它也是一种技能。我们总是需要应对另一个抽象层次和另一组复杂性，并为此准备好工具。'
- en: The inevitability of increasing complexity
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复杂性增加的必然性
- en: '**Viktor Farcic**: Does that mean increasing complexity is unavoidable?'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇克**：这是否意味着复杂性的增加是不可避免的？'
- en: '**Júlia Biró**: Exactly, just evolution.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**朱莉娅·比罗**：完全正确，这就是进化。'
- en: '**Viktor Farcic**: I like that one.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇克**：我喜欢这一点。'
- en: '**Júlia Biró**: Here''s the thing. Once you can do something, you put two of
    those together, and then by the time you have put five together, you feel like,
    "Oh, this is terrible," and you automate it. Then by the 22nd time you realize
    that you want that particular instance to be slightly different and that you want
    to put an `if` there. You basically want to control it with variables in a full
    programming language and then, bam! You have created another layer of complexity.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**朱莉娅·比罗**：事情是这样的。一旦你能做某件事，你把两个这样的事情组合起来，然后等到你把五个组合在一起时，你就会觉得，“哦，这太糟糕了”，然后你就开始自动化它。到第22次时，你意识到你想让那个特定的实例略微不同，并且你想在那里加一个`if`。你基本上想用变量来控制它，使用完整的编程语言，然后，轰！你创造了另一个复杂度层次。'
- en: But once you have a programming language with it, there's nothing that's going
    to stop you from having 5,000, instead of 50\. It's easy to say, "Here I have
    another layer." After that, all you need to do is teach everyone about that and
    put that into the code, and from there, code review and from there move onto testing
    and developing an entire environment for that.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 但一旦你有了编程语言，就没有什么能阻止你从50个增加到5000个。很容易说，“这里我有了另一个层次。”之后，你需要做的就是教会每个人这些内容，并将它们写进代码，然后进行代码审查，从那里进入测试，并开发出一个完整的环境。
- en: '**Viktor Farcic**: You mentioned the complexity of legacy applications. Is
    there a moment when it doesn''t make sense to maintain something anymore? For
    instance, say you''ve got a legacy system written in COBOL or Java. If you want
    to reduce complexity at some point in time, you need to start over. But at the
    same time, nobody wants to throw away five years'' worth of applications.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：你提到了遗留应用的复杂性。是否有一种情况，在某一时刻不再维护某些东西是合乎逻辑的呢？比如说，你有一个用COBOL或Java写的遗留系统。如果你想在某个时间点减少复杂性，你就需要重新开始。但同时，没有人愿意扔掉五年的应用开发成果。'
- en: '**Júlia Biró**: You could always refactor it into smaller pieces if you can
    factor it away, and that seems to be the DevOps idea right now. Not to throw away
    the monolith and replace it, but to actually break it down into smaller pieces.
    And, of course, the smaller pieces give complexity, but inside of them, they are
    more containable and accessible.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**Júlia Biró**：如果你能把它拆解成更小的部分，你总是可以对其进行重构，这似乎正是现在DevOps的思路。不是要扔掉单体架构并替换它，而是将其拆解成更小的部分。当然，较小的部分会带来复杂性，但它们内部更容易控制和访问。'
- en: '**Viktor Farcic**: So, we are replacing one complexity with another.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：所以，我们是在用另一种复杂性替换一种复杂性。'
- en: '**Júlia Biró**: Yes, basically that''s what is happening. But the advantage
    of this is that replacing it results in a more dividable and parallelizable complexity.
    If you have a monolith and you have 100 people working on it, then all 100 of
    them need to have the complexity of that monolith in their heads. If you can break
    it down to 10 pieces, then 90 people will have to know the complexity of one-tenth,
    and maybe some dependencies, and 10 people will need to have the complexity of
    the DevOps toolchain or running microservices.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**Júlia Biró**：是的，基本上就是这样。但这个的优势在于，替换它会导致更易分割和并行化的复杂性。如果你有一个单体架构，而有100个人在上面工作，那么所有100个人都需要在脑海中处理这个单体架构的复杂性。如果你能将它分解为10个部分，那么90个人只需要了解其中十分之一的复杂性，可能还有一些依赖关系，而10个人则需要了解DevOps工具链或运行微服务的复杂性。'
- en: '**Viktor Farcic**: As we begin to wrap up this conversation, is there anything
    you would like to talk about that I''ve not asked you about yet?'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：在我们即将结束这次对话时，有没有什么是我还没有问到的，你想谈论的？'
- en: '**Júlia Biró**: In my career, I came from one company where I really experienced
    DevOps, infrastructure, and site reliability, along with all these new concepts.
    I then joined Contentful in May 2018 just after it experienced a big burst of
    growth, and it took some time (about a year) for it to adjust to its new size
    and for the necessary tools and processes to emerge. In the year since, it has
    really caught up.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**Júlia Biró**：在我的职业生涯中，我曾经在一家公司工作，那里我真正体验了DevOps、基础设施和站点可靠性，以及所有这些新的概念。然后我在2018年5月加入了Contentful，就在它经历了一次大规模的增长后，花了一些时间（大约一年）才调整到新的规模，并且相应的工具和流程也逐渐成熟。自那时以来，它真的迎头赶上了。'
- en: Thinking pragmatically
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从实用主义的角度思考
- en: What interests me right now is that these differences make me think really pragmatically
    about what is done, why it is done, and what it is that I should import from Prezi
    and initiate at Contentful. For example, what are the DevOps ideas that are obtainable
    and worth obtaining for my new company? I see that because, for example, my Contentful
    stack has younger and fresher technologies than the stack at Prezi. Yet, on the
    other hand, some of the toolings are much more mature, and the complexity is crushing.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 目前让我感兴趣的是，这些差异让我非常务实地思考所做的事情、为什么要做这些事情，以及我应该从Prezi引入并在Contentful启动什么。例如，哪些DevOps的理念是可以获得的，并且值得为我新的公司所获取的？我之所以这么想，是因为，比如说，我在Contentful的技术栈比Prezi的栈更年轻更新。但是，另一方面，一些工具已经更为成熟，而复杂性却变得压倒性。
- en: What makes me tick in my daily work is my belief that Contentful will grow,
    and I chose to follow it because I want to be in there while it's growing, and
    I want to facilitate that growth.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我每天工作的动力来源于我对Contentful将会成长的信念，我选择跟随它，因为我想在它成长的过程中参与其中，并且我希望能促进这种成长。
- en: '**Viktor Farcic**: Would you say that it''s easier to promote things when in
    one situation over another? Is it easier with a well-established stack or a young
    company with less?'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**: 你会说在某种情况下推广事情比在另一些情况下更容易吗？在使用一个成熟的技术栈时比在一个年轻公司用更少的技术栈时容易吗？'
- en: '**Júlia Biró**: It''s quite different. For example, one of the signs of maturity
    is that by the time I left Prezi, there was a very well-defined process of how
    to promote ideas. A year ago, when I first started trying to promote ideas at
    Contentful, I didn''t even know which was the right platform to start on. A year
    later, there is definitely a clear process. On the other hand, because there are
    only half as many engineers and layers at Contentful, I really only need to convince
    two or three people over lunch, and then something may get started.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**Júlia Biró**: 这完全不同。例如，成熟的一个标志是，当我离开 Prezi 时，已经有了一个非常明确的推动想法的流程。一年前，当我第一次尝试在
    Contentful 推动想法时，我甚至不知道该从哪个平台开始。一年后，肯定已经有了一个清晰的流程。另一方面，因为 Contentful 的工程师和层级只有
    Prezi 的一半，我实际上只需要在午餐时说服两到三个人，某些事情就可能开始了。'
- en: '"One of the signs of maturity is that by the time I left Prezi, there was a
    very well-defined process of how to promote ideas."'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '"成熟的一个标志是，当我离开 Prezi 时，已经有了一个非常明确的推动想法的流程。"'
- en: —Júlia Biró
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: —Júlia Biró
- en: I don't have a preference for this or that. With Prezi, I needed to learn a
    lot of tools. For example, as a member of the team who was responsible for the
    monitoring pipeline, which itself consisted of six different microservices. And
    that was just monitoring, and that was hard. Now at Contentful, I often feel that
    we don't have a real structured concept of working out where we are going.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我对这个或那个没有偏好。在 Prezi，我需要学习很多工具。例如，作为负责监控管道的团队成员，监控管道本身就由六个不同的微服务组成。而这只是监控，而这非常难。现在在
    Contentful，我常常感觉我们并没有真正的结构化概念来解决我们前进的方向。
- en: The worst thing is that I'm constantly thinking we have no idea how we are doing
    this really. I say it not like we don't know what technology to use, but that
    we don't know how we want to use that technology. All these things are mushy and
    undefined, and that gives you a lot of uncertainty, which is hard for me to deal
    with because I don't deal with uncertainty very well. So, for me, this is the
    challenge. But on the other hand, if I set my mind to tidy up things, then it's
    very easy because all I need to do sometimes is just write down something and
    try to get the others to follow or agree on it. Just creating processes is almost
    as effective as creating tools, because it can already fix things.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 最糟糕的是，我不断在想我们其实并不知道自己在做什么。我说这句话并不是指我们不知道使用什么技术，而是我们不知道我们希望如何使用这些技术。所有这些事情都是模糊且未定义的，这给你带来了很大的不确定性，而这对我来说很难应对，因为我并不擅长处理不确定性。所以，对我来说，这就是挑战。但另一方面，如果我下定决心去整理事情，那就很容易了，因为有时候我需要做的就是写下某些东西，然后试图让别人跟随或同意它。仅仅创建流程几乎和创建工具一样有效，因为它已经能够解决问题。
- en: '**Viktor Farcic**: Here''s a question. Every company thinks that they are special
    and they''re doing things in a special way. Yet, there are some commonly proven
    things that work better than others. Our industry is so heterogeneous that actually
    we still don''t know what works better than others. Or is it the case that companies
    are simply uninformed and incapable, or is it something else altogether?'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**: 有一个问题。每个公司都认为自己是特别的，自己在做一些特殊的事情。然而，确实有一些经过验证的做法比其他做法更有效。我们的行业是如此异质化，以至于实际上我们仍然不知道什么方法比其他方法更有效。或者，是公司只是信息不足或无能，还是完全有其他原因？'
- en: '**Júlia Biró**: No, I don''t think we are so heterogeneous actually. As I was
    looking to change jobs, it was very easy for me to find a company that uses 60
    percent of the same tools as my previous company; the only difference was that
    they were used in slightly different ways. The beauty of the microservices architecture
    is actually that the diversity is contained inside the microservice and then,
    as an engineer, standard problems mean that you can have standard solutions, and
    it''s an advantage.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**Júlia Biró**: 不，我并不认为我们如此异质化。实际上，当我在找工作时，我很容易找到一个使用和我之前公司相同60%工具的公司，唯一的区别是它们被稍微不同的方式使用。微服务架构的美妙之处在于，实际上多样性被包含在微服务内部，作为工程师，标准问题意味着你可以有标准的解决方案，这是一种优势。'
- en: There was an idea at Prezi, which I think makes sense, that you should focus
    your efforts on the specific problem domain in which your expertise and your service
    area lie. You should try to solve the other problems as easily and in as standard
    a way as possible. In Prezi, that meant that we have our very own special solutions
    for rendering visualizations and other things, but we don't want to reinvent the
    wheel when it comes to monitoring because we are a visual communications company
    and not a monitoring company.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在Prezi有一个想法，我认为很有道理，那就是你应该把精力集中在你专长和服务领域所涉及的具体问题上。你应该尽量以最简单、最标准的方式解决其他问题。在Prezi，这意味着我们有自己独特的解决方案来渲染可视化和其他内容，但在监控方面我们不想重新发明轮子，因为我们是一家视觉传播公司，而不是一家监控公司。
- en: At Contentful, we are making sure that your content is both easily editable
    while still being highly available, because this is our expertise and this is
    our service, there's a big emphasis on usability. We are not a monitoring company.
    We are not going to invest a lot of effort into monitoring. It's not that we are
    not going to do it, it's just that we are not going to write our own solution
    in it from scratch because our monitoring problems are standard and standard tooling
    should handle it.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在Contentful，我们确保你的内容既易于编辑，又具有高度可用性，因为这是我们的专长，也是我们的服务，重点放在可用性上。我们不是一家监控公司。我们不会在监控上投入大量精力。并不是说我们不做监控，而是我们不会从零开始编写自己的解决方案，因为我们的监控问题是标准化的，应该由标准工具来处理。
- en: '**Viktor Farcic**: So, you should focus on your specialty and then try to get
    the rest in through a standard way. But what confuses me is that it''s a bit contradictory
    because, on the one hand, we can agree we should have standards, so we don''t
    waste our time, but on the other hand, if things are changing on a daily basis,
    you''re never increasing speed, and thus standards cannot also be long-lasting.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇克**：所以，你应该专注于你的专业领域，然后通过标准的方式将其他内容解决。但让我困惑的是，这有点矛盾，因为一方面我们可以同意应该有标准，这样我们就不会浪费时间，但另一方面，如果事情每天都在变化，你就永远无法提升速度，因此标准也不能持久。'
- en: '**Júlia Biró**: Usually every problem domain has a smallish set of standard
    solutions that you can choose from, maybe three to five, that are very well documented
    and very well supported. But like you said, the bottleneck always moves. All new
    solutions are about improving some bottleneck, but they''re not solving the same
    problem over and over again. They are solving the next problem.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**朱莉亚·比罗**：通常每个问题领域都有一小部分标准解决方案可供选择，可能是三到五种，它们文档齐全，支持良好。但正如你所说，瓶颈总是在变化。所有的新解决方案都是为了改进某个瓶颈，但它们并不是在不断解决同一个问题。它们是在解决下一个问题。'
- en: '**Viktor Farcic**: So, whenever we solve a problem, there is another one to
    solve, and so actually the ever-increasing speed of new processes and tools are
    a reflection of us raising the bar.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇克**：所以，每当我们解决一个问题时，总会有另一个问题需要解决，实际上，不断加快的新过程和工具的速度反映了我们在不断提高标准。'
- en: '**Júlia Biró**: For example, there are currently five big tools in container
    scheduling and orchestration. I don''t think there''s going to be 50 industry
    standards in that thing, and the new technology is not going to be about container
    orchestration anymore. It''s going to be about something else, something on top
    of it.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**朱莉亚·比罗**：例如，目前在容器调度和编排领域有五个主要工具。我认为在这个领域不会出现50个行业标准，新的技术将不再是关于容器编排。它将是关于其他的事情，其他基于它的东西。'
- en: '**Viktor Farcic**: Like a cake?'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇克**：就像蛋糕一样？'
- en: '**Júlia Biró**: Always like a cake. For example, once virtual machines become
    an easily accessible resource, you can grow your infrastructure to the point where
    you need to have personal negotiations with AWS about how much of the residual
    nodes you are using. People will probably have 6 billion Kubernetes clusters,
    but then after that, it will just become an easily scalable resource again, and
    then the complexity will go somewhere else.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**朱莉亚·比罗**：总是像蛋糕一样。例如，一旦虚拟机成为一种易于获取的资源，你就可以扩展你的基础设施，直到你需要与AWS进行个人谈判，讨论你使用的剩余节点数量。人们可能会有60亿个Kubernetes集群，但之后，它将再次成为一个易于扩展的资源，然后复杂性将转移到别的地方。'
- en: '**Viktor Farcic**: I agree.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇克**：我同意。'
- en: '**Júlia Biró**: I mean, people are still writing UNIX tools, but that''s because
    we are using UNIX tools that are 30 years old, on a daily basis. Why? Because
    they are in every bit of software that we write, and we are not adopting new standards
    on that one because they are the same standard solutions. For servers, you use
    NGINX, HAProxy, or Apache server, and they all do the same stuff and then you
    know, it''s OK, it works, you don''t need to have a sixteenth one.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**Júlia Biró**：我的意思是，人们仍在编写 UNIX 工具，但这是因为我们每天都在使用已经有 30 年历史的 UNIX 工具。为什么？因为它们在我们编写的每一款软件中都有，并且我们在这方面没有采用新的标准，因为它们是相同的标准解决方案。对于服务器，你使用
    NGINX、HAProxy 或 Apache 服务器，它们都完成相同的工作，然后你知道，没问题，它们工作正常，你不需要第十六个了。'
- en: '**Viktor Farcic**: That''s brilliant. I am wondering, though, what makes you
    click?'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：那太棒了。不过，我在想，是什么让你感到这么有共鸣呢？'
- en: The engineering constant
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工程恒定
- en: '**Júlia Biró**: I''ve had the privilege of working with some very experienced
    engineers, like yourself for example. I''m also very new at this, but we''ve already
    said that technologies change a lot and I am very interested in seeing what is
    the "engineering constant".'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**Júlia Biró**：我有幸与一些经验丰富的工程师一起工作，比如像你这样的。我在这方面也很新，但我们已经说过技术变化很大，我非常想知道什么是“工程恒定”的东西。'
- en: What are the things that will probably come with experience? They're not really
    knowledge of specific technologies, but skills, thinking patterns, and best practices
    that can be used overall and don't get outdated. Whether some of those are something
    that can be picked up to the benefit of my work without having to spend five years
    learning two or three single technologies in depth. The question from all this
    is, "What are the things that I can learn without having to spend 10 years in
    tech, and which will not get outdated?"
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 那些可能随着经验而来的东西是什么？它们不是特定技术的知识，而是技能、思维模式和通用的最佳实践，不会过时。是否有一些东西可以在不深入学习两三种单一技术五年的情况下，提升我的工作效果？从这一切中得出的问题是，“有哪些东西我可以学会而不必在技术领域花费十年时间，并且它们不会过时？”
- en: '**Viktor Farcic**: You can learn Kubernetes in a year.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：你可以在一年内学会 Kubernetes。'
- en: '**Júlia Biró**: But Kubernetes will get outdated in around three to five years''
    time.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**Júlia Biró**：但是 Kubernetes 将在三到五年内过时。'
- en: Are there constants in the tech industry?
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术行业有哪些恒定的因素吗？
- en: '**Viktor Farcic**: I''m kidding. But is there such a thing that will never
    become outdated? If you move outside of tech, is anything cultural that is continuously
    changing our perception of everything? Are there such things as constants in the
    tech industry?'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：开玩笑的。但有这样的东西永远不会过时吗？如果你走出技术范畴，是否有任何文化上的因素在持续改变我们对一切事物的看法？技术行业中有这样的恒定因素吗？'
- en: '**Júlia Biró**: There are basic ideas, such as the depiction of female beauty,
    which seems to be a very constant thing in the past around 3,000 to 5,000 years
    in art and across the entire world. Methods for manipulating masses (for making
    a bigger part of your population stand on your side) are also mostly unchanging
    ever since the history of written politics.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**Júlia Biró**：有基本的想法，比如对女性美的描绘，在过去大约三千到五千年的艺术中似乎是一个非常恒定的事物，在整个世界范围内都如此。操纵群众的方法（用来让你的大部分人口站在你这边）也大多自古至今在书面政治史上保持不变。'
- en: '**Viktor Farcic**: OK, fair enough, you can have that.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：好的，可以理解，你可以这样认为。'
- en: '**Júlia Biró**: I do feel that as I talk to engineers around me who might have
    experiences from different fields, there are some approaches that they apply uniformly,
    regardless of the field or of the actual problem. Approaches that don''t change.
    Whether you''re doing programming in 1983, 2003, or in 2013, sometimes the questions
    are the same, but the answers are different, and then the solutions are different.
    I''m interested in that part, the part that separates engineering from programming.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**Júlia Biró**：我确实感觉到，当我与周围的工程师交谈时，他们可能来自不同领域，却有一些方法是他们无论在哪个领域或者实际问题中都会应用的。这些方法不会改变。不管你是在
    1983 年、2003 年还是 2013 年编程，有时问题是相同的，但答案不同，解决方案也不同。我对这一部分很感兴趣，这一部分区别于编程的工程学。'
- en: '**Viktor Farcic**: But isn''t that partly a sign of immaturity in our industry?'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：但这难道不是我们行业不成熟的一个迹象吗？'
- en: '**Júlia Biró**: It''s partly a sign of maturity, and I see that all around
    me. It''s also something I learn mostly from people who have more experience in
    the field than me. But I also think that it is something that can be made conscious
    and that it''s something that you can steal a bit, so you try to use it even when
    you don''t have that experience.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**朱莉娅·比罗**：这在某种程度上是成熟的表现，我在身边看到的很多人都有这种特质。这也是我从那些比我经验更丰富的人那里学到的东西。但我也认为，这是可以有意识地去做的事情，而且你可以稍微偷学一下，尽管你还没有那么多经验，也尽量去用它。'
- en: '**Viktor Farcic**: It was not long ago that I spoke with an acquaintance of
    mine, who is an architect, and I was telling him how only yesterday we were using
    Java, and today we''re using Go, and god only knows what''s tomorrow. He explained
    to me, "Yeah, because what I do as an architect has existed for a couple of thousand
    years and we''ve had time to figure it out, and you haven''t."'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：不久前，我和一位建筑师朋友聊天，我告诉他，昨天我们还在用Java，而今天我们用的是Go，谁知道明天会怎样。他跟我解释说：“是的，因为作为建筑师，我的工作已经有几千年的历史，我们已经有足够的时间来摸索，而你们却没有。”'
- en: '**Júlia Biró**: I mean, the laws of aesthetics are not changing, but the way
    in which buildings are built has changed very much in the last two centuries because
    of the change of materials.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**朱莉娅·比罗**：我的意思是，审美的法则并没有改变，但由于材料的变化，建筑的方式在过去两个世纪发生了巨大的变化。'
- en: '**Viktor Farcic**: But you just said, architecture has existed for two centuries,
    and we''ve only been around for 50 years.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：但是你刚才说，建筑已经有几千年的历史，而我们才只存在50年。'
- en: '**Júlia Biró**: No, and here''s the thing. An ex-colleague of mine who works
    in a remote-only company with all senior engineers told a story: "We''re going
    to dinner. We meet once a year in person, and we go to this off-site/team-building
    event, and we try to architect problems. It''s ridiculous the amount of advancement
    you can get by asking, ''what is the problem we are trying to solve?''"'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**朱莉娅·比罗**：不，事情是这样的。我有一位前同事，他在一家完全远程的公司工作，所有的工程师都是资深的，他讲了一个故事：“我们要去吃晚餐。我们每年见一次面，然后去参加一个离线/团队建设活动，我们尝试去解决一些架构问题。你会发现，通过问‘我们要解决的问题是什么？’，你能取得多大的进展。”'
- en: '"That''s like a super simple trick that senior engineers do. They''re not letting
    themselves be dragged into the small details or down rabbit holes, but from time
    to time they take a step back and try to ask, ''Are we getting closer, and could
    there be a shorter way?''"'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: “那就像是资深工程师们做的一个超级简单的技巧。他们不会让自己陷入细节中或者走入死胡同，而是时不时地退后一步，问一问，‘我们是不是在接近目标，是否有更短的路径？’”
- en: —Júlia Biró
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: —朱莉娅·比罗
- en: That's like a super simple trick that senior engineers do. They're not letting
    themselves be dragged into the small details or down rabbit holes, but from time
    to time they take a step back and try to ask, "Are we getting closer, and could
    there be a shorter way?" This all comes with maturity, but if you're sneaky like
    me, then you try to use it early. I'm interested in these things. Basically, is
    there a fast track to becoming a senior engineer? This would be my interest. Because
    I don't have that much time.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 那就像是资深工程师们做的一个超级简单的技巧。他们不会让自己陷入细节中或者走入死胡同，而是时不时地退后一步，问一问，“我们是不是在接近目标，是否有更短的路径？”这些都伴随着成熟而来，但如果像我一样狡猾，你会尽早地去运用它。我对这些事情很感兴趣。基本上，是否有一条快速通道可以让你成为一名资深工程师？这就是我感兴趣的事情，因为我没有那么多时间。
- en: '**Viktor Farcic**: That''s a great point of view. Thank you for sparing some
    time to talk to me today.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：这是一个很棒的观点。感谢你抽出时间和我聊聊。'
