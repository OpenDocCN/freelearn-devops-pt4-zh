- en: Introducing Kohsuke Kawaguchi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A respected developer and popular speaker, Kohsuke Kawaguchi is perhaps best
    known for creating Jenkins, a CI platform that has become a widely adopted and
    successful community-driven open source project. Kohsuke's principles behind the
    Jenkins community—extensibility, inclusiveness, and low barriers to participation—are
    many of the driving factors in DevOps. You can follow him on Twitter at `@kohsukekawa`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Before we delve into our conversation about DevOps, could
    you tell us a little about yourself?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kohsuke Kawaguchi**: I''m probably best known as the creator of the Jenkins
    project, which started at the CI server, and is now more broadly used in the general
    computational industry and automation. Currently, I''m the CTO of CloudBees, a
    company that''s involved in a number of things, among which is productizing Jenkins,
    and helping companies through their digital transformation.'
  prefs: []
  type: TYPE_NORMAL
- en: What is DevOps?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: So then, a simple question for you: what is DevOps?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kohsuke Kawaguchi**: If I''m totally honest, I feel like DevOps is a bit
    of an overused word today. In fact, even I sometimes wonder what people really
    mean by it. What DevOps is truly depends on several factors. I personally associate
    DevOps with this growing trend of, over the last few decades, more automation
    and shorter and shorter feedback cycles.'
  prefs: []
  type: TYPE_NORMAL
- en: '"I feel like DevOps is a bit of an overused word."'
  prefs: []
  type: TYPE_NORMAL
- en: —Kohsuke Kawaguchi
  prefs: []
  type: TYPE_NORMAL
- en: In the last five years, this automation feedback cycle has become all-encompassing
    in everything from writing code to managing Quality Assurance (QA) in order to
    push it out to production and run it. I think people generally default to practices
    like that and then call it DevOps. When I talk to these people working in the
    larger enterprises, I think they immediately see DevOps as erasing the organizational
    boundaries that are in place, which I think is obviously an important problem
    for them. I know some people like to emphasize that point and make it more of
    an organizational thing.
  prefs: []
  type: TYPE_NORMAL
- en: The DevOps toolkit and its organizational impact
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Moving on to the DevOps toolkit, what tools do you see as
    empowering workers? Do you think that some tools fit better than others into whatever
    definition of DevOps people have?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kohsuke Kawaguchi**: In the context of broader automation that goes across
    a number of different things and this ever-expanding need for automation with
    human control, the tool is obviously the primary means of enabling automation.
    I know a lot of Jenkins users see the world that way.'
  prefs: []
  type: TYPE_NORMAL
- en: Software developers like myself enjoy inventing tools. That's what we do. So,
    given that world view, it's only natural that we come up with our own tools to
    bridge those gaps and expand automation even more, because without automation,
    you can't create shorter feedback cycles, which is a critical part of DevOps.
    For me, this is the interesting part. It feels closer to what we can solve, as
    opposed to the organizational structure problem in enterprises, which is not only
    dictated by those technical concerns, but lots of other factors. For example,
    there's a good compliance reason why development and operations are separate;
    it's because it's seen, historically, as a well-maintained compliance necessity.
    Fundamentally, it's not a technology fight.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: You''re the creator of Jenkins, one of the most popular
    open source tools out there, and you''re also the CTO of a company that, as you
    said yourself, works with enterprise companies. Do you think that there is a significant
    difference between how the tools and processes operate on smaller greenfield open
    source-type companies versus those found in enterprises?'
  prefs: []
  type: TYPE_NORMAL
- en: '"There''s a good compliance reason why development and operations are separate;
    it''s because it''s seen, historically, as a well-maintained compliance necessity.
    Fundamentally, it''s not a technology fight."'
  prefs: []
  type: TYPE_NORMAL
- en: —Kohsuke Kawaguchi
  prefs: []
  type: TYPE_NORMAL
- en: '**Kohsuke Kawaguchi**: The kinds of problems and challenges that the enterprise
    people need to deal with are just in a different layer from the smaller guys.
    For the smaller folks, time is money. As I said before, these smaller operations
    often don''t have too many people on staff to begin with, so they have a lot more
    flexibility in choosing how they work.'
  prefs: []
  type: TYPE_NORMAL
- en: Compliance is usually not as real; it doesn't mean you can ignore it, but you
    can fly under the radar. In other enterprises, when provisioning new employees,
    the segregation you have to think about is like optimizing for a global, not just
    a local, team. It's no wonder one group feels the other group is a bit of an idiot.
    They each have different challenges.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: As an example, when I go to different booths at DockerCon,
    it''s "DevOps, DevOps, DevOps." All of the software vendors have some form of
    DevOps associated with them now. What do you think is driving that?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kohsuke Kawaguchi**: I want to say two things.'
  prefs: []
  type: TYPE_NORMAL
- en: First, if I look at the decade-long march toward more automation that I talked
    about, then we're talking about more than just DevOps. It now includes infrastructure,
    services, VMs, or software-defined networks. In this broad trend, you can include
    a practice such as continuous integration, which, at this point, is about 10 years
    old. Today, DevOps is used as the go-to label for this march. I think this march
    will continue, but at some point, it'll take on a different name.
  prefs: []
  type: TYPE_NORMAL
- en: Second, we, the engineers, might roll our eyes at the fact that everyone is
    saying DevOps and twisting its meaning to whatever fits their agenda, but we also
    underestimate the importance of communicating this stuff in a way that a broader
    audience understands, which is very difficult to do.
  prefs: []
  type: TYPE_NORMAL
- en: In order to achieve changes that we know are necessary, as engineers, you have
    to rally your organization, which means communicating with people who are not
    engineers. Terms such as "DevOps" are rather useful ways of capturing the ideas,
    and when a lot of people say the same thing in different ways, it puts some weight
    behind the credibility of the idea. In a way, therefore, all of these vendors
    saying "DevOps" are doing us a favor.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I''ve heard a lot lately about those organizational changes
    where they''re moving everything to the left. What do you think about that? I
    mean, tools to me are obvious, in that you pick a tool that does the job; you
    learn how to use it and implement it. In your view, what are the other changes
    that need to be applied?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kohsuke Kawaguchi**: Yeah, there are obviously things at the technology level
    as you say, and then there''s other challenges. One example I can give you is
    that the infrastructure around the Jenkins product itself has only a somewhat
    limited capacity, so when we wanted to shift more QA to the left, we could only
    do so much. In other words, it takes money, and that''s a hard thing to come by
    in an open source project.'
  prefs: []
  type: TYPE_NORMAL
- en: Then, there's a challenge fundamental to QA. QA is actually a never-ending challenge
    to automate most things, and it's not easy. I used to work on a compiler, and
    so I used to think naively that testing was super easy—that it's actually completely
    deterministic. I have an input, I run it through the program, and I get output.
    I then compare that with what the output should be and then I'm done. But most
    of the interesting apps that people are writing are very difficult to actually
    measure out in this way.
  prefs: []
  type: TYPE_NORMAL
- en: '"QA is actually a never-ending challenge to automate most things."'
  prefs: []
  type: TYPE_NORMAL
- en: —Kohsuke Kawaguchi
  prefs: []
  type: TYPE_NORMAL
- en: Once, I went to a car manufacturer where they had this tower full of headlights.
    They were testing a little microcontroller that controlled the headlights. Imagine
    the challenge of mounting them up on a tower, verifying that a light actually
    turned on, resetting the hardware, and so on. All of that is work. Just on the
    technology front, there are still tremendous challenges like that. Every time
    we want to do more QA, there's a never-ending list of problems like this that
    need to be tackled.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Not to mention those organizational challenges if you''re
    in those companies.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kohsuke Kawaguchi**: Exactly! You have those people in different groups,
    and you are used to operating in certain ways, and your left-shifting happens
    at a different pace and at different parts of the project. If you think about
    somebody who is working on an operations team and is interfacing 100 different
    operations teams, and only one wants to do things differently, the reaction is,
    "Look, I can''t accommodate things just for you."'
  prefs: []
  type: TYPE_NORMAL
- en: 'Those things can always be challenging. I''ll give you another example of faster
    delivery creating a friction downstream. The marketing team: the things they do,
    such as running marketing campaigns or events, are more compatible with big releases.
    You don''t want to issue a press release just for one feature, right? Same thing
    with the customer-facing guys. They don''t want to bombard customers with communication.
    You want to batch things up. As engineering work becomes more continuous, those
    people also need to change the way they work. That''s nothing new; it''s not as
    if I made this amazing discovery that nobody else knew before. It''s easier said
    than done.'
  prefs: []
  type: TYPE_NORMAL
- en: The hype around containers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Speaking of technology, all the hype over the last couple
    of years has been about containers. How do you see that fitting into this whole
    picture?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kohsuke Kawaguchi**: When I worked at Sun Microsystems, we had our own operating
    system there called Solaris. I remember an internal conference where they talked
    about this thing called Solaris Zones. They would say, "Oh, we can split the user
    space into different portions, and we can allocate different CPU sizes, RAM, and
    so on to them. They will be like a different set of computers with virtually zero
    overhead." So now, looking back, I can see that what they were doing was actually
    putting in place the building blocks of what became containers.'
  prefs: []
  type: TYPE_NORMAL
- en: The Solaris guys must have designed this feature, fully aware of the impact
    it can create. But it had zero traction. There were a number of other similar
    examples. The thing that I took away from Solaris is that we, as open source engineers,
    often tend to think that if you just put the code out there and explain what it
    does, then other like-minded developers are able to look at it and get the same
    perspective as yours and then be able to use it. It turns out that's completely
    not true, and that's something I didn't appreciate before.
  prefs: []
  type: TYPE_NORMAL
- en: The Solaris guys put all of the nuts, bolts, and engines together to do this
    new hard thing of isolations and they expected the rest of us to grok the point
    of it, and we didn't. It took this certain packaging and positioning for the mainstream
    to really see the value of it, so that was, for me, an interesting history lesson.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: But what are your views on containers? That''s obviously
    a key part of everything that we do in this field.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kohsuke Kawaguchi**: Obviously, I think containers are great. I just can''t
    believe we still have to actually say they''re a good thing, but this landscape
    is moving very rapidly. I remember going to one of the DockerCon conferences and
    feeling like these guys are going to be the next VMware, as they will own the
    corporations and the large enterprises that are going to deploy containers in
    the hundreds of thousands. Yet, within just a few years, what we have discovered
    is the interest in layers moved up. Containers are considered a good thing, but
    now it''s only as exciting as Unicode. Everyone uses it and nobody cares.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Obviously, I think containers are great. I just can''t believe we still have
    to actually say they''re a good thing, but this landscape is moving very rapidly."'
  prefs: []
  type: TYPE_NORMAL
- en: —Kohsuke Kawaguchi
  prefs: []
  type: TYPE_NORMAL
- en: I was shocked at the pace of the amazing work in this space. Right now, I think
    that Kubernetes is all the rage. But, on the horizon, if you look at what Amazon
    is trying to do, they are essentially hiding Kubernetes almost like an implementation
    detail.
  prefs: []
  type: TYPE_NORMAL
- en: As soon as something dominates one layer, that dominance immediately moves the
    conversation upstack. Now, people will be talking about all of the higher-level
    values, integrating those, and how to hide them behind. Unicode and TCP—it's all
    the same. I think this is already happening with Kubernetes. That's what I mean
    by "boring."
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: The point of good technology is that if it becomes boring,
    but everybody still uses it, then it''s accomplishing its mission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kohsuke Kawaguchi**: I think that''s the ultimate hall of fame for engineers—achieving
    "good technology" that''s become so boring nobody talks about it. I live in San
    Jose, so I occasionally cross the Golden Gate Bridge, which is a magnificent piece
    of engineering. I have no idea who built it, but I''m sure that a lot of hard
    engineering work went into it. Most people don''t pause to think about the work
    involved, even though they benefit from it.'
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, I feel that the world should recognize these people's work more,
    but then I also think these people probably don't need the validation from the
    whole world. I bet they know they've done a great work.
  prefs: []
  type: TYPE_NORMAL
- en: Conferences, open source, and the US versus China
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Right now, you''re the CTO of CloudBees, where you''re in
    charge of technology. I''m curious; how do you follow up with all of that? I''m
    asking this simply because I don''t know how to do it myself. Every time I visit
    a conference, I have the impression that I need another year just to learn what
    each of those programs does.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kohsuke Kawaguchi**: I wish I knew the answer. I, too, struggle with keeping
    up with what''s going on. I find it useful to go to conferences because people
    there are trying to explain things to you, as opposed to expecting you to grok
    things on your own. At the same time, in the grand scheme of things, people like
    you and I are probably good at making sense of the rough bits out there, so from
    that perspective, going to conferences is a bit of a waste of time because we''d
    probably learn a lot more on our own in the same amount of time it takes to travel.
    Also, when you are a producer of a technology, conferences are great ways to hear
    from people who are using the product. It''s always worthwhile to listen to them.'
  prefs: []
  type: TYPE_NORMAL
- en: Another reason I go to conferences is that I personally can't watch a recorded
    video. I just can't keep my attention for anything longer than a minute. I start
    watching a YouTube video and then within 15 seconds I start multitasking, and
    then, next thing you know, I completely lose track of what the video is saying.
    If I could fix that about myself, I'd be a lot more efficient in ingesting information.
  prefs: []
  type: TYPE_NORMAL
- en: I also think there's some truth in the idea of "tested by time." If I continue
    to hear about something for a long period of time, then it's probably worth paying
    attention. It's the same with "word of mouth." If people you trust are excited
    about something, it's probably worth paying attention, too. I think, realistically,
    those are the only ways that normal people can use to filter signal from noise.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I don''t know how they manage, and maybe they don''t. What''s
    your feeling about open source? When you started your career, it wasn''t a thing,
    but now it is. Is there still a future in projects that are closed source from
    the start?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kohsuke Kawaguchi**: Before we go into that, I just need to correct you.
    Open source has been around for a good amount of time, long before I started Jenkins.
    I think it still demonstrates my previous point about finding more viable ways
    to socialize DevOps. I really do believe that, fundamentally, open source is a
    better way of developing software. I''ve seen first-hand a number of proprietary
    software defeated by open source. We''ve talked about Sun and Solaris, so there''s
    my case.'
  prefs: []
  type: TYPE_NORMAL
- en: When I think about what made open source so successful, I think a key is that
    open source allowed new ideas from anywhere to be tested out more rapidly and
    thus quickly converging into a better working solution. Innovations happen everywhere,
    and that was a key differentiator.
  prefs: []
  type: TYPE_NORMAL
- en: But I feel, nowadays, there's another emerging differentiator in the different
    axis, which is the scale of the problem that they are dealing with.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Can you clarify that a bit?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kohsuke Kawaguchi**: I''ve spent a good chunk of my professional career in
    Japan. In the worldwide software development market, Japan has about 10 to 15
    percent share, so it''s no small chunk, but it''s not a majority either. Because
    of the various challenges related to language and time zone, Japanese software
    companies are by and large only solving the problems for their domestic market.
    It''s a closed market.'
  prefs: []
  type: TYPE_NORMAL
- en: Japan has around 100 million people. If you're running a service and you're
    serving the entirety of Japan, your scaling challenge is capped at 100 million.
    I attended developer conferences in China and what I realized is that even though
    their domestic market is just as closed, it is far bigger. So, their biggest service
    companies are facing and solving the kinds of scaling problems that Japanese companies
    haven't even thought of.
  prefs: []
  type: TYPE_NORMAL
- en: I was quite impressed that China was talking about how they need machine learning
    to help our operations. In Japan, that's a science fiction problem, whereas in
    China, that's a real problem today. The only other market in the world that rivals
    that is the United States. So, I'm convinced that our technology landscape in
    the next decade will be a duopoly between the US and China.
  prefs: []
  type: TYPE_NORMAL
- en: Because of the scale, when a new problem first gets discovered in those markets,
    they get solved, and they become available to the rest of the world, so the rest
    of the world doesn't get to really innovate.
  prefs: []
  type: TYPE_NORMAL
- en: '"I was quite impressed that China was talking about how they need machine learning
    to help our operations. In Japan, that''s a science fiction problem, whereas in China,
    that''s a real problem today."'
  prefs: []
  type: TYPE_NORMAL
- en: —Kohsuke Kawaguchi
  prefs: []
  type: TYPE_NORMAL
- en: What I'm trying to say is that the exposure to challenges at the frontier is
    becoming as big a differentiator as open source, if not more. I said innovations
    used to happen everywhere, but I feel innovations are happening closer to challenges
    of large markets. People say end user companies are now the source of innovations,
    not vendors, and I think this is for the same reason. So that's something of a
    prospect that I try to keep in mind.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps in the next ten years
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Where do you see DevOps going in the next ten years?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kohsuke Kawaguchi**: I wish I had a better sense of the future to say interesting
    things about it. Like I''ve been saying, I would say the obvious direction is
    more automation.'
  prefs: []
  type: TYPE_NORMAL
- en: There will be more demand for software and technology all over the world. For
    example, every time I have to go through the airport and show my driver's license
    to authenticate myself to the system, I think, this should be a solvable problem.
    So, yeah, there will be more software, and there will be more automation.
  prefs: []
  type: TYPE_NORMAL
- en: I guess I just can't get away from automation! Beyond that, I think data and
    machine learning should play a central role in the way we develop software as
    well. Those technologies have been disrupting so many things, it's silly to think
    our own profession is immune from that. But I don't know how quickly those things
    will happen. If I had that magic 8-ball, I'd be working on it and not talking
    to you now.
  prefs: []
  type: TYPE_NORMAL
- en: '"There will be more software, and there will be more automation."'
  prefs: []
  type: TYPE_NORMAL
- en: —Kohsuke Kawaguchi
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: You''ve mentioned automation a couple of times. When I visit
    companies, there''s always a huge number of people doing repetitive manual tasks
    over and over again. I was even involved in conversations where people are questioning
    automation, which completely doesn''t make sense to me. What''s not to like about
    automation? Why aren''t we automated already?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kohsuke Kawaguchi**: Yeah, that''s funny. The truth is sometimes I feel the
    same way. I feel like, as the outsider, we''re landing into some places, and we
    do sometimes underestimate the rationality of the status quo. There''s always
    more to it than what meets the eyes—consideration for things I don''t understand,
    nuances that I don''t get, the context, those sorts of things. I don''t think
    it hurts for us to be a little humbler to those things. I''m not surprised if
    my parents think that our work is completely automatable. You go to the office,
    you sit in front of a computer, and then you come back. You seem to be repeating
    that every single day. What''s not automatable about that?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Exactly.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kohsuke Kawaguchi**: We need to be careful because we might be falling into
    that trap ourselves when we look at other people. That is not to say nobody is
    doing repetitive manual tasks that should be replaced. I''m sure there are some
    people who resist changes and what not. But my first reaction is always to assume
    that they see something I don''t. So, I don''t know. Personally, I don''t come
    across people who genuinely perform this repetitive work. Most of the time, I
    think people see their work as not overly repetitive.'
  prefs: []
  type: TYPE_NORMAL
- en: The other interesting perspective is, if you think of Japan, they've got traditional
    cultural things such as the tea ceremony, kendo, or judo. These are art forms,
    where they emphasize repetition, following the certain *kata* and repeating the
    same tasks to perfection. You start by mimicking a master, then you slowly develop
    your own style. What might look like circling in the same place to untrained eyes
    is actually a spiral movement upwards. What's implicit is the respect to the wisdom
    that your predecessors have built. There's also something deeply satisfying about
    the feeling of "this time I did it better than the last time." I think it's a
    key to motivate oneself for a long run. I think those are beautiful, though maybe
    it's just a part of the Asian psyche.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: As we start to wrap up, I would love to know, is there anything
    that really excites you in the industry right now?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kohsuke Kawaguchi**: As technology people, we''re always excited to play
    with new toys. So, I guess playing with these new tools and new services is one
    thing that really excites me. Yesterday, I was playing with Google''s new text-to-speech
    engine, which was pretty good. It''s a kind of a black magic, and that''s cool,
    then I think about all of the things that we could do with that, such as an audiobook,
    voice navigation while driving, or whatever. You just never know what comes out
    of it. New technology is always fun like that.'
  prefs: []
  type: TYPE_NORMAL
- en: I do enjoy playing with these toys, but at the same time, some mundane problems
    also excite me. I go and see larger companies struggling with the problem of deploying
    their large hairy software quickly. Everyone has this problem of tests not being
    very reliable, or that they have too many tests and, most of the time, they are
    not doing anything useful. They are starting to question whether running all these
    tests is actually useful. I'm interested in seeing whether we can intelligently
    pick the subset of tests to run in the right order. I have a feeling that we can
    reduce the average turnaround time by an order of magnitude.
  prefs: []
  type: TYPE_NORMAL
- en: Another example of a mundane problem is the way that we track bugs, do the code
    change and then we get that verified. It's something that happens everywhere,
    and it's held together by people manually communicating and collaborating. I feel
    like some of them are ready for automation.
  prefs: []
  type: TYPE_NORMAL
- en: The connection between cross-stitching, Lego, and DevOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I guess one person's mundane problem is somebody else's exciting challenge.
    Aside from that, cross-stitching.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Cross-stitching? What exactly do you mean by that?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kohsuke Kawaguchi**: Cross-stitching is needlework. I started doing this
    because my wife picked it up and I thought it would be good to have a common hobby
    with her. It''s generally an old woman''s hobby. Let me explain cross-stitching
    in a way that geeks understand. Imagine a screen, and there are the pixels. Each
    pixel can be a different color. That''s how we build graphics. Cross-stitching
    is the exact same thing; it''s just on the piece of cloth, instead of a screen,
    and instead of pixels, you''re using colored threads. It''s just the analog version
    of a video screen. So, I stitch some video game characters and so on for fun.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, obviously, the actual stitching is incredibly manual and repetitive. I
    feel like I should be able to automate this. If there's a programmable machine,
    as in a sewing machine, I want to see whether I can control it to do the right
    things. A machine that takes a JPEG or a PNG as an input, then it would cross-stitch
    things for me. I think that'd be awesome. That would allow me to say, I master
    everything about cross-stitching, and then I can move on to another hobby. I wish
    I could do something like that. I have never been able to find anybody in the
    cross-stitching community who has any passion for this kind of automation. Most
    fans of cross-stitching are there for enjoying conversations with others while
    they are stitching things, and so for them, the idea of automation is horrifying.
    They would say, what's the point of doing it? That's why I'm itching to find a
    venue in which to talk about it.
  prefs: []
  type: TYPE_NORMAL
- en: If I get to do that, Lego will probably be the next.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Lego and DevOps? That''s a conversation that I wasn''t expecting
    to have with you.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kohsuke Kawaguchi**: I''m a big Lego fan, and among the Lego community, you
    can have a never-ending conversation about how to sort and store your Lego blocks.
    You build something, and then you disassemble the model you''ve built. Most of
    you put Lego pieces in a big packet when you were small, and then you grow out
    of Lego and move on to something else. But for the rest of us who never grew out
    of Lego, and who continue to buy more and more Lego sets, the pieces get too many
    to just fit in the one packet. It''ll take forever to find pieces you want.'
  prefs: []
  type: TYPE_NORMAL
- en: I have several drawers full of Lego blocks, and as I was sorting them, naturally
    I started to think, "Wow, there's so many pieces, I need to automate this." People
    are actually doing that sort of thing. So, they build the machine, not just the
    software. It has a webcam that takes a picture of a brick on a conveyer belt,
    it matches the shape against a catalog, and then some sort of nozzle blows the
    air to push the piece into the right bin. That kind of automation is really fun,
    but then again, I just find myself trying to automate everything and anything
    possible. It's just how I am wired. I don't know if every other software developer
    feels the same. This story has no conclusion, but that's what excites me.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I have the impression there''s a fear that if you do those
    things, then you''re automating yourself out of a guaranteed job position.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kohsuke Kawaguchi**: Wouldn''t that be perfect? Because now I can die since
    I''ve completely automated myself! Of course, we know there''s really no such
    thing as fully automating yourself away on anything, not even cross-stitching.
    I mean, what software development teaches us is that if you solve one problem
    by automation, you then get to face the next problem, and this ladder never ends.
    That''s kind of fun for me.'
  prefs: []
  type: TYPE_NORMAL
- en: Take cross-stitching, for example, if I someday manage to produce an ultimate
    cross-stitching machine like I described, the next thing I'll start thinking about
    is probably how do I automate the management of my inventory of threads. At that
    point, I can stitch any design, so I'm pretty sure I will be using threads like
    crazy, at an unimaginable scale. Today, it takes a trip to a local store to get
    threads of the right color, which can take several days. That's okay when a stitching
    project is taking months, but not if it only takes 15 minutes. So, how do you
    optimize that?
  prefs: []
  type: TYPE_NORMAL
- en: '"What software development teaches us is that if you solve one problem by automation,
    you then get to face the next problem, and this ladder never ends. That''s kind
    of fun for me."'
  prefs: []
  type: TYPE_NORMAL
- en: —Kohsuke Kawaguchi
  prefs: []
  type: TYPE_NORMAL
- en: Or think about all the secondary problems that the Minecraft people get hang
    up on. I had a mod that can create a programmable robot inside a Minecraft world,
    so I could program it to do mining or building. Once you automate the mining part,
    then great, but we have this almost infinite inventory of raw iron ore, and then
    you start to think, "Oh, now I need to automate the smelting part. Otherwise,
    I'm smelting this forever," and so you kind of keep going like that.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: That''s the freakiest story I''ve heard.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kohsuke Kawaguchi**: I hope it''ll be at least somewhat entertaining to people
    who are reading this.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Oh, I think it will be. I mean, for many people, I think
    relating it to both Lego and Minecraft will be a really good way of relating DevOps
    to the real world.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Kohsuke Kawaguchi**: Thanks, Victor. This was fun. I''m looking forward to
    seeing your book.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Thank you for taking the time to talk to me.'
  prefs: []
  type: TYPE_NORMAL
