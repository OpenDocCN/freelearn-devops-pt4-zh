- en: Introducing Kohsuke Kawaguchi
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍川口浩介
- en: A respected developer and popular speaker, Kohsuke Kawaguchi is perhaps best
    known for creating Jenkins, a CI platform that has become a widely adopted and
    successful community-driven open source project. Kohsuke's principles behind the
    Jenkins community—extensibility, inclusiveness, and low barriers to participation—are
    many of the driving factors in DevOps. You can follow him on Twitter at `@kohsukekawa`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名备受尊敬的开发者和广受欢迎的演讲者，川口浩介也许最为人所知的是创建了Jenkins，这是一个被广泛采纳并成功成为社区驱动开源项目的持续集成平台。川口浩介在Jenkins社区背后的原则——可扩展性、包容性和低门槛参与——是DevOps发展的许多驱动因素之一。您可以在Twitter上关注他，用户名为`@kohsukekawa`。
- en: '**Viktor Farcic**: Before we delve into our conversation about DevOps, could
    you tell us a little about yourself?'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇克**：在我们深入探讨DevOps之前，您可以先简要介绍一下您自己吗？'
- en: '**Kohsuke Kawaguchi**: I''m probably best known as the creator of the Jenkins
    project, which started at the CI server, and is now more broadly used in the general
    computational industry and automation. Currently, I''m the CTO of CloudBees, a
    company that''s involved in a number of things, among which is productizing Jenkins,
    and helping companies through their digital transformation.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**川口浩介**：我可能最为人所知的是Jenkins项目的创始人，该项目起初是一个持续集成服务器，现在在广泛的计算行业和自动化领域中更为普遍。目前，我是CloudBees的首席技术官，这是一家涉足多个领域的公司之一，其中包括产品化Jenkins，以及帮助公司进行数字化转型。'
- en: What is DevOps?
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是DevOps？
- en: '**Viktor Farcic**: So then, a simple question for you: what is DevOps?'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇克**：那么，一个简单的问题：什么是DevOps？'
- en: '**Kohsuke Kawaguchi**: If I''m totally honest, I feel like DevOps is a bit
    of an overused word today. In fact, even I sometimes wonder what people really
    mean by it. What DevOps is truly depends on several factors. I personally associate
    DevOps with this growing trend of, over the last few decades, more automation
    and shorter and shorter feedback cycles.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**川口浩介**：老实说，我觉得今天DevOps这个词有点被滥用了。事实上，我自己有时候也在思考人们究竟指的是什么。DevOps的真正含义取决于几个因素。我个人将DevOps与这种趋势联系起来，这种趋势在过去几十年里，自动化程度越来越高，反馈周期也越来越短。'
- en: '"I feel like DevOps is a bit of an overused word."'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '"我觉得DevOps这个词有点被滥用了。"'
- en: —Kohsuke Kawaguchi
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: —川口浩介
- en: In the last five years, this automation feedback cycle has become all-encompassing
    in everything from writing code to managing Quality Assurance (QA) in order to
    push it out to production and run it. I think people generally default to practices
    like that and then call it DevOps. When I talk to these people working in the
    larger enterprises, I think they immediately see DevOps as erasing the organizational
    boundaries that are in place, which I think is obviously an important problem
    for them. I know some people like to emphasize that point and make it more of
    an organizational thing.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去五年中，从编写代码到管理质量保证（QA）并将其推向生产并运行，这种自动化反馈周期已经无所不在。我认为人们通常会默认采用这样的实践，然后称之为DevOps。当我与这些在大型企业工作的人交谈时，我觉得他们立即将DevOps视为消除现有组织边界的重要问题，这对他们显然是一个重要问题。我知道有些人喜欢强调这一点，并将其更多地看作是一个组织性的事情。
- en: The DevOps toolkit and its organizational impact
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps工具包及其对组织的影响
- en: '**Viktor Farcic**: Moving on to the DevOps toolkit, what tools do you see as
    empowering workers? Do you think that some tools fit better than others into whatever
    definition of DevOps people have?'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇克**：关于DevOps工具包，您认为哪些工具能够赋予工作者更大的权力？您认为某些工具比其他工具更适合人们对DevOps的定义吗？'
- en: '**Kohsuke Kawaguchi**: In the context of broader automation that goes across
    a number of different things and this ever-expanding need for automation with
    human control, the tool is obviously the primary means of enabling automation.
    I know a lot of Jenkins users see the world that way.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**川口浩介**：在跨多个不同事物的广泛自动化背景下，以及这种对自动化与人类控制需求日益扩展的情况下，工具显然是实现自动化的主要手段。我知道许多Jenkins用户是这样看待这个世界的。'
- en: Software developers like myself enjoy inventing tools. That's what we do. So,
    given that world view, it's only natural that we come up with our own tools to
    bridge those gaps and expand automation even more, because without automation,
    you can't create shorter feedback cycles, which is a critical part of DevOps.
    For me, this is the interesting part. It feels closer to what we can solve, as
    opposed to the organizational structure problem in enterprises, which is not only
    dictated by those technical concerns, but lots of other factors. For example,
    there's a good compliance reason why development and operations are separate;
    it's because it's seen, historically, as a well-maintained compliance necessity.
    Fundamentally, it's not a technology fight.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 像我这样的软件开发人员喜欢发明工具。这就是我们的工作。所以，从这个世界观出发，我们自然而然地会想出自己的工具，来填补这些空白，并进一步扩大自动化，因为没有自动化，你就无法创造更短的反馈周期，而这正是DevOps的关键部分。对我来说，这才是最有趣的部分。它感觉更贴近我们能够解决的领域，相较于企业中的组织结构问题，后者不仅仅是由技术问题决定的，还有许多其他因素。例如，开发和运维分开的确有很好的合规理由；历史上，它被视为一种维护良好的合规必要性。从根本上来说，这不是一场技术上的斗争。
- en: '**Viktor Farcic**: You''re the creator of Jenkins, one of the most popular
    open source tools out there, and you''re also the CTO of a company that, as you
    said yourself, works with enterprise companies. Do you think that there is a significant
    difference between how the tools and processes operate on smaller greenfield open
    source-type companies versus those found in enterprises?'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔西奇**：你是Jenkins的创造者，它是最受欢迎的开源工具之一，你还是一家公司CTO，正如你自己所说，这家公司与企业合作。你认为小型绿色田地式开源公司和大型企业之间，工具和流程的运作有显著区别吗？'
- en: '"There''s a good compliance reason why development and operations are separate;
    it''s because it''s seen, historically, as a well-maintained compliance necessity.
    Fundamentally, it''s not a technology fight."'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: “开发和运维分开有很好的合规理由；历史上，它被视为一种维护良好的合规必要性。从根本上来说，这不是一场技术上的斗争。”
- en: —Kohsuke Kawaguchi
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: —川口浩介
- en: '**Kohsuke Kawaguchi**: The kinds of problems and challenges that the enterprise
    people need to deal with are just in a different layer from the smaller guys.
    For the smaller folks, time is money. As I said before, these smaller operations
    often don''t have too many people on staff to begin with, so they have a lot more
    flexibility in choosing how they work.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**川口浩介**：企业人员需要处理的那些问题和挑战，和小公司面临的层次不同。对于小公司来说，时间就是金钱。正如我之前所说，这些小型企业通常员工人数不多，所以他们在选择工作方式上有更大的灵活性。'
- en: Compliance is usually not as real; it doesn't mean you can ignore it, but you
    can fly under the radar. In other enterprises, when provisioning new employees,
    the segregation you have to think about is like optimizing for a global, not just
    a local, team. It's no wonder one group feels the other group is a bit of an idiot.
    They each have different challenges.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 合规性通常没有那么真实；这并不意味着你可以忽视它，但你可以“低调”一点。在其他企业中，当为新员工提供资源时，你必须考虑的分隔问题就像是为全球团队而非本地团队进行优化。难怪有一方觉得另一方有点傻。他们各自面临不同的挑战。
- en: '**Viktor Farcic**: As an example, when I go to different booths at DockerCon,
    it''s "DevOps, DevOps, DevOps." All of the software vendors have some form of
    DevOps associated with them now. What do you think is driving that?'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔西奇**：举个例子，当我去DockerCon的不同展位时，看到的都是“DevOps, DevOps, DevOps”。现在所有的软件供应商几乎都与DevOps有关。你认为是什么驱动了这一趋势？'
- en: '**Kohsuke Kawaguchi**: I want to say two things.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**川口浩介**：我想说两件事。'
- en: First, if I look at the decade-long march toward more automation that I talked
    about, then we're talking about more than just DevOps. It now includes infrastructure,
    services, VMs, or software-defined networks. In this broad trend, you can include
    a practice such as continuous integration, which, at this point, is about 10 years
    old. Today, DevOps is used as the go-to label for this march. I think this march
    will continue, but at some point, it'll take on a different name.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，如果我看一下我所说的那种十年的自动化进程，那么我们谈论的不仅仅是DevOps。现在它包括了基础设施、服务、虚拟机或软件定义网络。在这个广泛的趋势中，你可以包括像持续集成这样的实践，而持续集成至今大约有十年历史了。今天，DevOps被用作这场进程的通用标签。我认为这场进程会继续，但在某个时刻，它会有一个不同的名称。
- en: Second, we, the engineers, might roll our eyes at the fact that everyone is
    saying DevOps and twisting its meaning to whatever fits their agenda, but we also
    underestimate the importance of communicating this stuff in a way that a broader
    audience understands, which is very difficult to do.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们这些工程师可能会对每个人都在谈论 DevOps 并根据自己的议程扭曲其含义而翻白眼，但我们也低估了以一种更广泛的受众能够理解的方式进行沟通的重要性，这实际上是非常困难的。
- en: In order to achieve changes that we know are necessary, as engineers, you have
    to rally your organization, which means communicating with people who are not
    engineers. Terms such as "DevOps" are rather useful ways of capturing the ideas,
    and when a lot of people say the same thing in different ways, it puts some weight
    behind the credibility of the idea. In a way, therefore, all of these vendors
    saying "DevOps" are doing us a favor.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现我们知道是必要的变革，作为工程师，你必须动员你的组织，这意味着要与那些非工程师的人进行沟通。像 “DevOps” 这样的术语是非常有用的方式来捕捉这些思想，当很多人以不同的方式说相同的事情时，这会增加这个观点的可信度。因此，所有这些供应商说
    “DevOps” 其实是在帮我们一个忙。
- en: '**Viktor Farcic**: I''ve heard a lot lately about those organizational changes
    where they''re moving everything to the left. What do you think about that? I
    mean, tools to me are obvious, in that you pick a tool that does the job; you
    learn how to use it and implement it. In your view, what are the other changes
    that need to be applied?'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：我最近听到很多关于组织变革的事情，大家都在把一切推向左侧。你怎么看？对我来说，工具是显而易见的，就是选择一个能完成工作的工具；学习如何使用它并实现它。在你看来，还有哪些其他的变革需要实施？'
- en: '**Kohsuke Kawaguchi**: Yeah, there are obviously things at the technology level
    as you say, and then there''s other challenges. One example I can give you is
    that the infrastructure around the Jenkins product itself has only a somewhat
    limited capacity, so when we wanted to shift more QA to the left, we could only
    do so much. In other words, it takes money, and that''s a hard thing to come by
    in an open source project.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kohsuke Kawaguchi**：是的，正如你所说，技术层面显然有很多问题，还有其他的挑战。我可以给你举个例子，Jenkins 产品本身的基础设施只有有限的容量，所以当我们想要将更多的
    QA 工作推向左侧时，我们能做的也非常有限。换句话说，这需要资金，而在开源项目中，资金往往很难获得。'
- en: Then, there's a challenge fundamental to QA. QA is actually a never-ending challenge
    to automate most things, and it's not easy. I used to work on a compiler, and
    so I used to think naively that testing was super easy—that it's actually completely
    deterministic. I have an input, I run it through the program, and I get output.
    I then compare that with what the output should be and then I'm done. But most
    of the interesting apps that people are writing are very difficult to actually
    measure out in this way.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，还有一个对 QA 至关重要的挑战。QA 实际上是一个永无止境的挑战，需要自动化大部分工作，而且这并不容易。我曾经做过编译器工作，所以我曾天真地认为测试是非常简单的——实际上它是完全确定的。我有一个输入，运行程序得到输出。然后我将输出与应该得到的输出进行比较，然后就完成了。但是大多数有趣的应用程序，实际上很难通过这种方式来衡量。
- en: '"QA is actually a never-ending challenge to automate most things."'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: “QA 实际上是一个永无止境的挑战，需要自动化大部分工作。”
- en: —Kohsuke Kawaguchi
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: —Kohsuke Kawaguchi
- en: Once, I went to a car manufacturer where they had this tower full of headlights.
    They were testing a little microcontroller that controlled the headlights. Imagine
    the challenge of mounting them up on a tower, verifying that a light actually
    turned on, resetting the hardware, and so on. All of that is work. Just on the
    technology front, there are still tremendous challenges like that. Every time
    we want to do more QA, there's a never-ending list of problems like this that
    need to be tackled.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有一次，我去了一家汽车制造商，他们有一座塔，上面装满了车头灯。他们正在测试一个控制车头灯的小型微控制器。想象一下，把它们安装到塔上，验证灯是否真的亮起，重置硬件等等。这些都是工作。仅仅在技术方面，仍然有很多类似的巨大挑战。每次我们想做更多的
    QA，总有一长串这样的难题需要解决。
- en: '**Viktor Farcic**: Not to mention those organizational challenges if you''re
    in those companies.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：更不用说如果你在那些公司里，面临的组织挑战了。'
- en: '**Kohsuke Kawaguchi**: Exactly! You have those people in different groups,
    and you are used to operating in certain ways, and your left-shifting happens
    at a different pace and at different parts of the project. If you think about
    somebody who is working on an operations team and is interfacing 100 different
    operations teams, and only one wants to do things differently, the reaction is,
    "Look, I can''t accommodate things just for you."'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kohsuke Kawaguchi**：完全正确！你有不同小组的人，你习惯以某种方式操作，而你的左移进程在项目的不同阶段以不同的速度进行。如果你想象一下，有人正在一个运营团队工作，接触着100个不同的运营团队，而只有一个团队想要以不同的方式做事，那么反应就是，“看，我不能只为你一个人调整。”'
- en: 'Those things can always be challenging. I''ll give you another example of faster
    delivery creating a friction downstream. The marketing team: the things they do,
    such as running marketing campaigns or events, are more compatible with big releases.
    You don''t want to issue a press release just for one feature, right? Same thing
    with the customer-facing guys. They don''t want to bombard customers with communication.
    You want to batch things up. As engineering work becomes more continuous, those
    people also need to change the way they work. That''s nothing new; it''s not as
    if I made this amazing discovery that nobody else knew before. It''s easier said
    than done.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题总是充满挑战。我再给你举个例子，讲讲更快的交付如何在下游产生摩擦。市场营销团队：他们做的事情，比如营销活动或事件，更适合大规模发布。你不会因为一个功能就发布新闻稿，对吧？客户接触团队也是如此。他们不想通过过多的沟通去打扰客户。你希望将事情批量处理。随着工程工作变得更加连续化，这些人也需要改变他们的工作方式。这并不是什么新鲜事，不能说是我发现了别人都不知道的惊人发现。说起来容易做起来难。
- en: The hype around containers
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 容器的炒作
- en: '**Viktor Farcic**: Speaking of technology, all the hype over the last couple
    of years has been about containers. How do you see that fitting into this whole
    picture?'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：说到技术，过去几年所有的炒作都集中在容器上。你怎么看容器在整个局面中的作用？'
- en: '**Kohsuke Kawaguchi**: When I worked at Sun Microsystems, we had our own operating
    system there called Solaris. I remember an internal conference where they talked
    about this thing called Solaris Zones. They would say, "Oh, we can split the user
    space into different portions, and we can allocate different CPU sizes, RAM, and
    so on to them. They will be like a different set of computers with virtually zero
    overhead." So now, looking back, I can see that what they were doing was actually
    putting in place the building blocks of what became containers.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kohsuke Kawaguchi**：我在Sun Microsystems工作时，我们有一个自己的操作系统，叫Solaris。我记得在一个内部会议上，他们谈到了一个叫做Solaris
    Zones的东西。他们说，“哦，我们可以把用户空间划分为不同的部分，并为它们分配不同的CPU大小、内存等。它们就像一组不同的计算机，几乎没有开销。”所以现在回头看，我可以看到他们其实是在构建后来的容器技术的基础。'
- en: The Solaris guys must have designed this feature, fully aware of the impact
    it can create. But it had zero traction. There were a number of other similar
    examples. The thing that I took away from Solaris is that we, as open source engineers,
    often tend to think that if you just put the code out there and explain what it
    does, then other like-minded developers are able to look at it and get the same
    perspective as yours and then be able to use it. It turns out that's completely
    not true, and that's something I didn't appreciate before.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Solaris团队一定是有意识地设计了这个功能，充分意识到它可能带来的影响。但是它根本没有引起关注。还有许多类似的例子。从Solaris中我得到的启示是，作为开源工程师，我们常常认为，只要把代码发布出去，并解释它的功能，那么其他有相同想法的开发者就能理解，并从他们的角度看待问题，进而能够使用它。结果证明，这完全不是事实，这也是我之前没有意识到的。
- en: The Solaris guys put all of the nuts, bolts, and engines together to do this
    new hard thing of isolations and they expected the rest of us to grok the point
    of it, and we didn't. It took this certain packaging and positioning for the mainstream
    to really see the value of it, so that was, for me, an interesting history lesson.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Solaris团队把所有的螺丝、螺母和引擎都组合在一起，做成了这个新难度的隔离功能，他们期望我们其他人能理解其中的要点，但我们并没有理解。它需要通过某种打包和定位，才能让主流真正看到它的价值，这对我来说是一个有趣的历史课程。
- en: '**Viktor Farcic**: But what are your views on containers? That''s obviously
    a key part of everything that we do in this field.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：但你对容器的看法是什么？显然，它是我们在这个领域做的一切的关键部分。'
- en: '**Kohsuke Kawaguchi**: Obviously, I think containers are great. I just can''t
    believe we still have to actually say they''re a good thing, but this landscape
    is moving very rapidly. I remember going to one of the DockerCon conferences and
    feeling like these guys are going to be the next VMware, as they will own the
    corporations and the large enterprises that are going to deploy containers in
    the hundreds of thousands. Yet, within just a few years, what we have discovered
    is the interest in layers moved up. Containers are considered a good thing, but
    now it''s only as exciting as Unicode. Everyone uses it and nobody cares.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**河口幸子**：显然，我认为容器非常棒。我简直不敢相信我们仍然需要说它们是好东西，但这个领域正在非常快速地发展。我记得曾经参加过一次 DockerCon
    会议，感觉这些人将会是下一个 VMware，他们将占据那些会部署数十万容器的企业和大型公司。然而，在短短几年内，我们发现兴趣的层次向上移动了。容器被认为是好东西，但现在它已经和
    Unicode 一样不再令人激动。每个人都在用，而没有人关心。'
- en: '"Obviously, I think containers are great. I just can''t believe we still have
    to actually say they''re a good thing, but this landscape is moving very rapidly."'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: “显然，我认为容器非常棒。我简直不敢相信我们仍然需要说它们是好东西，但这个领域正在非常快速地发展。”
- en: —Kohsuke Kawaguchi
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: —河口幸子
- en: I was shocked at the pace of the amazing work in this space. Right now, I think
    that Kubernetes is all the rage. But, on the horizon, if you look at what Amazon
    is trying to do, they are essentially hiding Kubernetes almost like an implementation
    detail.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我对这一领域惊人的发展速度感到震惊。现在，我认为 Kubernetes 正在风头最劲。但是，如果你看看亚马逊的未来动向，他们实际上几乎把 Kubernetes
    隐藏起来，像是一个实现细节。
- en: As soon as something dominates one layer, that dominance immediately moves the
    conversation upstack. Now, people will be talking about all of the higher-level
    values, integrating those, and how to hide them behind. Unicode and TCP—it's all
    the same. I think this is already happening with Kubernetes. That's what I mean
    by "boring."
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦某个东西在某一层级占据主导地位，这种主导地位就会立即推动对话向上发展。现在，人们开始讨论所有更高层次的价值观，整合它们，并如何将其隐藏在背后。Unicode
    和 TCP——它们是一样的。我认为这已经在 Kubernetes 中发生了。这就是我所说的“无聊”。
- en: '**Viktor Farcic**: The point of good technology is that if it becomes boring,
    but everybody still uses it, then it''s accomplishing its mission.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：好技术的关键是，如果它变得无聊，但每个人仍然使用它，那它就完成了它的使命。'
- en: '**Kohsuke Kawaguchi**: I think that''s the ultimate hall of fame for engineers—achieving
    "good technology" that''s become so boring nobody talks about it. I live in San
    Jose, so I occasionally cross the Golden Gate Bridge, which is a magnificent piece
    of engineering. I have no idea who built it, but I''m sure that a lot of hard
    engineering work went into it. Most people don''t pause to think about the work
    involved, even though they benefit from it.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**河口幸子**：我认为这是工程师们的终极名人堂——实现了“好技术”，这种技术变得如此无聊，没人再谈论它。我住在圣荷西，所以我偶尔会跨越金门大桥，那是一个壮丽的工程奇迹。我不知道是谁建造了它，但我确信其中蕴含了大量艰苦的工程工作。尽管人们从中受益，但大多数人并不会停下来思考其中的工作。'
- en: Sometimes, I feel that the world should recognize these people's work more,
    but then I also think these people probably don't need the validation from the
    whole world. I bet they know they've done a great work.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我觉得这个世界应该更加认可这些人的工作，但我也觉得这些人可能根本不需要来自全世界的认同。我敢打赌，他们知道自己已经做出了伟大的工作。
- en: Conferences, open source, and the US versus China
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 会议、开源、美国与中国
- en: '**Viktor Farcic**: Right now, you''re the CTO of CloudBees, where you''re in
    charge of technology. I''m curious; how do you follow up with all of that? I''m
    asking this simply because I don''t know how to do it myself. Every time I visit
    a conference, I have the impression that I need another year just to learn what
    each of those programs does.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：现在，你是 CloudBees 的首席技术官，负责技术方面的工作。我很好奇，你是如何应对这一切的？我之所以问这个问题，仅仅是因为我自己也不知道该怎么做。每次参加一个会议，我都有一种感觉，那就是我需要再花上一年的时间，才能搞清楚那些程序到底在做什么。'
- en: '**Kohsuke Kawaguchi**: I wish I knew the answer. I, too, struggle with keeping
    up with what''s going on. I find it useful to go to conferences because people
    there are trying to explain things to you, as opposed to expecting you to grok
    things on your own. At the same time, in the grand scheme of things, people like
    you and I are probably good at making sense of the rough bits out there, so from
    that perspective, going to conferences is a bit of a waste of time because we''d
    probably learn a lot more on our own in the same amount of time it takes to travel.
    Also, when you are a producer of a technology, conferences are great ways to hear
    from people who are using the product. It''s always worthwhile to listen to them.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**川口浩介**：我希望我知道答案。我自己也在努力跟上发生的事情。我觉得参加会议很有用，因为那里的人会试图向你解释事情，而不是期待你自己去理解。与此同时，从更宏观的角度来看，像你我这样的人可能擅长理解那些模糊不清的部分，所以从这个角度来说，参加会议有点浪费时间，因为我们可能在相同的时间里自己学到更多东西，而不需要花时间去旅行。此外，当你是技术的生产者时，会议是一个很好的方式，可以听到使用你产品的人的反馈。听取他们的意见总是值得的。'
- en: Another reason I go to conferences is that I personally can't watch a recorded
    video. I just can't keep my attention for anything longer than a minute. I start
    watching a YouTube video and then within 15 seconds I start multitasking, and
    then, next thing you know, I completely lose track of what the video is saying.
    If I could fix that about myself, I'd be a lot more efficient in ingesting information.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我去参加会议的另一个原因是，我个人无法看录制的视频。我根本无法长时间集中注意力。我开始看 YouTube 视频，然后在 15 秒钟内就开始做多任务处理，接下来，不知不觉中，我完全失去了对视频内容的关注。如果我能改善这一点，我在获取信息时会更加高效。
- en: I also think there's some truth in the idea of "tested by time." If I continue
    to hear about something for a long period of time, then it's probably worth paying
    attention. It's the same with "word of mouth." If people you trust are excited
    about something, it's probably worth paying attention, too. I think, realistically,
    those are the only ways that normal people can use to filter signal from noise.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我也认为“经得起时间考验”这一观点是有一定道理的。如果我长时间听到某件事情，那么它可能值得关注。就像“口碑”一样。如果你信任的人对某件事情感到兴奋，那也很可能值得关注。我认为，实际上，普通人过滤信号与噪音的唯一方式就是这些。
- en: '**Viktor Farcic**: I don''t know how they manage, and maybe they don''t. What''s
    your feeling about open source? When you started your career, it wasn''t a thing,
    but now it is. Is there still a future in projects that are closed source from
    the start?'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：我不知道他们是怎么管理的，也许他们根本没管理。你对开源有什么看法？当你开始你的职业生涯时，开源还不是一个热门话题，但现在已经成了。那么，从一开始就是闭源的项目，是否还有未来？'
- en: '**Kohsuke Kawaguchi**: Before we go into that, I just need to correct you.
    Open source has been around for a good amount of time, long before I started Jenkins.
    I think it still demonstrates my previous point about finding more viable ways
    to socialize DevOps. I really do believe that, fundamentally, open source is a
    better way of developing software. I''ve seen first-hand a number of proprietary
    software defeated by open source. We''ve talked about Sun and Solaris, so there''s
    my case.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**川口浩介**：在我们谈这个之前，我得纠正你一下。开源已经存在很长时间了，远在我开始做 Jenkins 之前。我认为它仍然证明了我之前的观点，那就是寻找更可行的方式来推广
    DevOps。我真的相信，开源本质上是一种更好的软件开发方式。我亲眼见过许多专有软件被开源所打败。我们已经谈到过 Sun 和 Solaris，所以这就是我的例子。'
- en: When I think about what made open source so successful, I think a key is that
    open source allowed new ideas from anywhere to be tested out more rapidly and
    thus quickly converging into a better working solution. Innovations happen everywhere,
    and that was a key differentiator.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当我思考是什么让开源如此成功时，我认为一个关键因素是，开源让来自各个地方的新想法可以更快速地被测试，从而迅速地凝聚成更好的解决方案。创新无处不在，这是一个关键的区分因素。
- en: But I feel, nowadays, there's another emerging differentiator in the different
    axis, which is the scale of the problem that they are dealing with.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我觉得，现如今，在不同的维度上，另一个正在出现的区分因素是他们所面对的问题的规模。
- en: '**Viktor Farcic**: Can you clarify that a bit?'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：你能再澄清一下吗？'
- en: '**Kohsuke Kawaguchi**: I''ve spent a good chunk of my professional career in
    Japan. In the worldwide software development market, Japan has about 10 to 15
    percent share, so it''s no small chunk, but it''s not a majority either. Because
    of the various challenges related to language and time zone, Japanese software
    companies are by and large only solving the problems for their domestic market.
    It''s a closed market.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kohsuke Kawaguchi**：我在日本度过了职业生涯的很大一部分。在全球软件开发市场中，日本大约占有10%到15%的份额，因此这不是一个小市场，但也不是大多数市场。由于语言和时区等各种挑战，日本的软件公司大多只解决国内市场的问题。它是一个封闭的市场。'
- en: Japan has around 100 million people. If you're running a service and you're
    serving the entirety of Japan, your scaling challenge is capped at 100 million.
    I attended developer conferences in China and what I realized is that even though
    their domestic market is just as closed, it is far bigger. So, their biggest service
    companies are facing and solving the kinds of scaling problems that Japanese companies
    haven't even thought of.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 日本大约有1亿人。如果你在运营一个服务，并且服务的对象是整个日本，你的扩展挑战最多也就只有1亿人。我参加了中国的开发者会议，意识到尽管他们的国内市场同样封闭，但它要大得多。所以，他们最大的服务公司正在面临并解决一些日本公司甚至未曾想到的扩展问题。
- en: I was quite impressed that China was talking about how they need machine learning
    to help our operations. In Japan, that's a science fiction problem, whereas in
    China, that's a real problem today. The only other market in the world that rivals
    that is the United States. So, I'm convinced that our technology landscape in
    the next decade will be a duopoly between the US and China.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我很震惊中国谈论如何需要机器学习来帮助我们的运营。在日本，这是一个科幻问题，而在中国，这是今天的一个现实问题。全球唯一能与之匹敌的市场是美国。所以，我坚信在接下来的十年里，我们的技术领域将成为美国和中国的双头垄断。
- en: Because of the scale, when a new problem first gets discovered in those markets,
    they get solved, and they become available to the rest of the world, so the rest
    of the world doesn't get to really innovate.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 由于市场的规模，当这些市场首次发现新问题时，它们会被解决，并且解决方案会传递给全世界，这样其他国家就不会真正进行创新。
- en: '"I was quite impressed that China was talking about how they need machine learning
    to help our operations. In Japan, that''s a science fiction problem, whereas in China,
    that''s a real problem today."'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: “我很震惊中国谈论如何需要机器学习来帮助我们的运营。在日本，这是一个科幻问题，而在中国，这是今天的一个现实问题。”
- en: —Kohsuke Kawaguchi
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: —Kohsuke Kawaguchi
- en: What I'm trying to say is that the exposure to challenges at the frontier is
    becoming as big a differentiator as open source, if not more. I said innovations
    used to happen everywhere, but I feel innovations are happening closer to challenges
    of large markets. People say end user companies are now the source of innovations,
    not vendors, and I think this is for the same reason. So that's something of a
    prospect that I try to keep in mind.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我想说的是，接触到前沿挑战的机会正变得和开源一样，甚至更具区分度。我曾说过创新曾经发生在各地，但我现在感觉创新正发生在接近大市场挑战的地方。人们说最终用户公司现在是创新的源泉，而不是供应商，我认为这也是同样的原因。所以，这是我始终保持在心中的一个前景。
- en: DevOps in the next ten years
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 未来十年内的 DevOps
- en: '**Viktor Farcic**: Where do you see DevOps going in the next ten years?'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：你怎么看待未来十年内 DevOps 的发展？'
- en: '**Kohsuke Kawaguchi**: I wish I had a better sense of the future to say interesting
    things about it. Like I''ve been saying, I would say the obvious direction is
    more automation.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kohsuke Kawaguchi**：我希望我能更好地把握未来，来谈论一些有趣的事情。就像我一直说的，我认为显而易见的方向是更多的自动化。'
- en: There will be more demand for software and technology all over the world. For
    example, every time I have to go through the airport and show my driver's license
    to authenticate myself to the system, I think, this should be a solvable problem.
    So, yeah, there will be more software, and there will be more automation.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 世界各地对软件和技术的需求将会增加。例如，每次我经过机场并展示我的驾照来认证自己时，我会想到，这应该是一个可以解决的问题。所以，是的，会有更多的软件，也会有更多的自动化。
- en: I guess I just can't get away from automation! Beyond that, I think data and
    machine learning should play a central role in the way we develop software as
    well. Those technologies have been disrupting so many things, it's silly to think
    our own profession is immune from that. But I don't know how quickly those things
    will happen. If I had that magic 8-ball, I'd be working on it and not talking
    to you now.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我想我就是离不开自动化！除此之外，我认为数据和机器学习在我们开发软件的过程中应该扮演核心角色。这些技术已经打破了许多领域，认为我们自己的职业不受影响是愚蠢的。但我不知道这些事情会发生得有多快。如果我能预测这些事，我现在应该是在做那件事，而不是在跟你说话。
- en: '"There will be more software, and there will be more automation."'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: “将会有更多的软件，也会有更多的自动化。”
- en: —Kohsuke Kawaguchi
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: —川口耕介
- en: '**Viktor Farcic**: You''ve mentioned automation a couple of times. When I visit
    companies, there''s always a huge number of people doing repetitive manual tasks
    over and over again. I was even involved in conversations where people are questioning
    automation, which completely doesn''t make sense to me. What''s not to like about
    automation? Why aren''t we automated already?'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：你提到过几次自动化。当我访问公司时，总是看到很多人在反复做重复的手动任务。我甚至参与过一些人质疑自动化的对话，这对我来说完全无法理解。有什么不喜欢自动化的呢？为什么我们还没有实现自动化？'
- en: '**Kohsuke Kawaguchi**: Yeah, that''s funny. The truth is sometimes I feel the
    same way. I feel like, as the outsider, we''re landing into some places, and we
    do sometimes underestimate the rationality of the status quo. There''s always
    more to it than what meets the eyes—consideration for things I don''t understand,
    nuances that I don''t get, the context, those sorts of things. I don''t think
    it hurts for us to be a little humbler to those things. I''m not surprised if
    my parents think that our work is completely automatable. You go to the office,
    you sit in front of a computer, and then you come back. You seem to be repeating
    that every single day. What''s not automatable about that?'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**川口耕介**：是的，这很有趣。其实有时候我也有同样的感觉。作为局外人，我们进入一些地方，确实有时会低估现状的合理性。事情总是比眼见的要复杂——我不理解的事物、我无法把握的细微差别、背景等等。我觉得我们对这些事情稍微谦虚一点并不坏。如果我的父母认为我们的工作完全可以自动化，我也不感到惊讶。你去办公室，坐在电脑前，然后再回家。你似乎每天都在重复这个过程。这有什么不能自动化的呢？'
- en: '**Viktor Farcic**: Exactly.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇**：完全正确。'
- en: '**Kohsuke Kawaguchi**: We need to be careful because we might be falling into
    that trap ourselves when we look at other people. That is not to say nobody is
    doing repetitive manual tasks that should be replaced. I''m sure there are some
    people who resist changes and what not. But my first reaction is always to assume
    that they see something I don''t. So, I don''t know. Personally, I don''t come
    across people who genuinely perform this repetitive work. Most of the time, I
    think people see their work as not overly repetitive.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**川口耕介**：我们需要小心，因为我们在看别人时，可能也会掉进那个陷阱。并不是说没有人在做那些应该被替代的重复手动工作。我敢肯定，也有些人会抗拒变化什么的。但我第一反应总是假设他们看到了我没有看到的东西。所以，我也不清楚。就我个人而言，我没遇到那些真的在做这种重复性工作的人。大多数时候，我认为人们看待自己的工作并不觉得它特别重复。'
- en: The other interesting perspective is, if you think of Japan, they've got traditional
    cultural things such as the tea ceremony, kendo, or judo. These are art forms,
    where they emphasize repetition, following the certain *kata* and repeating the
    same tasks to perfection. You start by mimicking a master, then you slowly develop
    your own style. What might look like circling in the same place to untrained eyes
    is actually a spiral movement upwards. What's implicit is the respect to the wisdom
    that your predecessors have built. There's also something deeply satisfying about
    the feeling of "this time I did it better than the last time." I think it's a
    key to motivate oneself for a long run. I think those are beautiful, though maybe
    it's just a part of the Asian psyche.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有趣的视角是，如果你想到日本，他们有传统的文化项目，比如茶道、剑道或柔道。这些是艺术形式，强调重复，按照一定的*型*，反复练习同样的任务直到完美。你从模仿大师开始，然后慢慢发展出自己的风格。看起来好像是在同一个地方打转，但对于没有训练的人来说，实际上这是一个向上的螺旋运动。隐含其中的是对前辈智慧的尊重。每次“这次我做得比上次更好”的感觉也很让人满足。我认为这是激励自己走得更远的关键。我认为这些很美丽，尽管这也许只是亚洲心态的一部分。
- en: '**Viktor Farcic**: As we start to wrap up, I would love to know, is there anything
    that really excites you in the industry right now?'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：在我们开始结束时，我很想知道，现在有没有什么事情真的让你在行业中感到兴奋？'
- en: '**Kohsuke Kawaguchi**: As technology people, we''re always excited to play
    with new toys. So, I guess playing with these new tools and new services is one
    thing that really excites me. Yesterday, I was playing with Google''s new text-to-speech
    engine, which was pretty good. It''s a kind of a black magic, and that''s cool,
    then I think about all of the things that we could do with that, such as an audiobook,
    voice navigation while driving, or whatever. You just never know what comes out
    of it. New technology is always fun like that.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kohsuke Kawaguchi**：作为技术人员，我们总是对玩新玩意儿感到兴奋。所以，我想玩这些新工具和新服务是让我非常兴奋的一件事。昨天，我在玩谷歌的新语音合成引擎，效果相当不错。这有点像黑魔法，很酷，然后我就开始想我们可以用它做些什么，比如有声书、开车时的语音导航，或者其他的。你永远不知道它能带来什么。新技术总是像这样有趣。'
- en: I do enjoy playing with these toys, but at the same time, some mundane problems
    also excite me. I go and see larger companies struggling with the problem of deploying
    their large hairy software quickly. Everyone has this problem of tests not being
    very reliable, or that they have too many tests and, most of the time, they are
    not doing anything useful. They are starting to question whether running all these
    tests is actually useful. I'm interested in seeing whether we can intelligently
    pick the subset of tests to run in the right order. I have a feeling that we can
    reduce the average turnaround time by an order of magnitude.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我确实喜欢玩这些玩意儿，但与此同时，一些平凡的问题也让我感到兴奋。我去看一些大公司在快速部署大型复杂软件时遇到的问题。每个人都有测试不可靠的问题，或者测试太多，且大部分时间它们并没有发挥什么有用作用。他们开始质疑是否运行所有这些测试真的有意义。我很感兴趣看看我们是否能智能地挑选出需要运行的测试，并按正确的顺序执行。我有一种感觉，我们能把平均周转时间缩短一个数量级。
- en: Another example of a mundane problem is the way that we track bugs, do the code
    change and then we get that verified. It's something that happens everywhere,
    and it's held together by people manually communicating and collaborating. I feel
    like some of them are ready for automation.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个平凡问题的例子是我们如何跟踪漏洞，进行代码更改，然后再进行验证。这是一个无处不在的问题，它通过人们的手动沟通和协作来维系。我觉得其中一些已经准备好进行自动化了。
- en: The connection between cross-stitching, Lego, and DevOps
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 十字绣、乐高和DevOps之间的联系
- en: I guess one person's mundane problem is somebody else's exciting challenge.
    Aside from that, cross-stitching.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我想，一个人的平凡问题可能是另一个人的激动人心的挑战。除此之外，还有十字绣。
- en: '**Viktor Farcic**: Cross-stitching? What exactly do you mean by that?'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：十字绣？你到底指的是什么？'
- en: '**Kohsuke Kawaguchi**: Cross-stitching is needlework. I started doing this
    because my wife picked it up and I thought it would be good to have a common hobby
    with her. It''s generally an old woman''s hobby. Let me explain cross-stitching
    in a way that geeks understand. Imagine a screen, and there are the pixels. Each
    pixel can be a different color. That''s how we build graphics. Cross-stitching
    is the exact same thing; it''s just on the piece of cloth, instead of a screen,
    and instead of pixels, you''re using colored threads. It''s just the analog version
    of a video screen. So, I stitch some video game characters and so on for fun.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kohsuke Kawaguchi**：十字绣是一种针线活。我开始做这个是因为我的妻子也做，我觉得和她有一个共同的爱好会很好。通常这是老年女性的爱好。让我用极客们能理解的方式解释一下十字绣。想象一下一个屏幕，上面有像素。每个像素可以是不同的颜色。我们就是这样构建图形的。十字绣和这个完全一样；只是它是在布上做，而不是在屏幕上，使用的是彩色线而不是像素。它只是视频屏幕的模拟版本。所以，我会绣一些视频游戏角色什么的，纯粹是为了好玩。'
- en: Now, obviously, the actual stitching is incredibly manual and repetitive. I
    feel like I should be able to automate this. If there's a programmable machine,
    as in a sewing machine, I want to see whether I can control it to do the right
    things. A machine that takes a JPEG or a PNG as an input, then it would cross-stitch
    things for me. I think that'd be awesome. That would allow me to say, I master
    everything about cross-stitching, and then I can move on to another hobby. I wish
    I could do something like that. I have never been able to find anybody in the
    cross-stitching community who has any passion for this kind of automation. Most
    fans of cross-stitching are there for enjoying conversations with others while
    they are stitching things, and so for them, the idea of automation is horrifying.
    They would say, what's the point of doing it? That's why I'm itching to find a
    venue in which to talk about it.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，显然，真正的十字绣操作是非常手动且重复的。我觉得我应该能把它自动化。如果有一台可以编程的机器，就像缝纫机一样，我想看看能不能控制它做正确的事情。一台可以接收JPEG或PNG格式图片作为输入的机器，然后为我做十字绣。我觉得那会很棒。那样我就能说，我掌握了十字绣的所有技巧，然后可以转向另一个爱好。我真希望能做成这样。我从来没能在十字绣社区找到任何一个对这种自动化充满热情的人。大多数十字绣爱好者之所以喜欢它，是因为他们喜欢在绣的时候和别人聊天，所以对于他们来说，自动化的想法是可怕的。他们会问，做这个有什么意义？这就是为什么我迫切想找到一个场所来谈论这些事情。
- en: If I get to do that, Lego will probably be the next.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我能做到这些，乐高可能是下一个。
- en: '**Viktor Farcic**: Lego and DevOps? That''s a conversation that I wasn''t expecting
    to have with you.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：乐高和DevOps？这是我没想到会和你讨论的话题。'
- en: '**Kohsuke Kawaguchi**: I''m a big Lego fan, and among the Lego community, you
    can have a never-ending conversation about how to sort and store your Lego blocks.
    You build something, and then you disassemble the model you''ve built. Most of
    you put Lego pieces in a big packet when you were small, and then you grow out
    of Lego and move on to something else. But for the rest of us who never grew out
    of Lego, and who continue to buy more and more Lego sets, the pieces get too many
    to just fit in the one packet. It''ll take forever to find pieces you want.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**河口弘介**：我是一个大乐高迷，在乐高社区里，你可以不断地讨论如何整理和存储你的乐高积木。你建造一个东西，然后把你建好的模型拆掉。你小时候大多数人都把乐高积木放在一个大袋子里，然后你长大后就不再玩乐高，转向其他东西了。但是对于我们这些从未对乐高失去兴趣的人来说，我们不断买更多的乐高套装，积木多到不能放进一个袋子里。找你想要的积木将会花费无数的时间。'
- en: I have several drawers full of Lego blocks, and as I was sorting them, naturally
    I started to think, "Wow, there's so many pieces, I need to automate this." People
    are actually doing that sort of thing. So, they build the machine, not just the
    software. It has a webcam that takes a picture of a brick on a conveyer belt,
    it matches the shape against a catalog, and then some sort of nozzle blows the
    air to push the piece into the right bin. That kind of automation is really fun,
    but then again, I just find myself trying to automate everything and anything
    possible. It's just how I am wired. I don't know if every other software developer
    feels the same. This story has no conclusion, but that's what excites me.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我有几个抽屉都装满了乐高积木，在整理它们的时候，自然我开始想着，“哇，积木这么多，我得自动化这个过程。”实际上，很多人真的是这么做的。所以，他们不仅仅是建造软件，而是建造机器。它配有一个摄像头，可以拍下传送带上积木的照片，然后将形状与目录中的形状进行比对，再通过某种喷嘴吹气把积木推到正确的箱子里。这种自动化真是有趣，但反过来，我发现自己总是试图自动化一切，做任何可能的自动化。这就是我的“工作方式”。我不知道其他软件开发人员是不是也有这种感觉。这个故事没有结论，但这正是让我兴奋的原因。
- en: '**Viktor Farcic**: I have the impression there''s a fear that if you do those
    things, then you''re automating yourself out of a guaranteed job position.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**维克托·法尔奇奇**：我觉得有一种恐惧，如果你做这些事情，你就是在把自己从一个“保证的工作岗位”中自动化出去。'
- en: '**Kohsuke Kawaguchi**: Wouldn''t that be perfect? Because now I can die since
    I''ve completely automated myself! Of course, we know there''s really no such
    thing as fully automating yourself away on anything, not even cross-stitching.
    I mean, what software development teaches us is that if you solve one problem
    by automation, you then get to face the next problem, and this ladder never ends.
    That''s kind of fun for me.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**河口弘介**：那不是很完美吗？因为现在我可以死心塌地地去做其他事情了，因为我已经完全实现了自我自动化！当然，我们知道没有什么事情是完全可以自动化的，甚至连十字绣也不行。我的意思是，软件开发教给我们的一点就是，当你通过自动化解决了一个问题时，你就会面临下一个问题，而这个阶梯永远不会结束。对我来说，这种循环是挺有趣的。'
- en: Take cross-stitching, for example, if I someday manage to produce an ultimate
    cross-stitching machine like I described, the next thing I'll start thinking about
    is probably how do I automate the management of my inventory of threads. At that
    point, I can stitch any design, so I'm pretty sure I will be using threads like
    crazy, at an unimaginable scale. Today, it takes a trip to a local store to get
    threads of the right color, which can take several days. That's okay when a stitching
    project is taking months, but not if it only takes 15 minutes. So, how do you
    optimize that?
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 比如十字绣，如果有一天我设法制作出我所描述的终极十字绣机器，我接下来可能会开始考虑如何自动化管理我的线材库存。到那时，我可以绣任何设计，因此我敢肯定我将以难以想象的规模使用这些线。今天，去当地商店买合适颜色的线可能需要几天时间。当一个绣品项目需要几个月时，这还可以接受，但如果它只需要15分钟，那就不行了。那么，如何优化这个过程呢？
- en: '"What software development teaches us is that if you solve one problem by automation,
    you then get to face the next problem, and this ladder never ends. That''s kind
    of fun for me."'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: “软件开发教会我们的事是，如果你通过自动化解决了一个问题，那么你就会面对下一个问题，而这个阶梯永远不会结束。对我来说，这有点有趣。”
- en: —Kohsuke Kawaguchi
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: —Kohsuke Kawaguchi
- en: Or think about all the secondary problems that the Minecraft people get hang
    up on. I had a mod that can create a programmable robot inside a Minecraft world,
    so I could program it to do mining or building. Once you automate the mining part,
    then great, but we have this almost infinite inventory of raw iron ore, and then
    you start to think, "Oh, now I need to automate the smelting part. Otherwise,
    I'm smelting this forever," and so you kind of keep going like that.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 或者想想《Minecraft》玩家遇到的那些次要问题。我曾经有一个可以在Minecraft世界中创建可编程机器人的MOD，因此我可以编程让它进行挖矿或建造。一旦你自动化了挖矿部分，那就太好了，但我们有几乎无限的原铁矿石库存，然后你就开始想，“哦，现在我需要自动化冶炼部分。不然我就永远在冶炼了，”于是你就这样一直走下去。
- en: '**Viktor Farcic**: That''s the freakiest story I''ve heard.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：这是我听过的最怪异的故事。'
- en: '**Kohsuke Kawaguchi**: I hope it''ll be at least somewhat entertaining to people
    who are reading this.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kohsuke Kawaguchi**：我希望这至少能对读者们带来一些娱乐性。'
- en: '**Viktor Farcic**: Oh, I think it will be. I mean, for many people, I think
    relating it to both Lego and Minecraft will be a really good way of relating DevOps
    to the real world.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：哦，我觉得它会是的。我的意思是，对很多人来说，我认为将它与乐高和《Minecraft》联系起来，会是一个非常好的方式，将DevOps与现实世界联系起来。'
- en: '**Kohsuke Kawaguchi**: Thanks, Victor. This was fun. I''m looking forward to
    seeing your book.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kohsuke Kawaguchi**：谢谢，Victor。这真有趣。我很期待看到你的书。'
- en: '**Viktor Farcic**: Thank you for taking the time to talk to me.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**Viktor Farcic**：感谢你抽时间和我交谈。'
