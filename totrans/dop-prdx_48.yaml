- en: Introducing Nirmal Mehta
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nirmal Mehta is Chief Technologist in the Strategic Innovations Group at Booz
    Allen Hamilton specializing in research, implementation, and integration of emerging
    technologies to Booz Allen's federal government client base. He leads the firm's
    efforts in digital research and development, immersive machine intelligence, and
    emerging technology strategy. In addition, he is a containerization subject matter
    expert and thought leader for DevOps practices. He was the lead architect on the
    high-profile GSA Integrated Award Environment AWS cloud platform, implementing
    a first-of-its-kind production open source, data-centric, microservices-based
    distributed application in the public sector. He is passionate about machine learning,
    immersive tech, open source, DevOps, and integrating emerging technologies to
    answer client needs. He focuses on bringing leading edge technologies to enterprise
    systems for commercial and public sector clients. He is a member of Docker Captains
    group. You can follow him on Twitter at `@normalfaults`, on LinkedIn at https://www.linkedin.com/in/nirmalkmehta/,
    and on the web: https://nirmal.io.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I want to start by simply asking you to say a little bit
    about yourself, Nirmal, and your relationship with DevOps.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: Throughout my career I''ve had the opportunity to see many
    organizations follow IT transformation paths, and through those experiences, I''ve
    seen what works and what doesn''t in our industry. I strive to distribute knowledge
    around emerging technologies, methodologies, and solutions—especially through
    DevOps!'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: So Nirmal, what does "DevOps" mean to you?'
  prefs: []
  type: TYPE_NORMAL
- en: The meaning of DevOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: DevOps is the application of process improvement techniques
    from the last century to our modern IT culture. If I had to offer a fuller definition,
    I''d say that DevOps is an IT operating model that focuses on using tools and
    cultural change to streamline and automate the delivery of IT services. It''s
    modeled after optimized manufacturing models from the last century by the likes
    of W. Edwards Deming.'
  prefs: []
  type: TYPE_NORMAL
- en: More simply, DevOps is transforming the culture of an organization into a mindset
    of achieving a shared goal, versus the tribes that are traditionally set up in
    an organization.
  prefs: []
  type: TYPE_NORMAL
- en: '"DevOps is transforming the culture of an organization into a mindset of achieving
    a shared goal, versus the tribes that are traditionally set up."'
  prefs: []
  type: TYPE_NORMAL
- en: —Nirmal Mehta
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Thanks, Nirmal, it''s interesting to see how everyone has
    such different ways to define DevOps. So, what do you think is the difference
    between DevOps and Agile?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: I think the twelve principles of Agile are guidelines. More
    importantly, I don''t think Agile was meant to be commercialized and taken over
    as it has been to the extent we see today. I think the organizations that are
    adopting Agile have been overthinking it a little.'
  prefs: []
  type: TYPE_NORMAL
- en: DevOps, on the other hand, is Agile applied across the whole organization, rather
    than just its developer process. Perhaps my distinction is merely semantic, but
    broadly speaking you could say that DevOps encompasses Agile methodologies. DevOps
    is like a superset.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Yes, I think DevOps is like inviting more expertise to an
    organization, or even more automation. This can open new positions in an organization,
    of course—and sometimes I see an absurd number of DevOps engineers in an organization.
    I honestly don''t even know what one of these is—how would you define a DevOps
    engineer?'
  prefs: []
  type: TYPE_NORMAL
- en: What is a DevOps engineer?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: This is where it gets controversial because there''s no such
    thing as a DevOps engineer. There shouldn''t even be a DevOps team because to
    me, it''s more of a cultural and philosophical methodology. It''s a process and
    a way of thinking about things and communicating within an IT organization.'
  prefs: []
  type: TYPE_NORMAL
- en: '"There''s no such thing as a DevOps engineer. There shouldn''t even be a DevOps
    team because to me, it''s more of a cultural and philosophical methodology."'
  prefs: []
  type: TYPE_NORMAL
- en: — Nirmal Mehta
  prefs: []
  type: TYPE_NORMAL
- en: But going back to a definition, I think that a DevOps engineer is a job that
    signals that an organization, instead of hiring both a developer and an operator,
    just wants one less person to do twice as much work.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I love that description. Even though no one but you will
    admit it, that''s often how it is in reality. You can tell just by looking at
    advertised job descriptions for DevOps engineer roles.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: I think organizations just want somebody who is willing to
    both build and operate the software. These DevOps engineer roles are all over
    the place, but there just isn''t a single accepted definition for what a DevOps
    engineer is.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The reason is that DevOps engineers are really engaged in two distinct things:
    tools and culture. I believe that DevOps is mostly about culture, but there are
    also some tools involved in the DevOps process that will naturally tilt your organization
    toward more DevOps practices. A DevOps engineer could then be defined as a person
    who is implementing those tools and some of those philosophies.'
  prefs: []
  type: TYPE_NORMAL
- en: Of course, simply installing some tools won't mean that an organization is automatically
    DevOps—you can misuse a tool regardless of how much magic is in it. So, it's important
    to also say that a DevOps engineer is more like a consulting role than someone
    who simply operates those toolsets and keeps those tools running.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, organizations just want someone to come in and implement those tools.
    And then eventually they're asked to just be a developer who also operates stuff.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Yes, I often see cases when existing teams simply get renamed.
    They continue performing the same set of tasks using the same processes and tools
    but under a more popular name.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: I was once on a project where they required a separate DevOps
    team, which to me didn''t make any sense at all. The DevOps team was on a separate
    contract, so they didn''t even work for the organization. So, this project had
    developers, a security team, operators, and a DevOps team.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, you tell me, what was that DevOps team supposed to do? Their only job was
    on the last step before deployment to production. That DevOps team didn't do anything
    except handle the sign off before the code went into production. That was not
    a DevOps team. They were just a random team, a random authority, that didn't have
    a purpose.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: That makes me think about sysadmins being renamed DevOps.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: Yes, that DevOps team was essentially a neutered quality
    assurance team that was renamed DevOps because it sounded sexy.'
  prefs: []
  type: TYPE_NORMAL
- en: There is still a lot of whitewashing in terms of DevOps today. As I've said
    in one of my talks, if you've spent more than a month trying to figure out your
    organization's DevOps, or you've already spent 15 meetings trying to figure out
    what your DevOps is, then you're overthinking it.
  prefs: []
  type: TYPE_NORMAL
- en: '"If you''ve spent more than a month trying to figure out your organization''s
    DevOps…then you''re overthinking it."'
  prefs: []
  type: TYPE_NORMAL
- en: —Nirmal Mehta
  prefs: []
  type: TYPE_NORMAL
- en: Not everything has to be complex! It's up to you how much complexity you want
    to put into the mix at any given time. Take a good look at your organization,
    pick some pain points, and just go from there. Reading some books and implementing
    one or two parts of those processes is probably a better start than debating what
    DevOps is for a month, which is something we love to do in IT. We love to just
    argue about stuff but get nothing done.
  prefs: []
  type: TYPE_NORMAL
- en: We like to be in our tribes, we like to shed responsibility, and we have this
    need for argument and for some oppositional force, and I think DevOps and Agile
    help to redefine who that opponent is. Instead of friction between internal groups,
    DevOps directs our confrontational energy toward the problem that we're trying
    to solve for our customer. DevOps brings us into conflict with the actual problem,
    rather than with each other.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: But then we end up with consultants selling us month-long
    training that is supposed to convert us into Agile experts?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: True, and that''s something I can get very philosophical
    about: why do we have to have so much training for Agile? I think all that training
    is contrary to the goal of Agile in the first place! We find ourselves enveloped
    in the minutiae of all that complexity and we forget the core principles of Agile.'
  prefs: []
  type: TYPE_NORMAL
- en: I think that's why the Agile people came up with the manifesto, to force us
    to print it out and put it on a wall. They knew that if we weren't reminded about
    the whole point of Agile, then we'd forget what we're really trying to achieve.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: That sounds like a misunderstanding and over-complication
    of Agile, which is in its essence, very simple.'
  prefs: []
  type: TYPE_NORMAL
- en: Overthinking DevOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: As an industry we love to overthink everything, and I think
    that DevOps has the same kind of issues.'
  prefs: []
  type: TYPE_NORMAL
- en: DevOps is very simple. DevOps is the application of techniques for process improvements
    that some start-ups, well-functioning organizations, and smart people implemented.
    These were shown to other people who said, "Yes, that sounds great; that's helping
    us be more efficient, reduce cost, or make better quality and, you know what,
    we might as well adopt it!"
  prefs: []
  type: TYPE_NORMAL
- en: '"As an industry we love to overthink everything, and I think that DevOps has
    the same kind of issues."'
  prefs: []
  type: TYPE_NORMAL
- en: —Nirmal Mehta
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s not overcomplicate DevOps. When it''s time to lose weight, simply put
    more calories out than you put in. That is the simple fact. Don''t be distracted
    by complex diets because you want an easy way out. It''s the same with DevOps,
    the philosophy is simple: get out of your own way.'
  prefs: []
  type: TYPE_NORMAL
- en: The DevOps philosophy – get out of your own way
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The DevOps philosophy is to get out of your own way. But this is too hard, of
    course, so we try to find a shortcut. This shortcut might be a tool, a consultant,
    some YouTube videos, or a book. At the end of the day though, we cannot get away
    from having to follow the philosophy. We can implement Jenkins all day, but we
    won't achieve anything unless we also follow the philosophy.
  prefs: []
  type: TYPE_NORMAL
- en: '"The DevOps philosophy is to get out of your own way. But this is too hard,
    of course, so we try to find a shortcut."'
  prefs: []
  type: TYPE_NORMAL
- en: —Nirmal Mehta
  prefs: []
  type: TYPE_NORMAL
- en: This is the fundamental shift that's taking place today in organizations—it's
    a realization that actual, productive change must be a little bit more painful.
    This is a deep cultural shift, and we must deal with people, their attitudes,
    and all that—including people who just don't want to change.
  prefs: []
  type: TYPE_NORMAL
- en: There's a lot of misinformation about what DevOps is in our industry today,
    and that is because no one wants to hear that it's all about simple but important
    truths like "more calories out," and a lot of people don't want to face change.
    Do you think organizations such as Facebook and Google are having those kinds
    of debates?
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I expect that Google and Facebook are having some important
    debates, right now, that the rest of us will have in fifteen years, about machine
    learning and neural networks. But Google has also been discussing SRE, for example?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: Yes, organizations such as Google have been taking some of
    the most recent debates and codifying them into service level agreements and Site
    Reliability Engineering (SRE) philosophies. There''s no escaping the pain.'
  prefs: []
  type: TYPE_NORMAL
- en: DevOps and SRE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Let''s explore how the Google SRE thing relates to DevOps
    then. How do you define an SRE?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: A site reliability engineer is an IT operations engineer
    who supports development teams and production systems based on Google DevOps methodologies.'
  prefs: []
  type: TYPE_NORMAL
- en: One of the big things to come out of the SRE philosophies is that there's a
    risk associated with the budget of how many hours the SRE team gives their project
    team for fixing whatever happens.
  prefs: []
  type: TYPE_NORMAL
- en: You can deploy as risky a piece of software as you want, but if you burn through
    that budget, that's on you. If you're providing a service that isn't as critical,
    you have a higher budget, and so you can take more risk. Or you could say, "You
    know what, I need to save that up for certain times of the year, or certain events,
    and balance that out."
  prefs: []
  type: TYPE_NORMAL
- en: This approach in Google's DevOps methodology removes the ability to skirt around
    the pain because it puts the pain at the front and center.
  prefs: []
  type: TYPE_NORMAL
- en: Resolving key pain points is something that a lot of organizations have difficulty
    with, and it's a very common problem with Agile. For example, if you're transitioning
    from Waterfall to Agile, then the project managers, leaders, and owners will all
    want Agile—but Agile with deadlines!
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: You''re saying that managers want others to adopt Agile,
    but they don''t always want to adapt their own way of working?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: Yes, exactly, those people want Agile with deadlines because
    deadlines allow someone to put the blame somewhere else.'
  prefs: []
  type: TYPE_NORMAL
- en: Deadlines are an escape route, whereas Agile just forces you to think about
    implementing at a more regular pace, or with prioritization, and to make decisions
    more frequently.
  prefs: []
  type: TYPE_NORMAL
- en: Not one person in leadership likes to make decisions at the frequency that Agile
    requires because decisions mean responsibility. And a lot of organizations and
    the folks working within them are masters at the craft of dodging responsibility.
    Agile forces that discussion at the beginning instead of having discussions about
    priority after the deadline or closer to the deadline.
  prefs: []
  type: TYPE_NORMAL
- en: '"Not one person in leadership likes to make decisions at the frequency that
    Agile requires because decisions mean responsibility."'
  prefs: []
  type: TYPE_NORMAL
- en: —Nirmal Mehta
  prefs: []
  type: TYPE_NORMAL
- en: DevOps is the same because it forces you to understand how to put your projects
    into production and to pay for it at the beginning of the cycle. In DevOps, you're
    trying to catch things at the beginning of the cycle, not the end.
  prefs: []
  type: TYPE_NORMAL
- en: A lot of problems we face today are because somebody was able to avoid making
    a decision until the very last minute—that is, when they were forced to make a
    decision. They probably knew what their decision was going to be, they just didn't
    have the confidence in that decision until they were forced into an answer.
  prefs: []
  type: TYPE_NORMAL
- en: Agile and DevOps force you to make decisions more frequently, and from the beginning.
    I think people have a hard time with the confidence that is required or the *okayness*
    with failure that one needs to feel, in order to be able to do that. Ironically,
    DevOps and Agile will tolerate you making bad decisions more frequently than the
    older methodologies!
  prefs: []
  type: TYPE_NORMAL
- en: Make [bad] decisions more often
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Are you saying that organizations and people in IT departments
    should make bad decisions more often?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: If you''re deploying four times a year, then you only have
    four opportunities to make a decision, and therefore each of those decisions has
    a big impact. If you are in Agile, you''re making a lot of smaller decisions.
    If you make a bad decision, you can just correct it at the next deadline, and
    you''ve lost very little. That''s the irony.'
  prefs: []
  type: TYPE_NORMAL
- en: '"If you are in Agile, you''re making a lot of smaller decisions. If you make
    a bad decision, you can just correct it at the next deadline, and you''ve lost
    very little."'
  prefs: []
  type: TYPE_NORMAL
- en: —Nirmal Mehta
  prefs: []
  type: TYPE_NORMAL
- en: Of course, it's still painful if you've made a bad decision, but for some reason
    we humans find it more painful to have to make a decision every two weeks.
  prefs: []
  type: TYPE_NORMAL
- en: I think these kinds of things happen in other industries as well, sometimes
    when there's even more on the line. In the aeronautics, manufacturing, or construction
    industries, for example, where when you make a big decision that goes wrong, there's
    a multi-million dollar consequence. Those kinds of organizations have evolved
    their own techniques to force incremental decisions to be made.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Over the last couple of years I''ve seen a huge growth of
    interest in DevOps at conferences. This interest is often centered around a particular
    set of themes—immutable infrastructure, containers, and schedulers. Is there a
    relationship between them that explains so much interest?'
  prefs: []
  type: TYPE_NORMAL
- en: DevOps patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: Yes, there is a relation between them. And there''s a lot
    of interest around them because they reflect some important patterns that people
    are starting to adopt right now.'
  prefs: []
  type: TYPE_NORMAL
- en: Maybe only ten percent of people out there really know what they're doing in
    IT today, and they can't be in every organization at once. It's debatable whether
    anyone *really* knows what they're doing, of course, because I bet if you asked
    those ten percent, they would say, "I don't know what I'm doing!"
  prefs: []
  type: TYPE_NORMAL
- en: 'What the ten percent *do* know is that when they do *this*, they''re less stressed
    out. When they do *this*, their website is more reliable. When they do *that*,
    they get one more extra customer every time. So that''s how they see it: "If I
    do this, I get an extra million dollars of investment funding; if I do this, my
    evaluation goes up; and if I do this, I have not closed the door because I''m
    still competitive." Those are the only heuristics that we have as an industry.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's take a person in their IT career, maybe they work on average at between
    three to six different places, across their peak career time.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Yes, it''s difficult to strike a balance between being locked
    in a single company all your life and never experiencing what''s happening outside
    or just switching companies every few months.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: Yes, so what do we do across our career? Every year we''re
    like, "Hey, that kind of worked, I spent six months doing it, and it worked."
    What we''re trying to do, in DevOps, is gather as many heuristics from each person
    and somehow distill them down so that one day we say: this is *the* winning heuristic.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, Aaron Huslage, who was formerly at Docker and is now at Red Hat
    Ansible, comes over to me and he says, "Why are you guys patching? Just destroy
    the server and move the containers to a new patched server. Don't patch retroactively;
    always move forward." Okay, that's a good idea! That saves me time because now
    I have one less piece of software that I need to worry about.
  prefs: []
  type: TYPE_NORMAL
- en: I think that all we're doing in DevOps is hunting, hunting, and hunting for
    these ideas. With each of these ideas, there's an associated cultural change that
    needs to happen. The cultural change that happens when you adopt these practices
    is called DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Are you saying that DevOps only exists in relationship to
    new ideas and that new ideas need DevOps to manage organizations toward cultural
    transformation?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: I think DevOps can be there with or without those ideas.
    I mean you can patch with DevOps. And you can have the traditional operations
    of DevOps. Just as long as you understand the communication mechanisms involved,
    and that you''re going to have to continuously inspect and understand your processes—and
    be ready to improve them.'
  prefs: []
  type: TYPE_NORMAL
- en: After all, there's no timeline for the adoption of DevOps, and there's no manifesto
    that says you must achieve greater deployments of your software.
  prefs: []
  type: TYPE_NORMAL
- en: '"There''s no timeline for the adoption of DevOps, and there''s no manifesto
    that says you must achieve greater deployments of your software."'
  prefs: []
  type: TYPE_NORMAL
- en: —Nirmal Mehta
  prefs: []
  type: TYPE_NORMAL
- en: In my client space, deploying software *faster* is not always the real need.
    And some organizations don't even care about *cost*. Across my customer base,
    it's quite a common situation that if they don't spend the money that they were
    given this year, they will get less money next year, so they *want* to spend more
    money.
  prefs: []
  type: TYPE_NORMAL
- en: 'That doesn''t mean DevOps has no application for organizations in those situations:
    they can still have other things they need from DevOps, such as being more *secure*
    and thus more *reliable*.'
  prefs: []
  type: TYPE_NORMAL
- en: Reliability is a big topic. At its core, the reliability of services is what
    drives a lot of the interest you see today in DevOps. Reliability with fewer people
    is what I think DevOps is. There's a risk that all these things will reduce the
    need for people like us.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Who do you mean when you say, "people like us"?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: I mean developers and operations. As these services become
    more SaaS-based, I think greenfield development of new software is going to be
    much closer to junior-level, pre-canned business object stuff, like Azure or Amazon
    Web Services, at some point in the future.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: So, you wouldn''t bet on the future for developers and operations?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: My gut says that in the future we''ll see less bespoke software
    being developed in the majority of IT organizations. Instead, new software development
    is going to be in the hardware.'
  prefs: []
  type: TYPE_NORMAL
- en: The only caveat on that is machine learning, which is already blowing up into
    a whole new world of software development. Programming by combining different
    deep learning and neural networks together could become a new field of software
    development, and that might be a transition for a lot of people. Instead of making
    APIs for web apps all day long, we're going to be just optimizing machine learning,
    and we'll become much more programmatic. Eventually, eighty percent of services
    will be filled from four overlord service providers, and that's it.
  prefs: []
  type: TYPE_NORMAL
- en: '"Eventually, eighty percent of services will be filled from four overlord service
    providers, and that''s it."'
  prefs: []
  type: TYPE_NORMAL
- en: —Nirmal Mehta
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: To be honest, I would be very scared if I was young and
    had my career years ahead of me because I think that most people just won''t be
    able to follow the ever-increasing pace.'
  prefs: []
  type: TYPE_NORMAL
- en: Those people who are specialized in a single field are at greater risk of becoming
    obsolete. I mean, what will happen to those who spent years working on infrastructure
    when companies decide to move to the cloud? Sure, they can apply for a job in
    AWS, Azure, or Google Cloud, but I'm afraid that the bar might be too high for
    many.
  prefs: []
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: We''ve already seen that in the industry; look at how many
    organizations are moving to Office 365, and how many places have their own Exchange
    Servers. That number gets smaller and smaller. That was a core role of IT for
    a long time, managing Active Directory, Exchange, and MS SQL, but those days are
    in the past.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I guess that it puts companies in a sweet position where
    they can dedicate most of their resources into something that really brings value
    to them. When you think about it, does it bring value to a company to manage Exchange?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: No, it doesn''t. But what I think is interesting, and this
    is a kind of a cynical point of view, is that there is so much low-hanging fruit
    in a lot of these companies!'
  prefs: []
  type: TYPE_NORMAL
- en: This is especially true for companies that have either established themselves
    in a monopoly or have created a big enough wall through competition or where there's
    a consolidation of who works or even competes in that field anymore. For such
    companies, there might not have even been a reward for increasing value. For such
    companies, there's been no need for perfection. It's not even that they don't
    need non-buggy code; they just need to get something out there, even if it's just
    bad.
  prefs: []
  type: TYPE_NORMAL
- en: The true enemy of DevOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We're talking here about the true enemy of DevOps and Agile. This true enemy
    is not the benders, it is not the mislabeling of what DevOps is, and it is not
    all those difficult IT shops. The true enemy of DevOps is when the fundamental
    balance of everything that we're trying to achieve no longer matters. The true
    enemy of DevOps is when higher quality stuff doesn't matter—when an organization
    is just trying to get shit out there.
  prefs: []
  type: TYPE_NORMAL
- en: '"The true enemy of DevOps is when higher quality stuff doesn''t matter—when
    an organization is just trying to get shit out there."'
  prefs: []
  type: TYPE_NORMAL
- en: —Nirmal Mehta
  prefs: []
  type: TYPE_NORMAL
- en: A lot of the people I meet at conferences are IT people, and most of them are
    obviously trying to derive more value, to make their mark, to reduce costs, or
    to keep their job. But at a certain level in most organizations, if you find a
    non-IT person, they will probably consider that whatever is there right now is
    perfectly fine and that they can squeeze that apple for longer.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I think that we have a serious discrepancy in velocity.
    While we''re used to the fact that things often change, and with ever-increasing
    velocity, the world is still trying to figure out what that means. Non-IT personnel
    are still not used to the fact that whatever was valid yesterday might be completely
    different today.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: Yes, they need to just change the color of the website every
    six months, and they''re good to go. And to change the name of the product.'
  prefs: []
  type: TYPE_NORMAL
- en: That's why competition is a good thing because the real enemy of DevOps shows
    its face in IT organizations where "good enough" is of a lower quality than any
    of us want to work in.
  prefs: []
  type: TYPE_NORMAL
- en: In this sense, DevOps is just a way to do a good enough job with two or three
    fewer people, before an organization transitions to an entirely Software as a
    Service (SaaS) arrangement. This is the real adversity, and apathy, that DevOps
    is trying to fight.
  prefs: []
  type: TYPE_NORMAL
- en: Agile is also trying to fight the apathy. Waterfall was all about making decisions
    at the last minute possible, right before going to production. Agile is forcing
    those decisions earlier so that you can't be apathetic to whatever. Instead, you
    have to make that decision today about what you're going to work on and what you
    want people to work on. Agile is about creating an incentive to make decisions.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps is very similar in that we're creating an incentive for people and organizations
    to make decisions about what kind of code they want to deploy or what kind of
    service they want to deploy.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I think you''re right about the role of DevOps, but I also
    think that decision-making is what many people are trying to avoid. This may be
    the reason why we have such a huge discrepancy between what we say DevOps is about
    and how DevOps is really implemented in practice. A critical decision area for
    many organizations today is security. So, how does DevOps fit into IT security
    departments?'
  prefs: []
  type: TYPE_NORMAL
- en: DevOps in security departments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: I think that IT security is very important, but I also know
    that we can very easily underestimate how many people don''t give a damn about
    security right now. And that''s because, to many people, the problem of security
    is just the same as the problem of pollution. IT security and climate change are
    in almost the exact same position from that perspective: there''s a negative externality
    to what happens.'
  prefs: []
  type: TYPE_NORMAL
- en: Let me explain. If Equifax, the consumer credit reporting agency, gets hacked,
    which it did, and all our credit information is breached, but there is no cost
    associated to Equifax for doing that, then it's the same thing as if I build a
    power plant and I don't pay the price of the pollution I give out. This is a negative
    externality that is not associated with the cost, and it's a situation that doesn't
    fix itself without the government. That's essentially what government is for,
    to eliminate that tragedy of the commons. I see security as absolutely stuck in
    a tragedy of the common situation where there is no consequence.
  prefs: []
  type: TYPE_NORMAL
- en: '"I think that IT security is very important, but I also know that we can very
    easily underestimate how many people don''t give a damn about security right now."'
  prefs: []
  type: TYPE_NORMAL
- en: —Nirmal Mehta
  prefs: []
  type: TYPE_NORMAL
- en: If I put 100 dollars into improving my security, and my competitor puts zero
    dollars to improve their security, and we both get hacked, then we both have no
    consequences. The only thing I lost is 100 dollars, and my competitor didn't lose
    100 dollars. That's the only difference.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: My experience from working with enterprise-based companies
    is that security always has the last word, but at the same time most don''t really
    understand. Too often, security is about marking some fields in an Excel sheet
    and not really helping IT teams develop secure applications. Too often, it seems
    as if the only goal of a security department is to be able to say, "It''s not
    our fault."'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: That''s the unfortunate situation we''re in, and this is
    something I would say we faced even before the Spectre and Meltdown vulnerabilities.
    These kinds of massive security bugs aren''t going anywhere, but we do not have
    the headspace to rationalize how bad the security is. We therefore just bury our
    heads in the sand as a civilization and as a modern society, when it comes to
    privacy and IT security. I think that we will absolutely continue to do this unless
    there are real consequences to the industry, and even then, I don''t think change
    will happen because it would essentially mean killing IT.'
  prefs: []
  type: TYPE_NORMAL
- en: Just imagine if developers had to get insurance on the code that they wrote,
    just like a doctor must get malpractice insurance. If there was a computer or
    developer engineering malpractice insurance, like this, it would kill the industry
    overnight. Some developers would buy it if they had the money, but we're already
    aching for talent and resources now as an industry, and this would eventually
    eliminate ninety percent of developers in the field.
  prefs: []
  type: TYPE_NORMAL
- en: On top of that, all those people who we promised could become developers because
    we destroyed their job with automation must then get insurance against how bad
    their initial code could be as they switch careers. The whole idea is just not
    practical unless everything becomes more expensive, and security is not going
    to be any different.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I''m surprised that I haven''t heard this idea about code
    insurance before. The more I think about it, the more it makes sense. Why would
    software be any different than anything else that has insurance? We all use it,
    we all depend on it, and malfunction can result in serious damage or even death.
    It fits the description of many other things that we take for granted as being
    insured.'
  prefs: []
  type: TYPE_NORMAL
- en: But, as you say, guaranteeing code quality would ruin a big segment of the industry
    overnight. We have somehow become used to the fact that software doesn't always
    work, and that hacking is part of life. There's not a big incentive to make what
    we create truly secure—at least not everywhere.
  prefs: []
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: That doesn''t mean that a company can''t differentiate themselves
    on their security. It''s nice to see companies such as Apple and others where
    they don''t treat us like products.'
  prefs: []
  type: TYPE_NORMAL
- en: '"I don''t think change will happen because it would essentially mean killing
    IT."'
  prefs: []
  type: TYPE_NORMAL
- en: —Nirmal Mehta
  prefs: []
  type: TYPE_NORMAL
- en: Now, when you come to the business-to-business side of security, or the e-commerce
    side of security, I think the answer is that things will just move to more SaaS-based
    services.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you do have conversations with organizations about moving to the cloud,
    you start to see how it really is going to make everything more secure. Why? Because
    the organization is then forced to face reality: they must actually do the security
    things that they said they were doing, but they''re not! Of course, Amazon Cloud
    is also way more secure than a lot of the places that do it in-house because Amazon
    has a massive financial incentive that''s missing from many government services.'
  prefs: []
  type: TYPE_NORMAL
- en: DevOps has this real opportunity to increase the security incentive that is
    missing in a lot of organizations. However, good IT security still requires strong
    leadership.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: What''s missing in IT that needs this strong leadership?
    Is it more money being invested, more education, or better practices? What do
    we miss in security today? I ask this because in the companies I visit, I continually
    find partners who will say, "Look, you need to fulfill those 35,000 requirements,
    and then you''re secure." Nobody I know ever manages to fulfill their bulk.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: There''s a couple of different problems here. The first one
    is that there''s no glory in fixing a bug or a security issue, whereas there''s
    always glory in deploying a feature.'
  prefs: []
  type: TYPE_NORMAL
- en: The second thing is that fixing bugs, finding security holes, and doing things
    the *right* way often takes more patience, more thinking, more engineering, more
    time, and more cost. These are things that most organizations don't even have
    to begin with. Most organizations don't even have enough money or resources to
    do what their original goal is with respect to their software. That stuff is way
    further down on the list.
  prefs: []
  type: TYPE_NORMAL
- en: '"There''s no glory in fixing a bug or a security issue, whereas there''s always
    glory in deploying a feature."'
  prefs: []
  type: TYPE_NORMAL
- en: —Nirmal Mehta
  prefs: []
  type: TYPE_NORMAL
- en: The third thing is experience and understanding. How many people even really
    understand speculative execution and processors? If you went to those coding boot
    camps to become a web developer, and you sat there and imported 15,000 npm JavaScript
    libraries, did they explain to you how a CPU works? No, they didn't.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: And you don''t even know what those libraries do.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: Right, and so people who *do* understand are expensive and
    they''re few and far between. Their experience and knowledge are not codified
    in any software suite currently. The security software industry is very far behind
    in terms of its ability to adapt to more frequent deployments and to bring that
    whole entire picture together about common bugs and penetration testing.'
  prefs: []
  type: TYPE_NORMAL
- en: And, of course, this all costs an organization more than their competitor who
    decides not to do any of that. There's still a consequence to maybe losing a customer,
    but there isn't really a global consequence.
  prefs: []
  type: TYPE_NORMAL
- en: '**Vi****ktor Farcic**: That is until it happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: Yes. My gut feeling is that a lot of places are less secure
    than we think and that the insurance model just pays that problem away, instead
    of them just dealing with it. It''s still cheaper to just pay for the problem
    than it is to pay the 250,000 dollars a year for a security person.'
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of issues with paying for the problem, and just one of them
    is that a security person in an organization that's not a top-tier place such
    as Google, Facebook, or Apple is probably not an expert at all. They've quite
    likely just done some training and got certifications. Yes, they're probably smart
    on SQL injections and phishing scams, but they're probably only one member of
    a small team tasked with that, and they care more about having dinner after work.
  prefs: []
  type: TYPE_NORMAL
- en: They do have this secret weapon, of course, that no one else in the IT organization
    has, and that is the ability to say "No" unconditionally.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Thou shalt not pass!'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: It''s like a cognitive bias, and it''s like a false power…
    but it''s not actually a false power—it''s true power! And it''s much harder to
    fight a negative.'
  prefs: []
  type: TYPE_NORMAL
- en: Security is not a justice system; you're not innocent until proven guilty. There
    are good reasons why you're guilty until proven innocent with security, and that's
    why we have those checklists.
  prefs: []
  type: TYPE_NORMAL
- en: '"Security is not a justice system; you''re not innocent until proven guilty.
    There are good reasons why you''re guilty until proven innocent with security,
    and that''s why we have those checklists."'
  prefs: []
  type: TYPE_NORMAL
- en: —Nirmal Mehta
  prefs: []
  type: TYPE_NORMAL
- en: But this means that both your false positives and false negatives are also going
    to be through the roof because it's too hard not to say no.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: If I''m guilty until proven innocent then I can''t prove
    myself innocent.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: Exactly, there''s no such thing as 100% infallible and bug-free
    software. We have non-deterministic complex systems, and that''s a challenge because
    everyone wants 0/1, yes/no, but there''s no yes/no in a non-deterministic complex
    system. There is only a percentage of acceptance and probabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: The problem is, security wants to treat everything like yes/no with a certain
    amount of risk, but everyone needs to treat security more like a probability.
    At the same time, no one wants to work on the hard thing.
  prefs: []
  type: TYPE_NORMAL
- en: The hard thing here is writing good software without having to import all these
    things, and to actually look at all the code, to look at your open source tools
    that you're using, to validate what you're doing, to implement mutual TLS, to
    renew your certificates, and to make sure your domain names use two-factor.
  prefs: []
  type: TYPE_NORMAL
- en: These things are so fundamental to security that it's the same thing as "more
    calories out than in," but we're all just looking for a shortcut. And the shortcut
    for the security person is just to say "No, here's a checklist of symptoms."
  prefs: []
  type: TYPE_NORMAL
- en: The checklist is just symptoms that have been seen in the past. It's not a cure,
    and it's not a diagnosis of a system. It's just a symptom checklist. Are you sneezing?
    No, okay. Are you coughing? No, okay. Do you have a fever? No, okay. Then you're
    no security risk.
  prefs: []
  type: TYPE_NORMAL
- en: Fighting security threats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: How do we fight security threats, if we can at all? A single
    person can do serious damage by exploiting our system vulnerabilities. How many
    people, if you can even put a number on it, do we need to prevent that person
    from attacking us?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: That''s all we''ve come up so far with, isn''t it: how do
    we pay for the problem? How many people? That''s because everything is reactionary.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There''s more to this problem though. The core of security in IT leverages
    that same power that allows our modern technology companies to do amazing things
    with 100 or 1,000 fewer people than ever before. But here''s the rub: that ability
    for technology to so dramatically increase the leverage of a single person also
    works for the person attacking you.'
  prefs: []
  type: TYPE_NORMAL
- en: It's the same problem we have with terrorism. It costs 500 bucks for someone
    to become a suicide bomber, but it costs 1.5 trillion dollars to prevent that
    suicide bombing from happening. The attackers who are attacking your infrastructure
    have the same 1,000x or more advantages that you use to make your company exist.
  prefs: []
  type: TYPE_NORMAL
- en: '"The attackers who are attacking your infrastructure have the same 1,000x or
    more advantages that you use to make your company exist."'
  prefs: []
  type: TYPE_NORMAL
- en: —Nirmal Mehta
  prefs: []
  type: TYPE_NORMAL
- en: It's impossible to really secure against this unless you send your stuff to
    space. So, what does all this mean? It means that you must decide where on the
    spectrum of 0% to 100% probability of security failure you are comfortable.
  prefs: []
  type: TYPE_NORMAL
- en: You're still not going to put the equivalent percentage of actual money toward
    your security risk, because that is a lot costlier than you think it is. There
    needs to be a balance—some sort of cost/benefit evaluation that puts us in a situation
    where we gain as much benefit with as little investment.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: What''s waiting for us in the next ten years from now?'
  prefs: []
  type: TYPE_NORMAL
- en: Future technologies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: Part of my job is to look at future technologies, and nowadays
    I''m doing that for the cloud. At a certain point, it really hit me hard about
    the cloud.'
  prefs: []
  type: TYPE_NORMAL
- en: Let me tell you. It was when I saw a slide at *AWS re:Invent*; it was just a
    bar chart, and on the *x*-axis was *2011*, *2012*, *2013*, and *2014*—the years;
    and on the *y*-axis, it wasn't new services, but instead it was the year-over-year
    percentage increase in features that AWS will provide. The first year on that
    chart, it was 50%. They added another 50%, so the next one was 100%. Then it was
    500%. The following one was 1,000%, and after that, it was 4,000%.
  prefs: []
  type: TYPE_NORMAL
- en: If you're an internal IT organization and you're building services, and you
    see that graph, and I'm selling the cloud and the ability to use cloud services
    to compose and build your own applications, how do you resist?
  prefs: []
  type: TYPE_NORMAL
- en: It's pretty clear to me that Amazon, Azure, and Google are making their way
    vertically. They want to vertically integrate as much as possible because every
    time they move up that tier, they get higher value, so commodities and value bump
    up.
  prefs: []
  type: TYPE_NORMAL
- en: '"It''s pretty clear to me that Amazon, Azure, and Google are making their way
    vertically. They want to vertically integrate as much as possible…"'
  prefs: []
  type: TYPE_NORMAL
- en: —Nirmal Mehta
  prefs: []
  type: TYPE_NORMAL
- en: Now you do that at 4,000% or 5,000% a year, you eventually run out of stuff
    to develop. Are you telling me there's not going to be a service where you just
    drag and drop three things onto a screen, and you get a full business application?
    Of course. That's the inevitability of that graph.
  prefs: []
  type: TYPE_NORMAL
- en: If that's sustained, and even if it wasn't sustained, even if they went back
    to 50%, then they just need to add little bits and pieces here and there and do
    a better job of connecting their existing services together, and there would be
    no reason to develop your own software. You'd just have your business use case,
    pick the language and the container format, pick the CICD pipeline, and you'd
    be done.
  prefs: []
  type: TYPE_NORMAL
- en: I took some Azure training a year ago, and we had to build a web API that had
    authentication. It would take a JSON-formatted string, convert it into Chinese,
    do sentiment analysis, search Twitter, and then provide a machine learning prediction
    on what the next word would be in that phrase.
  prefs: []
  type: TYPE_NORMAL
- en: If I had got that challenge five years ago, I would have had to build an architecture
    with maybe some machine learning. I wouldn't know how even to spin up some EC2
    instances. This were pre-containers, but there was no Docker yet, so I would have
    had to cobble the thing together and spend 99% of my time authenticating web connections
    and running EC2 instances, just getting that stuff up and running.
  prefs: []
  type: TYPE_NORMAL
- en: By contrast, we managed to do all this in our training in fifteen minutes. We
    dragged a box onto this window; we then dragged another box containing Cortana
    translation services and drew an arrow, so sentiment analysis was done by Cortana.
    We put the API key in there, and we were good to go. We clicked deploy, and it
    was a fully load-balanced API, automatically created, with authentication and
    certificates already all there. We hit it with some JSON and boom. Now we could
    package that and put it in the marketplace, where we could sell that to you for
    1% per API call.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I would need to make a couple of zillion API calls, but
    at the end of the day that would still be a fraction of what it would cost me
    to probably never actually succeed in making it myself.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: Exactly, and so it was during that training that I said,
    "We will probably be consultants and build this stuff for maybe fifteen more years,
    but there is a point in the future where there will be no more greenfield; it''s
    just going to be business intelligence applications with us composing them on
    Amazon, Azure, or Google Cloud."'
  prefs: []
  type: TYPE_NORMAL
- en: '"We will probably be consultants and build this stuff for maybe fifteen more
    years, but there is a point in the future where there will be no more greenfield."'
  prefs: []
  type: TYPE_NORMAL
- en: —Nirmal Mehta
  prefs: []
  type: TYPE_NORMAL
- en: There will be some other service that maybe combines those services together,
    but at some point, this is going to be completely vertically integrated. In fact,
    you can already see it in Amazon's video editing tools. They released a bunch
    of 3D web VR tools, so they're already starting to go against these industries
    where it would have been impossible to think that this would be done in the cloud,
    but here you are, and so at a certain point there's no reason not to just to build
    your own service anymore.
  prefs: []
  type: TYPE_NORMAL
- en: I mean, Lambda allows you to pay by the call, so if you're a start-up you don't
    even need to run a server anymore, and your costs can become perfectly linear
    with your customer acquisition.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: The cost as a start-up, right at the beginning, is basically
    zero because you''re very unlikely to reach the limits of what is free in those
    first few months.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: I predict that this will be the future. There will no longer
    be a conversation between the business owner and the internal IT team. The business
    owner will just go right to Azure. Then the business user—not the developer, not
    an operations guy, and not a security guy, but the business user—is going to have
    their Azure account.'
  prefs: []
  type: TYPE_NORMAL
- en: The business user is going to be some savvy intern and the business owner is
    going to say something like, "Okay, I need something to tell me the logistics
    shipping route of our competitor." To which, the business owner will say, "Okay,
    boom, here's a geospatial service." The business owner will then add a little
    bit of a machine learning block, put an API in, click deploy, test it, and that's
    it. They'll then simply pass a bill to the business owner.
  prefs: []
  type: TYPE_NORMAL
- en: That's something that scares me, but our DevOps careers will nearly be over
    when this stuff really takes off. If I was starting my career now, I would just
    do DevOps with data science and machine learning because if you can collect data
    and you can learn from it, that's where the real value is today and in the coming
    years.
  prefs: []
  type: TYPE_NORMAL
- en: '"If I was starting my career now, I would just do DevOps with data science
    and machine learning."'
  prefs: []
  type: TYPE_NORMAL
- en: —Nirmal Mehta
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: As you say, it''s okay, right? It''s like climate change;
    it won''t happen before I retire. Do you have any final remarks?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nirmal Mehta**: My final remark is that I sometimes overestimate the impetus
    for change to newer systems, against the inertia of keeping older systems running.
    I mean, people are okay with really bad stuff in IT for a lot longer than you
    might think.'
  prefs: []
  type: TYPE_NORMAL
- en: That's my parting thought. We can get excited about containers, CICD, and DevOps
    itself, but one way or another, at some point in the future, there will be no
    need for all this.
  prefs: []
  type: TYPE_NORMAL
