- en: Introducing Gregory Bledsoe
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having recently joined MThree Consulting, much of Greg's focus is in helping
    businesses achieve delivery of agility transform. Previously, he's worked as an
    Agile, Lean, and DevOps consultant at SolutionsIQ. Greg has also written extensively
    about DevSecOps, kernels, and virtualization. You can find him on Twitter at `@geek_king`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Hi, Greg! Before we delve into the world of DevOps, tell
    us a little about yourself.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gregory Bledsoe**: My career up to this point is entirely down to the fact
    that I was a very successful engineer, and because of this, people promoted me
    to management positions. That being said, however, I don''t think it''s the best
    approach because good engineers don''t always make good managers. Nobody ever
    gives us engineers any training on how to manage, nor do they take the time to
    explain what we''re actually supposed to be doing as managers. Because of this,
    I had to reinvent myself into this manager role, where I''ve actually applied
    the engineering principles of fail fast, experiment, and measure the outcome to
    see what happens. This all took place in a time before DevOps was even a word;
    but, looking back, I see that I was already incorporating the principles of DevOps
    as a core part of my way of doing anything in the industry. Through that process,
    I learned that you couldn''t do the engineering and the management role at the
    same time.'
  prefs: []
  type: TYPE_NORMAL
- en: '"What the word DevOps means is probably the most fundamentally misunderstood
    question out there."'
  prefs: []
  type: TYPE_NORMAL
- en: —Gregory Bledsoe
  prefs: []
  type: TYPE_NORMAL
- en: Over time, I continued to work at various companies, and gradually, I got invited
    to speak at more and more conferences. Fast-forward to today. My latest ventures
    have been with Accenture/Solutions IQ, the management consulting and professional
    services firm, and MThree Consulting, where I'm concentrating on training and
    providing emerging talent to the Fortune 100\. But bringing it back to the idea
    of DevOps, I find myself perfecting the DevOps+ methodology in my new job. It's
    worth adding, and I'm sure we'll come back to this, that I included the "+" because
    the methodology includes DevOps, in addition to both Agile and Lean.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps and Deming's ninth principle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: That nicely brings me to the first question I have for you,
    which is: what does the word DevOps actually mean? I''ve spoken to a number of
    people, many of whom are featured in this book, and when I come to this question,
    I don''t think I''ve ever received the same answer. What''s your take on it?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gregory Bledsoe**: The whole idea of defining what the word DevOps means
    is probably the most fundamentally misunderstood question out there. That''s not
    to say that the question itself is wrong because, while there are many valid answers,
    there are infinitely more invalid answers, and that''s fundamentally the problem
    we have. Even when people are giving valid answers, they''re only partial answers,
    and those giving the answers don''t fully understand the overall scope of the
    question. As an industry, we''re constantly learning new lessons and incorporating
    new things, and DevOps is a way to collect the best practices of everyone. Because
    of that, I''ve stopped trying to define it simply because the definition changes
    every day.'
  prefs: []
  type: TYPE_NORMAL
- en: Did you know that, at its core, the word DevOps comes from the 14-Point Philosophy
    of William Deming, an American engineer and statistician? In that list, the 9th
    principle is, *Breaking down barriers between departments*. That's literally where
    the names Dev and Ops come from. Thus, you can't define DevOps without including
    Deming's concept in said definition. When we started with DevOps, we didn't know
    if we were specifically implementing DevOps or Deming's 14 points, but at some
    point, we figured it out. Let's say you're applying a Lean methodology; in 2018,
    it grew so far beyond what it was originally. We realized that what we're really
    doing is progressively implementing Deming's 14 points into software development.
    And once we've done that, we've then got to move on and drive out the fear, while
    continuously improving and getting everybody on board. Then, we've got to make
    everybody agents of transformation. If you don't understand that all of those
    things are implicitly included in defining what DevOps is, and they're not included
    in your DevOps definition, then your DevOps definition is probably wrong, or at
    the very least, incomplete.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I actually think that''s a great view. What you''ve managed
    to do is show a lot of thinking behind the meaning of the word, which is often
    omitted. But in the Gregory Bledsoe dictionary, what''s the definition next to
    the word DevOps?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gregory Bledsoe**: As we discussed, before I give you my answer, I need to
    come up with a definition of DevOps that won''t change. Because it''s the overarching
    umbrella that all of DevOps falls into, my definition of DevOps is "reorganizing
    IT around business value." Within this definition, we''ve included Lean by reference,
    and likewise, we''ve also got all the canonical DevOps elements that we''ve already
    incorporated, but we haven''t excluded any other future best practices. I think
    that''s the one that should propagate now, and that gives us great freedom not
    to exclude new innovations. Because, when that happens, and something, such as
    DevOps, becomes so defined, it ends up squeezing out the new innovations.'
  prefs: []
  type: TYPE_NORMAL
- en: '"My definition of DevOps is ''reorganizing IT around business value''"'
  prefs: []
  type: TYPE_NORMAL
- en: —Gregory Bledsoe
  prefs: []
  type: TYPE_NORMAL
- en: I'm not a big fan of prescriptive frameworks that purport to solve every possible
    problem, because the problem set that we as an industry face changes too rapidly
    for that to be true. Whereas really, everything has to be open to interpretation
    and to change as the context itself changes. What we all want out of a definition
    of DevOps is something that tells us fundamentally what it is but doesn't exclude
    all the new innovations that we haven't even thought of yet that are coming our
    way. We've already got this pipeline of possibilities out there, with the likes
    of serverless and unikernels beginning to make their way into more and more places.
    But the way that we interface with the technology is going to change so unpredictably
    over the next two years that all of that might get thrown out the window for something
    else.
  prefs: []
  type: TYPE_NORMAL
- en: A great example is the direct neural interfaces that are starting to come along.
    We've already got artificial reality in the form of virtual reality, as well as
    artificial intelligence. If we feed artificial intelligence feedback directly
    into, say, an artificial reality or a virtual reality environment, then we're
    using a direct neural interface. The issue we have is that we have absolutely
    no idea what the world's going to look like in two years, and we have no idea
    how to adapt our processes to that upcoming change. The fact is, what we all need
    to do is abandon the idea that we can build a five-year roadmap for DevOps because,
    as we've just talked about, we can't even predict two years into the future. Instead,
    what we can do is begin implementing the best practices now, trying to mature
    it as best we can, but to ultimately be ready to reinterpret, unlearn, and relearn
    as quickly as possible.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: That was a great answer. It''s really good to get behind
    the thinking of the question. The only problem I see, which is similar to when
    you mentioned how we don''t know what''s going to happen in two years, is that
    I get the impression that a large number of companies, especially the bigger ones,
    don''t even know what''s happening today.'
  prefs: []
  type: TYPE_NORMAL
- en: Passing the baton between generations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Gregory Bledsoe**: Do you want to know a secret? The truth is that many of
    the big companies out there don''t actually have an idea what their actual environment
    is today. There are elements of those environments that have become a black box,
    and the people who originally built those elements of that big company''s environment
    have left. The issue is that, now, no one at the company actually knows how that
    element works. The scripts and the deployments are all scriptures that were handed
    down from past generations that in the current generation, nobody really wants
    to dig into and try to change.'
  prefs: []
  type: TYPE_NORMAL
- en: The holy writs are beyond question. You don't even really know how it works
    after a certain amount of time. So, I think you're exactly right. Even the bigger
    companies don't know what's happening in their own environment today.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: That being said, I don''t personally think that''s a bad
    thing. The worst case is that some companies are convinced that they know what''s
    going on today.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gregory Bledsoe**: This is one of my big points. I always paint it in a way
    that says the executive management in these companies is sitting at the end of
    a game of Chinese whispers. In the game, you have a long line of people where
    one person whispers something to another person, then the next person whispers
    it to the next person, and so on. The idea is that they''re all trying to whisper
    exactly what they heard, but by the time it comes out the other end—in this case,
    to the executive management—you end up with something radically different, and
    everybody laughs when he or she compares what came out of the two ends.'
  prefs: []
  type: TYPE_NORMAL
- en: 'All of their information is filtered through so many layers, and the incentives
    for filtering are not to be transparent and not to give accurate information.
    So, the best case is that they can''t have the best and most accurate picture
    of what''s happening. Meanwhile, the worst case is that everything has been filtered
    through the lens of: *what does my boss want to hear?* It''s inevitable that,
    at the top of the chain, you have no idea what''s really happening on the ground,
    and the more you think you do, the more you find yourself being wrong. Unless
    you actually measure it—which is one of the components of DevOps—and you''re doing
    culture and satisfaction surveys, you''ll find yourself having to really put some
    deep thought into the metrics that matter.'
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, unless you know that you're validly gathering them and unless you
    know what they mean, and what action you're going to take if measurements go up
    or down, then you really can't have any idea what's happening. We can pretend
    we do, but it's totally impossible. To me, the whole advance of IT in the last
    15 years is starting with extreme programming. And then, with Agile and both the
    formal Agile Manifesto and the Agile principles, it means we're progressively
    learning to stop pretending we know what we don't know.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: I like that idea of effectively learning to admit when we
    don''t know something.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gregory Bledsoe**: Right! We''re crushing the hubris of these few people—this
    aristocracy—that are better enabled by education, breeding, birthright, or whatever
    the factor is, that somehow gives them a better ability to make all of the decisions
    and filter all of this information.'
  prefs: []
  type: TYPE_NORMAL
- en: We have to make every decision at the highest point possible because the ones
    at the top are the only ones that actually know what's going on. What we need
    to do is stop pretending that that's true because, in actuality, that's the complete
    opposite of what's true. The real truth is that we need to make every decision
    at the lowest point possible because that's where the accurate information can
    be found.
  prefs: []
  type: TYPE_NORMAL
- en: Our organizations have to develop an autonomic nervous system, where most of
    the decisions are being made below the level of attention to strategy. If they
    find that the executives have to get involved in day-to-day operations, then there's
    something desperately wrong. Your executives should be doing a meta-analysis,
    setting a strategy and asking the right questions. Then, the alignments to our
    predictive autonomics are all wrong, and that's one of the things where DevOps,
    Agile, and Lean are fundamentally correct.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re trying to collapse those silos and remove the cover-your-butt culture
    of finger-pointing, credit-taking, and blame-shifting to create these empowered
    cultures where people actually feel like they own a piece of the outcome, and
    not just this tiny little slice of the process. If people are able to solve their
    own problem—and they have to destroy the entire rest of the process—fundamentally,
    they will, because then you get the response of: "It''s not my job; somebody else
    is supposed to worry about that." This is what these cross-functional collaborative
    teams fundamentally solve, by making everyone an owner of the outcome.'
  prefs: []
  type: TYPE_NORMAL
- en: Nokia – the fall of a giant
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: A while ago, I spoke with a friend who worked at Nokia.
    I asked him, is it really possible that Nokia didn''t see the smartphone coming?
    Because you''ll remember that, back in the day, Nokia was at the top of its game.
    Their Nokia 1100 series of phones have, to this day, sold over half a billion
    units and remains—combining the 2003 and 2005 model—one the two most popular handsets
    in the word. In fact, seven out of ten of the best-selling handsets of all time are
    Nokia devices. Yet, in Q4 of 2017, the company only grabbed one percent of the
    market share, shipping only 4.4 million units.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I asked my friend if it was really possible that Nokia didn''t see the coming
    smartphone wave and the impact smartphones would have on the industry. He answered
    by saying that everyone at Nokia knew what was coming and, more importantly, what
    needed to be done, but nobody dared tell that to management. That''s the crux
    of the problem we have. It''s what I refer to as a cultural artifact because everybody
    knows what the people above them want to hear. They know what they''ll be rewarded
    for, but equally, they also know what they''ll be punished for, and telling upper-management
    the truth and having the hard conversations is something they know they''ll probably
    be punished for. But then, to me, the question is: in such an organization, who
    can actually initiate that change?'
  prefs: []
  type: TYPE_NORMAL
- en: Initiating change/taking responsibility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Gregory Bledsoe**: Everyone and anyone can initiate that change because,
    at the end of the day, it''s all our responsibility. If you''re dancing with your
    dance partner, and you want to change the dance, you can''t force your dance partner
    to change their steps but you can change yours, and when you change yours, your
    partner has to adapt.'
  prefs: []
  type: TYPE_NORMAL
- en: I remember the very first conference I keynoted was themed on overcoming obstacles
    to DevOps. One of the things I pointed out is that anyone can initiate change,
    and there's a ripple of that. If you understand this ripple effect, you can take
    advantage of it. You can identify your allies; you can influence the influencers
    and manage your managers and spread this good change. This is something you can
    do from anywhere in the organization. You're able to inspire people; you can articulate
    the argument in economic and mathematical terms and through measurement. You can
    always start doing that. You can nudge the bar, and that's the only way to do
    it from anywhere in the organization.
  prefs: []
  type: TYPE_NORMAL
- en: '"Everyone and anyone can initiate that change because, at the end of the day,
    it''s all our responsibility."'
  prefs: []
  type: TYPE_NORMAL
- en: —Gregory Bledsoe
  prefs: []
  type: TYPE_NORMAL
- en: Now, obviously, you can do this more effectively if you already have the positional
    power within the organization. But even from the bottom of the organization—and
    this is one of the things that I feel made me such a good engineer—I was able
    to get people on board with what I wanted to do. I could get people who had no
    personal incentive to help me to accomplish something. Now, why was this? It was
    because we could then both go and sell that to our managers as a part of the value
    that we produced. But I had to sell them on the value; I had to make the economic
    argument.
  prefs: []
  type: TYPE_NORMAL
- en: If you're at the bottom of the organization, making this economic argument and
    starting to change your dance steps by beginning to pull in more collaborators
    and starting to nudge the bar by setting yourself up is designed not to win *today's*
    argument, but to win *tomorrow's* argument by playing the long game. Change is
    incremental, so people don't actually know that things are changing until they
    hit a critical mass of people who want this change. Then, the change becomes inevitable,
    no matter what the executives want.
  prefs: []
  type: TYPE_NORMAL
- en: 'People who don''t have positional power underestimate the power they do have.
    At the same time, executives underestimate their power as well because they''re
    used to going into a meeting and saying: "Tell me the problem and tell me all
    your potential solutions," then simply asking people to do a given solution. It''s
    a fundamentally backward way of managing, but it''s the customary way we do it.'
  prefs: []
  type: TYPE_NORMAL
- en: It's the artifact of Taylorism, the idea that, after the Industrial Revolution,
    Frederick Taylor was the only management game in town, and we all absorbed that.
    But it's time to move on. I know I've said it before, but in a large corporation,
    you've got to identify your allies, you have to influence the influencers, and
    you have to manage your manager. If you manage to do all of that, then you can
    start the transformation, and you can lead it at any point in the organization.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: But then, there is the problem of time. When I speak with
    people, and then I start giving them stories, I often get the answer: "Yes, but
    I don''t know what to do. I don''t know where to start, and for 20 years I''ve
    been continuously working on a project that was supposed to be done yesterday."'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gregory Bledsoe**: So, that''s another point where you have to make the economic
    argument. This is the Agile principle of sustainable pace. A lot of people who
    are implementing Agile into their projects want to do a flexible scope but fixed
    date, which is actually the opposite of what you want to do. What you want are
    a fixed scope and flexible date. When you do a flexible scope and fixed date,
    you just keep pouring things on people, and those people become overburdened.
    Now, no one has the time to even think about how to make things better, much less
    actually work to make things better. This is another one of the Lean principles,
    where, again, you can make this as an economic argument. You have to sell it to
    your manager, and you have to help your manager sell it to *their* manager.'
  prefs: []
  type: TYPE_NORMAL
- en: '"You have to sell it to your manager, and you have to help your manager sell
    it to their manager."'
  prefs: []
  type: TYPE_NORMAL
- en: —Gregory Bledsoe
  prefs: []
  type: TYPE_NORMAL
- en: What we have to do nowadays is carve out time for improvement. Again, this is
    purely economics. You can make the graph showing that your technical debt grows
    because you're only ever building things and never fixing them. Eventually, that'll
    make the system grind to a halt, where you can't touch anything without breaking
    everything. Over time, the system becomes more fragile. These are economic arguments
    that you can make because they're mathematical and certain; there's not even any
    doubt about this.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: So, to change the environment in which they work, people
    need to make the economic argument to their boss?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gregory Bledsoe**: Exactly. If you want to start changing the environment
    in which you''re working, then you must carve out time for improvement. You have
    to educate yourself on the mathematics and the economics behind the changes that
    need to be made. This is something that you may have to do in your own time because,
    again, you''re underwater with delivery demands.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you start doing that and once you begin making and eventually start winning
    the economic argument, which will happen if you make the argument consistently
    enough because it''s a mathematical certainty, then that''s when you can really
    start to roll out the change. Here''s another fundamental thing about people:
    we copy what works. Even when we don''t know why it works, we''ll still try to
    copy it, and if over time, enough people get it right, we''ll be able to articulate
    why it works. Only then does it start to really be adopted, and the uptake really
    picks up.'
  prefs: []
  type: TYPE_NORMAL
- en: You only have to look at how Edward Deming's theory was rejected in the US because
    they thought they already knew what to do. Edward went to Japan, and suddenly
    Japan started kicking the US manufacturers' butts in the market. Only then did
    the Americans take notice and start trying to copy what Japan was doing, but it
    took them a really long time to adopt that. It wasn't until 30 years later that
    they worked it out because they didn't bother to try to understand why it worked
    fundamentally, they just tried to copy process examples. But the difference was
    far deeper than that.
  prefs: []
  type: TYPE_NORMAL
- en: What makes the difference between somebody who comes into work and cares about
    the outcome of their work versus somebody who comes in, punches the clock, does
    what they're told, and then leaves, not caring? Drucker and Deming pointed out
    that, if you can take a clock puncher and put him in another environment where
    he becomes invested in the outcome, his performance is totally different. The
    same person in two different cultures will produce vastly different results.
  prefs: []
  type: TYPE_NORMAL
- en: That's the secret the Japanese learned from Deming really early on, that when
    you take these ideas, and you root them in your cultural soil, it allows you to
    empower people to improve the process. You reward them for pointing out problems,
    instead of punishing them because we don't care about the perception of failure.
    We care about the reality of success.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: But in your view, what prevents us from understanding, instead
    of just blindly copying, things? Is it vanity or a lack of capacity?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gregory Bledsoe**: It''s a mixture of pride, hubris, vanity, laziness, and
    greed. Nobody wants to say to themselves that the way they''ve run their career
    for the past 15 to 30 years has been wrong and that they''ve managed to succeed
    in a pathological system by adapting to it. But, in today''s world, that''s not
    going to work, so we fundamentally have to change the way we do this. It''s an
    extremely difficult thing to come to grips with. People always want to make the
    economic determination that they want to do the easiest thing. But we''re wired
    that way. We want to do the easiest thing to get the results we want, and if we
    don''t take the time to really try to figure out what is the easiest thing to
    get the results we want, then we do the thing that looks the easiest to us.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Collaboration only ever happens when the incentives are aligned. Misaligned
    incentives are an artifact of corporate culture and the incentive structure produced
    by the silos."'
  prefs: []
  type: TYPE_NORMAL
- en: —Gregory Bledsoe
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, as a company, we''ll just install Jenkins. We''ll start with tools
    that are trying to copy these process examples. But if that doesn''t work, we''ll
    get a pilot team, give them everything they need for success, and put all of this
    focus on them. We''ve put a lot of attention behind it. We clear out all of the
    obstacles and then, it''s a smashing success and you build this pipeline of continuous
    delivery. But then, you try to replicate those results outside the pilot, and
    you can''t because the pilot had all of the intention and all of the focus on
    clearing the obstacles, and all of the rest of the teams don''t. When the pilot
    team no longer has that, all of the integrations they build in the pipeline break,
    and then it''s like: whose job is it to fix them? Well, it''s nobody''s job because
    integration is a function of collaboration.'
  prefs: []
  type: TYPE_NORMAL
- en: Collaboration only ever happens when the incentives are aligned. Misaligned
    incentives are an artifact of corporate culture and the incentive structure produced
    by the silos. In a nutshell, in order to reorganize your culture, you have to
    attack the incentive structure. But again, it's fundamentally different and not
    at all compatible with how we've always done things, and that's hard to come to
    grips with.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing the digital transformation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Part of what you''re saying reminds me of the digital transformation.
    Every company has been doing the digital transformation potentially for years,
    and they''ve all made a new department but with the same people. They''ve brought
    in Jenkins, Kubernetes, and whatnot, but I''m yet to find any improvement to come
    from those digital transformations. Maybe I''m paranoid, and I''m exaggerating,
    but I just don''t see any improvement.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gregory Bledsoe**: Firstly, you''re not paranoid or exaggerating. In a Fortune
    500 company, what you''ve described is normal. These companies have been trying
    to make these changes for years, but they''re in exactly the same position that
    American manufacturing was in, where it''s just not working, and they have no
    idea why, because they fundamentally don''t understand it. Remember Deming? It
    was he who specifically was asked: "Well, if Japan can, why can''t we (America)?"
    He responded by saying that Americans simply expect miracles. They want to copy
    the process examples and expect to get the same results, but the issue here is
    that these companies don''t know what to copy.'
  prefs: []
  type: TYPE_NORMAL
- en: '"Corporate America is not giving people incentives to collaborate."'
  prefs: []
  type: TYPE_NORMAL
- en: —Gregory Bledsoe
  prefs: []
  type: TYPE_NORMAL
- en: This is the story of the new digital transformation that's going on right now
    in most of corporate America. There's been no deep thinking or sharing of a vision
    across the organization to build consensus or incentives to collaborate. People
    are putting a lot of work into building this sophisticated automation framework,
    but they're not building a sophisticated collaboration framework that incorporates
    the sharing part of DevOps. Corporate America is not giving people incentives
    to collaborate.
  prefs: []
  type: TYPE_NORMAL
- en: But at the same time, the people that you want to give incentives to in order
    to collaborate don't necessarily understand the secret sauce either. You can make
    them sit in a feature refinement meeting, but you can't make them start thinking
    about what they actually need to do together until the work arrives on somebody's
    desk as a work item. That's what they're used to doing. We wait for it to be thrown
    over the wall to us, and then we start thinking about what we actually need to
    do with it. But the whole purpose of feature refinement, story refinement, and
    Agile is that we want to start unearthing as early as possible what we don't know
    that we need to know.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: So, how do we go about fixing this? Because, to me, it sounds
    like this would solve a lot of the issues we''ve been talking about.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Greg Bledsoe**: We need to start using a shift-left mentality. I''ve sat
    in story feature refinement meetings where nobody asks any questions, and nobody
    has anything to say. The first meeting has just burned. It''s useless because
    people are used to just waiting for work. For instance, the developer will open
    up the IDE, start a big `if` loop, and then start thinking about how he actually
    needs to do the work to accomplish this. But by this point, it''s way too late.'
  prefs: []
  type: TYPE_NORMAL
- en: You're still going to run into the same problems that you would in a Waterfall
    culture, where you don't understand that you didn't have everything you needed.
    But now, at the last second, everybody's going to be scrambling to try to make
    things work and make fundamental changes to the other components. The whole point
    is to develop as early as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Changing that mindset from the top down is not an easy move, but it's the first
    thing you must do in order to understand how it has to change. We haven't even
    cleared this hurdle most of the time, but what does an empowered, collaborative
    culture mean? People are trying to do these digital transformations, but they
    don't even understand what it should look like from the ground level. You can't
    make changes on the ground that are all going in the same direction without a
    grand vision. But a grand vision without understanding how that also affects people
    on the ground is useless. It has to come from both directions, and this where
    your collaborative framework has to come into play.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: But then, we have a third influence, which I see as an external
    one. Let''s say I brought in this tool that''s supposed to make me DevOps certified.
    Or likewise I brought in this consultant, and we''re doing daily stand-ups. I
    get the impression that you go to conferences a lot, where everybody''s trying
    to sell the nirvana these days.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gregory Bledsoe**: Of course, there''s truth in that. There''s a big market
    in telling people what they want to hear. The easiest way to sell something is
    tell them that you have a magic bullet that''s going to solve all of their problems,
    and they''ll eat it up saying: "Oh, yay! We''re going to buy into this!" But that
    doesn''t work because the person who''s buying it didn''t know what questions
    they needed to ask, and the person who''s selling it, at that point, has already
    made the sale. But by then they''ve already got their foot in the door, and the
    more it fails, the more they get to charge. This incentive structure is fundamentally
    misaligned.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The market for telling people what they want to hear is too big, and there
    are too many people willing to sell into that market. We''ve got to change this
    from both ends. As consultants, if we want to really change the way this works
    and, as a result, maximize our value to the client, then we have to sell in a
    fundamentally different way. We have to go into the account and give them the
    hard truths right up front and get them used to hearing that from us rather than
    thinking: we''ll just tell them what they want to hear. We''ll promise them we
    can do anything, and then once we''re in the door, we''ll start trying to have
    the hard conversations with them. That simply doesn''t work because, now, you''ll
    just get subsumed into their culture, and you can''t change their culture. You''ll
    just get into the *yes* culture because they don''t want to hear anything at that
    point. All they want to hear is yes, and you can''t change it. You got off on
    the wrong foot, and that''s really hard to change. As consultants, we have to
    approach these client relationships differently. We have to be willing to tell
    them the hard truths right up front, and get them used to the fact that that''s
    what they''re going to get from us. But the thing is, after the initial shock,
    people really appreciate that honesty, and they understand that, now, they''re
    attacking the right problems.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In DevOps, we work with three things: people, process, and tools—in that order.
    There''s a reason for this order, because people drive the process. Once you understand
    what your process should be, you then have to find the tools that fill the gaps
    in your process and help you to both eliminate waste and reduce the wait time
    and friction. But the real problem is that it''s too easy to buy a tool and then
    try to build a process around it and even force people to use it.'
  prefs: []
  type: TYPE_NORMAL
- en: '"The market for telling people what they want to hear is too big, and there
    are too many people willing to sell into that market. We''ve got to change this
    from both ends."'
  prefs: []
  type: TYPE_NORMAL
- en: —Gregory Bledsoe
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: But that''s the thing. In my view, almost every tool is
    a result of somebody''s process and culture, Kubernetes being a prime example.
    It''s about different organizations that end up in a platform. One thing I don''t
    understand is how people assume that something made in a completely different
    culture will work in their culture.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gregory Bledsoe**: You''ve just hit the nail on the head. The simple answer
    is that it won''t. The first thing you have to understand is: What''s the idea
    in the context of your culture, in the context of your organization''s values,
    and in the context of your organization''s specific business context? What''s
    the process that you need? What''s the idea for you to deliver value with the
    least wait time? Only when you''ve answered those questions do you go looking
    for the tools you need. You''ve got to ask the fundamental existential questions
    first: Why do we exist? What is the reason people are going to give us money?
    How do we pay off on that value as efficiently as possible? If you don''t start
    with those questions, you can''t get to the right answers.'
  prefs: []
  type: TYPE_NORMAL
- en: Agile versus DevOps – is there any difference?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: But then if you ignore the implementation on conceptual
    grounds, is there any real difference between Agile and DevOps?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gregory Bledsoe**: Yes, there is. Accenture has recently bought SolutionsIQ,
    a consulting organization that specializes in building business agility. SolutionsIQ
    is really good at developing those deep and trusted relationships, where they''re
    telling people the hard truths and helping them to incrementally move toward a
    less pathological and more empirical structure and delivery chain.'
  prefs: []
  type: TYPE_NORMAL
- en: 'SolutionsIQ views DevOps as a delivery method for your Agile infrastructure
    and process, which is not wrong. But I view DevOps as encompassing Agile and extending
    it because DevOps took a lot of stuff from Agile in the first place. For example,
    the cross-functional collaborative team: we''ve extended that. We collapsed additional
    silos because we wanted the development in the business to work really well together
    in Agile. Then, with DevOps, at first, we wanted the development and the operations
    guys to work really well together. But then we said: "Well, why should we stop
    there?" By this point, you''re now realizing that you''ve also got to bring in
    the monitoring and security guys, and before long, you realize you''ve also got
    to bring in the testers, and then pretty much everybody else. You''ve just got
    to extend the width of that collaboration and get everybody shifting left to solve
    all the problems as early as possible because, if it doesn''t work that well,
    trying to bolt security on at the end doesn''t work either. You''ve got to change
    that and shift it all left. That''s the DevOps mentality, which embraces an extended Agile.'
  prefs: []
  type: TYPE_NORMAL
- en: Agile and DevOps are the peanut butter and jelly in a Lean sandwich. They really
    go well together, and you can't be super-successful with one without the other,
    though this allusion may not work everywhere. In Germany, you could say, for example,
    it's like bratwurst and sauerkraut. The point is, Agile and DevOps complement
    and extend each other really well.
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, another problem I've noticed is that people who buy into a prescriptive
    Agile framework really get married to the cadence, the pace, and the experience.
    But with DevOps, you'll get to a point where you don't have to wait on the sprint
    to be able to deliver; you're able to deliver everything as soon as it's ready.
    When it's ready for production, it goes to production, and then you want to shorten
    the time it takes to get something ready for production. In my view, as you mature
    with DevOps and Agile, the sprint cycle can dissolve into continuous delivery.
    But you'll hit a wall if you're married to that prescriptive framework, and this
    is why I don't like them. You can use them as a guideline, but they're not scripture,
    and they're not holy. There's nothing that they teach you. All of the elements
    of Scrum and Kanban were made to teach principles, not to be the end-all and be-all
    mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: But they might be made to teach principles. I''ve not seen
    that in practice. I mean, people often say, "Oh, I''ll do Agile." Well no, because
    out of those principles, we''re not practicing this one.'
  prefs: []
  type: TYPE_NORMAL
- en: '"In my view, as you mature with DevOps and Agile, the sprint cycle can dissolve
    into continuous delivery. But you''ll hit a wall if you''re married to that prescriptive
    framework, and this is why I don''t like them."'
  prefs: []
  type: TYPE_NORMAL
- en: —Gregory Bledsoe
  prefs: []
  type: TYPE_NORMAL
- en: '**Gregory Bledsoe**: That''s right, and it''s why when you''re trying to do
    something new, a prescriptive framework can be helpful for a period of time. But
    it''s also important to know when its value has declined to the point where the
    amount of waste and overhead it introduces has now outweighed the benefits. The
    issue is that it''s a calculation that is difficult and different for every organization.'
  prefs: []
  type: TYPE_NORMAL
- en: A prescriptive framework could get you away from the Waterfall culture, and
    to completely remove yourself mentally from Waterfall can be good, but you have
    to go beyond just those basic prescriptive elements. You have to adapt it to your
    organization, just like DevOps. But as we've said before, there's no one true
    way of DevOps. You have to adapt it to your organization. And that's the other
    big problem with DevOps implementations. People want to be told exactly what to
    do all of the time. They want to be in a world where someone else has to do all
    the thinking for them, but the answer is no. You have to get everybody in your
    organization thinking about these, and that's how you're going to get the best
    possible answers.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: But isn''t that a vicious circle? You have a minority of
    people trying to change a majority of people that are entrenched into that old
    way of working. Then, in the case of the minority managing to change something,
    they''ve started doing the same thing because now, nobody moves from this new
    position.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gregory Bledsoe**: It can become a vicious circle. There are very important
    anthropological and sociological reasons why beliefs and habits stick, and we
    have what you can call the sameness or the consistency bias. The idea is that
    we want today and tomorrow to be the same as yesterday because we already understand
    the threats and opportunities of yesterday, and to have to continually refactor
    our own cognitive mechanisms to deal with new threats and new opportunities is
    hard. We''re entering the age of exponential change, where every day will look
    more different than the day before, and until we can develop that systematic way
    of empirically validating your change—when you do that, then it''s much less scary.'
  prefs: []
  type: TYPE_NORMAL
- en: Take the cycle of innovation, and the original amount of time it took for innovation
    to spread and be built upon was a millennium. But then, it went to centuries and
    then decades, years, and now it's just months. Before long it'll be weeks, and
    then days before finally, innovation will be instantaneous and without pause.
    Why? Because we're entering an age of exponential change. We have to understand
    why it's hard for us to adapt, to change, and we have to understand that change
    can't be unanchored from our superstructures because we have these kinds of cultural
    and ideological superstructures that give us things such as values and ethics.
  prefs: []
  type: TYPE_NORMAL
- en: In the 20th century, we learned that when you try to change everything all at
    once, and when you try to detach from all of those superstructures, the results
    you get may not be that good. You just have to look at how, in the 20th century,
    200 million people were killed by their own governments, who tried to detach from
    all of the superstructures of society. So, the key for us is that we have to not
    only learn how to manage this change but also how to embrace it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Is that something we can even stop?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Greg Bledsoe**: The thing is we can''t stop it. It''s going to happen. What
    we need to do is to anchor it to something, and that anchor has to be our values.
    But the issue with this is that we have to understand what that looks like, and,
    for a lot of people, that means going all the way back to an Enlightenment philosophy.
    It''s the reason why these conference talks, books, and podcasts are akin to a
    dark intellectual web tied together into forming new superstructures. These new
    superstructures that are going to guide us into the age of unprecedented exponential
    change are anchored to modernity and Enlightenment values, and we''re returning
    to that, and we see that it really works. I feel like we''re now entering the
    post-post-modernist age, and that the counter-counter-revolution is, as a result,
    beginning. But the key here is that DevOps is the tip of the spear of all of that.'
  prefs: []
  type: TYPE_NORMAL
- en: I know that's kind of grandiose, but when you really start to get why all of
    this works, you'll see it works for the same reason that Western liberal democracy
    works. Empowering the individual and tying the success of the society to the success
    and freedom of the individual, their empowerment, and their sense of ownership
    over their own life is super-powerful. The standard of living in the world today
    is ridiculous, compared to what it was just a hundred years ago, and we're not
    really even celebrating that because we're too busy worrying about all of the
    things that are still bad. But if we can embrace this change and this new kind
    of post-post-modernism, then we can even accelerate that good change. If that's
    the case, then who knows where it can go?
  prefs: []
  type: TYPE_NORMAL
- en: DevOps in 2019 – success or failure?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: But would you say that DevOps in 2019 is a success story?
    Can I go to a company, and say: "Look, a lot of people are on board, and they
    saw success, and as a result, they''re doing great. It''s only you who''s missing
    the train." Or, have we just seen the start of the transformation, and we''re
    yet to see real adoption?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gregory Bledsoe**: In most cases, the adoption is superficial. It''s trying
    to slap a process example on top of a pathological culture because cultures are
    built accidentally. Almost no one intentionally builds the culture they want,
    with a goal in mind. It''s an accretion of reactions to events. That''s how cultures
    normally accrue. To consciously deconstruct and reconstruct that is hard, which
    is a big part of what a true transformation is. There''s a tiny minority of people
    who are intentionally trying to do that. That''s got to be the next way that will
    unlock the winners from the losers because the market advantage you get from doing
    that is tremendous. You''ll outpace your competitors. You have to because you''re
    applying the maximum amount of brain power to every problem. That''s one of the
    real secrets.'
  prefs: []
  type: TYPE_NORMAL
- en: It may be that your executives are the smartest people in the room, or maybe
    not, but the smartest person in the room is not smarter than all of the other
    people in the room put together. When nobody wants to speak up because he or she
    knows that the smartest person in the room doesn't want to hear something, then
    you're locking out all of this problem-solving power. This is why markets work
    better than central planning because the smartest central planner in the world
    can't be smarter than every other person navigating the market.
  prefs: []
  type: TYPE_NORMAL
- en: Their collective intelligence is an emergent property. In many ways, it's like
    an ant colony. An ant colony is an emergent property, from every individual just
    doing very simple things based on his own instinct and their designated duties.
    He's following pheromone trails, and he's carrying food. But the ant colony as
    a whole is extremely efficient and intelligent in a similar way to how markets
    are. What we need to do is have our organizations turn into that. Because organizations
    that can successfully transform into that have to be more successful, it's a mathematical
    certainty.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Does that mean the future lies in moving from pyramidal
    structures towards something flatter?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gregory Bledsoe**: Yes, because I believe we''re going to move away from
    hierarchy to meritocracy in our organizations. The concept of holacracy is out
    there, and I do think people are experimenting with it. I don''t know if holacracy
    is exactly what we''re going to end up with, but we''re going to end up with some
    kind of empowered constitutional organization where everyone is empowered to be
    the boss of his or her job. I think this is the ultimate expression, and that
    any organization can move toward this. I don''t know if it''s going to be official
    holacracy, something similar, or something very different. But the thing is, any
    leader within an organization can voluntarily stop using coercion and start using
    inspiration.'
  prefs: []
  type: TYPE_NORMAL
- en: That's true leadership instead of management, and when you start doing that,
    you automatically start flattening out the hierarchy, and you automatically start
    building more meritocracy. So, it's possible that, when we start selecting leaders
    differently for different qualities, then this could happen without something
    official like holacracy. But it is going to be the difference between the organizations
    that live and the organizations that die.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Exactly. Speaking of the future, what do you think is waiting
    for us? I''m not going to ask you to project ten years into the future because,
    as we talked about earlier, we don''t even know what''s going to happen in two
    years.'
  prefs: []
  type: TYPE_NORMAL
- en: Predicting the future of DevOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Gregory Bledsoe**: Who knows? There are a few short and longer-term things
    that I really do think we can predict. I think the DevSecOps term is going to
    go away. People are going to realize that DevSecOps is really about maturing DevOps,
    where you didn''t forget that security was a thing, and where you''re shifting
    that left and including them in the design discussion. People will be able to ask
    questions like: "Well, this looks like an opportunity for a SQL injection. Have
    you thought about that?"'
  prefs: []
  type: TYPE_NORMAL
- en: A pet peeve of mine is that SQL injection still exists because that question
    isn't asked in development. Developers are not incentivized to worry about security,
    and they're too far underwater to think about that in addition to just getting
    the feature out the door. That has to change, and that will radically alter security.
    DevSecOps is a good maturing DevOps, where you're shifting left. I think that
    term is going to be subsumed into DevOps. Right now, it's a term because people
    are discovering that we have to include security, we have to include compliance,
    and we have to include an audit because it's the only way we can adapt at scale.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: But what about the term DevOps? Do you think that the word
    will still have the same meaning in the future?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gregory Bledsoe**: I think the term DevOps will become synonymous with IT
    because everyone will at least understand that this is the way you do it now,
    and if you don''t do it this way, you''re doing it wrong. I think this is going
    to become understood, and that''s still going to leave a stratification of results.
    Some people are going to do it much better than others, and those who can unlearn
    and relearn the fastest will gain a sustained competitive advantage. They''ll
    be out in front of the pack, and that reason is why it''s imperative that people
    embrace and adopt this now. The longer you wait, the worse your odds. It doesn''t
    matter how deep the moat around your business is.'
  prefs: []
  type: TYPE_NORMAL
- en: '"DevOps will become synonymous with IT because everyone will at least understand
    that this is the way you do it now, and if you don''t do it this way, you''re
    doing it wrong."'
  prefs: []
  type: TYPE_NORMAL
- en: —Gregory Bledsoe
  prefs: []
  type: TYPE_NORMAL
- en: Look at the big banks. They've got huge regulatory moats around their businesses,
    but it's not saving them. They're still getting chipped away, and the banks that
    can adapt are the ones that are going to be able to fend off the FinTechs. Look
    at the transportation or the hotel industry across the board. They thought having
    bought all of these properties was their hedge against the market, but their real
    competitor now doesn't even own any property, it's Airbnb. The cost to enter markets
    is lower than it's ever been, and it's only going to get lower.
  prefs: []
  type: TYPE_NORMAL
- en: For communication, it doesn't matter if you own the right of way to run cables
    through neighborhoods and nobody else has that and you think that's your moat
    because 5G is coming. 5G will change the game, and those services that you offer
    over physical wires and physical fiber optics are going to mean less than ever,
    and the barrier to entry will be lower than ever. Everyone is going to be disrupted,
    and it's just a matter of whether you're going to disrupt yourself, or whether
    an external competitor's going to disrupt you. The people who figure that out
    and understand they have to adapt to this exponential change will survive, and
    everyone else will die. That's the long-term prediction.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: But after you get disrupted, is there still time to survive?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gregory Bledsoe**: Yes, there is that window but it''s shortening, and we
    don''t actually know how short a window it is, which is why everyone has to get
    started now. The ones who are going to really put themselves in a position to
    be future-proof are the ones who are asking those existential questions, the ones
    who are bothering to think deeply about this. They''re the ones who are going
    to be positioned to succeed.'
  prefs: []
  type: TYPE_NORMAL
- en: You can't just start by saying "OK, we can't survive without DevOps, so let's
    put Jenkins everywhere; but then let's create a silo to manage." You've just exacerbated
    your fundamental problem. The people who know that's not the way you do this and
    that it's really Deming's 14 points, the most important of which is to turn everyone
    into an agent of transformation, are the ones who are going to succeed and be
    able to best navigate the age of exponential change.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Absolutely true and especially when you mention Jenkins.
    I continuously visit companies, and no developers can ever touch it.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gregory Bledsoe**: It has to be that if you build it, you run it.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Exactly. But it''s difficult because it''s a revolution.
    If there is a power struggle, you can''t tell me if I build the entire vanity
    factory that would mean that I was running it yesterday.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gregory Bledsoe**: It''s true. The power struggle is not just organizational,
    but ideological. It''s scientific management or Taylorism versus Lean, that''s
    what it is. The ones who embrace Lean and succeed at changing the minds of everybody
    in the organization, that''s the trick right there.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: But how much more time do we need, because it''s been a
    while since software started and we still think that it''s a factory.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gregory Bledsoe**: Let me put it to you like this. Back in 2014, somebody
    figured out that 75 years ago, the average lifespan of a company on the Fortune
    500 list was 75 years. Fast-forward to 2014, and it was down to 10 years. These
    companies were being replaced by new and more agile companies that were still
    trying to expand their markets.'
  prefs: []
  type: TYPE_NORMAL
- en: That's another secret that I think people don't really understand, that the
    moment you stop trying to expand your markets and start trying to protect them,
    you're optimizing for protecting markets over expanding markets, and you've already
    started to die. There are smaller, nimbler companies with much less overhead and
    infrastructure waiting to feast upon your corpse before you're even done dying.
  prefs: []
  type: TYPE_NORMAL
- en: You're putting your leg in the piranha pool, and the piranhas are hungry. It's
    not the big fish that eat the little fish; it's the fast fish that eat the slow
    fish. We're going to see that the turnover among the Fortune 100 and the Fortune
    500 companies is going to be huge. I think the average lifespan is going to go
    down to 5 years, to 3 years, and then you're going to see a huge turnover on these
    lists. So, how much time do we have? Well, the rest of your life. How long do
    you have to pull the emergency chute if your primary chute fails? The rest of
    your life.
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Exactly. I''m going to use that one; I love it. I really
    think your definition of the thinking behind DevOps is brilliant.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gregory Bledsoe**: Thank you! You can probably tell that I could talk about
    this literally all day, every day. The fascinating thing is that there''s really
    no end to the discussion.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viktor Farcic**: Thank you again.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Gregory Bledsoe**: Thank you.'
  prefs: []
  type: TYPE_NORMAL
