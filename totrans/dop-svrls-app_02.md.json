["```\n$ pip install zappa \n```", "```\n$ zappa init \n```", "```\n $ zappa deploy production\n```", "```\neg. \n myServerlessService/\n        serverless.yml\n```", "```\n users/\n        serverless.yml # Contains 4 functions  \n posts/\n         serverless.yml # Contains 4 functions\n```", "```\n$ serverless create --template <runtimes> --path myService\n```", "```\n# serverless.yml\nservice: myService\nprovider:\n  name: aws\n  runtime: nodejs6.10\n  memorySize: 512 # will be inherited by all functions\nfunctions:\n  usersAdd:\n    handler: handler.userAdd\n    description: optional description for your function\nuserModify:\n    handler: handler.userModify\nuserDelete:\n    handler: handler.userDelete\n    memorySize: 256 # function specific\n```", "```\n # serverless.yml\n\n functions: \n     - ${file(../user-functions.yml)}\n   - ${file(../post-functions.yml)}\n # user-functions.yml \naddUser: \n     handler: handler.user \ndeleteUser: \n      handler: handler.user\n```", "```\n # serverless.yml \nservice: service-name \nprovider: aws \n\n functions: \n   hello: \n       handler: handler.hello \n       environment: \n           TABLE_NAME: tableName\n```", "```\nevents:\n - http:\n    path: handler\n    method: get\n```", "```\nprovider:  \n    name: aws \n     stage: ${opt:stage, 'dev'}\n```", "```\n$ serverless deploy --stage qa\n```", "```\n environment: SERV_SECRET: ${file(../config.${self:provider.stage}.json):CREDS} \n```", "```\nfunctions: \n    myfunction: \n        name: ${env:FUNC_PREFIX}-myfunction \n        handler: handler.myfunction\n```", "```\n $ serverless create --template aws-nodejs --path env-variable-service \n```", "```\n  $ cat serverless.yml\nservice: env-variable-service\n# You can pin your service to only deploy with a specific Serverless version\n # Check out our docs for more details\n # frameworkVersion: \"=X.X.X\"\nprovider:\n   name: aws\n   runtime: nodejs6.10\n# you can define service wide environment variables here\n   environment:\n     MY_VAR: Lion\n  functions:\n     hello:\n       handler: handler.hello\n $ less handler.js\n'use strict';\nmodule.exports.hello = (event, context, callback) => {\nconst response = {\n  statusCode: 200,\n  body: JSON.stringify({\n    message: `my favourite animal is ${process.env.MY_VAR}`,\n    input: event,\n  }),\n};\ncallback(null, response);\n};\n```", "```\n $ serverless invoke local -f hello\n {\n \"statusCode\": 200,\n \"body\": \"{\\\"message\\\":\\\"my favourite animal is Lion\\\",\\\"input\\\":\\\"\\\"}\"\n }\n\n```", "```\n $ less serverless.env.yml\n dev:\n   MYSECRET_VAR: 'It is at secret den'\n\n```", "```\n# serverless.yml\n # you can define service wide environment variables here\nenvironment:\n   MY_VAR: Lion\n   MYSECRET_VAR: ${file(./serverless.env.yml):dev.MYSECRET_VAR}\n```", "```\n # handler.js\nmessage: `my favourite animal is ${process.env.MY_VAR} and ${process.env.MYSECRET_VAR}`,\n```", "```\n $ serverless invoke local -f hello\n {\n \"statusCode\": 200,\n \"body\": \"{\\\"message\\\":\\\"my favourite animal is Lion and It is at secret den\\\",\\\"input\\\":\\\"\\\"}\"\n }\n```", "```\n $ less serverless.env.yml\ndev:\n   MYSECRET_VAR: 'It is at secret dev den'\nprod:\n   MYSECRET_VAR: 'It is at secret prod den'\n```", "```\n #serverless.yml\nMYSECRET_VAR: ${file(./serverless.env.yml):${opt:stage}.MYSECRET_VAR}\n```", "```\n $ serverless invoke local -f hello -s dev\n {\n \"statusCode\": 200,\n \"body\": \"{\\\"message\\\":\\\"my favourite animal is Lion and It is at secret dev den\\\",\\\"input\\\":\\\"\\\"}\"\n }\n\n $ serverless invoke local -f hello -s prod\n {\n \"statusCode\": 200,\n \"body\": \"{\\\"message\\\":\\\"my favourite animal is Lion and It is at secret Prod den\\\",\\\"input\\\":\\\"\\\"}\"\n }\n```", "```\n$ npm install --save custom-serverless-plugin\n```", "```\nserverless.yml file \n plugins:\n     - custom-serverless-plugin\n```", "```\nresources:\n  Resources:\n    NewResource:\n       Type: AWS::S3::Bucket\n       Properties:\n         BucketName: my-s3-bucket\n```", "```\n$ export AWS_ACCESS_KEY_ID=<access-key-id>\n$ export AWS_SECRET_ACCESS_KEY=<secret-key-id>\n```", "```\n $ node --version\n```", "```\n $ npm install -g serverless\n```", "```\n$ serverless\n```", "```\n$ serverless --version\n```", "```\n$ serverless create --template aws-nodejs --path my-serverless-service\nServerless: Generating boilerplate...\n Serverless: Generating boilerplate in \"/Users/shashi/Documents/packt/chapter2/serverless/my-serverless-service\"\n _______ __\n | _ .-----.----.--.--.-----.----| .-----.-----.-----.\n | |___| -__| _| | | -__| _| | -__|__ --|__ --|\n |____ |_____|__| \\___/|_____|__| |__|_____|_____|_____|\n | | | The Serverless Application Framework\n | | serverless.com, v1.26.1\n -------'\nServerless: Successfully generated boilerplate for template: \"aws-nodejs\"\n```", "```\n$ cat serverless.yml \n# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n# docs.serverless.com \n#\n# Happy Coding!\nservice: my-serverless-service\n# You can pin your service to only deploy with a specific Serverless version\n# Check out our docs for more details\n# frameworkVersion: \"=X.X.X\"\nprovider:\nname: aws\nruntime: nodejs6.10\nstage: dev\nregion: us-east-1\nfunctions:\nhello:\nhandler: handler.hello\nmemorySize: 128\nevents:\n- http:\npath: handler\nmethod: get\n```", "```\n$ cat handler.js\n'use strict';\nmodule.exports.hello = (event, context, callback) => {\nconst response = {\nstatusCode: 200,\nbody: JSON.stringify({\nmessage: 'My Serverless World',\ninput: event,\n}),\n};\ncallback(null, response);\n// Use this code if you don't use the http event with the LAMBDA-PROXY integration\n// callback(null, { message: 'Go Serverless v1.0! Your function executed successfully!', event });\n};\n```", "```\n$ serverless invoke local --function hello\n {\n \"statusCode\": 200,\n \"body\": \"{\\\"message\\\":\\\"My Serverless World\\\",\\\"input\\\":\\\"\\\"}\"\n }\n```", "```\n$ export AWS_ACCESS_KEY_ID=<access-key-id>\n$ export AWS_SECRET_ACCESS_KEY=<secret-key-id> \n```", "```\n$ serverless deploy\n\n Serverless: Packaging service...\n Serverless: Excluding development dependencies...\n Serverless: Creating Stack...\n Serverless: Checking Stack create progress...\n .....\n Serverless: Stack create finished...\n Serverless: Uploading CloudFormation file to S3...\n Serverless: Uploading artifacts...\n Serverless: Uploading service .zip file to S3 (417 B)...\n Serverless: Validating template...\n Serverless: Updating Stack...\n Serverless: Checking Stack update progress...\n ..............................\n Serverless: Stack update finished...\n Service Information\n service: my-serverless-service\n stage: dev\n region: us-east-1\n stack: my-serverless-service-dev\n api keys:\n None\n endpoints:\n GET - https://kn6esoolgi.execute-api.us-east-1.amazonaws.com/dev/handler\n functions:\n hello: my-serverless-service-dev-hello\n```", "```\n $ serverless invoke -f hello -l\n {\n \"statusCode\": 200,\n \"body\": \"{\\\"message\\\":\\\"My Serverless World\\\",\\\"input\\\":{}}\"\n }\n --------------------------------------------------------------------\n START RequestId: c4bdc7f8-60e1-11e8-9846-f5267af11144 Version: $LATEST\n END RequestId: c4bdc7f8-60e1-11e8-9846-f5267af11144\n REPORT RequestId: c4bdc7f8-60e1-11e8-9846-f5267af11144 Duration: 44.37 ms Billed Duration: 100 ms Memory Size: 128 MB Max Memory Used: 20 MB\n```", "```\n$ serverless logs -f hello -t\nSTART RequestId: 75139847-60dc-11e8-8c0b-4f4996ceffb3 Version: $LATEST\n END RequestId: 75139847-60dc-11e8-8c0b-4f4996ceffb3\n REPORT RequestId: 75139847-60dc-11e8-8c0b-4f4996ceffb3 Duration: 9.04 ms Billed Duration: 100 ms Memory Size: 128 MB Max Memory Used: 20 MB\nSTART RequestId: 675574ec-60de-11e8-bbd5-8bf1c1e7f05c Version: $LATEST\n END RequestId: 675574ec-60de-11e8-bbd5-8bf1c1e7f05c\n REPORT RequestId: 675574ec-60de-11e8-bbd5-8bf1c1e7f05c Duration: 18.15 ms Billed Duration: 100 ms Memory Size: 128 MB Max Memory Used: 20 MB\n```", "```\n$ serverless remove\nServerless: Getting all objects in S3 bucket...\n Serverless: Removing objects in S3 bucket...\n Serverless: Removing Stack...\n Serverless: Checking Stack removal progress...\n .........\n Serverless: Stack removal finished...\n\n```"]