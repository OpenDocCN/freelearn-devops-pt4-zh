["```\n$ mkdir tutorial1; cd tutorial1 $ npm install async gm\n```", "```\n// dependencies\nvar async = require('async');\nvar AWS = require('aws-sdk');\nvar gm = require('gm')\n            .subClass({ imageMagick: true }); // Enable ImageMagick integration.\nvar util = require('util');\n// constants\nvar MAX_WIDTH  = 100;\nvar MAX_HEIGHT = 100;\n// get reference to S3 client\nvar s3 = new AWS.S3();\nexports.handler = function(event, context, callback) {\n    // Read options from the event.\n    console.log(\"Reading options from event:\\n\", util.inspect(event, {depth: 5}));\n    var srcBucket = event.Records[0].s3.bucket.name;\n    // Object key may have spaces or unicode non-ASCII characters.\n    var srcKey    =\n    decodeURIComponent(event.Records[0].s3.object.key.replace(/\\+/g, \" \")); \n    var dstBucket = srcBucket + \"resized\";\n    var dstKey    = \"resized-\" + srcKey;\n```", "```\n    if (srcBucket == dstBucket) {\n       callback(\"Source and destination buckets are the same.\");\n        return;\n    }\n```", "```\nvar typeMatch = srcKey.match(/\\.([^.]*)$/);\n    if (!typeMatch) {\n        callback(\"Could not determine the image type.\");\n        return;\n    }\n    var imageType = typeMatch[1];\n    if (imageType != \"jpg\" && imageType != \"png\") {\n        callback('Unsupported image type: ${imageType}');\n        return;\n    }\n```", "```\nasync.waterfall([\n        function download(next) {\n            // Download the image from S3 into a buffer.\n            s3.getObject({\n                    Bucket: srcBucket,\n                    Key: srcKey\n                },\n                next);\n            },\n        function transform(response, next) {\n            gm(response.Body).size(function(err, size) {\n```", "```\nvar scalingFactor = Math.min(\n                    MAX_WIDTH / size.width,\n                    MAX_HEIGHT / size.height\n                );\n                var width  = scalingFactor * size.width;\n                var height = scalingFactor * size.height;\n```", "```\nthis.resize(width, height)\n                    .toBuffer(imageType, function(err, buffer) {\n                        if (err) {\n                            next(err);\n                        } else {\n                            next(null, response.ContentType, buffer);\n                        }\n                    });\n            });\n        },\n        function upload(contentType, data, next) {\n```", "```\ns3.putObject({\n                    Bucket: dstBucket,\n                    Key: dstKey,\n                    Body: data,\n                    ContentType: contentType\n                },\n                next);\n            }\n        ], function (err) {\n            if (err) {\n                console.error(\n                    'Unable to resize ' + srcBucket + '/' + srcKey +\n                    ' and upload to ' + dstBucket + '/' + dstKey +\n                    ' due to an error: ' + err\n                );\n            } else {\n                console.log(\n                    'Successfully resized ' + srcBucket + '/' + srcKey\n+\n                    ' and uploaded to ' + dstBucket + '/' + dstKey\n                );\n            }\n            callback(null, \"message\");\n        }\n    );\n};\n```", "```\n$ cd tutorials1\n$ zip -r ../tutorialsimg.zip *\n```", "```\n{\n  \"Records\": [\n    {\n      \"eventVersion\": \"2.0\",\n      \"eventSource\": \"aws:s3\",\n      \"awsRegion\": \"us-west-2\",\n      \"eventTime\": \"1970-01-01T00:00:00.000Z\",\n      \"eventName\": \"ObjectCreated:Put\",\n      \"userIdentity\": {\n        \"principalId\": \"AIDAJDPLRKLG7UEXAMPLE\"\n      },\n      \"requestParameters\": {\n        \"sourceIPAddress\": \"127.0.0.1\"\n      },\n      \"responseElements\": {\n        \"x-amz-request-id\": \"C3D13FE58DE4C810\",\n        \"x-amz-id-2\": \"FMyUVURIY8/IgAtTv8xRjskZQpcIZ9KG4V5Wp6S7S/JRWeUWerMUE5JgHvANOjpD\"\n      },\n      \"s3\": {\n        \"s3SchemaVersion\": \"1.0\",\n        \"configurationId\": \"testConfigRule\",\n        \"bucket\": {\n          \"name\": \"***my-source-bucket76***\",\n          \"ownerIdentity\": {\n            \"principalId\": \"A3NL1KOZZKExample\"\n          },\n          \"arn\": \"arn:aws:s3:::***my-source-bucket76***\"\n        },\n        \"object\": {\n          \"key\": \"***Baby.jpg***\",\n          \"size\": 1024,\n          \"eTag\": \"d41d8cd98f00b204e9800998ecf8427e\",\n          \"versionId\": \"096fKKXTRTtl3on89fVO.nfljtsv6qko\"\n        }\n      }\n    }\n  ]\n}\n```", "```\n$ serverless create --template aws-nodejs --path AWSLambdaMyTask\n$ cd AWSLambdaMyTask\n```", "```\n$ mkdir test\n$ mkdir src  \n```", "```\n{\n  \"name\": \"AWS-serverless-with-dynamodb\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Serverless CRUD service exposing a REST HTTP interface\",\n  \"author\": \"Shashikant Bangera\",\n  \"dependencies\": {\n    \"uuid\": \"^3.0.1\"\n  },\n  \"keywords\": [\n    \"AWS\",\n    \"Deployment\",\n    \"CD/CI\",\n    \"serverless\",\n    \"task\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"\"\n  },\n  \"bugs\": {\n    \"url\": \"\"\n  },\n  \"author\": \"Shashikant Bangera <shzshi@gmail.com>\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"AWS-sdk\": \"^2.6.7\",\n    \"request\": \"^2.79.0\",\n    \"mocha\": \"^3.2.0\",\n    \"serverless\": \"^1.7.0\"\n},\n  \"scripts\": {\n    \"test\": \"./node_modules/.bin/mocha\"\n  }\n}\n```", "```\n# Welcome to Serverless!\n#\n# This file is the main config file for your service.\n# It's very minimal at this point and uses default values.\n# You can always add more config options for more control.\n# We've included some commented out config examples here.\n# Just uncomment any of them to get that config option.\n#\n# For full config options, check the docs:\n#    docs.serverless.com\n#\n# Happy Coding!\nservice: AWSLambdaMyTask\nframeworkVersion: \">=1.1.0 <2.0.0\"\nprovider:\n  name: AWS\n  runtime: nodejs4.3\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:AWS:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\nfunctions:\n  create:\n    handler: src/mytasks/create.create\n---\n  list:\n    handler: src/mytasks/list.list\n---\n  get:\n    handler: src/mytasks/get.get\n---\n  update:\n    handler: src/mytasks/update.update\n---\n  delete:\n    handler: src/mytasks/delete.delete\n---\nresources:\n  Resources:\n    mytasksDynamoDbTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n```", "```\n$ cd src\n$ mkdir mytasks\n$ vim package.json\n```", "```\n{\n  \"name\": \"src\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"uuid\": \"^2.0.3\"\n  }\n}\n```", "```\n'use strict';\nconst uuid = require('uuid');\nconst AWS = require('AWS-sdk');\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nmodule.exports.create = (event, context, callback) => {\n  const timestamp = new Date().getTime();\n  const data = JSON.parse(event.body);\n  if (typeof data.text !== 'string') {\n    console.error('Validation Failed');\n    callback(null, {\n      statusCode: 400,\n      headers: { 'Content-Type': 'text/plain' },\n      body: 'Couldn\\'t create the task item.',\n    });\n    return;\n  }\n  const params = {\n    TableName: process.env.DYNAMODB_TABLE,\n    Item: {\n      id: uuid.v1(),\n      text: data.text,\n      checked: false,\n      createdAt: timestamp,\n      updatedAt: timestamp,\n    },\n  };\n  // write the task to the database\n  dynamoDb.put(params, (error) => {\n    // handle potential errors\n    if (error) {\n      console.error(error);\n      callback(null, {\n        statusCode: error.statusCode || 501,\n        headers: { 'Content-Type': 'text/plain' },\n        body: 'Couldn\\'t create the task item.',\n      });\n      return;\n    }\n    // create a response\n    const response = {\n      statusCode: 200,\n      body: JSON.stringify(params.Item),\n    };\n    callback(null, response);\n  });\n};\n```", "```\n'use strict';\nconst AWS = require('AWS-sdk'); // eslint-disable-line import/no-extraneous-dependencies\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nmodule.exports.delete = (event, context, callback) => {\n  const params = {\n    TableName: process.env.DYNAMODB_TABLE,\n    Key: {\n      id: event.pathParameters.id,\n    },\n  };\n  // delete the task from the database\n  dynamoDb.delete(params, (error) => {\n    // handle potential errors\n    if (error) {\n      console.error(error);\n      callback(null, {\n        statusCode: error.statusCode || 501,\n        headers: { 'Content-Type': 'text/plain' },\n        body: 'Couldn\\'t remove the task item.',\n      });\n      return;\n    }\n    // create a response\n    const response = {\nstatusCode: 200,\n      body: JSON.stringify({}),\n    };\n    callback(null, response);\n  });\n};\n```", "```\n'use strict';\nconst AWS = require('AWS-sdk'); // eslint-disable-line import/no-extraneous-dependencies\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nmodule.exports.get = (event, context, callback) => {\n  const params = {\n    TableName: process.env.DYNAMODB_TABLE,\n    Key: {\n      id: event.pathParameters.id,\n    },\n  };\n  // fetch task from the database\n  dynamoDb.get(params, (error, result) => {\n    // handle potential errors\nif (error) {\n      console.error(error);\n      callback(null, {\n        statusCode: error.statusCode || 501,\n        headers: { 'Content-Type': 'text/plain' },\n        body: 'Couldn\\'t fetch the task item.',\n      });\n      return;\n    }\n    // create a response\n    const response = {\n      statusCode: 200,\n      body: JSON.stringify(result.Item),\n    };\n    callback(null, response);\n  });\n};\n```", "```\n'use strict';\nconst AWS = require('AWS-sdk'); // eslint-disable-line import/no-extraneous-dependencies\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nconst params = {\n  TableName: process.env.DYNAMODB_TABLE,\n};\nmodule.exports.list = (event, context, callback) => {\n  // fetch all tasks from the database\n  dynamoDb.scan(params, (error, result) => {\n    // handle potential errors\n    if (error) {\n      console.error(error);\n      callback(null, {\n        statusCode: error.statusCode || 501,\n        headers: { 'Content-Type': 'text/plain' },\n        body: 'Couldn\\'t fetch the tasks.',\n      });\n      return;\n    }\n    // create a response\n    const response = {\n      statusCode: 200,\n      body: JSON.stringify(result.Items),\n    };\n    callback(null, response);\n  });\n};\n```", "```\n'use strict';\nconst AWS = require('AWS-sdk'); // eslint-disable-line import/no-extraneous-dependencies\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nmodule.exports.update = (event, context, callback) => {\n  const timestamp = new Date().getTime();\n  const data = JSON.parse(event.body);\n  // validation\n  if (typeof data.text !== 'string' || typeof data.checked !== 'boolean') {\n    console.error('Validation Failed');\n    callback(null, {\n      statusCode: 400,\n      headers: { 'Content-Type': 'text/plain' },\n      body: 'Couldn\\'t update the task item.',\n    });\n    return;\n  }\n  const params = {\n    TableName: process.env.DYNAMODB_TABLE,\n    Key: {\nid: event.pathParameters.id,\n    },\n    ExpressionAttributeNames: {\n      '#task_text': 'text',\n    },\n    ExpressionAttributeValues: {\n      ':text': data.text,\n      ':checked': data.checked,\n      ':updatedAt': timestamp,    },\n    UpdateExpression: 'SET #task_text = :text, checked = :checked,\nupdatedAt = :updatedAt',\n    ReturnValues: 'ALL_NEW',\n  };\n  // update the task in the database\n  dynamoDb.update(params, (error, result) => {\n    // handle potential errors\n    if (error) {\n      console.error(error);\n      callback(null, {\n        statusCode: error.statusCode || 501,\n        headers: { 'Content-Type': 'text/plain' },\n        body: 'Couldn\\'t fetch the task item.',\n      });\n      return;\n    }\n// create a response\n    const response = {\n      statusCode: 200,\n      body: JSON.stringify(result.Attributes),\n    };\n    callback(null, response);\n  });\n};\n```", "```\n$ mkdir test/data\n```", "```\nvar assert = require('assert');\nvar request = require('request');\nvar fs = require('fs');\ndescribe('Create, Delete', function() {\n            this.timeout(5000);\n    it('should create a new Task, & delete it', function(done) {\n                        // Build and log the path\n                        var path = \"https://\" + process.env.TASKS_ENDPOINT + \"/mytasks\";\n                        // Fetch the comparison payload\n                        require.extensions['.txt'] = function (module, filename) {\n                            module.exports = fs.readFileSync(filename, 'utf8');\n                        };\n                        var desiredPayload = require(\"./data/newTask1.json\");\n                        // Create the new Task\n                        var options = {'url' : path, 'form': JSON.stringify(desiredPayload)};\n                        request.post(options, function (err, res, body){\n                                    if(err){\n                                                throw new Error(\"Create call failed: \" + err);\n                                    }\n                                    assert.equal(200, res.statusCode, \"Create Status Code != 200 (\" + res.statusCode + \")\");\n                                    var task = JSON.parse(res.body);\n                                    // Now delete the task\n                                    var deletePath = path + \"/\" +\ntask.id;\n                                   request.del(deletePath, function (err, res, body){\n                                                if(err){\n                                                            throw new Error(\"Delete call failed: \" + err);\n                                                }\n                                                assert.equal(200, res.statusCode, \"Delete Status Code != 200 (\" + res.statusCode + \")\");\n                                                done();\n                                    });\n                        });\n    });\n});\n```", "```\nvar assert = require('assert');\nvar request = require('request');\nvar fs = require('fs');\ndescribe('Create, List, Delete', function() {\n            this.timeout(5000);\n    it('should create a new task, list it, & delete it', function(done) {\n                        // Build and log the path\n----\n                        // Fetch the comparison payload\n                        require.extensions['.txt'] = function (module, filename) {\n----\n                        // Create the new Task\n                        var options = {'url' : path, 'form': JSON.stringify(desiredPayload)};\n                        request.post(options, function (err, res, body){\n                                    if(err){\n                                                throw new Error(\"Create call failed: \" + err);\n                                    }\n                                    assert.equal(200, res.statusCode, \"Create Status Code != 200 (\" + res.statusCode + \")\");\n// Read the list, see if the new item is there at the end\n                                    request.get(path, function (err,\nres, body){\n                                                if(err){\n                                                            throw new Error(\"List call failed: \" + err);\n                                                }\n                                                assert.equal(200, res.statusCode, \"List Status Code != 200 (\" + res.statusCode + \")\");\n                                                var taskList = JSON.parse(res.body);\n                                                if(taskList[taskList.length-1].text = desiredPayload.text)     {\n                                                            // Item found, delete it\n-----\n                                                                        assert.equal(200, res.statusCode, \"Delete Status Code != 200 (\" + res.statusCode + \")\");\n                                                                        done();\n                                                            });\n                                                } else {\n                                                            // Item not found, fail test\n                                                            assert.equal(true, false, \"New item not found in list.\");\n                                                            done();\n                                                }\n});\n                        });\n    });\n});\n```", "```\nvar assert = require('assert');\nvar request = require('request');\nvar fs = require('fs');\ndescribe('Create, Read, Delete', function() {\n            this.timeout(5000);\n    it('should create a new Todo, read it, & delete it', function(done) {\n                        // Build and log the path\n                        var path = \"https://\" + process.env.TASKS_ENDPOINT + \"/mytasks\";\n                        // Fetch the comparison payload\n                        require.extensions['.txt'] = function (module, filename) {\n                            module.exports = fs.readFileSync(filename, 'utf8');\n                        };\n                        var desiredPayload = require(\"./data/newTask1.json\");\n                        // Create the new todo\n                        var options = {'url' : path, 'form': JSON.stringify(desiredPayload)};\n                        request.post(options, function (err, res, body){\nif(err){\n                                                throw new Error(\"Create call failed: \" + err);\n                                    }\n                                    assert.equal(200, res.statusCode, \"Create Status Code != 200 (\" + res.statusCode + \")\");\n                                    var todo = JSON.parse(res.body);\n                                    // Read the item\n                                    var specificPath = path + \"/\" + todo.id;\n                                    request.get(path, function (err, res, body){\n                                                if(err){\n                                                            throw new Error(\"Read call failed: \" + err);\n                                                }\n                                                assert.equal(200,\nres.statusCode, \"Read Status Code != 200 (\" + res.statusCode + \")\");\n                                                var todoList = JSON.parse(res.body);\n                                                if(todoList.text = desiredPayload.text)          \n\n                                                            // Item found, delete it\n                                                            request.del(specificPath, function (err, res, body){\n                                                                        if(err){\n                                                                                    throw new Error(\"Delete call failed: \" + err);\n                                                                        }\n                                                                        assert.equal(200, res.statusCode, \"Delete Status Code != 200 (\" + res.statusCode + \")\");\n                                                                        done();\n                                                            });\n} else {\n                                                            // Item not found, fail test\n                                                            assert.equal(true, false, \"New item not found in list.\");\n                                                            done();\n                                                }\n                                    });\n                        });\n    });\n});\n```", "```\n{ \"text\": \"Learn Serverless\" }\n```", "```\n{ \"text\": \"Test Serverless\" }\n```", "```\n$ git clone https://github.com/shzshi/AWS-lambda-dynamodb-mytasks.git\n```", "```\n$ git add .\n$ git commit –m “my first commit”\n$ git push origin master\n```", "```\n$ curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -\n$ sudo apt-get install -y nodejs\n$ sudo npm install -g serverless\n```", "```\n$ git clone https://github.com/shzshi/aws-lambda-dynamodb-mytasks.git\n```", "```\n$ cd aws-lambda-dynamodb-mytasks\n$ docker build --rm -f Dockerfile -t aws-lambda-dynamodb-mytasks:latest .\n$ docker images\n```", "```\n$ mkdir jenkins\n$ docker run --rm -it -p 50000:50000 -p 8080:8080 -v <FULL_PATH_TO_JENKINS_FOLDER>/jenkins:/var/jenkins_home  aws-lambda-dynamodb-mytasks:latest\n```", "```\nstage ('System Test on Dev') {\nsteps {\n    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'dev-serverless', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {\n    sh ''' \n        export TASKS_ENDPOINT=6pgn5wuqeh.execute-api.us-east-1.amazonaws.com/dev\n./node_modules/mocha/bin/mocha ./test/*.js\n'''\n   }\n  }\n}\n\n```", "```\nendpoints:\n  POST - https://6pgn5wuqeh.execute-api.us-east-1.amazonaws.com/dev/mytasks\n  GET - https://6pgn5wuqeh.execute-api.us-east-1.amazonaws.com/dev/mytasks\n  GET - https://6pgn5wuqeh.execute-api.us-east-1.amazonaws.com/dev/mytasks/{id}\n  PUT - https://6pgn5wuqeh.execute-api.us-east-1.amazonaws.com/dev/mytasks/{id}\n  DELETE - https://6pgn5wuqeh.execute-api.us-east-1.amazonaws.com/dev/mytasks/{id}\n```", "```\nexport TASKS_ENDPOINT=6pgn5wuqeh.execute-api.us-east-1.amazonaws.com/dev \n```", "```\n$ serverless create --template aws-nodejs --path my-canary-deployment\n```", "```\nservice: my-canary-deployment \nprovider:  \n    name: aws  \n    runtime: nodejs6.10 \n\nplugins:  \n    - serverless-plugin-canary-deployments \nfunctions:  \n    hello:  \n        handler: handler.hello  \n        events:  \n            - http: get hello\n```", "```\nmodule.exports.hello = (event, context, callback) => { \n    const response = { \n        statusCode: 200, \n        body: 'Go Serverless v1.0! Your function executed successfully!' \n    };\n\n    callback(null, response);\n};\n```", "```\n{\n    \"name\": \"my-canary-deployment\",\n    \"version\": \"1.0.0\",\n    \"description\": \"\",\n    \"main\": \"handler.js\",\n    \"scripts\": {\n        \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n    },\n    \"author\": \"shashikant bangera\",\n    \"devDependencies\": {\n        \"serverless-plugin-aws-alerts\": \"^1.2.4\",\n        \"serverless-plugin-canary-deployments\": \"^0.4.0\"\n    }\n}\n```", "```\n$ npm install \n$ serverless deploy -v\n```", "```\n$ curl https://<my-service-endpoint>-east-1.amazonaws.com/dev/hello\n\nGo Serverless v1.0! Your function executed successfully!\n```", "```\nservice: my-canary-deployment\nprovider:\n name: aws\n runtime: nodejs6.10\n\nplugins:\n - serverless-plugin-canary-deployments\nfunctions:\n hello:\n     handler: handler.hello\n     events:\n         - http: get hello\n     deploymentSettings:\n type: Linear10PercentEvery1Minute\n alias: Live\n```", "```\nmodule.exports.hello = (event, context, callback) => {\n    const response = {\n    statusCode: 200,\n    body: 'Hey new version is 1.26.1 !'\n    };\n    callback(null, response);\n};\n```", "```\n$ serverless deploy -v\n\nServerless: Packaging service...\n---\nServerless: Checking Stack update progress...\nCloudFormation - UPDATE_IN_PROGRESS - AWS::CloudFormation::Stack - my-canary-deployment-dev\nCloudFormation - CREATE_IN_PROGRESS - AWS::IAM::Role - CodeDeployServiceRole\nCloudFormation - CREATE_IN_PROGRESS - AWS::CodeDeploy::Application - MycanarydeploymentdevDeploymentApplication\nCloudFormation - UPDATE_IN_PROGRESS - AWS::Lambda::Function - HelloLambdaFunction\nCloudFormation - CREATE_IN_PROGRESS - AWS::CodeDeploy::Application - MycanarydeploymentdevDeploymentApplication\nCloudFormation - CREATE_IN_PROGRESS - AWS::IAM::Role - CodeDeployServiceRole\nCloudFormation - CREATE_COMPLETE - AWS::CodeDeploy::Application - MycanarydeploymentdevDeploymentApplication\nCloudFormation - UPDATE_COMPLETE - AWS::Lambda::Function - HelloLambdaFunction\nCloudFormation - CREATE_IN_PROGRESS - AWS::Lambda::Version - HelloLambdaVersionW59z2S8rIu6lAv3dCyvgKLndpEosDs1l1kpbg6Lrg\nCloudFormation - CREATE_IN_PROGRESS - AWS::Lambda::Version - HelloLambdaVersionW59z2S8rIu6lAv3dCyvgKLndpEosDs1l1kpbg6Lrg\nCloudFormation - CREATE_COMPLETE - AWS::Lambda::Version - HelloLambdaVersionW59z2S8rIu6lAv3dCyvgKLndpEosDs1l1kpbg6Lrg\nCloudFormation - CREATE_COMPLETE - AWS::IAM::Role - CodeDeployServiceRole\nCloudFormation - CREATE_IN_PROGRESS - AWS::CodeDeploy::DeploymentGroup - HelloLambdaFunctionDeploymentGroup\nCloudFormation - CREATE_IN_PROGRESS - AWS::CodeDeploy::DeploymentGroup - HelloLambdaFunctionDeploymentGroup\nCloudFormation - CREATE_COMPLETE - AWS::CodeDeploy::DeploymentGroup - HelloLambdaFunctionDeploymentGroup\nCloudFormation - CREATE_IN_PROGRESS - AWS::Lambda::Alias - HelloLambdaFunctionAliasLive\nCloudFormation - CREATE_IN_PROGRESS - AWS::Lambda::Alias - HelloLambdaFunctionAliasLive\nCloudFormation - CREATE_COMPLETE - AWS::Lambda::Alias - HelloLambdaFunctionAliasLive\nCloudFormation - UPDATE_IN_PROGRESS - AWS::ApiGateway::Method - ApiGatewayMethodHelloGet\nCloudFormation - UPDATE_COMPLETE - AWS::ApiGateway::Method - ApiGatewayMethodHelloGet\nCloudFormation - UPDATE_IN_PROGRESS - AWS::Lambda::Permission - HelloLambdaPermissionApiGateway\nCloudFormation - UPDATE_IN_PROGRESS - AWS::Lambda::Permission - HelloLambdaPermissionApiGateway\nCloudFormation - CREATE_IN_PROGRESS - AWS::ApiGateway::Deployment - ApiGatewayDeployment1530401347906\nCloudFormation - CREATE_IN_PROGRESS - AWS::ApiGateway::Deployment - ApiGatewayDeployment1530401347906\nCloudFormation - CREATE_COMPLETE - AWS::ApiGateway::Deployment - ApiGatewayDeployment1530401347906\nCloudFormation - UPDATE_COMPLETE - AWS::Lambda::Permission - HelloLambdaPermissionApiGateway\nCloudFormation - UPDATE_COMPLETE_CLEANUP_IN_PROGRESS - AWS::CloudFormation::Stack - my-canary-deployment-dev\nCloudFormation - DELETE_IN_PROGRESS - AWS::Lambda::Permission - HelloLambdaPermissionApiGateway\nCloudFormation - DELETE_IN_PROGRESS - AWS::ApiGateway::Deployment - ApiGatewayDeployment1530398711004\nCloudFormation - DELETE_SKIPPED - AWS::Lambda::Version - HelloLambdaVersionjAYLrhwIiK3mGoae1oyrqMYfnXsHGIk0IuE6gh2dWdA\nCloudFormation - DELETE_COMPLETE - AWS::ApiGateway::Deployment - ApiGatewayDeployment1530398711004\nCloudFormation - DELETE_COMPLETE - AWS::Lambda::Permission - HelloLambdaPermissionApiGateway\nCloudFormation - UPDATE_COMPLETE - AWS::CloudFormation::Stack - my-canary-deployment-dev\n```", "```\n$ curl https://<api-gateway-path>.amazonaws.com/dev/hello\nGo Serverless v1.0! Your function executed successfully!\n\n$ curl https://<api-gateway-path>.amazonaws.com/dev/hello\nHey new version is 1.26.1!\n```", "```\nservice: my-canary-deployment\nprovider:\n name: aws\n runtime: nodejs6.10\n\nplugins:\n    - serverless-plugin-aws-alerts\n    - serverless-plugin-canary-deployments\n\ncustom:\n alerts:\n dashboards: true\n\nfunctions:\n    hello:\n         handler: handler.hello\n         events:\n             - http: get hello\n         alarms:\n - name: test\n namespace: 'AWS/Lambda'\n metric: Errors\n threshold: 1\n statistic: Minimum\n period: 60\n evaluationPeriods: 1\n comparisonOperator: GreaterThanOrEqualToThreshold\n         deploymentSettings:\n             type: Linear10PercentEvery1Minute\n             alias: Live\n             alarms:\n - HelloTestAlarm\n```", "```\n$ serverless deploy -v\n\nServerless: Packaging service...\nServerless: Excluding development dependencies...\nServerless: Uploading CloudFormation file to S3...\nServerless: Uploading artifacts...\nServerless: Uploading service .zip file to S3 (611 B)...\nServerless: Validating template...\nServerless: Updating Stack...\nServerless: Checking Stack update progress...\nCloudFormation - UPDATE_IN_PROGRESS - AWS::CloudFormation::Stack - my-canary-deployment-dev\nCloudFormation - CREATE_IN_PROGRESS - AWS::CloudWatch::Dashboard - AlertsDashboard\nCloudFormation - UPDATE_IN_PROGRESS - AWS::Lambda::Function - HelloLambdaFunction\nCloudFormation - UPDATE_COMPLETE - AWS::Lambda::Function - HelloLambdaFunction\nCloudFormation - CREATE_IN_PROGRESS - AWS::CloudWatch::Alarm - HelloTestAlarm\nCloudFormation - CREATE_IN_PROGRESS - AWS::CloudWatch::Alarm - HelloTestAlarm\nCloudFormation - CREATE_IN_PROGRESS - AWS::Lambda::Version - HelloLambdaVersionja19jdYXntxmsiUagZLZfDEMTshQJ8ApOagyYwmXE\nCloudFormation - CREATE_COMPLETE - AWS::CloudWatch::Alarm - HelloTestAlarm\nCloudFormation - CREATE_IN_PROGRESS - AWS::Lambda::Version - HelloLambdaVersionja19jdYXntxmsiUagZLZfDEMTshQJ8ApOagyYwmXE\nCloudFormation - CREATE_COMPLETE - AWS::Lambda::Version - HelloLambdaVersionja19jdYXntxmsiUagZLZfDEMTshQJ8ApOagyYwmXE\nCloudFormation - CREATE_IN_PROGRESS - AWS::CloudWatch::Dashboard - AlertsDashboard\nCloudFormation - CREATE_COMPLETE - AWS::CloudWatch::Dashboard - AlertsDashboard\nCloudFormation - UPDATE_IN_PROGRESS - AWS::CodeDeploy::DeploymentGroup - HelloLambdaFunctionDeploymentGroup\nCloudFormation - UPDATE_COMPLETE - AWS::CodeDeploy::DeploymentGroup - HelloLambdaFunctionDeploymentGroup\nCloudFormation - UPDATE_IN_PROGRESS - AWS::Lambda::Alias - HelloLambdaFunctionAliasLive\nCloudFormation - UPDATE_IN_PROGRESS - AWS::Lambda::Alias - HelloLambdaFunctionAliasLive\nCloudFormation - UPDATE_COMPLETE - AWS::Lambda::Alias - HelloLambdaFunctionAliasLive\nCloudFormation - CREATE_IN_PROGRESS - AWS::ApiGateway::Deployment - ApiGatewayDeployment1530403890255\nCloudFormation - CREATE_IN_PROGRESS - AWS::ApiGateway::Deployment - ApiGatewayDeployment1530403890255\nCloudFormation - CREATE_COMPLETE - AWS::ApiGateway::Deployment - ApiGatewayDeployment1530403890255\nCloudFormation - UPDATE_COMPLETE_CLEANUP_IN_PROGRESS - AWS::CloudFormation::Stack - my-canary-deployment-dev\nCloudFormation - DELETE_IN_PROGRESS - AWS::ApiGateway::Deployment - ApiGatewayDeployment1530401797330\nCloudFormation - DELETE_COMPLETE - AWS::ApiGateway::Deployment - ApiGatewayDeployment1530401797330\nCloudFormation - DELETE_SKIPPED - AWS::Lambda::Version - HelloLambdaVersionW59z2S8rIu6lAv3dCyvgKLndpEosDs1l1kpbg6Lrg\nCloudFormation - UPDATE_COMPLETE - AWS::CloudFormation::Stack - my-canary-deployment-dev\n```", "```\nservice: my-canary-deployment \nprovider: \n    name: aws\n    runtime: nodejs6.10\n    iamRoleStatements:\n    - Effect: Allow\n    Action:\n        - codedeploy:*\n    Resource:\n        - \"*\" \nplugins: \n    - serverless-plugin-aws-alerts\n    - serverless-plugin-canary-deployments\n\ncustom:\n    alerts:\n        dashboards: true\n\nfunctions:\n    hello:\n        handler: handler.hello\n        events:\n            - http: get hello\n        alarms:\n            - name: test\n            namespace: 'AWS/Lambda'\n            metric: Errors\n            threshold: 1\n            statistic: Minimum\n            period: 60\n            evaluationPeriods: 1\n            comparisonOperator: GreaterThanOrEqualToThreshold\n        deploymentSettings:\n            type: Linear10PercentEvery1Minute\n            alias: Live\n            preTrafficHook: preHook\n            postTrafficHook: postHook\n            alarms:\n                - HelloTestAlarm\n    preHook:\n        handler: hooks.pre \n```", "```\n postHook:\n        handler: hooks.post\n```", "```\nconst aws = require('aws-sdk');\nconst codedeploy = new aws.CodeDeploy({apiVersion: '2014-10-06'});\nmodule.exports.pre = (event, context, callback) => {\n var deploymentId = event.DeploymentId;\n var lifecycleEventHookExecutionId = event.LifecycleEventHookExecutionId;\n\nconsole.log('We are running some integration tests before we start shifting traffic...');\n\nvar params = {\n deploymentId: deploymentId,\n lifecycleEventHookExecutionId: lifecycleEventHookExecutionId,\n status: 'Succeeded' // status can be 'Succeeded' or 'Failed'\n };\n\nreturn codedeploy.putLifecycleEventHookExecutionStatus(params).promise()\n .then(data => callback(null, 'Validation test succeeded'))\n .catch(err => callback('Validation test failed'));\n};\n\nmodule.exports.post = (event, context, callback) => {\n var deploymentId = event.DeploymentId;\n var lifecycleEventHookExecutionId = event.LifecycleEventHookExecutionId;\n console.log('Check some stuff after traffic has been shifted...');\n var params = {\n deploymentId: deploymentId,\n lifecycleEventHookExecutionId: lifecycleEventHookExecutionId,\n status: 'Succeeded' // status can be 'Succeeded' or 'Failed'\n };\n return codedeploy.putLifecycleEventHookExecutionStatus(params).promise()\n .then(data => callback(null, 'Validation test succeeded'))\n .catch(err => callback('Validation test failed'));\n};\n```", "```\n$ serverless deploy -v\nServerless: Packaging service...\nServerless: Excluding development dependencies...\nServerless: Uploading CloudFormation file to S3...\nServerless: Uploading artifacts...\nServerless: Uploading service .zip file to S3 (1.12 KB)...\nServerless: Validating template...\nServerless: Updating Stack...\nServerless: Checking Stack update progress...\nCloudFormation - UPDATE_IN_PROGRESS - AWS::CloudFormation::Stack - my-canary-deployment-dev\nCloudFormation - CREATE_IN_PROGRESS - AWS::Logs::LogGroup - PreHookLogGroup\nCloudFormation - CREATE_IN_PROGRESS - AWS::Logs::LogGroup - PostHookLogGroup\nCloudFormation - CREATE_IN_PROGRESS - AWS::Logs::LogGroup - PreHookLogGroup\nCloudFormation - UPDATE_IN_PROGRESS - AWS::IAM::Role - IamRoleLambdaExecution\nCloudFormation - CREATE_IN_PROGRESS - AWS::Logs::LogGroup - PostHookLogGroup\nCloudFormation - UPDATE_IN_PROGRESS - AWS::CloudWatch::Dashboard - AlertsDashboard\nCloudFormation - CREATE_COMPLETE - AWS::Logs::LogGroup - PreHookLogGroup\nCloudFormation - CREATE_COMPLETE - AWS::Logs::LogGroup - PostHookLogGroup\nCloudFormation - UPDATE_COMPLETE - AWS::CloudWatch::Dashboard - AlertsDashboard\nCloudFormation - UPDATE_COMPLETE - AWS::IAM::Role - IamRoleLambdaExecution\nCloudFormation - CREATE_IN_PROGRESS - AWS::Lambda::Function - PostHookLambdaFunction\nCloudFormation - CREATE_IN_PROGRESS - AWS::Lambda::Function - PreHookLambdaFunction\nCloudFormation - UPDATE_IN_PROGRESS - AWS::Lambda::Function - HelloLambdaFunction\nCloudFormation - CREATE_IN_PROGRESS - AWS::Lambda::Function - PreHookLambdaFunction\nCloudFormation - UPDATE_COMPLETE - AWS::Lambda::Function - HelloLambdaFunction\nCloudFormation - CREATE_IN_PROGRESS - AWS::Lambda::Function - PostHookLambdaFunction\nCloudFormation - CREATE_COMPLETE - AWS::Lambda::Function - PostHookLambdaFunction\nCloudFormation - CREATE_IN_PROGRESS - AWS::Lambda::Version - HelloLambdaVersionUutX83EhRCt0XFaMjWRyD8vAkoceeNRnZXqaeuCkFo\nCloudFormation - CREATE_COMPLETE - AWS::Lambda::Function - PreHookLambdaFunction\nCloudFormation - CREATE_IN_PROGRESS - AWS::Lambda::Version - PostHookLambdaVersionI0mvapPGCoXwaOw5oaAUMCSPtZYGXKy9YJABLTU\nCloudFormation - CREATE_IN_PROGRESS - AWS::Lambda::Version - HelloLambdaVersionUutX83EhRCt0XFaMjWRyD8vAkoceeNRnZXqaeuCkFo\nCloudFormation - CREATE_COMPLETE - AWS::Lambda::Version - HelloLambdaVersionUutX83EhRCt0XFaMjWRyD8vAkoceeNRnZXqaeuCkFo\nCloudFormation - CREATE_IN_PROGRESS - AWS::Lambda::Version - PostHookLambdaVersionI0mvapPGCoXwaOw5oaAUMCSPtZYGXKy9YJABLTU\nCloudFormation - CREATE_COMPLETE - AWS::Lambda::Version - PostHookLambdaVersionI0mvapPGCoXwaOw5oaAUMCSPtZYGXKy9YJABLTU\nCloudFormation - CREATE_IN_PROGRESS - AWS::Lambda::Version - PreHookLambdaVersionG9WhVjc3o3mP7moxWMFYoj0jCN4eO1jJBUgGLJmcJA\nCloudFormation - CREATE_IN_PROGRESS - AWS::Lambda::Version - PreHookLambdaVersionG9WhVjc3o3mP7moxWMFYoj0jCN4eO1jJBUgGLJmcJA\nCloudFormation - CREATE_COMPLETE - AWS::Lambda::Version - PreHookLambdaVersionG9WhVjc3o3mP7moxWMFYoj0jCN4eO1jJBUgGLJmcJA\nCloudFormation - UPDATE_IN_PROGRESS - AWS::Lambda::Alias - HelloLambdaFunctionAliasLive\nCloudFormation - UPDATE_IN_PROGRESS - AWS::Lambda::Alias - HelloLambdaFunctionAliasLive\n```", "```\n$ docker pull sebp/elk\n$ docker run --rm -it -p 5044:5044 -p 5601:5601 -p 9200:9200 -p 9300:9300 sebp/elk:latest\n```", "```\n$ docker exec -it <container> bash\n$ /opt/logstash/bin/logstash-plugin install logstash-input-cloudwatch_logs\n\nValidating logstash-input-cloudwatch_logs\nInstalling logstash-input-cloudwatch_logs\nInstallation successful \n```", "```\n[lambda][duration]\n[lambda][billed_duration]\n[lambda][memory_size]\n[lambda][memory_used]\ninput {\n    cloudwatch_logs {\n        log_group => \"/AWS/lambda/my-lambda\"\n access_key_id => \"AKIAXXXXXX\"\n secret_access_key => \"SECRET\"\n        type => \"lambda\"\n    }\n}\n```", "```\n$ /etc/init.d/logstash restart\n```"]