- en: Integrating DevOps with IBM OpenWhisk
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 DevOps 与 IBM OpenWhisk 集成
- en: In this chapter, we will be looking at OpenWhisk, which is an open source on-cloud
    serverless provider. We will also be learning how to build, test, and deploy OpenWhisk
    functions, as well as how to manage logs and monitor the functions. We will also
    look at the best practices for DevOps with OpenWhisk.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将介绍 OpenWhisk，它是一个开源的云端无服务器提供商。我们还将学习如何构建、测试和部署 OpenWhisk 函数，并了解如何管理日志和监控函数。此外，我们还将探讨与
    OpenWhisk 一起使用 DevOps 的最佳实践。
- en: OpenWhisk
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenWhisk
- en: '**OpenWhisk** is an incubator project of Apache and IBM. It offers an open
    source and on-cloud  serverless platform through the IBM Bluemix portal. We can
    set this up on premises or directly use the cloud model. The commercial side of 
    OpenWhisk is provided by IBM on Bluemix, and the open source version can be provisioned
    as on-premises **I****nfrastructure as a Service** (**IaaS**), as well as on a
    cloud, such as Bluemix, Amazon EC2, Microsoft Azure, or GCP. The open source version
    is available on GitHub. It is been made public through the Apache license, and
    people can contribute to it.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**OpenWhisk** 是 Apache 和 IBM 的一个孵化器项目。它通过 IBM Bluemix 门户提供一个开源的云端无服务器平台。我们可以在本地部署或直接使用云端模式。OpenWhisk
    的商业版由 IBM 提供，通过 Bluemix 发布，开源版则可以作为本地部署的**基础设施即服务**（**IaaS**）提供，也可以在云端（如 Bluemix、Amazon
    EC2、Microsoft Azure 或 GCP）使用。开源版本可在 GitHub 上获取，并通过 Apache 许可证公开，用户可以为其贡献代码。'
- en: For the open source OpenWhisk version on GitHub, go to [https://github.com/apache/incubator-openwhisk/tree/master/docs#getting-started-with-openwhisk](https://github.com/apache/incubator-openwhisk/tree/master/docs#getting-started-with-openwhisk).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看 GitHub 上的开源 OpenWhisk 版本，请访问 [https://github.com/apache/incubator-openwhisk/tree/master/docs#getting-started-with-openwhisk](https://github.com/apache/incubator-openwhisk/tree/master/docs#getting-started-with-openwhisk)。
- en: Like any other serverless offering, OpenWhisk executes small chunks of codes
    that are called **actions** (that is, functions**)** at the triggering of events.
    Events can originate from Bluemix or external sources. It is also claimed by OpenWhisk
    that it allows the integration of a home-grown event provider, or any other event
    provider, rather than being limited to specific ones, as other serverless service
    providers do.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 像其他任何无服务器服务一样，OpenWhisk 执行的是小段代码，这些代码被称为**动作**（即，**函数**），在事件触发时执行。事件可以来自 Bluemix
    或外部来源。OpenWhisk 还声称它允许集成自家事件提供者，或任何其他事件提供者，而不像其他无服务器服务提供商那样只限于特定的事件提供者。
- en: 'OpenWhisk provides many features, such as autoscaling and load balancing, out
    of the box without having to manually configure clusters, load balancers, and
    HTTP plugins. Let''s look at the architecture diagram for OpenWhisk:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: OpenWhisk 提供了许多功能，例如自动扩展和负载均衡，开箱即用，无需手动配置集群、负载均衡器和 HTTP 插件。让我们看看 OpenWhisk 的架构图：
- en: '![](img/d15e8d94-eca9-4013-b37d-b95902459b62.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d15e8d94-eca9-4013-b37d-b95902459b62.png)'
- en: The actions/functions are performed at the triggering of events, which could
    be changes to database records, IoT sensor readings, code commits to a GitHub
    repository, or simple HTTP requests from web or mobile apps. Events from these
    sources are channelled through a trigger, and rules within the triggers allow
    actions to react to these events.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 动作/函数是在事件触发时执行的，这些事件可以是数据库记录的变化、物联网传感器读数、GitHub 仓库的代码提交，或来自 Web 或移动应用程序的简单 HTTP
    请求。这些来源的事件通过触发器传递，并且触发器中的规则允许动作对这些事件作出响应。
- en: '**Action** is an OpenWhisk term for functions. Actions could be small snippets
    of JavaScript or Swift code, or custom binary code embedded in a Docker container.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**动作**是 OpenWhisk 中对函数的称呼。动作可以是小段的 JavaScript 或 Swift 代码，或者是嵌入在 Docker 容器中的自定义二进制代码。'
- en: Actions are normally invoked in a sequence, and output from one action can be
    passed as input to the next action in the sequence. Actions can be invoked through
    multiple sources, such as the OpenWhisk API, CLI, and iOS SDK, in addition to
    triggers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 动作通常是按顺序调用的，一个动作的输出可以作为下一个动作的输入。除了触发器，动作还可以通过多种来源调用，例如 OpenWhisk API、CLI 和 iOS
    SDK。
- en: The languages supported by OpenShift are Node.js, Python, Swift, Java, and PHP,
    and it is claimed by OpenShift that one of their USPs supports the Swift language,
    which will come in handy while writing functions or actions for mobile apps.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 支持的语言有 Node.js、Python、Swift、Java 和 PHP，OpenShift 声称其中一个独特卖点是支持 Swift
    语言，这在为移动应用编写函数或动作时非常有用。
- en: Services and event provider integrations can be performed using packages. A
    **package** is a bundle of feeds and actions. A **feed** is a piece of code that
    configures an external event source to fire trigger events. For example, in a
    bank account transaction, a trigger is created when a debit or credit event takes
    place and a function/action will run to send the SMS to the user about the transaction
    that has taken place. The actions in the packages have reusable logic that service
    providers make available for the people to use the service. These service providers
    are event sources, and they can also be invoked through the API.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 服务和事件提供商的集成可以通过包来执行。**包**是一个包含了多个 feed 和操作的捆绑包。**Feed** 是一段代码，用于配置外部事件源以触发事件。例如，在银行账户交易中，当发生借记或贷记事件时，会创建一个触发器，触发一个函数/操作来向用户发送关于交易的短信。包中的操作包含可重用的逻辑，服务提供商提供这些逻辑供用户使用。这些服务提供商是事件源，并且可以通过
    API 被调用。
- en: OpenWhisk is built on NGINX, Kafka, Docker, and CouchDB. All of these components
    work together to make a serverless service for OpenWhisk.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: OpenWhisk 构建在 NGINX、Kafka、Docker 和 CouchDB 上。这些组件共同作用，提供一个为 OpenWhisk 提供无服务器服务的架构。
- en: OpenWhisk setup and configuration
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenWhisk 设置与配置
- en: 'OpenWhisk operates four important concepts, which are listed as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: OpenWhisk 运作四个重要的概念，具体如下：
- en: Triggers
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触发器
- en: Actions
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作
- en: Rules
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规则
- en: Sequences
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 序列
- en: Triggers
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 触发器
- en: '**Triggers** are like events that are created by data sources. Some examples
    include changing database records, new code commits to your repository, and HTTP
    requests from a web/mobile app. The events from the sources are channeled through
    a trigger.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**触发器**就像由数据源创建的事件。一些例子包括更改数据库记录、向你的仓库提交新代码，以及来自 Web/移动应用的 HTTP 请求。来自这些源的事件通过触发器进行传递。'
- en: Actions
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作
- en: An **action** is a snippet of code written in Node.js or Swift, or embedded
    in Docker containers. The code is deployed and is executed at the firing of the
    trigger.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**操作**是用 Node.js 或 Swift 编写的代码片段，或嵌入在 Docker 容器中的代码。代码被部署并在触发器触发时执行。'
- en: Rules
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规则
- en: '**Rules** form a part of the triggers when combined with an action. So every
    time the trigger fires, the respective action is invoked by the rule.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**规则** 是触发器的一部分，当与操作结合时，每次触发器触发时，规则都会调用相应的操作。'
- en: Sequences
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 序列
- en: The chains of actions are called **sequences**. We can chain the actions, and
    they will be invoked in order. The output of one action can become the input for
    the next action.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 操作链称为 **序列**。我们可以将操作串联起来，它们会按顺序依次被调用。一个操作的输出可以成为下一个操作的输入。
- en: Building an OpenWhisk application
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个 OpenWhisk 应用程序
- en: In this book, I will not be setting up an open source version of OpenWhisk.
    Instead, we will be using tutorials through the Bluemix portal, so to do this,
    we need to sign up to the Bluemix portal. They give new members the option of
    a free subscription for a month. So let's register with Bluemix at [https://bluemix.net](https://bluemix.net). As
    I mentioned earlier, IBM Bluemix comes with a free trial that doesn't need credit
    card details for the first 30 days. Following the trial, we do not have to enroll
    using a credit card. All the users get access to around 400,000 GB-seconds of
    serverless computing time per month. Additional execution time would be charged
    at $0.000017 per GB-second of execution, rounded to the nearest 100 ms.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我不会设置 OpenWhisk 的开源版本。相反，我们将通过 Bluemix 门户使用教程，因此我们需要注册 Bluemix 门户。Bluemix
    为新用户提供一个免费的一个月订阅。所以让我们在 [https://bluemix.net](https://bluemix.net) 上注册。正如我之前提到的，IBM
    Bluemix 提供了一个 免费试用 ，前30天无需提供信用卡信息。试用期后，我们不需要使用信用卡注册。所有用户每月都可以享受约 400,000 GB-秒的无服务器计算时间。额外的执行时间将按每
    GB-秒 $0.000017 收费，按最接近的 100 毫秒进行四舍五入。
- en: Creating a hello world OpenWhisk action
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个 Hello World OpenWhisk 操作
- en: The prerequisites for this tutorial is an IBM cloud account (free trial) and
    knowledge of Node.js (which we have used throughout the book). We will be starting
    with a simple example first and then move towards applying automation to the tutorial
    code as we go on with the chapter. So, let's create a simple hello world application
    with Node.js on the user interface of IBM Bluemix Cloud and then execute/invoke
    it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的前提条件是一个 IBM 云账户（免费试用）以及 Node.js 的知识（本书中我们一直在使用）。我们将首先从一个简单的示例开始，然后随着章节的进行逐步将自动化应用于教程代码。所以，让我们在
    IBM Bluemix Cloud 的用户界面上创建一个简单的 Hello World 应用，并执行/调用它。
- en: 'To create an OpenWhisk action, go through the following steps:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个 OpenWhisk 操作，请按照以下步骤进行：
- en: Go to the OpenWhisk console at [https://console.bluemix.net/openwhisk/](https://console.bluemix.net/openwhisk/) in
    the IBM Cloud.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入IBM云中的OpenWhisk控制台 [https://console.bluemix.net/openwhisk/](https://console.bluemix.net/openwhisk/)。
- en: Log into the IBM Cloud and click Start Creating to use OpenWhisk from your browser
    and enter the editor.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到IBM Cloud，点击**开始创建**，在浏览器中使用OpenWhisk并进入编辑器。
- en: Click Create Action from the multiple options.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从多个选项中点击**创建动作**。
- en: 'Create a new action with the following parameters:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下参数创建一个新的动作：
- en: '| Field | Value |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 字段 | 值 |'
- en: '| --- | --- |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Action Name | `HelloWorld` |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 动作名称 | `HelloWorld` |'
- en: '| Enclosing Package | (Default Package) |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 封装包 | (默认包) |'
- en: '| Runtime | Node.js 6 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 运行时 | Node.js 6 |'
- en: Click Create. This will open an editor interface for Node.js.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**。这将打开Node.js的编辑器界面。
- en: By default, OpenWhisk actions are JavaScript. They receive an associative array
    in their input and return another as their output.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，OpenWhisk动作是JavaScript。它们接收一个关联数组作为输入，并返回另一个关联数组作为输出。
- en: 'Replace the existing Nodejs code with the following:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将现有的Node.js代码替换为以下内容：
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Click on the **Save** button. This will save the action and redirect you to
    the page to invoke the action.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**按钮。这将保存动作并将你重定向到调用动作的页面。
- en: 'Let''s click on Change Input and add the following name input, and then click
    on the Apply button:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们点击**更改输入**并添加以下名称输入，然后点击**应用**按钮：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now let''s click the Invoke button to execute the action/function. We should
    be able see the following output:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们点击**调用**按钮来执行动作/函数。我们应该能看到以下输出：
- en: '![](img/d9931ef2-5492-404f-b7f6-ae2cf9505c46.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d9931ef2-5492-404f-b7f6-ae2cf9505c46.png)'
- en: The output will be in the form of both JavaScript and HTML. In the preceding
    tutorial, we created an OpenWhisk action and deployed it through the Bluemix console.
    In the next section, we will use Serverless Framework to set up a deployment and
    automation.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将以JavaScript和HTML的形式展示。在前面的教程中，我们创建了一个OpenWhisk动作并通过Bluemix控制台进行部署。在下一节中，我们将使用Serverless
    Framework来设置部署和自动化。
- en: OpenWhisk with Serverless Framework
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Serverless Framework的OpenWhisk
- en: To set up a deployment with Serverless Framework, we need to have a few things
    in place first. So, considering that you are already signed up, we need to retrieve
    the Bluemix endpoint and keys through the Bluemix CLI, and so first we need to
    set up and configure the Bluemix CLI, which can be done at [https://console.bluemix.net/openwhisk/learn/cli](https://console.bluemix.net/openwhisk/learn/cli).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Serverless Framework进行部署设置，我们首先需要准备一些东西。因此，考虑到你已经注册了，我们需要通过Bluemix CLI检索Bluemix端点和密钥，首先我们需要设置和配置Bluemix
    CLI，可以通过 [https://console.bluemix.net/openwhisk/learn/cli](https://console.bluemix.net/openwhisk/learn/cli)
    完成。
- en: 'Once the CLI is set up, we will then install the Cloud Function plugin through
    the Bluemix CLI, then log into Bluemix Cloud and deploy the action. Go through
    the following steps to do this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦CLI设置完成，我们将通过Bluemix CLI安装Cloud Function插件，然后登录到Bluemix Cloud并部署该动作。请按以下步骤操作：
- en: 'First, we get the endpoint and authentication keys from the Bluemix portal
    using the following command:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们使用以下命令从Bluemix门户获取端点和认证密钥：
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once we get the authentication details through the preceding command, we can
    set `--apihost` and `--auth` through the `wsk` command line, as follows:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦通过上述命令获得认证详情，我们可以通过`wsk`命令行设置`--apihost`和`--auth`，如下所示：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Another way to get and set the keys would be through the portal. We can also
    configure the credentials through `bashrc` for the framework to use it. To do
    this, log into the Bluemix portal through the browser and go to the API Key section
    the retrieve and then export them. So, let''s log into the Bluemix portal at [https://console.bluemix.net/openwhisk/](https://console.bluemix.net/openwhisk/),
    then select the API Key menu on the left-hand side bar to get the authentication
    keys, as shown in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 获取和设置密钥的另一种方式是通过门户。我们还可以通过`bashrc`为框架配置凭证以供使用。要做到这一点，首先通过浏览器登录到Bluemix门户，进入API密钥部分以检索并导出它们。因此，让我们登录到Bluemix门户
    [https://console.bluemix.net/openwhisk/](https://console.bluemix.net/openwhisk/)，然后在左侧栏选择API密钥菜单以获取认证密钥，如下图所示：
- en: '![](img/df828d09-191a-4374-b170-59231e982687.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/df828d09-191a-4374-b170-59231e982687.png)'
- en: 'Let''s go to the Linux or macOS Terminal and add the authentication details
    to the user profile using the following code:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们进入Linux或macOS终端，并使用以下代码将认证详情添加到用户配置文件中：
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Copy the following export with the correct `auth` and `apihost` from the Bluemix
    portal:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Bluemix门户复制以下导出，包含正确的`auth`和`apihost`：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The next step is to install Serverless Framework and the respective dependencies
    with the provider plugin, as shown in the following code:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是安装 Serverless Framework 以及相应的依赖和提供程序插件，如下代码所示：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The plugin has to be installed as a global module to work.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 插件必须作为全局模块安装才能正常工作。
- en: A simple OpenWhisk application
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个简单的 OpenWhisk 应用
- en: 'Now let''s create a simple service through the serverless Node.js template
    by going through the following steps:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过以下步骤，使用无服务器 Node.js 模板创建一个简单的服务：
- en: 'Create a new serverless service/project:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的无服务器服务/项目：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Change into the newly created directory:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入新创建的目录：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Install the npm dependencies:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 npm 依赖：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once we finished, deploy the service and function to the Bluemix portal:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，将服务和函数部署到 Bluemix 门户：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then we invoke the function to check whether the function is deployed properly.
    Invoke the serverless application using the following code:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们调用函数，检查函数是否正确部署。使用以下代码调用无服务器应用：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the preceding tutorial, we got the `auth` keys, created an action, and deployed
    the function through Serverless Framework. In the next section, we will look into
    setting up CI and CD through different methodologies.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的教程中，我们获取了 `auth` 密钥，创建了一个动作，并通过 Serverless Framework 部署了该函数。在下一部分，我们将探讨通过不同的方法设置
    CI 和 CD。
- en: Continuous integration and continuous delivery with OpenWhisk
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 OpenWhisk 进行持续集成和持续交付
- en: 'For deployment, we will normally use the `wsk` command line. We will use it
    to do the following things:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 对于部署，我们通常会使用 `wsk` 命令行。我们将使用它执行以下操作：
- en: Git pull code from GitHub
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 GitHub 拉取代码
- en: Set up Bluemix space for running an app
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Bluemix 空间以运行应用
- en: Create the services for an application to run
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为应用程序创建服务以供运行
- en: Configure the environment variables, such as service credentials
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置环境变量，如服务凭证
- en: Deploy OpenWhisk triggers and actions
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署 OpenWhisk 触发器和动作
- en: Push the Node.js application
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推送 Node.js 应用
- en: We can do this with the IBM Bluemix toolchain or through open source tools,
    such as Jenkins and Serverless Framework. Let's look at both options, starting
    with the Bluemix toolchain.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 IBM Bluemix 工具链，也可以使用开源工具，如 Jenkins 和 Serverless Framework。我们先来看 Bluemix
    工具链。
- en: Setting up the toolchain and repository integration
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置工具链和仓库集成
- en: 'Let''s create a new blank toolchain by going through the following steps. This
    is easily done from the Bluemix home page at [https://console.bluemix.net/devops/](https://console.bluemix.net/devops/):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤创建一个新的空白工具链。这可以很方便地从 Bluemix 首页[https://console.bluemix.net/devops/](https://console.bluemix.net/devops/)完成：
- en: Go to the preceding URL, and then click on Create a toolchain. Then you pick
    the Build your own toolchain template as shown in following screenshot, you give
    the toolchain a name, and you click Create. Done!
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问上述 URL，然后点击创建工具链。接下来选择“构建你自己的工具链”模板，如下图所示，给工具链命名，然后点击“创建”。完成！
- en: '![](img/943c0117-b171-42d0-8d7e-c65a6bb41a70.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/943c0117-b171-42d0-8d7e-c65a6bb41a70.png)'
- en: You will redirected to the Build your own toolchain page; fill in the details
    and click on the Create button.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将被重定向到“构建你自己的工具链”页面；填写相关信息并点击“创建”按钮。
- en: Once the toolchain is created, click on **Add a Tool**. Since the idea is to
    deploy it when the code is pushed to Git, the first thing to add is a GitHub integration.
    So let's select GitHub and then follow the steps. You will be prompted to authorize a
    GitHub account, and then give the URL of the repository you cloned earlier. Once
    this is done, an entry for your GitHub repository (and another for its issues,
    if you ticked that box) will appear in the toolchain, and we'll then add the deployment
    piece, which will respond to changes on our GitHub repository.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦工具链创建完成，点击**添加工具**。由于目的是在代码推送到 Git 时进行部署，首先要添加的是 GitHub 集成。所以我们选择 GitHub，然后按照步骤操作。你将被提示授权一个
    GitHub 账户，并提供之前克隆的仓库 URL。完成后，你的 GitHub 仓库（以及如果你勾选了问题选项，则为其问题）的条目将出现在工具链中，然后我们将添加部署部分，以响应我们
    GitHub 仓库中的更改。
- en: Configuring the deployment
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置部署
- en: 'Next, click Add a Tool again to put a new entry into the pipeline, and then
    click Delivery Pipeline for the tool to add, as shown in the following screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，再次点击“添加工具”，将一个新的条目放入管道中，然后点击“交付管道”添加工具，如下图所示：
- en: '![](img/21abbcfd-c8d9-493b-b52a-24ce4d29673c.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/21abbcfd-c8d9-493b-b52a-24ce4d29673c.png)'
- en: 'Once the delivery pipeline tool is in place, click on it and then go ahead
    and click Add Stage. There are three tabs at the top—Input, Jobs, and Environment
    properties. These govern how the deployment activity itself is set up. Here''s
    a quick overview of these tabs:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Input: This simply manages which repository and branch to use, and whether to
    run the deployment manually or change them as appropriate.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Environment properties: This manages the variables that we can use in our setup
    scripts. It''s possible to add both plain text and a secret field. We can set
    the values that we will need here, such as database credentials, access tokens,
    and so on. This must include a Bluemix API key, which can be generated by using `bx
    iam api-key-create keyname`. In our case, we need to create a variable name `APIKEY`
    , as shown in the following code:'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Jobs: This tab is where the real work gets done. We''ll use a single job, so
    click on ADD JOB, type Deploy, and on the deployment page let''s keep most of
    the details as their default settings, making sure that the account, organization,
    and space information looks correct.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following deploy job shell script will grab the Cloud Functions plugin
    for the command (find out more about the Bluemix command-line tool in the documentation
    at [https://console.bluemix.net/docs/cli/reference/bluemix_cli/get_started.html#getting-started](https://console.bluemix.net/docs/cli/reference/bluemix_cli/get_started.html#getting-started)),
    and then log in with the API key that we configured earlier and target the desired
    Bluemix organization and space. Add the following shell script to the Deploy Script
    column of JOBS and click on Save:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: After adding the Cloud Functions plugin to the Bluemix command-line tool, this
    script logs us in using the API key we created when configuring the deployment
    tool. Using the built in `/whisk.system/utils/echo` action will show us the output
    in the logs if everything is configured correctly to work with Cloud Functions,
    or cause a (hopefully helpful and informative) error if that's not the case. The `action
    update` command does the actual deployment, taking the newly zipped file and deploying
    it as an action. The final call to the action list simply shows us that the action
    is there as expected.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Check that everything works as expected by checking the green play button on
    this task, as depicted in the following screenshot. If it plays, you're all set!
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cc26496c-315e-4263-b02f-6d7877b9054b.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
- en: Continuous integration and continuous delivery with Serverless Framework
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Earlier, we set up continuous deployment using IBM Bluemix tools. Here, we
    will be using open source tools to set up continuous integration and continuous
    delivery for OpenWhisk functions. I will be setting up a Jenkins container with
    Serverless Framework installed on it. I have created a Dockerfile that does the
    heavy lifting for us by creating a Jenkins container with Node.js, Serverless
    Framework, and an OpenWhisk plugin installed. I have added this Dockerfile to
    the Git repository. We will be using the weather reporting OpenWhisk application,
    and we will code it, commit it on GitHub, and then deploy it on the Bluemix cloud
    through Serverless Framework. We will unit test the application and run a smoke
    test by invoking the function (see [https://github.com/shzshi/OpenWhisk-weather-report-serverless.git](https://github.com/shzshi/OpenWhisk-weather-report-serverless.git)).
    Let''s look at these steps in more detail:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们使用 IBM Bluemix 工具设置了持续部署。在这里，我们将使用开源工具为 OpenWhisk 函数设置持续集成和持续交付。我将设置一个安装了
    Serverless Framework 的 Jenkins 容器。我已经创建了一个 Dockerfile，通过它可以轻松创建一个包含 Node.js、Serverless
    Framework 和 OpenWhisk 插件的 Jenkins 容器。我已将这个 Dockerfile 添加到 Git 仓库中。我们将使用天气报告 OpenWhisk
    应用程序，进行编码，提交到 GitHub，然后通过 Serverless Framework 将其部署到 Bluemix 云。我们将对应用程序进行单元测试，并通过调用函数来运行冒烟测试（见
    [https://github.com/shzshi/OpenWhisk-weather-report-serverless.git](https://github.com/shzshi/OpenWhisk-weather-report-serverless.git)）。让我们更详细地看一下这些步骤：
- en: 'Git clone the repository:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Git 克隆仓库：
- en: '[PRE14]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Once it is successfully cloned, we need to build the OpenWhisk image using
    the following code:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦成功克隆，我们需要使用以下代码构建 OpenWhisk 镜像：
- en: '[PRE15]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Once the Docker image is built, we will create a container for the `OpenWhisk-weather-report-serverless:latest` image,
    using the following code:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦 Docker 镜像构建完成，我们将使用以下代码为 `OpenWhisk-weather-report-serverless:latest` 镜像创建一个容器：
- en: '[PRE16]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now we will go to the browser, navigate to the Jenkins application, and create
    a job. As my Docker container is running on the localhost, my URL would be `http://localhost:8080/`.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将打开浏览器，导航到 Jenkins 应用程序并创建一个作业。由于我的 Docker 容器在本地主机上运行，所以我的 URL 是 `http://localhost:8080/`。
- en: 'Open the Chrome/IE browser, paste the preceding localhost URL, and open Jenkins.
    At the first page, we will be asked for the administrator password. We can get
    this password from the logs of container run. It should look something like the
    following:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Chrome/IE 浏览器，粘贴上述本地 URL 并打开 Jenkins。在首页，系统会要求输入管理员密码。我们可以从容器运行日志中获取这个密码，格式应类似如下：
- en: '[PRE17]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Once we enter the password, we will be asked to install a suggested plugin. Go
    ahead and do this. It will be a one-time activity, as we are saving the plugin
    on the Docker host, and once the plugin is added, we will be asked to create an
    admin user. Go ahead and create the user, and make sure that you remember the
    password. Then, once the user is created, go ahead and start using Jenkins.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们输入密码，系统将提示我们安装建议的插件。继续进行此操作。它是一次性的活动，因为我们将在 Docker 主机上保存插件，插件添加完成后，系统会要求我们创建一个管理员用户。创建用户并确保记住密码。然后，一旦用户创建完成，就可以开始使用
    Jenkins。
- en: Now let's create a job called `Serverless-OpenWhisk`. Click on New Item; it
    will open a new page. Type in `Serverless-OpenWhisk` in the text box, select Freestyle
    project, and click OK.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个名为 `Serverless-OpenWhisk` 的作业。点击“新建项目”，这会打开一个新页面。在文本框中输入 `Serverless-OpenWhisk`，选择“自由风格项目”，然后点击
    OK。
- en: Now select Git in the Source Management tab and add `https://github.com/shzshi/OpenWhisk-weather-report-serverless.git` in Repositories
    URL. We won't feed in the credentials as this is a public repository. If we use
    the private GitHub repository, then we add can credentials for Jenkins to clone
    the repository.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在源管理选项卡中选择 Git，并在“仓库 URL”中添加 `https://github.com/shzshi/OpenWhisk-weather-report-serverless.git`。由于这是一个公共仓库，我们不需要输入凭据。如果使用私人
    GitHub 仓库，则需要为 Jenkins 提供凭据来克隆仓库。
- en: 'Next, in the Build tab in the Add build step dropdown, select Execute shell.
    A Command text box will open up. Let''s add the following code in the Execute
    shell field. You need to replace the `OW_AUTH` and `OW_APIHOST` keys that are
    highlighted with one that we have created previously, or we can log into the OpenWhisk
    portal and get the details:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在构建选项卡中的“添加构建步骤”下拉菜单中，选择“执行 shell”。会弹出一个命令文本框。让我们在执行 shell 字段中添加以下代码。您需要将高亮的
    `OW_AUTH` 和 `OW_APIHOST` 键替换为我们之前创建的密钥，或者我们可以登录到 OpenWhisk 门户并获取相关信息：
- en: '[PRE18]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Once that is done, save the job and then click on the Build Now link. The job
    will then run. It will download and install the npm dependencies mentioned in
    `package.json`, then run the mocha unit test, deploy the action to the OpenWhisk
    cloud, and then invoke the function/action with a parameter to make sure that
    the deployment was successful. The output will look something like the following:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，保存工作，然后点击立即构建链接。工作将开始运行。它将下载并安装`package.json`中提到的npm依赖项，然后运行mocha单元测试，将操作部署到OpenWhisk云中，然后用一个参数调用该函数/操作，以确保部署成功。输出将类似如下：
- en: '[PRE19]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This aim of this exercise was to show how we can set up continuous integration
    through Jenkins, Mocha, and Serverless Framework. In the next section, we will
    see how make it more robust, and learn how to set up a continuous delivery pipeline
    with the same set of tools. We will also set up automated deployment across the
    different environments using gates.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 本次练习的目的是展示如何通过Jenkins、Mocha和Serverless Framework设置持续集成。在接下来的章节中，我们将学习如何使其更加健壮，并了解如何使用相同的工具集设置持续交付管道。我们还将使用gate设置不同环境间的自动化部署。
- en: Continuous delivery pipeline to OpenWhisk
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenWhisk的持续交付管道
- en: '**Continuous delivery** is one of the essential features of DevOps. It not
    only helps in facilitating quicker deployment to production, but it also helps
    to create a bug-free application. We will be using Jenkins, Serverless Framework,
    and features of the OpenWhisk cloud to build a continuous delivery platform for
    OpenWhisk functions. We will be picking up the same weather system app that we
    built earlier with the freestyle job and enhance it to conform to the continuous
    delivery model. I have added the required files to the Git repository that I mentioned
    earlier in the chapter. By using Jenkinsfile at the root, we define a multistage
    pipeline for this project. Jenkinsfile is a groovy script that is used by Jenkins to
    run pipelines. We will use master branch to code for deploying and testing to
    various environments from the development stage all the way to production, provided
    that the deployment and tests passes within the pipeline. Integration tests run
    after each deployment (except production) and validate whether the deployed stack
    is functioning as expected. The pipeline we are creating here will be using Jenkinsfile
    and Serverless Framework, creating multiple Cloud Foundry spaces for different
    environments, unit- testing sessions, and building promotions. Let''s start with
    Cloud Foundry spaces by going through the following steps:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续交付**是DevOps的核心功能之一。它不仅有助于加速生产环境的部署，还能帮助创建无BUG的应用程序。我们将使用Jenkins、Serverless
    Framework和OpenWhisk云的功能，为OpenWhisk函数构建一个持续交付平台。我们将继续使用之前构建的天气系统应用，并增强其以符合持续交付模型。我已经将所需的文件添加到本章前面提到的Git仓库中。通过在根目录中使用Jenkinsfile，我们为该项目定义了一个多阶段管道。Jenkinsfile是Jenkins用来运行管道的groovy脚本。我们将使用master分支进行部署和测试，覆盖从开发阶段到生产的各个环境，前提是部署和测试在管道中都通过。每次部署后（生产环境除外）都会运行集成测试，验证已部署的堆栈是否按预期工作。我们创建的这个管道将使用Jenkinsfile和Serverless
    Framework，创建多个Cloud Foundry空间用于不同的环境，进行单元测试并构建版本推广。让我们通过以下步骤从Cloud Foundry空间开始：'
- en: Log into Bluemix [at https://bluemix.net](https://bluemix.net).
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录Bluemix [at https://bluemix.net](https://bluemix.net)。
- en: Navigate to Manage | Account | Cloud Foundry Orgs.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 Manage | Account | Cloud Foundry Orgs。
- en: Click on the View detailslink and then on the link to add Cloud Foundry space.
    A popup should open.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击查看详情链接，然后点击链接添加Cloud Foundry空间。应弹出一个窗口。
- en: 'Add four environments: development, SIT, preproduction, and production.'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加四个环境：开发环境、SIT、预生产和生产。
- en: 'Once the space is created, we will create API keys for the environment and
    push them as parameters in Jenkins to use them for deploying to different environments:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 创建空间后，我们将为该环境创建API密钥，并将其作为参数推送到Jenkins中，以便用于部署到不同的环境：
- en: Click on Three Lineon the left-hand side of the Bluemix portal.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击Bluemix门户左侧的三条线。
- en: Then go to Functions and click on it, and then click on the API Key link.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后进入Functions并点击它，然后点击API Key链接。
- en: 'We will copy the host and key for all environments. We can change and move
    to the environment from the CLOUD FOUNDRY SPACE dropdown, as shown in the following
    screenshot:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将复制所有环境的主机和密钥。我们可以通过CLOUD FOUNDRY SPACE下拉框更改并切换到不同环境，如下图所示：
- en: '![](img/2ce833f4-a8b0-4f79-a527-35b65d51c1ba.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2ce833f4-a8b0-4f79-a527-35b65d51c1ba.png)'
- en: Now we will move to Jenkins, where we will create a pipeline job. I have added
    the Jenkinsfile to the Git repository at [https://github.com/shzshi/OpenWhisk-weather-report-serverless/blob/master/Jenkinsfile](https://github.com/shzshi/OpenWhisk-weather-report-serverless/blob/master/Jenkinsfile),
    where we will use the same Git to set up the pipeline.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将转到 Jenkins，在那里我们将创建一个流水线作业。我已经将 Jenkinsfile 添加到 Git 仓库中，地址为 [https://github.com/shzshi/OpenWhisk-weather-report-serverless/blob/master/Jenkinsfile](https://github.com/shzshi/OpenWhisk-weather-report-serverless/blob/master/Jenkinsfile)，我们将在这里使用相同的
    Git 来设置流水线。
- en: 'We will use the same Jenkins Docker container that we created earlier in the
    previous tutorials. We will create a new job and work on it. Go through the following
    steps:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用之前在教程中创建的相同 Jenkins Docker 容器。我们将创建一个新作业并进行操作。请按照以下步骤进行操作：
- en: Open Jenkins in the browser at `http://localhost:8080`.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开 Jenkins，地址为 `http://localhost:8080`。
- en: Log into Jenkins and create a New item.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录 Jenkins 并创建一个新项目。
- en: Enter the item name as `OpenWhisk_serverless_pipeline`, select Pipeline, and
    click OK.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入项目名称为 `OpenWhisk_serverless_pipeline`，选择“流水线”（Pipeline），然后点击确定（OK）。
- en: We will be redirected to another page, where we need to parameterize the pipeline
    with OpenWhisk `auth`, OpenWhisk `host`, and a Git path for the pipeline. For
    this, we will tick the This project is parameterised checkbox.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将被重定向到另一个页面，在那里我们需要用 OpenWhisk `auth`、OpenWhisk `host` 和流水线的 Git 路径对流水线进行参数化。为此，我们将勾选“此项目已参数化”（This
    project is parameterised）复选框。
- en: 'Then, in the Add Parameter dropdown, we need to select Credentials Parameter
    as the parameter for the pipeline. The following screenshot shows the page for
    adding details into the credentials parameter. We have to add credentials parameters
    for all the environments that we created earlier in the chapter through the Azure
    portal. The Credential type should be Secret text, because this will help us to
    keep the authentication keys hidden, as they are passed as environment variables
    within the Jenkins pipeline. So, in total, we will create five credentials parameters:
    four for the different environments that are in development, SIT, preproduction,
    and production, and then the fifth for the OpenWhisk host. The secret text values
    should be populated from the Bluemix portal in the API Keysection. The Default
    Value should be filled by clicking the Add button and then selecting Jenkins,
    which will help us to add `auth` keys into the Jenkins credentials provider. Look
    at the following screenshot for more information:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在“添加参数”（Add Parameter）下拉菜单中，我们需要选择“凭证参数”（Credentials Parameter）作为流水线的参数。下图显示了在凭证参数中添加详细信息的页面。我们必须为之前在
    Azure 门户中创建的所有环境添加凭证参数。本凭证类型应为“秘密文本”，因为这将有助于我们隐藏身份验证密钥，这些密钥作为环境变量传递到 Jenkins 流水线中。因此，总共我们将创建五个凭证参数：四个用于开发、SIT、预生产和生产环境，另一个用于
    OpenWhisk 主机。秘密文本值应从 Bluemix 门户中的 API 密钥部分填写。默认值应通过点击“添加”按钮，然后选择 Jenkins 来填充，这将帮助我们将
    `auth` 密钥添加到 Jenkins 凭证提供者中。以下截图提供了更多信息：
- en: '![](img/4cc41a30-e158-4ad1-85b7-b2804303e873.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4cc41a30-e158-4ad1-85b7-b2804303e873.png)'
- en: 'We will set the credentials as Secret text. Then the Secret text box will be
    filled with the API Key for each environment, which we can get from the Azure
    portal. Then the ID and Description fields would each be given a simple name,
    such as `OpenWhisk_DEV_AUTH`, as references, as shown in the following screenshot:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将凭证设置为“秘密文本”（Secret text）。然后，秘密文本框将填充每个环境的 API 密钥，我们可以从 Azure 门户获取这些密钥。接着，ID
    和描述字段将分别给出一个简单的名称，如 `OpenWhisk_DEV_AUTH`，作为参考，如下图所示：
- en: '![](img/1cb96237-1748-4d6b-b16a-9a9312e4329c.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1cb96237-1748-4d6b-b16a-9a9312e4329c.png)'
- en: 'Once all the parameters for each environment are added, we need to move to
    the Pipeline tab and add the GitHub path. The following screenshot shows us adding
    the configuration for the Jenkins pipeline:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当所有环境的参数添加完成后，我们需要转到“流水线”（Pipeline）选项卡并添加 GitHub 路径。下图显示了我们如何为 Jenkins 流水线添加配置：
- en: '![](img/f1ad4311-aede-4d51-95c8-c39cb269d3b3.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f1ad4311-aede-4d51-95c8-c39cb269d3b3.png)'
- en: 'Once everything is set, then we need to run the job with the parameters. Once
    the job runs successfully, as shown in the following screenshot, Serverless Framework
    will package the functions files and they will be deployed on the different environments
    that we are testing through the serverless invoke:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一切设置完成后，我们需要用参数运行作业。一旦作业成功运行，如下图所示，Serverless Framework 会打包函数文件，并将它们部署到我们正在通过
    serverless invoke 测试的不同环境中：
- en: '![](img/78b11044-f33e-4ae0-9de7-04d2bf122a6c.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/78b11044-f33e-4ae0-9de7-04d2bf122a6c.png)'
- en: Deployment patterns with OpenWhisk
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are various deployment patterns available, but two patterns are quite
    popular in the DevOps world. One of them is canary and the other is blue–green.
    I tried my best to fit the serverless deployment to fit into this pattern, but
    there is always scope for improvement. Let's look at how we can fit OpenWhisk
    actions into these patterns.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: Canary deployment
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The canary deployment pattern involves rolling out a new release in small chunks
    to subsets of users or servers. We then test it, and if it performs well, then
    we roll it out to the rest of the users or servers. The advantage here is that
    the percentage of failure is quite low, and we can analyze and fix the issues
    of the actions without disrupting all of the traffic. So, with respect to OpenWhisk,
    we can set this up by using regions and routing a percentage of traffic to the
    newly released version into this region. If you do not want to create the region
    or organization, then you can set up a Cloud Foundry space as a **disaster recovery**
    (**DR**) environment on the Bluemix portal and shift the percentage of traffic
    into DR. The best part here is that if you discover that the released version
    is faulty, then you should be able to roll back to the previous version.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: As of now, there is no provision to set up a percentage of the traffic to a
    specific action through the CLI or Serverless Framework. So we have to manually
    set this up through the action's code as we can do in Lambda. But once OpenWhisk
    matures further, we should see this feature added.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Blue–green deployment
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although blue–green deployment is similar to canary deployment, the difference
    is that instead of routinizing the percentage of traffic, two separate identical
    environments are used in parallel to mitigate the risks of introducing new versions
    of actions. To do this, we create a new environment named staging. The production
    environment is used for going live and the staging environment is used for new
    changes. We then switch the environments back and forth between staging and production.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: With respect to OpenWhisk, we can achieve this by creating a new staging environment
    using Cloud Foundry spaces. Then we deploy the current release version of our
    actions into the blue (production) environment and redirect traffic using an alias
    to the blue environment. Then, after the new versions of the actions are developed,
    we deploy them to the green (staging) environment for testing. Once the results
    of the testing are satisfactory, we redirect all the traffic to the green (staging)
    environment, and it is made live. Then the new version is deployed to the blue
    version for testing.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: In case where the performance degrades or the release is buggy, we roll back
    the blue (go live) version to the current version and redirect the traffic again
    to blue and green environment becomes staging.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic dashboard
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IBM Cloud has an out-of-the-box monitoring dashboard, which provides a graphical
    summary of the function's invocation. It also helps to determine the performance
    and health of your Cloud Functions actions. The monitoring page is divided into
    three tabs—Activity Summary, Activity Log, and Activity Timeline. Let's look at
    each tab in more detail.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Activity Summary
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Activity Summary widget provides a high-level summary of the Cloud Functions
    environment. It helps us to understand and monitor the overall health and performance
    of the Cloud Functions-enabled service. The metrics provide us with the following
    details:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: The usage rate of the OpenWhisk actions, displaying the number of times they
    were invoked.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The overall rate of failure across all actions. We can spot an error and isolate
    the services that have the errors; we can do this using activity log widgets.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The performance of the actions, displaying the average completion time that
    is attached to each action.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activity Timeline
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Activity Timeline widget shows a vertical bar graph that displays the activities
    of the Actions. Red indicates errors within specific Actions, and we can correlate
    this view with the Activity Log to understand the exact error in the action.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Activity Log
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Activity Log widget displays activation logs in a format that we can use
    to view the details of every activation, as shown in the following screenshot.
    If we click on the **√**button to view the detailed log, then it will also display
    the time taken for each invocation as well as the date:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f059e0b1-740b-4f1d-86ff-255b00e3e766.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
- en: We can also set up Hygiea as we did in previous chapter, and monitor the build,
    development, and testing of the OpenWhisk actions. We can also set up the deployment
    dashboard with Hygiea to track the deployment across different environments. As
    mentioned earlier, Hygiea would be an ideal dashboard to monitor DevOps' progress
    and performance.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: OpenWhisk action logging management
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Logging** is pretty limited with serverless applications as there are no
    VMs, no OS, and no middleware packages. But we have to make the best use of what
    logging functionalities we do have in order to efficiently debug and resolve any
    issues we might have with OpenWhisk actions. The bright side is that we still
    have access to output logging for actions. So the only thing we have to do is
    it to push the files into Elasticsearch and index them for better use. We will
    be look at how to do this in this section.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be setting up ELK with Docker locally and pushing the OpenWhisk action
    logs into ELK. The OpenWhisk cloud has out-of-the-box ELK configuration, so we
    can view the aggregated logs on the portal itself. To do this, we need to log
    into the Bluemix portal. Go through the following steps:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: Log into the Bluemix portal at [https://console.bluemix.net/](https://console.bluemix.net/).
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Functions link; this will take you to the functions/actions portal.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the portal, click on Logs. We will be taken to a page with a Kibana dashboard.
    There, we can search for the required logs. More details for viewing these logs
    can be followed at [https://console.bluemix.net/docs/openwhisk/openwhisk_logs.html#viewing-activation-logs-in-the-ibm-cloud](https://console.bluemix.net/docs/openwhisk/openwhisk_logs.html#viewing-activation-logs-in-the-ibm-cloud).
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: However, it is quite expensive to maintain logs on the portal, and it is more
    difficult and costly to retain them for longer periods, so to save some infrastructure
    cost, we can pull the logs locally and retain them for a long period, and at much
    cheaper cost. Next, we will see how we can set up ELK locally and pull the logs.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Setting up ELK
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will be setting up ELK locally using Docker. We have used Docker in many
    chapters, so it should be easy for us to set up ELK using it. We will be using
    the official Docker image that available on Docker Hub. We will be using Elasticsearch
    2.4.1, Logstash 2.4.0, and Kibana 4.6.1 for our setup. Enter the following command:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The moment you run the preceding command, Docker will connect to Docker Hub,
    download the image, and then the container for the ELK stack will be created.
    Once the Docker container is loaded successfully, we should be able to access
    the Kibana dashboard through the browser using `localhost:5601`.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Now we need to create a public hostname and port from the localhost port `5000`,
    for which we need to tunnel our localhost. For our example, we will use [https://burrow.io](https://burrow.io).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: OpenWhisk actions
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be using the existing OpenWhisk action that we created earlier in the
    chapter. Let's log into the Bluemix portal. Go to Functions |Actions | On monitor.
    We should be able to see the logs of the OpenWhisk functions/actions on the Activity
    Log widget. We need to pull these logs on our local ELK. We will use the logs
    of the weatherReport app for our example.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: OpenWhisk log forwarder
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'J Thomas has written an OpenWhisk forwarder, which is another OpenWhisk function.
    This function will push the OpenWhisk actions log to the local ELK stack. Let''s
    see how this is done. First, we need to clone the public repository that he has
    created, make a few changes, and then deploy the function to the Bluemix portal
    for the particular space. This function will push the logs into the local ELK
    using burrow tunneled host and port:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: 'Git clone the `j thomas` repository using the following code:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Export the OpenWhisk `auth` and `api` host for deploying to the Bluemix portal.
    You need to log into the portal to get the latest details using the following
    code:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Install the serverless OpenWhisk plugin and the latest version of Serverless
    Framework (if it is not already installed) using the following code:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Install the dependencies, as shown in the following code:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Deploy the action with serverless, as shown in the following code:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Once the action or function is successfully deployed, we will see the logs following
    your local ELK stack, and we should be able to view them.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about what OpenWhisk is and looked into the various
    ways to simplify build, deploy, monitor, and log OpenWhisk functions. We also
    learned how to set up continuous delivery and created a pipeline to do this.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about Google functions, look at what they
    are and how to start using simple functions to set up an automated pipeline with
    the Serverless Framework and other open source tools.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
