- en: Adding DevOps Flavor to Kubeless
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 Kubeless 添加 DevOps 风味
- en: In the previous chapter, we learned about Google Functions and how to automate
    deployment of Google Functions using various different tools and process. We also
    looked at how to monitor and log the service. This chapter will look at yet another
    open source serverless framework—Kubeless. We will learn how to set up the Kubeless
    framework over the minikube, create, deploy, and invoke Kubeless functions, and
    how to build, deploy, log, and monitor the Kubeless functions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们了解了 Google Functions 以及如何使用各种不同的工具和过程自动化部署 Google Functions。我们还研究了如何监控和记录服务。本章将介绍另一个开源无服务器框架——Kubeless。我们将学习如何在
    minikube 上设置 Kubeless 框架，创建、部署和调用 Kubeless 函数，以及如何构建、部署、记录和监控 Kubeless 函数。
- en: What is Kubeless?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Kubeless？
- en: '**Kubeless** is an open source serverless framework based on Kubernetes. It
    allows us to deploy and execute a piece of code without worrying about the underlying
    infrastructure. It uses the resources of Kubernetes to provide autoscaling, routing,
    and monitoring. Post-deployment functions can be triggered with pub–sub, HTTP,
    and scheduling.  The pub–sub events are managed through a Kafka cluster, an out-of-the-box
    component within Kubeless, which consists of a basic Kafka cluster with a broker
    and a zookeeper. HTTP triggers are available through the Kubernetes services,
    and schedule functions translate to a cron job. The languages/runtime supported
    by Kubeless are `python2.7`, `python3.4`, `python3.6`, `nodejs6`, `nodejs8`, `nodejs_distroless8`,
    `ruby2.4`, `php7.2`, `go1.10`, `dotnetcore2.0`, `java1.8`, `ballerina0.980.0`,
    and `jvm1.8`. Kubeless also supports HTTP, NATS, Kafka, cron, and stream triggers.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**Kubeless** 是一个基于 Kubernetes 的开源无服务器框架。它允许我们部署和执行一段代码，而无需担心底层基础设施。它利用 Kubernetes
    的资源提供自动扩展、路由和监控功能。部署后的函数可以通过发布–订阅、HTTP 和定时调度触发。发布–订阅事件通过 Kafka 集群进行管理，这是 Kubeless
    内置的一个组件，包含一个基础的 Kafka 集群、一个代理和一个 zookeeper。HTTP 触发器通过 Kubernetes 服务提供，定时调度的函数则转化为
    cron 作业。Kubeless 支持的语言/运行时包括 `python2.7`、`python3.4`、`python3.6`、`nodejs6`、`nodejs8`、`nodejs_distroless8`、`ruby2.4`、`php7.2`、`go1.10`、`dotnetcore2.0`、`java1.8`、`ballerina0.980.0`
    和 `jvm1.8`。Kubeless 还支持 HTTP、NATS、Kafka、cron 和流式触发器。'
- en: Kubeless architecture
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubeless 架构
- en: 'Kubeless uses custom resource definition, which means that when you create
    a custom resource definition, then the Kubernetes API server creates a resource
    path for each version specified. Custom resource definition can be namespaced
    or cluster-scope, so CRD is called a function, which means that Kubeless functions
    can be created as normal Kubernetes resources in the background, and a controller
    is created. The controller will watch these custom resources, and will launch
    upon runtime demand. The following diagram shows how this architecture works:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Kubeless 使用自定义资源定义，这意味着当你创建自定义资源定义时，Kubernetes API 服务器会为每个指定的版本创建一个资源路径。自定义资源定义可以是命名空间级别的或集群范围的，因此
    CRD 被称为函数，这意味着 Kubeless 函数可以像普通的 Kubernetes 资源一样在后台创建，并且会创建一个控制器。控制器将监控这些自定义资源，并在运行时需求下启动。下图展示了该架构的工作原理：
- en: '![](img/bf9904a4-442b-4a8a-ac61-eb7da513da1e.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bf9904a4-442b-4a8a-ac61-eb7da513da1e.png)'
- en: How to set up Kubeless
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何设置 Kubeless
- en: It is pretty easy to set up Kubeless. First, we download Kubeless from the release
    page, create a namespace, and then, through the YAML manifest found on the release
    page, we create the functions' custom resource definition and launch a controller.
    If you are setting up Kubeless on your personal laptop, then we have to use minikube
    to do this. So, let's see how to set up minikube, as we will be using it for our
    tutorials.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 Kubeless 非常简单。首先，我们从发布页面下载 Kubeless，创建一个命名空间，然后通过发布页面上的 YAML 清单，创建函数的自定义资源定义并启动控制器。如果你是在个人笔记本电脑上设置
    Kubeless，那么我们需要使用 minikube 来实现这一点。接下来，让我们看看如何设置 minikube，因为我们将在本教程中使用它。
- en: 'First, let''s set up minikube by going to [https://github.com/kubernetes/minikube](https://github.com/kubernetes/minikube).
    Once minikube is installed, we should be able to have a single node Kubernetes
    cluster inside a virtual machine. We should also be able to execute minikube commands
    through the Command Prompt. Let''s create a cluster and then create Kubeless resources
    within this cluster. Then, we will create a simple Kubeless function and then
    deploy and invoke it. We will also set up a dashboard for minikube and see how
    the controller and function are created and deployed, respectively. Let''s look
    at the how to implement this:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过访问 [https://github.com/kubernetes/minikube](https://github.com/kubernetes/minikube)
    设置 minikube。安装完成后，我们应该能够在虚拟机内创建一个单节点的 Kubernetes 集群，并且能够通过命令提示符执行 minikube 命令。接下来，我们将创建一个集群并在其中创建
    Kubeless 资源。然后，我们将创建一个简单的 Kubeless 函数并进行部署和调用。我们还将为 minikube 设置仪表盘，并查看控制器和函数是如何分别创建和部署的。让我们来看一下如何实现：
- en: 'Let''s create a minikube local Kubernetes cluster, as shown in the following
    code:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个 minikube 本地 Kubernetes 集群，如以下代码所示：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, create a minikube dashboard with the following command. The command trigger
    will open up a browser with the dashboard. The dashboard will show us the services,
    pods, and manager:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用以下命令创建一个 minikube 仪表盘。该命令触发后会打开一个浏览器，并显示仪表盘。仪表盘将展示我们的服务、Pod 和管理器：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now that we have a cluster, let''s deploy Kubeless to it, as shown in the following
    code. There are several Kubeless manifests available for multiple Kubernetes environments
    (non-RBAC, RBAC, and OpenShift). We will be using the manifest for non-RBAC (
    nonrole-based access control):'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经有了集群，让我们将 Kubeless 部署到集群中，如以下代码所示。针对多个 Kubernetes 环境（非 RBAC、RBAC 和 OpenShift）提供了多个
    Kubeless 清单。我们将使用非 RBAC（非基于角色的访问控制）清单：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now that we have deployed Kubeless, let''s check whether it has deployed properly:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 既然我们已经部署了 Kubeless，让我们检查它是否已正确部署：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we need to install the Kubeless CLI locally for deploying, invoking,
    and deleting the Kubeless functions, as shown in the following code:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要在本地安装 Kubeless CLI，用于部署、调用和删除 Kubeless 函数，如以下代码所示：
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s create a function and deploy it. The following is a simple Python function
    that we will deploy and invoke. Create a function named `test.py` with the following
    content:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个函数并进行部署。以下是一个简单的 Python 函数，我们将部署并调用它。创建一个名为 `test.py` 的文件，内容如下：
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Functions in Kubeless have the same format, regardless of the language of the
    function or the event source. In general, every function will do the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Kubeless 中的函数具有相同的格式，无论函数的语言或事件源如何。通常，每个函数将执行以下操作：
- en: Receive an object **event** as its first parameter. This parameter includes
    all the information regarding the event source. In particular, the `data `key
    should contain the body of the function request.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接收一个对象 **event** 作为其第一个参数。该参数包含关于事件源的所有信息。特别是，`data` 键应包含函数请求的主体。
- en: Receive a second object **context** with general information about the function.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接收第二个对象 **context**，它包含关于该功能的常规信息。
- en: Return a string/object that will be used as a response for the caller.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回一个字符串/对象，用作调用者的响应。
- en: 'Now, let''s deploy the function, and when we refresh the minikube dashboard,
    we should be able to see the `hello` function deployed there, as shown in the
    following code:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们部署该函数，当我们刷新 minikube 仪表盘时，应该能够看到部署在其中的 `hello` 函数，如以下代码所示：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following list explains the various elements of the preceding code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表解释了前面代码中的各种元素：
- en: '`kubeless function deploy hello` tells Kubeless to register a new function
    named `hello`. The function will be accessible over the web using this name. Note
    that this doesn''t need to be the same as the function name used inside the code
    (we''ll specify that a little further along using the `--handler `option).'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kubeless function deploy hello` 告诉 Kubeless 注册一个名为 `hello` 的新函数。通过此名称，函数将在网络上可访问。请注意，这个名称不需要与代码内部使用的函数名称相同（我们稍后会通过
    `--handler` 选项指定）。'
- en: '`--trigger-http` tells Kubeless that the function will be invoked over HTTP.
    It''s also possible to trigger the function in other ways, but that is not covered
    here.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--trigger-http` 告诉 Kubeless 该函数将通过 HTTP 被调用。也可以通过其他方式触发该函数，但此处未涵盖。'
- en: '`--runtime python2.7` tells Kubeless to use Python 2.7 to execute the code.
    Node is also supported as a runtime, with more to come in the future.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--runtime python2.7` 告诉 Kubeless 使用 Python 2.7 来执行代码。节点也支持作为运行时，未来将支持更多的运行时。'
- en: '`--handler test.hello` tells Kubeless the name of the function to call inside
    the code module. You can see in the preceding Python code that the function is
    called `hello`.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--handler test.hello`告诉 Kubeless 调用代码模块中的哪个函数。你可以在上面的 Python 代码中看到，函数名为`hello`。'
- en: '`--from-file /tmp/hello.py` tells Kubeless to upload and use the `/tmp/hello.py` file
    as the source for the function. It is possible to pass a function in other ways
    as well.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--from-file /tmp/hello.py`告诉 Kubeless 上传并使用`/tmp/hello.py`文件作为函数的源文件。也可以通过其他方式传递函数。'
- en: 'We will see the function custom resource being created through the following
    commands:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过以下命令看到函数自定义资源的创建：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, let''s invoke the function, as follows:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们调用这个函数，如下所示：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can also `delete` the function, as follows:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以`delete`该函数，如下所示：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: So far, we have installed Kubeless locally, created a simple function, deployed
    it, invoked it, and undeployed it. In the next section, we will learn how to automate
    deployment using the Serverless Framework.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经在本地安装了 Kubeless，创建了一个简单的函数，进行了部署、调用和撤销部署。接下来的部分，我们将学习如何使用 Serverless
    框架自动化部署。
- en: Setting up continuous integration and deployment
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置持续集成和部署
- en: We will be using the  Serverless Framework to kick-start the development and
    deployment of the Kubeless functions. The Serverless Framework has provided lots
    of feature to adopt Kubeless without much effort. Let's look at the various functionalities
    provided by Serverless.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Serverless 框架来启动 Kubeless 函数的开发和部署。Serverless 框架提供了很多功能，可以轻松地采用 Kubeless。让我们来看看
    Serverless 提供的各种功能。
- en: Creation of the service
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建服务
- en: 'We will use the `create `command to create basic services using the passing
    of runtime and `path` to create a directory. Currently, two runtimes are provided—one
    is Python and the other is Node.js. So, if we run the following command with the
    `path` parameter, it will create a folder with a simple serverless function. The
    runtimes currently available are `kubeless-python` and`kubeless-nodejs`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `create` 命令，通过传递运行时和 `path` 来创建基本服务并生成目录。目前，提供了两种运行时环境——Python 和 Node.js。所以，如果我们使用
    `path` 参数运行以下命令，它将创建一个包含简单 Serverless 函数的文件夹。目前可用的运行时有 `kubeless-python` 和 `kubeless-nodejs`：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `create` command will create a service, and each service configuration
    will have the following three files:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`create` 命令将创建一个服务，并且每个服务的配置都将包含以下三个文件：'
- en: '`serverless.yml`: The main responsibility of this file is to declare the service,
    define the provider, custom plugin (in our case, the serverless-kubeless plugin),
    and events or triggers that the function will execute, and configure files using
    serverless variables.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`serverless.yml`：此文件的主要职责是声明服务、定义提供商、定制插件（在我们的案例中是 serverless-kubeless 插件）、以及函数将执行的事件或触发器，并使用
    serverless 变量配置文件。'
- en: '`handler.py`: This file will contain function code. The function definition
    with `serverless.yml` will point to the `handler.py`.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`handler.py`：此文件将包含函数代码。`serverless.yml` 中的函数定义将指向 `handler.py`。'
- en: '`package.json`: This is the file for the npm package definition of our functions,
    containing all the dependencies and the `kubeless-serverless` plugin.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.json`：这是我们函数的 npm 包定义文件，包含所有依赖项和 `kubeless-serverless` 插件。'
- en: 'Let''s update these files with our function and configuration, as shown in
    the following code. We are updating a function to search a bike station from the
    station feed exposed through JSON. I have also put the code on the GitHub repository
    at [https://github.com/shzshi/kubeless-serverless.git](https://github.com/shzshi/kubeless-serverless.git):'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新这些文件，包含我们的函数和配置，具体代码如下所示。我们正在更新一个函数，用于从通过 JSON 暴露的站点源中搜索自行车站。我还将代码上传到了
    GitHub 仓库：[https://github.com/shzshi/kubeless-serverless.git](https://github.com/shzshi/kubeless-serverless.git)：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Replace the `serverless.yaml` with the following content:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `serverless.yaml` 替换为以下内容：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Deploying the function
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署函数
- en: 'As the required files were created through a template, we can modify them as
    per our needs and then simply deploy and invoke them when we need them. Let''s
    go ahead and deploy them using serverless, then `npm install` will get the required
    dependencies for serverless, such as the `kubeless-serverless` plugin, and then
    we can deploy the function, as shown in the following code:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 由于所需的文件是通过模板创建的，我们可以根据需要修改它们，然后在需要时简单地部署并调用它们。让我们使用 Serverless 部署它们，然后`npm install`将安装
    Serverless 所需的依赖项，例如`kubeless-serverless`插件，接着我们可以部署函数，具体代码如下所示：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Invoking the function
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调用函数
- en: 'The Kubeless function can be invoked through the command line or through a
    UI provided by Kubeless. The Kubeless UI can be provisioned by downloading the
    file locally and running it, or by using a Docker image and Dockerfile, or through
    the Kubernetes manifest that''s available with the repository. For our tutorials,
    I will be using the Kubernetes manifest, as shown in the following code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Kubeless 函数可以通过命令行或 Kubeless 提供的 UI 调用。Kubeless UI 可以通过将文件下载到本地并运行，或通过使用 Docker
    镜像和 Dockerfile，或者通过使用仓库中提供的 Kubernetes 清单来进行配置。对于我们的教程，我将使用 Kubernetes 清单，如下所示：
- en: Currently, the UI works perfectly fine with minikube, but it might need a few
    tweaks if you have an RBAC cluster, or it could just work without any tweaks.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，UI 在 minikube 上工作得非常顺利，但如果你有 RBAC 集群，可能需要做一些调整，或者它也可能在没有任何调整的情况下直接工作。
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `minikube` command will pop a browser up and open a UI. The UI has the
    ability to create, edit, invoke, and delete the function, so invoke the function
    that we deployed. Let''s add `{"term":"New York"} `in the `textarea` request,
    select the Request as POST, and click on Run Function. The function will be executed
    successfully, with the station data response output displayed, as shown in the
    following screenshot:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`minikube` 命令会弹出一个浏览器并打开 UI。UI 具有创建、编辑、调用和删除函数的功能，因此调用我们部署的函数。让我们在 `textarea`
    请求中添加 `{"term":"New York"} `，选择请求方式为 POST，然后点击运行函数。该函数将成功执行，并显示车站数据响应输出，如下截图所示：'
- en: '![](img/5299053d-f7c7-45a0-85d1-2c74f15642cf.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5299053d-f7c7-45a0-85d1-2c74f15642cf.png)'
- en: 'We can invoke the same function through the Serverless Framework as well, and
    the function will execute and get the required data, as shown in the following
    code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过 Serverless Framework 调用相同的函数，函数将执行并获取所需的数据，如下代码所示：
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The Kubeless UI repository is listed at [https://github.com/kubeless/kubeless-ui](https://github.com/kubeless/kubeless-ui).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Kubeless UI 仓库可以在 [https://github.com/kubeless/kubeless-ui](https://github.com/kubeless/kubeless-ui)
    查找。
- en: Serverless logs
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Serverless 日志
- en: 'What happens if something goes wrong? We do not have error handling in place,
    but we can test the logging just by feeding the error while invoking the function.
    So, let''s invoke the function with an error in the data, as shown in the following
    code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出了问题会发生什么？我们没有设置错误处理机制，但可以通过在调用函数时传递错误来测试日志。所以，让我们在数据中加入错误并调用函数，如下代码所示：
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Serverless returned an error message with a 500 server code, which is what
    you would expect from a web framework. However, it would be useful to see the
    Python stack trace in order to better debug the source of the error. So, let''s
    get the logs to see what the error was:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Serverless 返回了一个带有 500 服务器代码的错误消息，这正是你从一个 web 框架中所期望的。然而，为了更好地调试错误来源，查看 Python
    堆栈跟踪信息会非常有帮助。那么，让我们获取日志来看看到底是什么错误：
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: It is clear from the `KeyError` phrase that the function failed because of the
    wrong key name, so this gives us a view of what is going wrong. But in a production-like
    environment, we need to have more sophisticated error-handling methods.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `KeyError` 这一短语中可以清楚地看到，函数因错误的键名而失败，这给我们提供了了解出错原因的视角。但在类似生产的环境中，我们需要更为复杂的错误处理方法。
- en: Continuous integration with Jenkins
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 Jenkins 的持续集成
- en: Throughout this book, we have looked at continuous integration and continuous
    deployment for different serverless providers, but with respect to Kubeless (as
    it is still developing) there is still a lot that needs to be improved. While
    writing this book, I found that, using the Serverless Framework, we can only set
    up deployment if our Kubernetes cluster (minikube), Serverless Framework, and
    Jenkins are set up locally. There is no provision to set up a remote deployment
    with the Serverless Framework. But as the Serverless Framework and Kubeless mature
    over time, these features will be added. In the following tutorials, I have created
    files to set up deployment locally.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们已经研究了不同 Serverless 提供商的持续集成和持续部署，但就 Kubeless 而言（由于它仍在开发中），仍有许多需要改进的地方。在编写本书时，我发现，使用
    Serverless Framework 时，我们只能在本地设置部署，前提是我们的 Kubernetes 集群（minikube）、Serverless Framework
    和 Jenkins 已经在本地设置好。没有设置远程部署的功能。但随着 Serverless Framework 和 Kubeless 的成熟，这些功能会逐步添加。在接下来的教程中，我已经创建了文件以便在本地设置部署。
- en: You can find out how to set up remote deployment by reading the following article
    at [https://aws.amazon.com/blogs/opensource/running-faas-on-kubernetes-cluster-on-aws-using-kubeless/](https://aws.amazon.com/blogs/opensource/running-faas-on-kubernetes-cluster-on-aws-using-kubeless/).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过阅读以下文章来了解如何设置远程部署：[https://aws.amazon.com/blogs/opensource/running-faas-on-kubernetes-cluster-on-aws-using-kubeless/](https://aws.amazon.com/blogs/opensource/running-faas-on-kubernetes-cluster-on-aws-using-kubeless/)。
- en: If you clone the repository at [https://github.com/shzshi/kubeless-continuous-integration.git](https://github.com/shzshi/kubeless-continuous-integration.git),
    then you should be able to use this template to set up continuous integration
    locally.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你克隆了这个仓库：[https://github.com/shzshi/kubeless-continuous-integration.git](https://github.com/shzshi/kubeless-continuous-integration.git)，那么你应该能够使用这个模板在本地设置持续集成。
- en: 'However, we can run the files locally on the laptop, provided we have the Serverless
    Framework installed and configured. Let''s look how do this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们可以在笔记本电脑上本地运行这些文件，只要我们安装并配置了Serverless Framework。让我们来看一下如何操作：
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We should see six files and one directory in this folder, but we won''t be
    using Dockerfiles and Jenkinsfiles in this tutorial. They can be used once remote
    deployment is possible with the Serverless Framework for Kubeless, as shown in
    the following code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该在这个文件夹里看到六个文件和一个目录，但在本教程中我们不会使用Dockerfile和Jenkinsfile。它们可以在使用Serverless
    Framework for Kubeless实现远程部署后使用，示例如下代码：
- en: '[PRE19]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We ran `npm install` to get the required dependencies for the Serverless Framework
    and Node.js application and test. Post that we ran the npm test, for which I created
    a simple unit test to check the sanity of our function before we deployed them
    to the cluster, as shown in the following code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们运行了`npm install`来获取Serverless Framework和Node.js应用程序所需的依赖项并进行测试。接着我们运行了npm
    test，在这个过程中我创建了一个简单的单元测试来检查我们的函数是否正常，确保它们在部署到集群之前能够正常工作，如下代码所示：
- en: '[PRE20]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'So, our Node.js function will be deployed successfully, and we can invoke it
    locally or through the Kubeless UI and test it. Post-invocation, we should get
    the output of `Hello Kubeless`, as shown in the following code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的Node.js函数将成功部署，我们可以在本地或通过Kubeless UI进行调用并进行测试。调用后，我们应该能够得到`Hello Kubeless`的输出，如下代码所示：
- en: '[PRE21]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Monitoring Kubeless
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控Kubeless
- en: We can monitor the `kubeless` function using Prometheus. There is in-built runtime
    support for Prometheus; the runtime will automatically collect metrics for each
    function. Prometheus will show those metrics on the default dashboard.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Prometheus监控`kubeless`函数。Kubeless的运行时内建支持Prometheus，运行时将自动收集每个函数的指标。Prometheus将在默认仪表板上显示这些指标。
- en: The Prometheus metrics can be visualized through Grafana. The Grafana dashboard
    can be configured through the sample dashboard JSON file provided by Kubeless
    at [https://github.com/kubeless/kubeless/blob/master/docs/misc/kubeless-grafana-dashboard.json](https://github.com/kubeless/kubeless/blob/master/docs/misc/kubeless-grafana-dashboard.json).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过Grafana可视化Prometheus指标。Grafana仪表板可以通过Kubeless提供的示例JSON文件进行配置：[https://github.com/kubeless/kubeless/blob/master/docs/misc/kubeless-grafana-dashboard.json](https://github.com/kubeless/kubeless/blob/master/docs/misc/kubeless-grafana-dashboard.json)。
- en: Kubeless pros and cons
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kubeless的优缺点
- en: 'In the world of serverless, Kubeless has just started its journey; it has as
    a long way to go to be a biggie, like AWS Lambda, Azure Function, or Google Functions.
    However, it still has a good number of brownie points, and it will definitely
    grow to be one of the leading Serverless Frameworks. Let''s look at some of its
    pros:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在无服务器架构的世界中，Kubeless才刚刚起步；它还有很长的路要走，才能成为像AWS Lambda、Azure Function或Google Functions这样的巨头。然而，它依然有不少优势，未来一定会成长为领先的Serverless框架之一。我们来看一下它的一些优点：
- en: No provisioning of servers
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无需服务器配置
- en: Can run the code in parallel and scale easily
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以并行运行代码并轻松扩展
- en: Not vendor-agnostic, like other service providers, such as AWS Lambda, Azure
    Function, or Google Functions
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不像其他服务提供商（如AWS Lambda、Azure Function或Google Functions），它不是供应商独立的
- en: Integration with the serverless deployment framework
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与无服务器部署框架的集成
- en: UI to create, update, delete, and invoke the functions
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于创建、更新、删除和调用函数的UI
- en: 'The following are some of its cons:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是它的一些缺点：
- en: The testing and integration of functions still needs improvement
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数的测试和集成仍然需要改进
- en: Remote deployment is not in place
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程部署尚未到位
- en: Requests that use a lot of memory state, cache, queue, and persistence storage
    are provided by other systems
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用大量内存的请求（状态、缓存、队列和持久化存储）由其他系统提供
- en: Environment management (dev, QA, UAT, or PROD) is not documented or not in place
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境管理（开发、质量检查、用户验收测试或生产）没有文档记录或没有到位。
- en: So, in terms of applying automation, the framework still needs lots of improvement
    and features to be added in order to have adequate functionality.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在应用自动化方面，框架仍然需要大量改进，并且需要添加许多功能才能具备足够的功能性。
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the Kubeless serverless framework. We learned
    how to set up Kubeless, deploy, remove, and invoke Python and Node.js functions.
    We also learned how to monitor or log the functions. In the next chapter, we will
    learn the best practices for using serverless and for setting up automation and
    DevOps.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了Kubeless无服务器框架。我们学习了如何设置Kubeless，部署、移除和调用Python和Node.js函数。我们还学习了如何监控或记录这些函数。在下一章中，我们将学习使用无服务器技术的最佳实践，以及如何设置自动化和DevOps。
