- en: Use Cases and Add-Ons
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用案例和附加功能
- en: In the previous chapter, we learned how to apply some best practices in relation
    to serverless functions and DevOps. We understood how important it is to build
    light and secure serverless functions. We also learned about some best practices for
    monitoring and logging a serverless application. So, moving forward, let's look
    at the big picture of how serverless can be used in the real world and also learn
    how we can implement end-to-end DevOps around it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何应用与无服务器函数和 DevOps 相关的一些最佳实践。我们理解了构建轻量且安全的无服务器函数有多么重要。我们还学习了如何监控和记录无服务器应用程序的一些最佳实践。那么，接下来，让我们看看无服务器架构如何在实际应用中被使用，并学习如何围绕它实现端到端的
    DevOps。
- en: As developers are moving from monolithic application toward the serverless architecture
    more and more use cases are coming into existence. But it is getting equally more
    difficult to build, test and deploy them. So, in this chapter, we will learn few
    serverless use cases and also learn how to set up end-to-end deployment pipeline.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 随着开发者们从单体应用转向无服务器架构，越来越多的使用案例开始出现。但与此同时，构建、测试和部署它们变得更加困难。因此，在本章中，我们将学习一些无服务器的使用案例，并学习如何设置端到端的部署管道。
- en: 'This chapter will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: AWS Lambda use cases and add-ons
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS Lambda 使用案例和附加功能
- en: Azure Functions add-ons
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Functions 附加功能
- en: Google Functions add-ons
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Functions 附加功能
- en: AWS Lambda use cases and add-ons
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS Lambda 使用案例和附加功能
- en: Our journey so far has been about what AWS Lambda is , and how we can build
    ,test, deploy, monitor, and log it. We also looked at some best practices for
    AWS Lambda in general and also for DevOps. So now, here in this chapter, it is
    time to bring them all together as one use case. Before we cover the use case
    for DevOps with AWS Lambda, let's start to first look at use cases where Lambda
    can be efficiently used and then let's look at how DevOps can make life easier
    for developers and business users.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的旅程是关于 AWS Lambda 的介绍，如何构建、测试、部署、监控和记录它。我们还研究了一些 AWS Lambda 和 DevOps
    的最佳实践。那么，现在在本章中，是时候将它们汇聚成一个使用案例了。在我们讨论与 AWS Lambda 相关的 DevOps 使用案例之前，让我们先看看 Lambda
    可以高效使用的一些案例，然后再看看 DevOps 如何为开发者和业务用户简化工作。
- en: AWS Lambda use cases
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS Lambda 使用案例
- en: As we know, serverless architecture was introduced to help businesses to focus
    on application development and not to worry about the underlying servers. Reducing
    the cost and shortening the deployment cycle, the adoption rate for serverless
    is growing exponentially. Now lots of companies are adopting serverless as a way
    to ensure rapid auto scaling and descaling. Let's look at some of the useful applications
    of serverless that are being adopted across the industry.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所知，无服务器架构的引入是为了帮助企业专注于应用开发，而不必担心底层服务器。通过降低成本和缩短部署周期，无服务器架构的采用率正在呈指数级增长。现在，很多公司采用无服务器架构作为确保快速自动扩展和缩减的方式。让我们看看一些无服务器架构在行业中被广泛采用的有用应用场景。
- en: Serverless website
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器网站
- en: The best model for serverless adoption would be websites that want to take advantage
    of AWS Lambda and AWS S3\. Both of these resources provided by AWS are very cheap.
    Also, with AWS Lambda, it can scale on demand and descale as demand slows downs.
    So they do not have to pay big money for keeping a server up and running all the
    time. So we can consider hosting the static content or the frontend on the S3
    bucket and these frontend applications can send requests to Lambda functions via
    the API gateway HTTPS endpoints and Lambda does all the heavy lifting of the application
    logic and persists the data to a a fully-managed database service (**RDBMS** (**relational
    databases**) or **DynamoDB** (**non-relational databases**) ). We can host our
    Lambda function within VPCs to isolate them from different other networks and
    it is also cheaper, as we pay only for the traffic incurred by AWS S3 and AWS
    Lambda with the extra cost for the database service.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于无服务器架构的最佳采用模型是那些希望利用 AWS Lambda 和 AWS S3 的网站。AWS 提供的这两项资源都非常便宜。而且，使用 AWS Lambda
    时，它可以按需扩展并在需求减少时缩减规模。因此，它们不需要为始终保持服务器运行而支付大量费用。我们可以考虑将静态内容或前端托管在 S3 存储桶中，这些前端应用程序可以通过
    API 网关的 HTTPS 端点向 Lambda 函数发送请求，Lambda 会完成应用逻辑的重负担，并将数据持久化到完全托管的数据库服务中（**RDBMS**（**关系数据库**）或
    **DynamoDB**（**非关系数据库**））。我们可以将 Lambda 函数托管在 VPC 中，将其与其他网络隔离，这样也能降低成本，因为我们只需支付
    AWS S3 和 AWS Lambda 所产生的流量费用，以及数据库服务的额外费用。
- en: Video and image processing
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 视频和图像处理
- en: With Instagram becoming more popular, a lot can be done with images and videos,
    but it is equally expensive to process or resize them. The traditional way of
    editing the videos and images would be to host a VM that is always running and
    when an image or video arrives for editing then running the application within
    the VM. But we have to incur costs for running the VM 24/7 without it being used
    all the time. Serverless could be the best option for these types of jobs. Serverless
    services can be used to dynamically resize the image or change the video transcoding
    for different target devices.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 Instagram 越来越流行，图像和视频的应用变得更加广泛，但处理或调整大小同样需要较高的成本。传统的编辑视频和图像的方式是托管一个始终运行的虚拟机，当图像或视频需要编辑时，再在虚拟机内运行相应的应用程序。但我们不得不承担
    24/7 运行虚拟机的成本，即使它并不总是被使用。无服务器计算可能是这类任务的最佳选择。无服务器服务可以用来动态调整图像大小或更改视频转码，以适应不同目标设备的需求。
- en: Also, with serverless, we can tap into the Google Vision API or Amazon Recognition
    to recognize faces and images or flat inappropriate content. In the AWS chapter,
    we created a tutorial where an image is uploaded into one S3 bucket and then Lambda
    is automatically triggered when the image is uploaded to the S3 bucket to resize
    it and push it to another bucket.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，使用无服务器计算，我们可以接入 Google Vision API 或 Amazon Recognition 来识别面部和图像，或屏蔽不当内容。在
    AWS 章节中，我们创建了一个教程，其中图像上传到一个 S3 存储桶，当图像上传到该 S3 存储桶时，Lambda 会自动触发，将图像调整大小并推送到另一个存储桶。
- en: Logs Processing and notification
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志处理与通知
- en: We can use Lambda functions to harvest the logs from CloudTrail and CloudWatch,
    Lambda watches for specific triggers and log entries and invokes an SNS notification
    on the event. These notifications can be configured and sent to Slack, Jabber,
    or other support systems.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 Lambda 函数从 CloudTrail 和 CloudWatch 获取日志，Lambda 会监控特定的触发器和日志条目，并在事件发生时调用
    SNS 通知。这些通知可以配置并发送到 Slack、Jabber 或其他支持系统。
- en: Controlling the IoT
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制物联网
- en: The **Internet of things** (**IoT**) is the latest trend in the market, where
    lots of smart gadgets at home and in the office can be controlled through Alexa.
    But how do they work ? So, it is Alexa with Lambda that controls these smart devices.
    Say we have to light an LED bulb that is controlled by Alexa through a voice message,
    the event is triggered on the Alexa, and the Lambda function is invoked to perform
    the action to switch on or switch off the light. So, serverless could become the
    backend for all the IoT calls.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**物联网**（**IoT**）是市场上的最新趋势，许多家庭和办公室的智能设备可以通过 Alexa 控制。但它们是如何工作的呢？正是 Alexa 与
    Lambda 联手控制这些智能设备。比如我们要点亮一个由 Alexa 通过语音消息控制的 LED 灯泡，事件会在 Alexa 上触发，然后调用 Lambda
    函数执行开关灯的操作。所以，无服务器计算可能会成为所有物联网调用的后端。'
- en: Backup and daily tasks
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 备份和日常任务
- en: Lambda functions can plays an important role with backups and daily tasks. We
    can schedule the Lambda functions to do repetitive tasks, such as checking for
    idle resources, creating backups, generating daily reports ,and various other
    routine jobs. The old school involved installing a task manager application that
    was running on the server all the time and performing the task when required.
    But with Lambda, functions are invoked only at a certain event or schedule. They
    also scale horizontally when required and also it costs less.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda 函数在备份和日常任务中扮演着重要角色。我们可以调度 Lambda 函数来处理重复性任务，比如检查空闲资源、创建备份、生成日报和其他日常工作。传统方式是安装一个始终运行在服务器上的任务管理应用程序，按照需求执行任务。但使用
    Lambda 后，函数仅在特定事件或时间表下被调用。它们在需要时也会水平扩展，而且成本更低。
- en: Continuous integration and continuous deployment
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成与持续部署
- en: The ability to rapidly iterate software is more important than it has ever been.
    CI/CD pipelines allow you to ship code in small increments, so that bug fixes
    and other updates can be shipped on a daily basis.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 快速迭代软件的能力比以往任何时候都更为重要。CI/CD 流水线允许你以小幅度更新代码，这样就可以每天发布 bug 修复和其他更新。
- en: Serverless can automate many of these processes. Code check-ins can trigger
    website builds and automatic redeploys, or PRs can trigger running automated tests
    to make sure the code is well-tested before human review.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器计算可以自动化许多这些过程。代码提交可以触发网站构建和自动重新部署，或者拉取请求（PR）可以触发自动化测试，确保代码在人工审核之前经过充分测试。
- en: When you think about automation possibilities with serverless applications,
    it becomes easy to cut manual tasks out of your workflow.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当你考虑与无服务器应用相关的自动化可能性时，去除工作流程中的人工任务变得更加简单。
- en: So, we have looked at different use cases where we can use AWS Lambda functions
    that can perform better jobs than transitional servers or virtual machines. Currently
    we have a small number of serverless being used in real life, but this certainly
    will grow in coming years.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: But as the use of serverless grows, managing them becomes really tedious. For
    example, if we use serverless for a share market portal or any ticketing application,
    then these applications will have many functions to work together, as the applications
    and functions have to be versioned, built, tested , deployed, and rolled back.
    This is where continuous integration and continuous delivery plays a role. So,
    our DevOps use case would be how to set up efficient CI/CD for Lambda functions.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Starting with development locally, the serverless framework provides an interesting
    plugin, which is **serverless offline.** This plugin emulates AWS Lambda and the
    AWS API gateway locally, which helps to develop and test code locally without
    uploading to the AWS Cloud before we have thoroughly tested our code locally.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate this, I used our earlier task pipeline and modified it to work
    with serverless offline with DynamoDB in local node. Interestingly, AWS provides
    a downloadable version of DynamoDB files that allows us to set up the DynamoDB
    server locally on our development area. So, this will allow us to develop a DynamoDB
    application locally without paying for data storage and data transfer and it also
    does not need internet access. You can find more information about setting up
    this at the following link: [https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBLocal.html](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DynamoDBLocal.html).'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: 'I have simply used the serverless plugin name `serverless-dynamodb-local`to
    set it up locally. It is much easier to set up along with Jenkins. I created an
    extra stage within the Jenkinsfile. So, here in this stage, I am installing `serverless-dynamodb-local`,
    `serverless-offline`, and also `serverless-mocha-plugin`, which are required plugins
    for us to unit test our functions locally before we push them into the AWS Cloud.
    I have added the code snippet for this and have put the code in the Git repository
    ([https://github.com/shzshi/aws-lambda-devops-usecase.git](https://github.com/shzshi/aws-lambda-devops-usecase.git)):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the next Jenkins stage, I am installing DynamoDB locally and adding the
    path local API task endpoint to the Jenkins job and invoking the serverless test.
    I have updated the `serverless.yml` handle and also made sure to update `TASKS_ENDPOINT`within
    the Jenkinsfile, so the rest of the pipeline should be same as that in [Chapter
    3](e7282c95-dfff-4ed6-91e2-92224fa414bf.xhtml), *Applying DevOps to AWS Lambda
    Applications*:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And the Jenkins log should look something like this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And once the pipeline succeeds, it should look like the following diagram:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5207f5fb-0376-4a20-8622-598297b8b149.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: 'So, now we can develop and test our functions locally as a part of continuous
    integration and then move to the cloud for other non-production and production
    environments. But one thing that can further be automated is our Lambda API path
    over the cloud , as when the function is deployed to the AWS Cloud, then we will
    get the random hostname for the API gateway:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在我们可以将函数作为持续集成的一部分在本地开发和测试，然后将其迁移到云端用于其他非生产和生产环境。但有一件事可以进一步自动化，就是我们在云中的Lambda
    API路径，因为当函数部署到AWS云时，我们会得到API网关的随机主机名：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We have updated the task endpoint for the API hostname within our Jenkins pipeline
    Jenkinsfile. That is because the hostname provided by the API gateway is not static
    and also because every time we redeploy or remove our service the hostname will
    change and, accordingly, we have to to change it where ever we are using it. So,
    how to we resolve this problem? This can be automated through the dynamic allocation
    of the static domain. This is easily possible through the serverless framework,
    using one of its plugin, and that plugin is `serverless-domain-manager`**.** Let's
    look at how that can be achieved.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已在Jenkins流水线Jenkinsfile中更新了API主机名的任务端点。之所以这么做，是因为API网关提供的主机名不是静态的，而且每次我们重新部署或删除服务时，主机名会发生变化，因此我们必须在任何使用该主机名的地方进行更改。那么，如何解决这个问题呢？通过动态分配静态域名，这可以通过Serverless框架及其插件`serverless-domain-manager`轻松实现。让我们看看如何实现这一点。
- en: 'Before we start using the plugin, there are a few pre-requisites:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用插件之前，有几个前提条件：
- en: We need to register a desired domain name through the following link: [https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar.html](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar.html)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要通过以下链接注册所需的域名：[https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar.html](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar.html)
- en: We need to make sure we have have our domain name in the registered domain in
    Route 53 ( [https://console.aws.amazon.com/route53/home?#DomainListing](https://console.aws.amazon.com/route53/home?#DomainListing))
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要确保我们的域名已经在Route 53中注册（[https://console.aws.amazon.com/route53/home?#DomainListing](https://console.aws.amazon.com/route53/home?#DomainListing)）
- en: We need to request a new certificate for the domain we have created, which can
    be created through this link: [https://console.aws.amazon.com/acm/home?region=us-east-1#/wizard/](https://console.aws.amazon.com/acm/home?region=us-east-1#/wizard/)
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要为我们创建的域名申请新的证书，可以通过此链接创建：[https://console.aws.amazon.com/acm/home?region=us-east-1#/wizard/](https://console.aws.amazon.com/acm/home?region=us-east-1#/wizard/)
- en: 'Once the pre-requisites are successfully completed, we need to install the
    serverless domain manager plugin:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦前提条件成功完成，我们需要安装Serverless域管理插件：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Then within the `serverless.yml` file, we add two sections. First we add `serverless-domain-manager`
    in the plugins block , and then we configure the plugin with `customDomain` via
    the **Custom** block. The `basePath` attribute will be prefixed to every route
    of our service. Say, for example, our function is `helloworld` and we add `basePath` as
    `serverless`**, **then the route that is registered as `/helloworld` will be accessed
    through `serverless/helloworld`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`serverless.yml`文件中，我们添加两个部分。首先，我们在插件区块中添加`serverless-domain-manager`，然后通过**Custom**区块配置插件的`customDomain`。`basePath`属性将被添加到我们服务的每个路由前缀。例如，如果我们的函数是`helloworld`，并且我们将`basePath`设置为`serverless`，那么注册为`/helloworld`的路由将通过`serverless/helloworld`访问。
- en: For example, `https://api.<registered_domain_name>/serverless/helloword:`
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`https://api.<registered_domain_name>/serverless/helloworld:`
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We can also set up source code analysis by integrating SonarQube or ESlint within
    the Jenkins pipeline.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过在Jenkins流水线中集成SonarQube或ESlint来设置源代码分析。
- en: Monitoring
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控
- en: When we talk about monitoring serverless applications , we do not need to worry
    about monitoring CPU usage or memory usage, and we don't need to update our system
    package, as all these are managed by AWS. But the Lambda function still needs
    to be monitored for execution failures, because in a production environment one
    single function failure could be a disaster.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论监控无服务器应用程序时，我们不需要担心CPU使用率或内存使用率，也不需要更新我们的系统包，因为所有这些都由AWS管理。但Lambda函数仍然需要监控执行失败，因为在生产环境中，一次函数失败可能会带来灾难。
- en: 'CloudWatch, by default, provides metrics for Lambda functionsand these metrics
    are:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，CloudWatch为Lambda函数提供度量指标，这些指标包括：
- en: '**Invocation**: Number of times the functions were invoked'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调用次数**：函数被调用的次数'
- en: '**Errors**: Number of times the functions failed due to various errors, timeouts,
    unhandled exceptions, memory problems, and other issues'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误**：由于各种错误、超时、未处理的异常、内存问题和其他问题导致函数失败的次数'
- en: '**Throttles**: Number of times functions throttled, as AWS limits the number
    of concurrent executions per function and if we exceed the limit the function
    is throttled'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**限制**：函数被限制的次数，AWS限制了每个函数的并发执行次数，如果超过限制，函数将被限制执行'
- en: '**Duration:** Invocation time of the function'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时长**：函数的调用时间'
- en: And errors and throttles are to be monitored 24/7 and we cannot be watching
    CloudWatch all the time, but we can set an alerti for all the errors and throttles.
    If we are using the serverless framework, then this can be managed through a plugin
    named `serverless-plugin-aws-alerts`.It makes it easy to set up alerts for the
    services.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 错误和限制需要24/7监控，我们不能一直盯着CloudWatch看，但我们可以为所有的错误和限制设置警报。如果我们使用serverless框架，可以通过一个名为`serverless-plugin-aws-alerts`的插件来管理。这使得为服务设置警报变得非常简单。
- en: 'To set up alerting, we need to install the plugin within our serverless framework
    service:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置警报，我们需要在serverless框架服务中安装该插件：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then we need to add it to the plugins sections and set the alerts details in
    the custom section within `serverless.yml`. So, this setup adds alerts to all
    the functions in our service when deployed to the production stage. Then we configure
    subscriptions for our SNS topics and each subscription has to have a protocol,
    which, in our case, is the email and endpoint, which is email address:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要将其添加到插件部分，并在`serverless.yml`的custom部分设置警报详情。这样，部署到生产阶段时，所有函数都会添加警报。接着，我们为SNS主题配置订阅，每个订阅必须有一个协议，在我们的案例中是电子邮件，端点则是电子邮件地址：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Static website
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态网站
- en: AWS Lambda function will play the role of the backbone of our web application.
    We also need a cosmetic frontend too to be deployed along with the Lambda function
    and there is a serverless framework plugin available that can perform this task
    with ease. That plugin is `serverless-finch`. This plugin will upload static assets
    of our web application into AWS s3.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: AWS Lambda函数将作为我们网页应用的支柱。我们还需要一个外观前端，和Lambda函数一起部署，并且有一个可用的serverless框架插件，可以轻松完成这个任务。这个插件是`serverless-finch`。它会将我们网页应用的静态资源上传到AWS
    S3。
- en: 'Let''s look at how it works. To use this plugin, we need to first install it
    and then configure it into our `serverless.yml` file:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看它是如何工作的。要使用这个插件，我们首先需要安装它，然后将其配置到我们的`serverless.yml`文件中：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'So once the plugin is installed, we first need to create a distribution folder
    that, by default, would be `client`/`dist`, which is also configurable through
    a `custom` tag. So, all our static content will reside in the `client`/`dist`
    folder:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，一旦插件安装完成，我们首先需要创建一个分发文件夹，默认情况下为`client`/`dist`，也可以通过`custom`标签进行配置。所以，所有的静态内容将存放在`client`/`dist`文件夹中：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then next we need to mention the S3 bucket name within the custom tag to which
    static files will be uploaded:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要在custom标签中提到S3桶的名称，静态文件将上传到该桶：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'So, ideally `serverless.yml` should look something like this, where we define
    the provider, add the plugin configuration for `serverless-finch`, and define
    the client details with the `custom` tag. The `indexDocument` parameter is for
    the index page and the `errorDocument` parameter is for the error page:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，理想情况下，`serverless.yml`应如下所示，在这里我们定义了提供者，添加了`serverless-finch`插件的配置，并通过`custom`标签定义了客户端详情。`indexDocument`参数用于索引页面，`errorDocument`参数用于错误页面：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, to deploy the content, we have run the following command and we should
    be able to see the location of the newly deployed website on the console output
    of the serverless application:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，要部署内容，我们需要运行以下命令，并应该能够在serverless应用的控制台输出中看到新部署网站的位置：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There are many more configuration parameters and features that are provided
    by this plugin. You can find them through at the link:  [https://github.com/fernando-mc/serverless-finch](https://github.com/fernando-mc/serverless-finch).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件还提供了许多其他的配置参数和功能。你可以通过以下链接找到它们：[https://github.com/fernando-mc/serverless-finch](https://github.com/fernando-mc/serverless-finch)。
- en: Warm-up
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 热身
- en: A cold start is one of the major issues with respect to serverless function.
    The warmer the functions are, the better performance we get. But how do we keep
    our functions warm all the time? The serverless framework provide a plugin to
    help us do that. The plugin's name is Serverless WarmUP Plugin. So, how does this
    plugin work?
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 冷启动是与无服务器函数相关的主要问题之一。函数越温暖，性能越好。但我们如何确保我们的函数始终保持热启动状态呢？Serverless 框架提供了一个插件来帮助我们做到这一点。该插件的名称是
    Serverless WarmUP Plugin。那么，这个插件是如何工作的呢？
- en: 'The plugin creates a scheduled event Lambda that invokes all the service Lambdas
    we select in the time interval. So this plugin will keep the function warm by
    forcing the underlying container''s to stay alive. To set up this plugin, we need
    to first install it:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 插件创建了一个调度事件 Lambda，该 Lambda 在指定的时间间隔内调用我们选择的所有服务 Lambdas。因此，该插件通过强制使底层容器保持活动状态来保持函数的热身。要设置此插件，我们首先需要安装它：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Then in `serverless.yml`, we can configure it by calling it under the plugins
    section. We need to mention which environment warm-up should be run, which can
    be single or multiple. Then in the custom section, we need to define the configuration
    for the warm Lambda function to run. It can be further configured and details
    of those configuration can be found at the link: [https://github.com/FidelLimited/serverless-plugin-warmup](https://github.com/FidelLimited/serverless-plugin-warmup).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 `serverless.yml` 中，我们可以通过在插件部分调用它来配置它。我们需要提到应该运行哪个环境的预热，可以是单个或多个。然后在自定义部分，我们需要定义要运行的预热
    Lambda 函数的配置。它可以进一步配置，有关这些配置的详细信息可以在链接找到：[https://github.com/FidelLimited/serverless-plugin-warmup](https://github.com/FidelLimited/serverless-plugin-warmup)。
- en: '[PRE15]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: These are a few add-ons for Lambda functions that can help us to make things
    easier to create and maintain serverless functions.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是一些 Lambda 函数的附加组件，可以帮助我们更轻松地创建和维护无服务器函数。
- en: Azure Functions add-ons
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure 函数的附加组件
- en: In DevOps, it is very important to make sure development is smoother and faster
    and that we deploy bug-free applications to production. It is possible if we can
    develop, debug, and test the application locally. But with respect to Azure functions,
    to test and debug the functions, we need to deploy it on the Azure Cloud each
    time. The good news is that, like AWS Lambda, Azure functions can be debugged
    and tested locally by means of the **Azure functions core tools **.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DevOps 中，确保开发更顺畅、更快速，并且将无错误的应用程序部署到生产环境非常重要。如果我们能够在本地开发、调试和测试应用程序，那将是可能的。但是就
    Azure 函数而言，为了测试和调试函数，我们需要每次将其部署到 Azure 云中。好消息是，像 AWS Lambda 一样，Azure 函数可以通过 **Azure
    函数核心工具** 在本地进行调试和测试。
- en: With Azure functions tools, we can create, develop, test, run, and debug the
    Azure functions locally. They can be installed on Windows, macOS, and Linux. 
    We can visit the GitHub link for how to set them up: [https://github.com/Azure/azure-functions-core-tools](https://github.com/Azure/azure-functions-core-tools)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Azure 函数工具，我们可以在本地创建、开发、测试、运行和调试 Azure 函数。它们可以安装在 Windows、macOS 和 Linux 上。我们可以访问
    GitHub 链接了解如何设置它们：[https://github.com/Azure/azure-functions-core-tools](https://github.com/Azure/azure-functions-core-tools)
- en: 'After, we have installed the tools, we need to first create the`create function`
    app. By default, this will also create a local Git repository that can skipped
    by passing a parameter, `-n`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完工具后，我们需要首先创建`create function`应用程序。默认情况下，这也会创建一个本地 Git 仓库，可以通过传递参数 `-n` 来跳过：
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The next step is to create the function by executing `func new`. We will be
    asked few options with respect to the type of function we want to create and what
    type of language we want choose for our function and then a function folder is
    created with three files, `function.json`, `index.js`, and `sample.dat`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是通过执行 `func new` 来创建函数。我们将被要求选择要创建的函数类型和我们为函数选择的语言类型，然后将创建一个包含三个文件 `function.json`、`index.js`
    和 `sample.dat` 的函数文件夹。
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'As we have the function baked in through a template, we can now invoke the
    function locally by `func start` and this command will start the function app
    locally and provide us with the API URL:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们通过模板将函数包含进来，现在我们可以通过 `func start` 来本地调用该函数，此命令将在本地启动函数应用程序，并为我们提供 API URL：
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'What the function does when invoked from `http` is to retrieve request data
    via the `req` parameter and look for the `name` parameter in the request body
    and, on successful execution, add some response text:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当从 `http` 调用该函数时，它的功能是通过 `req` 参数检索请求数据，并在请求体中查找 `name` 参数，成功执行后添加一些响应文本：
- en: '![](img/8a9432c0-91cc-4342-8e47-7199b52611b4.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8a9432c0-91cc-4342-8e47-7199b52611b4.png)'
- en: Google Functions add-ons
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 谷歌函数的附加组件
- en: When we decide to move toward a cloud infrastructure or decide to use Google
    Functions, then we start with a proof of concept or minimal viable product, to
    prove our application can perform better in the cloud and that we do not have
    to worry about infrastructure. Also, if the number of the functions is small at
    the the time of POC, it is easier to develop, test, and deploy them manually,
    but as they grow, it become quite difficult to manage development, testing and
    development. Integrating them together to work as an application is another challenge.
    So, for smoother development, Google also has introduced the Node.js emulator
    for Google cloud functions. Although currently it is released as the alpha phase,
    it is still good to iron out quite a number of the issues locally.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们决定迁移到云基础设施或决定使用 Google Functions 时，我们首先会进行概念验证或最小可行产品开发，以证明我们的应用程序在云环境中能够表现更好，并且我们不必担心基础设施问题。而且，如果在概念验证时功能的数量较少，手动开发、测试和部署它们会更容易，但随着功能的增多，管理开发、测试和部署会变得相当困难。将它们整合在一起，使其作为一个应用程序工作，还是一个挑战。因此，为了更顺利的开发，Google
    还推出了 Google Cloud Functions 的 Node.js 模拟器。虽然目前它还处于 alpha 阶段，但它仍然是本地解决许多问题的好方法。
- en: 'The Node.js emulator for Google Functions is distributed as an npm standard
    package, so it has to be installed through the `npm` command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Google Functions 的 Node.js 模拟器作为 npm 标准包分发，因此必须通过 `npm` 命令进行安装：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: After installation there are many commands that can be used for setting up local
    environments for testing and debugging the Google Functions. More details can
    be found at [https://cloud.google.com/functions/docs/emulator](https://cloud.google.com/functions/docs/emulator)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，有许多命令可以用于设置本地环境以测试和调试 Google Functions。更多细节可以参考 [https://cloud.google.com/functions/docs/emulator](https://cloud.google.com/functions/docs/emulator)。
- en: In the chapter, *DevOps with Google Functions*, we learned how to deploy using
    Google Cloud's out-of-the box tools, but they can also be deployed in the serverless
    framework, which also provides templates to start with.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，*使用 Google Functions 的 DevOps*，我们学习了如何使用 Google Cloud 的现成工具进行部署，但它们也可以在无服务器框架中进行部署，该框架也提供了可供使用的模板。
- en: 'To use the serverless framework, we need to first install the framework plugin.
    The name of the plugin is `serverless-google-cloudfunctions`. So, if we need to
    do a quick start with Google Functions , then we should start with the following
    command that will create a simple `helloworld` Google Function with the filenames
    as `index`, `serverless.yml`, and `package.json`. Currently the serverless framework
    supports just Node.js at runtime:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用无服务器框架，我们首先需要安装框架插件。插件的名称是 `serverless-google-cloudfunctions`。因此，如果我们需要快速开始使用
    Google Functions，我们应该通过以下命令开始，它将创建一个简单的 `helloworld` Google Function，文件名为 `index`、`serverless.yml`
    和 `package.json`。目前，服务器框架只支持 Node.js 运行时：
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In `serverless.yml`, we need to configure the Google project name and credentials.
    The credentials JSON file needs to be the absolute path. But for security reason,
    it should be kept somewhere really safe within the server path:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `serverless.yml` 中，我们需要配置 Google 项目名称和凭证。凭证 JSON 文件需要是绝对路径。但出于安全考虑，应该将其保存在服务器路径中的某个非常安全的位置：
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Then deploy it on to the google cloud through Serverless command
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 然后通过 Serverless 命令将其部署到 Google Cloud。
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Once deployed successfully, we should get the API link in the deployment output
    and which can we used and in our we can browse it through the browser and the
    screen should display
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦部署成功，我们应该在部署输出中获得 API 链接，并且可以在浏览器中访问它，屏幕应该显示：
- en: '**Hello World!**'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**你好，世界！**'
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at some popular use cases for serverless and also
    some essentials that can improve the development and deployment. In the next and
    the final chapter, we will see how serverless will shape the DevOps and how DevOps
    has to change its track with the adoption of serverless.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了一些流行的无服务器使用案例，并介绍了一些能够改善开发和部署的基本要素。在下一章，也是最后一章中，我们将看到无服务器如何塑造 DevOps，以及
    DevOps 在采用无服务器架构后必须做出的变化。
