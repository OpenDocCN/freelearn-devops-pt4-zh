- en: DevOps Trends with Serverless Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器函数的DevOps趋势
- en: Finally, our journey is coming to an end. Throughout this book, we have looked
    at various different serverless providers, and various ways to build, deploy,
    monitor and log the serverless functions and with different service providers.
    So, how will serverless change the course of DevOps? As we know, with IaaS and
    PaaS, we need to build the infrastructure, always monitor it, and scale it. We
    need to use configuration management tools to upgrade the servers from time to
    time, monitor, log and manage manual scaling and, when you consider serverless, all
    this does away. So in what direction does DevOps go, when we decide to use serverless ?
    Well there was a perception that DevOps won't be required if we adopt serverless,
    but that is not completely true which we have already learned through our chapters,
    that DevOps does not completely vanish. We still need to version the code, package
    it, deploy it, and monitor and log it too, but it is still easier then IaaS and
    PaaS.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我们的旅程即将结束。在本书中，我们回顾了不同的无服务器提供商，以及多种构建、部署、监控和记录无服务器函数的方法，并且涉及了不同的服务提供商。那么，无服务器将如何改变DevOps的方向呢？正如我们所知，使用IaaS和PaaS时，我们需要构建基础设施，始终对其进行监控并进行扩展。我们需要使用配置管理工具不时地升级服务器，监控、记录并管理手动扩展，而当考虑到无服务器时，所有这些都不再需要。那么，当我们决定使用无服务器时，DevOps将走向何方呢？曾经有一种看法认为如果我们采用无服务器，DevOps就不再需要了，但这并不完全正确，正如我们通过各章所学到的，DevOps并没有完全消失。我们仍然需要对代码进行版本控制、打包、部署，并进行监控和记录，但比IaaS和PaaS要更为简单。
- en: 'This final chapter will cover two minor but very important topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将讨论两个小但非常重要的主题：
- en: The impact of serverless on Ops
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无服务器对操作的影响
- en: The direction of DevOps with serverless
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无服务器的DevOps方向
- en: The impact of Serverless on Ops
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无服务器对操作的影响
- en: DevOps, as we know, is actually a handshake between the developer and operations
    team to work together to build and productionize an application faster. DevOps
    has become very powerful in recent years, and its value has grown with acceleration
    and better enabling of the deployment of an application, and it has also contributed
    to the continuous improvement of the development and options process.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所知，DevOps实际上是开发人员和运维团队之间的合作，共同努力以更快地构建和生产应用程序。近年来，DevOps变得非常强大，其价值随着加速和更好地支持应用程序部署而不断增长，并且它还促进了开发和选项过程的持续改进。
- en: But developers are not really in favor of Ops, because they always have to deal
    with Ops for their code to function and perform as per the business requirement
    on the production. The whole idea of Operations was to provision the infrastructure,
    which is similar across the different environments (development, QA, pre-production
    and production), so that it makes life easier for the developer so they  can just
    worry about building the application.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 但开发人员其实并不太喜欢Ops，因为他们总是不得不处理Ops，以确保他们的代码在生产环境中按照业务需求正常运行和执行。操作的核心理念是提供基础设施，这在不同的环境（开发、QA、预生产和生产）中是相似的，从而让开发人员的工作更轻松，他们只需要专注于构建应用程序。
- en: The job of the operator until now has been setting up infrastructure, which
    was eventually enhanced to configure the infrastructure through scripting. The
    operator has to manage the security, monitor, log, and many other daily routine
    jobs, so it takes lots of work, which pushed us toward Serverless computing. So
    the developer got back to their development, creating new functions and features,
    and worrying less about whether their code would work on the provided infrastructure,
    or whether they would have code application scaling within their code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 直到现在，操作员的工作一直是设置基础设施，最终通过脚本配置基础设施。操作员必须管理安全性、监控、记录以及许多其他日常工作，因此这需要大量工作，这也是推动我们向无服务器计算转型的原因。所以，开发人员重新专注于开发，创建新的功能和特性，减少了他们对代码是否能在提供的基础设施上运行，或是否会在代码中出现应用扩展问题的担忧。
- en: So, basically, serverless was technically un-ops-ing the developers, so the
    developer and the operations team could now be more focused on their task instead
    of spending time in troubleshooting the infra issues. So, how did the concept
    of serverless arrive? There are lots of components and reasons added to the birth
    of serverless, but one of the main components are popularisation of containers.
    Container did exist earlier but with docker and kubetenes it become much popular.
    Conceptually, serverless basically is, breaking the microservices into smaller
    chunks which can be called as nanoservices. So these nanoservices can fit perfectly
    to function within the containers so as to perform nano-function, and we also
    know that with Kubernetes, or other services like it, the management of containers
    has become quite easy. So this could be one of the reason why popularity of serverless
    is growing.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，无服务器架构从技术上来说是让开发者摆脱了运维的负担，这样开发团队和运维团队可以更加专注于自己的任务，而不必浪费时间处理基础设施问题。那么，无服务器架构是如何产生的呢？无服务器架构的诞生有很多因素和原因，其中一个关键因素就是容器的普及。容器早就存在，但随着
    Docker 和 Kubernetes 的出现，容器变得更加流行。从概念上讲，无服务器架构基本上是将微服务拆分成更小的部分，这些部分可以被称为纳米服务（nanoservices）。这些纳米服务能够完美适应容器，从而实现纳米级的功能。同时，我们也知道，借助
    Kubernetes 等服务，容器的管理变得非常简便。这可能是无服务器架构受欢迎的原因之一。
- en: With the entry to the cloud provider, infrastructure has become stable and also
    cheaper, but with respect to virtual machines, we still have to provision and
    configure them. But with the introduction of serverless by cloud providers, ops
    teams do not have to worry about provisioning and configuring. So, virtually,
    ops team will vanish, but not fully. Instead of provisioning and configuring the
    infrastructure, they can fully focus on Monitoring, Logging, Orchestration of
    service deployments and management, Managing Security and much more. Though VM/container
    management is removed from the picture. The monitor of the performance, monitor
    security, and so on, in short they will have to upgrade their skills to align
    with cloud services.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 随着云服务提供商的引入，基础设施变得更加稳定且成本更低，但对于虚拟机，我们仍然需要进行配置和管理。然而，随着云服务商引入无服务器架构，运维团队不再需要担心配置和管理。实际上，运维团队的角色将逐渐消失，但并非完全消失。他们将不再负责基础设施的配置和管理，而是能全身心投入到监控、日志管理、服务部署和管理的编排、安全管理等方面。虽然虚拟机/容器的管理已不再是重点，但性能监控、安全监控等任务仍然存在，简而言之，运维团队需要提升技能，以适应云服务的需求。
- en: The direction of DevOps with serverless
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 在无服务器架构中的发展方向
- en: When there was no DevOps, development and operation worked in silos, leading
    to poor teamwork and a lack of transparency. Operations processes were painstakingly
    slow, with no control over environment consolidation, and with the DevOps team
    consolidated into one single team working together in the application lifecycle
    and automation through the technology stack and tooling. DevOps became the backbone
    of the organization and also an integral part of time to market.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有 DevOps 时，开发和运维是各自独立工作的，这导致了团队协作不畅和缺乏透明度。运维流程极其缓慢，且无法控制环境的整合。随着 DevOps 团队的整合，所有成员统一协作，共同参与应用生命周期的管理，通过技术栈和工具实现自动化。DevOps
    成为组织的核心支柱，也成为市场响应速度的重要组成部分。
- en: But DevOps has its own challenges to implement. First and foremost, as DevOps
    is a vast area of expertise, it is very difficult to find  or experts in every
    aspect of DevOps. Because of this, organizations find it difficult to adopt DevOps
    easily, and it also leads to confusion in proper implementation.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，DevOps 在实施过程中也面临自身的挑战。首先，DevOps 是一个庞大的专业领域，很难找到在每个方面都具备专长的专家。因此，组织在实施 DevOps
    时常感到困难，也容易导致实施过程中的困惑。
- en: Tool selection for DevOps is another challenge on it own. Continuous deployment,
    continuous testing, and collaborative reporting makes DevOps successful. But many
    organizations fumble tool selection, and that leads to wrong tool selection which
    eventually adds to failure.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 的工具选择是另一个独立的挑战。持续部署、持续测试和协作报告是 DevOps 成功的关键。然而，许多组织在工具选择上犯错，错误的工具选择最终会导致失败。
- en: Many managers doubt that DevOps can be successful. They are worried about whether
    DevOps  will deliver with the required transparency to the customer and organizations.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 很多管理者对 DevOps 能否成功表示怀疑。他们担心 DevOps 是否能够为客户和组织提供所需的透明度。
- en: The bigger the company, the harder it is to work collaboratively, as the workers
    are different and teams are independent, and this creates barriers and walls.
    But it is imperative to make the team understand how to bring down these walls,
    and collaborate.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 公司越大，协作越困难，因为员工各不相同，团队也相对独立，这就造成了壁垒。但使团队理解如何打破这些壁垒、促进协作是至关重要的。
- en: DevOps team mostly spend their time supporting development teams with builds,
    setting up and maintaining the development environment, and troubleshooting deployment
    issues,  but they end up giving more attention to operations side.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 团队主要花时间为开发团队提供支持，包括构建、设置和维护开发环境，以及解决部署问题，但他们最终会更多关注运营方面的工作。
- en: But serverless has helped to overcome these challenges. It has freed up space
    for the operations team to spend their time wisely and add improvements to the
    existing ecosystem. Business agility is possible with serverless computing because
    you can create an environment where there is a continuous improvement of development.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 但无服务器计算帮助克服了这些挑战。它为运营团队腾出了空间，使其能够更有效地分配时间，并为现有生态系统添加改进。无服务器计算使得商业敏捷性成为可能，因为你可以创建一个持续改进开发的环境。
- en: With no need to worry about infrastructure, the DevOps teams can improve on
    other aspects of development, such as automating deployment, adding process to
    code versioning, automating deployment metrics, adding more value to applications
    (such as introducing different dashboards),  and application performance management.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 不再需要担心基础设施，DevOps 团队可以在开发的其他方面进行改进，比如自动化部署、添加代码版本管理流程、自动化部署度量、为应用程序添加更多价值（例如引入不同的仪表盘），以及应用程序性能管理。
- en: As serverless is still in its growth stage, there is a lot to achieve in terms
    of language or runtime support, vendor locking, security, and also, currently,
    not all the applications are serverless compatible. Also, there are lots of open
    source serverless architectures coming onto market such as OpenWhisk, OpenFaaS,
    FN, Kubeless and Iron.io ([https://www.iron.io/](https://www.iron.io/)). There
    is a long journey toward  maturity in terms of serverless, and also with DevOps
    tools around serverless.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于无服务器计算仍处于成长阶段，在语言或运行时支持、供应商锁定、安全性方面仍有许多待解决的问题，并且目前并非所有应用程序都支持无服务器架构。此外，市场上还涌现了许多开源无服务器架构，如
    OpenWhisk、OpenFaaS、FN、Kubeless 和 Iron.io ([https://www.iron.io/](https://www.iron.io/))。在无服务器计算及其周围的
    DevOps 工具领域，成熟的道路仍然漫长。
- en: Lots of banking customers and government organizations are wary of cloud services,
    due to security reasons, and also due to their slow adoption of cloud technologies.
    But, technology such as Kubernetes is gaining lots of popularity and its performance,
    functionality, and support with respect to forums, is improving as days pass.
    Therefore, government organizations and banking domain customers might lean more
    toward the same, as microservices and Kubertenes can be combined together to perform
    as serverless functions. So DevOps would surely play an important role here.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于安全原因以及云技术 adoption 缓慢，很多银行客户和政府组织对云服务持谨慎态度。但像 Kubernetes 这样的技术正逐渐获得大量关注，它的性能、功能以及相关论坛的支持随着时间的推移不断提升。因此，政府组织和银行领域的客户可能会更多地倾向于采用
    Kubernetes，因为微服务与 Kubernetes 可以结合起来，作为无服务器功能进行使用。所以 DevOps 在这里肯定会发挥重要作用。
- en: So there would be a requirement to set up technologies such as Kubernetes on-premises,
    provision and configure servers, upgrade infrastructure, monitor and log, and
    add infrastructure when needed for support scaling.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，可能需要在本地部署 Kubernetes 等技术，配置和设置服务器，升级基础设施，进行监控和日志记录，并根据需要增加基础设施以支持扩展。
- en: But, if some companies choose to use cloud providers for their serverless needs,
    then the track for the DevOps would change. With respect to development, the 
    cloud operation engineer and developer roles would fuse into one, as there would
    be no underlying infrastructure to take care of. But, we would need the services
    of continuous integration, continuous deployment, monitoring, and logging.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果某些公司选择使用云服务提供商来满足其无服务器需求，那么 DevOps 的工作轨迹将发生变化。在开发方面，云操作工程师和开发人员的角色将融合为一体，因为将不再需要处理底层基础设施。但我们仍然需要持续集成、持续部署、监控和日志记录等服务。
- en: DevOps will very much be needed to set up deployment pipelines, automated metrics
    notification, automate logging, and monitoring. But when everything is automated
    and streamlined, then DevOps' workloads will decrease, which will eventually be
    the same for any type of infrastructure.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps将在部署管道、自动化指标通知、自动化日志记录和监控的设置中非常重要。但当一切都被自动化并流线化后，DevOps的工作量将会减少，这对于任何类型的基础设施来说最终都是一样的。
- en: But job responsibility will surely change, and lots of roles will change. For
    instance, we would need fewer network and infrastructure engineers. So, before
    moving to serverless, it is recommended that we evaluate the IT operations. If
    we don't, then adoption of serverless architecture might slow things down and 
    become a bottleneck for operations.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 但工作职责肯定会发生变化，许多角色也将改变。例如，我们将需要更少的网络和基础设施工程师。因此，在迁移到无服务器架构之前，建议我们评估IT运维。如果不这样做，采用无服务器架构可能会拖慢进程，甚至成为运营的瓶颈。
- en: So, to conclude, as serverless is still improving, it is difficult to speculate
    how DevOps will play its role in terms of serverless adoption. The direction might
    change, but the journey will still continue.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，总结来说，由于无服务器架构仍在不断完善，我们很难预测DevOps在无服务器采纳方面将如何发挥作用。方向可能会改变，但旅程仍将继续。
- en: Summary
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The journey has come to an end, but only for this book. With respect to serverless,
    the journey has just begun and, through this journey of maturity, we will see
    lots of improvements in terms of service, and also in terms of technology and
    new vendors. With that, we will see lots of maturity with DevOps tools and processes
    for serverless applications. So, here, we finish this book, with the hope of the
    growth of serverless and DevOps alongside serverless.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书的旅程已经结束，但这只是对本书而言。就无服务器而言，这个旅程才刚刚开始，随着这个成熟过程的推进，我们将看到在服务、技术以及新供应商方面的许多改进。与此同时，我们还将看到无服务器应用程序的DevOps工具和流程的成熟。因此，在这里，我们结束了本书，期待无服务器和DevOps与无服务器一同成长。
