- en: DevOps Trends with Serverless Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, our journey is coming to an end. Throughout this book, we have looked
    at various different serverless providers, and various ways to build, deploy,
    monitor and log the serverless functions and with different service providers.
    So, how will serverless change the course of DevOps? As we know, with IaaS and
    PaaS, we need to build the infrastructure, always monitor it, and scale it. We
    need to use configuration management tools to upgrade the servers from time to
    time, monitor, log and manage manual scaling and, when you consider serverless, all
    this does away. So in what direction does DevOps go, when we decide to use serverless ?
    Well there was a perception that DevOps won't be required if we adopt serverless,
    but that is not completely true which we have already learned through our chapters,
    that DevOps does not completely vanish. We still need to version the code, package
    it, deploy it, and monitor and log it too, but it is still easier then IaaS and
    PaaS.
  prefs: []
  type: TYPE_NORMAL
- en: 'This final chapter will cover two minor but very important topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The impact of serverless on Ops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The direction of DevOps with serverless
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The impact of Serverless on Ops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DevOps, as we know, is actually a handshake between the developer and operations
    team to work together to build and productionize an application faster. DevOps
    has become very powerful in recent years, and its value has grown with acceleration
    and better enabling of the deployment of an application, and it has also contributed
    to the continuous improvement of the development and options process.
  prefs: []
  type: TYPE_NORMAL
- en: But developers are not really in favor of Ops, because they always have to deal
    with Ops for their code to function and perform as per the business requirement
    on the production. The whole idea of Operations was to provision the infrastructure,
    which is similar across the different environments (development, QA, pre-production
    and production), so that it makes life easier for the developer so they  can just
    worry about building the application.
  prefs: []
  type: TYPE_NORMAL
- en: The job of the operator until now has been setting up infrastructure, which
    was eventually enhanced to configure the infrastructure through scripting. The
    operator has to manage the security, monitor, log, and many other daily routine
    jobs, so it takes lots of work, which pushed us toward Serverless computing. So
    the developer got back to their development, creating new functions and features,
    and worrying less about whether their code would work on the provided infrastructure,
    or whether they would have code application scaling within their code.
  prefs: []
  type: TYPE_NORMAL
- en: So, basically, serverless was technically un-ops-ing the developers, so the
    developer and the operations team could now be more focused on their task instead
    of spending time in troubleshooting the infra issues. So, how did the concept
    of serverless arrive? There are lots of components and reasons added to the birth
    of serverless, but one of the main components are popularisation of containers.
    Container did exist earlier but with docker and kubetenes it become much popular.
    Conceptually, serverless basically is, breaking the microservices into smaller
    chunks which can be called as nanoservices. So these nanoservices can fit perfectly
    to function within the containers so as to perform nano-function, and we also
    know that with Kubernetes, or other services like it, the management of containers
    has become quite easy. So this could be one of the reason why popularity of serverless
    is growing.
  prefs: []
  type: TYPE_NORMAL
- en: With the entry to the cloud provider, infrastructure has become stable and also
    cheaper, but with respect to virtual machines, we still have to provision and
    configure them. But with the introduction of serverless by cloud providers, ops
    teams do not have to worry about provisioning and configuring. So, virtually,
    ops team will vanish, but not fully. Instead of provisioning and configuring the
    infrastructure, they can fully focus on Monitoring, Logging, Orchestration of
    service deployments and management, Managing Security and much more. Though VM/container
    management is removed from the picture. The monitor of the performance, monitor
    security, and so on, in short they will have to upgrade their skills to align
    with cloud services.
  prefs: []
  type: TYPE_NORMAL
- en: The direction of DevOps with serverless
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When there was no DevOps, development and operation worked in silos, leading
    to poor teamwork and a lack of transparency. Operations processes were painstakingly
    slow, with no control over environment consolidation, and with the DevOps team
    consolidated into one single team working together in the application lifecycle
    and automation through the technology stack and tooling. DevOps became the backbone
    of the organization and also an integral part of time to market.
  prefs: []
  type: TYPE_NORMAL
- en: But DevOps has its own challenges to implement. First and foremost, as DevOps
    is a vast area of expertise, it is very difficult to find  or experts in every
    aspect of DevOps. Because of this, organizations find it difficult to adopt DevOps
    easily, and it also leads to confusion in proper implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Tool selection for DevOps is another challenge on it own. Continuous deployment,
    continuous testing, and collaborative reporting makes DevOps successful. But many
    organizations fumble tool selection, and that leads to wrong tool selection which
    eventually adds to failure.
  prefs: []
  type: TYPE_NORMAL
- en: Many managers doubt that DevOps can be successful. They are worried about whether
    DevOps  will deliver with the required transparency to the customer and organizations.
  prefs: []
  type: TYPE_NORMAL
- en: The bigger the company, the harder it is to work collaboratively, as the workers
    are different and teams are independent, and this creates barriers and walls.
    But it is imperative to make the team understand how to bring down these walls,
    and collaborate.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps team mostly spend their time supporting development teams with builds,
    setting up and maintaining the development environment, and troubleshooting deployment
    issues,  but they end up giving more attention to operations side.
  prefs: []
  type: TYPE_NORMAL
- en: But serverless has helped to overcome these challenges. It has freed up space
    for the operations team to spend their time wisely and add improvements to the
    existing ecosystem. Business agility is possible with serverless computing because
    you can create an environment where there is a continuous improvement of development.
  prefs: []
  type: TYPE_NORMAL
- en: With no need to worry about infrastructure, the DevOps teams can improve on
    other aspects of development, such as automating deployment, adding process to
    code versioning, automating deployment metrics, adding more value to applications
    (such as introducing different dashboards),  and application performance management.
  prefs: []
  type: TYPE_NORMAL
- en: As serverless is still in its growth stage, there is a lot to achieve in terms
    of language or runtime support, vendor locking, security, and also, currently,
    not all the applications are serverless compatible. Also, there are lots of open
    source serverless architectures coming onto market such as OpenWhisk, OpenFaaS,
    FN, Kubeless and Iron.io ([https://www.iron.io/](https://www.iron.io/)). There
    is a long journey toward  maturity in terms of serverless, and also with DevOps
    tools around serverless.
  prefs: []
  type: TYPE_NORMAL
- en: Lots of banking customers and government organizations are wary of cloud services,
    due to security reasons, and also due to their slow adoption of cloud technologies.
    But, technology such as Kubernetes is gaining lots of popularity and its performance,
    functionality, and support with respect to forums, is improving as days pass.
    Therefore, government organizations and banking domain customers might lean more
    toward the same, as microservices and Kubertenes can be combined together to perform
    as serverless functions. So DevOps would surely play an important role here.
  prefs: []
  type: TYPE_NORMAL
- en: So there would be a requirement to set up technologies such as Kubernetes on-premises,
    provision and configure servers, upgrade infrastructure, monitor and log, and
    add infrastructure when needed for support scaling.
  prefs: []
  type: TYPE_NORMAL
- en: But, if some companies choose to use cloud providers for their serverless needs,
    then the track for the DevOps would change. With respect to development, the 
    cloud operation engineer and developer roles would fuse into one, as there would
    be no underlying infrastructure to take care of. But, we would need the services
    of continuous integration, continuous deployment, monitoring, and logging.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps will very much be needed to set up deployment pipelines, automated metrics
    notification, automate logging, and monitoring. But when everything is automated
    and streamlined, then DevOps' workloads will decrease, which will eventually be
    the same for any type of infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: But job responsibility will surely change, and lots of roles will change. For
    instance, we would need fewer network and infrastructure engineers. So, before
    moving to serverless, it is recommended that we evaluate the IT operations. If
    we don't, then adoption of serverless architecture might slow things down and 
    become a bottleneck for operations.
  prefs: []
  type: TYPE_NORMAL
- en: So, to conclude, as serverless is still improving, it is difficult to speculate
    how DevOps will play its role in terms of serverless adoption. The direction might
    change, but the journey will still continue.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The journey has come to an end, but only for this book. With respect to serverless,
    the journey has just begun and, through this journey of maturity, we will see
    lots of improvements in terms of service, and also in terms of technology and
    new vendors. With that, we will see lots of maturity with DevOps tools and processes
    for serverless applications. So, here, we finish this book, with the hope of the
    growth of serverless and DevOps alongside serverless.
  prefs: []
  type: TYPE_NORMAL
