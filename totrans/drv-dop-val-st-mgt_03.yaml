- en: '[*Chapter 2*](B17087_02_Final_PD_epub.xhtml#_idTextAnchor062): Building On
    a Lean-Agile Foundation'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The IT industry undergoes constant evolution to deliver customer-centric value
    more quickly and efficiently and with higher quality. Some improvement concepts,
    such as Agile and DevOps, came directly from the software industry. However, Lean,
    Systems Thinking, and Value Stream Management all have their origins outside the
    software industry. Still, all these practices are now mainstream in the software
    and digital products and services delivery industries.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Though this book is about applying VSM and DevOps practices to accelerate digital
    value delivery, it's essential that each organization establishes a base of foundational
    practices. Specifically, IT organizations need to build their VSM and DevOps capabilities
    upon a solid value-centric foundation of Agile, Lean, and Systems Thinking practices.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will help Lean-Agile practitioners understand how to build this
    integrated foundation. We'll explore Systems Thinking in the next chapter. For
    now, in this chapter, you will learn how Agile and Lean practices work in concert
    to deliver customer-centric value.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Instilling the values and principles of Agile
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gaining stakeholder support
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing useful metrics
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving IT flows through Lean Thinking
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eliminating waste in software development
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the Lean-Agile foundation
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accelerating flows across IT value streams
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instilling the values and principles of Agile
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned that the Manifesto for Agile Software Development
    (also known as the Agile Manifesto, [https://agilemanifesto.org/](https://agilemanifesto.org/))
    laid out 4 values and 12 principles for improving software delivery. If you are
    new to Agile, you may not know that Agile is not a specific or single methodology.
    There is no guidance in the Agile Manifesto on how to instill Agile's values and
    principles, only a description of desirable outcomes or objectives.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Another way to think about the Agile Manifesto's values and principles is the
    notion of being Agile and not doing agile. In other words, while there are many
    things we can do to improve software development agility, the Agile Manifesto
    does not provide prescriptive guidance on how to do Agile.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Many methodologies claim to be Agile. For those who need a primer, I introduced
    Agile's history and the industry-leading Agile and Lean-Agile methodologies in
    my previous book, *Scaling Scrum Across Modern Enterprises*. At the time of writing
    this book, the leading Agile methodology at the small team level is Scrum – including
    several hybrid versions that enable multiple teams to work together in collaboration.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, the leading multi-team Lean-Agile methodology is **Scaled Agile
    Inc.'s** **Scaled-Agile Framework®** (**SAFe®**). Another Lean-Agile methodology
    that's gathering traction is **Disciplined Agile**, offered by the **Project Management
    Institute** (**PMI**). Later in this chapter, in the *Creating the Lean-Agile
    foundation* section, you will learn how Lean-Agile practices extend the basic
    Agile practices of iterative and incremental development.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，领先的多团队精益敏捷方法论是**Scaled Agile Inc.**的**Scaled-Agile Framework®**（**SAFe®**）。另一种正在获得关注的精益敏捷方法论是由**项目管理协会**（**PMI**）提供的**纪律化敏捷**。在本章稍后“*创建精益敏捷基础*”部分中，您将学习精益敏捷实践如何扩展迭代和增量开发的基本敏捷实践。
- en: For now, it's essential to understand that VSM and DevOps build on the concepts
    of Agile and Lean. Therefore, the organization must establish a base of Agile
    and Lean practices and allow the culture to evolve around these practices, before
    installing the process integration and automation capabilities that VSM and DevOps
    employ.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，理解VSM和DevOps建立在敏捷（Agile）和精益（Lean）理念之上是至关重要的。因此，组织必须先建立敏捷和精益实践的基础，并让文化围绕这些实践演化，然后才能安装VSM和DevOps所采用的流程集成和自动化能力。
- en: Integrating and automating flawed or poorly implemented processes only accelerates
    the undesirable outcomes of flawed processes. Undesirable outcomes include building
    products with features and functions that customers don't want, delivering inferior
    quality products, and delivering products with bugs and defects. Integration and
    automation won't fix those types of problems without reengineering the underlying
    development and operations processes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 集成和自动化有缺陷或实施不当的流程只会加速不良流程的负面结果。不良结果包括构建客户不需要的功能和特性的产品，交付质量较差的产品，以及交付存在bug和缺陷的产品。没有对基础开发和运营流程进行重新设计，集成和自动化无法解决这些问题。
- en: Both Agile and Lean-Agile methodologies help organizations instill Agile's values
    and principles through the practices they implement. However, the scale and the
    level of sponsorship drive most decisions on which Agile methodology is the most
    appropriate and supports the needs of a software development team or program.
    We'll take a moment to quickly review the leading Scrum and Lean-Agile methodologies
    in the next section.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷和精益敏捷方法论帮助组织通过它们所实施的实践来灌输敏捷的价值观和原则。然而，规模和支持的程度驱动了大多数关于哪种敏捷方法最合适并且支持软件开发团队或项目需求的决策。我们将在接下来的部分简要回顾领先的Scrum和精益敏捷方法论。
- en: Leading Scrum and Lean-Agile methodologies
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 领先的Scrum和精益敏捷方法论
- en: There's nothing that says an organization can't figure out on their own how
    to become Agile and Lean in their operations. On the other hand, why start from
    scratch when there are proven methodologies to help guide its efforts? The question
    then is, what methodologies and practices are most appropriate to the organization?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 没有什么规定组织不能自己弄清楚如何在其运营中变得更加敏捷和精益。另一方面，既然有经过验证的方法论可以帮助指导其努力，为什么要从头开始呢？问题是，哪些方法论和实践最适合该组织？
- en: 'My previous book, *Scaling Scrum Across the Modern Enterprise* (Rupp, 2020),
    with Packt Publishing, presents detailed descriptions of many historical and currently
    leading Lean-Agile practices. Rather than repeating that information, this section
    will provide a short instruction to the current industry-leading Scrum and Lean-Agile
    methodologies and frameworks:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前的书籍，*在现代企业中推广Scrum*（Rupp，2020），由Packt出版社出版，详细描述了许多历史上以及目前领先的精益敏捷实践。与其重复那些信息，本节将简要介绍当前行业领先的Scrum和精益敏捷方法论和框架：
- en: '**Scrum**: Developed in the 1990s, Ken Schwaber and Jeff Sutherland formalized
    their **Scrum Framework** as a **Scrum Guide** in 2010\. Scrum implements a framework
    based on empiricism – a theory that all knowledge comes from experience derived
    from observations using our senses (that is, sight, hearing, touch, taste, smell,
    spatial, and so on). *Empiricists* value evidenced-based knowledge derived through
    experience, observation, and testing hypotheses through experimentation (that
    is, *the scientific method*).'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Scrum**：Scrum于1990年代由Ken Schwaber和Jeff Sutherland开发，并在2010年将其**Scrum框架**正式化为**Scrum指南**。Scrum实施了一个基于经验主义的框架——经验主义是一种理论，认为所有知识都来自通过感官观察获得的经验（即视力、听力、触觉、味觉、嗅觉、空间感等）。*经验主义者*重视通过经验、观察和实验假设测试（即*科学方法*）得出的基于证据的知识。'
- en: Schwaber and Sutherland continue to update the Scrum Guide, with the most recent
    version being released in November 2020\. Their latest version declares that the
    foundations of Scrum also include Lean concepts. However, they have not made this
    claim in their preceding versions of the Scrum Guide. And their discussion of
    Lean in the latest Scrum Guide is limited to the statement that *Lean Thinking
    reduces waste and focuses on the essentials*.
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Schwaber和Sutherland继续更新Scrum指南，最近的版本在2020年11月发布。他们的最新版本宣称Scrum的基础也包括精益概念。然而，他们并没有在之前的版本中提出这一主张，而他们在最新的Scrum指南中的精益讨论仅限于*精益思维减少浪费，聚焦于核心要素*的声明。
- en: In a nutshell, the Scrum Framework implements iterative **Sprints** as a container
    to implement other practices and activities, all executed with agility, to deliver
    incremental value over short but frequent intervals. The container notion is essential
    as the IT industry employs countless technologies, methods, tools, and techniques.
    It makes no sense for a single Agile methodology to try to force a particular
    development strategy. Instead, the Scrum Framework guides the team's use of their
    preferred methods and tools in an Agile manner to deliver incremental value across
    each Sprint.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 总的来说，Scrum框架实现了迭代式**冲刺**，作为一个容器来实施其他实践和活动，所有这些都以敏捷的方式执行，在短而频繁的周期内交付增量价值。容器的概念至关重要，因为IT行业使用着无数的技术、方法、工具和技巧。让单一的敏捷方法强行采用某个特定的开发策略是没有意义的。相反，Scrum框架引导团队以敏捷的方式使用他们偏好的方法和工具，在每个冲刺中交付增量价值。
- en: '**Scrum-of-Scrums**: The original scaling extension to Scrum, implemented as
    a team-of-teams structure, applies Scrum practices across multiple teams working
    in collaboration. The Scrum-of-Scrums model is generalized to coordinate small
    teams'' efforts beyond the IT function, with all the teams cooperating to deliver
    the same product.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Scrum-of-Scrums**：最初的Scrum扩展，通过团队间合作的结构实现Scrum实践，应用于多个团队之间的协作。Scrum-of-Scrums模型被广泛应用于协调小型团队的工作，超越了IT职能，所有团队共同协作以交付相同的产品。'
- en: '**Scrum at Scale**: Jeff Sutherland''s extension to the Scrum Guide scales
    the basic Scrum-of-Scrums concepts enterprise-wide and across business domains
    with **minimum viable bureaucracy** (**MVB**) via scale-free architectures.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大规模Scrum**：Jeff Sutherland对Scrum指南的扩展将基础的Scrum-of-Scrums概念扩展到整个企业和各个业务领域，并通过**最小可行的官僚体制**（**MVB**）以及无规模限制的架构进行扩展。'
- en: '**The Nexus Framework**: Ken Schwaber''s (Scrum.org) extension to the Scrum
    Guide implements **Network Integration Teams** (**NITs**) to manage cross-team
    dependencies, as well as integration and synchronization issues, on multi-team
    software product development efforts.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Nexus框架**：Ken Schwaber（Scrum.org）对Scrum指南的扩展，通过实施**网络集成团队**（**NITs**）来管理跨团队的依赖关系以及集成和同步问题，应用于多团队的软件产品开发工作。'
- en: '**Large-Scale Scrum** (**LeSS**): This scaled Scrum approach, from Craig Larman
    and Bas Vodde, includes two Scrum scaling frameworks that help coordinate multiple
    teams'' activities. The LeSS Framework coordinates multiple Scrum teams around
    *features*, while the LeSS Huge Framework coordinates the activities around *requirements
    areas*. Both frameworks support multi-team collaborations to develop large and
    complex software-enabled products.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大规模Scrum**（**LeSS**）：这一规模化Scrum方法由Craig Larman和Bas Vodde提出，包含两种Scrum扩展框架，帮助协调多个团队的活动。LeSS框架围绕*功能*协调多个Scrum团队，而LeSS
    Huge框架则围绕*需求领域*协调活动。这两个框架支持多团队协作，开发大型且复杂的软件产品。'
- en: '**Disciplined Agile** (**DA**): This is a Lean-Agile approach to development
    that provides six product development life cycles, numerous process guides, and
    hundreds of potentially useful techniques. The DA approach allows teams to choose
    their preferred *way of working* to support their unique business and organizational
    needs and situations. Initially developed by Scott Ambler and Mark Lines, the
    **Project Management Institute** (**PMI**) acquired their firm in 2019 plus **FLow
    for Enterprise Transformation** (**FLEX**) from **Net Objectives**. Flex integrates
    with DA to implement Lean and Systems Thinking to improve organizational business
    agility.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有纪律的敏捷**（**DA**）：这是一种精益敏捷的开发方法，提供了六种产品开发生命周期、众多的流程指南以及成百上千种潜在的有用技术。DA方法允许团队根据他们独特的业务和组织需求与情况选择自己偏好的*工作方式*。最初由Scott
    Ambler和Mark Lines开发，**项目管理协会**（**PMI**）在2019年收购了他们的公司，同时收购了**企业转型流**（**FLEX**）以及**Net
    Objectives**的相关内容。FLEX与DA结合，运用精益和系统思维，提升组织的商业敏捷性。'
- en: '**Scaled Agile Framework®** (**SAFe®**): With four configurations, SAFe is
    a Lean-Agile approach for big organizations working on large-scale product development
    efforts. SAFe helps large organizations leverage their economies of scale to provide
    greater efficiencies while incorporating Lean-Agile practices to enable business
    agility at enterprise scale. The four SAFe configurations are as follows:'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Scaled Agile Framework®**（**SAFe®**）：SAFe有四种配置，是一种适用于大规模组织的精益敏捷方法，专注于大型产品开发。SAFe帮助大型组织利用规模经济提供更高的效率，同时融入精益敏捷实践，促进企业规模的业务敏捷性。SAFe的四种配置如下：'
- en: '**Essential SAFe®**: This is the foundational multi-team Lean-Agile scaling
    model, built around a team-of-teams concept called Agile Release Teams (ARTs).
    The size of each ART typically ranges between 50 and 125 people, constrained by
    Dunbar''s number and derived from cognitive limitations regarding the number of
    stable relationships humans can actively maintain.'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Essential SAFe®**：这是一个基础的多团队精益敏捷扩展模型，围绕一个名为敏捷发布团队（Agile Release Teams，简称ARTs）的团队协作概念构建。每个ART的规模通常在50到125人之间，受邓巴数的限制，源于人类在稳定关系中能积极维持的数量的认知限制。'
- en: Teams within an ART collaborate to support a single large product or individual
    value stream. Small teams within the ARTs situationally practice **eXtreme Programming**
    (**XP**), Scrum, and DevOps, and all collaborate to deliver integrated and incremental
    value over time-boxed **Program Increments** (**PIs**), which are typically 8
    to 12 weeks long. XP, Scrum, and DevOps operate on smaller intervals and sync
    up with each PI.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ART内的团队协作以支持单一的大型产品或个别价值流。ART内的小团队根据具体情况实践**极限编程**（**XP**）、Scrum和DevOps，并共同协作，在固定时间周期的**项目增量**（**PIs**）中交付集成的增量价值，这些周期通常为8到12周。XP、Scrum和DevOps在较短的时间间隔内运作，并与每个PI同步。
- en: '**Large Solution SAFe®**: This extends to the *Essential SAFe* Lean-Agile foundation
    to coordinate and integrate the work of multiple ARTs supporting very large products
    or large volumes of products. *Large Solution SAFe* synchronizes any number of
    ARTs and hundreds to tens of thousands of team members.'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Large Solution SAFe®**：这一配置扩展了*Essential SAFe*的精益敏捷基础，以协调和整合支持非常大产品或大量产品的多个ARTs的工作。*Large
    Solution SAFe*同步任何数量的ARTs以及数百到数千的团队成员。'
- en: '**Portfolio SAFe®**: Aligns portfolio execution with the enterprise strategy
    by organizing the Lean-Agile Enterprise around the flow of value through its value
    streams. *SAFe Portfolios* are a collection of development and operations-oriented
    value streams that operate within a business unit. This SAFe configuration also
    adds **Lean Portfolio Management** (**LPM**) concepts to monitor and assess planned
    portfolio investment needs across time.'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Portfolio SAFe®**：通过围绕价值流组织精益敏捷企业，将投资组合执行与企业战略对齐。*SAFe投资组合*是由开发和运营导向的价值流组成，这些价值流在一个业务单元内运作。此SAFe配置还加入了**精益投资组合管理**（**LPM**）概念，以便监控和评估跨时间的投资组合投资需求。'
- en: '**Full SAFe®**: Links *Essential*, *Large Solution*, and *Portfolio SAFe* as
    an integrated and coordinated set of processes and activities.'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Full SAFe®**：将*Essential*、*Large Solution*和*Portfolio SAFe*作为一套集成协调的流程和活动进行连接。'
- en: Any of the previously discussed Scrum and Hybrid Scrum methodologies and frameworks
    can help your organization improve the agility of individual or multiple teams,
    working collaboratively to develop a single product or product line. Both DA and
    SAFe also include robust approaches to implementing Lean software development
    concepts and portfolio management processes to support strategic planning, funding
    priorities, and resource allocation across multiple product lines.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 之前讨论过的任何Scrum和混合Scrum方法论和框架都可以帮助你的组织提高单个或多个团队的敏捷性，协作开发单一产品或产品线。DA和SAFe也包含了实施精益软件开发概念和投资组合管理流程的强大方法，以支持战略规划、资金优先级和跨多个产品线的资源分配。
- en: No matter which Scrum or Lean-Agile approach you choose to employ, its success
    is primarily dependent upon the level of sponsorship relative to the size and
    scope of the implementation. Leadership and executive sponsorship are the topics
    of the next section.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你选择采用哪种Scrum或精益敏捷方法，其成功主要取决于相对于实施的规模和范围的赞助支持水平。领导力和高层支持是下一节的主题。
- en: Leading the way
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引领方向
- en: The implementation of Agile and Lean practices has organization-wide implications
    that impact the potential success of any implementation. Moreover, the larger
    the implementation, the broader the impact, and having the appropriate leadership
    and sponsorship levels is critical to its success. Ideally, the organization's
    Chief Executive leads the way.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Small software development teams can sometimes implement XP and Scrum practices
    at the small team level with minimal sponsorship. However, such implementations
    often find it challenging to obtain information on customer needs and priorities
    without a proper product owner leading those efforts.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, the development teams may not be allowed to break away from the project-oriented
    mindset under their organization's traditional funding and resource allocation
    practices. Agile practices have a product-oriented focus. Executives, customers,
    and other stakeholders may resist the organizational changes required to support
    the product-oriented model's iterative development and incremental release strategies.
    Frankly, Agile and Lean's product and customer-centric focus requires more effort
    on their part, and they may not see the value.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: The value is there, but the impacted internal organizations and customers need
    to be educated and see results before buying. So, let's take a moment to discuss
    how to get their buy-in.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Gaining stakeholder support
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Agile and Lean practices require more frequent and closer interactions across
    the business functions, and the participants must have a stake in the success
    of a new product or product enhancement. In the traditional software development
    model, management and customer interactions were limited to initial requirements
    gathering activities and then minimally across periodic milestone reviews, phase
    gates, and late-stage user acceptance testing. Lean-Agile methodologies are much
    more demanding.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Agility benefits come directly from the frequent and continuous team and stakeholder
    interactions, with complete, accurate, and up-to-date visibility on all critical
    information. But how do the early adopters encourage others within the organization
    and their customers to consider such a change?
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: The early adopters may have some success in educating their executives on the
    benefits of Agile and Lean-Agile practices. However, based on personal observations
    and experience, the least successful approach is to gain the ear of your executive
    managers and have them put out a mandate for immediate change. Without proper
    leadership, guidance, and resources, mandates tend to fail.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead, organizations can follow these practical steps:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '**Internal promotions**: Create educational materials on proposed Agile or
    Lean-Agile practices for distribution and review.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Executive sponsor**: Find a key executive sponsor with the authority, funding,
    and forward-thinking vision to see the benefits of delivering accelerated value.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Internal pilot**: Identify a product with high visibility and the significant
    potential to serve as an internal pilot and case study.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内部试点**：确定一个具有高能见度且具有重要潜力的产品，作为内部试点和案例研究。'
- en: '**Pilot team**: Pull together a small team of like-minded early adopters who
    see the value of Agile and Lean-Agile practices, and who want to be on the leading
    edge of the change. Also, train the pilot team and other participating stakeholders.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**试点团队**：组建一支由志同道合的早期采用者组成的小团队，他们看到了敏捷和精益敏捷实践的价值，并希望站在变革的前沿。此外，还需要对试点团队和其他参与方进行培训。'
- en: '**Infrastructure**: Build the infrastructure necessary to support the pilot
    engagements. Ideally, agile teams operate from a single location with a dedicated
    meeting room, individual workspaces, laptops and servers, software development
    and testing tools, and network access.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础设施**：建设支持试点项目所需的基础设施。理想情况下，敏捷团队应在一个地方操作，配备专用的会议室、个人工作区、笔记本电脑和服务器、软件开发和测试工具以及网络访问。'
- en: '**Plan the pilot experiment**: Plan the activities and schedule to guide the
    initial pilot through a series of iterations, each delivering incremental value.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规划试点实验**：规划活动和时间表，以引导初始试点通过一系列迭代，每个迭代都交付增量价值。'
- en: '**Run the pilot experiment**: Run the backlog refinement, plan, development,
    and test cycles as Agile-based iterations, with each cycle delivering incremental
    value. Equally as important, ensure the executive leadership, customers, and end
    users remain committed and actively engaged in each iterative review. Their guidance
    and input are critical to the team delivering incremental and customer-centric
    value.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进行试点实验**：以敏捷方式进行待办事项的优化、计划、开发和测试周期，每个周期都交付增量价值。同样重要的是，确保高层领导、客户和最终用户保持承诺并积极参与每次迭代回顾。他们的指导和意见对团队交付增量且以客户为中心的价值至关重要。'
- en: '**Inspect and adapt**: Throughout the initial pilot engagement, the team and
    other stakeholders assess their performance through **retrospectives** and **product
    demos**, refine their activities for improvement, execute the planned improvements,
    monitor, and continue to adapt as necessary. This inspection and adaption process
    never stops.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查和调整**：在最初的试点项目中，团队和其他相关方通过**回顾会议**和**产品演示**评估他们的表现，改进活动以提高效率，执行计划中的改进，进行监控，并根据需要继续调整。这个检查和调整过程是永无止境的。'
- en: '**New pilots**: After successfully completing the first pilot, find two to
    three new pilot projects to further prove and expand the organization''s new development
    approach. Most people want to be part of something successful, and each new pilot
    success encourages other product teams to evaluate and adopt the approach for
    their development efforts.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**新试点**：在成功完成第一次试点后，寻找两个到三个新的试点项目，进一步证明并扩展组织的新开发方法。大多数人都希望参与成功的项目，每一次新的试点成功都会鼓励其他产品团队评估并采用这种方法进行开发工作。'
- en: '**Inspect and adapt**: Continuing with the additional pilot engagements, the
    new teams and associated stakeholders assess their performance through retrospectives
    and product demos, refine their activities for improvement, execute the planned
    improvements, monitor, and continue to adapt as necessary. The inspection and
    adaption process never stops.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检查和调整**：在后续的试点项目中，新团队和相关方通过回顾会议和产品演示评估他们的表现，改进活动以提高效率，执行计划中的改进，进行监控，并根据需要继续调整。检查和调整过程从未停止。'
- en: '**Roadmap**: As the initial pilots prove the new way of working, the organization''s
    executive leaders must create a detailed roadmap to guide its enterprise-wide
    deployment. It''s impossible to accurately measure, monitor, and guide future
    deployments without an initial and updated plan from a practical standpoint.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路线图**：随着初始试点证明了新工作方式的有效性，组织的高层领导必须制定详细的路线图，指导全企业范围的部署。从实际角度来看，没有一个初始且更新的计划，就无法准确地衡量、监控和指导未来的部署。'
- en: It may be necessary to redefine products and product lines under the new model
    to align with the new Lean value stream model. Such realignment does not affect
    just the software products. The business needs to evaluate all internal and external
    customer relationships from a value-adding perspective to define its operational
    and development-oriented value streams.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在新模型下，可能需要重新定义产品和产品线，以使其与新的精益价值流模型对齐。这种重新调整不仅仅影响软件产品。业务需要从增值的角度评估所有内外部客户关系，以定义其运营和面向开发的价值流。
- en: Product teams need to be created, including hiring and mentoring people to serve
    as product owners and Scrum masters. Training, coaching, and mentoring resources
    and capabilities need to be developed and deployed to bring employees up to speed
    on the new Lean-Agile practices. It may be beneficial to establish one or more
    **Centers of Excellence** (**CoE**) to provide mentoring and coaching resources
    and guide the value stream transformations.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Rollout**: Execute the deployment plan outlined in the roadmap. Make sure
    that the appropriate metrics have been defined and monitor progress against those
    metrics.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inspect and adapt**: Continuing with the rollout, the new teams and associated
    stakeholders assess their performance through retrospectives and product demos,
    refine their activities for improvement, execute the planned improvements, monitor,
    and continue to adapt as necessary. Here, again, this inspection and adaption
    process never stops.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, inspection and adaption activities prevail throughout the Agile
    and Lean-Agile transformations and across all product life cycles. Moreover, providing
    visibility is critical to the inspection and adaptation processes. Metrics and
    other forms of information help the organization visualize how they are doing
    against their plans and past performances.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the previous chapter, we learned that the four most critical measures to
    evaluate team performance are as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '**Deployment frequency**: A measure of team code deployment frequencies into
    test and production environments'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lead time**: A measure of the time it takes from developers committing their
    code in the shared repository to successfully running in a production environment'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mean time to repair or restore (MTTR)**: A measure of how long it takes to
    restore a service when a service incident or a defect that impacts users occurs
    (for example, an unplanned outage or service impairment)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Change fail rate**: A measure of the percentage of changes to production
    resulting in degraded or failed services (for example, lead to service outage),
    which then requires remediation (for example, a hotfix or rollback)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'However, there are other useful measures and information each team may choose
    to maintain and make visible. For example, **Intellectsoft** identifies five categories
    for Agile measurements and 15 useful metrics that provide a good starting point
    (*15+ Useful Agile Metrics in Scrum & Kanban: Measure Quality, Productivity &
    Performance. 2018*, which you can refer to at [https://www.intellectsoft.net/blog/agile-metrics](https://www.intellectsoft.net/blog/agile-metrics)).
    VSM vendor **Plutora** has a similar article titled *Agile Metrics: The 15 That
    Actually Matter for Success* ([https://www.plutora.com/blog/agile-metrics](https://www.plutora.com/blog/agile-metrics)).
    We''ll take a quick look at the metrics presented in these two articles in the
    next section.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Implementing useful metrics
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Not every Agile or Lean-Agile team needs the same metrics. Executives and customers
    will influence choices and likely request information not listed in this subsection.
    Additionally, product owners may need additional information to understand how
    the product's architecture, design, and technical depth issues can impact the
    delivery of identified and prioritized product backlog items.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: The list that follows includes standard metrics that the product teams and their
    stakeholders may find helpful. The metrics broadly support the primary quality,
    productivity, and project objectives of Agile, Lean, and Kanban performance measures
    and software quality measures.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Agile quality metrics
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The metrics described in this subsection support generalized quality improvement
    objectives in Agile-based development practices:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '**Product backlog**: This is a prioritized list of the new features, functions,
    enhancements, bug fixes, infrastructure changes, or other work items. The quality
    metrics in this measure deal with the degree to which identified work items are
    refined and prioritized based on value and delivery costs.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Escaped defects**: This is a measure of the defects that have been released
    into production that previously passed the team''s definition of done. Since total
    defect prevention is an ideal goal, a high number of escaped defects indicates
    there are failures in properly defining our acceptance criteria or in our testing
    capabilities and procedures.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Failed deployments**: This is a measure of how often software deployments
    into production environments fail and require a rollback. Ideally, the development
    team''s engineering and testing environments, as well as their testing tools and
    procedures, should capture and address problems that could cause system failures
    before they''re deployed into production.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Besides testing to find bugs and nonconformance with the acceptance criteria,
    the testing environments must accurately mimic the demanded loads against the
    same combination of applications and configurations within the production environments.
    Test environments may execute many performance tests, such as load, endurance,
    volume, scalability, spike, and stress testing. The ideal in DevOps is to automate
    these and all other tests.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Release Net Promoter Score** (**NPS**): This is a measure that was initially
    defined to measure customer experience to predict customer loyalty and business
    growth. The release-oriented NPS uses directed questions to measure customer satisfaction
    on a scale of 1 to 10 on each new or major release. In the NPS model, **detractors**
    are customers who respond with a 6 or below on the scale; **passives** rank the
    release as a 7 or 8; **promoters** rank the release in the 9 to 10 range. The
    NPS calculation measures the percentage of detractors subtracted from the percentage
    of promoters:'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B17087_02_001.png)'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*Detractors* are a problem as they are more likely to go with our competitors''
    offering and criticize our product. *Passives* tend to be neither supportive nor
    unsupportive of the new release. *Promoters* often tend to be more enthusiastic
    in promoting a company, product, or new release.'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In theory, any ranking above 0 means the release had more enthusiastic promoters
    than unhappy detractors. However, organizations should strive to do much better
    than 0.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Agile productivity metrics
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The metrics described in this subsection support productivity improvement objectives
    in Agile-based development practices:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '**Lead time**: As previously noted, this measure spans the time from code commitment
    to its release into production. It''s one of the four metrics that helps assess
    the effectiveness of a software development team. However, in an Agile context,
    the lead time is a measure that spans when a user story or work item enters a
    product backlog to the end of a Sprint or the feature''s release into production.
    The lead time includes the time the work item request waits in the product backlog,
    as shown in the following diagram:'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Lead time/cycle time diagram'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_Figure_2.1.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.1 – Lead time/cycle time diagram
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '**Cycle time (control chart)**: This is a subcomponent of the lead time and
    measures how long it takes to complete an activity or set of activities within
    a value stream. In other words, the cycle time is a measure of the time spent
    as work in progress, devoid of all previous wait times. The closer the lead time
    is to the cycle time, the more efficient the process.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following graph shows an example of a cycle time control chart. In our example,
    the VSM team collects data on cycle times for specific activities across their
    pipelines. In our example, the software development team may use VSM tools to
    capture metrics on how long it takes to conduct a set of end-to-end tests on new
    increments of code. Regardless, the cycle time control chart includes data points,
    averages, and established thresholds (limits) for control.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This type of testing automates the application''s workflow from beginning to
    end, replicating common user scenarios through every possible permutation of operations
    to discover failures as the application interfaces with hardware, networks, external
    dependencies, databases, and other applications. The team believes an acceptable
    cycle time for this test is between 5 to 8 hours, and they usually run these tests
    at night to avoid software development downtime:'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.2 – Cycle time (control chart)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_Figure_2.2.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.2 – Cycle time (control chart)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: From the preceding control chart example, we can see that the performance over
    the past 30 days has not stayed within an acceptable range of 5 to 8 hours (6.5-hour
    average). Worse, the testing exceeded the allotted 8 hours on six occasions. With
    this information, the team has the data they need to explore what events caused
    the lengthy end-to-end testing. They can map this information with the test results
    from those dates to see what the team can do to prevent such problems in the future.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: In Agile and Lean/Kanban-based systems, the cycle time is a measure of time
    that a work item spends as a **work in progress** (**WIP**) once the stories have
    been refined and entered the *in-progress* stage. In this context, the cycle time
    does not include the time the work item spends in ideation through backlog refinements
    and waiting in the product backlog queue after that. Cycle time starts immediately
    when the work item is accepted as a work item in the Sprint backlog, or pulled
    into production in a Lean- or Kanban-based value stream.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Still, it's possible to have a cycle time that includes waiting times in Agile,
    Lean, and Kanban-based systems. The distinction is that the cycle time always
    includes both *touch* and *wait times* within Agile-based Sprints, but we'll want
    to break out and try to eliminate all wait times in a Lean-oriented software value
    stream.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '**Wait time**: The amount of time a product or material spends inactive in
    a *delayed* status before work begins. In Lean and Kanban-based systems, we seek
    to eliminate all wait times.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sprint Burndown Charts**: A measure and visualization of team forecast velocity
    as the completion rate, usually in the form of estimated story points, from the
    Sprint Backlog across one or more Sprints. The primary purpose of a Sprint Burndown
    Chart is to show the team''s progress against the Sprint Goal (see *Figure 2.2*).'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Teams initially forecast the level of effort required from each work item in
    the form of *story points*. A Sprint Burndown Chart tracks progress against the
    Sprint Backlog regarding the actual number of story points worth of work completed
    against the planned burndown. There are typically two lines on the chart: one
    to show the planned velocity and another to show the Sprint''s actual velocity.'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Epic and release burndown/burnup**: The same concept as the Sprint Burndown
    Chart applies to tracking work progress across defined Epics and product releases.
    Epics are an enormous scope of planned and interrelated work that''s not been
    refined to smaller stories:'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.3 – One month Sprint Burndown Chart'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_Figure_2.3.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.3 – One month Sprint Burndown Chart
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: The primary concern with using such metrics is not to use the charts to find
    faults with a team's progress. The longer the period and the less defined the
    requirements, the more difficult it becomes to estimate work with absolute accuracy.
    Epic and Product Release Burndown Charts merely show progress against initial
    plans and have nothing to add in the way of understanding why.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '**Burnup Charts**: Note that we can use the same data that was used to create
    a Sprint Burndown Chart to visualize the amount of work that was completed throughout
    the Sprint and how much work remains, as shown here:'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Sprint burnup chart'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_Figure_2.4.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.4 – Sprint burnup chart
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Note that the smaller dotted line in the preceding diagram indicates the originally
    planned projection of work that's been completed. In our example, the team is
    on target to complete the initially estimated 300 points worth of work early.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '**Velocity**: This is the measure of estimated work a team or teams accomplish
    over time, usually measured across each Sprint in Agile:'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.5 – Scrum Team velocity chart'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_Figure_2.5.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.5 – Scrum Team velocity chart
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: The objective is to use the velocity chart to judge future performance. However,
    the more significant the variance in this number, the more difficult the team
    or teams will have estimating the scope of work within the product and Sprint
    backlogs, and the more difficult it will be to plan their deliveries.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: In DevOps within large organizations, velocity measures the number of stories
    completed in days or even hours.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '**Control charts**: Also known as Shewhart charts (named after Walter A. Shewhart),
    this is a statistical process control tool that''s used to determine if a process
    is in a state of control. In Agile and Lean development practices, teams use control
    charts to track the duration of tasks from *in progress* to *completion*:'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Process control chart'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_Figure_2.6.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.6 – Process control chart
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: In an ideal world, all activities would be very predictable and never vary from
    a desirable mean. However, that's rarely the case, and we use control charts to
    see if our processes are trending in the wrong direction. Control charts have
    upper and lower boundaries that define optimal durations and upper and lower control
    limits to indicate an out of bounds measurement. When the teams see their metrics
    trending toward the upper or lower control boundary limits, they know they have
    issues to address.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: A typical use case for control charts is showing the rate of defects over instances
    of an activity or process. However, when used to measure activity durations, control
    charts help show the team's velocity and its trend in velocity.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Agile project metrics
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The metrics described in this subsection support how workflows are managed
    in Agile-based development practices:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '**Kanban Boards and Cards**: Kanban is a "Pull" signaling system that was initially
    developed to support Lean-oriented and **just-in-time** (**JIT**) manufacturing
    concepts in Japan. Kanban stands for Kan (that is, card) and Ban (that is, signal),
    which, when interpreted together, mean *billboard* or *signboard*. In a Kanban
    system, no production process starts until receipt of the signal card indicates
    the desired quantity and type of parts or work required. The entire value stream
    process only kicks off on-demand with customer orders.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visualize the workflow**: Teams can employ whiteboards with columns to indicate
    the team''s defined stages of work. Using an IT example, those stages might include
    *Backlog*, *Refinement*, *Development and Test*, *Acceptance*, and *Delivery*.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following image shows an example of a Kanban Board with Kanban Cards indicating
    work in progress across the Story, To Do, In Progress, To Verify, and Done value
    stream activities:'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Kanban Board with Kanban Cards'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_Figure_2.7.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.7 – Kanban Board with Kanban Cards
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding image, the labels map to the Agile pipeline Kanban activities
    managed by the software development team. Stories are the user stories that are
    managed in the product backlog. The to-do list is the highest priority user story.
    In Progress includes the user stories under development. To Verify includes the
    user stories that are complete but need to be verified by their team members and
    product owner. Finally, Done represents the user stories that can be released
    into production.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '**Limit work in progress (WIP)**: Ideally, there should never be a queue of
    work or materials except in the initial product backlog. Downstream processes
    only pull work when they have the capacity to perform the work. Without this simple
    rule, work and materials accumulate at the slower processes within the pipeline,
    which we know creates waste due to excessive storage requirements and carrying
    costs. Additionally, excessive WIP hides bugs and defects in the queued products.
    These become increasingly challenging to find and expensive to fix later.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Manage flow**: Use Kanban Cards as signaling devices to indicate new requests
    from internal and external customers. These Cards enter a queue on the Kanban
    Board. As downstream capacity opens to take on work from the previous stage, the
    individuals taking on the work move the card they selected into the next column
    on the board to indicate they have accepted the work. In other words, work is
    only pulled into downstream processes when capacity is available; work is never
    pushed to a downstream process.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Make policies explicit**: Organizations must provide simple, clear, and visible
    policies describing desired work practices, approved technologies, procurement
    processes, and human resource management. The policies must evolve based on new
    learning that suggests better approaches.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Feedback**: Feedback in Kanban comes through collaborative meetings. Traditional
    Kanban practices implement seven types of meetings:'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'a. **Strategy review**: These are corporate-level assessments of the business
    mission, goals, and objectives constrained by resources, time, competition, and
    technologies.'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'b. **Operations review**: They help teams assess their Kanban practices, value
    stream activities, and resources to deliver value.'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'c. **Risk review**: Identify risks and develop mitigation strategies and contingency
    plans.'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'd. **Service delivery review**: Assessment of the services required to support
    product deliveries (also known as operational value streams).'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'e. **Replenishment meeting**: This is a Kanban-based form of backlog management
    activity that''s used to identify the tasks that must be pulled from the backlog.
    This is done by assigning the tasks to a **Class of Service** (**CoS**) and setting
    limits for the number of tasks that are pulled from each CoS. Examples of CoS
    tasks include emergency requests, fixed delivery dates, bugs, standard tasks,
    and maintenance tasks.'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'f. **Kanban standup meeting**: This is similar in concept to the Daily Scrum
    Meeting, where team members meet briefly to discuss how the work is progressing,
    what work remains, and what''s getting in the way of our work. The Kanban meeting''s
    primary difference is managing work as a continuous flow, minimizing lead times
    by eliminating bottlenecks, and reducing WIP. Team members meet at their Kanban
    Board.'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'g. **Delivery planning meeting**: This is required when organizations formally
    release products on fixed dates. The delivery planning meetings help teams address
    implementation concerns, support and maintenance hand-offs, data migrations, training
    development and delivery requirements, and other **service-level agreement** (**SLA**)
    issues.'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Continuous improvements (Kaizen)**: Ideas for improvement come from observation,
    collaborations, retrospectives, and product demos. Use team-based retrospectives
    to review and analyze previous issues, implement immediate experiments to resolve
    those issues, and never stop these iterative efforts for continuous improvements.
    Moreover, use customer demos to help guide development priorities from their perspective.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cumulative flow diagram (CFD)**: This is an analytical tool that''s typically
    associated with the Kanban method. Similar conceptually to Agile''s Burnup Charts,
    the CFD provides visibility on the amount of accumulative work across each stage
    of a value stream (for example, a software development value stream).'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In an ideal world, work items flow through a sequence of activities in a synchronized
    and coordinated development pipeline with slight variance on activity durations,
    no rework, and no losses due to defects and bugs. But we don't live in that world,
    and stuff happens that causes work accumulations at various points of our development
    pipeline.
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following graph shows a CFD tracking work across the following four stages
    of a software delivery pipeline:'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: a. Work item requests (blue)
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b. Requirements refined (orange)
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c. Development and testing WIP (gray)
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'd. Delivery (yellow):'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.8 – Continuous Flow Diagram (CFD)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_Figure_2.8.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.8 – Continuous Flow Diagram (CFD)
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: The CFD allows teams to visualize potential impediments in their value stream
    process and the most effective tool to observe the impacts across the value stream's
    activities. Instead of a relatively smooth graph with gentle rises and falls,
    sudden ascending or descending graphics indicate impediments.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '**Code Coverage**: This is a measure and visual display of how much of a team''s
    product code is covered by unit tests or test suites. Typical code coverage metrics
    include method or function coverage, statement coverage, branch coverage, condition
    coverage, **multiple condition/decision coverage** (**MC/DC**), parameter coverage,
    and cyclomatic complexity.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The more extensive the code coverage in testing, the higher the software's potential
    reliability and quality. Any gaps in code coverage can result in software failures
    and bugs. And even if your team has high code coverage, there's always a chance
    something can slip through the cracks. On the other hand, with good code coverage,
    those instances should be few and far between.
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Health metrics for Agile teams/Agile performance metrics
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The metrics described in this subsection support employee satisfaction objectives
    in Lean and Agile-based development practices:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '**Employee happiness**: This is a somewhat subjective measurement but ultimately
    critical to keeping your employees in the long run. Happiness is measured through
    simple employee surveys, asking them to rate how happy they are with the company,
    what they like best, what they don''t like, and what would increase their happiness.
    Of course, executive leaders need to proactively act on this information to produce
    positive changes that help keep and attract talented workers.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Team morale**: Measures of team-level morale often provide better indicators
    of job satisfaction. Again, surveys work best, but the questions are not open-ended.
    Instead, the surveys ask the team members to rate their agreement with the questions
    on a scale of 1 to 7\. The questions ask whether the team member feels they are
    a good fit for the team, are proud of their work, enthusiastic about their work,
    and find meaning and purpose in their work.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Core Lean and Kanban metrics
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The metrics described in this subsection support productivity improvement objectives
    in Lean software development practices:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: '**Story lead time**: This lead time metric shows up again, but this time in
    the context of Lean and Kanban systems. Since Lean and Kanban implement value
    stream flows, the lead time for a story starts when it enters the product backlog
    and completes when completed. Thus, lead times always include the wait time when
    products and materials sit in a queue.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Story cycle time**: A component of lead time, cycle times measure how long
    it takes to complete the set of activities within a value stream. In a DevOps
    context, this is a pipeline flow measurement of the time it takes for work to
    flow through the team''s development pipeline. Specifically, the lead time spans
    work item creation to completion, while the cycle time measures the duration a
    work item spends as work in process.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Feature lead time**: This is a variation on story lead time, where the focus
    is on implementing specific features. User stories represent a user or customer''s
    desired capabilities, which can be quite granular in scope. For example, a user
    story for an online car buyer might state, "*As a car buyer, I want to view the
    color of the dealer''s available automobile so that I can see any match my color
    preferences.*" From this example, it''s clear that user stories are statements
    of requirements from the user''s perspective.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In contrast, a feature implements a slice of business functionality that may
    encompass multiple user story requests. In this context, the dealer's online feature
    might include all customer online automobile lookup preferences, including make,
    model, year, price, color, and other differentiating options. In other words,
    a feature is the implementation of a piece of functionality from the point of
    view of the business.
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Making the distinction between user stories and product features is essential
    as customers buy capabilities and may not know what capabilities and benefits
    a feature provide unless clearly stated. Recall our previous discussion on the
    need to clearly state a product's capabilities and benefits via its value proposition.
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Feature cycle time**: Similar to the story cycle time, this is the total
    time involved when developers actively design, develop, and test the feature.
    In other words, cycle times measure the time of the work in progress.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Story wait time**: This is a measure of non-value-added time that a product
    requirement or work in progress sits in an idle state. The goal is to minimize
    wait times to the greatest extent possible.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Story throughput**: This measure of velocity calculates the number of stories
    running through development pipeline (or other value stream) over time. Smaller
    stories help improve throughput in two ways. First, smaller stories are quicker
    to implement because there is less work to complete. Second, smaller stories tend
    to be less complicated and, therefore, easier and quicker to debug discovered
    errors.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is essential to keep your stories relatively consistent in size in a Lean-
    or Kanban-based environment. In a Lean-based system, the objective is to have
    matched activity durations to prevent queuing in slower activities. Of course,
    using a pull-based order entry system tied to available capacity also helps minimize
    queuing.
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also, recall that any value stream's ideal cycle rate is the available production
    time divided by customer requests within the same duration (also known as **TAKT
    time**). So, if your software development teams are receiving an average of 10
    stories across each 8-hour day, the TAKT time is ![](img/B17087_02_002.png)
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In other words, the activities within your DevOps- or Kanban-based development
    pipeline need to cycle at the same rate as order entries. If you go slower than
    TAKT time, you won't deliver all your customers' orders; if you operate faster,
    you produce unrequested products.
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Created-to-finished ratio**: This is a measure of the difference between
    the number of work items entering your value stream compared to the number of
    items completed over time. Queues develop when the number of work items entering
    that value stream exceeds the number completed, assuming the work is entered into
    the product backlog.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the order entry level is stable, the dev teams may address the issues by
    streamlining their value stream activities or adding capacity. However, it may
    also be possible that some of the stories are not of sufficient priority or cost-justified
    to include in the product backlog queue. Regardless, an excessive created-to-finish
    ratio indicates lost opportunity when the work is a customer priority and has
    been cost-justified.
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Measuring software quality in Agile
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The metrics described in this subsection support software quality improvement
    objectives in Agile-based development practices:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '**Static code analysis**: This is a method that''s used to debug software.
    It does so by examining source code against a predefined set of rules and standards
    without executing the program. Developers conduct static code analysis in the
    earliest code development phases, before unit testing, or before integrating with
    the source code repository''s mainline code. The objective is to find and fix
    coding errors at the earliest time possible.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's possible to run static code analysis as a manual test. But manual testing
    is time-consuming, laborious, and subject to human error. The better approach
    is to use a **static code analysis tool** (**SAST**) to scan and check compliance
    to coding rules such as syntax violations, undefined values, dead or unused code,
    programming errors, security, vulnerabilities, performance issues, and others.
    The output of a SAST is a summary report showing the health status of your code.
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: While there are numerous open source and commercial SASTs, modern compilers
    also perform syntactic or technical errors before running the code, catching many
    of the same types of errors.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Dynamic code analysis**: This identifies defects after compiling the code
    and running it across the product testing life cycle, including unit testing,
    integration testing, system testing, acceptance testing, and regression testing.
    Dynamic code analysis aims to check the system''s response to variables that dynamically
    change within the application.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The primary benefit of dynamic code testing is that the tests operate against
    many orders of magnitude greater numbers of permutations of data inputs than humans
    can manually implement, within the same time frame. For example, dynamic code
    analysis might involve tens of thousands or more data input configurations, operating
    against multiple components and integrated systems, in a batch run that lasts
    a few hours.
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Quality intelligence**: Data analysis tools help improve software development
    processes that produce poor or undesirable quality outcomes. Static and dynamic
    analysis tools focus on identifying issues with code already under development.
    However, quality intelligence aims to discover the areas in the development process
    that consistently produce problems in terms of velocity, quality, and efficiencies.
    Quality intelligence tools help teams organize and analyze data from activities
    across the entire software development life cycle.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This section ends our discussion on useful Lean-Agile metrics. In the next section,
    you will learn how to improve IT flows by implementing Lean production and operations
    practices across the IT organization.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: Improving IT flows through Lean Thinking
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to apply Systems Thinking to reduce
    complexity across six potential value streams involving one to six sets of activities
    (See *Figure 3.2*, an image showing nodes, potential connections, actual connections,
    and network densities.) The graphic provided demonstrates how aligning value stream
    activities as streamlined flows reduces the number of possible connections and
    interactions across the activities. Thus, the linear-sequential approach is the
    most efficient way to operate within a value stream.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: However, we can still mess things up by not reducing the setup and cycle times
    of lengthier activities and allowing work items to queue at those slower activities
    within the value stream. As noted previously, the ideal goal is to match each
    activity and the overall production rates to the rate of receiving customer orders
    or requirements. We can calculate this as the time to produce work items, divided
    by the number of items requested over the interval, otherwise known as **Takt
    time**.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: 'Conceptually, Lean production eliminates all forms of waste that hinder our
    efforts to deliver customer-centric value. In the traditional view of Lean manufacturing,
    there are seven distinct categories of waste, as shown in the following list:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '**Waiting**: Delays in processing, including any time products spend waiting
    or in a queue.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Overproduction**: Producing more of something than you need or than your
    customer''s currently want.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extra-processing**: Over-processing or conducting any non-value-added activity.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transportation**: Wasted time, resources, and costs moving products and materials
    from one location to another.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Motion**: Unnecessary movement, motion, or activities performed by people.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inventory**: Carrying and storing any materials and products not undergoing
    a value-added activity.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Defects**: Any defects in the product or services produced.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The previous list of waste in Lean evolved primarily in the manufacturing industry,
    though it also supports services-oriented companies, such as software development
    companies. Waste in software development practices is the topic of the next section.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Eliminating waste in software development
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In 2003, Mary and Tom Poppendieck released their book *Lean Software Development:
    An Agile Toolkit*, where they discussed applying Lean manufacturing concepts to
    software development. Their book maps seven forms of waste in software development
    back to the original Lean concepts of waste, as shown in the following table:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9 – Mapping Lean Manufacturing waste to its software development
    equivalents'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_Figure_2.9.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.9 – Mapping Lean Manufacturing waste to its software development equivalents
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: 'These definitions of waste in Lean production and Lean software development
    have been around for 3 and nearly 2 decades, respectively. Since then, a great
    deal of thinking has evolved around Lean practices, which I addressed in my previous
    book, *Scaling Scrum Across Modern Enterprises*. For expedience, I''ll recap the
    primary concept here in this section. However, I encourage those who want a deeper
    dive to explore the two chapters from my previous book devoted to this subject:
    [*Chapter 5*](B17087_05_Final_PD_epub.xhtml#_idTextAnchor126), *Driving Business
    Value through a DevOps Pipeline*, and [*Chapter 6*](B17087_06_Final_PD_epub.xhtml#_idTextAnchor165),
    *Launching the VSM Initiative (VSM Steps 1-3)*.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: 'As you read through the following list of Lean concepts, understand that they
    apply equally well to the development of physical, digital, and hybrid-physical-digital
    products and services:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '**Value**: Customers always define value. It doesn''t matter how much experience
    we have or how bright we are; any idea we come up with is, at best, a risk until
    adequately validated by the target customers.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous improvements (Kaizen)**: The goal is to make work more efficient
    and effective through teamwork, improved procedures, and employee and customer
    collaboration. The tools for continuous improvement include quality control mechanisms,
    just-in-time delivery, standardized work, fast setups, streamlined flows, more
    efficient equipment, and waste elimination. Additionally, improvements should
    help make the employee''s jobs more fulfilling, less fatiguing, and safer.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual controls**: This involves controls such as Kanban Cards to manage
    the intake of work items to match value stream flows. Control charts are another
    form of chart that help us see when we are trending out of bounds on any metrics.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Built-in quality**: This means finding problems and fixing them immediately
    when they''re introduced. In the continuous flows of a lean system, we may have
    to stop all the work in the value stream and focus everyone''s efforts on resolving
    the problem quickly. Building in quality helps us eliminate the higher costs that
    result from product recalls, rework, and the lengthy process of finding and fixing
    bugs in the late stages of product development.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Improving knowledge**: This is an essential element of continuous improvements
    in Lean and Agile practices. Whether we learn from experience, by trial and error,
    or by learning from others, we can apply that learning to evolve new ways of working
    that are more effective and productive. Teams must make time for observations,
    analysis, and learning.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Delay decisions and commitments**: Though seemingly counterintuitive to lean
    principles, there are costs involved when making poor decisions due to insufficient
    information. It''s better to delay decisions until we have enough information
    to mitigate our risks. In the long run, the organization saves time and money
    by building the products that customers want and value, not what we think they
    want.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Detect defects through automation (Jidoka)**: The Japanese Lean concept of
    autonomation means *Automation with a human touch*. Jidoka is a quality control
    principle that recommends using automated techniques to detect abnormalities,
    stop the process, fix the immediate problem, and then identify the cause and effects
    and explore ways to prevent or reduce future occurrences.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Eliminate mistakes (Poka-Yoke)**: This is also known as *mistake-proofing*.
    This approach to eliminating wastes prevents incorrect operations being performed
    by employees or product users. The objective is to design a process or mechanism
    that makes it impossible to perform a particular activity incorrectly. For example,
    a team''s **continuous integration** (**CI**) practices might implement a build
    process that automatically performs static analysis and test-driven development
    instructions. The CI automation process helps ensure a developer''s code meets
    the organization''s coding practices and customer''s acceptance requirements,
    before they are allowed to integrate their code with the main branch (also known
    as the master branch).'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Eliminate waste**: Assess and eliminate the seven forms of waste, as identified
    in previously, for Lean production and software development.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Quit multitasking/task switching**: Because such activities break our attention
    and focus on what we are currently doing, this forces our brains to switch between
    tasks rapidly. In reality, multitasking is a form of task switching. In other
    words, when multitasking, you are not thinking about both topics at the same time.
    Instead, you are switching your attention back and forth between them.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multitasking only works for a limited set of activities that split our cognitive
    activities across our brains' left and right prefrontal cortexes, such as talking
    while walking with a friend. Moreover, multitasking only works while performing
    a relatively autonomous motor skill with a cognitive task – and even then, you
    are likely to do both tasks slower.
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When working across multiple cognitive tasks, our thinking involves a sequential
    switching process that creates a bottleneck when switching between cognitive tasks.
    While switching between topics, our brains require time and effort to reorient
    our thinking and pick back up where we left off, and we lose information in the
    process. As a result, we lose our train of thought, and it takes us longer to
    complete our thoughts and work.
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: But there are other undesirable effects of multitasking and task switching,
    including making mistakes, adding to your stress, disrupting your short-term memory,
    and missing essential details as you switch between tasks. Task switching also
    negatively impacts creativity, and you may end up revisiting a subject multiple
    times to get through the task.
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Practice Gemba (that is, go to the source)**: This helps you see your current
    situation. When applied to Lean production, managers walk the manufacturing floors
    to review progress and talk to the workers to discuss their issues and concerns.
    In a software development context, we have collocated teams, and we use daily
    scrums and other events to communicate progress, issues, and ideas. Big charts
    are made visible in the development operations and updated frequently to simplify
    communications to anyone who needs or wants to know how things are going.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Implement single-piece flows**: This is ideal in Lean production and lean
    software development practices. This concept extends our discussions on why the
    most efficient value streams instill a linear-sequential set of activities to
    streamline workflows. The other killer of productivity is batch processing, which
    is made worse when batch processes between activities and activity durations do
    not match.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intuitively, it seems that large batch processes are less costly as they can
    work on hundreds of items in one batch. However, in real life, the cost savings
    are lost from lengthy wait times, excessive product changeover times across production
    equipment, and hiding bugs and defects in large batches.
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The ideal situation is to have the flow of one work item for each value stream
    activity. There should be lengthy setup or changeover requirements. Activity cycle
    times should be the lowest time possible and matched across all value stream activities.
    Finally, production throughput for the value stream should equal the rate of order
    entries (that is, takt time).
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Level workloads (Heijunka)**: We must have a goal to prevent large batches
    of orders or requests from entering a system that causes waiting and other resulting
    problems. Heijunka involves leveling the type and quantity of production across
    a fixed time.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In a Lean software development context, we can use an example of a product owner
    receiving requirements that vary from day to day, depending on sources and product
    management activities that provide information. However, for this example, let's
    assume that the overall demand stays relatively constant at approximately 25 new
    high-priority requirements a week, even if they don't come in at a constant rate
    of five per day.
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Assuming our Lean development shop can handle the load of five work items per
    day, the product owner maintains a product backlog with a sufficient inventory
    to maintain a stable release of five work items a day. The volume of new requests
    may vary from day to day, but the goal is to maintain a steady flow of new work
    items into production.
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Pull production systems**: Enforce rules to only produce goods in direct
    response to demand, instead of building products or features early and creating
    waste in the form of unsold inventories of products and features customers may
    never want. The lean value stream doesn''t initiate work in a pull-oriented production
    system until it contains a customer order or requirement. The Kanban system is
    a method that''s used to enforce the discipline of the pull-oriented production
    system across the entire value stream.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Just-in-time (JIT) deliveries**: This is another strategy that matches production
    rates to customer demand and eliminates all waste in activities that do not add
    value across the production processes. However, JIT initially dealt with inventory
    management problems. Rather than ordering and storing batches of materials, JIT
    only allows new procurement and material deliveries that match customer demands.
    Moreover, the producers schedule their materials to arrive just as they are needed
    to manufacture the ordered products.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JIT works in a digital context in several ways. First, software development
    teams don't start work on new features or functions until there is customer demand.
    Moreover, when digital products support other organizational value streams, we
    need to make sure the deliveries align with the consuming value streams' needs.
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Optimize the whole**: This is another way to aggregate the concepts noted
    in the single-piece flows, leveling workloads, pull production systems, and JIT
    subsections. The objective is to look at the entire value stream to simplify and
    reduce complexity and eliminate waste. Aim to make your production processes as
    efficient and streamlined as possible. Rather than fighting fires, only allow
    orders or requirements to flow into a system at the received rate. And never allow
    new orders to enter faster than your production system can handle the load as
    a continuous and uninterrupted flow without waiting.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our value streams represent an approach to simplifying complex production and
    operations-oriented systems, while simultaneously ensuring we stay focused on
    adding or improving customer-centric value. In this context, a value stream is
    an end-to-end optimization of an entire (that is, the whole) complex development
    or operations-oriented system.
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Reject unfinished work**: In a Lean software development context, this is
    any work in progress that''s been promoted into production that''s not yet met
    its *definition of done*. However, unfinished work creates havoc at all stages
    of a value stream. If developers or other workers feel pressured into sending
    their work before completion, the potential downstream effects include additional
    bugs, defects, failures, rework, delays, and unsatisfied customers. As a matter
    of policy, organizations should never allow downstream value stream activities
    to accept unfinished work from upstream activities.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Respect for people**: This should be an obvious requirement for building
    effective organizations. However, hierarchical and bureaucratic organizations
    often create hostile environments that do not encourage cross-team or cross-organizational
    communications and collaborations. In addition, such processes create stress when
    problems arise outside the bounds of the process and through the delays of getting
    appropriate responses and approvals across the hierarchy.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both the Agile and Lean practices promote the need for respect with accountability.
    These concepts are different than the "Golden Rule" concept you were taught as
    a child – *"Treat others as you would have them treat you*."
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s quickly review how the Golden Rule plays out in Lean-oriented software
    development:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: Work regular hours, eliminate overtime, and maintain a sustainable pace.
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Help team members understand the value they provide to customers.
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build compensation and incentives plans around continuous learning and skills.
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Challenge team members without belittling them.
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hold teams, not individuals, accountable for their commitments.
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement safe working environments so that team members are not punished for
    seeking help when problems arise.
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Involve team members in analyzing problems, exploring cause and effect, and
    coming up with methods to resolve the issues at hand.
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove impediments to minimize frustration.
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While seeking stability, also provide variety to prevent boredom.
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protect the organizational knowledge base by developing stable personnel, promotions
    based on demonstrable development of relevant knowledge and skills, and meticulous
    succession plans.
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have reached the end of this section on Lean Thinking. In summary, Lean Thinking
    is about organizing work around value (products, services, information) and streamlining
    work and information flows. So far, you have learned how to evaluate value streams
    through Systems Thinking with causal loop diagrams. This helps evaluate the interconnected
    relationships of nodes or elements participating in a value stream system.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 7*](B17087_07_Final_PD_epub.xhtml#_idTextAnchor183), *Mapping the
    Current State (VSM Step 4)*, and [*Chapter 8*](B17087_08_Final_PD_epub.xhtml#_idTextAnchor209),
    *Identifying Lean Metrics (VSM Step 5)*, you will learn how to use value stream
    mapping to assess current as-is value stream activities and evaluate alternate
    to-be states to improve value across the value streams. But before we move on,
    let's take a quick look at how organizations blend Lean and Agile concepts.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Lean-Agile foundation
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section is about blending Agile and Lean concepts and practices. At first
    glance, both Agile and Lean practices have similar goals of improving customer
    value, but both development philosophies seem to approach that primary goal differently.
    So, the question then is, how do we blend the best of both approaches to make
    something better?
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: Earlier in this chapter, you learned that Agile is a set of values and principles,
    typically implemented as an iterative and incremental process, that deliver customer-centric
    value. The basic idea is that Agile teams create the most value for their customers
    when they have the flexibility to incrementally deliver small chunks of value
    with frequent customer and user reviews. This helps ensure the product stays aligned
    with current needs and priorities. You also learned that Scrum is an Agile-based
    methodology that implements a framework of empiricism. This encourages teams to
    try out different ideas and use their experiences and observations to uncover
    better ways of doing things.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, Lean seeks to improve customer-centric value by eliminating all
    waste forms and only doing what customers want. Some Lean practitioners like to
    think of the Lean concept of waste as avoiding spending time and effort on activities
    that customers don't want to pay. The challenge with that thinking is that it's
    a bit shortsighted. For example, an organization may spend money on infrastructure,
    training, and process improvements that indirectly provide more value for the
    customer, even though the immediate customer might not benefit from those investments.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: Knowing that both the Agile and Lean methodologies primary focus on creating
    customer value, the primary difference is the development intervals. Agile practitioners
    tend to think in terms of small teams providing new value incrementally across
    small iterative releases. Though the iterative release may be relatively small
    and frequent, especially compared to the traditional Waterfall model, each Agile
    Sprint is still a batch process.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: One effective way to make Agile practices leaner is to replace the Sprint iteration
    model with a Kanban-based pull model. This strategy limits the work in progress
    to a minimal number of work items and simultaneously replaces the Sprint batch
    process with single-piece workflows.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: But Kanbans are manual processes, and we can do better. For example, we can
    make additional improvements by streamlining, integrating, and automating our
    IT processes to achieve the full benefits of Lean. That is the topic of the next
    section on accelerating flows.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: Accelerating flows across IT value streams
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, you learned that Agile and Lean aim to improve customer
    value and manage product flows differently. You also learned that the quickest
    and simplest way to blend Agile and Lean practices is by moving away from the
    batch Sprint model, to a continuous flow model by using Kanban Boards and Cards.
    However, we can also streamline and accelerate our value delivery processes through
    integration and automation strategies. **Continuous integration** (**CI**), **continuous
    delivery** (**CD**), DevOps, platforms, and software factories help us achieve
    these goals.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: First, CI and CD capabilities help the IT development teams streamline, integrate,
    and automate their **software development life cycle** (**SDLC**) processes. That's
    not to say that the entire set of SDLC processes should be streamlined, integrated,
    and automated all at once. Rapid adoption may not be possible for a small IT shop
    or a small team within a larger organization that has not implemented DevOps platforms
    or software factories. But the eventual end-to-end streamlining, integration,
    and automation of the software development value stream is the ideal goal from
    a Lean perspective.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: With CI/CD capabilities, DevOps takes the Lean concepts as integrated value
    streams into the IT operation's functionality. Specifically, the IT organization
    can implement value stream management capabilities to integrate front and backend
    processes. Again, attempting to manage all these changes at once is not practical
    for most organizations. However, the ideal objective is to reach such a stage
    of integrated capabilities as quickly as possible.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: Streaming, integrating, and automating end-to-end CI/CD and DevOps processes
    help the IT organization accelerate value deliveries. They also help improve the
    quality of the delivered products and services. In *Section 2* ([*Chapter 6*](B17087_06_Final_PD_epub.xhtml#_idTextAnchor165),
    *Launching the VSM Initiative (VSM Steps 1-3)*, through [*Chapter 10*](B17087_10_Final_PD_epub.xhtml#_idTextAnchor272),
    *Improving the Lean-Agile Value Delivery Cycle(VSM Steps 7 and 8)*) of this book,
    you will learn how value stream management helps marshal value delivery from concept
    through delivery and support, while simultaneously tying its business value delivery
    objectives to its software delivery capabilities.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '*Section 3* ([*Chapter 11*](B17087_11_Final_PD_epub.xhtml#_idTextAnchor291),
    *Identifying VSM Tool Types and Capabilities*, through [*Chapter 14*](B17087_14_Final_PD_epub.xhtml#_idTextAnchor411),
    *Introducing the Enterprise Lean-VSM Practice Leaders*) identifies the leading
    VSM tool vendors and methodologists. The VSM methodologists are split into two
    camps: those that implement VSM to support digital business transformations and
    those that support the general implementation of lean practices.'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Finally, *Section 4* ([*Chapter 15*](B17087_15_Final_PD_epub.xhtml#_idTextAnchor446),
    *Avoiding DevOps Implementation Pitfalls*, through *Chapter 17*, *Conclusion –
    Enabling Lean Business Transformations*) of this book discusses using a DevOps
    platform or software factory strategies to expedite the organization's efforts
    to streamline, integrate, and automate DevOps processes as part of a business
    transformation. DevOps platforms are commercial offerings that contain integrated
    DevOps toolchains that development teams can use with minimal challenges. The
    potential downside is the limitations of the tools that have been adopted or developed
    by the platform provider.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: An alternative approach is to have an internal or external IT development organization
    build software factories that implement fully configured DevOps toolchains as
    code. With modern tools and managed configurations as code, a team can download
    and stand up a fully provisioned DevOps environment on demand and in minutes.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: With this, we will conclude our chapter.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how Agile established values and principles to
    improve software development practices and how Scrum became the prevalent Agile
    methodology. Scrum implements an Agile framework that incorporates empiricism
    to help small teams evolve their development practices and products through observation
    and experimentation. We touched on Systems Thinking to understand the software
    value stream as a complex mixture of elements that form complex relationships.
    These relationships make it difficult to understand how the interacting parts
    respond to changes in variables within the system. Causal Loop Diagram (CLD) gives
    us a tool to analyze the system-wide impacts of those types of complex interactions.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: This chapter also introduced you to the Lean Thinking and Lean software development
    concepts to add value by streamlining, integrating, and automating value stream
    activities and pulling in work matched with demands and production capacities.
    Finally, you learned how to blend Lean and Agile concepts and then accelerate
    value across your IT value streams.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to evaluate complex systems in terms
    of the participating elements and their interrelationships.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the leading Agile methodology?
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the industry-leading Lean-Agile methodology?
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the purpose of Lean Portfolio Management?
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name at least two Agile quality metrics.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do Kanban Boards and Cards help improve the flow of delivery?
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the purpose of Takt time, and how do we calculate it?
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the least complex configuration of a system with multiple nodes?
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we accelerate our value delivery processes?
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the seven forms of waste in Lean?
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Both Lean and Agile practices have primary goals to improve efficiency and add
    customer-centric value. What is the primary difference in their approach?
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Beck, K., et al. (2001) *Manifesto for Agile Software Development*. [https://agilemanifesto.org/](https://agilemanifesto.org/)
    accessed December 2, 2020.
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rupp, C.G., (2020) *Scaling Scrum Across Modern Enterprises: Implement Scrum
    and Lean-Agile Techniques Across Complex Products, Portfolios, and Programs in
    Large Organizations*. PACKT Publishing. Birmingham, England'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Poppendieck, M., Poppendieck, T. (2003) *Lean Software Development. An Agile
    Toolkit*. Addison Wesley. Boston, MA.
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
