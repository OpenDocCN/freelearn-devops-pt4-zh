- en: '[*Chapter 3*](B17087_03_Final_PD_epub.xhtml#_idTextAnchor085): Analyzing Complex
    System Interactions'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IT organizations represent complex systems on several levels. First, the process
    of software development is a system, as are the operations and support functions.
    Second, the inclusion of team members extends the software development system's
    complexity, as does their computing equipment, networks, tools, and software applications.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose the IT department supports multiple Agile or DevOps development teams
    working on a single product. In that case, each product team would function as
    both an independent system and as a component of a more extensive system â€“ a "team
    of teams." In these scenarios, all the teams must collaborate to support the ongoing
    development of the software product or digitally-enabled service. This chapter
    provides guidance on assessing the complexity of these (and any other types of
    systems) by evaluating the elements that make up the system, their connections,
    and types of interactions.
  prefs: []
  type: TYPE_NORMAL
- en: An essential analytical tool of value stream management is a modeling and visualization
    technique referred to as value stream mapping. This technique is introduced in
    the next chapter as part of the introduction to value stream management. However,
    if a value stream team only examines their activities, they may miss the broader
    scope of elements that impact their value stream as a system. They may also miss
    how those elements impact their system. This type of cross-domain complexity analysis
    is the domain of **systems thinking**, which is the topic of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Resolving IT complexity through systems thinking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing cause and effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating potential connections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limiting connections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning the vocabulary of systems thinking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing the interrelationships of system elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading **causal loop diagrams** (**CLDs**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resolving IT complexity through systems thinking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Systems thinking is an approach to evaluate the complexity of large systems
    not as a collection of individuals parts but rather the interactions between the
    elements that participate in the system. I discuss this subject at great length
    in [*Chapter 4*](B17087_04_Final_PD_epub.xhtml#_idTextAnchor104), *Systems Thinking*,
    of the book *Scaling Scrum Across Modern Enterprises*, introducing 17 CLDs related
    to Scrum-based Agile practices. So we'll only touch briefly on the subject of
    systems thinking within this book.
  prefs: []
  type: TYPE_NORMAL
- en: Systems thinking also aids in analyzing other complex business processes, including
    the interactions of connected value streams. However, in this book, the primary
    focus is on using value stream mapping to evaluate and improve business processes.
    Still, systems thinking is a precursory activity to value stream mapping. As a
    result, Lean-Agile practitioners must understand the vernacular of systems thinking,
    analyze system-level cause and effects, evaluate approaches to reduce network
    densities, and use system visualization techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Though both systems thinking and value stream mapping employ visualization and
    modeling techniques to evaluate flows, they have different objectives. Systems
    thinking aims to identify all the elements that intentionally and unintentionally
    participate in the system, determine which elements interact within the system,
    how the elements interact, and their cause and effects. In contrast, value stream
    mapping is a technique to assess the current and future state of how work is done,
    then find ways to improve it.
  prefs: []
  type: TYPE_NORMAL
- en: The impacts, causes, and effects of interacting elements are the most critical
    issues to address when evaluating complex systems' aggregate behaviors. Let's
    take a moment to find out why.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing cause and effects in systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A key concept in systems thinking is that the whole is greater than the sum
    of the parts that participate within a system. This statement is true for both
    system capabilities and complexities. It's the interrelationships between the
    parts that create complexity within a system. But the interrelationships also
    are what allow systems to do both useful and useless things. If we don't understand
    the cause and effects of the underlying interactions across the system, we can't
    begin to understand how to control the interactions in useful ways.
  prefs: []
  type: TYPE_NORMAL
- en: Participant relationships and interactions can be accidental or intentional
    within the system. For example, we can evaluate a manufacturing ecosystem as representing
    a single system with any number of participating elements that interact, causing
    both desired (*intentional*) and undesired (*unintentional*) impacts. Some of
    the elements intentionally work to support the manufacturer's operations and delivery
    functions. However, the manufacturing system can also negatively impact other
    unintentional participants.
  prefs: []
  type: TYPE_NORMAL
- en: Within the manufacturing ecosystem, intentional participants include supply
    chain partners, distributors, employees, contractors, customers, and other stakeholders
    supporting the operations. Unintentional participants include people and other
    elements affected when the industry creates health or safety problems through
    unsafe environmental practices.
  prefs: []
  type: TYPE_NORMAL
- en: From a systems thinking point of view, we need to understand how organizations
    conduct their business at a more granular level. We also need to understand the
    interactions of the participating elements. An **element** is anything that makes
    up the system, including materials, people, processes, information, and technology.
    Elements within a system are also sometimes called **nodes**. In **CLD modeling**,
    we use nodes and arrows to construct directed graphic models of cause and effect
    relationships.
  prefs: []
  type: TYPE_NORMAL
- en: Technically, a directed graphical model includes the probability of random variables
    affecting the nodes in the graph. In other words, the cause and effects can vary
    across a range of values for each system interaction. However, we don't need to
    get into that level of detail in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The challenge with understanding the interrelationships between elements within
    a system is that we may not know those relationships exist, nor how those interactions
    play out across the system, without detailed system-level analysis. We'll review
    how to visualize elements and their interactions via CLD modeling later in the
    *Visualizing the interrelationships of system elements* subsection. However, before
    we do that, let's take a quick look to see how the number of elements within a
    system dramatically impacts the number of interrelationships. Plus, we need to
    learn some of the terms used in systems thinking before getting to the *Reading
    a CLD* section. In the next section, you will learn how to calculate potential
    connections to demonstrate the exponential increase in a system's complexity through
    a geometric growth in participating elements.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating potential connections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Systems represent interconnected networks. For example, the IT organization
    within a large enterprise might have several hundred or even several thousand
    employees and contractors working across its development and operations functions.
    Additionally, those employees and contractors work with and affect other departments,
    partners, employees, stakeholders, and customers. The IT system also includes
    computers, networks, applications, and a host of other elements that participate
    in the IT ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: The organization creates policies and processes to help coordinate business
    functions and people's activities in order to achieve desirable outcomes by producing
    value-added products and services at a profit or within budget. Every one of these
    process touchpoints represents an interaction within the more extensive business
    system. Of course, there is the possibility for any number of unintentional, unplanned,
    and potentially undesirable interactions.
  prefs: []
  type: TYPE_NORMAL
- en: By now, you may be getting a sense that the growth in connections in large systems
    might be a big problem. However, unless you are already familiar with the concept
    of managing network densities, you may not realize just how fast these interconnections
    and potential relationships grow.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately for us, there is a reasonably easy way to calculate the number of
    *potential connections* (*PC* in the following formulae) between elements that
    interact within a system. We can also calculate network densities as a percentage
    of actual connections to potential connections. Let's start with the potential
    connections algorithm; the highest possible measurement of interactions across
    a system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The calculation for potential connections is![](img/B17087_03_001.png), where
    *n* is the number of nodes or element connections within the system. In any system,
    the participating elements are the nodes that create complexity through their
    interactions. The more nodes, the greater the complexity. Let''s look at some
    examples:'
  prefs: []
  type: TYPE_NORMAL
- en: If n=1, then the number of potential connections is 0, as there is nothing else
    to connect. Add another node, and the number of potential connections only grows
    by one, that is, ![](img/B17087_03_002.png). Add yet another node, 3 in total,
    and the number of connections grows to 3.
  prefs: []
  type: TYPE_NORMAL
- en: So far, the number of relationships and interactions looks very manageable.
    But now, let's grow the number of connections to 7, the size of a decent-sized
    Agile team. In this scenario, the number of potential connections is 21\. As the
    team size grows, or we add more teams working together, the number of potential
    connections explodes.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's add the team member's laptops to our Agile team example. By adding
    laptops into our systems, we create equipment-related interrelationships in our
    IT team. The laptops grow the number of nodes in our Agile system to 14, and the
    potential connections to 91\. In other words, the team and their laptops form
    91 interactions that can impact how the team interoperates.
  prefs: []
  type: TYPE_NORMAL
- en: But the Agile team also works on delivering a Sprint Backlog item over each
    Sprint. For this example, let's use an average of 10 work items per Sprint. So,
    the number of connected nodes now increases to include 7 team members, 7 laptops,
    10 work items â€“ 24 elements in total, and the number of potential connections
    exponentially jumps to 276 potential connections in every Sprint.
  prefs: []
  type: TYPE_NORMAL
- en: Do you work in a multi-team environment? To demonstrate how that further adds
    to the complexity of managing an Agile team, let's add a second team of equal
    size to our IT product development system. As a result, the number of connected
    nodes now increases to include 14 team members, 14 laptops, and 20 work items,
    expanding our Agile system to 48 elements. As a result, the number of potential
    connections grows to 1,128.
  prefs: []
  type: TYPE_NORMAL
- en: 'We could include customers and other employees they must interact with, but
    I think you get the point. Every one of those potential connections is a potential
    point of failure or has the potential to create an undesirable outcome across
    every Sprint. The growth in system connections is shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 â€“ Growth in potential system connections'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_Figure_3.1.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.1 â€“ Growth in potential system connections
  prefs: []
  type: TYPE_NORMAL
- en: As an example of how potential connections exponentially grow within a system,
    *Figure 3.1* provides a graphical depiction of accelerated PC growth from 0 out
    to 100 interconnected elements as an example of how potential connections exponentially
    grow within a system. A 10-person team has 45 potential connections, but an IT
    organization with 100 members has 4,950.
  prefs: []
  type: TYPE_NORMAL
- en: Before we leave this topic, it's important to understand that we can eliminate
    some potentially negative consequences by limiting the number of actual connections.
    That's the subject of the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Limiting connections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Often, not all elements in a system are connected. The easiest way to reduce
    system complexity is to reduce the opportunity for elements to communicate or
    interoperate with one another. Another way is to reduce the number of elements
    that participate in a system.
  prefs: []
  type: TYPE_NORMAL
- en: If you have studied Scrum or Lean-Agile scaling strategies, you probably noted
    that they all leverage small team concepts. They do this even on very large product
    development activities, sometimes involving hundreds or thousands of people. Breaking
    up work across multiple small teams is one way to limit the number of interactions
    between the people working on the product.
  prefs: []
  type: TYPE_NORMAL
- en: For example, **Scrum of Scrums** limits cross-team interactions to a handful
    of team members, called Ambassadors. The **Nexus** approach to Scrum implements
    **Network Integration Teams** (**NITs**) to manage cross-team dependencies, coordination,
    and synchronization activities. Similarly, the **Scaled-Agile FrameworkÂ®** (**SAFeÂ®**)
    implements small teams in the form of **Extreme Programming** (**XP**) and **Scrum**
    teams, with a higher-level team, called the **Agile Release Train** (**ARTs**),
    to integrate and coordinate work across a large product development effort, or
    multiple value streams involving 50-125 people split into 5-12 XP/Scrum teams.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of their specific strategies, all scaled Scrum and Lean-Agile methodologies
    seek to minimize complexity by reducing the number of participant relationships
    and interactions. In other words, we want fewer actual connections in our system
    than the potential theoretical connections.
  prefs: []
  type: TYPE_NORMAL
- en: The ratio of actual connections to potential connections is called **network
    density**. The concept of network density is important as it offers a way to minimize
    the number of potential connections in large systems and reduce their potential
    for causing adverse impacts.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 3.2* shows a set of six Lean value stream activities operating as sequential
    nodes connected along a single line. The graphic also shows the worst-case scenarios
    for each identified value stream, where all activities are interconnected. Each
    value stream includes metrics identifying the number of nodes (*n*), their potential
    connections (*PC*), actual connections (*AC*), and their network densities (*ND*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 â€“ Graphic showing nodes, potential connections, actual connections,
    and network densities'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_Figure_3.2.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.2 â€“ Graphic showing nodes, potential connections, actual connections,
    and network densities
  prefs: []
  type: TYPE_NORMAL
- en: It should be clear from the graphic that the least number of interactions, and
    therefore the least complexities, occur in situations with value streams having
    linear-sequential processes or activities. In this book, you will learn that linear-sequential
    flows are the hallmark of lean production practices and CI/CD and DevOps pipelines.
    When we reduce network density by lowering actual connections, we lower the number
    of potential failure points.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing on our previous example, ways to decrease the network density include
    having backup laptops and access to alternative software products. Another way
    to improve outcomes in a complex system is to improve policies and processes that
    reduce the impact of or repair failed connections. For example, an IT support
    group that can rapidly reprovision laptops and software can reduce the downtime
    from losing access to those resources.
  prefs: []
  type: TYPE_NORMAL
- en: We can also reduce the number of interconnections between team members and the
    work items. For example, if our team members have broad skills, they can split
    the work items to reduce the number of dependencies across the work items. We
    can also limit the number of inter- and extra-team member interactions. This issue
    is critical within cross-team interactions. It's the reason so many scaled Scrum
    methodologies implement **ambassadors** or **network integration teams** to minimize
    cross-team interactions.
  prefs: []
  type: TYPE_NORMAL
- en: In a lean system, the ideal goal is to create a streamlined set of activities
    across a value stream, much like an assembly line, enabling work to flow through
    a set of independent activities in one direction and without the need to recycle
    back to a previous activity. It should be clear from the examples shown in *Figure
    3.2* that the linear-sequential flows are much less complicated and more streamlined.
    It should also be clear that network density issues become increasingly necessary
    to resolve with the increasing growth of activities (nodes) in a value stream
    system.
  prefs: []
  type: TYPE_NORMAL
- en: So far, our sample system interactions are quite simple. Life is much more complicated
    in that each system interaction can have different types of impacts. Complex system
    interactions between elements are modeled and analyzed as **causal links**. But,
    before we get to that topic, let's take a moment to introduce the vocabulary of
    systems thinking.
  prefs: []
  type: TYPE_NORMAL
- en: Learning the vocabulary of systems thinking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The vocabulary of systems thinking is unique and not directly tied to Agile
    or Lean practices. But the concepts behind systems thinking are powerful and useful
    in helping teams collaborate in analyzing the elements and interrelationships
    within their large and complex business systems. The following list includes the
    basic terms of use in systems thinking and causal loop diagrams:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Systems**: These are complex structures of tangible and intangible things,
    principles, procedures, and social and political environments that collectively
    serve some purpose or function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Elements**: This term refers to the collection of parts that make up a system.
    These could be tangible and intangible things, principles, procedures, or social
    and political environments that participate in and guide the system''s behaviors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interconnections**: The relationshipsâ€”including physical, informational,
    formal, or informal linkagesâ€”that bind elements together within the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Function**: The purpose, goal, or objective of a non-human system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Purpose**: The purpose, goal, or objective of a human-based system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stocks**: These are tangible, quantifiable, and measurable variables within
    a system, subject to dynamic changes over time through a flow''s actions. The
    term *element* implies a type of thing at any given time; the term *stock* implies
    attributes of the elements with observable values at specific points in time.
    For example, an element might be a value stream activity, and its stock might
    be work items or materials.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Flows**: These actions dynamically change the directions of stock within
    a system, as inflows and outflows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inflows**: These indicate a direction of flow that serves to increase the
    measurable amount of stock. Inflow displays have lines with arrows that point
    to the elements accumulating stock.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Outflows**: These indicate a direction of flow that serves to decrease the
    measurable amount of stock. Outflow displays have lines with arrows that point
    away from the elements with decrementing stocks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Delays**: These occur when inflows are greater than outflows, resulting in
    an accumulation of stock. Displays of delays are indicated by writing the word
    *delay* on the arrow connecting elements, or a double hash mark striking through
    the connecting arrow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Feedback loops**: These are mechanisms that adjust flows to either stabilize
    a system or reinforce a particular trend within the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Balancing feedback loops**: These provide information or resources that bring
    a system or elements into equilibrium and maintain them within the desired range.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reinforcing feedback loops**: These provide information or resources that
    support a trend within a system, or support elements within a system. The trend
    can be either positive or negative.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Causal Loop Diagram (CLD)**: A method to visualize the interrelationships
    of elements (a.k.a. *variables*) within a system as nodes and linkages between
    nodes (a.k.a. *edges*).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Positive causal link**: This means that the cause-and-effect impact of two
    linked nodes changes the observed attributes in the same (positive) direction,
    increasing the value of the monitored attributes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Negative causal link**: This means that the cause-and-effect impact of two
    linked nodes changes the observed attributes in the opposite (negative) direction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open systems**: These are characterized by having inflows and outflows external
    to the systemâ€”that is, things that can enter or leave the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Closed systems**: These are characterized by having no net flows in or out
    of the systemâ€”that is, the system is fully self-contained and balanced.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Labels**: Use labels on everything displayed within your causal diagrams
    so that reviewers know what the elements and links represent within your system
    model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that you know the basic terms of systems thinking and causal loop diagraming,
    let's take a quick look at using them when analyzing an Agile-based development
    team as a system.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing the interrelationships of system elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section uses an example CLD from the previous book â€“ *Scaling Scrum Across
    Modern Enterprises* â€“ that describes a Scrum-based Sprint planning process (see
    *Figure 3.3*). This exercise aims not to explain the Sprint planning process but
    rather to show how the CLD modeling process works, using an Agile point of reference.
    Again, for those of you who want a more detailed understanding of using systems
    thinking and CLD techniques to evaluate the Lean-Agile process, I refer you to
    Scaled Scrum Across Modern Enterprises.
  prefs: []
  type: TYPE_NORMAL
- en: 'A Sprint Planning example is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 â€“ Sprint Planning CLD'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_Figure_3.3.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.3 â€“ Sprint Planning CLD
  prefs: []
  type: TYPE_NORMAL
- en: It's important to note that CLD arrows always close system cycles to show a
    reinforcing or balancing feedback loop. In other words, all CLD nodes connect
    back to the entry point to form a loop, no matter how large or complex the system,
    creating a reinforcing or balancing effect.
  prefs: []
  type: TYPE_NORMAL
- en: A reinforcing loop is a cycle in which changing a variable propagates through
    the system to increase or decrease a trend. In contrast, a balancing loop is a
    cycle in which the effect of changing a variable propagates through the loop and
    forces a response to counter the new trend. Our example of a CLD for the Scrum-based
    Sprint Planning process is a form of reinforcing loop, as work items entered into
    the Sprint Backlog decrements the number of work items in the Product Backlog.
  prefs: []
  type: TYPE_NORMAL
- en: In a CDL, we use lines to represent flows, and the arrows indicate the impact
    of these flows. For example, a positive arrow (+) indicates a *positive causal
    link* relationship that trends in the same direction, while negative arrows (-)
    indicate a *negative causal link*, or opposing trend.
  prefs: []
  type: TYPE_NORMAL
- en: In this model, the customer and end user requirements flow from a Sprint Review
    (a demo of the previous increments) or directly from external sources. The relationship
    is a positive causal link, as the trend is in the same direction. In other words,
    as customers and end users develop new requirements, they increase the flow of
    prospective work items.
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, note the link between the number of items in the product backlog
    and the number of refined items in the product backlog, a negative causal link.
    This relationship suggests that the refinement process has a general trend to
    reduce the number of work items that flow out of the backlog.
  prefs: []
  type: TYPE_NORMAL
- en: Reading a CLD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we end this chapter, let's work our way around the Sprint Planning Process
    (displayed in *Figure 2.10* in the previous chapter). This exercise will help
    you understand how to assess the relationships described across the CLD model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sprint planning is part of Scrum-based Agile methodology. I previously noted
    that there are 17 CLD models in my previous book. However, the 17 CLD models span
    3 distinct processes:'
  prefs: []
  type: TYPE_NORMAL
- en: Sprint Planning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project-to-product team transformations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise implementations of Scrum
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All three CLD models are related to analyzing IT functions, but each has a
    very different scope and set of objectives. For example, the Sprint Planning model
    is composed of five separate CLDs. The five CLDs break out loosely around specific
    areas of focus that the teams might want to analyze. These areas include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A CLD model of analyzing Product Backlog priorities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An open CLD model of Product Backlog refinement activities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A CLD model of design and work clarifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A CLD model of analyzing work against team capacity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A CLD model of negotiations and trade-off activities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is only one resulting Sprint Planning CLD model, but the team may prefer
    to break the work out along the lines of concern and build the Sprint planning
    CLD model incrementally. Let's now look at each of these sub-CLD models briefly.
  prefs: []
  type: TYPE_NORMAL
- en: CLD model of analyzing Product Backlog priorities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The goal of this CLD (see *Figure 3.4*) is to understand the elements involved
    in building a backlog of customer and end-user requirements. The model is shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 â€“ CLD model of analyzing Product Backlog priorities'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_Figure_3.4.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.4 â€“ CLD model of analyzing Product Backlog priorities
  prefs: []
  type: TYPE_NORMAL
- en: Customer and end-user requirements flow into or through the Sprint Review process
    and external processes beyond the scope of this Sprint Planning CLD model. The
    arrows *with* the positive (+) signs indicate a positive causal link, which indicates
    that the trend or impact moves in the same direction. In other words, the addition
    of requirements adds to the stock of items in the product backlog.
  prefs: []
  type: TYPE_NORMAL
- en: But note that this positive causal link does not mean the flow is only an additive
    process. The (+) and (â€“) signs on the arrows do not imply a mathematical addition
    or subtraction process, only whether the flow is reinforcing a trend, or not.
    As a result, the positive (+) flow as a relationship between elements also means
    a reduction in requirements. This leads to a reduction of the stock of items in
    the Product Backlog.
  prefs: []
  type: TYPE_NORMAL
- en: Open CLD model of Product Backlog refinement activities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The goal of this CLD (see *Figure 3.5*) is to understand the elements involved
    in refining the work items listed in the product backlog. To clarify, this means
    decomposing epics into user stories and understanding the development tasks. We
    can see this in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 â€“ Open CLD model of Product Backlog refinement activities'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_Figure_3.5.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.5 â€“ Open CLD model of Product Backlog refinement activities
  prefs: []
  type: TYPE_NORMAL
- en: The example shown in *Figure 3.5* includes arrows with negative (-) trends,
    which means the relationships between elements are negative causal links between
    the number of items in the backlog and the number of refined product backlog items.
    There is a similar negative causal link between the number of refined product
    backlog items in the product backlog and the prioritized items in the product
    backlog.
  prefs: []
  type: TYPE_NORMAL
- en: It may be a bit difficult at first glance to understand what's going on, particularly
    for those who don't understand the details. The negative causal links indicate
    that as the node in which a link starts increases, the other node decreases, and
    vice versa. In other words, both the refinement and prioritization activities
    have an opposing effect on the stock of work items. This oppositional effect happens
    because there are limits on how much work the teams can take to refine and prioritize.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose, for example, a customer wants a new feature included in the next release.
    The item is included in the product backlog as an epic or user story. The item
    must be refined to ensure the team fully understands the requirements, and whether
    they are a priority. The negative links indicate the number of refined item trends
    in the opposite direction from the number of initial items that go into the backlog.
  prefs: []
  type: TYPE_NORMAL
- en: The same trend occurs as the product owner decides which of the refined work
    items have a high priority. However, those items that have a high priority inform
    the Sprint Goal in the same direction. So, in other words, an increase in the
    number of high-priority work items increases the scope of the Sprint Goal. Likewise,
    if stocks of refined and prioritized work items dwindle, the scope of the Sprint
    Goal becomes smaller.
  prefs: []
  type: TYPE_NORMAL
- en: CLD model of design and work clarifications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The goal of the next CLD (see *Figure 3.6*) is to understand the elements involved
    in the CLD model of design and work clarifications. This CLD is a visualization
    of the work item design and scoping activities. Note that all relationships between
    elements have positive causal linkages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 â€“ CLD model of design and work clarifications'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_Figure_3.6.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.6 â€“ CLD model of design and work clarifications
  prefs: []
  type: TYPE_NORMAL
- en: In this CLD, the team requires clarifications from the product owner and other
    sources, such as customers and end users, on the details of the requirements.
    Improved clarifying details improve the design and ability to scope the effort,
    and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we also have a positive causal linkage from another part of the model
    that describes the Sprint Goal in terms of priorities in the product backlog.
    Understanding the Sprint Goal leads to a better understanding of the design requirements
    and scope of the effort.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, there is a positive causal link between the *Define Design requirements*
    element and the *Scope the work effort* element. As the team better understands
    the design, they can better understand the work scope in the upcoming Sprint.
  prefs: []
  type: TYPE_NORMAL
- en: CLD model of analyzing work against team capacity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This CLD (*see Figure 3.7*) aims to understand the elements involved in the
    CLD model of analyzing work against team capacity. Though this is a larger and
    more complex CLD, the concepts remain the same, and we just have to work our way
    through the linkages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 â€“ CLD model of analyzing work against team capacity'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_Figure_3.7.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.7 â€“ CLD model of analyzing work against team capacity
  prefs: []
  type: TYPE_NORMAL
- en: Without seeing this part of the CLD in context with the entire Sprint Planning
    CLD, it isn't easy to see where we should start. However, we should start with
    the element titled *Defined Sprint Goal in context with product backlog priorities*.
    In the next subsection, we'll see how the interactions in this CLD exit to another
    CLD via the *# of items in the Sprint Backlog node*. Also, note that this CLD
    includes several smaller CLD loops. The activities are linked through their participation
    in evaluating team capacity against the desired product backlog priorities.
  prefs: []
  type: TYPE_NORMAL
- en: The importance of this CLD is that it defines the elements and interactions
    necessary to define the initial tasks in the context of team capacities and their
    ability to self-organize around the work planned for the Sprint. Ultimately, these
    relationships lead to decisions on the number (and type) of work items added into
    the Sprint backlog. Note that the items also reinforce the design criteria for
    the product's development within the Sprint.
  prefs: []
  type: TYPE_NORMAL
- en: CLD model of negotiations and trade-off activities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The goal of this CLD (see *Figure 3.8*) is to understand the CLD model of negotiations
    and trade-off activities. The elements and interactions in the previous CLD â€“
    analyzing work against team capacity â€“ impacted design-related decisions. But
    note that the team has added a CLD loop to analyze design-related impacts against
    their capacity to determine whether trade-offs are required and need to be negotiated
    with the product owner. For example, there may be technical debt issues that need
    to be addressed before taking on some of the higher-priority work items:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.8 â€“ CLD model of negotiations and trade-off activities'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_Figure_3.8.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.8 â€“ CLD model of negotiations and trade-off activities
  prefs: []
  type: TYPE_NORMAL
- en: We've now completed our review of the entire Sprint Planning CLD and the topics
    for this chapter. The critical thing to know about CLD modeling is that there
    is no universal truth. What works in your value stream may not be appropriate
    or work in another organization's value streams, even when they have similar purposes.
  prefs: []
  type: TYPE_NORMAL
- en: We'll dive into value stream management basics as a Lean-oriented modeling and
    visualization tool in the next chapter. But, before we do that, let's summarize
    what you learned in this chapter. Then, take the quick test to see if you have
    any areas you need to review.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned that systems are much more complicated than the
    sum of their parts. The number of potential connections and interactions explodes
    with a geometric increase as the number of participating elements increases. You've
    learned how to use systems thinking to analyze the complexities of the elements
    and their relationships. You've also learned the vocabulary of systems thinking
    and how to use CLD as a modeling and visualization technique to work through complex
    interrelationships. Next, you got to use your newfound knowledge in systems thinking
    and CLD visualizations to review the Sprint Planning process. Finally, you learned
    that systems thinking takes a different approach to modeling and visualizing flows
    than value stream mapping.
  prefs: []
  type: TYPE_NORMAL
- en: With this knowledge, you now have the skills to assess the participating elements
    and their relationships within a system â€“ relationships that contribute to complexities
    through their interactions. Systems thinking is an analytic approach to understanding
    the impacts, causes, and effects of interconnected and interacting elements. In
    contrast, value stream mapping is a technique to assess the current and future
    state of how work is done, then find ways to improve it.
  prefs: []
  type: TYPE_NORMAL
- en: Where systems thinking gives us the tools to discover and assess the impacts
    of interrelating elements, value stream mapping gives us the tools to improve
    work and information flows. We'll explore the components of value stream management
    in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the value of systems thinking?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the two types of relationships elements have within a system?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why do we model the connections and interactions of elements within a system?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the purpose of closing loops in causal loop diagraming?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the least complex configuration of a system with multiple nodes?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the equation to determine the number of potential connections in a system?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why do we try to reduce the number of actual connections?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the equation for calculating network densities?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the purpose of the arrows in a CLD diagram?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between positive and negative causal links?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Rupp, C.G., (2020) *Scaling Scrum Across Modern Enterprises: Implement Scrum
    and Lean-Agile techniques across complex products, portfolios, and programs in
    large organizations*. Packt Publishing. Birmingham, England'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
