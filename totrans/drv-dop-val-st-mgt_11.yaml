- en: '[*Chapter 9*](B17087_09_Final_PD_epub.xhtml#_idTextAnchor234): Mapping the
    Future State (VSM Step 6)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned how to map the current state, perform a
    Lean office assessment, and observe and record critical Lean metrics for the value
    stream. You also learned how to document important information relevant to the
    flow of work and information across the value stream. Most importantly, you learned
    how to visualize work and information flows from the perspective of Lean.
  prefs: []
  type: TYPE_NORMAL
- en: The work that's been performed in the current VS mapping exercise is documentary
    in nature. It does not involve much imagination – just accuracy in discovery (through
    Gemba walks), recording, and mapping. Now, we will enter the creative phase of
    Lean value stream mapping and design an improved future state. **Future state
    mapping** occurs in three sequential phases to help evaluate methods and improve
    the value stream's ability to meet customer demands, establish and maintain continuous
    flows, and level the distribution of customer orders to maximize operational efficiencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Modeling three future state objectives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phase 1 of future state mapping – customer demand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phase 2 of future state mapping – continuous flows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phase 3 of future state mapping – leveling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Specifically, you will learn how to develop your skills by combining Lean and
    Agile practices to implement continuous improvements, and incorporate the concepts
    of Lean Thinking in your CI/CD and DevOps pipeline implementations. You will start
    this learning journey by covering an introduction to the three phases of future
    state modeling: the customer demand phase, the continuous flow phase, and the
    leveling phase.'
  prefs: []
  type: TYPE_NORMAL
- en: Modeling three future state objectives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section provides instructions on conducting future state mapping exercises
    across three phases, involving analyzing customer demands, continuous flows, and
    leveling. The following list contains quick descriptions of the work involved
    in each phase:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Customer demand phase**: This includes analyzing customer demands for your
    products or services so that they include quality objectives and lead time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Continuous flow phase**: This helps improve flows so that our customers receive
    the right products or services at the right time and with the right features and
    quantities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Leveling phase**: This helps distribute work evenly across product lines,
    reduce waiting times, and eliminate batch processing (that is, the goal is to
    achieve single-piece flows).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While there is likely to be overlap between the three phases, the initial analysis
    will follow these three stages.
  prefs: []
  type: TYPE_NORMAL
- en: Value streams operate as pipeline flows that have inputs, a sequence or work
    activities, and outputs. In more complex environments, we can expect integrated
    branching with other value streams or even activities. For these reasons, it is
    virtually impossible to understand what our optimized and continuous activity
    flow targets need to be, if we don't understand how demand flows into our value
    stream.
  prefs: []
  type: TYPE_NORMAL
- en: As we identify and coordinate demand flows inputs, the VSM team can then analyze
    how to improve activity and information flows to match demand rates. Finally,
    we can expect customer demands to vary over time, so we need to understand how
    to balance production workloads to minimize bottlenecks, waiting, and other forms
    of waste on an ongoing basis.
  prefs: []
  type: TYPE_NORMAL
- en: Since the future state phases follow the aforementioned sequence of analysis,
    we'll start our introduction to the three phases in the same order, starting with
    analyzing customer demand.
  prefs: []
  type: TYPE_NORMAL
- en: Phase 1 – customer demand
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This phase of the future mapping exercise is expressly set up to ensure the
    VSM team starts its Lean improvement objectives with the customer's needs firmly
    in mind. But we're not talking about understanding customer requirements in terms
    of features and functions, as that type of analysis lies with the product management
    function. In other words, work item identification, selection, and prioritization
    are part of the Agile product management and product backlog refinement processes
    in an IT context.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this phase, you need to answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What are your customers' demands for this value stream?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How many customers do you have?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are the types of customers or market segments, or niches, that are supported?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the predictability of orders, including seasonal adjustments, across
    all customers or types of customers by product line?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are you overproducing, underproducing, or meeting demand?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does your ability to meet your customer demand vary over time? If so, why?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can you meet your customer delivery dates with your current resources and capabilities?
    If not, why not?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you need to carry buffer or safety inventories? If so, which type, why, and
    how many?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What problems need to be solved right now?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How clean and organized is your value stream's facilities and operations? If
    lacking, what are the negative impacts and what do we need to do to reduce clutter
    and disorganization?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In Lean, the focus of meeting customer demand lies in the area of fulfillment.
    In other words, the VSM team works to help the value stream improve its rate of
    deliveries. Improving the ability to meet customer demand in the future state
    is a multi-step process of addressing the following concerns:'
  prefs: []
  type: TYPE_NORMAL
- en: Calculate Takt time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Establish pitch.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjust buffers and inventories.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve the working environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Resolve immediate problems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The VSM team starts their future state – customer demand-related analysis –
    by calculating the value stream's Takt time.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating Takt times
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Understanding Takt is the first order of priority as it is a measure of how
    often the value stream needs to deliver its products or service to meet customer
    demand. We can't find out how much we need to improve our deliveries if we don't
    know our demand targets.
  prefs: []
  type: TYPE_NORMAL
- en: '**Takt time** is the pace or rate at which customers demand delivery of our
    products or services. We calculate Takt time by dividing *net available operating
    time* by the *number of products required over time*. **Net operating time** is
    the work hours available over a specific period (that is, 7 hours in a shift,
    14 hours of operation in a day, or 2,240 hours per month).'
  prefs: []
  type: TYPE_NORMAL
- en: 'When calculating the net operating time, make sure to reduce the total time
    to account for meetings, health breaks, lunch breaks, and other non-value-added
    activities. So, in an 8-hour shift with two 15-minute health breaks, a 30-minute
    lunch break, and a 15-minute Daily Scrum or standup meeting, the net operating
    time is 405 minutes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Net operating time=((8 hrs*60 min) – 15 min – 15 min – 30 min – 15 min) =>
    405 min*'
  prefs: []
  type: TYPE_NORMAL
- en: 'If our daily customer demand rate is 810 units per day, our Takt time can be
    calculated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*405 min – 810 units/day=.5 minutes per unit*'
  prefs: []
  type: TYPE_NORMAL
- en: In other words, with a Takt time of .5 minutes per unit, you need to produce
    two units every minute. Manufacturers of large commercial aircraft or ships don't
    typically have a requirement to deliver multiple times per day. However, automotive
    and electronic equipment manufacturers usually do.
  prefs: []
  type: TYPE_NORMAL
- en: In the traditional Waterfall-based systems or the **software development life
    cycle** (**SDLC**) model, software development teams often released new products
    annually – usually initiated as time-bound projects aligned with fiscal year budgets.
    Unfortunately, the strategy didn't work out very well for many reasons. In contrast,
    modern Agile practices allow software development teams to deliver new functionality
    over 1 to 4 weeks.
  prefs: []
  type: TYPE_NORMAL
- en: However, even with Agile practices, software product managers may choose to
    release software into the production environments much less frequently. For commercial
    products, delivery activities may have to align with marketing and sales promotions.
    In a BPI context, new software enhancements affect business processes that require
    ancillary activities to create and deploy sysadmin support guides and training
    aids to go along with the software, to the operations staff and users.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, **continuous integration and continuous delivery** (**CI/CD**)
    tools and practices enhance Agile practices and make it possible to deploy new
    software releases much more frequently. IT development shops may start by integrating
    software engineering tools to form integrated toolchains that help automate and
    accelerate flows across portions of the overall SDLC process.
  prefs: []
  type: TYPE_NORMAL
- en: With increased maturity, the IT organization implements an integrated and automated
    toolchain that supports the flow of work and information across both the software
    development and operations functions. Otherwise known as **DevOps pipelines**
    or **DevOps platforms**, these integrated and automated tools significantly improve
    the speed and reliability of software delivery.
  prefs: []
  type: TYPE_NORMAL
- en: For example, a modern DevOps environment's continuous deployment capability
    allows new features and functionality to be released into production environments
    multiple times a day. Moreover, a mature DevOps pipeline allows a development
    team to stand up multiple test environments on demand and rapidly check functionality,
    system load, performance, and stress capabilities before deployment.
  prefs: []
  type: TYPE_NORMAL
- en: The rapid pace of competitive change among the major online retailers, insurance
    companies, manufacturing firms, and healthcare providers helps justify the investments
    in the DevOps pipelines and platforms. As noted previously, DevOps capabilities
    are the table stakes that are necessary to compete in our digital economy and
    meet our customers' evolving demands. And Takt time sets the pace.
  prefs: []
  type: TYPE_NORMAL
- en: Establishing pitch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Pitch** is the amount of time needed for a value stream to make one container
    of products. In an ideal world, customer orders would arrive one at a time, in
    lot sizes of one, at a constant rate of speed, and we''d be able to process those
    orders as single-piece flows at the same rate of speed. But that''s seldom the
    case for most producers. Moreover, our supply chain partners may not be able to
    deliver materials and parts just to satisfy one customer order, if for no other
    reason, due to the fact that the cost of shipping physical products in bulk is
    usually cheaper.'
  prefs: []
  type: TYPE_NORMAL
- en: Transport costs are not a concern in software delivery when they're deployed
    via internet connections. But software delivery does become an issue when it's
    packaged as a CD ROM or as part of a physical product.
  prefs: []
  type: TYPE_NORMAL
- en: For these reasons, it's challenging to match production rates to exact Takt
    time, and production schedulers must find ways to accommodate for these variances
    efficiently. That is the goal of establishing pitch – to make sure the organization
    can handle changes in demand in the most efficient manner.
  prefs: []
  type: TYPE_NORMAL
- en: Before learning how to calculate pitch, we need to understand **pack-out quantity**
    because it's part of the pitch measurement. Pack-out quantities are the number
    of items a customer (internal or external) wants to be delivered together as a
    lot, usually moved in a container during transport.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to think about pack-out quantity is to imagine building enough
    parts to fill shipping cartons or shipping containers bound for a customer. If
    we can produce single-piece flows and ship our parts one at a time, our pack-out
    quantity is one. However, if we supply products to fulfill our retailers' orders,
    the pack-out quantities might vary by time of year, product type, and each customer's
    sales volume.
  prefs: []
  type: TYPE_NORMAL
- en: 'The calculation for pitch is fairly simple, which is *Takt time multiplied
    by the pack-out quantity*. If, for example, our optimal pack-out volume for product
    *A* is 100 parts per shipment, and our Takt time of 400 releases of Product *A*
    per day, our pitch can be calculated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Pitch=400 parts per day X 100 parts/ shipment = 4 shipments per day*'
  prefs: []
  type: TYPE_NORMAL
- en: In other words, the value stream must ship four lots of 100 products per day.
  prefs: []
  type: TYPE_NORMAL
- en: As you think about what pitch represents, it's essential to understand that
    Takt time is customer-driven, but pack-out quantity may or may not be. Therefore,
    there are several factors you must consider when considering your pitch.
  prefs: []
  type: TYPE_NORMAL
- en: Customers may not choose to purchase or receive one product at a time. Some
    customers may request shipments of varying lot sizes, perhaps due to seasonal
    adjustments. Also, the organization may not have the ability to produce products
    most efficiently as single-piece flows yet, due to lengthy setup and changeover
    times and batch processes.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, it may be preferable to allow the value stream flows to proceed in
    larger lot sizes to minimize part and material changeovers. Finally, the cost
    of shipping is often an essential factor when determining optimal delivery lot
    sizes.
  prefs: []
  type: TYPE_NORMAL
- en: In software delivery organizations, pack-out quantity and pitch become factors
    in Agile shops that release across **Sprints**. For example, an Agile **Scrum**
    shop evaluates their pack-out quantity as the number of user stories completed
    per Sprint, which is their pitch.
  prefs: []
  type: TYPE_NORMAL
- en: Many IT organizations have infrastructure constraints that may limit the number
    of testing servers they can stand up in parallel. In those cases, the pack-out
    quantity is the number of parallel tests they can run, and their pitch is the
    duration of the testing activity.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, customers may not be willing to receive new features one at a time
    in production, especially when those features impact business processes and the
    need to inform and train staff. Each release has a pack-out quantity of features
    in this context, and the pitch is the period between releases.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding production controls
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When organizations must process work items in larger lot sizes, the schedulers
    should implement a **production control** mechanism. Examples include **Kanban
    bins** or **Heijunka boxes** to level the flow of work items by volume and the
    types of work items that are produced.
  prefs: []
  type: TYPE_NORMAL
- en: The value stream operators still pull work items into their workstations. But
    they pull the entire lot, not just one part. For example, in manufacturing, the
    parts might come in a bin, and the operators complete their work at a piece rate
    that the design of their specific activity allows. Then once the bin has been
    refilled, the next operator in line can pull the entire lot into their workstation
    when they have available capacity.
  prefs: []
  type: TYPE_NORMAL
- en: In software delivery value streams, the software engineers pull the work items
    from the **Sprint Backlogs** and complete their work to implement and test the
    related user story's functionality. In effect, Sprint Backlogs serve as types
    of Heijunka boxes to manage the flow of a collection of user stories that flow
    together through the development and test activities.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows a Sprint Backlog portrayed as a container for the
    user stories undergoing development within an upcoming Sprint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 – Sprint Backlog as a type of Heijunka box'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_09_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.1 – Sprint Backlog as a type of Heijunka box
  prefs: []
  type: TYPE_NORMAL
- en: The team has selected the six highest priority items for the upcoming 2-week
    Sprint. However, the product owner releases an average of 20 new requirements
    into the product backlog every 4 weeks. Due to this, you need to manage your development
    team's ability to support your customer's demand.
  prefs: []
  type: TYPE_NORMAL
- en: Let's assume that the development team members, after breaks and meetings, work
    7 hours per day for a total of 140 net operating hours per 4-week month, or 70
    hours throughout a 2-week Sprint. Therefore, no matter which duration you choose,
    your Takt time will be 7 hours per work item. In other words, a new work item
    comes into our IT value stream, on average, every 7 hours.
  prefs: []
  type: TYPE_NORMAL
- en: Since the development team selected six items for their Sprint Backlog, the
    pitch for this lot size is the *Takt time multiplied by the number of items selected
    for the Sprint*, or 42 hours. In other words, the development team must initiate
    a new lot of six work items within 42 hours to match the Takt time delivery rates.
  prefs: []
  type: TYPE_NORMAL
- en: Since there are 70 net operating hours available in every 2-week Sprint duration,
    it's tempting to think that you should have no problems meeting the demand. But
    hold on – the VSM team's work is not done yet. For one, we need to evaluate the
    pitch in terms of how long it takes to process a lot of six work items across
    the entire value stream.
  prefs: []
  type: TYPE_NORMAL
- en: If we had a proper automated and continuous flow across our IT value stream,
    we may not be concerned about this. However, under Scrum-based Agile practices,
    the development team can only work on those six items over the next 2 weeks.
  prefs: []
  type: TYPE_NORMAL
- en: Review the metrics displayed in the current value stream map shown in the preceding
    diagram, and the metrics tables in [*Chapter 8*](B17087_08_Final_PD_epub.xhtml#_idTextAnchor209)*,
    Identifying Lean Metrics (VSM Step 5)*, in *Figure 8.1* (*Table of total lead
    time, total value-added, and rolling C/A*) and *Figure 8.2* (*Table of Lean metrics
    across an IT value stream*). We know the **total lead time** (**TLT**) across
    the entire IT value stream is 328 hours, which is a little more than 8 weeks in
    duration. Most of the time is spent waiting in the product backlog queue or waiting
    on a new release as a feature.
  prefs: []
  type: TYPE_NORMAL
- en: On the positive side, our **total value-added time** (**TVT**) time is 57 hours
    across the entire IT value stream, which is well within the 72 net operating hours
    available within a Sprint. On the negative side, there are 80 hours of lead time
    in the development-related activities and another 80 hours of lead time in the
    release-related activities.
  prefs: []
  type: TYPE_NORMAL
- en: The VSM team has some work to do to resolves issues related to waiting and mismatched
    cycle times. For example, the work items may end up queuing again at testing if
    the infrastructure is not set up to handle testing on demand in single-piece flows.
    Similarly, the tested software work items, now available as tested features, may
    sit yet again in a queue, waiting to be released to the customer's production
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: In Agile environments, product releases into production may occur with every
    Sprint, but they are more often released in less frequent and formalized product
    releases. The formalized releases give us time to implement marketing promotions
    and sales campaigns for commercial deliveries, and socialization and training
    when software deliveries impact critical business processes.
  prefs: []
  type: TYPE_NORMAL
- en: Waiting is a major problem in the sample IT software delivery value stream.
    Since we've already noted that queues sometimes become necessary or unavoidable,
    let's discuss how to manage them.
  prefs: []
  type: TYPE_NORMAL
- en: Managing buffers and safety inventories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, you've learned how to use Takt time and pitch to manage flows to meet
    customer demand. But we also need to manage our buffers and safety inventories
    to ensure there's always **work in progress** (**WIP**) to support our customers'
    needs. However, we cannot have so much inventory that we introduce problems artificially,
    creating product delays and increasing our carrying costs. We already know that
    **WIP** waiting is a problem in the sample IT value stream, so let's start there.
  prefs: []
  type: TYPE_NORMAL
- en: Eliminating work in progress queues
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before we go any further, it's essential to understand the need to eliminate
    all **work-in-process buffers** of work items and materials. WIP queues simply
    hide problems and don't, in any way to help improve flows. WIP queues are merely
    mechanisms to hide problems with flow. The only inventories Lean allows is for
    carrying finished goods, but even then, within strict limits.
  prefs: []
  type: TYPE_NORMAL
- en: It's also important not to confuse the concept of inventories with the processing
    work items in lots, as described in the previous section on establishing pitch.
    The word inventory connotes the total number of materials, work items, or products
    contained within our value stream pipelines, or in sections of our value stream
    pipelines. In contrast, a lot size is a mechanism that's used to flow some number
    of work items (materials or products) together through the value stream to improve
    flows.
  prefs: []
  type: TYPE_NORMAL
- en: For example, when a software development team selects a list of work items from
    the Product Backlog, the resulting Sprint Backlog is, in effect, a lot size that
    the team judges most appropriate for completion during the upcoming Sprint.
  prefs: []
  type: TYPE_NORMAL
- en: Flowing work items in Sprint Backlogs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the short run, until we can achieve single-piece flows, it may be more efficient
    to flow work items in larger lot sizes. This limitation is due to uneven flow
    rates across value stream activities with mismatched cycles, setup times, and
    batch processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Such is the case in our IT value stream example. We gain productivity improvements
    by implementing Agile practices for iterative and incremental development while
    minimizing WIP lot sizes of work items via the Sprint Backlogs. Effectively, this
    is the purpose of Sprint backlogs in IT-related value streams: to control product
    development flows in manageable bites. But flowing work items in lots is not the
    same as allowing those work in progress items to queue and wait between activities.'
  prefs: []
  type: TYPE_NORMAL
- en: In an Agile environment, a common approach is to select a "lot" of work items
    from the product backlog for an upcoming Sprint, and then manage the flow across
    the Sprint using a Kanban Board. Later, when the IT shop implements a mature CI/CD
    or DevOps Pipeline – to streamline, integrate, and automate their SDLC processes
    – the IT value stream can implement single-piece flows against work items queued
    in the product backlog.
  prefs: []
  type: TYPE_NORMAL
- en: Managing flows with Kanban Boards
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another strategy is to eliminate Agile-based Sprints altogether and instead
    move to a pure **Kanban-oriented** production control strategy. In a Kanban system,
    the development team members pull refined and prioritized work items directly
    from the product backlog. The team members work on each item from start to finish
    across the development pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: It takes a reasonably mature CI/CD capability to implement a Kanban-oriented
    IT production control strategy effectively. Without integration and automation
    of SDLC activities, the team spends a great deal of their time on non-value-added
    work associated with setting up and configuring development, testing environments,
    and waiting on test results.
  prefs: []
  type: TYPE_NORMAL
- en: In a proper Kanban system, all work items in the Sprint Backlog must flow through
    the **SDLC** before the Agile/Scrum team takes on new work. In other words, Kanban
    and Agile practices do not eliminate the traditional SDLC activities of coding,
    building, integrating, merging code, configuring, provisioning development and
    test environments, performing unit, integration, system, and a host of other critical
    tests.
  prefs: []
  type: TYPE_NORMAL
- en: But these activities are performed more frequently to accommodate the production
    of smaller increments of new functionality across each iterative development cycle.
    **Integration** and **automation** improve flow and help eliminate waste across
    an SDLC, and value stream management helps prioritize and drive those IT value
    stream improvements.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows the Kanban production control strategy implemented
    within an IT value stream. Note that the Kanban Board does not reference specific
    SDLC tasks in the development pipeline. Instead, these activities are all encapsulated
    within the **In Progress** and **Verify** phases of the Kanban-oriented product
    workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 – Kanban Board for an IT value stream'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_09_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.2 – Kanban Board for an IT value stream
  prefs: []
  type: TYPE_NORMAL
- en: In the meantime, the **pull-oriented production control strategy** of Kanban
    prevents the Scrum team from taking on new work until they've finished the user
    stories in the Sprint Backlog.
  prefs: []
  type: TYPE_NORMAL
- en: The only recourse is for the Scrum team to split the user stories across team
    members and work each user story from front to end across all relevant SDLC activities,
    up through the system, including load, stress, and performance testing. If they
    occur at all, those types of testing activities tend to be run in batches, just
    before the product is released into the production environments.
  prefs: []
  type: TYPE_NORMAL
- en: Improving flows with CI/CD pipelines
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unfortunately, pushing testing to just before the product's release brings up
    problems associated with batch processing. Any defects or bugs hiding in the code
    will be found when the IT department is planning to release the software product,
    which will push back the release date. Moreover, the integrated code's complexity
    at that late stage makes it difficult to isolate and debug the offending code,
    APIs/ web services, queries, security, computing, or network-related problems.
  prefs: []
  type: TYPE_NORMAL
- en: In short, Kanban and Scrum are inconsistent practices unless the development
    team has a mature CI/CD pipeline. With CI/ CD capabilities, the development team
    can work on each user story and feature individually from end-to-end without delays.
    At that point, the team needs to evaluate the length of their Sprints and how
    many work items they want to queue in a Sprint Backlog. Remember, your goal in
    Lean is to achieve single-piece flows ultimately. The same goal is valid for Lean-Agile
    practices.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know that it is not a Lean practice to allow WIP queues, let's
    look at where allowing queues and waiting does make sense.
  prefs: []
  type: TYPE_NORMAL
- en: Allowing finished goods inventories
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In Lean, there are two types of inventories to manage within our value stream:
    **buffer inventories** and **safety stocks**. Both are examples of finished goods
    inventories. The term finished goods simply means that the products have completed
    development and passed QA/testing but are being held for some reason prior to
    sale.'
  prefs: []
  type: TYPE_NORMAL
- en: In software development, the release of software components and products can
    be delayed (stored) after meeting their acceptance criteria for the Definition
    of Done, and the products are technically ready to be shipped to a customer, a
    retail or app store, or installed within a production environment. A primary reason
    for making such delays is to make sure other elements of the delivery are in place.
  prefs: []
  type: TYPE_NORMAL
- en: For example, software products may go out as part of the release in a physical
    product or be delayed as part of a larger release of capabilities. Software deliveries
    may also be delayed so that they coincide with marketing and sales promotions,
    or with the deployment of new business processes.
  prefs: []
  type: TYPE_NORMAL
- en: '*Buffer inventories* are extra stocks of finished products that the organization
    carries to meet customer demand when customer demand rates change; that is, changes
    in Takt time. In contrast, *safety stocks* are inventories of finished goods that
    are used to meet ongoing customer demand when the value stream''s flow is disrupted,
    such as equipment failures, power outages, labor issues, and unexpected quality
    issues. Buffer inventories and safety stocks are stored and independently managed
    as they serve two distinctly different purposes.'
  prefs: []
  type: TYPE_NORMAL
- en: However, it's also important to understand that the concept of *finished goods*
    does not merely include the completed work items that are produced by your value
    stream. Finished goods can also include materials and parts that have been procured
    from your supply chain vendors. It may make sense to carry some of these types
    of inventories to prevent the starvation of your value stream if your value stream
    partners, or their transport or distribution services, run into delivery problems.
  prefs: []
  type: TYPE_NORMAL
- en: These concepts are particularly relevant when your software products are embedded
    in physical products, such as control systems in manufacturing equipment and automobiles,
    or to support IoT-based value delivery capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Internet of Things (IoT)
  prefs: []
  type: TYPE_NORMAL
- en: IoT is a term that describes a network of physical objects that have embedded
    sensors, software, and other technologies that enable internet-based connections
    and data to be exchanged with other connected servers, devices, and information
    systems. Moreover, IoT capabilities allow us to deliver product feature enhancements,
    such as updating the navigation systems in automobiles, trucks, aircraft, ships,
    and other transport systems.
  prefs: []
  type: TYPE_NORMAL
- en: With software products powering so many of our modern-day products and services,
    organizations must carefully manage inventories of work items (that is, software,
    hardware, and other physical products and components). However, organizations
    must also manage their resources across all organizational value streams to support
    variations in customer demand.
  prefs: []
  type: TYPE_NORMAL
- en: Managing buffer and safety resources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The inventories concept is not limited to merely managing stores of parts, materials,
    and completed work items. The value stream may require buffer and safety resources
    to ramp up production in periods of high demand or when our value stream operators
    call in sick. Buffer and safety resources include the use of overtime hours, hiring
    temporary workers or retirees, or borrowing staff from other departments.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, we may need to install excess capacity in equipment or tools to manage
    flows across varying customer demand loads, or to make up for lost time when the
    value stream unexpectedly shuts down for whatever reason. It's also possible to
    hand off excess work to other value streams or partners or contractors with excess
    equipment and human resource capacities. In the latter situations, the organization
    must take proactive steps to ensure the partners/contractors can deliver equivalent
    quality and costs.
  prefs: []
  type: TYPE_NORMAL
- en: Employing finished goods supermarkets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Inventories help maintain flow with disruptions in demand and availability of
    parts, materials, and products. But we can also use inventories to help enforce
    our pull-oriented production control strategies. Inventories that are used for
    this purpose are called **finished goods supermarkets**.
  prefs: []
  type: TYPE_NORMAL
- en: The idea here is that products are pulled on demand from finished goods inventories
    to fulfill customer orders, and the value streams quickly replenish those items.
    Conceptually, finished goods supermarkets operate in much the same way your local
    grocery stores operate. Customers pull products off the grocery store shelves,
    and stocking clerks replenish those inventories from their finished goods buffer
    stores.
  prefs: []
  type: TYPE_NORMAL
- en: Supermarkets work across value streams and value delivery chains. Customers
    pull products from the organization's finished goods inventories, even if the
    physical pull process involves the shipping department and freight company. The
    value streams replenish the finished goods inventories following the production
    and operations flows upstream. Similarly, supply chain partners replenish component
    materials and parts as the delivery organization's value streams pull them.
  prefs: []
  type: TYPE_NORMAL
- en: Supermarkets are the essence of JIT production concepts. Customers trigger the
    flow of work, information, and materials as the most downstream activity. All
    other preceding (that is, upstream) value stream and value chain activities replenish
    their value-adding work in a synchronized fashion and JIT to meet the next customer's
    demands.
  prefs: []
  type: TYPE_NORMAL
- en: The closest equivalent to carrying finished goods occurs when we accumulate
    features prior to a release in an IT context. But the purpose of having software
    finished goods inventories is not that different, as the goal is still to have
    products ready for release when the customers are ready to accept them.
  prefs: []
  type: TYPE_NORMAL
- en: By now, your VSM team has calculated Takt times for all the product lines and
    customers, and they have established a pitch or set of pitches to improve flows
    in line with customer delivery demands. You can also make improvements to your
    work environment to help the value stream meet customer demand.
  prefs: []
  type: TYPE_NORMAL
- en: Improving the work environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Lean organizations use **the 5S system** to improve their work environments.
    We don't need to spend much time discussing this topic since we introduced how
    it improves workspaces in [*Chapter 6*](B17087_06_Final_PD_epub.xhtml#_idTextAnchor165)*,
    Launching the VSM Initiative (VSM Steps 1-3)*. The 5S system's objective is to
    create a functional and clean environment that improves the work environment's
    efficiency, effectiveness, and safety.
  prefs: []
  type: TYPE_NORMAL
- en: 'An essential element of the 5S system is that it provides an ongoing mechanism
    to observe and address disorder and clutter issues that can impede flow, cause
    delays, and otherwise hide problems. In Lean, we always view problems in terms
    of the seven forms of waste: transportation, inventory, motion, waiting, overprocessing,
    overproduction, and defects. Recall that the seven wastes of Lean were introduced
    in [*Chapter 6*](B17087_06_Final_PD_epub.xhtml#_idTextAnchor165)*, Launching the
    VSM Initiative – The Seven Deadly Wastes*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As a quick review, the following table provides a list of the 5S system and
    **areas for potential waste** methods, as well as the seven wastes of Lean:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.3 – Methods of the 5S system and areas of potential waste'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_09_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.3 – Methods of the 5S system and areas of potential waste
  prefs: []
  type: TYPE_NORMAL
- en: The 5S system is listed numerically as these activities' execution tends to
    follow this sequence. The types and extent of the wastes of Lean will vary across
    organizations and across every value stream. We attack wastes in the order they
    impact our ability to deliver value, from highest to lowest. The main point to
    be made here is that the 5S system helps the VSM team, VS operators, and other
    stakeholders eliminate any waste that hinders Lean production processes. If you
    need a further review of the 5S technique, please refer to [*Chapter 6*](B17087_06_Final_PD_epub.xhtml#_idTextAnchor165),
    *Launching the VSM Initiative (VSM Steps 1-3)*.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's move on to the last area of work necessary to evaluate how to improve
    our ability to meet customer demand. In the next section, you will learn how to
    employ problem solving methods to improve value stream performance so that you
    can meet customer demand.
  prefs: []
  type: TYPE_NORMAL
- en: Resolving demand-related problems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since customer demand often vary over time, both in terms of volume and product
    needs, demand-related issues are a continual problem that value stream operators
    and managers must address. From the customer's perspective, demand-related issues
    arise when it's difficult to place an order, or they can't get the features and
    functions they want, the quality is unacceptable, or delivery dates extend beyond
    their desire to wait.
  prefs: []
  type: TYPE_NORMAL
- en: There are many problem-solving models that the VSM team can use to address their
    customer demand issues. One that I like was published by the *Iowa University
    Human Resources Department*. Let's take a look at it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the **8-Step Problem Solving Process**:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 1 – define the problem**'
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand this method, you must think about the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the problem?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How did you discover the problem?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When did the problem start, and how long has this problem been going on for?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is there enough data to contain the problem and prevent it from getting passed
    to the next process step? If yes, contain the problem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step 2 – clarify the problem**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before attempting to solve a problem, we need to make sure we truly understand
    the scope of the problem. We can avoid this problem by asking the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What data is available or needed to help clarify or fully understand the problem?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is it a top priority to resolve the problem at this point?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are additional resources required to clarify the problem? If yes, elevate the
    problem to your leader to help locate the right resources and form a team.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consider a Lean event (Do-it, Burst, RPI, or Project).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure the problem is contained and does not get passed to the next process
    step.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step 3 – define the goals**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In software development, we always want to know what capabilities a new feature
    or function must deliver to meet our customers'' needs. In Agile, we call this
    our **Definition of Done**. The same concept applies here in resolving demand-related
    problems. We need to define goals that define the desired state for the future
    state''s improvement:'
  prefs: []
  type: TYPE_NORMAL
- en: What is your end goal or desired future state?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What will you accomplish if you fix this problem?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the desired timeline for solving this problem?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step 4 – identify the root cause of the problem**'
  prefs: []
  type: TYPE_NORMAL
- en: 'We mustn''t focus on the symptoms and fail to fix the root cause of whatever
    problems we need to resolve. Having a focus on resolving symptoms is like taking
    aspirin for a headache – it provides temporary relief, only for the headache return
    because we haven''t addressed its root cause. The following list provides a strategy
    for finding the root causes of customer demand-related problems:'
  prefs: []
  type: TYPE_NORMAL
- en: Identify possible causes of the problem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prioritize possible root causes of the problem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What information or data is there to validate the root cause?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step 5 – develop an action plan**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Often, customer demand-related issues are complex and require a host of activities
    and people to address properly. In such cases, the VSM team should create an action
    plan that defines the required activities, time frames, and roles and responsibilities,
    as shown in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: Generate a list of actions required to address the root cause and prevent recurring
    problems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assign an owner and timeline to each action.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Status actions to ensure completion.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step 6 – execute the action plan**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, creating a plan of action is not the same thing as executing a plan
    of action. Someone needs to be responsible for ensuring the work is completed
    to satisfaction. Consistent with Lean and Agile practices, the **value stream
    mapping** (**VSM**) team may review progress and results, but someone needs to
    track and guide the effort, as noted in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: Implement an action plan to address the root cause.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintain and display a visible chart of progress.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify the completion of all action items.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step 7 – evaluate the results**'
  prefs: []
  type: TYPE_NORMAL
- en: 'This step validates the attainment of the goals listed in step 3 and captures
    lessons learned for the actions. First, we need to ensure we achieved our action
    item goals before leaving an activity. But we also don''t want to reinvent the
    wheel, if we have already performed similar discovery and analysis work in the
    past. In fact, we may already have a solution to our current problems if we paid
    attention and maintained accurate historical records. The following list includes
    activities for evaluating our findings and results:'
  prefs: []
  type: TYPE_NORMAL
- en: Monitor and collect data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Did you meet the goals you defined in step 3? If not, repeat the 8-step process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Were there any unforeseen consequences?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the problem has been resolved, remove activities that were added previously
    to contain the problem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step 8 – Continuously improve**'
  prefs: []
  type: TYPE_NORMAL
- en: 'This last step helps catch and address any loose ends. For example, do we have
    sufficient data to address and resolve the customer demand problem fully? Can
    we do better? If so, how can we do better? Step 8 involves the following activities:'
  prefs: []
  type: TYPE_NORMAL
- en: Look for additional opportunities to implement a better solution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure the problem cannot come back, and communicate lessons learned.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If needed, repeat the 8-step problem-solving process to drive further improvements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To learn more, please refer to *Iowa University Human Resources, Organizational
    Effectiveness*:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https://hr.uiowa.edu/development/organizational-development/lean/8-step-problem-solving-process`'
  prefs: []
  type: TYPE_NORMAL
- en: Mapping the customer-demand map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We now have enough information to develop a **future state map** that will
    address our improvement ideas for improving our ability to meet our customers''
    demands. The future state map for the demand phase uses the same VA mapping symbols,
    but the mapping process is different. The following list describes the sequence
    of steps necessary to support drawing the future state''s demand phase map:'
  prefs: []
  type: TYPE_NORMAL
- en: Start the new future state customer demand map on a whiteboard, poster board,
    or electronic system while using the VSM Storyboard as a guide.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start by drawing the customers and suppliers (if they're different from the
    customer) at the top of the board.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Record the customer requirements and demand fulfillment requirements in terms
    of Takt time and pitch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place the last activity (that is, the most downstream activity) toward the drawing
    area's far-right edge.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the board's left-hand side, draw the upstream process that initiates the
    customer request or demand.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Draw a manual or electronic communications link between the customer and supplier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Draw the buffer and safety inventories with the appropriate VA symbols.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Draw where the value stream operators need to implement their 5S systems for
    improvement. Use the Kaizen Burst icon, which represents an improvement activity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Determine where problem-solving projects need to be implemented. (Use the Kaizen
    Burst icon for this.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following diagram shows the future state''s map of customer demand phase
    improvements, which might look like your future state IT value stream:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4 – IT value stream future state map – demand phase'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_09_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.4 – IT value stream future state map – demand phase
  prefs: []
  type: TYPE_NORMAL
- en: The numbers on the future state map indicate the mapping steps noted in the
    previous list. In our example, the VSM team has decided that there are three critical
    areas they must focus on to improve the IT value stream's ability to respond to
    customer demand. The first planned Kaizen Burst uses the 5S system to discover
    low-hanging fruit that can improve flow and eliminate wastes. The second improvement
    activity is to help guide the development team's integration efforts on the software
    development and testing tools they have to implement more effective CI/CD toolchains.
    The final Kaizen Burst they have planned is to use problem-solving techniques
    to help the development team implement a Kanban system. This strategy enables
    a more rapid response to incoming requests.
  prefs: []
  type: TYPE_NORMAL
- en: This section completes our discussion on future state customer demand mapping.
    Before moving on to the future state customer flow phase, let's review the tools
    that are used in the demand phase of future state mapping.
  prefs: []
  type: TYPE_NORMAL
- en: Future state – customer demand tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The tools that are used in this phase of future state mapping help the VSM team
    improve the value stream's responses to variations in customer demand. We started
    by calculating *Takt time* across customers and products, and across variations
    of holiday or other seasonal adjustments, as required.
  prefs: []
  type: TYPE_NORMAL
- en: Next, the VSM team established *pitch* for the value stream, which calculates
    the Takt time times the number of work units. Pitch's objective is to determine
    the most appropriate lot sizes to move work items through our value stream.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you learned how to incorporate *buffer inventories and safety stocks*
    of finished goods and resources to ensure fluctuations in demand and flow don't
    starve your value stream, and prevent them from doing value-added work. You also
    learned how to employ finished goods supermarkets to enforce the pull-oriented
    production control strategies across your value stream, and even across your value
    delivery chains.
  prefs: []
  type: TYPE_NORMAL
- en: Another essential tool for improving the value stream's response to variations
    in customer demand is the *5S system*. The value stream operators use the 5S system
    to remove clutter, organize work areas to improve the flow of work and efficiencies,
    and generally improve the operators' health and safety. In addition, the 5S system
    helps the value stream team evaluate and eliminate the sources of waste.
  prefs: []
  type: TYPE_NORMAL
- en: In this phase, the VSM team starts to assess the problems that hinder the value
    stream's response to varying customer demand and analyze each problem's cause
    and effects. In this section, you learned how to employ the *8-step problem-solving
    process* to resolve demand-related problems.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you began developing your *future state map* to visually display the
    desired changes to the value stream, as well as updated your data on Takt time
    and pitch. The VSM team draws the future state map on a large whiteboard or poster
    board, or any electronic tool that's displayed on a large screen. Ideally, the
    VSM team should use the VSM Storyboard format (shown in *Appendix B*) to keep
    all their critical information in one place.
  prefs: []
  type: TYPE_NORMAL
- en: This section concludes our discussion on mapping the future state to make improvements
    to meet customer demand. Next, we'll learn how to develop the future state so
    that we can analyze and display improvements in order to implement and sustain
    continuous flows across the value stream.
  prefs: []
  type: TYPE_NORMAL
- en: Phase 2 – continuous flow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the VSM team has addressed issues of customer demand, they can start
    figuring out how to improve production flows to meet our customers' demands. In
    this section, we will continue our future state mapping activities and address
    issues related to establishing and maintaining Lean continuous flows.
  prefs: []
  type: TYPE_NORMAL
- en: '**Continuous flow** is a Lean strategy that''s used to achieve the ideal goal
    of moving a single work item through every step of your value stream activities
    instead of grouping and moving *lots* of work items collectively as batches (also
    known as **Make One**, **Move One**; **One-Piece Flows**; **Single-Piece Flows**).
    The objective is to produce and move one work item at a time, or at least the
    smallest practical number of items, through a series of value stream activities
    as continuously as possible. As part of a pull-based production control strategy,
    each activity produces only what is necessary to fulfill the next activity''s
    request.'
  prefs: []
  type: TYPE_NORMAL
- en: What establishes Lean continuous flows is the value stream's mechanism to ensure
    its internal and external customers receive the right work unit, at the right
    time, and in the right quantities. It's not uncommon to focus our efforts initially
    on improving individual work activities, apart from the other activities in our
    value stream system. Inevitably, that type of limited focus leads to problems
    with the overall flow of work. Instead, we need to take a systems-thinking view
    to our value stream.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you will learn various ways to improve continuous flows across
    your value streams.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating the value stream as a complex system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Organizations focus on individual activity improvements because the improvement
    efforts are handed over to subject matter experts or engineers with deep skills
    in the activity. And to some degree, those skills are needed to improve the activities.
    But it's impossible to calculate throughput for a given activity and understand
    its impact on the system as a whole – recall our previous discussions in [*Chapter
    3*](B17087_03_Final_PD_epub.xhtml#_idTextAnchor085), *Analyzing Complex System
    Interactions*.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of looking at each activity independently, we need to take a system
    view of our value streams to understand and control the mechanisms that impede
    the flow of work, materials, and information across the value stream. Across the
    value stream activities, variances in customer orders, cycle times, batch or lot
    sizes, setup times, and part changeover times all impede continuous flows.
  prefs: []
  type: TYPE_NORMAL
- en: The VSM team must look at the value stream as a complex system of integrated
    parts to work through these issues. Their job is to determine how to control the
    flow of work across the value stream in the most efficient manner. They must evaluate
    mechanisms to level the flow of work so that increased demands don't bog the system
    down, and periods of low demands don't starve the system.
  prefs: []
  type: TYPE_NORMAL
- en: They also need to work with the value stream operators to implement standardized
    work processes. This helps eliminate variances that impede flow and reduce productivity
    and consistency of quality. In many cases, the VSM team needs to design more efficient
    facility and workstation layouts and obtain funding and approvals from executive
    management to make the desired changes.
  prefs: []
  type: TYPE_NORMAL
- en: Applying the concepts of continuous flow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At a conceptual level, the ideal state of a continuous flow is replenishing
    a single work item every time a customer pulls another work item from our finished
    goods inventory. As shown in the following diagram, this concept is sometimes
    referred to as *Make One, Move One*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5 – Continuous flow – "Make One, Move One"'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_09_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.5 – Continuous flow – "Make One, Move One"
  prefs: []
  type: TYPE_NORMAL
- en: Value streams synchronize work in progress across multiple activities to continue
    the replenishment activities, as shown in the preceding diagram. In other words,
    the replenishment process must continue across all upstream activities in a coordinated
    and synchronized fashion.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding diagram uses the curved *physical pull* arrow instead of the straight
    *push* arrows to indicate that this value stream uses a pull-oriented production
    control system. The pull-oriented production scheduling methods control how upstream
    activities are coordinated to achieve both synchronized and continuous flows.
  prefs: []
  type: TYPE_NORMAL
- en: The speed of the continuous flow is a separate matter. So long as everything
    flows together, it doesn't matter if the flow rate is once every 5 minutes or
    once every 5 hours. It also doesn't matter if one part flows across each activity
    or if 10 parts flow together as a single lot. If the flows of parts and materials
    are synchronized and they can move together at the same rate, you have a continuous
    flow.
  prefs: []
  type: TYPE_NORMAL
- en: In the future state for continuous flow, we most care about improving the value
    stream's overall efficiency in terms of increased throughput and fewer bottlenecks
    (that is, eliminating mismatched production rates, queuing of work items, and
    waiting). Therefore, improvements to flow always come from eliminating waste in
    all its forms.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating the impediments of flow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most VSM teams cannot expect to make sweeping changes in one fell swoop. That
    was the original goal of **business process reengineering** (**BPR**). But few
    organizations can afford the investments and disruptions associated with making
    radical changes all at once. Instead, most companies gain better results by making
    incremental changes with priorities based on cost-benefit assessments of identified
    improvement opportunities.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to implement radical change all at once through a future state
    value stream improvement initiative, but it's not recommended for the same reasons
    BPR fell out of favor. Unless the organization faces a **burning platform** situation
    to stay in business, the better alternative is to make improvement changes incrementally.
  prefs: []
  type: TYPE_NORMAL
- en: Fact
  prefs: []
  type: TYPE_NORMAL
- en: The term *Burning Platform* comes from a real-life story of a horrible situation
    that occurred on July 6, 1988, on the **Piper Alpha** oil rig in the North Sea.
    The oil platform exploded and caused a massive fire that claimed 167 lives. However,
    three men, who initially locked themselves in a room away from the fire, eventually
    made their way outside, where they were faced with a choice of jumping into the
    frigid waters or perishing in flames. Two of the men jumped and, though seriously
    injured, managed to survive and were rescued. Unfortunately, the third man, who
    stayed on the burning didn't make it.
  prefs: []
  type: TYPE_NORMAL
- en: In such cases, the VSM team evaluates the most impactful opportunities to eliminate
    waste and implementation costs and prioritize the change initiatives accordingly.
    Following *Pareto's Principle*, those change initiatives that offer the most significant
    improvements to flow and return on investment should always have the highest implementation
    priorities.
  prefs: []
  type: TYPE_NORMAL
- en: 'The VSM team evaluates the flows across the value stream by working their way
    through a series of questions, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Which value stream activities, equipment, and systems need to be linked to obtain
    a synchronized and continuous flow?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can the existing value stream activities support a single-piece flow?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If not, what is the optimum lot size until we can optimize flows better?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which work cells or activities act as bottlenecks, and why? (That is, lengthy
    cycle, setup and changeover times, batch processes, excessive movement, or travel
    times.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the order of priority in addressing identified bottlenecks?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What can we do in the work cells or activities causing bottlenecks?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What can we do to reduce the delays causing bottlenecks?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can we improve our facility's layout to improve workflows?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can we improve our information systems to improve information flow?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What actions can we take to improve material flows internally?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What process and contract changes must be made with our supply chain partners
    to align better incoming materials and parts with our customers' demands?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can we control upstream work so that it matches and synchronizes with downstream
    demands?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can we employ a Kanban system, and what changes are required to support the
    Kanban system?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Should the value stream employ a **first-in, first-out** (**FIFO**) production
    control strategy?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If any, do we need to place in-process supermarkets and buffer and safety stock
    inventories to address variations in customer demand or lengthy supplier lead
    times?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What other issues impact our ability to support continuous flows?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The questions in the previous list guide the VSM team, VS operators, and other
    stakeholders through a process of discovery to find the impediments of continuous
    flow across the value stream. Each impediment leads to an improvement opportunity
    that is noted as a Kaizen Burst on the future state map. Much like the process
    associated with Product backlog refinement, the VSM team refines the list of improvement
    activities to define and prioritize the work tasks necessary to make the improvements
    to flows.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the preceding list includes three production control strategies (that
    is, Kanban, FIFO, and supermarkets) that can help sustain continuous flows across
    our value streams. Let's take a moment to review them in this context.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing production control strategies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Our value stream''s workflow control strategies must support continuous flows.
    We introduced three workflow control approaches in the previous sections, and
    the VSM team may elect to include all three strategies within a single value stream.
    These workflow strategies are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Supermarket**: This is a pull-based workflow strategy that helps enforce
    JIT rules by allowing downstream customers to pull items from a limited work item
    buffer. Upstream activities replenish those inventories as the stores fall below
    their defined lower limits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kanban Boards or other control mechanisms prevent operators from pushing work
    into downstream activities in software development scenarios. Instead, the Lean-Agile
    teams pull work into their workstation from the Sprint or Product Backlog, but
    only when they have completed their previous work and have capacity to take on
    new work items.
  prefs: []
  type: TYPE_NORMAL
- en: In CI/CD and DevOps pipelines, integrating and automating toolchains links the
    activities to improve flow rates and implements pull-oriented production control
    orchestrations to minimize WIP.
  prefs: []
  type: TYPE_NORMAL
- en: '**FIFO**: This enforces a rule where the first item in a queue always has the
    highest work priority in the order of work. The FIFO workflow strategy is useful
    when delays can cause problems with a work item''s quality deteriorating or unique
    customer orders not being fulfilled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kanban**: This implements a pure pull-oriented workflow that uses signals
    to indicate work requirements across value stream activities. These signals are
    in the form of instructions displayed on cards, sticky notes, signs, electronic
    signals, or folders. These work items can flow independently or in lots, and they
    are usually stored and pulled from a storage bin that moves with the lot.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Kanban signals tell each downstream activity what to produce and how many.
    In a manufacturing value stream, the Kanban Card may include any or all of the
    following information:'
  prefs: []
  type: TYPE_NORMAL
- en: The Part/Item number and Part/Item description
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bar codes for pulling additional order and shop process information and drawings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of items or parts required
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kanban bin or box capacity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Origin (downstream) and subsequent (upstream) activity names or locations –
    used in job shop situations without sequential flows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Material or parts supplier(s)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Safety stock locations and quantities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Replenishment triggers and quantities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lead time (that is, the duration before the items are due)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The person who is responsible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Order and due dates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other important information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In an IT-oriented value stream, the Kanban Card typically lists the User Story
    and its acceptance criteria. If the Kanban Card originates from operations, the
    card should include a ticket number, a description of the problem (defect or bug),
    the date of the issue, and the person who reported it.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the Kanban Card should also include information on any issues or bugs
    (also known as *blockers*) that were discovered during development or testing
    that prevent work from being carried out.
  prefs: []
  type: TYPE_NORMAL
- en: '**Weighted Shortest Job First** (**WSJF**): This queueing model has gained
    acceptance in the Lean-Agile community, particularly among SAFE practitioners.
    The method was initially defined by Don Reinertsen in his book *Principles of
    Product Development Flow* (Reinertsen, 2009).'
  prefs: []
  type: TYPE_NORMAL
- en: The WSJF prioritization model is used to sequence jobs (for example, Features,
    Capabilities, and Epics) to produce maximum economic benefit. In SAFe, WSJF is
    estimated as the **Cost of Delay** (**CoD**) divided by job size.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let''s assume we have three work items in our product backlog,
    and the product owner needs a way to assess priorities among them for the upcoming
    development iterations. The following table identifies the estimated durations
    as lead times in weeks, the cost of delays in lost revenues, and the adjusted
    weights for each work item:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6 – Weighted Shortest Job First (WSJF) example'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_09_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.6 – Weighted Shortest Job First (WSJF) example
  prefs: []
  type: TYPE_NORMAL
- en: The preceding table shows that each week of delay in releasing Feature A costs
    the organization $10,000/ week, while Feature B has a cost of 100,000/ week, and
    Feature C will cost the company $150,000/ week. Assuming our CoD and duration
    estimates are reasonably accurate, Feature C should have the highest priority,
    followed by B, and then A.
  prefs: []
  type: TYPE_NORMAL
- en: Besides managing how work items flow through a value stream system, we also
    need to level the flows to maintain continuous flows. This topic will be discussed
    in the next subsection on line balancing.
  prefs: []
  type: TYPE_NORMAL
- en: Balancing our value stream flows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Implementing a pull-based production control system is of little value if there
    are no work items to pull in the preceding value stream activities. We need to
    instill **line balancing** techniques to prevent the starvation of upstream activities.
    To achieve this, we must optimize the distribution of work in progress across
    our value stream so that it matches our Takt time.
  prefs: []
  type: TYPE_NORMAL
- en: In a fully automated system, **line balancing** is a function of the system's
    design. For example, automobiles progressing through an assembly line are tied
    to a belt so that everything moves simultaneously, at the same rate of speed.
    However, the work stations in many development and operations-oriented value streams
    are not integrated, nor are they automated. Moreover, the operators may move between
    workstations and equipment to support multiple work activities across the value
    stream.
  prefs: []
  type: TYPE_NORMAL
- en: 'Line balancing is a strategy that''s used to optimize the utilization of people
    within a value stream. The goal is to ensure our operators are not overburdened
    or underutilized. The VSM team uses the following equation to determine the number
    of workers needed to operate any given activity within the value stream:'
  prefs: []
  type: TYPE_NORMAL
- en: '*# workers needed=total_process_cycle_time/takt time*'
  prefs: []
  type: TYPE_NORMAL
- en: Recall that our Takt time for the IT value stream in *Figure 9.1* was 7 hours
    per work item. The VSM team has already identified each activity's total cycle
    times in our IT value stream, as identified in the following table. So, we have
    the data we need to determine the number of dev team members to support our IT
    value stream.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table uses the previously identified line balancing equation
    to calculate the number of workers required to support the IT value stream across
    the entire IT value stream:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7 – Line balancing equation to determine the number of required
    operators'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_09_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.7 – Line balancing equation to determine the number of required operators
  prefs: []
  type: TYPE_NORMAL
- en: Our total value-added times were a measure of all the cycle times across the
    IT value stream activities. But the value-added times (cycle times) are measures
    for processing one work item at a time. Because the development team works as
    a Scrum-based Agile team, we have to adjust the Takt time by a multiple of six
    to account for the total time required to produce six items, which – at 42 hours
    – is our pitch for this value stream.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, with these measures, the VSM team concludes that they need 7.8 development
    team members to staff the IT value stream. But things are never this easy. For
    one, the development team members process the entire lot of six work items at
    once in the *Refine*, *Plan*, and *Release* processes, but independently in the
    *Code*, *Build*, *Test*, *Merge*, and *Provision* processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows the lot size adjustments that have been made to adjust
    the hours so that they match work item''s throughput, and then calculate the number
    of workers required across each IT value stream activity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.8 – Adjusted cycle times per work item to calculate the number of
    required workers'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_09_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.8 – Adjusted cycle times per work item to calculate the number of required
    workers
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table reevaluates the number of workers against the adjusted
    total value-added time of 90.5 hours. The adjusted TVA of 90.5 hours divided by
    our original Takt time of 7 hours indicates the IT value stream requires 12.9
    workers to support the load:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.9 – TVA and labor adjustments'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_09_09.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.9 – TVA and labor adjustments
  prefs: []
  type: TYPE_NORMAL
- en: However, let's go back and look at Figure 9.7\. It should be evident that the
    labor levels across the individual value stream activities vary significantly,
    from as few as 0.4 workers to as many as 3.4 workers. We would run into resource
    allocation issues if we tried to operate this value stream with single-piece flows.
  prefs: []
  type: TYPE_NORMAL
- en: To continue our assessment, let's carve out the development-related activities
    from the refine and release-related activities. Other people in the organization
    typically perform release-related activities, and a subset of the development
    team conducts refinement activities as a group before each Sprint iteration.
  prefs: []
  type: TYPE_NORMAL
- en: 'The VSM team creates a current state worker balance chart to start assessing
    the development stream, as shown in the following diagram. This chart shows us
    that if we were to dedicate resources to each activity, working at the rate of
    Takt time, there would be a lot of wasted time for all the workers waiting on
    new work, except for those dedicated to testing. This is because the testers don''t
    have enough hours to conduct their tests within the Takt time of 7 hours per work
    item:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.10 – Current state worker balance chart'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_09_10.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.10 – Current state worker balance chart
  prefs: []
  type: TYPE_NORMAL
- en: 'It should be evident that you don''t need to dedicate a worker to each activity.
    The whole point of Agile is to build cross-functional and self-contained teams
    where all the development team members can perform most, if not all, tasks in
    the software delivery value stream:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.11 – Future state worker balance chart'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_09_11.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.11 – Future state worker balance chart
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, there are three logical areas to break down work by combining
    tasks. Within the team, one or more individuals can work on the plan, code, build,
    and merge activities. At the same time, other folks provision the servers and
    set up, run, analyze, and distribute test results.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the software tests can run in a **lights-out automation** fashion.
    Once the tests have been set up and initiated, the tests run in an automated fashion
    without human attendance. Babysitting computers is not a value-adding activity
    and is one of the reasons why test automation is so important.
  prefs: []
  type: TYPE_NORMAL
- en: Stabilizing work practices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section touches on a subject – creating standard practices – that some
    IT professionals may find questionable. The idea of implementing standardized
    work practices, at first glance, may seem restrictive, especially to those who
    view software development as much an art as it is a science. However, as we'll
    see later in this book, a mature DevOps pipeline – one that integrates and automates
    SDLC practices – only works when we have standardized processes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Standardized work** is an agreed-upon set of work procedures that establish
    the best current method and sequence of activities to complete each defined value
    stream process. In other words, standard practices implement the best, easiest,
    safest, and fastest way to perform work within the value stream.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the concept of standardized work in Lean appears to deviate from the
    ideals espoused in Agile, where teams are generally free to experiment freely
    with new ways of working. The focus of Lean is to eliminate waste and improve
    continuous flows, whereas Agile's focus is on being adaptive and supporting the
    creative aspects of turning requirements into actionable architectures and designs
    prior to each new product release.
  prefs: []
  type: TYPE_NORMAL
- en: The issue is really one of demarcation between innovation and production. Innovation
    tends to be a creative process, also called the fuzzy front end, that is difficult
    to scope. In contrast, production development processes work best when they're
    standardized for optimal value delivery.
  prefs: []
  type: TYPE_NORMAL
- en: Fuzzy Front End (FFE)
  prefs: []
  type: TYPE_NORMAL
- en: The term **fuzzy front end** describes the "*innovation phase*" of each new
    product or feature development life cycle. Specifically, the FFE includes the
    initial phase of creating new products or features, where opportunities are identified,
    architecture and design concepts are developed, and construction and delivery
    strategies evolve prior to entering the product development phase. The FFE phenomenon
    exists in both Lean- and Agile-based development scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Once software development gets to the production stage, it makes no sense to
    automate an integrated process where the individual activities have such variability
    that it's impossible to control the flow of work or eliminate defects and errors.
    The whole point of implementing a CI/CD or DevOps pipeline is to improve work
    and information flows to improve value delivery. And we cannot improve flows without
    standardized processes and activities.
  prefs: []
  type: TYPE_NORMAL
- en: The VSM team needs to work with the engineers, domain experts, and operators
    to fix them first. Later, we can employ technology to help integrate and automate
    the underlying activities.
  prefs: []
  type: TYPE_NORMAL
- en: The VSM team may find it useful to use the **Standard Work Combination Timesheet**
    shown in the following image to capture this information during their Gemba walks.
    The worksheet provides rows to record the steps across a linked workflow within
    a value stream. In other words, an operator is expected to complete all these
    steps before starting work on another work item or a "lot" of work items. The
    VSM team records the amount of time required to complete each task and specifies
    whether the work is a manual or automated task, or whether it is related to moving
    or transport.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example, the VSM team identified the following nine high-level steps
    (activities) that define the CI/CD pipeline flow for the software development
    team. The team lists the activities in the order they''re carried out:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Requirements analysis**: Define the user stories and their acceptance criteria.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Feature design**: Determine the software feature implementation requirements
    and development tests.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Write test scripts**: As part of test-driven development practices, develop
    the test necessary to demonstrate code compliance with the requirements.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Develop code**: Create the source code that implements the desired features
    in accordance with their acceptance criteria.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Unit testing**: Conduct tests on each segment of code before you conduct
    integration tests to ensure they meet the requirements specified in the user stories
    and acceptance criteria.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Merge code**: Integrate the source code after passing unit tests in with
    the mainline code in the source control repository. Ensure there are no errors
    with the integration.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Provision the pre-production server**: Execute **Infrastructure as Code**
    (**IaC**) configuration instructions that automate standing up the pre-production
    server test environments.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Initiate pre-production tests**: Execute the automated test in the pre-production
    test environments, as defined in the product''s test plan:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.12 – Standard Work Combination Timesheet'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_09_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.12 – Standard Work Combination Timesheet
  prefs: []
  type: TYPE_NORMAL
- en: The standard worksheet also provides space to display the flow of work over
    time visually. A vertical line displays the Takt time for the work items in the
    context of the overall time associated with the workflow. When the overall workflow
    time exceeds the Takt time, we know that the value stream segment cannot meet
    customer order demands, as currently designed.
  prefs: []
  type: TYPE_NORMAL
- en: The Standard Work Combination Timesheet example shown here records the entire
    set of tasks for a work item flowing through the development work associated with
    the IT value stream. The worksheet tells us that it's impossible to move a work
    item through all the development and testing tasks within the Takt time associated
    with our customer's demands. We can evaluate ways to fix these issues by integrating
    and automating SDLC processes by implementing CI/CD toolchains and DevOps pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: This concept is fundamentally what modern CI/ CD and DevOps toolchains and pipelines
    are about – eliminating variances across system development and operations-oriented
    activities. In both the Agile and Lean practices, the teams employ their workers'
    creativity via their product delivery skills and via Kaizen or retrospectives
    to make continuous improvements to their standardized processes. The objective
    of Kaizen is to make improvements that minimize risks, not increase them.
  prefs: []
  type: TYPE_NORMAL
- en: 'To summarize, standardized work does the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17087_09_9.11_table.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With the information we've gathered to complete the *Standard Work Combination
    Timesheet*, the VSM team can start evaluating ways to eliminate waste and improve
    flows. One common form of waste is motion; that is, having activities and work
    stations placed so far apart that we increase not-value-added time and resources
    simply moving people and materials between work areas. In the next section, you
    will learn how to improve work areas to eliminate waste from excess motion.
  prefs: []
  type: TYPE_NORMAL
- en: Changing work layouts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whether your VSM team is working with a value stream to build physical products
    or software products, or to support administrative operations, facility layouts
    are critical to improving flow. The critical issue is to eliminate waste in the
    form of excessive transport and movement. These issues result from inefficient
    facility layouts or locating departments, business functions, or operations across
    disparate sites or geographies.
  prefs: []
  type: TYPE_NORMAL
- en: The VSM team needs to work with executive management to obtain funding and approvals,
    co-locate value stream activities, and change its layout to implement Lean production
    flows. In [*Chapter 3*](B17087_03_Final_PD_epub.xhtml#_idTextAnchor085)*, Analyzing
    Complex Systems Interactions*, you learned that optimum Lean flows in a diagrammatic
    form display a **linear sequential flow** for the work. However, in an actual
    physical work environment, a linear sequential flow might not be the best.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead, it''s often better to have the workflow wrap back around to reduce
    waste related to the operator excessively transporting materials and motion within
    the value stream. Therefore, an optimal flow within a facility might have *U*,
    *C*, or *L*-shaped work areas, as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.13 – Facility layout designs'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_09_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.13 – Facility layout designs
  prefs: []
  type: TYPE_NORMAL
- en: As the VSM team evaluates alternative layouts, they need to overlay the flow
    of work. That is the topic of the next subsection.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying standardized work
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the VSM team works to improve standardized work methods and flow, everyone
    working in the value stream must understand how to perform the work across multiple
    activities. This strategy provides the greatest flexibility in moving people to
    maintain flow across all activities.
  prefs: []
  type: TYPE_NORMAL
- en: 'The organization may employ detailed documentation or shop processes describing
    the work in both development and operations-oriented value streams. In many cases,
    all the operators need is a simple visual reminder of the standardized work tasks.
    A **Standardized Work Chart** is an example of such a display, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.14 – Standardized Work Chart'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_09_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.14 – Standardized Work Chart
  prefs: []
  type: TYPE_NORMAL
- en: At this point, the VSM team has analyzed the elements of work that can improve
    customer flows. Now, let's move on to developing the value stream's future state
    map of continuous flows.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing the continuous flow phase map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before the VSM team starts to draw their **future state map of continuous flow**
    improvements, they should review the analysis work:'
  prefs: []
  type: TYPE_NORMAL
- en: First, the team must go back and review the current state map and the demand-phase
    maps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, the VSM team members must go through the flow questions, and the information
    they obtained on their Gemba walks, that answer those questions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, if they haven't done so already, the VSM team members must draw the current
    and future state **worker balance charts**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, they must go back and review the value stream symbols that we identified
    in *Figure 7.1*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As with the previous maps, there is a preferred sequence of activities that
    aid in producing future state – continuous flow map – as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the demand phase map as the starting point.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the Standard Work Timesheet and Standardized Work Chart for guidance,
    draw the work locations in the map's proper sequence.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the VSM Storyboard (see *Appendix B*), enter the number of workers in the
    proposed cycle times of work areas on the map.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter all the identified attributes in the appropriate work area locations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Determine the tasks that support continuous flows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Indicate on the map where to initiate pull-oriented production control strategies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If required, display the placement of supermarket inventories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Display where FIFO workflows occur.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Determine where Kanban signals are required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identify other improvement activities required to improve flows (for example,
    Kaizen Burst icons).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Display all necessary communications links on the map.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As the VSM team begins to draw the future state continuous flow map, they need
    to keep the following in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a continuous flow means that queues and waiting are eliminated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Evaluate work area designs and make change recommendations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The team needs executive approvals and funding to make significant changes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lean production control pulls upstream work so that it's in sync with customer
    demand.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communicate reasons and benefits for all change recommendations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram shows the VSM team''s future state map of proposed continuous
    flow improvements across the IT value stream:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.15 – Future state map of continuous flow improvements across the
    IT value stream'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_09_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.15 – Future state map of continuous flow improvements across the IT
    value stream
  prefs: []
  type: TYPE_NORMAL
- en: 'As you review the future state map, note how the map now indicates numerous
    communications links, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Backlog refinement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating Definitions of Done for each user story.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The development team obtains clarifications on requirements during development.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communicating test results from the automated tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving code in and out of the source control management repository.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Communicating server configurations for provisioning.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The VSM team has also identified four new improvement initiatives, identified
    by the Kaizen Burst icons for implementing Kanban signaling at two locations,
    as Kanban withdrawals associated with the Product and Sprint Backlogs:'
  prefs: []
  type: TYPE_NORMAL
- en: A new design for the development team's facilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Kanban signaling and visualization production control system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A FIFO production control strategy between development and test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementation of test automation capabilities to enable testing to operate
    in a "lights out" capacity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, note that we have replaced the individual development steps with two
    areas of activity – one for development and the other for testing. Technically,
    there is a third area associated with provisioning, which is the data center.
    However, all interactions with the data center are done through electronic communications
    to help implement infrastructure changes via code. This is also known as **Infrastructure
    as Code** (**IaC**).
  prefs: []
  type: TYPE_NORMAL
- en: The release process is also separated from development since those activities
    fall outside the IT development stream domain. That's not to imply the development
    team members are not involved in release activities. The VSM team has elected
    to review those activities at a later date in a separate mapping exercise.
  prefs: []
  type: TYPE_NORMAL
- en: This section completes the future state - continuous flow improvement mapping
    section. Before we leave this section altogether, let's quickly review the tools
    that we used in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Future state – continuous flow tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, you learned to ask several questions that help the VSM team
    assess the state of continuous flows across a value stream. Then, you learned
    the importance of using *pull-oriented production control strategies* to manage
    continuous flows. The three pull-oriented production control strategies include
    using *supermarket inventories,FIFO workflows, and Kanban-based signaling*.
  prefs: []
  type: TYPE_NORMAL
- en: You learned the importance of establishing standardized work as a prelude to
    enabling integration and automation of value stream activities. The two primary
    tools that are used to evaluate work activities are the *Standardized Work Timesheet*
    and the *Standardized Work Chart*.
  prefs: []
  type: TYPE_NORMAL
- en: Another important consideration in improving the flow of work and materials
    is the facility's *design and layouts*. Lean processes can implement linear-sequential
    flows with minimal waste associated with motion and travel. However, in many instances,
    it makes sense to redirect the linear sequential flows so that they wrap back
    to the front, such as via "U" or "C" shaped cells, or off to the side via an "L"
    shaped work cell.
  prefs: []
  type: TYPE_NORMAL
- en: In many value streams, the operator's most efficient use of time allows them
    to move between work cells or equipment. To leverage our human talent in this
    manner, they must be cross-trained in several – if not all – value stream activities.
    Moreover, the U- and C-shaped cells offer less movement between work locations.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you also learned how to employ the **Worker Balance Chart**
    to balance operators' utilization across a value stream's activities.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, as we have been doing throughout the value stream management chapters,
    you learned how to update the VSM Storyboard to show the future state changes
    governing improvements to continuous flows. You also used several *flow-phase
    symbols* (Icons) in this exercise.
  prefs: []
  type: TYPE_NORMAL
- en: This section completes our discussion on developing future state maps to assess
    areas for improving continuous flows across the value stream. Now, we'll move
    on and learn how to use future state mapping to improve leveling work. This allows
    us to efficiently utilize our value stream resources while simultaneously meeting
    customer demand.
  prefs: []
  type: TYPE_NORMAL
- en: Phase 3 – leveling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, the VSM team has conducted a series of Gemba walks to collect
    information they used for their value stream mapping exercises. They have built
    a current state map and future state maps to guide improvements in meeting customer
    demand and implementing continuous flows. The last future state map they will
    construct helps guide improvements in production leveling.
  prefs: []
  type: TYPE_NORMAL
- en: '**Leveling** is a strategy that''s used to distribute the work required to
    support our customers'' demands over time. Our goal is to continuously feed our
    value stream with new customer orders, at the rate of the Takt time, so that we
    don''t lose production time while waiting for new orders to arrive and have other
    times where the value stream contains more work than it can take on.'
  prefs: []
  type: TYPE_NORMAL
- en: In an ideal state, production leveling aims to produce the same number of items
    consistently and just at the rate of the Takt time. Unfortunately, customer orders
    don't often come in as a continuous flow. They may come in batches, and the number
    of requested items can vary with each customer request. So, we have to implement
    strategies to flatten demand curves that match our value streams' production rates.
  prefs: []
  type: TYPE_NORMAL
- en: The time increments that are used depend on the total value added and total
    lead times associated with our products. In some cases, we can level work over
    hours, days, or weeks. However, we might need to level work over months or even
    years if we're constructing large buildings, aircraft or ships.
  prefs: []
  type: TYPE_NORMAL
- en: Leveling flows by analogy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By analogy, you can think of trying to flow water through a hose. Let's assume
    we have a garden hose that can hold one gallon of water at any given moment. If
    we try to flow 10 gallons of water all at once, the hose's size restricts flow,
    plus the hose can only contain one gallon of water at a time.
  prefs: []
  type: TYPE_NORMAL
- en: Unless we have a very flexible hose, allowing the water to bulge through the
    pipe, the 10 gallons of water only moves through the hose incrementally at a rate
    the hose can sustain without bursting; that is, the rate at which one gallon can
    traverse the hose from end to end.
  prefs: []
  type: TYPE_NORMAL
- en: Also, if we divide our hose into eight equal sections, each section will contain
    exactly one-eighth of a gallon of water at any given time. To complete our analogy,
    water must flow out of the hose's last section before the water in the upstream
    sections can flow into the linked downstream sections. Lean value streams operate
    in precisely this fashion, as continuous and equal flows.
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the term **pipeline** to refer to the flows across our value streams.
    As an example, the following diagram shows the DevOps processes as a linear-sequential
    flow of work across eight primary activities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.16 – DevOps pipeline shown as a linear-sequential process'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_09_16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.16 – DevOps pipeline shown as a linear-sequential process
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, in real life, the monitoring activities obtain information that''s
    been fed back to the development team as input for future planning activities.
    For that reason, the DevOps pipeline is more often displayed as an infinity loop,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.17 – DevOps pipeline displayed as an infinity loop'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_09_17.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.17 – DevOps pipeline displayed as an infinity loop
  prefs: []
  type: TYPE_NORMAL
- en: Neither graphical model is ideal, as new requirements come in from multiple
    sources. We'll discuss this issue in the leveling production flows subsection.
    Before we get to that topic, let's look at what questions the VSM team asks in
    this phase of the VSM initiative.
  prefs: []
  type: TYPE_NORMAL
- en: Assessing leveling needs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As with the previous future state mapping exercises, the VSM team can ask questions
    to help assess the needs for production leveling. Let''s take a quick look at
    such questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Do customer orders arrive more or less at a constant and predictable rate?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are the value stream's operators experiencing high and low peaks of activity
    as a result of changes in customer demand?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can we group incoming orders to level demand loads?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can we predict future orders sufficiently, in both volume and type, to build
    ahead of demands? If so, how far in advance can we build with minimal risks?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can we group orders in lots to improve the flows?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When materials or parts must flow into various stages of our value stream, how
    will we distribute Kanban Cards to accurately flow the materials so that they
    sync with the work items?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where in the value stream should we schedule production/work requirements?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can we use **paced withdrawal** or a Heijunka box to manage the flow of lots?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do we need to employ runners to keep materials flowing and in balance?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What other methods and tools can we employ to improve production leveling?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we know what questions we need to answer, let's describe the concepts
    behind production leveling while using our IT value stream model as a reference.
  prefs: []
  type: TYPE_NORMAL
- en: Leveling concepts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this stage of future state mapping, we need to concentrate on drawing the
    elements that help the value stream in leveling production. The problem this phase
    addresses is that customers seldom predictably bring us orders. When we have too
    many orders all at once, we may not have the production capacity to work through
    them quickly. At other times, the orders may come in at a slower rate that doesn't
    fill our capacity, which means our value stream is starved for work.
  prefs: []
  type: TYPE_NORMAL
- en: The objective of production leveling is to distribute our work over time to
    meet our customer demand. In high-volume production environments, we may need
    to level the flows once a shift or possibly even more frequently. On the other
    hand, retail manufacturers may have a much higher sales volume during the holiday
    seasons, which forces them to build in advance.
  prefs: []
  type: TYPE_NORMAL
- en: The VSM team waits until this late stage to manage leveling issues, because
    they need to understand the Takt time and optimal pitch for their value stream
    to match customer demand. Additionally, the VSM team needs time to work through
    the value stream activities to optimize flows to the greatest extent possible.
    In other words, there are more gains to be made in productivity by addressing
    issues with meeting customer demand and improving flows. Production leveling is
    more of a fine-tuning exercise than a significant change initiative.
  prefs: []
  type: TYPE_NORMAL
- en: In our previous IT value stream example, we noted that the Product Owner introduces,
    on average, 20 new requirements into the product backlog every 4 weeks. The Product
    owner receives these requests from multiple sources, including the IT shop's operations
    staff, directly from customers, industry sources, and product and marketing management
    teams.
  prefs: []
  type: TYPE_NORMAL
- en: It's doubtful that the product owner receives exactly one new requirement every
    day. Instead, they come in randomly and often in spurts – especially after the
    product marketing groups have conducted customer interviews and focused group
    sessions. When the new requirements arrive in batch, they are added to the product
    backlog to sit in a queue until the development team can start working on them.
  prefs: []
  type: TYPE_NORMAL
- en: Under Scrum-based agile practices, the development team evaluates how much work
    in the product backlog they believe they can take on and complete within the sprint's
    duration. In our example, the team pulls a batch of user stories from the product
    backlog as one lot of six work items to work through the Sprint. Once the work
    items have been selected, the team divides the work among the team members, and
    the team members work on each user story from start to finish.
  prefs: []
  type: TYPE_NORMAL
- en: All dev team members have all the skills necessary to work the item through
    the entire SDLC process in an ideal world. But that's not always the case. Moreover,
    depending on the complexity of a work item, the team may assign more than one
    team member to implement the capabilities outlined in a single user story.
  prefs: []
  type: TYPE_NORMAL
- en: The Scrum team example here is a method of production leveling across a Sprint.
    The items are taken in as a lot and worked on independently through the SDLC processes.
    But there is a problem since the team is working on six work items over 10 days.
    In that same 10-day period, the product backlog is likely to receive 10 new work
    items. In other words, the IT value stream is ignoring four new customer demand
    throughout every 2-week Sprint. Not only does this represent lost business, but
    it also opens the doors to your competitors to fill the void.
  prefs: []
  type: TYPE_NORMAL
- en: Production leveling alone is not going to solve this problem. The VSM team needs
    to work with the system engineers to implement the CI/CD and DevOps toolchains
    and pipelines to expedite workflows. In the long run, the VSM team should work
    with the IT department to implement capabilities that match the Takt time of one
    work item's completion per day. Faster flow rates provide surge capacity and the
    ability to make up for lost time if the IT systems go down.
  prefs: []
  type: TYPE_NORMAL
- en: Referring back to in *Figure 9.15*, with a mature DevOps pipeline, one work
    item leaves the pipeline every day, and other work items flow at the same speed
    throughout the pipeline. This means that one new work item can enter the DevOps
    pipeline every day. But since customer requirements come in haphazardly and often
    in batches, the development team still needs an incoming buffer, in the form of
    a product backlog, to store and manage the new requirements until they've been
    refined, prioritized, and pulled into the IT value stream.
  prefs: []
  type: TYPE_NORMAL
- en: While the IT department is implementing the new CI/CD toolchains, the VSM team
    begins to work out their production leveling strategies for the new development
    and testing environments. Let's take a look at the methods they can use to level
    production volumes.
  prefs: []
  type: TYPE_NORMAL
- en: Leveling methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several methods the VSM team can explore for production leveling.
    In this section, you will learn about the 5S methods for leveling, including **Kanban
    Boards**, **paced withdrawals**, **Heijunka boxes**, **visual controls**, and
    **Kanban folders**.
  prefs: []
  type: TYPE_NORMAL
- en: Not all of these strategies work in every value stream. Moreover, Lean-Agile
    production has sufficient uniqueness to drive the evolution of a relatively new
    variant of Kanban that uses sticky notes and whiteboards to level flows across
    a Sprint. Known as a **Kanban Board**, we'll start with a description of that
    scheduling and leveling method first.
  prefs: []
  type: TYPE_NORMAL
- en: Kanban Boards
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The product owner will usually bring new work items to the development team's
    attention in an IT environment. Each requirement's new work item instructions
    are typically noted on a sticky card and placed in the *Product Backlog* column
    on a whiteboard. The sticky notes are the Kanban signals, and the whiteboards
    are called Kanban Boards. Refer back to *Figure 9.9 – Kanban Board for an IT value
    stream*.
  prefs: []
  type: TYPE_NORMAL
- en: However, the initial requirements, expressed as business and user requirements,
    may be too broadly defined to develop as a succinct set of functional and nonfunctional
    capabilities. The development team members work with the product owner to refine
    the requirements into distinct and smaller user stories, representing the smallest
    work units that results in a definable capability.
  prefs: []
  type: TYPE_NORMAL
- en: 'User stories most often express the requirements from the customer''s point
    of view. With this point of reference, a typical format for the user story is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*As a (type of user), I want to (describe capability desired), so that (reason).*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The user story should also define the acceptance criteria, which ultimately
    specify the story''s Definition of Done. The following format helps define the
    acceptance criteria for a user story. Note that each user story may require multiple
    acceptance criteria statements to define all potential scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Given [a scenario] when [something happens] then [describe expected result].*'
  prefs: []
  type: TYPE_NORMAL
- en: The product owner then collaborates with the development team to determine priorities
    for the identified user stories. However, the development team makes the ultimate
    decision regarding the amount of work involved with each user story and the pace
    they can sustain.
  prefs: []
  type: TYPE_NORMAL
- en: This refinement work occurs during the planning phase of each Sprint, and the
    output is a Sprint Goal plus selected user stories that support the achievement
    of the Sprint's goal. The development team moves the Kanban Cards, one for each
    user story, into the *Sprint Backlog* column on the Kanban Board.
  prefs: []
  type: TYPE_NORMAL
- en: The user stories may need further clarification before the development team
    members can start developing and testing the functionality associated with each
    user story. Once the stories have been sufficiently developed, the Kanban Cards
    are moved into the **To Do** section of the Kanban Board. The development team
    members pull Kanban Cards from the **To Do** column and place them in the **In
    Process'** column, while they are developing and testing the functionality associated
    with that card's user story.
  prefs: []
  type: TYPE_NORMAL
- en: Once the developers have completed their work, they move the Kanban Card into
    the **To Verify** column. The verification process has another set of eyes review
    the work to ensure the new code implements the desired functionality and meets
    the standards set in its acceptance criteria. Once they have verified the new
    code's functionality, the Kanban Card is moved into the **Done** column to indicate
    that the work meets the acceptance criteria for the user story.
  prefs: []
  type: TYPE_NORMAL
- en: Some teams may elect to implement additional columns on their Kanban Boards
    to track the work they perform at a more granular level. That's OK. The critical
    issue is not to get into such small levels of detail that the tracking effort
    becomes overly burdensome.
  prefs: []
  type: TYPE_NORMAL
- en: Paced withdrawals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Kanban Boards we previously described best support leveling of work for
    teams that work close by, often in the same room. Therefore, Kanban Boards are
    useful in software delivery or other administrative or operations-oriented types
    of value streams. In contrast, the paced withdrawal method of production leveling
    works in environments that are developing physical products, and where the workstations
    and equipment are spread out over a large area.
  prefs: []
  type: TYPE_NORMAL
- en: Paced withdrawals use a **human handler** (also known as **Runners**) to move
    information and work items along a value stream's activities, following the value
    stream's flow sequence. The handler sets the pace for the value stream as they
    move from operation to operation, moving parts and information from one work location
    to another.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the paced withdrawal method of production leveling:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.18 – Paced withdrawal leveling method'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_09_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.18 – Paced withdrawal leveling method
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a closer look at how production flow leveling works using the preceding
    diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: The Runner (handler) starts a cycle by picking up the current production Kanban
    from a Heijunka box. A production Kanban is simply a detailed list of all items
    that need to be completed by a specific time. The Heijunka box has slots that
    map to specific time increments throughout the day. Each slot can hold a folder
    that contains the customer orders scheduled for that period.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Runner takes the production Kanban to the most upstream work area to hand
    off the new orders.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Runner later picks up the WIP goods at the location for activity 2 and moves
    them on to the next work area, to conduct activity 3\.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the work at activity location 3 is complete, the Runner moves that part
    to the workstation for activity 4.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the Runner reaches the most downstream activity, they move the finished
    goods into a supermarket to hold the inventory until the products are picked up
    by or shipped to the customer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At that point, the handler picks up new customer orders (that is, in the form
    of production Kanban information) and moves those documents to the value stream's
    Heijunka box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This completes the original cycle, and the handler starts the cycle again. The
    key is to match the handler's cycle time to the pitch rate. This strategy limits
    production quantities as WIP while simultaneously matching flows to meet customer
    demand.
  prefs: []
  type: TYPE_NORMAL
- en: You may be wondering why you are learning about leveling strategies for value
    streams that build physical products. The short answer is because we all operate
    within a digital economy. IT teams often support the improvements in manufacturing
    and other types of development-oriented value streams, so IT specialists must
    understand how Lean processes work in other organizational value streams.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the IT department may implement changes to the organization's **Enterprise
    Resource Planning** (**ERP**) or **Manufacturing Requirements Planning** (**MRP
    II**) systems to support evolving customer needs and business opportunities. Such
    modern business applications help integrate and automate business processes spanning
    inventory management, warehouse management, accounting and financial management,
    order management, scheduling, purchasing, shipping, **customer relationship management**
    (**CRM**), and e-commerce. These functions operate as value streams within the
    organization, and most Lean improvements across these value streams require associated
    changes to be made to the enterprise business systems.
  prefs: []
  type: TYPE_NORMAL
- en: Heijunka boxes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As mentioned previously, the Heijunka box is essentially a slotted cabinet
    that holds production Kanban folders. The following diagram shows two examples
    of a Heijunka box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.19 – Heijunka box'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_09_19.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.19 – Heijunka box
  prefs: []
  type: TYPE_NORMAL
- en: Each folder holds the production Kanban instructions for the work items produced
    by the value stream in that lot. The slots within the Heijunka box indicate the
    times within which the production items should be produced.
  prefs: []
  type: TYPE_NORMAL
- en: The Heijunka box on the left is slotted to support two shifts with 1-hour time
    periods scheduled between starting each new batch. In other words, each slot contains
    a Kanban folder with the production Kanban instructions to build the desired lot
    of work items within a 1-hour pitch.
  prefs: []
  type: TYPE_NORMAL
- en: The Heijunka box on the right is slotted to support three product types across
    one shift. The scheduler that's determining production capacities in a value stream
    with multiple product types. This determines how many items of each type can be
    produced within each slotted time frame.
  prefs: []
  type: TYPE_NORMAL
- en: Though we mentioned the Heijunka box as part of the paced withdrawal leveling
    method, the Heijunka box can stand alone as a leveling tool. In such cases, the
    Heijunka box is a visual workflow control method. Instead of using a Runner in
    a co-located space, such as in an administrative office, the employees can pull
    work directly from the boxes.
  prefs: []
  type: TYPE_NORMAL
- en: Visual controls
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Instead of a Heijunka box, the VSM team may elect to implement a Visual Pitch
    Board to guide production flows across the day. The Pitch Board is a table that
    displays the number of each operator's work assignments across the pitch times
    within their shift. This a useful mechanism for operations-oriented value streams
    to level the flow of work within an administrative area.
  prefs: []
  type: TYPE_NORMAL
- en: For example, let's assume a value stream receives, on average, 20 new work item
    requests per hour and that four operators have been assigned to work on these
    tasks. This visual aid type works in both development and operations-oriented
    workstreams, where everyone can easily see the visual Pitch Board display. In
    other words, we don't need a runner, and the operators can pull their production
    Kanban Cards directly from the production control system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a sample Visible Pitch board for an administrative department:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.20 – Visual Pitch Board – order entry value stream example'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_09_20.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.20 – Visual Pitch Board – order entry value stream example
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the average pitch is 19 customer orders every hour, but with
    a low of 18 and a high of 20 customer orders. The scheduler has distributed the
    work so that no single order entry clerk has excessive orders every hour.
  prefs: []
  type: TYPE_NORMAL
- en: With a maximum order entry rate of five orders per hour per operator, the cycle
    time for each order entry activity is 12 minutes. But, in every 1-hour slot, one
    or two order entry clerks only need to work on four customer orders, giving them
    12 minutes of open time. In addition, however, these individuals can work on other
    value-adding tasks, such as answering customer calls or emails.
  prefs: []
  type: TYPE_NORMAL
- en: The number of work items (pitch) assigned to individual workers can vary based
    on their skills and other duties they may perform. Also, note that the Pitch Board
    distributes workload by volume only and does not include instructions on the required
    work. In this case, the clerks receive colored Kanban folders that contain such
    instructions.
  prefs: []
  type: TYPE_NORMAL
- en: Kanban folders
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Kanban folders contain production Kanban information. They are used in paced
    withdrawal systems, or in standalone Heijunka boxes, or distributed to team members
    who get their work assignment notifications via a Visual Pitch Board. For example,
    the production Kanban contains information on the performance of standardized
    work and the customer order requirements. In addition, the Kanban folders may
    be color-coded to indicate which operator the work has been assigned to or indicate
    the type of standardized work that's being performed.
  prefs: []
  type: TYPE_NORMAL
- en: In the paced withdrawal system, the Kanban folder flows with work and is moved
    by the Runner. In the standalone Heijunka boxes, the operators pull the work from
    the slots associated with the type of work they perform and the time of day. Typically,
    when a Visual Pitch Board is used, the local manager distributes the Kanban folders
    directly to the operators at a standard interval. The intervals set the pace,
    and the folders help break out and distribute the work across the operators.
  prefs: []
  type: TYPE_NORMAL
- en: This section concludes our discussion on leveling methods. After evaluating
    and choosing the appropriate leveling methods, the VSM team can move on and draw
    the future state value stream leveling map.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing the leveling phase map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The VSM team now has the information they require to develop the future state
    value stream map for the leveling phase. As with the other phases, the team evaluates
    leveling opportunities by working their way through a series of related question,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: What are the minimum work item group sizes for optimal flows?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What type of Kanban signaling methods work in the value stream's work environment?
    (That is, Kanban Boards, Kanban Cards, Kanban bins, or Visual Pitch Board?)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How will Kanban Cards or folders be distributed? (That is, manager distribution,
    Heijunka boxes, or Runners/handlers?)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If appropriate, what type of Heijunka box or visual aid is required? (That is,
    showing work that's been assigned to value stream operators or by part type?)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If runners are required, what route and pace should be optimal for leveling
    flows?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before drawing the leveling phase map, the VSM team should decide on what icons
    they plan to use to portray the production leveling requirements for FIFO, Runners,
    Heijunka boxes, Kanban Cards, Kanban folders, and Visual Pitch Boards.
  prefs: []
  type: TYPE_NORMAL
- en: The VSM team builds upon their previously evaluated future state – continuous
    flows map to add the elements necessary for assisting with leveling the flows.
    In the previous continuous flows exercise, the VSM team assessed the need for
    a Kanban-based system to help establish better product flows. They have refined
    their thinking and have decided to implement a Kanban Board with sticky notes
    as the ideal signaling method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the Kaizen Burst associated with implementing the
    Kanban Board-based leveling with sticky notes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.21 – The IT value stream future state map with Kanban Board-based
    leveling with sticky notes'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_09_21.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.21 – The IT value stream future state map with Kanban Board-based leveling
    with sticky notes
  prefs: []
  type: TYPE_NORMAL
- en: The Kanban Board helps the IT value stream manage the cadence of their flows
    while simultaneously leveling the WIP at any given time. The developers still
    conduct Sprint planning sessions to refine user stories within the product backlog,
    and they work with the product owner to prioritize work items.
  prefs: []
  type: TYPE_NORMAL
- en: Many of the selected items support development customer-requested enhancements.
    However, some user stories address issues of technical debt, security, and architectural
    and design improvements. The VSM team annotates the proposed change on their future
    state maps by adding the Kanban Board Icon at the development stage. The VSM team
    also adds an associated Kaizen Burst to indicate the continuous improvement activity.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this chapter, we have discussed how to implement Lean-oriented concepts
    as an overlay to software development practices. But if the software development
    team has implemented Agile practices, we may have to undo some of the batch-oriented
    practices implemented by the Sprint Backlogs. Batch processing causes waste in
    the form of waiting and excess WIP.
  prefs: []
  type: TYPE_NORMAL
- en: If a software development organization has implemented Agile practices around
    Scrum, they may want to address a change to Kanban-based production scheduling
    concepts during their future state mapping exercises. So, before we leave our
    future state mapping activities, let's take a moment to address how we can improve
    Agile-based practices to eliminate the negative aspects of batch processing work
    items across Sprints.
  prefs: []
  type: TYPE_NORMAL
- en: Eliminating Agile-based batch processing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sprint Backlogs are inherently a batch production process. The Agile teams pull
    work items as a "lot" from the product backlog and then hold them in a queue until
    the development team members have time to work on them. Queuing work items can
    lead to excessive waiting and WIP in queues, as well as task switching. All three
    practices are forms of waste.
  prefs: []
  type: TYPE_NORMAL
- en: Some organizations implement Kanban Boards to both visualize and manage WIP
    within their Sprints. In this manner, Kanban Boards help the development team
    level production flows across each Sprint duration.
  prefs: []
  type: TYPE_NORMAL
- en: However, Agile team implementations of Kanban Boards are not an example of a
    strategy that supports optimized continuous flows. The team is still moving work
    items across Sprints in lot sizes greater than one. However, with the implementation
    of CI/CD and DevOps pipelines, work items can flow as single-piece workflows across
    the value stream. Moreover, the development team can also use their Kanban Boards
    to level customer demand directly at the product backlog level, so long as the
    work items have been fully refined and prioritized.
  prefs: []
  type: TYPE_NORMAL
- en: Yes, Lean can be made part of Scrum and other Agile practices. But it's important
    to understand that using Sprints as a mechanism to control the flow of requirements
    then becomes a batch process, which is inconsistent with Lean philosophies on
    implementing the ideal of single-piece flows.
  prefs: []
  type: TYPE_NORMAL
- en: Does that mean that Sprints and other forms of developing on cadence – such
    as in SAFe? In a word, no. Sprints and other forms of development cadence force
    the value stream teams to take the time to plan their upcoming activities. The
    teams provide product and solution demos to customers and other stakeholders.
    They also inspect and adapt their work and perform Kaizen or Retrospective-based
    reflections to support their continuous improvement objectives.
  prefs: []
  type: TYPE_NORMAL
- en: This section completes our discussion on future state (phase 3) mapping to improve
    customer demand-flow leveling. Before we leave this section altogether, let's
    review the tools we identified that support leveling.
  prefs: []
  type: TYPE_NORMAL
- en: Future state – leveling tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, you learned who and when to employ a Kanban Board to manage
    work in progress flowing across a value stream. Kanban Boards work well in IT-oriented
    value streams and in other administration or operations-oriented value streams.
  prefs: []
  type: TYPE_NORMAL
- en: A value stream manager may employ a material handler or "Runner" to move materials
    and parts that must be manually moved across significant distances. The Runner
    can set the value stream's pace as they move the WIP components and production
    Kanban Cards or folders from one work location to another. The Runner follows
    the flow of the value stream, setting the cadence with each cycle they make.
  prefs: []
  type: TYPE_NORMAL
- en: Heijunka boxes offer a method to store production Kanban Cards and folders in
    slots within a box. The Heijunka box serves as a visual aid indicating the day's
    scheduled work over specific periods of time. The Hiejunka box may indicate which
    individuals are responsible for performing the work, or the type of products to
    be manufactured.
  prefs: []
  type: TYPE_NORMAL
- en: Another visual aid form is the *Visual Pitch Board*, which, like the Heijunka
    box, displays scheduled work overtime based on the value stream's pitch. But instead
    of placing the production Kanban folders in slots within a box, the value stream
    manager manually distributes the Cards and folders to the operators.
  prefs: []
  type: TYPE_NORMAL
- en: As a quick aside, the IT department may be asked to implement electronic equivalents
    of the Kanban Boards, Heijunka box, and Visual Pitch Boards. In Part Two of this
    book, we will learn how VSM tools provide these capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we need to update the VSM Storyboard with the future state map – leveling
    phase improvements. The VSM team needs to decide what icons they plan to use to
    indicate Kanban Boards, paced withdrawals, Heijunka boxes, Kanban folders or Cards,
    and Visual Pitch Boards.
  prefs: []
  type: TYPE_NORMAL
- en: This section completes our introduction to future state mapping, the sixth step
    in our VSM methodology. In the next chapter, you will learn how to implement Kaizen
    plans to guide your continuous improvement initiatives.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the three phases of future state value stream
    mapping. These phases include assessing the value stream's ability to manage customer
    demands, implement continuous flows, and level customer orders to optimize production
    capacities. In addition, you learned how to develop and evolve the future state
    map across these three phases.
  prefs: []
  type: TYPE_NORMAL
- en: As part of your learning, this chapter continued with the original IT-oriented
    value stream example, to show you how the VSM team moves from the continuous state
    assessment of work and information flows to analyzing a preferred future state.
    You completed the exercise by noting that the Sprint-based practices of Agile
    and Scrum implement batch processes inherently, which is a form of waste in Lean.
    However, you now know that batch processing can be eliminated by moving to Kanban-based
    production scheduling, as well as by implementing integrated and automated CI/CD
    and DevOps pipeline flows.
  prefs: []
  type: TYPE_NORMAL
- en: Having read this chapter, you now have the knowledge to evaluate and implement
    Lean improvements across value streams to address issues associated with aligning
    production with customer demand, improving continuous flows, and leveling production
    to meet variations in customer demand. With this information, you have developed
    improvement strategies in the form of discrete Kaizen Bursts.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to create and implement Kaizen plans
    to execute your future state improvement strategies.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please take a moment to answer the following questions to ensure you have a
    solid grasp of future state mapping:'
  prefs: []
  type: TYPE_NORMAL
- en: What are the three phases of future state value stream mapping?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the goal of the customer demand phase?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the goal of the continuous flow phase?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the goal of the leveling phase?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How is Takt time calculated, and what is its purpose?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How is pitch calculated, and what is its purpose?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a critical issue when you're managing customer demands across a value
    stream?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the primary objective of phase 2 – continuous flow?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In an ideal state, what is the objective of production leveling?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why do the iterative Agile and Scrum-based Sprints inherently implement batch-oriented
    processes, and how can those strategies be improved?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tapping, D., Luyster, T., Shuker, T. (2002) *Value Stream Management. Eight
    Steps to Planning, Mapping, and Sustaining Lean Improvements*. Productivity Press.
    New York, NY.
  prefs: []
  type: TYPE_NORMAL
- en: Tapping, D., Luyster, T., Shuker, T. (2003) *Value Stream Management for the
    Lean Office. Eight Steps to Planning, Mapping, and Sustaining Lean Improvements*.
    Productivity Press. New York, NY.
  prefs: []
  type: TYPE_NORMAL
- en: Tapping, D., Kozlowski, S., Archbold, L., Sperl, T. (2009) *Value Stream Management
    for Lean Healthcare. Four Steps to Planning, Mapping, Implementing, and Controlling
    Improvements in All Types of Healthcare Environments*. MCS Media, Inc. Chelsea,
    MI.
  prefs: []
  type: TYPE_NORMAL
