- en: '[*Chapter 15*](B17087_15_Final_PD_epub.xhtml#_idTextAnchor446): Defining the
    Appropriate DevOps Platform Strategy'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第 15 章*](B17087_15_Final_PD_epub.xhtml#_idTextAnchor446)：定义适当的 DevOps 平台战略'
- en: Congratulations! If you've made it this far, which is the start of *Section
    4* of this book, you are about to enter the final set of topics that will be covered
    in this book. Specifically, we will now turn our attention to understanding the
    approaches we can use to implement DevOps capabilities, as well as how to use
    those capabilities to support digital business transformations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！如果您已经走到了这一步，也就是本书的 *第 4 节* 的开始，您将要进入本书将要涵盖的最后一组主题。具体来说，我们现在将关注理解我们可以用来实施
    DevOps 能力的方法，以及如何利用这些能力来支持数字业务转型。
- en: 'There are four primary main topics that will be covered in this final section
    on applying DevOps to drive digital business transformations, as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节关于应用 DevOps 推动数字业务转型的最后一部分中，将涵盖四个主要主题，如下所示：
- en: Avoiding DevOps implementation pitfalls
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免 DevOps 实施中的陷阱
- en: Deciding on an appropriate DevOps platform strategy
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决定适当的 DevOps 平台战略
- en: Addressing the pitfalls of DevOps implementations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决 DevOps 实施的陷阱
- en: Interviewing the experts
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 采访专家
- en: Dealing with corporate implementation mandates
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理公司实施指令
- en: Dealing with creative versus repeatable pipeline activities
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理创造性与可重复性流水线活动的差异
- en: We will cover the first three topics in this chapter before discussing how we
    can use VSM and DevOps tools to help affect digital business transformations in
    [*Chapter 16*](B17087_16_Final_PD_epub.xhtml#_idTextAnchor491), *Transforming
    Businesses with VSM and DevOps*. In this chapter, you will learn about four basic
    DevOps implementation strategies, as well as the pros and cons of each. Then,
    we'll move on and discuss some of the pitfalls that can harm a DevOps implementation
    initiative. Finally, we'll review 18 strategies that can help improve your DevOps
    toolchain implementations.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 16 章*](B17087_16_Final_PD_epub.xhtml#_idTextAnchor491)，*利用 VSM 和 DevOps
    转型业务* 中，我们将讨论前三个主题，然后讨论如何使用 VSM 和 DevOps 工具来帮助影响数字业务转型。在这一章中，您将了解四种基本的 DevOps
    实施策略，以及每种策略的利弊。然后，我们将继续讨论可能损害 DevOps 实施倡议的一些陷阱。最后，我们将回顾 18 个可以帮助改善您的 DevOps 工具链实施的策略。
- en: Much of the information presented in this chapter comes from DevOps experts
    and the VSM and DevOps tools companies that were interviewed for this book. However,
    we've waited to recommend these strategies as they are relevant regardless of
    the DevOps tools and toolchains your organization may select for deployment.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中大部分信息来自于 DevOps 专家以及为本书进行访谈的 VSM 和 DevOps 工具公司。然而，我们等待推荐这些策略，因为它们与您的组织选择部署的
    DevOps 工具和工具链无关。
- en: We must address the implementation options and issues before we move on to the
    next chapter, because it won't matter how much benefit can be derived from VSM
    and DevOps tools if we fail to deploy them. Successfully deploying our VSM and
    DevOps methods and tools is necessary to support our digital transformations.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入下一章之前，我们必须解决实施选项和问题，因为如果我们未能部署它们，那么从 VSM 和 DevOps 工具中获益如何就不重要了。成功部署我们的
    VSM 和 DevOps 方法和工具对支持我们的数字转型至关重要。
- en: In the next chapter, you will discover that modern VSM tools and practices support
    aligning DevOps-based software deliveries to make other organization value stream
    improvements. In this sense, we will have come full circle to show how improved
    software delivery capabilities support the organization's value stream improvements,
    which are necessary to compete in our modern digital economy.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将发现现代 VSM 工具和实践支持将基于 DevOps 的软件交付与其他组织价值流改进对齐。从这个意义上说，我们将全面展示如何改进软件交付能力以支持组织的价值流改进，这对于在现代数字经济中竞争至关重要。
- en: With these objectives in mind, let's begin by exploring the potential pitfalls
    of DevOps implementations.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这些目标，让我们首先探讨 DevOps 实施的潜在问题。
- en: Avoiding DevOps implementation pitfalls
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免 DevOps 实施中的陷阱
- en: While preparing to write this chapter, I interviewed several people whose opinions
    I value as expert practitioners in deploying DevOps tools and toolchains. They
    are **Scott Ambler** (Vice President and Chief Scientist for Disciplined Agile
    at the Project Management Institute), **Al Wagner** (HCL Software VSM and DevOps
    Evangelist), **Helen Beal** (Chief Ambassador at DevOps Institute and Chair of
    the VSMC), **Pramod Malhotra** (DevOps Services Executive), and **Joel Kruger**
    (Senior DevOps Engineer specialized in developing reusable software factories).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在准备撰写本章时，我采访了几位我非常看重的专家，他们是部署DevOps工具和工具链的实际操作者。他们分别是**斯科特·安布勒**（项目管理协会Disciplined
    Agile的副总裁兼首席科学家），**阿尔·瓦格纳**（HCL软件VSM和DevOps倡导者），**海伦·比尔**（DevOps Institute的首席大使和VSMC的主席），**普拉莫德·马尔霍特拉**（DevOps服务执行官），和**乔尔·克鲁格**（专注于开发可重用软件工厂的高级DevOps工程师）。
- en: Helen Beal's credentials in the DevOps and DevOps communities are immense. She
    explains how DevOps implementations typically evolve to include multiple tools
    and the need for VSM tools to both improve and orchestrate software delivery workflows.
    Scott Ambler approaches DevOps from a Lean-Agile perspective and choosing your
    **Way of Working** (**WoW**) when implementing DevOps platforms.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 海伦·比尔在DevOps及其社区中的资历非常深厚。她解释了DevOps实施通常是如何发展成包括多种工具，并且需要VSM工具来改进和协调软件交付流程的。斯科特·安布勒从精益敏捷的角度看待DevOps，并强调在实施DevOps平台时选择自己的**工作方式**（**WoW**）。
- en: Pramod Malhotra discusses his DevOps implementation experiences as a Federal
    Prime and commercial systems integration contractor. Al Wagner will represent
    the point of view of a VSM/DevOps platform vendor. Finally, Joel Kruger will discuss
    the benefits of creating downloadable CI/CD and DevOps configurations as reusable
    software factories.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 普拉莫德·马尔霍特拉讨论了他作为联邦总承包商和商业系统集成商的DevOps实施经验。阿尔·瓦格纳将代表VSM/DevOps平台供应商的观点。最后，乔尔·克鲁格将讨论创建可下载的CI/CD和DevOps配置作为可重用的软件工厂的好处。
- en: With these initial introductions made, let's get going.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在做了这些初步介绍后，让我们开始吧。
- en: Interviewing the experts
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 采访专家
- en: In this section, we will understand the views of five industry experts and their
    take and ideas on DevOps.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将了解五位行业专家的观点，以及他们对DevOps的看法和想法。
- en: Interview with Helen Beal
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与海伦·比尔的访谈
- en: Helen Beal is a DevOps and Ways of Working coach, Chief Ambassador at **DevOps
    Institute**, Ambassador for the **Continuous Delivery Foundation**, and the Chair
    of the **Value Stream Management Consortium** (**VSMC**). She provides strategic
    advisory services to DevOps industry leaders and serves as an analyst at **Accelerated
    Strategies Group**.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 海伦·比尔是DevOps和工作方式教练，**DevOps Institute**的首席大使，**持续交付基金会**的大使，以及**价值流管理联盟**（**VSMC**）的主席。她为DevOps行业领导者提供战略咨询服务，并在**加速战略集团**担任分析师。
- en: I am privileged that Helen agreed to serve as a technical reviewer for this
    book and wanted to contribute her thoughts for this chapter. I've also had the
    opportunity to work with Helen as one of the advisors of the VSMC. So, with this
    introduction made, let's hear what Helen has to say.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我很荣幸海伦同意担任本书的技术审稿人，并希望为这一章贡献她的想法。我也有机会与海伦一起工作，她是VSMC的顾问之一。那么，在做了这个介绍后，让我们来听听海伦怎么说。
- en: Developing a DevOps mindset
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 培养DevOps思维方式
- en: Helen starts by stating that she does not believe that organizations should
    create DevOps teams. Instead, she views DevOps as a mindset and not so much an
    organizational structure. As she puts it, "*instill the mindset that DevOps is
    a cultural movement for the whole organization and design value stream teams that
    practice DevOps.*"
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 海伦首先指出，她不认为组织应该创建DevOps团队。相反，她认为DevOps是一种思维方式，而不仅仅是一种组织结构。正如她所说，"*灌输这种思维方式：DevOps是整个组织的文化运动，并设计实践DevOps的价值流团队。*"
- en: Value streams are the fundamental organizational structure for delivering value
    in a Lean enterprise. DevOps is a collaboration and technical implementation strategy
    that supports value streams in IT. So, in this context, Helen's statement makes
    overwhelming sense.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 价值流是精益企业中交付价值的基本组织结构。DevOps是一种支持IT中价值流的协作与技术实施策略。所以，在这种背景下，海伦的说法是完全合理的。
- en: DevOps began as a collaboration strategy to align the efforts of software development
    and operations teams to improve value-based software delivery capabilities. You
    also know now that mature DevOps pipelines collectively implement tool integrations,
    activity automation, and work and information orchestrations to improve value
    stream flows. DevOps requires a change in thinking and culture to align software
    delivery with value streams.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps最初是一种协作策略，旨在协调软件开发和运维团队的努力，以提高基于价值的软件交付能力。你现在也知道，成熟的DevOps流水线通过集成工具、自动化活动以及工作和信息的编排，共同推动价值流的改善。DevOps需要改变思维和文化，以便将软件交付与价值流对接。
- en: Empowering people
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 授权员工
- en: DevOps changes the way people work within and across the organization. For that
    reason, DevOps affects the organization's people and its culture. Helen goes on
    to note that we must empower people to participate – "*people don't like having
    change done to them – they have to be given autonomy to find their own way forward.*"
    Helen also notes that it's hard to become empowered if you haven't been for a
    long time.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps改变了人们在组织内部和跨部门之间的工作方式。因此，DevOps影响着组织的人力和文化。Helen进一步指出，我们必须赋予人们参与的权利——"*人们不喜欢变革被强加给他们——他们必须被赋予自主权来找到自己的前进道路*。"Helen还提到，如果长期没有获得授权，想要变得有权力就非常困难。
- en: Leading the way
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 引领前行
- en: Helen makes the point that *leaders lead*. Therefore, they can't take a backseat
    role in overseeing the deployment of DevOps tools and toolchains, as well as the
    organizational changes that must come to utilize this new way of working effectively.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Helen指出，*领导者是领导者*。因此，他们不能在监督DevOps工具和工具链的部署以及必须采取的组织变革中采取旁观者的角色，以便有效地利用这种新的工作方式。
- en: To be effective in their roles, the executives within the organization must
    learn the skills and principles of DevOps before they come out with any mandate
    for its use. Otherwise, they can't possibly make informed decisions on tools,
    related budgets, aligning resources, and training requirements.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在他们的角色中有效，组织内的高管必须首先学习DevOps的技能和原则，然后才能出台任何关于使用DevOps的指令。否则，他们不可能就工具、相关预算、资源对接和培训需求做出明智的决策。
- en: Helen observes that many leaders think they are *above learning*. Instead, leaders
    need to retrain the organization, starting with themselves. DevOps moves the organization
    away from a traditional hierarchical and command and control structure. Therefore,
    its leaders – including the organization's executives, managers, and coaches –
    must have the skills and knowledge to encourage their teams to self-discover ways
    to improve and help remove the impediments identified by their teams.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Helen观察到，许多领导者认为他们是*高高在上的*。然而，领导者需要从自己做起，重新培训组织。DevOps使组织远离传统的等级制和指挥控制结构。因此，其领导者——包括组织的高管、经理和教练——必须具备鼓励团队自我发现改进方法的能力和知识，并帮助消除团队识别的障碍。
- en: Evolving over transforming
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 演变而非转型
- en: A trend among many analysts today is to speak about using Lean-Agile practices
    to support business transformations. In this book, you have heard me describe
    how we can use VSM and DevOps methods and tools to support business transformations
    to compete in our modern digital economy.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 目前许多分析师的趋势是讨论使用精益敏捷实践来支持业务转型。在这本书中，你已经听我描述了我们如何使用VSM和DevOps方法和工具来支持业务转型，以便在现代数字经济中竞争。
- en: However, Helen is concerned that the notion of effecting business transformation
    is too *big bang* and that many people have change fatigue from previously failed
    transformations. Instead, Helen believes we are better served by aiming for evolution
    with continuous and incremental improvements. In this context, Helen believes
    it's better for the organization to steer its efforts toward achieving a culture
    of continuous evolution, and not a one-time and relatively short-term business
    transformation objective.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Helen担心进行业务转型的概念过于*轰动性*，许多人由于之前的转型失败而感到变革疲劳。相反，Helen认为我们最好通过持续的渐进式改进来追求演变。在这个背景下，Helen认为，组织更应该将其努力方向引导向实现持续演变的文化，而不是追求一次性和相对短期的业务转型目标。
- en: Making time to learn
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 抽出时间学习
- en: Helen noted previously that the organization's leaders must gain knowledge to
    support an effective DevOps transformation. But that same learning requirement
    extends throughout the organization, and time and resources must be made available
    for their continued education.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Helen之前提到过，组织的领导者必须获得支持有效DevOps转型的知识。但是，这种学习要求不仅仅局限于领导层，而是要在整个组织范围内实施，并且必须为员工的持续教育提供时间和资源。
- en: These training requirements mean the organization's executives must make time
    for learning. In other words, continuing learning must be viewed as an ongoing
    job requirement and not a nice thing to have.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这些培训要求意味着组织的高层管理者必须为学习腾出时间。换句话说，持续学习必须被视为一项持续的工作要求，而不仅仅是一个可有可无的选项。
- en: DevOps evolution requires all humans in an organization to unlearn long-held
    beliefs and practices (for example, PRINCE, project management, and so on) and
    learn new ways of thinking and working. Helen notes that humans have cognitive
    load limits, and it takes time to learn and practice new behaviors. Therefore,
    time must be allocated to learning outside of **business as usual** (**BAU**)
    and new feature development and resolution.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps的演进要求组织中的所有人放弃长期以来坚持的信念和做法（例如PRINCE、项目管理等），并学习新的思维方式和工作方法。Helen指出，人类的认知负荷是有限的，学习和实践新行为需要时间。因此，必须为学习分配时间，超越**日常业务**（**BAU**）和新的功能开发与解决。
- en: Resolving technical debt
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解决技术债务
- en: Though not technically part of training, Helen made the same point about resolving
    technical debt. In other words, organizations need to build time into their busy
    schedules to refactor software code, as this helps address performance issues
    that accumulate when the teams are focused on conveniently delivering new features.
    Similarly, the development and support teams need to improve a product's architecture
    and design and implement new technology improvements from time to time.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管技术上不属于培训的一部分，Helen也强调了解决技术债务的重要性。换句话说，组织需要在繁忙的日程中腾出时间来重构软件代码，因为这有助于解决在团队专注于便捷地交付新特性时积累的性能问题。同样，开发和支持团队也需要不时地改进产品的架构和设计，并实施新的技术改进。
- en: Building the DevOps platform
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建DevOps平台
- en: Helen points out that new DevOps tools become available all the time and that
    their requirements change over time, too. Therefore, software delivery teams need
    to build an adaptable DevOps framework – think API first. Taking on a DevOps framework
    strategy helps ensure the platform remains extensible over time, allowing new
    capabilities and future technologies to be integrated to support the organization's
    evolving software delivery needs.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Helen指出，新的DevOps工具不断涌现，而且它们的需求也在不断变化。因此，软件交付团队需要构建一个可适应的DevOps框架——从API优先的角度进行思考。采用DevOps框架策略有助于确保平台在时间的推移中保持可扩展性，从而允许集成新的功能和未来的技术，以支持组织不断发展的软件交付需求。
- en: Another important consideration is to aim for traceability throughout the toolchain.
    Helen believes you should accept that your DevOps platform will become a heterogeneous
    toolchain, even if you start with a commercial **DevOps as a Service (DaaS) platform**.
    Supporting an evolutionary approach to make continuous improvements in your DevOps
    toolchains will drive that eventual outcome. On the positive side, your VSM platform
    will hook it all together for you.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的考虑因素是，要在工具链中实现可追溯性。Helen认为，你应该接受你的DevOps平台将成为一个异构工具链的事实，即使你一开始使用的是商业**DevOps即服务（DaaS）平台**。支持持续改进DevOps工具链的进化性方法将推动这一最终结果。好的一面是，你的VSM平台将把这一切联系在一起。
- en: Also, Helen believes you should aim to provision your DevOps toolchain/VSM platform
    as a service to your value stream teams. While teams can have different requirements
    and tools, you can separate the architecture or categories of your toolchain from
    the actual toolchain and switch tools out (for example, NUnit for .NET unit tests,
    JUnit for Java unit tests). We'll discuss this topic more in the *Adopting software
    factory strategies* and *Building reusable software factories* sections, both
    of which discuss how downloadable and self-service configurations can serve as
    reusable software factories.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Helen认为，你应该将DevOps工具链/VSM平台作为服务提供给你的价值流团队。尽管团队可能有不同的需求和工具，但你可以将工具链的架构或类别与实际的工具链分开，并更换工具（例如，.NET单元测试使用NUnit，Java单元测试使用JUnit）。我们将在*采纳软件工厂策略*和*构建可重用的软件工厂*章节中进一步讨论这个话题，这两部分讨论了可下载和自助配置如何作为可重用的软件工厂。
- en: Overcoming DevOps implementation challenges
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 克服DevOps实施挑战
- en: Helen believes it's difficult to establish a common view of what DevOps is in
    an organization. Some people may think of it as just a piece of automation, such
    as implementing a CI/CD pipeline. Others recognize that the breadth of DevOps
    includes the entire value stream, connecting all parts of the business and incorporating
    Agile, Lean, **site reliability engineering** (**SRE**), DevSecOps, DataOps, or
    AIOps.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 海伦认为，在组织中建立关于 DevOps 的共同看法是困难的。有些人可能认为它只是自动化的一部分，比如实施 CI/CD 流水线。其他人则认识到 DevOps
    的广度包括整个价值流，连接业务的所有部分，并融合敏捷、精益、**站点可靠性工程**（**SRE**）、DevSecOps、DataOps 或 AIOps。
- en: Regardless of how your organization elects to define DevOps, make sure you have
    evangelists and communities of practice define and socialize why and how DevOps
    supports your business.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您的组织如何定义 DevOps，都必须确保有倡导者和实践社区来定义并传播 DevOps 如何支持您的业务。
- en: Helen notes that the most common challenge when implementing DevOps is around
    culture. The tools and toolchains are the easiest things to see and implement.
    But it's changing people's thinking and ways of working that is much harder to
    accomplish in practice.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 海伦指出，实施 DevOps 时最常见的挑战是文化问题。工具和工具链是最容易看到和实施的部分。但改变人们的思维方式和工作方式，在实践中要做到这一点要困难得多。
- en: To affect cultural change toward positive outcomes, Helen believes the organization
    must actively build psychological safety, train leaders to distribute authority,
    invest heavily in continuous learning, and teach people to talk about their emotions,
    feelings, and behavior. In addition, she suggests organizations employ the latest
    findings in neuroscience in their efforts to help create real and lasting change.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了推动文化变革以实现积极的成果，海伦认为组织必须积极建立心理安全感，培训领导者分配权力，重视持续学习，并教人们讨论自己的情感、感受和行为。此外，她建议组织在帮助创造真正且持久的变革时，采用神经科学的最新研究成果。
- en: Finally, Helen discussed the relevance of KPIs and OKRs to define the goals
    and objectives for your DevOps implementation activities. But she also notes that
    they should not be inflicted on teams. Instead, allow your DevOps teams to define
    and measure their objectives and metrics. And make sure your teams have the tools
    (that is, VSMPs) to monitor their results continually and in real time.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，海伦讨论了 KPI 和 OKR 在定义 DevOps 实施活动的目标和宗旨中的相关性。但她也指出，这些不应强加给团队。相反，应该让 DevOps
    团队定义并衡量他们的目标和指标。并确保您的团队拥有（即 VSMPs）实时监控结果的工具。
- en: Interview with Scott Ambler
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 斯科特·安布尔访谈
- en: Scott is the co-creator, along with Mark Lines, of **Project Management Institute**
    (**PMI**)'s **Disciplined Agile** (**DA**) toolkit. Scott works also with Al Shalloway,
    the thought leader behind DA FLEX. **Disciplined DevOps** is one of the layers
    of the DA toolkit, and it is from this perspective that Scott discusses DevOps
    implementation pitfalls and platform strategies.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 斯科特与马克·莱恩斯共同创建了**项目管理协会**（**PMI**）的**严谨敏捷**（**DA**）工具包。斯科特还与阿尔·沙洛威合作，后者是 DA
    FLEX 的思想领袖。**严谨 DevOps**是 DA 工具包的一个层面，斯科特正是从这个角度讨论 DevOps 实施的陷阱和平台策略。
- en: Scott has extensive IT experience and has shared his knowledge for years. He
    has authored or co-authored over 20 books in the IT and process space and has
    worked with organizations worldwide to help them improve their way of working.
    Scott is currently the Vice President and Chief Scientist for DA at PMI.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 斯科特拥有丰富的 IT 经验，多年来一直分享他的知识。他在 IT 和流程领域已经著作或共同著作了超过 20 本书，并与全球各地的组织合作，帮助他们改进工作方式。斯科特目前是
    PMI DA 部门的副总裁兼首席科学家。
- en: You can't buy DevOps
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你不能买到 DevOps
- en: Scott believes that the greatest implementation pitfall, when it comes to DevOps,
    is when the decision-makers do not understand the scope of the challenge. Too
    many organizations want to *install DevOps*, thinking that they can buy their
    way out of their current mess. Or, they think they can *transform to DevOps* in
    a few short months. Nothing can be further from the truth.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 斯科特认为，谈到 DevOps 时，最大的实施陷阱就是决策者不了解挑战的范围。许多组织希望*安装 DevOps*，认为他们可以通过购买解决当前的困境。或者，他们认为他们可以在几个月内*转型为
    DevOps*。实际上，情况远非如此。
- en: Successful DevOps implementations require significant and long-term investment
    in people, processes, and technology. First, there is a significant people issue.
    Every firm Scott has worked with needed to develop new skills, implement training
    programs, and find or develop mentors and coaches to support the learning journey.
    DevOps also clearly requires new WoW, as you've seen throughout this book, plus
    investments in tools and technologies to support this new and evolving WoW.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的 DevOps 实施需要在人员、流程和技术方面进行大量的长期投资。首先，这是一个重大的人员问题。斯科特与每一个他合作的公司都需要开发新的技能，实施培训项目，并寻找或培养导师和教练来支持学习过程。DevOps
    显然需要新的工作方式（WoW），正如你在本书中看到的那样，还需要在支持这种新兴工作方式的工具和技术上进行投资。
- en: DevOps is about more than Dev and Ops
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DevOps 不仅仅是开发和运维
- en: 'The most important observation that Scott makes about DevOps, echoing what
    Pramod and Al share, is that it is about more than just merging *Development*
    and *Operations*. In disciplined DevOps, one of the four layers of the DA toolkit,
    PMI has melded together six key aspects of enterprise-class DevOps:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 斯科特对 DevOps 的最重要观察，与 Pramod 和 Al 的观点一致，强调 DevOps 不仅仅是将 *开发* 和 *运维* 合并。在纪律化的
    DevOps 中，DA 工具包的四个层次之一，PMI 将企业级 DevOps 的六个关键方面融合在一起：
- en: '**Solution delivery**: This is a fit-for-purpose, tactically scalable approach
    to software-based solution delivery. Called **Disciplined Agile Delivery** (**DAD**),
    it weaves all aspects of solution delivery to produce consumable solutions from
    beginning to end. Consumable means that something is functional (it works), usable
    (it works well), and desirable (people want to work with it). A solution potentially
    includes software, hardware, documentation, business process improvements, and
    organization structure improvements. Agile teams typically focus on producing
    working software, where DA teams focus on producing consumable solutions – a big
    difference.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解决方案交付**：这是一个适应目的、战术可扩展的软件解决方案交付方法。被称为 **纪律化敏捷交付**（**DAD**），它将解决方案交付的各个方面编织在一起，从头到尾生成可消耗的解决方案。可消耗意味着某个东西是功能性（它能工作）、可用的（它运作良好）和令人期望的（人们愿意使用它）。一个解决方案可能包括软件、硬件、文档、业务流程改进以及组织结构改进。敏捷团队通常专注于生产工作中的软件，而
    DA 团队则专注于生产可消耗的解决方案——这是一个巨大的区别。'
- en: '**DevSecOps**: Disciplined DevOps builds security, both information/cybersecurity
    and physical security, practices right into the toolkit for the reasons that Pramod
    and Al share. Security should never be an afterthought.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DevSecOps**：纪律化的 DevOps 将信息/网络安全和物理安全实践直接融入工具包中，正如 Pramod 和 Al 所分享的原因。安全性绝不应成为事后考虑的事情。'
- en: In this chapter, we'll see the acronym DevSecOps used oftentimes in lieu of
    the more traditional DevOps acronym. Where DevOps evolved as a collaborative strategy
    to break down the silos between development and operations, DevSecOps brings security
    into the collaborations. In other words, security is involved in each phase of
    the software development cycle as a part of the team, and not a siloed function.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到 DevSecOps 这个缩写常常被用来替代更传统的 DevOps 缩写。DevOps 作为一种协作策略，旨在打破开发和运维之间的壁垒，而
    DevSecOps 将安全性纳入到协作中。换句话说，安全性作为团队的一部分，参与软件开发生命周期的每个阶段，而不是作为一个孤立的职能。
- en: The goal of DevSecOps is to avoid security issues cropping up in a deployed
    software solutions. To achieve this goal, the DevSecOps pipeline includes integrated,
    automated, and orchestrated threat modeling and security testing activities. The
    automation capabilities ensure each new code change is thoroughly tested with
    attending reports and alerts generated detailing any potential vulnerabilities.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: DevSecOps 的目标是避免在已部署的软件解决方案中出现安全问题。为了实现这一目标，DevSecOps 流水线包括集成、自动化和协调的威胁建模和安全测试活动。自动化能力确保每次新的代码更改都会经过彻底测试，并生成相关报告和警报，详细说明任何潜在的漏洞。
- en: In a DevSecOps pipeline, security is not limited to software coding and testing
    activities. Once released, monitoring tools continuously scan for threats and
    vulnerabilities, generating incident reports when and as they are discovered.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 DevSecOps 流水线中，安全性不仅限于软件编码和测试活动。发布后，监控工具会持续扫描潜在威胁和漏洞，并在发现时生成事件报告。
- en: '**Data DevOps**: Data is the lifeblood of your organization, yet it''s often
    ignored or at least treated as a low priority in most DevOps implementations.
    What is the value of deploying changes to your software many times a day if you
    can''t also deploy changes to your data at the same rate?'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据 DevOps**：数据是你组织的命脉，但它常常被忽视，或者至少在大多数 DevOps 实施中被视为低优先级。如果你无法以同样的速度部署数据更改，那么一天内多次部署软件更改又有什么价值呢？'
- en: '**Multi-solution support**: The DevOps philosophy of *you build it, you run
    it, and you support it* is a valuable motivator for better collaboration and process
    improvement. But it doesn''t scale. When your organization has hundreds, or even
    thousands, of systems in operations, your end users need a common and coherent
    strategy to get support.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多解决方案支持**：DevOps 的哲学是 *你构建它，你运行它，你支持它*，这是一个非常有价值的激励因素，能够促进更好的协作和流程改进。但是它无法扩展。当你的组织有数百个，甚至数千个运行中的系统时，终端用户需要一个共同且连贯的策略来获得支持。'
- en: '**Common IT operations**: Once again, if you have many solutions running in
    production or supporting many DevOps pipelines or both, you want to support some
    common operational infrastructure to streamline things. In several organizations,
    Scott helped them identify the common, shared infrastructure and what is unique
    to support the needs of individual teams. How you treat, support, and evolve shared
    infrastructure is different from how you treat application-specific functionality.
    Scott''s goal is to help his clients learn how to work with and evolve the two
    types of infrastructures accordingly.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**常见的 IT 操作**：如果你在生产环境中运行多个解决方案，或者支持许多 DevOps 流水线，或者两者兼有，你需要支持一些共同的操作基础设施来简化工作。在多个组织中，Scott
    帮助他们识别出共享的基础设施和支持各个团队需求的独特部分。你对待、支持和发展共享基础设施的方式与对待特定应用功能的方式是不同的。Scott 的目标是帮助客户学会如何根据需要协作并发展这两种基础设施。'
- en: '**Business operations**: Time and again, Scott has found that you don''t want
    to restrict Ops to IT operations. That''s certainly important, but if your business
    operations aren''t comparatively flexible, you''re better off investing effort
    in improving that aspect of your value stream first.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**业务运营**：Scott 一再发现，你不应将运营限制在 IT 操作上。这当然很重要，但如果你的业务运营相对不够灵活，那么你最好先投入精力改善这一价值流的方面。'
- en: Scott believes a critical danger in DevOps implementations comes from ignoring
    the fact that there is more to DevOps than merely telling Dev and Ops teams to
    start working together in collaboration. Disciplined DevOps shows how all these
    critical aspects fit together in a streamlined and evolvable manner. And it also
    shows how to improve in each of these areas in parallel, but still as a collaborative
    effort.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Scott 认为，DevOps 实施中的一个关键危险是忽视了 DevOps 不仅仅是让开发团队和运维团队开始合作。规范化的 DevOps 展示了这些关键方面如何以流畅且可发展的方式相互配合。它还展示了如何在这些领域并行改进，但仍然作为一种协作的努力进行。
- en: In the next six subsections, Scott will explain how DevOps is employed within
    the DA Toolkit.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的六个小节中，Scott 将解释如何在 DA 工具包中运用 DevOps。
- en: We'll start with the first DevOps concept, *Start with a mindset*.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从第一个 DevOps 概念开始，*以思维方式为起点*。
- en: Starting with a mindset
  id: totrans-73
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从思维方式开始
- en: Scott points out that the Agile Manifesto, which most people point to as a description
    of the Agile mindset, was written over 20 years ago to address the problems of
    that time. But times have changed, and we've learned a few things along the way.
    Scott stresses that the mindset that was captured in the Agile Manifesto is a
    great start, and that there are many great ideas around a DevOps mindset that
    you've learned in this book, but what we really need is a mindset for business
    agility. Although DevOps is an enabler of value streams and business agility in
    general, it doesn't exist in a vacuum. To be successful, you need to look at the
    bigger picture beyond DevOps.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Scott 提到，大多数人所称的 Agile 思维方式的描述——《敏捷宣言》——是在 20 多年前写的，目的是解决当时的问题。但是，时代已经变了，我们在过程中也学到了一些东西。Scott
    强调，虽然《敏捷宣言》中表达的思维方式是一个很好的起点，但本书中你学到的 DevOps 思维方式也有许多伟大的理念，真正需要的是一种面向业务敏捷性的思维方式。虽然
    DevOps 是价值流和业务敏捷性的推动者，但它并不是孤立存在的。要成功，你需要看清除 DevOps 之外的更大图景。
- en: This approach is what PMI has done with the DA toolkit, including its DA Mindset,
    which captures principles, promises, and guidelines for business agility. A common
    mindset for business agility provides a foundation from which people can collaborate
    and work together, supporting the creation of a shared culture among your disparate
    teams.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法正是 PMI 在 DA 工具包中所采用的，包括其 DA 心态，其中捕捉了关于业务敏捷性的原则、承诺和指南。统一的业务敏捷性心态为团队成员提供了一个基础，从中他们可以进行协作，支持在不同团队之间创建共享文化。
- en: Unexpectedly, the DA community found that this still wasn't enough. People from
    different domains come to the table with their own unique experiences, skillsets,
    priorities, and ways of looking at things. For example, security professionals
    have their unique philosophies, as do data professionals, marketing professionals,
    product managers, and other critical stakeholders. So, not only do we need the
    foundational principles, promises, and guidelines of the DA mindset, but we must
    also extend them with unique philosophies for each of the groups, or tribes, within
    our organizations.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 出乎意料的是，DA 社区发现这仍然不够。从不同领域的人带着自己独特的经验、技能、优先级和观点来到桌前。例如，安全专业人员有他们独特的理念，数据专业人员、市场营销专业人员、产品经理和其他关键利益相关者也是如此。所以，我们不仅需要
    DA 心态的基础原则、承诺和指南，还必须为组织内每个团队或“部落”扩展这些理念，加入各自独特的哲学。
- en: Each process blade within DA, what DA calls process areas – such as security,
    data management, enterprise architecture, IT operations, and many others – extend
    the DA mindset with several philosophies pertinent to that domain. This approach
    enables people to focus on those process areas to tackle the challenges they face
    with a fit-for-purpose mindset for their context, all while sharing a common culture
    with the rest of the organization.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: DA 中的每个过程模块，DA 称之为过程领域——例如安全性、数据管理、企业架构、IT 运维等——都通过多个与该领域相关的理念扩展了 DA 心态。这种方法使人们能够专注于这些过程领域，以适应他们特定背景下的挑战，同时与组织中的其他人分享共同的文化。
- en: To summarize, DA promotes the idea that we need a common mindset to interact
    well with others. And *we must also respect the differences that people bring
    to the table, including their outlooks*. Success in DevOps requires everyone to
    evolve their way of looking at the world and apply their unique strengths in new
    ways.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，DA 提倡我们需要一个共同的心态，以便与他人良好互动。并且*我们还必须尊重每个人带来的差异，包括他们的观点*。DevOps 的成功要求每个人都要发展自己看待世界的方式，并以新的方式运用他们独特的优势。
- en: Your technical debt has come due
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 你的技术债务已经到期
- en: If Scott had to pick a single reason for the slow implementation of DevOps within
    organizations, it would have to be technical debt. Poor quality source code and
    a lack of automated regression tests have been the bane of anyone bringing DevOps
    into their organizations for years. But data-oriented technical debt and quality
    problems with your data sources have been a blind spot for many organizations
    for years. Although senior leadership often recognizes there's a problem, they've
    often given up on ever trying to address it. But unless your organization addresses
    all aspects of technical debt, you will struggle to implement DevOps successfully.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Scott 必须选出一个导致 DevOps 在组织内实施缓慢的原因，那一定是技术债务。多年来，糟糕的源代码质量和缺乏自动化回归测试一直是将 DevOps
    引入组织的人的痛苦根源。但数据相关的技术债务和数据源质量问题多年来一直是许多组织的盲点。尽管高层领导通常认识到存在问题，但他们往往已放弃尝试解决它。但除非你的组织解决了所有技术债务的问题，否则你将很难成功实施
    DevOps。
- en: Belying the name, the primary causes of technical debt aren't technical in nature
    but rather people oriented. In fact, Scott's experience is that most technical
    debt stems from project management thinking and behavior. In particular, the desire
    to be *on time and on budget* tends to force teams to produce lower-quality solutions
    than they would prefer, thereby increasing technical debt. The *we'll fix it later*
    claim rarely materializes. And, of course, the poor levels of training in design
    and architecture concepts and techniques are also contributors to technical debt.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 与名称相反，技术债务的主要原因并非技术性问题，而是与人相关。事实上，Scott 的经验是，大多数技术债务源自项目管理的思维和行为。特别是，追求*按时按预算*完成任务的愿望往往迫使团队生产比他们期望的更低质量的解决方案，从而增加了技术债务。*我们以后再修复*的说法很少兑现。而且，设计和架构概念及技术的培训水平差，也是技术债务的原因之一。
- en: Over the years, every organization Scott has worked with – spanning software
    firms, financial organizations, manufacturers, and grocery chains – needed to
    invest in paying down technical debt. However, investing in software quality,
    automated tests, and improving data quality always proves to be the lion's share
    of your DevOps infrastructure investment, requiring years of hard work to resolve.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 多年来，Scott所合作的每个组织——涵盖了软件公司、金融机构、制造商和超市链——都需要投资来减少技术债务。然而，投资软件质量、自动化测试和提升数据质量始终是DevOps基础设施投资的主要部分，解决这些问题需要多年的艰苦努力。
- en: Evolving into a fit for purpose DevOps strategy
  id: totrans-83
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 发展成一个适合目的的DevOps战略
- en: The DA toolkit takes a very different approach to providing process advice.
    Frameworks such as SAFe or LeSS provide a collection of *best practices* that
    prescribe what to do, which can be an excellent start. But it's only a start.
    Scott believes your organization is unique and facing a unique and evolving situation,
    so you need to go beyond Agile frameworks.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: DA工具包采用了与提供过程建议非常不同的方法。像SAFe或LeSS这样的框架提供了一系列的*最佳实践*，规定了该做什么，这可以是一个很好的起点。但这仅仅是一个起点。Scott认为你的组织是独特的，并且面临着一个独特且不断变化的情况，因此你需要超越敏捷框架。
- en: Instead, the DA toolkit tells you what to think about, provides options to address
    the challenges you face, and describes the trade-offs of those options. It puts
    you in a position to decide on what techniques to experiment with to develop your
    fit-for-purpose approach. It supercharges the "fail fast" improvement strategy
    by helping you make better decisions and thereby fail less often, leading to faster
    improvement.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，DA工具包告诉你应该考虑什么，提供应对你面临的挑战的选项，并描述这些选项的权衡。它使你能够决定尝试哪些技术，以发展适合你的方法。它通过帮助你做出更好的决策，从而加速“快速失败”的改进策略，减少失败次数，进而加速改进。
- en: Once again, Scott notes that a common implementation pitfall is thinking that
    you can install or quickly transform into a DevOps organization. You really can't.
    Instead, you need to do the hard work to evolve into DevOps. You want to have
    a fit-for-purpose DevOps strategy that reflects your organization, your people,
    and your goals, leading to your desired outcomes. You need to take responsibility
    for your WoW, and the DA toolkit helps you do exactly that.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，Scott指出一个常见的实施误区是认为你可以快速安装或转型为一个DevOps组织。其实你做不到。相反，你需要付出艰苦的努力，逐步演进成DevOps。你想要一个适合目的的DevOps战略，能够反映你的组织、你的人员和你的目标，最终实现你期望的结果。你需要对你的WoW负责，而DA工具包正是帮助你做到这一点。
- en: You can buy some of your DevOps infrastructure
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 你可以购买一些你的DevOps基础设施
- en: We've talked about DevOps platforms. Yes, you can buy DevOps tooling or adopt
    cloud-based **DevOps as a Service** (**DASS**) options and combinations thereof.
    So, the situation isn't entirely bleak, but you still need to install and configure
    the tooling. You still need to train people so that they know how to use. You
    still need to use the new infrastructure effectively. And as Scott pointed out
    earlier, you also need to invest in paying down technical debt. A vital aspect
    of that is infrastructural – such as developing automated tests. So, in short,
    you can buy some of your infrastructure, but you'll need to build a lot of it
    yourself.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经谈过了DevOps平台。是的，你可以购买DevOps工具或采用基于云的**DevOps即服务**（**DASS**）选项及其组合。因此，情况并非完全悲观，但你仍然需要安装和配置这些工具。你仍然需要培训人员，使他们知道如何使用。你仍然需要有效地使用新的基础设施。正如Scott之前提到的，你还需要投资来减少技术债务。技术债务的一个关键方面是基础设施方面——例如开发自动化测试。因此，简而言之，你可以购买一些基础设施，但你仍然需要自己构建很多基础设施。
- en: Disciplined DevOps is table stakes for Agile enterprises
  id: totrans-89
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 有纪律的DevOps是敏捷企业的基础条件
- en: You can do the hard work of figuring out how development, operations, security,
    data, and support all fit together. And you can work through how it all supports
    your value streams and fits into your overall organization. Alternatively, you
    can look at the DA toolkit, which has already done all this heaving lifting, and
    use that as a starting point.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过努力弄清楚开发、运维、安全、数据和支持如何相互配合。你还可以考虑这些如何支持你的价值流，并适应整个组织的需求。或者，你可以查看DA工具包，它已经做了所有这些繁重的工作，并以此作为起点。
- en: The DA toolkit shows how it all fits together, going far beyond DevOps to address
    how to effectively implement value streams and then support them at the enterprise
    level. Being choice-based, rather than prescriptive, teaches your teams how to
    evolve a fit-for-purpose *WoW* to be as effective as it can be, yet still fit
    into the overall value stream they're part of. And, of course, Lean governance
    strategies are woven through the toolkit; otherwise, chaos would ensue.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: DA 工具包展示了这一切如何协同工作，远远超出了 DevOps 的范围，解决了如何有效实施价值流并在企业层面支持它们的问题。它是基于选择的，而非强制性的，教会团队如何演进一个合适的
    *WoW*，使其尽可能高效，同时又能融入它所在的整体价值流。当然，精益治理策略贯穿于整个工具包；否则，混乱将会发生。
- en: Evolving with the times
  id: totrans-92
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 与时俱进
- en: 'There are two critical and unfortunate observations that you must embrace if
    you''re to be successful with DevOps:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个至关重要且不幸的观察，您必须接受它们，才能在 DevOps 上取得成功：
- en: '**Your organization is unique**: We''ve said this before; the implication is
    that you need to choose your WoW so that you have something that is fit for purpose.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**您的组织是独一无二的**：我们之前说过这一点；其含义是您需要选择合适的 WoW，以确保有一个符合目的的工作方式。'
- en: '**Your environment is fluid**: Your WoW cannot be static; instead, it must
    evolve as your situation evolves. You must become a learning organization that
    knows how to improve continuously.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**您的环境是流动的**：您的 WoW 不能是静态的；它必须随着您的情况发展而演进。您必须成为一个能够不断改进的学习型组织。'
- en: DA teaches you how to get better at getting better. It explicitly shows you
    that you have options and how to choose the best option for your current situation.
    It embeds improvement strategies at the team and organizational level, and also
    embraces a guided approach to experimentation beyond the *fail fast* mantra of
    mainstream Agile.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: DA 教您如何更好地提高自己。它明确地告诉您，您有多个选择，并且如何根据当前情况选择最佳选项。它在团队和组织层面嵌入了改进策略，并且采纳了一种引导式的实验方法，超越了主流敏捷的
    *快速失败* 理念。
- en: There isn't an easy answer
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 并没有简单的答案
- en: Scott couldn't say this enough – there are no shortcuts. You can't buy a DevOps
    solution, you can't install one, and you can't quickly transform it into DevOps.
    Instead, you need to do the hard work of evolving your culture, evolving your
    WoW, and improving your infrastructure. His experience is that DevOps is about
    people, processes, and technology. His final admonishment is *ignore these issues
    at your peril*.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Scott 总是说，不能强调这一点太多——没有捷径可走。您不能购买 DevOps 解决方案，不能安装一个，也不能快速地将其转变为 DevOps。相反，您需要付出努力，逐步演进您的文化，演进您的
    WoW，并改善您的基础设施。他的经验是，DevOps 涉及人、过程和技术。他最后的警告是 *忽视这些问题将自食其果*。
- en: Interview with Pramod Malhotra
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与 Pramod Malhotra 的访谈
- en: Having direct and extensive operational experience, Pramod is an executive with
    Salient CRGT who serves as the company's DevSecOps and application modernization
    thought leader. In addition, he has overseen numerous DevOps implementations in
    large commercial businesses and federal government agencies. Having worked with
    Pramod directly over the past 5 years, it's been interesting to see how his views
    have evolved along with the industry. Here are some of his insights.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有直接且广泛的运营经验，Pramod 是 Salient CRGT 的一名高管，担任公司 DevSecOps 和应用现代化的思想领袖。此外，他还监督了许多大型商业企业和联邦政府机构的
    DevOps 实施。过去五年直接与 Pramod 合作，让我见证了他的观点如何随着行业的发展而演变。以下是他的一些见解。
- en: Getting executive support
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获得高管支持
- en: First, Pramod believes that any efforts to implement DevOps tools and toolchains
    will fail without executive-level support. This concern has been a recurring theme
    throughout this book. But Pramod has observed firsthand how difficult it is to
    implement DevOps at scale without executive leadership.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，Pramod 认为，在没有高管级别支持的情况下，任何关于 DevOps 工具和工具链的实施都将失败。这一问题在本书中反复提到。但 Pramod 亲眼见证了没有高管领导支持，在大规模实施
    DevOps 时的困难。
- en: First, DevOps requires a cultural change that cannot be driven as a bottoms-up
    strategy. It's natural for people to resist change and to continue what they have
    been doing. For that reason, DevOps cannot be mandated either. Instead, executives
    need to take a leadership role to establish relevant **Objectives and Key Results**
    (**OKRs**) and help drive the organization to obtain the desired results.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，DevOps 需要一种文化变革，而这种变革不能仅仅通过自下而上的策略来推动。人们抗拒变化，继续做他们习惯做的事情是很自然的。因此，DevOps 也不能被强制执行。相反，企业高管需要发挥领导作用，建立相关的
    **目标与关键结果** (**OKRs**)，并帮助推动组织实现预期的成果。
- en: On the other hand, the benefits of DevOps as a software delivery improvement
    strategy are worth the effort. DevOps improves software development capabilities,
    and everyone throughout the enterprise is affected in terms of how they do their
    work. In other words, in the digital economy, the software delivers value as standalone
    products, enables digitally enhanced features in physical products, and supports
    value stream process improvements throughout the enterprise.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，作为一种软件交付改进策略，DevOps 的好处是值得付出努力的。DevOps 改善了软件开发能力，企业中的每个人都在工作方式上受到影响。换句话说，在数字经济中，软件作为独立产品交付价值，能够在物理产品中启用数字增强功能，并支持整个企业价值流过程的改进。
- en: Bluntly, Pramod would suggest organizations should not waste their time attempting
    to implement DevOps tools and toolchains unless they have chief and line of business
    executives, support to fund the initiatives, can allocate sufficient resources,
    and can hold people responsible for achieving identifiable and measurable outcomes
    with timeframes, budgets, and ROIs that justify the efforts.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 直截了当的说，Pramod 会建议组织不应浪费时间尝试实施 DevOps 工具和工具链，除非他们有首席执行官和业务线高管的支持、能够为这些项目提供资金、能够分配足够的资源，并且能够让人们对实现可识别和可衡量的成果负责，包括时间框架、预算和
    ROI，这些成果足以证明努力的价值。
- en: Implementing effective training programs
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实施有效的培训计划
- en: Next, training throughout the enterprise is critical. DevOps' tools and toolchains
    cannot be thrown over the wall with the expectation that the development and operations
    teams can effectively use them. Moreover, the value streams that can benefit from
    DevOps-based software delivery capabilities need to understand what's possible
    and how to engage effectively with the IT organization. This statement is also
    true for business owners who depend on competitive software delivery capabilities
    to achieve the enterprise's strategies, goals, and objectives.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，企业范围内的培训至关重要。DevOps 的工具和工具链不能简单地扔给开发和运维团队，并期望他们能够有效使用它们。此外，能够从基于 DevOps
    的软件交付能力中受益的价值流，需要了解什么是可能的，如何与 IT 组织进行有效的合作。这个说法同样适用于那些依赖竞争性软件交付能力来实现企业战略、目标和任务的业务负责人。
- en: This training can extend beyond the organization's employees to include third-party
    consultants and vendors. For example, most government agencies and large commercial
    enterprises leverage external software development organizations to build applications
    that support the business. If the executives choose to commit to DevOps, then
    their consultants must make similar commitments.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这种培训可以超出组织的员工范围，涵盖第三方顾问和供应商。例如，大多数政府机构和大型商业企业都会借助外部软件开发组织来构建支持业务的应用程序。如果高管决定采用
    DevOps，那么他们的顾问也必须做出类似的承诺。
- en: Finally, stakeholders also need training on DevOps. I personally define the
    term stakeholders so that it includes anyone and everyone who has an opinion that
    matters. Anyone who has managed software delivery projects over any period will
    have experienced situations where external stakeholders affected the outcomes
    of their projects.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，利益相关者也需要接受 DevOps 培训。我个人定义“利益相关者”一词，意味着它包括任何有重要意见的人。任何在一定时间内管理过软件交付项目的人，都会经历外部利益相关者影响项目结果的情况。
- en: Sometimes, it's because those external stakeholders are competing for the budgets
    and resources that have been allocated to your projects. But other times, the
    stakeholders may not see the value of the work the software delivery team is performing,
    and they may feel left out of decision making. While Agile practices help address
    some of those communication and collaboration issues, we can't forget that the
    concerns and needs of our stakeholders are every bit as important once the organization
    moves to DevOps-based software delivery.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，这可能是因为那些外部利益相关者正在争夺已分配给你项目的预算和资源。但有时，利益相关者可能看不到软件交付团队所执行工作的价值，可能觉得自己在决策过程中被排除在外。虽然敏捷实践有助于解决一些沟通和协作问题，但我们不能忘记，一旦组织转向基于
    DevOps 的软件交付，利益相关者的关切和需求同样至关重要。
- en: Going all in
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 全力以赴
- en: In this book, you have learned about the importance of using value stream mapping
    to assess the current state of operations and identify improvement opportunities
    that help achieve a desired future state. So, different from Agile retrospectives
    – which evaluate areas for immediate improvements on a limited scale – VSM initiatives
    tend to take a larger and longer-term view to make sure that the entire value
    stream, as a system, operates with greater efficiencies and less waste.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，你已经了解了使用价值流映射来评估当前运营状态并识别改进机会的重要性，这些改进帮助实现期望的未来状态。因此，与敏捷回顾——其评估的是有限范围内的即时改进领域——不同，VSM倡议通常采取更广泛和长期的视角，以确保整个价值流作为一个系统，能够以更高的效率和更少的浪费运行。
- en: DevOps is very much a Lean-oriented strategy to streamlining software development,
    delivery, and support functions as an integrated, automated, and orchestrated
    value stream. Conceptually, DevOps toolchains operate as a streamlined software
    delivery pipeline.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps非常符合精益策略，旨在简化软件开发、交付和支持功能，作为一个集成的、自动化的、协调的价值流。从概念上讲，DevOps工具链作为一个简化的软件交付管道运行。
- en: VSM offers an approach to evaluating a series of improvement opportunities that
    increases the flow of value across our software delivery pipelines. For reasons
    of financial and resource constraints, we may need to prioritize our investments
    over an extended time. But this does not mean that we can afford to do the assessments
    and implementations in an ad hoc manner. It is a combination of such improvements
    that allows a DevOps pipeline to deliver software value efficiently and rapidly.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: VSM提供了一种评估一系列改进机会的方法，以增加软件交付管道中的价值流动。由于财务和资源的限制，我们可能需要在较长的时间内优先投资。但这并不意味着我们可以以临时的方式进行评估和实施。正是这些改进的结合，使得DevOps管道能够高效且快速地交付软件价值。
- en: Therefore, the executives of an organization must not allow their IT organization
    to go about implementing DevOps tools and toolchains in a piecemeal fashion. Implementing
    DevOps tools and toolchains is a strategic initiative. The organization needs
    to plan and guide their DevOps investments, just as they would any other product
    and portfolio investments driven by OKRs.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，组织的高管不能允许其IT部门以零散的方式实施DevOps工具和工具链。实施DevOps工具和工具链是一个战略性举措。组织需要规划并引导其DevOps投资，就像他们对待任何其他由OKR驱动的产品和投资组合投资一样。
- en: We'll get into the subject of OKRs in more detail in [*Chapter 16*](B17087_16_Final_PD_epub.xhtml#_idTextAnchor491),
    *Transforming Businesses with VSM and DevOps*. But for the time being, know that
    OKRs establish high-level expectations in terms of desired outcomes and measurable
    results. In other words, executives should establish OKRs as guidance for those
    involved in the DevOps implementation, in terms of what the expectations are and
    the metrics that indicate successful outcomes.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[*第16章*](B17087_16_Final_PD_epub.xhtml#_idTextAnchor491)，*通过VSM和DevOps转型业务*中更详细地探讨OKR的主题。但目前，请知道OKR确立了关于期望结果和可衡量结果的高层次期望。换句话说，高管应当设立OKR作为指导，明确DevOps实施中相关人员的期望和衡量成功结果的指标。
- en: Establishing a DevSecOps Center of Excellence (COE)
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 建立DevSecOps卓越中心（COE）
- en: So far, we have discussed the importance of having executive leadership, effective
    training programs, and an end-to-end DevOps implementation strategy. But the organization
    also needs a center of excellence to establish governance policies, ensure the
    construction of reusable toolchain configurations, and provide resources for training,
    mentoring, and coaching.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们讨论了拥有高层领导、有效的培训计划和端到端DevOps实施策略的重要性。但组织还需要一个卓越中心，以建立治理政策，确保可重用工具链配置的建设，并为培训、辅导和指导提供资源。
- en: After overseeing multiple enterprise-scale DevOps implementations, Pramod has
    come to the opinion that organizations need to select one vendor or group of experts
    (COE) to establish the organization's overall DevSecOps and CI/CD platform solutions.
    That's not to say that multiple groups cannot participate in the DevOps platform
    and tool selections and governance policies. Still, it's unwise to have different
    teams or groups working independently. Otherwise, the organization will end up
    with a hodge-podge of tools to license, track, integrate, support, and sustain
    over the life cycle of their DevOps platforms.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在监督多个企业规模的DevOps实施之后，Pramod得出了这样的观点：组织需要选择一个供应商或专家组（COE）来建立组织的整体DevSecOps和CI/CD平台解决方案。这并不是说多个团队不能参与DevOps平台和工具的选择和治理政策。但是，让不同的团队或组独立工作是不明智的。否则，组织将以零散的工具进行许可、跟踪、集成、支持和维护其DevOps平台的生命周期。
- en: The COE should help set up and guide the development of the initial DevSecOps
    platforms as a prototype. When the prototype platform is ready, the COE should
    help guide one or more product teams in their transition to the new platform.
    As the software product teams use the prototype DevSecOps platform, the COE and
    software teams should collaborate to improve and perfect the platform to support
    wider-scale use.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: COE应帮助建立和指导初始的DevSecOps平台原型开发。当原型平台准备就绪时，COE应帮助指导一个或多个产品团队过渡到新平台。当软件产品团队使用原型DevSecOps平台时，COE和软件团队应合作改进和完善平台，以支持更广泛的使用。
- en: A series of rolled deployments will help prove and build out its capabilities
    for wider-scale deployments for larger organizations. The COE must be prepared
    to tweak the platform as necessary to support new needs that are identified with
    each new deployment. This tweaking will include integration, automation, and configurations
    that support additional DevSecOps activities, tools, and toolchains.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一系列的滚动部署将有助于验证和构建其在更大规模组织中广泛部署的能力。 COE必须准备好根据每个新部署识别的新需求进行必要的平台调整。此调整将包括支持额外的DevSecOps活动、工具和工具链的集成、自动化和配置。
- en: Continuous learning and enhancements keep improving the primary platform, taking
    it to the next level. However, suppose you don't get the fundamental platform
    right. In that case, the organization will get off to a bad start, which could
    reduce executive support and thereby reduce opportunities for future investments
    and deployments. In contrast, building the right basic DevSecOps platform allows
    the organization to use VSM to justify further investments. But, more importantly,
    the VSM initiatives guide the expanded use of the improved DevSecOps platform
    to support digitally enabled value stream improvements across the enterprise.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 持续学习和增强不断改进主要平台，将其推向下一个级别。然而，如果你没有正确建立基础平台，组织将起步不良，这可能会减少高管支持，从而减少未来投资和部署的机会。相比之下，构建正确的基本DevSecOps平台允许组织使用VSM来证明进一步的投资。但更重要的是，VSM倡议指导扩展使用改进的DevSecOps平台，以支持跨企业的数字化价值流改进。
- en: 'By having one vendor or a CoE leading the DevSecOps practice and applying VSM
    principles, we avoid every team or every vendor needing to be an expert at DevSecOps
    and VSM practices. Think of it this way: we hire software developers to build
    software products, not build their DevOps-based software factories.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一个供应商或COE领导DevSecOps实践，并应用VSM原则，我们避免每个团队或每个供应商都需要成为DevSecOps和VSM实践的专家。可以这样想：我们聘请软件开发人员来构建软件产品，而不是建立他们的基于DevOps的软件工厂。
- en: In most cases, we would not redirect the employees building products in manufacturing
    firms to build the factories they work in – nor should we expect our software
    developers to create their software factories. Yes, many can learn the skills
    of a DevOps engineer – with enough time and practice. But that time and effort
    take away from their regular jobs to deliver value in the form of new and enhanced
    software products. So, don't do that – it's a non-value-added waste of their time!
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，我们不会让制造企业中建造产品的员工去建造他们工作的工厂 - 也不应该期望我们的软件开发人员创建他们的软件工厂。是的，许多人可以学习成为DevOps工程师的技能
    - 只要有足够的时间和实践。但这些时间和精力会从他们正常工作中交付新的和增强的软件产品的价值中抽取出来。因此，不要这样做 - 这是对他们时间的非增值浪费！
- en: It is appropriate to encourage a very open and collaborative culture of feedback,
    including the COE, software delivery team members, and your related vendors. It
    is those collaborations that raise visibility on issues and contribute to improving
    your DevSecOps platforms.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 鼓励一个非常开放和协作的反馈文化是适当的，包括COE、软件交付团队成员和相关供应商。正是这些协作提高了问题的可见性，并有助于改善DevSecOps平台。
- en: Defining the roles and responsibilities of the COE
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义COE的角色和职责
- en: 'The COE includes your experts on DevSecOps tools and platforms. But it must
    also include or be aligned with the organization''s IT architecture group. The
    responsibilities of your DevSecOps platform COE and IT architecture group include
    the following:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: COE包括DevSecOps工具和平台领域的专家。但它还必须包括或与组织的IT架构团队保持一致。DevSecOps平台COE和IT架构团队的职责包括以下内容：
- en: 'COE''s don''t make anything – they are responsible for governance and policies:'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: COE不制造任何东西——它们负责治理和政策：
- en: a. Establish a list of *dos and don'ts* in the form of DevSecOps governance
    policies.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. 以DevSecOps治理政策的形式建立一份*做与不做*的清单。
- en: Work with executives and portfolio management functions to establish DevSecOps
    platform improvement programs and budgets.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与高层管理人员和投资组合管理部门合作，建立DevSecOps平台改进计划和预算。
- en: 'Evaluate **Software as a Service** (**SaaS**) and DevSecOps vendor offerings:'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 评估**软件即服务**（**SaaS**）和DevSecOps供应商的产品：
- en: a. Single DevOps platforms such as AWS, Azure, GitLab, or HCL Software.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. 单一DevOps平台，如AWS、Azure、GitLab或HCL Software。
- en: B. Multitool platforms such as ConnectALL, Digital.ai, Plutora, ServiceNow,
    or Tasktop.
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: B. 多工具平台，如ConnectALL、Digital.ai、Plutora、ServiceNow或Tasktop。
- en: c. Define the workflow to initiate VSM and DevSecOps tool and platform requests
    and approvals.
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. 定义启动VSM和DevSecOps工具及平台请求与审批的工作流程。
- en: d. Conduct **Analysis of Alternatives** (**AoA**).
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d. 进行**替代方案分析**（**AoA**）。
- en: e. Work with legal, IT, and finance departments to negotiate licenses, terms
    and conditions, and **service-level agreements** (**SLAs**).
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: e. 与法律、IT和财务部门合作，协商许可、条款和条件，以及**服务水平协议**（**SLAs**）。
- en: f Establish and maintain the list of approved DevSecOps tools for use within
    the organization.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: f. 建立并维护组织内已批准使用的DevSecOps工具列表。
- en: 'Guide the work of any related VSM team and VSM initiative requiring software
    deliveries:'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指导任何相关的VSM团队和需要软件交付的VSM项目：
- en: a. Conduct IT Budget Review Boards or support portfolio management functions
    to establish software value stream/product development support priorities.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. 进行IT预算审查委员会或支持投资组合管理职能，确定软件价值流/产品开发支持优先级。
- en: Deciding on the appropriate DevOps platform strategy
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 决定合适的DevOps平台策略
- en: 'In Pramod''s opinion, he believes the best strategy is to go with a **DevSecOps
    as a Service** (**DaaS**) vendor instead of an open source tools strategy. DaaS
    examples include **Azure DevOps Services**, **GitLab**, and **AWS CodeDeploy**.
    He cites several reasons for this view, as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在Pramod看来，他认为最佳策略是选择**DevSecOps即服务**（**DaaS**）供应商，而不是开源工具策略。DaaS的例子包括**Azure
    DevOps Services**、**GitLab**和**AWS CodeDeploy**。他列举了几个支持这一观点的理由，如下所示：
- en: It helps avoid FISMA and FedRamp compliance and approval issues associated with
    obtaining security approvals to use open source tools within federal government
    agencies.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于避免与在联邦政府机构内使用开源工具时需要获得安全批准所涉及的FISMA和FedRamp合规性问题。
- en: The organization does not need to implement, integrate, and maintain disparate
    tools.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织无需实施、集成和维护不同的工具。
- en: The IT organization does not need to write **Infrastructure as Code** (**IaC**)
    configurations.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IT组织无需编写**基础设施即代码**（**IaC**）配置。
- en: For example, developing custom DevSecOps platforms requires hiring experts in
    IaC tools such as Ansible, Terraform, and others.
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，开发定制的DevSecOps平台需要聘请IaC工具（如Ansible、Terraform等）领域的专家。
- en: He's become a fan of Azure Kubernetes Service.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他已经成为Azure Kubernetes Service的忠实粉丝。
- en: Organizations don't need to install Kubernetes, maintain Kubernetes, and deal
    with the complexity of Kubernetes.
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 组织无需安装Kubernetes、维护Kubernetes，也无需处理Kubernetes的复杂性。
- en: Pramod believes most organizations can do quite well with DaaS-based solutions.
    However, larger digital and high-tech organizations such as Netflix, Amazon, Google,
    Walmart, and perhaps very large federal agencies have exceptional needs for performance
    and large volume software deliveries that justify building custom DevSecOps and
    CI/CD pipelines.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Pramod认为，大多数组织可以很好地使用基于DaaS的解决方案。然而，像Netflix、Amazon、Google、Walmart以及一些非常大的联邦机构这样的数字和高科技组织，对性能和大规模软件交付有着特殊的需求，这使得构建定制的DevSecOps和CI/CD管道成为必要。
- en: But Pramod also recognizes that some IT folks feel they have better control
    over the operations when they can incorporate specific tools instead of a service.
    And, let's face it, DevSecOps tool selections are emotional issues for many developers
    who have developed their skills and competencies around a specific set of tools.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 但Pramod也意识到，一些IT人员认为，当他们能够集成特定的工具而不是服务时，他们对运营的控制会更好。而且，坦率来说，对于许多开发人员来说，DevSecOps工具的选择是情感化的问题，因为他们的技能和能力是围绕一组特定的工具培养出来的。
- en: Interview with Yaniv Sayers
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与Yaniv Sayers的访谈
- en: Yaniv Sayers is a Fellow and CTO in Micro Focus responsible for its Application
    Delivery Management and Software Factory program. With over 20 years in the IT
    and SW industry, Yaniv has experienced and led various transformations. He and
    I met virtually and discussed our experiences on DevOps and VSM. He contributes
    to this section in an interview I conducted with him. We started with a discussion
    of major pitfalls in DevOps implementations', such as ignoring the organization's
    DNA and challenges around Big Data and applying the Software Factory approach
    to overcome the pitfalls.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Yaniv Sayers是Micro Focus的研究员和CTO，负责其应用交付管理和软件工厂项目。Yaniv在IT和软件行业已有超过20年的经验，经历并领导过多次转型。他和我通过虚拟方式会面，并讨论了我们在DevOps和VSM方面的经验。在我对他的访谈中，他为本节贡献了内容。我们从讨论DevOps实施中的主要陷阱开始，例如忽视组织DNA、面临大数据的挑战，并探讨如何通过应用软件工厂方法克服这些陷阱。
- en: Acknowledging your Organization's DNA
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 认识到你组织的DNA
- en: Yaniv stresses that ignoring an organization's DNA is a common mistake that
    many organizations make. In the digital era, organizations that want to remain
    relevant look at how leading high-tech companies such as Facebook, Google, Amazon,
    Spotify, and Netflix leveraged DevOps to move at the speed of a bullet.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Yaniv强调，忽视一个组织的DNA是许多组织常犯的一个错误。在数字时代，想要保持相关性的组织会关注如何像Facebook、Google、Amazon、Spotify和Netflix这样的领先高科技公司，利用DevOps以子弹般的速度前进。
- en: These success cases inspire executives and other critical stakeholders. They
    may feel pressure to become more like these other organizations and think they
    can find similar success by implementing the practices and tools used by these
    other organizations.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这些成功案例激励了高管和其他关键利益相关者。他们可能会感受到压力，想要变得更像这些其他组织，并认为通过实施这些组织使用的实践和工具，他们也能获得类似的成功。
- en: However, these popular references to DevOps transformations apply mainly to
    organizations born in the digital era. Their people are digital natives, their
    processes are agile from the get-go, and their technologies are cloud-native.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，关于DevOps转型的这些流行案例，主要适用于数字时代诞生的组织。它们的员工是数字原住民，流程从一开始就很敏捷，技术也是云原生的。
- en: That is very different from IT organizations in financial services, pharmaceuticals,
    or government. Many enterprises still use traditional software development methodologies,
    such as Waterfall or Water-Scrum-Fall processes. They include a broad range of
    technologies that range from mainframe to client/server to cloud, plus they have
    people who learned their skills in a previous era. Many are not yet comfortable
    operating or competing in our modern digital economy.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这与金融服务、制药或政府部门的IT组织有很大的不同。许多企业仍然使用传统的软件开发方法论，如瀑布式或Water-Scrum-Fall流程。它们包含了从主机、大型客户端/服务器到云的一系列技术，而且他们的员工很多是在之前的时代培养的。许多人尚未能够适应或在我们的现代数字经济中竞争。
- en: For the traditional enterprise, the challenge and even the meaning of running
    "faster" can differ from the digital native experience. These organizations have
    a different DNA, and Yaniv believes that fact must be acknowledged. They can be
    inspired by what digital native organizations have achieved and how they operate,
    yet they cannot simply follow the digital native implementation, and they cannot
    ignore their past and current environment. Instead, they need to continue running
    their current environment while setting a transformation plan that fits their
    DNA.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 对于传统企业而言，"更快"的挑战甚至其含义可能与数字原生企业的体验有所不同。这些组织有不同的DNA，Yaniv认为这一点必须得到承认。他们可以从数字原生企业取得的成就和运营方式中汲取灵感，但不能简单地照搬数字原生企业的实施方式，也不能忽视他们的过去和当前环境。相反，他们需要在继续运营当前环境的同时，制定适合其DNA的转型计划。
- en: Becoming outcome Oriented
  id: totrans-158
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 以成果为导向
- en: Most organizations take a technology-centric approach. They start with the tools
    and equipment and work out to the users or consumers – yet most fail to achieve
    the desired outcome. For example, just implementing an agile planning tool does
    not make a project agile. The project may still operate with long delivery cycles,
    no fast feedback, or people finding it difficult to transition to an Agile mindset.
    It was Grady Booch who famously said, "*A fool with a tool is still a fool.*"
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数组织采取以技术为中心的方法。他们从工具和设备入手，向外扩展到用户或消费者——然而，大多数未能实现预期的成果。例如，仅仅实施一个敏捷规划工具并不能让一个项目变得敏捷。项目仍然可能运行于长周期交付、没有快速反馈或团队成员发现很难转变为敏捷思维的状态。正如Grady
    Booch著名地说过，"*有工具的傻瓜仍然是傻瓜*。"
- en: Instead, it would be best to start by taking an outside-in view and working
    with the customers and consumers to align on the outcomes that matter to them
    and the value streams that empower these outcomes. Then, based on the desired
    outcomes, you can identify and determine the people, process, and technology changes
    required. For example, it may require you to train your people on new ways of
    working, defining new roles and responsibilities, enhancing existing processes,
    and implementing new tools – all of which need to occur in concert as a collaborative
    effort to achieve the expected outcomes.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，最好从外向内的视角开始，与客户和消费者合作，达成对他们来说重要的成果和推动这些成果的价值流的一致意见。然后，基于期望的成果，你可以识别并确定所需的人员、流程和技术变革。例如，可能需要你为员工培训新的工作方式、定义新的角色和职责、改进现有流程，并实施新工具——所有这些都需要作为协作努力同步进行，以实现预期成果。
- en: Discovering the Art of Balance
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 掌握平衡的艺术
- en: Speed, quality, cost, and happiness do not compete; they don't operate in a
    silo, nor should they be considered as tradeoffs - they are intertwined. For example,
    suppose you focus on speed and neglect quality. In that case, low quality ultimately
    leads to the user and employee dissatisfaction. Low quality also increases rework,
    which leads to higher costs and increased technical debt, which collectively leads
    to slower delivery.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 速度、质量、成本和幸福感并不是相互竞争的，它们并非各自为政，也不应被视为权衡关系——它们是相互交织的。例如，假设你只关注速度而忽视质量，那么低质量最终会导致用户和员工的不满。低质量还会增加返工，进而导致更高的成本和技术债务，这些共同作用会导致交付速度变慢。
- en: On the other hand, higher-quality reduces failures and the need for rework.
    Thus, improving quality reduces costs, increases delivery speed, and promotes
    happiness [employee, customer, and end-user].
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，更高的质量能够减少失败和返工的需求。因此，提高质量不仅能降低成本，还能加快交付速度，并促进幸福感（员工、客户和最终用户）。
- en: Stakeholders should be aware that perceived short-term tradeoffs eventually
    lead to the reverse outcome for the long term. Instead, be conscious that tradeoffs
    are interdependent and intertwined. In this context, IT organizations need to
    balance speed, quality, cost, and happiness continuously.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 利益相关者应该意识到，短期内感知到的权衡最终会导致长期的反向结果。相反，应当意识到这些权衡是相互依存且相互交织的。在这种背景下，IT组织需要持续平衡速度、质量、成本和幸福感。
- en: Making better decisions through Big-Data
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过大数据做出更好的决策
- en: Yaniv often encounters stakeholders making key decisions based on gut feel and
    guestimates, which end in sub-optimal outcomes for the lucky ones and big failures
    for others—for example, prioritizing investments based on their belief of what
    users and customers may need without obtaining customer input and feedback, deciding
    whether to move a release into production without a clear understanding of the
    release quality and security risks, changing interfaces and data models without
    realizing the impact on other services.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Yaniv 经常遇到利益相关者根据直觉和猜测做出关键决策，结果导致一些人幸运地获得次优成果，而另一些人则遭遇重大失败——例如，在没有获得客户反馈的情况下，根据他们对用户和客户需求的猜测来优先考虑投资，在没有明确了解发布质量和安全风险的情况下决定是否将发布推向生产环境，或者在未意识到对其他服务影响的情况下更改接口和数据模型。
- en: When decision-makers lack access to required data, this is typically due to
    a set of reasons, such as organizational and political barriers that prohibit
    data sharing, a variety of "languages" within the different domains that make
    it challenging to have a shared context, lack of integration between systems that
    equates to no access and no traceability between data points.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当决策者无法访问所需数据时，通常是由于一系列原因，如组织和政治壁垒阻止了数据共享，不同领域之间的“语言”差异使得共享上下文变得困难，系统之间缺乏集成导致无法访问和无法追溯数据点之间的关系。
- en: With DevOps, the data challenge becomes even more extreme. There are higher
    continuous delivery cycles and shift to automation, the amount of data increases
    by levels of magnitude, and decision-makers need to make conscious decisions faster
    and continuously. In practice, it becomes a big data challenge.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DevOps 中，数据挑战变得更加严峻。随着持续交付周期的增加和自动化的转变，数据量呈指数级增长，决策者需要做出更加迅速且持续的意识决策。在实践中，这就变成了一个大数据挑战。
- en: Organizations that want to be successful with DevOps at scale must address the
    big data challenge, and access to data traceable by decision-makers is the first
    step. In addition, having the objective to enable value-driven deliveries, conscious
    and continuous decision making, analytics, and machine learning should transform
    big data into actionable insights.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 想要在大规模 DevOps 中取得成功的组织，必须解决大数据挑战，而让决策者能够追溯数据访问是第一步。此外，旨在实现价值驱动交付、意识清晰和持续决策、分析和机器学习的目标，应该将大数据转化为可操作的洞察力。
- en: Taking a Software Factory Approach
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 采用软件工厂模式
- en: Yaniv states that Enterprise organizations that need to transform by implementing
    DevOps should consider taking a software factory approach. A Software Factory
    aligns the organization's strategic planning with an integrated set of services,
    processes, tools, and data that enables the organization to plan, build, test,
    release, and operate and manage the software delivered to their customers.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Yaniv 表示，企业组织在实施 DevOps 转型时，应考虑采取软件工厂模式。软件工厂将组织的战略规划与一整套集成的服务、流程、工具和数据对齐，使组织能够规划、构建、测试、发布、运营和管理交付给客户的软件。
- en: Start by creating a baseline taking an outside-in view and working with stakeholders
    to align on the outcomes and value streams that empower these outcomes. Then,
    map the main activities, roles, systems, and data and their interaction.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 首先通过外部视角创建基准，并与利益相关者合作，统一对能够赋能这些成果的结果和价值流的理解。然后，绘制主要活动、角色、系统和数据及其相互作用的图谱。
- en: Yaniv also notes that you can also leverage frameworks such as IT4IT that provide
    references for common value streams. For example, in IT, DevOps-oriented value
    streams include activities spanning the receipt of a requirement through its delivery
    to the user or a user experiencing a problem until resolution or paying down technical
    debt.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Yaniv 还指出，可以利用像 IT4IT 这样的框架，提供常见价值流的参考。例如，在 IT 中，面向 DevOps 的价值流包括从接收需求到交付给用户，或者用户遇到问题直至解决或偿还技术债务的活动。
- en: Next, analyze issues, such as missing information for stakeholder decision-making,
    duplicate systems, error-prone manual activities, wasted time. For each, map possible
    improvement areas such as consolidating to a standard agile planning service to
    enable dependency management and transparency, an integration service to provide
    data visibility, a performance testing service to enable shift left, and earlier
    problem detection.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，分析问题，例如缺乏供利益相关者决策的信息、重复的系统、容易出错的手工操作、浪费的时间。针对每个问题，映射可能的改进领域，例如合并到标准的敏捷规划服务中以实现依赖关系管理和透明度、集成服务提供数据可视性、性能测试服务以支持左移和更早的故障检测。
- en: After mapping the values streams and analyzing the issues, you have a common
    language and understanding of outcomes that matter, current problems, and opportunities
    – in other words, the valuable services. Then, aim for shared services wherever
    possible and differentiated when required due to a business need.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在绘制价值流并分析问题后，你将拥有一个共同的语言和对重要结果、当前问题和机会的理解——换句话说，就是有价值的服务。然后，尽可能地采用共享服务，并在业务需求的情况下进行差异化。
- en: So what is the mechanics to deliver a service? Yaniv notes they are precisely
    the same as those you use to deliver digital products - by taking an agile-based
    development approach with continuous improvement.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，交付一个服务的机制是什么呢？Yaniv指出，它们与交付数字产品的方式完全相同——通过采用基于敏捷的方法和持续改进。
- en: 'Yaniv states that IT organizations should take an iterative, continuous improvement
    approach for the service delivery, start small, and evolve as they go. He briefly
    describes the lifecycle to make this practical:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: Yaniv表示，IT组织应该采用迭代的、持续改进的方式来交付服务，从小处着手，并随着进展不断演变。他简要描述了使这一过程实践化的生命周期：
- en: '**Select your critical value streams**: After analyzing the value streams,
    identify 2-3 services to improve. A value stream can be a knowledge base service,
    a quality management service, a security testing service, or any other critical
    IT service.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择你的关键价值流**：在分析价值流后，识别出需要改进的2-3项服务。一个价值流可以是知识库服务、质量管理服务、安全测试服务或任何其他关键IT服务。'
- en: '**Create a Minimal Viable Product (MVP)**: The purpose of the MVP is to validate
    the value of the service and reduce unknowns and incubate it with a few consuming
    teams to get quick feedback. Then, learn and improve the service based on the
    feedback in short cycles.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建最小可行产品（MVP）**：MVP的目的是验证服务的价值，减少未知因素，并通过少数几个消费团队进行孵化，以便快速获得反馈。然后，根据反馈在短周期内学习和改进服务。'
- en: '**Create a standard model**: The model serves as a blueprint that depicts the
    technology, people (roles and responsibilities), and the process needed to create
    a standard service system. Then instantiate the technology and the automation
    around it to ensure you can make it consumable, fulfillable and operational at
    a good enough level.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建标准模型**：该模型作为蓝图，描绘了创建标准服务系统所需的技术、人员（角色和责任）和流程。然后，围绕技术和自动化进行实例化，确保你能够使其可用、可完成并在足够好的水平上运行。'
- en: '**Go live**: Make your improved services globally available by publishing them
    to your consumers and placing the required infrastructures to scale them to meet
    demands. Then, measure and monitor your critical performance metrics and optimize
    accordingly. Finally, harvest learnings for the next iteration.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上线**：通过将改进后的服务发布给用户并部署所需的基础设施来使其在全球范围内可用，以便按需扩展。然后，测量和监控关键性能指标并进行优化。最后，积累经验教训，为下一个迭代做准备。'
- en: '**Rinse and repeat**: After completing your first improvement cycle, identify
    the next 2-3 services and cycle through this iterative, continuous improvement
    process again and again. Each cycle improves people, processes, and technology.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反复循环**：完成第一次改进循环后，识别下一个2-3个服务，并再次通过这个迭代的持续改进过程进行循环。每个循环都会改善人员、流程和技术。'
- en: For enterprise organizations that need to transform by implementing DevOps,
    the Software Factory approach helps set a transformation plan to fit their DNA
    by starting small without over-engineering and allowing continuous improvement.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 对于需要通过实施DevOps进行转型的企业组织，软件工厂方法有助于制定适合其企业DNA的转型计划，从小处着手，避免过度工程化，并允许持续改进。
- en: 'You can learn more about the Software Factory Approach recommended by Micro
    Focus at the following link: https://www.microfocus.com/en-us/digital-transformation/our-perspective/software-factory.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下链接了解Micro Focus推荐的软件工厂方法：https://www.microfocus.com/en-us/digital-transformation/our-perspective/software-factory。
- en: Interview with Allan Wagner
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与Allan Wagner的采访
- en: '**Allan "Al" Wagner** is the Transformation Advisor/DevOps enthusiast within
    HCL Software''s DevOps Advisory and Adoption group. He and I met virtually on
    several occasions and found an immediate affinity in our views on VSM and DevOps.
    He was kind to contribute to this section in an interview I conducted with him.
    We started by discussing the major pitfalls in DevOps implementations, which center
    on spending money in IT without seeing a return in quantifiable business value.
    Let''s see what he has to say.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**Allan "Al" Wagner**是HCL Software DevOps咨询和采用团队的转型顾问/DevOps爱好者。我和他在虚拟平台上见过几次面，并且在VSM和DevOps方面的看法产生了共鸣。他很友好地参与了我对他的采访，为本节内容提供了帮助。我们从讨论DevOps实施中的主要陷阱开始，重点是花钱在IT上却没有看到量化的商业价值回报。让我们看看他怎么说。'
- en: Spending money without verifiable results
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 花钱却没有可验证的结果
- en: When I asked Al what he viewed as pitfalls to DevOps implementations, he immediately
    came up with a specific and common use case. Specifically, as HCL's VSM and DevOps
    evangelist, he often hears their prospective clients note how their IT managers
    and executives are tired of spending money on IT, without showing value across
    the rest of the organization.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 当我问Al他认为DevOps实施中的陷阱时，他立刻想到了一个具体而常见的用例。具体来说，作为HCL的VSM和DevOps布道者，他经常听到潜在客户提到他们的IT经理和高管厌倦了花钱在IT上，却没有在整个组织中展现出价值。
- en: I submit that the issue is one I've addressed several times in this book. Without
    proper alignment, organizations can spend a lot of money, resources, and time
    implementing mature software delivery pipelines. Moreover, as Pramod noted in
    his interview, DevOps is not easy to learn and not easy to implement. Left to
    their own devices, many, if not most, software development teams, lack the support,
    funding, or even the skills to integrate, automate, and orchestrate software development
    pipelines.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这个问题是我在本书中多次提到的。没有适当的对齐，组织可能会花费大量的资金、资源和时间来实施成熟的软件交付流水线。此外，正如Pramod在他的采访中所指出的，DevOps既不容易学习，也不容易实施。如果任凭其发展，许多（如果不是大多数的话）软件开发团队缺乏集成、自动化和编排软件开发流水线的支持、资金，甚至技能。
- en: Frankly, such work is not even their responsibility. Software developers produce
    value by delivering software products, not building software delivery platforms
    and pipelines.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 坦率地说，这种工作甚至不是他们的责任。软件开发人员通过交付软件产品创造价值，而不是构建软件交付平台和流水线。
- en: Failing safely
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安全地失败
- en: Al noted that a major pitfall of implementing DevOps capabilities is that significant
    cultural and organizational change is required. He advocates that organizations
    should make incremental changes so that they can fail safely. IT organizations,
    and those that depend on their services, must understand that not everything will
    work out as planned. But to improve our chances for success, we should also spend
    some time and effort planning!
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Al指出，实施DevOps能力的一个主要陷阱是需要进行重大文化和组织变革。他提倡组织应逐步进行变革，以便能够安全地失败。IT组织及其依赖的服务必须理解，并不是所有事情都会按计划进行。但是，为了提高成功的几率，我们也应该花些时间和精力进行规划！
- en: Managing through mandates
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过命令进行管理
- en: Al and I spoke about how DevOps programs often come down as mandates. The problems
    with such mandates are multifold. First, executive-level expectations may be out
    of line with reality. As a result, there is too often no pre-planning and inadequate
    funding for tools, platforms, and training. It's hard to properly identify budgets
    if there is no planning to determine the needs and requirements of the organization.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: Al和我讨论了DevOps项目通常是如何作为命令下达的。这样的命令存在多方面的问题。首先，高层的预期可能与现实不符。结果，往往没有进行事前规划，也没有足够的资金来购买工具、平台和培训。如果没有规划来确定组织的需求和要求，就很难正确识别预算。
- en: Also, without planning and building prototype DevSecOps platforms, we leave
    the work to every software development team to figure out – regardless of whether
    they have the time and skills to work on the issues. In the meantime, their software
    delivery work suffers.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果没有规划和构建原型DevSecOps平台，我们就把工作留给每个软件开发团队去解决——不管他们是否有时间和技能来处理这些问题。与此同时，他们的软件交付工作会受到影响。
- en: And, even if the software development teams get past the platform development
    issues, there is likely no budget available to execute the implementations – certainly
    not on a large enterprise scale. The desired tools may not even be approved for
    use within the organization, affecting all security and risk-conscious organizations
    where compliance and governance are critical issues. Unplanned costs are also
    a factor. A mandate without an execution plan, a forecast budget, and the means
    to connect investments to value deliveries are useless. Everyone involved is set
    up to fail, which leads to frustration, more work, missed expectations, and, ultimately,
    mistrust.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: 'In my previous book, *Scaling Scrum Across Modern Enterprises*, I told the
    story about my track coach, Al Cantello, at the US Naval Academy. Every day for
    4 years, I heard him make the same statement over and over again: "*All you young
    whippersnappers! All you want is instant gratification!*" His point was that nothing
    worthwhile comes easily or quickly. As a two-time all-American javelin student-athlete
    and a former Olympian – who once held every national and international record
    in the javelin – he had every right to call us out when we needed to refocus our
    efforts.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: My point in relating this story is that the same instructions apply to business.
    We need to understand our objectives, define and set measurable goals, plan how
    we will achieve our goals, and then work hard every day to achieve them. Mandates
    are useless without planning, prototyping (experimentation), budgets, and resources
    linked to specific objectives and key results. Moreover, the OKRs come first to
    guide our plans, experiments, budgets, allocation of resources, and work.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Getting it wrong
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here is the common scenario that Al Wagner cites. Over the years, organizations
    have been building out and funding full year or multiyear software development
    plans, only to be disappointed when the development team fails to deliver under
    the constraints of the project. At the start of the fiscal year, engineering teams
    may submit a budget estimate for each quarter or perhaps their full-year development
    plan. Through negotiation, an amount of funding would be approved by the business.
    But an even worse scenario is when the executives and managers dictate schedule,
    budget, and resources constraints solely on ROI considerations not informed by
    the realities of the work.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: Still, engineering departments may gladly accept the constraints and work to
    develop the requested new feature or functionality, perhaps delivering updates
    once a quarter – or perhaps once over the annualized project budget. Eventually,
    stakeholders would have an opportunity to review and check out what engineering
    had built, only to realize that they didn't get what they wanted. Or, the demands
    of the business changed, and these changes were not communicated to development.
    Regardless of the outcome, the situation was always the same – a lack of business
    value and return on investment.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，工程部门可能会欣然接受这些限制，并努力开发所请求的新特性或功能，可能每季度交付一次更新，或者每年根据项目预算交付一次更新。最终，利益相关者将有机会审查并检查工程部门构建的内容，但他们会发现自己并没有得到想要的结果。或者，业务需求发生了变化，但这些变化没有传达给开发部门。无论结果如何，情况总是一样——缺乏业务价值和投资回报。
- en: Agile practices emerged to align development efforts to support the evolving
    needs and priorities of the business and its customers. Specifically, Agile addressed
    the problems associated with the traditional project-based development model.
    Later, CI/CD and DevOps pipeline strategies evolved to deliver software products
    more rapidly and efficiently.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷实践的出现旨在使开发工作与业务及其客户不断变化的需求和优先事项保持一致。具体而言，敏捷解决了与传统项目驱动的开发模型相关的问题。随后，CI/CD和DevOps流水线策略逐步发展，旨在更迅速高效地交付软件产品。
- en: Agile development corrected the project-based software delivery model by having
    teams deliver earlier and continuously, embrace change, and deliver more frequently
    with closer alignment to the business. And to this day, those things still matter.
    What has changed or improved is an increased focus on delivering business value,
    with teams working to become more efficient and basing decisions on data, from
    ideation to implementation and beyond. This is the promise of CI/CD and DevOps-based
    software delivery pipelines.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷开发通过让团队更早交付、持续交付、拥抱变化以及与业务更加紧密地对接，修正了基于项目的软件交付模型。直到今天，这些因素仍然至关重要。改变和改进的是，更多的焦点放在交付业务价值上，团队致力于提高效率，并且通过数据做出决策，从创意到实施，乃至更远的地方。这就是基于CI/CD和DevOps的软件交付流水线所承诺的。
- en: Early on, as organizations began their DevOps journey, they may have empowered
    individual software development teams to select automated solutions to build and
    deploy their individual delivery pipelines. And while the individual teams probably
    loved the autonomy – it's an Agile thing – this approach created a bit of a mess,
    for all the reasons noted previously.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期，当组织开始进行DevOps之旅时，他们可能赋予了单独的软件开发团队选择自动化解决方案来构建和部署其各自交付流水线的权限。尽管单个团队可能喜欢这种自主性——这也是敏捷的精神——但这种做法创造了一些混乱，原因如前所述。
- en: But there's another problem also at work. It is challenging for business leaders
    to make business decisions based on data when the engineering and product data
    resides in several different repositories and different formats.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 但还有另一个问题也在发挥作用。当工程和产品数据存储在多个不同的仓库中并采用不同格式时，商业领导者在基于数据做出业务决策时面临着挑战。
- en: Al notes that it is probably unrealistic to mandate that each product or project
    team use the same toolset across their delivery pipelines, since there are many
    factors that will determine the best tool or solution for the job. And, as noted
    previously in this chapter, we can't discount the impact that software developers
    and operations staff have on promoting their preferred methods and tools.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: Al指出，强制要求每个产品或项目团队在交付流水线中使用相同的工具集可能不切实际，因为有许多因素会决定哪种工具或解决方案最适合完成任务。如本章之前所述，我们不能忽视软件开发人员和运维人员在推动他们偏好的方法和工具方面的影响。
- en: But organizations may be able to find a compromise by allowing teams to choose
    the best solution for the task at hand – provided there is integration with a
    solution (or solutions) that provides a holistic view or dashboard. This is what
    modern VSM with DevOps platforms offer – integrating tools across DevOps toolchains
    with a common and normalized data model, thus providing end-to-end and real-time
    visibility of software delivery pipeline flows.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 但组织可能能够通过允许团队选择最适合当前任务的解决方案来找到折衷办法——前提是这些解决方案能与提供整体视图或仪表板的方案（或多个方案）进行集成。这就是现代VSM与DevOps平台所提供的功能——通过在DevOps工具链中集成工具并采用统一的标准化数据模型，从而提供端到端、实时的软件交付流水线流程可视化。
- en: Finding your sources of truth
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 寻找你的真相来源
- en: 'Whether an organization chooses to construct its own dashboard or purchase
    a COTS-based VSM solution, there are several **sources of truth** that we need
    to access when hosting the data needed to populate a dashboard and make accurate
    business decisions. Al lists these *sources of truth* as follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 无论一个组织是选择构建自己的仪表板，还是购买基于 COTS 的 VSM 解决方案，我们在托管用于填充仪表板并做出准确业务决策所需的数据时，需要访问几个**事实来源**。Al
    列出了这些*事实来源*如下：
- en: '**Enterprise planning**: A shared enterprise planning tool that provides a
    view of all development activity across the organization.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**企业规划**：一个共享的企业规划工具，提供组织内所有开发活动的视图。'
- en: '**Version control**: This implements a single version control system across
    the organization for storing all assets used in developing, building, testing,
    and deploying software.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本控制**：在组织内实现一个单一的版本控制系统，用于存储所有开发、构建、测试和部署软件时使用的资源。'
- en: '**Artifact repository**: A single location for all deployable artifacts.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**制品库**：所有可部署制品的单一位置。'
- en: '**Release orchestration**: A single source of data that orchestrates the automated
    deployment of software releases. It also offers an inventory view of the released
    versions and locations of deployed software.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布协调**：一个单一的数据来源，用于协调软件发布的自动化部署。它还提供了已发布版本的清单视图和已部署软件的位置。'
- en: '**Quality management**: A single source of data that provides details on the
    level of quality. Moreover, this capability supports traceability to link requirements
    to test cases, the executed tests, and the related test results.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**质量管理**：一个单一的数据来源，提供质量水平的详细信息。此外，这项功能支持可追溯性，将需求与测试用例、执行的测试以及相关的测试结果关联起来。'
- en: '**Event management**: A single repository to holistically manage and coordinate
    the resolution of incidents across the enterprise.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件管理**：一个单一的仓库，用于全面管理和协调企业内部事件的解决方案。'
- en: Al notes that this approach to integrating disparate sources of truth still
    provides individual software delivery teams with flexibility around tool choice.
    But this strategy only works when there is an integration platform to link the
    shared data repositories that business leaders depend on to make informed business
    decisions.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Al 提到，这种整合不同事实来源的方法，仍然为各个软件交付团队提供了关于工具选择的灵活性。但这一策略只有在有集成平台来链接业务领导依赖的共享数据仓库，以便做出明智的业务决策时才有效。
- en: Creating an acceptance strategy
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 制定接受策略
- en: These issues of lack of trust did not emerge overnight – they have been long
    in the making. We can't trivialize or shorten the process of breaking down the
    organizational barriers that formed over time. Moreover, organizations managed
    software product deliveries for too long as projects were constrained by uninformed
    budgets, schedules, and resources. This, too, sets up the IT department for failure.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这些缺乏信任的问题并不是一夜之间出现的——它们已经积累了很长时间。我们不能把打破随着时间推移形成的组织障碍的过程简化或缩短。而且，组织管理软件产品交付的时间也过长，因为项目通常受限于信息不足的预算、时间表和资源。这同样让
    IT 部门面临失败的风险。
- en: Lean production processes that create continuous and predictable flows offer
    the best way to improve our way of delivering software value. But Lean also dramatically
    changes the way we work. It changes how we make decisions and measure progress.
    It also changes our tools and requires skills.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 提供持续和可预测流的精益生产过程是改善我们交付软件价值方式的最佳途径。但精益方法也会极大地改变我们的工作方式。它改变了我们如何做出决策和衡量进展。它还改变了我们的工具并要求新的技能。
- en: 'As Pramod noted in the previous section, we need our executive leaders to provide
    the resources that will help guide the organization through these changes. For
    example, the organization''s leaders must find the resources and budgets to install
    the following:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 正如 Pramod 在前一部分所指出的，我们需要我们的高层领导提供资源，帮助引导组织度过这些变革。例如，组织的领导必须找到资源和预算，以便安装以下内容：
- en: COE
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: COE
- en: Coaches and mentors
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 教练和导师
- en: Thought leaders
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 思想领袖
- en: Change advocates and innovators
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变革倡导者与创新者
- en: Prototype engagements
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原型合作
- en: VSM and DevOps toolchain procurements
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VSM 和 DevOps 工具链采购
- en: Without these resources and a determined effort, any enterprise-scale VSM and
    DevOps platform implementation exercise is doomed to fail. And, as Al puts it,
    "*When bad things happen to good people, they will go back to what they know.*"
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 没有这些资源和坚定的努力，任何企业级的 VSM 和 DevOps 平台实施都注定会失败。而正如 Al 所说，"*当好人遭遇不幸时，他们会回到他们熟悉的方式。*"
- en: Moving forward
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向前推进
- en: 'Al presents some common-sense steps for moving forward to a more desirable
    future state that''s possible through VSM and DevOps methods and tools, as shown
    in the following list:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: Al 提出了几个常识性步骤，帮助我们迈向一个更理想的未来状态，这个状态可以通过VSM和DevOps方法及工具实现，具体见下列清单：
- en: Build time into weekly schedules for learning.
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每周的时间表中安排学习时间。
- en: Crawl/walk/run to make incremental steps toward success.
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 爬行/行走/奔跑，逐步迈向成功。
- en: 'Al states: "*You may have to slow down to go faster*." For example, you must
    allocate time, effort, and resources to address issues associated with technical
    debt.'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Al 表示：“*你可能需要放慢速度才能走得更快*。”例如，你必须分配时间、精力和资源来解决与技术债务相关的问题。
- en: Don't start a VSM or DevOps platform implementation initiative without executive
    support.
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要在没有高层支持的情况下启动VSM或DevOps平台实施计划。
- en: 'Disconnect from project and program management-based release schedules:'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与项目和程序管理驱动的发布计划脱钩：
- en: a. PM-based schedules are driven by monetary and ROI considerations that are
    disconnected from the day-to-day realities of supporting evolving market changes,
    customer needs, and customer priorities.
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. 基于PM的时间表由货币和ROI考虑驱动，这与支持不断变化的市场变化、客户需求和客户优先事项的日常现实脱节。
- en: b. The PMO cannot be expected to understand the dev teams' capacities and constraints.
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. 不应指望PMO理解开发团队的能力和约束。
- en: 'c. The team lead needs to be involved in advance while developing the schedule
    and negotiate with product management on how they should proceed; for example:'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. 团队负责人需要在制定时间表时提前参与，并与产品管理协商他们应该如何推进；例如：
- en: A. Do we need more people?
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: A. 我们需要更多的人吗？
- en: B. Is everything a priority?
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: B. 每件事都需要成为优先事项吗？
- en: C. What WIP limits should we establish in our pipelines?
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: C. 我们在管道中应该设定哪些WIP（工作进行中的任务）限制？
- en: D. Evaluate throughput as a flow to establish burndown rates.
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: D. 评估吞吐量作为流动来建立燃尽率。
- en: E. Establish mechanisms to collaborate better within the team and with our internal
    or external customers.
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: E. 建立机制，更好地在团队内以及与内部或外部客户之间进行协作。
- en: This list provides a starting point for moving forward to a successful VSM and
    DevOps tools implementation. But none of this matters if we don't also recognize
    that the investments must drive value.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这个清单为成功实施VSM和DevOps工具提供了一个起点。但如果我们没有认识到这些投资必须创造价值，那么这些都没有意义。
- en: Adding value
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 增加价值
- en: A basic reality in business is that there are almost always more things to work
    on than the organization has the time, money, and resources to take on. So, fundamentally,
    what's more important is to understand our priorities in terms of deciding what
    adds the most value in terms of our customers and the organization's OKRs. So,
    focus on what delivers the most value for the investments, and then use flow to
    deliver the value incrementally.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在商业中一个基本的现实是，几乎总有比组织能投入时间、金钱和资源处理的事务更多。因此，最根本的更重要的是理解我们的优先事项，决定哪些东西能为我们的客户和组织的OKRs带来最大的价值。所以，专注于那些能为投资带来最大价值的事项，然后通过流动逐步交付这些价值。
- en: 'Al puts it this way: "*Focus on products and continuously delivering incremental
    change that delivers value to the business*." He also notes that "*Happier people
    are delivering higher quality software more frequently to the end user*." Al also
    stated that happier working environments eliminate retention issues as people
    tend to prefer to work in highly productive development organizations.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: Al 这样说：“*专注于产品，并不断交付能为业务创造价值的增量变化*。”他还指出：“*更快乐的人能更频繁地向最终用户交付更高质量的软件*。”Al 还表示，更愉快的工作环境能够消除员工流失问题，因为人们更愿意在高效的开发组织中工作。
- en: We'll come back to the topic of adding value in [*Chapter 16*](B17087_16_Final_PD_epub.xhtml#_idTextAnchor491),
    *Transforming Businesses with VSM and DevOps*. In fact, using VSM to drive software
    delivery value across all organizational value streams is the central theme of
    this book. For now, let's move on and look at four potential DevOps platform implementation
    strategies.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[*第16章*](B17087_16_Final_PD_epub.xhtml#_idTextAnchor491)中回到增加价值的话题，*用VSM和DevOps转型企业*。事实上，使用VSM推动整个组织价值流中的软件交付价值是本书的核心主题。现在，让我们继续前进，看看四种潜在的DevOps平台实施策略。
- en: Jumping onto the cloud-native bandwagon
  id: totrans-248
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 跳上云原生的快车道
- en: As a final point, Al Wagner made an important observation that many organizations
    seem to be jumping onto the cloud-native bandwagon. Cloud-native environments
    offer tremendous flexibility for leveraging the resources of **Infrastructure
    as a Service** (**IaaS**) providers as a fee-based and pay-per-use service that
    offers continuous integration, container engines, and cloud orchestration capabilities.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Al Wagner 提出了一个重要的观察，许多组织似乎正在纷纷加入云原生的潮流。云原生环境为利用**基础设施即服务**（**IaaS**）提供商的资源提供了巨大的灵活性，这些服务是按需付费和按使用量计费的，能够提供持续集成、容器引擎和云编排能力。
- en: 'However, Al also makes this critical point: "*The legacy systems being used
    by large enterprise corporations– built with years and years of unique capabilities
    – are not going away any time soon. The mainframe is not going away; it is not
    dying. The reason for this is because modernizing these legacy system and application
    capabilities has a considerable cost. [The organization must ask] is there an
    ROI to justify the rewrites and migrations?*"'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Al 也提出了这一关键观点：“*大型企业公司所使用的传统系统——这些系统经过多年独特功能的构建——在短期内不会消失。主机系统不会消失；它不会死亡。原因是，现代化这些传统系统和应用程序的功能有相当大的成本。[组织必须问]是否有足够的投资回报率来证明重写和迁移的合理性？*”
- en: We'll discuss this issue again later in the *Deciding on the appropriate DevOps
    platform strategy* Subsection. Specifically, it may make sense to operate a hybrid-cloud
    environment over an extended period.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后面的*决定适当的 DevOps 平台策略*小节中再次讨论这个问题。具体来说，长期运营一个混合云环境可能是有意义的。
- en: Interview with Joel Kruger
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与 Joel Kruger 的访谈
- en: '**Joel Kruger** is a DevSecOps engineer and AWS solutions architect with 10
    years of experience building CI/CD pipelines in commercial and federal sectors.
    He is also an expert in employing container orchestration systems for automating
    computer application deployments at scale. In his current role, he is constructing
    reusable CI/CD pipeline configurations for a large federal agency with hundreds
    of software product teams. Joel is a proponent of building CI/CD pipeline configurations
    as downloadable and self-serve software factories. It is from this perspective
    that he discusses potential DevSecOps implementation pitfalls and platform implementation
    strategies.'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '**Joel Kruger** 是一名 DevSecOps 工程师和 AWS 解决方案架构师，拥有 10 年的经验，在商业和政府部门建立 CI/CD
    流水线。他也是使用容器编排系统自动化计算机应用程序大规模部署的专家。在他目前的角色中，他正在为一个拥有数百个软件产品团队的大型联邦机构构建可重复使用的 CI/CD
    流水线配置。Joel 提倡将 CI/CD 流水线配置构建为可下载和自助服务的软件工厂。正是从这个角度，他讨论了潜在的 DevSecOps 实施陷阱和平台实施策略。'
- en: Leveraging reusable configurations
  id: totrans-254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 利用可重用的配置
- en: Joel notes that **configuration management** (**CM**) is not a new concept and
    is a necessary set of practices, policies, and repositories to maintain a product
    across releases over its life cycle.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: Joel 提到，**配置管理**（**CM**）并不是一个新概念，而是一个必要的实践、政策和存储库集合，用于在产品生命周期内跨版本保持产品的一致性。
- en: Joel notes the idea of CM comes from other institutions, such as the military,
    and that the software community borrowed those ideas and retrofitted them to protect
    our organization's IT assets. Joel also points out that CM was traditionally a
    purely manual task, usually completed by a system administrator or junior developer.
    But, in smaller projects, the CM task can fall to more senior developers.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: Joel 提到，CM 的理念来源于其他机构，如军队，软件社区借鉴了这些理念并加以改造，以保护我们组织的 IT 资产。Joel 还指出，CM 传统上是一项完全手动的任务，通常由系统管理员或初级开发人员完成。但是，在较小的项目中，CM
    任务可能会落到更资深的开发人员身上。
- en: Regardless, the CM role involved a lot of manual work to document the system's
    state carefully. But those days are rapidly disappearing, as the industry is moving
    to implement Configuration as Code. It's not that CM is going away; instead, we
    can reduce the amount of non-value-adding work involved to capture, maintain,
    and use certain information. These changes came from the need to accelerate configuration
    tasks across CI/CD and DevOps pipelines, support cloud-based computing environments,
    and implement new API-based automation tooling.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，CM 角色曾涉及大量手动工作，需要仔细记录系统状态。但这些日子正在迅速消失，因为行业正在推动实现配置即代码。并不是说 CM 会消失；而是我们可以减少捕捉、维护和使用某些信息所涉及的非增值工作量。这些变化源于加速跨
    CI/CD 和 DevOps 流水线的配置任务、支持基于云的计算环境以及实施新的基于 API 的自动化工具的需求。
- en: However, sometimes, CM is confused with version control. There are some similarities
    in that both activities track versions of products, product components, and information
    artifacts as they evolve. The primary difference is that version control identifies
    individual components as they change, irrespective of whether they are included
    in a production release. In contrast, CM processes track the versions of all the
    software and infrastructure components, as well as other information artifacts
    related to each release of a product across its life cycle.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有时，配置管理会与版本控制混淆。两者有一些相似之处，都是跟踪产品、产品组件和信息工件在演变过程中的版本。主要的区别在于版本控制识别单个组件的变化，无论它们是否包含在生产版本中。相比之下，配置管理过程会跟踪所有软件和基础设施组件的版本，以及与每个产品版本相关的其他信息工件，贯穿整个生命周期。
- en: We've already discussed how IaC is the practice of ensuring all provisioned
    infrastructure is automated through code. But a supplementary purpose of IaC is
    to establish a written record of the services that exist, where they are located,
    and under what circumstance they are deployed.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论过，IaC是确保所有已配置的基础设施通过代码进行自动化的实践。但IaC的一个补充目的，是建立一份书面记录，记录现有服务的位置、部署情况以及部署的条件。
- en: CM may seem like an overly bureaucratic and non-value-added task. However, that's
    not true because the organization must protect its IT assets over their respective
    life cycles. So, it's not that its CM that is non-value-added; it's the manual
    processes we have to employ to record, save, and relate code and other artifacts
    to software releases that are burdensome. Therefore, organizations may find it
    easier to document the use of code and other artifacts via IaC, to maintain a
    full record of all the technology assets a company owns and has deployed.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理（CM）可能看起来像是一个过于官僚化且没有增值的任务。然而，事实并非如此，因为组织必须在其生命周期内保护其IT资产。因此，并不是配置管理本身没有增值；而是我们为了记录、保存和将代码及其他工件与软件发布关联所必须采用的手动流程是繁重的。因此，组织可能会发现通过基础设施即代码（IaC）来记录代码和其他工件的使用更加容易，从而维护公司所拥有和部署的所有技术资产的完整记录。
- en: Joel points out that as a software product matures, not all its components and
    information artifacts change with each release. However, things can get out of
    sync very quickly from a versioning perspective. Therefore, CM is necessary to
    maintain the product's performance, functionality, and physical attributes associated
    with the unique set of requirements, design, and operational information specified
    for each release.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: Joel指出，随着软件产品的成熟，并非所有组件和信息工件在每次发布时都会发生变化。然而，从版本控制的角度来看，问题可能会迅速失去同步。因此，配置管理对于维护产品的性能、功能以及与每个版本的独特要求、设计和操作信息相关的物理属性是必要的。
- en: While CM is not a new concept, what is relatively new is automating the deployment
    of new releases through configurations implemented as code, in the form of **Infrastructure
    as Code** (**IaC**) and **Configuration as Code** (**CaC**). Both IaC and CaC
    fall under modern configuration management practices, and both use scripting languages
    to automate configurations across disparate environments. But the two terms have
    different contextual use meanings.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然配置管理不是一个新概念，但相对较新的做法是通过作为代码实现的配置自动化新版本的部署，具体表现为**基础设施即代码**（**IaC**）和**配置即代码**（**CaC**）。IaC和CaC都属于现代配置管理实践，且两者都使用脚本语言在不同环境之间自动化配置。但这两个术语在具体语境中的使用意义不同。
- en: 'Let''s take a look:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下：
- en: '**IaC**: This approach is used to define your IT infrastructure, such as networks,
    servers, load balancing, and security as a text file (script or definition file),
    that is checked into version control. The text files serve as the baseline source
    for creating or updating the specified environments. IaC provides an executable
    specification in machine-readable syntax and includes steps capable of producing
    virtualized infrastructure, can be versioned as a release, and tracked in SCM
    repositories.'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IaC**：这一方法用于定义您的IT基础设施，如网络、服务器、负载均衡和安全性等，形式为文本文件（脚本或定义文件），并进行版本控制。文本文件作为创建或更新指定环境的基准源。IaC提供了一种可执行的规范，采用机器可读的语法，并包括能够生成虚拟化基础设施的步骤，能够作为发布进行版本控制，并在软件配置管理（SCM）库中进行跟踪。'
- en: '**CaC**: This defines how your software components interface with each other
    – by specifying parameters and settings for applications, server processing, and
    operating systems – that are also managed as configuration files in a repository.
    As a result, CaC makes it possible to build and test software code changes earlier
    in the pipeline, to discover and address issues sooner, and improve the quality
    of each release. As with IaC, CaC implements executable specifications in machine-readable
    syntax and includes steps to align application infrastructure configurations as
    a versioned release that''s tracked in SCM repositories.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CaC**：这定义了您的软件组件如何相互交互——通过指定应用程序、服务器处理和操作系统的参数和设置——这些设置也作为配置文件托管在仓库中。因此，CaC
    使得能够在流水线的早期阶段构建和测试软件代码更改，从而更早发现和解决问题，并提高每次发布的质量。与 IaC 一样，CaC 实现了机器可读语法中的可执行规范，并包括将应用程序基础设施配置对齐为版本发布的步骤，该版本在
    SCM 仓库中进行跟踪。'
- en: Now that you understand the basics behind IaC and CaC, let's learn what Joel
    has to say about how and why they are used.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经理解了 IaC 和 CaC 背后的基本概念，让我们看看 Joel 是如何解释它们的使用方法和原因的。
- en: Implementing IaC and CaC resources
  id: totrans-267
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现 IaC 和 CaC 资源
- en: Joel starts by noting that organizations should architect their business' IaC
    and CaC resources modularly via infrastructure functionality. For example, a classic
    web-based application includes a frontend user interface, backend business logic,
    and a database. Rather than placing all your configuration code in one file, it's
    best to break the code into separate files for each application layer. This modular
    structuring and decoupling strategy makes it easier to switch out components and
    systems over time.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: Joel 首先指出，组织应通过基础设施功能模块化地架构其业务的 IaC 和 CaC 资源。例如，一个经典的基于 Web 的应用程序包括前端用户界面、后端业务逻辑和数据库。与其将所有配置代码放在一个文件中，不如将代码拆分成每个应用层的单独文件。这种模块化结构和解耦策略使得随着时间的推移更容易更换组件和系统。
- en: 'This will help them better position their engineers to execute new software
    and infrastructure deployments swiftly, especially if any of the following events
    happen:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 这将帮助他们更好地定位工程师，迅速执行新的软件和基础设施部署，尤其是在以下事件发生时：
- en: Changing customer demands for specific tools and features.
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户对特定工具和功能的需求发生变化。
- en: Needing to repurpose existing code snippets for other products or portfolios.
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要将现有代码片段重新用于其他产品或产品组合。
- en: Untenable increases in cost for previously implemented tools or third-party
    service providers.
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 之前实施的工具或第三方服务提供商的成本不可持续地增加。
- en: Rip and replace business mandates.
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 替换业务需求。
- en: In practice, IT architectures are far more complex than the simple three-tier
    architectural model noted previously. Large organizations that contain hundreds
    of applications must support potentially hundreds or thousands of configuration
    options that can change over time.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，IT 架构远比之前提到的简单三层架构模型复杂。包含数百个应用程序的大型组织必须支持可能会随着时间变化的成百上千个配置选项。
- en: At this point, Joel moved on to speak about using IaC and CaC concepts to improve
    interoperability.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止，Joel 继续谈论如何利用 IaC 和 CaC 概念来改善互操作性。
- en: Maintaining interoperability
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 维护互操作性
- en: Regarding IaC and CaC, Joel notes that you must construct your plans, playbooks,
    pipelines, and scripts with interoperability in mind. This strategy mitigates
    the amount of code refactoring and time that is needed to adopt new toolchains.
    It also minimizes the opportunity for significant disruptions to the rest of the
    operational infrastructure when those things occur.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 IaC 和 CaC，Joel 指出，您必须在构建计划、手册、流水线和脚本时考虑互操作性。这种策略减少了采用新工具链时所需的代码重构和时间。它还将显著中断其他操作基础设施的机会降到最低。
- en: Joel suggests the best approach is to encourage your developers to use input
    parameters, expressed as environment variables and boilerplate code configurations.
    This way, each component of your solution's portfolio can behave like a software
    function and be called on in any permutation of complimentary toolchain stacks.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: Joel 建议最佳方法是鼓励开发人员使用输入参数，表示为环境变量和模板代码配置。这样，您解决方案的每个组件都可以像软件函数一样运行，并且可以在任何工具链堆栈的组合中被调用。
- en: Removing "secrets" from code
  id: totrans-279
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从代码中移除“秘密”
- en: Application and systems security is a critical issue across all organizations,
    or at least it should be. However, Joel notes that he has seen too many developers
    take shortcuts in these issues by hardcoding passwords and system access inputs
    within their configuration files. His bottom-line admonishment is "*Don't hard
    code secrets in source control*!"
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序和系统安全是所有组织中的关键问题，或者至少应该是。 然而，Joel 提到，他看到太多开发人员在这些问题上走捷径，通过将密码和系统访问输入硬编码到他们的配置文件中。
    他的底线告诫是“*不要在源代码控制中硬编码秘密*！”
- en: Instead, the much better option is to store them externally as encrypted data
    in a **Privileged Access Management** (**PAM**) tool such as HashiCorp Vault,
    Akeyless Vault, Thycotic Secret Server, BeyondTrust, or AWS Secrets Manager. Secrets
    Managers (or PAMs) typically inject sensitive information into container runtimes
    as environment variables or mount them as volumes. The bottom line is, developers
    must not make it easy for hackers to see an application's entry points, access
    codes, and other sensitive information.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，更好的选择是将它们作为加密数据存储在**特权访问管理**（**PAM**）工具中，例如 HashiCorp Vault、Akeyless Vault、Thycotic
    Secret Server、BeyondTrust 或 AWS Secrets Manager。Secrets Manager（或 PAM）通常会将敏感信息作为环境变量注入到容器运行时，或将其挂载为卷。归根结底，开发人员绝不能轻易让黑客看到应用程序的入口点、访问码和其他敏感信息。
- en: Most Secrets Managers incorporate a client process that is intended to be run
    within microservice containers (Docker, Kubernetes) that can unlock secrets using
    an API key issued by the Secrets Manager server. In many cases, authorization
    can be configured at group or individual levels, per secret, or even dynamically
    for generating time-sensitive, single-use passwords. Joel notes that besides being
    more secure, parameterizing secrets is a critical step in ensuring that your software
    configurations are reusable, extensible, and scalable.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Secrets Manager 都包含一个客户端进程，该进程旨在在微服务容器（Docker、Kubernetes）中运行，通过 Secrets
    Manager 服务器颁发的 API 密钥解锁秘密。在许多情况下，授权可以根据组或个人、每个秘密，甚至动态配置，以生成具有时效性的单次使用密码。Joel 提到，除了更安全之外，参数化秘密是确保软件配置可重用、可扩展和可扩展的关键步骤。
- en: Items that IT organizations should specify as *secret* include usernames, passwords,
    tokens, API keys, SSH keys, PGP keys, TLS keys, TLS certificates, IP addresses,
    port numbers, domain names, secure strings, and sensitive files. Also, the IT
    organization should identify any other digital information that is considered
    secret or protected by your organization and include it in this list.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: IT 组织应该指定为*秘密*的项包括用户名、密码、令牌、API 密钥、SSH 密钥、PGP 密钥、TLS 密钥、TLS 证书、IP 地址、端口号、域名、安全字符串和敏感文件。此外，IT
    组织还应确定任何其他被视为秘密或受组织保护的数字信息，并将其包含在此列表中。
- en: Avoiding configuration lockouts
  id: totrans-284
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 避免配置锁定
- en: Defining reusable configurations through code reduces the number of experts
    the organization must find and maintain to support its CI/CD and DevOps platforms.
    IaC and CaC also reduce the time and effort each software development team must
    expend to set up their environments, run their tests, and deploy their code. But
    all those benefits are lost if the configurations become unusable.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 通过代码定义可重用的配置，减少了组织必须找到和维护的专家数量，以支持其 CI/CD 和 DevOps 平台。 IaC 和 CaC 还减少了每个软件开发团队在设置环境、运行测试和部署代码时所需的时间和精力。但如果配置变得无法使用，那么所有这些好处都将丧失。
- en: With this issue in mind, Joel strongly recommends that developers should not
    hard code key-value pairs that will prevent their IaC, CaC, or in-house code from
    becoming reusable. Instead, whenever possible, use inputs at the command line,
    API calls, or implement environment files that can be committed to source control
    and consumed by your automation flows.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一问题，Joel 强烈建议开发人员不要硬编码那些会导致 IaC、CaC 或内部代码无法重用的键值对。相反，在可能的情况下，使用命令行输入、API
    调用或实现可以提交到源代码控制并被自动化流使用的环境文件。
- en: Like parameterizing secrets, parameterizing crucial key/value pairs in your
    code is a critical step in ensuring that your software configurations are reusable,
    extensible, and scalable.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 和参数化秘密一样，在代码中参数化关键的键值对项是确保软件配置可重用、可扩展和可扩展的关键步骤。
- en: 'The following list contains key/value pairs items you should parameterize:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表包含你应该参数化的键值对项：
- en: '**Resource Values**: CPU, memory, disk size, VM names'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源值**：CPU、内存、磁盘大小、虚拟机名称'
- en: '**Cloud Provider Attributes**: Regions, availability zones, AMIs, VPCs'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云服务提供商属性**：区域、可用区、AMI、VPC'
- en: '**Network Configurations**: Subnets, IP addresses, domain names, DNS resolvers'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络配置**：子网、IP地址、域名、DNS解析器'
- en: '**Application Configurations**: App name, port numbers, versions, dependencies'
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序配置**：应用名称、端口号、版本、依赖关系'
- en: '**Container Orchestration**: Container registries, image names, image tags'
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器编排**：容器注册表、镜像名称、镜像标签'
- en: Now that we've covered how to hard code secrets while avoiding configuration
    lockouts, let's look at what Joel has to say about the need for frequent releases.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讲解了如何在避免配置锁定的同时对秘密进行硬编码，接下来我们来看Joel关于频繁发布的观点。
- en: Encouraging frequent releases
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 鼓励频繁发布
- en: 'Joel cited a frequently identified objective for CI/CD and DevOpsOps pipeline
    builds: "*If the master code branch of a product can''t be successfully deployed
    to a production environment within 20 minutes notice, you aren''t doing DevOps
    correctly. Only stable deployments that have been thoroughly tested to meet customer
    specifications count here*."'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: Joel引用了CI/CD和DevOpsOps管道构建中经常提到的一个目标：“*如果产品的主代码分支在20分钟内无法成功部署到生产环境，你就没有正确实施DevOps。只有经过彻底测试并符合客户规范的稳定部署才算有效*。”
- en: In other words, Joel encourages development teams to produce smaller units of
    improvement to the applications frequently. Joel recommends that product release
    processes be fully automated with push-button type implementations or as close
    to it as possible to accomplish this goal. He goes on to state that, with contemporary
    CI/CD tools, it is possible to build this capability, even in many legacy environments
    that still have mainframes *kicking around*.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，Joel鼓励开发团队频繁地向应用程序推出较小的改进单元。Joel建议产品发布过程应完全自动化，通过一键式实现或尽可能接近的方式来实现这一目标。他还指出，借助现代CI/CD工具，即使在许多仍有主机的旧版环境中，也能构建这种能力。
- en: Adhering to a rapid build and release philosophy ensures that your customers
    will experience a constant flow of desired improvements aligned with their needs.
    This strategy improves the customer experience, even when your products or services
    don't contain all the features that your customers desire yet.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循快速构建和发布的理念，确保客户会体验到不断符合需求的改进流。这一策略即使在你的产品或服务尚未包含客户所希望的所有功能时，也能改善客户体验。
- en: The objective is to make sure each new release is incrementally *more* closely
    aligned with your customer's expectations, and never *less*. Just as importantly,
    this strategy takes tremendous pressure off your organization or business unit
    to deploy new features before they are ready. No IT organization wants to must
    roll back their releases because they weren't ready for production.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是确保每次新版本发布都能够逐步*更*紧密地与客户的期望对齐，而不是*更少*。同样重要的是，这种策略可以极大地减轻你所在组织或业务单元在功能尚未准备好之前就部署新特性的压力。没有任何IT组织希望因为发布的版本不适合生产环境而不得不回滚。
- en: Instead, with fast build and deploy capabilities installed, customers are left
    with tangible evidence that their interests are constantly being considered before
    they lose interest in your products.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，安装了快速构建和部署能力后，客户可以看到具体的证据，证明他们的需求在失去对你产品的兴趣之前一直被考虑。
- en: With frequent releases, often going out over different production environments,
    we need to make sure we build and deploy the right configurations with each release.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在频繁发布、且通常跨越不同生产环境的情况下，我们需要确保在每次发布时构建并部署正确的配置。
- en: Configuring the right DevOps platform
  id: totrans-302
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置正确的DevOps平台
- en: Joel claims that there is no way around creating and maintaining scripts or
    configurations that utilize API-based infrastructure deployments. This statement
    is true regardless of whether your organization implements a SaaS or is operating
    on-premises or in the cloud DevOps platform.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: Joel声称，没有办法避免创建和维护利用基于API的基础设施部署的脚本或配置。无论你的组织是实施SaaS，还是在本地或云DevOps平台上运作，这一声明始终适用。
- en: 'Joel further notes that DevOps platform strategies fall into the following
    three broad categories:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: Joel进一步指出，DevOps平台策略可以分为以下三大类：
- en: Declarative configurations
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明式配置
- en: Programmatic self-service SaaS/PaaS tools
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序化的自助式SaaS/PaaS工具
- en: A combination of both
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两者的结合
- en: The benefit of using the declarative configurations strategy is that all IaC,
    CaC, and parameters can be stored and audited together in source control management.
    This strategy provides ease of change management and gives your organization a
    solid position in the event of a security audit.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 使用声明式配置策略的好处是，所有的IaC、CaC和参数都可以存储并在源代码管理中进行审计。该策略便于变更管理，并且在进行安全审计时，能够为组织提供稳固的立场。
- en: Popular in the government and financial sectors, this strategy is often used
    when an enterprise forms a centralized BizDevOps team to author approved IaC,
    CaC, and automation templates that all development teams must standardize around.
    The benefit of this approach is that individual teams have more freedom to create
    and manage their operational infrastructure.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 这一策略在政府和金融行业中非常流行，通常在企业组建一个集中式BizDevOps团队，来编写所有开发团队必须围绕的批准的IaC、CaC和自动化模板时使用。这一方法的好处是，个别团队可以拥有更多的自由度来创建和管理自己的运营基础设施。
- en: The downside is that automated pipelines won't scale as nicely as the self-service
    PaaS/SaaS approach. Many sprawling code repositories will likely be created, and
    each one will need to be tracked and maintained, along with their associated CI/CD
    pipelines and other artifacts.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点是，自动化流水线无法像自服务PaaS/SaaS方法那样良好扩展。很可能会创建多个庞大的代码库，每一个都需要追踪和维护，还需要维护它们相关的CI/CD流水线和其他工件。
- en: On the other hand, Joel notes that the programmatic self-service SaaS/PaaS strategy
    is optimal if your organization prefers to standardize business processes around
    software kiosks, API-driven web services, ephemeral deployments, and third-party
    vendors. With this approach, infrastructure can be programmatically assembled,
    provisioned, and configured to suit various workloads on demand. Once each service's
    workload has been executed, any resulting artifacts and metadata get pushed to
    persistent storage, and the infrastructure that was previously utilized gets re-provisioned
    for use by others.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Joel指出，如果你的组织更倾向于围绕软件终端、API驱动的Web服务、临时部署和第三方供应商来标准化业务流程，那么程序化自服务SaaS/PaaS策略是最优选择。通过这种方法，基础设施可以按需通过程序化方式组装、配置并提供，适应不同的工作负载。一旦每个服务的工作负载执行完毕，任何生成的工件和元数据都会被推送到持久化存储，并且之前使用的基础设施会被重新配置，以供其他人使用。
- en: The benefit of this approach is that business processes can scale to demand
    and with less administrative overhead. The downside is that funneling activities
    into standardized processes can feel inflexible or restrictive to development
    teams. Another challenge with this strategy is tracing changes in governance and
    accountability.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的好处在于，业务流程可以根据需求扩展，并且减少了管理开销。缺点是，将活动集中到标准化流程中，可能会让开发团队感觉不灵活或受限。另一挑战是追踪治理和问责制的变化。
- en: Of course, Joel notes that it's never quite that cut and dry from a DevOps platform
    decision-making perspective. There are situations where governance and accountability
    take precedence over scalability. There may be other situations where transaction
    speed and velocity are more critical than maintaining extensive configurations
    for audit purposes in the same organization. So, large organizations should be
    prepared to maintain various DevOps platform solutions and configurations to support
    their disparate business needs.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，Joel指出，从DevOps平台决策的角度来看，这个问题从来不会那么简单明了。有些情况下，治理和问责制可能优先于可扩展性。在某些其他情况下，事务的速度和流畅度比维护广泛的审计配置更为关键。因此，大型组织应做好准备，维护不同的DevOps平台解决方案和配置，以支持它们多样化的业务需求。
- en: Adopting software factory strategies
  id: totrans-314
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 采用软件工厂策略
- en: When federated effectively, an enterprise can decentralize to some extent by
    allowing individual CI/CD and DevOps pipeline development teams to build and maintain
    scalable services, that can then be consumed by other teams in the rest of the
    enterprise. This strategy is economical and leads to a culture of cross-functional
    collaboration, shared responsibility, and value stream productivity improvements.
    Joel notes that one very effective method for bringing these principles to life
    is developing software factories.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 当有效地进行联邦化时，企业可以通过允许各个CI/CD和DevOps流水线开发团队构建和维护可扩展服务，从而在一定程度上实现去中心化，这些服务可以供企业其他团队使用。这一策略经济高效，有助于培养跨职能协作、共享责任以及价值流生产力提升的文化。Joel指出，落实这些原则的一种非常有效的方法是开发软件工厂。
- en: A **software factory** is a structured collection of related software assets
    that aid in producing computer software applications or software components according
    to specific, externally defined end user requirements through an assembly process.
    Leveraging IaC and CaC capabilities, the software factory concept enables rapid
    and automated infrastructure and application infrastructure deployments.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '**软件工厂**是一个结构化的相关软件资产集合，旨在根据特定的、外部定义的最终用户需求，通过组装过程来帮助生产计算机软件应用程序或软件组件。借助IaC和CaC能力，软件工厂概念使得基础设施和应用程序基础设施的快速自动化部署成为可能。'
- en: Joel's take is that organizations can extend these concepts to include business
    development and security operations applications. Essentially, a software factory
    applies traditional manufacturing techniques and principles to software development,
    infrastructure deployment, and business operations.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: Joel认为，组织可以将这些概念扩展到包括业务开发和安全操作应用程序。实质上，软件工厂将传统的制造技术和原则应用于软件开发、基础设施部署和业务运营。
- en: For those interested in exploring the technical details of implementing software
    factories and automation techniques, Joel provides more details on his website,
    `dynamicVSM.com`. This website serves as a convergence for DevOps and VSM technical
    tips and includes code snippets, cloneable demos, educational exercises, related
    information, and industry news.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些有兴趣深入探索实施软件工厂和自动化技术的细节的人，Joel在其网站`dynamicVSM.com`提供了更多细节。该网站是DevOps和VSM技术技巧的汇聚点，包含代码片段、可克隆的演示、教育练习、相关信息以及行业新闻。
- en: Joel believes the adoption of software factories offers the most efficient solution
    to implementing Lean value stream fundamentals across your organization's DevOps
    platforms. The rapid software delivery capabilities of DevOps, when aligned to
    support business strategies and objectives, helps streamline all organizational
    value stream activities, which can significantly increase user productivity. Moreover,
    employing software factories with reusable configurations can help the IT development-oriented
    value streams establish standard and consistent user interfaces across all business
    applications, reducing the need for end user training.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: Joel认为，采用软件工厂提供了实施精益价值流基础的最有效解决方案，能够帮助组织的DevOps平台实现这一目标。当DevOps的快速软件交付能力与业务战略和目标对齐时，有助于简化所有组织价值流活动，从而显著提高用户生产力。此外，采用具有可重用配置的软件工厂，可以帮助以IT开发为导向的价值流在所有业务应用程序中建立标准化和一致的用户界面，减少最终用户培训的需求。
- en: Joel notes that businesses need to evolve to support emergent business, market,
    and customer needs. Likewise, the organization's business applications must evolve
    in lockstep to implement new process changes. The ease of deploying new and updated
    functionality, plus flexible user interfaces through reusable and extendable software
    factories, allows the organization's business applications to evolve to support
    emergent needs and assist end users in performing their tasks to implement the
    new business workflows.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: Joel指出，企业需要不断演变，以支持不断变化的业务、市场和客户需求。同样，组织的业务应用程序也必须同步演变，以实施新的流程变更。通过可重用和可扩展的软件工厂提供的新功能的部署简便性，以及灵活的用户界面，使得组织的业务应用程序能够演变以支持新兴需求，并帮助最终用户执行任务，实施新的业务工作流。
- en: We've reached the end of our interviews with DevOps implementation experts.
    In these interviews, you learned what the experts think regarding DevOps implementation
    pitfalls and platform deployment strategies. In the next section, you will learn
    about four common DevOps platform implementation strategies.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了与DevOps实施专家的访谈。在这些访谈中，您了解了专家们对于DevOps实施陷阱和平台部署策略的看法。在接下来的部分，您将学习到四种常见的DevOps平台实施策略。
- en: Deciding on an appropriate DevOps platform strategy
  id: totrans-322
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 决定一个合适的DevOps平台策略
- en: Now that you know some of the potential DevOps implementation pitfalls, we'll
    start learning about four optional DevOps implementation strategies. The platforms
    for deploying DevOps capabilities have evolved over time, and some are more common
    today than others.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经了解了一些潜在的DevOps实施陷阱，我们将开始学习四种可选的DevOps实施策略。随着时间的推移，用于部署DevOps能力的平台发生了变化，其中一些平台今天比其他平台更为常见。
- en: In this section, you will learn about the four common DevOps implementation
    strategies, as well as their potential applications.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在本部分中，您将了解四种常见的DevOps实施策略，以及它们的潜在应用。
- en: 'These four implementation strategies include the following:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: Building a custom DevOps toolchain
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Purchasing **DevOps as a Service**/**DevSecOps as a Service** (**DaaS**)
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VSM tools-based DevOps platform integration and orchestration solution
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing DevOps pipeline configurations as reusable software factories
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each option has its own set of pros and cons, which we'll explore in this chapter.
    We'll start our discussion by looking at building a custom DevOps platform solution
    option.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: Building a custom DevOps platform
  id: totrans-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As this subsection's title implies, this approach involves internal DevOps engineering
    teams doing the work to integrate, automate, and orchestrate tools to form custom
    DevOps platforms. This was the only approach available in the early days of DevOps.
    You can liken this strategy, by analogy, to building a custom race car, plus the
    tooling to build it. Or, as another analogy, purchasing and building the equipment
    for your manufacturing facility and installing it. So, you end up owning both
    sets of problems – building the tools for your software delivery platform and
    building the platform.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: There is no practical justification to do this today. There is no technical
    requirement that makes this an effective strategy. Instead, the sole motivations
    for going this route today are empire building and job security. Also, independent
    software development teams may go down this route on their own when they cannot
    secure corporate sponsorship and funding.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: Al Wagner likes to refer to this strategy as *the gift that keeps on taking*.
    Organizations that go down this route fail to look at the downside of taking on
    the custom integrations, licensing, support, and maintenance issues. After a while,
    the DevOps engineering team spends more and more time maintaining the configurations
    and less time building software products. Moreover, if your DevOps engineering
    experts leave, the company is in a boatload of trouble!
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's go to the other end of the spectrum to discuss the use of procuring
    a DevOps platform as a service, where all the tools to install a software delivery
    pipeline are made available and integrated.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: Purchasing DaaS
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This strategy involves purchasing an already integrated platform that includes
    an end-to-end toolchain to support software deliveries. Examples include **Amazon
    Web Services** (**AWS**), **GitLab**, **Microsoft Azure DevOps**, and a host of
    independent companies that integrate third-party DevOps tools and offer them on
    the cloud as a DaaS product.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: Vendor lock-in is the biggest downside to this approach, and their platforms
    may not support the tools your organization needs. On the other hand, virtually
    all DaaS vendors allow you to integrate other tools to create custom solutions.
    But what if your organization goes all in with customizations? In that case, they
    own the problems associated with integrating, automating, and orchestrating the
    disparate tools employed to develop the DevOps capabilities that run your business.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, your data is living inside someone else's environment. We all need
    to ask ourselves what happens if their or your systems go down. Software runs
    our digital world. Everything we do in business has a dependency on software.
    So, not having control over your data and application development pipelines has
    the potential for catastrophic consequences if they are hacked or go down.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: Also, what happens if your DaaS vendor's tools and platform offerings become
    prohibitively expensive? Are you locked in and bound by an agreement that is financially
    painful to break? A journey to the cloud is very expensive and a multi-year project.
    Do you have the ROI to justify a DaaS rollout? And can you afford to lose or make
    up the DevOps implementation investments if you must make a change to another
    DaaS vendor?
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: Here's another concern. Let's assume you have an organization that's already
    made investments in DevOps tools and platforms. If your company is considering
    a mandate to move to a DaaS solution provider, the leaders and COE need to evaluate
    the company's ability to make it through the migration.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: What if what you're doing isn't broke? The organization's executives need to
    take a deep look at what they are attempting to fix. Frequently, the executives
    are hoping to avoid DevOps tool investments and toolchain integration costs. And,
    they may have concerns about long-term maintenance costs and supportability issues.
    They are not wrong to have those concerns. But the organization must conduct a
    thorough investigation/analysis of alternatives before jumping into a major change
    of this magnitude. Also, don't force a mandate overnight. Take the time to plan
    the migration, including prototyping several rollouts before mass migration.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: By the way, it's not that employing a cloud-based DaaS solution is a wrong decision.
    But, in many cases, a large-scale or enterprise migration to a platform-based
    tool suite may cost time and be resource prohibitive. We also need to consider
    the impact of a DevOps migration on our customers. Can we sustain our deliveries
    without loss of service through the migrations? How will we make sure we can quickly
    roll back any failed migrations?
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: DevOps is not usually about solving intractable technology problems – it's about
    solving a business problem. So, we need to approach migration to a DaaS-based
    solution as a business decision.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: 'Al Wagner made an important observation that''s relevant to this section: "*The
    mainframe is not dying; they are not going away. The legacy systems – built with
    years and years of unique capabilities – are not going away. Duplicating their
    capabilities is a huge cost. (The organization must ask) is there an ROI to justify
    the rewrites and migrations?*"'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we''ve viewed the two extreme positions: one is to build your own DevOps
    platform solution, while the other is to purchase a fully enabled DaaS-based solution.
    Now, let''s look at a couple of alternatives that lie in the middle: employing
    VSM tools and building reusable software delivery factories. First, we''ll start
    with the VSM-based DevOps platform solution option.'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: Employing VSM tools
  id: totrans-347
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can use VSM tools to assist with the Integrate, Automate, and Orchestrate
    capabilities of disparate tools. This comes back to the issues of integrating
    disparate toolchains and importing data as your sources of truth for decision-making;
    that is, business decisions should be made based on data in the six sources of
    truth: enterprise planning, version control, artifact repository, release orchestration,
    quality management, and event management. Whatever tools you have deployed, you
    need to integrate data into your data repository.'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: Use the end-to-end data to make decisions. We don't really care what DevOps
    tools you use for any given particular task, but you need to access the data that's
    maintained in that tool. So, it would help to have the tools communicate back
    to a source of truth with a common and normalized data model for analysis and
    decision making. It's the integrations back to the primary data source that are
    doing all the hard work. The downside is that the VSM tool may not have all the
    necessary integration adaptors and connectors. So, you may need to own the integration
    problem (via custom APIs) to address those issues or leverage a DevOps tools vendor's
    plugin framework.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: Building reusable software factories
  id: totrans-350
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create internal teams or use an external software integration team to develop
    software factories that build self-service CAC that can be downloaded via Git
    or other SCM tools. The definitions for each of these three categories are as
    follows:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: '**Infrastructure as Code** (**IaC**): Such as a terraform standup.'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pipeline as Code** (**PaC**): The whole, seamless end-to-end integration,
    automation, and orchestration, which is done through a script upon a commit. This
    triggers a holistic set of API commands through Jenkins or Ansible. The whole
    thing is code.'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Self Healing Pipeline**: Any errors in execution (Jenkins or other automation
    tools) would trigger a machine-readable error and use utilities and automated
    runbooks to correct and rerun the failed step.'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In other words, if the DevOps team sees an automation failure occur and fixes
    it, then the team triages the problem to determine its root causes and to build
    a fix. Next, they code the fix as an automated runbook that operates within the
    Jenkins file to resolve that type of error, should it ever happen again in the
    future. (This is what we mean by self-healing).
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: This subsection completes our discussion on how to decide which DevOps platform
    implementation strategy is best suited for your organization's needs. You've learned
    about four basic strategies here. Now, we are going to discuss what you might
    do if your organization's chief executives mandate the adoption of DevOps capabilities
    without proper planning, preparation, and budgeting.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with corporate implementation mandates
  id: totrans-357
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DevOps is such a critical business enabler that chief and line of business executives
    may push the transition via a corporate mandate without taking sufficient time
    to plan, prepare, and budget the initiative to support an enterprise-scale deployment.
    When this occurs, the best DevOps implementation strategy is to go with **DevSecOps
    as a Service** (**DaaS**). The IT department does not need to implement DevOps
    tools and maintain integrated toolchains to get started. And, when driven by corporate
    mandate, the decision-makers may not be aware of the technical implementation
    options, tools and toolchain alternatives, configuration and integration requirements,
    costs, and other issues.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: DaaS is a multitenancy implementation concept. The term *software multitenancy*
    refers to a software architecture in which the software runs on at least one server,
    but more often on many virtualized servers and serves multiple tenants (customers).
    DaaS examples include **Azure DevOps Services**, **GitLab**, and **AWS CodeDeploy**.
    In addition, large organizations that need to deploy microservice-based applications
    across multiple environments might consider using **Azure Kubernetes Service**.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: Critically, DaaS-based developers do not need to write IaC since the DaaS platforms
    already include an integrated toolchain. Most DaaS solutions are extensible, allowing
    software teams to add other tools as customizations to their essential platform
    services. If a delivery team wants to create a custom DevOps platform, they will
    need to have or hire experts in IaC tools such as Ansible and Terraform.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: There are other considerations that can support rapidly deploying DevOps when
    mandated. For example, use a **user-centered design** (**UCD**) process to focus
    on the features and capabilities that will help the business. These tools allow
    customers and users to see what they want before you develop the code. As a result,
    the UCD process occurs before you write a single line of code!
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: Developers can use wireframe tools for UCD such as Adobe InDesign, AXURE, and
    Balsamic to create a visual display for business workflows. This is a great capability
    because it helps streamline the *Fuzzy Frontend* of development. UCD concepts
    also dramatically reduce design time and rework that results from defects in the
    code. Defects are misunderstood or previously unidentified requirements that your
    customers felt you should have known about and implemented.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: Automated testing is a critical capability in CI/CD pipelines. Teams can use
    tools such as Leapwork ([https://www.leapwork.com/](https://www.leapwork.com/))
    to implement a low code/no-code solution for automated testing.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: VSM tools are even more vital to implement when executives mandate the implementation
    of DevOps capabilities. Everything tends to be rushed in such situations. After
    all, the mandate probably came down because the organization is failing to deliver
    sufficient value to its customers.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: But how much worse will things be if the organization fails in its DevOps mandate?
    Modern VSM tools provide the metrics the software delivery teams need to improve
    their value-based deliveries and show the improvements they have made. In short,
    VSM tools help identify bottlenecks, orchestrate work, and improve pipeline efficiencies.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: But there are still areas of the software delivery pipeline that are difficult
    to integrate, automate, and orchestrate. This is the topic of the next section.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with creative versus repeatable pipeline activities
  id: totrans-367
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the challenges with improving value stream deliveries is the challenges
    associated with automating or even estimating the scope of work involved in concept
    ideation, requirements definition, and analysis. In software development, we refer
    to this stage as the **Fuzzy Frontend**.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: This term was originally coined by Peter Koen, a professor at the *Stevens Institute
    of Technology*. It refers to the value stream activities associated with creating
    new product ideas and concepts that need to be analyzed to determine customer
    fit and commercial viability.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: Some of these activities are controlled by the product management or product
    owner function. This is because they alone have the responsibility of deciding
    what goes into a product and what does not. But the development teams are also
    involved as they must assess the difficulty and time required to implement each
    new requirement. In Agile, we refer to assessing requirements as **Product Backlog
    Refinement**.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: The folks at HCL Software were kind enough to allow me to highlight their view
    of how the creative aspects of the Fuzzy Frontend fit in the overall software
    delivery pipeline, as shown in *Figure 15.1*.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: An important feature of this software delivery pipeline diagram is highlighting
    the *creative versus repeatable* aspects of software development, which they break
    out as Agile versus DevOps practices.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: Everything to the left of the vertical line is the fuzzy frontend, where creativity
    is a defining effort that is difficult to estimate. However, everything to the
    right is the commit and can be automated. So, everything to the left takes creativity,
    thought, design thinking, and so on, while everything to the right becomes part
    of an automated software delivery factory!
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.1 – Dealing with creative versus repeatable DevOps pipeline activities'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17087_Figure_15.1.jpg)'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: Figure 15.1 – Dealing with creative versus repeatable DevOps pipeline activities
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: 'Al Wagner articulates a DevOps implementation scenario as involving three phases,
    which he refers to as Day Zero, Day One, and Day Two. Let''s understand each of
    them:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: '**Day Zero** (to the left of code commit): Agile implementations of Agile practices
    governing Sprint planning, Sprint execution, releases, commits, and so on. This
    is the creative, Fuzzy Frontend side of development that is difficult to estimate
    and automate. Yet, these are the activities that keep our focus on the customer.'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Day One** (to the right of code commit): This involves integrating, automating,
    and orchestrating DevOps pipeline activities. Here, the IID model is taken and
    made Lean through integration and automation toolchain capabilities.'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Day Two**: This is the state we want to reach. That''s the application of
    VSM – to focus on meeting business needs – which means we need to have a holistic
    view of both the fuzzy frontend (Agile) and the CI/CD automation processes. It
    involves constantly monitoring, looking across teams, and constantly improving.
    Use experimentation to find better ways of doing things. Maybe use AI to assess
    areas and methods for improvement. Always use lead and cycle times as the actual
    indicators of improvement.'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can also use VSM techniques across all organizational value streams to determine
    the high priority/highest value improvement activities that can benefit from DevOp's
    rapid and efficient software delivery capabilities. The idea is that we can spend
    a lot of time, money, and resources building our DevOps pipelines, only not to
    see any real impact on the business if those new capabilities are not applied
    to the organization's most impactful value stream improvement initiatives. For
    example, we can use OKRs and **Weighted Shortest Job First** (**WSJF**) (a method
    used in the **Scaled Agile Framework** (**SAFe**)) to help teams prioritize a
    list of initiatives.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you have heard differing views on the potential pitfalls of DevOps
    implementations and recommendations on how to address the issues you might face.
    You've also learned about four different DevOps platform implementation strategies
    and the pros and cons of each. You then learned about the best approach to take
    when the organization's executive mandates the use of DevOps, and you've also
    learned why it is easier to automate the backend of the software delivery pipeline
    but not the fuzzy frontend. Now, we are going to dive into how to address a host
    of potential DevOps platform implementation issues.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: Addressing the pitfalls of DevOps
  id: totrans-383
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn strategies for addressing 18 scenarios that
    can present a challenge to your DevOps implementation plans. The list is not meant
    to be an all-inclusive discussion on situations you may face, but it is reasonably
    comprehensive. As you read through these subsections, begin to think about how
    you can apply the VSM concepts, methods, and tools you've learned about to discover
    issues and their root causes, as well as how to improve them.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin by recognizing and avoiding the consequences of Conway's Law.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding the pitfalls of Conway's Law
  id: totrans-386
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In 1968, Melvin E. Conway wrote an article for the **Harvard Business Review**
    (**HBR**) titled *How Do Committees Invent*? Unfortunately, HBR rejected it on
    the grounds that he had not proved his thesis ([http://www.melconway.com/Home/Conways_Law.html](http://www.melconway.com/Home/Conways_Law.html)).
    However, Conway persisted and submitted the paper to **Datamation**, who published
    it in April 1968\. His persistence paid off, as one of his observations in the
    papers was that organizations tend to make systems (intentionally, broadly defined
    by Conway) that mirror the communications structures within the organization.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the quote, verbatim:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: 'Conway''s Law ([http://www.melconway.com/Home/Conways_Law.html](http://www.melconway.com/Home/Conways_Law.html)):'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: '"Any organization that designs a system (defined broadly) will produce a design
    whose structure is a copy of the organization''s communication structure."'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: — Melvin E. Conway
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: Though Conway made his observation years ago, it is no less relevant today,
    including its application to systems that deliver software; even modern DevOps-based
    software delivery systems. So, let's use what we've learned about lean production
    systems to understand the consequences of Conway's observation.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: Value stream management methods and tools help the organization streamline its
    value streams by eliminating waste and improving work and information flows. However,
    if the DevOps team is called to create an application that supports a critical
    business process, it would not make sense to construct its logic to mimic how
    it operates today. Instead, the business application needs to support the work
    and information flow improvements identified through a VSM initiative.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: Conway's Law also applies directly to the software delivery team as a system.
    In fact, those are the most typical use cases when describing the impact of Conway's
    Law. Put most succinctly, any software application that's constructed will have
    as many layers or modules as there are discrete organizations participating in
    its build. In effect, the software will mirror how the teams separate their activities
    and communications.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: 'AlanMacCormack, Carliss Baldwin, and John Rusnak discussed their findings relevant
    to Conway''s Law in their 2012 HBR article titled *Exploring the Duality Between
    Product and Organizational Architectures: A Test of the ''mirroring'' Hypothesis.*
    In their own words, they found the following correlation: "*The mirroring hypothesis
    predicts that these different organizational forms will produce products with
    distinctly different architectures. Specifically, loosely coupled organizations
    will develop more modular designs than tightly coupled organizations.*"'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: Modern CI/CD and DevOps-based software delivery teams employ microservices,
    containers, and APIs, all of which support loosely coupled applications. Loosely
    coupled services are reusable and interchangeable and implemented without breaking
    existing interconnections.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: Conway's Law describes the impacts organizational structures can have on software
    development. For example, large product teams that work as a disjointed collection
    of entities will create bottlenecks in the flow of their work, communications,
    and information flows. Looking at software delivery as a value stream, we know
    we need to eliminate these artificial barriers by aligning the teams horizontally
    around end-to-end value delivery flows. And we must also eliminate the waste that
    prevents continuous and synchronized flows.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a CALMS framework
  id: totrans-398
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Damon Edwards and John Willis initially coined the acronym **CAMS**, to stand
    for **Culture**, **Automation**, **Measurement** and **Sharing**. Later, Jez Humble
    added an L, to include Lean in the acronym, to make it **CALMS**. The **CALMS
    Framework** is a conceptual model for integrating DevOps teams, their activities,
    and the employment of their systems, tools, and toolchains. The elements within
    the CALMS acronym are further defined as follows:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: '**Culture**: Requires a switch from command and control and hierarchical organizational
    business structures to collaborative work environments with shared responsibilities
    and organization around horizontal flows to support value-based deliveries.'
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A DevOps culture welcomes change, uses feedback and information (metrics) to
    improve continuously, and is accountable for their work as a team. As with Lean,
    DevOps culture pushes decision-making as much as possible to those who perform
    or are responsible for the work.
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Automation**: In DevOps, transformation includes automating manual tasks
    to the greatest extent possible. For example, recall the CI and test automation
    activities in the **Automated Delivery Pipeline** on the right of *Figure 15.1*.'
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A DevOps-based software delivery pipeline eliminates repetitive and non-value-added
    manual work. IaC and CaC capabilities produce repeatable and high-quality processes
    and reliable systems. In fact, everything as code is the mindset behind DevOps
    automation, regardless of the tools you employ. Test automation (packaging builds
    and promoting them through test environments using automated deployments) implements
    CD capabilities.
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Lean**: This involves making continuous improvements to streamline flows
    by eliminating waste that creates delays, waiting, and excess WIP. Lean seeks
    to achieve FLOW – smoothly transitioning work from one *work center* to the next
    – in the shortest amount of time, ideally with as few queues/buffers as possible.
    This is what this book is fundamentally about.'
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Measurement**: We can''t fix something if we don''t know what the problems
    are, their root causes, and what things most impact our ability to deliver value
    rapidly, frequently, and with high quality. For that, we need metrics and analytics.
    Identify your most critical Lean metrics, starting with the DORA Four: lead time
    (for change), change frequency, change failure rate, and **mean time to repair**
    (**MTTR**).'
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sharing**: DevOps is fundamentally a collaboration strategy that aligns Dev
    and Ops activities. To be successful, Dev and Ops cannot be stovepipe silos. Instead,
    they must find common ground, and that common ground forms around delivering and
    sustaining software products customers will value. But collaboration is not enough;
    they must also share responsibilities for the success of the product across its
    life cycle.'
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deciding on the appropriate DevOps platform strategy
  id: totrans-407
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Earlier in this chapter, you learned about four DevOps implementation options:
    build your own DevOps platform, purchase a DaaS license, use VSM tools, and build
    software factories. We do not need to cover the pros and cons of those four options
    again. However, we do need to address a few other issues, such as the use of containers
    and hybrid-cloud environments.'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: A container is a type of software that packages code and all its dependencies
    to deploy applications quickly and reliably, regardless of the target computing
    environment. However, if your organization is not operating at a very large scale,
    the use of container orchestration tools such as Kubernetes, Mesos, and others
    may be overkill. By a very large scale, we're talking about organizations the
    size of Google, Amazon, Netflix, most branches of government, and other businesses
    with huge volumes of constantly evolving internet-based services.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: If your staff has no familiarity with the container orchestration tool, it can
    actually end up being a value-losing prospect. For example, even skilled developers
    find Kubernetes challenging to learn. Therefore, **Elastic Container Services**
    (**ECS**) or self-hosted Docker Swarm Mode are more appropriate for most organizations.
    Or even the use of traditional **virtual machine** (**VM**) environments may be
    sufficient to support your scaling needs. As a side note, even Kubernetes (also
    known as K8s) must run on a VM.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: If you are committed to using containers, and you have a small shop that somehow
    managed to hire a couple of super K8s ninjas, they could make it work. But having
    that kind of talent on-hand in a small dev shop is rare and, likely, not cost-effective
    for the organization's application deployment needs.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: If your team has plans to operate in one of the cloud service providers (AWS,
    Azure, GCP, and so on) but has no experience with those tools, it may make sense
    to take a **hybrid-cloud** approach initially. In other words, use the network
    and computing resources you have on-premises and slowly migrate to the cloud.
    This slow-roll strategy makes migration safer until your team formally decides
    they are ready to cut over to a 100% cloud architecture.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: The hybrid-cloud approach does still require investing in new skills. For example,
    your developers need to learn the APIs and eccentricities of the selected cloud
    providers (that is, JSON or REST API syntax, Bash or Python for scripting in IaC
    applications, and automation servers such as Jenkins and Bamboo, which require
    specialized scripting knowledge).
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of which DevOps platform implementation scenario you choose, the
    most effective or state-of-the-art tools may be too difficult to maintain if you
    don't keep a well-staffed team of experts on hand. Also, with more than 400 tools
    categorized as DevOps component solutions, which ones will you use, and why? Finally,
    what governance programs do you need to implement to evaluate the tools, handle
    licensing issues, and make informed budgeting decisions?
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: Finally, if you face a talent shortage in your workplace, your selection options
    will be constrained by your team's collective skills and experiences. So, how
    can you use the techniques of VSM to help your organization work through these
    issues? Once you have selected a DevOps implementation strategy, how can you use
    the metrics to make continued improvements to your software delivery flows?
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding mandates
  id: totrans-416
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We spoke previously about DaaS being a viable option when the transition to
    implement DevOps-based software delivery capabilities is forced through executive
    mandates. The business drivers for such mandates may involve a burning platform
    situation or realizing that the organization is missing opportunities to compete
    effectively in our digital economy.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of the motivation, when supporting digital transformations, architect
    your DevSecOps solutions so that VSM roadmaps begin with your customer's current
    workflows and methods. Ripping away a development team's current practices and
    mandating a radically different one in short order will cause unexpected costs,
    reduce throughput, and lower team morale.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: The bottom line is that people need to buy into change; it can't be mandated.
    However, suppose you encourage your Dev and Ops team members to participate in
    VSM value stream mapping and use a Kaizen-based approach to making lean-oriented
    improvements. In that case, those team members are more likely to buy into whatever
    change scenarios have been identified and help in the transitions.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding wasted time
  id: totrans-420
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Lean is fundamentally about eliminating waste, including those activities that
    take time away from our efforts to deliver customer-centric value. Some of the
    biggest time wasters are meetings instead of work. Yes, we must stay informed,
    but your organization's leaders must constantly ask whether specific meetings
    are essential. Are there better ways to keep people informed? And, if a meeting
    is necessary, they need to ask who really needs to attend.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: Keep your daily standup meetings brief and laser-focused on identifying work
    that's been accomplished, specific issues or impediments, and determining action
    items. There's a reason they are called **Standing meetings**. It takes issues
    offline with only the appropriate people participating. In other words, you should
    conduct separate meetings for issue resolution.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: Avoid long DevOps planning and implementation meetings. Big meetings have become
    popular, especially in SAFe with its large training classes and **program increments**
    (**PIs**). Large meetings work when they are relevant, informative, and engaging.
    But large meetings never work for problem solving activities unless you can logically
    break the group into small teams, and then bring the groups back together to share
    their findings.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: Whatever we do, we must ask ourselves, does this meeting make our team Leaner
    and more Agile? If you cannot precisely define a customer-oriented deliverable
    output for the meeting, chances are the meeting is not necessary. A common question
    to ask is whether your customer would see value in paying for the meeting – because
    that is the end result of every meeting you hold. In other words, your customers
    ultimately pay for those meetings through the price of your products and services.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: Always look at meetings from a value-added perspective, just like you now know
    how to do with any other value stream activity. Ultimately, your meetings serve
    one purpose – to improve organizational value stream deliveries. Otherwise, they
    become a form of waste from a Lean-oriented perspective.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: Eliminating silos and increasing cross-functional team collaboration
  id: totrans-426
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We've addressed this subject multiple times throughout this book. But fundamentally,
    this is what DevOps is about. Instead of having development and operations teams
    working in silos, we bring them together to collaborate and improve software value
    delivery.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: But the term DevOps is actually limiting from a value-added perspective. This
    book mentioned DevSecOps, which includes collaborating with the security department
    to make our networks and applications safe. However, it's becoming more challenging
    in a digital economy to separate the work that's performed in other organizational
    and development value streams from the software delivery value streams. So, I
    would encourage you to use the term **BusDevSecOps** when referring to VSM initiatives
    operating as strategic transformations to compete in our digital economy.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: The BusDevSecOps approach encourages cross-functional team collaborations to
    break down the hierarchical silos in the functional organizational model. The
    goal of BusDevSecOps is to promote the development of horizontal work, material,
    and information flows to improve the delivery of business value.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose there is one important lesson we''ve learned in Agile: the volume of
    people is not a primary indicator of future success and may instead be a source
    of failure due to the increasing interconnections that come with scale. Instead,
    people work most efficiently in small teams.'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: Scaling is accomplished through various team-of-team concepts but best achieved
    when the teams integrate value streams to support the flow of work. In the end,
    the diversity of skills, relevant experience, and cross-team collaborations are
    what contribute most to an organization's success.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: Upskilling becomes critical
  id: totrans-432
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: VSM employs methods, tools, and metrics to improve an organization's value delivery
    capabilities continuously. We spoke in the previous subsection about the need
    to have a diverse set of skills in small teams to accomplish all the work that's
    been assigned. Agile and Lean both employ the concepts of putting all the necessary
    skills into small, self-directed teams.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: Ideally, individual team members have multiple skills to provide more flexibility
    and fault tolerance. Still, those teams cannot continuously improve the way they
    work unless they are also continuously learning. Therefore, time and resources
    need to be made available for this, and the executives must instill the notion
    of continuous learning as part of the organization's desired culture.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: Implementing pre-production testing
  id: totrans-435
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fundamentally, CI/CD is a sequential flow of work activities, from ideation
    through delivery to customers. Modern software engineering practices that instill
    CaC, IaC, and test automation make it practical to streamline these activities
    with minimal, if any, human intervention.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: As a result, it's possible to accelerate software delivery cycles by running
    CI and CD practices straight into production. However, it's usually better to
    build the CI/CD automation sequence but implement a pre-production stage before
    release. This approach allows application releases to be monitored in production-like
    environments before allowing the product to go to the customer. The reason for
    this is that it's better to find configuration problems in a pre-production environment
    than to have customers find it and having to roll back the release.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: Here, again, the data capture and analytics capabilities of modern VSM tools
    make it easier to analyze and improve application performance in the pre-production
    environment, before allowing it to be released into a production environment.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: Separating DevOps engineering from DevOps as a practice
  id: totrans-439
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DevOps engineers have the responsibility of helping install the integration,
    automation, and orchestration capabilities across CI/CD and DevOps pipelines.
    However, within those pipelines, the roles of developers and operations staff
    persist.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: Now, we know that we cannot allow the folks to operate as siloed functions.
    So, instead, we need Dev and Ops to collaborate to break down the barriers that
    would otherwise reduce the organization's ability to deliver high-quality products
    rapidly and frequently, and minimize the potential for failed or suboptimal production
    releases.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: In this context, DevOps engineering helps build automated pipeline capabilities.
    Still, DevOps, as a practice, is a strategy that brings Dev and Ops functions
    together to solve product delivery issues, both before and after each product
    release. Both capabilities are necessary to accelerate and improve value delivery.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: Allowing flexibility in DevOps policies and procedures
  id: totrans-443
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Large enterprises have many value streams and often many products with unique
    value propositions. Therefore, IT must offer flexibility to address their customer's
    needs and ensure they are in tune with the delivery capabilities that bring competitive
    advantage for each product line. Moreover, requirements, practices, and technologies
    change over time. What works well today may not tomorrow. And we can always improve.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, we discussed the importance of establishing a COE to
    develop governance policies around tools and practices during the initial prototype
    engagements, oversee the maturity of an organization's DevOps practices, and provide
    guidance to new teams and existing DevOps teams. The learning curve to acquire
    these DevOps skills and capabilities is quite steep, and the CoE reduces the impact
    of the organization's transitions.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: Still, the CoE cannot be directive in nature. They fulfill mentoring, coaching,
    and servant leadership roles. They can help DevOps teams situationally analyze
    alternatives when the standard practices fall short in meeting internal and external
    customer needs. They also operate within the CALMS framework to assist the DevOps
    teams through their transformations and ongoing improvement initiatives. The role
    of the CoE is not to implement a command and control oversight mechanism that
    gets in the way of making informed and experiential improvements. The purpose
    of the CoE is to provide leadership, guidance, and support, but not through directives.
    They are servant leaders.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's move on and talk about how quality can be improved even while increasing
    delivery velocity.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: Improving velocity with quality
  id: totrans-448
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A common term used among DevOps-oriented Agilists is **acceleration**. The idea
    behind the term is that the Lean flows of DevOps help us accelerate the delivery
    of software value. But the term **value** in that statement is just as significant
    as the term **accelerate**. Increased software delivery speed without improvements
    to quality only means delivering the wrong product more quickly and efficiently.
    Still, it's the wrong product – which means we might be going toward bankruptcy
    more quickly.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: This concept applies across the software delivery value stream. When we decide
    to accelerate flow without putting equal consideration into improving the quality
    of the delivery, we create an opportunity for increased waste and failures.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: CI with automated testing is a critical enabler for improving software quality.
    But so too are the fuzzy frontend activities associated with gathering requirements,
    writing associated acceptance criteria, and defining the tests that confirm the
    completeness or **Definition of Done** for each constructed work item. We can't
    get the result right if we don't start right. Defects result from not getting
    the frontend right, which kills any velocity we might have had.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: Building DevOps teams from within
  id: totrans-452
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We've noted that DevOps is a skillset that's not developed overnight. However,
    hiring dedicated resources to create a separate DevOps team is not the best way
    forward. Building dedicated DevOps teams from scratch will only create new siloes
    operating across your horizontal value stream.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: Recall the issues of implementing horizontal value stream flows across the vertical
    functional silos in our discussions in [*Chapter 13*](B17087_13_Final_PD_epub.xhtml#_idTextAnchor373),
    *Introducing the VSM-DevOps Practice Leaders*, in the *Defining values streams
    in DA FLEX* section. Refer to *Figure 13.3*. Instead, a better approach is to
    develop teams around value streams. This includes your DevOps engineers, plus
    existing **quality assurance** (**QA**), operations, and development team members.
    This approach brings your existing people and processes into the work of organizing
    around value. There's no need to replace them. Instead, we need to bring them
    along.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: Start with the people who enjoy being innovators and early adopters. Help them
    be successful and build on their success to establish the core foundations of
    your enterprise DevOps tools, policies, and procedures. Then, use the experience
    and success of those teams to bring in the early majority and, ultimately, the
    laggards.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: This process does not have to take forever. However, large organizations with
    multiple product lines and multiple Dev and Ops teams can expect a multi-year
    journey. Therefore, a 3-year timeline to implement an organizational transformation
    on this scale is not unrealistic.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: Automating database builds
  id: totrans-457
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Say what!? When building CI/CD pipelines, we are used to thinking about automating
    the execution of software builds, the standup and configuration of infrastructures
    for testing, and then executing the tests. However, we don't often think about
    how our application databases fit into these scenarios.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: In CI, we pull a batch of files from specific branches within our source code
    repository and then allow the configuration scripts to execute the build and integration
    test process. The problem is that database code (stateful, order-specific, additive
    database structures) does not lend itself to merging code across branches. Ideally,
    database changes get merged into your batches before they are retrieved for processing.
    Also, database changes must be handled serially, and the order matters.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: Data snapshots created in separate Dev environments will drift from each other
    over time, making it challenging to sync data for each build. Therefore, someone
    needs to be responsible for automating the databases alongside the application
    automation configurations.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining incident handling procedures
  id: totrans-461
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: No matter how much time and effort we devote to building our automation scripts,
    something will inevitably go wrong. The purpose of our Agile retrospectives is
    to blamelessly review issues that occur and identify ways to avoid those failures
    in the future. And, when the failures are not entirely avoidable, we need to make
    sure we improve and document our recovery procedures.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: The DevOps team needs to maintain a rigorous incident handling procedure to
    document how the configuration, testing, and deployment failures are handled.
    The best place to put this information is in the runbook documentation, which
    may be maintained in a source code repository such as Git or GitHub.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: Integrating security with DevOps
  id: totrans-464
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The integration of security with DevOps is so important that many organizations
    refer to their automated software delivery pipelines as DevSecOps. Unfortunately,
    security is another potential silo within the IT organization. And, just as is
    true with the operations team, security folks tend to be risk-averse and may therefore
    be viewed as a bottleneck in the acceleration of software delivery.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
- en: However, a bigger mistake is to ignore or go around the security function to
    avoid delays. In the past year, while this book was written, we have seen first-hand
    the negative consequences of not paying attention to security. For example, the
    ransomware hack of the Colonial Pipeline Company shut down 45% of the oil deliveries
    to the East Coast of the United States for nearly a week. Another well-publicized
    event with potentially catastrophic consequences is the malware attached by hackers
    to a software update from SolarWinds. The malware allowed the hackers to monitor
    the computer networks of nearly 18,000 SolarWinds customers in both the government
    and the private sector and over four months.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: Gaining knowledge of DevOps
  id: totrans-467
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It should seem obvious that having knowledge of DevOps is a requirement before
    initiating a DevOps mandate. But, unfortunately, it's much easier to understand
    the potential benefits of DevOps than it is to understand the issues involved
    with implementing DevOps on an enterprise scale.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: It goes back to that statement made by my former Navy track coach, Al Cantello,
    about our wanting instant gratification. By now, you should fully appreciate the
    difficulties in establishing DevOps at Scale to support a digital business transformation.
    But it's much easier to dream about a better future state and yet quite another
    thing to do the work to achieve those desired goals. So we have to put in the
    work.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: And that work has to start with the organization's executives as only they have
    the authority to drive and fund the transformation on an enterprise initiative.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: Getting fatigued while implementing DevOps
  id: totrans-471
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The IT industry undergoes constant evolution. It's hard enough for IT specialists
    to keep up, let alone the rest of the stakeholders in an organization affected
    by their activities. Moreover, the complexity of DevOps makes it especially frustrating
    to implement at an enterprise scale.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: It's easy to look at a DaaS-based DevOps platform solution and think we can
    stand up a new DevOps platform virtually instantaneously. At a limited scale,
    that's true – so long as you have the trained staff in-house who can immediately
    go to work.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: But, on a larger scale, a series of issues will quickly arise, spanning budgets,
    training, mentoring, coaching, preferred and emergent tool integrations, unique
    configurations to support legacy applications, security, compliance, licensing,
    long-term supportability and sustainability, and value stream performance improvements.
    At times, it may seem like the organization takes two steps forward, only to fall
    back a step or two while executives and other stakeholders reassess previous decisions.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: This is where value stream management comes into play. It's impossible to execute
    a game plan if you don't have one at the start. Yes, even football coaches make
    halftime adjustments. But those adjustments are tweaks to the original plans,
    and the goals and objectives remain the same.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: DevOps implementation fatigue is another reason why executive support is so
    vital to a successful outcome. The organization's chief and line of business executives
    must keep the momentum going through the hard times. Clear and continuous communication
    from the expected OKRs is one way they help drive the implementations. Other times,
    they may need to be cheerleaders and coaches. But, in any event, they need to
    be informed, involved, and committed.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: Coding secrets in source control
  id: totrans-477
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Joel Kruger mentioned this topic in his interview. Security must be a critical
    concern in all software delivery organizations. For example, DevOps-based software
    delivery systems use IaC and CaC to automate the execution of creating or updating
    the specified environments and application infrastructure configurations. But
    these configurations can be a security hole when access information is hardcoded
    into the instructions. As Joel notes, "*it's like posting your name and address
    and bank account information online*."
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: Another issue with hardcoding secrets is that each variation forces a new and
    unique configuration file to be constructed. However, instead of maintaining multiple
    copies of configuration files that do precisely the same thing, developers can
    use parameterized, reusable scripts alongside environment variables to reduce
    the sprawl.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: For example, developers might write Ansible scripts to configure a server, but
    then have 50 separate instances to deal with unique but minor variables. It's
    much better to make one configuration and parameterize it so that development
    teams can simply change the parameters that affect their configurations.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: The parameters code concept applies to configurations, human input, machine-to-machine
    interactions, web apps, and more. Everything needs to be modularized (open-ended),
    including IP addresses, hostnames, application names, resource configurations
    (CPU and RAM), default configuration files, certificates, and tokens.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: The need to audit configurations, such as in government and highly secure applications,
    can lead to hardcoding parameters and integrations within source code and tool
    scripts. However, tools such as AWS Secrets Manager, for example, allow you to
    parameterize your variable inputs but securely manage them and still allow auditing
    by authorized personnel.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: This section concludes our chapter on defining the appropriate DevOps platform
    strategy. The next chapter is the final chapter for this book, where we will take
    what we've learned to use VSM and DevOps methods and tools to help affect digital
    business transformations. But before we move on, let's summarize what you've learned
    in this chapter and check your understanding of the concepts presented.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-485
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you had the chance to hear from five industry experts on their
    views about potential DevOps implementation pitfalls and various DevOps platform
    implementation strategies. These five individuals were selected to provide as
    broad a base of hands-on experiences as possible.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: Next, you learned about four fundamental approaches to implementing DevOps platforms.
    This included building a custom DevOps platform, purchasing a cloud-based **DevOps
    as a Service** (**DaaS**) solution offering, employing VSM tools to integrate
    and orchestrate your DevOps toolchains, and building software factories by constructing
    self-service CaC, downloadable via Git or another SCM tool.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you reviewed 18 implementation scenarios that can create issues for
    your DevOps platform implementation program. As you read through these scenarios,
    you were encouraged to identify how you can leverage what you've learned about
    VSM and DevOps methods, as well as the tools to overcome these issues.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: With this information, you are now ready to learn how to employ what you've
    learned to use VSM and DevOps methods and tools to digitally transform your business,
    which is the subject of the next and last chapter in this book.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-490
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Helen Beal instructs us not to create DevOps teams. What does she think we should
    do instead?
  id: totrans-491
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scott Ambler suggests we can't limit our thinking to just Dev and Ops. What
    are the six key aspects of enterprise-class DevOps defined in PMI's DA toolkit?
  id: totrans-492
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pramod Malhotra suggests we shouldn't even consider initiating a DevOps initiative
    unless we have what?
  id: totrans-493
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Al Wagner hears one common complaint from his customers. What is that complaint?
  id: totrans-494
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Joel Kruger identified **Configuration Management** (**CM**) as the means to
    protect an organization's IT assets. While he notes CM is not a new concept, what
    is relatively new about CM practices in a CI/CD and DevOps pipeline context?
  id: totrans-495
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the four fundamental DevOps implementation approaches an organization
    might take?
  id: totrans-496
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When corporate executives mandate a rapid transition to implement DevOps, what
    is usually the best strategy?
  id: totrans-497
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Jez Humble created the CALMS framework as a conceptual model for integrating
    DevOps teams, their activities, and employing their systems, tools, and toolchains.
    What does the CALMS acronym stand for?
  id: totrans-498
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This book suggests that it's better to build your DevOps teams from within to
    support your organization's value streams. Why is that?
  id: totrans-499
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Who is ultimately responsible for addressing issues of DevOps implementation
    fatigue?
  id: totrans-500
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-501
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MacCormack, Alan, Carliss Baldwin, and John Rusnak. 2012\. *Exploring the Duality
    Between Product and Organizational Architectures: A Test of the "mirroring" Hypothesis.*
    Research Policy 41 (8) (October): 1309–1324\. doi:10.1016/j.respol.2012.04.011\.
    [https://dash.harvard.edu/bitstream/handle/1/34403525/maccormack%2Cbaldwin%2Crusnak_exploring-the-duality.pdf](https://dash.harvard.edu/bitstream/handle/1/34403525/maccormack%2Cbaldwin%2Crusnak_exploring-the-duality.pdf).
    Accessed July 12, 2021.'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
