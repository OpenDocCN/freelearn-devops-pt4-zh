- en: '*Chapter 2*: Deploying the Datadog Agent'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned that the cornerstone of a monitoring tool
    is the group of metrics that helps to check the health of the production system.
    The primary tasks of the monitoring tool are to collect metric values periodically
    as time series data and to alert on issues based on the thresholds set for each
    metric.
  prefs: []
  type: TYPE_NORMAL
- en: The common method used by monitoring tools to collect such data is to run an
    agent process close to where the software application runs, be it on a bare-metal
    server, virtual machine, or container. This would enable the monitoring agent
    to collect metric values directly by querying the software application and the
    infrastructure where it runs.
  prefs: []
  type: TYPE_NORMAL
- en: Datadog collects such data in various ways and like other monitoring tools,
    it also provides an agent. The agent gathers monitoring data from the local environment
    and uploads that to the Datadog SaaS backend in the cloud. In this chapter, we
    will learn how the Datadog Agent is configured to run in production environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Datadog Agent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Agent components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Agent as a container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying the agent – use cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced agent configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To try out the examples mentioned in this book, you need to have the following
    tools and resources:'
  prefs: []
  type: TYPE_NORMAL
- en: An Ubuntu 18.04 environment with Bash shell. The Datadog Agent can be installed
    on a variety of operating systems and Ubuntu is chosen only as a sample environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Datadog account and a user with admin-level access.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the Datadog Agent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Datadog Agent can be configured to run in multiple ways for it to monitor
    the infrastructure and the processes, including microservices in the environment
    where it runs. It can run at the host level and as a microservice and the actual
    configuration would usually depend on how the application software is deployed.
  prefs: []
  type: TYPE_NORMAL
- en: Runtime configurations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are multiple ways you can deploy the Datadog Agent in runtime environments
    to collect events and data, and such configurations depend largely on how the
    applications are deployed. For example, if all the applications run directly on
    the host, then the Datadog Agent is run directly on the host as well. Let's look
    at the common runtime configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Datadog Agent can be configured to run in three different ways locally,
    as illustrated in the diagrams shown as follows. In all the cases, the agent also
    collects data on the infrastructure health in addition to collecting application-specific
    metrics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**As a service on the host monitoring application processes**: In this case,
    the Datadog Agent service monitors one or more application processes or services
    running on the same host:![Figure 2.1 – The Datadog Agent as a service on the
    host monitoring services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '](img/Figure_2.1_B16483.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.1 – The Datadog Agent as a service on the host monitoring services
  prefs: []
  type: TYPE_NORMAL
- en: '**As a service on the Docker host monitoring application containers**: In this
    case, the software application is deployed as containers on the Docker host and
    the Datadog Agent runs directly on the host, monitoring the health of the containers
    and the application:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.2 – The Datadog Agent as a service on the host monitoring microservices'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.2_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.2 – The Datadog Agent as a service on the host monitoring microservices
  prefs: []
  type: TYPE_NORMAL
- en: '**As a container on the Docker host monitoring application containers**: In
    this configuration, both the Datadog Agent and the application are run in containers
    on the Docker host:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 2.3 – The Datadog Agent as a microservice monitoring other microservices'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.3_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.3 – The Datadog Agent as a microservice monitoring other microservices
  prefs: []
  type: TYPE_NORMAL
- en: 'A real-life configuration might be a little more nuanced, but these basic configurations
    provide core ideas on how the Datadog Agent can be deployed to collect monitoring
    data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – The Datadog Agent communicates with its SaaS backend'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.4_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.4 – The Datadog Agent communicates with its SaaS backend
  prefs: []
  type: TYPE_NORMAL
- en: In all these three configurations and their variations, the Datadog Agent should
    be able to connect to the Datadog SaaS backend through the company network and
    internet, to upload the metrics collected locally. Therefore, configuring the
    company network firewall to enable the traffic going out from the Datadog Agent
    is a prerequisite for it to be operational. While this network access is allowed
    by default in most environments, in some restrictive situations, configuring the
    network suitably is a requirement for rolling out Datadog.
  prefs: []
  type: TYPE_NORMAL
- en: In general, if the application software is deployed as microservices, it is
    better to also deploy the Datadog Agent as a microservice. Likewise, in a non-microservice
    environment, the Datadog Agent is run directly on the hosts. Maintenance tasks
    such as version upgrades are very easy if the agent is deployed as a microservice,
    which is the preferred method in a compatible environment.
  prefs: []
  type: TYPE_NORMAL
- en: Steps for installing the agent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Datadog supports a wide variety of client platforms where the agent can be run,
    such as Windows, Kubernetes, Docker, and all the popular Linux distributions,
    such as Ubuntu, CentOS, and Red Hat Enterprise Linux. As an example, we will look
    at how the agent is installed on an Ubuntu host. On other operating systems, the
    steps are similar with changes specific to platform differences accounted for.
  prefs: []
  type: TYPE_NORMAL
- en: Before an agent can be installed, you should sign up for a Datadog account.
    Datadog allows you to try out most of its features for free for a 2-week trial
    period. Once you have access to an account, you will get access to an **API key**
    for that account. When an agent is installed, the API key has to be specified
    and that's how the Datadog SaaS backend correlates the agent traffic to a customer
    account.
  prefs: []
  type: TYPE_NORMAL
- en: For the sample steps, we will use Datadog Agent 7\. Older versions are also
    supported, and version-specific steps can be found in the official documentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Linux distributions, the installation step involves just one command that
    can be executed from the command line. To obtain the command, you can follow these
    steps on the Datadog dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Integrations** main menu, and then select **Agent**:![Figure
    2.5 – Agent menu for obtaining installation steps
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_2.5_B16483.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.5 – Agent menu for obtaining installation steps
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'On the left pane, the target operating system can be selected to view the command
    that can be used to install the agent on that platform:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Target platform-specific steps for installation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.6_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.6 – Target platform-specific steps for installation
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, for Ubuntu we have a command similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Basically, this command sets two environment variables pointing to the Datadog
    Agent version to be installed and the API key, downloads the install script, and
    executes it.
  prefs: []
  type: TYPE_NORMAL
- en: Installation of the Datadog Agent directly on a host machine is as simple as
    that. We will see how it can be deployed as a container later.
  prefs: []
  type: TYPE_NORMAL
- en: Once the agent is installed successfully, it will try to connect to the Datadog
    backend. The corresponding host will be listed on the dashboard under **Infrastructure**
    | **Host Map** and **Infrastructure List** if the agent is able to connect to
    the backend. This is a method to quickly verify whether an agent is operational
    at any time.
  prefs: []
  type: TYPE_NORMAL
- en: On Linux platforms, the logs related to the installation process are available
    in the `dd_agent.log` log file, which can be found in the current directory where
    the install script is run. If the installation process fails, it will provide
    pointers on what has gone wrong. The agent log files are available under the `/var/log/datadog`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned earlier, the steps for installing the Datadog Agent on a specific
    operating system can be obtained by navigating to the **Integrations** | **Agent**
    window. The supported operating systems and platforms are listed on the left pane,
    and by clicking on the required one, you can get the steps, as shown in *Figure
    2.6* for Ubuntu.
  prefs: []
  type: TYPE_NORMAL
- en: Agent components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Datadog Agent is a service that is composed of multiple component processes
    doing specific tasks. Let's look at those in detail to understand the workings
    of the Datadog Agent.
  prefs: []
  type: TYPE_NORMAL
- en: On Ubuntu systems, the Datadog Agent service is named `datadog-agent`. The runtime
    status of this service can be checked and maintained using the system command
    service like any other service.
  prefs: []
  type: TYPE_NORMAL
- en: The `/etc/datadog-agent` directory has all the configuration files related to
    the Datadog Agent running on that machine. The YAML `/etc/datadog-agent/datadog.yaml`
    file is the main configuration file. If any change is made to this file, the Datadog
    service needs to be restarted for those changes to take effect.
  prefs: []
  type: TYPE_NORMAL
- en: The `/etc/datadog-agent/conf.d/` directory contains configuration files related
    to the integrations that are run on that host. We will see the configuration requirements
    for integrations and how they are installed in [*Chapter 9*](B16483_09_Final_VK_ePub.xhtml#_idTextAnchor261),
    *Integrating with Platform Components*, which is dedicated to discussing integrating
    Datadog with cloud platform applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three main components in the Datadog Agent service:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Collector**: As the name suggests, the Collector collects the system metrics
    every 15 seconds. The collection frequency can be different for other types of
    metric types and the Datadog documentation provides that information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Forwarder**: The metrics collected locally are sent over HTTPS to the Datadog
    backend by the Forwarder. To optimize the communication, the metrics collected
    are buffered in memory prior to shipping them to the backend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`8125` by default. StatsD is a popular interface offered by monitoring tools
    for integrating with external systems. DogStatsD is an implementation of StatsD
    by Datadog and it is available as a component of the Datadog Agent. We will see
    later in this book how StatsD can be used to implement lightweight but very effective
    integrations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Besides these three components, there are optional processes that can be started
    by specifying them in the `datadog.yaml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '**APM agent**: This process is needed to support the APM feature and it should
    be run if the APM feature is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Process agent**: To collect details on the live processes running on the
    host, this component of the Datadog Agent process needs to be enabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Agent UI**: The Datadog Agent also provides a UI component that runs directly
    on the host where the Datadog Agent is running. This is not a popular option;
    the information about a host is usually looked up on the main dashboard, which
    provides complete insight into your infrastructure and the applications running
    on it. However, it could be used for ad hoc purposes, for example, troubleshooting
    on consumer platforms such as macOS and Windows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Agent as a container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned earlier, the Datadog Agent can be installed as a container on
    a Docker host. Though the actual options might differ, the following is a sample
    command that explains how the Datadog Agent is started up as a container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The Docker image of Datadog Agent 7 is pulled from Docker Hub in this example.
  prefs: []
  type: TYPE_NORMAL
- en: When the agent is installed on the host, you have seen that `datadog.yaml` is
    used to set the configuration items. With a Docker image, that option is not directly
    available. However, any custom changes in it could be done by setting the corresponding
    environment variables. For example, in this example, `api_key` is set by passing
    the `DD_API_ KEY` environment variable. In a Kubernetes cluster, the Datadog Agent
    is installed as a DaemonSet, and that configuration will ensure that the agent
    container is deployed on all the nodes in the cluster. `DD_API_KEY` is specified
    as a Kubernetes secret. Datadog provides multiple templates for creating the Kubernetes
    manifest that can be used for deploying Datadog in your cluster. `kubectl` is
    used to configure and deploy the Datadog Agent.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the agent – use cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the beginning of this chapter, we looked at multiple runtime configurations
    possible for running the Datadog Agent. In this section, we will explore a few
    use cases in which such options are utilized.
  prefs: []
  type: TYPE_NORMAL
- en: All on the hosts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a classic configuration in which both the Datadog Agent and the application
    software run directly on the hosts. The hosts could be bare-metal or virtual machines.
    An agent will run on every host, reporting events and metrics into the Datadog
    backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'The deployment can be done using the following automated or semi-automated
    methods. In a real-life production environment, installing the Datadog Agent manually
    on hosts might be impractical or might not scale up:'
  prefs: []
  type: TYPE_NORMAL
- en: The Datadog Agent can be baked into the machine image used to boot up a bare-metal
    machine or spin up a virtual machine. For example, in AWS, the agent can be preinstalled
    and preconfigured for the target environment in the **Amazon Machine Image** (**AMI**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use an orchestration and configuration management tool such as Ansible to deploy
    the agent on multiple machines parallelly so the deployment task will scale operationally.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In a public cloud environment, the preferred method is always using a machine
    image because the hosts can be spun up and shut down on demand using features
    such as autoscaling. In such scenarios, a semi-automated method such as using
    Ansible is not viable. However, Ansible can be used to generate machine images
    and related configuration tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Agent on the host monitoring containers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Running the Datadog Agent directly on the host is simple and flexible and it
    might make sense to use that configuration for some operational requirements.
    The Datadog Agent can be deployed as discussed before, but additional configuration
    changes are needed for the agent to discover and monitor the containers running
    on the host.
  prefs: []
  type: TYPE_NORMAL
- en: The containers are ephemeral in nature and that dynamicity must be accounted
    for in monitoring as well. The Datadog Agent uses the **Autodiscovery** feature
    to identify and monitor containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to start monitoring containers running on the host, in this
    configuration, is to enable Docker integration. Though the specific steps to do
    that could be slightly different on different target operating system platforms,
    the following example of enabling it on Ubuntu 18.04 provides the general steps
    involved:'
  prefs: []
  type: TYPE_NORMAL
- en: On the Datadog UI, navigate to **Integrations** | **Integrations**, and then
    search for Docker:![Figure 2.7 – Searching for Docker integration
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_2.7_B16483.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.7 – Searching for Docker integration
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Under the Docker icon, click on the **install** link to complete the installation
    step on the backend.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To obtain the configuration steps on the host side, where the containers are
    running, click on the **configure** link on the Docker icon. That will open a
    window with all the required information, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.8 – Steps to enable Docker integration'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.8_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.8 – Steps to enable Docker integration
  prefs: []
  type: TYPE_NORMAL
- en: The steps provided in the **Configuration** tab are executed on the hosts to
    complete container monitoring on the hosts. We will see how that is done soon.
    The Docker-specific metrics that would be available through this integration are
    listed in the **Metrics** tab.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the steps to be run on each Docker host:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add user `dd-agent` to the `docker` operating system group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'There will be a sample configuration file under `/etc/datadog-agent/conf.d/docker.d/conf.yaml.example`.
    Copy or rename this file to `conf.yaml` and add the following settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart the Datadog Agent:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To verify whether the Docker integration works on a host, you can look up the
    **Containers** dashboard from the **Infrastructure** main menu, as shown in the
    following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.9 – Autodiscovery of Docker containers'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_2.9_B16483.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.9 – Autodiscovery of Docker containers
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the **Containers** dashboard, search for a specific host by entering the
    hostname in the **Filter by** field, as shown in the preceding screenshot.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: By enabling the Docker integration, Docker-specific metrics that are prefixed
    with `docker.*` are available for use. The Docker metrics can be looked up in
    the `docker.containers.running` metric is used to look up the number of containers
    running on the `i-021b5a51fbdfe237b` host when the Docker integration has been
    enabled. To do that, navigate to `docker.containers.running` in the **Graph**
    field and the hostname in the **Over** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The complete list of Docker-specific metrics are listed under the **Metrics**
    tab on the Docker integration page, as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.11 – List of Docker metrics'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/Figure_2.11_B16483.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 2.11 – List of Docker metrics
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enabling Docker integration will provide only Docker-specific metrics. The specific
    application, Redis, in this example, might be publishing metrics also. To enable
    that, you need to follow steps similar to what we saw for enabling Docker.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the host machine, the sample configuration file, `/etc/datadog-agent/conf.d/redisdb.d/conf.yaml.example`,
    can be renamed or copied to `/etc/datadog-agent/conf.d/redisdb.d/conf.yaml`, and
    then restart the Datadog Agent to complete the configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the integration works, you will be able to query for the related metrics
    in the `redis.*`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If some steps fail, you cannot readily verify the enabling of integration on
    a host using the preceding method. One way to check for that is by looking at
    the output of the Datadog Agent status by running the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the output, look for the integration of interest. In this example, we looked
    at Docker and Redis and the following mentions of those are in the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If there are issues, you will see error messages under the related sections.
  prefs: []
  type: TYPE_NORMAL
- en: The deployment strategy involves baking in the Datadog Agent and the configuration
    files relevant to your environment on a machine image, such as AMI in AWS. To
    get all the relevant metrics published to Datadog from the containers running
    on a host, a customized Datadog Agent configuration file and configuration files
    related to various integrations similar to those we have in the examples are needed.
  prefs: []
  type: TYPE_NORMAL
- en: Agent running as a container
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the preferred configuration of running the agent when the software application
    is deployed as containers. The agent could be deployed as a container on the Docker
    host or as a service in a Kubernetes cluster. We discussed earlier how the agent
    is deployed in these scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: As the Datadog Agent is deployed as a container, there is no need to include
    that in the machine image used for spinning up the Docker nodes. This adds operational
    flexibility as there would not be any need to update the machine image for rolling
    out or upgrading the Datadog Agent used.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced agent configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main Datadog agent configuration file, `datadog.yaml`, can be updated to
    meet your specific monitoring requirements. By default, only `api_key` is set
    in it. A `datadog.yaml` file used in a real-life environment would have more options
    set.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will see some of the important configuration items that are usually leveraged
    to fine-tune the monitoring infrastructure:'
  prefs: []
  type: TYPE_NORMAL
- en: '`proxy`: If the outbound traffic to the internet has to go through a proxy,
    this option needs to be configured. Typical proxy settings for `http`, `https`,
    and `no_proxy` are supported.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hostname`: If a specific hostname has to be used for reporting, it is set
    using this option. By default, the hostname is auto-detected using tools available
    at the operating system level.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tags`: A very important option that is always used to tag the metrics reported
    by the agent. Multiple key/value pairs can be specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`collect_ec2_tags`: By enabling this option, the AWS EC2 node tags can be collected
    as host tags.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`config_providers`: To enable autodiscovery of containers created from a specific
    Docker image, the related configurations must be provided here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`docker_labels_as_tags` and `docker_env_as_tags`: These configuration items
    can be used to extract Docker labels and environment variables as tags on metrics
    collected from related containers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similar tagging options are available with Kubernetes also by using `kubernetes_pod_labels_as_tags`
    and `kubernetes_pod_annotations_as_tags`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you have seen, there are multiple ways to install and configure the Datadog
    Agent, and, for someone new to Datadog, it could be daunting to determine how
    the agent can be rolled out and fine-tuned efficiently to meet the monitoring
    requirements. However, there are a few things that are obvious as best practices,
    and let''s summarize those here:'
  prefs: []
  type: TYPE_NORMAL
- en: If the agent is installed on the host, plan to include it in the machine image
    used to spin up or boot the host.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set up Ansible playbooks or similar tools to make ad hoc changes to the Datadog
    Agent on the host. This is not recommended for some complex infrastructure environments,
    especially where bare-metal servers are used, so some in-place change might be
    needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When containers are to be monitored, plan to deploy the agent also as a container.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plan to collect tags from underlying infrastructure components such as Docker
    and Kubernetes by suitably configuring the agent.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Datadog Agent can be used for monitoring both classic and microservices-based
    environments that are built on a variety of cloud platforms and operating systems.
    To collect and publish monitoring metrics into its SaaS backend, an agent needs
    to be run on the local environment. The agent could be run directly on the host
    machine, as a container on a Docker host, or as a service in a microservice orchestration
    framework such as Kubernetes. This chapter looked at various configuration options
    available for deploying the Datadog Agent and typical use cases.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at key features of the Datadog UI. Though
    most of the changes can be done using APIs, the Datadog UI is a handy tool for
    both users and administrators to get a view into Datadog's backend, especially
    the custom dashboards that provide visual insights into the state of infrastructure
    and the application software system.
  prefs: []
  type: TYPE_NORMAL
