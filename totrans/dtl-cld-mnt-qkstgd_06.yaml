- en: '*Chapter 5*: Metrics, Events, and Tags'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the first part of the book, we discussed general monitoring concepts and
    how to get started with Datadog, including installing the Agent and navigating
    the main menu options on the Datadog UI, the main interface available to the end
    users. In the first chapter, we also discussed metrics as a central concept in
    all modern monitoring applications, being used to measure the health and the state
    of software systems. Also, we looked at tags as a means to group and filter metrics
    data and other information such as events generated by the monitoring systems,
    especially Datadog.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will explore in detail how metrics and tags, two important
    constructs that Datadog heavily depends on, are implemented. Metrics are the basic
    entities that are used for reporting monitoring information in Datadog. Datadog
    also uses tags to organize metrics and other types of monitoring information such
    as events and alerts. It is important to discuss metrics and tags together as
    appropriate tagging of metrics is very important to make sense out of the large
    volume of metrics time series data that will be available in a typical Datadog
    account.
  prefs: []
  type: TYPE_NORMAL
- en: While metrics, a central concept in any monitoring system, help to measure the
    health of a system continuously, an event captures an incident that occurs in
    a system. The crashing of a process, the restarting of a service, and the reallocation
    of a container are examples of system events. A metric is measured at a specific
    time interval and there is a numeric value associated with it, but an event is
    not periodic in nature and provides only a status. Tagging can be used to organize,
    group, and search just for events that are used with metrics.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss metrics, events, and tags in detail. Specifically,
    we will cover these topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding metrics in Datadog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tagging Datadog resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining custom metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring event streams
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To try out the examples mentioned in this book, you need to have the following
    tools and resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '- A Datadog account and a user with admin-level access.'
  prefs: []
  type: TYPE_NORMAL
- en: '- A Datadog Agent running at host level or as a microservice depending on the
    example, pointing to the Datadog account.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding metrics in Datadog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The health of a software system and the infrastructure it is running on are
    defined by a set of metrics and their threshold values. For example, on the infrastructure
    side, if the CPU usage on a machine is under *70%*, it might be considered healthy
    for a specific use case. When all such metrics that are used for monitoring an
    environment report values in the normal range, the entire environment can be considered
    healthy. By setting relevant thresholds for these metrics on monitors, issues
    can be reported as alerts. Datadog provides features to define metrics-based monitors
    and alerts.
  prefs: []
  type: TYPE_NORMAL
- en: 'We saw in [*Chapter 2*](B16483_02_Final_VK_ePub.xhtml#_idTextAnchor115), *Deploying
    Datadog Agent*, and [*Chapter 3*](B16483_03_Final_VK_ePub.xhtml#_idTextAnchor139),
    *Datadog Dashboard*, that published metrics can be viewed and filtered using tags
    in **Metrics Explorer** in the Datadog UI, as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Metrics** | **Metrics Explorer** to bring up the **Metrics Explorer**
    window:![Figure 5.1 – Metrics Explorer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_5.1_B16483.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.1 – Metrics Explorer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the `docker.cpu.usage`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `docker.cpu.usage` makes the most sense for a specific container running
    on a host, unless you are interested in monitoring the average or total CPU usage
    by containers on one or more machines.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By specifying the tags host and `container_name`, you can narrow down the scope
    to a specific container easily. You can also see that a time series graph is rendered
    on the right side of the window based on the metrics and filter conditions you
    selected on the left pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding example demonstrates how metrics and tags work in tandem to draw
    insights from a vast cache of time series metrics data published to Datadog. The
    metrics as implemented in Datadog are far more elaborate than the basic concepts
    we discussed in [*Chapter 1*](B16483_01_Final_VK_ePub.xhtml#_idTextAnchor014),
    *Introduction to Monitoring*; let's look at some of the concepts related to metrics
    as they are defined in Datadog.
  prefs: []
  type: TYPE_NORMAL
- en: Metric data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A metric data value is a measure of a metric at a point in time. For example,
    the `system.memory.free` metric tracks the free memory available on a host. Datadog
    measures that metric and reports the value periodically, and that value is the
    metric data value. A series of such measurements will generate a time series data
    stream, as seen plotted in the example in *Figure 5.1*.
  prefs: []
  type: TYPE_NORMAL
- en: Flush time interval
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Datadog processes values received for a metric during this time window and
    processes them based on the metric type.
  prefs: []
  type: TYPE_NORMAL
- en: Metric type
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The main metric types are count, rate, and gauge, and they differ in terms
    of how metric data points are processed to publish as metric values:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Count**: The metric data received during the flush time interval is added
    up to be returned as a metric value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rate**: The total of metric data received during the flush time interval
    is divided by the number of seconds in the interval to be returned as a metric
    value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gauge**: The latest value received during the flush time interval is returned
    as the metric value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metric unit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A metric type is a group of similar measurement units. For example, the bytes
    group is a type of storage and memory measurement and it consists of units such
    as bit, byte, kibibyte, mebibyte, gibibyte, and so on. The time group consists
    of units from a nanosecond to a week. A full list of metric units is available
    in the Datadog documentation ([https://docs.datadoghq.com/developers/metrics/units/](https://docs.datadoghq.com/developers/metrics/units/))
    for reference.
  prefs: []
  type: TYPE_NORMAL
- en: Query
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A query returns values from a time series metric dataset, for the given filter
    conditions and a time window. For example, the time series data related to the
    `system.memory.free` metric will be reported for all the machines where the Datadog
    Agent runs.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to monitor the metric only for a specific host during the last one
    hour, the Datadog-defined `host` tag can be used to narrow down the machine to
    a specific host, and you can also specify a time range. The ways to specify the
    query parameters would depend on the interface that you would use to run the query.
    For example, you have seen how a query works in the **Metrics Explorer** window
    on the Datadog dashboard where those parameters are specified visually.
  prefs: []
  type: TYPE_NORMAL
- en: 'Datadog identifies the following parts in a query:'
  prefs: []
  type: TYPE_NORMAL
- en: '`host` tag set the scope to a single host.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`system.disk.free` would have more than one time series dataset for the same
    host, as one would be generated for each disk, and typically there would be multiple
    disks on a host. Assume that you are interested in monitoring the total disk space
    available on all the web hosts. If those hosts are tagged as web hosts using a
    custom tag such as `host_type` having the value `web`, then it could be used to
    set the scope and the `host` tag could be used for grouping.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`system.cpu.*`, `system.load.*`, and `system.mem.*`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: B. `system.disk.*`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: C. `system.disk.directory.*` pattern
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: D. `system.processes.*` pattern
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The **integration** pages on the Datadog UI provide a complete list of metrics
    available through these integrations. The metadata associated with a metric can
    be viewed and some of the settings can be edited in the **Metrics Summary** window:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to **Metrics** | **Metrics Summary**, where all the metrics are listed.
    A specific metric can be searched using its name or tags associated with it. Look
    at the following screenshot for the example of searching for Redis metrics:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Searching for Redis metrics in the Metrics Summary interface'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.2_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.2 – Searching for Redis metrics in the Metrics Summary interface
  prefs: []
  type: TYPE_NORMAL
- en: 'The metadata of a specific metric can be viewed by clicking on any metric of
    interest. In the following screenshot, the summary of the `redis.mem.used` metric
    is provided:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Summary of the redis.mem.used metric'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.3_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.3 – Summary of the redis.mem.used metric
  prefs: []
  type: TYPE_NORMAL
- en: Using the **Edit** button on this window, the description and flush time interval
    of the metric can be changed. It also provides the source hosts and the tags available
    for filtering. In this section, we have seen how the ideas of metrics are implemented
    in Datadog in general and how they can be viewed on the dashboard in different
    ways. In the next section, we will discuss tags, a construct that is used with
    metrics and other resources.
  prefs: []
  type: TYPE_NORMAL
- en: Tagging Datadog resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous sections of this chapter, we have touched upon the concept of
    tags as a means of grouping and filtering metrics. While the use of tags is similar
    to that of keywords, labels, or hashtags on other systems, it is important to
    learn how tags are applied to metrics. Tags can be applied to other Datadog resources
    such as events and monitors as well. However, we will focus on how they are applied
    and used while working with metrics in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Defining tags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the main rules and best practices for defining a tag:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A tag should start with a letter and can contain the following characters:
    alphanumeric, underscores, minuses, colons, periods, and slashes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A tag should be in lowercase letters. If uppercase letters are used, they will
    be converted into lowercase. The auto-conversion of the case can create confusion,
    and so it is advisable to define tags only in lowercase.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A tag can be up to 200 characters long.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The common pattern of a tag is in `<KEY>:<VALUE>` format, which prepares a tag
    to be used in different parts of a query as we saw earlier. There are reserved
    keywords for tags, such as `host`, `process`, and `env`, that Datadog associates
    special meanings with, and their use should be in line with the related meanings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tagging methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Datadog offers multiple ways to tag metrics. However, the following two methods
    are the most common:'
  prefs: []
  type: TYPE_NORMAL
- en: From the Datadog Agent configuration file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From the configuration files of integrations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both of these methods are done at the Datadog Agent level. The tagging can also
    be done from the Datadog UI, using the Datadog API, and as part of DogStatsD integration.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Datadog Agent config file, `datadog.yml`, the config item tags can be
    used to add tags as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s an alternative way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The latter syntax is preferred in configuration files for better readability.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing host tag
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have come across the use of the system-defined `host` tag already, which
    is very useful in filtering the metrics data. It is set by default based on the
    host name of the machine where the Datadog Agent runs, but it can be customized
    by setting the `hostname` config item in `datadog.yml`.
  prefs: []
  type: TYPE_NORMAL
- en: Tagging integration metrics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An integration generates a published list of metrics and those could be tagged
    by configuring the `tags` config item for the integration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: For example, for the Redis integration, this change is done in `/etc/datadog-agent/conf.d/redisdb.d/config.yaml`.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to tags applied from the configuration files, some integrations
    also supply tags by inheriting them from the source applications and platforms.
    The best example is the extraction of AWS tags by Datadog integrations for related
    AWS services.
  prefs: []
  type: TYPE_NORMAL
- en: Tags from microservices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If the Datadog Agent is deployed in a containerized environment, tags from
    related applications such as Docker and Kubernetes are collected automatically.
    More tags can be extracted by setting the following environment variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DD_TAGS`: Host-level tags can be set using this environment variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DD_DOCKER_LABELS_AS_TAGS`: To publish Docker labels as tags.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DD_DOCKER_ENV_AS_TAGS`: To publish Docker environment variables as tags.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DD_KUBERNETES_POD_LABELS_AS_TAGS`: To publish pod labels as tags.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering using tags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a Datadog account, times series data for one metric can originate from multiple
    sources. For example, there can be multiple time series data streams for the `system.disk.free`
    metric from just one host, as that data series is generated for each disk on a
    host. Therefore, data may have to be grouped in ways that make sense in most situations,
    and we have already seen how tags are used in **Metrics Explorer** and queries
    to filter data and extract logical groups of metrics data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The use of tagging goes beyond just filtering metrics. The tags could also
    be applied to other Datadog resources for filtering and grouping, as is done with
    metrics data. The following are the main Datadog resources that could be tagged:'
  prefs: []
  type: TYPE_NORMAL
- en: Events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dashboards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Infrastructure: mainly hosts, containers and processes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The use of tags in Datadog is widespread, and the preceding list covers only
    the important resources. When the count of a specific resource type such as events
    is very large, it's impossible to trace a specific instance without the help of
    a tag. For example, the events associated with a specific type of host could be
    pulled by tagging those events suitably.
  prefs: []
  type: TYPE_NORMAL
- en: Wherever there is a need to look for a subset of information, tags are used
    as the keywords to search for related resources and metrics data. That means the
    monitoring data that has been published to Datadog must be tagged well so that
    subsets of that data can be extracted easily.
  prefs: []
  type: TYPE_NORMAL
- en: Datadog and the various third-party product integrations it provides generate
    the bulk of the metrics that we use in real life. In the next section, we will
    discuss custom metrics and how they can be published to Datadog.
  prefs: []
  type: TYPE_NORMAL
- en: Defining custom metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You have already seen that metrics are defined, and the related times series
    data is generated, by these methods:'
  prefs: []
  type: TYPE_NORMAL
- en: By enabling core infrastructure integrations with the installation of the Datadog
    Agent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By enabling platform and application integrations provided by Datadog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom tags can be associated with the preceding set of metrics by defining
    them in the relevant configuration files. Some integrations also offer to inherit
    tags from source applications and platforms.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to this group of metrics that are available out of the box or that
    can be enabled easily, there are multiple options available in Datadog to define
    custom metrics and tags. This is one of the features that makes Datadog a powerful
    monitoring platform that can be fine-tuned for your specific requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following properties need to be set for a custom metric:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: A name should not be more than 200 characters long, should begin
    with a letter, and should contain only alphanumeric characters, underscores, and
    periods. Unlike tags, metric names are case-sensitive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Value and timestamp**: The metric value is published with a timestamp.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Metric type**: As discussed earlier, the main types are count, rate, and
    gauge.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interval**: This sets the flush time interval for the metric.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tags**: The tags specifically set for this metric.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are multiple ways to submit custom metrics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Datadog Agent checks**: The Datadog Agent can be configured to run custom
    scripts as checks, and that interface can be leveraged to publish custom metrics.
    We will learn more about implementing custom checks in [*Chapter 8*](B16483_08_Final_VK_ePub.xhtml#_idTextAnchor248),
    *Integrating with Platform Components*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Datadog REST API**: Datadog resources can be viewed, created, and managed
    using the REST API Datadog provides. The custom metrics and tags can be handled
    that way as well. This is mainly useful when Datadog is not running close to a
    software system that needs to be monitored using Datadog. We will learn how to
    use the Datadog REST API in [*Chapter 9*](B16483_09_Final_VK_ePub.xhtml#_idTextAnchor261),
    *Using the Datadog REST API*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DogStatsD**: This is a Datadog implementation of the StatsD interface available
    for publishing monitoring metrics. We will discuss this more in [*Chapter 10*](B16483_10_Final_VK_ePub.xhtml#_idTextAnchor302),
    *Working with Monitoring Standards*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PowerShell**: This provides an option to submit metrics from Microsoft platforms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Datadog UI has a dashboard for the event stream, and we will see how the
    events are listed on it and what event details are published. In a large-scale
    environment, the event stream volume can be quite large, and you may have to search
    for events of interest. While events are largely informational, it might make
    sense to be notified about certain categories of events, such as the stopping
    of an important service. Events are usually generated by Datadog, but Datadog
    also offers the feature to generate custom events as an integration option.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how Datadog handles events out of the box using its event stream dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring event streams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The events generated by Datadog or posted by applications provide a log of activities
    happening in the application system in general, especially at the infrastructure
    and system level, such as one-off issues with a host or a service restarting.
    On the Datadog UI, the even stream dashboard lists the latest events and can be
    viewed as follows.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Events** menu and pick a time window in the **Show** field to
    view the events for a specific time period. The event stream dashboard would look
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – Event stream dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.4_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.4 – Event stream dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'The events listed on the event stream are classified and can be filtered on
    the dashboard as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**By source**: On the left pane of the dashboard, the **FROM** section lists
    the sources of the events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**By Priority**: On the left pane of the dashboard, the **PRIORITY** section
    lists the priorities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**By Severity**: On the left pane of the dashboard, the **STATUS**section lists
    the severity of the events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By selecting one or more event types described here, the events listed on the
    event stream dashboard can be filtered to see the specific ones you need to look
    at. The related events are aggregated if the **Aggregate related events** option
    is checked on the dashboard as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – The Aggregate related events option on the event stream dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.5_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.5 – The Aggregate related events option on the event stream dashboard
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will see how specific events can be located on the event
    stream dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Searching events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a large-scale environment where the Datadog Agent runs on several hundred
    hosts monitoring a variety of microservices and applications running on them,
    there will be scores of events published to the event stream dashboard every minute.
    In such a situation, manually looking through the event stream is not viable,
    and standard search methods have to be used to locate events of interest. Datadog
    provides multiple options for searching and filtering to get the correct set of
    events.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we have seen in the previous section, you can specify a time window in the
    **Show** field to look at events only from a specific time period. As shown in
    the following screenshot, the time window can be specified in a variety of ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Time window options to filter events'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.6_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.6 – Time window options to filter events
  prefs: []
  type: TYPE_NORMAL
- en: 'The time can be specified as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: By selecting fixed buckets of minutes, hours, or days in the past.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By entering custom time windows as shown in the screenshot; a Unix timestamp
    can be used with this option.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There is a full text search option available, which you can use to look for
    events using keywords. In the following example, the `ntp` keyword is used to
    list only the related events:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – Searching events using a keyword'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.7_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.7 – Searching events using a keyword
  prefs: []
  type: TYPE_NORMAL
- en: 'A keyword search can be saved for future use. Click on the downward arrow in
    the keyword search field to view the save option, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.8 – Saving a keyword search of events'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.8_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.8 – Saving a keyword search of events
  prefs: []
  type: TYPE_NORMAL
- en: 'While the last example does a simple, full text search, the Datadog query language
    can be used to do more complex searches, and some of the important constructs
    that you can use are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sources`:`<source_name_1>`, `<source_name_2>`: In this case, the search will
    be run for events from `source_name_1` or `source_name_2`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similarly, you can specify tags, hosts, status (error, warning, or success),
    and priority (low or normal) as the filters in the query.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`OR`, `AND`, and `NOT` Boolean operators can be used to combine basic search
    conditions. See the following examples:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ntp` `OR` `nagios` will search for either one of the `ntp` and `nagios` keywords.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`tags:region:us-west-2 AND environment:production` will look for events tagged
    with the key values `region:us-west-2` and `environment:production`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`* NOT "ntp"` will list all the events that do not contain the `ntp` keyword.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now let's see how we can get notified of events.
  prefs: []
  type: TYPE_NORMAL
- en: Notifications for events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The normal way to monitor events is to search using the event stream dashboard
    if some issue occurs in the infrastructure or application system, looking for
    some clues as to the root cause. Events are not very useful in terms of proactive
    monitoring because you get to know about the issue only after the issue happens.
    However, notifying others about some of the events might be useful. Also, filing
    a support ticket based on an event is possible, by notifying the Datadog support.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the **Add comment** link available with the event to send a notification
    as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.9 – Notifications for events'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.9_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.9 – Notifications for events
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, an event notification can be sent to individual emails, **all**,
    and **Datadog Support**. All the Datadog users in the organization will be notified
    of the event if **all** is chosen. A support ticket will be created if **Datadog
    Support** is selected.
  prefs: []
  type: TYPE_NORMAL
- en: 'The event stream is integrated with the following integrations, using which
    the event details can be forwarded to the related tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@slack-<slack_account>-<slack-channel>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@webhook_name`. (`webhook_name` must be configured in Datadog for this to
    work, and we will see how to do this in [*Chapter 9*](B16483_09_Final_VK_ePub.xhtml#_idTextAnchor261),
    *Using the Datadog REST API*.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@pagerduty`, the event details can be forwarded as an alert to **PagerDuty**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we will see how custom events are created and added to
    the event stream.
  prefs: []
  type: TYPE_NORMAL
- en: Generating events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thus far, we have discussed how to view, search, and escalate events that are
    generated by Datadog. As with metrics and tags, custom events can be created as
    well in Datadog. The primary use of this feature is to use the event stream dashboard
    as a communication hub for **Site Reliability Engineering** (**SRE**) and production
    engineering teams.
  prefs: []
  type: TYPE_NORMAL
- en: A common scenario is deploying to an environment monitored by Datadog. During
    deployment, multiple services and processes will be restarted, and there will
    be a large volume of events. Posting a deployment as an event with details might
    help to alleviate the concerns of any other teams monitoring the environment but
    not actively participating in the deployment process.
  prefs: []
  type: TYPE_NORMAL
- en: 'An event can be posted from the event stream dashboard as a status update.
    Look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.10 – Posting a custom event'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_5.10_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.10 – Posting a custom event
  prefs: []
  type: TYPE_NORMAL
- en: As with creating and managing other Datadog resources, events can be generated
    programmatically using the Datadog API. This enables standalone programs to post
    into the event stream. In the previous example, the status update was posted directly
    on the event stream dashboard. In a more automated environment, the deployment
    orchestration process, a **Jenkins job**, or an **Ansible playbook** could do
    the same using the API.
  prefs: []
  type: TYPE_NORMAL
- en: 'The API to post an event is at [https://api.datadoghq.com/api/v1/events](https://api.datadoghq.com/api/v1/events),
    and the main attributes in its payload are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`alert_type`: Values can be `error`, `warning`, `info`, or `success`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`priority`: Values can be `normal` or `low`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`source_type_name`: The list of sources is available at [https://docs.datadoghq.com/integrations/faq/list-of-api-source-attribute-value/](https://docs.datadoghq.com/integrations/faq/list-of-api-source-attribute-value/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tags`: Tags applied to the event for filtering and grouping.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text`: Body of the event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`title`: Title of the event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will learn how to use the Datadog API in detail in [*Chapter 9*](B16483_09_Final_VK_ePub.xhtml#_idTextAnchor261),
    *Using the Datadog REST API*. Posting an event to the event stream using the Datadog
    API will be done there as an example.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's look at the best practices around defining and using metrics, events,
    and tags in Datadog.
  prefs: []
  type: TYPE_NORMAL
- en: Best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the best practices related to creating and maintaining metrics
    and tags:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that all the tags available through various integrations are enabled.
    This mainly involves inheriting tags from source platforms such as public cloud
    services, Docker, and Kubernetes. When complex applications are part of your environment,
    it is better to have more tags to improve traceability.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add more tags from the Datadog Agent and integrations to partition your metrics
    data easily and to track the environment, services, and owners efficiently.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have a namespace schema for your custom metrics using periods so that they can
    be grouped and located easily – for example, `mycompany.app1.role1.*`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Format the names and values of metrics and tags according to the guidelines.
    Datadog silently makes changes to names and values if their format is not compliant.
    Such altered names could cause confusion on the ground as they will be different
    from the expected values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If some incident happens and not much information is available immediately from
    monitoring alerts, query the event stream for clues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Post custom messages from the dashboard that might help with some ongoing activity,
    such as a deployment, especially if you operate in a distributed team environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consider posting events to the event stream from automation processes if they
    will have some impact on the resources that Datadog monitors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the notification option to raise tickets with Datadog Support if an event
    warrants any digging by them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Metrics are central to a modern monitoring system and Datadog is no exception.
    Datadog offers a rich set of options to generate and use metrics. Though tags
    have general-purpose uses across all Datadog resources, their main use is to group
    and filter massive amounts of metrics data.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we learned how metrics and tags are defined and how metrics
    and other resources are grouped and searched for using tags. Besides Datadog-defined
    metrics and tags, there are multiple ways to add custom metrics and tags, and
    some of those methods were discussed in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: An event is an activity in the infrastructure or in the application system that
    Datadog monitors. Datadog captures and lists such events on the event stream dashboard.
    Events can be searched for in multiple ways, including by using keywords and tags.
    Events can be forwarded to different channels such as email, Slack, and PagerDuty.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how monitoring events are managed in Datadog.
    We will also learn how they are searched for and how custom events can be published.
  prefs: []
  type: TYPE_NORMAL
