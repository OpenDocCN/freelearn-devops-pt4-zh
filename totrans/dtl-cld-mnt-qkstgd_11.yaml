- en: '*Chapter 9*: Using the Datadog REST API'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned how platform components, mainly made up
    of third-party software products and cloud services, are integrated with Datadog,
    by way of Datadog-supported integrations and custom checks. The main objective
    of those integrations is to monitor third-party tools used in the application
    stacks from Datadog. The integration with Datadog can be done in the other direction
    also. Tools and scripts can use Datadog HTTP REST APIs to access the Datadog platform
    programmatically. For example, if you need to post a metric value or an event
    to Datadog from an application, that can be done using the related REST APIs.
  prefs: []
  type: TYPE_NORMAL
- en: The Datadog REST API set is a comprehensive programmatic interface to access
    the Datadog monitoring platform. The APIs can be used to post custom metrics,
    create monitors and dashboards, tag various resources, manage logs, and create
    and manage users and roles. Essentially, anything that you can perform from the
    Datadog UI and by making configuration changes at the agent level.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn the basics of using Datadog APIs from command-line
    tools and programming languages, with the help of tutorials. Specifically, the
    following topics are covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Scripting Datadog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing Datadog APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Programming with Datadog APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To try out the examples in this book, you need to have the following tools
    installed and resources available:'
  prefs: []
  type: TYPE_NORMAL
- en: A Datadog account with an API key provisioned
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: style, check throughout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Python 2.7** or **Python 3.8** or higher'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scripting Datadog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn how to make calls to Datadog APIs using the
    curl command-line tool and how to use the APIs from Python. An important prerequisite
    to access the Datadog platform programmatically is to set up user access for that
    purpose. While authentication is done with the use of dedicated user credentials
    or SAML when the Datadog UI is accessed, a pair of application and API keys is
    used with Datadog APIs. Let's see how those keys are set up.
  prefs: []
  type: TYPE_NORMAL
- en: 'By navigating to **Team** | **Applications Keys**, a new application key pair
    can be created on the **Application Keys** page as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 – Generating application keys'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.1_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.1 – Generating application keys
  prefs: []
  type: TYPE_NORMAL
- en: 'A new key can be created by clicking on the **New Key** button and providing
    it with a new name. The newly generated key will be listed on the same **Application
    Keys** page. It can be viewed and copied to the clipboard by clicking on a specific
    key listed in the preceding table, as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 – Viewing an application key'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.2_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.2 – Viewing an application key
  prefs: []
  type: TYPE_NORMAL
- en: 'By navigating to **Integrations** | **APIs** on the Datadog dashboard, you
    can get to the APIs page where the API key can be created or an existing one can
    be copied, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.3 API Keys page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.3_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.3 API Keys page
  prefs: []
  type: TYPE_NORMAL
- en: By providing a name in the **New API key** field and clicking on the **Create
    API Key** button, a new key can be generated. The generated keys are listed as
    shown in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: An application key is unique to the Datadog organization where it is set up.
    The API key is tied to the Datadog user and so it inherits the related privileges.
    For authenticating from a program, an application key and an API key must be used,
    identifying the organization and the user. We will see how an application and
    API key pair is used in the sample programs, further illustrating the use of keys.
  prefs: []
  type: TYPE_NORMAL
- en: The Datadog APIs can be called from a command-line tool such as curl as part
    of an ad hoc shell script or such calls can be invoked using a programming language
    such as **'Python', 'Go', and 'Java'***.* In this section, you will learn how
    API calls are made from curl and Python.
  prefs: []
  type: TYPE_NORMAL
- en: curl
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following example, we will see how a simple `curl` API call can be used
    to query for the hosts monitored by Datadog. As you can see, the JSON output is
    verbose and that is usually meant for some automated processing and not meant
    for manual consumption of any sort:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '*(Only an excerpt of the output is provided here. The full version can be found
    in the GitHub repository for this chapter.)*'
  prefs: []
  type: TYPE_NORMAL
- en: The output is verbose, and the preceding code is only an excerpt of it. The
    result provides detailed information about the hosts where the Datadog agents
    run.
  prefs: []
  type: TYPE_NORMAL
- en: Though this is a simple API call, there are multiple things you can learn about
    the Datadog APIs and curl from this example, so let's look at those one by one.
  prefs: []
  type: TYPE_NORMAL
- en: Not only does the command-line tool curl need to be installed in the local environment,
    typically in some Unix shell depending on the operating system that you are working
    on, but Python must also be available. Python is needed because the output from
    the API call is piped into the Python module `json.tool`, which formats the output
    to look better. So, it's optional in this case, but you will need Python to run
    the other sample programs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at each piece in the `curl` call:'
  prefs: []
  type: TYPE_NORMAL
- en: The `-s` switch passed to curl silences the tool from outputting messages about
    its own working. That is a good practice when the output is supposed to be parsed
    by another tool or code to avoid mixing it with the result from the API call.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-X GET` is the HTTP verb or method used and the `-X` option of curl is used
    for specifying that. The `GET` method allows the reading of resources and it''s
    the default method when making REST API calls from any tool, including curl. So,
    in this case, there is no need to use `-X GET` as `GET` is the default verb. The
    other important methods are `POST` (for creating new resources), `PUT` (for updating
    new resources), and `DELETE` (for deleting existing resources). We will see the
    use of all these methods in this chapter; note that `POST` and `PUT` are used
    interchangeably.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://app.datadoghq.com](https://app.datadoghq.com) is the URL to access
    the Datadog backend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/api/v1/hosts` is the API endpoint that is used to list the hosts. An API
    endpoint corresponds to a resource that could be accessed via the REST API. The
    HTTP method used along with the API endpoint determines the nature of the action.
    (These conventions are not always followed strictly.) For example, `GET` returns
    details about the existing hosts, and a `POST` or `PUT` call could be used to
    make some change to the same resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `-H` option of curl lets you pass in an HTTP header as part of the API call.
    In this example, three such headers, `Content-Type`, `DD-API-KEY`, and `DD-APPLICATION-KEY`,
    are passed. Practically, the headers can be considered inputs to the API call.
    With the `POST` and `PUT` methods, data can be passed to the call as input using
    the `-d` option of curl (which is akin to passing in input for a web form), but
    with a `GET` call, a header is the only option. In this case, `Content-Type` tells
    the API to return the result in JSON format.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As the names suggest, the headers `DD-API-KEY` and `DD-APPLICATION-KEY` are
    used to specify the API key and application key pair for authentication. The keys
    used in this example were those generated earlier in this section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`python -m json.tool` is used to format the JSON output from the API call for
    better readability. Note that this is not part of the API call. The `|` symbol
    (known as a pipe in Unix shell terminology) is used to combine both the commands
    to generate the preceding output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s make the same API call with a different set of options to illustrate
    the usage of `curl` with the Datadog REST API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this version of the `curl` call, the output is not formatted, but a very
    useful `curl` option `-i` is used. It adds header information to the result that
    can be used to process the output better. Important header information available
    in the first line of the output is the HTTP status code `HTTP/2 200`. A status
    code in the `200` range indicates that the API call was successful. Looking at
    the HTTP status code is important for an automated script to take appropriate
    action if the REST API call fails. The `200` range of codes indicates various
    success statuses, the `300` range of codes are related to URL redirection, the
    `400` range of codes point to issues with client calls such as bad URLs and authentication
    issues, and the `500` range of codes indicate server-side issues. In general,
    looking at the information available in the header of an API call result is important
    to make your script robust.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s see how a `POST` API call can be done using `curl,` which would
    make some change to a resource. In the following example, the selected host is
    muted programmatically from sending out any alert notifications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are the new points you need to note from the preceding example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`POST` is used as the API call method using the `curl` option `-X`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The API endpoint `/api/v1/host/thomass-mbp-2.lan/mute` contains the hostname
    that is changed by the API call and the action taken.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The input is provided using the `curl` option `-d`. The `@` symbol indicates
    that the string it precedes is the name of a file and the input must be read from
    it. Without the `@` qualifier, the string is considered a literal input. See the
    content of the input file `mute.json` used in the sample program:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The input parameters are specific to an API endpoint and the required information
    must be provided.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The JSON message from the Datadog backend is the last part of the output. While
    that would provide some indication of the outcome of an API call, its success
    must be determined in conjunction with the HTTP status code as you learned from
    the previous example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you look up the same host on the Datadog UI, you can verify that it''s muted
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4 – A host muted programmatically'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.4_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.4 – A host muted programmatically
  prefs: []
  type: TYPE_NORMAL
- en: curl is a very useful tool to make calls to Datadog APIs from scripts. However,
    for more robust automation, you need to use a programming language such as Python.
  prefs: []
  type: TYPE_NORMAL
- en: Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's see how Datadog REST API calls can be made from Python. While the
    utility of curl cannot be discounted, serious automation projects tend to use
    a full-featured programming language such as Python to build programs used in
    production. Similarly, other programming languages such as Go, Java, and Ruby
    are also supported by Datadog, by providing language-specific wrappers to the
    REST APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following sample Python program, a custom event is posted to the Datadog
    backend:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The test program is self-explanatory. All the inputs needed are hardcoded in
    it, including the key pair needed for user authentication. In a real-life program
    used in production, the use of keys will be parameterized for flexibility and
    security. Anticipated exceptions in the program will be handled for robustness.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to have Python installed in your local environment to run this program
    and the Datadog client library. The Datadog client library can be installed as
    a Python module using the `pip` utility, which is normally installed with Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding sample Python code can be saved in `post-event.py` and can be
    run by invoking it with Python as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The success of running this program can be verified on the **Events** dashboard
    of the Datadog UI also, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5 – An event posted by a Python program'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.5_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.5 – An event posted by a Python program
  prefs: []
  type: TYPE_NORMAL
- en: Note how the title, body, and tags information provided by the program is translated
    into corresponding attributes of the newly published event.
  prefs: []
  type: TYPE_NORMAL
- en: With these examples, you learned the basics of calling Datadog APIs using curl
    and Python. In the next section, you will get an overview of important APIs that
    you can use to integrate applications with Datadog.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing Datadog APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss the main Datadog features that can be accessed
    and managed programmatically using the REST API. As mentioned earlier, anything
    that you can do on the Datadog UI can be accomplished from code using Datadog
    APIs. In a highly automated environment, that option would be very handy as all
    the monitoring-related activities could be consolidated on the Datadog platform.
    If integration from an application is not directly supported readily, then custom
    integration using REST APIs is one of the best options available. (There are special
    cases in which monitoring standards such as **StatsD** and **JMX** could be used
    and we will look at how to use those in the next chapter, *Working with Monitoring
    Standards*.)
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at the broad categories of Datadog APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Public cloud integration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By integrating with the leading public cloud platforms, **AWS**, **Azure**,
    and **GCP**, Datadog can import infrastructure information without the help of
    any agent. The related configuration changes can be done programmatically using
    the Datadog APIs.
  prefs: []
  type: TYPE_NORMAL
- en: A typical use case would be the provisioning of a new public cloud account that
    needs to be integrated with Datadog. In a mature environment, public cloud resources
    are provisioned automatically using tools such as **Terraform** or **custom scripts**,
    or a combination of both, and the Datadog APIs would be handy for adding support
    for Datadog integration as part of the infrastructure provisioning process.
  prefs: []
  type: TYPE_NORMAL
- en: Dashboards
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The dashboard tasks that you perform from the Datadog UI can be done using
    APIs also. The following are some of the important API endpoints that cover the
    entire life cycle of a dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing existing dashboards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting details about a dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating and deleting an existing dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending invitations to share a dashboard with other users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Revoking the sharing of a dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downtime
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Downtime is set on a monitor to stop it from sending out alert notifications.
    As discussed earlier, such configurations are needed for some operational reasons,
    such as when pushing code to a production environment. The life cycle of downtime,
    starting from scheduling through cancelation, can be managed using related APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous section, you saw that events can be posted to the Datadog events
    stream by using an API call. APIs are also available to get the details of an
    event and to query events using filters such as tags.
  prefs: []
  type: TYPE_NORMAL
- en: Hosts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Details about hosts monitored by Datadog can be gathered using APIs, and some
    of the important details are these:'
  prefs: []
  type: TYPE_NORMAL
- en: Total number of active hosts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Details of all hosts monitored by Datadog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Details for muting/unmuting a host
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metrics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using the Datadog APIs, these tasks related to metrics can be performed:'
  prefs: []
  type: TYPE_NORMAL
- en: Posting metrics data to the Datadog backend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Querying metrics data already posted to the Datadog backend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The APIs to post and query metrics data are widely used for integrating with
    Datadog. As Datadog has excellent charting, dashboarding, and monitoring management
    features, making monitoring data available in the form of time-series data on
    the Datadog platform is very attractive.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn how custom metrics data is published to
    Datadog and use it later for building useful monitors.
  prefs: []
  type: TYPE_NORMAL
- en: Monitors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Monitors watch metrics data and check and notify based on the thresholds set.
    The entire life cycle of a monitor can be managed using APIs, including these
    tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Life cycle stages such as creating, updating, and deleting a monitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the details of a monitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching monitors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Muting a monitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, you will learn how to use some of the specific API endpoints
    related to managing monitors.
  prefs: []
  type: TYPE_NORMAL
- en: Host tags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You have already learned that a tag is an important resource type in Datadog
    for organizing and filtering information, especially metrics data. Datadog provides
    excellent API support for applying and managing host-level tags. These are the
    main endpoints:'
  prefs: []
  type: TYPE_NORMAL
- en: Add, update, and remove a host-level tag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List tags defined at the host level.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In general, Datadog API endpoints to manage resources provide the option to
    apply tags to them. Also, tags can be used as one of the filtering options with
    the APIs used for querying these resources. You will learn how to do that in sample
    programs in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: We have only looked at the important resources and related API endpoints in
    this section. To obtain the most complete and latest information on Datadog APIs,
    the starting point is the official Datadog APIs page at [https://docs.datadoghq.com/api/](https://docs.datadoghq.com/api/).
  prefs: []
  type: TYPE_NORMAL
- en: The next section is a tutorial to explain the use of Datadog APIs further by
    using sample Python programs.
  prefs: []
  type: TYPE_NORMAL
- en: Programming with Datadog APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this tutorial section, you will learn how to publish a custom metric and
    use that custom metric to set up a monitor programmatically. You will also learn
    how to publish an event in the Datadog events stream and search the event stream
    using keywords. Then a monitor will be set up that is based on the newly created
    custom metric. You will also learn how these events, the creation of the custom
    metric and monitor, are posted to the events stream. Finally, you will learn how
    the events stream is queried using a known tag that helps to locate the events
    programmatically posted to the events stream earlier.
  prefs: []
  type: TYPE_NORMAL
- en: The problem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the tutorial, let's assume that you are maintaining an e-commerce site and
    you need to monitor the performance of the business on an hourly basis, which
    management might be interested in tracking. There is a custom program to query
    the hourly order from the company's order management system, which will also post
    the metric data to Datadog, and it is scheduled to run every hour.
  prefs: []
  type: TYPE_NORMAL
- en: Once the metrics data is available in Datadog, that could be used in building
    monitors and dashboards. Also, whenever the hourly run of the custom program is
    completed, it will post an event in the Datadog events stream indicating the completion
    of the hourly job. This will make sure that if something goes wrong with the scheduled
    job, you can get details about that from the events stream.
  prefs: []
  type: TYPE_NORMAL
- en: Posting metric data and an event
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following Python program will post the hourly count of orders and a related
    event to the Datadog platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Let's look at this program closely. The first part is related to authentication
    and app client initialization, which you have seen already in the first Python
    sample program. The `orders_count` value is passed into this program as a parameter,
    which is mentioned on the command line as `SALES_ORDERS_COUNT,` and that should
    be replaced with a real number when the program is executed. In real life, another
    program would estimate that number and pass it on to this Python program. The
    sales orders count could be estimated within the Python program also, in which
    case there is no need to pass in `orders_count` as a parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The current timestamp is stored in a variable and used with the publishing
    time-series metrics data later, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '`ts` stores the Unix timestamp that pertains to the current time, which is
    passed along with the metric value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '`tag_list` sets up an array of tags that are applied to the metric data posted
    to Datadog.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the API call that posts the metric data to Datadog:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '`metric` should be the name of the metric and it is not created explicitly
    – posting it with a data point is enough. `points` has to be a tuple consisting
    of the timestamp and a scalar value that represents the metric value at the point
    in time represented by the timestamp.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The metric value must be a number and that''s why, earlier in the sample program,
    `orders_count` was converted as an integer from the value passed in from the command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The second part of the program is setting the text for the event and posting
    it to Datadog. After this program is executed, the results can be verified on
    the Datadog UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'The metric and the metric time-series data can be looked up using **Metrics
    Explorer** as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6 – Custom metrics listed on Metrics Explorer'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.6_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.6 – Custom metrics listed on Metrics Explorer
  prefs: []
  type: TYPE_NORMAL
- en: In the `mycompany.orders.hourly_count` can be pulled up. The tags applied on
    the custom metric could be looked up in the **Over** field. If the same metric
    is tracked for different products and fulfillment types, you can easily differentiate
    those by applying appropriate values to the tags.
  prefs: []
  type: TYPE_NORMAL
- en: 'The events posted could be viewed on the **Events stream** dashboard as in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7 – Custom event posted to Events stream'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.7_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.7 – Custom event posted to Events stream
  prefs: []
  type: TYPE_NORMAL
- en: You can visually verify that the details posted from the program appear in the
    events stream as expected. If the hourly aggregation of sales count fails for
    some reason, that status could be posted to the events stream as well, and that
    would be a good piece of information for those who would triage the failure.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a monitor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s try to set up a monitor programmatically using the custom metric just
    created. There might be a need for management to know if the hourly order count
    falls below `100`. The monitor can be set up for alerting in that simple scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The first part of this Python program is like the Python programs you have seen
    earlier. The main thing to look at in this program is the call to `api.Monitor.create`.
    This API takes several options that finely configure a monitor. For clarity, only
    the required parameters are used in this example.
  prefs: []
  type: TYPE_NORMAL
- en: If the program is executed successfully, the new monitor will be listed on the
    **Monitors** dashboard in the Datadog UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'To generate data for triggering an alert, run the `post-metric-and-event.py`
    program with the sales count under `100` a few times. After waiting for 5 minutes,
    you will see that the newly created monitor turns red, indicating the critical
    status of the monitor, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.8 – The monitor "Hourly order count fell below 100" triggers an
    alert'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.8_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.8 – The monitor "Hourly order count fell below 100" triggers an alert
  prefs: []
  type: TYPE_NORMAL
- en: Creating monitors programmatically is usually needed as part of some provisioning
    process in which the newly provisioned resources must be monitored using related
    metrics data.
  prefs: []
  type: TYPE_NORMAL
- en: Querying the events stream
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As part of posting custom metric values to the Datadog backend, an event to
    the events stream was also posted from the script. We have verified that from
    the `fulfillment_type:download` and not older than `500` seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The script is self-explanatory: `start` and `end`, two parameters of the API
    `api.Event.query`, set the timeframe for the events to be considered and further
    filtering is done using the tag `fulfillment_type:download`, which is one of the
    tags applied on the custom events posted earlier. Basically, this program will
    be able to locate the recent events published by the custom events.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The last line of the program prints the result in a highly readable format
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the output, the JSON result contains all the attributes of
    the event that can be viewed on the **Events** dashboard and more. Typically,
    a program like this would be a part of another automation in which the events
    will be queried for tracking the status of the scheduled program that posts an
    hourly sales order estimate as a metric to the Datadog platform.
  prefs: []
  type: TYPE_NORMAL
- en: Though the examples we looked at in this section are simple, they can easily
    be expanded into useful programs for implementing various integration and automation
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's look at the best practices related to using the Datadog APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We reviewed the Datadog APIs and learned the basics of how they are called
    from curl and Python. Now, let''s see what the best practices are for using the
    APIs for automating monitoring tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned earlier, try to leverage existing integrations as much as possible
    before writing your own code using Datadog APIs. This is mainly because the maintenance
    of custom code in the long term is expensive in general.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you must write code using APIs, start maintaining it in a source code control
    system from the very beginning.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we have seen with the sample programs, consider pulling useful monitoring
    information from other internal systems and publishing it on the Datadog platform
    as metrics and events using the APIs. Datadog is an excellent platform for aggregating
    information from disparate sources and it should be leveraged to extend the overall
    monitoring capability of the organization.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: APIs can be used to pull data out of Datadog for loading into popular reporting
    tools to meet custom reporting requirements. The same approach could be used to
    post infrastructure-related statuses to other internal systems programmatically.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you mainly learned how to use curl and Python to interact with
    the Datadog platform using Datadog APIs. Also, we looked at major categories of
    APIs provided by Datadog. The important thing to remember here is that almost
    anything you can do on the Datadog UI can be performed programmatically using
    an appropriate API.
  prefs: []
  type: TYPE_NORMAL
- en: We will continue looking at the Datadog integration options and in the next
    chapter, you will learn specifically about some important monitoring standards
    that are implemented by all major monitoring applications, including Datadog.
  prefs: []
  type: TYPE_NORMAL
