- en: '*Chapter 9*: Using the Datadog REST API'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第9章*：使用Datadog REST API'
- en: In the previous chapter, you learned how platform components, mainly made up
    of third-party software products and cloud services, are integrated with Datadog,
    by way of Datadog-supported integrations and custom checks. The main objective
    of those integrations is to monitor third-party tools used in the application
    stacks from Datadog. The integration with Datadog can be done in the other direction
    also. Tools and scripts can use Datadog HTTP REST APIs to access the Datadog platform
    programmatically. For example, if you need to post a metric value or an event
    to Datadog from an application, that can be done using the related REST APIs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您学习了如何通过Datadog支持的集成和自定义检查将平台组件，主要由第三方软件产品和云服务组成，集成到Datadog中。这些集成的主要目标是通过Datadog监控应用栈中使用的第三方工具。Datadog的集成也可以反向进行。工具和脚本可以使用Datadog的HTTP
    REST API以编程方式访问Datadog平台。例如，如果您需要从应用程序向Datadog发布一个指标值或事件，可以使用相关的REST API来完成。
- en: The Datadog REST API set is a comprehensive programmatic interface to access
    the Datadog monitoring platform. The APIs can be used to post custom metrics,
    create monitors and dashboards, tag various resources, manage logs, and create
    and manage users and roles. Essentially, anything that you can perform from the
    Datadog UI and by making configuration changes at the agent level.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Datadog REST API集是一个全面的编程接口，用于访问Datadog监控平台。这些API可用于发布自定义指标、创建监控器和仪表板、标记各种资源、管理日志以及创建和管理用户和角色。本质上，您可以在Datadog
    UI中执行的任何操作，以及在代理级别进行配置更改的操作，都可以通过这些API完成。
- en: 'In this chapter, you will learn the basics of using Datadog APIs from command-line
    tools and programming languages, with the help of tutorials. Specifically, the
    following topics are covered:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将通过教程学习如何使用命令行工具和编程语言操作Datadog API。具体来说，以下主题将被涵盖：
- en: Scripting Datadog
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本化Datadog
- en: Reviewing Datadog APIs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审查Datadog API
- en: Programming with Datadog APIs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Datadog API进行编程
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To try out the examples in this book, you need to have the following tools
    installed and resources available:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要尝试本书中的示例，您需要安装以下工具并确保资源可用：
- en: A Datadog account with an API key provisioned
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有API密钥的Datadog帐户
- en: style, check throughout
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 风格，请全面检查
- en: '**Python 2.7** or **Python 3.8** or higher'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python 2.7** 或 **Python 3.8** 或更高版本'
- en: Scripting Datadog
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本化Datadog
- en: In this section, you will learn how to make calls to Datadog APIs using the
    curl command-line tool and how to use the APIs from Python. An important prerequisite
    to access the Datadog platform programmatically is to set up user access for that
    purpose. While authentication is done with the use of dedicated user credentials
    or SAML when the Datadog UI is accessed, a pair of application and API keys is
    used with Datadog APIs. Let's see how those keys are set up.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中，您将学习如何使用curl命令行工具调用Datadog API，并了解如何在Python中使用这些API。访问Datadog平台进行编程操作的一个重要前提是设置用户访问权限。虽然在访问Datadog
    UI时，通过专用用户凭证或SAML进行身份验证，但使用Datadog API时则需使用一对应用密钥和API密钥。让我们来看看这些密钥是如何设置的。
- en: 'By navigating to **Team** | **Applications Keys**, a new application key pair
    can be created on the **Application Keys** page as shown in the following screenshot:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 通过导航至**Team** | **Applications Keys**，您可以在**Application Keys**页面创建一对新的应用密钥，如下图所示：
- en: '![Figure 9.1 – Generating application keys'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.1 – 生成应用密钥](img/Figure_9.1_B16483.jpg)'
- en: '](img/Figure_9.1_B16483.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.1_B16483.jpg)'
- en: Figure 9.1 – Generating application keys
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 – 生成应用密钥
- en: 'A new key can be created by clicking on the **New Key** button and providing
    it with a new name. The newly generated key will be listed on the same **Application
    Keys** page. It can be viewed and copied to the clipboard by clicking on a specific
    key listed in the preceding table, as in the following screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**New Key**按钮并为其提供新名称即可创建一个新的密钥。新生成的密钥将在相同的**Application Keys**页面中列出。您可以通过点击前表中列出的特定密钥来查看和复制该密钥，如下图所示：
- en: '![Figure 9.2 – Viewing an application key'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.2 – 查看应用密钥](img/Figure_9.2_B16483.jpg)'
- en: '](img/Figure_9.2_B16483.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.2_B16483.jpg)'
- en: Figure 9.2 – Viewing an application key
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2 – 查看应用密钥
- en: 'By navigating to **Integrations** | **APIs** on the Datadog dashboard, you
    can get to the APIs page where the API key can be created or an existing one can
    be copied, as shown in the following screenshot:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在Datadog仪表板中导航至**Integrations** | **APIs**，您可以进入API页面，在那里可以创建新的API密钥或复制现有的API密钥，如下图所示：
- en: '![Figure 9.3 API Keys page'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.3 API密钥页面](img/Figure_9.3_B16483.jpg)'
- en: '](img/Figure_9.3_B16483.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.3_B16483.jpg)'
- en: Figure 9.3 API Keys page
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3 API密钥页面
- en: By providing a name in the **New API key** field and clicking on the **Create
    API Key** button, a new key can be generated. The generated keys are listed as
    shown in the preceding screenshot.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在**新API密钥**字段中提供名称并点击**创建API密钥**按钮，可以生成新的密钥。生成的密钥会如前述截图所示列出。
- en: An application key is unique to the Datadog organization where it is set up.
    The API key is tied to the Datadog user and so it inherits the related privileges.
    For authenticating from a program, an application key and an API key must be used,
    identifying the organization and the user. We will see how an application and
    API key pair is used in the sample programs, further illustrating the use of keys.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序密钥是唯一的，属于设置它的Datadog组织。API密钥与Datadog用户绑定，因此它继承了相关的权限。为了从程序中进行身份验证，必须使用应用程序密钥和API密钥，分别标识组织和用户。我们将在示例程序中看到如何使用应用程序和API密钥对，进一步说明密钥的使用。
- en: The Datadog APIs can be called from a command-line tool such as curl as part
    of an ad hoc shell script or such calls can be invoked using a programming language
    such as **'Python', 'Go', and 'Java'***.* In this section, you will learn how
    API calls are made from curl and Python.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过像curl这样的命令行工具调用Datadog API，作为临时shell脚本的一部分，或者使用如**'Python'、'Go'和'Java'**等编程语言调用。在本节中，你将学习如何从curl和Python发起API调用。
- en: curl
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: curl
- en: 'In the following example, we will see how a simple `curl` API call can be used
    to query for the hosts monitored by Datadog. As you can see, the JSON output is
    verbose and that is usually meant for some automated processing and not meant
    for manual consumption of any sort:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将看到如何使用简单的`curl` API调用来查询Datadog监控的主机。如你所见，JSON输出是冗长的，通常用于自动化处理，而非手动查看：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*(Only an excerpt of the output is provided here. The full version can be found
    in the GitHub repository for this chapter.)*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*(这里只提供了输出的一部分，完整版本可以在本章的GitHub仓库中找到。)*'
- en: The output is verbose, and the preceding code is only an excerpt of it. The
    result provides detailed information about the hosts where the Datadog agents
    run.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 输出内容冗长，前面的代码仅为其一部分。结果提供了关于Datadog代理运行的主机的详细信息。
- en: Though this is a simple API call, there are multiple things you can learn about
    the Datadog APIs and curl from this example, so let's look at those one by one.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这是一个简单的API调用，但从这个示例中，你可以学到关于Datadog API和curl的多种内容，因此我们将一一解析。
- en: Not only does the command-line tool curl need to be installed in the local environment,
    typically in some Unix shell depending on the operating system that you are working
    on, but Python must also be available. Python is needed because the output from
    the API call is piped into the Python module `json.tool`, which formats the output
    to look better. So, it's optional in this case, but you will need Python to run
    the other sample programs.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅命令行工具curl需要在本地环境中安装，通常是在操作系统的某些Unix shell中，还必须确保Python可用。需要Python是因为API调用的输出会被传递到Python模块`json.tool`，该模块用于格式化输出，使其更易读。因此，在这种情况下，Python是可选的，但你需要Python来运行其他示例程序。
- en: 'Let''s look at each piece in the `curl` call:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一看看`curl`调用中的每个部分：
- en: The `-s` switch passed to curl silences the tool from outputting messages about
    its own working. That is a good practice when the output is supposed to be parsed
    by another tool or code to avoid mixing it with the result from the API call.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 传递给curl的`-s`开关可以让工具在执行过程中不输出关于自身工作的消息。这是在输出需要被另一个工具或代码解析时的好做法，避免与API调用的结果混合。
- en: '`-X GET` is the HTTP verb or method used and the `-X` option of curl is used
    for specifying that. The `GET` method allows the reading of resources and it''s
    the default method when making REST API calls from any tool, including curl. So,
    in this case, there is no need to use `-X GET` as `GET` is the default verb. The
    other important methods are `POST` (for creating new resources), `PUT` (for updating
    new resources), and `DELETE` (for deleting existing resources). We will see the
    use of all these methods in this chapter; note that `POST` and `PUT` are used
    interchangeably.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-X GET`是使用的HTTP动词或方法，curl的`-X`选项用于指定这一点。`GET`方法允许读取资源，当从任何工具（包括curl）发起REST
    API调用时，`GET`是默认方法。因此，在这种情况下，没有必要使用`-X GET`，因为`GET`是默认动词。其他重要的方法包括`POST`（用于创建新资源）、`PUT`（用于更新资源）和`DELETE`（用于删除现有资源）。我们将在本章中看到这些方法的使用；请注意，`POST`和`PUT`可以互换使用。'
- en: '[https://app.datadoghq.com](https://app.datadoghq.com) is the URL to access
    the Datadog backend.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://app.datadoghq.com](https://app.datadoghq.com) 是访问Datadog后端的URL。'
- en: '`/api/v1/hosts` is the API endpoint that is used to list the hosts. An API
    endpoint corresponds to a resource that could be accessed via the REST API. The
    HTTP method used along with the API endpoint determines the nature of the action.
    (These conventions are not always followed strictly.) For example, `GET` returns
    details about the existing hosts, and a `POST` or `PUT` call could be used to
    make some change to the same resource.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/api/v1/hosts` 是用于列出主机的API端点。API端点对应于可以通过REST API访问的资源。与API端点一起使用的HTTP方法确定操作的性质。（这些约定并不总是严格遵循。）例如，`GET`返回有关现有主机的详细信息，而`POST`或`PUT`调用可以用于对相同资源进行一些更改。'
- en: The `-H` option of curl lets you pass in an HTTP header as part of the API call.
    In this example, three such headers, `Content-Type`, `DD-API-KEY`, and `DD-APPLICATION-KEY`,
    are passed. Practically, the headers can be considered inputs to the API call.
    With the `POST` and `PUT` methods, data can be passed to the call as input using
    the `-d` option of curl (which is akin to passing in input for a web form), but
    with a `GET` call, a header is the only option. In this case, `Content-Type` tells
    the API to return the result in JSON format.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: curl的`-H`选项允许您作为API调用的一部分传递HTTP头部。在这个例子中，传递了三个这样的头部`Content-Type`，`DD-API-KEY`和`DD-APPLICATION-KEY`。实际上，头部可以被视为API调用的输入。使用`POST`和`PUT`方法时，可以使用curl的`-d`选项将数据作为输入传递给调用（类似于为Web表单传递输入），但是在`GET`调用中，头部是唯一的选择。在这种情况下，`Content-Type`告诉API以JSON格式返回结果。
- en: As the names suggest, the headers `DD-API-KEY` and `DD-APPLICATION-KEY` are
    used to specify the API key and application key pair for authentication. The keys
    used in this example were those generated earlier in this section.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如名称所示，头部`DD-API-KEY`和`DD-APPLICATION-KEY`用于指定用于身份验证的API密钥和应用程序密钥对。本示例中使用的密钥是在本节中先前生成的密钥。
- en: '`python -m json.tool` is used to format the JSON output from the API call for
    better readability. Note that this is not part of the API call. The `|` symbol
    (known as a pipe in Unix shell terminology) is used to combine both the commands
    to generate the preceding output.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python -m json.tool`用于格式化API调用的JSON输出，以提高可读性。请注意，这不是API调用的一部分。管道符号（在Unix shell术语中称为管道）用于组合这两个命令以生成前面的输出。'
- en: 'Now, let''s make the same API call with a different set of options to illustrate
    the usage of `curl` with the Datadog REST API:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用不同的选项集合进行相同的API调用，以说明使用`curl`与Datadog REST API的用法：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this version of the `curl` call, the output is not formatted, but a very
    useful `curl` option `-i` is used. It adds header information to the result that
    can be used to process the output better. Important header information available
    in the first line of the output is the HTTP status code `HTTP/2 200`. A status
    code in the `200` range indicates that the API call was successful. Looking at
    the HTTP status code is important for an automated script to take appropriate
    action if the REST API call fails. The `200` range of codes indicates various
    success statuses, the `300` range of codes are related to URL redirection, the
    `400` range of codes point to issues with client calls such as bad URLs and authentication
    issues, and the `500` range of codes indicate server-side issues. In general,
    looking at the information available in the header of an API call result is important
    to make your script robust.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个`curl`调用的版本中，输出没有格式化，但是非常有用的`curl`选项`-i`被使用。它会在结果中添加头信息，可以用来更好地处理输出。输出的第一行中重要的头信息是HTTP状态码`HTTP/2
    200`。在自动化脚本中查看HTTP状态码是重要的，以便在REST API调用失败时采取适当的操作。`200`系列状态码指示API调用成功。查看API调用结果头部的信息对于使您的脚本更加健壮是很重要的。`300`系列状态码与URL重定向相关，`400`系列状态码指示客户端调用问题，如错误的URL和身份验证问题，而`500`系列状态码指示服务器端问题。总的来说，查看API调用结果头部中的信息对于使您的脚本更加健壮是很重要的。
- en: 'Now let''s see how a `POST` API call can be done using `curl,` which would
    make some change to a resource. In the following example, the selected host is
    muted programmatically from sending out any alert notifications:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何使用`curl`进行`POST` API调用，这将对资源进行某些更改。在下面的示例中，通过编程方式静音所选主机，以防止发送任何警报通知：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following are the new points you need to note from the preceding example:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是需要从前面的示例中注意的新要点：
- en: '`POST` is used as the API call method using the `curl` option `-X`.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`curl`选项`-X`作为API调用方法的`POST`。
- en: The API endpoint `/api/v1/host/thomass-mbp-2.lan/mute` contains the hostname
    that is changed by the API call and the action taken.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API 端点 `/api/v1/host/thomass-mbp-2.lan/mute` 包含主机名，该主机名将在 API 调用中被更改，并执行相应操作。
- en: 'The input is provided using the `curl` option `-d`. The `@` symbol indicates
    that the string it precedes is the name of a file and the input must be read from
    it. Without the `@` qualifier, the string is considered a literal input. See the
    content of the input file `mute.json` used in the sample program:'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入通过 `curl` 选项 `-d` 提供。`@` 符号表示它前面的字符串是一个文件名，输入必须从该文件中读取。如果没有 `@` 修饰符，字符串将被视为字面量输入。请查看示例程序中使用的输入文件
    `mute.json` 的内容：
- en: '[PRE3]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The input parameters are specific to an API endpoint and the required information
    must be provided.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输入参数是特定于 API 端点的，必须提供所需的信息。
- en: 'The JSON message from the Datadog backend is the last part of the output. While
    that would provide some indication of the outcome of an API call, its success
    must be determined in conjunction with the HTTP status code as you learned from
    the previous example:'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自 Datadog 后端的 JSON 消息是输出的最后部分。虽然它能提供 API 调用结果的一些提示，但其成功与否必须结合 HTTP 状态码来判断，正如你在之前的示例中所学到的：
- en: '[PRE4]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you look up the same host on the Datadog UI, you can verify that it''s muted
    as shown in the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 Datadog UI 中查看相同的主机，你可以验证它是否被静音，如下图所示：
- en: '![Figure 9.4 – A host muted programmatically'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.4 – 主机被程序化静音](img/Figure_9.4_B16483.jpg)'
- en: '](img/Figure_9.4_B16483.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.4_B16483.jpg)'
- en: Figure 9.4 – A host muted programmatically
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.4 – 主机被程序化静音
- en: curl is a very useful tool to make calls to Datadog APIs from scripts. However,
    for more robust automation, you need to use a programming language such as Python.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: curl 是一个非常有用的工具，可以从脚本中调用 Datadog API。然而，对于更强大的自动化，你需要使用 Python 等编程语言。
- en: Python
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python
- en: Now, let's see how Datadog REST API calls can be made from Python. While the
    utility of curl cannot be discounted, serious automation projects tend to use
    a full-featured programming language such as Python to build programs used in
    production. Similarly, other programming languages such as Go, Java, and Ruby
    are also supported by Datadog, by providing language-specific wrappers to the
    REST APIs.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何通过 Python 调用 Datadog REST API。尽管 curl 工具不可忽视，但在严肃的自动化项目中，通常会使用 Python
    等功能全面的编程语言来构建用于生产的程序。同样，Go、Java 和 Ruby 等其他编程语言也得到了 Datadog 的支持，Datadog 为 REST
    API 提供了特定语言的包装器。
- en: 'In the following sample Python program, a custom event is posted to the Datadog
    backend:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例 Python 程序中，一个自定义事件被发布到 Datadog 后端：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The test program is self-explanatory. All the inputs needed are hardcoded in
    it, including the key pair needed for user authentication. In a real-life program
    used in production, the use of keys will be parameterized for flexibility and
    security. Anticipated exceptions in the program will be handled for robustness.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 测试程序是不言自明的。所有需要的输入都已在其中硬编码，包括用于用户身份验证的密钥对。在实际生产中使用的程序中，密钥的使用会被参数化，以提高灵活性和安全性。程序中预期的异常将被处理，以增强健壮性。
- en: 'You need to have Python installed in your local environment to run this program
    and the Datadog client library. The Datadog client library can be installed as
    a Python module using the `pip` utility, which is normally installed with Python:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在本地环境中安装 Python 和 Datadog 客户端库才能运行该程序。Datadog 客户端库可以作为 Python 模块使用 `pip`
    工具安装，`pip` 通常与 Python 一起安装：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding sample Python code can be saved in `post-event.py` and can be
    run by invoking it with Python as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例 Python 代码可以保存为 `post-event.py`，并可以通过以下方式使用 Python 调用来运行：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The success of running this program can be verified on the **Events** dashboard
    of the Datadog UI also, as shown in the following screenshot:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序的成功执行可以通过 Datadog UI 的 **事件** 仪表板验证，如下图所示：
- en: '![Figure 9.5 – An event posted by a Python program'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.5 – Python 程序发布的事件](img/Figure_9.5_B16483.jpg)'
- en: '](img/Figure_9.5_B16483.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.5_B16483.jpg)'
- en: Figure 9.5 – An event posted by a Python program
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.5 – Python 程序发布的事件
- en: Note how the title, body, and tags information provided by the program is translated
    into corresponding attributes of the newly published event.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 注意程序提供的标题、正文和标签信息是如何转换为新发布事件的相应属性的。
- en: With these examples, you learned the basics of calling Datadog APIs using curl
    and Python. In the next section, you will get an overview of important APIs that
    you can use to integrate applications with Datadog.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些示例，你学习了如何使用 curl 和 Python 调用 Datadog API 的基础知识。在下一部分，你将概览一些重要的 API，这些 API
    可用于将应用程序与 Datadog 集成。
- en: Reviewing Datadog APIs
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看 Datadog APIs
- en: In this section, we will discuss the main Datadog features that can be accessed
    and managed programmatically using the REST API. As mentioned earlier, anything
    that you can do on the Datadog UI can be accomplished from code using Datadog
    APIs. In a highly automated environment, that option would be very handy as all
    the monitoring-related activities could be consolidated on the Datadog platform.
    If integration from an application is not directly supported readily, then custom
    integration using REST APIs is one of the best options available. (There are special
    cases in which monitoring standards such as **StatsD** and **JMX** could be used
    and we will look at how to use those in the next chapter, *Working with Monitoring
    Standards*.)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论可以使用 REST API 访问和管理的主要 Datadog 功能。正如前面提到的，您在 Datadog UI 上可以做的任何事情都可以通过
    Datadog APIs 的代码完成。在高度自动化的环境中，这个选项非常方便，因为所有与监控相关的活动都可以集中在 Datadog 平台上。如果应用程序不直接支持集成，那么使用
    REST APIs 进行自定义集成是可行的最佳选择之一。（也有特殊情况下可以使用 **StatsD** 和 **JMX** 等监控标准，我们将在下一章节《使用监控标准》中讨论如何使用这些标准。）
- en: Let's look at the broad categories of Datadog APIs.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看 Datadog APIs 的广泛分类。
- en: Public cloud integration
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 公共云集成
- en: By integrating with the leading public cloud platforms, **AWS**, **Azure**,
    and **GCP**, Datadog can import infrastructure information without the help of
    any agent. The related configuration changes can be done programmatically using
    the Datadog APIs.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 通过与主要公共云平台 **AWS**、**Azure** 和 **GCP** 集成，Datadog 可以在没有任何代理的情况下导入基础设施信息。相关的配置更改可以使用
    Datadog APIs 程序化地完成。
- en: A typical use case would be the provisioning of a new public cloud account that
    needs to be integrated with Datadog. In a mature environment, public cloud resources
    are provisioned automatically using tools such as **Terraform** or **custom scripts**,
    or a combination of both, and the Datadog APIs would be handy for adding support
    for Datadog integration as part of the infrastructure provisioning process.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 典型用例可能是提供一个需要与 Datadog 集成的新公共云账户。在成熟的环境中，使用 **Terraform** 或 **自定义脚本** 或两者结合的工具自动进行公共云资源的配置，而
    Datadog APIs 则可作为基础设施配置过程中添加 Datadog 集成支持的有用工具。
- en: Dashboards
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仪表板
- en: 'The dashboard tasks that you perform from the Datadog UI can be done using
    APIs also. The following are some of the important API endpoints that cover the
    entire life cycle of a dashboard:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过 Datadog UI 执行的仪表板任务也可以使用 APIs 完成。以下是覆盖仪表板整个生命周期的一些重要 API 终点：
- en: Creating a dashboard
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个仪表板
- en: Listing existing dashboards
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出现有仪表板
- en: Getting details about a dashboard
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取关于仪表板的详细信息
- en: Updating and deleting an existing dashboard
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新和删除现有仪表板
- en: Sending invitations to share a dashboard with other users
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发送邀请与其他用户共享仪表板
- en: Revoking the sharing of a dashboard
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 撤销仪表板共享
- en: Downtime
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 停机时间
- en: Downtime is set on a monitor to stop it from sending out alert notifications.
    As discussed earlier, such configurations are needed for some operational reasons,
    such as when pushing code to a production environment. The life cycle of downtime,
    starting from scheduling through cancelation, can be managed using related APIs.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 停机是为了阻止监视器发送警报通知。如前所述，这类配置在某些操作原因（如将代码推送到生产环境时）是必要的。停机的生命周期，从计划到取消，可以使用相关 APIs
    进行管理。
- en: Events
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事件
- en: In the previous section, you saw that events can be posted to the Datadog events
    stream by using an API call. APIs are also available to get the details of an
    event and to query events using filters such as tags.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，您看到可以通过 API 调用将事件发布到 Datadog 事件流。APIs 也可用于获取事件的详细信息以及使用标签等过滤器查询事件。
- en: Hosts
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主机
- en: 'Details about hosts monitored by Datadog can be gathered using APIs, and some
    of the important details are these:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 APIs 可以收集关于由 Datadog 监控的主机的详细信息，以下是一些重要的细节：
- en: Total number of active hosts
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活跃主机的总数
- en: Details of all hosts monitored by Datadog
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有由 Datadog 监控的主机的详细信息
- en: Details for muting/unmuting a host
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于静音/取消静音主机的详细信息
- en: Metrics
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指标
- en: 'Using the Datadog APIs, these tasks related to metrics can be performed:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Datadog APIs，可以执行以下与指标相关的任务：
- en: Posting metrics data to the Datadog backend
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将指标数据发布到 Datadog 后端
- en: Querying metrics data already posted to the Datadog backend
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询已发布到 Datadog 后端的指标数据
- en: The APIs to post and query metrics data are widely used for integrating with
    Datadog. As Datadog has excellent charting, dashboarding, and monitoring management
    features, making monitoring data available in the form of time-series data on
    the Datadog platform is very attractive.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 发布和查询指标数据的 API 被广泛用于与 Datadog 的集成。由于 Datadog 拥有出色的图表、仪表盘和监控管理功能，因此将监控数据以时间序列数据的形式展示在
    Datadog 平台上非常具有吸引力。
- en: In the next section, you will learn how custom metrics data is published to
    Datadog and use it later for building useful monitors.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将学习如何将自定义指标数据发布到 Datadog，并稍后使用它来构建有用的监控器。
- en: Monitors
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监控器
- en: 'Monitors watch metrics data and check and notify based on the thresholds set.
    The entire life cycle of a monitor can be managed using APIs, including these
    tasks:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 监控器观察指标数据，并根据设定的阈值进行检查和通知。监控器的整个生命周期可以通过 API 进行管理，包括以下任务：
- en: Life cycle stages such as creating, updating, and deleting a monitor
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控器的生命周期阶段，例如创建、更新和删除监控器
- en: Getting the details of a monitor
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取监控器的详细信息
- en: Searching monitors
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索监控器
- en: Muting a monitor
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静音监控器
- en: In the next section, you will learn how to use some of the specific API endpoints
    related to managing monitors.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将学习如何使用一些特定的 API 端点来管理监控器。
- en: Host tags
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 主机标签
- en: 'You have already learned that a tag is an important resource type in Datadog
    for organizing and filtering information, especially metrics data. Datadog provides
    excellent API support for applying and managing host-level tags. These are the
    main endpoints:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经了解到，标签是 Datadog 中用于组织和筛选信息（尤其是指标数据）的重要资源类型。Datadog 提供了优秀的 API 支持来应用和管理主机级别的标签。以下是主要的
    API 端点：
- en: Add, update, and remove a host-level tag.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加、更新和删除主机级别的标签。
- en: List tags defined at the host level.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出在主机级别定义的标签。
- en: In general, Datadog API endpoints to manage resources provide the option to
    apply tags to them. Also, tags can be used as one of the filtering options with
    the APIs used for querying these resources. You will learn how to do that in sample
    programs in the next section.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，Datadog API 端点用于管理资源时，提供了将标签应用于资源的选项。此外，标签还可以作为查询这些资源时的筛选选项之一。您将在下一节的示例程序中学习如何做到这一点。
- en: We have only looked at the important resources and related API endpoints in
    this section. To obtain the most complete and latest information on Datadog APIs,
    the starting point is the official Datadog APIs page at [https://docs.datadoghq.com/api/](https://docs.datadoghq.com/api/).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 本节仅涵盖了重要资源和相关 API 端点。要获取 Datadog API 的最完整和最新信息，起点是官方的 Datadog API 页面：[https://docs.datadoghq.com/api/](https://docs.datadoghq.com/api/)。
- en: The next section is a tutorial to explain the use of Datadog APIs further by
    using sample Python programs.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节是一个教程，通过使用示例 Python 程序进一步解释 Datadog API 的使用。
- en: Programming with Datadog APIs
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Datadog API 编程
- en: In this tutorial section, you will learn how to publish a custom metric and
    use that custom metric to set up a monitor programmatically. You will also learn
    how to publish an event in the Datadog events stream and search the event stream
    using keywords. Then a monitor will be set up that is based on the newly created
    custom metric. You will also learn how these events, the creation of the custom
    metric and monitor, are posted to the events stream. Finally, you will learn how
    the events stream is queried using a known tag that helps to locate the events
    programmatically posted to the events stream earlier.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节教程中，您将学习如何发布自定义指标，并使用该自定义指标以编程方式设置监控器。您还将学习如何将事件发布到 Datadog 事件流，并使用关键字搜索事件流。然后，您将基于新创建的自定义指标设置一个监控器。您还将了解这些事件、创建自定义指标和监控器的过程是如何发布到事件流中的。最后，您将学习如何使用已知标签查询事件流，以帮助程序化地定位先前发布到事件流中的事件。
- en: The problem
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题
- en: For the tutorial, let's assume that you are maintaining an e-commerce site and
    you need to monitor the performance of the business on an hourly basis, which
    management might be interested in tracking. There is a custom program to query
    the hourly order from the company's order management system, which will also post
    the metric data to Datadog, and it is scheduled to run every hour.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，假设您正在维护一个电子商务网站，并需要按小时监控业务的表现，管理层可能对这些数据感兴趣。有一个自定义程序用来查询公司订单管理系统中的每小时订单数据，并将指标数据发布到
    Datadog，且该程序计划每小时运行一次。
- en: Once the metrics data is available in Datadog, that could be used in building
    monitors and dashboards. Also, whenever the hourly run of the custom program is
    completed, it will post an event in the Datadog events stream indicating the completion
    of the hourly job. This will make sure that if something goes wrong with the scheduled
    job, you can get details about that from the events stream.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦度量数据可用，就可以在 Datadog 中用于构建监控和仪表盘。此外，每当自定义程序的每小时运行完成时，它将发布一个事件到 Datadog 事件流，表示每小时作业的完成。这可以确保如果调度作业出现问题，你可以从事件流中获得详细信息。
- en: Posting metric data and an event
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布度量数据和事件
- en: 'The following Python program will post the hourly count of orders and a related
    event to the Datadog platform:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 Python 程序将发布订单的每小时计数和相关事件到 Datadog 平台：
- en: '[PRE8]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Let's look at this program closely. The first part is related to authentication
    and app client initialization, which you have seen already in the first Python
    sample program. The `orders_count` value is passed into this program as a parameter,
    which is mentioned on the command line as `SALES_ORDERS_COUNT,` and that should
    be replaced with a real number when the program is executed. In real life, another
    program would estimate that number and pass it on to this Python program. The
    sales orders count could be estimated within the Python program also, in which
    case there is no need to pass in `orders_count` as a parameter.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们仔细看看这个程序。第一部分与身份验证和应用客户端初始化相关，这些内容你已经在第一个 Python 示例程序中见过。`orders_count` 值作为参数传入这个程序，该值在命令行中显示为
    `SALES_ORDERS_COUNT,`，在程序执行时应该用一个真实的数字来替换。在实际应用中，另一个程序会估算出这个数字并将其传递给这个 Python
    程序。销售订单数量也可以在 Python 程序中进行估算，这种情况下就不需要将 `orders_count` 作为参数传入。
- en: 'The current timestamp is stored in a variable and used with the publishing
    time-series metrics data later, as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的时间戳存储在一个变量中，并在稍后的时间序列度量数据发布中使用，如下所示：
- en: '[PRE9]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`ts` stores the Unix timestamp that pertains to the current time, which is
    passed along with the metric value:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`ts` 存储与当前时间相关的 Unix 时间戳，它与度量值一起传递：'
- en: '[PRE10]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`tag_list` sets up an array of tags that are applied to the metric data posted
    to Datadog.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`tag_list` 设置了一个标签数组，这些标签会应用到发布到 Datadog 的度量数据上。'
- en: 'The following is the API call that posts the metric data to Datadog:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将度量数据发布到 Datadog 的 API 调用：
- en: '[PRE11]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`metric` should be the name of the metric and it is not created explicitly
    – posting it with a data point is enough. `points` has to be a tuple consisting
    of the timestamp and a scalar value that represents the metric value at the point
    in time represented by the timestamp.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`metric` 应该是度量的名称，且不需要显式创建——只要带有数据点进行发布即可。`points` 必须是一个元组，包含时间戳和一个标量值，表示该时间点的度量值。'
- en: 'The metric value must be a number and that''s why, earlier in the sample program,
    `orders_count` was converted as an integer from the value passed in from the command
    line:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 度量值必须是一个数字，这就是为什么在示例程序中，`orders_count` 从命令行传入的值被转换为整数的原因：
- en: '[PRE12]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The second part of the program is setting the text for the event and posting
    it to Datadog. After this program is executed, the results can be verified on
    the Datadog UI.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的第二部分是设置事件的文本并将其发布到 Datadog。在执行完这个程序后，结果可以在 Datadog 用户界面上进行验证。
- en: 'The metric and the metric time-series data can be looked up using **Metrics
    Explorer** as in the following screenshot:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 **Metrics Explorer** 查找度量和度量时间序列数据，如下图所示：
- en: '![Figure 9.6 – Custom metrics listed on Metrics Explorer'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.6 – 在 Metrics Explorer 中列出的自定义度量'
- en: '](img/Figure_9.6_B16483.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.6_B16483.jpg)'
- en: Figure 9.6 – Custom metrics listed on Metrics Explorer
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.6 – 在 Metrics Explorer 中列出的自定义度量
- en: In the `mycompany.orders.hourly_count` can be pulled up. The tags applied on
    the custom metric could be looked up in the **Over** field. If the same metric
    is tracked for different products and fulfillment types, you can easily differentiate
    those by applying appropriate values to the tags.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `mycompany.orders.hourly_count` 中可以查找到相关信息。应用于自定义度量的标签可以在 **Over** 字段中查看。如果对不同的产品和履约类型跟踪相同的度量，可以通过为标签应用适当的值轻松区分这些度量。
- en: 'The events posted could be viewed on the **Events stream** dashboard as in
    the following screenshot:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 发布的事件可以在 **Events stream** 仪表盘中查看，如下图所示：
- en: '![Figure 9.7 – Custom event posted to Events stream'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 9.7 – 发布到事件流的自定义事件'
- en: '](img/Figure_9.7_B16483.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.7_B16483.jpg)'
- en: Figure 9.7 – Custom event posted to Events stream
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.7 – 发布到事件流的自定义事件
- en: You can visually verify that the details posted from the program appear in the
    events stream as expected. If the hourly aggregation of sales count fails for
    some reason, that status could be posted to the events stream as well, and that
    would be a good piece of information for those who would triage the failure.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过视觉方式验证程序发布的详细信息是否按预期出现在事件流中。如果由于某种原因每小时销售数量的聚合失败，这种状态也可以发布到事件流中，对于那些需要处理故障的人员来说，这将是一个重要的信息。
- en: Creating a monitor
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建监控
- en: 'Let''s try to set up a monitor programmatically using the custom metric just
    created. There might be a need for management to know if the hourly order count
    falls below `100`. The monitor can be set up for alerting in that simple scenario:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用刚创建的自定义指标程序化地设置监控。管理层可能需要知道每小时订单数是否低于`100`。在这种简单的场景下，可以设置监控来触发警报：
- en: '[PRE13]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The first part of this Python program is like the Python programs you have seen
    earlier. The main thing to look at in this program is the call to `api.Monitor.create`.
    This API takes several options that finely configure a monitor. For clarity, only
    the required parameters are used in this example.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Python程序的第一部分类似于你之前看到的Python程序。该程序中需要关注的主要内容是调用`api.Monitor.create`。这个API接受几个选项，可以精细配置监控。为了清晰起见，本示例只使用了必需的参数。
- en: If the program is executed successfully, the new monitor will be listed on the
    **Monitors** dashboard in the Datadog UI.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果程序成功执行，新的监控将会在Datadog UI的**Monitors**仪表盘中列出。
- en: 'To generate data for triggering an alert, run the `post-metric-and-event.py`
    program with the sales count under `100` a few times. After waiting for 5 minutes,
    you will see that the newly created monitor turns red, indicating the critical
    status of the monitor, as shown in the following screenshot:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成触发警报的数据，可以多次运行`post-metric-and-event.py`程序，销售量低于`100`。等待5分钟后，你会看到新创建的监控变为红色，表示监控处于临界状态，如下图所示：
- en: '![Figure 9.8 – The monitor "Hourly order count fell below 100" triggers an
    alert'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '![图9.8 – 监控 "每小时订单数降至100以下" 触发警报'
- en: '](img/Figure_9.8_B16483.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_9.8_B16483.jpg)'
- en: Figure 9.8 – The monitor "Hourly order count fell below 100" triggers an alert
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.8 – 监控 "每小时订单数降至100以下" 触发警报
- en: Creating monitors programmatically is usually needed as part of some provisioning
    process in which the newly provisioned resources must be monitored using related
    metrics data.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 程序化创建监控通常是某些配置过程的一部分，其中新配置的资源必须使用相关的指标数据进行监控。
- en: Querying the events stream
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查询事件流
- en: 'As part of posting custom metric values to the Datadog backend, an event to
    the events stream was also posted from the script. We have verified that from
    the `fulfillment_type:download` and not older than `500` seconds:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 作为将自定义指标值发布到Datadog后端的一部分，脚本还将事件发布到事件流中。我们已验证该事件来自`fulfillment_type:download`，且时间不超过`500`秒：
- en: '[PRE14]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The script is self-explanatory: `start` and `end`, two parameters of the API
    `api.Event.query`, set the timeframe for the events to be considered and further
    filtering is done using the tag `fulfillment_type:download`, which is one of the
    tags applied on the custom events posted earlier. Basically, this program will
    be able to locate the recent events published by the custom events.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本不言自明：`start`和`end`，API `api.Event.query`的两个参数，设置了要考虑的事件时间范围，进一步的筛选是通过标签`fulfillment_type:download`来完成的，这是之前发布的自定义事件上应用的标签之一。基本上，这个程序将能够定位由自定义事件发布的最近事件。
- en: 'The last line of the program prints the result in a highly readable format
    as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的最后一行以一种易于阅读的格式打印结果，格式如下：
- en: '[PRE15]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As you can see in the output, the JSON result contains all the attributes of
    the event that can be viewed on the **Events** dashboard and more. Typically,
    a program like this would be a part of another automation in which the events
    will be queried for tracking the status of the scheduled program that posts an
    hourly sales order estimate as a metric to the Datadog platform.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如输出所示，JSON结果包含了该事件的所有属性，可以在**Events**仪表盘上查看，甚至更多。通常，像这样的程序将是另一个自动化的一部分，在这个自动化中，事件将被查询，用于跟踪定时程序的状态，该程序将每小时销售订单估算数据作为指标发布到Datadog平台。
- en: Though the examples we looked at in this section are simple, they can easily
    be expanded into useful programs for implementing various integration and automation
    requirements.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们在本节中看到的示例很简单，但它们可以轻松扩展为实现各种集成和自动化需求的有用程序。
- en: Next, let's look at the best practices related to using the Datadog APIs.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们来看一下使用 Datadog API 的最佳实践。
- en: Best practices
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最佳实践
- en: 'We reviewed the Datadog APIs and learned the basics of how they are called
    from curl and Python. Now, let''s see what the best practices are for using the
    APIs for automating monitoring tasks:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们回顾了 Datadog API，并学习了如何通过 curl 和 Python 调用它们的基础知识。现在，让我们看看使用 API 来自动化监控任务的最佳实践：
- en: As mentioned earlier, try to leverage existing integrations as much as possible
    before writing your own code using Datadog APIs. This is mainly because the maintenance
    of custom code in the long term is expensive in general.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如前所述，在编写自己的代码之前，尽量多利用现有的集成功能使用 Datadog API。主要原因是，长期维护自定义代码通常成本较高。
- en: If you must write code using APIs, start maintaining it in a source code control
    system from the very beginning.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您必须编写使用 API 的代码，请从一开始就将其维护在源代码控制系统中。
- en: As we have seen with the sample programs, consider pulling useful monitoring
    information from other internal systems and publishing it on the Datadog platform
    as metrics and events using the APIs. Datadog is an excellent platform for aggregating
    information from disparate sources and it should be leveraged to extend the overall
    monitoring capability of the organization.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正如我们在示例程序中看到的，考虑从其他内部系统中提取有用的监控信息，并使用 API 将其作为指标和事件发布到 Datadog 平台。Datadog 是一个优秀的平台，可以从不同来源汇总信息，应该被充分利用，以扩展组织的整体监控能力。
- en: APIs can be used to pull data out of Datadog for loading into popular reporting
    tools to meet custom reporting requirements. The same approach could be used to
    post infrastructure-related statuses to other internal systems programmatically.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用 API 从 Datadog 中提取数据，并将其加载到流行的报告工具中，以满足定制的报告需求。同样的方法也可以用于通过编程方式将与基础设施相关的状态发布到其他内部系统。
- en: Summary
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you mainly learned how to use curl and Python to interact with
    the Datadog platform using Datadog APIs. Also, we looked at major categories of
    APIs provided by Datadog. The important thing to remember here is that almost
    anything you can do on the Datadog UI can be performed programmatically using
    an appropriate API.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您主要学习了如何使用 curl 和 Python 与 Datadog 平台进行交互，利用 Datadog API。此外，我们还了解了 Datadog
    提供的主要 API 类别。这里需要记住的重要一点是，几乎所有您在 Datadog UI 上能做的事情，都可以通过使用适当的 API 以编程方式完成。
- en: We will continue looking at the Datadog integration options and in the next
    chapter, you will learn specifically about some important monitoring standards
    that are implemented by all major monitoring applications, including Datadog.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续研究 Datadog 的集成选项，在下一章中，您将专门学习一些所有主要监控应用程序（包括 Datadog）所实施的重要监控标准。
