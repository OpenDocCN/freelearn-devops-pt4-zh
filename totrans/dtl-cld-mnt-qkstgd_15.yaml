- en: '*Chapter 12*: Monitoring Containers'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The monitoring of containers has been briefly covered earlier in the book. However,
    the adoption of microservices-based architecture to build applications and the
    ever-increasing use of containers to deploy such applications demands a dedicated
    chapter like this. Monitoring applications are trying to support advances in this
    space, and Datadog has been adding new features as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about the important Datadog features related
    to monitoring containers. Specifically, the following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Collecting Docker logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Live Containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing logs using Live Tail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching container data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To try out the examples mentioned in this chapter, you need to have an environment
    where the Datadog Agent is deployed on either Docker or Kubernetes. The examples
    were developed in the following environments:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Docker**: **Docker Desktop 3.2.2** running on a MacBook Pro. Any environment
    that has the latest version of Docker would be compatible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`minikube v1.18.1` running on a MacBook Pro. To try out the examples, any Kubernetes
    environment that has `kubectl` `v1.20.0` or higher can be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The examples might even work with older versions of Docker and Kubernetes; you
    are encouraged to try out the examples on their respective most recent versions.
  prefs: []
  type: TYPE_NORMAL
- en: Collecting Docker logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 2*](B16483_02_Final_VK_ePub.xhtml#_idTextAnchor115), *Deploying
    the Datadog Agent*, you learned how to monitor Docker-based containers as part
    of the infrastructure. By configuring the Datadog Agent appropriately, information
    about the running Docker containers, the `metrics.*` group of metrics, can be
    obtained and the health of containers can be monitored. The application logs from
    a container are typically written to the `stdout` and `stderr` streams. In this
    section, let's look at how application logs can be collected by configuring the
    Datadog Agent and the corresponding Docker image.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preferred method to collect logs from a container is to run the Datadog
    Agent as a container on the same Docker host. Though the actual command line to
    start the Datadog Agent container can be slightly different depending on the target
    operating system, on a Unix-like system such as macOS or Linux it would be as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note that `DATADOG-API-KEY` must be replaced with a valid API key associated
    with a Datadog user account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Upon successfully running the Datadog Agent container, you should be able to
    verify it from the command line as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: There could also be other containers running on the host, but look for the Datadog
    Agent container labeled `datadog-agent`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check whether the Datadog Agent service is able to collect logs from other
    containers, you can run any other containers that generate logs. For the example
    here, we can try running an NGINX container as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This command will run an NGINX container labeled `web`, a name that we can use
    later in the Datadog dashboards to locate this container. Also, the container
    port will be mapped to port `8080` on the Docker host machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of the preceding command is not provided here for brevity, but you
    can check if it''s up and running as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Look at the name of the container and the port mapping; this enables you to
    access the NGINX service on port `8080` on the host machine, even though the service
    runs on port `80` in the container.
  prefs: []
  type: TYPE_NORMAL
- en: Also, you can access the NGINX service on a web browser using the URL `http://localhost:8080`
    (or using an IP address or `CNAME` in place of localhost if the service is accessed
    from a remote host). The service could also be accessed using a command-line tool
    such as `curl`. You need to do this to generate some logs to see them being collected
    by the Datadog Agent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s see how the logs can be viewed using the Datadog UI. By navigating
    to **Infrastructure** | **Containers**, you can get to the **Containers** dashboard,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.1 – Listing containers'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.1_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.1 – Listing containers
  prefs: []
  type: TYPE_NORMAL
- en: 'Look for the name of the container that you want to check for the logs. In
    this sample case, it''s **web**, and you can double-click on it to open the following
    dialog. Select the **Logs** tab in the dropdown, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.2 – Logs collected from a container'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.2_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.2 – Logs collected from a container
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the logs displayed can be filtered down to a time window such
    as the past 15 minutes, as set in the example. To generate new logs, just access
    the URL using a web browser or `curl`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The logs can also be viewed in a better interface provided by **Log Explorer**.
    The dialog specified in *Figure 12.2* provides a link to launch Log Explorer,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.3 – Link to Log Explorer'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.3_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.3 – Link to Log Explorer
  prefs: []
  type: TYPE_NORMAL
- en: 'By clicking on the link **Open in Log Explorer**, as shown in *Figure 12.3*,
    the **Log Explorer** dashboard can be launched, and the interface will be as in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.4 – Log Explorer'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.4_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.4 – Log Explorer
  prefs: []
  type: TYPE_NORMAL
- en: This interface is very similar to that provided by industry-standard log aggregation
    tools such as **Splunk**, **Sumo Logic**, and the **ELK Stack**.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, you have learned how to capture logs from containers and publish
    them to Datadog by running the Datadog Agent, also as a container, on the same
    Docker host. If you have the option to customize the Docker image that is used
    to run the container, the image can be instrumented to capture the container logs
    better. In the following example, you will learn how NGINX logs integration is
    enabled on a container.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main step involved is to label the Docker image for log collection, as
    done in the following **Dockerfile**, which is used to build a custom version
    of the NGINX image that was used in the previous example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a Dockerfile in the current directory as follows, build a custom version
    NGINX image, and launch a container using it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build the Docker image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify whether the Docker image has been successfully built:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Launch the custom-built NGINX container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check whether the NGINX container is running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify whether you can access the container on port `8080` on the Docker host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If all the previous steps were successful, then you can check whether Datadog
    is capturing the logs.
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify that the logs are collected, the container logs can be looked up
    on the Datadog Containers dashboard as you have seen earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Infrastructure** | **Containers**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the **nginx-custom** container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look for log entries under the **Logs** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alternatively, **Log Explorer** can also be used to search the logs as you learned
    in the previous example.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have learned that the containers running on a Docker host can be monitored
    using Datadog at both the infrastructure and application levels, and specifically,
    how to collect application logs from a container in this section. Kubernetes is
    becoming the default platform for deploying microservices lately, and in the next
    section, you will learn how to use Datadog to monitor containers that run on Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker can be used for both packaging and running microservices, and you have
    seen examples of that in the previous section. However, that is only one of the
    packaging solutions available for microservices. Kubernetes is a platform for
    running microservices that are packaged using tools such as Docker. It provides
    a vast number of features to orchestrate and maintain the deployment of a microservices-based
    software system. Practically, it can be considered an operating system for microservices.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes environments can be set up on a wide variety of infrastructures,
    starting from your laptop for testing purposes through clusters of several machines
    in a data center. However, the most popular option to run Kubernetes is using
    the managed services available on public cloud platforms such as `kubectl`. In
    this section, you will learn how to deploy the Datadog Agent to monitor containers
    running in a Kubernetes environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test the steps provided here, a `minikube`-based Kubernetes environment
    that runs on a personal computer was used. The details of setting up `minikube`
    can be found here: [https://minikube.sigs.k8s.io/docs/start/](https://minikube.sigs.k8s.io/docs/start/).
    The steps to deploy Datadog are applicable in any Kubernetes environment and you
    can try them out anywhere regardless of the underlying Kubernetes infrastructure.'
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring Kubernetes has two parts – monitoring the Kubernetes cluster itself,
    and monitoring the microservices that run in the containers orchestrated by Kubernetes.
    The first is infrastructure monitoring and the latter is application monitoring.
    For Datadog to access the related monitoring information, the Datadog Agent must
    be installed as one of the containers in the Kubernetes cluster, supported by
    Kubernetes resources defined for that.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Datadog Agent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Datadog Agent is installed as a **DaemonSet** on all the nodes in a Kubernetes
    cluster so that logs, traces, and metrics from each node can be collected and
    pushed to the Datadog backend. The actual implementation would be different in
    a larger environment, as the Kubernetes platform and the types of services it
    runs can be vastly different in a real-life scenario. Let''s look at the general
    steps by doing a sample installation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the sample YAML file to create `ClusterRole` for `datadog-agent`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code snippet to the end of the `clusterrole.yaml` file. This
    might not be needed in the latest versions of Kubernetes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create `ClusterRole` for `datadog-agent`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download the sample YAML file to create `ServiceAccount` for `datadog-agent`
    and then provision that:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download the sample YAML file for creating `ClusterRoleBinding datadog-agent`,
    which links to the `ClusterRole` and `ServiceAccount` resources set up in the
    previous steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a secret for the API key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download a sample manifest to deploy a Datadog Agent that suits your requirements.
    The complete list is available at [https://docs.datadoghq.com/agent/kubernetes/?tab=daemonset](https://docs.datadoghq.com/agent/kubernetes/?tab=daemonset).
    For the purposes of this sample deployment, a manifest that supports the enabling
    of logs and metrics is used:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Update the sample Datadog Agent manifest with the following changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the section for the `datadog-agent` secret resource, update the `api-key`
    field with the base64-encoded value of a valid API key. The encoding can be done
    in different ways, and there are online tools available for these ways. It can
    be done reliably on the command line using `openssl` if that is available in your
    working environment:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following environment variables to the container section for the Agent:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Deploy the Datadog Agent DaemonSet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The Kubernetes resources that have been created in the previous steps could
    be looked up and verified using Kubernetes Dashboard as well. For example, if
    all the preceding steps were successful, you will be able to see the `datadog-agent`
    Pod listed with the status as `Running`, as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.5 – The datadog-agent Pod listed on Kubernetes Dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.5_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.5 – The datadog-agent Pod listed on Kubernetes Dashboard
  prefs: []
  type: TYPE_NORMAL
- en: Likewise, other resources related to deploying the Datadog Agent can also be
    looked up on Kubernetes Dashboard, and they can be managed from there.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the Datadog Agent is deployed successfully, you will be able to see the
    Kubernetes infrastructure resources and the containers running in the cluster
    on the **Containers** dashboard, as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.6 – Kubernetes resources and containers'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.6_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.6 – Kubernetes resources and containers
  prefs: []
  type: TYPE_NORMAL
- en: By clicking on the container of interest, logs and metrics related to that container
    can be viewed on the **Containers** dashboard as you learned in the previous section,
    including the access available to the **Log Explorer** dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: The option to view Kubernetes platform resources such as **Pods**, **Deployments**,
    **ReplicaSets**, **Services**, and **Nodes** is similar to that available on Kubernetes
    Dashboard. However, having those resources tracked by Datadog provides the option
    to monitor those resources using Datadog too.
  prefs: []
  type: TYPE_NORMAL
- en: We have already learned how Datadog can be used to monitor live containers with
    the help of integrations with Docker and Kubernetes. In the next section, you
    will learn more about that feature in the context of Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Using Live Containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Live Containers is a Datadog feature that provides insights into the workings
    of live containers. As you know, Kubernetes has become an industry standard for
    orchestrating containers, and that is not limited to Docker. Docker is only one
    of the tools available to package and run microservices. Though Docker is still
    the dominant containerization platform, there are tools like **CoreOS rkt** that
    could be used with Kubernetes, and this trend has gained momentum.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes is a complex platform and so monitoring the Kubernetes platform itself,
    besides the containers it runs, is also equally important. Though native applications
    such as Kubernetes Dashboard are the tools of choice for monitoring a Kubernetes
    cluster manually, Datadog's platform monitoring features help to consolidate monitoring
    on one platform and to automate it.
  prefs: []
  type: TYPE_NORMAL
- en: When a Kubernetes cluster is fully configured for the Datadog Agent to publish
    both cluster-level and application-level information, the **Containers** dashboard
    would look like that in *Figure 12.6*. By clicking on the containers and Kubernetes
    resources, you can look up the related info live at any time.
  prefs: []
  type: TYPE_NORMAL
- en: 'To be able to get the information captured from the Kubernetes cluster published
    to Datadog, the cluster needs to be configured. Some of those configurations were
    already discussed in the previous section, but it''s worth going over some of
    the important points that were not discussed or not covered in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Datadog Agent container should have the following environment variable
    defined:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The Datadog Agent `ClusterRole` should have permissions set for Live Containers
    to collect information on Kubernetes resources. That requirement was discussed
    in the previous section, related to the setting up of the `clusterrole.yaml` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The process agent container must be run with the following environment variables
    set:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the `DD_CLUSTER_NAME` environment variable for both `agent` and `process-agent`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: On the **Containers** dashboard, information about various Kubernetes resources
    such as Nodes, Services, Deployments, and Pods is also listed. Usually, such details
    are looked up and managed from the Kubernetes Dashboard UI, but having them available
    on the Datadog **Containers** dashboard can be handy, as such information can
    then be gathered from multiple Kubernetes clusters at one location.
  prefs: []
  type: TYPE_NORMAL
- en: In the **Logs** tab of both the **Containers** and **Log Explorer** dashboards,
    you might have already noticed the **Live Tail** option. Let's get some more details
    on that feature in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing logs using Live Tail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Datadog's `tail`, which continuously puts out any additions to a log file that
    it tracks. The advantage with **Live Tail** is that updates to a set of similar
    log files from multiple sources can be tracked on one dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Live Tail** option is available on the **Containers** dashboard as in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.7 – The Live Tail option to view logs in real time'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.7_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.7 – The Live Tail option to view logs in real time
  prefs: []
  type: TYPE_NORMAL
- en: '**Log Explorer** also has a **Live Tail** option available as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.8 – Live Tail on Log Explorer'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.8_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.8 – Live Tail on Log Explorer
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you have learned how the **Live Tail** option can be useful
    in terms of looking at the logs and reporting on them on a regular basis. In the
    next section, you will learn how to search a vast number of logs that would be
    collected from containers and use the insights for monitoring purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Searching container data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, our focus has been to collect information from containers and the infrastructure
    they run on, and publish that to the Datadog backend. Various Datadog dashboards,
    especially **Live Containers** and **Log Explorer**, presented that information
    for user consumption. In a real-life environment where Datadog would be publishing
    copious amounts of monitoring information, it could easily become a little overwhelming
    to process such a huge volume of data. The solution is to use methods of searching
    for information using keywords and tags, and you will learn how to do that in
    this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Keywords can be used to search for containers on the **Live Containers** dashboard
    and they will match with container names, IDs, and image names. For example, in
    the following screenshot, the container ID is looked up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.9 – Searching for a container using the container ID'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_12.9_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12.9 – Searching for a container using the container ID
  prefs: []
  type: TYPE_NORMAL
- en: The result can be further filtered and/or grouped by using tags. The containers
    could also be filtered using tags without using a keyword.
  prefs: []
  type: TYPE_NORMAL
- en: The keyword search can be more than just for simple strings. It can be compounded
    using Boolean operators such as `AND`, `OR`, and `NOT`. For example, `apache OR
    nginx` will return a list of containers that have `apache` or `nginx` present
    in the fields supported by the search, such as the field for the name of a container.
    Parentheses can be used to create more complex constructs for searching.
  prefs: []
  type: TYPE_NORMAL
- en: Like containers, Kubernetes cluster resources such as **Pods**, **ReplicaSets**,
    **Deployments**, and **Services** could also be searched and filtered using keywords
    and tags on the Live Containers dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's look at best practices related to monitoring containers in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are some of the best practices to be followed while monitoring
    containers using Datadog:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the Datadog Agent as a container for the easy discovery of application containers
    and flexibility. Even if the Datadog Agent may have to be run at the host level
    for some reason, running it as a container on the same host might be acceptable
    considering the operational benefits that it brings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In a Kubernetes environment, don't try to access container logs directly via
    Docker integration; instead, install the Datadog Agent on the Kubernetes cluster
    and configure it to collect logs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Though `kubectl` and Kubernetes Dashboard can be used to view Kubernetes cluster
    resources, making those available in Datadog will help to increase the visibility
    of their availability and health.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned how containers can be monitored using Datadog
    with the help of integrations available for Docker and Kubernetes. You have also
    learned how to search the container information and container logs once such information
    is collected by Datadog. After reading this chapter and trying out the samples
    provided in it, you are prepared to use Datadog to monitor containers that run
    in both Docker and Kubernetes environments.
  prefs: []
  type: TYPE_NORMAL
- en: Log aggregation, indexing, and search is a major area in monitoring and there
    are major initiatives around in the industry, such as the **ELK Stack**, **Splunk**,
    and **Sumo Logic**. Datadog also offers a solution, and you will learn about that
    in the next chapter.
  prefs: []
  type: TYPE_NORMAL
