- en: '*Chapter 14*: Miscellaneous Monitoring Topics'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The core monitoring features, as they are implemented in Datadog, have been
    discussed up to this point in the book. In this chapter, you will learn about
    some of the monitoring features that have become available on the Datadog monitoring
    platform relatively recently. These features, especially **Application Performance
    Monitoring** (**APM**), security monitoring, and synthetic monitoring, are usually
    addressed by dedicated applications. **AppDynamics** in APM, various **Security
    Information and Event Management** (**SIEM**) applications in security monitoring,
    and **Catchpoint** in synthetic monitoring are examples of dedicated monitoring
    applications in the respective areas. With these features available on the Datadog
    platform, it is becoming a one-stop destination for all the monitoring requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about the following topics, specifically the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Application Performance Monitoring (APM)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing observability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Synthetic monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To try out the examples mentioned in this book, you need to have the following
    tools installed and resources available:'
  prefs: []
  type: TYPE_NORMAL
- en: An Ubuntu 18.04 Linux environment with Bash shell. Other Linux distributions
    can be used, but make suitable changes to any Ubuntu-specific commands.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Datadog account and user with admin-level access.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Datadog Agent running, at host level or as microservice depending on the example,
    pointing to the Datadog account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: curl and wget.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application Performance Monitoring (APM)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the name indicates, an APM tool monitors the performance of an application
    using multiple methods. APM is a broad area by itself and, as mentioned earlier,
    dedicated products address it. APM could also stand for **Application Performance
    Management**, and adds some confusion to the discussions on APM. The consensus
    is that, in order to qualify as an application performance management solution,
    a monitoring tool should have features to handle the performance issues that would
    be unearthed by the monitoring features of the tool. Datadog only goes by the
    acronym APM, and we will review the features under that umbrella without worrying
    too much about the expansion of APM.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the features of a standard APM solution in general:'
  prefs: []
  type: TYPE_NORMAL
- en: Measuring end user experience
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mapping application workflows initiated by users to the underlying infrastructure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Measuring the performance of application workflows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracing code to a user's interaction with the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing analytics and reporting options to tie all the preceding features
    and present insights on dashboards.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, these are broad areas and every APM solution has its own way
    of implementing these features and more. You will also learn that observability
    and synthetic monitoring, two topics that will be discussed in dedicated sections
    later, are also related to APM. In the remainder of this section, we will see
    what APM features are available in Datadog and try to relate those to the broad
    categories mentioned in the preceding list, as much as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Sending traces to Datadog
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A primary step in getting started using Datadog APM is configuring the application
    to send application traces to the Datadog backend for analysis. The detailed steps
    for doing this are unique to the programming language used to build the application
    and the application server environment where the application is run. The traces
    generated by an application instrumented for that purpose will be published in
    the Datadog backend and that information is the basis of measuring performance
    and building traceability of various services that make up the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand the general steps involved in instrumenting an application for
    generating traces in Datadog APM, let''s look at how it''s done for a Java application.
    We can use **Cassandra** as the sample Java application that was introduced in
    [*Chapter 10*](B16483_10_Final_VK_ePub.xhtml#_idTextAnchor302), *Working with
    Monitoring Standards*. The steps for installing Cassandra are already documented
    in that chapter. Here, you will learn how to instrument a Cassandra application
    for tracing:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop the Cassandra service if it has been running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download the Java library for Datadog tracing using `wget` or `curl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define tracing directives in the environment variable `JAVA_OPTS`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the Cassandra service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The sample commands are based on the assumption that the user is in the directory
    where the Cassandra installable is extracted, such as `/home/ubuntu/apache-cassandra-3.11.10`.
    Make suitable changes to the path related to the actual installation.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding sample steps, it has been outlined how tracing is enabled for
    a Java application that runs at the host level. Similar steps are followed for
    instrumenting services running in the Docker and Kubernetes runtime environments,
    but with differences specific to the related platform. Also, note that the steps
    are unique to the programming language used for building the application. All
    those permutations are documented in the official documentation, starting at [https://docs.datadoghq.com/tracing/](https://docs.datadoghq.com/tracing/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once tracing is enabled for the applications as outlined above, you can view
    those on the APM dashboard as in the following screenshot by navigating to **APM**
    | **Traces**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1 – APM Traces dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.1_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.1 – APM Traces dashboard
  prefs: []
  type: TYPE_NORMAL
- en: These traces published to the Datadog backend provide deep visibility into application-specific
    requests, errors, and latency. The application traces could be correlated with
    infrastructure-level metrics, processes running on the host, and various logs,
    and that would help to pinpoint performance bottlenecks at all levels.
  prefs: []
  type: TYPE_NORMAL
- en: Profiling an application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the *Continuous Profiler* feature of Datadog APM, the resource usage and
    I/O bottlenecks can be traced to the application code by drilling down to the
    class, method, and line number. Instrumentation is also required for enabling
    this feature, and let's try that with the Cassandra application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps to instrument an application for profiling is similar to how it was
    done for tracing. Actually, the latest agent for tracing also supports profiling,
    and both features could be enabled using the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you can observe in the command line, the environment variable, `dd.profiling.enabled`,
    is set to `true` for enabling the profiling feature, in addition to tracing.
  prefs: []
  type: TYPE_NORMAL
- en: 'The profiling-related reports can be viewed on the **Continuous Profiler**
    dashboard by navigating to **APM** | **Profiles** in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.2 – Continuous Profiler dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.2_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.2 – Continuous Profiler dashboard
  prefs: []
  type: TYPE_NORMAL
- en: The profiles listed on this dashboard can be filtered by various tags, including
    the service name that usually identifies the application running at host level.
    In a microservices environment, an application would be made up of multiple services
    and can easily be tracked as a result of suitable tagging services belonging to
    an application.
  prefs: []
  type: TYPE_NORMAL
- en: 'By clicking on a profile listed on the dashboard, performance metrics and insights
    based on the profiling data can be viewed, as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.3 – Application profiling details'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.3_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.3 – Application profiling details
  prefs: []
  type: TYPE_NORMAL
- en: On the preceding dashboard, under the **Performance**, **Analysis**, **Metrics**,
    and **Runtime Info** tabs, a large amount of runtime information regarding the
    application is available for triaging performance issues and fine-tuning application
    performance and security in general.
  prefs: []
  type: TYPE_NORMAL
- en: Service Map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A Service Map will provide a pictorial representation of the services running
    in a runtime environment, such as a host or Kubernetes cluster, with the interaction
    between the services mapped out. The **Service Map** can be accessed by navigating
    to **APM** | **Service Map** and the dashboard will be rendered with the **Services**
    tab open, as in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.4 – Service Map dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.4_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.4 – Service Map dashboard
  prefs: []
  type: TYPE_NORMAL
- en: The Service Map will be very useful in a microservices environment, such as
    a Kubernetes cluster, for understanding the interaction between various components
    of an application. By enabling tracing and profiling for each microservice, a
    Service Map for the application system can be built that will provide valuable
    insights for fine-tuning the performance of the application.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you have learned how various APM features are implemented in
    Datadog by way of instrumenting the applications for generating traces and profiles
    and aggregating those inputs to derive insights. Both observability and synthetic
    monitoring are discussed, along with APM usually, but we will look at those in
    separate sections as those topics are generic enough to be understood in a broader
    context of monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, let's discuss observability and how that is implemented
    in Datadog.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing observability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Observability refers to the processes and methods involved in making the working
    of an application system more transparent and measurable. Increased observability
    of an application system will make it more monitoring-friendly. Observability
    is a property of the application system itself, while monitoring is an act that
    leverages that property for operational requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Observability is relatively new to the monitoring vocabulary, but it has been
    repurposed from system control theory. The concept of observability was introduced
    by Hungarian American engineer Rudolf E. Kálmán for linear dynamic systems, and
    it states that observability is a measure of how well internal states of a system
    can be inferred from knowledge of the system's external outputs. In the context
    of monitoring, the external outputs could be various metrics, logs, and traces.
    So, a monitoring tool with observability features should help with generating
    and analyzing various outputs related to making the working of an application
    system more transparent, implemented using a set of methods, processes, and dashboards
    for analysis. Such features would help with increasing the observability of the
    application system that the monitoring tool monitors.
  prefs: []
  type: TYPE_NORMAL
- en: While it's obvious that adding observability is important for better monitoring,
    you may be wondering why observability is a relatively new monitoring terminology.
    One of the reasons is that modern application systems and the infrastructure they
    run on are far more complex now. Gone are the days when monolithic applications
    ran on a few bare-metal machines in a data center. The applications are highly
    distributed, they run on public clouds, and are managed by complex orchestration
    tools such as Kubernetes and Spinnaker. While the modern application systems are
    cutting-edge and far more flexible and scalable, the increased complexity of application
    systems reduces the overall observability. In such a scenario, deliberate steps
    need to be taken to improve observability, and that's why commercial monitoring
    tools are now shipped with such features.
  prefs: []
  type: TYPE_NORMAL
- en: Metrics, logs, and traces are generally considered the three pillars of observability.
    Throughout this book, you have seen that Datadog features center around metrics
    and tags. Datadog monitoring features generate a variety of metrics out of the
    box. Datadog also provides options to create custom metrics and tags that will
    add more visibility to the working of an application or an infrastructure component.
    As seen in [*Chapter 13*](B16483_13_Final_VK_ePub.xhtml#_idTextAnchor402), *Managing
    Logs Using Datadog*, Datadog's log management features are comprehensive in terms
    of managing a variety of logs, including those from the microservices platforms
    such as Docker and Kubernetes. Earlier in this chapter, in the section on APM,
    you have seen how Datadog could be used to generate, collect, and analyze traces
    from the applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'While Datadog has all the nuts and bolts necessary for implementing observability
    in an application, it''s largely a custom effort that must be done for every application
    system. The application onboarding and deployment processes must be enhanced to
    include the instrumentation steps necessary for adding observability. Let''s see
    which of those instrumentations are required in Datadog:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Add platform component-level metrics**: This is usually done by using integrations
    supplied by Datadog. If it adds more value, consider adding custom metrics and
    using community-developed integrations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add application metrics**: This is custom in nature and included in the development
    process. Just like unit tests are required in order to pass a build process, also
    make this a requirement for a new service to be approved at the build or release
    level.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automate log management**: Instrument the build and deployment manifests
    such as Dockerfiles and Kubernetes deployment scripts to get the logs published
    to the Datadog''s Log Management backend. This must be automated at all levels
    as it won''t scale up if done manually.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automate the generation of traces and profiles**: Enhance the build and deployment
    process to automate the generation of traces and profiling, so those will readily
    be available to the Datadog APM service for analysis and building Service Maps.
    APM is a key aspect of rolling out observability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use Datadog for all monitoring needs**: There are dedicated applications
    for log management and APM by other vendors, as you have seen earlier in this
    chapter. One of the advantages of using Datadog is that both those features are
    provided by Datadog in addition to core monitoring. That opens up the opportunity
    to correlate various metrics, logs, and traces on a single platform using tagging
    and related constructs. If done right, this will enhance the observability of
    the applications by virtue of having all the information gathered in one place,
    and Datadog usually correlates monitoring information available across various
    features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's evident that the ability of Datadog to consolidate all three pillars of
    observability – metrics, logs, and traces – is a major strength of that platform.
    To make use of the related out-of-the-box features, the application build and
    deployment processes must be enhanced and tooled so logs and traces are published
    to the Datadog backend automatically and seamlessly.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at synthetic monitoring, which refers to the
    testing of an application live in production using requests and actions that simulate
    the user experience.
  prefs: []
  type: TYPE_NORMAL
- en: Synthetic monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In **synthetic monitoring**, the utilization of an application is simulated,
    typically by a robotic user, and the data collected from such simulations forms
    the basis of actionable steps, such as triggering an alert on an application performance
    attribute or the availability of the application itself. Generally, the following
    are the application states that can be monitored by using synthetic monitoring
    tools and methods:'
  prefs: []
  type: TYPE_NORMAL
- en: The application is available in all respects. This might involve checking on
    multiple web or API endpoints of the application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application performance in terms of the velocity with which an application
    responds to user requests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The applications can execute the business transactions as designed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third-party components used in building the application system are functioning.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The desired performance of the application achieved is cost-effective and within
    budget.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most of these aspects are related to measuring user experience in terms of a
    set of metrics, and those metrics values are generated by the robotic usage of
    the application. The robotic access could be local where the application is hosted,
    in a data center or public cloud, or close to where actual users are located.
    The latter aspect of monitoring is known as last-mile monitoring, one of the types
    of monitoring that we discussed in [*Chapter 1*](B16483_01_Final_VK_ePub.xhtml#_idTextAnchor014),
    *Introduction to Monitoring*. There are dedicated SaaS monitoring solutions that
    are available for addressing last-mile monitoring requirements. With Datadog's
    synthetic monitoring features, it is also possible to address typical last-mile
    monitoring requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'The synthetic monitoring feature of Datadog provides a variety of checks that
    will simulate the end user experience. The tests are launched from Datadog-managed
    locations around the world, and you have the option to configure from where such
    tests originate. The following are the categories of checks that can be performed
    using Datadog''s synthetic monitoring:'
  prefs: []
  type: TYPE_NORMAL
- en: '**DNS**: Checks whether domains are resolved and how quickly they are resolved
    in regions where users are located'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ICMP**: Pings the hosts that are enabled with an ICMP protocol for their
    availability and access from where the users are located'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`80`), HTTPS (`443`), and SSH (`22`), and any custom port'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTTP/HTTPS**: Checks whether a web application endpoint is up and responds
    properly'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTTP workflow**: Validates a multi-request workflow covering a full transaction
    by chaining HTTP requests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SSL**: Validates and checks the expiration of SSL certificates associated
    with HTTPS endpoints'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, let''s see whether some of these checks could be configured in Datadog.
    The synthetic monitoring-related options are accessible from the main menu, **UX
    Monitoring**. Navigate to **UX Monitoring** | **New Test** and then click on the
    **Get Started** link, and you will be presented with the options as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.5 – Synthetic monitoring options'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.5_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.5 – Synthetic monitoring options
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a sample TCP test that will check the access to an SFTP host from
    Paris and Tokyo. To do that, the public IP address of the SFTP server or its domain
    name is needed to configure the test. As the SFTP service is available on port
    `22`, the check can be done on that port.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on **New API Test** and select the **TCP** tab to get to the form where
    a TCP test can be configured. The first part of the form is shown in the following
    screenshot, where the name of the test and the information about the SFTP server
    can be provided:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.6 – Creating a synthetic TCP test; server details'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.6_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.6 – Creating a synthetic TCP test; server details
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `Test` `URL` link on the form, basic access to the server on port
    `22` can be verified. Access from specific regions can then be added to the test,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.7 – Creating a synthetic TCP test; selecting access locations'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.7_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.7 – Creating a synthetic TCP test; selecting access locations
  prefs: []
  type: TYPE_NORMAL
- en: Multiple Datadog-managed locations are available to choose from, as listed in
    the preceding screenshot. Access to the SFTP server will originate from the selected
    locations. The remainder of the options are similar to those available for setting
    up a standard Datadog monitor in general.
  prefs: []
  type: TYPE_NORMAL
- en: The other types of TCP tests – **HTTP**, **DNS**, **SSL**, and **ICMP** – can
    be configured by following similar steps by selecting the related tab on the **New
    API Test** form.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a real-life scenario, there will be multiple tests such as this configured
    to verify that various components and workflows of an application are available
    to the end user in the regions where they are located. The availability status
    dashboard will look like the one in the following screenshot, and it can be accessed
    by navigating to **UX Monitoring** | **Synthetic Tests**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.8 – Synthetic Monitoring dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.8_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.8 – Synthetic Monitoring dashboard
  prefs: []
  type: TYPE_NORMAL
- en: 'The overall uptime status will be presented on this dashboard and the results
    can be filtered using different conditions, such as the region of test origination.
    The individual tests are listed at the bottom of this dashboard and by clicking
    a specific item, the details of that test can be viewed and updated, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.9 – Details of a synthetic TCP test'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.9_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.9 – Details of a synthetic TCP test
  prefs: []
  type: TYPE_NORMAL
- en: From this page, the test can be paused or be run on an ad hoc basis without
    having to wait for the next scheduled run. These checks look simple, but are very
    powerful, because with these in place, you can access services as end users do
    using the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the *Browser Test*, it is possible to simulate the device and the browser
    used by the user when accessing a web application. To create a *Browser Test,*
    navigate to **UX Monitoring** | **New Test** | **New Browser Test**, and you will
    be presented with the new test creation form, as indicated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.10 – Synthetic test simulating browsers and devices used for access'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.10_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.10 – Synthetic test simulating browsers and devices used for access
  prefs: []
  type: TYPE_NORMAL
- en: To complete the creation of this test, the browsers, devices, and locations
    need to be selected. Depending on the browser that you are using to access the
    Datadog dashboard, a Datadog-supplied browser plugin has to be installed as well
    for recording the website workflow that needs to be simulated by the test. You
    will get an option to record the workflow and save it as part of creating the
    test.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the test results are in, you can view this on the dashboard, as in the
    following sample screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.11 – A sample Browser Test result'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.11_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.11 – A sample Browser Test result
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, there are multiple issues unearthed by the sample test. You
    can drill down to the report and view the details of each issue. A test result
    such as this is very valuable in terms of fine-tuning the web application as you
    are now able to see how the users access the application from a specific combination
    of computing device and browser.
  prefs: []
  type: TYPE_NORMAL
- en: Synthetic monitoring is essentially about simulating the user experience that
    you can measure. That's why it's considered part of APM because the inputs from
    synthetic monitoring tests can be used to fine-tune the applications for a better
    user experience. In the next section, you will learn about the security monitoring
    features that the Datadog monitoring platform offers.
  prefs: []
  type: TYPE_NORMAL
- en: Security monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cybersecurity is a far more important and essential area to cover in the cloud
    environment because the application needs to be accessed via the internet and,
    in most cases, the application itself is hosted in a public cloud. The security
    of running an application in your own data center and making it accessible only
    in your private network is no longer an option. The infrastructure and the applications
    that are exposed to external attacks should be protected and hardened. There is
    an ecosystem of software applications and services addressing a plethora of cybersecurity
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: Another aspect is the requirement of meeting security and privacy and compliance
    standards for doing business, especially if the application is catering to the
    healthcare and financial industries. Compliance requirements are dictated by laws
    applicable in the jurisdiction of doing business, and security standards are demanded
    by customers. Compliance requirements are usually audited by third-party service
    providers in that space, and those requirements must be monitored and recorded
    as evidence for the auditors.
  prefs: []
  type: TYPE_NORMAL
- en: Datadog's *Security and Compliance Monitoring* feature has multiple options
    that can be rolled out in an organization to address common cybersecurity and
    compliance requirements. Also, Datadog enjoys the advantage of being a unified
    platform for various monitoring types. By combining the analysis of logs and traces
    that are sourced from the infrastructure and applications, and the powerful monitoring
    features such as alerting and event management, Datadog can also be configured
    as a SIEM platform. Having a SIEM tool is usually a requirement to demonstrate
    that an organization has a sound cybersecurity practice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s review the security features currently available on the Datadog
    platform and look at the general steps involved in starting to use those features.
    The security options can be accessed from the main **Security** menu, as in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.12 – Datadog Security and Compliance monitoring options'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.12_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.12 – Datadog Security and Compliance monitoring options
  prefs: []
  type: TYPE_NORMAL
- en: 'The general steps in enabling the security features are these: source the logs,
    define the security rules, and monitor for security signals that are flagged from
    the source information based on the security rules. The **Runtime Security** feature
    helps to detect threats to production infrastructure where the application workloads
    are run by monitoring system-level activities, such as changes in a file or process.
    The **Compliance Findings** feature helps to audit the production infrastructure
    for compliance with industry-standard security regimes, such as the **Payment
    Card Industry** (**PCI**) data security standard and the **Center for Internet
    Security** (**CIS**), which audits infrastructure for vulnerabilities.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's look at how information is fed into Datadog for security analysis
    and use the insights for hardening the infrastructure and applications.
  prefs: []
  type: TYPE_NORMAL
- en: Sourcing the logs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Datadog can consume logs from a variety of public cloud platforms and security
    products to look for security threats. The following screenshot lists the general
    category of sources that can be integrated with Datadog for sourcing the logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.13 – Sources of logs for security analysis'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.13_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.13 – Sources of logs for security analysis
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the four categories of sources of logging information that
    Datadog can analyze for security threats:'
  prefs: []
  type: TYPE_NORMAL
- en: Public cloud platforms – AWS, Azure, and GCP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Container products and services, such as **Docker**, **Kubernetes**, and **Amazon
    EKS**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identity providers – **Okta**, **Auth0**, **G Suite**, and **Azure Active Directory**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security products, mainly services available on **AWS**, and other products
    such as **HashiCorp Vault**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The integration methods are specific to each product, and by selecting a product
    listed on the preceding dashboard, the installation procedure can be viewed.
  prefs: []
  type: TYPE_NORMAL
- en: Defining security rules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are predefined rules available out of the box that can be used to analyze
    the logs collected by Datadog from the various sources mentioned in the last section.
    The security rules dashboard can be accessed by navigating to **Security** | **Security
    Rules** and the rules available are listed on the dashboard, as in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.14 – Security rules dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_14.14_B16483.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.14 – Security rules dashboard
  prefs: []
  type: TYPE_NORMAL
- en: The rules can be enabled or disabled from this dashboard. Also, custom rules
    can be added by using the **New Rule** link.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring security signals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A security signal is created when a potential threat is located in the logs
    based on the active security rules. This is similar to generating an alert by
    a monitor when a metric value crosses a threshold. Like an alert, a signal can
    be broadcast to a variety of audiences. By navigating to **Security** | **Security
    Signals**, these signals can also be viewed on the **Security Signals** dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: We did a general overview of the security features available on the Datadog
    platform in this section. It's an area that's still a work in progress, but the
    general direction it has taken is very encouraging in terms of the usability of
    the available features and the simplicity of integration with sources of security
    information. In the next section, let's look at the best practices related to
    the topics that have been discussed in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You have learned about advanced monitoring, APM, and the security features
    available on the Datadog platform, so now let''s look at the related best practices
    in those areas:'
  prefs: []
  type: TYPE_NORMAL
- en: The instrumentation for generating application traces and profiling for APM
    must be incorporated in the build and deployment process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define a complete set of application metrics for each service and expose those
    for easy consumption by Datadog.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plan to collect all application logs and, if needed, define new ones so that
    the application state can be observed easily.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determine the geographical locations of the users of the application for fine-tuning
    synthetic tests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publish the list of supported devices and browsers. Based on the information
    available in synthetic monitoring reports, fine-tune the application for compatibility
    with access devices and browsers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For effective security monitoring, define custom security rules that are relevant
    to the organization. Disable out-of-the-box rules that might generate spurious
    messages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This brings us to the summary section.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned about some of the monitoring features that
    are relatively new on the Datadog platform and that continue to evolve. Both observability
    and synthetic monitoring are discussed along with APM, but the related tools and
    concepts are generic enough to be applicable to a wider context of monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: With this chapter, the book is concluded and the recommended next step for you
    is to roll out Datadog in your environment to acquire expertise. With features
    available to cover almost every monitoring type, such as infrastructure monitoring,
    log aggregation and indexing, last-mile monitoring, APM, and security monitoring,
    Datadog is one the most comprehensive monitoring platforms available on the market.
    One of its major attractions is its ability to unify monitoring with the help
    of a variety of monitoring features available on the platform and its ability
    to correlate information across products.
  prefs: []
  type: TYPE_NORMAL
- en: We wish you good luck with rolling out proactive monitoring using Datadog, which
    is an excellent choice for this purpose.
  prefs: []
  type: TYPE_NORMAL
