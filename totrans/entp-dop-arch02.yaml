- en: '*Chapter 1*: Defining the Reference Architecture for Enterprise DevOps'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第1章*：为企业DevOps定义参考架构'
- en: This chapter is an introduction to **DevOps architecture** for the **enterprise**.
    First, we'll look at the business of an enterprise. The business sets its goals
    and with that, defines the criteria for IT delivery, which supports these business
    goals. Therefore, the DevOps architecture must be aligned with the enterprise
    architecture. In this chapter, we will learn how to set up the reference architecture
    and design the different DevOps components while working with the **VOICE model**.
    Next, we'll learn how to deal with service levels and key performance indicators
    in DevOps models.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于**企业**的**DevOps架构**的介绍。首先，我们将关注企业的业务。业务制定其目标，并据此定义支持这些业务目标的IT交付标准。因此，DevOps架构必须与企业架构对齐。在本章中，我们将学习如何设置参考架构，并在使用**VOICE模型**的过程中设计不同的DevOps组件。接下来，我们将学习如何在DevOps模型中处理服务级别和关键绩效指标。
- en: By the end of this chapter, you will have a clear view of how to start using
    the architecture and defining a DevOps strategy. An important lesson you'll learn
    in this chapter is that setting up DevOps in an enterprise becomes more complicated
    when organizations have outsourced large parts of their IT delivery. During this
    chapter, you will learn how to engage DevOps in enterprises with sourcing models.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，你将清楚地了解如何开始使用架构并定义DevOps策略。在本章中，你将学到一个重要的课程：当组织外包了大量IT交付工作时，在企业中建立DevOps变得更加复杂。在本章中，你将学到如何在拥有外包模型的企业中引入DevOps。
- en: 'We''re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将覆盖以下主要内容：
- en: Introducing DevOps in IT delivery
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在IT交付中引入DevOps
- en: Creating a reference architecture
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建参考架构
- en: Introducing DevOps components
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引入DevOps组件
- en: Understanding SLAs and KPIs in DevOps
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解DevOps中的SLA和KPI
- en: Working with the VOICE model
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用VOICE模型
- en: Introducing DevOps in IT delivery
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在IT交付中引入DevOps
- en: This book will focus on implementing and scaling DevOps in large enterprises.
    Before we get into the specific challenges of an enterprise, we need to have a
    common understanding of DevOps.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将重点讨论在大型企业中实施和扩展DevOps。在深入探讨企业面临的具体挑战之前，我们需要对DevOps有一个共同的理解。
- en: Somewhere, businesses and their leaders must have thought that it was a good
    idea to put developers and operators into one team. In essence, DevOps is the
    *development* and *operations* stages working as one team, on the same product
    and managing it. You build it, you run it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有些地方，企业和他们的领导者一定曾认为，将开发人员和运维人员放在同一个团队是个好主意。实际上，DevOps就是*开发*和*运维*阶段作为一个团队共同工作，管理同一个产品。你构建它，你运营它。
- en: DevOps has gained a lot of momentum over the past decade, especially in enterprises.
    But implementing DevOps turned out to be quite difficult. The reason for this
    is that enterprises are not organized in a structure that works for DevOps. From
    the last century onward, most enterprises outsourced a lot of their IT. Most of
    the IT muscles of a major enterprise are therefore still with system integrators
    and software houses. DevOps becomes more difficult when development is done by
    a software house and operations is outsourced to a system integrator.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去十年中，DevOps在企业中获得了极大的关注和发展。但实施DevOps却变得相当困难。其原因在于，企业的组织结构并不适合DevOps的运作。从上世纪开始，大多数企业将其IT业务外包。一个大型企业的IT能力大部分仍然掌握在系统集成商和软件公司手中。当开发由软件公司完成，而运维由系统集成商外包时，DevOps的实施变得更加困难。
- en: DevOps starts with the business. By bringing teams together into a development
    and operations environment that traditionally work in silos, an enterprise can
    speed up development and release new products and services. The rationale behind
    this is that less time is needed to do handovers between development and operations.
    Also, by removing the barrier between development and operations, the quality
    of products will improve since DevOps includes *quality assurance*, *testing*,
    and *security*. Customer feedback is continuously evaluated and included in new
    iterations of the product.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps从业务出发。通过将传统上分离运作的开发和运维团队聚集到一个共同的开发和运维环境中，企业能够加快开发进程并发布新的产品和服务。这背后的原理是，开发和运维之间的交接所需的时间减少了。此外，通过消除开发和运维之间的隔阂，产品的质量会得到提升，因为DevOps包括了*质量保证*、*测试*和*安全性*。客户反馈会被持续评估，并纳入到产品的新版本中。
- en: 'The benefits of DevOps are as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps的好处如下：
- en: It brings business, development, and operations together, without silos.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将业务、开发和运营结合在一起，没有孤岛。
- en: Enterprises can respond faster to demands from the market because they're absorbing
    continuous feedback.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 企业能够更快速地响应市场需求，因为它们在吸收持续的反馈。
- en: Products are continuously improved and upgraded with new features, instead of
    planning for major next releases.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品不断改进和升级，加入新功能，而不是计划下一个重大版本发布。
- en: Through automation in DevOps pipelines, enterprises can reduce costs in terms
    of both development and operations and, at the same time, improve the quality
    of their products.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在 DevOps 流水线中的自动化，企业可以降低开发和运营的成本，同时提高产品的质量。
- en: It starts with the business and thus the starting point is the **enterprise
    architecture**. This is where the business goals are set and we define how these
    goals will be met. IT delivery is key to meeting these goals. In large enterprises,
    the architecture also defines the IT delivery processes and the demarcation between
    these processes. We will look at IT delivery and its processes in more detail
    in the next section.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 它从业务开始，因此起点是**企业架构**。这是设定业务目标的地方，我们定义如何实现这些目标。IT 交付是实现这些目标的关键。在大型企业中，架构还定义了
    IT 交付流程及其之间的划分。我们将在下一节中更详细地探讨 IT 交付及其流程。
- en: Understanding IT delivery in enterprises
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解企业中的 IT 交付
- en: As we mentioned at the beginning of this section, large enterprises typically
    have an operating model that is based on outsourcing. This makes implementing
    DevOps more complicated. The enterprise architect will have to have a very clear
    view of the demarcation between the different processes and who's responsible
    for fulfilling these processes. Who is responsible for what, when, and why? The
    next question is, how does it map to DevOps?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在本节开始时提到的，大型企业通常采用基于外包的运营模式。这使得实施 DevOps 更加复杂。企业架构师需要非常清楚地了解不同流程之间的划分，以及谁负责执行这些流程。谁在什么时间、以什么方式负责什么？下一个问题是，这如何与
    DevOps 对接？
- en: 'First, we need to understand what the main processes are in IT delivery. These
    processes are as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要理解 IT 交付中的主要流程。这些流程如下：
- en: '**Business demand**: A business needs to understand what the requirements are
    for a product that it delivers. These requirements are set by the people who will
    use the product. Customers will demand a product that meets a specific functionality
    and quality. The architecture must focus on delivering an end product that satisfies
    the needs of the customers of an enterprise. IT delivery is a crucial part of
    delivering an end-product. In DevOps, an assigned product owner makes sure that
    the product meets the requirements. The product owner will have to work closely
    with the enterprise architect. In the *Creating a reference architecture* section,
    we will learn that the enterprise architecture and DevOps are complementary.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**业务需求**：企业需要了解其交付的产品的需求是什么。这些需求由将使用产品的人来设定。客户会要求产品具备特定的功能和质量。架构必须聚焦于交付满足企业客户需求的最终产品。IT
    交付是交付最终产品的关键部分。在 DevOps 中，指定的产品负责人确保产品满足需求。产品负责人必须与企业架构师密切合作。在*创建参考架构*一节中，我们将学习企业架构与
    DevOps 是如何互补的。'
- en: '**Business planning**: Once the demand is clear, the product needs to be scoped.
    In DevOps, product teams typically start with a **Minimum Viable Product** (**MVP**),
    a first iteration of the product that does meet the requirements of the customer.
    When designing the MVP, processes need to be able to support the development and
    operations of that product. Hence, business planning also involves quality management
    and testing, two major components of IT delivery. This needs to be reflected in
    the architecture.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**业务规划**：一旦需求明确，产品就需要进行范围定义。在 DevOps 中，产品团队通常从**最小可行产品**（**MVP**）开始，这是产品的第一次迭代，满足客户需求。在设计
    MVP 时，流程需要能够支持该产品的开发和运营。因此，业务规划还涉及质量管理和测试，这两个是 IT 交付的关键组成部分。这需要在架构中有所体现。'
- en: '**Development**: In DevOps, the product team will work with user stories. A
    team must break down the product into components that can be defined as *deliverables*.
    For this, we must have a clear definition of the *user story*. A user story always
    has the same format: *As a [function of the user] I want to [desire of the user]
    so that I [description of the benefits a user will get if the function has been
    delivered and the goal is achieved]*. The key of any user story is its acceptance
    criteria, or the **Definition of Done** (**DoD**). When is the product really
    finished and does it meet the goals that have been set? In [*Chapter 3*](B17492_03_ePub_RK.xhtml#_idTextAnchor040),
    *Architecting for DevOps Quality*, you will learn more about the DoD.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发**：在DevOps中，产品团队将与用户故事一起工作。团队必须将产品拆解为可以定义为*交付物*的组件。为此，我们必须清晰地定义*用户故事*。一个用户故事总是遵循相同的格式：*作为[用户的功能]，我想要[用户的需求]，以便我[描述当功能实现且目标达成时，用户将获得的收益]*。任何用户故事的关键是其接受标准，或称为**完成定义**（**DoD**）。产品何时真正完成，并且满足已设定的目标？在[*第3章*](B17492_03_ePub_RK.xhtml#_idTextAnchor040)，*为DevOps质量架构*中，你将了解更多关于DoD的信息。'
- en: One important remark that must be made is that when we refer to a product, we
    are talking about a product that is code-based.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一个必须指出的重要事项是，当我们提到产品时，我们指的是基于代码的产品。
- en: Tip
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'There''s one major movement in IT delivery: everything in IT is shifting to
    code. It''s one of the main principles of *The Modern DevOps Manifesto*: *Everything
    is code*. It applies to applications, but also to infrastructure components such
    as network devices, servers, and storage devices. Therefore, DevOps not only includes
    software development and operations for applications, but also for infrastructure
    with **Infrastructure as Code** and **Configuration as Code**. Public clouds such
    as AWS, Azure, and Google Cloud Platform play a significant role in these developments.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: IT交付中有一个主要的趋势：一切都在向代码转移。这是*现代DevOps宣言*的核心原则之一：*一切皆代码*。这不仅适用于应用程序，也适用于网络设备、服务器、存储设备等基础设施组件。因此，DevOps不仅包括应用程序的软件开发和运维，也包括基础设施的**基础设施即代码**（Infrastructure
    as Code）和**配置即代码**（Configuration as Code）。AWS、Azure和Google Cloud等公共云在这些发展中起到了重要作用。
- en: 'In other words, the team is developing code: application code, Infrastructure
    as Code, and also test code. A developer will work on a specific piece of code
    that has been defined in the product backlog. The whole end product – for instance,
    an application – has been broken down into **product backlog items** (**PBIs**),
    where each developer will work on a PBI. As soon as a piece of code is ready,
    it needs to be tested on itself, but also as a component of the end product. Due
    to this, in development, code needs to be merged. This merging process is triggered
    by a *pull request*, where the developer requests to have the code merged and
    joined to the end product, thus fulfilling the user story. This is done using
    **pipelines**.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，团队正在开发代码：应用代码、基础设施即代码（Infrastructure as Code）以及测试代码。开发人员将专注于产品待办事项中定义的具体代码片段。整个最终产品——例如一个应用程序——已经被拆分成**产品待办事项**（**PBIs**），每个开发人员将处理一个PBI。代码一旦准备好，就需要进行测试，不仅要单独测试，还需要作为最终产品的一个组件进行测试。因此，在开发过程中，代码需要被合并。这个合并过程是通过*拉取请求（pull
    request）*触发的，开发人员请求将代码合并并加入到最终产品中，从而完成用户故事。这一过程通过**管道（pipelines）**来实现。
- en: In [*Chapter 2*](B17492_02_ePub_RK.xhtml#_idTextAnchor027), *Managing DevOps
    from Architecture*, we will discuss setting up and managing pipelines, both for
    application development and for infrastructure.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第2章*](B17492_02_ePub_RK.xhtml#_idTextAnchor027)，*从架构管理DevOps*中，我们将讨论如何设置和管理管道，既包括应用开发，也包括基础设施管理。
- en: 'We can divide the whole DevOps cycle into two major phases called deployment
    and operations, as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将整个DevOps周期分为两个主要阶段：部署和运维，如下所示：
- en: '**Deployment**: In this stage, the code is tested and validated so that it
    matches the user story. It will now be deployed to the production state. Testing
    and releasing to production is a process that, ideally, is automated in the pipeline,
    as is integration. Before the code is actually pushed to production, it also needs
    to be merged with configuration. Think of security packages that need to be applied
    to components that run in production. In the test and quality process, the full
    package – *application code* and *infrastructure components* – needs to be validated
    as "*ready for production*". The result should be a "live" product. If, when you''re
    performing testing and validation, bugs, flaws, or violations of security rules
    are discovered, the product will be sent back to an earlier stage in the development
    process.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署**：在这个阶段，代码经过测试和验证，以确保它与用户故事一致。现在，它将被部署到生产环境。测试和发布到生产环境的过程，理想情况下，在流水线中是自动化的，集成也是如此。在代码实际推送到生产之前，它还需要与配置进行合并。想想需要应用到生产环境中运行组件的安全包。在测试和质量过程中，完整的包——*应用程序代码*和*基础设施组件*——需要被验证为“*准备好生产*”。最终结果应该是一个“上线”产品。如果在进行测试和验证时发现了错误、缺陷或违反安全规则的情况，产品将被送回开发过程的早期阶段。'
- en: '**Operations**: After deployment, the live product needs to be operated on.
    For this, enterprises work according to **IT Service Management** (**ITSM**) principles.
    The fact that operators are in the same team as developers doesn''t mean that
    the ITSM processes are not valid anymore. An example is when incidents occur and
    the incident management process must be triggered. In operations, we distinguish
    between the following main processes:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运维**：部署后，生产环境中的产品需要进行运维。为此，企业按照**IT 服务管理**（**ITSM**）原则进行操作。运营人员与开发人员在同一团队中，并不意味着
    ITSM 过程就不再有效。一个例子是，当发生事件时，必须启动事件管理过程。在运维中，我们区分以下主要过程：'
- en: a) Request fulfillment
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) 请求履行
- en: b) Incident management
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) 事件管理
- en: c) Problem management (postmortem)
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) 问题管理（事后分析）
- en: d) Configuration management
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) 配置管理
- en: e) Change management
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: e) 变更管理
- en: 'But DevOps adds something to this; that is, **continuous integration and continuous
    delivery** (**CI/CD**):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 但 DevOps 增加了一些内容；即**持续集成与持续交付**（**CI/CD**）：
- en: '**Continuous integration** (**CI**): CI is built on the principle of a shared
    repository, where code is frequently updated and shared across teams that work
    in the cloud environments. CI allows developers to work together on the same code
    at the same time. The changes in the code are directly integrated and ready to
    be fully tested in different test environments.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）：CI 基于共享仓库的原则，在该仓库中，代码经常被更新并在云环境中跨团队共享。CI 使得开发人员能够在同一时间共同工作于同一代码上。代码中的更改会直接集成，并准备好在不同的测试环境中进行全面测试。'
- en: '**Continuous delivery** (**CD**): This is the automated transfer of software
    to test environments. The ultimate goal of CD is to bring software to production
    in a fully automated way. Various tests are performed automatically. After deployment,
    developers immediately receive feedback on the functionality of their code.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续交付**（**CD**）：这是将软件自动传输到测试环境。CD 的终极目标是以完全自动化的方式将软件交付到生产环境。各种测试会自动执行。部署后，开发人员会立即收到有关其代码功能的反馈。'
- en: CI/CD requires a *feedback loop* to make it continuous. It needs feedback about
    the delivered products and services. This is then looped back to the developers
    and from there, new iterations are planned to improve the product or service.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD 需要一个*反馈循环*来保持其连续性。它需要反馈已交付的产品和服务。这些反馈会回传给开发人员，进而规划新一轮的迭代，以改善产品或服务。
- en: This works well if an enterprise controls the full cycle, but large enterprises
    have outsourced a vast number of activities to other companies. The rationale
    behind this sourcing strategy is typically because a certain activity is not perceived
    as a core activity, and it can be done more cost-effectively by a company that
    specializes in such activities.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个企业控制着整个周期，这样运作是顺利的，但大型企业已经将大量活动外包给其他公司。这种外包策略的理由通常是某个活动被认为不是核心活动，而且由专门从事该类活动的公司来执行会更具成本效益。
- en: However, enterprises have gone through a massive change over the last decade.
    IT has become more and more important and, in some cases, has become a core activity.
    Banks are a good example. Banks are IT companies nowadays, and the output of their
    IT delivery is financial products. Due to customer demands, releases of these
    products with new features have become more frequent, with up to several releases
    per day. The consequence of this is a major shift in IT delivery itself.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，企业在过去十年经历了巨大的变化。IT 变得越来越重要，在某些情况下，已成为核心活动。银行就是一个很好的例子。如今，银行是 IT 公司，它们的 IT
    交付输出是金融产品。由于客户需求，这些产品的发布频率逐渐增加，甚至达到一天几次。其结果是 IT 交付本身发生了重大转变。
- en: The next few sections will discuss how IT delivery works in sourcing models
    and how it impacts successfully implementing DevOps.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的几个部分将讨论 IT 交付在采购模型中的运作方式，以及它如何影响成功实施 DevOps。
- en: IT delivery in sourcing models
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IT 交付在采购模型中的运作
- en: 'In this section, we will look at the **sourcing model** in large enterprises.
    This can be quite complicated, but if we learn to think in terms of sourcing **tiers**,
    it becomes more tangible and comprehensible. This is the **target enterprise model**,
    as shown in the following diagram:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将研究大型企业中的 **采购模型**。这可能相当复杂，但如果我们学会以采购 **层级** 的视角来思考，它就会变得更加具体和易于理解。这就是
    **目标企业模型**，如下图所示：
- en: '![Figure 1.1 – Target enterprise model'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.1 – 目标企业模型'
- en: '](img/B17492_01_001.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_01_001.jpg)'
- en: Figure 1.1 – Target enterprise model
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – 目标企业模型
- en: 'Using this model, we can break down IT delivery into three tiers:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此模型，我们可以将 IT 交付拆解为三个层级：
- en: '**Tier 1**: **Strategic** level. This is the tier for enterprise governance.
    The enterprise defines the strategic business goals that are translated in the
    enterprise architecture. The overall architecture principles are the outcome of
    the enterprise architecture and drive the IT architecture, including DevOps. We
    will discuss this further in the *Creating the reference architecture* section.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Tier 1**: **战略**层级。这是企业治理的层级。企业定义了战略业务目标，这些目标在企业架构中得以体现。总体架构原则是企业架构的产物，并推动
    IT 架构的发展，包括 DevOps。在*创建参考架构*部分，我们将进一步讨论这一点。'
- en: '**Tier 2**: **Tactical** level. This the tier where the IT architecture is
    developed, including DevOps. It''s also the tier where **service-level agreements**
    (**SLAs**) and **key performance indicators** (**KPIs**) are defined to measure
    the outcomes of IT delivery. You will learn more about this in the *Understanding
    SLAs and KPIs in DevOps* section.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Tier 2**: **战术**层级。这是开发 IT 架构的层级，包括 DevOps。也是定义 **服务水平协议**（**SLAs**）和 **关键绩效指标**（**KPIs**）的层级，用于衡量
    IT 交付的成果。你将在 *理解 DevOps 中的 SLAs 和 KPIs* 部分学到更多内容。'
- en: '**Tier 3**: **Operational** or **services** level. At this level, the components
    of the architecture are detailed, including the interfaces to the various suppliers
    and service providers. The agreements that are defined in tier 2 must be adopted
    at this level so that all involved developers and operators work in the same way,
    with the same tools and with the same understanding of the goals. In the *Understanding
    DevOps components* section, we will learn more about this.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Tier 3**: **操作**或 **服务**层级。在这个层级，架构的组件被详细定义，包括与各种供应商和服务提供商的接口。第 2 层定义的协议必须在这个层级中得到采纳，以确保所有相关的开发人员和运维人员以相同的方式工作，使用相同的工具，并对目标有共同的理解。在
    *理解 DevOps 组件* 部分，我们将学到更多内容。'
- en: In practice, we see service providers also acting on tier 2; for instance, if
    they are involved in larger programs spanning multiple products. Tier 2 then becomes
    the orchestration level, where a provider is responsible for aligning different
    streams in the lower tier. The key takeaway is that tier 1 should always be the
    enterprise level, where the overall governance and architecture is defined.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们看到服务提供商也在第 2 层级上运作；例如，如果他们参与了跨多个产品的大型项目。此时，第 2 层级就成为了协调层，服务提供商负责调整较低层级中的不同工作流。关键要点是，第
    1 层级始终应该是企业层级，在这里定义总体治理和架构。
- en: In this section, we learned that a lot of enterprises have outsourced larger
    parts of their IT and that this can complicate the process of implementing DevOps.
    We learned that the strategy for the entire enterprise is at tier 1, the highest
    tier. DevOps sits on the lowest tiers, where projects are actually executed. This
    is the tier where the enterprise interfaces with sourcing companies. However,
    this only works if we have a clear view of the architecture. We will discuss this
    in the next section.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解到很多企业已经将其大部分IT外包，这可能会使实施DevOps的过程变得复杂。我们了解到，整个企业的战略位于第1层级，即最高层级。DevOps则位于最底层的层级，在这里项目实际上被执行。这个层级是企业与外包公司接触的地方。然而，只有在我们清晰了解架构的情况下，这种模式才能奏效。我们将在下一节讨论这一点。
- en: Creating a reference architecture
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建参考架构
- en: In the previous sections, we looked at the different processes in IT delivery,
    how it is integrated with DevOps, and how this is executed in sourcing models.
    We have learned that it starts with a clear architecture that clearly defines
    the processes.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几节中，我们探讨了IT交付中的不同流程，它是如何与DevOps集成的，以及如何在外包模型中执行这一过程。我们已经了解到，DevOps从一个明确的架构开始，清晰地定义了流程。
- en: Any **DevOps architecture** will have to address planning, development, integration,
    deployment, and operations. But we have to keep in mind why we are doing DevOps,
    which is to achieve business goals in a faster, more agile way where we continuously
    improve products. The DevOps architecture does not stand on its own; it has to
    be linked to the enterprise architecture.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 任何**DevOps架构**都必须解决规划、开发、集成、部署和运维的问题。但我们必须记住我们为什么要做DevOps，那就是以更快速、更敏捷的方式实现业务目标，并不断改进产品。DevOps架构并非独立存在；它必须与企业架构相连接。
- en: 'An enterprise architect will most likely start from **The Open Group Architecture
    Framework** (**TOGAF**). TOGAF is globally accepted as the standard for enterprise
    and business architecture. It uses the **Architecture Development Method** (**ADM**)
    to draft the architecture. The ADM is shown in the following diagram:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 企业架构师很可能会从**开放组架构框架**（**TOGAF**）开始。TOGAF被全球广泛接受为企业和业务架构的标准。它使用**架构开发方法**（**ADM**）来草拟架构。下面的图示展示了ADM：
- en: '![Figure 1.2 – The ADM cycle in TOGAF'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.2 – TOGAF中的ADM周期](img/B17492_01_002.jpg)'
- en: '](img/B17492_01_002.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_01_002.jpg)'
- en: Figure 1.2 – The ADM cycle in TOGAF
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 – TOGAF中的ADM周期
- en: Just like DevOps, the ADM is a cycle – except for the preliminary phase, which
    is where the need for an architecture is formulated. This has to be done at the
    tier 1 level in the sourcing model that we discussed in the previous section,
    *IT delivery in sourcing models*. The strategy and enterprise architecture is
    always set at tier 1\.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 就像DevOps一样，ADM也是一个循环——除了初步阶段，这是在该阶段确定架构需求。这个过程必须在我们前一节讨论的外包模型的第1层级中完成，*IT交付在外包模型中*。战略和企业架构总是设置在第1层级。
- en: The core of ADM is the sequence in *architecture design*, which is business
    first, and setting the principles and requirements for the actual solutions. These
    principles drive the architecture for data usage, the applications, and finally
    the technology that will be used. This is important because architecture is not
    about technology in the first place. Technology is purely the ability to achieve
    business goals at the enterprise level.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: ADM的核心是*架构设计*的顺序，即以业务为先，并为实际解决方案设定原则和要求。这些原则驱动数据使用架构、应用程序以及最终将使用的技术。这一点很重要，因为架构首先并不是关于技术的。技术仅仅是实现企业级业务目标的手段。
- en: ADM assumes that the architecture is not static. It changes as soon as the business
    requirements change. If the business demands change, there will likely be a need
    to adapt the architecture and the forthcoming solutions. This is where TOGAF and
    DevOps meet, since the two frameworks complement each other.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: ADM假设架构不是静态的。当业务需求发生变化时，架构会随之变化。如果业务需求改变，可能需要调整架构以及即将推出的解决方案。这就是TOGAF和DevOps相遇的地方，因为这两个框架是互补的。
- en: 'The following table shows where the enterprise architecture and DevOps are
    complementary. To put it very simply, the enterprise architecture sets the *strategic
    business goals*, where DevOps translates this at a more tangible, tactical level
    and really tells us how to achieve these goals by developing products and executing
    operations. The following table shows the main differences between the **enterprise
    architecture** (**EA**) and DevOps:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 下表显示了企业架构和 DevOps 之间的互补性。简单来说，企业架构设定了*战略商业目标*，而 DevOps 将其转化为更具操作性的战术层面，真正告诉我们如何通过开发产品和执行运维来实现这些目标。下表显示了
    **企业架构**（**EA**）与 DevOps 之间的主要区别：
- en: '![](img/B17492_table_1.1.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17492_table_1.1.png)'
- en: In the next section, we will study the DevOps principles.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将研究 DevOps 原则。
- en: Understanding the DevOps principles
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 DevOps 原则
- en: The enterprise architecture is executed on tier 1, the strategic level. This
    is where the goals are set for the entire enterprise. The next level is tier 2,
    where DevOps teams will translate the goals into product features and start developing.
    DevOps teams will have to work according to a set of principles.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 企业架构在一级层面执行，即战略层面。在这里，设定整个企业的目标。下一个层级是二级层面，DevOps 团队将在此将目标转化为产品特性并开始开发。DevOps
    团队必须根据一系列原则进行工作。
- en: 'In this section, we will look at the main principles for DevOps. In this book,
    we will use the six principles from the **DevOps Agile Skills Association** (**DASA**):'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨 DevOps 的主要原则。本书中，我们将采用来自 **DevOps 敏捷技能协会**（**DASA**）的六项原则：
- en: '**Customer-centric action**: Develop an application with the customer in mind
    – what do they need and what does the customer expect in terms of functionality?
    This is also the goal of another concept, domain-driven design, which contains
    good practices for designing.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**以客户为中心的行动**：开发应用时要考虑客户——他们需要什么，以及客户对功能的期望是什么？这也是另一个概念——领域驱动设计的目标，它包含了设计的最佳实践。'
- en: '**Create with the end-result in mind**: How will the product look when it is
    completely finished?'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从结果出发进行创造**：产品完全完成时，它将是什么样子？'
- en: '**End-to-end responsibility**: Teams need to be motivated and enabled to take
    responsibility from the start to the finish of the product life cycle. This results
    in mottos such as *you build it, you run it,* and *you break it, you fix it*.
    One more to add is *you destroy it, you rebuild it better*.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端到端责任**：团队需要从产品生命周期的开始到结束，具备承担责任的动力和能力。这导致了像*你构建它，你运营它*和*你破坏它，你修复它*这样的口号。另一个要加入的是*你摧毁它，你重建它更好*。'
- en: '**Cross-functional autonomous teams**: Teams need to be able to make decisions
    themselves in the development process.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨职能自主团队**：团队需要能够在开发过程中自行做出决策。'
- en: '**Continuous improvement**: This must be the goal – to constantly improve the
    product.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续改进**：这必须是目标——不断改进产品。'
- en: '**Automate as much as possible**: The only way to really gain speed in delivery
    and deployment is by automating as much as possible. Automation also limits the
    occurrence of failures, such as misconfigurations.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**尽可能自动化**：真正提高交付和部署速度的唯一方法是尽可能自动化。自动化还可以减少故障的发生，例如配置错误。'
- en: 'Adhering to these principles will lead to the following architecture statements,
    which are at the core of DevOps:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 坚持这些原则将产生以下架构声明，这些原则是 DevOps 的核心：
- en: '**Automation**: Following the principle of "everything is code," the next step
    is "automate everything." With automation, the amount of time between testing
    and deployment will be significantly reduced, enabling a faster release process.
    But automation will also lead to less manual interaction and therefore less errors.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化**：遵循“万物皆代码”的原则，下一步是“自动化一切”。通过自动化，测试和部署之间的时间间隔将大大缩短，从而加快发布过程。但是，自动化也意味着减少人工干预，从而减少错误的发生。'
- en: '**Collaboration**: Two of the six principles are cross-functional autonomous
    teams and end-to-end responsibility. This can only be achieved by collaboration.
    Development and operations will have to work very closely together to speed up
    the delivery of releases. Although this is also a cultural change, collaboration
    requires a common toolset that supports collaboration.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协作**：六项原则中的两项是跨职能自主团队和端到端责任。这只能通过协作实现。开发和运维必须紧密合作，以加快发布的速度。尽管这也是一种文化变革，但协作需要一套支持协作的共同工具集。'
- en: '**Integration**: Development and operations come together, but also, business
    and IT come together. In DevOps, we integrate the business demands with IT delivery
    using *user stories*. Code is integrated with new functionality that is coming
    out of business demand. That demand is changing faster these days, so development
    needs to keep up by means of CI. This will lead to changes in operations as well
    – they will need to adopt these new developments at the same speed. With that,
    integration is the core of DevOps.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成**：开发和运维紧密结合，同时，业务和 IT 也紧密结合。在 DevOps 中，我们使用*用户故事*将业务需求与 IT 交付进行整合。代码与来自业务需求的新功能进行集成。如今，这些需求变化得更快，因此开发需要通过持续集成（CI）来跟上变化的步伐。这也将导致运维的变化——它们需要以同样的速度采纳这些新发展。因此，集成是
    DevOps 的核心。'
- en: '**Portfolio and configuration management**: Automation and integration require
    a clear portfolio that contains the building blocks that can be automated easily.
    These building blocks are artifacts in the ADM cycle, and they represent packages
    of functionality that can be used to fulfill a requirement. A building block is
    reusable and replaceable; therefore, it must be clearly and specifically defined.
    Better said, the configuration of the building blocks needs to be well documented
    and brought under the control of configuration management. If done well, these
    building blocks will also have clear interfaces so that they can be fully automated.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**投资组合和配置管理**：自动化和集成需要一个清晰的投资组合，包含可以轻松自动化的构建模块。这些构建模块是 ADM 循环中的工件，代表可以用来满足需求的功能包。构建模块是可重用和可替换的，因此必须清晰且具体地定义。更准确地说，构建模块的配置需要得到良好的文档记录，并纳入配置管理的控制之下。如果做得好，这些构建模块还应具备清晰的接口，以便实现完全自动化。'
- en: In this section, we looked at the IT delivery processes and how they impact
    DevOps. We learned that IT delivery is driven by business demand and that this
    business demand is the starting point for any architecture. This is included in
    the TOGAF framework for the enterprise architecture. After that, we mapped the
    enterprise architecture to DevOps principles.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们讨论了 IT 交付流程及其如何影响 DevOps。我们了解到，IT 交付是由业务需求驱动的，而这一业务需求是任何架构的起点。这也包含在
    TOGAF 企业架构框架中。接下来，我们将企业架构映射到 DevOps 原则。
- en: In the next section, we will merge the DevOps principles for the architecture
    and the IT delivery principles into a reusable reference model.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，我们将结合架构的 DevOps 原则与 IT 交付原则，形成一个可重用的参考模型。
- en: Working with the DevOps architecture reference model
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 DevOps 架构参考模型
- en: The final step is to merge the DevOps principles into one model for our **reference
    architecture**. The model contains two circles. The outer circle is the *product
    circle*, while the inner circle represents the *operational activities*. As a
    logical consequence, the outer circle is governed by the enterprise itself.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将 DevOps 原则合并为一个模型，用于我们的**参考架构**。该模型包含两个圈。外圈是*产品圈*，而内圈代表*运营活动*。作为逻辑结果，外圈由企业自身进行管理。
- en: 'The inner circle is about actually delivering the products using DevOps. There
    are interfaces between the outer and inner circle: collaboration, automation,
    integration, and configuration management.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 内圈是关于如何实际使用 DevOps 交付产品。外圈和内圈之间有接口：协作、自动化、集成和配置管理。
- en: 'The reference model is shown in the following diagram:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 参考模型如下面的图所示：
- en: '![Figure 1.3 – The DevOps architecture reference model'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.3 – DevOps 架构参考模型'
- en: '](img/B17492_01_003.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_01_003.jpg)'
- en: Figure 1.3 – The DevOps architecture reference model
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – DevOps 架构参考模型
- en: In the outer circle, the business goals are translated into the architecture.
    From the architecture, a portfolio is created with building blocks to create products
    and services. Products are released to the market and adopted, but due to changing
    demands, there will be requests for changes. These changes will drive enterprise
    planning and ultimately change the business goals, meaning that the business will
    constantly have to adapt to changing demands. This is the field of enterprise
    architecture.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在外圈中，业务目标被转化为架构。从架构中创建一个投资组合，利用构建模块创建产品和服务。产品被推向市场并被采用，但由于需求变化，会有变更请求。这些变更将推动企业规划，最终改变业务目标，意味着企业将不断适应变化的需求。这是企业架构的领域。
- en: The plans and the actual builds are executed in the inner circle. In this circle,
    the product is broken down into product backlog items that will be developed and
    eventually operated on by DevOps teams. These teams do not operate by themselves,
    but on *triggers* from the outer circle. That's what the interface layer is about
    – it's the interface between the business and the execution teams doing IT delivery.
    There's collaboration between architecture and development. Releases should be
    automated as much as possible, requests and changes must be integrated with planning
    and the backlog of the DevOps teams, and builds that are pushed to production
    must be monitored and brought under the control of configuration management so
    that the architecture and portfolio stay consistent in case of changes.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 计划和实际构建在内圈执行。在这个圈子里，产品被拆分为产品待办事项，这些待办事项将由 DevOps 团队开发并最终投入运营。这些团队不是独立运作的，而是根据外圈的*触发器*进行运作。这就是接口层的意义——它是业务和执行团队之间进行
    IT 交付的接口。架构和开发之间有合作。发布应该尽可能自动化，需求和更改必须与 DevOps 团队的计划和待办事项整合，推送到生产环境的构建必须进行监控，并纳入配置管理控制，以确保架构和产品组合在发生更改时保持一致。
- en: 'Let''s have a look at how this would work in practice by plotting personas
    into the model. This will result in a *DevOps workflow* for enterprises, as shown
    in the following diagram:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过将角色投放到模型中来看看它在实践中的运作。这将为企业带来一个*DevOps 工作流*，如以下图所示：
- en: '![Figure 1.4 – DevOps workflow for enterprises'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.4 – 企业的 DevOps 工作流'
- en: '](img/B17492_01_004.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_01_004.jpg)'
- en: Figure 1.4 – DevOps workflow for enterprises
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – 企业的 DevOps 工作流
- en: Here, we have created a model where the enterprise has full control over its
    portfolio and products. Yet, it can improve quality and speed up delivery by working
    with combined, **multidisciplinary teams** – even those that come from different
    suppliers.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个模型，企业对其产品组合和产品拥有完全控制权。然而，通过与跨学科的**多元团队**合作——即使这些团队来自不同的供应商，它仍能提高质量并加快交付速度。
- en: In the next section, we will study the final, lowest tier in our model and discover
    various DevOps components.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，我们将研究我们模型中的最终、最低层，并发现各种 DevOps 组件。
- en: Introducing DevOps components
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入 DevOps 组件
- en: So far, we've learned how to start defining the architecture, looked at the
    architecture principles for DevOps, and drafted a reference architecture model.
    The next step is to look at the different **components** within DevOps. In this
    section, we will learn what components must be included in a DevOps architecture.
    This is tier 3 of our target enterprise model – the level where all the activities
    are executed.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了如何开始定义架构，了解了 DevOps 的架构原则，并草拟了一个参考架构模型。下一步是查看 DevOps 中的不同**组件**。在这一部分，我们将学习
    DevOps 架构中必须包含哪些组件。这是我们目标企业模型的第 3 层——所有活动都在此层执行。
- en: 'The following diagram shows all the components that will be discussed briefly:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图展示了将简要讨论的所有组件：
- en: '![Figure 1.5 – The DevOps life cycle'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.5 – DevOps 生命周期'
- en: '](img/B17492_01_005.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_01_005.jpg)'
- en: Figure 1.5 – The DevOps life cycle
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – DevOps 生命周期
- en: The reason that this has been presented as an infinite loop – or a *pretzel*
    – is because feedback from the live product that is managed by *ops* (operations)
    will be continuously looped back to *dev* (development) to improve the product.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 之所以将其呈现为无限循环——或者是*椒盐脆饼*——是因为来自 *ops*（运营）的实时产品反馈将不断地回传给 *dev*（开发）以改进产品。
- en: 'The different components are as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的组件如下：
- en: '**Plan**'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计划**'
- en: '**Create** (in some DevOps models for components, this is referred to as **Code
    and Build**)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建**（在某些 DevOps 组件模型中，这被称为**代码和构建**）'
- en: '**Test** (in some models, this is referred to as **Verify** or **Validate**)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**（在某些模型中，这被称为**验证**或**确认**）'
- en: '**Preprod** (in some models, this is referred to as **Pre-release**)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预发布**（在某些模型中，这被称为**预发布**）'
- en: '**Release**'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布**'
- en: '**Configure**'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置**'
- en: '**Monitor**'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控**'
- en: At this level, interoperability is crucial. Remember that large enterprises
    will likely work with several service providers, fulfilling parts of the IT delivery
    process. When we want all these companies to work together in a DevOps way, we
    need to make sure that the processes and tools are aligned. Next, we need to have
    a common understanding of the various activities that are executed as part of
    these processes. The key term here is *consistency*. All DevOps components must
    be defined and implemented in a consistent way. Every developer and operator must
    work according to the same definition and with the same components.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个层面上，互操作性至关重要。请记住，大型企业很可能会与多个服务提供商合作，承担IT交付过程中的各个部分。当我们希望这些公司以DevOps方式协作时，我们需要确保流程和工具是对齐的。接下来，我们需要对作为这些流程一部分执行的各种活动有一个共同的理解。这里的关键术语是*一致性*。所有DevOps组件必须以一致的方式定义和实施。每个开发人员和运维人员都必须根据相同的定义和相同的组件进行工作。
- en: The main question is, in what stage should ops already be involved? The answer
    is, at the *earliest stage possible*, so indeed in the plan phase. Ops plays a
    key role in defining how products can be managed once they've gone live. They
    should set requirements and an acceptance criterion before going live. If a developer
    builds something that can't be managed by ops, the product will fail, and business
    demands will not be met.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 主要问题是，运维应该在什么阶段参与？答案是，*尽可能早*，实际上就是在计划阶段。运维在定义产品上线后如何管理方面扮演着关键角色。上线前，他们应该设置需求和验收标准。如果开发人员构建的内容无法由运维管理，产品将会失败，业务需求也无法得到满足。
- en: 'The following table breaks down the components into activities:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 下表详细列出了各个组件的活动：
- en: '![](img/B17492_table_2.1(1).jpg)![](img/B17492_table_2.1(2).jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17492_table_2.1(1).jpg)![](img/B17492_table_2.1(2).jpg)'
- en: In [*Chapter 2*](B17492_02_ePub_RK.xhtml#_idTextAnchor027), *Managing DevOps
    from Architecture*, and [*Chapter 3*](B17492_03_ePub_RK.xhtml#_idTextAnchor040),
    *Architecting for DevOps Quality*, we will dive deeper into this and how architects
    can improve their designs for these components using CI/CD pipelines to enable
    automation, collaboration, and integration.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第2章*](B17492_02_ePub_RK.xhtml#_idTextAnchor027)，*从架构管理DevOps*，和[*第3章*](B17492_03_ePub_RK.xhtml#_idTextAnchor040)，*为DevOps质量进行架构设计*中，我们将深入探讨这一点，以及架构师如何通过使用CI/CD管道来改进这些组件的设计，从而实现自动化、协作和集成。
- en: In the next section, we will discuss the drivers for architecture from a business
    perspective, as laid down in SLAs and KPIs.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，我们将从业务角度讨论架构的驱动因素，正如SLA和KPI所规定的。
- en: Understanding SLAs and KPIs in DevOps
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解DevOps中的SLA和KPI
- en: In the *Understanding IT delivery in enterprises* section, we learned that in
    DevOps, IT delivery and IT service management processes are still valid. Typically,
    enterprises contract SLAs and KPIs to fulfill these processes so that these enable
    the business goals. If one of the processes fails, the delivery of the product
    will be impacted and as an ultimate consequence, the business will not achieve
    its goals, such as an agreed delivery date or *go live* release of the product.
    Hence, understanding SLAs and KPIs is important for any architect. This is why
    it is included in the sourcing model that we discussed in the *IT delivery in
    sourcing models* section.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在*理解企业中的IT交付*这一部分，我们了解到，在DevOps中，IT交付和IT服务管理流程仍然有效。通常，企业会签订SLA（服务级别协议）和KPI（关键绩效指标），以完成这些流程，从而支持业务目标。如果其中一个流程失败，产品交付将受到影响，最终结果是，业务将无法实现其目标，例如约定的交付日期或产品的*上线*版本。因此，了解SLA和KPI对于任何架构师来说都至关重要。这也是我们在*IT交付中的外包模式*部分中讨论的外包模型的一部分。
- en: Service-level agreements are positioned between the tactical processes of DevOps
    and the strategic level at the enterprise level where the goals are set. SLAs
    and KPIs should support these goals and guide the DevOps process.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 服务级别协议位于DevOps的战术流程和企业层面的战略级别之间，企业层面是设定目标的地方。SLA和KPI应该支持这些目标并指导DevOps流程。
- en: 'The six most important metrics that should be included in SLAs for DevOps are
    as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在DevOps的SLA中应包括的六个最重要的度量标准如下：
- en: '**Frequency of deployments**: Typically, DevOps teams work in sprints, a short
    period of time in which the team works on a number of backlog items as part of
    the next release of a product. The KPI measures how often new features are launched
    on a regular basis. Keep in mind that releases of new features can be scheduled
    on a monthly (often spanning multiple sprints), weekly, or even daily basis.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署频率**：通常，DevOps团队以冲刺的方式工作，冲刺是一个短时间段，团队在此期间处理多个待办事项，作为下一次产品发布的一部分。该KPI衡量新特性定期推出的频率。请记住，新特性的发布可以按月（通常跨越多个冲刺）、按周甚至按日进行安排。'
- en: '**Deployment time**: The time that elapses between the code being released
    after the test phase to preproduction and ultimately production, including the
    *ready state* of the infrastructure.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署时间**：从代码在测试阶段发布到预生产环境，再到最终生产环境所经历的时间，包括基础设施的*准备状态*。'
- en: '**Deployment failure rate**: This refers to the rate of outages that occur
    after a deployment. Ideally, this should be zero, but this is not very realistic.
    Deployments – especially when the change rate is high – will fail every now and
    then. Obviously, the number should be as low as possible.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署故障率**：这是指部署后发生故障的比率。理想情况下，这个比例应该是零，但这并不现实。部署——尤其是当变更率较高时——偶尔会失败。显然，数字应该尽可能低。'
- en: '**Deployment failure detection time**: This KPI strongly relates to the previous
    one. Failures will occur, but then the question is, how fast are these detected
    and when will mitigating actions to resolve these issues be taken? This KPI is
    often also referred to as **Mean Time to Recovery** (**MTTR**). This is the most
    important KPI in DevOps cycles.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署故障检测时间**：此KPI与前一个密切相关。故障是难以避免的，但关键在于这些故障被发现的速度，以及采取修复措施的时间。这一KPI通常也被称为**平均恢复时间**（**MTTR**）。这是DevOps周期中最重要的KPI。'
- en: '**Change lead time**: This is the time that elapses between the last release
    and the next change to occur. Subsequently, it is measured in terms of how long
    the team will need to address the change. Shorter lead times indicate that the
    team works efficiently.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变更前置时间**：这是指从上一次发布到下一次变更之间的时间。随后，它通过团队处理该变更所需的时间来衡量。较短的前置时间表示团队的工作效率较高。'
- en: '**Full cycle time**: The total time that elapses for each iteration or each
    deployment.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完整周期时间**：每次迭代或每次部署所经历的总时间。'
- en: 'This list is by no means exhaustive. Enterprises can think of a lot of different
    metrics and KPIs. But the advice here is to keep things simple. Keep in mind that
    every metric that is included in any contract needs to be monitored and reported,
    which can become very cumbersome. One more thing to remember is that the most
    important metric sits at the business level. Ultimately, the only thing that really
    counts is how satisfied the customer of the business is or, better said: *what''s
    the value that''s delivered to the end customer*?'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这份清单绝不是详尽无遗的。企业可以想到许多不同的度量标准和KPI。但这里的建议是保持简单。请记住，任何合同中包含的每一个度量标准都需要被监控和报告，这可能会变得非常繁琐。还需要记住的一点是，最重要的度量标准位于业务层面。最终，唯一真正重要的是：客户对业务的满意度，或者更准确地说：*交付给最终客户的价值是什么*？
- en: In the final section of this chapter, we will elaborate on the term *value*
    by explaining the **VOICE model**.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后部分，我们将通过解释**VOICE模型**来详细阐述*价值*这一概念。
- en: Working with the VOICE model
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用VOICE模型
- en: DevOps teams need to deliver value to the end customer. The VOICE model, as
    defined by the IT company *Sogeti*, addresses this. VOICE stands for **Value**,
    **Objectives**, **Indicators**, **Confidence**, and **Experience**. The idea behind
    this model is that any IT delivery should deliver value to someone – typically,
    the end customer of a business. Value sets the objectives for IT delivery and
    these objectives are measured using indicators. Indicators also measure whether
    the pursued value will be achieved.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps团队需要为最终客户交付价值。由IT公司*Sogeti*定义的VOICE模型正是为此而设。VOICE代表**价值**、**目标**、**指标**、**信心**和**经验**。该模型的理念是，任何IT交付都应该为某人创造价值——通常是企业的最终客户。价值设定了IT交付的目标，而这些目标通过指标来衡量。指标还衡量追求的价值是否能够实现。
- en: Confidence is about the indicators and if they contain relevant information
    to confirm that IT delivery actually results in the targeted value. Lastly, experience
    tells us if the delivered system is fulfilling the business demands and which
    improvements will lead to more business value. With that, the cycle starts over
    again.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Confidence is about the indicators and if they contain relevant information
    to confirm that IT delivery actually results in the targeted value. Lastly, experience
    tells us if the delivered system is fulfilling the business demands and which
    improvements will lead to more business value. With that, the cycle starts over
    again.
- en: 'This model is shown in the following diagram:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 'This model is shown in the following diagram:'
- en: '![Figure 1.6 – The VOICE model'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.6 – The VOICE model'
- en: '](img/B17492_01_006.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_01_006.jpg)'
- en: Figure 1.6 – The VOICE model
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 1.6 – The VOICE model
- en: Since VOICE also involves looping feedback back to the beginning of the cycle
    with the aim of improving products and adding more value to the business, the
    model can be used for DevOps projects.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: Since VOICE also involves looping feedback back to the beginning of the cycle
    with the aim of improving products and adding more value to the business, the
    model can be used for DevOps projects.
- en: In [*Chapter 3*](B17492_03_ePub_RK.xhtml#_idTextAnchor040), *Architecting for
    DevOps Quality*, we will explore VOICE in more detail.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: In [*Chapter 3*](B17492_03_ePub_RK.xhtml#_idTextAnchor040), *Architecting for
    DevOps Quality*, we will explore VOICE in more detail.
- en: Summary
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Summary
- en: This chapter was the introduction to DevOps for architects. We learned that
    the enterprise architecture sets the architecture principles for the entire enterprise
    by using the TOGAF methodology. The business goals are defined at the enterprise
    level. DevOps projects and teams are concerned with IT delivery and fulfilling
    the business' demands by building, deploying, and running IT systems.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: This chapter was the introduction to DevOps for architects. We learned that
    the enterprise architecture sets the architecture principles for the entire enterprise
    by using the TOGAF methodology. The business goals are defined at the enterprise
    level. DevOps projects and teams are concerned with IT delivery and fulfilling
    the business' demands by building, deploying, and running IT systems.
- en: DevOps needs to adhere to the business goals and, therefore, with the enterprise
    architecture. Yet, DevOps features a specific architecture that enables CI/CD
    in IT systems. Because of this, we learned about the six DevOps principles and
    how these are applied to a reference model in which the enterprise still has full
    control of the products, but multidisciplinary teams can work autonomously on
    them.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps needs to adhere to the business goals and, therefore, with the enterprise
    architecture. Yet, DevOps features a specific architecture that enables CI/CD
    in IT systems. Because of this, we learned about the six DevOps principles and
    how these are applied to a reference model in which the enterprise still has full
    control of the products, but multidisciplinary teams can work autonomously on
    them.
- en: Next, we looked at the different DevOps components and KPIs to measure the outcomes
    of DevOps projects. The key takeaway from this is that every project needs to
    add to a better user experience and thus add business value. Due to this, we briefly
    studied the VOICE model.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Next, we looked at the different DevOps components and KPIs to measure the outcomes
    of DevOps projects. The key takeaway from this is that every project needs to
    add to a better user experience and thus add business value. Due to this, we briefly
    studied the VOICE model.
- en: In the next chapter, we will learn more about automation, collaboration, and
    integration by designing CI/CD pipelines.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: In the next chapter, we will learn more about automation, collaboration, and
    integration by designing CI/CD pipelines.
- en: Questions
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Questions
- en: '*True or false*: DevOps brings business, development, and operations together,
    without silos.'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*True or false*: DevOps brings business, development, and operations together,
    without silos.'
- en: The DevOps principles lead to four key attributes in the architecture for DevOps.
    One of them is automation. *Name the other three*.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: The DevOps principles lead to four key attributes in the architecture for DevOps.
    One of them is automation. *Name the other three*.
- en: What does the acronym *CI/CD* stand for?
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: What does the acronym *CI/CD* stand for?
- en: Ideally, every deployment succeeds, but in practice, some deployments will fail.
    The time that is needed to detect this failure and start mitigating actions is
    an important KPI in DevOps contracts. *What is the commonly used term for this
    KPI*?
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ideally, every deployment succeeds, but in practice, some deployments will fail.
    The time that is needed to detect this failure and start mitigating actions is
    an important KPI in DevOps contracts. *What is the commonly used term for this
    KPI*?
- en: Further reading
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Further reading
- en: '*The Modern DevOps Manifesto*: [https://medium.com/ibm-garage/the-modern-devops-manifesto-f06c82964722](https://medium.com/ibm-garage/the-modern-devops-manifesto-f06c82964722)'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*The Modern DevOps Manifesto*: [https://medium.com/ibm-garage/the-modern-devops-manifesto-f06c82964722](https://medium.com/ibm-garage/the-modern-devops-manifesto-f06c82964722)'
- en: '*Quality for DevOps Teams*, by Rik Marselis, Berend van Veenendaal, Dennis
    Geurts and Wouter Ruigrok, Sogeti Nederland BV.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Quality for DevOps Teams*, by Rik Marselis, Berend van Veenendaal, Dennis
    Geurts and Wouter Ruigrok, Sogeti Nederland BV.'
