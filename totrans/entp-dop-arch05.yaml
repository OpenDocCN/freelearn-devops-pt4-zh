- en: '*Chapter 4*: Scaling DevOps'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第4章*：扩展DevOps'
- en: DevOps started—and is in some companies still done—with a lot of manual tasks,
    scripts, and ad hoc tests. A lot of enterprises focus on the applications and
    tend to forget about the platform itself—the infrastructure—but this is also crucial
    to the scaling. This chapter focuses on the scaling of DevOps, both from a technical
    and an organizational perspective.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps最初—并且在一些公司中仍然是—大量依赖手动任务、脚本和临时测试。许多企业集中精力在应用程序上，往往忽视了平台本身——基础设施——而这对扩展同样至关重要。本章重点讨论从技术和组织角度扩展DevOps。
- en: After completing this chapter, you will have learned how to handle scaling.
    First, we will learn about modern DevOps, which adopts cloud and cloud-native
    technology as target platforms to run applications. Before we can do that, we
    probably need to transform the applications; otherwise, we will develop new applications.
    In DevOps, we need a development method that fits to the way of working; therefore,
    we will discuss **rapid- application development** (**RAD**). Next, we will look
    at adopting DevOps throughout a whole enterprise, starting small and then expanding.
    Finally, we will have a look at mission-critical environments and how we can manage
    them in a DevOps mode.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，您将学会如何处理扩展问题。首先，我们将了解现代DevOps，它采用云计算和云原生技术作为运行应用程序的目标平台。在此之前，我们可能需要对应用程序进行转型；否则，我们将开发新应用程序。在DevOps中，我们需要一种适合工作方式的开发方法；因此，我们将讨论**快速应用开发**（**RAD**）。接下来，我们将探讨如何在整个企业中推广DevOps，从小规模开始，逐步扩展。最后，我们将看看关键任务环境以及如何以DevOps模式进行管理。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将覆盖以下主要主题：
- en: Understanding modern DevOps
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解现代DevOps
- en: Working with RAD
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与RAD合作
- en: Scaling infrastructure with DevOps
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用DevOps扩展基础设施
- en: Scaling DevOps in enterprise environments
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在企业环境中扩展DevOps
- en: Managing mission-critical environments with DevOps
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理关键任务环境与DevOps
- en: Understanding modern DevOps
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解现代DevOps
- en: The concept of DevOps is not new. Basically, the idea was that teams could improve
    their work if developers and operators were really working together as one team.
    The reason for that was easy to find, as we've already seen in [*Chapter 1*](B17492_01_ePub_RK.xhtml#_idTextAnchor013),
    *Defining the Reference Architecture for Enterprise DevOps*. In this section,
    we will learn how DevOps has evolved over the years and what the impact of modern
    DevOps has been on enterprise **information technology** (**IT**). We will also
    study how DevOps helps in transforming legacy applications by app modernization.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps的概念并不新鲜。基本上，理念是，如果开发人员和运维人员真正作为一个团队协作，团队的工作就能得到改进。这个原因很容易找到，正如我们在[*第1章*](B17492_01_ePub_RK.xhtml#_idTextAnchor013)中已经看到的，*为企业DevOps定义参考架构*。在本节中，我们将学习DevOps如何随着时间的推移而发展，以及现代DevOps对企业**信息技术**（**IT**）的影响。我们还将研究DevOps如何通过应用程序现代化帮助转型遗留应用程序。
- en: A lot of enterprises decided in the 1990s that IT was not a core business and
    could be outsourced to suppliers. Typically, all management—operations—of commodity
    IT was outsourced. It created not only silos within enterprises, but also outside
    of them. Over time, IT got more complex, demands increased, and enterprises found
    themselves in a position of having to find ways to get back into the driving seat
    of IT, which had become core for the business.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 许多企业在1990年代决定IT不是核心业务，可以外包给供应商。通常，所有的管理—运营—工作都外包出去。这不仅在企业内部创造了孤岛，也在企业之间创造了隔阂。随着时间的推移，IT变得越来越复杂，需求增加，企业发现自己必须找到方法重新掌控IT，而IT已经成为企业核心业务。
- en: 'In 2009, the first **DevOps Days** conference was held in Belgium. The base
    idea: break down the silos, put developers and operations back in one team, and
    increase the quality and velocity of software development. These are still the
    goals of DevOps. That hasn''t changed over the years.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 2009年，第一届**DevOps Days**大会在比利时举行。基本理念是：打破孤岛，把开发人员和运维人员重新组织成一个团队，提升软件开发的质量和速度。这些目标依然是DevOps的核心，至今未变。
- en: 'But it doesn''t mean that DevOps hasn''t changed at all. The main differentiators
    are cloud technology and automation. These are the two most important pillars
    of modern DevOps and are outlined as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但这并不意味着DevOps完全没有变化。主要的区别在于云技术和自动化。这两者是现代DevOps的两个最重要支柱，具体概述如下：
- en: '**Cloud**: One of the main issues in early DevOps was the availability of development
    and test systems. In modern cloud platform deployments, even temporary systems
    have become much easier.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云**：早期DevOps的一个主要问题是开发和测试系统的可用性。在现代云平台部署中，即使是临时系统也变得更加容易。'
- en: '**Cloud native**: Silos between developers and operations have been broken
    down, but the same applies for technical silos in different platforms. Interoperability
    between systems has become the standard in cloud native, with the entrance and
    emergence of **Platform as a Service** (**PaaS**), **Software as a Service** (**SaaS**),
    container technology, and serverless functions. The major two developments in
    IT for the near future are likely software to services and **virtual machines**
    (**VMs**) to containers, increasing portability across cloud platforms and even
    between on-premises systems and cloud systems.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云原生**：开发者和运维之间的壁垒已经被打破，但同样的情况也适用于不同平台之间的技术壁垒。在云原生中，系统之间的互操作性已成为标准，随着**平台即服务**（**PaaS**）、**软件即服务**（**SaaS**）、容器技术和无服务器功能的出现，云原生技术逐渐普及。未来IT发展的两大趋势可能是从软件到服务以及从**虚拟机**（**VMs**）到容器，推动跨云平台的可移植性，甚至实现本地系统与云系统之间的互通。'
- en: '**Automation**: Automate as much as possible. This means that in modern DevOps,
    we should perceive everything as code—not only the application code, but infrastructure,
    configuration, and integration as well. In [*Chapter 2*](B17492_02_ePub_RK.xhtml#_idTextAnchor027),
    *Ma**naging DevOps from Architecture*, we discussed pipelines for the deployment
    of applications and infrastructure, but in modern DevOps everything is built through
    pipelines.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化**：尽可能实现自动化。这意味着在现代DevOps中，我们应该将一切视为代码——不仅是应用程序代码，还包括基础设施、配置和集成。在[*第2章*](B17492_02_ePub_RK.xhtml#_idTextAnchor027)，《*从架构管理DevOps*》中，我们讨论了应用程序和基础设施部署的流水线，但在现代DevOps中，一切都是通过流水线构建的。'
- en: '**All code is stored in a repository**: Applications, infrastructure, tools,
    governance, and security are translated into code, and with everything as code,
    we can have everything in pipelines. So, besides a deployment pipeline for application
    code and a pipeline for infrastructure, we will also have pipelines for tool configurations,
    integrations, reports, and security.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**所有代码都存储在代码库中**：应用程序、基础设施、工具、治理和安全性都被转化为代码，随着一切成为代码，我们可以将所有内容都纳入流水线。因此，除了应用程序代码的部署流水线和基础设施流水线外，我们还将有工具配置、集成、报告和安全性的流水线。'
- en: '**Integrated security**: For security, we will have DevSecOps, which starts
    with Security as Code. The security posture of enterprises is translated into
    code and managed from a single repository. The development of the security posture
    is handled in the same way as the development of applications and infrastructure,
    by continuous improvement and not solely by reacting to attacks, threats, or breaches.
    Code that has been developed will immediately be merged with the security code,
    integrating the security posture. Security is developed at the same speed as applications
    and infrastructure. *Section 3* of this book, *Bridging Security with DevSecOps*,
    is entirely about implementing DevSecOps, starting with [*Chapter 12*](B17492_12_ePub_RK.xhtml#_idTextAnchor145),
    *Architecting for DevSecOps*.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成安全性**：对于安全性，我们将使用DevSecOps，它从“安全即代码”开始。企业的安全姿态被转化为代码，并从一个单一的代码库进行管理。安全姿态的开发与应用程序和基础设施的开发方式相同，都是通过持续改进，而不仅仅是响应攻击、威胁或漏洞。已经开发的代码将立即与安全代码合并，整合安全姿态。安全性与应用程序和基础设施以相同的速度进行开发。本书的*第3章*，《*通过DevSecOps架起安全桥梁*》，完全讲解了如何实现DevSecOps，内容从[*第12章*](B17492_12_ePub_RK.xhtml#_idTextAnchor145)，《*为DevSecOps架构设计*》开始。'
- en: '**Enhanced technology**: Modern DevOps is sometimes referred to as *accelerated*
    or intelligent DevOps. With enhanced technologies such as **artificial intelligence**
    (**AI**), **machine learning** (**ML**), and **robotic process automation** (**RPA**),
    automation can really be leveraged. Examples are self-healing systems or code
    and pipelines that *learn* autonomously from previous deployments. With RPA, processes
    can be highly automated and, if combined with AI/ML, think about logical next
    steps in deployments—for instance, by learning from test results or system behavior.
    **Artificial Intelligence IT Operations** (**AIOps)** is a good example of this
    development. [*Chapter 8*](B17492_08_ePub_RK.xhtml#_idTextAnchor095), *Architecting
    AIOps,* and [*Chapter 9*](B17492_09_ePub_RK.xhtml#_idTextAnchor111), *Integrating
    AIOps in DevOps*, will provide deep dives into AIOps.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增强技术**：现代 DevOps 有时被称为*加速*或智能 DevOps。借助增强的技术，如**人工智能**（**AI**）、**机器学习**（**ML**）和**机器人流程自动化**（**RPA**），自动化可以真正得到利用。举例来说，包括自愈系统或能从先前部署中*自主学习*的代码和流水线。通过
    RPA，过程可以高度自动化，若与 AI/ML 结合使用，可以思考部署中的逻辑下一步——例如，通过从测试结果或系统行为中学习。**人工智能 IT 运维**（**AIOps**）就是这一发展的一个很好例子。[*第
    8 章*](B17492_08_ePub_RK.xhtml#_idTextAnchor095)，*构建 AIOps*，以及[*第 9 章*](B17492_09_ePub_RK.xhtml#_idTextAnchor111)，*将
    AIOps 集成到 DevOps 中*，将深入探讨 AIOps。'
- en: 'To summarize, modern DevOps is more about this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，现代 DevOps 更多的是关于这个：
- en: Involving all stakeholders—it's not only about developers and operations, but
    also about business managers, security specialists, quality and assurance managers,
    and procurement (think of licenses).
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 涉及所有利益相关者——这不仅仅是开发人员和运维人员的问题，还包括业务经理、安全专家、质量和保障经理以及采购人员（比如许可证问题）。
- en: Cloud and cloud-native adoption, including containers, functions, and automated
    services.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云及云原生技术的采纳，包括容器、函数和自动化服务。
- en: Thinking in code, and therefore in pipelines. Keep in mind that with everything
    as code and deep automation, we also need to think about the principle of trust.
    We need to make sure that the code and assets we have in our pipelines are trusted.
    Next, who is mandated to state that assets are trusted and may be applied to the
    pipeline? Is that the security engineer, or can it be delegated to the developer?
    Or, can delegation even be automated if we have systems that adhere to the **principle
    of least privilege** (**POLP**)? Segregation of duties becomes very important—controls
    are required to protect code from unauthorized changes.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用代码思维，因此也要思考流水线。请记住，随着一切皆代码和深度自动化的实施，我们还需要思考信任原则。我们需要确保流水线中的代码和资源是可信的。接下来，谁有责任声明这些资源是可信的，并可以应用到流水线中？是安全工程师，还是可以委托给开发人员？或者，如果我们有遵循**最小权限原则**（**POLP**）的系统，是否可以实现自动化委托？职责分离变得非常重要——需要控制措施来防止未经授权的代码更改。
- en: In this section, we discussed changes to DevOps over the years. The reason for
    enterprises adapting DevOps is to modernize IT as a whole. Enterprises have a
    long history (also in IT), and therefore typically have complex, large IT ecosystems
    with legacy applications. App modernization has become an important topic in modern
    DevOps, and the next section will talk about that.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了多年来 DevOps 的变化。企业采用 DevOps 的原因是为了整体现代化 IT。企业有着悠久的历史（也包括 IT 领域），因此通常拥有复杂的大型
    IT 生态系统以及遗留的应用程序。应用现代化已经成为现代 DevOps 中的重要话题，接下来的部分将讨论这个内容。
- en: Introducing and understanding app modernization
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍和理解应用现代化
- en: 'DevOps, the cloud, automation, and code are all key principles of digital transformation.
    But many enterprises will have core applications that they have been running for
    a long time: legacy systems not fit to adopt DevOps or even ready to migrate to
    the cloud. In this section, we will discuss the process of application modernization:
    the process of transforming these applications to systems that we can run in the
    cloud, keeping up to date with modern technologies, and supporting the business
    by being able to adapt to new demands faster.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps、云、自动化和代码是数字化转型的核心原则。但许多企业将拥有长时间运行的核心应用程序：这些遗留系统不适合采用 DevOps，甚至不准备迁移到云端。在本节中，我们将讨论应用现代化的过程：将这些应用程序转化为能够在云端运行的系统，跟上现代技术的步伐，并通过能够更快适应新需求来支持业务。
- en: Note
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: App modernization is a huge market. A number of companies such as IBM and Fujitsu
    have massive programs to transform mainframe applications to cloud providers such
    as **Amazon Web Services** (**AWS**), even running **common business-oriented
    language** (**COBOL**). The reason for enterprises *shifting* their old mainframe
    applications to the cloud is easy to understand. The original code is left intact
    as much as possible, but it's moved from expensive on-premises equipment to pay-as-you-go
    cloud environments, where risks are fairly low. The downside is that companies
    will still need to have resources with COBOL programming skills to maintain the
    app itself. In other words, the application itself is still legacy and will probably
    not be able to adopt and benefit from new cloud-native technology. The next step
    would be to also modernize the application by, for instance, rewriting the code
    or rebuilding the functionality in a completely new application.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 应用现代化市场非常庞大。许多公司，如IBM和富士通，都有大规模的项目，将主机应用程序转换为云提供商，例如**亚马逊网络服务** (**AWS**)，甚至运行**通用商务语言**
    (**COBOL**)。企业将其旧的主机应用程序转移到云的原因很容易理解。原始代码尽可能保持不变，但从昂贵的本地设备迁移到按使用量付费的云环境，风险相对较低。缺点是公司仍然需要具有COBOL编程技能的资源来维护应用程序本身。换句话说，应用程序本身仍然是遗留的，可能无法采用和从新的云原生技术中受益。下一步将是通过重写代码或在全新的应用程序中重建功能来进一步现代化应用程序。
- en: 'Enterprises can follow a number of strategies in app modernization, such as
    the following ones:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 企业可以采用多种策略进行应用现代化，例如以下几种：
- en: '**Rehosting**: This is the lift and shift of existing systems *as they are*.
    The application is picked up and moved to another target platform. The application
    is not changed in any way whatsoever. However, moving an application from—for
    instance—an on-premises environment to AWS or Azure will imply some modifications,
    especially in connectivity. These modifications will be very minimal and will
    not impact the application itself. A common way of rehosting is exporting the
    VM, including the operating system and application code as a whole, to the new
    cloud environment. It''s a fast way to migrate applications to the cloud, but
    by doing so, enterprises will not experience real benefits from cloud services.
    They simply run their machines in another data center—in this case, the cloud
    data centers of AWS, Azure, or any other public cloud provider.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重新托管**：这是将现有系统*原封不动*地搬移到另一个目标平台。应用程序被搬移到另一个目标平台时不做任何更改。然而，将应用程序从例如本地环境迁移到AWS或Azure将意味着一些修改，特别是在连接性方面。这些修改将非常少，并且不会影响应用程序本身。重新托管的常见方法是将包括操作系统和应用程序代码在内的虚拟机导出到新的云环境。这是一种快速迁移应用程序到云的方式，但通过这种方式，企业将不会真正体验到云服务的实际好处。他们只是在另一个数据中心运行他们的机器，即AWS、Azure或任何其他公共云提供商的云数据中心。'
- en: '**Replatforming**: With replatforming, applications are optimized to run in
    the cloud. A very common example is replatforming databases to PaaS. Database
    instances are moved to AWS **Relational Database Service** (**RDS**) or Azure
    **Structured Query Language** (**SQL**), both native database services managed
    by the platforms. Developers will still be able to program databases the way they''re
    used to, but they don''t need to worry anymore about the database platform itself.
    That is taken care of by the provider.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重新平台化**：通过重新平台化，应用程序被优化以在云中运行。一个非常常见的例子是将数据库重新平台化为PaaS。数据库实例被移至AWS **关系型数据库服务**
    (**RDS**) 或Azure **结构化查询语言** (**SQL**)，这两者都是由平台管理的本地数据库服务。开发人员仍然可以像以往一样编写数据库程序，但他们不再需要担心数据库平台本身。这些事项由提供商负责处理。'
- en: '**Refactoring**: Sometimes referred to as rearchitecturing. In this case, the
    application code is modified to run in an optimized way in the cloud. Cloud-native
    services are applied. Application code might be rewritten to run in containers
    or with serverless functions. The functionality of the application remains as
    it is: only the underlying technology is changed. Take the COBOL example at the
    beginning of this section: COBOL could be rewritten to C# or Java. However, architects
    and engineers would first need to decouple the business logic from the code itself.
    If the business requires the business logic to be modified as well, then the strategy
    changes to rebuilding.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重构**：有时也称为重新架构。在这种情况下，应用程序代码会被修改，以便在云中以优化的方式运行。会应用云原生服务。应用程序代码可能会被重写，以便在容器中运行或使用无服务器功能。应用程序的功能保持不变：仅底层技术发生变化。以本节开头的COBOL示例为例：COBOL代码可以重写为C#或Java。然而，架构师和工程师首先需要将业务逻辑与代码本身解耦。如果业务要求修改业务逻辑，那么策略就变为重建。'
- en: '**Rebuilding**: In the case of a rebuild, architects start with revalidating
    the functionality of the application. What is the functionality that the business
    requires, which data will be used, and how does it translate into the usage of
    an application? Next, the application is rebuilt on the validated business and
    technical requirements. The functionality returns, the technology is completely
    revisited, and the application is rebuilt.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重建**：在重建的情况下，架构师首先重新验证应用程序的功能。业务所需的功能是什么？哪些数据将被使用，这些数据如何转化为应用程序的使用？接下来，应用程序将根据验证后的业务和技术需求进行重建。功能恢复，技术完全重新审视，应用程序被重建。'
- en: Now, rehosting will not bring real benefits in terms of costs. Cost savings
    might be achieved when applications are replatformed or refactored, since the
    use of cloud resources will be optimized.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，重新托管在成本方面不会带来真正的好处。只有当应用程序被重新平台化或重构时，才可能实现成本节省，因为云资源的使用将得到优化。
- en: 'Rebuilding is a different story. This might lead to major projects that will
    inflict project costs. As soon as the application is ready to be pushed to production
    in the cloud, substantial savings might be achieved. However, enterprises need
    to take the total cost of ownership into account, thus including the project costs
    and possible risks in rebuilding an application. Enterprise architects play an
    important role in advising and supporting decisions. The following screenshot
    shows a very simple overview of cloud cost components:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 重建是另一个故事。这可能会导致重大项目，从而产生项目成本。只要应用准备好在云端投入生产，就可能实现可观的节省。然而，企业需要考虑总体拥有成本，因此需要将项目成本和重建应用可能带来的风险纳入考虑。企业架构师在提供建议和支持决策方面发挥着重要作用。下图展示了云成本组成部分的一个非常简单的概览：
- en: '![Figure 4.1 – Simple overview of cloud and DevOps costs'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.1 – 云和DevOps成本的简单概览'
- en: '](img/B17492_04_001.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_04_001.jpg)'
- en: Figure 4.1 – Simple overview of cloud and DevOps costs
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1 – 云和DevOps成本的简单概览
- en: 'What are the steps an enterprise—and a responsible architect—should take to
    start with app modernization? Let''s have a look at these here:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 企业以及负责的架构师应该采取哪些步骤开始应用现代化？让我们在这里看看：
- en: '**Importing**: The architect gathers all relevant data about the applications.
    They can do so through analyzing information from the **configuration management
    database** (**CMDB**) by using tools to scan the applications, and through workshops
    with stakeholders such as business and application owners.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导入**：架构师收集与应用相关的所有数据。他们可以通过分析**配置管理数据库**（**CMDB**）中的信息，使用工具扫描应用程序，或者通过与利益相关者（如业务和应用所有者）进行研讨会来实现这一目标。'
- en: '**Assessing and architecting**: The next step is assessing all the data. What
    does the architecture look like and how could it map to a modern—cloud—architecture?
    At this stage, the target architecture is defined as well as the *future mode
    of operations*, meaning the way the application is executed and managed. The DevOps
    mode of working and the use of **continuous integration/continuous development**
    (**CI/CD**) pipelines are included in the future architecture. This defines the
    method of transformation. In short: at this stage, the architect defines the *what*
    (what the application and the architecture will look like) and the *how* (how
    we transform the current application to a modern app). The *what* and *how* together
    form a solution.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**评估和架构设计**：下一步是评估所有数据。架构是什么样的，它如何与现代的——云——架构进行映射？在这一阶段，目标架构被定义，同时也定义了*未来的操作模式*，即应用程序的执行和管理方式。DevOps
    工作模式和**持续集成/持续开发**（**CI/CD**）流水线被纳入未来架构中。这定义了转型的方法。简而言之：在这一阶段，架构师定义了*什么*（应用程序和架构的样子）和*如何*（如何将当前应用程序转型为现代应用程序）。*什么*和*如何*共同构成了解决方案。'
- en: '**Deciding**: Stakeholders are informed on all relevant aspects: functionality
    of the application, technical realization, risks, and costs. The business case
    is validated and, based on this, a go/no-go decision is taken to proceed or not.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**决策**：所有相关方面的信息都已传达给利益相关者：应用程序的功能、技术实现、风险和成本。商业案例已得到验证，基于此，做出了是否继续的决策。'
- en: '**Executing**: The project starts. Deliverables and technical roadmaps have
    been defined in features, product backlog items, and tasks. Components are refined
    and pulled into build sprints. Tests are executed, acceptance criteria are validated,
    and **definitions of done** (**DoDs**) are signed off as the project evolves.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**执行**：项目启动。交付成果和技术路线图已在功能、产品待办事项和任务中定义。组件被细化并纳入构建迭代周期中。测试被执行，验收标准被验证，**完成定义**（**DoD**）随着项目进展逐步签署确认。'
- en: 'The following diagram shows the high-level process of app modernization:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了应用程序现代化的高层次过程：
- en: '![Figure 4.2 – High-level process of app modernization'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.2 – 应用程序现代化的高层次过程'
- en: '](img/B17492_04_002.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_04_002.jpg)'
- en: Figure 4.2 – High-level process of app modernization
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.2 – 应用程序现代化的高层次过程
- en: 'In summary, app modernization is about the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，应用程序现代化包含以下内容：
- en: A compelling business case. Is it worthwhile to modernize an application? How
    *core* is the application to the business?
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个引人注目的商业案例。现代化一个应用程序是否值得？该应用程序对业务的重要性有多*核心*？
- en: A compelling strategy. Replatform, refactor, or rebuild? Or, is it wise to do
    a simple lift and shift to the cloud first and start the transformation on the
    new platform?
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一项引人注目的策略。是重新平台化、重构，还是重建？或者，是否明智的做法是先进行简单的“提升和迁移”到云端，并在新平台上开始转型？
- en: A compelling plan. Have risks been identified? Does the team have the right
    skills and tools to mitigate these risks? Knowing the risks, is the plan feasible
    in a number of sprints?
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一份引人注目的计划。是否已经识别出风险？团队是否具备缓解这些风险的正确技能和工具？了解了风险之后，计划在多个迭代周期内可行吗？
- en: We've discussed legacy applications and what enterprises can do to modernize
    these applications, but enterprises will also develop new code and launch new
    or improved services. Since we are working in a DevOps mode, we have to look at
    a development methodology that keeps track with that. RAD is a solution. We will
    learn about RAD in the next section.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了传统应用程序以及企业如何对这些应用程序进行现代化，但企业还将开发新代码并推出新的或改进的服务。由于我们在 DevOps 模式下工作，我们必须关注一种能够跟上这一进程的开发方法论。RAD
    是一种解决方案，我们将在下一节中学习 RAD。
- en: Working with RAD
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 RAD 合作
- en: 'So far, we discussed how DevOps breaks down silos between developers and operations
    and how it helps in speeding up the development of products, services, and systems.
    Implementing DevOps will increase the velocity of development, but DevOps in itself
    is merely a way of structuring planning of development. It helps in planning in
    iterations: starting with a **minimal viable product** (**MVP**) and then iterating
    improvements in next versions. DevOps is not about the development of code itself.
    We need a development methodology for writing the code, but that methodology should
    *fit* with DevOps. In this section, we will look at RAD.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们讨论了 DevOps 如何打破开发人员和运维人员之间的壁垒，以及它如何帮助加速产品、服务和系统的开发。实施 DevOps 将提高开发速度，但
    DevOps 本身仅仅是规划开发的一种方式。它有助于以迭代方式进行规划：从**最小可行产品**（**MVP**）开始，然后在下一版本中进行迭代改进。DevOps
    不是关于代码本身的开发。我们需要一种开发方法来编写代码，但这种方法应该与 DevOps*相契合*。在本节中，我们将讨论 RAD。
- en: Why does RAD fit to DevOps and the agile way of working? The main reason is
    that RAD is agile in itself. RAD starts with prototyping (the MVP) and then focuses
    on iterations. The emphasis is on the fulfillment of requirements, rather than
    on planning. It allows developers to realize quick improvements and adjustments
    during the development cycle.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么 RAD 适合 DevOps 和敏捷工作方式？主要原因是 RAD 本身就是敏捷的。RAD 从原型设计（MVP）开始，然后专注于迭代。重点是满足需求，而不是规划。它允许开发人员在开发周期中快速实现改进和调整。
- en: 'Key principles in RAD are furthermore reuse of code and intensive collaboration
    between the stakeholders: business representatives, architects, developers, testers,
    engineers, and the end customer that will use the software. Code is constantly
    reviewed, tested, and validated against the requirements, which are implemented
    in small improvements. This way, risks that the end product is not meeting the
    specifications are less likely to occur. The team is in full control of every
    single small step.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: RAD 的关键原则还有代码的重用和利益相关者之间的密切合作：业务代表、架构师、开发人员、测试人员、工程师以及最终将使用该软件的客户。代码不断地进行审查、测试，并根据需求进行验证，这些需求通过小的改进来实现。通过这种方式，最终产品不符合规格的风险更小。团队对每一个小步骤都有完全的控制权。
- en: 'To develop according to RAD, the team needs to follow the following five basic
    steps. These steps completely align with the principles of DevOps:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为了根据 RAD 进行开发，团队需要遵循以下五个基本步骤。这些步骤与 DevOps 的原则完全一致：
- en: '**Define requirements**: Gather the business requirements and set the scope,
    budget, timelines, and the acceptance criteria. Have all stakeholders sign off
    to ensure that everyone is in agreement of the deliverables and the final product.'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**定义需求**：收集业务需求，设定范围、预算、时间表和验收标准。让所有利益相关者签字确认，以确保每个人都同意交付物和最终产品。'
- en: '**Build**: The development starts with the MVP. Next, the MVP is improved in
    iterations up until the final product is delivered. Keep in mind that in DevOps,
    developers and operations need to be aligned on the product, so they will have
    to work closely together. Can operations manage the application or can it be improved?
    In [*Chapter 5*](B17492_05_ePub_RK.xhtml#_idTextAnchor066), *Architecting Next-Level
    DevOps with SRE*, we will learn how operations can drive improvements such as
    automation in development.'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**构建**：开发从 MVP 开始。接下来，MVP 会经过迭代改进，直到最终产品交付。请记住，在 DevOps 中，开发人员和运维人员需要就产品达成一致，因此他们必须密切合作。运维是否能够管理应用程序，或者它能否进行改进？在
    [*第 5 章*](B17492_05_ePub_RK.xhtml#_idTextAnchor066)，《*通过 SRE 架构下一个层次的 DevOps*》中，我们将学习运维如何推动开发中的改进，例如自动化。'
- en: '**Collect feedback**: We learned in the previous chapter that DevOps embraces
    continuous testing as a quality measurement. This means that feedback is constantly
    collected. This is technical feedback and feedback on the functionality. Developers
    use this feedback to improve the next iteration or version. This is also a matter
    of the DevOps culture: feedback should not be seen as criticism or even a verdict.
    Feedback is really an instrument to improve quality throughout the project.'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**收集反馈**：我们在前一章中了解到，DevOps 接纳持续测试作为质量衡量标准。这意味着反馈会不断被收集。这是技术性反馈和功能性反馈。开发人员使用这些反馈来改进下一次迭代或版本。这也是
    DevOps 文化的一部分：反馈不应被视为批评甚至是判决。反馈实际上是一个改进项目质量的工具。'
- en: '**Test**: In conjunction with collecting feedback, software is continuously
    tested. Does the code work properly and is it meeting the requirements? Testing
    is probably one of the most important things in DevOps projects. In [*Chapter
    3*](B17492_03_ePub_RK.xhtml#_idTextAnchor040), *Architecting for DevOps Quality*,
    we discussed testing strategies and different types of tests.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**测试**：与收集反馈相结合，软件需要持续测试。代码是否正常工作，是否符合需求？测试可能是 DevOps 项目中最重要的事情之一。在[*第 3 章*](B17492_03_ePub_RK.xhtml#_idTextAnchor040)中，我们讨论了测试策略和不同类型的测试。'
- en: '**Publish**: If the product has reached its final state, it''s ready for go-live
    so that it can be used. Two topics that need attention in a launch are the user
    training and the period of after-care. Users will need to learn how to use the
    product and the software, and be prepared that as soon as products go into production
    and are actually used, issues still might arise. In after-care mode, teams can
    still pick up these issues fast.'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**发布**：如果产品已达到最终状态，则可以进行上线并投入使用。在发布时需要注意的两个问题是用户培训和后期维护阶段。用户需要学习如何使用产品和软件，并且要准备好在产品投入生产并实际使用后，可能仍然会出现问题。在后期维护模式下，团队仍然可以快速解决这些问题。'
- en: However, DevOps already takes care of this in itself. Issues create feedback
    that is looped back into the project, driving improvements. In practice, teams
    will create *fast lanes* to pick up issues in production with high priority. This
    might halt the further development of products and the development of new features.
    Exactly this is addressed in **site reliability engineering** (**SRE**), the main
    topic of the next chapter.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，DevOps 已经在其内部解决了这个问题。问题产生反馈，并被回馈到项目中，推动改进。实际上，团队会创建*快速通道*，以便优先处理生产环境中的问题。这可能会暂停产品的进一步开发和新功能的开发。正是这一点在**站点可靠性工程**（**SRE**）中得到了处理，这也是下一章的主要话题。
- en: 'To summarize, the RAD process is shown in the following diagram:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，RAD 过程如图所示：
- en: '![Figure 4.3 – RAD'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.3 – RAD'
- en: '](img/B17492_04_003.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_04_003.jpg)'
- en: Figure 4.3 – RAD
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3 – RAD
- en: In this section, we learned how to integrate software development in a DevOps
    project. Software needs infrastructure to run. In the next section, we will discuss
    scaling infrastructure.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何在 DevOps 项目中整合软件开发。软件需要基础设施来运行。在下一节中，我们将讨论扩展基础设施。
- en: Scaling infrastructure with DevOps
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 DevOps 扩展基础设施
- en: One of the key features in modern DevOps is the use of cloud technology. In
    this section, we will discuss why enterprises gain a lot of benefit by moving
    infrastructure in cloud platforms such as AWS and Azure. First, we will study
    the principles of scaling, since this is one of the major benefits of using cloud
    infrastructure. At the end of the section, we will also touch upon next-level
    scaling with containers, given the fact that in the coming years, there will be
    a big shift from VMs to containers.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现代 DevOps 的一个关键特性是使用云技术。在本节中，我们将讨论为什么企业通过将基础设施迁移到 AWS、Azure 等云平台中能获得巨大的好处。首先，我们将研究扩展的原理，因为这是使用云基础设施的主要好处之一。在本节的最后，我们还将探讨容器的下一层级扩展，因为在未来几年，将会从虚拟机（VM）转向容器。
- en: 'In DevOps projects, developers use pipelines, as we have seen in the previous
    chapter. Code is pulled from a repository, changed, tested, and pushed to the
    next stage. Code follows a promotion path: from development to test, acceptance,
    and—eventually—production systems. Development and test systems might not always
    be needed; they simply have to be there whenever they are required in the process.
    If the work is done, then these systems might be suspended or even decommissioned.
    The benefit of the cloud is that enterprises don''t pay for these systems if they''re
    not in use, in contradiction with on-premises hardware that has been purchased
    as a one-off investment. So, the scaling up of development and test systems on
    demand is a huge advantage of cloud infrastructure.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DevOps 项目中，开发人员使用管道，如我们在上一章所见。代码从代码库中拉取，修改，测试，并推送到下一个阶段。代码遵循一个晋升路径：从开发到测试、验收，最终到生产系统。开发和测试系统可能并不总是需要的；它们只需在流程中需要时出现。如果工作完成，这些系统可能会被暂停或甚至退役。云的好处在于，如果这些系统未使用，企业无需为其支付费用，这与作为一次性投资购买的本地硬件相矛盾。因此，按需扩展开发和测试系统是云基础设施的一个巨大优势。
- en: Another important feature of modern DevOps is automation. A major benefit in
    using cloud infrastructure is the ability to have automatic scaling. However,
    architects and engineers might want to be a bit careful with automated scaling.
    It's true that enterprises pay for what they use in the cloud, whereas in the
    traditional way of working enterprises would need to buy physical machines whenever
    extra capacity was needed. The good side about that was that architects really
    needed to think about the required capacity.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现代 DevOps 的另一个重要特性是自动化。使用云基础设施的一个主要好处是能够实现自动扩展。然而，架构师和工程师可能需要在自动扩展方面小心一些。确实，企业在云中按需付费，而在传统的工作方式中，企业在需要额外容量时必须购买物理机器。其优点是，架构师真的需要考虑所需的容量。
- en: In the cloud, there might not be a driver anymore to worry about capacity. Nothing
    could be further from the truth, though. In cases of peak demand and automated
    scaling without setting limits, the cloud bill will turn out to be a surprise.
    Enterprises, especially financial officers, should therefore not completely rely
    on scaling. In other words, architects will still have a responsibility to plan
    capacity.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在云中，可能不再有需要担心容量的驱动因素。然而，这种想法是完全错误的。在需求高峰和没有设置限制的自动扩展情况下，云账单可能会让人吃惊。因此，企业，特别是财务人员，应该不完全依赖扩展。换句话说，架构师仍然需要承担规划容量的责任。
- en: 'Now, let''s study the different varieties of scaling, as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们学习不同的扩展类型，如下所示：
- en: '**Vertical or scale-up**: Let''s take a server as an example to explain this.
    The server has one processor, 2 **gigabytes** (**GB**) of memory, and 100 GB of
    disk storage. If we scale up, we add processors, memory, or disk storage to that
    server. We are adding resources to the same machine and increasing its capacity.
    That can be done as long as there''s room in the server to add resources. We can
    imagine that this is easier in a coded, virtual world than with a physical machine
    where engineers really need to take out their screwdrivers and mount, for instance,
    extra memory cards in that server. The following diagram shows the principle of
    vertical scaling:'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**纵向扩展或纵向扩展**：我们以一台服务器为例来解释这个概念。该服务器有一个处理器、2 **千兆字节** (**GB**) 的内存和 100 GB
    的磁盘存储。如果我们进行纵向扩展，我们会向该服务器添加处理器、内存或磁盘存储。我们将资源添加到同一台机器上，从而提高其容量。只要服务器有空间添加资源，就可以这样做。我们可以想象，在虚拟的编码世界中，这比在物理机器上容易得多，因为工程师们真的需要拿出螺丝刀来安装，例如，额外的内存条。下面的图示展示了纵向扩展的原理：'
- en: '![Figure 4.4 – Scale-up or vertical scaling'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.4 – 纵向扩展或垂直扩展'
- en: '](img/B17492_04_004.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_04_004.jpg)'
- en: Figure 4.4 – Scale-up or vertical scaling
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – 纵向扩展或垂直扩展
- en: '**Horizontal or scale-out**: Now, we''re adding more servers to our environment,
    instead of increasing resources within the server. This is very common in the
    public cloud, especially when we''re using load balancers to handle traffic and
    spreading the workloads among the available servers. With automatic scaling, servers
    or pools of servers can be added automatically whenever the load is increasing
    and existing servers can''t handle it anymore without degrading the performance.
    As soon as the load decreases, the environment is scaled down again. Load balancers—an
    example is **Elastic Load Balancing** (**ELB**) in AWs—make sure that the load
    is evenly spread across available resources.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**横向扩展或横向扩展**：现在，我们向环境中添加更多的服务器，而不是增加服务器内部的资源。这在公共云中非常常见，特别是当我们使用负载均衡器来处理流量并将工作负载分配到可用服务器时。通过自动扩展，当负载增加且现有服务器无法处理而不降低性能时，可以自动添加服务器或服务器池。一旦负载减少，环境会再次缩小。负载均衡器—比如
    AWs 中的 **弹性负载均衡** (**ELB**)—确保负载均匀分配到可用资源上。'
- en: 'However, keep in mind that applications need to be *scale-aware*. Some applications
    can''t handle scaling at all, while some can scale out but can''t be scaled down
    without impacting the availability of the application. The following diagram shows
    the principle of horizontal scaling:'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然而，请记住，应用程序需要具有*扩展感知*。有些应用程序根本无法处理扩展，而有些则可以进行横向扩展，但如果进行纵向扩展，会影响应用程序的可用性。以下图示展示了水平扩展的原理：
- en: '![Figure 4.5 – Scale-out or horizontal scaling'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.5 – 横向扩展或水平扩展'
- en: '](img/B17492_04_005.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_04_005.jpg)'
- en: Figure 4.5 – Scale-out or horizontal scaling
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5 – 横向扩展或水平扩展
- en: '**Full or dynamic scaling**: This is a combination of vertical and horizontal
    scaling. As soon as limits are reached in scaling up, environments can be scaled
    out. In most cases, the scaling out is done by a cloning server. In Azure, we
    can use Azure Automation to do this. In AWS, we can copy the image of the server
    and then spin up a new machine with that image in **Elastic Compute Cloud** (**EC2**),
    using AWS Systems Manager Automation. Off course, there are a lot of third-party
    tools too that can help in automating scaling.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完全或动态扩展**：这是垂直扩展和水平扩展的结合。一旦达到向上扩展的限制，环境可以进行向外扩展。在大多数情况下，水平扩展是通过克隆服务器来完成的。在
    Azure 中，我们可以使用 Azure Automation 来执行此操作。在 AWS 中，我们可以复制服务器的镜像，然后使用 **弹性计算云**（**EC2**）和
    AWS Systems Manager Automation 启动新机器。当然，还有许多第三方工具也可以帮助自动化扩展。'
- en: There are clear benefits of scaling in the cloud. We can have resources available
    on demand, scaling to the capacity that we need at a certain time. Since we're
    only paying for what we use, we could save money by scaling down resources if
    we don't need them anymore. For example, development and test systems might not
    be needed all the time and can be suspended when the work is done. Maybe teams
    can completely decommission these systems and simply spin up new ones as soon
    as the project requires it.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在云中进行扩展有明显的好处。我们可以根据需求获取资源，按需扩展到特定时间所需的容量。由于我们只为使用的部分付费，因此如果不再需要资源，可以通过缩减资源来节省开支。例如，开发和测试系统可能并不总是需要，工作完成后可以暂停使用。也许团队可以完全停用这些系统，只需在项目需要时立即启动新的系统。
- en: The best part is that DevOps teams can control this completely by themselves—they
    are no longer dependent on purchase departments that need to order hardware or
    require engineers to install it in the data center. It's all code, including the
    scale sets, and it can be fully integrated in the pipelines, ready at their disposal.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的一点是，DevOps 团队可以完全自行控制这一过程——他们不再依赖于采购部门来订购硬件或要求工程师将其安装到数据中心。所有这些都是代码，包括扩展集，并且可以完全集成到管道中，随时待命。
- en: Scaling with containers
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用容器进行扩展
- en: A major forthcoming change in IT infrastructure is moving from VMs to containers.
    The driver behind this is interoperability of systems between different platforms.
    Containers seem to be a very good solution to have software interoperable across
    platforms, with ultimate scalability. There are, however, a few things that an
    architect needs to consider. To start with, they must understand that containers
    also need infrastructure to land on. Containers do not run by themselves.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: IT 基础设施即将发生一个重要变化，即从虚拟机（VM）迁移到容器。推动这一变化的原因是不同平台之间系统的互操作性。容器似乎是一个非常好的解决方案，能够使软件在不同平台之间实现互操作性，并具备最终的可扩展性。然而，架构师需要考虑几个方面。首先，他们必须明白容器也需要一个基础设施来承载。容器本身无法独立运行。
- en: Containers are operated on compute clusters with a management layer that enables
    the sharing of resources and the scheduling of tasks to workloads that reside
    within the containers. Resources are compute clusters, a group of servers—commonly
    referred to as nodes—that host the containers. The management or orchestration
    layer makes sure that these nodes work as one unit to run containers and execute
    processes—the tasks—that are built inside the containers.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 容器在计算集群上运行，管理层使得资源共享和任务调度能够在容器内的工作负载之间进行。资源是计算集群，即一组服务器——通常称为节点——用来托管容器。管理或编排层确保这些节点作为一个整体来运行容器并执行容器内部构建的进程——即任务。
- en: The cluster management tracks the usage of resources in the cluster such as
    memory, processing power, and storage, and next assigns containers to these resources
    so that the cluster nodes are utilized in an optimized way and applications run
    well.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 集群管理跟踪集群中资源的使用情况，如内存、处理能力和存储，然后将容器分配给这些资源，以便以优化的方式利用集群节点，并确保应用程序运行良好。
- en: In other words, scaling containers is not so much about the containers themselves,
    but more about scaling the underlying infrastructure. To make this a bit easier,
    Google invented the orchestration platform Kubernetes that takes care of cluster
    management. Kubernetes uses pods, enabling the sharing of data and application
    code among different containers, acting as one environment. Take the last sentence
    quite literally. Pods work with the **share fate** principle, meaning that if
    one container dies in the pod, all containers go with it.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，扩展容器并不完全是关于容器本身，而更多的是关于扩展底层基础设施。为了简化这一过程，Google发明了一个叫做Kubernetes的编排平台，它负责集群管理。Kubernetes使用pods，允许不同容器之间共享数据和应用代码，形成一个统一的环境。请字面理解上一句话。Pods遵循**共同命运**原则，这意味着如果pod中的一个容器失败，所有容器都会一起崩溃。
- en: 'The workflow in the following screenshot shows the basics of Kubernetes:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了Kubernetes的基础工作流程：
- en: '![Figure 4.6 – High-level architecture of Kubernetes'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '![图4.6 – Kubernetes的高层架构'
- en: '](img/B17492_04_006.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_04_006.jpg)'
- en: Figure 4.6 – High-level architecture of Kubernetes
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.6 – Kubernetes的高层架构
- en: The good news, though, is that pods can be replicated using replication controllers.
    Kubernetes polls whether the specified number of pods is running within the cluster
    nodes. If required, pods are replicated, making sure that the specified number
    of containers is running.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，好消息是，pods可以通过复制控制器进行复制。Kubernetes会检查指定数量的pods是否在集群节点中运行。如果需要，pods会被复制，确保指定数量的容器正在运行。
- en: Containers are a good solution, but there are still some shortcomings. The most
    important one is that containers and clusters might be interoperable, but typically,
    networks and storage layers are not. In order to scale container solutions, we
    also need networks and storage layers to be *integrated*. For example, Azure Blob
    is a different beast from AWS **Simple Storage Service** (**S3**), yet Kubernetes
    runs on both platforms using **Azure Kubernetes Services** (**AKS**) and **Elastic
    Kubernetes Services** (**EKS**) on AWS. There will be solutions to overcome this,
    but it's definitely something to take into account when planning container platforms.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 容器是一个很好的解决方案，但仍然存在一些不足之处。最重要的一点是，容器和集群可能是互操作的，但通常网络和存储层并非如此。为了扩展容器解决方案，我们还需要网络和存储层的*集成*。例如，Azure
    Blob与AWS的**简单存储服务**（**S3**）完全不同，但Kubernetes可以在两个平台上运行，使用**Azure Kubernetes服务**（**AKS**）和AWS的**弹性Kubernetes服务**（**EKS**）。虽然会有解决方案来克服这一点，但在规划容器平台时，绝对需要考虑到这一点。
- en: Scaling DevOps in an enterprise environment
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在企业环境中扩展DevOps
- en: 'We''ve discussed the benefits of DevOps and what cloud adoption, automation,
    and an agile way of working could bring to an enterprise. The big question is:
    *How and where to start?* Opinions differ here, from a **big-bang approach** to
    step-by-step adoption.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了DevOps的好处，以及云计算的采用、自动化和敏捷工作方式如何为企业带来改变。现在的大问题是：*如何开始，在哪里开始？* 这里的看法各不相同，从**爆炸式方法**到逐步实施。
- en: Enterprises that have a lot of their IT muscles outsourced to different IT suppliers
    and that have been working for decades in a certain way are not easily changed.
    For one, there will be a lot of pushback from staff—remember that DevOps is also
    about changing a mindset or a culture. In this section, we're taking the approach
    of step-by-step adoption, or evolution instead of revolution.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 那些将大量IT工作外包给不同供应商，并且已经在某种方式下工作了几十年的企业，并不容易改变。首先，员工会有很大的抵触情绪——记住，DevOps不仅仅是关于技术的变化，它同样涉及到心态或文化的改变。在这一部分，我们采取逐步采用的方法，或称演进而非革命。
- en: 'Here are some recommendations:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些建议：
- en: '**Start small**: Don''t start by implementing DevOps on large projects. Organize
    a small team and a simple project to learn and—even more important—to identify
    possible bottlenecks in the processes. What is possibly hindering the DevOps way
    of working? Do resources have the right skills, and is the team composed of the
    right resources? Does the team have the required tools? Are the requirements clear,
    even if it''s a simple build? Are processes aligned with DevOps? Learn from the
    bottlenecks and improve in each step.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从小做起**：不要一开始就把DevOps实施在大型项目上。组织一个小团队和一个简单的项目来学习——更重要的是——识别流程中的可能瓶颈。是什么可能阻碍DevOps的工作方式？资源是否具备所需技能，团队是否由合适的人员组成？团队是否具备所需的工具？即使是一个简单的构建，需求是否明确？流程是否与DevOps对齐？从瓶颈中学习，并在每个步骤中改进。'
- en: '**Start with the end in mind**: Know where you are going and what the end product
    will look like. Working in small iterations doesn''t mean that the team will not
    need a clear picture of the end goal of the project. The same applies for implementing
    DevOps in an enterprise. From enterprise architecture, it must be clear what the
    strategy is for that enterprise: where will it be in 1, 3, or 5 years? Defining
    an enterprise roadmap can help in setting goals. An example is presented in the
    following diagram:'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从最终目标开始**：要清楚你要去哪里，最终的产品会是什么样子。分小步迭代工作并不意味着团队不需要对项目的最终目标有明确的了解。同样，在企业中实施
    DevOps 也适用。从企业架构的角度，必须清楚该企业的战略是什么：它在1年、3年或5年后会处于什么位置？定义企业的路线图有助于设定目标。以下图示给出了一个示例：'
- en: '![Figure 4.7 – Enterprise roadmap for adopting DevOps'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.7 – 企业采用 DevOps 的路线图](img/B17492_04_007.jpg)'
- en: '](img/B17492_04_007.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_04_007.jpg)'
- en: Figure 4.7 – Enterprise roadmap for adopting DevOps
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.7 – 企业采用 DevOps 的路线图
- en: 'The preceding screenshot shows three basic stages, outlined as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的截图显示了三个基本阶段，概述如下：
- en: '- **Foundation**: The architect defines the target operating model, based on
    a reference architecture covering the applications, technology, security, services,
    and governance. At this stage, the cloud adoption is an important topic: the major
    cloud platforms, Azure, AWS, and Google Cloud, have **Cloud Adoption Frameworks**
    (**CAFs**) that will help in setting up the basics to operate systems in the cloud.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '- **基础**：架构师定义目标操作模型，基于涵盖应用、技术、安全、服务和治理的参考架构。在这个阶段，云采用是一个重要话题：主要的云平台，如 Azure、AWS
    和 Google Cloud，都拥有**云采用框架**（**CAFs**），它们将在云中运营系统的基础搭建中提供帮助。'
- en: '- **Adopt**: This stage is about adopting the foundation and the target operating
    model. The cloud environments are set up and the first—small—projects are initiated
    in DevOps mode. Concepts such as **Infrastructure as Code** (**IaC**) and RAD
    can be introduced. A way to do this is by installing a **Center of Excellence**
    (**CoE**) with **subject-matter experts** (**SMEs**) that can guide in the adoption
    of the model, including the cloud technology, use of DevOps tooling, and agile
    coaches to help implement the agile way of working. In the next section, *Scaling
    using a CoE*, we will discuss the setup of the CoE.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '- **采用**：这一阶段是关于采用基础和目标操作模型。云环境已经设置完毕，并且在 DevOps 模式下启动了第一个——小规模——项目。可以引入**基础设施即代码**（**IaC**）和
    RAD 等概念。实施的方法之一是建立一个**卓越中心**（**CoE**），由**主题专家**（**SMEs**）组成，他们可以在模型的采用过程中提供指导，包括云技术、DevOps
    工具的使用以及敏捷教练帮助实施敏捷工作方式。在下一节中，*通过 CoE 进行扩展*，我们将讨论 CoE 的设置。'
- en: '- **Expand**: We have referenced architecture, have defined a target operating
    model, and assigned a group of experts to take part in a CoE to help in adopting
    the new models and delivering the first projects. At this stage, the model can
    be expanded in the enterprise.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '- **扩展**：我们已经有了参考架构，定义了目标操作模型，并指派了一组专家参与卓越中心（CoE），帮助采用新模型并交付首批项目。在这个阶段，模型可以在企业中进行扩展。'
- en: '**Make sure all steps are visible**: Transparency is key in DevOps. It applies
    to the way of working within the teams and the delivery process of products. Tools
    must enable full visibility as to what happens in the development and release
    chain, the CI/CD pipelines. Ideally, teams have a single-pane-of-glass view on
    events in the release chain: tools that collect real-time data from the pipelines
    and the systems. But also, team members need to know exactly what other members
    are doing, since DevOps is in essence mainly about close cooperation. Team members
    need to be able to track activities, anticipate, and—if needed—correct steps.
    The end goal is a better product.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确保所有步骤都是可见的**：透明度是 DevOps 的关键。这适用于团队内部的工作方式以及产品交付过程。工具必须能够提供开发和发布链中发生的事情的完整可视性，即
    CI/CD 管道。理想情况下，团队应该有一个单一的视图来观察发布链中的事件：这些工具能够从管道和系统中收集实时数据。但同样，团队成员需要清楚其他成员的工作内容，因为
    DevOps 本质上主要是关于紧密合作。团队成员需要能够跟踪活动、预见问题，并在必要时进行纠正。最终目标是更好的产品。'
- en: '**Be ready for change—at all times**: This one seems obvious, but in DevOps
    nothing is set in stone. If something can be improved, teams should be motivated
    to adopt the change that enables this improvement. It applies to DevOps teams
    and their projects, but also to the enterprise as a whole. Even the biggest enterprises
    in the world every now and then have to hit the refresh button, to quote the book
    of Microsoft''s **Chief Executive Officer** (**CEO**) Satya Nadella.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**随时准备迎接变革**：这一点看起来显而易见，但在DevOps中，没有什么是石刻定案的。如果某些方面可以改进，团队应该被激励去采纳那些能够促进改进的变化。这不仅适用于DevOps团队及其项目，也适用于整个企业。即使是世界上最大的企业，也时不时需要按下刷新按钮，借用微软**首席执行官**（**CEO**）萨提亚·纳德拉的说法。'
- en: We've introduced the CoE. In the next section, we will elaborate on that.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了CoE。在接下来的部分，我们将详细阐述这一点。
- en: Scaling using a CoE
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用CoE进行扩展
- en: A starting point could be a CoE. Again, it sounds like a big thing, but it doesn't
    have to be. On the contrary—a CoE can be a good entry point to start transforming
    a business. The CoE is a team that leads or supports employees and organizations
    in the adoption, migration, and operations of new technology, or even a new way
    of working. In short, the CoE can be the starting point of the digital transformation
    of an enterprise. Instead of trying to change the enterprise as a whole at once,
    we assign a team to guide this. The main goal of a CoE is to define and help implement
    best practices for implementing architecture, transforming and optimizing operations,
    and implementing governance.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一个起点可以是一个CoE（卓越中心）。再次强调，这听起来像是个大事情，但其实不一定。相反，CoE可以是开始转型企业的一个良好切入点。CoE是一个团队，负责领导或支持员工和组织采用、迁移并运营新技术，甚至是一种新的工作方式。简而言之，CoE可以是企业数字化转型的起点。与其试图一口气改变整个企业，我们可以指派一个团队来引导这一过程。CoE的主要目标是定义并帮助实施最佳实践，推动架构实施、转型和优化运营，以及实现治理。
- en: The installation of a CoE should also be done in steps, starting with a CoE
    that defines the standards and policies. For that reason, the architect should
    be a member of the CoE. Next, the CoE defines the *guardrails*, ensuring the usage
    of best practices. Don't reinvent the wheel, but use what's out there and has
    been proven to work well in other enterprises. But there's a risk in that too.
    The risk is that the team is making it too big.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: CoE的安装也应该分步骤进行，首先是定义标准和政策的CoE。因为这个原因，架构师应该是CoE的成员。接下来，CoE定义*守护轨道*，确保使用最佳实践。不要重新发明轮子，而是使用已经存在并在其他企业中经过验证有效的方法。但这也有风险。风险在于，团队可能会把事情做得太大。
- en: A commonly used framework to enroll an agile way of working is **SAFe**, the
    **Scaled Agile Framework**. It might include the implementation of the Spotify
    model, with the instalment of tribes and squads. Those are huge changes for any
    company, even if it's done in just one team. It will impact the whole enterprise,
    especially when IT is outsourced and resources from suppliers need to be involved
    in newly formed teams such as squads. Does the contract between the enterprise
    and the supplier even cater for the new way of working? Before you know it, we
    are implementing a world-conquering plan.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常用的框架来实施敏捷工作方式是**SAFe**，即**规模化敏捷框架**。它可能包括实施Spotify模型，并设置tribes（部落）和squads（小队）。对于任何公司来说，这些都是巨大的变化，即便只是在一个团队中进行，也会影响整个企业，尤其是当IT外包并且供应商的资源需要参与新组建的小队时。企业与供应商之间的合同是否考虑到了这种新的工作方式？没多久，我们就可能在实施一个征服全球的计划。
- en: It doesn't mean that we can't use principles of SAFe, but we need to make sure
    that it *fits* and that it is adopted. The CoE can help in defining and controlling
    the adoption toll gates and suggest improvements. This type of CoE—still a small
    team—is referred to as prescriptive.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不意味着我们不能使用SAFe的原则，但我们需要确保它*适合*并且能够被采纳。CoE可以帮助定义和控制采纳的关卡，并提出改进建议。这种类型的CoE——仍然是一个小团队——被称为规范性CoE。
- en: The next level of the CoE is the advisory level. At this stage, the CoE is formed
    as a (virtual) team of SMEs in different domains, actively helping DevOps teams
    in executing projects. The CoE guards the standards and policies, and controls
    and validates whether these are followed. From this point, the implementation
    of DevOps and agile is accelerated, breaking down the original organization silos.
    However, this is done step by step.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: CoE 的下一个级别是咨询级别。在这个阶段，CoE 作为一个由不同领域的**SMEs**（领域专家）组成的（虚拟）团队，积极帮助 DevOps 团队执行项目。CoE
    负责制定标准和政策，并控制和验证是否遵循这些标准和政策。从这一点开始，DevOps 和敏捷的实施加速，打破了原有的组织壁垒。然而，这一过程是一步一步进行的。
- en: Starting with simple projects in small teams, it doesn't sound like DevOps and
    agile are really suitable to develop and run mission-critical environments. That's
    not the case. An enterprise might want to start with mission-critical, but if
    DevOps is scaled right and there's a clear plan on app modernization, we can also
    start managing critical environments in a DevOps way. The final section, *Managing
    mission-critical environments with DevOps,* of this chapter will explain more
    on this.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 从小团队的简单项目开始，DevOps 和敏捷似乎并不适合开发和运行关键任务环境。但事实并非如此。企业可能想要从关键任务开始，但如果 DevOps 得到了适当的扩展，并且有清晰的应用现代化计划，我们也可以以
    DevOps 的方式开始管理关键环境。本章的最后一节，*使用 DevOps 管理关键任务环境*，将进一步解释这一点。
- en: Managing mission-critical environments with DevOps
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 DevOps 管理关键任务环境
- en: In this section, we will discuss DevOps for mission-critical environments and
    why it can be done to manage core applications. Let's first define **mission-critical**.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论 DevOps 在关键任务环境中的应用，以及为什么它能够用于管理核心应用程序。首先，我们来定义一下**关键任务**。
- en: 'A very straightforward definition would be: any software that an enterprise
    needs to remain in business. If a mission-critical system were to fail, the enterprise
    would potentially lose a lot of money, either due to direct missed transactions
    or through things that are less tangible, such as reputation damage. These systems
    are identified through the process of **business impact analysis** (**BIA**).'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常直接的定义是：任何企业为了保持业务运营所需的软件。如果一个关键任务系统发生故障，企业可能会损失大量资金，无论是因为直接的交易丧失，还是由于一些较为无形的损失，例如声誉损害。这些系统通过**业务影响分析**（**BIA**）过程进行识别。
- en: When we start with DevOps projects, the first thing that an architect does is
    gather the business and technical requirements. That would include the outcomes
    of the BIA process, which is typically done in cooperation with internal auditors
    and business stakeholders. From the BIA, critical systems or system components
    are identified that need to be restored very quickly in case these systems fail.
    This is a very cumbersome process that will cause of lot of discussion.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始 DevOps 项目时，架构师首先做的事情是收集业务和技术需求。这将包括 BIA 过程的结果，通常是与内部审计员和业务利益相关者合作完成的。通过
    BIA，能够识别出在这些系统发生故障时需要迅速恢复的关键系统或系统组件。这是一个非常繁琐的过程，会引发很多讨论。
- en: The enterprise architect will need to understand that stakeholders might have
    different views on what critical systems are. Financial systems in banks will
    be business-critical, but a car factory will not immediately lose business if
    the **Chief Financial Officer** (**CFO**) can't access financial reports for—let's
    say—an hour or so. Production at that factory, however, will stop immediately
    if the assembly robots fail.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 企业架构师需要理解，利益相关者对于什么是关键系统可能有不同的看法。银行的金融系统是业务关键的，但如果一家汽车工厂的**首席财务官**（**CFO**）无法访问财务报告——假设是一个小时左右——该工厂的业务不会立即受到影响。然而，如果该工厂的组装机器人发生故障，生产将立即停止。
- en: Enterprises are still reluctant to host critical systems in public clouds because
    they think that they will lose control over the systems if these are not sitting
    in a privately owned on-premises data center that engineers can immediately enter
    in the case of an emergency. Yet, the public cloud might be the best place to
    host these systems. Because of the vast capacity that these platforms have, it's
    easy to have a copy of critical systems in different regions and zones. If one
    cloud data center fails, there's a second data center that can take over. Using
    cloud technology, this can be done with a minimal loss of data. Cloud technology
    offers tools to build more resilient environments.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 企业仍然不愿意将关键系统托管在公共云中，因为他们认为如果这些系统不位于工程师在紧急情况下可以立即进入的私有数据中心，他们就会失去对系统的控制。然而，公共云可能是托管这些系统的最佳选择。由于这些平台具有巨大的容量，很容易在不同的区域和可用区内复制关键系统。如果一个云数据中心发生故障，第二个数据中心可以接管。使用云技术，可以最小化数据丢失的风险。云技术提供了构建更具弹性环境的工具。
- en: Where does DevOps come in? In drafting the **business continuity plan** (**BCP**)
    for which the BIA is the input. There's no real technical reason why mission-critical
    systems can't be cloud-hosted and developed and managed through DevOps, but given
    the fact that these systems need to be highly resilient, there are a couple of
    things to consider—for instance, in planning and applying changes.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 在哪里发挥作用？它体现在起草**业务连续性计划**（**BCP**）中，BIA 是该计划的输入。没有真正的技术原因说明为什么关键任务系统不能托管在云端并通过
    DevOps 开发和管理，但考虑到这些系统需要具有高度的弹性，有几个问题需要考虑——例如，在计划和应用变更时。
- en: Note
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项
- en: 'There''s a nuance to the statement that there''s no real technical reason why
    mission-critical systems can''t be hosted in the cloud. Latency can be an issue:
    the time that information needs to travel between systems. One other reason can
    be compliancy set by law and regulations. Some organizations are simply not allowed
    to host systems in a cloud data center that is not residing in the country or
    region where the organization itself is based. These are aspects that need to
    be taken into account too as part of the BIA.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 关于没有真正的技术原因表明关键任务系统不能托管在云中的说法，还有一个细节需要注意：延迟可能是一个问题，即信息在系统之间传输所需的时间。另一个原因可能是法律和法规要求的合规性。一些组织根本不允许将系统托管在不位于其所在国家或地区的云数据中心。这些也是在进行
    BIA 时需要考虑的因素。
- en: An ongoing theme within DevOps is CI. That comes with changes, and changes have
    impact, also on business continuity. With critical systems, we have to make sure
    that the release process is designed in such way that business continuity is safeguarded.
    Quality assurance is, therefore, crucial.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 中的一个持续主题是 CI。这伴随着变更，而变更也会对业务连续性产生影响。对于关键系统，我们必须确保发布过程的设计能够保障业务连续性。因此，质量保证至关重要。
- en: First of all, test the code as soon as it's created. With critical systems,
    tests must be focused on ensuring that as code is pushed to production, the vital
    processes of the enterprise are not impacted or are only very limited, at an explicitly
    prior-accepted risk level. Next, be sure that there's a fallback, rollback, or
    restore mechanism.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，代码创建后要尽快进行测试。对于关键系统，测试必须集中在确保代码推送到生产环境时，企业的关键业务流程不受影响，或者影响非常有限，并且是以事先明确接受的风险水平进行的。接下来，确保有回退、回滚或恢复机制。
- en: 'How can teams be sure that what they''re planning to release is *safe to go*?
    The answer to that one is a go-live run. Here''s where the promotion path that
    we discussed in [*Chapter 3*](B17492_03_ePub_RK.xhtml#_idTextAnchor040), *Architecting
    for DevOps Quality,* plays a crucial role. The go-live run is a real practice
    with the tested code on an acceptance system. That system should have exactly
    the same specifications as the production systems. Better: acceptance systems
    are an exact copy of production; they are production-like. The go-live run is
    done from the CI/CD pipelines, using the code as it''s processed and pushed to
    acceptance. But it''s not only about the code. Processes, security, failover to
    different systems, and restore procedures must be tested as well. DevOps tools
    need to be able to support this, as part of the BCP or framework.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 团队如何确保他们计划发布的内容是*安全可行*的？答案是进行上线运行。这里，我们在 [*第3章*](B17492_03_ePub_RK.xhtml#_idTextAnchor040)，*为
    DevOps 质量构建架构* 中讨论过的推广路径起到了关键作用。上线运行是一项在接受系统上经过测试的代码的实际操作。该系统的规格应该与生产系统完全相同。更好的是：接受系统是生产的精确副本，它们是类生产系统。上线运行是在
    CI/CD 管道中完成的，使用代码并将其处理并推送到接受系统。但这不仅仅是代码的问题。流程、安全性、故障转移到不同的系统以及恢复程序也必须进行测试。DevOps
    工具需要能够支持这一点，作为业务连续性计划（BCP）或框架的一部分。
- en: This concludes the chapter. In the last section, we touched upon resilience
    and reliability. In [*Chapter 5*](B17492_05_ePub_RK.xhtml#_idTextAnchor066), *Architecting
    Next-Level DevOps with SRE*, we go deeper into architecting for reliability with
    SRE.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束。在最后一节中，我们讨论了弹性和可靠性。在 [*第5章*](B17492_05_ePub_RK.xhtml#_idTextAnchor066)，*与
    SRE 一起构建下一代 DevOps* 中，我们深入探讨了如何通过 SRE 架构来实现可靠性。
- en: Summary
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'This chapter covered a lot of ground. It''s not easy to start with DevOps in
    large, traditional enterprises, but it is possible. In this chapter, we learned
    that we can start small and then slowly expand. Starting small doesn''t mean that
    an enterprise doesn''t need to have an end goal in mind: the enterprise architect
    has a key role in defining the target operating model and the way the enterprise
    will develop and operate products in the future. A CoE with SMEs can guide in
    this transformation.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了很多内容。在大型传统企业中，开始实施 DevOps 并不容易，但这是可能的。在本章中，我们了解到可以从小规模开始，然后逐步扩展。小规模开始并不意味着企业不需要有明确的最终目标：企业架构师在定义目标运营模型以及企业未来如何开发和运营产品方面扮演着关键角色。拥有专业领域专家（SMEs）的卓越中心（CoE）可以在这一转型中提供指导。
- en: There's a good chance that the company has legacy environments that will need
    to be transformed. We've discussed modern DevOps and using cloud and cloud-native
    technology. We also learned about different transformation strategies for applications
    and how we can develop new applications in DevOps mode using RAD.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 公司很有可能有一些遗留环境需要进行转型。我们已经讨论了现代 DevOps 和使用云技术及云原生技术。我们还了解了不同的应用程序转型策略，以及如何在 DevOps
    模式下使用 RAD 开发新应用程序。
- en: In the last section, we also learned that even mission-critical systems can
    be developed and managed in a DevOps way, if we focus on resilience and reliability
    of these systems. SRE is a method to cover this. We will learn about architecture
    in SRE in the next chapter.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一节中，我们还了解到，即使是关键任务系统，如果我们专注于这些系统的弹性和可靠性，也可以以 DevOps 方式进行开发和管理。SRE 是实现这一目标的方法。我们将在下一章学习
    SRE 中的架构内容。
- en: Questions
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: We are migrating an application from an on-premises system to Azure. The SQL
    database is migrated to Azure SQL as a PaaS solution. What do we call this migration
    strategy?
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在将一个应用程序从本地系统迁移到 Azure。SQL 数据库已迁移到 Azure SQL 作为 PaaS 解决方案。我们称这种迁移策略为什么？
- en: Name the Kubernetes services that Azure and AWS offer.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请列出 Azure 和 AWS 提供的 Kubernetes 服务。
- en: To assess business-critical systems, we need to analyze the requirements of
    these systems. What is the methodology for this?
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要评估业务关键系统，我们需要分析这些系统的需求。这种分析的方法论是什么？
- en: Further reading
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*The Modern DevOps Manifesto* ([https://medium.com/ibm-garage/the-modern-devops-manifesto-f06c82964722](https://medium.com/ibm-garage/the-modern-devops-manifesto-f06c82964722))
    by Christopher Lazzaro and Andrea C. Crawford, 2020'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '*现代 DevOps 宣言* ([https://medium.com/ibm-garage/the-modern-devops-manifesto-f06c82964722](https://medium.com/ibm-garage/the-modern-devops-manifesto-f06c82964722))，作者：Christopher
    Lazzaro 和 Andrea C. Crawford，2020年'
