- en: '*Chapter 5*: Architecting Next-Level DevOps with SRE'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 5 章*：利用 SRE 架构下一代 DevOps'
- en: 'In previous chapters, we discussed the ins and outs of DevOps. It''s called
    DevOps for a reason, but in practice, the Dev is typically emphasized: creating
    agility by speeding up the development. **Site Reliability Engineering** (**SRE**)
    addresses Ops very strongly. How does Ops survive under the ever-increasing speed
    and number of products that Dev delivers? The answer is SRE teams, working with
    error budgets and toil.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们讨论了 DevOps 的来龙去脉。之所以叫 DevOps，是有原因的，但实际上，Dev 通常更被强调：通过加速开发来创造敏捷性。**站点可靠性工程**（**SRE**）则更强烈地关注运维。那么，在开发交付的产品越来越多，速度越来越快的情况下，运维如何生存下去呢？答案就是
    SRE 团队，通过使用错误预算和艰苦工作来应对。
- en: After completing this chapter, you will have learned the basic principles of
    SRE and how you can help an enterprise adopt and implement them. You will have
    a good understanding of how to define **Key Performance Indicators** (**KPIs**)
    for SRE and what benefits these will bring to the organization.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，你将了解 SRE 的基本原则，以及如何帮助企业采纳和实施这些原则。你将对如何为 SRE 定义**关键绩效指标**（**KPI**）以及这些指标将为组织带来哪些好处有一个清晰的理解。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主要内容：
- en: Understanding the basic principles of SRE
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 SRE 的基本原则
- en: Assessing the enterprise for SRE readiness
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估企业是否具备 SRE 准备条件
- en: Architecting SRE using KPIs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 KPI 架构 SRE
- en: Implementing SRE
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施 SRE
- en: Getting business value out of SRE
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 SRE 中获得商业价值
- en: Understanding the basic principles of SRE
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 SRE 的基本原则
- en: 'In this section, we will briefly introduce SRE, originally invented by Google
    to overcome the problem of operations completely being swamped by all the new
    developments that Google launched. There are a lot of definitions of SRE, but
    in this book, we''ll use the definition used by Google itself: the thing that
    happens if you allow a software engineer to design operations.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将简要介绍 SRE，这一方法最早由 Google 发明，旨在解决 Google 因推出大量新开发而完全被运维工作淹没的问题。SRE 有很多定义，但在本书中，我们将使用
    Google 自己的定义：如果你允许一名软件工程师设计运维，所发生的事情就是 SRE。
- en: Basically, Google addressed the gap between development and operations. Developers
    changed code because of demand, while operations tried to avoid services breaking
    because of these changes. In other words, there was always some sort of tension
    between dev and ops teams. We will talk about this more in this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，Google 解决了开发和运维之间的鸿沟。开发人员因需求改变代码，而运维则尽力避免因这些变化导致服务中断。换句话说，开发和运维团队之间总是存在某种紧张关系。我们将在本章中进一步讨论这一点。
- en: 'Now, is SRE the next-level DevOps? The answer to that question is: SRE forms
    a bridge between Dev and Ops. A logical, next question, in that case, would be:
    is a bridge necessary? In the next section, we will learn that putting developers
    and operations in one team is simply not enough. There''s a natural conflict of
    interest. So, an enterprise will need to do more to really get the benefits from
    working in DevOps mode. That is exactly what SRE does.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，SRE 是下一个级别的 DevOps 吗？这个问题的答案是：SRE 在 Dev 和 Ops 之间架起了一座桥梁。基于此，接下来的问题自然是：这座桥梁有必要吗？在下一部分中，我们将了解到，仅仅将开发和运维放在同一个团队中是不够的。两者之间存在天然的利益冲突。因此，企业需要做更多的工作，才能真正从
    DevOps 模式中获益。这正是 SRE 所做的事情。
- en: 'Key topics in SRE are reliability, scalability, availability, performance,
    efficiency, and response. These are integrated into seven principles – taken from
    the SRE Workbook – that are relevant to architecture:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: SRE 中的关键主题包括可靠性、可扩展性、可用性、性能、效率和响应。这些内容被整合为七个原则——摘自 SRE 工作手册——与架构相关：
- en: '**Operations is a software problem**: This is the starting point of SRE. Software
    will change, yet operations need to remain stable so that services are not interrupted.
    It means that software needs to be resilient and tested intensively.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运维是一个软件问题**：这是 SRE 的出发点。软件会变化，但运维需要保持稳定，以确保服务不被中断。这意味着软件需要具备弹性并经过严格的测试。'
- en: '**Work according to Service-Level Objectives (SLOs)**: Set clear targets for
    the service. What should really be the availability of an application? These are
    not solely IT-related objectives. Business requirements set the parameters in
    the first place. It means that projects have to work together closely with business
    stakeholders to define the objectives.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**根据服务级目标（SLOs）工作**：为服务设定明确的目标。一个应用程序的可用性应该是什么？这些不仅仅是IT相关的目标。商业需求首先设定了参数。这意味着项目必须与业务利益相关者紧密合作，以定义目标。'
- en: '**Work to minimize toil**: We will further discuss toil, but in principle,
    toil means just work. Moreover, toil is manual work that can be avoided through
    automation. Basically, the ambition of SRE is to get computers to do the work
    for you, as much as possible.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**尽量减少无意义的劳动**：我们将进一步讨论“无意义的劳动”（toil），但从原则上讲，它指的是单纯的工作。此外，无意义的劳动是指可以通过自动化避免的手动工作。基本上，SRE的目标是尽可能让计算机为你完成工作。'
- en: '**Automate**: After principle three, this one is logical. If you can automate
    it, do so.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化**：在第三条原则之后，这一点是合乎逻辑的。如果可以自动化，就应该这样做。'
- en: '**Fail fast**: Failure is OK, as long as it''s discovered at a very early stage.
    Fixing the issue in that early stage will have a much lower impact than when it''s
    discovered and fixed at a later moment in the development and deployment cycle.
    Also, finding and fixing problems at an early stage will lead to lower costs.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速失败**：失败是可以接受的，只要它在非常早期就被发现。在早期阶段修复问题，其影响要远远小于在开发和部署周期的后期阶段发现并修复问题。而且，早期发现并解决问题将降低成本。'
- en: '**Every team member is an owner**: This one requires a bit more explanation,
    especially in large enterprises where we typically have a matrix organization.
    Again, remember that a lot of enterprises work in sourcing models where specific
    suppliers are responsible for the infrastructure (the platform) and other suppliers
    and the enterprise itself for the applications (the products). In SRE, these boundaries
    don''t exist. Both products and platform teams share the responsibility for the
    end product. Hence, products and platform teams need to have the same view on
    every component: application code, frontend systems, backend infrastructure, and
    security rules. They are all equal owners of the project.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**每个团队成员都是所有者**：这一点需要稍微解释一下，尤其是在大型企业中，我们通常会有矩阵式的组织结构。再一次，记住很多企业采用外包模式，其中特定供应商负责基础设施（平台），而其他供应商和企业本身负责应用程序（产品）。在SRE中，这些边界是不存在的。产品和平台团队共同承担最终产品的责任。因此，产品和平台团队需要对每个组件有相同的看法：应用程序代码、前端系统、后端基础设施以及安全规则。它们都是项目的平等所有者。'
- en: Note
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: We will discuss this in more detail in [*Chapter 6*](B17492_06_ePub_RK.xhtml#_idTextAnchor077),
    *Defining Operations in Architecture*, where we will learn about platform ops
    and product ops.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将在[*第6章*](B17492_06_ePub_RK.xhtml#_idTextAnchor077)中详细讨论这个问题，*架构中的运营定义*，我们将在那里了解平台运营和产品运营。
- en: '**Use one toolset**: All teams use the same tools. You can have multiple SRE
    teams, but they all work with the same tools. The reasoning behind this is that
    an enterprise will have to spend too much time managing the different toolsets,
    instead of focusing on the project deliverables. And SRE is mainly about focus.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用统一的工具集**：所有团队使用相同的工具。你可以有多个SRE团队，但他们都使用相同的工具。这样做的原因是，企业需要花费过多时间来管理不同的工具集，而不是专注于项目交付。SRE的核心也是专注。'
- en: There's no way to summarize SRE in just a few paragraphs, or even one chapter.
    This section is merely a very short introduction. Still, SRE can bring a lot to
    an enterprise – if the enterprise is ready for that. SRE also means changing the
    way of working and with that, the organization. In the next section, we will learn
    more about that.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 没有办法仅用几段话甚至一个章节总结SRE。本节只是一个非常简短的介绍。不过，SRE可以为企业带来很多东西——前提是企业已经为此做好准备。SRE也意味着工作方式和组织的改变。在下一节中，我们将进一步了解这些内容。
- en: Assessing the enterprise for SRE readiness
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估企业是否具备SRE准备条件
- en: 'In the previous section, we introduced SRE and discussed the basic principles,
    without the ambition of being comprehensive. Covering SRE as a whole would fill
    a book with well over 500 pages; we have merely given a quick overview of the
    most important parts. Now the question is: how do I know whether my company is
    ready for SRE? We will explore some criteria for SRE readiness in this section.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们介绍了SRE并讨论了基本原则，但并没有抱有全面阐述的雄心。涵盖整个SRE将会填满超过500页的书；我们仅提供了最重要部分的快速概览。那么问题来了：我如何知道我的公司是否准备好采用SRE？我们将在本节中探讨一些SRE准备度的标准。
- en: One of the common problems of companies implementing DevOps is that developers
    and operations are not really working together. They might sit in one team, but
    still there will be developers writing code and *throwing it over the fence* to
    operations when they think the code is done. The reason is that dev works with
    a different mindset than ops. Developers want to change. They get their assignments
    from business demand to improve or build new applications. Operators, on the other
    hand, don't want that change. Their main interest is to have stable systems that
    don't suffer from outages because of incidents or, indeed, changes. There's a
    conflict of interest, to begin with.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 实施DevOps的公司常见问题之一是开发人员和运维人员并没有真正合作。他们可能坐在同一个团队里，但开发人员写完代码后，仍然会在认为代码完成时把它*扔到另一边*交给运维。原因在于开发和运维的工作心态不同。开发人员想要变革，他们根据业务需求进行任务分配，改进或构建新的应用程序。而运维人员则不希望有这样的变动，他们的主要兴趣是确保系统稳定，避免因故障或变更而导致的停机。因此，最初就存在利益冲突。
- en: 'The question is how to bridge this conflict. SRE is the answer to that. However,
    SRE is a methodology that will only succeed if teams are ready to work with that
    methodology. So, one of the first things that we need to assess is culture. And
    yes: the enterprise architect does play a role in this. It''s about processes
    and getting people to adopt these processes. Remember that an architecture is
    not only about the *what*, but also the *how*.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是如何弥合这种冲突。SRE是对此的答案。然而，SRE是一种方法论，只有当团队准备好采用这种方法论时，它才能成功。所以，我们需要评估的第一件事就是文化。没错：企业架构师在其中确实起着作用。这关系到流程以及让人们采纳这些流程。记住，架构不仅关乎*什么*，还关乎*如何做*。
- en: Redefining risk management
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新定义风险管理
- en: Developers will change code; operations need to be sure that the systems remain
    stable so that business is not halted. Changes might lead to downtime. If downtime
    is planned, then there's little to worry about. The key here is unplanned downtime.
    Hence, we need to focus on mitigating the risk of unforeseen outages due to changes.
    To avoid outages, systems need to be reliable and resilient. Since in DevOps iterations
    and changes are continuously deployed, the need to design for reliability becomes
    increasingly important. Architects need to design systems in such a way that they
    can handle changes without interrupting services.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员会修改代码；运维人员需要确保系统保持稳定，以便业务不受影响。变更可能导致停机。如果停机是计划好的，那么就无需太担心。关键在于未计划的停机。因此，我们需要关注减轻因变更而引发的意外故障的风险。为了避免故障，系统需要可靠且具有弹性。由于在DevOps中，迭代和变更是持续部署的，因此设计可靠性的需求变得越来越重要。架构师需要以这样的方式设计系统，使其能够在不干扰服务的情况下应对变更。
- en: Let's first agree on the definition of risk management. The basic rule is that
    risk equals probability times impact. Enterprises use risk management to determine
    the business value of implementing measures that limit either the probability
    and/or the impact – or, to put it in SRE terminology, risk management is used
    to determine the value of reliability engineering. Plus, it defines the level
    of investment to prevent, reduce, or transfer the risk.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们统一一下风险管理的定义。基本规则是，风险等于概率乘以影响。企业使用风险管理来确定实施措施的商业价值，这些措施能够限制概率和/或影响——或者用SRE术语来说，风险管理用于确定可靠性工程的价值。此外，它还定义了为防止、减少或转移风险而进行的投资水平。
- en: 'Risk management is used to prioritize reliability measures in the product backlogs
    of SRE teams. That is done by following the risk matrix referred to as PRACT:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 风险管理用于在SRE团队的产品待办事项中优先考虑可靠性措施。这是通过遵循称为PRACT的风险矩阵来实现的：
- en: '**Prevent**: The risk is avoided completely.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预防**：完全避免风险。'
- en: '**Reduce**: The impact or likeliness that the risk occurs is reduced.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减少**：降低风险发生的影响或可能性。'
- en: '**Accept**: The consequences of the risk are accepted.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**接受**：接受风险的后果。'
- en: '**Contingency**: Measures are planned and executed when the risk occurs.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应急措施**：当风险发生时，计划并执行相应的措施。'
- en: '**Transfer**: The consequences of the risk are transferred, for instance, to
    an insurance company.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**转移**：风险的后果被转移，例如转移给保险公司。'
- en: 'An example of a risk matrix is provided in the following template:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 风险矩阵的一个示例在下面的模板中提供：
- en: '![Figure 5.1 – Template for risk assessment'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.1 – 风险评估模板'
- en: '](img/B17492_05_001.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_05_001.jpg)'
- en: Figure 5.1 – Template for risk assessment
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – 风险评估模板
- en: First, we need to identify and rate the risk. What is the risk, what are the
    chances that it will occur, and what will the impact be? That is shown in the
    top half of the figure. Then, we need to think about mitigations, actions that
    can or must be taken to prevent the risk or reduce the impact of the risk. When
    mitigating actions reduce the risk levels, then there will be a risk residue.
    Again, the team will need to assess what the impact of that residue will be and
    whether that's acceptable.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要识别并评估风险。风险是什么？它发生的几率有多大？它的影响会是什么？这些内容显示在图的上半部分。接下来，我们需要考虑减缓措施，即可以或必须采取的行动，以防止风险或减少风险的影响。当减缓措施降低了风险水平时，会有风险残留。此时，团队需要评估这些残留的影响以及是否可以接受。
- en: If the impact of failure is high, it might be worthwhile to look at a strategy
    that prevents the risk. This will drive the SLOs, or how good a system should
    be. If the availability is set to 99.99%, then the error budget is only 0.01%.
    This has consequences for the architecture of the system; after all, the risk
    rating allows for just 52 minutes of downtime per year. The architecture needs
    to cater for that, for instance, by having mirrored, hot standby systems that
    can take over as soon as primary systems fail.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果故障的影响很大，那么值得考虑采取一种能够防止风险的策略。这将推动 SLO（服务级目标），即系统应该达到的标准。如果可用性设置为 99.99%，那么错误预算只有
    0.01%。这对系统架构有影响；毕竟，风险评级允许每年最多 52 分钟的停机时间。架构需要考虑到这一点，例如，采用镜像的热备份系统，一旦主系统发生故障，可以立即接管。
- en: 'But what about the code? There are two crucial elements in having resilient
    code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 那么代码呢？编写具有弹性代码的关键要素有两个：
- en: The source code needs to be stored securely in a repository with strong access
    and version control. Code change needs to be fully traceable.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码需要保存在一个具有强大访问和版本控制的安全仓库中。代码更改需要完全可追溯。
- en: Automation of continuous tests to detect defects in code in every stage of the
    development and deployment. Tests and automation are likely the most important
    features architects will need to cover in DevOps, ensuring resilient and secure
    code.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化的持续测试，以便在开发和部署的每个阶段检测代码中的缺陷。测试和自动化可能是架构师在 DevOps 中最需要关注的功能，以确保代码的弹性和安全性。
- en: Even if we as architects have done everything to prevent systems going down
    or software failing, we will encounter problems every now and then. An important
    rule within SRE is the blameless post-mortem. We will discuss that in the *Architecting
    SRE using KPIs* section.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们作为架构师已经做了所有防止系统停机或软件故障的工作，我们仍然会不时遇到问题。SRE 中的一条重要规则是无责事后总结（blameless post-mortem）。我们将在
    *使用 KPI 进行 SRE 架构设计* 部分讨论这一点。
- en: Redefining governance
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新定义治理
- en: DevOps already assumes that teams are working in a highly autonomous way, meaning
    that they are responsible for the entire product from beginning to end. This requires
    different governance. In the previous chapter, we discussed the center of excellence
    as an organization to guide and support the DevOps teams. The center defines the
    overall enterprise roadmaps and frameworks that provide the guardrails to develop
    and manage systems.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 已经假定团队以高度自主的方式工作，这意味着他们负责整个产品的全生命周期。这需要不同的治理方式。在上一章中，我们讨论了卓越中心作为一种组织形式，用于引导和支持
    DevOps 团队。卓越中心定义了整体企业路线图和框架，提供了开发和管理系统的指导方针。
- en: Now, DevOps is still about dev and ops, virtually still divided. SRE teams don't
    have that division. SRE teams are for that reason different from DevOps teams.
    SRE teams are cross-domain, meaning that they focus on monitoring the systems,
    logging, and processing events and automation. They help in developing and implementing
    automation, but also advise and guide in doing releases in the DevOps process.
    SRE engineers are able to help in defining system architecture, but can also assist
    in advancing the enterprise architecture by advising in best practices and selecting
    the right tools.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，DevOps仍然是关于开发和运维，实际上它们仍然是分开的。SRE团队没有这种划分。因此，SRE团队与DevOps团队是不同的。SRE团队是跨领域的，这意味着他们关注系统监控、日志记录、事件处理和自动化。他们帮助开发和实施自动化，还在DevOps过程中发布时提供建议和指导。SRE工程师能够帮助定义系统架构，但也能通过提供最佳实践和选择合适的工具来推进企业架构。
- en: 'There are three ways of setting up SRE teams:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种方式来建立SRE团队：
- en: '**Team with dedicated SRE engineers**: These teams are separated from the DevOps
    teams, but support the DevOps teams. A big advantage is that a lot of teams and
    different projects are supported at the same time, with the same vision, tools,
    and processes, improving the overall quality of the different projects.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拥有专门的SRE工程师的团队**：这些团队与DevOps团队是分开的，但支持DevOps团队。一个大优势是，许多团队和不同的项目能够同时得到支持，且使用相同的愿景、工具和流程，从而提高了不同项目的整体质量。'
- en: '**Embedded model**: SRE engineers are embedded in the DevOps teams. The advantage
    of this approach is that SRE engineers can focus on specific issues within projects
    they are assigned to.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**嵌入式模型**：SRE工程师嵌入到DevOps团队中。这种方式的优点在于，SRE工程师能够专注于他们所分配项目中的特定问题。'
- en: '**Distributed SRE model**: In this model, the SRE team works more as a center
    of excellence with specialists that can be consulted to solve issues.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分布式SRE模型**：在这种模型中，SRE团队更像是一个卓越中心，团队中的专家可以被咨询以解决问题。'
- en: 'A typical way to position SRE is presented in the following figure:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的SRE定位方式如以下图所示：
- en: '![Figure 5.2 – Position of SRE in DevOps'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.2 – SRE在DevOps中的位置'
- en: '](img/B17492_05_002.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_05_002.jpg)'
- en: Figure 5.2 – Position of SRE in DevOps
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2 – SRE在DevOps中的位置
- en: One thing must be absolutely clear, and that is that SRE requires a change of
    culture. SRE focuses on improving operations, yet also facilitating development
    and releases at high velocity. It often means that SRE specialists require a high
    level of standardization of technology and processes. If development and operations
    are standardized, then it's also easier to automate processes. By doing that,
    SRE drives down the probability that risks materialize. As a result, engineers
    are freed up to pick up other tasks instead of having to spend a lot of time solving
    problems. That's the key takeaway of SRE.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 必须明确的一点是，SRE要求文化上的变革。SRE专注于改善运维，同时也促进高效的开发和发布。这通常意味着，SRE专家需要对技术和流程进行高度标准化。如果开发和运维得到了标准化，那么自动化过程也会变得更容易。通过这样做，SRE减少了风险发生的可能性。因此，工程师能够腾出时间去处理其他任务，而不是花费大量时间解决问题。这就是SRE的关键要点。
- en: The next question is how an organization can implement SRE. That starts with
    defining KPIs. In the next section, we will study the most important KPIs in SRE.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个问题是组织如何实施SRE。这从定义KPI开始。在下一节中，我们将研究SRE中最重要的KPI。
- en: Architecting SRE using KPIs
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用KPI架构化SRE
- en: Before we dive into the definition of KPIs, we need to get back to the basic
    principles of SRE. SRE teams focus on reliability, scalability, availability,
    performance, efficiency, and response. These are all measurable items, so we can
    transform them into KPIs. In this section, we will learn how to do that using
    SLOs, **Service-Level Indicators** (**SLIs**), and the error budget.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入了解KPI的定义之前，我们需要回顾一下SRE的基本原则。SRE团队关注的是可靠性、可扩展性、可用性、性能、效率和响应性。这些都是可衡量的项目，因此我们可以将其转化为KPI。在本节中，我们将学习如何通过使用SLO、**服务级指标**（**SLI**）和错误预算来实现这一点。
- en: 'The main KPIs that we use in SRE are as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在SRE中使用的主要KPI如下：
- en: '**SLOs**: In SRE, this is defined as *how good a system should be*. An SLO
    is much more precise than an SLA, which comprises a lot of different KPIs. You
    could also state that the SLA comprises a number of SLOs. However, an SLO is an
    agreement between the developers in the SRE team and the product owner of the
    service, whereas an SLA is an agreement between the service supplier and the end
    user.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SLOs**：在SRE中，SLO被定义为*系统应该有多好*。SLO比SLA更精确，后者包含了很多不同的KPI。你也可以说SLA包含了一些SLO。然而，SLO是SRE团队的开发人员与服务的产品负责人之间的协议，而SLA是服务提供者与最终用户之间的协议。'
- en: The SLO is a target value. For example, the web frontend should be able to handle
    hundreds of requests per minute. Don't make it too complex at the start. By setting
    this SLO, the team already has a number of challenges to be able to meet this
    target, since it will not only involve the frontend but also the throughput on,
    for instance, the network and involved databases. In other words, by setting this
    one target, architects and developers will have a lot of work to do to reach that
    target.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SLO是一个目标值。例如，Web前端应该能够处理每分钟数百个请求。开始时不要让它太复杂。通过设定这个SLO，团队已经面临了不少挑战，因为它不仅涉及前端，还涉及网络和相关数据库的吞吐量。换句话说，通过设定这个目标，架构师和开发人员将需要做大量工作才能达到这个目标。
- en: '**SLIs**: SLOs are measured by SLIs. In SRE, there are a couple of indicators
    that are really important: request latency, system throughput, availability, and
    the error rate. These are the key SLIs, measuring how good a system really is.
    Request latency measures the time before a system returns a response. System throughput
    is the number of requests per second or minute. Availability is the amount of
    time a system is usable to the end user. The error rate is the percentage of the
    total number of requests and the number of requests that are successfully returned.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SLIs**：SLO是通过SLI来衡量的。在SRE中，有几个非常重要的指标：请求延迟、系统吞吐量、可用性和错误率。这些是关键的SLI，用来衡量系统的实际表现。请求延迟衡量的是系统返回响应之前的时间。系统吞吐量是每秒或每分钟的请求数。可用性是系统对最终用户可用的时间。错误率是总请求数与成功返回的请求数之间的百分比。'
- en: '**Error budget**: This is probably the most important term in SRE. The SLO
    also defines the error budget. The budget starts at 100 and is calculated by deducting
    the SLO. For example, if we have an SLO that says that the availability of a system
    is 99.9%, then the error budget is *100 – 99.9 = -0,1*. This is the room that
    SRE teams have to apply changes without impacting the SLO. It forces developers
    in the SRE team to either limit the number of changes and releases or to test
    and automate as much as possible to avoid disruption of the system and overspending
    the error budget.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误预算**：这可能是SRE中最重要的术语。SLO也定义了错误预算。预算从100开始，通过扣除SLO来计算。例如，如果我们有一个SLO，说明系统的可用性是99.9%，那么错误预算就是*100
    - 99.9 = -0.1*。这是SRE团队在不影响SLO的情况下应用更改的空间。它迫使SRE团队中的开发人员要么限制更改和发布的数量，要么尽可能地进行测试和自动化，以避免对系统造成干扰并超支错误预算。'
- en: 'To understand the concept of error budget in SRE, it''s important to understand
    how SRE treats the availability of systems. It''s not simply a matter of deducting
    the downtime to get to the availability of systems. SRE takes failed requests
    into account. A failed request can be because a system doesn''t respond or has
    a slow response. Detecting failed requests determines the availability and thus
    whether the error budget is exceeded or not. Important parameters are as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解SRE中的错误预算概念，首先要理解SRE如何处理系统的可用性。这不仅仅是简单地从停机时间中扣除得到系统的可用性。SRE会考虑失败的请求。一个失败的请求可能是因为系统没有响应或者响应很慢。检测失败的请求决定了可用性，从而决定是否超出了错误预算。重要的参数如下：
- en: '**TTD**: The **time to detect** an issue in software or a system.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TTD**：在软件或系统中发现问题的**时间**。'
- en: '**TTR**: The **time to resolve** or repair the issue.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TTR**：修复或解决问题的**时间**。'
- en: '**Frequency/year**: The frequency of error per year.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**频率/年**：每年错误的频率。'
- en: '**Users**: The number of users that are impacted by the error.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Users**：受错误影响的用户数量。'
- en: '**Bad/year**: The number of minutes per year that a system is not usable, or
    the *bad minutes* per year.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Bad/year**：每年系统不可用的分钟数，或每年的*不良分钟数*。'
- en: 'Working with the error budget is shown in the following workflow:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 与错误预算一起工作的流程如下所示：
- en: '![Figure 5.3 – Working with the error budget'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.3 – 与错误预算一起工作'
- en: '](img/B17492_05_003.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_05_003.jpg)'
- en: Figure 5.3 – Working with the error budget
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – 使用误差预算
- en: 'Risk should be perceived as business risk: something endangering the business
    of the enterprise. Recognizing that risk leads to requirements of systems and
    software. These requirements are translated into SLOs, defining how good a system
    should be. SLOs are measured by indicators, telling exactly how good the system
    really is. If SLOs are not met, they will trigger the risk to materialize. The
    chance that systems might fail and with that SLOs are not met is the error budget.
    The error budget – typically when the budget is exceeded – will lead to adjusted
    requirements and improved systems.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 风险应被视为商业风险：即危及企业业务的风险。认识到风险后，就会产生对系统和软件的需求。这些需求被转化为SLO（服务水平目标），定义了系统应达到的水平。SLO通过指标进行衡量，准确地告诉你系统的实际表现。如果SLO没有达到要求，将会触发风险的显现。系统可能失败，并且无法满足SLO的机会就是误差预算。误差预算——通常在预算超支时——将导致需求调整和系统改进。
- en: 'Despite all the work we put into reliability, enterprises will be confronted
    with issues and, as a consequence of that, outages. A key element in SRE is the
    blameless post-mortem that can be executed on different levels. We can have post-mortems
    whenever an incident occurs or after a project has been completed. The blameless
    post-mortem is really all about culture: it investigates incidents without blaming.
    SRE teams simply assume that all involved team members have done their very best
    to avoid the incident.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们在可靠性方面做了大量工作，但企业仍然会面临问题，因此也会发生宕机。SRE（站点可靠性工程）的一个关键元素是无责事后复盘，这可以在不同层次上执行。每当发生事件或项目完成后，我们都可以进行事后复盘。无责事后复盘真正强调的是文化：它调查事件发生的原因，而不是归咎于人。SRE团队只是认为所有参与的团队成员都已尽最大努力避免事件的发生。
- en: The teams evaluate the issue and come up with advice to avoid the issue occurring
    again. This can be improvements to the process or the use of tools. Also, advice
    might be about people, for instance, to get people trained in specific areas.
    This is not to blame, but always to improve.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 团队评估问题，并提出建议，以避免问题再次发生。这可以是对流程的改进或工具的使用。此外，建议还可能涉及人员，例如对某些领域的人员进行培训。这不是为了责怪，而是为了不断改进。
- en: 'If we put it all together, SRE is a truly holistic model. It''s about processes,
    tools, and people. The following diagram shows a holistic view of SRE and how
    it merges with DevOps:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将所有内容结合起来，SRE是一个真正的整体模型。它涉及流程、工具和人员。以下图表展示了SRE的整体视图以及它如何与DevOps结合：
- en: '![Figure 5.4 – Holistic view of SRE'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.4 – SRE的整体视图'
- en: '](img/B17492_05_004.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_05_004.jpg)'
- en: Figure 5.4 – Holistic view of SRE
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – SRE的整体视图
- en: 'In this section, we introduced the main aspects of SRE. The top question and
    challenge for most enterprises is: where do we start? We will discuss that in
    the next section.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了SRE的主要方面。大多数企业面临的首要问题和挑战是：我们从哪里开始？我们将在下一节中讨论这一点。
- en: Implementing SRE
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施SRE
- en: 'So far, we have learned what SRE is and what the key elements are. In this
    section, we will learn how to start with SRE, but like DevOps, the advice is to
    start small. Then there are two major steps that will help you to implement SRE
    in a controlled way:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了什么是SRE以及其关键元素是什么。在本节中，我们将学习如何开始实施SRE，但像DevOps一样，建议从小规模开始。接下来有两个主要步骤，可以帮助您以受控的方式实施SRE：
- en: '**Agree on the standards and practices**: This can be for just one SRE team
    or for the entire enterprise if the ambition reaches that level. In some workbooks
    this is called **kitchen sink**, meaning that everything is SRE. This can be a
    viable approach for companies with a limited set of applications, but for enterprises,
    it might be wiser to work with an SRE team charter.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**达成标准和实践一致**：这可以仅适用于一个SRE团队，或者如果目标达到了这个程度，也可以适用于整个企业。在某些工作手册中，这被称为**厨房水槽**，意思是所有内容都是SRE。这对拥有有限应用程序的公司来说是可行的，但对于企业来说，可能更明智的做法是与SRE团队的章程合作。'
- en: 'Let''s work with a very common example that we will also use in the next chapters.
    Enterprises usually have product teams working on applications and a platform
    team that is responsible for the infrastructure. It''s good practice to have an
    SRE team bridging between one product team and the platform team, setting out
    standards and practices for this particular domain. The product team will focus
    on the delivery of the application, obviously working closely together with the
    platform team. The SRE team can guide this and set standards for the reliability
    of the end product. It means that SRE teams have to cover multiple domains, as
    shown in the following figure:'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们用一个非常常见的例子，接下来我们也会在后续章节中使用。企业通常有产品团队负责应用程序，平台团队则负责基础设施。最佳实践是有一个 SRE 团队作为桥梁，连接产品团队和平台团队，为这个特定领域制定标准和实践。产品团队将专注于应用程序的交付，显然会与平台团队密切合作。SRE
    团队可以为此提供指导，并为最终产品的可靠性设定标准。这意味着 SRE 团队需要涵盖多个领域，如下图所示：
- en: '![Figure 5.5 – Domains of SRE'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.5 – SRE 的领域'
- en: '](img/B17492_05_005.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_05_005.jpg)'
- en: Figure 5.5 – Domains of SRE
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5 – SRE 的领域
- en: '**Agree on the scope of services**: Certainly, at the beginning of the SRE
    journey, SRE teams can''t do everything. Therefore, we need to agree on the scope
    of the SRE team. Will they only do consulting or will they be actively involved
    in the DevOps projects? Or will they only be involved in the automation of DevOps?
    Some companies have specific SRE teams for tooling, a tools-only SRE team that
    is only concerned with implementing automation tools, overarching DevOps. The
    final step in SRE is *on call*, whenever issues arise during operations and exceed
    the error budget. Then, SRE engineers are called in to investigate the issue,
    guide in the post-mortem, and help implement new solutions that ensure reliability.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确定服务范围**：显然，在 SRE 旅程的开始，SRE 团队不能做所有的事情。因此，我们需要确定 SRE 团队的范围。他们是只做咨询，还是会积极参与
    DevOps 项目？或者他们只会参与 DevOps 的自动化？一些公司有专门的 SRE 团队负责工具，一个只关注实现自动化工具的 SRE 团队，涵盖整个 DevOps。SRE
    的最终步骤是*待命*，无论何时运营中出现问题并超出错误预算时，SRE 工程师会被召集来调查问题，指导事后分析，并帮助实施新的解决方案以确保可靠性。'
- en: 'Since SRE is a Google invention, Google has published extensive guidelines
    to implement SRE step by step. Google identifies three entry acceptance criteria
    to start with SRE:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 SRE 是 Google 的发明，Google 已经发布了详细的指南，逐步实施 SRE。Google 确定了三个接受标准来开始 SRE：
- en: '**SLOs** have been defined and agreed with business owners.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SLO** 已经定义并与业务负责人达成一致。'
- en: '**Blameless post-mortems** can be executed.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无责备的事后分析**可以执行。'
- en: The enterprise has a process in place to manage production issues. This can
    be the standard **incident management** process as defined in IT service management
    frameworks such as ITIL.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 企业有一个流程来管理生产问题。这可以是 IT 服务管理框架中定义的标准**事件管理**流程，例如 ITIL。
- en: Where does SRE start and how do teams begin their work?
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: SRE 从哪里开始，团队如何开始他们的工作？
- en: SRE specialists are hired or trained within the enterprise.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SRE 专家在企业内部被招聘或培训。
- en: Release processes are documented and evaluated by SRE specialists.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 发布流程由 SRE 专家进行文档化并评估。
- en: Operational processes are documented, including runbooks for releases and handover
    to operations. These processes are evaluated by SRE specialists.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 操作流程进行文档化，包括发布和交接给运营的手册。这些流程由 SRE 专家进行评估。
- en: SLOs have been defined and agreed upon.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SLO 已经定义并达成一致。
- en: SRE teams are mandated to adapt and implement processes that reduce toil. Collaboration
    with developers and operations resulting in a buy-in is a prerequisite.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SRE 团队被授权调整并实施能够减少重复劳动的流程。与开发人员和运营团队的合作，确保各方的支持，是一个先决条件。
- en: 'The latter is crucial, but even more important is that SRE teams do this without
    *blaming* as discussed in the previous section about the blameless post-mortem.
    Every single assessment of procedures, processes, and the root cause of failing
    systems should be without pointing fingers, but only focusing on improvements.
    SRE teams can do this for all new and existing processes:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 后者至关重要，但更重要的是，SRE 团队应该以无*责备*的方式进行此工作，正如在上一节讨论的无责备事后分析（blameless post-mortem）所述。对程序、流程以及系统故障根本原因的每次评估都应避免指责，而应专注于改进。SRE
    团队可以对所有新的和现有的流程进行此类工作：
- en: SLO and error budget review
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SLO 和错误预算审查
- en: Incident reviews
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件评审
- en: Test and runbook reviews
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试和操作手册评审
- en: Security audits
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全审计
- en: However, before the team can really start, the organization needs to have clear
    priorities. As we have learned, SRE will trigger a change of culture and the whole
    organization will have to support the implementation of SRE. Apart from the model
    that we use to implement SRE teams – dedicated, embedded, or distributed – the
    guidelines and guardrails of SRE will impact the entire enterprise. That means
    that the enterprise must have a strategy.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在团队真正开始之前，组织需要有明确的优先级。如我们所学，SRE 将引发文化的变革，整个组织必须支持 SRE 的实施。除了我们用于实施 SRE 团队的模型——专职、嵌入式或分布式——SRE
    的指导方针和守护机制将影响整个企业。这意味着企业必须有一个战略。
- en: 'Typically, enterprises do not start from a *greenfield* situation. There are
    existing products, projects, and processes that can''t be changed overnight. Google
    recognized this when it introduced the methodology. Enterprises are usually *brownfield*
    that enter a transformation. In that case, they need to think of priorities and
    how to start the transformation. In 2013, Google''s SRE engineer Mickey Dickerson
    came up with the Hierarchy of Reliability. The model is as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，企业不会从*绿地*情境开始。总会有现有的产品、项目和流程，无法一蹴而就地改变。谷歌在引入该方法论时就意识到了这一点。企业通常是*棕地*，进入转型阶段。在这种情况下，他们需要考虑优先级以及如何开始转型。2013
    年，谷歌的 SRE 工程师 Mickey Dickerson 提出了可靠性层级模型。模型如下：
- en: '![Figure 5.6 – Dickerson''s Hierarchy of Reliability'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.6 – Dickerson 的可靠性层级'
- en: '](img/B17492_05_006.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_05_006.jpg)'
- en: Figure 5.6 – Dickerson's Hierarchy of Reliability
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.6 – Dickerson 的可靠性层级
- en: The idea of the pyramid is that the items at the bottom are the basics that
    need to be implemented first; they form the foundation. From there the transformation
    progresses to more advanced items, such as the release chain in the development
    and deployment of new products at the very top of the pyramid.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 金字塔的理念是，底部的项目是需要首先实现的基础，它们构成了基础。从这里开始，转型将进展到更高级的项目，例如金字塔顶端的新产品开发和部署中的发布链。
- en: We have identified our goals and objectives, assigned teams, and agreed on the
    priorities in the implementation. But will SRE actually bring benefits to the
    enterprise? We will answer that question in the final section of this chapter.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经确定了目标和任务，分配了团队，并在实施过程中达成了优先级的共识。但 SRE 是否真的能为企业带来好处呢？我们将在本章的最后一节回答这个问题。
- en: Getting business value out of SRE
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 从 SRE 中获得商业价值
- en: As we have learned in the previous section, enterprises don't implement SRE
    in just a few days. It takes time and stamina to get it right. But is it worth
    it? Obviously, the answer is yes. SRE will allow for great business value. In
    this final section, we will explain how.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一节中学到的，企业并非在短短几天内就能实现 SRE。正确实施它需要时间和耐心。但这值得吗？显然，答案是肯定的。SRE 将为企业带来巨大的商业价值。在本节最后，我们将解释如何实现这一点。
- en: 'Today''s enterprises are continuously transforming. It puts a lot of pressure
    on operations that on one side have to keep up with developments and on the other
    side have to keep systems stable and reliable. Without true collaboration between
    developers and operations, that''s virtually impossible. SRE addresses this challenge.
    SRE recognizes that putting dev and ops together in one room doesn''t solve the
    problem. SRE creates a solution that reduces operational issues by helping developers
    to build reliable systems. Key components are as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当今的企业正在持续转型。这给运营带来了巨大的压力，一方面要跟上发展的步伐，另一方面还要保持系统的稳定性和可靠性。在开发与运营之间没有真正的协作，这几乎是不可能的。SRE
    解决了这一挑战。SRE 认识到，把开发人员和运维人员放在同一个房间并不能解决问题。SRE 创建了一个解决方案，通过帮助开发人员构建可靠的系统来减少运营问题。关键组件如下：
- en: '**Standardization**: Standardize processes and tools.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标准化**：标准化流程和工具。'
- en: '**Automation**: Automation leads to consistency, but automation also enables
    scaling. This requires a very well-thought-out architecture. Automation is about
    doing something once and then letting automation take care of the rest. Without
    automation, operations would simply be drowned by manual tasks.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化**：自动化带来一致性，但自动化还可以实现扩展性。这需要经过深思熟虑的架构设计。自动化是指一次性完成某项任务，然后让自动化处理其余的工作。如果没有自动化，运营将被手动任务淹没。'
- en: '**Eliminate toil**: Toil is manual work, repetitive, and can be automated.
    But toil is also work that doesn''t add value to the product: it''s interruptive
    and slows down the development of services that do add value.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消除琐事**：琐事是手动操作、重复性工作，可以通过自动化来完成。但琐事也是那些对产品没有增值的工作：它们会干扰工作，减缓那些能为产品增值的服务开发进程。'
- en: '**Simplicity**: Software needs to be simple as a prerequisite to a stable,
    reliable system. Code needs to be simple and clean and APIs as minimal as possible.
    SRE lives by the golden rule of less is more.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化**：软件需要简洁，这是稳定、可靠系统的前提。代码需要简洁和清晰，API 也要尽可能简化。SRE 遵循“少即是多”的黄金法则。'
- en: 'By doing this, the enterprise will benefit from high-velocity developments,
    yet spending fewer resources in fixing issues. Time and resources can then be
    invested into further improvements. So, enterprises can gain a lot from adopting
    SRE. Because SRE involves a very systematic way to build, manage, and review systems,
    enterprises can trust reliable services. Repetitive tasks are taken over by standardization
    and automation. The business gains on multiple sides here:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，企业将受益于高效的开发，同时在解决问题时花费更少的资源。时间和资源可以投入到进一步的改进中。因此，企业可以从采用 SRE 中获得大量收益。因为
    SRE 涉及到一种非常系统的方式来构建、管理和审查系统，企业可以信任可靠的服务。重复的任务将通过标准化和自动化来接管。企业在多个方面都会从中获益：
- en: Reliable services will gain trust with customers and likely more revenue.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可靠的服务将赢得客户的信任，并可能带来更多的收入。
- en: Because of automation, manual tasks are reduced. This will drive the costs of
    operations down. The very first thing that SRE engineers will do is automate repetitive
    tasks.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于自动化，手动任务得以减少。这将降低运营成本。SRE 工程师的首要任务就是自动化那些重复性的工作。
- en: Because of standardization, systems will become more reliable and stable, causing
    fewer issues and outages. Analyzing issues and solving problems require resources
    and are therefore very costly. They don't add value to the business, but they
    need to be addressed in order to not stop the business.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于标准化，系统将变得更加可靠和稳定，减少故障和停机的发生。分析问题和解决故障需要资源，因此非常昂贵。它们无法为业务带来价值，但必须解决，以避免影响业务运转。
- en: 'Cost savings might be invested in the development of new features and new products.
    In other words: SRE will be a driver for innovation. SRE will bring a lot of benefits
    to an enterprise, but implementation requires dedication and the willingness to
    adopt a different culture. As with anything in Agile and DevOps, the recommendation
    is to start small and then scale up throughout the enterprise. Learn from mistakes,
    optimize, and continuously improve.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节省的成本可以投入到新功能和新产品的开发中。换句话说：SRE 将成为创新的推动力。SRE 将为企业带来诸多好处，但实施需要投入和愿意接受不同的文化。和敏捷开发及
    DevOps 一样，建议从小规模开始，然后在全公司范围内推广。通过从错误中学习、优化和持续改进。
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter covered the basics of SRE. The original workbook contains well
    over 500 pages, so it's almost impossible to summarize the methodology in just
    a few pages. Yet, after completing this chapter you will have a good understanding
    of the founding principles of SRE, starting with the definition of SLOs to set
    requirements on how good a system should be. Subsequently, we measure the SLOs
    with indicators that tell us how good the system really is. We learned that by
    working with risk management, error budgets, and blameless post-mortems, SRE engineers
    can help DevOps teams to improve systems and make them more reliable.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了 SRE 的基础知识。原始工作手册包含超过 500 页内容，因此几乎不可能在几页内总结出整个方法论。然而，完成本章后，你将对 SRE 的基本原则有一个很好的理解，从
    SLO 的定义开始，设定系统性能要求。随后，我们通过一些指标来衡量 SLO，看看系统实际表现如何。我们了解到，通过风险管理、错误预算和无责事后分析，SRE
    工程师可以帮助 DevOps 团队改善系统，使其更可靠。
- en: The conclusion of the chapter was that SRE is not very easy to implement in
    an enterprise. We discussed the first steps of the implementation and learned
    that if done right, SRE will lead to benefits. Businesses will gain from SRE because
    a lot of manual work can be reduced, creating room to improve products or develop
    new ones.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的结论是，SRE 在企业中的实施并不容易。我们讨论了实施的第一步，了解到如果执行得当，SRE 将带来好处。企业将从 SRE 中获益，因为很多手动工作可以被减少，从而腾出空间来改善现有产品或开发新产品。
- en: This concludes the first part of this book. In the next part, we will take the
    next step and learn how modern technologies can help the enterprise and further
    optimize operations. One of the promising new technologies is artificial intelligence
    and with that, we introduce AIOps in the second part of this book.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的第一部分到此结束。在下一部分，我们将迈出下一步，学习现代技术如何帮助企业并进一步优化运营。人工智能是其中一个有前景的新技术，基于此，我们将在本书第二部分介绍AIOps。
- en: Questions
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the term that SRE uses to label repetitive, manual work that should
    be reduced?
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SRE使用什么术语来标记应该减少的重复性手动工作？
- en: What do the terms TTD and TTR mean?
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TTD和TTR这两个术语是什么意思？
- en: What do we do when we transfer risk?
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们转移风险时，我们该怎么做？
- en: Further reading
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*Multi-Cloud Architecture and Governance*, by Jeroen Mulder, Packt Publishing,
    2020'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*多云架构与治理*，作者：Jeroen Mulder，Packt出版社，2020年'
- en: '*Practical Site Reliability Engineering*, by Pethuru Raj Chelliah, Shreyash
    Naithani, and Shailender Singh, Packt Publishing, 2018'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实用站点可靠性工程*，作者：Pethuru Raj Chelliah，Shreyash Naithani，Shailender Singh，Packt出版社，2018年'
- en: 'Do you have an SRE team yet? How to start and assess your journey: [https://cloud.google.com/blog/products/devops-sre/how-to-start-and-assess-your-sre-journey](https://cloud.google.com/blog/products/devops-sre/how-to-start-and-assess-your-sre-journey)'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你有SRE团队了吗？如何开始并评估你的旅程：[https://cloud.google.com/blog/products/devops-sre/how-to-start-and-assess-your-sre-journey](https://cloud.google.com/blog/products/devops-sre/how-to-start-and-assess-your-sre-journey)
