- en: '*Chapter 5*: Architecting Next-Level DevOps with SRE'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In previous chapters, we discussed the ins and outs of DevOps. It''s called
    DevOps for a reason, but in practice, the Dev is typically emphasized: creating
    agility by speeding up the development. **Site Reliability Engineering** (**SRE**)
    addresses Ops very strongly. How does Ops survive under the ever-increasing speed
    and number of products that Dev delivers? The answer is SRE teams, working with
    error budgets and toil.'
  prefs: []
  type: TYPE_NORMAL
- en: After completing this chapter, you will have learned the basic principles of
    SRE and how you can help an enterprise adopt and implement them. You will have
    a good understanding of how to define **Key Performance Indicators** (**KPIs**)
    for SRE and what benefits these will bring to the organization.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the basic principles of SRE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assessing the enterprise for SRE readiness
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Architecting SRE using KPIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing SRE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting business value out of SRE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the basic principles of SRE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will briefly introduce SRE, originally invented by Google
    to overcome the problem of operations completely being swamped by all the new
    developments that Google launched. There are a lot of definitions of SRE, but
    in this book, we''ll use the definition used by Google itself: the thing that
    happens if you allow a software engineer to design operations.'
  prefs: []
  type: TYPE_NORMAL
- en: Basically, Google addressed the gap between development and operations. Developers
    changed code because of demand, while operations tried to avoid services breaking
    because of these changes. In other words, there was always some sort of tension
    between dev and ops teams. We will talk about this more in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, is SRE the next-level DevOps? The answer to that question is: SRE forms
    a bridge between Dev and Ops. A logical, next question, in that case, would be:
    is a bridge necessary? In the next section, we will learn that putting developers
    and operations in one team is simply not enough. There''s a natural conflict of
    interest. So, an enterprise will need to do more to really get the benefits from
    working in DevOps mode. That is exactly what SRE does.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Key topics in SRE are reliability, scalability, availability, performance,
    efficiency, and response. These are integrated into seven principles – taken from
    the SRE Workbook – that are relevant to architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Operations is a software problem**: This is the starting point of SRE. Software
    will change, yet operations need to remain stable so that services are not interrupted.
    It means that software needs to be resilient and tested intensively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Work according to Service-Level Objectives (SLOs)**: Set clear targets for
    the service. What should really be the availability of an application? These are
    not solely IT-related objectives. Business requirements set the parameters in
    the first place. It means that projects have to work together closely with business
    stakeholders to define the objectives.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Work to minimize toil**: We will further discuss toil, but in principle,
    toil means just work. Moreover, toil is manual work that can be avoided through
    automation. Basically, the ambition of SRE is to get computers to do the work
    for you, as much as possible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automate**: After principle three, this one is logical. If you can automate
    it, do so.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fail fast**: Failure is OK, as long as it''s discovered at a very early stage.
    Fixing the issue in that early stage will have a much lower impact than when it''s
    discovered and fixed at a later moment in the development and deployment cycle.
    Also, finding and fixing problems at an early stage will lead to lower costs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Every team member is an owner**: This one requires a bit more explanation,
    especially in large enterprises where we typically have a matrix organization.
    Again, remember that a lot of enterprises work in sourcing models where specific
    suppliers are responsible for the infrastructure (the platform) and other suppliers
    and the enterprise itself for the applications (the products). In SRE, these boundaries
    don''t exist. Both products and platform teams share the responsibility for the
    end product. Hence, products and platform teams need to have the same view on
    every component: application code, frontend systems, backend infrastructure, and
    security rules. They are all equal owners of the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We will discuss this in more detail in [*Chapter 6*](B17492_06_ePub_RK.xhtml#_idTextAnchor077),
    *Defining Operations in Architecture*, where we will learn about platform ops
    and product ops.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Use one toolset**: All teams use the same tools. You can have multiple SRE
    teams, but they all work with the same tools. The reasoning behind this is that
    an enterprise will have to spend too much time managing the different toolsets,
    instead of focusing on the project deliverables. And SRE is mainly about focus.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's no way to summarize SRE in just a few paragraphs, or even one chapter.
    This section is merely a very short introduction. Still, SRE can bring a lot to
    an enterprise – if the enterprise is ready for that. SRE also means changing the
    way of working and with that, the organization. In the next section, we will learn
    more about that.
  prefs: []
  type: TYPE_NORMAL
- en: Assessing the enterprise for SRE readiness
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous section, we introduced SRE and discussed the basic principles,
    without the ambition of being comprehensive. Covering SRE as a whole would fill
    a book with well over 500 pages; we have merely given a quick overview of the
    most important parts. Now the question is: how do I know whether my company is
    ready for SRE? We will explore some criteria for SRE readiness in this section.'
  prefs: []
  type: TYPE_NORMAL
- en: One of the common problems of companies implementing DevOps is that developers
    and operations are not really working together. They might sit in one team, but
    still there will be developers writing code and *throwing it over the fence* to
    operations when they think the code is done. The reason is that dev works with
    a different mindset than ops. Developers want to change. They get their assignments
    from business demand to improve or build new applications. Operators, on the other
    hand, don't want that change. Their main interest is to have stable systems that
    don't suffer from outages because of incidents or, indeed, changes. There's a
    conflict of interest, to begin with.
  prefs: []
  type: TYPE_NORMAL
- en: 'The question is how to bridge this conflict. SRE is the answer to that. However,
    SRE is a methodology that will only succeed if teams are ready to work with that
    methodology. So, one of the first things that we need to assess is culture. And
    yes: the enterprise architect does play a role in this. It''s about processes
    and getting people to adopt these processes. Remember that an architecture is
    not only about the *what*, but also the *how*.'
  prefs: []
  type: TYPE_NORMAL
- en: Redefining risk management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Developers will change code; operations need to be sure that the systems remain
    stable so that business is not halted. Changes might lead to downtime. If downtime
    is planned, then there's little to worry about. The key here is unplanned downtime.
    Hence, we need to focus on mitigating the risk of unforeseen outages due to changes.
    To avoid outages, systems need to be reliable and resilient. Since in DevOps iterations
    and changes are continuously deployed, the need to design for reliability becomes
    increasingly important. Architects need to design systems in such a way that they
    can handle changes without interrupting services.
  prefs: []
  type: TYPE_NORMAL
- en: Let's first agree on the definition of risk management. The basic rule is that
    risk equals probability times impact. Enterprises use risk management to determine
    the business value of implementing measures that limit either the probability
    and/or the impact – or, to put it in SRE terminology, risk management is used
    to determine the value of reliability engineering. Plus, it defines the level
    of investment to prevent, reduce, or transfer the risk.
  prefs: []
  type: TYPE_NORMAL
- en: 'Risk management is used to prioritize reliability measures in the product backlogs
    of SRE teams. That is done by following the risk matrix referred to as PRACT:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Prevent**: The risk is avoided completely.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reduce**: The impact or likeliness that the risk occurs is reduced.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Accept**: The consequences of the risk are accepted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Contingency**: Measures are planned and executed when the risk occurs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transfer**: The consequences of the risk are transferred, for instance, to
    an insurance company.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example of a risk matrix is provided in the following template:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Template for risk assessment'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_05_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.1 – Template for risk assessment
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to identify and rate the risk. What is the risk, what are the
    chances that it will occur, and what will the impact be? That is shown in the
    top half of the figure. Then, we need to think about mitigations, actions that
    can or must be taken to prevent the risk or reduce the impact of the risk. When
    mitigating actions reduce the risk levels, then there will be a risk residue.
    Again, the team will need to assess what the impact of that residue will be and
    whether that's acceptable.
  prefs: []
  type: TYPE_NORMAL
- en: If the impact of failure is high, it might be worthwhile to look at a strategy
    that prevents the risk. This will drive the SLOs, or how good a system should
    be. If the availability is set to 99.99%, then the error budget is only 0.01%.
    This has consequences for the architecture of the system; after all, the risk
    rating allows for just 52 minutes of downtime per year. The architecture needs
    to cater for that, for instance, by having mirrored, hot standby systems that
    can take over as soon as primary systems fail.
  prefs: []
  type: TYPE_NORMAL
- en: 'But what about the code? There are two crucial elements in having resilient
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: The source code needs to be stored securely in a repository with strong access
    and version control. Code change needs to be fully traceable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automation of continuous tests to detect defects in code in every stage of the
    development and deployment. Tests and automation are likely the most important
    features architects will need to cover in DevOps, ensuring resilient and secure
    code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Even if we as architects have done everything to prevent systems going down
    or software failing, we will encounter problems every now and then. An important
    rule within SRE is the blameless post-mortem. We will discuss that in the *Architecting
    SRE using KPIs* section.
  prefs: []
  type: TYPE_NORMAL
- en: Redefining governance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DevOps already assumes that teams are working in a highly autonomous way, meaning
    that they are responsible for the entire product from beginning to end. This requires
    different governance. In the previous chapter, we discussed the center of excellence
    as an organization to guide and support the DevOps teams. The center defines the
    overall enterprise roadmaps and frameworks that provide the guardrails to develop
    and manage systems.
  prefs: []
  type: TYPE_NORMAL
- en: Now, DevOps is still about dev and ops, virtually still divided. SRE teams don't
    have that division. SRE teams are for that reason different from DevOps teams.
    SRE teams are cross-domain, meaning that they focus on monitoring the systems,
    logging, and processing events and automation. They help in developing and implementing
    automation, but also advise and guide in doing releases in the DevOps process.
    SRE engineers are able to help in defining system architecture, but can also assist
    in advancing the enterprise architecture by advising in best practices and selecting
    the right tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three ways of setting up SRE teams:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Team with dedicated SRE engineers**: These teams are separated from the DevOps
    teams, but support the DevOps teams. A big advantage is that a lot of teams and
    different projects are supported at the same time, with the same vision, tools,
    and processes, improving the overall quality of the different projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Embedded model**: SRE engineers are embedded in the DevOps teams. The advantage
    of this approach is that SRE engineers can focus on specific issues within projects
    they are assigned to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Distributed SRE model**: In this model, the SRE team works more as a center
    of excellence with specialists that can be consulted to solve issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A typical way to position SRE is presented in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Position of SRE in DevOps'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_05_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.2 – Position of SRE in DevOps
  prefs: []
  type: TYPE_NORMAL
- en: One thing must be absolutely clear, and that is that SRE requires a change of
    culture. SRE focuses on improving operations, yet also facilitating development
    and releases at high velocity. It often means that SRE specialists require a high
    level of standardization of technology and processes. If development and operations
    are standardized, then it's also easier to automate processes. By doing that,
    SRE drives down the probability that risks materialize. As a result, engineers
    are freed up to pick up other tasks instead of having to spend a lot of time solving
    problems. That's the key takeaway of SRE.
  prefs: []
  type: TYPE_NORMAL
- en: The next question is how an organization can implement SRE. That starts with
    defining KPIs. In the next section, we will study the most important KPIs in SRE.
  prefs: []
  type: TYPE_NORMAL
- en: Architecting SRE using KPIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we dive into the definition of KPIs, we need to get back to the basic
    principles of SRE. SRE teams focus on reliability, scalability, availability,
    performance, efficiency, and response. These are all measurable items, so we can
    transform them into KPIs. In this section, we will learn how to do that using
    SLOs, **Service-Level Indicators** (**SLIs**), and the error budget.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main KPIs that we use in SRE are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SLOs**: In SRE, this is defined as *how good a system should be*. An SLO
    is much more precise than an SLA, which comprises a lot of different KPIs. You
    could also state that the SLA comprises a number of SLOs. However, an SLO is an
    agreement between the developers in the SRE team and the product owner of the
    service, whereas an SLA is an agreement between the service supplier and the end
    user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The SLO is a target value. For example, the web frontend should be able to handle
    hundreds of requests per minute. Don't make it too complex at the start. By setting
    this SLO, the team already has a number of challenges to be able to meet this
    target, since it will not only involve the frontend but also the throughput on,
    for instance, the network and involved databases. In other words, by setting this
    one target, architects and developers will have a lot of work to do to reach that
    target.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**SLIs**: SLOs are measured by SLIs. In SRE, there are a couple of indicators
    that are really important: request latency, system throughput, availability, and
    the error rate. These are the key SLIs, measuring how good a system really is.
    Request latency measures the time before a system returns a response. System throughput
    is the number of requests per second or minute. Availability is the amount of
    time a system is usable to the end user. The error rate is the percentage of the
    total number of requests and the number of requests that are successfully returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Error budget**: This is probably the most important term in SRE. The SLO
    also defines the error budget. The budget starts at 100 and is calculated by deducting
    the SLO. For example, if we have an SLO that says that the availability of a system
    is 99.9%, then the error budget is *100 – 99.9 = -0,1*. This is the room that
    SRE teams have to apply changes without impacting the SLO. It forces developers
    in the SRE team to either limit the number of changes and releases or to test
    and automate as much as possible to avoid disruption of the system and overspending
    the error budget.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To understand the concept of error budget in SRE, it''s important to understand
    how SRE treats the availability of systems. It''s not simply a matter of deducting
    the downtime to get to the availability of systems. SRE takes failed requests
    into account. A failed request can be because a system doesn''t respond or has
    a slow response. Detecting failed requests determines the availability and thus
    whether the error budget is exceeded or not. Important parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**TTD**: The **time to detect** an issue in software or a system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TTR**: The **time to resolve** or repair the issue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Frequency/year**: The frequency of error per year.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Users**: The number of users that are impacted by the error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bad/year**: The number of minutes per year that a system is not usable, or
    the *bad minutes* per year.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Working with the error budget is shown in the following workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Working with the error budget'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_05_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.3 – Working with the error budget
  prefs: []
  type: TYPE_NORMAL
- en: 'Risk should be perceived as business risk: something endangering the business
    of the enterprise. Recognizing that risk leads to requirements of systems and
    software. These requirements are translated into SLOs, defining how good a system
    should be. SLOs are measured by indicators, telling exactly how good the system
    really is. If SLOs are not met, they will trigger the risk to materialize. The
    chance that systems might fail and with that SLOs are not met is the error budget.
    The error budget – typically when the budget is exceeded – will lead to adjusted
    requirements and improved systems.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Despite all the work we put into reliability, enterprises will be confronted
    with issues and, as a consequence of that, outages. A key element in SRE is the
    blameless post-mortem that can be executed on different levels. We can have post-mortems
    whenever an incident occurs or after a project has been completed. The blameless
    post-mortem is really all about culture: it investigates incidents without blaming.
    SRE teams simply assume that all involved team members have done their very best
    to avoid the incident.'
  prefs: []
  type: TYPE_NORMAL
- en: The teams evaluate the issue and come up with advice to avoid the issue occurring
    again. This can be improvements to the process or the use of tools. Also, advice
    might be about people, for instance, to get people trained in specific areas.
    This is not to blame, but always to improve.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we put it all together, SRE is a truly holistic model. It''s about processes,
    tools, and people. The following diagram shows a holistic view of SRE and how
    it merges with DevOps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – Holistic view of SRE'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_05_004.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.4 – Holistic view of SRE
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we introduced the main aspects of SRE. The top question and
    challenge for most enterprises is: where do we start? We will discuss that in
    the next section.'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing SRE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we have learned what SRE is and what the key elements are. In this
    section, we will learn how to start with SRE, but like DevOps, the advice is to
    start small. Then there are two major steps that will help you to implement SRE
    in a controlled way:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Agree on the standards and practices**: This can be for just one SRE team
    or for the entire enterprise if the ambition reaches that level. In some workbooks
    this is called **kitchen sink**, meaning that everything is SRE. This can be a
    viable approach for companies with a limited set of applications, but for enterprises,
    it might be wiser to work with an SRE team charter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s work with a very common example that we will also use in the next chapters.
    Enterprises usually have product teams working on applications and a platform
    team that is responsible for the infrastructure. It''s good practice to have an
    SRE team bridging between one product team and the platform team, setting out
    standards and practices for this particular domain. The product team will focus
    on the delivery of the application, obviously working closely together with the
    platform team. The SRE team can guide this and set standards for the reliability
    of the end product. It means that SRE teams have to cover multiple domains, as
    shown in the following figure:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.5 – Domains of SRE'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_05_005.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.5 – Domains of SRE
  prefs: []
  type: TYPE_NORMAL
- en: '**Agree on the scope of services**: Certainly, at the beginning of the SRE
    journey, SRE teams can''t do everything. Therefore, we need to agree on the scope
    of the SRE team. Will they only do consulting or will they be actively involved
    in the DevOps projects? Or will they only be involved in the automation of DevOps?
    Some companies have specific SRE teams for tooling, a tools-only SRE team that
    is only concerned with implementing automation tools, overarching DevOps. The
    final step in SRE is *on call*, whenever issues arise during operations and exceed
    the error budget. Then, SRE engineers are called in to investigate the issue,
    guide in the post-mortem, and help implement new solutions that ensure reliability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Since SRE is a Google invention, Google has published extensive guidelines
    to implement SRE step by step. Google identifies three entry acceptance criteria
    to start with SRE:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SLOs** have been defined and agreed with business owners.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blameless post-mortems** can be executed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The enterprise has a process in place to manage production issues. This can
    be the standard **incident management** process as defined in IT service management
    frameworks such as ITIL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where does SRE start and how do teams begin their work?
  prefs: []
  type: TYPE_NORMAL
- en: SRE specialists are hired or trained within the enterprise.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Release processes are documented and evaluated by SRE specialists.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Operational processes are documented, including runbooks for releases and handover
    to operations. These processes are evaluated by SRE specialists.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SLOs have been defined and agreed upon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SRE teams are mandated to adapt and implement processes that reduce toil. Collaboration
    with developers and operations resulting in a buy-in is a prerequisite.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The latter is crucial, but even more important is that SRE teams do this without
    *blaming* as discussed in the previous section about the blameless post-mortem.
    Every single assessment of procedures, processes, and the root cause of failing
    systems should be without pointing fingers, but only focusing on improvements.
    SRE teams can do this for all new and existing processes:'
  prefs: []
  type: TYPE_NORMAL
- en: SLO and error budget review
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incident reviews
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test and runbook reviews
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security audits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, before the team can really start, the organization needs to have clear
    priorities. As we have learned, SRE will trigger a change of culture and the whole
    organization will have to support the implementation of SRE. Apart from the model
    that we use to implement SRE teams – dedicated, embedded, or distributed – the
    guidelines and guardrails of SRE will impact the entire enterprise. That means
    that the enterprise must have a strategy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Typically, enterprises do not start from a *greenfield* situation. There are
    existing products, projects, and processes that can''t be changed overnight. Google
    recognized this when it introduced the methodology. Enterprises are usually *brownfield*
    that enter a transformation. In that case, they need to think of priorities and
    how to start the transformation. In 2013, Google''s SRE engineer Mickey Dickerson
    came up with the Hierarchy of Reliability. The model is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Dickerson''s Hierarchy of Reliability'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_05_006.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.6 – Dickerson's Hierarchy of Reliability
  prefs: []
  type: TYPE_NORMAL
- en: The idea of the pyramid is that the items at the bottom are the basics that
    need to be implemented first; they form the foundation. From there the transformation
    progresses to more advanced items, such as the release chain in the development
    and deployment of new products at the very top of the pyramid.
  prefs: []
  type: TYPE_NORMAL
- en: We have identified our goals and objectives, assigned teams, and agreed on the
    priorities in the implementation. But will SRE actually bring benefits to the
    enterprise? We will answer that question in the final section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting business value out of SRE
  prefs: []
  type: TYPE_NORMAL
- en: As we have learned in the previous section, enterprises don't implement SRE
    in just a few days. It takes time and stamina to get it right. But is it worth
    it? Obviously, the answer is yes. SRE will allow for great business value. In
    this final section, we will explain how.
  prefs: []
  type: TYPE_NORMAL
- en: 'Today''s enterprises are continuously transforming. It puts a lot of pressure
    on operations that on one side have to keep up with developments and on the other
    side have to keep systems stable and reliable. Without true collaboration between
    developers and operations, that''s virtually impossible. SRE addresses this challenge.
    SRE recognizes that putting dev and ops together in one room doesn''t solve the
    problem. SRE creates a solution that reduces operational issues by helping developers
    to build reliable systems. Key components are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Standardization**: Standardize processes and tools.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automation**: Automation leads to consistency, but automation also enables
    scaling. This requires a very well-thought-out architecture. Automation is about
    doing something once and then letting automation take care of the rest. Without
    automation, operations would simply be drowned by manual tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Eliminate toil**: Toil is manual work, repetitive, and can be automated.
    But toil is also work that doesn''t add value to the product: it''s interruptive
    and slows down the development of services that do add value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Simplicity**: Software needs to be simple as a prerequisite to a stable,
    reliable system. Code needs to be simple and clean and APIs as minimal as possible.
    SRE lives by the golden rule of less is more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By doing this, the enterprise will benefit from high-velocity developments,
    yet spending fewer resources in fixing issues. Time and resources can then be
    invested into further improvements. So, enterprises can gain a lot from adopting
    SRE. Because SRE involves a very systematic way to build, manage, and review systems,
    enterprises can trust reliable services. Repetitive tasks are taken over by standardization
    and automation. The business gains on multiple sides here:'
  prefs: []
  type: TYPE_NORMAL
- en: Reliable services will gain trust with customers and likely more revenue.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because of automation, manual tasks are reduced. This will drive the costs of
    operations down. The very first thing that SRE engineers will do is automate repetitive
    tasks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because of standardization, systems will become more reliable and stable, causing
    fewer issues and outages. Analyzing issues and solving problems require resources
    and are therefore very costly. They don't add value to the business, but they
    need to be addressed in order to not stop the business.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cost savings might be invested in the development of new features and new products.
    In other words: SRE will be a driver for innovation. SRE will bring a lot of benefits
    to an enterprise, but implementation requires dedication and the willingness to
    adopt a different culture. As with anything in Agile and DevOps, the recommendation
    is to start small and then scale up throughout the enterprise. Learn from mistakes,
    optimize, and continuously improve.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered the basics of SRE. The original workbook contains well
    over 500 pages, so it's almost impossible to summarize the methodology in just
    a few pages. Yet, after completing this chapter you will have a good understanding
    of the founding principles of SRE, starting with the definition of SLOs to set
    requirements on how good a system should be. Subsequently, we measure the SLOs
    with indicators that tell us how good the system really is. We learned that by
    working with risk management, error budgets, and blameless post-mortems, SRE engineers
    can help DevOps teams to improve systems and make them more reliable.
  prefs: []
  type: TYPE_NORMAL
- en: The conclusion of the chapter was that SRE is not very easy to implement in
    an enterprise. We discussed the first steps of the implementation and learned
    that if done right, SRE will lead to benefits. Businesses will gain from SRE because
    a lot of manual work can be reduced, creating room to improve products or develop
    new ones.
  prefs: []
  type: TYPE_NORMAL
- en: This concludes the first part of this book. In the next part, we will take the
    next step and learn how modern technologies can help the enterprise and further
    optimize operations. One of the promising new technologies is artificial intelligence
    and with that, we introduce AIOps in the second part of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the term that SRE uses to label repetitive, manual work that should
    be reduced?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What do the terms TTD and TTR mean?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What do we do when we transfer risk?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Multi-Cloud Architecture and Governance*, by Jeroen Mulder, Packt Publishing,
    2020'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Practical Site Reliability Engineering*, by Pethuru Raj Chelliah, Shreyash
    Naithani, and Shailender Singh, Packt Publishing, 2018'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Do you have an SRE team yet? How to start and assess your journey: [https://cloud.google.com/blog/products/devops-sre/how-to-start-and-assess-your-sre-journey](https://cloud.google.com/blog/products/devops-sre/how-to-start-and-assess-your-sre-journey)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
