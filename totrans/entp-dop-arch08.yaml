- en: '*Chapter 6*: Defining Operations in Architecture'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The role of operations is changing in enterprises that adopt DevOps. The number
    one task of operations is to keep services up and running, but in the new digital
    operating model, a lot of these tasks can and will be automated. Before we start
    thinking about automating operations, we need to have a clear view of roles, mandates,
    activities, and domains of operations in the enterprise. This chapter is the guardrail
    to capturing ops in the enterprise architecture. We will learn how to design architecture
    for operations and define the digital operating model.
  prefs: []
  type: TYPE_NORMAL
- en: After completing this chapter, you will have learned what the roles and responsibilities
    are of operations and how this can be addressed in the architecture. We will also
    see how operations is changing and impacted by the cloud, cloud-native services,
    and event-driven architectures that use microservices. We will design a digital
    operating model while making a distinction between platform and product operations.
    Finally, we will discuss how to elevate the enterprise to continuous operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding operations management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining operations in an enterprise architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining the digital operating demarcation model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding ops in an event-driven architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Planning operations with a maturity model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding operations management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can start defining operations management in an enterprise architecture,
    including the roles and demarcations between these roles, we need to understand
    what IT operations include. In this section, we will discuss the definition of
    IT operations and **IT Operations Management** (**ITOM**).
  prefs: []
  type: TYPE_NORMAL
- en: 'First, why is this important? DevOps has a tendency to focus on development:
    exploring and building new features and new products. In discussing release management
    and CI/CD, there''s also focus on the development and deployment process. But
    operations is just as important as development, and the role of IT operations
    is changing. Not only because of DevOps, but also because of the digital transformation
    that a lot of enterprises are going through. We will learn more about this in
    this section.'
  prefs: []
  type: TYPE_NORMAL
- en: As a short definition, we can say that IT operations includes all the processes
    that support hardware and software that are used by the enterprise to fulfill
    customers' services. So, IT operations is responsible for the functionality of
    end user devices such as laptops, but also for products that deliver services
    to customers of the enterprise. A simple example is a website where customers
    can order goods, including its infrastructure (web server) and application code
    (frontend application and database). IT operations also have a major task in assuring
    the quality of IT assets.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following processes are important in ITOM:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Monitoring**: IT operations are the eyes of IT, so robust, resilient monitoring
    systems are crucial. There''s not really a *one size fits all* approach when it
    comes to monitoring. Operations will work with different systems to control the
    infrastructure, the applications, interfaces, backup jobs, and many other components.
    The challenge is to get one overview out of these systems so that system states,
    failures, and potential issues can be correlated. For example, a web service might
    be not responding because the database is not available. End-to-end monitoring
    is a term that is often used in IT, and it means that monitoring systems simulate
    transactions throughout the chain of IT systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Incident management**: Any event that disrupts the normal operation of systems
    is an incident. It''s up to operations to identify the incident (using monitoring)
    and solve it as soon as possible. This can be done by applying a temporary workaround
    to get systems back to normal, but it''s best to fix the issue and make sure it
    doesn''t happen again. That''s what problem management is all about.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Being involved in operations for quite a number of years as an architect, there''s
    one important lesson that every engineer and architect should learn well: there''s
    nothing as permanent as a temporary solution to quickly solve an issue. It might
    be the fastest way to get systems back up and running, but in the long run, these
    quick fixes will cause new issues. One reason for this is that quick fixes are
    often not very well documented and after a while, no one knows how they were applied.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Problem management**: Here, incidents are analyzed in more depth. Also, trends
    in incidents are explored. Operations will need to align with engineers and architects
    to come up with solutions to prevent incidents from occurring again.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Change control and release management**: Operations will be confronted with
    changes to systems and in DevOps, these changes will occur quite often. However,
    it''s the responsibility of operations to ensure that systems keep running without
    major, unplanned interruptions. This is the change control process. Part of this
    process might be running a final backup before the change is executed so that
    system states and data are secured. Developers and operations need to be fully
    aligned in applying changes. This is done in the process of release management.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the more traditional way of working, operations will simply receive the new
    release and then decide when this is deployed so that existing services can continue
    without any disruptions. In DevOps, the process works differently. Here, the team
    has a shared responsibility in deploying the new release.
  prefs: []
  type: TYPE_NORMAL
- en: 'In short, operations must keep the services up and running under all circumstances.
    DevOps and digital transformation have a significant impact on operations. Let''s
    review some trends:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cloud and cloud native**: This may sound obvious, but cloud and cloud-native
    technologies have an enormous impact on IT operations. The contradiction is that
    a lot of these technologies aim to reduce the complexity in the IT landscape,
    but on the other hand, they add complexity with cloud-born assets. The IT landscape
    is turning more and more into an API ecosystem, where operations have to manage
    not only virtual machines, applications, and network connections, but also **Application
    Programmable Interfaces** (**APIs**) that connect the PaaS and SaaS solutions
    to the IT landscape of the enterprise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data center decommissioning**: With enterprises moving IT systems to cloud
    platforms, it''s logical to assume that the private owned data centers are being
    emptied and decommissioned. Here, traditional operations work, including datacenter
    management, is not disappearing, but being transformed into managing the virtual
    data center in cloud platforms. Once more, everything is turning into code, whereas
    in traditional data centers, operators would still have physical machines to look
    after.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Faster networks**: There''s less of a need to have systems near the enterprise
    itself. Systems can be hosted in global cloud platforms. High-speed network connections
    solve problems with latency, so there''s virtually no limit to where systems can
    *land*. In the near future, we will see faster networks coming to the market:
    it''s a requirement for a lot of new services that are being developed. Think
    of real-time data analytics, quantum computing or simulation, and technologies
    that rely on high-speed connections to, for instance, transmit images across the
    world. Networks are the foundation for everything, and operations will need to
    focus more on the resilience, agility, and performance of these networks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Globalization**: Global cloud providers such as Azure, AWS, Google Cloud,
    and Alibaba Cloud have data centers around the globe. There''s a big benefit in
    being able to have disaster recovery enabled in a completely different region,
    thus increasing the resiliency of systems. However, there''s also a lot to consider,
    such as if enterprises are bound by legal regulations to have data within the
    borders of the country or region where they reside or deliver services. Globalization
    of IT has pros, but also cons.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Shift to left-left**: The idea of knowledge sharing in IT has gained a lot
    of momentum over the past few years. Shift left also means that IT systems cater
    for *self-help*: systems are designed in such a way that users can easily find
    ways to overcome issues. With shift left-left, an element is added to this: systems
    are learning from users and adapting software so that the issue doesn''t occur
    again. This is where the final trend will play a huge role: **artificial intelligence**
    (**AI**) and **machine learning** (**ML**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AI and ML**: Last but not least, one of the major trends that will change
    the operations domain is AI and ML. This includes self-learning, self-healing
    systems, and systems that can even predict certain behavior and act accordingly
    to that behavior. In operations. we will see diagnostic systems that learn from
    issues and either fix these or give advice on how to deal with them. These systems
    are also capable of correlating events: if a system in the chain fails, AI will
    know how it will impact other systems in that chain and take mitigating actions,
    for instance, taking a snapshot of the system''s state so that the root cause
    can be identified faster and more accurately.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At this point, you should know that operations will not become easier and that
    IT won't become less complex. This complexity will shift and transform. The good
    news is that these new technologies will allow you to predict system behavior
    better, design for more resiliency, and reduce risks further by finding the root
    causes of issues faster and taking swift, accurate corrective actions.
  prefs: []
  type: TYPE_NORMAL
- en: How does this fit into our architecture? We will discuss this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Defining operations in an enterprise architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IT operations is not a part of the enterprise architecture, meaning that an
    enterprise architecture doesn't define how an enterprise must perform operations.
    At best, the operations architecture is part of the technical architecture. In
    this section, we will elaborate on the components of the enterprise architecture
    and then study the specifics of the operations architecture.
  prefs: []
  type: TYPE_NORMAL
- en: 'The enterprise architecture includes the following architectural components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Business architecture**: This covers the business functions and the organization
    of the business, including its operations. From the business architecture, it
    should be clear how products and services are delivered, as well as what processes
    are followed for designing, building, and running them. The business architecture
    starts with the product strategy, which includes describing the products and services
    that the enterprise delivers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Governance architecture**: This defines who''s responsible for fulfilling
    processes. This is the blueprint for how the enterprise operates, including the
    tactical plans for IT that state how processes are implemented, operated, and
    monitored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ops are key components in both the business and governance architecture. Ops
    is responsible for delivering products and services in a stable manner throughout
    the whole delivery chain. It's important to realize that there is a difference
    between operational service management and operations management, with the latter
    often referred to as ITOM. Service management comprises the typical ITSM or ITIL
    processes that we discussed in the first section about *Understanding operations
    management*, such as incident and problem management. ITOM is more IT technology
    oriented and focuses on the operations of applications and infrastructure. The
    enterprise architecture also addresses this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Data architecture**: This describes how data is used; that is, why and by
    who or what process to fulfill a service. Operations have a role in making and
    keeping data available according to the data principles of an enterprise. These
    principles typically involve data privacy and compliancy rules. Due to this, operations
    need to work closely with security and data privacy officers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Applications architecture**: This describes the build and usage of applications.
    Again, operations play a key role in keeping the applications running, including
    databases and middleware. It''s highly recommended to involve operations in the
    very first stage of application development, to make sure that applications can
    really be managed by operations. Think of applying new cloud-native technologies
    to applications: an enterprise needs to be sure that operations have the skills
    to operate these technologies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Technology architecture**: Finally, this describes all the technical components
    that are used in the enterprise. It should include products such as hardware and
    software, standards and principles, services, and policies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram shows the levels in the enterprise architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Components of the enterprise architecture'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_06_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.1 – Components of the enterprise architecture
  prefs: []
  type: TYPE_NORMAL
- en: 'The operations architecture can be part of the technology architecture, but
    at a more detailed level. It includes the following components at a minimum:'
  prefs: []
  type: TYPE_NORMAL
- en: Production scheduling/monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event management (incidents, problems, changes)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Two items deserve special attention:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Service-level agreements (SLAs)**: The contract between a supplier and a
    customer that describes exactly what conditions a service is provided with, typically
    using **key performance indicators** (**KPIs**). Operations need to deliver the
    service according to these KPIs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operating-level agreements (OLAs)**: Part of the SLA can be OLAs, defining
    the interdependent relationships between components, and composing the service
    that is covered by the SLA. For example, the SLA might describe a web application
    that needs to be available 99.9% percent of the time. The application itself might
    be depending on database services that are not part of the application chain and
    are operated by a different ops group. The OLA will address this interdependency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we concluded that IT is becoming more complex. Enterprises
    expect more from operations to keep systems stable, but also to keep up with new
    developments. To allow ops to fulfill these increasingly demanding tasks, they
    need an adjusted operating model that deals with this digital transformation.
    For that, they also need the right tools. In the next section, we will discuss
    this new, digital operating model before we step into the world of tools with
    AIOps.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the digital operating demarcation model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The role and position of operations is changing; we saw that in the first section
    of this chapter. Besides new and evolving technology impacting operations, the
    most important reason for this is the shift from projects to product-oriented
    continuous delivery.
  prefs: []
  type: TYPE_NORMAL
- en: 'What do we mean by this? Most enterprises used to work in projects, typically
    waterfall type projects. There''s a specific end date and the whole project is
    set out in a timeline with milestones. In DevOps, the focus is on the product:
    it starts with a Minimal Viable Product, and then the teams keep improving it
    in short sprints of 2 or 3 weeks.'
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the sprint, the product and the deliverables are reviewed. The
    developers and operations collaborate with these teams. In the traditional model,
    operations would get a final product and then decide how and when it would be
    released. The new operating model has to be more agile, adaptive, and embedded
    in DevOps. In this section, we will look at that new operating model in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s important to understand what the role of dev is and what the role of
    ops is in a digital operating model:'
  prefs: []
  type: TYPE_NORMAL
- en: Dev designs and deploys.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ops fulfills and manages, including detection and correction. However, in DevOps,
    detection and correction is looping back into dev.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To create agility, we need to set **demarcation** in the different ops tasks.
    We will have operations focusing on the products and operations focusing on the
    platform. This is a requirement if we wish to provide product-oriented delivery.
    In a digital operating model based on agile and DevOps, we have businesses working
    together with product teams to define the necessary products and their features.
    Product ops engineers will support the delivery of such products, while the platform
    engineers will make sure that the platform – the infrastructure – is ready to
    land the products and provide an enduring stable service.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows a model with demarcation layers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Layered demarcation model with product ops and platform ops'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_06_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.2 – Layered demarcation model with product ops and platform ops
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next section, we will explain the model further:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Platform Ops**: The platform is the landing zone – the foundation. It needs
    to be there, and it needs to be stable. Product teams should not have to worry
    about the availability of the platform. In most digital operating models, the
    platform is usually a (public) cloud platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The platform team that manages this is decoupled from the product teams. Platform
    operations include updates, upgrades, and optimization and also deploys new infrastructure
    features. These are planned in close cooperation with the product teams to avoid
    disruptions to services.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Roles that are advised in platform operations are (cloud) platform manager,
    (cloud) platform architect, and platform engineers. There might be a great need
    to have an API integrations specialist in this ops team as well, since platforms
    are tending to become more like API ecosystems. These APIs, such as SaaS and PaaS
    solutions, need to be integrated with the platform.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Product Ops**: This is the layer where the product is designed, build, deployed,
    and managed in DevOps mode. Simply put, this is the layer where the product is
    defined as a basic idea and through iterations, all of which are eventually brought
    under product ops control. In this team, we will need platform engineers that
    bridge the requirements of the product to the platform. These platform engineers
    need to be trained and skilled in Infrastructure as Code, Configuration as Code,
    automation, and API programming. They will liaise with platform operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ops roles that are advised in this layer and the product team are infrastructure
    engineers and testers, developers, and specific domain architects who are involved
    in designing the product.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'One of the pitfalls of introducing agile and DevOps is that enterprises might
    step away from the traditional IT service management processes. However, the operational
    processes that we briefly discussed in the first section about *Understanding
    operations management* are still very valid. This is why, in a digital operating
    model, we need roles and responsibilities to address these processes:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- (Major) Incident manager'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Problem manager'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Change manager'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Asset manager'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can do this using a RACI matrix. RACI stands for **Responsible, Accountable,
    Consulting, and Informed**. The following table represents a simple example of
    a RACI for service management processes:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.3 – Example of a RACI matrix for service management processes'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_06_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.3 – Example of a RACI matrix for service management processes
  prefs: []
  type: TYPE_NORMAL
- en: The placing of the **R**, **A**, **C**, and **I** are debatable, which is fine
    – as long as it is perfectly clear to all involved who's responsible for what.
  prefs: []
  type: TYPE_NORMAL
- en: '**Business**: This is the top level and is where the strategy is laid out and
    the requirements for the products are defined. In the new digital operating model,
    new roles are added to this layer, such as customer journey analysts and designers.
    The whole idea behind the model is that the enterprise caters for more agility
    and gets new products to the market faster. The business will need to know what
    customers want and how they experience the products to make them successful.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is also important for operations. Remember that dev and ops have to be
    aligned from the beginning to the end. Ops needs to be involved in the customer''s
    journeys too. A specific ops role in this case is the service manager role: they
    need to be aware of what''s coming and how this can be adopted in the new services,
    all while ensuring the existing services are not disrupted.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There's one important layer that's missing, but this is actually not a separate
    layer. Security and security management is an overarching layer and should be
    embedded in every other layer.
  prefs: []
  type: TYPE_NORMAL
- en: So, we have engineers and architects on all the layers, closely collaborating.
    But it should be clear that they need some sort of framework where they can work.
    That is the enterprise architecture. The enterprise architect sits at the very
    top of the model, closely working together with the customer journey designers,
    the domain architects in development, and the architects in operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'IT4IT, by The Open Group, addresses this new model and suggests a way forward
    for enterprises. IT4IT marks four stages or *value streams* for products. These
    value streams are very accurate since IT creates value – a product being developing
    from an idea and becoming a real service:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Plan**: Strategy to portfolio'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Build**: Requirement to deploy'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Deliver**: Requirement to fulfill'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Run**: Detect to correct'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'These value streams are shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – IT4IT value streams'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_06_004.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.4 – IT4IT value streams
  prefs: []
  type: TYPE_NORMAL
- en: The deliver and run value streams are the ops streams. Request to fulfill includes
    cataloging, fulfilling, and managing the usage of the service. Run is about anticipating
    and resolving issues. Ops can help with these tasks by using an event-driven architecture.
    We will discuss this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding ops in an event-driven architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s review the most important task of ops once more: keeping services up
    and running. To enable this, we have defined a number of processes that help manage
    systems. Incident and problem management are key processes; that is, in IT4IT
    terms, detect to correct. The issue is that incident management is almost by default
    reactive: an issue is detected and actions are triggered to find and fix the issue.
    In the next phase, typically in problem management, a deeper analysis is done,
    where solutions are designed to prevent the issue from happening again.'
  prefs: []
  type: TYPE_NORMAL
- en: Event management is a component of operations. The challenge in a digital operating
    model is to orchestrate and automate these events across different IT systems
    and even platforms. The event-driven architecture addresses this and is actually
    the starting point of AIOps. We will discuss this in more detail in [*Chapter
    8*](B17492_08_ePub_RK.xhtml#_idTextAnchor095), *Architecting AIOps*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The event-driven architecture was originally meant to help design applications
    so that they react to events. An event is defined as a change of state that triggers
    a reaction. The following diagram provides an example of a build in Archimate:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Simple Archimate model for processing payments'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_06_005.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.5 – Simple Archimate model for processing payments
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we have a business event: **Order placed**. This triggers a business
    function, which in this example is called **Order fulfillment**. Part of this
    function is **Payment**, which triggers an external system at the bank that delivers
    the payment service. As soon as the payment is accepted, the order leaves the
    function to the next business event, which is the **Order delivery**.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Archimate is a recommended methodology for designing functions and mapping these
    to processes that need to be fulfilled by IT components. Archimate uses viewpoints
    to model business processes to applications and technology. A common viewpoint
    is the product viewpoint, which shows the value that a product delivers to customers.
    The architect can use Archimate models to define the composition of the product,
    including the different services and interfaces between the services. Archi is
    a free tool that can be used to design Archimate models. Archi can be downloaded
    from [https://www.archimatetool.com/download/](https://www.archimatetool.com/download/).
  prefs: []
  type: TYPE_NORMAL
- en: In this – very simple – example, the customer pays their placed order. The order
    status now changes to paid and triggers a process that pushes the order to delivery.
    In fact, the payment process itself will also trigger other new events, such as
    a connection that needs to be established with a bank or payment service. Within
    the bank, there will be a trigger that checks the back account of the buyer and
    sends a message to the order system with a status of OK or not OK.
  prefs: []
  type: TYPE_NORMAL
- en: In short, a change of state will trigger a lot of new events. These events do
    not have to occur in the same system, as we have seen in this example. Events
    can drive decisions in other systems that are connected through APIs. This is
    the foundation of microservices and the **service-oriented architecture** (**SOA**).
    Microservices are contained, independent operating services that communicate with
    each other using APIs. These services are managed by self-contained teams that
    develop, build, and run these services. So, it's fair to say that the event-driven
    architecture using microservices is well supported by DevOps with teams that are
    end-to-end responsible for delivering that particular service.
  prefs: []
  type: TYPE_NORMAL
- en: To enable this type of architecture, we need services to be defined as separate
    functions that are reusable, scalable, and interoperable. These are the corner
    stones of SOA and in fact, a lot of cloud technologies are derived from SOA principles.
    PaaS and SaaS solutions are defined as SOA, which means that they can be reused
    and shared in different environments, are scalable, and are interoperable between
    different platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'How does this all impact operations? To put it very simply: they have to keep
    services – microservices, to be precise – up and running across a lot of different
    applications, systems, and platforms. Ops must deal with decentralized continuous
    delivery by using interfaces that connect independent deployed services. The traditional
    way of monitoring will not be sufficient anymore: ops needs a single pane of glass
    view – a holistic view of all the services and their interconnections.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s go back to our example where we have an order that needs to be
    paid. The order status will change from not paid to paid and trigger the delivery.
    The status will only change if the bank has approved the payment, so the trigger
    to change the status comes from a service that''s outside the service that actually
    holds the order. If the API between the bank and the order queue fails, the operators
    will need to know about this. So, monitoring should also include monitoring the
    API to the bank and checking if the bank service is *online*. Here, event monitoring
    across the full chain becomes key, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Full chain event management and monitoring'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_06_006.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.6 – Full chain event management and monitoring
  prefs: []
  type: TYPE_NORMAL
- en: 'This will certainly lead to more complexity in ops, and that''s why we need
    to look for ways to automate this as much as possible. Microservices, SOA, and
    the event-driven architecture create more reliable systems: independent services
    simply wait for the trigger before the action is executed and the next service
    is started. Independent services allow for a fire and forget model: a system fires
    a trigger and then forgets about it; then, the system moves on to the next event
    and the next trigger. But we want to ensure that the trigger is actually received
    and maybe even check if the trigger is processed correctly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next few chapters, we will learn how to monitor these processes and
    how we can automate event management in event-driven systems using microservices.
    This is exactly what AIOps does: making operations easier by means of AI and ML.'
  prefs: []
  type: TYPE_NORMAL
- en: Planning operations with a maturity model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at a maturity model for IT operations. Then, we
    will learn how to apply this to the enterprise and get it to continuous operations.
    Finally, we'll learn how to get it ready so that it can be implemented by AIOps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic operations maturity model looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17492_06_007.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – Operations maturity model
  prefs: []
  type: TYPE_NORMAL
- en: The first level is sometimes referred to as chaotic. Processes are not documented
    here; operations are merely just firefighting. At this level, it's the tools that
    define how operations work, instead of having an architecture in place that also
    defines the toolset. Most enterprises have passed this level.
  prefs: []
  type: TYPE_NORMAL
- en: However, a lot of enterprises are stuck at the second level. This is the committed
    level, where processes are defined. Incident, problem change, and project management
    is in place, but the processes are only integrated in a very limited way. There's
    no overarching event management or *single pane glass view*. In other words, events
    will still trigger unexpected system behavior and might cause severe disruptions
    to the business.
  prefs: []
  type: TYPE_NORMAL
- en: Most enterprises will be somewhere between levels 3 and 4, depending on where
    they are in their digital transformation. The third, proactive level is already
    quite challenging to achieve. At this level, enterprises can analyze trends, have
    end-to-end event monitoring in place, have larger parts of their IT automated,
    and, most importantly, can predict events and taking proactive measures. This
    is the level where AIOps can play a significant role. We will learn more about
    this in [*Chapter 7*](B17492_07_ePub_RK.xhtml#_idTextAnchor086), *Understanding
    the Impact of AI on DevOps*.
  prefs: []
  type: TYPE_NORMAL
- en: At level 4, IT delivery is fully defined as services to the business. This is
    the level where the event-driven architecture becomes relevant. Business functions
    are mapped to IT services. In fact, IT services can support business decisions.
    There's a well-defined service catalogue and all the processes are integrated,
    including cost management. The final stage in the maturity model in IT is real-time
    responsiveness to business events and innovations that are part of operations,
    thus adding value to the business. This is continuous operations stage, where
    we loop feedback to the development processes but in real time and in a fully
    automated fashion. Most enterprises will get there for some applications and some
    business functions, but hardly ever for the entire enterprise and all business
    processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The operations maturity model aligns with the **Capability Maturity Model**
    (**CMM**), which also has five levels. Level 1 is the initial level, where processes
    are poorly controlled and unpredictable. At level 3, which is where most companies
    are at, the processes are clearly defined and well understood, allowing for proactive
    event management. Level 5 is the optimization level, where processes and delivery
    are continuously improved. As we mentioned previously, most enterprises will reach
    this level for certain processes and products, but rarely for the whole enterprise.
    The CMM model looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.8 – The Capability Maturity Model (CMM)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_06_008.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.8 – The Capability Maturity Model (CMM)
  prefs: []
  type: TYPE_NORMAL
- en: 'Level 3 is the focus level: becoming proactive. In the next few chapters, we
    will learn how AI and ML can help us with that.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed operations management and how this is changing
    due to digital transformations and the implementation of DevOps. First, we looked
    at the roles and responsibilities of operations and the different operational
    service management processes. We also discussed some trends that will impact operations
    in the near future. The overall conclusion we attained is that the role of ops
    will change, mainly because of digital transformation and the implementation of
    agile and DevOps. To become agile, we need operators to be able to focus on their
    distinctive tasks. We then discussed a demarcation model with product ops and
    platform ops.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we learned how the architecture will change to become a more event-driven
    architecture and what the position of ops will be here. Ops will need to have
    a single pane of glass view, overseeing and even predicting events in the full
    chain so that proactive measures can be taken. This is what level 3 describes
    in the operations maturity model: proactive and predictable. AI and ML will help
    in this.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss the impact of AI in the enterprise and
    IT operations.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Name three components that must be part of the technology architecture.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the four value streams that IT4IT defines for IT delivery.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An important component of the event-driven architecture is the principle of
    contained, independent operating services that communicate with each other using
    APIs. What do we call these services?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On what level in the maturity model would AIOps fit?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*The New IT Operating Model for Digital*, by Gartner. Published on https://www.gartner.com/en/documents/3770165/the-new-it-operating-model-for-digital.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Designing and Implementing the I&T Operating Model: Components and Interdependencies*,
    by Gartner. Published on [https://www.gartner.com/en/documents/3956725/designing-and-implementing-the-i-t-operating-model-compo](https://www.gartner.com/en/documents/3956725/designing-and-implementing-the-i-t-operating-model-compo).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Blog on IT4IT by Rob Akershoek: [https://www.4me.com/blog/it4it/](https://www.4me.com/blog/it4it/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Solutions Architect''s Handbook*, by Saurabh Shrivastava and Neelanjali Srivastav,
    PacktPub, 2020.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
