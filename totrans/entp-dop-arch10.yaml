- en: '*Chapter 8*: Architecting AIOps'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn how **artificial intelligence for IT operations**
    (**AIOps**) platforms are designed and what sets them apart from any other monitoring
    tool. You will get a better understanding of why these platforms will become a
    necessity in the future of IT. The chapter starts by explaining the logical architecture
    model and then drills down to the key components in AIOps using data lakes and
    analysis through machine learning. We will define the reference architecture for
    an AIOps platform and learn how this will drive operations as we integrate the
    technical services architecture in AIOps. The chapter will provide insights into
    algorithms, anomaly detection, and auto-remediation.
  prefs: []
  type: TYPE_NORMAL
- en: After completing this chapter, you will be able to recognize the various key
    components of AIOps and define the reference architecture. You will learn some
    important lessons in implementing AIOps in enterprises, avoiding some major pitfalls.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the logical architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining the key components of AIOps architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating AIOps with service architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining the reference architecture for AIOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the logical architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we dig into the architecture of AIOps, we need to understand the structure
    of logical architecture. In the previous chapter ([*Chapter 7*](B17492_07_ePub_RK.xhtml#_idTextAnchor086),
    *Understanding the Impact of AI to DevOps*), we learned that one of the first
    steps to get started with the implementation of AIOPs is to get full visibility
    of all our IT assets and processes. This is a requirement to *feed* the AIOps
    model with the basic information of how the IT environment looks. Most AIOps tooling
    will scan the environment using agents, but that is not sufficient. It also needs
    to understand the relationship between assets and what process flows are implemented.
    That is covered in the logical architecture.
  prefs: []
  type: TYPE_NORMAL
- en: 'The logical architecture is not about technology. It doesn''t care what type
    of machines are used or what software. Logical architecture describes systems
    without the definition of the underlying technology. It describes the relationship
    between logical components in a system. The choice of a particular technology—infrastructure,
    software, code—is added later to this architecture. A logical architecture is
    meant to provide a comprehensible overview of the system as input for the technical
    design. Again, a logical architecture typically consists of layers, as shown in
    the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Components of a logical architecture'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_08_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.1 – Components of a logical architecture
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss these layers and the components in more detail later in this
    section.
  prefs: []
  type: TYPE_NORMAL
- en: The logical architecture should be the starting point for any architecture.
    It holds every component that a system needs to fulfill its function. So, from
    the desired functionality, the architect must work out the different components
    that a system needs to be able to meet this functionality, without being bothered
    by constraints that inevitably will come with the choice of technology. The architect
    will need to think about the various system layers, the components in these layers,
    and the interaction between the layers. Next, they will also need to consider
    the interactions with other systems.
  prefs: []
  type: TYPE_NORMAL
- en: Only when this logical model is completely worked out in every detail, the physical
    architecture can be defined, translating the logical components into technical
    components such as infrastructure with network devices and servers, operating
    systems, and finally, the technical application components, including the interfaces
    and APIs.
  prefs: []
  type: TYPE_NORMAL
- en: To help the architect in defining the logical architecture, it's recommended
    to work in tiers as shown in the previous figure. Tiers include client, access,
    presentation, application, worker (in some literature referred to as business),
    and data. It follows a common pattern that systems use to perform a transaction.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: A transaction doesn't have to be a financial transaction. In system architecture,
    a transaction refers to an action that a system performs, triggered by input and
    leading to a certain output, or a request leading to a response. Of course, this
    can be a real transaction, such as an ordering process. But a transaction could
    also be a message that is transferred to another system.
  prefs: []
  type: TYPE_NORMAL
- en: How would the request-response cycle look when we break it down into separate
    steps?
  prefs: []
  type: TYPE_NORMAL
- en: The user raises a request through the presentation tier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user is authenticated through the access tier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After authentication, the request is transferred to the application tier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the application tier, the request is processed through the worker tier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The required data is collected from the data tier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Data is processed through the worker tier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A response to the request is prepared in the worker tier and sent to the application
    tier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The response is transferred from the application tier to the presentation tier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The request-response flow is shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – The request-response flow in a logical architecture'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_08_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.2 – The request-response flow in a logical architecture
  prefs: []
  type: TYPE_NORMAL
- en: 'The circles represent the request and the triangles show the response flow.
    Now, let''s look at the different components in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Client**: This is the entry point for the user to start using an application.
    Typically, this is a browser or an applet on a device that allows the user to
    connect to applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Access**: We don''t want just anyone using systems, so users need to be authorized
    and authenticated. The access tier sits between the client and the presentation
    tier: users use the client to get to the presentation tier and are then authorized
    and authenticated in the access tier. After access is granted, the request is
    processed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Presentation**: The presentation tier has two main functions. First, it helps
    the user to put in the request in a comprehensible way. Once the request has been
    processed, the response is presented in this tier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Application**: This is the tier where the application technology is stored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Worker**: Sometimes this tier is referred to as the business tier, but that
    might be a bit confusing. This is the tier where the request is processed. Basically,
    this is the tier where the application functionality is stored. It holds all the
    components that enable an application to prepare a response to the user''s request,
    including the APIs that, for instance, collect the required data and process that
    data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data**: This tier should only be used to store the data. The worker tier
    sits between this data tier and the presentation tier so that clients can never
    access data directly. They will always need to go through the worker tier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is straightforward if it concerns one system, but enterprises have more
    systems. These systems connect to each other and might very well depend on other
    systems. If an enterprise has implemented **single sign-on** (**SSO**), a user
    might only have to go through an access tier once. But it's very likely that the
    request will follow a workflow through different worker tiers belonging to different
    systems. There might be data required that comes from various data sources. It's
    certainly not a given that the user gets the responses presented in just one presentation
    tier, although that might be very much desired from a user's perspective. If we
    think about that, the logical architecture becomes already quite complicated,
    let alone if the architect tries to get in all the technical details at this stage.
  prefs: []
  type: TYPE_NORMAL
- en: AIOps works with this logical architecture. From this, it understands how systems
    are designed and what relationship they have to other systems. This is the basis
    for the reference architecture of AIOps. Before we get to that reference architecture,
    we will look at the different components of the AIOps architecture. This is the
    topic of the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the key components of AIOps architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss the key components of AIOps. Then, we will
    look at the operating services that provide input for AIOps, and finally, in the
    last section, we will draft the reference architecture.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s recap why we should have AIOps in IT and specifically DevOps.
    IT has become more complicated. Systems are hosted on various platforms, connecting
    to other systems, using a lot of different data sources, with an equal amount
    of variety in data formats. We have come to the point where it has almost become
    impossible for a human to maintain an overview of these complex landscapes. Yet,
    the market is demanding new features at a rapidly increasing pace. Developers
    are under a lot of pressure to deliver code that fulfills new functionality, while
    operators need to make sure that systems are running stably. AIOps can help you
    do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Process and evaluate data**: AIOps can rapidly, in almost real time, process
    data coming from different systems and validate this data. By doing this, AIOps
    can generate alerts and suggest mitigating actions to maintain the desired performance
    of systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rapid root cause detection and analysis**: Because AIOps has access to all
    that data and it understands how systems are interconnected, it will be able to
    get to the root cause of an issue much faster than operators.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable automation**: By processing and evaluating data, AIOps will recognize
    patterns. These patterns are translated into automation sequences, eliminating
    manual tasks. Also, AIOps will learn from these patterns by analyzing the outcomes
    of certain processes. If a pattern constantly leads to an undesired outcome, it
    will come up with suggested actions to change the pattern. Engineers will benefit
    from these suggestions. They will have to spend less time searching for issues
    in the systems and more time improving them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Anomaly detection**: Because AIOps learns patterns, it will also be able
    to recognize deviations in these patterns. These deviations might be anomalies:
    events that need attention. That could be a user trying to get access within minutes
    from two locations that are separated miles from one another to the unexpected
    trigger of an API from the CI/CD pipeline. AI therefore will also greatly benefit
    the security of systems, something that we will discuss further in the third part
    of this book, about DevSecOps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automated remediation**: Sophisticated AIOps systems might be able to autonomously
    solve issues, since they have learned patterns and are able to detect anomalies.
    Since AIOps systems are highly automated, they can also learn how to execute remediating
    actions in the event of *known* issues, typically issues that have occurred in
    the past. AIOps will learn how these issues have been solved and in that case,
    the action can be automated. Be aware that the conditions of these issues need
    to be similar to the conditions when the issue first occurred.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overall, AIOps will definitively increase the efficiency of IT and more particularly
    the DevOps cycle. Developers have started using AI to discover correlations and
    patterns in various systems, helping them to improve the code, including predictive
    analysis. It means asking the *what if* question repeatedly, only much faster
    and with a far better chance of getting more accurate answers.
  prefs: []
  type: TYPE_NORMAL
- en: 'To be able to do this, AIOps systems require several components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Source repository and control**: As with CI/CD in DevOps, all code has a
    source so that systems can always be restored from that source. All designs, patterns,
    configuration parameters, and application code, and all other IT artifacts, are
    kept in a source repository that is brought under version control. This is the
    *baseline* for all systems. The **Configuration Management Database** (**CMDB**)
    that we discussed in [*Chapter 7*](B17492_07_ePub_RK.xhtml#_idTextAnchor086),
    *Understanding the Impact of AI on DevOps*, is part of this repository but will
    likely not hold application code. So, the full repository will contain various
    sources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data Repository for Big Data**: AIOps systems collect a lot of data from
    various sources that they analyze and use to train themselves, modeling the data
    into patterns to enable further automation. This data is collected in its original
    formats in distributed file structures, such as a data lake.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monitoring**: AIOps systems might use agents to track how systems perform
    and if connections between system and system components are available. Most systems,
    however, will aggregate data from other monitoring sources. In a public cloud,
    this could be Azure Monitor, AWS CloudWatch, or Google Cloud Monitoring, combined
    with other, specialized tools or vendor-specific tools to monitor specific components
    in the IT environment. AIOps will get the raw data from these tools and use this
    to train itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automation**: Automating repetitive tasks and for auto-remediation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Machine Learning**: This is the core of AIOps. From the source repository
    and the collected data, it will learn how systems behave and connect to other
    systems. AIOps will learn how applications and data in applications are used and
    how requests are processed. AIOps systems will use the big data, compare it to
    source repositories, and continuously learn from these analyses in order to automatically
    trace issues and come up with suggestions to mitigate or improve, providing feedback
    to developers and operators.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now we need to understand how these components work together. IT research and
    advisory company Gartner has defined a model for AIOps that consists of three
    domains:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Observe**: This involves real-time tracking and tracing of all metrics across
    the systems. AIOps monitors performance, connections, and anomalies by correlating
    and analyzing data with historical data coming from source repositories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Engage**: This involves all data that is related to incidents and changes.
    The engage domain integrates **IT service management** (**ITSM**) processes with
    AIOps. This will be discussed in more detail in the next section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Act**: This involves the automation and any action that AIOps systems execute
    based on the monitoring data (observe) and the output of processes (engage).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The model is presented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3 – Three domains in AIOps (original by Gartner)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_08_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.3 – Three domains in AIOps (original by Gartner)
  prefs: []
  type: TYPE_NORMAL
- en: To be able to act, AIOps needs to understand and learn how IT services are delivered
    through the enterprise. We will discuss this in the next section, where we learn
    how technical service architecture is integrated with AIOps, driving operations
    in a more efficient way.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating AIOps with service architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we have looked at the logical and different components of AIOps. One
    of the main reasons to bring AI into operations is to relieve operators of a lot
    of manual tasks by proactively monitoring systems and even mitigating possible
    risks before they actually materialize. In other words, AIOps is invented to reduce
    what **Site Reliability Engineering** (**SRE**) calls toil. That''s the whole
    point of implementing DevOps and AIOps: to reduce toil and create time to continuously
    design and build better systems.'
  prefs: []
  type: TYPE_NORMAL
- en: 'But it''s not only about the systems themselves. Enterprises also have processes
    to deliver services. That''s the domain of the service architecture. Or, better
    and more precise: the technical service architecture. That includes the processes
    that are discussed in the following subsections.'
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is not something that simply comes out of the box. On the contrary, architects
    need to define a monitoring architecture including what business functions, applications,
    and underlying infrastructure must be monitored in order to get accurate and appropriate
    data about systems'' conditions at the earliest stage possible. The next question
    is how monitoring can be automated: what thresholds must lead to actions, and
    can these actions be automated as well? What logs must be stored, where, and for
    how long? It''s recommended to store logs automatically, as part of the big data
    that AIOps can use to train itself. Monitoring architecture next defines the routing
    of alerts: this is crucial input for AIOps platforms.'
  prefs: []
  type: TYPE_NORMAL
- en: Problem management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This starts with an incident, preferably detected through monitoring rather
    than a user reporting an issue to a service desk. Not every single incident will
    lead to a problem, though. A user who can't log in to a system because their credentials
    have expired might become an incident but rarely will lead to a root cause analysis
    and/or a problem. If incidents are severe, impacting parts of or even the whole
    business, then problem management needs to be executed. The same applies when
    similar incidents occur multiple times. Problem management is needed to analyze
    the cause and to determine whether there are correlating events and patterns.
    Problem management therefore requires a deep knowledge of systems and tools. With
    today's complexity of the enterprise IT landscape, the execution of problem management
    will inevitably lead to analyzing a vast amount of data coming from various systems.
    AIOps will help in analyzing this data, determine trends, and get to root causes
    faster.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What is the desired state of a system? That is the main question in configuration
    management. **Configuration items** (**CIs**) are kept in a repository, including
    the status of their life cycle. CIs include every component that forms a system:
    network connections, servers, software, APIs, and policies. Each of these components
    must be configured as defined in the architecture to maintain consistency.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: the architect decides that a Windows server always runs the version
    Windows Server 2019, but with specific settings that are captured in a server
    policy. They also decide that a database server always runs SQL or uses Azure
    SQL as a PaaS service. As part of the architecture, a database server is never
    allowed to communicate directly with the outside world, so the architecture will
    also have policies on how database servers will communicate with other servers,
    including firewall rules and connection strings.'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration management needs to make sure that these configurations are kept
    during the entire life cycle of components, also when these components are migrated
    to different platforms or different stages in the promotion path (development,
    testing, acceptance, and production). For that reason, accurate configuration
    management is critical for ensuring system quality and good change management.
    Configuration management and desired state are the baseline input for AIOps.
  prefs: []
  type: TYPE_NORMAL
- en: Change management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whenever systems or components of systems are moved, updated, upgraded, altered,
    or decommissioned, change management is involved. In other words, change management
    does not only take care of the implementation of new systems. Any time a system
    is changed in whatever way, change management plays an important role. To enable
    change management, it needs a single source of truth in terms of CIs and the configuration
    of components – the desired state. It needs to rely on configuration management,
    accurate monitoring, and consistent reporting of events that have been logged
    from systems. In AIOps this is identified as historical data, to which it compares
    the changes and validates whether systems are still performing well in the desired
    state. Anomaly detection will help in identifying issues as changes are implemented.
  prefs: []
  type: TYPE_NORMAL
- en: All these processes discussed so far result in data, stored in tickets that
    are raised by users or preferably events logged by systems. In the model that
    we discussed in the previous section about defining the key components for AIOps
    architecture, Gartner refers to this type of data as engagement data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Engagement data is used for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Task automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change risk analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performance analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Knowledge management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Engagement means that ITSM communicates with operational data that is derived
    from monitoring, events, and system metrics. All this data is aggregated in one
    repository, a big data platform so that the AIOps system has one data library
    with which it can analyze system health and performance.
  prefs: []
  type: TYPE_NORMAL
- en: Big data in AIOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This big data platform is the heart of AIOps: it will capture data from different
    systems without the silos these systems are in. What do we mean by that? A system
    can have components in a privately owned data center and communicate with PaaS
    or SaaS services in a public cloud. To get an integrated view of the entire system,
    AIOps needs to have access to one, aggregated data source – the big data platform.
    That platform will hold historical data, data on iterations of the system, and
    real-time system data using interactive big data analytics.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Recapping, AIOps platforms have operational data and process data:'
  prefs: []
  type: TYPE_NORMAL
- en: Data originating from many different systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capabilities to analyze streaming, real-time data, and historical data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Process data from events, logs, alerts, and root cause analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capabilities to integrate process IT workflows and correlating them with operational
    system data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capabilities to visualize data in a comprehensible way
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following figure shows the AIOps stack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4 – High-level modeling of the AIOps stack'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_08_004.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.4 – High-level modeling of the AIOps stack
  prefs: []
  type: TYPE_NORMAL
- en: We have extensively covered the domains observe and engage in the Gartner model.
    Based on the data and the services patterns AIOps can now start executing activities,
    the final stage in AIOps. It can automate tasks by using runbooks and scripts.
    The final step is to translate the components in an architecture for an AIOps
    platform. In the last section, we will define a reference architecture, putting
    it all together. Lastly, we will provide some tools that will get you started
    with AIOps.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the reference architecture for AIOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous sections, we studied the logical architecture of systems, the
    components of AIOps, and the technical service architecture. All these building
    blocks are used to define the architecture for AIOps. In this section, we will
    look at the reference architecture for AIOps.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s recap the goal of AIOps. In [*Chapter 7*](B17492_07_ePub_RK.xhtml#_idTextAnchor086),
    *Understanding the Impact of AI to DevOps*, we discussed the **Key Performance
    Indicators** (**KPIs**) for AIOps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mean Time to Detect** (**MTTD**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mean Time to Acknowledge** (**MTTA**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mean Time to Resolve** (**MTTR**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AIOps adds artificial intelligence to IT operations, using big data analytics
    and **machine learning** (**ML**). The AIOps system collects and aggregates data
    from various systems and tools, in order to detect issues and anomalies fast,
    comparing real-time data with historical data that reflect the original desired
    state of systems. Through ML it learns how to mitigate issues by automated actions.
    Eventually, it will learn how to predict events and avoid them from impacting
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable this, AIOps works with predictive alerts based on algorithms and
    anomaly detection. It *knows* how systems should react and respond and how systems
    interact with other systems. Deviations are quickly discovered, analyzed, and
    validated: are these deviations in the range of normal behavior or are they outside
    that range? What could be the consequence if a system is showing anomalies?'
  prefs: []
  type: TYPE_NORMAL
- en: 'AIOps can only value these events if it''s provided with data: system data
    and process data, such as requests and data on incidents and problems that have
    occurred. It needs that data to learn and adapt the algorithms, so it becomes
    more accurate over time.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous section, we learned about the three domains in AIOps: observe,
    engage, and act. Now we need to translate this into a reference architecture.
    We can do so by creating four layers to perform operational tasks. This is shown
    in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.5 – Logical reference architecture for AIOps'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_08_005.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.5 – Logical reference architecture for AIOps
  prefs: []
  type: TYPE_NORMAL
- en: 'These four layers contain various components, just as we saw in the logical
    architecture of systems that we discussed in the *Defining the key components
    for AIOps architecture* section of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Collect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organize
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyze
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Act
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The process starts with the different services as input: requests, incidents,
    problems, and changes. In the previous section, we learned that this is included
    in engagement data. AIOps systems will now perform several steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Collect is the first step that an AIOps system will perform: it will collect
    observations and the engagement data from as many sources as available: system
    metrics, events, logs, and even information from tickets that are raised by a
    service desk. All this data is sent to a data lake, the main repository of the
    AIOps system.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The data lake will hold raw data: the source data as it is retrieved from systems
    and monitoring tools. The original data formats will be kept intact. The next
    step, therefore, is to organize that data. Remember that accuracy increases as
    AIOps has access to as much data as possible. The outcomes of AI analyses are
    more reliable as more data sources are added to and integrated with the data lake.
    That comes with a challenge: raw data will contain noise. It''s important that
    this imported data is cleaned.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'An important lesson in data science is garbage in, garbage out. To allow AI
    to come up with accurate advice and *learn* with the right data, we need to make
    sure that it only uses proper datasets. Data models need to be trained as well.
    This will take some time: the system needs to be told what good data is and what
    it can be used for. This way, algorithms become more accurate over time.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: An example will make things clear. Monitoring will collect data from the CPU
    in a server. That CPU might have peaks of 90 percent, but overall, the usage will
    be around 20 percent. AIOps will need to learn that a value between, for instance,
    20 and 40 percent is normal. It will also need to learn that a peak of 90 percent
    is OK if it's for a very short time and that it doesn't have to create an alarm
    for that. Now, the model can filter event and log data based on these parameters
    and identify systems that are running above that threshold. That's indeed something
    that regular monitoring systems already do, but AIOps will be able to correlate
    anomalies in CPU performance with other events. And it will be able to initiate
    remediating actions automatically.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Raw and cleaned, structured data is used to train the AI models, using machine
    and deep learning.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Real-time data is compared with historical data such as original configurations,
    executed changes, and passed events. By constantly comparing this data, the AIOps
    systems learn and will even be able to present a timeline of events. This allows
    operators in some cases to *time travel* through a series of events, investigating
    when and why a system state changed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The final step is act. Trained AI models will send predictive alerts and start
    mitigating actions, based on the learning of previous events and actions that
    have been taken when a specific event occurred. Obviously, all alerts and actions
    are looped back as data into the data lake.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are ready to start the implementation of an AIOps platform. In the next section,
    we will discuss the approach to a successful implementation and also identify
    some potential pitfalls. In the last section, we will give a short overview of
    some popular tools.
  prefs: []
  type: TYPE_NORMAL
- en: Successfully implementing AIOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AIOps is still a rather new phenomenon in IT operations and implementing AIOps
    platforms can be very complicated. However, with the following steps in mind,
    it should be doable to perform a successful implementation. The first and probably
    the most important lesson is to start small, as with DevOps and SRE.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before you start, you need a plan. Identify which systems would suit a pilot.
    Pick a system with a basic architecture: an application with just a website as
    the frontend, the application itself, and a database. Validate whether all assets
    belonging to this application are documented well and are identified in the CMDB.
    Next, ensure that you have a good – documented – understanding of workflows and
    processes that are related to this application.'
  prefs: []
  type: TYPE_NORMAL
- en: Why is this important? The AIOps platform, but also engineers – operators –
    need to learn how to work with AI, ML, and analytics. What do operators want to
    get out of the platform? What type of alerts? And is it clear what they should
    do with the alerts or how they can use AIOps to analyze the alerts and help it
    in automating actions? Operators will need to learn what type of data the AIOps
    system needs, so they will need to learn about data requirements, data flows,
    storing data in data lakes, and modeling data analytics. This will definitely
    take time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now the AIOps system can be further configured, and more components of the
    IT landscape can be added, making sure that the system learns from the different
    use cases. It is highly recommended to run the platform in test mode for the first
    weeks or even up to 2 months, allowing AIOps to learn. Once operators are satisfied
    with the functionality and the outcomes of analysis, it can be pushed to run in
    production. But you should always validate outcomes with the original system metrics
    and the goals that were set to implement AIOps. The simple question is: have these
    goals been met in the testing phase? If the goal was to speed up the time needed
    to define the root cause of an incident, then that goal should be measurable and
    compared to the original metric. To put it differently: any implementation of
    a system must have a valid business case.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, the first step is capturing operations data: logs and metrics from infrastructure
    components, applications, databases, and APIs. Next, we need data from workflows
    and also business processes. We might also need other relational data, for instance,
    data about sales and market sentiments, "predicting" when certain services are
    popular in specific periods and under what conditions.'
  prefs: []
  type: TYPE_NORMAL
- en: Use case
  prefs: []
  type: TYPE_NORMAL
- en: An international operating railway company implemented AIOps a few years ago.
    Their infrastructure was built on various platforms, including AWS and Google
    Cloud, using a lot of different tools for monitoring and development. The lack
    of real-time visibility of the systems on these platforms and their dependencies
    slowed down developments, but also caused heavy delays in root cause analysis.
    This caused some major outages, impacting travelers. By bringing data together
    from the various platforms and integrating monitoring tools such as AWS CloudWatch
    and Google Analytics, the company was able to have an integrated view of all the
    correlated systems. AIOps tooling was implemented to analyze incidents in real
    time using this data, resulting in significantly lower MTTD and MTTR.
  prefs: []
  type: TYPE_NORMAL
- en: The use case shows that the more data we can get, the more accurate our AIOps
    platform will be. This data will tell how events correlate and eventually ensure
    that AIOps understands the root causes of these events. From this point onwards,
    you can train the platform on resolutions using real-time observations through
    monitoring and creating automated responses.
  prefs: []
  type: TYPE_NORMAL
- en: One crucial step in implementing AIOps platforms is to really involve operators.
    They are and will be very important to get real value out of the platform. In
    other words, AI is not about replacing operators – on the contrary. The system
    will enable them to get rid of tedious, repetitive, usually manual tasks – remember
    *toil* in SRE – and allow them to focus on other, more challenging tasks that
    are required to develop, test, and launch new systems.
  prefs: []
  type: TYPE_NORMAL
- en: Not involving the operators is only one of the pitfalls. In the next section,
    we will briefly highlight some other potential pitfalls.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding pitfalls in AIOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Besides not involving operators during the implementation of an AIOps platform,
    there are three major pitfalls that must be avoided:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Not enough data**: With only a limited dataset, the AIOps platform will not
    perform. The system can never be accurate without enough data. Findings, issues,
    events, and anomalies will not or will only occasionally be detected and that
    will make the system unreliable, generating false positives or even mitigating
    issues that it doesn''t need to solve.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Wrong or irrelevant data**: This might be even worse than not having enough
    data. Wrong data will definitively lead to false outcomes and unexpected or unwanted
    actions. In order to learn in the correct way, AI needs enough and valid data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data silos**: AIOps platforms get their data from multiple systems. AIOps,
    however, needs this data to be available from one source to enable data analytics.
    Operational data, application performance data, data on connectivity, and security
    data: it needs to be collected and aggregated to one source to make the system
    fast and efficient at creating valuable datasets. In other words, the data silos
    need to be broken down.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summarizing, AIOps needs enough data, relevant data, and for it to be stored
    in one repository so it can create valuable datasets for operational analytics.
    By now, you should realize that AIOps systems are complex, but there is a growing
    number of tools that can help you to get started. We will list some of these tools
    in the final section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Popular tools in AIOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Lastly, we will provide some tools that will get you started with AIOps. The
    AIOps landscape has grown tremendously in recent years. Take a look at the Periodic
    Table of DevOps tools in the following figure: the category of AIOps was only
    added very recently, already listing a significant number of tools, such as Splunk,
    Datadog, Dynatrace, New Relic, and the Elastic ELK Stack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.6 – Snippet from the Periodic Table of DevOps Tools showing AIOps
    tools (Digital.ai)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_08_006.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.6 – Snippet from the Periodic Table of DevOps Tools showing AIOps tools
    (Digital.ai)
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s not easy to select the right tools. The reason for that is that these
    tools differ very much from each other. It depends on the angle that the enterprise
    takes to evaluate the proper tools and toolsets. Things to consider are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Tools that focus more on application and application performance management,
    rather than infrastructure components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SaaS or on-premises tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Native AI and ML or tools that require extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data-driven AI or AI that is also context-aware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Gartner publishes a magic quadrant every year to identify the leaders and promising
    newcomers in this emerging market. The report can be downloaded from Gartner's
    website at [https://www.gartner.com/en/documents/4000217/market-guide-for-aiops-platforms](https://www.gartner.com/en/documents/4000217/market-guide-for-aiops-platforms).
    Be aware that you or your employer will need to become a client to be able to
    download content from the Gartner site.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Obviously, more sophisticated tools will come at a price. The most important
    question an enterprise must ask itself is what it wants to get out of AIOps. That
    will drive the business case and possibly justify the investment.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was a deep dive into AIOps. This is a rather new domain, but very
    promising. We've learned how AIOps platforms are built and learn as they are implemented
    in enterprises. It's important to understand that you need a logical architecture
    to have a complete overview of how systems fulfill functionality and how they
    are related to other systems, without already knowing the full technical details
    of these systems.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we defined the key components of AIOps, being big data and machine or
    deep learning. AI only performs if it has access to enough relevant data on which
    it can execute analytic models. These models will teach the platform how to detect
    issues, anomalies, and other events, predict the impact on the IT landscape, find
    root causes faster, and eventually trigger actions. These actions can be automated.
    AIOps platforms will avoid a lot of tedious, repetitive work for operators, something
    that is called toil in SRE.
  prefs: []
  type: TYPE_NORMAL
- en: We've learned what the reference architecture of AIOps looks like and how an
    enterprise can successfully implement the system. In the last paragraph, we looked
    briefly at some popular tools in the field.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn how to integrate AIOps into DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What does the presentation layer in logical architecture do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AIOps platforms are able to detect deviations from expected system behavior
    through algorithms. What do we call this process of detecting deviations, a key
    feature of AIOps?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AIOps works with operational system data and data coming from events such as
    incidents and problems. What is this latter type of data referred to by Gartner?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False or true: data cleansing is essential in AIOps.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Pragmatic Enterprise Architecture*, by James V. Luisi, 2014'
  prefs: []
  type: TYPE_NORMAL
