- en: '*Chapter 10*: Making the Final Step to NoOps'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Is it possible to execute IT operations without hands-on operations? Research
    and advisory companies, such as Gartner and Forrester, foresee an IT future based
    on NoOps. The big idea behind NoOps is that literally everything can be automated.
    It means an even bigger role for AI, and something called **heuristic automation**.
    How can an enterprise move to NoOps, and what is the role of an architect in this
    field? We will discuss this in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: After completing this chapter, you will be able to explain NoOps as a concept
    and why enterprises should adopt the principles of NoOps. You will learn what
    heuristic automation is and how it's driving the architecture of NoOps. The most
    important lesson that you will learn is that NoOps is not simply about having
    no need for any operations at all.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the paradigm shift to NoOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the role of AI in NoOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an architecture for heuristic automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining the roadmap to NoOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the paradigm shift to NoOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapters, we discussed the introduction of **artificial intelligence**
    (**AI**) and **machine learning** (**ML**) into operations and development. In
    [*Chapter 9*](B17492_09_ePub_RK.xhtml#_idTextAnchor111), *Integrating AIOps in
    DevOps*, we learned how an enterprise can leverage AI and ML in DevOps pipelines.
    The reason to do this is to make a lot of manual tasks obsolete through intelligent
    automation. NoOps takes all of this one step further: automate IT systems completely
    so there''s no need for operators to manually intervene in the systems. How far
    away are we from that paradigm shift? In addition, *is it realistic?* We will
    discuss that in this section.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To answer the last question: NoOps seems to be more of an ideal than a real
    practice. The discussion around NoOps was initiated through the idea that teams
    could actually automate a lot of processes in development, especially regarding
    the deployment of applications. This started with services being provided as **Software
    as a Service** (**SaaS**) propositions, meaning an enterprise didn''t need to
    worry about maintaining the services anymore. Updates and upgrades in SaaS and
    **Platform as a Service** (**PaaS**) were taken care of by the provider. Getting
    software and maintaining applications became as easy as working with a smartphone:
    at night you put your phone away, the manufacturer of the phone updates your phone,
    and when the phone is started again in the morning, all of the applications still
    work. In reality, for this to happen, a lot of actions must be executed in the
    background. In other words, NoOps might be superficial.'
  prefs: []
  type: TYPE_NORMAL
- en: However, the idea of NoOps does deserve some credit. It's in line with the principles
    of DevOps and automating as much as possible in the development, deployment, and
    operation of code. According to Deloitte, NoOps was a logical evolution in automating
    IT tasks and shifting activities from operations to development, focusing on business
    outcomes. That's nothing new. DevOps and especially **Site Reliability Engineering**
    (**SRE**) have these as basic principles.
  prefs: []
  type: TYPE_NORMAL
- en: To be clear, NoOps is not the same as automated infrastructure provisioning.
    NoOps is about automated management of the full stack – applications, middleware,
    databases, and infrastructure. In terms of infrastructure, the concept of NoOps
    relies on infrastructure components that can be coded and controlled by code.
    Virtual machines might be an option, but these are still not very flexible in
    terms of automation of operations. Containers, and especially serverless solutions,
    are more logical.
  prefs: []
  type: TYPE_NORMAL
- en: We can automate coding, provisioning of infrastructure, deployment of APIs,
    and configurations. We can add technology that will detect issues and anomalies
    fast, and maybe even have systems automatically remediate these based on predefined
    policies. We might be able to automate one application completely, but the reality
    is that today's enterprise IT consists of complex ecosystems, within and outside
    the enterprise. This will make it hard, if not impossible, to really have NoOps
    in practice. On the contrary, operations are getting more complex. But then again,
    NoOps is not about getting rid of operations completely.
  prefs: []
  type: TYPE_NORMAL
- en: NoOps should be perceived as a concept and guidance in leveraging automation,
    saving costs, and speeding up developments, while also keeping systems stable,
    resilient, and unhindered by manual operational actions. NoOps will help architects
    with shift-left principles, injecting AI into operations, and also help in automating
    IT. We will explore shift-left and AI-enabled operations further in the next sections.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the role of AI in NoOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we discussed whether NoOps provides a realistic way
    of operating for future enterprises. We've concluded that NoOps should be seen
    as both a concept and a way of thinking to leverage automation for operations.
    It's not about getting rid of operations as a whole – IT environments in enterprises
    have become too complex for that. Still, they have the challenge of using their
    IT talents in the most optimized way.
  prefs: []
  type: TYPE_NORMAL
- en: IT talent is becoming scarce, since the market demand for skilled and trained
    engineers is increasing at high speed. Because of this scarcity, the costs of
    staff are also increasing. To keep costs down and still be able to work as agile
    as possible, enterprise architects will have to search for other ways to operate
    IT. IT talent can then fully focus on developments.
  prefs: []
  type: TYPE_NORMAL
- en: However, operations will be needed. We need people to look after systems, and
    make sure that these systems are running stably. You can't leave it all to machines.
    For that reason, it's good to narrow the definition of NoOps down a little bit.
    We can define NoOps as the stage where dedicated operators are no longer required
    to manage IT. It would then be a logical step in the evolution of enterprise DevOps,
    where teams operate as one in development, deployment, and operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two things that will play an important role to get this stage:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Adopting shift-left**: In [*Chapter 7*](B17492_07_ePub_RK.xhtml#_idTextAnchor086),
    *Understanding the Impact of AI on DevOps*, we concluded that shift-left is also
    applicable to both deployment and operations in DevOps. With automated templates,
    pre-approved patterns, and processes, we can start testing in an early stage of
    development and deploy consistent, stable code to the next stages (including production).
    It will certainly lead to less work for operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operators will typically define how production is monitored, whereas developers
    control this themselves in *sandboxes*, development, and testing environments.
    In NoOps, this is shifted to the very beginning of the whole cycle – the DevOps
    teams decide how code is tested and monitored. The team is end-to-end responsible.
    The distinction between operators and developers becomes obsolete.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Artificial intelligence and machine learning**: As we''ve seen with AIOps,
    AI and ML will help in detecting issues quickly, and can even be trained to give
    recommendations or initiate actions such as these:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '- **Automated software life cycle management**: AI will help in recognizing
    when software needs to be updated and will take care of the update process, keeping
    the services that run on the software operational and stable. Think of the smartphone
    analogy in the first section. The phone is updated, and when the user switches
    it back on, all functionality will normally be there again. This is enabled by
    the fact that the phone *knows* the dependencies in different apps, along with
    the underlying protocols and code. It uses AI for this.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- **Automated remediation**: AI can trigger automated actions to fix issues
    even before the issue materializes. Predictive maintenance is enabled.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- **Auto-healing**: When an unexpected issue occurs, AI will detect it, know
    how to solve it from history or by learning, and eventually apply the fix. The
    process of solving the problem is referred to as auto-healing. Be aware that all
    these actions – life cycle management, remediation, and healing – need to be logged
    so every change is traceable.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, we have discussed automation in DevOps, introduced AI in DevOps, and also
    discussed leveraging automation even further in NoOps. The foundation under this
    level of automation is heuristic automation. In the next section, we will study
    architecture for heuristic automation.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an architecture for heuristic automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, let''s get a definition of heuristic: in the literature, it is referred
    to as applying a solution to an issue without the aim of being the optimal solution,
    but sufficient to fix the immediate problem that was discovered. *Trial and error*
    would certainly match this definition. The Hungarian mathematician George Pólya
    used the term in his book, *How to Solve It*, first published in 1945\. He provided
    some practical ways of solving problems.'
  prefs: []
  type: TYPE_NORMAL
- en: 'One of his principles is commonly used in architecture applying ML: if you
    don''t have a solution, assume that you have a solution and see what it does.
    Keep the good stuff and analyze the bits that didn''t work well. Try the iterated
    solution again and learn from it. This is the base of heuristic automation. It
    uses heuristic learning that can be leveraged through AI that is able to recognize
    and learn from patterns. AI will use algorithms and automation – it constantly
    learns and adapts the analytics, up until the point where the solution is optimized.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will need to understand the principle of learning. AI and ML in automation
    typically use deduction. This is shown in the following figure. There are more
    learning principles, such as induction and abduction, but these do not really
    add value to the goal of automation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1 – Principle of deduction in ML'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_10_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.1 – Principle of deduction in ML
  prefs: []
  type: TYPE_NORMAL
- en: With deduction, the system will analyze an event by observing and comparing
    it with previous experiences, examples, and common theories. Based on that analysis,
    it will reach a conclusion. A rule base will tell the system what to do next.
    Obviously, this rule base is dynamic, since the system will add things it has
    learned to the rule base.
  prefs: []
  type: TYPE_NORMAL
- en: 'With that in mind, we can define the components for heuristic automation:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Event sources**: Aggregating data from events throughout systems and system
    components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data on patterns and correlations**: Repository with known patterns and correlations
    between systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Analytics engine**: Algorithms and rules enabling analytics and the prediction
    of outcomes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Analytics processes**: The processes that tell the system what to do if anomalies
    are detected, and what solutions should be applied from the rule base.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dynamic rule base**: Possible solutions based on induction patterns. This
    is a dynamic process, since solutions will continuously be improved. Based on
    the findings, the solutions are updated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The logical architecture for heuristic automation is shown in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2 – Logical architecture for heuristic automation'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_10_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.2 – Logical architecture for heuristic automation
  prefs: []
  type: TYPE_NORMAL
- en: 'Heuristic automation will enable the enterprise to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Identify and solve issues without human intervention through the automated analysis
    of complex systems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recognize, identify, and understand relationships between systems and predict
    the impact of issues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solve issues through ML using various data sources and real-time analytics.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We stress once more that NoOps and heuristic automation by no means intends
    to replace operators. It will help them in solving issues faster, as well as helping
    businesses with more stable and resilient systems.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the roadmap to NoOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NoOps is not a leap of faith. As with DevOps and AIOps, any next step requires
    a plan and a roadmap. Using the principles of heuristic automation and AIOps,
    we can leverage automation for intelligent automation, collaborating with cloud-native
    automation, and automated application deployment in CI/CD pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows how NoOps consists of three major components. These
    three components are the roadmap to get to a level of automation where dedicated
    operations are no longer required. DevOps teams are end-to-end responsible for
    the development, deployment, running, and maintenance of the code, supported by
    fully automated processes and AI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.3 – Components of NoOps'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_10_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.3 – Components of NoOps
  prefs: []
  type: TYPE_NORMAL
- en: 'The end state is predictive automation using predictive analytics that analyzes
    current data to eventually make predictions for the future. It includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Scaling for future needs, for instance by analyzing usage of software, predicting
    future use, and actioning this in scaling the systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Foreseeing business trends and preparing systems for this, including preparing
    code by collecting and analyzing requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code suggestions for improving code, fulfilling predicted future needs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A very simplified roadmap to NoOps could look like the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.4 – Simplified representation of NoOps roadmap'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_10_004.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.4 – Simplified representation of NoOps roadmap
  prefs: []
  type: TYPE_NORMAL
- en: Adopting NoOps requires both the right mindset and full support from the enterprise's
    management. Management will need to learn to trust automation. Only when this
    trust is established will they be willing to invest in the right tools. This will
    take time, and that timeline needs to be realistic, as reflected in the roadmap.
    Lastly, be prepared for pushback and setbacks. NoOps and full automation are more
    about adoption than technology, and adoption is a process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Is NoOps a leap of faith? Could there be automation without human intervention?
    Think of this: already in 2018, the Open Road project has been defined, studying
    the possibilities for computers to design their own new generation of chips. In
    June 2021, the science magazine Nature published an article stating that computers
    no longer need humans to design new chips. Using AI, computers can design chips
    in a matter of hours, whereas humans would need months for the same outcome. The
    foundation technology that was used for this was ML, and the use of cloud-native
    analytics tools in Google Cloud to run parallel sessions and achieve predictability
    in the outcomes of the design.'
  prefs: []
  type: TYPE_NORMAL
- en: In this part of the book, we extensively discussed the approach for DevOps,
    SRE, and AIOps. All of these methodologies leverage automation in development
    and operations, to the point that human intervention might become obsolete. The
    subsequent question, then – is this safe? Can we really leave IT to automation
    and AI? How secure will our systems then be? We need to map our DevOps strategy
    to security standards, including industry security frameworks and enterprise proprietary
    security policies. These need to be embedded in DevOps. This is the domain of
    DevSecOps. In the third part of this book, we will discuss this further.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed the concept of NoOps – no operations. We discovered
    that the term might be misleading, since NoOps doesn't mean that the enterprise
    will no longer need operations at all. NoOps is a concept that leverages automation
    to its maximum potential. By automating development, deployment, and operations,
    scarce IT talent can focus on new features, since NoOps will help them by identifying
    and solving issues in IT systems fast. We've learned that NoOps (like AIOps) uses
    AI and ML. But NoOps also means that enterprises will need to embrace the shift-left
    mentality.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ve also learned that NoOps requires a specific type of architecture for
    heuristic automation: applying iterative solutions, learning from these solutions,
    and continuously improving them. We also discussed the different components of
    heuristic automation. In the final section, we explored a possible roadmap from
    DevOps to NoOps. We concluded that we already have the technology available, but
    that enterprises will need to adopt it to really leverage full automation and,
    with that, the concept of NoOps.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next part of this book, we will examine an important topic related to
    enterprise DevOps – security. We will learn how to integrate security with DevOps
    in DevSecOps.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A system detects an unexpected issue, knows how to solve it from history or
    by learning, and eventually applies the fix automatically. What do we call this
    type of action?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What type of learning is typically used by AI-driven systems to automate remediating
    actions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: predictive automation is applied to scaling that predicts the
    future usage of systems.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Blog about NoOps on CIO.com by Mary K. Pratt: [https://www.cio.com/article/3407714/what-is-noops-the-quest-for-fully-automated-it-operations.html](https://www.cio.com/article/3407714/what-is-noops-the-quest-for-fully-automated-it-operations.html
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Blog about heuristic automation of infrastructure by Ramkumar Balasubramanian:
    [https://www.linkedin.com/pulse/heuristic-automation-infrastructure-ramkumar-balasubramanian/](https://www.linkedin.com/pulse/heuristic-automation-infrastructure-ramkumar-balasubramanian/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
