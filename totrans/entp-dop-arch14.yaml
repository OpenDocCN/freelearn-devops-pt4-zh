- en: '*Chapter 11*: Understanding Security in DevOps'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第11章*：理解DevOps中的安全性'
- en: 'You can''t talk about the cloud, modern apps, and—for that matter—digital transformation
    without talking about security. A popular term is *security by design*. But even
    security by design needs to be embedded in the enterprise architecture. It also
    applies to the DevOps cycle: DevOps needs to have *security by design*. Before
    we can discuss this and principles such as zero-trust, we need to get a good understanding
    of security first and how it''s impacting the DevOps practice. This chapter provides
    an introduction to security in DevOps.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不谈论安全性，你无法谈论云、现代应用程序，甚至数字化转型。一个流行的术语是*安全设计*。但即使是安全设计，也需要嵌入企业架构中。它同样适用于DevOps周期：DevOps需要有*安全设计*。在我们讨论这个问题以及零信任等原则之前，我们首先需要深入理解安全性及其对DevOps实践的影响。本章将介绍DevOps中的安全性。
- en: After completing this chapter, you will have learned why it's important to include
    security in the enterprise architecture and how an architect can collect and assess
    risks, and be able to identify what specific risks are in DevOps. You will also
    learn about setting security controls and what the main topics are that need to
    be addressed in DevSecOps.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，你将了解到为何在企业架构中包含安全性非常重要，以及架构师如何收集和评估风险，并能够识别DevOps中的具体风险。你还将学习设置安全控制措施，以及需要在DevSecOps中解决的主要问题。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: Embedding security in enterprise architecture
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将安全性嵌入企业架构中
- en: Understanding security risks in DevOps
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解DevOps中的安全风险
- en: Getting DevSecOps-savvy
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提升DevSecOps的安全意识
- en: Defining requirements and metrics
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义需求和指标
- en: Embedding security in enterprise architecture
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将安全性嵌入企业架构中
- en: 'It''s a topic you can read about practically every day: businesses that have
    been hit by some sort of hack or attack. The smallest hole in a system will be
    found by criminals and exploited. Currently (in 2021), the most *popular* attacks
    are the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你几乎每天都能看到的话题：受到某种黑客攻击或袭击的企业。系统中的任何一个小漏洞都会被犯罪分子发现并加以利用。目前（2021年），最*流行*的攻击类型如下：
- en: Ransomware
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 勒索软件
- en: Phishing
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络钓鱼
- en: Denial of service
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拒绝服务攻击
- en: The first two, ransomware and phishing, really exploit holes in the defense
    layer of enterprises. The last is basically about bombing a system so heavily
    with traffic that the system eventually collapses. All three are fairly easy to
    execute. In fact, you can buy software and even services that will launch an attack
    on the targeted address. And no, you don't have to go to the dark web for that.
    It's out there, in the open, on the *normal* internet.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 前两种攻击，勒索软件和网络钓鱼，实际上是利用了企业防御层的漏洞。最后一种攻击基本上是通过大规模的流量攻击系统，直到系统崩溃。这三种攻击都相对容易执行。事实上，你可以购买软件，甚至购买可以针对特定地址发起攻击的服务。而且不，你不需要去暗网。它们就在开放的*普通*互联网中。
- en: How can an enterprise protect itself from these attacks? First of all, it's
    important to realize that the IT of any enterprise has become more complex, as
    we have seen in previous chapters. IT systems are no longer only in one privately
    owned data center, but it has become an ecosystem using the public cloud, private
    stacks in privately owned data centers or colocations, **Platform as a Service**
    (**PaaS**), and **Software as a Service** (**SaaS**). Security must be intrinsic
    in every service that an enterprise uses.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 企业如何保护自己免受这些攻击？首先，必须认识到，任何企业的IT系统已经变得越来越复杂，正如我们在前几章所看到的那样。IT系统不再仅仅存在于一个私有的数据中心，它已经变成了一个使用公共云、私有数据中心或托管服务中的私有堆栈、**平台即服务**（**PaaS**）和**软件即服务**（**SaaS**）的生态系统。安全性必须在企业使用的每项服务中内嵌。
- en: 'The four traditional principles of enterprise security are as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 企业安全的四个传统原则如下：
- en: Prevention
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预防
- en: Detection
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测
- en: Correction
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修正
- en: Direction
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方向
- en: 'The first three are about detecting security issues, correcting them with mitigating
    actions, but obviously, it''s better if issues can be prevented—hence, prevention
    is priority one. Direction is about guidelines and guardrails: enterprises defining
    policies and security standards to keep all systems secure. That''s where the
    fifth principle comes in: consistency. In an enterprise with various divisions,
    clusters, and teams, you need to ensure that security is implemented in every
    corner of that enterprise. You can''t have one division or team not adhering to
    the enterprise''s security. In other words: the strength of the chain is defined
    by the weakest link.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 前三个是关于检测安全问题，并通过缓解措施加以纠正，但显然，如果问题能够预防，效果会更好——因此，预防是第一优先。方向性是关于指导方针和警戒线：企业制定政策和安全标准以确保所有系统的安全。这就是第五个原则——一致性——的作用所在。在一个拥有多个部门、集群和团队的企业中，你需要确保安全措施在企业的每个角落都得到实施。不能有任何一个部门或团队不遵守企业的安全要求。换句话说：链条的强度由最弱的环节决定。
- en: 'So, where do we start with enterprise security? Enterprise architecture frameworks
    can help to get you started. An example is **Sherwood Applied Business Security
    Architecture** (**SABSA**), which offers a methodology to define security architecture.
    It consists of six layers, as shown in the following figure:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们从哪里开始进行企业安全呢？企业架构框架可以帮助你入门。一个例子是**Sherwood 应用商业安全架构**（**SABSA**），它提供了一种定义安全架构的方法论。它由六个层次组成，如下图所示：
- en: '![Figure 11.1 – The SABSA model for security architecture'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.1 – SABSA 安全架构模型'
- en: '](img/B17492_11_001.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_11_001.jpg)'
- en: Figure 11.1 – The SABSA model for security architecture
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1 – SABSA 安全架构模型
- en: '**Information Systems Audit and Control Association** (**ISACA**) combines
    SABSA with the generally more known **Control Objectives for Information and Related
    Technology** (**COBIT**) five principles. These five principles are as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**信息系统审计与控制协会**（**ISACA**）将 SABSA 与更为人知的**信息与相关技术控制目标**（**COBIT**）五个原则结合起来。这五个原则如下：'
- en: Meeting the needs of the stakeholders of the enterprise
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 满足企业利益相关者的需求
- en: Covering the enterprise end to end
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 覆盖整个企业端到端
- en: Applying a single integrated framework
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用统一的集成框架
- en: Enabling a holistic approach
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现整体方法
- en: Separating governance from management
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将治理与管理分开
- en: 'The combination of SABSA and COBIT leads to a top-down approach to define the
    architecture for the entire enterprise. The enterprise architect will have to
    execute at a minimum the following steps, in cooperation with the chief security
    architect:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: SABSA 与 COBIT 的结合形成了一种自上而下的方式，用于定义整个企业的架构。企业架构师必须至少与首席安全架构师合作执行以下步骤：
- en: 'Identify the business goals: This is the first stage in enterprise architecture.
    Enterprise architecture always starts with the business strategy, goals, and objectives.'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定业务目标：这是企业架构的第一阶段。企业架构总是从商业战略、目标和宗旨开始。
- en: Identify the business risks.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定业务风险。
- en: Identify the required controls to manage risks.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定管理风险所需的控制措施。
- en: 'Design and implement these controls, for instance, the following:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设计并实施这些控制措施，例如：
- en: '- Security governance processes'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 安全治理流程'
- en: '- Access controls'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 访问控制'
- en: '- Incident management processes'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 事件管理流程'
- en: '- Certificate management processes'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 证书管理流程'
- en: Design physical architecture for, among others, used platforms, networks, operating
    systems, and datastores. The physical architecture should also include the cloud
    platforms and services such as PaaS and SaaS and DevOps practices such as CI/CD.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设计物理架构，包括使用的平台、网络、操作系统和数据存储等。物理架构还应包括云平台和服务，如 PaaS 和 SaaS，以及 DevOps 实践，如 CI/CD。
- en: Validate business and physical architecture to the compliancy and security standards
    and protocols the enterprise must adhere to.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证业务和物理架构是否符合企业必须遵守的合规性和安全标准与协议。
- en: 'Define and implement operation architecture, for example, the following:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义并实施操作架构，例如：
- en: '- Configuration management'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 配置管理'
- en: '- Monitoring'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 监控'
- en: '- Logging'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 日志记录'
- en: '- Change management'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- 变更管理'
- en: Note
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The preceding provided list is not meant to be exhaustive. In the *Further reading*
    section, we included a link to the ISACA journal about enterprise security architecture.
    In that journal, you will find more detail on the steps as described, using SABSA
    and COBIT.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述提供的列表并不意味着穷尽。在*进一步阅读*部分，我们包含了一个关于企业安全架构的ISACA期刊的链接。在该期刊中，你将找到更多关于使用SABSA和COBIT描述的步骤的详细信息。
- en: An important topic in defining the security architecture is understanding risks.
    What are the risks, which systems are at risk, and what is the impact on the enterprise
    and its business? DevOps brings along its own risks. We will discuss this in the
    next section.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义安全架构中一个重要的主题是理解风险。哪些系统面临风险，对企业及其业务的影响是什么？DevOps带来了自己的风险。我们将在下一节讨论这个问题。
- en: Understanding security risks in DevOps
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解DevOps中的安全风险
- en: 'There''s a classic cartoon on the internet. It shows a boxing ring. The speaker
    announces an immense set of security tools and rules in the left corner of the
    ring. Then, in the right corner, he announces Dave: a nerdy-looking guy, wearing
    a shirt saying *human error*. The message: you can have every security system
    in the world, but it won''t stop human error. And development is still mainly
    work done by humans. Humans make mistakes. Is that the biggest risk in DevOps
    or are there other specific risks that need attention? We will discuss this in
    this section.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网上有一个经典的卡通。它展示了一个拳击比赛场地。发言人在拳台左角宣布了一套庞大的安全工具和规则。然后，在右角，他宣布了戴夫：一个穿着写着*人为错误*的衬衫、看起来呆萌的家伙。这则卡通传达的信息是：你可以拥有世界上所有的安全系统，但这并不能阻止人为错误。而开发仍然主要是人类的工作。人类会犯错。这是否是DevOps中最大的风险，或者还有其他需要关注的特定风险？我们将在本节讨论这个问题。
- en: 'To answer the question of whether DevOps implies specific risks, yes. Implementing
    DevOps without paying attention to security will definitively increase the risk
    of attacks, simply by raising the attack surface of systems. There are three main
    topics that need to be addressed:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 对于是否DevOps意味着特定风险的问题，答案是肯定的。在不关注安全性的情况下实施DevOps将明显增加攻击的风险，仅仅是通过增加系统的攻击面。有三个主要的主题需要解决：
- en: '**Access management**: DevOps teams likely use code repositories that are manually
    accessed either by developers or by tools. Code needs to be protected, even when
    operating in open source mode, and code is shared so that more developers can
    contribute to the code. Even in that case, companies would want to regulate access
    to code so that it doesn''t get out into the open, or worse, malicious code is
    injected.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**访问管理**：DevOps团队可能使用开发者或工具手动访问的代码仓库。即使在开源模式下操作，代码也需要保护，并且共享代码以便更多开发者能够贡献代码。即使如此，公司也希望规范对代码的访问，以防止泄露，甚至更糟糕的是注入恶意代码。'
- en: 'You need a role-based access model to the code repositories: who has read rights
    and write rights and who has full access—and for what reason?'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你需要一个基于角色的访问模型来管理代码仓库：谁有读取权限和写入权限，以及谁有完全访问权限——出于什么原因？
- en: Keep track of the accounts. For example, GitHub companies can have internal
    repositories that only assigned staff—or tools—of that company can have access
    to. Within that internal repository, the administrator delegates the roles. Credentials
    are set according to the security policies of the company. A recommended way to
    keep access control is to implement **privileged access management** (**PAM**).
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 跟踪账户。例如，GitHub公司可以拥有只有分配给该公司的员工或工具才能访问的内部仓库。在该内部仓库中，管理员委派角色。凭据根据公司的安全政策设置。保持访问控制的推荐方法是实施**特权访问管理**（**PAM**）。
- en: Because of DevOps, teams will have to create more privileged accounts that are
    shared—either manually or automatically—among developers and tools. These accounts
    also involve service accounts, encryption keys, SSH keys, and API certificates
    that are all kept in the repositories. Unauthorized access to these repositories
    is disastrous.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于DevOps，团队将不得不创建更多特权账户，这些账户会在开发者和工具之间手动或自动共享。这些账户还涉及服务账户、加密密钥、SSH密钥和API证书，所有这些都保存在仓库中。对这些仓库的未经授权访问是灾难性的。
- en: A PAM solution offers a way to authorize and audit any activity in the DevOps
    cycle. Most of these solutions use key vaults to keep access details secured and
    to authenticate and authorize users before they can actually access repositories.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: PAM解决方案提供了一种授权和审计DevOps周期中任何活动的方式。大多数这些解决方案使用密钥保管库来保护访问细节，并在用户能够实际访问仓库之前对其进行身份验证和授权。
- en: '**Missing guardrails and guidelines for a DevOps way of working and tools**:
    Access to code is one thing; the next thing is: what do we do with that code?
    It''s very unlikely that enterprises would allow DevOps teams to just commit and
    push new code to production. First of all, the enterprise or chief architect—in
    most larger enterprises, there will be a group of leading architects—really needs
    to think of the preferred toolset.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺乏 DevOps 工作方式和工具的护栏与指导方针**：访问代码是一回事，接下来我们该如何处理这些代码？企业通常不会允许 DevOps 团队直接提交并将新代码推送到生产环境。首先，企业或首席架构师——在大多数大公司中会有一群主导架构师——需要仔细思考选择的工具集。'
- en: It's important that every DevOps team uses that toolset instead of implementing
    tools of their own choice, however tempting it might be. The issue is that DevOps
    toolsets do not have a common standard for security policies, such as access control.
    That is something that the enterprise itself needs to establish and implement,
    which is easier if you go with one toolset.
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个 DevOps 团队都应使用统一的工具集，而不是根据个人喜好选择自己的工具，尽管这可能很诱人。问题在于，DevOps 工具集没有统一的安全策略标准，例如访问控制。这是企业自身需要建立和实施的内容，如果选择统一的工具集会更容易做到这一点。
- en: 'The same applies to the way of working: that needs to be consistent throughout
    the entire enterprise; we can''t stress that enough. All of this has to be defined
    in a preferred technology list and DevOps guardrails and principles. Typically,
    there will be a master branch. New code will first be pushed to a separate branch—often
    referred to as the feature branch—where it''s tested. After the validated, positive
    test results, the code is merged to the master. The master code or main branch
    is again stored in the repository. That principle is shown in the following figure:'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 同样适用于工作方式：整个企业的工作方式必须保持一致，我们无法过度强调这一点。所有这些必须在首选技术列表和 DevOps 护栏及原则中定义。通常，会有一个主分支。新代码会首先推送到一个独立的分支——通常称为特性分支——并在该分支上进行测试。经过验证的正面测试结果后，代码会合并到主分支。主代码或主分支随后会存储在代码仓库中。这个原则在下图中展示：
- en: '![Figure 11.2 – Principle of merging new code'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.2 – 合并新代码的原则'
- en: '](img/B17492_11_002.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_11_002.jpg)'
- en: Figure 11.2 – Principle of merging new code
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2 – 合并新代码的原则
- en: The guardrails define when code is pulled from the repository, how it's committed
    to feature branches, and how it's tested and eventually released for merging with
    the master.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 护栏定义了何时从代码仓库中提取代码，如何将其提交到特性分支，如何进行测试，最终如何发布并合并到主分支。
- en: '**Focus on the development process and velocity, neglecting security**: DevOps
    is all about gaining speed in development. That should never be an excuse to neglect
    security. In the following section, we will illustrate that with a real-life example.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**专注于开发过程和速度，而忽视安全**：DevOps 主要是为了提升开发速度。绝不能以此为借口忽视安全。在接下来的章节中，我们将通过一个实际案例来说明这一点。'
- en: 'To summarize, DevOps security is about three topics:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，DevOps 安全包括三个主题：
- en: '**Traceability**: Track every action in the DevOps cycle and pipelines.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可追溯性**：跟踪 DevOps 循环和管道中的每一个操作。'
- en: '**Auditability**: Ensure that systems that are developed in DevOps are compliant
    with the security standards of the enterprise and the industry frameworks that
    the enterprise is submitted to. [*Chapter 13*](B17492_13_ePub_RK.xhtml#_idTextAnchor159),
    *Working with DevSecOps Using Industry Security Frameworks*, talks about that
    in more detail.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可审计性**：确保在 DevOps 中开发的系统符合企业的安全标准以及企业所遵循的行业框架。[*第13章*](B17492_13_ePub_RK.xhtml#_idTextAnchor159)，*使用行业安全框架与
    DevSecOps 协作*，对此进行了更详细的讨论。'
- en: '**Visibility**: Have solid monitoring systems in place.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可见性**：建立可靠的监控系统。'
- en: Now we have a good understanding of the security risks in DevOps. In the next
    section, we will discuss how to get started with DevSecOps.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经很好地理解了 DevOps 中的安全风险。在下一节中，我们将讨论如何开始实施 DevSecOps。
- en: Getting DevSecOps-savvy
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 成为 DevSecOps 专家
- en: Security starts with access to the repositories, the source of code where the
    DevOps cycle begins. As we've learned so far, we want to automate as much as we
    can in development, testing, and deployment. Next, by adopting DevOps, businesses
    want to speed up the development and deployment of new applications and features.
    Speed and agility might lead to security risks, because code is not sufficiently
    tested or, worse, it's pushed to production without applying the proper security
    policies to gain time. Let's illustrate that with a real-life example.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 安全从对代码仓库的访问开始，代码仓库是 DevOps 循环开始的源头。正如我们到目前为止所学的，我们希望尽可能地自动化开发、测试和部署。接下来，通过采用
    DevOps，企业希望加快新应用和功能的开发与部署。速度和敏捷性可能会导致安全风险，因为代码未经过充分测试，或者更糟糕的是，它在没有应用适当的安全策略的情况下被推送到生产环境，以节省时间。让我们通过一个实际例子来说明这一点。
- en: Developers fork code from the repository and start working on that code. At
    a certain stage, it needs to be pushed to designated infrastructure to run that
    code. In development, the code runs fine, since it's not interfacing yet with
    production systems. As soon as the code is ready to release in production, it
    will need to establish those connections. Commonly, in enterprises, specific routing
    and firewall ports need to be opened to allow for that connectivity and transfer
    of traffic.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员从仓库中分叉代码并开始在该代码上工作。在某个阶段，代码需要推送到指定的基础设施上以运行。在开发阶段，代码运行正常，因为它尚未与生产系统进行交互。一旦代码准备好发布到生产环境，它将需要建立这些连接。通常，在企业中，需要打开特定的路由和防火墙端口，以便实现连接和流量传输。
- en: 'Firewall rules and, more specifically, opening ports and assigning firewall
    rules are typically not done automatically; security engineers will want to assess
    the requests before they approve for settings to be implemented. In a lot of cases,
    this is really slowing down the whole DevOps and agile process. But in almost
    every enterprise this is the practice: security being the last stop before final
    deployment and not embedded in the DevOps cycle. Bypassing this is, however, a
    bad idea. It will increase the attack surface of code and systems.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 防火墙规则，特别是开放端口和分配防火墙规则，通常不会自动执行；安全工程师需要评估请求，然后批准实施设置。在很多情况下，这实际上会减缓整个 DevOps
    和敏捷流程。但几乎在每个企业中，做法都是：安全是最终部署前的最后一道关卡，而不是嵌入到 DevOps 循环中。然而，绕过这一环节是一个糟糕的主意。这将增加代码和系统的攻击面。
- en: 'Bottom line: security must be embedded in DevOps—it makes development and deployment
    a shared responsibility of developers, operators, and security engineers. Security
    is not just the responsibility of the security team, but of the whole DevOps team.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结论：安全必须嵌入到 DevOps 中——它使得开发和部署成为开发人员、运维人员和安全工程师的共同责任。安全不仅是安全团队的责任，而是整个 DevOps
    团队的责任。
- en: Starting points for DevSecOps
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevSecOps 的起点
- en: Security scanning starts as soon as code is pulled from repositories. The first
    thing to do is to have a **role-based access control** (**RBAC**) model applied
    to the repository. RBAC defines who has access and to what level. Is an identity
    allowed to only view code, or is full access granted to pull code, change code,
    and add code to the repository? Be aware that this doesn't necessarily have to
    be a person. DevOps tools are *identities* too and you need to think of the required
    access to these tools.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 安全扫描从代码从仓库中拉取的那一刻就开始。第一步是对仓库应用**基于角色的访问控制**（**RBAC**）模型。RBAC 定义了谁可以访问以及访问的级别。身份是否只允许查看代码，还是授予完全访问权限，能够拉取代码、修改代码和向仓库添加代码？请注意，这不一定是指一个人。DevOps
    工具也是*身份*，你需要考虑这些工具所需的访问权限。
- en: Throughout the DevOps cycle, code is constantly reviewed and scanned and tested
    on vulnerabilities. A very simple example is if connectivity to the internet is
    prohibited from an application and the code shows a pointer to port `80`, it might
    be flagged as a risk. It might be allowed if an application is relying on a service
    to which it connects through the internet, but then that needs to be verified
    against the security policies. Scanning, testing, and validation need to be done
    as early in the development process as possible. Also, here, the shift-left principle
    applies.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个 DevOps 循环中，代码会不断地被审查、扫描和测试漏洞。一个非常简单的例子是，如果某个应用禁止访问互联网，而代码中指向了端口 `80`，它可能会被标记为风险。如果应用依赖于一个通过互联网连接的服务，可能会被允许，但这需要根据安全策略进行验证。扫描、测试和验证需要尽早在开发过程中进行。此外，这里也适用“左移”原则。
- en: The greatest benefit of embedding security in DevOps is the fact that we can
    also have automation to do checks and even apply patches and fixes as soon as
    a vulnerability is discovered or acknowledged. For instance, if a new release
    of a code base contains patches for **Common Vulnerabilities and Exposures** (**CVEs**),
    this can be injected into the security baseline and integrated with security testing
    procedures. Code is automatically checked against this new baseline. Software
    can execute tests, validate whether code is compliant, and if the code does not
    pass, flag in the case of issues or trigger automated remediation by installing
    the patches. This doesn't only apply to application code, but certainly also for
    the used infrastructure, operating systems, and middleware.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DevOps 中嵌入安全性最大的好处是，我们还可以实现自动化检查，甚至在发现或确认漏洞时立即应用补丁和修复。例如，如果代码库的新版本包含针对**常见漏洞和暴露**（**CVEs**）的补丁，这可以被注入到安全基线中，并与安全测试程序集成。代码会自动根据这个新基线进行检查。软件可以执行测试，验证代码是否符合要求，如果代码未通过，则标记出问题或触发自动修复程序来安装补丁。这不仅适用于应用程序代码，还适用于所使用的基础设施、操作系统和中间件。
- en: DevSecOps using containers
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用容器的 DevSecOps
- en: 'Another example: a growing number of enterprises work with containers for code
    distribution. Just like virtual machines, containers also need to be compliant
    with security policies. Enterprises will likely use hardened containers, setting
    policies for the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个例子：越来越多的企业使用容器进行代码分发。就像虚拟机一样，容器也需要符合安全政策。企业很可能会使用强化的容器，为以下内容设置策略：
- en: '**Hardened host operating systems**: Often, these are Linux operating systems
    that protect the host from breaches by infected containers. Examples are security
    packages that are applied to Linux hosts, such as SELinux and seccomp; these Linux
    distributions allow **Mandatory Access Control** (**MAC**) to the kernel settings.
    Enterprises can opt to develop their own **Linux Security Modules** (**LSMs**).'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**强化的主机操作系统**：通常，这些是 Linux 操作系统，通过防止被感染的容器侵入来保护主机。例如，应用于 Linux 主机的安全包，如 SELinux
    和 seccomp；这些 Linux 发行版允许对内核设置实施**强制访问控制**（**MAC**）。企业可以选择开发自己的**Linux 安全模块**（**LSMs**）。'
- en: '**Container runtime security policies**: Setting specific permissions for mounting
    containers, privileged containers, disabling SSH in containers, settings for binding
    ports, and exposing ports.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器运行时安全策略**：为挂载容器、特权容器、禁用容器中的 SSH、端口绑定设置以及暴露端口等设置特定权限。'
- en: 'The following figure shows the principle of CVE-based security scanning for
    containers:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了基于 CVE 的容器安全扫描原理：
- en: '![Figure 11.3 – Concept of Docker security scanning'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.3 – Docker 安全扫描概念'
- en: '](img/B17492_11_003.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_11_003.jpg)'
- en: Figure 11.3 – Concept of Docker security scanning
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.3 – Docker 安全扫描概念
- en: The scan is done with the data from the CVE database. This can be data coming
    from, for example, **National Institute of Standards and Technology** (**NIST**),
    MITRE, or suppliers such as Microsoft who also issue CVE notifications for their
    products and services. After the scan, Docker *signs* the image that is pulled
    from the repository. For this, it uses Docker Notary, which verifies the image
    and prevents developers from using images that are not signed.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描是使用来自 CVE 数据库的数据进行的。这些数据可以来自例如**国家标准与技术研究院**（**NIST**）、MITRE 或像微软这样的供应商，后者也为其产品和服务发布
    CVE 通知。扫描完成后，Docker *签名* 从仓库中拉取的镜像。为此，Docker 使用 Docker Notary，它验证镜像并防止开发人员使用未签名的镜像。
- en: 'We now have hardened, validated containers with specific privileges set. Now,
    the next most important thing is to control the settings; once the privileges
    to a container are set, there should be no way to alter these privileges. Containers
    should not be able to gain new privileges; otherwise, they are not hardened. In
    Docker, there''s a simple way to check and set this. Using the following command,
    you can list all the security settings for containers:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经拥有了强化、验证过的容器，并设置了特定的权限。接下来最重要的是控制这些设置；一旦为容器设置了权限，就不应有任何方式更改这些权限。容器不应能够获得新权限，否则就不是强化过的容器了。在
    Docker 中，有一种简单的方法来检查和设置这个。使用以下命令，你可以列出所有容器的安全设置：
- en: '[PRE0]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It will return messages on hardening of the containers, creation of separate
    partitions for containers, and audit configuration for Docker files and directories.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 它将返回有关容器强化、为容器创建独立分区以及 Docker 文件和目录审计配置的消息。
- en: 'Next, set the no new privileges option:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，设置不授予新特权选项：
- en: '[PRE1]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Obviously, these settings need to be continuously evaluated. DevSecOps is—as
    with DevOps—a repeatable, continuous process, aiming for continuous improvement.
    This means that goals, requirements, newly identified risks, and controls to mitigate
    these risks need to be assessed and addressed as enterprises adopt DevSecOps.
    We will discuss this in the final section of this chapter.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这些设置需要不断评估。DevSecOps 与 DevOps 一样，是一个可重复的、持续的过程，旨在实现持续改进。这意味着在企业采用 DevSecOps
    时，目标、需求、 newly identified risks（新识别的风险）以及减轻这些风险的控制措施需要进行评估和处理。我们将在本章的最后一部分讨论这一点。
- en: Defining requirements and metrics
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义需求和指标
- en: In the first section of this chapter, we discussed the steps that an architect
    must take to define enterprise security. In this section, we will explain how
    requirements and metrics can be collected, validated, and translated into controls
    and KPIs.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第一部分，我们讨论了架构师必须采取的步骤来定义企业安全。在本部分，我们将解释如何收集、验证需求和指标，并将其转化为控制措施和关键绩效指标（KPIs）。
- en: Business goals
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 业务目标
- en: 'We''ve talked about this in [*Chapter 1*](B17492_01_ePub_RK.xhtml#_idTextAnchor013),
    *Defining the Reference Architecture for Enterprise DevOps*, but obviously, it''s
    important to understand the goals a business wants to achieve. What markets are
    they in, how do they serve customers in these markets, and what is the product
    portfolio? It does make a huge difference if a business is operating in financial
    products or healthcare. Their markets define the risk level. The risk for a bank
    or an investment company could be mainly financial, whereas for healthcare, the
    biggest risk could be involving the life of patients. The goals will be different
    too: an investment company might have the goal to support as many businesses with
    funds, whereas healthcare companies will have the goal to cure people with specific
    solutions. So, the business and the goals will set the business attributes.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第一章*](B17492_01_ePub_RK.xhtml#_idTextAnchor013)中讨论过这个内容，*定义企业 DevOps 的参考架构*，但显然，了解一个企业想要实现的目标是很重要的。它们所在的市场是什么？它们如何在这些市场中服务客户？产品组合是什么？如果一个企业运营的是金融产品或医疗保健领域，差别是非常巨大的。它们的市场决定了风险水平。银行或投资公司面临的风险可能主要是财务风险，而医疗保健行业的最大风险可能涉及到患者的生命。目标也会不同：投资公司可能有支持尽可能多的企业获得资金的目标，而医疗保健公司则有通过具体解决方案治愈患者的目标。因此，企业及其目标将决定企业属性。
- en: Business attributes
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 业务属性
- en: Attributes can be the availability of systems, the accuracy of data, and the
    privacy of customers. Next to the type of business and the goals, regulations
    will set levels of these attributes. Financial institutions will have to adhere
    to financial national and international regulations such as **Sarbanes-Oxley**
    (**SOx**) and healthcare providers to the **Health Insurance Portability and Accountability
    Act** (**HIPAA**), as an example. Be aware that these regulations are audited.
    We will talk about this in [*Chapter 13*](B17492_13_ePub_RK.xhtml#_idTextAnchor159),
    *Working with DevSecOps Using Industry Security Frameworks*.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 属性可以是系统的可用性、数据的准确性和客户的隐私。除了业务类型和目标外，法规将规定这些属性的级别。金融机构必须遵守如 **萨班斯-奥克斯利法案**（**SOx**）和医疗保健提供商必须遵守的
    **健康保险流通与问责法案**（**HIPAA**）等国内和国际金融法规。请注意，这些法规会接受审计。我们将在[*第13章*](B17492_13_ePub_RK.xhtml#_idTextAnchor159)中讨论这个问题，*使用行业安全框架与
    DevSecOps 协作*。
- en: Risks
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 风险
- en: Based on the business goals and the attributes, we can define the risks. What
    will be a major threat to the business if a certain event occurs? If you think
    about availability, it could be the situation that an enterprise doesn't have
    a means to execute a failover if crucial systems stop for any reason. And how
    can the enterprise recover from major outages? Not having redundant systems can
    be a risk, just like vulnerabilities in applications that can be exploited by
    criminals. The MITRE ATT&CK framework can help in identifying risks; it will also
    be discussed in [*Chapter 13*](B17492_13_ePub_RK.xhtml#_idTextAnchor159), *Working
    with DevSecOps Using Industry Security Frameworks*.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 基于业务目标和属性，我们可以定义风险。如果某些事件发生，什么将对企业构成重大威胁？如果考虑到可用性，可能会遇到这种情况：企业在关键系统停止运行时没有执行故障转移的手段。企业如何从重大故障中恢复？没有冗余系统可能是一个风险，正如应用程序中的漏洞可能被犯罪分子利用一样。MITRE
    ATT&CK 框架可以帮助识别风险；这一内容将在[*第13章*](B17492_13_ePub_RK.xhtml#_idTextAnchor159)中讨论，*使用行业安全框架与
    DevSecOps 协作*。
- en: Controls
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制措施
- en: 'The next step is to define risk controls. Examples can be the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是定义风险控制。以下是一些示例：
- en: Create a business continuity plan that caters to disaster recovery.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制定一个适应灾难恢复的业务连续性计划。
- en: Implement a **public key infrastructure** (**PKI**) with identity stores and
    vaults to ensure the privacy of users.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施**公钥基础设施**（**PKI**），并配备身份存储和保管库，以确保用户隐私。
- en: Implement application firewalls with specific firewall rules to protect critical
    systems.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施应用防火墙，并设置具体的防火墙规则以保护关键系统。
- en: 'Set controls to manage, update, and upgrade all of the preceding: maintaining
    the business continuity plans, managing the security policies, and evaluating
    the firewall settings on a regular basis.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置控制措施来管理、更新和升级前述内容：维护业务连续性计划、管理安全策略，并定期评估防火墙设置。
- en: Validate that these controls are linked with the attributes and the applied
    security frameworks for auditing. For every control, there has to be a rationale
    that can be verified in audits.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 验证这些控制措施是否与属性和应用的安全框架关联，以便进行审计。对于每个控制措施，必须有一个可以在审计中验证的理由。
- en: 'The good news is that enterprises do not have to think about these controls
    all by themselves. The **Center of Internet Security** (**CIS**) has defined controls
    for a lot of IT domains: the CIS Controls framework. The basic CIS Controls include
    controlled use of privileged access, secure configuration of all IT system assets
    (including containers), and control of network ports, protocols, and services.
    For Azure, AWS, GCP, as well as for container platforms such as Kubernetes, CIS
    has defined specific controls.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，企业不必独自思考这些控制措施。**互联网安全中心**（**CIS**）为许多 IT 领域定义了控制措施：CIS 控制框架。基本的 CIS 控制措施包括对特权访问的受控使用、所有
    IT 系统资产（包括容器）的安全配置，以及对网络端口、协议和服务的控制。对于 Azure、AWS、GCP，以及像 Kubernetes 这样的容器平台，CIS
    已经定义了具体的控制措施。
- en: CIS, MITRE, and other frameworks and how they impact DevOps will be further
    discussed in later chapters, but first, we will learn what a DevSecOps architecture
    should include. That's the topic for the next chapter.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: CIS、MITRE 和其他框架以及它们如何影响 DevOps 将在后续章节中进一步讨论，但首先，我们将了解 DevSecOps 架构应包括哪些内容。这个话题将在下一章讨论。
- en: Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter provided an introduction to integrating security into DevOps, discussing
    the concept of DevSecOps. We've discussed the importance of security in enterprise
    architecture and how this is also driving security in enterprise DevOps. We've
    learned about the main security risks that are involved in adopting DevOps, and
    we had a closer look at securing containers as one of the most used technologies
    in DevOps practices. With that, we defined some critical starting points for adopting
    DevSecOps.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了如何将安全集成到 DevOps 中，讨论了 DevSecOps 的概念。我们探讨了安全性在企业架构中的重要性，以及它如何推动企业 DevOps
    中的安全性。我们了解了采用 DevOps 中涉及的主要安全风险，并深入研究了作为 DevOps 实践中最常用技术之一的容器安全性。通过这些内容，我们为采纳
    DevSecOps 确定了一些关键的起点。
- en: In the final section, we learned how to collect and assess risks from business
    goals and business attributes, introducing commonly used security controls frameworks
    such as the frameworks by CIS. With some examples, we explored the various steps
    that an architect needs to take to have a security standard that can also be applied
    to DevOps.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一部分中，我们学习了如何从业务目标和业务属性中收集和评估风险，介绍了 CIS 等常用的安全控制框架。通过一些示例，我们探索了架构师需要采取的各个步骤，以便拥有一个也能应用于
    DevOps 的安全标准。
- en: In the next chapter, we will explore the architecture of DevSecOps in more detail,
    before we start integrating security policies and industry frameworks with a DevOps
    way of working.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更详细地探讨 DevSecOps 的架构，然后开始将安全策略和行业框架与 DevOps 工作方式进行集成。
- en: Questions
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Name the four traditional principles of enterprise security.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出企业安全的四个传统原则。
- en: What does Docker use to validate signed containers?
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker 使用什么来验证签名的容器？
- en: 'True or false: Security should not hinder speed and agility in DevOps.'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 判断正误：安全性不应该妨碍 DevOps 中的速度和敏捷性。
- en: Further reading
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'ISACA journal about enterprise security architecture using SABSA and COBIT:
    [https://www.isaca.org/resources/isaca-journal/issues/2017/volume-4/enterprise-security-architecturea-top-down-approach](https://www.isaca.org/resources/isaca-journal/issues/2017/volume-4/enterprise-security-architecturea-top-down-approach
    )'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于使用SABSA和COBIT的企业安全架构的ISACA期刊：[https://www.isaca.org/resources/isaca-journal/issues/2017/volume-4/enterprise-security-architecturea-top-down-approach](https://www.isaca.org/resources/isaca-journal/issues/2017/volume-4/enterprise-security-architecturea-top-down-approach)
- en: 'CIS website: [cissecurity.org](http://cissecurity.org)'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CIS官网：[cissecurity.org](http://cissecurity.org)
