- en: '*Chapter 11*: Understanding Security in DevOps'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can''t talk about the cloud, modern apps, and—for that matter—digital transformation
    without talking about security. A popular term is *security by design*. But even
    security by design needs to be embedded in the enterprise architecture. It also
    applies to the DevOps cycle: DevOps needs to have *security by design*. Before
    we can discuss this and principles such as zero-trust, we need to get a good understanding
    of security first and how it''s impacting the DevOps practice. This chapter provides
    an introduction to security in DevOps.'
  prefs: []
  type: TYPE_NORMAL
- en: After completing this chapter, you will have learned why it's important to include
    security in the enterprise architecture and how an architect can collect and assess
    risks, and be able to identify what specific risks are in DevOps. You will also
    learn about setting security controls and what the main topics are that need to
    be addressed in DevSecOps.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Embedding security in enterprise architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding security risks in DevOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting DevSecOps-savvy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining requirements and metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embedding security in enterprise architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It''s a topic you can read about practically every day: businesses that have
    been hit by some sort of hack or attack. The smallest hole in a system will be
    found by criminals and exploited. Currently (in 2021), the most *popular* attacks
    are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Ransomware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phishing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Denial of service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first two, ransomware and phishing, really exploit holes in the defense
    layer of enterprises. The last is basically about bombing a system so heavily
    with traffic that the system eventually collapses. All three are fairly easy to
    execute. In fact, you can buy software and even services that will launch an attack
    on the targeted address. And no, you don't have to go to the dark web for that.
    It's out there, in the open, on the *normal* internet.
  prefs: []
  type: TYPE_NORMAL
- en: How can an enterprise protect itself from these attacks? First of all, it's
    important to realize that the IT of any enterprise has become more complex, as
    we have seen in previous chapters. IT systems are no longer only in one privately
    owned data center, but it has become an ecosystem using the public cloud, private
    stacks in privately owned data centers or colocations, **Platform as a Service**
    (**PaaS**), and **Software as a Service** (**SaaS**). Security must be intrinsic
    in every service that an enterprise uses.
  prefs: []
  type: TYPE_NORMAL
- en: 'The four traditional principles of enterprise security are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Prevention
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Correction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Direction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first three are about detecting security issues, correcting them with mitigating
    actions, but obviously, it''s better if issues can be prevented—hence, prevention
    is priority one. Direction is about guidelines and guardrails: enterprises defining
    policies and security standards to keep all systems secure. That''s where the
    fifth principle comes in: consistency. In an enterprise with various divisions,
    clusters, and teams, you need to ensure that security is implemented in every
    corner of that enterprise. You can''t have one division or team not adhering to
    the enterprise''s security. In other words: the strength of the chain is defined
    by the weakest link.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, where do we start with enterprise security? Enterprise architecture frameworks
    can help to get you started. An example is **Sherwood Applied Business Security
    Architecture** (**SABSA**), which offers a methodology to define security architecture.
    It consists of six layers, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – The SABSA model for security architecture'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_11_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.1 – The SABSA model for security architecture
  prefs: []
  type: TYPE_NORMAL
- en: '**Information Systems Audit and Control Association** (**ISACA**) combines
    SABSA with the generally more known **Control Objectives for Information and Related
    Technology** (**COBIT**) five principles. These five principles are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Meeting the needs of the stakeholders of the enterprise
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Covering the enterprise end to end
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying a single integrated framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling a holistic approach
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Separating governance from management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The combination of SABSA and COBIT leads to a top-down approach to define the
    architecture for the entire enterprise. The enterprise architect will have to
    execute at a minimum the following steps, in cooperation with the chief security
    architect:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Identify the business goals: This is the first stage in enterprise architecture.
    Enterprise architecture always starts with the business strategy, goals, and objectives.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identify the business risks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identify the required controls to manage risks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Design and implement these controls, for instance, the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '- Security governance processes'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Access controls'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Incident management processes'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Certificate management processes'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Design physical architecture for, among others, used platforms, networks, operating
    systems, and datastores. The physical architecture should also include the cloud
    platforms and services such as PaaS and SaaS and DevOps practices such as CI/CD.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Validate business and physical architecture to the compliancy and security standards
    and protocols the enterprise must adhere to.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define and implement operation architecture, for example, the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '- Configuration management'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Monitoring'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Logging'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Change management'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The preceding provided list is not meant to be exhaustive. In the *Further reading*
    section, we included a link to the ISACA journal about enterprise security architecture.
    In that journal, you will find more detail on the steps as described, using SABSA
    and COBIT.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: An important topic in defining the security architecture is understanding risks.
    What are the risks, which systems are at risk, and what is the impact on the enterprise
    and its business? DevOps brings along its own risks. We will discuss this in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding security risks in DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There''s a classic cartoon on the internet. It shows a boxing ring. The speaker
    announces an immense set of security tools and rules in the left corner of the
    ring. Then, in the right corner, he announces Dave: a nerdy-looking guy, wearing
    a shirt saying *human error*. The message: you can have every security system
    in the world, but it won''t stop human error. And development is still mainly
    work done by humans. Humans make mistakes. Is that the biggest risk in DevOps
    or are there other specific risks that need attention? We will discuss this in
    this section.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To answer the question of whether DevOps implies specific risks, yes. Implementing
    DevOps without paying attention to security will definitively increase the risk
    of attacks, simply by raising the attack surface of systems. There are three main
    topics that need to be addressed:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Access management**: DevOps teams likely use code repositories that are manually
    accessed either by developers or by tools. Code needs to be protected, even when
    operating in open source mode, and code is shared so that more developers can
    contribute to the code. Even in that case, companies would want to regulate access
    to code so that it doesn''t get out into the open, or worse, malicious code is
    injected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You need a role-based access model to the code repositories: who has read rights
    and write rights and who has full access—and for what reason?'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Keep track of the accounts. For example, GitHub companies can have internal
    repositories that only assigned staff—or tools—of that company can have access
    to. Within that internal repository, the administrator delegates the roles. Credentials
    are set according to the security policies of the company. A recommended way to
    keep access control is to implement **privileged access management** (**PAM**).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Because of DevOps, teams will have to create more privileged accounts that are
    shared—either manually or automatically—among developers and tools. These accounts
    also involve service accounts, encryption keys, SSH keys, and API certificates
    that are all kept in the repositories. Unauthorized access to these repositories
    is disastrous.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A PAM solution offers a way to authorize and audit any activity in the DevOps
    cycle. Most of these solutions use key vaults to keep access details secured and
    to authenticate and authorize users before they can actually access repositories.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Missing guardrails and guidelines for a DevOps way of working and tools**:
    Access to code is one thing; the next thing is: what do we do with that code?
    It''s very unlikely that enterprises would allow DevOps teams to just commit and
    push new code to production. First of all, the enterprise or chief architect—in
    most larger enterprises, there will be a group of leading architects—really needs
    to think of the preferred toolset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's important that every DevOps team uses that toolset instead of implementing
    tools of their own choice, however tempting it might be. The issue is that DevOps
    toolsets do not have a common standard for security policies, such as access control.
    That is something that the enterprise itself needs to establish and implement,
    which is easier if you go with one toolset.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The same applies to the way of working: that needs to be consistent throughout
    the entire enterprise; we can''t stress that enough. All of this has to be defined
    in a preferred technology list and DevOps guardrails and principles. Typically,
    there will be a master branch. New code will first be pushed to a separate branch—often
    referred to as the feature branch—where it''s tested. After the validated, positive
    test results, the code is merged to the master. The master code or main branch
    is again stored in the repository. That principle is shown in the following figure:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.2 – Principle of merging new code'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_11_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.2 – Principle of merging new code
  prefs: []
  type: TYPE_NORMAL
- en: The guardrails define when code is pulled from the repository, how it's committed
    to feature branches, and how it's tested and eventually released for merging with
    the master.
  prefs: []
  type: TYPE_NORMAL
- en: '**Focus on the development process and velocity, neglecting security**: DevOps
    is all about gaining speed in development. That should never be an excuse to neglect
    security. In the following section, we will illustrate that with a real-life example.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To summarize, DevOps security is about three topics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Traceability**: Track every action in the DevOps cycle and pipelines.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Auditability**: Ensure that systems that are developed in DevOps are compliant
    with the security standards of the enterprise and the industry frameworks that
    the enterprise is submitted to. [*Chapter 13*](B17492_13_ePub_RK.xhtml#_idTextAnchor159),
    *Working with DevSecOps Using Industry Security Frameworks*, talks about that
    in more detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visibility**: Have solid monitoring systems in place.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we have a good understanding of the security risks in DevOps. In the next
    section, we will discuss how to get started with DevSecOps.
  prefs: []
  type: TYPE_NORMAL
- en: Getting DevSecOps-savvy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security starts with access to the repositories, the source of code where the
    DevOps cycle begins. As we've learned so far, we want to automate as much as we
    can in development, testing, and deployment. Next, by adopting DevOps, businesses
    want to speed up the development and deployment of new applications and features.
    Speed and agility might lead to security risks, because code is not sufficiently
    tested or, worse, it's pushed to production without applying the proper security
    policies to gain time. Let's illustrate that with a real-life example.
  prefs: []
  type: TYPE_NORMAL
- en: Developers fork code from the repository and start working on that code. At
    a certain stage, it needs to be pushed to designated infrastructure to run that
    code. In development, the code runs fine, since it's not interfacing yet with
    production systems. As soon as the code is ready to release in production, it
    will need to establish those connections. Commonly, in enterprises, specific routing
    and firewall ports need to be opened to allow for that connectivity and transfer
    of traffic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Firewall rules and, more specifically, opening ports and assigning firewall
    rules are typically not done automatically; security engineers will want to assess
    the requests before they approve for settings to be implemented. In a lot of cases,
    this is really slowing down the whole DevOps and agile process. But in almost
    every enterprise this is the practice: security being the last stop before final
    deployment and not embedded in the DevOps cycle. Bypassing this is, however, a
    bad idea. It will increase the attack surface of code and systems.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bottom line: security must be embedded in DevOps—it makes development and deployment
    a shared responsibility of developers, operators, and security engineers. Security
    is not just the responsibility of the security team, but of the whole DevOps team.'
  prefs: []
  type: TYPE_NORMAL
- en: Starting points for DevSecOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Security scanning starts as soon as code is pulled from repositories. The first
    thing to do is to have a **role-based access control** (**RBAC**) model applied
    to the repository. RBAC defines who has access and to what level. Is an identity
    allowed to only view code, or is full access granted to pull code, change code,
    and add code to the repository? Be aware that this doesn't necessarily have to
    be a person. DevOps tools are *identities* too and you need to think of the required
    access to these tools.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the DevOps cycle, code is constantly reviewed and scanned and tested
    on vulnerabilities. A very simple example is if connectivity to the internet is
    prohibited from an application and the code shows a pointer to port `80`, it might
    be flagged as a risk. It might be allowed if an application is relying on a service
    to which it connects through the internet, but then that needs to be verified
    against the security policies. Scanning, testing, and validation need to be done
    as early in the development process as possible. Also, here, the shift-left principle
    applies.
  prefs: []
  type: TYPE_NORMAL
- en: The greatest benefit of embedding security in DevOps is the fact that we can
    also have automation to do checks and even apply patches and fixes as soon as
    a vulnerability is discovered or acknowledged. For instance, if a new release
    of a code base contains patches for **Common Vulnerabilities and Exposures** (**CVEs**),
    this can be injected into the security baseline and integrated with security testing
    procedures. Code is automatically checked against this new baseline. Software
    can execute tests, validate whether code is compliant, and if the code does not
    pass, flag in the case of issues or trigger automated remediation by installing
    the patches. This doesn't only apply to application code, but certainly also for
    the used infrastructure, operating systems, and middleware.
  prefs: []
  type: TYPE_NORMAL
- en: DevSecOps using containers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another example: a growing number of enterprises work with containers for code
    distribution. Just like virtual machines, containers also need to be compliant
    with security policies. Enterprises will likely use hardened containers, setting
    policies for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hardened host operating systems**: Often, these are Linux operating systems
    that protect the host from breaches by infected containers. Examples are security
    packages that are applied to Linux hosts, such as SELinux and seccomp; these Linux
    distributions allow **Mandatory Access Control** (**MAC**) to the kernel settings.
    Enterprises can opt to develop their own **Linux Security Modules** (**LSMs**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Container runtime security policies**: Setting specific permissions for mounting
    containers, privileged containers, disabling SSH in containers, settings for binding
    ports, and exposing ports.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following figure shows the principle of CVE-based security scanning for
    containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.3 – Concept of Docker security scanning'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_11_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.3 – Concept of Docker security scanning
  prefs: []
  type: TYPE_NORMAL
- en: The scan is done with the data from the CVE database. This can be data coming
    from, for example, **National Institute of Standards and Technology** (**NIST**),
    MITRE, or suppliers such as Microsoft who also issue CVE notifications for their
    products and services. After the scan, Docker *signs* the image that is pulled
    from the repository. For this, it uses Docker Notary, which verifies the image
    and prevents developers from using images that are not signed.
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have hardened, validated containers with specific privileges set. Now,
    the next most important thing is to control the settings; once the privileges
    to a container are set, there should be no way to alter these privileges. Containers
    should not be able to gain new privileges; otherwise, they are not hardened. In
    Docker, there''s a simple way to check and set this. Using the following command,
    you can list all the security settings for containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: It will return messages on hardening of the containers, creation of separate
    partitions for containers, and audit configuration for Docker files and directories.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, set the no new privileges option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Obviously, these settings need to be continuously evaluated. DevSecOps is—as
    with DevOps—a repeatable, continuous process, aiming for continuous improvement.
    This means that goals, requirements, newly identified risks, and controls to mitigate
    these risks need to be assessed and addressed as enterprises adopt DevSecOps.
    We will discuss this in the final section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Defining requirements and metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the first section of this chapter, we discussed the steps that an architect
    must take to define enterprise security. In this section, we will explain how
    requirements and metrics can be collected, validated, and translated into controls
    and KPIs.
  prefs: []
  type: TYPE_NORMAL
- en: Business goals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ve talked about this in [*Chapter 1*](B17492_01_ePub_RK.xhtml#_idTextAnchor013),
    *Defining the Reference Architecture for Enterprise DevOps*, but obviously, it''s
    important to understand the goals a business wants to achieve. What markets are
    they in, how do they serve customers in these markets, and what is the product
    portfolio? It does make a huge difference if a business is operating in financial
    products or healthcare. Their markets define the risk level. The risk for a bank
    or an investment company could be mainly financial, whereas for healthcare, the
    biggest risk could be involving the life of patients. The goals will be different
    too: an investment company might have the goal to support as many businesses with
    funds, whereas healthcare companies will have the goal to cure people with specific
    solutions. So, the business and the goals will set the business attributes.'
  prefs: []
  type: TYPE_NORMAL
- en: Business attributes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Attributes can be the availability of systems, the accuracy of data, and the
    privacy of customers. Next to the type of business and the goals, regulations
    will set levels of these attributes. Financial institutions will have to adhere
    to financial national and international regulations such as **Sarbanes-Oxley**
    (**SOx**) and healthcare providers to the **Health Insurance Portability and Accountability
    Act** (**HIPAA**), as an example. Be aware that these regulations are audited.
    We will talk about this in [*Chapter 13*](B17492_13_ePub_RK.xhtml#_idTextAnchor159),
    *Working with DevSecOps Using Industry Security Frameworks*.
  prefs: []
  type: TYPE_NORMAL
- en: Risks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Based on the business goals and the attributes, we can define the risks. What
    will be a major threat to the business if a certain event occurs? If you think
    about availability, it could be the situation that an enterprise doesn't have
    a means to execute a failover if crucial systems stop for any reason. And how
    can the enterprise recover from major outages? Not having redundant systems can
    be a risk, just like vulnerabilities in applications that can be exploited by
    criminals. The MITRE ATT&CK framework can help in identifying risks; it will also
    be discussed in [*Chapter 13*](B17492_13_ePub_RK.xhtml#_idTextAnchor159), *Working
    with DevSecOps Using Industry Security Frameworks*.
  prefs: []
  type: TYPE_NORMAL
- en: Controls
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next step is to define risk controls. Examples can be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a business continuity plan that caters to disaster recovery.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement a **public key infrastructure** (**PKI**) with identity stores and
    vaults to ensure the privacy of users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement application firewalls with specific firewall rules to protect critical
    systems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Set controls to manage, update, and upgrade all of the preceding: maintaining
    the business continuity plans, managing the security policies, and evaluating
    the firewall settings on a regular basis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validate that these controls are linked with the attributes and the applied
    security frameworks for auditing. For every control, there has to be a rationale
    that can be verified in audits.
  prefs: []
  type: TYPE_NORMAL
- en: 'The good news is that enterprises do not have to think about these controls
    all by themselves. The **Center of Internet Security** (**CIS**) has defined controls
    for a lot of IT domains: the CIS Controls framework. The basic CIS Controls include
    controlled use of privileged access, secure configuration of all IT system assets
    (including containers), and control of network ports, protocols, and services.
    For Azure, AWS, GCP, as well as for container platforms such as Kubernetes, CIS
    has defined specific controls.'
  prefs: []
  type: TYPE_NORMAL
- en: CIS, MITRE, and other frameworks and how they impact DevOps will be further
    discussed in later chapters, but first, we will learn what a DevSecOps architecture
    should include. That's the topic for the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter provided an introduction to integrating security into DevOps, discussing
    the concept of DevSecOps. We've discussed the importance of security in enterprise
    architecture and how this is also driving security in enterprise DevOps. We've
    learned about the main security risks that are involved in adopting DevOps, and
    we had a closer look at securing containers as one of the most used technologies
    in DevOps practices. With that, we defined some critical starting points for adopting
    DevSecOps.
  prefs: []
  type: TYPE_NORMAL
- en: In the final section, we learned how to collect and assess risks from business
    goals and business attributes, introducing commonly used security controls frameworks
    such as the frameworks by CIS. With some examples, we explored the various steps
    that an architect needs to take to have a security standard that can also be applied
    to DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will explore the architecture of DevSecOps in more detail,
    before we start integrating security policies and industry frameworks with a DevOps
    way of working.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Name the four traditional principles of enterprise security.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does Docker use to validate signed containers?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: Security should not hinder speed and agility in DevOps.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'ISACA journal about enterprise security architecture using SABSA and COBIT:
    [https://www.isaca.org/resources/isaca-journal/issues/2017/volume-4/enterprise-security-architecturea-top-down-approach](https://www.isaca.org/resources/isaca-journal/issues/2017/volume-4/enterprise-security-architecturea-top-down-approach
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CIS website: [cissecurity.org](http://cissecurity.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
