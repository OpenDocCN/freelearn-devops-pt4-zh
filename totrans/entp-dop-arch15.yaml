- en: '*Chapter 12*: Architecting for DevSecOps'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第12章*：为DevSecOps架构设计'
- en: As with everything in the enterprise IT domain, DevSecOps requires an architectural
    foundation. In this chapter, you will learn how to compose the reference architecture
    for DevSecOps practices and design the pipelines for DevSecOps. We will also discuss
    the best DevSecOps practices for the major public cloud providers; that is, AWS,
    Azure, and GCP. For that, we will elaborate on some of the leading tools in the
    market. In the last section, you will learn what steps the enterprise should take
    to implement DevSecOps.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 和企业IT领域的所有内容一样，DevSecOps需要一个架构基础。在本章中，您将学习如何为DevSecOps实践构建参考架构，并设计DevSecOps管道。我们还将讨论主要公共云服务提供商的最佳DevSecOps实践；即AWS、Azure和GCP。为此，我们将详细阐述市场上一些领先的工具。在最后一节中，您将了解企业应采取哪些步骤来实施DevSecOps。
- en: After completing this chapter, you will be able to name the different components
    in a DevSecOps architecture and how to include these in a DevSecOps pipeline.
    You will have also learned how to secure containers and what the best practices
    are in various public clouds. Most importantly, you will be able to explain why
    including security in DevOps is crucial for enterprises.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，您将能够列出DevSecOps架构中的不同组件，以及如何将这些组件纳入DevSecOps管道。您还将学习如何保护容器以及在各种公共云中最佳的做法。最重要的是，您将能够解释为什么在DevOps中融入安全对企业至关重要。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Understanding the DevSecOps ecosystem
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解DevSecOps生态系统
- en: Creating the reference architecture
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建参考架构
- en: Composing the DevSecOps pipeline
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建DevSecOps管道
- en: Applying DevSecOps to AWS, Azure, and GCP
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将DevSecOps应用于AWS、Azure和GCP
- en: Planning deployment
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署规划
- en: Understanding the DevSecOps ecosystem
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解DevSecOps生态系统
- en: In the previous chapter, we discussed security principles and how this impacts
    the DevOps way of working. We concluded that security must be at the heart of
    every step in the development and deployment cycle, from the moment where code
    is pulled from a repository to the actual code commit and push to production.
    In this chapter, we will look at the foundation of **DevSecOps**, **DevOps that
    has security embedded**.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了安全原则以及这些原则如何影响DevOps的工作方式。我们得出结论，安全必须贯穿开发和部署周期的每一步，从代码从代码库拉取的那一刻起，到实际的代码提交和推送到生产环境。在本章中，我们将看看**DevSecOps**的基础，即**嵌入安全的DevOps**。
- en: 'DevSecOps consists of three layers:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: DevSecOps由三层组成：
- en: '**Culture**: This is not a technical layer, but it''s often forgotten that
    DevOps is much more than just applying tools and creating CI/CD pipelines. Obviously,
    the same applies to DevSecOps. Within DevSecOps, every team member feels responsible
    for security and acts accordingly, taking ownership of it. This doesn''t mean
    that security specialists have become obsolete, though. It''s a good practice
    to have a security engineer or professional in the team, sometimes referred to
    as the security champion. This person must lead all processes in terms of applying
    security standards and policies, ensuring compliance.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文化**：这不是一个技术层面，但经常被忽视的是，DevOps远不止应用工具和创建CI/CD管道。显然，DevSecOps也是如此。在DevSecOps中，每个团队成员都对安全负责并采取相应行动，拥有安全的责任。这并不意味着安全专家变得过时。最好在团队中有一名安全工程师或专业人士，通常称为安全冠军。此人必须主导所有应用安全标准和政策的流程，确保合规性。'
- en: '**Security by design**: Security is embedded at every layer of the system.
    This typically means that an enterprise has a defined architecture that covers
    every aspect of security and enforcing security postures onto systems: authentication,
    authorization, confidentiality, data integrity, privacy, accountability, and availability,
    including remediation and corrective actions when systems are under attack. Software
    developers do not need to think of security every time they design and build new
    applications or features – the posture is applied as soon as development starts.
    The security architecture, frameworks, rules, and standards are centrally managed.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设计即安全**：安全被嵌入到系统的每一层。这通常意味着企业有一个明确的架构，涵盖每个安全方面并将安全策略强制应用于系统：身份验证、授权、保密性、数据完整性、隐私、问责制和可用性，包括在系统受到攻击时的修复和纠正措施。软件开发人员在设计和构建新应用或功能时不需要每次都考虑安全——安全姿态一旦开发开始就会应用。安全架构、框架、规则和标准都是集中管理的。'
- en: '**Automation**: In DevSecOps, we want to automate as much as we can, and this
    includes security. The rationale for automating security is that we can prevent
    human error, and also have automated tollgates where code is scanned for possible
    vulnerabilities or non-compliant components such as unlicensed code. The security
    lead also takes responsibility for automating security, but does so with the team.
    Automation also implies automated audits and collection of evidence in case of
    attacks or breaches. Next, the automation process makes sure that security metrics
    are collected and sent back for feedback in the DevSecOps practice. For example,
    if, when you scan, a vulnerability in the code is discovered or a license has
    been breached, evidence will be collected and sent for feedback.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化**：在 DevSecOps 中，我们希望尽可能实现自动化，其中包括安全性。自动化安全的理由是我们可以防止人为错误，并且有自动化的门槛，在那里代码会被扫描以发现可能的漏洞或不合规的组件，比如未授权的代码。安全负责人也负责自动化安全，但他们与团队一起进行。自动化还意味着在发生攻击或数据泄露时会进行自动化审计并收集证据。接下来，自动化流程确保收集安全指标并反馈到
    DevSecOps 实践中。例如，如果在扫描时发现代码中的漏洞或许可证被违反，证据将被收集并发送反馈。'
- en: 'To manage these layers, DevSecOps relies on the following components:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: DevSecOps 管理这些层次时依赖以下组件：
- en: Harnessing repositories
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用仓库
- en: Application (code) security
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序（代码）安全
- en: Cloud platform security
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云平台安全
- en: Vulnerability assessments and testing
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 漏洞评估和测试
- en: DevSecOps should not be mixed up with **security as a service** (**SECaaS**).
    SECaaS can be a component of the DevSecOps practice, but the concept of SECaaS
    is mainly about shifting security as a responsibility to a service provider. It's
    a sourcing model that allows enterprises to get cybersecurity delivered from a
    service provider on a subscription base. There are good reasons for implementing
    SECaaS, and one of them is that a provider is responsible for all security updates,
    based on the latest insights. Enterprises can define service-level agreements
    for incident response times and the timely application of security practices.
    As we mentioned previously, it can be integrated into DevSecOps, but SECaaS also
    means that an enterprise has to rely upon a third party for implementing and managing
    the security baseline.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: DevSecOps 不应与 **安全即服务** (**SECaaS**) 混淆。SECaaS 可以是 DevSecOps 实践中的一个组成部分，但 SECaaS
    的概念主要是将安全责任转交给服务提供商。这是一种外包模型，允许企业通过订阅模式从服务提供商处获得网络安全服务。实施 SECaaS 有充分的理由，其中之一是服务提供商负责所有安全更新，基于最新的见解。企业可以定义服务水平协议，以确保及时响应事件并应用安全实践。如前所述，SECaaS
    可以集成到 DevSecOps 中，但它也意味着企业必须依赖第三方来实施和管理安全基准。
- en: In the next section, we will discuss the DevSecOps components and define the
    reference architecture.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将讨论 DevSecOps 组件并定义参考架构。
- en: Creating the reference architecture
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建参考架构
- en: Before we discuss the reference architecture of DevSecOps, we need to understand
    what the role of DevOps is and how security fits in. DevOps is about the software
    development life cycle. An important note that we have to make is the fact that
    developers increasingly use open source components. This makes sense since this
    provides great flexibility when developing new code.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们讨论 DevSecOps 的参考架构之前，我们需要了解 DevOps 的角色及其如何融入安全性。DevOps 涉及软件开发生命周期。我们必须注意的一点是，开发人员越来越多地使用开源组件。这是合理的，因为它在开发新代码时提供了极大的灵活性。
- en: Open source is community-driven, so developers can contribute to each other's
    code and speed up the process. Projects can and are shared in open Git and GitHub
    repositories, but also internally in enterprises. InnerSource type projects are
    a good example of this. InnerSource uses open source best practices for software
    development, within the boundaries of an organization. Typically, InnerSource
    projects make use of shielded, access restricted repositories in GitHub or alike.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 开源是由社区推动的，因此开发者可以互相贡献代码并加快开发进程。项目可以共享在公开的 Git 和 GitHub 仓库中，也可以在企业内部共享。InnerSource
    类型的项目就是一个很好的例子。InnerSource 在组织的边界内使用开源最佳实践进行软件开发。通常，InnerSource 项目会利用 GitHub 等平台中受保护的、访问受限的仓库。
- en: Yet, there are some risks associated with open source that need to be addressed
    from a security perspective. Because of its open, community character – the strength
    of open source – there's an increased risk of introducing vulnerabilities to the
    code base. A second risk is license compliance. Licenses are not at the top of
    everyone's mind in open source, but be aware that even open source software and
    tools require licensing.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，开源软件存在一些需要从安全角度解决的风险。由于开源具有其开放的社区特性——即开源的优势——这增加了将漏洞引入代码库的风险。第二个风险是许可证合规性。在开源中，许可证通常不为人们所关注，但请注意，即使是开源软件和工具也需要许可证。
- en: Let's look at the process first. The software development life cycle is a repetitive
    process. The developer pulls source code out of a repository and a build is triggered.
    After the code has been written, the code is packaged and enabled for deployment
    to the next stage in the promotion path; that is, test, acceptance, and eventually
    production. The whole process is facilitated through CI/CD pipelines and monitored.
    As we have concluded in the previous chapters, it's essential to test the code
    throughout the whole process. We also scan the code for security and compliance.
    This should be done at every single step in the process.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看看流程。软件开发生命周期是一个重复的过程。开发人员从仓库中拉取源代码并触发构建。代码编写完成后，代码被打包并启用以部署到下一个阶段，即测试、验收，最终是生产阶段。整个过程通过
    CI/CD 流水线进行促进和监控。正如我们在前几章中总结的那样，测试代码是整个过程中的关键。我们还扫描代码以确保安全性和合规性。这应该在过程中的每一个步骤中进行。
- en: In fact, we need security from the start of the DevOps process. In practice,
    this means that we start scanning for security issues from the moment the code
    is pulled from the repositories. The repositories are indeed part of the software
    development life cycle too, so these must be protected from unauthorized access.
    This calls for **role-based access control** (**RBAC**) and **Identity and Access
    Management** (**IAM**) on repositories.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，我们从 DevOps 流程开始就需要关注安全。实际上，这意味着从代码从仓库拉取的那一刻起，我们就开始扫描安全问题。仓库也是软件开发生命周期的一部分，因此这些仓库必须防止未经授权的访问。这就需要在仓库上实施
    **基于角色的访问控制**（**RBAC**）和 **身份与访问管理**（**IAM**）。
- en: 'With that in mind, we can create the reference architecture for DevSecOps with
    the following components:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，我们可以使用以下组件创建 DevSecOps 的参考架构：
- en: Repository access with RBAC
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 RBAC 进行仓库访问
- en: '**Static Application Security Testing (SAST)**: This will detect errors in
    the source code'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静态应用程序安全测试（SAST）**：这将检测源代码中的错误'
- en: '**Software Composition Analysis (SCA)**: This will detect dependencies in code'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软件组成分析（SCA）**：这将检测代码中的依赖关系'
- en: '**Dynamic Application Security Testing (DAST)**: This will dynamically scan
    the code'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态应用程序安全测试（DAST）**：这将动态扫描代码'
- en: These components are embedded in the DevSecOps pipeline, which we will discuss
    in the next section.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组件被嵌入到 DevSecOps 流水线中，我们将在下一节中讨论。
- en: Composing the DevSecOps pipeline
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组成 DevSecOps 流水线
- en: 'Let''s look at a common DevOps pipeline first. The basic pipeline is shown
    in the following diagram:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先看一下一个常见的 DevOps 流水线。基本的流水线如以下图所示：
- en: '![Figure 12.1 – DevOps pipeline'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.1 – DevOps 流水线'
- en: '](img/B17492_12_001.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_12_001.jpg)'
- en: Figure 12.1 – DevOps pipeline
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.1 – DevOps 流水线
- en: 'The basic steps in the pipeline are as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 流水线的基本步骤如下：
- en: Pull code from the repository
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从仓库拉取代码
- en: Build
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建
- en: Test
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试
- en: Deploy
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署
- en: 'In DevSecOps, we are embedding security into the pipeline, making security
    standards and policies an integrated part of it. Security is a layer that is applied
    to every step in the pipeline, but it does include several steps. This is shown
    in the following diagram:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DevSecOps 中，我们将安全嵌入到流水线中，使安全标准和政策成为其集成的一部分。安全是应用于流水线每个步骤的一个层次，但它确实包括几个步骤。如下图所示：
- en: '![Figure 12.2 – DevSecOps pipeline'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.2 – DevSecOps 流水线'
- en: '](img/B17492_12_002.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_12_002.jpg)'
- en: Figure 12.2 – DevSecOps pipeline
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.2 – DevSecOps 流水线
- en: 'These steps are as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤如下：
- en: '`pipenv` for Python code and `npm` for Node.js. The commands that are used
    for the checks here are `pipenv check` and `npm audit`, respectively.'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pipenv` 用于 Python 代码，`npm` 用于 Node.js。用于检查的命令分别是 `pipenv check` 和 `npm audit`。'
- en: Tip
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提示
- en: Check the `pipenv` website for scripts and tutorials on [https://pipenv.pypa.io/en/latest/](https://pipenv.pypa.io/en/latest/).
    Take a look at [https://docs.npmjs.com/cli/v6/commands/npm-audit](https://docs.npmjs.com/cli/v6/commands/npm-audit)
    for npm code checks.
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查看 `pipenv` 网站，了解更多脚本和教程：[https://pipenv.pypa.io/en/latest/](https://pipenv.pypa.io/en/latest/)。也可以查看
    [https://docs.npmjs.com/cli/v6/commands/npm-audit](https://docs.npmjs.com/cli/v6/commands/npm-audit)
    了解 npm 代码检查。
- en: '**Static analysis**: This checks for bad coding practices, such as bad configurations.
    There are open source tools for almost every coding language. Some examples of
    tools are as follows:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**静态分析**：这会检查不良的编码实践，比如配置错误。几乎每种编程语言都有开源工具。以下是一些工具示例：'
- en: '- ArchUnitNet and Puma Scan for C#'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- C# 的 ArchUnitNet 和 Puma Scan'
- en: '- Go vet for Go'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- Go 的 Go vet'
- en: '- Checkstyle and **Open Web Application Security Project** (**OWASP**) dependency
    checks for Java'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- Java 的 Checkstyle 和 **开放 Web 应用程序安全项目**（**OWASP**）依赖检查'
- en: '- Flow for JavaScript'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- JavaScript 的 Flow'
- en: '- Parse for PHP'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- PHP 的 Parse'
- en: '- Bandit for Python'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '- Python 的 Bandit'
- en: Tip
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提示
- en: This list is by no means exhaustive. On [https://github.com/analysis-tools-dev/static-analysis](https://github.com/analysis-tools-dev/static-analysis),
    you will find a list of the current, most used tools.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这份清单并不详尽。在 [https://github.com/analysis-tools-dev/static-analysis](https://github.com/analysis-tools-dev/static-analysis)
    上，您将找到当前使用最广泛的工具列表。
- en: '**Scanning**: Developers will likely use containers and thus container images
    to build and package their applications. These images need to be scanned for vulnerabilities
    in used binaries and libraries. This scanning is done with base lists of known
    vulnerabilities; these lists are provided by institutes such as the **National
    Institute of Standards and Technology** (**NIST**), but also software providers
    in the form of **Common Vulnerability and Exposures** (**CVE**) notifications.
    As soon as a new CVE is reported, the lists are updated, and the scanning tools
    are automatically updated and triggered to redo the scan. Clair ([https://github.com/quay/clair](https://github.com/quay/clair))
    is an open source tool that performs these scans, also for Docker images. Scanning
    involves **linting**, which we will explain in more detail when we talk about
    hardening containers in the next section.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**扫描**：开发人员很可能会使用容器，进而使用容器镜像来构建和打包他们的应用程序。这些镜像需要扫描以查找已使用的二进制文件和库中的漏洞。扫描是通过已知漏洞的基础列表来进行的；这些列表由如**美国国家标准与技术研究院**（**NIST**）等机构提供，也有软件供应商以**常见漏洞和曝光**（**CVE**）通知的形式提供。一旦报告了新的
    CVE，列表会被更新，扫描工具会自动更新并触发重新扫描。Clair（[https://github.com/quay/clair](https://github.com/quay/clair)）是一个开源工具，它会执行这些扫描，也适用于
    Docker 镜像。扫描过程包括**代码检查**，我们将在下一节关于容器加固时详细解释。'
- en: '**Dynamic analysis**: In the case of web applications, developers can run an
    automated web application scan to check for bad headers or missing tokens for
    **cross-site request forgery** (**CSRF** or **XSRF**). These tokens prevent exploits
    of unauthorized commands that come from a trusted user – this can also be a function
    on a different website. These automated dynamic scans can be integrated into the
    pipeline. The OWASP Zed Attack Proxy is a free web security tool ([https://owasp.org/www-project-zap/](https://owasp.org/www-project-zap/)).'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**动态分析**：对于 Web 应用程序，开发人员可以运行自动化 Web 应用程序扫描，以检查错误的头部或缺失的令牌，用于**跨站请求伪造**（**CSRF**
    或 **XSRF**）。这些令牌可以防止来自受信任用户的未经授权的命令被利用——这也可以是来自其他网站的功能。这些自动化的动态扫描可以集成到流水线中。OWASP
    Zed Attack Proxy 是一个免费的 Web 安全工具（[https://owasp.org/www-project-zap/](https://owasp.org/www-project-zap/)）。'
- en: Now, we have a security-embedded CI/CD pipeline that will automatically cover
    most commonly recognized vulnerabilities in code. There's one specific item that
    we didn't touch on in this section, though, and that's the use of containers and
    how we can secure these. We will study secured container builds in the next section.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经拥有一个嵌入安全的 CI/CD 流水线，它将自动涵盖大多数常见的代码漏洞。不过，这一节中我们没有涉及到的一个特定项是容器的使用，以及我们如何保护这些容器。我们将在下一节中研究如何构建安全的容器。
- en: Using secured containers in the pipeline
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在流水线中使用安全容器
- en: Most developers will use containers to wrap and deploy their code, typically
    Docker containers. There are some best practices when it comes to using and securing
    containers. To keep containers consistent and secured, they should be scanned
    regularly, even when the application has reached a steady state and updates are
    done less frequently or active development has stopped. If the application still
    runs with its underlying containers hosting the different application components,
    these containers must be scanned since there's always a possibility that a dependency
    is creating a new vulnerability.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数开发人员会使用容器来打包和部署他们的代码，通常是 Docker 容器。在使用和保护容器时，有一些最佳实践。为了保持容器的一致性和安全性，它们应该定期扫描，即使应用程序已经达到了稳定状态，更新变得不那么频繁，或者主动开发已停止。如果应用程序仍然在使用其底层容器托管不同的应用组件，这些容器必须进行扫描，因为总是有可能某个依赖项会产生新的漏洞。
- en: 'Applications consisting of containers are defined by Dockerfiles. **Linting**
    – analyzing the code for errors or bad syntaxes used in the code – can be used
    to do **Static Code Analyzer** (**SCA**) of the Dockerfiles and make sure that
    these files remain secure. A popular linting tool to do this is **Haskell Dockerfile
    Linter** (**Hadolint**). It''s available as a Docker image and can easily be executed
    through the following command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由容器组成的应用程序由 Dockerfiles 定义。**Linting**——分析代码中使用的错误或不良语法——可以用于对 Dockerfiles 进行
    **静态代码分析** (**SCA**)，并确保这些文件保持安全。一个常用的代码检查工具是 **Haskell Dockerfile Linter** (**Hadolint**)，它作为
    Docker 镜像提供，可以通过以下命令轻松执行：
- en: '[PRE0]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Hadolint will scan the code and if everything is all right, it will return an
    exit code of `0`. When it discovers errors or bad practices, it will present a
    **Hadolint error** (**DL**) or **SellCheck error** (**SC**) key.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Hadolint 会扫描代码，如果一切正常，它将返回退出代码 `0`。当发现错误或不良实践时，它会呈现 **Hadolint 错误** (**DL**)
    或 **SellCheck 错误** (**SC**) 键。
- en: Tip
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: An overview of common errors is collected at [https://github.com/hadolint/hadolint#rules](https://github.com/hadolint/hadolint#rules).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 常见错误的概述已汇总在 [https://github.com/hadolint/hadolint#rules](https://github.com/hadolint/hadolint#rules)。
- en: 'Besides linting, Docker recommends some best practices for keeping containers
    secure. Docker already takes care of namespaces and network stacks to provide
    isolation so that containers can''t obtain privileged access to other containers,
    unless specifically specified in the configuration. Next, there are some important
    things to consider:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 除了代码检查，Docker 还推荐了一些保持容器安全的最佳实践。Docker 已经处理了命名空间和网络栈，以提供隔离，从而确保容器无法获得对其他容器的特权访问，除非在配置中明确指定。接下来，有一些重要事项需要考虑：
- en: Docker uses the Docker daemon. This daemon requires root access, which implies
    security risks. First, only trusted users should be allowed to set controls for
    the daemon. Next, you will need to take action and limit the attack surface of
    the daemon by setting access rights to the Docker host and the guest containers,
    especially when containers can be provisioned through an API from a web server.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 使用 Docker 守护进程。这个守护进程需要根权限，这意味着存在安全风险。首先，只有受信任的用户应被允许设置守护进程的控制权限。接下来，你需要采取行动，通过设置对
    Docker 主机和客户容器的访问权限，尤其是当容器可以通过 Web 服务器的 API 来配置时，来限制守护进程的攻击面。
- en: The use of Docker Content Trust Signature Verification is strongly recommended.
    It's a feature that is available from the `dockerd` binary and allows you to set
    the Docker engine to only run signed images. For the signing itself, you can use
    Notary.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强烈建议使用 Docker 内容信任签名验证。这是一个从 `dockerd` 二进制文件开始提供的功能，允许你设置 Docker 引擎仅运行已签名的镜像。对于签名本身，你可以使用
    Notary。
- en: Use hardened templates for Linux hosting systems such as AppArmor and SELinux.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用加强版模板来用于 Linux 托管系统，如 AppArmor 和 SELinux。
- en: 'If we follow up on all the recommendations of Docker, we will have tested,
    immutable images that we can use to deploy containers on Kubernetes, for instance.
    Kubernetes will use the trusted image repository and takes care of provisioning,
    scaling, and load balancing the containers. One of the security features of Kubernetes
    is its support for rolling updates: if the image repository is updated with patches
    or enhancements, Kubernetes will deploy the new versions and destroy the previous
    ones. With this feature, developers will always be sure that only the latest,
    hardened versions of images are used.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们遵循 Docker 的所有建议，我们将拥有经过测试的、不可变的镜像，可以用于在 Kubernetes 上部署容器。例如，Kubernetes 将使用可信的镜像仓库，并负责容器的供应、扩展和负载均衡。Kubernetes
    的一项安全功能是支持滚动更新：如果镜像仓库更新了补丁或增强功能，Kubernetes 将部署新版本并销毁旧版本。通过这一功能，开发人员可以始终确保只有最新的、经过强化的镜像版本被使用。
- en: Applying secrets management
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用机密管理
- en: 'Database credentials, API keys, certificates, and access tokens must be stored
    in a safe place at all times. The use of CI/CD and containers doesn''t change
    that. It''s strongly recommended to use a vault outside the repositories that
    the pipelines access for CI/CD. The best practices for secret management are as
    follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库凭证、API 密钥、证书和访问令牌必须始终存储在安全的地方。使用 CI/CD 和容器并不会改变这一点。强烈建议使用一个位于管道访问的 CI/CD
    仓库之外的保管库。机密管理的最佳实践如下：
- en: Encryption at rest and in transit. AES-256 encryption keys are recommended.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态和传输加密。建议使用 AES-256 加密密钥。
- en: Secrets, such as keys, must never be stored in Git/GitHub repositories.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机密，如密钥，绝不能存储在 Git/GitHub 仓库中。
- en: It's advised that secrets are injected into the application via a secure string
    as an environment variable.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建议通过将机密作为环境变量注入应用程序中的安全字符串。
- en: Hashicorp (Terraform) offers Vault as an open source solution for securely accessing
    secrets. The service allows us to easily rotate, manage, and retrieve database
    credentials, API keys, and other secrets throughout their life cycles.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Hashicorp（Terraform）提供了 Vault 作为一个开源解决方案，用于安全地访问机密。该服务使我们能够轻松旋转、管理和检索数据库凭证、API
    密钥以及其他机密，并贯穿其生命周期。
- en: A more robust solution is provided by CyberArk. CyberArk Conjur is a platform-independent
    secrets management solution, specifically architected for securing containers
    and microservices. The solution is platform-agnostic, meaning that it can be deployed
    to any cloud or on-premises system.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: CyberArk 提供了一个更强大的解决方案。CyberArk Conjur 是一个平台无关的机密管理解决方案，专门设计用于保护容器和微服务。该解决方案是平台无关的，意味着它可以部署到任何云环境或本地系统。
- en: Both tools integrate with native environments for key management in, for example,
    Azure and AWS, which use Azure Key Vault and AWS Secrets Manager, respectively.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个工具与本地环境中的密钥管理集成，例如，Azure 和 AWS，分别使用 Azure Key Vault 和 AWS Secrets Manager。
- en: Applying DevSecOps to AWS, Azure, and GCP
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 DevSecOps 应用于 AWS、Azure 和 GCP
- en: In the previous sections, we discussed the DevSecOps principles and how the
    pipeline is built with embedded security. In this section, we will look at the
    best practices of applying DevSecOps to the major public cloud platforms, that
    is, AWS, Azure, and **Google Cloud Platform** (**GCP**).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们讨论了 DevSecOps 原则以及如何构建嵌入安全性的管道。在本节中，我们将探讨如何将 DevSecOps 应用于主要公共云平台的最佳实践，即
    AWS、Azure 和**Google Cloud Platform**（**GCP**）。
- en: Working with DevSecOps in AWS CodePipeline
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 AWS CodePipeline 中使用 DevSecOps
- en: 'Before we start exploring DevSecOps in AWS, we need to understand that deployments
    in AWS should be based on the principles of the **Cloud Adoption Framework** (**CAF**).
    That framework covers specific security tasks and responsibilities, grouped into
    the four categories or principles for enterprise security that we discussed in
    [*Chapter 11*](B17492_11_ePub_RK.xhtml#_idTextAnchor131), *Understanding Security
    in DevOps*:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始探索 AWS 中的 DevSecOps 之前，需要理解 AWS 中的部署应该基于**云采用框架**（**CAF**）的原则。该框架涵盖了特定的安全任务和责任，分为我们在[*第11章*](B17492_11_ePub_RK.xhtml#_idTextAnchor131)《理解
    DevOps 中的安全性》讨论的四个类别或原则，即企业安全性：
- en: Prevention
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防范
- en: Detection
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测
- en: Correction
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更正
- en: Direction
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方向
- en: Note
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: AWS refers to these principles with different terminology for correction and
    direction. In CAF, these are subsequently called detective and responsive.
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: AWS 使用不同的术语来表示这些原则，以进行更正和方向。在 CAF 中，这些原则随后被称为侦测和响应。
- en: 'AWS offers native solutions to provide controls for managing security postures
    in CI/CD pipelines: Amazon CloudWatch Alarms, AWS CloudTrail, Amazon CloudWatch
    Events, AWS Lambda, and AWS Config. The following diagram shows the CI/CD pipeline
    for DevSecOps using these solutions:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 提供了本地解决方案来管理 CI/CD 管道中的安全态势：Amazon CloudWatch Alarms、AWS CloudTrail、Amazon
    CloudWatch Events、AWS Lambda 和 AWS Config。下图展示了使用这些解决方案的 DevSecOps CI/CD 管道：
- en: '![Figure 12.3 – Using CodePipeline and security groups in AWS'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.3 – 在 AWS 中使用 CodePipeline 和安全组'
- en: '](img/B17492_12_003.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_12_003.jpg)'
- en: Figure 12.3 – Using CodePipeline and security groups in AWS
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.3 – 在 AWS 中使用 CodePipeline 和安全组
- en: 'AWS CodePipeline is used to orchestrate the different steps in the pipeline.
    An important artifact is the security groups: these are the *bins* where the security
    posture of all the components that are developed and deployed in the pipeline
    is defined. It contains the templates, guardrails, and policies that have to be
    applied to these components. We can define three stages in the pipeline:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CodePipeline 用于协调管道中的不同步骤。一个重要的产物是安全组：这些是定义管道中所有开发和部署组件的安全态势的 *容器*。它包含必须应用于这些组件的模板、保护措施和策略。我们可以在管道中定义三个阶段：
- en: '**Source or commit**: Static code analysis is performed on the code that is
    pulled from an S3 bucket. In the case of security group breaches, the build will
    be stopped.'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**来源或提交**：对从 S3 桶中拉取的代码进行静态代码分析。如果发生安全组违规，构建过程将被停止。'
- en: '**Test**: In this stage, CloudFormation is used to create a stack that contains
    a **Virtual Private Cloud** (**VPC**) in AWS to run the tests. Next, AWS Lambda
    is used to run the code in the stack and validate the build. AWS calls this stack
    validation: Lambda functions will validate the stack against the security groups.
    If a breach is detected, a Lambda function will delete the stack and send out
    an error message. This is to prevent the stack and the code from entering the
    next stage.'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**测试**：在此阶段，使用 CloudFormation 创建一个包含 AWS 中 **虚拟私有云**（**VPC**）的堆栈来运行测试。接下来，使用
    AWS Lambda 在堆栈中运行代码并验证构建。AWS 称此为堆栈验证：Lambda 函数将根据安全组验证堆栈。如果检测到违规，Lambda 函数会删除堆栈并发送错误消息。这是为了防止堆栈和代码进入下一个阶段。'
- en: '**Production**: After a successful stack validation, a Lambda function is triggered
    to prepare the stack for production using CloudFormation templates. This *change
    set* – translating the test stack into production with production templates –
    is then executed.'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**生产**：在成功的堆栈验证后，触发 Lambda 函数使用 CloudFormation 模板准备生产环境。这个 *变更集*——将测试堆栈转化为生产环境堆栈并使用生产模板——随后会执行。'
- en: Tip
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提示
- en: AWS provides samples for CloudFormation templates and pipelines at [https://github.com/awslabs/automating-governance-sample/tree/master/DevSecOps-Blog-Code](https://github.com/awslabs/automating-governance-sample/tree/master/DevSecOps-Blog-Code).
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: AWS 提供了 CloudFormation 模板和管道的示例，访问地址：[https://github.com/awslabs/automating-governance-sample/tree/master/DevSecOps-Blog-Code](https://github.com/awslabs/automating-governance-sample/tree/master/DevSecOps-Blog-Code)。
- en: Examples of items that are checked against security groups can be validating
    user access and permissions, access controls to the S3 buckets, and the policies
    to create instances using, for example, EC2 compute resources. CloudWatch and
    CloudTrail are used to monitor the components, the access levels, and their usage,
    and will collect logs from events that are triggered during the execution of the
    various steps in the pipeline.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 检查安全组中的项目示例包括验证用户访问权限、S3 桶的访问控制、以及使用 EC2 计算资源创建实例的策略等。CloudWatch 和 CloudTrail
    用于监控组件、访问级别及其使用情况，并收集在管道各个步骤执行过程中触发的事件日志。
- en: Working with DevSecOps using GitHub and Azure services
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 GitHub 和 Azure 服务与 DevSecOps 一起工作
- en: 'Microsoft Azure uses a different approach to DevSecOps: it leverages the scan
    possibilities of GitHub and the features of **Azure Kubernetes Services** (**AKS**),
    next to Azure Pipelines, which is integrated into Azure DevOps and Azure Security
    Center for storing the security postures. The following diagram shows a high-level
    architecture for a security embedded CI/CD pipeline using GitHub and Azure services:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Azure 使用不同的 DevSecOps 方法：它利用 GitHub 的扫描功能和 **Azure Kubernetes 服务**（**AKS**）的特性，除了
    Azure Pipelines，它集成于 Azure DevOps 和 Azure Security Center 中，用于存储安全态势。下图展示了使用 GitHub
    和 Azure 服务的嵌入式安全 CI/CD 管道的高级架构：
- en: '![Figure 12.4 – DevSecOps with GitHub and Azure services'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.4 – 使用 GitHub 和 Azure 服务进行 DevSecOps'
- en: '](img/B17492_12_004.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_12_004.jpg)'
- en: Figure 12.4 – DevSecOps with GitHub and Azure services
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.4 – 使用 GitHub 和 Azure 服务的 DevSecOps
- en: The numbers in the preceding diagram represent the order in which steps are
    taken. As soon as the containers are pushed to **Azure Container Registry** (**ACR**),
    they are scanned against the policies that are stored in Azure Policies. Next,
    the appropriate security keys are fetched to authenticate the containers to **Azure
    Kubernetes Service** (**AKS**). Only when all the checks have passed will the
    code be pushed to the application gateway.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图中的数字表示步骤的执行顺序。容器一旦推送到 **Azure 容器注册表**（**ACR**），就会根据存储在 Azure 策略中的政策进行扫描。接下来，适当的安全密钥将被获取，以验证容器是否能通过
    **Azure Kubernetes Service**（**AKS**）进行认证。只有在所有检查通过后，代码才会被推送到应用网关。
- en: 'Let''s look at this in a bit more detail:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看一下这个过程：
- en: '**Source**: The solution starts with code analysis in GitHub, which involves
    using CodeQL and Dependabot to detect vulnerabilities in the source code and dependencies,
    respectively.'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**来源**：该解决方案从 GitHub 中的代码分析开始，包括使用 CodeQL 和 Dependabot 来检测源代码和依赖项中的漏洞。'
- en: '**Test**: Once the code has been validated, it''s packaged in a Docker container
    and deployed to a test environment using Azure Dev Spaces. This orchestration
    is done through Azure Pipelines. Azure Dev Spaces will build an isolated test
    environment using AKS. This is comparable to how CloudFormation in AWS builds
    stacks.'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**测试**：一旦代码经过验证，它就被打包成 Docker 容器，并通过 Azure Dev Spaces 部署到测试环境中。这一协调工作是通过 Azure
    Pipelines 完成的。Azure Dev Spaces 将使用 AKS 构建一个隔离的测试环境。这类似于 AWS 中 CloudFormation 构建堆栈的方式。'
- en: '**Scan**: Containers are stored in the ACR, where they are scanned against
    the security posture. For this, Azure uses Azure Security Center, which is a huge
    library that holds all security policies for environments that are enrolled in
    Azure.'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**扫描**：容器存储在 ACR 中，在这里它们会根据安全状态进行扫描。为此，Azure 使用 Azure Security Center，它是一个庞大的库，存储了所有已注册环境的安全策略。'
- en: '**Production**: Scanned containers are pushed to a Kubernetes cluster using
    AKS. Azure Policies are used to validate the compliance of provisioned clusters
    and containers.'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**生产**：扫描后的容器通过 AKS 推送到 Kubernetes 集群。Azure 策略用于验证已配置集群和容器的合规性。'
- en: 'Just like AWS, Azure uses several different solutions to provide an end-to-end
    solution that embeds security rules, policies, and postures throughout the whole
    CI/CD process. However, all these solutions start with a repository where these
    security guardrails and guidelines are stored and managed: security groups managed
    through AWS Security Hub or, in Azure, the Azure Security Center.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 与 AWS 一样，Azure 使用多种不同的解决方案来提供一个端到端的解决方案，这些解决方案将安全规则、策略和状态嵌入整个 CI/CD 流程中。然而，所有这些解决方案都从一个存储并管理这些安全防护和指南的仓库开始：通过
    AWS Security Hub 管理的安全组，或者在 Azure 中是 Azure Security Center。
- en: Working with DevSecOps in Google Cloud using Anthos and JFrog
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Google Cloud 中使用 Anthos 和 JFrog 与 DevSecOps 合作
- en: GCP offers an interesting best practice solution for implementing DevSecOps
    pipelines using Anthos and JFrog. With this, it doesn't only provide a cloud-native
    pipeline, but also a solution to develop and deploy for hybrid environments, using
    GCP and on-premises systems.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: GCP 提供了一个有趣的最佳实践解决方案，用于通过 Anthos 和 JFrog 实现 DevSecOps 流水线。通过这个方案，它不仅提供了一个云原生流水线，还为混合环境提供了解决方案，能够同时使用
    GCP 和本地系统进行开发和部署。
- en: This is interesting for enterprises since a lot of enterprises will not move
    their IT systems completely to public clouds. Most enterprises are expected to
    move more and more systems to the cloud, but some of their systems will remain
    on private stacks. CI/CD pipelines that cater for both cloud and on-premises solutions
    are favorable and with Kubernetes, they are relatively easy to set up.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这对企业来说很有意思，因为很多企业不会将其 IT 系统完全迁移到公有云。预计大多数企业将会把越来越多的系统迁移到云端，但一些系统仍会保留在私有堆栈中。针对云端和本地解决方案的
    CI/CD 流水线是比较受欢迎的，使用 Kubernetes 时，它们相对容易搭建。
- en: 'The architecture is shown in the following diagram:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 架构如以下图所示：
- en: '![Figure 12.5 – High-level architecture of using JFrog Artifactory and Google
    Anthos'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.5 – 使用 JFrog Artifactory 和 Google Anthos 的高层架构'
- en: '](img/B17492_12_005.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_12_005.jpg)'
- en: Figure 12.5 – High-level architecture of using JFrog Artifactory and Google
    Anthos
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.5 – 使用 JFrog Artifactory 和 Google Anthos 的高层架构
- en: 'GCP advocates the use of JFrog Artifcatory and JFrog Xray:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: GCP 提倡使用 JFrog Artifactory 和 JFrog Xray：
- en: '**JFrog Artifactory** takes care of storing artifacts that are used when building
    applications. In this chapter, we saw that a pipeline starts by pulling code from
    source repositories. Developers need to be able to rely on the tooling that stores
    and orders artifacts – code building blocks – comprehensively and safely so that
    software delivery to the pipelines can be automated.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JFrog Artifactory** 负责存储在构建应用程序时使用的构件。在本章中，我们看到一个管道通过从源代码库中拉取代码开始。开发人员需要依赖能够全面且安全地存储和排序构件——即代码构建块——的工具，以便将软件交付到管道中并实现自动化。'
- en: '**JFrog XRay** scans the artifacts – the code building blocks – through Artifactory
    against known vulnerabilities and license compliance. XRay advocates the shift-left
    mentality by already scanning the source artifacts.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JFrog XRay** 通过 Artifactory 扫描构件——即代码构建块——以检测已知漏洞和许可证合规性。XRay 倡导通过提前扫描源构件来实现“向左移动”的思维模式。'
- en: 'The solution is shown in the following diagram:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案如以下图所示：
- en: '![Figure 12.6 – DevSecOps in Google Cloud using JFrog XRay'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.6 – 使用 JFrog XRay 的 Google Cloud 中的 DevSecOps'
- en: '](img/B17492_12_006.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_12_006.jpg)'
- en: Figure 12.6 – DevSecOps in Google Cloud using JFrog XRay
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.6 – 使用 JFrog XRay 的 Google Cloud 中的 DevSecOps
- en: In this solution, JFrog XRay is the security solution that is embedded in the
    pipeline. Builds are then pushed to production, using Kubernetes in GCP, and on
    Anthos. Anthos, however, ensures a consistent layer for deploying and managing
    Kubernetes clusters across the native cloud with **Google Kubernetes Engine**
    (**GKE**) and on-premises. This solution is not only feasible with GCP, but it
    can be used on top of VMWare stacks on-premises, as well as on AWS.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个解决方案中，**JFrog XRay** 是嵌入在管道中的安全解决方案。构建随后使用 GCP 中的 Kubernetes 和 Anthos 推送到生产环境。然而，Anthos
    确保在本地云和 **Google Kubernetes Engine**（**GKE**）以及本地环境中，部署和管理 Kubernetes 集群的一致性层。这个解决方案不仅在
    GCP 上可行，还可以在本地的 VMWare 堆栈以及 AWS 上使用。
- en: Planning for deployment
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署规划
- en: So far, we've discussed the reference architecture for DevSecOps pipelines and
    the best practices for AWS, Azure, and GCP. If we have the architecture, the next
    step would be planning to deploy DevSecOps and the pipelines in our enterprise.
    That's the topic of this final section.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了 DevSecOps 管道的参考架构以及 AWS、Azure 和 GCP 的最佳实践。如果我们有了架构，下一步就是规划在企业中部署
    DevSecOps 和管道。这是最后一节的主题。
- en: 'There are three major steps that enterprises will need to follow to implement
    DevSecOps:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 企业需要遵循三个主要步骤来实施 DevSecOps：
- en: '**Assess the enterprise security**: Enterprises will likely already have adopted
    security policies and taken measures to protect their systems. They will also
    need to adhere to security standards and frameworks, because of governmental or
    industry regulations. Security specialists will have conducted risk assessments
    and analyzed possible threats. These specialists understand and manage the security
    controls. This is, by default, the starting point of merging security into the
    DevOps practice. A very strong recommendation is that DevOps teams should not
    start without including security policies and standards for developing and deploying
    new code, not even in pilot projects or Proof of Concepts. Security must be a
    top priority from day 1\.'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**评估企业安全性**：企业可能已经采纳了安全策略并采取了措施来保护其系统。他们还需要遵守安全标准和框架，因为政府或行业的法规要求。安全专家将进行风险评估并分析可能的威胁。这些专家理解并管理安全控制。这是将安全性融合到
    DevOps 实践中的默认起点。强烈建议 DevOps 团队在没有包括开发和部署新代码的安全策略和标准的情况下，不应开始任何项目，即使是试点项目或概念验证。安全性必须从第一天开始就是优先事项。'
- en: '**Embed security into DevOps**: Security policies and standards are integrated
    into the development process. The DevOps workflows are matched against the security
    guidelines and guardrails. This includes vulnerability testing and code scanning,
    which we discussed extensively in this chapter. Without processes and tools in
    place, DevOps teams can''t start developing new code. The risk of increasing the
    attack surface of systems and, ultimately, causing immense damage to the enterprise
    is too big. Companies, both big and small, are under the constant threat of hackers
    and security threats. That brings us to step three.'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**将安全性嵌入 DevOps**：安全政策和标准被集成到开发过程中。DevOps 工作流程与安全指南和防护措施相匹配。这包括漏洞测试和代码扫描，我们在本章中已做了广泛讨论。如果没有相应的流程和工具，DevOps
    团队无法开始开发新代码。增加系统攻击面、最终给企业带来巨大损失的风险太大。无论大小企业，都在黑客和安全威胁的持续威胁之下。这就引出了第三步。'
- en: '**Train, train, train**: DevOps and DevSecOps aren''t only about technology
    – it''s a way of working and even thinking. Maybe even better formulated: it''s
    a culture, and people need to be trained in adopting that culture. That training
    is not a one-off. Staff, developers, and operators need to be trained constantly
    and consistently. Developers, operators, and security engineers need to be fully
    committed to applying the security controls throughout their work, and that implies
    that they always need to be aware of the risks an enterprise is facing in terms
    of security breaches and hacks.'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**培训，培训，再培训**：DevOps 和 DevSecOps 不仅仅是技术问题——它是一种工作方式，甚至是一种思维方式。或许更准确地说，它是一种文化，员工需要经过培训来适应这种文化。这种培训不是一次性的。员工、开发人员和运维人员需要不断和一致地接受培训。开发人员、运维人员和安全工程师需要全身心地致力于在工作中应用安全控制，这意味着他们始终需要意识到企业面临的安全漏洞和黑客攻击的风险。'
- en: 'Of course, proper tooling is essential. Enterprises are recommended to include
    the following tools as a minimum:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，适当的工具至关重要。建议企业至少包括以下工具：
- en: '**Testing**: This is the crucial element in DevSecOps. The market provides
    a massive number of tools for performing tests. Examples are Chef Inspec, Haikiri,
    and Infer.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**：这是 DevSecOps 中至关重要的环节。市场上提供了大量用于执行测试的工具。例如 Chef Inspec、Haikiri 和 Infer。'
- en: '**Alerting**: When security threats are detected, alerts need to be raised
    and sent out. Elastalert is an example of an alerting tool.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**警报**：当检测到安全威胁时，需要发出警报并进行通知。Elastalert 是一个警报工具的例子。'
- en: '**Automated remediation**: Tools such as StackStorm can help in providing remediation
    as soon as security issues are detected.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化修复**：像 StackStorm 这样的工具可以在安全问题被检测到时，立即提供修复措施。'
- en: '**Visualization**: Developers and operators need to be able to see what''s
    going on in systems. Grafana and Kibana are popular tools that help in visualizing
    and sharing security information.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可视化**：开发人员和运维人员需要能够看到系统中发生了什么。Grafana 和 Kibana 是帮助可视化和共享安全信息的流行工具。'
- en: This list is by no means intended to be exhaustive. The tools mentioned are
    third-party tools that integrate well with DevOps tooling and native tooling in
    AWS, Azure, and Google Cloud. Of course, the public cloud platforms themselves
    offer extensive security tooling. Examples are Sentinel and Azure Security Center
    in Azure, Security Hub in AWS, and the Security Command Center in GCP.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这份清单绝不打算是详尽无遗的。所提到的工具是与 DevOps 工具以及 AWS、Azure 和 Google Cloud 的原生工具兼容的第三方工具。当然，公有云平台本身也提供了广泛的安全工具。例如，Azure
    中的 Sentinel 和 Azure Security Center，AWS 中的 Security Hub，GCP 中的 Security Command
    Center。
- en: 'The benefits of DevSecOps should be clear after reading this chapter, but we
    will summarize this with a conclusion: with DevSecOps enterprises, we can achieve
    better collaboration between developers, operators, and security engineers and
    with that, ensure that security threats and vulnerabilities are detected at an
    early stage of development so that risks for the enterprise are minimized.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本章后，DevSecOps 的好处应该已经很清晰，但我们将通过总结来概括这一点：通过 DevSecOps，企业能够实现开发人员、运维人员和安全工程师之间的更好协作，从而确保在开发初期就能发现安全威胁和漏洞，最大限度地降低企业风险。
- en: We will elaborate on implementing security in DevOps in [*Chapter 14*](B17492_14_ePub_RK.xhtml#_idTextAnchor168),
    *Integrating DevSecOps with DevOps*, where we will also discuss DevSecOps governance.
    But first, we will learn how to work with and integrate industry security standards
    in DevOps in the next chapter.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[*第 14 章*](B17492_14_ePub_RK.xhtml#_idTextAnchor168)《将 DevSecOps 与 DevOps
    集成》中详细阐述在 DevOps 中实现安全性，我们也会讨论 DevSecOps 的治理。但首先，我们将在下一章学习如何在 DevOps 中使用和集成行业安全标准。
- en: Summary
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we studied the different components of DevSecOps. We learned
    that DevSecOps is not only about tooling and automation, but also very much about
    culture: DevOps teams have to collaborate with the security specialists in the
    enterprise and together, they must be fully committed to embracing and embedding
    security guidelines into developing and deploying new code. Tools can certainly
    help in achieving maximum security in DevOps. A larger part of this chapter was
    about architecting the DevSecOps practice.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了 DevSecOps 的不同组成部分。我们了解到，DevSecOps 不仅仅是工具和自动化的问题，它更是关于文化：DevOps 团队必须与企业中的安全专家协作，共同致力于将安全指南融入开发和部署新代码的过程。工具无疑可以帮助在
    DevOps 中实现最大程度的安全性。本章的一个重要部分是关于架构 DevSecOps 实践。
- en: Then, we discussed the best practices for DevSecOps in the major public cloud
    providers; that is, AWS, Azure, and Google Cloud. These practices typically include
    the use of Docker containers and Kubernetes as container orchestration platforms.
    We also learned how to scan code and secure the containers before deploying them
    to a production platform. Important activities include static code analysis and
    dynamic scanning.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们讨论了主要公共云提供商中 DevSecOps 的最佳实践；即 AWS、Azure 和 Google Cloud。这些实践通常包括使用 Docker
    容器和 Kubernetes 作为容器编排平台。我们还学习了如何扫描代码并在将容器部署到生产平台之前确保其安全。重要的活动包括静态代码分析和动态扫描。
- en: In the last section of this chapter, we discussed the steps an enterprise must
    take to implement the DevSecOps practice and provided some recommendations for
    the necessary tools.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后部分，我们讨论了企业必须采取的实施 DevSecOps 实践的步骤，并提供了一些关于所需工具的建议。
- en: Enterprises must typically adhere to governmental and industry security standards
    and frameworks. The next chapter is all about working with these standards in
    DevSecOps.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 企业通常必须遵守政府和行业的安全标准和框架。下一章将专门讲解在 DevSecOps 中如何使用这些标准。
- en: Questions
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the function of **software composition analysis** (**SCA**)?
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**软件组成分析**（**SCA**）的功能是什么？'
- en: What technique is used to keep containers secure?
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于保持容器安全的技术是什么？
- en: What is the native tool in AWS that's used to create stacks?
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS 中用于创建堆栈的本地工具是什么？
- en: The AWS, Azure, and GCP public cloud providers offer their own Kubernetes services
    to run containers. Name their respective services.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS、Azure 和 GCP 等公共云服务提供商提供了各自的 Kubernetes 服务来运行容器。请列举它们的相关服务。
- en: Further reading
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Blog on using AWS CodePipeline in DevSecOps: [https://aws.amazon.com/blogs/devops/implementing-devsecops-using-aws-codepipeline/#:~:text=%20Implementing%20DevSecOps%20Using%20AWS%20CodePipeline%20%201,%206%20Create%20change%20set%3A.%20%20More%20](https://aws.amazon.com/blogs/devops/implementing-devsecops-using-aws-codepipeline/#:~:text=%20Implementing%20DevSecOps%20Using%20AWS%20CodePipeline%20%201,%206%20Create%20change%20set%3A.%20%20More%20)'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 AWS CodePipeline 实现 DevSecOps 的博客：[https://aws.amazon.com/blogs/devops/implementing-devsecops-using-aws-codepipeline/#:~:text=%20Implementing%20DevSecOps%20Using%20AWS%20CodePipeline%20%201,%206%20Create%20change%20set%3A.%20%20More%20](https://aws.amazon.com/blogs/devops/implementing-devsecops-using-aws-codepipeline/#:~:text=%20Implementing%20DevSecOps%20Using%20AWS%20CodePipeline%20%201,%206%20Create%20change%20set%3A.%20%20More%20)
- en: 'Documentation on applying DevSecOps practices in Azure: [https://azure.microsoft.com/en-us/solutions/devsecops/](https://azure.microsoft.com/en-us/solutions/devsecops/)'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Azure 中应用 DevSecOps 实践的文档：[https://azure.microsoft.com/en-us/solutions/devsecops/](https://azure.microsoft.com/en-us/solutions/devsecops/)
- en: 'Documentation on DevSecOps CI/CD using GCP, Anthos, and JFrog: https://cloud.google.com/architecture/partners/a-hybrid-cloud-native-devsecops-pipeline-with-jfrog-artifactory-and-gke-on-prem#best_practices'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GCP、Anthos 和 JFrog 实现 DevSecOps CI/CD 的文档：[https://cloud.google.com/architecture/partners/a-hybrid-cloud-native-devsecops-pipeline-with-jfrog-artifactory-and-gke-on-prem#best_practices](https://cloud.google.com/architecture/partners/a-hybrid-cloud-native-devsecops-pipeline-with-jfrog-artifactory-and-gke-on-prem#best_practices)
- en: 'Documentation on security in Docker: [https://docs.docker.com/engine/security/trust/](https://docs.docker.com/engine/security/trust/)'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 中的安全性文档：[https://docs.docker.com/engine/security/trust/](https://docs.docker.com/engine/security/trust/)
