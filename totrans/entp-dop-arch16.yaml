- en: '*Chapter 13*: Working with DevSecOps Using Industry Security Frameworks'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An important artifact in security – and DevSecOps – is security frameworks.
    There are generic frameworks, such as **Center for Internet Security** (**CIS**),
    but typically, industries must comply with and report about compliancy according
    to specific industry security standards. These have an impact on the way security
    is handled within enterprises and therefore in the implementation of DevSecOps.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will explain the functionality and impact of frameworks and how
    to incorporate them into DevSecOps. This chapter includes a separate paragraph
    on the use and value of the MITRE ATT&CK framework since it is becoming more well-known
    and more widely accepted as a base framework.
  prefs: []
  type: TYPE_NORMAL
- en: After completing this chapter, you will have a good understanding of the most
    used security frameworks and how the controls of these frameworks can be applied
    to DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding industry security frameworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with the MITRE ATT&CK framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying frameworks to DevSecOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating compliance reports and guiding audits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding industry security frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IT has become more complex over the years. The same applies to IT security.
    There's a correlation between the two. Enterprise IT environments are no longer
    monolithic systems that sit in the basement of a company that's functioning as
    the enterprise's data center. Today, IT environments share different components
    and have connections to the outside world through internet connections. With that
    notion, systems are, *by default*, accessible through the internet. Yet, only
    authorized users should be able to access these systems. Hence, we need some strong
    defenses to protect systems from security breaches.
  prefs: []
  type: TYPE_NORMAL
- en: 'The level of required security will differ per industry. First of all, financial
    institutions will want to make sure that bank accounts can''t be compromised and
    that money is not being illegally transferred. Healthcare institutions need to
    protect their patients'' personal and health data. Manufacturers want to protect
    their intellectual property and patents. Above all, there are several overarching
    principles in terms of security, protecting data, identities, and hardening systems
    from outside attacks. It''s almost impossible to keep track of all this, and that''s
    where security frameworks come in: they provide guidance for implementing the
    right set of security policies in an enterprise.'
  prefs: []
  type: TYPE_NORMAL
- en: Before we learn how security frameworks impact CI/CD and DevOps, we will need
    to understand what these frameworks are. In short, a framework is a set of policies
    and documented guidelines on implementing and managing these policies. The policies
    themselves are focusing on identifying risks, mitigating risks, and reducing the
    attack surface of systems and procedures in case vulnerabilities are detected.
    This is a generic approach, but industry frameworks tune this approach to specific
    needs in an industry.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generic IT security frameworks include ISO IEC 27001/ISO 2700212, the **National
    Institute of Standards and Technology** (**NIST**) Cybersecurity Framework, **Center
    for Internet Security** (**CIS**), and **Control Objectives for Information and
    Related Technologies** (**COBIT**). Let''s explore these in a bit more detail
    first:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ISO IEC 27001/ISO 2700212/27017**: ISO 27001 is setting international standards
    for system security controls. The emphasis is on controls that detect threats
    that will have a severe impact on the availability and integrity of systems. ISO
    27002 sets additional standards to manage the controls themselves, such as user
    access management and maintaining asset inventories. ISO 27017 specifically targets
    the cloud. It deals with shared responsibilities in **Platform-as-a-Service**
    (**PaaS**) and **Software-as-a-Service** (**SaaS**) environments, secures deployments
    and removes cloud systems, and monitors cloud services, as a few examples.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NIST**: The NIST Cybersecurity Framework doesn''t specify controls, but it
    does provide five functions to enhance security: identify, protect, detect, respond,
    and recover. These functions allow organizations to set controls to manage data
    breach risks. Controls must include access control, measures to protect data,
    and also the awareness of staff. Respond calls for controls must describe how
    organizations should react to threats and attacks, including mitigation and communication
    guidelines. Recovery is the last resort: organizations need to have a clear strategy
    regarding how to recover from attacks, such as system and data recovery. The five
    NIST domains are shown in the following diagram:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 13.1 – The NIST cybersecurity framework'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_13_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.1 – The NIST cybersecurity framework
  prefs: []
  type: TYPE_NORMAL
- en: '**CIS**: CIS offers extensive frameworks with specific controls for platforms,
    operating systems, databases, and containers. Some of the CIS frameworks are embedded
    in platforms such as CIS for Azure and AWS. In these scenarios, the CIS benchmarks
    can be accessed from Azure Security Center and AWS Security Hub. The CIS benchmarks
    make sure that used components are *hardened*. The big difference compared to
    NIST is that NIST focuses on guidelines to assess risks, whereas CIS provides
    long lists of security controls and best practices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**COBIT**: COBIT was launched by **Information Systems Audit and Control Association**
    (**ISACA**), the international organization of IT security and audits. Originally,
    COBIT was about identifying and mitigating technical risks in IT systems, but
    with the recent release of the framework – COBIT 5 – it also covers business risks
    that are related to IT. COBIT is complicated to implement and manage since it
    covers the entire enterprise, including all IT management processes such as incident,
    problem, configuration, and change management.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are control frameworks. All of these frameworks may have *editions* that
    cover specific industry requirements, but typically, industries have to adhere
    to their *own* standards, as well as be fully compliant. This is important when
    industries are audited. In the last section of this chapter, we will discuss auditing
    in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: The major industry frameworks – actually, these are regulatory attestations
    – are **Health Insurance Portability and Accountability Act** (**HIPAA**) for
    healthcare, **Federal Risk and Authorization Management Program** (**FedRAMP**)
    for governmental organizations in the US, **General Data Protection Regulation**
    (**GDPR**) in the European Union, and **Payment Card Industry Data Security Standard**
    (**PCI-DSS**) for financial institutions.
  prefs: []
  type: TYPE_NORMAL
- en: All of these are global or at least regionally implemented, but there may also
    be specific national security regulations a company needs to apply. An example
    is the **New York Department of Financial Services** (**NYDFS**) Cybersecurity
    Regulation. This framework was released in 2017, placing security regulations
    on all financial institutions in the US. However, the rules in this framework
    are aligned with NIST and apply ISO 27001 standards. Yet, NYDSF does have some
    rules that supersede these generic frameworks. Under NYDSF, data encryption and
    enhanced multi-factor authentication are mandatory security controls for all inbound
    connections.
  prefs: []
  type: TYPE_NORMAL
- en: There's one framework that we haven't discuss yet and that's MITRE ATT&CK. MITRE
    ATT&CK is not a real framework, such as the ones that we discussed in this section.
    It's a knowledge base that covers tactics on how systems might be attacked and
    breached. It can, however, be used as input to define risk strategies and threat
    models to protect systems. In the next section, we will learn how to use MITRE
    ATT&CK.
  prefs: []
  type: TYPE_NORMAL
- en: Working with the MITRE ATT&CK framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Maybe it''s not a completely fair statement, but we will post it here regardless:
    MITRE ATT&CK lets you think from the attacker''s perspective when it comes to
    security. The strength of this framework is that anyone can contribute to it.
    It doesn''t really describe the actual vulnerabilities in systems, but more the
    techniques attackers could use to exploit these vulnerabilities. MITRE ATT&CK
    uses a matrix with 14 attack tactics. Next, it divides these tactics across major
    platforms or technologies, including cloud and containers. In the cloud, there''s
    a subdivision for Azure, AWS, and GCP.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The full MITRE ATT&CK framework can be found at [https://attack.mitre.org/](https://attack.mitre.org/).
    However, it is recommended to follow MITRE on Twitter as well at `@MITREattack`.
    The matrix is open source, so a lively community is contributing to the tactics
    and techniques that are collected in the framework. MITRE invites people to join
    the community and actively contribute to their findings.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will briefly go over the 14 tactics and then specifically
    address the ones for containers, since these are widely used in **Continuous Integration/Continuous
    Deployment** (**CI/CD**):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reconnaissance**: These techniques gather as much information as possible
    to prepare attacks. This includes scanning systems, but also social engineering,
    wherein the staff of organizations are used to get information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource development**: These techniques involve creating, purchasing, or
    stealing resources that hackers can use to execute an attack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Initial access**: This is the first attempt at gaining access to systems.
    This includes abusing valid (service) accounts and phishing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Execution**: This technique is about running malicious code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Persistence**: This technique gains access using backdoors. It uses containers
    to inject malicious code, boot, and log into initialization scripts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Privilege escalation**: This technique involves using exploits to leverage
    privileges on systems to eventually gain more control. When it comes to using
    containers, this is a commonly used tactic. Containers should always be hardened
    to prevent them from gaining extra privileges.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Defense evasion**: This involves tactics wherein code is used to go around
    intrusion detection, logging, and other prevention measures. In cloud environments,
    this tactic is used to manipulate cloud (coded) firewalls by, for example, entering
    through an unused environment in a different region or unprotected sandbox environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Credential access**: Typically, this involves brute-force attacks to get
    usernames and passwords.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Discovery**: This tactic is used to find user data, devices, applications,
    data, and services to gain as much information about the available systems as
    possible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lateral movement**: This tactic is used to move systems and data from one
    host to another, sometimes in a different environment that''s not under the control
    of the enterprise. Pass the hash and remote admin access are commonly used techniques.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Collection**: This tactic is used to collect data from keyboard strokes or
    screen captures, for instance. In the cloud, collecting API keys to access storage
    and key vaults are popular techniques.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Command and control**: When using this technique, hackers try to communicate
    with systems in an attempt to gain control of them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Exfiltration**: This tactic involves gaining control of data and data streams
    by, for instance, sending data to different storage environments and encrypting
    the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Impact**: This is a broad category and includes denial of service techniques
    and resource hijacking.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MITRE ATT&CK is not a magic wand: it doesn''t solve all security problems.
    It should be considered another source you can use to start protecting IT environments
    in a better way by providing different insights. It shows potential attack patterns
    and paths that security engineers can include in their security policies. MITRE
    ATT&CK provides insights from specific platforms and technologies, which makes
    it rather unique. Common attack tactics may have different paths and patterns
    in various platforms, and that''s where MITRE ATT&CK is a good guardrail.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In DevOps, scanning code is crucial. Static and dynamic scanning must be the
    default in CI/CD. Scanning is typically done against baselines. One baseline that
    is commonly used in DevOps is **OWASP**, the **Open Web Application Security Project**.
    OWASP is open source and yearly lists the top 10 vulnerabilities in applications.
    We will discuss OWASP in more detail in [*Chapter 14*](B17492_14_ePub_RK.xhtml#_idTextAnchor168),
    *Integrating DevSecOps with DevOps*.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will show you how the matrix can be used to better protect
    containers.
  prefs: []
  type: TYPE_NORMAL
- en: Using MITRE ATT&CK tactics for containers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So, how does MITRE ATT&CK work in practice? Let''s use the matrix for containers,
    since they are frequently used in CI/CD pipelines, as an example. First, we must
    go to the specific matrix on [https://attack.mitre.org/matrices/enterprise/containers/](https://attack.mitre.org/matrices/enterprise/containers/).
    You will recognize some of the 14 tactics that we discussed in the previous section.
    Not all of them are applicable; for containers, eight tactics have proven to be
    relevant:'
  prefs: []
  type: TYPE_NORMAL
- en: Initial access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Persistence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Privilege escalation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defense evasion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Credential access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Impact
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, we can look at one of these tactics. We will use **Execution** as an
    example, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.2 – Tab in MITRE ATT&CK for containers'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_13_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.2 – Tab in MITRE ATT&CK for containers
  prefs: []
  type: TYPE_NORMAL
- en: 'The top two in Execution are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Container Administration Command**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deploy Container**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we click on the first one, **Container Administration Command**, the matrix
    provides us with information on how a specific vulnerability in container administration
    has been exploited. The vulnerability itself may occur while managing the containers
    using, for instance, a Docker daemon or the Kubernetes API. These may allow remote
    access and management to be used while the containers are launched. MITRE gives
    two examples of techniques that have been used for this. The first technique is
    Hildegard, which makes it possible to execute commands on running containers using
    the kubelet API run command. Kinsing, the second technique that MITRE mentions,
    exploits an Ubuntu entry point to run shell scripts to take over container administration
    processes.
  prefs: []
  type: TYPE_NORMAL
- en: Next, the matrix provides mitigations. In the given examples, the mitigating
    actions are using read-only containers and limiting communications with the container
    service, daemon, or Kubernetes using remote access via SSH.
  prefs: []
  type: TYPE_NORMAL
- en: You will find that Kinsing also appears under the **Deploy Container** tab,
    next to the Doki exploit, which is a piece of malware that was discovered in the
    spring of 2020 and targets Docker containers.
  prefs: []
  type: TYPE_NORMAL
- en: The matrix will guide you through various exploits and help you mitigate them.
  prefs: []
  type: TYPE_NORMAL
- en: With that, we've discussed the contents of the various frameworks. In the next
    section, we will learn how to use them in DevSecOps and how compliance reports
    are created to show that frameworks have been applied.
  prefs: []
  type: TYPE_NORMAL
- en: Applying frameworks to DevSecOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will learn how to include the controls of frameworks in
    DevOps and embed them as DevSecOps. Good news: it''s not as hard as it may sound.
    The following diagram shows this process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.3 – Process of applying controls from security frameworks to DevOps'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_13_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.3 – Process of applying controls from security frameworks to DevOps
  prefs: []
  type: TYPE_NORMAL
- en: In general, we start by assessing the framework that the enterprise needs to
    apply to their IT environments. From that assessment, the different controls are
    derived and set to the development and deployment cycles of applications and infrastructure.
    As soon as code is pulled from the repositories, scanning starts against these
    controls.
  prefs: []
  type: TYPE_NORMAL
- en: We are using the CIS benchmark as an example here since CIS is the most used
    framework for setting security controls. Applying controls starts with the realization
    that in DevOps, the IT environments are highly dynamic by default. Everything,
    including the infrastructure, is turned into code, so applications will run in
    containers or in serverless mode. This calls for some specific controls.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some generic controls must be applied. These include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vulnerability management**: This must be implemented as a control before
    code is pushed to production, but with the principles of shift-left in mind, vulnerability
    scanning should already start from the moment that code is pulled from repositories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Access**: With this control, you can limit and manage the privileges of all
    resources, including containers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logging**: This includes the logs while building and testing code. Sometimes,
    only logs are collected in production environments, but that is not sufficient
    if you want to be in control of the DevOps cycle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These are generic. CIS has developed a specific framework for securing containers,
    as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.4 – The CIS Docker Benchmark'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_13_004.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.4 – The CIS Docker Benchmark
  prefs: []
  type: TYPE_NORMAL
- en: 'This benchmark, as CIS calls it, contains controls for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Linux host configuration; for example, ensuring a separate partition for containers
    and ensuring that only trusted users can control the Docker daemon.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker daemon configuration; for example, running the daemon as a non-root user
    if possible and ensuring that containers are restricted in gaining new privileges.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Container images and build file configuration; for example, ensuring that a
    container only uses trusted base images.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Container runtime configuration; for example, Linux kernel capabilities are
    restricted in containers and ensuring that privileged ports are not mapped in
    containers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CIS has some generic recommendations too, such as making sure that containers
    are hardened and that the Docker version is up to date.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: All CIS benchmarks can be downloaded for free at [https://www.cisecurity.org/](https://www.cisecurity.org/).
  prefs: []
  type: TYPE_NORMAL
- en: The benchmark not only tells you *what* controls should be in place but also
    gives recommendations on *how* to implement these, together with the rationale
    of *why* the controls should be there. Well, look at the example where CIS recommends
    having a separate partition for containers – control 1.1.1 in CIS v1.3.1 (2021)
    for Docker.
  prefs: []
  type: TYPE_NORMAL
- en: This starts with *profile applicability*. In control 1.1.1, this is set to Level
    1-Linux host. This means that the settings are only applicable to the Linux host,
    providing a clear security benefit without hampering the intended functionality
    of a component – in this case, the Linux host.
  prefs: []
  type: TYPE_NORMAL
- en: Next, the control itself is described, as well as the rationale behind it. In
    this example, it describes how Docker uses `/var/lib/docker` as the default to
    store all its components. The directory is shared with the Linux host, which means
    it can easily be filled up completely, making both Docker and the host unusable.
    Hence, a separate partition is recommended. Lastly, CIS provides a *manual* on
    how to do this by creating a separate partition for the `/var/lib/docker` mount
    point.
  prefs: []
  type: TYPE_NORMAL
- en: Do you have to follow through on all these recommendations? No. CIS has made
    a clear distinction between critical and important controls. Obviously, the critical
    ones should be implemented in all cases, but you will need to assess every control,
    regardless of whether it makes sense to implement them in your DevOps practice.
    The golden rule here is that if you implement a control, you need to adhere to
    it consistently and report on it for compliance. Enterprises will be audited on
    rules and policies they have implemented. In the last section of this chapter,
    we will discuss reports and audits.
  prefs: []
  type: TYPE_NORMAL
- en: Creating compliance reports and guiding audits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DevOps is taking a huge flight in enterprises. Embedding security in DevOps
    is a logical next step. But how can enterprises be sure that their DevOps and
    DevSecOps are compliant with the frameworks that we''ve discussed throughout this
    chapter? The answer to that question is: by audit. IT systems are regularly audited,
    and so should DevOps practices. Having said that, auditing DevOps is still *unchartered
    territory*, although major accounting firms such as KPMG and Deloitte have issued
    white papers on the subject.'
  prefs: []
  type: TYPE_NORMAL
- en: 'DevOps audits should include at least the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Evaluating the DevSecOps strategy**: Is the strategy clear? How is governance
    arranged? A DevOps strategy can be set per business unit or enterprise-wide. Both
    are fine, so long as the strategy is followed through consistently. The goals
    should be clear and adopted by every team. The same applies to the way of working
    across all disciplines in the team. Processes such as testing procedures and acceptance
    criteria must be transparent and adhered to without exceptions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Assessing the level of DevSecOps training**: Training is not just simply
    creating a presentation with a one-slider on **Scaled Agile Framework** (**SAFe**)
    and showing the DevOps cycles. DevOps is very much about culture, but sometimes,
    organizations simply get overwhelmed by a sudden new way of working. For example,
    implementing DevOps also means creating teams with the right skills. This needs
    to be organized and goes further than just releasing the **Spotify model** in
    an organization. Staff don''t organize themselves in guilds and squads just by
    telling them they must. An enterprise will need to train its staff in DevOps and
    make sure the teams have the right skill sets. Training also includes managing
    organizations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The Spotify model has become immensely popular in organizations as an approach
    to scaling the agile way of working, which DevOps is part of. The Spotify model,
    named after the agile way of working that was implemented by the audio-streaming
    service, advocates autonomy in teams, organized into squads. Each squad is allowed
    to choose its own toolsets and agile framework, such as Scrum or Kanban.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Reviewing the DevSecOps toolchain**: Is there an architecture that specifies
    the DevOps tools, and is it coherent? Does it serve the strategy and is it aligned
    with the IT strategy of the enterprise? For example, if the enterprise has an
    open source strategy, then the tools must adhere to that. Lastly, just like any
    tool used in the enterprise, it needs to be put under architecture change control.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reviewing the DevSecOps processes**: DevOps doesn''t mean that processes
    are not valid anymore. Enterprises will still need to have the basic IT processes
    in place, such as incident management, problem management, and change management.
    These processes must be documented, including their escalation levels. Also, clear
    descriptions of the roles in these processes must be provided and followed through
    when implementing DevSecOps. Security management takes a special position here
    in that it must describe how security policies are defined, how they are implemented
    and managed in the enterprise, and how they are embedded in the DevOps process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With that, we've studied the basic principles of security in DevOps and the
    industry frameworks for security. Now, we need to merge – or rather integrate
    – security into our DevOps practice. That's the topic of [*Chapter 14*](B17492_14_ePub_RK.xhtml#_idTextAnchor168),
    *Integrating DevSecOps with DevOps*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed various security frameworks. These frameworks
    are guidelines for setting security controls for the IT environments of the enterprise.
    These controls apply to systems and applications, and also to the DevOps practice.
    From the moment developers pull code from a repository and start the build, up
    until deployment and production, IT environments, including CI/CD pipelines, need
    to adhere to security controls. There are a lot of different frameworks. Some
    of them are generically and broadly accepted by enterprises, such as NIST, CIS,
    and COBIT.
  prefs: []
  type: TYPE_NORMAL
- en: We also discussed the MITRE ATT&CK framework, which takes a different angle
    by comparing itself to other security control frameworks. MITRE ATT&CK lists tactics
    and techniques that hackers may use or have used to exploit vulnerabilities. Just
    like CIS, MITRE ATT&CK lists specifics for various platforms and technologies,
    including containers that are commonly used in CI/CD.
  prefs: []
  type: TYPE_NORMAL
- en: In the last section, we looked at auditing DevSecOps. It's recommended to review
    topics such as the consistent usage of tools, processes, and the skills of the
    DevOps teams.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will integrate the security practice into DevOps and
    learn how enterprises can adopt a true DevSecOps strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What ISO standard is specifically for the cloud?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What two techniques does MITRE ATT&CK mention for containers under the execution
    tactic?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: CIS doesn''t mention the versioning of Docker as a control.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'KPMG, January 2020: [https://advisory.kpmg.us/articles/2020/role-of-internal-audit-devops.html](https://advisory.kpmg.us/articles/2020/role-of-internal-audit-devops.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Discover the Spotify model, a blogpost by Mark Cruth on Atlassian: [https://www.atlassian.com/agile/agile-at-scale/spotify#:~:text=It%20is%20now%20known%20as%20the%20Spotify%20model.,by%20focusing%20on%20autonomy%2C%20communication%2C%20accountability%2C%20and%20quality](https://www.atlassian.com/agile/agile-at-scale/spotify#:~:text=It%20is%20now%20known%20as%20the%20Spotify%20model.,by%20focusing%20on%20autonomy%2C%20communication%2C%20accountability%2C%20and%20quality)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Website of CIS: [https://www.cisecurity.org/](https://www.cisecurity.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Website of ISACA, where the COBIT 5 framework can be found: [https://www.isaca.org/](https://www.isaca.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Website of NIST: [https://www.nist.gov/](https://www.nist.gov/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Website of ISO: [https://www.iso.org/standards.html](https://www.iso.org/standards.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
