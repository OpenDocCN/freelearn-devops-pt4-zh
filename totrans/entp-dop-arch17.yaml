- en: '*Chapter 14*: Integrating DevSecOps with DevOps'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The title of this chapter may sound a bit odd, but DevSecOps and DevOps aren''t
    separate things. It should be one way of working: security should be integrated
    with the DevOps practice, instead of security principles being added on top of
    DevOps. This means that architects have to define one overarching governance model,
    integrate threat modeling into DevOps, and aim for an integrated toolset. Lastly,
    integrated monitoring needs to cover every aspect of the DevSecOps cycle. We will
    learn that integrated monitoring comes close to something that we discussed earlier
    in this book: AIOps. In this chapter, we will pull everything together.'
  prefs: []
  type: TYPE_NORMAL
- en: After completing this chapter, you will have learned how to implement governance,
    understand threat modeling, and understand the importance of it in the secure
    **software development life cycle** (**SDLC**). You will have also learned how
    security is embedded into continuous integration and how this is monitored, as
    well as about some of the major tools in this domain.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining governance in DevSecOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding and working with threat modeling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating tools and automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining governance in DevSecOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have drafted a DevSecOps architecture, identified processes, and
    then aligned these with the business goals of the enterprise. The next step is
    to manage all this, and that's the subject of governance. DevSecOps is not just
    a PowerPoint presentation and a Visio diagram showing the CI/CD pipelines. An
    enterprise needs skilled staff to work with it and a governance model that describes
    the secured digital operating model. In this section, we will discuss this by
    using the IT4IT framework by The Open Group as a best practice.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [*Chapter 6*](B17492_06_ePub_RK.xhtml#_idTextAnchor077), *Defining Operations
    in Architecture*, we introduced value streams for products and described how IT
    creates value. The model can be seen in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1 – IT4IT value streams'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_14_001.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.1 – IT4IT value streams
  prefs: []
  type: TYPE_NORMAL
- en: In IT4IT, **Governance, Risk, and Compliance** (**GRC**) is a supporting activity
    for the four value streams. This means that GRC is fully embedded in every value
    stream. What does GRC do?
  prefs: []
  type: TYPE_NORMAL
- en: 'Simply put, GRC is about achieving objectives while managing uncertainties
    by applying agreed and accepted industry business policies. Every business needs
    to adhere to certain policies. These can be international regulations for trading,
    national laws, and also industry-specific standards. This includes security and
    data privacy regulations. Implementing GRC is not a one time-effort: enterprises
    will need to adjust regularly. That''s where the GRC capability model comes in.
    This model is shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.2 – The model for Governance, Risk, and Compliance'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_14_002.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.2 – The model for Governance, Risk, and Compliance
  prefs: []
  type: TYPE_NORMAL
- en: 'This model consists of four elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Learn**: The objectives of the enterprise must be clearly defined, but these
    are set in the context wherein the enterprise is operating. For example, the objective
    of a hospital is making people better; the context is much broader and includes,
    for instance, relationships with pharmaceutical companies and health care insurance
    companies. The objectives and the context define the strategy of a company.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Align**: The objectives of the enterprise and potential threats that endanger
    the strategy of the enterprise are assessed. This leads to requirements and countermeasures
    so that the enterprise can achieve its objectives and grab new opportunities while
    mitigating the threats.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Perform**: This is the stage where undesired events are detected and actioned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Review**: The enterprise needs to constantly review if threats have been
    identified in time, rated appropriately, and that mitigating actions have been
    successful. This feeds back into learning, since the context might change and
    the strategy will need to be adapted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing and managing these capabilities requires governance. An enterprise
    will have to assign people to control these capabilities and the level of adoption
    of these capabilities at different levels in the enterprise. This includes integrating
    GRC capabilities into DevSecOps. How can we arrange a best practice governance
    model?
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to look at the different levels in the enterprise, and that''s
    what IT4IT does. The following diagram shows the high-level principles of the
    model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.3 – Model for different security governance levels in the enterprise'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_14_003.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.3 – Model for different security governance levels in the enterprise
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at these levels in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Enterprise level**: The key role at enterprise level is the enterprise architect,
    who is responsible for the architecture in the enterprise. At this level, the
    enterprise architect will work together with the **Chief Information Officer**
    (**CIO**). In modern enterprises, we see the role of the CIO changing and other
    roles being added. The **Chief Digital Officer** (**CDO**) and the Chief Data
    or Chief Privacy Officer appear more and more on the organizational charts. The
    CDO is an important position for implementing the digital transformation strategy,
    including the adoption of DevSecOps. Be aware that DevSecOps is never a strategic
    goal in itself: it''s a methodology that guides digital transformation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Value streams**: The enterprise level is the strategic level; the value streams
    are the tactical level. The critical roles at this level are the domain architect
    and the SecOps engineer. They need to oversee the implementation of overarching
    DevOps architectures and security in the various DevOps teams.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DevOps teams**: The golden rules in DevOps are you build it, you run it and
    you break it, you fix it. This doesn''t mean that there are no other rules – or
    better, guidelines – in DevOps. An enterprise seeks consistency in DevOps, across
    all the different teams. These teams will function autonomously, but they still
    need to adhere to centralized guidelines that are set at the enterprise level
    and implemented and managed at the value stream level. Why is this important?
    An enterprise service or product may very well be built by building blocks that
    are the responsibility of different DevOps teams. If the way of working, guidelines,
    and security guardrails are not aligned, the end product or service will most
    likely not meet the quality standards of the enterprise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@robakershoek`), who made extensive contributions to the IT4IT framework.
    One of his books is listed in the *Further reading* section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This section was about governance and controlling the processes in DevSecOps.
    In the next section, we will discuss how security teams and specialists can identify
    events that might impact how code is developed and deployed. A good understanding
    of and knowing how to work with threat modeling is a requirement.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding and working with threat modeling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we discussed the governance of security in the enterprise
    and how it's integrated as DevSecOps. In this section, we will learn how security
    issues can impact the SDLC. When it comes to integrating security in DevOps, you
    need to have a good understanding of threat modeling, which provides us with information
    on how security threats may affect how software code is developed and deployed.
    We'll start by explaining what threat modeling is by looking at the definition
    of **The Open Web Application Security Project** (**OWASP**). OWASP is an online
    community that provides insights into security threats, tools, and technology.
  prefs: []
  type: TYPE_NORMAL
- en: In essence, a threat model shows how security threats could impact the integrity
    of an application. The model assembles and analyzes security data and helps in
    making decisions on how to protect the application, thus improving the security
    of code and the hosting environment, by assessing the requirements, revisiting
    the design, and implementing improved security policies.
  prefs: []
  type: TYPE_NORMAL
- en: What is a threat? This is anything that impacts the application negatively and
    causes a failure or unwanted events, such as data leaks. Threat modeling identifies
    the possible vulnerabilities and then defines the mitigating actions. For identification,
    it can use the MITRE ATT&CK framework, which we discussed in the previous chapter.
    Threat modeling is more than just detecting security issues, or even preventing
    or fixing them.
  prefs: []
  type: TYPE_NORMAL
- en: Modeling is a structured, planned, and repeated activity that's used to continuously
    assess the environments and possible vulnerabilities, and then helps implement
    a structured approach to mitigate these vulnerabilities. Hence, threat modeling
    is something that needs to be conducted throughout the entire SDL, in which the
    model and the subsequent actions that are triggered by the model are continuously
    reviewed and refined. The reason for this is that during development, new features
    are added and maybe even new technologies. With that, there's a chance that new
    vulnerabilities – threats – will be introduced, so the model needs to be constantly
    revised.
  prefs: []
  type: TYPE_NORMAL
- en: 'Threat modeling typically involves the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scope analysis**: What is the scope of our threat model and analysis? Think
    of application code, programming language (for example C#, Python, or Java), APIs,
    virtual machines, platforms (think of cloud platforms such as AWS or Azure), database
    engines (for example SQL, Postgres, or Cassandra), and databases.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Identify threat agents**: In MITRE ATT&CK, we focus on the vulnerabilities
    and techniques in which these have been exploited. In threat modeling, we also
    identify who might be interested in an attack. OWASP calls these threat agents:
    these can be both internal and external. The reason for making this clear distinction
    is to identify if environments are *fault-tolerant* for insiders or easy to breach
    from the outside.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Assess mitigations**: OWASP refers to this as countermeasures. Known mitigations
    – for instance, the possibility to enroll patches – must be included in the model.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Assess vulnerabilities**: If you know the scope, the possible attackers,
    and have identified possible countermeasures, then we can start analyzing vulnerabilities.
    Are these in the scope, who can they be exploited by, and what specific mitigating
    actions can be taken to prevent or minimize the impact?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Prioritize risks**: Analyze the likelihood that vulnerabilities are being
    exploited and what the actual damage would be. This defines the priority of the
    threat.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Execute mitigation**: Based on the priority, mitigating actions must be set
    in action to reduce the risks that have been identified.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The OWASP community manages its own GitHub pages for threat modeling. These
    can be found at [https://github.com/OWASP/www-community/blob/master/pages/Threat_Modeling.md](https://github.com/OWASP/www-community/blob/master/pages/Threat_Modeling.md).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'There are more models that define threat modeling, but in essence, they all
    come down to the same principles: assess, identify the threats, rate the threats,
    and identify risk-reducing actions.'
  prefs: []
  type: TYPE_NORMAL
- en: We have security under governance, and we know how to assess our environments
    in terms of possible threats. The next step is to have this automated and integrated
    into the DevOps tooling. If we have done that, then we can say that we've implemented
    DevSecOps.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating tools and automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this book, we've discussed the importance of testing a couple of
    times. DevOps advocates testing at every single stage in the life cycle, from
    development to deployment. This includes security testing. But how can we achieve
    this continuous integration? The goal is to have tests running at developer check-in,
    while they pull code from repositories, during the builds, and during the actual
    deployments, including staging.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at **continuous integration** (**CI**) first. Developers will frequently
    do check-ins on code; in some cases, this can be up to several builds per day.
    That''s the aim of CI and the agile way of working in DevOps: developers don''t
    work on huge programs anymore; instead, they apply small iterations of code builds,
    adding one feature at a time. This way, it''s easier to track changes in the code
    and, importantly, roll back if the addition is causing failures.'
  prefs: []
  type: TYPE_NORMAL
- en: CI is about integrating these changes and additions into the code. The developer
    checks in, modifies the code, and releases it to the feature branch. From there,
    it's pushed to production and back into the repository, where the source code
    gets updated with that small new chunk of code, all in a very short timeframe.
    Since these are small iterations of the code, integrating that code and implementing
    it in production is easier than doing so for big releases. However, this only
    works well if the code is tested along the way. All tests must be applied to every
    new build and to every modification of the build.
  prefs: []
  type: TYPE_NORMAL
- en: In DevOps pipelines, we run these tests in an automated way. This requires integrated
    tooling to package the code, running the scripts to launch the appropriate infrastructure,
    applying the security policies, launching monitoring, and executing the tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'In conclusion, testing is done throughout the entire development and deployment
    cycle. The following diagram shows what we mean by this, while also applying the
    principle of shift left:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.4 – Applying shift left in security testing'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B17492_14_004.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 14.4 – Applying shift left in security testing
  prefs: []
  type: TYPE_NORMAL
- en: 'This includes security testing. After all, the goal is to integrate this with
    the DevOps tools and automate the CI/CD pipelines. We run security tests at the
    following instances:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Code Repository**: Checking in and pulling source code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build**: Writing, modifying, and compiling the code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pre-release or staging**: Production-like testing before the actual deployment
    to production and the master branch'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [*Chapter 12*](B17492_12_ePub_RK.xhtml#_idTextAnchor145), *Architecting for
    DevSecOps*, we discussed the various types of scanning that we can apply to pipelines,
    such as **Static Application Security Testing** (**SAST**) and **Dynamic Application
    Security Testing** (**DAST**).
  prefs: []
  type: TYPE_NORMAL
- en: 'All of these tests can and should be automated. For a lot of enterprises, this
    is a true paradigm shift. Many security engineers and managers will persist in
    manual testing, rather than automating security testing. The problem is that security
    testing will become a bottleneck in DevOps: deployment is halted or, at best,
    slowed down by security testing. That''s the reason why we want to integrate and
    automate security testing into our pipelines and at every stage of the SDLC.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, with automated and fully integrated security testing, we ensure that developers
    receive immediate feedback on vulnerabilities in the code. This will definitively
    improve the code.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Static Application Security Testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SAST is crucial. We briefly discussed this in [*Chapter 12*](B17492_12_ePub_RK.xhtml#_idTextAnchor145),
    *Architecting for DevSecOps*, so now, we will dive in a bit deeper.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to understand that there are two types of SAST:'
  prefs: []
  type: TYPE_NORMAL
- en: SAST tools that scan raw source code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SAST tools that scan decompiled source code from libraries, such as **Dynamic-Link
    Library** (**DLL**) or **Java Archive** (**JAR**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SAST tools scan the code line by line. They report where a potential vulnerability
    has been found in the code so that the developer knows exactly where to look.
    Most tools also rate the vulnerability and even provide suggestions for fixing
    the issue. Be aware that SAST tools need to be language-aware. They scan the source
    code, so they need to understand the language that the code is written in. Multiple
    SAST tools might be required if multiple languages are being used.
  prefs: []
  type: TYPE_NORMAL
- en: SAST tools are integrated into the CI/CD pipeline to enable scanning throughout
    the development process. Most tools identify security issues that are commonly
    reported and listed, such as those by OWASP. Every year, OWASP releases the top
    10 web application security risks. Currently, the top 10 lists, among others,
    code injection, sensitive data exposure, and insufficient monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The OWASP top 10 can be found at [https://owasp.org/www-project-top-ten/](https://owasp.org/www-project-top-ten/).
  prefs: []
  type: TYPE_NORMAL
- en: We will go back to monitoring in the last section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Dynamic Application Security Testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DAST doesn't scan code. Simply put, DAST tooling simulates attacks. In [*Chapter
    13*](B17492_13_ePub_RK.xhtml#_idTextAnchor159), *Working with DevSecOps Using
    Industry Security Frameworks*, we discussed the MITRE ATT&CK framework, which
    lists techniques that help exploit vulnerabilities. DAST tools run these techniques
    by injecting malicious code strings or by brute force. By doing this, DAST tries
    to identify vulnerabilities in the functionality of the application, rather than
    in the source code.
  prefs: []
  type: TYPE_NORMAL
- en: DAST is sophisticated, which means it's costly. It runs transactions through
    the application and with that, it's also depending on components that interact
    with the application. For example, you could think of the frontend application
    and the database in the backend. DAST tooling needs to be configured well to be
    effective.
  prefs: []
  type: TYPE_NORMAL
- en: On that last note, DAST comes close to penetration testing. Most security officers
    and engineers will rely on manual penetration testing to detect vulnerabilities
    in integrations between different application stacks and services, especially
    when these stacks and services are used by different platforms and providers.
    In modern IT, where systems consist of **Infrastructure-as-a-Service** (**IaaS**),
    **Platform-as-a-Service** (**PaaS**), and **Software-as-a-Service** (**SaaS**)
    hosted on various platforms such as AWS, Azure, or in private data centers, integrating
    and testing integration points becomes more and more relevant.
  prefs: []
  type: TYPE_NORMAL
- en: Please be aware that public cloud platforms have strict policies for penetration
    testing. As an example, AWS only supports this for a very limited number of services,
    such as their compute platform EC2\. Violating these policies might inflict penalties
    or, in the worst case, a ban on the usage of services.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating using CircleCI orbs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A rather new phenomenon in the world of DevSecOps integration, but worth mentioning
    here, is orbs – reusable snippets of YAML code that take care of repeatable actions,
    such as security scanning. Orbs allow for direct integration with popular security
    scanning tools. It's a concept of CircleCI, a San Francisco-based company that
    delivers tooling to automate CI.
  prefs: []
  type: TYPE_NORMAL
- en: It claims out-of-the-box integrations for these tools into CI/CD pipelines.
    As an example, orbs for Probely (a web vulnerability scanner) and SonarCloud (code
    analysis) are available, but developers can also create their own orbs and push
    these to the open source Orb Registry.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've covered the integrated security frameworks and tooling, we have
    to make sure that we keep track of the outcomes. In the last section, we will
    discuss monitoring in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A crucial element of security is ensuring that the necessary security policies
    are in place and that the environments are indeed protected. This may sound simple,
    but it requires proper configuration of monitoring. Developers need information
    to help them fix bugs in the first place but also to improve the code and with
    that, the application. This applies to customer experience and performance, but
    also to ensuring that the application remains protected. Hackers don''t sit on
    their hands: they constantly find out new ways of attacking systems. Hence, we
    need to constantly monitor what happens to and inside an application.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Security monitoring is not only about detecting unexpected behavior. It''s
    about analyzing all behavior. This provides insights to developers to help them
    improve their code. For that, monitoring needs to facilitate three main services:'
  prefs: []
  type: TYPE_NORMAL
- en: Collect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyze
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alert
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sometimes, storage and visualization are added to these services. However, storing
    monitoring data is more about logging, while visualization is about comprehensively
    presenting monitoring data. These are important services, but they are not core
    to monitoring itself. Of course, you will need methodologies to receive and view
    alerts. As an example, Grafana is a popular tool that provides cross-platform
    dashboards that allow us to query and visualize stored monitoring data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we get to implementing monitoring, the architect needs to assess the
    following four W questions:'
  prefs: []
  type: TYPE_NORMAL
- en: '*What* are we monitoring?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Why* are we monitoring *that* (and *why* not anything else)?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*When* are we monitoring *that*?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Who*''s paying attention (who needs to be informed)?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *what* is about collecting data, the *why* is triggering analyses, and the
    *who* is about sending alerts to the right people or entities within the enterprise.
    As we mentioned previously, monitoring properly is crucial to the feedback loop
    that we have in DevOps, including alerts regarding security events that may impact
    the systems. It's a big misunderstanding that systems that are code only and hosted
    on cloud platforms are monitored and secured by default. They are not. Platforms
    such as AWS, Azure, and Google Cloud merely provided huge toolboxes that you can
    use to secure code that you run on the platforms. Engineers will need to configure
    the monitoring themselves. This includes monitoring the infrastructure, such as
    the health statuses of the **virtual machines** (**VMs**) that are used in the
    cloud. A certain increase in the usage of the VM – an unexplainable peak in the
    CPU or memory of the VM – might indicate that something wrong.
  prefs: []
  type: TYPE_NORMAL
- en: Next, to be useful for DevOps, monitoring must collect metrics from the application
    itself. This way, monitoring provides information on the running state of the
    application. Applications must be enabled to provide this information to monitoring
    systems. This information is typically labeled in the code of the application.
    Examples include labels such as **debug** and **warning**. Monitoring will pick
    up this information and make sure that it gets to the engineers in a comprehensible
    format.
  prefs: []
  type: TYPE_NORMAL
- en: How do monitoring tools do that? There are a couple of ways it does this, but
    in most cases, tools use either agents that collect data on systems or they simulate
    – agentless – transactions. With transactions, tools will send a transaction to
    the application and analyze the response if and when the transaction is returned.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Transaction-based monitoring doesn't mean that these tools can't or won't use
    agents. There are agent and agentless systems. Some enterprises have policies
    that state that agents on their systems are prohibited because of overhead on
    systems, or because enterprises fear the intrusiveness of agents.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of monitoring agents, these can and should be part of the desired
    state configuration of the application when it''s deployed to the platform. Remember
    shift-left: this should be integrated into the entire DevOps chain so that monitoring
    starts from the moment code is pushed to the development, test, and staging systems.
    In other words, monitoring is not just for production.'
  prefs: []
  type: TYPE_NORMAL
- en: Because of the capabilities that monitoring tools must have, these tools can
    become very vast and complicated. Agents might lead to some so-called overhead
    on systems, meaning that the agents will increase their use of resources in systems
    or trigger more network traffic. These aspects should be taken into architectural
    consideration. Again, start with the four W questions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, enterprises might not end up with just one monitoring tool, but with
    a chain of tools. They might use AWS CloudWatch or Azure Monitor to monitor the
    cloud resources, Prometheus to collect real-time data in highly dynamic systems
    such as container platforms, and Sysdig for cloud-native applications. Specifically
    for security monitoring, enterprises can use Splunk Security Essentials or the
    cloud-native Azure Sentinel. Be aware that a lot of security tooling focuses on
    network and identity and access to systems, and not so much on the applications
    or application code. That''s why enterprises end up with monitoring toolchains:
    it''s for a good reason. Architects have a big say in what tools fulfill the needs
    of the enterprise.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We will only mention a couple of tools here. This is by no means meant to be
    exhaustive or to promote specific tools over other tools. The tools that are mentioned
    here are widely used in enterprises, but there are many other, great tools available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Engineers probably don''t want to use several consoles to watch the output
    of these different tools. Overarching enterprise suites such as ServiceNow and
    BMC Helix provide broker platforms that enable the single pane of glass view:
    various monitoring tools and data collection processes can be aggregated in this
    one suite. These are complex systems that require highly skilled professionals
    to implement and configure, but in a world where IT is becoming more complicated
    by the day, the investment is worthwhile. Regarding DevOps teams, remember that
    they are fully responsible for developing, deploying, and operating their code.
    You might not want to rely on these "monolith" types of overall management systems,
    but in enterprises with a wide variety of products and services, it''s essential
    to have a complete overview of all the assets, developments, and the state of
    these deployments.'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, we have adhered to security frameworks, defined the policies, and integrated
    the tools in our DevOps and CI/CD cycle, but are we really good to go? IT is changing
    rapidly and becoming more challenging every day. Attacks and breaches are in the
    news every day. This has a big impact on how we secure our systems. We can''t
    trust anyone in our enterprise networks anymore. On the other hand, we want to
    give developers as much freedom as possible so that we get the best results in
    terms of coding. After all, the first statement in DevOps is about trust: you
    build, you run it – because you can. But how do we deal with trust? That''s the
    final topic of this book: zero trust architectures and how they impact DevOps.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DevOps and DevSecOps are not separate things: security must be fully integrated
    with DevOps. In this chapter, we discussed how we integrate security in DevOps,
    not only focusing on scanning tools but mainly on governance, applying threat
    modeling, and monitoring our DevOps environments. For governance, we looked at
    the principles of GRC that allow enterprises to manage uncertainties – such as
    security risks – while defining strategies to achieve their business goals. This
    is the foundational step to integrating security into all the layers of the enterprise
    and with that, the development of products and services.'
  prefs: []
  type: TYPE_NORMAL
- en: To detect, recognize, and counterfeit attacks, we need to work with threat modeling.
    In this chapter, we discussed OWASP, which provides insights into how security
    events can impact businesses. Next, we look at security scanning in a more detailed
    way. SAST and DAST are necessities in DevSecOps.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the last section, we learned about the various steps that an architect needs
    to take to implement monitoring. They need to ask themselves four basic questions:
    what are we monitoring?, why are we monitoring that?, when do we monitor that?,
    and who needs to be informed? We also looked at the characteristics of monitoring
    tools.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Security is about trust and in modern IT, with an increasing number and variety
    of attacks, the basic rule is that enterprises can''t trust anyone or anything
    anymore. This leads to a specific area in architectures: zero trust. This is the
    topic of the final chapter of this book.'
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'True or False: In OWASP, threat agents can be both internal and external.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the two types of SAST tooling.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the three main functions of monitoring?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*IT4IT for managing the business of IT*, Rob Akershoek et al., The Open Group.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Blogpost on DevOps.com by Mike Vizard on the introduction of private orbs,
    2021: [https://devops.com/circleci-adds-private-orbs-to-devops-toolchain/#:~:text=Constructing%20an%20orb%20gives%20DevOps%20teams%20a%20relatively,of%20the%20DevOps%20team%20can%20more%20easily%20consume](https://devops.com/circleci-adds-private-orbs-to-devops-toolchain/#:~:text=Constructing%20an%20orb%20gives%20DevOps%20teams%20a%20relatively,of%20the%20DevOps%20team%20can%20more%20easily%20consume).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Article on ITSecuroty.org with in-depth insights into security testing and
    integration, by Adrian Lane, 2019: [https://itsecurity.org/enterprise-devsecops-security-test-integration-and-tooling/](https://itsecurity.org/enterprise-devsecops-security-test-integration-and-tooling/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An overview of popular security tools in DevOps: [https://dzone.com/articles/an-overview-of-security-testing-tools-in-devops](https://dzone.com/articles/an-overview-of-security-testing-tools-in-devops).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Hands-On Security in DevOps*, by Tony Hsiang-Chih Hsu, Packt Publishing, 2018.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
