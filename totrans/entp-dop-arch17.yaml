- en: '*Chapter 14*: Integrating DevSecOps with DevOps'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第14章*：将DevSecOps与DevOps集成'
- en: 'The title of this chapter may sound a bit odd, but DevSecOps and DevOps aren''t
    separate things. It should be one way of working: security should be integrated
    with the DevOps practice, instead of security principles being added on top of
    DevOps. This means that architects have to define one overarching governance model,
    integrate threat modeling into DevOps, and aim for an integrated toolset. Lastly,
    integrated monitoring needs to cover every aspect of the DevSecOps cycle. We will
    learn that integrated monitoring comes close to something that we discussed earlier
    in this book: AIOps. In this chapter, we will pull everything together.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章标题可能听起来有点奇怪，但DevSecOps和DevOps并不是分开的东西。它应该是一种工作方式：安全性应与DevOps实践集成，而不是将安全原则加到DevOps之上。这意味着架构师必须定义一个总体的治理模型，将威胁建模集成到DevOps中，并实现一个集成的工具集。最后，集成监控需要覆盖DevSecOps周期的每个方面。我们将学习到，集成监控接近我们在本书早些时候讨论的内容：AIOps。在本章中，我们将把一切整合在一起。
- en: After completing this chapter, you will have learned how to implement governance,
    understand threat modeling, and understand the importance of it in the secure
    **software development life cycle** (**SDLC**). You will have also learned how
    security is embedded into continuous integration and how this is monitored, as
    well as about some of the major tools in this domain.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，您将学会如何实现治理，理解威胁建模，并理解它在安全**软件开发生命周期**（**SDLC**）中的重要性。您还将学会如何将安全性嵌入到持续集成中，并如何监控这一过程，以及该领域的一些主要工具。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将涵盖以下主要主题：
- en: Defining governance in DevSecOps
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义DevSecOps中的治理
- en: Understanding and working with threat modeling
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解并使用威胁建模
- en: Integrating tools and automation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成工具和自动化
- en: Implementing monitoring
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现监控
- en: Defining governance in DevSecOps
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义DevSecOps中的治理
- en: So far, we have drafted a DevSecOps architecture, identified processes, and
    then aligned these with the business goals of the enterprise. The next step is
    to manage all this, and that's the subject of governance. DevSecOps is not just
    a PowerPoint presentation and a Visio diagram showing the CI/CD pipelines. An
    enterprise needs skilled staff to work with it and a governance model that describes
    the secured digital operating model. In this section, we will discuss this by
    using the IT4IT framework by The Open Group as a best practice.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经草拟了一个DevSecOps架构，确定了流程，并将其与企业的业务目标对齐。下一步是管理这一切，这就是治理的主题。DevSecOps不仅仅是一个PowerPoint演示文稿和一个显示CI/CD管道的Visio图表。企业需要有技能的员工来使用它，并且需要一个治理模型来描述安全的数字化运营模式。在本节中，我们将通过使用The
    Open Group的IT4IT框架作为最佳实践来讨论这一点。
- en: 'In [*Chapter 6*](B17492_06_ePub_RK.xhtml#_idTextAnchor077), *Defining Operations
    in Architecture*, we introduced value streams for products and described how IT
    creates value. The model can be seen in the following diagram:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第6章*](B17492_06_ePub_RK.xhtml#_idTextAnchor077)《架构中的定义操作》中，我们介绍了产品的价值流，并描述了IT如何创造价值。该模型可在下图中看到：
- en: '![Figure 14.1 – IT4IT value streams'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.1 – IT4IT价值流'
- en: '](img/B17492_14_001.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_14_001.jpg)'
- en: Figure 14.1 – IT4IT value streams
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.1 – IT4IT价值流
- en: In IT4IT, **Governance, Risk, and Compliance** (**GRC**) is a supporting activity
    for the four value streams. This means that GRC is fully embedded in every value
    stream. What does GRC do?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在IT4IT中，**治理、风险和合规性**（**GRC**）是四个价值流的支持活动。这意味着GRC完全嵌入到每个价值流中。GRC做什么呢？
- en: 'Simply put, GRC is about achieving objectives while managing uncertainties
    by applying agreed and accepted industry business policies. Every business needs
    to adhere to certain policies. These can be international regulations for trading,
    national laws, and also industry-specific standards. This includes security and
    data privacy regulations. Implementing GRC is not a one time-effort: enterprises
    will need to adjust regularly. That''s where the GRC capability model comes in.
    This model is shown in the following diagram:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，GRC是通过应用已达成一致的行业商业政策来管理不确定性，从而实现目标。每个企业都需要遵守一定的政策。这些政策可以是国际贸易规定、国家法律，也可以是行业特定的标准。包括安全性和数据隐私规定。实施GRC并不是一次性的努力：企业需要定期调整。这就是GRC能力模型的作用。该模型如下图所示：
- en: '![Figure 14.2 – The model for Governance, Risk, and Compliance'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.2 – 治理、风险和合规性模型'
- en: '](img/B17492_14_002.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_14_002.jpg)'
- en: Figure 14.2 – The model for Governance, Risk, and Compliance
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.2 – 治理、风险和合规模型
- en: 'This model consists of four elements:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 该模型由四个元素组成：
- en: '**Learn**: The objectives of the enterprise must be clearly defined, but these
    are set in the context wherein the enterprise is operating. For example, the objective
    of a hospital is making people better; the context is much broader and includes,
    for instance, relationships with pharmaceutical companies and health care insurance
    companies. The objectives and the context define the strategy of a company.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**学习**：企业的目标必须清晰定义，但这些目标是在企业运营的背景下设定的。例如，医院的目标是让人们变得更健康；而其背景则更为广泛，包括与制药公司和健康保险公司等的关系。目标和背景共同定义了公司的战略。'
- en: '**Align**: The objectives of the enterprise and potential threats that endanger
    the strategy of the enterprise are assessed. This leads to requirements and countermeasures
    so that the enterprise can achieve its objectives and grab new opportunities while
    mitigating the threats.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对齐**：评估企业的目标和可能威胁，分析这些威胁对企业战略的危害。这将导致需求和对策，以确保企业实现目标，抓住新机遇的同时减轻威胁。'
- en: '**Perform**: This is the stage where undesired events are detected and actioned.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**执行**：这是检测到不期望事件并采取行动的阶段。'
- en: '**Review**: The enterprise needs to constantly review if threats have been
    identified in time, rated appropriately, and that mitigating actions have been
    successful. This feeds back into learning, since the context might change and
    the strategy will need to be adapted.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回顾**：企业需要不断回顾是否及时识别了威胁，是否进行了适当评级，并且缓解措施是否成功。这反馈到学习中，因为背景可能会发生变化，战略也需要进行调整。'
- en: Implementing and managing these capabilities requires governance. An enterprise
    will have to assign people to control these capabilities and the level of adoption
    of these capabilities at different levels in the enterprise. This includes integrating
    GRC capabilities into DevSecOps. How can we arrange a best practice governance
    model?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 实施和管理这些能力需要治理。企业必须为这些能力的控制分配人员，并在企业不同级别上确定这些能力的采纳程度。这包括将GRC能力集成到DevSecOps中。我们如何安排最佳实践治理模型？
- en: 'We will need to look at the different levels in the enterprise, and that''s
    what IT4IT does. The following diagram shows the high-level principles of the
    model:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要查看企业中的不同级别，这正是IT4IT所做的。下图展示了该模型的高层原则：
- en: '![Figure 14.3 – Model for different security governance levels in the enterprise'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 14.3 – 企业中不同安全治理级别的模型'
- en: '](img/B17492_14_003.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_14_003.jpg)'
- en: Figure 14.3 – Model for different security governance levels in the enterprise
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.3 – 企业中不同安全治理级别的模型
- en: 'Let''s look at these levels in more detail:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看看这些级别：
- en: '**Enterprise level**: The key role at enterprise level is the enterprise architect,
    who is responsible for the architecture in the enterprise. At this level, the
    enterprise architect will work together with the **Chief Information Officer**
    (**CIO**). In modern enterprises, we see the role of the CIO changing and other
    roles being added. The **Chief Digital Officer** (**CDO**) and the Chief Data
    or Chief Privacy Officer appear more and more on the organizational charts. The
    CDO is an important position for implementing the digital transformation strategy,
    including the adoption of DevSecOps. Be aware that DevSecOps is never a strategic
    goal in itself: it''s a methodology that guides digital transformation.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**企业级**：在企业级别，关键角色是企业架构师，负责企业架构。在这个层级，企业架构师将与**首席信息官**（**CIO**）合作。在现代企业中，我们看到CIO的角色在变化，并且有其他角色逐渐加入。**首席数字官**（**CDO**）和首席数据官或首席隐私官在组织架构中越来越常见。CDO是实施数字化转型战略的重要职位，包括采用DevSecOps。需要注意的是，DevSecOps本身从来不是战略目标：它是一种引导数字化转型的方法论。'
- en: '**Value streams**: The enterprise level is the strategic level; the value streams
    are the tactical level. The critical roles at this level are the domain architect
    and the SecOps engineer. They need to oversee the implementation of overarching
    DevOps architectures and security in the various DevOps teams.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**价值流**：企业级是战略层；价值流则是战术层。在这一层级，关键角色是领域架构师和SecOps工程师。他们需要监督在各个DevOps团队中实施的全局DevOps架构和安全措施。'
- en: '**DevOps teams**: The golden rules in DevOps are you build it, you run it and
    you break it, you fix it. This doesn''t mean that there are no other rules – or
    better, guidelines – in DevOps. An enterprise seeks consistency in DevOps, across
    all the different teams. These teams will function autonomously, but they still
    need to adhere to centralized guidelines that are set at the enterprise level
    and implemented and managed at the value stream level. Why is this important?
    An enterprise service or product may very well be built by building blocks that
    are the responsibility of different DevOps teams. If the way of working, guidelines,
    and security guardrails are not aligned, the end product or service will most
    likely not meet the quality standards of the enterprise.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DevOps团队**：DevOps中的黄金法则是你构建它，你运行它，你破坏它，你修复它。这并不意味着DevOps中没有其他规则——或者更确切地说，是指导方针。企业寻求在DevOps中跨不同团队保持一致性。这些团队将独立运作，但仍需要遵循企业层面设定的集中化指导方针，并在价值流层面加以实施和管理。为什么这很重要？企业服务或产品可能由不同DevOps团队负责的构建模块组成。如果工作方式、指导方针和安全防护没有对齐，最终产品或服务很可能无法达到企业的质量标准。'
- en: '`@robakershoek`), who made extensive contributions to the IT4IT framework.
    One of his books is listed in the *Further reading* section.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@robakershoek`)，他为IT4IT框架做出了广泛贡献。他的其中一本书列在*进一步阅读*部分。'
- en: This section was about governance and controlling the processes in DevSecOps.
    In the next section, we will discuss how security teams and specialists can identify
    events that might impact how code is developed and deployed. A good understanding
    of and knowing how to work with threat modeling is a requirement.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 本节内容是关于DevSecOps中治理和控制流程的。在下一节中，我们将讨论安全团队和专家如何识别可能影响代码开发和部署的事件。深入理解并掌握如何使用威胁建模是必需的。
- en: Understanding and working with threat modeling
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解和使用威胁建模
- en: In the previous section, we discussed the governance of security in the enterprise
    and how it's integrated as DevSecOps. In this section, we will learn how security
    issues can impact the SDLC. When it comes to integrating security in DevOps, you
    need to have a good understanding of threat modeling, which provides us with information
    on how security threats may affect how software code is developed and deployed.
    We'll start by explaining what threat modeling is by looking at the definition
    of **The Open Web Application Security Project** (**OWASP**). OWASP is an online
    community that provides insights into security threats, tools, and technology.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们讨论了企业安全治理以及它如何作为DevSecOps的一部分进行集成。在本节中，我们将学习安全问题如何影响软件开发生命周期（SDLC）。当涉及到在DevOps中集成安全性时，你需要对威胁建模有充分的理解，威胁建模为我们提供了关于安全威胁如何影响软件代码开发和部署的信息。我们将通过解释**开放Web应用程序安全项目**（**OWASP**）的定义来开始了解什么是威胁建模。OWASP是一个提供安全威胁、工具和技术见解的在线社区。
- en: In essence, a threat model shows how security threats could impact the integrity
    of an application. The model assembles and analyzes security data and helps in
    making decisions on how to protect the application, thus improving the security
    of code and the hosting environment, by assessing the requirements, revisiting
    the design, and implementing improved security policies.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，威胁模型展示了安全威胁如何影响应用程序的完整性。该模型汇集并分析安全数据，帮助做出如何保护应用程序的决策，从而通过评估需求、重新审视设计并实施改进的安全政策来提升代码和托管环境的安全性。
- en: What is a threat? This is anything that impacts the application negatively and
    causes a failure or unwanted events, such as data leaks. Threat modeling identifies
    the possible vulnerabilities and then defines the mitigating actions. For identification,
    it can use the MITRE ATT&CK framework, which we discussed in the previous chapter.
    Threat modeling is more than just detecting security issues, or even preventing
    or fixing them.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是威胁？任何负面影响应用程序并导致失败或不希望事件的东西，如数据泄露。威胁建模识别可能的漏洞，然后定义缓解措施。在识别阶段，它可以使用我们在上一章中讨论过的MITRE
    ATT&CK框架。威胁建模不仅仅是检测安全问题，甚至不只是防止或修复它们。
- en: Modeling is a structured, planned, and repeated activity that's used to continuously
    assess the environments and possible vulnerabilities, and then helps implement
    a structured approach to mitigate these vulnerabilities. Hence, threat modeling
    is something that needs to be conducted throughout the entire SDL, in which the
    model and the subsequent actions that are triggered by the model are continuously
    reviewed and refined. The reason for this is that during development, new features
    are added and maybe even new technologies. With that, there's a chance that new
    vulnerabilities – threats – will be introduced, so the model needs to be constantly
    revised.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 建模是一项结构化、计划性强且重复进行的活动，用于持续评估环境和可能的漏洞，并帮助实施结构化的方法来减轻这些漏洞。因此，威胁建模需要贯穿整个SDL（软件开发生命周期），其中模型以及由模型触发的后续行动需要不断审查和完善。原因在于，在开发过程中，可能会增加新的功能，甚至是新的技术。这样就有可能引入新的漏洞——威胁——因此，模型需要不断修订。
- en: 'Threat modeling typically involves the following steps:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 威胁建模通常包括以下步骤：
- en: '**Scope analysis**: What is the scope of our threat model and analysis? Think
    of application code, programming language (for example C#, Python, or Java), APIs,
    virtual machines, platforms (think of cloud platforms such as AWS or Azure), database
    engines (for example SQL, Postgres, or Cassandra), and databases.'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**范围分析**：我们的威胁模型和分析的范围是什么？可以考虑应用代码、编程语言（例如C#、Python或Java）、API、虚拟机、平台（比如AWS或Azure等云平台）、数据库引擎（例如SQL、Postgres或Cassandra）和数据库。'
- en: '**Identify threat agents**: In MITRE ATT&CK, we focus on the vulnerabilities
    and techniques in which these have been exploited. In threat modeling, we also
    identify who might be interested in an attack. OWASP calls these threat agents:
    these can be both internal and external. The reason for making this clear distinction
    is to identify if environments are *fault-tolerant* for insiders or easy to breach
    from the outside.'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**识别威胁代理**：在MITRE ATT&CK框架中，我们关注的是漏洞和这些漏洞被利用的技术。在威胁建模中，我们还需要识别可能对攻击感兴趣的人。OWASP称这些人为威胁代理：这些代理既可以是内部的，也可以是外部的。做出这一明确区分的原因是为了识别环境是否对内部人员具有*容错性*，或者是否容易从外部突破。'
- en: '**Assess mitigations**: OWASP refers to this as countermeasures. Known mitigations
    – for instance, the possibility to enroll patches – must be included in the model.'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**评估缓解措施**：OWASP称之为对策。已知的缓解措施——例如，能够注册补丁——必须包含在模型中。'
- en: '**Assess vulnerabilities**: If you know the scope, the possible attackers,
    and have identified possible countermeasures, then we can start analyzing vulnerabilities.
    Are these in the scope, who can they be exploited by, and what specific mitigating
    actions can be taken to prevent or minimize the impact?'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**评估漏洞**：如果你已经知道了范围、可能的攻击者，并识别了可能的对策，那么我们就可以开始分析漏洞。这些漏洞是否在范围内，可能被谁利用，以及可以采取哪些具体的缓解措施来防止或最小化影响？'
- en: '**Prioritize risks**: Analyze the likelihood that vulnerabilities are being
    exploited and what the actual damage would be. This defines the priority of the
    threat.'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**优先考虑风险**：分析漏洞被利用的可能性以及实际损害的程度。这定义了威胁的优先级。'
- en: '**Execute mitigation**: Based on the priority, mitigating actions must be set
    in action to reduce the risks that have been identified.'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**执行缓解措施**：根据优先级，必须采取缓解行动，以降低已识别的风险。'
- en: Tip
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提示
- en: The OWASP community manages its own GitHub pages for threat modeling. These
    can be found at [https://github.com/OWASP/www-community/blob/master/pages/Threat_Modeling.md](https://github.com/OWASP/www-community/blob/master/pages/Threat_Modeling.md).
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: OWASP社区管理着自己的GitHub页面，专门用于威胁建模。这些页面可以在[https://github.com/OWASP/www-community/blob/master/pages/Threat_Modeling.md](https://github.com/OWASP/www-community/blob/master/pages/Threat_Modeling.md)找到。
- en: 'There are more models that define threat modeling, but in essence, they all
    come down to the same principles: assess, identify the threats, rate the threats,
    and identify risk-reducing actions.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多定义威胁建模的模型，但从本质上讲，它们都归结为相同的原则：评估、识别威胁、评估威胁，并识别减少风险的行动。
- en: We have security under governance, and we know how to assess our environments
    in terms of possible threats. The next step is to have this automated and integrated
    into the DevOps tooling. If we have done that, then we can say that we've implemented
    DevSecOps.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在治理下管理安全，并且知道如何评估我们环境中的可能威胁。下一步是将这一过程自动化，并集成到DevOps工具中。如果我们完成了这一点，那么我们就可以说我们已经实现了DevSecOps。
- en: Integrating tools and automation
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成工具和自动化
- en: Throughout this book, we've discussed the importance of testing a couple of
    times. DevOps advocates testing at every single stage in the life cycle, from
    development to deployment. This includes security testing. But how can we achieve
    this continuous integration? The goal is to have tests running at developer check-in,
    while they pull code from repositories, during the builds, and during the actual
    deployments, including staging.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们已经多次讨论了测试的重要性。DevOps提倡在生命周期的每个阶段进行测试，从开发到部署。这也包括安全测试。但是我们如何实现这种持续集成呢？目标是在开发人员提交代码时运行测试，在拉取代码时运行测试，在构建过程中运行测试，并在实际部署时（包括预发布阶段）进行测试。
- en: 'Let''s look at **continuous integration** (**CI**) first. Developers will frequently
    do check-ins on code; in some cases, this can be up to several builds per day.
    That''s the aim of CI and the agile way of working in DevOps: developers don''t
    work on huge programs anymore; instead, they apply small iterations of code builds,
    adding one feature at a time. This way, it''s easier to track changes in the code
    and, importantly, roll back if the addition is causing failures.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们来看一下**持续集成**（**CI**）。开发人员会频繁地提交代码；在某些情况下，每天的提交次数可能达到多个。这就是CI的目标，以及DevOps中的敏捷工作方式：开发人员不再处理庞大的程序；相反，他们应用小规模的代码构建，每次添加一个功能。通过这种方式，更容易跟踪代码的变化，重要的是，如果添加的功能导致失败，能够轻松回滚。
- en: CI is about integrating these changes and additions into the code. The developer
    checks in, modifies the code, and releases it to the feature branch. From there,
    it's pushed to production and back into the repository, where the source code
    gets updated with that small new chunk of code, all in a very short timeframe.
    Since these are small iterations of the code, integrating that code and implementing
    it in production is easier than doing so for big releases. However, this only
    works well if the code is tested along the way. All tests must be applied to every
    new build and to every modification of the build.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: CI的核心是将这些变化和新增内容整合到代码中。开发人员提交代码，修改代码，并将其发布到功能分支。然后，代码被推送到生产环境并返回到仓库，源代码在极短的时间内更新了这一小块新代码。由于这些只是小规模的代码迭代，整合代码并在生产环境中实施要比处理大型发布更容易。然而，前提是代码在整个过程中都必须经过测试。每个新的构建和每个修改都必须进行测试。
- en: In DevOps pipelines, we run these tests in an automated way. This requires integrated
    tooling to package the code, running the scripts to launch the appropriate infrastructure,
    applying the security policies, launching monitoring, and executing the tests.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在DevOps管道中，我们以自动化方式运行这些测试。这需要集成工具来打包代码，运行脚本以启动适当的基础设施，应用安全策略，启动监控并执行测试。
- en: 'In conclusion, testing is done throughout the entire development and deployment
    cycle. The following diagram shows what we mean by this, while also applying the
    principle of shift left:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，测试贯穿整个开发和部署周期。下图展示了我们所说的内容，同时应用了Shift Left的原则：
- en: '![Figure 14.4 – Applying shift left in security testing'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![图14.4 – 在安全测试中应用Shift Left'
- en: '](img/B17492_14_004.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_14_004.jpg)'
- en: Figure 14.4 – Applying shift left in security testing
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.4 – 在安全测试中应用Shift Left
- en: 'This includes security testing. After all, the goal is to integrate this with
    the DevOps tools and automate the CI/CD pipelines. We run security tests at the
    following instances:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这包括安全测试。毕竟，目标是将其与DevOps工具集成，并自动化CI/CD管道。我们在以下实例中运行安全测试：
- en: '**Code Repository**: Checking in and pulling source code'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码仓库**：提交和拉取源代码'
- en: '**Build**: Writing, modifying, and compiling the code'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建**：编写、修改和编译代码'
- en: '**Pre-release or staging**: Production-like testing before the actual deployment
    to production and the master branch'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布前或预发布**：在实际部署到生产环境和主分支之前进行类似生产环境的测试'
- en: In [*Chapter 12*](B17492_12_ePub_RK.xhtml#_idTextAnchor145), *Architecting for
    DevSecOps*, we discussed the various types of scanning that we can apply to pipelines,
    such as **Static Application Security Testing** (**SAST**) and **Dynamic Application
    Security Testing** (**DAST**).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第12章*](B17492_12_ePub_RK.xhtml#_idTextAnchor145)《为DevSecOps架构》中，我们讨论了可以应用于管道的各种扫描类型，如**静态应用安全测试**（**SAST**）和**动态应用安全测试**（**DAST**）。
- en: 'All of these tests can and should be automated. For a lot of enterprises, this
    is a true paradigm shift. Many security engineers and managers will persist in
    manual testing, rather than automating security testing. The problem is that security
    testing will become a bottleneck in DevOps: deployment is halted or, at best,
    slowed down by security testing. That''s the reason why we want to integrate and
    automate security testing into our pipelines and at every stage of the SDLC.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些测试都可以并且应该自动化。对于许多企业来说，这是一次真正的范式转变。许多安全工程师和经理会坚持手动测试，而不是自动化安全测试。问题在于，安全测试将成为
    DevOps 的瓶颈：部署会被安全测试停止，或者至少会被安全测试减慢。这就是为什么我们要将安全测试集成并自动化到我们的管道中，并在整个 SDLC 的每个阶段进行。
- en: Next, with automated and fully integrated security testing, we ensure that developers
    receive immediate feedback on vulnerabilities in the code. This will definitively
    improve the code.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，通过自动化和完全集成的安全测试，我们确保开发人员能即时收到关于代码中漏洞的反馈，这将有效地改进代码。
- en: Integrating Static Application Security Testing
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成静态应用程序安全测试
- en: SAST is crucial. We briefly discussed this in [*Chapter 12*](B17492_12_ePub_RK.xhtml#_idTextAnchor145),
    *Architecting for DevSecOps*, so now, we will dive in a bit deeper.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: SAST 至关重要。我们在[*第12章*](B17492_12_ePub_RK.xhtml#_idTextAnchor145)《*为 DevSecOps
    设计架构*》中简要讨论了这一点，现在我们将深入探讨。
- en: 'First, we need to understand that there are two types of SAST:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要理解 SAST 有两种类型：
- en: SAST tools that scan raw source code.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扫描原始源代码的 SAST 工具。
- en: SAST tools that scan decompiled source code from libraries, such as **Dynamic-Link
    Library** (**DLL**) or **Java Archive** (**JAR**).
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扫描库中反编译源代码的 SAST 工具，如**动态链接库**(**DLL**)或**Java归档**(**JAR**)。
- en: SAST tools scan the code line by line. They report where a potential vulnerability
    has been found in the code so that the developer knows exactly where to look.
    Most tools also rate the vulnerability and even provide suggestions for fixing
    the issue. Be aware that SAST tools need to be language-aware. They scan the source
    code, so they need to understand the language that the code is written in. Multiple
    SAST tools might be required if multiple languages are being used.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: SAST 工具逐行扫描代码，报告在代码中发现的潜在漏洞，以便开发人员确切知道需要查看的位置。大多数工具还会对漏洞进行评级，甚至提供修复问题的建议。需要注意的是，SAST
    工具需要具备语言感知能力。它们扫描源代码，因此必须理解代码所使用的语言。如果使用了多种语言，则可能需要多个 SAST 工具。
- en: SAST tools are integrated into the CI/CD pipeline to enable scanning throughout
    the development process. Most tools identify security issues that are commonly
    reported and listed, such as those by OWASP. Every year, OWASP releases the top
    10 web application security risks. Currently, the top 10 lists, among others,
    code injection, sensitive data exposure, and insufficient monitoring.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: SAST 工具集成到 CI/CD 管道中，以便在整个开发过程中进行扫描。大多数工具识别常见的安全问题，这些问题通常会被报告并列出，比如 OWASP 提到的问题。每年，OWASP
    都会发布十大 web 应用程序安全风险。目前，前十名的风险包括代码注入、敏感数据暴露和监控不足等。
- en: Tip
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The OWASP top 10 can be found at [https://owasp.org/www-project-top-ten/](https://owasp.org/www-project-top-ten/).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP 前十可以在[https://owasp.org/www-project-top-ten/](https://owasp.org/www-project-top-ten/)找到。
- en: We will go back to monitoring in the last section of this chapter.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章的最后部分回到监控内容。
- en: Integrating Dynamic Application Security Testing
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成动态应用程序安全测试
- en: DAST doesn't scan code. Simply put, DAST tooling simulates attacks. In [*Chapter
    13*](B17492_13_ePub_RK.xhtml#_idTextAnchor159), *Working with DevSecOps Using
    Industry Security Frameworks*, we discussed the MITRE ATT&CK framework, which
    lists techniques that help exploit vulnerabilities. DAST tools run these techniques
    by injecting malicious code strings or by brute force. By doing this, DAST tries
    to identify vulnerabilities in the functionality of the application, rather than
    in the source code.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: DAST 不扫描代码。简而言之，DAST 工具模拟攻击。在[*第13章*](B17492_13_ePub_RK.xhtml#_idTextAnchor159)《*使用行业安全框架与
    DevSecOps 协作*》中，我们讨论了 MITRE ATT&CK 框架，它列出了有助于利用漏洞的技术。DAST 工具通过注入恶意代码字符串或暴力破解来执行这些技术。通过这样做，DAST
    试图识别应用程序功能中的漏洞，而不是源代码中的漏洞。
- en: DAST is sophisticated, which means it's costly. It runs transactions through
    the application and with that, it's also depending on components that interact
    with the application. For example, you could think of the frontend application
    and the database in the backend. DAST tooling needs to be configured well to be
    effective.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: DAST 是复杂的，这意味着它成本较高。它通过应用程序运行事务，并且依赖与应用程序交互的组件。例如，可以考虑前端应用程序和后端数据库。DAST 工具需要良好配置才能有效运行。
- en: On that last note, DAST comes close to penetration testing. Most security officers
    and engineers will rely on manual penetration testing to detect vulnerabilities
    in integrations between different application stacks and services, especially
    when these stacks and services are used by different platforms and providers.
    In modern IT, where systems consist of **Infrastructure-as-a-Service** (**IaaS**),
    **Platform-as-a-Service** (**PaaS**), and **Software-as-a-Service** (**SaaS**)
    hosted on various platforms such as AWS, Azure, or in private data centers, integrating
    and testing integration points becomes more and more relevant.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，DAST 与渗透测试非常相似。大多数安全官员和工程师会依赖手动渗透测试来检测不同应用堆栈和服务之间的漏洞，特别是当这些堆栈和服务由不同的平台和提供商使用时。在现代
    IT 中，系统通常由**基础设施即服务**（**IaaS**）、**平台即服务**（**PaaS**）和**软件即服务**（**SaaS**）组成，托管在
    AWS、Azure 或私有数据中心等各种平台上，集成和测试集成点变得越来越重要。
- en: Please be aware that public cloud platforms have strict policies for penetration
    testing. As an example, AWS only supports this for a very limited number of services,
    such as their compute platform EC2\. Violating these policies might inflict penalties
    or, in the worst case, a ban on the usage of services.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，公共云平台对于渗透测试有严格的政策。例如，AWS 仅支持对少数几个服务进行渗透测试，如其计算平台 EC2。违反这些政策可能会导致处罚，最坏情况下甚至禁止使用服务。
- en: Integrating using CircleCI orbs
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 CircleCI orbs 进行集成
- en: A rather new phenomenon in the world of DevSecOps integration, but worth mentioning
    here, is orbs – reusable snippets of YAML code that take care of repeatable actions,
    such as security scanning. Orbs allow for direct integration with popular security
    scanning tools. It's a concept of CircleCI, a San Francisco-based company that
    delivers tooling to automate CI.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DevSecOps 集成的世界中，有一个相对较新的现象值得一提，那就是 orbs —— 可重用的 YAML 代码片段，用于处理可重复的操作，如安全扫描。Orbs
    允许直接与流行的安全扫描工具进行集成。这是 CircleCI 提出的概念，CircleCI 是一家位于旧金山的公司，提供自动化 CI 工具。
- en: It claims out-of-the-box integrations for these tools into CI/CD pipelines.
    As an example, orbs for Probely (a web vulnerability scanner) and SonarCloud (code
    analysis) are available, but developers can also create their own orbs and push
    these to the open source Orb Registry.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 它声称可以将这些工具直接集成到 CI/CD 管道中。例如，Probely（一个网页漏洞扫描器）和 SonarCloud（代码分析）的 orbs 可用，但开发人员也可以创建自己的
    orbs 并将其推送到开源 Orb 注册表中。
- en: Now that we've covered the integrated security frameworks and tooling, we have
    to make sure that we keep track of the outcomes. In the last section, we will
    discuss monitoring in more detail.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经涵盖了集成的安全框架和工具，我们必须确保跟踪结果。在最后一节中，我们将更详细地讨论监控。
- en: Implementing monitoring
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施监控
- en: 'A crucial element of security is ensuring that the necessary security policies
    are in place and that the environments are indeed protected. This may sound simple,
    but it requires proper configuration of monitoring. Developers need information
    to help them fix bugs in the first place but also to improve the code and with
    that, the application. This applies to customer experience and performance, but
    also to ensuring that the application remains protected. Hackers don''t sit on
    their hands: they constantly find out new ways of attacking systems. Hence, we
    need to constantly monitor what happens to and inside an application.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 安全的关键要素之一是确保必要的安全策略已到位，并且环境得到了有效保护。听起来简单，但实际上需要正确配置监控。开发人员需要信息来帮助他们修复错误，同时也要改进代码，从而改进应用程序。这不仅适用于客户体验和性能，也适用于确保应用程序保持安全。黑客并非坐以待毙：他们不断寻找新的攻击系统的方法。因此，我们需要持续监控应用程序的运行情况。
- en: 'Security monitoring is not only about detecting unexpected behavior. It''s
    about analyzing all behavior. This provides insights to developers to help them
    improve their code. For that, monitoring needs to facilitate three main services:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 安全监控不仅仅是检测意外行为，还包括分析所有行为。这为开发人员提供了洞察，帮助他们改进代码。为了做到这一点，监控需要提供三项主要服务：
- en: Collect
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集
- en: Analyze
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析
- en: Alert
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 警报
- en: Sometimes, storage and visualization are added to these services. However, storing
    monitoring data is more about logging, while visualization is about comprehensively
    presenting monitoring data. These are important services, but they are not core
    to monitoring itself. Of course, you will need methodologies to receive and view
    alerts. As an example, Grafana is a popular tool that provides cross-platform
    dashboards that allow us to query and visualize stored monitoring data.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，存储和可视化也会被加入到这些服务中。然而，存储监控数据更侧重于日志记录，而可视化则侧重于全面呈现监控数据。这些是重要的服务，但它们并不是监控本身的核心服务。当然，你仍然需要方法来接收和查看警报。例如，Grafana
    是一个流行的工具，它提供跨平台的仪表盘，允许我们查询和可视化存储的监控数据。
- en: 'Before we get to implementing monitoring, the architect needs to assess the
    following four W questions:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始实施监控之前，架构师需要评估以下四个 W 问题：
- en: '*What* are we monitoring?'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*我们*在监控什么？'
- en: '*Why* are we monitoring *that* (and *why* not anything else)?'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*我们*为什么监控*这个*（而*不是*其他任何东西）？'
- en: '*When* are we monitoring *that*?'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*我们*何时监控*这个*？'
- en: '*Who*''s paying attention (who needs to be informed)?'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*谁*在关注（谁需要被通知）？'
- en: The *what* is about collecting data, the *why* is triggering analyses, and the
    *who* is about sending alerts to the right people or entities within the enterprise.
    As we mentioned previously, monitoring properly is crucial to the feedback loop
    that we have in DevOps, including alerts regarding security events that may impact
    the systems. It's a big misunderstanding that systems that are code only and hosted
    on cloud platforms are monitored and secured by default. They are not. Platforms
    such as AWS, Azure, and Google Cloud merely provided huge toolboxes that you can
    use to secure code that you run on the platforms. Engineers will need to configure
    the monitoring themselves. This includes monitoring the infrastructure, such as
    the health statuses of the **virtual machines** (**VMs**) that are used in the
    cloud. A certain increase in the usage of the VM – an unexplainable peak in the
    CPU or memory of the VM – might indicate that something wrong.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '*什么*是收集数据，*为什么*是触发分析，*谁*是指向企业中正确的人员或实体发送警报。正如我们之前提到的，正确的监控对于我们在 DevOps 中所进行的反馈循环至关重要，包括关于可能影响系统的安全事件的警报。一个常见的误解是，只有代码的系统并且托管在云平台上的系统默认就会被监控和保护。其实并非如此。像
    AWS、Azure 和 Google Cloud 这样的平台仅仅提供了巨大的工具箱，供你用来保护在这些平台上运行的代码。工程师需要自己配置监控。这包括监控基础设施，如云中使用的**虚拟机**（**VMs**）的健康状态。虚拟机的使用量增加——虚拟机的
    CPU 或内存出现无法解释的峰值——可能表明出现了问题。'
- en: Next, to be useful for DevOps, monitoring must collect metrics from the application
    itself. This way, monitoring provides information on the running state of the
    application. Applications must be enabled to provide this information to monitoring
    systems. This information is typically labeled in the code of the application.
    Examples include labels such as **debug** and **warning**. Monitoring will pick
    up this information and make sure that it gets to the engineers in a comprehensible
    format.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为了对 DevOps 有用，监控必须从应用程序本身收集指标。通过这种方式，监控可以提供应用程序运行状态的信息。应用程序必须能够向监控系统提供这些信息。这些信息通常在应用程序的代码中标记。例子包括诸如**调试**和**警告**之类的标签。监控将收集这些信息，并确保以易于理解的格式将其传递给工程师。
- en: How do monitoring tools do that? There are a couple of ways it does this, but
    in most cases, tools use either agents that collect data on systems or they simulate
    – agentless – transactions. With transactions, tools will send a transaction to
    the application and analyze the response if and when the transaction is returned.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 监控工具是如何做到这一点的呢？有几种方式可以做到这一点，但在大多数情况下，工具使用的是收集系统数据的代理，或者通过模拟——无代理——交易来实现。通过交易，工具会向应用程序发送一个交易，并在交易返回时分析响应。
- en: Note
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Transaction-based monitoring doesn't mean that these tools can't or won't use
    agents. There are agent and agentless systems. Some enterprises have policies
    that state that agents on their systems are prohibited because of overhead on
    systems, or because enterprises fear the intrusiveness of agents.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 基于事务的监控并不意味着这些工具不能或不会使用代理。有代理和无代理的系统。一些企业有政策规定，禁止在其系统上使用代理，因为代理会增加系统的负载，或者因为企业担心代理的侵入性。
- en: 'In the case of monitoring agents, these can and should be part of the desired
    state configuration of the application when it''s deployed to the platform. Remember
    shift-left: this should be integrated into the entire DevOps chain so that monitoring
    starts from the moment code is pushed to the development, test, and staging systems.
    In other words, monitoring is not just for production.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在监控代理的情况下，这些代理可以并且应该成为应用程序部署到平台时期望的状态配置的一部分。记住“左移”原则：这应当集成到整个DevOps链条中，以便监控从代码推送到开发、测试和预发布系统的那一刻就开始。换句话说，监控不仅仅是为了生产环境。
- en: Because of the capabilities that monitoring tools must have, these tools can
    become very vast and complicated. Agents might lead to some so-called overhead
    on systems, meaning that the agents will increase their use of resources in systems
    or trigger more network traffic. These aspects should be taken into architectural
    consideration. Again, start with the four W questions.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 由于监控工具必须具备的能力，这些工具可能会变得非常庞大和复杂。代理可能会导致所谓的系统开销，即代理会增加系统资源的使用或触发更多的网络流量。这些方面应该在架构设计时加以考虑。同样，先从四个W问题开始。
- en: 'Lastly, enterprises might not end up with just one monitoring tool, but with
    a chain of tools. They might use AWS CloudWatch or Azure Monitor to monitor the
    cloud resources, Prometheus to collect real-time data in highly dynamic systems
    such as container platforms, and Sysdig for cloud-native applications. Specifically
    for security monitoring, enterprises can use Splunk Security Essentials or the
    cloud-native Azure Sentinel. Be aware that a lot of security tooling focuses on
    network and identity and access to systems, and not so much on the applications
    or application code. That''s why enterprises end up with monitoring toolchains:
    it''s for a good reason. Architects have a big say in what tools fulfill the needs
    of the enterprise.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，企业可能不会只使用一个监控工具，而是会形成一条工具链。他们可能使用AWS CloudWatch或Azure Monitor来监控云资源，使用Prometheus来收集如容器平台等高动态系统中的实时数据，使用Sysdig来监控云原生应用程序。具体到安全监控，企业可以使用Splunk
    Security Essentials或云原生的Azure Sentinel。需要注意的是，许多安全工具侧重于网络和身份访问管理，而不太关注应用程序或应用代码。这就是为什么企业最终会拥有监控工具链的原因：这是有充分理由的。架构师在选择满足企业需求的工具方面有很大发言权。
- en: Note
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We will only mention a couple of tools here. This is by no means meant to be
    exhaustive or to promote specific tools over other tools. The tools that are mentioned
    here are widely used in enterprises, but there are many other, great tools available.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这里只提到几款工具，这绝不意味着要详尽列出所有工具，或推广特定工具。这里提到的工具在企业中广泛使用，但还有许多其他优秀的工具可供选择。
- en: 'Engineers probably don''t want to use several consoles to watch the output
    of these different tools. Overarching enterprise suites such as ServiceNow and
    BMC Helix provide broker platforms that enable the single pane of glass view:
    various monitoring tools and data collection processes can be aggregated in this
    one suite. These are complex systems that require highly skilled professionals
    to implement and configure, but in a world where IT is becoming more complicated
    by the day, the investment is worthwhile. Regarding DevOps teams, remember that
    they are fully responsible for developing, deploying, and operating their code.
    You might not want to rely on these "monolith" types of overall management systems,
    but in enterprises with a wide variety of products and services, it''s essential
    to have a complete overview of all the assets, developments, and the state of
    these deployments.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 工程师们可能不希望使用多个控制台来查看这些不同工具的输出。像ServiceNow和BMC Helix这样的企业级套件提供了经纪平台，能够实现统一的“玻璃面板”视图：各种监控工具和数据收集过程可以在这个统一的套件中聚合。这些是复杂的系统，需要高技能的专业人员来实施和配置，但在IT日益复杂的今天，这笔投资是值得的。关于DevOps团队，记住他们对开发、部署和运营自己的代码负有完全责任。你可能不希望依赖这些“整体管理”类型的系统，但在拥有各种产品和服务的企业中，拥有所有资产、开发和部署状态的全面概览是至关重要的。
- en: 'So, we have adhered to security frameworks, defined the policies, and integrated
    the tools in our DevOps and CI/CD cycle, but are we really good to go? IT is changing
    rapidly and becoming more challenging every day. Attacks and breaches are in the
    news every day. This has a big impact on how we secure our systems. We can''t
    trust anyone in our enterprise networks anymore. On the other hand, we want to
    give developers as much freedom as possible so that we get the best results in
    terms of coding. After all, the first statement in DevOps is about trust: you
    build, you run it – because you can. But how do we deal with trust? That''s the
    final topic of this book: zero trust architectures and how they impact DevOps.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们已经遵守了安全框架，定义了政策，并将工具整合到我们的 DevOps 和 CI/CD 循环中，但我们真的可以开始了吗？IT 正在迅速变化，每天都变得更加具有挑战性。攻击和安全漏洞每天都在新闻中出现。这对我们如何保护系统产生了巨大影响。我们再也不能信任我们企业网络中的任何人了。另一方面，我们希望尽可能给开发人员更多的自由，以便在编码方面获得最佳结果。毕竟，DevOps
    的第一条原则就是关于信任的：你构建，你运行——因为你可以。但是我们该如何处理信任问题呢？这正是本书的最后主题：零信任架构及其对 DevOps 的影响。
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'DevOps and DevSecOps are not separate things: security must be fully integrated
    with DevOps. In this chapter, we discussed how we integrate security in DevOps,
    not only focusing on scanning tools but mainly on governance, applying threat
    modeling, and monitoring our DevOps environments. For governance, we looked at
    the principles of GRC that allow enterprises to manage uncertainties – such as
    security risks – while defining strategies to achieve their business goals. This
    is the foundational step to integrating security into all the layers of the enterprise
    and with that, the development of products and services.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 和 DevSecOps 不是分开的东西：安全必须完全与 DevOps 集成。在这一章中，我们讨论了如何在 DevOps 中集成安全性，不仅关注扫描工具，更主要的是治理、应用威胁建模并监控我们的
    DevOps 环境。对于治理，我们研究了 GRC 原则，它允许企业管理不确定性——例如安全风险——同时定义实现业务目标的策略。这是将安全性整合到企业各个层面，并由此推动产品和服务发展的基础步骤。
- en: To detect, recognize, and counterfeit attacks, we need to work with threat modeling.
    In this chapter, we discussed OWASP, which provides insights into how security
    events can impact businesses. Next, we look at security scanning in a more detailed
    way. SAST and DAST are necessities in DevSecOps.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检测、识别和伪造攻击，我们需要使用威胁建模。在本章中，我们讨论了 OWASP，它提供了有关安全事件如何影响业务的见解。接下来，我们将更详细地探讨安全扫描。SAST
    和 DAST 是 DevSecOps 中的必需品。
- en: 'In the last section, we learned about the various steps that an architect needs
    to take to implement monitoring. They need to ask themselves four basic questions:
    what are we monitoring?, why are we monitoring that?, when do we monitor that?,
    and who needs to be informed? We also looked at the characteristics of monitoring
    tools.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一部分，我们了解了架构师在实施监控时需要采取的各个步骤。他们需要问自己四个基本问题：我们在监控什么？为什么要监控这些？什么时候监控？谁需要被通知？我们还查看了监控工具的特性。
- en: 'Security is about trust and in modern IT, with an increasing number and variety
    of attacks, the basic rule is that enterprises can''t trust anyone or anything
    anymore. This leads to a specific area in architectures: zero trust. This is the
    topic of the final chapter of this book.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 安全就是信任，在现代 IT 中，随着攻击数量和种类的增加，基本规则是企业不能再信任任何人或任何事物。这导致了架构中的一个特定领域：零信任。这是本书最后一章的主题。
- en: Questions
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'True or False: In OWASP, threat agents can be both internal and external.'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 判断题：在 OWASP 中，威胁代理可以是内部和外部的。
- en: Name the two types of SAST tooling.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请列出两种 SAST 工具类型。
- en: What are the three main functions of monitoring?
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监控的三个主要功能是什么？
- en: Further reading
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*IT4IT for managing the business of IT*, Rob Akershoek et al., The Open Group.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*IT4IT 管理 IT 业务*，Rob Akershoek 等著，《The Open Group》。'
- en: 'Blogpost on DevOps.com by Mike Vizard on the introduction of private orbs,
    2021: [https://devops.com/circleci-adds-private-orbs-to-devops-toolchain/#:~:text=Constructing%20an%20orb%20gives%20DevOps%20teams%20a%20relatively,of%20the%20DevOps%20team%20can%20more%20easily%20consume](https://devops.com/circleci-adds-private-orbs-to-devops-toolchain/#:~:text=Constructing%20an%20orb%20gives%20DevOps%20teams%20a%20relatively,of%20the%20DevOps%20team%20can%20more%20easily%20consume).'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mike Vizard 在 DevOps.com 上发布的关于私有 orb 引入的博客文章，2021年：[https://devops.com/circleci-adds-private-orbs-to-devops-toolchain/#:~:text=Constructing%20an%20orb%20gives%20DevOps%20teams%20a%20relatively,of%20the%20DevOps%20team%20can%20more%20easily%20consume](https://devops.com/circleci-adds-private-orbs-to-devops-toolchain/#:~:text=Constructing%20an%20orb%20gives%20DevOps%20teams%20a%20relatively,of%20the%20DevOps%20team%20can%20more%20easily%20consume)。
- en: 'Article on ITSecuroty.org with in-depth insights into security testing and
    integration, by Adrian Lane, 2019: [https://itsecurity.org/enterprise-devsecops-security-test-integration-and-tooling/](https://itsecurity.org/enterprise-devsecops-security-test-integration-and-tooling/).'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Adrian Lane于2019年在ITSecuroty.org发表的文章，深入探讨安全测试与集成：[https://itsecurity.org/enterprise-devsecops-security-test-integration-and-tooling/](https://itsecurity.org/enterprise-devsecops-security-test-integration-and-tooling/)。
- en: 'An overview of popular security tools in DevOps: [https://dzone.com/articles/an-overview-of-security-testing-tools-in-devops](https://dzone.com/articles/an-overview-of-security-testing-tools-in-devops).'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于DevOps中流行安全工具的概述：[https://dzone.com/articles/an-overview-of-security-testing-tools-in-devops](https://dzone.com/articles/an-overview-of-security-testing-tools-in-devops)。
- en: '*Hands-On Security in DevOps*, by Tony Hsiang-Chih Hsu, Packt Publishing, 2018.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*DevOps中的实战安全*，作者：Tony Hsiang-Chih Hsu，Packt出版社，2018年。'
