- en: '*Chapter 15*: Implementing Zero Trust Architecture'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第15章*：实现零信任架构'
- en: Digital transformation is the new paradigm in enterprises. Enterprises are adopting
    data-driven architectures and using more and more native services in the cloud
    and, through this, accelerating the development of their products and services.
    Under this pressure, security has to keep up and be sure that environments, in
    a lot of cases even mission-critical environments, remain resilient. This is the
    domain of zero trust.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 数字化转型是企业的新范式。企业正在采用数据驱动的架构，并在云中使用越来越多的原生服务，通过这种方式加速其产品和服务的发展。在这种压力下，安全必须跟上，并确保环境，很多时候甚至是关键任务环境，保持弹性。这就是零信任的领域。
- en: This chapter explains what zero trust is and why it is important to DevOps.
    Zero trust assumes that everything is secured inside a corporate network and that
    includes the DevOps pipelines. Some of the technologies used in zero trust environments
    are service meshes and microservices, a topic that we will discuss in the final
    section of this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了零信任是什么，以及它对DevOps的重要性。零信任假设企业网络内部的所有事物都是安全的，这也包括DevOps流水线。在零信任环境中使用的一些技术是服务网格和微服务，这个话题我们将在本章最后部分讨论。
- en: After completing this chapter, you will have learned what zero trust means and
    the impact it has on DevOps. You will have learned how microservices and secure
    service mesh drive secure digital transformation. In the final section, we will
    briefly discuss some solutions that are available from cloud platforms.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，你将了解零信任的含义以及它对DevOps的影响。你将了解到微服务和安全的服务网格如何推动安全的数字化转型。在最后部分，我们将简要讨论云平台提供的一些解决方案。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要内容：
- en: Understanding zero trust principles
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解零信任原则
- en: Architecting for zero trust security
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为零信任安全架构设计
- en: Including microservices in architecture
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括架构中的微服务
- en: Integrating zero trust in pipelines
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在流水线中集成零信任
- en: Understanding zero trust principles
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解零信任原则
- en: Zero trust really means zero trust, for starters. The principles of zero trust
    have gained a lot of traction in IT security over the past few years, and for
    a good reason. Attacks don't just come from the outside, but also from the internal
    networks in enterprises. Zero trust advocates that any user, or maybe every identity,
    is authenticated, regardless of whether the user is inside or outside the enterprise's
    network. When authenticated, the user must be validated against security policies
    and authorized before access to applications is granted. Data access should only
    be granted through verified applications to which users are authenticated and
    authorized.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 零信任确实意味着零信任，首先。零信任的原则在过去几年里在IT安全领域获得了广泛关注，这是有充分理由的。攻击不仅来自外部，还可能来自企业内部网络。零信任提倡无论用户是处于企业网络内外，所有用户或每个身份都必须进行身份验证。通过身份验证后，用户必须根据安全策略进行验证，并在授权后才能访问应用程序。数据访问应仅通过经过验证的应用程序进行，且用户必须在应用程序中经过身份验证并授权。
- en: Before we learn how this would work in DevSecOps, and particularly in **Continuous
    Integration**/**Continuous Deployment** (**CI**/**CD**) pipelines, we need to
    have a deeper look at the principles of zero trust.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们学习零信任如何在DevSecOps中运作，尤其是在**持续集成**/**持续部署**（**CI**/**CD**）流水线中运作之前，我们需要更深入地了解零信任的原则。
- en: 'Zero trust starts with knowing who''s in the enterprise''s network. There''s
    one important thing to note at this point: in the cloud, everything is an identity.
    It can be a real user, a person, but also a service that is triggered to execute
    a specific action. Also, services have certain rights: they are allowed to perform
    a specific action or fetch a defined dataset and are prohibited from taking other
    actions. Therefore, all identities, or more accurately accounts, must be known
    and, on top of that, it must be clear what rights they have. It means that an
    enterprise has to constantly monitor and validate all its accounts, along with
    their credentials and their rights. This must be done in real time.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 零信任始于了解谁在企业的网络中。这一点有一个重要的事项需要注意：在云环境中，一切都是身份。它可以是一个真实的用户，一个人，但也可以是被触发来执行特定操作的服务。同时，服务有一定的权限：它们被允许执行特定的操作或获取定义的数据集，并且禁止执行其他操作。因此，所有身份，或者更准确地说，所有账户，必须被识别，并且更重要的是，必须清楚它们拥有哪些权限。这意味着企业必须不断监控并验证所有账户及其凭证和权限。这必须实时进行。
- en: Now, you might think that zero trust is mainly about monitoring accounts. But
    there's more. Zero trust also implies that an enterprise has put measures in place
    to prevent authenticated users from doing more than they are authorized to. You
    may be thinking of setting least privileges to accounts, but you also need to
    consider network segmentation and restricting specific protocols on networks.
    Basically, you need to consider everything that contains an account so it can
    only perform the tasks it's authorized to do in the place where the account is
    authorized. This must be enforced by strong **Identity and Access Management**
    (**IAM**) policies, network segmentation, external and internal firewalls, gateways,
    and strict routing policies such as *deny all* and *allow only* whitelisted addresses.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能认为零信任主要是监控帐户。但实际上，零信任还意味着企业已采取措施，防止经过认证的用户做超出授权的事情。你可能会想到为帐户设置最小权限，但你还需要考虑网络分段和限制网络上的特定协议。基本上，你需要考虑所有包含帐户的内容，以确保其只能在授权的地方执行被授权的任务。这必须通过强有力的**身份和访问管理**（**IAM**）政策、网络分段、外部和内部防火墙、网关以及严格的路由政策（如*拒绝所有*和*仅允许白名单地址*）来强制执行。
- en: 'Principles that must be included in zero trust are as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 零信任中必须包含的原则如下：
- en: Account types and credentials are always based on least privilege .
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帐户类型和凭据始终基于最小权限原则。
- en: Specified privileged rights and rules of the application of these rights.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定的特权权限及其应用规则。
- en: Defined endpoints for services and applications.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为服务和应用程序定义的端点。
- en: Authentication protocols.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证协议。
- en: Security monitoring includes intrusion detection, intrusion prevention, and
    anomaly detection.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全监控包括入侵检测、入侵防御和异常检测。
- en: Operating system hardening with the latest versions and the most recent patches.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用最新版本和最新补丁的操作系统加固。
- en: Software life cycle with the most recent versions and the most recent patches.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用最新版本和最新补丁的软件生命周期。
- en: 'How does this affect DevOps? The answer to that question is: zero trust has
    a huge impact on DevOps and the agile way of working. DevOps is all about gaining
    speed in the development and deployment of application code. This requires flexibility
    and a great deal of responsibility for the DevOps teams. It''s true that very
    strict security rules can hinder the speedy process of development and deployment.
    Yet there''s no other way to protect the assets of the enterprise. DevOps teams
    also have a responsibility in protecting these assets.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这如何影响DevOps？这个问题的答案是：零信任对DevOps和敏捷工作方式有着巨大影响。DevOps的核心是加速应用代码的开发和部署。这需要灵活性，并且要求DevOps团队承担极大的责任。虽然严格的安全规则确实会妨碍开发和部署的速度，但保护企业资产没有其他方法。DevOps团队同样有责任保护这些资产。
- en: The consequence is that DevOps teams must adhere to zero trust too. Teams can
    only use accounts that are allowed to enter the code repositories, work with builds
    that are contained in a specific segment of the enterprise network in the cloud,
    use only approved operating systems, software, and tools, and apply security policies
    that are enforced by routing and firewall rules.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 其结果是，DevOps团队也必须遵守零信任原则。团队只能使用被允许访问代码仓库的帐户，使用在云中企业网络特定区域内的构建，使用经过批准的操作系统、软件和工具，并应用通过路由和防火墙规则强制执行的安全政策。
- en: 'Zero trust doesn''t mean that the DevOps process is slowed down by default,
    though. That only happens if responsibility for applying zero trust is placed
    outside the teams. For example: the team has code ready for deployment, but now
    has to wait for a specific firewall port to be opened. That can be done quickly
    if the port is already whitelisted, and automated security scans have verified
    that the code is compliant with the firewall rules. If the approval has to go
    through a security department that needs to validate everything manually, then
    it will slow down the process heavily.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，零信任并不意味着DevOps过程默认会变慢。只有在将零信任的责任放在团队之外时，才会发生这种情况。例如：团队已准备好部署代码，但现在必须等待特定的防火墙端口被打开。如果该端口已经被列入白名单，并且自动化安全扫描已验证代码符合防火墙规则，则可以迅速完成。如果批准过程必须通过一个安全部门手动验证所有内容，那么这一过程就会显著变慢。
- en: Hence, we need to include zero trust in DevOps. We will discuss this in the
    upcoming sections.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们需要将零信任纳入DevOps流程。我们将在接下来的章节中讨论这个问题。
- en: Architecting for zero trust security
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 零信任安全架构
- en: 'With a good understanding of the concept of zero trust, we can define architectures
    that apply the principles of zero trust. The following guidelines will help define
    the architecture. Some of these principles might be obvious, and others may lead
    to constraints in the way developers develop and deploy applications. But, at
    the end of the day, we need to be sure that the enterprise assets are secured:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在充分理解零信任概念的基础上，我们可以定义应用零信任原则的架构。以下准则将帮助定义该架构。部分原则可能显而易见，其他原则可能会导致开发人员在开发和部署应用程序时的某些限制。但最终，我们需要确保企业资产的安全：
- en: Assess and analyze all access controls. Strict policies on IAM must be in place.
    Least privilege must be part of those policies. This is the backbone of zero trust
    according to the **National Institute of Standards and Technology** (**NIST**).
    They defined a set of principles for zero trust architectures, all involving the
    way enterprises handle IAM. The key principle is to have a single source of identities.
    In most cases, enterprises will use **Active Directory** (**AD**) for this. In
    short, any user or identity must be *known* by the AD.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评估和分析所有访问控制。必须制定严格的身份和访问管理（IAM）策略。最小权限原则必须是这些策略的一部分。这是根据**国家标准与技术研究院**（**NIST**）的定义，零信任的核心。他们为零信任架构定义了一组原则，所有这些原则都涉及企业如何处理IAM。关键原则是拥有一个单一的身份源。在大多数情况下，企业将使用**Active
    Directory**（**AD**）来实现这一点。简而言之，任何用户或身份必须被*AD所知*。
- en: 'Next, there must strong authentication. Is the identity really who it''s claiming
    to be? **Multi-factor authentication** (**MFA**) is strongly recommended. NIST
    also stresses the need to verify and validate the context in which users are authorized
    and authenticated. For example: from which machine is a repository accessed, and
    is the device compliant with the enterprise''s standards? A lot of developers
    have their own machines with their own preferred tools. This must be assessed
    to clarify whether this is compliant with the security policies.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，必须进行强身份验证。身份是否确实如其所声称的那样？**多因素认证**（**MFA**）是强烈推荐的。NIST（美国国家标准与技术研究院）还强调了验证和验证用户授权和身份验证上下文的必要性。例如：是从哪台机器访问的仓库？该设备是否符合企业的标准？许多开发人员都有自己的机器，并使用自己偏好的工具。这必须经过评估，以明确这是否符合安全策略。
- en: 'Specific access policies to applications must be defined and controlled. A
    developer working on a marketing website likely won''t need access to the application
    that controls the supply chain of an enterprise. In that case, access to that
    application should be restricted. Zero trust therefore means that every application
    has its own set of policies: who is eligible to access it, to what level, and
    what are the rights in that application?'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须定义和控制特定应用程序的访问策略。一个在营销网站上工作的开发人员可能不需要访问控制企业供应链的应用程序。在这种情况下，应限制对该应用程序的访问。因此，零信任意味着每个应用程序都有自己的策略：谁有资格访问，访问到何种级别，以及在该应用程序中的权限是什么？
- en: 'Data classification and data security are the next building blocks for zero
    trust architecture. Data must be protected. The challenge in modern, cloud-based
    IT is that data can be anywhere, and it''s shared across platforms, applications,
    and services. Enterprises need to know exactly where their data is, what type
    of data it is, and who or what is allowed to access it under strict conditions.
    Data must be identified and classified: is it, for instance, confidential, or
    may it be publicly accessed? Strict privacy regulations, such as the **General
    Data Protection Regulation** (**GDPR**) in the European Union, are guidelines
    for classifying data; applying these guidelines is the responsibility of the enterprise.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据分类和数据安全是零信任架构的下一个关键组成部分。数据必须受到保护。现代基于云的IT面临的挑战是，数据可能存在于任何地方，并且跨平台、跨应用程序和跨服务共享。企业需要清楚地知道他们的数据在哪里，数据的类型是什么，谁或什么被允许在严格的条件下访问这些数据。数据必须被识别和分类：例如，它是机密的，还是可以公开访问的？严格的隐私法规，例如欧盟的**通用数据保护条例**（**GDPR**），是数据分类的指南；应用这些指南是企业的责任。
- en: NIST and the **National Cybersecurity Center of Excellence** (**NCCoE**) also
    define the *trusted cloud* as a building block. That's because of the dynamic
    character that clouds have by default. Now we are really at the heart of DevOps,
    where we go by the rule of autonomous working teams that can spin up environments
    the instant they need them, modify them, and even delete them. These environments
    will use data, but some of these environments may only be short-lived, while others
    will eventually be pushed to production. Cloud technology, where everything is
    code, facilitates this. This is a huge challenge for security, especially in keeping
    environments consistent with security policies. Hence, security must be embedded
    in DevOps. Monitoring should be in real time and enable controls to identify any
    breach of the security policies, even if it does mean that development is halted
    by that.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 美国国家标准与技术研究院（NIST）和**国家网络安全卓越中心**（**NCCoE**）也将*受信云*定义为一个构建模块。这是因为云本身具有动态特性。现在我们真正进入了DevOps的核心，在这里我们遵循自主工作团队的规则，团队可以在需要时即时创建环境，修改它们，甚至删除它们。这些环境将使用数据，但其中一些环境可能只是短暂的，而其他的最终将推向生产环境。云技术，通过一切代码化，促进了这一点。这对安全性是一个巨大的挑战，特别是在保持环境与安全策略一致方面。因此，安全必须融入DevOps中。监控应该是实时的，并能够启用控制措施，以识别任何安全策略的违规行为，即使这意味着开发会因此暂停。
- en: In summary, we could say that zero trust is mainly about separating network
    segments, applications, data, and services as much as possible and only allowing
    access to these different components to authenticated and authorized users with
    least privileges. Microservices will help the architects achieve this. However,
    microservices do come with challenges. These challenges can be overcome with service
    meshes.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，我们可以说零信任主要是关于尽可能地将网络分段、应用、数据和服务分开，并且只允许经过身份验证和授权的用户，以最小权限访问这些不同的组件。微服务将帮助架构师实现这一点。然而，微服务也带来了一些挑战。这些挑战可以通过服务网格来克服。
- en: Including microservices in architecture
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在架构中加入微服务
- en: 'DevOps is about gaining higher productivity with faster releases of code. DevOps
    teams can focus on specific tasks and code that is designed to only perform that
    task. They develop the code independently from other services to increase focus,
    the speed of delivery, and customer experience. Security principles are applied
    to these services and continuously validated by the means of automated scanning.
    DevOps is by default distributed architecture, in contrast with monolithic architectures
    where systems are designed and built as a whole. In DevOps, the architecture will
    be driven by microservices: an application is defined as a collection of independent
    services that will communicate with each other over specified protocols. The following
    figure shows the principle of microservices:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps旨在通过更快速的代码发布来提高生产力。DevOps团队可以专注于特定任务和只执行该任务的代码。他们独立于其他服务开发代码，以提高关注度、交付速度和客户体验。安全原则应用于这些服务，并通过自动扫描手段不断验证。DevOps默认是分布式架构，与单体架构形成对比，后者是将系统设计和构建为一个整体。在DevOps中，架构将由微服务驱动：一个应用程序被定义为由独立服务组成的集合，这些服务通过指定的协议相互通信。下图展示了微服务的原理：
- en: '![Figure 15.1 – Principle of microservices'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.1 – 微服务原理'
- en: '](img/B17492_15_001.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_15_001.jpg)'
- en: Figure 15.1 – Principle of microservices
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.1 – 微服务原理
- en: 'In terms of security, we can assume that microservice architectures are more
    secure than monolith systems. If one of the services is breached, it doesn''t
    automatically mean that the whole application stack is breached, as long as the
    affected service is contained well enough. Unfortunately, it''s not as simple
    as that. The reason for that is that microservices do need to be able to communicate
    with each other. The next question is: how can we enable that in a secure way?
    The answer is a service mesh.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在安全性方面，我们可以假设微服务架构比单体系统更安全。如果某个服务被突破，并不意味着整个应用堆栈都会被突破，只要受影响的服务得到了足够的隔离。不幸的是，事情并不像想象的那么简单。原因在于微服务确实需要能够相互通信。下一个问题是：我们如何以安全的方式实现这一点？答案是服务网格。
- en: 'First, let''s look at the best practices for microservices architecture:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们来看看微服务架构的最佳实践：
- en: '**Defense strategy**: Microservices allow various defense layers or security
    tiers. As an example, a web portal needs to be publicly accessible, but the application
    and the data should be protected. A good example is mobile banking apps. The app
    is accessible on any smartphone: the user can download it from an app store and
    install it on the phone. To access the application that retrieves and presents
    account information, the user will need to have several things: an account with
    that specific bank and an account that allows them to use the mobile app. These
    are two separate things. Obviously, the account data is protected too, for instance,
    by encryption.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**防御策略**：微服务允许多种防御层或安全层。例如，一个web门户需要公开访问，但应用程序和数据应该得到保护。一个很好的例子是移动银行应用。该应用可以在任何智能手机上访问：用户可以从应用商店下载并安装它。要访问检索和呈现账户信息的应用程序，用户需要具备几件事：一个特定银行的账户，以及一个允许他们使用移动应用的账户。这是两个不同的事情。显然，账户数据也会受到保护，例如通过加密。'
- en: '**DevSecOps**: As we have seen in the previous chapters, this is all about
    embedding security practices into DevOps. Code is scanned automatically during
    the entire build against policies and industry security and compliance frameworks.
    But it''s not only during the build; post-deployment, applications and code should
    continuously be monitored for vulnerabilities.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DevSecOps**：正如我们在前几章中看到的，这一切都是将安全实践嵌入到DevOps中。在整个构建过程中，代码会自动扫描，遵循政策和行业安全合规框架。但这不仅仅是在构建过程中；在部署后，应用程序和代码应该持续监控以发现漏洞。'
- en: '**MFA**: Every application should be accessed only with MFA. A username and
    a password are simply not sufficient; authentication should be done using a second
    factor, for instance, using an authentication app on a different device than the
    device someone uses to log in. Even when MFA is already used to access an application,
    re-authentication might be desirable when specific, highly confidential data is
    accessed from that application. Having access to an application doesn''t mean
    by default that a user should have access to all the data that can be retrieved
    by that application. Applications and data are separate tiers or layers.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MFA**：每个应用程序都应仅通过多因素认证（MFA）进行访问。仅使用用户名和密码显然不足够；认证应通过第二因素进行，例如，使用与登录设备不同的设备上的认证应用进行认证。即使已经使用MFA访问应用程序，当访问特定的高度机密数据时，可能仍然需要重新认证。仅访问应用程序并不意味着用户默认可以访问该应用程序能够检索到的所有数据。应用程序和数据是分开的层次或级别。'
- en: '**Dependencies**: In cloud environments, we will likely use cloud services
    such as **Platform as a Service** (**PaaS**) and **Software as a Service** (**SaaS**).
    We will need **application programming interfaces** (**APIs**) to enable interaction
    between these services. These are dependencies and they might lead to vulnerabilities
    and security threats if not verified and configured well. Source code must be
    scanned for vulnerable dependencies.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖性**：在云环境中，我们可能会使用云服务，例如**平台即服务**（**PaaS**）和**软件即服务**（**SaaS**）。我们需要**应用程序编程接口**（**API**）来实现这些服务之间的互动。这些是依赖项，如果没有经过验证和良好的配置，可能会导致漏洞和安全威胁。必须对源代码进行扫描，以查找易受攻击的依赖项。'
- en: Dependencies are probably the biggest challenge in terms of security. How do
    we deal with that in modern architecture, using microservices?
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖性可能是安全方面最大的挑战。在现代架构中，如何通过使用微服务来处理这个问题？
- en: Understanding and applying a service mesh
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解和应用服务网格
- en: DevOps is served well by microservices. It's the perfect way to develop and
    deploy new features into code without affecting other, running services. Because
    of the granularity of microservices, development and deployment can also be secured
    at a low level, resulting in a low risk of services being disrupted for the users.
    Using microservices means that misconfigurations or badly programmed implementations
    are minimized to only specific services that are being developed and deployed,
    also minimizing the attack surface of the entire application stack. To enable
    this way of working, containers play a major role. Services and features are wrapped
    and deployed as containers.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps在微服务中得到了很好的支持。这是开发和部署新功能的完美方式，可以在不影响其他正在运行的服务的情况下进行编码。由于微服务的粒度，开发和部署也可以在较低级别进行安全保护，从而降低了服务中断用户体验的风险。使用微服务意味着配置错误或程序不当的实现仅限于正在开发和部署的特定服务，也最小化了整个应用程序堆栈的攻击面。为了支持这种工作方式，容器发挥了重要作用。服务和功能被打包并作为容器进行部署。
- en: The next challenge is to have these containerized services and features interact
    with each other securely. That's what a service mesh is about. To establish the
    interaction, developers need to configure these within the application code. They
    will integrate libraries that can communicate with services outside the application,
    such as service discovery, load balancing, and setting up internal **Transport
    Layer Security** (**TLS**) traffic to other services. First of all, the configuration
    strings and the services they call from the application code need to share a common
    language. But more importantly, when a service changes, it needs to be adjusted
    in the application code as well. This makes the application code complex.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个挑战是如何让这些容器化的服务和功能安全地互相作用。这正是服务网格的核心内容。为了建立这种互动，开发者需要在应用程序代码中进行配置。他们将集成能够与应用程序外部服务通信的库，例如服务发现、负载均衡，以及设置与其他服务之间的**传输层安全性**（**TLS**）流量。首先，配置字符串和它们在应用程序代码中调用的服务需要共享一种通用语言。但更重要的是，当一个服务发生变化时，应用程序代码也需要进行相应的调整。这使得应用程序代码变得复杂。
- en: A service mesh tackles this problem by removing the complexity from the application
    and moving it to a service proxy. This proxy now takes care of a lot of *third-party
    services* that applications use to interact with other functional components.
    Think of traffic management including load balancing, authentication, and of course,
    security and monitoring. The services are now abstracted from the application
    code as a separate component.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 服务网格通过将复杂性从应用程序中移除，并将其转移到服务代理来解决这个问题。这个代理现在负责处理应用程序与其他功能组件交互时使用的许多*第三方服务*。比如流量管理，包括负载均衡、身份验证，当然，还有安全性和监控。服务现在从应用程序代码中抽象出来，成为一个独立的组件。
- en: Developers will only have to worry about the application code since all other
    services are taken care of by the service proxy. With this, we have strict segregation
    of responsibilities.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者只需要关注应用程序代码，因为所有其他服务都由服务代理来处理。通过这种方式，我们实现了严格的责任分离。
- en: That sounds like a good solution, but how does it work in practice? We will
    learn that in the last section of this chapter.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来是个不错的解决方案，但它在实践中是如何运作的呢？我们将在本章的最后一节学习这一点。
- en: Integrating zero trust in pipelines
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在流水线中集成零信任
- en: In the previous sections, we discussed the principles of zero trust architectures
    and how microservices can help us with zero trust. Next, we learned how we can
    have microservices interact by means of a secure service mesh. In this section,
    we will learn how we can achieve this with containerized applications and using
    cloud services that we target from CI/CD pipelines. Platforms such as AWS and
    Azure offer solutions for this, and we will discuss these solutions.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们讨论了零信任架构的原理以及微服务如何帮助实现零信任。接下来，我们了解了如何通过安全的服务网格让微服务互相作用。在这一节中，我们将学习如何通过容器化应用程序以及我们从CI/CD流水线中瞄准的云服务来实现这一目标。像AWS和Azure这样的平台提供了相应的解决方案，我们将讨论这些解决方案。
- en: First, we need to understand how we add security to a service mesh. One way
    to do this is with sidecars. Explained in a very simple way, a sidecar is a point
    in a container cluster where security postures are inserted. You could envisage
    it as a main road where cars are driving. A car carrying specific security policies
    comes from a side road and inserts itself in the line of cars on the main road.
    However, the point where this happens is fixed.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要了解如何为服务网格添加安全性。一种方法是使用边车（sidecar）。简单来说，边车是容器集群中的一个节点，用于插入安全策略。你可以把它想象成一条主路，汽车在上面行驶。一辆载有特定安全策略的汽车从一条侧路驶入，插入到主路上的车队中。然而，这个插入点是固定的。
- en: There are various tools that offer a sidecar service mesh. Popular ones are
    Istio, Linkerd, and Envoy. What these tools have in common is that they put the
    desired functionality in a separate container that is inserted close to the application
    containers, just like we described with inserting cars. Since most developers
    that work with containers work with Kubernetes, it's important to know that the
    sidecar containers have to be placed in the same Kubernetes pod as the application
    containers. This is because the namespace of the pods needs to be the same. The
    application containers and the sidecars can be integrated from the CI/CD pipeline.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种工具提供旁车服务网格。常见的有 Istio、Linkerd 和 Envoy。这些工具的共同点在于，它们将所需的功能放入一个单独的容器中，并将其插入到应用容器附近，就像我们描述的插入汽车一样。由于大多数使用容器的开发者都在使用
    Kubernetes，因此了解旁车容器必须与应用容器放在同一个 Kubernetes pod 中是很重要的。因为 pod 的命名空间需要相同。应用容器和旁车容器可以通过
    CI/CD 流水线进行集成。
- en: 'The whole principle of a service mesh and sidecar proxies is shown in the following
    figure:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 服务网格和旁车代理的整体原理如图所示：
- en: '![Figure 15.2 – Principles of a service mesh and sidecars'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.2 – 服务网格和旁车的原理'
- en: '](img/B17492_15_002.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_15_002.jpg)'
- en: Figure 15.2 – Principles of a service mesh and sidecars
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.2 – 服务网格和旁车的原理
- en: 'As noted, cloud platforms offer service meshes as well. AWS has AWS App Mesh,
    which allows services to interact with each other regardless of the underlying
    infrastructure, when it uses the Envoy sidecar proxy. Native App Mesh works with
    the serverless infrastructure services of AWS Fargate, the compute engine EC2,
    and the container orchestration services of **Elastic Container Services** (**ECS**)
    and **Elastic Kubernetes Services** (**EKS**). The high-level architecture of
    AWS App Mesh is shown in the following figure:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，云平台也提供服务网格。AWS 有 AWS App Mesh，它允许服务在不考虑底层基础设施的情况下相互交互，当它使用 Envoy 旁车代理时。原生
    App Mesh 可以与 AWS Fargate 的无服务器基础设施服务、EC2 计算引擎以及 **Elastic Container Services**（**ECS**）和
    **Elastic Kubernetes Services**（**EKS**）的容器编排服务一起使用。AWS App Mesh 的高级架构如图所示：
- en: '![Figure 15.3 – Architecture of AWS App Mesh'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.3 – AWS App Mesh 的架构'
- en: '](img/B17492_15_003.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_15_003.jpg)'
- en: Figure 15.3 – Architecture of AWS App Mesh
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.3 – AWS App Mesh 的架构
- en: 'In Azure, we work with Azure Service Fabric, Microsoft''s container orchestrator
    for deploying and managing microservices. The fully managed mesh service called
    Azure Service Fabric Mesh that was launched in 2018 has been retired by Microsoft
    from April 2021\. Companies that use Azure can use Azure Container Services, **Azure
    Kubernetes Services** (**AKS**), or Azure Service Fabric managed clusters to create
    the mesh functionality. The principles of Azure Service Fabric are shown in the
    following figure:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure 中，我们使用 Azure Service Fabric，这是微软的容器编排器，用于部署和管理微服务。微软于 2018 年推出的完全托管的网格服务
    Azure Service Fabric Mesh 已于 2021 年 4 月退役。使用 Azure 的公司可以使用 Azure 容器服务、**Azure
    Kubernetes 服务**（**AKS**）或 Azure Service Fabric 托管集群来创建网格功能。Azure Service Fabric
    的原理如图所示：
- en: '![Figure 15.4 – High-level architecture of Azure Service Fabric'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.4 – Azure Service Fabric 的高级架构'
- en: '](img/B17492_15_004.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B17492_15_004.jpg)'
- en: Figure 15.4 – High-level architecture of Azure Service Fabric
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.4 – Azure Service Fabric 的高级架构
- en: This concludes our journey through enterprise DevOps, AIOps, and DevSecOps.
    In this age of digital transformation, architects have a big task ahead of understanding
    how these methodologies help enterprises in modernizing their IT environments,
    becoming more agile in software development, while ensuring maximum security during
    development and deployment. This book is just a starting point. The proof of the
    pudding is in the eating, so go out and try to make it work.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这标志着我们对企业 DevOps、AIOps 和 DevSecOps 之旅的结束。在这个数字化转型的时代，架构师面临着一个重要任务，那就是理解这些方法论如何帮助企业现代化其
    IT 环境，使软件开发更加敏捷，同时确保在开发和部署过程中实现最大安全性。本书仅是一个起点，关键在于实践，所以走出去，尝试将其落实。
- en: Summary
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we first studied the principles of zero trust architecture,
    and we learned that DevOps teams need to adhere to these principles too. Zero
    trust starts by knowing exactly who may access code repositories, and knowing
    that builds can only be deployed to strictly contained network segments so that
    other services are not impacted. Next, we learned that microservices architecture
    can serve DevOps really well. They allow independent development and deployment
    of features in code without affecting other services.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章节中，我们首先学习了零信任架构的原则，并了解到 DevOps 团队也需要遵守这些原则。零信任从准确知道谁可以访问代码仓库开始，并且了解构建只能部署到严格隔离的网络段，以避免影响其他服务。接下来，我们了解到微服务架构对
    DevOps 有很好的支持，它们允许独立开发和部署代码中的功能，而不影响其他服务。
- en: We learned that microservices are a secure type of architecture. The challenge,
    however, is to establish interaction between these microservices. We studied service
    mesh as a solution for that and learned how to integrate security postures as
    a containerized microservice, using the technology of sidecar proxies. We learned
    that sidecars can be used to insert secure services and monitoring next to our
    microservices.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解到，微服务是一种安全的架构类型。然而，挑战在于如何建立这些微服务之间的互动。我们研究了服务网格作为解决方案，并了解了如何将安全策略作为容器化微服务集成，使用侧车代理技术。我们还学习了如何通过使用侧车代理在微服务旁插入安全服务和监控功能。
- en: In the final section, we introduced some mesh services that are offered by the
    cloud providers Azure and AWS. This concluded the journey through enterprise architecture
    for DevOps, DevSecOps, and AIOps, all of which are becoming increasingly important
    to understand and to implement, eventually to successfully drive digital transformation
    in enterprises.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一部分，我们介绍了一些云服务提供商（如 Azure 和 AWS）提供的网格服务。此部分总结了 DevOps、DevSecOps 和 AIOps 在企业架构中的应用，这些概念在数字化转型中变得越来越重要，理解并实施它们是成功推动企业数字化转型的关键。
- en: Questions
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What basic rule do we apply with respect to the privileges of accounts in a
    zero trust environment?
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在零信任环境中，我们应用哪些基本规则来管理账户权限？
- en: What type of service do we use to insert separate containers with security postures
    next to application containers?
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用什么类型的服务来在应用容器旁插入具有安全策略的独立容器？
- en: What does AWS offer to enable service mesh?
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS 提供了什么服务来支持服务网格？
- en: Further reading
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Website of the **National Cybersecurity Center of Excellence** (**NCCoE**)
    on zero trust architecture: [https://www.nccoe.nist.gov/projects/building-blocks/zero-trust-architecture](https://www.nccoe.nist.gov/projects/building-blocks/zero-trust-architecture)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**国家网络安全卓越中心**（**NCCoE**）关于零信任架构的网站：[https://www.nccoe.nist.gov/projects/building-blocks/zero-trust-architecture](https://www.nccoe.nist.gov/projects/building-blocks/zero-trust-architecture)'
- en: '*Hands-On Microservices with Kubernetes*, by Gigi Sayfan, Packt Publishing,
    2019'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Kubernetes 微服务实战*，作者 Gigi Sayfan，Packt Publishing，2019'
- en: 'Documentation on Microsoft Azure Service Fabric: [https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-overview#:~:text=%20Overview%20of%20Azure%20Service%20Fabric%20%201,application%20lifecycle...%204%20Next%20steps.%20%20More%20](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-overview#:~:text=%20Overview%20of%20Azure%20Service%20Fabric%20%201,application%20lifecycle...%204%20Next%20steps.%20%20More%20)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软 Azure Service Fabric 的文档：[https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-overview#:~:text=%20Overview%20of%20Azure%20Service%20Fabric%20%201,application%20lifecycle...%204%20Next%20steps.%20%20More%20](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-overview#:~:text=%20Overview%20of%20Azure%20Service%20Fabric%20%201,application%20lifecycle...%204%20Next%20steps.%20%20More%20)
- en: 'Blog post on AWS App Mesh: [https://aws.amazon.com/app-mesh/?aws-app-mesh-blogs.sort-by=item.additionalFields.createdDate&aws-app-mesh-blogs.sort-order=desc&whats-new-cards.sort-by=item.additionalFields.postDateTime&whats-new-cards.sort-order=desc](https://aws.amazon.com/app-mesh/?aws-app-mesh-blogs.sort-by=item.additionalFields.createdDate&aws-app-mesh-blogs.sort-order=desc&whats-new-cards.sort-by=item.additionalFields.postDateTime&whats-new-cards.sort-order=desc)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS App Mesh 的博客文章：[https://aws.amazon.com/app-mesh/?aws-app-mesh-blogs.sort-by=item.additionalFields.createdDate&aws-app-mesh-blogs.sort-order=desc&whats-new-cards.sort-by=item.additionalFields.postDateTime&whats-new-cards.sort-order=desc](https://aws.amazon.com/app-mesh/?aws-app-mesh-blogs.sort-by=item.additionalFields.createdDate&aws-app-mesh-blogs.sort-order=desc&whats-new-cards.sort-by=item.additionalFields.postDateTime&whats-new-cards.sort-order=desc)
