- en: '*Chapter 1*: DevOps, SRE, and Google Cloud Services for CI/CD'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 1 章*：DevOps、SRE 和 Google Cloud CI/CD 服务'
- en: '**DevOps** is a mindset change­ that tries to balance release velocity with
    system reliability. It aims to increase an organization''s ability to continuously
    deliver reliable applications and services at a high velocity when compared to
    traditional software development processes.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**DevOps** 是一种思维方式的转变，试图平衡发布速度与系统可靠性。它旨在提高一个组织相较于传统软件开发流程时，持续交付可靠应用和服务的能力，并保持较高的速度。'
- en: A common misconception about DevOps is that it is a technology. Instead, DevOps
    is a set of supporting practices (such as, build, test, and deployment) that combines
    software development and IT operations. These practices establish a culture that
    breaks down the metaphorical wall between developers (who aim to push new features
    to production) and system administrators or operators (who aim to keep the code
    running in production).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 DevOps 的一个常见误解是它是一种技术。实际上，DevOps 是一组支持性实践（例如构建、测试和部署），它将软件开发和 IT 运维结合在一起。这些实践建立了一种文化，打破了开发人员（旨在将新功能推向生产环境）与系统管理员或运维人员（旨在保持代码在生产环境中正常运行）之间的隐喻性壁垒。
- en: '**Site Reliability Engineering** (**SRE**) is Google''s approach to align incentives
    between development and operations that are key to building and maintaining reliable
    engineering systems. SRE is a prescriptive way to implement DevOps practices and
    principles. Through these practices, the aim is to increase overall observability
    and reduce the level of incidents. The introduction of a **Continuous Integration/Continuous
    Delivery** (**CI/CD**) pipeline enables a robust feedback loop in support of key
    SRE definitions such as toil, observability, and incident management.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**站点可靠性工程** (**SRE**) 是 Google 用来对齐开发和运维之间激励机制的方法，这对构建和维护可靠的工程系统至关重要。SRE 是一种规范化的方式来实施
    DevOps 实践和原则。通过这些实践，目标是提高整体可观察性并减少事件发生的频率。引入 **持续集成/持续交付** (**CI/CD**) 流水线支持关键的
    SRE 定义，如繁重工作、可观察性和事件管理，从而实现强大的反馈循环。'
- en: '**CI/CD** is a key DevOps practice that helps to achieve this mindset change.
    CI/CD requires a strong emphasis on automation to *build reliable software faster*
    (in terms of delivering/deploying to production). Software delivery of this type
    requires agility, which is often achieved by breaking down existing components.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**CI/CD** 是实现这一思维转变的关键 DevOps 实践。CI/CD 强调自动化，以 *更快速地构建可靠软件*（在交付/部署到生产环境方面）。这种类型的软件交付需要敏捷性，而敏捷性通常是通过拆解现有组件来实现的。'
- en: A **cloud-native development** paradigm is one where complex systems are decomposed
    into multiple services (such as microservices architecture). Each service can
    be independently tested and deployed into an isolated runtime. **Google Cloud
    Platform** (**GCP**) has well-defined services to implement cloud-native development
    and apply SRE concepts to achieve the goal of *building reliable software faster*.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**云原生开发**范式是一种将复杂系统分解为多个服务（如微服务架构）的方法。每个服务可以独立测试并部署到隔离的运行时环境中。**Google Cloud
    Platform** (**GCP**) 提供了明确的服务来实现云原生开发，并应用 SRE 概念以实现 *更快速地构建可靠软件* 的目标。'
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要内容：
- en: DevOps 101 – evolution and life cycle
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps 101 – 演变与生命周期
- en: SRE 101 – evolution; technical and cultural practices
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SRE 101 – 演变；技术和文化实践
- en: GCP's cloud-native approach to implementing DevOps
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GCP 实现 DevOps 的云原生方法
- en: Understanding DevOps, its evolution, and life cycle
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 DevOps 及其演变和生命周期
- en: This section focuses on the evolution of DevOps and lists phases or critical
    practices that form the DevOps life cycle.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本节重点介绍 DevOps 的演变，并列出了构成 DevOps 生命周期的阶段或关键实践。
- en: Revisiting DevOps evolution
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重访 DevOps 演变
- en: Let's take a step back and think about how DevOps has evolved. **Agile software
    development methodology** refers to a set of practices based on iterative development
    where requirements and solutions are built through collaboration between cross-functional
    teams and end users. DevOps can be perceived as a logical extension of Agile.
    Some might even consider DevOps as an offspring of Agile. This is because DevOps
    starts where Agile logically stops. Let's explore what this means in detail.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们退后一步，思考一下 DevOps 是如何演变的。**敏捷软件开发方法论** 是一套基于迭代开发的实践，要求通过跨职能团队与最终用户之间的合作，构建需求和解决方案。DevOps
    可以被视为 Agile 的逻辑延伸，有些人甚至认为 DevOps 是 Agile 的产物。这是因为 DevOps 从 Agile 逻辑上停止的地方开始。让我们详细探讨一下这意味着什么。
- en: Agile was introduced as a holistic approach for end-to-end software delivery.
    Its core principles are defined in the Agile Manifesto ([https://agilemanifesto.org/](https://agilemanifesto.org/)),
    with specific emphasis on interaction with processes and tools, improving collaboration,
    incremental and iterative development, and flexibility in response to changes
    to a fixed plan. The initial Agile teams primarily had developers, but it quickly
    extended to product management, customers, and quality assurance. If we factor
    in the impact of the increased focus on iterative testing and user acceptance
    testing, the result is a new capacity to deliver software faster to production.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷作为一种端到端的软件交付方法被引入。其核心原则在《敏捷宣言》中定义（[https://agilemanifesto.org/](https://agilemanifesto.org/)），特别强调与流程和工具的互动、提升协作、增量和迭代开发，以及对固定计划变化的灵活应对。最初的敏捷团队主要由开发人员组成，但很快扩展到了产品管理、客户和质量保证。如果我们考虑到增加的迭代测试和用户验收测试的影响，结果是可以更快地将软件交付到生产环境。
- en: However, Agile methodology creates a new problem that has resulted in a need
    for a new evolution. Once software is delivered to production, the operations
    team are primarily focused on system stability and upkeep. At the same time, development
    teams continue to add new features to a delivered software to meet customers'
    dynamic needs and to keep up with the competition.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，敏捷方法论带来了一个新的问题，导致需要新的演变。一旦软件交付到生产环境，运维团队的主要任务是确保系统的稳定性和维护。同时，开发团队继续为已交付的软件添加新特性，以满足客户不断变化的需求，并跟上竞争的步伐。
- en: Operators were always cautious for the fear of introducing issues. Developers
    always insist on pushing changes since these were tested in their local setup,
    and developers always thought that it is the responsibility of the operators to
    ensure that the changes work in production. But from an operator's standpoint,
    they have little or no understanding of the code base. Similarly, developers have
    little or no understanding of the operational practices. So essentially, developers
    were focused on shipping new features faster and operators were focused on stability.
    This forced developers to move slower in pushing the new features out to production.
    This misalignment often caused tensions within an organization.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 运维人员总是小心谨慎，担心引入问题。开发人员则坚持推动更改，因为这些更改已在本地环境中经过测试，而且开发人员总认为确保更改在生产环境中正常运行是运维人员的责任。但从运维人员的角度来看，他们对代码库几乎没有了解。同样，开发人员对运维实践也知之甚少。所以，实际上，开发人员专注于更快地发布新特性，而运维人员则专注于稳定性。这迫使开发人员在将新特性推向生产环境时变得更加缓慢。这种不协调常常导致组织内部的紧张局势。
- en: Patrick Debois, an IT consultant who was working on a large data center migration
    project in 2007, experienced similar challenges when trying to collaborate with
    developers and operators. He coined the term DevOps and later continued this movement
    with Andrew Shafer. They considered DevOps as an extension of Agile. In fact,
    when it came to naming their first Google group for DevOps, they called it **Agile
    System Administration**.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Patrick Debois，一位 IT 顾问，在 2007 年参与一个大型数据中心迁移项目时，遇到了与开发人员和运维人员合作时的类似挑战。他创造了“DevOps”这一术语，并与
    Andrew Shafer 一起推动了这一运动。他们认为 DevOps 是敏捷的延伸。事实上，当他们为 DevOps 创建第一个 Google 群组时，他们称其为**敏捷系统管理**。
- en: The DevOps movement enabled better communication between software development
    and IT operations and effectively led to improved software with continuity being
    the core theme across operating a stable environment, consistent delivery, improved
    collaboration, and enhanced operational practices with a focus on innovation.
    This led to the evolution of the DevOps life cycle, which is detailed in the upcoming
    sub-section.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 运动促进了软件开发与 IT 运维之间的更好沟通，并有效地提升了软件质量，持续性成为了稳定环境运营、持续交付、改进协作和增强运维实践的核心主题，重点是创新。这导致了
    DevOps 生命周期的演变，具体内容将在接下来的子章节中详细说明。
- en: DevOps life cycle
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps 生命周期
- en: 'DevOps constitutes phases or practices that in their entirety form the DevOps
    life cycle. In this section, we''ll look at these phases in detail, as shown in
    the following diagram:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 包括一些阶段或实践，这些阶段或实践共同构成了 DevOps 生命周期。在本节中，我们将详细讨论这些阶段，如下图所示：
- en: '![Figure 1.1 – Phases of the DevOps life cycle'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.1 – DevOps 生命周期的各个阶段'
- en: '](img/B15587_01_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15587_01_01.jpg)'
- en: Figure 1.1 – Phases of the DevOps life cycle
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – DevOps 生命周期的各个阶段
- en: 'There are six primary phases in a DevOps life cycle. They are as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps生命周期中有六个主要阶段。具体如下：
- en: Plan and build
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计划和构建
- en: Continuous integration
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续集成
- en: Continuous delivery
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续交付
- en: Continuous deployment
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续部署
- en: Continuous monitoring and operations
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续监控与操作
- en: Continuous feedback
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续反馈
- en: The keyword here is **continuous**. If code is developed continuously, it will
    be followed with a need to continuously test, provide feedback, deploy, monitor,
    and operate. These phases will be introduced in the following sections.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键词是**持续**。如果代码持续开发，接下来就需要持续地进行测试、提供反馈、部署、监控和操作。这些阶段将在后续部分介绍。
- en: Phase 1 – plan and build
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第一阶段 – 计划和构建
- en: In the **planning** phase, the core focus is to understand the vision and convert
    it into a detailed plan. The plan can be split into phases, otherwise known as
    **epics** (in Agile terminology). Each phase or epic can be scoped to achieve
    a specific set of functionalities, which could be further groomed as one or multiple
    user stories. This requires a lot of communication and collaboration between various
    stakeholders.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在**规划**阶段，核心关注点是理解愿景并将其转化为详细的计划。计划可以拆分为多个阶段，通常被称为**史诗**（在敏捷术语中）。每个阶段或史诗可以被划定为实现一组特定功能，这些功能可以进一步细化为一个或多个用户故事。这需要各方利益相关者之间大量的沟通与协作。
- en: In the **build** phase, code is written in the language of choice and appropriate
    build artifacts are created. Code is maintained in a source code repository such
    as GitHub, Bitbucket, and others.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在**构建**阶段，代码使用选择的编程语言编写，并创建适当的构建产物。代码会保存在像GitHub、Bitbucket等源代码仓库中。
- en: Phase 2 – continuous integration
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第二阶段 – 持续集成
- en: '**CI** is a software development practice where developers frequently integrate
    their code changes to the main branch of a shared repository. This is done, preferably,
    several times in a day, leading to several integrations.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）是一种软件开发实践，开发人员频繁地将其代码更改集成到共享代码库的主分支中。最好是在一天内进行多次集成，从而进行多次合并。'
- en: Important note
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: '**Code change** is considered the fundamental unit of software development.
    Since development is incremental in nature, developers keep changing their code.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码更改**被认为是软件开发的基本单位。由于开发是渐进式的，开发人员会不断修改他们的代码。'
- en: Ideally, each integration is triggered by an automated build that also initiates
    automated unit tests, to detect any issues as quickly as possible. This avoids
    *integration hell*, or in other words, ensures that the application is not broken
    by introducing a code change or delta into the main branch.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，每次集成都由自动化构建触发，并且自动化单元测试也会随之启动，以尽快发现任何问题。这可以避免*集成地狱*，换句话说，确保通过将代码更改或增量引入主分支，不会破坏应用程序。
- en: Phase 3 – continuous delivery
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第三阶段 – 持续交付
- en: '**Continuous delivery** is a software development practice to build software
    such that a set of code changes can be delivered or released to production at
    any time. It can be considered an extension of CI and its core focus is on automating
    the release process to enable hands-free or single-click deployments.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续交付**是一种软件开发实践，其目标是构建软件，使得一组代码更改可以随时交付或发布到生产环境中。它可以看作是CI的扩展，其核心关注点是自动化发布过程，以实现无需人工干预或一键部署。'
- en: The core purpose is to ensure that the code base is releasable and there is
    no regression break. It's possible that the newly added code might not necessarily
    work. The frequency to deliver code to production is very specific to the organization
    and could be daily, weekly, bi-weekly, and so on.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 核心目标是确保代码库是可发布的，并且没有回归性的问题。新添加的代码可能并不一定能正常工作。交付代码到生产环境的频率非常依赖于组织，可能是每日、每周、每两周等。
- en: Phase 4 – continuous deployment
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第四阶段 – 持续部署
- en: '**Continuous deployment** is a software development practice where the core
    focus is to release automated deployments to production without the user''s intervention.
    It aims to minimize the time elapsed between developers writing new line(s) of
    code and this new code being used by live users in production.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续部署**是一种软件开发实践，其核心关注点是将自动化部署发布到生产环境中，而无需用户干预。其目的是最小化从开发人员编写新代码到这些新代码被生产环境中的活跃用户使用之间的时间间隔。'
- en: At its core, continuous deployment incorporates robust testing frameworks and
    encourages code deployment in a testing/staging environment post the continuous
    delivery phase. Automated tests can be run as part of the pipeline in the test/stage
    environment. In the event of no issues, the code can be deployed to production
    in an automated fashion. This removes the need for a formal release day and establishes
    a feedback loop to ensure that added features are useful to the end users.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，持续部署包含了强大的测试框架，并鼓励在持续交付阶段后将代码部署到测试/预发布环境中。自动化测试可以作为流水线的一部分，在测试/预发布环境中运行。如果没有问题，代码可以自动部署到生产环境中。这消除了正式发布日的需求，并建立了一个反馈循环，确保新增的功能对最终用户有用。
- en: Phase 5 – continuous monitoring and operation
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 5 阶段 – 持续监控与运营
- en: '**Continuous monitoring** is a practice that uses analytical information to
    identify issues with the application or its underlying infrastructure. Monitoring
    can be classified into two types: **server monitoring** and **application monitoring**.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续监控** 是一种利用分析信息来识别应用程序或其基础设施问题的实践。监控可以分为两种类型：**服务器监控** 和 **应用程序监控**。'
- en: '**Continuous operations** is a practice where the core focus is to mitigate,
    reduce, or eliminate the impact of planned downtime, such as scheduled maintenance,
    or in the case of unplanned downtime, such as an incident.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续运营** 是一种实践，其核心关注点是减轻、减少或消除计划停机的影响，例如计划中的维护，或在发生意外停机时，例如事故。'
- en: Phase 6 – continuous feedback
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 6 阶段 – 持续反馈
- en: '**Continuous feedback** is a practice where the core focus is to collect feedback
    that improves the applica/service. A common misconception is that continuous feedback
    happens only as the last phase of the DevOps cycle.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续反馈** 是一种实践，其核心关注点是收集改进应用程序/服务的反馈。一个常见的误解是，持续反馈仅在 DevOps 循环的最后阶段发生。'
- en: Feedback loops are present at every phase of the DevOps pipeline such that feedback
    is conveyed if a build fails due to a specific code check-in, a unit/integration
    test or functional test fails in a testing deployment, or an issue is found by
    the customer in production.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在 DevOps 流水线的每个阶段都会有反馈循环，例如当由于特定代码提交而导致构建失败、单元/集成测试或功能测试在测试部署中失败，或者客户在生产环境中发现问题时，都会传递反馈。
- en: '**GitOps** is one of the approaches to implement continuous feedback where
    a version control system has the capabilities to manage operational workflows,
    such as Kubernetes deployment. A failure at any point in the workflow can be tracked
    directly in the source control and that creates a direct feedback loop.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**GitOps** 是实现持续反馈的一种方法，在这种方法中，版本控制系统具备管理操作工作流的能力，例如 Kubernetes 部署。工作流中任何一个环节的失败都可以直接在源代码管理中跟踪，从而创建一个直接的反馈循环。'
- en: Key pillars of DevOps
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DevOps 的关键支柱
- en: 'DevOps can be categorized into five key pillars or areas:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 可以分为五个关键支柱或领域：
- en: '**Reduce organizational silos**: Bridge the gap between teams by encouraging
    them to work together toward a shared company vision. This reduces friction between
    teams and increases communication and collaboration.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减少组织壁垒**：通过鼓励团队合作，共同朝着公司愿景努力，缩小团队之间的差距。这减少了团队之间的摩擦，增加了沟通与协作。'
- en: '**Accept failure as normal**: In the *continuous* aspect of DevOps, failure
    is considered an opportunity to continuously improve. Systems/services are bound
    to fail, especially when more features are added to improve the service. Learning
    from failures mitigates reoccurrence. Fostering failure as the normal culture
    will make team members more forthcoming.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**接受失败为常态**：在 DevOps 的*持续*方面，失败被视为持续改进的机会。系统/服务注定会失败，特别是在添加更多功能以改进服务时。从失败中学习可以减少再次发生的可能性。将失败作为常态文化来培养，将使团队成员更加积极主动。'
- en: '**Implement gradual change**: Implementing gradual change falls in line with
    the continuous aspect of DevOps. Small, gradual changes are not only easier to
    review but in the event of an incident in production, it is easier to roll back
    and reduce the impact of the incident by going back to a last known working state.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实施渐进变化**：实施渐进变化符合 DevOps 的持续方面。小的、渐进的变化不仅更容易审查，而且在生产中发生问题时，回滚更为简便，可以通过恢复到最后一个已知的正常工作状态来减少事件的影响。'
- en: '**Leverage tooling and automation**: Automation is key to implement the continuous
    aspect of CI/CD pipelines, which are critical to DevOps. It is important to identify
    manual work and automate it in a way that eventually increases speed and adds
    consistency to everyday processes.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用工具和自动化**：自动化是实现 CI/CD 管道连续性关键的一环，这对于 DevOps 至关重要。识别手工工作并通过自动化来实现，最终提高速度并为日常流程带来一致性，是非常重要的。'
- en: '**Measure everything**: Measuring is a critical gauge for success. Monitoring
    is one way to measure and observe that helps to get important feedback to continuously
    improve the system.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**衡量一切**：衡量是成功的关键指标。监控是一种衡量和观察的方式，帮助获取重要的反馈，以便持续改进系统。'
- en: This completes our introduction to DevOps where we discussed its evolution,
    life cycle phases, and key pillars. At the end of the day, DevOps is a set of
    practices. The next section introduces site reliability engineering, or SRE, which
    is essentially Google's practical approach to implementing DevOps key pillars.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了我们对 DevOps 的介绍，我们讨论了它的发展历程、生命周期阶段和关键支柱。归根结底，DevOps 是一套实践方法。接下来的章节将介绍站点可靠性工程（SRE），这本质上是
    Google 实现 DevOps 关键支柱的实际方法。
- en: SRE's evolution; technical and cultural practices
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SRE 的发展；技术和文化实践
- en: This section tracks back the evolution of SRE, defines SRE, discusses how SRE
    relates to DevOps by elaborating DevOps key pillars, details critical jargon,
    and introduces SRE's cultural practices.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 本节追溯了 SRE 的发展历程，定义了 SRE，讨论了 SRE 如何通过阐述 DevOps 关键支柱与 DevOps 相关，详细解释了关键术语，并介绍了
    SRE 的文化实践。
- en: The evolution of SRE
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SRE 的发展历程
- en: In the early 2000s, Google was building massive, complex systems to run their
    search and other critical services. Their main challenge was to *reliably* run
    their services. At the time, many companies historically had system administrators
    deploying software components as a service. The use of system administrators,
    otherwise known as the *sysadmin* approach, essentially focused on running the
    service by responding to events or updates as they occur. This means that if the
    service grew in traffic or complexity, there would be a corresponding increase
    in events and updates.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2000 年代初，Google 正在构建庞大复杂的系统来运行搜索和其他关键服务。它们面临的主要挑战是*可靠地*运行服务。那时，许多公司通常由系统管理员部署软件组件作为服务。系统管理员，或称为*sysadmin*方法，主要通过响应事件或更新来运行服务。这意味着，如果服务的流量或复杂性增加，事件和更新也会相应增加。
- en: 'The sysadmin approach has its pitfalls, and these are represented by two categories
    of cost:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: sysadmin 方法有其缺陷，这些缺陷体现在两类成本中：
- en: '**Direct costs**: Running a service with a team of system administrators included
    manual intervention. Manual intervention at scale is a major downside to change
    management and event handling. However, this manual approach was adopted by multiple
    organizations because there wasn''t a recognized alternative'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**直接成本**：使用一组系统管理员来运行服务需要手动干预。大规模的手动干预是变更管理和事件处理的一个主要缺点。然而，由于没有被认可的替代方法，这种手动方法被多家公司采用。'
- en: '**Indirect costs**: System administrators and developers widely differed in
    terms of their skills, the vocabulary used to describe situations, and incentives.
    Development teams always want to launch new features and their incentive is to
    drive adoption. System administrators or ops teams want to ensure that the service
    is running reliably and often with a thought process of *don''t change something
    that is working*.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**间接成本**：系统管理员和开发人员在技能、描述情况的词汇和激励机制上有很大的不同。开发团队总是希望推出新功能，他们的激励是推动采用。系统管理员或运维团队则希望确保服务的可靠运行，并常常有*不要更改已经正常工作的东西*的思维方式。'
- en: Google did not want to pursue a manual approach because at their scale and traffic,
    any increase in demand would make it impractical to scale. The desire to regularly
    push more features to their users would ultimately cause conflict between developers
    and operators. Google wanted to reduce this conflict and remove the confusion
    with respect to desired outcomes. With this knowledge, Google considered an alternative
    approach. This new approach is what became known as SRE.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Google 不希望采取手动方法，因为在其规模和流量下，任何需求的增加都会使扩展变得不切实际。定期向用户推出更多功能的愿望最终会导致开发人员和运维人员之间的冲突。Google
    希望减少这种冲突，并消除关于期望结果的混淆。掌握了这一点，Google 考虑了一种替代方法。这种新方法最终成为了 SRE。
- en: Understanding SRE
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 SRE
- en: SRE is what happens when you ask a software engineer to design an operations
    team.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: SRE就是当你要求一名软件工程师来设计一个运维团队时所发生的事情。
- en: (*Betsy Beyer*, *Chris Jones*, *Jennifer Petoff*, & *Niall Murphy*, *Site Reliability
    Engineering*, *O'REILLY*)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: (*Betsy Beyer*, *Chris Jones*, *Jennifer Petoff*, & *Niall Murphy*, *网站可靠性工程*,
    *O'REILLY*)
- en: The preceding is a quote from Ben Treynor Sloss, who in 2003 started the first
    SRE team at Google with seven software engineers. Ben himself was a software engineer
    up until that point, and joined Google as the site reliability Tsar in 2003, led
    the development and operations of Google's production software infrastructure,
    network, and user-facing services, and is currently the VP of engineering at Google.
    At that point in 2003, neither Ben nor Google had any formal definition for SRE.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 上述内容摘自Ben Treynor Sloss的引用，他在2003年与七名软件工程师一起成立了谷歌的第一个SRE团队。在那之前，Ben自己也是一名软件工程师，并于2003年加入谷歌，成为网站可靠性负责人，领导谷歌的生产软件基础设施、网络和面向用户的服务的开发和运维工作，目前是谷歌的工程副总裁。在2003年时，Ben和谷歌都没有正式定义SRE。
- en: SRE is a software engineering approach to IT operations. SRE is an intrinsic
    part of Google's culture. It's the key to running their massively complex systems
    and services at scale. At its core, the goal of SRE is to end the age-old battle
    between development and operations. This section introduces SRE's thought process
    and the upcoming chapters on SRE give deeper insights into how SRE achieves its
    goal.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: SRE是一种面向IT运维的软件工程方法。SRE是谷歌文化的内在组成部分。它是运行谷歌复杂系统和服务规模化的关键。在其核心，SRE的目标是结束开发和运维之间的长期斗争。本节介绍了SRE的思维方式，接下来的章节将深入探讨SRE如何实现其目标。
- en: 'A primary difference in Google''s approach to building the SRE practice or
    team is the composition of the SRE team. A typical SRE team consists of 50-60%
    Google software engineers. The other 40-50% are personnel who have software engineering
    skills but in addition, also have skills related to UNIX/Linux system internals
    and networking expertise. The team composition forced two behavioral patterns
    that propelled the team forward:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌构建SRE实践或团队的一个主要区别在于SRE团队的组成。一个典型的SRE团队由50-60%的谷歌软件工程师组成。其余的40-50%是具备软件工程技能的人员，除此之外，还具有与UNIX/Linux系统内部结构和网络专家相关的技能。团队的组成促使了两种行为模式，这些模式推动了团队的前进：
- en: Team members were quickly bored of performing tasks or responding to events
    manually.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队成员很快对手动执行任务或响应事件感到厌倦。
- en: Team members had the capability to write software and provide an engineering
    solution to avoid repetitive manual work even if the solution is complicated.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队成员具备编写软件的能力，并能提供工程解决方案，以避免重复的手动工作，即使该解决方案很复杂。
- en: In simple terminology, SRE practices evolved when a team of software engineers
    ran a service reliably in production and automated systems by using engineering
    practices. This raises some critical questions. How is SRE different from DevOps?
    Which is better? This will be covered in the upcoming sub-sections.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，SRE实践是在一群软件工程师通过使用工程实践，可靠地运行服务并自动化系统时逐步发展起来的。这引出了几个关键问题。SRE与DevOps有何不同？哪一个更好？这些问题将在接下来的子章节中讨论。
- en: From Google's viewpoint, DevOps is a philosophy rather than a development methodology.
    It aims to close the gap between software development and software operations.
    DevOps' key pillars clarify what needs to be done to achieve collaboration, cohesiveness,
    flexibility, reliability, and consistency.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 从谷歌的角度来看，DevOps是一种哲学，而非开发方法论。它旨在缩小软件开发与软件运维之间的差距。DevOps的关键支柱阐明了如何实现协作、凝聚力、灵活性、可靠性和一致性。
- en: SRE's approach toward DevOps' key pillars
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SRE对DevOps关键支柱的做法
- en: 'DevOps doesn''t put forward a clear path or mechanism for how it needs to be
    done. Google''s SRE approach is a concrete or prescriptive way to solve problems
    that the DevOps philosophy addresses. Google describes the relationship between
    SRE and DevOps using an analogy:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps没有提出一个明确的路径或机制来说明如何实现这一点。谷歌的SRE方法是解决DevOps哲学所关注问题的具体或规定性方法。谷歌使用类比来描述SRE与DevOps之间的关系：
- en: If you think of DevOps like an interface in a programming language, class SRE
    implements DevOps.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你把DevOps看作编程语言中的一个接口，那么类SRE实现了DevOps。
- en: '(*Google Cloud*, *SRE vs. DevOps: competing standards or close friends?*, [https://cloud.google.com/blog/products/gcp/sre-vs-devops-competing-standards-or-close-friends](https://cloud.google.com/blog/products/gcp/sre-vs-devops-competing-standards-or-close-friends))'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: (*谷歌云*, *SRE与DevOps：竞争标准还是亲密朋友?*, [https://cloud.google.com/blog/products/gcp/sre-vs-devops-competing-standards-or-close-friends](https://cloud.google.com/blog/products/gcp/sre-vs-devops-competing-standards-or-close-friends))
- en: 'Let''s look at how SRE implements DevOps and approaches the DevOps key pillars:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下SRE如何实现DevOps，并接近DevOps的关键支柱：
- en: '**Reduces organizational silos**: SRE reduces organizational silos by sharing
    ownership between developers and operators. Both teams are involved in the product/service
    life cycle from the start. Together they define **Service-Level Objectives** (**SLOs**),
    **Service-Level Indicators** (**SLIs**), and **error budgets** and share the responsibility
    to determine the reliability, work priority, and release cadence of new features.
    This promotes a shared vision and improves communication and collaboration.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减少组织壁垒**：SRE通过共享开发人员和运维人员之间的所有权来减少组织壁垒。两支团队从一开始就参与产品/服务的生命周期。它们共同定义**服务级目标**（**SLOs**）、**服务级指标**（**SLIs**）和**错误预算**，并共同承担确定可靠性、工作优先级和新特性发布节奏的责任。这促进了共同的愿景，并改善了沟通与协作。'
- en: '**Accepts failure as normal**: SRE accepts failure as normal by conducting
    blameless postmortems, which includes detailed analysis without any reference
    to a person. **Blameless postmortems** help to understand the reasons for failure,
    identifying preventive actions, and ensuring that a failure for the same reason
    doesn''t re-occur. The goal is to identify the root cause and process but not
    to focus on individuals. This helps to promote psychological safety. In most cases,
    failure is the result of a missing SLO or targets and incidents are tracked using
    specific indicators as a function of time or SLI.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将失败视为正常**：SRE通过进行无责事后分析，将失败视为正常，其中包括不涉及个人的详细分析。**无责事后分析**有助于了解失败的原因，识别预防措施，并确保同样的失败不会再次发生。目标是找出根本原因和过程，而不是关注个人。这有助于促进心理安全。在大多数情况下，失败是由于缺少SLO或目标，事件通过特定指标作为时间或SLI的函数来追踪。'
- en: '**Implements gradual change**: SRE implements gradual changes by limited **canary
    rollouts** and eventually reduces the cost of failures. Canary rollouts refer
    to the process of rolling out changes to a small percentage of users in production
    before making them generally available. This ensures that the impact is limited
    to a small set of users and gives us the opportunity to capture feedback on the
    new rollouts.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实施渐进式变更**：SRE通过有限的**金丝雀发布**来实施渐进式变更，并最终减少失败的成本。金丝雀发布指的是在生产环境中将变更发布给一小部分用户，在广泛推向所有用户之前。这可以确保影响仅限于少数用户，并为我们提供捕捉新发布反馈的机会。'
- en: '**Leverages tooling and automation**: SRE leverages tooling and automation
    to reduce **toil** or the amount of manual repetitive work, and it eventually
    promotes speed and consistency. Automation is a force multiplier. However, this
    can create a lot of resistance to change. SRE recommends handling this resistance
    to change by understanding the psychology of change.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利用工具和自动化**：SRE利用工具和自动化来减少**劳累工作**（指手动重复性工作），并最终促进速度和一致性。自动化是一个倍增器。然而，这可能会对变更产生很大的抵触情绪。SRE建议通过理解变革心理来应对这种抵触情绪。'
- en: '**Measures everything**: SRE promotes data-driven decision making, encourages
    goal setting by measuring and monitoring critical factors tied to the health and
    reliability of the system. SRE also measures the amount of manual, repetitive
    work spent. Measuring everything is key for setting up SLOs and **Service-Level
    Agreements** (**SLAs**) and reducing toil.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**衡量一切**：SRE倡导数据驱动的决策制定，鼓励通过衡量和监控与系统健康和可靠性相关的关键因素来设定目标。SRE还衡量手动重复性工作的量。衡量一切是设定SLO和**服务级协议**（**SLA**）以及减少劳累工作的关键。'
- en: This wraps up our introduction to SRE's approach to DevOps key pillars; we referred
    to jargon such as SLI, SLO, SLA, error budget, toil, and canary rollouts. These
    will be introduced in the next sub-section.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这就总结了我们对SRE方法与DevOps关键支柱的介绍；我们提到了SLI、SLO、SLA、错误预算、劳累工作和金丝雀发布等术语。接下来我们将在下一个小节中详细介绍这些概念。
- en: Introducing SRE's key concepts
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引入SRE的关键概念
- en: SRE implements the DevOps philosophy via several key concepts, such as SLI,
    SLO, SLA, error budget, and toil.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: SRE通过几个关键概念来实现DevOps理念，如SLI、SLO、SLA、错误预算和劳累工作。
- en: Becoming familiar with SLI, SLO, and SLA
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 熟悉SLI、SLO和SLA
- en: Before diving into the definitions of SRE terminology – specifically SLI, SLO,
    and SLA – this sub-section attempts to introduce this terminology through a relatable
    example.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解SRE术语的定义之前——具体来说是SLI、SLO和SLA——这一小节试图通过一个易于理解的例子来介绍这些术语。
- en: Let's consider that you are a paid consumer for a video streaming service. As
    a paid consumer, you will have certain expectations from the service. A key aspect
    of that expectation is that the service needs to be available. This means when
    you try to access the website of the video streaming service via any permissible
    means, such as mobile device or desktop, the website needs to be accessible and
    the service should always work.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你是一个付费的视频流媒体服务用户。作为付费用户，你会对该服务有一定的期望。这个期望的一个关键方面是，服务需要是可用的。这意味着，当你通过任何允许的方式（如移动设备或桌面）访问视频流媒体服务的网站时，网站应该是可以访问的，并且服务应该始终可用。
- en: If you frequently encounter issues while accessing the service, either because
    the service is experiencing high traffic or the service provider is adding new
    features, or for any other reason, you will not be a happy consumer. Now, it is
    possible that some users can access this service at a moment in time but some
    users are unable to access it at the same moment in time. Those users who are
    able to access it are happy users and users who are unable to access it are sad
    users.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在访问该服务时经常遇到问题，不论是由于服务流量过大，还是服务提供商正在添加新功能，或是其他任何原因，你都不会是一个快乐的消费者。现在，有可能某些用户在某一时刻能够访问该服务，而另一些用户则无法在同一时刻访问。那些能够访问的用户是快乐的用户，而那些无法访问的用户是悲伤的用户。
- en: Availability
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 可用性
- en: The first and most critical feature that a service should provide is **availability**.
    Service availability can also be referred to as its uptime. Availability is the
    ability of an application or service to run when needed. If a system is not running,
    then the system will fail.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一个服务应该提供的第一个也是最关键的功能是**可用性**。服务的可用性也可以称为其正常运行时间。可用性是指一个应用程序或服务在需要时能够运行的能力。如果系统未运行，则系统将失败。
- en: 'Let''s assume that you are a happy user. You can access the service. You can
    create a profile, browse titles, filter titles, watch reviews for specific titles,
    add videos to your watchlist, play videos, or add reviews to viewed videos. Each
    of these actions performed by you as a user can be categorized as a **user journey**.
    For each user journey, you will have certain expectations:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你是一个快乐的用户，你可以访问该服务。你可以创建个人资料、浏览标题、筛选标题、查看特定标题的评论、将视频添加到观看列表、播放视频，或将观看过的视频添加评论。你作为用户执行的每个动作都可以被归类为**用户旅程**。对于每个用户旅程，你会有一定的期望：
- en: If you try to browse titles under a specific category, say *comedy*, you would
    expect that the service loads the titles *without any delay*.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你尝试浏览特定类别下的标题，比如*喜剧*，你会期望服务能够*没有任何延迟*地加载这些标题。
- en: If you select a title that you would like to watch, you would expect to watch
    the video *without any buffering*.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你选择了一个想要观看的标题，你会期望观看视频时*没有任何缓冲*。
- en: If you would like to watch a livestream, you would expect the stream contents
    to be as *fresh* as possible.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想观看直播，你会期望直播内容尽可能*新鲜*。
- en: Let's explore the first expectation. When you as a user tries to browse titles
    under *comedy*, how fast is fast enough?
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探讨第一个期望。当你作为用户尝试浏览*喜剧*类别下的标题时，什么速度才算足够快？
- en: Some users might expect to display the results within 1 second, and some might
    expect it in 200 ms and some others in 500 ms. So, the expectation needs to be
    quantifiable and for it to be quantifiable, it needs to be measurable. The expectation
    should be set to a value where most of the users will be happy. It should also
    be measured for a specific duration (say 5 minutes) and should be met over a period
    (say 30 days). It should not be a one-time event. If the expectation is not met
    over a period users expect, the service provider takes on some accountability
    and addresses the users' concerns either by issuing a refund or adding extra service
    credits.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一些用户可能期望在1秒内显示结果，一些用户可能期望在200毫秒内显示结果，另一些用户则期望在500毫秒内显示。因此，期望值需要是可量化的，为了能够量化，它还需要是可衡量的。期望值应该设置为大多数用户会感到满意的一个数值。它还应当在一个特定的时间段内（例如5分钟）进行衡量，并且在一段时间内（例如30天）得以满足。这不应当是一次性事件。如果期望值在用户期望的时间内没有得到满足，服务提供商需要承担一定责任，并通过退款或添加额外的服务积分来解决用户的投诉。
- en: For a service to be reliable, the service needs to have key characteristics
    based on expectations from user journeys. In this example, the key characteristics
    that the user expects are **latency**, **throughput**, and **freshness**.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使服务可靠，服务需要具备根据用户旅程期望的关键特性。在这个例子中，用户期望的关键特性是 **延迟**、**吞吐量** 和 **新鲜度**。
- en: Reliability
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 可靠性
- en: '**Reliability** is the ability of an application or service to perform a specific
    function within a specific time without failures. If a system cannot perform its
    intended function, then the system will fail.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**可靠性** 是指应用程序或服务在特定时间内执行特定功能而不发生故障的能力。如果系统无法执行其预定功能，那么系统就会失败。'
- en: 'So, to summarize the example of a video streaming service, as a user you will
    expect the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，总结一下视频流服务的例子，作为用户，你会期望以下内容：
- en: The service is available.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务是可用的。
- en: The service is reliable.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务是可靠的。
- en: 'Now, let''s introduce SRE terminology with respect to the preceding example
    before going into their formal definitions:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们根据前面的例子介绍 SRE 术语，然后再深入了解它们的正式定义：
- en: Expecting the service to be available or expecting the service to meet a specific
    amount of latency, throughput, or freshness, or any other characteristic that
    is critical to the user journey, is known as SLI.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 期望服务可用，或者期望服务满足特定的延迟、吞吐量、新鲜度，或其他对用户旅程至关重要的特性，这些都称为 SLI。
- en: Expecting the service to be available or reliable for a certain target level
    over a specific period is SLO.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 期望服务在特定时间段内可用或可靠，达到某一目标水平，这就是 SLO。
- en: Expecting the service to meet a pre-defined customer expectation, the failure
    of which results in a refund or credits, is SLA.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 期望服务满足预定义的客户期望，若未能满足，导致退款或积分补偿，这就是 SLA。
- en: Let's move on from this general understanding of these concepts and explore
    how Google views them by introducing SRE's technical practices.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从对这些概念的一般理解出发，进一步探索 Google 如何看待它们，并介绍 SRE 的技术实践。
- en: SRE's technical practices
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SRE 的技术实践
- en: SRE specifically prescribes the usage of specific technical tools or practices
    that will help to define, measure, and track service characteristics such as availability
    and reliability. These are referred to as SRE technical practices and specifically
    refer to SLIs, SLOs, SLAs, error budget, and toil. These are introduced in the
    following sections with significant insights.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: SRE 特别规定使用特定的技术工具或实践，帮助定义、衡量和跟踪服务特性，例如可用性和可靠性。这些被称为 SRE 技术实践，专门指代 SLI、SLO、SLA、错误预算和无谓劳动。这些内容将在接下来的章节中进行深入介绍。
- en: Service-Level Indicator (SLI)
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 服务级别指标（SLI）
- en: 'Google SRE has the following definition for SLI:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Google SRE 对 SLI 有以下定义：
- en: SLI is a carefully defined quantitative measure of some aspect of the level
    of service that is provided.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: SLI 是一个经过精确定义的定量衡量标准，用于衡量所提供服务的某些方面。
- en: (*Betsy Beyer*, *Chris Jones*, *Jennifer Petoff*, & *Niall Murphy*, *Site Reliability
    Engineering*, *O'REILLY*)
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: (*Betsy Beyer*, *Chris Jones*, *Jennifer Petoff*, & *Niall Murphy*, *Site Reliability
    Engineering*, *O'REILLY*)
- en: Most services consider latency or throughput as key aspects of a service based
    on related user journeys. SLI is a specific measurement of these aspects where
    raw data is aggregated or collected over a measurement window and represented
    as a rate, average, or percentile
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数服务将延迟或吞吐量视为服务的关键方面，这些方面基于相关的用户旅程。SLI 是这些方面的具体测量，其中原始数据会在测量窗口中汇总或收集，并表示为比率、平均值或百分位数。
- en: 'Let''s now look at the characteristics of SLIs:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看 SLI 的特点：
- en: It is a direct measurement of a service performance or behavior.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是对服务性能或行为的直接测量。
- en: Refers to measurable metrics over time.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指的是随着时间推移的可衡量指标。
- en: Can be aggregated and turned to rate, average, or percentile.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以进行汇总并转化为比率、平均值或百分位数。
- en: Used to determine the level of availability. SRE considers availability as the
    prerequisite to success.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于确定可用性的水平。SRE 认为可用性是成功的前提。
- en: 'SLI can be represented as a formula:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: SLI 可以用公式表示：
- en: '![](img/Formula_01_001.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_01_001.png)'
- en: For systems serving requests over HTTPS, validity is often determined by request
    parameters such as hostname or requested path to scope the SLI to a particular
    set of serving tasks, or response handlers. For data processing systems, validity
    is usually determined by the selection of inputs to scope the SLI to a subset
    of data. Good events refer to the expectations from the service or system.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 对于通过HTTPS提供请求的系统，有效性通常由请求参数决定，例如主机名或请求路径，以将SLI范围限定到特定的服务任务集或响应处理程序。对于数据处理系统，通常由输入的选择来决定有效性，以将SLI范围限定到数据的子集。良好的事件是指来自服务或系统的期望。
- en: 'Let''s look at some examples of SLIs:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些SLI的例子：
- en: '**Request latency**: The time taken to return a response for a request should
    be less than 100 ms.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求延迟**：请求返回响应的时间应少于100毫秒。'
- en: '**Failure rate**: The ratio of unsuccessful requests to all received requests
    should be greater than 99%.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**故障率**：失败请求与所有收到的请求的比例应大于99%。'
- en: '**Availability**: Refers to the uptime check on whether a service is available
    or not at a particular point in time.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可用性**：指检查服务在特定时间点是否可用的正常运行时间。'
- en: Service-Level Objective (SLO)
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 服务级目标（SLO）
- en: 'Google SRE uses the following definition for SLO:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Google SRE使用以下SLO定义：
- en: Service level objectives (SLOs) specify a target level for the reliability of
    your service.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 服务级目标（SLO）指定了服务可靠性的目标水平。
- en: (*Betsy Beyer*, *Chris Jones*, *Jennifer Petoff*, & *Niall Murphy*, *Site Reliability
    Engineering*, *O'REILLY*)
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: (*Betsy Beyer*, *Chris Jones*, *Jennifer Petoff*, & *Niall Murphy*, *网站可靠性工程*,
    *O'REILLY*)
- en: Customers have specific expectations from a service and these expectations are
    characterized by specific indicators or SLIs that are tailored per the user journey.
    SLOs are a way to measure customer happiness and their expectations by ensuring
    that the SLIs are consistently met and are potentially reported before the customer
    notices an issue.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 客户对服务有具体期望，这些期望通过特定指标或SLI进行表征，通常根据用户旅程定制。SLO是衡量客户满意度和期望的一种方式，通过确保SLI始终得到满足，并在客户察觉问题之前可能就进行报告。
- en: 'Let''s now look at the characteristics of SLOs:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看看SLO的特点：
- en: Identifies whether a service is reliable enough.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定服务是否足够可靠。
- en: Directly tied to SLIs. SLOs are in fact measured by using SLIs.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与SLI直接相关。实际上，SLO是通过使用SLI来进行测量的。
- en: Can either be a single target or a range of values for the collection of SLIs.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以是单一目标，也可以是一个范围值，用于收集SLI。
- en: If the SLI refers to metrics over time, which details the health of a service,
    then SLOs are agreed-upon bounds on how often the SLIs must be met.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果SLI指的是随时间变化的度量，详细描述了服务的健康状况，那么SLO就是关于SLI必须满足的频率范围的约定。
- en: 'Let''s see how they are represented as a formula:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它们是如何作为公式表示的：
- en: '![](img/Formula_01_002.png) target OR ![](img/Formula_01_003.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_01_002.png) 目标 或 ![](img/Formula_01_003.png)'
- en: SLO can best be represented either as a specific target value or as a range
    of values for an SLI for a specific aspect of a service, such as latency or throughput,
    representing the acceptable lower bound and possible upper bound that is valid
    over a specific period. Given that SLIs are used to measure SLOs, SLIs should
    be within the target or between the range of acceptable values
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: SLO可以最好地表示为特定目标值，也可以表示为服务的特定方面（例如延迟或吞吐量）的SLI范围值，表示在特定期间内有效的可接受的下限和可能的上限。鉴于SLI用于衡量SLO，SLI应在目标值内或处于可接受值的范围之间。
- en: 'Let''s look at some examples of SLOs:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些SLO的例子：
- en: '**Request latency**: 99.99% of all requests should be served under 100 ms over
    a period of 1 month or 99.9% of all requests should be served between 75 ms and
    125 ms for a period of 1 month.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求延迟**：所有请求的99.99%应在1个月内少于100毫秒，或所有请求的99.9%应在1个月内介于75毫秒和125毫秒之间。'
- en: '**Failure rate**: 99.9% of all requests should have a failure rate of 99% over
    1 year.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**故障率**：所有请求的99.9%在一年内的故障率应为99%。'
- en: '**Availability**: The application should be usable for 99.95% of the time over
    24 hours.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可用性**：应用程序在24小时内应可用99.95%的时间。'
- en: Service-Level Agreement (SLA)
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 服务级协议（SLA）
- en: 'Google SRE uses the following definition for SLAs:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Google SRE使用以下SLA定义：
- en: SLA is an explicit or implicit contract with your users that includes consequences
    of meeting (or missing) the SLOs they contain.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: SLA是与用户之间的明确或隐含的契约，其中包括满足（或未满足）SLO时的后果。
- en: (*Betsy Beyer*, *Chris Jones*, *Jennifer Petoff*, & *Niall Murphy*, *Site Reliability
    Engineering*, *O'REILLY*)
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: (*Betsy Beyer*, *Chris Jones*, *Jennifer Petoff*, & *Niall Murphy*, *网站可靠性工程*,
    *O'REILLY*)
- en: An SLA is an external-facing agreement that is provided to the consumer of a
    service. The agreement clearly lays out the minimum expectations that the consumer
    can expect from the service and calls out the consequences that the service provider
    needs to face if found in violation. The consequences are generally applied in
    terms of refund or additional credits to the service consumer.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: SLA 是一种面向外部的协议，提供给服务的消费者。该协议明确列出了消费者可以期望从服务中获得的最低期望，并指出如果违反协议，服务提供商需要承担的后果。这些后果通常是以退款或额外积分的形式提供给服务消费者。
- en: 'Let''s now look at the characteristics of SLAs:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来看一下 SLA 的特点：
- en: SLAs are based on SLOs.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SLA 基于 SLO。
- en: Signifies the business factor that binds the customer and service provider.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标志着将客户与服务提供商绑定在一起的商业因素。
- en: Represents the consequences of what happens when availability or customer expectation
    fails.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表示当可用性或客户期望未能实现时的后果。
- en: Are more lenient than SLOs to trigger early alarms as these are the minimum
    expectations that the service should meet.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相比 SLO，SLA 在触发早期警报时更宽松，因为这些是服务应满足的最低期望。
- en: 'SLAs'' priority in comparison to SLOs can be represented as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 相对于 SLO，SLA 的优先级可以表示如下：
- en: '![](img/Formula_01_004.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_01_004.png)'
- en: 'Let''s look at some examples of SLAs:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些 SLA 的例子：
- en: '**Latency**: 99% of all requests per day should be served under 150 ms; otherwise,
    10% of the daily subscription fee will be refunded.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**延迟**：每天 99% 的请求应在 150 毫秒内响应，否则将退还 10% 的每日订阅费用。'
- en: '**Availability**: The service should be available with an uptime commitment
    of 99.9% in a 30-day period; else 4 hours of extra credit will be added to the
    user account.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可用性**：服务应保证在 30 天内的正常运行时间为 99.9%；否则，将向用户账户添加 4 小时的额外积分。'
- en: Error budgets
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 错误预算
- en: 'Google SRE defines error budgets as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Google SRE 将错误预算定义如下：
- en: A quantitative measurement shared between the product and the SRE teams to balance
    innovation and stability.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 产品团队和 SRE 团队之间共享的定量度量，以平衡创新与稳定性。
- en: (*Betsy Beyer*, *Chris Jones*, *Jennifer Petoff*, & *Niall Murphy*, *Site Reliability
    Engineering*, *O'REILLY*)
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: (*Betsy Beyer*, *Chris Jones*, *Jennifer Petoff*, & *Niall Murphy*, *网站可靠性工程*,
    *O'REILLY*)
- en: While a service needs to be reliable, it should also be mindful that if new
    features are not added to the service, then users might not continue to use it.
    A 100% reliable service will imply that the service will not have any downtime.
    This means that it will be increasingly difficult to add innovation via new features
    that could potentially attract new customers and lead to an increase in revenue.
    Getting to 100% reliability is expensive and complex. Instead, it's recommended
    to find the unique value for service reliability where customers feel that the
    service is reliable enough.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然服务需要保持可靠性，但也应注意，如果不向服务中添加新特性，用户可能不会继续使用该服务。一个 100% 可靠的服务意味着该服务不会出现任何停机时间。这意味着，通过新特性进行创新，以吸引新客户并增加收入，将变得越来越困难。达到
    100% 可靠性既昂贵又复杂。因此，建议找到一个服务可靠性的独特价值，使客户感到该服务已经足够可靠。
- en: Unreliable systems can quickly erode users' confidence. So, it's critical to
    reduce the chance of system failure. SRE aims to balance the risk of unavailability
    with the goals of rapid innovation and efficient service operations so that users'
    overall happiness – with features, service, and performance – is optimized.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 不可靠的系统会迅速削弱用户的信任。因此，减少系统故障的可能性至关重要。SRE 的目标是平衡不可用性风险与快速创新和高效服务运营的目标，以优化用户在功能、服务和性能方面的整体满意度。
- en: 'The error budget is basically the inverse of availability, and it tells us
    how unreliable our service is allowed to be. If your SLO says that 99.9% of requests
    should be successful in a given quarter, your error budget allows 0.1% of requests
    to fail. This unavailability can be generated because of bad pushes by the product
    teams, planned maintenance, hardware failures, and so on:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 错误预算基本上是可用性的倒数，它告诉我们服务被允许多不可靠。如果你的 SLO 说在一个季度内 99.9% 的请求应该是成功的，那么你的错误预算允许 0.1%
    的请求失败。这种不可用性可能是由于产品团队的错误推送、计划的维护、硬件故障等原因造成的：
- en: '![](img/Formula_01_005.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Formula_01_005.png)'
- en: Important note
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'The relationship between the error budget and actual allowed downtime for a
    service is as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 错误预算与服务实际允许停机时间之间的关系如下：
- en: If SLO = 99.5%, then error budget = 0.5% = 0.005
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 SLO = 99.5%，那么错误预算 = 0.5% = 0.005
- en: Allowed downtime per month = 0.005 * 30 days/month * 24 hours/day * 60 minutes/hour
    = 216 minutes/month
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 每月允许停机时间 = 0.005 * 30天/月 * 24小时/天 * 60分钟/小时 = 216分钟/月
- en: 'The following table represents the allowed downtime for a specific time period
    to achieve a certain level of availability. For downtime information calculation
    for a specific availability level (other than the following mentioned), refer
    to [https://availability.sre.xyz/](https://availability.sre.xyz/):'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 下表表示在特定时间段内，为实现特定可用性水平所允许的停机时间。有关计算特定可用性水平（除下文提到的）停机时间信息，请参考[https://availability.sre.xyz/](https://availability.sre.xyz/)：
- en: '![](img/B15587_01_Table-01.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15587_01_Table-01.jpg)'
- en: 'There are advantages to defining the error budget:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 定义错误预算有其优点：
- en: Release new features while keeping an eye on system reliability.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在保持系统可靠性的同时发布新功能。
- en: Roll out infrastructure updates.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推出基础设施更新。
- en: Plan for inevitable failures in networks and other similar events.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计划应对网络及其他类似事件中的不可避免故障。
- en: 'Despite planning error budgets, there are times when a system can overshoot
    it. In such cases, there are a few things that occur:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有错误预算的规划，但有时系统会超出预算。在这种情况下，会发生一些情况：
- en: Release of new features is temporarily halted.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新功能的发布暂时停止。
- en: Increased focus on dev, system, and performance testing.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加对开发、系统和性能测试的关注。
- en: Toil
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 劳动
- en: 'Google SRE defines toil as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Google SRE 将劳动定义如下：
- en: Toil is the kind of work tied to running a production service that tends to
    be manual, repetitive, automatable, tactical, devoid of enduring value and that
    scales linearly as a service grows.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 劳动是与运行生产服务相关的工作，通常是手动的、重复的、可自动化的、战术性的、没有持久价值的，并且随着服务的增长而线性扩展。
- en: (*Betsy Beyer*, *Chris Jones*, *Jennifer Petoff*, & *Niall Murphy*, *Site Reliability*
    *Engineering*, *O'REILLY*)
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: (*Betsy Beyer*, *Chris Jones*, *Jennifer Petoff*, & *Niall Murphy*, *网站可靠性*
    *工程*, *O'REILLY*)
- en: 'Here are the characteristics of toil:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是劳动的特点：
- en: '**Manual**: Act of manually initiating a script that automates a task.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**手动**：手动启动自动化任务脚本的行为。'
- en: '**Repetitive**: Tasks that are repeated multiple times.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重复性**：多次重复的任务。'
- en: '**Automatable**: Human executing a task instead of a machine, especially if
    a machine can execute with the same effectiveness.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可自动化**：由人类执行的任务，而非机器执行，尤其是当机器能以同样的效果执行时。'
- en: '**Tactical**: Reactive tasks originating out of an interruption (such as pager
    alerts), rather than strategy-driven proactive tasks, are considered toil.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**战术性**：从中断（例如呼叫警报）中产生的反应性任务，而非策略驱动的主动任务，视为劳动。'
- en: '**No enduring value**: Tasks that do not change the effective state of the
    service after execution.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无持久价值**：执行后的任务不会改变服务的有效状态。'
- en: '**Linear growth**: Tasks that grow linearly with an increase in traffic or
    service demand.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线性增长**：任务随着流量或服务需求的增加而线性增长。'
- en: Toil is generally confused with **overhead**. Overhead is not the same as toil.
    Overhead is referred to as administrative work that is not tied to running a service,
    but toil refers to repetitive work that can be reduced by automation. Automation
    helps to lower burnout, increase team morale, increase engineering standards,
    improve technical skills, standardize processes, and reduce human error. Examples
    of tasks that represent overhead and not toil are email, commuting, expense reports,
    and meetings.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 劳动通常与**开销**混淆。开销与劳动不同。开销是指与运行服务无关的行政工作，而劳动指的是可以通过自动化减少的重复性工作。自动化有助于减少疲劳，提高团队士气，提升工程标准，改善技术技能，标准化流程，并减少人为错误。代表开销而非劳动的任务例子包括电子邮件、通勤、费用报告和会议。
- en: Canary rollouts
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 金丝雀发布
- en: SRE prescribes implementing gradual change by using canary rollouts, where the
    concept is to introduce a change to a small portion of users to detect any imminent
    danger.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: SRE 建议通过金丝雀发布实施渐进式变更，其中概念是将变更引入一小部分用户，以检测潜在的危险。
- en: To elaborate, when there is a large service that needs to be sustained, it's
    preferable to employ a production change with unknown impact to a small portion
    to identify any potential issue. If any issues are found, the change can be reversed,
    and the impact or cost is much less than if the change was rolled out to the whole
    service.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步说明，当需要维持一个大规模服务时，最好先对一小部分进行生产变更，未知的影响可以帮助发现潜在问题。如果发现问题，可以回滚变更，且其影响或成本远小于将变更推向整个服务时的影响。
- en: 'The following two factors should be considered when selecting the canary population:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 选择金丝雀群体时应考虑以下两个因素：
- en: The size of the canary population should be small enough that it can be quickly
    rolled back in case an issue arises.
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 金丝雀群体的规模应该足够小，以便在出现问题时能够迅速回滚。
- en: The size of the canary population should be large enough that it is a representative
    subset of the total population.
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 金丝雀群体的规模应该足够大，以至于它能够代表整个群体的子集。
- en: This concludes a high-level overview of important SRE technical practices. The
    next section details SRE cultural practices that are key to embrace SRE across
    an organization and are also critical to efficiently handle change management.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这结束了SRE重要技术实践的高级概述。接下来的部分将详细介绍SRE文化实践，这些文化实践是推动整个组织接受SRE的关键，并且对高效处理变更管理至关重要。
- en: SRE's cultural practices
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SRE的文化实践
- en: Defining SLIs, SLOs, and SLAs for a service, using error budgets to balance
    velocity (the rate at which changes are delivered to production) and reliability,
    identifying toil, and using automation to eliminate toil forms SRE's technical
    practices. In addition to these technical practices, it is important to understand
    and build certain cultural practices that eventually support the technical practices.
    Cultural practices are equally important to reduce silos within IT teams, as they
    can reduce the incompatible practices used by individuals within the team. The
    first cultural practice that will be discussed is the need for a unifying vision.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 为服务定义SLI、SLO和SLA，使用错误预算平衡变更速度（将更改交付到生产环境的速度）和可靠性，识别重复劳动，并利用自动化消除重复劳动，构成了SRE的技术实践。除了这些技术实践外，理解并建立某些文化实践同样重要，这些文化实践最终将支持技术实践。文化实践对减少IT团队内部的孤岛效应同样重要，因为它们可以减少团队成员之间不兼容的做法。接下来讨论的第一个文化实践是统一愿景的需求。
- en: Need for a unifying vision
  id: totrans-208
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 统一愿景的需求
- en: 'Every company needs a vision and a team''s vision needs to align with the company''s
    vision. The company''s vision is a combination of core values, the purpose, the
    mission, strategies, and goals:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 每个公司都需要有愿景，团队的愿景需要与公司的愿景保持一致。公司的愿景是核心价值观、目标、使命、战略和目标的结合：
- en: '**Core values**: Values refer to a team member''s commitment to personal/organizational
    goals. It also reflects on how members operate within a team by building trust
    and psychological safety. This creates a culture where the team is open to learning
    and willing to take risks.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**核心价值观**：价值观指团队成员对个人/组织目标的承诺。它还反映了成员如何在团队内运作，通过建立信任和心理安全。这创造了一种文化，使团队乐于学习并愿意冒险。'
- en: '**Purpose**: A team''s purpose refers to the core reason that the team exists
    in the first place. Every team should have a purpose in the larger context of
    the organization.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使命**：团队的使命指的是团队存在的核心原因。每个团队都应该在组织的更大背景下有一个使命。'
- en: '**Mission**: A team''s mission refers to a well-articulated, clear, compelling,
    and unified goal.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使命**：团队的使命指的是一个明确的、清晰的、具有吸引力的和统一的目标。'
- en: '**Strategy**: A team''s strategy refers to a plan on how the team will realize
    its mission.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**战略**：一个团队的战略是指团队如何实现其使命的计划。'
- en: '**Goals**: A team''s goal gives more detailed and specific insights into what
    the team wants to achieve. Google recommends the use of **Objectives and Key Results**
    (**OKRs**), which are a popular goal-setting tool in large companies.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标**：团队的目标提供了更详细和具体的见解，说明团队希望实现的内容。Google推荐使用**目标与关键成果**（**OKRs**），这是大型公司常用的目标设定工具。'
- en: Once a vision statement is established for the company and the team, the next
    cultural practice is to ensure there is efficient collaboration and communication
    within the team and across cross-functional teams. This will be discussed next.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦为公司和团队建立了愿景声明，下一步的文化实践是确保团队内部以及跨职能团队之间的高效协作与沟通。接下来将讨论这一点。
- en: Collaboration and communication
  id: totrans-216
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 协作与沟通
- en: 'Communication and collaboration are critical given the complexity of services
    and the need for these services to be globally accessible. This also means that
    SRE teams should be globally distributed to support services in an effective manner.
    Here are some SRE prescriptive guidelines:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于服务的复杂性以及这些服务需要全球可访问，沟通与协作至关重要。这也意味着SRE团队应该是全球分布的，以有效支持服务。以下是一些SRE的建议性指南：
- en: '**Service-oriented meetings**: SRE teams frequently review the state of the
    service and identify opportunities to improve and increase awareness among stakeholders.
    The meetings are mandatory for team members and typically last 30-60 minutes,
    with a defined agenda such as discussing recent paging events, outages, any required
    configuration changes.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**面向服务的会议**：SRE（站点可靠性工程）团队经常回顾服务的状态，识别改进机会并提高利益相关者的意识。这些会议对团队成员是强制性的，通常持续 30-60
    分钟，议程明确，包括讨论最近的警报事件、故障以及任何必要的配置更改。'
- en: '**Balanced team composition**: SRE teams are spread across multiple countries
    and multiple time zones. This enables them to support a globally available system
    or service. The SRE team composition typically includes a technical lead (to provide
    technical guidance), a manager (who runs performance management), and a project
    manager, who collaborate across time zones.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平衡的团队组成**：SRE 团队分布在多个国家和时区，这使他们能够支持全球可用的系统或服务。SRE 团队的组成通常包括技术负责人（提供技术指导）、经理（负责绩效管理）和项目经理，他们跨时区进行协作。'
- en: '**Involvement throughout the service life cycle**: SRE teams are actively involved
    throughout the service life cycle across various stages such as *architecture
    and design*, *active development*, *limited availability*, *general availability*,
    and *depreciation*.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**贯穿服务生命周期的参与**：SRE 团队积极参与服务生命周期的各个阶段，如*架构与设计*、*积极开发*、*有限可用性*、*一般可用性*和*弃用*。'
- en: '**Establish rules of engagement**: SRE teams should clearly describe what channels
    should be used for what purpose and in what situations. This brings in a sense
    of clarity. SRE teams should use a common set of tools for creating and maintaining
    artifacts'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**建立互动规则**：SRE 团队应清楚地描述在不同情况下应使用哪些渠道来达到什么目的，这样能带来明确感。SRE 团队应使用一套通用工具来创建和维护工件。'
- en: '**Encourage blameless postmortem**: SRE encourages a blameless postmortem culture,
    where the theme is to learn from failure and the focus is on identifying the root
    cause of the issue rather than on individuals. A well-written postmortem report
    can act as an effective tool for driving positive organizational changes since
    the suggestions or improvements mentioned in the report can help to tune up existing
    processes'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**鼓励无责后审**：SRE 鼓励无责后审文化，主题是从失败中学习，重点是识别问题的根本原因，而不是指责个人。一个撰写良好的后审报告可以作为推动积极组织变革的有效工具，因为报告中提到的建议或改进可以帮助调整现有流程。'
- en: '**Knowledge sharing**: SRE teams prescribe knowledge sharing through specific
    means such as encouraging cross-training, creation of a volunteer teaching network,
    and sharing postmortems of incidents in a way that fosters collaboration and knowledge
    sharing.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**知识共享**：SRE 团队通过特定方式促进知识共享，如鼓励交叉培训、创建志愿者教学网络，以及分享事件的后审报告，方式是促进协作和知识共享。'
- en: The preceding guidelines, such as knowledge sharing along with the goal to reduce
    paging events or outages by creating a common set of tools, increase resistance
    among individuals and team members. This might also create a sense of insecurity.
    The next cultural practice elaborates on how to encourage psychological safety
    and reduce resistance to change.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的指导方针，比如通过创建一套通用工具来减少警报事件或故障的知识共享目标，可能会增加个人和团队成员的抵抗情绪。这也可能引发不安全感。接下来的文化实践将详细说明如何鼓励心理安全并减少对变化的抵抗。
- en: Encouraging psychological safety and reducing resistance to change
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 鼓励心理安全并减少对变化的抵抗
- en: SRE prescribes automation as an essential cornerstone to apply engineering principles
    and reduce manual work such as toil. Though eliminating toil through automation
    is a technical practice, there will be huge resistance to performing automation.
    Some may resist automation more than others. Individuals may feel as though their
    jobs are in jeopardy, or they may disagree that certain tasks need not be automated.
    SRE prescribes a cultural practice to reduce the resistance to change by building
    a psychologically safe environment.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: SRE 强调自动化是应用工程原则并减少手工操作（如苦差事）的核心。尽管通过自动化消除苦差事是一项技术实践，但执行自动化将面临巨大的阻力。有些人可能比其他人更抵制自动化。个人可能会感到自己的工作处于危险之中，或者他们可能不同意某些任务不需要自动化。SRE
    提出了一种文化实践，通过建立心理安全的环境来减少对变化的抵抗。
- en: 'In order to build a psychologically safe environment, it is first important
    to communicate the importance of a specific change. For example, if the change
    is to automate this year''s job away, here are some reasons on how automation
    can add value:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 为了建立心理安全的环境，首先需要传达特定变更的重要性。例如，如果变更是自动化今年的工作，以下是自动化如何创造价值的一些原因：
- en: Provides consistency.
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供一致性。
- en: Provides a platform that can be extended and applied to more systems.
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供一个可以扩展并应用于更多系统的平台。
- en: Common faults can be easily identified and resolved more quickly.
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见故障可以更容易地被识别并更快地解决。
- en: Reduces cost by identifying problems as early in the life cycle as possible,
    rather than finding them in production.
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过尽早识别生命周期中的问题，而不是在生产环境中发现它们，从而降低成本。
- en: 'Once the reason for the change is clearly communicated, here are some additional
    pointers that will help to build a *psychologically safe environment*:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦变更的原因得到清晰的沟通，以下是一些额外的建议，有助于建立*心理安全的环境*：
- en: Involve team members in the change. Understand their concerns and empathize
    as needed.
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让团队成员参与到变更中来。了解他们的顾虑，并在需要时进行共情。
- en: Encourage critics to openly express their fears as this adds a sense of freedom
    to team members to freely express their opinions.
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼓励批评者公开表达他们的担忧，因为这为团队成员提供了自由表达意见的空间。
- en: Set realistic expectations.
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设定现实的期望值。
- en: Allow team members to adapt to new changes.
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许团队成员适应新的变更。
- en: Provide them with effective training opportunities and ensure that training
    is engaging and rewarding.
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为他们提供有效的培训机会，并确保培训富有吸引力并具有回报。
- en: This completes an introduction to key SRE cultural practices that are critical
    to implementing SRE's technical practices. Subsequently, this also completes the
    section on SRE where we introduced SRE, discussed its evolution, and elaborated
    on how SRE is a prescriptive way to practically implement DevOps key pillars.
    The next section discusses how to implement DevOps using Google Cloud services.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分介绍了实施 SRE 技术实践所需的关键 SRE 文化实践。接下来，这也完成了关于 SRE 的部分，我们介绍了 SRE，讨论了它的发展，并详细说明了
    SRE 如何成为实践性地实现 DevOps 关键支柱的规定性方式。下一部分讨论了如何使用 Google Cloud 服务来实现 DevOps。
- en: Cloud-native approach to implementing DevOps using Google Cloud
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Google Cloud 实现 DevOps 的云原生方法
- en: This section elaborates on how to implement DevOps using Google Cloud services
    with a focus on a cloud-native approach – an approach that uses cloud computing
    at its core to build highly available, scalable, and resilient applications.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 本节详细讲解了如何使用 Google Cloud 服务实现 DevOps，重点介绍了云原生方法——一种以云计算为核心来构建高可用、可扩展和具有弹性的应用程序的方法。
- en: Focus on microservices
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 专注于微服务
- en: A **monolith application** has a tightly coupled architecture and implements
    all possible features in a single code base along with the database. Though monolith
    applications can be designed with modular components, the components are still
    packaged at deployment time and deployed together as a single unit. From a CI/CD
    standpoint, this will potentially result in a single build pipeline. Fixing an
    issue or adding a new feature is an extremely time-consuming process since the
    impact is on the entire application. This decreases the release velocity and essentially
    is a nightmare for production support teams dealing with service disruption.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '**单体应用**具有紧耦合的架构，并在单一代码库和数据库中实现所有可能的功能。尽管单体应用可以通过模块化组件来设计，但这些组件仍然会在部署时一起打包并作为一个单独的单元进行部署。从
    CI/CD 的角度来看，这可能会导致一个单一的构建管道。修复问题或添加新功能是一个非常耗时的过程，因为它会影响整个应用程序。这会降低发布速度，本质上对于处理服务中断的生产支持团队来说是一个噩梦。'
- en: In contrast, a **microservice application** is based on service-oriented architecture.
    A microservice application divides a large program into several smaller, independent
    services. This allows the components to be managed by smaller teams as the components
    are more isolated in nature. The teams, as well as the service, can be independently
    scaled. Microservices fundamentally support the concept of incremental code change.
    With microservices, the individual components are deployable. Given that microservices
    are feature-specific, in the event of an issue, fault detection and isolation
    are much easier and hence service disruptions can be handled quickly and efficiently.
    This also makes it much more suitable for CI/CD processes and works well with
    the theme of *building reliable software faster*!
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，**微服务应用程序**基于面向服务的架构。微服务应用程序将大型程序分解为若干较小、独立的服务。这使得这些组件可以由更小的团队进行管理，因为这些组件本质上是更加隔离的。团队和服务都可以独立扩展。微服务从根本上支持增量代码更改的概念。在微服务中，单独的组件是可部署的。由于微服务具有特定的功能，因此一旦出现问题，故障检测和隔离会更加容易，从而可以快速高效地处理服务中断。这也使其更加适合
    CI/CD 流程，并与*更快构建可靠软件*的主题非常契合！
- en: Exam tip
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 考试小贴士
- en: Google Cloud provides several compute services that facilitate the deployment
    of microservices as containers. These include App Engine flexible environment,
    Cloud Run, **Google Compute Engine** (**GCE**), and **Google Kubernetes Engine**
    (**GKE**). From a Google Cloud DevOps exam perspective, the common theme is to
    build containers and deploy containers using GKE. GKE will be a major focus area
    and will be discussed in detail in the upcoming chapters.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌云提供多种计算服务，便于将微服务部署为容器。这些服务包括App Engine灵活环境、Cloud Run、**谷歌计算引擎**（**GCE**）和**谷歌
    Kubernetes 引擎**（**GKE**）。从谷歌云 DevOps 考试的角度来看，核心主题是构建容器并使用 GKE 部署容器。GKE 将是一个主要关注领域，并将在接下来的章节中详细讨论。
- en: Cloud-native development
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 云原生开发
- en: 'Google promotes and recommends application development using the following
    cloud-native principles:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌推动并推荐使用以下云原生原则进行应用开发：
- en: '**Use microservice architectural patterns**: As discussed in the previous sub-section,
    the essence is to build smaller independent services that could be managed separately
    and be scaled granularly.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用微服务架构模式**：如前一小节所讨论的，核心是构建较小的独立服务，这些服务可以单独管理并且实现精细化扩展。'
- en: '**Treat everything as code**: This principle makes it easier to track, roll
    back code if required, and see the version of change. This includes source code,
    test code, automation code, and infrastructure as code.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将一切视为代码**：这一原则使得追踪代码、在需要时回滚代码以及查看变更版本变得更加容易。包括源代码、测试代码、自动化代码和基础设施即代码。'
- en: '**Build everything as containers**: A container image can include software
    dependencies needed by the application, specific language runtimes, and other
    software libraries. Containers can be run anywhere, making it easier to develop
    and deploy. This allows developers to focus on code and ops teams will spend less
    time debugging and diagnosing differences in environments.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将一切构建为容器**：一个容器镜像可以包含应用程序所需的软件依赖项、特定语言的运行时以及其他软件库。容器可以在任何地方运行，使得开发和部署变得更加容易。这使得开发人员能够专注于代码，运维团队则能减少调试和诊断环境差异的时间。'
- en: '**Design for automation**: Automated processes can repair, scale, and deploy
    systems faster than humans. As a critical first step, a comprehensive CI/CD pipeline
    is required that can automate the build, testing, and deployment process. In addition,
    the services that are deployed as containers should be configured to scale up
    or down based on outstanding traffic. Real-time monitoring and logging should
    be used as a source for automation since they provide insights into potential
    issues that could be mitigated by building proactive actions. The idea of automation
    can also be extended to automate the entire infrastructure using techniques such
    as **Infrastructure as Code** (**IaC**).'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为自动化设计**：自动化流程可以比人工更快地修复、扩展和部署系统。作为关键的第一步，需要一个全面的 CI/CD 流水线，它可以自动化构建、测试和部署过程。此外，作为容器部署的服务应根据流量的变化进行动态扩展或收缩。实时监控和日志记录应作为自动化的基础，因为它们提供了可能出现的问题的洞察，这些问题可以通过构建主动的措施来缓解。自动化的思想还可以扩展到通过
    **基础设施即代码**（**IaC**）等技术自动化整个基础设施。'
- en: '**Design components to be stateless wherever possible**: Stateless components
    are easy to scale up or down, repair a failed instance by graceful termination
    and potential replacement, roll back to an older instance in case of issues, and
    make load balancing a lot simpler since any instance can handle any request. Any
    need to store persistent data should happen outside the container, such as storing
    files using Cloud Storage, storing user sessions through Redis or Memcached, or
    using persistent disks for block-level storage.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**尽可能设计无状态组件**：无状态组件易于扩展或缩减，通过优雅终止和潜在替换修复失败的实例，在出现问题时可以回滚到旧的实例，并使负载均衡更简单，因为任何实例都可以处理任何请求。任何需要存储持久数据的需求应发生在容器之外，例如使用Cloud
    Storage存储文件，通过Redis或Memcached存储用户会话，或者使用持久磁盘进行块级存储。'
- en: 'Google Cloud provides two approaches for cloud-native development – **serverless**
    and **Kubernetes**. The choice comes down to focus on infrastructure versus business
    logic:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: Google Cloud提供了两种云原生开发方式——**无服务器**和**Kubernetes**。选择的关键在于关注基础设施与业务逻辑：
- en: '**Serverless** (via Cloud Run, Cloud Functions, or App Engine): Allows us to
    focus on the business logic of the application by providing a higher level of
    abstraction from an infrastructure standpoint.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无服务器**（通过Cloud Run、Cloud Functions或App Engine）：通过提供更高层次的基础设施抽象，使我们能够专注于应用程序的业务逻辑。'
- en: '**Kubernetes** (via GKE): Provides higher granularity and control on how multiple
    microservices can be deployed, how services can communicate with each other, and
    how external clients can interact with these services.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes**（通过GKE）：提供更高的粒度和控制，能够决定多个微服务如何部署、服务之间如何相互通信，以及外部客户端如何与这些服务进行交互。'
- en: Managed versus serverless service
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 托管与无服务器服务
- en: Managed services allow operations related to updates, networking, patching,
    high availability, automated backups, and redundancy to be managed by the cloud
    provider. Managed services are not serverless as it is required to specify a machine
    size and the service mandates to have a minimal number of VMs/nodes. For example,
    it is required to define the machine size while creating a cloud SQL instance,
    but updates and patches can be configured to be managed by Google Cloud.
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 托管服务使得与更新、网络、补丁、高可用性、自动备份和冗余相关的操作由云服务提供商管理。托管服务并非无服务器架构，因为需要指定机器的大小，并且服务要求至少有一个最小数量的VM/节点。例如，在创建Cloud
    SQL实例时，需要定义机器大小，但更新和补丁可以配置为由Google Cloud进行管理。
- en: Serverless services are **managed** but do not require reserving a server upfront
    or keeping it running. The focus is on the business logic of the application with
    the possibility of running or executing code only when needed. Examples are *Cloud
    Run*, *Cloud Storage*, *Cloud Firestore*, and *Cloud Datastore*.
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 无服务器服务是**托管的**，但不需要预留服务器或保持其运行。重点是应用程序的业务逻辑，仅在需要时执行或运行代码。示例包括*Cloud Run*、*Cloud
    Storage*、*Cloud Firestore*和*Cloud Datastore*。
- en: Continuous integration in GCP
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GCP中的持续集成
- en: '**Continuous integration** forms the **CI** of the CI/CD process and at its
    heart is the culture of submitting smaller units of change frequently. Smaller
    changes minimize the risk, help to resolve issues quickly, increase development
    velocity, and provide frequent feedback. The following are the building blocks
    that make up the CI process:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成**构成了CI/CD流程中的**CI**部分，其核心在于频繁提交较小的变更单元。较小的变更能最小化风险，帮助快速解决问题，提升开发速度，并提供频繁的反馈。以下是构成CI流程的基础模块：'
- en: '**Make code changes**: By using the IDE of choice and possible cloud-native
    plugins'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进行代码更改**：通过使用所选的IDE和可能的云原生插件'
- en: '**Manage source code**: By using a single shared code repository'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理源代码**：通过使用单一共享代码库'
- en: '**Build and create artifacts**: By using an automated build process'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建并创建制品**：通过使用自动化构建过程'
- en: '**Store artifacts**: By storing artifacts such as container images in a repository
    for a future deployment process'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储制品**：通过将制品（如容器镜像）存储在仓库中，以便未来的部署过程'
- en: 'Google Cloud has an appropriate service for each of the building blocks that
    allows us to build a GCP-native CI pipeline (refer to *Figure 1.2*). The following
    is a summary of these services, which will be discussed in detail in upcoming
    chapters:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: Google Cloud为每个构建模块提供了适当的服务，使我们能够构建一个GCP原生的CI流水线（参见*图1.2*）。以下是这些服务的总结，详细内容将在后续章节中讨论：
- en: '![Figure 1.2 – CI in GCP'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.2 – GCP中的CI'
- en: '](img/B15587_01_02.jpg)'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15587_01_02.jpg)'
- en: Figure 1.2 – CI in GCP
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 – GCP中的CI
- en: Let's look at these stages in detail.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细了解这些阶段。
- en: Cloud Code
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Cloud Code
- en: 'This is the GCP service to write, debug, and deploy cloud-native applications.
    Cloud Code provides extensions to IDEs such as *Visual Studio Code* and the *JetBrains
    suite* of IDEs that allows to rapidly iterate, debug, and run code on Kubernetes
    and Cloud Run. Key features include the following:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 这是GCP服务，用于编写、调试和部署云原生应用程序。Cloud Code为*Visual Studio Code*和*JetBrains套件*的IDE提供扩展，允许在Kubernetes和Cloud
    Run上快速迭代、调试和运行代码。主要功能包括以下内容：
- en: Speed up development and simplify local development
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加速开发并简化本地开发
- en: Extend to production deployments on GKE or Cloud Run and allow debugging deployed
    applications
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展到GKE或Cloud Run上的生产部署，并允许调试已部署的应用程序
- en: Deep integration with Cloud Source Repositories and Cloud Build
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Cloud Source Repositories和Cloud Build的深度集成
- en: Easy to add and configure Google Cloud APIs from built-in library manager
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻松地通过内建的库管理器添加和配置Google Cloud APIs
- en: Cloud Source Repositories
  id: totrans-276
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Cloud Source Repositories
- en: 'This is the GCP service to manage source code. It provides Git version control
    to support the collaborative development of any application or service. Key features
    include the following:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 这是GCP服务，用于管理源代码。它提供Git版本控制，支持任何应用程序或服务的协同开发。主要功能包括以下内容：
- en: Fully managed private Git repository
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全托管的私有Git仓库
- en: Provides one-way sync with Bitbucket and GitHub source repositories
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供与Bitbucket和GitHub源代码仓库的单向同步
- en: Integration with GCP services such as Cloud Build and Cloud Operations
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与GCP服务如Cloud Build和Cloud Operations的集成
- en: Includes universal code search within and across repositories
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括跨仓库的通用代码搜索
- en: Cloud Build
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Cloud Build
- en: 'This is the GCP service to build and create artifacts based on commits made
    to source code repositories such as GitHub, Bitbucket, or Google''s Cloud Source
    Repositories. These artifacts can be container or non-container artifacts. The
    GCP DevOps exam''s primary focus will be on container artifacts. Key features
    include the following:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 这是GCP服务，用于根据对源代码仓库（如GitHub、Bitbucket或Google的Cloud Source Repositories）进行的提交构建和创建产物。这些产物可以是容器产物或非容器产物。GCP
    DevOps考试的主要关注点将是容器产物。主要功能包括以下内容：
- en: Fully serverless platform with no need to pre-provision servers or pay in advance
    for additional capacity. Will scale up and down based on load
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全无服务器平台，无需预先配置服务器或为额外容量预付费用。将根据负载自动扩展或缩减
- en: Includes Google and community builder images with support for multiple languages
    and tools
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括Google和社区构建的镜像，支持多种语言和工具
- en: Includes custom build steps and pre-created extensions to third-party apps that
    enterprises can easily integrate into their build process
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括自定义构建步骤和预创建的第三方应用扩展，企业可以轻松将其集成到构建流程中
- en: Focus on security with vulnerability scanning and the ability to define policies
    that can block the deployment of vulnerable images
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过漏洞扫描并能够定义策略来阻止漏洞图片的部署，专注于安全性
- en: Container/Artifact Registry
  id: totrans-288
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 容器/产物注册表
- en: 'This is the GCP construct to store artifacts that include both container (Docker
    images) and non-container artifacts (such as Java and Node.js packages). Key features
    include the following:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 这是GCP的构建，用于存储包含容器（Docker镜像）和非容器产物（如Java和Node.js包）的产物。主要功能包括以下内容：
- en: Seamless integration with Cloud Source Repositories and Cloud Build to upload
    artifacts to Container/Artifact Registry.
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Cloud Source Repositories和Cloud Build无缝集成，支持将构建产物上传到容器/产物注册表。
- en: Ability to set up a secure private build artifact storage on Google Cloud with
    granular access control.
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够在Google Cloud上设置安全的私有构建产物存储，并具备细粒度的访问控制。
- en: Create multiple regional repositories within a single Google Cloud project.
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一个Google Cloud项目中创建多个区域性仓库。
- en: Continuous delivery/deployment in GCP
  id: totrans-293
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在GCP中实现持续交付/部署
- en: '**Continuous delivery**/**deployment** forms the **CD** of the CI/CD process
    and at its heart is the culture of continuously delivering production-ready code
    or deploying code to production. This allows us to release software at high velocity
    without sacrificing quality.'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续交付**/**部署**构成了CI/CD过程中的**CD**部分，其核心是持续交付生产就绪代码或将代码部署到生产环境的文化。这使我们能够以高速度发布软件，同时不牺牲质量。'
- en: GCP offers multiple services to deploy code, such as *Compute Engine*, *App
    Engine*, *Kubernetes Engine*, *Cloud Functions*, and *Cloud Run*. The focus of
    this book will be on GKE and Cloud Run. This is in alignment with the Google Cloud
    DevOps exam objectives.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure summarizes the different stages of continuous delivery/deployment
    from the viewpoint of appropriate GCP services:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – Continuous delivery/deployment in GCP'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15587_01_03.jpg)'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.3 – Continuous delivery/deployment in GCP
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at the two container-based deployments in detail.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: Google Kubernetes Engine (GKE)
  id: totrans-301
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is the GCP service to deploy containers. GKE is Google Cloud''s implementation
    of the **CNCF Kubernetes project**. It''s a managed environment for deploying,
    managing, and scaling containerized applications using Google''s infrastructure.
    Key features include the following:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: Automatically provisions and manages a cluster's master-related infrastructure
    and abstracts away the need for a separate master node
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic scaling of a cluster's node instance count
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic upgrades of a cluster's node software
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Node auto-repair to maintain the node's health
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Native integration with Google's Cloud Operations for logging and monitoring
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud Run
  id: totrans-308
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is a GCP-managed serverless platform that can deploy and run Docker containers.
    These containers can be deployed in either Google-managed Kubernetes clusters
    or on-premises workloads using *Cloud Run for Anthos*. Key features include the
    following:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: Abstracts away infrastructure management by automatically scaling up and down
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only charges for exact resources consumed
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Native GCP integration with Google Cloud services such as Cloud Code, Cloud
    Source Repositories, Cloud Build, and Artifact Registry
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports event-based invocation via web requests with Google Cloud services
    such as Cloud Scheduler, Cloud Tasks, and Cloud Pub/Sub
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous monitoring/operations on GCP
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Continuous Monitoring/Operations** forms the feedback loop of the CI/CD process
    and at its heart is the culture of continuously monitoring or observing the performance
    of the service/application.'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: 'GCP offers a suite of services that provide different aspects of Continuous
    Monitoring/Operations, aptly named **Cloud Operations** (formerly known as **Stackdriver**).
    Cloud Operations includes **Cloud Monitoring**, **Cloud Logging**, **Error Reporting**,
    and **Application Performance Management** (**APM**). APM further includes **Cloud
    Debugger**, **Cloud Trace**, and **Cloud Profiler**. Refer to the following diagram:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Continuous monitoring/operations'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15587_01_04.jpg)'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.4 – Continuous monitoring/operations
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at these operations- and monitoring-specific services in detail.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: Cloud Monitoring
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is the GCP service that collects metrics, events, and metadata from Google
    Cloud and other providers. Key features include the following:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: Provides out-of-the-box default dashboards for many GCP services
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports uptime monitoring and alerting to various types of channels
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持运行时间监控并向各种类型的渠道发送警报
- en: Provides easy navigation to drill down from alerts to dashboards to logs and
    traces to quickly identify the root cause
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供便捷的导航功能，能从警报、仪表盘、日志和跟踪中深入分析，快速识别根本原因
- en: Supports non-GCP environments with the use of agents
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用代理支持非 GCP 环境
- en: Cloud Logging
  id: totrans-327
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 云日志
- en: 'This is the GCP service that allows us to store, search, analyze, monitor,
    and alert on logging data and events from **Google** **Cloud** and **Amazon Web
    Services**. Key features include the following:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 GCP 服务，它允许我们存储、搜索、分析、监控并对来自**Google** **Cloud**和**Amazon Web Services**的日志数据和事件进行警报。主要功能包括以下内容：
- en: A fully managed service that performs at scale with sub-second ingestion latency
    at terabytes per second
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一项完全托管的服务，在规模化时能以亚秒级的延迟、每秒数 TB 的吞吐量运行
- en: Analyzes log data across multi-cloud environment from a single place
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从一个地方分析跨多云环境的日志数据
- en: Ability to ingest application and system log data from thousands of VMs
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够从成千上万的虚拟机中摄取应用程序和系统日志数据
- en: Ability to create metrics from streaming logs and analyze log data in real time
    using BigQuery
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够从流式日志中创建指标，并使用 BigQuery 实时分析日志数据
- en: Error Reporting
  id: totrans-333
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 错误报告
- en: 'This is the GCP service that aggregates, counts, analyzes, and displays application
    errors produced from running cloud services. Key features include the following:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 GCP 服务，它聚合、计数、分析并显示从运行云服务中产生的应用程序错误。主要功能包括以下内容：
- en: Dedicated view of error details that include a time chart, occurrences, affected
    user count, first and last seen dates, and cleaned exception stack trace
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 专用的错误详细信息视图，包括时间图、出现次数、受影响的用户数、首次和最后一次出现的日期，以及清理后的异常堆栈跟踪
- en: Lists out the top or new errors in a clear dashboard
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在清晰的仪表盘中列出最常见或最新的错误
- en: Constantly analyzes exceptions and aggregates them into meaningful groups
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续分析异常并将其聚合成有意义的组
- en: Can translate the occurrence of an uncommon error into an alert for immediate
    attention
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以将罕见错误的发生转化为警报，以便立即处理
- en: Application Performance Management
  id: totrans-339
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用性能管理
- en: 'This is the GCP service that combines monitoring and troubleshooting capabilities
    of Cloud Logging and Cloud Monitoring with Cloud Trace, Cloud Debugger, and Cloud
    Profiler, to help reduce latency and cost and enable us to run applications more
    efficiently. Key features include the following:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 GCP 服务，它结合了 Cloud Logging 和 Cloud Monitoring 的监控与故障排除能力，并与 Cloud Trace、Cloud
    Debugger 和 Cloud Profiler 集成，帮助减少延迟和成本，并使我们能够更高效地运行应用程序。主要功能包括以下内容：
- en: A distributed tracing system (via Cloud Trace) that collects latency data from
    your applications to identify performance bottleneck
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种分布式跟踪系统（通过 Cloud Trace），它收集来自应用程序的延迟数据，以识别性能瓶颈
- en: Inspects a production application by taking a snapshot of the application state
    in real time, without stopping or slowing down (via Cloud Debugger), and provides
    the ability to inject log messages as part of debugging
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 Cloud Debugger 实时检查生产应用程序状态快照，无需停止或减慢应用程序，并提供在调试过程中注入日志消息的能力
- en: Low-impact production profiling (via Cloud Profiler) using statistical techniques,
    to present the call hierarchy and resource consumption of relevant function in
    an interactive flame graph
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过统计技术实现低影响的生产分析（通过 Cloud Profiler），以交互式火焰图呈现相关功能的调用层次结构和资源消耗
- en: Bringing it all together – building blocks for a CI/CD pipeline in GCP
  id: totrans-344
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 整合所有内容 – 在 GCP 中构建 CI/CD 流水线的构建块
- en: 'The following figure represents the building blocks that are required to build
    a CI/CD pipeline in GCP:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 下图表示在 GCP 中构建 CI/CD 流水线所需的构建块：
- en: '![Figure 1.5 – GCP building blocks representing the DevOps life cycle'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 1.5 – 表示 DevOps 生命周期的 GCP 构建块'
- en: '](img/B15587_01_05.jpg)'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15587_01_05.jpg)'
- en: Figure 1.5 – GCP building blocks representing the DevOps life cycle
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – 表示 DevOps 生命周期的 GCP 构建块
- en: In the preceding figure, the section for **Continuous Feedback/Analysis** represents
    the GCP services that are used to analyze or store information obtained during
    Continuous Monitoring/Operations either from an event-driven or compliance perspective.
    This completes the section on an overview of Google Cloud services that can be
    used to implement the key stages of the DevOps life cycle using a cloud-native
    approach with emphasis on decomposing a complex system into microservices that
    can be independently tested and deployed.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 在前述图表中，**持续反馈/分析**部分代表了 GCP 服务，用于分析或存储在持续监控/操作过程中获取的信息，这些信息来自事件驱动或合规视角。这完成了关于
    Google Cloud 服务概览的部分，这些服务可以通过云原生方法实施 DevOps 生命周期的关键阶段，强调将复杂系统分解为微服务，从而可以独立测试和部署。
- en: Summary
  id: totrans-350
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about DevOps practices that break down the metaphorical
    wall between developers (who constantly want to push features to production) and
    operators (who want to run the service reliably).
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了 DevOps 实践，它打破了开发人员（他们总是希望将功能推向生产）与运维人员（他们希望可靠地运行服务）之间的隐喻性壁垒。
- en: We learned about the DevOps life cycle, key pillars of DevOps, how Google Cloud
    implements DevOps through SRE, and Google's cloud-native approach to implementing
    DevOps. We learned about SRE's technical and cultural practices and were introduced
    to key GCP services that help to build the CI/CD pipeline. In the next chapter,
    we will take an in-depth look at SRE's technical practices such as SLI, SLO, SLA,
    and error budget.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了 DevOps 生命周期、DevOps 的关键支柱、Google Cloud 如何通过 SRE 实现 DevOps 以及 Google 的云原生方法来实施
    DevOps。我们了解了 SRE 的技术和文化实践，并且介绍了帮助构建 CI/CD 管道的关键 GCP 服务。在下一章中，我们将深入探讨 SRE 的技术实践，如
    SLI、SLO、SLA 和错误预算。
- en: Points to remember
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需要记住的要点
- en: 'The following are some important points:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些重要的要点：
- en: 'If DevOps is a philosophy, SRE is a prescriptive way of achieving that philosophy:
    *class SRE* implements DevOps.'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 DevOps 是一种哲学，SRE 是实现这种哲学的规定性方法：*类 SRE* 实现 DevOps。
- en: SRE balances the velocity of development features with the risk to reliability.
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SRE 平衡开发特性的速度与可靠性风险。
- en: SLA represents an external agreement and will result in consequences when violated.
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SLA 代表外部协议，违反时会导致后果。
- en: SLOs are a way to measure customer happiness and their expectations.
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SLO 是衡量客户满意度和客户期望的方式。
- en: SLIs are best expressed as a proportion of all successful events to valid events.
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SLI 最好以所有成功事件与有效事件的比例来表示。
- en: Error budget is the inverse of availability and depicts how unreliable a service
    is allowed to be.
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误预算是可用性的倒数，表示服务可以容忍的不可用程度。
- en: Toil is manual work tied to a production system but is not the same as overhead.
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Toil 是与生产系统相关的手动工作，但与开销不同。
- en: The need for unifying vision, communication, and collaboration with an emphasis
    on blameless postmortems and the need to encourage psychological safety and reduce
    resistance to change are key SRE cultural practices.
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 统一愿景、沟通与协作的需求，强调无责后期分析（blameless postmortems），并需要鼓励心理安全，减少对变化的抵制，都是 SRE 文化实践的关键内容。
- en: Google emphasizes the use of microservices and cloud-native development for
    application development.
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google 强调使用微服务和云原生开发来进行应用程序开发。
- en: Serverless services are managed but managed services are necessarily not serverless.
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无服务器服务是托管的，但托管服务不一定是无服务器的。
- en: Further reading
  id: totrans-365
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: 'For more information on GCP''s approach toward DevOps, read the following articles:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解 GCP 对 DevOps 方法的更多信息，请阅读以下文章：
- en: 'DevOps: [https://cloud.google.com/devops](https://cloud.google.com/devops)'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'DevOps: [https://cloud.google.com/devops](https://cloud.google.com/devops)'
- en: 'SRE: [https://landing.google.com/sre/](https://landing.google.com/sre/)'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'SRE: [https://landing.google.com/sre/](https://landing.google.com/sre/)'
- en: 'CI/CD on Google Cloud: [https://cloud.google.com/docs/ci-cd](https://cloud.google.com/docs/ci-cd)'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Google Cloud 上的 CI/CD: [https://cloud.google.com/docs/ci-cd](https://cloud.google.com/docs/ci-cd)'
- en: Practice test
  id: totrans-370
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践测试
- en: 'Answer the following questions:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 请回答以下问题：
- en: Which of the following represents a sequence of tasks that is central to user
    experience and is crucial to service?
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪项代表的是与用户体验密切相关并且对服务至关重要的一系列任务？
- en: a) User story
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) 用户故事
- en: b) User journey
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) 用户旅程
- en: c) Toil
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) Toil
- en: d) Overhead
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) 开销
- en: If the SLO for the uptime of a service is set to 99.95%, what is the possible
    SLA target?
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果某个服务的 SLO 设置为 99.95% 的正常运行时间，可能的 SLA 目标是什么？
- en: a) 99.99
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) 99.99
- en: b) 99.95
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) 99.95
- en: c) 99.96
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) 99.96
- en: d) 99.90
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) 99.90
- en: Which of the following accurately describes the equation for SLI?
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪项准确描述了 SLI 的公式？
- en: a) Good events / Total events
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) 好事件 / 总事件
- en: b) Good events / Total events * 100
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) 好事件 / 总事件 * 100
- en: c) Good events / Valid events
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) 好事件 / 有效事件
- en: d) Good events / Valid events * 100
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) 好事件 / 有效事件 * 100
- en: Which of the following represents a carefully defined quantitative measure of
    some aspect of the level of service?
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪项表示对某些服务级别方面的量化度量的精确定义？
- en: a) SLO
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) SLO
- en: b) SLI
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) SLI
- en: c) SLA
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) SLA
- en: d) Error budget
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) 错误预算
- en: Select the option used to calculate the error budget.
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择用于计算错误预算的选项。
- en: a) (100 – SLO) * 100
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) (100 – SLO) * 100
- en: b) 100 – SLI
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) 100 – SLI
- en: c) 100 – SLO
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) 100 – SLO
- en: d) (100 – SLI) * 100
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) (100 – SLI) * 100
- en: Which set of Google services accurately depicts the continuous feedback loop?
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪组 Google 服务准确地描绘了持续反馈循环？
- en: a) Monitoring, Logging, Reporting
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) 监控、日志记录、报告
- en: b) Bigtable, Cloud Storage, BigQuery
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) Bigtable、Cloud Storage、BigQuery
- en: c) Monitoring, Logging, Tracing
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) 监控、日志记录、跟踪
- en: d) BigQuery, Pub-Sub, Cloud Storage
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) BigQuery、Pub-Sub、Cloud Storage
- en: In which of the following "continuous" processes are changes automatically deployed
    to production without manual intervention?
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪种“持续”过程是自动将变更部署到生产环境，而无需手动干预？
- en: a) Delivery
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) 交付
- en: b) Deployment
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) 部署
- en: c) Integration
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) 集成
- en: d) Monitoring
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) 监控
- en: Select the option that ranks the compute services from a service that requires
    the most management needs with the highest customizability to a service with fewer
    management needs and the lowest customizability.
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个选项，将计算服务按从最需要管理、最具自定义能力的服务到最少管理需求、最低自定义能力的服务进行排序。
- en: a) Compute Engine, App Engine, GKE, Cloud Functions
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) Compute Engine、App Engine、GKE、Cloud Functions
- en: b) Compute Engine, GKE, App Engine, Cloud Functions
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) Compute Engine、GKE、App Engine、Cloud Functions
- en: c) Compute Engine, App Engine, Cloud Functions, GKE
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) Compute Engine、App Engine、Cloud Functions、GKE
- en: d) Compute Engine, GKE, Cloud Functions, App Engine
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) Compute Engine、GKE、Cloud Functions、App Engine
- en: Awesome Incorporated is planning to move their on-premises CI pipeline to the
    cloud. Which of the following services provides a private Git repository hosted
    on GCP?
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Awesome Incorporated 计划将其本地 CI 流水线迁移到云端。以下哪项服务提供了托管在 GCP 上的私有 Git 仓库？
- en: a) Cloud Source Repositories
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) Cloud Source Repositories
- en: b) Cloud GitHub
  id: totrans-414
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) Cloud GitHub
- en: c) Cloud Bitbucket
  id: totrans-415
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) Cloud Bitbucket
- en: d) Cloud Build
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) Cloud Build
- en: Your goal is to adopt SRE cultural practices in your organization. Select two
    options that could help to achieve this goal.
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的目标是将 SRE 文化实践引入组织中。选择两个可以帮助实现此目标的选项。
- en: a) Launch and iterate.
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) 启动并迭代。
- en: b) Enable daily culture meetings.
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) 启动每日文化会议。
- en: c) Ad hoc team composition.
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) 临时团队组成。
- en: d) Create and communicate a clear message.
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) 创建并传达清晰的信息。
- en: Answers
  id: totrans-422
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: (b) – User journey
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (b) – 用户旅程
- en: (d) – 99.90
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (d) – 99.90
- en: (d) - Good events / Valid events * 100
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (d) - 好事件 / 有效事件 * 100
- en: (b) - SLI
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (b) - SLI
- en: (c) – 100 – SLO
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (c) – 100 – SLO
- en: (d) – BigQuery, Pub-Sub, Cloud Storage
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (d) – BigQuery、Pub-Sub、Cloud Storage
- en: (b) – Deployment (forming continuous deployment)
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (b) – 部署（形成持续部署）
- en: (b) – Compute Engine, GKE, App Engine, Cloud Functions
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (b) – Compute Engine、GKE、App Engine、Cloud Functions
- en: (a) – Cloud Source Repositories
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (a) – Cloud Source Repositories
- en: (a) and (d) – Launch and iterate. Create and communicate a clear message.
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (a) 和 (d) – 启动并迭代。创建并传达清晰的信息。
