- en: '*Chapter 4*: Building SRE Teams and Applying Cultural Practices'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last three chapters introduced the fundamentals of **Site Reliability Engineering**
    (**SRE**), traced its origins, laid out how SRE is different than DevOps, introduced
    SRE jargon along with its key technical practices such as **Service Level Agreements**
    (**SLAs**), **Service Level Objectives** (**SLOs**), **Service Level Indicators**
    (**SLIs**), and **Error Budgets**, and focused on monitoring and alerting concepts
    to target reliability.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will focus on the fundamentals required to build SRE teams and
    apply cultural practices such as handling facets of incident management, being
    on call, achieving psychological safety, promoting communication, collaboration
    and knowledge sharing. These fundamentals and cultural practices can be used as
    a blueprint for teams or organizations that want to start their SRE journey.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Building SRE teams** – Staffing, creating SRE teams, and engaging the team'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Incident management** – Incident life cycle and constructs to handle the
    incident'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Being on call** – Challenges to tackle, operational overload, and effective
    troubleshooting'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Psychological safety and fostering collaboration** – Factors to achieve psychological
    safety, unified vision, communication, and collaboration and knowledge sharing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building SRE teams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google defined the principles of SRE by applying the concepts of software engineering
    to system operations. Google was implementing these principles even before the
    term *DevOps* was coined. They developed best practices over a period of time
    and essentially considered SRE as their secret sauce for efficient running of
    their products. With the advent of **Google Cloud Platform (GCP)**, Google became
    more vocal about the SRE principles and their relevance for the success of their
    customers that deal with maintaining, running, and operating distributed systems
    on GCP.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given SRE is a prescriptive way of doing DevOps, more and more organizations
    (and this also includes non-GCP customers) are currently tending toward implementing
    the principles of SRE in a quest to find a balance between service reliability
    and development velocity. Such organizations will face the following challenges:'
  prefs: []
  type: TYPE_NORMAL
- en: How do you staff an SRE team?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do you implement or run an SRE team?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When and how often are SRE teams engaged during the life cycle of a service?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following sub-sections answer these questions based on the best recommendations
    from Google.
  prefs: []
  type: TYPE_NORMAL
- en: Staffing SRE engineers (SREs)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An SRE team consists of SRE engineers or SREs. At the outset, SREs also run
    operations. It is hard to find seasoned SREs. However, one way to build an SRE
    team is to hire system administrators who have worked on operations along with
    having experience in scripting/coding. These personnel can be further trained
    with software engineering skills.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of recommended skills that personnel hired as SRE engineers
    or SREs should possess or ultimately be trained on:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Operations and software engineering**: SREs should have experience of running
    a production system and have an understanding of the software or application that
    needs to be supported.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monitoring systems**: SLOs are key to maintaining the reliability of a service
    and SREs need to understand the functioning of monitoring systems in order to
    track SLOs and their connected constructs such as SLIs and Error Budgets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Production automation**: SREs can effectively scale operations by ensuring
    that the same task is not performed manually and instead automation is put in
    place. This requires an understanding of how to automate the process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**System architecture**: SREs can effectively scale an application or service,
    and this requires a deep understanding of the system architecture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Troubleshooting**: SREs are regularly required to be on call to solve problems
    of different types and complexities. This requires an inquisitive and analytical
    approach to solving the problems in hand.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Culture of trust**: SREs and developers share the ownership of a service
    through the concept of Error Budgets. This requires SREs to build a trust with
    the development team through effective communication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Incident management**: Failures or issues are inevitable and one of the key
    functions of SREs is to handle an incident. This requires the ability to technically
    troubleshoot and establish a communication framework specific for managing incidents.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to the recommended skills, SRE engineers or SREs should also possess
    certain character traits such as resilience, assertiveness, and flexibility. These
    characteristics will help them to deal with difficult situations and use reasoning
    in case of ambiguous situations, and strike a balance between development velocity
    and reliability. The next topic will deep-dive into the types of SRE team implementations.
  prefs: []
  type: TYPE_NORMAL
- en: SRE team implementations – procedure and strategy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are six recommended SRE team implementations:'
  prefs: []
  type: TYPE_NORMAL
- en: Kitchen sink/everything SRE team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Infrastructure SRE team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tools SRE team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Product/application SRE team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embedded SRE team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consulting SRE team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each implementation type suits a specific organization based upon the complexity
    of services that the organization provides, the size of the organization, the
    number of kinds of development teams in terms of varying scopes, and the organization's
    level of adoption with respect to applying SRE principles. Some organizations
    can also implement more than one type based on their needs. Let's look at the
    different team implementations in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Kitchen sink/everything SRE team
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **kitchen sink/everything SRE team** is best suited for organizations that
    want to start their SRE journey. In most cases, organizations prefer to start
    with a single SRE team. The scope of such a team is unbounded. The kitchen sink/everything
    SRE team is recommended for organizations that currently have a limited scope
    because there are fewer applications, resulting in fewer user journeys.
  prefs: []
  type: TYPE_NORMAL
- en: Given that there is only a single SRE team, this type of team can act as a binding
    factor between development teams and can also spot patterns across projects to
    provide effective solutions in case of incidents. At the same time, identifying
    engineers for SRE teams with the required skill sets can be quite challenging.
    In addition, with the possibility of constantly changing scope, the kitchen sink
    team implementation can suffer from lack of clarity in terms of well-defined team
    goals and can eventually lead to operational overload.
  prefs: []
  type: TYPE_NORMAL
- en: Infrastructure SRE team
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **infrastructure SRE team** is best suited for organizations that have multiple
    development teams with varying scopes, complexities, and infrastructure requirements.
    The core focus of an infrastructure team is on behind-the-scenes tasks that help
    the development teams to get their job done easier and faster. An infrastructure
    SRE team is less focused on customer-facing code and more on maintaining the shared
    services and components related to stabilizing the infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: The main advantage of an infrastructure SRE team is to provide the same highly
    reliable infrastructure to the development teams to simulate the behavior that
    could potentially happen in a production environment. In addition, the infrastructure
    team also establishes the structure to access such environments using the principles
    of least privilege and adhering to the required compliance standards.
  prefs: []
  type: TYPE_NORMAL
- en: On the flip side, given that the infrastructure SRE team doesn't directly work
    with customers and instead works with internal teams, there is always a tendency
    to over-engineer while defining standards for the development teams. Additionally,
    their usage behavior might also differ in comparison to the real world.
  prefs: []
  type: TYPE_NORMAL
- en: At times, there might be multiple infrastructure teams based on the size of
    the company or its product lines. This could result in duplicate effort with respect
    to the manner in which infrastructure will be provisioned. This is something that
    needs to be closely monitored and can be potentially avoided through cross-infrastructure
    team meet-ups and regular updates.
  prefs: []
  type: TYPE_NORMAL
- en: Tools SRE team
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **tools SRE team** is best suited for organizations with multiple development
    teams, where the development teams need a standard way to build or implement software
    that can measure, maintain, and improve the system reliability of a service, for
    example implementing a common framework that could allow the development team
    to implement custom metric instrumentation in their services, which could eventually
    help to measure reliability of a service.
  prefs: []
  type: TYPE_NORMAL
- en: The tools SRE team aims to build highly specialized reliability-related tooling
    and ultimately define production standards. One of the major disadvantages is
    to clearly draw the line between a tools SRE team and an infrastructure SRE team,
    as they can be perceived as being very similar because they are aimed at providing
    focused help to development teams but at their core, their focus areas are different.
    The tools SRE team focuses more on improving the reliability of the individual
    service whereas the infrastructure SRE team focuses more on improving the reliability
    of the supporting infrastructure that runs the service.
  prefs: []
  type: TYPE_NORMAL
- en: Product/application SRE team
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **product/application SRE team** is best suited for organizations that already
    have a kitchen sink, infrastructure, or tools SRE team and in addition have a
    critical user-facing application with multiple key services and high reliability
    needs for each service. The need for multiple reliable services requires a dedicated
    set of SRE teams focused on the product. This approach helps in setting out a
    clear charter for the team and also directly relates to business priorities.
  prefs: []
  type: TYPE_NORMAL
- en: On the flip side, as the services or products grow, there will be a constant
    need to add more SRE teams. This also increases the chance that there might be
    duplication of effort among product/application SRE teams.
  prefs: []
  type: TYPE_NORMAL
- en: Embedded SRE team
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **embedded SRE team** is best suited for organizations where a dedicated
    SRE team is required only for a specific time period or for an implementation
    focused on specific functions. In this SRE setup, the SRE engineers are actually
    embedded with the development team and this engagement is either scope bound,
    or time bound.
  prefs: []
  type: TYPE_NORMAL
- en: SRE engineers are hands-on on a day-to-day basis with respect to handling code
    and the required configuration. An embedded SRE team can also effectively be used
    to drive adoption with respect to the proposals or changes put forward by the
    infrastructure or tools SRE team. The major advantage is to build SRE expertise
    for specific focus areas. However, on the flip side, given each SRE team will
    work with a different development team, there might be a lack of standard practices.
  prefs: []
  type: TYPE_NORMAL
- en: Consulting SRE team
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **consulting SRE team** is best suited for organizations where the complexity
    is significant and the existing SRE teams cannot support the ever-increasing demands
    of their customers. Consulting SRE teams are similar to embedded SRE teams but
    are focused on the end customers and typically move away from changing any of
    the customer code or configuration. They could, however, write code to build internal
    tools for themselves or for their developer counterparts, similar to a tools SRE
    team.
  prefs: []
  type: TYPE_NORMAL
- en: Consulting SRE teams are a good fit if additional support is required on a temporary
    basis for existing SRE teams but, on the flip side, the SREs might not have the
    required context to make a balanced decision.
  prefs: []
  type: TYPE_NORMAL
- en: This completes the section on the various types of SRE team implementations.
    Essentially, there is no specific SRE team implementation that is recommended.
    It's common for an organization to implement a combination of these teams and
    the decision depends on multiple factors such as the size of the organization,
    the maturity level of adopting SRE, and their current focus.
  prefs: []
  type: TYPE_NORMAL
- en: To summarize, if the intent of an organization is to get started with SRE, then
    kitchen sink implementation is probably the best place to start. If the size of
    the development organization is small but they have a critical user-facing application,
    it is possible to move from a kitchen sink implementation to a product/application
    SRE team implementation.
  prefs: []
  type: TYPE_NORMAL
- en: However, if there are many development teams with different infrastructure needs,
    then it is possible to implement an infrastructure SRE team from a kitchen sink
    one. A tools SRE team is best suited for organizations that try to include common
    frameworks to bring in standardization in their software development process.
    A tools SRE team can complement an infrastructure SRE team.
  prefs: []
  type: TYPE_NORMAL
- en: Embedded SRE teams are more laser-focused for a specific initiative where the
    development and SRE team work together to reliably implement a service. This can
    be seen in both small-sized and large-sized teams, based on the criticality of
    the initiative. Finally, a consulting team is best suited for complex organizations
    that already have implemented other possible SRE teams but still require a consulting
    team to support the increasing needs of a rapidly expanding customer base.
  prefs: []
  type: TYPE_NORMAL
- en: The next topic will elaborate on how SRE engineers are engaged throughout the
    life cycle of a service or an application.
  prefs: []
  type: TYPE_NORMAL
- en: SRE engagement model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The core principles of SRE are focused on maximizing development velocity while
    maintaining reliability. As the service goes through its life cycle phases, SRE
    team(s) can continuously contribute for the betterment of the service and these
    teams can be engaged at different stages (described as follows) with varying capacities.
  prefs: []
  type: TYPE_NORMAL
- en: Architecture and design
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s explore what this phase entails for SREs (SRE engineers):'
  prefs: []
  type: TYPE_NORMAL
- en: SREs' engagement level is very deep (and high) during this phase as SRE teams
    can bring in their production expertise, offer various insights, and effectively
    can co-design the service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SREs validate the design and architecture by probing the design choices and
    validating any assumptions that were taken. This avoids any potential re-design.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SREs put forward best practices during the design phase, such as resilience,
    by identifying the single points of failure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SREs recommend the best infrastructure systems based on prior experience and
    potential resource footprint in comparison with predicted load.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SREs identify effective user journeys as part of the design process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next phase is active development.
  prefs: []
  type: TYPE_NORMAL
- en: Active development
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s explore what this phase entails for SREs (SRE engineers):'
  prefs: []
  type: TYPE_NORMAL
- en: Once the design is in place, SREs (SRE engineers) can help development teams
    ensure that the service is developed with production in mind. This includes capacity
    planning, identifying load requirements, and adding resources for redundancy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SREs help to plan for spikes and overloads. One way to handle the same is to
    use load balancers and also evaluate the capacity that they need to be configured.
    Setting up load balancers early in the development environments is a good start
    where the behavior can be initially assessed and hardened more during performance
    testing that simulates a production setup.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SREs think through the identified user journeys and work with development teams
    (along with other stakeholders) to come up with approaches to meet their SLI and
    SLO requirements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SREs engage to add observability that includes configuring monitoring, alerting,
    and performance tuning. This helps in setting up the required infrastructure to
    track SLIs and SLOs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After development is complete, the service is made available to a limited number
    of users in the following phase.
  prefs: []
  type: TYPE_NORMAL
- en: Limited availability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s explore what the limited availability phase entails for SREs (SRE engineers):'
  prefs: []
  type: TYPE_NORMAL
- en: Limited availability refers to the alpha (a release that is partially complete
    or still in development) and beta (a release where service is available to limited
    users for the first time post development) releases prior to general availability.
    During limited availability, the number of users, potential use cases, complexity,
    and performance requirements change significantly when compared to the development
    phase.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SREs focus on measuring the performance based on the changing demands and essentially
    evaluate reliability by defining SLOs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SREs involve development teams in establishing operational practices similar
    to a real-time production environment. This helps to simulate the experience for
    internal teams in terms of what to expect when in production.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SREs establish incident response teams by assigning specialized roles, conducting
    mock incident drills, and getting ready for a real-world scenario.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next phase is general availability. This is the phase where the service
    has reached a stable state and is available for use by a wider audience or by
    other services.
  prefs: []
  type: TYPE_NORMAL
- en: General availability
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s explore what the general availability phase entails for SREs (SRE engineers):'
  prefs: []
  type: TYPE_NORMAL
- en: A service moves to general availability phase only if it passes the **Production
    Readiness Review** (**PRR**). This is potentially the longest phase that SREs
    are involved with and also own.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SREs perform the majority of the operational work and own the incident response,
    with some help from the development team.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is possible that development team members work with SREs on a rotational
    basis so that the development team will have insights on operational load.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SREs will focus on tracking the operational load and accompanying SLOs for the
    service. This ensures that Error Budgets are not exhausted, and new features can
    be rolled out.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the current version of the service is going to be replaced, it enters the
    next phase, called depreciation.
  prefs: []
  type: TYPE_NORMAL
- en: Depreciation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let''s explore what the depreciation phase entails for SREs (SRE engineers):'
  prefs: []
  type: TYPE_NORMAL
- en: This refers to the phase when a new version of the system will soon come into
    play and replace the current version. So, new users or improved features are not
    added anymore. The focus shifts to transitioning users from existing to new systems
    through engineering means.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SREs continue to support the existing system till end of life and work in parallel
    with development team(s) on new services by circling back to the architecture
    and design phase.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last phase is the abandoned phase. This phase explains what happens to the
    service once the depreciation phase has passed.
  prefs: []
  type: TYPE_NORMAL
- en: Abandoned
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Let''s explore what the abandoned phase entails for SREs (SRE engineers):'
  prefs: []
  type: TYPE_NORMAL
- en: Once the service end of life has been reached, the service is abandoned and
    SREs' engagement with respect to the service ends. A service reaches end of life
    either if the service is no longer supported by the development team or the service
    is not required by customers anymore.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Development teams resume operational support and SREs support service incidents
    on a best-effort basis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This completes the section on the SRE engagement model with the emphasis on
    how SRE engineers have a significant impact across the life cycle of the service
    right from its conceptualization to its end of life. The next section details
    a key SRE cultural practice called incident management.
  prefs: []
  type: TYPE_NORMAL
- en: Incident management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Incident management is one of the key roles of an SRE engineer. An incident
    is defined as an event that indicates the possibility of an issue with respect
    to a service or an application. The nature of the issue can be minor in nature
    in the best case or, in contrast, can be an outage in the worst case. An incident
    can be triggered by an alert that was set up as part of monitoring the service
    or application.
  prefs: []
  type: TYPE_NORMAL
- en: An alert is an indication that SLO objectives with respect to the service are
    being violated or are on track to be violated. Sometimes, and specifically for
    an external-facing application, an incident can be triggered by an end user complaining
    via social media platforms. Such incidents include an additional layer of retrospection
    on how or why the current alerting system put in place failed to identify the
    incident.
  prefs: []
  type: TYPE_NORMAL
- en: 'Effective incident management is a critical SRE cultural practice that is key
    to limiting the disruption caused by an incident and is critical to resuming normal
    business operations as early as possible. There are two main parts to incident
    management:'
  prefs: []
  type: TYPE_NORMAL
- en: The technical troubleshooting aspect (where the emphasis is on either mitigating
    the issue or resolving the issue)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The effective communication aspect (where the emphasis is on ensuring the right
    folks are involved in the right roles, and stakeholders with respect to the service
    consumers are informed in a timely manner)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Organizations approach incident management in different ways but, if not approached
    in the right manner, it will result in an unmanaged incident. The following are
    two main characteristics of an unmanaged incident:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Emphasis on the technical problem**: An operational issue typically has a
    cascading effect, especially in a complex system. So, it is common to miss the
    big picture while attempting to solve the technical issue at hand from a single
    viewpoint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Poor communication**: In an attempt to solve the incident at hand, it is
    possible that not enough attention is given to the communication aspect. This
    will have both internal and external implications. Internally, lack of communication
    will lead to an inefficient use of resources. Sometimes it can also lead to ad
    hoc involvement, where multiple people can work on the same problem that could
    also result in multiple people making changes to the system at the same time (which
    is not ideal). Externally, lack of communication will lead to frustrated customers,
    which will result in a loss of trust toward the service or application provider.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next set of topics in this section detail the concepts required to effectively
    implement incident management, starting with the topic on the incident life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Incident life cycle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Prior to coming up with an effective incident management strategy, it is important
    to understand the life cycle of an incident. The following is a state diagram
    that provides insights into the various states of an incident:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – Life cycle of an incident'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15587_04_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.1 – Life cycle of an incident
  prefs: []
  type: TYPE_NORMAL
- en: To summarize, based on configured alerts or complaints from social media, an
    incident is identified. The identified incident is validated to check whether
    it qualifies. If it qualifies, incident mitigation is initiated. After incident
    mitigation, a root cause analysis is initiated for the incident. The details of
    the incident are documented, a ticket is created, and after that the incident
    will move to resolved status. The next topic goes into the important concepts
    related to effective incident management.
  prefs: []
  type: TYPE_NORMAL
- en: Elements of effective incident management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A structured incident response comprising of multiple elements is critical for
    effective incident management. These elements allow us to focus on core SRE cultural
    practices such as communication, collaboration, learning, knowledge sharing, organized
    flow of information, and effective customer notifications. This helps the team
    to deal with different situations and respond as quickly as possible. A structured
    incident response helps in reducing duplication of effort and creates visibility
    of any individual's activity within the team.
  prefs: []
  type: TYPE_NORMAL
- en: The following are some of the critical elements for effective incident management.
  prefs: []
  type: TYPE_NORMAL
- en: Declaring an incident
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the case of an event leading to an incident, SREs or operators are often
    in a dilemma when deciding when to declare that incident. If they wait for a longer
    duration to declare an incident, then it might be too difficult to mitigate the
    negative impact that the incident can cause to the end users. However, if they
    declare it too early, then there is a chance that the incident can result in a
    false positive.
  prefs: []
  type: TYPE_NORMAL
- en: The following are some guidelines that play a critical role in deciding when
    to declare an incident, starting with *defining thresholds*.
  prefs: []
  type: TYPE_NORMAL
- en: Defining thresholds
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Every organization should define a clear set of thresholds in order to declare
    an event as an incident. These thresholds can be defined by setting up alerts.
    A specific event can be triggered by a single alert or a combination of alerts.
    An incident can also be triggered based on the total number of active alerts or
    the duration of an active alert.
  prefs: []
  type: TYPE_NORMAL
- en: The next guideline to evaluate is *assessing impact*.
  prefs: []
  type: TYPE_NORMAL
- en: Assessing impact
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Once guidelines are set, thresholds are defined and, as the alerts are fired,
    it is important to assess the impact of an event. There are multiple aspects involved
    in assessing the impact, such as the nature of the event, the impact to the end
    user, the eventual impact to the business, any dependent stakeholders at risk,
    or any financial loss to the business.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a reference template on how an incident can be classified
    based on possible impact:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Negligible**: Little or no impact on product but might require follow-up
    action items'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Minor**: Impact to internal users but external users might not notice'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Major**: Impact to external users with noticeable revenue loss but services
    are still functioning'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Huge/disaster/detrimental**: Outage severely impacting users and business
    with a significant revenue loss'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At a high level, the following questions can help to determine whether an event
    is an incident. If the answer is *yes* to any of the following, an incident can
    be declared:'
  prefs: []
  type: TYPE_NORMAL
- en: Is the outage visible to users?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do SREs require the expertise of another team in order to evaluate the incident?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Does the issue exist after an hour?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once an event is identified as an incident and its severity level has been identified,
    SREs or operators should formally declare the incident by issuing a statement
    that includes the severity level, a list of services impacted, and a possible
    estimated time of recovery. The summarizes the topic related to *declaring an
    incident* along with a few essential guidelines. The next critical element to
    discuss related to effective incident management is *separation of responsibilities*.
  prefs: []
  type: TYPE_NORMAL
- en: Separation of responsibilities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once an incident has been declared, an incident response team should be formed
    whose main task is to mitigate or to resolve the incident. The members of the
    incident response team should have well-defined responsibilities. SRE prescribes
    a specific set of roles that should be designated within the team. The prescribed
    roles are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Incident Commander** (**IC**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Communications Lead** (**CL**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Operations Lead** (**OL**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Primary/Secondary Responder**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Planning Lead** (**PL**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of the preceding roles should have a clear charter and autonomy and the
    same is elaborated in the upcoming sub-sections, starting with the IC.
  prefs: []
  type: TYPE_NORMAL
- en: Incident Commander (IC)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The responsibilities of the IC are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The IC leads the chain of command and designates specific roles to specific
    members of the team. Every member of the incident response team reports to the
    IC.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The IC is and should be aware of significant events during an incident response,
    actively co-ordinate the response during an incident, decide priorities, and delegate
    activities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The IC's core goal is to ensure the problem is mitigated and ultimately fixed.
    However, the IC does not personally or individually fix the problem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The IC initiates the postmortem report after an incident is mitigated or resolved.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Based on the size of the team, the IC can also assume the role of the CL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next topic details the responsibilities of the CL.
  prefs: []
  type: TYPE_NORMAL
- en: Communications Lead (CL)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The responsibilities of the CL are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The CL is the public face of the incident response and leads the communication
    with the outside world, provides timely updates, and also takes questions related
    to the incident.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CL acts as a shield and avoids direct communication between the customer/client
    and other members of the incident response team.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CL maintains the live incident state document, which is used later for postmortem.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next topic details the responsibilities of the OL.
  prefs: []
  type: TYPE_NORMAL
- en: Operations Lead (OL)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The responsibilities of an OL are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The OL develops and executes the incident response plan, thereby being responsible
    for the technical and tactical work.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The OL is responsible for the operations team, which comprises Primary and (optionally)
    Secondary Responders.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The OL is always in contact with the IC and the CL. If required, the OL requests
    additional resources either for the operations teams or subject matter experts
    based on the specific nature of the incident.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next topic details the responsibilities of the Primary/Secondary Responder.
  prefs: []
  type: TYPE_NORMAL
- en: Primary/Secondary Responder
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The responsibilities of a Primary/Secondary Responder are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Primary and (optionally) Secondary Responders are members of the operations
    team and report to the OL. Their main goal is to execute the OL's technical response
    plan for the incident.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Secondary Responder is there to help the Primary Responder or can be designated
    a particular task or function based on the OL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next topic details the responsibilities of the PL.
  prefs: []
  type: TYPE_NORMAL
- en: Planning Lead (PL)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The responsibilities of the PL are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The PL works with the operations team and tracks system changes and arranges
    hand-offs as necessary.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The PL arranges hand-offs between teams and also reports bugs to keep track
    of long-term changes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Figure 4.2 illustrates how the above mentioned roles can be structured:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 - Illustrating Incident Management Roles'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15587_04_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.2 - Illustrating Incident Management Roles
  prefs: []
  type: TYPE_NORMAL
- en: Having well-defined roles allows SRE engineers to have a specific area of focus
    and also prevents outside ad hoc intervention. It is critical to establish a communication
    post, which could be a physical location such as a meeting room or a communication
    channel such as Slack. In addition, implementing a clear real-time hand-off either
    at the end of a shift or the day is highly recommended to ensure the incident
    is handed off explicitly to another incident commander.
  prefs: []
  type: TYPE_NORMAL
- en: Summarizing the principles of incident response
  prefs: []
  type: TYPE_NORMAL
- en: The core principles include the need to maintain a clear chain of command, designate
    well-defined roles, maintain a live incident state document, ensure timely communication
    to the impacted parties about the incident state, perform a live hand-off to avoid
    operational overload, prepare a postmortem report to determine the root cause,
    update playbooks as needed, and plan to perform **Disaster Recovery** (**DR**)
    exercises as often as possible.
  prefs: []
  type: TYPE_NORMAL
- en: The next critical element to discuss related to effective incident management
    is *recommended best practices*.
  prefs: []
  type: TYPE_NORMAL
- en: Recommended best practices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following is a summary of best practices that are recommended during the
    incident management process:'
  prefs: []
  type: TYPE_NORMAL
- en: Develop and document procedures.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prioritize damage and restore service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trust team members in specified roles.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If overwhelmed, ask for help.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consider response alternatives.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practice procedure routinely.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rotate roles among team members.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next topic, we will see how we can restore the service after an incident
    occurs and prevent such incidents from happening in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Restoring service and avoiding recurrence
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once an incident has been declared, the focus of the incident response team
    should be to troubleshoot the incident. This could be initiated by thinking through
    the various steps involved in the functioning of the service and stepping through
    the inner details. The incident can be caused either by internal or external factors.
    Both kinds of factors should be examined.
  prefs: []
  type: TYPE_NORMAL
- en: While examining internal factors, the focus should be on analyzing any recent
    code or configuration changes in the area of impact. In most scenarios, a code
    or configuration change can be reverted, which would eventually restore the service.
    But there will be situations where multiple code or configuration changes cannot
    be reverted from a deployment standpoint and the only way to move forward is to
    provide a code-level fix in order to revert the changes. In contrast to internal
    factors, examining or dealing with external factors is more complicated, as in
    most cases there is little control over them.
  prefs: []
  type: TYPE_NORMAL
- en: Irrespective of the nature of the issue, the primary goal is to find ways to
    resolve or mitigate the issue. Once the issue is mitigated or resolved, a postmortem
    should be conducted, with the intention to identify the root cause. The process
    should happen in a blameless fashion with the sole intention to find ways that
    could prevent the incident from re-occurrence in the future.
  prefs: []
  type: TYPE_NORMAL
- en: The postmortem process should result in a postmortem report that essentially
    outlines the events of the incident and consists of details with respect to the
    nature of the impact, the possible root cause, the triggering event, the metrics
    that help in identifying the event, and a list of action items. In addition, the
    postmortem report should provide clarity that can help in future mitigation and
    can be used as use case scenarios (after the incident). This further helps to
    promote learning among teams.
  prefs: []
  type: TYPE_NORMAL
- en: This completes an in-depth section on incident management. We started the section
    by trying to outline the life cycle of an incident (*Figure 4.1*) and then elaborated
    on key constructs of effective incident management, charted the life cycle of
    an incident, detailed the possible roles and their respective responsibilities
    and recommended a set of best practices.
  prefs: []
  type: TYPE_NORMAL
- en: Essentially, it is important to differentiate when to call out an incident,
    identify the impacted parties (internal or external users), assess the level of
    impact, have predefined roles if an incident is called, and attempt to stick to
    the charter. This avoids ambiguity in communication and collaboration. This also
    allows you to focus on the key goal, which is to mitigate the issue and restore
    the service at the earliest. It is also critical to investigate, identify, and
    address the root cause to avoid re-occurrence.
  prefs: []
  type: TYPE_NORMAL
- en: The next section focuses on the process of being on call (another SRE cultural
    practice) and the critical factors that need to be considered.
  prefs: []
  type: TYPE_NORMAL
- en: Being on call
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On call duty refers to specific operational activities performed to support
    the reliable running of a service or application both during working and non-working
    hours. On call duty is one of the critical responsibilities for an SRE and is
    also important from a service standpoint to keep the service available and reliable.
    SRE teams (as previously defined) are different from regular operational teams
    as the goal is to emphasize the use of engineering techniques to solve operational
    problems and to prevent their occurrence at scale. It is typically common to engage
    the product/application SRE team during on call. In the case of specialized services,
    embedded SRE teams are engaged for on call duty.
  prefs: []
  type: TYPE_NORMAL
- en: 'When an incident occurs, the response time from initiating the incident management
    process to resolving or mitigating the issue is key to meeting the desired SLO,
    which in turn will meet the promised SLA. There are multiple factors that need
    to be considered while implementing the on call process. The following are three
    such considerations:'
  prefs: []
  type: TYPE_NORMAL
- en: Paging versus non-paging events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Primary versus secondary on call rotation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single-site versus multi-site production teams
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next topic discusses *paging versus non-paging events*, one of the key factors
    in implementing the *on call* process.
  prefs: []
  type: TYPE_NORMAL
- en: Paging versus non-paging events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Paging events refers to higher-priority alerts that require immediate attention
    or remediation, especially in the case of a user-facing application. Examples
    of paging events could be scenarios where the service health check fails, or a
    database tied to the service is unable to accept any more connections.
  prefs: []
  type: TYPE_NORMAL
- en: Non-paging events refer to lower-priority alerts that might not point to a service
    failure but point to issues that need to be addressed before they snowball into
    a bigger incident. Example of non-paging events include a sudden spike in traffic
    due to a new feature release in a specific region or a lower-priority ticket raised
    by a self-healing process when disk usage went up to 80% but then was mitigated
    automatically by an automated process that increased the disk space by an extra
    10%. This allows enough time for the on call engineer to investigate the root
    cause on the disk usage spike in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: Paging events are always the top priority for the SRE team. The first step in
    such a scenario is to validate whether the event is an incident and take appropriate
    steps to initiate the incident management process. In addition, SRE teams also
    vet non-production paging events and handle those events during their business
    hours based on operational load. It is important to differentiate between paging
    and non-paging events. This differentiation needs to be factored while configuring
    alerting rules, or else it will lead to alert fatigue. Alert fatigue creates a
    tendency among team members to ignore important alerts.
  prefs: []
  type: TYPE_NORMAL
- en: The next topic discusses *primary versus secondary on call rotation*, one of
    the key factors in implementing the *on call* process.
  prefs: []
  type: TYPE_NORMAL
- en: Primary versus secondary on call rotation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There could be multiple SRE teams that are on call at a given time. Given that
    the key responsibility of the on call SRE team is to reliably run the service
    by tackling both paging and non-paging events that include handling alerts, tickets,
    and operational duties, it is often common to divide the SRE teams into primary
    and secondary teams.
  prefs: []
  type: TYPE_NORMAL
- en: This division into primary and secondary teams essentially helps to distribute
    duties and organize priorities. The distribution of duties between the teams can
    differ from the way an organization implements SRE. One implementation is to deploy
    the secondary team as a fall-through for the pages that the primary on call teams
    cannot get to, potentially because the primary on call team is actively engaged.
    Essentially, the secondary team is used as a contingency to the primary team in
    situations where there are more paging events than the primary team can handle
    at that moment. Another implementation is to assign the primary on call team to
    always work on paging events while the secondary on call team can work on non-paging
    production activities.
  prefs: []
  type: TYPE_NORMAL
- en: The next topic discusses *single-site versus multi-site production teams*, one
    of the key factors in implementing the *on call* process.
  prefs: []
  type: TYPE_NORMAL
- en: Single-site versus multi-site production teams
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A single-site production team refers to one or more SRE teams supporting operations
    from a single location. Though it's easy for the teams to communicate and exchange
    information, the challenge is that specific teams have to be engaged during night
    shifts, which could be detrimental in the long term from a health standpoint.
  prefs: []
  type: TYPE_NORMAL
- en: A multi-site production team refers to one or more SRE teams supporting operations
    from multiple locations. The typical approach is to ensure the locations are in
    geographically different regions with a *follow-the sun* rotation model that allows
    the teams to completely avoid night shifts.
  prefs: []
  type: TYPE_NORMAL
- en: The *follow-the-sun* rotational model is a common term used to represent a service
    and support methodology where a user-facing application is supported by multiple
    teams that are spread across the world to provide 24/7 support rather than forcing
    a single support team at a specific location to work overtime till the issue is
    resolved. In the case of this model, if an outstanding issue is not resolved beyond
    the shift time of a specific team, then the issue will be transitioned to the
    team that will handle the next shift, along with the detailed analysis and steps
    taken by the prior team. The downsides of a multi-site production team include
    communication challenges and co-ordination overhead.
  prefs: []
  type: TYPE_NORMAL
- en: The next topic discusses the recommended practices while being on call.
  prefs: []
  type: TYPE_NORMAL
- en: Recommended practices while being on call
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are some SRE recommended practices while being on call:'
  prefs: []
  type: TYPE_NORMAL
- en: Dealing while being on call is all about the approach. While the thinking needs
    to be rational and focused, there is a risk that the actions can be intuitive
    and heuristic. Such a risk should be avoided.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intuitive actions can often be wrong and are less supported by data. Intuition
    can lead the on call SREs (SRE engineers) to pursue a line of reasoning that is
    incorrect from the start and could potentially waste time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A heuristic approach creates a tendency where on call SREs can take an approach
    based on assumptions and previous occurrences, but the approach might not be optimal
    or rational in nature.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The most important facets while being on call are to have a clear escalation
    path, a well-defined incident management procedure, and a blameless postmortem
    culture, and to strike a balance between *operational overload* and *operational
    underload*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Develop a culture of effective troubleshooting by trying to fundamentally understand
    how a system is built, designed, and supposed to work. Such expertise can be gained
    by investigating when a system doesn't work. In addition, there should be a constant
    focus on asking questions, with constructs such as *what*, *where*, *why*, and
    *how* that could potentially lead to the next set of connected questions or answers
    and eventually help to troubleshoot an issue.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid common pitfalls such as focusing on symptoms that aren't relevant, a lack
    of understanding about the impact of a misconfiguration, and attempting to map
    a problem to other problems in the past by drawing correlations or using assumptions
    that are inaccurate.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operational overload versus operational underload
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Operational overload is a state that is caused by a misconfigured monitoring
    system or incorrect choice of alerting rules, leading to fatigue and stress. This
    typically leads to an increase in ticket count, pages, and ongoing operational
    support. Handling high-priority tickets and pages leads to tense situations, causing
    stress, and could also restrict a Site Reliability Engineer's ability to continue
    working on their engineering engagements. Such situations can be eased by temporarily
    loaning an experienced SRE to an overloaded team as dedicated help, providing
    breathing space to teams to allow them to address issues or allow the team member
    to focus on engineering projects.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Operational underload is a state where a Site Reliability Engineer is not involved
    with a production system for a long period of time. This could create significant
    knowledge gaps and a lack of confidence while suddenly dealing with a production
    issue. This can be avoided if SRE teams are sized such that every engineer is
    on call at least once or twice in a quarter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This completes the section on the process related to being on call, factors
    that could have an impact while implementing the process, and recommended best
    practices. The next section focuses on the cultural SRE practices of psychological
    safety and factors to achieve the same.
  prefs: []
  type: TYPE_NORMAL
- en: Psychological safety
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the key pillars of SRE is to accept failure as normal. This implies that
    failures are imminent, but the key is to learn from the failures and ensure that
    the same mistake is not repeated the next time. As a result, SRE promotes open
    communication within teams and between members of the team and its leaders to
    ensure that a failure is evaluated objectively from a process standpoint and not
    from an individual standpoint. The core idea is to provide a sense of psychological
    safety, which is extremely important to implement the practice of **Blameless
    Postmortems**.
  prefs: []
  type: TYPE_NORMAL
- en: 'SRE defines psychological safety as the belief that a manager or an individual
    contributor will not be singled out, humiliated, ridiculed or punished for the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Committing a mistake that could result in a potential incident or a problem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bringing up a concern related to a decision with respect to design, implementation,
    or process that could later have adverse impacts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Asking questions for further clarifications that could help the individual or
    multiple members of the team to effectively implement or collaborate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coming up with newer ideas that could foster innovation for further improvement
    of a process or service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disadvantages of low psychological safety
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A workplace or a team with low psychological safety will eventually suppress
    learning and innovation. Team members will be apprehensive about clarifying or
    speaking out or initiating a conversation. It creates a sense of self-doubt and
    impacts the exchanging of ideas that could lead to innovation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Psychological safety is also important in incident management. In the following
    topic, we will discuss some factors to ensure psychological safety.
  prefs: []
  type: TYPE_NORMAL
- en: Factors to overcome in order to foster psychological safety
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A thought process of blamelessness promotes psychological safety, and the following
    two factors should be overcome to avoid blame in the first place:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hindsight bias**: Refers to a know-it-all attitude that something will eventually
    fail even though it was not obvious at that point of time. As a result, there
    is a tendency to blame the person leading the effort that the required actions
    were not taken to foresee the issue and avoid the failure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Discomfort discharge**: Refers to a tendency where people blame to discharge
    discomfort. This leads to a tendency where team members tend to conceal information,
    facts, or not communicate because of a fear of punishment or consequences that
    could negatively impact the individual or the team.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To conclude, psychological safety is critical to allow team members to have
    the freedom to take or make decisions based on the best possible information available
    at that point in time. In addition, and more often than not, innovation always
    includes a need to take risks, which also means there is a chance of failure.
    In either case, if something goes wrong, the focus needs to be on the process
    leading to the failure but not on the people involved during the incident. This
    allows for an objective analysis and provides freedom for the team to express
    their thoughts without hesitation, leading to open communication and continuous
    improvement.
  prefs: []
  type: TYPE_NORMAL
- en: Head, heart, and feet model
  prefs: []
  type: TYPE_NORMAL
- en: The head, heart, and feet model is a way to promote psychological safety from
    the fear of adopting a change. The head represents the rational, where the emphasis
    must be on why the change is happening and should include the strategic mission
    and vision. The heart represents the emotional, where the emphasis should be on
    how change can bring in a positive impact. The feet represent the behavioral,
    where the emphasis should be on the knowledge, skills, and resources that should
    be provided to implement change successfully.
  prefs: []
  type: TYPE_NORMAL
- en: The next section deep-dives into another set of SRE cultural practices that
    promotes sharing vision and knowledge and fostering collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing vision and knowledge and fostering collaboration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the key pillars of SRE is to reduce organizational silos, and this can
    be achieved by creating a unified vision, sharing knowledge, and fostering collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: Unified vision
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Organizations have a vision statement that serves as a guide for the work they
    do or represent. A team''s vision should be in line with the organization''s vision
    and typically this vision will have the following constructs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Core values**: Helps teams to build trust and psychological safety, creates
    a willingness to take risks and be open to learn.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Purpose**: Refers to the specific intent for the existence of the team.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mission**: Points to a clear and compelling goal that the team strives to
    achieve.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Strategy**: Refers to the path to realize or achieve team''s mission; this
    includes the process to identify relevant resources, capabilities, threats, and
    opportunities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Goals**: Refers to a defined set of team''s objectives. SRE recommends the
    use of OKRs to set ambitious goals with a drive to accomplish more than possible;
    **OKRs** refer to **objective and key results**, a collaborative goal-setting
    framework that is used by individuals and teams to aim for ambitious goals and
    measure results during the process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OKRs can enable teams to focus on big bets and accomplish more than the team
    thought was possible, even if they don't fully attain their intended goal. This
    is accomplished by clearly defining an objective and also classifying key results
    quantitatively to ensure that the objective is achieved. The objective of setting
    OKRs is to set a minimum of those defined key results (if not all). OKRs can encourage
    people to try new things, prioritize work, and learn from both successes and failures.
    While the team may not reach every OKR, it gives them something to strive for
    together, driving toward a unified vision.
  prefs: []
  type: TYPE_NORMAL
- en: Communication and collaboration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Communication and collaboration between teams is critical to implementing SRE.
    This could include the communication between multiple SRE teams within the organization
    or communication between SRE teams and their respective product/development team.
    This leads to identifying common approaches to solve problems that might have
    common elements, remove ambiguity, and provides the possibility to solve more
    complex challenges. The following are some options proposed by the SRE team.
  prefs: []
  type: TYPE_NORMAL
- en: Service-oriented meetings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s understand what these meetings are for:'
  prefs: []
  type: TYPE_NORMAL
- en: These are mandatory meetings that are meant to review the state of service and
    increase awareness among all possible stakeholders.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The recommended duration is about 30-60 minutes and should be driven by a designated
    lead with a clearly defined agenda.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will discuss team composition.
  prefs: []
  type: TYPE_NORMAL
- en: Effective team composition
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s see how effective team composition is achieved:'
  prefs: []
  type: TYPE_NORMAL
- en: SRE recommends that every SRE team should have an effective team composition
    – specifically on certain roles such as Technical Lead, Manager, and Project Manager.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Technical Lead sets the technical direction of the team. A manager runs the
    team's performance management and is the first point of contact for the team.
    A Project Manager comments on design documentation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another approach for communication and collaboration is knowledge sharing.
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge sharing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here''s what this approach entails:'
  prefs: []
  type: TYPE_NORMAL
- en: Cross-training, an employee-to-employee network, and job shadowing are the most
    recommended options.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-training allows you to increase competencies of a team member by training
    in other competencies, thus encouraging employees to constantly learn and grow.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An employee-to-employee network encourages employees to share their knowledge
    and learning by driving information sessions internally.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Job shadowing refers to on-the-job training by observing and potentially helping
    personnel in their area of expertise.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This completes the final section on a key SRE cultural practice that focuses
    on sharing a unified vision and knowledge, and fostering communication and collaboration.
    This also brings us to the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed the key elements that are required to build an
    SRE team. In addition, we discussed key cultural practices that help to implement
    the technical practices. This concludes the first section of the book focussed
    on SRE (*Chapters 1-4*). The next set of chapters (*Chapters 5-10*) will focus
    on the core Google Cloud services required to implement DevOps, starting with
    [*Chapter 5*](B15587_05_Final_ASB_ePub.xhtml#_idTextAnchor110), *Managing Source
    Code using Cloud Source Repositories.*
  prefs: []
  type: TYPE_NORMAL
- en: Points to remember
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are some important points to remember:'
  prefs: []
  type: TYPE_NORMAL
- en: 'IC: In charge of the incident response, designates responsibilities and optionally
    takes on roles that were not designated, such as CL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OL: Deals with resolving or handling the incident – technical and tactical;
    executes the action plan by working with a Primary and Secondary Responder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CL: The public face of incident response; responsible for communicating to
    all the stakeholders.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PL: Tracks system changes, identifies long-term changes by filing bugs, and
    arranges hand-offs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Command post: Refers to a meeting room or Slack channel where communication
    happens.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Live incident state document: Maintained by the CL about the incident and updates,
    and is later used for the postmortem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An incident or outage should be called if specific expertise is needed, if the
    outage is visible, or if the issue is not resolved after an hour or so of effort.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Factors to overcome in order to foster psychological safety: hindsight bias
    and discomfort discharge.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A team's vision is everything about what drives its work and includes the core
    values, purpose, mission, strategy, and goals.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A team's mission is a clear and compelling goal that it wants to achieve.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information on GCP''s approach toward DevOps, read the following articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SRE**: [https://landing.google.com/sre/](https://landing.google.com/sre/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SRE fundamentals**: [https://cloud.google.com/blog/products/gcp/sre-fundamentals-slis-slas-and-slos](https://cloud.google.com/blog/products/gcp/sre-fundamentals-slis-slas-and-slos)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SRE YouTube playlist**: [https://www.youtube.com/watch?v=uTEL8Ff1Zvk&list=PLIivdWyY5sqJrKl7D2u-gmis8h9K66qoj](https://www.youtube.com/watch?v=uTEL8Ff1Zvk&list=PLIivdWyY5sqJrKl7D2u-gmis8h9K66qoj
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practice test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: As per the SRE engagement model, during which phase do SREs define SLOs?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Architecture and design
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Active development
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Limited availability
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) General availability
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Who out of the following is responsible for initiating a postmortem report after
    an incident?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) **Incident Commander** (**IC**)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) **Communications Lead** (**CL**)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) **Operations Lead** (**OL**)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) **Planning Lead** (**PL**)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As per the SRE engagement model, during which phase is SREs' engagement deepest
    or highest?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Architecture and design
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Active development
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Limited availability
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) General availability
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As per the SRE engagement model, during which phase do SREs start preparing
    the service for production?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Architecture and design
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Active development
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Limited availability
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) General availability
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Who out of the following is in charge of responding to an outage or an incident?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) **Incident Commander** (**IC**)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) **Communications Lead** (**CL**)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) **Operations Lead** (**OL**)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) **Planning Lead** (**PL**)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Who out of the following is in charge of executing the technical response for
    an outage or an incident?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) **Incident Commander** (**IC**)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) **Communications Lead** (**CL**)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) **Operations Lead** (**OL**)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) **Primary Responder** (**PR**)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select the incident severity classification that has the following characteristics:
    the outage is visible to the user with a noticeable revenue loss but no lasting
    damage.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Negligible
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Minor
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Major
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Detrimental
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Who out of the following is in charge of managing the immediate, detailed technical
    and tactical work of the incident response?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) **Incident Commander** (**IC**)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) **Communications Lead** (**CL**)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) **Operations Lead** (**OL**)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) **Planning Lead** (**PL**)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Who out of the following is in charge of coordinating the efforts of the response
    team to address an active outage or incident?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) **Incident Commander** (**IC**)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) **Communications Lead** (**CL**)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) **Operations Lead** (**OL**)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) **Planning Lead** (**PL**)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select the incident severity classification that has the following characteristics:
    little or no impact on production but might require low-priority follow-up actionable
    items.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Negligible
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Minor
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Major
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Detrimental
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: (c) Limited availability
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (a) Incident Commander
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (a) Architecture and design
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (b) Active development
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (a) Incident Commander
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (d) Primary Responder
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (c) Major; because of revenue loss but no lasting damage
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (c) Operations Lead
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (a) Incident Commander
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (a) Negligible
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
