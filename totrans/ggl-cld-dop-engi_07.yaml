- en: '*Chapter 5*: Managing Source Code Using Cloud Source Repositories'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第五章*：使用Cloud Source Repositories管理源代码'
- en: The first section of this book (consisting of four chapters) focused on exploring
    the concepts of **Site Reliability Engineering** (**SRE**) in depth. This included
    SRE technical practices, understanding monitoring and alerting to target reliability,
    and insights into building SRE teams by applying SRE cultural practices.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的第一部分（由四章组成）深入探讨了**站点可靠性工程**（**SRE**）的概念。内容包括SRE的技术实践、理解监控和警报以提高可靠性，以及通过应用SRE文化实践来建立SRE团队的见解。
- en: 'This second section of the book explores GCP''s constructs in depth to implement
    a CI/CD pipeline with a focus on the following core areas:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的第二部分深入探讨了GCP的构件，以实现一个CI/CD流水线，重点关注以下核心领域：
- en: Managing source code using Cloud Source Repositories
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Cloud Source Repositories管理源代码
- en: Building and creating container images using Cloud Build
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Cloud Build构建和创建容器镜像
- en: Pushing container images and artifacts using Container Registry
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用容器注册表推送容器镜像和工件
- en: Orchestrating containers and deploying workloads using Google Kubernetes Engine
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Google Kubernetes Engine编排容器并部署工作负载
- en: Source code management is the first step in a **Continuous Integration** (**CI**)
    flow. Code is stored in a source code repository; a common repository that stores
    code and allows developers to make code changes (if required in isolation) and
    merge changes from multiple contributors into a single common stream. The most
    common examples of a source code repository include GitHub and Bitbucket. **Cloud
    Source Repositories** (**CSR**) is a service from Google Cloud that provides the
    functionality of source code management through private Git repositories and easily
    integrates to several Google Cloud services such as Cloud Build, Cloud Monitoring,
    and Cloud Logging.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码管理是**持续集成**（**CI**）流程的第一步。代码存储在源代码仓库中；常见的源代码仓库用于存储代码，允许开发者在必要时进行孤立修改，并将多个贡献者的更改合并到一个共同的代码流中。源代码仓库的常见例子包括GitHub和Bitbucket。**Cloud
    Source Repositories**（**CSR**）是Google Cloud提供的一项服务，通过私有Git仓库提供源代码管理功能，并能轻松集成到多个Google
    Cloud服务中，例如Cloud Build、Cloud Monitoring和Cloud Logging。
- en: 'In this chapter, we''re going to cover the following main topics:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要主题：
- en: '**Key features**: Managed private Git repository, one-way sync with external
    repositories, universal code search, and native integration with other **Google
    Cloud Platform** (**GCP**) services.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关键功能**：托管的私有Git仓库、与外部仓库的一向同步、通用代码搜索和与其他**Google Cloud Platform**（**GCP**）服务的原生集成。'
- en: '**First steps**: Create a first repository via the console or the **Command-Line
    Interface** (**CLI**) and add files to the repository.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**第一步**：通过控制台或**命令行界面**（**CLI**）创建第一个仓库，并向仓库中添加文件。'
- en: '**One-way sync from GitHub/Bitbucket to CSR:** Option to add a repository by
    connecting to an external repository and perform near real-time one-way sync.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从GitHub/Bitbucket到CSR的一向同步**：通过连接到外部仓库并执行近实时的一向同步来添加仓库的选项。'
- en: '**Common operations**: Browse repositories, browse files, perform universal
    code search, detect security keys, and assign the right access controls.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**常见操作**：浏览仓库、浏览文件、执行通用代码搜索、检测安全密钥，并分配适当的访问控制。'
- en: '**Hands-on lab**: Step-by-step instructions to integrate CSR with Cloud Functions.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实践实验**：逐步指导如何将CSR与Cloud Functions集成。'
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'There are four main technical requirements:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 主要技术要求有四个：
- en: 'A valid GCP account to get hands-on with GCP services: [https://cloud.google.com/free](https://cloud.google.com/free).'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有效的GCP帐户，用于体验GCP服务：[https://cloud.google.com/free](https://cloud.google.com/free)。
- en: 'Install Google Cloud SDK: https://cloud.google.com/sdk/docs/quickstart.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '安装Google Cloud SDK: https://cloud.google.com/sdk/docs/quickstart。'
- en: 'Install Git: [https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git).'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Git：[https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)。
- en: 'Alternatively, it is possible to skip the previous two and instead install
    Cloud Shell, which includes Google Cloud SDK as well as Git: [https://cloud.google.com/shell](https://cloud.google.com/shell).'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者，可以跳过前两步，改为安装Cloud Shell，其中包含Google Cloud SDK和Git：[https://cloud.google.com/shell](https://cloud.google.com/shell)。
- en: Introducing the key features
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍关键功能
- en: 'CSR is a service from Google Cloud to manage source code. CSR provides Git
    version control and supports the collaborative development of any application
    or service. Key features include the following:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: CSR 是 Google Cloud 提供的一个源代码管理服务。CSR 提供 Git 版本控制，并支持任何应用程序或服务的协同开发。其主要特性包括：
- en: '**Fully managed private Git repository**: This feature implies that there is
    no need to manage the infrastructure required to host the source code repository.
    Developers can instead focus on building, testing, deploying, and debugging code.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完全托管的私有 Git 仓库**：此功能意味着无需管理托管源代码仓库所需的基础设施。开发人员可以将精力集中在代码的构建、测试、部署和调试上。'
- en: '**Provides one-way sync with GitHub and Bitbucket**: In situations where developers
    use either GitHub or Bitbucket as their primary cloud source repository, enabling
    integration with other GCP services such as App Engine, Cloud Functions, Cloud
    Monitoring, and Cloud Logging is not as straight forward in comparison to using
    GCP''s CSR. For example, it easy to deploy code to a serverless service in GCP
    such as Cloud Functions from CSR directly then GitHub or Bitbucket instead. In
    addition, the one-way sync feature performs a one-way mirror, essentially making
    a near real-time copy of a repository from GitHub or Bitbucket into GCP''s CSR.
    This facilitates the ease of native integration with GCP services.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提供与 GitHub 和 Bitbucket 的单向同步**：在开发者将 GitHub 或 Bitbucket 作为主要的云源代码库时，启用与其他
    GCP 服务（如 App Engine、Cloud Functions、Cloud Monitoring 和 Cloud Logging）的集成相比于使用
    GCP 的 CSR 要稍显复杂。例如，从 CSR 直接将代码部署到 GCP 中的无服务器服务（如 Cloud Functions）要比从 GitHub 或
    Bitbucket 部署更加简便。此外，单向同步功能执行单向镜像，实质上是将 GitHub 或 Bitbucket 中的代码库实时复制到 GCP 的 CSR
    中。这有助于实现与 GCP 服务的原生集成。'
- en: '**Includes universal code search**: This feature allows you to perform a code
    search within the code source repository or across repositories. Search can also
    be scoped to a specific project or repository or even a specific directory.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包括通用代码搜索**：此功能允许在源代码仓库或跨多个仓库中进行代码搜索。搜索也可以限定在特定项目、仓库，甚至特定目录中。'
- en: '**Integration with GCP services**: This feature allows native integration with
    multiple GCP services such as Cloud Build, Cloud Operations, Cloud Functions,
    and Cloud Run. For example, the logs related to operations against CSR are automatically
    sent to Cloud Logging. The user, however, requires relevant **Identity Access
    Management** (**IAM**) roles to access Cloud Logging in order to view logs related
    to CSR.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与 GCP 服务的集成**：此功能允许与多个 GCP 服务（如 Cloud Build、Cloud Operations、Cloud Functions
    和 Cloud Run）进行原生集成。例如，涉及 CSR 操作的日志会自动发送到 Cloud Logging。然而，用户需要相应的 **身份访问管理（IAM）**
    角色才能访问 Cloud Logging，以查看与 CSR 相关的日志。'
- en: Identity Access Management (IAM)
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 身份访问管理（IAM）
- en: IAM is a framework of roles and policies to ensure users and applications have
    the required access to resources specifically recommended within the principles
    of least privilege.
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: IAM 是一套角色和策略框架，确保用户和应用程序能够根据最小权限原则访问所需的资源。
- en: Each of the previously mentioned features will be discussed in detail later
    in this chapter. The upcoming section details the step-by-step process involved
    to create and access a repository in CSR.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本章后续将详细讨论上述每个功能。接下来的部分将详细介绍创建和访问 CSR 仓库的逐步过程。
- en: First steps – creating and accessing a repository in CSR
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步 – 在 CSR 中创建和访问仓库
- en: One of the first steps to perform while working with CSR is to actually create
    a repository and add files to it. Given that CSR is a managed repository, the
    user need not manage the space required to host the repository or the computational
    power required to maintain or run operations against the repository.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 CSR 时，执行的第一步是实际创建一个仓库并向其中添加文件。由于 CSR 是一个托管仓库，用户无需管理用于托管仓库的空间或用于维护或执行仓库操作的计算能力。
- en: In this section, we will see how we can create a repository in CSR from Google
    Cloud Console and the command line. In addition, we'll learn how to add files
    to a branch in an empty repository and then merge to the master. Let's get started.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将展示如何通过 Google Cloud Console 和命令行在 CSR 中创建一个仓库。此外，我们将学习如何向空仓库中的分支添加文件并将其合并到主分支。让我们开始吧。
- en: Creating a repository via Google Cloud Console
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过 Google Cloud Console 创建仓库
- en: 'The following is a step-by-step process to create our first repository in CSR
    through Google Cloud Console:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是通过 Google Cloud Console 在 CSR 中创建我们的第一个仓库的逐步过程：
- en: Enable the CSR API (*Figure 5.1*) by navigating to the **Library** sub-section
    under the **APIs & Services** section:![Figure 5.1 – Enabling the CSR API
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用 CSR API（*图 5.1*），通过在**API 与服务**部分下的**库**子部分中进行导航：![图 5.1 – 启用 CSR API
- en: '](img/B15587_05_01.jpg)'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15587_05_01.jpg)'
- en: Figure 5.1 – Enabling the CSR API
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.1 – 启用 CSR API
- en: Navigate to **Source Repositories** within GCP and select the **Get Started**
    option. The system will display a prompt (*Figure 5.2*) and provide an option
    to create a repository. However, if a repository already exists in CSR, skip to
    *step 3* and use the **Add a Repository** option instead:![Figure 5.2 – Option
    to create your first repository
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 GCP 中导航到**源仓库**并选择**开始使用**选项。系统将显示提示（*图 5.2*），并提供创建仓库的选项。如果仓库已在 CSR 中存在，请跳至*步骤
    3*，并使用**添加仓库**选项：
- en: '](img/B15587_05_02.jpg)'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15587_05_02.jpg)'
- en: Figure 5.2 – Option to create your first repository
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.2 – 创建您的第一个仓库的选项
- en: The system will prompt to add a repository by providing two options (*Figure
    5.3*) – to either create a new repository or connect to an external repository.
    In this case, select the option to create a new repository:![Figure 5.3 – Option
    to create a new repository
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 系统将提示添加仓库，提供两种选项（*图 5.3*）—可以选择创建新仓库或连接到外部仓库。在这种情况下，选择创建新仓库的选项：![图 5.3 – 创建新仓库的选项
- en: '](img/B15587_05_03.jpg)'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15587_05_03.jpg)'
- en: Figure 5.3 – Option to create a new repository
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.3 – 创建新仓库的选项
- en: 'Create a repository by entering a repository name. Additionally, select a project
    under which the repository should be created (*Figure 5.4*):'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入仓库名称来创建一个仓库。此外，选择一个项目，该仓库应该在其下创建（*图 5.4*）：
- en: '![Figure 5.4 – Creating a new repository'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.4 – 创建新仓库'
- en: '](img/B15587_05_04.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15587_05_04.jpg)'
- en: Figure 5.4 – Creating a new repository
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – 创建新仓库
- en: This will create a new repository from the console. However, there will be situations
    where it is required to create a repository through scripts and that means through
    the command line. This is specifically recommended when automation is at the forefront
    and the goal is to eliminate toil. The upcoming topic details how to create a
    repository via the CLI.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这将通过控制台创建一个新仓库。然而，某些情况下需要通过脚本创建仓库，即通过命令行。这在自动化为核心目标并旨在消除重复劳动时特别推荐。接下来的主题将详细说明如何通过
    CLI 创建仓库。
- en: Creating a repository via the CLI
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过 CLI 创建仓库
- en: 'To create a cloud source repository via the command line or CLI, execute the
    following commands. It is required to either install Google Cloud SDK or use Google
    Cloud Shell:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过命令行或 CLI 创建一个云源仓库，请执行以下命令。必须安装 Google Cloud SDK 或使用 Google Cloud Shell：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding steps will create a new repository from the CLI. Essentially,
    the new repository created in CSR from either the console or the CLI will be an
    empty repository. The next topic will detail how to add files to a repository
    in CSR.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 上述步骤将通过 CLI 创建一个新仓库。从本质上讲，通过控制台或 CLI 在 CSR 中创建的新仓库将是一个空仓库。接下来的主题将详细说明如何向 CSR
    中的仓库添加文件。
- en: Adding files to a repository in CSR
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向 CSR 中的仓库添加文件
- en: 'Once a repository is created, developers can create a branch and make their
    changes inside that branch. These changes can then be merged into the master once
    confirmed. This is a multi-step process (as detailed in the following procedure)
    that could be executed from the user''s terminal window with Google Cloud SDK
    installed or via Google Cloud Shell from the user''s choice of browser:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了仓库，开发人员可以创建一个分支并在该分支中进行更改。然后，在确认更改后，可以将这些更改合并到主分支中。这是一个多步骤的过程（如下面的操作步骤所示），可以通过用户的终端窗口执行，前提是安装了
    Google Cloud SDK，或者通过用户选择的浏览器使用 Google Cloud Shell：
- en: 'Clone the repository to a local Git repository:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将仓库克隆到本地 Git 仓库：
- en: '[PRE1]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Switch to the new local Git repository:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到新的本地 Git 仓库：
- en: '[PRE2]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a new branch:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新分支：
- en: '[PRE3]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add a file to the new branch:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件添加到新分支：
- en: '[PRE4]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Commit changes of the new file to the branch:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交新文件的更改到分支：
- en: '[PRE5]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Push changes to the branch:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 推送更改到分支：
- en: '[PRE6]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create a master branch (as this is the first check into `master`):'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个主分支（因为这是第一次检查进入`master`）：
- en: '[PRE7]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Merge the branch to `master`:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将分支合并到`master`：
- en: '[PRE8]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This completes this section and you can now create an empty repository and subsequently
    add files to a working branch and then check into the master. However, there will
    be situations where the user can work with either an existing repository in GCP's
    CSR or external source repositories in GitHub/Bitbucket. Either way, the process
    to clone an existing repository is the same. In addition, CSR allows one-way sync
    from external repositories such as GitHub/Bitbucket. All these details will be
    covered in the next section.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分完成后，您可以创建一个空的仓库，并随后将文件添加到工作分支，然后检查到主分支。然而，也会有一些情况，用户可以选择使用 GCP 的 CSR 中的现有仓库，或
    GitHub/Bitbucket 中的外部源仓库。无论哪种方式，克隆现有仓库的过程都是相同的。此外，CSR 允许从外部仓库（如 GitHub/Bitbucket）进行单向同步。所有这些细节将在下一部分中介绍。
- en: One-way sync from GitHub/Bitbucket to CSR
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 GitHub/Bitbucket 到 CSR 的单向同步
- en: CSR provides an option to add a repository by connecting to an external repository
    and perform near real-time one-way sync. Currently, GitHub and Bitbucket are the
    only supported external source repositories.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: CSR 提供了一种通过连接外部仓库来添加仓库并执行近实时单向同步的选项。目前，GitHub 和 Bitbucket 是唯一支持的外部源仓库。
- en: 'The following is the step-by-step process to create a repository in CSR by
    connecting to an external GitHub repository (similar steps will apply to a Bitbucket-based
    repository):'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是通过连接到外部 GitHub 仓库在 CSR 中创建仓库的逐步过程（类似的步骤也适用于基于 Bitbucket 的仓库）：
- en: Navigate to **Source Repositories** in Google Cloud Console and select the **Add
    Repository** option.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Google Cloud Console 中导航到 **Source Repositories** 并选择 **Add Repository** 选项。
- en: Select the option to connect to an external repository (*Figure 5.5*):![Figure
    5.5 – Option to connect to an external repository
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择连接外部仓库的选项（*图 5.5*）：![图 5.5 – 连接外部仓库的选项
- en: '](img/B15587_05_05.jpg)'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15587_05_05.jpg)'
- en: Figure 5.5 – Option to connect to an external repository
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.5 – 连接外部仓库的选项
- en: Select an appropriate project and an external Git provider (**GitHub** in this
    case) and authorize the selected GCP project to store third-party authentication
    credentials in order to enable connected repository services (*Figure 5.6*):![Figure
    5.6 – Connecting to GitHub
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个适当的项目和外部 Git 提供商（本例中为**GitHub**），并授权选定的 GCP 项目存储第三方身份验证凭证，以启用连接的仓库服务（*图
    5.6*）：![图 5.6 – 连接到 GitHub
- en: '](img/B15587_05_06.jpg)'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15587_05_06.jpg)'
- en: Figure 5.6 – Connecting to GitHub
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.6 – 连接到 GitHub
- en: Enter your GitHub credentials and authorize GCP to access the provided GitHub
    account (*Figure 5.7*):![Figure 5.7 – Authorizing GCP to access GitHub
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您的 GitHub 凭据，并授权 GCP 访问提供的 GitHub 账户（*图 5.7*）：![图 5.7 – 授权 GCP 访问 GitHub
- en: '](img/B15587_05_07.jpg)'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15587_05_07.jpg)'
- en: Figure 5.7 – Authorizing GCP to access GitHub
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.7 – 授权 GCP 访问 GitHub
- en: Once authorized, select the GitHub repo that needs to be synced with CSR and
    then select the **Connect selected repository** action (*Figure 5.8*):![Figure
    5.8 – Connecting GCR to the selected GitHub repository
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 授权后，选择需要与 CSR 同步的 GitHub 仓库，然后选择 **Connect selected repository** 操作（*图 5.8*）：![图
    5.8 – 连接 GCR 到选定的 GitHub 仓库
- en: '](img/B15587_05_08.jpg)'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15587_05_08.jpg)'
- en: Figure 5.8 – Connecting GCR to the selected GitHub repository
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.8 – 连接 GCR 到选定的 GitHub 仓库
- en: The following prompt (*Figure 5.9*) will be displayed once the connection is
    established between the GitHub repo and GCP's CSR. The first-time sync might take
    some time, but subsequent syncs are near real-time:![Figure 5.9 – Confirmation
    that one-way sync is established with GitHub
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦 GitHub 仓库和 GCP 的 CSR 之间建立了连接，以下提示（*图 5.9*）将显示。第一次同步可能需要一些时间，但随后的同步是近实时的：![图
    5.9 – 确认已与 GitHub 建立单向同步
- en: '](img/B15587_05_09.jpg)'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15587_05_09.jpg)'
- en: Figure 5.9 – Confirmation that one-way sync is established with GitHub
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.9 – 确认已与 GitHub 建立单向同步
- en: The contents of the GitHub repo will eventually sync up with CSR and that also
    includes the commit history and any other available metadata (*Figure 5.10*):![Figure
    5.10 – Contents of the newly added GitHub repository
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitHub 仓库的内容最终将与 CSR 同步，其中也包括提交历史和任何其他可用的元数据（*图 5.10*）：![图 5.10 – 新添加的 GitHub
    仓库的内容
- en: '](img/B15587_05_10.jpg)'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15587_05_10.jpg)'
- en: Figure 5.10 – Contents of the newly added GitHub repository
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.10 – 新添加的 GitHub 仓库的内容
- en: If the user adds a new file to the GitHub repo, then a near real-time one-way
    sync will be performed by CSR. The commit along with the recent changes will reflect
    in CSR against the relevant project. *Figure 5.11* highlights the new commit history:![Figure
    5.11 – Updating the commit history post a near real-time one-way sync
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果用户向 GitHub 仓库添加新文件，则 CSR 将执行近实时单向同步。提交和最近的更改将反映在 CSR 中的相关项目中。*图 5.11* 突出了新的提交历史记录：![图
    5.11 – 更新提交历史记录后进行近实时单向同步
- en: '](img/B15587_05_11.jpg)'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15587_05_11.jpg)'
- en: Figure 5.11 – Updating the commit history post a near real-time one-way sync
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.11 – 更新提交历史记录后进行近实时单向同步
- en: 'If there is a need to perform forced sync from an external repository to CSR
    or disconnect the external repository from CSR, navigate to the repository settings
    in GCP to find the appropriate options (*Figure 5.12*):'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要从外部仓库强制同步到 CSR 或断开与外部仓库的连接，可以导航到 GCP 中的仓库设置，找到相应选项（*图 5.12*）：
- en: '![Figure 5.12 – Repository settings to force a sync or disconnect from GitHub'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.12 – 仓库设置以强制同步或断开与 GitHub 的连接'
- en: '](img/B15587_05_12.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15587_05_12.jpg)'
- en: Figure 5.12 – Repository settings to force a sync or disconnect from GitHub
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.12 – 仓库设置以强制同步或断开与 GitHub 的连接
- en: This completes the detailed step-by-step process of establishing one-way sync
    with external repositories such as GitHub/Bitbucket. The next section dives into
    some common operations that a user can perform in CSR, such as browsing repositories
    and files and performing universal code search.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了与外部仓库（如 GitHub/Bitbucket）建立单向同步的详细步骤。下一节将介绍用户在 CSR 中可以执行的一些常见操作，如浏览仓库和文件，以及执行通用代码搜索。
- en: Common operations in CSR
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSR 中的常见操作
- en: 'This section details the common operations that could be performed in CSR.
    The options include the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 本节详细介绍了在 CSR 中可以执行的常见操作。选项包括以下内容：
- en: Browse repositories.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览仓库。
- en: Browse files.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览文件。
- en: Perform a universal code search.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行通用代码搜索。
- en: Detect security keys.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测安全密钥。
- en: Assign access controls.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配访问控制。
- en: Let's go through them in detail starting with the browsing repositories option.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从浏览仓库选项开始，详细介绍它们。
- en: Browsing repositories
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 浏览仓库
- en: 'There are two specific views to browse repositories. These views are represented
    across two tabs:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览仓库有两种特定视图。这些视图分布在两个标签中：
- en: '**All repositories**'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**所有仓库**'
- en: '**My source**'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**我的源**'
- en: All repositories
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 所有仓库
- en: CSR shows a consolidated view of all available repositories across projects
    that the current user has access to. The combination of repository name and project
    ID forms a unique tuple.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: CSR 显示了当前用户可以访问的所有可用仓库的汇总视图。仓库名称和项目 ID 的组合形成一个唯一的元组。
- en: 'The user can also mark repositories of choice (typically the most important
    or most constantly used) with a star. All starred repositories will show up under
    the **My source** tab to provide quick access to specific repositories (*Figure
    5.13*):'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 用户还可以通过星标标记选择的仓库（通常是最重要或最常用的）。所有被星标的仓库将出现在 **我的源** 标签下，方便快速访问特定仓库（*图 5.13*）：
- en: '![Figure 5.13 – List of repositories listed under All repositories'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.13 – 在所有仓库下列出的仓库列表'
- en: '](img/B15587_05_13.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15587_05_13.jpg)'
- en: Figure 5.13 – List of repositories listed under All repositories
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.13 – 在所有仓库下列出的仓库列表
- en: 'Users can perform three specific operations against any repository displayed
    under the **All repositories** tab (refer to the green square box in *Figure 5.13*,
    in the following order):'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以针对 **所有仓库** 标签下显示的任何仓库执行三种特定操作（参见 *图 5.13* 中绿色方框，按以下顺序）：
- en: '**Settings**: This option allows the user to edit settings.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设置**：此选项允许用户编辑设置。'
- en: '**Clone**: This option provides details required to clone the repository.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**克隆**：此选项提供了克隆仓库所需的详细信息。'
- en: '**Permissions**: This option allows you to control access to a repository either
    at the level of a user or a group or service account.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**权限**：此选项允许您控制对仓库的访问权限，可以是用户、组或服务帐户级别。'
- en: The user can access a repository by selecting a repository of choice from the
    list view or they can pick one from the tree view (via the drop-down control for
    **All repositories**).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以通过从列表视图中选择一个仓库，或者从树状视图中选择一个（通过 **所有仓库** 的下拉控制）来访问仓库。
- en: My source
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我的源
- en: 'The repositories that are starred in the **All repositories** section are listed
    to provide quick access to a user-selected subset. Additionally, recently viewed
    repositories (that may or may not be starred) are also listed and can be accessed
    with a click (*Figure 5.14*):'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在**所有仓库**部分中，星标的仓库会列出，以便快速访问用户选择的子集。此外，最近查看的仓库（可能已经或未被星标）也会列出，并可以通过点击访问（*图 5.14*）：
- en: '![Figure 5.14 – Contents of My source displaying starred and recently viewed
    repositories'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.14 – 我的源的内容，显示了星标和最近查看的仓库'
- en: '](img/B15587_05_14.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15587_05_14.jpg)'
- en: Figure 5.14 – Contents of My source displaying starred and recently viewed repositories
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.14 – 我的源的内容，显示了星标和最近查看的仓库
- en: This concludes the details on how a user can browse through the repositories
    in CSR. The next topic focuses on browsing files within a specific repository.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这就介绍了用户如何浏览 CSR 中的仓库的详细信息。接下来的主题将重点介绍如何在特定仓库中浏览文件。
- en: Browsing files
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览文件
- en: 'Once a user selects a repository to browse, the default view switches to the
    master branch. The user can view the list of files through a tree-like structure
    (on the left-hand side) and selecting any file will display the contents of the
    file (on the right-hand side). The user can also edit a file by using the **Edit
    code in Cloud Shell** option. At this point, the file will be opened in the Cloud
    Shell Editor (*Figure 5.15*) using the credentials associated with the project.
    The authentication happens automatically with no additional login:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户选择了要浏览的仓库，默认视图会切换到主分支。用户可以通过树状结构（左侧）查看文件列表，选择任何文件将显示该文件的内容（右侧）。用户还可以通过使用**在云端
    Shell 中编辑代码**选项来编辑文件。此时，文件将在云端 Shell 编辑器中打开（*图 5.15*），并使用与项目关联的凭证进行身份验证。身份验证会自动进行，无需额外登录：
- en: '![Figure 5.15 – Options to view/edit file contents'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.15 – 查看/编辑文件内容的选项'
- en: '](img/B15587_05_15.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15587_05_15.jpg)'
- en: Figure 5.15 – Options to view/edit file contents
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.15 – 查看/编辑文件内容的选项
- en: 'The user can also switch to an existing branch by selecting the branch of choice
    (*Figure 5.16*). In addition, the user can view files by a specific tag or commit:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 用户还可以通过选择所需的分支来切换到现有的分支（*图 5.16*）。此外，用户还可以按特定的标签或提交来查看文件：
- en: '![Figure 5.16 – Options to switch branch or browse files by tag or commit'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.16 – 切换分支或按标签或提交浏览文件的选项'
- en: '](img/B15587_05_16.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15587_05_16.jpg)'
- en: Figure 5.16 – Options to switch branch or browse files by tag or commit
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.16 – 切换分支或按标签或提交浏览文件的选项
- en: 'If a user wants to view historical changes for a specific file, then they can
    view the change information either through the **Blame** panel (on the top right-hand
    side) or through the **History** sub-section (*Figure 5.17*):'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户想查看特定文件的历史更改信息，可以通过**Blame**面板（右上方）或**历史**子部分（*图 5.17*）来查看更改记录：
- en: '![Figure 5.17 – Historical change information for a specific file in CSR'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.17 – 查看特定文件的历史更改信息（CSR）'
- en: '](img/B15587_05_17.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15587_05_17.jpg)'
- en: Figure 5.17 – Historical change information for a specific file in CSR
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.17 – 查看特定文件的历史更改信息（CSR）
- en: This concludes the details on how a user can browse through files within a specific
    repository. The next topic focuses on how a user can perform a universal code
    search within a repository or across repositories in CSR.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这就介绍了用户如何在特定仓库中浏览文件的详细信息。接下来的内容将重点介绍用户如何在 CSR 中执行跨仓库或单一仓库的通用代码搜索。
- en: Performing a universal code search
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行通用代码搜索
- en: CSR provides the ability to search code snippets or files through the search
    box located on the CSR console. The user can search by typing text (preferably
    within double quotes) or by using regular expressions.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: CSR 提供通过 CSR 控制台上的搜索框搜索代码片段或文件的功能。用户可以通过输入文本（最好用双引号括起来）或使用正则表达式进行搜索。
- en: 'The scope of the search can be set to one of four possible levels (*Figure
    5.18*):'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索范围可以设置为四个可能的级别之一（*图 5.18*）：
- en: '**Everything**: Search across all repositories that the user has access to.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**所有内容**：搜索用户有权限访问的所有仓库。'
- en: '**This project**: Search across all repositories in the current project.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**此项目**：搜索当前项目中的所有仓库。'
- en: '**This repository**: Search across the current repository.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**此仓库**：在当前仓库中进行搜索。'
- en: '**This directory**: Search across the current directory:'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**此目录**：在当前目录中进行搜索：'
- en: '![Figure 5.18 – Possible scopes to perform universal code search'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.18 – 执行通用代码搜索的可能范围'
- en: '](img/B15587_05_18.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15587_05_18.jpg)'
- en: Figure 5.18 – Possible scopes to perform universal code search
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.18 – 执行通用代码搜索的可能范围
- en: The next topic covers the possible ways to perform a code search based on different
    filter criteria and their respective syntaxes.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个主题涵盖了基于不同过滤条件执行代码搜索的可能方式及其相应的语法。
- en: Search filters
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 搜索过滤器
- en: 'The following table lists some search filters that can be used to search for
    code:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 下表列出了一些可以用于搜索代码的搜索过滤器：
- en: '![](img/B15587_05_Table_5.1.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15587_05_Table_5.1.jpg)'
- en: This concludes the details on how a user can perform a universal code search.
    The next topic focuses on a specific feature in CSR that can specifically enforce
    a policy to detect security keys when a user attempts to make a code commit.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分详细介绍了用户如何执行通用代码搜索。接下来的主题将重点介绍 CSR 中的一个特定功能，该功能能够在用户尝试进行代码提交时，强制执行策略以检测安全密钥。
- en: Detecting security keys
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测安全密钥
- en: CSR provides options to detect whether security keys are stored in a repository.
    If this feature is enabled, CSR will enforce this check when a user is trying
    to push code into the repository either to a branch or master. If the contents
    of the file include a security key, then the code will not be pushed, and the
    user will be notified.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: CSR 提供了检测代码库中是否存储安全密钥的选项。如果启用了此功能，当用户尝试将代码推送到代码库中的分支或主分支时，CSR 会强制执行此检查。如果文件内容包含安全密钥，则代码将无法推送，并且用户将收到通知。
- en: 'Currently, CSR can be set up to check for the following types of security keys:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当前，CSR 可以设置检查以下类型的安全密钥：
- en: Service account credentials in JSON format
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSON 格式的服务账户凭据
- en: PEM-encoded private keys
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PEM 编码的私钥
- en: 'The following commands will provide the ability to enable, disable, or override
    security key detection:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将提供启用、禁用或覆盖安全密钥检测的功能：
- en: '[PRE9]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This concludes the details on how security keys can be detected during a code
    commit. The next topic focuses on the required access controls to perform operations
    in CSR.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分详细介绍了如何在代码提交过程中检测安全密钥。下一个主题将关注在 CSR 中执行操作所需的访问控制。
- en: Assigning access controls
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分配访问控制
- en: Access to repositories can be assigned at either the project level or the repository
    level. If a user is assigned a specific role at the project level, then that role
    will be applied to the user for all repositories in that project. However, if
    a user is assigned a specific role for a specific repository, then it only applies
    to that repository.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 对代码库的访问可以在项目级别或代码库级别进行分配。如果用户在项目级别分配了特定角色，则该角色将应用于该项目中所有代码库的用户。然而，如果用户为某个特定代码库分配了角色，则该角色仅适用于该代码库。
- en: 'The following table summarizes the critical IAM roles required to access or
    perform actions on CSR:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 下表总结了访问 CSR 或在 CSR 上执行操作所需的关键 IAM 角色：
- en: '![](img/B15587_05_Table_5.2.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B15587_05_Table_5.2.jpg)'
- en: The next topic provides information on how cross-account project access can
    be set up.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个主题提供了有关如何设置跨账户项目访问的信息。
- en: Cross-account project access
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 跨账户项目访问
- en: If a user is part of project A but needs to access a specific repository in
    project B, then the user should be given the Source Repository Reader/Writer/Admin
    role, depending on the intended scope of the user from project A against a specific
    repository in project B. This can be achieved through the **Permissions** section
    under the repository settings.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户属于项目 A，但需要访问项目 B 中的特定代码库，则应根据用户在项目 A 中的预期作用域，将 Source Repository Reader/Writer/Admin
    角色分配给该用户，适用于项目 B 中的特定代码库。这可以通过代码库设置中的**权限**部分来实现。
- en: This concludes the details on access controls specific to CSR. This also brings
    us to the end of a major section focused on common operations that users can perform
    in CSR. The upcoming section is a hands-on lab where a cloud function is deployed
    using the code hosted in a cloud source repository.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分详细介绍了 CSR 特定的访问控制。也意味着我们已经完成了一个关于用户可以在 CSR 中执行的常见操作的主要部分。接下来的部分是一个实践实验，其中将使用托管在云源代码库中的代码部署云功能。
- en: Hands-on lab – integrating with Cloud Functions
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践实验 – 与云功能集成
- en: 'The objective of this hands-on lab is to demonstrate the integration between
    a GCP compute service such as Cloud Functions with CSR. The intent is to illustrate
    how code can be deployed in Cloud Functions by pulling the code hosted from CSR.
    The following is a summary of the steps at a high level:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 本实践实验的目标是演示 GCP 计算服务（如云功能）与 CSR 之间的集成。目的是说明如何通过拉取托管在 CSR 中的代码来部署代码到云功能。以下是高层次的步骤总结：
- en: Add code to an existing repository through the Cloud Shell Editor.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过 Cloud Shell 编辑器向现有代码库添加代码。
- en: Push code from the Cloud Shell Editor (local repository) into CSR.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Cloud Shell 编辑器（本地代码库）将代码推送到 CSR。
- en: Create a cloud function and deploy code from the repository in CSR.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建云函数并从 CSR 中的代码库部署代码。
- en: Adding code to an existing repository through the Cloud Shell Editor
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过 Cloud Shell 编辑器向现有代码库添加代码
- en: 'This sub-section specifically focuses on adding code to an existing repository.
    Developers typically use their favorite editors to make code changes. The following
    shows the usage of GCP''s Cloud Shell Editor, an online development environment
    that supports cloud-native development through the Cloud Code plugin along with
    language support for Go, Java, .NET, Python, and Node.js:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 本小节专门介绍了如何向现有代码库添加代码。开发者通常使用其喜爱的编辑器进行代码更改。以下是使用 GCP 的 Cloud Shell 编辑器的示例，这是一个在线开发环境，通过
    Cloud Code 插件支持云原生开发，并提供对 Go、Java、.NET、Python 和 Node.js 的语言支持。
- en: Navigate to **Source Repositories** in the GCP console.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 GCP 控制台中导航至**源代码库**。
- en: Navigate to the repository of choice where you want to add code. You can use
    the `my-first-csr` repository that was previously created.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航至您希望添加代码的代码库。您可以使用之前创建的 `my-first-csr` 代码库。
- en: Select the **Edit in Cloud Shell** action. This opens the code in the Cloud
    Shell Editor and also clones the code from CSR into a local repository under the
    Cloud Shell console.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**在 Cloud Shell 中编辑**操作。这会在 Cloud Shell 编辑器中打开代码，并将代码从 CSR 克隆到 Cloud Shell
    控制台下的本地代码库。
- en: Add a new code file called `main.py`. Copy the contents of this file from [https://github.com/PacktPublishing/Google-Cloud-Platform-for-DevOps-Engineers/blob/main/cloud-build/main.py](https://github.com/PacktPublishing/Google-Cloud-Platform-for-DevOps-Engineers/blob/main/cloud-build/).
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加名为 `main.py` 的新代码文件。从 [https://github.com/PacktPublishing/Google-Cloud-Platform-for-DevOps-Engineers/blob/main/cloud-build/main.py](https://github.com/PacktPublishing/Google-Cloud-Platform-for-DevOps-Engineers/blob/main/cloud-build/)
    复制此文件的内容。
- en: Save the code file.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存代码文件。
- en: Once the code is edited and added, the next step is to push the code into CSR.
    This will be covered as the next topic.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 代码编辑和添加完成后，下一步是将代码推送到 CSR。这将作为下一个主题进行讨论。
- en: Pushing code from the Cloud Shell Editor (local repository) into CSR
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 Cloud Shell 编辑器（本地代码库）将代码推送到 CSR
- en: 'This sub-section specifically focuses on pushing code from a local repository
    of the Cloud Shell Editor into CSR. A terminal can be opened within Cloud Shell
    to provide command-line instructions. A command-line approach to push code is
    elaborated on in the following procedure:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 本小节专门介绍如何将代码从 Cloud Shell 编辑器的本地代码库推送到 CSR。可以在 Cloud Shell 内打开终端，提供命令行指令。下面详细描述了推送代码的命令行方法：
- en: Switch to the console window in the Cloud Shell Editor.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Cloud Shell 编辑器中的控制台窗口。
- en: 'Perform Git operations to add the new file and commit the changes:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 Git 操作以添加新文件并提交更改：
- en: '[PRE10]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Push the local repository created in the Cloud Shell Editor with the new changes
    into the repository hosted in CSR. Indicate the appropriate project (after `/p`)
    and the destination repository in CSR (after `/r`):'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Cloud Shell 编辑器将包含新更改的本地代码库推送到托管在 CSR 中的代码库中。在 `/p` 后指定适当的项目，并在 `/r` 后指定
    CSR 中目标代码库：
- en: '[PRE11]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Navigate to the target repository (for example, `my-first-csr`) in CSR to view
    the newly added Python file, `main.py`.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 CSR 中导航至目标代码库（例如 `my-first-csr`），以查看新添加的 Python 文件，`main.py`。
- en: 'Once the code is pushed to CSR from the remote branch, the code will be available
    in the master and is now ready to be deployed into any compute option of choice.
    The next topic illustrates the steps involved to download source code from CSR
    and deploy it into GCP''s serverless compute option: Cloud Functions.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦代码从远程分支推送到 CSR，代码将在主分支中可用，现在可以部署到任何计算选项中。下一个主题说明了从 CSR 下载源代码并将其部署到 GCP 无服务器计算选项（Cloud
    Functions）的步骤：
- en: Creating a cloud function and deploying code from the repository in CSR
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建云函数并从 CSR 中的代码库部署代码
- en: 'This sub-section specifically illustrates how CSR can integrate with other
    GCP compute options such as Cloud Functions:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 本小节特别说明了 CSR 如何与其他 GCP 计算选项（例如 Cloud Functions）集成：
- en: Navigate to **Cloud Functions** in the GCP console.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 GCP 控制台中导航至**Cloud Functions**。
- en: Select the option to create a function (if a function is created for the very
    first time in a project, then this action will enable the Cloud Functions API).
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择创建函数的选项（如果在项目中首次创建函数，则此操作将启用 Cloud Functions API）。
- en: 'Enter a function name of your choice and select a region, trigger type, and
    authentication mode. Save the options and continue. The following are examples:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一个你选择的函数名称，并选择区域、触发类型和身份验证方式。保存选项并继续。以下是示例：
- en: a) `my-first-csr`
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) `my-first-csr`
- en: b) `us-central1`
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) `us-central1`
- en: c) `HTTP`
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) `HTTP`
- en: d) `Allow unauthenticated invocations`
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) `允许未经身份验证的调用`
- en: Set the runtime as **Python 3.8** and the source code option as **Cloud Source
    Repository**.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置运行时为 **Python 3.8**，源代码选项设置为 **Cloud Source Repository**。
- en: Enter details related to the repository from which the code needs to be deployed
    and select the `hello_world` as the value.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入与需要部署代码的仓库相关的详细信息，并选择 `hello_world` 作为值。
- en: b) `my-first-csr` as the value.
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) `my-first-csr` 作为值。
- en: c) `master` as the value.
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) `master` 作为值。
- en: 'd) `/` as the value:'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) `/` 作为值：
- en: '![Figure 5.19 – Configuring the cloud source repository as the source code
    option'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 5.19 – 配置云源代码库作为源代码选项'
- en: '](img/B15587_05_19.jpg)'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15587_05_19.jpg)'
- en: Figure 5.19 – Configuring the cloud source repository as the source code option
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 5.19 – 配置云源代码库作为源代码选项
- en: 'The function will be successfully deployed (*Figure 5.20*). The function can
    be tested either using the **Test Function** option under **Actions** in the list
    page or through the trigger URL specified under the **Details** section of the
    cloud function:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数将成功部署（*图 5.20*）。可以通过列表页面中 **操作** 下的 **测试函数** 选项，或通过云函数的 **详细信息** 部分中指定的触发
    URL 来测试该函数：
- en: '![Figure 5.20 – Cloud function successfully deployed'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.20 – 云函数成功部署'
- en: '](img/B15587_05_20.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15587_05_20.jpg)'
- en: Figure 5.20 – Cloud function successfully deployed
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.20 – 云函数成功部署
- en: This completes a detailed lab where the user makes a code change using GCP's
    Cloud Shell Editor, pushes to a repository using GCP's CSR, and deploys code to
    one of GCP's compute options such as Cloud Functions.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了一个详细的实验，用户使用 GCP 的 Cloud Shell Editor 进行代码更改，通过 GCP 的 CSR 推送到一个仓库，并将代码部署到
    GCP 的计算选项之一，如 Cloud Functions。
- en: Summary
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed the service from Google Cloud to manage source
    code and provide Git version control to support collaborative development. This
    is the first key building block in the process of establishing a CI/CD process.
    In addition, we discussed various operations that can be performed in CSR along
    with a hands-on lab demonstrating native integration of CSR with Cloud Functions.
    The next chapter will focus on the services from Google Cloud required to build
    code, create image artifacts, and manage artifacts. These services include Cloud
    Build and Container Registry.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了 Google Cloud 提供的服务，用于管理源代码并提供 Git 版本控制，以支持协作开发。这是建立 CI/CD 流程中的第一个关键构建模块。此外，我们还讨论了可以在
    CSR 中执行的各种操作，并通过动手实验演示了 CSR 与 Cloud Functions 的原生集成。下一章将重点介绍构建代码、创建镜像工件和管理工件所需的
    Google Cloud 服务。这些服务包括 Cloud Build 和 Container Registry。
- en: Points to remember
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的要点
- en: 'The following are some important points to remember:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些需要记住的重要事项：
- en: CSR is a fully managed private Git repository.
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSR 是一个完全托管的私有 Git 仓库。
- en: CSR provides one-way sync with GitHub and Bitbucket.
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSR 提供与 GitHub 和 Bitbucket 的单向同步。
- en: CSR provides a feature for universal code search and the search can be set either
    for a specific project, a specific repository, a specific directory, or everything.
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSR 提供了一个功能，可以进行通用的代码搜索，搜索可以设置为特定项目、特定仓库、特定目录或全部。
- en: CSR can be set up to detect security keys. The currently supported types are
    service account credentials in JSON format and PEM-encoded private keys.
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSR 可以设置为检测安全密钥。目前支持的类型包括 JSON 格式的服务账户凭证和 PEM 编码的私钥。
- en: CSR provides a feature to override security key detection at a commit level.
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSR 提供了一个功能，可以在提交级别覆盖安全密钥检测。
- en: Source Repository Reader/Writer/Admin are the supported access controls.
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持的访问控制包括 Source Repository Reader/Writer/Admin。
- en: Further reading
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'For more information on GCP''s Cloud Source Repositories, refer to the following:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 GCP 的 Cloud Source Repositories 的更多信息，请参阅以下内容：
- en: '**Cloud Source Repositories**: [https://cloud.google.com/source-repositories](https://cloud.google.com/source-repositories
    )'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cloud Source Repositories**: [https://cloud.google.com/source-repositories](https://cloud.google.com/source-repositories)'
- en: Practice test
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践测试
- en: 'Answer the following questions:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题：
- en: 'Select the command that can be used to create a new repository in CSR called
    `my-first-csr` through the CLI:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择可以通过 CLI 创建名为 `my-first-csr` 的新仓库的命令：
- en: a) `gcloud create source repos my-first-csr`
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) `gcloud create source repos my-first-csr`
- en: b) `gcloud source repos create my-first-csr`
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) `gcloud source repos create my-first-csr`
- en: c) `gcloud create source repos my-first-csr`
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) `gcloud create source repos my-first-csr`
- en: d) `gcloud source repo create my-first-csr`
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) `gcloud source repo create my-first-csr`
- en: Which of the following options allows one-way sync with CSR?
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个选项允许与CSR进行单向同步？
- en: a) GitHub
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) GitHub
- en: b) Bitbucket
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) Bitbucket
- en: c) None of the above
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) 以上都不是
- en: d) Options *a* and *b*
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) 选项 *a* 和 *b*
- en: 'Select the frequency of one-way sync from supported repository types to CSR:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择从支持的仓库类型到CSR的单向同步频率：
- en: a) Every 5 minutes
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) 每5分钟
- en: b) Configurable
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) 可配置
- en: c) Real-time
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) 实时
- en: d) Near real-time
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) 接近实时
- en: Which of the following is not a supported search filter in CSR?
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个不是CSR支持的搜索过滤器？
- en: a) Search file contents
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) 搜索文件内容
- en: b) Search by language
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) 按语言搜索
- en: c) Search by function
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) 按功能搜索
- en: d) Search by including terms
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) 通过包含关键词进行搜索
- en: If the `git add`
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果是 `git add`
- en: c) `git push`
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) `git push`
- en: d) `git commit`
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) `git commit`
- en: 'Select the command to override security key detection at a commit level:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择覆盖提交级别安全密钥检测的命令：
- en: a) `git push -o keycheck`
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) `git push -o keycheck`
- en: b) `git push -o nokeycheck`
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) `git push -o nokeycheck`
- en: c) `git push -o anykeycheck`
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) `git push -o anykeycheck`
- en: d) `git push -o nonekeycheck`
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) `git push -o nonekeycheck`
- en: 'Select two commands to enable and disable security key detection:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择两条命令来启用和禁用安全密钥检测：
- en: a) `gcloud source project-configs update --enable-codeblock`
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) `gcloud source project-configs update --enable-codeblock`
- en: b) `gcloud source project-configs update --enable-pushblock`
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) `gcloud source project-configs update --enable-pushblock`
- en: c) `gcloud source project-configs update --disable-codeblock`
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) `gcloud source project-configs update --disable-codeblock`
- en: d) `gcloud source project-configs update --disable-pushblock`
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) `gcloud source project-configs update --disable-pushblock`
- en: Which out of the following is not a valid access control with respect to CSR?
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个不是CSR的有效访问控制？
- en: a) Source Repository Reader
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) 源仓库读取者
- en: b) Source Repository Writer
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) 源仓库写入者
- en: c) Source Repository Editor
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) 源仓库编辑者
- en: d) Source Repository Admin
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) 源仓库管理员
- en: Which out of the following access controls can update a repository but cannot
    create one?
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个访问控制可以更新仓库，但不能创建仓库？
- en: a) Source Repository Reader
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) 源仓库读取者
- en: b) Source Repository Writer
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) 源仓库写入者
- en: c) Source Repository Editor
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) 源仓库编辑者
- en: d) Source Repository Admin
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) 源仓库管理员
- en: Which out of the following access controls can update repository configurations?
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些访问控制可以更新仓库配置？
- en: a) Source Repository Reader
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a) 源仓库读取者
- en: b) Source Repository Writer
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b) 源仓库写入者
- en: c) Source Repository Editor
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c) 源仓库编辑者
- en: d) Source Repository Admin
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: d) 源仓库管理员
- en: Answers
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 答案
- en: (b) – `gcloud source repos create "my-first-csr"`
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (b) – `gcloud source repos create "my-first-csr"`
- en: (d) – Options *a* and *b*
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (d) – 选项 *a* 和 *b*
- en: (d) – Near real-time
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (d) – 接近实时
- en: (d) – Search by including terms
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (d) – 通过包含关键词进行搜索
- en: (d) – `git commit`
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (d) – `git commit`
- en: (b) – `git push -o nokeycheck`
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (b) – `git push -o nokeycheck`
- en: (b) – `gcloud source project-configs update --enable-pushblock` and (d) – `gcloud
    source project-configs update --disable-pushblock`
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (b) – `gcloud source project-configs update --enable-pushblock` 和 (d) – `gcloud
    source project-configs update --disable-pushblock`
- en: (c) – Source Repository Editor
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (c) – 源仓库编辑器
- en: (b) – Source Repository Writer
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (b) – 源仓库写入者
- en: (d) – Source Repository Admin
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: (d) – 源仓库管理员
