- en: '*Chapter 5*: Managing Source Code Using Cloud Source Repositories'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first section of this book (consisting of four chapters) focused on exploring
    the concepts of **Site Reliability Engineering** (**SRE**) in depth. This included
    SRE technical practices, understanding monitoring and alerting to target reliability,
    and insights into building SRE teams by applying SRE cultural practices.
  prefs: []
  type: TYPE_NORMAL
- en: 'This second section of the book explores GCP''s constructs in depth to implement
    a CI/CD pipeline with a focus on the following core areas:'
  prefs: []
  type: TYPE_NORMAL
- en: Managing source code using Cloud Source Repositories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and creating container images using Cloud Build
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pushing container images and artifacts using Container Registry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Orchestrating containers and deploying workloads using Google Kubernetes Engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Source code management is the first step in a **Continuous Integration** (**CI**)
    flow. Code is stored in a source code repository; a common repository that stores
    code and allows developers to make code changes (if required in isolation) and
    merge changes from multiple contributors into a single common stream. The most
    common examples of a source code repository include GitHub and Bitbucket. **Cloud
    Source Repositories** (**CSR**) is a service from Google Cloud that provides the
    functionality of source code management through private Git repositories and easily
    integrates to several Google Cloud services such as Cloud Build, Cloud Monitoring,
    and Cloud Logging.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Key features**: Managed private Git repository, one-way sync with external
    repositories, universal code search, and native integration with other **Google
    Cloud Platform** (**GCP**) services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**First steps**: Create a first repository via the console or the **Command-Line
    Interface** (**CLI**) and add files to the repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**One-way sync from GitHub/Bitbucket to CSR:** Option to add a repository by
    connecting to an external repository and perform near real-time one-way sync.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Common operations**: Browse repositories, browse files, perform universal
    code search, detect security keys, and assign the right access controls.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hands-on lab**: Step-by-step instructions to integrate CSR with Cloud Functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are four main technical requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A valid GCP account to get hands-on with GCP services: [https://cloud.google.com/free](https://cloud.google.com/free).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Install Google Cloud SDK: https://cloud.google.com/sdk/docs/quickstart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Install Git: [https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Alternatively, it is possible to skip the previous two and instead install
    Cloud Shell, which includes Google Cloud SDK as well as Git: [https://cloud.google.com/shell](https://cloud.google.com/shell).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing the key features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'CSR is a service from Google Cloud to manage source code. CSR provides Git
    version control and supports the collaborative development of any application
    or service. Key features include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fully managed private Git repository**: This feature implies that there is
    no need to manage the infrastructure required to host the source code repository.
    Developers can instead focus on building, testing, deploying, and debugging code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Provides one-way sync with GitHub and Bitbucket**: In situations where developers
    use either GitHub or Bitbucket as their primary cloud source repository, enabling
    integration with other GCP services such as App Engine, Cloud Functions, Cloud
    Monitoring, and Cloud Logging is not as straight forward in comparison to using
    GCP''s CSR. For example, it easy to deploy code to a serverless service in GCP
    such as Cloud Functions from CSR directly then GitHub or Bitbucket instead. In
    addition, the one-way sync feature performs a one-way mirror, essentially making
    a near real-time copy of a repository from GitHub or Bitbucket into GCP''s CSR.
    This facilitates the ease of native integration with GCP services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Includes universal code search**: This feature allows you to perform a code
    search within the code source repository or across repositories. Search can also
    be scoped to a specific project or repository or even a specific directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integration with GCP services**: This feature allows native integration with
    multiple GCP services such as Cloud Build, Cloud Operations, Cloud Functions,
    and Cloud Run. For example, the logs related to operations against CSR are automatically
    sent to Cloud Logging. The user, however, requires relevant **Identity Access
    Management** (**IAM**) roles to access Cloud Logging in order to view logs related
    to CSR.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identity Access Management (IAM)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: IAM is a framework of roles and policies to ensure users and applications have
    the required access to resources specifically recommended within the principles
    of least privilege.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Each of the previously mentioned features will be discussed in detail later
    in this chapter. The upcoming section details the step-by-step process involved
    to create and access a repository in CSR.
  prefs: []
  type: TYPE_NORMAL
- en: First steps – creating and accessing a repository in CSR
  prefs: []
  type: TYPE_NORMAL
- en: One of the first steps to perform while working with CSR is to actually create
    a repository and add files to it. Given that CSR is a managed repository, the
    user need not manage the space required to host the repository or the computational
    power required to maintain or run operations against the repository.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will see how we can create a repository in CSR from Google
    Cloud Console and the command line. In addition, we'll learn how to add files
    to a branch in an empty repository and then merge to the master. Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a repository via Google Cloud Console
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following is a step-by-step process to create our first repository in CSR
    through Google Cloud Console:'
  prefs: []
  type: TYPE_NORMAL
- en: Enable the CSR API (*Figure 5.1*) by navigating to the **Library** sub-section
    under the **APIs & Services** section:![Figure 5.1 – Enabling the CSR API
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15587_05_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.1 – Enabling the CSR API
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate to **Source Repositories** within GCP and select the **Get Started**
    option. The system will display a prompt (*Figure 5.2*) and provide an option
    to create a repository. However, if a repository already exists in CSR, skip to
    *step 3* and use the **Add a Repository** option instead:![Figure 5.2 – Option
    to create your first repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15587_05_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.2 – Option to create your first repository
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The system will prompt to add a repository by providing two options (*Figure
    5.3*) – to either create a new repository or connect to an external repository.
    In this case, select the option to create a new repository:![Figure 5.3 – Option
    to create a new repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15587_05_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.3 – Option to create a new repository
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a repository by entering a repository name. Additionally, select a project
    under which the repository should be created (*Figure 5.4*):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.4 – Creating a new repository'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15587_05_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.4 – Creating a new repository
  prefs: []
  type: TYPE_NORMAL
- en: This will create a new repository from the console. However, there will be situations
    where it is required to create a repository through scripts and that means through
    the command line. This is specifically recommended when automation is at the forefront
    and the goal is to eliminate toil. The upcoming topic details how to create a
    repository via the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a repository via the CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a cloud source repository via the command line or CLI, execute the
    following commands. It is required to either install Google Cloud SDK or use Google
    Cloud Shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding steps will create a new repository from the CLI. Essentially,
    the new repository created in CSR from either the console or the CLI will be an
    empty repository. The next topic will detail how to add files to a repository
    in CSR.
  prefs: []
  type: TYPE_NORMAL
- en: Adding files to a repository in CSR
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once a repository is created, developers can create a branch and make their
    changes inside that branch. These changes can then be merged into the master once
    confirmed. This is a multi-step process (as detailed in the following procedure)
    that could be executed from the user''s terminal window with Google Cloud SDK
    installed or via Google Cloud Shell from the user''s choice of browser:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Clone the repository to a local Git repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Switch to the new local Git repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new branch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a file to the new branch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Commit changes of the new file to the branch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Push changes to the branch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a master branch (as this is the first check into `master`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Merge the branch to `master`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This completes this section and you can now create an empty repository and subsequently
    add files to a working branch and then check into the master. However, there will
    be situations where the user can work with either an existing repository in GCP's
    CSR or external source repositories in GitHub/Bitbucket. Either way, the process
    to clone an existing repository is the same. In addition, CSR allows one-way sync
    from external repositories such as GitHub/Bitbucket. All these details will be
    covered in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: One-way sync from GitHub/Bitbucket to CSR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CSR provides an option to add a repository by connecting to an external repository
    and perform near real-time one-way sync. Currently, GitHub and Bitbucket are the
    only supported external source repositories.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the step-by-step process to create a repository in CSR by
    connecting to an external GitHub repository (similar steps will apply to a Bitbucket-based
    repository):'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Source Repositories** in Google Cloud Console and select the **Add
    Repository** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the option to connect to an external repository (*Figure 5.5*):![Figure
    5.5 – Option to connect to an external repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15587_05_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.5 – Option to connect to an external repository
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select an appropriate project and an external Git provider (**GitHub** in this
    case) and authorize the selected GCP project to store third-party authentication
    credentials in order to enable connected repository services (*Figure 5.6*):![Figure
    5.6 – Connecting to GitHub
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15587_05_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.6 – Connecting to GitHub
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enter your GitHub credentials and authorize GCP to access the provided GitHub
    account (*Figure 5.7*):![Figure 5.7 – Authorizing GCP to access GitHub
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15587_05_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.7 – Authorizing GCP to access GitHub
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once authorized, select the GitHub repo that needs to be synced with CSR and
    then select the **Connect selected repository** action (*Figure 5.8*):![Figure
    5.8 – Connecting GCR to the selected GitHub repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15587_05_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.8 – Connecting GCR to the selected GitHub repository
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The following prompt (*Figure 5.9*) will be displayed once the connection is
    established between the GitHub repo and GCP's CSR. The first-time sync might take
    some time, but subsequent syncs are near real-time:![Figure 5.9 – Confirmation
    that one-way sync is established with GitHub
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15587_05_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.9 – Confirmation that one-way sync is established with GitHub
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The contents of the GitHub repo will eventually sync up with CSR and that also
    includes the commit history and any other available metadata (*Figure 5.10*):![Figure
    5.10 – Contents of the newly added GitHub repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15587_05_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.10 – Contents of the newly added GitHub repository
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the user adds a new file to the GitHub repo, then a near real-time one-way
    sync will be performed by CSR. The commit along with the recent changes will reflect
    in CSR against the relevant project. *Figure 5.11* highlights the new commit history:![Figure
    5.11 – Updating the commit history post a near real-time one-way sync
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15587_05_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.11 – Updating the commit history post a near real-time one-way sync
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If there is a need to perform forced sync from an external repository to CSR
    or disconnect the external repository from CSR, navigate to the repository settings
    in GCP to find the appropriate options (*Figure 5.12*):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.12 – Repository settings to force a sync or disconnect from GitHub'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15587_05_12.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.12 – Repository settings to force a sync or disconnect from GitHub
  prefs: []
  type: TYPE_NORMAL
- en: This completes the detailed step-by-step process of establishing one-way sync
    with external repositories such as GitHub/Bitbucket. The next section dives into
    some common operations that a user can perform in CSR, such as browsing repositories
    and files and performing universal code search.
  prefs: []
  type: TYPE_NORMAL
- en: Common operations in CSR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section details the common operations that could be performed in CSR.
    The options include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Browse repositories.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browse files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform a universal code search.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detect security keys.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assign access controls.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's go through them in detail starting with the browsing repositories option.
  prefs: []
  type: TYPE_NORMAL
- en: Browsing repositories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two specific views to browse repositories. These views are represented
    across two tabs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**All repositories**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**My source**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All repositories
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: CSR shows a consolidated view of all available repositories across projects
    that the current user has access to. The combination of repository name and project
    ID forms a unique tuple.
  prefs: []
  type: TYPE_NORMAL
- en: 'The user can also mark repositories of choice (typically the most important
    or most constantly used) with a star. All starred repositories will show up under
    the **My source** tab to provide quick access to specific repositories (*Figure
    5.13*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.13 – List of repositories listed under All repositories'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15587_05_13.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.13 – List of repositories listed under All repositories
  prefs: []
  type: TYPE_NORMAL
- en: 'Users can perform three specific operations against any repository displayed
    under the **All repositories** tab (refer to the green square box in *Figure 5.13*,
    in the following order):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Settings**: This option allows the user to edit settings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Clone**: This option provides details required to clone the repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Permissions**: This option allows you to control access to a repository either
    at the level of a user or a group or service account.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user can access a repository by selecting a repository of choice from the
    list view or they can pick one from the tree view (via the drop-down control for
    **All repositories**).
  prefs: []
  type: TYPE_NORMAL
- en: My source
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The repositories that are starred in the **All repositories** section are listed
    to provide quick access to a user-selected subset. Additionally, recently viewed
    repositories (that may or may not be starred) are also listed and can be accessed
    with a click (*Figure 5.14*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.14 – Contents of My source displaying starred and recently viewed
    repositories'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15587_05_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.14 – Contents of My source displaying starred and recently viewed repositories
  prefs: []
  type: TYPE_NORMAL
- en: This concludes the details on how a user can browse through the repositories
    in CSR. The next topic focuses on browsing files within a specific repository.
  prefs: []
  type: TYPE_NORMAL
- en: Browsing files
  prefs: []
  type: TYPE_NORMAL
- en: 'Once a user selects a repository to browse, the default view switches to the
    master branch. The user can view the list of files through a tree-like structure
    (on the left-hand side) and selecting any file will display the contents of the
    file (on the right-hand side). The user can also edit a file by using the **Edit
    code in Cloud Shell** option. At this point, the file will be opened in the Cloud
    Shell Editor (*Figure 5.15*) using the credentials associated with the project.
    The authentication happens automatically with no additional login:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.15 – Options to view/edit file contents'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15587_05_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.15 – Options to view/edit file contents
  prefs: []
  type: TYPE_NORMAL
- en: 'The user can also switch to an existing branch by selecting the branch of choice
    (*Figure 5.16*). In addition, the user can view files by a specific tag or commit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.16 – Options to switch branch or browse files by tag or commit'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15587_05_16.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.16 – Options to switch branch or browse files by tag or commit
  prefs: []
  type: TYPE_NORMAL
- en: 'If a user wants to view historical changes for a specific file, then they can
    view the change information either through the **Blame** panel (on the top right-hand
    side) or through the **History** sub-section (*Figure 5.17*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.17 – Historical change information for a specific file in CSR'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15587_05_17.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.17 – Historical change information for a specific file in CSR
  prefs: []
  type: TYPE_NORMAL
- en: This concludes the details on how a user can browse through files within a specific
    repository. The next topic focuses on how a user can perform a universal code
    search within a repository or across repositories in CSR.
  prefs: []
  type: TYPE_NORMAL
- en: Performing a universal code search
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CSR provides the ability to search code snippets or files through the search
    box located on the CSR console. The user can search by typing text (preferably
    within double quotes) or by using regular expressions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The scope of the search can be set to one of four possible levels (*Figure
    5.18*):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Everything**: Search across all repositories that the user has access to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**This project**: Search across all repositories in the current project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**This repository**: Search across the current repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**This directory**: Search across the current directory:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 5.18 – Possible scopes to perform universal code search'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15587_05_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.18 – Possible scopes to perform universal code search
  prefs: []
  type: TYPE_NORMAL
- en: The next topic covers the possible ways to perform a code search based on different
    filter criteria and their respective syntaxes.
  prefs: []
  type: TYPE_NORMAL
- en: Search filters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following table lists some search filters that can be used to search for
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15587_05_Table_5.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This concludes the details on how a user can perform a universal code search.
    The next topic focuses on a specific feature in CSR that can specifically enforce
    a policy to detect security keys when a user attempts to make a code commit.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting security keys
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CSR provides options to detect whether security keys are stored in a repository.
    If this feature is enabled, CSR will enforce this check when a user is trying
    to push code into the repository either to a branch or master. If the contents
    of the file include a security key, then the code will not be pushed, and the
    user will be notified.
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently, CSR can be set up to check for the following types of security keys:'
  prefs: []
  type: TYPE_NORMAL
- en: Service account credentials in JSON format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PEM-encoded private keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following commands will provide the ability to enable, disable, or override
    security key detection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This concludes the details on how security keys can be detected during a code
    commit. The next topic focuses on the required access controls to perform operations
    in CSR.
  prefs: []
  type: TYPE_NORMAL
- en: Assigning access controls
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Access to repositories can be assigned at either the project level or the repository
    level. If a user is assigned a specific role at the project level, then that role
    will be applied to the user for all repositories in that project. However, if
    a user is assigned a specific role for a specific repository, then it only applies
    to that repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table summarizes the critical IAM roles required to access or
    perform actions on CSR:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15587_05_Table_5.2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The next topic provides information on how cross-account project access can
    be set up.
  prefs: []
  type: TYPE_NORMAL
- en: Cross-account project access
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If a user is part of project A but needs to access a specific repository in
    project B, then the user should be given the Source Repository Reader/Writer/Admin
    role, depending on the intended scope of the user from project A against a specific
    repository in project B. This can be achieved through the **Permissions** section
    under the repository settings.
  prefs: []
  type: TYPE_NORMAL
- en: This concludes the details on access controls specific to CSR. This also brings
    us to the end of a major section focused on common operations that users can perform
    in CSR. The upcoming section is a hands-on lab where a cloud function is deployed
    using the code hosted in a cloud source repository.
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on lab – integrating with Cloud Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The objective of this hands-on lab is to demonstrate the integration between
    a GCP compute service such as Cloud Functions with CSR. The intent is to illustrate
    how code can be deployed in Cloud Functions by pulling the code hosted from CSR.
    The following is a summary of the steps at a high level:'
  prefs: []
  type: TYPE_NORMAL
- en: Add code to an existing repository through the Cloud Shell Editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push code from the Cloud Shell Editor (local repository) into CSR.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a cloud function and deploy code from the repository in CSR.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding code to an existing repository through the Cloud Shell Editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This sub-section specifically focuses on adding code to an existing repository.
    Developers typically use their favorite editors to make code changes. The following
    shows the usage of GCP''s Cloud Shell Editor, an online development environment
    that supports cloud-native development through the Cloud Code plugin along with
    language support for Go, Java, .NET, Python, and Node.js:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Source Repositories** in the GCP console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the repository of choice where you want to add code. You can use
    the `my-first-csr` repository that was previously created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Edit in Cloud Shell** action. This opens the code in the Cloud
    Shell Editor and also clones the code from CSR into a local repository under the
    Cloud Shell console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new code file called `main.py`. Copy the contents of this file from [https://github.com/PacktPublishing/Google-Cloud-Platform-for-DevOps-Engineers/blob/main/cloud-build/main.py](https://github.com/PacktPublishing/Google-Cloud-Platform-for-DevOps-Engineers/blob/main/cloud-build/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the code file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the code is edited and added, the next step is to push the code into CSR.
    This will be covered as the next topic.
  prefs: []
  type: TYPE_NORMAL
- en: Pushing code from the Cloud Shell Editor (local repository) into CSR
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This sub-section specifically focuses on pushing code from a local repository
    of the Cloud Shell Editor into CSR. A terminal can be opened within Cloud Shell
    to provide command-line instructions. A command-line approach to push code is
    elaborated on in the following procedure:'
  prefs: []
  type: TYPE_NORMAL
- en: Switch to the console window in the Cloud Shell Editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Perform Git operations to add the new file and commit the changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Push the local repository created in the Cloud Shell Editor with the new changes
    into the repository hosted in CSR. Indicate the appropriate project (after `/p`)
    and the destination repository in CSR (after `/r`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Navigate to the target repository (for example, `my-first-csr`) in CSR to view
    the newly added Python file, `main.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the code is pushed to CSR from the remote branch, the code will be available
    in the master and is now ready to be deployed into any compute option of choice.
    The next topic illustrates the steps involved to download source code from CSR
    and deploy it into GCP''s serverless compute option: Cloud Functions.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a cloud function and deploying code from the repository in CSR
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This sub-section specifically illustrates how CSR can integrate with other
    GCP compute options such as Cloud Functions:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Cloud Functions** in the GCP console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the option to create a function (if a function is created for the very
    first time in a project, then this action will enable the Cloud Functions API).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter a function name of your choice and select a region, trigger type, and
    authentication mode. Save the options and continue. The following are examples:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) `my-first-csr`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) `us-central1`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) `HTTP`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) `Allow unauthenticated invocations`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Set the runtime as **Python 3.8** and the source code option as **Cloud Source
    Repository**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter details related to the repository from which the code needs to be deployed
    and select the `hello_world` as the value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: b) `my-first-csr` as the value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) `master` as the value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'd) `/` as the value:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.19 – Configuring the cloud source repository as the source code
    option'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15587_05_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 5.19 – Configuring the cloud source repository as the source code option
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The function will be successfully deployed (*Figure 5.20*). The function can
    be tested either using the **Test Function** option under **Actions** in the list
    page or through the trigger URL specified under the **Details** section of the
    cloud function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.20 – Cloud function successfully deployed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15587_05_20.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.20 – Cloud function successfully deployed
  prefs: []
  type: TYPE_NORMAL
- en: This completes a detailed lab where the user makes a code change using GCP's
    Cloud Shell Editor, pushes to a repository using GCP's CSR, and deploys code to
    one of GCP's compute options such as Cloud Functions.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed the service from Google Cloud to manage source
    code and provide Git version control to support collaborative development. This
    is the first key building block in the process of establishing a CI/CD process.
    In addition, we discussed various operations that can be performed in CSR along
    with a hands-on lab demonstrating native integration of CSR with Cloud Functions.
    The next chapter will focus on the services from Google Cloud required to build
    code, create image artifacts, and manage artifacts. These services include Cloud
    Build and Container Registry.
  prefs: []
  type: TYPE_NORMAL
- en: Points to remember
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are some important points to remember:'
  prefs: []
  type: TYPE_NORMAL
- en: CSR is a fully managed private Git repository.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSR provides one-way sync with GitHub and Bitbucket.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSR provides a feature for universal code search and the search can be set either
    for a specific project, a specific repository, a specific directory, or everything.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSR can be set up to detect security keys. The currently supported types are
    service account credentials in JSON format and PEM-encoded private keys.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSR provides a feature to override security key detection at a commit level.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Source Repository Reader/Writer/Admin are the supported access controls.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For more information on GCP''s Cloud Source Repositories, refer to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cloud Source Repositories**: [https://cloud.google.com/source-repositories](https://cloud.google.com/source-repositories
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Practice test
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the command that can be used to create a new repository in CSR called
    `my-first-csr` through the CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) `gcloud create source repos my-first-csr`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) `gcloud source repos create my-first-csr`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) `gcloud create source repos my-first-csr`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) `gcloud source repo create my-first-csr`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Which of the following options allows one-way sync with CSR?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) GitHub
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Bitbucket
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) None of the above
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Options *a* and *b*
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select the frequency of one-way sync from supported repository types to CSR:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Every 5 minutes
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Configurable
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Real-time
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Near real-time
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Which of the following is not a supported search filter in CSR?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Search file contents
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Search by language
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Search by function
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Search by including terms
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the `git add`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: c) `git push`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) `git commit`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select the command to override security key detection at a commit level:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) `git push -o keycheck`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) `git push -o nokeycheck`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) `git push -o anykeycheck`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) `git push -o nonekeycheck`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Select two commands to enable and disable security key detection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) `gcloud source project-configs update --enable-codeblock`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) `gcloud source project-configs update --enable-pushblock`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) `gcloud source project-configs update --disable-codeblock`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) `gcloud source project-configs update --disable-pushblock`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Which out of the following is not a valid access control with respect to CSR?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Source Repository Reader
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Source Repository Writer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Source Repository Editor
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Source Repository Admin
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Which out of the following access controls can update a repository but cannot
    create one?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Source Repository Reader
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Source Repository Writer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Source Repository Editor
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Source Repository Admin
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Which out of the following access controls can update repository configurations?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a) Source Repository Reader
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: b) Source Repository Writer
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: c) Source Repository Editor
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: d) Source Repository Admin
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: (b) – `gcloud source repos create "my-first-csr"`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (d) – Options *a* and *b*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (d) – Near real-time
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (d) – Search by including terms
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (d) – `git commit`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (b) – `git push -o nokeycheck`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (b) – `gcloud source project-configs update --enable-pushblock` and (d) – `gcloud
    source project-configs update --disable-pushblock`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (c) – Source Repository Editor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (b) – Source Repository Writer
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (d) – Source Repository Admin
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
