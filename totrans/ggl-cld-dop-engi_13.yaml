- en: '*Appendix:* Getting Ready for Professional Cloud DevOps Engineer Certification'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is a practical guide to learning about and understanding **site reliability
    engineering** or **SRE**, which is a prescriptive way of implementing DevOps.
    The book also provides deep insights into the Google Cloud services that are critical
    to implementing DevOps on Google Cloud Platform.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, the book also helps in preparing for the Professional Cloud DevOps
    Engineer Certification exam. A professional Cloud DevOps engineer is responsible
    for efficient development operations and balancing service reliability and delivery
    speed. They are skilled at using Google Cloud Platform to build software delivery
    pipelines, deploy and monitor services, and manage and learn from incidents. The
    official exam guide can be found at [https://cloud.google.com/certification/guides/cloud-devops-engineer](https://cloud.google.com/certification/guides/cloud-devops-engineer).
    To register for the certification exam, go to [https://cloud.google.com/certification/register](https://cloud.google.com/certification/register).
  prefs: []
  type: TYPE_NORMAL
- en: At a high level, the certification is centered around SRE, **Google Kubernetes
    Engine** (**GKE**), and Google Cloud's operations suite. These topics probably
    make up more than 80% of the certification exam. The chapters on SRE, GKE, and
    Google Cloud's operations suite extensively cover key concepts assessed in the
    Professional Cloud DevOps Engineer Certification exam. The *Points to remember*
    section and the practice test toward the end of this chapter should help you revise
    the critical concepts from this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, three additional topics that might come up on the certification
    exam will be covered at a high level. Some of these topics overlap with other
    certification exams from Google, such as Professional Cloud Architect Certification
    or Professional Cloud Developer Certification.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the topics that will be summarized. Please note that these
    topics are not completely elaborated on here but rather only introduced. It is
    recommended to refer to the specific documentation on these topics for in-depth
    information:'
  prefs: []
  type: TYPE_NORMAL
- en: Cloud Deployment Manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud Tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spinnaker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud Deployment Manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Infrastructure as Code** (**IaC**) is the process of managing and provisioning
    infrastructure through code instead of manually creating the required resources.
    **Cloud Deployment Manager** is a Google Cloud service that provides IaC. Cloud
    Deployment Manager can create a set of Google Cloud resources and facilitates
    managing these resources as a unit otherwise called a deployment. For example,
    it is possible to create a **Virtual Private Cloud** (**VPC**) using declarative
    code through a configuration file rather than manually creating it through the
    console. The following are some critical properties of Cloud Deployment Manager:'
  prefs: []
  type: TYPE_NORMAL
- en: Can create multiple resources in parallel, such as multiple VMs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can provide input variables to create a resource with specific user-defined
    values as required
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can get the return value of a newly created resource, such as the instance ID
    of a newly created Google Compute Engine instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can create dependencies where one resource definition can reference another
    resource and one resource can be created after creating another resource (using
    `dependsOn`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud Deployment Manager allows specifying all the resources required for an
    application through a configuration file. This is the first step for implementing
    Cloud Deployment Manager. This configuration file is written in a declarative
    format using YAML.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each configuration file can be used to define one or more resources. Each resource
    section consists of three main components: the name of the resource, the resource
    type, and the resource properties. The resource properties that need to be used
    are in most cases specific to the resource type. The resources specified in the
    configuration file are created by making API calls (which could introduce a slight
    risk as certain APIs could be deprecated in the future). The configuration file
    can either be completely spelled out or Cloud Deployment Manager allows the usage
    of templates (which are preferred for creating similar types of resources).'
  prefs: []
  type: TYPE_NORMAL
- en: A configuration can contain templates that refer to parts of the configuration
    file that is abstracted to individual building blocks. A template file is written
    in either Python or Jinja2\. Python templates are more powerful and provide the
    option to programmatically create or manage templates. Jinja2 is a simpler but
    less powerful templating language that uses the same syntax as YAML. A preview
    mode (using the `--preview` flag) can be used to verify the potential operations
    on the resources before they are applied. For more information on Cloud Deployment
    Manager, refer to [https://cloud.google.com/deployment-manager](https://cloud.google.com/deployment-manager).
  prefs: []
  type: TYPE_NORMAL
- en: Cloud Tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cloud Tasks** is a fully managed service from Google Cloud that allows you
    to separate out pieces of work that could be performed independently and asynchronously
    outside of a user or a service-to-service request. An independent piece of work
    is referred to as a task. Cloud Tasks is essentially used when an application
    accepts inputs from users and needs to initiate background tasks accordingly to
    perform automated asynchronous execution.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a summary of the critical features of Cloud Tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Cloud Tasks is aimed at explicit invocation, where the publisher retains full
    control of execution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud Tasks is most appropriate where the task producer can have control over
    the execution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The core difference between Cloud Tasks and Pub/Sub is the notion of explicit
    versus implicit invocation. As mentioned, Cloud Tasks is aimed at explicit invocation.
    In contrast, Pub/Sub supports implicit invocation, where a publisher implicitly
    causes the subscriber to execute by publishing an event. For more in-depth information
    on Cloud Tasks, refer to [https://cloud.google.com/tasks](https://cloud.google.com/tasks).
  prefs: []
  type: TYPE_NORMAL
- en: Spinnaker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Spinnaker** is an open source, multi-cloud continuous delivery platform that
    was initially developed by Netflix and later extended by Google. Spinnaker is
    not an official Google Cloud service. Spinnaker is not a natively integrated service,
    and no such native service exists yet from Google Cloud Platform for continuous
    deployment. Spinnaker is extensively recommended by Google to implement CI/CD
    pipelines on Google Cloud Platform. Spinnaker helps to release software changes
    at high velocity and with confidence. Spinnaker is composed of several independent
    microservices. Spinnaker creates a Cloud Storage bucket and uses a Redis database
    to maintain its assets. Spinnaker also creates a Pub/Sub topic.'
  prefs: []
  type: TYPE_NORMAL
- en: Spinnaker can be considered an application management tool where it is possible
    to view and manage GKE components, including workload resources, services, and
    load balancers. Spinnaker can support multiple deployment models, including rolling
    update, blue/green, or canary.
  prefs: []
  type: TYPE_NORMAL
- en: Spinnaker puts everything in an auto-pilot mode where there is no need for manual
    intervention, or in other words, no need to manually execute `kubectl` commands.
    Spinnaker can create and manage YAML files and can perform automated deployments
    or even create/execute YAML files for load balancers as a service. The only manual
    step involved is to provide approval to complete deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows a high-level summary in terms of interactions specifically
    when Spinnaker is used to deploy to a GKE cluster:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B15587_Appendix_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Illustration of interactions when Spinnaker is used to deploy to GKE
  prefs: []
  type: TYPE_NORMAL
- en: 'The interactions in the preceding figure are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The developer changes the code by creating a Git tag and pushes to the cloud
    source repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The cloud source repository is configured to detect the new Git tag. This triggers
    Cloud Build to execute the build process as per the provided specification. This
    might include the running of unit tests. Once complete, a build artifact such
    as a Docker image is created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The created build artifact is stored either in Container Registry or Artifact
    Registry and once available, a message is sent to Cloud Pub/Sub if configured.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Spinnaker, installed on GKE, will be listening to a Pub/Sub topic for the newly
    created image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the image is available, Spinnaker deploys the new container to a QA/staging
    environment, preferably through canary deployment so that only a small set of
    users are impacted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Functional tests are run on the canary environment if available to verify the
    quality of the deployment. If the deployment is as per the expected standards
    in terms of quality, then after manual approval, the image is then deployed to
    the production environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is important to note that either while performing a blue/green deployment
    or a canary deployment, Spinnaker can update the ReplicaSet in place. When deploying
    a ReplicaSet with a Deployment, and the Deployment doesn't exist, Spinnaker first
    creates the ReplicaSet with `0` replicas and then creates the Deployment, which
    will resize the ReplicaSet. When the Deployment does exist, it does the same but
    edits the Deployment in place rather than creating it.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on installing and managing Spinnaker on Google Cloud Platform,
    refer to [https://cloud.google.com/docs/ci-cd/spinnaker/spinnaker-for-gcp](https://cloud.google.com/docs/ci-cd/spinnaker/spinnaker-for-gcp).
  prefs: []
  type: TYPE_NORMAL
- en: This concludes our summary of additional topics such as Cloud Deployment Manager,
    Cloud Tasks, and Spinnaker.
  prefs: []
  type: TYPE_NORMAL
- en: You have reached the end of this book. Test your knowledge by attempting the
    mock tests. This book includes 2 mock tests of 50 questions each. These tests
    can be used as a reference. All the best if you are taking the certification exam!
  prefs: []
  type: TYPE_NORMAL
