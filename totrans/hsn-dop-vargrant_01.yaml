- en: Introduction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: You are about to embark on an exciting journey focused on Vagrant and its role
    within DevOps. Throughout these chapters, you will learn interesting and useful
    facts, as well as tips and tricks, about Vagrant. Initially, we will focus on
    the basics of Vagrant and getting it installed and running on your machine. We
    will then venture through its ins and outs, by focusing on the important parts
    of Vagrant, such as its commands, networking, multi-machine, Vagrantfiles, and
    using configuration management tools, such as Chef, Docker, and Ansible. By the
    end of this book, you will have solid foundational knowledge about Vagrant and
    the necessary skill set to start using it on a day-to-day basis as part of your
    DevOps workflow.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 您即将开始一段充满激情的旅程，专注于 Vagrant 及其在 DevOps 中的角色。在这些章节中，您将学习有关 Vagrant 的有趣和实用的信息，以及技巧和窍门。最初，我们将关注
    Vagrant 的基础知识，并在您的计算机上安装并运行它。然后，我们将深入了解 Vagrant 的方方面面，重点关注 Vagrant 的重要部分，如命令、网络、多机器、Vagrantfiles
    和使用配置管理工具（如 Chef、Docker 和 Ansible）。到本书结束时，您将对 Vagrant 有扎实的基础知识，并具备在日常 DevOps 工作流中使用它的必要技能。
- en: In this chapter, we will create a solid foundation that will help you understand
    what Vagrant is, what VirtualBox is, and how Vagrant ties into the DevOps landscape.
    We will learn about the current state of development tools in DevOps and focus
    on how Vagrant can be used by many different teams in an organisation—not just
    developers! By the end of this chapter, you will have a good understanding of
    the basics of Vagrant, VirtualBox, and DevOps.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将打下一个坚实的基础，帮助您了解 Vagrant 是什么，VirtualBox 是什么，以及 Vagrant 如何与 DevOps 环境结合。我们将学习
    DevOps 中当前开发工具的现状，并重点讨论 Vagrant 如何被组织中的许多不同团队使用——不仅仅是开发人员！到本章结束时，您将对 Vagrant、VirtualBox
    和 DevOps 的基础知识有一个清晰的理解。
- en: Getting started with Vagrant and DevOps
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 Vagrant 和 DevOps
- en: In this section, you will be introduced to Vagrant and learn about its features,
    benefits, and its role in the development tools used in the DevOps world.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将了解 Vagrant，并学习其功能、优势以及它在 DevOps 世界中开发工具中的作用。
- en: Understanding Vagrant
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Vagrant
- en: Vagrant is very simple on the surface, but is actually incredibly complex under
    the hood. It allows you to quickly and effortlessly create virtual environments
    (known as Vagrant boxes) and customize them. Vagrant easily integrates with multiple
    providers, such as VirtualBox, VMware, and Docker. These providers actually power
    the virtual environments, but Vagrant provides a customizable API to that virtual
    machine.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 表面看起来非常简单，但实际上它在后台非常复杂。它允许您快速轻松地创建虚拟环境（称为 Vagrant box）并对其进行自定义。Vagrant
    可以轻松与多个提供者集成，如 VirtualBox、VMware 和 Docker。这些提供者实际驱动虚拟环境，但 Vagrant 提供了一个可自定义的 API
    来管理这些虚拟机。
- en: Vagrant has a large selection of commands, which can be used from the command
    line/Terminal to manage virtual environments. These commands can quickly download
    and set up an environment from the Vagrant cloud, which hosts many popular environments,
    such as Ubuntu or PHP's Laravel.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 拥有大量的命令，可以通过命令行/终端来管理虚拟环境。这些命令可以快速从 Vagrant 云中下载并设置环境，Vagrant 云托管了许多流行的环境，如
    Ubuntu 或 PHP 的 Laravel。
- en: Vagrant is an important piece of software that can be found in many programmers'
    toolboxes. It is commonly used to tackle the well-known phrase, *It works on my
    machine*, by allowing everyone to have a copy of the same environment.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 是一个在许多程序员工具箱中都能找到的重要软件。它常常用于解决那个著名的说法，*在我的机器上能运行*，通过允许每个人拥有相同环境的副本来解决这个问题。
- en: Vagrant was created by Mitchell Hashimoto and released in March 2010\. Vagrant
    is now part of the HashiCorp company, which Mitchell Hashimoto cofounded in 2012
    with Armon Dadgar. Vagrant is an open source piece of software that has been built
    in the Ruby language. It is currently being licensed under the MIT license. Vagrant
    can be run on macOS, Windows, FreeBSD, and Linux.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 是由 Mitchell Hashimoto 创建的，并于 2010 年 3 月发布。Vagrant 现在是 HashiCorp 公司的一个组成部分，该公司由
    Mitchell Hashimoto 和 Armon Dadgar 于 2012 年共同创办。Vagrant 是一款开源软件，使用 Ruby 语言构建，目前采用
    MIT 许可证。Vagrant 可以在 macOS、Windows、FreeBSD 和 Linux 上运行。
- en: Vagrant is essentially another layer in the virtualization stack. It acts as
    an easily programmable interface to control virtual environments. Vagrant relies
    on a provider, such as VirtualBox, to power these environments, but it can also
    configure providers so they work in harmony – an example would be Vagrant controlling
    how much memory (RAM) an environment has.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 本质上是虚拟化堆栈中的另一层。它充当一个易于编程的接口，用于控制虚拟环境。Vagrant 依赖于一个提供者，如 VirtualBox，来运行这些环境，但它也可以配置提供者，使它们协调工作——例如，Vagrant
    控制环境的内存（RAM）大小。
- en: Vagrant features
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vagrant 功能
- en: Vagrant offers many features to help you build and configure virtual environments.
    Vagrant features can be split into a few key areas—Vagrantfile, boxes, networking,
    provisioning, and plugins. Vagrant can be managed in two key ways – the command
    line and a Vagrantfile. The command-line approach is often used for admin tasks,
    such as downloading/importing a new Vagrant box or deleting an old one.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 提供了许多功能，帮助你构建和配置虚拟环境。Vagrant 的功能可以分为几个关键领域——Vagrantfile、boxes、网络、配置和插件。Vagrant
    主要通过两种方式进行管理——命令行和 Vagrantfile。命令行方法通常用于管理员任务，如下载/导入新 Vagrant box 或删除旧的。
- en: Vagrantfile
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vagrantfile
- en: A Vagrantfile is a configuration file that uses the Ruby programming language
    syntax. It is easy to understand and can be quickly tested by making a change
    and then running the vagrant up command to see whether the expected results happen.
    A Vagrantfile can easily be shared and added into version control. It's lightweight
    and contains everything needed for another user to replicate your virtual environment/application.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrantfile 是一个使用 Ruby 编程语言语法的配置文件。它易于理解，并且可以通过修改配置后，运行 vagrant up 命令来快速测试是否得到预期的结果。Vagrantfile
    可以轻松共享并添加到版本控制中。它轻量且包含了其他用户复制你的虚拟环境/应用所需的一切。
- en: Boxes
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Boxes
- en: Vagrant boxes are packages that, similar to Vagrantfiles, can be shared and
    used to replicate virtual environments. Vagrant boxes can be easily downloaded
    by running the `vagrant box add` command. The Vagrant cloud offers an easily searchable
    catalogue of boxes. The Vagrant cloud provides lots of information about a box,
    such as the creator, the version, how many times its been downloaded, and a brief
    description.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant box 是类似于 Vagrantfile 的包，可以共享并用于复制虚拟环境。可以通过运行`vagrant box add`命令轻松下载
    Vagrant box。Vagrant cloud 提供了一个易于搜索的 box 目录。Vagrant cloud 提供了关于 box 的大量信息，例如创建者、版本、下载次数以及简短描述。
- en: Networking
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络
- en: 'Vagrant supports three main types of networking when creating virtual environments:
    public networks, private networks, and port-forwarding. The simplest networking
    option is port-forwarding, which allows you to access a specific port through
    the guest operating system into the Vagrant machine. Public and private networking
    are more complex and offer more configuration, but we will cover that in future
    chapters.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 在创建虚拟环境时支持三种主要的网络类型：公有网络、私有网络和端口转发。最简单的网络选项是端口转发，它允许你通过来宾操作系统访问特定的端口，并进入
    Vagrant 机器。公有和私有网络更为复杂，并提供更多配置选项，但我们将在未来的章节中讨论这些内容。
- en: Provisioning
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供配置
- en: Provisioning in Vagrant offers you a way to configure the Vagrant machine even
    more. You can install software and dependencies as the machine is being created.
    To provision a Vagrant machine, you can use shell scripting, Docker, Chef, Ansible,
    and other configuration-management software, such as Puppet.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 中的配置功能让你可以进一步配置 Vagrant 机器。你可以在机器创建过程中安装软件和依赖项。配置 Vagrant 机器时，可以使用 shell
    脚本、Docker、Chef、Ansible 以及其他配置管理软件，如 Puppet。
- en: Plugins
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插件
- en: Vagrant plugins offer another way to customize and extend the functionality
    of Vagrant. They allow you to interact with the low-level aspects of Vagrant and
    often provide new commands to be used as part of the Vagrant command line.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 插件提供了另一种定制和扩展 Vagrant 功能的方式。它们允许你与 Vagrant 的低级功能进行交互，并经常提供新的命令，作为 Vagrant
    命令行的一部分使用。
- en: Advantages of Vagrant
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vagrant 的优势
- en: Vagrant allows you to easily package up a virtual environment that can be shared
    among fellow developers. This packaged virtual environment is often referred to
    as a Vagrant box. A box can be configured to mirror the production environment
    where your web application or code will be running. This can help minimize any
    bugs or issues when your application/code is deployed to the production environment.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 允许你轻松地打包一个可以在开发者之间共享的虚拟环境。这个打包的虚拟环境通常被称为 Vagrant box。可以将 Vagrant box
    配置为模拟你的 web 应用程序或代码运行的生产环境。这有助于最小化当你的应用程序/代码部署到生产环境时出现的任何 bug 或问题。
- en: The beauty of Vagrant's configuration (known as a Vagrantfile) is often small
    and can be easily edited and tested. The syntax of a Vagrantfile is easy to understand
    and offers a simple way to build a complex environment.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 配置文件（称为 Vagrantfile）的美妙之处在于它通常很小，且可以轻松编辑和测试。Vagrantfile 的语法易于理解，并且提供了一种简单的方式来构建复杂的环境。
- en: Vagrant can be used by many different members of a team, including those on
    the development team, the operations team, and the design team.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 可以被团队中的许多不同成员使用，包括开发团队、运维团队和设计团队的成员。
- en: Development team
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发团队
- en: For a developer, Vagrant can allow them to package up their code/application
    into an easily-sharable fully-fledged development environment. This can then be
    used by developers using different operating systems, such as macOS, Linux, or
    Windows.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于开发者来说，Vagrant 可以让他们将自己的代码/应用程序打包成一个易于共享的完整开发环境。这样即使是使用不同操作系统（如 macOS、Linux
    或 Windows）的开发者也可以使用该环境。
- en: Operations team
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运维团队
- en: The operations team can easily and quickly test deployment tools and scripts
    using Vagrant. Vagrant supports many popular deployment tools in the operations/DevOps
    world, such as Puppet, Docker, and Chef. Vagrant can be a cheaper and faster way
    to test deployment scripts and infrastructure topologies. Everything can be done
    locally with Vagrant or it can be used with a service such as Amazon Web Services.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 运维团队可以轻松快捷地使用 Vagrant 测试部署工具和脚本。Vagrant 支持许多运维/DevOps 世界中流行的部署工具，如 Puppet、Docker
    和 Chef。Vagrant 可以是测试部署脚本和基础设施拓扑的更便宜、更快速的方式。所有操作都可以在本地完成，或者可以与像亚马逊 Web 服务这样的服务一起使用。
- en: Design team
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计团队
- en: Vagrant allows the development team and operations team to create virtual environments
    running code, and applications ready for a designer to easily run this environment
    on their machine and start making edits to the application. There is no configuration
    required and feedback can be instant, from when a developer makes a change or
    a developer has to update the Vagrantfile.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 使开发团队和运维团队能够创建运行代码的虚拟环境，并且让应用程序准备好供设计师在自己的机器上轻松运行该环境并开始编辑应用程序。无需配置，反馈可以是即时的，从开发者进行更改到开发者更新
    Vagrantfile 都可以迅速反映。
- en: What is VirtualBox?
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 VirtualBox？
- en: VirtualBox is one of the many providers that Vagrant supports. VirtualBox is
    a powerful virtualization tool that allows you to create virtual environments
    on your existing operating system. It allows you to fully customize a virtual
    machine's hardware, such as the RAM, CPU, hard drive, audio, and graphics.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: VirtualBox 是 Vagrant 支持的众多提供商之一。VirtualBox 是一个强大的虚拟化工具，允许你在现有的操作系统上创建虚拟环境。它允许你完全自定义虚拟机的硬件，如
    RAM、CPU、硬盘、音频和图形。
- en: VirtualBox was initially released in January 2007 by the company Innotek GmbH,
    which was later acquired by Sun Microsystems, which, in turn, was acquired by
    the Oracle Corporation. Oracle is actively maintaining and releasing new versions
    of VirtualBox.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: VirtualBox 最初由 Innotek GmbH 公司于 2007 年 1 月发布，后来被 Sun Microsystems 收购，而 Sun 又被甲骨文公司（Oracle
    Corporation）收购。甲骨文公司目前正在积极维护并发布 VirtualBox 的新版本。
- en: VirtualBox is built in x86 Assembly, C++, and C. It can run and supports many
    different operating systems, such as Windows, Linux, Solaris, and OS X.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: VirtualBox 是用 x86 汇编、C++ 和 C 编写的。它可以运行并支持许多不同的操作系统，如 Windows、Linux、Solaris 和
    OS X。
- en: What is DevOps?
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 DevOps？
- en: DevOps is a popular term in the IT world at the moment. There are many different
    opinions as to what DevOps actually is. In simple terms, DevOps is the mix of
    development and operations. It is essentially creating a sort of "hybrid programmer"
    who knows about operations and infrastructure, or a system admin who understands
    programming and can develop applications.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 是当前 IT 领域的一个流行术语。关于 DevOps 到底是什么，有许多不同的看法。简单来说，DevOps 是开发和运维的结合。它本质上是在培养一种“混合型程序员”，既了解运维和基础设施，又懂得编程并能够开发应用程序，或者是一位了解编程并能够开发应用的系统管理员。
- en: DevOps is a mixture of methodologies, practices, philosophies, and software.
    DevOps streamlines the whole project life cycle by creating a workflow that works
    for all departments. There are no rules or laws in DevOps, but generally it's
    the process of connecting the developers and the infrastructure team by enabling
    an easy way to develop and ship code.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps是方法论、实践、哲学和软件的混合体。DevOps通过创建一个适用于所有部门的工作流程来简化整个项目生命周期。DevOps没有固定的规则或法律，但通常它是通过提供一种便捷的方式连接开发者与基础设施团队，进而开发和交付代码的过程。
- en: The beauty of DevOps is that any company can start following its ideas, methodologies,
    and best practices. Large companies may have a whole DevOps department/team, whereas
    smaller companies may just need one or two dedicated DevOps employees. In a start-up
    scenario, where money must be carefully budgeted, one employee may take on the
    role of developer and also DevOps.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps的魅力在于任何公司都可以开始遵循其理念、方法论和最佳实践。大公司可能会有一个完整的DevOps部门/团队，而小公司可能只需要一两个专门的DevOps员工。在创业公司中，由于必须精打细算，一个员工可能同时担任开发者和DevOps的角色。
- en: Vagrant for DevOps
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vagrant与DevOps
- en: In this chapter, you will learn about the current state of development in DevOps,
    how Vagrant fits into DevOps, and how to use Vagrant as a day-to-day DevOps tool.
    By the end of this chapter, you will have a much better understanding of how Vagrant
    can be used for development as part of the DevOps process.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，你将了解DevOps中当前的开发状态，Vagrant如何融入DevOps，并且如何将Vagrant作为日常DevOps工具使用。在本章结束时，你将更好地理解如何将Vagrant作为DevOps流程的一部分进行开发。
- en: Current state of development within DevOps
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps中的当前开发状态
- en: As mentioned previously, DevOps is a mixture of software development, operations/system
    administration, and testing/quality assurance. DevOps is not a new movement, but
    one that doesn't necessarily have a leader or a set of rules and standards to
    follow. Every company has their own idea of what DevOps is and how it should be
    implemented. Many follow similar paths or rough guidelines. Due to the lack of
    governance with DevOps, the current state of development is varied.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，DevOps是软件开发、运维/系统管理和测试/质量保证的混合体。DevOps并不是一个新的运动，但它确实没有一个明确的领导者或一套固定的规则和标准。每个公司对DevOps的理解和实施方式都有不同。很多公司遵循类似的路径或大致的指南。由于DevOps缺乏治理，当前的开发状态也呈现出多样化的局面。
- en: Traditionally, development has always been separate to the operations and server
    team, but in the last few years, we have seen many DevOps tools bridge that gap
    and make life easier for both sides.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，开发与运维和服务器团队是分开的，但近年来，我们已经看到许多DevOps工具架起了这座桥梁，使两方的工作变得更轻松。
- en: In the past, when a web developer would build a web application, they would
    code it, built it locally on their machine, and then FTP (file transfer) the files
    onto a live (production) server to then run the code—if there were any issues
    or bugs, the developer would have to make changes to the server environment and
    debug the code. There are many developers who still use this workflow and it may
    be because of their environment or because they have no choice in the matter.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 过去，当网页开发者构建一个网页应用时，他们会在本地机器上编写代码，构建应用，然后通过FTP（文件传输）将文件上传到生产服务器上运行代码——如果有任何问题或漏洞，开发者必须对服务器环境进行更改并调试代码。仍然有很多开发者使用这种工作流程，可能是因为他们的工作环境，或者是因为别无选择。
- en: 'Today, a modern web developer''s workflow may look like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，现代网页开发者的工作流程可能是这样的：
- en: The developer writes their code locally but through a virtual environment/machine
    with a tool such as Vagrant. This allows the developer to set up an environment
    such as the production one.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发者在本地编写代码，但通过像Vagrant这样的虚拟环境/虚拟机进行操作。这使得开发者能够设置一个类似于生产环境的环境。
- en: The developer edits to their code and uses version-control (such as Git or Subversion)
    to manage changes. The version-control is set up in a way that allows the developer
    to keep test/new code separate from the production code.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发者编辑代码，并使用版本控制（如Git或Subversion）来管理变更。版本控制的设置方式使得开发者能够将测试/新代码与生产代码分开。
- en: A **continuous integration** (**CI**) tool (such as Jenkins or Travis CI) is
    used to create a pipeline that often has three separate stages—development, staging,
    and production. The CI tool can be used to run tests against the software, and
    run scripts such as performing assets by combining and minifying them. The version-control
    software can be linked into the CI tool, which often triggers these builds and
    tests. When the developer pushes some new code to the staging environment, tests
    can be run before it reaches the production environment.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）工具（如Jenkins或Travis CI）用于创建一个包含三个独立阶段的流水线——开发、预发布和生产。CI工具可以用于对软件进行测试，并运行脚本，如通过合并和压缩资源文件来执行任务。版本控制软件可以与CI工具连接，通常会触发这些构建和测试。当开发者将新代码推送到预发布环境时，可以在它进入生产环境之前先运行测试。'
- en: Often, if the tests run and there are no issues, the code may be pushed directly
    into the production branch in the version control. At this point, the CI tool
    may trigger a new build, which would essentially restart the service that the
    code applies to. This could be simple or complex, depending on the production
    environment and software architecture.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通常，如果测试通过且没有问题，代码可能会直接推送到版本控制的生产分支中。在这个时点，CI工具可能会触发一个新的构建，这将本质上重新启动与该代码相关的服务。这可能很简单，也可能很复杂，取决于生产环境和软件架构。
- en: At some stages during this process, there may be manual intervention by the
    QA (quality assurance/testing) team or more senior developers who wish to check
    the code before it goes to production.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个过程中，某些阶段可能需要QA（质量保证/测试）团队或更资深的开发者进行人工干预，他们希望在代码进入生产环境之前进行检查。
- en: Of course, this is just an example workflow and will differ between companies
    and development teams. The modern workflow may seem much more complicated and
    tedious, but this is for good measure. At each stage, you'll notice there are
    checks and tests run before the code can reach a live production environment where
    real users may be interacting with that code. This can be incredibly important
    when working with financial software and other business-critical software. This
    modern workflow greatly reduces the margin of error.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这只是一个示例工作流，不同公司和开发团队的工作流会有所不同。现代的工作流看起来可能更加复杂和繁琐，但这样做是为了确保安全。在每个阶段，你会发现都会进行检查和测试，确保代码能够到达一个真实的生产环境，在那里真实用户可能与这些代码进行交互。当涉及到金融软件和其他业务关键性软件时，这一点尤为重要。现代工作流大大降低了错误的可能性。
- en: Modern development in the DevOps world is focused on speed and automation. The
    focus on speed is the ability to quickly build a feature or fix a bug and "push
    the code to production" (a phrase you might have heard!). This means that single
    developers or a team of developers have less of a barrier when working on the
    code. A developer shouldn't worry about configuring servers or environments.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当今DevOps世界中的现代开发，注重速度和自动化。速度的重点在于能够快速构建特性或修复漏洞，并将“代码推送到生产环境”（你可能听过这个词语！）。这意味着单个开发者或一个开发团队在处理代码时面临的障碍较少。开发者不应担心配置服务器或环境。
- en: Automation is a big part of DevOps, and that effects the development part too.
    You can imagine how slow a process it would be if a developer made changes to
    their code and then had to wait for a member of the operations team to manually
    run tests and scripts against their changes before letting them know the result.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化是DevOps的重要组成部分，这也影响到开发环节。你可以想象，如果开发者对代码进行修改后，还需要等操作团队的成员手动运行测试和脚本来检查这些修改，然后才会告诉开发者结果，这将是多么缓慢的一个过程。
- en: Vagrant and DevOps
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vagrant与DevOps
- en: I believe that Vagrant is a key tool in a developer's toolbox in today's DevOps-focused
    world. Vagrant is essentially a suite of tools that allows the developer to create
    code but also connect with configuration management tools, such as Puppet, Chef,
    and Ansible, that are used to automate workflows and environments on servers.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信在当今以DevOps为中心的世界里，Vagrant是开发者工具箱中的一个关键工具。Vagrant本质上是一套工具，允许开发者编写代码，同时也能与配置管理工具（如Puppet、Chef和Ansible）进行连接，这些工具用于自动化服务器上的工作流和环境。
- en: Vagrant's primary focus is on development and enables an easy way for every
    developer on the team to use the same environment. Within a Vagrant environment,
    you can run version-control that could link into the CI workflow, which allows
    you to run tests and move code into different stages.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant的主要关注点是开发，并为团队中的每个开发者提供一种轻松使用相同环境的方法。在Vagrant环境中，你可以运行版本控制，这可以与CI工作流连接，从而允许你运行测试并将代码移动到不同的阶段。
- en: Using Vagrant as a day-to-day DevOps tool
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Vagrant 作为日常 DevOps 工具
- en: Vagrant is a flexible tool that enhances day-to-day development by allowing
    you to easily test out DevOps workflow ideas. It allows you to separate your software
    code and infrastructure without having to know much about DevOps, infrastructure,
    servers, and configuration-management tools.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 是一个灵活的工具，通过让你轻松测试 DevOps 工作流的想法，增强了日常开发的便利性。它让你能够将软件代码与基础设施分开，而无需深入了解
    DevOps、基础设施、服务器和配置管理工具。
- en: 'As a day-to-day DevOps tool, Vagrant can be used for many things, including
    the following:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 作为日常 DevOps 工具，Vagrant 可以用于许多任务，包括以下内容：
- en: Testing software code in different environments and operating systems
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在不同的环境和操作系统中测试软件代码
- en: Testing different workflows using configuration-management tools, such as Chef
    and Puppet
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用配置管理工具（如 Chef 和 Puppet）测试不同的工作流
- en: Working in the same environment as other developers in your team/company
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与团队/公司中的其他开发人员在相同的环境中工作
- en: Easily make changes to Vagrant and see the results instantly
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻松修改 Vagrant 配置并立即查看结果
- en: Running multiple environments/virtual environments to test out networking, file-sharing,
    and other multi-server use cases
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行多个环境/虚拟环境来测试网络、文件共享和其他多服务器用例
- en: Summary
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小结
- en: In this chapter, we learned that Vagrant is a very powerful and flexible tool
    for helping create virtual environments that can mimic staging and development
    environments used by your business or application. We looked at the current development
    state of DevOps, how Vagrant fits into that, and how to use Vagrant as a day-to-day
    development tool.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解到 Vagrant 是一个非常强大且灵活的工具，帮助创建可以模拟业务或应用程序使用的暂存和开发环境的虚拟环境。我们探讨了 DevOps
    的当前发展状态，Vagrant 在其中的作用，以及如何将 Vagrant 用作日常开发工具。
- en: In [Chapter 2](part0041.html#173720-d86fec2f29de42f086efd11bc5538d9c), *Installing
    VirtualBox and Vagrant*, we will install Vagrant and its provider, VirtualBox.
    We will look at how to install these pieces of software on a Windows, Mac, and
    Linux machine. You will also learn how to find out your system's version and its
    CPU architecture.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](part0041.html#173720-d86fec2f29de42f086efd11bc5538d9c)，*安装 VirtualBox
    和 Vagrant*中，我们将安装 Vagrant 及其提供程序 VirtualBox。我们将介绍如何在 Windows、Mac 和 Linux 机器上安装这些软件。你还将学会如何查看系统的版本及其
    CPU 架构。
