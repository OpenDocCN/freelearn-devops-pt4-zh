- en: Command Line-Interface - Vagrant Commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn how to control Vagrant through its various commands
    and sub-commands. Vagrant has no graphical user interface so we will be running
    the commands through a Terminal/Command Prompt. By the end of this chapter, you
    will have a strong fundamental knowledge of the Vagrant commands and their uses.
    We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Vagrant commands, sub-commands, and flags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Formatting commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: General Vagrant commands and sub-commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vagrant's configuration commands and sub-commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Day-to-day Vagrant commands and sub-commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application-specific Vagrant commands and sub-commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troubleshooting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vagrant command overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vagrant is primarily a command-line only tool. By default, there is no graphical
    user interface, although it is possible to find a few third-party ones online.
    Vagrant offers a simple and powerful collection of over 25 commands and sub-commands.
  prefs: []
  type: TYPE_NORMAL
- en: To get started with Vagrant commands, open up your Command Prompt / Terminal
    and run the `vagrant --help` command. You should now see a list of common commands,
    these include  `box`, `destroy`, and `status`.
  prefs: []
  type: TYPE_NORMAL
- en: To view the fill list of available and less-commonly-used commands, run  `vagrant
    list-commands`. You will now see a larger list of commands with a brief explanation
    about each one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get more information on a specific command and to view its sub-commands,
    add the `--help` flag at the end of the command you want to learn more about.
    An example is `vagrant box --help`, which would return the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00010.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'When a command has sub-commands available, you can also add the `--help` flag
    to that sub-command to learn more. In this case, our command would be `vagrant
    box add --help`, which would return:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00011.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the screenshot, there is a wealth of information available
    about this sub-command. Vagrant is very well-documented and anything that you
    cannot find via the command-line/Terminal, you should be able to find on the Vagrant
    website:[ https://www.vagrantup.com/](https://www.vagrantup.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Vagrant commands in depth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn about all of the available Vagrant commands
    and sub-commands. We will explore the most common commands and what each one does.
    We will look at errors with regards to commands and how to overcome them.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will split the commands and sub-commands into the following four categories:'
  prefs: []
  type: TYPE_NORMAL
- en: General
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Day-to-day
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application-specific
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this section, you will have a good understanding of which commands
    and sub-commands are available, what they do, and how you can use them on a daily
    basis.
  prefs: []
  type: TYPE_NORMAL
- en: A brief note on formatting commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, I will use certain keywords as placeholders. These placeholders
    are for you to enter values into the commands and sub-commands. A typical placeholder
    will look like this: `[INSERT VALUE]`. An example would be `vagrant login --user
    [INSERT VALUE]`, where `[INSERT VALUE]` would be something such as `myusername`
    and the final command that you input would be `vagrant login --user myusername`.
    There is no need for capital letters or square brackets.'
  prefs: []
  type: TYPE_NORMAL
- en: When you see the `[VMNAME]` placeholder, this refers to a specific Vagrant machine
    name that you want to run the command against on your system. The default Vagrant
    machine is called `default`, so an example command would be `vagrant resume default`,
    which would resume the machine from a suspended state.
  prefs: []
  type: TYPE_NORMAL
- en: General Vagrant commands and sub-commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The general commands and sub-commands in Vagrant are not category-specific.
    They may only get used once or serve an incredibly specific purpose.
  prefs: []
  type: TYPE_NORMAL
- en: The list-commands command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `list-commands` command will list all available commands within the main
    `vagrant` command scope. It will alphabetically list each command and give a brief
    description.
  prefs: []
  type: TYPE_NORMAL
- en: Options/flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is only one flag for this command, `-h`/`--help`, which will print the
    help screen for this command.
  prefs: []
  type: TYPE_NORMAL
- en: An example is the `vagrant list-commands --help` command.
  prefs: []
  type: TYPE_NORMAL
- en: The help command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `help` command will show you the correct syntax for a command and list a
    selection of the most popular Vagrant commands.
  prefs: []
  type: TYPE_NORMAL
- en: The version command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `version` command will return the version of Vagrant that is currently installed
    on your system, the latest version available online, and supply a website URL
    to the downloads page of the Vagrant website.
  prefs: []
  type: TYPE_NORMAL
- en: Options/flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is only one flag for this command, `-h`/`--help`, which will print the
    help screen for this command.
  prefs: []
  type: TYPE_NORMAL
- en: An example is the `vagrant version --help` command.
  prefs: []
  type: TYPE_NORMAL
- en: The global-status command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `global-status` command will return information about all of the Vagrant
    environments associated with the current user. It will return the Vagrant environment
    ID, name, provider, state, and directory. This command can be useful for giving
    you an overview into what is happening on your system with the Vagrant environments.
  prefs: []
  type: TYPE_NORMAL
- en: Options/flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two flags for this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-h`/`--help`: Prints the help screen for this command'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--prune`: Prunes any invalid entries'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example is the `vagrant global-status --help` command.
  prefs: []
  type: TYPE_NORMAL
- en: Vagrant's configuration commands and sub-commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at Vagrant's configuration commands and sub-commands.
    These are often used to configure Vagrant, such as installing a package or taking
    a snapshot of an environment.
  prefs: []
  type: TYPE_NORMAL
- en: The login command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `login` command is used to log into your HashiCorp Vagrant Cloud account.
    Logging into the Vagrant Cloud will allow you to access and download protected
    boxes and the Vagrant Share service, which allows you to share your Vagrant environment
    with anyone.
  prefs: []
  type: TYPE_NORMAL
- en: Options/flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are six flags for this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-c`/`--check`: Checks to see whether you are already logged in'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-d`/`--description [INSERT VALUE]`: Takes a parameter to set a description
    of the token'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-k`/`--logout`: Logs you out if you are already logged in'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-t`/`--token [INSERT VALUE]`: Takes a parameter to set the Vagrant Cloud token'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-u`/`--username [INSERT VALUE]`: Takes a parameter to specify your Vagrant
    Cloud email or username'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-h`/`--help`: Prints the help screen for this command'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example is the `vagrant login --check` command.
  prefs: []
  type: TYPE_NORMAL
- en: The package command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `package` commands allow you to create a Vagrant box out of a running Vagrant
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Options/flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are five flags for this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--base [INSERT VALUE]`: Takes a parameter of the name of a virtual machine
    in VirtualBox to package as a base box. This flag only works if you are using
    the VirtualBox provisioner.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--output [INSERT VALUE]`: Takes a parameter to name the output file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--include [INSERT VALUE, INSERT VALUE]`: Takes comma-separated parameters
    to include additional files in this packaging process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--vagrantfile [INSERT VALUE]`: Takes a parameter of the Vagrantfile you wish
    to package into this box.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-h`/`--help`: Prints the help screen for this command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example is the `vagrant package --help` command.
  prefs: []
  type: TYPE_NORMAL
- en: The snapshot command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `snapshot` command allows you to manage snapshots of Vagrant environments.
    You can save, delete, and restore snapshots. Only certain providers support snapshotting
    If your provider does not, Vagrant will return a warning when this command is
    run.
  prefs: []
  type: TYPE_NORMAL
- en: sub-commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are six sub-commands available for the `snapshot` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`vagrant snapshot delete [INSERT VALUE] [INSERT VALUE]`: The first parameter
    is the virtual machine name and the second parameter is the name of the snapshot
    you wish to delete.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vagrant snapshot list [INSERT VALUE]`: The parameter can optionally be the
    Vagrant machine name. This command will list all available snapshots on your system
    or all snapshots for a certain Vagrant machine if the parameter is specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vagrant snapshot push`: This can be used to create a new snapshot of a running
    Vagrant environment. It will add this onto the Snapshot stack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vagrant snapshot pop`: This can be used as an opposite to the `push` command
    to reverse a snapshot that has been pushed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vagrant snapshot save [INSERT VALUE] [INSERT VALUE]`: This saves a snapshot
    of the current machine. It''s similar to the `push` command, but it is recommended
    that you do not mix this command with `push` or `pop` as it is unsafe. The first
    parameter is the virtual machine name and the second parameter is the snapshot
    name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vagrant snapshot restore [INSERT VALUE] [INSERT VALUE]`: This restores a supplied
    snapshot. The first parameter is the virtual machine name and the second is the
    name of the snapshot you wish to restore to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The provider command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `provider` command will return the provider for the current running machine,
    or it can accept an environment ID.
  prefs: []
  type: TYPE_NORMAL
- en: Options/flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three flags for this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--install`: Attempts to install the provider'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--usable`: Checks whether the provider is usable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-h`/`--help`: Prints the help screen for this command'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example is the `vagrant provider --install` command.
  prefs: []
  type: TYPE_NORMAL
- en: The plugin command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `plugin` command allows you to manage Vagrant plugins. You can install,
    list, repair, uninstall, and update plugins.
  prefs: []
  type: TYPE_NORMAL
- en: sub-commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are seven sub-commands available for the `plugin` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`vagrant plugin expunge`: Removes all user-installed plugins. This will remove
    any data and dependencies associated with them. This is a useful command if you
    wish to delete them all in one go.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vagrant plugin install [INSERT VALUE]`: Installs a plugin by supplying its
    name as the command''s parameter. You can install a plugin from a known Gem or
    from a local Gem file on your system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vagrant plugin license [INSERT VALUE] [INSERT VALUE]`: Installs a proprietary
    Vagrant plugin license. The first parameter is the plugin name and the second
    is the licence file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vagrant plugin list`: Lists all installed plugins on your system. It will
    list plugin information, such as its version. This command is useful for finding
    out which plugins and versions you have installed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vagrant plugin repair`: Attempts to repair any plugins where there has been
    an issue and it is not working correctly. The issue could be during the installation
    of a custom plugin or an error with the `plugins.json` file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vagrant plugin uninstall [INSERT VALUE]`: Deletes a plugin using a supplied
    plugin name as the first parameter. This command supports multiple parameters,
    with each one being a plugin name. You can delete one or multiple plugins using
    this command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vagrant plugin update [INSERT VALUE]`: Updates a specific plugin if the first
    parameter is supplied as the plugin''s name. If no parameter is supplied, this
    command will update all installed plugins.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The cap command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `cap` command allows you to run or check the capabilities of a guest machine.
    These capabilities are often guest-specific and are configured specifically, for
    example, in Vagrant plugin development.
  prefs: []
  type: TYPE_NORMAL
- en: Options/flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two flags for this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--check [INSERT VALUE] [INSERT VALUE]`: Checks for a certain capability. The
    first parameter is the capability name and the second parameter is the capability
    arguments. This command will not run the capability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-h`/`--help`: Prints the help screen for this command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example is the `vagrant cap --help` command.
  prefs: []
  type: TYPE_NORMAL
- en: Day-to-day Vagrant commands and sub-commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Day-to-day Vagrant commands and sub-commands are the ones you will use the most.
    These commands are generally used to manage your Vagrant boxes, such as creating,
    starting, and stopping them.
  prefs: []
  type: TYPE_NORMAL
- en: The box command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `box` command allows you to manage Vagrant boxes on your system. You can
    install, update, remove, and prune boxes.
  prefs: []
  type: TYPE_NORMAL
- en: sub-commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are seven sub-commands available for the `box` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`vagrant box add [INSERT VALUE]`: Adds and downloads a Vagrant box to your
    system. This box can then be used in your Vagrantfile to create a Vagrant machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vagrant box list`: Lists all installed boxes installed on your system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vagrant box outdated`: Checks whether the current Vagrant box is outdated.
    You can add the `--global` flag, which will check all installed Vagrant boxes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vagrant box prune`: Removes old versions of installed boxes. It will ask for
    confirmation if you are currently using an old version of a box it wants to delete.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vagrant box remove [INSERT VALUE]`: Removes a Vagrant box by name as the first
    parameter supplied.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vagrant box repackage [INSERT VALUE] [INSERT VALUE] [INSERT VALUE]`: Repackages
    a Vagrant box into a `.box` file using the name as the first parameter, the provider
    as the second parameter, and the version as the third parameter. You can get the
    parameter values using the `vagrant box list` command. The box can then be distributed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vagrant box update`: Checks and updates the current box you are using. You
    can supply the `--box [INSERT VALUE]` flag where the first parameter is the box
    name that you wish to specifically update.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The destroy command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `destroy` command will stop and delete a Vagrant machine.
  prefs: []
  type: TYPE_NORMAL
- en: Options/flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three flags for this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-f`/`--force`: Destroys the Vagrant machine without asking you for confirmation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--parallel`/`--no-parallel`: Enables or disables parallelism only if the provider
    supports it. We are using VirtualBox as the provider in this book, and at the
    time of writing it does not support parallel execution. Running this flag will
    enable the `force` flag too.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-h`/`--help`: Prints the help screen for this command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example is the `vagrant destroy --force` command.
  prefs: []
  type: TYPE_NORMAL
- en: The halt command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `halt` command will stop/halt a running Vagrant machine.
  prefs: []
  type: TYPE_NORMAL
- en: Options/flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two flags for this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--force [INSERT VALUE]`: Forces the running machine to shut down. If your
    machine has not saved, you may lose data when running this command it is like
    switching off the computer''s power source. You can specify a machine name or
    ID using the optional parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-h`/`--help`: Prints the help screen for this command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example is the `vagrant halt --force` command.
  prefs: []
  type: TYPE_NORMAL
- en: The init command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `init` command generates a new Vagrantfile, which is used to configure new
    Vagrant environments.
  prefs: []
  type: TYPE_NORMAL
- en: Options/flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are six flags for this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--box-version [INSERT VALUE]`: Adds a version of the box supplied as the first
    parameter into the Vagrantfile'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-f`/`--force`: Overwrite an existing Vagrantfile if there is already one in
    the same directory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-m`/`--minimal`: Generates a minimal Vagrantfile that will remove anything
    not required, such as comments'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--output [INSERT VALUE]`: Uses an output path specified by the first parameter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--template [INSERT VALUE]`: Uses a custom Vagrantfile template when its path
    is supplied as the first parameter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-h`/`--help`: Prints the help screen for this command'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example is the `vagrant init --force` command.
  prefs: []
  type: TYPE_NORMAL
- en: The port command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `port` command returns port-mapping from the guest machine to the Vagrant
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Options/flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three flags for this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--guest [INSERT VALUE]`: Outputs specific port information when the first
    parameter supplied is the port available on the guest machine. It will return
    the host-mapped port. This command can be useful for certain network-level debugging
    or testing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--machine-readable`: Returns/displays a more machine-readable output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-h`/`--help`: Prints the help screen for this command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example is the `vagrant port --machine-readable` command.
  prefs: []
  type: TYPE_NORMAL
- en: The provision command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `provision` command will provision a Vagrant machine from an available Vagrantfile.
    If successful, you will have a running and fully-provisioned Vagrant environment.
  prefs: []
  type: TYPE_NORMAL
- en: Options/flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two flags for this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--provision-with [INSERT VALUE]`: Provisions the Vagrant machine with a specified
    provisioner. You can use multiple provisioner types by suppling the parameter
    as a comma-separated list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-h`/`--help`: Prints the help screen for this command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example is the `vagrant provision --help` command.
  prefs: []
  type: TYPE_NORMAL
- en: The push command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `push` command will deploy code using a method that you have configured
    in the Vagrantfile. You can use FTP/SFTP and Heroku as the deployment methods.
  prefs: []
  type: TYPE_NORMAL
- en: Options/flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is only one flag for this command, `-h`/`--help`, which will print the
    help screen for this command.
  prefs: []
  type: TYPE_NORMAL
- en: An example is the `vagrant push --help` command.
  prefs: []
  type: TYPE_NORMAL
- en: The reload command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `reload` command is used when you make a change to the Vagrantfile and wish
    to apply that to the running machine. This command will stop, apply the new Vagrantfile,
    and start up the environment.
  prefs: []
  type: TYPE_NORMAL
- en: Options/flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three flags for this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--provision`/`--no-provision`: Enables or disables provisioning during the
    reload process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--provision-with [INSERT VALUE]`: Provisions the Vagrant machine with a specified
    provisioner. You can use multiple provisioner types by suppling the parameter
    as a comma-separated list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-h`/`--help`: Prints the help screen for this command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example is the `vagrant reload --no-provision` command.
  prefs: []
  type: TYPE_NORMAL
- en: The resume command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `resume` command will start up a paused Vagrant environment. It can be used
    after the `vagrant halt` command.
  prefs: []
  type: TYPE_NORMAL
- en: Options/flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three flags for this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--provision`/`--no-provision`: Enables or disables provisioning as the machine
    resumes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--provision-with [INSERT VALUE]`: Only uses certain provisioners specified
    in the first parameter. To use multiple, you can supply a comma-separated list.
    The supplied value can be a provisioner by name or by type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-h`/`--help`: Prints the help screen for this command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example is the `vagrant resume --no-provision` command.
  prefs: []
  type: TYPE_NORMAL
- en: The status command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `status` command will return the status of a Vagrant machine. It will return
    information such as `stopped` or `running`.
  prefs: []
  type: TYPE_NORMAL
- en: Options/flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is only one flag for this command, `-h`/`--help`, which will print the
    help screen for this command.
  prefs: []
  type: TYPE_NORMAL
- en: An example is the `vagrant status --help` command.
  prefs: []
  type: TYPE_NORMAL
- en: The suspend command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `suspend` command is similar to the `vagrant halt` command, but instead
    of completely stopping and shutting down the machine, it will save the state this
    uses extra disk space on your guest machine, but when you start the machine back
    up again, it will start quickly and from that exact point. There will be no lengthy
    boot-up process as if you were starting it from cold.
  prefs: []
  type: TYPE_NORMAL
- en: Options/flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is only one flag for this command, `-h`/`--help`, which will print the
    help screen for this command.
  prefs: []
  type: TYPE_NORMAL
- en: An example is the `vagrant suspend --help` command.
  prefs: []
  type: TYPE_NORMAL
- en: The up command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `up` command will start up a Vagrant environment. During the start process,
    it will also provision the machine, similarly to the `vagrant provision` command.
  prefs: []
  type: TYPE_NORMAL
- en: Options/flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are seven flags for this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--provision`/`--no-provision`: Enables or disables provisioning when the Vagrant
    machine is starting up.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--provision-with [INSERT VALUE]`: Only uses certain provisioners specified
    in the first parameter. To use multiple, you can use a comma-separated list. The
    supplied value can be a provisioner by name or by type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--destroy-on-error`/`--no-destroy-on-error`: Destroys a machine if there is
    a fatal error. This is the default behavior unless you use the `--no-destroy-on-error`
    flag.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--parallel`/`--no-parallel`: Enables or disables parallelism only if the provider
    supports it. We are using VirtualBox as the provider in this book, and at the
    time of writing it does not support parallel execution. If you run the command,
    nothing will happen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--provider [INSERT VALUE]`: Uses a provider supplied as the first parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--install-provider`/`--no-install-provider`: Attempts to install the provider
    if possible and it isn''t installed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-h`/`--help`: Prints the help screen for this command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example is the `vagrant up --no-parallel` command.
  prefs: []
  type: TYPE_NORMAL
- en: The validate command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `validate` command will validate a Vagrantfile and return any errors. It
    checks for issues within the Vagrantfile, such as incorrect syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Options/flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is only one flag for this command, `-h`/`--help`, which will print the
    help screen for this command.
  prefs: []
  type: TYPE_NORMAL
- en: An example is the `vagrant validate --help` command.
  prefs: []
  type: TYPE_NORMAL
- en: Application-specific Vagrant commands and sub-commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Application-specific Vagrant commands and sub-commands that focus on an external
    application or piece of software not directly related to Vagrant or VirtualBox.
    In this section, we'll cover the Docker, RDP, RSync, SSH, and PowerShell commands
    and sub-commands.
  prefs: []
  type: TYPE_NORMAL
- en: The docker-exec command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `docker-exec` command is used to run commands directly into a running `docker`
    container. This is done when using Docker as Vagrant's provider.
  prefs: []
  type: TYPE_NORMAL
- en: Options / flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are eight flags for this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--no-detach`/`--detach`: Enables or disables the command running in the background.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-i`/`--interactive`: Keeps the standard input (STDIN) open even if not attached.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--no-interactive`: Doesn''t keep the standard input (STDIN) open even if not
    attached.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-t`/`--tty`: Enables a pseudo-tty, called a pty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--no-tty`: Disables a pseudo-tty, called a pty.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-u [INSERT VALUE]`/`--user [INSERT VALUE]`: Sends a user or UID as the first
    parameter with the command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--prefix`/`--no-prefix`: Enables or disables a prefix output with the machine
    name. This can be useful for differentiating between machines/containers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-h`/`--help`: Prints the help screen for this command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example is the `vagrant docker-exec --no-tty` command.
  prefs: []
  type: TYPE_NORMAL
- en: The docker-logs command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `docker-logs` command will return the logs from a running container. This
    is done when using Docker as Vagrant's provider.
  prefs: []
  type: TYPE_NORMAL
- en: Options/flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three flags for this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--no-follow`/`--follow`: Enables or disables streaming Docker log data into
    the output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--no-prefix`/`--prefix`: Enables or disables a prefix output with the machine
    name. This can be useful for differentiating between machines/containers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-h`/`--help`: Prints the help screen for this command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example is the `vagrant docker-logs --no-follow` command.
  prefs: []
  type: TYPE_NORMAL
- en: The docker-run command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `docker-run` command is very similar to the vagrant `docker-exec` command
    in that it allows you to run a command on a Docker container. It has fewer options
    and less configurability compared to the `docker-exec` command. Again, this command
    is used when using Docker as Vagrant's provider.
  prefs: []
  type: TYPE_NORMAL
- en: Options/flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are six flags for this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--no-detach`/`--detach`: Enables or disables the command to run in the background'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-t`/`--tty`: Enables a `pseudo-tty`, called a `pty`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--no-tty`: Disables a `pseudo-tty`, called a `pty`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-r`/`--rm`: Removes the container after execution'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--no-rm`: Doesn''t remove the container after execution'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-h`/`--help`: Prints the help screen for this command'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example is the `vagrant docker-run --no-detach` command.
  prefs: []
  type: TYPE_NORMAL
- en: The rdp command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `rdp` command is used to create a client for a remote desktop with the Vagrant
    environment. This can only be used with Vagrant environments that support the
    remote-desktop protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Options/flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is one flag for this command, `-h`/`--help`, which will print the help
    screen for this command.
  prefs: []
  type: TYPE_NORMAL
- en: An example is the `vagrant rdp --help` command.
  prefs: []
  type: TYPE_NORMAL
- en: The rsync command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `rsync` command will force a sync between any folders that have been configured
    to use RSync as the sync option, to the remote machine. A sync will often only
    happen when you manually start up or reload a Vagrant environment.
  prefs: []
  type: TYPE_NORMAL
- en: Options/flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is one flag for this command, `-h`/`--help`, which will print the help
    screen for this command.
  prefs: []
  type: TYPE_NORMAL
- en: An example is the `vagrant rsync --help` command.
  prefs: []
  type: TYPE_NORMAL
- en: The rsync-auto command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'How to run `vagrant rsync-auto`: The `rsync-auto` command is similar to the
    `vagrant rsync` command in that is forces a sync between any configured RSync
    folders, but it will now listen to all configured directories for any changes
    to files and RSync them automatically.'
  prefs: []
  type: TYPE_NORMAL
- en: Options/flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three flags for this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--poll`: Forces polling of the filesystem. This option does not have great
    performance and can be slow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--no-poll`: Disables polling of the filesystem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-h`/`--help`: Prints the help screen for this command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example is the `vagrant rsync-auto --no-poll` command.
  prefs: []
  type: TYPE_NORMAL
- en: The ssh command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `ssh` command will connect you to a remote Vagrant machine using the SSH
    protocol/connection. This command gives you access to the machine's shell, which
    allows you to run commands directly on the machine.
  prefs: []
  type: TYPE_NORMAL
- en: Options/flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are five flags for this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-c [INSERT VALUE]`/`--command [INSERT VALUE]`: Runs a command directly via
    SSH using the first parameter supplied.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-p`/`--plain`: Connects in plain mode, leaving you to choose the authentication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-t`/`--tty`: Enables `tty` when you run an SSH command. This is the default
    value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--no-tty`: Disables `tty` when you run an SSH command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-h`/`--help`: Prints the help screen for this command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example is the `vagrant ssh --plain` command.
  prefs: []
  type: TYPE_NORMAL
- en: The ssh-config command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `ssh-config` command will generate a configuration that can be used in an
    SSH configuration file, which can then be used to SSH into the Vagrant machine.
  prefs: []
  type: TYPE_NORMAL
- en: Options/flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two flags for this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--host [INSERT VALUE]`: Names the host used for the config when the first
    parameter is supplied'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-h`/`--help`: Prints the help screen for this command'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example would be the `vagrant ssh-config --host testname` command.
  prefs: []
  type: TYPE_NORMAL
- en: The powershell command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `powershell` command will open a PowerShell connection to a Vagrant machine.
    The `powershell` command will only work with guest machines and Vagrant machines
    that support it. For example, when trying to run this command on a guest machine,
    such a Mac, the following error will be returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Options /flags
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two flags for this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--c [INSERT VALUE]` /`--command [INSERT VALUE]`: Runs a PowerShell command
    supplied as the first parameter'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-h`/`--help`: Prints the help screen for this command'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example is the `vagrant powershell --help` command.
  prefs: []
  type: TYPE_NORMAL
- en: A typical Vagrant workflow using commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, you will see how a few Vagrant commands and sub-commands can
    create a basic workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you are in a new empty directory (this isn't necessary but helps keep
    the project separate from your other files).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run `vagrant init ubuntu/xenial64 https://vagrantcloud.com/ubunutu/xenial64.box`.
    This will create a default Vagrantfile, but the box will be set as Ubuntu 16.04.4
    64-bit version. The first parameter is the official box name and the second is
    the download URL for it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `vagrant validate` command to make sure the Vagrantfile is error-free
    and ready to go. There should not be any errors here as we are just using the
    basic default Vagrantfile. You should see the `Vagrantfile validated successfully`
    message returned.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start up the Vagrant machine. To do this, run the `vagrant up` command. If you
    do not have that Ubuntu box installed, Vagrant will download it during the provisioning
    process. It may take some time depending on your internet speed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: During the boot process, you will see many things happen. Vagrant will configure
    network connections, import the box, configure and start SSH services, forward
    any ports between your machine and the guest Vagrant machine, and mount any shared
    folders.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the box is finished booting and Vagrant has finished configuring, you will
    be able to log in via SSH and run commands directly in the Vagrant environment.
    To do this, run the `vagrant ssh` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After a few seconds, you should see the Ubuntu Terminal and the message of the
    day. The first line should say something similar to `Welcome to Ubuntu 16.04.04
    LTS`. You can now run commands inside the Vagrant environment such as installing
    Ubuntu packages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exit out of here and stop the Vagrant machine. Run the `exit` command inside
    the Ubuntu Terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can check on the status of the Vagrant environment by running the `vagrant
    status` command. This will return a list of Vagrant machines on your system. You
    should see your machine still running, the name will likely be `Default` and the
    status will be `running (virtualbox)`, where VirtualBox is the provider we have
    used to power the Vagrant machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's save a snapshot of the environment's current state. We can run the `vagrant
    snapshot save default first_snapshot` command, which tells Vagrant to save a snapshot
    using the machine with the name of default and it to call the snapshot `first_snapshot`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To confirm the snapshot has been saved, run the `vagrant snapshot list` command,
    which should return `first_snapshot`. The command will only return one snapshot
    at first as that is all we have saved, but eventually you will see a list as you
    save more. You can then use a snapshot to restore the environment to that save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stop the Vagrant machine by running the `vagrant suspend` command. This will
    take a few minutes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congratulations! You have successfully created a Vagrant machine, installed
    Ubuntu, used SSH, saved a snapshot of the Vagrant machine, and suspended it.
  prefs: []
  type: TYPE_NORMAL
- en: This is a fairly simple workflow as we have not done any work on the machine
    or installed any additional features. In later chapters, we will look at how to
    customize the Vagrantfile and change the provision process. We will also look
    at provisioning a Vagrant machine using configuration-management tools, such as
    Chef and Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With such a large selection of Vagrant commands, sub-commands, parameters, and
    flags, it is very easy to enter the command and get an error message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Vagrant is very good at returning an error if you enter the wrong command.
    There can be a few reasons a command might return an error:'
  prefs: []
  type: TYPE_NORMAL
- en: You are trying to run a command when no Vagrant machines are running
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You are trying to run a command against a Vagrant machine with a non-existent
    or incorrect name/ID, or one that has been deleted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a typo in your command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have the parameters in the wrong order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have not specified any parameters when they are required
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have the flags in the wrong order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have not specified any flags when they are required
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You are running a provider-specific command when you are not actually using
    that provider
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You are running an OS-specific command when you are not actually using that
    OS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are a few troubleshooting tips:'
  prefs: []
  type: TYPE_NORMAL
- en: Read the error message slowly to see what you may have missed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run the `vagrant [INSERT VALUE] --help` command where `[INSERT VALUE]` is the
    command you are trying to run. This will give you the syntax, order, parameters,
    and flags for that command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure you haven't got any typos in your command string.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can also be worth checking the Vagrantfile in case that is causing any issues
    or interfering in some way. You can run the `vagrant validate` command to make
    sure it's OK.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can always visit the official Vagrant website to make sure that the version
    of Vagrant you have has the command available/supports the command that you are
    trying to run.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are completely stuck and cannot troubleshoot the issue, searching for
    the specific error message can be incredibly useful. You will likely come across
    someone who has the same problem, normally on a website such as Stack Overflow
    or the GitHub issues section of the Vagrant project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the most extreme cases, you may need to uninstall Vagrant (and sometimes
    VirtualBox) and then restart your machine. You will then need to reinstall Vagrant
    (and possibly VirtualBox). A fresh install can sometimes be last option but the
    right answer!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered Vagrant's commands and sub-commands. You should
    now have a good understanding as to what each command does and in what scenarios
    to use it. Feel free to flick back and use this chapter as a reference.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 4](part0135.html#40NRU0-d86fec2f29de42f086efd11bc5538d9c), *Discovering
    Vagrant Boxes - Vagrant Cloud*, we will learn about Vagrant boxes and the Vagrant
    Cloud. You will learn how to install a Vagrant box, manage it, create your own
    Vagrant box, and search for other community- and company-created boxes on the
    Vagrant Cloud platform.
  prefs: []
  type: TYPE_NORMAL
