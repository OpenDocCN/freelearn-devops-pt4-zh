- en: Multi-Machine
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多机器
- en: 'In this chapter, you will learn about Vagrant''s multi-machine feature. We
    will walk through various aspects of multi-machine, and by the end of this chapter
    you should have a good understanding of the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解Vagrant的多机器功能。我们将通过多机器的各个方面，最终您应该能很好地理解以下主题：
- en: An introduction to Vagrant multi-machine
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vagrant多机器简介
- en: Multi-machine configuration in the Vagrantfile
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Vagrantfile中配置多机器
- en: Connecting multi-machines via networking
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过网络连接多机器
- en: An introduction to Vagrant multi-machine
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vagrant多机器简介
- en: Using Vagrant's multi-machine feature, you can easily manage multiple Vagrant
    machines in one Vagrantfile. This can be useful if you wish to model your test
    environment in a similar way to your production environment. You can easily separate
    servers such as web servers, file servers, and database servers.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Vagrant的多机器功能，您可以轻松管理一个Vagrantfile中的多个Vagrant机器。如果您希望将测试环境的模型与生产环境类似，这将非常有用。您可以轻松地将服务器分离，例如Web服务器、文件服务器和数据库服务器。
- en: 'In this section, we will look at using multi-machine in the two following use
    cases:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过以下两个用例来了解如何使用多机器：
- en: In the first use case, we will look at managing three Vagrant machines. Here,
    we will create a basic load balancing setup, where one machine will distribute
    traffic between two machines that serve up a website.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第一个用例中，我们将管理三个Vagrant机器。在这里，我们将创建一个基本的负载均衡设置，其中一台机器将在两台提供网站服务的机器之间分配流量。
- en: In the second use case, we will be managing two Vagrant machines. We will create
    a web-based machine that serves a website and another machine, which runs a MySQL
    database. The web machine will communicate with the database machine to display
    data on the web page.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第二个用例中，我们将管理两台Vagrant机器。我们将创建一台提供网站的机器和另一台运行MySQL数据库的机器。Web机器将与数据库机器通信，以在网页上显示数据。
- en: Load balancing with Vagrant multi-machine
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Vagrant多机器进行负载均衡
- en: In this section, we are going to be using nginx to act as an HTTP load balancer
    that will distribute traffic between two nginx web machines. We will be using
    the round robin method of load balancing, which evenly distributes incoming traffic.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用nginx作为HTTP负载均衡器，将流量分配到两台nginx Web机器之间。我们将使用轮询方法进行负载均衡，该方法均匀分配传入的流量。
- en: First, let's set up our Vagrantfile to contain the three machines before installing
    nginx with the Ubuntu 16.04 64-bit OS.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们设置我们的Vagrantfile，包含这三台机器，然后使用Ubuntu 16.04 64位操作系统安装nginx。
- en: 'To get started, let''s create a minimal Vagrantfile by running the `vagrant
    init -m` command. After that, let''s edit the Vagrantfile and create three config
    areas as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始，让我们通过运行`vagrant init -m`命令来创建一个最小化的Vagrantfile。之后，让我们编辑Vagrantfile，并按如下方式创建三个配置区域：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Our Vagrantfile should now have the main `|config|` block, which encapsulates
    all of the code and the three `define` blocks within that. Multi-machine is incredibly
    easy to set up in Vagrant; all you have to do is define a new machine and then
    configure that machine within the block.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的Vagrantfile应该包含主要的`|config|`块，该块封装了所有代码和其中的三个`define`块。Vagrant中的多机器设置非常简单；您只需定义一个新机器，然后在该块中配置该机器即可。
- en: When defining a new block you must give the new machine a name that will become
    its reference during configuration. The first machine I have set up is named `lb1`,
    which simply stands for load balancer 1\. This convention can help when working
    with a large Vagrantfile and multiple machines; it can also be useful when working
    on a team where multiple developers are using and viewing a Vagrantfile.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 定义新块时，您必须为新机器指定一个名称，该名称将在配置过程中成为其引用。我设置的第一台机器命名为`lb1`，即负载均衡器1。这种命名约定在处理大型Vagrantfile和多台机器时非常有用；当团队中多位开发人员使用和查看Vagrantfile时，它也很有帮助。
- en: 'To define a new machine, input the following two lines of code:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义一个新机器，请输入以下两行代码：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This machine is now ready to configure! If we run `vagrant up`, nothing will
    happen because the box has no values – there is no box, networking, provisioning,
    or file handling defined.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这台机器现在已经准备好进行配置！如果我们运行`vagrant up`，什么也不会发生，因为该盒子没有值——没有盒子、网络、配置或文件处理。
- en: 'Let''s start configuring our load balancer machine by setting a box and an
    IP address. This can be done by accessing the `lb1` namespace within our config
    block, as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过设置一个盒子和一个IP地址来开始配置我们的负载均衡器机器。可以通过访问`lb1`命名空间，在我们的配置块中进行配置，如下所示：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you can see in the preceding example, we have set the `lb1.vm.box` and `lb1.vm.network`
    values. Let''s now do this for our two web machines, but let''s set a different
    IP address so we can access them separately and avoid conflicts, as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的示例所示，我们已经设置了`lb1.vm.box`和`lb1.vm.network`的值。现在我们为两个Web机器做相同的配置，但设置不同的IP地址，以便我们能够单独访问它们并避免冲突，具体如下：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We now have three Vagrant machines configured, but before we can launch and
    test them, we need to provision them with nginx and configure nginx for our load
    balancing setup.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经配置了三个Vagrant机器，但在我们启动并测试它们之前，我们需要为它们配置nginx并设置nginx以支持我们的负载均衡设置。
- en: Let's create two shell scripts to provision our machines. (We will cover shell
    scripting in more depth in later chapters; we are using it here to help demonstrate
    how it works within a multi-machine environment.)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建两个shell脚本来配置我们的机器。（我们将在后续章节中更深入地讲解shell脚本；这里我们使用它来展示它如何在多机器环境中工作。）
- en: In the directory where your `Vagrantfile` is, create a `lb.sh` file and an `web.sh`
    file.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在你`Vagrantfile`所在的目录下，创建一个`lb.sh`文件和一个`web.sh`文件。
- en: lb.sh
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: lb.sh
- en: 'Let''s focus on the `lb.sh` file first. Add the following lines as the file''s
    contents:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先关注`lb.sh`文件。将以下行添加为该文件的内容：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There's quite a bit going on in the preceding snippet, so let's break it down.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码片段包含了很多内容，我们来逐一分析。
- en: In the first part, we are declaring the program location that should run this
    script (`bin`/`bash`) after the shebang (`#!`).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一部分，我们声明了应该运行此脚本的程序位置（`bin`/`bash`），这在shebang（`#!`）之后。
- en: In lines 2-7, we are updating Ubuntu, installing nginx, and deleting the default
    nginx configuration file.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在第2到第7行，我们正在更新Ubuntu、安装nginx并删除默认的nginx配置文件。
- en: In lines 8-22, we are inserting a new config as the default nginx config, which
    essentially setes up the load balancing and sets our available web servers as
    `10.0.0.11` and `10.0.0.12`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在第8到第22行，我们插入了新的配置作为默认的nginx配置，基本上设置了负载均衡并将我们的可用Web服务器设置为`10.0.0.11`和`10.0.0.12`。
- en: In lines 23-25, we are starting up the nginx service (which will read our new
    default config file and apply those settings), setting up the default index HTML
    file, and finishing the provision.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在第23到第25行，我们启动了nginx服务（它将读取我们的新默认配置文件并应用这些设置），设置了默认的index HTML文件，并完成了配置过程。
- en: 'We `echo` out `Starting Provision: lb1` and `Provision lb1 complete` at both
    the beginning and end of the provision script. This is not necessary, but when
    you run the `vagrant up --provision` command you will see these echoed into the
    terminal, which can be useful when you are trying to understand what is happening
    and what stage of the provision process you are at.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '我们在配置脚本的开始和结束时分别使用`echo`输出`Starting Provision: lb1`和`Provision lb1 complete`。这虽然不是必须的，但当你运行`vagrant
    up --provision`命令时，你会看到这些信息输出到终端，这在你尝试理解发生了什么以及当前处于配置过程的哪个阶段时非常有用。'
- en: web.sh
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: web.sh
- en: 'Let''s now create our `web.sh` bash script, which will handle the provisioning
    of our web servers. This script is much simpler than the load balancer script
    we created earlier, as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建`web.sh` bash脚本，它将处理我们Web服务器的配置。这个脚本比我们之前创建的负载均衡器脚本简单很多，内容如下：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Again, in the preceding snippet, we are echoing out the progress at the beginning
    and end of our provision progress. In lines 2-4 we are updating Ubuntu and installing
    nginx. In line 5 we are overwriting the default index HTML file with a basic title,
    which will help us differentiate between the two web servers.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在前面的代码片段中，我们在配置进度的开始和结束时回显了进度信息。在第2到第4行，我们更新了Ubuntu并安装了nginx。在第5行，我们用一个基本的标题覆盖了默认的index
    HTML文件，这将帮助我们区分两个Web服务器。
- en: In this script you will notice the use of `$1`. This is a variable in bash and
    references the first argument. Later on in this section you will learn how to
    pass an argument into the shell script, as this will help us differentiate between
    web server 1 and web server 2.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个脚本中，你会注意到使用了`$1`。这是bash中的一个变量，引用的是第一个参数。在接下来的章节中，你将学习如何将参数传递给shell脚本，因为这将帮助我们区分Web服务器1和Web服务器2。
- en: Vagrant multi-machine shell provisioning
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vagrant多机器shell配置
- en: Now that we have our `lb.sh` and `web.sh` provisioning scripts set up, let's
    add them into our Vagrantfile so we're ready to set up and test our load balancing
    app.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置好了`lb.sh`和`web.sh`配置脚本，让我们将它们添加到Vagrantfile中，准备好设置和测试我们的负载均衡应用。
- en: 'The following code block is a finished copy of our Vagrantfile:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块是我们完整的Vagrantfile副本：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We can provision a box by using the `.vm.provision` namespace. In the preceding
    example, you can see that we are passing our arguments into `web1` and `web2`
    using the `shell.args` value. These will then be accessible inside our `web.sh`
    script.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `.vm.provision` 命名空间来配置一个盒子。在前面的示例中，你可以看到我们通过 `shell.args` 值将参数传递给 `web1`
    和 `web2`。这些值将可以在我们的 `web.sh` 脚本中访问。
- en: Now, save your Vagrantfile and run the `vagrant up --provision` command to start
    running and provisioning the machines. You'll notice that the booting process
    takes much longer as there are now three machines to manage instead of the usual
    one.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，保存你的 Vagrantfile 并运行 `vagrant up --provision` 命令来启动并配置机器。你会注意到启动过程比平时要长，因为现在需要管理三台机器，而不是通常的那一台。
- en: 'During the booting process you should notice our echo statements at different
    points of the provisioning process, as shown in the following screenshots:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动过程中，你应该会注意到我们在配置过程的不同阶段打印的回显语句，如下图所示：
- en: '![](img/00064.gif)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00064.gif)'
- en: 'In the preceding screenshot, you''ll see the `lb1` provisioner has started.
    In the following screenshot you''ll see that the `web2` provisioner has completed:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，你会看到 `lb1` 的配置器已经启动。在接下来的截图中，你会看到 `web2` 的配置器已经完成：
- en: '![](img/00065.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00065.jpeg)'
- en: 'When the Vagrant machines have finished booting, we can move on and test out
    the load balancer. To do this, we set the IP address for the load balancer to
    `10.0.0.10` and open it in a browser. You should see one of the web server machines,
    as shown in the following screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Vagrant 机器启动完成后，我们可以继续并测试负载均衡器。为此，我们将负载均衡器的 IP 地址设置为 `10.0.0.10` 并在浏览器中打开。你应该能看到其中一台网页服务器机器，如下图所示：
- en: '![](img/00066.jpeg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00066.jpeg)'
- en: 'Now, if you refresh the page, the load balancer should send your request to
    the other web server machine, as shown in the following screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你刷新页面，负载均衡器应该会将你的请求发送到另一个网页服务器机器，正如下图所示：
- en: '![](img/00067.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00067.jpeg)'
- en: 'If you keep refreshing the page, you will be bounced between the two web servers.
    You can also go to one of the web machines directly be accessing them via their
    own IP addresses. If you visit `10.0.0.11` in your web browser, for example, you
    will only see the web server 1 machine, as shown in the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你持续刷新页面，你会在两台网页服务器之间切换。你还可以通过直接访问它们的 IP 地址，去到某一台网页服务器。例如，如果你在浏览器中访问 `10.0.0.11`，你将只会看到网页服务器
    1 机器，如下图所示：
- en: '![](img/00068.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00068.jpeg)'
- en: Congratulations! You have successfully configured a multi-machine Vagrant environment
    using a basic HTTP load balancing setup.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经成功配置了一个多机器的 Vagrant 环境，并设置了基本的 HTTP 负载均衡。
- en: multi-machine SSH
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多机 SSH
- en: 'Now that your machines are up and running, you may want to SSH into them to
    make and test some changes. To do this, we can run the `vagrant ssh` command.
    This will give us an error, as shown in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，机器已启动并运行，你可能想通过 SSH 连接到它们，进行一些更改并进行测试。为此，我们可以运行 `vagrant ssh` 命令。这时会给出一个错误，如下图所示：
- en: '![](img/00069.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00069.jpeg)'
- en: 'Here, we must specify a machine name, otherwise the `ssh` command won''t know
    which machine we want to connect to. The names to supply are the ones we defined
    in the Vagrantfile, for example, `lb1`, `web1`, or `web2`. Let''s now SSH into
    the load balancing machine by running the `vagrant ssh lb1` command, as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们必须指定机器名称，否则 `ssh` 命令将不知道我们要连接哪台机器。提供的名称应该是我们在 Vagrantfile 中定义的名称，例如 `lb1`、`web1`
    或 `web2`。现在，我们通过运行 `vagrant ssh lb1` 命令来 SSH 连接到负载均衡机器，如下所示：
- en: '![](img/00070.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00070.jpeg)'
- en: You can now manage each machine individually via SSH.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以通过 SSH 单独管理每台机器。
- en: 'Let''s complete the machine life cycle by halting and destroying the machines.
    We can halt all three machines by running the `vagrant halt` command, as shown
    in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过停止并销毁机器来完成机器生命周期。我们可以通过运行 `vagrant halt` 命令来停止所有三台机器，如下图所示：
- en: '![](img/00071.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00071.jpeg)'
- en: 'Next, if you wish to do so, you can destroy your machines to free up system
    memory. Run the `vagrant destroy -f` command. In our example, we are using the
    `-f` flag to force the machines'' destruction; otherwise, we will be prompted
    for confirmation for each machine. Run the following command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，如果你愿意，你可以销毁你的机器以释放系统内存。运行 `vagrant destroy -f` 命令。在我们的示例中，我们使用 `-f` 标志强制销毁机器，否则会提示我们每台机器都进行确认。运行以下命令：
- en: '![](img/00072.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00072.jpeg)'
- en: As you can see in the preceding screenshot, the command tells Vagrant to loop
    through each machine and destroy them.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在前面的截图中看到的，命令告诉 Vagrant 循环遍历每台机器并销毁它们。
- en: Web server and database setup with Vagrant multi-machine
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Vagrant 多机配置的 Web 服务器和数据库设置
- en: In this section, we will use Vagrant's multi-machine feature to create a traditional
    web server and database setup. We will install our web server (nginx and PHP)
    on one machine and our database server (MySQL) on another.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 Vagrant 的多机功能来创建一个传统的 Web 服务器和数据库设置。我们将在一台机器上安装 Web 服务器（nginx 和 PHP），在另一台机器上安装数据库服务器（MySQL）。
- en: This setup is simpler than the one in the previous section, but it should still
    help to reinforce how to set up and manage Vagrant multi-machine.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这个设置比上一节中的更简单，但它仍然有助于加深对如何设置和管理 Vagrant 多机环境的理解。
- en: 'First, let''s create a new Vagrantfile in a new folder. We will create two
    machines to get started, as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们在一个新的文件夹中创建一个新的 Vagrantfile。我们将创建两台机器来开始，具体如下：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Again, we will be using shell provisioning for these machines. We will be using
    the Ubuntu 16.04 box with private networking, and each machine will get its own
    private IP address.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们将为这些机器使用 shell 配置。我们将使用 Ubuntu 16.04 镜像，并启用私有网络，每台机器将获得自己的私有 IP 地址。
- en: web.sh
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: web.sh
- en: 'Let''s now create our web server provision script to install nginx and PHP.
    Inside the `web.sh` file, we input the following code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建我们的 web 服务器配置脚本来安装 nginx 和 PHP。在 `web.sh` 文件中，我们输入以下代码：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We will need to log into the machine to make some configuration changes manually,
    but the preceding snippet will give us a good start.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将需要登录到机器上手动进行一些配置更改，但前面的代码片段将为我们提供一个良好的开端。
- en: db.sh
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: db.sh
- en: 'We can now create our database server provision script to install MySQL. Inside
    the `db.sh` file, we input the following code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以创建我们的数据库服务器配置脚本来安装 MySQL。在 `db.sh` 文件中，我们输入以下代码：
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This stage will also require some manual configuration, which we can do by logging
    into the database machine.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个阶段还需要一些手动配置，我们可以通过登录到数据库机器来完成。
- en: Let's now start up our Vagrant machines by running the `vagrant up --provision`
    command.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过运行 `vagrant up --provision` 命令启动我们的 Vagrant 机器。
- en: Nginx and PHP configuration
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Nginx 和 PHP 配置
- en: Let's now configure Nginx and PHP on our web server machine. Log into the machine
    by running the `vagrant ssh web1` command.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在我们的 web 服务器机器上配置 Nginx 和 PHP。通过运行 `vagrant ssh web1` 命令登录到该机器。
- en: 'Once logged in, we need to finish configuring nginx. This can be done by editing
    the default config file with the following command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦登录，我们需要完成 nginx 的配置。这可以通过以下命令编辑默认配置文件来完成：
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We now need to add PHP into this file to allow nginx to handle PHP files and
    code. The first line we need to edit is the index file list, so find the following
    line:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要在这个文件中添加 PHP，以便 nginx 处理 PHP 文件和代码。我们需要编辑的第一行是索引文件列表，找到以下行：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Chanage it to this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 将其更改为以下内容：
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The final change we need to perform is to add the PHP handling. This requires
    us to edit a block inside the main `server {}` block. The following snippet is
    the code we need to edit:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要执行的最后一个更改是添加 PHP 处理。这需要我们在主 `server {}` 块中编辑一个代码块。以下代码片段是我们需要编辑的内容：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Change the preceding snippet to the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 将前面的代码片段更改为以下内容：
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now save and close the file. If you want to, you can use the `sudo nginx -t`
    command to test the code and syntax of the config file you have just edited. A
    successful message is as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在保存并关闭文件。如果需要，你可以使用 `sudo nginx -t` 命令来测试你刚刚编辑的配置文件的代码和语法。成功消息如下：
- en: '![](img/00073.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00073.jpeg)'
- en: 'Let''s now restart nginx to apply the new settings; to do so, run the following
    command:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们重新启动 nginx 以应用新的设置；为此，请运行以下命令：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To confirm PHP has been installed and is working, create a `test.php` file
    within the `/var/www/html/` directory. Within the `test.php` file, add the following
    lines:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确认 PHP 已安装并正常工作，请在 `/var/www/html/` 目录中创建一个 `test.php` 文件。在 `test.php` 文件中，添加以下行：
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Save the file and in your web browser on your host machine, open `http://10.0.0.50/test.php`
    . You should now see the PHP info page, as shown in the following screenshot:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件后，在主机机器的 web 浏览器中，打开 `http://10.0.0.50/test.php`。你现在应该能够看到 PHP 信息页面，如下图所示：
- en: '![](img/00074.jpeg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00074.jpeg)'
- en: 'While we''re here, we should go back into the `test.php` file and edit its
    contents. So, we are now going to create a basic PHP script that connects to our
    MySQL database and retrieves some data. Edit the file to contain the following
    snippets:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们这里时，应该返回到 `test.php` 文件并编辑其内容。接下来，我们将创建一个基本的 PHP 脚本，连接到我们的 MySQL 数据库并检索一些数据。请编辑文件，使其包含以下代码段：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This is a very basic script to help get you started. This script is not secure
    and does not necessarily follow the PHP best practices. It would not be recommended
    to use this script in a production environment.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常基础的脚本，用于帮助您入门。此脚本并不安全，也未必遵循 PHP 最佳实践。建议不要在生产环境中使用此脚本。
- en: Before we can continue, we must set up the MySQL server on our other Vagrant
    machine; otherwise, the PHP script will fail as there is no database available.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我们必须在另一台 Vagrant 机器上设置 MySQL 服务器，否则 PHP 脚本将因没有数据库而失败。
- en: MySQL configuration
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MySQL 配置
- en: Let's finish our setup by installing and configuring the MySQL database. At
    the end of this section, you should see the final working code, as well as your
    web server accessing the database server via PHP.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过安装和配置 MySQL 数据库来完成设置。在本节的末尾，您应该能够看到最终的工作代码，并且您的 Web 服务器可以通过 PHP 访问数据库服务器。
- en: It is not recommended to use this setup in a production environment. We are
    not following security best practices but are instead setting things up with basic
    configuration.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 不建议在生产环境中使用此配置。我们没有遵循安全最佳实践，而是进行了基本的配置设置。
- en: 'Follow these steps to configure the MySQL database:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤配置 MySQL 数据库：
- en: First, let's SSH into the database machine by running the `vagrant ssh db1`
    command.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，通过运行 `vagrant ssh db1` 命令 SSH 进入数据库机器。
- en: 'Now install MySQL by running the following command: `run sudo apt-get install
    mysql-server`.'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在通过运行以下命令安装 MySQL：`run sudo apt-get install mysql-server`。
- en: You'll now be asked to set a root password. This can be anything as we are not
    using this as a production environment. You will then be asked to repeat and confirm
    the root password.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，系统会要求您设置一个 root 密码。您可以设置任何密码，因为我们并没有将其用作生产环境。接着，系统会要求您重复并确认 root 密码。
- en: You can now log into MySQL via the terminal by running `mysql -u root -p`. Enter
    the root password that you just set.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以通过终端运行 `mysql -u root -p` 登录 MySQL。请输入您刚刚设置的 root 密码。
- en: 'We must now create a basic MySQL user that has the correct privileges to access
    the database outside of the localhost address and network. Without this, we would
    not be able to access the database from the `web1` machine, so run the following
    commands:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在必须创建一个基本的 MySQL 用户，并赋予其正确的权限，以便从本地主机以外的地址和网络访问数据库。如果没有这个设置，我们将无法从 `web1`
    机器访问数据库，所以请运行以下命令：
- en: '[PRE18]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can now create a table and enter some test data, which will be accessed
    via PHP on the `web1` machine. Run the following commands to create a new database,
    a new table, and insert some data:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以创建一个表并插入一些测试数据，这些数据将通过 `web1` 机器上的 PHP 进行访问。运行以下命令来创建一个新数据库、新表，并插入一些数据：
- en: '[PRE19]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You can now exit the MySQL CLI tool. We must now configure one last MySQL setting
    that will allow connections from our web1 machine. We need to edit the `mysqld.cnf`
    config file, which can be done by running the following command:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以退出 MySQL CLI 工具。接下来，我们必须配置最后一个 MySQL 设置，以允许来自 `web1` 机器的连接。我们需要编辑 `mysqld.cnf`
    配置文件，可以通过运行以下命令来完成：
- en: '[PRE20]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Look for the following line:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 查找以下行：
- en: '[PRE21]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Change it to the following:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 将其更改为以下内容：
- en: '[PRE22]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You can now save the file and run the following command. This will restart
    MySQL so it is using the new configuration:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以保存文件并运行以下命令。这将重新启动 MySQL，使其使用新的配置：
- en: '[PRE23]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can now exit the MySQL CLI and visit `http://10.0.0.50/test.php` to access
    our database, as shown in the following screenshot:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以退出 MySQL CLI，并访问 `http://10.0.0.50/test.php` 来访问我们的数据库，如下图所示：
- en: '![](img/00075.jpeg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00075.jpeg)'
- en: Congratulations! You have successfully set up Vagrant multi-machine so it uses
    two machines as a web server and database architecture.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已经成功设置了 Vagrant 多机环境，使用两台机器分别作为 Web 服务器和数据库架构。
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we learned about Vagrant''s multi-machine feature and created
    two use cases: load balancing with three machines and a web server and database
    architecture with two machines.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了 Vagrant 的多机功能，并创建了两个使用案例：三个机器进行负载均衡和两台机器的 Web 服务器与数据库架构。
- en: In [Chapter 8](part0196.html#5QTE80-d86fec2f29de42f086efd11bc5538d9c), *Exploring
    Vagrant Plugins and Syncing Files*, we will learn about Vagrant plugins and how
    to sync files between a host machine and a Vagrant guest machine.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](part0196.html#5QTE80-d86fec2f29de42f086efd11bc5538d9c)，*探索Vagrant插件与文件同步*，我们将学习Vagrant插件以及如何在主机和Vagrant客机之间同步文件。
