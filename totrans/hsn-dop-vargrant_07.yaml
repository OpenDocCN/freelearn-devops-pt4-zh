- en: Multi-Machine
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about Vagrant''s multi-machine feature. We
    will walk through various aspects of multi-machine, and by the end of this chapter
    you should have a good understanding of the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to Vagrant multi-machine
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi-machine configuration in the Vagrantfile
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting multi-machines via networking
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to Vagrant multi-machine
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Vagrant's multi-machine feature, you can easily manage multiple Vagrant
    machines in one Vagrantfile. This can be useful if you wish to model your test
    environment in a similar way to your production environment. You can easily separate
    servers such as web servers, file servers, and database servers.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will look at using multi-machine in the two following use
    cases:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: In the first use case, we will look at managing three Vagrant machines. Here,
    we will create a basic load balancing setup, where one machine will distribute
    traffic between two machines that serve up a website.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the second use case, we will be managing two Vagrant machines. We will create
    a web-based machine that serves a website and another machine, which runs a MySQL
    database. The web machine will communicate with the database machine to display
    data on the web page.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load balancing with Vagrant multi-machine
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to be using nginx to act as an HTTP load balancer
    that will distribute traffic between two nginx web machines. We will be using
    the round robin method of load balancing, which evenly distributes incoming traffic.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: First, let's set up our Vagrantfile to contain the three machines before installing
    nginx with the Ubuntu 16.04 64-bit OS.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, let''s create a minimal Vagrantfile by running the `vagrant
    init -m` command. After that, let''s edit the Vagrantfile and create three config
    areas as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Our Vagrantfile should now have the main `|config|` block, which encapsulates
    all of the code and the three `define` blocks within that. Multi-machine is incredibly
    easy to set up in Vagrant; all you have to do is define a new machine and then
    configure that machine within the block.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: When defining a new block you must give the new machine a name that will become
    its reference during configuration. The first machine I have set up is named `lb1`,
    which simply stands for load balancer 1\. This convention can help when working
    with a large Vagrantfile and multiple machines; it can also be useful when working
    on a team where multiple developers are using and viewing a Vagrantfile.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'To define a new machine, input the following two lines of code:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This machine is now ready to configure! If we run `vagrant up`, nothing will
    happen because the box has no values – there is no box, networking, provisioning,
    or file handling defined.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start configuring our load balancer machine by setting a box and an
    IP address. This can be done by accessing the `lb1` namespace within our config
    block, as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you can see in the preceding example, we have set the `lb1.vm.box` and `lb1.vm.network`
    values. Let''s now do this for our two web machines, but let''s set a different
    IP address so we can access them separately and avoid conflicts, as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We now have three Vagrant machines configured, but before we can launch and
    test them, we need to provision them with nginx and configure nginx for our load
    balancing setup.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Let's create two shell scripts to provision our machines. (We will cover shell
    scripting in more depth in later chapters; we are using it here to help demonstrate
    how it works within a multi-machine environment.)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: In the directory where your `Vagrantfile` is, create a `lb.sh` file and an `web.sh`
    file.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: lb.sh
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s focus on the `lb.sh` file first. Add the following lines as the file''s
    contents:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There's quite a bit going on in the preceding snippet, so let's break it down.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: In the first part, we are declaring the program location that should run this
    script (`bin`/`bash`) after the shebang (`#!`).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: In lines 2-7, we are updating Ubuntu, installing nginx, and deleting the default
    nginx configuration file.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: In lines 8-22, we are inserting a new config as the default nginx config, which
    essentially setes up the load balancing and sets our available web servers as
    `10.0.0.11` and `10.0.0.12`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: In lines 23-25, we are starting up the nginx service (which will read our new
    default config file and apply those settings), setting up the default index HTML
    file, and finishing the provision.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'We `echo` out `Starting Provision: lb1` and `Provision lb1 complete` at both
    the beginning and end of the provision script. This is not necessary, but when
    you run the `vagrant up --provision` command you will see these echoed into the
    terminal, which can be useful when you are trying to understand what is happening
    and what stage of the provision process you are at.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: web.sh
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now create our `web.sh` bash script, which will handle the provisioning
    of our web servers. This script is much simpler than the load balancer script
    we created earlier, as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Again, in the preceding snippet, we are echoing out the progress at the beginning
    and end of our provision progress. In lines 2-4 we are updating Ubuntu and installing
    nginx. In line 5 we are overwriting the default index HTML file with a basic title,
    which will help us differentiate between the two web servers.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: In this script you will notice the use of `$1`. This is a variable in bash and
    references the first argument. Later on in this section you will learn how to
    pass an argument into the shell script, as this will help us differentiate between
    web server 1 and web server 2.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Vagrant multi-machine shell provisioning
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have our `lb.sh` and `web.sh` provisioning scripts set up, let's
    add them into our Vagrantfile so we're ready to set up and test our load balancing
    app.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code block is a finished copy of our Vagrantfile:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We can provision a box by using the `.vm.provision` namespace. In the preceding
    example, you can see that we are passing our arguments into `web1` and `web2`
    using the `shell.args` value. These will then be accessible inside our `web.sh`
    script.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `.vm.provision` 命名空间来配置一个盒子。在前面的示例中，你可以看到我们通过 `shell.args` 值将参数传递给 `web1`
    和 `web2`。这些值将可以在我们的 `web.sh` 脚本中访问。
- en: Now, save your Vagrantfile and run the `vagrant up --provision` command to start
    running and provisioning the machines. You'll notice that the booting process
    takes much longer as there are now three machines to manage instead of the usual
    one.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，保存你的 Vagrantfile 并运行 `vagrant up --provision` 命令来启动并配置机器。你会注意到启动过程比平时要长，因为现在需要管理三台机器，而不是通常的那一台。
- en: 'During the booting process you should notice our echo statements at different
    points of the provisioning process, as shown in the following screenshots:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动过程中，你应该会注意到我们在配置过程的不同阶段打印的回显语句，如下图所示：
- en: '![](img/00064.gif)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00064.gif)'
- en: 'In the preceding screenshot, you''ll see the `lb1` provisioner has started.
    In the following screenshot you''ll see that the `web2` provisioner has completed:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，你会看到 `lb1` 的配置器已经启动。在接下来的截图中，你会看到 `web2` 的配置器已经完成：
- en: '![](img/00065.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00065.jpeg)'
- en: 'When the Vagrant machines have finished booting, we can move on and test out
    the load balancer. To do this, we set the IP address for the load balancer to
    `10.0.0.10` and open it in a browser. You should see one of the web server machines,
    as shown in the following screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Vagrant 机器启动完成后，我们可以继续并测试负载均衡器。为此，我们将负载均衡器的 IP 地址设置为 `10.0.0.10` 并在浏览器中打开。你应该能看到其中一台网页服务器机器，如下图所示：
- en: '![](img/00066.jpeg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00066.jpeg)'
- en: 'Now, if you refresh the page, the load balancer should send your request to
    the other web server machine, as shown in the following screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你刷新页面，负载均衡器应该会将你的请求发送到另一个网页服务器机器，正如下图所示：
- en: '![](img/00067.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00067.jpeg)'
- en: 'If you keep refreshing the page, you will be bounced between the two web servers.
    You can also go to one of the web machines directly be accessing them via their
    own IP addresses. If you visit `10.0.0.11` in your web browser, for example, you
    will only see the web server 1 machine, as shown in the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你持续刷新页面，你会在两台网页服务器之间切换。你还可以通过直接访问它们的 IP 地址，去到某一台网页服务器。例如，如果你在浏览器中访问 `10.0.0.11`，你将只会看到网页服务器
    1 机器，如下图所示：
- en: '![](img/00068.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00068.jpeg)'
- en: Congratulations! You have successfully configured a multi-machine Vagrant environment
    using a basic HTTP load balancing setup.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经成功配置了一个多机器的 Vagrant 环境，并设置了基本的 HTTP 负载均衡。
- en: multi-machine SSH
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多机 SSH
- en: 'Now that your machines are up and running, you may want to SSH into them to
    make and test some changes. To do this, we can run the `vagrant ssh` command.
    This will give us an error, as shown in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，机器已启动并运行，你可能想通过 SSH 连接到它们，进行一些更改并进行测试。为此，我们可以运行 `vagrant ssh` 命令。这时会给出一个错误，如下图所示：
- en: '![](img/00069.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00069.jpeg)'
- en: 'Here, we must specify a machine name, otherwise the `ssh` command won''t know
    which machine we want to connect to. The names to supply are the ones we defined
    in the Vagrantfile, for example, `lb1`, `web1`, or `web2`. Let''s now SSH into
    the load balancing machine by running the `vagrant ssh lb1` command, as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们必须指定机器名称，否则 `ssh` 命令将不知道我们要连接哪台机器。提供的名称应该是我们在 Vagrantfile 中定义的名称，例如 `lb1`、`web1`
    或 `web2`。现在，我们通过运行 `vagrant ssh lb1` 命令来 SSH 连接到负载均衡机器，如下所示：
- en: '![](img/00070.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00070.jpeg)'
- en: You can now manage each machine individually via SSH.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以通过 SSH 单独管理每台机器。
- en: 'Let''s complete the machine life cycle by halting and destroying the machines.
    We can halt all three machines by running the `vagrant halt` command, as shown
    in the following screenshot:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过停止并销毁机器来完成机器生命周期。我们可以通过运行 `vagrant halt` 命令来停止所有三台机器，如下图所示：
- en: '![](img/00071.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00071.jpeg)'
- en: 'Next, if you wish to do so, you can destroy your machines to free up system
    memory. Run the `vagrant destroy -f` command. In our example, we are using the
    `-f` flag to force the machines'' destruction; otherwise, we will be prompted
    for confirmation for each machine. Run the following command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，如果你愿意，你可以销毁你的机器以释放系统内存。运行 `vagrant destroy -f` 命令。在我们的示例中，我们使用 `-f` 标志强制销毁机器，否则会提示我们每台机器都进行确认。运行以下命令：
- en: '![](img/00072.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00072.jpeg)'
- en: As you can see in the preceding screenshot, the command tells Vagrant to loop
    through each machine and destroy them.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Web server and database setup with Vagrant multi-machine
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will use Vagrant's multi-machine feature to create a traditional
    web server and database setup. We will install our web server (nginx and PHP)
    on one machine and our database server (MySQL) on another.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: This setup is simpler than the one in the previous section, but it should still
    help to reinforce how to set up and manage Vagrant multi-machine.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s create a new Vagrantfile in a new folder. We will create two
    machines to get started, as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Again, we will be using shell provisioning for these machines. We will be using
    the Ubuntu 16.04 box with private networking, and each machine will get its own
    private IP address.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: web.sh
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now create our web server provision script to install nginx and PHP.
    Inside the `web.sh` file, we input the following code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We will need to log into the machine to make some configuration changes manually,
    but the preceding snippet will give us a good start.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: db.sh
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can now create our database server provision script to install MySQL. Inside
    the `db.sh` file, we input the following code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This stage will also require some manual configuration, which we can do by logging
    into the database machine.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Let's now start up our Vagrant machines by running the `vagrant up --provision`
    command.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Nginx and PHP configuration
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's now configure Nginx and PHP on our web server machine. Log into the machine
    by running the `vagrant ssh web1` command.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: 'Once logged in, we need to finish configuring nginx. This can be done by editing
    the default config file with the following command:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We now need to add PHP into this file to allow nginx to handle PHP files and
    code. The first line we need to edit is the index file list, so find the following
    line:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Chanage it to this:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The final change we need to perform is to add the PHP handling. This requires
    us to edit a block inside the main `server {}` block. The following snippet is
    the code we need to edit:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Change the preceding snippet to the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now save and close the file. If you want to, you can use the `sudo nginx -t`
    command to test the code and syntax of the config file you have just edited. A
    successful message is as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00073.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
- en: 'Let''s now restart nginx to apply the new settings; to do so, run the following
    command:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To confirm PHP has been installed and is working, create a `test.php` file
    within the `/var/www/html/` directory. Within the `test.php` file, add the following
    lines:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Save the file and in your web browser on your host machine, open `http://10.0.0.50/test.php`
    . You should now see the PHP info page, as shown in the following screenshot:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00074.jpeg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
- en: 'While we''re here, we should go back into the `test.php` file and edit its
    contents. So, we are now going to create a basic PHP script that connects to our
    MySQL database and retrieves some data. Edit the file to contain the following
    snippets:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This is a very basic script to help get you started. This script is not secure
    and does not necessarily follow the PHP best practices. It would not be recommended
    to use this script in a production environment.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Before we can continue, we must set up the MySQL server on our other Vagrant
    machine; otherwise, the PHP script will fail as there is no database available.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: MySQL configuration
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's finish our setup by installing and configuring the MySQL database. At
    the end of this section, you should see the final working code, as well as your
    web server accessing the database server via PHP.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: It is not recommended to use this setup in a production environment. We are
    not following security best practices but are instead setting things up with basic
    configuration.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to configure the MySQL database:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: First, let's SSH into the database machine by running the `vagrant ssh db1`
    command.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now install MySQL by running the following command: `run sudo apt-get install
    mysql-server`.'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll now be asked to set a root password. This can be anything as we are not
    using this as a production environment. You will then be asked to repeat and confirm
    the root password.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: You can now log into MySQL via the terminal by running `mysql -u root -p`. Enter
    the root password that you just set.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'We must now create a basic MySQL user that has the correct privileges to access
    the database outside of the localhost address and network. Without this, we would
    not be able to access the database from the `web1` machine, so run the following
    commands:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We can now create a table and enter some test data, which will be accessed
    via PHP on the `web1` machine. Run the following commands to create a new database,
    a new table, and insert some data:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You can now exit the MySQL CLI tool. We must now configure one last MySQL setting
    that will allow connections from our web1 machine. We need to edit the `mysqld.cnf`
    config file, which can be done by running the following command:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Look for the following line:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Change it to the following:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You can now save the file and run the following command. This will restart
    MySQL so it is using the new configuration:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can now exit the MySQL CLI and visit `http://10.0.0.50/test.php` to access
    our database, as shown in the following screenshot:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00075.jpeg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You have successfully set up Vagrant multi-machine so it uses
    two machines as a web server and database architecture.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we learned about Vagrant''s multi-machine feature and created
    two use cases: load balancing with three machines and a web server and database
    architecture with two machines.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 8](part0196.html#5QTE80-d86fec2f29de42f086efd11bc5538d9c), *Exploring
    Vagrant Plugins and Syncing Files*, we will learn about Vagrant plugins and how
    to sync files between a host machine and a Vagrant guest machine.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](part0196.html#5QTE80-d86fec2f29de42f086efd11bc5538d9c)，*探索Vagrant插件与文件同步*，我们将学习Vagrant插件以及如何在主机和Vagrant客机之间同步文件。
