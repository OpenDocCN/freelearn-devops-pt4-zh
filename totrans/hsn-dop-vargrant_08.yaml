- en: Exploring Vagrant Plugins and Syncing Files
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 Vagrant 插件和同步文件
- en: 'In this chapter, we will cover powerful, additional functionality in Vagrant.
    We will learn about Vagrant plugins and syncing files between the host machine
    and guest machine. By the end of this chapter, you will have a good understanding
    of the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍 Vagrant 中强大且额外的功能。我们将学习 Vagrant 插件以及如何在主机和客户机之间同步文件。到本章结束时，你将对以下内容有一个较好的理解：
- en: Understanding Vagrant plugins
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 Vagrant 插件
- en: Managing Vagrant plugins
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理 Vagrant 插件
- en: Vagrant plugin commands and subcommands
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vagrant 插件命令和子命令
- en: Finding, installing, and using a Vagrant plugin
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找、安装和使用 Vagrant 插件
- en: Vagrant file syncing
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vagrant 文件同步
- en: Syncing files – shared folders, Rsync, and NFS
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件同步 — 共享文件夹、Rsync 和 NFS
- en: Understanding Vagrant plugins
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解 Vagrant 插件
- en: Vagrant provides many options and features, but when you require something that
    isn't available, you can extend this functionality in the form of a plugin. Vagrant
    provides a powerful and robust internal API that is easy to use and flexible to
    develop with. Vagrant actually uses its own API for many core features.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 提供了许多选项和功能，但当你需要的功能不可用时，可以通过插件的形式扩展其功能。Vagrant 提供了一个强大且灵活的内部 API，易于使用且开发灵活。Vagrant
    实际上为许多核心功能使用了自己的 API。
- en: The anatomy of a Vagrant plugin
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vagrant 插件的构成
- en: 'There are multiple parts of a Vagrant plugin. Some parts are for development
    and others are for the general use of the plugin. We''ll focus on two core elements:
    **gem** and **bundler**.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 插件由多个部分组成。有些部分用于开发，其他部分则用于插件的常规使用。我们将重点关注两个核心部分：**gem** 和 **bundler**。
- en: Gem
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gem
- en: 'A gem is a specific file written in Ruby that uses the `.gem` file extension.
    A gem is made up of three parts: the code that includes the logic, tests, and
    utilities; documentation; and a gemspec that includes information about the author
    and other metadata. The gem file is the core part of the Vagrant plugin and is
    the code that is run when you use the plugin in your Vagrant machine.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: gem 是一个特定的 Ruby 文件，使用 `.gem` 文件扩展名。gem 由三部分组成：包括逻辑、测试和实用工具的代码；文档；以及包含作者信息和其他元数据的
    gemspec。gem 文件是 Vagrant 插件的核心部分，并且是你在 Vagrant 虚拟机中使用插件时运行的代码。
- en: bundler
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: bundler
- en: bundler is an application that Vagrant uses and interfaces with to manage the
    plugin and plugin dependencies. It is often used in Ruby projects to manage gems
    and gem versioning. You will often see bundler's output in the console when an
    installation of a vagrant plugin fails. Because Vagrant plugins are written in
    Ruby and saved as a gem file, using bundler is a great choice.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: bundler 是 Vagrant 使用并与之交互的应用程序，用于管理插件及其插件依赖。它通常用于 Ruby 项目中，用于管理 gem 以及 gem 的版本控制。你经常会在安装
    Vagrant 插件失败时在控制台中看到 bundler 的输出。由于 Vagrant 插件是用 Ruby 编写并保存为 gem 文件，使用 bundler
    是一个很好的选择。
- en: Managing Vagrant plugins
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理 Vagrant 插件
- en: 'In this section, we will cover general plugin management, including installation
    and uninstallation. The most useful command when managing a Vagrant plugin is
    the `list` command. Run the following command to view what plugins you have installed
    on your system:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将讨论插件的常规管理，包括安装和卸载。管理 Vagrant 插件时最常用的命令是 `list` 命令。运行以下命令可以查看你在系统上安装了哪些插件：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There is a chance that you do not have any plugins installed and you will see
    a `No plugins installed` message. If you do have a plugin installed, then you
    will see a list similar to the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 有可能你没有安装任何插件，这时你会看到 `No plugins installed` 消息。如果你已经安装了插件，你会看到类似以下的插件列表：
- en: '![](img/00076.jpeg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00076.jpeg)'
- en: Vagrant plugin installation methods
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vagrant 插件安装方法
- en: 'To start using a plugin with Vagrant, you must first install it on your system.
    There are currently two ways to install a plugin: you can use a local file or
    a gem source. Let''s explore both options.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 Vagrant 插件，你必须先在系统上安装它。目前有两种安装插件的方式：你可以使用本地文件或 gem 源。我们将探讨这两种方式。
- en: Installing a Vagrant plugin from a local file
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从本地文件安装 Vagrant 插件
- en: Installing a plugin from a local source is fairly quick and easy. You may have
    a local file because you have developed the plugin yourself or have been given
    this plugin code privately by a friend or from your company.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 从本地源安装插件相当快捷且简单。你可能有本地文件，因为你自己开发了该插件，或者朋友或公司私下提供了此插件代码给你。
- en: 'The local file will use the `.gem` extension. To install the plugin, you must
    know the location relative to the folder that you want it to be installed/used
    in. I''m going to install the plugin, which is called `testplugin.gem` and can
    be found in my `test-plugin` folder within my current Vagrant project directory.
    Here is an example of the command:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本地文件将使用 `.gem` 扩展名。要安装插件，你必须知道相对于你希望安装/使用插件的文件夹的位置。我将安装名为 `testplugin.gem` 的插件，它位于当前
    Vagrant 项目目录中的 `test-plugin` 文件夹里。以下是要运行的示例命令：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Vagrant and the bundler will now attempt to locate and install the plugin.
    If it cannot be found, you will receive the following error message:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 和 bundler 将尝试定位并安装插件。如果无法找到插件，将显示以下错误信息：
- en: '![](img/00077.gif)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00077.gif)'
- en: 'If there is a problem with the plugin, such as a syntax error in the gem file,
    you will see a message similar to this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果插件有问题，比如 gem 文件中的语法错误，你将看到类似以下的消息：
- en: '![](img/00078.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00078.jpeg)'
- en: Installing a Vagrant plugin from a known gem source
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从已知的 gem 源安装 Vagrant 插件
- en: The second way to install a plugin is from a known gem source. A known gem source
    is a remote repository that the bundler system will attempt to locate and install
    a gem from. The most popular gem source is RubyGems, which is a ruby gem-hosting
    service.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 安装插件的第二种方式是从已知的 gem 源安装。已知的 gem 源是一个远程仓库，bundler 系统将尝试从中定位并安装 gem。最流行的 gem 源是
    RubyGems，这是一个 Ruby gem 托管服务。
- en: 'Let''s install a new plugin via this method. Here is an example command to
    run:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过这种方法安装一个新插件。以下是要运行的示例命令：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You will learn more about installing plugins and managing plugins in the coming
    sections.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在接下来的章节中学习更多关于安装和管理插件的内容。
- en: Vagrant plugin commands and subcommands
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vagrant 插件命令和子命令
- en: The `plugin` command within Vagrant offers a number of commands and subcommands.
    We have covered these in [Chapter 7](part0183.html#5EGMU0-d86fec2f29de42f086efd11bc5538d9c),
    *Multi-Machine*, but we'll use this as a basic reference and reminder.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 中的 `plugin` 命令提供了多个命令和子命令。我们在[第七章](part0183.html#5EGMU0-d86fec2f29de42f086efd11bc5538d9c)《多机配置》中已经介绍过这些内容，*多机配置*，但我们将在这里作为基本参考和提醒。
- en: 'You can view a list of plugin commands by running the `vagrant plugin help`
    command. Let''s dive a little deeper into each available plugin subcommand:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行 `vagrant plugin help` 命令查看插件命令的列表。让我们深入了解每个可用插件子命令：
- en: To remove all user-installed plugins and plugin data, run the `vagrant plugin
    expunge` command.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要删除所有用户安装的插件和插件数据，运行 `vagrant plugin expunge` 命令。
- en: To install a plugin, run the `vagrant plugin install` command. Additional parameters
    are required and can be seen by running the `vagrant plugin install -h` command.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要安装插件，运行 `vagrant plugin install` 命令。需要额外的参数，可以通过运行 `vagrant plugin install
    -h` 命令查看。
- en: To install a license for a  proprietary vagrant plugin, run the `vagrant plugin
    license` command. Additional parameters are required and can be seen by running
    the `vagrant plugin license -h` command.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要为专有的 Vagrant 插件安装许可证，运行 `vagrant plugin license` 命令。需要额外的参数，可以通过运行 `vagrant
    plugin license -h` 命令查看。
- en: To view a list of vagrant plugins installed, run the `vagrant plugin list` command.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要查看已安装的 Vagrant 插件列表，运行 `vagrant plugin list` 命令。
- en: To try to repair a broken plugin/issue during installation, run the `vagrant
    plugin repair` command.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要尝试修复插件损坏或安装过程中的问题，运行 `vagrant plugin repair` 命令。
- en: To uninstall a vagrant plugin, run the `vagrant plugin uninstall` command. Additional
    parameters are required and can be seen by running the `vagrant plugin uninstall
    -h` command.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要卸载 Vagrant 插件，运行 `vagrant plugin uninstall` 命令。需要额外的参数，可以通过运行 `vagrant plugin
    uninstall -h` 命令查看。
- en: To update a vagrant plugin, run the `vagrant plugin update` command. Additional
    parameters are required and can be seen by running the `vagrant plugin update
    -h` command.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要更新 Vagrant 插件，运行 `vagrant plugin update` 命令。需要额外的参数，可以通过运行 `vagrant plugin
    update -h` 命令查看。
- en: In further sections, we will use these commands in more real-world scenarios
    and learn how to interact with vagrant plugins.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在后续章节中，我们将把这些命令应用到更真实的场景中，学习如何与 Vagrant 插件进行互动。
- en: Finding, installing, and using a Vagrant plugin
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查找、安装和使用 Vagrant 插件
- en: In this section, we will learn how to find, instal, and use a Vagrant plugin.
    This will give you a good understanding of the Vagrant plugin ecosystem and some
    tips to find a good plugin.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何查找、安装和使用 Vagrant 插件。这将帮助你更好地理解 Vagrant 插件生态系统，并提供一些查找好插件的技巧。
- en: 'There is no official repository or website for listing Vagrant plugins (such
    as the Vagrant cloud for Vagrant boxes), but there are a few websites you can
    use to help you find that perfect plugin:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 插件没有官方的仓库或网站（像 Vagrant boxes 的 Vagrant cloud），但有一些网站可以帮助你找到完美的插件：
- en: RubyGems ([https://rubygems.org/](https://rubygems.org/))
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RubyGems ([https://rubygems.org/](https://rubygems.org/))
- en: GitHub ([https://github.com/](https://github.com/))
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub ([https://github.com/](https://github.com/))
- en: Search engines
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索引擎
- en: Community-updated GitHub that lists popular plugins ([https://github.com/hashicorp/vagrant/wiki/Available-Vagrant-Plugins](https://github.com/hashicorp/vagrant/wiki/Available-Vagrant-Plugins))
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社区更新的 GitHub，列出了流行的插件 ([https://github.com/hashicorp/vagrant/wiki/Available-Vagrant-Plugins](https://github.com/hashicorp/vagrant/wiki/Available-Vagrant-Plugins))
- en: RubyGems and GitHub are both code-hosting-based websites and offer powerful
    search facilities. I've found Google to be very useful when searching for plugins.
    Try using different search terms to find a plugin that matches your requirements.
    An example would be `vagrant plugin dns` or `vagrant dns plugins` if I were looking
    for a plugin to manage or interact with DNS in Vagrant.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: RubyGems 和 GitHub 都是基于代码托管的网站，并提供强大的搜索功能。当搜索插件时，我发现 Google 非常有用。尝试使用不同的搜索词来找到符合要求的插件。例如，如果我正在寻找一个用于管理或与
    Vagrant 中的 DNS 交互的插件，可以尝试 `vagrant plugin dns` 或 `vagrant dns plugins`。
- en: Installing a Vagrant plugin
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Vagrant 插件
- en: 'Let''s install a plugin from the RubyGems website. I''ve searched for `vagrant` and
    found one called vagrant-hostsupdater, which is currently version `1.1.1.160` and
    has just over 500,000 downloads. Here is a screenshot of the plugin in the RubyGems
    search results:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从 RubyGems 网站安装一个插件。我搜索了 `vagrant`，找到了一个名为 vagrant-hostsupdater 的插件，它的当前版本是
    `1.1.1.160`，并且已经有超过 50 万次下载。以下是插件在 RubyGems 搜索结果中的截图：
- en: '![](img/00079.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00079.jpeg)'
- en: This plugin will attempt to edit your `/etc/hosts` file by adding and removing
    hosts when Vagrant machines are created and destroyed, respectively. This means
    that you can access the Vagrant machine by a domain name such as `machine.dev` instead
    of `192.168.10.10`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个插件会尝试在 Vagrant 虚拟机创建和销毁时编辑你的 `/etc/hosts` 文件，添加或删除主机。这意味着你可以通过像 `machine.dev`
    这样的域名而不是 `192.168.10.10` 来访问 Vagrant 虚拟机。
- en: 'We can install this plugin by running the following command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行以下命令来安装这个插件：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You should see an output similar to this:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到类似于以下内容的输出：
- en: '![](img/00080.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00080.jpeg)'
- en: 'We can verify that this has been installed by running the `vagrant plugin list` command
    as shown here:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过运行 `vagrant plugin list` 命令来验证该插件是否已安装，如下所示：
- en: '![](img/00081.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00081.jpeg)'
- en: 'Let''s now use and test our Vagrant plugin. This specific plugin is configured
    in the Vagrantfile, so let''s create a basic one to get started:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用并测试我们的 Vagrant 插件。这个特定的插件已在 Vagrantfile 中配置，所以我们先创建一个基本的 Vagrantfile
    来开始使用：
- en: Run the `vagrant init -m` command.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `vagrant init -m` 命令。
- en: 'Edit your Vagrantfile to include the following code:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑你的 Vagrantfile，添加以下代码：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We create a basic Vagrant machine to test our plugin. The main lines we are
    concerned with are the `config.vm.network` and `config.vm.hostname` lines as they
    are required by our plugin.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个基本的 Vagrant 虚拟机来测试我们的插件。我们关注的主要行是 `config.vm.network` 和 `config.vm.hostname`，因为它们是插件所必需的。
- en: We have created a Ubuntu machine that uses a private static IP address, the
    hostname of `vagrant.dev`, and a basic shell provisioner to update the system
    and then install the nginx web server. This will allow us to quickly and easily
    see that everything has worked as nginx has a default page available on port 80
    once it's been installed and is running.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个使用私有静态 IP 地址、主机名为 `vagrant.dev` 的 Ubuntu 虚拟机，并使用基本的 shell 提供者来更新系统，然后安装
    nginx Web 服务器。这将使我们能够快速查看一切是否正常工作，因为 nginx 安装并启动后，默认页面可以通过 80 端口访问。
- en: Run the `vagrant up --provision` command to get the box up and running.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `vagrant up --provision` 命令来启动并运行 Vagrant。
- en: 'You should now see a message from the `[vagrant-hostsupdater]` plugin, which
    will attempt to enter the machine''s IP address and host name into the `/etc/hosts`
    file. The hosts file is an important system file and requires root permission
    to edit. You will be asked for the root password for your host machine:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该会看到来自 `[vagrant-hostsupdater]` 插件的消息，它会尝试将虚拟机的 IP 地址和主机名写入 `/etc/hosts`
    文件。`hosts` 文件是一个重要的系统文件，需要 root 权限才能编辑。系统会提示你输入主机机器的 root 密码：
- en: '![](img/00082.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00082.jpeg)'
- en: 'To test that the plugin works, we can check the `/etc/hosts` file before we
    start up the vagrant machine. Here is a basic example. If you have edited yours
    before, you may see more entries:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试插件是否正常工作，我们可以在启动 vagrant 机器之前检查 `/etc/hosts` 文件。以下是一个基本示例。如果你之前编辑过文件，可能会看到更多条目：
- en: '![](img/00083.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00083.jpeg)'
- en: 'Once you have entered your root password and the plugin successfully writes
    to the `/etc/hosts` file, you should see this message as part of the `vagrant
    up` process:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你输入了 root 密码并且插件成功写入了 `/etc/hosts` 文件，你应该在 `vagrant up` 过程的一部分中看到这个消息：
- en: '![](img/00084.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00084.jpeg)'
- en: 'Once the machine is up and running, check out the `/etc/hosts` file again to
    see whether a new entry has been added. All new entries are added at the bottom
    of the file. In the following screenshot,  we can see that our entry is there,
    the IP address is `192.168.100.23` and the hostname is `vagrant.dev`. The plugin
    has also added in a comment using the `#` character:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦机器启动并运行，重新检查 `/etc/hosts` 文件，看看是否添加了新条目。所有新条目都会被添加到文件的底部。在下面的截图中，我们可以看到我们的条目已经添加，IP
    地址是 `192.168.100.23`，主机名是 `vagrant.dev`。插件还使用 `#` 字符添加了注释：
- en: '![](img/00085.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00085.jpeg)'
- en: 'Great! Let''s now test the hostname and see what we get. While we are in the
    terminal, we can run the `curl vagrant.dev` command, which will attempt to load
    that URL and return the contents. We can see that the default nginx page has been
    returned:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 很棒！现在让我们测试主机名，看看会得到什么。在终端中，我们可以运行 `curl vagrant.dev` 命令，它将尝试加载该 URL 并返回内容。我们可以看到返回的是默认的
    nginx 页面：
- en: '![](img/00086.jpeg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00086.jpeg)'
- en: 'Ping the hostname to see whether there is a live connection, packet loss, and
    what sort of connection times we get. As the machine is local, the speed will
    be very quick (less than 1 ms) and we will see the IP address returned, which
    in this case is `192.168.100.23`:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Ping 主机名以查看是否有活动连接、丢包情况以及我们得到的连接时间。由于机器是本地的，速度非常快（小于 1 毫秒），我们将看到返回的 IP 地址，这个例子中是
    `192.168.100.23`：
- en: '![](img/00087.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00087.jpeg)'
- en: '`vagrant halt` the machine. You''ll see in the terminal that the plugin will
    now kick into action and remove that entry from the `/etc/hosts` file. You''ll
    need to enter the root password again:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`vagrant halt` 机器。你会在终端中看到插件开始起作用并从 `/etc/hosts` 文件中移除该条目。你需要再次输入 root 密码：'
- en: '![](img/00088.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00088.jpeg)'
- en: Uninstalling a Vagrant plugin
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 卸载 Vagrant 插件
- en: 'Let''s now uninstall our `vagrant-hostsupdater` plugin. We can do this by running
    the `vagrant plugin uninstall vagrant-hostsupdater` command. If you are unsure
    what the plugin is called, you can run the `vagrant plugin list` command to view
    a list of available plugins on your system. The plugin should now be removed,
    you should see the `Successfully uninstalled` message:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们卸载 `vagrant-hostsupdater` 插件。我们可以通过运行 `vagrant plugin uninstall vagrant-hostsupdater`
    命令来卸载它。如果你不确定插件的名称，可以运行 `vagrant plugin list` 命令查看系统中已安装的插件列表。插件现在应该已经被移除，你应该看到
    `Successfully uninstalled` 消息：
- en: '![](img/00089.jpeg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00089.jpeg)'
- en: 'We can also verify the plugin has been removed by running the `vagrant plugin
    list` command. We should see the `No plugins installed` message (as long as you
    do not have any other plugins installed on your system):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过运行 `vagrant plugin list` 命令来验证插件是否已被移除。我们应该看到 `No plugins installed`
    消息（前提是系统中没有其他插件）：
- en: '![](img/00090.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00090.jpeg)'
- en: Vagrant file-syncing
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vagrant 文件同步
- en: Syncing files is the way of sharing files between your host machine and the
    guest machine running within Vagrant. It allows you to edit files on your host
    machine and see the changes in your guest machine or vice versa.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 文件同步是共享主机和在 Vagrant 中运行的虚拟机之间文件的方式。它允许你在主机上编辑文件，并能在虚拟机中看到这些变化，反之亦然。
- en: 'Vagrant calls this **synced folders** and offers five ways to do this:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 称之为 **同步文件夹**，并提供了五种方式来实现：
- en: Basic syncing
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本同步
- en: SMB
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SMB
- en: VirtualBox
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VirtualBox
- en: RSync
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RSync
- en: NFS
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NFS
- en: In this section, we will cover basic usage, RSync, and NFS.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍基本用法、RSync 和 NFS。
- en: Setting up synced folders
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置同步文件夹
- en: To get started, let's create a Vagrantfile by running the `vagrant init -m`
    command.  We'll start with basic usage-syncing, then look at RSync, and then finish
    with NFS.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用，先通过运行 `vagrant init -m` 命令创建一个 Vagrantfile。我们将从基本的同步用法开始，然后介绍 RSync，最后讲解
    NFS。
- en: We'll create a file on our host system, make some changes to the contents, and
    then view that file within our Vagrant machine. We'll then edit the file on the
    Vagrant machine and view its changes on the host machine. This will prove that
    the file can be edited both ways via the host and the Vagrant machine.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在宿主系统上创建一个文件，修改其内容，然后在 Vagrant 机器上查看该文件。接着，我们将在 Vagrant 机器上编辑文件，并查看它在宿主机上的变化。这将证明文件可以通过宿主机和
    Vagrant 机器双向编辑。
- en: We'll need to create and edit the `config.vm.synced_folder` setting within our
    Vagrantfile.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在 Vagrantfile 中创建并编辑 `config.vm.synced_folder` 设置。
- en: Synced folders with basic usage
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本用法的同步文件夹
- en: 'The basic usage of synced folders in Vagrant is easy to get set up. We can
    get started with just a basic Vagrantfile:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 中同步文件夹的基本用法很容易设置。我们可以通过一个基本的 Vagrantfile 就开始：
- en: '[PRE5]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Let's focus on line 3\. The `synced_folder` config takes two parameters. The
    first parameter is the folder on your host machine and the second parameter is
    the folder within the Vagrant machine.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们先关注第三行。`synced_folder` 配置接受两个参数。第一个参数是宿主机上的文件夹，第二个参数是 Vagrant 机器内的文件夹。
- en: In this example, we are setting the first parameter to `"."`, which is the immediate
    directory that the Vagrantfile is in on our host machine. In the second parameter,
    we are setting the folder to `"/home/vagrant/files"` on the Vagrant machine.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将第一个参数设置为 `"."`，这是宿主机上 Vagrantfile 所在的当前目录。在第二个参数中，我们将文件夹设置为 Vagrant
    机器上的`"/home/vagrant/files"`。
- en: The default folder on the Vagrant machine is `"/home/vagrant"`, but if we try
    and set this as the second parameter, we will be unable to access the Vagrant
    machine via SSH as an error will occur when that folder is mounted on `"/home/vagrant/.ssh/authorized_keys"`
    as the SSH keys cannot be uploaded and checked.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 机器上的默认文件夹是`"/home/vagrant"`，但如果我们尝试将其设置为第二个参数，当该文件夹挂载到`"/home/vagrant/.ssh/authorized_keys"`时，会发生错误，导致无法通过
    SSH 访问 Vagrant 机器，因为 SSH 密钥无法上传和检查。
- en: 'Let''s now test our new folder-syncing configuration:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来测试新的文件夹同步配置：
- en: 'Run the `vagrant up --provision` command. You should see a similar output from
    the Vagrant machine:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `vagrant up --provision` 命令。你应该会看到 Vagrant 机器输出类似的内容：
- en: '![](img/00091.jpeg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00091.jpeg)'
- en: 'We can now SSH into the machine to see whether the `files` folder has been
    created (if not already available). You can run the `ls` command to list files
    and folders within your current directory. You should now see the `files` folder:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过 SSH 进入机器，查看 `files` 文件夹是否已经创建（如果尚未创建）。你可以运行 `ls` 命令来列出当前目录中的文件和文件夹。现在应该能看到
    `files` 文件夹：
- en: '![](img/00092.jpeg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00092.jpeg)'
- en: 'Let''s now create a file within the `files` folder:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们在 `files` 文件夹内创建一个文件：
- en: Move into the folder by running the `cd files` command
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行 `cd files` 命令进入该文件夹
- en: Create a text file by running the touch `test-file.txt` command
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行 `touch test-file.txt` 命令创建一个文本文件
- en: Add some content by running the `echo "Hello from Vagrant!" > test-file.txt`
    command
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行`echo "Hello from Vagrant!" > test-file.txt`命令添加一些内容
- en: We can now exit out of the Vagrant machine by running the `exit` command. You
    can now search for the file within the host machine's directory. You can do this
    by using the terminal or a text editor. I will be using the Atom text editor.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过运行`exit`命令退出 Vagrant 机器。现在，你可以在宿主机的目录中查找文件。你可以通过终端或文本编辑器来完成这项操作。我将使用
    Atom 文本编辑器。
- en: 'In the following screenshot, we can see the file that we created in the directory
    and its contents:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，我们可以看到我们在目录中创建的文件及其内容：
- en: '![](img/00093.jpeg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00093.jpeg)'
- en: Congratulations! You have successfully configured synced folders and synced
    a file between your host machine and vagrant machine.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经成功配置了同步文件夹，并在宿主机和 Vagrant 机器之间同步了文件。
- en: Synced folders with RSync
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 RSync 的同步文件夹
- en: When using RSync as a *synced folder* option in Vagrant, it's a slightly more
    complex setup. RSync can be used when other options for file-syncing are not available,
    such as the other option we have looked at, basic usage, or in the next section,
    which is the NFS option.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 Vagrant 中使用 RSync 作为 *同步文件夹* 选项时，它的设置稍微复杂一些。当其他文件同步选项不可用时（例如我们之前看过的基本用法，或下一个章节中的
    NFS 选项），可以使用 RSync。
- en: 'To start using RSync, our Vagrant file just needs an extra parameter on the
    `config.vm.synced_folders` option:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 RSync，我们的 Vagrantfile 只需要在 `config.vm.synced_folders` 选项中添加一个额外的参数：
- en: '[PRE6]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To use this option, both the host machine and Vagrant machine must have `rsync` installed.
    Vagrant will attempt to install `rsync` on the Vagrant machine if possible, if
    not, it will display an error.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用此选项，主机和 Vagrant 虚拟机都必须安装 `rsync`。如果可能，Vagrant 会尝试在 Vagrant 虚拟机上安装 `rsync`，如果不能，它会显示错误信息。
- en: There are additional parameters available to use with the RSync option. Please
    view the official documentation for the most up-to-date list. These include the
    ability to exclude certain files.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些额外的参数可以与 RSync 选项一起使用。请查看官方文档，获取最新的参数列表。这些包括排除某些文件的功能。
- en: RSync traditionally does a one-time sync from the host to guest machine unless
    the `rsync_auto` option is set to `true` in the Vagrantfile. This is the default
    value in Vagrant, but can be changed by setting the `rsync_auto` option to `false`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: RSync 通常会执行一次性从主机到虚拟机的同步，除非在 Vagrantfile 中将 `rsync_auto` 选项设置为 `true`。这是 Vagrant
    的默认值，但可以通过将 `rsync_auto` 选项设置为 `false` 来更改。
- en: Synced folders with NFS
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 NFS 同步文件夹
- en: Using NFS as a solution to syncing folders between the host and Vagrant machine
    can often offer performance benefits or better suit the environment you need.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 NFS 作为同步主机和 Vagrant 虚拟机之间文件夹的解决方案，通常可以提供性能优势或更好地适应所需的环境。
- en: 'Using NFS is very similar to the `basic usage` version of synced folders in
    Vagrant. Our Vagrant file just needs an extra parameter on the `config.vm.synced_folders` option:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 NFS 与 Vagrant 中的 `basic usage` 版本的同步文件夹非常相似。我们的 Vagrant 文件只需要在 `config.vm.synced_folders`
    选项中添加一个额外的参数：
- en: '[PRE7]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We have added the `type` option with the value of `nfs`. For this to work, the
    OS within the Vagrant machine must support NFS.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了 `type` 选项，值为 `nfs`。要使其生效，Vagrant 虚拟机中的操作系统必须支持 NFS。
- en: The host machine must also support NFS by running the NFS server daemon, which
    is the `nfsd` package. This comes pre-installed on macOS X, but you may be required
    to install it if your host machine is running Linux.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 主机也必须支持 NFS，通过运行 NFS 服务器守护进程 `nfsd` 软件包。macOS X 默认预装此包，但如果主机使用 Linux，你可能需要自行安装它。
- en: Vagrant NFS-synced folders do not work on Windows hosts. If you attempt to configure
    this in the Vagrantfile, Vagrant will just ignore it. If you're using VirtualBox
    as a provider, you will also need to configure private networking when using NFS.
    If you are using VMWare, you don't need to worry.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 的 NFS 同步文件夹在 Windows 主机上无法使用。如果你尝试在 Vagrantfile 中配置此选项，Vagrant 会忽略它。如果你使用
    VirtualBox 作为提供程序，在使用 NFS 时，还需要配置私有网络。如果你使用 VMWare，则无需担心。
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this section, we learned about two of Vagrant's main features. We looked
    at plugins in Vagrant and learned about what they are, how they work, and how
    to install/uninstall and use them. We also looked at file-syncing within Vagrant
    to understand how we can sync files between the host system and Vagrant machine
    using a number of different methods.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了 Vagrant 的两个主要功能。我们了解了 Vagrant 中的插件，学习了它们是什么、如何工作，以及如何安装/卸载和使用它们。我们还了解了
    Vagrant 中的文件同步，明白了如何使用多种不同的方法在主机系统和 Vagrant 虚拟机之间同步文件。
- en: In [Chapter 9](part0215.html#6D18U0-d86fec2f29de42f086efd11bc5538d9c), *Shell
    Scripts - Provisioning*, we will start part one of our provisioning series of
    chapters. We will learn about provisioning within Vagrant and how to provision
    a Vagrant machine using shell scripting. This will lead us into later chapters
    that focus on provisioning with configuration-management tools such as Chef.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 9 章](part0215.html#6D18U0-d86fec2f29de42f086efd11bc5538d9c)，*Shell 脚本 -
    配置*，我们将开始配置系列章节的第一部分。我们将学习 Vagrant 中的配置，并了解如何使用 Shell 脚本来配置 Vagrant 虚拟机。接下来的章节将深入介绍如何使用配置管理工具（如
    Chef）进行配置。
