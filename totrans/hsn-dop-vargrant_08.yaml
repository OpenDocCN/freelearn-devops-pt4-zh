- en: Exploring Vagrant Plugins and Syncing Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover powerful, additional functionality in Vagrant.
    We will learn about Vagrant plugins and syncing files between the host machine
    and guest machine. By the end of this chapter, you will have a good understanding
    of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Vagrant plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing Vagrant plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vagrant plugin commands and subcommands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding, installing, and using a Vagrant plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vagrant file syncing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Syncing files – shared folders, Rsync, and NFS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Vagrant plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vagrant provides many options and features, but when you require something that
    isn't available, you can extend this functionality in the form of a plugin. Vagrant
    provides a powerful and robust internal API that is easy to use and flexible to
    develop with. Vagrant actually uses its own API for many core features.
  prefs: []
  type: TYPE_NORMAL
- en: The anatomy of a Vagrant plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are multiple parts of a Vagrant plugin. Some parts are for development
    and others are for the general use of the plugin. We''ll focus on two core elements:
    **gem** and **bundler**.'
  prefs: []
  type: TYPE_NORMAL
- en: Gem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A gem is a specific file written in Ruby that uses the `.gem` file extension.
    A gem is made up of three parts: the code that includes the logic, tests, and
    utilities; documentation; and a gemspec that includes information about the author
    and other metadata. The gem file is the core part of the Vagrant plugin and is
    the code that is run when you use the plugin in your Vagrant machine.'
  prefs: []
  type: TYPE_NORMAL
- en: bundler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: bundler is an application that Vagrant uses and interfaces with to manage the
    plugin and plugin dependencies. It is often used in Ruby projects to manage gems
    and gem versioning. You will often see bundler's output in the console when an
    installation of a vagrant plugin fails. Because Vagrant plugins are written in
    Ruby and saved as a gem file, using bundler is a great choice.
  prefs: []
  type: TYPE_NORMAL
- en: Managing Vagrant plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will cover general plugin management, including installation
    and uninstallation. The most useful command when managing a Vagrant plugin is
    the `list` command. Run the following command to view what plugins you have installed
    on your system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'There is a chance that you do not have any plugins installed and you will see
    a `No plugins installed` message. If you do have a plugin installed, then you
    will see a list similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00076.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Vagrant plugin installation methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start using a plugin with Vagrant, you must first install it on your system.
    There are currently two ways to install a plugin: you can use a local file or
    a gem source. Let''s explore both options.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing a Vagrant plugin from a local file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing a plugin from a local source is fairly quick and easy. You may have
    a local file because you have developed the plugin yourself or have been given
    this plugin code privately by a friend or from your company.
  prefs: []
  type: TYPE_NORMAL
- en: 'The local file will use the `.gem` extension. To install the plugin, you must
    know the location relative to the folder that you want it to be installed/used
    in. I''m going to install the plugin, which is called `testplugin.gem` and can
    be found in my `test-plugin` folder within my current Vagrant project directory.
    Here is an example of the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Vagrant and the bundler will now attempt to locate and install the plugin.
    If it cannot be found, you will receive the following error message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00077.gif)'
  prefs: []
  type: TYPE_IMG
- en: 'If there is a problem with the plugin, such as a syntax error in the gem file,
    you will see a message similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00078.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Installing a Vagrant plugin from a known gem source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The second way to install a plugin is from a known gem source. A known gem source
    is a remote repository that the bundler system will attempt to locate and install
    a gem from. The most popular gem source is RubyGems, which is a ruby gem-hosting
    service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s install a new plugin via this method. Here is an example command to
    run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You will learn more about installing plugins and managing plugins in the coming
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: Vagrant plugin commands and subcommands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `plugin` command within Vagrant offers a number of commands and subcommands.
    We have covered these in [Chapter 7](part0183.html#5EGMU0-d86fec2f29de42f086efd11bc5538d9c),
    *Multi-Machine*, but we'll use this as a basic reference and reminder.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can view a list of plugin commands by running the `vagrant plugin help`
    command. Let''s dive a little deeper into each available plugin subcommand:'
  prefs: []
  type: TYPE_NORMAL
- en: To remove all user-installed plugins and plugin data, run the `vagrant plugin
    expunge` command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To install a plugin, run the `vagrant plugin install` command. Additional parameters
    are required and can be seen by running the `vagrant plugin install -h` command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To install a license for a  proprietary vagrant plugin, run the `vagrant plugin
    license` command. Additional parameters are required and can be seen by running
    the `vagrant plugin license -h` command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To view a list of vagrant plugins installed, run the `vagrant plugin list` command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To try to repair a broken plugin/issue during installation, run the `vagrant
    plugin repair` command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To uninstall a vagrant plugin, run the `vagrant plugin uninstall` command. Additional
    parameters are required and can be seen by running the `vagrant plugin uninstall
    -h` command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To update a vagrant plugin, run the `vagrant plugin update` command. Additional
    parameters are required and can be seen by running the `vagrant plugin update
    -h` command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In further sections, we will use these commands in more real-world scenarios
    and learn how to interact with vagrant plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Finding, installing, and using a Vagrant plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn how to find, instal, and use a Vagrant plugin.
    This will give you a good understanding of the Vagrant plugin ecosystem and some
    tips to find a good plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is no official repository or website for listing Vagrant plugins (such
    as the Vagrant cloud for Vagrant boxes), but there are a few websites you can
    use to help you find that perfect plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: RubyGems ([https://rubygems.org/](https://rubygems.org/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub ([https://github.com/](https://github.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search engines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Community-updated GitHub that lists popular plugins ([https://github.com/hashicorp/vagrant/wiki/Available-Vagrant-Plugins](https://github.com/hashicorp/vagrant/wiki/Available-Vagrant-Plugins))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RubyGems and GitHub are both code-hosting-based websites and offer powerful
    search facilities. I've found Google to be very useful when searching for plugins.
    Try using different search terms to find a plugin that matches your requirements.
    An example would be `vagrant plugin dns` or `vagrant dns plugins` if I were looking
    for a plugin to manage or interact with DNS in Vagrant.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a Vagrant plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s install a plugin from the RubyGems website. I''ve searched for `vagrant` and
    found one called vagrant-hostsupdater, which is currently version `1.1.1.160` and
    has just over 500,000 downloads. Here is a screenshot of the plugin in the RubyGems
    search results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00079.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This plugin will attempt to edit your `/etc/hosts` file by adding and removing
    hosts when Vagrant machines are created and destroyed, respectively. This means
    that you can access the Vagrant machine by a domain name such as `machine.dev` instead
    of `192.168.10.10`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can install this plugin by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see an output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00080.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can verify that this has been installed by running the `vagrant plugin list` command
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00081.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s now use and test our Vagrant plugin. This specific plugin is configured
    in the Vagrantfile, so let''s create a basic one to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the `vagrant init -m` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit your Vagrantfile to include the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We create a basic Vagrant machine to test our plugin. The main lines we are
    concerned with are the `config.vm.network` and `config.vm.hostname` lines as they
    are required by our plugin.
  prefs: []
  type: TYPE_NORMAL
- en: We have created a Ubuntu machine that uses a private static IP address, the
    hostname of `vagrant.dev`, and a basic shell provisioner to update the system
    and then install the nginx web server. This will allow us to quickly and easily
    see that everything has worked as nginx has a default page available on port 80
    once it's been installed and is running.
  prefs: []
  type: TYPE_NORMAL
- en: Run the `vagrant up --provision` command to get the box up and running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now see a message from the `[vagrant-hostsupdater]` plugin, which
    will attempt to enter the machine''s IP address and host name into the `/etc/hosts`
    file. The hosts file is an important system file and requires root permission
    to edit. You will be asked for the root password for your host machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00082.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To test that the plugin works, we can check the `/etc/hosts` file before we
    start up the vagrant machine. Here is a basic example. If you have edited yours
    before, you may see more entries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00083.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have entered your root password and the plugin successfully writes
    to the `/etc/hosts` file, you should see this message as part of the `vagrant
    up` process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00084.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the machine is up and running, check out the `/etc/hosts` file again to
    see whether a new entry has been added. All new entries are added at the bottom
    of the file. In the following screenshot,  we can see that our entry is there,
    the IP address is `192.168.100.23` and the hostname is `vagrant.dev`. The plugin
    has also added in a comment using the `#` character:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00085.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Great! Let''s now test the hostname and see what we get. While we are in the
    terminal, we can run the `curl vagrant.dev` command, which will attempt to load
    that URL and return the contents. We can see that the default nginx page has been
    returned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00086.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Ping the hostname to see whether there is a live connection, packet loss, and
    what sort of connection times we get. As the machine is local, the speed will
    be very quick (less than 1 ms) and we will see the IP address returned, which
    in this case is `192.168.100.23`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00087.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '`vagrant halt` the machine. You''ll see in the terminal that the plugin will
    now kick into action and remove that entry from the `/etc/hosts` file. You''ll
    need to enter the root password again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00088.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Uninstalling a Vagrant plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now uninstall our `vagrant-hostsupdater` plugin. We can do this by running
    the `vagrant plugin uninstall vagrant-hostsupdater` command. If you are unsure
    what the plugin is called, you can run the `vagrant plugin list` command to view
    a list of available plugins on your system. The plugin should now be removed,
    you should see the `Successfully uninstalled` message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00089.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also verify the plugin has been removed by running the `vagrant plugin
    list` command. We should see the `No plugins installed` message (as long as you
    do not have any other plugins installed on your system):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00090.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Vagrant file-syncing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Syncing files is the way of sharing files between your host machine and the
    guest machine running within Vagrant. It allows you to edit files on your host
    machine and see the changes in your guest machine or vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: 'Vagrant calls this **synced folders** and offers five ways to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: Basic syncing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SMB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VirtualBox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RSync
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NFS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we will cover basic usage, RSync, and NFS.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up synced folders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started, let's create a Vagrantfile by running the `vagrant init -m`
    command.  We'll start with basic usage-syncing, then look at RSync, and then finish
    with NFS.
  prefs: []
  type: TYPE_NORMAL
- en: We'll create a file on our host system, make some changes to the contents, and
    then view that file within our Vagrant machine. We'll then edit the file on the
    Vagrant machine and view its changes on the host machine. This will prove that
    the file can be edited both ways via the host and the Vagrant machine.
  prefs: []
  type: TYPE_NORMAL
- en: We'll need to create and edit the `config.vm.synced_folder` setting within our
    Vagrantfile.
  prefs: []
  type: TYPE_NORMAL
- en: Synced folders with basic usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The basic usage of synced folders in Vagrant is easy to get set up. We can
    get started with just a basic Vagrantfile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Let's focus on line 3\. The `synced_folder` config takes two parameters. The
    first parameter is the folder on your host machine and the second parameter is
    the folder within the Vagrant machine.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we are setting the first parameter to `"."`, which is the immediate
    directory that the Vagrantfile is in on our host machine. In the second parameter,
    we are setting the folder to `"/home/vagrant/files"` on the Vagrant machine.
  prefs: []
  type: TYPE_NORMAL
- en: The default folder on the Vagrant machine is `"/home/vagrant"`, but if we try
    and set this as the second parameter, we will be unable to access the Vagrant
    machine via SSH as an error will occur when that folder is mounted on `"/home/vagrant/.ssh/authorized_keys"`
    as the SSH keys cannot be uploaded and checked.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now test our new folder-syncing configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `vagrant up --provision` command. You should see a similar output from
    the Vagrant machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00091.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can now SSH into the machine to see whether the `files` folder has been
    created (if not already available). You can run the `ls` command to list files
    and folders within your current directory. You should now see the `files` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00092.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s now create a file within the `files` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: Move into the folder by running the `cd files` command
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a text file by running the touch `test-file.txt` command
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add some content by running the `echo "Hello from Vagrant!" > test-file.txt`
    command
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can now exit out of the Vagrant machine by running the `exit` command. You
    can now search for the file within the host machine's directory. You can do this
    by using the terminal or a text editor. I will be using the Atom text editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following screenshot, we can see the file that we created in the directory
    and its contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00093.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You have successfully configured synced folders and synced
    a file between your host machine and vagrant machine.
  prefs: []
  type: TYPE_NORMAL
- en: Synced folders with RSync
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using RSync as a *synced folder* option in Vagrant, it's a slightly more
    complex setup. RSync can be used when other options for file-syncing are not available,
    such as the other option we have looked at, basic usage, or in the next section,
    which is the NFS option.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start using RSync, our Vagrant file just needs an extra parameter on the
    `config.vm.synced_folders` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: To use this option, both the host machine and Vagrant machine must have `rsync` installed.
    Vagrant will attempt to install `rsync` on the Vagrant machine if possible, if
    not, it will display an error.
  prefs: []
  type: TYPE_NORMAL
- en: There are additional parameters available to use with the RSync option. Please
    view the official documentation for the most up-to-date list. These include the
    ability to exclude certain files.
  prefs: []
  type: TYPE_NORMAL
- en: RSync traditionally does a one-time sync from the host to guest machine unless
    the `rsync_auto` option is set to `true` in the Vagrantfile. This is the default
    value in Vagrant, but can be changed by setting the `rsync_auto` option to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: Synced folders with NFS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using NFS as a solution to syncing folders between the host and Vagrant machine
    can often offer performance benefits or better suit the environment you need.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using NFS is very similar to the `basic usage` version of synced folders in
    Vagrant. Our Vagrant file just needs an extra parameter on the `config.vm.synced_folders` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We have added the `type` option with the value of `nfs`. For this to work, the
    OS within the Vagrant machine must support NFS.
  prefs: []
  type: TYPE_NORMAL
- en: The host machine must also support NFS by running the NFS server daemon, which
    is the `nfsd` package. This comes pre-installed on macOS X, but you may be required
    to install it if your host machine is running Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Vagrant NFS-synced folders do not work on Windows hosts. If you attempt to configure
    this in the Vagrantfile, Vagrant will just ignore it. If you're using VirtualBox
    as a provider, you will also need to configure private networking when using NFS.
    If you are using VMWare, you don't need to worry.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we learned about two of Vagrant's main features. We looked
    at plugins in Vagrant and learned about what they are, how they work, and how
    to install/uninstall and use them. We also looked at file-syncing within Vagrant
    to understand how we can sync files between the host system and Vagrant machine
    using a number of different methods.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 9](part0215.html#6D18U0-d86fec2f29de42f086efd11bc5538d9c), *Shell
    Scripts - Provisioning*, we will start part one of our provisioning series of
    chapters. We will learn about provisioning within Vagrant and how to provision
    a Vagrant machine using shell scripting. This will lead us into later chapters
    that focus on provisioning with configuration-management tools such as Chef.
  prefs: []
  type: TYPE_NORMAL
