- en: Shell Scripts - Provisioning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to look at Vagrant provisioning. We will focus
    on basic concepts and also on shell-script provisioning. By the end of this chapter,
    you will have a good understanding of:'
  prefs: []
  type: TYPE_NORMAL
- en: Vagrant provisioning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding configuration management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vagrant provisioning with a file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vagrant shell provisioning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vagrant inline scripts, external scripts, and script arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Vagrant provisioning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The idea of provisioning within Vagrant is to create a script that prepares
    and installs software onto the Vagrant machine. Provisioning can be done inline
    in the Vagrantfile using a shell provisioner or external file. Provisioning happens
    during the *vagrant up* process as the machine is being created.
  prefs: []
  type: TYPE_NORMAL
- en: 'When provisioning a Vagrant machine, there are a number of options:'
  prefs: []
  type: TYPE_NORMAL
- en: Install software
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alter configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operating-system-level changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding configuration management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In later chapters, we will learn more about using configuration-management tools
    with Vagrant for provisioning. While talking about Vagrant provisioning, this
    will be a good introduction to configuration management.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration-management tools include Chef, Ansible, and Salt. We will be focusing
    on these three tools. Configuration management is essentially another word for
    provisioning and is used to set a machine to a desired state – this could be installing
    software or configuring certain settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Configuration-management tools often have a special file type or syntax that
    is used. We will be focusing on the following software:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ansible** (uses playbooks)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chef** (uses cookbooks)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker** (uses images)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Puppet** (uses manifests)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Salt** (uses states)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuration management is often used when a more powerful and flexible option
    is needed in your development and deployment process. A benefit of using configuration-management
    tools is the separation of concerns. Essentially, you don't rely on Vagrant to
    handle too much during the process in case you have any issues or you want the
    flexibility of being able to change which configuration-management tool you use.
    This could be a company decision due to budget or security.
  prefs: []
  type: TYPE_NORMAL
- en: Basic usage of Vagrant provisioning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started with provisioning our Vagrant machine, let's create a new Vagrantfile.
    We can do this by running the `vagrant init -m` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within our Vagrantfile, we can define a provisioning block by using the `config.vm.provision`
    code and pass in a value to declare what type of provisioner we will be using.
    In the following example, we will be using the shell type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the shell provisioner, you can then define additional values inline:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Or use a configuration block, where we define our shell value within pipe characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Both options would, in this example, update the system packages. Using the configuration
    block method is much easier to read, as each value can have its own line.
  prefs: []
  type: TYPE_NORMAL
- en: Vagrant provisioning commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once you''ve created your provisioner values, it''s time to apply those changes
    to your Vagrant machine. There are a few options:'
  prefs: []
  type: TYPE_NORMAL
- en: When you run the `vagrant up` command for the first time, your machine will
    read the Vagrantfile and run the provisioner script.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have a machine that has been halted or you want to force a provision,
    you can run `vagrant up --provision` to enable provisioning.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also use the `--no-provision` flag to disable provisioning.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Within the provision the config block, you can set a key of `run` and a value
    of `always`, which will force the provisioner script to run every time a machine
    is started up. An example of this would be `config.vm.provision "shell", inline:
    "sudo apt-get update -y", run: "always"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The final option will only work if the `--no-provision` flag has not been set.
  prefs: []
  type: TYPE_NORMAL
- en: Vagrant provisioning with a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Vagrant file option gives you an easy way to copy a file from your host
    machine onto the Vagrant machine during the startup process.
  prefs: []
  type: TYPE_NORMAL
- en: This can be a great way of uploading a configuration file that would otherwise
    need to be created by the software or possibly required before the software can
    start working. An example of this would be an `.env` file that holds environment
    variables, such as database-connection details or special keys.
  prefs: []
  type: TYPE_NORMAL
- en: There are two options available – you can copy/upload a single file or an entire
    directory from your host machine to the guest Vagrant machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using this option, we set the provision option to `file` in our Vagrantfile,
    for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Single file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Uploading a file from the host machine to the guest machine is quick and easy.
    We just need to set the provision type as `file`, the source as the file on our
    host, and the destination as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This will copy our `secret.env` file into the home folder of our Vagrant guest
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'If that `secret.env` file does not exist, Vagrant will throw an error during
    the startup process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00094.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If the file does exist, then you will see something similar to the following
    in your console during the startup process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00095.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'And after running the `vagrant ssh` command and connecting to the guest machine,
    we can run the `ls` command to list the files within the directory. We will now
    see the `secret.env` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00096.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another option is to upload a directory of files and folders from your host
    machine into your guest machine. This can be useful if you require multiple assets,
    such as images or configuration files, in a separate and managed way.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s very similar to the file option when adding this option into our Vagrantfile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We set our source value to be a folder within the current Vagrant directory.
    You can specify an absolute path if the folder is located elsewhere on your host
    system.
  prefs: []
  type: TYPE_NORMAL
- en: The destination folder can use the `$HOME` variable to create the new folder
    in the home folder of our guest machine. This folder can have the same name or
    a new name on the guest machine. It depends on your requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can run the `vagrant up --provision` command to start up the Vagrant machine.
    We will see the message again in the output during the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00097.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the machine is up-and-running, we can run the `vagrant ssh` command machine
    and run the `ls` command. We will then see the folder in the home directory. If
    we run the `ls newsecretfolder/` command to view the contents of our new folder,
    we will see the `secret.env` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00098.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Please note**:** When using this option compared to the synced folder featured,
    any changes made on the host/local machine will not be reflected on the guest
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: Vagrant Shell provisioner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've seen how to use a basic shell provisioner, but depending on your setup
    and required environment, you may have quite a large, complex provisioner script.
    This script may require arguments or environment variables, or may be linked to
    an external resource hosted elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will look at the many options available when using shell
    as a Vagrant provisioner. This is often used by beginners but can be very powerful
    and flexible, especially if you do not want to set up configuration-management
    tools such as Chef and Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using the shell provisioner, there are optional configuration settings
    available:'
  prefs: []
  type: TYPE_NORMAL
- en: '**args**: These are arguments that you specify for use by the provisioning
    script. This can be a string or an array of values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**env**: This is a list of key-value pairs (hash) as environment variables
    to the script.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**binary**: Vagrant by default replaces Windows line endings with Unix line
    endings, unless you change this value to true.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**privileged**: This allows you to change whether the script will be run by
    a privileged user, such as `sudo`. The default value is true.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**upload_path**: This is the path on the guest machine that the script will
    be uploaded to. The SSH user account must have access to write to that folder/file
    location, otherwise this will fail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**keep_color**: Vagrant currently outputs success messages in green and error
    messages in red. If you change this value to false, this behavior will be stopped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**name**: This can be used to identify the provisioner output if there are
    many different provisioners running in the process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**powershell_args**: These are arguments that can be passed to the provisioner
    if you are using PowerShell on Windows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**powershell_elevated_interactive**: This is used when trying to elevate a
    script in interactive mode on Windows. You must enable auto-login on Windows and
    the user must be logged in for this to work.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**md5**: The MD5 value (checksum) is used to verify downloaded shell files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sha1**: The SHA1 value (checksum) is used to verify downloaded shell files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sensitive**: If you specify values in the `env` option, it will mark these
    as sensitive and not show them in the output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll focus on inline scripts, external scrips, and script arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Inline Scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've briefly touched upon inline scripts, but there are more options available
    that can be added into the configuration for provisioning.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can run a script inline using the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Or you could create a variable outside the block and use that variable for
    a cleaner and easier-to-read format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You can experiment with both options and see what works best for you. You may
    find that, when working on a development team, they already have a syntax you
    must follow when creating and editing Vagrantfiles.
  prefs: []
  type: TYPE_NORMAL
- en: External scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another option when using shell provisioning is to use external scripts. This
    can be a good way to keep your script separate, which means it's easier to manage
    and helps keep your Vagrantfile tidy.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use an external script, we can use the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, the `"[FILELOCATION]"` placeholder could be one of
    two different options:'
  prefs: []
  type: TYPE_NORMAL
- en: A local script on your machine; an example value would be `script.sh`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A remote script hosted externally; an example value would be `https://example.com/dev/script.sh`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One benefit of using a remote script is that anyone who is using that Vagrantfile
    to run a specific machine configuration will always get the most up-to-date version.
    If you are on a team of developers and a change is made to the provisioner script,
    all of the other developers just need to run the `vagrant up --provision` command
    and will then be using the same machine.
  prefs: []
  type: TYPE_NORMAL
- en: Script arguments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another great feature of shell provisioning is the option of using arguments.
    These are values that can be passed in as variables and can be easier to manage
    when data is dynamic.
  prefs: []
  type: TYPE_NORMAL
- en: Script arguments can be passed in as a string or as an array. A string is useful
    when only one argument is required and an array is useful when multiple arguments
    are required.
  prefs: []
  type: TYPE_NORMAL
- en: Script argument – string
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is a syntax example when using a string script argument in your
    Vagrantfile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'When the *vagrant up* process hits the provisioning stage, we will see an output
    echoed onto the screen with a value of `this is a test`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00099.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Please note: You must remember to properly escape your string. In this case,
    we are wrapping the string within single quotes. The system would essentially
    see the ''this is a test'' echo, which would not throw any errors.'
  prefs: []
  type: TYPE_NORMAL
- en: Script argument – array
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is the syntax example when using an array script argument in your Vagrantfile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly to the string argument option, when this provisioner is started within
    the *vagrant up* process, we will see an output echoed on the screen with a value
    of `this is a test`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00100.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Please note: It''s not necessary to quote the individual values in the array.
    It is still recommended you escape any special characters to minimize any errors.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about Vagrant provisioning and configuration management.
    We provisioned a Vagrant machine using the basic usage type, file type, and shell
    type using inline and external scripts with arguments.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 10](part0230.html#6RB1C0-d86fec2f29de42f086efd11bc5538d9c), *Ansible
    - Using Ansible to Provision a Vagrant Box*, we will learn more about the Ansible
    configuration-management tool, and use that to provision a Vagrant machine. We
    will learn how to use Ansible and Ansible playbooks, including the syntax.
  prefs: []
  type: TYPE_NORMAL
