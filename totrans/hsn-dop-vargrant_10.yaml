- en: Ansible - Using Ansible to Provision a Vagrant Box
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the second part in our provisioning series, we will be learning about Ansible
    and how to use it to provision a Vagrant machine. The following are the topics
    we''re going to cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Ansible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Ansible on macOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provisioning Vagrant using Ansible on the host machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provisioning Vagrant using Ansible on the guest machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible Playbooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will feel confident using Ansible to provision
    Vagrant machines. You will have a good understanding of how Ansible works and
    will have links to Vagrant, and will be able to use Ansible on both the host machine
    and Vagrant machine by using Playbooks to configure exactly what you need.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Ansible is an open source piece of software used to make *IT automation simple* and
    offers *automation for everyone*. Ansible is a tool used for configuration management,
    software provisioning, and application deployment. It''s a powerful tool that
    offers many features. These features include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: It can run locally on the host or guest machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has an extensive plugin ecosystem
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can orchestrate infrastructure using many cloud providers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be installed on many different operating systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has simple inventory management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has simple and powerful automation with Playbooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Well-written and extensive documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ansible offers a minimal approach to provisioning your software with an easy
    to learn syntax and is built to be reliable and secure. We'll learn more about
    Ansible as we work through this chapter by installing it, creating and testing
    Playbooks, and provisioning a Vagrant machine.
  prefs: []
  type: TYPE_NORMAL
- en: Some more interesting facts about Ansible are that it is part of Red Hat, it
    is written in Python and PowerShell, its first release was in February 2012, and
    there is a web-based interface called Ansible Tower that can be used to make managing
    Ansible even easier.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this first part, we will learn how to install Ansible on our host machine,
    which in this instance is the macOS. Later in this chapter, we will learn how
    to install Ansible on Ubuntu, which will be running inside our guest Vagrant machine.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Ansible on macOS High Sierra (version 10.13)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we can start provisioning our Vagrant machine using Ansible, we first
    need to install it on our host machine. We won''t look at any advanced installations – just
    the basics to get Ansible up and running on our machine. If you are using another
    operating system, then please feel free to use the excellent Ansible docs available
    at [https://docs.ansible.com/](https://docs.ansible.com/):'
  prefs: []
  type: TYPE_NORMAL
- en: We first need to visit the Installation Guide page at [https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html](https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is a list of supported operating systems, but we need to click on the Latest
    Releases on macOS section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here, we will see that the preferred option is to install Ansible via `pip`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can check to see whether you have pip installed by running `pip -v`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00101.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you do not have it installed, then you can run the `sudo easy_install pip`
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00102.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: You'll need to enter your system password as the command requires `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now install Ansible by running the `sudo pip install ansible` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00103.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Again, you will need to enter your system password as the command requires `sudo`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we can check that Ansible has been successfully installed by running
    the `ansible --version` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00104.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can see that I have the latest version installed: 2.6.3.'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations – you have successfully installed Ansible! We can now start
    to configure and provision our Vagrant machine.
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning Vagrant using Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look at two different ways of provisioning Vagrant
    with Ansible. The first will involve running Ansible on our host (macOS) machine
    and the second will involve running Ansible on our guest (Ubuntu) machine running
    inside Vagrant.
  prefs: []
  type: TYPE_NORMAL
- en: '**Please Note:** We will be using the ubuntu/xenial64 box and the version number
    is `virtualbox, 20180510.0.0`.'
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning Vagrant using Ansible on the host machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s set up a basic Vagrant environment and provision it using Ansible from
    our host machine. We''ll learn how to configure Ansible in the Vagrantfile and
    install software into our Vagrant guest machine running Ubuntu:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a new Vagrantfile in a new directory to start afresh. We can run
    the `vagrant init -m` command to do this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In our Vagrant file, we''ll set the box as Ubuntu by adding in the `config.vm.box
    = "ubuntu/xenial64"` line and also the networking line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now create a `provision` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Save the Vagrant file and exit your text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you now run the `vagrant up --provision` command, you will see an error
    during the final provisioning stage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00105.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: This is because Ansible and Vagrant cannot find the playbook `vagrant_playbook.yml`.
    In the same directory as your Vagrantfile, we will now create our playbook file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add in the following code (we''ll go through this later so that you know exactly
    what it does):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Please note: The Playbook file is very strict with regards to its formatting
    and syntax. You may only use spaces and not tabs in the YAML file. If you have
    any issues, try removing all spaces and adding natural indent spaces (1 space
    for top level, 2 spaces for child, and so on). You can use a YAML code/syntax
    validator tool online (This is the website/tool that I used: [http://www.yamllint.com](http://www.yamllint.com/)).'
  prefs: []
  type: TYPE_NORMAL
- en: This markup will install the latest version of Nginx onto the Vagrant machine.
    It will then start the Nginx service so that it will be up and running, ready
    to use. You may need to run the `vagrant destroy -f` command first if you already
    have a machine running.
  prefs: []
  type: TYPE_NORMAL
- en: Run the `vagrant up --provision` command to start the startup process and get
    Ansible running. You'll see a lot of new coloured output at the provisioning stage,
    and this will be Ansible installing and configuring Nginx.
  prefs: []
  type: TYPE_NORMAL
- en: 'The provisioner will start running `ansible_local` as we specified in the Vagrantfile:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00106.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'It will then run the ansible-playbook handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00107.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, you will see an overview of what Ansible has done (or sometimes not
    done, which results in a red failure). We can see here that the green `ok=3` value
    means that 3 items have been run successfully, and the yellow `changed=1` value
    means that one item has been changed successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00108.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We should now be able to access our Vagrant machine using the IP address of
    `10.10.10.10` as we set the networking config in the Vagrantfile.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up your browser to that IP address and you should see the default Nginx
    welcome screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00109.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You have successfully installed Nginx using Ansible to provision
    Vagrant from your host machine. We covered quite a lot here, but in the next section
    we will learn more about playbooks.
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning Vagrant using Ansible on the guest machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've successfully provisioned our Vagrant machine and installed the
    Nginx service using the host method, we can learn how to provision Vagrant using
    Ansible on the guest (Vagrant) machine.
  prefs: []
  type: TYPE_NORMAL
- en: This method is much simpler as it allows everything to be done within the guest
    machine. You do not require any additional software on your host machine. Vagrant
    will intelligently try and install Ansible on the guest machine if it cannot be
    found or accessed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps are similar to the previous steps, but we''ll be adding
    some additional configuration into our Vagrantfile:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the `vagrant init -m` command to create a new Vagrantfile (you may need
    to clear our the current directory or use a new, empty directory if you have followed
    the previous steps).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In our Vagrant file, we''ll set the box to be Ubuntu by adding in the `config.vm.box
    = "ubuntu/xenial64"` line and also the networking line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now create a `provision` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Save the Vagrantfile and run the `vagrant up --provision` command to get the
    Vagrant machine up and running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We''ll see a similar process here until Vagrant gets to the provisioning stage.
    Our guest machine does not have Ansible installed, so it will start to install
    it. We can see the `ansible_local` provisioner being used here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00110.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Since we stated that the install mode would be `pip` in our Vagrantfile, the
    pip package manager will now be installed onto our guest machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00111.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Vagrant provisioner will now find and run the Ansible Playbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00112.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Ansible will now run within the guest machine to install the contents of the
    Playbook. We can see in the following screenshot that Nginx was installed and
    started successfully, and that we had no failed elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00113.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can now visit `10.10.10.10` in our web browser and see the Nginx default
    page. This will confirm that Nginx has been installed successfully and that the
    service is running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00114.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s now SSH into the Vagrant guest machine by running the `vagrant ssh`
    command. Once connected, we can run the `ansible --version` command to confirm
    that Ansible has been installed on our guest system:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00115.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the Ansible version that has been installed is 2.6.3\. Within
    our Vagrantfile, we have used some additional Ansible values, which we will learn
    more about in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Additional Ansible options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vagrant supports additional options when using Ansible and Ansible local as
    a provisioner. These options allow you to add extra functionality and customization
    to the provisioning process.
  prefs: []
  type: TYPE_NORMAL
- en: Provisioner – Ansible
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''ll look at what additional options can be used with the
    Ansible provisioner:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ask_become_pass`: When set to true (boolean), it will prompt for a password
    when using the become `sudo` option in Ansible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ask_sudo_pass`: This is essentially ask_become_pass, but will be phased out
    in future versions of Vagrant. It''s used for backward compatibility.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ask_vault_pass` : When set to true (boolean), it will force Ansible to prompt
    for a vault password. Ansible Vault is used to keep sensitive data and passwords
    encrypted so that you don''t have to worry about them being visible in plain text
    in a Playbook.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`force_remote_user`: This will require Vagrant to set the `ansible_ssh_user`
    in the inventory. Ansible will use the `config.ssh.username` value from the Vagrantfile
    instead of using the `remote_user` parameters in the Ansible Playbook.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`host_key_checking`: This option will require Ansible to enable SSH host key
    checking.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`raw_ssh_args`: This option can be used in order to apply a list of OpenSSH
    client options. The value is typically an array of strings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Please note: It''s worth checking out the official Vagrant and Ansible documentation
    for more in-depth explanations of these options and to find out whether there
    is anything that you may require but are not quite sure of the name or how it''s
    applied.'
  prefs: []
  type: TYPE_NORMAL
- en: Provisioner – Ansible local
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we''ll look at what additional options can be used with the
    Ansible local Provisioner:'
  prefs: []
  type: TYPE_NORMAL
- en: '`install`: This option is enabled by default and will attempt to install Ansible
    on the guest system if it cannot be found/run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`install_mode`: This option allows you to choose how Ansible is to be installed
    on the guest system. You can choose default, `pip`, or `pip_args_only`. The default
    option will attempt to use the guest operating system''s package manager. The
    pip option will use the Python package manager. The `pip_args_only` option works
    similarly to the pip option, but does not allow Vagrant to automatically set pip
    options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pip_args`: This option is used when the `install_mode` is set to use pip.
    It allows you to pass pip arguments into the command line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`provisioning_path`: This is a path to the directory where Ansible files are
    stored. Commands such as `ansible-playbook` are run from this location.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tmp_path`: This is an absolute path on the guest machine where files can be
    stored temporarily by the Ansible local provisioner.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please note: It's worth checking out the official Vagrant and Ansible documentation
    for more in-depth explanations for these options and to find out whether there
    is anything that you may require but are not quite sure of the name or how it's
    applied.
  prefs: []
  type: TYPE_NORMAL
- en: Ansible Playbooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An Ansible Playbook is a configuration file used by Ansible. You can think
    of it as a Vagrantfile for Vagrant. It uses the YAML (Yet Another Markup Language)
    markup language as the syntax and is easily readable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at the example playbook we created in the previous section, shown
    here in the above code block, and dissect it to get a better understanding of
    what it all means:'
  prefs: []
  type: TYPE_NORMAL
- en: The first line is always three dashes to signify the beginning of the file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We must then define which hosts this applies to. These can often be defined
    in the Ansible inventory file by setting a value such as [db] and supplying an
    IP address for that node.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We then set the `sudo` value to `yes` as we require sudo/root privileges to
    install Nginx on the Vagrant guest machine.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We then move into the tasks section, which is what we want Ansible to do – the
    provisioning stage. We'll separate each task with a name section. This describes
    what we want the task to do, for example, `start nginx`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Within a task, we can define the actions. In our first one called `apt`, we
    are calling the package manager (apt-get) to install the latest version of the
    Nginx package.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We then move to our final task which makes sure the Nginx service has been started.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I hope you can see from this example that Ansible Playbooks are very easy to
    read and work down in a logical flow. You'll come across much more complex Playbooks
    and some similar ones compared to this example, but always follow the indentation
    within each block to get a better understanding of what each section does.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to provision Vagrant using Ansible on the host
    and guest machine. We've also learned what Ansible is and about Ansible Playbooks.
    If you use Ansible in your company, then I would recommend trying it with Vagrant
    to help with your development workflow.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](part0257.html#7L30I0-d86fec2f29de42f086efd11bc5538d9c), *Docker
    - Using Docker with Vagrant*, we will be continuing our series on provisioning
    by learning about Chef and how to use that configuration management tool to provision
    Vagrant. We will look at multiple Chef options (solo and client) and learn about
    Chef cookbooks.
  prefs: []
  type: TYPE_NORMAL
