- en: Chef - Using Chef to Provision a Vagrant Box
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will continue our series on provisioning Vagrant by using
    popular DevOps configuration management tools. We will be focusing on Chef and
    will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Chef
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chef Cookbook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Chef on macOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Chef Solo to provision a Vagrant machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Chef Client to provision a Vagrant machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end of this chapter, you will have a good understanding of what Chef
    is and the components that make it work. You will feel confident in using Chef
    to provision a Vagrant machine, whether that be on the host or on the Vagrant
    machine itself. You'll understand how to create a Cookbook, which can be a very
    powerful and flexible tool, so that you can manage your machine's state.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Chef
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chef is a popular configuration management tool used to configure and maintain
    servers. It was created by the company named Chef and is written in Ruby and Erlang.
    It was initially released in January 2009 and is offered in two different versions
    – free (open source) and paid (enterprise).
  prefs: []
  type: TYPE_NORMAL
- en: Chef supports and integrates with many cloud platforms such as Amazon EC2, OpenStack,
    Rackspace, and Microsoft Azure. Chef can be run in solo mode (no dependencies)
    or in client/server mode, where the client communicates with the server and sends
    information about the node that it's installed on.
  prefs: []
  type: TYPE_NORMAL
- en: Chef uses Cookbooks and recipes as part of its configuration, which we will
    focus on in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Chef Cookbook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chef uses Cookbooks as a key element in its processes and they are used to describe
    the desired state of your node/server.
  prefs: []
  type: TYPE_NORMAL
- en: 'A Chef Cookbook is an important part of configuring machines when using Chef.
    It describes the desired state of the machine. This is similar to using Playbooks
    in Ansible. The Chef Cookbook contains five key elements, which all have their
    own part to play:'
  prefs: []
  type: TYPE_NORMAL
- en: Recipes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attribute values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File distributors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These elements are often pieces of metadata that work together to create an
    overview of the machine. Let's dive deeper into these five elements to learn more
    about them.
  prefs: []
  type: TYPE_NORMAL
- en: When speaking about a node, we are referring to a machine – whether physical
    or virtual. The node could be a computer, server, network device, or another machine.
  prefs: []
  type: TYPE_NORMAL
- en: Recipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A recipe is a key part of the Cookbook. It's used to detail what exactly should
    happen with a node. It's similar to a Vagrantfile when setting the state for a
    Vagrant virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: The recipe is written in Ruby and must be added onto the node's run list, which
    will then allow the node to run that recipe. A Cookbook can use one or more recipes
    or rely on outside recipes, too.
  prefs: []
  type: TYPE_NORMAL
- en: A recipe's main aim is to manage resources. A resource could be a software package,
    service, users, groups, files, directories, cron jobs, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Templates are a specific type of file that includes embedded Ruby. These files
    use the `.erb` extension and can be used to create dynamic configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: These files can access attribute values (which you will learn about in the next
    section). This is like using variables in the files and not having to hard-code
    the settings. You could have multiple templates referencing the same attribute
    and, when one changes, it will change the value in all of the template files.
  prefs: []
  type: TYPE_NORMAL
- en: Attribute values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Attribute values in Chef are essentially settings. They are often displayed
    as key value pairs. These settings can be used inside the Cookbook.
  prefs: []
  type: TYPE_NORMAL
- en: Attributes are set in the `attributes` subdirectory of the Cookbook and can
    then be referenced in other parts of the Cookbook. Attributes can be set at the
    top (Cookbook) level but can also be overwritten at the node level by any node-specific
    settings/attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These are simply extensions to Chef such as libraries and custom resources.
    These can also be referred to as *tools*, which you can learn more about in the
    *Chef Supermarket* section.
  prefs: []
  type: TYPE_NORMAL
- en: File distributors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Static files are used to contain simple configurations. They are placed within
    the file's subdirectory and are often moved onto the node by a recipe. These files
    are likely to not be changed and can be thought of as simple, non-dynamic templates.
  prefs: []
  type: TYPE_NORMAL
- en: Chef Supermarket
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are looking for a specific Cookbook/piece of software, then you can use
    the Chef Supermarket. You can think of the Chef Supermarket like HashiCorp's Vagrant
    Cloud. It hosts Cookbooks for you to view and download. The Supermarket is easy
    to use and offers a simple, fast user interface. Their main feature is the easy-to-use
    search facility.
  prefs: []
  type: TYPE_NORMAL
- en: Search
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are looking for a specific Cookbook or just want to see what''s available,
    then you can use the powerful search function. It offers a full text search and
    a filter to help narrow down the results. You can use the search by visiting the
    Chef Supermarket home page via the following link: [https://supermarket.chef.io/](https://supermarket.chef.io/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00116.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, you can see the `Search` feature. You can search
    for specific software packages such as nginx, or something more general to see
    what is available, such as `web server`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two options when narrowing down your search. The first option is
    that you can use the Advanced Options search option, which can be found underneath
    the search bar, to the right:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00117.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, you see the Advanced Options expanded menu, which
    allows you to filter the search by Badges and/or Selected Supported Platforms.
    You can also use the text search bar at the bottom to search for a specific platform
    if it's not available in the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is currently only one Badge option available, which is partner. This
    option searches for Chef partner Cookbooks, which are Cookbooks that have been
    hand-picked by the Chef engineering team or created by them. We''ll look at the
    other filter option here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00118.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To the left of the search bar, you can select the type you wish to search.
    There are currently two options – Cookbooks and Tools. The default is Cookbooks,
    and this will search through the available Cookbooks. The Tools option will search
    through the Chef tools that are available. Tools are pieces of software that can
    be used alongside Chef – these are not plugins as such, but add-ons:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00119.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we are searching for `nginx`, which is the web
    server. You can see that it has found 43 Cookbooks and you have the option to
    sort by Most Followed and Recently Updated. You will see some important information
    such as the Cookbook version, last update date/time, supported platform, code
    to install, and follower count.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can click on the Cookbook name (in this case, `nginx`) to get more information
    about the Cookbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00120.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, you can see the Cookbook page. It includes more
    information, which includes the Cookbook creator/maintainer(s) and gives a detailed
    readme file. There are other bits of information such as dependencies, change
    log, installation instructions/options, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning Vagrant with Chef
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are four different ways to use Chef to provision a Vagrant machine that
    Vagrant supports. This means that Chef has the most options in Vagrant when it
    comes to provisioning. The four options are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Chef Solo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chef Zero
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chef Client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chef Apply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will be focusing on Chef Solo and Chef Client. This will
    give you a good mixture of provisioning on the host machine and the Vagrant machine.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Chef on macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can begin using Chef, we will first need to install it. We'll learn
    how to install Chef on the macOS operating system (the High Sierra 10.13 version).
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll be installing the Chef DK (development kit), which includes all of the
    dependencies, utilities, and the main Chef software. The list of installed software
    includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Chef client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenSSL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embedded Ruby
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RubyGems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Command-line utilites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key value stores
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parsers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Community tools such as Kitchen and ChefSpec
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Please Note: The Apple XCode software package is required before you are able
    to install Chef.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now install and test Chef on our system:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Chef DK downloads page (the following is a link to the macOS section: [https://downloads.chef.io/chefdk#mac_os_x](https://downloads.chef.io/chefdk#mac_os_x)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Find the version you are currently running on your system and click the orange
    Download button, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00121.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Run the `.dmg` file installer. You'll need to first run the installer file.
    Click on the `.pkg` file to run it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The installer will run and you''ll be prompted to move through the six steps.
    Please follow these. We will not be changing any values during this installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00122.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Once complete, you should see the *green tick* success screen. Close this window
    by clicking on the Close button. This will then allow you to move the installer
    package into the trash.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To confirm that Chef has been installed, open a terminal window and run the
    `chef -v` command, which should list the Chef version and other dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00123.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, there are many pieces of software running with Chef. There is
    the DK version, the chef-client version, the kitchen version, and more. Knowing
    these versions can come in handy if you have to debug any issues (with specific
    pieces of software) in the future.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You now have Chef installed on your system. Let's now look
    at provisioning a Vagrant machine using Chef.
  prefs: []
  type: TYPE_NORMAL
- en: Using Chef Solo to provision a Vagrant machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to previous chapters, we will stick with our example of installing the
    nginx web server on our Vagrant machine. Although this is a simple example, it
    does allow us to use a popular piece of software and configure networking, and
    is a simple way of seeing if it was a success.
  prefs: []
  type: TYPE_NORMAL
- en: Using Chef Solo as a provisioner for Vagrant is a quick and easy way to get
    started with Chef. It has no dependencies (apart from Chef itself) and can be
    used by beginners or advanced users.
  prefs: []
  type: TYPE_NORMAL
- en: We'll first need to create our Vagrantfile by running the `vagrant init -m`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside our Vagrantfile, let''s specify the box and networking for the IP address.
    Let''s also specify our provisioner and configure chef-solo while we are inside
    the Vagrantfile. Your finished file should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We have set `config.vm.provision` to `chef_solo` and within this block we are
    setting the `add_recipe` value to `nginx`. This means that we are telling Vagrant
    to specifically use the `nginx` recipe. Vagrant will look inside the `cookbooks` folder,
    which is in the root of our project (where the Vagrantfile is).
  prefs: []
  type: TYPE_NORMAL
- en: Before we can run the Vagrant machine, we need to do some Chef groundwork. Here,
    we are going to create the `nginx` recipe. We'll use the official nginx Cookbook
    from the Chef Supermarket, which can be found  via the following link: [https://supermarket.chef.io/cookbooks/nginx](https://supermarket.chef.io/cookbooks/nginx).
  prefs: []
  type: TYPE_NORMAL
- en: Be default, Vagrant will look for a `cookbooks` directory inside the project
    root (where the Vagrantfile is located). Let's first create this folder on our
    host by running the `mkdir cookbooks` command. Let's now move into this directory
    by running the `cd cookbooks` command in our terminal.
  prefs: []
  type: TYPE_NORMAL
- en: 'To satisfy the supermarket command, we''ll need a local git repository. Let''s
    create a basic repository and commit to get started. Run the following commands
    to achieve the minimum requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: '`git init`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`touch null`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`git add -A`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`git commit -m ''null''`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s install this recipe using the `knife` command-line utility that we installed
    earlier. On the supermarket page, we can see two commands. Let''s run the `install`
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This should install the `nginx` Cookbook (folder) into your Cookbooks `directory`.
    We can confirm this by running the `ls` and `ls cookbooks` commands inside our
    project directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00124.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s now run the `vagrant up --provision` command (back in the root directory,
    not in the Cookbooks directory) to start and provision the Vagrant machine. During
    the provision stage, you should see the `Running chef-solo...` message, which
    means that the provisioner has started. You will now see lots of green output,
    which is Chef starting up, installing the dependencies, and running the nginx
    Cookbook. The `nginx` service (once installed) should start running automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00125.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you now visit [`http://10.10.10.10`](http://10.10.10.10) in your browser,
    you should see nginx''s default page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00126.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You have successfully installed nginx onto a Vagrant machine
    using the Chef Solo provisioner.
  prefs: []
  type: TYPE_NORMAL
- en: This was a simple example of using Chef Solo with Vagrant. Please do not be
    fooled into thinking this technique isn't powerful. You can experiment with far
    more complicated Cookbooks.
  prefs: []
  type: TYPE_NORMAL
- en: Using Chef Client to provision a Vagrant machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although the *Chef Client* provisioner can be seen as the advanced option, it's
    actually much simpler and quicker to set up than the *Chef Solo* provisioner,
    which we looked at in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: The reason why the Chef Client provisioner is simpler and quicker is that it
    is just a client. It's essentially a zombie which does not think for itself. It
    uses a Chef Server to get its commands and Cookbook files. When managing a large
    infrastructure, using this Client-to-Server method can be a much easier way than
    having to manage multiple nodes separately.
  prefs: []
  type: TYPE_NORMAL
- en: We won't cover how to set up a Chef Server in this book, as it's beyond its
    scope, but you can learn more from the official Chef documentation website here: [https://docs.chef.io/install_server.html](https://docs.chef.io/install_server.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'There isn''t much to cover in this section, since the Chef Server handles the
    main bulk of the work, but there are some configuration settings we can add in
    the Vagrantfile. The following is an example of the provision block (inside the
    Vagrantfile):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We are using two new keys here: `chef_server_url` and `validation_key_path` –
    both of which are required to connect the Vagrant machine (in this instance, the
    node) to the Chef Server.'
  prefs: []
  type: TYPE_NORMAL
- en: We must set the Chef Server's URL and the path to the validation key (a `.pem`
    file). This will then register the Vagrant machine as a node, download the run
    list (recipes), and then provision the machine.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about provisioning a Vagrant machine with Chef.
    We did this by using Chef Cookbooks to create a recipe which controls which software
    to install onto the Vagrant machine using either Chef Solo or Chef Client.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 12](part0257.html#7L30I0-d86fec2f29de42f086efd11bc5538d9c), *Docker
    - Using Docker with Vagrant*, we will learn how to use Docker to provision a Vagrant
    machine. We will learn about Docker images, containers, and the Docker hub. We
    will then explore the multiple Docker options that are available when provisioning
    a Vagrant machine.
  prefs: []
  type: TYPE_NORMAL
