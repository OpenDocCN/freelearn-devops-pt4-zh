- en: Docker - Using Docker with Vagrant
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to provision a Vagrant machine using Docker.
    This is not to be confused with the Docker provider, which is used to power and
    manage Vagrant machines. We currently use the VirtualBox provider for this.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll dive deep into the Docker provisioner and see what is available within
    Vagrant when using Docker. Specifically, you''ll learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key components of Docker (Docker Hub, containers, and images)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to find and pull in an image from the Docker Hub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic usage such as running a container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Docker-specific configuration within Vagrant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you should have a good understanding of what Docker
    is and how it can be used as a provisioner with Vagrant.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You've probably heard of Docker—even if you've never used it. It's incredibly
    popular at the moment and is being used/adopted by many companies. Docker is a
    tool that allows you to manage your applications using a type of virtualization
    known as containerization. Applications are bundled into containers and can be
    hosted in the cloud or using your own hardware. There are various tools used to
    manage Docker containers such as Docker Swarm and Kubernetes.
  prefs: []
  type: TYPE_NORMAL
- en: Docker was released in March 2015 by Solomon Hykes. Its current release is 18.06.1
    and it is written using the Go programming language. It can run on Windows, Linux,
    and macOS.
  prefs: []
  type: TYPE_NORMAL
- en: Docker belongs to the same virtualization family as Vagrant, VMWare, and VirtualBox.
    It also belongs to the same provisioning and infrastructure family as Chef, Puppet,
    and Ansible.
  prefs: []
  type: TYPE_NORMAL
- en: There are many benefits from using Docker over other virtualization software.
    It's mainly a lightweight and faster alternative because it runs in a different
    way from traditional virtual machines.
  prefs: []
  type: TYPE_NORMAL
- en: Docker uses the Docker Engine, which sits on top of the operating system and
    shares components such as the host OS kernel, libraries, and binaries (which are
    read-only). This means that containers can be started fast and are small in size.
    Traditional virtualization uses a hypervisor that sits on top of the operating
    system; this in turn creates whole new OSes with their own libraries and binaries.
    The advantage of this is that you can package up a whole system, but this also
    means that it can be slow and large in terms of file size. Of course, both alternatives
    have their benefits, depending on your requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Key components of Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When talking about Docker, there are a few main components that you will hear
    mentioned. Let's learn more about each one in the following subsections.
  prefs: []
  type: TYPE_NORMAL
- en: Containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A container is portable, lightweight, and a package of software that has everything
    needed to run an application. A container runs on the Docker Engine and shares
    the host operating system's kernel between other containers. A container is basically
    a running instance of a Docker image.
  prefs: []
  type: TYPE_NORMAL
- en: Images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Docker image is a file that is made up of different layers. These layers include
    tools, dependencies, and system libraries, which are then used to create a container.
    There are often base images that available to use, such as the Ubuntu one. You
    can use multiple images to separate your application, for example, having an image
    for your web server (Nginx) and another for your database (MySQL).
  prefs: []
  type: TYPE_NORMAL
- en: Registry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker offers a hosted registry called Docker Hub. It allows you to browse,
    pull, and store Docker images. You can think of it like the Vagrant Cloud, which
    offers hosting for Vagrant boxes along with other features such as downloading
    and searching boxes. We'll learn more about Docker Hub in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Docker, services can be thought of as groupings of specific application logic.
    Services are often containers in production and help manage your Docker setup.
    There are specific tools that are used to manage and orchestrate Docker, such
    as Docker Swarm and Kubernetes. When you reach a certain scale or require more
    control, then these tools are useful.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Docker Hub to find Docker images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker Hub is Docker's online, hosted registry for Docker images. It allows
    you to search, pull, and store images in the cloud. It's similar to Hashicorp's
    Vagrant Cloud or the Chef Supermarket. You can access the Hub by visiting its
    website at [https://hub.docker.com/](https://hub.docker.com/)[.](https://hub.docker.com/)
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker Hub also offers some really interesting features, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Build and test your images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It links to Docker Cloud, which allows you to deploy your images to your hosts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Workflow/pipeline automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A centralized resource for container discovery
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User accounts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Public and private registries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s take a look at the Docker Hub and use the search facility to find an
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit the website at [https://hub.docker.com/](https://hub.docker.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Explore link in the top right menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll now see the Explore screen, which lists the top official repositories.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the top left, there is a search bar. Let''s search for `memcached` and view
    the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00127.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that it found 1169 repositories, and the top one is the official
    repository, with over 1 thousand stars and 10 million pulls.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now filter the search results by clicking on the drop-down that has
    the All value selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00128.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s click the top result and learn more about the official memcached repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00129.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Here, you can see lots of information related to this image. There is a Short
    Description and a Full Description. The Full Description has information regarding
    how to use the image, licensing, and different versions that are available. To
    the right, you can see the Docker Pull Command, which is `docker pull memcached`.
    This is the command that you can run to pull an image down so that you can use
    it with your installation of Docker.
  prefs: []
  type: TYPE_NORMAL
- en: Basic usage – running a container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We won't delve too deeply into running Docker as a separate tool. Our focus
    in this chapter is on using Docker to provision a Vagrant machine, which it does
    inside Vagrant during the boot up process. We will learn a few basic Docker commands—mainly
    those that are used during provisioning—to give you a better understanding of
    what is happening.
  prefs: []
  type: TYPE_NORMAL
- en: If you are unsure of what specific command you need or would like to learn more,
    then you can run the `docker` command, which will list all available commands.
    This will show you the usage, command options, management commands, and general
    commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please note: you must have Docker installed to run these commands, or you will
    get an error.'
  prefs: []
  type: TYPE_NORMAL
- en: pull
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To pull an image down from the Docker Hub, you can use the `docker pull` command.
    An example of this command would be pulling down the `nginx` image by running
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This will result in an output similar to the one shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00130.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can then check to make sure that this image is available by running the
    `docker images` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00131.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: run
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start a new container, you can use the `docker run` command. An example of
    this command would be running the `nginx` image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This will start the Nginx container. You won''t see anything on the screen
    apart from the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00132.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you open another tab in your Terminal and run the `docker ps -a` command,
    you will see any active running containers. In the following screenshot, you''ll
    see our Docker container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00133.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: stop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To stop a Docker container, you can use the `docker stop` command. An example
    of this command would be running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We have passed in the `sleepy_dijkstra` container name from the preceding example.
    We have found the image name by running `docker ps -a`. If we now run the `docker
    ps -a` command, we''ll see that the status is `Exited (0) 3 seconds ago`. In the
    following screenshot, you''ll be able to see the two commands and their output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00134.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: start
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This command is used to start a previously stopped Docker container. To do
    this, you can use the `docker start` command. An example of this command would
    be running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We have passed in the `sleepy_dijkstra` container name from the preceding example.
    We have found the image name by running `docker ps -a`. If we now run the `docker
    ps -a` command, we''ll see that the status is `Up 4 seconds`. In the following
    screenshot, you''ll be able to see the two commands and their output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00135.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: search
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can search the Docker Hub from the command line using the `docker search`
    command. An example of this command would be searching for `ubuntu` by using the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This will result in an output similar to the one shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00136.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Similar to searching on the Docker Hub website, you will be presented with a
    list of search results. These are ordered by the highest, starting at the top.
    You'll see the image name, description, star count, and whether it's official.
    You can then pull an image down using the `docker pull [imagename]` command.
  prefs: []
  type: TYPE_NORMAL
- en: Using Docker to provision a Vagrant machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've learned a bit about Docker, we can get to the fun part! In this
    section, we will go through an example of using Docker to provision a Vagrant
    machine. One thing to note is that Vagrant will attempt to install Docker so that
    you don't have to. Interestingly, Docker is run within the Vagrant machine, not
    on your host machine. You'll see this as you will be able to SSH into the Vagrant
    machine and run Docker commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s get started and provision our Vagrant machine using Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: To begin, run the `vagrant init -m` command to create a minimal Vagrantfile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In our Vagrantfile, let''s add in a provision block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We've set a few default values to get started. We are using the `"ubuntu/xenial64"` box
    and we specify that the networking should use a port forwarder from the host (`8081`)
    to the guest (`80`).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the provision block, we are setting `docker` to be our provisioner. We are
    using the `run` option and passing in the `"nginx"` image. Alongside the run option,
    we are passing in the `args` option and setting the value to `"-p 80:80"`, which
    tells Docker to publish the container''s port to the host machine. This is why
    we are setting the port forwarding to the guest `port 80`. Due to this, we can
    access the Docker container:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s run the `vagrant up` command to get the machine started. During
    the provisioning stage, you should see something similar to the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00137.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are a few steps here. First, it runs the `docker `provisioner, and then
    installs Docker onto the machine. Once installed, it will start the Docker containers
    (this is what we specified by using the `run `option in the Vagrantfile) and you''ll
    see the container output as `-- Container: nginx`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To test whether everything was successful, we can open a browser and visit
    the following link: `http://localhost:8081`. This should connect us to the container
    using Vagrant''s port forwarding:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00138.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we can see Nginx's default welcome page. This is
    great news and means everything is working as it should.
  prefs: []
  type: TYPE_NORMAL
- en: We can also SSH into the Vagrant machine and access Docker through the Terminal.
    Run the `vagrant ssh` command to gain access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once in the machine, run the `docker ps -a` command to list any actively running
    containers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00139.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, we can see the `nginx `container running.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have successfully provisioned a Vagrant machine using Docker.
    It's a fairly straightforward process, but can be very powerful. If you use Docker
    for other parts of the application lifestyle, then you can now try using it for
    development.
  prefs: []
  type: TYPE_NORMAL
- en: Docker-specific configuration in Vagrant
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it comes to the Docker-specific options in the Vagrantfile, there are none
    that are required. If do not enter any options, then Vagrant will simply attempt
    to install Docker—unless you already have it installed.
  prefs: []
  type: TYPE_NORMAL
- en: Images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want Docker to use specific images, then you can pass in an array of
    image names. In your Vagrantfile, an example would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This would attempt to pull down the `nginx` image. There are other options that
    can be used to handle images: `build_image` and  `pull_images`; we will cover
    these in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: build_image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As well as running and pulling down images, you can actually build an image
    before it is then used as part of provisioning and its process. The build is done
    on the Vagrant guest machine and must be available for Docker to access. It runs
    the `docker build` command, so all you have to do is pass in the location of the
    Dockerfile.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of using this in a Vagrantfile would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are using the `dock.build_image` key inside the provision block to
    set the directory (where our Dockerfile is located).
  prefs: []
  type: TYPE_NORMAL
- en: args
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the `build_images` key, there is an additional parameter called `args`.
    This allows you to pass in arguments that will be run as part of the `docker build`
    command. The value will be passed as a string.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add in the `--pull` flag (which always attempts to pull in the latest version
    of the image) into the build process, the Vagrantfile might look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In order to pass in multiple parameters/flags, just add them into the string.
    There is no need to use an array.
  prefs: []
  type: TYPE_NORMAL
- en: pull_images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another way to handle images during provisioning is to use the `pull_images`
    option in your Vagrantfile. This option will attempt to pull the images from the
    Docker registry and use those.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example Vagrantfile would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This code attempts to pull down the `nginx` and `mysql` images. The  `pull_images`
    option can be used multiple times and will append them, while the `images` option
    can only be used once.
  prefs: []
  type: TYPE_NORMAL
- en: run
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `run` option is used in the Vagrantfile to start and run specific Docker
    containers. This is done during the `vagrant up` process. It runs the `docker
    run` command to achieve this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s how it would be used in a Vagrantfile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we are instructing the Docker provisioner to run
    the `nginx` container. You can use the `run` option multiple times, but if you
    use the same image, then you must define seperate names/identifiers for them.
    The following is an example of using the `nginx` image twice with different names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: One can be identified as the load balancer and the other as the web server.
    You can choose the names here, but I find that descriptive ones are usually the
    best and easiest to understand.
  prefs: []
  type: TYPE_NORMAL
- en: image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is actually the default value when using the `run` option, and it's the
    first parameter you pass, for example, the image name. It can, however, be passed
    as an option, such as in the preceding example, when you wish to run two of the
    same images.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example within the provision block of your Vagrantfile would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we are referencing the `run` option and also the `image`
    option. The image we have chosen is `nginx`.
  prefs: []
  type: TYPE_NORMAL
- en: cmd
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This `cmd` option allows you to pass in a command that will be run within the
    container. If this value is omitted, then the container's default value will be
    used. This could be the `cmd` value, which is supplied in the Dockerfile.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example within the provision block of your Vagrantfile would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we are referencing the `run` option and the `cmd`
    option. The `cmd` option will simply run that command within the container. It
    just accesses the `$HOME` environment variable, which is the user's home path
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: args
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the `args` option allows you to pass in arguments to the `docker run`
    command. This is similar to the additional `args` option that's used in the `build_image`
    section. This can be useful if you require something more granular than the general
    command.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example within the provision block of your Vagrantfile would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we are referencing the `run` command and the `args`
    option. The `args` option will pass in the parameter to the `docker run` command
    when necessary. In our example, it is passing the `--name` flag with a value of
    `ubuntumain`. This will be the name of the container.
  prefs: []
  type: TYPE_NORMAL
- en: auto_assign_name
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the `auto_assign_name` option allows you to automatically name the Docker
    containers. It works by essentially passing the `--name` flag and a value. This
    is enabled by default, and the value is true. One thing to note is that any slashes
    in the image name (for example, `base/archlinux`) will be replaced with dashes
    so that the image will become `base-archlinux`. The name is selected by the first
    argument of the run.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example we are setting the `run` option value to `nginx` so
    that the container will automatically be named to `nginx`. The only way to override
    this is to set the `auto_assign_name` value to `false`, which we will do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: deamonize
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This option allows you to deamonize the containers. The default value for this
    option is true. It passes the `-d` flag into the `docker run` command. If you
    do not want to deamonize the containers, then you can set the value to false.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example within the provision block of your Vagrantfile would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we are using the `run` option and the `deamonize`
    option. The deamonize option is passing the false value to let Docker know that
    we do not want it to run as a deamon, so the `-d` flag will not be passed to Docker.
  prefs: []
  type: TYPE_NORMAL
- en: restart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This option allows you to set the restart policy for the container. The default
    value is `always`, but it also supports `no`, `unless-stopped`, and `on-failure`
    . This option can be useful if you have a specific requirement and need control
    over the restart policy for one or more of your containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example within the provision block of your Vagrantfile would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we are using the `run` option and the `restart` option.
    The restart option is passing the `no` value, which tells Docker not to restart
    when a container exits.
  prefs: []
  type: TYPE_NORMAL
- en: post_install_provisioner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the `post_install_provisioner` option offers you an easy way to run a
    provisioner once the original provisioner has run. This sounds a little confusing,
    but it essentially allows you to create a new provision block within the Docker
    one. You could use Docker as your main provisioner and then, inside, use a shell
    provisioner which runs when the Docker one has finished.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example Vagrantfile would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will run the `nginx` Docker image and then use the shell
    provisioner. The shell provisioner will run a script inside the Vagrant machine
    that simply changes the content in the default landing page of Nginx.
  prefs: []
  type: TYPE_NORMAL
- en: When you run the preceding example, you should be able to visit `http://localhost:8081`
    on your host machine (once the provisioning has completed) and see a large `Hello
    World!` message.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned about Docker and how it can be used to configure
    a Vagrant machine. We have also learned how Docker works, how to use Docker Hub,
    and the various Docker-specific Vagrantfile options that are available. You should
    now be able to experiment with Docker as a provider.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 13](part0286.html#8GO0S0-d86fec2f29de42f086efd11bc5538d9c), *Puppet
    – Using Puppet to Provision a Vagrant Box*, you will learn how to use Puppet to
    provision a Vagrant machine. We'll focus on the two main supported types—Puppet
    Apply and Puppet Agent.
  prefs: []
  type: TYPE_NORMAL
