- en: Docker - Using Docker with Vagrant
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker - 使用 Docker 与 Vagrant
- en: In this chapter, we will learn how to provision a Vagrant machine using Docker.
    This is not to be confused with the Docker provider, which is used to power and
    manage Vagrant machines. We currently use the VirtualBox provider for this.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用 Docker 配置 Vagrant 虚拟机。这与 Docker 提供者不同，Docker 提供者用于支持和管理 Vagrant
    虚拟机。目前，我们使用的是 VirtualBox 提供者。
- en: 'We''ll dive deep into the Docker provisioner and see what is available within
    Vagrant when using Docker. Specifically, you''ll learn about the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将深入探讨 Docker 提供者，了解在使用 Docker 时 Vagrant 中有哪些可用的功能。具体来说，你将学习以下内容：
- en: Understanding Docker
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Docker
- en: Key components of Docker (Docker Hub, containers, and images)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 的关键组件（Docker Hub、容器和镜像）
- en: How to find and pull in an image from the Docker Hub
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何从 Docker Hub 查找并拉取镜像
- en: Basic usage such as running a container
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本用法，如运行容器
- en: The Docker-specific configuration within Vagrant
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vagrant 中的 Docker 特定配置
- en: By the end of this chapter, you should have a good understanding of what Docker
    is and how it can be used as a provisioner with Vagrant.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你应该能够很好地理解 Docker 是什么，以及它如何作为 Vagrant 的配置工具使用。
- en: Understanding Docker
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Docker
- en: You've probably heard of Docker—even if you've never used it. It's incredibly
    popular at the moment and is being used/adopted by many companies. Docker is a
    tool that allows you to manage your applications using a type of virtualization
    known as containerization. Applications are bundled into containers and can be
    hosted in the cloud or using your own hardware. There are various tools used to
    manage Docker containers such as Docker Swarm and Kubernetes.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能听说过 Docker——即使你从未使用过。它目前非常流行，并且被许多公司采用。Docker 是一个工具，允许你使用一种称为容器化的虚拟化方式来管理应用程序。应用程序被打包到容器中，可以托管在云端或使用你自己的硬件。管理
    Docker 容器有多种工具，比如 Docker Swarm 和 Kubernetes。
- en: Docker was released in March 2015 by Solomon Hykes. Its current release is 18.06.1
    and it is written using the Go programming language. It can run on Windows, Linux,
    and macOS.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 由 Solomon Hykes 于 2015 年 3 月发布。当前版本为 18.06.1，使用 Go 编程语言编写。它可以在 Windows、Linux
    和 macOS 上运行。
- en: Docker belongs to the same virtualization family as Vagrant, VMWare, and VirtualBox.
    It also belongs to the same provisioning and infrastructure family as Chef, Puppet,
    and Ansible.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 属于与 Vagrant、VMWare 和 VirtualBox 相同的虚拟化家族。它也属于与 Chef、Puppet 和 Ansible
    相同的配置和基础设施家族。
- en: There are many benefits from using Docker over other virtualization software.
    It's mainly a lightweight and faster alternative because it runs in a different
    way from traditional virtual machines.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Docker 相对于其他虚拟化软件有很多好处。它主要是一种更轻量、更快速的替代方案，因为它的运行方式不同于传统的虚拟机。
- en: Docker uses the Docker Engine, which sits on top of the operating system and
    shares components such as the host OS kernel, libraries, and binaries (which are
    read-only). This means that containers can be started fast and are small in size.
    Traditional virtualization uses a hypervisor that sits on top of the operating
    system; this in turn creates whole new OSes with their own libraries and binaries.
    The advantage of this is that you can package up a whole system, but this also
    means that it can be slow and large in terms of file size. Of course, both alternatives
    have their benefits, depending on your requirements.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 使用 Docker 引擎，该引擎位于操作系统之上，并共享主机操作系统的内核、库和二进制文件（这些是只读的）。这意味着容器可以快速启动，并且体积小巧。传统的虚拟化使用位于操作系统之上的虚拟机管理程序（Hypervisor）；这会创建出具有自己库和二进制文件的完整新操作系统。这种方式的优点是可以打包整个系统，但也意味着它的启动较慢，并且文件体积较大。当然，这两种方法各有优缺点，具体取决于你的需求。
- en: Key components of Docker
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker 的关键组件
- en: When talking about Docker, there are a few main components that you will hear
    mentioned. Let's learn more about each one in the following subsections.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈论 Docker 时，有一些主要组件是你会听到的。接下来，我们将详细了解每个组件。
- en: Containers
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器
- en: A container is portable, lightweight, and a package of software that has everything
    needed to run an application. A container runs on the Docker Engine and shares
    the host operating system's kernel between other containers. A container is basically
    a running instance of a Docker image.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 容器是便携、轻量的，它是一个包含运行应用程序所需所有内容的软件包。容器运行在 Docker 引擎上，并与其他容器共享主机操作系统的内核。容器本质上是 Docker
    镜像的一个运行实例。
- en: Images
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 镜像
- en: A Docker image is a file that is made up of different layers. These layers include
    tools, dependencies, and system libraries, which are then used to create a container.
    There are often base images that available to use, such as the Ubuntu one. You
    can use multiple images to separate your application, for example, having an image
    for your web server (Nginx) and another for your database (MySQL).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 镜像是由不同层次组成的文件。这些层包括工具、依赖项和系统库，然后用来创建容器。通常有一些可以使用的基础镜像，比如 Ubuntu 镜像。你可以使用多个镜像来分离你的应用程序，例如，为你的
    Web 服务器（Nginx）使用一个镜像，为你的数据库（MySQL）使用另一个镜像。
- en: Registry
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册表
- en: Docker offers a hosted registry called Docker Hub. It allows you to browse,
    pull, and store Docker images. You can think of it like the Vagrant Cloud, which
    offers hosting for Vagrant boxes along with other features such as downloading
    and searching boxes. We'll learn more about Docker Hub in the following section.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 提供了一个托管注册表，称为 Docker Hub。它允许你浏览、拉取和存储 Docker 镜像。你可以将其视为 Vagrant Cloud，它提供
    Vagrant box 的托管以及其他功能，比如下载和搜索 box。在接下来的部分中，我们将深入了解 Docker Hub。
- en: Service
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务
- en: In Docker, services can be thought of as groupings of specific application logic.
    Services are often containers in production and help manage your Docker setup.
    There are specific tools that are used to manage and orchestrate Docker, such
    as Docker Swarm and Kubernetes. When you reach a certain scale or require more
    control, then these tools are useful.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Docker 中，服务可以被看作是特定应用逻辑的组合。服务通常是生产环境中的容器，帮助管理你的 Docker 设置。有一些特定的工具被用来管理和编排
    Docker，比如 Docker Swarm 和 Kubernetes。当你达到一定规模或需要更多控制时，这些工具就非常有用。
- en: Using the Docker Hub to find Docker images
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Docker Hub 查找 Docker 镜像
- en: Docker Hub is Docker's online, hosted registry for Docker images. It allows
    you to search, pull, and store images in the cloud. It's similar to Hashicorp's
    Vagrant Cloud or the Chef Supermarket. You can access the Hub by visiting its
    website at [https://hub.docker.com/](https://hub.docker.com/)[.](https://hub.docker.com/)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Hub 是 Docker 的在线托管注册表，用于 Docker 镜像。它允许你搜索、拉取和存储云中的镜像。它类似于 Hashicorp 的
    Vagrant Cloud 或 Chef 超市。你可以通过访问其网站 [https://hub.docker.com/](https://hub.docker.com/)
    来访问 Hub。
- en: 'Docker Hub also offers some really interesting features, including the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Hub 还提供了一些非常有趣的功能，包括以下内容：
- en: Build and test your images
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建和测试你的镜像
- en: It links to Docker Cloud, which allows you to deploy your images to your hosts
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它链接到 Docker Cloud，允许你将镜像部署到主机上
- en: Workflow/pipeline automation
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作流/流水线自动化
- en: A centralized resource for container discovery
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于容器发现的集中资源
- en: User accounts
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户账户
- en: Public and private registries
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公共和私有注册表
- en: 'Let''s take a look at the Docker Hub and use the search facility to find an
    image:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下 Docker Hub，并使用搜索功能查找一个镜像：
- en: Visit the website at [https://hub.docker.com/](https://hub.docker.com/).
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问网站 [https://hub.docker.com/](https://hub.docker.com/)。
- en: Click on the Explore link in the top right menu.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右上角菜单中的“探索”链接。
- en: You'll now see the Explore screen, which lists the top official repositories.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在会看到“探索”页面，它列出了最受欢迎的官方仓库。
- en: 'In the top left, there is a search bar. Let''s search for `memcached` and view
    the results:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左上角，有一个搜索框。我们来搜索 `memcached` 并查看结果：
- en: '![](img/00127.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00127.jpeg)'
- en: We can see that it found 1169 repositories, and the top one is the official
    repository, with over 1 thousand stars and 10 million pulls.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到它找到了 1169 个仓库，排名第一的是官方仓库，拥有超过一千颗星和 1000 万次拉取。
- en: 'You can now filter the search results by clicking on the drop-down that has
    the All value selected:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在可以通过点击下拉菜单来过滤搜索结果，选择了“All”选项：
- en: '![](img/00128.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00128.jpeg)'
- en: 'Let''s click the top result and learn more about the official memcached repository:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们点击第一个结果，了解更多关于官方 memcached 仓库的信息：
- en: '![](img/00129.jpeg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00129.jpeg)'
- en: Here, you can see lots of information related to this image. There is a Short
    Description and a Full Description. The Full Description has information regarding
    how to use the image, licensing, and different versions that are available. To
    the right, you can see the Docker Pull Command, which is `docker pull memcached`.
    This is the command that you can run to pull an image down so that you can use
    it with your installation of Docker.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到与该镜像相关的很多信息。包括简短描述和完整描述。完整描述中有关于如何使用镜像、许可信息和不同版本的详细内容。在右侧，你可以看到 Docker
    拉取命令 `docker pull memcached`。这是你可以运行的命令，用来拉取镜像，以便在你的 Docker 安装中使用。
- en: Basic usage – running a container
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本用法 – 运行一个容器
- en: We won't delve too deeply into running Docker as a separate tool. Our focus
    in this chapter is on using Docker to provision a Vagrant machine, which it does
    inside Vagrant during the boot up process. We will learn a few basic Docker commands—mainly
    those that are used during provisioning—to give you a better understanding of
    what is happening.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会深入探讨如何将 Docker 作为独立工具使用。本章的重点是使用 Docker 来配置 Vagrant 虚拟机，这一过程在 Vagrant 启动时进行。我们将学习一些基本的
    Docker 命令——主要是那些在配置过程中使用的命令——以帮助你更好地理解发生了什么。
- en: If you are unsure of what specific command you need or would like to learn more,
    then you can run the `docker` command, which will list all available commands.
    This will show you the usage, command options, management commands, and general
    commands.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不确定需要什么特定命令，或者想了解更多信息，可以运行`docker`命令，这将列出所有可用的命令。它会显示使用方法、命令选项、管理命令和常规命令。
- en: 'Please note: you must have Docker installed to run these commands, or you will
    get an error.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意：你必须安装 Docker 才能运行这些命令，否则会收到错误提示。
- en: pull
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pull
- en: 'To pull an image down from the Docker Hub, you can use the `docker pull` command.
    An example of this command would be pulling down the `nginx` image by running
    the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 Docker Hub 拉取镜像，可以使用`docker pull`命令。该命令的一个示例是通过运行以下命令来拉取`nginx`镜像：
- en: '[PRE0]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will result in an output similar to the one shown in the following screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个与以下截图类似的输出：
- en: '![](img/00130.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00130.jpeg)'
- en: 'We can then check to make sure that this image is available by running the
    `docker images` command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以通过运行`docker images`命令来检查该镜像是否可用：
- en: '![](img/00131.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00131.jpeg)'
- en: run
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: run
- en: 'To start a new container, you can use the `docker run` command. An example of
    this command would be running the `nginx` image:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动一个新的容器，可以使用`docker run`命令。该命令的一个示例是运行`nginx`镜像：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This will start the Nginx container. You won''t see anything on the screen
    apart from the command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动 Nginx 容器。你不会在屏幕上看到除命令外的任何内容：
- en: '![](img/00132.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00132.jpeg)'
- en: 'If you open another tab in your Terminal and run the `docker ps -a` command,
    you will see any active running containers. In the following screenshot, you''ll
    see our Docker container:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在终端中打开另一个标签页并运行`docker ps -a`命令，你将看到所有正在运行的容器。在以下截图中，你将看到我们的 Docker 容器：
- en: '![](img/00133.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00133.jpeg)'
- en: stop
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: stop
- en: 'To stop a Docker container, you can use the `docker stop` command. An example
    of this command would be running the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要停止 Docker 容器，可以使用`docker stop`命令。该命令的一个示例是运行以下命令：
- en: '[PRE2]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We have passed in the `sleepy_dijkstra` container name from the preceding example.
    We have found the image name by running `docker ps -a`. If we now run the `docker
    ps -a` command, we''ll see that the status is `Exited (0) 3 seconds ago`. In the
    following screenshot, you''ll be able to see the two commands and their output:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从前面的示例中传入了`sleepy_dijkstra`容器名称。通过运行`docker ps -a`我们找到了镜像名称。如果我们现在再次运行`docker
    ps -a`命令，我们会看到状态为`Exited (0) 3 seconds ago`。在下图中，你将看到这两个命令及其输出：
- en: '![](img/00134.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00134.jpeg)'
- en: start
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: start
- en: 'This command is used to start a previously stopped Docker container. To do
    this, you can use the `docker start` command. An example of this command would
    be running the following:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令用于启动一个之前停止的 Docker 容器。为此，你可以使用`docker start`命令。该命令的一个示例是运行以下命令：
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We have passed in the `sleepy_dijkstra` container name from the preceding example.
    We have found the image name by running `docker ps -a`. If we now run the `docker
    ps -a` command, we''ll see that the status is `Up 4 seconds`. In the following
    screenshot, you''ll be able to see the two commands and their output:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从前面的示例中传入了`sleepy_dijkstra`容器名称。通过运行`docker ps -a`我们找到了镜像名称。如果我们现在再次运行`docker
    ps -a`命令，我们会看到状态为`Up 4 seconds`。在下图中，你将看到这两个命令及其输出：
- en: '![](img/00135.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00135.jpeg)'
- en: search
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: search
- en: 'You can search the Docker Hub from the command line using the `docker search`
    command. An example of this command would be searching for `ubuntu` by using the
    following command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过命令行使用`docker search`命令来搜索 Docker Hub。该命令的一个示例是使用以下命令搜索`ubuntu`：
- en: '[PRE4]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will result in an output similar to the one shown in the following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个与以下截图类似的输出：
- en: '![](img/00136.jpeg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00136.jpeg)'
- en: Similar to searching on the Docker Hub website, you will be presented with a
    list of search results. These are ordered by the highest, starting at the top.
    You'll see the image name, description, star count, and whether it's official.
    You can then pull an image down using the `docker pull [imagename]` command.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于在Docker Hub网站上搜索，你将看到一个搜索结果列表。结果按从高到低排序。你会看到镜像名称、描述、星级评分以及是否为官方镜像。然后，你可以使用`docker
    pull [imagename]`命令拉取一个镜像。
- en: Using Docker to provision a Vagrant machine
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Docker来配置Vagrant机器
- en: Now that we've learned a bit about Docker, we can get to the fun part! In this
    section, we will go through an example of using Docker to provision a Vagrant
    machine. One thing to note is that Vagrant will attempt to install Docker so that
    you don't have to. Interestingly, Docker is run within the Vagrant machine, not
    on your host machine. You'll see this as you will be able to SSH into the Vagrant
    machine and run Docker commands.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了Docker的一些基本知识，接下来是有趣的部分！在本节中，我们将通过一个示例来演示如何使用Docker配置Vagrant机器。需要注意的是，Vagrant会尝试安装Docker，这样你就不需要手动安装了。有趣的是，Docker是在Vagrant机器内运行的，而不是在宿主机上运行。你将会看到，当你SSH进入Vagrant机器时，可以运行Docker命令。
- en: 'Let''s get started and provision our Vagrant machine using Docker:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始并使用Docker来配置我们的Vagrant机器：
- en: To begin, run the `vagrant init -m` command to create a minimal Vagrantfile.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，运行`vagrant init -m`命令来创建一个最小化的Vagrantfile。
- en: 'In our Vagrantfile, let''s add in a provision block:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的Vagrantfile中，添加一个配置块：
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We've set a few default values to get started. We are using the `"ubuntu/xenial64"` box
    and we specify that the networking should use a port forwarder from the host (`8081`)
    to the guest (`80`).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置了一些默认值来开始。我们使用`"ubuntu/xenial64"`盒子，并指定网络配置使用从宿主机（`8081`端口）到来宾机（`80`端口）的端口转发。
- en: 'In the provision block, we are setting `docker` to be our provisioner. We are
    using the `run` option and passing in the `"nginx"` image. Alongside the run option,
    we are passing in the `args` option and setting the value to `"-p 80:80"`, which
    tells Docker to publish the container''s port to the host machine. This is why
    we are setting the port forwarding to the guest `port 80`. Due to this, we can
    access the Docker container:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置块中，我们将`docker`设置为我们的配置工具。我们使用`run`选项并传入`"nginx"`镜像。同时，在`run`选项的基础上，我们传入了`args`选项并将其值设置为`"-p
    80:80"`，这告诉Docker将容器的端口映射到宿主机。这就是为什么我们将端口转发设置为来宾的`port 80`。因此，我们可以访问Docker容器：
- en: 'Now, let''s run the `vagrant up` command to get the machine started. During
    the provisioning stage, you should see something similar to the following screenshot:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们运行`vagrant up`命令以启动机器。在配置阶段，你应该会看到类似以下截图的内容：
- en: '![](img/00137.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00137.jpeg)'
- en: 'There are a few steps here. First, it runs the `docker `provisioner, and then
    installs Docker onto the machine. Once installed, it will start the Docker containers
    (this is what we specified by using the `run `option in the Vagrantfile) and you''ll
    see the container output as `-- Container: nginx`.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几个步骤。首先，它会运行`docker`配置工具，然后将Docker安装到机器上。安装完成后，它会启动Docker容器（这是我们在Vagrantfile中通过`run`选项指定的），你会看到容器的输出为`--
    容器：nginx`。
- en: 'To test whether everything was successful, we can open a browser and visit
    the following link: `http://localhost:8081`. This should connect us to the container
    using Vagrant''s port forwarding:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试是否一切成功，我们可以打开浏览器并访问以下链接：`http://localhost:8081`。这应该会通过Vagrant的端口转发将我们连接到容器：
- en: '![](img/00138.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00138.jpeg)'
- en: In the preceding screenshot, we can see Nginx's default welcome page. This is
    great news and means everything is working as it should.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们可以看到Nginx的默认欢迎页面。这是个好消息，意味着一切都在正常运行。
- en: We can also SSH into the Vagrant machine and access Docker through the Terminal.
    Run the `vagrant ssh` command to gain access.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以SSH进入Vagrant机器，通过终端访问Docker。运行`vagrant ssh`命令即可访问。
- en: 'Once in the machine, run the `docker ps -a` command to list any actively running
    containers:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入机器后，运行`docker ps -a`命令列出所有正在运行的容器：
- en: '![](img/00139.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00139.jpeg)'
- en: In the preceding screenshot, we can see the `nginx `container running.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们可以看到`nginx`容器正在运行。
- en: Congratulations! You have successfully provisioned a Vagrant machine using Docker.
    It's a fairly straightforward process, but can be very powerful. If you use Docker
    for other parts of the application lifestyle, then you can now try using it for
    development.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已成功使用 Docker 配置 Vagrant 虚拟机。这是一个相当简单的过程，但非常强大。如果您在应用的其他部分使用 Docker，那么现在可以尝试在开发中使用它。
- en: Docker-specific configuration in Vagrant
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vagrant 中 Docker 的特定配置
- en: When it comes to the Docker-specific options in the Vagrantfile, there are none
    that are required. If do not enter any options, then Vagrant will simply attempt
    to install Docker—unless you already have it installed.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Vagrantfile 中与 Docker 相关的选项，没有必须的选项。如果不输入任何选项，那么 Vagrant 将简单地尝试安装 Docker
    —— 除非您已经安装了它。
- en: Images
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Images
- en: 'If you want Docker to use specific images, then you can pass in an array of
    image names. In your Vagrantfile, an example would be as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要 Docker 使用特定的镜像，则可以在 Vagrantfile 中传递一个镜像名称数组。例如，您的 Vagrantfile 如下所示：
- en: '[PRE6]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This would attempt to pull down the `nginx` image. There are other options that
    can be used to handle images: `build_image` and  `pull_images`; we will cover
    these in the following sections.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这将尝试拉取 `nginx` 镜像。还有其他可以用来处理镜像的选项：`build_image` 和 `pull_images`；我们将在接下来的部分中讨论这些选项。
- en: build_image
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: build_image
- en: As well as running and pulling down images, you can actually build an image
    before it is then used as part of provisioning and its process. The build is done
    on the Vagrant guest machine and must be available for Docker to access. It runs
    the `docker build` command, so all you have to do is pass in the location of the
    Dockerfile.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 除了运行和拉取镜像之外，您实际上可以在作为其过程一部分使用之前构建镜像。构建是在 Vagrant 客户机上完成的，并且必须对 Docker 可用。它运行
    `docker build` 命令，所以您只需传递 Dockerfile 的位置。
- en: 'An example of using this in a Vagrantfile would be as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Vagrantfile 中使用此选项的示例如下：
- en: '[PRE7]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, we are using the `dock.build_image` key inside the provision block to
    set the directory (where our Dockerfile is located).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们在 provision 块中使用 `dock.build_image` 键来设置目录（我们的 Dockerfile 所在的位置）。
- en: args
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: args
- en: With the `build_images` key, there is an additional parameter called `args`.
    This allows you to pass in arguments that will be run as part of the `docker build`
    command. The value will be passed as a string.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `build_images` 键时，还有一个名为 `args` 的额外参数。这允许您传递作为 `docker build` 命令的一部分运行的参数。该值将作为字符串传递。
- en: 'To add in the `--pull` flag (which always attempts to pull in the latest version
    of the image) into the build process, the Vagrantfile might look as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要在构建过程中添加 `--pull` 标志（始终尝试拉取镜像的最新版本），Vagrantfile 可能如下所示：
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In order to pass in multiple parameters/flags, just add them into the string.
    There is no need to use an array.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要传递多个参数/标志，只需将它们添加到字符串中即可。无需使用数组。
- en: pull_images
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pull_images
- en: Another way to handle images during provisioning is to use the `pull_images`
    option in your Vagrantfile. This option will attempt to pull the images from the
    Docker registry and use those.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置过程中处理镜像的另一种方法是在 Vagrantfile 中使用 `pull_images` 选项。此选项将尝试从 Docker 注册表中拉取镜像并使用这些镜像。
- en: 'An example Vagrantfile would be as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例 Vagrantfile 如下所示：
- en: '[PRE9]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This code attempts to pull down the `nginx` and `mysql` images. The  `pull_images`
    option can be used multiple times and will append them, while the `images` option
    can only be used once.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码尝试拉取 `nginx` 和 `mysql` 镜像。`pull_images` 选项可以多次使用，并将它们附加在一起，而 `images` 选项只能使用一次。
- en: run
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: run
- en: The `run` option is used in the Vagrantfile to start and run specific Docker
    containers. This is done during the `vagrant up` process. It runs the `docker
    run` command to achieve this.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`run` 选项用于在 Vagrantfile 中启动和运行特定的 Docker 容器。这在 `vagrant up` 过程中完成。它运行 `docker
    run` 命令来实现此目的。'
- en: 'Here''s how it would be used in a Vagrantfile:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Vagrantfile 中如何使用它：
- en: '[PRE10]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the preceding example, we are instructing the Docker provisioner to run
    the `nginx` container. You can use the `run` option multiple times, but if you
    use the same image, then you must define seperate names/identifiers for them.
    The following is an example of using the `nginx` image twice with different names:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，我们正在指示 Docker 配置程序运行 `nginx` 容器。您可以多次使用 `run` 选项，但如果使用相同的镜像，则必须为它们定义不同的名称/标识符。以下是使用
    `nginx` 镜像两次并使用不同名称的示例：
- en: '[PRE11]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: One can be identified as the load balancer and the other as the web server.
    You can choose the names here, but I find that descriptive ones are usually the
    best and easiest to understand.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可以被识别为负载均衡器，另一个作为 Web 服务器。你可以在这里选择名称，但我发现描述性名称通常是最好的，最容易理解的。
- en: image
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 镜像
- en: This is actually the default value when using the `run` option, and it's the
    first parameter you pass, for example, the image name. It can, however, be passed
    as an option, such as in the preceding example, when you wish to run two of the
    same images.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上是使用`run`选项时的默认值，它是你传递的第一个参数，例如镜像名称。然而，当你希望运行两个相同的镜像时，可以将其作为选项传递，就像前面的示例一样。
- en: 'An example within the provision block of your Vagrantfile would be as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 Vagrantfile 的配置块中，示例如下：
- en: '[PRE12]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding example, we are referencing the `run` option and also the `image`
    option. The image we have chosen is `nginx`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们引用了`run`选项和`image`选项。我们选择的镜像是`nginx`。
- en: cmd
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命令
- en: This `cmd` option allows you to pass in a command that will be run within the
    container. If this value is omitted, then the container's default value will be
    used. This could be the `cmd` value, which is supplied in the Dockerfile.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`cmd`选项允许你传递一个将在容器内运行的命令。如果省略此值，则会使用容器的默认值。这可能是 Dockerfile 中提供的`cmd`值。
- en: 'An example within the provision block of your Vagrantfile would be as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 Vagrantfile 的配置块中，示例如下：
- en: '[PRE13]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the preceding example, we are referencing the `run` option and the `cmd`
    option. The `cmd` option will simply run that command within the container. It
    just accesses the `$HOME` environment variable, which is the user's home path
    directory.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们引用了`run`选项和`cmd`选项。`cmd`选项将简单地在容器内运行该命令。它仅访问`$HOME`环境变量，这是用户的主目录路径。
- en: args
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参数
- en: Using the `args` option allows you to pass in arguments to the `docker run`
    command. This is similar to the additional `args` option that's used in the `build_image`
    section. This can be useful if you require something more granular than the general
    command.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`args`选项允许你将参数传递给`docker run`命令。这类似于在`build_image`部分使用的额外`args`选项。如果你需要比一般命令更细粒度的设置，这将非常有用。
- en: 'An example within the provision block of your Vagrantfile would be as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 Vagrantfile 的配置块中，示例如下：
- en: '[PRE14]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the preceding example, we are referencing the `run` command and the `args`
    option. The `args` option will pass in the parameter to the `docker run` command
    when necessary. In our example, it is passing the `--name` flag with a value of
    `ubuntumain`. This will be the name of the container.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们引用了`run`命令和`args`选项。`args`选项将在需要时传递参数给`docker run`命令。在我们的示例中，它传递了`--name`标志，并将其值设置为`ubuntumain`。这将是容器的名称。
- en: auto_assign_name
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动分配名称
- en: Using the `auto_assign_name` option allows you to automatically name the Docker
    containers. It works by essentially passing the `--name` flag and a value. This
    is enabled by default, and the value is true. One thing to note is that any slashes
    in the image name (for example, `base/archlinux`) will be replaced with dashes
    so that the image will become `base-archlinux`. The name is selected by the first
    argument of the run.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`auto_assign_name`选项允许你自动为 Docker 容器命名。它的工作原理是通过传递`--name`标志和一个值来实现的。默认情况下启用此功能，且值为
    true。需要注意的一点是，镜像名称中的任何斜杠（例如，`base/archlinux`）都将被替换为短横线，因此镜像将变为`base-archlinux`。名称由
    `run` 的第一个参数选择。
- en: 'In the following example we are setting the `run` option value to `nginx` so
    that the container will automatically be named to `nginx`. The only way to override
    this is to set the `auto_assign_name` value to `false`, which we will do:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将`run`选项的值设置为`nginx`，以便容器会自动命名为`nginx`。唯一可以覆盖此设置的方式是将`auto_assign_name`值设置为`false`，我们将在下面执行此操作：
- en: '[PRE15]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: deamonize
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 守护进程化
- en: This option allows you to deamonize the containers. The default value for this
    option is true. It passes the `-d` flag into the `docker run` command. If you
    do not want to deamonize the containers, then you can set the value to false.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选项允许你将容器守护进程化。此选项的默认值为 true，它将`-d`标志传递给`docker run`命令。如果你不希望守护进程化容器，可以将该值设置为
    false。
- en: 'An example within the provision block of your Vagrantfile would be as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 Vagrantfile 的配置块中，示例如下：
- en: '[PRE16]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the preceding example, we are using the `run` option and the `deamonize`
    option. The deamonize option is passing the false value to let Docker know that
    we do not want it to run as a deamon, so the `-d` flag will not be passed to Docker.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们使用了 `run` 选项和 `deamonize` 选项。deamonize 选项传递了 false 值，让 Docker 知道我们不希望它作为守护进程运行，因此
    `-d` 标志不会传递给 Docker。
- en: restart
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: restart
- en: This option allows you to set the restart policy for the container. The default
    value is `always`, but it also supports `no`, `unless-stopped`, and `on-failure`
    . This option can be useful if you have a specific requirement and need control
    over the restart policy for one or more of your containers.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这个选项允许你设置容器的重启策略。默认值为 `always`，但它也支持 `no`、`unless-stopped` 和 `on-failure`。如果你有特定的需求，并且需要控制一个或多个容器的重启策略，这个选项可能会很有用。
- en: 'An example within the provision block of your Vagrantfile would be as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你 Vagrantfile 配置块中的一个示例如下：
- en: '[PRE17]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the preceding example, we are using the `run` option and the `restart` option.
    The restart option is passing the `no` value, which tells Docker not to restart
    when a container exits.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们使用了 `run` 选项和 `restart` 选项。restart 选项传递了 `no` 值，告诉 Docker 在容器退出时不要重启。
- en: post_install_provisioner
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: post_install_provisioner
- en: Using the `post_install_provisioner` option offers you an easy way to run a
    provisioner once the original provisioner has run. This sounds a little confusing,
    but it essentially allows you to create a new provision block within the Docker
    one. You could use Docker as your main provisioner and then, inside, use a shell
    provisioner which runs when the Docker one has finished.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `post_install_provisioner` 选项为你提供了一种在原始配置器运行后运行一个新的配置器的简单方法。这听起来有点混乱，但它本质上允许你在
    Docker 配置块内创建一个新的配置块。你可以将 Docker 作为主要配置器，然后在其中使用一个 shell 配置器，当 Docker 配置器完成时，shell
    配置器将运行。
- en: 'An example Vagrantfile would look like this:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例 Vagrantfile 看起来是这样的：
- en: '[PRE18]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The preceding code will run the `nginx` Docker image and then use the shell
    provisioner. The shell provisioner will run a script inside the Vagrant machine
    that simply changes the content in the default landing page of Nginx.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将运行 `nginx` Docker 镜像，然后使用 shell 配置器。Shell 配置器将在 Vagrant 虚拟机内部运行一个脚本，简单地修改
    Nginx 默认登录页面的内容。
- en: When you run the preceding example, you should be able to visit `http://localhost:8081`
    on your host machine (once the provisioning has completed) and see a large `Hello
    World!` message.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行前面的示例时，你应该能够在宿主机上访问 `http://localhost:8081`（当配置完成后），并看到一个大的 `Hello World!`
    消息。
- en: Summary
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned about Docker and how it can be used to configure
    a Vagrant machine. We have also learned how Docker works, how to use Docker Hub,
    and the various Docker-specific Vagrantfile options that are available. You should
    now be able to experiment with Docker as a provider.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了 Docker 以及如何使用它来配置 Vagrant 虚拟机。我们还学习了 Docker 的工作原理、如何使用 Docker Hub，以及可用的各种
    Docker 特定的 Vagrantfile 选项。现在你应该能够将 Docker 作为提供者进行实验。
- en: In [Chapter 13](part0286.html#8GO0S0-d86fec2f29de42f086efd11bc5538d9c), *Puppet
    – Using Puppet to Provision a Vagrant Box*, you will learn how to use Puppet to
    provision a Vagrant machine. We'll focus on the two main supported types—Puppet
    Apply and Puppet Agent.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第 13 章](part0286.html#8GO0S0-d86fec2f29de42f086efd11bc5538d9c)，*Puppet – 使用
    Puppet 来配置 Vagrant Box*，你将学习如何使用 Puppet 来配置 Vagrant 虚拟机。我们将重点介绍两种主要的支持类型——Puppet
    Apply 和 Puppet Agent。
