- en: Puppet - Using Puppet to Provision a Vagrant Box
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will continue with provisioning and learn how to provision
    a Vagrant machine using the Puppet software. In this chapter, you will learn about
    the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Puppet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What Puppet apply and Puppet agent are
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What the Puppet manifest is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to provision a Vagrant machine with Puppet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end of this chapter, you will have a good understanding of how Puppet
    works with Vagrant to provision machines.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Puppet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Puppet is a configuration management tool that is used for deploying, configuring,
    and managing nodes (servers).
  prefs: []
  type: TYPE_NORMAL
- en: Puppet was released by Luke Kanies in 2005\. It was written in C++, and Clojure
    and runs on Linux, Unix, and Windows. The current version is 5.5.3 and was released
    in July 2018\. Puppet as a software falls into the infrastructure as code category,
    which means that you configure and make changes using code and configuration files.
    Puppet uses manifest files to help configure nodes/servers (we'll learn more about
    this in a later section).
  prefs: []
  type: TYPE_NORMAL
- en: 'Puppet uses a pull configuration (master and slave) architecture in which the
    nodes (Puppet agent) poll the master server for configuration files and changes.
    There is a four-step life cycle in this master/slave process:'
  prefs: []
  type: TYPE_NORMAL
- en: The node sends facts about itself to the master server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The master server uses these facts to compile a catalog as to how the node should
    be configured. It then sends the catalog back to the node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The node uses the catalog to configure itself to the desired state, as described
    in the manifest file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The node now sends a report to the master with any changes or errors. These
    reports can then be seen in the Puppet dashboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Puppet also supports a multi-master architecture to reduce downtime and offer
    high availability. When a master server falls over or faces any issues, another
    master server can take its place. Puppet agents will then poll this new master
    server for any configuration changes.
  prefs: []
  type: TYPE_NORMAL
- en: As part of the configuration process, there are multiple steps that Puppet takes
    to transform code in configuration files and configure a node into a desired state.
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Puppet configuration often starts with a resource. You can think of a resource
    as code that describes the desired state of part of the node. This could be a
    specific package that needs to be installed such as nginx.
  prefs: []
  type: TYPE_NORMAL
- en: Manifest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Puppet program is know as a manifest. A manifest contains Puppet configuration
    code and has the `.pp` file extension. These blocks of code are the resources
    that we spoke about in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: Compile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The compile process is when the Puppet master takes the manifest files and compiles
    them into a catalog. This catalog is then used by the nodes for provisioning and
    to reach the desired state.
  prefs: []
  type: TYPE_NORMAL
- en: Catalogs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Puppet catalog is a document that has been created by the master server. It
    is created by compiling the Puppet manifest file. It can handle multiple manifest
    files, too. The catalog is then used by the node to set the desired system state.
  prefs: []
  type: TYPE_NORMAL
- en: Apply
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If a node/server has a catalog, then it must apply that configuration to itself.
    This is the process of installing any necessary files, services, and software.
    It allows the node to reach the desired state.
  prefs: []
  type: TYPE_NORMAL
- en: Desired state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When speaking about Puppet and provisioning,  you will hear about the *desired
    state*. In terms of Puppet, it simply means that the node/server has been completely
    provisioned and is now in the correct state. The software and services have been
    installed and are running correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Puppet apply and Puppet agent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn more about the two Puppet provisioning options
    available in Vagrant—`puppet apply` and `puppet agent`. In the following section,
    we will use both of these options to provision our own Vagrant machine.
  prefs: []
  type: TYPE_NORMAL
- en: Puppet apply
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the Puppet apply option to provision a Vagrant machine allows you to use
    Puppet without the need for a Puppet master. It works by calling the `puppet apply`
    command on the guest machine. This can be useful for testing Puppet configurations
    if you do not have a Puppet master or you just need to get up and running quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are 14 different options available when using Puppet apply in Vagrant.
    These options are to be applied in your Vagrantfile and can help give you more
    control over the Puppet provisioner:'
  prefs: []
  type: TYPE_NORMAL
- en: '`binary_path`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: `string`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Description**: This is a path on the guest to the Puppet''s bin directory.'
  prefs: []
  type: TYPE_NORMAL
- en: '`facter`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: `hash`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Description**: This is a hash of available facter variables (also know as
    facts).'
  prefs: []
  type: TYPE_NORMAL
- en: '`hiera_config_path`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: string'
  prefs: []
  type: TYPE_NORMAL
- en: '**Description**: This is the path (on the host) to the hiera configuration.'
  prefs: []
  type: TYPE_NORMAL
- en: '`manifest_file`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: `string`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Description**: This is the name of the manifest file that Puppet will use.
    The default is `default.pp`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`manifests_path`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: `string`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Description**: This is the path to the directory where the manifest files
    are. The default is `manifests`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`module_path`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: `string`/`array of strings`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Description**: This can be a path or paths to the directory (on the host)
    that contains any Puppet modules.'
  prefs: []
  type: TYPE_NORMAL
- en: '`environment`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: `string`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Description**: This is the name of the Puppet environment.'
  prefs: []
  type: TYPE_NORMAL
- en: '`environment_path`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: `string`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Description**: This is a path to the directory (on the host) which contains
    environment files.'
  prefs: []
  type: TYPE_NORMAL
- en: '`environment_variables`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: `hash`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Description**: This is a set of environment variables (in a string of key/value
    pairs) which are to be used before Puppet apply runs.'
  prefs: []
  type: TYPE_NORMAL
- en: '`options`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: `array of strings`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Description**: These are options that can be passed into the Puppet executable
    when Puppet is running.'
  prefs: []
  type: TYPE_NORMAL
- en: '`synced_folder_type`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: `string`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Description**: This option allows you to specify what types of synced folder
    to use. This will use the synced folder type by default.'
  prefs: []
  type: TYPE_NORMAL
- en: '`synced_folder_args`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: `array`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Description**: This is an array of arguments (values) that are passed to
    the folder sync. You can send specific arguments depending on the type of synced
    folder that you have chosen (see the preceding option).'
  prefs: []
  type: TYPE_NORMAL
- en: '`temp_dir`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: `string`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Description**: This is the directory (on the guest machine) where any Puppet
    run data will be stored, such as manifest files.'
  prefs: []
  type: TYPE_NORMAL
- en: '`working_directory`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: `string`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Description**: This is the working directory (on the guest machine) when
    Puppet is running.'
  prefs: []
  type: TYPE_NORMAL
- en: Puppet agent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using the Puppet agent to provision a Vagrant machine, you will need a
    Puppet master server to connect to. The master server will provide modules and
    manifests for the node to use. This provisioner works by using the `puppet agent`
    command, which is supplied by Puppet.
  prefs: []
  type: TYPE_NORMAL
- en: Options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are seven different options available when using Puppet apply in Vagrant.
    These options are to be applied in your Vagrantfile and can help give you more
    control over the Puppet provisioner:'
  prefs: []
  type: TYPE_NORMAL
- en: '`binary_path`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: `string`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Description**: This is a path on the guest to the Puppet''s bin directory.'
  prefs: []
  type: TYPE_NORMAL
- en: '`client_cert_path`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: `string`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Description**: This is the path to the client certificate for the node. The
    default value is nothing, which means that no client certificate will be uploaded.'
  prefs: []
  type: TYPE_NORMAL
- en: '`client_private_key_path`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: `string`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Description**: This is the path to the client key for the node. The default
    value is nothing, which means that no client key will be uploaded.'
  prefs: []
  type: TYPE_NORMAL
- en: '`facter`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: `hash`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Description**: This is a hash of available facter variables (also know as
    facts).'
  prefs: []
  type: TYPE_NORMAL
- en: '`options`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: `string`/`array`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Description**: These are options that can be passed to Puppet when the puppet
    agent command is ran.'
  prefs: []
  type: TYPE_NORMAL
- en: '`puppet_node`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: string'
  prefs: []
  type: TYPE_NORMAL
- en: '**Description**: This is the name that you wish to give the node. If no value
    is set, then Vagrant will attempt to use the hostname (if set in the Vagrantfile)
    or fall back to the name of the box used.'
  prefs: []
  type: TYPE_NORMAL
- en: '`puppet_server`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: `string`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Description**: This is the hostname of the Puppet server. If no value is
    set, then the default value will be set to `puppet`.'
  prefs: []
  type: TYPE_NORMAL
- en: Puppet Manifest example and syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A manifest is a Puppet program. It is made up of code that tells Puppet what
    to do, such as executing commands, installing software, and running services.
    A manifest file or multiple manifest files are one of the main part(s) of a module.
    A manifest file uses the `.pp` file extension and can be found in the `manifests`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: There are various sections found in a manifest file, such as exec, package,
    service, and file. Let's dive into the syntax of a manifest file.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The manifest file is taken up with declaring resources which can be grouped
    into classes. The manifest file uses a domain-specific language called Puppet,
    which is similar to YAML or Ruby (when writing a Vagrantfile).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example manifest that installs and runs the nginx web server. Let''s
    create a new manifest and call it  `nginx.pp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: There are a few things to note in the preceding example. Each resource (section)
    starts with the category. We are using two categories – package and service. In
    a resource block, we wrap the values within curly parentheses, `{}`, and we then
    reference the name (`nginx`) and set the values we require.
  prefs: []
  type: TYPE_NORMAL
- en: There are a few keywords that we are using in the resource blocks – ensure,
    require, and enable. These keywords help describe what should happen for the node
    to reach a desired state. The `ensure` keyword is used to ensure that the package
    or service is doing what you want it to, such as installing or running. The `require`
    keyword is used when a specific resource relies on another resource. In the service
    resource, we are using the keyword `enable`, which allows us to specify if a service
    is active or not. It can be useful if you need to temporarily disable a service
    while testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can add comments into the manifest file by using the hashtag/pound symbol.
    The following is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Provisioning with Puppet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's get to the exciting part! We will now use Puppet apply and Puppet agent
    to provision a Vagrant machine. We'll look at both options and install the nginx
    web server. We'll configure it using the Vagrantfile as a base but also add in
    Puppet-specific configuration such as manifests.
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning with Puppet apply
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Puppet apply provision option in Vagrant allows you to get up and running
    quickly with Puppet. You do not require a separate Puppet master server when using
    this option. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new directory for this project and move into it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a directory and call it `manifests`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the manifests folder, create a manifest file called `nginx.pp`. Inside this
    file, we''ll insert the following instructions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Let's break down this manifest file. First of all, we are executing the `apt-get
    update` command to update packages in Ubuntu. We then install the nginx package,
    which is started as a service. We ensure that it's running and enabled.
  prefs: []
  type: TYPE_NORMAL
- en: Back to Vagrant. Let's run the `vagrant init -m` command to create a minimal
    Vagrantfile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s add some configuration into the Vagrantfile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s break the Vagrantfile down. We first set the box to use Ubuntu Xenial
    64 Bit, and then set the network to use a private network and a static IP address
    of `11.11.11.11`. We need to install Puppet onto the guest machine, otherwise
    you will receive this error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00140.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To bypass this error, we are using the `shell` provisioner to first update
    the packages and then install the Puppet software on our Ubuntu box. Once this
    has completed, then the Puppet provisioner will begin. It will install and start
    running nginx:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00141.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding screenshot shows the shell provisioner. In the following screenshot,
    you can see the Puppet provisioner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00142.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once complete, visit `http://11.11.11.11` in your browser, where you should
    see nginx''s default page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00143.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also check that Puppet is running on the Vagrant machine by SSH-ing
    in using the `vagrant ssh` command. Once in, run the `puppet help` command. We
    should see output similar to what''s shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00144.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You have successfully provisioned a Vagrant machine using Puppet
    apply. You have created a Vagrantfile and a Puppet manifest file, installed nginx,
    and tested that the service is running correctly.
  prefs: []
  type: TYPE_NORMAL
- en: This is a fairly simple example, but Puppet is actually a very flexible and
    powerful provisioner. There is a lot you can do with Puppet and Vagrant. I would
    recommend that you experiment and learn more by testing out some of the options
    that are available.
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning with Puppet agent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The second option when using Puppet as a provisioner is Puppet agent. Although
    this option has an added layer of complexity (the need for a Puppet master server),
    there is less configuration needed locally when it comes to Vagrant. We will not
    create a manifest file or any Puppet-related configuration on the host machine.
    It will all be handled by the Puppet master server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Puppet agent merely acts as a client which receives its commands from the
    server. In the following example, we are going to create a multi-machine setup
    that provisions Puppet master and Puppet agent machines:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first create a new directory and move into that. I''m going to call
    mine `vagrant-puppet-agent` and use the following comments to create and move
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In our new directory, we can create a Vagrantfile by running the `vagrant init
    -m` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We now need to edit our Vagrantfile, which requires quite a bit of configuration.
    Not all of this is required for using the `puppet_server`/Puppet agent provision
    option, but we are also creating a Puppet master server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the largest Vagrantfile we''ve created so far, but it covers a lot
    of configuration and it creats multiple Vagrant machines. Let''s break it down:'
  prefs: []
  type: TYPE_NORMAL
- en: We first set the box to use Ubuntu Xenial 64 Bit (this will apply to both machines
    as it's outside their configuration blocks).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Secondly, we define a `puppetmaster` block, which is used to configure the Puppet
    master machine. In this block, there is a large amount of custom configuration.
    Some of these parts are used to help suppress errors and may not always be needed.
    We need a powerful machine to meet the minimum requirements, so we will set the
    RAM memory and CPU count. We then create a shell provisioner, which installs the
    Puppet server software and makes various configuration changes to multiple files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Thirdly, we define a `pnode` configuration block, which is used to configure
    the Puppet node/agent machine. We use the shell provisioner to install Puppet
    and make some configuration changes to multiple files. We also set the provisioner
    to use `puppet_server`, which is also known as Puppet agent. We set the node name,
    server host, and some additional options, which are to be sent to the command
    when Puppet is run.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's now run the `vagrant up --provision` command. This will take some time
    as it must first configure the Puppet master machine and then the Puppet agent
    machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: During the `up` process, you will see lots of out-put – mainly green, but some
    red, too. Don't worry too much about the red as it's not so much an error in our
    scenario as another level of output. Green is the output from the Vagrant machine,
    while red might be output from the Puppet master running within the Vagrant machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll first see the Puppet master provisioner begin. During this process,
    we''ll also see the output from our `echo` statement, which is adding two records
    into the `/etc/hosts` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00145.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Nearing the end of provisioning the Puppet master, we will see more output
    while we add additional information into the `puppet.conf` file. In red, we can
    see the Puppet master''s output as it starts the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00146.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We now start provisioning the second Vagrant machine, which is acting as our
    client/node in this example and using the Vagrant provision option for `puppet_server`.
    We''ll see the node create and cache an SSL certificate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00147.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'At the end of the node''s provisioning, we will see it `retrieving pluginfacts` and
    then `applying configuration`. It will create a YAML file with the state and then
    it will use the catalog to reach a `desired state`. In the following screenshot,
    we can see that this was achieved in a swift 7.14 seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00148.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s check to make sure that our Puppet configuration has worked correctly
    and that we now have a node in the desired state (running nginx). Visit `http://10.10.10.12`
    in your browser. You should see nginx''s default page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00149.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also SSH into the machines individually to see their state. Run the
    `vagrant status` command to view each machine''s status and their name (as we
    need this for the SSH command):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00150.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s first SSH into the Puppet master by running the `vagrant ssh puppetmaster`
    command. Once in, run the `puppetserver --version` command to confirm that everything
    is running fine and to see what the current version is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00151.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s now SSH into the Puppet node/agent by running the `vagrant ssh pnode` command.
    Once in, run the `puppet --version` command to confirm that everything is running
    fine and to see what the current version is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00152.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you wish to stop both machines, then run the `vagrant halt` command. By doing
    this, you can delete the machine states and any associated files by running the
    `vagrant destroy` command.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have successfully provisioned a Vagrant machine using the
    Puppet agent option. We have created a traditional Puppet setup of the server
    and client by using the multi machine option in Vagrant, along with various provisioning
    and networking options.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned all about Puppet and how to use it as a provisioner
    for Vagrant machines. We have also learned about the two supported provisioning
    methods of Puppet apply and Puppet agent.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 14](part0305.html#92RRI0-d86fec2f29de42f086efd11bc5538d9c), *Salt
    - Using Salt to Provision a Vagrant Box*, we will focus on another provisioner
    supported by Vagrant. We’ll learn about Salt and how it can be used to provision
    Vagrant machines. You’ll get a good understanding of Salt as well as Salt states.
  prefs: []
  type: TYPE_NORMAL
