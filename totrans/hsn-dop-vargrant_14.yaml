- en: Salt - Using Salt to Provision a Vagrant Box
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You've reached the final chapter of the book, and our provisioning miniseries.
    In this chapter, we'll learn more about the Salt provisioner that can be used
    with Vagrant. At the end of this chapter, you will have a good understanding of
    how to use Salt to provision Vagrant and know more about Salt as a standalone
    piece of configuration-management software. We'll learn about Salt and how it
    works.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Salt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Salt states
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The syntax of Salt states
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provisioning a Vagrant machine with Salt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vagrantfile options available when using Salt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Salt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Salt is another member of the provisioning and infrastructure as code family.
    It can be compared directly to Chef, Ansible, and Puppet. It's written in the
    Python language and was first released in March 2011.
  prefs: []
  type: TYPE_NORMAL
- en: Salt can sometimes be referred to as the SaltStack platform. This is due to
    the modular approach in which the software has been designed and built. It's extensible,
    flexible approach allows you to add and remove modules.
  prefs: []
  type: TYPE_NORMAL
- en: Salt has one main setup—the client and server. You can think of it as a Puppet
    Master and Minion setup. Salt uses a server (Master) and client (Minion) for its
    configuration management. The other setup option that Salt supports is called
    **Masterless**,
  prefs: []
  type: TYPE_NORMAL
- en: Salt Master
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Salt Master is used to manage the infrastructure and the servers within it.
    It can run remote execution commands onto Minion servers and manage their state.
    It also can operate in a Master-tiered setup where commands can be passed down
    through lower Master servers. The Salt Master manages Salt Minions and is used
    to capture grains sent from the Minions. It can then use the grain data to decide
    how to manage that specific Minion. It runs a daemon called `salt-master`.
  prefs: []
  type: TYPE_NORMAL
- en: Salt Minion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Salt Minion is a server/machine often controlled by the Salt Master. A Minion
    can run in a `masterless` setup too. A Salt Minion runs a daemon called `salt-minion` and
    its main purpose is to run commands sent from the Master, report data back, and
    send information about itself in the form of **grains**.
  prefs: []
  type: TYPE_NORMAL
- en: Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are six different modules available in Salt. Each type of module offers
    a different action or function. We'll learn more about each here.
  prefs: []
  type: TYPE_NORMAL
- en: Execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can think of execution modules as `ad hoc` commands. These commands are
    run on the Minion (command line) machines/nodes. They are written using Python/Cython.
  prefs: []
  type: TYPE_NORMAL
- en: State
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: States are a core part of configuration management in Salt. A state is a file
    that configures and describes what state a machine should be in. This is very
    similar to the Puppet manifests that describe the desired state of the machine.
  prefs: []
  type: TYPE_NORMAL
- en: Grains
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Grains are pieces of static information about the Minion. This information includes
    core details about the Minion, such as operating system, model, memory, and other
    data that is gathered and sent to the Master upon the initial connection. This
    can help the Master target different groups of Minions, such as targeting a specific
    operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Renderer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A renderer in Salt is used to transform data types described in **SaLt State
    files** (**SLS**) into Python to be consumed and handled by Salt. A common example
    is an SLS file rendered into a Jinja template and then parsed as a YAML document.
    There are a few different combinations currently supported:'
  prefs: []
  type: TYPE_NORMAL
- en: Jinja and YAML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mako and YAML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wempy and YAML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jinja and JSON
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mako and JSON
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wempy and JSON
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Salt, a returner is used to handle and output from a command run on a Minion
    machine. The output/results data is always sent back to the Master but using a
    returner allows you to decide where that data goes. You can choose any service
    that can receive data, such as Redis or MySQL. This data can be used for analysis
    or archiving. It can give you better insights into what's happening on the Minions
    and which commands are performing best.
  prefs: []
  type: TYPE_NORMAL
- en: Runners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Salt runner is very similar to an execution module. The one difference is
    that a runner is a command run and is executed on the Master server. A runner
    can be as simple or as complex as you like. They can be run using the `salt-run` command.
  prefs: []
  type: TYPE_NORMAL
- en: Salt states
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Salt states are also known as state modules. They make up an important part
    of the state system used within Salt. A Salt state is used to describe what packages
    should be installed on the Minion and other options such as user accounts, running
    services, and folder permissions. We'll look at the Salt state syntax now.
  prefs: []
  type: TYPE_NORMAL
- en: Syntax and example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Salt state file can often be found in the `roots` directory. It employs the
    `.sls` file extension and uses the **Yet Another Markup Language** (**YAML**)
    format for its contents. There is a certain hierarchy within a salt state file
    and that can go quite deep, depending on your requirements and configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s break down an example Salt state file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We first set a name for this section, in this example it's called `lampstack`.
    We then call `pkg.installed`, which verifies that certain packages have been installed.
    We use the `- pkgs` option and set the `- mysql-server`, `- php5`, `- php-pear`,
    and `- php5-mysql` values.
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning Vagrant with Salt
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s get to the main part of this chapter: provisioning a Vagrant machine
    with Salt. We''ll look at the `masterless` configuration setup for this section.
    We''ll learn how to install the Nginx web server onto our Vagrant machine:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new folder/directory for this example. I'm calling mine `vagrant-salt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move into the new folder and run the `vagrant init -m` command to create a new
    Vagrantfile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to create some folders and files for Salt. Create a `roots` folder
    and a `minionfiles` folder. Inside the `roots` folder, create a file called `top.sls` and
    enter these contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the same folder (`roots`), create another file called `base.sls` and enter
    these contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The top file dictates what hosts to target. We can use the `*` icon here to
    indicate that we will target all hosts. This is not always the best option, but
    in this instance it will work fine. It also dictates what Salt file to use. The
    `- base` value translates into the `base.sls` file that we created.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `base.sls` file is very minimal. It dictates that the `nginx` package (`pkg`)
    should be `installed`. Let''s now move into the `minionfile` folder and create
    our base Minion file. Create the `minion.yml` file and enter the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here we are setting the `master` value as `localhost` (as we are using a Masterless
    setup) and the `file_client` to `local` too. Save these files and return to the
    `roots` folder where the Vagrantfile is.
  prefs: []
  type: TYPE_NORMAL
- en: 'Set up the Vagrantfile. Edit the file to include these contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The Vagrantfile is fairly compact, but there are many options available to configure
    Salt. You'll learn more about these in the coming sections.
  prefs: []
  type: TYPE_NORMAL
- en: In this Vagrantfile, we first set the box to use Ubuntu Xenial 64 bit and we
    set a private network IP address as `10.10.10.20`. We then set up Vagrant's `synced_folder` option
    to share our roots folder with Salt so it can access our `top.sls` and `base.sls`
    files. In the next section, we set the provision block to use salt and set some
    basic values. We set the Masterless option to `true`, and the `minion_config`
    to use our recently created `minion.yml` file inside the `minionfiles` folder.
    We also set the `run_highstate` option to `true` to suppress any errors and run
    the files.
  prefs: []
  type: TYPE_NORMAL
- en: Save the Vagrantfile and run `vagrant up --provision` to start the Vagrant machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'During the `vagrant up `process, we will see some new output as defined by
    the Vagrantfile and Salt options. We''ll first see the folder syncing setup. In
    the following screenshot, we can see Vagrant''s `/srv/salt` folder linking to `/roots` on
    the host machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00153.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We''ll then see the `Running provisioner: salt...` section, which will show
    any output from the Salt provisioner. We can see that Salt checks a number of
    things such as whether `salt-minion` is installed or outputs that `Salt successfully
    configured and installed!`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Salt has been installed and the Salt state and minion files have been parsed
    and executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00154.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once this is complete and the Vagrant machine is running, open a web browser
    and visit the private network IP address we set in the Vagrantfile. Open `http://10.10.10.20`
    and you should see the default Nginx welcome page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00155.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You have successfully provisioned a Vagrant machine using Salt.
    We have used the `sls` files to dictate that the Nginx package should be installed.
    There are many different options that you can experiment with here, especially
    using a Master and Minion configuration setup.
  prefs: []
  type: TYPE_NORMAL
- en: Salt options available within Vagrant
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As Salt is essentially built into Vagrant, there are many options available.
    There are currently six different types of options available to manage in the
    Vagrantfile. These option types are:'
  prefs: []
  type: TYPE_NORMAL
- en: Install
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Master
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute states
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute runners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Output control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's break these option groups down to see what specific options are available
    to configure.
  prefs: []
  type: TYPE_NORMAL
- en: Install options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are fairly generic options and are used to manage the installation of
    Salt. Here are the options available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`install_master`: If this option is set to `true`, it will install the `salt-master`
    daemon'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`no_minion`: If set to true, this options will not install the minion'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`install_syndic`: Dictates whether to install `salt-syndic`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`install_type`: Dictates the installation channel when installing via package
    manager, such as stable, daily, or testing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`install_args`: When using Git, you can specify additional args, such as branch
    or tag'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`always_install`: Dictates whether to install binaries, even if they are already
    detected'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bootstrap_script`: This is the path to your custom boostrap sh script'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bootstrap_options`: Additional options to path to your custom bootstrap `sh`
    script'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`version`: This dictates the version of the Minion to be installed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`python_version`: This dictates the major Python version to be installed on
    the Minion'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minion options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are minion-specific options. These are only really used when the `no_minion` option
    is set to true (the default value). Here are the options available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`minion_config`: The path to a custom minion config file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`minion_key`: The path to your minion key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`minion_id`: A unique identifier for a minion'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`minion_pub`: The path to your minion public key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grains_config`: The path to a custom grains file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`masterless`: This will call `state.highstate` in local mode'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`minion_json_config`: This is valid JSON used to configure the salt minion'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`salt_call_args`: Additional arguments to pass to the `salt-call` command if
    provisioning with Masterless'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Master options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are master-specific options. These are only really used when the `install_master` option
    is set to true. Here are the options available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`master_config`: This is the path to the master config file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`master_key`: This is the path to your master key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`master_pub`: This is the path to your public key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`seed_master`: This is used to upload keys to the master'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`master_json_config`: This is valid JSON used to configure the master minion'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`salt_args`: Additional arguments to pass to the ''salt'' command if provisioning
    with Masterless'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute states
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is only one option here to control state-execution during provisioning:'
  prefs: []
  type: TYPE_NORMAL
- en: '`run_highstate`:Executes `state.highstate` on `vagrant up`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute runners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These options control runner execution during provisioning. These are the options
    available:'
  prefs: []
  type: TYPE_NORMAL
- en: '**`run_overstate`:** Dictates whether `state.over` is run during `vagrant up`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`orchestrations`: Dictates whether `state.orchestrate` is run during `vagrant
    up`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Output control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These options are used to control the output of state execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '`colorize`: This dictates whether the output is colorized'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log_level`: The level of output, the default value is `debug`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`verbose`: This dictates whether the output of salt commands are to be displayed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vagrant cheat sheet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Through this chapter, I have shown you various tips and tricks when using Vagrant.
    It's always helpful to learn the correct way of doing something and, when comfortable,
    using faster methods that you may have picked up along the way. In this section,
    we will highlight some Vagrant shortcuts that I use and that I hope will help
    you.
  prefs: []
  type: TYPE_NORMAL
- en: Testing a Vagrantfile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with a Vagrantfile, large or small, it can be useful to test it
    as you write it. If writing a complex Vagrantfile, it can be useful to test certain
    sections as you add them, without writing the whole thing and getting errors.
  prefs: []
  type: TYPE_NORMAL
- en: Run the `vagrant validate` command to test your Vagrantfile without having to
    run `vagrant up` or go through the whole process.
  prefs: []
  type: TYPE_NORMAL
- en: Saving a snapshot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can quickly and easily save a snapshot of your Vagrant machine and roll
    back to that at a later date/time. This can be useful for testing purposes, local
    versioning, and general usage.
  prefs: []
  type: TYPE_NORMAL
- en: Run the `vagrant snapshot save [options] [vm-name] [snapshot-save-name]` command.
    The final parameter is used to give the snapshot a name so you can revert back
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: Status
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vagrant offers two status commands. One to view the status of the machine in
    your current working directory (if any), and one to view the status of all machines
    on your system.
  prefs: []
  type: TYPE_NORMAL
- en: Use the `vagrant status` or `vagrant global-status` commands.
  prefs: []
  type: TYPE_NORMAL
- en: Boxes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Boxes are a big part of the Vagrant ecosystem and can sometimes be a pain to
    manage. Here are a few commands to help:'
  prefs: []
  type: TYPE_NORMAL
- en: Use `vagrant box list` to view all installed boxes on your system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `vagrant box outdated --global` to check for updates on installed boxes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use `vagrant box prune` to remove old box versions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardware specification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you need a more powerful Vagrant machine, you can use provider-specific
    code in your Vagrantfile to beef up the hardware spec. In the following example
    we will use the `memory` value to set a higher memory (RAM) for the machine. We
    also set the `cpus` value to set a higher processor count. Finally, we set the
    `gui` value so we can access the machine via a graphical user interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This is VirtualBox-specific code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Please note: You cannot specify a higher hardware specification than the host
    machine.'
  prefs: []
  type: TYPE_NORMAL
- en: Code deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can deploy code from Vagrant by running the vagrant push command. You will
    need to do some configuration first but this can be a good way of managing code
    and a machine at the same time. You will need to specify a remote server (such
    as FTP) in your Vagrantfile before running the command. Here is an example block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You can use FTP, SFTP (by setting the secure option to true in the FTP version),
    Heroku, or execute commands that you have created for pushing code.
  prefs: []
  type: TYPE_NORMAL
- en: Multi-machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Vagrant's multi-machine is a powerful and easy way to create an infrastructure.
    This can be used for testing or to closely replicate your production environment.
    You can set up multiple Vagrant machines in one Vagrantfile and then manage them
    separately.
  prefs: []
  type: TYPE_NORMAL
- en: Each machine gets its own block in the Vagrantfile so any options are specific
    to that one machine. You can use different provisioners, hardware specs, and other
    options in each block.
  prefs: []
  type: TYPE_NORMAL
- en: General
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've covered some specific parts, but it can be worth revisiting the basics when
    trying to solve a problem or learn more about specific features.
  prefs: []
  type: TYPE_NORMAL
- en: You can run the `vagrant help` command to list all commands in the system, which
    shows a description and usage. To get more information on a specific command,
    you can run the `vagant [command-name] -h` command.
  prefs: []
  type: TYPE_NORMAL
- en: The official Vagrant website and documentation is well written, easy to understand,
    and easy to use. I often refer to it when using something new or something I haven't
    used for a while.
  prefs: []
  type: TYPE_NORMAL
- en: Error messages in Vagrant are generally helpful and describe the error in a
    fairly easy-to-understand manner. If you have any issues, try to work through
    the error message. I often use search engines to find out how to fix an error.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to provision a Vagrant machine using the Salt
    software. We learned about the options available when configuring Salt with Vagrant,
    and looked at what Salt states are and their syntax.
  prefs: []
  type: TYPE_NORMAL
- en: The end of this chapter marks the end of our provisioning miniseries and the
    end of this book. I encourage you to keep exploring Vagrant and its many different
    features. We've focused mainly on provisioning in this book, but you could also
    look at the provider option in Vagrant. This allows you to manage which software
    actually powers the virtual machine. We use VirtualBox in this book, but there
    are other options, such as VMWare and Docker. It all depends on your environment
    and available software, but Vagrant can be flexible and will often meet your requirements.
  prefs: []
  type: TYPE_NORMAL
