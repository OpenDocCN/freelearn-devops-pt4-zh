- en: Salt - Using Salt to Provision a Vagrant Box
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Salt - 使用Salt配置Vagrant Box
- en: You've reached the final chapter of the book, and our provisioning miniseries.
    In this chapter, we'll learn more about the Salt provisioner that can be used
    with Vagrant. At the end of this chapter, you will have a good understanding of
    how to use Salt to provision Vagrant and know more about Salt as a standalone
    piece of configuration-management software. We'll learn about Salt and how it
    works.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经到达了本书的最后一章，以及我们的配置迷你系列。在本章中，我们将更深入地了解可以与Vagrant一起使用的Salt配置工具。在本章结束时，你将对如何使用Salt配置Vagrant有一个清晰的理解，并进一步了解Salt作为一款独立的配置管理软件。我们将学习Salt及其工作原理。
- en: 'Specifically, we''ll cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们将涵盖以下主题：
- en: Understanding Salt
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Salt
- en: Salt states
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Salt状态
- en: The syntax of Salt states
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Salt状态的语法
- en: Provisioning a Vagrant machine with Salt
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Salt配置Vagrant机器
- en: Vagrantfile options available when using Salt
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Salt时Vagrantfile的可选项
- en: Understanding Salt
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解Salt
- en: Salt is another member of the provisioning and infrastructure as code family.
    It can be compared directly to Chef, Ansible, and Puppet. It's written in the
    Python language and was first released in March 2011.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Salt是配置和基础设施作为代码家族的另一员。它可以直接与Chef、Ansible和Puppet进行比较。Salt是用Python语言编写的，首次发布于2011年3月。
- en: Salt can sometimes be referred to as the SaltStack platform. This is due to
    the modular approach in which the software has been designed and built. It's extensible,
    flexible approach allows you to add and remove modules.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Salt有时被称为SaltStack平台。这是因为该软件采用了模块化的方法设计和构建。其可扩展、灵活的方式使你可以添加和移除模块。
- en: Salt has one main setup—the client and server. You can think of it as a Puppet
    Master and Minion setup. Salt uses a server (Master) and client (Minion) for its
    configuration management. The other setup option that Salt supports is called
    **Masterless**,
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Salt有一个主要的设置——客户端和服务器。你可以将其视为Puppet主控和Minion设置。Salt使用服务器（Master）和客户端（Minion）进行配置管理。Salt支持的另一种设置选项称为**Masterless**（无主模式）。
- en: Salt Master
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Salt Master
- en: A Salt Master is used to manage the infrastructure and the servers within it.
    It can run remote execution commands onto Minion servers and manage their state.
    It also can operate in a Master-tiered setup where commands can be passed down
    through lower Master servers. The Salt Master manages Salt Minions and is used
    to capture grains sent from the Minions. It can then use the grain data to decide
    how to manage that specific Minion. It runs a daemon called `salt-master`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Salt Master用于管理基础设施及其中的服务器。它可以向Minion服务器发送远程执行命令并管理它们的状态。它还可以在主控层级设置中运行，其中命令可以通过更低层级的Master服务器传递。Salt
    Master管理Salt Minion，并用来捕捉从Minion发送的**grain**数据。然后它可以使用这些数据来决定如何管理特定的Minion。它运行一个名为`salt-master`的守护进程。
- en: Salt Minion
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Salt Minion
- en: A Salt Minion is a server/machine often controlled by the Salt Master. A Minion
    can run in a `masterless` setup too. A Salt Minion runs a daemon called `salt-minion` and
    its main purpose is to run commands sent from the Master, report data back, and
    send information about itself in the form of **grains**.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Salt Minion是一个通常由Salt Master控制的服务器/机器。Minion也可以在`masterless`（无主模式）设置中运行。Salt
    Minion运行一个名为`salt-minion`的守护进程，其主要目的是执行从Master发送的命令，报告数据并以**grain**的形式发送有关自身的信息。
- en: Modules
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块
- en: There are six different modules available in Salt. Each type of module offers
    a different action or function. We'll learn more about each here.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Salt提供了六种不同的模块。每种模块都提供不同的操作或功能。我们将在这里深入了解每个模块。
- en: Execution
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行
- en: You can think of execution modules as `ad hoc` commands. These commands are
    run on the Minion (command line) machines/nodes. They are written using Python/Cython.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将执行模块视为`ad hoc`命令。这些命令在Minion（命令行）机器/节点上运行。它们是使用Python/Cython编写的。
- en: State
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 状态
- en: States are a core part of configuration management in Salt. A state is a file
    that configures and describes what state a machine should be in. This is very
    similar to the Puppet manifests that describe the desired state of the machine.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 状态是Salt配置管理的核心部分。状态是一个文件，用来配置和描述机器应处于的状态。这与Puppet清单类似，后者描述了机器的期望状态。
- en: Grains
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Grains（粒度）
- en: Grains are pieces of static information about the Minion. This information includes
    core details about the Minion, such as operating system, model, memory, and other
    data that is gathered and sent to the Master upon the initial connection. This
    can help the Master target different groups of Minions, such as targeting a specific
    operating system.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Grains 是关于 Minion 的静态信息。这些信息包括有关 Minion 的核心细节，例如操作系统、型号、内存等，这些数据会在初次连接时收集并发送到
    Master。这可以帮助 Master 针对不同的 Minion 群组进行目标设定，例如指定操作系统类型。
- en: Renderer
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渲染器
- en: 'A renderer in Salt is used to transform data types described in **SaLt State
    files** (**SLS**) into Python to be consumed and handled by Salt. A common example
    is an SLS file rendered into a Jinja template and then parsed as a YAML document.
    There are a few different combinations currently supported:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Salt 中，渲染器用于将 **Salt 状态文件**（**SLS**）中描述的数据类型转换为 Python，以便 Salt 进行处理和使用。一个常见的例子是将一个
    SLS 文件渲染为 Jinja 模板，然后解析为 YAML 文档。目前支持几种不同的组合：
- en: Jinja and YAML
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jinja 和 YAML
- en: Mako and YAML
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mako 和 YAML
- en: Wempy and YAML
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wempy 和 YAML
- en: Jinja and JSON
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jinja 和 JSON
- en: Mako and JSON
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mako 和 JSON
- en: Wempy and JSON
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Wempy 和 JSON
- en: Returners
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 返回器
- en: In Salt, a returner is used to handle and output from a command run on a Minion
    machine. The output/results data is always sent back to the Master but using a
    returner allows you to decide where that data goes. You can choose any service
    that can receive data, such as Redis or MySQL. This data can be used for analysis
    or archiving. It can give you better insights into what's happening on the Minions
    and which commands are performing best.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Salt 中，返回器用于处理和输出在 Minion 机器上运行命令的结果。输出/结果数据总是返回到 Master，但使用返回器允许你决定数据的去向。你可以选择任何可以接收数据的服务，例如
    Redis 或 MySQL。这些数据可以用于分析或存档，帮助你更好地了解 Minions 上发生的情况，以及哪些命令执行得最好。
- en: Runners
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行器
- en: A Salt runner is very similar to an execution module. The one difference is
    that a runner is a command run and is executed on the Master server. A runner
    can be as simple or as complex as you like. They can be run using the `salt-run` command.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Salt 执行器与执行模块非常相似。唯一的区别是执行器是一个在 Master 服务器上执行的命令。执行器可以简单也可以复杂。可以使用 `salt-run`
    命令运行它们。
- en: Salt states
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Salt 状态
- en: Salt states are also known as state modules. They make up an important part
    of the state system used within Salt. A Salt state is used to describe what packages
    should be installed on the Minion and other options such as user accounts, running
    services, and folder permissions. We'll look at the Salt state syntax now.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Salt 状态也被称为状态模块。它们构成了 Salt 中状态系统的重要部分。Salt 状态用于描述应该在 Minion 上安装哪些软件包，以及其他选项，如用户帐户、正在运行的服务和文件夹权限。接下来我们将看一下
    Salt 状态语法。
- en: Syntax and example
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语法和示例
- en: A Salt state file can often be found in the `roots` directory. It employs the
    `.sls` file extension and uses the **Yet Another Markup Language** (**YAML**)
    format for its contents. There is a certain hierarchy within a salt state file
    and that can go quite deep, depending on your requirements and configuration.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Salt 状态文件通常位于 `roots` 目录下。它采用 `.sls` 文件扩展名，并使用 **另一种标记语言**（**YAML**）格式存储内容。Salt
    状态文件内部有一定的层级结构，根据需求和配置，这个层级结构可能相当深。
- en: 'Let''s break down an example Salt state file:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解一个示例 Salt 状态文件：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We first set a name for this section, in this example it's called `lampstack`.
    We then call `pkg.installed`, which verifies that certain packages have been installed.
    We use the `- pkgs` option and set the `- mysql-server`, `- php5`, `- php-pear`,
    and `- php5-mysql` values.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先为本节设置一个名称，在这个示例中它被称为 `lampstack`。然后我们调用 `pkg.installed`，它验证某些软件包是否已安装。我们使用
    `- pkgs` 选项并设置 `- mysql-server`、`- php5`、`- php-pear` 和 `- php5-mysql` 等值。
- en: Provisioning Vagrant with Salt
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Salt 配置 Vagrant
- en: 'Let''s get to the main part of this chapter: provisioning a Vagrant machine
    with Salt. We''ll look at the `masterless` configuration setup for this section.
    We''ll learn how to install the Nginx web server onto our Vagrant machine:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进入本章的主要部分：使用 Salt 配置 Vagrant 虚拟机。在本节中，我们将研究 `masterless` 配置设置。我们将学习如何将 Nginx
    Web 服务器安装到我们的 Vagrant 虚拟机上：
- en: Create a new folder/directory for this example. I'm calling mine `vagrant-salt`.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为此示例创建一个新的文件夹/目录。我将我的命名为 `vagrant-salt`。
- en: Move into the new folder and run the `vagrant init -m` command to create a new
    Vagrantfile.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入新文件夹并运行 `vagrant init -m` 命令以创建一个新的 Vagrantfile。
- en: 'We need to create some folders and files for Salt. Create a `roots` folder
    and a `minionfiles` folder. Inside the `roots` folder, create a file called `top.sls` and
    enter these contents:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要为 Salt 创建一些文件夹和文件。创建一个 `roots` 文件夹和一个 `minionfiles` 文件夹。在 `roots` 文件夹内，创建一个名为
    `top.sls` 的文件并输入以下内容：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Within the same folder (`roots`), create another file called `base.sls` and enter
    these contents:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一文件夹（`roots`）内，创建另一个名为 `base.sls` 的文件并输入以下内容：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The top file dictates what hosts to target. We can use the `*` icon here to
    indicate that we will target all hosts. This is not always the best option, but
    in this instance it will work fine. It also dictates what Salt file to use. The
    `- base` value translates into the `base.sls` file that we created.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 顶部文件决定了要目标的主机。我们可以在这里使用 `*` 图标来表示我们将目标定位到所有主机。虽然这并不总是最佳选择，但在这种情况下是可行的。它还决定了使用哪个
    Salt 文件。`- base` 值表示我们创建的 `base.sls` 文件。
- en: 'The `base.sls` file is very minimal. It dictates that the `nginx` package (`pkg`)
    should be `installed`. Let''s now move into the `minionfile` folder and create
    our base Minion file. Create the `minion.yml` file and enter the following contents:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`base.sls` 文件非常简洁。它规定应该安装 `nginx` 包（`pkg`）。现在，让我们进入 `minionfile` 文件夹并创建我们的基础
    Minion 文件。创建 `minion.yml` 文件并输入以下内容：'
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here we are setting the `master` value as `localhost` (as we are using a Masterless
    setup) and the `file_client` to `local` too. Save these files and return to the
    `roots` folder where the Vagrantfile is.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将 `master` 值设置为 `localhost`（因为我们使用的是无主设置），并将 `file_client` 也设置为 `local`。保存这些文件并返回到
    Vagrantfile 所在的 `roots` 文件夹。
- en: 'Set up the Vagrantfile. Edit the file to include these contents:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置 Vagrantfile。编辑文件以包含以下内容：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The Vagrantfile is fairly compact, but there are many options available to configure
    Salt. You'll learn more about these in the coming sections.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrantfile 文件相当简洁，但有许多可供配置 Salt 的选项。在接下来的章节中，你将了解更多这些选项。
- en: In this Vagrantfile, we first set the box to use Ubuntu Xenial 64 bit and we
    set a private network IP address as `10.10.10.20`. We then set up Vagrant's `synced_folder` option
    to share our roots folder with Salt so it can access our `top.sls` and `base.sls`
    files. In the next section, we set the provision block to use salt and set some
    basic values. We set the Masterless option to `true`, and the `minion_config`
    to use our recently created `minion.yml` file inside the `minionfiles` folder.
    We also set the `run_highstate` option to `true` to suppress any errors and run
    the files.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个 Vagrantfile 中，我们首先设置了使用 Ubuntu Xenial 64 位的 box，并设置了私有网络 IP 地址为 `10.10.10.20`。然后，我们设置了
    Vagrant 的 `synced_folder` 选项，将我们的 `roots` 文件夹与 Salt 共享，以便它可以访问我们的 `top.sls` 和
    `base.sls` 文件。在接下来的部分，我们设置了 provision 块来使用 Salt 并设置一些基本值。我们将 Masterless 选项设置为
    `true`，并将 `minion_config` 设置为使用我们在 `minionfiles` 文件夹内创建的 `minion.yml` 文件。我们还将
    `run_highstate` 选项设置为 `true`，以抑制任何错误并运行文件。
- en: Save the Vagrantfile and run `vagrant up --provision` to start the Vagrant machine.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存 Vagrantfile 文件并运行 `vagrant up --provision` 来启动 Vagrant 机器。
- en: 'During the `vagrant up `process, we will see some new output as defined by
    the Vagrantfile and Salt options. We''ll first see the folder syncing setup. In
    the following screenshot, we can see Vagrant''s `/srv/salt` folder linking to `/roots` on
    the host machine:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `vagrant up` 过程中，我们将看到一些新输出，这些输出是由 Vagrantfile 和 Salt 配置选项定义的。我们将首先看到文件夹同步的设置。在以下截图中，我们可以看到
    Vagrant 的 `/srv/salt` 文件夹链接到主机上的 `/roots` 文件夹：
- en: '![](img/00153.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00153.jpeg)'
- en: 'We''ll then see the `Running provisioner: salt...` section, which will show
    any output from the Salt provisioner. We can see that Salt checks a number of
    things such as whether `salt-minion` is installed or outputs that `Salt successfully
    configured and installed!`.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '然后我们将看到 `Running provisioner: salt...` 部分，这里会显示来自 Salt 提供程序的输出。我们可以看到 Salt
    检查了许多内容，例如是否安装了 `salt-minion`，或者输出 `Salt successfully configured and installed!`。'
- en: 'Salt has been installed and the Salt state and minion files have been parsed
    and executed:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Salt 已经安装，并且 Salt 状态文件和 minion 文件已经解析并执行：
- en: '![](img/00154.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00154.jpeg)'
- en: 'Once this is complete and the Vagrant machine is running, open a web browser
    and visit the private network IP address we set in the Vagrantfile. Open `http://10.10.10.20`
    and you should see the default Nginx welcome page:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成并且 Vagrant 机器运行起来，打开网页浏览器并访问我们在 Vagrantfile 中设置的私有网络 IP 地址。打开 `http://10.10.10.20`，你应该能看到默认的
    Nginx 欢迎页面：
- en: '![](img/00155.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00155.jpeg)'
- en: Congratulations! You have successfully provisioned a Vagrant machine using Salt.
    We have used the `sls` files to dictate that the Nginx package should be installed.
    There are many different options that you can experiment with here, especially
    using a Master and Minion configuration setup.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已成功使用Salt配置了一个Vagrant虚拟机。我们使用了`sls`文件来指定安装Nginx包。这里有许多不同的选项可以实验，特别是在使用主节点和minion配置时。
- en: Salt options available within Vagrant
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vagrant中的Salt选项
- en: 'As Salt is essentially built into Vagrant, there are many options available.
    There are currently six different types of options available to manage in the
    Vagrantfile. These option types are:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Salt本质上已内置于Vagrant中，因此有许多选项可供选择。目前，有六种不同类型的选项可以在Vagrantfile中进行管理。这些选项类型包括：
- en: Install
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装
- en: Minion
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Minion
- en: Master
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主节点
- en: Execute states
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行状态
- en: Execute runners
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行运行器
- en: Output control
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出控制
- en: Let's break these option groups down to see what specific options are available
    to configure.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一分析这些选项组，看看有哪些可用的特定选项可以配置。
- en: Install options
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装选项
- en: 'These are fairly generic options and are used to manage the installation of
    Salt. Here are the options available:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是相当通用的选项，用于管理Salt的安装。以下是可用的选项：
- en: '`install_master`: If this option is set to `true`, it will install the `salt-master`
    daemon'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`install_master`：如果此选项设置为`true`，将安装`salt-master`守护进程'
- en: '`no_minion`: If set to true, this options will not install the minion'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`no_minion`：如果设置为true，则此选项将不安装minion'
- en: '`install_syndic`: Dictates whether to install `salt-syndic`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`install_syndic`：指定是否安装`salt-syndic`'
- en: '`install_type`: Dictates the installation channel when installing via package
    manager, such as stable, daily, or testing'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`install_type`：指定通过包管理器安装时的安装渠道，如稳定版、每日版或测试版'
- en: '`install_args`: When using Git, you can specify additional args, such as branch
    or tag'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`install_args`：使用Git时，可以指定附加参数，如分支或标签'
- en: '`always_install`: Dictates whether to install binaries, even if they are already
    detected'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`always_install`：指定是否安装二进制文件，即使已经检测到这些文件'
- en: '`bootstrap_script`: This is the path to your custom boostrap sh script'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bootstrap_script`：这是您的自定义引导`sh`脚本的路径'
- en: '`bootstrap_options`: Additional options to path to your custom bootstrap `sh`
    script'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bootstrap_options`：传递给自定义引导`sh`脚本的附加选项'
- en: '`version`: This dictates the version of the Minion to be installed'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`version`：指定要安装的Minion版本'
- en: '`python_version`: This dictates the major Python version to be installed on
    the Minion'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python_version`：指定要在Minion上安装的主要Python版本'
- en: Minion options
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Minion选项
- en: 'These are minion-specific options. These are only really used when the `no_minion` option
    is set to true (the default value). Here are the options available:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是仅适用于minion的选项。只有当`no_minion`选项设置为true（默认值）时，这些选项才会被使用。以下是可用的选项：
- en: '`minion_config`: The path to a custom minion config file'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minion_config`：自定义minion配置文件的路径'
- en: '`minion_key`: The path to your minion key'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minion_key`：这是您minion密钥的路径'
- en: '`minion_id`: A unique identifier for a minion'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minion_id`：Minion的唯一标识符'
- en: '`minion_pub`: The path to your minion public key'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minion_pub`：这是您minion公钥的路径'
- en: '`grains_config`: The path to a custom grains file'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`grains_config`：自定义grains文件的路径'
- en: '`masterless`: This will call `state.highstate` in local mode'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`masterless`：在本地模式下调用`state.highstate`'
- en: '`minion_json_config`: This is valid JSON used to configure the salt minion'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minion_json_config`：这是用于配置salt minion的有效JSON'
- en: '`salt_call_args`: Additional arguments to pass to the `salt-call` command if
    provisioning with Masterless'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`salt_call_args`：如果使用无主配置进行预配，则传递给`salt-call`命令的附加参数'
- en: Master options
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主节点选项
- en: 'These are master-specific options. These are only really used when the `install_master` option
    is set to true. Here are the options available:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是仅适用于主节点的选项。只有当`install_master`选项设置为true时，这些选项才会被使用。以下是可用的选项：
- en: '`master_config`: This is the path to the master config file'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`master_config`：这是主节点配置文件的路径'
- en: '`master_key`: This is the path to your master key'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`master_key`：这是您主节点密钥的路径'
- en: '`master_pub`: This is the path to your public key'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`master_pub`：这是您公钥的路径'
- en: '`seed_master`: This is used to upload keys to the master'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`seed_master`：用于将密钥上传到主节点'
- en: '`master_json_config`: This is valid JSON used to configure the master minion'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`master_json_config`：这是用于配置主节点minion的有效JSON'
- en: '`salt_args`: Additional arguments to pass to the ''salt'' command if provisioning
    with Masterless'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`salt_args`：如果使用无主配置进行预配，则传递给`salt`命令的附加参数'
- en: Execute states
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行状态
- en: 'There is only one option here to control state-execution during provisioning:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这里只有一个选项，用于控制在预配过程中执行状态：
- en: '`run_highstate`:Executes `state.highstate` on `vagrant up`'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`run_highstate`：在`vagrant up`时执行`state.highstate`'
- en: Execute runners
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行运行器
- en: 'These options control runner execution during provisioning. These are the options
    available:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项控制在配置过程中运行器的执行。以下是可用的选项：
- en: '**`run_overstate`:** Dictates whether `state.over` is run during `vagrant up`'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`run_overstate`：** 决定是否在`vagrant up`过程中运行`state.over`'
- en: '`orchestrations`: Dictates whether `state.orchestrate` is run during `vagrant
    up`'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`orchestrations`：决定在`vagrant up`过程中是否运行`state.orchestrate`'
- en: Output control
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输出控制
- en: 'These options are used to control the output of state execution:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项用于控制状态执行的输出：
- en: '`colorize`: This dictates whether the output is colorized'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`colorize`：决定是否将输出进行颜色化'
- en: '`log_level`: The level of output, the default value is `debug`'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log_level`：输出的级别，默认值为`debug`'
- en: '`verbose`: This dictates whether the output of salt commands are to be displayed'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`verbose`：决定是否显示salt命令的输出'
- en: Vagrant cheat sheet
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vagrant备忘单
- en: Through this chapter, I have shown you various tips and tricks when using Vagrant.
    It's always helpful to learn the correct way of doing something and, when comfortable,
    using faster methods that you may have picked up along the way. In this section,
    we will highlight some Vagrant shortcuts that I use and that I hope will help
    you.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章内容，我向你展示了使用Vagrant时的一些技巧和窍门。学习正确的做事方法总是有帮助的，当你熟练后，采用你自己学习到的更快速的方法也会非常有效。在本节中，我们将重点介绍一些我常用的Vagrant快捷方式，希望对你有所帮助。
- en: Testing a Vagrantfile
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试Vagrantfile
- en: When working with a Vagrantfile, large or small, it can be useful to test it
    as you write it. If writing a complex Vagrantfile, it can be useful to test certain
    sections as you add them, without writing the whole thing and getting errors.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理Vagrantfile时，无论是大还是小，测试它的过程是非常有用的。如果编写一个复杂的Vagrantfile，边写边测试某些部分会比写完整个文件再测试要方便许多，避免出错。
- en: Run the `vagrant validate` command to test your Vagrantfile without having to
    run `vagrant up` or go through the whole process.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`vagrant validate`命令以测试你的Vagrantfile，而无需运行`vagrant up`或经过整个过程。
- en: Saving a snapshot
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保存快照
- en: You can quickly and easily save a snapshot of your Vagrant machine and roll
    back to that at a later date/time. This can be useful for testing purposes, local
    versioning, and general usage.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以快速轻松地保存Vagrant机器的快照，并在以后某个时间点回滚到该快照。这对于测试、版本控制以及一般用途都很有用。
- en: Run the `vagrant snapshot save [options] [vm-name] [snapshot-save-name]` command.
    The final parameter is used to give the snapshot a name so you can revert back
    to it.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`vagrant snapshot save [options] [vm-name] [snapshot-save-name]`命令。最后一个参数用于为快照命名，以便你可以回滚到该快照。
- en: Status
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 状态
- en: Vagrant offers two status commands. One to view the status of the machine in
    your current working directory (if any), and one to view the status of all machines
    on your system.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant提供了两个状态命令。一个是查看当前工作目录中机器的状态（如果有的话），另一个是查看系统中所有机器的状态。
- en: Use the `vagrant status` or `vagrant global-status` commands.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`vagrant status`或`vagrant global-status`命令。
- en: Boxes
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 盒子
- en: 'Boxes are a big part of the Vagrant ecosystem and can sometimes be a pain to
    manage. Here are a few commands to help:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 盒子是Vagrant生态系统中的重要组成部分，有时可能会很难管理。以下是一些有用的命令：
- en: Use `vagrant box list` to view all installed boxes on your system
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`vagrant box list`查看系统上安装的所有盒子
- en: Use `vagrant box outdated --global` to check for updates on installed boxes
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`vagrant box outdated --global`检查已安装的盒子的更新
- en: Use `vagrant box prune` to remove old box versions
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`vagrant box prune`删除旧的盒子版本
- en: Hardware specification
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 硬件规格
- en: 'If you need a more powerful Vagrant machine, you can use provider-specific
    code in your Vagrantfile to beef up the hardware spec. In the following example
    we will use the `memory` value to set a higher memory (RAM) for the machine. We
    also set the `cpus` value to set a higher processor count. Finally, we set the
    `gui` value so we can access the machine via a graphical user interface:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要更强大的Vagrant机器，你可以在Vagrantfile中使用特定于提供商的代码来增强硬件规格。在以下示例中，我们将使用`memory`值来设置更高的内存（RAM），并且还设置`cpus`值来提高处理器数量。最后，我们设置`gui`值，以便通过图形用户界面访问机器：
- en: '[PRE5]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is VirtualBox-specific code.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这是特定于VirtualBox的代码。
- en: 'Please note: You cannot specify a higher hardware specification than the host
    machine.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意：你不能指定比主机机器更高的硬件规格。
- en: Code deployment
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码部署
- en: 'You can deploy code from Vagrant by running the vagrant push command. You will
    need to do some configuration first but this can be a good way of managing code
    and a machine at the same time. You will need to specify a remote server (such
    as FTP) in your Vagrantfile before running the command. Here is an example block:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过运行 vagrant push 命令来从 Vagrant 部署代码。你需要先做一些配置，但这可以是同时管理代码和机器的好方法。你需要在 Vagrantfile
    中指定一个远程服务器（例如 FTP），然后才能运行该命令。以下是一个示例块：
- en: '[PRE6]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can use FTP, SFTP (by setting the secure option to true in the FTP version),
    Heroku, or execute commands that you have created for pushing code.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 FTP、SFTP（通过在 FTP 版本中将安全选项设置为 true）、Heroku，或者执行你为推送代码所创建的命令。
- en: Multi-machine
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多机器
- en: Using Vagrant's multi-machine is a powerful and easy way to create an infrastructure.
    This can be used for testing or to closely replicate your production environment.
    You can set up multiple Vagrant machines in one Vagrantfile and then manage them
    separately.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Vagrant 的多机器功能是创建基础设施的一种强大且简便的方式。这可以用于测试或紧密地复制生产环境。你可以在一个 Vagrantfile 中设置多个
    Vagrant 机器，然后分别管理它们。
- en: Each machine gets its own block in the Vagrantfile so any options are specific
    to that one machine. You can use different provisioners, hardware specs, and other
    options in each block.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 每台机器在 Vagrantfile 中都有自己的块，因此任何选项都仅适用于该台机器。你可以在每个块中使用不同的配置器、硬件规格和其他选项。
- en: General
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一般设置
- en: We've covered some specific parts, but it can be worth revisiting the basics when
    trying to solve a problem or learn more about specific features.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了一些具体的部分，但当尝试解决问题或了解特定功能时，回顾基础知识通常是值得的。
- en: You can run the `vagrant help` command to list all commands in the system, which
    shows a description and usage. To get more information on a specific command,
    you can run the `vagant [command-name] -h` command.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以运行 `vagrant help` 命令列出系统中的所有命令，显示每个命令的描述和用法。要获取关于特定命令的更多信息，你可以运行 `vagrant
    [命令名称] -h` 命令。
- en: The official Vagrant website and documentation is well written, easy to understand,
    and easy to use. I often refer to it when using something new or something I haven't
    used for a while.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 官方的 Vagrant 网站和文档写得很好，容易理解且易于使用。我在使用新的工具或长时间未使用的工具时，经常参考它。
- en: Error messages in Vagrant are generally helpful and describe the error in a
    fairly easy-to-understand manner. If you have any issues, try to work through
    the error message. I often use search engines to find out how to fix an error.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Vagrant 中的错误信息通常很有帮助，并且以一种相对容易理解的方式描述错误。如果遇到问题，尝试根据错误信息进行排查。我经常使用搜索引擎查找如何修复错误的方法。
- en: Summary
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to provision a Vagrant machine using the Salt
    software. We learned about the options available when configuring Salt with Vagrant,
    and looked at what Salt states are and their syntax.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用 Salt 软件来配置 Vagrant 机器。我们了解了在将 Salt 与 Vagrant 配置时可用的选项，并了解了 Salt
    状态及其语法。
- en: The end of this chapter marks the end of our provisioning miniseries and the
    end of this book. I encourage you to keep exploring Vagrant and its many different
    features. We've focused mainly on provisioning in this book, but you could also
    look at the provider option in Vagrant. This allows you to manage which software
    actually powers the virtual machine. We use VirtualBox in this book, but there
    are other options, such as VMWare and Docker. It all depends on your environment
    and available software, but Vagrant can be flexible and will often meet your requirements.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的结束标志着我们为期一段时间的配置小系列的结束，同时也意味着本书的结束。我鼓励你继续探索 Vagrant 及其众多不同的功能。本书主要集中在配置方面，但你也可以查看
    Vagrant 中的提供者选项。这让你可以管理实际上驱动虚拟机的软件。我们在本书中使用了 VirtualBox，但也有其他选项，例如 VMWare 和 Docker。一切都取决于你的环境和可用软件，但
    Vagrant 是灵活的，通常能够满足你的需求。
