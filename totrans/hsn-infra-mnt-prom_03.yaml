- en: An Overview of the Prometheus Ecosystem
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Prometheus 生态系统概述
- en: With such a vast collection of components available for use, it can be daunting
    to choose the ones that are required to solve a given monitoring gap. In this
    chapter, we will go over the Prometheus ecosystem, which components perform what
    job, and understand how everything works together logically.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在可用的如此庞大的组件集合中，选择所需的组件来解决特定的监控需求可能令人望而生畏。本章将介绍 Prometheus 生态系统，各个组件执行什么任务，并了解它们如何在逻辑上协同工作。
- en: Striving for simplicity and having a clear understanding of all the moving parts
    of a Prometheus stack is invaluable to keep things manageable and reliable.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 追求简洁并清楚理解 Prometheus 堆栈的所有组成部分，对于保持系统的可管理性和可靠性至关重要。
- en: 'In brief, the following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，本章将涉及以下主题：
- en: Metrics collection with Prometheus
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Prometheus 进行度量指标收集
- en: Exposing internal state with exporters
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 exporters 暴露内部状态
- en: Alert routing and management with Alertmanager
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Alertmanager 进行警报路由和管理
- en: Visualizing your data
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化你的数据
- en: Metrics collection with Prometheus
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Prometheus 进行度量指标收集
- en: Prometheus is a time series-based, open source monitoring system. It collects
    data by sending HTTP requests to hosts and services on metrics endpoints, which
    it then makes available for analysis and alerting using a powerful query language.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus 是一个基于时间序列的开源监控系统。它通过向主机和服务的度量端点发送 HTTP 请求来收集数据，然后使用强大的查询语言使其可用于分析和警报。
- en: Even though Prometheus has graduated with the **Cloud Native Computing Foundation**
    (**CNCF**) by demonstrating stability, maturity, and solid governance, it is still
    evolving at a very rapid pace. At the time of writing, the current stable version
    of Prometheus is 2.9.2, and every component or feature that is going to be discussed
    will be based on this version. While there should be no major architectural changes
    within version 2, care should be taken when applying specific configuration that's
    been learned from this book to earlier or even later versions.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Prometheus 通过证明其稳定性、成熟性和稳固的治理，已经获得了**云原生计算基金会**（**CNCF**）的认证，它仍在以非常快速的速度发展。写作时，Prometheus
    的当前稳定版本是 2.9.2，本书中讨论的所有组件或特性将基于此版本。虽然在 2 版本内不应有重大架构变化，但在将本书中学习到的特定配置应用于早期或甚至后续版本时，仍需谨慎。
- en: High-level overview of the Prometheus architecture
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Prometheus 架构的高级概览
- en: The Prometheus ecosystem is composed of several components, each with its own
    responsibility and clearly defined scope. Prometheus itself is essential as it
    sits squarely in the middle of most interactions, but many components are in fact
    optional, depending on your monitoring needs.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus 生态系统由多个组件组成，每个组件都有自己的责任和明确的范围。Prometheus 本身至关重要，因为它位于大多数交互的核心，但许多组件实际上是可选的，这取决于你的监控需求。
- en: 'As we can see in the following diagram, the main components in the Prometheus
    ecosystem are as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，Prometheus 生态系统中的主要组件如下：
- en: The Prometheus server collects time series data, stores it, makes it available
    for querying, and sends alerts based on it.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Prometheus 服务器收集时间序列数据，存储数据，提供查询接口，并根据数据发送警报。
- en: The Alertmanager receives alert triggers from Prometheus and handles routing
    and dispatching of alerts.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Alertmanager 从 Prometheus 接收警报触发器，并处理警报的路由和派发。
- en: The Pushgateway handles the exposition of metrics that have been pushed from
    short-lived jobs such as cron or batch jobs.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pushgateway 处理来自短生命周期作业（如 cron 或批处理作业）推送的度量指标的公开。
- en: Applications that support the Prometheus exposition format make internal state
    available through an HTTP endpoint.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持 Prometheus 暴露格式的应用程序通过 HTTP 端点公开内部状态。
- en: Community-driven exporters expose metrics from applications that do not support
    Prometheus natively.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社区驱动的 exporters 暴露来自不原生支持 Prometheus 的应用程序的度量指标。
- en: First-party and third-party dashboarding solutions provide a visualization of
    collected data.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一方和第三方仪表板解决方案提供了收集数据的可视化。
- en: 'Each one will be explored in depth later in this book:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本书后续将深入探讨每个组件：
- en: '![](img/f52ac22e-763d-43fa-a8ad-d5f846effe39.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f52ac22e-763d-43fa-a8ad-d5f846effe39.png)'
- en: Figure 2.1: High-level overview of the main components in the Prometheus ecosystem
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1：Prometheus 生态系统中主要组件的高级概览
- en: The Prometheus server has its own internal processes, such as recording rules
    and service discovery, which are thoroughly explained in [Chapter 9](9aa1e3da-13cf-4051-845d-1d1c924ef47b.xhtml),
    *Defining Alerting and Recording Rules*, and [Chapter 12](5360e790-3884-4eeb-aaa1-8aad21dc6c1e.xhtml),
    *Choosing the Right Service Discovery*, respectively.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus 服务器有其自身的内部进程，如记录规则和服务发现，这些内容分别在[第9章](9aa1e3da-13cf-4051-845d-1d1c924ef47b.xhtml)，*定义告警和记录规则*，以及[第12章](5360e790-3884-4eeb-aaa1-8aad21dc6c1e.xhtml)，*选择正确的服务发现*中有详细解释。
- en: 'Prometheus was originally created by Matt T. Proud and Julius Volz while working
    at SoundCloud. It was inspired by Google''s Borgmon, which influenced a lot of
    its earlier design: scraping plain text from metrics endpoints; exporters as proxies
    for metrics collection; time series as multi-dimensional vectors, which can then
    be transformed and filtered; and the use of ruleset evaluations for recording
    and alerting, among other features.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus 最初由 Matt T. Proud 和 Julius Volz 在 SoundCloud 工作时创建。它的灵感来源于 Google
    的 Borgmon，Borgmon 对其早期设计产生了很大影响：从度量端点抓取纯文本；导出器作为度量收集的代理；将时间序列视为多维向量，然后可以进行转换和过滤；以及使用规则集进行记录和告警等功能。
- en: You might be tempted to try and make Prometheus fit into a push-based metrics
    collection model, but this is ill-advised. Prometheus' core design is around pull,
    so naturally, many assumptions break down when converting from push to pull. This
    will be further explained when we approach the Pushgateway.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想尝试将 Prometheus 适配为基于推送的度量收集模型，但这是不建议的。Prometheus 的核心设计围绕拉取展开，因此从推送转为拉取时，很多假设会被打破。当我们介绍
    Pushgateway 时会进一步解释这个问题。
- en: A singular attribute of Prometheus is that it unabashedly does not try to do
    any type of clustering. By not relying on the network for coordination and storage
    (although remote write is possible, as we'll see by the end of this book), it
    makes a great argument for reliability and ease of use. It's trivial to just pick
    up the appropriate binary distribution of Prometheus and run it locally on your
    computer, and yet the same binary might be able to handle thousands of scrape
    targets and the ingestion of millions of samples per second on server hardware.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus 的一个独特特点是，它毫不掩饰地不尝试做任何类型的集群。通过不依赖网络进行协调和存储（尽管远程写入是可能的，正如我们在本书结尾部分将看到的那样），它为可靠性和易用性提供了有力的论据。只需选择合适的
    Prometheus 二进制分发版并在本地计算机上运行，它便能轻松地处理成千上万的抓取目标和每秒数百万个样本的摄取，即使是服务器硬件。
- en: Exposing internal state with exporters
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用导出器暴露内部状态
- en: 'Not all applications are built with Prometheus-compatible instrumentation.
    Sometimes, no metrics are exposed at all. In these cases, we can rely on exporters.
    The following diagram shows how they work:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 不是所有的应用程序都使用 Prometheus 兼容的监控工具。有时根本不会暴露任何度量。在这些情况下，我们可以依赖导出器。以下图示展示了它们的工作原理：
- en: '![](img/4157b7b9-9713-4089-95bc-922807632f0b.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4157b7b9-9713-4089-95bc-922807632f0b.png)'
- en: 'Figure 2.2: A high-level overview of an exporter'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2：导出器的高层次概述
- en: An exporter is nothing more than a piece of software that collects data from
    a service or application and exposes it via HTTP in the Prometheus format. Each
    exporter usually targets a specific service or application and as such, their
    deployment reflects this one-to-one synergy.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 导出器不过是一个收集服务或应用程序数据并通过 HTTP 以 Prometheus 格式暴露数据的软件。每个导出器通常针对特定的服务或应用，因此它们的部署反映了这种一对一的协同关系。
- en: Nowadays, you can find exporters for pretty much any service you need, and if
    a particular third-party service doesn't have an exporter available, it's quite
    simple to build your own.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，你几乎可以找到任何你需要的服务的导出器，如果某个特定的第三方服务没有可用的导出器，自己构建一个也非常简单。
- en: Exporter fundamentals
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导出器基础知识
- en: When the exporter starts, it binds to a configured port and exposes the internal
    state of whatever is being collected in an HTTP endpoint of your choosing (the
    default being `/metrics`). The instrumentation data is collected when an HTTP
    GET request is made to the configured endpoint. For example, node exporter, one
    of the most commonly used exporters, relies on a number of kernel statistics to
    present data such as disk I/O, CPU, memory, network, filesystem usage, and much,
    much more. Every single time that endpoint is scraped, the information is quickly
    gathered and exposed in a synchronous operation.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当导出程序启动时，它会绑定到一个配置的端口，并通过你选择的 HTTP 端点暴露所收集的内部状态（默认端点为 `/metrics`）。当发出 HTTP GET
    请求到配置的端点时，就会收集到仪表数据。例如，node exporter 是最常用的导出程序之一，它依赖于多个内核统计信息来展示诸如磁盘 I/O、CPU、内存、网络、文件系统使用情况等数据。每次抓取该端点时，信息都会迅速收集并同步暴露出来。
- en: The HTTP GET request that's made by the Prometheus server to the observed system
    for metric collection is called a **scrape**.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus 服务器向被监控系统发出的用于指标收集的 HTTP GET 请求被称为 **抓取**（scrape）。
- en: 'If you are the one writing the service, the best option is to instrument the
    code directly using a Prometheus client library. There are official client libraries
    available for the following programming languages:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是编写服务的人，最佳选择是直接使用 Prometheus 客户端库来进行代码仪表化。以下编程语言有官方的客户端库：
- en: Go
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go
- en: Java/JVM
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java/JVM
- en: Python
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python
- en: Ruby
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ruby
- en: 'There are community-driven client libraries for the following programming languages:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下编程语言有社区驱动的客户端库：
- en: Bash
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bash
- en: C++
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++
- en: Common Lisp
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Common Lisp
- en: Elixir
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Elixir
- en: Erlang
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Erlang
- en: Haskell
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Haskell
- en: Lua for NGINX
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lua for NGINX
- en: Lua for Tarantool
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lua for Tarantool
- en: .NET
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET
- en: C#
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C#
- en: Node.js
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Node.js
- en: Perl
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Perl
- en: PHP
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP
- en: Rust
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rust
- en: Due to an ever-growing community around Prometheus, this list is constantly
    expanding.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 由于围绕 Prometheus 的社区不断壮大，这个列表也在不断扩展。
- en: Usually, exporters are very light and the performance footprint is mostly negligible
    but, as always, there are exceptions for this rule, on which we will go into considerable
    detail later in this book.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，导出程序非常轻量，性能开销通常可以忽略不计，但像往常一样，也有一些例外，我们将在本书的后面详细讲解这些例外。
- en: Alert routing and management with Alertmanager
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Alertmanager 进行警报路由和管理
- en: 'Alertmanager is the component from the Prometheus ecosystem that''s responsible
    for the notifications that are triggered by the alerts that are generated from
    the Prometheus server. As such, its availability is of the essence and the design
    choices reflect this need. It''s the only component that''s truly conceived to
    work in a highly available cluster setup, and uses gossip as the communication
    protocol:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Alertmanager 是 Prometheus 生态系统中的一个组件，负责处理由 Prometheus 服务器生成的警报触发的通知。因此，它的可用性至关重要，设计选择也反映了这一需求。它是唯一真正为高可用集群设置而设计的组件，并使用
    gossip 作为通信协议：
- en: '![](img/ba795207-1d75-4eec-9a30-5b8229ed3ec3.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba795207-1d75-4eec-9a30-5b8229ed3ec3.png)'
- en: 'Figure 2.3: A high-level overview of Alertmanager'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3：Alertmanager 高级概览
- en: At a very high level, Alertmanager is a service that receives HTTP POST requests
    from Prometheus servers via its API, which it then deduplicates and acts on by
    following a predefined set of routes.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 从高层次来看，Alertmanager 是一个通过其 API 从 Prometheus 服务器接收 HTTP POST 请求的服务，然后它会去重并根据预定义的路由集进行处理。
- en: Alertmanager also exposes a web interface to allow, for instance, the visualization and
    silencing of firing alerts or applying inhibition rules for them.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Alertmanager 还暴露了一个 Web 界面，用于例如可视化和静音触发的警报，或为它们应用抑制规则。
- en: One of the core design choices is to value delivery over deduplication. This
    means that if a network partition occurs between a cluster of Alertmanager instances,
    notifications will be sent from both sides of the partition.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 核心设计选择之一是重视交付而非去重。这意味着，如果在一组 Alertmanager 实例之间发生网络分区，通知将从分区的两侧发送。
- en: Alerting routes
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 警报路由
- en: A route, in its essence, can be seen as a tree-like structure. If an incoming
    alert has a specific payload that triggers a particular route (branch), a pre-defined
    integration will be invoked.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，路由可以看作是一种树状结构。如果一个传入的警报具有特定的有效负载并触发某个特定的路由（分支），则会调用预定义的集成。
- en: 'There are multiple out-of-the-box integrations available for the most common
    use cases, such as the following:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 针对最常见的用例，已有多个开箱即用的集成可供使用，举例如下：
- en: Email
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Email
- en: Hipchat
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hipchat
- en: PagerDuty
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PagerDuty
- en: Slack
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Slack
- en: Opsgenie
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Opsgenie
- en: VictorOps
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VictorOps
- en: WeChat
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微信
- en: There's also the webhook integration that issues an HTTP POST request with the
    JSON payload of the firing alert to an endpoint of your choosing, opening a world
    of possibilities for custom integrations.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 还有 Webhook 集成，它会向您选择的端点发送带有触发警报的 JSON 负载的 HTTP POST 请求，打开了自定义集成的无限可能性。
- en: Visualizing your data
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化您的数据
- en: Data visualization is one of the simplest ways to produce or consume information.
    Prometheus exposes a well-defined API, where PromQL queries can produce raw data
    for visualizations.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 数据可视化是产生或消费信息的最简单方式之一。Prometheus 提供了一个定义良好的 API，在该 API 中，PromQL 查询可以生成用于可视化的原始数据。
- en: Currently, the best external software for visualization is Grafana, which we
    will explain thoroughly in [Chapter 10](02331a85-bad1-4a4f-b56e-150b69b46edb.xhtml),
    *Discovering and Creating Grafana Dashboards*. The Grafana team has made its integration
    with Prometheus seamless, and the result is a delightful user experience.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，最好的外部可视化软件是 Grafana，我们将在[第 10 章](02331a85-bad1-4a4f-b56e-150b69b46edb.xhtml)中详细解释，*发现和创建
    Grafana 仪表板*。Grafana 团队已经使其与 Prometheus 的集成无缝，结果是令人愉快的用户体验。
- en: 'The Prometheus server also ships with two internal visualizations components:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus 服务器还附带两个内部可视化组件：
- en: '**Expression browser**: Here, you can run PromQL directly to quickly query
    data and visualize it instantly:'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表达式浏览器**：在这里，您可以直接运行 PromQL 快速查询数据并即时可视化：'
- en: '![](img/dbe02ffd-3636-427d-98fb-05d6473f4aba.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dbe02ffd-3636-427d-98fb-05d6473f4aba.png)'
- en: 'Figure 2.4: The Prometheus expression browser interface'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4：Prometheus 表达式浏览器界面
- en: '**Consoles**: These are web pages that are built using the Golang templating
    language and are served by the Prometheus server itself. This approach allows
    you to have pre-defined data visualization interfaces without you having to constantly
    type PromQL:'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制台**：这些是使用 Golang 模板语言构建的网页，由 Prometheus 服务器本身提供。这种方法使您能够拥有预定义的数据可视化界面，而无需不断键入
    PromQL：'
- en: '![](img/e481f288-10af-4749-bb39-6c138481a265.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e481f288-10af-4749-bb39-6c138481a265.png)'
- en: 'Figure 2.5: The Prometheus console interface'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5：Prometheus 控制台界面
- en: Summary
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: To better understand the Prometheus philosophy, it is essential to have an insight –
    even if it's at a high level—into the main components of the Prometheus ecosystem,
    from data collection via exporters to reliable alerting using Alertmanager, as
    well as the available visualization options. This is what we covered in this chapter.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解 Prometheus 的理念，必须深入了解 Prometheus 生态系统的主要组件——从通过导出器收集数据到使用 Alertmanager
    进行可靠的警报，以及可用的可视化选项。我们在这一章中已经涵盖了这些内容。
- en: In the next chapter, we'll start building a test environment, so that all the
    concepts we've discussed so far can start to materialize.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将开始构建一个测试环境，这样我们迄今为止讨论的所有概念就能开始实现。
- en: Questions
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the main components of the Prometheus ecosystem?
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Prometheus 生态系统的主要组成部分是什么？
- en: Which components are essential and which are optional for a Prometheus deployment?
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Prometheus 部署中，哪些组件是必需的，哪些是可选的？
- en: Why are out-of-process exporters needed?
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么需要外部导出器？
- en: When an HTTP GET request hits the metrics endpoint of an exporter, what ensues?
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 HTTP GET 请求访问导出器的指标端点时，会发生什么？
- en: What happens to a triggering alert in an Alertmanager cluster if a network partition
    occurs?
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果网络分区发生，在 Alertmanager 集群中触发的警报会发生什么情况？
- en: You realize you need to integrate Alertmanager with a custom-made API. What
    would be your quickest option?
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您意识到需要将 Alertmanager 与定制的 API 集成。最快的选择是什么？
- en: What visualizations options are included in a standard Prometheus server installation?
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 标准 Prometheus 服务器安装中包括哪些可视化选项？
- en: Further reading
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: '**Prometheus overview**: [https://prometheus.io/docs/introduction/overview/](https://prometheus.io/docs/introduction/overview/)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Prometheus 概述**：[https://prometheus.io/docs/introduction/overview/](https://prometheus.io/docs/introduction/overview/)'
