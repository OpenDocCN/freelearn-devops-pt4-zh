- en: Setting Up a Test Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best way to learn is by doing. This chapter will help you quickly spin up
    an environment for testing so that you can safely experiment without worrying
    too much. It will provide several configuration examples and tips on how to get
    things running. This type of environment will also be used throughout this book
    in several different scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: 'In brief, the following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Code organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Machine requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spinning up a new environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code organization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the examples and code listings in this book can be used directly without
    any supporting material, a companion Git repository is also provided to help you
    with the setup process and the automation of test environments so that you can
    follow along easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we''re going to explore how that repository is organized,
    explain some choices that are made in terms of the automation of the test environments,
    and give some pointers on how to customize them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The root structure of the repository shown here should be fairly easy to understand:'
  prefs: []
  type: TYPE_NORMAL
- en: One directory per chapter that needs its own test environment (aptly named `chapter`,
    followed by the chapter number)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `cache` directory, which will hold downloaded packages so that rebuilding
    test environments becomes as fast as possible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `utils` directory, where default versions and parameters of the test environments
    can be found (and changed if wanted), along with some helper functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, we are going to drill down and have a closer look at each of these, like
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `utils` directory, the following files can be found:'
  prefs: []
  type: TYPE_NORMAL
- en: '`defaults.sh`: Here, the versions of each component in the Prometheus stack
    (such as Prometheus itself, along with exporters and Alertmanager, among others)
    that will be used in the test environments can be found.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vagrant_defaults.rb`: This file controls a couple of tunable parameters for
    the virtual machines that are used to run the test environments, like the amount
    of RAM each virtual machine will have, which base image to use, and what the environment''s
    internal network will look like.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`helpers.sh`: This is a shell library that''s used by the provisioning scripts
    with some helper functions to manage the downloading and caching of archives:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'While each test environment will differ in some ways between chapters, the
    basic structure will remain the same:'
  prefs: []
  type: TYPE_NORMAL
- en: A `Vagrantfile` to describe how many virtual machines are needed for the test
    environment, along with how to configure and provision them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `configs` directory to house configuration files that will be used in the
    provision step
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `provision` directory with scripts to download, install, and configure each
    of the Prometheus components that are required for the current test environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can see an example of this by looking at the tree structure for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `configs` directory has sub-directories for each of the components that's
    used in this chapter. The `provision` directory follows the same model, with an
    added `hosts.sh` shell script to automate the management of `/etc/hosts` file
    on the guests.
  prefs: []
  type: TYPE_NORMAL
- en: 'By now, the question of *Why not just use configuration management?* might
    have risen in the minds of some. All the provisioning automation was done in a
    shell for a couple of reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: This was a conscious effort to expose every detail, not abstract them away.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shell scripting is the lowest common denominator of automation in Unix-like
    systems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The purpose of this book is to focus on the inner workings of Prometheus, not
    the specific implementation of a given configuration management tool.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Machine requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The machine requirements for this setup can comfortably run on a modern laptop,
    as long it has CPU virtualization extensions enabled and its operating system
    is compatible with the software requirements. All the software requirements that
    are covered here were thought-out. We will be using free and open source software,
    so no extra cost should be necessary when you try out the test environments.
  prefs: []
  type: TYPE_NORMAL
- en: Hardware requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The minimal requirements for the host deploying the provided examples are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: At least 2 CPU cores
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At least 4 GB of memory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At least 20 GB of free disk space
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With these specifications, you should be able to spin up the test environment
    without encountering any issues.
  prefs: []
  type: TYPE_NORMAL
- en: Regarding connectivity, the host machine should have internet access and the
    ability to resolve external DNS records. The provision scripts will have to download
    dependencies during their execution, though most of the dependencies will be cached
    locally to avoid being downloaded in every deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default network for the example environment is `192.168.42.0/24`, and the
    following diagram illustrates the configuration you would get when running this
    chapter''s example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/326e5b7a-81c1-4e5e-8eda-b3893b98753c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.1: Virtual network configuration'
  prefs: []
  type: TYPE_NORMAL
- en: When launching a test environment, the subnet `192.168.42.0/24` will be used.
    Each environment belongs to a specific chapter, and should be destroyed before
    switching to a new one. If you encounter a conflict with your local address space,
    you can change the test environment subnet by editing the NETWORK option in the
    provided `./utils/vagrant_defaults.rb` file.
  prefs: []
  type: TYPE_NORMAL
- en: Recommended software
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The environment was tested using the following software, and so the standard
    disclaimer applies: although other versions within their respective major releases
    might work without additional changes, care should be taken when using versions
    that are different from the ones we''ve recommended:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Software | Version |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| VirtualBox | 6.0.4 |'
  prefs: []
  type: TYPE_TB
- en: '| Vagrant | 2.2.4 |'
  prefs: []
  type: TYPE_TB
- en: '| Minikube | 1.0.1 |'
  prefs: []
  type: TYPE_TB
- en: '| kubectl | 1.14.1 |'
  prefs: []
  type: TYPE_TB
- en: 'Regarding supported operating systems, all the tests were conducted using the
    following versions of Linux and macOS:'
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu 18.04 LTS (Bionic Beaver)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: macOS 10.14.3 (Mojave)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other operating systems/distributions might be able to run the test environments,
    although it's not ensured.
  prefs: []
  type: TYPE_NORMAL
- en: VirtualBox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Oracle VirtualBox is a free and open source hypervisor, which runs on all major
    operating systems (macOS, Linux, and Windows). It allows you to not only launch
    virtual machine images, but also create virtual networks and mount host filesystem
    paths into the guests, among other features. This software requires hardware virtualization
    to be enabled.
  prefs: []
  type: TYPE_NORMAL
- en: You can find all the installation files for VirtualBox at [https://www.virtualbox.org/wiki/Downloads ](https://www.virtualbox.org/wiki/Downloads)
  prefs: []
  type: TYPE_NORMAL
- en: Vagrant
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HashiCorp Vagrant allows for the creation of portable environments. In the context
    of this book, it will become the interface with VirtualBox, allowing for the launch
    and configuration of virtual machines. In our examples, we chose to use Chef Bento
    as the virtual machine image, as recommended by HashiCorp.
  prefs: []
  type: TYPE_NORMAL
- en: You can find all the installation files for Vagrant at [https://www.vagrantup.com/downloads.html](https://www.vagrantup.com/downloads.html)
  prefs: []
  type: TYPE_NORMAL
- en: Minikube
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Minikube is the easiest way to test Kubernetes locally. We will be using Minikube
    in conjunction with VirtualBox to guarantee that the examples in this book behave
    the same way across operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: You can find all the installation information for Minikube at [https://kubernetes.io/docs/tasks/tools/install-minikube/#install-minikube](https://kubernetes.io/docs/tasks/tools/install-minikube/#install-minikube).
  prefs: []
  type: TYPE_NORMAL
- en: kubectl
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The client tool for interacting with the Kubernetes API is called **kubectl**,
    and is fundamental for some of the examples in this book.
  prefs: []
  type: TYPE_NORMAL
- en: You can find all the installation information for kubectl at [https://kubernetes.io/docs/tasks/tools/install-minikube/#install-kubectl](https://kubernetes.io/docs/tasks/tools/install-minikube/#install-kubectl).
  prefs: []
  type: TYPE_NORMAL
- en: Spinning up a new environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After you have ensured that all the required software is available on your host,
    you may proceed with one or both of the following walkthroughs.
  prefs: []
  type: TYPE_NORMAL
- en: Automated deployment walkthrough
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This method will abstract all the deployment and configuration details, allowing
    you to have a fully running test environment with only a couple of commands. You'll
    still be able to connect to each of the guest instances and change configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps to spin up the environment are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Clone this book''s repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Step into the newly created directory and chapter number:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Spin up this chapter''s test environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The first run will take a few minutes because the Vagrant image and some of
    the software dependencies will have to be downloaded. After this setup process,
    subsequent runs will be much faster since all those assets will be kept in the
    cache.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can run `vagrant status`. You will be presented with the following
    output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Prometheus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find the Prometheus HTTP endpoint at `http://192.168.42.10:9090/targets`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/949b676e-24f7-4732-be42-a6f2f78522cf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.2: Prometheus HTTP endpoint – showing all configured targets'
  prefs: []
  type: TYPE_NORMAL
- en: Grafana
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find the Grafana HTTP endpoint at `http://192.168.42.11:3000`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Grafana''s default credentials are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Username** | **Password** |'
  prefs: []
  type: TYPE_TB
- en: '| `admin` | `admin` |'
  prefs: []
  type: TYPE_TB
- en: 'You''ll be greeted by two automatically provisioned dashboards. We''ll have
    an entire chapter dedicated to Grafana and dashboards later in this book, in [Chapter
    10](02331a85-bad1-4a4f-b56e-150b69b46edb.xhtml), *Discovering and Creating Grafana
    Dashboards*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/509dc02d-bdad-4b95-b34a-5a64b0a83e46.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.3: An automatically provisioned Grafana dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: Alertmanager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find the Alertmanager HTTP endpoint at `http://192.168.42.12:9093`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also configured an always-firing alert on Prometheus and a custom Alertmanager
    integration via webhook so that you can start to get a feel for how both are related.
    We''ll go into much more detail on Alertmanager in a different chapter, but for
    now, you may look at the logs that the example alert generates in the code repository
    root at `./cache/alerting.log`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac51788e-a403-430a-adfe-b3fdc06f5926.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.4: Alertmanager – firing an example alert'
  prefs: []
  type: TYPE_NORMAL
- en: Cleanup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you''ve finish testing, just make sure that''s you''re inside `chapter03`
    and execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Don't worry too much – you can easily spin up the environment again if you so
    desire.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced deployment walkthrough
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using this method, the guest virtual machines will be spun up but no provision
    will take place, so you''ll need to set up the environment yourself with a hands-on
    approach. We won''t go into detailed explanations of the available configuration
    files and command-line arguments – those will be thoroughly explored in the following
    chapters. So, as a high-level overview, for each software component, we are going
    to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Set up basic networking between the virtual machines in the environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an individual system user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download and install the software
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create support files and directories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start the daemon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To start, clone this book''s repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Step into the newly created directory and chapter number and run Vagrant without
    provisioning the guest instances. This will leave you with just off-the-shelf
    virtual machines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: After all the guests have started, we will continue by configuring our instances
    one by one.
  prefs: []
  type: TYPE_NORMAL
- en: Prometheus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to the Prometheus guest instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the guest instance, drop to the root:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Add all the guests'' addresses to the instance host''s file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new system user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Go into `/tmp` and download the Prometheus archive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Uncompress the archive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Place every file in its correct location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `systemd` unit file for the Prometheus service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Enable and start the Prometheus service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: You should now have the Prometheus HTTP endpoint available on your host.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exit the root account and then the Vagrant user account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Grafana
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to the Grafana guest instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the guest instance, drop to the root:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Add all the guests'' addresses to the instance host''s file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Go into `/tmp` and download the Grafana package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the package and all dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Place all the provided configurations on their correct location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Enable and start the Grafana service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: You should now have the Grafana HTTP endpoint available on your host.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exit the root account and then the Vagrant user account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Alertmanager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to the Alertmanager guest instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the guest instance, drop to the root:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Add all the guests'' addresses to the instance host''s file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new system user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Go into `/tmp` and download the Alertmanager archive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Uncompress the archive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Place every file in its correct location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `systemd` unit file for the Alertmanager service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Enable and start the Alertmanager service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: You should now have the Alertmanager HTTP endpoint available on your host.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exit the root account and then the Vagrant user account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Node Exporter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To ensure that system-level metrics will be collected, Node Exporter must be
    installed in all three virtual machines. To log in to each virtual machine, use
    the commands that we explored in the previous sections:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the guest instance, drop to the root:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new system user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Go into `/tmp` and download the Node Exporter archive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Place every file in its correct location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `systemd` unit file for the Node Exporter service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Enable and start the Node Exporter service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Exit the root account and then the Vagrant user account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Validating your test environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After running through these steps, you''ll be able to validate your environment
    by using the following endpoints on your host machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Service** | **Endpoint** |'
  prefs: []
  type: TYPE_TB
- en: '| Prometheus | `http://192.168.42.10:9090` |'
  prefs: []
  type: TYPE_TB
- en: '| Grafana | `http://192.168.42.11:3000` |'
  prefs: []
  type: TYPE_TB
- en: '| Alertmanager | `http://192.168.42.12:9093` |'
  prefs: []
  type: TYPE_TB
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With a test environment at your disposal, you can now inspect, change, and validate
    configurations without worrying about breaking things. Throughout this book, this
    approach to testing will be used extensively, because nothing beats experimenting
    when learning new skills.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll go over the fundamentals of Prometheus metrics. The
    test environment we just built will be helpful to demonstrate them.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the recommended tools to set up a reproducible test environment?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where can you change the default versions of the Prometheus components for the
    test environment?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the default subnet that's used on all examples?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At a high level, what are the steps to get a Prometheus instance up and running?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Node Exporter is installed on every guest instance. How can you quickly validate
    if all of them are exposing metrics correctly?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In our test environment, where can you find the alert log?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you create a clean test environment from scratch?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Bash manual**: [https://www.gnu.org/software/bash/manual/html_node/index.html](https://www.gnu.org/software/bash/manual/html_node/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Recommended Vagrant boxes**: [https://www.vagrantup.com/docs/boxes.html](https://www.vagrantup.com/docs/boxes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
