["```\ncd ./chapter06/\n```", "```\nvagrant global-status\nvagrant up\n```", "```\nvagrant status\n```", "```\nCurrent machine states:\n\nprometheus                running (virtualbox)\ntarget01                  running (virtualbox)\n\nThis environment represents multiple VMs. The VMs are all listed\nabove with their current state. For more information about a specific\nVM, run `vagrant status NAME`.\n```", "```\nvagrant ssh target01\n```", "```\nvagrant ssh prometheus\n```", "```\ncd ./chapter06/\n```", "```\nvagrant destroy -f\n```", "```\nminikube status\nminikube delete\n```", "```\nminikube start \\\n --cpus=2 \\\n --memory=3072 \\\n --kubernetes-version=\"v1.14.0\" \\\n --vm-driver=virtualbox\n```", "```\ncd ./chapter06/\n```", "```\nkubectl apply -f ./provision/kubernetes/operator/bootstrap/\n\nkubectl rollout status deployment/prometheus-operator -n monitoring\n```", "```\nkubectl apply -f ./provision/kubernetes/operator/deploy/\n\nkubectl rollout status statefulset/prometheus-k8s -n monitoring\n```", "```\nkubectl apply -f ./provision/kubernetes/operator/monitor/\n\nkubectl get servicemonitors --all-namespaces\n```", "```\nminikube service prometheus-service -n monitoring\n```", "```\nminikube dashboard\n```", "```\ncd ./chapter06/\nvagrant ssh target01\n```", "```\nvagrant@target01:~$ systemctl cat node-exporter\n```", "```\n...\nExecStart=/usr/bin/node_exporter --collector.textfile.directory=/var/lib/node_exporter\n...\n```", "```\nvagrant@target01:~$ echo test_metric 1 | sudo tee /var/lib/node_exporter/test.prom\n```", "```\nvagrant@target01:~$ curl -qs 0:9100/metrics | grep test_metric\n```", "```\n# HELP test_metric Metric read from /var/lib/node_exporter/test.prom\n# TYPE test_metric untyped\ntest_metric 1\n```", "```\ncd ./chapter06/provision/kubernetes/\n```", "```\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: cadvisor\n  namespace: monitoring\n...\n```", "```\n...\n    spec:\n     containers:\n      - name: cadvisor\n        volumeMounts:\n        - {name: rootfs, mountPath: /rootfs, readOnly: true}\n        - {name: var-run, mountPath: /var/run, readOnly: true}\n        - {name: sys, mountPath: /sys, readOnly: true}\n        - {name: docker, mountPath: /var/lib/docker, readOnly: true}\n        - {name: disk, mountPath: /dev/disk, readOnly: true}\n...\n```", "```\nkubectl apply -f ./cadvisor/cadvisor-daemonset.yaml\n```", "```\nkubectl rollout status daemonset/cadvisor -n monitoring\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    p8s-app: cadvisor\n  name: cadvisor-service\n  namespace: monitoring\nspec:\n  selector:\n    p8s-app: cadvisor\n  type: NodePort\n  ports:\n  - {name: http, protocol: TCP, port: 8080, targetPort: http}\n```", "```\nkubectl apply -f ./cadvisor/cadvisor-service.yaml\n```", "```\nminikube service cadvisor-service -n monitoring\n```", "```\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  labels:\n    p8s-app: cadvisor\n  name: cadvisor-metrics\n  namespace: monitoring\nspec:\n  endpoints:\n  - interval: 30s\n    port: http\n  selector:\n    matchLabels:\n      p8s-app: cadvisor\n```", "```\nkubectl apply -f ./cadvisor/cadvisor-servicemonitor.yaml\n```", "```\nminikube service prometheus-service -n monitoring\n```", "```\ncd ./chapter06/provision/kubernetes/\n```", "```\nkubectl apply -f ./kube-state-metrics/kube-state-metrics-rbac.yaml\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: kube-state-metrics\n  namespace: monitoring \nspec:\n  selector:\n    matchLabels:\n      k8s-app: kube-state-metrics\n  replicas: 1\n...\n```", "```\n...\n  template:\n    spec:\n      serviceAccountName: kube-state-metrics\n      containers:\n      - name: kube-state-metrics\n...\n      - name: addon-resizer\n...\n```", "```\nkubectl apply -f ./kube-state-metrics/kube-state-metrics-deployment.yaml\n```", "```\nkubectl rollout status deployment/kube-state-metrics -n monitoring\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n  name: kube-state-metrics\n  namespace: monitoring\n  labels:\n    k8s-app: kube-state-metrics\n  annotations:\n    prometheus.io/scrape: 'true'\nspec:\n  type: NodePort\n  ports:\n  - {name: http-metrics, port: 8080, targetPort: http-metrics, protocol: TCP}\n  - {name: telemetry, port: 8081, targetPort: telemetry, protocol: TCP}\n  selector:\n    k8s-app: kube-state-metrics\n```", "```\nkubectl apply -f ./kube-state-metrics/kube-state-metrics-service.yaml\n```", "```\nminikube service kube-state-metrics -n monitoring\n```", "```\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  labels:\n    k8s-app: kube-state-metrics\n  name: kube-state-metrics\n  namespace: monitoring\nspec:\n  endpoints:\n  - interval: 30s\n    port: http-metrics\n  - interval: 30s\n    port: telemetry\n  selector:\n    matchLabels:\n      k8s-app: kube-state-metrics\n```", "```\nkubectl apply -f ./kube-state-metrics/kube-state-metrics-servicemonitor.yaml\n```", "```\nminikube service prometheus-service -n monitoring\n```", "```\n# simple line counter\ncounter line_count\n/$/ {\n  line_count++\n}\n```", "```\ncd ./chapter06/\n\nvagrant ssh target01\n```", "```\nvagrant@target01:~$ systemctl cat mtail-exporter\n```", "```\n...\nGroup=adm\nExecStart=/usr/bin/mtail -address 0.0.0.0 -port 9197 -progs /etc/mtail_exporter/line_count.mtail -logs /var/log/syslog\n...\n```", "```\n  - job_name: 'mtail'\n    scrape_interval: 15s\n    scrape_timeout: 5s\n    static_configs:\n      - targets: ['target01:9197']\n```", "```\nglobal:\n    config_version: 2\n```", "```\ninput:\n    type: file\n    path: /var/log/syslog\n    readall: false\n```", "```\ngrok:\n    patterns_dir: /etc/grok_exporter/patterns\n```", "```\nmetrics:\n    - type: counter\n      name: grok_loglevel_example_total\n      help: Total log level events triggered.\n      match: '.*\\(echo %{LOGLEVEL:level}\\)$' \n      labels:\n          level: '{{.level}}'\n```", "```\nserver:\n    host: 0.0.0.0\n    port: 9144\n```", "```\ncd ./chapter06/\n\nvagrant ssh target01\n```", "```\nvagrant@target01:~$ systemctl cat grok-exporter\n```", "```\n...\nGroup=adm\nExecStart=/usr/bin/grok_exporter -config /etc/grok_exporter/config.yml\n...\n```", "```\n  - job_name: 'grok'\n    scrape_interval: 15s\n    scrape_timeout: 5s\n    static_configs:\n      - targets: ['target01:9144']\n```", "```\n# HELP probe_duration_seconds Returns how long the probe took to complete in seconds\n# TYPE probe_duration_seconds gauge\nprobe_duration_seconds 0.454460181\n# HELP probe_http_ssl Indicates if SSL was used for the final redirect\n# TYPE probe_http_ssl gauge\nprobe_http_ssl 0\n# HELP probe_http_status_code Response HTTP status code\n# TYPE probe_http_status_code gauge\nprobe_http_status_code 200\n# HELP probe_ip_protocol Specifies whether probe ip protocol is IP4 or IP6\n# TYPE probe_ip_protocol gauge\nprobe_ip_protocol 4\n# HELP probe_success Displays whether or not the probe was a success\n# TYPE probe_success gauge\nprobe_success 1\n```", "```\n  - job_name: 'blackbox-icmp'\n    metrics_path: /probe\n    params:\n      module: [icmp]\n    static_configs:\n      - targets:\n       - prometheus.prom.inet\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: target01:9115\n```", "```\ncd ./chapter06/\n\nvagrant ssh target01\n```", "```\nvagrant@target01:~$ systemctl cat blackbox-exporter\n```", "```\n...\nExecStart=/usr/bin/blackbox_exporter --config.file=/etc/blackbox_exporter/blackbox.yml\n...\n```", "```\nmodules:\n  http_2xx:\n    prober: http\n    http:\n      preferred_ip_protocol: ip4\n\n  icmp:\n    prober: icmp\n    icmp:\n      preferred_ip_protocol: ip4\n```", "```\n- job_name: 'blackbox-http'\n    metrics_path: /probe\n    params:\n      module: [http_2xx]\n    static_configs:\n      - targets: [ 'http://example.com', 'https://example.com:443' ]\n...\n  - job_name: 'blackbox-icmp'\n    metrics_path: /probe\n    params:\n      module: [icmp]\n    static_configs:\n      - targets:\n         - prometheus\n...\n```", "```\nhttp://<pushgateway_address>:<push_port>/metrics/job/<job_name>/[<label_name1>/<label_value1>]/[<label_nameN>/<label_valueN>]\n```", "```\ncd ./chapter06/provision/kubernetes/\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata: {name: pushgateway, namespace: monitoring}\nspec:\n  selector:\n    matchLabels: {p8s-app: pushgateway}\n  replicas: 1\n  template:\n    metadata:\n      labels: {p8s-app: pushgateway}\n    spec:\n      containers:\n      - name: pushgateway\n...\n```", "```\nkubectl apply -f ./pushgateway/pushgateway-deployment.yaml\n```", "```\nkubectl rollout status deployment/pushgateway -n monitoring\n```", "```\napiVersion: v1\nkind: Service\nmetadata:\n  name: pushgateway-service\n  namespace: monitoring\n  labels:\n    p8s-app: pushgateway\nspec:\n  type: NodePort\n  ports:\n  - {name: push-port, port: 9091, targetPort: push-port, protocol: TCP}\n  selector:\n    p8s-app: pushgateway\n```", "```\nkubectl apply -f ./pushgateway/pushgateway-service.yaml \n```", "```\nminikube service pushgateway-service -n monitoring\n```", "```\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  labels:\n    p8s-app: pushgateway\n  name: pushgateway\n  namespace: monitoring\nspec:\n  endpoints:\n  - interval: 30s\n    port: push-port\n    honorLabels: true\n  selector:\n    matchLabels:\n      p8s-app: pushgateway\n```", "```\nkubectl apply -f ./pushgateway/pushgateway-servicemonitor.yaml\n```", "```\napiVersion: batch/v1beta1\nkind: CronJob\nmetadata:\n  name: batchjob\nspec:\n  schedule: \"*/1 * * * *\"\n  jobTemplate:\n    spec:\n      template:\n        spec:\n          containers:\n          - name: batchjob\n            image: kintoandar/curl:7.61.1\n            args:\n            - -c\n            - 'echo \"batchjob_example $(date +%s)\" | curl -s --data-binary @- http://pushgateway-service.monitoring.svc.cluster.local:9091/metrics/job/batchjob/app/example/squad/yellow'\n          restartPolicy: OnFailure\n```", "```\nkubectl apply -f ./pushgateway/batchjob-cronjob.yaml\n```"]