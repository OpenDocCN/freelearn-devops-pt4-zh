- en: Troubleshooting and Validation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除与验证
- en: Troubleshooting is, in itself, an art and, in this chapter, we will provide
    some useful guidelines on how to quickly detect and fix problems. You will discover
    useful endpoints that expose critical information, learn about promtool, Prometheus'
    command-line interface and validation tool, and how to integrate it into your
    daily workflow. Finally, we'll look into the Prometheus database and collect insightful
    information regarding its usage.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 故障排除本身就是一种艺术，在本章中，我们将提供一些有用的指南，教你如何快速发现和修复问题。你将发现一些有用的端点，它们展示了关键信息，了解 promtool，Prometheus
    的命令行界面和验证工具，以及如何将其集成到日常工作流程中。最后，我们将探讨 Prometheus 数据库，并收集关于其使用的深刻信息。
- en: 'In brief, the following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，本章将涵盖以下主题：
- en: The test environment for this chapter
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的测试环境
- en: Exploring promtool
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 promtool
- en: Logs and endpoint validation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志和端点验证
- en: Analyzing the time series database
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析时间序列数据库
- en: The test environment for this chapter
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本章的测试环境
- en: In this chapter, we'll be focusing on the Prometheus server and will be deploying
    a new instance so that we can apply the concepts covered in this chapter using
    a new test environment.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点关注 Prometheus 服务器，并将部署一个新的实例，以便在新的测试环境中应用本章所讲的概念。
- en: Deployment
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署
- en: 'To create a new instance of Prometheus, move into the correct repository path:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的 Prometheus 实例，请进入正确的仓库路径：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Ensure that no other test environments are running and spin up this chapter''s
    environment:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 确保没有其他测试环境在运行，然后启动本章的环境：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can validate the successful deployment of the test environment using the
    following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令验证测试环境是否成功部署：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This should output the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这将输出以下内容：
- en: '[PRE3]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The new instance will be available for inspection and the Prometheus web interface
    is accessible at `http://192.168.42.10:9090`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 新实例将可以进行检查，且 Prometheus 的 Web 界面可以通过 `http://192.168.42.10:9090` 访问。
- en: 'You can now access the Prometheus instance by executing the following command:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以通过执行以下命令访问 Prometheus 实例：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now that you're connected to the Prometheus instance, you can validate the instructions
    described in this chapter.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经连接到 Prometheus 实例，你可以验证本章中描述的指令。
- en: Cleanup
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理
- en: 'When you finish testing, just make sure you''re inside `chapter08/` and execute
    the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 测试完成后，只需确保你在 `chapter08/` 目录下，并执行以下命令：
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Don't worry too much – you can easily spin up the environment again if you so
    require.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 不用太担心——如果需要，你可以轻松重新启动环境。
- en: Exploring promtool
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 promtool
- en: Prometheus ships with a very useful supporting command-line tool called `promtool`.
    This small Golang binary can be used to quickly perform several troubleshooting
    actions and is packed with helpful subcommands.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus 自带一个非常有用的命令行工具，叫做 `promtool`。这个小型的 Golang 二进制文件可以用来快速执行多个故障排除操作，并且内置了许多有用的子命令。
- en: The features available can be divided into four categories, which we'll be covering
    next.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的功能可以分为四个类别，我们将在接下来的内容中讨论。
- en: Checks
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查
- en: The subcommands that belong to this category provide the user with the ability
    to check and validate several configuration aspects of the Prometheus server and
    metric standards compliance. The following sections depict their usage.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 属于此类别的子命令允许用户检查和验证 Prometheus 服务器的多个配置方面以及指标标准的合规性。以下部分将展示它们的使用方法。
- en: check config
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查配置
- en: There are several types of checks presented by `promtool`. One of the most valuable
    is the check for the main configuration file for the Prometheus server.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`promtool` 提供了几种类型的检查。其中最有价值的一种是检查 Prometheus 服务器的主配置文件。'
- en: '`check config` expects a path to the Prometheus main configuration file and
    outputs its assessment of the validity of the configuration. When something is
    amiss, this subcommand can tell the user what the problem is: if it''s a non-breaking
    issue, such as an empty discovery file, it will output a warning but permit `promtool`
    to exit with success; when it encounters breaking errors, such as incorrect syntax,
    it will output an error and will mark the check as a failure. Using the exit code
    returned by the tool – `0` for success and `1` for failure – is a great way to
    ensure configuration changes won''t break Prometheus upon restart and should be
    used as a pre-flight check. Besides the main configuration file, this option also
    recursively checks any referenced file, such as rules files.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`check config` 需要提供 Prometheus 主配置文件的路径，并输出对配置有效性的评估。当配置有问题时，该子命令可以告知用户问题所在：如果是非破坏性的问题，比如空的发现文件，它会输出警告并允许
    `promtool` 成功退出；当遇到破坏性错误，例如语法错误时，它会输出错误并将检查标记为失败。通过工具返回的退出代码 – `0` 表示成功，`1` 表示失败
    – 是确保配置更改在 Prometheus 重启时不会导致崩溃的好方法，应作为预飞行检查使用。除了主配置文件外，该选项还会递归检查任何引用的文件，例如规则文件。'
- en: 'The following example illustrates its usage:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了它的用法：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: check rules
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查规则
- en: '`check rules` analyzes and pinpoints misconfigurations in rule configuration
    files. It allows the targeting of specific rules files directly, which lets you
    test files that aren''t yet referenced in the main Prometheus configuration. This
    ability can be handy in both the development cycle of rule files and for validating
    automatic changes in said files when using configuration management. We''ll be
    covering these concepts in depth in [Chapter 9](9aa1e3da-13cf-4051-845d-1d1c924ef47b.xhtml),
    *Defining Alerting and Recording Rules*.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`check rules` 分析并定位规则配置文件中的配置错误。它允许直接指定特定的规则文件，从而测试尚未在主 Prometheus 配置中引用的文件。这一功能在规则文件的开发周期中非常有用，也能帮助在使用配置管理时验证文件中的自动更改。我们将在[第九章](9aa1e3da-13cf-4051-845d-1d1c924ef47b.xhtml)中深入讨论这些概念，*定义告警和记录规则*。'
- en: 'Here''s the expected output when checking a rule file:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是检查规则文件时的预期输出：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: check metrics
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查度量
- en: 'The `check metrics` subcommand validates whether the metrics passed to it follow
    the Prometheus guidelines in terms of consistency and correctness. This can be
    useful in the development cycle to make sure new instrumentation conforms to the
    standard, as well as using it in automation if you have some control over whether
    new jobs follow the same rules. It expects the metrics payload as input via `STDIN`,
    so you can pipe either a file or, the output of `curl` directly into it. For the
    sake of this example, we are exposing an issue that occurred in Prometheus prior
    to version `2.8.0`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`check metrics` 子命令验证传递给它的度量指标是否遵循 Prometheus 在一致性和正确性方面的标准。这在开发周期中非常有用，确保新的仪表化代码符合标准，也可用于自动化管理，如果你能控制新作业是否遵循相同规则。它通过
    `STDIN` 接收度量数据作为输入，因此你可以直接将文件或 `curl` 输出传输给它。为了说明这个例子，我们暴露了 Prometheus 在版本 `2.8.0`
    之前发生的问题：'
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As you can see, there appears to be an issue with the `prometheus_tsdb_storage_blocks_bytes_total`
    metric. Let''s have a look at this particular metric to troubleshoot the error:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`prometheus_tsdb_storage_blocks_bytes_total` 度量指标似乎存在问题。让我们查看这个特定的度量指标，排查错误：
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In these older versions of Prometheus, it appears the metric is declared as
    a gauge but has the `_total` suffix, which should only be used in counters.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些较旧版本的 Prometheus 中，似乎该度量被声明为仪表值，但却带有 `_total` 后缀，而该后缀应该仅用于计数器。
- en: Queries
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询
- en: The subcommands that belong to this category enable the execution of PromQL
    expressions directly from the command line. These queries rely on the Prometheus
    public HTTP API. The following topics demonstrate how to use them.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 属于这一类别的子命令使得可以直接在命令行中执行 PromQL 表达式。这些查询依赖于 Prometheus 公共 HTTP API。以下主题展示了如何使用它们。
- en: query instant
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询即时数据
- en: 'The `query instant` subcommand allows the querying of the Prometheus server
    directly via the command line based on the current time. For it to work, a Prometheus
    server URL must be supplied as an argument, as well as the query to execute, like
    so:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`query instant` 子命令允许通过命令行直接查询 Prometheus 服务器，基于当前时间进行查询。要使其工作，必须提供 Prometheus
    服务器的 URL 作为参数，以及要执行的查询，如下所示：'
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: query range
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询时间范围
- en: Similar to the previous subcommand, `query range` enables the results to be
    displayed for a specified time range. As such, we must provide the start and end
    Unix-formatted timestamps, as well as the query and Prometheus server endpoint.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的子命令类似，`query range` 能够显示指定时间范围内的结果。因此，我们必须提供开始和结束的 Unix 格式时间戳，以及查询和 Prometheus
    服务器端点。
- en: 'As an example, we''ll be using the `date` command to define the start and end
    timestamps, generating a Unix-formatted timestamp for five minutes ago and another
    for now. We may also specify the resolution of our query using the `--step` flag,
    which in our example is one minute. Finally, we place the PromQL expression to
    be executed, ending up with an instruction similar to the following:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们将使用 `date` 命令来定义开始和结束时间戳，生成五分钟前和现在的 Unix 格式时间戳。我们还可以使用 `--step` 标志来指定查询的分辨率，在我们的示例中是一分钟。最后，我们放置要执行的
    PromQL 表达式，最终得到类似以下的指令：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `date` command available inside our test environment is from GNU `coreutils`,
    which differs from the BSD-based one available on macOS. The syntax might not
    be directly compatible between the two.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的测试环境中，可用的 `date` 命令来自 GNU `coreutils`，与 macOS 上基于 BSD 的命令不同。两者的语法可能不直接兼容。
- en: query series
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询系列
- en: 'With the `query series` subcommand, you can search all of the time series that
    match a set of metric names and labels. Here''s how to use it:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `query series` 子命令，您可以搜索匹配一组度量名称和标签的所有时间序列。以下是如何使用它：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: query labels
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询标签
- en: 'Using `query labels`, you can search for a specific label across all the available
    metrics and return all the possible values attached to it; for example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `query labels`，您可以在所有可用的度量标准中搜索特定标签，并返回附加到它的所有可能值；例如：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Debug
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试
- en: The subcommands that belong to this category allow the extraction of debug data
    from the running Prometheus server so it can be analyzed. We'll be demonstrating how
    to use them next.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 属于此类别的子命令允许从运行中的 Prometheus 服务器中提取调试数据以便分析。接下来我们将演示如何使用它们。
- en: debug pprof
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试 pprof
- en: 'The Prometheus server, like most serious software written in Go, is instrumented
    using a package from the standard library named `pprof`, which provides runtime
    profiling information using a specific format. The files produced in this format
    can then be read by a command-line tool with the same name (`pprof`), which uses
    them to generate reports and visualizations of the profiling data. `promtool`
    offers the `debug pprof` subcommand, which we can see in action in the following
    snippet:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus 服务器，像大多数用 Go 语言编写的严肃软件一样，使用标准库中名为 `pprof` 的包进行仪表化，该包使用特定格式提供运行时分析信息。生成的这种格式的文件可以由同名的命令行工具
    `pprof` 读取，后者用于生成分析数据的报告和可视化。`promtool` 提供 `debug pprof` 子命令，我们可以在以下代码片段中看到它的操作：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'When we extract the archive generated by the previous command, we can see a
    few files:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们提取前一个命令生成的存档时，可以看到一些文件：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Using `pprof`, we can generate an image of the dump, as we can observe in the
    next snippet:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `pprof`，我们可以生成一个转储的图像，正如我们在下一个片段中可以观察到的：
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The test environment comes with the `pprof` command-line tool ready to be used.
    More information on how to build and deploy it is available at [https://github.com/google/pprof](https://github.com/google/pprof).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 测试环境已准备好使用的 `pprof` 命令行工具。有关如何构建和部署它的更多信息，请访问 [https://github.com/google/pprof](https://github.com/google/pprof)。
- en: 'On your host machine, inside the code repository under the `./cache/` path
    (relative to the repository root), you should now have a scalable vector graphics
    file named `heap.svg`, which can be opened by your browser for inspection. The
    following screenshot shows what you might see when looking at the file produced
    by the preceding example:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的主机机器上，在代码库的 `./cache/` 路径（相对于库的根目录）下，您现在应该有一个名为 `heap.svg` 的可扩展矢量图像文件，可以通过浏览器进行检查。以下截图显示了在前面示例生成的文件时可能看到的内容：
- en: '![](img/4f459c31-a4a3-4664-8d7d-fab050e008cf.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4f459c31-a4a3-4664-8d7d-fab050e008cf.png)'
- en: 'Figure 8.1: Example of a heap map generated by pprof'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 'Figure 8.1: 由 pprof 生成的热图示例'
- en: debug metrics
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试度量
- en: 'This subcommand downloads the metrics exposed by the supplied Prometheus instance
    in a compressed archive. `debug metrics` is not commonly used as the `/metrics`
    Prometheus endpoint is available to anyone able to run this command; it exists
    so that it is easier to provide the current state of a Prometheus instance to
    external assistance (such as the Prometheus maintainers) when asked to. This subcommand
    can be used as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此子命令下载由提供的 Prometheus 实例公开的度量数据，并以压缩档案的形式保存。`debug metrics` 通常不常用，因为 `/metrics`
    Prometheus 端点对任何能够运行此命令的人开放；它的存在是为了在需要时更容易向外部支持人员（例如 Prometheus 维护者）提供 Prometheus
    实例的当前状态。此子命令可以如下使用：
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: debug all
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试全部
- en: 'This option aggregates the previous debug subcommands into a single instruction,
    as we can see in the following example:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项将之前的调试子命令聚合为一个指令，如以下示例所示：
- en: '[PRE18]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Tests
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试
- en: '`promtool` has recently gained the ability to run unit tests against defined
    recording and alerting rules. This feature is very useful in situations where
    you might need to check whether an expression matches certain conditions that
    have never happened before, thus making it difficult to be sure they will work
    when the time comes. This subcommand is called `test rules` and takes one or more
    test files as arguments. We''re going to provide a deep dive of this feature later
    on, when we tackle how to best take advantage of rules in [Chapter 9](9aa1e3da-13cf-4051-845d-1d1c924ef47b.xhtml),
    *Defining Alerting and Recording Rules*.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`promtool` 最近获得了运行单元测试的能力，测试已定义的记录和告警规则。在你可能需要检查某个表达式是否匹配某些从未发生过的条件的情况下，这个功能非常有用，因此很难确定它们在关键时刻是否能正常工作。这个子命令被称为
    `test rules`，并且需要一个或多个测试文件作为参数。稍后我们将在第[9章](9aa1e3da-13cf-4051-845d-1d1c924ef47b.xhtml)《定义告警和记录规则》中深入探讨如何最好地利用规则。'
- en: Logs and endpoint validation
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志和端点验证
- en: In the next sections, we go through several useful HTTP endpoints and service
    logs that can be fundamental to troubleshoot issues with a Prometheus instance.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将介绍一些有用的 HTTP 端点和服务日志，这些对于排查 Prometheus 实例的问题至关重要。
- en: Endpoints
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 端点
- en: 'Checking whether Prometheus is up and running is usually very simple, as it
    follows the conventions most cloud-native applications use for service health:
    one endpoint to check whether the service is healthy and another to check whether
    it is ready to start handling incoming requests. For those who use or have used
    Kubernetes in the past, these might sound familiar; in fact, Kubernetes also uses
    these conventions to assess whether a container needs to be restarted (for example,
    if the application deadlocks and stops responding to health probes) and whether
    it can start sending traffic to the container. In Prometheus, these are the `/-/healthy`
    and `/-/ready` endpoints.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 检查 Prometheus 是否正常运行通常非常简单，因为它遵循大多数云原生应用程序用于服务健康检查的约定：一个端点用于检查服务是否健康，另一个用于检查服务是否准备好处理传入请求。对于那些使用过或曾经使用过
    Kubernetes 的人来说，这些概念可能会感觉很熟悉；事实上，Kubernetes 也使用这些约定来评估容器是否需要重启（例如，如果应用程序死锁并停止响应健康检查）以及是否可以开始向容器发送流量。在
    Prometheus 中，这些就是 `/-/healthy` 和 `/-/ready` 端点。
- en: 'You can try these endpoints yourself by running the following commands in the
    test environment and checking their output, as well as their HTTP status code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在测试环境中运行以下命令并检查其输出以及 HTTP 状态码，自己尝试这些端点：
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In traditional infrastructure, it is usual to use the readiness endpoint as
    the backend health probe when using load balancers in front of a set of Prometheus
    instances, as only one health check can be configured. By using the readiness
    endpoint, traffic is only routed to an instance ready to accept it.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的基础设施中，通常使用就绪端点作为负载均衡器前面一组 Prometheus 实例的后端健康检查，因为只能配置一个健康检查。通过使用就绪端点，流量仅会被路由到准备好接收流量的实例。
- en: 'Additionally, Prometheus exposes a `/debug/pprof/` endpoint, which is used
    by the `promtool debug pprof` command, as was shown in the previous section. This
    endpoint also exposes a navigable web UI where `pprof` debug information can be
    consulted, such as current goroutines and their stack traces, heap allocations,
    memory allocations, and more:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Prometheus 还暴露了一个 `/debug/pprof/` 端点，它由 `promtool debug pprof` 命令使用，如前节所示。此端点还暴露了一个可导航的
    Web UI，用户可以查看 `pprof` 调试信息，如当前的 goroutine 及其堆栈跟踪、堆分配、内存分配等：
- en: '![](img/1b086a77-cbde-4025-b506-eb3680ceeba3.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1b086a77-cbde-4025-b506-eb3680ceeba3.png)'
- en: 'Figure 8.2: Information available on the Prometheus server/debug/pprof endpoint'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2：Prometheus服务器/debug/pprof端点可用的信息
- en: Logs
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志
- en: Prometheus logging is very terse when compared with most current software. This
    is a very conscious effort from the part of the Prometheus maintainers, as extraneous
    logging can lead to performance issues. Additionally, supporting different log
    streams (such as application logs, access logs, and slow query logs) without just
    writing it all to standard output - and thus spamming the application log with
    other types of logs - would force Prometheus to explicitly support writing to
    files, which is undesirable in cloud-native environments. Having said that, you
    can configure Prometheus to increase application log verbosity by setting the
    `--log.level` flag. As an example, failed scrapes are considered normal operating
    behavior and, as such, do not show up in the logs; however, they can be recorded
    by increasing the log verbosity to the `debug` log level.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数当前软件相比，Prometheus的日志非常简洁。这是Prometheus维护人员的有意为之，因为过多的日志记录可能会导致性能问题。此外，支持不同的日志流（例如应用日志、访问日志和慢查询日志），而不是将所有日志都写入标准输出——从而使应用日志被其他类型的日志淹没——将迫使Prometheus明确支持写入文件，这在云原生环境中是不受欢迎的。话虽如此，你可以通过设置`--log.level`标志来配置Prometheus增加应用日志的详细级别。例如，失败的抓取被认为是正常的操作行为，因此不会出现在日志中；但是，通过将日志详细级别增加到`debug`，它们是可以被记录的。
- en: 'The Prometheus instance in the test environment for this chapter is already
    configured with the log level set to debug. You can confirm this by running the
    following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 本章测试环境中的Prometheus实例已配置为调试级别日志。你可以通过运行以下命令来确认这一点：
- en: '[PRE20]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The relevant section should have the following flags set:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 相关部分应该设置如下标志：
- en: '[PRE21]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'So, now we can see what happens when a scrape fails. To make this happen, we
    can stop the `node_exporter` service on the test environment and have a look at
    the Prometheus logs:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到当抓取失败时会发生什么。为了实现这一点，我们可以在测试环境中停止`node_exporter`服务，然后查看Prometheus的日志：
- en: '[PRE22]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Analyzing the time series database
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析时间序列数据库
- en: A critical component of the Prometheus server is its time series database. Being
    able to analyze the usage of this database is essential to detect series churn
    and cardinality problems. Churn, in this context, refers to time series that become
    stale (for example, from the origin target stop being collected or the series
    disappearing from one scrape to the next), and a new series with slightly different
    identity starts being collected next. A usual example of churn is related to Kubernetes
    application deploys, where the pod instance IP address changes making the previous
    time series obsolete, and replacing it with a new one. This impacts performance
    when querying, as samples with – possibly – no relevance are returned.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Prometheus服务器的一个关键组件是其时间序列数据库。能够分析该数据库的使用情况对于检测序列更替和基数问题至关重要。在此背景下，更替（Churn）指的是时间序列变得陈旧（例如，源目标停止收集数据或某个序列从一次抓取到下一次抓取之间消失），然后开始收集一个身份略有不同的新序列。一个常见的更替示例与Kubernetes应用部署相关，其中Pod实例的IP地址发生变化，导致之前的时间序列过时，取而代之的是一个新的序列。这会影响查询性能，因为可能会返回一些完全无关的样本。
- en: Thankfully, there's an obscure tool within the source code for the Prometheus
    database that allows analyzing its data, and is appropriately named `tsdb`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Prometheus数据库的源代码中有一个不太为人知的工具，可以分析其数据，这个工具名为`tsdb`。
- en: You can find the source code for the `tsdb` tool at [https://github.com/prometheus/tsdb/](https://github.com/prometheus/tsdb/).
    It can easily be built by running  `go get github.com/prometheus/tsdb/cmd/tsdb` on
    a system with the proper Go toolchain installed.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://github.com/prometheus/tsdb/](https://github.com/prometheus/tsdb/)找到`tsdb`工具的源代码。通过在安装了正确Go工具链的系统上运行`go
    get github.com/prometheus/tsdb/cmd/tsdb`，它可以很容易地构建。
- en: Using the tsdb tool
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用tsdb工具
- en: 'The `tsdb` tool can run against Prometheus'' entire database or just a particular
    block of data, and outputs useful information about the health of that data. To
    run this tool, we must ensure the Prometheus server is stopped:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`tsdb`工具可以针对Prometheus的整个数据库或仅针对某个数据块运行，并输出有关该数据健康状况的有用信息。为了运行此工具，我们必须确保Prometheus服务器已停止：'
- en: '[PRE23]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We''ll be running the `tsdb` tool targeting the Prometheus database path. For
    the sake of brevity, we''ll limit the output to three entries per section. If
    no block name is specified as an argument, the last available one will be used:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将运行 `tsdb` 工具，目标是 Prometheus 数据库路径。为了简洁起见，我们将每个部分的输出限制为三条。如果没有指定块名称作为参数，将使用最后一个可用的块：
- en: '[PRE24]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The output is split into a couple of sections. In the heading, we can find
    a summary for the block, including the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 输出被分为几个部分。在标题中，我们可以找到关于该块的摘要，包含以下内容：
- en: Its full path location
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其完整路径位置
- en: The block duration span, which, in standard Prometheus deployments defaults
    to two hours
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 块持续时间跨度，标准的 Prometheus 部署默认为两小时
- en: The number of series and label names contained in the block
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 块中包含的系列和标签名称的数量
- en: Statistics regarding the number of index entries
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关索引条目数量的统计信息
- en: 'Here, we can see the output generated by the previous instruction:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到前述指令生成的输出：
- en: '[PRE25]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'While churn isn''t really an issue in our test environment, we can see what
    label pairs were detected with the highest involvement in producing churn:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在我们的测试环境中更替并不是问题，但我们可以看到哪些标签对在产生更替方面有最高参与度：
- en: '[PRE26]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next, we can find the label names with the highest churn:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以看到基数最高的标签名称：
- en: '[PRE27]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Right after the label names churn, we are presented with the most common label
    pairs:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在标签名称更替之后，我们展示了最常见的标签对：
- en: '[PRE28]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Finally, we reach the high cardinality sections, starting with labels:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们进入高基数部分，从标签开始：
- en: '[PRE29]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '`__name__` is the internal label that stores the metric name, so it''s normal
    in a healthy Prometheus system for it to be considered the label with the highest
    cardinality. Keep in mind that this doesn''t mean a metric name can''t be wrongly
    used as a label (for example, suffixing metric names with IDs), so it''s important
    to keep an eye out for sudden increases in cardinality.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`__name__` 是存储指标名称的内部标签，因此，在健康的 Prometheus 系统中，它通常被认为是基数最高的标签。请记住，这并不意味着指标名称不能被错误地用作标签（例如，给指标名称加上
    ID 后缀），因此需要关注基数的突然增加。'
- en: 'Finally, we find statistics regarding metric names:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们找到了关于指标名称的统计信息：
- en: '[PRE30]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The preceding statistics are collected from a two hour block. This, however,
    can also be queried for a given moment via the expression browser using a query
    similar to `topk(3, count({__name__=~".+"}) by (__name__))`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 上述统计信息是从一个两小时的块中收集的。不过，也可以通过表达式浏览器查询特定时刻的数据，使用类似 `topk(3, count({__name__=~".+"})
    by (__name__))` 的查询。
- en: 'As stated before, you can choose a different block to analyze:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，您可以选择不同的块进行分析：
- en: '[PRE31]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The benefit of the `tsdb` report is that it provides a deeper understanding
    of how metrics and labels are being used, and pinpoints good candidates to be
    explored and validated against their targets.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`tsdb` 报告的好处在于，它提供了对指标和标签使用方式的更深入理解，并能够精确找出需要探索并验证其目标的良好候选项。'
- en: Summary
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we had the opportunity to experiment with a couple of useful
    tools to troubleshoot and analyze Prometheus configuration issues and performance.
    We started with `promtool` and went through all its available options; then, we
    used several endpoints and logs to ensure everything was working as expected.
    Finally, we described the `tsdb` tool and how it can be used to troubleshoot and
    pinpoint problems with cardinality and the churn of metrics and labels in our
    Prometheus database.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们有机会实验一些有用的工具，用于排除故障和分析 Prometheus 配置问题和性能。我们从 `promtool` 开始，了解了它的所有可用选项；然后，我们使用了多个端点和日志，以确保一切正常工作。最后，我们描述了
    `tsdb` 工具及其如何用于排查和定位 Prometheus 数据库中与基数和指标、标签的更替有关的问题。
- en: We can now step into recording and alerting rules, which will be covered in
    the next chapter.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以进入记录和告警规则，这将在下一章进行讲解。
- en: Questions
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How can you validate whether the main Prometheus configuration file has an issue?
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何验证主要的 Prometheus 配置文件是否有问题？
- en: How can you assess whether metrics exposed by a target are up to Prometheus
    standards?
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何评估目标暴露的指标是否符合 Prometheus 标准？
- en: Using `promtool`, how would you perform an instant query?
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `promtool`，您如何执行即时查询？
- en: How can you find all the label values being used?
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何查找所有使用的标签值？
- en: How do you enable debug logs on the Prometheus server?
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在 Prometheus 服务器上启用调试日志？
- en: What's the difference between ready and healthy endpoints?
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “准备好”端点和“健康”端点有什么区别？
- en: How can you find the churn of labels on an old block of Prometheus data?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何查找 Prometheus 数据中旧块的标签更替情况？
- en: Further reading
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '**Golang pprof**: [https://golang.org/pkg/runtime/pprof/](https://golang.org/pkg/runtime/pprof/)'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Golang pprof**: [https://golang.org/pkg/runtime/pprof/](https://golang.org/pkg/runtime/pprof/)'
