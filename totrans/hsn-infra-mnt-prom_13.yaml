- en: Discovering and Creating Grafana Dashboards
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Prometheus expression browser is great for performing exploratory queries,
    but sometimes we require prebuilt visualizations to assist us when we want to
    quickly debug issues. In this chapter, we'll dive into Grafana, the tool recommended
    by the Prometheus project for building dashboards. The Grafana community keeps
    growing and thriving, in part by hosting a multitude of ready-to-use dashboards,
    making it easy to reuse them and contribute to the community and thus improve
    the ecosystem. In this chapter, we will learn how to find and use dashboards from
    the community, as well as how to write our own and give something back to the
    community. Finally, we'll also provide a cursory look at consoles, the dashboarding
    solution built into Prometheus for advanced use cases.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In brief, the following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Test environment for this chapter
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use Grafana with Prometheus
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building your own dashboards
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering ready-made dashboards
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default Prometheus visualizations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test environment for this chapter
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To provide a hands-on approach, we''ll be creating a new test environment for
    this chapter. The setup we''ll be using resembles the following diagram:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/867a4731-0373-4838-8e98-26aa280b6609.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.1: Test environment network'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Deployment
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To generate this chapter''s **virtual machine** (**VM**) based test environment,
    go to the correct repository path, relative to the code repository root:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Ensure that no other test environments are running and spin up this chapter''s
    environment, as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can validate the successful deployment of the test environment using the
    following code:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This will give the following output:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When the deployment tasks end, you''ll be able to validate the following endpoints
    on your host machine using your favorite JavaScript-enabled web browser:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '| **Service** | **Endpoint** |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
- en: '| Prometheus | `http://192.168.42.10:9090` |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
- en: '| Grafana | `http://192.168.42.11:3000` |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
- en: 'You should be able to access the desired instance by using one of the following
    commands:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '| **Instance** | **Command** |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
- en: '| Prometheus | `vagrant ssh prometheus` |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
- en: '| Grafana | `vagrant ssh grafana` |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
- en: Cleanup
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you''ve finished testing, just make sure you''re inside `chapter10/` and
    execute the following command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Don't worry too much—you can easily spin up the environment again if you need
    to.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: How to use Grafana with Prometheus
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Grafana is the most recognized open source project for dashboarding. It has
    the concept of data sources, which are nothing more than integrations with data
    backends. At the time of writing, the following are the available data sources:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Prometheus
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graphite
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: InfluxDB
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elasticsearch
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Stackdriver
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS CloudWatch
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Monitor
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loki (logging visualization)
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PostgreSQL
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft SQL Server
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenTSDB
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TestData (useful for generating fake data for testing)
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Several efforts have been made to improve the integration of Prometheus into
    Grafana—for example, PromQL autocompletion. Currently, Grafana is the go-to dashboarding
    solution for anyone interested in visualizing Prometheus data. The previous sentence
    isn't completely true, because we know that for exploratory queries, there's nothing
    like the Prometheus expression browser. Recently, though, after the release of
    version 6.0.0, a feature called Explore was introduced in Grafana as an alternative
    expression browser.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 已经做了很多努力来提升 Prometheus 在 Grafana 中的集成性——例如，PromQL 自动补全。目前，Grafana 是任何想要可视化 Prometheus
    数据的人的首选仪表板解决方案。不过，前面的说法并不完全准确，因为我们知道，对于探索性查询来说，没有什么比 Prometheus 表达式浏览器更好的了。然而，最近在
    6.0.0 版本发布后，Grafana 引入了一项名为 Explore 的功能，作为替代的表达式浏览器。
- en: You can find the installation files for several operating systems and distributions
    at [https://grafana.com/grafana/download](https://grafana.com/grafana/download).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://grafana.com/grafana/download](https://grafana.com/grafana/download)
    下载多个操作系统和发行版的安装文件。
- en: Grafana is built and preconfigured with automation in mind. In the following
    examples, we will demonstrate how you can pretty much set up an environment without
    touching the main configuration file. A noteworthy benefit is that Grafana comes
    natively instrumented with Prometheus metrics.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Grafana 在构建时就考虑到了自动化。以下示例将展示你如何在不触碰主要配置文件的情况下几乎完成环境的设置。一个值得注意的好处是，Grafana 本身就已经集成了
    Prometheus 的度量指标。
- en: Login screen
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录界面
- en: 'With the test environment running, you can access Grafana using the `http://192.168.42.11:3000`
    URL. The user is greeted with a simple login screen, as follows:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试环境运行时，你可以通过 `http://192.168.42.11:3000` 网址访问 Grafana。用户将看到一个简单的登录界面，如下所示：
- en: '![](img/ac47013b-e9fb-45c2-aba3-f42bf359af55.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac47013b-e9fb-45c2-aba3-f42bf359af55.png)'
- en: 'Figure 10.2: Grafana login screen'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2：Grafana 登录界面
- en: 'The default authentication credentials are as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的身份验证凭证如下：
- en: '| **Username** | **Password** |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| **用户名** | **密码** |'
- en: '| `admin` | `admin` |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `admin` | `admin` |'
- en: 'After a successful login, we''re welcomed to the Grafana homepage, which displays
    a setup wizard. Next, we''re going to explain each one of the configuration steps
    that are presented. The following screenshot shows the wizard with some steps
    already configured:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 登录成功后，我们将进入 Grafana 的首页，首页会显示一个设置向导。接下来，我们将解释每个配置步骤。以下截图展示了向导，其中一些步骤已完成配置：
- en: '![](img/1f250cb1-8e67-4e0e-9eb9-03edbb93f21a.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f250cb1-8e67-4e0e-9eb9-03edbb93f21a.png)'
- en: 'Figure 10.3: Grafana home screen'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3：Grafana 首页
- en: For the sake of readability, we've changed the default Grafana theme to **Light**
    instead of **Dark**. This is easily configured in the **Preferences** menu in
    the **Configuration** tab (the small gear icon on the left).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高可读性，我们将默认的 Grafana 主题改为 **Light**，而不是 **Dark**。这可以在 **首选项** 菜单中的 **配置**
    标签（左侧的小齿轮图标）轻松配置。
- en: Data source
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据源
- en: To have data to query, we must configure a data source. In our case, we'll add
    our Prometheus instance as the default data source. To do this, we need to indicate
    where the data source is located, any authentication/authorization details that
    are needed, and any additional data source-specific configuration.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够查询数据，我们必须配置一个数据源。在我们的案例中，我们将把 Prometheus 实例添加为默认的数据源。为此，我们需要指明数据源的位置、所需的身份验证/授权信息，以及任何其他特定的数据源配置。
- en: 'There are two ways to configure a data source. One way is by adding a YAML
    file with the required configuration in the Grafana provisioning path, which is
    picked up by the service when starting up and is configured automatically. This
    is what we are doing in the test environment for this chapter, as it is the better
    solution for automated deployments. When connecting to the `grafana` instance
    in the test environment, you can see the configuration we are using by looking
    at the default provisioning path, shown as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 配置数据源有两种方式。一种方式是通过在 Grafana 配置路径中添加一个包含所需配置的 YAML 文件，服务在启动时会自动读取并配置。这就是我们在本章的测试环境中所做的，因为它是自动化部署的更好解决方案。当连接到测试环境中的
    `grafana` 实例时，你可以通过查看默认配置路径，看到我们正在使用的配置，路径如下所示：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The other option is using the web interface by going into **Configuration**
    (the small gear icon on the left) | **Data Sources** and adding the options for
    the setup manually. When clicking on **Save & Test**, Grafana will validate the
    settings and let you know if anything went wrong. Grafana provides two options
    for accessing data sources that provide HTTP-based APIs (such as Prometheus):
    with or without proxying requests. When proxying requests, every single query
    that''s made from a dashboard panel or through the Explore expression browser
    will be proxied through the Grafana backend to the data source. Although this
    has the advantages of being able to manage data source credentials centrally and
    to close off direct network access to those data sources from everywhere except
    trusted clients, it creates additional load on the Grafana instances as a lot
    more traffic needs to pass through them. Not proxying requests means that the
    client browser will hit the data source directly for each request. This configuration
    expects that the user accessing Grafana also has direct access to the data source
    being used, and that security settings for that data source allow requests from
    different origins. In all of our examples, Grafana will be set to proxy queries.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种选择是通过进入**配置**（左侧的小齿轮图标）| **数据源**，手动添加设置选项。在点击**保存并测试**后，Grafana 将验证设置，并告知你是否存在任何问题。Grafana
    提供了两种访问提供 HTTP 基础 API（如 Prometheus）的数据源的选项：是否代理请求。当代理请求时，从仪表板面板或通过探索表达式浏览器发出的每一个查询都会通过
    Grafana 后端代理到数据源。尽管这样可以集中管理数据源凭证，并关闭除了受信任的客户端之外的所有直接网络访问，但它会增加 Grafana 实例的负载，因为需要处理更多的流量。不代理请求意味着客户端浏览器每次请求都会直接访问数据源。此配置要求访问
    Grafana 的用户也能直接访问使用的数据源，并且该数据源的安全设置允许来自不同来源的请求。在我们所有的示例中，Grafana 都会设置为代理查询。
- en: 'The following screenshot shows the configuration that''s being used in our
    test environment:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了我们在测试环境中使用的配置：
- en: '![](img/9fe103bc-7af6-41bb-9348-d8f80c95863b.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9fe103bc-7af6-41bb-9348-d8f80c95863b.png)'
- en: 'Figure 10.4: Data Sources configuration interface'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.4：数据源配置界面
- en: Note that the **Access** option is set as **Server (Default)**. This means that
    all the requests for the data source will be proxied through the Grafana instance.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，**访问**选项设置为**服务器（默认）**。这意味着所有的数据源请求将通过Grafana实例进行代理。
- en: Explore
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索
- en: This feature was introduced in Grafana 6 and its developers continue to improve
    its tight integration with Prometheus. Before Explore, every single time you wanted
    to perform an exploratory query, you were required to jump to the Prometheus expression
    browser.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能是在 Grafana 6 中引入的，开发人员持续改进其与 Prometheus 的紧密集成。在探索模式之前，每次你想执行探索查询时，都需要跳转到
    Prometheus 表达式浏览器。
- en: 'Besides this convenience, there are also some noteworthy features that make
    Explore unique, as shown in the following list:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这个便利性外，还有一些值得注意的功能，使得探索模式独具特色，如下所示：
- en: '**Metrics list**: In the top-left corner, we can find a combo box called **Metrics**.
    This lists metrics in a hierarchical form, grouped by their prefix, and even detects
    and groups recording rules when they follow the double-colon naming convention.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指标列表**：在左上角，我们可以找到一个名为**指标**的组合框。它以层次结构的形式列出了指标，按前缀分组，并且在符合双冒号命名规范时，能够自动检测和分组记录规则。'
- en: '**Query field**: Besides suggesting and autocompleting metrics, the query field
    also displays useful tooltips about PromQL functions and can even expand recording
    rules that are detected in their originating expression.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查询字段**：除了建议和自动完成指标外，查询字段还会显示有关 PromQL 函数的有用工具提示，甚至可以展开在原始表达式中检测到的记录规则。'
- en: '**Context menus**: You can choose to open the query from any dashboard panel
    directly in the Explore page.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上下文菜单**：你可以选择直接在探索页面中打开来自任何仪表板面板的查询。'
- en: 'The following screenshot illustrates the **Explore** interface while also displaying
    a tooltip for the PromQL function that is being used:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了**探索**界面，同时显示了正在使用的 PromQL 函数的工具提示：
- en: '![](img/65766f06-7707-4443-b677-3a5c4f130d0b.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/65766f06-7707-4443-b677-3a5c4f130d0b.png)'
- en: 'Figure 10.5: Grafana Explore page depicting the tooltip for the label_replace
    function'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.5：Grafana 探索页面，显示 `label_replace` 函数的工具提示
- en: Explore can normally be found by clicking the small compass icon on the left.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通常可以通过点击左侧的小指南针图标找到探索模式。
- en: Dashboards
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仪表盘
- en: 'Similar to managing data sources, there are several ways that you can add dashboards,
    listed as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于管理数据源，添加仪表板有几种方法，列举如下：
- en: By manually building your own
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过手动构建你自己的
- en: By importing [grafana.com](https://grafana.com/) community-driven dashboards
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过导入 [grafana.com](https://grafana.com/) 社区驱动的仪表板
- en: By automatically provisioning previously stored dashboards
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过自动配置之前存储的仪表板
- en: We'll be tackling the last way right now since the test environment is using
    this approach. We will focus on the other two methods in the following sections.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将处理最后一种方法，因为测试环境正在使用这种方法。我们将在后续章节中关注另外两种方法。
- en: 'A dashboard file is a declarative representation of a dashboard, with all the
    required settings specified, and uses the JSON format. If you place it in the
    expected provisioning path, the Grafana service will pick it up at the start.
    In our example, we used the default path, as we can see in the following snippet:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板文件是仪表板的声明性表示，包含所有必要的设置，并使用 JSON 格式。如果你将其放置在预期的配置路径中，Grafana 服务将在启动时加载它。在我们的示例中，我们使用了默认路径，正如以下代码片段所示：
- en: '[PRE6]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can find this dashboard by going into the **Home** menu on the top left
    of the page and then selecting `node_exporter_basics`. This translates visually
    into the following screenshot:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过进入页面左上角的 **首页** 菜单并选择 `node_exporter_basics` 来找到这个仪表板。它在视觉上对应于以下屏幕截图：
- en: '![](img/9298eb33-8b04-4ca3-b1a2-8f81dd501573.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9298eb33-8b04-4ca3-b1a2-8f81dd501573.png)'
- en: 'Figure 10.6: Example dashboard that''s been automatically provisioned'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.6：已自动配置的示例仪表板
- en: Grafana running on Kubernetes
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Kubernetes 上运行的 Grafana
- en: 'Deploying Grafana on Kubernetes involves mostly the same method as deploying
    it in VMs, so we''re just going to focus on some of the finer points that an operator
    should be aware of. The Kubernetes manifests for getting Grafana and Prometheus
    up and running in our Kubernetes test environment can be found, relative to the
    code repository root path, at the following path:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 上部署 Grafana 基本上与在虚拟机上部署的方式相同，因此我们只关注一些操作员应当注意的细节。用于在我们的 Kubernetes
    测试环境中启动 Grafana 和 Prometheus 的 Kubernetes 清单可以在代码库根路径的以下位置找到：
- en: '[PRE7]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Since the Kubernetes deployment procedure is the same as in previous chapters
    (bootstrapping the Prometheus Operator, deploying Prometheus using the Operator,
    and deploying exporters and their respective ServiceMonitors), this won't be covered
    in length again here. If you need additional context, feel free to have a look
    at the test environment walkthroughs in the previous chapters, such as [Chapter
    7](205ddb34-6ee8-4e22-b80f-39d5b2198c29.xhtml), *Prometheus Query Language – PromQL*.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Kubernetes 部署过程与前几章相同（引导 Prometheus Operator，使用 Operator 部署 Prometheus，并部署导出器及其相应的
    ServiceMonitor），此处将不再详细介绍。如果需要更多上下文，请随时查看前几章中的测试环境操作说明，例如 [第 7 章](205ddb34-6ee8-4e22-b80f-39d5b2198c29.xhtml)，*Prometheus
    查询语言 - PromQL*。
- en: The following steps will ensure the creation of a new Kubernetes environment
    with all the required software provisioned so that we can focus on the Grafana
    component.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将确保创建一个新的 Kubernetes 环境，并预配置所有必要的软件，从而使我们能够专注于 Grafana 组件。
- en: 'Validate that no other environment is running:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证没有其他环境正在运行：
- en: '[PRE8]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Start an empty Kubernetes environment, by using the following command:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令启动一个空的 Kubernetes 环境：
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add the Prometheus Operator components and follow its deployment, as follows:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 Prometheus Operator 组件并按如下方式进行部署：
- en: '[PRE10]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the new Prometheus cluster, ensuring that it''s successful, by using the
    following command:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令添加新的 Prometheus 集群，并确保其成功：
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add all the targets to Prometheus and list them using the following command:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有目标添加到 Prometheus，并使用以下命令列出它们：
- en: '[PRE12]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now that the Kubernetes environment is running, we can proceed with Grafana-specific
    configurations. Similar to the VM-focused test environment, we'll require the
    provisioning of not only Grafana itself, but also the data source and dashboards.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 Kubernetes 环境已经运行，我们可以继续进行 Grafana 特定的配置。类似于专注于虚拟机的测试环境，我们不仅需要配置 Grafana
    本身，还需要配置数据源和仪表板。
- en: For the data source, since we might want to add sensitive information such as
    authentication in the future, we are going to use a Kubernetes secret. This also
    implies that there should be a ServiceAccount for accessing that secret.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数据源，由于我们可能将来需要添加敏感信息（如身份验证），我们将使用 Kubernetes 秘密。这也意味着应该有一个 ServiceAccount
    用于访问该秘密。
- en: 'We can create the ServiceAccount by applying the following manifest:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过应用以下清单来创建 ServiceAccount：
- en: '[PRE13]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Since we''re using a secret, the data source configuration needs to be encoded
    into base64\. As for the provisioning configuration itself, it is the same as
    in the VM deployment, but we will be substituting the Prometheus URL with the
    Kubernetes equivalent that is managed by the service. Here''s a snippet before
    encoding:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用的是秘密，因此数据源配置需要进行 base64 编码。至于配置本身，与虚拟机部署中的配置相同，但我们将使用由服务管理的 Kubernetes
    等效 URL 来替换 Prometheus URL。以下是编码前的片段：
- en: '[PRE14]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'After applying the following manifest, a new secret with the desired Grafana
    data source will be available:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 应用以下清单后，将会有一个新的秘密，包含所需的 Grafana 数据源：
- en: '[PRE15]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now, it''s time to add our example dashboard to Grafana. To achieve this, we
    need to provide Grafana with a provisioning configuration that tells it where
    to look for dashboard definitions and then put our example dashboard definition
    in that path. These are going to be available to the Grafana deployment as ConfigMaps.
    The relevant snippet that shows the dashboard location provisioning configuration
    is as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候将我们的示例仪表板添加到 Grafana 中了。为此，我们需要向 Grafana 提供一个配置文件，告诉它在哪里查找仪表板定义，然后将我们的示例仪表板定义放到该路径中。这些将作为
    ConfigMap 可用于 Grafana 部署。显示仪表板位置配置的相关片段如下：
- en: '[PRE16]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The other `ConfigMap` contains our example dashboard, shown as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个`ConfigMap`包含我们的示例仪表板，具体如下所示：
- en: '[PRE17]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Both manifests can be deployed in the Kubernetes test environment using the
    following commands:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 两个清单可以使用以下命令在 Kubernetes 测试环境中部署：
- en: '[PRE18]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'It''s now time to deploy Grafana and take advantage of all the preceding configurations,
    as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是部署 Grafana 并利用之前所有配置的时候，具体操作如下：
- en: '[PRE19]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This deployment brings everything together: it mounts the data source''s secret,
    and the dashboard provision and dashboards ConfigMaps at the same locations as
    the VM test environment, as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这个部署将所有内容整合在一起：它挂载了数据源的秘密，并且将仪表板配置和仪表板 ConfigMap 放置在与虚拟机测试环境相同的位置，如下所示：
- en: '[PRE20]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You may follow the deployment status using the following instruction:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下指令跟踪部署状态：
- en: '[PRE21]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, we can add a service so that we can access the newly launched Grafana
    instance, and a ServiceMonitor so that the Prometheus Operator configures Prometheus
    to collect metrics:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以添加一个服务，以便访问新启动的 Grafana 实例，并添加一个 ServiceMonitor，使 Prometheus Operator
    配置 Prometheus 来收集指标：
- en: '[PRE22]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'You can now access the Grafana interface using the following command:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以使用以下命令访问 Grafana 界面：
- en: '[PRE23]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'When you''re finished testing, you can delete this Kubernetes-based test environment
    by issuing the following command:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 测试完成后，您可以通过执行以下命令删除这个基于 Kubernetes 的测试环境：
- en: '[PRE24]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This setup gives you a quick overview of how to integrate Grafana with Prometheus
    on Kubernetes. It's not awfully different from the VM test environment, but the
    details that were shown here will hopefully prevent you from having to search
    for information on how to accomplish it elsewhere.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这个设置为您提供了一个关于如何在 Kubernetes 上集成 Grafana 和 Prometheus 的快速概览。它与虚拟机测试环境没有太大区别，但这里展示的细节希望能避免您需要到处搜索如何实现的资料。
- en: Building your own dashboards
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您自己的仪表板
- en: Inside the provided VM test environment, you had the opportunity to try out
    the bundled dashboard. Now, it is time that you learned how to build your own,
    but for that, you will need to grasp some concepts. In this section, we'll walk
    you through the process of creating a dashboard.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在提供的虚拟机测试环境中，您有机会尝试捆绑的仪表板。现在，您应该学习如何创建自己的仪表板，为此，您需要掌握一些概念。在本节中，我们将引导您完成创建仪表板的过程。
- en: Dashboard fundamentals
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仪表板基础
- en: A dashboard is composed of several components. We'll go over the most important
    concepts in the following sections, including panels, the visualizations they
    support, how to template variables, and changing the time range of the displayed
    data.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板由多个组件组成。我们将在接下来的章节中介绍最重要的概念，包括面板、它们支持的可视化、如何模板化变量，以及如何更改显示数据的时间范围。
- en: Panels
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面板
- en: 'A panel is a rectangular-shaped slot in the visualization area of a dashboard.
    An example is shown in the following screenshot. It can be rearranged and resized
    as necessary by dragging and dropping its various dimensions. You can also put
    a set of panels inside a row, which is nothing more than a logical grouping of
    those panels. Rows can be expanded or collapsed to show or hide the panels within
    them:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 面板是仪表板可视化区域中的一个矩形插槽。以下截图展示了一个示例。它可以通过拖放调整其各个维度的大小和位置。你还可以将多个面板放置在一个行中，行只是这些面板的逻辑分组。行可以展开或折叠，以显示或隐藏其中的面板：
- en: '![](img/23f6ead4-8460-45e9-87e2-69a122551cbc.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23f6ead4-8460-45e9-87e2-69a122551cbc.png)'
- en: 'Figure 10.7: New panel'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.7：新面板
- en: 'A panel, besides having the ability to query the chosen data source, also provides
    multiple visualization options to choose from. These visualization options allow
    you to present data in a variety of ways, such as simple single-value panels,
    bar graphs, line graphs, tables, all the way to heatmaps. The following screenshot
    illustrates the available built-in visualizations:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 一个面板，除了能够查询选定的数据源外，还提供多种可视化选项供选择。这些可视化选项可以以多种方式展示数据，如简单的单值面板、条形图、折线图、表格，甚至热力图。下图展示了可用的内置可视化选项：
- en: '![](img/6f3d192a-23d5-4703-b697-111c60593a5c.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6f3d192a-23d5-4703-b697-111c60593a5c.png)'
- en: 'Figure 10.8: Built-in visualization options'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.8：内置可视化选项
- en: 'In the preceding screenshot, we can see several panel types. Four of the most
    used ones are as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们可以看到几种面板类型。以下是四种最常用的面板类型：
- en: '**Graph**: This the main Grafana panel. It provides the tools to create rich
    two-dimensional graphs backed by one or more PromQL expressions.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Graph**：这是 Grafana 的主面板。它提供了创建富有表现力的二维图形的工具，这些图形由一个或多个 PromQL 表达式支持。'
- en: '**Singlestat**: This is a multipurpose single-value display. As such, the PromQL
    query must return an instant vector with one sample only.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Singlestat**：这是一个多用途的单值显示器。因此，PromQL 查询必须返回一个只有一个样本的瞬时向量。'
- en: '**Gauge**: Using thresholds, this represents the position the current value
    is at in relation to the defined higher and lower bounds. Like the Singlestat
    visualization, this option requires a single instant vector with only one sample.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Gauge**：使用阈值，这个选项表示当前值相对于定义的上下限位置。像 Singlestat 可视化一样，这个选项需要一个只有一个样本的单一瞬时向量。'
- en: '**Table**: This displays the result of a PromQL expression in a table format,
    with each label in its own column, along with the value and the timestamp.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Table**：这是以表格格式显示 PromQL 表达式结果的面板，每个标签都在自己的列中，并显示相应的值和时间戳。'
- en: For each one of the available visualizations, there are numerous options that
    allow for the extraordinary level of customization of each panel's appearance.
    The official Grafana documentation explains every option in detail, so we will
    focus on the most relevant ones here.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每种可用的可视化选项，都有大量的设置选项，允许对每个面板的外观进行极为详细的自定义。官方的 Grafana 文档详细解释了每个选项，因此我们在这里将重点介绍最相关的选项。
- en: Variables
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量
- en: The variables feature is extremely powerful. It allows a dashboard to configure
    placeholders that can be used in expressions, and those placeholders can be filled
    with values from either a static or dynamic list, which are usually presented
    to the dashboard user in the form of a drop-down menu. Whenever the selected value
    changes, Grafana will automatically update the queries in panels that use that
    particular variable. In our example dashboard, we're using this feature to allow
    the user to choose which node instance to present. Besides being commonly used
    in queries, they're also available, for example, in panel titles.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 变量功能非常强大。它允许仪表板配置占位符，可以在表达式中使用，这些占位符可以通过静态或动态列表填充，通常以下拉菜单的形式呈现给仪表板用户。每当选定的值发生变化时，Grafana
    将自动更新使用该特定变量的面板中的查询。在我们的示例仪表板中，我们使用此功能让用户选择要展示的节点实例。除了常用于查询之外，它们也可用于面板标题等其他地方。
- en: 'This feature is available in the **Dashboard settings**, which can be found
    by clicking the top-right cog icon, which in turn is available inside any dashboard.
    The following screenshot depicts the **Variables** option from the **node_exporter_basics**
    dashboard in the **Settings** menu:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能可以在 **仪表板设置** 中找到，通过点击右上角的齿轮图标进入，这个图标在任何仪表板内都可以找到。下图展示了 **设置** 菜单中的 **node_exporter_basics**
    仪表板的 **Variables** 选项：
- en: '![](img/e221b523-da4c-4a4a-b509-d62a7e5ee47f.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e221b523-da4c-4a4a-b509-d62a7e5ee47f.png)'
- en: 'Figure 10.9: Dashboard variables'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.9：仪表板变量
- en: As you can see, we're using a PromQL query to dynamically fetch the possible
    values for the `$instance` variable.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们使用了一个PromQL查询来动态获取`$instance`变量的可能值。
- en: When the viewport is not large enough, the responsive design of Grafana will
    hide some of the top-right icons.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 当视口不够大时，Grafana的响应式设计会隐藏一些右上角的图标。
- en: Time picker
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间选择器
- en: 'The time picker feature is available in any dashboard in the top-right corner
    as a button containing the clock icon. The interface is split into two major blocks:
    **Quick ranges** of predefined time ranges (most of them relative to the current
    time) or a **Custom range**, which allows you to specify the exact time span to
    use in all the dashboard panels. As the name suggests, the **Refreshing every:**
    option will make the dashboard panels automatically reload at the interval specified.
    This is useful to see new data coming in when used in conjunction with a relative
    time range.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 时间选择器功能在任何仪表板的右上角都有一个包含时钟图标的按钮。界面分为两个主要区域：**快速范围**，即预定义的时间范围（大多数是相对于当前时间的），或**自定义范围**，允许你指定用于所有仪表板面板的确切时间跨度。顾名思义，**每隔：**选项将使仪表板面板在指定的时间间隔内自动重新加载。将其与相对时间范围结合使用时，这对于查看新数据非常有用。
- en: 'The following screenshot shows a series of quick ranges:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了一系列的快速范围：
- en: '![](img/f60cdc9e-774a-4727-a1b8-1c51489f05c6.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f60cdc9e-774a-4727-a1b8-1c51489f05c6.png)'
- en: 'Figure 10.10: Time picker'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.10：时间选择器
- en: Creating a basic dashboard
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个基本的仪表板
- en: We are going to get hands-on with Grafana by guiding you through the creation
    process of a bare-bones dashboard. You can start by clicking the left plus sign
    logo | **Dashboard**. This will open a new empty dashboard with a new panel, ready
    to be edited. Since we want a dynamic dashboard, we're going to create a new variable,
    which will expand into a list of the available Node Exporter instances in our
    Prometheus server.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过引导你完成创建一个基础仪表板的过程来亲自体验Grafana。你可以通过点击左侧的加号图标 | **仪表板**来开始。这将打开一个新的空白仪表板，并且已经有一个新面板，准备进行编辑。因为我们想要一个动态仪表板，所以我们将创建一个新的变量，这个变量将扩展为我们Prometheus服务器中可用的Node
    Exporter实例的列表。
- en: Using the *Shift* + *?* key combination will display a helpful tooltip of all
    the available shortcuts.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*Shift* + *?*的快捷键组合将显示所有可用快捷键的帮助提示。
- en: 'To achieve our goal, we must click the top-right cog icon, open the **Dashboard
    settings**, then select **Variables**. The following screenshot illustrates the
    options that are available when creating such a variable:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现我们的目标，我们必须点击右上角的齿轮图标，打开**仪表板设置**，然后选择**变量**。下图展示了在创建此类变量时可用的选项：
- en: '![](img/96af6a7f-afad-4096-bc80-aaeae5c57b66.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/96af6a7f-afad-4096-bc80-aaeae5c57b66.png)'
- en: 'Figure 10.11: Variables interface'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.11：变量界面
- en: The preview values depicted in the preceding screenshot show the Node Exporter
    targets from the VM-based test environment. You will get a different preview if
    you are following along using the Kubernetes test environment.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图中显示的预览值展示了基于虚拟机的测试环境中的Node Exporter目标。如果你跟随使用Kubernetes测试环境，你将看到不同的预览。
- en: In this example, we're creating a variable named `instance` using the **Query**
    type, which means it will populate its values from the results of the query to
    the data source. We're specifying the data source as `prometheus`, the identifier
    we gave during provisioning, and that we want to refresh that variable only when
    the dashboards get loaded.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们正在创建一个名为`instance`的变量，使用**查询**类型，这意味着它将从查询数据源的结果中填充其值。我们将数据源指定为`prometheus`，即在配置时给定的标识符，并且我们希望只有在仪表板加载时才刷新该变量。
- en: 'Now comes the interesting part: since we are interested in collecting Node
    Exporter instances, we use a metric in the **Query** field that is guaranteed
    to return the instances we require, `node_exporter_build_info`. The `label_values()`
    function isn''t actually valid PromQL, but is provided by the Prometheus data
    source plugin in Grafana to use in this field to facilitate these kind of expressions.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在进入有趣的部分：因为我们有兴趣收集Node Exporter实例，我们在**查询**字段中使用了一个指标，确保能够返回我们所需要的实例，`node_exporter_build_info`。`label_values()`函数实际上不是有效的PromQL语法，但它是Grafana中的Prometheus数据源插件提供的，用于在该字段中使用，以便支持这种表达式。
- en: 'The **Regex** field is used to match the parts of the query result we want
    to use to populate the variable. In our example, we want the full content of the
    instance label, so we match everything inside a regular expression capture group,
    `(.+)`. We can see that the matching is working in the **Preview of values** section
    at the bottom of the screen. After clicking **Add** and saving this dashboard
    using the name `example`, we can now see the following dropdown menu with the
    values of the `instance` variable:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**Regex** 字段用于匹配我们想要用于填充变量的查询结果部分。在我们的示例中，我们希望获取实例标签的完整内容，因此我们在正则表达式捕获组 `(.+)`
    中匹配所有内容。我们可以在屏幕底部的 **值预览** 部分看到匹配是否生效。点击 **添加** 并保存此仪表板为 `example` 后，我们现在可以看到包含
    `instance` 变量值的下拉菜单：'
- en: '![](img/658cc9e1-5956-4698-ae88-29eec1a9a9c1.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/658cc9e1-5956-4698-ae88-29eec1a9a9c1.png)'
- en: 'Figure 10.11: Instance values'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.11：实例值
- en: 'It''s time to create our first panel. Click on the top-right graph logo, and
    in the new panel, click **Add Query**. The following screenshot illustrates the
    query interface:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是创建我们第一个面板的时候了。点击右上角的图表图标，在新面板中点击 **添加查询**。以下截图展示了查询接口：
- en: '![](img/d846f364-4fa0-41dd-a32b-63ffbb2e2518.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d846f364-4fa0-41dd-a32b-63ffbb2e2518.png)'
- en: 'Figure 10.12: Query interface'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.12：查询接口
- en: 'Here, we can specify the PromQL queries (one or more, depending on the visualization
    type) to perform on the desired data source. In our example, we''ll be creating
    a graph of CPU usage per mode, and we want to template the query so that it uses
    the `instance` variable we created earlier. Note the `$instance`, which will be
    replaced at query time with the selected value in the `instance` combo box. The
    full expression is as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以指定要在所需数据源上执行的 PromQL 查询（一个或多个，取决于可视化类型）。在我们的示例中，我们将创建一个按模式划分的 CPU 使用率图，并希望将查询模板化，使其使用我们之前创建的
    `instance` 变量。请注意 `$instance`，在查询时它将被替换为 `instance` 下拉框中选择的值。完整表达式如下：
- en: '[PRE25]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The `label_replace()` function allows us to remove the port from the instance
    value, which we''ll use in the **Legend** field. This field allows the substitution
    of `{{ }}` template markers with the values of the metric labels set within it.
    This will, in turn, reflect on the graph legend preceding the **Query** menu.
    In the following screenshot, we can see several visual options that have been
    applied to our dashboard, and we''ll go over each one:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`label_replace()` 函数允许我们从实例值中移除端口，这将在 **图例** 字段中使用。此字段允许用其中设置的指标标签的值替换 `{{
    }}` 模板标记。这样，在图表图例中将反映出在 **查询** 菜单之前的内容。以下截图中，我们可以看到应用于仪表板的多个视觉选项，我们将逐一介绍：'
- en: '![](img/6f5e33df-ee34-442e-bedb-cd1f0689f455.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6f5e33df-ee34-442e-bedb-cd1f0689f455.png)'
- en: 'Figure 10.13: Visualization interface'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.13：可视化接口
- en: In the **Axes** section, we select which of the graph axes to enable; the **Right
    Y** configuration options do not produce any change, as that axis is not used.
    In the **Left Y** configuration, we can specify the **Unit**. In our case, we
    want a percentage; we could simply multiply our expression by 100, but not doing
    so exposes one of the handy features Grafana has to offer. As we already know,
    our value range is from 0 to 1; this **Unit** type will take the values in the
    0-1 range and automatically transform them into percentages (from 0 to 100). We're
    also ensuring that **Y-min** is set to , so that the graph becomes easier to understand
    visually, as without it the graph would have the *y* axis scale adapted to start
    near the lowest *Y* value in the query result. Additionally, for the sake of this
    example, we want three decimal places in the values of the *y* scale, and so we
    set that using the **Decimals** field. On the **X-Axis**, we didn't change anything,
    as we want the time.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **轴** 部分，我们选择启用哪个图表轴；**右侧 Y** 配置选项没有产生任何变化，因为该轴未被使用。在 **左侧 Y** 配置中，我们可以指定
    **单位**。在我们的例子中，我们想要百分比；我们本可以简单地将表达式乘以 100，但不这么做却展示了 Grafana 的一个实用功能。如我们所知，值的范围是从
    0 到 1；这种 **单位** 类型将会把 0-1 范围内的值自动转换为百分比（从 0 到 100）。我们还确保 **Y-最小值** 设置为 0，这样图表在视觉上更容易理解，因为如果没有此设置，图表的
    *y* 轴会根据查询结果中的最小 *Y* 值进行适应。此外，为了便于本示例，我们希望 *y* 轴刻度显示三位小数，因此我们通过 **小数位数** 字段设置了这一点。在
    **X 轴** 中，我们没有做任何更改，因为我们希望显示时间。
- en: In the **Legend** section, we control how we want the graph legend to look and
    where it's placed inside the panel. In our case, we want it as a table, placed
    on the right-hand side of the graph, and we want it to present the average and
    current value of *Y*.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在**图例**部分，我们控制图例的显示方式以及它在面板中的位置。在我们的案例中，我们希望它作为一个表格，放置在图表的右侧，并且我们希望它显示*Y*的平均值和当前值。
- en: 'To finish our panel, we need to step into the **General** menu, as shown in
    the following screenshot, where we can name our panel and add a description. The
    description will be available as a small **i** icon in the top-left corner of
    the panel:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成我们的面板，我们需要进入**常规**菜单，如下图所示，在这里我们可以命名面板并添加描述。描述将在面板的左上角以小**i**图标形式显示：
- en: '![](img/3cad9e01-6146-46f0-845a-4570d0e31f8a.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3cad9e01-6146-46f0-845a-4570d0e31f8a.png)'
- en: 'Figure 10.14: The general menu of the panel'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.14：面板的常规菜单
- en: To save your new dashboard, just click the small floppy disk icon in the top-right
    corner. You have now created a simple dashboard from scratch! You can continue
    adding panels and visualizations, but the main concepts are pretty much the same.
    You can explore the provided dashboard in the test environment for more examples
    on how to use different visualizations options.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 要保存你的新仪表板，只需点击右上角的小软盘图标。现在，你已经从头创建了一个简单的仪表板！你可以继续添加面板和可视化内容，但主要概念基本相同。你可以在测试环境中探索提供的仪表板，查看更多如何使用不同可视化选项的例子。
- en: 'Something to keep in mind when creating a dashboard is to avoid unnecessary
    clutter. It is usual to see dashboards with dozens of panels, with a multitude
    of data on display. Try to have the right amount of information so that, for example,
    troubleshooting issues is quick and painless. Focus is the key word here: if there
    are panels that are not related to each other inside a dashboard, perhaps it would
    be a good idea to split them into their own dashboard.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 创建仪表板时需要记住的一点是避免不必要的杂乱。通常可以看到仪表板上有几十个面板，显示着大量的数据。尽量保持信息的适量，这样例如故障排除时可以快速且无痛。焦点是这里的关键：如果仪表板内有不相关的面板，可能将它们分成单独的仪表板会是一个好主意。
- en: Exporting dashboards
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导出仪表板
- en: Grafana makes it easy to export dashboards. To proceed, just open the dashboard
    you intend to export and press the small **square with arrow** icon in the top-right
    panel, near the floppy disk icon.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: Grafana 使得导出仪表板变得简单。要进行导出，只需打开你想导出的仪表板，点击右上角面板中的小**带箭头的方框**图标，靠近软盘图标。
- en: 'The following form will open:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 将会打开以下表单：
- en: '![](img/2b8e6f0d-846b-4dc5-8b5a-865903bf2d97.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b8e6f0d-846b-4dc5-8b5a-865903bf2d97.png)'
- en: 'Figure 10.15: Grafana dashboard export'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.15：Grafana 仪表板导出
- en: 'Here, you''re presented with several options:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你会看到几个选项：
- en: '**Export for sharing externally**: Enables the templating of the data source
    names, which is helpful for sharing the dashboard publicly. This is mandatory
    in order to publish the dashboard on the [grafana.com](https://grafana.com/) website.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外部共享导出**：启用数据源名称的模板化，这对公开共享仪表板非常有帮助。为了在[grafana.com](https://grafana.com/)网站上发布仪表板，这是强制要求的。'
- en: '**View JSON**: Allows you to visualize the code of the dashboard.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查看 JSON**：允许你查看仪表板的代码。'
- en: '**Save to file**: Downloads the dashboard as a JSON file.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保存到文件**：将仪表板保存为 JSON 文件。'
- en: Next, we're going to see how we can download dashboards from the Grafana dashboard
    gallery, and how to contribute our own to it.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看看如何从 Grafana 仪表板画廊下载仪表板，以及如何将自己的仪表板贡献到其中。
- en: Discovering ready-made dashboards
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发现现成的仪表板
- en: Since Grafana is widely used and has a huge community behind it, it's logical
    that a huge number of dashboards are being created by that community. The folks
    at Grafana provide a service where registered users are able to publish their
    dashboards onto a gallery, and anyone can download and install them on their own
    Grafana instances. In the following sections, we'll be providing an overview of
    both actions, not only using community-made dashboards, but also how to publish
    your own.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Grafana 被广泛使用，并且拥有庞大的社区支持，显然有大量仪表板是由该社区创建的。Grafana 的开发团队提供了一项服务，注册用户可以将他们的仪表板发布到画廊中，任何人都可以下载并在自己的
    Grafana 实例中安装它们。在接下来的部分，我们将概述这两项操作，不仅包括如何使用社区制作的仪表板，还包括如何发布自己的仪表板。
- en: Grafana dashboards gallery
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Grafana 仪表板画廊
- en: 'Both community-driven and official dashboards are available at [https://grafana.com/dashboards](https://grafana.com/dashboards)
    and, as expected, there are a lot to choose from. Since we''re interested in Prometheus-specific
    dashboards when searching the site, we should restrict the search results to that
    data source. By applying additional filters, we keep restricting results to exactly
    what we''re after, as you can see in the following screenshot:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 社区驱动和官方的仪表盘可以在 [https://grafana.com/dashboards](https://grafana.com/dashboards)
    上找到，正如预期的那样，有很多选择。由于我们对 Prometheus 特定的仪表盘感兴趣，因此在搜索站点时，应该将搜索结果限制为该数据源。通过应用额外的筛选器，我们继续缩小结果范围，正如你在以下截图中看到的那样：
- en: '![](img/8813a1bf-1e75-45bc-a419-c33c7ab23bf7.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8813a1bf-1e75-45bc-a419-c33c7ab23bf7.png)'
- en: '10.16: Grafana.com filtered dashboards result'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 10.16：Grafana.com 过滤后的仪表盘结果
- en: 'We can then select the dashboard we''re interested in, which will in turn open
    a screen, as shown in the following screenshot:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以选择感兴趣的仪表盘，接着会打开一个屏幕，如下图所示：
- en: '![](img/45d1f4b5-42ff-4330-b110-7f9125e9a2a6.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/45d1f4b5-42ff-4330-b110-7f9125e9a2a6.png)'
- en: 'Figure 10.17: Grafana.com selected dashboard information'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.17：Grafana.com 选定的仪表盘信息
- en: 'Here, we can see some information regarding the dashboard and a screenshot
    of it. Notice the ID **9916** on the right; it''s a unique identifier in the Grafana
    gallery for this particular dashboard. We can use it by going into a Grafana instance,
    such as the one in our test environment, clicking on the plus sign in the main
    menu on the left-hand side, selecting **Import** from the submenu, and pasting
    it in the appropriate text field, as shown in the following screenshot:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到一些关于仪表盘的信息和它的截图。请注意右侧的 ID **9916**；它是 Grafana 库中该特定仪表盘的唯一标识符。我们可以通过进入
    Grafana 实例（如我们测试环境中的实例），点击左侧主菜单中的加号，选择子菜单中的**导入**，并将其粘贴到相应的文本框中，如下图所示：
- en: '![](img/2b84e849-cf97-4e71-a120-a79f7ea7300d.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b84e849-cf97-4e71-a120-a79f7ea7300d.png)'
- en: 'Figure 10.18: Import dashboard interface'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.18：导入仪表盘界面
- en: After pasting in the ID, a new menu will pop up, asking for the name we want
    to give to this dashboard, in which folder it should be placed, and what data
    source it should use. If there are any conflicts with pre-existing dashboards
    (such as dashboards with the same name), you will be asked to resolve them before
    you will be able to finish the import process.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在粘贴 ID 后，会弹出一个新菜单，要求填写该仪表盘的名称、它应放置在哪个文件夹中以及应使用的数据源。如果与已有的仪表盘（例如同名仪表盘）发生冲突，系统会要求你先解决冲突，才能完成导入过程。
- en: Publishing your dashboards
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布你的仪表盘
- en: Publishing a newly created dashboard is quite easy. First, ensure that you have
    an account for the Grafana website by using the registration form located at [https://grafana.com/signup](https://grafana.com/signup).
    After a successful registration, go into your profile via **Personal** *|* **My
    Dashboards** or use the `https://grafana.com/orgs/<user>/dashboards` link, replacing
    `<user>` with your Grafana username.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 发布新创建的仪表盘非常简单。首先，确保你有一个 Grafana 网站的账户，可以通过 [https://grafana.com/signup](https://grafana.com/signup)
    上的注册表单进行注册。成功注册后，可以通过**个人** *|* **我的仪表盘**进入你的个人资料，或者使用 `https://grafana.com/orgs/<user>/dashboards`
    链接，替换 `<user>` 为你的 Grafana 用户名。
- en: 'Inside **My Dashboards**, you can now click the **Upload Dashboard** button.
    This action will open an upload form, requesting the dashboard to be uploaded.
    Remember, this will only accept dashboards that are exported with the **Export
    for sharing externally** option toggled on:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在**我的仪表盘**中，你现在可以点击**上传仪表盘**按钮。此操作将打开一个上传表单，要求上传仪表盘。请记住，只有导出时启用了**导出以供外部分享**选项的仪表盘才能被接受：
- en: '![](img/bc4c7fb5-c9ce-43b5-b2a9-73f8ff9a1a99.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bc4c7fb5-c9ce-43b5-b2a9-73f8ff9a1a99.png)'
- en: 'Figure 10.19: Dashboard upload form'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.19：仪表盘上传表单
- en: And you're done! You'll now obtain a numeric ID for your dashboard and you can
    start using it or sharing it across the globe. You can update the published dashboard
    if you want to, as this will not alter the generated ID. Instead, it will create
    another revision of the published dashboard, and users will always download the
    latest revision that's available.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 完成！现在你将获得一个仪表盘的数字 ID，你可以开始使用它或与全球分享。如果你愿意，还可以更新发布的仪表盘，因为这不会改变生成的 ID。相反，它会创建该仪表盘的另一个版本，用户将始终下载最新的版本。
- en: Default Prometheus visualizations
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 默认 Prometheus 可视化
- en: Historically, Prometheus maintained its own tool to create dashboards, called
    PromDash. Over time, since Grafana improved its native support for Prometheus
    as a data source, the community began gravitating toward using Grafana as its
    primary visualization solution—so much so that PromDash was deprecated by the
    people who maintained Prometheus in favor of Grafana.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 历史上，Prometheus 曾维护自己的工具来创建仪表盘，叫做 PromDash。随着时间的推移，由于 Grafana 增强了对 Prometheus
    作为数据源的原生支持，社区开始倾向于使用 Grafana 作为主要的可视化解决方案，以至于 PromDash 被维护 Prometheus 的人弃用，转而支持
    Grafana。
- en: You can find the source code for PromDash at [https://github.com/prometheus-junkyard/promdash](https://github.com/prometheus-junkyard/promdash).
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://github.com/prometheus-junkyard/promdash](https://github.com/prometheus-junkyard/promdash)
    找到 PromDash 的源代码。
- en: Even though Grafana is the recommended visualization solution for most people,
    Prometheus also ships with an internal dashboarding feature called **console templates**.
    These console templates are written in raw HTML/CSS/JavaScript and leverage the
    power of the Go templating language to generate dashboards (called consoles) that
    are served by the Prometheus server itself. This makes them blazingly fast and
    endlessly customizable. Console templates are as powerful as they are complex.
    We are going to introduce this feature by giving you a small overview of how to
    use and build console templates in the next section.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Grafana 是大多数人推荐的可视化解决方案，Prometheus 也附带了一个名为**控制台模板**的内部仪表盘功能。这些控制台模板是用原始
    HTML/CSS/JavaScript 编写的，并利用 Go 模板语言的强大功能生成由 Prometheus 服务器本身提供的仪表盘（称为控制台）。这使得它们既极其快速，又具有无限的可定制性。控制台模板既强大又复杂。我们将在下一节中通过简要概述如何使用和构建控制台模板来介绍这一功能。
- en: Out-of-the-box console templates
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开箱即用的控制台模板
- en: 'When you unpack the Prometheus release archive, besides the binaries for the
    server and promtool, there are also a few console templates readily available.
    To make this clear, we can look inside our test environment where we unpacked
    these templates into system paths, shown as follows:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 当你解压 Prometheus 发布包时，除了服务器和 promtool 的二进制文件外，还可以找到一些现成的控制台模板。为了更清楚地说明，我们可以查看在测试环境中解压这些模板到系统路径中的内容，如下所示：
- en: '[PRE26]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Both directories need to be properly configured for consoles to work. Console
    libraries define helper functions that are then used in console templates so that
    repetition is kept to a minimum. We are going to have a closer look at these libraries
    in the next section when we build our own template.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个目录需要正确配置才能使控制台正常工作。控制台库定义了辅助函数，这些函数随后在控制台模板中使用，以减少重复。我们将在下一节中仔细查看这些库，当我们构建自己的模板时。
- en: 'For now, here are the console templates that ship with Prometheus:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，以下是随 Prometheus 一起提供的控制台模板：
- en: '[PRE27]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: As you can see in `index.html.example`, these templates expect the scrape jobs
    for Prometheus and Node Exporter to be named `prometheus` and `node` respectively,
    so they might not work for your Prometheus configuration out of the box.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 正如在 `index.html.example` 中所看到的，这些模板期望 Prometheus 和 Node Exporter 的抓取作业分别命名为
    `prometheus` 和 `node`，因此它们可能无法直接在你的 Prometheus 配置中使用。
- en: 'We can access it by using the web interface URL at `http://192.168.42.10:9090/consoles/index.html.example`
    and exploring the available consoles. The following screenshot depicts the console
    for the node CPU of the Prometheus instance:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用 `http://192.168.42.10:9090/consoles/index.html.example` 的 Web 界面 URL
    访问它，并探索可用的控制台。以下截图展示了 Prometheus 实例的节点 CPU 控制台：
- en: '![](img/ec4dbe95-b7b0-4822-8279-bae5419519d6.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ec4dbe95-b7b0-4822-8279-bae5419519d6.png)'
- en: 'Figure 10.20: Node CPU for Prometheus'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.20：Prometheus 的节点 CPU
- en: Console template basics
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制台模板基础
- en: Creating console templates from scratch has a steep learning curve. Unlike in
    Grafana, console templates are crafted directly in HTML and JavaScript, with a
    fair dose of Go templating in the mix. This means that consoles can technically
    take any form, but for simplicity, we will stick to the structure provided by
    the built-in console libraries.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 从零开始创建控制台模板有一个陡峭的学习曲线。与 Grafana 不同，控制台模板直接用 HTML 和 JavaScript 编写，并且混合了相当多的 Go
    模板语言。这意味着控制台在技术上可以采用任何形式，但为了简化，我们将坚持使用内置控制台库提供的结构。
- en: 'The libraries that power the example console templates define the scaffold
    for the consoles. They take care of things such as constructing the HTML structure,
    including the necessary CSS and JavaScript and modeling the four sections around
    the main console content: the navigation bar at the top, the menu on the left,
    the console time controls at the bottom, and a table to show summary statistics
    on the right. Let''s see how we could use them to construct a simple console template
    by looking at the following code:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 支撑示例控制台模板的库定义了控制台的框架。它们处理的内容包括构建 HTML 结构、包含必要的 CSS 和 JavaScript 以及围绕主控制台内容建模四个部分：顶部的导航栏、左侧的菜单、底部的控制台时间控制和右侧显示摘要统计的表格。让我们通过查看以下代码，看看如何利用它们来构建一个简单的控制台模板：
- en: '[PRE28]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The `head` template expands to HTML that defines the inclusion of CSS and JavaScript,
    the top navbar, and the menu; the `prom_content_head` template on the other hand,
    defines the time controls, as shown in the following code:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`head`模板展开为定义包含 CSS 和 JavaScript、顶部导航栏以及菜单的 HTML；而`prom_content_head`模板则定义了时间控制，如以下代码所示：'
- en: '[PRE29]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This section defines the console itself. The `queryGraph` element is used as
    the placeholder that the graphing JavaScript library will use to generate the
    graph. The JavaScript snippet, on the other hand, configures the graph with the
    selector that is to be used (`node`), what expression to graph (`expr`), what
    to use in the legend (`name`), and several *y-*axis configurations, as shown in
    the following code:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 本节定义了控制台本身。`queryGraph`元素用作占位符，图形 JavaScript 库将使用它来生成图表。而 JavaScript 代码片段则配置了图表所使用的选择器（`node`）、要绘制的表达式（`expr`）、图例中使用的内容（`name`）以及几个*y*轴配置，如以下代码所示：
- en: '[PRE30]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The last two templates close the sections that the first opened. They are needed
    so that the generated HTML is well formed.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 最后两个模板关闭了第一个模板所打开的部分。它们是必需的，以确保生成的 HTML 结构良好。
- en: 'The resulting console is available in the test environment for this chapter,
    and can be checked out at `http://192.168.42.10:9090/consoles/grafana.html`. Here
    is a screenshot of how it should look:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 结果控制台可以在本章的测试环境中访问，可以通过`http://192.168.42.10:9090/consoles/grafana.html`查看。以下是它应该呈现的截图：
- en: '![](img/7e993420-24b6-4226-9b65-5cad8c8e01fe.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7e993420-24b6-4226-9b65-5cad8c8e01fe.png)'
- en: 'Figure 10.21: Example console for Grafana requests per second'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.21：Grafana 每秒请求示例控制台
- en: Note that the menu on the left-hand side does not have a link to our newly created
    console template. This is because the included `menu.lib` only supports the example
    console templates that ship with Prometheus. When deploying actual custom console
    templates, you would need to replace this library with your own. This would allow
    you to add links to other internal systems in the navbar at the top and list which
    consoles should be available on the navigation menu on the left. By leveraging
    the fact that you can perform PromQL queries in templates, you should be able
    to find out which jobs are scraped by that Prometheus instance and generate links
    to similarly named consoles.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，左侧的菜单中没有链接到我们新创建的控制台模板。这是因为包含的`menu.lib`仅支持随 Prometheus 一起提供的示例控制台模板。在部署实际的自定义控制台模板时，您需要用自己的库替换此库。这将使您能够在顶部的导航栏中添加指向其他内部系统的链接，并列出哪些控制台应出现在左侧的导航菜单中。通过利用您可以在模板中执行
    PromQL 查询的事实，您应该能够找出该 Prometheus 实例抓取了哪些作业，并生成类似名称控制台的链接。
- en: Summary
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this chapter, we explored the standard visualization tool for Prometheus:
    Grafana. We''ve learned how to provision not only data sources, but dashboards
    as well. After learning about the building blocks of a dashboard, we created a
    simple dashboard from scratch, learning all that it entails step by step. We also
    learned how to take advantage of the thriving community-built dashboard gallery.
    Giving back to the community is always important, so we''ve gone through the process
    of exporting and publishing dashboards. Finally, we were introduced to the Prometheus
    default visualizations—the consoles—which, even though they have a steep learning
    curve, are extremely powerful.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 Prometheus 的标准可视化工具：Grafana。我们学习了如何配置不仅是数据源，还有仪表盘。在了解仪表盘的构建模块后，我们从零开始创建了一个简单的仪表盘，逐步学习了其中的各个环节。我们还学习了如何利用蓬勃发展的社区构建的仪表盘库。回馈社区始终很重要，因此我们经历了导出和发布仪表盘的过程。最后，我们了解了
    Prometheus 默认的可视化——控制台——尽管它们有陡峭的学习曲线，但非常强大。
- en: In the next chapter, we'll be exploring the Alertmanager, how to best take advantage
    of its functionalities, and how to integrate it with Prometheus.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨 Alertmanager，如何充分利用其功能，并与 Prometheus 集成。
- en: Questions
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How can you provision a data source automatically in Grafana?
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在 Grafana 中自动配置数据源？
- en: What are the steps to import a dashboard from the Grafana gallery?
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Grafana 图库导入仪表盘的步骤是什么？
- en: How do Grafana dashboard variables work?
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Grafana 仪表盘变量是如何工作的？
- en: What's the building block of a dashboard?
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仪表盘的构建块是什么？
- en: When you update a dashboard that's published to [grafana.com](https://grafana.com/),
    does it change its ID?
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你更新发布到 [grafana.com](https://grafana.com/) 的仪表盘时，是否会更改其 ID？
- en: In Prometheus terms, what is a console?
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Prometheus 中，控制台是什么？
- en: Why would you use Prometheus console templates?
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么要使用 Prometheus 控制台模板？
- en: Further reading
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '**Grafana Explore**: [http://docs.grafana.org/features/explore/](http://docs.grafana.org/features/explore/)'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Grafana 探索**: [http://docs.grafana.org/features/explore/](http://docs.grafana.org/features/explore/)'
- en: '**Grafana templating**: [http://docs.grafana.org/reference/templating/](http://docs.grafana.org/reference/templating/)'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Grafana 模板化**: [http://docs.grafana.org/reference/templating/](http://docs.grafana.org/reference/templating/)'
- en: '**Grafana time range**: [http://docs.grafana.org/reference/timerange/](http://docs.grafana.org/reference/timerange/)'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Grafana 时间范围**: [http://docs.grafana.org/reference/timerange/](http://docs.grafana.org/reference/timerange/)'
- en: '**Console templates official documentation**: [https://prometheus.io/docs/visualization/consoles/](https://prometheus.io/docs/visualization/consoles/)'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制台模板官方文档**: [https://prometheus.io/docs/visualization/consoles/](https://prometheus.io/docs/visualization/consoles/)'
- en: '**Console templates best practices**: [https://prometheus.io/docs/practices/consoles/](https://prometheus.io/docs/practices/consoles/)'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制台模板最佳实践**: [https://prometheus.io/docs/practices/consoles/](https://prometheus.io/docs/practices/consoles/)'
