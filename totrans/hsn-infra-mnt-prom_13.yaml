- en: Discovering and Creating Grafana Dashboards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Prometheus expression browser is great for performing exploratory queries,
    but sometimes we require prebuilt visualizations to assist us when we want to
    quickly debug issues. In this chapter, we'll dive into Grafana, the tool recommended
    by the Prometheus project for building dashboards. The Grafana community keeps
    growing and thriving, in part by hosting a multitude of ready-to-use dashboards,
    making it easy to reuse them and contribute to the community and thus improve
    the ecosystem. In this chapter, we will learn how to find and use dashboards from
    the community, as well as how to write our own and give something back to the
    community. Finally, we'll also provide a cursory look at consoles, the dashboarding
    solution built into Prometheus for advanced use cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'In brief, the following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Test environment for this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use Grafana with Prometheus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building your own dashboards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering ready-made dashboards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default Prometheus visualizations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test environment for this chapter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To provide a hands-on approach, we''ll be creating a new test environment for
    this chapter. The setup we''ll be using resembles the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/867a4731-0373-4838-8e98-26aa280b6609.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.1: Test environment network'
  prefs: []
  type: TYPE_NORMAL
- en: Deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To generate this chapter''s **virtual machine** (**VM**) based test environment,
    go to the correct repository path, relative to the code repository root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Ensure that no other test environments are running and spin up this chapter''s
    environment, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can validate the successful deployment of the test environment using the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This will give the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'When the deployment tasks end, you''ll be able to validate the following endpoints
    on your host machine using your favorite JavaScript-enabled web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Service** | **Endpoint** |'
  prefs: []
  type: TYPE_TB
- en: '| Prometheus | `http://192.168.42.10:9090` |'
  prefs: []
  type: TYPE_TB
- en: '| Grafana | `http://192.168.42.11:3000` |'
  prefs: []
  type: TYPE_TB
- en: 'You should be able to access the desired instance by using one of the following
    commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Instance** | **Command** |'
  prefs: []
  type: TYPE_TB
- en: '| Prometheus | `vagrant ssh prometheus` |'
  prefs: []
  type: TYPE_TB
- en: '| Grafana | `vagrant ssh grafana` |'
  prefs: []
  type: TYPE_TB
- en: Cleanup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you''ve finished testing, just make sure you''re inside `chapter10/` and
    execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Don't worry too much—you can easily spin up the environment again if you need
    to.
  prefs: []
  type: TYPE_NORMAL
- en: How to use Grafana with Prometheus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Grafana is the most recognized open source project for dashboarding. It has
    the concept of data sources, which are nothing more than integrations with data
    backends. At the time of writing, the following are the available data sources:'
  prefs: []
  type: TYPE_NORMAL
- en: Prometheus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graphite
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: InfluxDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elasticsearch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Stackdriver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS CloudWatch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Monitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loki (logging visualization)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MySQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PostgreSQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft SQL Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenTSDB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TestData (useful for generating fake data for testing)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Several efforts have been made to improve the integration of Prometheus into
    Grafana—for example, PromQL autocompletion. Currently, Grafana is the go-to dashboarding
    solution for anyone interested in visualizing Prometheus data. The previous sentence
    isn't completely true, because we know that for exploratory queries, there's nothing
    like the Prometheus expression browser. Recently, though, after the release of
    version 6.0.0, a feature called Explore was introduced in Grafana as an alternative
    expression browser.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the installation files for several operating systems and distributions
    at [https://grafana.com/grafana/download](https://grafana.com/grafana/download).
  prefs: []
  type: TYPE_NORMAL
- en: Grafana is built and preconfigured with automation in mind. In the following
    examples, we will demonstrate how you can pretty much set up an environment without
    touching the main configuration file. A noteworthy benefit is that Grafana comes
    natively instrumented with Prometheus metrics.
  prefs: []
  type: TYPE_NORMAL
- en: Login screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the test environment running, you can access Grafana using the `http://192.168.42.11:3000`
    URL. The user is greeted with a simple login screen, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac47013b-e9fb-45c2-aba3-f42bf359af55.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.2: Grafana login screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'The default authentication credentials are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Username** | **Password** |'
  prefs: []
  type: TYPE_TB
- en: '| `admin` | `admin` |'
  prefs: []
  type: TYPE_TB
- en: 'After a successful login, we''re welcomed to the Grafana homepage, which displays
    a setup wizard. Next, we''re going to explain each one of the configuration steps
    that are presented. The following screenshot shows the wizard with some steps
    already configured:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1f250cb1-8e67-4e0e-9eb9-03edbb93f21a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.3: Grafana home screen'
  prefs: []
  type: TYPE_NORMAL
- en: For the sake of readability, we've changed the default Grafana theme to **Light**
    instead of **Dark**. This is easily configured in the **Preferences** menu in
    the **Configuration** tab (the small gear icon on the left).
  prefs: []
  type: TYPE_NORMAL
- en: Data source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To have data to query, we must configure a data source. In our case, we'll add
    our Prometheus instance as the default data source. To do this, we need to indicate
    where the data source is located, any authentication/authorization details that
    are needed, and any additional data source-specific configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to configure a data source. One way is by adding a YAML
    file with the required configuration in the Grafana provisioning path, which is
    picked up by the service when starting up and is configured automatically. This
    is what we are doing in the test environment for this chapter, as it is the better
    solution for automated deployments. When connecting to the `grafana` instance
    in the test environment, you can see the configuration we are using by looking
    at the default provisioning path, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The other option is using the web interface by going into **Configuration**
    (the small gear icon on the left) | **Data Sources** and adding the options for
    the setup manually. When clicking on **Save & Test**, Grafana will validate the
    settings and let you know if anything went wrong. Grafana provides two options
    for accessing data sources that provide HTTP-based APIs (such as Prometheus):
    with or without proxying requests. When proxying requests, every single query
    that''s made from a dashboard panel or through the Explore expression browser
    will be proxied through the Grafana backend to the data source. Although this
    has the advantages of being able to manage data source credentials centrally and
    to close off direct network access to those data sources from everywhere except
    trusted clients, it creates additional load on the Grafana instances as a lot
    more traffic needs to pass through them. Not proxying requests means that the
    client browser will hit the data source directly for each request. This configuration
    expects that the user accessing Grafana also has direct access to the data source
    being used, and that security settings for that data source allow requests from
    different origins. In all of our examples, Grafana will be set to proxy queries.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the configuration that''s being used in our
    test environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9fe103bc-7af6-41bb-9348-d8f80c95863b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.4: Data Sources configuration interface'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the **Access** option is set as **Server (Default)**. This means that
    all the requests for the data source will be proxied through the Grafana instance.
  prefs: []
  type: TYPE_NORMAL
- en: Explore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This feature was introduced in Grafana 6 and its developers continue to improve
    its tight integration with Prometheus. Before Explore, every single time you wanted
    to perform an exploratory query, you were required to jump to the Prometheus expression
    browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides this convenience, there are also some noteworthy features that make
    Explore unique, as shown in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Metrics list**: In the top-left corner, we can find a combo box called **Metrics**.
    This lists metrics in a hierarchical form, grouped by their prefix, and even detects
    and groups recording rules when they follow the double-colon naming convention.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Query field**: Besides suggesting and autocompleting metrics, the query field
    also displays useful tooltips about PromQL functions and can even expand recording
    rules that are detected in their originating expression.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Context menus**: You can choose to open the query from any dashboard panel
    directly in the Explore page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot illustrates the **Explore** interface while also displaying
    a tooltip for the PromQL function that is being used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65766f06-7707-4443-b677-3a5c4f130d0b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.5: Grafana Explore page depicting the tooltip for the label_replace
    function'
  prefs: []
  type: TYPE_NORMAL
- en: Explore can normally be found by clicking the small compass icon on the left.
  prefs: []
  type: TYPE_NORMAL
- en: Dashboards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similar to managing data sources, there are several ways that you can add dashboards,
    listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: By manually building your own
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By importing [grafana.com](https://grafana.com/) community-driven dashboards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By automatically provisioning previously stored dashboards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll be tackling the last way right now since the test environment is using
    this approach. We will focus on the other two methods in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'A dashboard file is a declarative representation of a dashboard, with all the
    required settings specified, and uses the JSON format. If you place it in the
    expected provisioning path, the Grafana service will pick it up at the start.
    In our example, we used the default path, as we can see in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You can find this dashboard by going into the **Home** menu on the top left
    of the page and then selecting `node_exporter_basics`. This translates visually
    into the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9298eb33-8b04-4ca3-b1a2-8f81dd501573.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.6: Example dashboard that''s been automatically provisioned'
  prefs: []
  type: TYPE_NORMAL
- en: Grafana running on Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Deploying Grafana on Kubernetes involves mostly the same method as deploying
    it in VMs, so we''re just going to focus on some of the finer points that an operator
    should be aware of. The Kubernetes manifests for getting Grafana and Prometheus
    up and running in our Kubernetes test environment can be found, relative to the
    code repository root path, at the following path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Since the Kubernetes deployment procedure is the same as in previous chapters
    (bootstrapping the Prometheus Operator, deploying Prometheus using the Operator,
    and deploying exporters and their respective ServiceMonitors), this won't be covered
    in length again here. If you need additional context, feel free to have a look
    at the test environment walkthroughs in the previous chapters, such as [Chapter
    7](205ddb34-6ee8-4e22-b80f-39d5b2198c29.xhtml), *Prometheus Query Language – PromQL*.
  prefs: []
  type: TYPE_NORMAL
- en: The following steps will ensure the creation of a new Kubernetes environment
    with all the required software provisioned so that we can focus on the Grafana
    component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Validate that no other environment is running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Start an empty Kubernetes environment, by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the Prometheus Operator components and follow its deployment, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the new Prometheus cluster, ensuring that it''s successful, by using the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Add all the targets to Prometheus and list them using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now that the Kubernetes environment is running, we can proceed with Grafana-specific
    configurations. Similar to the VM-focused test environment, we'll require the
    provisioning of not only Grafana itself, but also the data source and dashboards.
  prefs: []
  type: TYPE_NORMAL
- en: For the data source, since we might want to add sensitive information such as
    authentication in the future, we are going to use a Kubernetes secret. This also
    implies that there should be a ServiceAccount for accessing that secret.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can create the ServiceAccount by applying the following manifest:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we''re using a secret, the data source configuration needs to be encoded
    into base64\. As for the provisioning configuration itself, it is the same as
    in the VM deployment, but we will be substituting the Prometheus URL with the
    Kubernetes equivalent that is managed by the service. Here''s a snippet before
    encoding:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'After applying the following manifest, a new secret with the desired Grafana
    data source will be available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, it''s time to add our example dashboard to Grafana. To achieve this, we
    need to provide Grafana with a provisioning configuration that tells it where
    to look for dashboard definitions and then put our example dashboard definition
    in that path. These are going to be available to the Grafana deployment as ConfigMaps.
    The relevant snippet that shows the dashboard location provisioning configuration
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The other `ConfigMap` contains our example dashboard, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Both manifests can be deployed in the Kubernetes test environment using the
    following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s now time to deploy Grafana and take advantage of all the preceding configurations,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This deployment brings everything together: it mounts the data source''s secret,
    and the dashboard provision and dashboards ConfigMaps at the same locations as
    the VM test environment, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'You may follow the deployment status using the following instruction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we can add a service so that we can access the newly launched Grafana
    instance, and a ServiceMonitor so that the Prometheus Operator configures Prometheus
    to collect metrics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now access the Grafana interface using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'When you''re finished testing, you can delete this Kubernetes-based test environment
    by issuing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This setup gives you a quick overview of how to integrate Grafana with Prometheus
    on Kubernetes. It's not awfully different from the VM test environment, but the
    details that were shown here will hopefully prevent you from having to search
    for information on how to accomplish it elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: Building your own dashboards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Inside the provided VM test environment, you had the opportunity to try out
    the bundled dashboard. Now, it is time that you learned how to build your own,
    but for that, you will need to grasp some concepts. In this section, we'll walk
    you through the process of creating a dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Dashboard fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A dashboard is composed of several components. We'll go over the most important
    concepts in the following sections, including panels, the visualizations they
    support, how to template variables, and changing the time range of the displayed
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Panels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A panel is a rectangular-shaped slot in the visualization area of a dashboard.
    An example is shown in the following screenshot. It can be rearranged and resized
    as necessary by dragging and dropping its various dimensions. You can also put
    a set of panels inside a row, which is nothing more than a logical grouping of
    those panels. Rows can be expanded or collapsed to show or hide the panels within
    them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/23f6ead4-8460-45e9-87e2-69a122551cbc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.7: New panel'
  prefs: []
  type: TYPE_NORMAL
- en: 'A panel, besides having the ability to query the chosen data source, also provides
    multiple visualization options to choose from. These visualization options allow
    you to present data in a variety of ways, such as simple single-value panels,
    bar graphs, line graphs, tables, all the way to heatmaps. The following screenshot
    illustrates the available built-in visualizations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6f3d192a-23d5-4703-b697-111c60593a5c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.8: Built-in visualization options'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding screenshot, we can see several panel types. Four of the most
    used ones are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Graph**: This the main Grafana panel. It provides the tools to create rich
    two-dimensional graphs backed by one or more PromQL expressions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Singlestat**: This is a multipurpose single-value display. As such, the PromQL
    query must return an instant vector with one sample only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gauge**: Using thresholds, this represents the position the current value
    is at in relation to the defined higher and lower bounds. Like the Singlestat
    visualization, this option requires a single instant vector with only one sample.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Table**: This displays the result of a PromQL expression in a table format,
    with each label in its own column, along with the value and the timestamp.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For each one of the available visualizations, there are numerous options that
    allow for the extraordinary level of customization of each panel's appearance.
    The official Grafana documentation explains every option in detail, so we will
    focus on the most relevant ones here.
  prefs: []
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The variables feature is extremely powerful. It allows a dashboard to configure
    placeholders that can be used in expressions, and those placeholders can be filled
    with values from either a static or dynamic list, which are usually presented
    to the dashboard user in the form of a drop-down menu. Whenever the selected value
    changes, Grafana will automatically update the queries in panels that use that
    particular variable. In our example dashboard, we're using this feature to allow
    the user to choose which node instance to present. Besides being commonly used
    in queries, they're also available, for example, in panel titles.
  prefs: []
  type: TYPE_NORMAL
- en: 'This feature is available in the **Dashboard settings**, which can be found
    by clicking the top-right cog icon, which in turn is available inside any dashboard.
    The following screenshot depicts the **Variables** option from the **node_exporter_basics**
    dashboard in the **Settings** menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e221b523-da4c-4a4a-b509-d62a7e5ee47f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.9: Dashboard variables'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, we're using a PromQL query to dynamically fetch the possible
    values for the `$instance` variable.
  prefs: []
  type: TYPE_NORMAL
- en: When the viewport is not large enough, the responsive design of Grafana will
    hide some of the top-right icons.
  prefs: []
  type: TYPE_NORMAL
- en: Time picker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The time picker feature is available in any dashboard in the top-right corner
    as a button containing the clock icon. The interface is split into two major blocks:
    **Quick ranges** of predefined time ranges (most of them relative to the current
    time) or a **Custom range**, which allows you to specify the exact time span to
    use in all the dashboard panels. As the name suggests, the **Refreshing every:**
    option will make the dashboard panels automatically reload at the interval specified.
    This is useful to see new data coming in when used in conjunction with a relative
    time range.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a series of quick ranges:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f60cdc9e-774a-4727-a1b8-1c51489f05c6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.10: Time picker'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic dashboard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to get hands-on with Grafana by guiding you through the creation
    process of a bare-bones dashboard. You can start by clicking the left plus sign
    logo | **Dashboard**. This will open a new empty dashboard with a new panel, ready
    to be edited. Since we want a dynamic dashboard, we're going to create a new variable,
    which will expand into a list of the available Node Exporter instances in our
    Prometheus server.
  prefs: []
  type: TYPE_NORMAL
- en: Using the *Shift* + *?* key combination will display a helpful tooltip of all
    the available shortcuts.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve our goal, we must click the top-right cog icon, open the **Dashboard
    settings**, then select **Variables**. The following screenshot illustrates the
    options that are available when creating such a variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/96af6a7f-afad-4096-bc80-aaeae5c57b66.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.11: Variables interface'
  prefs: []
  type: TYPE_NORMAL
- en: The preview values depicted in the preceding screenshot show the Node Exporter
    targets from the VM-based test environment. You will get a different preview if
    you are following along using the Kubernetes test environment.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we're creating a variable named `instance` using the **Query**
    type, which means it will populate its values from the results of the query to
    the data source. We're specifying the data source as `prometheus`, the identifier
    we gave during provisioning, and that we want to refresh that variable only when
    the dashboards get loaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now comes the interesting part: since we are interested in collecting Node
    Exporter instances, we use a metric in the **Query** field that is guaranteed
    to return the instances we require, `node_exporter_build_info`. The `label_values()`
    function isn''t actually valid PromQL, but is provided by the Prometheus data
    source plugin in Grafana to use in this field to facilitate these kind of expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Regex** field is used to match the parts of the query result we want
    to use to populate the variable. In our example, we want the full content of the
    instance label, so we match everything inside a regular expression capture group,
    `(.+)`. We can see that the matching is working in the **Preview of values** section
    at the bottom of the screen. After clicking **Add** and saving this dashboard
    using the name `example`, we can now see the following dropdown menu with the
    values of the `instance` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/658cc9e1-5956-4698-ae88-29eec1a9a9c1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.11: Instance values'
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s time to create our first panel. Click on the top-right graph logo, and
    in the new panel, click **Add Query**. The following screenshot illustrates the
    query interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d846f364-4fa0-41dd-a32b-63ffbb2e2518.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.12: Query interface'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we can specify the PromQL queries (one or more, depending on the visualization
    type) to perform on the desired data source. In our example, we''ll be creating
    a graph of CPU usage per mode, and we want to template the query so that it uses
    the `instance` variable we created earlier. Note the `$instance`, which will be
    replaced at query time with the selected value in the `instance` combo box. The
    full expression is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The `label_replace()` function allows us to remove the port from the instance
    value, which we''ll use in the **Legend** field. This field allows the substitution
    of `{{ }}` template markers with the values of the metric labels set within it.
    This will, in turn, reflect on the graph legend preceding the **Query** menu.
    In the following screenshot, we can see several visual options that have been
    applied to our dashboard, and we''ll go over each one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6f5e33df-ee34-442e-bedb-cd1f0689f455.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.13: Visualization interface'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Axes** section, we select which of the graph axes to enable; the **Right
    Y** configuration options do not produce any change, as that axis is not used.
    In the **Left Y** configuration, we can specify the **Unit**. In our case, we
    want a percentage; we could simply multiply our expression by 100, but not doing
    so exposes one of the handy features Grafana has to offer. As we already know,
    our value range is from 0 to 1; this **Unit** type will take the values in the
    0-1 range and automatically transform them into percentages (from 0 to 100). We're
    also ensuring that **Y-min** is set to , so that the graph becomes easier to understand
    visually, as without it the graph would have the *y* axis scale adapted to start
    near the lowest *Y* value in the query result. Additionally, for the sake of this
    example, we want three decimal places in the values of the *y* scale, and so we
    set that using the **Decimals** field. On the **X-Axis**, we didn't change anything,
    as we want the time.
  prefs: []
  type: TYPE_NORMAL
- en: In the **Legend** section, we control how we want the graph legend to look and
    where it's placed inside the panel. In our case, we want it as a table, placed
    on the right-hand side of the graph, and we want it to present the average and
    current value of *Y*.
  prefs: []
  type: TYPE_NORMAL
- en: 'To finish our panel, we need to step into the **General** menu, as shown in
    the following screenshot, where we can name our panel and add a description. The
    description will be available as a small **i** icon in the top-left corner of
    the panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3cad9e01-6146-46f0-845a-4570d0e31f8a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.14: The general menu of the panel'
  prefs: []
  type: TYPE_NORMAL
- en: To save your new dashboard, just click the small floppy disk icon in the top-right
    corner. You have now created a simple dashboard from scratch! You can continue
    adding panels and visualizations, but the main concepts are pretty much the same.
    You can explore the provided dashboard in the test environment for more examples
    on how to use different visualizations options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Something to keep in mind when creating a dashboard is to avoid unnecessary
    clutter. It is usual to see dashboards with dozens of panels, with a multitude
    of data on display. Try to have the right amount of information so that, for example,
    troubleshooting issues is quick and painless. Focus is the key word here: if there
    are panels that are not related to each other inside a dashboard, perhaps it would
    be a good idea to split them into their own dashboard.'
  prefs: []
  type: TYPE_NORMAL
- en: Exporting dashboards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Grafana makes it easy to export dashboards. To proceed, just open the dashboard
    you intend to export and press the small **square with arrow** icon in the top-right
    panel, near the floppy disk icon.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following form will open:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b8e6f0d-846b-4dc5-8b5a-865903bf2d97.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.15: Grafana dashboard export'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you''re presented with several options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Export for sharing externally**: Enables the templating of the data source
    names, which is helpful for sharing the dashboard publicly. This is mandatory
    in order to publish the dashboard on the [grafana.com](https://grafana.com/) website.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View JSON**: Allows you to visualize the code of the dashboard.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Save to file**: Downloads the dashboard as a JSON file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we're going to see how we can download dashboards from the Grafana dashboard
    gallery, and how to contribute our own to it.
  prefs: []
  type: TYPE_NORMAL
- en: Discovering ready-made dashboards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since Grafana is widely used and has a huge community behind it, it's logical
    that a huge number of dashboards are being created by that community. The folks
    at Grafana provide a service where registered users are able to publish their
    dashboards onto a gallery, and anyone can download and install them on their own
    Grafana instances. In the following sections, we'll be providing an overview of
    both actions, not only using community-made dashboards, but also how to publish
    your own.
  prefs: []
  type: TYPE_NORMAL
- en: Grafana dashboards gallery
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Both community-driven and official dashboards are available at [https://grafana.com/dashboards](https://grafana.com/dashboards)
    and, as expected, there are a lot to choose from. Since we''re interested in Prometheus-specific
    dashboards when searching the site, we should restrict the search results to that
    data source. By applying additional filters, we keep restricting results to exactly
    what we''re after, as you can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8813a1bf-1e75-45bc-a419-c33c7ab23bf7.png)'
  prefs: []
  type: TYPE_IMG
- en: '10.16: Grafana.com filtered dashboards result'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can then select the dashboard we''re interested in, which will in turn open
    a screen, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/45d1f4b5-42ff-4330-b110-7f9125e9a2a6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.17: Grafana.com selected dashboard information'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we can see some information regarding the dashboard and a screenshot
    of it. Notice the ID **9916** on the right; it''s a unique identifier in the Grafana
    gallery for this particular dashboard. We can use it by going into a Grafana instance,
    such as the one in our test environment, clicking on the plus sign in the main
    menu on the left-hand side, selecting **Import** from the submenu, and pasting
    it in the appropriate text field, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b84e849-cf97-4e71-a120-a79f7ea7300d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.18: Import dashboard interface'
  prefs: []
  type: TYPE_NORMAL
- en: After pasting in the ID, a new menu will pop up, asking for the name we want
    to give to this dashboard, in which folder it should be placed, and what data
    source it should use. If there are any conflicts with pre-existing dashboards
    (such as dashboards with the same name), you will be asked to resolve them before
    you will be able to finish the import process.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing your dashboards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Publishing a newly created dashboard is quite easy. First, ensure that you have
    an account for the Grafana website by using the registration form located at [https://grafana.com/signup](https://grafana.com/signup).
    After a successful registration, go into your profile via **Personal** *|* **My
    Dashboards** or use the `https://grafana.com/orgs/<user>/dashboards` link, replacing
    `<user>` with your Grafana username.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside **My Dashboards**, you can now click the **Upload Dashboard** button.
    This action will open an upload form, requesting the dashboard to be uploaded.
    Remember, this will only accept dashboards that are exported with the **Export
    for sharing externally** option toggled on:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bc4c7fb5-c9ce-43b5-b2a9-73f8ff9a1a99.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.19: Dashboard upload form'
  prefs: []
  type: TYPE_NORMAL
- en: And you're done! You'll now obtain a numeric ID for your dashboard and you can
    start using it or sharing it across the globe. You can update the published dashboard
    if you want to, as this will not alter the generated ID. Instead, it will create
    another revision of the published dashboard, and users will always download the
    latest revision that's available.
  prefs: []
  type: TYPE_NORMAL
- en: Default Prometheus visualizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Historically, Prometheus maintained its own tool to create dashboards, called
    PromDash. Over time, since Grafana improved its native support for Prometheus
    as a data source, the community began gravitating toward using Grafana as its
    primary visualization solution—so much so that PromDash was deprecated by the
    people who maintained Prometheus in favor of Grafana.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code for PromDash at [https://github.com/prometheus-junkyard/promdash](https://github.com/prometheus-junkyard/promdash).
  prefs: []
  type: TYPE_NORMAL
- en: Even though Grafana is the recommended visualization solution for most people,
    Prometheus also ships with an internal dashboarding feature called **console templates**.
    These console templates are written in raw HTML/CSS/JavaScript and leverage the
    power of the Go templating language to generate dashboards (called consoles) that
    are served by the Prometheus server itself. This makes them blazingly fast and
    endlessly customizable. Console templates are as powerful as they are complex.
    We are going to introduce this feature by giving you a small overview of how to
    use and build console templates in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Out-of-the-box console templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you unpack the Prometheus release archive, besides the binaries for the
    server and promtool, there are also a few console templates readily available.
    To make this clear, we can look inside our test environment where we unpacked
    these templates into system paths, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Both directories need to be properly configured for consoles to work. Console
    libraries define helper functions that are then used in console templates so that
    repetition is kept to a minimum. We are going to have a closer look at these libraries
    in the next section when we build our own template.
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, here are the console templates that ship with Prometheus:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in `index.html.example`, these templates expect the scrape jobs
    for Prometheus and Node Exporter to be named `prometheus` and `node` respectively,
    so they might not work for your Prometheus configuration out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can access it by using the web interface URL at `http://192.168.42.10:9090/consoles/index.html.example`
    and exploring the available consoles. The following screenshot depicts the console
    for the node CPU of the Prometheus instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec4dbe95-b7b0-4822-8279-bae5419519d6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.20: Node CPU for Prometheus'
  prefs: []
  type: TYPE_NORMAL
- en: Console template basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating console templates from scratch has a steep learning curve. Unlike in
    Grafana, console templates are crafted directly in HTML and JavaScript, with a
    fair dose of Go templating in the mix. This means that consoles can technically
    take any form, but for simplicity, we will stick to the structure provided by
    the built-in console libraries.
  prefs: []
  type: TYPE_NORMAL
- en: 'The libraries that power the example console templates define the scaffold
    for the consoles. They take care of things such as constructing the HTML structure,
    including the necessary CSS and JavaScript and modeling the four sections around
    the main console content: the navigation bar at the top, the menu on the left,
    the console time controls at the bottom, and a table to show summary statistics
    on the right. Let''s see how we could use them to construct a simple console template
    by looking at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The `head` template expands to HTML that defines the inclusion of CSS and JavaScript,
    the top navbar, and the menu; the `prom_content_head` template on the other hand,
    defines the time controls, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'This section defines the console itself. The `queryGraph` element is used as
    the placeholder that the graphing JavaScript library will use to generate the
    graph. The JavaScript snippet, on the other hand, configures the graph with the
    selector that is to be used (`node`), what expression to graph (`expr`), what
    to use in the legend (`name`), and several *y-*axis configurations, as shown in
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The last two templates close the sections that the first opened. They are needed
    so that the generated HTML is well formed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting console is available in the test environment for this chapter,
    and can be checked out at `http://192.168.42.10:9090/consoles/grafana.html`. Here
    is a screenshot of how it should look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7e993420-24b6-4226-9b65-5cad8c8e01fe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.21: Example console for Grafana requests per second'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the menu on the left-hand side does not have a link to our newly created
    console template. This is because the included `menu.lib` only supports the example
    console templates that ship with Prometheus. When deploying actual custom console
    templates, you would need to replace this library with your own. This would allow
    you to add links to other internal systems in the navbar at the top and list which
    consoles should be available on the navigation menu on the left. By leveraging
    the fact that you can perform PromQL queries in templates, you should be able
    to find out which jobs are scraped by that Prometheus instance and generate links
    to similarly named consoles.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we explored the standard visualization tool for Prometheus:
    Grafana. We''ve learned how to provision not only data sources, but dashboards
    as well. After learning about the building blocks of a dashboard, we created a
    simple dashboard from scratch, learning all that it entails step by step. We also
    learned how to take advantage of the thriving community-built dashboard gallery.
    Giving back to the community is always important, so we''ve gone through the process
    of exporting and publishing dashboards. Finally, we were introduced to the Prometheus
    default visualizations—the consoles—which, even though they have a steep learning
    curve, are extremely powerful.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll be exploring the Alertmanager, how to best take advantage
    of its functionalities, and how to integrate it with Prometheus.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How can you provision a data source automatically in Grafana?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the steps to import a dashboard from the Grafana gallery?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do Grafana dashboard variables work?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What's the building block of a dashboard?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you update a dashboard that's published to [grafana.com](https://grafana.com/),
    does it change its ID?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Prometheus terms, what is a console?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why would you use Prometheus console templates?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Grafana Explore**: [http://docs.grafana.org/features/explore/](http://docs.grafana.org/features/explore/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Grafana templating**: [http://docs.grafana.org/reference/templating/](http://docs.grafana.org/reference/templating/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Grafana time range**: [http://docs.grafana.org/reference/timerange/](http://docs.grafana.org/reference/timerange/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Console templates official documentation**: [https://prometheus.io/docs/visualization/consoles/](https://prometheus.io/docs/visualization/consoles/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Console templates best practices**: [https://prometheus.io/docs/practices/consoles/](https://prometheus.io/docs/practices/consoles/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
