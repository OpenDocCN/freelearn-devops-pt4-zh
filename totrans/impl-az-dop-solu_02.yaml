- en: Introduction to DevOps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps简介
- en: DevOps is not a product or tool that you can buy or install. DevOps is about
    culture and the way you write, release, and operate your software. DevOps is about
    shortening the time between a new idea and your first end user experiencing the
    value it delivers. In this book, you will learn about the tools and techniques
    to apply that philosophy to your way of working.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 不是一种可以购买或安装的产品或工具。DevOps 关乎文化，以及你如何编写、发布和运营软件。DevOps 的目标是缩短从新想法到最终用户体验到它所带来的价值的时间。在本书中，你将了解应用这一理念到工作方式的工具和技术。
- en: To enable this, you might have to change the way you work and adopt new tools
    or change the way you use them. In this first chapter, you will learn more about
    what DevOps really is and how to recognize a successful DevOps team.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一目标，你可能需要改变你的工作方式，采用新工具或改变使用方式。在第一章中，你将深入了解什么是真正的DevOps，以及如何识别一个成功的DevOps团队。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涉及以下主题：
- en: What DevOps is and why you cannot simply buy or install it
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是DevOps，为什么你不能简单地购买或安装它
- en: How DevOps complements Agile
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps如何补充敏捷方法
- en: What the benefits of DevOps are and how to measure them
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps的好处是什么，如何衡量它们
- en: Creating your ideal DevOps and organizational structure
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建理想的DevOps和组织结构
- en: Exploring DevOps practices and habits of successful DevOps teams
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索成功的DevOps团队的实践和习惯
- en: The five stages of DevOps evolution
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps演进的五个阶段
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: There are no technical requirements for this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章没有技术要求。
- en: What is DevOps?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是DevOps？
- en: If you were to list all of the different definitions and descriptions of DevOps,
    there would be many. However, as different as these might be, they will most likely
    share several concepts. These are collaboration, continuous delivery of business
    value, and breaking down silos.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你列出所有关于DevOps的不同定义和描述，会有很多。然而，尽管这些定义可能各不相同，它们很可能会共享几个概念。这些概念包括协作、持续交付商业价值和打破孤岛。
- en: With all of the technical discussion in the rest in this book, it is important not to
    overlook the value proposition for adopting DevOps, namely, that it will help
    you to improve the way that you continuously deliver value to your end users.
    To do this, you have to decrease the time between starting work on a new feature
    and the first user using it in production. This means that you not only have to
    write the software but also deliver and operate it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书其余部分的技术讨论中，重要的是不要忽视采用DevOps的价值主张，也就是说，DevOps将帮助你改善持续向终端用户交付价值的方式。为了做到这一点，你必须减少从开始开发新特性到第一个用户在生产环境中使用它之间的时间。这意味着你不仅要编写软件，还要交付并运营它。
- en: Over the last decade, the way we write software has fundamentally changed. More
    and more companies are now adopting an Agile way of working to increase the efficiency
    of their software development. More and more teams are now working in short iterations
    or sprints to create new increments of a product in quick succession. However,
    creating potentially shippable increments faster and faster does not create any
    value in itself. Only when each new version of your software is also released
    to production and used by your end users does it start delivering value.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去十年中，我们编写软件的方式发生了根本变化。越来越多的公司正在采用敏捷工作方式，以提高软件开发的效率。越来越多的团队现在在短时间内进行迭代或冲刺，快速创建产品的新增量。然而，更快地创建潜在可交付的增量本身并不会创造任何价值。只有当你的每个新版本软件被发布到生产环境，并且被终端用户使用时，它才开始交付价值。
- en: In traditional organizations, developers and operators are often located in
    different departments and taking software into production includes a hand-off,
    often with a formal ceremony around it. In such an organization, it can be hard
    to accelerate that delivery to production along with the speed at which development
    can create new versions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统组织中，开发人员和运维人员通常位于不同部门，软件发布到生产环境通常需要交接，并且往往会有正式的仪式。在这样的组织中，加速将软件交付到生产环境，并与开发人员创建新版本的速度相匹配是困难的。
- en: 'Next to that, development and operations departments often have conflicting
    goals. While a development department is rewarded for creating many changes as
    fast as possible, operation departments are rewarded for limiting downtime and
    preventing issues. The latter is often best achieved by having as few changes
    as possible. The conflict here is clear—both departments have optimizations for
    one subgoal, as shown in the following diagram:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，开发和运维部门通常有冲突的目标。开发部门通过尽可能快速地创建更多的变化来获得奖励，而运维部门则通过限制停机时间和防止问题来获得奖励。后者通常通过尽可能少的变化来实现。这里的冲突很明显——两个部门都为一个子目标进行优化，如下图所示：
- en: '![](img/9fa57b6c-f9de-453a-a80f-38d8465c1faa.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9fa57b6c-f9de-453a-a80f-38d8465c1faa.png)'
- en: This defeats the purpose of these subgoals, which comes from the shared, overarching
    goal of quickly taking in new versions while maintaining stability. Precisely
    this conflict between developmental and operational goals is one of the things
    that should disappear in a DevOps culture. In such a culture, developers and operations
    teams should work together on delivering new versions to production in a fast
    and reliable manner and share responsibility for both subgoals.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这会破坏这些子目标的目的，这些子目标源于快速接受新版本的共同宏大目标，同时保持稳定性。正是开发目标和操作目标之间的冲突，应该在 DevOps 文化中消失。在这样的文化中，开发人员和运维团队应该共同努力，以快速、可靠的方式将新版本交付到生产环境，并共同负责这两个子目标。
- en: While it is good to know that DevOps is a cultural movement, tools and automation
    are an important part of that culture. In this book, the focus will be on these
    tools and how to use them to implement many of the practices that come with a
    DevOps culture. In other words, this book will be mostly on the products and processes
    associated with DevOps. If you want to learn more about the cultural side of things,
    about the people, there are many other books to read.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然了解 DevOps 是一种文化运动是很好的，但工具和自动化在这种文化中占有重要地位。本书将重点介绍这些工具，以及如何利用它们实施 DevOps 文化中的许多实践。换句话说，本书将主要关注与
    DevOps 相关的产品和流程。如果你想了解更多关于文化方面的内容，关于人的部分，还有很多其他书籍可以阅读。
- en: The rest of this section will explore the relation between DevOps to see how
    they complement each other. The focus will be on Agile techniques and prices for
    work management. We will also discuss the goals and benefits of a DevOps culture.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的其余部分将探讨 DevOps 之间的关系，看看它们是如何相辅相成的。重点将放在敏捷技术和工作管理的价格上。我们还将讨论 DevOps 文化的目标和益处。
- en: The relation between DevOps and Agile
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 与敏捷的关系
- en: If you take a look at Agile, you might notice that part of it is the focus on
    business value and shortening the time between the delivery of a new business
    value. From that perspective, adopting DevOps is a logical next step after Agile.
    Agile advocates that the software development teams' responsibilities should extend
    forward by engaging with users and other stakeholders to more quickly deliver
    valuable potentially shippable products. DevOps is all about not just creating
    something that might be shipped, but really shipping it as well. With Agile and
    DevOps combined, you can create an end-to-end, continuous flow of value to your
    users.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看一下敏捷，可能会注意到其中一部分关注的是业务价值，并缩短新业务价值交付之间的时间。从这个角度来看，采用 DevOps 是敏捷之后的逻辑下一步。敏捷主张，软件开发团队的责任应该通过与用户和其他利益相关者的互动来向前延伸，以更快地交付有价值的、潜在可交付的产品。而
    DevOps 不仅仅是创建可以交付的东西，真正的目标是将其交付出去。结合敏捷和 DevOps，你可以为用户创建一个端到端、持续不断的价值流。
- en: One of the things you need to be able to do this is a common approach to managing
    the work to be done for everyone involved. In the next section, you will find
    some pointers on how to incorporate operational concerns in the way you manage
    your work.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 做到这一点需要的一项重要条件是，所有参与者都必须有一个共同的工作管理方法。在接下来的章节中，你将找到一些关于如何将操作问题纳入到工作管理方式中的建议。
- en: Agile work management
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 敏捷工作管理
- en: 'When you are starting to increase the collaboration between development and
    operations, you will quickly notice that they have to cope with different types
    of work. In development, a large part of the work is planned: user stories and
    bugs that are picked up from a backlog. On the other hand, for operations, a large
    part of their work is unplanned. They respond to warnings and alerts from systems
    and requests or tickets from users or developers.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始增加开发与运维之间的协作时，你会很快注意到他们必须应对不同类型的工作。在开发中，工作很大一部分是计划好的：用户故事和从待办事项列表中提取的缺陷。另一方面，对于运维工作，他们很大一部分是无计划的。他们响应来自系统的警告和提醒，以及来自用户或开发者的请求或工单。
- en: 'Integrating these two, especially if developers and operators are located on
    the same team, can be challenging. To see how you can deal with this, let''s explore
    the following approach:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 将这两者整合，特别是当开发人员和运维人员位于同一个团队时，可能会遇到挑战。为了看到如何应对这一点，让我们探索以下方法：
- en: First, switch to a flow-based way of working for developers.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，为开发人员切换到流式工作方式。
- en: Next, allow for operations to also list their work in the same work management
    system as developers using synchronizations. You can also choose to implement
    *fastlaning*, an approach to expedite urgent work.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，允许运维团队也在与开发人员相同的工作管理系统中列出他们的工作，通过同步来实现。你还可以选择实施*fastlaning*，一种加速紧急工作的方式。
- en: Finally, you might choose to decommission existing ticketing tools for operations
    if possible.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，如果可能，你可以选择停用现有的运维工单工具。
- en: Fastlaning is an approach to organizing work that allows for both planned and
    unplanned work by visualizing two separate lanes of work. To do this, the Scrum
    board is extended with a Kanban-like board on the top. This is the fast lane.
    On the Kanban board, urgent but unplanned work is added. Any work added to this
    lane is picked up by the team with the highest priority. Only when there is no
    work remaining in the fast lane is work from the Scrum board with planned work
    picked up. Whenever new work is added to the fast lane, this takes priority again.
    Often, there is the agreement though that work in progress is finished before
    switching to work in the fast lane.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Fastlaning（快速通道）是一种工作组织方法，通过可视化两条独立的工作通道，允许计划性和无计划的工作并行进行。为此，Scrum看板会在顶部增加一个类似Kanban的看板。这是快速通道。在Kanban看板上，添加了紧急但无计划的工作。任何加入这个通道的工作都会被团队以最高优先级拾取。只有当快速通道没有剩余工作时，才会从Scrum看板中拾取计划好的工作。每当新的工作加入快速通道时，优先级再次提升。通常，大家会达成协议，工作在切换到快速通道之前，应该先完成正在进行的工作。
- en: Switching to a flow-based methodology
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转向流式方法
- en: The first thing to consider is transitioning the way developers work from batch-wise
    to flow-based. An example of a batch-wise way of working is Scrum. If you are
    using the Scrum framework, you are used to picking up a batch of work every two
    to four weeks and focus on completing all of that work within that time window.
    Only when that batch is done do you deliver a potentially shippable product.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 首要考虑的是将开发人员的工作方式从批处理模式转换为流式工作模式。批处理式工作的一个例子是Scrum。如果你使用的是Scrum框架，你习惯了每两到四周拾取一批工作，并专注于在这个时间窗口内完成所有工作。只有当这一批工作完成时，才能交付一个潜在的可发布产品。
- en: When changing to a flow-based approach, you try to focus not on a batch, but
    on just one thing only. You work on that one work item and drive it completely
    until it's done before you start on the next. This way, there is no longer a sprint
    backlog, only a product backlog. The advantage of this approach is that you no
    longer decide which work to perform upfront, but whenever you are free to start
    on new work, you can pick up the next item from the backlog. In an environment
    where priorities quickly shift, this allows you to react to change more quickly.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当转向流式工作方法时，你应该专注于不是一个批次，而仅仅是一个任务。你专注于那个任务，并将其完全完成后，才开始下一个任务。这样，就不再有冲刺待办事项列表，只有产品待办事项列表。这种方法的好处是，你不再事先决定要执行哪些工作，而是在有空闲时间时，直接从待办事项列表中拾取下一个任务。在优先级迅速变化的环境中，这可以帮助你更快速地应对变化。
- en: These changes to the way developers organize their work make it easier to include
    operations in work management, but there is also another benefit. When developers
    are focusing on getting a single work item done instead of a whole sprint at once,
    you can also increase the number of times you can deliver a small portion of value
    to your users.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员组织工作方式的这些变化使得将操作纳入工作管理变得更加容易，但还有另一个好处。当开发人员专注于完成单个工作项，而不是一次性完成整个迭代时，你也可以增加向用户交付小部分价值的次数。
- en: Synchronizing work items to one system
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将工作项同步到一个系统
- en: After the development team changes the way it organizes its work, it should
    now be easier for developers to also list their planned work on the shared backlog
    and pull work from that backlog when they have time to work on it. They now also
    have a place where they can list their unplanned work.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发团队改变工作组织方式后，现在开发人员应该更容易将他们计划的工作列入共享的待办事项列表，并在有时间时从该列表中提取工作。他们现在也有一个地方可以列出未计划的工作。
- en: However, there might still be an existing ticketing system where requests for
    operations are dropped by users or automatically created by monitoring tools.
    While Azure DevOps has a great API to rework this integration to directly create
    work items in Azure DevOps, you might first choose to create a synchronization
    between your existing ticketing tool and Azure Boards. There are many integration
    options available and there is a lot of ongoing work in this area. This way, operators
    can slowly move from their old tool to the new one, since they are now in sync.
    Of course, the goal is for them to move over to the same tool as the developers
    completely.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，可能仍然存在一个现有的工单系统，其中请求操作的工单由用户提交或由监控工具自动创建。虽然 Azure DevOps 提供了一个出色的 API，可以重新构建此集成，直接在
    Azure DevOps 中创建工作项，但你可能首先会选择在现有的工单工具和 Azure Boards 之间创建同步。这里有许多集成选项，并且这一领域正在进行大量的工作。通过这种方式，操作人员可以逐渐从他们的旧工具迁移到新工具，因为它们现在已经同步。当然，最终目标是让操作人员完全迁移到与开发人员相同的工具上。
- en: Fastlaning
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速通道
- en: 'With the work of developers and operators in the same work management tool,
    you will notice that you have a mix of planned and unplanned, often urgent, work
    in the system. To ensure that urgent work gets the attention and precedence it
    deserves, you can introduce what is called a fastlane to your sprint board. In
    the following screenshot, you can see an example of an Azure Board that is set
    up for fastlaning production issues:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于开发人员和运维人员使用同一个工作管理工具，你会注意到系统中既有计划的工作，也有未计划的工作，且这些未计划的工作通常是紧急的。为了确保紧急工作能够得到应有的关注和优先级，你可以在迭代看板中引入所谓的快速通道。在下面的截图中，你可以看到一个为快速处理生产问题设置的
    Azure 看板示例：
- en: '![](img/3ccad3d1-6a76-4034-bb4e-083718163856.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ccad3d1-6a76-4034-bb4e-083718163856.png)'
- en: The use of this horizontal split in the board is to only work on tasks in the
    regular lane when there is no work to be picked up in the fast lane.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在看板中使用这种水平分割的目的是当快速通道中没有工作可接时，只在常规通道中处理任务。
- en: Decommissioning other work management tools
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 停用其他工作管理工具
- en: After creating a shared work management system between development and operations,
    there is much opportunity to increase the amount of collaboration between them.
    When this collaboration is taking off, old ticketing systems that were used by
    operations might now slowly be decommissioned over time. Integrations from monitoring
    tools can be shifted to the new shared tools and the number of tickets between
    developers and operators should slowly decrease as they find new ways of working
    together.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发和运维之间创建共享的工作管理系统后，增加双方之间的协作机会。随着这种协作的展开，运维部门以前使用的旧工单系统可能会随着时间的推移逐渐停用。监控工具的集成可以转移到新的共享工具上，开发人员和运维人员之间的工单数量应该会逐渐减少，因为他们找到新的协作方式。
- en: Goals and benefits of a DevOps culture
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 文化的目标与好处
- en: At this point, you might be wondering about the point of it all. What are the
    benefits of DevOps and what is there in it for you, your colleague, and your organization?
    The most common goal of adopting DevOps is to achieve a reduction in **cycle time**.
    Cycle time is the time between starting work on a new feature and the moment that
    the first user can use it. The way this is achieved, by automation, also serves
    the goals of lower change failure rate, lower **Mean Time To Repair** (**MTTR**)
    and lower planned downtime.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你可能会想知道这一切的意义何在。DevOps的好处是什么，它对你、你的同事和你的组织又有什么作用？采用DevOps的最常见目标是减少**周期时间**。周期时间是从开始处理新功能到第一个用户可以使用它之间的时间。通过自动化实现这一目标，同时也有助于降低变更失败率、降低**平均修复时间**（**MTTR**）和减少计划停机时间。
- en: Next to all that, there might also be other benefits such as increased employee
    satisfaction, less burnout and stress, and better employee retention. This is
    attributed to the removal of opposing goals between developers and operators.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些之外，还有其他潜在的好处，例如员工满意度提高、工作倦怠和压力减少，以及更好的员工留存率。这归因于开发人员和运维人员之间对立目标的消除。
- en: For a while, there was doubt whether DevOps really works, and whether these
    goals were really met, and whether the extra benefits were really achieved, as
    this was only shown using case studies. The downside of this is that case studies
    are often only available for successful cases and not for unsuccessful cases.
    This all changed in 2018 when the book *Accelerate* came out. This book shows,
    based on years of quantitative research, that modern development practices such
    as DevOps really contribute to reaching IT goals and organizational goals.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 曾一度存在怀疑，是否DevOps真的有效，这些目标是否真正达成，额外的好处是否真的实现，因为这一切只是通过案例研究展示的。问题在于，案例研究通常只适用于成功的案例，而不适用于失败的案例。直到2018年，书籍《加速》发布，这一切才发生了变化。这本书基于多年的定量研究，表明现代开发实践，如DevOps，确实有助于实现IT目标和组织目标。
- en: Measuring results
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结果衡量
- en: To measure where you currently stand as a team or organization and the impact
    of DevOps on you, there are several metrics that you could start recording. As
    always when working with metrics or **Key Performance Indicators** (**KPIs**),
    make sure that you do not encourage people to game the system by looking only
    at the numbers. Several interesting metrics are detailed in the following sections
    and if you go over them, you will notice that they are all about encouraging flow.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了衡量你所在团队或组织的现状以及DevOps对你的影响，有几个指标你可以开始记录。像往常一样，在处理指标或**关键绩效指标**（**KPI**）时，确保不要鼓励人们仅仅通过关注数字来操控系统。接下来的章节中详细介绍了几个有趣的指标，如果你逐一查看，你会发现它们都在鼓励流程的流畅性。
- en: Cycle time and lead time
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 周期时间和交付时间
- en: '**Cycle time** and **lead time** are metrics that come from Lean and Kanban
    and are used to measure the time needed to realize a change. Cycle time is the
    amount of time between starting work on a feature and users being able to use
    that feature in production. The lower cycle time, the quicker you can react to
    changing requirements or insights. Lead time is the amount of time between requesting
    a feature and realizing that feature. It is the time between adding work to the
    backlog and the start of implementation.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**周期时间**和**交付时间**是来自精益和看板的度量标准，用于衡量实现变更所需的时间。周期时间是从开始处理一个功能到用户能够在生产环境中使用该功能之间的时间。周期时间越短，你就能越快响应变化的需求或新见解。交付时间是从请求一个功能到实现该功能之间的时间。它是从将工作添加到待办事项列表到开始实施之间的时间。'
- en: When you add cycle time and lead time together, you are calculating another
    metric, the **time to market**. This last one is often an important business metric
    when developing software. Minimizing both cycle time and lead time will hence
    have a business impact.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将周期时间和交付时间加在一起时，你正在计算另一个指标——**上市时间**。这个指标通常是软件开发中的一个重要业务指标。最小化周期时间和交付时间将因此产生业务影响。
- en: The amount of work in progress
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 正在进行中的工作量
- en: Another thing you can measure is the amount of work in progress at any point
    in time. DevOps is focusing on the flow of value to the user. This implies that
    everyone should, if possible, be doing only one thing at a time and completely
    finish that before moving on to something else. This reduces the amount of time
    spent on task switching and the amount of time spent on not yet complete work.
    Measuring how many things a team works on in parallel and reporting on this can
    encourage this.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可以衡量的方面是任何时候进行中的工作量。DevOps关注的是价值流向用户。这意味着每个人应该尽可能一次只做一件事，并在完成这件事后再进行下一项任务。这可以减少任务切换和未完成工作的时间。衡量团队并行处理的任务数量并报告这一情况，可以鼓励这种做法。
- en: 'You can even go as far as putting actual limits on the amount of work that
    can be in progress. The following is a small part of the earlier screenshot, showing
    that these work-in-progress limits can even be shown in the tool:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以对正在进行的工作数量设定实际限制。下面是之前截图的一小部分，显示了这些工作进行中的限制甚至可以在工具中显示出来：
- en: '![](img/c3765c85-e136-4833-99cf-387d97b6890b.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c3765c85-e136-4833-99cf-387d97b6890b.png)'
- en: The goal is to have as little work in progress at the same time as possible.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是尽可能减少同时进行的工作量。
- en: Mean time to recovery
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 平均恢复时间
- en: A third metric is the **mean time to recovery**. How long does it take you to
    restore service in case of a (partial) outage? In the past, companies focused
    on reducing the **mean time between failures***.* This used to be the mean indicator
    of the stability of a product. However, this metric encourages limiting the number
    of changes going to production. The unwanted consequence often is that outages,
    though maybe rare, last long and are hard to fix.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个度量标准是**平均恢复时间**。在发生（部分）故障时，恢复服务需要多长时间？过去，企业关注的是减少**平均故障间隔时间**。这曾是衡量产品稳定性的主要指标。然而，这个度量标准促使公司限制进入生产环境的变更数量。其不良后果通常是，尽管故障可能较少，但一旦发生，持续的时间长且修复困难。
- en: Measuring the mean time to recovery shifts the attention to how quickly you
    can remediate an outage. If you can fix outages quickly, you achieve the same,
    namely, minimizing the amount of downtime without sacrificing the rate of change.
    The goal is to minimize the time to recovery.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 衡量平均恢复时间将注意力转向你能够多快修复故障。如果你能迅速修复故障，那么就能实现同样的目标，即最小化停机时间，同时不牺牲变更速率。目标是最小化恢复时间。
- en: Change rate and change failure rate
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变更速率与变更失败率
- en: Finally, you can measure the number of changes delivered to production and the
    percentage of that which is not successful. Increasing the rate of change implies
    that you are more often delivering value to your users, hence realizing a flow
    of value. Also, by measuring not just the number of failures, but the percentage
    that fails, you are actually encouraging many small, successful changes instead
    of encouraging limiting the number of changes overall.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以衡量交付到生产环境的变更数量，以及其中未成功的百分比。提高变更速率意味着你更频繁地向用户交付价值，从而实现价值流动。此外，通过衡量不仅是失败的数量，还包括失败的百分比，你实际上是在鼓励许多小而成功的变更，而不是鼓励限制总变更数量。
- en: Your goals should be to increase the rate of change while lowering the change
    failure rate.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你的目标应该是提高变更的速率，同时降低变更失败率。
- en: At this point, you might be wondering, how do I change my organization to foster
    this culture and reap all of these benefits? The next section will answer this
    for you.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你可能会想，我如何改变我的组织来促进这种文化，并获得所有这些好处？下一节将为你解答。
- en: Creating your ideal DevOps organization
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建理想的DevOps组织
- en: 'Well, maybe your organizational structure does not have to change at all. DevOps
    has to start with a cultural change: openness, empathy, and collaboration are
    values that need to be encouraged. But still, changing your organizational structure
    might help to accelerate this.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 或许，你的组织结构根本不需要改变。DevOps的开始需要一种文化变革：开放、同理心和协作是需要鼓励的价值观。但改变组织结构仍然可能有助于加速这一过程。
- en: Traditionally, developers and operators are often organized in disparate teams
    or even different departments—organized in teams with people that have a similar
    skill set and responsibility. A common change to organizations is changing this
    structure, by pivoting and organizing teams behind a common goal, a single product,
    or a group of features, for example.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，开发人员和运维人员通常被组织成不同的团队，甚至是不同的部门——他们在具有相似技能和责任的团队中工作。组织结构发生的一个常见变化是改变这种结构，通过调整并围绕共同目标、单一产品或一组功能来组织团队，例如。
- en: Now you will need teams with different skill sets and responsibilities, teams
    most likely with developers and operators. It is important to realize that forcing
    such a change upon these people might not be the best way forward. Often, it works
    best to start with changing the culture, encouraging cooperation, and then this
    organizational change might come about in a natural way.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将需要拥有不同技能和责任的团队，这些团队很可能会由开发人员和运维人员组成。重要的是要意识到，强行实施这种改变可能不是最佳的前进方式。通常，最有效的方法是从改变文化开始，鼓励合作，然后这种组织结构的变化可能会自然发生。
- en: Finally, it is important to recognize one anti-pattern at this point. Some companies
    are trying to implement DevOps by hiring specialized DevOps engineers and positioning
    them between development and operations, interacting with both. While this, at
    first, might seem like a good idea, this goes against the DevOps values. If you
    do this, you are not breaking silos down, but you are adding a third one. You
    are not decreasing the number of hand-offs, you are most likely increasing them.
    Also, collaboration between developers and operations is often not enhanced by
    separating them using another organizational structure and you might not see any
    increase in value to your end users at all.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，值得注意的是一个反模式。一些公司试图通过雇佣专门的 DevOps 工程师，并将其定位在开发和运维之间，与两者互动，从而实施 DevOps。虽然这最初看起来是个好主意，但它违背了
    DevOps 的价值观。如果这样做，你并没有打破壁垒，而是增加了第三个壁垒。你没有减少交接的次数，很可能会增加交接。此外，开发人员和运维人员之间的合作通常不会通过使用另一种组织结构来分隔而得到增强，你可能根本看不到用户价值的提升。
- en: Now that you know what DevOps is and you have a clear understanding of how you
    can form a DevOps team, it is time to explore how to start achieving your goals.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你知道了 DevOps 是什么，并且清楚了如何组建一个 DevOps 团队，是时候探索如何开始实现你的目标了。
- en: Exploring DevOps practices and habits
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 DevOps 实践和习惯
- en: 'Since you are not the first team going on this journey, you can learn from
    the experiences of those before you. One example is the Microsoft team that built
    Azure DevOps. Being in the rare position that they can use their own product for
    developing their product, they have learned a great deal about what makes DevOps
    successful. From this, they have identified seven key DevOps practices and seven
    DevOps habits that many successful DevOps teams share:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你并不是第一个走上这条路的团队，你可以从前人的经验中汲取教训。一个例子是微软的团队，他们构建了 Azure DevOps。由于他们处于一个罕见的位置，可以使用自己的产品来开发自己的产品，他们从中学到了很多关于使
    DevOps 成功的要素。从中，他们确定了七个关键的 DevOps 实践和七个 DevOps 习惯，这些习惯是许多成功的 DevOps 团队所共有的：
- en: '| **DevOps practices** | **DevOps habits** |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| **DevOps 实践** | **DevOps 习惯** |'
- en: '| Configuration management | Team autonomy and enterprise alignment |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 配置管理 | 团队自主性和企业对齐 |'
- en: '| Release management | Rigorous management of technical debt |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 发布管理 | 严格管理技术债务 |'
- en: '| Continuous integration | Focus on flow of customer value |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 持续集成 | 专注于客户价值流 |'
- en: '| Continuous deployment | Hypothesis-driven development |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 持续部署 | 假设驱动开发 |'
- en: '| Infrastructure as Code | Evidence gathered in production |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 基础设施即代码 | 在生产中收集的证据 |'
- en: '| Test automation | Live-site culture |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 测试自动化 | 现场文化 |'
- en: '| Application performance monitoring | Manage infrastructure as a flexible
    resource |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 应用性能监控 | 将基础设施作为灵活资源管理 |'
- en: Now it is important to realize that just copying the motions described will
    not guarantee success. Just as with Agile, you will have to spend time to really
    understand these practices and habits, where they come from, and what they contribute
    to a continuous flow of value to your end users.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，重要的是要意识到，单纯模仿这些步骤并不能保证成功。就像 Agile 一样，你需要花时间真正理解这些实践和习惯，它们的来源以及它们如何为终端用户提供持续的价值流。
- en: The following sections explore all of these practices and habits in more detail.
    Keep these in the back of your mind while reading the rest of this book. While
    the rest of this book will mostly focus on **technical means** of **how** to do
    things, do not forget that these are only means. The real value comes from mindset
    and creating a culture that is focused on creating a continuous flow of value
    to your customers.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下各节将更详细地探讨所有这些实践和习惯。在阅读本书的其余部分时，请将这些内容记在心里。虽然本书的其余部分将主要关注**技术手段**，即**如何**做事情，但不要忘记，这些只是手段。真正的价值来自于思维方式和创造一种文化，专注于为客户持续创造价值的流程。
- en: DevOps practices
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps实践
- en: This section discusses all seven DevOps practices in turn. As you will quickly
    see, they are highly related and it is quite hard to practice one without the
    other. For example, test automation is highly related to continuous integration
    and continuous deployment.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 本节依次讨论所有七种DevOps实践。正如你很快会发现的，它们彼此之间高度相关，很难做到单独实践其中之一。例如，测试自动化与持续集成和持续部署密切相关。
- en: In case you are planning to take the AZ-400 exam, mastering all of these practices
    and performing them using Azure DevOps will help you significantly.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算参加AZ-400考试，掌握所有这些实践并通过Azure DevOps进行实施，将对你大有帮助。
- en: Configuration management
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置管理
- en: Configuration management is about versioning the configuration of your application
    and the components it relies on, along with your application itself. Configuration
    is kept in source control and takes the form of, for example, JSON or YAML files
    that describe the desired configuration of your application. These files are the
    input for tools such as Ansible, Puppet, or PowerShell DSC that configure your
    environment and application. These tools are often invoked from a continuous deployment
    pipeline.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理是对你的应用程序及其所依赖组件的配置进行版本控制，同时也涉及到应用程序本身。配置保存在源代码控制中，通常以JSON或YAML文件的形式存在，描述了你应用程序的期望配置。这些文件是如Ansible、Puppet或PowerShell
    DSC等工具的输入，这些工具用来配置你的环境和应用程序。这些工具通常会在持续部署管道中调用。
- en: The desired state can also be reapplied at an interval, even if there are no
    changes made to the intended configuration. This way, it is ensured that the actual
    configuration stays correct and that manual changes are automatically revoked.
    We call this the *prevention of configuration drift*. Configuration drift occurs
    over time due to servers being added or removed over time, or manual, ad hoc interventions
    by administrators. Of course, this implies that intended updates to the configuration
    are done in source control and only applied using tools.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 即使没有对预期配置进行更改，期望状态也可以在间隔时重新应用。这样可以确保实际配置保持正确，并且手动更改会被自动撤销。我们称之为*防止配置漂移*。配置漂移是指由于随着时间推移服务器的增加或删除，或管理员进行的手动临时干预，配置发生变化。当然，这意味着预期的配置更新是在源代码控制中完成的，并且仅通过工具进行应用。
- en: Configuration management or configuration as code is highly related to infrastructure
    as code. The two are often intertwined and on some platforms, the difference between
    the two might even feel artificial. Configuration as code will be discussed in
    detail in [Chapter 6](d981a2b6-8bf4-4fb7-8a2e-ceff84691588.xhtml), *Infrastructure
    and Configuration as Code*.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 配置管理或称为“配置即代码”与“基础设施即代码”高度相关。两者经常交织在一起，在某些平台上，它们之间的差异甚至可能显得是人为的。关于“配置即代码”将在[第六章](d981a2b6-8bf4-4fb7-8a2e-ceff84691588.xhtml)《基础设施与配置即代码》中详细讨论。
- en: Release management
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布管理
- en: Release management is about being in control of which version of your software
    is deployed to which environment. Versions are often created using continuous
    integration and delivery pipelines. These versions, along with all of the configuration
    needed, are then stored as immutable artifacts in a repository. From here on,
    release management tools are used to plan and control how these versions are deployed
    to one or more environments. Example controls are manual approvals and automated
    queries of open work and quality checks before allowing deployment to a new environment.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 发布管理是关于控制哪一版本的软件被部署到哪个环境。版本通常是通过持续集成和交付管道创建的。这些版本以及所需的所有配置，随后作为不可变的工件存储在一个仓库中。从这里开始，发布管理工具用于计划和控制这些版本如何部署到一个或多个环境中。示例控制包括手动审批和自动查询开放工作项及质量检查，之后才允许部署到新的环境中。
- en: Release management is related to continuous deployment and focuses more on controlling
    the flow of versions through the continuous deployment pipeline. [Chapter 6](d981a2b6-8bf4-4fb7-8a2e-ceff84691588.xhtml),
    *Infrastructure and Configuration as Code*, will cover configuration as code as
    part of release management.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Continuous integration
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuous integration is a practice where every developer integrates their
    own work with that of the other developers in the team at least once a day and
    preferably more often. This means that every developer should push their work
    to the repository at least once a day and a continuous integration build verifies
    that their work compiles and that all unit tests run. It is important to understand
    that this verification should not run only on the code that the developer is working
    on in isolation. The real value comes when the work is also integrated with the
    work of others.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: When integrating changes often and fast, problems with merging changes are less
    frequent and if they occur, are often less difficult to solve. In [Chapter 2](2be30fb3-5e71-4180-9830-f119e5a6cd76.xhtml), *Everything
    Starts with Source Control*, you will learn more about how to set up your source
    control repositories to make this possible. In [Chapter 3](7dcfa6ee-1460-4c49-a156-58073b263c90.xhtml),
    *Moving to Continuous Integration*, you will learn about setting up a continuous
    integration build.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Continuous deployment
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Continuous deployment is the practice of automatically deploying every new version
    of sufficient quality to production. When practicing continuous deployment, you
    have a fully automated pipeline that takes in every new version of your application
    (every commit), results in a new release, and starts deploying it to one or more
    environments. The first environment is often called test and the final environment
    will be production.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: In this pipeline, there are multiple steps that verify the quality of the software,
    before letting it proceed to the next environment. If the quality is not sufficient,
    the release is aborted and will not propagate to the next environment. The premise
    behind this approach is that, in the pipeline, you try to prove that you cannot
    take the current version to the next environment. If you fail to prove so, you
    assume it is ready for further progression.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'Only when a release has gone through all environments in the pipeline, it is
    deployed to production. Whenever a release cannot progress to the next environment,
    that release will be completely canceled. While you might be inclined to fix the
    reason for the failure and then restart deployment from the point where it failed,
    it is important not to do so. The changes you made at that point are after all
    not validated by all of the controls that the version has already passed through.
    The only way to validate the new version as a whole is by starting the pipeline
    from the start. You can see this clearly in the following diagram:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a59af280-3b6e-4d6f-b46a-dbb6fd7d295c.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
- en: In [Chapter 4](8ab4597a-becd-4855-9b45-89045982c14a.xhtml), *Continuous Deployment*,
    you will learn about setting up continuous deployment using Azure DevOps Pipelines.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: The preceding diagram can be found at [https://en.wikipedia.org/wiki/Continuous_delivery#/media/File:Continuous_Delivery_process_diagram.svg](https://en.wikipedia.org/wiki/Continuous_delivery#/media/File:Continuous_Delivery_process_diagram.svg).
    The image is by Grégoire Détrez, original by Jez Humble, under CC BY-SA 4.0, at [https://creativecommons.org/licenses/by-sa/4.0/](https://creativecommons.org/licenses/by-sa/4.0/)
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Infrastructure as code
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When writing an application, the binaries that you are building have to be running
    somewhere, on some application host. An example of such an application host can
    be a web server such as IIS or Apache. Next to an application host, we might need
    a database and some messaging solution. All of this together we call the infrastructure
    for our application. When practicing infrastructure as code, you are keeping a
    description of this infrastructure in your source code repository, alongside your
    application code.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: When the time comes to release a new version of the application and you require
    one or more changes in the infrastructure, you are executing this description
    of your desired infrastructure using tools such as Chef, Puppet, PowerShell DSC,
    or Azure ARM templates. The execution of such a description is idempotent, which
    means that it can be executed more than once and the end result is the same. This
    is because your description of the infrastructure describes the *desired state*
    you want the infrastructure to be in and not a series of steps to be executed.
    Those steps to be executed, if there are any, are automatically determined by
    your tool of choice. Applying the desired state can also be done automatically
    in a continuous deployment pipeline and is often executed before updating the
    application code.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: The big advantage of this is that you can now easily create a new environment,
    where the infrastructure is guaranteed to be the same as in your other environments.
    Also, the problem of configuration drift, where the infrastructure between your
    different environment slowly diverges, is no longer possible since every time,
    you apply the desired state again to every environment and they are forced.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](d981a2b6-8bf4-4fb7-8a2e-ceff84691588.xhtml), *Infrastructure and
    Configuration as Code*, of this book will discuss infrastructure as code in more
    detail.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Test automation
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To continuously deliver value to your end users, you will have to release fast
    and often. This has implications for the way you test your application. You can
    no longer execute manual tests when you release your application every few minutes.
    This means that you have to automate as many of your tests as possible.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: You will most likely want to create multiple test suites for your applications
    that you run at different stages of your delivery pipeline. Fast unit tests that
    run within a few minutes and that are executed whenever a new pull request is
    opened should give your team very quick feedback on the quality of their work
    and should catch most of the errors. Next, the team should run one or more slower
    test suites later in the pipeline to further increase your confidence in the quality
    of a version of your application.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: All of this should limit the amount of manual testing to a bare minimum and
    allow you to automatically deploy new versions of your application with confidence.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](d86e8d08-7a5c-40da-978c-6dd7cb61c140.xhtml), *Continuous Testing*,
    of this book will cover test automation in detail.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Application performance monitoring
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This last practice is about learning all about how your application is doing
    in production. Gathering metrics such as response times and the number of requests
    will tell you about how the systems are performing. Capturing errors is also part
    of performance monitoring and allows you to start fixing problems without having
    to wait on your customers to contact you about them.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: In addition to that, you can gather information on which parts of the application
    are more or less frequently used and whether new features are being picked up
    by users. Learning about usage patterns provides you with great insights into
    how customers really use your applications and common scenarios they are going
    through.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](512f57dc-4126-4fb6-97e3-2dd0b6b06a04.xhtml), *Security and Compliance*,
    and [Chapter 10](bbccbc83-55fc-4fcf-b6a4-1721cdfea791.xhtml), *Application Monitoring*,
    will go into detail on learning about both your application and your users'' behavior
    in production.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: DevOps habits
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The seven habits of successful DevOps teams are more concerned with culture
    and your attitude while developing and delivering software and less with technical
    means than DevOps practices are. Still, it is important to know and understand
    these habits since they will help to make DevOps adoption easier.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: You will notice that developing these habits will reinforce the use of the practices
    enumerated previously and the tools you use to implement them. And of course,
    this holds the other way around as well.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: Team autonomy and enterprise alignment
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An important part of working Agile is creating teams that are largely self-directed
    and can make decisions without (too many) dependencies outside the team. Such
    a team will hence often include multiple roles, including a product owner that
    owns one or more features and is empowered to decide on the way forward with those.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: However, this autonomy also comes with the responsibility to align the work
    of the team with the direction the whole product is taking. It is important to
    develop ways of aligning the work of tens or hundreds of teams with each other,
    in such a way that everyone can sail their own course, but the fleet as a whole
    stays together as well.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: The best-case scenario is that teams take it upon themselves to align to the
    larger vision, instead of taking directions every now and then.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Rigorous management of technical debt
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another habit is that of rigorous management of technical debt. The term debt
    in itself suggests that there is a cost (interest) associated with the delay of
    addressing an issue. To keep moving at a constant pace and not slowly lose speed
    over time, it is crucial to keep the number of bugs or architectural issues to
    a minimum and only tolerate so much. Within some teams this is even formalized
    in agreements. For example, a team can agree that the number of unfixed bugs should
    never exceed the number of team members. This means, that if a team has four members
    and a ninth bug is reported that no new work will be undertaken until at least
    one bug should be fixed.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Focusing on flow of customer value
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is important to accept that users receive no value from code that has been
    written until they are actually using it. Focusing on the flow of value to a user
    means that code has to be written, tested, and delivered and should be running
    in production before you are done. Focusing on this habit can really drive cooperation
    between disciplines and teams.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: Hypothesis-driven development
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In many modern development methodologies, there is a product owner who is responsible
    for ordering all of the work in the backlog, based on the business value. This
    owner, as the expert, is responsible for maximizing the value delivered by the
    development team by ordering all items based on business value (divided by effort).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: However, recent research has shown that, even though the product owner is an
    expert, they cannot correctly predict which features will bring the most value
    to users. Roughly one third of the work from a team actually adds value for users,
    and even worse while, another third actually decreases value. For this reason,
    you can switch your backlog from features or user stories to the hypothesis you
    want to prove or disprove. You create only a minimal implementation or even just
    a hint of a feature in the product and then measure whether it is picked up by
    users. Only when this happens do you expand the implementation of the feature.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Evidence gathered in production
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Performance measurements should be taken in your production environment, not
    (just) in an artificial load test environment. There is nothing wrong with executing
    load tests before going to production if they deliver value to you. However, the
    real performance is done in the production environment. And it should be measured
    there and compared with previous measurements.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: This holds also for usage statistics, patterns, and many, many other performance
    indicators. They can all be automatically gathered using production metrics.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Live-site culture
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A live-site culture promotes the idea that anything that happens in the production
    environment takes precedence over anything else. Next, anything that threatens
    production, is about to go to production, or hinders going to production at any
    time gets priority. Only when these are all in order is the attention shifted
    to future work.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Also, a part of a live-site culture is ensuring that anything that disturbed
    the operation of the service is thoroughly analyzed—not to find out who to blame
    or fire but to find out how to prevent this from happening again. Prevention is
    preferably done by shifting left, for example, detecting an indicator of a repeat
    incident earlier in the pipeline.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: Managing infrastructure as a flexible resource
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, a successful DevOps team treats its servers and infrastructure as cattle,
    not as pets. This means that infrastructure is spun up when needed and disregarded
    as soon as it is not needed anymore. The ability to do this is fueled by configuration
    and infrastructure as code. This might even go so far as creating a new production
    environment for every new deployment and just deleting the old production environment
    after switching all traffic from the old environment to the new one.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: Besides keeping these DevOps practices and habits in mind, there are certain
    stages that you will go through while trying to move to a DevOps culture in your
    organization. The next section will take you through it.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Five stages of the DevOps evolution
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you are trying to move to a DevOps culture in your organization, this is
    going to take time. There are motions you have to go through while everyone in
    your organization embraces the changes they have to make to their individual way
    of working. Others that have gone before you have gone through the following five
    steps or stages that might help you. Knowing about them can help you to accelerate
    your own journey. These steps were first published in the *2018 State of DevOps
    Report* and are discussed in the following sections.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Normalizing the technology stack
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A common first step on the road to a DevOps culture is the adoption of Agile.
    At a minimum, there are good tools for source control, and often a company standard
    and continuous integration and delivery are being rolled out. Teams are also working
    together to normalize the stack they develop software for. For example, one or
    two cloud vendors are chosen and other deployment platforms are phased out. The
    same goes for tools for other purposes—they are standardized where possible. Homebrewed
    solutions are replaced with industry standards.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Standardizing and reducing variability
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this stage, teams work on further reducing the variation between and within
    applications and the development and operations teams that work on them, working
    together on aligning operating systems, libraries, and tools. Also, in this stage,
    deployment processes are changed to reduce the amount of variation between them
    and configuration and infrastructure are often moved to source control.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: Expanding DevOps practices
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remaining issues between development and operations are cleaned up, ensuring
    that outputs of the development team are precisely what the operations team expects.
    Also, collaboration starts to grow between the two and they are able to work together
    without external dependencies on creating and delivering changes.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Automating infrastructure delivery
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this stage, the infrastructure that is used by developers and operations
    becomes fully aligned. Everything is deployed from source control and the same
    scripts are being used by both teams.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: Providing self-service capabilities
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before DevOps, virtual machines or hosting environments were often requested
    from operations, by developers manually or through ticketing systems. Provisioning
    was done manually by operators, which could take days or sometimes even weeks.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Self-service capabilities means that environments are no longer created manually,
    but through self-service API's that operations teams make available to developers.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: This way, developers are fully able to create and destroy environments on their
    own. They can create and test changes on their own and send them off or schedule
    them for automated deployment.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned what DevOps is (and what it is not) and its relation
    to Agile. Moving to a DevOps culture helps you to break down conflicting targets
    for developers on one side and operators on the other side. This to empower them
    to work together on continuously delivering value to your end users, organizing
    their work in a single backlog and working off a single board, while respecting
    the differences in their ways of working. Organizing developers and operators
    in product-oriented teams is the next important step in creating like-minded,
    goal-oriented teams.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Moving to DevOps can bring many benefits and you now know how these can be measured
    to continuously keep improving. Next, you learned about the DevOps habits and
    practices that many successful DevOps team exhibit. Mastering these yourself and
    with your team will enable you to go through your own DevOps evaluation. All this
    is with the aim to continuously deliver value to your users.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will discuss the topic of source control and how to organize
    your application sources to enable DevOps flows.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we conclude, here is a list of questions for you to test your knowledge
    regarding this chapter''s material. You will find the answers in the *Assessments*
    section of the Appendix:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: 'True or false: Development and operations departments often have conflicting
    goals.'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or false: The seven DevOps practices discussed in this chapter are unrelated
    and one can be easily practiced without the other.'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following is not a part of the five stages of DevOps evolution?
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Normalizing the technology stack
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Automating infrastructure delivery
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Standardizing and reducing variability
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Hiring a group of DevOps engineers to automate the delivery of applications
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is fastlaning?
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Describe in your own words, in a few lines, what the essence of DevOps is.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many other resources that you might find helpful to learn more about
    DevOps culture and the DevOps way of thinking. Some of them are as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '*The Phoenix Project*, by Gene Kim, Kevin Behr, and George Spafford'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Effective DevOps*, by Jennifer Davis and Katherine Daniels'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Accelerate*, by Nicole Forsgren, Jez Humble and Gene Kim'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Interview with Sam Guckenheimer*, available at [https://devops.com/11626/](https://devops.com/11626/)'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Microsoft Case Study on their DevOps Journey*, available at [http://stories.visualstudio.com/devops/](http://stories.visualstudio.com/devops/)'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *2018 State of DevOps Report*, available at [http://info.puppet.com/Eficode-Puppet-State-of-DevOps-Report.html](http://info.puppet.com/Eficode-Puppet-State-of-DevOps-Report.html)
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More information on assessing existing development processes can be found at
    [https://docs.microsoft.com/en-us/learn/modules/assess-your-development-process/index](https://docs.microsoft.com/en-us/learn/modules/assess-your-development-process/index)
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More information about different Agile approaches and how to support them using
    Azure Boards can be found at [https://docs.microsoft.com/en-us/learn/modules/choose-an-agile-approach/index](https://docs.microsoft.com/en-us/learn/modules/choose-an-agile-approach/index)
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
