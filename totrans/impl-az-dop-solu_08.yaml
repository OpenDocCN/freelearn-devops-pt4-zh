- en: Infrastructure and Configuration as Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础设施和配置作为代码
- en: In the previous chapter, the focus was on storing and building application code
    and releasing the created binaries. You learned how to create a pipeline, from
    source control to a target environment for the automated, repeatable deployment
    of your applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，重点是存储和构建应用程序代码以及发布创建的二进制文件。您学习了如何创建一个流水线，从源代码控制到目标环境，自动重复部署您的应用程序。
- en: In this chapter, you will learn how to apply the same principles to the infrastructure
    that your application runs on and the runtime configuration of your application.
    Doing so will help you to further increase the speed at which changes can be delivered
    to production, increasing the flow of value to your end users.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何将相同的原则应用于运行应用程序的基础设施和运行时配置。这样做将帮助您进一步提高向生产环境交付变更的速度，增加向最终用户提供价值的流量。
- en: This chapter will start off by explaining the value of having everything, infrastructure
    and configuration included, as code. Next, it continues by explaining ARM templates.
    The syntax will be explained, as well as how to deploy ARM templates. Then, it
    proceeds to explain the Azure Automation offering, available in the Azure Cloud.
    Azure Automation can be used for running scripts on a schedule or for loading
    and applying PowerShell DSC modules. Next up is managing application settings
    for PaaS offerings, such as Azure App Service. Finally, it concludes by discussing
    several other tools that have similar capabilities.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将首先解释将所有内容（包括基础设施和配置）作为代码的价值。接下来，它继续解释 ARM 模板。将解释语法以及如何部署 ARM 模板。然后，它继续解释
    Azure 云中提供的 Azure 自动化。Azure 自动化可用于按计划运行脚本或加载和应用 PowerShell DSC 模块。接下来是管理 PaaS
    提供的应用程序设置，例如 Azure 应用服务。最后，它讨论了几种具有类似功能的其他工具。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Having everything as code
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所有内容作为代码
- en: Working with ARM templates
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 ARM 模板
- en: Deploying ARM templates
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署 ARM 模板
- en: Reverse engineering a template
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反向工程模板
- en: Using Azure Automation
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Azure 自动化
- en: Managing application settings
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理应用程序设置
- en: Other tools
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他工具
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To experiment with one or more of the technologies described in this chapter,
    one or more of the following may be required:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要实验本章描述的一个或多个技术，可能需要以下一个或多个：
- en: An Azure subscription, for executing ARM templates and running Azure Automation
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 订阅，用于执行 ARM 模板和运行 Azure 自动化
- en: PowerShell with the Azure PowerShell modules, for executing ARM templates, available
    from [https://docs.microsoft.com/en-us/powershell/azure/install-az-ps](https://docs.microsoft.com/en-us/powershell/azure/install-az-ps)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PowerShell 与 Azure PowerShell 模块，用于执行 ARM 模板，可从 [https://docs.microsoft.com/zh-cn/powershell/azure/install-az-ps](https://docs.microsoft.com/zh-cn/powershell/azure/install-az-ps)
    获取
- en: The Azure CLI, for executing ARM templates, available from [https://docs.microsoft.com/en-us/powershell/azure/install-az-ps](https://docs.microsoft.com/en-us/powershell/azure/install-az-ps)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure CLI，用于执行 ARM 模板，可从 [https://docs.microsoft.com/zh-cn/powershell/azure/install-az-ps](https://docs.microsoft.com/zh-cn/powershell/azure/install-az-ps)
    获取
- en: One or more virtual machines for experimenting with the different tools discussed
    in this chapter
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个或多个虚拟机，用于实验本章讨论的不同工具
- en: Having everything as code
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将所有内容作为代码
- en: If you have been responsible for creating and maintaining application infrastructure
    and configuration in the past, you have most likely experienced what is called
    **configuration drift***.* Configuration drift is the name for the phenomenon
    where the configuration between servers in acceptance and the production environment
    differs. Or, even worse, when having multiple servers in the production environment,
    it might be the case that the configuration of these is not always the same.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您过去负责创建和维护应用程序基础设施和配置，您很可能已经经历了所谓的**配置漂移***。*配置漂移是指接受和生产环境中服务器配置之间存在差异的现象。或者，更糟糕的是，在生产环境中有多台服务器时，这些服务器的配置可能并不总是相同。
- en: The most common cause of configuration drift is manual change. When making changes
    manually, maybe under the pressure of a production issue, there is always the
    risk that you apply different settings to different servers or hosts. And if you
    ever need to scale out and add another server to your production environment,
    the chance of that server taking on the same configuration of all already existing
    servers is very slim.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 配置漂移的最常见原因是手动更改。在手动更改时，可能是在生产问题的压力下进行，始终存在将不同设置应用于不同服务器或主机的风险。如果你需要扩展并向生产环境中添加另一台服务器，且这台服务器需要与所有已存在服务器采用相同配置的可能性非常小。
- en: With **Infrastructure as Code** (**IaC**) and **Configuration as Code** (**CaC**),
    you no longer make changes to application configuration and infrastructure by
    hand, but only through automation. The first step to do this is specifying the
    desired state of configuration and infrastructure. The desired state is then fed
    into configuration management tooling that enforces this configuration on your
    infrastructure. Specifying only the desired state is called a *declarative* approach,
    which differs from an *imperative* approach, where you specify all of the steps
    that need to be taken.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通过**基础设施即代码**（**IaC**）和**配置即代码**（**CaC**），你不再手动更改应用配置和基础设施，而是通过自动化来完成。实现这一目标的第一步是指定所需的配置和基础设施状态。然后，将所需状态输入配置管理工具，工具会在你的基础设施上强制执行该配置。只指定所需状态被称为*声明性*方法，与*命令性*方法不同，后者需要指定所有需要执行的步骤。
- en: These tools are often also capable of checking the current state of your infrastructure
    and configuration on a regular interval and reapplying your desired state if any
    deviation is detected. This is possible due to the declarative approach. This
    makes applying configuration an idempotent operation. An operation is idempotent
    if it can be repeated one or more times, while the outcome will remain the same.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具通常还能够定期检查你的基础设施和配置的当前状态，并在检测到任何偏差时重新应用所需的状态。这是由于声明性方法的存在。这使得应用配置成为一个幂等操作。如果一个操作是幂等的，意味着它可以重复执行一次或多次，而结果始终保持一致。
- en: When adopting IaC and CaC, you can even go so far as to recreate the complete
    infrastructure before deploying an application, deploy the application on that
    new infrastructure, and then disregard the old infrastructure after switching
    to the new deployment. This is an extreme form of immutable servers. The added
    benefit of this approach is that you are now guaranteed that there will be no
    traces from any configuration or binaries from the previous deployment.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在采用IaC和CaC时，你甚至可以在部署应用程序之前重新创建完整的基础设施，先在新基础设施上部署应用程序，然后在切换到新部署后放弃旧的基础设施。这是一种极端形式的不变服务器。这种方法的附加好处是，你现在可以确保不再留下任何来自上一次部署的配置或二进制文件痕迹。
- en: In the following sections, you will learn about different IaC technologies and
    how to use them. It is important to understand that they are complementary and
    are often used together. For example, ARM templates can be used to create virtual
    machines in Azure and, once that is done, PowerShell DSC or Ansible can be used
    to configure those virtual machines.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，你将了解不同的IaC技术以及如何使用它们。理解它们是互补的，并且通常一起使用非常重要。例如，ARM模板可用于在Azure中创建虚拟机，完成后可以使用PowerShell
    DSC或Ansible来配置这些虚拟机。
- en: Working with ARM templates
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ARM模板
- en: 'When working on the Azure platform, infrastructure is described using **Azure
    Resource Manager** (**ARM**) templates. ARM templates are written in JSON and
    a skeleton template looks as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在Azure平台上工作时，基础设施使用**Azure资源管理器**（**ARM**）模板进行描述。ARM模板是用JSON编写的，骨架模板如下所示：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The template itself is, at the highest level, a JSON object. There is a mandatory
    property, `$schema`, for which the shown value is also mandatory. The `contentVersion`
    property is also mandatory and can be specified to version the contents. This
    version can be used by the author to version the template if necessary.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 模板本身在最高层次上是一个JSON对象。`$schema`是一个必需的属性，其显示的值也是强制性的。`contentVersion`属性也是必需的，并且可以用于为内容指定版本。如果需要，作者可以使用此版本来版本化模板。
- en: The rest of this chapter will discuss the different parts that make up ARM templates
    in more detail. There is also an online reference available, to which a link is
    added at the end of this chapter. A link to the formal, detailed breakdown of
    the structure and syntax of ARM templates is also added at the end of this chapter.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的其余部分将更详细地讨论构成 ARM 模板的不同部分。章节末尾还提供了在线参考链接，此外，还附加了 ARM 模板结构和语法的正式详细解析链接。
- en: Parameters
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参数
- en: 'Every template has to start with a parameters section. This section takes the
    shape of a JSON object, which can be empty but cannot be left out. The use of
    this section is to declare one or more parameters that can be specified by the
    caller of the ARM template, before deploying it. A common reason for using the
    parameters section is to use the same template for both the test and production
    environment, but varying the names of resources between the two. An example parameters
    section might look like this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模板必须以一个参数部分开始。该部分采用 JSON 对象的形式，可以为空，但不能省略。此部分的用途是声明一个或多个可以由 ARM 模板调用者在部署前指定的参数。使用参数部分的常见原因是使用相同的模板，但在测试环境和生产环境之间更改资源名称。一个示例的参数部分可能如下所示：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For every parameter, a new key is specified with the parameter's name. The value
    is an object. This object has one mandatory key, `type`. The allowed values for
    type are `string`, `int`, `bool`, `object`, `array`, `secureString`, and `secureObject`.
    The `secureString` and `secureObject` variations can be used to make sure that
    the runtime values of these parameters are scrubbed from any log and output. They
    are intended to hold passwords, keys, or other secrets.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个参数，指定一个新键，键名为参数的名称。值是一个对象。该对象有一个必需的键，`type`。`type` 的允许值为 `string`、`int`、`bool`、`object`、`array`、`secureString`
    和 `secureObject`。`secureString` 和 `secureObject` 类型用于确保这些参数的运行时值不会出现在任何日志和输出中。它们用于存储密码、密钥或其他机密信息。
- en: The metadata object, with the `description` key, is optional and can be used
    to add a description to the parameter for future reference.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 元数据对象，带有 `description` 键，这是可选的，可以用来为参数添加描述，以供将来参考。
- en: 'Other properties that can be specified on a parameter object are the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 其他可以在参数对象上指定的属性如下：
- en: '`minValue` and `maxValue` for specifying bounds on an integer value'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minValue` 和 `maxValue` 用于指定整数值的范围'
- en: '`minLength` and `maxLength` for specifying bounds on the length of a string
    value'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minLength` 和 `maxLength` 用于指定字符串值的长度范围'
- en: '`defaultValue` for specifying a default value that will be used if no value
    is specified when applying the template'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`defaultValue` 用于指定如果在应用模板时未指定值，将使用的默认值'
- en: '`allowedValues` for specifying an array of allowed values, limiting valid inputs'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`allowedValues` 用于指定允许值的数组，限制有效的输入值'
- en: Next, let's understand what parameter files are.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们了解一下什么是参数文件。
- en: Parameter files
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参数文件
- en: 'One way for specifying the parameter values when deploying a template is through
    a variable file. Often, a single template is accompanied by more than one parameter
    file, for example, one for test and one for production. The JSON for a parameter
    file appears as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署模板时指定参数值的一种方式是通过变量文件。通常，一个模板会附带多个参数文件，例如一个用于测试，另一个用于生产。一个参数文件的 JSON 格式如下所示：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Just like an ARM template, every parameter file is a JSON object with mandatory
    `$schema` and `contentVersion` properties. The third property parameter is used
    to specify one or more parameter values. For each parameter, specify its name
    as the key and an object as the value. This object can hold the `value` key for
    providing the actual value of the parameter.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 与 ARM 模板一样，每个参数文件都是一个 JSON 对象，具有必需的 `$schema` 和 `contentVersion` 属性。第三个属性参数用于指定一个或多个参数值。对于每个参数，指定其名称作为键，并将一个对象作为值。该对象可以包含
    `value` 键，用于提供参数的实际值。
- en: 'While very valuable for specifying names for resources, scaling options, and
    other things that have to vary between environments, this solution is not useful
    for secrets. Keys, passwords, and other secrets should not be stored as plaintext
    in source control in a parameter file. For secrets, another notation is available:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管指定资源名称、扩展选项以及其他在不同环境中需要变化的内容时非常有用，但此解决方案不适用于存储机密。密钥、密码和其他机密信息不应作为明文存储在源代码控制的参数文件中。对于机密信息，可以使用另一种表示方式：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: With this notation, instead of specifying the value directly, there is a pointer
    to a location in an Azure key vault where the correct value is stored. When deploying
    the template, this secret is (within Azure!) taken from the key vault and used
    in deployment. This is allowed only if the user or service starting the deployment
    has either an owner or contributor role in relation to the key vault and the key
    vault is enabled for template deployment.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种表示法时，不是直接指定值，而是指向Azure密钥库中存储正确值的位置。部署模板时，此密钥将在Azure中从密钥库中取出并用于部署。只有在启动部署的用户或服务具有密钥库的所有者或贡献者角色，并且密钥库启用了模板部署时，才允许这样做。
- en: Strictly speaking, any role that includes the `Microsoft.KeyVault/vaults/deploy/action`
    permission will work. By default, these are the owner and contributor roles, but
    you can create custom roles that include this action as well.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 严格来说，任何包含`Microsoft.KeyVault/vaults/deploy/action`权限的角色都可以使用。默认情况下，这些角色是所有者和贡献者角色，但你也可以创建包含此操作的自定义角色。
- en: Variables
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量
- en: 'The variables section is used to specify one or more values that will be used
    throughout the template. A common approach is building the names of all resources
    in the variables section, based on a single parameter called `environmentName`.
    This ensures that resources will have the same name between environments. Variables
    are also used to specify values that cannot be specified from outside the template,
    but should be recognized as configurable. An example might look like this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 变量部分用于指定在整个模板中将使用的一个或多个值。一种常见的方法是在变量部分根据一个名为`environmentName`的单一参数构建所有资源的名称。这确保了资源在不同环境中具有相同的名称。变量还用于指定无法从模板外部指定的值，但应视为可配置的。例如，可能会是这样的：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Please note that the example for `appServiceName` contains functions that are
    discussed in detail in a later section called *Functions.*
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`appServiceName`的示例包含了在后面名为*函数*的部分中详细讨论的函数。
- en: Resources
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源
- en: 'The third section in any ARM template is the resources section. This is the
    main part of the template, where all of the resources to be created are specified.
    This section is the only one that is not an object, but an array. Within that
    array, one or more objects of the following form are specified:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 任何ARM模板中的第三部分是资源部分。这是模板的主要部分，所有要创建的资源都在此部分指定。这个部分是唯一一个不是对象，而是数组的部分。在该数组内，会指定一个或多个以下形式的对象：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Each resource is specified in the form of an object. The first four properties
    are mandatory for every type of resource:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 每个资源都以对象的形式指定。前四个属性是每种资源类型必需的：
- en: 'The type of the resource to be created or updated needs to be specified: This
    takes the form of the name of `resourceprovider` followed by a slash and the name
    of a resource type that belongs to that `resourceprovider`.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要指定要创建或更新的资源类型：这通常由`resourceprovider`的名称后跟一个斜杠，再加上该`resourceprovider`下属于的资源类型名称组成。
- en: 'The version of the API to use for this resource: A list of supported API versions
    can be retrieved from the reference.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于此资源的API版本：可以从参考中获取受支持的API版本列表。
- en: 'The name for the resource: Every resource type has its own rules for determining
    what a valid name is. These can also be found in the reference.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源的名称：每个资源类型都有自己的规则来确定有效名称的标准。这些规则也可以在参考文献中找到。
- en: 'The Azure Region where the resource is to be created: This must be a valid
    Azure Region.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建资源的Azure区域：这必须是有效的Azure区域。
- en: All other properties on the object vary from resource type to resource type
    and are all specified in the resource.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对象上的其他属性根据资源类型不同而不同，所有这些属性都在资源中指定。
- en: Dependent resources
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖资源
- en: 'A special type of resource is the dependent resource. For example, SQL databases
    are hosted on a SQL Server and Service Bus Topics are located within a Service
    Bus namespace. For a nested resource type, the type and name reflect this nesting:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一种特殊类型的资源是依赖资源。例如，SQL数据库托管在SQL Server上，Service Bus Topics位于Service Bus命名空间中。对于嵌套资源类型，类型和名称反映了这种嵌套关系：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Next to nesting the type and the name, the extra property, `dependsOn`, is also
    mandatory to specify that this nested resource can only be created after the containing
    resource exists. A location property is not necessary since this will be inherited
    from the containing resource.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 除了嵌套类型和名称外，额外的属性`dependsOn`也是必需的，用于指定此嵌套资源只能在包含资源存在后创建。位置属性不是必需的，因为它将从包含资源中继承。
- en: Nested templates
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌套模板
- en: 'A second special type of resource is template deployment. This way, one template
    can trigger the deployment of another. An example of defining a template deployment
    as a resource in a template looks as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种特殊类型的资源是模板部署。通过这种方式，一个模板可以触发另一个模板的部署。以下是将模板部署定义为模板中的资源的示例：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The locations of the template and parameter file can be specified using both
    HTTP and HTTPS, but have to be publicly accessible locations. As an alternative,
    a single property template can be specified. This should then contain a whole
    template as a JSON object.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 模板和参数文件的位置可以通过HTTP和HTTPS来指定，但必须是公开可访问的位置。作为替代方案，也可以指定一个单一的属性模板。该模板应包含一个完整的JSON对象作为模板。
- en: Outputs
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 输出
- en: The fourth and final section of a template is the outputs section. Here are
    the keys returned to the caller of the template. The caller can use these values
    to start another task or script and use one or more of the values created or used
    by the template.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 模板的第四个也是最后一个部分是输出部分。这里包含了返回给模板调用者的键。调用者可以使用这些值来启动另一个任务或脚本，并使用模板创建或使用的一个或多个值。
- en: 'The main use for this is to prevent hardcoding names in downstream automation.
    The outputs section is a JSON object of the following format:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个部分的主要用途是防止在下游自动化中硬编码名称。输出部分是一个JSON对象，格式如下：
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When specifying outputs, the same types can be used as for parameters. Of course,
    it does not make much sense hardcoding the values, so functions are used to retrieve
    values from parameters, variables, or even created resources.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在指定输出时，可以使用与参数相同的类型。当然，硬编码值没有太大意义，因此使用函数从参数、变量甚至是创建的资源中获取值。
- en: Functions
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数
- en: 'Functions are used to allow for dynamic evaluation of properties in ARM templates.
    Calling functions uses a notation very similar to that of many programming languages:
    `functionName(arg1, arg2, …)` functions can return either a value such as `string`
    or `int` or an object or array. When an object is returned, any property can be
    accessed using the `.propertyName` notation*.* Accessing elements in an array
    can be done using `[position]`. To indicate which parts of a string should be
    evaluated as a function, they can be enclosed in brackets:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 函数用于允许在ARM模板中动态评估属性。调用函数的语法与许多编程语言非常相似：`functionName(arg1, arg2, …)` 函数可以返回一个值，如`string`或`int`，也可以返回一个对象或数组。当返回一个对象时，可以使用`.propertyName`符号访问任何属性。访问数组中的元素可以使用`[position]`。为了标明字符串的哪些部分应作为函数进行评估，可以将其放入括号中：
- en: '[PRE9]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The preceding example shows two example functions. First, the `concat` function
    is called to concatenate two string values. One is hardcoded and the other one
    is the result of a second function call to retrieve the value of a template parameter.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的示例展示了两个示例函数。首先，调用`concat`函数来连接两个字符串值。一个是硬编码的，另一个是第二个函数调用的结果，用于获取模板参数的值。
- en: There are a fair number of functions available. They can be used for string
    manipulation, for retrieving details about the current subscription, resource
    group, or Azure Active Directory tenant, or for getting resource details.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 有相当多的可用函数。它们可以用于字符串操作、获取当前订阅、资源组或Azure Active Directory租户的详细信息，或获取资源的详细信息。
- en: Functions can also be used to retrieve account keys or other secrets. This is
    often done to automatically insert keys directly from the service that exposes
    the key to application settings or a key vault. This completely eliminates the
    need for the manual transfer of secrets.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 函数还可以用于获取帐户密钥或其他机密。通常，这样做是为了直接从暴露密钥的服务将密钥自动插入应用程序设置或密钥保管库中。这完全消除了手动传输机密的需求。
- en: Well, so far, we have learned the different parts that make up an ARM template,
    which you should be able to write on your own. Now it's time to learn how we can actually deploy
    them with the help of various tools.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了组成ARM模板的不同部分，你应该能够自己编写这些模板。接下来，我们将学习如何利用各种工具来实际部署它们。
- en: Deploying ARM templates
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署ARM模板
- en: Once an ARM template and its accompanying parameter files are written, they
    can be applied to an Azure environment. There are PowerShell Cmdlet and Azure
    CLI commands available for applying an ARM template from a scripting environment.
    When ARM templates are used for the infrastructure of an application, Azure Pipelines
    can be used for deploying not only code but also ARM templates.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 ARM 模板及其附带的参数文件编写完成，就可以将其应用于 Azure 环境。PowerShell Cmdlet 和 Azure CLI 命令可用于从脚本环境应用
    ARM 模板。当 ARM 模板用于应用程序的基础设施时，Azure Pipelines 可用于部署不仅仅是代码，还可以是 ARM 模板。
- en: No matter which approach is used for deployment, all of them will have a *deployment
    mode*. This can be either *incremental* or *complete*. In incremental mode, all
    resources specified in the template will be created in Azure or their properties
    will be updated if the resource already exists. In complete mode, all resources
    that are not specified in the template and already exist in Azure will also be
    removed. The default deployment mode is incremental.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 无论使用哪种部署方法，所有方法都将有一个*部署模式*。这可以是*增量*模式或*完全*模式。在增量模式下，模板中指定的所有资源将在 Azure 中创建，或者如果资源已经存在，则更新其属性。在完全模式下，所有模板中未指定且已存在于
    Azure 中的资源也将被删除。默认部署模式为增量模式。
- en: In the next sections, several tools for executing deployments are discussed,
    starting with PowerShell.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将讨论几种用于执行部署的工具，首先从 PowerShell 开始。
- en: PowerShell
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PowerShell
- en: 'For local development and testing of ARM templates on a local machine, Powershell
    has a quick command to apply an ARM template to a resource group:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于在本地机器上进行 ARM 模板的本地开发和测试，PowerShell 提供了一个快速命令来将 ARM 模板应用于资源组：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The preceding command will pick up the specified template and parameter file
    and apply it to the specified resource group. This command assumes that the current
    session has already been logged in to Azure.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将获取指定的模板和参数文件，并将其应用于指定的资源组。此命令假设当前会话已经登录到 Azure。
- en: 'There are a few variations on the command available:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种可用的命令变体：
- en: A parameter called `-Mode` with a `Complete` or `Incremental` value is available.
    This can be used to specify `deploymentmode`.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个名为`-Mode`的参数，具有`Complete`或`Incremental`值。可以用来指定`deploymentmode`。
- en: If no parameter file is specified and the template requires parameters, the
    cmdlet will prompt for these values on the command line.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未指定参数文件并且模板需要参数，则该命令将提示在命令行上输入这些值。
- en: As an alternative, the `-TemplateUri` and `-TemplateParametersUri` options can
    be used to specify the location of the template and parameters to be retrieved
    from another location.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为替代，可以使用`-TemplateUri`和`-TemplateParametersUri`选项来指定从另一个位置检索模板和参数的位置。
- en: The next tool that we'll look into is the Azure CLI.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将讨论的工具是 Azure CLI。
- en: The Azure CLI
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure CLI
- en: 'The Azure CLI is another way of deploying ARM templates from the command line.
    The benefit of the CLI is that it is completely cross-platform and runs on Windows,
    macOS, and Linux. The Azure CLI command for deploying an ARM template is as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Azure CLI 是另一种从命令行部署 ARM 模板的方法。CLI 的好处在于它是完全跨平台的，可以在 Windows、macOS 和 Linux 上运行。用于部署
    ARM 模板的 Azure CLI 命令如下：
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: All other options that are available in PowerShell are also available in the
    CLI.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell 中可用的所有其他选项在 CLI 中也都可以使用。
- en: Azure Pipelines
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Pipelines
- en: 'A third mechanism for deploying ARM templates is from an Azure pipeline. This
    is particularly useful for deploying the infrastructure and configuration of an
    application, together with the binaries. To deploy an ARM template deployment
    from a pipeline, at least one service connection of the Azure Resource Manager
    needs to be configured. After doing this, a pipeline can be configured as shown
    in the following screenshot:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 部署 ARM 模板的第三种机制是通过 Azure pipeline。这对于部署应用程序的基础设施和配置以及二进制文件特别有用。要从 pipeline 部署
    ARM 模板部署，需要配置至少一个 Azure Resource Manager 的服务连接。完成此配置后，可以按照以下截图配置 pipeline：
- en: '![](img/42359bf4-5736-4d18-9c5a-ae9f83e6bd0a.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/42359bf4-5736-4d18-9c5a-ae9f83e6bd0a.png)'
- en: In this example, there are two deployments of an ARM template, surrounding the
    deployment of the application code. The first deployment is of the incremental type,
    while the second deployment is of the complete type. Using this approach, the
    first deployment will create all new infrastructure needed by the new version
    of the application. This deployment is done in incremental mode, so infrastructure
    that is no longer present in the template but still in use by the currently deployed
    version of the application will not yet be removed. The second deployment will
    take care of removing these elements after the new version of the code is deployed.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，有两个 ARM 模板的部署，围绕着应用程序代码的部署展开。第一个部署是增量类型，而第二个部署是完整类型。使用这种方法，第一个部署将创建新版本应用程序所需的所有新基础设施。该部署以增量模式进行，因此模板中不再存在，但当前已部署版本的应用程序仍在使用的基础设施将不会被删除。第二个部署将在新版本代码部署后负责删除这些元素。
- en: Reverse engineering a template
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反向工程模板
- en: 'Writing an ARM template from scratch can be a tedious and time-consuming task.
    Luckily, there are two approaches available to generate an ARM template from existing
    infrastructure:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 从头开始编写 ARM 模板可能是一项繁琐且耗时的任务。幸运的是，有两种方法可以从现有基础设施生成 ARM 模板：
- en: Using the Export template
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用导出模板
- en: Using the Resource Explorer
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用资源浏览器
- en: Let's discuss both of these in the upcoming subsections.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的子章节中，我们将讨论这两种方法。
- en: Using the Export template
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用导出模板
- en: 'The first approach is using the Export template option that can be found on
    every resource and resource group in the Azure portal. This will generate an ARM
    template of the current state of the resource (group), as shown in the following
    screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法是使用在 Azure 门户中每个资源和资源组上都能找到的“导出模板”选项。这将生成资源（组）当前状态的 ARM 模板，如下截图所示：
- en: '![](img/aeb90981-6db5-4157-8cc0-73b0343b28c5.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aeb90981-6db5-4157-8cc0-73b0343b28c5.png)'
- en: Please note that not every service currently supports reverse engineering an
    ARM template using this approach. For any service not supported, there will be
    a warning at the top of the screen. To work around this limitation for retrieving
    the JSON template for an individual resource, there is another approach, which
    is our next topic of discussion.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，并非所有服务目前都支持使用此方法进行反向工程提取 ARM 模板。对于任何不支持的服务，屏幕顶部会显示警告。为了绕过这一限制并提取单个资源的 JSON
    模板，还有另一种方法，这是我们接下来的讨论主题。
- en: Using the Resource Explorer
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用资源浏览器
- en: 'For retrieving the JSON template for an individual resource, we can use the
    Resource Explorer*.* The Resource Explorer is shown here and can be found in the
    Azure portal by using the menu (*1*):'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提取单个资源的 JSON 模板，我们可以使用资源浏览器*.* 资源浏览器如图所示，并且可以通过 Azure 门户中的菜单 (*1*) 找到：
- en: '![](img/3d56d466-61da-447d-9993-0da540143b9b.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3d56d466-61da-447d-9993-0da540143b9b.png)'
- en: After opening the resource explorer, two new panes open up. The left pane can
    be used to navigate through subscriptions and drill down into the resource groups,
    down to the individual resources. For every element that is selected, the corresponding
    JSON will be displayed on the right. In the preceding example, the JSON for a
    hard disk is shown. This JSON is the same as the JSON that can be used in the
    resources array of an ARM template.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 打开资源浏览器后，会打开两个新的窗格。左侧窗格可以用来浏览订阅，并逐层深入资源组，直到找到单个资源。每当选择一个元素时，相应的 JSON 将显示在右侧。在上述示例中，显示的是硬盘的
    JSON。这个 JSON 与可以在 ARM 模板的资源数组中使用的 JSON 是一样的。
- en: Subscription-level templates
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 订阅级模板
- en: 'The discussion of ARM templates up to this point has all been about ARM templates
    for a resource group deployment. A template describes one or more resources that
    are deployed to a resource group. Additionally, there are also subscription-level
    templates. An example ARM template for a resource group is shown as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，关于 ARM 模板的讨论都集中在资源组部署的 ARM 模板上。模板描述了一个或多个部署到资源组的资源。此外，还有订阅级模板。以下是一个资源组的
    ARM 模板示例：
- en: '[PRE12]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The format for a subscription template is completely the same as that for a
    resource group. The differences are `$schema`, which points to another schema
    location, and the types of resources that are supported. Subscription templates
    do not support the creation of resources directly, and support only the creation
    of resource groups, the initiation of template deployments, creating and assigning
    Azure Policies, and the creation of role assignments.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 订阅模板的格式与资源组的格式完全相同。不同之处在于 `$schema`，它指向另一个模式位置，以及所支持的资源类型。订阅模板不支持直接创建资源，仅支持创建资源组、启动模板部署、创建和分配
    Azure 策略以及创建角色分配。
- en: Azure Blueprints
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure 蓝图
- en: 'Next to subscription level-templates, there is also another offering available:
    Azure Blueprints. Blueprints can be used to describe the desired state of an Azure
    subscription and apply that to an existing subscription.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 除了订阅级别模板，还有另一种可用的选项：Azure 蓝图。蓝图可以用来描述 Azure 订阅的期望状态，并将其应用于现有订阅。
- en: 'All of the things that can be done using a blueprint can nowadays also be done
    using an ARM template. However, the other way around is not true. Azure Blueprints
    only support the following constructs, which are called artifacts:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用蓝图可以完成的所有任务，如今也可以通过 ARM 模板来实现。然而，反过来就不成立。Azure 蓝图仅支持以下称为工件的构造：
- en: Policy assignments
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 策略分配
- en: Role (RBAC) assignments
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 角色（RBAC）分配
- en: Resource group creation
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源组创建
- en: Nested ARM templates at the subscription or resource group level
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订阅或资源组级别的嵌套 ARM 模板
- en: These are all of the elements that are needed to build the default layout, or
    a blueprint, for Azure subscriptions.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是构建 Azure 订阅默认布局或蓝图所需的所有元素。
- en: 'There are a number of key differences between blueprints and ARM templates:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 蓝图和 ARM 模板之间有一些关键差异：
- en: Blueprints are stored within Azure itself. A blueprint is a resource you can
    create and navigate to in the portal. The authoring experience is also in the
    portal, not in text files on a local computer.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蓝图存储在 Azure 内部。蓝图是你可以在门户中创建并导航的资源。创建体验也在门户中，而不是在本地计算机上的文本文件中。
- en: The relation between a subscription and the blueprint that was used to create
    it remains, also after the deployment completes.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订阅与用于创建它的蓝图之间的关系会一直保留，即使部署完成后也是如此。
- en: With the assignment of a blueprint to a subscription, it is possible to mark
    the assignment as locked. If this is done, all of the resources deployed through
    the blueprint cannot be deleted or edited as long as the blueprint is assigned—not
    even owners of the subscription that it is applied to.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将蓝图分配给订阅，可以将该分配标记为锁定。如果这样做，通过蓝图部署的所有资源都不能被删除或编辑，只要蓝图仍然被分配——即使是应用该蓝图的订阅的所有者也无法进行操作。
- en: There are many built-in blueprints available that can be used to implement controls
    from well-known standards such as ISO, NIST, or HIPAA.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供了许多内置的蓝图，可以用来实施来自 ISO、NIST 或 HIPAA 等知名标准的控制措施。
- en: The general recommendation is to use blueprints whenever creating many new subscriptions,
    which should follow the same layout, and use ARM templates in all other cases.
    Blueprints are still in preview at the time of writing
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一般建议在创建多个新订阅时使用蓝图，这些订阅应该遵循相同的布局，而在其他情况下使用 ARM 模板。蓝图在撰写时仍处于预览阶段。
- en: November 2019 updates
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2019 年 11 月更新
- en: Since November 2019, ARM templates no longer have to be pure JSON. Several other
    constructs are now allowed to make working with ARM templates easier.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 自 2019 年 11 月以来，ARM 模板不再必须是纯 JSON 格式。现在允许使用其他几种构造方式，以便更方便地使用 ARM 模板。
- en: 'To comment the rest of a line, `//` is used, or to comment a block, the `/*
    */` notation is used. This makes the following snippets both valid as part of
    an ARM template:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要对一行的其余部分进行注释，可以使用 `//`，或者使用 `/* */` 符号来注释一个块。这使得以下片段在 ARM 模板中都是有效的：
- en: '[PRE13]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Another deviation from JSON is that ARM templates allow for a multi-line string.
    When using these from the Azure CLI, this has to be enabled by specifying the `--handle-extended-json-format` switch.
    To use these and other new features, a new JSON schema has to be referenced from
    the template. This schema is [https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#](https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个与 JSON 的偏离之处在于，ARM 模板允许多行字符串。在使用 Azure CLI 时，必须通过指定`--handle-extended-json-format`开关来启用此功能。为了使用这些及其他新功能，必须从模板中引用一个新的
    JSON 架构。该架构为[https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#](https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#)。
- en: Also, a new command has been introduced to show what changes would be made if
    a template wer be applied. This command is still in preview and called `New-AzDeploymentWhatIf`.
    A link to the documentation is included at the end of this chapter.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还引入了一个新命令来显示应用模板时将进行的更改。此命令仍在预览阶段，名为`New-AzDeploymentWhatIf`。文档链接将在本章结束时提供。
- en: While ARM templates are the preferred approach in Azure for managing infrastructure,
    there are scenarios where it might not fit. In these cases, Azure Automation can
    be an alternative. Azure Automation is discussed in the next section.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 ARM 模板是 Azure 中管理基础架构的首选方法，但在某些情况下，它可能不适用。在这些情况下，Azure 自动化可以作为一种替代方案。Azure
    自动化将在下一节中讨论。
- en: Using Azure Automation
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Azure 自动化
- en: Azure Automation is a service in Azure that is designed to help users to create,
    manage, deploy, and maintain their Azure resources. Azure Automation contains
    several concepts that remove some of the complexities and low-level details from
    these actions. Azure Automation allows for the formulation of workflows in the
    form of runbooks*.* These runbooks can be executed against Azure resources on
    behalf of the user.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 自动化是 Azure 中的一项服务，旨在帮助用户创建、管理、部署和维护他们的 Azure 资源。Azure 自动化包含多个概念，这些概念去除了这些操作中的一些复杂性和低级细节。Azure
    自动化允许以运行簿的形式制定工作流。这些运行簿可以代表用户执行 Azure 资源的操作。
- en: Automation account resources
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化账户资源
- en: Within an Azure Automation account, there are several resources that make this
    more than just a scripting engine. These resources are shared on the level of
    the automation account and can hence be reused within multiple runbooks.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure 自动化账户中，有多个资源使其不仅仅是一个脚本引擎。这些资源在自动化账户级别上共享，因此可以在多个运行簿中重用。
- en: Run As account
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行身份账户
- en: The first of these constructs is the *Run As* account. This account is a service
    principal that will be created in the Azure Active Directory that the Azure subscription
    containing the automation account is linked to. The credentials to authenticate
    as this service principal are securely stored within the automation account. These
    credentials are non-retrievable. The service principal is also added as a contributor
    to the Azure subscription. As a result, runbooks can now be set up to execute
    using this account.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这些结构中的第一个是*运行身份（Run As）*账户。此账户是一个服务主体，将在与包含自动化账户的 Azure 订阅关联的 Azure Active Directory
    中创建。用于身份验证的服务主体凭据会在自动化账户中安全存储。这些凭据无法检索。该服务主体还会作为贡献者添加到 Azure 订阅中。因此，现在可以设置运行簿，以该账户身份执行。
- en: Run As accounts can be automatically created when creating the Automation account.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建自动化账户时，可以自动创建运行身份账户。
- en: Schedules
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间表
- en: 'A common way of automating workflows is scheduling them to run on a specific
    date and time or on a fixed interval. Instead of specifying a schedule for every
    workflow, shared schedules can be created and reused in runbooks. To create a
    new schedule, first, open the list of all schedules. After that, a new  schedule
    can be added, as shown in the following screenshot:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化工作流的常见方式是安排它们在特定的日期和时间运行，或者按固定的时间间隔运行。可以创建共享计划并在运行簿中重用，而无需为每个工作流指定一个时间表。要创建一个新的计划，首先，打开所有计划的列表。然后，可以添加一个新计划，如下图所示：
- en: '![](img/a728d578-1ff0-47b6-aa70-32ecbd5baf63.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a728d578-1ff0-47b6-aa70-32ecbd5baf63.png)'
- en: A schedule has a name and a description. These values are for the users interacting
    with the schedule only. Next, a starting date and time can be configured, along
    with an optional recurrence interval, and, if a recurrence interval is specified,
    an expiration date and time. Once the schedule is created, it can be used for
    a runbook.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 一个计划有一个名称和描述。这些值仅供与计划交互的用户使用。接下来，可以配置一个开始日期和时间，并可以选择性地设置一个重复间隔。如果指定了重复间隔，还可以设置一个到期日期和时间。一旦计划创建完成，就可以用于运行手册。
- en: Modules
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块
- en: The runbooks that are used in Azure Automation are written in PowerShell. PowerShell
    has a very rich ecosystem of modules with predefined functionalities that can
    be used. For using PowerShell modules from an automation account, only modules
    that have been uploaded to the modules section can be used. One major benefit
    of this is that it is possible to fix the version of a module to use. This guarantees
    that scripts will keep working and not break in case of updates to dependencies.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure 自动化中使用的运行手册是用 PowerShell 编写的。PowerShell 拥有一个功能非常丰富的模块生态系统，其中包含可以使用的预定义功能。要在自动化帐户中使用
    PowerShell 模块，只能使用已上传到模块部分的模块。这样做的一个主要好处是，可以固定模块的版本。这样可以确保脚本在依赖项更新的情况下仍能正常工作，而不会中断。
- en: The PowerShell modules for interacting with Azure are by default installed into
    every automation account. Furthermore, more modules can be added, and existing
    modules can be upgraded or removed by administrators.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 用于与 Azure 交互的 PowerShell 模块默认安装在每个自动化帐户中。此外，管理员还可以添加更多模块，升级或删除现有模块。
- en: Variables
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量
- en: Within runbooks, a lot of variables might come into play; the names of resource
    groups, virtual machines, start up or shutdown times, and so on. Hardcoding these
    values inside a script is not good practice, but storing them together with a
    runbook also has downsides. For example, in the case that there are three runbooks
    for the same virtual machine, this would mean that a number of variable values
    (for example, resource group name and virtual machine name) would be repeated
    at least three times. To prevent this, it is possible to store variable values
    at the automation account level, from where they can be reused throughout every
    runbook that is executed in that account.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行手册中，可能会涉及很多变量，例如资源组名称、虚拟机名称、启动或关闭时间等。将这些值硬编码在脚本中并不是一种好的做法，但将它们与运行手册一起存储也有缺点。例如，如果同一个虚拟机有三个运行手册，这意味着一些变量值（例如资源组名称和虚拟机名称）将至少重复三次。为了避免这种情况，可以在自动化帐户级别存储变量值，并且这些值可以在该帐户下执行的每个运行手册中重复使用。
- en: 'Once a variable is set, it can be accessed from a runbook using the following
    command:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置了变量，就可以使用以下命令从运行手册中访问它：
- en: '[PRE14]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In addition to reading and using variables inside a runbook, they can also
    be updated from within a runbook:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在运行手册中读取和使用变量外，还可以从运行手册内部更新这些变量：
- en: '[PRE15]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: While a very powerful feature, updating variables from within runbooks can have
    unexpected consequences. If a variable value that is used in multiple runbooks
    gets updated by one of them, this might break the other runbooks. Keeping track
    of which variables are read-only and which are written to as well is important.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管是一个非常强大的功能，但从运行手册中更新变量可能会产生意外后果。如果一个变量值在多个运行手册中被使用，并且其中一个运行手册更新了该变量值，这可能会导致其他运行手册出现问题。因此，跟踪哪些变量是只读的，哪些是可写的非常重要。
- en: Credentials
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 凭证
- en: 'A special type of variable is the credential. Credentials contain not one but
    two values: a username and a password. Credentials are treated as secrets everywhere
    they are used. This means that they will not appear in logs and that they have
    to be retrieved using a specific PowerShell syntax:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一种特殊类型的变量是凭证。凭证包含两个值：用户名和密码。凭证在使用的地方都被视为机密。这意味着它们不会出现在日志中，并且必须使用特定的 PowerShell
    语法进行检索：
- en: '[PRE16]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: After executing this command, the `myCredential` object can be used to retrieve
    both the username and password.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此命令后，`myCredential` 对象可以用来检索用户名和密码。
- en: Connections
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接
- en: It is a very common scenario to have to connect to one or more external services
    from within a runbook. A common example is the Azure Resource Manager that is
    used to manage all resources within Azure. To avoid having to store a series of
    variables and build the corresponding connection in a runbook, automation accounts
    allow for the creation beforehand of one or more connections.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行手册中连接一个或多个外部服务是一个非常常见的场景。一个常见的例子是用于管理 Azure 中所有资源的 Azure 资源管理器。为了避免在运行手册中存储一系列变量并构建相应的连接，自动化账户允许事先创建一个或多个连接。
- en: In most scenarios, it is not necessary to create connections manually as they
    are provided along with a Run As account.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，不需要手动创建连接，因为它们会与 Run As 账户一起提供。
- en: Once all of the shared resources are in place, it is time to start writing one
    or more runbooks, which is our next topic of discussion.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有共享资源到位，就可以开始编写一个或多个运行手册，这是我们接下来要讨论的主题。
- en: Runbooks
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行手册
- en: 'A number of types of runbooks are supported: PowerShell, Python 2, and graphical.
    The first two allow for writing scripts to be written in the specified language.
    Graphical runbooks allow for composing a runbook from all uploaded PowerShell
    modules, assets, and existing runbooks using drag and drop.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 支持多种类型的运行手册：PowerShell、Python 2 和图形化的。前两种允许用指定语言编写脚本，图形化运行手册则允许通过拖放的方式，从所有上传的
    PowerShell 模块、资产和现有的运行手册中组合一个运行手册。
- en: In addition to these three basic types of runbooks, there are PowerShell workflow
    and graphical workflow types available. The difference between a regular runbook
    and a workflow runbook is that workflow runbooks also support parallelism. Another
    benefit of PowerShell workflow is that it supports the use of checkpoints, which
    allow a script to be resumed if it encounters an exception mid-execution.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这三种基本类型的运行手册外，还有 PowerShell 工作流和图形工作流类型可用。常规运行手册和工作流运行手册的区别在于，工作流运行手册还支持并行处理。PowerShell
    工作流的另一个优点是它支持使用检查点，这允许在执行过程中遇到异常时，可以从中断处恢复脚本。
- en: Runbook execution
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行手册执行
- en: 'Once the runbook is written, there are a number of ways to execute it:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 运行手册编写完成后，有多种方式可以执行它：
- en: '**Manually**: Any runbook can be run at any time by opening it in the Azure
    portal and pressing Start. Of course, these operations are also available using
    PowerShell or the Azure CLI.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**手动**：任何运行手册都可以在任何时候通过在 Azure 门户中打开并点击“开始”按钮来运行。当然，也可以使用 PowerShell 或 Azure
    CLI 执行这些操作。'
- en: '**By attaching a Webhook**: Once a runbook is published, one or more Webhooks
    can be generated for executing the runbook. Each Webhook can be enabled or disabled
    or given an expiration date. These tools allow a new Webhook to be generated for
    every user of the runbook and fine-grained control to be initiated  if ever future
    access should not be accorded to a particular user.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过附加 Webhook**：一旦运行手册发布，就可以生成一个或多个 Webhook 来执行运行手册。每个 Webhook 可以启用或禁用，或设置过期日期。这些工具允许为每个运行手册的用户生成新的
    Webhook，并在将来如果不再授予某个用户访问权限时，进行细粒度的控制。'
- en: '**On a schedule**: Published runbooks can be attached to one or more of the
    shared schedules. Being able to attach to multiple schedules means that it is
    easy to pre-create a series of schedules for typical reoccurrences, such as hourly,
    daily, or every Monday, and reuse and combine these for the appropriate runbooks.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按计划**：已发布的运行手册可以附加到一个或多个共享的计划中。能够附加到多个计划意味着可以轻松地为典型的重复事件（如每小时、每日或每周一）预先创建一系列计划，并将这些计划重用或组合到适当的运行手册中。'
- en: When executing the runbook from a Webhook or on a schedule, the option to run
    it manually will stay available.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Webhook 或按计划执行运行手册时，仍然可以手动运行该手册。
- en: Jobs
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作业
- en: Every time a runbook is executed, a new entry is created in the Jobs log. This
    log will show an entry for every time the runbook has run, no matter how execution
    was initiated. Every entry will contain the date and time the run was started,
    whether there were errors, and a full execution log.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 每次执行运行手册时，都会在作业日志中创建一个新条目。该日志将记录每次运行手册执行的条目，无论执行是如何启动的。每个条目都将包含运行开始的日期和时间、是否有错误，并且包含完整的执行日志。
- en: Runbooks gallery
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行手册画廊
- en: Runbooks are a great way of automating common tasks. Of course, there are tasks
    that are only for specific customers, but there are also many tasks that are applicable
    to all Azure customers. Examples include the automated startup of a virtual machine
    every Monday morning at 8 A.M. or scaling up a database every morning and back
    down every evening.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化脚本是自动化常见任务的一个好方法。当然，也有一些任务仅适用于特定客户，但也有许多任务适用于所有 Azure 客户。例如，自动化虚拟机每周一早上 8
    点启动，或者每天早上自动扩展数据库并在晚上自动缩减。
- en: For these common scenarios, there is the runbooks gallery, which is enabled
    within every automation account. In this gallery, hundreds of pre-made runbooks
    can be browsed and searched. Once an appropriate runbook has been found, it can
    be imported directly into the account as a runbook.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些常见场景，Azure 提供了一个自动化脚本库，该库在每个自动化账户中都可以启用。在这个库中，可以浏览和搜索成百上千个预制的自动化脚本。一旦找到合适的脚本，可以将其直接导入账户作为自动化脚本。
- en: Besides executing scripts on set intervals or upon the invocation of a Webhook,
    Azure Automation can also be used as a PowerShell DSC pull server. Let's discuss
    this next.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 除了在设定的时间间隔执行脚本或通过 Webhook 触发执行外，Azure 自动化还可以作为 PowerShell DSC 拉取服务器使用。接下来我们将讨论这一点。
- en: PowerShell DSC
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PowerShell DSC
- en: PowerShell DSC is a notion for specifying the configuration of servers. This
    configuration is stored on a pull server, where it can be accessed by one or more
    virtual machines. These virtual machines are configured to check this server at
    a specified interval for the latest DSC configuration and update themselves to
    comply with this configuration.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell DSC 是一种用于指定服务器配置的概念。该配置存储在拉取服务器上，虚拟机可以访问该服务器。这些虚拟机会在指定的时间间隔检查该服务器以获取最新的
    DSC 配置，并自我更新以符合该配置。
- en: 'PowerShell DSC is an extension to the PowerShell language specification that
    is used for writing desired state configurations. A configuration enables the
    desired state of one or more nodes to be specified. A node specifies which server,
    or set of servers, is to be configured. The configuration for a node is written
    in the form of one or more resources. An example configuration is shown as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell DSC 是对 PowerShell 语言规范的扩展，用于编写期望的状态配置。配置使得可以指定一个或多个节点的期望状态。节点指定要配置的服务器或服务器集。节点的配置以一个或多个资源的形式编写。以下是一个配置示例：
- en: '[PRE17]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this example, the configuration for a server farm with a single type of server
    is described. This server contains two resources. The first one, of the `WindowsFeature` type with
    the name `IIS`, ensures that `IIS` is installed together with all of its sub-features.
    The second resource, of the `File` type, ensures that a directory, `c:\logs`,
    exists. The resource types of `IIS` and `File` and many more are built into the
    PowerShell DSC specification. A full reference of all resources is available online
    and a link is included at the end of this chapter.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，描述了一个只有单一类型服务器的服务器群配置。该服务器包含两个资源，第一个资源是类型为 `WindowsFeature`，名称为 `IIS`，确保
    `IIS` 和所有子特性被安装。第二个资源是类型为 `File`，确保 `c:\logs` 目录存在。`IIS` 和 `File` 等资源类型是 PowerShell
    DSC 规范中内置的。所有资源的完整参考文档可以在线查阅，链接会在本章结尾提供。
- en: Compiling and applying PowerShell DSC
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译并应用 PowerShell DSC
- en: PowerShell DSC files are saved in plaintext, often in a `.ps1` file. These files
    can be compiled into MOF files. These MOF files can then be pushed to one or more
    servers to update the state of the server to the state described in the MOF file.
    This is called **push mode**.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: PowerShell DSC 文件通常以纯文本形式保存在 `.ps1` 文件中。这些文件可以编译成 MOF 文件。然后，可以将这些 MOF 文件推送到一个或多个服务器，以将服务器的状态更新为
    MOF 文件中描述的状态。这种方式称为**推送模式**。
- en: Besides push mode, there is another model for deploying MOF files. This is called
    **pull mode**. In pull mode, MOF files are not directly pushed to individual servers,
    but stored on a central server that is called the **pull server***.* This way,
    the pull server has a complete record of all configurations and node definitions
    within those configurations.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 除了推送模式，还有另一种部署 MOF 文件的模型。这种模式称为**拉取模式**。在拉取模式下，MOF 文件不会直接推送到单独的服务器，而是存储在一个名为**拉取服务器**的中央服务器上。通过这种方式，拉取服务器能够完整记录所有配置和配置中的节点定义。
- en: Once the pull server is up and running, individual servers are configured to
    fetch their DSC configuration at a fixed interval and apply that configuration.
    Applying a configuration means that, for every defined resource, the described
    state will be enacted. This can be done by doing nothing if the actual state already
    matches the desired state, or by running commands to achieve the desired state.
    In this process, all previous changes—even by administrators—will be reverted
    if necessary.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦拉取服务器启动并运行，单独的服务器将配置为在固定的时间间隔获取其DSC配置并应用该配置。应用配置意味着，对于每个定义的资源，将实施所描述的状态。如果实际状态已经与期望的状态匹配，则可以什么都不做，或者通过运行命令来实现期望的状态。在此过程中，所有以前的更改——即使是管理员的更改——如果需要，也会被恢复。
- en: Using Powershell DSC with Azure Automation
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Powershell DSC与Azure自动化
- en: Azure Automation has built-in capabilities for PowerShell DSC and can fulfill
    the role of pull server for one or more virtual machines.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Automation具有内置的PowerShell DSC功能，并可以充当一个或多个虚拟机的拉取服务器角色。
- en: 'To start using the built-in pull server capabilities, upload one or more configuration
    files to the automation account. This is done from the State configuration view
    that is shown in the following screenshot. Now, complete the following steps:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用内置的拉取服务器功能，将一个或多个配置文件上传到自动化帐户。这是通过以下截图中显示的状态配置视图完成的。现在，完成以下步骤：
- en: Open by clicking the menu option on the left.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧菜单选项打开。
- en: 'Select Configuration in the tab bar at the top:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在顶部的标签栏中选择配置：
- en: '![](img/e2748a78-ee4d-4f5a-ab2d-cd0a6e90cfe4.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e2748a78-ee4d-4f5a-ab2d-cd0a6e90cfe4.png)'
- en: Once the overview of all configurations is opened, new configurations can be
    added using the Add button. In `topHere`, a local `ps1` file can be selected and
    that will be added to the list. Any valid configuration in the list can be clicked
    on and compiled in place.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开所有配置的概述后，可以使用“添加”按钮添加新配置。在`topHere`中，可以选择一个本地的`ps1`文件，并将其添加到列表中。列表中的任何有效配置都可以点击并在原地进行编译。
- en: Now, the configuration will also be shown in the tab with compiled configurations
    and can be applied to one or more virtual machines.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，配置也将在带有编译配置的标签中显示，并且可以应用到一个或多个虚拟机。
- en: Once a compiled configuration is available, the Nodes tab can be used for adding
    one or more virtual machines from the subscription to a configuration node.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦编译的配置可用，"Nodes" 标签可以用于将一个或多个虚拟机从订阅中添加到配置节点。
- en: 'Clicking the Add button while this tab is shown opens the view shown as follows:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在显示此标签时，点击“添加”按钮会打开如下所示的视图：
- en: '![](img/93411ab5-71a1-48f7-947f-b1f7f46a1848.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](img/93411ab5-71a1-48f7-947f-b1f7f46a1848.png)'
- en: In this view, a virtual machine can be selected to which the selected configuration
    should be applied.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此视图中，可以选择一个虚拟机，并将所选配置应用到该虚拟机。
- en: The local configuration manager on that machine will be configured to refresh
    the configuration at fixed intervals.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 那台机器上的本地配置管理器将被配置为在固定的时间间隔刷新配置。
- en: Whenever the configuration is refreshed, it will be reapplied to the server.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每当配置被刷新时，它将重新应用到服务器。
- en: Azure Automation enables users to manage virtual machines, for example, to apply
    application configuration. When working with PaaS offerings, this cannot be done
    using techniques as PowerShell DSC and other techniques have to be used to manage
    application settings. These will be discussed in the next section.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Automation使用户能够管理虚拟机，例如应用程序配置。在使用PaaS服务时，不能使用PowerShell DSC等技术，必须使用其他技术来管理应用程序设置。这些将在下一节中讨论。
- en: Managing application settings
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理应用程序设置
- en: 'Another part of the infrastructure of an application is the application configuration.
    In this section, a number of approaches for storing and loading the application
    configuration for an Azure App Service are discussed. They include the following:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的基础设施的另一部分是应用程序配置。在本节中，讨论了存储和加载Azure应用服务的应用程序配置的多种方法。包括以下内容：
- en: Storing the configuration in the app settings
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将配置存储在应用程序设置中
- en: Using a combination of Managed Identity and key vault
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用托管身份和密钥库的组合
- en: Using the Azure App configuration service
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Azure应用配置服务
- en: The disadvantage of the first approach is that the app settings can be read
    by any user who has administrative (read) access to the app service that is configured.
    The next two approaches do not have this disadvantage.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法的缺点是，任何具有管理员（读取）访问权限的用户都可以读取应用程序服务中的应用程序设置。接下来的两种方法没有这个缺点。
- en: Azure app service settings from an ARM template
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 来自ARM模板的Azure应用服务设置
- en: 'The first way to configure application settings as code is by specifying app
    settings as a resource in an ARM template. This should be specified as a nested
    resource. This can be done as shown in the following screenshot:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 配置应用程序设置为代码的第一种方法是通过在ARM模板中将应用设置指定为资源。这应该作为嵌套资源进行指定。可以按照以下屏幕截图所示进行操作：
- en: '[PRE18]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The use of the `listKeys` function is especially useful in these scenarios.
    It allows for the direct copying of secrets from any service to the application
    settings without ever storing them in any intermediate solution. For secrets that
    do not come from Azure sources, template parameters should be used.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`listKeys`函数在这些场景中特别有用。它允许将机密直接从任何服务复制到应用程序设置，而无需将其存储在任何中间解决方案中。对于非Azure来源的机密，应使用模板参数。'
- en: The configuration specified in the ARM template corresponds to the configuration
    of an App Service that can be found in the portal. These settings are used to
    override corresponding entries in the `appsettings.json` or `appsettings.config`
    files. Updating this configuration automatically reloads the application as well.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: ARM模板中指定的配置对应于在门户中找到的应用服务配置。这些设置用于覆盖`appsettings.json`或`appsettings.config`文件中的相应条目。更新此配置将自动重新加载应用程序。
- en: The downside of this approach is that secrets that are stored this way are readable
    through the Azure portal. Any user with read access to the app service can retrieve
    all secrets stored this way.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的缺点是，以这种方式存储的机密可以通过Azure门户查看。任何具有读取访问权限的用户都可以检索所有以这种方式存储的机密。
- en: Loading settings at runtime from key vault
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从密钥库在运行时加载设置
- en: The next possible location for storing app service settings is in an Azure key
    vault, where the application loads them at runtime. To make this possible, the
    following has to be in place.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 存储应用服务设置的下一个可能位置是Azure密钥库，应用程序在运行时从中加载设置。为了实现这一点，必须做到以下几点。
- en: To be able to authorize an application with access to a key vault, the application
    first has to be able to authenticate itself against the **Azure Active Directory**
    (**AAD**). Of course, this can be done by registering a service principal manually,
    but this would return a username and password that have to be stored somewhere.
    Usernames and passwords are secrets, but cannot be stored in the key vault since
    they are needed for accessing it. This problem of how to keep the key to the vault
    safe can be solved by using an Azure capability called *Managed* *Identity*.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够授权应用程序访问密钥库，应用程序必须首先能够通过**Azure Active Directory**（**AAD**）进行身份验证。当然，可以手动注册一个服务主体，但这会返回一个用户名和密码，必须将其存储在某个地方。用户名和密码是机密，但不能存储在密钥库中，因为它们用于访问密钥库。如何确保密钥安全的问题可以通过使用Azure的*Managed*
    *Identity*功能来解决。
- en: The problem of securely storing secrets but getting another secret in return
    for accessing them is often referred to as the problem of *turtles all the way
    down.* This is an old anecdote to which a link is included at the end of this
    chapter.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 安全地存储机密，但访问时返回另一个机密的问题通常被称为*turtles all the way down*问题。这是一个古老的轶事，章节末尾提供了相关链接。
- en: With Azure Managed Identity enabled on an app service, Azure automatically generates
    a service principal with a non-retrievable username and password. Only at runtime,
    using specific code, can an application authenticate itself as this principal.
    Azure will ensure that this will only work for code that is running with the app
    service that the Managed Identity belongs to.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 启用Azure托管身份的应用服务，Azure会自动生成一个服务主体，该主体具有不可检索的用户名和密码。仅在运行时，应用程序才能通过特定代码将自己认证为该主体。Azure将确保此操作仅适用于运行在属于该托管身份的应用服务中的代码。
- en: 'Now that an application can have its own identity, that identity has to be
    granted access to the key vault. This can be done in the key vault description
    in an ARM template, using the following syntax:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，应用程序可以拥有自己的身份，必须授予该身份对密钥库的访问权限。这可以通过在ARM模板中的密钥库描述中完成，使用以下语法：
- en: '[PRE19]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this example, the `reference()` function is used to retrieve the information
    of the Managed Identity and uses this to create an access policy on the key vault.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，`reference()`函数用于检索托管身份的信息，并利用这些信息在密钥库上创建访问策略。
- en: 'Finally, with the key vault and access to it set up, the application has to
    retrieve the contents at start up time. To do this, config builders can be used.
    They are introduced with .NET Core 2.0 (and .NET Framework 4.7.1) and are used
    in the `StartUp` class, as shown in the following code snippet:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，设置好密钥保管库及其访问权限后，应用程序必须在启动时检索内容。为此，可以使用配置构建器。它们是在.NET Core 2.0（和.NET Framework
    4.7.1）中引入的，并在`StartUp`类中使用，如以下代码片段所示：
- en: '[PRE20]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: All types in this code example are available in the NuGet package, `Microsoft.Configuration.ConfigurationBuilders.Azure`.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码示例中的所有类型都可以在NuGet包`Microsoft.Configuration.ConfigurationBuilders.Azure`中找到。
- en: Azure App Configuration
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure应用程序配置
- en: Another location for storing the configuration of applications is Azure App
    Configuration. This is a new service, and at the time of writing, still in preview.
    App Configuration allows for the creation of a central register of key-value pairs
    that can be used as configuration by such a register, but also multiple applications.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 存储应用程序配置的另一个位置是Azure应用程序配置。这是一个新服务，截至本文写作时仍处于预览阶段。应用程序配置允许创建一个可以作为配置使用的键值对中央注册表，这个注册表可以被多个应用程序使用。
- en: 'App Configuration is another type of resource that can be created from the
    portal. The main component is a configuration explorer, as shown in the following
    screenshot:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序配置是另一种可以通过门户创建的资源。其主要组件是配置资源管理器，如以下截图所示：
- en: '![](img/02417fea-c92b-4913-bea5-1998182362cd.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![](img/02417fea-c92b-4913-bea5-1998182362cd.png)'
- en: In addition to the configuration explorer, there is a keys section for retrieving
    access keys that applications can use to read the configuration. There are also
    options to view recent changes to the configuration and restore earlier versions
    and for importing or exporting all configuration settings.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 除了配置资源管理器外，还有一个密钥部分，用于检索应用程序可以用来读取配置的访问密钥。还有选项可以查看配置的最近更改、恢复早期版本，以及导入或导出所有配置设置。
- en: 'After the App Configuration resource has been created and configuration keys
    added, they can be retrieved from within an application by using an extension
    method of the **IConfiguration** framework type:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建应用程序配置资源并添加配置键后，可以通过使用**IConfiguration**框架类型的扩展方法在应用程序中检索它们：
- en: '[PRE21]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The loader for settings from an app configuration is part of the NuGet package, `Microsoft.Azure.AppConfiguration.AspNetCore`.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 从应用程序配置加载设置的加载器是NuGet包`Microsoft.Azure.AppConfiguration.AspNetCore`的一部分。
- en: 'Compared to storing settings in Azure key vault, App Configuration has two
    downsides:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 与将设置存储在Azure密钥保管库相比，应用程序配置有两个缺点：
- en: Firstly, the application needs to be configured with a connection string to
    the App Configuration, storing at least one new secret in the app settings.
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，应用程序需要通过连接字符串配置到应用程序配置，并在应用设置中存储至少一个新的密钥。
- en: Secondly, App Configuration does not have access control options that are as
    rigid as key vault. For this reason, it might make sense to distribute configuration
    over both App Configuration and key vault, depending on the type of configuration
    value.
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，应用程序配置没有像密钥保管库那样严格的访问控制选项。因此，根据配置值的类型，将配置分布在应用程序配置和密钥保管库中可能更为合理。
- en: This concludes our discussion of Azure and Azure DevOps capabilities for infrastructure
    as code. The next section will discuss a series of other tools available that
    offer similar capabilities.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分内容结束了我们对Azure和Azure DevOps在基础设施即代码方面的讨论。接下来的部分将讨论一系列其他提供类似功能的工具。
- en: Other tools
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他工具
- en: There are many other tools available for managing infrastructure and configuration
    through code. Next to the native Azure and Windows options discussed in the previous
    sections, there are many alternatives widely in use and some of them are listed
    in this section. It is important to know which tool can be used for which scenarios
    and how to integrate with them.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他工具可以通过代码管理基础设施和配置。在前述的原生Azure和Windows选项之外，还有许多广泛使用的替代工具，其中一些在本节中列出。了解哪些工具适用于哪些场景，并如何与它们集成是很重要的。
- en: CloudFormation
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CloudFormation
- en: 'CloudFormation is the IaC language for the AWS Cloud. CloudFormation templates
    can be written in either JSON or YAML format. One example of creating an AWS S3
    Storage Bucket that is publicly readable would look like this:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFormation是AWS云的基础设施即代码（IaC）语言。CloudFormation模板可以用JSON或YAML格式编写。创建一个可以公开读取的AWS
    S3存储桶的示例如下所示：
- en: '[PRE22]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: There is an extension available that allows the execution of CloudFormation
    templates on AWS from Azure DevOps. This extension provides tasks for creating,
    updating, or deleting AWS Stacks. A stack has a function that is comparable to
    a resource group in Azure and the tasks are comparable to the tasks for applying
    an ARM template.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个扩展可以让你从 Azure DevOps 执行 AWS 上的 CloudFormation 模板。这个扩展提供了创建、更新或删除 AWS 堆栈的任务。堆栈的功能类似于
    Azure 中的资源组，任务则类似于应用 ARM 模板的任务。
- en: Chef
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Chef
- en: Chef is a tool for CaC, with support for describing and enforcing the configuration
    of servers. Chef uses a centralized server, *Chef Server*, where all configuration
    for all servers is saved. Here, the correct desired state for every server is
    determined, which is then pulled by the *Chef Client,* an agent that runs on the
    *node* that is being managed.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: Chef 是一个用于配置即代码（CaC）的工具，支持描述和执行服务器配置。Chef 使用一个集中式服务器，*Chef Server*，该服务器保存所有服务器的配置。在这里，为每个服务器确定正确的期望状态，然后由
    *Chef Client* 拉取，该客户端是一个在受管理节点上运行的代理。
- en: Defining the desired state for a server is done using a number of constructs.
    The lowest level is the recipe. A recipe contains one or more resources, built-in
    capabilities that can be used. An example resource is execute , which runs a bash
    command. Another example resource is `apt_update`, which provides the means to
    interact with the *apt* package manager. One or more recipes are combined in cookbooks,
    which describe a capability that can be assigned to a node. The assignment of
    one or more cookbooks to a node is done using the run list. The run list contains
    all cookbooks that have to be applied to a node.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 为服务器定义期望状态是通过一系列构造来完成的。最低级别是配方（recipe）。配方包含一个或多个资源，资源是可用的内置功能。例如，`execute` 资源可以执行一个
    bash 命令。另一个资源是 `apt_update`，它提供与 *apt* 包管理器交互的方式。一个或多个配方可以组合成烹饪书（cookbooks），描述可以分配给节点的能力。一个或多个烹饪书可以通过运行列表（run
    list）分配给节点。运行列表包含必须应用到节点的所有烹饪书。
- en: Interaction with the Chef Server is done using a command-line tool called **knife**.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Chef Server 的交互是通过一个名为 **knife** 的命令行工具进行的。
- en: While the terminology is completely different, there are many conceptual parallels
    between PowerShell DSC and Chef.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管术语完全不同，但 PowerShell DSC 和 Chef 之间存在许多概念上的相似之处。
- en: Puppet
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Puppet
- en: Puppet is a deployment and configuration management tool that operates using
    a server-client model. There is a centralized server called the **Puppet Master**
    that is responsible for taking in all of the desired state descriptions and compiling
    them to an intern catalog that holds the desired state for every managed server.
    All servers that are managed by Puppet need to have the Puppet agent installed
    on the local server. The agent connects to the server, to pull the state for the
    server it manages, and applies that locally. A managed server is called a node*.*
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 是一个部署和配置管理工具，采用服务器-客户端模型。它有一个集中式服务器，称为 **Puppet Master**，负责接收所有期望状态描述并将它们编译成一个内部目录，保存每个受管理服务器的期望状态。所有由
    Puppet 管理的服务器都需要在本地服务器上安装 Puppet 代理。该代理连接到服务器，拉取它所管理的服务器的状态，并在本地应用该状态。受管理的服务器称为节点（node）。
- en: The base building block used by Puppet is called a **resource**. A resource
    is defined by specifying a resource type and a series of attributes. There are
    many resource types available, for example, for managing users and installed applications.
    Resources are grouped in one or more *classes.* These classes are, in turn, assigned
    to one or more nodes.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 使用的基本构建块叫做 **资源（resource）**。资源通过指定资源类型和一系列属性来定义。有许多资源类型可用，例如管理用户和已安装的应用程序。资源被分组在一个或多个
    *类（classes）* 中，这些类又被分配给一个或多个节点。
- en: Puppet can be installed on any Linux VM in Azure. There is also a pre-built
    image with Puppet Enterprise available in the Azure marketplace.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 可以安装在 Azure 中的任何 Linux 虚拟机上。Azure 市场中也有一个预构建的包含 Puppet Enterprise 的镜像。
- en: Puppet is comparable to Chef and PowerShell DSC. All three have a comparable
    model for describing the desired state and they all serve the same purpose.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: Puppet 与 Chef 和 PowerShell DSC 相似。三者都有一个类似的模型来描述期望的状态，它们的目的相同。
- en: Ansible
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ansible
- en: Ansible is yet another configuration management tool that is mostly used on
    Linux but also has support for Windows. One aspect that differentiates Ansible
    from other tools is that it does not have a centralized server that hosts all
    of the desired states, nor does it work with agents. All commands executed by
    Ansible are executed using SSH.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 是另一种配置管理工具，主要用于 Linux，但也支持 Windows。Ansible 与其他工具的一个不同之处在于，它没有集中式服务器来托管所有期望的状态，也不使用代理。Ansible
    执行的所有命令都是通过 SSH 执行的。
- en: Any server can initiate the deployment of a *playbook* against one or more *items*
    in an *inventory.* An Ansible inventory contains all of the servers that can be
    managed by Ansible. They can be grouped into one or more groups, which can be
    nested into other groups as well. Each individual server and every group is an
    inventory item. In Ansible, the desired state is written in playbooks. A playbook
    is a series of tasks or roles that need to be run at the target server. A role
    is a group of tasks. Roles are intended to be reused in more than one playbook
    and should, therefore, be general enough to be useable in multiple situations.
    Roles should also be idempotent. This means that the tasks in the role should
    ensure that the outcome of running the playbook is the same, no matter the number
    of times it is run.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 任何服务器都可以启动一个*剧本*，针对*清单*中的一个或多个*项*进行部署。Ansible 清单包含所有可以由 Ansible 管理的服务器。这些服务器可以分组为一个或多个组，并且可以嵌套在其他组中。每台服务器和每个组都是清单项。在
    Ansible 中，期望的状态是写入剧本中的。剧本是一系列需要在目标服务器上运行的任务或角色。角色是任务的集合。角色旨在在多个剧本中重用，因此应该足够通用，可以在多种情况下使用。角色还应该是幂等的。这意味着角色中的任务应该确保无论运行剧本多少次，结果都是相同的。
- en: Ansible scripts can be executed using command-line tools or an Azure DevOps
    extension that wraps this tool. There are also other management systems available,
    such as Ansible Tower, that provide a graphical user interface on top of the capabilities
    of the Ansible command-line tools.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: Ansible 脚本可以通过命令行工具或封装该工具的 Azure DevOps 扩展来执行。还有其他管理系统可用，如 Ansible Tower，它在
    Ansible 命令行工具的基础上提供了图形用户界面。
- en: Terraform
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Terraform
- en: Terraform is a multi-cloud infrastructure management solution. It is comparable
    to ARM templates, the difference being that it also supports Amazon Web Services,
    Google Cloud Platform, and other clouds. Terraform uses a custom file format for
    specifying one or more resources to be created using one or more providers. The
    resources correspond to the cloud resources, and the providers are responsible
    for knowing how to interact with the APIs of the different vendors.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 是一个多云基础设施管理解决方案。它可与 ARM 模板相比，区别在于它还支持 Amazon Web Services、Google Cloud
    Platform 以及其他云平台。Terraform 使用自定义文件格式来指定一个或多个资源，这些资源将通过一个或多个提供商来创建。这些资源对应于云资源，而提供商负责知道如何与不同供应商的
    API 交互。
- en: Optionally, you can use a JSON format instead of the Terraform proprietary format.
    Terraform also supports the use of modules for creating packages that are reusable
    components.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以选择使用 JSON 格式，而不是 Terraform 专有格式。Terraform 还支持使用模块来创建可重用的组件包。
- en: Terraform configuration files are executed using command-line interfaces.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: Terraform 配置文件是通过命令行界面执行的。
- en: Summary
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned about the concept of infrastructure and configuration
    as code, its value, and how to use it in practice. For implementing these, you
    learned about ARM templates, the IaC mechanism for Azure. You also learned about
    PowerShell DSC for managing the configuration of virtual machines and about different
    techniques for managing the configuration of your applications. Finally, you learned
    about several other tools available in the market. You learned which tool can
    be used in which situation and whether these tools can integrate with Azure DevOps.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了基础设施和配置即代码的概念、它的价值以及如何在实践中使用它。为了实现这些，您学习了 Azure 的 IaC 机制——ARM 模板。您还了解了用于管理虚拟机配置的
    PowerShell DSC 以及管理应用程序配置的不同技术。最后，您了解了市场上可用的几种其他工具。您学会了在不同情况下可以使用哪个工具，以及这些工具是否能够与
    Azure DevOps 集成。
- en: With this knowledge, you are now able to start describing the infrastructure
    and configuration of your application(s) in source control using one or more of
    the tools you have read about. You are also capable of setting up the means to
    deliver the infrastructure using automation, either from a release pipeline or
    using dedicated infrastructure management tools. But no matter which solution
    you choose, you now have the capabilities to incorporate infrastructure into your
    DevOps processes.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些知识，你现在能够使用你所学到的一种或多种工具，开始在源代码管理中描述你的应用程序的基础设施和配置。你还可以通过自动化手段设置交付基础设施的方式，无论是通过发布管道还是使用专门的基础设施管理工具。但无论你选择哪种解决方案，你现在已经具备将基础设施融入到
    DevOps 流程中的能力。
- en: 'In the next chapter, you will learn about another challenge you might encounter
    when implementing DevOps practices: databases. When increasing the speed at which
    features flow to production, you may also have to change the way you manage your
    database schema and how you apply changes. The next chapter will discuss this
    subject.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习在实施 DevOps 实践时可能遇到的另一个挑战：数据库。在提高功能流向生产的速度时，你可能还需要改变管理数据库架构和应用更改的方式。下一章将讨论这个话题。
- en: Questions
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'As we conclude, here is a list of questions for you to test your knowledge
    regarding this chapter''s material. You will find the answers in the *Assessments*
    section of the Appendix:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，以下是一些问题，可以测试你对本章内容的理解。你可以在附录的 *评估* 部分找到答案：
- en: 'True or False: ARM templates can be used for creating, updating, and deleting
    Azure Resources.'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 判断正误：ARM 模板可用于创建、更新和删除 Azure 资源。
- en: Which of the following is not an Azure Automation Account resource?
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪项不是 Azure 自动化账户资源？
- en: Modules
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模块
- en: Containers
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 容器
- en: Run As account
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行账户
- en: Variables
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 变量
- en: 'True or False: One disadvantage of infrastructure as code is that you have
    to put sensitive information in source control as ARM template parameter files.'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 判断正误：基础设施作为代码的一个缺点是，你必须将敏感信息作为 ARM 模板参数文件放入源代码管理中。
- en: 'True or False: Azure Automation Accounts allow for the execution of Powershell
    runbooks at a predefined schedule.'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 判断正误：Azure 自动化账户允许在预定的时间表上执行 Powershell 运行簿。
- en: What are some of the benefits of using infrastructure as code?
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用基础设施作为代码有什么好处？
- en: Further reading
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入阅读
- en: A formal breakdown of the ARM template structure and syntax can be found at
    [https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/template-syntax](https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/template-syntax).
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 ARM 模板结构和语法的正式分解可以在[https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/template-syntax](https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/template-syntax)找到。
- en: The complete ARM Template reference can be found at [https://docs.microsoft.com/en-us/azure/templates/](https://docs.microsoft.com/en-us/azure/templates/).
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整的 ARM 模板参考可以在[https://docs.microsoft.com/en-us/azure/templates/](https://docs.microsoft.com/en-us/azure/templates/)找到。
- en: An overview of all functions that can be used in ARM templates can be found
    at [https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-template-functions](https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-template-functions).
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在[https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-template-functions](https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-template-functions)找到有关
    ARM 模板中可以使用的所有功能的概述。
- en: More information about Azure Blueprints can be found at [https://docs.microsoft.com/en-us/azure/governance/blueprints/overview](https://docs.microsoft.com/en-us/azure/governance/blueprints/overview).
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关 Azure Blueprints 的更多信息可以在[https://docs.microsoft.com/en-us/azure/governance/blueprints/overview](https://docs.microsoft.com/en-us/azure/governance/blueprints/overview)找到。
- en: Details about the WhatIf command for ARM templates can be found at [https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/template-deploy-what-if](https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/template-deploy-what-if).
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关 ARM 模板中的 WhatIf 命令的详细信息，可以在[https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/template-deploy-what-if](https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/template-deploy-what-if)找到。
- en: There are many online references to the story of "turtles all the way down",
    but an early reference can be found digitized at [https://dspace.mit.edu/handle/1721.1/15166](https://dspace.mit.edu/handle/1721.1/15166).
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网上有许多关于“从下往上全是乌龟”的故事参考资料，但可以在[https://dspace.mit.edu/handle/1721.1/15166](https://dspace.mit.edu/handle/1721.1/15166)找到早期的数字化参考。
- en: The reference including all Powershell DSC built-in resources can be found at
    [https://docs.microsoft.com/en-us/powershell/scripting/dsc/overview/overview](https://docs.microsoft.com/en-us/powershell/scripting/dsc/overview/overview).
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含所有PowerShell DSC内置资源的参考资料可以在[https://docs.microsoft.com/en-us/powershell/scripting/dsc/overview/overview](https://docs.microsoft.com/en-us/powershell/scripting/dsc/overview/overview)找到。
- en: More information about CloudFormation can be found at [https://aws.amazon.com/cloudformation/](https://aws.amazon.com/cloudformation/).
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关CloudFormation的更多信息，请访问[https://aws.amazon.com/cloudformation/](https://aws.amazon.com/cloudformation/)。
- en: More information about Chef can be found at [https://www.chef.io/](https://www.chef.io/).
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关Chef的更多信息，请访问[https://www.chef.io/](https://www.chef.io/)。
- en: More information about Puppet can be found at [https://puppet.com/](https://puppet.com/).
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关Puppet的更多信息，请访问[https://puppet.com/](https://puppet.com/)。
- en: More information about Ansible can be found at [https://www.ansible.com/](https://www.ansible.com/).
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关Ansible的更多信息，请访问[https://www.ansible.com/](https://www.ansible.com/)。
- en: More information about Terraform can be found at [https://www.terraform.io/](https://www.terraform.io/).
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关Terraform的更多信息，请访问[https://www.terraform.io/](https://www.terraform.io/)。
- en: 'The following are links to Microsoft hands-on labs that can be used to get
    hands-on experience with the topics discussed in this chapter ([https://docs.microsoft.com/en-us/learn/modules/intro-to-governance/](https://docs.microsoft.com/en-us/learn/modules/intro-to-governance/)):'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是一些微软实践实验室的链接，可以用来获得与本章讨论主题相关的实际操作经验（[https://docs.microsoft.com/en-us/learn/modules/intro-to-governance/](https://docs.microsoft.com/en-us/learn/modules/intro-to-governance/)）：
- en: '[https://docs.microsoft.com/en-us/learn/modules/configure-infrastructure-azure-pipelines/index](https://docs.microsoft.com/en-us/learn/modules/configure-infrastructure-azure-pipelines/index)'
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/learn/modules/configure-infrastructure-azure-pipelines/index](https://docs.microsoft.com/en-us/learn/modules/configure-infrastructure-azure-pipelines/index)'
- en: '[https://docs.microsoft.com/en-us/learn/modules/provision-infrastructure-azure-pipelines/index](https://docs.microsoft.com/en-us/learn/modules/provision-infrastructure-azure-pipelines/index)'
  id: totrans-298
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/learn/modules/provision-infrastructure-azure-pipelines/index](https://docs.microsoft.com/en-us/learn/modules/provision-infrastructure-azure-pipelines/index)'
- en: '[https://docs.microsoft.com/en-us/learn/modules/protect-vm-settings-with-dsc/](https://docs.microsoft.com/en-us/learn/modules/protect-vm-settings-with-dsc/)'
  id: totrans-299
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/learn/modules/protect-vm-settings-with-dsc/](https://docs.microsoft.com/en-us/learn/modules/protect-vm-settings-with-dsc/)'
