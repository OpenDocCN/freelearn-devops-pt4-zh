["```\nFROM mcr.microsoft.com/dotnet/core/aspnet:3.0-buster-slim AS base\nWORKDIR /app\nEXPOSE 80\nEXPOSE 443\nEXPOSE 555\nFROM mcr.microsoft.com/dotnet/core/sdk:3.0-buster AS build\nWORKDIR /src\nCOPY [\"ExistingDevOpsProject/ExistingDevOpsProject.csproj\",\n\"ExistingDevOpsProject/\"]\nRUN dotnet restore \"ExistingDevOpsProject/ExistingDevOpsProject.csproj\"\nCOPY . .\nWORKDIR \"/src/ExistingDevOpsProject\"\nRUN dotnet build \"ExistingDevOpsProject.csproj\" -c Release -o\n/app/build\nFROM build AS publish\nRUN dotnet publish \"ExistingDevOpsProject.csproj\" -c Release -o\n/app/publish\nFROM base AS final\nWORKDIR /app\nCOPY --from=publish /app/publish .\nENTRYPOINT [\"dotnet\", \"ExistingDevOpsProject.dll\"]\n```", "```\ndocker images\n```", "```\ndocker container run --publish 8123:80 --detach --name [container name] [image name]\n```", "```\n- task: Docker@2\n  inputs:\n    containerRegistry: 'MSFT Container Registry'\n    repository: 'azuredevops'\n    command: 'buildAndPush'\n    Dockerfile:'**/Dockerfile'\n    buildContext:\n'$(System.DefaultWorkingDirectory)/ExistingDevOpsProject'\n```", "```\naz container create --resource-group [resource group] --name [ACI name] –location westeurope –image [Image reference] --dns-name-label [dns reference] –ports 80 --registry-username [username of the registry] --registry-password [password of the registry]\n```", "```\naz container create --resource-group aci-rg-devops --name aci-demo-app –location westeurope –image msftazuredevops.azurecr.io/azuredevops:$(Build.BuildId) --dns-name-label aci-msft-demo –ports 80 --registry-username $(username) --registry-password $(password)\n```", "```\n- task: AzureCLI@2\n  inputs:\n  azureSubscription: 'Subscription MPN'\n  scriptType: 'bash'\n  scriptLocation: 'inlineScript'\n  inlineScript: 'az container create --resource-group aci-rg-devops -\nname aci-demo-app --location westeurope --image msftazuredevops.azurecr.io/azuredevops:$(Build.BuildId) --dns-name-label aci-msft-demo --ports 80 --registry-username $(username) --registry-password $(password)'\n```", "```\naz group create --name mpn-rg-kubernetes --location westeurope\n\n```", "```\naz aks create --resource-group mpn-rg-kubernetes --name mykubernetescluster --node-count 1 --enable-addons monitoring --generate-ssh-keys\n```", "```\naz aks install-cli\n```", "```\naz aks get-credentials --resource-group mpn-rg-kubernetes --name mykubernetescluster\n```", "```\nkubectl get nodes\n```", "```\nkubectl get pods\n```", "```\naz aks browse --resource-group mpn-rg-kubernetes --name mykubernetescluster\n```", "```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: kubernetes-deployment\n  labels:\n    app: customapplication\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: customapplication\n  template:\n    metadata:\n      labels:\n        app: customapplication\n    spec:\n      containers:\n      - name: azuredevops\n        image: msftazuredevops.azurecr.io/azuredevops:586\n        ports:\n        - containerPort: 80\n```", "```\nkubectl apply -f deploy.yaml\n```", "```\n---\napiVersion: v1\nkind: Service\nmetadata:\n    name: customapplication-service\nspec:\n    type: LoadBalancer\n    ports:\n    - port: 80\n    selector:\n        app: customapplication\n```", "```\nkubectl get service\n```", "```\nKubectl apply -f [file]\n```", "```\nreadinessProbe:\n          httpGet:\n             path: /\n             port: 80\n             initialDelaySeconds: 5\n             periodSeconds: 5\n             successThreshold: 1\n```", "```\nkubectl describe deployment kubernetes-deployment\n```", "```\nkubectl scale --replicas=[number of pods] deployment/[deploymentname]\n```", "```\nresources:\n  requests:\n     cpu: 0.25\n  limits:\n     cpu: 0.5\n```", "```\nkubectl autoscale deployment [deployment name] --cpu-percent=60 --min=1 --max=10\n```", "```\nkubectl get hpa\n```", "```\naz aks show --resource-group mpn-rg-kubernetes --name mykubernetescluster  --query agentPoolProfiles\n```", "```\naz aks scale --resource-group mpn-rg-kubernetes --name mykubernetescluster --node-count 2 --nodepool-name nodepool1\n```", "```\naz aks update --resource-group mmpn-rg-kubernetes --name mykubernetescluster   --update-cluster-autoscaler --min-count 1 --max-count 5\n```", "```\ntask: KubernetesManifest@0\n  inputs:\n  action: 'deploy'\n  kubernetesServiceConnection: '[service connection name]'\n  manifests: '[path to your deployment file]'\n  containers: 'msftazuredevops.azurecr.io/azuredevops:$(Build.BuildID)'\n```", "```\nstages:\n  - stage : Build\n    displayName : Build\n    jobs:\n     - job:\n       pool:\n           vmImage: 'ubuntu-latest'\n       continueOnError: false\n       steps:\n       - task: Docker@2\n         inputs:\n           containerRegistry: '[Container Registry service connection]'\n           repository: 'azuredevops'\n           command: 'buildAndPush'\n           Dockerfile: '**/Dockerfile'\n           buildContext: '$(System.DefaultWorkingDirectory)/[folder path\n for docker]'\n       - task: CopyFiles@2\n         inputs:\n           SourceFolder: '$(system.defaultworkingdirectory)/[path to the\n deployment manifest files]'\n           Contents: '*'\n           TargetFolder: '$(build.artifactstagingdirectory)'\n           flattenFolders: true\n       - task: PublishBuildArtifacts@1\n         inputs:\n           PathtoPublish: '$(Build.ArtifactStagingDirectory)'\n           ArtifactName: 'drop'\n           publishLocation: 'Container'\n```", "```\n- stage : Release\n    displayName : Release\n    jobs:\n     - deployment: KubernetesDeploy\n       displayName: Deploy Kubernetes\n       pool:\n         vmImage: 'ubuntu-latest'\n       environment: 'Kubernetes'\n       strategy:\n         runOnce:\n           deploy:\n             steps:\n             - task: DownloadPipelineArtifact@2\n               displayName: 'Download pipeline artifacts'\n               inputs:\n                 buildType: 'current'\n                 targetPath: '$(Pipeline.Workspace)'\n             - task: KubernetesManifest@0\n               inputs:\n                 action: 'deploy'\n                 kubernetesServiceConnection: '[Kubernetes service\n connection]'\n                 manifests: '$(Pipeline.Workspace)[deployment manifest]’\n                 containers: '[container registry]:$(Build.BuildID)'\n```"]