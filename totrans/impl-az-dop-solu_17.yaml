- en: Planning Your Azure DevOps Organization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, you learned about many techniques and practices concerning
    DevOps. In this chapter, we will take a step back and look at how you can build
    a strong DevOps organization and what you need to think about when doing so. Next,
    you will learn what this can bring you with regard to security and traceability.
    From there on, you will learn how you can consolidate your toolchain, standardizing
    on Azure DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: We will begin by creating an Azure DevOps organization where you will learn
    which constructs are available to lay out your products and teams in the tool.
    You will also learn about licensing and the security implications of the different
    approaches. Next, you will learn about traceability and how that can be used to
    create a verifiable software development process. Next up is the consolidation
    of the tools used. As you progress on your DevOps journey, you may find that each
    team uses different tools that it is familiar with and enjoys working with. While
    DevOps is all about empowering people, some level of standardization might be
    desirable, and you will learn how to go about this. Finally, you will read that
    you might have to accept that you will never be completely done adopting DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an Azure DevOps organization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensuring traceability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consolidating tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accepting there is no end state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow along with the practical parts of this chapter, one of the following
    is needed:'
  prefs: []
  type: TYPE_NORMAL
- en: A Microsoft Live account, also called a personal account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A work or school account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up an Azure DevOps organization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To practice with one or more of the technologies and techniques described in
    the previous chapters, an Azure DevOps organization might have been created specifically
    for this use, or maybe one was available already that could be used for this purpose.
    However, creating an organization for a company from scratch takes a little more
    consideration. Taking the time to properly plan the layout of the organization
    can save a lot of time later on.
  prefs: []
  type: TYPE_NORMAL
- en: This section describes the components out of which Azure DevOps is built, how
    you can use this to organize a fitting security model, and licensing options and
    costs.
  prefs: []
  type: TYPE_NORMAL
- en: How Azure DevOps is organized
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The top-level construct in Azure DevOps is called an organization. For most
    companies, a total of one organization will suffice, but it is allowed to create
    more than one.
  prefs: []
  type: TYPE_NORMAL
- en: Each Azure DevOps organization is hosted in a specific region. Most of the data
    (source code and work items) for the organization is guaranteed to be located
    in the region for the organization, but some information is always stored in other
    data centers due to the global reach of the service. Having a distributed organization
    with teams and products in different geographies can be one reason for using more
    than one organization.Â For example, if some teams are located in Australia and
    some in West Europe, it makes sense to create two separate organizations and host
    all teams in the geography closest to them. This will locate the bulk of the services
    that are physically close to them, greatly reducing latencies when working with
    Azure DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: An organization can be linked to an **Azure Active Directory** (**AAD**). If
    this link is enabled, only users that are inside that particular AAD are allowed
    access to the organization. Using a company AAD is not mandatory; an organization
    can also be created using a Microsoft account.
  prefs: []
  type: TYPE_NORMAL
- en: In each organization, one or more projects can be created. A project is an isolated
    container of work items, source control repositories, pipeline definitions, and
    all other Azure DevOps artifacts. There are only limited sharing and linking possibilities
    between projects. At the time of writing, only work items can be related across
    projects and nothing else can. This way, projects can serve as a strong isolation
    boundary for enforcing rigid security between products or teams if needed. In
    general, it is recommended to have as few projects as possible, with the goal
    of having only one if possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows a possible organization of Azure DevOps organizations
    and projects. It shows that there are two organizations connected to the Azure
    Active Directory. One is located in West Europe, and the other one in Australia.
    In West Europe, there are two projects in the organization, in Australia just
    one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f5fdac9-331b-42cf-86f6-8803b11a314a.png)'
  prefs: []
  type: TYPE_IMG
- en: As stated before, the recommendation is to go with as few organizations and
    projects as possible. But in this example, the latency from Australia to West
    Europe is a good argument to split into two organizations to have Azure DevOps
    hosted close to the teams. The split into two projects in West Europe might be
    due to the need for a high level of isolation for team 4 that is working on product
    3.
  prefs: []
  type: TYPE_NORMAL
- en: Combining the teams 1 to 3 and products 1 and 2 into one project has been done
    on purpose. The reason for this is that within a single project, multiple product
    areas and multiple teams can be defined. Having all of these in a single project
    enables easy linking of work items to do portfolio management. This way, working
    items from one team can also be related to the commits or pull requests of another
    team on another product. This is helpful if features are spread over multiple
    products or applications (components).
  prefs: []
  type: TYPE_NORMAL
- en: To make defining all products and all teams in a single project possible, it
    is important to know about the Azure DevOps security model and how to use this
    for implementing access control.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Azure DevOps organization and project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a new Azure DevOps organization and one or more projects is a task
    often completed by administrators that will also be responsible for managing these
    environments later. These organizations are most likely connected to an Active
    Directory. To create an organization for private use or training and learning
    practices, it might be better to use a personal account.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new organization using a personal account, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to [https://dev.azure.com](https://dev.azure.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose Start free, to start the creation of a new Azure DevOps organization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When prompted with a login dialog, log in using a personal account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After logging in, select the correct country of residence and opt in/out of
    tips and other service updates using the following dialog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/94d4e59c-4d32-4665-8188-6542147ea8af.png)'
  prefs: []
  type: TYPE_IMG
- en: Press Continue to create a new organization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the organization is created, a new wizard will automatically start creating
    the first project. To create the project, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Provide a project name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose between making the project public or private. Private projects are the
    default setting and are intended to create software within an organization and
    not allow anonymous access. Public projects are intended for open source development.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once a new organization and a new project are created, it is possible to make
    changes to these choices using the management interface.
  prefs: []
  type: TYPE_NORMAL
- en: Please keep in mind that renaming the organization or a project will change
    URLs, so all existing integrations and links may break.
  prefs: []
  type: TYPE_NORMAL
- en: It is even possible to change the location of an organization later. This must
    be requested and is not as easy as changing other settings. A link to the documentation
    on how to do this is included at the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Once an organization and project are available, it is time to set up security.
  prefs: []
  type: TYPE_NORMAL
- en: Azure DevOps security model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Within Azure DevOps, authorizations can be assigned to individual users or to
    security groups. The security group is either a logical wrapper around an existing
    AAD group or can be defined within Azure DevOps itself. In general, it is recommended
    to assign authorizations as much as possible to groups and limit individual user
    assignments.
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure the authorizations for a user or security group, two complementary
    approaches are available:'
  prefs: []
  type: TYPE_NORMAL
- en: Organization- and project-level authorizations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Object-level authorizations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When working with the on-premises product, Azure DevOps Server, there are also
    server-level security groups and settings available.
  prefs: []
  type: TYPE_NORMAL
- en: In Azure DevOps services, an organization is called a project collection and
    a project is called a team project. Sometimes, these names are also visible in
    Azure DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: '**Organization-and project-level authorizations**: To allow a user to perform
    a specific action on every object of a certain type, an organization- or project-level
    authorization can be set. As an example, look at the built-in groups,Â `Project
    Collection Build Administrators`,Â respectively,Â `[ProjectName]\Build Administrators`,
    which, by default, have permission to view, manage, and edit build definitions
    and build resources. The permissions that can be set on the organization and project
    level are automatically applied to all individual resources in the organization
    or the project.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Object-level authorizations**: On most of the objects in Azure DevOps, individual
    permissions can be assigned to users or groups. These permissions are set using
    an **Access Control List** (**ACL**) on the object itself. The following example
    shows a classic build definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6db26de9-28e8-4637-9eeb-f0dbb035e864.png)'
  prefs: []
  type: TYPE_IMG
- en: For each group, for each action, it is possible to configure Allow, Deny, Not
    set, or inherited. When an action is configured with Deny, access is never allowed,
    not even if a user is part of a group that has the authorization specified as
    Allow**.** In other words, when there are two conflicting assignments (Allow and
    Deny), Deny will take precedence over Allow. Not set is to be interpreted as an
    implicit deny that does not take precedence. In other words, when there are two
    conflicting assignments (Not set and Allow), the user will be allowed access.
  prefs: []
  type: TYPE_NORMAL
- en: Some artifacts in Azure DevOps are part of a hierarchy. For example, pipelines
    can be in a folder. Whenever inheritance is enabled, permissions from higher in
    the hierarchy will propagate to the artifact. This means that, when a user has
    access to a pipeline folder, all of their rights will propagate to all underlying
    folders and pipelines, if and only if, there are no more specific authorizations
    set.
  prefs: []
  type: TYPE_NORMAL
- en: While the security model determines which authorization a user has, user actions
    are also limited by their assigned access level, which follows from their license.
  prefs: []
  type: TYPE_NORMAL
- en: Azure DevOps licensing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another aspect of creating an Azure DevOps organization is managing licenses.
    Within Azure DevOps, every user needs to have an access level assigned before
    they can log in to the product. There are three access levels defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Stakeholder**: Stakeholders are free users who can log in to the product
    but have limited access to its features. Stakeholders can manage work items, manage
    pipelines, and view dashboards. They do not have access to any of the other product
    areas, making this license level usable for non-development roles only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Basic**: Basic users have a paid license that gives them access to all parts
    of the product, except for test management and advanced test execution functionality.
    A basic user license is priced at â¬ 5.06 per month at the time of writing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Basic and Test plans**: Users of the Basic and Test Plans license option
    have access to all parts of Azure DevOps. They have the same access as basic users,
    but are also provided with test management and tools for user acceptance testing,
    test execution, and test result reporting. At the time of writing, the Basic and
    Test Plans license option is priced at â¬ 43.86 per month.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first five basic licenses for every organization are free. This means that
    experimenting with the product and learning it can be done without incurring any
    costs. Additionally, Visual Studio subscribers can also get free licenses. Professional
    subscribers get a free Basic license and Enterprise subscribers get a free Basic
    and Test PlansÂ license.
  prefs: []
  type: TYPE_NORMAL
- en: Licenses can be assigned and re-assigned at any point, so for a company or team
    with many joiners and leavers, it is not necessary to buy more licenses then they
    have people active at any given point.
  prefs: []
  type: TYPE_NORMAL
- en: Licensing costs are not the only costs that come from using Azure DevOps; it
    is important to also know about the pay-per-use costs.
  prefs: []
  type: TYPE_NORMAL
- en: Consumption-based costs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Licenses give users access to the product and, from there on, they can use
    all of the services in the product at a fixed cost, except for the following two:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure Pipelines parallel executions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Artifacts storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Parallel executions**: By default, every Azure DevOps organization is provided
    with one Microsoft-hosted parallel execution job. This means that, while there
    can be as many pipelines defined as needed, there can be only one executing at
    the same time. Of course, this number can be increased, but this comes at the
    cost of buying more Microsoft-hosted parallel execution jobs, which are currently
    priced at â¬ 33.74 per month.'
  prefs: []
  type: TYPE_NORMAL
- en: As an alternative, it is also possible to buy self-hosted jobs. For these jobs,
    the execution agents are not provided by Microsoft, but have to be provided by
    the organization itself. This provides the opportunity (and responsibility) to
    fully control the hardware. A self-hosted pipeline is currently priced at â¬ 12.65.
  prefs: []
  type: TYPE_NORMAL
- en: '**Artifacts storage**: When working with Azure Artifact feeds, the first 2
    GB of storage used is free. Any extra storage used is charged at a rate of â¬ 1.69
    per month.'
  prefs: []
  type: TYPE_NORMAL
- en: Once more and more of the users of a team have a license for Azure DevOps and
    perform their work there, this can be used to increase traceability for software
    development.
  prefs: []
  type: TYPE_NORMAL
- en: Ensuring traceability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the advantages of Azure DevOps over some of the other tools covered in
    this book is that it is a fully integrated suite of tools, each supporting specific
    DevOps processes. This end-to-end integration allows for detailed and lengthy
    traceability, from work described on the board to the related binaries being deployed
    to an environment.
  prefs: []
  type: TYPE_NORMAL
- en: When working with a set of other tools that support only a part of the DevOps
    process, integrating them is often possible and, of course, this will result in
    some traceability. For example, when working with Jira and GitHub, it is possible
    to relate commits, pull requests, and other changes in GitHub back to work described
    in Jira. When picking merged changes up in Jenkins to build and deploy the product,
    there will also be traceability from Jenkins back to GitHub. However, there will
    be no direct visibility on which work item was completed with which Jenkins deployment
  prefs: []
  type: TYPE_NORMAL
- en: 'The disadvantage of this is that a product owner who works in the Jira tool,
    cannot see whether a completed user story is associated with a release already.
    They would have to visit multiple tools to find the answer to that question: in
    GitHub, they would have to find all commits relating to the story and then see
    whether those commits have been released already using Jenkins:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/326fe846-3c51-4ef0-b235-1feaa4ce841f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When working with Azure Boards, Repos, and Pipelines, this is different. When
    using all of the Azure DevOps services, traceability is possible from story to
    deployment, and the other way around. The following is an example that highlights
    how to see which commits were deployed for the first time to an environment with
    a specific deploy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e067517b-a7e7-47e1-a074-1bdfc7c72fbd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Having this type of end-to-end traceability enables a number of questions to
    be answered quickly, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Has work on this work item already started? (Branches and pull requests can
    be related to work items.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is this work already part of our nightly build? (Commits and build pipelines
    can be related to work items.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is this bug already fixed and is the solution available to our customers on
    ring two already? (Releases and environments show which new commits and work items
    were part of the latest deployment.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One thought that is particularly important to reinforce when talking about traceability
    is that it is not about blame. Traceability is not about finding out who made
    which mistake, but about finding out what the state of things is and how objects
    relate. As soon as traceability becomes the basis for blame, engineers will soon
    find ways to hide their work. This will result in more errors and less visibility,
    only making problems worse.
  prefs: []
  type: TYPE_NORMAL
- en: With the benefits of traceability clear, let's explore how consolidating tools
    can help to reap these benefits.
  prefs: []
  type: TYPE_NORMAL
- en: Consolidating tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One trend that can be observed in the market is that of traceability and DevOps
    products that extend their offerings to include more than only source control,
    only pipelines, or just deployments.Â Examples are GitHub and GitLab, which are
    adding new services. More integrated **Application Lifecycle Management** (**ALM**)
    or DevOps suites emerge, while Azure DevOps has been offering this for years now.
  prefs: []
  type: TYPE_NORMAL
- en: However, there are many companies where these integrated suites are not in place.
    Teams operate in different ecosystems, leading to different tool choices. Or maybe
    teams just have different preferences or started adopting DevOps practices at
    different points in time, with other tools to choose from. No matter the reason,
    there are many companies that have several tools running for the same job.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, several drawbacks are associated with having disconnected tools
    or multiple tools for the same thing:'
  prefs: []
  type: TYPE_NORMAL
- en: Collaboration between teams is hindered if they are using different tools. No
    matter the personal preference of developers, it can prove to be a hindrance to
    productivity when one half of the organization is using Jenkins and the other
    half is using Azure Pipelines. By extension, switching teams or helping others
    out is severely impeded when they are using another tool.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When there are more tools, there are also more costs. Even when all of the tools
    are open source and free, there are still costs involved. These costs can consist
    of, for instance, support contracts or requests, training, or the time needed
    to investigate and overcome specific issues. The same holds for upgrades and maintenance.
    When there are more tools, the total costs increase.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To overcome these challenges, many large companies decide to standardize which
    tools are used, either completely or at least to some extent. As an alternative
    or intermediate solution, it is also possible to use integration between tools
    as a way of starting a consolidation.
  prefs: []
  type: TYPE_NORMAL
- en: Standardizing tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To combat these drawbacks, most companies accept one of two strategies:'
  prefs: []
  type: TYPE_NORMAL
- en: Centralized decision making to select one tool (for each DevOps area) for the
    whole company
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Centralized adoption of a limited set of tools, out of which teams can choose
    which to adopt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Complete centralization**: When completely centralizing, one central team
    or department decides, on behalf of everyone, which DevOps tools will be used
    within the organization. Once such a decision has been made and implemented, this
    reduces costs and makes it easier for engineers to assist in other teams.'
  prefs: []
  type: TYPE_NORMAL
- en: The downside is, of course, that one single tool is not necessarily the best
    choice for everyone while, for the organization as aÂ whole, the selected tool
    might be the bestâsuch standardization can do damage in a number of edge cases.
  prefs: []
  type: TYPE_NORMAL
- en: '**Limited centralization**: To prevent this, other companies choose to have
    limited centralization. Instead of just one tool, a group of tools is chosen as
    the company''s standard. Teams are now able to make their own choice out of two
    or three tools, depending on their specific needs. This limits many of the drawbacks
    of full decentralization while not sacrificing the productivity of teams with
    very specific needs.'
  prefs: []
  type: TYPE_NORMAL
- en: Adopting one of these two strategies might mean that some existing tools will
    be deprecated or decommissioned altogether. This can be a slow and painful process,
    especially in large organizations where there are often conflicting interests.
    There are many ways to go about this, but there are strategies to make such a
    migration less painful.
  prefs: []
  type: TYPE_NORMAL
- en: Migration strategies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Reducing the number of DevOps tools in use often means one or more tools must
    be decommissioned. This can be difficult since often, these tools are used to
    implementÂ governance and compliance, as required by laws and regulations. In practice,
    this means that one of two things can be done:'
  prefs: []
  type: TYPE_NORMAL
- en: Old tools are not completely decommissioned but just no longer used, to maintain
    the change history.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: History must be migrated to the new tools as well before the old tools can be
    decommissioned.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When choosing to do a migration, there are four ways to go about this:'
  prefs: []
  type: TYPE_NORMAL
- en: Azure DevOps Server to Azure DevOps Services migration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Big-bang migration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Synchronization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rebuilding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure DevOps Server used to be called **Team Foundation Server** (**TFS**).Â Older
    versions of TFS need to be upgraded to one of the latest versions of Azure DevOps
    Server before they can be imported into Azure DevOps Services. The import service
    alwaysÂ supports the latest two versions of Azure DevOps Server
  prefs: []
  type: TYPE_NORMAL
- en: All three of these are detailed in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Azure DevOps Server to Azure DevOps Services migration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For organizations wanting to move from working with Azure DevOps Server to
    Azure DevOps Services, there is a high-fidelity migration service available. Every
    project collection that currently exists in the on-premises Azure DevOps Server
    environment can be migrated to an Azure DevOps organization using the Azure DevOps
    Server import service. All of the assets currently existing in the on-premises
    project collection will be migrated to Azure DevOps: work items, source control
    repositories, and build and release definitions.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The migration of a project collection consists of the following high-level
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Validating whether a project collection is ready for migration: This step does
    not make any changes, but only checks whether all preconditions for a migration
    have been met.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Preparing the migration: In this step, a JSON file is generated that describes
    how the migration should be performed. A second file can also be supplied for
    linking on-premises identity to AAD identities to ensure that all of the history
    is still correctly linked to who made the change after the migration.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A dry run of the migration is done to verify that the import process will result
    in the expected outcomes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The actual migration: In this step, the collection is taken offline, a DACPAC
    is generated from the project collection database, the DACPAC and files from step
    two are uploaded, and the migration is initiated.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the import, all assets need to be verified and, in specific scenarios,Â some
    post-import actions have to be taken.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For using the migration service, a comprehensive guide with checklists and step-by-step
    instructions is available and linked to at the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Big-bang migration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The second possible strategy is a big-bang migration. At some point, the old
    tool is switched off, all data is migrated to the new tool, and the new tool is
    made available. If there is anything that does not breathe DevOps, it is such
    a migration. It has a high potential for issues and often there is no turning
    back. Often, this is not a good migration strategy.
  prefs: []
  type: TYPE_NORMAL
- en: However, one situation where such an approach might make sense is the migration
    of source control. There are tools available for migrating from different sources
    to any type of hosted Git solution, including Azure DevOps. Source control also
    has the benefit that change history is built so deep into the system that migrating
    with history is often easier than for other types of data.
  prefs: []
  type: TYPE_NORMAL
- en: Synchronization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another strategy for migration is allowing for a period of time where both tools
    can be used at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: One way to do this is by using a tool that can be used to sync between the old
    and the new tool. This can be either in one direction, from old to new, or in
    both directions. This way, an in-between situation is created where both tools
    can be in use at the same time. Every team can choose its own time for its migration
    within a certain window. This avoids a forced migration window. Teams can also
    opt to use both tools next to each other for a while. This allows them to learn
    the new tool, while still being able to switch to the tool that they know if they
    are under pressure. After a period of transition, the old tool can be made read-only
    or decommissioned completely. This approach often works well for work tracking
    systems. Between these systems, the concepts are often very similar (epics, features,
    stories, and sprints), which makes a synchronization a feasible approach.
  prefs: []
  type: TYPE_NORMAL
- en: Rebuilding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A slightly different approach is that of asking teams to rebuild in the new
    tool. This approach also creates an in-parallel situation, but there is no automated
    migration or synchronization. Teams will have to redo their process or way of
    working in the new tool. Since this can take a while, the old tool will remain
    while teams are working on this. One situation where this is often a good approach
    is that of build and/or release pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: No matter the strategy that has been chosen, in all cases, it helps to make
    sure that the new tool or tools are an improvement for the teams over the existing
    tools. This should improve performance, traceability, ease of use, or integration
    with other company tools. A positive vibe around any migration can improve the
    outcomes dramatically.
  prefs: []
  type: TYPE_NORMAL
- en: As an alternative to migrating to a single tool, integrations between tools
    can be used to bring existing tools together.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As an alternative to replacing no longer preferred tools, it is also possible
    to integrate them with the preferred tool. Especially when it has been decided
    to move to Azure DevOps, this can be a powerful strategy. In many of the chapters
    before, for each topic, different tools were listed that integrate with Azure
    DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: When pursuing end-to-end traceability, these integrations can be used as a means
    to bring tools closer together. Consider the following example.
  prefs: []
  type: TYPE_NORMAL
- en: 'An organization is using Azure DevOps for managing work items, hosting Git
    repositories, and executing build pipelines. Deployments are done using Octopus
    Deploy for historic reasons. Since a full migration is too costly, as an alternative,
    an integration strategy is chosen. Triggering the Octopus Deploy not manually
    but automatically from Azure DevOps meets several goals:'
  prefs: []
  type: TYPE_NORMAL
- en: End-to-end automation is achieved.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release management can now also be done in Azure DevOps, even though each deployment
    in Azure DevOps is no more than triggering Octopus Deploy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having release management in Azure DevOps now allows for end-to-end traceability.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When consolidating tools, and really all things regarding DevOps, one thing
    that you must be ready to accept is that you are never done.
  prefs: []
  type: TYPE_NORMAL
- en: Accepting there is no end state
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is fair to expect that, at any point in time, there will be one or more improvements
    that teams want to make to their applications, toolchain, or way of working. To
    cope with this, it is recommended to not keep changing everything all of the time.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, try to implement changes in batches or a series of well-defined steps.
    Also, note there is a natural order in things. It is impossible to practice continuous
    deployment without having a proper continuous integration process first. Also,
    adopting infrastructure as code will deliver the most value when a continuous
    deployment process for application code is already in place. Next, automating
    governance and security measures works best when infrastructure and configuration
    code is common practice. And once all of these practices have been implemented,
    new things will come up on the radarâfuture improvements that may be necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Besides this series of improvements, it is also important to realize that not
    every team is at the same place in this journey and not every team can move at
    the same pace and that development is not always this linear.
  prefs: []
  type: TYPE_NORMAL
- en: But this does not mean that it is impossible to track and plan future changes
    and have learnings from one team applied to other teams as well. One oversimplified
    approach to tracking this can be a table, as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we see the adoption of different DevOps practices or ideas among five
    teams. All teams are practicing **continuous**Â **integration** (**CI**). Some
    of them are practicing **continuous**Â **deployment** (**CD**), while team 3 is
    still working on that (**Work in Progress**, **WIP**) and the fifth team has not
    started yet. Finally, team 2 is already experimenting with **infrastructure as
    code** (**IaC**). Finally, as there is no end state, it is only a matter of time
    before the next practice or idea will pop up and a team will start experimenting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9cbda328-5e0a-436d-9dac-fbd75730da2e.png)'
  prefs: []
  type: TYPE_IMG
- en: If a table, similar to the one shown in the preceding, is updated, evaluated,
    and expanded upon frequently, this helps to foster continuous learning and improve
    the way software is created and delivered. Learning and improving will become
    the standard and this will help to improve the delivery of value to end users.
    It also shows that adopting DevOps is never done.
  prefs: []
  type: TYPE_NORMAL
- en: It also provides the means to see which teams are at the forefront and which
    teams are following along. By giving teams who are in the lead more room for experimentation
    and knowledge sharing with other teams, organizations can encourage their leader
    teams to improve even more while, at the same time, accelerating other teams as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: And with this remark about the need to keep learning, experimenting, and pushing
    yourself, it is a great time to wrap this book up. Let's recap this chapter in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to configure your Azure DevOps organization
    and how to create a layout for your products and teams. You learned what the implications
    are regarding the different configuration options and how to apply those. Next,
    you learned how you can use Azure DevOps to add traceability to your development
    process. You learned how to capture ideas and tasks in stories and tasks and how
    these can be traced all of the way to a deployment and the other way around. The
    next thing you learned about is how to approach the consolidation of tools used
    within your organization and when to stop trying to consolidate tools. Finally,
    you learned that it is important to continuously keep improving.
  prefs: []
  type: TYPE_NORMAL
- en: With the things you learned in this chapter, you are now capable of setting
    up and configuring Azure DevOps for your team, teams, or organization. You can
    create a structure that fits your organization and start using it with just one
    or multiple teams. You are also able to slowly standardize your way of working
    and consolidate the teams on the same set of tools.
  prefs: []
  type: TYPE_NORMAL
- en: This completes the final chapter of this book. You can refer to this book as
    a basis for taking the AZ-400 exam, as most of the topics are along similar lines.
    However, in order to be well prepared for the exam, I recommend reading more about
    them in other sources as well and try to get as much hands-on experience as you
    can. As a practice tool, the concluding chapter contains a mock exam to help you
    prepare for the final exam.
  prefs: []
  type: TYPE_NORMAL
- en: Good luck!
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we conclude, here is a list of questions for you to test your knowledge
    regarding this chapter''s material. You will find the answers in the *Assessments*
    section of the Appendix:'
  prefs: []
  type: TYPE_NORMAL
- en: 'True or False: All data stored in Azure DevOps by users is guaranteed to be
    contained within one region.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Reorder the following Azure DevOps concepts in such a way that each next element
    acts as a container for the next concept in the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Work item
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Organization
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Region
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Project
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'True or False: The general recommendation is to create a new project for every
    application that is developed by your organization.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which two elements limit the actions any user can perform within Azure DevOps?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the main benefit of using a single tool for application life cycle management/DevOps
    as opposed to a suite of tools?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: More information on Azure DevOps projects and when to create more than one project
    can be found at [https://docs.microsoft.com/en-us/azure/devops/organizations/projects/about-projects?view=azure-devops#when-to-add-another-project](https://docs.microsoft.com/en-us/azure/devops/organizations/projects/about-projects?view=azure-devops%23when-to-add-another-project).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More information about the Azure DevOps security model can be found at [https://docs.microsoft.com/en-us/azure/devops/organizations/security](https://docs.microsoft.com/en-us/azure/devops/organizations/security).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Up-to-date information on Azure DevOps pricing can be found at [https://azure.microsoft.com/en-us/pricing/details/devops/azure-devops-services/](https://azure.microsoft.com/en-us/pricing/details/devops/azure-devops-services/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More information about the Azure DevOps Server-import service can be found at
    [https://docs.microsoft.com/en-us/azure/devops/migrate/migration-overview?view=azure-devops&viewFallbackFrom=vsts](https://docs.microsoft.com/en-us/azure/devops/migrate/migration-overview?view=azure-devops&viewFallbackFrom=vsts).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
