- en: Planning Your Azure DevOps Organization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规划你的 Azure DevOps 组织
- en: In the previous chapters, you learned about many techniques and practices concerning
    DevOps. In this chapter, we will take a step back and look at how you can build
    a strong DevOps organization and what you need to think about when doing so. Next,
    you will learn what this can bring you with regard to security and traceability.
    From there on, you will learn how you can consolidate your toolchain, standardizing
    on Azure DevOps.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，你学习了许多关于 DevOps 的技术和实践。在本章中，我们将退后一步，看看如何构建一个强大的 DevOps 组织，以及在此过程中需要考虑的事项。接下来，你将了解这能为你带来关于安全性和追踪性的好处。从此以后，你将学习如何整合你的工具链，并在
    Azure DevOps 上进行标准化。
- en: We will begin by creating an Azure DevOps organization where you will learn
    which constructs are available to lay out your products and teams in the tool.
    You will also learn about licensing and the security implications of the different
    approaches. Next, you will learn about traceability and how that can be used to
    create a verifiable software development process. Next up is the consolidation
    of the tools used. As you progress on your DevOps journey, you may find that each
    team uses different tools that it is familiar with and enjoys working with. While
    DevOps is all about empowering people, some level of standardization might be
    desirable, and you will learn how to go about this. Finally, you will read that
    you might have to accept that you will never be completely done adopting DevOps.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从创建一个 Azure DevOps 组织开始，在这里你将学习如何在工具中布局你的产品和团队，并了解有哪些构造可以使用。你还将了解许可和不同方法的安全性影响。接下来，你将学习追踪性及其如何帮助创建可验证的软件开发过程。接下来是工具的整合。随着你在
    DevOps 旅程中的进展，你可能会发现每个团队使用的是它们熟悉并喜欢使用的不同工具。虽然 DevOps 强调赋能人员，但某种程度的标准化可能是可取的，你将学习如何进行标准化。最后，你将了解到，可能你永远无法完全完成
    DevOps 的采用。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Setting up an Azure DevOps organization
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Azure DevOps 组织
- en: Ensuring traceability
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保追踪性
- en: Consolidating tools
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具整合
- en: Accepting there is no end state
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接受没有结束状态的现实
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along with the practical parts of this chapter, one of the following
    is needed:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章的实际操作部分，以下任一项是必需的：
- en: A Microsoft Live account, also called a personal account
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Microsoft Live 账户，也叫个人账户
- en: A work or school account
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个工作或学校账户
- en: Setting up an Azure DevOps organization
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Azure DevOps 组织
- en: To practice with one or more of the technologies and techniques described in
    the previous chapters, an Azure DevOps organization might have been created specifically
    for this use, or maybe one was available already that could be used for this purpose.
    However, creating an organization for a company from scratch takes a little more
    consideration. Taking the time to properly plan the layout of the organization
    can save a lot of time later on.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实践之前章节中描述的一个或多个技术和技巧，可能已经为此目的创建了一个专门的 Azure DevOps 组织，或者也许已经有一个现成的可以用来做这个的组织。然而，为公司从零开始创建组织需要更多的考虑。花时间合理规划组织的布局，可以节省很多后续时间。
- en: This section describes the components out of which Azure DevOps is built, how
    you can use this to organize a fitting security model, and licensing options and
    costs.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了构建 Azure DevOps 所需的组件，如何使用这些组件来组织适合的安全模型，以及许可选项和成本。
- en: How Azure DevOps is organized
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure DevOps 的组织方式
- en: The top-level construct in Azure DevOps is called an organization. For most
    companies, a total of one organization will suffice, but it is allowed to create
    more than one.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps 中的顶层构造称为组织。对于大多数公司来说，通常只需要一个组织，但也允许创建多个组织。
- en: Each Azure DevOps organization is hosted in a specific region. Most of the data
    (source code and work items) for the organization is guaranteed to be located
    in the region for the organization, but some information is always stored in other
    data centers due to the global reach of the service. Having a distributed organization
    with teams and products in different geographies can be one reason for using more
    than one organization. For example, if some teams are located in Australia and
    some in West Europe, it makes sense to create two separate organizations and host
    all teams in the geography closest to them. This will locate the bulk of the services
    that are physically close to them, greatly reducing latencies when working with
    Azure DevOps.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 Azure DevOps 组织都托管在特定的区域。组织的大多数数据（源代码和工作项）都保证位于该组织所在的区域，但由于服务的全球覆盖，一些信息始终存储在其他数据中心。拥有分布式组织，且团队和产品分布在不同地理位置，可能是使用多个组织的原因。例如，如果某些团队位于澳大利亚，另一些位于西欧，那么创建两个独立的组织并将所有团队托管在离他们最近的地理位置是有意义的。这将使大部分服务物理上接近他们，从而在使用
    Azure DevOps 时大大减少延迟。
- en: An organization can be linked to an **Azure Active Directory** (**AAD**). If
    this link is enabled, only users that are inside that particular AAD are allowed
    access to the organization. Using a company AAD is not mandatory; an organization
    can also be created using a Microsoft account.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一个组织可以与 **Azure Active Directory**（**AAD**）相关联。如果启用此链接，只有该特定 AAD 内的用户才允许访问该组织。使用公司
    AAD 并非强制性的；也可以使用 Microsoft 帐户创建一个组织。
- en: In each organization, one or more projects can be created. A project is an isolated
    container of work items, source control repositories, pipeline definitions, and
    all other Azure DevOps artifacts. There are only limited sharing and linking possibilities
    between projects. At the time of writing, only work items can be related across
    projects and nothing else can. This way, projects can serve as a strong isolation
    boundary for enforcing rigid security between products or teams if needed. In
    general, it is recommended to have as few projects as possible, with the goal
    of having only one if possible.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个组织中，可以创建一个或多个项目。项目是一个独立的工作项、源代码库、管道定义以及所有其他 Azure DevOps 工件的容器。项目之间的共享和链接可能性是有限的。写作时，只有工作项可以跨项目相关联，其他的则不能。通过这种方式，项目可以作为强大的隔离边界，在需要时强制执行产品或团队之间的严格安全性。通常建议尽量减少项目的数量，目标是尽可能只有一个项目。
- en: 'The following diagram shows a possible organization of Azure DevOps organizations
    and projects. It shows that there are two organizations connected to the Azure
    Active Directory. One is located in West Europe, and the other one in Australia.
    In West Europe, there are two projects in the organization, in Australia just
    one:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了 Azure DevOps 组织和项目的可能组织结构。它显示了两个组织与 Azure Active Directory 相连接，一个位于西欧，另一个位于澳大利亚。在西欧的组织中有两个项目，而在澳大利亚只有一个项目：
- en: '![](img/5f5fdac9-331b-42cf-86f6-8803b11a314a.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5f5fdac9-331b-42cf-86f6-8803b11a314a.png)'
- en: As stated before, the recommendation is to go with as few organizations and
    projects as possible. But in this example, the latency from Australia to West
    Europe is a good argument to split into two organizations to have Azure DevOps
    hosted close to the teams. The split into two projects in West Europe might be
    due to the need for a high level of isolation for team 4 that is working on product
    3.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，建议尽量使用较少的组织和项目。但在这个例子中，澳大利亚到西欧的延迟是将其拆分为两个组织的一个合理理由，以便将 Azure DevOps 托管在靠近团队的位置。在西欧将其拆分为两个项目，可能是由于第4个团队在处理第3个产品时需要较高的隔离级别。
- en: Combining the teams 1 to 3 and products 1 and 2 into one project has been done
    on purpose. The reason for this is that within a single project, multiple product
    areas and multiple teams can be defined. Having all of these in a single project
    enables easy linking of work items to do portfolio management. This way, working
    items from one team can also be related to the commits or pull requests of another
    team on another product. This is helpful if features are spread over multiple
    products or applications (components).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 将团队1到3和产品1与2合并为一个项目是故意为之。原因在于，在一个单独的项目中，可以定义多个产品领域和多个团队。将所有这些内容集中在一个项目中，可以方便地将工作项链接起来进行组合管理。这样，一个团队的工作项也可以与另一个团队在另一个产品上的提交或拉取请求相关联。如果功能跨多个产品或应用（组件）分布，这将非常有帮助。
- en: To make defining all products and all teams in a single project possible, it
    is important to know about the Azure DevOps security model and how to use this
    for implementing access control.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使在单个项目中定义所有产品和所有团队成为可能，了解 Azure DevOps 安全模型及其访问控制实现方式非常重要。
- en: Creating an Azure DevOps organization and project
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Azure DevOps 组织和项目
- en: Creating a new Azure DevOps organization and one or more projects is a task
    often completed by administrators that will also be responsible for managing these
    environments later. These organizations are most likely connected to an Active
    Directory. To create an organization for private use or training and learning
    practices, it might be better to use a personal account.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新的 Azure DevOps 组织和一个或多个项目通常是由管理员完成的任务，这些管理员稍后还将负责管理这些环境。这些组织很可能连接到 Active
    Directory。如果是为了私人使用或培训和学习目的创建组织，建议使用个人账户。
- en: 'To create a new organization using a personal account, do the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用个人账户创建新组织，请执行以下操作：
- en: Navigate to [https://dev.azure.com](https://dev.azure.com).
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[https://dev.azure.com](https://dev.azure.com)。
- en: Choose Start free, to start the creation of a new Azure DevOps organization.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“开始免费”以开始创建新的 Azure DevOps 组织。
- en: When prompted with a login dialog, log in using a personal account.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出的登录对话框中，使用个人账户登录。
- en: 'After logging in, select the correct country of residence and opt in/out of
    tips and other service updates using the following dialog:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，选择正确的居住国家，并通过以下对话框选择是否接收提示和其他服务更新：
- en: '![](img/94d4e59c-4d32-4665-8188-6542147ea8af.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/94d4e59c-4d32-4665-8188-6542147ea8af.png)'
- en: Press Continue to create a new organization.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下“继续”按钮以创建新组织。
- en: 'Once the organization is created, a new wizard will automatically start creating
    the first project. To create the project, do the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 创建组织后，将自动启动向导以创建第一个项目。要创建项目，请执行以下操作：
- en: Provide a project name.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供项目名称。
- en: Choose between making the project public or private. Private projects are the
    default setting and are intended to create software within an organization and
    not allow anonymous access. Public projects are intended for open source development.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择将项目设为公开或私有。私有项目是默认设置，旨在组织内部创建软件并不允许匿名访问。公开项目则用于开源开发。
- en: Once a new organization and a new project are created, it is possible to make
    changes to these choices using the management interface.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新组织和新项目后，可以使用管理界面对这些选项进行更改。
- en: Please keep in mind that renaming the organization or a project will change
    URLs, so all existing integrations and links may break.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，重命名组织或项目将更改 URL，因此所有现有的集成和链接可能会中断。
- en: It is even possible to change the location of an organization later. This must
    be requested and is not as easy as changing other settings. A link to the documentation
    on how to do this is included at the end of this chapter.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至可以稍后更改组织的位置。这需要提交请求，并不像更改其他设置那样简单。本章末尾包含了如何执行此操作的文档链接。
- en: Once an organization and project are available, it is time to set up security.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦组织和项目可用，就可以开始设置安全性。
- en: Azure DevOps security model
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure DevOps 安全模型
- en: Within Azure DevOps, authorizations can be assigned to individual users or to
    security groups. The security group is either a logical wrapper around an existing
    AAD group or can be defined within Azure DevOps itself. In general, it is recommended
    to assign authorizations as much as possible to groups and limit individual user
    assignments.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure DevOps 中，可以将授权分配给单个用户或安全组。安全组可以是现有 AAD 组的逻辑封装，也可以在 Azure DevOps 中定义。一般来说，建议尽可能将授权分配给组，限制单个用户的授权。
- en: 'To configure the authorizations for a user or security group, two complementary
    approaches are available:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置用户或安全组的授权，有两种互补的方式可供选择：
- en: Organization- and project-level authorizations
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织级和项目级授权
- en: Object-level authorizations
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象级授权
- en: When working with the on-premises product, Azure DevOps Server, there are also
    server-level security groups and settings available.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用本地产品 Azure DevOps Server 时，还可以使用服务器级安全组和设置。
- en: In Azure DevOps services, an organization is called a project collection and
    a project is called a team project. Sometimes, these names are also visible in
    Azure DevOps.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure DevOps 服务中，组织被称为项目集合，项目被称为团队项目。有时，这些名称也会在 Azure DevOps 中出现。
- en: '**Organization-and project-level authorizations**: To allow a user to perform
    a specific action on every object of a certain type, an organization- or project-level
    authorization can be set. As an example, look at the built-in groups, `Project
    Collection Build Administrators`, respectively, `[ProjectName]\Build Administrators`,
    which, by default, have permission to view, manage, and edit build definitions
    and build resources. The permissions that can be set on the organization and project
    level are automatically applied to all individual resources in the organization
    or the project.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**组织级和项目级授权**：为了允许用户在某一类型的所有对象上执行特定操作，可以设置组织级或项目级授权。例如，查看内置组 `Project Collection
    Build Administrators`，以及 ` [ProjectName]\Build Administrators`，这些组默认有权限查看、管理和编辑构建定义和构建资源。可以在组织和项目级别设置的权限会自动应用于组织或项目中的所有单个资源。'
- en: '**Object-level authorizations**: On most of the objects in Azure DevOps, individual
    permissions can be assigned to users or groups. These permissions are set using
    an **Access Control List** (**ACL**) on the object itself. The following example
    shows a classic build definition:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**对象级授权**：在 Azure DevOps 的大多数对象上，可以为用户或组分配个别权限。这些权限通过在对象本身上设置**访问控制列表**（**ACL**）来配置。以下示例展示了一个经典的构建定义：'
- en: '![](img/6db26de9-28e8-4637-9eeb-f0dbb035e864.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6db26de9-28e8-4637-9eeb-f0dbb035e864.png)'
- en: For each group, for each action, it is possible to configure Allow, Deny, Not
    set, or inherited. When an action is configured with Deny, access is never allowed,
    not even if a user is part of a group that has the authorization specified as
    Allow**.** In other words, when there are two conflicting assignments (Allow and
    Deny), Deny will take precedence over Allow. Not set is to be interpreted as an
    implicit deny that does not take precedence. In other words, when there are two
    conflicting assignments (Not set and Allow), the user will be allowed access.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个组、每个操作，可以配置“允许”（Allow）、“拒绝”（Deny）、“未设置”（Not set）或继承（inherited）。当一个操作配置为“拒绝”（Deny）时，访问永远不被允许，即使用户是某个组的成员，而该组的授权被指定为“允许”（Allow）。换句话说，当有两个冲突的授权（允许和拒绝）时，“拒绝”优先于“允许”。“未设置”（Not
    set）应被解释为一种隐式拒绝，它不具有优先权。换句话说，当有两个冲突的授权（未设置和允许）时，用户将被允许访问。
- en: Some artifacts in Azure DevOps are part of a hierarchy. For example, pipelines
    can be in a folder. Whenever inheritance is enabled, permissions from higher in
    the hierarchy will propagate to the artifact. This means that, when a user has
    access to a pipeline folder, all of their rights will propagate to all underlying
    folders and pipelines, if and only if, there are no more specific authorizations
    set.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure DevOps 中，一些工件是层级结构的一部分。例如，管道可以位于文件夹中。每当启用继承时，来自更高层级的权限将传播到该工件。这意味着，当用户有权访问一个管道文件夹时，所有的权限将传播到所有底层文件夹和管道，前提是没有更具体的授权设置。
- en: While the security model determines which authorization a user has, user actions
    are also limited by their assigned access level, which follows from their license.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然安全模型决定了用户的授权，但用户的操作也受到其分配的访问级别的限制，而访问级别是基于其许可证的。
- en: Azure DevOps licensing
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure DevOps 许可证
- en: 'Another aspect of creating an Azure DevOps organization is managing licenses.
    Within Azure DevOps, every user needs to have an access level assigned before
    they can log in to the product. There are three access levels defined:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 Azure DevOps 组织的另一个方面是管理许可证。在 Azure DevOps 中，每个用户在登录产品之前需要分配一个访问级别。定义了三种访问级别：
- en: '**Stakeholder**: Stakeholders are free users who can log in to the product
    but have limited access to its features. Stakeholders can manage work items, manage
    pipelines, and view dashboards. They do not have access to any of the other product
    areas, making this license level usable for non-development roles only.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**利益相关者**：利益相关者是免费的用户，可以登录产品，但对其功能的访问权限有限。利益相关者可以管理工作项、管理管道和查看仪表板。他们无法访问其他任何产品区域，因此此许可证级别仅适用于非开发角色。'
- en: '**Basic**: Basic users have a paid license that gives them access to all parts
    of the product, except for test management and advanced test execution functionality.
    A basic user license is priced at € 5.06 per month at the time of writing.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础版**：基础版用户拥有付费许可证，允许他们访问产品的所有部分，但不包括测试管理和高级测试执行功能。在撰写本文时，基础版用户许可证的费用为每月
    5.06 欧元。'
- en: '**Basic and Test plans**: Users of the Basic and Test Plans license option
    have access to all parts of Azure DevOps. They have the same access as basic users,
    but are also provided with test management and tools for user acceptance testing,
    test execution, and test result reporting. At the time of writing, the Basic and
    Test Plans license option is priced at € 43.86 per month.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础版和测试计划**：使用基础版和测试计划许可证选项的用户可以访问 Azure DevOps 的所有部分。他们拥有与基础用户相同的访问权限，同时还提供了测试管理工具以及用户验收测试、测试执行和测试结果报告工具。截至目前，基础版和测试计划许可证选项的费用是每月
    43.86 欧元。'
- en: The first five basic licenses for every organization are free. This means that
    experimenting with the product and learning it can be done without incurring any
    costs. Additionally, Visual Studio subscribers can also get free licenses. Professional
    subscribers get a free Basic license and Enterprise subscribers get a free Basic
    and Test Plans license.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 每个组织的前五个基础许可证是免费的。这意味着，用户可以在不产生任何费用的情况下尝试和学习该产品。此外，Visual Studio 订阅者还可以获得免费的许可证。专业版订阅者可获得免费的基础许可证，企业版订阅者则可获得免费的基础版和测试计划许可证。
- en: Licenses can be assigned and re-assigned at any point, so for a company or team
    with many joiners and leavers, it is not necessary to buy more licenses then they
    have people active at any given point.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 授权可以随时分配和重新分配，因此对于一个有许多加入和离开的公司或团队，在任何时刻都不需要购买比实际活跃人员更多的授权。
- en: Licensing costs are not the only costs that come from using Azure DevOps; it
    is important to also know about the pay-per-use costs.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 授权费用并不是使用 Azure DevOps 时唯一的费用；了解按使用量计费的费用同样非常重要。
- en: Consumption-based costs
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于消费的费用
- en: 'Licenses give users access to the product and, from there on, they can use
    all of the services in the product at a fixed cost, except for the following two:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 授权使用户能够访问产品，之后他们可以以固定费用使用产品中的所有服务，除了以下两项：
- en: Azure Pipelines parallel executions
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Pipelines 并行执行
- en: Azure Artifacts storage
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Artifacts 存储
- en: '**Parallel executions**: By default, every Azure DevOps organization is provided
    with one Microsoft-hosted parallel execution job. This means that, while there
    can be as many pipelines defined as needed, there can be only one executing at
    the same time. Of course, this number can be increased, but this comes at the
    cost of buying more Microsoft-hosted parallel execution jobs, which are currently
    priced at € 33.74 per month.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**并行执行**：默认情况下，每个 Azure DevOps 组织都提供一个由 Microsoft 托管的并行执行作业。这意味着，虽然可以定义任意数量的流水线，但同一时间只能有一个作业在执行。当然，这个数量是可以增加的，但需要额外购买更多的
    Microsoft 托管的并行执行作业，每个作业当前的费用是每月 33.74 欧元。'
- en: As an alternative, it is also possible to buy self-hosted jobs. For these jobs,
    the execution agents are not provided by Microsoft, but have to be provided by
    the organization itself. This provides the opportunity (and responsibility) to
    fully control the hardware. A self-hosted pipeline is currently priced at € 12.65.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种替代方案，还可以购买自托管作业。对于这些作业，执行代理不是由 Microsoft 提供，而是由组织自行提供。这提供了完全控制硬件的机会（和责任）。目前，自托管流水线的费用为每月
    12.65 欧元。
- en: '**Artifacts storage**: When working with Azure Artifact feeds, the first 2
    GB of storage used is free. Any extra storage used is charged at a rate of € 1.69
    per month.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**工件存储**：在使用 Azure Artifact 提要时，前 2 GB 的存储是免费的。额外使用的存储将按每月 1.69 欧元的费用收取。'
- en: Once more and more of the users of a team have a license for Azure DevOps and
    perform their work there, this can be used to increase traceability for software
    development.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦团队中的更多用户拥有 Azure DevOps 的许可证并在其中进行工作，就可以用来提高软件开发的可追溯性。
- en: Ensuring traceability
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确保可追溯性
- en: One of the advantages of Azure DevOps over some of the other tools covered in
    this book is that it is a fully integrated suite of tools, each supporting specific
    DevOps processes. This end-to-end integration allows for detailed and lengthy
    traceability, from work described on the board to the related binaries being deployed
    to an environment.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps 相对于本书中讨论的其他一些工具的一个优势是，它是一个完全集成的工具套件，每个工具支持特定的 DevOps 流程。这种端到端的集成允许从工作板上描述的任务到相关二进制文件部署到环境中的详细且长期的可追溯性。
- en: When working with a set of other tools that support only a part of the DevOps
    process, integrating them is often possible and, of course, this will result in
    some traceability. For example, when working with Jira and GitHub, it is possible
    to relate commits, pull requests, and other changes in GitHub back to work described
    in Jira. When picking merged changes up in Jenkins to build and deploy the product,
    there will also be traceability from Jenkins back to GitHub. However, there will
    be no direct visibility on which work item was completed with which Jenkins deployment
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用一组仅支持 DevOps 流程一部分的其他工具时，通常可以将它们整合在一起，当然，这将带来一定的可追溯性。例如，在使用 Jira 和 GitHub
    时，可以将 GitHub 中的提交、拉取请求和其他更改与 Jira 中描述的工作相关联。当在 Jenkins 中拾取合并的更改来构建和部署产品时，Jenkins
    也会有从 Jenkins 到 GitHub 的可追溯性。然而，无法直接看到哪个工作项与哪个 Jenkins 部署完成。
- en: 'The disadvantage of this is that a product owner who works in the Jira tool,
    cannot see whether a completed user story is associated with a release already.
    They would have to visit multiple tools to find the answer to that question: in
    GitHub, they would have to find all commits relating to the story and then see
    whether those commits have been released already using Jenkins:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的缺点是，使用 Jira 工具的产品负责人无法看到一个已完成的用户故事是否已经与发布关联。他们需要访问多个工具来找到这个问题的答案：在 GitHub
    中，他们需要找到所有与故事相关的提交，然后查看这些提交是否已经通过 Jenkins 发布：
- en: '![](img/326fe846-3c51-4ef0-b235-1feaa4ce841f.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/326fe846-3c51-4ef0-b235-1feaa4ce841f.png)'
- en: 'When working with Azure Boards, Repos, and Pipelines, this is different. When
    using all of the Azure DevOps services, traceability is possible from story to
    deployment, and the other way around. The following is an example that highlights
    how to see which commits were deployed for the first time to an environment with
    a specific deploy:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 Azure Boards、Repos 和 Pipelines 时，情况是不同的。在使用所有 Azure DevOps 服务时，您可以实现从故事到部署的可追溯性，反之亦然。以下是一个示例，突出显示如何查看哪些提交第一次被部署到具有特定部署的环境中：
- en: '![](img/e067517b-a7e7-47e1-a074-1bdfc7c72fbd.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e067517b-a7e7-47e1-a074-1bdfc7c72fbd.png)'
- en: 'Having this type of end-to-end traceability enables a number of questions to
    be answered quickly, including the following:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有这种端到端的可追溯性能够迅速回答一系列问题，包括以下问题：
- en: Has work on this work item already started? (Branches and pull requests can
    be related to work items.)
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个工作项的工作是否已经开始？（分支和拉取请求可以与工作项关联。）
- en: Is this work already part of our nightly build? (Commits and build pipelines
    can be related to work items.)
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这项工作已经是我们夜间构建的一部分了吗？（提交和构建管道可以与工作项关联。）
- en: Is this bug already fixed and is the solution available to our customers on
    ring two already? (Releases and environments show which new commits and work items
    were part of the latest deployment.)
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个 bug 已经修复了吗？解决方案是否已经可以在环二的客户中使用？（发布和环境展示了哪些新的提交和工作项是最新部署的一部分。）
- en: One thought that is particularly important to reinforce when talking about traceability
    is that it is not about blame. Traceability is not about finding out who made
    which mistake, but about finding out what the state of things is and how objects
    relate. As soon as traceability becomes the basis for blame, engineers will soon
    find ways to hide their work. This will result in more errors and less visibility,
    only making problems worse.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论可追溯性时，尤其需要强化的一个观点是，它不是为了归咎。可追溯性并不是用来找出谁犯了哪个错误，而是用来了解事物的状态以及对象之间的关系。一旦可追溯性成为归咎的基础，工程师很快会找到隐藏自己工作的办法，这将导致更多错误和更少的可见性，只会使问题变得更糟。
- en: With the benefits of traceability clear, let's explore how consolidating tools
    can help to reap these benefits.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在可追溯性优势显而易见的情况下，让我们探索一下工具整合如何帮助实现这些优势。
- en: Consolidating tools
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 整合工具
- en: One trend that can be observed in the market is that of traceability and DevOps
    products that extend their offerings to include more than only source control,
    only pipelines, or just deployments. Examples are GitHub and GitLab, which are
    adding new services. More integrated **Application Lifecycle Management** (**ALM**)
    or DevOps suites emerge, while Azure DevOps has been offering this for years now.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 市场上可以观察到的一个趋势是，越来越多的可追溯性和 DevOps 产品将其产品扩展到不仅仅是源代码控制、管道或仅仅是部署的领域。比如 GitHub 和
    GitLab，它们正在添加新的服务。更多集成的**应用生命周期管理**（**ALM**）或 DevOps 套件出现，而 Azure DevOps 已经提供了这些服务多年。
- en: However, there are many companies where these integrated suites are not in place.
    Teams operate in different ecosystems, leading to different tool choices. Or maybe
    teams just have different preferences or started adopting DevOps practices at
    different points in time, with other tools to choose from. No matter the reason,
    there are many companies that have several tools running for the same job.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，许多公司并未配备这些集成套件。团队在不同的生态系统中运营，导致不同的工具选择。或者也许团队仅仅有不同的偏好，或者在不同时间点开始采用DevOps实践，选择了其他工具。无论原因如何，许多公司都有多个工具用于相同的工作。
- en: 'Unfortunately, several drawbacks are associated with having disconnected tools
    or multiple tools for the same thing:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，使用不连接的工具或为相同任务使用多个工具会带来许多缺点：
- en: Collaboration between teams is hindered if they are using different tools. No
    matter the personal preference of developers, it can prove to be a hindrance to
    productivity when one half of the organization is using Jenkins and the other
    half is using Azure Pipelines. By extension, switching teams or helping others
    out is severely impeded when they are using another tool.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果团队使用不同的工具，团队之间的协作将受到阻碍。不管开发者的个人偏好如何，当组织的一半使用Jenkins而另一半使用Azure Pipelines时，这可能会成为生产力的障碍。进一步来说，当一个团队使用不同的工具时，切换团队或帮助其他团队将受到严重影响。
- en: When there are more tools, there are also more costs. Even when all of the tools
    are open source and free, there are still costs involved. These costs can consist
    of, for instance, support contracts or requests, training, or the time needed
    to investigate and overcome specific issues. The same holds for upgrades and maintenance.
    When there are more tools, the total costs increase.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当工具更多时，成本也更多。即使所有工具都是开源且免费的，仍然会涉及成本。这些成本可能包括例如支持合同或请求、培训，或者解决特定问题所需的时间。升级和维护也是如此。当工具更多时，总成本增加。
- en: To overcome these challenges, many large companies decide to standardize which
    tools are used, either completely or at least to some extent. As an alternative
    or intermediate solution, it is also possible to use integration between tools
    as a way of starting a consolidation.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了克服这些挑战，许多大型公司决定标准化使用的工具，或者完全标准化，或者至少在一定程度上进行标准化。作为一种替代或过渡解决方案，还可以通过工具之间的集成来开始整合。
- en: Standardizing tools
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具标准化
- en: 'To combat these drawbacks, most companies accept one of two strategies:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为了应对这些缺点，大多数公司接受以下两种策略之一：
- en: Centralized decision making to select one tool (for each DevOps area) for the
    whole company
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过集中决策选择一个工具（针对每个DevOps领域）供整个公司使用
- en: Centralized adoption of a limited set of tools, out of which teams can choose
    which to adopt
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集中采用有限的工具集，团队可以从中选择要采用的工具
- en: '**Complete centralization**: When completely centralizing, one central team
    or department decides, on behalf of everyone, which DevOps tools will be used
    within the organization. Once such a decision has been made and implemented, this
    reduces costs and makes it easier for engineers to assist in other teams.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**完全集中化**：当完全集中化时，一个中央团队或部门代表所有人决定在组织内使用哪些DevOps工具。一旦做出并实施了这样的决定，这将降低成本并使工程师更容易协助其他团队。'
- en: The downside is, of course, that one single tool is not necessarily the best
    choice for everyone while, for the organization as a whole, the selected tool
    might be the best—such standardization can do damage in a number of edge cases.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，缺点是，一个单一的工具不一定是每个人的最佳选择，而对于整个组织来说，所选择的工具可能是最好的——这种标准化在某些边缘情况下可能会造成损害。
- en: '**Limited centralization**: To prevent this, other companies choose to have
    limited centralization. Instead of just one tool, a group of tools is chosen as
    the company''s standard. Teams are now able to make their own choice out of two
    or three tools, depending on their specific needs. This limits many of the drawbacks
    of full decentralization while not sacrificing the productivity of teams with
    very specific needs.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**有限集中化**：为了避免这种情况，其他公司选择有限集中化。不是只选择一个工具，而是选择一组工具作为公司的标准。团队现在可以根据他们的具体需求，从两到三个工具中选择一个。这在不牺牲具有特定需求的团队生产力的同时，减少了完全去中心化的许多缺点。'
- en: Adopting one of these two strategies might mean that some existing tools will
    be deprecated or decommissioned altogether. This can be a slow and painful process,
    especially in large organizations where there are often conflicting interests.
    There are many ways to go about this, but there are strategies to make such a
    migration less painful.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 采用这两种策略之一可能意味着一些现有工具将被弃用或完全停用。这可能是一个缓慢且痛苦的过程，特别是在大型组织中，通常存在冲突的利益。虽然有很多方法可以进行迁移，但也有策略可以使迁移过程变得不那么痛苦。
- en: Migration strategies
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迁移策略
- en: 'Reducing the number of DevOps tools in use often means one or more tools must
    be decommissioned. This can be difficult since often, these tools are used to
    implement governance and compliance, as required by laws and regulations. In practice,
    this means that one of two things can be done:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 减少使用的DevOps工具数量通常意味着必须废弃一个或多个工具。这可能是困难的，因为这些工具通常用于实施治理和合规性，以满足法律和法规的要求。实际上，这意味着可以做以下两件事之一：
- en: Old tools are not completely decommissioned but just no longer used, to maintain
    the change history.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 旧工具并未完全废弃，而是仅不再使用，以保持变更历史记录。
- en: History must be migrated to the new tools as well before the old tools can be
    decommissioned.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在废弃旧工具之前，必须将历史记录迁移到新工具中。
- en: 'When choosing to do a migration, there are four ways to go about this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择进行迁移时，有四种方式可以选择：
- en: Azure DevOps Server to Azure DevOps Services migration
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Azure DevOps Server 迁移到 Azure DevOps Services
- en: Big-bang migration
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一次性迁移
- en: Synchronization
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同步
- en: Rebuilding
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重建
- en: Azure DevOps Server used to be called **Team Foundation Server** (**TFS**). Older
    versions of TFS need to be upgraded to one of the latest versions of Azure DevOps
    Server before they can be imported into Azure DevOps Services. The import service
    always supports the latest two versions of Azure DevOps Server
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps Server 曾被称为**Team Foundation Server**（**TFS**）。TFS的旧版本需要升级到最新版本的Azure
    DevOps Server，然后才能导入到Azure DevOps Services中。导入服务始终支持最新的两个版本的Azure DevOps Server。
- en: All three of these are detailed in the following sections.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下各节详细介绍了这三项内容。
- en: Azure DevOps Server to Azure DevOps Services migration
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Azure DevOps Server 迁移到 Azure DevOps Services
- en: 'For organizations wanting to move from working with Azure DevOps Server to
    Azure DevOps Services, there is a high-fidelity migration service available. Every
    project collection that currently exists in the on-premises Azure DevOps Server
    environment can be migrated to an Azure DevOps organization using the Azure DevOps
    Server import service. All of the assets currently existing in the on-premises
    project collection will be migrated to Azure DevOps: work items, source control
    repositories, and build and release definitions.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 对于希望从Azure DevOps Server迁移到Azure DevOps Services的组织，有一个高保真度的迁移服务。当前存在于本地Azure
    DevOps Server环境中的每个项目集合，都可以使用Azure DevOps Server导入服务迁移到Azure DevOps组织。所有当前存在于本地项目集合中的资产都将迁移到Azure
    DevOps：工作项、源代码控制库以及构建和发布定义。
- en: 'The migration of a project collection consists of the following high-level
    steps:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 项目集合的迁移包含以下高层步骤：
- en: 'Validating whether a project collection is ready for migration: This step does
    not make any changes, but only checks whether all preconditions for a migration
    have been met.'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证项目集合是否准备好迁移：此步骤不会进行任何更改，而只是检查迁移的所有前提条件是否已满足。
- en: 'Preparing the migration: In this step, a JSON file is generated that describes
    how the migration should be performed. A second file can also be supplied for
    linking on-premises identity to AAD identities to ensure that all of the history
    is still correctly linked to who made the change after the migration.'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备迁移：在此步骤中，将生成一个描述如何进行迁移的JSON文件。还可以提供第二个文件，用于将本地身份与AAD身份关联，以确保迁移后所有历史记录仍然正确地与更改者关联。
- en: A dry run of the migration is done to verify that the import process will result
    in the expected outcomes.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进行迁移的演练，以验证导入过程将产生预期的结果。
- en: 'The actual migration: In this step, the collection is taken offline, a DACPAC
    is generated from the project collection database, the DACPAC and files from step
    two are uploaded, and the migration is initiated.'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实际迁移：在此步骤中，将把集合下线，从项目集合数据库生成DACPAC，上传DACPAC和第二步的文件，并启动迁移。
- en: After the import, all assets need to be verified and, in specific scenarios, some
    post-import actions have to be taken.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入后，所有资产需要验证，并且在特定场景下，可能需要进行一些导入后的操作。
- en: For using the migration service, a comprehensive guide with checklists and step-by-step
    instructions is available and linked to at the end of this chapter.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 关于使用迁移服务的详细指南，其中包括检查清单和逐步操作说明，已在本章末尾提供链接。
- en: Big-bang migration
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 大爆炸式迁移
- en: The second possible strategy is a big-bang migration. At some point, the old
    tool is switched off, all data is migrated to the new tool, and the new tool is
    made available. If there is anything that does not breathe DevOps, it is such
    a migration. It has a high potential for issues and often there is no turning
    back. Often, this is not a good migration strategy.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种可能的策略是“大爆炸式迁移”。在某个时刻，旧工具被关闭，所有数据迁移到新工具中，新工具开始投入使用。如果有任何不符合DevOps精神的事情，那就是这种迁移。它具有较高的风险，且往往一旦实施无法回退。通常，这不是一个好的迁移策略。
- en: However, one situation where such an approach might make sense is the migration
    of source control. There are tools available for migrating from different sources
    to any type of hosted Git solution, including Azure DevOps. Source control also
    has the benefit that change history is built so deep into the system that migrating
    with history is often easier than for other types of data.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一种适合这种方法的情况是源代码管理的迁移。现在有一些工具可以实现从不同来源迁移到任何类型的托管Git解决方案，包括Azure DevOps。源代码管理也有一个好处，那就是变更历史深深嵌入系统中，因此带着历史迁移往往比其他类型的数据更容易。
- en: Synchronization
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 同步
- en: Another strategy for migration is allowing for a period of time where both tools
    can be used at the same time.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种迁移策略是允许在一段时间内同时使用两个工具。
- en: One way to do this is by using a tool that can be used to sync between the old
    and the new tool. This can be either in one direction, from old to new, or in
    both directions. This way, an in-between situation is created where both tools
    can be in use at the same time. Every team can choose its own time for its migration
    within a certain window. This avoids a forced migration window. Teams can also
    opt to use both tools next to each other for a while. This allows them to learn
    the new tool, while still being able to switch to the tool that they know if they
    are under pressure. After a period of transition, the old tool can be made read-only
    or decommissioned completely. This approach often works well for work tracking
    systems. Between these systems, the concepts are often very similar (epics, features,
    stories, and sprints), which makes a synchronization a feasible approach.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 一种方法是使用一种工具，用于在旧工具和新工具之间进行同步。这可以是单向的，从旧到新，或者是双向的。通过这种方式，创建了一个过渡的情况，两个工具可以同时使用。每个团队可以在一定的时间窗口内选择自己的迁移时间。这避免了强制性的迁移窗口。团队也可以选择将两个工具并行使用一段时间。这使得他们可以学习新工具，同时如果遇到压力时，仍能切换回他们熟悉的工具。经过一段过渡期后，旧工具可以设置为只读，或者完全停用。这种方法通常在工作跟踪系统中效果良好。在这些系统之间，概念通常非常相似（如史诗、特性、故事和冲刺），这使得同步成为一种可行的方法。
- en: Rebuilding
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新构建
- en: A slightly different approach is that of asking teams to rebuild in the new
    tool. This approach also creates an in-parallel situation, but there is no automated
    migration or synchronization. Teams will have to redo their process or way of
    working in the new tool. Since this can take a while, the old tool will remain
    while teams are working on this. One situation where this is often a good approach
    is that of build and/or release pipelines.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一种稍有不同的方法是要求团队在新工具中重新构建。这种方法也会创建一个并行的工作情境，但没有自动化的迁移或同步。团队必须在新工具中重新做他们的工作流程或工作方式。由于这可能需要一段时间，旧工具在团队进行这项工作时将继续使用。一个通常适合这种方法的情况是构建和/或发布管道。
- en: No matter the strategy that has been chosen, in all cases, it helps to make
    sure that the new tool or tools are an improvement for the teams over the existing
    tools. This should improve performance, traceability, ease of use, or integration
    with other company tools. A positive vibe around any migration can improve the
    outcomes dramatically.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 无论选择哪种策略，在所有情况下，确保新工具或工具集对团队比现有工具更具优势都非常重要。这应该提升性能、可追溯性、易用性，或与其他公司工具的集成。围绕迁移的积极氛围能够显著改善迁移的结果。
- en: As an alternative to migrating to a single tool, integrations between tools
    can be used to bring existing tools together.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 作为迁移到单一工具的替代方案，可以通过工具间的集成来将现有工具整合在一起。
- en: Integrating tools
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成工具
- en: As an alternative to replacing no longer preferred tools, it is also possible
    to integrate them with the preferred tool. Especially when it has been decided
    to move to Azure DevOps, this can be a powerful strategy. In many of the chapters
    before, for each topic, different tools were listed that integrate with Azure
    DevOps.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 作为替代不再使用的工具，可以将它们与首选工具集成。尤其是当已决定迁移到 Azure DevOps 时，这将是一个强有力的策略。在前面的多个章节中，每个主题下都列出了与
    Azure DevOps 集成的不同工具。
- en: When pursuing end-to-end traceability, these integrations can be used as a means
    to bring tools closer together. Consider the following example.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在追求端到端可追溯性时，这些集成可以作为将工具紧密结合的手段。考虑以下示例。
- en: 'An organization is using Azure DevOps for managing work items, hosting Git
    repositories, and executing build pipelines. Deployments are done using Octopus
    Deploy for historic reasons. Since a full migration is too costly, as an alternative,
    an integration strategy is chosen. Triggering the Octopus Deploy not manually
    but automatically from Azure DevOps meets several goals:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 一个组织正在使用 Azure DevOps 来管理工作项、托管 Git 仓库以及执行构建管道。由于历史原因，部署是通过 Octopus Deploy 完成的。由于完全迁移成本过高，因此选择了集成策略。通过
    Azure DevOps 自动触发 Octopus Deploy，而非手动触发，达成了多个目标：
- en: End-to-end automation is achieved.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已实现端到端自动化。
- en: Release management can now also be done in Azure DevOps, even though each deployment
    in Azure DevOps is no more than triggering Octopus Deploy.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布管理现在也可以在 Azure DevOps 中完成，即使在 Azure DevOps 中的每次部署不过是触发 Octopus Deploy。
- en: Having release management in Azure DevOps now allows for end-to-end traceability.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Azure DevOps 中进行发布管理，现在可以实现端到端的可追溯性。
- en: When consolidating tools, and really all things regarding DevOps, one thing
    that you must be ready to accept is that you are never done.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在整合工具时，实际上涉及 DevOps 的所有事宜，你必须准备好接受一个事实，那就是你永远无法完成所有工作。
- en: Accepting there is no end state
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接受没有终极状态这一事实。
- en: It is fair to expect that, at any point in time, there will be one or more improvements
    that teams want to make to their applications, toolchain, or way of working. To
    cope with this, it is recommended to not keep changing everything all of the time.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 可以合理预期，在任何时刻，团队都会有一个或多个改进想要应用于他们的应用程序、工具链或工作方式。为应对这一点，建议不要总是不停地修改一切。
- en: Instead, try to implement changes in batches or a series of well-defined steps.
    Also, note there is a natural order in things. It is impossible to practice continuous
    deployment without having a proper continuous integration process first. Also,
    adopting infrastructure as code will deliver the most value when a continuous
    deployment process for application code is already in place. Next, automating
    governance and security measures works best when infrastructure and configuration
    code is common practice. And once all of these practices have been implemented,
    new things will come up on the radar—future improvements that may be necessary.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，尽量将变更实施分批进行，或分为一系列定义明确的步骤。同时，要注意事物的自然顺序。没有先建立适当的持续集成过程，是无法实施持续部署的。另外，采用基础设施即代码（Infrastructure
    as Code）将在应用代码已经实施持续部署过程的情况下，最大程度地发挥价值。接下来，当基础设施和配置代码已成为常规做法时，自动化治理和安全措施将发挥最佳效果。而一旦这些实践得以实现，新的改进将会出现在雷达上——未来可能需要的改进。
- en: Besides this series of improvements, it is also important to realize that not
    every team is at the same place in this journey and not every team can move at
    the same pace and that development is not always this linear.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这一系列的改进外，还需要意识到并非每个团队都处于同一阶段，也并非每个团队都能以相同的速度前进，开发过程也并非总是线性的。
- en: But this does not mean that it is impossible to track and plan future changes
    and have learnings from one team applied to other teams as well. One oversimplified
    approach to tracking this can be a table, as shown here.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 但这并不意味着无法跟踪和规划未来的变更，并将一个团队的经验教训应用于其他团队。追踪这些的一个过于简化的方法可以是一个表格，如下所示。
- en: 'Here we see the adoption of different DevOps practices or ideas among five
    teams. All teams are practicing **continuous** **integration** (**CI**). Some
    of them are practicing **continuous** **deployment** (**CD**), while team 3 is
    still working on that (**Work in Progress**, **WIP**) and the fifth team has not
    started yet. Finally, team 2 is already experimenting with **infrastructure as
    code** (**IaC**). Finally, as there is no end state, it is only a matter of time
    before the next practice or idea will pop up and a team will start experimenting:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到五个团队中不同 DevOps 实践或理念的采用情况。所有团队都在实践**持续集成**（**CI**）。其中一些团队正在实践**持续部署**（**CD**），而团队3仍在努力进行这一工作（**进行中**，**WIP**），第五个团队尚未开始。最后，团队2已经在尝试**基础设施即代码**（**IaC**）。最后，由于没有“结束状态”，只是时间问题，下一项实践或理念将出现，某个团队将开始进行实验：
- en: '![](img/9cbda328-5e0a-436d-9dac-fbd75730da2e.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9cbda328-5e0a-436d-9dac-fbd75730da2e.png)'
- en: If a table, similar to the one shown in the preceding, is updated, evaluated,
    and expanded upon frequently, this helps to foster continuous learning and improve
    the way software is created and delivered. Learning and improving will become
    the standard and this will help to improve the delivery of value to end users.
    It also shows that adopting DevOps is never done.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果像前面所展示的那样的表格，能够经常更新、评估和扩展，这有助于促进持续学习，并改善软件的创建和交付方式。学习和改进将成为标准，这将有助于提高向最终用户交付价值的效率。它还表明，采用
    DevOps 是一个持续的过程，永远没有“完成”这一时刻。
- en: It also provides the means to see which teams are at the forefront and which
    teams are following along. By giving teams who are in the lead more room for experimentation
    and knowledge sharing with other teams, organizations can encourage their leader
    teams to improve even more while, at the same time, accelerating other teams as
    well.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 它还提供了一种方式，可以看到哪些团队处于前沿，哪些团队在跟随。通过为领先的团队提供更多实验和与其他团队共享知识的空间，组织可以鼓励这些领先团队进一步提升，同时也能加速其他团队的发展。
- en: And with this remark about the need to keep learning, experimenting, and pushing
    yourself, it is a great time to wrap this book up. Let's recap this chapter in
    the next section.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 带着关于持续学习、实验和自我推动的这一提醒，是时候结束本书了。让我们在下一部分回顾这一章的内容。
- en: Summary
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, you learned how to configure your Azure DevOps organization
    and how to create a layout for your products and teams. You learned what the implications
    are regarding the different configuration options and how to apply those. Next,
    you learned how you can use Azure DevOps to add traceability to your development
    process. You learned how to capture ideas and tasks in stories and tasks and how
    these can be traced all of the way to a deployment and the other way around. The
    next thing you learned about is how to approach the consolidation of tools used
    within your organization and when to stop trying to consolidate tools. Finally,
    you learned that it is important to continuously keep improving.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何配置你的 Azure DevOps 组织，以及如何为你的产品和团队创建布局。你了解了不同配置选项的影响，并学会了如何应用这些选项。接下来，你学习了如何利用
    Azure DevOps 为你的开发过程添加可追溯性。你了解了如何在故事和任务中捕捉想法和任务，以及如何将它们追溯到部署，并反向追溯。你还学会了如何在组织中整合工具，并了解了何时应停止尝试整合工具。最后，你学会了持续改进的重要性。
- en: With the things you learned in this chapter, you are now capable of setting
    up and configuring Azure DevOps for your team, teams, or organization. You can
    create a structure that fits your organization and start using it with just one
    or multiple teams. You are also able to slowly standardize your way of working
    and consolidate the teams on the same set of tools.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章中学到的内容，你现在能够为你的团队、多个团队或整个组织设置和配置 Azure DevOps。你可以创建适合组织的结构，并开始使用它，无论是单个团队还是多个团队。你还能够逐步标准化你的工作方式，并将团队整合到相同的工具集上。
- en: This completes the final chapter of this book. You can refer to this book as
    a basis for taking the AZ-400 exam, as most of the topics are along similar lines.
    However, in order to be well prepared for the exam, I recommend reading more about
    them in other sources as well and try to get as much hands-on experience as you
    can. As a practice tool, the concluding chapter contains a mock exam to help you
    prepare for the final exam.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Good luck!
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we conclude, here is a list of questions for you to test your knowledge
    regarding this chapter''s material. You will find the answers in the *Assessments*
    section of the Appendix:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: 'True or False: All data stored in Azure DevOps by users is guaranteed to be
    contained within one region.'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Reorder the following Azure DevOps concepts in such a way that each next element
    acts as a container for the next concept in the list:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Work item
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Organization
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Region
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Project
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'True or False: The general recommendation is to create a new project for every
    application that is developed by your organization.'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which two elements limit the actions any user can perform within Azure DevOps?
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the main benefit of using a single tool for application life cycle management/DevOps
    as opposed to a suite of tools?
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: More information on Azure DevOps projects and when to create more than one project
    can be found at [https://docs.microsoft.com/en-us/azure/devops/organizations/projects/about-projects?view=azure-devops#when-to-add-another-project](https://docs.microsoft.com/en-us/azure/devops/organizations/projects/about-projects?view=azure-devops%23when-to-add-another-project).
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More information about the Azure DevOps security model can be found at [https://docs.microsoft.com/en-us/azure/devops/organizations/security](https://docs.microsoft.com/en-us/azure/devops/organizations/security).
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Up-to-date information on Azure DevOps pricing can be found at [https://azure.microsoft.com/en-us/pricing/details/devops/azure-devops-services/](https://azure.microsoft.com/en-us/pricing/details/devops/azure-devops-services/).
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More information about the Azure DevOps Server-import service can be found at
    [https://docs.microsoft.com/en-us/azure/devops/migrate/migration-overview?view=azure-devops&viewFallbackFrom=vsts](https://docs.microsoft.com/en-us/azure/devops/migrate/migration-overview?view=azure-devops&viewFallbackFrom=vsts).
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
