- en: Developing with Librados
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ceph provides block, file, and object storage via built-in interfaces that will
    meet the requirements of a large number of users. However, in scenarios where
    an application is developed internally, there may be benefits to directly interfacing
    it into Ceph via the use of librados. Librados is the Ceph library that allows
    applications to directly read and write objects to the RADOS layer in Ceph.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What is librados?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using librados and what languages it supports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing an example librados application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a librados application that stores image files in Ceph using Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a librados application using atomic operations with C++
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is librados?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Librados is a Ceph library that you can include in your applications to allow
    you to directly talk to a Ceph cluster using native protocols. As librados communicates
    with Ceph using its native communication protocols, it allows your application
    to harness the full power, speed, and flexibility of Ceph, instead of having to
    make use of high-level protocols, such as Amazon S3\. A vast array of functions
    allows your application to read and write simple objects all the way to advanced
    operations, where you might want to wrap several operations in a transaction or
    run them asynchronously. Librados is available for several languages, including
    C, C++, Python, PHP, and Java.
  prefs: []
  type: TYPE_NORMAL
- en: How to use librados
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get started with librados, a development environment is needed. For the
    examples in this chapter, one of the monitor nodes can be used to act as both
    the development environment and the client to run the developed application. The
    examples in this book assume you are using a Debian-based distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the base build tools for the operating system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/add38f39-eac4-4a65-8c60-3bf41dbe3ca8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Install the `librados` development library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3ed5943f-e3b8-448f-a41e-c2144c454013.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a quick application written in C to establish a connection to the test
    Ceph cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a file called `test_app.c` with your favorite text editor and place
    the following in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Compile the test application by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: It's important to note that you need to tell `gcc` to link to the `librados`
    library to make use of its functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Test that the app works by running it. Don''t forget to run it as root or use
    `sudo`, otherwise you won''t have access to the Ceph keyring:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f590224b-717c-4a2f-9a93-7c733dcd80d0.png)'
  prefs: []
  type: TYPE_IMG
- en: The test application simply reads your `ceph.conf` configuration, uses it to
    establish a connection to your Ceph cluster, and then disconnects. It's hardly
    the most exciting of applications, but it tests that the basic infrastructure
    is in place and working, and establishes a foundation for the rest of the examples
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Example librados application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now go through some example librados applications that use librados
    to get a better understanding of what you can accomplish with the library.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example will take you through the steps to create an application
    which, when given an image file as a parameter, will store the image as an object
    in a Ceph cluster and store various attributes about the image file as object
    attributes. The application will also allow you to retrieve the object and export
    it as an image file. This example will be written in Python, which is also supported
    by librados. The following example also uses the **Python Imaging Library** (**PIL**)
    to read an image''s size and the argument parser library to read command-line
    parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the librados Python bindings and image-manipulation libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/665a9d8b-b782-401f-bfc5-f4e7c3911311.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a new file for your Python application ending with the `.py` extension
    and enter the following into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Test the `help` functionality generated by the Argument Parser library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fa20975e-c1bc-452d-bec0-ec0b2693276d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Download the Ceph logo to use as a test image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e1656145-ff23-413e-b7c0-1bf3bb8e3743.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Run our Python application to read an image file and upload it to Ceph as an
    object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/951a2ca7-8ecc-4ef8-a1f5-c076400ba028.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Verify that the object has been created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/922ccaff-4eee-441f-9505-4fda6f9c1078.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Use `rados` to verify that the attributes have been added to the object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7bc93c14-7054-4ba8-b2d2-dbf92afda207.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Use `rados` to verify the attributes'' contents, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c6eaeffc-1649-4530-a1e1-26c03354ce36.png)'
  prefs: []
  type: TYPE_IMG
- en: Example of the librados application with atomic operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous librados application example, an object was created on the
    Ceph cluster and then the object''s attributes were added. In most cases, this
    two-stage operation may be fine; however, some applications might require that
    the creation of the object and its attributes are atomic. That is to say, if service
    were interrupted, the object should only exist if it has all its attributes set,
    otherwise the Ceph cluster should roll back the transaction. The following example,
    written in C++, shows how to use librados atomic operations to ensure transaction
    consistency across multiple operations. The example will write an object and then
    ask the user whether they wish to abort the transaction. If they choose to abort
    then the object write operation will be rolled back. If they choose to continue,
    the attributes will be written and the whole transaction will be committed. Perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file with a `.cc` extension and place the following into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Compile the source using `g++`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s run through the application and abort the transaction:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e5a70bba-5a35-44cf-beda-0dce7728d7a9.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows that, even though we sent a write object command,
    as the transaction was not committed, the object was never actually written to
    the Ceph cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s run the application again and, this time, let it continue the transaction:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5944bf12-2dde-4653-8014-19ef5384383d.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, this time the object was written along with its attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Example of the librados application that uses watchers and notifiers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following librados application is written in C and shows us how to use the
    watch or notify functionality in RADOS. Ceph enables a client to create a watcher
    on an object and receive notifications from a completely separate client connected
    to the same cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'The watcher functionality is implemented via callback functions. When you call
    the librados function to create the watcher, two of the arguments are for callback
    functions: one is for what to do when a notification is received and another is
    for what to do if the watcher loses contact or encounters an error with the object.
    These callback functions contain the code you want to run when a notification
    or error occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: This simple form of messaging is commonly used to instruct a client that has
    an RBD in use that a snapshot is wished to be taken. The client who wishes to
    take a snapshot sends a notification to all clients that may be watching the RBD
    object so that it can flush its cache and possibly make sure the filesystem is
    in a consistent state.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example creates a `watcher` instance on an object named `my_object`
    and then waits. When it receives a notification, it will display the payload and
    then send a received message back to the notifier:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file with a `.c` extension and place the following into it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Compile the `watcher` example code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the `watcher` example application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b887acd6-38ab-409d-be42-e84521b3306c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `watcher` is now waiting for a notification. In another Terminal window,
    using `rados`, send a notification to the `my_object` object that is being watched:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e1674858-9df0-4520-876c-6a3e575d3390.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can see that the notification was sent and an acknowledgement notification
    has been received back. If we look at the first Terminal window again, we can
    see the message from the notifier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ef5bdf37-4df8-4a93-91b7-63d04dd30b69.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This concludes our chapter on developing applications with librados. You should
    now feel comfortable with the basic concepts of how to include librados functionality
    in your application and how to read and write objects to your Ceph cluster. It
    would be recommended to read the official librados documentation if you intend
    to develop an application with librados, so that you can gain a better understanding
    of the full range of functions that are available.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about RADOS classes and how they can be used
    to speed up processing for larger applications.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Name a reason you might want to write an application that uses the native librados
    API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does a RADOS `watcher` do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the five languages that librados is available in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
