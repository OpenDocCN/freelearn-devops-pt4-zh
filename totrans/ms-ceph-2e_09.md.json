["```\nimport rados, json, sys\n\ntry: #Read ceph.conf config file to obtain monitors\n  cluster = rados.Rados(conffile='/etc/ceph/ceph.conf')\nexcept:\n  print \"Error reading Ceph configuration\"\n  exit(1)\n\ntry: #Connect to the Ceph cluster\n  cluster.connect()\nexcept:\n  print \"Error connecting to Ceph Cluster\"\n  exit(1)\n\ntry: #Open specified RADOS pool\n  ioctx = cluster.open_ioctx(\"rbd\")\nexcept:\n  print \"Error opening pool\"\n  cluster.shutdown()\n  exit(1)\n\ncmd = {\n  \"script\": \"\"\"\n      function upper(input, output)\n        size = objclass.stat()\n        data = objclass.read(0, size)\n        upper_str = string.upper(data:str())\n        output:append(upper_str)\n      end\n      objclass.register(upper)\n  \"\"\",\n  \"handler\": \"upper\",\n}\n\nret, data = ioctx.execute(str(sys.argv[1]), 'lua', 'eval_json', json.dumps(cmd))\nprint data[:ret]\n\nioctx.close() #Close connection to pool\ncluster.shutdown() #Close connection to Ceph\n```", "```\n echo this string was in lowercase | sudo rados -p rbd put LowerObject â€“\n```", "```\n[osd]\nosd class load list = *\nosd class default list = *\n```", "```\n sudo python rados_lua.py LowerObject\n```", "```\n git clone https://github.com/ceph/ceph.git\n```", "```\n ~/ceph/src/cls/CMakeLists.txt\n```", "```\n# cls_md5\nset(cls_md5_srcs md5/cls_md5.cc)\nadd_library(cls_md5 SHARED ${cls_md5_srcs})\nset_target_properties(cls_md5 PROPERTIES\n  VERSION \"1.0.0\"\n  SOVERSION \"1\"\n  INSTALL_RPATH \"\")\ninstall(TARGETS cls_md5 DESTINATION ${cls_dir})\ntarget_link_libraries(cls_md5 crypto)\nlist(APPEND cls_embedded_srcs ${cls_md5_srcs})\n```", "```\n do_cmake.sh\n```", "```\n sudo apt-get install build-essentials\n```", "```\n mkdir ~/ceph/src/cls/md5\n```", "```\n ~/ceph/src/cls/md5/cls_md5.cc\n```", "```\n #include \"objclass/objclass.h\"\n #include <openssl/md5.h>\n\n CLS_VER(1,0)\n CLS_NAME(md5)\n\n cls_handle_t h_class;\n cls_method_handle_t h_calc_md5;\n\n static int calc_md5(cls_method_context_t hctx, bufferlist *in,\n bufferlist *out)\n {\n char md5string[33];\n\n for(int i = 0; i < 1000; ++i)\n {\n size_t size;\n int ret = cls_cxx_stat(hctx, &size, NULL);\n if (ret < 0)\n return ret;\n\n bufferlist data;\n ret = cls_cxx_read(hctx, 0, size, &data);\n if (ret < 0)\n return ret;\n unsigned char md5out[16];\n MD5((unsigned char*)data.c_str(), data.length(), md5out);\n for(int i = 0; i < 16; ++i)\n sprintf(&md5string[i*2], \"%02x\", (unsigned int)md5out[i]);\n CLS_LOG(0,\"Loop:%d - %s\",i,md5string);\n bufferlist attrbl;\n attrbl.append(md5string);\n ret = cls_cxx_setxattr(hctx, \"MD5\", &attrbl);\n if (ret < 0)\n {\n CLS_LOG(0, \"Error setting attribute\");\n return ret;\n }\n }\n out->append((const char*)md5string, sizeof(md5string));\n return 0;\n }\n\n void __cls_init()\n {\n CLS_LOG(0, \"loading cls_md5\");\n cls_register(\"md5\", &h_class);\n cls_register_cxx_method(h_class, \"calc_md5\", CLS_METHOD_RD | \n CLS_METHOD_WR, calc_md5, &h_calc_md5)\n }\n```", "```\n cd ~/ceph/build\n make cls_md5\n```", "```\n sudo scp vagrant@ansible:/home/vagrant/ceph/build/lib/libcls_md5.so*\n       /usr/lib/rados-classes/\n```", "```\n apt-get install build-essential librados-dev\n```", "```\n#include <cctype>\n#include <rados/librados.hpp>\n#include <iostream>\n#include <string>\n#include <openssl/md5.h>\n\nvoid exit_func(int ret);\n\nlibrados::Rados rados;\n\nint main(int argc, const char **argv)\n{\n  int ret = 0;\n\n  // Define variables\n  const char *pool_name = \"rbd\";\n  std::string object_name(\"LowerObject\");\n  librados::IoCtx io_ctx;\n\n  // Create the Rados object and initialize it\n {\n    ret = rados.init(\"admin\"); // Use the default client.admin keyring\n    if (ret < 0) {\n      std::cerr << \"Failed to initialize rados! error \" << ret <<\n      std::endl;\n      ret = EXIT_FAILURE;\n    }\n  }\n\n  // Read the ceph config file in its default location\n  ret = rados.conf_read_file(\"/etc/ceph/ceph.conf\");\n  if (ret < 0) {\n    std::cerr << \"Failed to parse config file \"\n              << \"! Error\" << ret << std::endl;\n    ret = EXIT_FAILURE;\n  }\n\n  // Connect to the Ceph cluster\n  ret = rados.connect();\n  if (ret < 0) {\n    std::cerr << \"Failed to connect to cluster! Error \" << ret <<\n    std::endl;\n    ret = EXIT_FAILURE;\n  } else {\n    std::cout << \"Connected to the Ceph cluster\" << std::endl;\n  }\n\n  // Create connection to the Rados pool\n  ret = rados.ioctx_create(pool_name, io_ctx);\n  if (ret < 0) {\n    std::cerr << \"Failed to connect to pool! Error: \" << ret <<\n    std::endl;\n    ret = EXIT_FAILURE;\n  } else {\n    std::cout << \"Connected to pool: \" << pool_name << std::endl;\n  }\n  for(int i = 0; i < 1000; ++i)\n  {\n    size_t size;\n    int ret = io_ctx.stat(object_name, &size, NULL);\n    if (ret < 0)\n      return ret;\n\n    librados::bufferlist data;\n    ret = io_ctx.read(object_name, data, size, 0);\n    if (ret < 0)\n      return ret;\n    unsigned char md5out[16];\n    MD5((unsigned char*)data.c_str(), data.length(), md5out);\n    char md5string[33];\n    for(int i = 0; i < 16; ++i)\n      sprintf(&md5string[i*2], \"%02x\", (unsigned int)md5out[i]);\n    librados::bufferlist attrbl;\n    attrbl.append(md5string);\n    ret = io_ctx.setxattr(object_name, \"MD5\", attrbl);\n    if (ret < 0)\n    {\n      exit_func(1);\n    }\n  }\n  exit_func(0);\n}\n\nvoid exit_func(int ret)\n{\n  // Clean up and exit\n  rados.shutdown();\n  exit(ret);\n}\n```", "```\n#include <cctype>\n#include <rados/librados.hpp>\n#include <iostream>\n#include <string>\n\nvoid exit_func(int ret);\n\nlibrados::Rados rados;\n\nint main(int argc, const char **argv)\n{\n int ret = 0;\n\n // Define variables\n const char *pool_name = \"rbd\";\n std::string object_name(\"LowerObject\");\n librados::IoCtx io_ctx;\n // Create the Rados object and initialize it\n {\n ret = rados.init(\"admin\"); // Use the default client.admin keyring\n if (ret < 0) {\n std::cerr << \"Failed to initialize rados! error \" << ret <<\n std::endl;\n ret = EXIT_FAILURE;\n }\n }\n\n // Read the ceph config file in its default location\n ret = rados.conf_read_file(\"/etc/ceph/ceph.conf\");\n if (ret < 0) {\n std::cerr << \"Failed to parse config file \"\n << \"! Error\" << ret << std::endl;\n ret = EXIT_FAILURE;\n }\n\n // Connect to the Ceph cluster\n ret = rados.connect();\n if (ret < 0) {\n std::cerr << \"Failed to connect to cluster! Error \" << ret <<\n std::endl;\n ret = EXIT_FAILURE;\n } else {\n std::cout << \"Connected to the Ceph cluster\" << std::endl;\n }\n\n // Create connection to the Rados pool\n ret = rados.ioctx_create(pool_name, io_ctx);\n if (ret < 0) {\n std::cerr << \"Failed to connect to pool! Error: \" << ret <<\n std::endl;\n ret = EXIT_FAILURE;\n } else {\n std::cout << \"Connected to pool: \" << pool_name <<\n std::endl;\n }\n librados::bufferlist in, out;\n io_ctx.exec(object_name, \"md5\", \"calc_md5\", in, out);\n exit_func(0);\n\n}\nvoid exit_func(int ret)\n{\n // Clean up and exit\n rados.shutdown();\n exit(ret);\n}\n```", "```\n time sudo ./rados_md5\n```", "```\n sudo rados -p rbd getxattr LowerObject MD5\n```", "```\n sudo rados -p rbd rmxattr LowerObject MD5\n```", "```\n time sudo ./rados_class_md5\n```", "```\n sudo rados -p rbd getxattr LowerObject MD5\n```"]