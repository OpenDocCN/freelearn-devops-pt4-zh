- en: Installing GitLab
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 GitLab
- en: In this chapter, we will discuss several ways of installing GitLab. We will
    start with the recommended way of installing GitLab on your own machine, using
    the omnibus installer. Secondly, we will show how to do a complete install from
    the GitLab source files. This will all take place on the Debian platform. Then,
    we will move to a more modern way of running an application, by showing you how
    to use a Kubernetes orchestrator). Finally, we will demonstrate installation using
    the cloud platform, DigitalOcean. They have predefined GitLab images that are
    internally configured using the omnibus installer.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论几种安装 GitLab 的方法。我们将从推荐的安装方式开始，即使用 omnibus 安装器在你自己的机器上安装 GitLab。其次，我们将展示如何从
    GitLab 的源文件进行完整安装。所有这些操作将在 Debian 平台上进行。然后，我们将展示如何使用 Kubernetes 编排器这一更现代的应用运行方式。最后，我们将展示如何使用云平台
    DigitalOcean 进行安装。DigitalOcean 提供了预定义的 GitLab 镜像，这些镜像使用 omnibus 安装器进行了内部配置。
- en: 'In this chapter, the following points will be covered:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将覆盖以下内容：
- en: Installing using omnibus packages
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 omnibus 包安装
- en: Running from source files
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从源文件运行
- en: Using GitLab from Docker
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Docker 安装 GitLab
- en: Deploying GitLab using Kubernetes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Kubernetes 部署 GitLab
- en: Creating droplets on DigitalOcean
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 DigitalOcean 上创建 Droplet
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For managing omnibus installations, there is one central configuration file
    called `gitlab.rb`. You need to create it or copy an example. There is a template
    available that you can find at [https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template](https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template).
    It is not updated after upgrades. In large parts of this chapter, I will quote
    and discuss parts of this file.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于管理 omnibus 安装，有一个名为 `gitlab.rb` 的中央配置文件。你需要创建它或复制一个示例文件。你可以在 [https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template](https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template)
    找到一个模板。升级后该模板不会自动更新。在本章的许多部分，我将引用并讨论此文件的内容。
- en: To follow along with the instructions in this chapter, please download the Git
    repository available on GitHub: [https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter02](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter02).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章的指令，请下载在 GitHub 上提供的 Git 仓库：[https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter02](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter02)。
- en: Although GitLab can be installed on a variety of platforms, in this chapter
    we choose Debian 9 to show you how it's done. You can download Debian from [http://debian.org](http://debian.org).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 GitLab 可以安装在多种平台上，但在本章中我们选择了 Debian 9 来展示如何进行安装。你可以从 [http://debian.org](http://debian.org)
    下载 Debian。
- en: 'We will require the following tools as well:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将需要以下工具：
- en: '**Helm**: [https://helm.sh](https://helm.sh)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Helm**: [https://helm.sh](https://helm.sh)'
- en: '**kubectl**: [https://kubernetes.io/docs/tasks/tools/install-kubectl/](https://kubernetes.io/docs/tasks/tools/install-kubectl/)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kubectl**: [https://kubernetes.io/docs/tasks/tools/install-kubectl/](https://kubernetes.io/docs/tasks/tools/install-kubectl/)'
- en: Installation requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装要求
- en: For all kinds of installs, there are firewall/traffic concerns. The basic firewall
    software for Linux is iptables, which is tightly connected to the Linux kernel.
    It is quite complicated to configure this, and there are other books for that.
    Fortunately, there are many user friendly programs available that let you manage
    the system firewall by interacting with iptables *for* you.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有类型的安装，都涉及到防火墙/流量问题。Linux 的基本防火墙软件是 iptables，它与 Linux 内核紧密相关。配置 iptables
    是相当复杂的，关于这方面有其他书籍。幸运的是，有许多用户友好的程序可供选择，这些程序能够通过与 iptables *交互* 来帮助你管理系统防火墙。
- en: Linux UFW (Uncomplicated Firewall) is such a frontend. Follow these instructions
    to open up your firewall if it is installed on your system.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Linux UFW（简单防火墙）是一个前端工具。如果你的系统上安装了它，请按照这些指示打开防火墙。
- en: Before you configure GitLab, you will need to ensure that your firewall rules
    are permissive enough to allow web traffic.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置 GitLab 之前，你需要确保防火墙规则足够宽松，以允许 web 流量。
- en: 'View the current status of your active firewall by executing the following
    command:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下命令查看当前活动防火墙的状态：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, the current rules allow SSH traffic through, but access to other
    services is restricted. Since GitLab is a web application, we should allow HTTP
    access. If you have a domain name associated with your GitLab server, GitLab can
    also request and enable a free TLS/SSL (Transport Layer Security/Secure Sockets
    Layer) certificate from the **Let's Encrypt** project to secure your installation.
    We'll want to allow HTTPS access as well in this case.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，当前规则允许 SSH 流量通过，但其他服务的访问被限制。由于 GitLab 是一个 Web 应用程序，我们应该允许 HTTP 访问。如果你的
    GitLab 服务器有与之关联的域名，GitLab 也可以从 **Let's Encrypt** 项目请求并启用免费的 TLS/SSL（传输层安全性/安全套接字层）证书来保护你的安装。在这种情况下，我们还需要允许
    HTTPS 访问。
- en: 'Since the protocol to port mapping for HTTP and HTTPS are available in the
    `/etc/services` file, we can allow that traffic in by name. If you didn''t already
    have OpenSSH traffic enabled, you should allow that traffic now too:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 HTTP 和 HTTPS 的协议到端口的映射可以在 `/etc/services` 文件中找到，我们可以按名称允许该流量。如果你还没有启用 OpenSSH
    流量，现在也应该允许该流量：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you check the `ufw status` command again, you should see access configured
    to at least these two services:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你再次检查 `ufw status` 命令，你应该会看到至少这两项服务的访问已被配置：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding output indicates that the GitLab web interface will be accessible
    once we configure the application.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 上述输出表明，一旦我们配置好应用程序，GitLab 的 Web 界面将可以访问。
- en: Installing GitLab using omnibus packages
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 omnibus 包安装 GitLab
- en: 'There are several ways to install GitLab. The best way is to install it using
    the omnibus installer, a Chef-based configuration package. The installer software
    is actually a fork from a Chef project at [https://github.com/chef/omnibus](https://github.com/chef/omnibus).
    The reason for this being the best way to install it is that it takes care of
    a lot of boilerplate for you. There are a lot of details surrounding a GitLab
    installation and it is easy to make mistakes. Automating this via Chef omnibus
    eliminates a lot of complexity and possible errors. The installer can be used
    to install GitLab on several platforms:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 GitLab 有几种方法。最好的方法是使用 omnibus 安装程序，这是一种基于 Chef 的配置包。安装程序实际上是来自 Chef 项目的一个分支，地址是
    [https://github.com/chef/omnibus](https://github.com/chef/omnibus)。之所以这是最好的安装方式，是因为它为你处理了大量的样板工作。GitLab
    安装涉及很多细节，很容易出错。通过 Chef omnibus 自动化这一过程，消除了许多复杂性和潜在的错误。安装程序可以用来在多个平台上安装 GitLab：
- en: Ubuntu
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu
- en: Debian
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Debian
- en: CentOS (any Red Hat derivative)
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CentOS（任何 Red Hat 衍生版）
- en: OpenSUSE
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenSUSE
- en: Raspbian
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raspbian
- en: We will use Debian as an example in the section below 'Running the installer'.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下面“运行安装程序”部分使用 Debian 作为示例。
- en: Omnibus structure
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Omnibus 结构
- en: 'Globally, the omnibus package consists of the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 全局而言，omnibus 包由以下组成：
- en: A project definition
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目定义
- en: Individual software definitions
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单独的软件定义
- en: A GitLab configuration template
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitLab 配置模板
- en: Chef components such as cookbooks and attributes
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef 组件，例如 cookbook 和属性
- en: Runit recipes for managing services
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理服务的 Runit 配方
- en: Tests
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试
- en: Last but not least, the `gitlab-ctl` commands
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，`gitlab-ctl` 命令
- en: Project definition
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目定义
- en: This file contains metadata and describes details of the project, as well as
    the dependencies contained in the project. You can find it in the omnibus source
    code  at `config/projects/gitlab.rb`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件包含元数据，并描述项目的详细信息，以及项目中包含的依赖项。你可以在 omnibus 源代码的 `config/projects/gitlab.rb`
    中找到它。
- en: Individual software definitions
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单独的软件定义
- en: Found in the `config/software/` folder, it contains all of the software that
    is part of the omnibus install. For instance, if you want to use PostgreSQL (a
    relational database), you will find the configuration, the license, its dependencies,
    and instructions on how to build or get the software. Sometimes, a patch is needed
    and that will be incorporated too.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `config/software/` 文件夹中找到，它包含了所有属于 omnibus 安装的软件。例如，如果你想使用 PostgreSQL（关系数据库），你将找到其配置、许可证、依赖项，以及如何构建或获取该软件的说明。有时，可能需要一个补丁，补丁也会被包含进去。
- en: A GitLab configuration template
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitLab 配置模板
- en: 'All configuration directives are read from a `/etc/gitlab/gitlab.rb` file,
    which should be placed on the destination system where omnibus is to be applied.
    There are a lot of settings you can manipulate using that file. The standard way
    to specify settings is by using the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 所有配置指令都从 `/etc/gitlab/gitlab.rb` 文件中读取，该文件应放置在目标系统上，供 omnibus 应用。你可以使用该文件来调整很多设置。指定设置的标准方法是使用以下内容：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Chef components
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Chef 组件
- en: There are several **Chef** cookbooks that are part of GitLab omnibus and they
    may or may not be executed depending on the configuration you specify.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个**Chef**食谱是 GitLab omnibus 的一部分，是否执行这些食谱取决于你指定的配置。
- en: Runit recipe
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Runit 配方
- en: GitLab has chosen **runit** ([https://wiki.archlinux.org/index.php/Runit](https://wiki.archlinux.org/index.php/Runit))
    as the process supervisor that handles all of the services that are installed
    with the omnibus-gitlab package. On install, it determines which init system is
    used and it makes sure it is called appropriately during boot. It manages the
    stopping, starting, reloading, and enabling of services.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab 选择了**runit**（[https://wiki.archlinux.org/index.php/Runit](https://wiki.archlinux.org/index.php/Runit)）作为进程管理器，负责管理通过
    omnibus-gitlab 包安装的所有服务。在安装时，它会确定使用的是哪个初始化系统，并确保在启动时适当地调用它。它管理服务的停止、启动、重新加载和启用。
- en: Tests
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试
- en: The omnibus-gitlab repository uses ChefSpec to test (behavior driven testing
    framework) its cookbooks. Tests may, for example, look for files that should be
    there and conditions after running a command. Normally, these tests only matter
    if you are changing the source code ([https://gitlab.com/gitlab-org/omnibus-gitlab/](https://gitlab.com/gitlab-org/omnibus-gitlab/))
    of the omnibus-gitlab installer. You will find these in the `spec` folder.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: omnibus-gitlab 仓库使用 ChefSpec（行为驱动测试框架）来测试其食谱。测试可能会检查应该存在的文件以及运行命令后的状态。例如，这些测试通常只有在你更改
    omnibus-gitlab 安装程序的源代码时才会有意义（[https://gitlab.com/gitlab-org/omnibus-gitlab/](https://gitlab.com/gitlab-org/omnibus-gitlab/)）。你可以在
    `spec` 文件夹中找到这些测试。
- en: gitlab-ctl commands
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: gitlab-ctl 命令
- en: 'This is the most import command when using the omnibus-gitlab package. It is
    available after running the installer. This tool can be used to manage general
    things such as the starting/stopping/reloading of all omnibus-gitlab provided
    services, but it also provides a vital function in applying changes in the `gitlab.rb`
    configuration file. Never forget to apply changes with the following command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用 omnibus-gitlab 包时最重要的命令。它在运行安装程序后可用。该工具可以用来管理一般事务，如启动/停止/重新加载所有 omnibus-gitlab
    提供的服务，但它在应用 `gitlab.rb` 配置文件中的更改时也提供了重要功能。不要忘记使用以下命令应用更改：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The main commands are as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 主要命令如下：
- en: '`help` (help about commands)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`help`（命令帮助）'
- en: '`cleanse` (delete all the data and reset the situation)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cleanse`（删除所有数据并重置状态）'
- en: '`show-config` (show what configuration is to be created)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`show-config`（显示将要创建的配置）'
- en: '`uninstall` (stop all processes and remove the managing process service)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uninstall`（停止所有进程并移除管理进程服务）'
- en: 'And the service management commands are as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 服务管理命令如下：
- en: '`hup` (send a service or all the hangup signals)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hup`（发送服务或所有挂起信号）'
- en: '`kill` (send a service or all the kill signals)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kill`（发送服务或所有终止信号）'
- en: '`start`/`restart`/`stop` (send a service or all the commands)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start`/`restart`/`stop`（发送服务或所有命令）'
- en: '`status` (test and report the status of the service specified or all services)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`status`（测试并报告指定服务或所有服务的状态）'
- en: '`tail` (watch the logs of all services)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tail`（查看所有服务的日志）'
- en: Upgrade using the omnibus-gitlab package
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 omnibus-gitlab 包进行升级
- en: Normally if you deploy the package on an existing installation it will automatically
    upgrade components that are installed. For GitLab 12 the PostgreSQL database will
    be automatically upgraded to version 10.7 unless you create a file called  `/etc/gitlab/disable-postgresql-upgrade`.
    Always read the release notes for special instructions when upgrading. For version
    12 they are here**: [https://docs.gitlab.com/omnibus/update/gitlab_12_changes.html](https://docs.gitlab.com/omnibus/update/gitlab_12_changes.html)[.](https://docs.gitlab.com/omnibus/update/gitlab_12_changes.html)**
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，如果你在现有安装上部署该包，它将自动升级已安装的组件。对于 GitLab 12，PostgreSQL 数据库将自动升级到版本 10.7，除非你创建一个名为
    `/etc/gitlab/disable-postgresql-upgrade` 的文件。升级时，请始终阅读发行说明中的特别说明。对于版本 12，相关说明请见这里**：[https://docs.gitlab.com/omnibus/update/gitlab_12_changes.html](https://docs.gitlab.com/omnibus/update/gitlab_12_changes.html)**。
- en: Running the installer
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行安装程序
- en: 'Below we will show you how to run the omnibus-gitlab install on Debian Linux. Before
    we can run the package installer, we need to prepare some things:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下将展示如何在 Debian Linux 上运行 omnibus-gitlab 安装程序。在运行安装包之前，我们需要准备一些事情：
- en: 'We need to set the internationalization settings and install some packages
    (curl, openssh-server en the default ssl root certificates):'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要设置国际化设置并安装一些软件包（curl、openssh-server 和默认的 SSL 根证书）：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When using GitLab, it is also important to configure email for notifications.
    Usually, this is done via Postfix, but you can use another solution and point
    GitLab to it (external SMTP (Simple Mail Transfer Protocol)):'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用 GitLab 时，配置电子邮件通知也是很重要的。通常，这通过 Postfix 完成，但您也可以使用其他解决方案并将 GitLab 指向它（外部
    SMTP（简单邮件传输协议））：
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The best option is to choose Internet Site when asked and use your external
    host name as mail name. For the rest, accept the defaults.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最佳选项是在被询问时选择 Internet Site，并使用您的外部主机名作为邮件名称。其余选项，接受默认设置即可。
- en: Add the GitLab package repository and install the package.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 GitLab 包仓库并安装该包。
- en: 'Using the following  `curl` command, you install the GitLab package repository
    and initiate an installation by downloading a package:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下 `curl` 命令，您可以安装 GitLab 包仓库，并通过下载一个包来启动安装：
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The next step is to really execute the package install step. You can set the `EXTERNAL_URL`
    variable to the URL of your new GitLab instance. If you specify a https:// url
    the installer will try to use Let''s Encrypt for generating a certificate. This
    service is free to use ([https://letsencrypt.org/](https://letsencrypt.org/)),
    but requires a valid hostname (it is validated) and an incoming port 80, which
    is reachable from the internet. You can also specify a normal http:// url in which
    case Let''s Encrypt is not used. The install command is as follows:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是执行包安装步骤。您可以将 `EXTERNAL_URL` 变量设置为您的新 GitLab 实例的 URL。如果您指定一个 https:// 的 URL，安装程序将尝试使用
    Let's Encrypt 来生成证书。此服务免费使用（[https://letsencrypt.org/](https://letsencrypt.org/)），但需要有效的主机名（将进行验证）和可以从互联网访问的端口
    80。您还可以指定一个普通的 http:// URL，此时不使用 Let's Encrypt。安装命令如下：
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Browsing to the external URL and login
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浏览到外部 URL 并登录
- en: If it is the first time you are using it, you will be presented with a password
    reset form. You can specify the password for the initial admin account, and after
    the password is saved, you will be sent to the login screen. Log in with the admin
    credentials that you just chose.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是第一次使用它，您将看到一个密码重置表单。您可以为初始管理员账户指定密码，密码保存后，您将被引导到登录界面。使用刚刚选择的管理员凭据登录。
- en: Extensive information and instructions on what to do next and configuring GitLab
    are included in the following chapter.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，包含了有关如何配置 GitLab 和后续操作的详细信息和说明。
- en: Running from source
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从源代码运行
- en: 'When installing from source, make sure you have reviewed the latest installation
    guides for your platform for the GitLab branch you want (for example, 12-0). The
    instructions in this book will ultimately be out of date. Furthermore, if you
    run into an issue, you can try to find an answer on the GitLab forum: [https://forum.gitlab.com/c/troubleshooting](https://forum.gitlab.com/c/troubleshooting).
    If the problem turns out to be a bug or unwanted behavior by GitLab, you can open
    an issue at [https://gitlab.com/gitlab-org/gitlab-ce/issues](https://gitlab.com/gitlab-org/gitlab-ce/issues).
    The following sections will feature the exact installation instructions for a
    Debian version.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在从源代码安装时，请确保您已查看适用于您的平台的最新安装指南，特别是您想要的 GitLab 版本（例如，12-0）。本书中的说明最终会过时。此外，如果遇到问题，您可以尝试在
    GitLab 论坛上找到答案：[https://forum.gitlab.com/c/troubleshooting](https://forum.gitlab.com/c/troubleshooting)。如果问题是
    GitLab 的 Bug 或不期望的行为，您可以在 [https://gitlab.com/gitlab-org/gitlab-ce/issues](https://gitlab.com/gitlab-org/gitlab-ce/issues)
    上开一个问题。以下部分将展示适用于 Debian 版本的具体安装说明。
- en: Operating system – Debian 9
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作系统 – Debian 9
- en: Here, you will find the instructions for installing GitLab on a Debian-based
    Linux. Debian is one of the oldest Linux distributions and was created about 25
    years ago. The foundation behind it has always had a firm principle to only include
    open source GPL (General Public License) software. The package management system
    in use, `apt`, combined with good package maintainers, ensured good quality throughout
    the years. Their use of a process to determine which components should be included
    created a very clean product.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您将找到关于如何在基于 Debian 的 Linux 上安装 GitLab 的说明。Debian 是最古老的 Linux 发行版之一，约在 25
    年前创建。它背后的基金会始终坚持一个原则，即只包含开源 GPL（通用公共许可证）软件。其使用的包管理系统 `apt` 结合优秀的包维护者，确保了多年来的良好质量。他们使用的过程来决定哪些组件应当包含，创造了一个非常干净的产品。
- en: Debian became a *basic* distribution that others *forked* and expanded upon.
    In 2016, there were about 125 Debian-based distributions.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Debian 成为了一种*基础*发行版，其他的则*从它分支*并进行了扩展。在 2016 年，约有 125 种基于 Debian 的发行版。
- en: The following install instructions were created for and tested on Debian operating
    systems. For installing on Red Hat Enterprise Linux (RHEL) or its sister operating
    system, the Community Enterprise Operating System (CentOS), we recommend using
    the omnibus packages.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下安装指令是为 Debian 操作系统创建并测试的。如果要在 Red Hat Enterprise Linux (RHEL) 或其姊妹操作系统 Community
    Enterprise Operating System (CentOS) 上安装，建议使用 omnibus 包。
- en: The following instructions should work for most people. Many people run into
    permission problems because they have changed the location of directories or run
    services as a different user.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下指令适用于大多数人。许多人会遇到权限问题，因为他们改变了目录的位置或以不同的用户身份运行服务。
- en: First, we will start explaining which basic software packages you need to install
    in preparation for installing GitLab. Then, we'll touch on the installation of
    the required programming languages.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将开始解释在安装 GitLab 之前需要安装的基本软件包。然后，我们会讲解所需编程语言的安装。
- en: Once, these steps are successful, we'll continue the installation by preparing
    the SQL database and the memory database for GitLab.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这些步骤成功完成，我们将通过准备 SQL 数据库和 GitLab 内存数据库继续安装。
- en: Finally, we'll start the installation of the GitLab application components.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将开始安装 GitLab 应用程序组件。
- en: 'You will have to edit several configuration files as part of the installation.
    Make sure you have a working editor. The most common one is `vim` (people will
    disagree), and you can install it like this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装过程中，你需要编辑多个配置文件。确保你有一个可用的编辑器。最常用的是 `vim`（人们对此有不同看法），你可以像这样安装：
- en: '[PRE9]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Required basic software packages
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 所需的基本软件包
- en: 'First, set the locale to your preference (I use English UTF-8 , which is 8-bit
    Unicode Transformation Format). These settings are by default not present on my
    Debian system:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将区域设置为你喜欢的语言（我使用英文 UTF-8，即 8 位 Unicode 转换格式）。这些设置默认在我的 Debian 系统中是不存在的：
- en: '[PRE10]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The, install the required software using the following command:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下命令安装所需的软件：
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Make sure you have the right version of Git installed. Install Git using the
    following command:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你安装了正确版本的 Git。使用以下命令安装 Git：
- en: '[PRE12]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Make sure the version of Git is 2.9.5 or higher:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 Git 版本为 2.9.5 或更高版本：
- en: '[PRE13]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Install a mail server, but don''t use Exim. It makes more sense to use Postfix:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 安装邮件服务器，但不要使用 Exim。使用 Postfix 更加合理：
- en: '[PRE14]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Then, select Internet Site and press *Enter* to confirm the hostname.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，选择 Internet Site 并按 *Enter* 键确认主机名。
- en: Required programming languages
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 所需的编程语言
- en: GitLab needs several programming languages in order to function. You need to
    install them in order to use all the features.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab 需要几个编程语言才能正常运行。你需要安装它们，以便使用所有功能。
- en: Ruby
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ruby
- en: 'As GitLab is still mainly written in Ruby, we need to install that language. Remove
    the old Ruby 1.8 if present in the OS:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 GitLab 主要是用 Ruby 编写的，我们需要安装这个语言。如果操作系统中存在旧版 Ruby 1.8，请移除：
- en: '[PRE15]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Download the latest Ruby, check the signature and compile it:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 下载最新版本的 Ruby，检查签名并进行编译：
- en: '[PRE16]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After installation is finished, check the version:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，检查版本：
- en: '[PRE17]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, install the Bundler Gem:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，安装 Bundler Gem：
- en: '[PRE18]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now, the basic installation of Ruby is complete.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Ruby 的基础安装已经完成。
- en: Go
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Go
- en: 'The newer parts of GitLab are written in Go (sometimes called Golang). These
    parts have been in GitLab since version 8.0, so we need this language compiler
    too in order to run newer versions of GitLab. It is best to download the latest
    version of Go here: [https://golang.org](https://golang.org). After download make
    sure the checksum is correct (for the linux-amd64 page  for go 11.10 it is `aefaa228b68641e266d1f23f1d95dba33f17552ba132878b65bb798ffa37``e6d0`.
    We install it in the `/usr/local/bin` location:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab 的新部分是用 Go 编写的（有时称为 Golang）。这些部分自 GitLab 8.0 版本以来就已存在，因此我们也需要这个语言编译器，以便运行新版
    GitLab。最好从这里下载 Go 的最新版本：[https://golang.org](https://golang.org)。下载后，确保校验和正确（对于
    linux-amd64 页面，Go 11.10 的校验和是 `aefaa228b68641e266d1f23f1d95dba33f17552ba132878b65bb798ffa37e6d0`）。我们将其安装在`/usr/local/bin`
    位置：
- en: '[PRE19]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Currently, Go supports eight different hardware instructions sets, so you have
    some choice. You can find downloads for platforms other than 64-bit Linux on the Go
    download page, which is located at [https://golang.org/dl/](https://golang.org/dl/).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Go 支持八种不同的硬件指令集，因此你有一些选择。你可以在 Go 下载页面找到适用于除 64 位 Linux 之外平台的下载：[https://golang.org/dl/](https://golang.org/dl/)。
- en: Node.js
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Node.js
- en: GitLab uses Node.js to compile JavaScript, and Yarn is used for the dependency
    management of JavaScript components. Because these tools evolve quickly (there
    are regular new versions), you should really check the current requirements at [https://about.gitlab.com/](https://about.gitlab.com/).
    As of April 2019, the supported version of Node.js should be ≥ 8.10.0, and Yarn
    should be ≥ v1.10.0.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab 使用 Node.js 来编译 JavaScript，Yarn 用于管理 JavaScript 组件的依赖。由于这些工具发展迅速（有定期的新版本发布），你应该查看当前的要求，访问
    [https://about.gitlab.com/](https://about.gitlab.com/)。截至 2019 年 4 月，支持的 Node.js
    版本应该是 ≥ 8.10.0，Yarn 版本应该是 ≥ v1.10.0。
- en: 'Because the versions in the Linux distributions are typically behind, you should
    install from the source. The following code block shows how this is done:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Linux 发行版中的版本通常滞后，建议从源代码安装。以下代码块展示了如何进行安装：
- en: '[PRE20]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You can find more information about Yarn at [https://yarnpkg.com/en/docs](https://yarnpkg.com/en/docs).
    The Node.js documentation can be found at [https://nodejs.org/en/docs/](https://nodejs.org/en/docs/).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://yarnpkg.com/en/docs](https://yarnpkg.com/en/docs) 查找关于 Yarn 的更多信息，Node.js
    的文档可以在 [https://nodejs.org/en/docs/](https://nodejs.org/en/docs/) 找到。
- en: System users
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统用户：
- en: 'Create a Git user for GitLab that has no login shell and provide a common name
    in the GECOs field (GECOS = old Unix age printers):'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 为 GitLab 创建一个没有登录 shell 的 Git 用户，并在 GECOs 字段提供一个常见名称（GECOS = 旧 Unix 打印机的年龄标记）：
- en: '[PRE21]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The result is a user being added named `git`, with a group called `git`, an
    established home directory, and some template files copied to the home directory
    from `/etc/skel`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是添加了一个名为 `git` 的用户，创建了一个名为 `git` 的组，建立了主目录，并从 `/etc/skel` 复制了一些模板文件到主目录。
- en: SQL database
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL 数据库：
- en: You really should use a PostgreSQL database, as explained in [Chapter 1](384dcfd9-ef7f-470d-89dc-3af7502a2d09.xhtml),
    *Introducing the GitLab Architecture*. For MySQL (a different SQL database), check
    the MySQL setup guide.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 你确实应该使用 PostgreSQL 数据库，正如在 [第 1 章](384dcfd9-ef7f-470d-89dc-3af7502a2d09.xhtml)《介绍
    GitLab 架构》中所解释的那样。对于 MySQL（另一种 SQL 数据库），请参考 MySQL 设置指南。
- en: 'Install the database packages using the following command:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令安装数据库软件包：
- en: '[PRE22]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Start the Database Engine:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 启动数据库引擎：
- en: '[PRE23]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create a database user for GitLab:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 为 GitLab 创建一个数据库用户：
- en: '[PRE24]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Create the `pg_trgm` extension (required for GitLab 8.6+):'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `pg_trgm` 扩展（GitLab 8.6+ 所需）：
- en: '[PRE25]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create the GitLab production database and grant all privileges on the database:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 GitLab 生产数据库并授予该数据库所有权限：
- en: '[PRE26]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Try connecting to the new database with the new user:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用新用户连接到新数据库：
- en: '[PRE27]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Check whether the `pg_trgm` extension is enabled by pasting or typing this
    in the database console:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在数据库控制台粘贴或键入此内容来检查是否启用了 `pg_trgm` 扩展：
- en: '[PRE28]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If the extension is enabled, this will produce the following output:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果扩展已启用，将产生以下输出：
- en: '[PRE29]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, we set the database password:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们设置数据库密码：
- en: '[PRE30]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Quit the database console with `\q`. Save this password for later use for yourself
    when you configure the GitLab installation.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `\q` 退出数据库控制台。保存这个密码以备后用，在配置 GitLab 安装时使用。
- en: 'Create an entry in the PostgreSQL main configuration file:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 主配置文件中创建条目：
- en: '[PRE31]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Change the listen address to `*`, or change the IP if it now says localhost
    and uncomment:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 将监听地址更改为 `*`，或在现在显示为 localhost 时更改 IP 并取消注释：
- en: '[PRE32]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Create an entry in the PostgreSQL host file:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 主机文件中创建条目：
- en: '[PRE33]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Add a line such as this:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 添加如下行：
- en: '[PRE34]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'After saving the host file, restart the database instance for the settings
    to take effect:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 保存主机文件后，重启数据库实例以使设置生效：
- en: '[PRE35]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The database is now ready for GitLab.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库现在已为 GitLab 准备就绪。
- en: Redis memory database
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Redis 内存数据库：
- en: In the previous chapter, we talked about Redis and how the program works.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了 Redis 及其工作原理。
- en: 'We need at least v2.8 of Redis for the installation of GitLab. It can be easily
    installed on Debian with `apt`:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 GitLab 至少需要 v2.8 版本的 Redis，可以通过 `apt` 在 Debian 上轻松安装：
- en: '[PRE36]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Configure Redis to use sockets:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 配置 Redis 使用套接字：
- en: '[PRE37]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Disable Redis listening on **Transmission Control Protocol** (**TCP**) by setting
    `port` to `0`:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 `port` 设置为 `0`，禁用 Redis 监听 **传输控制协议**（**TCP**）：
- en: '[PRE38]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Enable the Redis socket for the default path on Debian and similar distributions:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Debian 和类似发行版上启用 Redis 套接字的默认路径：
- en: '[PRE39]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Grant permission to the socket to all members of the Redis group:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 授予 Redis 组所有成员对套接字的权限：
- en: '[PRE40]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Create the directory that contains the socket (if it exists it''s ok):'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 创建包含套接字的目录（如果存在则无妨）：
- en: '[PRE41]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Persist the directory that contains the socket, if applicable:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果适用，请持久化包含套接字的目录：
- en: '[PRE42]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Activate the changes to `redis.conf`:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 激活对 `redis.conf` 的更改：
- en: '[PRE43]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Add Git to the Redis group:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Git 添加到 Redis 组：
- en: '[PRE44]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: We now have a functional Redis server to be used with GitLab.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有了一个可以与 GitLab 一起使用的功能正常的 Redis 服务器。
- en: GitLab
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitLab
- en: 'We''ll install GitLab in the home directory of the `git` user:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 `git` 用户的主目录中安装 GitLab：
- en: '[PRE45]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Clone the source:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆源代码：
- en: '[PRE46]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Go to the GitLab installation folder:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 转到 GitLab 安装文件夹：
- en: '[PRE47]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Copy the example GitLab config:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 复制示例 GitLab 配置：
- en: '[PRE48]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Update the GitLab configuration file and follow the directions at the top of
    the file:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 更新 GitLab 配置文件并按照文件顶部的说明操作：
- en: '[PRE49]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Copy the example secrets file:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 复制示例秘密文件：
- en: '[PRE50]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Make sure GitLab can write to the `log/` and `tmp/` directories:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 GitLab 可以写入 `log/` 和 `tmp/` 目录：
- en: '[PRE51]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Make sure GitLab can write to the `tmp/pids/` and `tmp/sockets/` directories:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 GitLab 可以写入 `tmp/pids/` 和 `tmp/sockets/` 目录：
- en: '[PRE52]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Create the `public/uploads/` directory:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 `public/uploads/` 目录：
- en: '[PRE53]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Make sure that only the GitLab user has access to the `public/uploads/` directory,
    now that files in `public/uploads` are served by GitLab-Workhorse:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，由于 `public/uploads` 中的文件由 GitLab-Workhorse 提供服务，请确保只有 GitLab 用户可以访问 `public/uploads/`
    目录：
- en: '[PRE54]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Change the permissions of the directory where CI job traces are stored:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 更改存储 CI 作业跟踪的目录的权限：
- en: '[PRE55]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Change the permissions of the directory where CI artifacts are stored:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 更改存储 CI 产物的目录权限：
- en: '[PRE56]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Change the permissions of the directory where GitLab pages are stored:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 更改存储 GitLab 页面文件的目录权限：
- en: '[PRE57]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Copy the example Unicorn configuration:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 复制示例 Unicorn 配置：
- en: '[PRE58]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Find the number of cores:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 查找核心数量：
- en: '[PRE59]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Enable cluster mode if you expect to have a high load instance. Set the number
    of workers to at least the number of cores. For example, change the amount of
    workers to 3 for a 2 GB RAM server:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 如果预计会有高负载实例，请启用集群模式。将工作线程数设置为至少与核心数量相同。例如，对于一个 2GB 内存的服务器，将工作线程数更改为 3：
- en: '[PRE60]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Copy the example Rack attack configuration:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 复制示例 Rack 攻击配置：
- en: '[PRE61]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Configuration of Git global settings for Git user `autocrlf` is needed for
    the web editor:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 需要为 Web 编辑器配置 Git 用户 `autocrlf` 的 Git 全局设置：
- en: '[PRE62]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Disable `git gc –auto` because GitLab already runs `git gc` when needed:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 禁用 `git gc –auto`，因为 GitLab 已经在需要时运行 `git gc`：
- en: '[PRE63]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Enable packfile bitmaps:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 启用包文件位图：
- en: '[PRE64]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Enable push options:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 启用推送选项：
- en: '[PRE65]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Configure the Redis connection settings:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 配置 Redis 连接设置：
- en: '[PRE66]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Change the Redis socket path if you are not using the default Debian configuration:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有使用默认的 Debian 配置，请更改 Redis 套接字路径：
- en: '[PRE67]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Configure the GitLab database settings by copying the template for PostgreSQL
    to `database.yml`:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 通过复制 PostgreSQL 的模板到 `database.yml` 来配置 GitLab 数据库设置：
- en: '[PRE68]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Now, update `config/database.yml`:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，更新 `config/database.yml`：
- en: '[PRE69]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'At the very least, the lines to change are as follows:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 至少需要更改以下几行：
- en: '[PRE70]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '`"<your secure password"` is the password you created earlier, in the *SQL
    database* section of this chapter! The host is the hostname or IP address of your
    PostgreSQL database server.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`"<your secure password"` 是你在本章 *SQL 数据库* 部分中创建的密码！主机是你的 PostgreSQL 数据库服务器的主机名或
    IP 地址。'
- en: 'Make `config/database.yml` readable to Git only:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 使 `config/database.yml` 文件只对 Git 可读：
- en: '[PRE71]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Install RubyGems (expect a lot of output):'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 RubyGems（预计会有大量输出）：
- en: '[PRE72]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: The core GitLab application is now installed on the system. We need other components
    as well, such as GitLab Shell, GitLab Workhorse, and Gitaly. They will be explained
    in the next sections.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 核心 GitLab 应用程序现在已安装在系统中。我们还需要其他组件，如 GitLab Shell、GitLab Workhorse 和 Gitaly。这些将在接下来的章节中解释。
- en: Installing GitLab Shell
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 GitLab Shell
- en: 'GitLab Shell is SSH access and repository management software developed specially
    for GitLab. You can install it as follows:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab Shell 是专门为 GitLab 开发的 SSH 访问和仓库管理软件。你可以按如下方式安装：
- en: '[PRE73]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'By default, the `gitlab-shell` configuration is generated from your main GitLab
    configuration. You can review (and modify) the `gitlab-shell` configuration as
    follows:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`gitlab-shell` 配置是从你的主 GitLab 配置生成的。你可以按如下方式查看（并修改）`gitlab-shell` 配置：
- en: '[PRE74]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Starting the service will be executed later.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 启动服务将在稍后执行。
- en: Installing GitLab-Workhorse
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 GitLab-Workhorse
- en: 'GitLab-Workhorse uses GNU (Gnu''s Not Unix) make. The following command line
    will install GitLab-Workhorse in `/home/git/gitlab-workhorse`, which is the recommended
    location:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab-Workhorse 使用 GNU（Gnu’s Not Unix）make。以下命令将把 GitLab-Workhorse 安装到 `/home/git/gitlab-workhorse`，这是推荐的安装位置：
- en: '[PRE75]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Installing Gitaly
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Gitaly
- en: 'Fetch the Gitaly source with Git and compile with Go:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Git 拉取 Gitaly 源代码并用 Go 编译：
- en: '[PRE76]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Restrict Gitaly socket access:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 限制 Gitaly 套接字访问：
- en: '[PRE77]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'If you are using non-default settings, you need to update `config.toml`:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是非默认设置，需更新 `config.toml`：
- en: '[PRE78]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Make sure Gitaly is started:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 Gitaly 已启动：
- en: '[PRE79]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Take a look at `/home/git/gitlab/log/gitaly.log` for errors and check whether
    Gitaly processes are in the `ps -ax` process list. It should run.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`/home/git/gitlab/log/gitaly.log`中的错误，并检查Gitaly进程是否在`ps -ax`进程列表中。它应该在运行。
- en: Initializing the database and activating advanced features
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化数据库并激活高级功能
- en: 'Use the following command to initialize the database and activate advanced
    features:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令初始化数据库并激活高级功能：
- en: '[PRE80]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'When done, you will see the following:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，你将看到以下内容：
- en: '[PRE81]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: You can continue the installation and eventually start GitLab, then the first
    person who accesses the login page will be given the option to supply a new admin
    password. This is probably not what you want, so there is a command to set this
    before starting. You have to supply the password, email, and variable to override
    the database check to make it work (answer yes to the prompt)**:**
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以继续安装并最终启动GitLab，然后第一个访问登录页面的人将被要求提供一个新的管理员密码。这可能不是你想要的，因此有一个命令可以在启动之前设置这个密码。你需要提供密码、电子邮件和变量来覆盖数据库检查以使其工作（回答提示中的是）**：**
- en: '[PRE82]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: So, if you don't set the password (and it is set to the default one), please
    wait to expose GitLab to the public internet until the installation is done and
    you've logged into the server the first time.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你没有设置密码（并且它仍然是默认密码），请在安装完成并第一次登录服务器之前，不要将GitLab暴露到公共互联网。
- en: Final steps for preparing the system
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备系统的最后步骤
- en: There are a few actions left before we start the GitLab application.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们启动GitLab应用程序之前，还有一些操作需要完成。
- en: 'Back up your secrets file (where GitLab stores encryption keys):'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 备份你的密钥文件（GitLab存储加密密钥的地方）：
- en: '[PRE83]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'Install the System V init script:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 安装System V初始化脚本：
- en: '[PRE84]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Active GitLab at boot time:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 启动时激活GitLab：
- en: '[PRE85]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Make sure log files are rotated frequently (to safe disk space):'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 确保日志文件频繁轮换（以节省磁盘空间）：
- en: '[PRE86]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'Check whether GitLab and its environment are set correctly:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 检查GitLab及其环境是否正确设置：
- en: '[PRE87]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'You will get an output such as the following:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 你将获得如下输出：
- en: '[PRE88]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Everything on the system is configured to run GitLab and to make it survive
    a reboot.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 系统上的所有配置都已设置好以运行GitLab，并确保在重启后能继续运行。
- en: Preparing to serve
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备提供服务
- en: We are almost ready to start GitLab. First, we need to prepare the frontend
    to serve content.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎准备好启动GitLab了。首先，我们需要准备前端来提供内容。
- en: Compiling GetText PO files
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译GetText PO文件
- en: 'Use the following command to compile GetText PO (portable object) files. This
    takes care of handling string values in different languages (you will see comparable
    output):'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令编译GetText PO（便携式对象）文件。这将处理不同语言中的字符串值（你将看到类似的输出）：
- en: '[PRE89]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Compiling assets
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译资产
- en: 'Use the following command to compile assets with Yarn (receiving similar output):'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令通过Yarn编译资产（将收到类似的输出）：
- en: '[PRE90]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Finally, use the following command to compile the last assets (similar output):'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用以下命令编译最后的资产（类似输出）：
- en: '[PRE91]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: Starting your GitLab instance
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动你的GitLab实例
- en: 'Use the following command to start your GitLab instance:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令启动你的GitLab实例：
- en: '[PRE92]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Or use the following command:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 或使用以下命令：
- en: '[PRE93]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'If successful, you should see output similar to the following when retrieving
    the status:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功，你应该在检索状态时看到类似以下内容的输出：
- en: '[PRE94]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: The main application is running, so now, we need to put NGINX in front as a
    reverse proxy.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 主要应用程序正在运行，因此现在我们需要将NGINX放在前面作为反向代理。
- en: NGINX
  id: totrans-309
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NGINX
- en: The role of this component in the GitLab architecture is well described in [Chapter
    1](384dcfd9-ef7f-470d-89dc-3af7502a2d09.xhtml), *Introducing the GitLab Architecture*.
    It functions as a reverse proxy, and buffers HTTP requests from clients before
    they are sent to the Unicorn application server. The default NGINX that comes
    with Debian is too old for use with GitLab. That is why we have to install a newer
    one (> 1.12.1).
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 该组件在GitLab架构中的角色在[第1章](384dcfd9-ef7f-470d-89dc-3af7502a2d09.xhtml)中有很好的描述，*介绍GitLab架构*。它作为反向代理，缓冲来自客户端的HTTP请求，然后将其发送到Unicorn应用程序服务器。Debian自带的默认NGINX版本过旧，无法与GitLab一起使用。因此，我们必须安装一个较新的版本（>
    1.12.1）。
- en: 'Add a public repository key and an `apt` repository URL for NGINX so we can
    install the NGINX package via `apt-get`:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 添加公共仓库密钥和NGINX的`apt`仓库URL，以便我们可以通过`apt-get`安装NGINX包：
- en: '[PRE95]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Now, install the latest NGINX:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，安装最新版本的NGINX：
- en: '[PRE96]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Copy the GitLab custom NGINX configuration files that are in our GitLab installation
    folder to the NGINX configuration folder:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们GitLab安装文件夹中的GitLab自定义NGINX配置文件复制到NGINX配置文件夹：
- en: '[PRE97]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'Change settings if needed (for example, change the `server_name YOUR_SERVER_FQDN` line
    to the DNS name of your GitLab application server):'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 如有需要，请更改设置（例如，将`server_name YOUR_SERVER_FQDN`行更改为 GitLab 应用服务器的 DNS 名称）：
- en: '[PRE98]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'Delete the default NGINX configuration file:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 删除默认的 NGINX 配置文件：
- en: '[PRE99]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Restart NGINX to activate the configuration:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 重启 NGINX 以激活配置：
- en: '[PRE100]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: In case of any errors, look in `/var/log/nginx/gitlab_error.log`. Now, you should
    find GitLab running.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现错误，请查看`/var/log/nginx/gitlab_error.log`。现在，你应该能找到正在运行的 GitLab。
- en: Go to your new GitLab application server in your web browser for your first
    GitLab login. Remember that if you did not create a password earlier at `Run gitlab:setup`,
    you will be presented with a form to provide a password for the administrator
    account. The default `username = 'root'` can be changed later. You can set up
    the password now and log in again to start doing work!
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 通过网页浏览器访问你的新 GitLab 应用服务器进行首次登录。如果你在`Run gitlab:setup`时没有创建密码，你将看到一个表单来为管理员账户设置密码。默认的`username
    = 'root'`可以稍后更改。你现在可以设置密码并重新登录，开始工作！
- en: The installation is finished!
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成！
- en: Using it from Docker
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Docker 使用它
- en: The future is in containers. It has been said for years, and now it is almost
    fact. Running applications in containers provides many advantages. It requires
    much less operating system overhead because containers share the capacity of the
    underlying operating system. GitLab provides GitLab Docker images via Docker Hub,
    the central registry on the internet for official Docker images.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 未来属于容器。这个观点已经讨论多年，现在几乎已经成为事实。在容器中运行应用程序有许多优势。它需要的操作系统开销要小得多，因为容器共享底层操作系统的容量。GitLab
    通过 Docker Hub 提供 GitLab Docker 镜像，Docker Hub 是互联网中官方 Docker 镜像的中央注册库。
- en: Both GitLab CE and EE are available and are called `gitlab/gitlab-ce` and `gitlab/gitlab-ee`.
    GitLab Docker images are feature complete images of GitLab and they run all the
    services in a single container.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab CE 和 EE 都可用，分别称为`gitlab/gitlab-ce`和`gitlab/gitlab-ee`。GitLab Docker 镜像是功能完整的
    GitLab 镜像，它们在一个容器中运行所有服务。
- en: 'Containers can run in different environments, but let''s start with the following:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 容器可以在不同的环境中运行，但让我们从以下开始：
- en: Run the image in Docker Engine directly.
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接在 Docker 引擎中运行镜像。
- en: Run GitLab using `docker-compose`.
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`docker-compose`运行 GitLab。
- en: You really need Docker software for this. See the official installation docs
    ([https://tuleap-documentation.readthedocs.io/en/latest/developer-guide/quick-start/install-docker.html](https://tuleap-documentation.readthedocs.io/en/latest/developer-guide/quick-start/install-docker.html))
    for how to install it.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 你确实需要 Docker 软件。查看官方安装文档（[https://tuleap-documentation.readthedocs.io/en/latest/developer-guide/quick-start/install-docker.html](https://tuleap-documentation.readthedocs.io/en/latest/developer-guide/quick-start/install-docker.html)）了解如何安装。
- en: Docker is not officially supported on Windows. You might encounter problems
    with volume permissions and other unknown issues. Try at your own risk and maybe
    find help on **Internet Relay Chat** (**IRC**) in the forums.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 在 Windows 上不受官方支持。你可能会遇到卷权限和其他未知问题。请自行承担风险，并在论坛的**互联网中继聊天**（**IRC**）中寻求帮助。
- en: Running the image directly
  id: totrans-334
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直接运行镜像
- en: Before running the image, make sure you have a directory available for storing
    configuration, logs, and data (or be prepared to lose data). Normally, we create
    directories in our home folder, but a better idea is to use the **Filesystem Hierarchy
    Standard** (**FHS**), a community supported standard of where to put stuff. `/src`
    seems perfect for storing container data (see [http://tldp.org/LDP/Linux-Filesystem-Hierarchy/html/srv.html](http://tldp.org/LDP/Linux-Filesystem-Hierarchy/html/srv.html)).
    GitLab also uses this convention in their samples.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行镜像之前，请确保有一个目录用于存储配置、日志和数据（或准备好丢失数据）。通常，我们会在主文件夹中创建目录，但更好的做法是使用**文件系统层次标准**（**FHS**），这是一个社区支持的标准，规定了文件的存放位置。`/src`看起来很适合存储容器数据（请参见[http://tldp.org/LDP/Linux-Filesystem-Hierarchy/html/srv.html](http://tldp.org/LDP/Linux-Filesystem-Hierarchy/html/srv.html)）。GitLab
    在他们的示例中也使用了这个约定。
- en: 'The GitLab container uses host-mounted volumes to store persistent data:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab 容器使用宿主机挂载的卷来存储持久化数据：
- en: '| **Local directory** | **Container location** | **Purpose** |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
  zh: '| **本地目录** | **容器位置** | **用途** |'
- en: '| `/srv/gitlab/data` | `/var/opt/gitlab/data` | For storing application data.
    |'
  id: totrans-338
  prefs: []
  type: TYPE_TB
  zh: '| `/srv/gitlab/data` | `/var/opt/gitlab/data` | 用于存储应用数据。 |'
- en: '| `/srv/gitlab/logs` | `/var/log/gitlab` | For storing logs. |'
  id: totrans-339
  prefs: []
  type: TYPE_TB
  zh: '| `/srv/gitlab/logs` | `/var/log/gitlab` | 用于存储日志。 |'
- en: '| `/srv/gitlab/config` | `/etc/gitlab` | For storing the GitLab configuration
    files. |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
  zh: '| `/srv/gitlab/config` | `/etc/gitlab` | 用于存储 GitLab 配置文件。 |'
- en: If you want to use other local directories, that is fine, but the container
    locations are needed for GitLab to function correctly.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用其他本地目录也是可以的，但容器的位置对于 GitLab 正常运行是必需的。
- en: 'Now, run the `gitlab-ce` image:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行`gitlab-ce`镜像：
- en: '[PRE101]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Running it this way will run it in the foreground and you'll be able to see
    the console. You can add `--detach` to run the image in the background.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式运行会让它在前台运行，你将能看到控制台输出。你可以添加 `--detach` 使镜像在后台运行。
- en: Starting with `--publish` (or `-p` for short) will make the ports required to
    access SSH, HTTP, and HTTPS  available. All GitLab data will be stored as subdirectories
    of `/srv/gitlab/`.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `--publish`（或者简写 `-p`）开始，会使访问 SSH、HTTP 和 HTTPS 所需的端口可用。所有 GitLab 数据将作为 `/srv/gitlab/`
    的子目录存储。
- en: Adding `--restart always \` as an option will make the container automatically
    start after a system reboot.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 添加 `--restart always \` 作为选项会使容器在系统重启后自动启动。
- en: If you're on SELinux and don't want it cause permission problems, you can put  '`Z `'after
    your volumes (`--volume /srv/gitlab/data:/var/opt/gitlab:Z`). Docker will then
    execute a shell command: `chcon -Rt svirt_sandbox_file_t` for that location.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 SELinux，并且不希望它引起权限问题，你可以在你的卷后加上 '`Z`'（`--volume /srv/gitlab/data:/var/opt/gitlab:Z`）。Docker
    将会执行一个 shell 命令：`chcon -Rt svirt_sandbox_file_t` 用于该位置。
- en: 'You can check whether the container is running with the following:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令检查容器是否正在运行：
- en: '[PRE102]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: You should see a list of running containers, including one that is named `gitlab`.
    In this example, you can now access this container at [http://gitlab.joustie.nl](http://gitlab.joustie.nl)[.](http://gitlab.joustie.nl)
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能看到一份正在运行的容器列表，其中包括一个名为`gitlab`的容器。在这个示例中，你现在可以通过[http://gitlab.joustie.nl](http://gitlab.joustie.nl)访问这个容器[.](http://gitlab.joustie.nl)
- en: Configuring GitLab after startup
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动后配置 GitLab
- en: Because the containers provided by GitLab use the official omnibus package,
    all configuration actions are centered around the `gitlab.rb` file.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 GitLab 提供的容器使用的是官方的 omnibus 包，因此所有配置操作都集中在 `gitlab.rb` 文件上。
- en: 'The software inside the container is provisioned using the omnibus GitLab install,
    so that means `/etc/gitlab/gitlab.rb` is used inside the container. You can edit
    the file by entering the container with a shell:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 容器内的软件是通过 omnibus GitLab 安装配置的，这意味着 `/etc/gitlab/gitlab.rb` 在容器内被使用。你可以通过进入容器并使用
    shell 编辑该文件：
- en: '[PRE103]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'Another way is to directly edit the `gitlab.rb` file in a Docker command:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是直接在 Docker 命令中编辑 `gitlab.rb` 文件：
- en: '[PRE104]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: You will have to set `external_url` to something valid in the `gitlab.rb` file
    as well to make repository links in GitLab work correctly. When you are there,
    you can check other settings as well, such as enabling HTTPS, and very importantly,
    an SMTP server to use for mail. The Docker image does not have an SMTP server
    included.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要在 `gitlab.rb` 文件中将 `external_url` 设置为有效的值，以确保 GitLab 中的仓库链接能够正确工作。在那里，你还可以检查其他设置，比如启用
    HTTPS，以及一个非常重要的 SMTP 服务器，用于邮件发送。Docker 镜像中不包含 SMTP 服务器。
- en: 'When you are finished making the changes you want, you will have to restart
    the container to reconfigure GitLab (it does so every time at restart):'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成所需的更改后，你需要重新启动容器以重新配置 GitLab（每次重启时都会这样做）：
- en: '[PRE105]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: Starting the container with configuration settings as input
  id: totrans-360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用配置设置作为输入启动容器
- en: You can start the GitLab container and let it configure itself at startup by
    adding the `GITLAB_OMNIBUS_CONFIG` environment variable to the `docker run` command.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在`docker run`命令中添加`GITLAB_OMNIBUS_CONFIG`环境变量来启动 GitLab 容器并让其在启动时自行配置。
- en: 'Put any settings from `gitlab.rb` in it that you''d like and they will be loaded
    in the container start procedure before the internal `gitlab.rb` file. Some examples
    from the omnibus-gitlab template are as follows and you can add it as argument
    to docker:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 在其中加入你希望的任何 `gitlab.rb` 设置，它们将在容器启动过程中加载，优先于内部的 `gitlab.rb` 文件。以下是 omnibus-gitlab
    模板中的一些示例，你可以将其作为参数添加到 docker：
- en: '[PRE106]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Here''s an example that sets the external URL and sets the SMTP server address
    while starting the container:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个示例，它在启动容器时设置外部 URL 并设置 SMTP 服务器地址：
- en: '[PRE107]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'You can add more environment variables, which are documented here: [https://docs.gitlab.com/ee/administration/environment_variables.html](https://docs.gitlab.com/ee/administration/environment_variables.html).'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以添加更多环境变量，相关文档可以参考：[https://docs.gitlab.com/ee/administration/environment_variables.html](https://docs.gitlab.com/ee/administration/environment_variables.html)。
- en: It can take some time for the container to be operational. After starting and
    configuring, GitLab is reachable via your browser at `https://localhost`.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 容器可能需要一些时间才能投入运行。启动并配置后，可以通过浏览器访问 GitLab，地址为`https://localhost`。
- en: The first time you see the GitLab login page, an admin password has to be set
    up. After you have chosen one and submitted it, you can use it to log in.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次看到 GitLab 登录页面时，需要设置管理员密码。选择并提交密码后，您可以使用该密码登录。
- en: Upgrading GitLab
  id: totrans-369
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 升级 GitLab
- en: 'Even in a container, upgrading GitLab is sometimes necessary. The easy way
    is as follows:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在容器中，升级 GitLab 有时也是必要的。简单的方法如下：
- en: 'Stop the currently active container:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止当前活动的容器：
- en: '[PRE108]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Remove the existing instance:'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除现有实例：
- en: '[PRE109]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'Pull the new image:'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拉取新的镜像：
- en: '[PRE110]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'Recreate the container in the same way as earlier:'
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照之前的方式重新创建容器：
- en: '[PRE111]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: When the container starts again, it will reconfigure and update itself (it will
    perform a `gitlab-ctl reconfigure`).
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 当容器重新启动时，它将重新配置并更新自身（它将执行`gitlab-ctl reconfigure`）。
- en: Run GitLab CE on a different IP address
  id: totrans-380
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在不同的 IP 地址上运行 GitLab CE
- en: Using the same `--publish` mechanism, you can specify not only the port but
    also the IP address that Docker will use.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 使用相同的`--publish`机制，您不仅可以指定端口，还可以指定 Docker 使用的 IP 地址。
- en: 'To run the latest GitLab CE on IP-address `192.168.1.1`, use the following
    command:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 IP 地址 `192.168.1.1` 上运行最新的 GitLab CE，请使用以下命令：
- en: '[PRE112]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: Now, GitLab is accessible at `http://192.168.1.1` and `https://192.168.1.1`.
    A `docker-compose.yml` example that uses different ports can be found in the *Install
    GitLab using Docker Compose* section.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，GitLab 可通过 `http://192.168.1.1` 和 `https://192.168.1.1` 访问。在 *使用 Docker Compose
    安装 GitLab* 部分可以找到一个使用不同端口的 `docker-compose.yml` 示例。
- en: Debugging the container
  id: totrans-385
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试容器
- en: Sometimes, a container does not behave the way you expect it to. How can you
    debug this?
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，容器的行为可能与您预期的不符。如何调试此问题？
- en: 'First, you can check the container logs:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您可以检查容器日志：
- en: '[PRE113]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'Enter the running container:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 进入运行中的容器：
- en: '[PRE114]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: You now have root access to the GitLab container and you can view the situation
    as if you were in a VM running omnibus-gitlab.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您拥有 GitLab 容器的 root 访问权限，您可以查看容器的状态，仿佛您在运行 omnibus-gitlab 的虚拟机中一样。
- en: Install GitLab using Docker Compose
  id: totrans-392
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Docker Compose 安装 GitLab
- en: Docker Compose is used to run multiple containers as a single service. By using
    this tool, you can easily manage your Docker-based GitLab installation. It can
    be used to configure, install, and upgrade the service. It is Python-based and
    can be installed from [https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/).
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Compose 用于将多个容器作为一个服务运行。通过使用此工具，您可以轻松管理基于 Docker 的 GitLab 安装。它可用于配置、安装和升级服务。它是基于
    Python 的，可以从 [https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/)
    安装。
- en: If you have installed Docker Compose, or already have it on your system, you
    can build your service.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已安装 Docker Compose，或系统中已有它，您可以构建您的服务。
- en: 'Create a `docker-compose.yml` file (or download an example):'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 `docker-compose.yml` 文件（或下载一个示例）：
- en: '[PRE115]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Check the port settings. This is the same as using `--publish 80:9090` or `-p
    2224:22` with pure `docker` and not `docker-compose`.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 检查端口设置。这与使用 `--publish 80:9090` 或 `-p 2224:22` 配合纯 `docker` 使用时相同，而不是使用 `docker-compose`。
- en: 'Make sure you are in the same directory as `docker-compose.yml` and run the
    following:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您位于与 `docker-compose.yml` 文件相同的目录，并运行以下命令：
- en: '[PRE116]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: GitLab will start and run an omnibus-gitlab reconfigure during boot to set up
    GitLab. To add more configuration settings at startup, follow the instructions
    mentioned previously to add directives to the `GITLAB_OMNIBUS_CONFIG` variable.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab 将在启动时运行 omnibus-gitlab 配置重新配置，以设置 GitLab。要在启动时添加更多配置设置，请按照之前提到的说明将指令添加到
    `GITLAB_OMNIBUS_CONFIG` 变量中。
- en: Updating GitLab using Docker Compose
  id: totrans-401
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Docker Compose 更新 GitLab
- en: We have seen several ways to run Docker containers. You can run them standalone
    (plain Docker), or create sets of containers that can work together with services
    (Docker Compose). The next step is to orchestrate containers.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到多种方式来运行 Docker 容器。您可以单独运行它们（纯 Docker），或者创建可以协同工作的容器集（Docker Compose）。下一步是编排容器。
- en: Deploying GitLab using Kubernetes
  id: totrans-403
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Kubernetes 部署 GitLab
- en: After some years of uncertainty, Google's **Kubernetes** has emerged as the
    premier container orchestration tool. Every major cloud vendor has integration
    for its API. This does not automatically mean that it works the same everywhere.
    Because the product has been developing so quickly, you will notice differences.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 经过数年的不确定性后，谷歌的 **Kubernetes** 成为领先的容器编排工具。每个主要云供应商都已集成其 API。但这并不意味着它在所有地方的表现都是一样的。由于该产品发展迅速，你可能会注意到不同的表现。
- en: 'The fastest way to deploy GitLab on a Kubernetes cluster is by using Helm charts.
    Avoiding the management of each separate resource on a cluster, **Helm** bundles
    these resources in an application model: a chart. It works like a package management
    system in which applications are registered. Information on how to install, configure,
    and upgrade this application is contained in this package.'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Kubernetes 集群上部署 GitLab 最快速的方法是使用 Helm charts。通过 Helm，避免了管理集群中每个单独资源的麻烦，**Helm**
    将这些资源打包成一个应用模型：chart。它就像一个包管理系统，应用程序在其中注册，关于如何安装、配置和升级该应用程序的信息都包含在该包中。
- en: Helm consists of a server called **Tiller**, which that lives in the Kubernetes
    cluster, and Helm, the command-line client that talks to the Tiller server.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: Helm 包含一个名为 **Tiller** 的服务器，它位于 Kubernetes 集群中，以及与 Tiller 服务器通信的命令行客户端 Helm。
- en: GitLab Runner Helm chart
  id: totrans-407
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitLab Runner Helm chart
- en: With this chart, you can create scalable GitLab Runners. It will use the Kubernetes
    executor. When it receives a new job to process from GitLab CI, a new pod will
    be created in a specified namespace.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个 chart，你可以创建可扩展的 GitLab Runner。它将使用 Kubernetes 执行器。当接收到来自 GitLab CI 的新任务时，会在指定的命名空间中创建一个新的
    Pod。
- en: 'First, add the Helm repository:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，添加 Helm 仓库：
- en: '[PRE117]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: Before you can start this Runner, you need to create a `.yml` file with parameters
    (we named it `values.yml`). There is a template available at [https://gitlab.com/charts/gitlab-runner/blob/master/values.yaml](https://gitlab.com/charts/gitlab-runner/blob/master/values.yaml).
    The settings are explained in the template file.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 在你启动这个 Runner 之前，你需要创建一个 `.yml` 配置文件（我们将其命名为 `values.yml`）。你可以参考 [https://gitlab.com/charts/gitlab-runner/blob/master/values.yaml](https://gitlab.com/charts/gitlab-runner/blob/master/values.yaml)
    中的模板文件，模板中已对所有设置进行了解释。
- en: 'The minimum you should fill in is as follows:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的配置如下：
- en: '[PRE118]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: After the configuration of `values.yml`, you can start the deployment.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置完 `values.yml` 后，你可以开始部署。
- en: Deploying of a GitLab Runner to Kubernetes
  id: totrans-415
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署 GitLab Runner 到 Kubernetes
- en: 'Initiate the deployment with the following command (replace `yournamespace`
    with something you prefer):'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令启动部署（将 `yournamespace` 替换为你喜欢的命名空间）：
- en: '[PRE119]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: After a short time, you should find your Runner listed in the *Runners* section
    of the administration pages in GitLab.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 几分钟后，你应该能在 GitLab 管理页面的 *Runners* 部分看到你的 Runner。
- en: GitLab Helm chart
  id: totrans-419
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitLab Helm chart
- en: This is the official and recommended way to install GitLab on a cloud native
    environment. This chart contains all the necessary components to get started,
    and you can scale up deployments easily. This specific chart is the optimal way
    to run GitLab in a Kubernetes cluster.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在云原生环境中安装 GitLab 的官方推荐方法。该 Helm chart 包含了所有必要的组件，帮助你快速启动，并且可以轻松扩展部署。这个特定的
    chart 是在 Kubernetes 集群中运行 GitLab 的最佳方式。
- en: 'The default deployment includes the following:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 默认部署包含以下内容：
- en: '**Core GitLab components**:'
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**核心 GitLab 组件**：'
- en: '**Unicorn**: The pre-forking Ruby on Rails web server'
  id: totrans-423
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Unicorn**: 预分叉的 Ruby on Rails Web 服务器'
- en: '**GitLab Shell**: The Ruby wrapper around Git on the server, enabling **Git-over-SSH**'
  id: totrans-424
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitLab Shell**: Git 服务器上的 Ruby 封装，支持 **Git-over-SSH**'
- en: '**GitLab Workhorse**: The smart reverse proxy, taking on big HTTP-requests'
  id: totrans-425
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitLab Workhorse**: 智能反向代理，处理大规模 HTTP 请求'
- en: '**Registry**: The GitLab container registry'
  id: totrans-426
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Registry**: GitLab 容器注册表'
- en: '**Sidekiq**: The backend services for GitLab, taking care of merge requests,
    emails, and other asynchronous jobs'
  id: totrans-427
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sidekiq**: GitLab 的后端服务，处理合并请求、电子邮件和其他异步任务'
- en: '**Gitaly**: The storage layer abstraction for Git operations'
  id: totrans-428
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Gitaly**: Git 操作的存储层抽象'
- en: '**Extra optional dependencies**:'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**额外的可选依赖项**：'
- en: '**Redis**: The caching key value store, database multi-tool can speed up processing'
  id: totrans-430
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Redis**: 缓存键值存储，数据库多工具，可以加速处理'
- en: '**Minio**: An object storage server with an Amazon S3 compatible interface'
  id: totrans-431
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Minio**: 一个兼容 Amazon S3 接口的对象存储服务器'
- en: '**Bonus material**:'
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**附加材料**：'
- en: '**An autoscaling, unprivileged GitLab Runner using the Kubernetes executor**: If
    you run GitLab through Kubernetes, a dedicated GitLab runner is part of the design.'
  id: totrans-433
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 Kubernetes 执行器的自动扩展、非特权 GitLab Runner**：如果你通过 Kubernetes 运行 GitLab，那么专用的
    GitLab Runner 是设计的一部分。'
- en: '**Automatically provisioned SSL via Let''s Encrypt**: When you provide Kubernetes
    with an administrator and a domain name, the Let''s Encrypt automation builtin
    can setup SSL for you.'
  id: totrans-434
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过 Let''s Encrypt 自动配置 SSL**：当你向 Kubernetes 提供管理员账户和域名时，内置的 Let''s Encrypt
    自动化功能可以为你设置 SSL。'
- en: As with the GitLab Docker image, the GitLab chart is a feature completed for
    the core product and takes a few minutes to deploy. Deploying GitLab using the
    Helm chart takes 5 to 10 minutes depending on your hardware or service location.
    It is also possible to run certain components outside of the Kubernetes cluster;
    this is also what you do in production, normally. It is better to keep your application
    state out of the cluster.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 与 GitLab Docker 镜像一样，GitLab chart 是为核心产品完成的功能，部署只需要几分钟。使用 Helm chart 部署 GitLab
    根据硬件或服务位置的不同，通常需要 5 到 10 分钟。也可以将某些组件部署在 Kubernetes 集群外部；这通常是生产环境中的做法。最好将应用状态保持在集群外部。
- en: 'These are the requirements for deploying GitLab to Kubernetes:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 部署 GitLab 到 Kubernetes 的要求如下：
- en: You need Helm version  >2.9 and `kubectl` >1.8 (about 1 minor release version
    difference with your cluster).
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要 Helm 版本 >2.9 和 `kubectl` >1.8（与你的集群版本相差约 1 个小版本）。
- en: A Kubernetes cluster using version >1.8 with a minimum of 6 vCPUs and 16 GB
    RAM.
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用版本 >1.8 且至少包含 6 个 vCPU 和 16 GB RAM 的 Kubernetes 集群。
- en: The cluster can be a Google GKE, Amazon EKS, or Microsoft AKS-based cluster,
    or a local one using Minikube, for example.
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集群可以是基于 Google GKE、Amazon EKS 或 Microsoft AKS 的集群，或者使用 Minikube 等本地集群。
- en: You should be able to easily configure  a wildcard DNS entry for your domain
    (for example, `*.example.com`) and an external IP.
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你应该能够轻松配置你的域名的通配符 DNS 条目（例如 `*.example.com`）和外部 IP。
- en: You can connect and log in to the cluster.
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以连接并登录到集群。
- en: A configured and initialized Helm Tiller running.
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已配置并初始化的 Helm Tiller 正在运行。
- en: 'To make sure Helm is configured and initialized, run the following command:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 为确保 Helm 已配置并初始化，运行以下命令：
- en: '[PRE120]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: Deploying GitLab to Kubernetes
  id: totrans-445
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 GitLab 部署到 Kubernetes
- en: 'To deploy GitLab, the following three parameters are required:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 部署 GitLab 需要以下三个参数：
- en: '`global.host.domain`: Should point to your wildcard DNS domain'
  id: totrans-447
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`global.host.domain`：应指向你的通配符 DNS 域名'
- en: '`global.hosts.externalIP`: The external IP address for the cluster'
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`global.hosts.externalIP`：集群的外部 IP 地址'
- en: '`certmanager-issues.email`: The email address that is used for issuing certificates
    (Let''s Encrypt)'
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`certmanager-issues.email`：用于颁发证书的电子邮件地址（Let''s Encrypt）'
- en: 'So, when you only have a few parameters such as these, just run the command:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当你只有这些参数时，直接运行命令：
- en: '[PRE121]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: You can also run a deployment using a `values.yml` file, just like the GitLab
    Runners chart. You can find examples at [https://gitlab.com/charts/gitlab/tree/master/examples](https://gitlab.com/charts/gitlab/tree/master/examples).
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用 `values.yml` 文件运行部署，和 GitLab Runners chart 一样。你可以在 [https://gitlab.com/charts/gitlab/tree/master/examples](https://gitlab.com/charts/gitlab/tree/master/examples)
    找到示例。
- en: Monitoring the deployment
  id: totrans-453
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控部署
- en: 'After running the `helm upgrade --install` command, it can take several minutes
    before output is returned. It should look a bit like the following:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行 `helm upgrade --install` 命令后，可能需要几分钟才能返回输出。它的输出应类似如下：
- en: '[PRE122]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: Afterwards (or during the deployment in another session), you can issue a `helm
    status gitlab` command to see info about the deployment.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 之后（或在另一会话中部署时），你可以运行 `helm status gitlab` 命令查看部署信息。
- en: Initial login
  id: totrans-457
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始登录
- en: If everything went well, you will find your installation by adding GitLab to
    your wildcard DNS name, in the case of our preceding example, `gitlab.home.joustie.nl`.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，你可以通过将 GitLab 添加到你的通配符 DNS 名称中找到你的安装，例如我们之前的示例，`gitlab.home.joustie.nl`。
- en: 'We have not yet specified a root password for the initial administrator user
    in GitLab. During the deployment on Kubernetes, a random password was automatically
    created. You can fetch this password with the following command from Terminal
    (replace `name` with your deployment name; for us, it is `gitlab`):'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 我们尚未为 GitLab 中的初始管理员用户指定根密码。在 Kubernetes 部署过程中，会自动生成一个随机密码。你可以通过以下命令从终端获取此密码（将
    `name` 替换为你的部署名称；对于我们来说，它是 `gitlab`）：
- en: '[PRE123]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Outgoing email
  id: totrans-461
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 外发邮件
- en: 'If you do not specify it, there is no outgoing email enabled. You have to enable
    it by specifying some settings. The following is the `install` command if you
    set the options right away:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您未指定，默认情况下没有启用外发邮件。您需要通过指定一些设置来启用它。如果您立即设置选项，以下是 `install` 命令：
- en: '[PRE124]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: Also, make sure there is no firewall preventing traffic in between. Clusters
    on **Google Kubernetes Engine** (**GKE**) have their SMTP ports blocked by default.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，确保没有防火墙阻止流量通过。**Google Kubernetes Engine**（**GKE**）上的集群默认会阻止 SMTP 端口。
- en: Updating GitLab using the Helm chart
  id: totrans-465
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Helm 图表更新 GitLab
- en: Once your GitLab chart is installed, configuration changes and chart updates
    should be done using the Helm upgrade.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了 GitLab 图表，配置更改和图表更新应通过 Helm 升级进行。
- en: 'If you would like to upgrade GitLab or change settings, use the following procedure:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想升级 GitLab 或更改设置，请按照以下步骤进行：
- en: '[PRE125]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'Edit the `gitlab.yaml` file, looking at the possible values here: [https://docs.gitlab.com/charts/installation/command-line-options.html](https://gitlab.com/charts/gitlab/blob/master/values.yaml).'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `gitlab.yaml` 文件，查看这里的可能值：[https://docs.gitlab.com/charts/installation/command-line-options.html](https://gitlab.com/charts/gitlab/blob/master/values.yaml)。
- en: 'Save and apply the settings file:'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并应用设置文件：
- en: '[PRE126]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'The command should return a lot of output, but it should mention the following:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令应该会返回大量输出，但应提到以下内容：
- en: '[PRE127]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: Uninstalling GitLab using the Helm chart
  id: totrans-474
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Helm 图表卸载 GitLab
- en: 'To uninstall the GitLab chart, run the following:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 要卸载 GitLab 图表，请运行以下命令：
- en: '[PRE128]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: You can run `helm status` afterwards to see if the action has been completed.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，您可以运行 `helm status` 查看操作是否已完成。
- en: Creating droplets on DigitalOcean
  id: totrans-478
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 DigitalOcean 上创建 Droplets
- en: '**DigitalOcean** is a cloud provider, originating from New York. It has been
    a darling of developers for years. It offers an API, integrations, and affordable
    pricing to run your application workloads and VMs.'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '**DigitalOcean** 是一家源自纽约的云服务提供商，多年来一直是开发者的宠儿。它提供 API、集成以及实惠的定价，帮助您运行应用程序工作负载和虚拟机（VM）。'
- en: There are two ways of installing GitLab on DigitalOcean. You can create VMs
    (**droplets**) yourself and configure them using the omnibus installer or install
    them from source yourself. An even better way is to use the predefined GitLab
    droplet image that is already available on the site. When creating a droplet,
    you can specify this image.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方式可以在 DigitalOcean 上安装 GitLab。您可以自己创建虚拟机（**Droplets**）并使用 omnibus 安装程序进行配置，或者自己从源代码安装。更好的方式是使用站点上已提供的预定义
    GitLab Droplet 镜像。在创建 Droplet 时，您可以指定此镜像。
- en: 'When you log in to DigitalOcean, you can go to your droplets page and create
    a new one:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到 DigitalOcean 后，您可以访问 Droplets 页面并创建新的 Droplet：
- en: '![](img/17e0baa6-bf2d-4236-b120-12445d83cade.png)'
  id: totrans-482
  prefs: []
  type: TYPE_IMG
  zh: '![](img/17e0baa6-bf2d-4236-b120-12445d83cade.png)'
- en: 'Determine the options for a droplet:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 确定 Droplet 的选项：
- en: '![](img/8c06f277-8177-4aab-a508-bb52fc4b6683.png)'
  id: totrans-484
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c06f277-8177-4aab-a508-bb52fc4b6683.png)'
- en: 'After logging in, you will be asked to set some options:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，系统会提示您设置一些选项：
- en: '![](img/97bd881e-0afb-4486-842e-8bb56139a0ef.png)'
  id: totrans-486
  prefs: []
  type: TYPE_IMG
  zh: '![](img/97bd881e-0afb-4486-842e-8bb56139a0ef.png)'
- en: 'The droplet is ready. The system will reboot and reconfigure itself. If the
    login does not work, log in via SSH as a root to your droplet and execute the
    following command:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: Droplet 已准备好。系统将重启并重新配置。如果登录失败，请通过 SSH 以 root 用户身份登录到您的 droplet 并执行以下命令：
- en: '[PRE129]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'Take a look at this:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这个：
- en: '[PRE130]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: 'If this is visible, we have to try to set the password again using one of the
    methods available in the omnibus package. Add the following line to the `/etc/gitlab/gitlab.rb` file:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个页面可见，我们需要尝试使用 omnibus 包中的一种方法重新设置密码。请将以下行添加到`/etc/gitlab/gitlab.rb`文件中：
- en: '[PRE131]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'Then, execute the following in order to re-seed the database (it is empty,
    so that doesn''t matter) and reset the admin password:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，执行以下命令以重新填充数据库（它是空的，所以这无关紧要）并重置管理员密码：
- en: '[PRE132]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'After some time, you should receive the following output:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 经过一段时间后，您应该会收到以下输出：
- en: '[PRE133]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'If you go to the URL of your new GitLab instance, you can set the password
    as shown:'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您访问新 GitLab 实例的 URL，您可以按照如下所示设置密码：
- en: '![](img/c3d4d948-76fc-4e9d-bdec-e013a5a1a8ac.png)'
  id: totrans-498
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c3d4d948-76fc-4e9d-bdec-e013a5a1a8ac.png)'
- en: Enjoy your GitLab!
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 享受您的 GitLab！
- en: Summary
  id: totrans-500
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed the different ways of installing GitLab. The Linux
    platform was the chosen OS for which we provided instructions and examples. We
    started with the recommended way of installing for most organizations, using the
    omnibus package.
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章节中，我们讨论了安装 GitLab 的不同方法。Linux 平台是我们选择的操作系统，并为其提供了相关的指导和示例。我们从最适合大多数组织的安装方式开始，即使用
    omnibus 包。
- en: It is also possible to install GitLab from scratch and to run it from source.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以从头开始安装 GitLab 并从源代码运行它。
- en: It is also possible to run GitLab from a Docker container. We also showed you
    how to update Docker-based GitLab installs and gave an example of using Docker
    Compose to create a multi-container installation. Finally, we talked about the
    fact that, when scaling, you probably would like several containers deployed and
    managed. We showed you how to achieve this with Kubernetes as the orchestration
    tool.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以从 Docker 容器中运行 GitLab。我们还展示了如何更新基于 Docker 的 GitLab 安装，并举了一个使用 Docker Compose
    创建多容器安装的例子。最后，我们谈到了扩展时，您可能希望部署并管理多个容器。我们展示了如何使用 Kubernetes 作为编排工具来实现这一目标。
- en: In the next chapter, we will dive into the process of configuring GitLab after
    the initial installation.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨初始安装后配置 GitLab 的过程。
- en: Questions
  id: totrans-505
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the recommended way of installing GitLab?
  id: totrans-506
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 GitLab 的推荐方式是什么？
- en: At the least, which ports do you need to open on your firewall?
  id: totrans-507
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 至少，您需要在防火墙上开放哪些端口？
- en: On what platforms can you install GitLab using the omnibus package?
  id: totrans-508
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在哪些平台上可以使用 omnibus 包安装 GitLab？
- en: What is the basic administration command you use in an omnibus-based install?
  id: totrans-509
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在基于 omnibus 的安装中，您使用的基本管理命令是什么？
- en: What version of Git is the minimum you need on a source-based GitLab install?
  id: totrans-510
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在基于源代码的 GitLab 安装中，最低需要什么版本的 Git？
- en: What PostgreSQL extension do you need to enable for GitLab in a source-based
    GitLab install?
  id: totrans-511
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在基于源代码的 GitLab 安装中，您需要启用哪个 PostgreSQL 扩展？
- en: What is the name of the official GitLab CE Docker images?
  id: totrans-512
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 官方 GitLab CE Docker 镜像的名称是什么？
- en: What is the location of site-specific data according to **Linux Filesystem Hierarchy**
    (**LFH**)?
  id: totrans-513
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据 **Linux 文件系统层次结构** (**LFH**)，网站特定数据的位置在哪里？
- en: What programming language do you need to have installed to run Docker Compose?
  id: totrans-514
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 Docker Compose 需要安装什么编程语言？
- en: What is the recommended way of deploying GitLab components to Kubernetes?
  id: totrans-515
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署 GitLab 组件到 Kubernetes 的推荐方式是什么？
- en: Further reading
  id: totrans-516
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*Learn Docker - Fundamentals of Docker 18.x* by *Gabriel N. Schenker*: [https://www.packtpub.com/in/networking-and-servers/learn-docker-fundamentals-docker-18x](https://www.packtpub.com/in/networking-and-servers/learn-docker-fundamentals-docker-18x)'
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习 Docker - Docker 18.x 基础* 由 *Gabriel N. Schenker* 编写：[https://www.packtpub.com/in/networking-and-servers/learn-docker-fundamentals-docker-18x](https://www.packtpub.com/in/networking-and-servers/learn-docker-fundamentals-docker-18x)'
- en: '*Develop and Operate Microservices on Kubernetes* by *Martin Helmich*: [https://www.packtpub.com/in/virtualization-and-cloud/develop-and-operate-microservices-kubernetes-video](https://www.packtpub.com/in/virtualization-and-cloud/develop-and-operate-microservices-kubernetes-video)'
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在 Kubernetes 上开发和操作微服务* 由 *Martin Helmich* 编写：[https://www.packtpub.com/in/virtualization-and-cloud/develop-and-operate-microservices-kubernetes-video](https://www.packtpub.com/in/virtualization-and-cloud/develop-and-operate-microservices-kubernetes-video)'
- en: 'GitLab install documentation: [https://about.gitlab.com/install/](https://about.gitlab.com/install/)'
  id: totrans-519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitLab 安装文档：[https://about.gitlab.com/install/](https://about.gitlab.com/install/)
