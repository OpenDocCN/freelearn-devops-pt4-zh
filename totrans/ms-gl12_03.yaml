- en: Installing GitLab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will discuss several ways of installing GitLab. We will
    start with the recommended way of installing GitLab on your own machine, using
    the omnibus installer. Secondly, we will show how to do a complete install from
    the GitLab source files. This will all take place on the Debian platform. Then,
    we will move to a more modern way of running an application, by showing you how
    to use a Kubernetes orchestrator). Finally, we will demonstrate installation using
    the cloud platform, DigitalOcean. They have predefined GitLab images that are
    internally configured using the omnibus installer.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, the following points will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing using omnibus packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running from source files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using GitLab from Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying GitLab using Kubernetes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating droplets on DigitalOcean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For managing omnibus installations, there is one central configuration file
    called `gitlab.rb`. You need to create it or copy an example. There is a template
    available that you can find at [https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template](https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template).
    It is not updated after upgrades. In large parts of this chapter, I will quote
    and discuss parts of this file.
  prefs: []
  type: TYPE_NORMAL
- en: To follow along with the instructions in this chapter, please download the Git
    repository available on GitHub: [https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter02](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter02).
  prefs: []
  type: TYPE_NORMAL
- en: Although GitLab can be installed on a variety of platforms, in this chapter
    we choose Debian 9 to show you how it's done. You can download Debian from [http://debian.org](http://debian.org).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will require the following tools as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Helm**: [https://helm.sh](https://helm.sh)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**kubectl**: [https://kubernetes.io/docs/tasks/tools/install-kubectl/](https://kubernetes.io/docs/tasks/tools/install-kubectl/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For all kinds of installs, there are firewall/traffic concerns. The basic firewall
    software for Linux is iptables, which is tightly connected to the Linux kernel.
    It is quite complicated to configure this, and there are other books for that.
    Fortunately, there are many user friendly programs available that let you manage
    the system firewall by interacting with iptables *for* you.
  prefs: []
  type: TYPE_NORMAL
- en: Linux UFW (Uncomplicated Firewall) is such a frontend. Follow these instructions
    to open up your firewall if it is installed on your system.
  prefs: []
  type: TYPE_NORMAL
- en: Before you configure GitLab, you will need to ensure that your firewall rules
    are permissive enough to allow web traffic.
  prefs: []
  type: TYPE_NORMAL
- en: 'View the current status of your active firewall by executing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the current rules allow SSH traffic through, but access to other
    services is restricted. Since GitLab is a web application, we should allow HTTP
    access. If you have a domain name associated with your GitLab server, GitLab can
    also request and enable a free TLS/SSL (Transport Layer Security/Secure Sockets
    Layer) certificate from the **Let's Encrypt** project to secure your installation.
    We'll want to allow HTTPS access as well in this case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the protocol to port mapping for HTTP and HTTPS are available in the
    `/etc/services` file, we can allow that traffic in by name. If you didn''t already
    have OpenSSH traffic enabled, you should allow that traffic now too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you check the `ufw status` command again, you should see access configured
    to at least these two services:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The preceding output indicates that the GitLab web interface will be accessible
    once we configure the application.
  prefs: []
  type: TYPE_NORMAL
- en: Installing GitLab using omnibus packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several ways to install GitLab. The best way is to install it using
    the omnibus installer, a Chef-based configuration package. The installer software
    is actually a fork from a Chef project at [https://github.com/chef/omnibus](https://github.com/chef/omnibus).
    The reason for this being the best way to install it is that it takes care of
    a lot of boilerplate for you. There are a lot of details surrounding a GitLab
    installation and it is easy to make mistakes. Automating this via Chef omnibus
    eliminates a lot of complexity and possible errors. The installer can be used
    to install GitLab on several platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debian
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CentOS (any Red Hat derivative)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenSUSE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raspbian
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will use Debian as an example in the section below 'Running the installer'.
  prefs: []
  type: TYPE_NORMAL
- en: Omnibus structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Globally, the omnibus package consists of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A project definition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Individual software definitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A GitLab configuration template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chef components such as cookbooks and attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Runit recipes for managing services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Last but not least, the `gitlab-ctl` commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project definition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This file contains metadata and describes details of the project, as well as
    the dependencies contained in the project. You can find it in the omnibus source
    code  at `config/projects/gitlab.rb`.
  prefs: []
  type: TYPE_NORMAL
- en: Individual software definitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Found in the `config/software/` folder, it contains all of the software that
    is part of the omnibus install. For instance, if you want to use PostgreSQL (a
    relational database), you will find the configuration, the license, its dependencies,
    and instructions on how to build or get the software. Sometimes, a patch is needed
    and that will be incorporated too.
  prefs: []
  type: TYPE_NORMAL
- en: A GitLab configuration template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All configuration directives are read from a `/etc/gitlab/gitlab.rb` file,
    which should be placed on the destination system where omnibus is to be applied.
    There are a lot of settings you can manipulate using that file. The standard way
    to specify settings is by using the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Chef components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several **Chef** cookbooks that are part of GitLab omnibus and they
    may or may not be executed depending on the configuration you specify.
  prefs: []
  type: TYPE_NORMAL
- en: Runit recipe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitLab has chosen **runit** ([https://wiki.archlinux.org/index.php/Runit](https://wiki.archlinux.org/index.php/Runit))
    as the process supervisor that handles all of the services that are installed
    with the omnibus-gitlab package. On install, it determines which init system is
    used and it makes sure it is called appropriately during boot. It manages the
    stopping, starting, reloading, and enabling of services.
  prefs: []
  type: TYPE_NORMAL
- en: Tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The omnibus-gitlab repository uses ChefSpec to test (behavior driven testing
    framework) its cookbooks. Tests may, for example, look for files that should be
    there and conditions after running a command. Normally, these tests only matter
    if you are changing the source code ([https://gitlab.com/gitlab-org/omnibus-gitlab/](https://gitlab.com/gitlab-org/omnibus-gitlab/))
    of the omnibus-gitlab installer. You will find these in the `spec` folder.
  prefs: []
  type: TYPE_NORMAL
- en: gitlab-ctl commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the most import command when using the omnibus-gitlab package. It is
    available after running the installer. This tool can be used to manage general
    things such as the starting/stopping/reloading of all omnibus-gitlab provided
    services, but it also provides a vital function in applying changes in the `gitlab.rb`
    configuration file. Never forget to apply changes with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The main commands are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`help` (help about commands)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cleanse` (delete all the data and reset the situation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`show-config` (show what configuration is to be created)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`uninstall` (stop all processes and remove the managing process service)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And the service management commands are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`hup` (send a service or all the hangup signals)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`kill` (send a service or all the kill signals)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`start`/`restart`/`stop` (send a service or all the commands)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`status` (test and report the status of the service specified or all services)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tail` (watch the logs of all services)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade using the omnibus-gitlab package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Normally if you deploy the package on an existing installation it will automatically
    upgrade components that are installed. For GitLab 12 the PostgreSQL database will
    be automatically upgraded to version 10.7 unless you create a file called  `/etc/gitlab/disable-postgresql-upgrade`.
    Always read the release notes for special instructions when upgrading. For version
    12 they are here**: [https://docs.gitlab.com/omnibus/update/gitlab_12_changes.html](https://docs.gitlab.com/omnibus/update/gitlab_12_changes.html)[.](https://docs.gitlab.com/omnibus/update/gitlab_12_changes.html)**
  prefs: []
  type: TYPE_NORMAL
- en: Running the installer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Below we will show you how to run the omnibus-gitlab install on Debian Linux. Before
    we can run the package installer, we need to prepare some things:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to set the internationalization settings and install some packages
    (curl, openssh-server en the default ssl root certificates):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'When using GitLab, it is also important to configure email for notifications.
    Usually, this is done via Postfix, but you can use another solution and point
    GitLab to it (external SMTP (Simple Mail Transfer Protocol)):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The best option is to choose Internet Site when asked and use your external
    host name as mail name. For the rest, accept the defaults.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the GitLab package repository and install the package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Using the following  `curl` command, you install the GitLab package repository
    and initiate an installation by downloading a package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to really execute the package install step. You can set the `EXTERNAL_URL`
    variable to the URL of your new GitLab instance. If you specify a https:// url
    the installer will try to use Let''s Encrypt for generating a certificate. This
    service is free to use ([https://letsencrypt.org/](https://letsencrypt.org/)),
    but requires a valid hostname (it is validated) and an incoming port 80, which
    is reachable from the internet. You can also specify a normal http:// url in which
    case Let''s Encrypt is not used. The install command is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Browsing to the external URL and login
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If it is the first time you are using it, you will be presented with a password
    reset form. You can specify the password for the initial admin account, and after
    the password is saved, you will be sent to the login screen. Log in with the admin
    credentials that you just chose.
  prefs: []
  type: TYPE_NORMAL
- en: Extensive information and instructions on what to do next and configuring GitLab
    are included in the following chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Running from source
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When installing from source, make sure you have reviewed the latest installation
    guides for your platform for the GitLab branch you want (for example, 12-0). The
    instructions in this book will ultimately be out of date. Furthermore, if you
    run into an issue, you can try to find an answer on the GitLab forum: [https://forum.gitlab.com/c/troubleshooting](https://forum.gitlab.com/c/troubleshooting).
    If the problem turns out to be a bug or unwanted behavior by GitLab, you can open
    an issue at [https://gitlab.com/gitlab-org/gitlab-ce/issues](https://gitlab.com/gitlab-org/gitlab-ce/issues).
    The following sections will feature the exact installation instructions for a
    Debian version.'
  prefs: []
  type: TYPE_NORMAL
- en: Operating system – Debian 9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, you will find the instructions for installing GitLab on a Debian-based
    Linux. Debian is one of the oldest Linux distributions and was created about 25
    years ago. The foundation behind it has always had a firm principle to only include
    open source GPL (General Public License) software. The package management system
    in use, `apt`, combined with good package maintainers, ensured good quality throughout
    the years. Their use of a process to determine which components should be included
    created a very clean product.
  prefs: []
  type: TYPE_NORMAL
- en: Debian became a *basic* distribution that others *forked* and expanded upon.
    In 2016, there were about 125 Debian-based distributions.
  prefs: []
  type: TYPE_NORMAL
- en: The following install instructions were created for and tested on Debian operating
    systems. For installing on Red Hat Enterprise Linux (RHEL) or its sister operating
    system, the Community Enterprise Operating System (CentOS), we recommend using
    the omnibus packages.
  prefs: []
  type: TYPE_NORMAL
- en: The following instructions should work for most people. Many people run into
    permission problems because they have changed the location of directories or run
    services as a different user.
  prefs: []
  type: TYPE_NORMAL
- en: First, we will start explaining which basic software packages you need to install
    in preparation for installing GitLab. Then, we'll touch on the installation of
    the required programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: Once, these steps are successful, we'll continue the installation by preparing
    the SQL database and the memory database for GitLab.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we'll start the installation of the GitLab application components.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will have to edit several configuration files as part of the installation.
    Make sure you have a working editor. The most common one is `vim` (people will
    disagree), and you can install it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Required basic software packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, set the locale to your preference (I use English UTF-8 , which is 8-bit
    Unicode Transformation Format). These settings are by default not present on my
    Debian system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The, install the required software using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure you have the right version of Git installed. Install Git using the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure the version of Git is 2.9.5 or higher:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Install a mail server, but don''t use Exim. It makes more sense to use Postfix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Then, select Internet Site and press *Enter* to confirm the hostname.
  prefs: []
  type: TYPE_NORMAL
- en: Required programming languages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitLab needs several programming languages in order to function. You need to
    install them in order to use all the features.
  prefs: []
  type: TYPE_NORMAL
- en: Ruby
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As GitLab is still mainly written in Ruby, we need to install that language. Remove
    the old Ruby 1.8 if present in the OS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Download the latest Ruby, check the signature and compile it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'After installation is finished, check the version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, install the Bundler Gem:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now, the basic installation of Ruby is complete.
  prefs: []
  type: TYPE_NORMAL
- en: Go
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The newer parts of GitLab are written in Go (sometimes called Golang). These
    parts have been in GitLab since version 8.0, so we need this language compiler
    too in order to run newer versions of GitLab. It is best to download the latest
    version of Go here: [https://golang.org](https://golang.org). After download make
    sure the checksum is correct (for the linux-amd64 page  for go 11.10 it is `aefaa228b68641e266d1f23f1d95dba33f17552ba132878b65bb798ffa37``e6d0`.
    We install it in the `/usr/local/bin` location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Currently, Go supports eight different hardware instructions sets, so you have
    some choice. You can find downloads for platforms other than 64-bit Linux on the Go
    download page, which is located at [https://golang.org/dl/](https://golang.org/dl/).
  prefs: []
  type: TYPE_NORMAL
- en: Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitLab uses Node.js to compile JavaScript, and Yarn is used for the dependency
    management of JavaScript components. Because these tools evolve quickly (there
    are regular new versions), you should really check the current requirements at [https://about.gitlab.com/](https://about.gitlab.com/).
    As of April 2019, the supported version of Node.js should be ≥ 8.10.0, and Yarn
    should be ≥ v1.10.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because the versions in the Linux distributions are typically behind, you should
    install from the source. The following code block shows how this is done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: You can find more information about Yarn at [https://yarnpkg.com/en/docs](https://yarnpkg.com/en/docs).
    The Node.js documentation can be found at [https://nodejs.org/en/docs/](https://nodejs.org/en/docs/).
  prefs: []
  type: TYPE_NORMAL
- en: System users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a Git user for GitLab that has no login shell and provide a common name
    in the GECOs field (GECOS = old Unix age printers):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The result is a user being added named `git`, with a group called `git`, an
    established home directory, and some template files copied to the home directory
    from `/etc/skel`.
  prefs: []
  type: TYPE_NORMAL
- en: SQL database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You really should use a PostgreSQL database, as explained in [Chapter 1](384dcfd9-ef7f-470d-89dc-3af7502a2d09.xhtml),
    *Introducing the GitLab Architecture*. For MySQL (a different SQL database), check
    the MySQL setup guide.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the database packages using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the Database Engine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a database user for GitLab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `pg_trgm` extension (required for GitLab 8.6+):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the GitLab production database and grant all privileges on the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Try connecting to the new database with the new user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Check whether the `pg_trgm` extension is enabled by pasting or typing this
    in the database console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'If the extension is enabled, this will produce the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we set the database password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Quit the database console with `\q`. Save this password for later use for yourself
    when you configure the GitLab installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an entry in the PostgreSQL main configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the listen address to `*`, or change the IP if it now says localhost
    and uncomment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an entry in the PostgreSQL host file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a line such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'After saving the host file, restart the database instance for the settings
    to take effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The database is now ready for GitLab.
  prefs: []
  type: TYPE_NORMAL
- en: Redis memory database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we talked about Redis and how the program works.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need at least v2.8 of Redis for the installation of GitLab. It can be easily
    installed on Debian with `apt`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure Redis to use sockets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Disable Redis listening on **Transmission Control Protocol** (**TCP**) by setting
    `port` to `0`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Enable the Redis socket for the default path on Debian and similar distributions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Grant permission to the socket to all members of the Redis group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the directory that contains the socket (if it exists it''s ok):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Persist the directory that contains the socket, if applicable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Activate the changes to `redis.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Add Git to the Redis group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: We now have a functional Redis server to be used with GitLab.
  prefs: []
  type: TYPE_NORMAL
- en: GitLab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll install GitLab in the home directory of the `git` user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Clone the source:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Go to the GitLab installation folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the example GitLab config:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the GitLab configuration file and follow the directions at the top of
    the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the example secrets file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure GitLab can write to the `log/` and `tmp/` directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure GitLab can write to the `tmp/pids/` and `tmp/sockets/` directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the `public/uploads/` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure that only the GitLab user has access to the `public/uploads/` directory,
    now that files in `public/uploads` are served by GitLab-Workhorse:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the permissions of the directory where CI job traces are stored:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the permissions of the directory where CI artifacts are stored:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the permissions of the directory where GitLab pages are stored:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the example Unicorn configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Find the number of cores:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Enable cluster mode if you expect to have a high load instance. Set the number
    of workers to at least the number of cores. For example, change the amount of
    workers to 3 for a 2 GB RAM server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the example Rack attack configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Configuration of Git global settings for Git user `autocrlf` is needed for
    the web editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Disable `git gc –auto` because GitLab already runs `git gc` when needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Enable packfile bitmaps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Enable push options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure the Redis connection settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the Redis socket path if you are not using the default Debian configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Configure the GitLab database settings by copying the template for PostgreSQL
    to `database.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, update `config/database.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'At the very least, the lines to change are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '`"<your secure password"` is the password you created earlier, in the *SQL
    database* section of this chapter! The host is the hostname or IP address of your
    PostgreSQL database server.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make `config/database.yml` readable to Git only:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Install RubyGems (expect a lot of output):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: The core GitLab application is now installed on the system. We need other components
    as well, such as GitLab Shell, GitLab Workhorse, and Gitaly. They will be explained
    in the next sections.
  prefs: []
  type: TYPE_NORMAL
- en: Installing GitLab Shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'GitLab Shell is SSH access and repository management software developed specially
    for GitLab. You can install it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, the `gitlab-shell` configuration is generated from your main GitLab
    configuration. You can review (and modify) the `gitlab-shell` configuration as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Starting the service will be executed later.
  prefs: []
  type: TYPE_NORMAL
- en: Installing GitLab-Workhorse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'GitLab-Workhorse uses GNU (Gnu''s Not Unix) make. The following command line
    will install GitLab-Workhorse in `/home/git/gitlab-workhorse`, which is the recommended
    location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Installing Gitaly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Fetch the Gitaly source with Git and compile with Go:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Restrict Gitaly socket access:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using non-default settings, you need to update `config.toml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure Gitaly is started:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Take a look at `/home/git/gitlab/log/gitaly.log` for errors and check whether
    Gitaly processes are in the `ps -ax` process list. It should run.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing the database and activating advanced features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Use the following command to initialize the database and activate advanced
    features:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'When done, you will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: You can continue the installation and eventually start GitLab, then the first
    person who accesses the login page will be given the option to supply a new admin
    password. This is probably not what you want, so there is a command to set this
    before starting. You have to supply the password, email, and variable to override
    the database check to make it work (answer yes to the prompt)**:**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: So, if you don't set the password (and it is set to the default one), please
    wait to expose GitLab to the public internet until the installation is done and
    you've logged into the server the first time.
  prefs: []
  type: TYPE_NORMAL
- en: Final steps for preparing the system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a few actions left before we start the GitLab application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back up your secrets file (where GitLab stores encryption keys):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Install the System V init script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Active GitLab at boot time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Make sure log files are rotated frequently (to safe disk space):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Check whether GitLab and its environment are set correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get an output such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Everything on the system is configured to run GitLab and to make it survive
    a reboot.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing to serve
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are almost ready to start GitLab. First, we need to prepare the frontend
    to serve content.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling GetText PO files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Use the following command to compile GetText PO (portable object) files. This
    takes care of handling string values in different languages (you will see comparable
    output):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Compiling assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Use the following command to compile assets with Yarn (receiving similar output):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, use the following command to compile the last assets (similar output):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Starting your GitLab instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Use the following command to start your GitLab instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'Or use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'If successful, you should see output similar to the following when retrieving
    the status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: The main application is running, so now, we need to put NGINX in front as a
    reverse proxy.
  prefs: []
  type: TYPE_NORMAL
- en: NGINX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The role of this component in the GitLab architecture is well described in [Chapter
    1](384dcfd9-ef7f-470d-89dc-3af7502a2d09.xhtml), *Introducing the GitLab Architecture*.
    It functions as a reverse proxy, and buffers HTTP requests from clients before
    they are sent to the Unicorn application server. The default NGINX that comes
    with Debian is too old for use with GitLab. That is why we have to install a newer
    one (> 1.12.1).
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a public repository key and an `apt` repository URL for NGINX so we can
    install the NGINX package via `apt-get`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, install the latest NGINX:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'Copy the GitLab custom NGINX configuration files that are in our GitLab installation
    folder to the NGINX configuration folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: 'Change settings if needed (for example, change the `server_name YOUR_SERVER_FQDN` line
    to the DNS name of your GitLab application server):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: 'Delete the default NGINX configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: 'Restart NGINX to activate the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: In case of any errors, look in `/var/log/nginx/gitlab_error.log`. Now, you should
    find GitLab running.
  prefs: []
  type: TYPE_NORMAL
- en: Go to your new GitLab application server in your web browser for your first
    GitLab login. Remember that if you did not create a password earlier at `Run gitlab:setup`,
    you will be presented with a form to provide a password for the administrator
    account. The default `username = 'root'` can be changed later. You can set up
    the password now and log in again to start doing work!
  prefs: []
  type: TYPE_NORMAL
- en: The installation is finished!
  prefs: []
  type: TYPE_NORMAL
- en: Using it from Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The future is in containers. It has been said for years, and now it is almost
    fact. Running applications in containers provides many advantages. It requires
    much less operating system overhead because containers share the capacity of the
    underlying operating system. GitLab provides GitLab Docker images via Docker Hub,
    the central registry on the internet for official Docker images.
  prefs: []
  type: TYPE_NORMAL
- en: Both GitLab CE and EE are available and are called `gitlab/gitlab-ce` and `gitlab/gitlab-ee`.
    GitLab Docker images are feature complete images of GitLab and they run all the
    services in a single container.
  prefs: []
  type: TYPE_NORMAL
- en: 'Containers can run in different environments, but let''s start with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the image in Docker Engine directly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run GitLab using `docker-compose`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You really need Docker software for this. See the official installation docs
    ([https://tuleap-documentation.readthedocs.io/en/latest/developer-guide/quick-start/install-docker.html](https://tuleap-documentation.readthedocs.io/en/latest/developer-guide/quick-start/install-docker.html))
    for how to install it.
  prefs: []
  type: TYPE_NORMAL
- en: Docker is not officially supported on Windows. You might encounter problems
    with volume permissions and other unknown issues. Try at your own risk and maybe
    find help on **Internet Relay Chat** (**IRC**) in the forums.
  prefs: []
  type: TYPE_NORMAL
- en: Running the image directly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before running the image, make sure you have a directory available for storing
    configuration, logs, and data (or be prepared to lose data). Normally, we create
    directories in our home folder, but a better idea is to use the **Filesystem Hierarchy
    Standard** (**FHS**), a community supported standard of where to put stuff. `/src`
    seems perfect for storing container data (see [http://tldp.org/LDP/Linux-Filesystem-Hierarchy/html/srv.html](http://tldp.org/LDP/Linux-Filesystem-Hierarchy/html/srv.html)).
    GitLab also uses this convention in their samples.
  prefs: []
  type: TYPE_NORMAL
- en: 'The GitLab container uses host-mounted volumes to store persistent data:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Local directory** | **Container location** | **Purpose** |'
  prefs: []
  type: TYPE_TB
- en: '| `/srv/gitlab/data` | `/var/opt/gitlab/data` | For storing application data.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `/srv/gitlab/logs` | `/var/log/gitlab` | For storing logs. |'
  prefs: []
  type: TYPE_TB
- en: '| `/srv/gitlab/config` | `/etc/gitlab` | For storing the GitLab configuration
    files. |'
  prefs: []
  type: TYPE_TB
- en: If you want to use other local directories, that is fine, but the container
    locations are needed for GitLab to function correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, run the `gitlab-ce` image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: Running it this way will run it in the foreground and you'll be able to see
    the console. You can add `--detach` to run the image in the background.
  prefs: []
  type: TYPE_NORMAL
- en: Starting with `--publish` (or `-p` for short) will make the ports required to
    access SSH, HTTP, and HTTPS  available. All GitLab data will be stored as subdirectories
    of `/srv/gitlab/`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding `--restart always \` as an option will make the container automatically
    start after a system reboot.
  prefs: []
  type: TYPE_NORMAL
- en: If you're on SELinux and don't want it cause permission problems, you can put  '`Z `'after
    your volumes (`--volume /srv/gitlab/data:/var/opt/gitlab:Z`). Docker will then
    execute a shell command: `chcon -Rt svirt_sandbox_file_t` for that location.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check whether the container is running with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: You should see a list of running containers, including one that is named `gitlab`.
    In this example, you can now access this container at [http://gitlab.joustie.nl](http://gitlab.joustie.nl)[.](http://gitlab.joustie.nl)
  prefs: []
  type: TYPE_NORMAL
- en: Configuring GitLab after startup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because the containers provided by GitLab use the official omnibus package,
    all configuration actions are centered around the `gitlab.rb` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The software inside the container is provisioned using the omnibus GitLab install,
    so that means `/etc/gitlab/gitlab.rb` is used inside the container. You can edit
    the file by entering the container with a shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way is to directly edit the `gitlab.rb` file in a Docker command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: You will have to set `external_url` to something valid in the `gitlab.rb` file
    as well to make repository links in GitLab work correctly. When you are there,
    you can check other settings as well, such as enabling HTTPS, and very importantly,
    an SMTP server to use for mail. The Docker image does not have an SMTP server
    included.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you are finished making the changes you want, you will have to restart
    the container to reconfigure GitLab (it does so every time at restart):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: Starting the container with configuration settings as input
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can start the GitLab container and let it configure itself at startup by
    adding the `GITLAB_OMNIBUS_CONFIG` environment variable to the `docker run` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Put any settings from `gitlab.rb` in it that you''d like and they will be loaded
    in the container start procedure before the internal `gitlab.rb` file. Some examples
    from the omnibus-gitlab template are as follows and you can add it as argument
    to docker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s an example that sets the external URL and sets the SMTP server address
    while starting the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: 'You can add more environment variables, which are documented here: [https://docs.gitlab.com/ee/administration/environment_variables.html](https://docs.gitlab.com/ee/administration/environment_variables.html).'
  prefs: []
  type: TYPE_NORMAL
- en: It can take some time for the container to be operational. After starting and
    configuring, GitLab is reachable via your browser at `https://localhost`.
  prefs: []
  type: TYPE_NORMAL
- en: The first time you see the GitLab login page, an admin password has to be set
    up. After you have chosen one and submitted it, you can use it to log in.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading GitLab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Even in a container, upgrading GitLab is sometimes necessary. The easy way
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop the currently active container:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove the existing instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: 'Pull the new image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: 'Recreate the container in the same way as earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: When the container starts again, it will reconfigure and update itself (it will
    perform a `gitlab-ctl reconfigure`).
  prefs: []
  type: TYPE_NORMAL
- en: Run GitLab CE on a different IP address
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the same `--publish` mechanism, you can specify not only the port but
    also the IP address that Docker will use.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the latest GitLab CE on IP-address `192.168.1.1`, use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: Now, GitLab is accessible at `http://192.168.1.1` and `https://192.168.1.1`.
    A `docker-compose.yml` example that uses different ports can be found in the *Install
    GitLab using Docker Compose* section.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging the container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, a container does not behave the way you expect it to. How can you
    debug this?
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you can check the container logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter the running container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: You now have root access to the GitLab container and you can view the situation
    as if you were in a VM running omnibus-gitlab.
  prefs: []
  type: TYPE_NORMAL
- en: Install GitLab using Docker Compose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Docker Compose is used to run multiple containers as a single service. By using
    this tool, you can easily manage your Docker-based GitLab installation. It can
    be used to configure, install, and upgrade the service. It is Python-based and
    can be installed from [https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/).
  prefs: []
  type: TYPE_NORMAL
- en: If you have installed Docker Compose, or already have it on your system, you
    can build your service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `docker-compose.yml` file (or download an example):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Check the port settings. This is the same as using `--publish 80:9090` or `-p
    2224:22` with pure `docker` and not `docker-compose`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure you are in the same directory as `docker-compose.yml` and run the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: GitLab will start and run an omnibus-gitlab reconfigure during boot to set up
    GitLab. To add more configuration settings at startup, follow the instructions
    mentioned previously to add directives to the `GITLAB_OMNIBUS_CONFIG` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Updating GitLab using Docker Compose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen several ways to run Docker containers. You can run them standalone
    (plain Docker), or create sets of containers that can work together with services
    (Docker Compose). The next step is to orchestrate containers.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying GitLab using Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After some years of uncertainty, Google's **Kubernetes** has emerged as the
    premier container orchestration tool. Every major cloud vendor has integration
    for its API. This does not automatically mean that it works the same everywhere.
    Because the product has been developing so quickly, you will notice differences.
  prefs: []
  type: TYPE_NORMAL
- en: 'The fastest way to deploy GitLab on a Kubernetes cluster is by using Helm charts.
    Avoiding the management of each separate resource on a cluster, **Helm** bundles
    these resources in an application model: a chart. It works like a package management
    system in which applications are registered. Information on how to install, configure,
    and upgrade this application is contained in this package.'
  prefs: []
  type: TYPE_NORMAL
- en: Helm consists of a server called **Tiller**, which that lives in the Kubernetes
    cluster, and Helm, the command-line client that talks to the Tiller server.
  prefs: []
  type: TYPE_NORMAL
- en: GitLab Runner Helm chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With this chart, you can create scalable GitLab Runners. It will use the Kubernetes
    executor. When it receives a new job to process from GitLab CI, a new pod will
    be created in a specified namespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, add the Helm repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: Before you can start this Runner, you need to create a `.yml` file with parameters
    (we named it `values.yml`). There is a template available at [https://gitlab.com/charts/gitlab-runner/blob/master/values.yaml](https://gitlab.com/charts/gitlab-runner/blob/master/values.yaml).
    The settings are explained in the template file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The minimum you should fill in is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: After the configuration of `values.yml`, you can start the deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying of a GitLab Runner to Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Initiate the deployment with the following command (replace `yournamespace`
    with something you prefer):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: After a short time, you should find your Runner listed in the *Runners* section
    of the administration pages in GitLab.
  prefs: []
  type: TYPE_NORMAL
- en: GitLab Helm chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the official and recommended way to install GitLab on a cloud native
    environment. This chart contains all the necessary components to get started,
    and you can scale up deployments easily. This specific chart is the optimal way
    to run GitLab in a Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default deployment includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Core GitLab components**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unicorn**: The pre-forking Ruby on Rails web server'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GitLab Shell**: The Ruby wrapper around Git on the server, enabling **Git-over-SSH**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GitLab Workhorse**: The smart reverse proxy, taking on big HTTP-requests'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Registry**: The GitLab container registry'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sidekiq**: The backend services for GitLab, taking care of merge requests,
    emails, and other asynchronous jobs'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gitaly**: The storage layer abstraction for Git operations'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extra optional dependencies**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Redis**: The caching key value store, database multi-tool can speed up processing'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Minio**: An object storage server with an Amazon S3 compatible interface'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bonus material**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**An autoscaling, unprivileged GitLab Runner using the Kubernetes executor**: If
    you run GitLab through Kubernetes, a dedicated GitLab runner is part of the design.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automatically provisioned SSL via Let''s Encrypt**: When you provide Kubernetes
    with an administrator and a domain name, the Let''s Encrypt automation builtin
    can setup SSL for you.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: As with the GitLab Docker image, the GitLab chart is a feature completed for
    the core product and takes a few minutes to deploy. Deploying GitLab using the
    Helm chart takes 5 to 10 minutes depending on your hardware or service location.
    It is also possible to run certain components outside of the Kubernetes cluster;
    this is also what you do in production, normally. It is better to keep your application
    state out of the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the requirements for deploying GitLab to Kubernetes:'
  prefs: []
  type: TYPE_NORMAL
- en: You need Helm version  >2.9 and `kubectl` >1.8 (about 1 minor release version
    difference with your cluster).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Kubernetes cluster using version >1.8 with a minimum of 6 vCPUs and 16 GB
    RAM.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The cluster can be a Google GKE, Amazon EKS, or Microsoft AKS-based cluster,
    or a local one using Minikube, for example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should be able to easily configure  a wildcard DNS entry for your domain
    (for example, `*.example.com`) and an external IP.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can connect and log in to the cluster.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A configured and initialized Helm Tiller running.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To make sure Helm is configured and initialized, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: Deploying GitLab to Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To deploy GitLab, the following three parameters are required:'
  prefs: []
  type: TYPE_NORMAL
- en: '`global.host.domain`: Should point to your wildcard DNS domain'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`global.hosts.externalIP`: The external IP address for the cluster'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`certmanager-issues.email`: The email address that is used for issuing certificates
    (Let''s Encrypt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, when you only have a few parameters such as these, just run the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: You can also run a deployment using a `values.yml` file, just like the GitLab
    Runners chart. You can find examples at [https://gitlab.com/charts/gitlab/tree/master/examples](https://gitlab.com/charts/gitlab/tree/master/examples).
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring the deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After running the `helm upgrade --install` command, it can take several minutes
    before output is returned. It should look a bit like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: Afterwards (or during the deployment in another session), you can issue a `helm
    status gitlab` command to see info about the deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Initial login
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If everything went well, you will find your installation by adding GitLab to
    your wildcard DNS name, in the case of our preceding example, `gitlab.home.joustie.nl`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have not yet specified a root password for the initial administrator user
    in GitLab. During the deployment on Kubernetes, a random password was automatically
    created. You can fetch this password with the following command from Terminal
    (replace `name` with your deployment name; for us, it is `gitlab`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: Outgoing email
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you do not specify it, there is no outgoing email enabled. You have to enable
    it by specifying some settings. The following is the `install` command if you
    set the options right away:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: Also, make sure there is no firewall preventing traffic in between. Clusters
    on **Google Kubernetes Engine** (**GKE**) have their SMTP ports blocked by default.
  prefs: []
  type: TYPE_NORMAL
- en: Updating GitLab using the Helm chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once your GitLab chart is installed, configuration changes and chart updates
    should be done using the Helm upgrade.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you would like to upgrade GitLab or change settings, use the following procedure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `gitlab.yaml` file, looking at the possible values here: [https://docs.gitlab.com/charts/installation/command-line-options.html](https://gitlab.com/charts/gitlab/blob/master/values.yaml).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Save and apply the settings file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: 'The command should return a lot of output, but it should mention the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: Uninstalling GitLab using the Helm chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To uninstall the GitLab chart, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: You can run `helm status` afterwards to see if the action has been completed.
  prefs: []
  type: TYPE_NORMAL
- en: Creating droplets on DigitalOcean
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**DigitalOcean** is a cloud provider, originating from New York. It has been
    a darling of developers for years. It offers an API, integrations, and affordable
    pricing to run your application workloads and VMs.'
  prefs: []
  type: TYPE_NORMAL
- en: There are two ways of installing GitLab on DigitalOcean. You can create VMs
    (**droplets**) yourself and configure them using the omnibus installer or install
    them from source yourself. An even better way is to use the predefined GitLab
    droplet image that is already available on the site. When creating a droplet,
    you can specify this image.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you log in to DigitalOcean, you can go to your droplets page and create
    a new one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/17e0baa6-bf2d-4236-b120-12445d83cade.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Determine the options for a droplet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8c06f277-8177-4aab-a508-bb52fc4b6683.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After logging in, you will be asked to set some options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/97bd881e-0afb-4486-842e-8bb56139a0ef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The droplet is ready. The system will reboot and reconfigure itself. If the
    login does not work, log in via SSH as a root to your droplet and execute the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: 'If this is visible, we have to try to set the password again using one of the
    methods available in the omnibus package. Add the following line to the `/etc/gitlab/gitlab.rb` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, execute the following in order to re-seed the database (it is empty,
    so that doesn''t matter) and reset the admin password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: 'After some time, you should receive the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: 'If you go to the URL of your new GitLab instance, you can set the password
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c3d4d948-76fc-4e9d-bdec-e013a5a1a8ac.png)'
  prefs: []
  type: TYPE_IMG
- en: Enjoy your GitLab!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed the different ways of installing GitLab. The Linux
    platform was the chosen OS for which we provided instructions and examples. We
    started with the recommended way of installing for most organizations, using the
    omnibus package.
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to install GitLab from scratch and to run it from source.
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to run GitLab from a Docker container. We also showed you
    how to update Docker-based GitLab installs and gave an example of using Docker
    Compose to create a multi-container installation. Finally, we talked about the
    fact that, when scaling, you probably would like several containers deployed and
    managed. We showed you how to achieve this with Kubernetes as the orchestration
    tool.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will dive into the process of configuring GitLab after
    the initial installation.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the recommended way of installing GitLab?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the least, which ports do you need to open on your firewall?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On what platforms can you install GitLab using the omnibus package?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the basic administration command you use in an omnibus-based install?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What version of Git is the minimum you need on a source-based GitLab install?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What PostgreSQL extension do you need to enable for GitLab in a source-based
    GitLab install?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the name of the official GitLab CE Docker images?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the location of site-specific data according to **Linux Filesystem Hierarchy**
    (**LFH**)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What programming language do you need to have installed to run Docker Compose?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the recommended way of deploying GitLab components to Kubernetes?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Learn Docker - Fundamentals of Docker 18.x* by *Gabriel N. Schenker*: [https://www.packtpub.com/in/networking-and-servers/learn-docker-fundamentals-docker-18x](https://www.packtpub.com/in/networking-and-servers/learn-docker-fundamentals-docker-18x)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Develop and Operate Microservices on Kubernetes* by *Martin Helmich*: [https://www.packtpub.com/in/virtualization-and-cloud/develop-and-operate-microservices-kubernetes-video](https://www.packtpub.com/in/virtualization-and-cloud/develop-and-operate-microservices-kubernetes-video)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitLab install documentation: [https://about.gitlab.com/install/](https://about.gitlab.com/install/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
