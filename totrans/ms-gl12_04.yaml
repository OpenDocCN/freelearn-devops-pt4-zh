- en: Configuring GitLab Using the Web UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After installing GitLab in the previous chapter, you probably have a running
    instance. But how can you manage it? You need to know how to configure the software.
    This chapter will explain how this is achieved for the different kinds of GitLab
    installations that are available.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring GitLab settings at the instance level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring GitLab settings at the group level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring GitLab settings at the project level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To manage omnibus installs, you need to use a central configuration file called
    `gitlab.rb`. You need to create it yourself or copy an example of one. A template
    of this configuration file is available at [https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template](https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template).
    Please note that it isn't updated after upgrades. We will quote and discuss parts
    of this file in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: To follow along with the instructions in this chapter, please download this
    book's GitHub repository, along with the examples that are available, at [https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter03](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter03).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring GitLab settings at the instance level
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you log on to GitLab as an administrator, you will notice a tool icon
    in the top right of the menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2ccf761b-fefa-477e-987b-a5a08950436d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click on that, the administrator page will load, which you can use
    to access instance-level settings. The base page provides an overview of active
    projects, users, and groups:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7d888b66-8dd0-49fc-b6d2-78a41cfa2bc6.png)'
  prefs: []
  type: TYPE_IMG
- en: On the left-hand side, there are several global administration options. Let's
    go through them.
  prefs: []
  type: TYPE_NORMAL
- en: Menu options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The options are grouped, and some items can even be expanded:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Dashboard**: Dashboard gives you some insight into the number of projects,
    users, and groups that are in your GitLab instance. You can create new ones from
    this screen. There is also other interesting information in the form of statistics,
    where you can get an overview of active features and installed components. If
    you enabled exposing instance information to GitLab, it will also mention whether
    you should upgrade your instance to a newer version of GitLab.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Projects**: In the Projects pane, you can search for projects and create
    new ones. For the search option, there are some filters available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Users**: The Users pane offers the same functionality as the Projects pane,
    that is, searching for users with advanced filtering and being able to create
    new users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Groups**: The Groups pane is identical to the previous panes in terms of
    its features, but without fancy filters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jobs**: The Jobs pane offers you insight into **continuous integration/continuous
    deployment** (**CI/CD**) jobs that are pending, running, or finished.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Runners**: In this section of the administration page, options and views
    on CI/CD GitLab runners are available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gitaly servers**: By default, there is only one Gitaly server, and it is
    shown here. However, there could be more, depending on your setup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The monitoring section offers interesting bits of information that are needed
    so that you can administer your GitLab instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '**System information**: CPU, memory, and other metrics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Background Jobs**: GitLab integrated the Sidekiq statistics gem into the
    application, and it can be viewed here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Logs**: In this section, you can view 2,000 lines of information from the
    most important GitLab log files (unicorn, gitlab-shell, Sidekiq, and so on).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Health check**: This is a very interesting page for sysadmins. Here, you
    will find endpoints that will give some insight into the health of the running
    GitLab instance. There is also a token present, which you will need to send as
    a parameter if your monitoring software wants to scrape the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Requests Profiles**: This is only interesting to developers or testers. Here,
    you can send a header to GitLab for use in request profiling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Audit Log**: If you have an enterprise license, you can find audit events
    here and filter them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Messages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Your GitLab instance has a facility where you can send messages to all of your
    users. These broadcasts can come in handy if you want to inform your users about
    system-wide events, such as upgrades and scheduled downtime. The following is
    the Admin page, which you can find in the side menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4d90914a-7196-472f-b056-86141f929f6a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you''ve scheduled a new message, it can be reused later as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4cdaf1a2-47c0-4923-bf66-6f7f7a7369e7.png)'
  prefs: []
  type: TYPE_IMG
- en: System hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitLab can perform HTTP POST requests on the system level and act on several
    events.
  prefs: []
  type: TYPE_NORMAL
- en: 'A standard event is raised when you''re creating a new project or user. Additionally,
    it can send other types of events as well. Just add a destination URL and (optionally)
    a secret token:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/59cee896-832f-4840-b83d-652c5787bb75.png)'
  prefs: []
  type: TYPE_IMG
- en: When you have configured your system hook, there is a drop-down list with a
    test to check whether it works by calling the URL.
  prefs: []
  type: TYPE_NORMAL
- en: Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On this page, you also have the option to configure installed **plugins**. This
    basically fires a locally installed program instead of calling a URL with parameters.
  prefs: []
  type: TYPE_NORMAL
- en: It requires you to place the plugin code in `/opt/gitlab/embedded/service/gitlab-rails/plugins`,
    and it has to be written in a certain way. After installation, the plugin can
    be run as a hook.
  prefs: []
  type: TYPE_NORMAL
- en: Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section of the administration page, you have the option to register
    third-party applications in order to use GitLab as an OAuth authorization provider.
  prefs: []
  type: TYPE_NORMAL
- en: '**Open Authorization **(**OAuth**) is an open standard for authorization. Users
    can give a program or website access to their private data that''s kept on another
    website without revealing their username and password.'
  prefs: []
  type: TYPE_NORMAL
- en: To register an application, you need to provide a name, callback URL, and set
    a few options.
  prefs: []
  type: TYPE_NORMAL
- en: Trusted means that a token is exchanged based on the already validated resource
    owner's credentials. The user authorization step is subsequently skipped for this
    application when it's used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some other scopes are also defined that allow a given application to perform
    various actions. These are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**API**: Grants complete read and write access to the API, including all groups
    and projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`read_user`: Grants read-only access to the authenticated user''s profile through
    the `/user` API endpoint, which includes username, public email, and full name.
    It also grants access to read-only API endpoints under `/users`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sudo`: Grants permission to perform API actions as any user in the system
    when authenticated as an admin user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`read_repository`: Grants read-only access to repositories on private projects
    using Git over HTTP (not using the API).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`openid`: Grants permission to authenticate with GitLab using OpenID Connect.
    It also gives read-only access to the user''s profile and group memberships.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also revoke registration if you wish to. GitLab uses **doorkeeper-gem**,
    which can be found at [https://github.com/doorkeeper-gem/doorkeeper](https://github.com/doorkeeper-gem/doorkeeper),
    to provide this functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Abuse reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are several places in the GitLab web interface where, as a user, you
    can file and report abuse. You can find buttons to file a report in the following
    sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Comments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Issues and merge requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The profile page of a user (refer to the following screenshot):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/1c6164f0-bbd8-4302-bb42-d0fe3ac50493.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click the Report abuse button, the following form will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/33ea7bb0-ff63-4757-b3f3-a38b51b32041.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click on the Send report button, an administrator will be notified,
    and he or she will find the abuse report in the Abuse Reports section of the administration
    pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/19541d11-32e8-4c59-a16f-5cbead45818b.png)'
  prefs: []
  type: TYPE_IMG
- en: License
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are using GitLab Enterprise Edition, this is the place where you manage your
    license. You can either upload a file or insert the appropriate license key. You
    can browse to GitLab to buy a new license.
  prefs: []
  type: TYPE_NORMAL
- en: Kubernetes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you can add an instance-wide Kubernetes cluster, which will
    be used to create deployment environments. We will discuss this option in [Chapter
    11](8e2b1a18-2d76-4c74-8e3f-869f2d009577.xhtml), *The Release and Configure Phase*.
  prefs: []
  type: TYPE_NORMAL
- en: Push rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, you can define all kinds of rules that will allow or disallow
    Git pushes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/609ec937-9b85-44ab-8f0d-b2803356ec62.png)'
  prefs: []
  type: TYPE_IMG
- en: Geo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you have an Enterprise license and want to configure replicas of your GitLab
    instance, this is the place to use. We will discuss Geo in Chapter 22, *Using
    Geo to Create Distributed Read-Only Copies of GitLab*.
  prefs: []
  type: TYPE_NORMAL
- en: Deploy Keys
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, you can register SSH keys, which are known as **Global Shared
    Deploy keys**. They allow read-only or read-write (if enabled) access to be configured
    on any repository in the entire GitLab installation. When the administrator has
    registered them here, you can assign them in your project, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a88f541-69d3-4602-9799-bd445766f8fe.png)'
  prefs: []
  type: TYPE_IMG
- en: This feature can be used by a remote CI/CD server to check out code.
  prefs: []
  type: TYPE_NORMAL
- en: Service templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Project services allow you to integrate GitLab with other third-party applications.
    They resemble plugins that you can find in other systems. They allow for a lot
    of freedom in terms of adding functionality to GitLab. In the Service Templates
    section, you can edit information for predefined templates. The repository owners
    then have to configure less information if they want to enable a service integration
    for their repository.
  prefs: []
  type: TYPE_NORMAL
- en: Appearance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can define some cosmetic aspects of your GitLab instance on the Appearance
    settings page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e7e66511-b9e3-4b5d-8299-a98f4dd4c3e8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If, for example, you want to greet your users with a nice logo on the front
    page, you can change the logo by uploading a new one. You can do this by clicking
    the Choose File button near the Logo section. After you have done this, log out.
    You will be redirected to the front page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/39cfe443-7cc6-4a49-8193-15bea1975c06.png)'
  prefs: []
  type: TYPE_IMG
- en: Settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section has a lot of detailed options, all of which we will discuss here.
  prefs: []
  type: TYPE_NORMAL
- en: General
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This part of the administration panel deals with settings that are not easily
    put into a group.
  prefs: []
  type: TYPE_NORMAL
- en: Visibility and access controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, you define the default authorizations and permissions for users. There
    are three basic options. For instance, you can make projects private, which means
    that only you or people you grant access to can see when you create a new project.
    The internal level means only logged-in users can see your project (read-only).
    Public is the widest access level and allows anyone to see your project (but not
    write to it). The same authorizations can be set for snippets and groups. You
    can also determine what sources can be imported.
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of import modules available, but maybe you want to limit those.
    Another import option is to allow projects to be exported. There are several functions
    that can help users with this. If this isn't something you would like to cater
    for, then you can disable it here. GitLab supports both Git client access protocols
    (SSH and HTTP). You can also disable them in this section if you want to. Finally,
    you can control what kind of SSH keys can be used for Git SSH. Is RSA too insecure?
    Just disable it.
  prefs: []
  type: TYPE_NORMAL
- en: Account and limit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you can set options such as session expiration (the default
    is 20 minutes), project limits, and maximum attachment sizes. The default project
    limit is set to 100,000, while the maximum size of a repository is not set by
    default. The attachment size is 10 MB. You can also enable Gravatars for accounts,
    which means that an image that is uploaded to `gravatar.com` can function as your
    personal icon. GitLab can act as an OAuth backend, and you can allow normal users
    to register new applications by using it.
  prefs: []
  type: TYPE_NORMAL
- en: You can also configure the way new users are handled. They can be defined as
    external users. This means that new users can only access specific projects that
    they are granted access to. They can't create new projects. Optionally, you can
    define exceptions for that rule with a regular expression. The final option is
    to enable a prompt to let users know that they haven't uploaded public SSH keys
    yet.
  prefs: []
  type: TYPE_NORMAL
- en: Diff limits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you can set the maximum size a diff patch can get to before
    it cannot be displayed in the normal diff view. If this size is reached, a link
    to a blob view will be presented.
  prefs: []
  type: TYPE_NORMAL
- en: Sign-up restrictions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a default installation, a form is available on the GitLab login page so that
    you can sign up if you don't have an account. You can disable the signup pages
    here, as well as edit a whitelist and blacklist to deny access to certain domains
    upfront. You can also specify whether you want an email to be sent after the signup
    procedure.
  prefs: []
  type: TYPE_NORMAL
- en: Some text will be shown to the user after signup has completed.
  prefs: []
  type: TYPE_NORMAL
- en: Sign-in restrictions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These settings cover the following restrictions:'
  prefs: []
  type: TYPE_NORMAL
- en: Enable or disable logging in to the web interface with a password (without it,
    you need a third-party authentication provider such as Google)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable or disable password authentication for Git over HTTPS (without it, a
    personal access token is needed)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable or disable two-factor authentication (with a grace period that determines
    how long a user can wait during configuration)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It is possible to use a hardware token device as a second factor, as you can
    see in the following screenshot (this only works in Chrome):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8b28e596-ce8f-43b6-8e23-2d73f30b818a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also choose to use a code generator app such as Google Authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2aef2208-d8f5-4499-adc4-2ec6f903e98a.png)'
  prefs: []
  type: TYPE_IMG
- en: You can also set a home page URL here, which is where non-logged-in users will
    be redirected to. In the same way, you can define an after-sign-out path, where
    users will be led to when they sign out.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, it's also possible to set a standard sign-in text to be visible on
    the login page.
  prefs: []
  type: TYPE_NORMAL
- en: Terms of service and privacy policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you use GitLab for an organization that uses strict terms, you can make sure
    that your users accept a policy that you can enter here, in a nice markdown-formatted
    text box.
  prefs: []
  type: TYPE_NORMAL
- en: External authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For some installations, it could be crucial to let external systems have more
    influence on the access policies in GitLab. For this, you can specify an external
    authorization service that checks the user's information and the classification
    label that has been given to a project. Based on that query, access may or may
    not be granted. If you enable this, all the pages that use cross-project data
    won't work anymore (such as snippets and activity).
  prefs: []
  type: TYPE_NORMAL
- en: Web Terminal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a recent feature, and is where you can access a terminal via a web browser
    (part of a pipeline). Here, you can set a timeout on the session time for this
    terminal. Keeping it to zero means that it will try the session indefinitely.
  prefs: []
  type: TYPE_NORMAL
- en: Web IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Web IDE** is a feature that is also new and in full development. This book
    is actually typed in it, and it works better than most web editors. The main option
    that you can control from the settings page is the feature toggle, which allows
    client-side JavaScript projects to enable live preview functionality using CodeSandbox.'
  prefs: []
  type: TYPE_NORMAL
- en: For more information about project access, go to [https://codesandbox.io](https://codesandbox.io).
  prefs: []
  type: TYPE_NORMAL
- en: Integrations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the ways to advance GitLab as a product is to offer several ways to
    integrate with other products. This also aligns with the Unix and open source
    philosophy of creating small, interoperable utilities. On a technical level, there
    are three ways to accomplish this:'
  prefs: []
  type: TYPE_NORMAL
- en: Using webhooks (event mechanisms, asynchronous, and so on. For more information,
    go to [https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/web_hooks/web_hooks.md](https://gitlab.com/gitlab-org/gitlab-ce/blob/master/doc/web_hooks/web_hooks.md)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the GitLab API (proactively get information from GitLab).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using project integration (running from a repository in GitLab). In the settings,
    four options are available: Elasticsearch, PlantUML, Snowplow, and the ability
    to view third-party offers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elasticsearch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Only available in Enterprise edition, this search engine integration feature
    is really powerful, but is a subject on its own. It offers a full-text search
    option for GitLab so that you can search for text throughout your source code
    repositories. You will need to install the search program, which has a HTTP web
    interface on another server, and specify the connection settings (the URL):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e91d2dba-efc8-41a7-af2c-3297cc0fbe3a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also limit what will be indexed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ffc70aaf-e34c-4233-8686-cc6bf582e6c5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Another option is to connect to an Elasticsearch instance that you are running
    in the Amazon cloud. You can specify connection settings here as well if you have
    this set up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6c0670b2-2482-4935-a197-213da9e423ce.png)'
  prefs: []
  type: TYPE_IMG
- en: You can find more information on this at [http://elastic.co](http://elastic.co).
  prefs: []
  type: TYPE_NORMAL
- en: PlantUML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, you can define the URL for PlantUML (this is an API integration).
  prefs: []
  type: TYPE_NORMAL
- en: Third-party offers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This setting lets you opt out of third-party offerings. An example of such an
    offer would be to get free Google Cloud credits so that you can use Google's Kubernetes
    platform.
  prefs: []
  type: TYPE_NORMAL
- en: Snowplow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Again, Snowplow is an Enterprise feature. Some companies want to track custom
    events in GitLab. With Snowplow, you can use this big data platform to collect
    and analyze data. If you enable this integration, you have to provide a collector
    URI, a site ID, and a cookie domain.
  prefs: []
  type: TYPE_NORMAL
- en: Repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, you will find options that are generic for all repositories.
  prefs: []
  type: TYPE_NORMAL
- en: Repository mirror
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With GitLab, you can create repository mirrors. This means that, after an initial
    synchronization, the content (and metadata, if possible) is kept up to date with
    the remote source. The sync job will be triggered automatically and will time
    out after 15 minutes. This setting determines whether a user can set up mirrors.
    If it's disabled, only administrators can perform this task.
  prefs: []
  type: TYPE_NORMAL
- en: Repository storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most important settings handle the way storage is used. Instead of using
    folder structures with names, you can use hashed values as directory names for
    projects. This way, when you're moving projects, the folder isn't moved on an
    OS level – the reference to the hash is changed in the database instead. Keeping
    a hash-based reference tree and searching is much faster than traversing a folder
    tree by name.
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, you can specify alternate storage locations where new projects are
    stored. If there is more than one location, it will alternate between them in
    no particular order. The location that shows up in the chooser depends on what
    storage paths were defined in `gitlab.rb` (for omnibus installations) or `gitlab.ym`
    (source-based setups).
  prefs: []
  type: TYPE_NORMAL
- en: The settings for the storage circuit breaker are found here as well. This is
    used to handle failures of the underlying storage GitLab uses. When you're using
    network filesystems such as **Network File System** (**NFS**), locking issues
    can occur, which eventually make the whole system hang indefinitely.
  prefs: []
  type: TYPE_NORMAL
- en: Repository maintenance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Git has a special integrity checking feature called **fsck**. Just like the **Filesystem Consistency
    Check** (**fsck**) for filesystems, it can verify a structure and tell us whether
    it''s compromised. The name of this Git function was chosen because Git was initially
    built as a filesystem. A filesystem is classed as a graph model, and Git implements
    this as tree and blob objects. Because all of the items are check-summed, fsck
    can verify the integrity of the objects and their relations. This graph is depicted
    in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/077503b3-5e09-436d-a4ac-fbd39a0f452d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Changes between files in a repository are saved as deltas and packed together
    in pack files, which are then compressed. This also happens to other objects in
    the repository hierarchy. In short, this means that the graph model has been enhanced
    to make Git operations faster and more efficient on your computer, and to save
    disk space. Sometimes, after `commit --amend` or `git rebase`, objects such as
    commits become unreachable (there''s no parent SHA). All the preceding use cases
    are candidates for the Git garbage collection function: `git gc` ([https://git-scm.com/docs/git-gc](https://git-scm.com/docs/git-gc)).
    It is recommended to run this function on your Git repositories regularly.'
  prefs: []
  type: TYPE_NORMAL
- en: In the GitLab settings, you can control the two ways in which Git is being used
    on the GitLab server in order to maintain repository hierarchies. The first option
    is that you can enable periodic repository checks with `git fsck`. Letting GitLab
    do this ensures that you can spot and possibly repair disk corruption issues you
    wouldn't easily find normally if you were to process all the files.
  prefs: []
  type: TYPE_NORMAL
- en: GitLab can also do housekeeping. It should run periodically to prevent the corruption
    of repositories. Unfortunately, it can also generate false alarms.
  prefs: []
  type: TYPE_NORMAL
- en: The second option is that you can control the way housekeeping is done on the
    server in order to make Git repositories more efficient and fast. You can enable
    and control when `git gc` is performed on the GitLab server. Another option for `git
    pack` operations is to let them use bitmap indexes. This could result in much
    faster cloning (but more disk space being used). The parameters for housekeeping
    are the amount of times a repository is pushed before `git repack` (incremental), `git
    repack` (full), and `git gc` is performed.
  prefs: []
  type: TYPE_NORMAL
- en: Templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From GitLab 11.x onward, you can define a special directory that will provide
    templates for all of GitLab. You can also create your own.
  prefs: []
  type: TYPE_NORMAL
- en: The custom project templates settings let you specify which group is the default
    group so that you can provide templates.
  prefs: []
  type: TYPE_NORMAL
- en: CI/CD
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This page contains several configuration options for **Continuous Integration**
    (**CI**) and **Continuous Deployment** (**CD**) using GitLab.
  prefs: []
  type: TYPE_NORMAL
- en: Auto DevOps settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As of GitLab 11.3, Auto DevOps is automatically enabled for all projects. When
    the build process is triggered for a project and a pipeline is created, the Auto
    DevOps feature will be disabled for the project if the pipeline fails. If an alternative
    `.gitlab-ci.yml` file is located in the project, it will use that instead. You
    can override the default Auto DevOps settings here and disable them:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/619698e3-c5b5-41d2-aea1-7e1d87c4366b.png)'
  prefs: []
  type: TYPE_IMG
- en: Shared runner settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the key components of CI/CD is the runners. In this section, you can
    enable shared runners for all new projects, which means that any shared runner
    could end up building your code. There is a security aspect to this because shared
    runners could exist that aren't using a stateless mechanism. They could be running
    your job, and not clean up the artifacts, and get a new build job. This is probably
    is not what you want. Your data could be compromised by another build project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, another option is to set some warning text for shared runners that
    communicate so that you can ensure your shared runners are under control:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cdbb17a7-029b-4779-bb28-de411d1b8cd7.png)'
  prefs: []
  type: TYPE_IMG
- en: When runners build artifacts, the results can be uploaded and viewed after the
    pipeline has finished. You may want to set a certain limit on the size of the
    combined artifacts that get uploaded as a ZIP file to the GitLab CI.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also specify how long artifacts should stay available after the build.
    This is controlled by the default artifact expiration time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4d30dea2-2733-4748-b89b-4d70f35310f1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When an artifact reaches this age, it is deleted in the periodic expiration
    task. As we can see in the following screenshot, it runs every hour:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fcb1e5d7-89a8-447e-aede-30f5c65f3e9b.png)'
  prefs: []
  type: TYPE_IMG
- en: Container registry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitLab can also function as a container registry. By this, we mean it can store
    images that you create on your workstation or inside of GitLab runner pipelines.
    In this section of the admin area, you can specify how long an authorization token
    remains valid. The default is five minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Reporting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most people have an easy time identifying or explaining the term reporting.
    I personally don't understand how GitLab grouped certain options under this subject.
    To me, the first one, that is, spam and anti-bot protection, should belong to
    a security or privacy part of the settings.
  prefs: []
  type: TYPE_NORMAL
- en: Spam and anti-bot protection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitLab is able to use reCAPTCHA and Akismet to handle abusive traffic. If you
    enable this setting, you need a site key and a private key, both of which can
    be generated at [http://www.google.com/recaptcha](http://www.google.com/recaptcha). In
    this way, you raise another barrier against spammers creating users in an automated
    way. If you register, you have to prove you are a human by answering specific
    questions[.](http://www.google.com/recaptcha)
  prefs: []
  type: TYPE_NORMAL
- en: In a similar manner, Akismet can help you protect your issues in GitLab from
    spammers. With the advent of weblogs and the possibility to comment, a new spam
    technique emerged called comment spam. Spammers try to influence readers with
    massive amounts of comments. Akismet was established as an extra check (GitLab
    calls its API) to prevent automated comments (issues in GitLab).
  prefs: []
  type: TYPE_NORMAL
- en: As an extra security measure, there's the option to restrict simultaneous logins
    from multiple IPs. You can even set a maximum number of IPs a user can connect
    from by using an IP expiration time.
  prefs: []
  type: TYPE_NORMAL
- en: Abuse reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, you can set an email address that abuse reports can be sent to. The option
    to create an abuse report is scattered throughout GitLab.
  prefs: []
  type: TYPE_NORMAL
- en: Error reporting and logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In general, there are numerous log files for all kinds of services that GitLab
    is running. In this section, you can specify logging and reporting for clients
    (also known as browsers). The GitLab frontend JavaScript application that runs
    in your browser has the option to use Sentry ([https://sentry.io/welcome/](https://sentry.io/welcome/)).
    By using this, you can monitor and proactively catch errors from your users and
    act accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Metrics and profiling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Administrators or owners of a GitLab system like to know how their system is
    performing – not only at an OS level, but also in terms of functionality. For
    instance, information about how long certain operations take to complete is very
    important. These metrics are available in GitLab, but you need to do some configuration
    to make these numbers available. There are several ways to retrieve this data
    from GitLab, and it's here where you can specify details about sources of information.
  prefs: []
  type: TYPE_NORMAL
- en: Metrics – InfluxDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first system that can operate as a backend store for metrics is InfluxDB.
    This is a special kind of database that stores time series data. Before you can
    use this feature, you will have to set up this database on a separate server.
    It is too heavy to run on the same GitLab machine. Instructions on how to configure
    this can be found at [https://docs.gitlab.com/ee/administration/monitoring/performance/influxdb_configuration.html](https://docs.gitlab.com/ee/administration/monitoring/performance/influxdb_configuration.html). When
    you enable InfluxDB metrics, it will set up a **User Datagram Protocol** (**UDP)**
    stream to the InfluxDB host that will carry all kinds of event information. You
    can fine-tune the connection pool size, the connection timeout, and so on to make
    sure that you don't generate too much data. After changing this setting, you will
    have to restart.
  prefs: []
  type: TYPE_NORMAL
- en: Metrics – Prometheus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The preferred time series database for GitLab as of 2018 is Prometheus. Its
    scraping endpoint for GitLab can be enabled here. You will need to restart GitLab
    after you change it. A Prometheus server is bundled in `omnibus-gitlab` itself.
  prefs: []
  type: TYPE_NORMAL
- en: Profiling – Performance Bar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, you like to know how GitLab''s performance is when it''s running
    in a browser, or you want to see which part of a GitLab request takes the most
    time to complete. Enter `Profiling-Performance Bar`, which you can enable for
    certain groups. Once the Performance Bar is enabled, you will need to press the
    *P* + *B* keyboard shortcut to actually display it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2362cbed-bcb8-4d50-ae74-423de3368fbf.png)'
  prefs: []
  type: TYPE_IMG
- en: Usage statistics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section of the settings, you can enable or disable two sets of information
    that can be collected by GitLab by default. You can also choose to only let the
    information be viewable by instance admins. These types of information are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Version check (you will see Update ASAP in the overview when a new version is
    available)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usage ping (to improve GitLab and its user experience)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can share data to the public or only admins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check the Preview payload button to view other data that's shared in this ping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pseudonymizer data collection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When enabled, this option will make sure that GitLab writes anonymized information
    to a comma-separated values file. This file will then be uploaded to the S3 storage
    bucket that you specify in your configuration files (`gitlab.rb` for omnibus-gitlab
    installs and `gitlab.yml` for source-based installs).
  prefs: []
  type: TYPE_NORMAL
- en: Network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you can control some of the options that influence network
    performance and communication.
  prefs: []
  type: TYPE_NORMAL
- en: Performance optimization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, you can disable writing to an authorized keys file and let GitLab read
    authorized keys straight from the database instead of via a file. This helps speed
    up the authorization phase of Git SSH.
  prefs: []
  type: TYPE_NORMAL
- en: User and IP rate limits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here, you can throttle for web and API requests. You also have the option to
    make a difference between authenticated and anonymous requests.
  prefs: []
  type: TYPE_NORMAL
- en: Outbound requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, webhooks that are created in the system aren't allowed to go out
    of the local IP subnet. With this option, you can allow hooks to go out.
  prefs: []
  type: TYPE_NORMAL
- en: Geo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you can set some Geo preferences, such as the timeout after
    which the communication with a secondary instance is considered lost. Another
    setting that's available allows you to list the IPs and networks that can connect
    and pretend they are secondaries.
  prefs: []
  type: TYPE_NORMAL
- en: Preferences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These settings are general and are related to different subjects.
  prefs: []
  type: TYPE_NORMAL
- en: Email
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the email section, you can make emails come straight from originators, who,
    for instance, create issues or merge requests. The second option you can control
    is whether GitLab sends emails in HTML format.
  prefs: []
  type: TYPE_NORMAL
- en: Help page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can also customize the way the Help page for GitLab is presented. There''s the
    option to provide some custom text, which will be displayed on top of the Help
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3f80655e-d342-44a9-802f-06f12a3509b8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is a screenshot of the standard Help page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/82b14fc7-d66b-4cb1-977a-ab8a693d00c9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s make some changes by adding `This is a help page.`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a309208b-fa26-4cb6-99d6-dbe4b2195721.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The result will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/93508fe6-c4c6-43e6-8e93-c102fcc531e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you use the GitLab Pages feature, you can specify the maximum size of pages.
    You can set it to zero if you want the size to be unlimited. You can also allow
    users to prove that they own a domain before you serve a page for it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2274c441-ac4e-4229-a902-6aea84c6e0a7.png)'
  prefs: []
  type: TYPE_IMG
- en: Real-time features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The GitLab web interface gives you the option to poll for real-time events,
    like it does when you press the Merge button on a merge request. You can set a
    multiplier for this here so that it polls less often (or more often, depending
    on what you want).
  prefs: []
  type: TYPE_NORMAL
- en: Gitaly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Regarding Gitaly, you can control some of its timings here. If Gitaly is being
    slow, you'll want it to time out for certain requests, because otherwise the operation
    can bring down the whole GitLab instance. Since Gitaly is the interface to the
    repositories, think of filesystems or nodes not responding. Very bad things can
    happen when locks occur or when network issues prevent data transfers. It's better
    to know when to cut the cord.
  prefs: []
  type: TYPE_NORMAL
- en: Localization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a big section of the settings since there are many localization settings
    for software products. The only one that is exposed in this screen is Default
    first day of the week:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3ccb3951-f817-425a-9b7e-7c4e8e79832a.png)'
  prefs: []
  type: TYPE_IMG
- en: This depends on your geographical location.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring GitLab settings at the group level
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The admin area is only accessible to users with the admin role, but other roles
    can configure settings too. If you, as a user, have been granted permission to
    *add groups*, you can change the settings of the groups you have created. If you
    navigate to Your Groups from the top-level menu, you can access the settings from
    the left-hand side menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you will see a submenu with the items that you can configure. It looks
    a lot like the UI in the admin area but is, of course, scoped to the group:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b96a6026-b04a-485d-b27b-1bc2bc759d2b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In GitLab 12.0, a new interesting feature has been added to the General pane
    for group settings: Restrict address by IP address. It is an Enterprise feature
    and, by using it, you can make sure that certain IP addresses aren''t allowed
    to access group content. In the following screenshot, you can see that `192.168.1.0/24`
    is the only IP range that''s allowed to see the group content:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f1de42c1-253a-4619-88ac-0912e4c3bee8.png)'
  prefs: []
  type: TYPE_IMG
- en: For instance, you don't want software to be downloaded from a VPN.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring GitLab settings at the project level
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous sections, we saw that we can adjust the settings at the instance
    level in the admin area, as well as at the group level. There are also options
    for setting an individual project. If you browse to one of your projects, you
    will see a Settings menu on the left:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/008edc22-0300-41eb-8667-e98777842fbc.png)'
  prefs: []
  type: TYPE_IMG
- en: General
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The General menu provides some specific settings that aren't found anywhere
    else. Let's look at the most important ones.
  prefs: []
  type: TYPE_NORMAL
- en: Naming, topics, avatar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Under the General settings, you can find the
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b9ee3626-c2c3-4519-9b4c-491e8cafea9a.png)'
  prefs: []
  type: TYPE_IMG
- en: Visibility, project features, permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A very important part of these settings is the Visibility, project features,
    permissions sections. You can enable or disable certain features, as well as determine
    who is allowed to do what:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed56e6d5-79b8-48b6-96db-0fe2cf91d687.png)'
  prefs: []
  type: TYPE_IMG
- en: Merge requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For an individual project, you can define merge request behavior. For example,
    you can define how GitLab will execute merges on the server. For every executed
    merge request, there is a Git session on the server running the same Git binary
    that you have on your workstation. For instance, you can specify that the server
    side never does a merge commit:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/caf84dff-6f27-4d6f-81c1-1d2396c19382.png)'
  prefs: []
  type: TYPE_IMG
- en: In version 12.0 of GitLab, the concept of merge trains was added. If you enable
    this, all the merges must pass in sequence, and your merge will be a part of this
    train. The merges only succeed as a whole, and this use case is common in Enterprise
    environments where different teams work on the same product. In future versions,
    this feature will be enabled by default.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed how to configure an existing GitLab application
    instance via the web interface. The administration pages of GitLab give you a
    lot of control over your instance. After going through those pages, we explained
    the various items that can be managed.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take a look at configuring GitLab through a regular
    Terminal interface without a web browser.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What icon is used to represent the administration section?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which three items feature prominently on the admin dashboard?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the maximum size of an uploaded logo image?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which metrics backend can be configured?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What product is used to enable live preview functionality?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What UML tool can be integrated with GitLab?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What mechanism is used to prevent network storage from hanging GitLab?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What process can help preserve repository integrity?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which CI/CD feature is enabled by default?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What value has to be set in GitLab Pages to enable unlimited size?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Getting Started with Kubernetes - Third Edition*, by*Jesse White* and *Jonathan
    Baier*: [https://www.packtpub.com/in/virtualization-and-cloud/getting-started-kubernetes-third-edition](https://www.packtpub.com/in/virtualization-and-cloud/getting-started-kubernetes-third-edition)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Develop and Operate Microservices on Kubernetes*, by* Martin Helmich*: [https://www.packtpub.com/virtualization-and-cloud/develop-and-operate-microservices-kubernetes-video](https://www.packtpub.com/virtualization-and-cloud/develop-and-operate-microservices-kubernetes-video)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Docker Cookbook - Second Edition*, by* Neependra K Khare*, *Jeeva S. Chelladhurai*,
    and *Ken Cochrane*: [https://www.packtpub.com/in/virtualization-and-cloud/docker-cookbook-second-edition](https://www.packtpub.com/in/virtualization-and-cloud/docker-cookbook-second-edition)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
