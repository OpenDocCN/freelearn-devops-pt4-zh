- en: Configuring GitLab from the Terminal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After installing GitLab, you probably have a running instance. So, how do you
    manage it? In the previous chapter, we showed you the options that can be managed
    through the web interface. But there are many more options that can be set only
    through the configuration files on the server. You need to know how to configure
    the software in a regular terminal. This chapter will explain how this is achieved
    for the different types of GitLab installations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring omnibus installations from the terminal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring source installations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reconfiguring GitLab Docker containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing GitLab in a Kubernetes environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For managing omnibus installations, there is one central configuration file
    called `gitlab.rb`. You need to create it or copy an example. There is a template
    available. You can find it at [https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template](https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template).
    It is not updated after upgrades. Throughout this chapter, we will quote and discuss
    parts of this file.
  prefs: []
  type: TYPE_NORMAL
- en: 'To follow along with the instructions in this chapter, please download the
    Git repository available at GitHub: [https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter04](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter04).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will also need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Docker**: [https://www.docker.com](https://www.docker.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**kubectl**: [https://kubernetes.io/docs/tasks/tools/install-kubectl/](https://kubernetes.io/docs/tasks/tools/install-kubectl/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring omnibus and GitLab installations from the terminal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can find the template for `gitlab.rb` at [https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template](https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template).
    It is not updated after upgrades.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use omnibus or GitLab to implement **high availability** (**HA**)
    for your GitLab installation.
  prefs: []
  type: TYPE_NORMAL
- en: There is a part in `gitlab.rb` where you can define the role of the GitLab instance
    you are configuring. If there are no roles defined by default, omnibus will configure
    your server to host all the core components of GitLab.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, add the following line of code if your instance will run as a
    Redis master, and have the Redis sentinel agent running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following roles are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`redis_sentinel_role`: Enables the sentinel service only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`redis_master_role`: Enables Redis and monitoring, and allows you to configure
    the master password.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`redis_slave_role`: Enables the Redis service and monitoring.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`geo_primary_role`: Configures the database for replication and prepares the
    application server as `geo primary`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`geo_secondary_role`: Prepares the database for replication and sets the application
    up as `secondary geo`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`postgres_role`: Switches on the `postgresql`, `repmgr`, and `consul` services
    on the machine. Sets up only these components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pgbouncer_role`: This role adds the PgBouncer software for the database load-balancing
    feature.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After editing, you have to issue a `gitlab-ctl reconfigure` to apply the settings.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring source installations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The main configuration file to change is `gitlab.yml`, which is usually found
    in `/home/git/gitlab/config`. It follows the `.yml` standard and this has several
    implications. The first one is that indentation is very important. If you just
    copy and paste configuration, you will find that it can mess up the file contents.
    Another important feature that is used in the `gitlab.yml` file is utilizing anchors
    and aliases (**&base**) to specify different configuration targets. In practice,
    this means that the main configuration for all environments is specified in the
    `config` file `(production: &base)`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Below the `production: &base` target , the other environments are specified,
    and they refer to `&base` but override certain key-value pairs. How does GitLab
    know which environment information should be used? That is determined by the `RAILS_ENV`
    variable used when installing and starting GitLab.'
  prefs: []
  type: TYPE_NORMAL
- en: We have put an example configuration file in repository of this book ([https://github.com/PacktPublishing/Mastering-GitLab-12/blob/master/Chapter04/config_gitlab.yml.example](https://github.com/PacktPublishing/Mastering-GitLab-12/blob/master/Chapter04/config_gitlab.yml.example)).
  prefs: []
  type: TYPE_NORMAL
- en: The configuration file has several sections, and we'll run through them.
  prefs: []
  type: TYPE_NORMAL
- en: GitLab app settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section of the configuration file is mainly used to define the global settings
    for the whole GitLab application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first settings you will encounter are mainly for the web server component
    (Unicorn). You can specify which FQDN to use for the hostname, the port on which
    to listen to, and whether to use HTTPS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can set the port to `443` and HTTPS to true if you want to use HTTPS. If
    you have a different `ssh_host` in your setup, you can specify it as well (If
    you want Git-SSH to run on the same server, that you don''t need to specify this):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Furthermore, if you want to use relative URLs (`/mygitlab/` for instance):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also change the option regarding which OS-user to use for running the
    web server processes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The next setting is about dates and times, and you can specify the timezone
    to be used throughout the entire application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The next bundle of settings handles email. You can disable GitLab''s use of
    email entirely or specify who the sender and the subject, among other things:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The next setting determines whether new users can create groups (be careful,
    as existing users retain this privilege).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want old users to be also stripped of this privilege, one way to do
    it is to use the Rails console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The next option allows you the option to change your username. This is generally
    not recommended if you use another system such as **Lightweight Directory Access
    Protocol** (**LDAP**) for account management:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The next set of options determines the style to be used for GitLab; I suggest
    you try them all (1-10):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'A nice feature that can automate your development workflow very efficiently
    is the automatic closing of issues by issuing a commit to the default project
    branch. You can use the following pattern to make the automation work. If it matches,
    it will be closed. The pattern is quite complicated, so we will use the code provided:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We could, for example, use the following commit message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, `#122`, `#1000`, `#11`, `#229`, `#188`, and `#9999`
    will be automatically closed. Only `#10` will not be touched, because it does
    not match the pattern.
  prefs: []
  type: TYPE_NORMAL
- en: 'In GitLab, in each project you have some default capabilities, such as the
    possibility to create issues or a wiki in the project space. There is an option
    to disable or enable them by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The CI/CD component of GitLab relies heavily on webhooks as its primary eventing
    mechanism over network boundaries. On slow networks, you may want to increase
    the timeout value of them to make them try harder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You can download the contents of a project, which are combined in a ZIP file.
    This creation of a ZIP file needs some temporary disk space, which you can define
    here, the repository downloads directory (relative path to the Rails directory):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'GitLab can also utilize an email client, which can get mail from an IMAP server,
    and parse the mail contents for issues and merge request IDs. If you set this
    up correctly, you can allow users to reply to notification emails, and the result
    will be added to the issue or the merge request. The first part is where you enable
    or disable the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The second part is where you define the incoming email address that is used
    and what part of it is variable (every merge-request or issue number is a variable):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The other settings mainly concern the IMAP server that is used along with the
    credentials and connection settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: These settings together enable incoming email for your GitLab instance.
  prefs: []
  type: TYPE_NORMAL
- en: This concludes the section in the configuration file that covers some general
    settings. The next section is about storing different kinds of files.
  prefs: []
  type: TYPE_NORMAL
- en: Storing big files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The GitLab CI/CD components can build your software, and that results in build
    artifacts. They are sent back from the GitLab runners to the GitLab server. You
    can download them through the web UI. These artifacts are, by default, stored
    on the GitLab server in `shared/artifacts`. As the files can become quite large
    and numerous, it is also possible to store these artifacts somewhere else, where
    the GitLab server can fetch them when needed or redirect the request. You can
    set up object storage with Amazon S3, for example, to be used as a big bucket
    to store files.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default GitLab it stores artifacts in the local shared path  `shared/artifact` on
    the server where GitLab is installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'When comparing operations during merge requests, the `diffs` files are normally
    saved in the database when enabled. But when set to `true`, GitLab will save them
    in a shared path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same manner as the build artifacts and `diffs`, GitLab can store Git **Large
    File Storage** (**LFS**) objects in a different place, out of the project repository.
    A reference to this place is then inserted as a substitute in the project repository.
    This is a Git client extension, for which the server side necessities have been
    implemented in GitLab. (More info about Git LFS can be found at [https://git-lfs.github.com/](https://git-lfs.github.com/).)
    It can be enabled and given a path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Another possible use for object storage is to store `uploads`, such as attachments
    and avatars. We can enable this in GitLab to save space and use storage more efficiently:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: There are more options for storage than only local. You can also store things
    as an object somewhere else.
  prefs: []
  type: TYPE_NORMAL
- en: Using object storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A more efficient way of storing artifacts is by utilizing object storage. It
    can currently be used for `artifacts`, `lfs`, `uploads`, and `external_diffs`
    for merge requests. The trick is to add an `object_store:` part, which can have
    several options:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'A direct upload avoids saving the file in transit and directly uploads to AWS
    another chosen object storage provider:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The next setting after `remote_directory` can limit the uploading of artifacts
    somewhat if they are first saved in GitLab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If you set `proxy_download` to `false`, you will get redirected to object storage
    when downloading, instead of being sent through a proxy connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: There are some other specific settings regarding the connection to object storage.
    It has to do with the provider type and specific attributes of this provider.
    The credentials and the region are settings that have to be defined for most providers.
    The AWS signature version is for creating signed URLs, and you have the option
    of v2 or v4\. The endpoint is fixed for AWS, but it can differ according to the
    provider. The path style refers to the resolving of the files. If it is set to
    `true`, it will be like `host/bucket_name/object`, but if it is set to `false`,
    it will be like `bucket_name.host/object`.
  prefs: []
  type: TYPE_NORMAL
- en: 'All settings under the connection section will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: So far, we have seen the different storage options for big files that can be
    part of CI jobs or repositories.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, there are many options to store different kinds of files. You
    can also publish certain files as web content using pages, and that is the subject
    of the next section**.**
  prefs: []
  type: TYPE_NORMAL
- en: GitLab pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**GitLab pages** is an extension of CI/CD where web content can be automatically
    built and deployed to a web server. You can publish static websites directly from
    a repository. There are several options to consider. To use the feature, but also
    if access control should be enabled and the path where the pages are stored.'
  prefs: []
  type: TYPE_NORMAL
- en: The extension uses the GitLab pages daemon, which is written in Go and serves
    up content from the shared location. If you run it on the same server, you ideally
    run it on page 80 or 443, in case you have to add an IP to the GitLab server.
    It is possible to run it on a separate server, but you need to export the path
    from the GitLab server over the network to the host, which will run the GitLab
    pages daemon.
  prefs: []
  type: TYPE_NORMAL
- en: More information can be found at [https://gitlab.com/gitlab-org/gitlab-pages](https://gitlab.com/gitlab-org/gitlab-pages).
  prefs: []
  type: TYPE_NORMAL
- en: 'The first settings concerning GitLab pages are to enable or disable it completely,
    to enable or disable `access_control`, and you can set a path to the shared pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The following settings determine the properties of the server for GitLab pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The last setting defines the location of a socket for admin access:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The settings for GitLab pages are complete.
  prefs: []
  type: TYPE_NORMAL
- en: Mattermost
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many integrations for GitLab available, but one very interesting
    one is **Mattermost**, a Slack-like chat collaboration tool. It was acquired by
    GitLab in 2017, and is now even integrated in the omnibus GitLab install. You
    can enable the ChatOps operation with this tool. In the settings, you can enable
    the specific button in GitLab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: By enabling this, you can use the Add button in GitLab in the service settings.
  prefs: []
  type: TYPE_NORMAL
- en: Gravatar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following code block defines settings for using avatars, which is by default
    `gravatar.com`. **Gravatar** is a **Globally Recognized Avatar**. An *avatar*
    is an image following you from site to site, and the Gravatar service originated
    from WordPress, where it was used for blogs. You can set the HTTP and HTTPS URL
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Another example would be to set it to point to an Office 365 URL (you must
    be authenticated to Office 365 to use it):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Another service that offers these services is **Libreavatar**. You can find
    find more info about this at [https://wiki.libravatar.org/api/](https://wiki.libravatar.org/api/).
  prefs: []
  type: TYPE_NORMAL
- en: Sidekiq
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Sidekiq** component of GitLab takes care of background jobs, and you can
    find more information about it in [Chapter 1](384dcfd9-ef7f-470d-89dc-3af7502a2d09.xhtml),
    *Introducing the GitLab Architecture*. Most of the configuration is done in the
    configuration file of Sidekiq itself, but there are some options in the `gitlab.yml`
    file you can define.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, you can only define the `log_format` here and the cron jobs that
    will be run in Sidekiq:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'In the Sidekiq background processing, there is also a job scheduler integrated,
    which, by default, runs a couple of jobs. The format of the schedule is just like
    cron on Unix systems. The most import jobs are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`stuck_ci_jobs_worker`: Set stuck jobs to state failed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pipeline_schedule_worker`:  Execute scheduled triggers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`expire_build_artifacts_worker`: Remove expired build artifacts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repository_check_worker`: Periodically run `git fsck` on all repositories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ci_archive_traces_cron_worker`: Archive live traces that have not been archived
    yet.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`admin_email_worker`: Send admin emails.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repository_archive_cache_worker`: Remove outdated repository archives.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pages_domain_verification_cron_worker`: Verify custom GitLab pages domains.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`schedule_migrate_external_diffs_worker`: Periodically migrate `diffs` from
    the database to external storage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For GitLab **Enterprise Edition** (**EE**), several extra jobs are available,
    mainly ones that handle Geo synchronization and LDAP sync.
  prefs: []
  type: TYPE_NORMAL
- en: GitLab Registry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitLab can function as a fully fledged container registry for Docker containers.
    You can set options for it in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first option is basically the on or off switch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The next option is the hostname, which it will set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also define the network port it will listen on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'There is an internal address you can define that GitLab itself will connect
    to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The GitLab registry uses a keypair, the `rootcertbundle`, here is the private
    key location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the path that is used for storage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the name of the issuer of the certificate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Further options can be found at [https://docs.gitlab.com/ee/administration/container_registry.html](https://docs.gitlab.com/ee/administration/container_registry.html).
  prefs: []
  type: TYPE_NORMAL
- en: GitLab CI settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitLab **CI** used to be a separate software component but is now firmly integrated
    into the GitLab backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three options to configure in the `gitlab.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`all_broken_builds`: Only send an email if a build broke.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`add_pusher`: Also, add the user pushing the last version of the repository
    to the recipient list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`builds_path`: The location where the build traces are stored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Further configuration of GitLab CI is done from the web interface as you have
    seen in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Auth settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several authentication providers available for GitLab. The main on-premise
    one is the **LDAP** interface (to Active Directory, OpenLDAP).
  prefs: []
  type: TYPE_NORMAL
- en: 'The first part is the enabling of the feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The next part is the declaration of servers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we define a `label` and set up a `host` and `port`. We also
    give the `uid` attribute to use and a `password` and `bind_dn` (object or user
    used to attach to LDAP).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can set options for SSL to enhance security:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Next up are some settings that belong to how login actions are handled and
    how timeouts are handled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'GitLab needs to know where  it can find users from in your LDAP tree and how
    to distinguish them from other objects or persons. You can set the LDAP base and
    a filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next part, you can determine which LDAP attributes you want to use in
    GitLab. It maps LDAP objects to GitLab objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have an enterprise license, you are entitled to define more than one
    LDAP server, which is often the case in a corporate environment. You can add a
    main label to a block of settings we filled in the preceding code block and create
    a new block with a new label:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Besides LDAP, you can authenticate users with OAuth-enabled cloud providers.
    The first section of the settings deal with some general options, such as enabling
    the feature, how to handle information from those providers, and other behavioral
    aspects of the mechanism. The comments in the configuration file are very detailed
    about what the possibilities are.
  prefs: []
  type: TYPE_NORMAL
- en: The second part of the section allows you to define an OmniAuth provider. There
    are several examples mentioned, such as GitHub and Facebook and Auth0 ([https://auth0.com/](https://auth0.com/))(an
    identity management platform). Again, the configuration file offers a lot of explanation
    regarding how to configure this.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of this configuration file section, there are two settings that are,
    in my opinion, not Auth settings, but they are important.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can define a shared file storage path. GitLab uses shared file storage
    for some operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, you define settings for the Gitaly service. If you run it from the source,
    you should mention where you ran it from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Advanced settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I am not sure why there is an advanced section such as this in `gitlab.yml`,
    but the first options deal with repository settings. The main thing here is that
    you specify the path to the repositories shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: There is always a `default` entry, and you can specify a `path` and a `gitaly_address`
    here (also in the form of `tcp://`). You can override the global `gitaly_token`
    here.
  prefs: []
  type: TYPE_NORMAL
- en: 'GitLab has a backup or restore facility. It is in the form of a rake task.
    For example, you can invoke a backup task like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'The former command has options you can set via the configuration file. Once
    again, you can use the cloud to store files. GitLab imports cloud drivers for
    AWS, Google, OpenStack Swift, Rackspace, and Aliyun as well. A local driver is
    also available. The following is an example entry in `gitlab.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The GitLab shell is the primary component to provide Git-SSH connections, and
    when run from the source, you have to specify the path where it is installed.
    There is also a path set for hooks, which can execute when an event like a git
    push is fired (you can create your own hooks):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'You also have to define the file which contains  a secret. It is to be used
    when GitLab shell connects to the rails backend to verify access of the user that
    tries to do Git-SSH operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: In the following code block, you see the definition of the key that is used
    by GitLab Workhorse to get access to the rails application.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: It is defined in the file `.gitlab_workhorse_secret` as follows `TJEf6HQcgkBjcLGVdZ4h6Y2PB89X1RGs/RsJ7FIfg6s=`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You have the option of changing to another Git version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'The `webpack` program is used to compile and serve frontend assets such as **Cascading
    Style Sheets** (**CSS**), only to be used in development:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'The Prometheus endpoint that is built in also gathers data about Unicorn performance.
    It will sample the Unicorn Unix socket for that. Here, you can define the sampling
    rate. You can also define a whitelist for IPs allow to connect to the metrics
    endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Another built-in metrics provider, a `sidekiq` Prometheus exporter, is controlled
    from here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the topics that are handled in this section are quite different,
    and I am not sure whether they should reside under advanced settings. There is
    also a final section in the `gitlab.yml` file called **extra customization**.
    The most important part here is `rack_attack`.
  prefs: []
  type: TYPE_NORMAL
- en: Rack Attack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An import part of internet security nowadays are built-in throttling mechanisms
    to counter denial-of-service attacks. GitLab uses the Rack Attack Gem that can
    keep an eye on the number of requests coming from individual IPs. You can disable
    it here and set a whitelist and some thresholds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'You can limit the number of Git HTTP authentication attempts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'After 60 seconds, the auth attempt counter will be reset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also ban an IP for one hour (3,600 seconds); for example, after too
    many auth attempts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: We have reached the end of the `gitlab.yml` file. After restarting GitLab, the
    changes will become active. There are other ways of running GitLab. In the next
    section, we will take a look at configuring an instance in a Docker container.
  prefs: []
  type: TYPE_NORMAL
- en: Reconfiguring GitLab Docker containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The official containers from GitLab use the `omnibus-gitlab` package, so all
    the configuration is managed through the unique configuration file, `/etc/gitlab/gitlab.rb`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the container is started, you can connect to it by starting a Bash session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: You can now  edit `/etc/gitlab/gitlab.rb` inside the Docker container. Then
    you can run `gitlab-ctl reconfigure` after that to apply the changes.
  prefs: []
  type: TYPE_NORMAL
- en: A second way to configure the container is to start it up with a environment
    variable, `GITLAB_OMNIBUS_CONFIG`. This variable can contain the contents of a
    `gitlab.rb` file. These settings will not be persisted to the real file.
  prefs: []
  type: TYPE_NORMAL
- en: 'You could use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: The container start-up process will always run `gitlab-ctl reconfigure`. This
    means the omnibus template settings you specify during container startup need
    to be explicitly set every time you spin up the container; otherwise, your container
    will reconfigure and you will lose the settings.
  prefs: []
  type: TYPE_NORMAL
- en: Changing GitLab in a Kubernetes environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since GitLab for Kubernetes is configured by Helm charts, you need to configure
    all settings through that.
  prefs: []
  type: TYPE_NORMAL
- en: 'The options can be found here: [https://gitlab.com/charts/gitlab/blob/master/doc/installation/command-line-options.md](https://gitlab.com/charts/gitlab/blob/master/doc/installation/command-line-options.md).'
  prefs: []
  type: TYPE_NORMAL
- en: For each set of options, some are required, and those that are not required
    have a default value.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will pick some of the options to change in a Kubernetes
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Basic configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two required settings here: `global.hosts.domain` and `global.hosts.externalIP`.
    These should point to the host and IP where GitLab is to be served from. Another
    interesting set of these are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`global.psql.host`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`global.psql.password.secret`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`global.psql.password.key`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These contain information that point to an external Postgres instance.
  prefs: []
  type: TYPE_NORMAL
- en: Other options can be found in the command-line options URL at [https://gitlab.com/charts/gitlab/blob/master/doc/installation/command-line-options.md](https://gitlab.com/charts/gitlab/blob/master/doc/installation/command-line-options.md).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring TLS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These options control the TLS configuration that is activated for GitLab. There
    are no required options, but if you don't want to use Let's Encrypt, set `global.ingress.configureCertmanager`
    to false.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring outgoing emails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For outgoing email, there are several options such as the host of the incoming
    mail server—for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'To set this configuration setting and enable it, you use the following command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'If your SMTP server requires authentication, you need to add the credentials
    as an `–set` option and deploy the password also as a secret with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: After you have issued the `helm upgrade` command, the `unicorn` and `sidekiq`
    components will automatically restart in the Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Other settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many other settings are available, and you can view them at [https://gitlab.com/charts/gitlab/blob/master/doc/installation/command-line-options.md](https://gitlab.com/charts/gitlab/blob/master/doc/installation/command-line-options.md).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Incoming Email configuration**: GitLab can also handle incoming mail for
    the service desk feature.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GitLab shell**: You can provide settings for the GitLab shell.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RBAC settings**: You can describe Kubernetes **Role Based Access Control**
    (**RBAC**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Advanced nginx ingress configuration**: Change the default ingress nginx
    settings for the cluster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Advanced in-cluster Redis configuration**: Change the settings for the Redis
    cluster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Advanced registry configuration**: Change the settings for the Docker registry
    that is running as a microservice.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Advanced MinIO configuration**: Change the settings for the MinIO object
    storage microservice.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Advanced GitLab configuration**: Change the advanced settings in GitLab.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed configuring an existing GitLab application instance.
    As we have seen in earlier chapters, the options are different, depending on the
    installation path you have chosen. An omnibus GitLab installation is relatively
    easy to configure. Just change the setting in `/etc/gitlab/gitlab.rb` and run
    `gitlab-ctl reconfigure`. Changing the settings in an installation from source
    requires a bit more attention, because the dependencies between the GitLab components
    aren't managed as they are with omnibus GitLab. Configuring the GitLab instance
    running inside the Docker containers is the same as the way you manage the omnibus
    GitLab installations.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be exploring settings that should be altered in
    your GitHub and in GitLab to understand the procedure of importing and running
    the project.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What services are enabled when the `postgres_role` is chosen in `gitlab.rb`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where is `gitlab.yml` usually found?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What protocol is used for the incoming mail feature?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does LFS stand for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Open Source chat tool is tightly integrated with GitLab?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What license is needed to support LDAP groups?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What mechanism does GitLab provide to throttle web requests?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What tool do you need, besides Helm, to configure Kubernetes?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Getting Started with Kubernetes - Third Edition* by *Jesse White* and *Jonathan
    Baier*: [https://www.packtpub.com/virtualization-and-cloud/getting-started-kubernetes-third-edition](https://www.packtpub.com/virtualization-and-cloud/getting-started-kubernetes-third-edition)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Develop and Operate Microservices on Kubernetes [Video]* by* Martin Helmich*: [https://www.packtpub.com/virtualization-and-cloud/develop-and-operate-microservices-kubernetes-video](https://www.packtpub.com/virtualization-and-cloud/develop-and-operate-microservices-kubernetes-video)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Docker Cookbook - Second Edition* by *Jeeva S. Chelladhurai*, *Ken Cochrane*,
    *Neependra Khare*: [https://www.packtpub.com/virtualization-and-cloud/docker-cookbook-second-edition](https://www.packtpub.com/virtualization-and-cloud/docker-cookbook-second-edition)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
