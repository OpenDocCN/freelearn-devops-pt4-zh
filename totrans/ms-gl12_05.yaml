- en: Configuring GitLab from the Terminal
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从终端配置GitLab
- en: After installing GitLab, you probably have a running instance. So, how do you
    manage it? In the previous chapter, we showed you the options that can be managed
    through the web interface. But there are many more options that can be set only
    through the configuration files on the server. You need to know how to configure
    the software in a regular terminal. This chapter will explain how this is achieved
    for the different types of GitLab installations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 安装GitLab后，你可能已经有了一个正在运行的实例。那么，如何管理它呢？在前一章中，我们向你展示了可以通过Web界面管理的选项。但还有许多只能通过服务器上的配置文件设置的选项。你需要知道如何在常规终端中配置软件。本章将解释如何为不同类型的GitLab安装实现这一点。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Configuring omnibus installations from the terminal
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从终端配置omnibus安装
- en: Configuring source installations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置源安装
- en: Reconfiguring GitLab Docker containers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新配置GitLab Docker容器
- en: Changing GitLab in a Kubernetes environment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Kubernetes环境中更改GitLab
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For managing omnibus installations, there is one central configuration file
    called `gitlab.rb`. You need to create it or copy an example. There is a template
    available. You can find it at [https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template](https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template).
    It is not updated after upgrades. Throughout this chapter, we will quote and discuss
    parts of this file.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于管理omnibus安装，有一个名为`gitlab.rb`的中央配置文件。你需要创建它或复制一个示例。可以找到模板，位置是[https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template](https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template)。升级后该模板不会更新。本章将引用并讨论文件中的部分内容。
- en: 'To follow along with the instructions in this chapter, please download the
    Git repository available at GitHub: [https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter04](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter04).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 若要跟随本章中的说明，请从GitHub下载可用的Git存储库：[https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter04](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter04)。
- en: 'You will also need the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要以下内容：
- en: '**Docker**: [https://www.docker.com](https://www.docker.com)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker**：[https://www.docker.com](https://www.docker.com)'
- en: '**kubectl**: [https://kubernetes.io/docs/tasks/tools/install-kubectl/](https://kubernetes.io/docs/tasks/tools/install-kubectl/)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**kubectl**：[https://kubernetes.io/docs/tasks/tools/install-kubectl/](https://kubernetes.io/docs/tasks/tools/install-kubectl/)'
- en: Configuring omnibus and GitLab installations from the terminal
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从终端配置omnibus和GitLab安装
- en: You can find the template for `gitlab.rb` at [https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template](https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template).
    It is not updated after upgrades.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template](https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template)找到`gitlab.rb`的模板。升级后该模板不会更新。
- en: You can also use omnibus or GitLab to implement **high availability** (**HA**)
    for your GitLab installation.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用omnibus或GitLab为你的GitLab安装实现**高可用性**（**HA**）。
- en: There is a part in `gitlab.rb` where you can define the role of the GitLab instance
    you are configuring. If there are no roles defined by default, omnibus will configure
    your server to host all the core components of GitLab.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在`gitlab.rb`中有一部分可以定义你正在配置的GitLab实例的角色。如果没有默认定义的角色，omnibus将配置你的服务器来托管GitLab的所有核心组件。
- en: 'For instance, add the following line of code if your instance will run as a
    Redis master, and have the Redis sentinel agent running:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你的实例将作为Redis主节点运行，并且运行着Redis sentinel代理，请添加以下代码行：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following roles are available:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的角色如下：
- en: '`redis_sentinel_role`: Enables the sentinel service only.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`redis_sentinel_role`：仅启用sentinel服务。'
- en: '`redis_master_role`: Enables Redis and monitoring, and allows you to configure
    the master password.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`redis_master_role`：启用Redis和监控，并允许你配置主密码。'
- en: '`redis_slave_role`: Enables the Redis service and monitoring.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`redis_slave_role`：启用Redis服务和监控。'
- en: '`geo_primary_role`: Configures the database for replication and prepares the
    application server as `geo primary`.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`geo_primary_role`：配置用于复制的数据库，并将应用服务器设置为`geo primary`。'
- en: '`geo_secondary_role`: Prepares the database for replication and sets the application
    up as `secondary geo`.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`geo_secondary_role`：为数据库准备复制，并将应用设置为`secondary geo`。'
- en: '`postgres_role`: Switches on the `postgresql`, `repmgr`, and `consul` services
    on the machine. Sets up only these components.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`postgres_role`：启动机器上的`postgresql`、`repmgr`和`consul`服务。仅设置这些组件。'
- en: '`pgbouncer_role`: This role adds the PgBouncer software for the database load-balancing
    feature.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pgbouncer_role`：此角色添加PgBouncer软件用于数据库负载均衡功能。'
- en: After editing, you have to issue a `gitlab-ctl reconfigure` to apply the settings.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑后，您必须运行`gitlab-ctl reconfigure`来应用设置。
- en: Configuring source installations
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置源安装
- en: 'The main configuration file to change is `gitlab.yml`, which is usually found
    in `/home/git/gitlab/config`. It follows the `.yml` standard and this has several
    implications. The first one is that indentation is very important. If you just
    copy and paste configuration, you will find that it can mess up the file contents.
    Another important feature that is used in the `gitlab.yml` file is utilizing anchors
    and aliases (**&base**) to specify different configuration targets. In practice,
    this means that the main configuration for all environments is specified in the
    `config` file `(production: &base)`.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '需要更改的主要配置文件是`gitlab.yml`，通常位于`/home/git/gitlab/config`。它遵循`.yml`标准，并且这有几个含义。首先，缩进非常重要。如果您只是复制并粘贴配置，您会发现可能会搞乱文件内容。`gitlab.yml`文件中另一个重要特性是使用锚点和别名（**&base**）来指定不同的配置目标。实际上，这意味着所有环境的主要配置都在`config`文件中指定（`production:
    &base`）。'
- en: 'Below the `production: &base` target , the other environments are specified,
    and they refer to `&base` but override certain key-value pairs. How does GitLab
    know which environment information should be used? That is determined by the `RAILS_ENV`
    variable used when installing and starting GitLab.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '在`production: &base`目标下，指定了其他环境，并且它们引用`&base`但会覆盖某些键值对。GitLab如何知道应该使用哪个环境的信息？这由安装和启动GitLab时使用的`RAILS_ENV`变量决定。'
- en: We have put an example configuration file in repository of this book ([https://github.com/PacktPublishing/Mastering-GitLab-12/blob/master/Chapter04/config_gitlab.yml.example](https://github.com/PacktPublishing/Mastering-GitLab-12/blob/master/Chapter04/config_gitlab.yml.example)).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本书的代码库中放置了一个示例配置文件（[https://github.com/PacktPublishing/Mastering-GitLab-12/blob/master/Chapter04/config_gitlab.yml.example](https://github.com/PacktPublishing/Mastering-GitLab-12/blob/master/Chapter04/config_gitlab.yml.example)）。
- en: The configuration file has several sections, and we'll run through them.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件有几个部分，我们将逐一讲解。
- en: GitLab app settings
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitLab应用设置
- en: This section of the configuration file is mainly used to define the global settings
    for the whole GitLab application.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 该配置文件部分主要用于定义整个GitLab应用的全局设置。
- en: 'The first settings you will encounter are mainly for the web server component
    (Unicorn). You can specify which FQDN to use for the hostname, the port on which
    to listen to, and whether to use HTTPS:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您将遇到的第一个设置主要是针对Web服务器组件（Unicorn）。您可以指定用于主机名的FQDN、监听的端口，以及是否使用HTTPS：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can set the port to `443` and HTTPS to true if you want to use HTTPS. If
    you have a different `ssh_host` in your setup, you can specify it as well (If
    you want Git-SSH to run on the same server, that you don''t need to specify this):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想使用HTTPS，可以将端口设置为`443`，并将HTTPS设置为true。如果您的设置中有不同的`ssh_host`，您也可以指定它（如果您希望Git-SSH在同一服务器上运行，则无需指定此项）：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Furthermore, if you want to use relative URLs (`/mygitlab/` for instance):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果您想使用相对URL（例如`/mygitlab/`）：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can also change the option regarding which OS-user to use for running the
    web server processes:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以更改关于使用哪个操作系统用户来运行Web服务器进程的选项：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The next setting is about dates and times, and you can specify the timezone
    to be used throughout the entire application:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个设置是关于日期和时间的，您可以指定整个应用程序使用的时区：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The next bundle of settings handles email. You can disable GitLab''s use of
    email entirely or specify who the sender and the subject, among other things:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个设置包处理电子邮件。您可以完全禁用GitLab使用电子邮件，或指定发件人、主题等内容：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The next setting determines whether new users can create groups (be careful,
    as existing users retain this privilege).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个设置决定是否允许新用户创建小组（请小心，因为现有用户保留此权限）。
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you want old users to be also stripped of this privilege, one way to do
    it is to use the Rails console:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望旧用户也失去此权限，可以使用Rails控制台来实现：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The next option allows you the option to change your username. This is generally
    not recommended if you use another system such as **Lightweight Directory Access
    Protocol** (**LDAP**) for account management:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个选项允许您更改用户名。如果您使用的是其他系统，如**轻量级目录访问协议**（**LDAP**）进行账户管理，一般不推荐更改用户名：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The next set of options determines the style to be used for GitLab; I suggest
    you try them all (1-10):'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 下一组选项决定了 GitLab 使用的样式；我建议您尝试所有选项（1-10）：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'A nice feature that can automate your development workflow very efficiently
    is the automatic closing of issues by issuing a commit to the default project
    branch. You can use the following pattern to make the automation work. If it matches,
    it will be closed. The pattern is quite complicated, so we will use the code provided:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可以非常高效地自动化开发工作流的好功能是通过向默认项目分支提交代码来自动关闭问题。您可以使用以下模式使自动化生效。如果匹配，将会关闭。由于该模式相当复杂，我们将使用提供的代码：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We could, for example, use the following commit message:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，我们可以使用以下提交信息：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding example, `#122`, `#1000`, `#11`, `#229`, `#188`, and `#9999`
    will be automatically closed. Only `#10` will not be touched, because it does
    not match the pattern.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`#122`、`#1000`、`#11`、`#229`、`#188` 和 `#9999` 将被自动关闭。只有 `#10` 不会受到影响，因为它不匹配模式。
- en: 'In GitLab, in each project you have some default capabilities, such as the
    possibility to create issues or a wiki in the project space. There is an option
    to disable or enable them by default:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitLab 中，每个项目都有一些默认功能，如在项目空间中创建问题或维基的可能性。您可以选择默认启用或禁用它们：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The CI/CD component of GitLab relies heavily on webhooks as its primary eventing
    mechanism over network boundaries. On slow networks, you may want to increase
    the timeout value of them to make them try harder:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab 的 CI/CD 组件在网络边界上严重依赖 webhooks 作为其主要的事件机制。在慢速网络上，您可能需要增加它们的超时值，以使它们更努力地尝试：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can download the contents of a project, which are combined in a ZIP file.
    This creation of a ZIP file needs some temporary disk space, which you can define
    here, the repository downloads directory (relative path to the Rails directory):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以下载项目内容，这些内容会被打包成一个 ZIP 文件。创建这个 ZIP 文件需要一些临时磁盘空间，您可以在这里定义，仓库下载目录（相对于 Rails
    目录的路径）：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'GitLab can also utilize an email client, which can get mail from an IMAP server,
    and parse the mail contents for issues and merge request IDs. If you set this
    up correctly, you can allow users to reply to notification emails, and the result
    will be added to the issue or the merge request. The first part is where you enable
    or disable the function:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab 还可以利用电子邮件客户端，从 IMAP 服务器获取邮件，并解析邮件内容中的问题和合并请求 ID。如果您正确设置，您可以允许用户回复通知邮件，结果将被添加到问题或合并请求中。第一部分是启用或禁用此功能：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The second part is where you define the incoming email address that is used
    and what part of it is variable (every merge-request or issue number is a variable):'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 第二部分是您定义用于接收电子邮件的地址，并指出其中哪部分是变量（每个合并请求或问题编号都是变量）：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The other settings mainly concern the IMAP server that is used along with the
    credentials and connection settings:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 其他设置主要涉及与凭据和连接设置一起使用的 IMAP 服务器：
- en: '[PRE18]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: These settings together enable incoming email for your GitLab instance.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这些设置一起启用了您的 GitLab 实例的来邮功能。
- en: This concludes the section in the configuration file that covers some general
    settings. The next section is about storing different kinds of files.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分涵盖了配置文件中的一些通用设置，接下来的部分是关于存储不同种类文件的内容。
- en: Storing big files
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储大文件
- en: The GitLab CI/CD components can build your software, and that results in build
    artifacts. They are sent back from the GitLab runners to the GitLab server. You
    can download them through the web UI. These artifacts are, by default, stored
    on the GitLab server in `shared/artifacts`. As the files can become quite large
    and numerous, it is also possible to store these artifacts somewhere else, where
    the GitLab server can fetch them when needed or redirect the request. You can
    set up object storage with Amazon S3, for example, to be used as a big bucket
    to store files.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab CI/CD 组件可以构建您的软件，并生成构建工件。这些工件会从 GitLab 运行器发送回 GitLab 服务器。您可以通过 web UI
    下载它们。默认情况下，这些工件存储在 GitLab 服务器的 `shared/artifacts` 中。由于这些文件可能变得非常大且数量众多，您也可以将它们存储在其他地方，GitLab
    服务器可以在需要时取回它们，或者重定向请求。您可以设置 Amazon S3 等对象存储作为一个大桶来存储文件。
- en: 'By default GitLab it stores artifacts in the local shared path  `shared/artifact` on
    the server where GitLab is installed:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，GitLab将构建产物存储在GitLab安装服务器上的本地共享路径`shared/artifact`：
- en: '[PRE19]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'When comparing operations during merge requests, the `diffs` files are normally
    saved in the database when enabled. But when set to `true`, GitLab will save them
    in a shared path:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在合并请求期间比较操作时，`diffs`文件通常会在启用时保存在数据库中。但当设置为`true`时，GitLab将它们保存在共享路径中：
- en: '[PRE20]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the same manner as the build artifacts and `diffs`, GitLab can store Git **Large
    File Storage** (**LFS**) objects in a different place, out of the project repository.
    A reference to this place is then inserted as a substitute in the project repository.
    This is a Git client extension, for which the server side necessities have been
    implemented in GitLab. (More info about Git LFS can be found at [https://git-lfs.github.com/](https://git-lfs.github.com/).)
    It can be enabled and given a path:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 与构建产物和`diffs`的处理方式相同，GitLab可以将Git **大文件存储** (**LFS**)对象存储在不同的位置，即项目仓库之外。然后，在项目仓库中插入指向该位置的引用作为替代。这是一个Git客户端扩展，服务器端的相关实现已经在GitLab中完成。（更多关于Git
    LFS的信息可以在[https://git-lfs.github.com/](https://git-lfs.github.com/)找到。）可以启用并指定路径：
- en: '[PRE21]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Another possible use for object storage is to store `uploads`, such as attachments
    and avatars. We can enable this in GitLab to save space and use storage more efficiently:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个可能的对象存储用途是存储`uploads`，如附件和头像。我们可以在GitLab中启用此功能，以节省空间并更高效地使用存储：
- en: '[PRE22]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: There are more options for storage than only local. You can also store things
    as an object somewhere else.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 存储选项不仅仅局限于本地。你还可以将文件作为对象存储到其他地方。
- en: Using object storage
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用对象存储
- en: 'A more efficient way of storing artifacts is by utilizing object storage. It
    can currently be used for `artifacts`, `lfs`, `uploads`, and `external_diffs`
    for merge requests. The trick is to add an `object_store:` part, which can have
    several options:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 存储构建产物的更高效方式是利用对象存储。目前，它可以用于存储`artifacts`、`lfs`、`uploads`和合并请求的`external_diffs`。诀窍是添加一个`object_store:`部分，它可以包含多个选项：
- en: '[PRE23]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'A direct upload avoids saving the file in transit and directly uploads to AWS
    another chosen object storage provider:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 直接上传避免了在传输过程中保存文件，直接上传到AWS或其他选择的对象存储提供商：
- en: '[PRE24]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The next setting after `remote_directory` can limit the uploading of artifacts
    somewhat if they are first saved in GitLab:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在`remote_directory`之后的下一个设置可以在文件首先保存在GitLab时，限制上传的构建产物：
- en: '[PRE25]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If you set `proxy_download` to `false`, you will get redirected to object storage
    when downloading, instead of being sent through a proxy connection:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将`proxy_download`设置为`false`，下载时将直接跳转到对象存储，而不是通过代理连接：
- en: '[PRE26]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: There are some other specific settings regarding the connection to object storage.
    It has to do with the provider type and specific attributes of this provider.
    The credentials and the region are settings that have to be defined for most providers.
    The AWS signature version is for creating signed URLs, and you have the option
    of v2 or v4\. The endpoint is fixed for AWS, but it can differ according to the
    provider. The path style refers to the resolving of the files. If it is set to
    `true`, it will be like `host/bucket_name/object`, but if it is set to `false`,
    it will be like `bucket_name.host/object`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些与连接到对象存储相关的特定设置。这些设置与提供商类型和该提供商的特定属性有关。凭证和区域是大多数提供商需要定义的设置。AWS签名版本用于创建签名URL，你可以选择v2或v4。端点对于AWS是固定的，但对于其他提供商可能不同。路径样式指的是文件的解析方式。如果设置为`true`，它将是`host/bucket_name/object`，但如果设置为`false`，它将是`bucket_name.host/object`。
- en: 'All settings under the connection section will look as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 连接部分下的所有设置将如下所示：
- en: '[PRE27]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: So far, we have seen the different storage options for big files that can be
    part of CI jobs or repositories.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了大文件存储的不同选项，这些大文件可以是CI作业或仓库的一部分。
- en: As you can see, there are many options to store different kinds of files. You
    can also publish certain files as web content using pages, and that is the subject
    of the next section**.**
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，存储不同类型文件有很多选项。你还可以使用GitLab页面将某些文件发布为网页内容，这就是下一节的主题**。**
- en: GitLab pages
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitLab页面
- en: '**GitLab pages** is an extension of CI/CD where web content can be automatically
    built and deployed to a web server. You can publish static websites directly from
    a repository. There are several options to consider. To use the feature, but also
    if access control should be enabled and the path where the pages are stored.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**GitLab 页面**是 CI/CD 的扩展，能够自动构建并将 web 内容部署到 web 服务器。你可以直接从一个仓库发布静态网站。有几个选项需要考虑。要使用此功能，还需要决定是否启用访问控制，以及页面存储的路径。'
- en: The extension uses the GitLab pages daemon, which is written in Go and serves
    up content from the shared location. If you run it on the same server, you ideally
    run it on page 80 or 443, in case you have to add an IP to the GitLab server.
    It is possible to run it on a separate server, but you need to export the path
    from the GitLab server over the network to the host, which will run the GitLab
    pages daemon.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 该扩展使用 GitLab 页面守护进程，守护进程是用 Go 编写的，并从共享位置提供内容。如果你在同一服务器上运行它，最好将其运行在 80 或 443
    端口上，以防需要为 GitLab 服务器添加 IP。也可以在单独的服务器上运行，但需要通过网络从 GitLab 服务器导出路径到主机，并在该主机上运行 GitLab
    页面守护进程。
- en: More information can be found at [https://gitlab.com/gitlab-org/gitlab-pages](https://gitlab.com/gitlab-org/gitlab-pages).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请访问[https://gitlab.com/gitlab-org/gitlab-pages](https://gitlab.com/gitlab-org/gitlab-pages)。
- en: 'The first settings concerning GitLab pages are to enable or disable it completely,
    to enable or disable `access_control`, and you can set a path to the shared pages:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 GitLab 页面的一些初始设置包括完全启用或禁用它，启用或禁用 `access_control`，以及你可以设置共享页面的路径：
- en: '[PRE28]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The following settings determine the properties of the server for GitLab pages:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下设置决定了 GitLab 页面服务器的属性：
- en: '[PRE29]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The last setting defines the location of a socket for admin access:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个设置定义了管理员访问的套接字位置：
- en: '[PRE30]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The settings for GitLab pages are complete.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab 页面设置完成。
- en: Mattermost
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mattermost
- en: 'There are many integrations for GitLab available, but one very interesting
    one is **Mattermost**, a Slack-like chat collaboration tool. It was acquired by
    GitLab in 2017, and is now even integrated in the omnibus GitLab install. You
    can enable the ChatOps operation with this tool. In the settings, you can enable
    the specific button in GitLab:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多 GitLab 集成可用，但其中一个非常有趣的是 **Mattermost**，这是一个类似 Slack 的聊天协作工具。它在 2017 年被 GitLab
    收购，现在甚至集成在 Omnibus GitLab 安装中。你可以启用 ChatOps 操作与此工具配合使用。在设置中，你可以在 GitLab 中启用特定按钮：
- en: '[PRE31]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: By enabling this, you can use the Add button in GitLab in the service settings.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 启用此功能后，你可以在 GitLab 服务设置中使用添加按钮。
- en: Gravatar
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gravatar
- en: 'The following code block defines settings for using avatars, which is by default
    `gravatar.com`. **Gravatar** is a **Globally Recognized Avatar**. An *avatar*
    is an image following you from site to site, and the Gravatar service originated
    from WordPress, where it was used for blogs. You can set the HTTP and HTTPS URL
    here:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块定义了使用头像的设置，默认情况下为 `gravatar.com`。**Gravatar** 是一种**全球公认的头像**。*头像*是一个会在网站间跟随你的图像，Gravatar
    服务起源于 WordPress，最初用于博客。你可以在此处设置 HTTP 和 HTTPS URL：
- en: '[PRE32]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Another example would be to set it to point to an Office 365 URL (you must
    be authenticated to Office 365 to use it):'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个示例是将其设置为指向 Office 365 URL（你必须先登录 Office 365 才能使用它）：
- en: '[PRE33]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Another service that offers these services is **Libreavatar**. You can find
    find more info about this at [https://wiki.libravatar.org/api/](https://wiki.libravatar.org/api/).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个提供这些服务的服务是**Libreavatar**。你可以在[https://wiki.libravatar.org/api/](https://wiki.libravatar.org/api/)找到更多信息。
- en: Sidekiq
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Sidekiq
- en: The **Sidekiq** component of GitLab takes care of background jobs, and you can
    find more information about it in [Chapter 1](384dcfd9-ef7f-470d-89dc-3af7502a2d09.xhtml),
    *Introducing the GitLab Architecture*. Most of the configuration is done in the
    configuration file of Sidekiq itself, but there are some options in the `gitlab.yml`
    file you can define.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab 的 **Sidekiq** 组件负责后台任务，你可以在[第 1 章](384dcfd9-ef7f-470d-89dc-3af7502a2d09.xhtml)《介绍
    GitLab 架构》中找到更多信息，*介绍 GitLab 架构*。大部分配置是在 Sidekiq 自身的配置文件中完成的，但你可以在 `gitlab.yml`
    文件中定义一些选项。
- en: 'For instance, you can only define the `log_format` here and the cron jobs that
    will be run in Sidekiq:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以在这里定义 `log_format` 和将在 Sidekiq 中运行的 cron 作业：
- en: '[PRE34]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In the Sidekiq background processing, there is also a job scheduler integrated,
    which, by default, runs a couple of jobs. The format of the schedule is just like
    cron on Unix systems. The most import jobs are listed as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Sidekiq 背景处理过程中，还集成了一个作业调度器，默认情况下运行一些作业。调度的格式就像 Unix 系统上的 cron。最重要的作业如下所示：
- en: '`stuck_ci_jobs_worker`: Set stuck jobs to state failed.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stuck_ci_jobs_worker`：将卡住的作业设置为失败状态。'
- en: '`pipeline_schedule_worker`:  Execute scheduled triggers.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pipeline_schedule_worker`：执行计划触发器。'
- en: '`expire_build_artifacts_worker`: Remove expired build artifacts.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expire_build_artifacts_worker`：删除过期的构建工件。'
- en: '`repository_check_worker`: Periodically run `git fsck` on all repositories.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`repository_check_worker`：定期在所有仓库上运行 `git fsck`。'
- en: '`ci_archive_traces_cron_worker`: Archive live traces that have not been archived
    yet.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ci_archive_traces_cron_worker`：存档尚未存档的实时跟踪记录。'
- en: '`admin_email_worker`: Send admin emails.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admin_email_worker`：发送管理员电子邮件。'
- en: '`repository_archive_cache_worker`: Remove outdated repository archives.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`repository_archive_cache_worker`：删除过时的仓库存档。'
- en: '`pages_domain_verification_cron_worker`: Verify custom GitLab pages domains.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pages_domain_verification_cron_worker`：验证自定义 GitLab 页面域名。'
- en: '`schedule_migrate_external_diffs_worker`: Periodically migrate `diffs` from
    the database to external storage.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`schedule_migrate_external_diffs_worker`：定期将 `diffs` 从数据库迁移到外部存储。'
- en: For GitLab **Enterprise Edition** (**EE**), several extra jobs are available,
    mainly ones that handle Geo synchronization and LDAP sync.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 GitLab **企业版** (**EE**)，提供了几个额外的作业，主要是处理 Geo 同步和 LDAP 同步的作业。
- en: GitLab Registry
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitLab 注册表
- en: GitLab can function as a fully fledged container registry for Docker containers.
    You can set options for it in the following section.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab 可以作为完整的 Docker 容器注册表使用。你可以在以下部分为其设置选项。
- en: 'The first option is basically the on or off switch:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个选项基本上是开关：
- en: '[PRE35]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The next option is the hostname, which it will set:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个选项是主机名，它将被设置：
- en: '[PRE36]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You can also define the network port it will listen on:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以定义它将监听的网络端口：
- en: '[PRE37]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'There is an internal address you can define that GitLab itself will connect
    to:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以定义一个 GitLab 自身将连接的内部地址：
- en: '[PRE38]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The GitLab registry uses a keypair, the `rootcertbundle`, here is the private
    key location:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab 注册表使用一个密钥对，`rootcertbundle`，这里是私钥的位置：
- en: '[PRE39]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Set the path that is used for storage:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 设置用于存储的路径：
- en: '[PRE40]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Set the name of the issuer of the certificate:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 设置证书的发行者名称：
- en: '[PRE41]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Further options can be found at [https://docs.gitlab.com/ee/administration/container_registry.html](https://docs.gitlab.com/ee/administration/container_registry.html).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 更多选项请参见 [https://docs.gitlab.com/ee/administration/container_registry.html](https://docs.gitlab.com/ee/administration/container_registry.html)。
- en: GitLab CI settings
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitLab CI 设置
- en: GitLab **CI** used to be a separate software component but is now firmly integrated
    into the GitLab backend.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab **CI** 曾是一个独立的软件组件，但现在已经牢固地集成到 GitLab 后端。
- en: 'There are three options to configure in the `gitlab.yml`:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`gitlab.yml` 中有三个选项需要配置：'
- en: '`all_broken_builds`: Only send an email if a build broke.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`all_broken_builds`：仅在构建失败时发送电子邮件。'
- en: '`add_pusher`: Also, add the user pushing the last version of the repository
    to the recipient list.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`add_pusher`：还将推送最新版本的用户添加到收件人列表中。'
- en: '`builds_path`: The location where the build traces are stored.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`builds_path`：存储构建跟踪记录的位置。'
- en: '[PRE42]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Further configuration of GitLab CI is done from the web interface as you have
    seen in the previous chapter.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab CI 的进一步配置通过你在上一章中看到的 Web 界面完成。
- en: Auth settings
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 身份验证设置
- en: There are several authentication providers available for GitLab. The main on-premise
    one is the **LDAP** interface (to Active Directory, OpenLDAP).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab 提供了多个身份验证提供程序。主要的本地身份验证提供程序是 **LDAP** 接口（用于 Active Directory、OpenLDAP）。
- en: 'The first part is the enabling of the feature:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分是启用该功能：
- en: '[PRE43]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The next part is the declaration of servers:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 下一部分是服务器的声明：
- en: '[PRE44]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: As you can see, we define a `label` and set up a `host` and `port`. We also
    give the `uid` attribute to use and a `password` and `bind_dn` (object or user
    used to attach to LDAP).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们定义了一个 `label` 并设置了 `host` 和 `port`。我们还提供了 `uid` 属性供使用，以及 `password` 和
    `bind_dn`（用于连接 LDAP 的对象或用户）。
- en: 'You can set options for SSL to enhance security:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以设置 SSL 选项以增强安全性：
- en: '[PRE45]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Next up are some settings that belong to how login actions are handled and
    how timeouts are handled:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是一些与登录操作和超时处理相关的设置：
- en: '[PRE46]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'GitLab needs to know where  it can find users from in your LDAP tree and how
    to distinguish them from other objects or persons. You can set the LDAP base and
    a filter:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab 需要知道它能从 LDAP 树中找到哪些用户，并且如何将其与其他对象或人员区分开来。你可以设置 LDAP 基础和过滤器：
- en: '[PRE47]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'In the next part, you can determine which LDAP attributes you want to use in
    GitLab. It maps LDAP objects to GitLab objects:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，你可以确定希望在 GitLab 中使用哪些 LDAP 属性。它将 LDAP 对象映射到 GitLab 对象：
- en: '[PRE48]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'If you have an enterprise license, you are entitled to define more than one
    LDAP server, which is often the case in a corporate environment. You can add a
    main label to a block of settings we filled in the preceding code block and create
    a new block with a new label:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你拥有企业许可证，你有权定义多个LDAP服务器，这在企业环境中是常见的。你可以为我们在前面的代码块中填写的设置块添加一个主标签，并创建一个带有新标签的新块：
- en: '[PRE49]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Besides LDAP, you can authenticate users with OAuth-enabled cloud providers.
    The first section of the settings deal with some general options, such as enabling
    the feature, how to handle information from those providers, and other behavioral
    aspects of the mechanism. The comments in the configuration file are very detailed
    about what the possibilities are.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 除了LDAP外，你还可以通过启用OAuth的云服务提供商进行用户认证。设置的第一部分处理一些常规选项，例如启用该功能、如何处理来自这些提供商的信息以及该机制的其他行为方面。配置文件中的注释非常详细，说明了有哪些可用选项。
- en: The second part of the section allows you to define an OmniAuth provider. There
    are several examples mentioned, such as GitHub and Facebook and Auth0 ([https://auth0.com/](https://auth0.com/))(an
    identity management platform). Again, the configuration file offers a lot of explanation
    regarding how to configure this.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的第二部分允许你定义一个OmniAuth提供商。这里提到了几个示例，如GitHub、Facebook和Auth0（[https://auth0.com/](https://auth0.com/)）（一个身份管理平台）。同样，配置文件提供了关于如何配置这些的详细解释。
- en: At the end of this configuration file section, there are two settings that are,
    in my opinion, not Auth settings, but they are important.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在该配置文件部分的末尾，有两个设置，我认为它们不是认证设置，但它们很重要。
- en: 'You can define a shared file storage path. GitLab uses shared file storage
    for some operations:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以定义共享文件存储路径。GitLab在一些操作中使用共享文件存储：
- en: '[PRE50]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Here, you define settings for the Gitaly service. If you run it from the source,
    you should mention where you ran it from:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你定义Gitaly服务的设置。如果你是从源代码运行它，应该说明你是从哪里运行的：
- en: '[PRE51]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Advanced settings
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级设置
- en: 'I am not sure why there is an advanced section such as this in `gitlab.yml`,
    but the first options deal with repository settings. The main thing here is that
    you specify the path to the repositories shown as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我不确定为什么在`gitlab.yml`中会有这样的高级部分，但第一部分选项涉及到存储库设置。这里主要是指定存储库路径，如下所示：
- en: '[PRE52]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: There is always a `default` entry, and you can specify a `path` and a `gitaly_address`
    here (also in the form of `tcp://`). You can override the global `gitaly_token`
    here.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 始终会有一个`default`条目，你可以在此处指定`path`和`gitaly_address`（也以`tcp://`形式）。你可以在这里覆盖全局的`gitaly_token`。
- en: 'GitLab has a backup or restore facility. It is in the form of a rake task.
    For example, you can invoke a backup task like this:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab有一个备份或恢复功能。它以rake任务的形式存在。例如，你可以像这样调用备份任务：
- en: '[PRE53]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The former command has options you can set via the configuration file. Once
    again, you can use the cloud to store files. GitLab imports cloud drivers for
    AWS, Google, OpenStack Swift, Rackspace, and Aliyun as well. A local driver is
    also available. The following is an example entry in `gitlab.yml`:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令有一些可以通过配置文件设置的选项。再次强调，你可以使用云存储文件。GitLab还导入了AWS、Google、OpenStack Swift、Rackspace和阿里云的云驱动程序。本地驱动程序也可用。以下是`gitlab.yml`中的一个示例条目：
- en: '[PRE54]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The GitLab shell is the primary component to provide Git-SSH connections, and
    when run from the source, you have to specify the path where it is installed.
    There is also a path set for hooks, which can execute when an event like a git
    push is fired (you can create your own hooks):'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab shell是提供Git-SSH连接的主要组件，当从源代码运行时，你必须指定它安装的路径。还设置了钩子路径，当像git push这样的事件触发时，它们可以执行（你可以创建自己的钩子）：
- en: '[PRE55]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'You also have to define the file which contains  a secret. It is to be used
    when GitLab shell connects to the rails backend to verify access of the user that
    tries to do Git-SSH operations:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 你还必须定义包含密钥的文件。它在GitLab shell连接到rails后端时用于验证尝试执行Git-SSH操作的用户的访问权限：
- en: '[PRE56]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: In the following code block, you see the definition of the key that is used
    by GitLab Workhorse to get access to the rails application.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码块中，你可以看到GitLab Workhorse用来访问rails应用程序的密钥定义。
- en: '[PRE57]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: It is defined in the file `.gitlab_workhorse_secret` as follows `TJEf6HQcgkBjcLGVdZ4h6Y2PB89X1RGs/RsJ7FIfg6s=`.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 它在文件`.gitlab_workhorse_secret`中定义，如下所示`TJEf6HQcgkBjcLGVdZ4h6Y2PB89X1RGs/RsJ7FIfg6s=`。
- en: 'You have the option of changing to another Git version:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择切换到另一个Git版本：
- en: '[PRE58]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The `webpack` program is used to compile and serve frontend assets such as **Cascading
    Style Sheets** (**CSS**), only to be used in development:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`webpack`程序用于编译和服务前端资产，如**层叠样式表**（**CSS**），仅限开发使用：'
- en: '[PRE59]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The Prometheus endpoint that is built in also gathers data about Unicorn performance.
    It will sample the Unicorn Unix socket for that. Here, you can define the sampling
    rate. You can also define a whitelist for IPs allow to connect to the metrics
    endpoint:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 内置的 Prometheus 端点还会收集关于 Unicorn 性能的数据。它将采样 Unicorn Unix 套接字以获取这些数据。在这里，你可以定义采样率。你还可以定义一个
    IP 白名单，允许其连接到度量端点：
- en: '[PRE60]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Another built-in metrics provider, a `sidekiq` Prometheus exporter, is controlled
    from here:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个内置的度量指标提供程序是`sidekiq`的 Prometheus 导出器，可以从这里控制：
- en: '[PRE61]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: As you can see, the topics that are handled in this section are quite different,
    and I am not sure whether they should reside under advanced settings. There is
    also a final section in the `gitlab.yml` file called **extra customization**.
    The most important part here is `rack_attack`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，本节中处理的主题非常不同，我不确定它们是否应该归类为高级设置。`gitlab.yml` 文件中还有一个最终部分，叫做**额外自定义**。这里最重要的部分是`rack_attack`。
- en: Rack Attack
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rack Attack
- en: 'An import part of internet security nowadays are built-in throttling mechanisms
    to counter denial-of-service attacks. GitLab uses the Rack Attack Gem that can
    keep an eye on the number of requests coming from individual IPs. You can disable
    it here and set a whitelist and some thresholds:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 当前互联网安全中的一个重要部分是内置的限流机制，用于抵御拒绝服务攻击。GitLab 使用 Rack Attack Gem，可以监控来自单个 IP 的请求数量。你可以在这里禁用它，并设置白名单和一些阈值：
- en: '[PRE62]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'You can limit the number of Git HTTP authentication attempts:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以限制 Git HTTP 认证尝试的次数：
- en: '[PRE63]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'After 60 seconds, the auth attempt counter will be reset:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 60 秒后，认证尝试计数器将被重置：
- en: '[PRE64]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'You can also ban an IP for one hour (3,600 seconds); for example, after too
    many auth attempts:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以禁止一个 IP 地址一个小时（3,600 秒）；例如，在进行过多的认证尝试后：
- en: '[PRE65]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: We have reached the end of the `gitlab.yml` file. After restarting GitLab, the
    changes will become active. There are other ways of running GitLab. In the next
    section, we will take a look at configuring an instance in a Docker container.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经到达了`gitlab.yml`文件的末尾。重启 GitLab 后，更改将生效。还有其他方式运行 GitLab。在下一节中，我们将查看如何在 Docker
    容器中配置实例。
- en: Reconfiguring GitLab Docker containers
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新配置 GitLab Docker 容器
- en: The official containers from GitLab use the `omnibus-gitlab` package, so all
    the configuration is managed through the unique configuration file, `/etc/gitlab/gitlab.rb`.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab 官方容器使用`omnibus-gitlab`包，因此所有配置都通过唯一的配置文件`/etc/gitlab/gitlab.rb`进行管理。
- en: 'Once the container is started, you can connect to it by starting a Bash session:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦容器启动，你可以通过启动一个 Bash 会话连接到容器：
- en: '[PRE66]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: You can now  edit `/etc/gitlab/gitlab.rb` inside the Docker container. Then
    you can run `gitlab-ctl reconfigure` after that to apply the changes.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以编辑 Docker 容器内的`/etc/gitlab/gitlab.rb`。然后，执行`gitlab-ctl reconfigure`来应用更改。
- en: A second way to configure the container is to start it up with a environment
    variable, `GITLAB_OMNIBUS_CONFIG`. This variable can contain the contents of a
    `gitlab.rb` file. These settings will not be persisted to the real file.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 配置容器的第二种方式是通过环境变量`GITLAB_OMNIBUS_CONFIG`启动容器。该变量可以包含一个`gitlab.rb`文件的内容。这些设置不会持久化到实际文件中。
- en: 'You could use the following code:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下代码：
- en: '[PRE67]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: The container start-up process will always run `gitlab-ctl reconfigure`. This
    means the omnibus template settings you specify during container startup need
    to be explicitly set every time you spin up the container; otherwise, your container
    will reconfigure and you will lose the settings.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 容器启动过程将始终运行`gitlab-ctl reconfigure`。这意味着你在容器启动时指定的 omnibus 模板设置需要每次启动容器时明确设置；否则，容器会重新配置，你会丢失这些设置。
- en: Changing GitLab in a Kubernetes environment
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Kubernetes 环境中更改 GitLab
- en: Since GitLab for Kubernetes is configured by Helm charts, you need to configure
    all settings through that.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Kubernetes 上的 GitLab 是通过 Helm charts 配置的，因此你需要通过 Helm charts 配置所有设置。
- en: 'The options can be found here: [https://gitlab.com/charts/gitlab/blob/master/doc/installation/command-line-options.md](https://gitlab.com/charts/gitlab/blob/master/doc/installation/command-line-options.md).'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 选项可以在这里找到：[https://gitlab.com/charts/gitlab/blob/master/doc/installation/command-line-options.md](https://gitlab.com/charts/gitlab/blob/master/doc/installation/command-line-options.md)。
- en: For each set of options, some are required, and those that are not required
    have a default value.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每组选项，有些是必需的，而那些不需要的选项会有默认值。
- en: In the next section, we will pick some of the options to change in a Kubernetes
    environment.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将选择一些选项来更改 Kubernetes 环境中的配置。
- en: Basic configuration
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本配置
- en: 'There are two required settings here: `global.hosts.domain` and `global.hosts.externalIP`.
    These should point to the host and IP where GitLab is to be served from. Another
    interesting set of these are as follows:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两个必需的设置：`global.hosts.domain` 和 `global.hosts.externalIP`。它们应该指向要为 GitLab
    提供服务的主机和 IP 地址。以下是另一些有趣的设置：
- en: '`global.psql.host`'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`global.psql.host`'
- en: '`global.psql.password.secret`'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`global.psql.password.secret`'
- en: '`global.psql.password.key`'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`global.psql.password.key`'
- en: These contain information that point to an external Postgres instance.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 这些包含指向外部 Postgres 实例的信息。
- en: Other options can be found in the command-line options URL at [https://gitlab.com/charts/gitlab/blob/master/doc/installation/command-line-options.md](https://gitlab.com/charts/gitlab/blob/master/doc/installation/command-line-options.md).
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 其他选项可以在命令行选项 URL 中找到，地址为 [https://gitlab.com/charts/gitlab/blob/master/doc/installation/command-line-options.md](https://gitlab.com/charts/gitlab/blob/master/doc/installation/command-line-options.md)。
- en: Configuring TLS
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 TLS
- en: These options control the TLS configuration that is activated for GitLab. There
    are no required options, but if you don't want to use Let's Encrypt, set `global.ingress.configureCertmanager`
    to false.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项控制激活的 GitLab 的 TLS 配置。没有必需的选项，但如果你不想使用 Let's Encrypt，请将 `global.ingress.configureCertmanager`
    设置为 false。
- en: Configuring outgoing emails
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置外发邮件
- en: 'For outgoing email, there are several options such as the host of the incoming
    mail server—for example:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 对于外发邮件，有几个选项，例如传入邮件服务器的主机——例如：
- en: '[PRE68]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'To set this configuration setting and enable it, you use the following command
    line:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置此配置并启用它，你可以使用以下命令行：
- en: '[PRE69]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'If your SMTP server requires authentication, you need to add the credentials
    as an `–set` option and deploy the password also as a secret with the following:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的 SMTP 服务器需要身份验证，你需要将凭证添加为 `–set` 选项，并将密码作为密钥部署，具体如下：
- en: '[PRE70]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: After you have issued the `helm upgrade` command, the `unicorn` and `sidekiq`
    components will automatically restart in the Kubernetes cluster.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在你执行 `helm upgrade` 命令后，`unicorn` 和 `sidekiq` 组件将在 Kubernetes 集群中自动重启。
- en: Other settings
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他设置
- en: Many other settings are available, and you can view them at [https://gitlab.com/charts/gitlab/blob/master/doc/installation/command-line-options.md](https://gitlab.com/charts/gitlab/blob/master/doc/installation/command-line-options.md).
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他设置，你可以在 [https://gitlab.com/charts/gitlab/blob/master/doc/installation/command-line-options.md](https://gitlab.com/charts/gitlab/blob/master/doc/installation/command-line-options.md)
    查看它们。
- en: 'Here are some examples:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例：
- en: '**Incoming Email configuration**: GitLab can also handle incoming mail for
    the service desk feature.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**传入邮件配置**：GitLab 还可以处理服务台功能的传入邮件。'
- en: '**GitLab shell**: You can provide settings for the GitLab shell.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitLab shell**：你可以为 GitLab shell 提供设置。'
- en: '**RBAC settings**: You can describe Kubernetes **Role Based Access Control**
    (**RBAC**).'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RBAC 设置**：你可以描述 Kubernetes **基于角色的访问控制**（**RBAC**）。'
- en: '**Advanced nginx ingress configuration**: Change the default ingress nginx
    settings for the cluster.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高级 nginx ingress 配置**：更改集群中默认的 ingress nginx 设置。'
- en: '**Advanced in-cluster Redis configuration**: Change the settings for the Redis
    cluster.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高级集群内 Redis 配置**：更改 Redis 集群的设置。'
- en: '**Advanced registry configuration**: Change the settings for the Docker registry
    that is running as a microservice.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高级注册表配置**：更改作为微服务运行的 Docker 注册表的设置。'
- en: '**Advanced MinIO configuration**: Change the settings for the MinIO object
    storage microservice.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高级 MinIO 配置**：更改 MinIO 对象存储微服务的设置。'
- en: '**Advanced GitLab configuration**: Change the advanced settings in GitLab.'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高级 GitLab 配置**：更改 GitLab 中的高级设置。'
- en: Summary
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed configuring an existing GitLab application instance.
    As we have seen in earlier chapters, the options are different, depending on the
    installation path you have chosen. An omnibus GitLab installation is relatively
    easy to configure. Just change the setting in `/etc/gitlab/gitlab.rb` and run
    `gitlab-ctl reconfigure`. Changing the settings in an installation from source
    requires a bit more attention, because the dependencies between the GitLab components
    aren't managed as they are with omnibus GitLab. Configuring the GitLab instance
    running inside the Docker containers is the same as the way you manage the omnibus
    GitLab installations.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了配置现有 GitLab 应用实例。如前几章所见，选项会根据你选择的安装路径有所不同。Omnibus GitLab 安装相对容易配置。只需更改
    `/etc/gitlab/gitlab.rb` 中的设置并运行 `gitlab-ctl reconfigure`。从源代码安装更改设置需要更多注意，因为 GitLab
    组件之间的依赖关系不像 Omnibus GitLab 那样由系统管理。配置运行在 Docker 容器中的 GitLab 实例与管理 Omnibus GitLab
    安装相同。
- en: In the next chapter, we will be exploring settings that should be altered in
    your GitHub and in GitLab to understand the procedure of importing and running
    the project.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探索在 GitHub 和 GitLab 中应该更改的设置，以了解导入和运行项目的过程。
- en: Questions
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What services are enabled when the `postgres_role` is chosen in `gitlab.rb`?
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `gitlab.rb` 中选择 `postgres_role` 时启用哪些服务？
- en: Where is `gitlab.yml` usually found?
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`gitlab.yml` 通常在哪里找到？'
- en: What protocol is used for the incoming mail feature?
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于接收邮件功能的协议是什么？
- en: What does LFS stand for?
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: LFS 代表什么？
- en: Which Open Source chat tool is tightly integrated with GitLab?
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个开源聊天工具与 GitLab 紧密集成？
- en: What license is needed to support LDAP groups?
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持 LDAP 组需要什么许可证？
- en: What mechanism does GitLab provide to throttle web requests?
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitLab 提供了什么机制来限制 Web 请求的频率？
- en: What tool do you need, besides Helm, to configure Kubernetes?
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了 Helm，你还需要什么工具来配置 Kubernetes？
- en: Further reading
  id: totrans-272
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*Getting Started with Kubernetes - Third Edition* by *Jesse White* and *Jonathan
    Baier*: [https://www.packtpub.com/virtualization-and-cloud/getting-started-kubernetes-third-edition](https://www.packtpub.com/virtualization-and-cloud/getting-started-kubernetes-third-edition)'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Kubernetes 入门 - 第三版* 由 *Jesse White* 和 *Jonathan Baier* 编写：[https://www.packtpub.com/virtualization-and-cloud/getting-started-kubernetes-third-edition](https://www.packtpub.com/virtualization-and-cloud/getting-started-kubernetes-third-edition)'
- en: '*Develop and Operate Microservices on Kubernetes [Video]* by* Martin Helmich*: [https://www.packtpub.com/virtualization-and-cloud/develop-and-operate-microservices-kubernetes-video](https://www.packtpub.com/virtualization-and-cloud/develop-and-operate-microservices-kubernetes-video)'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在 Kubernetes 上开发和运营微服务 [视频]* 由 *Martin Helmich* 编写：[https://www.packtpub.com/virtualization-and-cloud/develop-and-operate-microservices-kubernetes-video](https://www.packtpub.com/virtualization-and-cloud/develop-and-operate-microservices-kubernetes-video)'
- en: '*Docker Cookbook - Second Edition* by *Jeeva S. Chelladhurai*, *Ken Cochrane*,
    *Neependra Khare*: [https://www.packtpub.com/virtualization-and-cloud/docker-cookbook-second-edition](https://www.packtpub.com/virtualization-and-cloud/docker-cookbook-second-edition)'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Docker 厨房秘籍 - 第二版* 由 *Jeeva S. Chelladhurai*、*Ken Cochrane*、*Neependra Khare*
    编写：[https://www.packtpub.com/virtualization-and-cloud/docker-cookbook-second-edition](https://www.packtpub.com/virtualization-and-cloud/docker-cookbook-second-edition)'
