- en: Switching From SVN
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 SVN 切换
- en: The shortcomings of CVS have led to the development of other systems, with one
    of the most well-known being **Apache Subversion** (**SVN**). In addition to the
    improvements it has brought, it was specially ensured that is has high compatibility
    with CVS. It is also open source licensed (with an Apache license, not GNU). It
    was started in 2000 by Collabnet Inc., but changed to an Apache project in 2009\.
    You can find it at [https://subversion.apache.org](https://subversion.apache.org).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: CVS 的不足之处促使了其他系统的发展，其中最著名的一个就是 **Apache Subversion** (**SVN**) 。除了它带来的改进外，还特别确保了它与
    CVS 的高度兼容性。它也采用了开源许可证（Apache 许可证，而非 GNU）。它由 Collabnet Inc. 于 2000 年启动，但在 2009
    年转为 Apache 项目。你可以在 [https://subversion.apache.org](https://subversion.apache.org)
    找到它。
- en: 'In this chapter, will we cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将覆盖以下主题：
- en: The difference between SVN and Git
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SVN 和 Git 之间的区别
- en: Mirroring SVN with GIT
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GIT 镜像 SVN
- en: Using svn2git to migrate in one cut
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 svn2git 一次性迁移
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow along with the instructions in this chapter, please download this
    book's GitHub repository, along with the examples from [https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter07](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter07).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟随本章中的说明，请下载本书的 GitHub 仓库以及来自 [https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter07](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter07)
    的示例。
- en: 'The other requirements for this chapter are as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的其他要求如下：
- en: '**Git**: [http://git-scm.org](http://git-scm.org)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git**：[http://git-scm.org](http://git-scm.org)'
- en: '**SVN**: [https://subversion.apache.org/packages.html](https://subversion.apache.org/packages.html)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SVN**：[https://subversion.apache.org/packages.html](https://subversion.apache.org/packages.html)'
- en: '**Git LFS**: [https://git-lfs.github.com](https://git-lfs.github.com)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git LFS**：[https://git-lfs.github.com](https://git-lfs.github.com)'
- en: '**SubGit**: [https://subgit.com](https://subgit.com)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SubGit**：[https://subgit.com](https://subgit.com)'
- en: '**svn2git**: [https://github.com/nirvdrum/svn2git](https://github.com/nirvdrum/svn2git)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**svn2git**：[https://github.com/nirvdrum/svn2git](https://github.com/nirvdrum/svn2git)'
- en: The difference between SVN and Git
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SVN 和 Git 之间的区别
- en: 'Like CVS, the biggest difference between Git and SVN is that SVN follows a
    centralized architecture, while Git uses a distributed network. There is one SVN
    server, and as a client you communicate your changes with it. This in different
    to Git, where there can be many local copies, and one copy can reside on a central
    server. This architecture is depicted as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 与 CVS 相似，Git 和 SVN 之间最大的区别是，SVN 遵循集中式架构，而 Git 使用分布式网络。SVN 有一个服务器，作为客户端，你与它进行通信。与此不同，Git
    可以有多个本地副本，其中一个副本可以存放在中央服务器上。这个架构如下所示：
- en: '![](img/bed41ed9-83d8-4683-b415-f9a4a25563bb.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bed41ed9-83d8-4683-b415-f9a4a25563bb.png)'
- en: With Git, there are several options to choose from regarding protocol and network
    settings. Most importantly, you have the choice to communicate with remotes over
    SSH or HTTP. Using SSH, you wrap Git commands, possibly using certificate authentication,
    and with HTTP, you implement Git actions using WebDAV and basic HTTP authentication**.**
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Git 中，有多种关于协议和网络设置的选择。最重要的是，你可以选择通过 SSH 或 HTTP 与远程通信。使用 SSH 时，你将 Git 命令封装起来，可能使用证书认证，而使用
    HTTP 时，你通过 WebDAV 和基本的 HTTP 认证来实现 Git 操作**。**
- en: SVN has a networking layer that is abstracted, which means that clients exhibit
    the same behavior, no matter what sort of server they are operating against.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: SVN 有一个抽象的网络层，这意味着客户端表现出的行为相同，无论它们操作的是哪种服务器。
- en: 'There are several different server options available, as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种不同的服务器选项，具体如下：
- en: '**The svnserver server**:This one is easy to set up, does not need system accounts
    on a server, and is faster than WebDAV (which extends the HTTP protocol with filesystem
    access). One big disadvantage is that communication using this server is unencrypted
    by default.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**svnserver 服务器**：这个设置起来很简单，不需要服务器上的系统账户，比 WebDAV（通过 HTTP 协议扩展文件系统访问）更快。一个大的缺点是，默认情况下通过这个服务器进行的通信是不加密的。'
- en: '**svnserver through SSH**: This has all the advantages we mentioned previously,
    but is protected with SSH encryption. It works by tunneling the svnserver traffic
    through an SSH session.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过 SSH 使用 svnserver**：它具备我们之前提到的所有优点，但通过 SSH 加密保护。它的工作原理是通过 SSH 会话隧道化 svnserver
    的流量。'
- en: '**The Apache web server with module dav_svn**:In this situation, all traffic
    on the network layer is carried out over HTTP. The famous Apache web server has
    support for WebDAV operations, and there is a specific Apache module that handles
    SVN traffic (`dav_svn`). It is noticeably slower because of the overhead in the
    HTTP protocol, but is had the added bonus that repositories are browseable through
    a web browser.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**带有 dav_svn 模块的 Apache Web 服务器**：在这种情况下，所有网络层的流量都是通过 HTTP 进行的。著名的 Apache Web
    服务器支持 WebDAV 操作，并且有一个专门的 Apache 模块处理 SVN 流量（`dav_svn`）。由于 HTTP 协议的开销，它的速度明显较慢，但有一个额外的好处，那就是可以通过网页浏览器浏览仓库。'
- en: Besides their infrastructural difference, there are also several differences
    between your local SVN/Git client.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 除了它们在基础设施上的差异外，你的本地 SVN/Git 客户端之间还有一些其他差异。
- en: Security and access control
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全性和访问控制
- en: With SVN, you can set up your server to grant or deny permissions to users.
    You can even define finer-grained access rules based on paths. All of this is
    configured in a central location. With Git running on your client, there is no
    access control by default. Your server implementation or central repository that's
    running Git must do that for you. GitLab has this functionality.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 SVN 时，你可以设置服务器以授予或拒绝用户权限。你甚至可以基于路径定义更细粒度的访问规则。所有这些都在一个中央位置进行配置。而使用 Git 时，默认情况下客户端上没有访问控制。你的
    Git 服务器实现或运行 Git 的中央仓库必须为你提供访问控制。GitLab 就具备这个功能。
- en: The repository's change history is kept centrally on the server in the SVN world,
    and to change it you need to gain access to this central place.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SVN 的世界里，仓库的变更历史是集中保存在服务器上的，要更改它，你需要获得对这个中央位置的访问权限。
- en: Because Git is a distributed versioning system, every developer can make changes
    to any part of their local repository history. Although pushing a changed history
    is heavily discouraged, it is possible. This can wreak havoc if other developers
    are depending on particular changes.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Git 是一个分布式版本控制系统，每个开发人员都可以更改其本地仓库历史的任何部分。尽管强烈不建议推送更改过的历史，但这是可能的。如果其他开发人员依赖于特定的更改，这可能会造成混乱。
- en: For Git users, the complete history of a repository is saved locally and updated
    from and to remotes, so there is always a local copy.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Git 用户来说，仓库的完整历史会保存在本地，并从远程更新或向远程更新，因此始终存在本地副本。
- en: Making regular backups is smart to do with both Git and SVN. Even with a central
    server and several distributed copies, you need to stay in sync to keep all the
    data available.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 定期备份对于 Git 和 SVN 都是明智的做法。即使有中央服务器和几个分布式副本，你仍然需要保持同步以确保数据的可用性。
- en: Space requirements and references
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 空间要求和引用
- en: One of the things SVN can do compared to Git is that you can check out parts
    of the repository. In Git, the repository can only be cloned as a whole.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 相比 Git，SVN 能做的一件事是，你可以检出仓库的部分内容。而在 Git 中，仓库只能作为一个整体进行克隆。
- en: In Git, every object has a unique ID, that is, a SHA-1; for instance, `921103db8259eb9de72f42db8b939895f5651422`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Git 中，每个对象都有一个唯一的 ID，即 SHA-1；例如，`921103db8259eb9de72f42db8b939895f5651422`。
- en: 'This makes it easier to reference. You can also use a shortened version (`921103d`):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这样更容易引用。你也可以使用缩短版本（`921103d`）：
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In SVN, a file is always the newest version. To reference changes to a file,
    you need to use *revisions*. That revision points to the whole repository.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SVN 中，一个文件总是最新版本。要引用文件的更改，你需要使用 *修订版本*。该修订版本指向整个仓库。
- en: SVN working directories contain two copies of each file, which is why Git repositories
    are generally much smaller – they only contain one copy. A directory with a cloned
    Git repository contains a small index file with approximately 100 bytes of index
    data per tracked file.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: SVN 工作目录包含每个文件的两个副本，这也是 Git 仓库通常比 SVN 小的原因 —— Git 仓库只包含一个副本。一个克隆的 Git 仓库目录包含一个小型索引文件，每个被跟踪的文件大约有
    100 字节的索引数据。
- en: 'If a project has a lot of files, the difference in size between SVN and Git
    can become quite large! A thing most people don''t realize is that SVN can track
    empty directories, while Git cannot! Only file contents are tracked by Git, so
    empty directories will not show! The following diagram shows the way SVN handles
    changes:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个项目包含大量文件，SVN 和 Git 之间的大小差异可能会变得相当大！大多数人没有意识到的一点是，SVN 可以跟踪空目录，而 Git 则不能！Git
    只跟踪文件内容，因此空目录不会显示出来！下图展示了 SVN 如何处理更改：
- en: '![](img/38d7f310-03b8-4b6f-b287-bf0fc04dccf3.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/38d7f310-03b8-4b6f-b287-bf0fc04dccf3.png)'
- en: 'Git, on the other hand, uses the graph model, which is as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Git 使用图形模型，具体如下：
- en: '![](img/50cd7fc0-4a56-4538-91e6-bba56a27df67.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50cd7fc0-4a56-4538-91e6-bba56a27df67.png)'
- en: As we can see, the difference in size and the ways of referencing between SVN
    and Git is very large!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，SVN和Git在大小和引用方式上的差异非常大！
- en: Branching
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分支
- en: Both Git and SVN support the use of branches. However, for SVN, branches are
    part of a possible workflow and style, while for Git the use of branches is built
    into the command palette and standard way of working.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Git和SVN都支持使用分支。然而，在SVN中，分支是可能的工作流和样式的一部分，而在Git中，分支的使用是命令面板和标准工作方式的一部分。
- en: One of the major disadvantages of SVN is the way of branching and merging. It
    can take a long time if you have large repositories. If you create a new branch
    in SVN, you create a completely new directory within the repository, which means
    there is repetition in that structure. When the branch is ready or no longer needed,
    you commit back to the trunk.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: SVN的一个主要缺点是分支和合并的方式。如果你的仓库很大，这个过程可能会耗费很长时间。如果你在SVN中创建一个新的分支，你会在仓库内创建一个完全新的目录，这意味着结构中存在重复。当分支准备好或不再需要时，你将其提交回主干。
- en: A big technical difference between Git and SVN versions before 1.5 is that Git
    used three-way merges as standard, while SVN used two-way merges. It couldn't
    perform three-way merges because it didn't store merge information. Git, by using
    its graph database, can check where the code bases share a common state and then
    merge from the diversion point, which is then technically a three-way merge. In
    the latest version of SVN, this is also incorporated because the meta information
    about branches and merges is kept after merging. Unfortunately, the basic problem
    still exists – a branch is a full copy (not a reference).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Git和1.5之前的SVN版本之间的一个重大技术差异是，Git默认使用三方合并，而SVN使用的是双方合并。它无法执行三方合并，因为它不存储合并信息。Git通过使用其图形数据库，可以检查代码库共享的共同状态，然后从分叉点开始合并，这技术上就是三方合并。在SVN的最新版本中，这也被纳入其中，因为合并后会保存有关分支和合并的元信息。不幸的是，基本问题仍然存在——一个分支是一个完整的副本（而不是引用）。
- en: At the same time, there can be changes on the trunk already. Your version of
    it won't have the changes that are in the branches of developers. This means that
    you could have conflicting changes, files, or structures that are missing in your
    branch.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，主干可能已经有了更改。你的版本不会包含开发者分支中的更改。这意味着你可能会遇到冲突的更改、文件或在你的分支中缺失的结构。
- en: The main reason developers like Git so much is the power of the branching model.
    Comparing it to the many repetitions in SVN, Git only creates references to a
    specific commit, so there's less repetition and less waste of space and I/O. Instantiating
    the reference by creation, deletion, or changing a branch will not affect the
    commits. Want to try something? Fix a bug quickly? Just create a branch, edit
    files, and push the commits to the central repository, then delete the branch.
    Create them lightheartedly!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者如此喜欢Git的主要原因是它强大的分支模型。与SVN中的多次重复相比，Git只创建指向特定提交的引用，这样就减少了重复，也减少了空间和I/O的浪费。通过创建、删除或更改分支来实例化引用不会影响提交。想尝试一下吗？快速修复一个Bug？只需创建一个分支，编辑文件，然后将提交推送到中央仓库，再删除分支。轻松创建！
- en: Handling binaries with SVN and Git
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SVN和Git处理二进制文件
- en: Speed is often recited as the main advantage Git has over SVN. This is not exactly
    the case when handling binary files. If developers checkout full repositories
    every time and they contain changing binary files, you lose this speed advantage.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 速度通常被认为是Git相较于SVN的主要优势。然而，在处理二进制文件时，情况并非完全如此。如果开发者每次都检出完整的仓库，并且仓库中包含不断变化的二进制文件，那么你就会失去这种速度优势。
- en: In SVN, only the working tree and the latest changes are checked out to the
    local system. When many changes are made to binary files, checking them out in
    SVN takes less time than with Git.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在SVN中，只有工作树和最新的更改会被检出到本地系统。当对二进制文件进行大量更改时，SVN检出这些文件所需的时间比Git少。
- en: Of course, there are workarounds for storing binary files in Git repositories,
    the most famous being Git LFS ([https://git-lfs.github.com/](https://git-lfs.github.com/)).
    This is a solution that was developed by GitHub and is an extension to Git. With
    it, you store a pointer inside your repository instead of in a big binary file.
    Still, every developer action leads to a pile of changed history data. This is
    going to make operations perform slower.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，Git也有处理二进制文件的变通方法，最著名的就是Git LFS（[https://git-lfs.github.com/](https://git-lfs.github.com/)）。这是GitHub开发的一个解决方案，它是Git的一个扩展。通过它，你可以在仓库中存储一个指针，而不是一个大的二进制文件。不过，每次开发者操作都会导致大量历史数据的变更，这会使操作变得更慢。
- en: GitLab also supports Git LFS operations. Depending on how you or your administrator
    configured GitLab, the location of LFS uploaded data can be on the GitLab server
    itself, or on shared server storage that's connected to you GitLab server. Alternatively,
    it can be stored on an S3-compatible service.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab 也支持 Git LFS 操作。根据你或管理员配置 GitLab 的方式，LFS 上传的数据可以存储在 GitLab 服务器本身，也可以存储在连接到你
    GitLab 服务器的共享服务器存储上。或者，它可以存储在与 S3 兼容的服务中。
- en: You can install Git LFS on several platforms ([https://github.com/git-lfs/git-lfs/wiki/Installation](https://github.com/git-lfs/git-lfs/wiki/Installation)).
    The main requisite is that you have installed Git version 1.8.2 or higher.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在多个平台上安装 Git LFS（[https://github.com/git-lfs/git-lfs/wiki/Installation](https://github.com/git-lfs/git-lfs/wiki/Installation)）。主要的要求是你已安装
    Git 版本 1.8.2 或更高版本。
- en: 'Let''s try using `git-lfs`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用 `git-lfs`：
- en: 'We will try this on macOS and install it with `brew`:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在 macOS 上尝试，并通过 `brew` 安装：
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Update your Git configuration to finish the installation:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新你的 Git 配置以完成安装：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When you have Git LFS installed, you need to enable the functionality for your
    local repository:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你安装了 Git LFS 后，你需要为本地仓库启用该功能：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Tell Git which kind of files you consider large. After this, add the `.gitattributes` file
    to the commit:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 告诉 Git 哪些文件你认为是大文件。完成后，将 `.gitattributes` 文件添加到提交中：
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The next step it to just add and commit your changes:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是添加并提交你的更改：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, when you push the repository to the remote server, you will notice a different
    behavior. Git LFS is handling part of the upload:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当你将仓库推送到远程服务器时，你会注意到不同的行为。Git LFS 正在处理部分上传：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: So, even with SVN handling files faster, if you use Git LFS, you get the same
    advantages.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，即使 SVN 处理文件更快，使用 Git LFS 时，你依然可以获得相同的优势。
- en: If you compare Git LFS with SVN on a basic level, then SVN is faster when it
    comes to handling binary files. If you use additional Git LFS for Git, they perform
    approximately the same.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将 Git LFS 与 SVN 进行基本比较，那么 SVN 在处理二进制文件时速度更快。如果你使用 Git LFS 进行 Git 操作，它们的表现大致相同。
- en: Mirroring SVN and GIT
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 镜像 SVN 和 GIT
- en: In order to mirror SVN with Git, we will use the SubGit tool ([https://subgit.com/](https://subgit.com/)),
    which is maintained and sold by TMate software. You can download a version for
    your operating system or choose the basic one, which is a multiplatform Java binary.
    If you unzip the package you downloaded, the SubGit tool can be found in the `bin`
    directory.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为了用 Git 镜像 SVN，我们将使用 SubGit 工具（[https://subgit.com/](https://subgit.com/)），该工具由
    TMate 软件维护和销售。你可以下载适用于你操作系统的版本，或者选择基本版，这是一个跨平台的 Java 二进制文件。如果你解压下载的包，你可以在 `bin`
    目录中找到 SubGit 工具。
- en: SubGit should be set up on your Git server. It will scan the settings for the
    remote SVN repository you specify, then download SVN revisions and convert them
    into Git commits. SubGit keeps both repositories synchronized. When a user pushes
    a new commit to Git, SubGit converts and tries to update SVN. It also gets new
    revisions from SVN as soon as they appear. SVN and Git users see each other's
    commits as if they were all working on the same versioning system. SubGit makes
    sure that possible conflicts don't occur between the systems and maintains the
    integrity of the mirror.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: SubGit 应该已在你的 Git 服务器上设置。它会扫描你指定的远程 SVN 仓库的设置，然后下载 SVN 修订并将其转换为 Git 提交。SubGit
    会保持两个仓库的同步。当用户向 Git 推送新提交时，SubGit 会转换并尝试更新 SVN。它还会在 SVN 中出现新修订时立即获取。SVN 和 Git
    用户会看到彼此的提交，仿佛他们都在同一个版本控制系统中工作。SubGit 确保不同系统之间不会发生冲突，并保持镜像的完整性。
- en: 'Running SubGit in mirror mode requires that you register the software at TMate
    software. Registration is free for open source, academic, and start-up projects:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在镜像模式下运行 SubGit 需要你在 TMate 软件上注册该软件。对于开源、学术和初创项目，注册是免费的：
- en: 'First, create an empty project in GitLab:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在 GitLab 中创建一个空的项目：
- en: '![](img/6a906182-9e5d-470a-89e5-6bd3e2be7a73.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a906182-9e5d-470a-89e5-6bd3e2be7a73.png)'
- en: 'Then, open a Terminal on the machine where your GitLab instances are running
    and create the following environment variables. `SVN_PROJECT_URL` should contain
    a link to the SVN project you want to copy/convert/mirror:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在运行 GitLab 实例的机器上打开终端，并创建以下环境变量。`SVN_PROJECT_URL` 应包含你想要复制/转换/镜像的 SVN 项目的链接：
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Make sure that you have Java configured on the machine:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你在机器上配置了 Java：
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, we can start the first run of the SubGit tool, which configures everything
    in order for the mirroring or one-time migration to succeed (I have copied the
    `subgit` binary from the package to `/opt/subgit/bin`):'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以开始第一次运行SubGit工具，它将配置所有内容，以便镜像或一次性迁移成功（我已将`subgit`二进制文件从软件包复制到`/opt/subgit/bin`）：
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To complete SubGit installation and have it running continuously, do the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成SubGit的安装并持续运行，请执行以下操作：
- en: 'Adjust Subversion to Git branch mapping if necessary in the following file:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如有需要，请在以下文件中调整Subversion到Git的分支映射：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Define at least one Subversion credential in the default SubGit password file,
    as follows:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在默认的SubGit密码文件中定义至少一个Subversion凭证，如下所示：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Alternatively, you can configure SSH or SSL credentials in the `[auth]` section
    of the following root:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以在以下根目录的`[auth]`部分配置SSH或SSL凭证：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Optionally, add custom authors mapping to the `authors.txt` file(s) in the
    following file:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，将自定义作者映射添加到以下文件中的`authors.txt`文件：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Run the `subgit install` command:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`subgit install`命令：
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you query the process list, you will see that the SubGit daemon is running:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果查询进程列表，您将看到SubGit守护进程正在运行：
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If you view the project in GitLab directly after the installation done with
    SubGit, you will find that there is still nothing visible. This is because of
    caching the user interface. So far, we have done operations on the filesystem
    and we need to flush the Redis cache.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在通过SubGit安装完成后直接查看GitLab中的项目，您会发现仍然看不见任何内容。这是因为用户界面缓存的原因。到目前为止，我们已在文件系统上执行了操作，需要刷新Redis缓存。
- en: 'You can use the following command on the GitLab server to do this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitLab服务器上使用以下命令进行此操作：
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, the imported project should be visible:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，导入的项目应该可见：
- en: '![](img/49eddeee-7317-44ae-b80f-38130aa647e7.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/49eddeee-7317-44ae-b80f-38130aa647e7.png)'
- en: We now have two source code repositories that are in sync. Sometimes, you only
    need one-way conversion, and this is what we will be covering in the next section.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有了两个同步的源代码仓库。有时，您只需要单向转换，这就是我们将在下一部分介绍的内容。
- en: No sync, just convert
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不需要同步，只需转换
- en: You can also use the SubGit tool to do a one-time migration. You don't need
    a license for this, and it's free. Just download the tool and run it.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用SubGit工具进行一次性迁移。对此不需要许可证，而且它是免费的。只需下载工具并运行即可。
- en: 'So, instead of using `install`, which enables synchronization, just use `import` as
    an argument:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，不要使用启用同步的`install`，只需使用`import`作为参数：
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: After this has completed, you can refresh the cache to see the changes being
    reflected in the web UI.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，您可以刷新缓存，以便在Web界面中看到更改反映出来。
- en: A one-time conversion is an easy operation to perform compared to a sync, but
    there is another tool that can do this as well.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 相比于同步，一次性转换是一个简单的操作，但也有其他工具可以实现这一点。
- en: Using svn2git to migrate in one cut
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用svn2git进行一次性迁移
- en: As you have seen with SubGit, it is possible to create a syncing solution between
    SVN and Git. In reality, most of the time, when you want to migrate to a new system,
    you will want to do it in one go. It decreases the margin of error and is easier
    to reason about. So, when you do such a hard cut over, make your developers use
    the new repository. Setting up syncing will not help you migrate in the long run.
    In comparison to SubGit, you can use your own workstation to do the conversion.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在SubGit中看到的那样，可以在SVN和Git之间创建一个同步解决方案。实际上，大多数时候，当您想迁移到一个新系统时，您会希望一次性完成。这减少了出错的可能性，也更容易推理。因此，当您进行这样的硬性迁移时，让您的开发人员使用新的仓库。设置同步在长期来看并不能帮助您迁移。与SubGit相比，您可以使用自己的工作站进行转换。
- en: 'You can use a tool such as svn2git ([https://github.com/nirvdrum/svn2git](https://github.com/nirvdrum/svn2git))
    to do a conversion in one step. On your workstation, you can install it as a Ruby
    Gem if you already have Ruby and Git installed:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用像svn2git这样的工具（[https://github.com/nirvdrum/svn2git](https://github.com/nirvdrum/svn2git)）进行一次性转换。如果您已经安装了Ruby和Git，可以将其作为Ruby
    Gem安装：
- en: '[PRE18]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'On Debian-based Linux distributions, you can install the native packages:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于Debian的Linux发行版上，您可以安装本地软件包：
- en: '[PRE19]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If you need the authors in your project to display correctly, you can make sure
    that mapping the authors from SVN to Git is performed correctly as part of the
    conversion. It depends on whether you create an authors file or not. If you choose
    not to, then no mapping will be performed. In some situations, this can be an
    issue, while some users don't care at all. If you want to map users, make sure
    you map every author in the SVN repository. Failing to do so will result in a
    failed conversion, and you will have to start again.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望项目中的作者正确显示，可以确保在转换过程中正确地将 SVN 中的作者映射到 Git。这取决于您是否创建了作者文件。如果选择不创建，则不会进行映射。在某些情况下，这可能会成为一个问题，而有些用户则完全不在乎。如果您希望映射用户，请确保映射
    SVN 仓库中的每个作者。没有正确映射将导致转换失败，您需要重新开始。
- en: 'By using the following command, you will get a list of authors that are present
    in the repository. Run the following in the SVN source repository. I have done
    so on my workstation:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令，您将获得仓库中所有作者的列表。在 SVN 源仓库中运行以下命令。我是在我的工作站上执行的：
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In this case, there are only two authors. Use the following output to create
    the `authors.txt` file and map authors line by line:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，只有两个作者。使用以下输出创建 `authors.txt` 文件，并逐行映射作者：
- en: '[PRE21]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The repository we are converting has a reasonable default structure. It has
    a trunk, branches, and tags. If your SVN repositories are more complicated, you
    have to use more options. You can find these in the svn2git documentation on the
    home page shown earlier, or use `svn2git --help`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在转换的仓库具有合理的默认结构。它有 trunk、branches 和 tags。如果您的 SVN 仓库更复杂，您需要使用更多选项。您可以在之前提到的
    svn2git 文档的主页上找到这些选项，或者使用 `svn2git --help`。
- en: Make sure that you run the `svn2git` conversion command in an empty directory.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在一个空目录中运行 `svn2git` 转换命令。
- en: The default format of the `svn2git` command line is `https://svn.example.com/path/to/repo
    --authors /path/to/authors.txt`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`svn2git` 命令行的默认格式是 `https://svn.example.com/path/to/repo --authors /path/to/authors.txt`。'
- en: 'In my example, we are not changing authors, so we''ll leave them out. If your
    SVN repository is protected by a username and password, you can add the `--username
    ''password''` and `--password ''password''` options as well:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的示例中，我们没有更改作者，所以我们将忽略他们。如果您的 SVN 仓库受到用户名和密码保护，您还可以添加 `--username 'password'`
    和 `--password 'password'` 选项：
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The next step is to finish the conversion by pushing your migrated repository
    to GitLab. It's best to create an empty project in GitLab and fetch the projects
    HTTP or SSH location. Then, you can add it as a remote to your local repository
    and push it. This will contain all the commits and branches.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是通过将迁移后的仓库推送到 GitLab 完成转换。最好在 GitLab 中创建一个空项目，并获取项目的 HTTP 或 SSH 地址。然后，您可以将其作为远程仓库添加到本地仓库并推送。这将包含所有的提交和分支。
- en: 'When the conversion is complete, you can import the project into GitLab by
    creating a new remote locally and push the repository:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 转换完成后，您可以通过在本地创建一个新的远程仓库并推送仓库，将项目导入 GitLab：
- en: '[PRE23]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If you have tags, don''t forget to push them, too:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有标签，别忘了推送它们：
- en: '[PRE24]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This finalizes the conversion using svn2git, the second tool that you can use
    to perform a one-off migration of SVN to Git.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这将通过 svn2git 完成转换，svn2git 是您可以用来一次性将 SVN 迁移到 Git 的第二个工具。
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we started by tracing the origins of SVN and why it rose to
    popularity. Afterwards, we made a comparison between SVN and Git on certain aspects
    that are relevant for versioning systems, such as architecture, branching methods,
    and how to deal with binary files.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先追溯了 SVN 的起源以及它为何流行。随后，我们在版本控制系统的相关方面（如架构、分支方法和如何处理二进制文件）上，对 SVN 和 Git
    进行了比较。
- en: The second part of this chapter deals with ways to migrate SVN projects to Git.
    The first tool we discussed was SubGit. It is capable not only of migration projects
    from SVN to Git, but can also act as a proxy and let both repositories coexist.
    The second tool we talked about was svn2git, which does a migration in one cut.
    The other notable difference between these tools is that SubGit is installed on
    your GitLab server, while svn2git can be run from your workstation.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的第二部分讲解了如何将 SVN 项目迁移到 Git。我们讨论的第一个工具是 SubGit。它不仅能将 SVN 项目迁移到 Git，还可以作为代理让两个仓库共存。我们谈到的第二个工具是
    svn2git，它能够一次性完成迁移。这些工具之间的另一个显著区别是，SubGit 安装在您的 GitLab 服务器上，而 svn2git 可以在您的工作站上运行。
- en: In the next chapter, we will take a look at another type of source control system.
    This one is created by Microsoft and not open source.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将介绍另一种类型的源代码控制系统。这个系统由微软创建，并且不是开源的。
- en: Questions
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the home page of the SVN project?
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SVN 项目的主页是什么？
- en: What is the biggest difference between SVN and Git?
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SVN 和 Git 之间最大的区别是什么？
- en: Name the three different ways to run a SVN server.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列举运行 SVN 服务器的三种不同方式。
- en: With SVN, where is the history of a project saved?
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 SVN 中，项目的历史记录保存在哪里？
- en: Git uses SHAs, but what does SVN use?
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Git 使用 SHA，而 SVN 使用什么？
- en: What type of merge did SVN versions before 1.5 perform?
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 1.5 版本之前，SVN 执行的是什么类型的合并？
- en: What version of Git is needed for Git LFS?
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Git LFS 需要什么版本的 Git？
- en: Name two ways that GitLab implements LFS as storage backend.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列举 GitLab 实现 LFS 作为存储后端的两种方式。
- en: What two mechanisms does SubGit support for migration?
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SubGit 支持哪些两种迁移机制？
- en: When you use svn2git, what is the last step of migrating to GitLab?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你使用 svn2git 时，迁移到 GitLab 的最后一步是什么？
- en: Further reading
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '**SubGit**: [https://subgit.com/](https://subgit.com/)'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SubGit**: [https://subgit.com/](https://subgit.com/)'
- en: '**svn2git**: [https://github.com/nirvdrum/svn2git](https://github.com/nirvdrum/svn2git)'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**svn2git**: [https://github.com/nirvdrum/svn2git](https://github.com/nirvdrum/svn2git)'
- en: '**SVN redbook**: [http://svnbook.red-bean.com/](http://svnbook.red-bean.com/)'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SVN 红皮书**: [http://svnbook.red-bean.com/](http://svnbook.red-bean.com/)'
- en: '**SVN documentation**: [https://subversion.apache.org/docs/](https://subversion.apache.org/docs/)'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SVN 文档**: [https://subversion.apache.org/docs/](https://subversion.apache.org/docs/)'
