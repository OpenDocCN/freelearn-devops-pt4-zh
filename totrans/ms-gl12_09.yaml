- en: Switching From SVN
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The shortcomings of CVS have led to the development of other systems, with one
    of the most well-known being **Apache Subversion** (**SVN**). In addition to the
    improvements it has brought, it was specially ensured that is has high compatibility
    with CVS. It is also open source licensed (with an Apache license, not GNU). It
    was started in 2000 by Collabnet Inc., but changed to an Apache project in 2009\.
    You can find it at [https://subversion.apache.org](https://subversion.apache.org).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, will we cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: The difference between SVN and Git
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mirroring SVN with GIT
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using svn2git to migrate in one cut
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow along with the instructions in this chapter, please download this
    book's GitHub repository, along with the examples from [https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter07](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter07).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: 'The other requirements for this chapter are as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '**Git**: [http://git-scm.org](http://git-scm.org)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SVN**: [https://subversion.apache.org/packages.html](https://subversion.apache.org/packages.html)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Git LFS**: [https://git-lfs.github.com](https://git-lfs.github.com)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SubGit**: [https://subgit.com](https://subgit.com)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**svn2git**: [https://github.com/nirvdrum/svn2git](https://github.com/nirvdrum/svn2git)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The difference between SVN and Git
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Like CVS, the biggest difference between Git and SVN is that SVN follows a
    centralized architecture, while Git uses a distributed network. There is one SVN
    server, and as a client you communicate your changes with it. This in different
    to Git, where there can be many local copies, and one copy can reside on a central
    server. This architecture is depicted as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bed41ed9-83d8-4683-b415-f9a4a25563bb.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
- en: With Git, there are several options to choose from regarding protocol and network
    settings. Most importantly, you have the choice to communicate with remotes over
    SSH or HTTP. Using SSH, you wrap Git commands, possibly using certificate authentication,
    and with HTTP, you implement Git actions using WebDAV and basic HTTP authentication**.**
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: SVN has a networking layer that is abstracted, which means that clients exhibit
    the same behavior, no matter what sort of server they are operating against.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several different server options available, as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '**The svnserver server**:This one is easy to set up, does not need system accounts
    on a server, and is faster than WebDAV (which extends the HTTP protocol with filesystem
    access). One big disadvantage is that communication using this server is unencrypted
    by default.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**svnserver through SSH**: This has all the advantages we mentioned previously,
    but is protected with SSH encryption. It works by tunneling the svnserver traffic
    through an SSH session.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Apache web server with module dav_svn**:In this situation, all traffic
    on the network layer is carried out over HTTP. The famous Apache web server has
    support for WebDAV operations, and there is a specific Apache module that handles
    SVN traffic (`dav_svn`). It is noticeably slower because of the overhead in the
    HTTP protocol, but is had the added bonus that repositories are browseable through
    a web browser.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Besides their infrastructural difference, there are also several differences
    between your local SVN/Git client.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Security and access control
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With SVN, you can set up your server to grant or deny permissions to users.
    You can even define finer-grained access rules based on paths. All of this is
    configured in a central location. With Git running on your client, there is no
    access control by default. Your server implementation or central repository that's
    running Git must do that for you. GitLab has this functionality.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: The repository's change history is kept centrally on the server in the SVN world,
    and to change it you need to gain access to this central place.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Because Git is a distributed versioning system, every developer can make changes
    to any part of their local repository history. Although pushing a changed history
    is heavily discouraged, it is possible. This can wreak havoc if other developers
    are depending on particular changes.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: For Git users, the complete history of a repository is saved locally and updated
    from and to remotes, so there is always a local copy.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Making regular backups is smart to do with both Git and SVN. Even with a central
    server and several distributed copies, you need to stay in sync to keep all the
    data available.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Space requirements and references
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the things SVN can do compared to Git is that you can check out parts
    of the repository. In Git, the repository can only be cloned as a whole.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: In Git, every object has a unique ID, that is, a SHA-1; for instance, `921103db8259eb9de72f42db8b939895f5651422`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'This makes it easier to reference. You can also use a shortened version (`921103d`):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In SVN, a file is always the newest version. To reference changes to a file,
    you need to use *revisions*. That revision points to the whole repository.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: SVN working directories contain two copies of each file, which is why Git repositories
    are generally much smaller – they only contain one copy. A directory with a cloned
    Git repository contains a small index file with approximately 100 bytes of index
    data per tracked file.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'If a project has a lot of files, the difference in size between SVN and Git
    can become quite large! A thing most people don''t realize is that SVN can track
    empty directories, while Git cannot! Only file contents are tracked by Git, so
    empty directories will not show! The following diagram shows the way SVN handles
    changes:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/38d7f310-03b8-4b6f-b287-bf0fc04dccf3.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: 'Git, on the other hand, uses the graph model, which is as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50cd7fc0-4a56-4538-91e6-bba56a27df67.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
- en: As we can see, the difference in size and the ways of referencing between SVN
    and Git is very large!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Branching
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Both Git and SVN support the use of branches. However, for SVN, branches are
    part of a possible workflow and style, while for Git the use of branches is built
    into the command palette and standard way of working.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: One of the major disadvantages of SVN is the way of branching and merging. It
    can take a long time if you have large repositories. If you create a new branch
    in SVN, you create a completely new directory within the repository, which means
    there is repetition in that structure. When the branch is ready or no longer needed,
    you commit back to the trunk.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: A big technical difference between Git and SVN versions before 1.5 is that Git
    used three-way merges as standard, while SVN used two-way merges. It couldn't
    perform three-way merges because it didn't store merge information. Git, by using
    its graph database, can check where the code bases share a common state and then
    merge from the diversion point, which is then technically a three-way merge. In
    the latest version of SVN, this is also incorporated because the meta information
    about branches and merges is kept after merging. Unfortunately, the basic problem
    still exists – a branch is a full copy (not a reference).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: At the same time, there can be changes on the trunk already. Your version of
    it won't have the changes that are in the branches of developers. This means that
    you could have conflicting changes, files, or structures that are missing in your
    branch.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: The main reason developers like Git so much is the power of the branching model.
    Comparing it to the many repetitions in SVN, Git only creates references to a
    specific commit, so there's less repetition and less waste of space and I/O. Instantiating
    the reference by creation, deletion, or changing a branch will not affect the
    commits. Want to try something? Fix a bug quickly? Just create a branch, edit
    files, and push the commits to the central repository, then delete the branch.
    Create them lightheartedly!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Handling binaries with SVN and Git
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Speed is often recited as the main advantage Git has over SVN. This is not exactly
    the case when handling binary files. If developers checkout full repositories
    every time and they contain changing binary files, you lose this speed advantage.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: In SVN, only the working tree and the latest changes are checked out to the
    local system. When many changes are made to binary files, checking them out in
    SVN takes less time than with Git.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Of course, there are workarounds for storing binary files in Git repositories,
    the most famous being Git LFS ([https://git-lfs.github.com/](https://git-lfs.github.com/)).
    This is a solution that was developed by GitHub and is an extension to Git. With
    it, you store a pointer inside your repository instead of in a big binary file.
    Still, every developer action leads to a pile of changed history data. This is
    going to make operations perform slower.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: GitLab also supports Git LFS operations. Depending on how you or your administrator
    configured GitLab, the location of LFS uploaded data can be on the GitLab server
    itself, or on shared server storage that's connected to you GitLab server. Alternatively,
    it can be stored on an S3-compatible service.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: You can install Git LFS on several platforms ([https://github.com/git-lfs/git-lfs/wiki/Installation](https://github.com/git-lfs/git-lfs/wiki/Installation)).
    The main requisite is that you have installed Git version 1.8.2 or higher.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try using `git-lfs`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'We will try this on macOS and install it with `brew`:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Update your Git configuration to finish the installation:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When you have Git LFS installed, you need to enable the functionality for your
    local repository:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Tell Git which kind of files you consider large. After this, add the `.gitattributes` file
    to the commit:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The next step it to just add and commit your changes:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, when you push the repository to the remote server, you will notice a different
    behavior. Git LFS is handling part of the upload:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: So, even with SVN handling files faster, if you use Git LFS, you get the same
    advantages.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: If you compare Git LFS with SVN on a basic level, then SVN is faster when it
    comes to handling binary files. If you use additional Git LFS for Git, they perform
    approximately the same.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Mirroring SVN and GIT
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to mirror SVN with Git, we will use the SubGit tool ([https://subgit.com/](https://subgit.com/)),
    which is maintained and sold by TMate software. You can download a version for
    your operating system or choose the basic one, which is a multiplatform Java binary.
    If you unzip the package you downloaded, the SubGit tool can be found in the `bin`
    directory.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: SubGit should be set up on your Git server. It will scan the settings for the
    remote SVN repository you specify, then download SVN revisions and convert them
    into Git commits. SubGit keeps both repositories synchronized. When a user pushes
    a new commit to Git, SubGit converts and tries to update SVN. It also gets new
    revisions from SVN as soon as they appear. SVN and Git users see each other's
    commits as if they were all working on the same versioning system. SubGit makes
    sure that possible conflicts don't occur between the systems and maintains the
    integrity of the mirror.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'Running SubGit in mirror mode requires that you register the software at TMate
    software. Registration is free for open source, academic, and start-up projects:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create an empty project in GitLab:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6a906182-9e5d-470a-89e5-6bd3e2be7a73.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
- en: 'Then, open a Terminal on the machine where your GitLab instances are running
    and create the following environment variables. `SVN_PROJECT_URL` should contain
    a link to the SVN project you want to copy/convert/mirror:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Make sure that you have Java configured on the machine:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, we can start the first run of the SubGit tool, which configures everything
    in order for the mirroring or one-time migration to succeed (I have copied the
    `subgit` binary from the package to `/opt/subgit/bin`):'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To complete SubGit installation and have it running continuously, do the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: 'Adjust Subversion to Git branch mapping if necessary in the following file:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Define at least one Subversion credential in the default SubGit password file,
    as follows:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Alternatively, you can configure SSH or SSL credentials in the `[auth]` section
    of the following root:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Optionally, add custom authors mapping to the `authors.txt` file(s) in the
    following file:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Run the `subgit install` command:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you query the process list, you will see that the SubGit daemon is running:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If you view the project in GitLab directly after the installation done with
    SubGit, you will find that there is still nothing visible. This is because of
    caching the user interface. So far, we have done operations on the filesystem
    and we need to flush the Redis cache.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the following command on the GitLab server to do this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, the imported project should be visible:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/49eddeee-7317-44ae-b80f-38130aa647e7.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
- en: We now have two source code repositories that are in sync. Sometimes, you only
    need one-way conversion, and this is what we will be covering in the next section.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: No sync, just convert
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can also use the SubGit tool to do a one-time migration. You don't need
    a license for this, and it's free. Just download the tool and run it.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'So, instead of using `install`, which enables synchronization, just use `import` as
    an argument:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: After this has completed, you can refresh the cache to see the changes being
    reflected in the web UI.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: A one-time conversion is an easy operation to perform compared to a sync, but
    there is another tool that can do this as well.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Using svn2git to migrate in one cut
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you have seen with SubGit, it is possible to create a syncing solution between
    SVN and Git. In reality, most of the time, when you want to migrate to a new system,
    you will want to do it in one go. It decreases the margin of error and is easier
    to reason about. So, when you do such a hard cut over, make your developers use
    the new repository. Setting up syncing will not help you migrate in the long run.
    In comparison to SubGit, you can use your own workstation to do the conversion.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use a tool such as svn2git ([https://github.com/nirvdrum/svn2git](https://github.com/nirvdrum/svn2git))
    to do a conversion in one step. On your workstation, you can install it as a Ruby
    Gem if you already have Ruby and Git installed:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'On Debian-based Linux distributions, you can install the native packages:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If you need the authors in your project to display correctly, you can make sure
    that mapping the authors from SVN to Git is performed correctly as part of the
    conversion. It depends on whether you create an authors file or not. If you choose
    not to, then no mapping will be performed. In some situations, this can be an
    issue, while some users don't care at all. If you want to map users, make sure
    you map every author in the SVN repository. Failing to do so will result in a
    failed conversion, and you will have to start again.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: 'By using the following command, you will get a list of authors that are present
    in the repository. Run the following in the SVN source repository. I have done
    so on my workstation:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In this case, there are only two authors. Use the following output to create
    the `authors.txt` file and map authors line by line:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The repository we are converting has a reasonable default structure. It has
    a trunk, branches, and tags. If your SVN repositories are more complicated, you
    have to use more options. You can find these in the svn2git documentation on the
    home page shown earlier, or use `svn2git --help`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that you run the `svn2git` conversion command in an empty directory.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: The default format of the `svn2git` command line is `https://svn.example.com/path/to/repo
    --authors /path/to/authors.txt`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: 'In my example, we are not changing authors, so we''ll leave them out. If your
    SVN repository is protected by a username and password, you can add the `--username
    ''password''` and `--password ''password''` options as well:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The next step is to finish the conversion by pushing your migrated repository
    to GitLab. It's best to create an empty project in GitLab and fetch the projects
    HTTP or SSH location. Then, you can add it as a remote to your local repository
    and push it. This will contain all the commits and branches.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: 'When the conversion is complete, you can import the project into GitLab by
    creating a new remote locally and push the repository:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If you have tags, don''t forget to push them, too:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This finalizes the conversion using svn2git, the second tool that you can use
    to perform a one-off migration of SVN to Git.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we started by tracing the origins of SVN and why it rose to
    popularity. Afterwards, we made a comparison between SVN and Git on certain aspects
    that are relevant for versioning systems, such as architecture, branching methods,
    and how to deal with binary files.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: The second part of this chapter deals with ways to migrate SVN projects to Git.
    The first tool we discussed was SubGit. It is capable not only of migration projects
    from SVN to Git, but can also act as a proxy and let both repositories coexist.
    The second tool we talked about was svn2git, which does a migration in one cut.
    The other notable difference between these tools is that SubGit is installed on
    your GitLab server, while svn2git can be run from your workstation.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will take a look at another type of source control system.
    This one is created by Microsoft and not open source.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将介绍另一种类型的源代码控制系统。这个系统由微软创建，并且不是开源的。
- en: Questions
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the home page of the SVN project?
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SVN 项目的主页是什么？
- en: What is the biggest difference between SVN and Git?
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SVN 和 Git 之间最大的区别是什么？
- en: Name the three different ways to run a SVN server.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列举运行 SVN 服务器的三种不同方式。
- en: With SVN, where is the history of a project saved?
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 SVN 中，项目的历史记录保存在哪里？
- en: Git uses SHAs, but what does SVN use?
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Git 使用 SHA，而 SVN 使用什么？
- en: What type of merge did SVN versions before 1.5 perform?
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 1.5 版本之前，SVN 执行的是什么类型的合并？
- en: What version of Git is needed for Git LFS?
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Git LFS 需要什么版本的 Git？
- en: Name two ways that GitLab implements LFS as storage backend.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列举 GitLab 实现 LFS 作为存储后端的两种方式。
- en: What two mechanisms does SubGit support for migration?
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SubGit 支持哪些两种迁移机制？
- en: When you use svn2git, what is the last step of migrating to GitLab?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你使用 svn2git 时，迁移到 GitLab 的最后一步是什么？
- en: Further reading
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '**SubGit**: [https://subgit.com/](https://subgit.com/)'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SubGit**: [https://subgit.com/](https://subgit.com/)'
- en: '**svn2git**: [https://github.com/nirvdrum/svn2git](https://github.com/nirvdrum/svn2git)'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**svn2git**: [https://github.com/nirvdrum/svn2git](https://github.com/nirvdrum/svn2git)'
- en: '**SVN redbook**: [http://svnbook.red-bean.com/](http://svnbook.red-bean.com/)'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SVN 红皮书**: [http://svnbook.red-bean.com/](http://svnbook.red-bean.com/)'
- en: '**SVN documentation**: [https://subversion.apache.org/docs/](https://subversion.apache.org/docs/)'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SVN 文档**: [https://subversion.apache.org/docs/](https://subversion.apache.org/docs/)'
