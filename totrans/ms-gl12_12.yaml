- en: GitLab Vision - the Whole Toolchain in One Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitLab 视角 - 一个应用程序中的完整工具链
- en: This chapter is intended to provide more insight into the background against
    which GitLab has arisen. The product was literally created to help solve a number
    of problems that the Agile movement experienced. We will talk about the history
    of development methodologies and the rise of Agile as the dominant way to develop
    software. The Agile methodologies spilled over to the traditional operations department,
    which then led to the DevOps movement. Finally, we will summarize a number of
    tools that are part of the DevOps way of working.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在提供更多关于 GitLab 背景的深入了解。该产品实际上是为了帮助解决敏捷运动所面临的一些问题而创建的。我们将讨论开发方法论的历史以及敏捷作为主流软件开发方式的崛起。敏捷方法论逐渐渗透到传统运维部门，进而引发了
    DevOps 运动。最后，我们将总结一些 DevOps 工作方式中使用的工具。
- en: 'In this chapter, we will cover following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: The Agile Manifesto
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敏捷宣言
- en: '**Extreme Programming** (**XP**)'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**极限编程**（**XP**）'
- en: The DevOps movement
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DevOps 运动
- en: The toolchain
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具链
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow along with the instructions in this chapter, please download the Git
    repository with examples available from GitHub at [https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter09](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter09).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 若要跟随本章的说明操作，请从 GitHub 下载包含示例的 Git 仓库：[https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter09](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter09)。
- en: The Agile Manifesto
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 敏捷宣言
- en: Some people in the 1990s had a problem with the classic engineering mindset
    of comparing software development to build engineering. Instead of trying to keep
    the requirements stable and not let them get out of hand through requirements
    creep or scope creep, they looked for a process that did not depend on the stability
    of requirement. Those people came up with a number of different ideas in response,
    and those methods are commonly known as lightweight methods. All of these form
    the Agile movement, together with lean manufacturing methods, and have grown very
    popular over time.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 上世纪90年代，一些人对将软件开发与建筑工程进行对比的经典工程思维感到不满。与其努力保持需求的稳定，防止需求蔓延或范围膨胀，他们寻找了一种不依赖于需求稳定性的过程。这些人提出了许多不同的想法，作为回应，这些方法通常被称为轻量级方法。所有这些方法与精益制造方法共同构成了敏捷运动，并随着时间的推移变得非常流行。
- en: Now, what is it about Agile that everyone says nowadays? For some, it's way
    of life and of looking at things. In IT, according to Google, it is a method of
    project management, used especially for software development, that is characterized
    by the division of tasks into short phases of work and the frequent reassessment
    and adaptation of plans.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，Agile（敏捷）究竟是什么？如今为什么大家都在谈论它？对某些人来说，它是一种生活方式和看待事物的方式。在 IT 领域，根据谷歌的定义，它是一种项目管理方法，特别用于软件开发，特点是将任务分解为短期工作阶段，并频繁重新评估和调整计划。
- en: Officially, Agile is not a method, but a collective term. Agile was born from
    several other methods to develop products (mostly software). Examples include
    XP, Scrum, the **Dynamic Systems Development Method** (**DSDM**), Adaptive Software
    Development, and Crystal. These methods share the common characteristic that they
    all aim for less bureaucracy during product and software development, and embrace
    change. In the 1980s and 1990s, these separate methods were developed by various
    experts, who eventually set up the Agile Manifesto in 2001\. These were mainly
    intended to prevent problems with the application of traditional waterfall methods.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 官方上，敏捷不是一种方法，而是一个集合术语。敏捷源于多种开发产品（主要是软件）的方法。例如，XP、Scrum、**动态系统开发方法**（**DSDM**）、适应性软件开发和
    Crystal 等。这些方法具有一个共同的特点，那就是它们都旨在减少产品和软件开发中的官僚主义，并接受变革。在80年代和90年代，这些独立的方法由各种专家发展，最终在2001年制定了敏捷宣言。这些方法主要是为了避免传统瀑布式方法应用中出现的问题。
- en: All of the big names from different Agile disciplines eventually decided to
    come together informally and discuss ways to help IT improve. The Agile Manifesto
    was drawn up during this meeting of 17 software developers. It took place from
    February 11 to February 13, 2001, at The Lodge in Snowbird, Utah. The name Agile
    was also chosen here. Word has it that the name lightweight method was on the
    table, but Agile was eventually chosen.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所有来自不同敏捷领域的大咖们最终决定非正式地聚在一起，讨论如何帮助IT改进。敏捷宣言就是在这次17名软件开发人员的会议中制定的。会议从2001年2月11日到2月13日在犹他州雪鸟山的The
    Lodge举行。敏捷这个名字也是在这里确定的。听说当时“轻量级方法”也在讨论中，但最终选择了敏捷这个名字。
- en: The initial model – waterfall
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始模型 – 瀑布模型
- en: 'When people talk about the origins of the waterfall model, it is often said
    that W. W. Royce introduced it in 1970 in the paper, *Managing the Development
    of Large Software Systems* ([http://www-scf.usc.edu/~csci201/lectures/Lecture11/royce1970.pdf](http://www-scf.usc.edu/~csci201/lectures/Lecture11/royce1970.pdf)).
    Royce himself actually believed in the iterative approach to software development
    and did not even use the term waterfall. Royce described the waterfall model as
    a method he thought was too extreme – and even an proposition doomed to fail:
    *"I believe in this concept, but the implementation described above is risky and
    invites failure"*, Royce wrote.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当人们谈论瀑布模型的起源时，常常说W. W. Royce在1970年通过论文《*Managing the Development of Large Software
    Systems*》([http://www-scf.usc.edu/~csci201/lectures/Lecture11/royce1970.pdf](http://www-scf.usc.edu/~csci201/lectures/Lecture11/royce1970.pdf))提出了这一模型。Royce本人实际上信奉迭代的软件开发方法，甚至没有使用“瀑布”这个术语。Royce将瀑布模型描述为一种他认为过于极端的方法，甚至是注定会失败的提议：“我相信这个概念，但上述描述的实现方式风险过高，容易失败，”Royce写道。
- en: In 1970, Royce thought that the waterfall method had to be seen as an initial
    concept, as he felt there were errors in the method. He published a document examining
    how the initial concept could be developed into a repeated method. In this enhanced
    model, there was more feedback between each phase than the previous phase, as
    we now often see in the current methods. Annoyingly for Royce, only the initial
    method got attention, and the criticism he had on this method was largely ignored.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在1970年，Royce认为瀑布方法必须视为一个初步概念，因为他觉得该方法存在一些错误。他发表了一篇文章，探讨了如何将这一初步概念发展成一个重复的模型。在这个增强的模型中，每个阶段之间有了更多的反馈，这与我们现在常见的方法更为相似。对Royce来说令人恼火的是，只有初步方法受到了关注，而他对这种方法的批评大部分被忽视了。
- en: 'Royce''s intention was to transform the model from the paper into an iterating
    model; still, the original method has been widely used and idealized. However,
    people who oppose this model think it is too basic and has no real practical use.
    The following diagram illustrates the waterfall model:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Royce的意图是将该模型从论文中的初步概念转变为一个迭代模型；然而，原始方法仍被广泛使用并被理想化。然而，反对这一模型的人认为它过于基础，缺乏实际的应用价值。下图展示了瀑布模型：
- en: '![](img/523b8e48-5f0e-40aa-8f99-7567fb2faaf7.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/523b8e48-5f0e-40aa-8f99-7567fb2faaf7.png)'
- en: 'The waterfall model consists of the following phases:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 瀑布模型包括以下几个阶段：
- en: '**Definition study/analysis (Requirements/analysis)**: In this phase, the only
    goal is to search for requirements. Some research is done to clarify the purpose
    of the software.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定义研究/分析（需求/分析）**：在此阶段，唯一的目标是寻找需求。会进行一些研究以明确软件的目的。'
- en: '**Basic design (Design)**: In this phase, what has emerged during the first
    phase becomes clearer. The customer wishlist is put on paper and the user interface
    of the program is already being considered. Generally speaking, in this phase,
    it is recorded what the future system must do.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基本设计（设计）**：在此阶段，第一阶段的成果变得更加清晰。客户的愿望清单被写在纸上，并且程序的用户界面已经开始考虑。一般来说，在此阶段，会记录未来系统必须完成的功能。'
- en: '**Technical design/detail design (Design)**: A prototype or minimal program
    can already be built using the basic design. During this phase, consideration
    is given to the possibilities of achieving the desired functionality technically.
    The options are already grouped in modules, functions, or programs.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**技术设计/详细设计（设计）**：此时可以使用基本设计构建一个原型或最简程序。在这个阶段，会考虑如何从技术上实现所需的功能。选项已经被分组为模块、功能或程序。'
- en: '**Construction/implementation (Coding)**: In the construction phase, the actual
    source code is written for the program.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建/实施（编码）**：在构建阶段，为程序编写实际的源代码。'
- en: '**To test (Testing)**: In the testing phase, it is checked whether the software
    is built properly according to the design. Here, errors can also emerge that have
    already been made in earlier stages. In the theoretical model, this should not
    happen.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试（Testing）**：在测试阶段，检查软件是否按照设计正确构建。在此阶段，也可能会出现已经在早期阶段做出的错误。在理论模型中，这不应该发生。'
- en: '**Integration (Testing)**: The system should now be ready and tested. However,
    it should also work with other pieces of software or hardware. There are special
    tests for this that make sure the integration works.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成（Testing）**：现在系统应该已经准备好并经过测试。然而，它还应该能够与其他软件或硬件配合工作。为此，有专门的测试来确保集成工作正常。'
- en: '**Management and maintenance (Maintenance)**: In order to ensure that the system
    continues to operate and function according to specification, maintenance will
    have to be carried out.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理与维护（Maintenance）**：为了确保系统按照规格继续运行和功能，必须进行维护。'
- en: To summarize, the waterfall model consists of different phases. Each phase has
    its own level that also determines the sequence. The highest level is executed
    first before the following, lower phases. This is equal to the natural effect
    of a waterfall, hence the name.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，瀑布模型由不同的阶段组成。每个阶段有自己的级别，并决定执行顺序。最高级别的阶段首先执行，然后是后续较低级别的阶段。这等同于瀑布的自然效应，因此得名。
- en: To mitigate the cons of the original method, several enhanced forms were developed.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了减轻原始方法的缺点，开发了几种增强形式。
- en: Royce's model
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 罗伊斯模型
- en: Royce's model describes a different waterfall model that can go back to previous
    phases. Often, it will become apparent at a particular phase that something went
    wrong in a previous phase (this will most commonly surface in testing phases).
    It should then be possible to go back to a previous phase easily. 99% of the time,
    changes to the design have to be made – nobody is perfect, so this model is more
    realistic. Nevertheless, Royce continued to emphasize the importance of good documentation
    for proper phase transitions.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 罗伊斯模型描述了另一种瀑布模型，它可以返回到之前的阶段。通常，在某个阶段会发现前一个阶段出了问题（这通常会在测试阶段显现）。然后，应该能够轻松回到之前的阶段。99%的情况下，设计需要进行修改——没有人是完美的，因此这个模型更现实。然而，罗伊斯仍然强调良好文档对于正确阶段过渡的重要性。
- en: 'The following diagram illustrates Royce''s model:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了罗伊斯模型：
- en: '![](img/98c6319d-e8ff-465a-9e5d-59ba7af3a9e1.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/98c6319d-e8ff-465a-9e5d-59ba7af3a9e1.png)'
- en: The sashimi model
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 刺身模型
- en: 'The sashimi model, designed by Peter Degrace, is one of the models discussed
    in the book, *Wicked **Problems, Righteous Solutions: A Catalog of Modern Software
    Engineering Paradigms*. This model assumes the same phases as the waterfall model,
    but that they can overlap (even more than once). This way of working means that
    fewer resources are wasted. In the following diagram, you can see how the phases
    can overlap. What matters is that there are no hard endings of phases or gateways.
    You can see the current time as an example. Another aspect of this figure is that,
    in contrast to the waterfall model, the lead time is also included in the model.
    This is to indicate that you can already start designing, even if the analysis
    is not yet complete. It also means that you can go back to the analysis in the
    design phase.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 刺身模型，由彼得·德格雷斯（Peter Degrace）设计，是书中讨论的模型之一，书名为 *《邪恶问题，正义解决方案：现代软件工程范式目录》*。该模型假设与瀑布模型相同的阶段，但这些阶段可以重叠（甚至多次重叠）。这种工作方式意味着更少的资源浪费。在下图中，您可以看到各个阶段是如何重叠的。关键在于，阶段之间没有硬性结束或关卡。您可以将当前时间作为一个例子。图中的另一个方面是，与瀑布模型不同，该模型还包含了提前时间。这意味着，即使分析还没有完成，也可以开始设计。这也意味着，您可以在设计阶段回到分析阶段。
- en: 'The following figure illustrates the sashimi model:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了刺身模型：
- en: '![](img/67b2349c-bad9-4f02-8d16-7c30d294be81.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67b2349c-bad9-4f02-8d16-7c30d294be81.png)'
- en: The V-model
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: V模型
- en: The V-model shows the phase transitions within software development, which offers
    the possibility of QA. For every phase transition, the developers and the customer
    make quality agreements about, for example, the designs. The V shape illustrates
    that at the bottom of the shape, after real implementation, there will be an ever-growing
    understanding of the problem that is being solved, and that initial ideas and
    requirements are tested against reality.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: V模型展示了软件开发中的阶段过渡，这为质量保证提供了可能性。在每个阶段过渡时，开发人员与客户会就设计等方面达成质量协议。V形状表明，在V形的底部，在实际实施后，对所解决问题的理解会不断加深，并且最初的想法和需求会与现实进行对比。
- en: 'The following diagram illustrates the V-model model:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了V模型：
- en: '![](img/51d17d27-69f6-4e91-99ad-46a086571321.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/51d17d27-69f6-4e91-99ad-46a086571321.png)'
- en: The sequential way of working that is presented here in these methods fits classic
    engineering methods. For a long time during the 1970s and 1980s, it was believed
    that software engineering as a discipline should work in a similar way to how
    engineers build skyscrapers. Skyscrapers are built by first creating a detailed
    architectural plan before construction workers can carry out the building phase.
    To create an architecture and a plan in such a way, you need a very clear understanding
    of what needs to be built. What is important here is that the upfront requirements
    are clearly outlined and do not change along the way. If the expectations of real-world
    engineering projects changed as rapidly as they do in software, however, nothing
    would get built.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这里呈现的工作方式符合经典的工程方法。在1970年代和1980年代的长时间里，人们认为软件工程应该像建造摩天大楼一样进行。摩天大楼的建造首先需要制定详细的建筑计划，建筑工人才能进行建设阶段。为了这样创建架构和计划，你需要非常清楚地理解需要建造的内容。这里重要的是，前期的需求被清晰列出，并且在过程中不会发生变化。然而，如果现实世界中的工程项目需求像软件一样迅速变化，什么也建不成。
- en: DSDM
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DSDM
- en: The DSDM is derived from the linear **Software Development Methodology** *(***SDM**)
    model, which originated in the 1990s. It was an answer to the problem that, in
    linear methods, the functionality to be developed is often available too late
    as a whole. If the functionality to be delivered can be divided into sub-functionalities,
    these sub-functionalities can be delivered separately. We call this incremental
    system development or step-by-step development. In the beginning you want to find
    out which functionality can be split off. This means that the first two phases
    from the waterfall approach are completed, but only when the partial functionalities
    are clear can these be developed step by step in parallel.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: DSDM源于线性**软件开发方法学** *(***SDM***)模型，起源于1990年代。它是对线性方法中常见问题的回答——在这些方法中，要开发的功能通常在整体完成时才可用。如果交付的功能可以拆分成子功能，那么这些子功能可以单独交付。我们称之为增量系统开发或逐步开发。最初，你需要找出哪些功能可以拆分出去。这意味着瀑布模型的前两个阶段已经完成，但只有当部分功能明确时，才能逐步并行开发。
- en: DSDM is more than just applying iterations at development stages. All of the
    remaining phases after analysis are iterative. In addition, the division of phases
    looks slightly different. In contrast to the linear development model, it is also
    possible to go back to previous phases.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: DSDM不仅仅是在开发阶段应用迭代。分析之后的所有阶段都是迭代的。此外，阶段的划分看起来稍有不同。与线性开发模型相比，它还可以返回到先前的阶段。
- en: 'The phases within DSDM are structured as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: DSDM中的各个阶段结构如下：
- en: Feasibility study
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可行性研究
- en: Business analysis
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 商业分析
- en: Functional model iteration
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 功能模型迭代
- en: Design and construction iteration
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计与构建迭代
- en: Implementation
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施
- en: Timeboxing is one of the core practices used in DSDM to control each stage,
    which is combined with better prioritization with MoSCoW. We will explain this
    in the following section.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 时间盒管理是DSDM中控制每个阶段的核心实践之一，它与MoSCoW方法中的更好优先级管理结合使用。我们将在接下来的部分进行解释。
- en: Timeboxing
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间盒管理
- en: In order to ensure that a project can be of service to the organization in time,
    timeboxes are used. For example, the functionality with the highest priority should
    always be delivered within a timebox. If there is time and space left, then there
    will be room for functionalities with a lower priority. A timebox is a time interval
    in which an intermediate product is delivered. During the project, the precise
    functionality is refined further. Due to growing insights and changing circumstances,
    the specifications of a functionality can also change.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保项目能及时为组织提供服务，采用时间框架。例如，优先级最高的功能应该始终在时间框架内交付。如果有时间和空间，低优先级的功能将有余地。时间框架是一个交付中间产品的时间间隔。在项目过程中，具体功能会进一步细化。由于不断增长的洞察力和变化的情况，功能的规格也可能发生变化。
- en: A timebox is prepared, in which must-haves, should-haves, and (possibly) could-haves
    are defined. This layout allows you to create room for manoeuvre without affecting
    the end time of the timebox. In other words, in the case of changing insight or
    emergencies, you will be able to re-prioritize. This may be at the expense of
    should-have and could-have system requirements. By applying MoSCoW, you make these
    choices explicit.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 准备一个时间框架，其中定义了必须拥有、应该拥有和（可能的）可以拥有的功能。这样的布局允许你在不影响时间框架最终时间的情况下创造操作空间。换句话说，在洞察变化或紧急情况发生时，你将能够重新调整优先级。这可能会以牺牲应该拥有和可以拥有的系统需求为代价。通过应用MoSCoW，你可以明确这些选择。
- en: With this technique, you can keep constant focus on functional requirements
    with the highest priority, monitor your time and budget, and still be able to
    act when insights change. Using this technique enables you to give priority to
    the system requirements that give a company the most benefit, and lower the priority
    for requirements that were derived from situations that may never occur. This
    also makes systems simpler in design—something that improves their maintainability.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种技术，你可以始终保持对最高优先级功能需求的关注，监控时间和预算，并且在洞察发生变化时仍然能够采取行动。运用这种技术可以让你优先考虑那些能为公司带来最大效益的系统需求，同时降低那些来自于可能永远不会发生的情况的需求的优先级。这也使得系统设计更简洁——这有助于提高其可维护性。
- en: The classification of requirements and wishes based on the MoSCoW classification
    also helps users to visualize the support for a project within an organization.
    There are now authors who think that you should consider projects as clusters
    of micro-projects. Every micro-project is a requirement or a wish with a certain
    priority. In many projects, the support from stakeholders starts to crumble when
    people are confronted with changes. If a project includes many must-haves, this
    risk will be smaller than when it largely consists of would-haves.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 基于MoSCoW分类的需求和愿望分类还有助于用户可视化项目在组织内的支持情况。现在有一些作者认为，你应该将项目视为微型项目的集群。每个微型项目是具有一定优先级的需求或愿望。在许多项目中，当人们面临变化时，来自利益相关者的支持开始崩溃。如果一个项目包含了许多必须拥有的功能，那么这种风险将比大部分由应该拥有的功能组成的项目要小。
- en: MoSCoW
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MoSCoW
- en: It often happens that a project is hindered by too many wishes from the user
    organization. However, a development strategy that provides feedback to the customer
    can prevent over-demanding the development organization. DSDM counteracts this
    by dividing the functional requirements and wishes into a number of categories
    in which the priority is indicated for each functionality.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，一个项目会因为用户组织提出过多的需求而受阻。然而，提供反馈给客户的开发策略可以防止开发组织的过度需求。DSDM通过将功能需求和愿望分为若干类别，并为每个功能指明优先级，从而解决了这一问题。
- en: DSDM uses the MoSCoW rules to determine the priorities for requirements and
    wishes.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: DSDM使用MoSCoW规则来确定需求和愿望的优先级。
- en: 'MoSCoW stands for:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: MoSCoW代表：
- en: '**Must-have**: This category has the highest priority, is guaranteed to be
    delivered, and counts as the engine of the information system.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**必须拥有**：这一类别优先级最高，确保交付，并且是信息系统的核心。'
- en: '**Should-have**: A necessary requirement where a (temporary) workaround is
    possible.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应该拥有**：一个必要的需求，但可以采取（临时）变通方法。'
- en: '**Could-have**: A requirement with a clear added value, but without it there
    is still a usable system.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可以拥有**：一个具有明确附加值的需求，但没有它，系统仍然是可用的。'
- en: '**Would-have (or want to have but won''t have this time around)**: This requirement
    can be missed, although it does not mean that it is not relevant; in the next
    increment, it can be a **must-have**.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**想要拥有（但这次不能拥有）**：这个需求可以被忽略，尽管它并不意味着不相关；在下一个增量中，它可以变成**必须拥有**。'
- en: Nowadays, DSDM is not extensively used. The last decade has seen other methods
    gain a lot more popularity, especially Agile methods such as Scrum, which we will
    discuss next.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，DSDM已不再广泛使用。过去十年里，其他方法变得更受欢迎，特别是像Scrum这样的敏捷方法，接下来我们将讨论它。
- en: Scrum
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Scrum
- en: The next lightweight model we will touch upon in this book is called Scrum,
    which, as of 2018, has been widely adopted outside the IT realm. It is not a method
    such as DSDM and can be better described as a framework. It uses the paradigm
    of a sports team (rugby, to be exact), where a group of people work together to
    achieve a goal.In the rugby game, a scrum drives the ball into the game. The scrum
    group consists of five to eight players who operate as a unit. In the IT world,
    it is a group of people who create business value through close cooperation and
    coordination.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中将要讨论的下一个轻量级模型是Scrum，截止到2018年，它已经被广泛应用于IT领域之外。Scrum不像DSDM那样是一个具体的方法，更准确的说它是一个框架。它借用了体育团队（特别是橄榄球）的范式，在这个范式中，一群人一起合作达成共同的目标。在橄榄球比赛中，Scrum是将球投入比赛的一种方式。Scrum小组由五到八名球员组成，他们作为一个整体协同工作。在IT领域，这就是一群人通过紧密合作与协调来创造商业价值。
- en: In Rugby, each player has a unique position; they play both roles in attack
    and defense, and they work as a team to get the ball to the other side. It can
    be compared to a situation in IT, where the degree of success of a scrum team
    depends on the different disciplines within the team and how they work together
    and coordinate with each other.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在橄榄球比赛中，每个球员都有独特的角色；他们既参与进攻又参与防守，作为一个团队协作将球带到对方场地。这可以与IT中的一种情况进行对比，Scrum团队的成功程度取决于团队内不同学科成员如何共同工作和相互协调。
- en: The Rugby comparison originates from a 1986 article from the Harvard Business
    Review, *The New Product Development Game*, where the authors Takeuchi and Nonaka
    introduced the term scrum in the context of product development. They argued that
    it would bring more speed and flexibility, and they based it on case studies done
    in several industries, notably the automotive industries.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 橄榄球的类比源于1986年《哈佛商业评论》上的一篇文章，*新产品开发游戏*，作者竹内和野中在文章中引入了Scrum这一术语，并将其应用于产品开发。他们认为这种方法能带来更高的速度和灵活性，并且基于多种行业的案例研究，尤其是汽车行业。
- en: In the early 1990s, Ken Schwaber and Jeff Sutherland started using scrum techniques
    in their companies, and eventually in 1995, they presented a paper describing
    the Scrum framework at a software design conference.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在1990年代初，Ken Schwaber和Jeff Sutherland开始在他们的公司中使用Scrum技术，并最终在1995年，在一次软件设计会议上介绍了Scrum框架。
- en: 'Scrum sets out the following values:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Scrum列出了以下价值观：
- en: '**Commitment**: The members must fully commit themselves to the project; it
    is not a part-time job.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**承诺**：团队成员必须全身心地投入到项目中，而不是兼职工作。'
- en: '**Focus**: embers should focus on what needs to be done in each sprints.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**专注**：团队成员应当专注于每个迭代冲刺中需要完成的任务。'
- en: '**Openness (Transparency)**: People must keep each other well informed about
    progress and possible problems.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开放性（透明性）**：团队成员必须保持相互之间的信息流通，及时告知进展和潜在问题。'
- en: '**Respect**: Members must respect those with a different background and expertise
    and trust each other''s good intent.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**尊重**：团队成员必须尊重背景和专业不同的人，并相信彼此的良好意图。'
- en: '**Guts**: Members must have the courage to say things, ask questions, and come
    up with new solutions.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**勇气**：团队成员必须有勇气表达观点、提问并提出新的解决方案。'
- en: Scrum works with multidisciplinary teams who prefer to work in one room so that
    consultation is easy. The team is supervised by a scrum master, who has a facilitating
    role. The product owner is the customer or a client, or a representative thereof.
    He or she specifies the desired results, usually in the form of user stories.
    These user stories are kept in a list, the product backlog, or the work stock.
    The product owner sorts the work stock for priority. The most important user stories
    are at the top.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Scrum适用于跨学科的团队，成员倾向于在同一个房间工作，以便于讨论和交流。团队由一名Scrum Master（敏捷教练）监督，其角色是促进团队协作。产品负责人是客户或客户的代表。他或她指定所需的结果，通常以用户故事的形式呈现。这些用户故事会保存在一个列表中，称为产品积压或工作存量。产品负责人根据优先级对工作存量进行排序。最重要的用户故事排在最上面。
- en: In Scrum, you work in sprints or iterations. These usually last from about a
    week to a month, with a duration of two weeks as the most common. Sprints are
    timeboxed. In other words, it is certain in advance how long a Sprint will last
    for and when it will end. At the beginning of a sprint, the user stories for that
    Sprint are determined and recorded in the sprint backlog.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Scrum 中，你在 Sprint 或迭代中工作。通常这些持续时间从一周到一个月不等，其中以两周为最常见。Sprint 是有时间限制的。换句话说，Sprint
    的持续时间和结束时间在事先就确定好了。在 Sprint 开始时，确定并记录该 Sprint 的用户故事，并将其列入 Sprint 待办事项列表。
- en: Sprints provide results that are as tangible as possible. This means that the
    software development will provide usable code, including integration, tests, and
    documentation, that is understandable for the customer or end user.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Sprint 提供尽可能具体的结果。这意味着软件开发将提供可用的代码，包括集成、测试和文档，以便客户或最终用户能够理解。
- en: At the end of a sprint, a sprint review takes place, where the result is shown
    to the product owner. In addition, an evaluation takes place within the team.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个 Sprint 结束时，会进行 Sprint 回顾，展示成果给产品负责人。此外，团队内部还会进行评估。
- en: Crystal methods
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Crystal 方法
- en: A Crystal method is a lightweight method with characteristics such as emphasis
    on people instead of processes and products, fast communication (preferably by
    working together in one room), the quick delivery of products, frequent and automatic
    testing, and regular evaluations.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Crystal 方法是一种轻量级方法，其特点包括强调人而非流程和产品、快速沟通（最好在同一个房间内共同工作）、快速交付产品、频繁且自动化的测试，以及定期评估。
- en: 'Unlike some other software development processes, Crystal is not a software
    development method, but a collection of methods and processes. This collection
    is called the Crystal Family. Crystal was invented and described by Alistair Cockburn.
    Each member of the Crystal Family is indicated with a color representing the weight
    of a method, where the following applies: the darker the color, the heavier the
    method. The color of the method is chosen on the basis of the size and severity
    of the project. The size is determined by the number of people participating in
    the project, and the severity is determined by the risk that choosing the method could
    cause systemic damage. The colors are, like real crystals, sorted from light to
    dark. Crystal clear is the smallest and lightest, followed by yellow, orange,
    orange web, red, maroon, blue, violet, and so on.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他一些软件开发流程不同，Crystal 不是一种软件开发方法，而是一系列方法和流程的集合。这个集合被称为 Crystal 家族。Crystal 是由
    Alistair Cockburn 发明并描述的。Crystal 家族中的每个成员都以颜色表示方法的重量，原则是：颜色越深，方法越重。方法的颜色是根据项目的大小和严重性来选择的。大小由参与项目的人数决定，严重性由选择该方法可能造成的系统性损害风险决定。这些颜色像真实的水晶一样，从浅到深排序。Crystal
    clear 是最小和最轻的，其次是黄色、橙色、橙色 web、红色、深红色、蓝色、紫色等。
- en: 'Although the Crystal methods differ from each other, they do have some similarities,
    which is why they are also called a family. They have three common priorities:
    safety, efficiency, and usability. Furthermore, they also have common characteristics,
    the three most important of which are the frequent delivery of (intermediate)
    products, feedback on improvements, and good communication.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Crystal 方法之间有所不同，但它们也有一些相似之处，这也是为什么它们被称为一个家族。它们有三个共同的优先事项：安全性、效率和可用性。此外，它们还具有共同的特征，其中最重要的三个是频繁交付（中间）产品、改进的反馈和良好的沟通。
- en: We have already discussed a team-based approach to product development with
    certain process steps, and now with Crystal methods, a lightweight Agile method
    that focuses on people within the team itself. There are also more radical methods
    that focus not only on people and process, but also on tooling and technical quality.
    We will discuss these XPmethods in the following section.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论过基于团队的产品开发方法，并具有一定的流程步骤，现在讨论的是 Crystal 方法，一种轻量级的敏捷方法，专注于团队内部的人。还有一些更为激进的方法，不仅专注于人和流程，还专注于工具和技术质量。我们将在下一节中讨论这些
    XP 方法。
- en: XP
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: XP
- en: One of the most important subcultures of the Agile movement is XP. The main
    founders of XP are Kent Beck, Ken Auer, Ward Cunningham, Martin Fowler, and Ron
    Jeffries. They developed XP during the **Chrysler Comprehensive Compensation**
    (**C3**) system project in 1996\. It is very popular nowadays, and this is reflected
    in the culture of software development but also in its ways of working and the
    toolset it uses. We believe GitLab is, in many ways, the tool once imagined for
    XP. It is, in fact, so profound that we have decided to dedicate an entire chapter
    to it to explain its relevance for GitLab.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷运动中最重要的子文化之一就是XP。XP的主要创始人有Kent Beck、Ken Auer、Ward Cunningham、Martin Fowler和Ron
    Jeffries。他们在1996年的**克莱斯勒综合补偿**（**C3**）系统项目中开发了XP。如今，它非常流行，这不仅体现在软件开发的文化中，也体现在其工作方式和所使用的工具集中。我们认为，GitLab在许多方面正是XP当初设想的工具。实际上，它的影响深远，以至于我们决定为其专门开设一整章，解释它与GitLab的相关性。
- en: 'XP takes its name from the fact that a number of proven development principles
    (so-called best practices) are carried through to the extreme. The optimal power
    of XP stems from the application of the 12 best practices of software development.
    The best practices are grouped into four groups: fine feedback, continuous process,
    shared knowledge, and the well-being of the developers.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: XP的名字来源于一系列被证明有效的开发原则（即所谓的最佳实践）被极限化的应用。XP的最大优势来源于12条软件开发最佳实践的应用。这些最佳实践分为四个组别：细致的反馈、持续的过程、共享的知识和开发人员的福祉。
- en: Fine-scale feedback
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 细粒度反馈
- en: One of the most important principles in XP is the usage of feedback mechanisms
    and trying to keep the feedback loops as small as possible. This starts at the
    planning stage, because feedback from a customer at this stage can already limit
    wasted time.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: XP中的一个重要原则是使用反馈机制，并尽量将反馈循环保持在最小。这个过程从规划阶段开始，因为在这个阶段得到客户的反馈可以有效地减少时间浪费。
- en: 'The fine-scale feedback group in XP includes four practices: planning game,
    pair programming, **test-driven development** (**TDD**), and whole team. We will
    discuss the feedback loop for each practice in the following sections.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: XP中的细粒度反馈组包括四个实践：规划游戏、结对编程、**测试驱动开发**（**TDD**）和全员参与。我们将在接下来的章节中讨论每个实践的反馈循环。
- en: Planning game
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规划游戏
- en: The planning takes place at the beginning of each iteration and consists of
    both release planning and iteration planning.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 规划在每个迭代的开始进行，包含发布规划和迭代规划两个部分。
- en: Release planning determines which functionality will be realized in which release.
    Both the developers and the users are present.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 发布规划决定了哪些功能将在何时的发布版本中实现。开发人员和用户都会参与。
- en: 'Release planning consists of the following three phases:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 发布规划包含以下三个阶段：
- en: '**Exploration phase**: Here, the users make a shortlist of the most important
    requirements for the new system. This happens in the form of user stories.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**探索阶段**：在这里，用户列出新系统最重要的需求。这是通过用户故事的形式进行的。'
- en: '**Commitment phase**: Here, it is decided which user stories will be included
    in the next release and when this release will be.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**承诺阶段**：在这里，决定哪些用户故事会包含在下一个发布版本中，并确定发布的时间。'
- en: '**Steering phase**: Here, the plan can be modified, and new stories added and
    others removed.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指导阶段**：在这里，计划可以被修改，新的故事可以被加入，其他的则可以移除。'
- en: Iteration planning is when user stories included in the release schedule for
    an upcoming Sprint are divided into tasks for the developers. No users are involved,
    only developers.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代规划是将纳入即将到来的Sprint发布计划中的用户故事分解为开发人员的任务。没有用户参与，只有开发人员。
- en: 'Iteration planning also consists of three phases; they are as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代规划还包括三个阶段，具体如下：
- en: '**Exploration phase**: Here, the stories are translated into tasks, which are
    then written on cards called task cards.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**探索阶段**：在这里，故事被转化为任务，然后写在称为任务卡的卡片上。'
- en: '**Commitment phase**: Here, the time taken to realize the tasks is estimated
    and the tasks are assigned to the developers (pairs).'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**承诺阶段**：在这里，估算实现任务所需的时间，并将任务分配给开发人员（结对）。'
- en: '**Steering phase**: Here, the tasks are carried out, and the result is compared
    with the original time schedule of the user story.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指导阶段**：在这里，任务被执行，并且结果与用户故事的原始时间表进行比较。'
- en: The purpose of this kind of planning is to ensure that a product can be delivered.
    It is not so much about delivering exact data as about delivering the product.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这种规划的目的是确保产品能够交付。重点不在于交付精确的数据，而在于交付产品。
- en: Release planning
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布规划
- en: During this part of the planning game, customers and developers try to find
    out what will be included in the next release of the software and when this will
    take place. The focus is on creating user stories.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个规划游戏的过程中，客户和开发人员试图找出下一次软件发布将包括什么内容以及何时发布。重点是创建用户故事。
- en: 'This part of the game consists of the following three phases:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏的这一部分由以下三个阶段组成：
- en: '**Exploration phase**: This is the process of gathering requirements and estimating
    the amount of time it will take to realize them. Activities in this phase includes
    the following:'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**探索阶段**：这是收集需求并估算实现这些需求所需时间的过程。此阶段的活动包括：'
- en: '**Writing a story (user story)**: Here, the users come up with a problem or
    wish; during a consultation, the developers will try to fully understand this
    problem. On this basis, a user story is written. This is done by the users, indicating
    what they expect from a system. It is important that developers do not interfere.'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编写用户故事**：在此，用户提出一个问题或需求；在咨询过程中，开发人员会尽量充分理解这个问题。在此基础上，编写用户故事。这是由用户完成的，表明他们对系统的期望。开发人员需要避免干预。'
- en: '**Estimating the user story (estimating a story)**: The developers estimate
    how much time it will take to make this. The developers can now also designate
    short examinations, called spikes, to investigate parts of the problem or the
    solution direction. These spikes are used to achieve better time estimates and
    are thrown away as soon as the problem and/or the solution is clear to everyone.'
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**估算用户故事**：开发人员估算完成此任务所需的时间。此时，开发人员还可以指定短期的检查（称为spikes），以调查问题或解决方案方向的某些部分。这些spikes用于获得更好的时间估算，并在问题和/或解决方案对每个人都清楚时被抛弃。'
- en: '**Splitting a user story**: In this phase, the story must be completely clear
    and all ambiguities must be cleared up before iterative planning can be started.
    If the developers cannot give a time estimate for the story due to lack of clarity,
    the story must be split. If the users have described all their wishes, they can
    continue with the concept of decision-making, which is known as the commitment
    phase.'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拆分用户故事**：在此阶段，故事必须完全清晰，所有歧义必须消除，才能开始迭代规划。如果开发人员由于不清楚而无法给出时间估计，故事必须被拆分。如果用户已经描述了所有的需求，他们可以继续进入决策阶段，这就是所谓的承诺阶段。'
- en: '**Commitment phase**: In this phase, we will find out what the costs are, what
    the benefits are, and what schedule consequences they have. We create four different
    lists based on the way we sort the items, which are as follows:'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**承诺阶段**：在此阶段，我们将找出成本、收益以及它们对进度的影响。我们根据排序方式创建四个不同的列表，具体如下：'
- en: '**Sorting by value**: Users put the user stories in order of what they consider
    important. They make the following three stacks:'
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按价值排序**：用户按他们认为重要的顺序排列用户故事。他们会创建以下三种堆栈：'
- en: '**Critical**: Without these stories, the system cannot work or has no value.'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关键**：没有这些故事，系统无法工作或没有价值。'
- en: '**Important**: User stories that are important to the company.'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重要**：对公司而言重要的用户故事。'
- en: '**Nice to have**: User stories in which less important characteristics are
    realized.'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可有可无**：用户故事中实现的较不重要的特性。'
- en: '**Sorting according to risk**: Here, the developers give an estimate of the
    risks and sort the story accordingly. All values ​​for the user story are added
    together, giving the user story a accumulated risk value of low (0-1), medium
    (2-4), or high (5-6). The following is an example of this:'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按风险排序**：在此，开发人员估算风险并相应地对故事进行排序。所有用户故事的值将加在一起，得到一个累计的风险值，可能是低（0-1）、中（2-4）或高（5-6）。以下是一个例子：'
- en: Completeness (do we have all the details about the table?)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 完整性（我们是否有关于表格的所有细节？）
- en: Full (0)
  id: totrans-119
  prefs:
  - PREF_UL
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完整（0）
- en: Incomplete (1)
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不完整（1）
- en: Unknown (2)
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未知（2）
- en: 'Vulnerability (are changes likely?):'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 脆弱性（变更是否可能？）：
- en: Low (0)
  id: totrans-123
  prefs:
  - PREF_UL
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 低（0）
- en: Medium (1)
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中等（1）
- en: High (2)
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高（2）
- en: 'Difficulty (how difficult is it to realize?):'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 难度（实现起来有多难？）：
- en: Simple (0)
  id: totrans-127
  prefs:
  - PREF_UL
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单（0）
- en: Standard (1)
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准（1）
- en: Difficult (2)
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 难（2）
- en: '**Determining the development speed (velocity)**: Here, the developers determine
    at what speed they can execute a project and sort items accordingly.'
  id: totrans-130
  prefs:
  - PREF_OL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确定开发速度（velocity）**：在此，开发人员确定他们能够以多快的速度执行项目，并根据此对项目进行排序。'
- en: '**Scope**: Here, it is determined which user stories will be realized in the
    coming release. This is the final sort. On this basis, the release date is determined.
    The sort should be according to the value for the users (business value).'
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**范围**：在这里，确定将在下一次发布中实现哪些用户故事。这是最终排序。基于此，确定发布日期。排序应该根据用户的价值（业务价值）进行。'
- en: '**Steering phase**: In this phase, the developers can steer the process together
    with the users. In other words, they can still change something, whether that
    be an individual user''s story, or the importance of another particular story.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**引导阶段**：在此阶段，开发者可以与用户一起引导流程。换句话说，他们仍然可以做出一些改变，不管是某个个别用户的故事，还是另一个特定故事的重要性。'
- en: Iteration planning
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 迭代规划
- en: 'Depending on the speed of the team, it can be determined how many story points
    the team can do per iteration. Iterations can last from one to three weeks. The
    focus here is on creating tasks and prioritizing them. The iterations also have
    the same phases as the earlier release planning, as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 根据团队的速度，可以确定每次迭代团队能完成多少个故事点。迭代可以持续一到三周。这里的重点是创建任务并对其进行优先级排序。迭代也具有与早期发布规划相同的阶段，如下所示：
- en: '**Exploration phase**: During the research phase of iteration planning, the
    user stories are divided into tasks, and how long a task will take is estimated.
    The main activities in this phase include the following:'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**探索阶段**：在迭代规划的研究阶段，用户故事被划分为任务，并估算每个任务的完成时间。此阶段的主要活动包括以下内容：'
- en: Translating the user story into tasks and writing them on task cards.
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将用户故事转化为任务，并将其写在任务卡片上。
- en: Adding or splitting tasks; in other words, if the developer cannot properly
    estimate how long a task will last because it is too big or too small, something
    will need to be altered.
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加或拆分任务；换句话说，如果开发者无法准确估算任务的持续时间，因为任务太大或太小，就需要进行调整。
- en: Estimating the task, where an estimation of a task's execution is produced.
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务估算，即对任务执行的估算。
- en: '**Commitment phase**: In the assignment phase of iteration planning, the following
    tasks are distributed among the developers:'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**承诺阶段**：在迭代规划的分配阶段，以下任务会在开发者之间进行分配：'
- en: 'A developer (programmer) accepts a task: Each developer takes a task for which
    they then become responsible.'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者（程序员）接受任务：每个开发者接受一个任务，并对其负责。
- en: 'The developer gives a time schedule: Because the developer is now responsible,
    they are now best able to give a time estimate.'
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者给出时间表：因为开发者现在已经负责该任务，他们是最能给出时间估算的人。
- en: The effective working time is determined, outlining the number of hours that
    a developer or programmer can develop during an iteration. (For example, in a
    40-hour working week, in which five hours of meetings are held, the effective
    working time becomes 35 hours.)
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定有效工作时间，列出开发者或程序员在一次迭代期间可以工作的小时数。（例如，在一个40小时的工作周中，如果有五个小时用于会议，那么有效工作时间就是35小时。）
- en: 'Balancing: Once all the tasks have been assigned, the number of hours each
    developer has received is also compared to how many hours they actually have available
    (this is also known as the load factor). The tasks may then be redistributed to
    ensure that each developer has roughly the same amount of work. If a developer
    has too much work, something will have to shift.'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平衡：一旦所有任务分配完毕，将比较每个开发者分配的小时数与他们实际可用的小时数（这也称为负载系数）。然后可以重新分配任务，确保每个开发者的工作量大致相同。如果某个开发者工作量过多，需要调整任务。
- en: '**Steering phase**: The execution of tasks is done during the execution, or
    steering phase, of iteration planning. There is a bit of a game element to this,
    but the following steps are advised:'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**引导阶段**：在迭代规划的执行阶段，任务的执行将在此阶段进行。这个阶段有点像游戏元素，但建议按照以下步骤进行：'
- en: '**Taking a task card**: Here, the developer gets a card with the description
    of one of the tasks they have registered for.'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**获取任务卡片**：在此，开发者会获得一张卡片，上面描述了他们注册的某个任务。'
- en: '**Finding a partner**: The developer looks for a partner to develop the task
    with.'
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**寻找合作伙伴**：开发者寻找一个合作伙伴共同开发该任务。'
- en: '**Designing the task**: If necessary, in this stage, a (short) design will
    be made.'
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设计任务**：如有必要，在此阶段将进行（简短的）设计。'
- en: '**Writing the unit test**: Before any programming, all tests must be ready.
    Preferably, these are automatic tests because they often have to be done every
    time source code is checked in.'
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编写单元测试**：在编写任何代码之前，所有的测试都必须准备好。最好是自动化测试，因为这些测试通常需要在每次源代码提交时进行。'
- en: '**Writing the code**: Here, the programmer or developer makes the program.'
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编写代码**：在这里，程序员或开发人员编写程序。'
- en: '**Testing the program**: The unit tests are performed.'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试程序**：执行单元测试。'
- en: '**Refactoring**: In this step, the refactoring rules are applied and the developers
    ensure their code meets the standards.'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重构**：在这一步骤中，应用重构规则，开发人员确保代码符合标准。'
- en: '**Doing functional and integration tests**: After the unit test, all possible
    other tests are run, such as integration tests, regression tests, and so on. The
    code must be adjusted in this step until the test succeeds.'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进行功能和集成测试**：在单元测试之后，所有可能的其他测试都要运行，例如集成测试、回归测试等。此步骤中代码必须进行调整，直到测试成功。'
- en: Pair programming
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结对编程
- en: XP states that, ultimately, everything revolves around code when software is
    crafted. So, if it is a good thing for developers to review code together, software
    should always be developed in pairs. In other words, pair programming can be defined
    by two people working behind one computer. Pair programming is often considered
    one of the most extreme and controversial aspects of XP because it is thought
    to be slower. However, research has shown that peer review and code inspection
    are the most powerful weapons against bugs—and these are much more powerful than
    systematic testing. These techniques are only used sparsely and often drum up
    great resistance among the programmers themselves, as well as managers who are
    afraid of an increase in working hours.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: XP指出，最终，所有的工作都围绕代码展开，软件开发中也是如此。所以，如果让开发人员一起审查代码是一件好事，那么软件开发应该始终以对的方式进行。换句话说，结对编程可以定义为两个人共同使用一台电脑进行工作。结对编程常被认为是XP中最极端和有争议的部分，因为它被认为效率较低。然而，研究表明，同行评审和代码检查是对抗漏洞最强大的武器—这些远比系统测试更为强大。这些技术通常只在稀疏情况下使用，并且通常会在程序员和管理者之间引起强烈反对，后者担心工作时间的增加。
- en: By enforcing the rule that all software development is carried out in pairs,
    which also change composition regularly, a collective sense of ownership arises,
    and peer review and code inspection become a natural part of the software process.
    As a result, the system ultimately delivered no longer consists of a collection
    of pieces of code tied together with strings, which are poorly maintainable.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 通过强制执行所有软件开发都以对的形式进行，且对的组成会定期变化，从而产生一种集体的责任感，同时同行评审和代码检查成为软件开发过程中的自然一部分。最终交付的系统不再是由一堆用代码串起来的代码片段组成，这些代码片段难以维护。
- en: 'There is another advantage to this way of working: there are always at least
    two people who fully understand every piece of code. The transference of knowledge
    to new colleagues happens more naturally, and a continuous training on the job
    takes place.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这种工作方式还有一个好处：总会有至少两个人完全理解每一段代码。知识的传递给新同事更加自然，且工作中的持续培训也得以进行。
- en: 'Some of the benefits of pair programming include the following:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 结对编程的一些好处包括：
- en: '**Better quality code**: Activities such as reading code out loud and discussing
    the thought process behind it helps others to understand its complexity, as well
    as giving developers the opportunity to clarify any details and prevent irrevocable
    choices from being made.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更高质量的代码**：像大声朗读代码和讨论背后的思维过程等活动有助于他人理解代码的复杂性，同时也给开发人员机会澄清细节，并防止做出不可逆的选择。'
- en: '**Better knowledge-sharing within a team**: This is particularly useful when
    one of the developers is not yet familiar with the software component cooperates
    with someone who is.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**团队内部更好的知识共享**：这在其中一位开发人员还不熟悉软件组件时，与熟悉该组件的开发人员合作特别有用。'
- en: '**Improved knowledge transfer**: This is helped by developers automatically
    learning new techniques and skills from experienced team members.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**改进知识传递**：通过开发人员从经验丰富的团队成员那里自动学习新技术和技能来帮助实现这一目标。'
- en: '**Less management overhead**:This is aided by less individual control because
    developers are working in teams of two or more.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更少的管理开销**：这得益于更少的个人控制，因为开发人员是以两人或更多人的团队合作的。'
- en: '**Continued focus**: Pair programming can be particularly helpful if one member
    of the pair has their work interrupted for any reason.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续专注**：如果成对编程中的一个成员因任何原因被打断，成对编程尤其有帮助。'
- en: So, are there any drawbacks to pair programming? Currently, it is not known
    exactly what the costs and benefits of pair programming are, but initial research
    indicates that the duration of a task increases by an average of 15% when a pair
    is working over an individual. Whether that cost can be justified by higher code
    quality is debatable.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，成对编程有缺点吗？目前，成对编程的成本和收益尚不明确，但初步研究表明，当一对人一起工作时，任务的持续时间平均增加了15%。这种成本是否能够通过更高的代码质量来证明其合理性，仍然存在争议。
- en: Test Driven Development
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试驱动开发
- en: In **Test Driven Development** (**TDD**), testing is carried out before any
    programming. TDD relies on the premise that if testing is good, the test code
    should be written before a line of code (functionality) is.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在**测试驱动开发**（**TDD**）中，测试是在编程之前进行的。TDD依赖于这样的前提：如果测试做得好，测试代码应该在编写任何代码（功能）之前就写好。
- en: Within XP, the writing of automatic unit tests occupies an important place,
    as writing unit tests is done before an actual program is started. In TDD, the
    programmer makes one or two tests, writes a piece of the program, makes an additional
    test case, reworks the program until the new test passes, the designs a new test,
    and so on.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在XP中，自动单元测试的编写占据了重要位置，因为编写单元测试是在实际编程开始之前进行的。在TDD中，程序员首先编写一个或两个测试，编写一部分程序，增加一个新的测试用例，不断修改程序，直到新的测试通过，再设计新的测试，依此类推。
- en: The advantage of this process is that the programmer is obliged to think about
    the functionality and the exceptions that their program should take into account;
    they think about what the program should do first and how the program will work
    second. In other words, the tests capture the required functionality. It is therefore
    important that every program only has enough functionality to make the test work.
    If all tests pass, the program meets the previously-defined requirements, which
    are defined in the written and successful unit tests.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这一过程的优势在于，程序员必须思考程序应该具备的功能和需要考虑的异常；他们先考虑程序应该做什么，再考虑程序如何运作。换句话说，测试捕获了所需的功能。因此，每个程序必须仅具有足够的功能，以使得测试通过。如果所有测试都通过，程序就满足先前定义的要求，这些要求是通过已编写且成功的单元测试来定义的。
- en: When refactoring is required, the already-written unit tests are therefore a
    guarantee that changes will not cause undesirable side effects in the operation
    of a program.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要重构时，已经编写好的单元测试就成了保证，确保更改不会导致程序运行中出现不良副作用。
- en: Should it be necessary to expand a program with new functionality, the first
    thing to do is to start writing new unit tests that will define the new functionality
    to be written. This new functionality is only realized when both the new and the
    old unit tests all succeed.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要为程序扩展新功能，首先要做的就是编写新的单元测试，定义要编写的新功能。只有当新旧单元测试都通过时，这个新功能才算实现。
- en: If a bug is found at a later stage during a functional test, writing a unit
    test that brings this bug to light is the first port of call. A bug is therefore
    not a fault in the program, but rather the result of an insufficient test.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在功能测试的后期发现了一个bug，首先要做的是编写一个单元测试，揭示这个bug。因此，bug不是程序的错误，而是测试不充分的结果。
- en: 'To summarize, a software development project that is carried out using TDD
    does the following:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，使用TDD进行的软件开发项目包括以下几点：
- en: Starts with one unit test that describes one feature of the program
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从一个描述程序某个功能的单元测试开始
- en: Runs the test, which should ultimately fail because there is no code
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行测试，最终应该会失败，因为没有代码
- en: Utilizes the minimum amount of code needed to make a test pass
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用最少量的代码使得测试通过
- en: Rewrites code to make it simpler
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重写代码，使其更简洁
- en: Repeats the process with more tests
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过更多的测试来重复这个过程
- en: Using this approach, the defect rate should go down after time, despite more
    time being needed to get things started. Most teams report that once they have
    reached the end stages of a project, the upfront testing cost is paid back and
    they work quicker in a project's final phases. Code that is developed this way
    tends to be of higher quality than otherwise, because for testing to work, you
    are forced to create code that is high in cohesion but low in coupling. This keeps
    code that works on the same behavior and keeps properties in the same class, as
    well as keeping modules as isolated as possible with clear interfaces to other
    code.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法，尽管开始时需要更多时间，但随着时间的推移，缺陷率应该会下降。大多数团队报告称，一旦项目进入后期阶段，前期的测试成本就会得到回报，而且在项目的最后阶段工作会更加高效。通过这种方式开发的代码往往质量更高，因为为了确保测试有效，你必须编写高度内聚而低耦合的代码。这使得处理相同行为的代码保持在同一个类中，并且将模块尽可能隔离，且与其他代码的接口清晰。
- en: This approach may sound quite simple, but in practice, it's quite hard, as developers
    may forget to run tests. However, this problem can be easily fixed by setting
    up a project template in a CI/CD environment with pre-configured tests, where
    tests are run at every commit or push. If there are software engineers who are
    prone to overdo testing, it is a good idea to agree on the number of tests, and
    how far they will go, beforehand. Don't test constructs that are simple, such
    as accessors, for instance. On the other hand, be careful not to over-simplify
    your tests, such as by creating tests but no assertions.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法听起来可能很简单，但在实际操作中却相当困难，因为开发人员可能会忘记运行测试。然而，这个问题可以通过在CI/CD环境中设置一个带有预配置测试的项目模板来轻松解决，在每次提交或推送时都会运行测试。如果有些软件工程师容易过度测试，最好事先约定测试的数量及其深度。例如，像访问器这类简单的构造不需要测试。另一方面，要小心不要过度简化测试，比如创建了测试却没有断言。
- en: Team culture and agreements are very important for testing. If some team members
    aren't on board, you will have conflicts. Also ensure that any test-templating,
    automation, or suites are well supported, or your tests will break. (This also
    means that several people should have knowledge of these products.)
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 团队文化和协议对于测试非常重要。如果有些团队成员不认同，你将面临冲突。同时，确保任何测试模板、自动化工具或测试套件都得到充分支持，否则你的测试将无法正常运行。（这也意味着，应该有多人了解这些工具。）
- en: In essence, TDD can really improve the quality of your software. This is especially
    true if all tests are automated via a continuous process, which we will discuss
    in the following section.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，TDD（测试驱动开发）可以真正提高软件质量。特别是当所有测试都通过持续过程自动化时，这一点尤其如此，接下来的章节将进一步讨论这一点。
- en: Continuous processes
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续过程
- en: Continuous processes are a group of processes that are envisioned to run all
    the time with no interruptions. There is also no need for batching, which often
    slows down XP as a whole.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 持续过程是一组旨在持续运行且没有中断的过程。同时也不需要批处理，因为批处理通常会减慢XP的整体进度。
- en: Continuous integration
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成
- en: If integration and integration tests are important, then code should be integrated
    as often as possible – preferably, several times a day. This will prevent your
    team from working with different copies locally and encourages them to work alongside
    each other. Any integration problems will also become immediately visible. GitLab
    CI was created for this reason, and was introduced in [Chapter 1](384dcfd9-ef7f-470d-89dc-3af7502a2d09.xhtml),
    *Introducing the GitLab Architecture*.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 如果集成和集成测试很重要，那么代码应尽可能频繁地进行集成——最好是一天多次。这将防止你的团队在本地使用不同的副本，并鼓励他们一起工作。任何集成问题也会立刻显现出来。GitLab
    CI就是为此而创建的，且在[第1章](384dcfd9-ef7f-470d-89dc-3af7502a2d09.xhtml)中介绍了*GitLab架构概述*。
- en: One of the key reasons CI is used is to prevent integration problems, which
    can occur if developers work on their own for too long. Imagine the phenomenon
    of integration hell, where at the last minute before release, a developer merges
    a big chunk of code that then introduces conflicts.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 使用持续集成（CI）的一个关键原因是防止集成问题，如果开发人员长时间独立工作，可能会发生这种问题。想象一下集成地狱的现象，在发布前的最后一刻，开发人员合并了一大块代码，结果引发了冲突。
- en: Continuous integration has always been coupled with TDD in the XP world. Before
    integration tests are run, it helps if code is thoroughly tested locally, preferably
    by using unit tests. This way of testing code in your local environment helps
    uncover bugs before they break other people's code. Note that you can also hide
    features that are not yet complete by using feature toggles, which disable certain
    behaviors in code.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在XP世界中，持续集成始终与TDD相结合。在运行集成测试之前，通过本地彻底测试代码会有所帮助，最好是通过单元测试进行。在本地环境中测试代码的这种方式有助于在破坏他人代码之前发现错误。请注意，您还可以使用功能切换来隐藏尚未完成的功能，这会禁用代码中的某些行为。
- en: In some cases, build servers are used for other parts of the software **Quality
    Assurance** (**QA**) process, including running additional security tests, measuring
    performance, and even generating documentation. This behavior of shifting responsibilities
    to the build server means that a lot of QA work that was traditionally done after
    development work can instead be performed during development, with the bonus of
    immediate feedback. This feedback loop is a big driver of the continuous process
    of developing a software product, with the other being automation.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，构建服务器用于软件**质量保证**（**QA**）过程的其他部分，包括运行额外的安全测试、测量性能，甚至生成文档。这种将责任转移到构建服务器的行为意味着许多传统上在开发后完成的QA工作现在可以在开发过程中执行，同时还能获得即时反馈的好处。这种反馈循环是推动软件产品持续开发过程的重要驱动因素之一，另一个是自动化。
- en: Automation has been further extended to create **Continuous Delivery** (**CD**),
    by making the deployment of software part of the automation. To make this possible
    and run quickly without issue, the code in the main trunk or branch should always
    be in a state so that it can be deployed.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化进一步扩展到创建**持续交付**（**CD**），通过使软件部署成为自动化的一部分。为了使这一切成为可能并快速运行而没有问题，主干或分支中的代码应始终处于可部署状态。
- en: Every element of building a software product that can also be automated is eligible
    to be part of the CI process, especially when it's particularly complex. Automating
    these stages is one of the reasons CI/CD exists.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 构建软件产品的每个可以自动化的元素都有资格成为CI过程的一部分，尤其是在特别复杂的情况下。自动化这些阶段是CI/CD存在的原因之一。
- en: Refactoring
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构
- en: An important technique that differentiates XP from traditional development methods
    is refactoring, which is the continuous rewriting of program code in small, precisely-measured
    steps without affecting any visible functionality. In short, refactoring adds
    nothing to the functionality, but simplifies the design. By regularly executing
    rewriting steps, the overall effect is often astonishing.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 与传统开发方法不同的一项重要技术是**重构**，这是在不影响任何可见功能的情况下，通过小而精确的步骤连续重写程序代码。简而言之，重构不会增加功能，但简化了设计。通过定期执行重写步骤，总体效果往往令人惊讶。
- en: In the meantime, some 70 rewrite rules have been discovered and documented.
    They carry names such as introduce null object, replace temp with query, and replace
    conditional with polymorphism. The preconditions for the successful application
    of refactoring is that there are unit tests available that can be carried out
    automatically after every rewriting step to ensure that the functionality has
    not changed. For example, for Smalltalk, there is now a refactoring browser, with
    which rewriting rules can be applied automatically and without the user having
    to worry too much about accuracy. Refactoring is often used in preparation for
    implementing an extension or a change in functionality.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，已经发现并记录了大约70条重写规则。它们具有诸如引入空对象、用查询替换临时变量和用多态替换条件等名称。成功应用重构的先决条件是有可用的单元测试，可以在每个重写步骤后自动进行，以确保功能未发生变化。例如，对于Smalltalk，现在有一个重构浏览器，可以自动应用重写规则，用户无需过多担心准确性。重构经常用于准备实施扩展或功能变更。
- en: What is not meant with refactoring is the rewriting of code, bug-fixing, or
    changing the user interface. Another danger of refactoring is that with the absence
    of good automated tests, you may introduce regression errors.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 重构并不意味着重写代码、修复错误或更改用户界面。重构的另一个危险是，在缺乏良好的自动化测试的情况下，可能会引入回归错误。
- en: After some time and experience using this technique, teams report considerable
    improvements in the length of the code, less duplication, better coupling and
    cohesion, and reduced cyclomatic complexity. For people new to your software,
    this makes it easier to learn. For teams, it helps to think collectively about
    the general design of a project, and to understand why certain decisions have
    been made. Usually, this also relies on the introduction of certain reusable components
    and modules.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用这种技术一段时间并积累经验后，团队报告说代码长度有了显著改善，重复度减少，耦合和内聚性更好，环路复杂度降低。对于新接触你软件的人来说，这让学习变得更容易。对于团队来说，它有助于集体思考项目的整体设计，并理解为什么做出某些决策。通常，这也依赖于引入某些可重用的组件和模块。
- en: Short iterations
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 短期迭代
- en: Software is regularly delivered to the customer for review in releases of limited
    size; if short iteration strokes are good, you should therefore make them very
    short. We're talking seconds, minutes, or hours, instead of weeks, months, and
    years. An average iteration of XP takes two weeks, although according to [extremeprogramming.org](http://www.extremeprogramming.org/),
    it can vary from one to three weeks.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 软件定期以有限的版本交付给客户进行评审；如果短期迭代有效，那么你应该使其非常短。我们说的是秒、分钟或小时，而不是周、月或年。XP 的平均迭代周期为两周，尽管根据
    [extremeprogramming.org](http://www.extremeprogramming.org/) 的说法，它可以从一周到三周不等。
- en: 'The XP cycle consists of six phases: Exploration, Planning, Iterations to Release,
    Production, Maintenance, and Death.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: XP 循环包括六个阶段：探索、规划、迭代发布、生产、维护和死亡。
- en: For Agile projects, an iteration is a specific time period during which development
    takes place. This is called timeboxing. This period varies from project to project,
    but is usually between one and four weeks, and is often defined for each project.
    A typical Agile approach would be that a project consists of several iterations,
    with a short phase of planning at the beginning and a closing phase at the end.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 对于敏捷项目，迭代是一个特定的时间段，期间进行开发。这被称为时间框定。这个时间段因项目而异，通常在一到四周之间，并且通常为每个项目定义。典型的敏捷方法是项目由多个迭代组成，开始时有一个简短的规划阶段，结束时有一个收尾阶段。
- en: Iterations are mostly classified in work weeks that start on a Monday and end
    on a Friday. After a while, the fixed term of the iteration makes it easier to
    assess how long a project will take.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代通常按工作周分类，工作周从星期一开始，到星期五结束。一段时间后，迭代的固定期限使得评估项目所需时间变得更加容易。
- en: The iteration timebox in the Scrum methodology is called a Sprint, which is
    of course a reference to Rugby. In XP, they are called weekly cycles. To most
    people, the word iteration means repetition or even multiple repetitions; when
    used in the Agile context, it means a repeated process.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: Scrum 方法中的迭代时间框被称为 Sprint，当然，这个名字来自于橄榄球。在 XP 中，它们被称为每周周期。对大多数人来说，迭代意味着重复或多次重复；但在敏捷开发的语境中，它指的是一个重复的过程。
- en: Everybody owns the code
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 每个人都拥有代码
- en: Note that every developer has equal rights to all aspects of a program's code.
    If the design is good, make it part of everyone's daily work and improve the design
    step by step as soon as the need arises. If architecture is so important, let
    everyone work on developing it. This concept encourages everyone to contribute
    and take responsibility.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，每个开发者对程序代码的所有部分拥有平等的权利。如果设计良好，就让它成为每个人日常工作的组成部分，并在需要时逐步改进设计。如果架构如此重要，就让每个人都参与到开发中。这一概念鼓励每个人贡献并承担责任。
- en: Shared understanding
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 共享理解
- en: The values in a group are mostly to do with perception. To be efficient and
    effective as a group, you have to agree on certain points and share values and
    a common understanding.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 小组中的价值观大多与感知有关。要作为一个小组高效且有效，你必须在某些方面达成一致，并共享共同的价值观和理解。
- en: Coding standards
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编程标准
- en: To have a shared understanding you need to have some rules. There are coding
    standards that are known and used by everyone. It really helps if source is consistently
    formatted. That way everyone can read it and change it. Speak the same language
    in your code files.  It will also help in ensuring collective ownership of the
    codebase.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 要达成共享的理解，你需要制定一些规则。有一些编程标准是大家都知道并使用的。如果源代码格式一致，真的很有帮助。这样，大家都可以阅读并修改它。在代码文件中讲相同的语言。这也有助于确保代码库的集体所有权。
- en: Simple design
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单设计
- en: If the code belongs to all developers in a group and everyone can change everything,
    it should be possible for them to do so. Keep the design as simple as possible.
    XP works a lot with the **Keep It Short and Simple** (**KISS**) principle. In
    other words, for a system to be easy to change, the design should be as simple
    as possible. This is easier said than done, however.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 如果代码属于一个小组中的所有开发者，并且每个人都可以修改一切，那么他们就应该能够做到这一点。保持设计尽可能简单。XP 大量使用**保持简洁明了**（**KISS**）原则。换句话说，系统要易于修改，设计应该尽可能简单。然而，这说起来容易做起来难。
- en: Traditional development methods have learned to think ahead and to always think
    about functionality in a design that might have to be realized in the future,
    but these methods are based on the assumption that costs for changes increase
    exponentially. This is why XP is always trying to choose the simplest design to
    enable a functionality that must now be realized. Ideally, any future expansions
    can be implemented with XP without the usual extra costs. It also turns out that,
    all too often in the realization of a well thought-out design, it does not reflect
    current requirements. This may happen either because certain details have been
    overlooked during analysis and design, or because requirements have been adjusted.
    With XP, design does not come first, but instead follows the code.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的开发方法学会了提前思考，并始终考虑可能在未来实现的功能，但这些方法假设变更的成本会呈指数增长。因此，XP 总是试图选择最简单的设计来实现必须实现的功能。理想情况下，任何未来的扩展都可以通过
    XP 实现，而不会产生通常的额外成本。事实证明，在实现经过深思熟虑的设计时，它往往并不反映当前的需求。这可能是因为在分析和设计过程中忽视了某些细节，或因为需求发生了变化。在
    XP 中，设计并不是优先的，而是紧随代码之后。
- en: System metaphor
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统隐喻
- en: All team members, including developers and users or customers, share a common
    view on the system (known as a metaphor); everyone must be able to describe the
    system in simple words. The use of naming conventions should also contribute to
    this.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 所有团队成员，包括开发者、用户或客户，应对系统有一个共同的看法（称为隐喻）；每个人都必须能够用简单的语言描述系统。命名规范的使用也应有助于这一点。
- en: As we have discussed, the final takeaway is that when working with XP, the human
    element is still the most important one. Is everyone talking about the same things,
    for example? Do they all think the right priorities are set? Are they able to
    create software that works and is understandable? This human element is also one
    of the driving forces behind DevOps, the spillover of Agile thinking from software
    development to IT operations.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所讨论的，最终的关键点是，在使用 XP 时，人的因素仍然是最重要的。例如，大家是否在讨论相同的内容？他们是否都认为设定了正确的优先级？他们是否能够创建出既有效又易于理解的软件？这一人类因素也是
    DevOps 背后的驱动力之一，它是敏捷思维从软件开发到 IT 运维的延伸。
- en: The DevOps movement
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps 运动
- en: The term DevOps originated in Belgium around the end of the last decade, as
    a result of the so-called DevOps days. These days were meant to bring together
    IT experts from both development and management operations. A DevOps team was
    initially defined as a multidisciplinary team that is fully responsible for the
    management and CD of a service. Think of Amazon and Google as companies that use
    these kinds of teams; they release dozens of changes every day.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 这个术语起源于比利时，大约在上个十年末期，由所谓的 DevOps 日活动催生。这些活动旨在将开发和管理操作的 IT 专家汇聚一堂。最初，DevOps
    团队被定义为一个多学科团队，负责一个服务的管理和持续交付。像亚马逊和谷歌这样的公司就使用这种团队，他们每天都会发布数十个变更。
- en: 'This way of working is not yet standardized in big organizations—ITIL and PRINCE2
    still reign, and the Information Technology (IT) department is desperately trying
    to deliver services with value. The way in which these services are provided is
    difficult to maintain in the current situation where IT is still often seen as
    a cost item. This is caused by the following:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这种工作方式在大组织中尚未标准化——ITIL 和 PRINCE2 仍然占主导地位，信息技术（IT）部门正在拼命尝试提供有价值的服务。这些服务的提供方式在当前的环境中难以维持，因为
    IT 仍然常常被视为一个成本项目。造成这种情况的原因有：
- en: The way of organizing organizations as a collection of independent silo's
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将组织作为一组独立的孤岛来组织
- en: A focus on creating process excess (too many rules set in stone)
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 专注于创建流程过剩（制定太多固定的规则）
- en: Not defining clear **Key Performance Indicators** (**KPIs**) for measuring performance.
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有定义清晰的**关键绩效指标**（**KPI**）来衡量绩效。
- en: The technologies in these silos are not compatible, whereas for a successful
    business-IT alignment, one coherent chain is needed.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这些孤立的技术在这些领域中是不兼容的，而对于成功的业务与IT的对齐，需要一个统一的链条。
- en: In addition, we are now seeing that customers are increasingly asking for the
    fast delivery of a new functionality. This includes the quick resolution of incidents,
    short lines of communication, and excellent quality requirements in their IT organization.
    Using the old ways of organizing IT in an organization, processes, working methods,
    attitude, behavior, and the required performance and results are not being sufficiently
    realized. A famous quote attributed to Albert Einstein, that "*the definition
    of insanity is doing the same thing over and over again and expecting a different
    result"*, seems to increasingly apply to IT. It is time, therefore, to fundamentally
    reconsider the setup of its organizations.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们现在看到客户越来越多地要求快速交付新功能。这包括快速解决事件、简化沟通渠道以及在IT组织中的卓越质量要求。使用传统的组织方式，在组织中，流程、工作方法、态度、行为以及所需的绩效和结果并未得到充分实现。爱因斯坦被引用的一句名言是：“*疯狂的定义是一次又一次地重复同样的事情，并期待不同的结果*”，似乎越来越适用于IT。因此，现在是彻底重新考虑其组织架构的时候了。
- en: 'The following diagram illustrates the DevOps process:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表说明了DevOps流程：
- en: '![](img/d888abfd-d7aa-4880-aeb7-2464c5b1c5fc.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d888abfd-d7aa-4880-aeb7-2464c5b1c5fc.png)'
- en: History of the movement
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运动的历史
- en: 'The term DevOps still causes a lot of confusion in many places. As a movement,
    it is still young, but it is largely based on common sense and experiences from
    the past. DevOps teams appeared from an effort by companies to respond to changes
    in the market. The new DevOps approach has been further developed with the aim
    of releasing higher-quality software to customers faster and more frequently.
    A brief timeline of DevOps is as follows:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps这个术语在许多地方仍然造成了许多混淆。作为一种运动，它仍然很年轻，但它主要基于常识和过去的经验。DevOps团队的出现是公司为了应对市场变化而做出的努力。新的DevOps方法旨在更快、更频繁地向客户发布更高质量的软件。DevOps的简要时间线如下：
- en: '**2007**: During the migration of a data center for the Belgian government,
    Patrick Debois is frustrated by the many conflicts between developers and system
    administrators. This makes him think.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**2007**：在比利时政府数据中心迁移期间，帕特里克·德博亚斯对开发人员和系统管理员之间的许多冲突感到沮丧。这让他开始思考。'
- en: '**2008**: At the Agile Conference in Toronto, software developer Andrew Shafer
    is poised to give a session about Agile infrastructure. He decides to skip it
    because he thought there were no attendees, but Debois was going to attend. Later,
    Debois tracks down Shafer for a wide-ranging hallway conversation. Based on their
    talk, they form the Agile Systems Administration Group.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**2008**：在多伦多的敏捷大会上，软件开发者安德鲁·沙弗准备就要进行关于敏捷基础设施的演讲。他决定跳过，因为他认为没有听众，但德博亚斯确实打算参加。后来，德博亚斯找到沙弗进行了一场广泛的走廊谈话。根据他们的交谈，他们成立了敏捷系统管理组。'
- en: '**2009**: Two Flickr employees, John Allspaw and Paul Hammond, make the case
    to test, build, and deploy responsive, fresh software in a bid to make operations
    and development integrated and transparent. The first DevOps days take place in
    Gent, Belgium. The conference takes place on October 30 with an impressive collection
    of developers, system administrators, experts, and others. When the conference
    ends, ongoing discussions move over to Twitter. To create a memorable hashtag,
    Debois shortens the name to #DevOps.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**2009**：两名Flickr员工约翰·奥尔斯波和保罗·哈蒙德提出测试、构建和部署响应迅速的新软件，以使运营和开发集成和透明化。第一届DevOps大会在比利时根特举行。会议于10月30日举行，吸引了大量开发者、系统管理员、专家等。会议结束后，持续的讨论转移到了Twitter上。为了创建一个令人难忘的标签，德博亚斯将其缩短为#DevOps。'
- en: '**2010**: This is when the first ever DevOps days were organized in the US,
    carried out with the help of John Willis (author of the famous book, *The Phoenix
    Project*), along with early proponents of DevOps. The event soon becomes a global
    series of conferences that are community-organized and are the major force driving
    the DevOps community forward.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**2010**：这是在美国举办的第一届DevOps大会，由约翰·威利斯（著名书籍《凤凰项目》的作者）及DevOps的早期倡导者共同组织。这一事件很快成为一个全球系列的由社区组织的会议，推动着DevOps社区的发展。'
- en: '**2011**: The community of DevOps starts to use open source tools, such as
    Vagrant, that can leverage technologies such as Chef and Puppet.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**2011**：DevOps社区开始使用开源工具，如Vagrant，这些工具可以利用Chef和Puppet等技术。'
- en: '**2012**: The presentation development segment grows rapidly and becomes focused
    on innovation. There are now various DevOps days that suddenly pop up in a number
    of countries.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**2012**：演示文稿开发领域迅速增长，并开始集中于创新。现在，许多国家突然出现了各种DevOps日活动。'
- en: '**2014**: Some of the biggest companies worldwide begin to use the DevOps method
    in their organization, including LEGO and Nordstrom.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**2014**：全球一些最大公司开始在其组织中使用DevOps方法，包括LEGO和Nordstrom。'
- en: Today, DevOps is embraced across the world by a number of businesses; small,
    big, and private businesses benefit from DevOps. DevOps can bring out the best
    results in the long-run for any business and contribute to its success.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，全球许多企业都在拥抱DevOps；无论是小型、大型还是私人企业，都从DevOps中受益。DevOps可以为任何企业带来长期的最佳结果，并有助于其成功。
- en: However, an organization is not able to switch over to DevOps quickly – changing
    processes in an organization can have a major impact on its culture and needs
    time. A good way to find out where you might be in this journey is to use a maturity
    model. When using a model to represent reality, you can start to simplify the
    problem, instead of being overloaded by the amount of solutions and tools that
    are available. If you know where you are in the maturity model, you can determine
    where you want to be, and then plan your journey.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，组织不可能迅速切换到DevOps——改变组织中的流程可能会对其文化产生重大影响，并且需要时间。找出你在这段旅程中可能处于何种阶段的一个好方法是使用成熟度模型。当使用模型来表示现实时，你可以开始简化问题，而不是被可用的解决方案和工具数量所困扰。如果你知道自己处于成熟度模型的哪个位置，你就可以确定你想要到达的位置，然后规划你的旅程。
- en: Four Quadrant Model
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 四象限模型
- en: The original maturity model is the Capability Maturity Model invented at **Carnegie
    Mellon University** (**CMU**). It is a bit heavy to fully utilize, so simplified,
    more lightweight versions of it are preferable. One such version is the Four Quadrant
    Model put forward by Brian Dawson ([https://techbeacon.com/devops/how-map-your-devops-journey](https://techbeacon.com/devops/how-map-your-devops-journey)).
    It is derived from real-world DevOps transformations and offers a flexible way
    to assess maturity.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 原始的成熟度模型是**卡内基梅隆大学**（**CMU**）发明的能力成熟度模型（CMM）。这个模型在完全利用时有些笨重，因此更简化、更轻量化的版本更为合适。其中一个版本是Brian
    Dawson提出的四象限模型（[https://techbeacon.com/devops/how-map-your-devops-journey](https://techbeacon.com/devops/how-map-your-devops-journey)）。该模型来源于实际的DevOps转型，提供了一种灵活的评估成熟度的方式。
- en: 'In the Four Quadrant Model, the values ​​on the *x* axis consist of the different
    phases in the cycle of software development. You can recognize the **Software
    Development Life Cycle** (**SDLC**) in this:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在四象限模型中，*x*轴上的值由软件开发周期中的不同阶段组成。你可以在其中识别出**软件开发生命周期**（**SDLC**）：
- en: Define
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义
- en: Plan
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计划
- en: Code
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码
- en: Build
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建
- en: Integrate
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整合
- en: Test
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试
- en: Release
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布
- en: Deploy
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署
- en: Operate
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运营
- en: You see there is quite some overlap with the DevOps lifecycle phases that are
    proposed by GitLab.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，这与GitLab提出的DevOps生命周期阶段有相当大的重叠。
- en: 'The cycle is divided into two halves: **Agile Upstream** (which includes a
    definition, planning, coding, and building) and **Agile Downstream** (which includes
    integration, testing, release, implementation, and methods such as continuous
    deployment and continuous delivery).'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这个周期分为两部分：**Agile上游**（包括定义、规划、编码和构建）和**Agile下游**（包括集成、测试、发布、实施以及持续部署和持续交付等方法）。
- en: 'On the *y* axis, there is the level of adoption of Agile and DevOps practices
    in an organization. At the lower end, there is the team level, which moves on
    to the workgroup level, and finally the enterprise level. In the original CMMI
    model, there are usually different levels of maturity. The following figure illustrates
    the 4 Quadrant model:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在*y*轴上，表示的是组织中Agile和DevOps实践的采用程度。在低端是团队级别，然后是工作组级别，最后是企业级别。在原始的CMMI模型中，通常有不同的成熟度级别。下图展示了四象限模型：
- en: '![](img/a30b2b34-6140-4070-9823-631035dc5b50.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a30b2b34-6140-4070-9823-631035dc5b50.png)'
- en: Agile Upstream means that in a software life cycle, the development side of
    the product is done with Agile methodologies. Agile Downstream is all about the
    deployment and operational side of the SDLC.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: Agile上游意味着在软件生命周期中，产品的开发侧采用敏捷方法。Agile下游则涉及SDLC中的部署和运营侧。
- en: Each team must strive to implement the Four Quadrant Model because it enables
    them to innovate faster, increase productivity, respond to market changes, gain
    a competitive advantage, and increase employee satisfaction and retention.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 每个团队都必须努力实施四象限模型，因为它能够帮助他们更快地创新、提高生产力、应对市场变化、获得竞争优势，并提升员工满意度和留存率。
- en: Another way of measuring maturity is to look at competencies. How strong are
    you in certain aspects, for example?
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个衡量成熟度的方法是查看能力。例如，你在某些方面有多强？
- en: Four levels of competence
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 四个能力层级
- en: One way to test competence is by using the model mentioned by Mike Kavis' paper
    in Forbes. He describes a model that is based on the *Four stages of learning*
    used by Noel Burch in the 1970s.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 测试能力的一种方法是使用 Mike Kavis 在《福布斯》论文中提到的模型。他描述了一个基于 Noel Burch 在 1970 年代使用的 *四个学习阶段*
    的模型。
- en: 'The basic idea is that an individual goes through the following four stages
    while acquiring a new skill:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 基本思想是，个人在获得一项新技能时，会经历以下四个阶段：
- en: '**Stage 1: unconscious incompetence**: A person may not recognize that they
    need a certain skill. The first step in changing or growing is to recognize this
    deficit and to acknowledge the skill as is.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阶段 1：无意识的不熟练**：一个人可能没有意识到自己需要某项技能。改变或成长的第一步是认识到这种不足，并承认这项技能的存在。'
- en: '**Stage 2: conscious incompetence**: Gradually, it becomes apparent that a
    necessary skill is lacking. This is learned by making mistakes.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阶段 2：有意识的不熟练**：逐渐地，缺乏某项必要技能变得显而易见。这个过程通过犯错来学习。'
- en: '**Stage 3: conscious competence**: After several iterations or tries, the person
    acquires the skill and knowingly applies it. It won''t succeed every time, and
    doing so takes serious effort.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阶段 3：有意识的熟练**：经过几次迭代或尝试后，个人获得了该项技能，并能够有意识地运用它。虽然并非每次都能成功，但要做到这一点需要付出相当的努力。'
- en: '**Stage 4: unconscious competence**: The skill has become so natural or logical,
    that it can be applied unconsciously. It can even by taught to others.'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阶段 4：无意识的熟练**：这项技能变得如此自然或合乎逻辑，以至于可以在不自觉的情况下应用。甚至可以教给别人。'
- en: 'Davis claims that this model can be applied to organizations that are trying
    to grasp the DevOps concept. It is not scientifically proven, but it can be valuable
    to make the following comparison:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: Davis 声称，这一模型可以应用于那些试图理解 DevOps 概念的组织。虽然它没有经过科学验证，但做以下比较还是有价值的：
- en: '**Stage 1**: **Nothing there**: The organization initially seems averse to
    change. The term DevOps is described as a hype and is not applicable. This usually
    means that people don''t really understand what DevOps is about. People are trapped
    in the old silo thoughts and think that development should take over operations,
    or vice versa.'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阶段 1**：**一无所知**：组织最初似乎对变革有抵触情绪。DevOps 这个术语被描述为一种炒作，且不适用。这通常意味着人们并不真正理解 DevOps
    的含义。人们依然陷入老旧的思维模式，认为开发应该接管运维，或者反之。'
- en: '**Stage 2**: **Recognition**: Finally, it has sunk in that something has to
    change. In this stage, there will be mistakes. For instance, automation is introduced
    but the development silo may still think it is responsible for writing everything.
    A new silo (the DevOps silo) emerges, where developers are only creating automation
    for operations. These developers are not knowledgeable in networking  or security
    and compliance or other operational issues. Similar problems occur if the Operations
    department silo is converted to ''the'' DevOps engineer.  With limited knowledge
    about engineering, untested and unmanageable shell scripts may appear. However,
    at this stage, an organization is still learning and will eventually proceed to
    the next stage if the inevitable growing pains are managed.'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阶段 2**：**认知**：最终意识到某些事情必须改变。在这一阶段，会出现错误。例如，引入了自动化，但开发部门仍然认为自己负责编写一切。此时，出现了一个新的部门（DevOps
    部门），开发人员只为运营创建自动化。这些开发人员对网络、 安全合规或其他运营问题了解甚少。如果运营部门的部门被转化为“DevOps 工程师”，也会出现类似的问题。由于缺乏工程知识，可能会出现未经测试且难以管理的
    shell 脚本。然而，在这个阶段，组织仍在学习，如果能够管理好不可避免的成长痛点，最终会进入下一个阶段。'
- en: '**Stage 3**: **Coming of age**: After learning from their mistake, the management
    of an organization has taken up interest and recognized the added value of changing
    people and processes. In the previous stage, the aim was to integrate the silos
    of development and operations. Now that this has succeeded through trial and error,
    cooperation has expanded to include legal departments, compliance, and audit.
    The first signs of productivity are visible, with the creation of specialized
    platforms, a framework, or a template for deploying standardized enterprise applications
    from idea to production. Platforms begin to have everything baked in, such as
    compliance and quality control.'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阶段3**：**成熟阶段**：在吸取了失败的教训后，组织的管理层开始关注并认识到改变人员和流程的附加价值。在上一阶段，目标是整合开发和运维的孤岛。现在，通过反复试验成功地实现了这一目标，合作扩展到包括法律部门、合规性和审计。生产力的第一个迹象开始显现，出现了专门的平台、框架或模板，用于从创意到生产部署标准化的企业应用程序。平台开始具备所有内建的功能，如合规性和质量控制。'
- en: '**Stage 4**: **100% business driven**: At this stage, multiple business units
    in an organization deploy several times a day and are able to easily enhance the
    process and share their knowledge via the platform. In the most optimal form,
    the business unit is in complete control and has become a multi-disciplined team
    that can advise and collaborate with dedicated platform specialists.'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阶段4**：**100%以业务为驱动**：在这一阶段，组织中的多个业务单元每天进行多次部署，并能够通过平台轻松改进流程并分享他们的知识。在最优化的形式中，业务单元完全控制并已成为一个跨学科的团队，可以与专门的平台专家进行咨询和协作。'
- en: Of course, these models are quite theoretical, but they can help in the process
    of organizational change. Fortunately, several tools have emerged to help organizations
    bridge these gaps between the stages of maturity, which we'll discuss in the following
    sections.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这些模型是相当理论化的，但它们可以帮助组织在变革过程中。幸运的是，已经有一些工具出现，帮助组织弥合不同成熟度阶段之间的差距，接下来的章节中将讨论这些工具。
- en: The toolchain
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具链
- en: 'Although we have learned that DevOps is more than just tools, there are a number
    of tools that are commonly used in the enterprise, such as the following:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们已经了解到，DevOps不仅仅是工具，但在企业中，仍有许多常用的工具，如以下几种：
- en: '**A source code repository**: Computer source code has become a very valuable
    asset. It is usually stored in a repository with advanced version management features.
    The repository manages the many versions of code that are checked in, so developers
    can collaborate on each other''s projects. This concept is not new and has been
    around for 30 years, but is a big part of continuous integration because it is
    where the source code is kept. Popular source code repository tools include the
    following:'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源代码仓库**：计算机源代码已成为非常宝贵的资产。它通常存储在具有先进版本管理功能的仓库中。该仓库管理着被检查的多个版本的代码，因此开发人员可以在彼此的项目上进行协作。这个概念并不新鲜，已经存在了30年，但它是持续集成的重要组成部分，因为源代码存储在这里。常见的源代码仓库工具包括以下几种：'
- en: Git on the client
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端上的Git
- en: GitLab
  id: totrans-270
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitLab
- en: GitHub
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub
- en: Subversion
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Subversion
- en: TFS
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: TFS
- en: CVS
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: CVS
- en: All of these repository tools are explained in detail in [Chapter 4](d98d2cb3-53e4-4544-be20-4e618ae24e7b.xhtml),
    *Configuring GitLab from the Terminal*, [Chapter 5](f5893a6a-9076-45e6-8042-92c8304a0033.xhtml),
    *Importing Your Project from GitHub to GitLab*, [Chapter 6](632675c5-19ce-4c2f-8441-a8232ba70f1a.xhtml),
    *Migrating From CVS*, and [Chapter 7](6f1e3f0c-5dcc-47c1-a928-62caeebeca40.xhtml),
    *Switching from SVN*.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些仓库工具将在[第4章](d98d2cb3-53e4-4544-be20-4e618ae24e7b.xhtml)，*从终端配置GitLab*，[第5章](f5893a6a-9076-45e6-8042-92c8304a0033.xhtml)，*将项目从GitHub导入到GitLab*，[第6章](632675c5-19ce-4c2f-8441-a8232ba70f1a.xhtml)，*从CVS迁移*，以及[第7章](6f1e3f0c-5dcc-47c1-a928-62caeebeca40.xhtml)，*从SVN切换*中详细说明。
- en: '**Build server**: Building software used to be done on the individual developer''s
    workstation, but for the CI pipeline, a dedicated build server is used to compile
    source code from the source code repository into executable artefacts. Modern
    build servers do not just build, but also provide advance testing functions. Popular
    tools include the following:'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建服务器**：过去，软件的构建是在单个开发者的工作站上完成的，但在持续集成（CI）流水线中，使用专门的构建服务器将源代码库中的源代码编译成可执行文件。现代的构建服务器不仅负责构建，还提供先进的测试功能。常见的工具包括以下几种：'
- en: '**GitLab Runners**: The build tool for GitLab.'
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitLab Runners**：GitLab的构建工具。'
- en: '**Jenkins**: A fork of the Hudson project and a CI platform. This platform
    is primarily intended for the repeated execution and monitoring of build tasks,
    as well as the automated building and testing of applications. The many freely
    available plugins make it very easy to further expand the functionality of Jenkins.
    This software is only available as a distributed service to use on the cloud and
    is tightly integrated with GitHub as a source code repository.'
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Jenkins**：一个来自Hudson项目的分支，是一个持续集成（CI）平台。该平台主要用于反复执行和监控构建任务，以及应用程序的自动构建和测试。许多免费提供的插件使得扩展Jenkins的功能变得非常简单。该软件仅作为分布式服务提供，用于云端，并与GitHub（作为源代码仓库）紧密集成。'
- en: '**Configuration management**: For CI/CD, you need to control the environment
    where it takes place. For this, there are configuration management tools that
    describe and automate large parts of your infrastructure. Popular tools include
    the following:'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置管理**：对于CI/CD，你需要控制其所在的环境。为此，有配置管理工具来描述和自动化你基础设施的大部分部分。常用的工具包括以下：'
- en: '**Puppet**: Management software which can control large numbers of servers.
    This concerns both the management of configuration files (the settings of servers)
    and the management of the installed software (packages). It uses a declarative
    language and has a steep learning curve.'
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Puppet**：一种可以控制大量服务器的管理软件。这涉及到配置文件（服务器设置）和已安装软件（软件包）的管理。它使用声明性语言，并且学习曲线较陡峭。'
- en: '**Chef**: Also configuration management software, Chef supports slightly fewer
    platforms than Puppet and is not a declarative language. Chef uses pure Ruby code
    that indicates what you want to do on your servers. You have more freedom to create
    your own program data structures and functions. It is used by GitLab to manage
    the omnibus package.'
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Chef**：另一款配置管理软件，Chef支持的平台略少于Puppet，并且不是声明性语言。Chef使用纯Ruby代码来指示你希望在服务器上执行的操作。你可以更自由地创建自己的程序数据结构和函数。GitLab用它来管理Omnibus包。'
- en: '**Virtual infrastructure**: Infrastructure on which software runs has always
    been virtual, and an operating system is already several layers of abstraction.
    In the cloud, virtual infrastructure is an extra layer of abstraction that represents
    entire machines (such as networks, nodes, and storage). There is also an orchestration
    layer that manages the infrastructure. This provides easy up- and down-scaling
    and can use all resources efficiently. The first real, large-scale virtual infrastructure
    that became available as a service was Amazon Web Services. The other major tech
    companies soon followed with Google Cloud and Microsoft Azure. These infrastructures
    can be managed with their own orchestration tools, but also have APIs that can
    be used by configuration management tools, including the following:'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟基础设施**：运行软件的基础设施一直都是虚拟的，操作系统已经是几层抽象。在云中，虚拟基础设施是一个额外的抽象层，代表整个机器（例如网络、节点和存储）。还有一个编排层来管理基础设施。这使得上下扩展变得容易，并能有效利用所有资源。第一个真正的大规模虚拟基础设施作为服务提供的是Amazon
    Web Services（AWS）。其他主要的科技公司随后也推出了Google Cloud和Microsoft Azure。这些基础设施可以使用它们自己的编排工具进行管理，但也提供可以被配置管理工具使用的API，包括以下：'
- en: Ansible
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ansible
- en: Puppet
  id: totrans-284
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Puppet
- en: Chef
  id: totrans-285
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Chef
- en: Google Cloud
  id: totrans-286
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google Cloud
- en: Governments often have special requirements regarding their data. This is called
    data sovereignty and this is why specialist clouds have arisen for governments.
    According to Garter, these clouds could be the next legacy system, after government
    infrastructure was moved like-for-like to the cloud without being decomposed into
    elastic, efficient, and cost-effective cloud components.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 政府通常对其数据有特殊要求，这被称为数据主权，因此专门为政府提供的云服务应运而生。根据Gartner的说法，这些云服务可能会成为下一个遗留系统，就像政府基础设施被一对一地迁移到云端一样，但没有解构成弹性、高效且具有成本效益的云组件。
- en: Not everyone is able to run their software and data on public clouds, even if
    they have special agreements. If you run a private or hybrid cloud, for example,
    you are essentially using abstractions that exist on the internet in your own
    data center. Even without the elasticity of Amazon or Azure, it can be very beneficial
    to apply cloud techniques yourself. The accompanying automation tools make integration
    with existing systems easier, and a lot less people are needed for managing the
    system. There are also private clouds; for example, VMware has vCloud. It is quite
    easy to extend your existing VMware infrastructure to create cloud-like environments.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 并不是每个人都能在公共云上运行他们的软件和数据，即使他们有特殊协议。例如，如果你运行的是私有云或混合云，实际上你就是在自己的数据中心使用互联网上存在的抽象技术。即使没有Amazon或Azure的弹性，自己应用云技术也可以非常有益。配套的自动化工具使得与现有系统的集成变得更容易，而且管理系统所需的人力也大大减少。也有私有云，例如，VMware有vCloud。扩展现有的VMware基础设施以创建类似云的环境是相当简单的。
- en: '**Test automation**: Testing is all about ensuring confidence in your product.
    When the product reaches deployment time in your pipeline, it should be tested
    for certain defects automatically before it has reached that point. There are
    several tools available to perform all kinds of testing and integrate nicely with
    a lot of other pipeline products; they include the following:'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试自动化**：测试的目的是确保对产品的信心。当产品在管道中达到部署阶段时，它应在到达该点之前自动进行某些缺陷测试。市场上有多种工具可以执行各种测试，并且可以与许多其他管道产品完美集成；其中包括：'
- en: '**Selenium**: Selenium is an application that allows you to automate browsers.
    What you do with this depends on your goal. You can automate repetitive administrative
    tasks, but Selenium is also used for browser testing.'
  id: totrans-290
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Selenium**：Selenium是一个应用程序，允许你自动化浏览器操作。你可以根据目标来使用它。你可以自动化重复的管理任务，但Selenium也用于浏览器测试。'
- en: '**Cucumber**: This is a test tool for **Behavior-Driven Development** (**BDD**).
    The primary goal of BDD is to let people communicate, and close the gap between
    technical and business people. You can write tests in a human-readable format.'
  id: totrans-291
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**黄瓜（Cucumber）**：这是一款用于**行为驱动开发（BDD）**的测试工具。BDD的主要目标是让人们能够更好地沟通，缩小技术人员与业务人员之间的差距。你可以用人类可读的格式编写测试。'
- en: '**Apache JMeter**: JMeter is an open source tool that performs load, performance,
    and stress tests. It is a simple but effective application where different types
    of scripts show exactly what the result of the test is. These scripts are used
    for HTTP websites and provide a simulated test environment. In addition to applications,
    JMeter is also suitable for checking services on the web and various databases.'
  id: totrans-292
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Apache JMeter**：JMeter是一个开源工具，用于进行负载、性能和压力测试。它是一个简单但高效的应用程序，通过不同类型的脚本准确显示测试结果。这些脚本用于HTTP网站并提供模拟的测试环境。除了应用程序，JMeter还适用于检查Web服务和各种数据库。'
- en: You can also utilize GitLab Runners and write your own tests.
  id: totrans-293
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你还可以利用GitLab Runners并编写你自己的测试。
- en: '**Pipeline orchestration**: The pipeline refers to an automated number of steps
    to get your code from inception to production after it has been checked into version
    control. It''s based on the idea of a manufacturing assembly line.'
  id: totrans-294
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管道编排（Pipeline orchestration）**：管道是指从代码提交到版本控制系统后，将其从初步开发推向生产环境的一系列自动化步骤。它的理念基于制造业装配线的概念。'
- en: 'To manage things along the way in a CI/CD process, pipeline orchestration tools
    were introduced. Some of these tools include:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 在CI/CD过程中，为了管理各项事务，引入了管道编排工具。这些工具包括：
- en: '**Kubernetes**: Kubernetes is, essentially, a platform for the roll-out and
    management of containers on a large scale. Kubernetes, Greek for helmsman or pilot,
    is the second name for the project, which originally saw the light of day in the
    big halls of Google as Project Seven of Nine. Project Seven of Nine was an external
    version of Borg, the task scheduler that drives the services of Google, and the
    operation of which was a Google secret for a long time.'
  id: totrans-296
  prefs:
  - PREF_OL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kubernetes**：Kubernetes本质上是一个用于大规模部署和管理容器的平台。Kubernetes是希腊语，意为舵手或飞行员，这是该项目的第二个名称，最初是在Google的大型会议室中作为“Project
    Seven of Nine”诞生的。Project Seven of Nine是Borg的外部版本，Borg是驱动Google服务的任务调度器，其操作在很长一段时间内一直是Google的机密。'
- en: Built as an extension to the Docker API, orchestration using Swarm also became
    popular a couple of years ago. It can easily convert a loose group of Docker containers
    in a managed virtual Docker engine. This makes it very easy to start running container
    workloads at scale from scratch.
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为Docker API的扩展，使用Swarm进行的编排在几年前也变得非常流行。它可以轻松地将松散的Docker容器组合成一个管理虚拟Docker引擎。这使得从头开始大规模运行容器工作负载变得非常简单。
- en: '**Mesos/Marathon Apache**: Mesos is a distributed kernel and is the backbone
    of DC/OS. It abstracts CPU, memory, storage, and other computer resolutions. It
    has APIs for resource management, planning in data centers, and cloud environments.
    It can scale up to 10,000 nodes. It can therefore be extremely suitable for large
    production clusters. It supports container orchestration with Marathon.'
  id: totrans-298
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Mesos/Marathon Apache**：Mesos是一个分布式内核，是DC/OS的核心。它抽象了CPU、内存、存储和其他计算资源。它提供资源管理API，适用于数据中心和云环境的规划。它能够扩展到10,000个节点，因此非常适合大型生产集群。它支持与Marathon的容器编排。'
- en: All of the aforementioned tools can be integrated with GitLab, and you can use
    GitLab for all parts of a pipeline. You can use runners for testing, building,
    or deploying your product, and you can utilize Kubernetes to orchestrate your
    workloads.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 所有前面提到的工具都可以与GitLab集成，你可以在管道的各个部分使用GitLab。你可以使用Runner进行测试、构建或部署产品，并且可以利用Kubernetes来编排工作负载。
- en: 'It''s up to you which part of the pipeline is used in GitLab, but it can support
    you in all stages of the DevOps life cycle, illustrated as follows:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab中使用哪一部分管道由你决定，但它可以在DevOps生命周期的所有阶段为你提供支持，如下所示：
- en: '![](img/caf5c152-1771-4cf1-a29a-8d18153158b6.png)'
  id: totrans-301
  prefs: []
  type: TYPE_IMG
  zh: '![](img/caf5c152-1771-4cf1-a29a-8d18153158b6.png)'
- en: We have now explained the basic setup of a CD pipeline in DevOps. GitLab offers
    close to 100% of all the stages, but can integrate with existing components as
    well.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经解释了DevOps中CD管道的基本设置。GitLab提供了几乎100%的所有阶段，但也可以与现有组件进行集成。
- en: Summary
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'This chapter was intended to provide more background on the origins and development
    of GitLab. A tool does not arise from the void. In the 1990s, it became clear
    that in different parts of the world, people came to the same conclusion: linear
    software development is not the right approach for all projects. The solution
    to this problem has finally reached the operations department after 10 years through
    DevOps. DevOps is a way of working and a culture with accompanying tools for which
    GitLab has been built. In the next chapter, we will see how GitLab can contribute
    to a better DevOps experience.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 本章旨在提供关于GitLab起源和发展的更多背景知识。一个工具不是凭空出现的。在1990年代，全球不同地区的人们达成了同样的结论：线性软件开发并不是所有项目的正确方法。经过10年的发展，最终DevOps解决方案进入了运维部门。DevOps是一种工作方式和文化，并配有工具，GitLab正是为此构建的。在下一章中，我们将看到GitLab如何为更好的DevOps体验做出贡献。
- en: Questions
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is an SDLC?
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是SDLC？
- en: How many participants were at the Agile Manifesto conference in Utah?
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在犹他州的敏捷宣言会议上有多少参与者？
- en: When was the waterfall model first mentioned?
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 瀑布模型第一次出现是什么时候？
- en: Where was XP programming born?
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: XP编程起源于哪里？
- en: What does MoSCoW mean?
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MoSCoW是什么意思？
- en: Where and when did the first DevOps days take place?
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一次DevOps Days在哪里以及何时举行？
- en: What is Agile Upstream?
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是敏捷上游？
- en: Name two configuration management tools.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请列举两种配置管理工具。
- en: Further reading
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*The Agile Maturity Model*: [https://info.thoughtworks.com/rs/thoughtworks2/images/agile_maturity_model.pdf](https://info.thoughtworks.com/rs/thoughtworks2/images/agile_maturity_model.pdf)'
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*敏捷成熟度模型*：[https://info.thoughtworks.com/rs/thoughtworks2/images/agile_maturity_model.pdf](https://info.thoughtworks.com/rs/thoughtworks2/images/agile_maturity_model.pdf)'
- en: '*DevOps maturity model*<q>*:*</q> [https://techbeacon.com/devops/how-map-your-devops-journey](https://techbeacon.com/devops/how-map-your-devops-journey)'
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*DevOps成熟度模型*<q>*:*</q> [https://techbeacon.com/devops/how-map-your-devops-journey](https://techbeacon.com/devops/how-map-your-devops-journey)'
- en: '*What is DevOps?* [http://radar.oreilly.com/2012/06/what-is-devops.html](http://radar.oreilly.com/2012/06/what-is-devops.html)'
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*什么是DevOps?* [http://radar.oreilly.com/2012/06/what-is-devops.html](http://radar.oreilly.com/2012/06/what-is-devops.html)'
- en: '*The Agile Developer''s Handbook*, by *Paul Flewelling*<q>: </q>[https://www.packtpub.com/web-development/agile-developers-handbook](https://www.packtpub.com/web-development/agile-developers-handbook)'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《敏捷开发者手册》*，作者：*Paul Flewelling*<q>: </q>[https://www.packtpub.com/web-development/agile-developers-handbook](https://www.packtpub.com/web-development/agile-developers-handbook)'
- en: '*DevOps: Continuous Delivery, Integration, and Deployment with DevOps*, by
    *Sricharan Vadapalli*: [https://www.packtpub.com/virtualization-and-cloud/devops-continuous-delivery-integration-and-deployment-devops](https://www.packtpub.com/virtualization-and-cloud/devops-continuous-delivery-integration-and-deployment-devops)'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*DevOps：持续交付、集成与部署*，由*斯里查兰·瓦达帕利*编著：[https://www.packtpub.com/virtualization-and-cloud/devops-continuous-delivery-integration-and-deployment-devops](https://www.packtpub.com/virtualization-and-cloud/devops-continuous-delivery-integration-and-deployment-devops)'
- en: '*Practical DevOpsm*, by *Joakim Verona*:[https://www.packtpub.com/in/networking-and-servers/practical-devops](https://www.packtpub.com/in/networking-and-servers/practical-devops)'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实用DevOps*，由*乔阿基姆·维罗纳*编著：[https://www.packtpub.com/in/networking-and-servers/practical-devops](https://www.packtpub.com/in/networking-and-servers/practical-devops)'
- en: '*Wicked Problems, Righteous Solutions: A Catalogue of Modern Software Engineering
    Paradigms*, by *DeGrace*, *Peter*, and *Stahl*, *Leslie Hulet*, pp. 116, 117,
    127\. Reprinted with permission of Prentice Hall, Englewood Cliffs, New Jersey,
    1990.'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*邪恶问题，正义解决方案：现代软件工程范式目录*，由*德格雷斯*、*彼得*和*斯塔尔*、*莱斯利·胡莱特*编著，pp. 116, 117, 127\.
    经普伦蒂斯·霍尔出版公司许可再版，新泽西州恩格尔伍德悬崖，1990年。'
- en: '*Managing the development of large systems: Concepts and techniques*, by W.
    W. Royce In: 9th International Conference on Software Engineering. ACM. 1970\.
    p. 328-38.'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*大型系统开发管理：概念与技术*，由W. W. *罗伊斯*著，载于：第九届国际软件工程会议。ACM。1970年，p. 328-38。'
