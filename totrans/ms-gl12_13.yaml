- en: Create Your Product, Verify, and Package it
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你的产品、验证并打包
- en: In this chapter, we will try to compare the theory from the previous chapter
    with its implementation in GitLab. As GitLab was born from a need to have a collaboration
    platform with advanced features, it has grown organically to its current form.
    It was built with agility in mind. We will present a use case where a small company
    wants to build a software product, and we will use GitLab to evolve the idea into
    a product.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将尝试将上一章的理论与其在GitLab中的实现进行比较。GitLab的诞生源于需要一个具有高级功能的协作平台，它已经自然地发展成现在的形式。它是在敏捷性理念的指导下构建的。我们将展示一个用例，其中一家小公司希望开发一款软件产品，我们将使用GitLab将这个创意转化为产品。
- en: 'In this chapter, we will be covering following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The GitLab workflow
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitLab工作流
- en: Managing your ideas
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理你的创意
- en: Planning your feature
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 规划你的功能
- en: Creating it
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建它
- en: Verifying your product
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证你的产品
- en: Packaging it for use
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打包以供使用
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along with instructions in this chapter, please download the Git
    repository, along with the examples, from GitHub: [https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter10](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter10).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章中的指令，请从GitHub下载Git仓库和示例：[https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter10](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter10)。
- en: You will need an Amazon account if you want to try the examples.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想尝试这些示例，你将需要一个亚马逊账户。
- en: You also need **AWS Command Line Interface** (**AWS CLI**): [https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要**AWS命令行界面**（**AWS CLI**）：[https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html](https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html)
- en: The GitLab workflow
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitLab工作流
- en: 'Remember we introduced the DevOps pipeline as seen by GitLab in previous chapter.
    This screenshot shows the various GitLab stages:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 记住我们在上一章中介绍了GitLab视角下的DevOps流水线。此截图展示了GitLab的各个阶段：
- en: '![](img/62d61cf6-be4e-4b8f-8303-74dd7066ce23.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/62d61cf6-be4e-4b8f-8303-74dd7066ce23.png)'
- en: In this chapter, we will present several aspects of the entire pipeline as we
    try to use it in our example project. The first phase is defined as **Manage**,
    and it sounds a bit weird as the first part, but it is a continuous process spanning
    the entire pipeline, and GitLab provides tools for it. The next stage will be
    **Plan**, in which you refine and prioritize and set timelines. Then you start
    the **Create** phase where the tasks are executed to produce solutions. After
    creating your product, you need to test different aspects of it in the **Verify**
    phase. After verifying the product you will package it for deployment.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将展示整个流水线的多个方面，并尝试在我们的示例项目中使用它。第一阶段定义为**管理**，作为第一个阶段可能听起来有点奇怪，但它是一个贯穿整个流水线的持续过程，GitLab提供了相应的工具。接下来的阶段是**计划**，在这一阶段，你需要进行细化、优先级排序并设定时间表。然后进入**创建**阶段，在这一阶段中执行任务以产生解决方案。创建完产品后，你需要在**验证**阶段测试其各个方面。验证产品后，你将进行打包以供部署。
- en: To explain the GitLab workflow in more detail, we will present a use case that
    is going to be used throughout this chapter to demonstrate features in GitLab.
    For some features you will need the most comprehensive GitLab license.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更详细地解释GitLab工作流，我们将展示一个将贯穿全章的用例，展示GitLab中的各种功能。对于某些功能，你将需要最全面的GitLab许可证。
- en: Imagine a company called *Event Horizon*. They want to build a solution for
    managing events (for humans). For instance, you can use their solution to arrange
    invitations to a party.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有一家公司叫做*Event Horizon*，他们想要建立一个管理活动（面向人类）的解决方案。例如，你可以使用他们的解决方案来安排派对的邀请。
- en: We introduce User1, who is a backend engineer, and is tasked with creating a
    backend for this solution. Then we also have User2, who is currently product owner
    of this product. They are both part of the IT department of the company. Then
    we have User3, who is part of the marketing department.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们介绍了User1，他是一名后端工程师，负责为该解决方案创建后端。然后我们还有User2，他目前是该产品的产品负责人。他们都属于公司的IT部门。接着是User3，他属于市场营销部门。
- en: User1 and User2 have both been made members of the IT group in GitLab. User3
    is a member of the marketing group, but has reporter access to IT.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: User1和User2都已成为GitLab中IT小组的成员。User3是市场营销小组的成员，但仅具有IT组的报告者权限。
- en: Let's help them create this product (minimally) and demonstrate how they can
    use GitLab for this.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们帮助他们（最小化地）创建这个产品，并展示他们如何使用GitLab来完成这一过程。
- en: 'In the meeting where both users and developers are present (the Release planning
    in XP, or Sprint 0 when using Scrum) it is decided that these are following requirements:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户和开发人员都参与的会议中（在XP中的发布规划，或者在使用Scrum时的Sprint 0），决定了以下需求：
- en: We want to build an app to help organize events.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望构建一个帮助组织活动的应用程序。
- en: It needs to use email to communicate.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要通过电子邮件进行沟通。
- en: We are creating a list of invitees in advance.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们提前创建了一个邀请者名单。
- en: Invitees can interactively indicate if they will attend.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 邀请者可以互动地表示是否会参加。
- en: 'Non-functional requirement: documentation is very important.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 非功能性需求：文档非常重要。
- en: 'Non-functional requirement: we want to automate as much as possible.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 非功能性需求：我们希望尽可能实现自动化。
- en: 'Non-functional requirement: the tool used should enhance collaboration.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 非功能性需求：所使用的工具应增强协作。
- en: 'Non-functional requirement: the code used should be reviewed by at least one
    other person.'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 非功能性需求：使用的代码应至少经过另一个人的审查。
- en: At the end of the meeting, the requirements are prioritized and the developers
    talk without the customers about the possibilities with GitLab as a product. This
    phase is the subject of the next section.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在会议结束时，需求被优先级排序，开发人员与客户不再讨论，转而讨论GitLab作为产品的可能性。这个阶段是下一部分的主题。
- en: DevOps phase – manage your ideas
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps阶段——管理你的想法
- en: Instead of creating big designs up front we have learned that iterative development
    is the way to go. But even for projects using Agile methodologies there are some
    considerations before your coding goes off to start. This stage in the DevOps
    life cycle is called *Manage* and it comprises the *whole life cycle*. It is the
    beginning of an Agile iteration but also the end and in between. You will manage
    your solution from the beginning and it never stops. An import part of managing
    is knowing how you are doing. You can analyze this in GitLab, as shown in the
    next section.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学会了不再事先创建大型设计，而是采用迭代开发的方式。然而，即使是使用敏捷方法论的项目，在开始编码之前也有一些需要考虑的事项。在DevOps生命周期的这一阶段称为*管理*，它包括了*整个生命周期*。这是敏捷迭代的开始，也是结束，处于两者之间。你将从一开始就管理你的解决方案，这个过程永不停歇。管理的一部分是了解你的进展情况。你可以在GitLab中分析这一点，正如下一部分所展示的那样。
- en: Cycle analytics
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 周期分析
- en: One of the most important metrics in developing software through an Agile method
    is the cycle time. This **Key Performance Indicator** (**KPI**) is best described
    as the total time that has elapsed from the time work has started until completion
    of the task. Or in IT, the time it takes to get an idea implemented on production.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在通过敏捷方法开发软件时，最重要的度量指标之一是周期时间。这个**关键绩效指标**（**KPI**）可以最好地描述为从开始工作到任务完成所经过的总时间。或者在IT领域，它指的是将一个想法实现到生产环境所需要的时间。
- en: Before Agile project management, tools such as Microsoft Project were used to
    keep track of time. Nowadays, *guesstimates* are not entered in a project anymore,
    but other things such as risk and velocity are calculated in story points and
    they are used to plan some weeks ahead.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在敏捷项目管理之前，曾使用微软项目等工具来跟踪时间。如今，*估算*不再被输入到项目中，而是通过故事点来计算其他因素，如风险和速度，这些用于提前规划几个星期的工作。
- en: 'In GitLab, there is a place to measure cycle times: cycle analytics. It means
    you have to use GitLab''s project management features and it is available in all
    editions. The following image is an example of cycle analytics for the GitLab
    CE project. Notice that it takes about a month for an idea to go into production
    (which corresponds nicely with its actual release cycle):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitLab中，有一个地方可以测量周期时间：周期分析。这意味着你需要使用GitLab的项目管理功能，而且它在所有版本中都可以使用。以下图片是GitLab
    CE项目的周期分析示例。请注意，一个想法进入生产环境大约需要一个月的时间（这与其实际发布周期相符）：
- en: '![](img/5cf1d0b6-82e5-476e-ad0d-fe2b739af643.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5cf1d0b6-82e5-476e-ad0d-fe2b739af643.png)'
- en: We can use cycle analytics later in the project to check how well GitLab is
    used and what velocity the development team has.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在项目的后期使用周期分析来检查GitLab的使用情况以及开发团队的开发速度。
- en: DevOps phase – plan your feature
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DevOps阶段——规划你的特性
- en: 'The next stage in the DevOps life cycle that GitLab is envisioning is *Plan*.
    For this phase, we will explore all the steps needed to prepare for the coding
    and building of the solution. In GitLab, there are several tools that can help
    you in this phase, regardless of which development methodology you prefer (Agile
    or waterfall). Where to begin? We always begin with creating an issue. We will
    discuss this in the next section:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab所设想的DevOps生命周期的下一个阶段是*计划*。在这个阶段，我们将探索所有为编码和构建解决方案做准备的步骤。在GitLab中，有几个工具可以帮助你完成这个阶段，无论你偏好哪种开发方法（敏捷或瀑布式）。从哪里开始？我们总是从创建一个问题开始。我们将在下一节中讨论这个问题：
- en: Issues
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is an issue? Well, it can be many things. It could be a new business idea,
    a technical problem, a cry for help. An issue is like starting a new discussion,
    and it is a way to express your thinking. It should change along the way as other
    people get involved. It is the atomic, basic, first thing in GitLab that everything
    else is derived from. It always a good idea to start looking in the existing list
    of issues to see if your problem or wish is already part of an existing issue.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是问题？其实它可以是很多东西。它可能是一个新的商业想法，一个技术问题，或者是求助的呼声。问题就像是开始一个新的讨论，它是一种表达思考的方式。随着其他人的参与，它应该会发生变化。它是GitLab中的原子性的、基本的、最初的事物，其他一切都是由此派生的。通常，最好先查看现有问题列表，看看你的问题或需求是否已经是现有问题的一部分。
- en: GitLab, as a product, facilitates this discussion and offers ways to manage
    it and flows to verify assumptions.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab作为一个产品，促进了这一讨论，并提供了管理讨论的方式以及验证假设的流程。
- en: An issue has several attributes and concepts, which we will look at.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一个问题有多个属性和概念，我们将一一查看。
- en: Content
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内容
- en: Of course, an issue has content, so how is it structured? The issue  has a title
    and a description. It is also possible to insert tasks into the issue using markdown
    formatting. What also counts as content are the accompanying comments and events/activities
    that are linked and viewable through the issue. Within the content you can also
    insert quick actions, which will be discussed later in this chapter.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，问题有内容，那么它是如何构成的呢？问题有一个标题和描述。还可以通过markdown格式在问题中插入任务。作为内容的一部分，还包括随附的评论和通过问题关联并可查看的事件/活动。在内容中，你还可以插入快速操作，这将在本章后面讨论。
- en: Status of the issue
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题的状态
- en: There are several states an issue can be in. Of course, it can be open or closed.
    Another aspect of state is the confidentiality of the issue. If there is sensitive
    information, an issue can be marked as confidential. The visibility of the issue
    is then limited to members of the group who have  at least reporter permissions.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 问题有几种状态。当然，它可以是打开的或关闭的。另一个状态方面是问题的机密性。如果有敏感信息，问题可以标记为机密。这样问题的可见性就限制为拥有至少报告者权限的组成员。
- en: Meta information
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元数据
- en: 'Every issue has an author, and that information is prominently displayed, along
    with the current assignee. Other meta information consists of well-known project
    management data, such as: milestones, due dates, and weight.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 每个问题都有一个作者，这些信息会显著地显示出来，同时还会显示当前的指派人。其他元信息包括一些熟知的项目管理数据，如：里程碑、截止日期和权重。
- en: Let's try to make this clear, based on our example. The *Event Horizon* company
    is about to start the first Scrum sprints. They want to use GitLab issues for
    project management.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们基于我们的示例来澄清这一点。*Event Horizon*公司即将开始第一次Scrum迭代。他们想使用GitLab的问题来进行项目管理。
- en: 'User1 creates an issue in which he asks which technology we are going to use.
    That could be an example of the first issue, as shown in the following screenshot:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: User1创建了一个问题，询问我们将使用哪种技术。这可以是第一个问题的一个例子，如下图所示：
- en: '![](img/15f4e0ec-3a38-423e-8379-ae9d54e02410.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/15f4e0ec-3a38-423e-8379-ae9d54e02410.png)'
- en: You will see that there is a list with tasks defined.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到有一个定义了任务的列表。
- en: 'User2 creates an issue regarding which documentation style to use for the project, as
    shown in the following screenshot:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: User2创建了一个关于项目应使用哪种文档风格的问题，如下图所示：
- en: '![](img/12648d2e-0b24-487a-906f-c1816311b7b3.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/12648d2e-0b24-487a-906f-c1816311b7b3.png)'
- en: Both are valid questions to ask, and to start a discussion about, and we will
    see how this continues when an issue evolves to the next level, a discussion.
    We will talk about this in the next section.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个问题都是有效的问题，可以用来发起讨论，我们将看到当一个问题发展到下一个层次——讨论时会怎样。我们将在下一节中讨论这个问题。
- en: Discussions
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 讨论
- en: 'This a very important part of GitLab and is the next step in issue discovery.
    It is possible to give feedback in the form of comments in the context of an issue,
    and also in the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 GitLab 中非常重要的部分，是问题发现的下一步。你可以在问题的上下文中通过评论的形式给出反馈，也可以在以下内容中进行：
- en: Epics
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 史诗（Epics）
- en: Merge requests
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并请求
- en: Snippets
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码片段
- en: Commits
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交（Commits）
- en: Commit diffs
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交差异（Commit diffs）
- en: 'It is also possible to create a threaded discussion or to transform a comment
    into one. You can use markdown to format your text and use quick actions (as described
    in the *Quick actions* section in this chapter). The default comment form is shown
    in the following example:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以创建线程式讨论，或将评论转化为线程讨论。你可以使用 Markdown 格式化你的文本，并使用快速操作（如本章中“*快速操作*”部分所述）。默认的评论形式如下所示：
- en: '![](img/43e61ef1-6397-4408-aded-2d241c6adcd7.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/43e61ef1-6397-4408-aded-2d241c6adcd7.png)'
- en: 'If you have set up your GitLab for incoming email, you can respond to emails
    that are sent as comment notification emails. Replying to those will create a
    new comment or discussion item. In the following screenshot, you will find a discussion
    for an issue in the Event Horizon web application:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已设置 GitLab 接收电子邮件，你可以回复作为评论通知邮件发送的电子邮件。回复这些邮件会创建新的评论或讨论项。在以下截图中，你将看到“事件视界”Web
    应用程序中的一个问题讨论：
- en: '![](img/6d188eba-fdd0-4991-9a1b-02e575f65c46.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d188eba-fdd0-4991-9a1b-02e575f65c46.png)'
- en: 'As mentioned, it is also possible to add a discussion to an epic, which we
    will discuss later. The following example is the screenshot for adding any discussion
    to an epic:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，也可以向一个史诗（Epic）添加讨论，我们将在后面讨论这一点。以下示例是添加任何讨论到史诗的截图：
- en: '![](img/938bbca0-e766-4528-8adf-a1ff56c9b128.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/938bbca0-e766-4528-8adf-a1ff56c9b128.png)'
- en: Using these discussions, the idea evolves, as does the understanding of it.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些讨论，想法得以发展，对它的理解也得以深化。
- en: Milestones
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 里程碑
- en: Milestones can have different functions in a project, but are used in GitLab
    to indicate where one stands in achieving a common goal for which issues and merge
    requests are defined.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 里程碑在项目中可以有不同的功能，但在 GitLab 中它们用于标示在实现一个共同目标时所处的位置，该目标由问题和合并请求定义。
- en: A milestone can be used to mark the beginning and the end of an Agile iteration
    or a sprint. It's quite practical to just name the milestone after your sprint
    and then you can associate issues to the milestone to add work.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 里程碑可以用来标记敏捷迭代或冲刺的开始和结束。将里程碑命名为你的冲刺名称是非常实用的，然后你可以将问题关联到里程碑上，以便添加工作。
- en: At GitLab, they are used as one release cycle. For instance, when they go from
    release 11.8 to 11.9, all the work contained in that release will be represented
    by a milestone, and that will be labeled 11.9\. Each piece of work is represented
    in an issue, for instance, the problems you need to solve, the conversation. All
    these issues work together towards one large milestone.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitLab 中，它们作为一个发布周期使用。例如，当从版本 11.8 升级到 11.9 时，所有包含在该版本中的工作将由一个里程碑表示，并且该里程碑将标记为
    11.9。每项工作都通过一个问题来表示，例如，你需要解决的问题或讨论。所有这些问题共同推动一个大型的里程碑。
- en: 'For the Event Horizon project, there are three milestones defined: mvp 1, MVP3,
    and mvp2\. You can see them as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于“事件视界”项目，定义了三个里程碑：mvp 1、MVP3 和 mvp2。你可以如下所见：
- en: '![](img/3f2914fb-85fe-49a5-ad44-cfde50b2bfd6.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f2914fb-85fe-49a5-ad44-cfde50b2bfd6.png)'
- en: 'If we open a milestone, it has the following characteristics:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打开一个里程碑，它具有以下特点：
- en: '![](img/808ba8ad-b21a-4432-9912-caf63a359f3e.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/808ba8ad-b21a-4432-9912-caf63a359f3e.png)'
- en: Project milestones can only be linked to issues and merge requests in the project
    context. You can view a list of milestones by going to Issues and then Milestones.
    Group milestones can be linked with issues and merge requests on the group context,
    which means you can link it to several projects that are part of the group. The
    list of those can be found via the Issues and then Milestones links in the group.
    A general view of all milestones is via the dashboard milestones list, or via
    the top navigation link, Milestones.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 项目里程碑只能在项目上下文中与问题和合并请求链接。你可以通过访问“问题”（Issues）然后选择“里程碑”（Milestones）查看里程碑列表。组里程碑可以在组上下文中与问题和合并请求链接，这意味着你可以将其链接到多个属于该组的项目。你可以通过组中的“问题”和“里程碑”链接找到这些里程碑。通过仪表板的里程碑列表或通过顶部导航链接“里程碑”（Milestones），可以查看所有里程碑的概览。
- en: Epics
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 史诗（Epics）
- en: If you have GitLab EE, you can create epics. An epic is an extensive user story
    that still has to be broken down into a set of smaller user stories. Usually,
    an epic describes a defined piece of functionality or product property, but needs
    to be worked out in more detail before the team can commit to this feature to
    be realized within one sprint. It's like a theme among issues.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是 GitLab EE，您可以创建史诗。史诗是一个广泛的用户故事，但仍然需要被拆解成一组更小的用户故事。通常，史诗描述的是一个定义好的功能或产品特性，但在团队能够承诺在一个冲刺（sprint）内实现之前，还需要进行更详细的工作。它像是问题中的一个主题。
- en: For big organizations that work with long-running project management programs,
    there is also the option to have multi-level epics so that you can link and coordinate
    efforts. There is a button (+) for it in the creation form of the epic.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大型组织，特别是处理长期项目管理程序的组织，还可以使用多级史诗（epic），以便您能够链接并协调各项工作。在创建史诗时，表单中有一个按钮（+）可以使用。
- en: Epics very much resemble issues in that you have the same editing functions
    and state. The same formatting is applicable, and also the same quick actions.
    Maybe more importantly for epics is the option to set due dates. Big projects
    that cover multiple business domains are still more date driven, so we can imagine
    that these fields are more appropriate here then in Agile-drive smaller projects.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 史诗与问题非常相似，您拥有相同的编辑功能和状态。相同的格式化方式也适用，快捷操作也一样。对于史诗来说，更为重要的可能是设置到期日期的选项。大型项目通常跨多个业务领域，且更依赖于日期，因此我们可以想象，这些字段在这里比在敏捷驱动的小型项目中更为合适。
- en: From the epic, you can navigate to the linked issues. Also, when issues become
    too big and are misrepresented epics, it is also possible to promote an issue
    to an epic.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 从史诗中，您可以导航到关联的问题。同时，当问题变得过大并且被错误地表示为史诗时，也可以将问题提升为史诗。
- en: 'For the Event Horizon  project, the Product Owner User3 can create an epic
    to track the progress of the two different projects and the issues that were created
    earlier. The following screenshot shows the tracking progress for the projects:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Event Horizon 项目，产品负责人 User3 可以创建一个史诗，以追踪两个不同项目的进展以及之前创建的问题。下图展示了这些项目的进度追踪：
- en: '![](img/c80fbee3-6d07-4eb4-b5a5-f32eadfec323.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c80fbee3-6d07-4eb4-b5a5-f32eadfec323.png)'
- en: The ability to use epics to group issues is necessary for keeping control over
    multiple discussions and issues and projects that together work towards a solution.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用史诗来将问题分组的功能对于保持对多个讨论、问题和项目的控制非常必要，这些讨论、问题和项目共同朝着解决方案迈进。
- en: Time tracking
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间追踪
- en: With this feature, you can track how much time is being spent on issues and
    merge requests. You can also track what was estimated, to see where you stand.
    It is part of GitLab Core.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过此功能，您可以追踪在问题和合并请求上花费了多少时间。您还可以追踪预估时间，以了解自己的进展情况。此功能是 GitLab Core 的一部分。
- en: 'In the following screenshot, we can see that for an issue in the eventmanager
    project some time has been estimated and spent:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，我们可以看到，在 eventmanager 项目中，某个问题的时间已经被预估和使用：
- en: '![](img/89c5d5d7-8119-4cbb-b541-7161e9571d50.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/89c5d5d7-8119-4cbb-b541-7161e9571d50.png)'
- en: In the body of an issue or merge request, and in comments, you can use quick
    actions to enter the estimated and spent time for the issue. It can only be done
    by team members.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在问题或合并请求的正文中，以及在评论中，您可以使用快捷操作输入该问题的预估时间和已用时间。此操作仅限团队成员执行。
- en: 'As seen in the following screenshot, you can use `/estimate`, followed by the
    unit of time. If something will take five days and four hours, you would write
    `/estimate 5d 4h` in a comment and, after that, press Comment. There can only
    be one estimate. You can also remove it by using `/remove_estimate`. Here''s the
    screenshot for reference:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，您可以使用 `/estimate`，后跟时间单位。如果某个任务需要五天四小时，您可以在评论中写 `/estimate 5d 4h`，然后按下评论按钮。每个问题只能有一个预估时间。您也可以通过使用
    `/remove_estimate` 来删除预估时间。以下是参考截图：
- en: '![](img/3c985bf3-f1b3-4dbe-80cb-bcc5c9004668.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c985bf3-f1b3-4dbe-80cb-bcc5c9004668.png)'
- en: In the same manner, you can record how much time has been spent on the issue.
    Members of the project can use a quick `/spent` action in issues and merge requests
    to add time to a total amount of time that is dedicated to an issue. For example,
    if two hours have been spent, you issue `/spent 2h`, and it will show in the right
    panel. You can even remove time spent by using negative numbers, for instance, `/spend
    -1h`. It won't go below 0, but will reset the number. You can remove the total
    at once with `/remote_time_spent`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你可以记录在问题上花费的时间。项目成员可以使用快速`/spent`操作在问题和合并请求中添加时间，累计专门用于某个问题的总时间。例如，如果已经花费了两个小时，你可以发出`/spent
    2h`，它将在右侧面板显示。你甚至可以通过使用负数来删除花费的时间，例如，`/spend -1h`。它不会低于0，但会重置该数字。你也可以使用`/remote_time_spent`一次性移除所有已花费的时间。
- en: Quick actions
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速操作
- en: A very handy feature in GitLab is the quick action. You can use a `/` with certain
    keywords to trigger a command on issues, epics, merge requests, and commits, just
    like you can with something like IRC chat. It is faster than using GitLab's web
    buttons or other controls. Remember to put each *command* on a separate line,
    otherwise it will be parsed incorrectly. Once they are parsed and executed, they
    will be removed from the text and nobody can see them. There is, of course, an
    audit trail for the action executed**.**
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab 中一个非常方便的功能是快速操作。你可以使用带有特定关键字的`/`来触发对问题、史诗、合并请求和提交的命令，就像使用 IRC 聊天一样。这比使用
    GitLab 的网页按钮或其他控件要快。记得将每个*命令*放在单独的行上，否则它将被解析错误。一旦它们被解析并执行，它们将从文本中被移除，其他人无法看到它们。当然，执行的操作会有审计日志**。**
- en: 'Some samples of quick action are as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一些快速操作的示例如下：
- en: '`/todo`: Add a todo item from the comment'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/todo`：从评论中添加一个待办事项。'
- en: '`/done`: Mark the todo as done'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/done`：标记待办事项为已完成。'
- en: '`/close`: Same as clicking the close button'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/close`：与点击关闭按钮相同'
- en: '`/assign me` or `@someone else`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/assign me` 或 `@其他人`'
- en: '`/milestone %milestone`: Set a milestone from the comment'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/milestone %milestone`：从评论中设置一个里程碑。'
- en: '`/estimate <1w 3d 1h 10m>`: Add a time estimation'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/estimate <1w 3d 1h 10m>`：添加时间估算'
- en: '`/due <in 1 day>`: Set a due date'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/due <in 1 day>`：设置截止日期'
- en: '`/approve`: Approve a merge request'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/approve`：批准合并请求'
- en: 'Special quick action for commit messages: `/tag v1.5` – Tag immediately a commit
    with a message of choice'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交消息的特殊快速操作：`/tag v1.5` – 立即为提交添加一个自定义消息标签。
- en: 'You can find all quick actions here: [https://docs.gitlab.com/ee/user/project/quick_actions.html](https://docs.gitlab.com/ee/user/project/quick_actions.html)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在此处找到所有快速操作：[https://docs.gitlab.com/ee/user/project/quick_actions.html](https://docs.gitlab.com/ee/user/project/quick_actions.html)
- en: The Project Issue board
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目问题看板
- en: Hidden in GitLab is a very nice project management feature. It is called the
    *Project Issue board*. It can be used to implement a workflow by using visualization
    and can help to plan and organize. It does not enforce one way of working. You
    have to organize and form your own process. The boards are heavily dependent on
    labels, which are used to group issues into lists.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab 中隐藏着一个非常实用的项目管理功能，它被称为*项目问题看板*。它可以通过可视化来实现工作流，并帮助进行规划和组织。它并不强制要求某种工作方式，你需要自己组织并形成工作流程。看板强烈依赖于标签，这些标签用于将问题分组到不同的列表中。
- en: 'If you go to the issues in the left navigation bar, you will find the option
    Boards. By default, you get a board called Development that offers basic lanes
    such as Open, To Do, Doing, and Closed. You can drag issues from lane to lane,
    indicating a change in state. For instance, if an issue is done, you drag it to
    Closed. What happens is that the issue will automatically get the label Closed.
    The following screenshot is an example of the project issue board for the eventmanager
    project:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你进入左侧导航栏中的“问题”部分，你会找到“看板”选项。默认情况下，你会看到一个名为“开发”的看板，提供了基本的流程，如“打开”，“待办”，“进行中”和“已关闭”。你可以将问题从一个流程拖动到另一个流程，表示状态发生了变化。例如，如果一个问题已经完成，你可以将其拖动到“已关闭”。这样，问题会自动获得“已关闭”标签。以下截图是
    eventmanager 项目问题看板的示例：
- en: '![](img/6698305c-19b9-4ee4-b610-c10455e10b26.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6698305c-19b9-4ee4-b610-c10455e10b26.png)'
- en: 'If you use GitLab Enterprise Edition, you can even have multiple issue boards,
    which can mean several things:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 GitLab 企业版，甚至可以拥有多个问题看板，这可以意味着几种情况：
- en: 'A board can be shared by multiple teams: Group Issue boards.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个看板可以由多个团队共享：团队问题看板。
- en: Each team can have its own boards.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个团队可以拥有自己的看板。
- en: There are several views for projects, based on the scope of the board (milestone,
    label, assignee and weight).
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据看板的范围（里程碑、标签、分配人和权重），项目有几种不同的视图。
- en: 'In the following screenshot, you can see how to create a new issue board by
    clicking on the drop-down list saying Development. The default board is as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f2a5103-5893-4323-b023-a104de6a96c4.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
- en: 'When you click on Create new board you will be presented with a form to enter
    the name of the new board, and the scope of the board. As with a label, it is
    just an attribute of an issue that is used to group or aggregate. Let''s choose
    to focus on milestones, and choose the milestone MVP3, which is the minimum viable
    product coming out of sprint 3, which is shown as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/88732478-0e27-4780-8616-ace7f4e47004.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
- en: 'After creation, you will be presented with an issue board including the issues
    that are already assigned to a milestone. You can add issues (which then are coupled
    to the milestone) with the Add Issues, which is shown in the following example:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f75284f7-21b1-4791-8a95-babcf83682e5.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
- en: Issue boards can function as information radiators for teams, it organizes issues
    in the way you want and can be the subject of conversation for a team meeting.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Todos
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A planning feature that is useful for the individual user is *todo*. Notification
    emails can pile up in your inbox and get messy. An easy-to-use todo list, where
    you can view your tasks sorted chronologically, is more focused. You will find
    them at the top of your navigation bar, as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c77e7e73-c76e-4251-a06d-092f2930c9f8.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
- en: 'When you have clicked the todo item, you will see a list of your todos with
    the option to sort in different fields, as shown in the following example:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b12f422a-90eb-4e86-8b1c-794789e65dfa.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
- en: 'The following items could trigger a todo item:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: An issue or merge request is assigned to you.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Being `@mentioned` in an issue, merge request, commit, or epic.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A failed job in one of your project CI/CD pipelines that has been marked *not
    allowed to fail*.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When in an automatic pipeline, a merge request has a conflict.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DevOps phase – create it
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the project has been planned by creating issues, milestones and so
    on, it is time to really start building. The next phase is *Create*, and GitLab
    provides several tools to help you with this. Before you start building, you should
    make sure your project and group structure is adequate for cooperation.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: Projects and groups
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The *Event Horizon* company has created two groups in GitLab. One group is
    called it and another Marketing, as shown in the following screenshot:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/16a8f1ba-2ad6-4c35-a5fd-36399e17cb81.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
- en: 'We have created two separate projects in this context. The first one is called
    eventmanager, which will hold the source code for the technical solution. You
    can create this project by clicking on New Project if this is your first project,
    or click on the + icon in the top navigation bar. The form to create a new project
    appears as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/78893e6f-c89e-4b23-9e6f-511927698361.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
- en: The title of the project is `eventmanager`, and it will also appear in the URL.
    Take a good look at the first part of the URL. This is the namespace that defaults
    to your own, but we want this project to be in the it group. When you do that,
    you will notice that visibility is automatically set to Private. This is because
    the group *it* has this as default.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 项目的标题是`eventmanager`，它也会出现在URL中。仔细查看URL的第一部分。这是命名空间，默认情况下是你自己的命名空间，但我们希望这个项目位于it组中。当你这么做时，你会注意到可见性会自动设置为私密。这是因为*it*组将其作为默认设置。
- en: Finally, we want this project to be accompanied by a README, so we need to choose
    to automatically create it. Don't worry about what the project will look like,
    we will iterate on it in the sprint.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们希望这个项目能附带一个README文件，因此我们需要选择自动创建它。不要担心项目的外观，我们将在迭代开发中进行改进。
- en: 'Next, there is a second project called eventmanager-documentation, which will
    consist of the documentation. We will use GitLab pages as a technology to build
    our user documentation, and will choose Pages/Plain HTML as a template. This is
    shown in the following screenshot:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，有一个名为eventmanager-documentation的第二个项目，它将包含文档内容。我们将使用GitLab Pages作为技术来构建我们的用户文档，并选择Pages/Plain
    HTML作为模板。如下图所示：
- en: '![](img/769af59f-3e7c-4393-ab1f-47055da684e1.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/769af59f-3e7c-4393-ab1f-47055da684e1.png)'
- en: 'You have to enter the Project name and Project slug and determine the visibility,
    as per the following example:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要输入项目名称和项目标识符，并根据以下示例确定可见性：
- en: '![](img/12daa600-92cf-4ef9-9831-a50e203f0002.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/12daa600-92cf-4ef9-9831-a50e203f0002.png)'
- en: 'If you click on projects you will see a list of two projects, as shown in the
    following example:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击“项目”，你将看到两个项目的列表，如下所示的示例：
- en: '![](img/16e55002-fa0a-4280-9b2b-a7f79d5b6887.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16e55002-fa0a-4280-9b2b-a7f79d5b6887.png)'
- en: Now we have our project and group structure ready, let's deal with other features
    that promote cooperation.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的项目和组结构已经准备好，让我们处理其他促进合作的功能。
- en: Snippets
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码片段
- en: 'If you have worked with GitHub as a developer, you will have seen *gists* before.
    These are little pieces of code that are usable for more than one goal. Often
    they could exist in several code repositories, but they are available as gists
    to be reused. In GitLab this concept is known as *snippets*. They are also used
    as examples to be discussed about, and so on. The following example is a screenshot
    of a new snippet:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾作为开发者使用过GitHub，你应该见过*gists*。这些是可以用于多个目的的小段代码。它们通常会出现在多个代码仓库中，但也可以作为gists进行重用。在GitLab中，这个概念被称为*snippets*（代码片段）。它们也可以用作讨论示例，等等。下面的示例是一个新的代码片段截图：
- en: '![](img/63280b2c-6bb3-4fcb-b259-8b9faf27b99d.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/63280b2c-6bb3-4fcb-b259-8b9faf27b99d.png)'
- en: 'You can create snippets on a personal and project level. They can be made public,
    and there is even an option to embed them in your own site, as shown in the following
    example:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在个人和项目级别创建代码片段。它们可以设置为公开，甚至有一个选项可以将它们嵌入到你自己的网站中，如下所示的示例：
- en: '![](img/ac8e612a-2dd6-47e7-8a44-1cc70ed8be25.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac8e612a-2dd6-47e7-8a44-1cc70ed8be25.png)'
- en: Snippets can be used to share information, and using them could help to fulfill
    the requirement for the platform to enhance collaboration.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 代码片段可以用来共享信息，使用它们可以帮助实现平台的需求，从而增强协作性。
- en: Web IDE
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web IDE
- en: 'As of GitLab 10.4, an enhanced web editor is available in GitLab that gives
    you the ability to work on code online from the web. It offers many different
    features, including syntax highlighting for the most common languages (PHP, Ruby,
    Shell, Python, Java, C) and markup languages (XML, Markdown, and HTML). It is
    based on the Monaco editor which you can find here: [https://microsoft.github.io/monaco-editor/](https://microsoft.github.io/monaco-editor/).'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 从GitLab 10.4版本开始，GitLab提供了增强版的Web编辑器，使你能够在网页上在线编辑代码。它提供了许多不同的功能，包括对最常用语言（PHP、Ruby、Shell、Python、Java、C）和标记语言（XML、Markdown、HTML）的语法高亮显示。它基于Monaco编辑器，你可以在这里找到它：[https://microsoft.github.io/monaco-editor/](https://microsoft.github.io/monaco-editor/)。
- en: The Event Horizon company can also develop their software in the Web IDE. It,
    of course, has support for Ruby, the language in which GitLab is mostly written.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Event Horizon公司也可以在Web IDE中开发他们的软件。当然，它支持Ruby，这是GitLab主要编写的语言。
- en: 'In the following screenshot, you will see a file from the eventmanager project
    shown in the web IDE:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下截图中，你将看到在Web IDE中显示的eventmanager项目的文件：
- en: '![](img/bd912d94-4f5c-44be-a913-fc7fba03bd12.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bd912d94-4f5c-44be-a913-fc7fba03bd12.png)'
- en: Use of this tool would also enhance collaboration within Event Horizon.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此工具还将增强Event Horizon内部的协作。
- en: Wiki
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Wiki
- en: While we have created a separate project to provide documentation for our new
    software product, GitLab also has a system for creating documentation by default.
    It is the Wiki feature. Every project can easily enable this feature and you will
    then have a full-blown wiki system available.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: 'When you navigate to the Wiki through the left navigation bar in your project
    you will be presented with the following screen:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc78b5a8-14f0-4570-b4a0-87cdf7b6310f.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
- en: 'If you create a new wiki, you will have to provide a title, the markup language
    used, and then you can start adding content. As all the information is itself
    saved in an accompanying Git repository, you can give the Commit message, because
    saving the page is creating a new commit, as shown in the following screenshot:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/be27fe4a-7785-48ba-9242-2d4f5f94108a.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
- en: 'Once created, you will see the page if you click on Wiki the next time. You
    can now create more pages (even a page hierarchy if you want) and you can view
    the page history (everything is versioned), as shown in the following example:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f1a91978-c93e-4073-92fa-71d87511502e.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
- en: As you can see, Wiki is another feature that enhances collaboration between
    employees.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: Protected branches
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because in Git it is possible to rewrite the entire history, GitLab has some
    mechanisms built in to help mitigate this risk. You can use *protected branches*.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: 'Protected branches have the following characteristics:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Before GitLab 11.9 you could not create a protected branch, only *Maintainers* could
    (as of 11.9 Developers can create them).
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only Maintainers can push directly to a protected branch.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is prohibited to use force push to a protected branch.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A protected branch cannot be deleted.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The only way to accept changes into a protected branch is to use merge requests.
    By default, the master branch is a protected branch. The following example is
    the screenshot for the protected branch:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/66b43538-9e8e-4168-b388-7f460319e0b8.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
- en: Using a protected branch forces the use of code reviews, which is a requirement
    for the eventmanager project.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Merge requests
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So, the first version of eventmanager is almost ready. User1 has uploaded the
    latest changes to branch MVP1, and is ready to create a merge request, as shown
    in the following screenshot:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fbf0fb17-6e49-4f26-b06d-48aed53299de.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
- en: 'You can see the usage of quick actions by specifying `Closes #2, #3` in the
    Description field.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: 'If you scroll down, you will see there is a section to view in which changes
    are introduced to the master branch when you accept this merge request. It shows
    you how many changes (6) are in our example, which files are changed, and what
    was changed. This is shown in the following screenshot:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e2520de-1d1b-46b9-8222-832d5e61d423.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
- en: 'You can see User3 has been added as merge request approver, so he or she has
    to review the changes, as shown in the following screenshot:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b7cb0024-8448-4b14-a3b6-45a2f43c7789.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
- en: 'At the bottom of the screen, you can see which branches will be merged by this
    merge request, and you can specify to delete the originating branch and/or squash
    the changes (which means all changes are placed under one commit). This is shown
    in the following example:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dd450b1b-deef-4ecf-858f-a7b7cd18b994.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
- en: 'If User3 logs in, he will have a todo item for reviewing this merge request.
    As an example, let''s pretend User3 did a review and placed some comments. Let''s
    look at part of the `index.erb` file that is used in the eventmanager app to display
    a message saying that someone is invited to an event. You can find the file in
    the code examples ([https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter09/eventmanager](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter09/eventmanager)).
    Here''s the snippet of code that is picked by the reviewer as troublesome:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'User3 thinks the text `You are invited to my event on December 15!` is too
    specific. Better to keep the text simple. He wants to suggest changing the text
    to `You are invited to my event!`. He can add a suggestion using a quick action
    in markdown format in the review comment, shown as follows:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/773aa9c6-8a8b-40f4-842c-e979e4867a41.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
- en: 'After saving the comment, it looks like the following example:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0075c5aa-a348-46d8-bb42-b3bf5e2b80cb.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
- en: 'User3 can finish his review now. User1 gets a notification that the merge request
    has been reviewed. As he logs in and navigates to the review comment in the merge
    request, he will discover the suggestion made by User3 with a button to apply
    the suggestion. The comment will automatically be marked as resolved, as shown
    in the following example:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2d930d16-30e2-4617-88fa-c4943a7ff468.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
- en: 'There is another comment by User3 about an entry in the `attendees.yml` file,
    shown in the following code:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'There are no sample entries in `attendees.yml` with a `YES`, so Users3 suggests
    to change one entry, as shown in the following screenshot:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5edcaf02-bebb-4548-8e2b-629c3acfafd8.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
- en: 'Unfortunately, the customer who attends the demo at the end of the sprint was
    not informed about the possibility to have an entry with `No`. There are also
    no real tests defined, so User1 decides to push this comment as an issue for the
    next iteration of the product, as shown in the following example:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f838d90b-5466-4f1d-a392-6cabf6b0ce70.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
- en: 'When all discussion points are resolved, the merge request can be approved
    by User3, as shown in the following screenshot:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eb945dfa-49dc-4f8d-aa5f-6ac0aeadd115.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
- en: The merge request feature is one of the most important reasons to use GitLab.
    You can merge code or text in a project and cooperate on it.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: DevOps phase – verify your product
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next phase in the DevOps life cycle is *Verify*. After building your product
    in the create phase, you need to verify whether the product meets the requirements,
    is secure, and that the quality in general is OK. This can all be done from within
    GitLab, by using the **continuous integration** (**CI**) features. In the following
    sections, we will discuss a number of components of the CI pipeline.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Code Quality reports
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A nice feature that verifies code quality is a quality scan with CI/CD in GitLab.
    It makes use of the open source and free Code Climate engines ([https://codeclimate.com/](https://codeclimate.com/)).
    It is embedded in a special Docker container that you can run within your GitLab
    runner. The following code is an example of a `.gitlab-ci.yml` file that runs
    such a scan:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When the jobs runs, the following logging is produced:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After downloading the Docker container, it will start scanning the code. When
    the scanning is complete a report is generated, as follows:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To view the report, download the artifact from the right, where there are links
    to it. The following example shows the screenshot of the Job artifacts tab:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/883e46ea-37c0-49e2-ad72-68a0d22681ab.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
- en: 'If you open the report with an editor to properly format it, it will show warnings
    or high or critical findings. In the case of the eventmanager project, it found
    an unused variable, as follows:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Please notice the `"remediation_points": 50000,` entry, which scores the finding.
    This is different depending on the category finding, and can be used to compare
    total scores of several scans, showing you the progress (or decline) of total
    quality.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: 'There follows the block of code that was mentioned in the report:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can see that in the first line there is a `letter` variable that is unused
    in the loop. If we change `letter` to `_letter` the test should not report it
    as a warning anymore. Unused variables are reported as a warning, you can suppress
    the warning with an underscore.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: After the next run of the CI pipeline, the code quality scan will show that
    nothing was found, the report will be empty.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: You can use Code Quality reports as well in merge requests. It can run before
    merge and you can compare remediation points. If there are likely to be critical
    findings, the job would show as failed and in red. Now that we have verified that
    the application is of minimum quality, we also want to verify if the app or website
    is OK for users. We can build review versions on which to perform manual tests.
    This is our next section.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Review apps
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The ultimate verification of your software product is to run all tests available
    and even mimic production. In GitLab, this can be accomplished by using GitLab
    CI and GitLab runners. For this to work, we will show an example using the eventmanager
    documentation site. One of the requirements of the project is, of course, creating
    documentation. We also created a separate project for it called **eventmanager-documentation**.
    There are already web pages present, so let''s automate the review process (also
    one of the requirements: more automation). We are going to use an Amazon S3 bucket,
    which has been enabled to act as a webserver (you can find information about how
    to configure them here: [https://docs.aws.amazon.com/AmazonS3/latest/dev/HowDoIWebsiteConfiguration.html](https://docs.aws.amazon.com/AmazonS3/latest/dev/HowDoIWebsiteConfiguration.html)).'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: 'To upload files to a S3 bucket, you need to authenticate with AWS. We can add
    secret variables to the project that contain the credentials for AWS that are
    needed. You can find them under Project | Settings | CI/CD | Environment variables, as
    shown in the following screenshot:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cd725037-c403-46e1-9f8d-ec61365741d6.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
- en: 'When the `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` variables are present,
    you can execute aws-cli actions within GitLab CI/CD pipelines. The `.gitlab-ci.yml`
    file that is used to deploy review apps is shown as follows:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The job is called review apps, as seen on the first line. Then, after that,
    a variable is declared, the S3 bucket name. Next is the Docker image name that
    is used, which in this case is an image with Python installed, so we can make
    use of the Python-based AWS CLI utility that is installed in the script section.
    The last line contains the AWS CLI command to copy a file to an S3 bucket, and
    it authenticates through the environment variables that we have set.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: After saving this file, the job will run, and if all goes well the HTML files
    are uploaded to your bucket. If you follow the job log you will see the following.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: 'First, it gets the container:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Then it clones the repository:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'It installs the Amazon CLI tool:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then it uploads the HTML files to the S3 bucket:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When the job succeeds, the review environment will be created in GitLab. You
    can click on the review link, as shown in the following example:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b45f1a72-2652-40a5-b863-a0c8f53c837b.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
- en: 'The next page will show a list of deployments in the review environment, as
    follows:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3e9e71e5-9e53-49c7-900e-642b50867e52.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
- en: 'You can add the URL to the environment manually via edit, as follows:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2facc908-2686-4f3b-bb59-769e2f5d49fd.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
- en: 'After adding the URL to the environment, a button View deployment is available,
    as follows:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/295c2f85-6e0d-45ce-80bb-5e334070b4a2.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
- en: 'If you click View deployment, you will be taken to the review app, as follows:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/878655ac-e1b1-4918-bda7-3371d0d2336d.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
- en: As of version 12.0 of GitLab, you will have a 'review button' next to 'view
    app' in the pipeline view. It will then run the review app with a little form
    in the corner where you can enter feedback. This input will be directly inserted
    into the issue.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8f9d8974-3e6c-4f2e-948a-6aac995877a9.png)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
- en: So, to verify our project we have used Code Quality reports for the eventmanager
    code. We learned that, initially, there was a warning that a variable was not
    used. We recommended a fix and we ran the pipeline again, and the warning went.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: We have demonstrated the use of a review app for the documentation project.
    Using this review app we could verify that our initial requirements were met.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: Both methods of automation implemented in your pipeline will greatly enhance
    your Agility and DevOps capabilities. When you find errors, you can correct them
    and run the pipeline again.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: DevOps phase – package it for use
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GitLab use Docker containers in their products for several purposes. To store
    container images that were custom built for projects they also added Docker Container
    Registry functionality to GitLab. By using this, you avoid having to store images
    in a remote location that is maybe not safe enough. The container registry is
    the subject of the next section.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: GitLab container registry
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you have the container registry enabled in GitLab, you can store Docker
    images that are built in your CI/CD process. To enable this GitLab feature, you
    have to reconfigure your GitLab instance and enable the registry functionality**.** When
    enabled, there will be a registry menu item on the left for each project. If you
    click on it, you can view the contents of the registry and instructions on how
    to use it, as shown in the following screenshot:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c89375d3-ed66-4fe1-a27d-155bee19a4f7.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
- en: 'To store images in it for later use you have to edit your CI/CD configuration
    file in the root of your project. Here''s an example for the eventmanager project:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To summarize the file, it defines a build job. On the second line, the image
    to use is defined as `docker:stable`. Because this image will build a docker container
    itself, it uses the `docker:dind` service, which enables Docker in Docker functionality.
    Then, in the variables section, there are two Docker variables defined: the Docker
    host to connect to (which is the docker engine and it will build a container itself)
    and the Docker storage driver to use, which is overlay2\. The stage defined is
    build. Then, in the scripts section, the actual script is given, which is really
    a basic Docker build, which is preceded by a login to the GitLab Docker registry
    and followed by a push to that location. You can see variables that start with
    `$CI_REGISTRY`. These are predefined variables available within GitLab to use
    and make use of one time tokens.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: When you save this file in the Web IDE, or push it to GitLab, the new pipeline
    will run immediately. If it does not run, or says there is no runner available,
    check if your runner is running in privileged mode. It needs this to run `docker:dind`.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: 'After the image is finished, it is pushed to the GitLab registry with the latest
    tag. If this is successful the job has succeeded and will be green, as shown in
    the following code:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You can verify afterwards that the container is present in the registry by
    navigating to the registry page of your project, as follows:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3c2bf385-be47-46b2-a1ef-f0292a65422e.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
- en: The registry is a secure way to store image artifacts from the CI/CD pipeline.
    In the DevOps pipeline, it is part of the Package phase.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has tried to explain the GitLab flow using an example. Going through
    the first phases of the model with the eventmanager example demonstrates why GitLab
    is a tool that has sprung from the Agile revolution. From idea to implementation,
    every step can be automated and is very customizable. In the next chapter, we
    will continue the pipeline by looking at the Release and Configure phases.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the first phase of the DevOps cycle?
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the most important unit of information in GitLab?
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why is it possible to turn comments into a discussion?
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you give an estimate of four days for an issue?
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you enforce a review mechanism in GitLab?
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What kind of setting does a GitLab Runner need to run a Code Quality scan?
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you enable the link to a deployed environment?
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What do you need to do to enable the Registry link in a project?
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-285
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Comprehensive Ruby Programming* by *Jordan Hudgens*: [https://www.packtpub.com/application-development/comprehensive-ruby-programming](https://www.packtpub.com/application-development/comprehensive-ruby-programming)'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Learn Docker - Fundamentals of Docker 18.x* by *Gabriel N. Schenker*: [https://www.packtpub.com/networking-and-servers/learn-docker-fundamentals-docker-18x](https://www.packtpub.com/networking-and-servers/learn-docker-fundamentals-docker-18x)'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*AWS Automation Cookbook* by *Nikit Swaraj*: [https://www.packtpub.com/virtualization-and-cloud/aws-automation-cookbook](https://www.packtpub.com/virtualization-and-cloud/aws-automation-cookbook)'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Effective DevOps with AWS - Second Edition* by *Yogesh Raheja*, *Giuseppe
    Borgese*, and *Nathaniel Felsen*: [https://www.packtpub.com/virtualization-and-cloud/effective-devops-aws-second-edition](https://www.packtpub.com/virtualization-and-cloud/effective-devops-aws-second-edition)'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
