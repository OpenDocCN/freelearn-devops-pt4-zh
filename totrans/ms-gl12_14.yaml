- en: The Release and Configure Phase
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布和配置阶段
- en: In this chapter, we will take automation one step further than before. We will
    start by showing you how to deploy your code to a staging environment after testing
    and ultimately to production. This is a basic concept in the DevOps transition.
    We will finish this chapter by explaining about Auto DevOps, a way to fully automate
    the deployment to a Kubernetes cluster with integrated testing, security scanning,
    and even performance tests. This is considered the optimal DevOps path by GitLab.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将进一步推进自动化。我们将首先展示如何在测试后将您的代码部署到预发布环境，并最终部署到生产环境。这是DevOps转型中的一个基本概念。本章的最后，我们将解释Auto
    DevOps，它是一种将部署完全自动化的方式，通过集成测试、安全扫描，甚至性能测试，将代码部署到Kubernetes集群。这被GitLab视为最优的DevOps路径。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Continuous Deployment with deployment to Amazon Web Services
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Amazon Web Services上进行的持续部署
- en: Auto DevOps with the use of a Kubernetes cluster in Google Cloud
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Google Cloud中的Kubernetes集群进行Auto DevOps
- en: Technical requirements
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow along with the instructions in this chapter, please download this
    book's GitHub repository, along with the examples, at [https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter11](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter11).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟随本章中的指示，请下载本书的GitHub仓库以及示例：[https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter11](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter11)。
- en: Here, in the `Chapter11` directory, you will find two applications that are
    used for the examples in this chapter.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Chapter11`目录下，您将找到两个应用程序，它们用于本章中的示例。
- en: 'To run certain automation scripts, you need an **Amazon Web Services** (**AWS**)
    account, which can be created here: [https://aws.amazon.com/free/](https://aws.amazon.com/free/).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行某些自动化脚本，您需要一个**Amazon Web Services**（**AWS**）账户，您可以在此创建：[https://aws.amazon.com/free/](https://aws.amazon.com/free/)。
- en: For the instructions on how to create a cluster on the **Google Kubernetes Engine**
    (**GKE**), you also need a Google account that you can use with Google Cloud,
    which you can create here: [https://cloud.google.com/products/search/apply/](https://cloud.google.com/products/search/apply/).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何在**Google Kubernetes Engine**（**GKE**）上创建集群，您还需要一个可以与Google Cloud一起使用的Google账户，您可以在此创建：[https://cloud.google.com/products/search/apply/](https://cloud.google.com/products/search/apply/)。
- en: Continuous Deployment
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续部署
- en: Continuous Deployment, as explained in [Chapter 9](806c9f1d-24fc-477e-93ef-d0ea1de66530.xhtml), *GitLab
    Vision – The Whole Toolchain in One Application*, is an extension of Continuous
    Integration, aiming at minimizing cycle time; that is, the time it takes to produce
    one new line of code by a development team and it being deployed in the production
    environment. We will demonstrate this practice by deploying the `eventmanager`
    Ruby code to Amazon Elastic Beanstalk, a service for deploying and scaling web
    applications and services that have been developed with a multitude of languages
    on different platforms.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第9章](806c9f1d-24fc-477e-93ef-d0ea1de66530.xhtml)所述，持续部署是**GitLab愿景——一个应用中的完整工具链**的延伸，它是持续集成的扩展，旨在最小化周期时间；也就是开发团队生产一行新代码并将其部署到生产环境的时间。我们将通过将`eventmanager`
    Ruby代码部署到Amazon Elastic Beanstalk来演示这一实践，Elastic Beanstalk是一种用于部署和扩展使用多种语言在不同平台上开发的Web应用程序和服务的服务。
- en: 'There is also the option to create Ruby environments running a Puma web server. Let''s
    log in to the AWS web console ([https://console.aws.amazon.com/console/](https://console.aws.amazon.com/console/))
    and click on the Services tab. We can use the search option to find something
    within the huge range of services that are available within the Amazon Cloud:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个选项是创建运行Puma Web服务器的Ruby环境。让我们登录AWS web控制台（[https://console.aws.amazon.com/console/](https://console.aws.amazon.com/console/)），并点击“服务”标签。我们可以使用搜索选项在Amazon
    Cloud的广泛服务中查找某些内容：
- en: '![](img/faf4a6f9-e1d3-4e98-904e-dc661368092e.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/faf4a6f9-e1d3-4e98-904e-dc661368092e.png)'
- en: 'Type `beanstalk` into the Find Services widget and click the link it finds.
    Choose to create a new environment:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在“查找服务”小部件中输入`beanstalk`，然后点击它找到的链接。选择创建一个新环境：
- en: '![](img/5358dd47-4595-4974-b3dc-810a4c63e7a3.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5358dd47-4595-4974-b3dc-810a4c63e7a3.png)'
- en: 'The environment will deploy. When it''s finished, you can view it in the dashboard:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 环境将被部署。当完成后，您可以在仪表板中查看：
- en: '![](img/1749b501-c546-4b3e-86dd-75cee607b849.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1749b501-c546-4b3e-86dd-75cee607b849.png)'
- en: 'We are going to use CI/CD for our Continuous Deployment strategy. First, we
    will create a `.gitlab-ci.yml` file with different stages (staging and production).
    The first part of this file will define the variables to be used in the different
    stages. Here, we will define a `S3_BUCKET_NAME`, which will be used to copy a
    deployment package to, a `REGION` to specify where the service will be hosted,
    and finally an `APPNAME`, which corresponds to the app name in Amazon Beanstalk:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 CI/CD 作为持续部署策略。首先，我们将创建一个 `.gitlab-ci.yml` 文件，包含不同的阶段（暂存和生产）。该文件的第一部分将定义在不同阶段使用的变量。在这里，我们将定义一个
    `S3_BUCKET_NAME`，该变量将用于复制部署包，`REGION` 用于指定服务的托管位置，最后是 `APPNAME`，它对应于 Amazon Beanstalk
    中的应用名称：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We need to run our tests before we can advance to the next stage. In the following
    code, on the second line, we specify a Docker image with Ruby installed to run
    our tests. In the script section, run the default `rspec` tests:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在推进到下一阶段之前运行我们的测试。在以下代码中，第二行指定了一个安装了 Ruby 的 Docker 镜像来运行我们的测试。在脚本部分，运行默认的`rspec`测试：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This step will use the dpl tool ([https://github.com/travis-ci/dpl](https://github.com/travis-ci/dpl))
    to interface with Amazon Beanstalk and deploy to the staging environment:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个步骤将使用 dpl 工具（[https://github.com/travis-ci/dpl](https://github.com/travis-ci/dpl)）与
    Amazon Beanstalk 进行交互并部署到暂存环境：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you can see, we also need to get AWS credentials from somewhere (`$AWS_ACCESS`
    variables). We can define these variables in the CI/CD environment variables section
    of the settings of the `eventmanager` project. Now, we will use a feature called
    *multiproject pipelines*, which has been available since GitLab 11.8\. We are
    going to define a *bridge job*, which will run the default pipeline in the `eventmanager-documentation`
    project:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们还需要从某处获取 AWS 凭证（`$AWS_ACCESS` 变量）。我们可以在 `eventmanager` 项目的设置中定义这些变量，放在
    CI/CD 环境变量部分。现在，我们将使用 GitLab 11.8 版本以来提供的 *多项目管道* 功能。我们将定义一个 *桥接作业*，该作业将在 `eventmanager-documentation`
    项目中运行默认管道：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We also want to deploy to production. We created a separate Beanstalk instance
    for that with an environment named `production`. But what if we want the last
    step to remain a manual one? Then we need to define a control structure with `when:manual`,
    which means that the step has to be manually initiated:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还想部署到生产环境。为此，我们为其创建了一个名为 `production` 的独立 Beanstalk 实例。但如果我们希望最后一步保持为手动触发的步骤呢？那么我们需要定义一个带有
    `when:manual` 的控制结构，这意味着该步骤必须手动启动：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you save this `.gitlab-ci.yml` file (and commit and push it), it will start
    a deployment. If you click on the pipeline, you will get an overview of the jobs:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你保存这个 `.gitlab-ci.yml` 文件（并进行提交和推送），它将开始部署。如果你点击管道，你将看到作业概览：
- en: '![](img/c100a590-fab5-4919-9049-62a4bdbc93e9.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c100a590-fab5-4919-9049-62a4bdbc93e9.png)'
- en: 'In the preceding screenshot, you can see the stages. First, there''s the test
    stages, which run the `rspec` tests. The `deploy_documentation` job triggers a
    downstream pipeline (`eventmanager-documentation`). Simultaneously, the deployment
    to the staging area starts. Let''s click on the job that starts:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，你可以看到各个阶段。首先是测试阶段，运行 `rspec` 测试。`deploy_documentation` 作业触发下游管道（`eventmanager-documentation`）。同时，部署到暂存区域也开始了。让我们点击开始的作业：
- en: '![](img/cb94d538-4415-44ba-a1d2-01f8eb66974d.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cb94d538-4415-44ba-a1d2-01f8eb66974d.png)'
- en: 'By looking at the log file of the deployment to the staging area, you will
    find the following code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看部署到暂存区域的日志文件，你将看到以下代码：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The container installs the dpl dependency:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 容器安装了 dpl 依赖：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'It then runs the deployment:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它运行部署：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The dpl tool only runs if the Git repository is clean:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: dpl 工具仅在 Git 仓库为干净状态时运行：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: There is no feedback about the upload except for the message stating that the
    application has been deployed. You can verify this deployment by visiting the
    URL that is mentioned in the Beanstalk environment that was created with the AWS
    console.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 除了显示应用已部署的消息外，没有关于上传的反馈。你可以通过访问在 AWS 控制台中创建的 Beanstalk 环境中提到的 URL 来验证此部署。
- en: You can manually trigger the deploy job to production from the diagram, which
    is where we saw the play button.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从图示中手动触发部署到生产环境的作业，这就是我们看到播放按钮的地方。
- en: 'In GitLab, you can go to Operations | Environments | Production to view the
    deployments. You can also roll back to an earlier release:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitLab 中，你可以前往操作 | 环境 | 生产查看部署情况。你也可以回滚到先前的发布版本：
- en: '![](img/7fa416e6-7849-4011-9515-4afcaf847cc7.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7fa416e6-7849-4011-9515-4afcaf847cc7.png)'
- en: In this section, we have showed you how to implement a deployment pipeline using
    Gitlab CI and GitLab runners. You can create them just by using shell scripts
    and make them as elaborate as you want by using multiproject pipelines and advanced
    syntax.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们向你展示了如何使用GitLab CI和GitLab Runner实现一个部署管道。你只需使用Shell脚本创建它们，并通过使用多项目管道和高级语法让它们变得更加复杂。
- en: Auto DevOps
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Auto DevOps
- en: By default, Auto DevOps is turned on for every project. It is essentially a
    very elaborate `.gitlab-ci.yml` file, which outlines the entire DevOps pipeline
    from the creating phase onward.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Auto DevOps在每个项目中都是开启的。它本质上是一个非常复杂的`.gitlab-ci.yml`文件，概述了从创建阶段开始的整个DevOps管道。
- en: It fits in the GitLab vision of providing one application to collaborate on
    the entire DevOps life cycle of an application.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这符合GitLab的愿景，即提供一个应用程序来协作完成应用程序整个DevOps生命周期的工作。
- en: Configuring Auto DevOps
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Auto DevOps
- en: 'As we mentioned earlier, Auto DevOps is enabled by default for every project,
    but if you want to disable it or configure it differently, you need to go into
    the settings, which you can find by going to Settings | CI/CD | Auto DevOps:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Auto DevOps默认在每个项目中启用，但如果你想禁用它或配置不同的设置，你需要进入设置，方法是前往设置 | CI/CD | Auto DevOps：
- en: '![](img/f9560e05-8d55-41e1-9ae1-db3570741f5f.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f9560e05-8d55-41e1-9ae1-db3570741f5f.png)'
- en: As you can see, you need to configure a Kubernetes cluster to make this all
    work.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，你需要配置一个Kubernetes集群才能让这一切正常工作。
- en: Another setting you can manage here is the deployment strategy. The default
    setting is that the pipeline deploys up to production. This might not be the strategy
    you want for your enterprise. You can use an incremental rollout as well.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里管理的另一个设置是部署策略。默认设置是管道部署到生产环境。这可能不是你企业所需的策略，你也可以使用增量发布策略。
- en: You should also note that a deployment pipelines is fully automated until the
    last step, which is production. You can choose to leave that as a manual step.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该注意到，部署管道在最后一步（生产）之前是完全自动化的。你可以选择将其作为手动步骤。
- en: 'To control the individual steps in the pipeline, you can view the Operations menu
    on the left-hand side. The following is a screenshot of the available operations:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要控制管道中的各个步骤，你可以查看左侧的操作菜单。以下是可用操作的截图：
- en: '![](img/d5eed0fb-a4ac-4acb-9adb-c9872bdecba0.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d5eed0fb-a4ac-4acb-9adb-c9872bdecba0.png)'
- en: 'When the first piece of code is pushed to the repository, an Auto DevOps pipeline
    is created. For the `eventmanager` project, this looks as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当第一段代码推送到代码库时，一个Auto DevOps管道将被创建。对于`eventmanager`项目，它如下所示：
- en: '![](img/5e387bb4-4a8d-47e7-92b1-9440757ac14f.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e387bb4-4a8d-47e7-92b1-9440757ac14f.png)'
- en: Let's evaluate each step of the Auto DevOps pipeline from the preceding screenshot.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们评估一下前面截图中的Auto DevOps管道的每个步骤。
- en: Build step
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建步骤
- en: The main idea is that, in the build phase, you prepare your code to run in a
    packaged way – in a Docker container that you built using a Dockerfile – via Heroku
    build packs.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 主要思路是在构建阶段，你准备好以打包的方式运行你的代码——通过Dockerfile构建的Docker容器——通过Heroku构建包。
- en: 'For the `eventmanager` app, `user1` created the following Dockerfile:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`eventmanager`应用，`user1`创建了以下Dockerfile：
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see from the first line of the preceding code, it pulls a basic Ruby-enabled
    Debian Linux image. It copies all the source code to a directory and goes there.
    Then, a bundle install is run, which installs all the Ruby dependencies that are
    needed. Finally, it starts the `eventmanager` app using the CMD command and exposes
    port `5000` to the outside world. It has to expose port `5000` because the default
    Helm chart that is used to deploy to Kubernetes assumes this port to run the application.
    It will be wired to port `80` or `443` after deployment.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，从前面代码的第一行，它拉取了一个基本的支持Ruby的Debian Linux镜像。它将所有源代码复制到一个目录并进入该目录。然后，运行bundle
    install，这会安装所有必要的Ruby依赖项。最后，使用CMD命令启动`eventmanager`应用并将端口`5000`暴露给外部。必须暴露端口`5000`，因为用于部署到Kubernetes的默认Helm图表假设此端口用于运行应用。部署后，它将与端口`80`或`443`连接。
- en: 'The following code is for the log when the build phase is started:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是构建阶段开始时的日志：
- en: '[PRE10]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It runs the Kubernetes executor and waits for a pod to be available.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 它运行Kubernetes执行器并等待Pod可用。
- en: 'When that happens, the build script is run. First, a login to the GitLab registry
    for this project is attempted (we need to push the build there afterwards):'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生这种情况时，构建脚本会运行。首先，尝试登录到此项目的GitLab注册表（我们随后需要将构建推送到那里）：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, the build of the Docker image will start:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，Docker 镜像的构建将开始：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The built container image is pushed to the Docker registry for the `eventmanager`
    project:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 构建好的容器镜像被推送到 `eventmanager` 项目的 Docker 注册表：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When the Docker container image is stored in the registry, the subsequent phases
    will use the image and pull it. This concludes the build step. The next step is
    to run the code quality scan.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Docker 容器镜像存储在注册表中时，后续阶段将使用该镜像并将其拉取。这就结束了构建步骤。下一步是运行代码质量扫描。
- en: Code quality scan
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码质量扫描
- en: In this phase of the pipeline, a GitLab runner is used to scan your code for
    quality. You can find more information and an example of this in [Chapter 10](1eceee2e-41d6-41cc-95eb-3d225f25f3fa.xhtml),
    *Create Your Product, Verifying It, and Packaging It*.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在管道的这一阶段，使用 GitLab runner 扫描您的代码质量。您可以在[第 10 章](1eceee2e-41d6-41cc-95eb-3d225f25f3fa.xhtml)，*创建您的产品、验证它并打包它*中找到更多信息和示例。
- en: Container scanning
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器扫描
- en: The next phase is still a part of the test stage. In this stage, a container
    instance is instantiated from your image and is scanned for vulnerabilities using
    clair ([https://github.com/coreos/clair](https://github.com/coreos/clair)).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 下一阶段仍然是测试阶段的一部分。在这一阶段，将从您的镜像中实例化一个容器实例，并使用 clair ([https://github.com/coreos/clair](https://github.com/coreos/clair))
    扫描漏洞。
- en: 'It will log in to the `eventmanager` Docker registry:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 它将登录到 `eventmanager` 的 Docker 注册表：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, it will try to get a container with the scan tool in it:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它将尝试获取一个带有扫描工具的容器：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'When the container is running, it will start the scan:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当容器运行时，它将启动扫描：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The default Ruby images uses a Debian image, which apparently has a lot of open
    vulnerabilities.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的 Ruby 镜像使用的是 Debian 镜像，显然有很多已知的漏洞。
- en: 'If you switch the basic image your Dockerfile uses to `ruby:2-alpine`, you
    will have a more basic Linux container, which should not give all of these errors.
    You will have to restart the pipeline (click retry in the list):'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将 Dockerfile 使用的基础镜像切换到 `ruby:2-alpine`，您将获得一个更基础的 Linux 容器，应该不会出现所有这些错误。您将需要重新启动管道（在列表中点击重试）：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'When no vulnerabilities are found, the report is uploaded as an artifact and
    the job will succeed:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当没有发现漏洞时，报告将作为构件上传，作业将成功：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The created Docker image is now scanned for known vulnerabilities. When you
    want to whitelist anything that's found, you can add them to a file called `clair-whitelist.yml` and
    add it to your repository.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的 Docker 镜像现在将被扫描已知漏洞。当您想要将任何发现的内容列入白名单时，可以将它们添加到一个名为 `clair-whitelist.yml`
    的文件中，并将其添加到您的代码库中。
- en: Dependency scanning
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 依赖扫描
- en: This part of the pipeline scans your code for known security vulnerabilities
    in dependencies of your software. An example would be if you rely on third-party
    libraries that have known security issues. This will be explained in detail in
    the next chapter.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这一阶段的管道扫描您的代码，以查找软件依赖项中的已知安全漏洞。例如，如果您依赖的第三方库有已知的安全问题，这个问题会被发现。下一章节将详细解释这一点。
- en: When this scan is complete, you will know whether the dependencies you use in
    your code are safe or not. It is also useful to know which licenses are used by
    dependencies because this can have a lot of consequences. We will explain this
    in the next section.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 当扫描完成时，您将知道您在代码中使用的依赖项是否安全。了解依赖项使用的许可证也很有用，因为这可能会带来许多后果。我们将在下一节中解释这一点。
- en: License management
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 许可证管理
- en: An issue that's often overlooked by organizations is how to manage your **intellectual
    property rights** (**IP**). There are different open source licenses around; for
    example, there ones that are classified as *permissive* such as X11, Apache, and
    the BSD licenses. You also have the *copyleft* kind, such as the GPL, which are
    more restrictive and could make you share your derivative works. By using the
    license scanner, you ensure that you're not using dependencies that have a negative
    impact on your intellectual property rights.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 组织常常忽视的一个问题是如何管理您的**知识产权**（**IP**）。有不同的开源许可证，例如被分类为*宽松型*的许可证，如 X11、Apache 和
    BSD 许可证。您还可以找到*强制分享*型的许可证，如 GPL，它们更具限制性，可能要求您分享衍生作品。通过使用许可证扫描器，您可以确保不使用对您的知识产权有负面影响的依赖项。
- en: 'You will see the following output when the jobs runs:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当作业运行时，您将看到以下输出：
- en: '[PRE19]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This scan is run from a container, but that runs code and parses your project:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 该扫描从一个容器中运行，但该容器运行代码并解析您的项目：
- en: '[PRE20]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This will analyze and upload a report artifact:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这将分析并上传报告构件：
- en: '[PRE21]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The result is also viewable from the merge request widget.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 结果也可以从合并请求小部件中查看。
- en: As you can see, the inclusion of a license check in the pipeline can be very
    useful. Is it better to know as early as possible whether you are using dependencies
    that affect the way you can distribute your software. In the same parallel step
    of the pipeline, static security tests are conducted.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在流水线中加入许可证检查非常有用。最好尽早知道你是否使用了影响软件分发方式的依赖项。在流水线的同一个并行步骤中，还会进行静态安全测试。
- en: Static application security testing (sast)
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 静态应用安全测试（SAST）
- en: This part of the pipeline scans your code for known security issues, and is
    known as a static application security test. This will be explained in more detail
    in the next chapter. The final parallel step in the test stage is running the
    actual tests that are defined by your code.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分的流水线扫描你的代码，以查找已知的安全问题，这被称为静态应用安全测试。这个内容将在下一章中更详细地解释。测试阶段的最终并行步骤是运行由你的代码定义的实际测试。
- en: The final test step
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最终测试步骤
- en: 'In this pipeline, a specific container is started that clones the source code:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个流水线中，启动了一个特定的容器，用于克隆源代码：
- en: '[PRE22]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'It will try to detect the language that''s used. In our case, it finds a Ruby
    application, which is correct:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 它将尝试检测使用的语言。在我们的案例中，它找到了 Ruby 应用程序，这是正确的：
- en: '[PRE23]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'After installing the necessary dependencies, it will run the rake test task:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 安装必要的依赖项后，它将运行 rake 测试任务：
- en: '[PRE24]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In our case, no errors were detected. You can check which tests are run in your
    `tests` folder.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，未检测到错误。你可以检查 `tests` 文件夹中运行的测试。
- en: Of course, the tests that are run are written by yourself, so you determine
    how much value they have. When they are finished, the next stage is to deploy
    to production, which is covered in the next section.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，运行的测试是你自己编写的，所以你决定它们的价值。测试完成后，下一阶段是部署到生产环境，相关内容将在下一节中介绍。
- en: Production
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生产环境
- en: 'The default Auto DevOps pipeline will deploy your code to production after
    it finishes the test stage. Various environment variables are available that you
    can set that will control the autoscaling of your replica pods. The heavy lifting
    in this phase is performed by the auto-deploy-app Helm chart. You can also provide
    your own chart by adding it to a `.chart` directory in your project or by setting
    `AUTO_DEVOPS_CHART` combined with the `AUTO_DEVOPS_CHART_REPOSITORY` environment
    variable with the URL to your custom chart. It will create several things:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的 Auto DevOps 流水线将在完成测试阶段后将代码部署到生产环境。你可以设置多个环境变量，以控制副本 pods 的自动扩展。此阶段的繁重工作由
    auto-deploy-app Helm 图表完成。你还可以通过将自定义图表添加到项目中的 `.chart` 目录或设置 `AUTO_DEVOPS_CHART`
    和 `AUTO_DEVOPS_CHART_REPOSITORY` 环境变量，结合图表 URL 来提供你自己的图表。它将创建以下内容：
- en: A deploy token
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个部署令牌
- en: A Prometheus monitoring instance that's wired for your application
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个针对你应用程序配置的 Prometheus 监控实例
- en: 'Let''s run the following code through the log file:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过日志文件运行以下代码：
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This checks the artifacts of the previous jobs and performs a check on the
    Kubernetes domain. It will install dependencies for minimal Helm execution:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这会检查前一个作业的工件，并对 Kubernetes 域进行检查。它将安装最小化 Helm 执行所需的依赖项：
- en: '[PRE26]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The next step is to download the required chart (auto-deploy-app chart or custom):'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是下载所需的图表（auto-deploy-app 图表或自定义图表）：
- en: '[PRE27]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Next, we need to ensure that a namespace is defined (which is usually the Kubernetes
    cluster name you used):'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要确保已定义命名空间（通常是你使用的 Kubernetes 集群名称）：
- en: '[PRE28]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, it''s time to initialize tiller (the Helm server):'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候初始化 Tiller（Helm 服务器）了：
- en: '[PRE29]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Here, a secret to access the registry is created:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，创建了一个用于访问注册表的密钥：
- en: '[PRE30]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Finally, the deployment can start:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，部署可以开始：
- en: '[PRE31]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'After the deployment, you will see feedback about the URL where the application
    is running. The name is created by appending the namespace to the project name
    and the domain wildcard where the cluster is running:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 部署后，你将看到关于应用程序运行 URL 的反馈。该名称是通过将命名空间附加到项目名称和集群运行的域通配符来创建的：
- en: '[PRE32]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'If you have configured `kubectl` to use the context of your GKE cluster, on
    the command line, you can verify whether your deployments took place:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已配置 `kubectl` 使用你的 GKE 集群的上下文，在命令行中，你可以验证是否已进行部署：
- en: '[PRE33]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The list of pods should show you the pods that were started:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Pods 列表应该显示已启动的 pods：
- en: '[PRE34]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'By default, a `postgres` instance is started as well, and you can fine-tune
    your installation to use it if you need it. You can find more information about
    that here: [https://docs.gitlab.com/ee/topics/autodevops/#postgresql-database-support](https://docs.gitlab.com/ee/topics/autodevops/#postgresql-database-support).
    There are also other pods in the list, and they are all part of the deployment:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，也会启动一个 `postgres` 实例，如果需要，你可以对安装进行微调以使用它。你可以在这里找到更多信息：[https://docs.gitlab.com/ee/topics/autodevops/#postgresql-database-support](https://docs.gitlab.com/ee/topics/autodevops/#postgresql-database-support)。列表中还有其他
    Pod，它们都是部署的一部分：
- en: '[PRE35]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The `eventmanager` application can be viewed by going to `http://it-eventmanager.kubernetes.joustie.nl`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`eventmanager` 应用程序可以通过访问 `http://it-eventmanager.kubernetes.joustie.nl` 来查看：'
- en: '![](img/79bf9d2c-f4fb-4833-b84c-bb9677233993.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/79bf9d2c-f4fb-4833-b84c-bb9677233993.png)'
- en: Now, we have a running application that is being tested and monitored. The next
    and final step is to run a performance check on the production environment. Again,
    we can use our Kubernetes cluster to spawn a test container for it and run performance
    tests on it, which is the subject of the next section.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有一个正在运行的应用程序，正在进行测试和监控。接下来的最后一步是对生产环境进行性能检查。我们可以再次使用 Kubernetes 集群为其创建一个测试容器，并对其进行性能测试，这也是下一节的主题。
- en: Performance
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 性能
- en: 'In the log file for the performance job, you can see that Kubernetes is again
    used to spawn an instance to use:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在性能作业的日志文件中，你可以看到 Kubernetes 再次被用来启动一个实例以供使用：
- en: '[PRE36]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The job connects to [GitLab.com](https://about.gitlab.com/) and verifies the
    version of the image it should pull. It uses the `sitespeed.io` container to do
    this ([https://hub.docker.com/r/sitespeedio/sitespeed.io/](https://hub.docker.com/r/sitespeedio/sitespeed.io/)):'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 该作业连接到[GitLab.com](https://about.gitlab.com/)，并验证它应该拉取的镜像版本。它使用 `sitespeed.io`
    容器来完成此任务（[https://hub.docker.com/r/sitespeedio/sitespeed.io/](https://hub.docker.com/r/sitespeedio/sitespeed.io/)）：
- en: '[PRE37]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Inside the container, it tries to measure browser performance with Chrome and
    Firefox:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 容器内部，它尝试使用 Chrome 和 Firefox 测量浏览器性能：
- en: '[PRE38]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'It will do a subsequent number of runs:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 它将进行若干次后续运行：
- en: '[PRE39]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The results will be saved as a HTML report artifact, as well as a JSON file:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将保存为 HTML 报告工件以及 JSON 文件：
- en: '[PRE40]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The following code is a part of the JSON file:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是 JSON 文件的一部分：
- en: '[PRE41]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: A nice HTML report is available too, which is part of the artifacts.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 也提供了一个漂亮的 HTML 报告，这是工件的一部分。
- en: Auto DevOps is a very handy concept. It can give you a complete pipeline if
    your application stays close to standards and is not very complex. If you need
    more customization, you can use the template and fine-tune it to your needs.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Auto DevOps 是一个非常实用的概念。如果你的应用程序遵循标准且不太复杂，它可以为你提供完整的管道。如果你需要更多的定制化，你可以使用模板并根据需求进行微调。
- en: Summary
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This chapter demonstrated the potential of GitLab and the role it plays in the
    operations phase of a software product. You can develop your solution, test it,
    and eventually run it in an environment. Along the way, you can automate as much
    as possible. If you use the Auto DevOps feature, you will reach the full potential
    of the DevOps concept, which is currently a sought-after skill.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 本章展示了 GitLab 的潜力及其在软件产品运营阶段中扮演的角色。你可以开发解决方案，进行测试，并最终在一个环境中运行它。在这个过程中，你可以尽可能地实现自动化。如果使用
    Auto DevOps 功能，你将实现 DevOps 概念的全部潜力，这是目前非常抢手的技能。
- en: In the next chapter, we will look at the monitor and secure phases, which are
    the final phases in the DevOps pipeline.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将查看监控和安全阶段，这些是 DevOps 管道中的最后阶段。
- en: Questions
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: In which file do you define your deployments?
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你在哪个文件中定义部署？
- en: What is the dpl tool?
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`dpl` 工具是什么？'
- en: What is the GitLab vision for Auto DevOps?
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitLab 对 Auto DevOps 的愿景是什么？
- en: Where are the build artifacts stored at the end of the build phase (using Dockerfile)?
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构建阶段结束时（使用 Dockerfile），构建工件存储在哪里？
- en: What is the name of the container scanner that's used in Auto DevOps?
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Auto DevOps 中使用的容器扫描器名称是什么？
- en: What is the name of the deployment Helm chart that's used in Auto DevOps?
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Auto DevOps 中使用的部署 Helm 图表名称是什么？
- en: How many pods are deployed for a production deploy?
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生产部署时会部署多少个 Pod？
- en: What is the name of the performance container?
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 性能容器的名称是什么？
- en: Further reading
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*Advanced Infrastructure Penetration Testing* by Chiheb Chebbi: [https://www.packtpub.com/networking-and-servers/advanced-infrastructure-penetration-testing](https://www.packtpub.com/networking-and-servers/advanced-infrastructure-penetration-testing)'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*高级基础设施渗透测试*，作者：Chiheb Chebbi：[https://www.packtpub.com/networking-and-servers/advanced-infrastructure-penetration-testing](https://www.packtpub.com/networking-and-servers/advanced-infrastructure-penetration-testing)'
- en: '*Learn Docker - Fundamentals of Docker 18.x* by Gabriel N. Schenker: [https://www.packtpub.com/in/networking-and-servers/learn-docker-fundamentals-docker-18x](https://www.packtpub.com/in/networking-and-servers/learn-docker-fundamentals-docker-18x)'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习Docker - Docker 18.x基础*，作者：Gabriel N. Schenker：[https://www.packtpub.com/in/networking-and-servers/learn-docker-fundamentals-docker-18x](https://www.packtpub.com/in/networking-and-servers/learn-docker-fundamentals-docker-18x)'
- en: '*AWS Automation Cookbook *by Nikit Swaraj: [https://www.packtpub.com/virtualization-and-cloud/aws-automation-cookbook](https://www.packtpub.com/virtualization-and-cloud/aws-automation-cookbook)'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*AWS自动化手册*，作者：Nikit Swaraj：[https://www.packtpub.com/virtualization-and-cloud/aws-automation-cookbook](https://www.packtpub.com/virtualization-and-cloud/aws-automation-cookbook)'
- en: '*Hands-On Kubernetes on Azure* by Gunther Lenz and Shivakumar Gopalakrishnan: [https://www.packtpub.com/virtualization-and-cloud/hands-kubernetes-azure](https://www.packtpub.com/virtualization-and-cloud/hands-kubernetes-azure)'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Azure上动手实践Kubernetes*，作者：Gunther Lenz 和 Shivakumar Gopalakrishnan：[https://www.packtpub.com/virtualization-and-cloud/hands-kubernetes-azure](https://www.packtpub.com/virtualization-and-cloud/hands-kubernetes-azure)'
