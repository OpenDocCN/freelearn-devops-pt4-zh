- en: Integrating GitLab with CI/CD Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will cover some of the integrations that are possible with
    GitLab. Most of the time, companies will not use one tool for their complete DevOps
    journey. GitLab encourages this for small to midsize companies, but the reality
    is that big enterprise customers use a mix of different tools and technologies.
    We will connect Jira to GitLab, as this tool is in use in a big portion of the
    enterprise market. Of course, the venerable Jenkins server has to be mentioned
    and tried, and modern organizations use Slack/Mattermost or other chat tools for
    real-time collaboration. We will finish this chapter with an example of how to
    utilize a basic webhook.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Jira with GitLab
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting with Jenkins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating with Mattermost
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using webhooks for events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For managing omnibus installs, there is one central configuration file called
    `gitlab.rb`. You need to create it or copy an example. There is a template available
    that you can find at [https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template](https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template).
    It isn't updated after upgrades. In large parts of this chapter, I will quote
    and discuss parts of this file.
  prefs: []
  type: TYPE_NORMAL
- en: The code examples for this chapter are available in this book's GitHub repository
    at [https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter13](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter13).
  prefs: []
  type: TYPE_NORMAL
- en: Using Jira with GitLab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jira is an IT project management tool that was created by Atlassian in 2002
    and was first created as software for developers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Jira was originally an issue tracking tool, that is, a tool to list and manage
    tasks. A *task* can be anything: a problem that needs to be solved, a simple TODO,
    an application, and so on. However, you can also go much further and put your
    products, customers, companies, and so on into this tool.'
  prefs: []
  type: TYPE_NORMAL
- en: JIRA is also a *workflow engine*. This means that you can define *workflows* (in
    other words, processes) that your tasks must follow. This way, you can impose
    different processes per project or per task. An example of a simple workflow for
    a task of the TODO type is OPEN | IN PROGRESS | READY.
  prefs: []
  type: TYPE_NORMAL
- en: For a different type of task, for example, an application to do something, you
    can set up this workflow: OPEN | CONFIRMED | APPROVED | READY.
  prefs: []
  type: TYPE_NORMAL
- en: Through its integrations, GitLab can interface with Jira. Although GitLab already
    offers a lot of the project management features that Jira provides, in larger
    organizations, it can help integrate these tools. For instance, when overall project
    management is done in Jira, you can make sure that specific links are accessible
    in the GitLab workflow through commit messages, merge requests, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, let''s create a project in Jira:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We created an account on the Cloud offering from Atlassian ([https://www.atlassian.com/enterprise/cloud](https://www.atlassian.com/enterprise/cloud)).
    When you have set up your instance in the Atlassian Cloud or on premise, continue
    to create a new project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7fb74f38-1196-4790-93b9-d89c41e6caa8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When your project has been created, you will see the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0f9dbce0-5d59-4ee4-b2ad-a919a8ea4261.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next step is to create an issue in this project. Let''s do that with minimal
    information and call it `Integrate GitLab and Jira`. You will see it create an
    issue with an ID of `GI-1`. We now have an issue in our project management tool,
    which we like to link to our GitLab instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/71cba23c-7968-41e5-8160-38080232d07f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we will create a special token in Jira, which we will use in GitLab to
    update the issue. Please visit [https://id.atlassian.com](https://id.atlassian.com),
    click Security, and then click Create and manage API tokens:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/333b5d30-3263-4715-97c0-7ee292d57c33.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click Create API token:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/46a9dec8-7f3f-4665-aaf3-5506d9878359.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you have given it a nice name and clicked Create, it will appear in the
    list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/82dbf83b-c981-4620-afbf-d9fe3ab745ef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we need to head over to our GitLab instance to create the project that
    we want to connect to Jira:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7841c2db-4952-4dde-9b40-682afd489b20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When the project has been created, go to the settings for this project and
    look for Jira in integrations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a7ca08d7-df3d-423d-b1cd-326440f6c543.png)'
  prefs: []
  type: TYPE_IMG
- en: You can choose whether comments can be created in Jira by following references
    in a Commit or a Merge request. You need to give the web URL for your Jira instance,
    which in our case is `https://joustie.atlassian.net`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your username is the email address, and you can fill in your token that you
    created in Jira earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Now comes the harder part. When you change a Jira issue to another state, you
    need to provide a transition ID. In our example, this is `11`, `21`, `31`. Now,
    what is that and where do we find it? This is a good question, and all you need
    to do is call Jira's API. They represent the state an issue can be in, and you
    need to know this state in order to change them.
  prefs: []
  type: TYPE_NORMAL
- en: In the following example, we called `https://joustie.atlassian.net/rest/api/2/issue/GI-1/transitions`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you''ve found those IDs and saved the changes, Jira will test them, and
    hopefully, you''ll receive the following feedback:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e5c50e45-d0b9-4902-8a17-03cdceadf654.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you go back to the Integrations page, note that the Jira integration is
    green. Green is good:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/270b742a-f362-4067-8e0a-2f94a1e28873.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If something goes wrong or you would like to know more about these calls, you
    can consult `integrations_json.log` in the rails log directory. For instance,
    the successful call to activate Jira integration is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can resolve an issue in Jira through GitLab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the project overview, you will find that the issue has moved to Done:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f3f2d01-c116-43ab-bd76-852079793323.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you look in the issue itself, you will find that is has a status of Closed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ffff1970-786b-4d66-b9fb-3791a7bcc615.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, it is possible to integrate project management tools like Jira
    with GitLab and keep issues in sync. In this section, we have demonstrated how
    to integrate a cloud-based Jira offering with a local on-premise GitLab installation.
    Now, let's move on and connect with Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting Jenkins to GitLab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jenkins (a fork of the Hudson project) is a Continuous Integration platform.
    The platform is primarily intended for the repeated execution and monitoring of
    build tasks, as well as the automated building and testing of applications. The
    many freely available plugins make it very easy to expand the functionality of
    Jenkins. An example of this is its integration with other systems (such as Sonar,
    Jira, or CloudBees) or changing its look and feel. It is possible to build a complete
    Continuous Delivery pipeline by using the right plugins.
  prefs: []
  type: TYPE_NORMAL
- en: There is also a GitLab plugin available to integrate Jenkins in a GitLab workflow.
    You can download and host Jenkins yourself, or buy capacity in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, we have used a local Jenkins container and pulled a container
    from [https://hub.docker.com/_/jenkins](https://hub.docker.com/_/jenkins). Let''s
    get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When your Jenkins container has been configured and started, you need to make
    sure that the GitLab plugin has been installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d56ffa79-c120-4a2d-824c-1b44c9199605.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Manage Jenkins | Manage Plugins:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/028484bc-8e79-4eba-8424-f592a26bdf21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click on the Available tab and filter for GitLab, you can choose the
    GitLab plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/27eb9f83-ebd0-4422-8f81-bdd9f4021f37.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When it has been installed, you will see it appearing as a Success:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b601f76a-410a-4d8a-b000-c03ce816aa9f.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, go back to the Manage Jenkins page, click Configure System, and scroll
    to the GitLab section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Give the connection a name of your choice, provide the correct URL, and click
    Add to get a GitLab API token. This API token can be generated in GitLab in the
    settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/53c81772-e64e-4ad3-81e3-546629a187f4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You only need to fill in the API token here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3298f054-e460-4157-a94b-3cc4e3216e0d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next step is to create projects in Jenkins and GitLab (for this example).
    For this occasion, we chose a freestyle project and named it `petclinic`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2e2339c0-2f01-4f0f-8fff-6a99a4f9b26f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We did the same for GitLab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/78d67e70-0c8f-4ca9-abc8-7299e2245b29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In your Jenkins project, scroll down to the Source Code Management section
    and fill in the URL of your GitLab source code repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/10e461b6-b57c-4529-8544-4f2d52542ea8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, click Add to add credentials. You need to add a username and password
    to connect to your HTTP Git repository (or an SSH user/key or an API key):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d5d06fe3-6082-415c-8da7-9b6188278f53.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, close the popup and scroll down to the Build Triggers section. You can
    then enable Build when a change is pushed to GitLab. For this example, we have
    chosen to trigger on push events and opened merge request events:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4fb36457-0bff-4985-9a52-5b14773b9bec.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Save to save your settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For testing and fast development, I recommend using ngrok. This is a secure
    tunnel program that you can use to connect a localhost to a dynamic URL hosting
    service. You can find the tool at [http://ngrok.com](http://ngrok.com). Download
    the binary and place it on the local path.
  prefs: []
  type: TYPE_NORMAL
- en: We can use it to tunnel from the internet (where our GitLab lives in a cloud
    container) to our local Docker container running Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start ngrok to connect an internet URL to our local Jenkins running on `8080`
    in Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After starting ngrok, you will be presented with the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/755ed7c4-a7b6-4e9f-a89e-f920abb08d07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, change some code in the repository and push the code to GitLab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You will notice the hook being triggered in ngrok:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d2b95721-bd38-4f73-b67a-3b343f5a294c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By going to Jenkins, you will see that it receives an event and starts building
    the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3415ec38-f749-495b-b625-9f111652c5ce.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, it's quite easy to connect Jenkins to GitLab. You can choose
    to let Jenkins react to different kinds of events in GitLab.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating with Mattermost
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mattermost is the number one open source Slack alternative, and can be hosted
    on a proprietary platform that you manage yourself.
  prefs: []
  type: TYPE_NORMAL
- en: When teams use these tools, they can become more productive because of direct
    communication via chat in specialized channels. There, they can exchange quick
    information bits – even files (images/video, anything) and datafiles that are
    used by applications.
  prefs: []
  type: TYPE_NORMAL
- en: You can use Mattermost via a browser, or use the platform-specific app on your
    mobile device. No specific personal data is used other than your email address.
  prefs: []
  type: TYPE_NORMAL
- en: What is also one of its killer features is that it easily connects to third-party
    applications and systems such as GitLab, Jira Jenkins, Nagios, Zabbix, Kopano,
    and many more! The company has actually been bought by GitLab, and Mattermost
    is part of the omnibus installation. In other words, you can easily enable it
    and run it together with GitLab. ChatOps has been supported since GitLab Ultimate
    10.6, but came to GitLab Core in 11.9.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, we will set up a new Mattermost server to integrate with a GitLab
    instance in order to use slash commands.
  prefs: []
  type: TYPE_NORMAL
- en: Because Mattermost is part of the GitLab omnibus package, you can enable/install
    it by editing the `gitlab.rb` file, and use `gitlab-ctl` afterwards to reconfigure
    your instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration key to change in `gitlab.rb` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: After Mattermost has been started, you can go the integrations page of the settings
    of your project and search for the Mattermost slash command service. Click on
    Add to Mattermost. This will only work automatically on Mattermost 3.4, so make
    sure that your omnibus package isn't too old.
  prefs: []
  type: TYPE_NORMAL
- en: 'If Mattermost isn''t installed on your server, you can pull a simple Mattermost
    image from Docker Hub. `mattermost/mattermost-preview` will do fine. Let''s get
    started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you log in for the first time in your container (by default, this is via
    `http://localhost:8065`), you have to create a user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6d527181-4175-465f-a20d-3fe0a8fde5ef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After you have created the user, you will want to create a team:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/99e8a251-803f-4a3f-8d80-40d555ac161e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'That team needs a URL as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/394ebdc4-c7a8-4582-93f4-cfd0a9cb09b1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can click the hamburger menu to reveal options for the team:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d4ac96fd-5819-44b9-a9b6-79f3dd2a35a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Go to the system console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cbe266b9-04a1-4246-a784-5dbcce55c6f4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Look for Custom Integrations and check that slash commands are enabled. Save
    the settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/16ddc1f3-237f-4607-8b01-2fcbf4a43054.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After this, click the hamburger menu and click Switch back to.... Clicking
    the hamburger menu in the team context, you can click Integrations. Here, you
    can click on Slash Command, where you will find a page where you can define a
    slash command that can be triggered by Mattermost:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/492f2e6d-19fb-4eea-bed7-2ac27b988dff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The information we need to fill in here can be got from GitLab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a0b3dc65-146a-4af0-aa9b-5455813077dc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Log in to GitLab and go to Integrations in the settings part of your repository.
    Then, click Mattermost slash command. Here is the information you need to fill
    in in Mattermost:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9ebaf1b4-a128-4b43-a414-795ebecc44ca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the following screenshot, you can see the settings as we copied them. Click
    Save or Update when you are done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8f311cf7-1898-4c2c-b02f-4995ea08273a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will now be presented with a token to be used in GitLab. Copy the Mattermost
    token:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8aac56da-f37e-4eda-bf77-5ae2d7f4b6ed.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Paste it into the settings page for your Mattermost integration in GitLab,
    and save the changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1aff3dc7-5b3d-4f7e-b8ac-71931517af83.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, go to your team channel in Mattermost and press `*/*`. If you issue `/gitlab
    help`, Mattermost will ask you to connect your GitLab account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/09de6f24-794b-4a9e-8517-bcc1e451fcf5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will be redirected to GitLab, where you will have to authorize the connection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9e9150a1-7789-4773-807d-ff534d587f2d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, by going back to Mattermost and issuing `/gitlab help` once more, you
    will be presented with the options for the command. There are several, and these
    can help your support people run ChatOps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/58376bf2-502f-47e0-bd60-a069ec887dff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s create a new issue called `gitlab issue new test`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ec97f6b7-db38-4a3b-bbd5-3c28c625ca46.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you go back to GitLab, you will find that a new issue has been created for
    the GitLab project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f740d6ac-6d12-4504-8d40-6dc08e3dfce7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The ultimate integration is to use CI command functions, as described here:
    [https://docs.gitlab.com/ee/ci/chatops/](https://docs.gitlab.com/ee/ci/chatops/).'
  prefs: []
  type: TYPE_NORMAL
- en: Since GitLab 11.9, ChatOps is even part of GitLab Core, so its functionality
    isn't limited to the GitLab Enterprise Edition.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have showed you how to integrate your GitLab repository
    issues with the Mattermost chat application. There are endless possibilities if
    you create your own slash commands. Now, let's take a look at using webhooks for
    events.
  prefs: []
  type: TYPE_NORMAL
- en: Using webhooks for events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Webhooks are used as a signal between applications. You can see it as a callback
    from a different context. This call is made with the HTTP protocol (possibly with
    SSL). An attempt is made to provide information as efficiently as possible and
    in real time, and JSON is usually used as a data format.
  prefs: []
  type: TYPE_NORMAL
- en: The strength lies in the fact that as few operations as possible are necessary
    in order to get feedback. Usually, the most work lies in the implementation of
    the *signal*.
  prefs: []
  type: TYPE_NORMAL
- en: For a proof of concept, consider the following. Let's assume that when we push
    new code to GitLab, we have to send a signal from GitLab to an application that
    we have built ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement this model, we''ve chose the lightweight Flask micro-framework
    for Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s run through this code step by step. In the following code, the basic
    app has been initiated. The imports are purely the basic Flask framework and,
    in particular, the request object. The app is instantiated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The following function can be used to do the real work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then follows the method that is decorated with a route, and parses the request
    for certain information. There''s no check here – just reading the information
    from the JSON webhook, running the `real work` function, and returning `OK`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following `main` part, combined with the first block, is part of the basic
    Flask implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'When you run this code with `python server.py`, it will open port `5000` on
    the localhost:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want something on the internet to connect to it, we can use the venerable
    ngrok to link the port:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'ngrok is now running, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ce383744-7d32-4ecf-8250-99aa35a80f65.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can now define the webhook in GitLab. You can find it in the Settings |
    Integrations section of your GitLab project. After you have defined the hook,
    you can run a test to verify its operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a9b63b7d-0496-46ce-b7c6-458c43efbbc2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We get the following result when a call is triggered through GitLab. This is
    the connection going through the ngrok proxy:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/596697cd-7869-4197-ba32-653667394906.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In GitLab, if you click the Edit button, you will see the result of the webhook
    call. It will contain the body that was sent:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ebc6d6f9-aca8-4e30-81f6-dbe054499fb6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will also see the response that was given by the other end. You can see
    the OK response clearly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/de6afa45-058e-4058-b30d-231a73d8b96c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The result of this call was that our custom method was triggered and some specific
    information such as author, email, and message was printed on stdout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We have seen that it is also possible to use a generic event mechanism such
    as webhooks. You can modify your own software or **commercial-off-the-shelf**
    (**COTS**) application to receive events from GitLab.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed the ways of integrating GitLab with other products.
    Every integration has its own special instruction, but the basic idea is that
    you have to set up trust relationships and map attributes. GitLab is already shipped
    with a lot of possible integrations out of the box. These are called **project
    services**, and the documentation can be found here: [https://docs.gitlab.com/ee/user/project/integrations/project_services.html](https://docs.gitlab.com/ee/user/project/integrations/project_services.html). This
    chapter concludes the third section of this book, in which we've discussed the
    GitLab workflow and the underlying rationale behind it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next part of this book, we will discuss the most successful part of
    GitLab: GitLab CI and runners. We will start by talking about how to set up a
    project for GitLab CI.'
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is Jira used for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Jira is from which company?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which ID or IDs are needed to manipulate issues in Jira?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which project is Jenkins forked from?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What mechanism does Jenkins use to extend functionality?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is ChatOps?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you control things from a Mattermost channel?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In GitLab, where can you find the status of a webhook?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Jira 8 Essentials - Fifth Edition*, by *Patrick Lee*: [https://www.packtpub.com/in/application-development/jira-8-essentials-fifth-edition](https://www.packtpub.com/in/application-development/jira-8-essentials-fifth-edition)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Jenkins 2.x Continuous Integration Cookbook - Third Edition*, by *Mitesh Soni*
    and *Alan Mark Berg*: [https://www.packtpub.com/in/networking-and-servers/jenkins-2x-continuous-integration-cookbook-third-edition](https://www.packtpub.com/in/networking-and-servers/jenkins-2x-continuous-integration-cookbook-third-edition)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Jenkins Fundamentals*, by *Joseph Muli* and *Arnold Okoth*: [https://www.packtpub.com/in/networking-and-servers/jenkins-fundamentals](https://www.packtpub.com/in/networking-and-servers/jenkins-fundamentals)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*GitLab ChatOps*: [https://docs.gitlab.com/ee/ci/chatops/](https://docs.gitlab.com/ee/ci/chatops/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
