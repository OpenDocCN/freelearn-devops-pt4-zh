- en: Setting Up Your Project for GitLab Continuous Integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Continuous Integration** (**CI**) is one of the most important pillars of
    **Extreme Programming** (**XP**). Continuous Integration has been one of GitLab''s
    most popular features since it was built in version 8\. It is very popular with
    independent developers and open source projects and is currently gaining popularity
    in other market segments.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started is easy. As we showed you earlier, in [Chapter 10](1eceee2e-41d6-41cc-95eb-3d225f25f3fa.xhtml),
    *Create Your Product, Verify, and Package it* (in the *Release* and *Configure*
    sections), Auto DevOps is switched on by default, so that when adding code to
    a project, a deployment pipeline is automatically set up in which various jobs
    are running. These jobs will be run by a GitLab Runner, which you will have to
    set up. This is completely configurable to the wishes of the developer. The results
    of the jobs are collected and showed as passed or failed and are part of the logic
    in the pipeline. Based on the result, other automation in the pipeline can be
    triggered**. **The basis for this functionality is in the `.gitlab-ci.yml` file.
    If this file is present in a project, it will be parsed and different pipelines
    and jobs will start running.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Pipelines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jobs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating `.gitlab-ci.yml`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a Runner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow along with the instructions in this chapter, please download the Git
    repository with the examples available at GitHub: [https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter14](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter14).
  prefs: []
  type: TYPE_NORMAL
- en: GitLab CI must be enabled in your GitLab instance (see [Chapter 3](f6e9da35-95c5-4938-8afe-7bcc7590f5be.xhtml),
    *Configuring GitLab Using the Web UI*).
  prefs: []
  type: TYPE_NORMAL
- en: Pipelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A pipeline in the software engineering world is understood as a chain of events
    (of processes, components, and so on) that automatically triggers and delivers
    input to the next element. It resembles the physical pipelines that exist in the
    real world.
  prefs: []
  type: TYPE_NORMAL
- en: In a CI context, a pipeline is a collection of sequential steps that integrate
    code from different developers. The chain of events is triggered by a commit or
    push to a source code repository such as GitLab. The build system (for example,
    Jenkins or GitLab CI) is notified of a new version, compile, and source code and
    runs unit testing.
  prefs: []
  type: TYPE_NORMAL
- en: Before we go any further, you should understand that without unit tests, or
    other automated tests, the effort of integrating pieces of code by different developers
    is very difficult. So, before you begin building pipelines, make sure that your
    developers have written test code. That way, you can make sure that the code is
    checked and at least adheres to certain quality checks.
  prefs: []
  type: TYPE_NORMAL
- en: If the unit tests succeed in your pipeline, the next step is to run integration
    tests. If they also succeed, the artefact that was built can be pushed or saved
    in a binary repository, or it can be directly deployed to a staging environment
    where the code will run.
  prefs: []
  type: TYPE_NORMAL
- en: Some pipelines can even be deployed to an acceptance or semi-production environment,
    where user validation of the solution built takes place. This is called **Continuous
    Deployment** (**CD**). Some call this Deployment to Production CD, but it depends
    on your definition of the concept.
  prefs: []
  type: TYPE_NORMAL
- en: Modern build software has the concept of building pipelines as part of their
    architecture. Products such as Jenkins have adopted it in their workflow, but
    cloud solutions, such as Azure DevOps (which is TFS in the cloud), have too.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find pipelines in GitLab for your project in the left-hand menu bar,
    under CI/CD, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a7efbc24-7051-4bce-a67f-47e2fdc7010e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first item in the menu is a link to an overview of your Pipelines. Here,
    you can see whether pipelines have passed or failed, retry pipelines, or download
    artifacts, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9296263c-f44e-447b-9d9e-0b146c846dca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The second link in the menu takes you to the list of Jobs for a project (which
    we will cover shortly), as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f0310268-768a-45a5-9055-6cf0b6c23679.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The third link is a feature of GitLab CI called Schedules. As you can see in
    the following screenshot, we have created a schedule for a run of the pipeline
    to be executed for the `Eventmanager` project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/262c3e27-b64b-4615-a3fc-49ed283e8330.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click an item in the schedule list, you will see that there are many
    configurable items in it. For example, you can specify which branch to run on,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e4f89993-7f54-4b94-98b6-560b4efd3978.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A nice way of discovering more about your build is the chart feature in GitLab
    CI, where insight into the metrics of your pipelines is provided, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/14c93c65-ba93-484c-a366-a11572227a2f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows a high-level design of a pipeline that runs
    in GitLab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dd062d76-bf43-4fe7-bbb9-46952976a161.png)'
  prefs: []
  type: TYPE_IMG
- en: We have now demonstrated that GitLab CI incorporates the general concept of
    a build pipeline and also records several metrics about the successes or failures
    of the pipeline's steps. In the following section, we will take a look at these
    individual steps.
  prefs: []
  type: TYPE_NORMAL
- en: Jobs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Pipeline configuration begins with jobs:'
  prefs: []
  type: TYPE_NORMAL
- en: Jobs are the most fundamental element of a pipeline and are executed by GitLab
    Runners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jobs are created with constraints, which govern under what conditions they should
    be executed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jobs are top-level elements that can have an arbitrary name and must contain
    the script element as a minimum requirement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There can be an unlimited number of jobs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the pipeline overview, you''ll find several jobs. They have a status, an
    ID, are part of a stage, and have a name, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ea77f8a6-5477-4e65-b393-cffc656f2c7f.png)'
  prefs: []
  type: TYPE_IMG
- en: You can create jobs by adding them to a configuration file called `.gitlab-ci.yml`.
    We will discuss this file in more depth in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of a pipeline containing two jobs is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding example is a basic CI/CD pipeline that consists of two named jobs
    (`job1` and `job2`), which execute a script section (in our example, this does
    nothing). In the script section, you can specify a command, script, or a chain
    of commands. For instance, to build a JavaScript, you can set `script` as `npm
    build` or run a shell unit test called `unit-test.sh`.
  prefs: []
  type: TYPE_NORMAL
- en: Jobs are not run on the GitLab application server, but are picked up by GitLab
    Runners. The runners execute the jobs in their own environment; for example, runner
    A can build `job1` and runner B can build `job2`. Note that the jobs are independent
    from each other. The results from these jobs are aggregated on the GitLab server.
  prefs: []
  type: TYPE_NORMAL
- en: Creating .gitlab-ci.yml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How GitLab CI interacts with your profile is largely controlled by the `.gitlab-ci.yml` file,
    which must be added to the root of your project. When you push code to your repository,
    GitLab will test whether it's there and start a pipeline with jobs for that specific
    commit.
  prefs: []
  type: TYPE_NORMAL
- en: The format of the file is **YAML Ain't Markup Language** (**YAML**). YAML is
    currently a widely used format for configuration files and is best described as
    a data serialization language.
  prefs: []
  type: TYPE_NORMAL
- en: We have already given you an example of a `.gitlab-ci.yml` file with two jobs
    in an earlier section. In other chapters, we used a `.gitlab-ci.yml` file to describe
    a deployment. So, what are the available possibilities of this file?
  prefs: []
  type: TYPE_NORMAL
- en: 'A lot of combinations are possible, but the fundamental way of working is to
    first define stages in the file and then add script sections. The complete reference
    of this file can be found here: [https://docs.gitlab.com/ee/ci/yaml/README.html](https://docs.gitlab.com/ee/ci/yaml/README.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you are creating your YAML file, it is nice to know that, after saving,
    it will be checked by a linter to verify the syntax of the file, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/543779bd-93e2-49bb-acde-b542365a5ca6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The possibilities for this file are endless, so the best way to figure out
    what works for you is to look at open source projects on the GitLab website for
    inspiration, available at: [https://docs.gitlab.com/ee/ci/examples/README.html](https://docs.gitlab.com/ee/ci/examples/README.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a runner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We briefly described the concept of GitLab Runners in [Chapter 1](384dcfd9-ef7f-470d-89dc-3af7502a2d09.xhtml),
    *Introducing the GitLab Architecture*. Runners are essentially build environments
    that run on a separate machine that connects to the GitLab application's server
    and asks jobs to execute. Runners help to automate product development and achieve
    DevOps integration.
  prefs: []
  type: TYPE_NORMAL
- en: We configure a runner on the GitLab side, and on the GitLab Runner client side.
    Remember that there is not a single type of runner.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are different kind of runners, including:'
  prefs: []
  type: TYPE_NORMAL
- en: A Shell executor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Docker executor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Docker Machine and Docker Machine SSH (auto-scaling) executor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Parallels executor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A VirtualBox executor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A SSH executor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Kubernetes executor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the GitLab CI interface, this does not matter. All runners look the same.
  prefs: []
  type: TYPE_NORMAL
- en: The GitLab Runner clients are available on multiple platforms, as it is a Go
    binary that runs on many platforms. The configuration file is called `config.toml`
    and is in the TOML format, which is less complex than the YAML format.
  prefs: []
  type: TYPE_NORMAL
- en: The specification of this format is publicly available and can be found at [https://github.com/toml-lang/toml](https://github.com/toml-lang/toml).
  prefs: []
  type: TYPE_NORMAL
- en: GitLab Runner features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Features of GitLab Runner include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The ability to run multiple jobs concurrently
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The use of multiple tokens with multiple servers (even per project)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to limit the number of concurrent jobs per token
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The jobs GitLab Runner can execute can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Run on a local computer without containers or virtualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run inside Docker containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run inside Docker containers and execute jobs over SSH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run using Docker containers with autoscaling on different clouds and virtualization
    hypervisors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run by connecting to a remote SSH server, where it can be executed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additional features include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: GitLab Runner supports Bash, Windows Batch, and Windows PowerShell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The runner binary works on GNU/Linux, macOS, and Windows (all Docker-supported
    platforms)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A runner allows the customization of a job-running environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A runner can have an automatic configuration reload without restart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is to easy set up, with support for Docker, Docker SSH, Parallels, or SSH-running
    environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Runners also support the caching of Docker containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Runner package supports installation as a service for GNU/Linux, macOS,
    and Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can enable an embedded Prometheus metrics HTTP server in a runner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can find an overview of the registered runners in GitLab by logging in
    as an admin and checking the Runners menu on the left, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c20b8547-3149-4f46-96c0-09fe409c9c24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You should now see a list of runners that have registered on your GitLab instance,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ad7d5f65-5971-453d-875d-c20f1adf6aae.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As shown in the following screenshot, if you click a runner, you will see that
    it is possible to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure a paused runner not to accept new jobs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designate a runner as protected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set a runner to pick up jobs with or without tags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lock a runner to projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set a maximum timeout for a job
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tag runners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/8d4c1934-181d-4bb0-b415-37e0beef9419.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the left, you will be able to see which jobs have been recently processed
    by a runner, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/683b67da-934c-43b0-8554-541e9e528d0c.png)'
  prefs: []
  type: TYPE_IMG
- en: So far, you have seen how GitLab CI fits in with the GitLab product and also
    how GitLab Runners are registered with an instance. We have also looked at the
    basic features of GitLab Runners and showed you how to create a configuration
    file for jobs to be picked up and executed by a runner.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed GitLab CI, the most critical feature of GitLab
    after offering version control. We explained how to trigger pipelines and how
    to design them using the `.gitlab-ci.yml` file. Then, we showed you the jobs that
    make up the pipelines. We finished with some information on how GitLab runners
    fit into this architecture. In the next chapter, we are going to show you more
    about the GitLab Runner client.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Name one of the pillars of Extreme Programming.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What file is used to describe jobs and pipelines?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does a build system know when to build software in a pipeline?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What tests are necessary for reaching the integration phase?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which tag is used in the `.gitlab-ci.yml` file to execute a job?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the name of the configuration file used by the runner?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How many concurrent sessions can a runner start?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you get metrics about the execution of a GitLab runner?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*gRPC [Golang] Master Class: Build Modern API and Microservices [Video]* by
    *Stephane Maarek*: [https://www.packtpub.com/web-development/grpc-golang-master-class-build-modern-api-and-microservices-video](https://www.packtpub.com/web-development/grpc-golang-master-class-build-modern-api-and-microservices-video).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Hands-On Auto DevOps with GitLab CI [Video]* by *Alan Hohn*: [https://www.packtpub.com/in/application-development/hands-auto-devops-gitlab-ci-video](https://www.packtpub.com/in/application-development/hands-auto-devops-gitlab-ci-video).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
