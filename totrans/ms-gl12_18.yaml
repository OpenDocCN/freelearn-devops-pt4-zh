- en: Setting Up Your Project for GitLab Continuous Integration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 GitLab 持续集成项目
- en: '**Continuous Integration** (**CI**) is one of the most important pillars of
    **Extreme Programming** (**XP**). Continuous Integration has been one of GitLab''s
    most popular features since it was built in version 8\. It is very popular with
    independent developers and open source projects and is currently gaining popularity
    in other market segments.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）是 **极限编程**（**XP**）最重要的支柱之一。自从 GitLab 在 8 版本中引入持续集成功能以来，它一直是
    GitLab 最受欢迎的功能之一。持续集成在独立开发者和开源项目中非常流行，当前在其他市场领域也在迅速发展。'
- en: Getting started is easy. As we showed you earlier, in [Chapter 10](1eceee2e-41d6-41cc-95eb-3d225f25f3fa.xhtml),
    *Create Your Product, Verify, and Package it* (in the *Release* and *Configure*
    sections), Auto DevOps is switched on by default, so that when adding code to
    a project, a deployment pipeline is automatically set up in which various jobs
    are running. These jobs will be run by a GitLab Runner, which you will have to
    set up. This is completely configurable to the wishes of the developer. The results
    of the jobs are collected and showed as passed or failed and are part of the logic
    in the pipeline. Based on the result, other automation in the pipeline can be
    triggered**. **The basis for this functionality is in the `.gitlab-ci.yml` file.
    If this file is present in a project, it will be parsed and different pipelines
    and jobs will start running.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用非常简单。正如我们在 [第 10 章](1eceee2e-41d6-41cc-95eb-3d225f25f3fa.xhtml)中展示的那样，*创建产品，验证并打包它*（在
    *发布* 和 *配置* 部分），Auto DevOps 默认启用，因此当向项目添加代码时，会自动设置一个部署流水线，在该流水线中多个作业正在运行。这些作业将由你需要设置的
    GitLab Runner 运行。这个设置完全可以根据开发者的需求进行配置。作业的结果会被收集并显示为通过或失败，并且这些结果是流水线逻辑的一部分。根据结果，流水线中的其他自动化过程可能会被触发**。**此功能的基础在于
    `.gitlab-ci.yml` 文件。如果项目中存在该文件，它将被解析并启动不同的流水线和作业。
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Pipelines
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流水线
- en: Jobs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作业
- en: Creating `.gitlab-ci.yml`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 `.gitlab-ci.yml`
- en: Configuring a Runner
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 Runner
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow along with the instructions in this chapter, please download the Git
    repository with the examples available at GitHub: [https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter14](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter14).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章的指示，请下载包含示例的 Git 仓库，地址为 GitHub：[https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter14](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter14)。
- en: GitLab CI must be enabled in your GitLab instance (see [Chapter 3](f6e9da35-95c5-4938-8afe-7bcc7590f5be.xhtml),
    *Configuring GitLab Using the Web UI*).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 必须在你的 GitLab 实例中启用 GitLab CI（请参见 [第 3 章](f6e9da35-95c5-4938-8afe-7bcc7590f5be.xhtml)，*使用
    Web UI 配置 GitLab*）。
- en: Pipelines
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 流水线
- en: A pipeline in the software engineering world is understood as a chain of events
    (of processes, components, and so on) that automatically triggers and delivers
    input to the next element. It resembles the physical pipelines that exist in the
    real world.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件工程中，流水线通常被理解为一系列自动触发并将输入传递给下一个元素的事件链（包括过程、组件等）。它类似于现实世界中的物理管道。
- en: In a CI context, a pipeline is a collection of sequential steps that integrate
    code from different developers. The chain of events is triggered by a commit or
    push to a source code repository such as GitLab. The build system (for example,
    Jenkins or GitLab CI) is notified of a new version, compile, and source code and
    runs unit testing.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在持续集成（CI）环境中，流水线是一个由多个顺序步骤组成的集合，用于整合来自不同开发者的代码。事件链由对源代码仓库（如 GitLab）的提交或推送触发。构建系统（例如
    Jenkins 或 GitLab CI）会收到新版本的通知，进行编译和源代码处理，并执行单元测试。
- en: Before we go any further, you should understand that without unit tests, or
    other automated tests, the effort of integrating pieces of code by different developers
    is very difficult. So, before you begin building pipelines, make sure that your
    developers have written test code. That way, you can make sure that the code is
    checked and at least adheres to certain quality checks.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进一步深入之前，你需要了解的是，没有单元测试或其他自动化测试，不同开发者集成代码片段的工作将变得非常困难。所以，在开始构建流水线之前，确保你的开发者已经编写了测试代码。这样，你就可以确保代码已通过检查，并且至少符合一定的质量标准。
- en: If the unit tests succeed in your pipeline, the next step is to run integration
    tests. If they also succeed, the artefact that was built can be pushed or saved
    in a binary repository, or it can be directly deployed to a staging environment
    where the code will run.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果管道中的单元测试成功，下一步是运行集成测试。如果它们也成功，那么构建的制品可以推送或保存到二进制仓库，或者可以直接部署到一个暂存环境，在那里代码将运行。
- en: Some pipelines can even be deployed to an acceptance or semi-production environment,
    where user validation of the solution built takes place. This is called **Continuous
    Deployment** (**CD**). Some call this Deployment to Production CD, but it depends
    on your definition of the concept.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一些管道甚至可以部署到验收环境或半生产环境，在那里会对构建的解决方案进行用户验证。这被称为**持续部署**（**CD**）。有些人称其为生产部署 CD，但这取决于你对该概念的定义。
- en: Modern build software has the concept of building pipelines as part of their
    architecture. Products such as Jenkins have adopted it in their workflow, but
    cloud solutions, such as Azure DevOps (which is TFS in the cloud), have too.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现代构建软件将构建管道作为其架构的一部分。像 Jenkins 这样的产品已经在其工作流中采纳了这一概念，但云解决方案，如 Azure DevOps（即云中的
    TFS），也采用了这一方法。
- en: 'You can find pipelines in GitLab for your project in the left-hand menu bar,
    under CI/CD, as shown in the following screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 GitLab 中找到你的项目管道，在左侧菜单栏中的 CI/CD 下，如下图所示：
- en: '![](img/a7efbc24-7051-4bce-a67f-47e2fdc7010e.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a7efbc24-7051-4bce-a67f-47e2fdc7010e.png)'
- en: 'The first item in the menu is a link to an overview of your Pipelines. Here,
    you can see whether pipelines have passed or failed, retry pipelines, or download
    artifacts, as shown in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单中的第一个项目是指向你管道概览的链接。在这里，你可以看到管道是否通过或失败，重新尝试管道，或下载制品，如下图所示：
- en: '![](img/9296263c-f44e-447b-9d9e-0b146c846dca.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9296263c-f44e-447b-9d9e-0b146c846dca.png)'
- en: 'The second link in the menu takes you to the list of Jobs for a project (which
    we will cover shortly), as shown in the following screenshot:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单中的第二个链接会带你进入项目的作业列表（我们将在稍后介绍），如下图所示：
- en: '![](img/f0310268-768a-45a5-9055-6cf0b6c23679.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f0310268-768a-45a5-9055-6cf0b6c23679.png)'
- en: 'The third link is a feature of GitLab CI called Schedules. As you can see in
    the following screenshot, we have created a schedule for a run of the pipeline
    to be executed for the `Eventmanager` project:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个链接是 GitLab CI 的一个功能，称为计划（Schedules）。如以下截图所示，我们已经为 `Eventmanager` 项目创建了一个管道执行计划：
- en: '![](img/262c3e27-b64b-4615-a3fc-49ed283e8330.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/262c3e27-b64b-4615-a3fc-49ed283e8330.png)'
- en: 'If you click an item in the schedule list, you will see that there are many
    configurable items in it. For example, you can specify which branch to run on,
    as shown in the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击计划列表中的某一项，你会看到其中有许多可配置的项目。例如，你可以指定在哪个分支上运行，如下图所示：
- en: '![](img/e4f89993-7f54-4b94-98b6-560b4efd3978.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4f89993-7f54-4b94-98b6-560b4efd3978.png)'
- en: 'A nice way of discovering more about your build is the chart feature in GitLab
    CI, where insight into the metrics of your pipelines is provided, as shown in
    the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 了解更多关于你的构建信息的一个好方法是使用 GitLab CI 的图表功能，在这里你可以看到管道的各项指标，如下图所示：
- en: '![](img/14c93c65-ba93-484c-a366-a11572227a2f.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/14c93c65-ba93-484c-a366-a11572227a2f.png)'
- en: 'The following screenshot shows a high-level design of a pipeline that runs
    in GitLab:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了一个在 GitLab 中运行的管道的高级设计：
- en: '![](img/dd062d76-bf43-4fe7-bbb9-46952976a161.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd062d76-bf43-4fe7-bbb9-46952976a161.png)'
- en: We have now demonstrated that GitLab CI incorporates the general concept of
    a build pipeline and also records several metrics about the successes or failures
    of the pipeline's steps. In the following section, we will take a look at these
    individual steps.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经演示了 GitLab CI 如何整合构建管道的通用概念，并记录了管道各个步骤的成功或失败的几个指标。在接下来的章节中，我们将查看这些独立的步骤。
- en: Jobs
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作业
- en: 'Pipeline configuration begins with jobs:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 管道配置从作业（jobs）开始：
- en: Jobs are the most fundamental element of a pipeline and are executed by GitLab
    Runners
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作业是管道的最基本元素，由 GitLab Runner 执行。
- en: Jobs are created with constraints, which govern under what conditions they should
    be executed
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作业是根据约束创建的，约束定义了在什么条件下它们应该执行。
- en: Jobs are top-level elements that can have an arbitrary name and must contain
    the script element as a minimum requirement
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作业是顶级元素，可以有任意名称，并且至少必须包含脚本元素作为最低要求。
- en: There can be an unlimited number of jobs
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以有无限数量的作业。
- en: 'In the pipeline overview, you''ll find several jobs. They have a status, an
    ID, are part of a stage, and have a name, as shown in the following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在流水线概述中，您会找到几个作业。它们有一个状态，一个ID，属于一个阶段，并且有一个名称，如下面的截图所示：
- en: '![](img/ea77f8a6-5477-4e65-b393-cffc656f2c7f.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ea77f8a6-5477-4e65-b393-cffc656f2c7f.png)'
- en: You can create jobs by adding them to a configuration file called `.gitlab-ci.yml`.
    We will discuss this file in more depth in the following section.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将它们添加到名为 `.gitlab-ci.yml` 的配置文件中来创建作业。我们将在以下章节更深入地讨论此文件。
- en: 'An example of a pipeline containing two jobs is as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 包含两个作业的流水线示例如下：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding example is a basic CI/CD pipeline that consists of two named jobs
    (`job1` and `job2`), which execute a script section (in our example, this does
    nothing). In the script section, you can specify a command, script, or a chain
    of commands. For instance, to build a JavaScript, you can set `script` as `npm
    build` or run a shell unit test called `unit-test.sh`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例是一个基本的CI/CD流水线，包含两个命名作业（`job1`和`job2`），这些作业执行一个脚本部分（在我们的示例中，这没有任何操作）。在脚本部分中，您可以指定命令、脚本或一系列命令。例如，要构建JavaScript，您可以将
    `script` 设置为 `npm build` 或运行名为 `unit-test.sh` 的shell单元测试。
- en: Jobs are not run on the GitLab application server, but are picked up by GitLab
    Runners. The runners execute the jobs in their own environment; for example, runner
    A can build `job1` and runner B can build `job2`. Note that the jobs are independent
    from each other. The results from these jobs are aggregated on the GitLab server.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 作业不在GitLab应用服务器上运行，而是由GitLab Runner接管。Runner在其自己的环境中执行作业；例如，Runner A可以构建`job1`，Runner
    B可以构建`job2`。请注意，这些作业彼此独立。这些作业的结果在GitLab服务器上汇总。
- en: Creating .gitlab-ci.yml
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 .gitlab-ci.yml
- en: How GitLab CI interacts with your profile is largely controlled by the `.gitlab-ci.yml` file,
    which must be added to the root of your project. When you push code to your repository,
    GitLab will test whether it's there and start a pipeline with jobs for that specific
    commit.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab CI 如何与您的个人资料交互在很大程度上由 `.gitlab-ci.yml` 文件控制，必须将其添加到项目的根目录。当您将代码推送到存储库时，GitLab将测试是否存在并为该特定提交启动一个带有作业的流水线。
- en: The format of the file is **YAML Ain't Markup Language** (**YAML**). YAML is
    currently a widely used format for configuration files and is best described as
    a data serialization language.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 文件的格式是 **YAML Ain't Markup Language** (**YAML**)。 YAML目前是配置文件的广泛使用格式，最好描述为数据序列化语言。
- en: We have already given you an example of a `.gitlab-ci.yml` file with two jobs
    in an earlier section. In other chapters, we used a `.gitlab-ci.yml` file to describe
    a deployment. So, what are the available possibilities of this file?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前面的章节中已经为您提供了一个 `.gitlab-ci.yml` 文件的示例，其中包含两个作业。在其他章节中，我们使用 `.gitlab-ci.yml`
    文件来描述部署。那么，此文件的可用可能性是什么？
- en: 'A lot of combinations are possible, but the fundamental way of working is to
    first define stages in the file and then add script sections. The complete reference
    of this file can be found here: [https://docs.gitlab.com/ee/ci/yaml/README.html](https://docs.gitlab.com/ee/ci/yaml/README.html).'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 可能有很多组合，但工作的基本方式是首先在文件中定义阶段，然后添加脚本部分。此文件的完整参考资料可以在此处找到：[https://docs.gitlab.com/ee/ci/yaml/README.html](https://docs.gitlab.com/ee/ci/yaml/README.html)。
- en: 'When you are creating your YAML file, it is nice to know that, after saving,
    it will be checked by a linter to verify the syntax of the file, as shown in the
    following screenshot:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当您创建YAML文件时，知道保存后，它将通过linter检查文件的语法，如下面的截图所示，这是个好消息：
- en: '![](img/543779bd-93e2-49bb-acde-b542365a5ca6.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/543779bd-93e2-49bb-acde-b542365a5ca6.png)'
- en: 'The possibilities for this file are endless, so the best way to figure out
    what works for you is to look at open source projects on the GitLab website for
    inspiration, available at: [https://docs.gitlab.com/ee/ci/examples/README.html](https://docs.gitlab.com/ee/ci/examples/README.html).'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件的可能性是无限的，因此找出适合您的方法的最佳方法是查看GitLab网站上的开源项目，以获得灵感，网址为：[https://docs.gitlab.com/ee/ci/examples/README.html](https://docs.gitlab.com/ee/ci/examples/README.html)。
- en: Configuring a runner
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Runner
- en: We briefly described the concept of GitLab Runners in [Chapter 1](384dcfd9-ef7f-470d-89dc-3af7502a2d09.xhtml),
    *Introducing the GitLab Architecture*. Runners are essentially build environments
    that run on a separate machine that connects to the GitLab application's server
    and asks jobs to execute. Runners help to automate product development and achieve
    DevOps integration.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第1章](384dcfd9-ef7f-470d-89dc-3af7502a2d09.xhtml)《GitLab架构介绍》中简要描述了GitLab
    Runner的概念。Runners本质上是运行在独立机器上的构建环境，这些机器连接到GitLab应用程序的服务器并请求执行任务。Runners帮助自动化产品开发并实现DevOps集成。
- en: We configure a runner on the GitLab side, and on the GitLab Runner client side.
    Remember that there is not a single type of runner.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在GitLab端和GitLab Runner客户端端配置了一个Runner。请记住，并不存在单一类型的Runner。
- en: 'There are different kind of runners, including:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同种类的Runner，包括：
- en: A Shell executor
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Shell执行器
- en: A Docker executor
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Docker执行器
- en: A Docker Machine and Docker Machine SSH (auto-scaling) executor
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Docker Machine和Docker Machine SSH（自动扩展）执行器
- en: A Parallels executor
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Parallels执行器
- en: A VirtualBox executor
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个VirtualBox执行器
- en: A SSH executor
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个SSH执行器
- en: A Kubernetes executor
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Kubernetes执行器
- en: For the GitLab CI interface, this does not matter. All runners look the same.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于GitLab CI界面，这并不重要。所有Runner看起来都一样。
- en: The GitLab Runner clients are available on multiple platforms, as it is a Go
    binary that runs on many platforms. The configuration file is called `config.toml`
    and is in the TOML format, which is less complex than the YAML format.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab Runner客户端可以在多个平台上使用，因为它是一个Go二进制文件，可以在许多平台上运行。配置文件名为`config.toml`，采用TOML格式，这比YAML格式简单。
- en: The specification of this format is publicly available and can be found at [https://github.com/toml-lang/toml](https://github.com/toml-lang/toml).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 该格式的规范是公开可用的，可以在[https://github.com/toml-lang/toml](https://github.com/toml-lang/toml)找到。
- en: GitLab Runner features
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GitLab Runner功能
- en: 'Features of GitLab Runner include the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab Runner的功能包括以下内容：
- en: The ability to run multiple jobs concurrently
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够并行运行多个任务
- en: The use of multiple tokens with multiple servers (even per project)
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多个令牌与多个服务器（甚至是每个项目）
- en: The ability to limit the number of concurrent jobs per token
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够限制每个令牌的并发任务数量
- en: 'The jobs GitLab Runner can execute can do the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab Runner可以执行的任务包括以下内容：
- en: Run on a local computer without containers or virtualization
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在没有容器或虚拟化的本地计算机上运行
- en: Run inside Docker containers
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Docker容器内运行
- en: Run inside Docker containers and execute jobs over SSH
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Docker容器内运行并通过SSH执行任务
- en: Run using Docker containers with autoscaling on different clouds and virtualization
    hypervisors
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Docker容器在不同的云和虚拟化虚拟机上自动扩展运行
- en: Run by connecting to a remote SSH server, where it can be executed
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过连接到远程SSH服务器运行，在那里它可以被执行
- en: 'Additional features include the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 其他功能包括以下内容：
- en: GitLab Runner supports Bash, Windows Batch, and Windows PowerShell
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitLab Runner支持Bash、Windows Batch和Windows PowerShell
- en: The runner binary works on GNU/Linux, macOS, and Windows (all Docker-supported
    platforms)
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Runner二进制文件可以在GNU/Linux、macOS和Windows（所有Docker支持的平台）上运行
- en: A runner allows the customization of a job-running environment
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Runner允许自定义任务运行环境
- en: A runner can have an automatic configuration reload without restart
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行器可以在不重启的情况下自动重新加载配置
- en: It is to easy set up, with support for Docker, Docker SSH, Parallels, or SSH-running
    environments
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置非常简单，支持Docker、Docker SSH、Parallels或SSH运行环境
- en: Runners also support the caching of Docker containers
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Runner还支持缓存Docker容器
- en: The Runner package supports installation as a service for GNU/Linux, macOS,
    and Windows
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Runner包支持在GNU/Linux、macOS和Windows上作为服务进行安装
- en: You can enable an embedded Prometheus metrics HTTP server in a runner
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在Runner中启用嵌入式Prometheus度量HTTP服务器
- en: 'You can find an overview of the registered runners in GitLab by logging in
    as an admin and checking the Runners menu on the left, as shown in the following
    screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以管理员身份登录并检查GitLab左侧的Runners菜单，来查看GitLab中注册的Runner概况，如下图所示：
- en: '![](img/c20b8547-3149-4f46-96c0-09fe409c9c24.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c20b8547-3149-4f46-96c0-09fe409c9c24.png)'
- en: 'You should now see a list of runners that have registered on your GitLab instance,
    as shown in the following screenshot:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该可以看到一个已经在GitLab实例上注册的Runner列表，如下所示：
- en: '![](img/ad7d5f65-5971-453d-875d-c20f1adf6aae.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ad7d5f65-5971-453d-875d-c20f1adf6aae.png)'
- en: 'As shown in the following screenshot, if you click a runner, you will see that
    it is possible to do the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图所示，点击一个Runner，你将看到可以执行以下操作：
- en: Configure a paused runner not to accept new jobs
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置一个暂停的Runner，使其不接受新任务
- en: Designate a runner as protected
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Runner 指定为受保护
- en: Set a runner to pick up jobs with or without tags
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Runner 以拾取带有标签或不带标签的作业
- en: Lock a runner to projects
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锁定 Runner 到项目
- en: Set a maximum timeout for a job
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为作业设置最大超时时间
- en: Tag runners
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标记 Runner
- en: '![](img/8d4c1934-181d-4bb0-b415-37e0beef9419.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d4c1934-181d-4bb0-b415-37e0beef9419.png)'
- en: 'On the left, you will be able to see which jobs have been recently processed
    by a runner, as shown in the following screenshot:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧，您将能够看到哪些作业最近被 Runner 处理，正如下面的截图所示：
- en: '![](img/683b67da-934c-43b0-8554-541e9e528d0c.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/683b67da-934c-43b0-8554-541e9e528d0c.png)'
- en: So far, you have seen how GitLab CI fits in with the GitLab product and also
    how GitLab Runners are registered with an instance. We have also looked at the
    basic features of GitLab Runners and showed you how to create a configuration
    file for jobs to be picked up and executed by a runner.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您已经了解了 GitLab CI 如何与 GitLab 产品契合，以及 GitLab Runner 如何与实例注册。我们还介绍了 GitLab
    Runner 的基本功能，并展示了如何为作业创建配置文件，使得作业可以被 Runner 拾取并执行。
- en: Summary
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we discussed GitLab CI, the most critical feature of GitLab
    after offering version control. We explained how to trigger pipelines and how
    to design them using the `.gitlab-ci.yml` file. Then, we showed you the jobs that
    make up the pipelines. We finished with some information on how GitLab runners
    fit into this architecture. In the next chapter, we are going to show you more
    about the GitLab Runner client.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了 GitLab CI，这是 GitLab 在提供版本控制之后最关键的功能。我们解释了如何触发管道以及如何使用 `.gitlab-ci.yml`
    文件设计管道。然后，我们展示了构成管道的作业。最后，我们提供了一些关于 GitLab Runner 如何融入该架构的信息。在下一章中，我们将向您展示更多关于
    GitLab Runner 客户端的内容。
- en: Questions
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Name one of the pillars of Extreme Programming.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请列出极限编程的一个支柱。
- en: What file is used to describe jobs and pipelines?
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用来描述作业和管道的文件是什么？
- en: How does a build system know when to build software in a pipeline?
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建系统如何知道何时在管道中构建软件？
- en: What tests are necessary for reaching the integration phase?
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到达集成阶段需要进行哪些测试？
- en: Which tag is used in the `.gitlab-ci.yml` file to execute a job?
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `.gitlab-ci.yml` 文件中使用哪个标签来执行作业？
- en: What is the name of the configuration file used by the runner?
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由 Runner 使用的配置文件叫什么名字？
- en: How many concurrent sessions can a runner start?
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个 Runner 可以启动多少个并发会话？
- en: How can you get metrics about the execution of a GitLab runner?
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何获取 GitLab Runner 执行的指标？
- en: Further reading
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*gRPC [Golang] Master Class: Build Modern API and Microservices [Video]* by
    *Stephane Maarek*: [https://www.packtpub.com/web-development/grpc-golang-master-class-build-modern-api-and-microservices-video](https://www.packtpub.com/web-development/grpc-golang-master-class-build-modern-api-and-microservices-video).'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*gRPC [Golang] 大师班：构建现代 API 和微服务 [视频]* 由 *Stephane Maarek* 主讲：[https://www.packtpub.com/web-development/grpc-golang-master-class-build-modern-api-and-microservices-video](https://www.packtpub.com/web-development/grpc-golang-master-class-build-modern-api-and-microservices-video)。'
- en: '*Hands-On Auto DevOps with GitLab CI [Video]* by *Alan Hohn*: [https://www.packtpub.com/in/application-development/hands-auto-devops-gitlab-ci-video](https://www.packtpub.com/in/application-development/hands-auto-devops-gitlab-ci-video).'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实操 GitLab CI 自动 DevOps [视频]* 由 *Alan Hohn* 主讲：[https://www.packtpub.com/in/application-development/hands-auto-devops-gitlab-ci-video](https://www.packtpub.com/in/application-development/hands-auto-devops-gitlab-ci-video)。'
