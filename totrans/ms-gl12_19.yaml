- en: Installing and Configuring GitLab Runners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will take a look at the GitLab Runner client architecture.
    After studying this topic, you will understand the basic flow of control between
    GitLab CI and Runners. In the second part of this chapter, I will show you how
    to install Runner software on different operating systems. Since the Runner program
    is written in Golang, there are many platforms that are capable of running the
    client. Golang is known for its excellent multi-platform support.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The Runner client architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a basic runner with the shell executor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow along with the instructions in this chapter, please download the Git
    repository with the examples available from GitHub: [https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter15](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter15)[.](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter15)
  prefs: []
  type: TYPE_NORMAL
- en: 'The other requirements for this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GitLab Runner client – Linux 64-bit**: [https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64](https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linux 32-bit**: [https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-386](https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-386)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Linux ARM**: [https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-arm](https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-arm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**macOS 64-bit**: [https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-darwin-amd64](https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-darwin-amd64)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FreeBSD 64-bit**: [https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-freebsd-amd64](https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-freebsd-amd64)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FreeBSD 32-bit**: [https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-freebsd-386](https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-freebsd-386)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows 32-bit**: [https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-windows-386.exe](https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-windows-386.exe)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows 64-bit**: [https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-windows-amd64.exe](https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-windows-amd64.exe)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**cURL**: [https://curl.haxx.se/download.html](https://curl.haxx.se/download.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Runner client architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We took a brief look at the GitLab architecture in [Chapter 1](384dcfd9-ef7f-470d-89dc-3af7502a2d09.xhtml),
    *Introducing the GitLab Architecture*. It was explained that a GitLab Runner registers
    with a GitLab instance and waits for a job to execute. Unlike the individual components
    that are a part of the GitLab frontend application server, the runner has a very
    straightforward architecture. The communication between a runner and its GitLab
    host is basically one-way.
  prefs: []
  type: TYPE_NORMAL
- en: Basic architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The main network communication is from the GitLab Runner to the GitLab CI,
    never the other way around. This is shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/74727c52-cbf6-47c2-bb6e-195b186058bd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The behavior is best depicted by a sequence diagram like the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/417ee550-ae39-4540-b50a-8e511aa4e7f8.png)'
  prefs: []
  type: TYPE_IMG
- en: When the GitLab Runner starts, it tries to find its coordinator by contacting
    the GitLab URL. When it registers itself with the registration token, it gets
    a special token to connect to GitLab. After a restart, it connects and waits for
    a job from GitLab CI. It polls GitLab in intervals, and when there is nothing
    to do, it will check GitLab less often to prohibit too much network traffic.
  prefs: []
  type: TYPE_NORMAL
- en: When a job is queued in GitLab CI, it will try to find an available runner.
    After receiving the command, it will clone the project-specific commit that triggered
    the job and will execute the steps defined in the `.gitlab-ci.yml` file. After
    execution, the results are sent back to GitLab.
  prefs: []
  type: TYPE_NORMAL
- en: 'GitLab CI has two types of runners:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Specific Runners: As a developer, you can create your own runners and register
    them to a project in GitLab. Only then is the project visible to the runner.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Shared Runners: A GitLab administrator can also designate a runner to be shared.
    It can then pick up jobs from several projects. Because this is potentially classed
    as a security breach, be careful when you''re promoting runners to be shared.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following screenshot, you can see the CI/CD configuration of a project
    in GitLab, where you can set which runner to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/02838e13-ac9c-4bfd-91a2-8abdca80dee2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The GitLab Runner clones the repository and performs steps that are defined
    in the `.gitlab-ci.yml` file. It is possible to inject special variables that
    can be protected on the GitLab project level:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc761b09-be1d-453a-bb45-91ddc7a63130.png)'
  prefs: []
  type: TYPE_IMG
- en: We've explained the basic architecture of the runner platform, so now we'll
    install the software on different operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'The GitLab Runner software is available for the following operating systems:'
  prefs: []
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FreeBSD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: macOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The installation procedure is largely identical on all systems, with subtle
    differences. In the next section, we will show you how to install the basic Runner
    on several types of operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic Runner with the shell executor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On the machine where you install the GitLab Runner software, you can run the
    shell executor to locally build software. This shell type of executor can be run
    on all platforms where the runner software is installed. Therefore, you can run
    Bash or a Bourne shell on a Unix-like system, or CMD or PowerShell on the Windows
    platform.
  prefs: []
  type: TYPE_NORMAL
- en: It isn't a very safe way to build because it can access local resources on the
    system where the runner executes. More secure executors will be introduced in
    later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will demonstrate how to install the GitLab Runner software
    for your platform.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Runner on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you run a Linux distribution with a package management system such as
  prefs: []
  type: TYPE_NORMAL
- en: '`yum` or `apt`, you can install the GitLab Runner package using that method.
    Alternatively, you can install the software manually. First, we will cover the
    installation via a package manager.'
  prefs: []
  type: TYPE_NORMAL
- en: Using a package manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For yum-based systems, you can add the official GitLab package repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, you can install GitLab with this basic command (as root or with
    `sudo`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For apt-based systems, it''s a bit more tricky to stay up to date with the
    latest and greatest. We can add a link to GitLab apt repositories, but unfortunately,
    Debian has named the package in the base repository the same as GitLab. This means
    that the base packages automatically take precedence. A solution to this is to
    `pin` the package to the right repository. This can be done by adding a file to
    `/etc/apt/preferences.d`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, you can install the correct `apt` package repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The output from the preceding command is shown in the following code block.
    As you can see, it checks the `gpg` key and adds the package repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is much simpler – you just install it via `apt-get`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In the output, you will find a message like the following, which means that
    you have now installed all the binaries. However, you have to register the GitLab
    Runner first before running it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The process of registering the runner is explained in more detail in the *Registering
    a runner* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Updating the package is done just as updating all the other packages on the
    system is done: you can run the `apt-get update` or `yum update` command.'
  prefs: []
  type: TYPE_NORMAL
- en: When installing with `apt-get` or `yum`, package management will give you a
    GitLab Runner install with the necessary configuration files and init scripts
    for your Linux distribution. You can also choose to just download the runner binary
    and run it in a generic way.
  prefs: []
  type: TYPE_NORMAL
- en: Using a manual installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Simply download one of the binaries for your CPU architecture (x86-64, x86-32,
    or ARM):'
  prefs: []
  type: TYPE_NORMAL
- en: '**x86-64 bit architecture**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**x86-32 bit architecture**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**ARM architecture**: This is the binary for the ARM CPU architecture, in a
    list:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'When you''re getting binaries this way, you have to make them executable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can create a GitLab Runner user as root:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You then need to install it and run it as a service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Although the manual installation is a bit more work than via the package managers,
    it still isn't a complex process. One advantage is that, when using the manual
    installation, you can't install newer versions of the runner. The package manager
    maintainers will never install a development version, while you can. Updating
    the binary is not very hard either.
  prefs: []
  type: TYPE_NORMAL
- en: Updating a manually installed runner binary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The process we are following when updating is to replace the Golang binary that
    was downloaded previously. It does have to be stopped, so make sure it isn't running,
    otherwise the installation will fail.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop the service (you need root permissions, like before):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, download a new binary to replace the older one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Set the execute bit on the runner binary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the runner again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The manual install is much easier, but you have to manage the updates yourself.
    In this era of automation, it makes more sense to let the package manager that's
    available for your distribution to manage it.
  prefs: []
  type: TYPE_NORMAL
- en: Installing on Mac
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like on Linux, there are several ways to install the GitLab Runner software.
    Unlike on Linux, where package management is recommended by GitLab, for macOS,
    they recommend the manual install. The other way to install is by using the Homebrew
    installation method, which you saw earlier in the book (*Installing Redis* section
    of  [Chapter 1](384dcfd9-ef7f-470d-89dc-3af7502a2d09.xhtml), *Introducing the
    GitLab Architecture*).
  prefs: []
  type: TYPE_NORMAL
- en: The manual way of installing a runner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, get the binary for your system (with `sudo`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, just like we did previously, make the binary executable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have the binary in place, we can run the program as another user
    if we want:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The runner will be installed and will be run after a system reboot.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and using the Homebrew package manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A unified package manager for macOS doesn't really exist, but the one that's
    used the most is Homebrew, which can be found at [https://brew.sh/](https://brew.sh/).
    It works with formulas that contain scripts and settings to install binaries.
  prefs: []
  type: TYPE_NORMAL
- en: 'A Homebrew formula exists to install GitLab Runner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to install the runner as a service (this will also start it):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: There are some drawbacks to using macOS as a runner platform. Many developers
    use runners on macOS to build iOS-related software. Often, UI testing is also
    involved. It isn't possible to automate this. You would have to run in the background
    as a system service (LaunchDaemon), and then the UI isn't reachable anymore. You
    can only run the runner in user mode to get access to the UI, which is why you
    must always log in to run the GitLab Runner.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the runner is done by issuing `brew upgrade gitlab-runner`. For a manual
    install, it's a bit more complicated.
  prefs: []
  type: TYPE_NORMAL
- en: Updating a manually installed runner binary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just like we did for Linux, we are replacing the Golang binary that was downloaded
    previously. It also needs to be stopped, so make sure it isn''t running, otherwise
    the installation will fail:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to stop the service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Like we did previously, get the binary to replace the runner''s executable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Make the downloaded binary executable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Start the GitLab Runner service again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The steps to install the GitLab Runner software are roughly the same on the
    Linux and macOS platforms. The good part about using a package manager is that
    the software is easier to upgrade.
  prefs: []
  type: TYPE_NORMAL
- en: Installing on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unlike GitLab itself, which doesn't run on Windows, you can operate the GitLab
    Runner software on Windows machines.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of runner binaries, depending on your CPU architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: 32-bit version ([https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-windows-386.exe](https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-windows-386.exe))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 64-bit version ([https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-windows-amd64.exe](https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-windows-amd64.exe))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download it and copy it to `gitlab-runner.exe` in a folder on your local drive;
    for example, `C:-runner`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you need an elevated command prompt to register and install the software:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The registration steps will be shown in the next section as they are almost
    universal for all platforms.
  prefs: []
  type: TYPE_NORMAL
- en: 'When registration succeeds, you can start the GitLab Runner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have installed the runner software, the next step is to register
    with GitLab.
  prefs: []
  type: TYPE_NORMAL
- en: Registering a runner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A GitLab Runner needs some basic information to start:'
  prefs: []
  type: TYPE_NORMAL
- en: The URL where it can find GitLab, which is called the coordinator URL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The special token that you can find in GitLab that's meant to register runner
    instances.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A description that will later show up in the GitLab CI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tags, which you can give to the runner to make it easier to find in GitLab CI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The type of executor (remember that there are many types, all of which were
    named in the *Runner client architecture* section).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This basic information can be provided to the runner in two ways: interactive
    and non-interactive. First, we will discuss the interactive way.'
  prefs: []
  type: TYPE_NORMAL
- en: The interactive way of registering a runner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The web location of the GitLab server to connect is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Please enter the gitlab-ci coordinator URL (for example, [https://gitlab.com](https://gitlab.com)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You also need to enter the runner registration token since it''s needed to
    register with GitLab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The runner registration token can be found on the Admin Area | Overview | Runners
    page or under Projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'You want a nice description so that you can find the runner later (the default
    is `hostname`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Enter the tags that should apply to this runner (for example, `javarunner`).
    This can be changed later in GitLab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The most important part is determining the type of executor (for this chapter,
    I chose the shell executor):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The non-interactive way of registering a runner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In larger environments, deployments are frequently scripted. So, for the runner,
    there is also a non-interactive install available to help in the effort of automating
    the infrastructure. You can specify subcommands to the GitLab `register` argument.
    To find out about these options, type the following on the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'To register a runner, using the most common options, you would do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'When the runner is registered, it will show up in GitLab in the Runner list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1ed45ca0-a248-4b5d-add9-ee08630b3079.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The registration process is basically the process of telling the runner where
    GitLab is situated, and initiating a key exchange to secure access to GitLab.
    Following a successful registration, the runner saves the configuration information
    in a TOML file, which looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The shell can also be set to `sh` for a simple Bourne shell or `powershell` on
    Windows. On Linux, this is usually placed in `/etc/gitlab-runner/config.toml`.
  prefs: []
  type: TYPE_NORMAL
- en: Running the nightly version
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are feeling adventurous, you could also install the latest release,
    which isn''t part of any release yet. Do this at your own risk. There could still
    be bugs in there:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Linux**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://s3.amazonaws.com/gitlab-runner-downloads/master/binaries/gitlab-runner-linux-386](https://s3.amazonaws.com/gitlab-runner-downloads/master/binaries/gitlab-runner-linux-386)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://s3.amazonaws.com/gitlab-runner-downloads/master/binaries/gitlab-runner-linux-amd64](https://s3.amazonaws.com/gitlab-runner-downloads/master/binaries/gitlab-runner-linux-amd64)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://s3.amazonaws.com/gitlab-runner-downloads/master/binaries/gitlab-runner-linux-arm](https://s3.amazonaws.com/gitlab-runner-downloads/master/binaries/gitlab-runner-linux-arm)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**macOS**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://s3.amazonaws.com/gitlab-runner-downloads/master/binaries/gitlab-runner-darwin-386](https://s3.amazonaws.com/gitlab-runner-downloads/master/binaries/gitlab-runner-darwin-386)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://s3.amazonaws.com/gitlab-runner-downloads/master/binaries/gitlab-runner-darwin-amd64](https://s3.amazonaws.com/gitlab-runner-downloads/master/binaries/gitlab-runner-darwin-amd64)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Windows**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://s3.amazonaws.com/gitlab-runner-downloads/master/binaries/gitlab-runner-windows-386.exe](https://s3.amazonaws.com/gitlab-runner-downloads/master/binaries/gitlab-runner-windows-386.exe)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://s3.amazonaws.com/gitlab-runner-downloads/master/binaries/gitlab-runner-windows-amd64.exe](https://s3.amazonaws.com/gitlab-runner-downloads/master/binaries/gitlab-runner-windows-amd64.exe)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FreeBSD**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://s3.amazonaws.com/gitlab-runner-downloads/master/binaries/gitlab-runner-freebsd-386](https://s3.amazonaws.com/gitlab-runner-downloads/master/binaries/gitlab-runner-freebsd-386)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://s3.amazonaws.com/gitlab-runner-downloads/master/binaries/gitlab-runner-freebsd-amd64](https://s3.amazonaws.com/gitlab-runner-downloads/master/binaries/gitlab-runner-freebsd-amd64)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://s3.amazonaws.com/gitlab-runner-downloads/master/binaries/gitlab-runner-freebsd-arm](https://s3.amazonaws.com/gitlab-runner-downloads/master/binaries/gitlab-runner-freebsd-arm)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we should have a runner installed and ready for use.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to install a runner is by using a package manager running on
    the host operating system. Doing a manual install allows you to run development
    versions or patched versions easily because it has only one Golang binary.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we showed you the basic architecture of a GitLab Runner. Then,
    we showed you how to install it on several operating systems with a shell executor.
    On most systems, there is a more or less automated way to do this, which also
    manages updates and platform compatibility. There's also a manual way of installing
    the software on every system. Using the manual method allows you to run developer
    versions of the runner easily. The registration process of the runner can be done
    step by step or in one command.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will deploy GitLab Runner in a Docker container and
    also in a more managed way in a Kubernetes cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What part of GitLab does a runner connect to?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What additional action has to be performed on Debian-based systems to install
    the right package?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In what language is the runner client written?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the default description that's given to a runner?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What command argument is used to communicate the registration token to the `gitlab
    register` command?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Hands-On Full Stack Development with Go*, by *Mina Andrawos*: [https://www.packtpub.com/web-development/hands-full-stack-development-go](https://www.packtpub.com/web-development/hands-full-stack-development-go)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Windows 10 for Enterprise Administrators*, by *Jeff Stokes*, *Manuel Singer*,
    and *Richard Diver*: [https://www.packtpub.com/in/networking-and-servers/windows-10-enterprise-administrators](https://www.packtpub.com/in/networking-and-servers/windows-10-enterprise-administrators)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Hands-On Continuous Integration and Delivery*, by *Jean-Marcel Belmont*: [https://www.packtpub.com/in/virtualization-and-cloud/hands-continuous-integration-and-delivery](https://www.packtpub.com/in/virtualization-and-cloud/hands-continuous-integration-and-delivery)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
