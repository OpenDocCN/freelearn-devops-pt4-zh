- en: Using GitLab Runners with Docker or Kubernetes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GitLab Runner 与 Docker 或 Kubernetes
- en: 'In the previous chapter, we installed a GitLab Runner with the shell executor.
    In this chapter, we will take a closer look at containerized GitLab Runners. You
    can run a GitLab Runner in a container in multiple ways:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们安装了带有 shell 执行器的 GitLab Runner。在本章中，我们将更详细地了解容器化的 GitLab Runners。你可以通过多种方式在容器中运行
    GitLab Runner：
- en: '**With the Shell executor running in a custom-built Docker container**: This
    is not recommended because you are responsible for building and supporting this
    custom container afterward. On the other hand, if you want to tightly control
    the components inside the container and the behavior of them, then it might be
    a good way to containerize the Runner. Scaling this solution also requires more
    work from your side because the Runner itself only knows how to run jobs and connect
    to GitLab. You will collect state (files in `/tmp` or elsewhere) in your containers
    if they don''t restart after a job, so be prepared to handle that as well.'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用在自定义构建的 Docker 容器中运行的 Shell 执行器**：这不推荐使用，因为你需要在之后负责构建和维护这个自定义容器。另一方面，如果你想严格控制容器内的组件及其行为，那么将
    Runner 容器化可能是一个不错的选择。扩展此解决方案也需要更多的工作，因为 Runner 本身仅知道如何运行作业并连接到 GitLab。如果你的容器在作业后不重启，你将会在容器中收集状态（如
    `/tmp` 或其他地方的文件），因此需要准备好处理这些问题。'
- en: '**With the Docker executor, which pulls and starts a Docker image for your
    job**: This is a much more scalable solution, with the added bonus of having no
    state. Each build gets a pristine clean environment and starts all over again.
    Another bonus is that you are able to create services for a job, which is another
    container or several that are started in parallel with a container for your job.
    For instance, you can start a MySQL database and it will be a linked service that
    is available under the service name.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 Docker 执行器，该执行器为你的作业拉取并启动 Docker 镜像**：这是一个更具扩展性的解决方案，另一个优点是没有状态。每次构建都会得到一个崭新的环境并重新开始。另一个好处是，你可以为作业创建服务，这是另一个容器或多个容器，这些容器会与作业容器并行启动。例如，你可以启动一个
    MySQL 数据库，并且它将作为一个服务通过服务名称进行访问。'
- en: '**With the Kubernetes executor so that you can use a Kubernetes cluster**:
    The Runner can communicate with the cluster management API and ask for resources
    to spin up containers. The Runners are completely stateless and when there is
    a decreasing number of jobs in the queue, the number of containers is scaled back
    automatically.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 Kubernetes 执行器，以便你可以使用 Kubernetes 集群**：Runner 可以与集群管理 API 通信，并请求资源来启动容器。当队列中的作业数量减少时，Runner
    会自动缩减容器数量，保持完全无状态。'
- en: '**With the Docker executor and autoscaling enabled (Docker Machines creates
    new Runners)**: In this configuration, the GitLab Runner controls the Docker Machine
    binary. It can create new Runner containers on the fly and scale down again if
    there are less jobs in the queue.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 Docker 执行器并启用自动扩展（Docker Machines 创建新的 Runners）**：在此配置中，GitLab Runner
    控制 Docker Machine 二进制文件。它可以实时创建新的 Runner 容器，并且在队列中的作业较少时会自动缩减。'
- en: In this chapter, we are going to take a look at the basic way of running a GitLab
    Runner, and how to orchestrate this using a management system such as Kubernetes.
    The autoscaling executors will be part of the next chapter. The reason for this
    is that the autoscaling Docker executor has a lot of options and requires more
    planning and system management features to maintain.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解运行 GitLab Runner 的基本方法，以及如何使用 Kubernetes 等管理系统来进行 orchestration。自动扩展执行器将在下一章介绍。之所以如此，是因为自动扩展的
    Docker 执行器有很多选项，并且需要更多的规划和系统管理功能来维护。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Runner client architecture
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Runner 客户端架构
- en: Creating your own Dockerized GitLab Runner
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你自己的 Docker 化 GitLab Runner
- en: Using a prebuilt Docker container to deploy GitLab Runners
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用预构建的 Docker 容器部署 GitLab Runners
- en: Using a Kubernetes cluster to spawn GitLab Runners
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Kubernetes 集群启动 GitLab Runners
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow along with the instructions in this chapter, please download this
    book's GitHub repository, along with the examples that are available, from GitHub
    at [https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter16](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter16).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟随本章中的说明，请从 GitHub 下载本书的 GitHub 仓库以及可用的示例，链接为 [https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter16](https://github.com/PacktPublishing/Mastering-GitLab-12/tree/master/Chapter16)。
- en: 'The other requirements for this chapter are as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的其他要求如下：
- en: Docker installed for your platform
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为你的平台安装 Docker
- en: The `wget` command-line download tool ([https://www.gnu.org/software/wget/](https://www.gnu.org/software/wget/))
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`wget` 命令行下载工具（[https://www.gnu.org/software/wget/](https://www.gnu.org/software/wget/)）'
- en: Access to the Alpine Docker image ([https://hub.docker.com/_/alpine](https://hub.docker.com/_/alpine))
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问 Alpine Docker 镜像（[https://hub.docker.com/_/alpine](https://hub.docker.com/_/alpine)）
- en: Access to the Python Alpine Docker image ([https://hub.docker.com/r/lgatica/python-alpine](https://hub.docker.com/r/lgatica/python-alpine))
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问 Python Alpine Docker 镜像（[https://hub.docker.com/r/lgatica/python-alpine](https://hub.docker.com/r/lgatica/python-alpine)）
- en: Access to the GitLab Runner Docker image ([https://hub.docker.com/r/gitlab/gitlab-runner](https://hub.docker.com/r/gitlab/gitlab-runner))
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问 GitLab Runner Docker 镜像（[https://hub.docker.com/r/gitlab/gitlab-runner](https://hub.docker.com/r/gitlab/gitlab-runner)）
- en: The `kubectl` utility on your system (you can find installation instructions
    at [https://kubernetes.io/docs/tasks/tools/install-kubectl/](https://kubernetes.io/docs/tasks/tools/install-kubectl/))
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你系统上的 `kubectl` 工具（你可以在 [https://kubernetes.io/docs/tasks/tools/install-kubectl/](https://kubernetes.io/docs/tasks/tools/install-kubectl/)
    找到安装说明）
- en: Helm or Tiller (a Kubernetes utility to help you to manage clusters: [https://helm.sh/docs/using_helm/](https://helm.sh/docs/using_helm/))
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Helm 或 Tiller（一个帮助你管理集群的 Kubernetes 工具：[https://helm.sh/docs/using_helm/](https://helm.sh/docs/using_helm/)）
- en: Runner client architecture
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Runner 客户端架构
- en: 'If you utilize a GitLab Runner with Docker, the resulting architecture differs
    from the one in the previous chapter in one way. The Runner binary is executed
    from inside a Docker container instead of directly on a host system. The following
    diagram shows this architecture:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 Docker 中的 GitLab Runner，那么生成的架构与上一章中的架构有一个区别。Runner 二进制文件是在 Docker 容器内执行，而不是直接在主机系统上执行。下图展示了这种架构：
- en: '![](img/752fc375-9252-4ff6-9b2f-492f2ec7b80c.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/752fc375-9252-4ff6-9b2f-492f2ec7b80c.png)'
- en: The image is the same whether you create a container yourself or you use an
    existing container from the internet.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是自己创建一个容器，还是使用来自互联网的现有容器，图像都是一样的。
- en: 'If you are going to orchestrate your GitLab Runners using Kubernetes, the architecture
    is going to look a bit different. You can see that, inside the cluster, a **GitLab
    Runner** with the Kubernetes architecture can talk to the cluster''s Kubernetes
    API to scale up the number of Runner instances:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算使用 Kubernetes 来编排你的 GitLab Runners，那么架构将略有不同。你可以看到，在集群内部，具有 Kubernetes
    架构的**GitLab Runner**可以与集群的 Kubernetes API 通信，以便扩展 Runner 实例的数量：
- en: '![](img/933b0dfe-812b-4c39-8117-60663c61fd66.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/933b0dfe-812b-4c39-8117-60663c61fd66.png)'
- en: The two architectures both use Docker containers as the core unit of operation. The
    first needs more management in the field of scaling, upgrading the software, and
    setting up a network. Much of that has already been arranged with Kubernetes.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种架构都将 Docker 容器作为核心操作单元。第一种架构在扩展、升级软件和设置网络方面需要更多的管理。而 Kubernetes 已经为大部分这类任务提供了安排。
- en: Now, we know about the difference between these architectures and that a Runner
    is deployed without a container, but what does this mean in practice? We will
    explore this in the following sections.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们了解了这些架构之间的区别，并且知道 Runner 是在没有容器的情况下部署的，但这在实践中意味着什么呢？我们将在接下来的章节中探讨这一点。
- en: Creating your own Dockerized GitLab Runner
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你自己的 Docker 化 GitLab Runner
- en: Most people will use prebuilt Docker containers, but there are reasons to build
    your own. Maybe you have special requirements when building your software that
    aren't installed in the default Docker images that are available or maybe it's
    just not possible because of security restrictions. A lot of default images have
    software included that contain vulnerabilities.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人会使用预构建的 Docker 容器，但有时有理由去构建自己的。也许你在构建软件时有特殊需求，而这些需求在默认的 Docker 镜像中并未安装，或者由于安全限制，根本无法使用现有镜像。许多默认镜像中包含的软件存在漏洞。
- en: Let's create our own Dockerized GitLab Runner for the project from [Chapter
    10](1eceee2e-41d6-41cc-95eb-3d225f25f3fa.xhtml), *Create Your Product, Verify,
    and Package it*, that is, the event manager documentation, using a Dockerfile. You
    will find our first attempt in the next section.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从 [第10章](1eceee2e-41d6-41cc-95eb-3d225f25f3fa.xhtml) *创建你的产品，验证并打包它* 中的事件管理器文档开始，使用一个
    Dockerfile 来创建我们自己的 Docker 化 GitLab Runner。你将在下一节中找到我们的第一次尝试。
- en: Let me stress that this Dockerfile is purely for demonstration purposes. We
    don't recommend building containers like this for production-like systems or even
    your own development systems. It's being used here to show you how easily you
    can wrap commands and services in containers.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我要强调的是，这个 Dockerfile 完全是为了演示目的。我们不推荐将这种方式用于生产系统，甚至是你自己的开发系统。它在这里用于展示如何轻松地将命令和服务封装到容器中。
- en: 'The first line of the file is as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 文件的第一行如下：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is the base image we used for the container. It is from the Alpine Linux
    distribution, which contains only the bare minimum to run programs. It is only
    4.41 MB and, when using container security scanners such as Clair ([https://github.com/coreos/clair](https://github.com/coreos/clair)),
    it doesn't show vulnerabilities. You can also build containers from scratch (see
    [https://ericchiang.github.io/post/containers-from-scratch/](https://ericchiang.github.io/post/containers-from-scratch/)),
    but this is a very tedious task. The Alpine Linux image is safe enough and is
    ready to go immediately.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们为容器使用的基础镜像。它来自 Alpine Linux 发行版，包含了运行程序所需的最低配置。它仅为 4.41 MB，并且在使用如 Clair（[https://github.com/coreos/clair](https://github.com/coreos/clair)）等容器安全扫描工具时，不显示漏洞。你也可以从零开始构建容器（请参见
    [https://ericchiang.github.io/post/containers-from-scratch/](https://ericchiang.github.io/post/containers-from-scratch/)），但这是一个非常繁琐的任务。Alpine
    Linux 镜像足够安全，并且可以立即使用。
- en: 'In the following lines, we install some basic packages:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的行中，我们安装了一些基本的包：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We need CA certificates because we need the GitLab Runner client to connect
    to our HTTPS endpoint, where a TLS handshake will take place. The Git binary is
    also necessary to clone code from a project.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要 CA 证书，因为我们需要 GitLab Runner 客户端连接到我们的 HTTPS 端点，在那里会进行 TLS 握手。Git 二进制文件也是必需的，以便从项目中克隆代码。
- en: 'Finally, the last command that is set to run in the creation sequence of the
    container is used to download, execute, and register the GitLab Runner with our
    GitLab server:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在容器创建序列中设置的最后一个命令用于下载、执行并将 GitLab Runner 注册到我们的 GitLab 服务器：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For this example''s sake, we have hardcoded all of the arguments in the Dockerfile
    to show you how easy it is to Dockerize your command (don''t do this normally):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本例的方便，我们将所有参数硬编码在 Dockerfile 中，展示如何轻松将命令容器化（通常不建议这样做）：
- en: '`non-interactive`: Without it, there would be a dialog that takes you through
    the configuration settings.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`non-interactive`：如果没有这个选项，会出现一个对话框，引导你完成配置设置。'
- en: '`url`: This is the URL of our GitLab server.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url`：这是我们 GitLab 服务器的 URL。'
- en: '`registration-token`: This is the token of a Runner from the project, group,
    or GitLab instance''s scope.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`registration-token`：这是来自项目、组或 GitLab 实例范围内的 Runner 令牌。'
- en: '`executor`: This specifies which kind of Runner to implement. We chose to use
    the shell executor.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`executor`：这指定了要实现的 Runner 类型。我们选择使用 shell 执行器。'
- en: '`shell`: This specifies which kind of shell to implement; this could be `bash`, `sh`,
    or `powershell` on Windows. We chose `sh` as it is the most basic one.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`shell`：这指定了要使用的 shell 类型；可以是 `bash`、`sh` 或 Windows 上的 `powershell`。我们选择了 `sh`，因为它是最基础的。'
- en: '`description`: This is what description you will see in GitLab.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`description`：这是你在 GitLab 中看到的描述。'
- en: '`tag-list`: We can put tags on Runners for easier management in GitLab. In
    this case, we have used `docker`.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tag-list`：我们可以为 Runner 添加标签，以便在 GitLab 中进行更方便的管理。在这个例子中，我们使用了 `docker`。'
- en: '`run-untagged`: We set it to `true`, which means that any job with or without
    tags can be run on this Runner.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`run-untagged`：我们将其设置为 `true`，意味着带标签或不带标签的任何作业都可以在这个 Runner 上运行。'
- en: '`locked`: The Runner isn''t tied to a project.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`locked`：Runner 不与任何项目绑定。'
- en: 'The next step is to build the Docker container with the `docker build` command
    (we specify `–no-cache` so that we can rebuild every time). The output is as follows,
    and we will go through it step by step. The first part is pulling the Alpine base
    image:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是使用 `docker build` 命令构建 Docker 容器（我们指定 `–no-cache`，这样每次都能重新构建）。输出如下，我们将逐步讲解。第一部分是拉取
    Alpine 基础镜像：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The first Docker layer has been created. The second step is adding the necessary
    packages:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个 Docker 层已经创建。第二步是添加必要的包：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The previous code downloaded the packages we specified, as well as some dependencies.
    This is still a modest amount of packages. In the following build step, the GitLab
    Runner binary is downloaded:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码下载了我们指定的包以及一些依赖项。这仍然是一个适度的包量。在接下来的构建步骤中，GitLab Runner 二进制文件将被下载：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The next step is the execution of the Runner:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是执行 Runner：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, we need to register it:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要注册它：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The binary was successfully downloaded, and the registration was successful;
    a specific Runner token was created and is now part of the Docker image. The final
    part of the build sets the entry point for the instantiation of a Docker instance
    with this image:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制文件已成功下载，注册也成功；已创建特定的 Runner 令牌，并且现在它是 Docker 镜像的一部分。构建的最后一部分设置了此镜像实例化 Docker
    实例的入口点：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'It automatically tagged the image with `latest`. The image is now available
    on the machine where its build was executed. You can view it by using the following
    command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 它自动将镜像标记为 `latest`。该镜像现在可在其构建执行的机器上使用。您可以使用以下命令查看它：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you go to GitLab and open the Runner list in the administrative settings
    menu, a new Runner will appear there:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您去 GitLab 并在管理设置菜单中打开 Runner 列表，您会看到一个新的 Runner 出现：
- en: '![](img/46ba2707-2ebe-4c45-bf16-b953004b46b8.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/46ba2707-2ebe-4c45-bf16-b953004b46b8.png)'
- en: 'Now, it''s time to start the Runner and try to build the `eventmanager-documentation`
    project. You can start the Runner in the foreground using the following command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候启动 Runner 并尝试构建 `eventmanager-documentation` 项目了。您可以使用以下命令在前台启动 Runner：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The following output should appear after a brief pause:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 简短的暂停后，应该会出现以下输出：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see, it has successfully loaded a configuration that was saved in
    the container during the registration phase. It also mentions the fact that it
    didn't load a metrics and debug session server, so this Runner exposes no service
    of any kind to the outside world. It has connected to the GitLab server and is
    now waiting for commands.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，它已经成功加载了在注册阶段保存在容器中的配置。它还提到没有加载度量和调试会话服务器，因此该 Runner 不向外部世界暴露任何服务。它已连接到
    GitLab 服务器，现正等待命令。
- en: 'When we try to run the `eventmanager-documentation` project pipeline for the
    master branch, it will spin off a build job to the new GitLab Runner:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们尝试为主分支运行 `eventmanager-documentation` 项目的流水线时，它将把构建作业分配给新的 GitLab Runner：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Unfortunately, it''s failed to build the project. If we look at the job log,
    we get the following output:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，它未能构建项目。如果我们查看作业日志，将得到以下输出：
- en: '![](img/7fdcd13d-9b72-4b72-9bf8-b59bcc6f21f1.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7fdcd13d-9b72-4b72-9bf8-b59bcc6f21f1.png)'
- en: It's quite clear why the job failed. We created a basic GitLab Runner container
    without support for the Python language. That is why it complains about the **Python
    Package Manager** (**PIP**) not being found. We need Python to install the **Amazon**
    **Web** **Services** **Command-Line** **Interface** (**AWS CLI**) utility, which
    is defined in the `.gitlab-ci.yml` file for this project.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，作业失败的原因。我们创建了一个基本的 GitLab Runner 容器，但不支持 Python 语言。这就是它抱怨找不到**Python 包管理器**(**PIP**)的原因。我们需要
    Python 来安装**亚马逊** **网络** **服务** **命令行** **接口**(**AWS CLI**)实用工具，它在本项目的 `.gitlab-ci.yml`
    文件中定义。
- en: 'This is easy to fix. We can change the first line in the Dockerfile to the
    following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题很容易修复。我们可以将 Dockerfile 中的第一行改为以下内容：
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will change the base image of the Docker container to a version of Linux
    with Python included. Now, you can rebuild the image using the exact same preceding
    command line and starting the container again.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把 Docker 容器的基础镜像更改为包含 Python 的 Linux 版本。现在，您可以使用完全相同的前述命令行重新构建镜像，并重新启动容器。
- en: 'If we run the pipeline for this project again, the job will succeed:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次运行此项目的流水线，作业将会成功：
- en: '![](img/ba7011ed-5490-4bfe-b4a6-0edcfee8d0ad.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba7011ed-5490-4bfe-b4a6-0edcfee8d0ad.png)'
- en: You can create much more elaborate container images, but this was a basic way
    to containerize a Runner.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建更加复杂的容器镜像，但这只是将 Runner 容器化的基本方法。
- en: In this section, we have created our own GitLab Runner container and registered
    it with a GitLab instance. In the next section, we will use a prebuilt image that
    GitLab provides from their site.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经创建了自己的 GitLab Runner 容器，并将其注册到 GitLab 实例。在下一节中，我们将使用 GitLab 从其网站提供的预构建镜像。
- en: Using a prebuilt Docker container to deploy GitLab Runners
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用预构建的 Docker 容器来部署 GitLab Runners
- en: 'There are two basic flavors of prebuilt Docker containers available (Ubuntu-based
    and Alpine-based). The big difference between them is that the Alpine one is much
    smaller and has a better security track. You can find it here: [https://gitlab.com/gitlaborg/gitlabrunner/blob/master/dockerfiles/alpine/Dockerfile](https://gitlab.com/gitlaborg/gitlabrunner/blob/master/dockerfiles/alpine/Dockerfile).'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了两种基本的预构建 Docker 容器版本（基于 Ubuntu 和基于 Alpine）。它们之间的主要区别在于 Alpine 版本更小，并且安全性更高。你可以在这里找到它：[https://gitlab.com/gitlaborg/gitlabrunner/blob/master/dockerfiles/alpine/Dockerfile](https://gitlab.com/gitlaborg/gitlabrunner/blob/master/dockerfiles/alpine/Dockerfile)。
- en: You can run the container with arguments that will be passed through to the
    GitLab Runner binary that is started inside the container. This also enables easier
    runtime registration of the Runner with a GitLab instance. Remember from the *Creating
    your own Dockerized GitLab Runner* section that we baked the registration of the
    Runner inside the image. You can find the appropriate images on Docker Hub: [https://hub.docker.com/r/gitlab/gitlab-runner/tags](https://hub.docker.com/r/gitlab/gitlab-runner/tags).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用参数来运行容器，这些参数将传递给容器内启动的 GitLab Runner 二进制文件。这也使得 GitLab Runner 注册到 GitLab
    实例变得更加容易。记得在 *创建你自己的 Docker 化 GitLab Runner* 章节中，我们已经将 Runner 的注册功能内置到镜像中。你可以在
    Docker Hub 上找到相关的镜像：[https://hub.docker.com/r/gitlab/gitlab-runner/tags](https://hub.docker.com/r/gitlab/gitlab-runner/tags)。
- en: 'Just start a container using the following command. It will automatically download
    the right image:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 只需使用以下命令启动容器，它会自动下载正确的镜像：
- en: '[PRE14]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can check the logs of the running container with the following command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令检查正在运行的容器日志：
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding output means that the `gitlab-runner` software is running inside
    the container, but it isn't registered yet.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 上述输出意味着 `gitlab-runner` 软件正在容器内运行，但尚未注册。
- en: 'The next step is to register it and save the configuration file in the container
    (in the configuration volume you specified with `-v`):'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是注册它并将配置文件保存在容器中（保存在你通过 `-v` 指定的配置卷中）：
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If you examine the container logs (maybe you left the window open) after this,
    a message should appear:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在此之后查看容器日志（也许你留下了窗口打开），应该会看到一条消息：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This means that the Runner now has a valid configuration and is online with
    GitLab.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着 Runner 现在具有有效的配置，并且已与 GitLab 在线连接。
- en: 'If we try to trigger the pipeline for the `eventmanager-documentation` project
    again, a job will be run:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次尝试触发 `eventmanager-documentation` 项目的管道，将会运行一个任务：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In GitLab, you will see this job running:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitLab 中，你将看到此任务正在运行：
- en: '![](img/9ca6f192-edb0-4d8c-aab6-ab2b8288fb4e.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9ca6f192-edb0-4d8c-aab6-ab2b8288fb4e.png)'
- en: 'In the log file of the container, a message will appear if the job succeeds:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果任务成功，容器的日志文件中会显示一条消息：
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This is also visible in the job log in GitLab:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这也可以在 GitLab 的任务日志中看到：
- en: '![](img/225c4efc-b8f2-4186-8f5b-8177f110b7fb.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/225c4efc-b8f2-4186-8f5b-8177f110b7fb.png)'
- en: 'This concludes the two ways of running Docker locally with relatively simple
    containers:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这就总结了使用相对简单的容器在本地运行 Docker 的两种方法：
- en: Building your own container
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建你自己的容器
- en: Using a prebuilt image
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用预构建的镜像
- en: How can you manage this if you have massive amounts of build jobs? You can use
    an orchestration system such as Kubernetes, which is the subject of the next section.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有大量构建任务，如何管理它们呢？你可以使用 Kubernetes 等编排系统，这是下一节的主题。
- en: Using a Kubernetes cluster to spawn GitLab Runners
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Kubernetes 集群启动 GitLab Runners
- en: The best method of deploying a GitLab Runner container into a Kubernetes cluster
    is by using the GitLab Runner Helm chart.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 将 GitLab Runner 容器部署到 Kubernetes 集群的最佳方法是使用 GitLab Runner Helm chart。
- en: It contains all of the configuration information that's run using the GitLab
    Runner Kubernetes executor. For each new job it receives from GitLab CI/CD, it
    will provision a new pod within the specified namespace to run it.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 它包含所有使用 GitLab Runner Kubernetes 执行器运行的配置信息。对于从 GitLab CI/CD 接收到的每个新任务，它会在指定的命名空间内配置一个新的
    pod 来运行。
- en: 'You can run the install using the following command:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令进行安装：
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This command can take some time to complete. After some time, you will receive
    the following output:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令可能需要一些时间才能完成。过一段时间后，你将看到如下输出：
- en: '[PRE21]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This shows quite a bit of output, but the important part is that the status
    of the Helm chart is `DEPLOYED`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了相当多的输出内容，但重要的部分是 Helm chart 的状态是 `DEPLOYED`。
- en: The GitLab Runner should now be registered to the GitLab instance reachable
    at [https://gitlab-ee.joustie.nl/](https://gitlab-ee.joustie.nl/).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: GitLab Runner现在应该已注册到可以访问的GitLab实例：[https://gitlab-ee.joustie.nl/](https://gitlab-ee.joustie.nl/)
- en: We have run this deployment on my local Kubernetes cluster.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本地Kubernetes集群上运行了这个部署。
- en: 'You can find out which Kubernetes pods are running by using the following command:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下命令查找哪些Kubernetes pods正在运行：
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'As you can see, the Runner was deployed in Kubernetes in the Runner list of
    the administrative section of GitLab:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，Runner已在Kubernetes中部署，并出现在GitLab管理部分的Runner列表中：
- en: '![](img/e3e42102-c4ee-4cfe-ac72-57ce5833725a.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e3e42102-c4ee-4cfe-ac72-57ce5833725a.png)'
- en: 'We can run the pipeline for the `eventmanager-documentation` project that was
    introduced in [Chapter 10](1eceee2e-41d6-41cc-95eb-3d225f25f3fa.xhtml), *Create
    Your Product, Verifying it, and Packaging it,* to demonstrate the fact that multiple
    Runners are spawned on the Kubernetes cluster. Here is the pipeline view in GitLab
    showing multiple parallel jobs:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以运行[第10章](1eceee2e-41d6-41cc-95eb-3d225f25f3fa.xhtml)中介绍的`eventmanager-documentation`项目的管道，*创建你的产品，验证并打包它*，以演示多个Runner在Kubernetes集群上启动的事实。以下是GitLab中的管道视图，展示了多个并行任务：
- en: '![](img/e80b020c-9086-45f1-a007-c2c6142fdf6b.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e80b020c-9086-45f1-a007-c2c6142fdf6b.png)'
- en: 'If you look into individual jobs, you will see that it takes some time to spin
    up the new Runner resources in the cluster. Until it is ready, the job is polled:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看单个任务，你会看到在集群中启动新的Runner资源需要一些时间。直到它准备好，任务会进行轮询：
- en: '![](img/20bb77e4-4c92-4486-ac83-2b858610ec41.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/20bb77e4-4c92-4486-ac83-2b858610ec41.png)'
- en: 'After some time, a Runner is spawned in the Kubernetes cluster and the jobs
    are dispatched to it:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 过了一段时间，一个Runner被启动在Kubernetes集群中，任务被分配到它：
- en: '![](img/68dcf651-55e4-4809-ad45-63014911eadc.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/68dcf651-55e4-4809-ad45-63014911eadc.png)'
- en: 'You can view a list of pods on the Kubernetes cluster and see that many pods
    were created:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以查看Kubernetes集群中pods的列表，并看到许多pods已被创建：
- en: '![](img/349e3596-bab6-4413-b629-551bcfb3f0fc.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/349e3596-bab6-4413-b629-551bcfb3f0fc.png)'
- en: 'After some time, you will see that some parallel started jobs are finishing
    (in green):'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 过了一段时间，你会看到一些并行启动的任务正在完成（绿色表示）：
- en: '![](img/f274f9f4-9cdb-436a-8a91-cffa490d7e98.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f274f9f4-9cdb-436a-8a91-cffa490d7e98.png)'
- en: 'In the end, all of the jobs will succeed and the pipeline will be passed:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，所有任务都会成功，管道将通过：
- en: '![](img/ebbe1740-7893-4758-9a3d-aa46e9c27c2a.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ebbe1740-7893-4758-9a3d-aa46e9c27c2a.png)'
- en: After this job, the number of GitLab Runners is reduced once more.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这项任务完成后，GitLab Runner的数量再次减少。
- en: By doing this, we've shown you how to use Kubernetes to manage containers and
    how to handle scaling on the fly.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们向你展示了如何使用Kubernetes管理容器，并且如何处理动态扩展。
- en: Summary
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we showed you how to run GitLab Runners in containers. First,
    we looked at a quick way to containerize an existing Runner. Then, we showed you
    how to use existing Docker images that are provided by GitLab itself. Afterward,
    we talked about a way to manage a greater amount of containers and how you can
    handle this more economically with Kubernetes.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们向你展示了如何在容器中运行GitLab Runners。首先，我们介绍了将现有Runner容器化的一种快速方法。然后，我们展示了如何使用GitLab自身提供的现有Docker镜像。之后，我们讨论了如何管理更多容器，并且如何通过Kubernetes以更经济的方式处理这些容器。
- en: 'In the next chapter, we will discuss another way to scale Runners: with autoscaling.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将讨论另一种扩展Runner的方法：自动扩展。
- en: Questions
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are the advantages of the Docker executor?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker执行器的优势是什么？
- en: What is the basic build command for a Docker container?
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker容器的基本构建命令是什么？
- en: Which file contains the building instructions for a container?
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个文件包含容器的构建指令？
- en: What is the name of a small Linux container distribution?
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 小型Linux容器发行版的名称是什么？
- en: What tool is used to configure a Kubernetes cluster with much more ease?
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用什么工具可以更轻松地配置Kubernetes集群？
- en: How can you set the number of Runners to spawn by default in Kubernetes?
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何设置Kubernetes中默认启动的Runner数量？
- en: Further reading
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*Kubernetes Course from a DevOps Guru (Kubernetes and Docker)*, by *Tao W*,
    *James Lee*, and *Basit Mustafa*: [https://www.packtpub.com/application-development/kubernetes-course-devops-guru-kubernetes-docker](https://www.packtpub.com/application-development/kubernetes-course-devops-guru-kubernetes-docker)'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*来自DevOps专家的Kubernetes课程（Kubernetes和Docker）*，由*陶伟*、*James Lee*和*Basit Mustafa*编写：[https://www.packtpub.com/application-development/kubernetes-course-devops-guru-kubernetes-docker](https://www.packtpub.com/application-development/kubernetes-course-devops-guru-kubernetes-docker)'
- en: '*Learn Docker – Fundamentals of Docker 18.x*, by *Gabriel N. Schenker*: [https://www.packtpub.com/in/networking-and-servers/learn-docker-fundamentals-docker-18x](https://www.packtpub.com/in/networking-and-servers/learn-docker-fundamentals-docker-18x)'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*学习 Docker – Docker 18.x 基础*，作者：*加布里埃尔·N·申克*： [https://www.packtpub.com/in/networking-and-servers/learn-docker-fundamentals-docker-18x](https://www.packtpub.com/in/networking-and-servers/learn-docker-fundamentals-docker-18x)'
- en: '*Hands-On Continuous Integration and Delivery*, by *Jean-Marcel Belmont*: [https://www.packtpub.com/in/virtualization-and-cloud/hands-continuous-integration-and-delivery](https://www.packtpub.com/in/virtualization-and-cloud/hands-continuous-integration-and-delivery)'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实践持续集成与交付*，作者：*让-马塞尔·贝尔蒙特*： [https://www.packtpub.com/in/virtualization-and-cloud/hands-continuous-integration-and-delivery](https://www.packtpub.com/in/virtualization-and-cloud/hands-continuous-integration-and-delivery)'
- en: '*Containers from Scratch*: [https://ericchiang.github.io/post/containers-from-scratch/](https://ericchiang.github.io/post/containers-from-scratch/)'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*从零开始的容器*： [https://ericchiang.github.io/post/containers-from-scratch/](https://ericchiang.github.io/post/containers-from-scratch/)'
