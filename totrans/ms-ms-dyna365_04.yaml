- en: Online and Container-Based Sandboxes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Dynamics 365 Business Central allows us to set up sandboxes for development
    and testing purposes. There are two general options for these sandboxes: online
    sandboxes (SaaS-based) and Docker-based sandboxes (self-deployed).'
  prefs: []
  type: TYPE_NORMAL
- en: Online sandboxes can be created very easily because they run as a service, which
    is the same as Dynamics 365 Business Central production environments. The only
    requirement is an existing production tenant.
  prefs: []
  type: TYPE_NORMAL
- en: Docker-based sandboxes are based on Docker containers and can run either on
    Azure or on-premise.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating online sandboxes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The basics of Docker images and containers and how to work with them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up local Docker environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mastering the `navcontainerhelper` PowerShell utility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing the right Docker image for your development purposes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your own Docker image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating online sandboxes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When subscribing to a trial tenant or directly purchasing Dynamics 365 Business
    Central, you also have the ability to create online sandbox environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create online sandboxes in two ways: from a production environment
    client and/or from Dynamics 365 Business Central Admin Center.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When creating them from a production environment, search (*Alt *+ *Q*) for
    `sandbox` and choose Sandbox Environment (Preview):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e6b3dc6b-6bca-4200-a80d-94fd8e70de9e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will then be prompted to create a new sandbox environment or open or reset
    an existing sandbox. If there are no sandboxes and you choose open or reset, a
    new sandbox will be created. Online sandboxes that are created using a production
    environment client have the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: They are named **sandbox** by default and are also visible in the Dynamics 365
    Business Central Admin Center.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They do not contain any customer data and just have data coming from a standard
    demo/evaluation Cronus company.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It is very important to carefully read the Microsoft disclaimer when subscribing
    to an online sandbox tenant, and it''s worth mentioning that this feature is still
    marked as being in preview:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8e6ad481-0c9e-4b72-96da-8328f05cbb65.png)'
  prefs: []
  type: TYPE_IMG
- en: You can also create up to three sandbox environments from Dynamics 365 Business
    Central Admin Center. With the appropriate credentials, log into the Admin Center
    through a supported browser at [https:\\businesscentral.dynamics.com\GUID\Admin](https://businesscentral.dynamics.com/GUID/Admin),
    where `GUID` is the tenant ID of your environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following shows what it looks like in the Admin Center:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a85a3108-4061-46d4-8907-28f1cf5f4d50.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the New button and then give the new online sandbox a valid name. Check
    the option for copying production data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e7e50d0-0ea4-41b1-9fbe-9dc1fc807f87.png)'
  prefs: []
  type: TYPE_IMG
- en: After a while, your sandbox, with a copy of the production data, will be up
    and running and ready for testing and development tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Online sandboxes–pros and cons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'According to the Microsoft disclaimer, online sandboxes are still a preview
    feature, and we recommend using them for demo purposes or spot development activities
    only. Online sandboxes have the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: They are supported by a different priority than production environments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tenants are created in Azure SQL Database S-level pools, which are less performant
    than production P-level pools.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They are still marked as Preview, so they are frequently subject to change.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: During upgrades, currently all per-tenant extensions are uninstalled and you/your
    CSP partner are required to install them once again.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can find out more about the background of this by reading the following
    articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://demiliani.com/2019/01/24/dynamics-365-business-central-tenant-upgrade-extensions-disappeared-in-sandbox-environment/](https://demiliani.com/2019/01/24/dynamics-365-business-central-tenant-upgrade-extensions-disappeared-in-sandbox-environment/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://demiliani.com/2019/03/14/dynamics-365-business-central-online-sandbox-makes-you-crazy-maybe-remember-these-points/](https://demiliani.com/2019/03/14/dynamics-365-business-central-online-sandbox-makes-you-crazy-maybe-remember-these-points/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For professional development, container-based sandboxes are far more appropriate
    and we encourage you to use Docker-contained sandboxes in your company when developing
    either AppSource or per-tenant extensions.
  prefs: []
  type: TYPE_NORMAL
- en: From the online production environment, you can also search (*Alt *+ *Q*) for
    sandbox and click on Sandbox Environment (Container)to easily set up an offline
    local or Azure-hosted Docker-contained sandbox.
  prefs: []
  type: TYPE_NORMAL
- en: You can find out more about this at[https://demiliani.com/2018/03/29/d365bc-container-sandbox-environment/](https://demiliani.com/2018/03/29/d365bc-container-sandbox-environment/).
  prefs: []
  type: TYPE_NORMAL
- en: Let's move on to the next section and learn how to work with Docker-based environments.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you opt to use self-deployed sandboxes, they will be based on Docker. Docker
    is the leading cross-platform software container environment. Since this is a
    book about Dynamics 365 Business Central, this section will only be a quick introduction
    to Docker, but if you want to learn more, there are excellent learning resources
    in the official documentation by Docker ([https://docs.docker.com/](https://docs.docker.com/))
    and Microsoft ([https://docs.microsoft.com/en-us/virtualization/windowscontainers/about/index](https://docs.microsoft.com/en-us/virtualization/windowscontainers/about/index)),
    both of which are very good starting points.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamics 365 Business Central runs *only* on Windows, so when you're looking
    for Docker documentation, make sure that it is intended for Windows. While most
    of Docker is platform-independent, there are some platform-specific sections as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to follow the content of the following sections, you need to know
    about the following Docker basics:'
  prefs: []
  type: TYPE_NORMAL
- en: A Docker image is like a pre-built template with the minimum amount of OS binaries,
    libraries, and application binaries needed. The image can be identified by a name,
    such as Business Central / Sandbox. The exact image version can be specified with
    a tag. For example, `1910-cu1-de`would give you the **October 19 release** (**1910**),
    **CU 1** (**cu1**), **German version** (**de**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Docker container is an instance of an image with an immutable base (the files
    that are in the image) and its changes on top. A container is not a **virtual
    machine** (**VM**). It doesn't have a GUI or anything you can connect to by using
    the **Remote Desktop Protocol** (**RDP**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Docker host is a (physical or virtual) machine where containers are running.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Docker registry is a place where you and others can upload (push) and download
    (pull) images. Specifically, images can be downloaded from repositories that are
    part of the registry.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All Dynamics 365 Business Central Docker images are available through the Microsoft
    Container Registry, which you can find at [http://mcr.microsoft.com](http://mcr.microsoft.com)in
    the business central repository. It will be called **sandbox** or **on-prem**,
    so a typical address to pull a Dynamics 365 Business Central on-premise image
    from is [mcr.microsoft.com/businesscentral/onprem:1810-cu5-de](http://mcr.microsoft.com/businesscentral/onprem:1810-cu5-de).
  prefs: []
  type: TYPE_NORMAL
- en: For previews of new and upcoming releases, there is also a special repository
    called `bcinsider.azurecr.io`, but you need credentials to access it. Microsoft
    provides those credentials through the Ready to Go! program on collaborate ([https://docs.microsoft.com/en-us/collaborate/](https://docs.microsoft.com/en-us/collaborate/)).
  prefs: []
  type: TYPE_NORMAL
- en: The scripts that are used to create and run the Dynamics 365 Business Central
    images are open source and available at [https://github.com/Microsoft/nav-docker](https://github.com/Microsoft/nav-docker).
  prefs: []
  type: TYPE_NORMAL
- en: It is also worth noting that while these images are called business central,
    they also contain a SQL Server for the database, an IIS for the `Web Client`,
    and file sharing by default.
  prefs: []
  type: TYPE_NORMAL
- en: Some base mechanisms when using Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the following sections, we will use a couple of mechanisms that cover most
    real-life scenarios. Let's go through each of them.
  prefs: []
  type: TYPE_NORMAL
- en: Environment variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An environment variable is a way to parameterize a Docker container when it
    starts. Dynamics 365 Business Central images understand a lot of environments,
    for example, those used to set the authentication type or the username and password,
    or the SQL server and database you want to connect your Business Central Service
    Tier to. Environment variables are set using the `-e` parameter. If you need to
    set multiple environment variables, you can just use multiple `-e` parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: There is no list of all environment variables you can use to configure Dynamics
    365 Business Central containers in line with your requirements, but the script
    for setting up those variables in the image is a good starting point, and the
    names of the variables give you a pretty good idea of what they do. You can find
    this script at [https://github.com/Microsoft/nav-docker/blob/master/generic/Run/SetupVariables.ps1](https://github.com/Microsoft/nav-docker/blob/master/generic/Run/SetupVariables.ps1).
  prefs: []
  type: TYPE_NORMAL
- en: Volumes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With volumes, you have a way to map folders on your Docker host to your container,
    for example, to give it access to binaries or other files it needs to run your
    solution.
  prefs: []
  type: TYPE_NORMAL
- en: If you are not using volumes and you remove a container, all the changes you
    make to the filesystem inside the container will be lost because they will have
    been removed, along with the container.
  prefs: []
  type: TYPE_NORMAL
- en: 'Volumes are set using the `-v` parameter, followed by the path of your host,
    a colon, and the path inside your container. If you want to map the `c:\data\containers`folder
    on your host to `c:\temp` inside of the container, you would write the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Networks and ports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Docker lets you use different ways to connect your containers to the network.
    If you configure nothing else, it uses a so-called NAT network. This means that
    your containers get an IP address known only on the Docker host, which also makes
    them reachable on the host. As an alternative, you can create a so-called transparent
    network, which means that the container will share the network connection of the
    host and will try to get its own IP address using either DHCP for dynamic IP assignment
    or a static IP address you configure. If you have a transparent network called
    `transpNet`, you would instruct Docker to use it with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Dynamics 365 Business Central images use all the standard ports, so you have
    `7045`-`7049` for the Business Central Service Tier services, `443` for HTTPS,
    `80` for HTTP for the `Web Client`, and `1443` for SQL. They also share some files
    through port `8080`, which is mapped to an IIS backend share.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don''t want to use transparent networks but still want to make the ports
    available outside the Docker host, you can use a mechanism called port mapping
    with the`-p` parameter. With that, you can instruct Docker to make a port of the
    container that''s available on the same or a different port of your host. If you
    want to make an HTTPS-based `Web Client` listening on port `443` available on
    port `4443` of your host, you would typically use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Since Dynamics 365 Business Central works a lot better if it knows which ports
    it is listening on, the best approach is to include `-e WebClientPort=4443`, which
    causes the `Web Client` to listen on that port instead of the standard port, `443`.
    Consequently, your port mapping parameter would be `-p 4443:4443`.
  prefs: []
  type: TYPE_NORMAL
- en: Scenarios where Docker is especially useful for Dynamics 365 Business Central
    sandboxes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a couple of scenarios where the use of Docker containers makes a
    lot of sense and can help solve common problems. Please note that, at the time
    of writing, there is no production support for Dynamics 365 Business Central running
    in a Docker container, so you can only use it for development and testing purposes.
    The scenarios that will be covered in this book are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Locally available scenarios**: You want to run the sandboxes on your local
    sandbox or on your own virtual machine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Centrally available environments**: The sandboxes are provided on a central
    environment and are administered by some kind of operations team.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Containers hosted on Azure VMs**: If you don''t want or can''t have a VM
    in your own datacenter, you can use Azure **Infrastructure-as-a-Service** (**IaaS**)
    to host your sandboxes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Serverless environments on Azure Container Instances**: You can also use
    the **Platform-as-a-Service** (**PaaS**) offering of Azure Container Instances
    if you just want to run your containers without worrying about Docker itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is worth mentioning that there are other options, such as the **Azure Kubernetes
    Service** (**AKS**) or products from other cloud providers, but since Dynamics
    365 Business Central tends to run with more Microsoft-oriented customers and Kubernetes
    only recently initiated support for Windows containers, they will not be covered
    here.
  prefs: []
  type: TYPE_NORMAL
- en: Docker is also very useful for automated builds in a **Continuous Integration/Continuous
    Delivery** (**CI/CD**) pipeline. This topic will be covered in depth in [Chapter
    11](bc01dacb-fdbe-496b-82a0-e45d2435e574.xhtml), *Source Control Management and
    DevOps with Business Central*.
  prefs: []
  type: TYPE_NORMAL
- en: Locally available environments using pure Docker commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having your Dynamics 365 Business Central sandboxes local makes sense if you
    want to give the person working with them full control or if you need to use them
    offline. It will, however, require the person using it to understand at least
    the basics of Docker, which is not very complicated but may or may not suit your
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Your first container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step in running Dynamics 365 Business Central sandboxes is installing
    Docker. This is quite easy and documented at [https://docs.docker.com/install/windows/docker-ee/](https://docs.docker.com/install/windows/docker-ee/).
    Once you have done that, it's time to run your first container. Microsoft has
    provided a very helpful PowerShell module called `navcontainerhelper`, which eases
    the process of creating containers. However, to give you some basic understanding
    of the underlying mechanisms and how Dynamics 365 Business Central images work,
    it makes sense to look at a couple of easy examples with just Docker.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most basic way to run a Dynamics 365 Business Central sandbox is by using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This only works in what is called process isolation, which allows the container
    to use host resources such as memory as necessary. Depending on your configuration
    and whether you are running on an old version of Windows 10 or Docker, you may
    get an error stating that the container doesn't have enough memory. In that case,
    add `-m 3G` as a parameter, which will allow the container to reserve 3 GB of
    memory.
  prefs: []
  type: TYPE_NORMAL
- en: More on process isolation can be found at [https://docs.microsoft.com/en-us/virtualization/windowscontainers/manage-containers/hyperv-container](https://docs.microsoft.com/en-us/virtualization/windowscontainers/manage-containers/hyperv-container).
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that this will, by default, pull the image based on Windows Server 2016\.
    If you want to run the much smaller and therefore quicker image based on Windows
    Server 2019, you need to add what is called a tag; in this case, this will be `ltsc2019`.
    More details can be found in the *Choosing the right image* section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This instructs Docker to run a container using the specified image, that is, `mcr.microsoft.com/businesscentral/sandbox`.
    Running a container means that Docker checks whether that image has already been
    downloaded (pulled) and if not, it pulls it. If it is already available, or after
    Docker has downloaded the image for you, it creates a container for that image
    and starts it. You will see the output from the main process inside the console
    window where you ran that command.
  prefs: []
  type: TYPE_NORMAL
- en: With the `-e` parameter, you let Docker know that you want to set the `accept_eula=y`
    environment parameter inside the container, which means that you accept the **End
    User License Agreement** (**EULA**). This is necessary whenever you run a Dynamics
    365 Business Central sandbox.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the output of a `docker run` command where the image was not
    locally available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the log output lets you know where you can reach the `Web Client`
    and the Development Server service (for connections with Visual Studio Code with
    the AL Language extension) for your container (use the IP address for now; more
    on that later) and which username and password to use.
  prefs: []
  type: TYPE_NORMAL
- en: Pulling new image versions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Note that, by default, Docker doesn''t check whether there is a new version
    of the image and tags you to try to download. If you want to make sure you have
    the current version, you can run the following command, which will always check
    if there is a newer image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If there is a new version available, it will download it and produce some output
    that looks similar to what you saw previously. If no new version is available,
    you will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also use more environment parameters, a volume, and port mapping to
    show you a more advanced example while using the mechanisms we introduced earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This achieves the following:'
  prefs: []
  type: TYPE_NORMAL
- en: It accepts the EULA and tells the image not to use SSL for the `Web Client`
    with the two `-e` parameters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It maps a local folder, `c:\dev\addins`, to the `mine` subfolder of the `Add-Ins`
    folder of the Business Central Service Tier with the `-v` parameter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It makes port `80` available as port `80` on your laptop with the `-p` parameter.
    You could also use`-p 8080:80`, which causes port `8080` on your laptop to go
    to port `80` on the container.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It names the container `mycontainer` so that you can easily refer to it with
    the `--name` parameter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have learned about running a local Docker environment, let's have
    a look at how to connect to an existing SQL Server instance.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to an existing SQL Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can instruct the container to connect to an existing SQL Server and database
    instead of using the SQL Server inside the container, which will also mean that
    the SQL Server inside the container will not be started. This is needed if you
    want to connect multiple instances to the same database, but also makes a lot
    of sense if you want to run a lot of containers on the same host. Otherwise, you
    will have one SQL Server running per container, which will need a lot of resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, I am assuming there is a SQL Server (in a container or not)
    called `sqlserver` running in your local environment where the Business Central
    container can reach it. I have a SQL user called `sqluser`with a password of `1SuperSecretPwd!`,
    who has the necessary rights to access a Business Central database called `FinancialsW1`
    on that server. For this scenario, the `docker run` command would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the final output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note that, in this case, the container will not create any users in the database
    because it assumes that, if you are using an existing database, you will also
    have existing users in that database. Also, note that the container will import
    its own encryption key into the database, which is used to encrypt passwords.
    So, if you want to connect multiple containers to the same database in that way,
    you need to make sure the encryption key is shared.
  prefs: []
  type: TYPE_NORMAL
- en: Handling your running containers with Docker cmdlets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you need to get a PowerShell session into a running container, you have
    two options:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you can use `Enter-PSSession`, as if you were connecting to another
    computer, except you need to give it the full ID of the container instead of the
    machine name. The easiest way to get there is to use a subcommand querying Docker
    for that container. Entering a PS session for the `mycontainer` container would
    look like this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The preceding statement *only* works when you're running as an administrator.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second option is to execute the `powershell` command on your container
    and instruct Docker to open an interactive Terminal for it. This would look as
    follows for the `mycontainer` container:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: With both commands, you end up with a PowerShell session inside your container.
    If you want to run Business Central cmdlets, the easiest way is to call `c:\run\prompt.ps1`,
    which imports all the development and admin cmdlets.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see all the currently running containers, you can write and execute `docker
    ps`, which gives you the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To see all currently existing containers, you can use `docker ps -a`, which
    also includes exited and/or stopped containers (the output also shows a container
    with a status of `Exited`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Stopping and starting containers is as easy as using `docker stop` and `docker
    start`, respectively. If you want to remove a container, you need to either stop
    (`docker stop`) and then remove it (`docker rm`) or use the `-f` parameter for
    `docker rm` to force the removal of the container, even if it's still running.
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that removing a container means that all the files inside that container
    are gone and can't be restored.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the command is successful, it only returns the name or ID of the container
    as you specified it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note that you can address containers either with their name or with their ID.
    You don't need to specify the full ID; you just need enough characters from the
    beginning of the ID so that Docker can uniquely identify the container. Also,
    note that `docker ps` gives you a truncated ID for each container, and you can
    use `docker ps –no-trunc` to get the full ID.
  prefs: []
  type: TYPE_NORMAL
- en: Creating locally available environments using navcontainerhelper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To make it easier to adopt and use Dynamics 365 Business Central Docker images,
    Microsoft has created a PowerShell Module called `navcontainerhelper`. It uses
    the same images and commands that you can use with pure Docker commands and, in
    a lot of places, you can see how the cmdlets translate to Docker commands. It
    also contains a very valuable collection of additional PowerShell scripts to help
    with common development, build, test, and release tasks in Dynamics 365 Business
    Central.
  prefs: []
  type: TYPE_NORMAL
- en: Installing navcontainerhelper and keeping it updated
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use the `navcontainerhelper` module, you need to install it from the PowerShell
    gallery, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If there is a new version of `navcontainerhelper`(which, at the time of writing,
    happens at least every couple of weeks) with new helpful features and bug fixes,
    just run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Your first container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow the same examples as in the previous section, you will learn how
    to run your first container using `navcontainerhelper`. However, `navcontainerhelper`
    expects you to give it a name and make a conscious decision about authentication.
    If you don''t provide any other parameters, it assumes that you want to use Windows
    authentication and asks for your password so that it can create a user with the
    same username and password inside the container. This also enables **single-sign-on**
    (**SSO**). Consider the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the last couple of lines, `navcontainerhelper` even creates
    convenient desktop shortcuts. They allow you to access the `Web Client` or open
    a PowerShell or Command Prompt inside your container with a simple double-click.
    The shortcuts actually use the same `docker exec` command that you saw in the
    previous sections.
  prefs: []
  type: TYPE_NORMAL
- en: '`New-NavContainer` has a long list of parameters, which may either be just
    mappings for environment parameters or very helpful little functions. To give
    you an example, if you specify `-updateHosts`, then `navcontainerhelper` will
    add the name and IP address of the container to the hosts file on your laptop.
    This means that you don''t need to use the IP address – you can use the container
    name as the address! There are, of course, ways to do this without `navcontainerhelper`,
    but none are as easy as specifying one single parameter in your startup command.'
  prefs: []
  type: TYPE_NORMAL
- en: Pulling new image versions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pulling new images works exactly the same for `navcontainerhelper` as it does
    for plain Docker; there's no special command there. However, you can specify `-alwaysPull` as
    a parameter for your `New-NavContainer` command, which will –as the name clearly
    implies –always try to pull a new image version before running your container.
  prefs: []
  type: TYPE_NORMAL
- en: But `navcontainerhelper` actually adds more convenient optimizations automatically.
    If you do not specify `ltsc2016`or `ltsc2019`as part of your tag, it will determine
    the best container platform and use that. It also automatically determines whether
    process isolation is possible and sets the memory limit, if necessary, to 4 GB.
  prefs: []
  type: TYPE_NORMAL
- en: Using more environment parameters, a volume, and port mapping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we mentioned previously, `New-NavContainer` provides a lot of parameters
    that just set environment parameters. We did the following in our previous example
    using plain `docker run`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'To achieve the same in `navcontainerhelper`, we would use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s compare the features:'
  prefs: []
  type: TYPE_NORMAL
- en: Accepting the EULA is done with `-accept_eula`, and not using SSL is the default
    for `navcontainerhelper`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The mapping of the local folder to the `Add-ins` folder in the container is
    done with the `-additionalParameters` parameter. This is the mechanism in `navcontainerhelper`
    that specifies any `docker run` parameter you may need that is not already covered.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Port mapping is done with the `-PublishPorts` parameter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Naming the container is done with the `-containerName` parameter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Again, `navcontainerhelper` adds more automatically: `c:\programdata\navcontainerhelper`
    is always shared with the container as the same folder inside the container. Also,
    every container has its own folder at `c:\programdata\navcontainerhelper\extensions\<containername>`,
    and everything local to this container is placed there.'
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to an existing SQL Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`navcontainerhelper` makes this task just a bit more convenient than using
    Docker directly. You need to specify the same parameters, but you can give it
    a credential object instead of putting the username and password in as clear text.
    As a reminder, the following is what the `docker run` command looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the same command but using `navcontainerhelper`. It will open
    a credential entry dialog where you can enter your SQL username and password.
    But instead of sharing the password as clear text in the environment variables,
    `navcontainerhelper` ensures that passwords are handled securely, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Note that the default authentication mechanism when using `docker run` is `NavUserPassword`,
    while the default for `navcontainerhelper` is Windows, so in order to achieve
    the same result, we need to specify that as well.
  prefs: []
  type: TYPE_NORMAL
- en: Handling your running containers with NavContainerHelper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is no special command in `navcontainerhelper` that lets you see your running
    containers, so you just use the same `docker ps` commands that were introduced
    in the previous section. There are commands for starting and stopping containers
    (`Start-NavContainer` and `Stop-NavContainer`, respectively), but they are very
    thin wrappers around `docker start` and `docker stop` with no additional benefits.
  prefs: []
  type: TYPE_NORMAL
- en: 'Removing containers, however, is done with `Remove-NavContainer`, which does
    a bit more: it cleans up the shortcuts and container-specific folders, and it
    removes entries in your hosts file if you specify `-updatehosts`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also a command to get a session into your container called `Enter-NavContainer`.
    This gives you a PowerShell session inside your container with the added benefit
    of calling `c:\run\prompt.ps1`, which gives you all development and admin cmdlets
    immediately and a nicely formatted prompt so that you always know where you are.
    Consider the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Centrally available on-premise environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have only covered locally running containers but, depending on your
    scenario, you may want to set up one or multiple central VMs that are administered
    not by the developers and consultants but by an operations team. In this case,
    the same options that we explained previously exist, but you need to consider
    a couple of additional topics. You also need to decide whether you want a full
    self-service environment where a developer or consultant can self-provision a
    new sandbox or whether you want the operations team to handle creating and deleting
    the sandboxes.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your operations team handles these operations, the only topic you need to
    think about is networking. You have the following two options to make your container
    ports available outside the Docker host:'
  prefs: []
  type: TYPE_NORMAL
- en: Port mapping lets you map container ports to host ports. However, this will
    become tedious over time as you need to find free ports for every container and
    tell your users which ports to use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transparent networking lets the container get its own IP address (static or
    DHCP) and keep the standard ports. This method works with a lot less maintenance.
    We will look at this in more detail now.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, creating a transparent network is quite easy. In the simplest scenario,
    you just write the following to create a transparent network called `transpNet`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also set the subnet or IP range, but that is beyond the scope of this
    book. Check the online documentation for Docker or run `docker network create
    --help` to learn more about that. Telling a container to use a transparent network
    is also easy because there is a parameter called `--network`. Use it as follows
    when running pure Docker:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '`navcontainerhelper` doesn''t have a specific network parameter on `New-NavContainer`at
    the time of writing, but you can use `-additionalParametersparameter` instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: With that, your container will get its own IP address and you will probably
    be able to reach it by name from outside your Docker host as well. Please note
    that this very much depends on the setup of the network that your host is running
    in. It is similar to adding a new VM to the network and, depending on the security
    mechanisms that have been put in place by network administrators, this may not
    actually work without further setup.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to have an environment where developers or consultants can create
    their own environments, you will have to solve two issues:'
  prefs: []
  type: TYPE_NORMAL
- en: '**How would you like container handling to be done (create, start, stop, and
    delete actions)?** You could allow your users to access the host through RDP or
    PowerShell, but then it becomes difficult to handle permissions. You can also
    use tools such as Portainer ([https://portainer.io](https://portainer.io)), which
    is a GUI for handling containers. Here, users can manage their containers and
    you can, for example, create templates with predefined values for the container
    parameters. However, note that you won''t be able to use `navcontainerhelper`
    in this scenario because that would mean running PowerShell scripts on your host.
    Another option is to create some kind of frontend application yourself, but that
    of course will take some time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**How will users access the filesystem in your containers?** It depends on
    your Dynamics 365 Business Central usage. Often, it is necessary to access the
    filesystem. If you are already running a full-cloud solution, this is not possible
    anyway, but if you still have on-premise customers, this may be an issue. The
    easiest solution is to always map a volume into your container, such as `c:\shared`,
    and allow users to access the folder on the host.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Containers hosted on Azure VMs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to run your sandboxes in Azure VMs, the challenges you face are
    almost the same as they are with centrally available sandboxes on an on-premise
    VM. However, you can take some shortcuts: Microsoft provides standard VM images
    with preinstalled Docker, such as Windows Server 2019 Datacenter with Containers,
    so you don''t have to worry about that.'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to use `navcontainerhelper`, you need to install it, and then you
    are ready to go. An even quicker way is to use one of the quick start templates
    provided by Microsoft, such as [http://aka.ms/getbc](http://aka.ms/getbc). This
    will create an Azure VM, install Docker and `navcontainerhelper`, pull the latest
    Dynamics 365 Business Central image (defaulting to the on-premise image), and
    start it for you. And on top of that, you get a nice log showing you how all the
    magic that is happening is progressing. Afterward, you can use that VM to create
    additional sandboxes as you need them.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, there is one issue in Azure VMs that makes handling them a bit more
    complicated: you can''t use transparent networking. This makes sense for a number
    of reasons and likely won''t change in the near future, so you have to consider
    other solutions. One would be port mapping, as we mentioned previously, but that
    also takes quite a lot of maintenance. The easiest way is to use a reverse proxy
    such as nginx or Traefik, but that is also beyond the scope of this book.'
  prefs: []
  type: TYPE_NORMAL
- en: You can find a quick introduction on how to get started at[https://www.axians-infoma.de/techblog/running-multiple-nav-bc-containers-on-an-azure-vm/](https://www.axians-infoma.de/techblog/running-multiple-nav-bc-containers-on-an-azure-vm/).
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the right image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you know how to create and run your sandboxes, the only question is
    which version you want to use; making this decision may be quite complex. The
    basics for making a viable decision on that topic will be summarized in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Officially, publicly released versions are always available on the registry
    (`mcr.microsoft.com`) with the following repositories and image names:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mcr.microsoft.com/businesscentral/sandbox`: The sandbox image of the SaaS
    version of Dynamics 365 Business Central'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mcr.microsoft.com/businesscentral/onprem`: The on-premise version of Dynamics
    365 Business Central'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mcr.microsoft.com/dynamicsnav`: The old Dynamics NAV product, starting from
    Dynamics NAV 2016'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Previews of unreleased versions are available on the `bcinsider.azurecr.io`
    registry with the following repositories and images names:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bcinsider.azurecr.io/bcsandbox`: A preview of the next minor release of the
    SaaS version of Dynamics 365 Business Central'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bcinsider.azurecr.io/bconprem`: A preview of the next minor release of the
    on-premise version of Dynamics 365 Business Central'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bcinsider.azurecr.io/bcsandbox-master`: A preview of the next major release
    of the SaaS version of Dynamics 365 Business Central'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bcinsider.azurecr.io/bconprem-master`: A preview of the next major release
    of the on-premise version of Dynamics 365 Business Central'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that, once again, you need login credentials for `bcinsider.azurecr.io`,
    which you can get from Microsoft's collaborate platform after you have registered
    for the Ready to Go! program.
  prefs: []
  type: TYPE_NORMAL
- en: When you have decided which image to use, you also need to decide on which tag
    to use, representing one of the specific releases by Microsoft. All images allow
    you to specify the language (`gb`, `de`, `dk`, and so on) and the base OS (`ltsc2016`
    for Windows Server 2016 and `ltsc2019` for Windows Server 2019). The released
    on-premise versions also allow you to use the same naming conventions that you
    can use with traditional installs by referencing them by their cumulative update
    name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following examples, just to get some insight into the syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Dynamics 365 Business Central Fall 2018 (1810), CU 11, German version, based
    on Windows Server 2016:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Dynamics 365 Business Central Spring 2019 (1904), CU 5, Danish version, based
    on Windows Server 2019:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Dynamics 365 Business Central Fall 2019 (1910), CU 1, Australian version, based
    on Windows Server 2019:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Dynamics NAV 2017, CU 28, British version, based on Windows Server 2019:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The SaaS versions that have been released allow you to specify the update version
    instead of the cumulative update:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Dynamics 365 Business Central SaaS Update 25, Spanish version, based on Windows
    Server 2016:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The preview version allows you to only specify the language and the Windows
    Server version:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The latest preview of the next minor release of the SaaS version of Dynamics
    365 Business Central, German version, based on Windows Server 2019: `bcinsider.azurecr.io/bcsandbox:de-ltsc2019`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The latest preview of the next major release of the on-premise version of Dynamics
    365 Business Central, Danish version, based on Windows Server 2016: `bcinsider.azurecr.io/bconprem-master:dk-ltsc2016`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are defaults if you don't specify everything, so `mcr.microsoft.com/businesscentral/onprem`
    will give you the latest cumulative update of the latest Dynamics 365 Business
    Central on-premise release, W1 version, based on Windows Server 2016\. In order
    to avoid surprises, it almost always makes sense to specify as much as possible
    with tags.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying scripts inside standard images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you have seen, Dynamics 365 Business Central container images have a lot
    of configuration options, giving you the possibility to change a lot of their
    behavior. However, if you ever run into a situation where you need to run a different
    container configuration setup, images have one more ace up their sleeve: you can
    override any script in the container.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The mechanism for this works by placing a script with the exact same name as
    the one you want to override into the `c:\run\my` folder in your container. The
    easiest way to do that is through a volume. Assuming that you have a folder such
    as `c:\bc-override` with an`AdditionalSetup.ps1` file, you can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'When the container gets to the place where `AdditionalSetup.ps1` is called,
    it checks whether a file with that name exists in `c:\run\my` and if so, calls
    it. If not, it calls the standard script with that name, which is stored in `c:\run`.
    This script may look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'If it does, you will get the following output when starting the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Using the `navcontainerhelper` utility, you would call it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, since`navcontainerhelper` has a more convenient way of doing
    things, you can just add your PowerShell script code inline:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: With this very powerful feature, you can change every script in the container
    to suit your needs. To get an idea of what you can adjust, please check out [https://github.com/Microsoft/nav-docker/tree/master/generic/Run](https://github.com/Microsoft/nav-docker/tree/master/generic/Run).
  prefs: []
  type: TYPE_NORMAL
- en: Creating your own images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the mechanism we just saw, we can change everything inside our containers.
    But what if you want to make sure that your colleagues, partners, or customers
    get exactly those same modifications without the need to get the my-scripts override
    right? Or what if you need some DLLs or other files inside your container and
    want to deliver them as part of your own image? The answer to that is building
    your own image, which, fortunately, is very easy as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker has a layering concept that makes an image a stack of layers. All you
    need to do is put your own layer on top of the standard image. You can do that
    by using a Dockerfile, which needs a reference to the standard image you want
    to extend and then the actions you want to take. Let''s say you want to place
    some DLLs stored in `c:\bc\dlls` into the image `Add-ins` folder and put your
    own `AdditionalSetup.ps1` script from the `c:\bc\override` folder into the `c:\run`
    image folder. Your Dockerfile would look as follows, stored in the `c:\bc` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'To build this image, you need to run the `docker build` command in `c:\bc`
    and give your image a name using the `-t` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The result will look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'With that in place, you can use your image like any other image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The way to share this image with others is via a **Docker repository**. For
    an image that's been built on top of the official Microsoft image, this will be
    done with a private repository. How to set that up is beyond the scope of this
    book, but [https://docs.docker.com/registry/](https://docs.docker.com/registry/)
    is a good starting point if you want to learn more.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the basics of online and Docker-based sandboxes
    and how to use them optimally. We stressed the need to master the fundamentals
    of Docker and how to create a basic container from a Dynamics 365 Business Central
    image from an online repository.
  prefs: []
  type: TYPE_NORMAL
- en: With the skills you've acquired from this chapter, you should be able to create
    your own containers, choose the right image, and be familiar with the `navcontainerhelper`
    tool when it comes to handling your custom sandbox environment.
  prefs: []
  type: TYPE_NORMAL
- en: You should also be able to master Dockerfile formats and perform in-depth modifications
    of standard images by overriding scripts and creating your own Dynamics 365 Business
    Central sandbox baseline.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start our development journey by learning about
    AL language fundamentals.
  prefs: []
  type: TYPE_NORMAL
