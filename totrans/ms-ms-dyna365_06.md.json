["```\ntable id MyTable\n{    \n    DataClassification = ToBeClassified;\n\n    fields\n    {\n        field(1;MyField; Integer)\n        {\n            DataClassification = ToBeClassified;          \n        }\n    }   \n\n    keys\n    {\n        key(PK; MyField)\n        {\n            Clustered = true;\n        }\n    }\n\n    var\n        myInt: Integer;\n\n    trigger OnInsert()\n    begin\n\n    end;\n\n    trigger OnModify()\n    begin\n\n    end;\n\n    trigger OnDelete()\n    begin\n\n    end;\n\n    trigger OnRename()\n    begin\n\n    end;\n\n}\n```", "```\nfield(id; MyField; Blob)\n{\n    DataClassification = ToBeClassified;\n    FieldPropertyName = FieldPropertyValue;\n}\n```", "```\nkey(MyKey; MyField)\n{\n\n}\n```", "```\npage Id MyPage\n{\n    PageType = Card;\n    ApplicationArea = All;\n    UsageCategory = Administration;\n    SourceTable = TableName;\n\n    layout\n    {\n        area(Content)\n        {\n            group(GroupName)\n            {\n                field(Name; NameSource)\n                {\n                    ApplicationArea = All;                   \n                }\n            }\n        }\n    }\n\n    actions\n    {\n        area(Processing)\n        {\n            action(ActionName)\n            {\n                ApplicationArea = All;           \n                trigger OnAction()\n                begin\n\n                end;\n            }\n        }\n    }\n\n    var\n        myInt: Integer;\n}\n```", "```\nfield(MyField; FieldSource)\n{\n    ApplicationArea = All\n    FieldPropertyName = FieldPropertyValue;\n}\n```", "```\npage Id PageName\n{\n    PageType = List;\n    ApplicationArea = All;\n    SourceTable = TableName;\n\n    layout\n    {\n        area(Content)\n        {\n            repeater(Group)\n            {\n                field(Name; NameSource)\n                {\n                    ApplicationArea = All;\n\n                }\n            }\n        }\n\n        area(Factboxes)\n        {\n\n        }\n    }\n\n    actions\n    {\n        area(Processing)\n        {\n            action(ActionName)\n            {\n                ApplicationArea = All;\n\n                trigger OnAction();\n                begin\n\n                end;\n            }\n        }\n    }\n}\n```", "```\ntableextension Id MyExtension extends MyTargetTable\n{\n    fields\n    {\n        // Add changes to table fields here\n    }\n\n    var\n        myInt: Integer;\n}\n```", "```\ntableextension 50100 CustomerExtSD extends Customer\n{\n    fields\n    {\n        field(50100; PacktEnabledSD; Boolean)\n        {\n            DataClassification = CustomerContent;\n            Caption = 'Packt Subscription Enabled';\n        }\n        field(50101; PacktCodeSD; Code[20])\n        {\n            DataClassification = CustomerContent;\n            Caption = 'Packt Subscription Code';\n        }\n\n        modify(\"Net Change\")\n        {\n            BlankZero = true;\n        }\n    }   \n}\n```", "```\ntableextension 50100 CustomerExtSD extends Customer\n{\n    fields\n    {\n        field(50100; PacktEnabledSD; Boolean)\n        {\n            DataClassification = CustomerContent;\n            Caption = 'Packt Subscription Enabled';\n        }\n        field(50101; PacktCodeSD; Code[20])\n        {\n            DataClassification = CustomerContent;\n            Caption = 'Packt Subscription Code';\n        }\n        modify(\"Net Change\")\n        {\n            BlankZero = true;\n        }\n    }\n\n    keys\n    {\n       key(PacktKey; PacktCodeSD,PacktEnabledSD)\n       {\n\n       }\n    }\n}\n```", "```\npageextension Id MyExtension extends MyTargetPage\n{\n    layout\n    {\n        // Add changes to page layout here\n    }\n\n    actions\n    {\n        // Add changes to page actions here\n    }\n\n    var\n        myInt: Integer;\n}\n```", "```\npageextension 50100 CustomerCardExtSD extends \"Customer Card\"\n{\n    layout\n    {\n        addlast(General)\n        {\n            field(PacktEnabledSD; PacktEnabledSD)\n            {\n                ApplicationArea = All;               \n            }\n        }\n\n        modify(Name)\n        {\n            Style = Strong;\n        }\n    }       \n}\n```", "```\ncodeunit Id MyCodeunit\n{\n    trigger OnRun()\n    begin\n\n    end;\n\n    var\n        myInt: Integer;\n}\n```", "```\nlocal procedure MyProcedure()\n   var\n        myInt: Integer;\n    begin\n\n    end;\n```", "```\nprocedure CheckIfPacktCustomerIsEnabled(CustomerNo: Code[20]): Boolean\n    var\n     //Local variables here \n    begin\n      //Method code here \n    end;\n```", "```\n[BusinessEvent(IncludeSender)]\n    local procedure MyProcedure()\n    begin\n\n    end;\n```", "```\n[IntegrationEvent(IncludeSender,GlobalVarAccess)]\n    local procedure MyProcedure()\n    begin\n\n    end;\n```", "```\ncodeunit 50100 MyCodeunit\n{\n    procedure CheckIfPacktCustomerIsEnabled(CustomerNo: Code[20]): Boolean\n    begin\n        //Raising a business event\n        MyBusinessEvent('XXX');\n\n        //Other code here...\n\n        //Raising an integration event\n        MyIntegrationEvent('YYY'); \n    end;\n\n    [BusinessEvent(true)]\n    local procedure MyBusinessEvent(ID: Code[20])\n    begin\n    end;\n\n    [IntegrationEvent(true,true)]\n    local procedure MyIntegrationEvent(ID: Code[20])\n    begin\n    end;      \n\n    //Global variables\n    var\n        myInt: Integer;\n        Customer: record Customer;\n}\n```", "```\n[EventSubscriber(ObjectType::ObjectType, ObjectID, 'OnSomeEvent', 'ElementName', SkipOnMissingLicense, SkipOnMissingPermission)]\nlocal procedure MyProcedure()    \nbegin\n\nend;\n```", "```\ncodeunit 50101 MySubscriberCodeunit\n{\n    [EventSubscriber(ObjectType::Codeunit, Codeunit::MyCodeunit, 'MyBusinessEvent', '', false, false)]\n    local procedure MyBusinessEventSubscriber(ID: Code[20])\n    begin\n\n    end;\n\n    [EventSubscriber(ObjectType::Codeunit, Codeunit::MyCodeunit, 'MyIntegrationEvent', '', false, false)]\n    local procedure MyIntegrationEventSubscriber(ID: Code[20])\n    begin\n\n    end;   \n}\n```", "```\nxmlport Id MyXmlport\n{\n    schema\n    {\n        textelement(NodeName1)\n        {\n            tableelement(NodeName2; SourceTableName)\n            {\n                fieldattribute(NodeName3; NodeName2.SourceFieldName)\n                {\n\n                }\n            }\n        }\n    }\n\n    requestpage\n    {\n        layout\n        {\n            area(content)\n            {\n                group(GroupName)\n                {\n                    field(Name; SourceExpression)\n                    {\n\n                    }\n                }\n            }\n        }\n\n        actions\n        {\n            area(processing)\n            {\n                action(ActionName)\n                {\n\n                }\n            }\n        }\n    }\n\n    var\n        myInt: Integer;\n}\n```", "```\nxmlport 50100 MyXmlportImportCustomer\n{\n    Direction = Import;\n    schema\n    {\n        textelement(NodeName1)\n        {\n            tableelement(Customer; Customer)\n            {\n                fieldattribute(No; Customer.\"No.\")\n                {\n\n                }\n                fieldattribute(Name; Customer.Name)\n                {\n\n                }\n            }\n        }\n    }  \n}\n```", "```\nquery Id MyQuery\n{\n    QueryType = Normal;\n\n    elements\n    {\n        dataitem(DataItemName; SourceTableName)\n        {\n            column(ColumnName; SourceFieldName)\n            {\n\n            }\n            filter(FilterName; SourceFieldName)\n            {\n\n            }\n        }\n    }\n\n    var\n        myInt: Integer;\n\n    trigger OnBeforeOpen()\n    begin\n\n    end;\n}\n```", "```\nquery 50100 \"Customer Overview\"\n{\n    Caption = 'Customer Overview';\n    elements\n    {\n        dataitem(Customer; Customer)\n        {\n            column(Name; Name)\n            {\n            }\n            column(No; \"No.\")\n            {\n            }\n            column(Sales_LCY; \"Sales (LCY)\")\n            {\n            }\n            column(Profit_LCY; \"Profit (LCY)\")\n            {\n            }\n            column(Country_Region_Code; \"Country/Region Code\")\n            {\n            }\n            column(City; City)\n            {\n            }          \n            column(Salesperson_Code; \"Salesperson Code\")\n            {\n            }\n\n            dataitem(Salesperson_Purchaser; \"Salesperson/Purchaser\")\n            {\n                DataItemLink = Code = Customer.\"Salesperson Code\";\n                column(SalesPersonName; Name)\n                {\n                }\n                dataitem(Country_Region; \"Country/Region\")\n                {\n                    DataItemLink = Code = Customer.\"Country/Region Code\";\n                    column(CountryRegionName; Name)\n                    {\n                    }\n                }\n            }\n        }\n    }\n}\n```", "```\nprocedure UseCustomerOverviewQuery()\n    var\n        CustomerOverview: Query \"Customer Overview\";\n    begin\n        if not CustomerOverview.Open() then\n            exit;\n        while CustomerOverview.Read() do\n        begin\n            //Here we have all joined records to loop\n        end;\n    end;\n```", "```\nfield(5; LicenseType; Option)\n{            \n    OptionMembers = \" \",\"Full\",\"Limited\";\n    OptionCaption = ' ,Full,Limited';\n    Caption = 'License Type';\n    DataClassification = CustomerContent;\n}\n```", "```\nenum 50100 LicenseType\n{\n  Extensible = true;\n  value(0; None) { }\n  value(1; Full) { }\n  value(2; Limited) { }  \n}\n```", "```\nfield(50100; LicenseType; enum LicenseType)     \n{\n    Caption = 'License Type';\n    DataClassification = CustomerContent;\n}\n```", "```\nenumextension 50110 LicenseTypeEnumExt extends LicenseType\n{\n  value(50110; Team)\n  {\n    Caption = 'Team License';\n  }\n}\n```", "```\nvar\n    LicenseType: enum LicenseType;\nbegin\n    case LicenseType of\n        LicenseType::Full:\n              //Write your code here…\n```", "```\ntable 50120 LicenseDetail\n{\n  fields\n  {\n     field(1; Id; Integer) { }\n     field(2; LicenseType; enum LicenseType) { }\n     field(3; LicenseDetail; Code[20])\n     {\n        TableRelation =\n        if (LicenseType = const (Full)) FullLicenseTable\n        else if (LicenseType = const (Limited)) LimitedLicenseTable;\n    }\n  }\n}\n```", "```\nenumextension 50110 LicenseTypeEnumExt extends LicenseType\n{\n  value(50110; Team)\n  {\n    Caption = 'Team License';\n  }\n}\n\ntableextension 50110 LicenseDetailExt extends LicenseDetail\n{\n  fields\n  {\n    modify(LicenseDetail)\n    {\n      TableRelation = if (LicenseType = const (Team)) TeamLicenseTable;\n    }\n  }\n}\n```", "```\nprofile \"SALES MANAGER\"\n{\n  Caption = 'Sales Manager';\n  ProfileDescription = 'Functionality for sales managers';\n  RoleCenter = 9005;\n  Enabled = false;\n}\n```", "```\nVendor: Record Vendor;\nPage.RunModal(Page::\"Customer Card\", ...);\n```", "```\n[EventSubscriber(ObjectType::Codeunit, Codeunit::MyCodeunit, 'MyIntegrationEvent', '', false, false)]\nlocal procedure MyIntegrationEventSubscriber()\nbegin\nend;\n```"]