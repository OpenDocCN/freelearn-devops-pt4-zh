- en: Extension Development Fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we had an overview of the new Modern Development Environment
    and we learned how to start a new Dynamics 365 Business Central extension project
    by using the AL Language extension and the Modern Development Environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll examine the details of the objects of the new extension''s
    development model and how to create new objects with AL, extend standard objects,
    and handle an AL extension project. More specifically, we''ll cover the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The basics of extension development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An overview of the main AL objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create basic objects in an extension project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices for handling your AL project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guidelines for AL objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have learned about the different AL object
    types, as well as how to create and use them, and (more generally speaking) you
    will be ready to start a Dynamics 365 Business Central extension project with
    the AL Language extension and the Modern Development Environment (Visual Studio
    Code).
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow this chapter and in order to experiment with basic object creation
    in the AL Language, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A Microsoft Dynamics 365 Business Central sandbox environment (locally installed
    on a Docker container or an online one)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio Code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The AL Language extension, which can be installed from the Visual Studio Code
    marketplace
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic concepts regarding extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you already know, with Microsoft Dynamics 365 Business Central SaaS, you
    don't have access to the database or to the standard base code (this is different
    in the on-premise version, where you can still have access to the base code, and
    modifying that core is your responsibility). In the SaaS world, you cannot alter
    the database schema and cannot alter the standard business logic.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous versions of the Microsoft Dynamics ERP, we have always talked
    about *code modification*. In the SaaS world, we have to start thinking about
    a new concept: *code extension*. To customize Dynamics 365 Business Central, you
    have to create **extensions**.'
  prefs: []
  type: TYPE_NORMAL
- en: An extension (according to Microsoft's guidelines) is defined as *an installable
    feature built in a way that it does not directly alter source resources and that
    is distributed as a preconfigured package*.
  prefs: []
  type: TYPE_NORMAL
- en: 'An extension interacts with the standard base code by using *events*. The following
    diagram shows how events interact between the different layers in a Dynamics 365
    Business Central extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0b0b9898-b8e8-4931-8fcb-3286f7eeed49.png)'
  prefs: []
  type: TYPE_IMG
- en: An event is essentially a function that is triggered by code when something
    happens in the business process. This function is normally defined as the *event
    publisher* function. It comprises only a signature and does not execute any code.
    The object that contains the event publisher function is defined as the *publisher*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Dynamics 365 Business Central, events are classified according to the following
    types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Database events**: These are events that are automatically raised by the
    system during database operations on a table object (such as insert, modify, delete,
    and rename).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Page events**: These are events that are automatically raised by the system
    during operations in a page object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Business events**: These are custom events that are raised by C/AL code.
    A business event defines a formal contract with an implicit promise not to change
    in future application releases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integration events**: These are custom events that are raised by C/AL code.
    They are similar to business events but they can change their signature in future
    releases of the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Global events**: These are system events that are raised by the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When an event is published and raised by code, it is available in the application
    for subscriptions. A *subscriber* is a code function that listens for and handles
    a published event. It subscribes to a specific event publisher function and handles
    the event by adding custom business logic to it. When the application raises an
    event, the subscriber function is automatically called and its code is executed.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that you can have multiple subscribers to a single event publisher
    function. In this case, the order of the subscriber's execution cannot be determined
    (it's random), so be careful regarding the event chain when you architect your
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Events guarantee that you can interact or modify the behavior of standard business
    processes without changing the base code.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamics 365 Business Central exposes a lot of events in its standard code and
    new events are added monthly. You can request new events by going to the following
    link: [https://github.com/Microsoft/ALAppExtensions/issues](https://github.com/Microsoft/ALAppExtensions/issues). To
    get a complete overview of published events in Dynamics 365 Business Central,
    I suggest that you take a look at the following GitHub repository:[ ](https://github.com/Microsoft/ALAppExtensions/issues)[https://github.com/waldo1001/blog.CALAnalysis/tree/master/Published%20Events](https://github.com/waldo1001/blog.CALAnalysis/tree/master/Published%20Events)[.](https://github.com/Microsoft/ALAppExtensions/issues)
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned how events are the fundamental building blocks of
    every AL extension. In the next section, we'll have an overview of the available
    AL objects and learn how to create them with the AL Language extension.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the basics of the AL Language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An extension of Dynamics 365 Business Central is written using the **AL Language**.
    With AL, you can create new objects, extend standard objects, and create custom
    business logic for your application.
  prefs: []
  type: TYPE_NORMAL
- en: You create an extension for Dynamics 365 Business Central by using Visual Studio
    Code as your development environment and by using the AL Language extension (as
    we described in [Chapter 2](215c2304-db18-4145-bb3f-8c10cdca949d.xhtml), *Mastering
    a Modern Development Environment*). When installed, you have full support for
    developing AL projects.
  prefs: []
  type: TYPE_NORMAL
- en: All Dynamics 365 Business Central functionalities are coded as objects (new
    objects or extensions of standard objects), and these objects are defined in `.al`
    files. A single `.al` file can define multiple objects (although we don't recommend
    that).
  prefs: []
  type: TYPE_NORMAL
- en: Extensions are then compiled as `.app` package files, and this file is the final
    extension that you will publish in your final environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing, the following objects are available with the AL Language
    extension for Visual Studio Code:'
  prefs: []
  type: TYPE_NORMAL
- en: Table object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table extension object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Page object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Page extension object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Codeunit object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Report object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enum object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XMLport object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control add-in (JavaScript)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Profile and page customizations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll look at the main objects in detail in the following sections. Some of
    these objects (such as reports, page customizations, and add-ins) will be covered
    in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The AL Language extension contains a lot of snippets for defining objects and
    for handling the language''s tasks. The main standard snippets are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Objects**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tpagecust`: New customization of a standard page'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tpageext`: New extension of a standard page'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ttableext`: New extension of a standard table'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tquery`: New query'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`treport`: New report'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`txmlport`: New xmlport'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tpage`: Here, we can choose whether we want to get a new List or a new Card'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tcodeunit`: New codeunit'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tcaseelse`: Case statement with else'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tcaseof`: Case statement without else'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tfor`: For statement'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tforeach`: Foreach statement'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tif`: If statement with begin and end'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tifelse`: If statement with begin and end else'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tisempty`: Isempty statement with begin end'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tisemptyelse`: Isempty statement with begin end else'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`trepeat`: Repeat loop with begin and end clause'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`twhile`: While statement'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`twith`: With statement'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Profile**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tprofile`: Allows us to create a new profile with page customizations'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Events**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`teventbus`: Allows us to create a business event'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`teventint`: Allows us to create an integration event'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`teventsub`: Allows us to create a subscriber event'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fields and Keys**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tfield`: New field without a type (we need to put one in manually).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tfieldbiginteger`: Big Integer type.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tfieldboolean`: Boolean field.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tfieldblob`: Blob field.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tfieldcode`: Code field. You will need just to put the length of the field.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tfielddate`: Date field.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tfielddateformula`: Dateformula field.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tfielddatetime`: Datetime field.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tfielddecimal`: Decimal field.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tfieldduration`: Duration field.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tfieldguid`: GUID field.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tfieldoption`: Option field. In this case, the `OptionMember` property is
    automatically added.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tfieldrecorid`: RecordID field.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tfieldtext`: Text field. You will need just to put the length of the field.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tfieldtime`: Time field.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tkey`: Adds a new key to a table.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fields and Action on Pages**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tfieldpage`: Adds a field to a page'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`taction`: Adds an action to a page'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**T****riggers**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ttrigger`: Creates a trigger definition'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tprocedure`: Creates a procedure definition'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: After installing the AL Language extension in Visual Studio Code, you can start
    a new AL project by going to View | Command Palette and selecting AL:Go!.
  prefs: []
  type: TYPE_NORMAL
- en: 'Visual Studio Code asks you for a folder that it can create the project in
    and then asks you to select the target platform (Dynamics 365 Business Central
    version). Select 4.0 Business Central 2019 release wave 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/76a129b4-ea58-4eee-9b66-f6a1088115fe.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, Visual Studio Code will configure the project for you. It creates the `launch.json`
    file so that you can connect to your development environment and the `app.json`
    file with the extension's manifest file (as described in [Chapter 2](215c2304-db18-4145-bb3f-8c10cdca949d.xhtml),
    *Mastering a Modern Development Environment*).
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can start defining the objects that comprise your solution.
  prefs: []
  type: TYPE_NORMAL
- en: Table definition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the AL extension, you don't have a graphical tool for designing tables
    (like we did previously in CSIDE); instead, you need to create a table using code.
  prefs: []
  type: TYPE_NORMAL
- en: 'A table definition can be created by using the `ttable` snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To define a table, you need to specify an *ID* (which must be unique in your
    application) and a *name* (which must also be unique). Then, you can set the table''s
    properties (use *Ctrl* + spacebar to discover all the available properties):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bffce792-71fd-4ffb-ba92-663c196b944a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A table object has the following main properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Caption`: The string that identifies the table in the user interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataCaptionFields`: Sets the fields that appear to the left of the caption
    on pages that display the content of this table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DataPerCompany`: Sets a value that indicates whether the table data applies
    to all the companies in the database or only the current company (when default
    = `true`, data is only available for the current company).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DrillDownPageID`: Sets the ID of the page to use as a drill-down.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LookupPageID`: Sets the ID of the page to use as a lookup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LinkedObject`: Available for on-premise only; it specifies a link to a SQL
    Server object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Permissions`: Sets whether an object has additional permissions that are required
    to perform some operations on one or more tables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TableType`: Specifies the table type (Normal, CRM, ExternalSQL, Exchange,
    or MicrosoftGraph).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExternalName`: This property appears when you specify CRM or ExternalSQL in
    the `TableType` property and specifies the name of the original table in the external
    database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExternalSchema`: This property appears when you specify CRM or ExternalSQL
    in the `TableType` property and specifies the name of the database schema in the
    external database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ReplicateData`: Specifies whether the table must be replicated to the cloud
    service (the default value is true).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Extensible`: Sets whether the object can be extended or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A table object contains a set of fields. A table''s field can be created by
    using the `tfield` snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: A field is defined by an *ID* (which must be unique within the declaring table
    and all its extensions), a *name* (which must also be unique within the declaring
    table and all its extensions), and a *type* (the data type of the field).
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s recommended to always set the `Caption` property (for tables and fields)
    and to set the `DataClassification` property (used for defining the data sensitivity
    for GDPR regulations) to a value other than `ToBeClassified`. A field can have
    its own specific properties that you can set as needed (optional properties, as
    shown in the following screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b8264379-9c65-4a61-8fab-e37b94c9e958.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A table also contains a set of *keys*. You can define keys using the `tkey`
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: A table's key is defined by a *name* and the *fields* that comprise the key
    (a comma-separated list of table fields). A key can have the `Clustered` property
    set to `true` if it's the primary key of the table. A clustered index is a special
    type of index that reorders the way the records in the table are physically stored,
    and so a table can have only one clustered index.
  prefs: []
  type: TYPE_NORMAL
- en: A table can also have triggers (`OnInsert`, `OnModify`, `OnDelete`, and `OnRename`),
    and inside a table, you can define your own methods.
  prefs: []
  type: TYPE_NORMAL
- en: Page object definition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A page object is the user interface for your users in Dynamics 365 Business
    Central. You can define a page object in AL using the `tpage` snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5a02afc5-14a3-43c0-9220-6a04d9880558.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first three options allow you to create the following page types:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Card` page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`API` page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`List` page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A `Card` page (the first option) is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'A `Card` page is identified by its *ID* and its *name* (both of which must
    be unique inside the application). A page also has its own properties. The main
    things to define are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PageType`: Identifies the type of the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SourceTable`: Sets the underlying table for this page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SourceTableView`: Sets the key, sort order, and filter you want to use to
    determine the view of the source table presented to the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ApplicationArea`: Sets the visibility of the page inside the Business Central
    application. The standard values are All, Basic, Suite, and Advanced.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UsageCategory`: Sets the Departments column for the searched page in the web
    client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Extensible`: Sets whether the object can be extended or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A page has a `layout` (which defines the page appearance in the UI) and an
    `actions` section (which defines the available menu items for adding code actions
    inside a page). Inside the layout, you have a content area, which contains a set
    of groups, and every group can contain one or more page fields. You can add a
    field inside a page group by using the `tpagefield` snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: A field on a page is defined by a *name* (the field keyword inside the page)
    and a *field source* (the source expression of the page field, which corresponds
    to the physical fields defined in the underlying table).
  prefs: []
  type: TYPE_NORMAL
- en: A field can have its own properties and it must have an `ApplicationArea` set.
  prefs: []
  type: TYPE_NORMAL
- en: 'A `List` page (the third option) is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: A `List` page has the `PageType` property set to `List` and the `layout` section
    has a `Content` area and a `FactBox` area. The `Content` area has a `repeater`
    group, which contains all the fields you want to display on that list. After that,
    you have the `actions` section.
  prefs: []
  type: TYPE_NORMAL
- en: If your page contains a `repeater` control (for example, a `List` page), you
    can define actions that apply to the entire page or to the repeater control itself
    (a single record). For this, the action has a property called **Scope**, which
    can be defined as a *page* (the action is at the page level) or a `repeater` (the
    action is at the record level).
  prefs: []
  type: TYPE_NORMAL
- en: Table extension definition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned previously, with Dynamics 365 Business Central, you cannot modify
    an existing table; instead, you need to create a table extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'A table extension can be defined by using the `ttableext` snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: A `tableextension` object is defined by an *ID* and a *name* (which must be
    unique) and by the table that must be extended (or altered). Then, inside the
    fields group, you can add new fields or change existing field properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is an example of an extension to the standard `Customer`
    table that adds some new fields and changes an existing field property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In a `tableextension` object, you can also add new keys to the extended table
    by adding a *keys* group, like you can in a table definition. For example, in
    our previous `tableextension` object, we''ve added two new fields, and we want
    also to create a secondary key on those fields in the `Customer` table. We can
    create a `key` group with the key name and the key fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You cannot create a key based on a new field or a standard field, and you cannot
    alter an existing key in an extended table.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we have defined a secondary key called `PacktKey` in the `Customer` table,
    which consists of two custom fields (`PacktCodeSD` and `PacktEnabledSD`). Defining
    secondary keys is extremely useful for increasing the performance of some calculations,
    sorting records, and reports.
  prefs: []
  type: TYPE_NORMAL
- en: Page extension definition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exactly like tables, with Dynamics 365 Business Central, you cannot directly
    modify an existing page; instead, you need to create a page extension (using the `pageextension`
    object in AL).
  prefs: []
  type: TYPE_NORMAL
- en: 'A `pageextension` object can be defined by using the `tpageext` snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: A `pageextension` object is defined by an *ID* and a *name* (which must be unique)
    and by the page that must be extended. A `pageextension` object contains a `layout`
    block (where you can add changes to the standard page layout, such as adding new
    fields or new sections or changing standard fields) and an `actions` block (where
    you can add your new actions).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of a `pageextension` object in which we have added
    a new field to the `Customer Card` page (the field is added at the end of the
    `General` tab) and we have modified the `Style` property of an existing field
    (the `Name` field):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we have added a field to the page and modified the `Style` property
    of the `Name` field so that it is in bold. Remember that not all the available
    field properties can be modified via a `pageextension` object.
  prefs: []
  type: TYPE_NORMAL
- en: Codeunit definition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A codeunit is a container of AL code, and this code can be triggered by directly
    executing the codeunit (with the `OnRun` trigger) or by calling the functions
    defined in the codeunit itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can define a codeunit in AL by using the `tcodeunit` snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: A codeunit is defined by an *ID* and a *name* (which must be unique inside your
    application). By default, the codeunit skeleton only contains the `OnRun` trigger
    definition, and inside this trigger, you can write the code that you want to execute
    when calling the `Codeunit.RUN` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'A codeunit has its own properties that you can set:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2de302f6-93b0-4dcb-b29d-3de9bfa8e97d.png)'
  prefs: []
  type: TYPE_IMG
- en: In a codeunit, you can define procedures (functions) that can be local to the
    codeunit or global (that is, publicly exposed to objects that instantiate the
    codeunit).
  prefs: []
  type: TYPE_NORMAL
- en: 'A procedure can be defined by using the `tprocedure` snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: By default, this snippet creates a local procedure without parameters and without
    a return value. You can change the scope from local (the default value, meaning
    that it is visible only inside the object that declares the procedure) to global
    (so that it is also visible outside the object) by removing the `local` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, this is a global procedure with parameters and a return value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: A codeunit can have more than one procedure (local or global) defined.
  prefs: []
  type: TYPE_NORMAL
- en: Event definitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we mentioned previously, events are fundamental building blocks when it
    comes to developing extensions for Dynamics 365 Business Central. When working
    with events, we have two main entities: the event *publisher* and the event *subscriber*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'An **event publisher** (an event that''s raised by the application) can be
    defined in AL by using the **teventbus** (for a business event) or **teventint**
    (for an integration event) snippets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c67bafb2-7efd-40a4-b321-8c1667fdd4d8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A **business event** has the following schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Here, `IncludeSender` is a Boolean value that specifies whether the global methods
    defined in the object that contain the event publisher method will be visible
    to the event subscriber methods that will subscribe to this event (this is `true` if
    the global methods must be visible and `false` (the default value) if not).
  prefs: []
  type: TYPE_NORMAL
- en: When the `IncludeSender` argument is set to `true`, the signature of the event
    subscriber methods that will subscribe to this published event will automatically
    include a `VAR` parameter (a reference value) for the published event object.
  prefs: []
  type: TYPE_NORMAL
- en: 'An **integration event** has the following schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `IncludeSender` Boolean parameter has the same meaning as we described
    previously.
  prefs: []
  type: TYPE_NORMAL
- en: '`GlobalVarAccess` is a Boolean parameter that specifies whether the global
    variables defined in the object, which contains the event publisher method, are
    accessible to the event subscriber methods that subscribe to this published event
    (this is `true` if they must be exposed and `false` – which is the default value
    – if not).'
  prefs: []
  type: TYPE_NORMAL
- en: When the `GlobalVarAccess` argument is set to `true`, all the event subscriber
    methods that subscribe to this event will be able to access the global variables
    in the object where the event publisher method is declared. You have to manually
    add the variable parameters to the event subscriber methods, and you need to use
    a name and a type that match the variable declaration in the event publisher object.
  prefs: []
  type: TYPE_NORMAL
- en: After an event has been published by an event publisher (your previously defined
    method), you need to raise that event in your code where needed (event subscribers
    will not react to the event until it's raised in your application code).
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, the following is a codeunit with a public method that raises
    a business event and an integration event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'An **event subscriber** (a function that handles a raised event in the application)
    can be declared using the `teventsub` snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding code, we can see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ObjectType` is an enumeration that identifies the object type that publishes
    the event to subscribe to (the object that contains the event publisher method)
    or that raises the trigger event to subscribe to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ObjectId` is an integer value that specifies the ID of the object that publishes
    the event to subscribe to (when declaring it, don''t use the ID; use the `ObjectType::Name` syntax).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnSomeEvent` is a text parameter that specifies the name of the method that
    publishes the event in the object identified by the `ObjectId` parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ElementName` is a text parameter that''s used for database trigger events.
    It specifies the table field that the trigger event pertains to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SkipOnMissingLicense` is a Boolean parameter that specifies what happens to
    the event subscriber method when the Dynamics 365 Business Central license of
    the user account that runs the current session does not include the permissions
    on the object that contains the subscriber method (`true`if the method call must
    be ignored and `false` if an error must be thrown and the code''s execution must
    be stopped).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SkipOnMissingPermission` is a Boolean parameter that specifies what happens
    to the subscriber method when the user account that runs the current session does
    not have permission on the object that contains the event subscriber method (`true` if
    the method call must be ignored and `false` (the default value)if an error must
    be thrown and the code execution must be stopped).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As an example, this is a codeunit with two event subscribers for the business
    and integration events we defined in the previous example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'When defining the event subscriber, if you press *Ctrl* + spacebar on the event
    parameters, you will see a list of the objects that the event can interact with
    (exposed by the publisher). In our example, the business event subscriber can
    see the event parameter and the sender object (because we''ve declared the event
    publisher with `IncludeSender` set to `true`), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a671131f-dfce-4ad3-8021-cb37b4518ff2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The integration event subscriber can see the event parameter, the sender object
    (because we''ve declared the event publisher with `IncludeSender` set to `true`),
    and the global variables of the sender object (because we''ve declared the event
    publisher with `GlobalVarAccess = true`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d0630f16-21ce-4050-99eb-556b165df950.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When using events, always remember the following:'
  prefs: []
  type: TYPE_NORMAL
- en: When the code that calls the event publisher method is run, all the event subscriber
    methods that subscribe to the event are run.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there are multiple subscribers, the subscriber methods are run one at a time
    in a random order (there's no way to specify the order in which the subscriber
    methods are called).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there are no subscribers to the published event, then the line of code that
    calls the event publisher method is ignored and not executed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XMLport definition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**XMLports** are objects that are used for importing and exporting XML or text-based
    data between an external source and Dynamics 365 Business Central.'
  prefs: []
  type: TYPE_NORMAL
- en: 'An XMLport can be defined in AL by using the `txmlport` snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'As an example, this is a simple XMLport definition for importing some customer
    data (the `No.` and `Name` fields):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The `xmlport` object has the `Direction` property set to `Import` (only used
    for importing data to Dynamics 365 Business Central) and reads the `No` and `Name`
    fields from an XML object called `Customer`.
  prefs: []
  type: TYPE_NORMAL
- en: Defining query objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A `query` object allows you to define an object that can be used to retrieve
    data from a single table or from multiple tables by applying filters and joins
    between tables. The returned result is a single dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create a query in AL by using the `tquery` snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, a `query` object has an `elements` section, and inside that
    section, you define a `dataitem` and its `column` elements that must be retrieved
    (the table fields to be included in the resulting dataset).
  prefs: []
  type: TYPE_NORMAL
- en: You can also create links between `dataitems` to retrieve data from more than
    one table.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, the following is a `query` object that''s been defined in AL
    so that it retrieves a list of customers, along with their sales and profit data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The query loops through the `Customer` table and then (for every customer) retrieves
    data from the other tables specified in the `DataItemLink` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'Query objects are extremely useful and powerful for retrieving records in your
    code. The first basic problem that you can solve with query objects is to avoid
    using nested loops when retrieving data from linked tables (joins). If you have
    `Table1` linked through a foreign key to `Table2`, instead of looping through
    `Table1` and, for every record of this table, going to `Table2` to retrieve the
    related data, you can use a query object and apply the pattern described in the
    following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bf854d9f-10d7-46ff-9419-915f201d56d0.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, you can define a query that returns the full filtered join of the two
    tables and then you can loop through the record set that's returned by the query
    object (this requires only one loop).
  prefs: []
  type: TYPE_NORMAL
- en: 'If (as an example) we want to use our previously defined `Customer Overview`
    query in our code, this is what we have to do in AL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Here, we execute the query object by calling the `Open` method, and then we
    loop through the returned dataset by using the `Read` method. Inside the loop,
    you have the complete record being returned by the query (the master table and
    the joined tables) and you can work on this data as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Extending the options – enums
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A field of the **option** type is used in Dynamics 365 Business Central to define
    a field that provides a fixed and predefined list of values.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you define an option field, you define the admitted values for that field
    in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we can see that the `OptionMembers` property contains
    the predefined value for the field. Here, the License Type field contains three
    values (blank, Full, Limited), and blank (the first value) is the default one.
  prefs: []
  type: TYPE_NORMAL
- en: But what if you want to extend these options, for example, by adding a new license
    type called *Teams*? This isn't possible! Option fields cannot be extended.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create an extendable option field, AL introduced the `enum` object. An e*num*
    is a type that consists of a set of named constants, and it can be extended from
    other extensions if you set the `Extensible` property to `true`, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You can define a field so that it has the `enum` type in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'This allows you to define a field that has the same behavior as an option:
    when a user clicks on that field, Dynamics 365 Business Central presents a list
    of possible values to choose from.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To extend the `enum` field from another extension and add a new possible value
    called `Team`, you need to create an `enumextension` object, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: After that, your `License Type` field will have one more option value to choose
    from.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use an `enum` object directly from AL code (as a variable):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also extend the `TableRelation` property of an `enum` value. For example,
    imagine you have the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: In this table, we have a field called `LicenseType` (which is an `enum`) and
    a field called `LicenseDetail`, which has a `tablerelation` property (to the `FullLicenseTable`
    and `LimitedLIcenseTable` tables) based on the value of the `enum` field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another app could extend both the `enum` field and the table relation so that
    it can handle the new extended enum. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Here, the new app creates the `LicenseType` enum extension (as we described previously)
    and creates a new `tableextension` object, where it modifies the `TableRelation`
    property of the `LicenseDetail` field by adding a new relationship to a `TeamLicenseTable`
    if the enum has the value of `Team`.
  prefs: []
  type: TYPE_NORMAL
- en: The combined `TableRelation` is always evaluated from the top down, so the first
    unconditional relationship will prevail. This means that you cannot change an
    existing `TableRelation` from table A to table B if the original field has a relationship
    with table A.
  prefs: []
  type: TYPE_NORMAL
- en: By using `enums`, you can extend all your option's values. We recommend using
    this new approach in your extensions if you want extensibility.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you've had a complete overview of the available objects in
    the AL Language extension. In the next section, we'll learn about some of the
    best practices when it comes to creating and handling an AL project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a profile object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A `profile` object allows you to define the user experience (main page) of a
    particular user profile. You can create a `profile` object with the AL Language
    extension by using the `tprofile` snippet.
  prefs: []
  type: TYPE_NORMAL
- en: 'A profile object is defined as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have defined a profile called **Sales Manager**, which uses the `RoleCenter`
    page with `ID = 9005` (standard Sales Manager role center object in Dynamics 365
    Business Central).
  prefs: []
  type: TYPE_NORMAL
- en: To deploy a `profile` object from your extension, I recommend creating a `Profile`
    folder in your AL project and, inside that folder, placing all the `.al` files
    that define your profiles.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding AL project structure best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned previously, an AL project is file-based. You have all your `.al`
    files inside a project folder. The main problem that you encounter when you start
    working with a complex project is how to structure the project. How do we organize
    the objects and the `.al` files?
  prefs: []
  type: TYPE_NORMAL
- en: 'There''s no written rule for this topic. What we wholeheartedly suggest is
    to avoid having all the objects (`.al` files) at the project root level, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e9f8cf4b-750b-4f97-8368-cf847df4c532.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, none of the objects are organized, and if you have a large number of objects,
    your object list will grow a lot, causing difficulties with handling and retrieving
    files.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most sought-after way of structuring your project could be to organize
    your files by object type, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b7304209-a466-48b0-bcac-edf3fc7d38b8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, all the extension''s code is inside the `SRC` folder. Then, all the objects
    are organized per type, according to the objects that we have defined (there''s
    a subfolder for every object type that we have in our solution). It''s easier
    to find an object with this organization (just go to the object type folder),
    but this project structure has a drawback: it''s not easy to recognize the objects
    that we need in order to implement a particular business functionality in our
    extension project.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our suggestion is to try to organize your project tree first by functionality
    and then by object type, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/99fc5863-4178-4171-aa26-d395a490171d.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, in the SRC folder, there are two subfolders: `Functionality1` and `Functionality2`.
    In these folders, objects are organized by type. This is our recommended way of
    working, and this structure helps us find objects by functionality.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll learn how to name objects in AL and how to use object
    ranges.
  prefs: []
  type: TYPE_NORMAL
- en: Naming guidelines and AL object ranges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When creating extensions for Dynamics 365 Business Central, you need to assign
    a numerical ID to your objects. The rules for assigning object IDs are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Range** | **Purpose** |'
  prefs: []
  type: TYPE_TB
- en: '| 0 – 49,999 | Business Central base application. It cannot be used by partners.
    |'
  prefs: []
  type: TYPE_TB
- en: '| 5,0000 – 99,999 | Per-tenant extensions (resellers who want to customize
    the delivered solution to the individual needs of a customer). |'
  prefs: []
  type: TYPE_TB
- en: '| 80,000 – 99,999 | Extended objects that you have to modify the permissions
    of in your development license. |'
  prefs: []
  type: TYPE_TB
- en: '| 100,000 – 999,999 | Reserved for localizing Dynamics 365 Business Central
    for a specific country or region. It cannot be used by partners. |'
  prefs: []
  type: TYPE_TB
- en: '| 1,000,000 – 69,999,999 | **Registered Solution Program** (**RSP**) range.
    |'
  prefs: []
  type: TYPE_TB
- en: '| 70,000,000 – 74,999,999 | Business Central SaaS apps (AppSource). |'
  prefs: []
  type: TYPE_TB
- en: 'Regarding file naming, each `.al` filename must start with the corresponding
    object type prefix and object ID and must be written only with characters [`A-Za-z0-9`].
    The file naming notation (which is mandatory for `AppSource`) should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Full objects: `<ObjectNameExcludingPrefix>.<FullTypeName>.al`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Extension objects: `<ObjectNameExcludingPrefix>.<FullTypeName>Ext.al`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For each object type, you can use the following abbreviation (prefixes):'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Object Type** | **Abbreviation (prefix)** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Page | `Page` |'
  prefs: []
  type: TYPE_TB
- en: '| Page Extension | `PageExt` |'
  prefs: []
  type: TYPE_TB
- en: '| Page Customization | `PageCust` |'
  prefs: []
  type: TYPE_TB
- en: '| Codeunit | `Codeunit` |'
  prefs: []
  type: TYPE_TB
- en: '| Table | `Table` |'
  prefs: []
  type: TYPE_TB
- en: '| Table Extension | `TableExt` |'
  prefs: []
  type: TYPE_TB
- en: '| XML Port | `Xmlport` |'
  prefs: []
  type: TYPE_TB
- en: '| Report | `Report` |'
  prefs: []
  type: TYPE_TB
- en: '| Query | `Query` |'
  prefs: []
  type: TYPE_TB
- en: '| Enum | `Enum` |'
  prefs: []
  type: TYPE_TB
- en: '| Enum Extension | `EnumExt` |'
  prefs: []
  type: TYPE_TB
- en: 'As an example, here are some AL objects and their corresponding filenames:'
  prefs: []
  type: TYPE_NORMAL
- en: Table 50100 *Book* should be called `Book.Table.al`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Page 50100 *Book Card* should be called `BookCard.Page.al`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Codeunit 50110 *Book Management* should be called `BookManagement.Codeunit.al`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pageextension 50101 `MyCustomerCardExt`, which extends `Customer Card`, should
    be called `CustomerCard.PageExt.al`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should also use a prefix/suffix to target your objects (reserved for you
    by Microsoft, as we'll explain later). This allows you to have objects that are
    named in a unique way between extensions, which avoids naming conflicts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The rules for using the prefix/suffix are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The prefix/suffix must be at least three characters long.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The object/field name must start or end with the prefix/suffix.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you modify a core Dynamics 365 object using a table extension or a page
    extension, the prefix/suffix must be defined at the control/field/action/group
    level.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a caption to handle the label that you want in the UI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, if you have reserved the `PACKT` prefix and you want to create
    a field called `CustomerCategory`, the valid field names that you can use are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PACKTCustomerCategory`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CustomerCategoryPACKT`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CustomerCategory_PACKT`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CustomerCategory PACKT`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you want to create the *Customer Category* table, the valid names for the
    table object are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: table 70000000 `PACKT Customer Category`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: table 70000000 `Customer Category PACKT`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: table 70000000 `Customer Category_PACKT`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the reserved name as a prefix or a suffix is absolutely your choice. We
    prefer to use it as a suffix because it's more natural to find the field with
    Visual Studio IntelliSense (if the field that appears to you in the UI is Customer
    Category, typing these words will present the real field name, along with its
    suffix).
  prefs: []
  type: TYPE_NORMAL
- en: These guidelines are mandatory for AppSource, but are not mandatory for your
    per-tenant extensions. Our suggestion is to always follow these guidelines.
  prefs: []
  type: TYPE_NORMAL
- en: To register a prefix/suffix for your objects, you need to send an email to `d365val@microsoft.com` specifying
    the name you want to reserve for your app. Remember that the prefix/suffix should
    be app-based and not company-based.
  prefs: []
  type: TYPE_NORMAL
- en: Working on AL coding guidelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When creating your AL project (and your `.al` files), remember to always follow
    these main guidelines.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside a `.al` code file, the structure for all your objects must follow this
    sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: Properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Object-specific constructs:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table fields
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Page layout
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Actions
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Global variables:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Labels (old text constants)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Global variables
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Remember to always reference the AL objects by their object name and not by
    their ID. So, for example, this is how you reference a `Record` variable or a
    `Page` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'In an event subscriber object, this is how you should reference the publisher
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'So, let''s sum this up:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Format your AL code**: Take care of indentation and spacing (it keeps the
    code more readable). You can use *Alt* + *Shift* + *F* to auto-format your code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keep your .al files clean**: When using snippets, they automatically create
    an object skeleton with methods, properties, variables, triggers, or sections
    that you might not be using. Please remove all the code that isn''t being used.
    A typical example is triggers definitions on tables (which you can remove if you''re
    not handling them) or global variables inside objects (if you don''t remove them,
    your app will be full of myInt: integer variables).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Method declarations**: Be as local as possible. Only use global methods if
    you need to expose them to other objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use events to trigger business logic, but** **do not code in these triggers**: Putting
    a lot of code inside triggered events is just like putting a lot of code into
    field validation triggers. Identify your methods instead and call them from the
    triggered events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For complex code, you can start using the *Generic Method* pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: Declare each method on its class (table).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each method is a codeunit on its own (encapsulation).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Invoke a method only from its class (table/codeunit).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each method's codeunit only has one global function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Local functions include the following categories (in this order):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Main (one function; a method header in the form of a readable flowchart)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Main business process (multiple functions)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: UI wrapper (two functions)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Business extension (one or more functions to provide extensibility)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Event wrapper (two functions)
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is an example of some AL code that''s been organized according to this
    pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a7f27459-d4c4-42bf-bc77-8f6805fc6b2d.png)'
  prefs: []
  type: TYPE_IMG
- en: You can find more information regarding other coding rules to follow at [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/compliance/apptest-bestpracticesforalcode](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/compliance/apptest-bestpracticesforalcode).
  prefs: []
  type: TYPE_NORMAL
- en: Respecting coding rules and guidelines is extremely important for increasing
    code readability, and many of these rules are mandatory for AppSource.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at the fundamentals of extension development with
    the AL Language, along with an overview of the main objects for creating applications
    (tables, pages, codeunits, and so on) and how to create them in Visual Studio
    Code. Then, we had an overview of the best practices for handling an AL project
    (project organization, object IDs, naming conventions) and guidelines for writing
    better code by focusing on the extensibility aspect of our extensions.
  prefs: []
  type: TYPE_NORMAL
- en: We learned how to create objects, how to create an AL project, how to handle
    its structure, and how to stick to naming conventions with objects.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll implement a real-word extension for Dynamics 365
    Business Central by applying all these rules and best practices.
  prefs: []
  type: TYPE_NORMAL
