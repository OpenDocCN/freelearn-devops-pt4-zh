["```\n{\n  \"id\": \"dd03d28e-4dfe-48d9-9520-c875595362b6\",\n  \"name\": \"PacktDemoExtension\",\n  \"publisher\": \"SD\",\n  \"brief\": \"Customer Category, Gift Campaigns and Vendor Quality Management\",\n  \"description\": \"Customer Category, Gift Campaigns and Vendor Quality Management\",\n  \"version\": \"1.0.0.0\",\n  \"privacyStatement\": \"\",\n  \"EULA\": \"\",\n  \"help\": \"\",\n  \"url\": \"http://www.demiliani.com\",\n  \"logo\": \"./Logo/ExtLogo.png\",\n  \"dependencies\": [\n    {\n      \"appId\": \"63ca2fa4-4f03-4f2b-a480-172fef340d3f\",\n      \"publisher\": \"Microsoft\",\n      \"name\": \"System Application\",\n      \"version\": \"1.0.0.0\"\n    },\n    {\n      \"appId\": \"437dbf0e-84ff-417a-965d-ed2bb9650972\",\n      \"publisher\": \"Microsoft\",\n      \"name\": \"Base Application\",\n      \"version\": \"15.0.0.0\"\n    }\n  ],\n  \"screenshots\": [],\n  \"platform\": \"15.0.0.0\",\n  \"features\": [\n    \"TranslationFile\"\n  ],\n  \"idRanges\": [\n    {\n      \"from\": 50100,\n      \"to\": 50149\n    }\n  ],\n  \"contextSensitiveHelpUrl\": \"https://PacktDemoExtension.com/help/\",\n  \"runtime\": \"4.0\"\n}\n```", "```\n\"features\": [\n    \"TranslationFile\"\n  ]\n```", "```\ntable 50100 \"Customer Category_PKT\"\n{\n     DrillDownPageId = \"Customer Category List_PKT\";\n     LookupPageId = \"Customer Category List_PKT\";\n     Caption = 'Customer Category';\n\n     fields\n     {\n         field(1; Code; Code[20])\n         {\n             DataClassification = CustomerContent;\n             Caption = 'No.';\n         }\n         field(2; Description; Text[50])\n         {\n             DataClassification = CustomerContent;\n             Caption = 'Description';\n         }\n         field(3; Default; Boolean)\n         {\n             DataClassification = CustomerContent;\n             Caption = 'Default';\n         }\n         field(4; EnableNewsletter; Enum NewsletterType)\n         {\n             Caption = 'Enable Newsletter';\n             DataClassification = CustomerContent;\n         }\n         field(5; FreeGiftsAvailable; Boolean)\n         {\n             DataClassification = CustomerContent;\n             Caption = 'Free Gifts Available';\n         }\n         field(6; Blocked; Boolean)\n         {\n             DataClassification = CustomerContent;\n             Caption = 'Blocked';\n         }\n         field(10; TotalCustomersForCategory; Integer)\n         {\n             FieldClass = FlowField;\n             CalcFormula = count (Customer where (\"Customer Category Code_PKT\" = field (Code)));\n             Caption = 'No. of associated customers';\n         }\n     }\n     keys\n     {\n         key(PK; Code)\n         {\n             Clustered = true;\n         }\n         key(K2; Description)\n         {\n             Unique = true;\n         }\n     }\n\n procedure GetSalesAmount(): Decimal\n var\n     CustomerCategoryMgt: Codeunit \"Customer Category Mgt_PKT\";\n     begin\n         exit(CustomerCategoryMgt.GetSalesAmount(Rec.Code));\n     end;\n}\n```", "```\nkey(K2; Description)\n{\n     Unique = true;\n}\n```", "```\nenum 50100 NewsletterType\n{\n Extensible = true;\n value(0; None)\n {\n     Caption = 'None';\n }\n value(1; Full)\n {\n     Caption = 'Full';\n }\n value(2; Limited)\n {\n     Caption = 'Limited';\n }\n}\n```", "```\ntable 50103 \"Packt Extension Setup\"\n{\n DataClassification = CustomerContent; \n Caption = 'Packt Extension Setup';\n\n fields\n {\n     field(1; \"Primary Key\"; Code[10])\n     {\n         DataClassification = CustomerContent;\n     }\n     field(2; \"Minimum Accepted Vendor Rate\"; Decimal)\n     {\n         Caption = 'Minimum Accepted Vendor Rate for Purchases';\n         DataClassification = CustomerContent;\n     }\n     field(3; \"Gift Tolerance Qty\"; Decimal)\n     {\n         Caption = 'Gift Tolerance Quantity for Sales';\n         DataClassification = CustomerContent;\n     }\n }\n keys\n {\n     key(PK; \"Primary Key\")\n     {\n         Clustered = true;\n     }\n }\n}\n```", "```\npage 50100 \"Customer Category List_PKT\"\n{\n PageType = List;\n SourceTable = \"Customer Category_PKT\";\n UsageCategory = Lists;\n ApplicationArea = All;\n CardPageId = CustomerCategoryCard_PKT;\n Caption = 'Customer Category List'; \n AdditionalSearchTerms = 'ranking, categorization';\n\n layout\n {\n     area(content)\n     {\n         repeater(Group)\n         {\n             field(Code; Code)\n             {\n                 ApplicationArea = All;\n             }\n             field(Description; Description)\n             {\n                 ApplicationArea = All;\n             }\n             field(Default; Default)\n             {\n                 ApplicationArea = All;\n             }\n             field(TotalCustomersForCategory; TotalCustomersForCategory)\n             {\n                 ApplicationArea = All;\n                 ToolTip = 'Total Customers for Category';\n             }\n         }\n     }\n }\n actions\n {\n     area(processing)\n     {\n         action(\"Create Default Category\")\n         {\n             Image = CreateForm;\n             Promoted = true;\n             PromotedCategory = Process;\n             PromotedIsBig = true;\n             ApplicationArea = All;\n             ToolTip = 'Create default category';\n             Caption = 'Create default category';\n\n             trigger OnAction();\n             var\n                 CustManagement: Codeunit \"Customer Category Mgt_PKT\";\n             begin\n                 CustManagement.CreateDefaultCategory();\n             end;\n          }\n     }\n   }\n}\n```", "```\npage 50101 CustomerCategoryCard_PKT\n{\n PageType = Card;\n ApplicationArea = All;\n UsageCategory = Documents;\n SourceTable = \"Customer Category_PKT\";\n Caption = 'Customer Category Card';\n\n layout\n {\n     area(Content)\n     {\n         group(General)\n         {\n             Caption = 'General';\n             field(Code; Code)\n             {\n                 ApplicationArea = All;\n             }\n             field(Description; Description)\n             {\n                 ApplicationArea = All;\n             }\n             field(Default; Default)\n             {\n                 ApplicationArea = All;\n             }\n             field(EnableNewsletter; EnableNewsletter)\n             {\n                 ApplicationArea = All;\n             }\n             field(FreeGiftsAvailable; FreeGiftsAvailable)\n             {\n                 ApplicationArea = All;\n             }\n         }\n         group(Administration)\n         {\n             Caption = 'Administration';\n             field(Blocked; Blocked)\n             {\n                 ApplicationArea = All;\n             }\n         }\n         group(Statistics)\n         {\n             Caption = 'Statistics';\n             field(TotalCustomersForCategory; TotalCustomersForCategory)\n             {\n                 ApplicationArea = All;\n                 Editable = false;\n             }\n             field(TotalSalesAmount; TotalSalesAmount)\n             {\n                 ApplicationArea = All;\n                 Caption = 'Total Sales Order Amount';\n                 Editable = false;\n                 Style = Strong;\n             }\n         }\n       }\n     }\n     var\n         TotalSalesAmount: Decimal;\n     trigger OnAfterGetRecord()\n     begin\n         TotalSalesAmount := Rec.GetSalesAmount();\n     end;\n}\n```", "```\ntable 50103 \"Packt Extension Setup\"\n{\n DataClassification = CustomerContent;\n Caption = 'Packt Extension Setup';\n\n fields\n {\n     field(1; \"Primary Key\"; Code[10])\n     {\n         DataClassification = CustomerContent;\n     }\n     field(2; \"Minimum Accepted Vendor Rate\"; Decimal)\n     {\n         Caption = 'Minimum Accepted Vendor Rate for Purchases';\n         DataClassification = CustomerContent;\n     }\n     field(3; \"Gift Tolerance Qty\"; Decimal)\n     {\n         Caption = 'Gift Tolerance Quantity for Sales';\n         DataClassification = CustomerContent;\n     }\n }\n\n keys\n {\n     key(PK; \"Primary Key\")\n     {\n         Clustered = true;\n     }\n  }\n}\n```", "```\ntableextension 50100 \"CustomerTableExtensions_PKT\" extends Customer //18 \n{\n fields\n {\n     field(50100; \"Customer Category Code_PKT\"; Code[20])\n     {\n         TableRelation = \"Customer Category_PKT\".No;\n         Caption = 'Customer Category Code';\n         DataClassification = CustomerContent;\n\n         trigger OnValidate()\n         var\n             CustomerCategory: Record \"Customer Category_PKT\";\n             ErrBlocked: Label 'This category is Blocked.';\n         begin\n             CustomerCategory.Get(\"Customer Category Code_PKT\");\n             if CustomerCategory.Blocked then\n                 Error(ErrBlocked);\n         end;\n     }\n }\n\n keys\n {\n     key(CustomerCategory; \"Customer Category Code_PKT\")\n     {\n     }\n }\n}\n```", "```\nkeys\n    {\n        key(CustomerCategory; \"Customer Category_PKT\")\n        {\n        }\n    }\n```", "```\ntableextension 50101 \"ItemLedgerEntryExtension_PKT\" extends \"Item Ledger Entry\"\n{\n    fields\n    {\n        field(50100; \"Customer Category Code_PKT\"; Code[20])\n        {\n            TableRelation = \"Customer Category_PKT\".No;\n            Caption = 'Customer Category';\n            DataClassification = CustomerContent;\n        }\n    }\n\n    keys\n    {\n        key(FK; \"Customer Category Code_PKT\")\n        {\n        }\n    }\n}\n```", "```\npageextension 50102 \"CustomerCardExtension_PKT\" extends \"Customer Card\"\n{\n     layout\n     {\n         addlast(General)\n         {\n             field(\"Customer Category PKT\"; \"Customer Category Code_PKT\")\n             {\n                 ToolTip = 'Customer Category';\n                 ApplicationArea = All;\n             }\n         }\n     }\n\n     actions\n     {\n         addlast(\"Functions\")\n         {\n             action(\"Assign default category\")\n             {\n                 Image = ChangeCustomer;\n                 Promoted = true;\n                 PromotedCategory = Process;\n                 PromotedIsBig = true;\n                 ApplicationArea = All;\n                 Caption = 'Assign Default Category';\n                 ToolTip = 'Assigns Default Category to the current Customer';\n\n                trigger OnAction();\n                 var\n                     CustomerCategoryMgt: Codeunit \"Customer Category Mgt_PKT\";\n                 begin\n                     CustomerCategoryMgt.AssignDefaultCategory(Rec.\"No.\");\n                 end;\n             }\n         }\n     }\n}\n```", "```\npageextension 50103 CustomerListExtension_PKT extends \"Customer List\"\n{\n     actions\n     {\n         addlast(Processing)\n         {\n             action(\"Assign Default Category\")\n             {\n                 Image = ChangeCustomer;\n                 Promoted = true;\n                 PromotedCategory = Process;\n                 PromotedIsBig = true;\n                 ApplicationArea = All;\n                 Caption = 'Assign Default Category to all Customers';\n                 ToolTip = 'Assigns the Default Category to all Customers';\n\n                 trigger OnAction();\n                 var\n                     CustomerCategoryMgt: Codeunit \"Customer Category Mgt_PKT\";\n                 begin\n                     CustomerCategoryMgt.AssignDefaultCategory();\n                 end;\n             }\n         }\n     }\n\n     views\n     {\n         addlast\n         {\n             view(CustomersWithoutCategory)\n             {\n                 Caption = 'Customers without Category assigned';\n                 Filters = where (\"Customer Category Code_PKT\" = filter (''));\n             }\n         }\n     }\n}\n```", "```\ncodeunit 50100 \"Customer Category Mgt_PKT\"\n{\n procedure CreateDefaultCategory()\n var\n     CustomerCategory: Record \"Customer Category_PKT\";\n begin\n     CustomerCategory.Code := 'DEFAULT';\n     CustomerCategory.Description := 'Default Customer Category';\n     CustomerCategory.Default := true;\n     if CustomerCategory.Insert then;\n end;\n\n procedure AssignDefaultCategory(CustomerCode: Code[20])\n var\n     Customer: Record Customer;\n     CustomerCategory: Record \"Customer Category_PKT\";\n begin\n     //Set default category for a Customer \n     Customer.Get(CustomerCode);\n     CustomerCategory.SetRange(Default, true);\n     if CustomerCategory.FindFirst() then begin\n         Customer.\"Customer Category Code_PKT\" := CustomerCategory.Code;\n         Customer.Modify();\n     end;\n end;\n\n procedure AssignDefaultCategory()\n var\n     Customer: Record Customer;\n     CustomerCategory: Record \"Customer Category_PKT\";\n begin\n     //Set default category for ALL Customer \n     CustomerCategory.SetRange(Default, true);\n     if CustomerCategory.FindFirst() then begin\n         Customer.SetFilter(\"Customer Category Code_PKT\", '%1', '');\n         Customer.ModifyAll(\"Customer Category Code_PKT\", CustomerCategory.Code, true);         \n     end;\n end;\n\n //Returns the number of Customers without an assigned Customer Category\n procedure GetTotalCustomersWithoutCategory(): Integer\n var\n     Customer: record Customer;\n begin\n     Customer.SetRange(\"Customer Category Code_PKT\", '');\n     exit(customer.Count());\n end;\n\n procedure GetSalesAmount(CustomerCategoryCode: Code[20]): Decimal\n var\n     SalesLine: Record \"Sales Line\";\n     Customer: record Customer;\n     TotalAmount: Decimal;\n begin\n     Customer.SetCurrentKey(\"Customer Category Code_PKT\");\n     Customer.SetRange(\"Customer Category Code_PKT\", CustomerCategoryCode);\n     if Customer.FindSet() then\n     repeat\n         SalesLine.SetRange(\"Document Type\", SalesLine.\"Document Type\"::Order);\n         SalesLine.SetRange(\"Sell-to Customer No.\", Customer.\"No.\");\n         if SalesLine.FindSet() then\n         repeat\n             TotalAmount += SalesLine.\"Line Amount\";\n         until SalesLine.Next() = 0;\n     until Customer.Next() = 0;\n     exit(TotalAmount);\n end;\n}\n```", "```\ntable 50101 \"GiftCampaign_PKT\"\n{\n DataClassification = CustomerContent;\n DrillDownPageId = \"Gift Campaign List_PKT\";\n LookupPageId = \"Gift Campaign List_PKT\";\n Caption = 'Gift Campaign';\n\n fields\n {\n     field(1; CustomerCategoryCode; Code[20])\n     {\n         DataClassification = CustomerContent;\n         TableRelation = \"Customer Category_PKT\";\n         Caption = 'Customer Category Code';\n         trigger OnValidate()\n         var\n             CustomerCategory: Record \"Customer Category_PKT\";\n             ErrNoGifts: Label 'This category is not enabled for Gift Campaigns.';\n             ErrBlocked: Label 'This category is blocked.';\n         begin\n             CustomerCategory.Get(CustomerCategoryCode);\n             if CustomerCategory.Blocked then\n                 Error(ErrBlocked);\n             if not CustomerCategory.FreeGiftsAvailable then\n                 Error(ErrNoGifts);\n         end;\n     }\n     field(2; ItemNo; Code[20])\n     {\n         DataClassification = CustomerContent;\n         TableRelation = Item;\n         Caption = 'Item No.';\n     }\n     field(3; StartingDate; Date)\n     {\n         DataClassification = CustomerContent;\n         Caption = 'Starting Date';\n     }\n     field(4; EndingDate; Date)\n     {\n         DataClassification = CustomerContent;\n         Caption = 'Ending Date';\n     }\n     field(5; MinimumOrderQuantity; Decimal)\n     {\n         DataClassification = CustomerContent;\n         Caption = 'Minimum Order Quantity';\n     }\n     field(6; GiftQuantity; Decimal)\n     {\n         DataClassification = CustomerContent;\n         Caption = 'Free Gift Quantity';\n     }\n     field(7; Inactive; Boolean)\n     {\n         DataClassification = CustomerContent;\n         Caption = 'Inactive';\n     }\n }\n\n keys\n {\n     key(PK; CustomerCategoryCode, ItemNo, StartingDate, EndingDate)\n     {\n         Clustered = true;\n     }\n }\n}\n```", "```\nkeys\n    {\n        key(PK; CustomerCategoryCode, ItemNo, StartingDate, EndingDate)\n        {\n            Clustered = true;\n        }\n    }\n```", "```\npage 50103 \"Gift Campaign List_PKT\"\n{ \n     PageType = List;\n     SourceTable = GiftCampaign_PKT;\n     UsageCategory = Lists;\n     Caption = 'Gift Campaigns';\n     ApplicationArea = All;\n     AdditionalSearchTerms = 'promotions, marketing';\n\n     layout\n     {\n         area(content)\n         {\n             repeater(Group)\n             {\n                 field(CustomerCategoryCode; CustomerCategoryCode)\n                 {\n                     ApplicationArea = All;\n                 }\n                 field(ItemNo; ItemNo)\n                 {\n                     ApplicationArea = All;\n                 }\n                 field(StartingDate; StartingDate)\n                 {\n                     ApplicationArea = All;\n                 }\n                 field(EndingDate; EndingDate)\n                 {\n                     ApplicationArea = All;\n                 }\n                 field(MinimumOrderQuantity; MinimumOrderQuantity)\n                 {\n                     ApplicationArea = All;\n                     Style = Strong;\n                 }\n                 field(GiftQuantity; GiftQuantity)\n                 {\n                     ApplicationArea = All;\n                     Style = Strong;\n                 }\n                 field(Inactive; Inactive)\n                 {\n                     ApplicationArea = All;\n                 }\n             }\n         }\n     }\n\n     views\n     {\n         view(ActiveCampaigns)\n         {\n             Caption = 'Active Gift Campaigns';\n             Filters = where (Inactive = const (false));\n         }\n         view(InactiveCampaigns)\n         {\n             Caption = 'Inactive Gift Campaigns';\n             Filters = where (Inactive = const (true));\n         }\n     }\n}\n```", "```\npageextension 50100 SalesOrderExt_PKT extends \"Sales Order\"\n{\n     actions\n     {\n         addlast(Processing)\n         {\n             action(AddFreeGifts)\n             {\n                 Caption = 'Add Free Gifts';\n                 ToolTip = 'Adds Free Gifts to the current Sales Order based on active Campaigns';\n                 ApplicationArea = All;\n                 Image = Add;\n                 Promoted = true;\n                 PromotedCategory = Process;\n                 PromotedIsBig = true;\n                 trigger OnAction()\n                 begin\n                     GiftManagement.AddGifts(Rec);\n                 end;\n             }\n         }\n     }\n\n     var\n         GiftManagement: Codeunit GiftManagement_PKT;\n}\n```", "```\ncodeunit 50101 \"GiftManagement_PKT\"\n{\n procedure AddGifts(var SalesHeader: Record \"Sales Header\")\n var\n     SalesLine: record \"Sales Line\";\n Handled: Boolean;\n begin\n     SalesLine.SetRange(\"Document Type\", SalesHeader.\"Document Type\");\n     SalesLine.SetRange(\"Document No.\", SalesHeader.\"No.\");\n     SalesLine.SetRange(Type, SalesLine.Type::Item);\n     //We exclude the generated gifts lines in order to avoid loops\n     SalesLine.SetFilter(\"Line Discount %\", '<>100'); \n     if SalesLine.FindSet() then\n     repeat\n         //Integration event raised\n         OnBeforeFreeGiftSalesLineAdded(SalesLine, Handled);\n         AddFreeGiftSalesLine(SalesLine, Handled);\n         //Integration Event raised\n         OnAfterFreeGiftSalesLineAdded(SalesLine);\n     until SalesLine.Next() = 0;\n end;\n\n local procedure AddFreeGiftSalesLine(var SalesLine: Record \"Sales Line\"; var Handled: Boolean)\n var\n     GiftCampaign: Record GiftCampaign_PKT;\n     SalesHeader: record \"Sales Header\";\n     Customer: Record Customer;\n     SalesLineGift: Record \"Sales Line\";\n     LineNo: Integer;\n begin\n     if Handled then\n         exit;\n     SalesHeader.Get(SalesLine.\"Document Type\", SalesLine.\"Document No.\");\n     Customer.Get(SalesLine.\"Sell-to Customer No.\");\n     GiftCampaign.SetRange(CustomerCategoryCode, Customer.\"Customer Category Code_PKT\");\n     GiftCampaign.SetRange(ItemNo, SalesLine.\"No.\");\n     GiftCampaign.SetFilter(StartingDate, '<=%1', SalesHeader.\"Order Date\");\n     GiftCampaign.SetFilter(EndingDate, '>=%1', SalesHeader.\"Order Date\");\n     GiftCampaign.SetRange(Inactive, false);\n     GiftCampaign.SetFilter(MinimumOrderQuantity, '<= %1', SalesLine.Quantity);\n     if GiftCampaign.FindFirst() then begin\n         //Active promo found. We need to insert a new Sales Line\n         LineNo := GetLastSalesDocumentLineNo(SalesHeader);\n         SalesLineGift.init;\n         SalesLineGift.TransferFields(SalesLine);\n         SalesLineGift.\"Line No.\" := LineNo + 10000;\n         SalesLineGift.Validate(Quantity, GiftCampaign.GiftQuantity);\n         SalesLineGift.Validate(\"Line Discount %\", 100);\n         if SalesLineGift.Insert() then;\n     end;\n end;\n\n local procedure GetLastSalesDocumentLineNo(SalesHeader: Record \"Sales Header\"): Integer\n var \n     SalesLine: Record \"Sales Line\";\n begin\n     SalesLine.SetRange(\"Document Type\", SalesHeader.\"Document Type\");\n     SalesLine.SetRange(\"Document No.\", SalesHeader.\"No.\");\n     if SalesLine.FindLast() then\n         exit(SalesLine.\"Line No.\")\n     else\n         exit(0);\n end;\n\n [EventSubscriber(ObjectType::Table, Database::\"Sales Line\", 'OnAfterValidateEvent', 'Quantity', false, false)]\n local procedure CheckGiftEligibility(var Rec: Record \"Sales Line\")\n var\n     GiftCampaign: Record GiftCampaign_PKT;\n     Customer: Record Customer;\n     SalesHeader: Record \"Sales Header\";\n     Handled: Boolean;\n begin\n     if (Rec.Type = Rec.Type::Item) and (Customer.Get(Rec.\"Sell-to Customer No.\")) then begin\n     SalesHeader.Get(Rec.\"Document Type\", Rec.\"Document No.\");\n     GiftCampaign.SetRange(CustomerCategoryCode, Customer.\"Customer Category Code_PKT\");\n     GiftCampaign.SetRange(ItemNo, Rec.\"No.\");\n     GiftCampaign.SetFilter(StartingDate, '<=%1', SalesHeader.\"Order Date\");\n     GiftCampaign.SetFilter(EndingDate, '>=%1', SalesHeader.\"Order Date\");\n     GiftCampaign.SetRange(Inactive, false); GiftCampaign.SetFilter(MinimumOrderQuantity, '> %1',         Rec.Quantity);\n     if GiftCampaign.FindFirst() then begin\n         //Integration event raised\n         OnBeforeFreeGiftAlert(Rec, Handled);\n         DoGiftCheck(Rec, GiftCampaign, Handled);\n         //Integration Event raised\n         OnAfterFreeGiftAlert(Rec);\n     end;\n end;\n end;\n\n local procedure DoGiftCheck(var SalesLine: Record \"Sales Line\"; var GiftCampaign: Record GiftCampaign_PKT; var Handled: Boolean)\n var\n     PacktSetup: record \"Packt Extension Setup\";\n     GiftAlert: Label 'Attention: there is an active promotion for item %1\\. if you buy %2 you can have a gift of %3';\n begin\n     if Handled then\n         exit;\n     PacktSetup.Get();\n     if (SalesLine.Quantity < GiftCampaign.MinimumOrderQuantity) and (GiftCampaign.MinimumOrderQuantity - SalesLine.Quantity <= PacktSetup.\"Gift Tolerance Qty\") then\n         Message(GiftAlert, SalesLine.\"No.\", Format(GiftCampaign.MinimumOrderQuantity), Format(GiftCampaign.GiftQuantity));\n     end;\n```", "```\n[IntegrationEvent(true, false)]\n local procedure OnBeforeFreeGiftSalesLineAdded(var Rec: Record \"Sales Line\"; var Handled: Boolean)\n begin\n end;\n\n [IntegrationEvent(true, false)]\n local procedure OnAfterFreeGiftSalesLineAdded(var Rec: Record \"Sales Line\")\n begin\n end;\n\n [IntegrationEvent(true, false)]\n local procedure OnBeforeFreeGiftAlert(var Rec: Record \"Sales Line\"; var Handled: Boolean)\n begin\n end;\n\n [IntegrationEvent(true, false)]\n local procedure OnAfterFreeGiftAlert(var Rec: Record \"Sales Line\")\n begin\n end;\n\n [EventSubscriber(ObjectType::Table, Database::\"Item Ledger Entry\", 'OnAfterInsertEvent', '', false, false)]\n local procedure OnAfterItemLedgerEntryInsert(var Rec: Record \"Item Ledger Entry\")\n var\n     Customer: Record Customer;\n begin\n     if rec.\"Entry Type\" = rec.\"Entry Type\"::Sale then begin\n         if Customer.Get(Rec.\"Source No.\") then begin\n             Rec.\"Customer Category Code_PKT\" := Customer.\"Customer Category Code_PKT\";\n             Rec.Modify();\n          end;\n     end;\n end;\n}\n```", "```\nOnBeforeFreeGiftSalesLineAdded(SalesLine, Handled);\nAddFreeGiftSalesLine(SalesLine, Handled);\nOnAfterFreeGiftSalesLineAdded(SalesLine);\n```", "```\nif Handled then\n   exit;\n```", "```\n[EventSubscriber(ObjectType::Table, Database::\"Sales Line\", 'OnAfterValidateEvent', 'Quantity', false, false)]\n    local procedure CheckGiftEligibility(var Rec: Record \"Sales Line\")\n```", "```\n[EventSubscriber(ObjectType::Table, Database::\"Item Ledger Entry\", 'OnAfterInsertEvent', '', false, false)]\n    local procedure OnAfterItemLedgerEntryInsert(var Rec: Record \"Item Ledger Entry\")\n```", "```\ntable 50102 \"Vendor Quality_PKT\"\n{\n Caption = 'Vendor Quality';\n DataClassification = CustomerContent;\n\n fields\n {\n     field(1; \"Vendor No.\"; Code[20])\n     {\n         Caption = 'Vendor No.';\n         DataClassification = CustomerContent;\n         TableRelation = Vendor;\n     }\n     field(2; \"Vendor Name\"; Text[50])\n     {\n         Caption = 'Vendor Name';\n         FieldClass = FlowField;\n         CalcFormula = lookup (Vendor.Name where (\"No.\" = field (\"Vendor No.\")));\n     }\n     field(3; \"Vendor Activity Description\"; Text[250])\n     {\n         Caption = 'Vendor Activity Description';\n         DataClassification = CustomerContent;\n     }\n     field(4; ScoreItemQuality; Integer)\n     {\n         Caption = 'Item Quality Score';\n         DataClassification = CustomerContent;\n         MinValue = 1;\n         MaxValue = 10;\n         trigger OnValidate()\n         begin\n             UpdateVendorRate();\n         end;\n     }\n     field(5; ScoreDelivery; Integer)\n     {\n         Caption = 'Delivery On Time Score';\n         DataClassification = CustomerContent;\n         MinValue = 1;\n         MaxValue = 10;\n         trigger OnValidate()\n         begin\n             UpdateVendorRate();\n         end;\n     }\n     field(6; ScorePackaging; Integer)\n     {\n         Caption = 'Packaging Score';\n         DataClassification = CustomerContent;\n         MinValue = 1;\n         MaxValue = 10;\n         trigger OnValidate()\n         begin\n             UpdateVendorRate();\n         end;\n         }\n     field(7; ScorePricing; Integer)\n     {\n         Caption = 'Pricing Score';\n         DataClassification = CustomerContent;\n         MinValue = 1;\n         MaxValue = 10;\n         trigger OnValidate()\n         begin\n             UpdateVendorRate();\n         end;\n     }\n     field(8; Rate; Decimal)\n     {\n         Caption = 'Vendor Rate';\n         DataClassification = CustomerContent;\n     }\n     field(10; UpdateDate; DateTime)\n     {\n         Caption = 'Update Date';\n         DataClassification = CustomerContent;\n     }\n     field(11; InvoicedYearN; Decimal)\n     {\n         Caption = 'Invoiced for current year (N)';\n         DataClassification = CustomerContent;\n     }\n     field(12; InvoicedYearN1; Decimal)\n     {\n         Caption = 'Invoiced for year N-1';\n         DataClassification = CustomerContent;\n     }\n     field(13; InvoicedYearN2; Decimal)\n     {\n         Caption = 'Invoiced for year N-2';\n         DataClassification = CustomerContent;\n     }\n     field(14; DueAmount; Decimal)\n     {\n         Caption = 'Due Amount';\n         DataClassification = CustomerContent;\n     }\n     field(15; AmountNotDue; Decimal)\n     {\n         Caption = 'Amount to pay (not due)';\n         DataClassification = CustomerContent;\n     }\n }\n\n keys\n {\n     key(PK; \"Vendor No.\")\n     {\n         Clustered = true;\n     }\n }\n\n trigger OnInsert()\n begin\n     UpdateDate := CurrentDateTime();\n end;\n trigger OnModify()\n begin\n     UpdateDate := CurrentDateTime();\n end;\n local procedure UpdateVendorRate()\n var\n     VendorQualityMgt: Codeunit VendorQualityMgt_PKT;\n begin\n     VendorQualityMgt.CalculateVendorRate(Rec);\n end;\n}\n```", "```\npage 50102 \"Vendor Quality Card_PKT\"\n{\n     PageType = Card;\n     ApplicationArea = All;\n     UsageCategory = Administration;\n     SourceTable = \"Vendor Quality_PKT\";\n     Caption = 'Vendor Quality Card';\n     InsertAllowed = false;\n\n     layout\n    {\n         area(Content)\n         {\n             group(General)\n             {\n                 Caption = 'General';\n                 field(\"Vendor No.\"; \"Vendor No.\")\n                 {\n                     ApplicationArea = All;\n                     Editable = false;\n                 }\n                 field(\"Vendor Name\"; \"Vendor Name\")\n                 {\n                     ApplicationArea = All;\n                     Editable = false;\n                 }\n                 field(\"Vendor Activity Description\"; \"Vendor Activity Description\")\n                 {\n                     ApplicationArea = All;\n                 }\n                 field(Rate; Rate)\n                 {\n                     ApplicationArea = All;\n                     Editable = false;\n                     Style = Strong;\n                 }\n                 field(UpdateDate; UpdateDate)\n                 {\n                     ApplicationArea = All;\n                     Editable = false;\n                 }\n             }\n             group(Scoring)\n             {\n                 Caption = 'Score';\n                 field(ScoreItemQuality; ScoreItemQuality)\n                 {\n                     ApplicationArea = All;\n                 }\n                 field(ScoreDelivery; ScoreDelivery)\n                 {\n                     ApplicationArea = All;\n                 }\n                 field(ScorePackaging; ScorePackaging)\n                 {\n                     ApplicationArea = All;\n                 }\n                 field(ScorePricing; ScorePricing)\n                 {\n                     ApplicationArea = All;\n                 }\n             }\n             group(Financials)\n             {\n                 Caption = 'Financials';\n                 field(InvoicedYearN; InvoicedYearN)\n                 {\n                     ApplicationArea = All;\n                     Editable = false;\n                 }\n                 field(InvoicedYearN1; InvoicedYearN1)\n                 {\n                     ApplicationArea = All;\n                     Editable = false;\n                 }\n                 field(InvoicedYearN2; InvoicedYearN2)\n                 {\n                     ApplicationArea = All;\n                     Editable = false;\n                 }\n                 field(DueAmount; DueAmount)\n                 {\n                     ApplicationArea = All;\n                     Editable = false;\n                     Style = Attention;\n                 }\n                 field(AmountNotDue; AmountNotDue)\n                 {\n                     ApplicationArea = All;\n                     Editable = false;\n                 }\n             }\n         }\n     }\n\n     trigger OnOpenPage()\n     begin\n         if not Insert() then;\n     end;\n\n     trigger OnAfterGetRecord()\n     var\n         VendorQualityMgt: Codeunit VendorQualityMgt_PKT;\n     begin\n         VendorQualityMgt.UpdateVendorQualityStatistics(Rec);\n     end;\n}\n```", "```\npageextension 50101 VendorCardExt_PKT extends \"Vendor Card\"\n{\n    actions\n    {\n        addafter(\"Comments\")\n        {\n            action(QualityClassification)\n            {\n                Caption = 'Quality Classification';\n                ApplicationArea = All;\n                Image = QualificationOverview;\n                Promoted = true;\n                PromotedCategory = Process;\n                PromotedIsBig = true;\n                RunObject = Page \"Vendor Quality Card_PKT\";\n                RunPageLink = \"Vendor No.\" = field (\"No.\");\n            }\n        }\n    }\n}\n```", "```\ncodeunit 50102 VendorQualityMgt_PKT\n{\n    procedure CalculateVendorRate(var VendorQuality: Record \"Vendor Quality_PKT\")\n    var\n        Handled: Boolean;\n    begin\n        OnBeforeCalculateVendorRate(VendorQuality, Handled);\n        //This is the company's criteria to assign the Vendor rate.\n        VendorRateCalculation(VendorQuality, Handled);\n        OnAfterCalculateVendorRate(VendorQuality);\n    end;\n\n    local procedure VendorRateCalculation(var VendorQuality: Record \"Vendor Quality_PKT\"; var         Handled: Boolean)\n    begin\n        if Handled then\n            exit;\n        VendorQuality.Rate := (VendorQuality.ScoreDelivery + VendorQuality.ScoreItemQuality +\n        VendorQuality.ScorePackaging + VendorQuality.ScorePricing) / 4;\n    end;\n\n    procedure UpdateVendorQualityStatistics(var VendorQuality: Record \"Vendor Quality_PKT\")\n    var\n        Year: Integer;\n        DW: Dialog;\n        DialogMessage: Label 'Calculating Vendor statistics...';\n    begin\n        DW.OPEN(DialogMessage);\n        Year := DATE2DMY(TODAY, 3);\n        VendorQuality.InvoicedYearN := GetInvoicedAmount(VendorQuality.\"Vendor No.\", DMY2DATE(1, 1,                 Year), TODAY);\n        VendorQuality.InvoicedYearN1 := GetInvoicedAmount(VendorQuality.\"Vendor No.\", DMY2DATE(1, 1,             Year - 1), DMY2DATE(31, 12, Year - 1));\n        VendorQuality.InvoicedYearN2 := GetInvoicedAmount(VendorQuality.\"Vendor No.\", DMY2DATE(1, 1,             Year - 2), DMY2DATE(31, 12, Year - 2));\n        VendorQuality.DueAmount := GetDueAmount(VendorQuality.\"Vendor No.\", TRUE);\n        VendorQuality.AmountNotDue := GetDueAmount(VendorQuality.\"Vendor No.\", FALSE);\n        DW.CLOSE;\n    end;\n\n    local procedure GetInvoicedAmount(VendorNo: Code[20]; StartDate: Date; EndDate: Date): Decimal\n    var\n        VendorLedgerEntry: Record \"Vendor Ledger Entry\";\n        Total: Decimal;\n    begin\n        VendorLedgerEntry.SETRANGE(\"Vendor No.\", VendorNo);\n        VendorLedgerEntry.SETFILTER(\"Document Date\", '%1..%2', StartDate, EndDate);\n        if VendorLedgerEntry.FINDSET then\n        repeat\n            Total += VendorLedgerEntry.\"Purchase (LCY)\";\n        until VendorLedgerEntry.NEXT = 0;\n        exit(Total * (-1));\n    end;\n\n    local procedure GetDueAmount(VendorNo: Code[20]; Due: Boolean): Decimal\n    var\n        VendorLedgerEntry: Record \"Vendor Ledger Entry\";\n        Total: Decimal;\n    begin\n        VendorLedgerEntry.SETRANGE(\"Vendor No.\", VendorNo);\n        VendorLedgerEntry.SETRANGE(Open, TRUE);\n        if Due then\n            VendorLedgerEntry.SETFILTER(\"Due Date\", '< %1', TODAY)\n        else\n            VendorLedgerEntry.SETFILTER(\"Due Date\", '> %1', TODAY);\n        VendorLedgerEntry.SETAUTOCALCFIELDS(VendorLedgerEntry.\"Remaining Amt. (LCY)\");\n        if VendorLedgerEntry.FINDSET then\n        repeat\n            Total += VendorLedgerEntry.\"Remaining Amt. (LCY)\";\n        until VendorLedgerEntry.NEXT = 0;\n        exit(Total * (-1));\n    end;\n\n}\n```", "```\n[IntegrationEvent(true, false)]\n    local procedure OnBeforeCalculateVendorRate(var VendorQuality: Record \"Vendor Quality_PKT\"; var         Handled: Boolean)\n    begin\n    end;\n\n    [IntegrationEvent(true, false)]\n    local procedure OnAfterCalculateVendorRate(var VendorQuality: Record \"Vendor Quality_PKT\")\n    begin\n    end;\n```", "```\n[EventSubscriber(ObjectType::Codeunit, Codeunit::\"Release Purchase Document\", 'OnBeforeManualReleasePurchaseDoc', '', false, false)]\n```", "```\n[EventSubscriber(ObjectType::Codeunit, Codeunit::\"Release Purchase Document\",         'OnBeforeManualReleasePurchaseDoc', '', false, false)]\n    local procedure QualityCheckForReleasingPurchaseDoc(var PurchaseHeader: Record \"Purchase                 Header\")\n    var\n        VendorQuality: Record \"Vendor Quality_PKT\";\n        PacktSetup: Record \"Packt Extension Setup\";\n        ErrNoMinimumRate: Label 'Vendor %1 has a rate of %2 and it''s under the required minimum                 value (%3)';\n    begin\n        PacktSetup.Get();\n        if VendorQuality.Get(PurchaseHeader.\"Buy-from Vendor No.\") then begin\n            if VendorQuality.Rate < PacktSetup.\"Minimum Accepted Vendor Rate\" then\n                Error(ErrNoMinimumRate, PurchaseHeader.\"Buy-from Vendor No.\",\n                Format(VendorQuality.Rate), Format(PacktSetup.\"Minimum Accepted Vendor Rate\"));\n        end;\n    end;\n```", "```\nviews\n{\n    view(ActiveCampaigns)\n    {\n        Caption = 'Active Gift Campaigns';\n        Filters = where (Inactive = const (false));\n    }\n    view(InactiveCampaigns)\n    {\n        Caption = 'Inactive Gift Campaigns';\n        Filters = where (Inactive = const (true));\n    }\n}\n```", "```\nviews\n{\n    addlast\n    {\n        view(CustomersWithoutCategory)\n        {\n            Caption = 'Customers without Category assigned';\n            Filters = where (\"Customer Category_PKT\" = filter (''));\n        }\n    }\n}\n```", "```\ncodeunit 50105 CustomerCategoryInstall_PKT\n{\n    Subtype = Install;\n    trigger OnInstallAppPerCompany();\n    var\n        archivedVersion: Text;\n        CustomerCategory: Record \"Customer Category_PKT\";\n        PacktSetup: Record \"Packt Extension Setup\";\n    begin\n        archivedVersion := NavApp.GetArchiveVersion;\n        if archivedVersion = '1.0.0.0' then begin\n            NavApp.RestoreArchiveData(Database::\"Customer Category_PKT\");\n            NavApp.RestoreArchiveData(Database::Customer);\n            NavApp.RestoreArchiveData(Database::\"Packt Extension Setup\");\n            NavApp.RestoreArchiveData(Database::GiftCampaign_PKT);\n            NavApp.RestoreArchiveData(Database::\"Vendor Quality_PKT\");\n            NavApp.DeleteArchiveData(Database::\"Customer Category_PKT\");\n            NavApp.DeleteArchiveData(Database::Customer);\n            NavApp.DeleteArchiveData(Database::\"Packt Extension Setup\");\n            NavApp.DeleteArchiveData(Database::GiftCampaign_PKT);\n            NavApp.DeleteArchiveData(Database::\"Vendor Quality_PKT\");\n        end;\n        if CustomerCategory.IsEmpty() then\n            InsertDefaultCustomerCategory();\n        if PacktSetup.IsEmpty() then\n            InsertDefaultSetup();\n    end;\n\n    // Insert the GOLD, SILVER, BRONZE reward levels\n    local procedure InsertDefaultCustomerCategory();\n    begin\n        InsertCustomerCategory('TOP', 'Top Customer', false);\n        InsertCustomerCategory('MEDIUM', 'Standard Customer', true);\n        InsertCustomerCategory('BAD', 'Bad Customer', false);\n    end;\n\n    // Create and insert a Customer Category record\n    local procedure InsertCustomerCategory(ID: Code[30]; Description: Text[250]; Default: Boolean);\n    var\n        CustomerCategory: Record \"Customer Category_PKT\";\n    begin\n        CustomerCategory.Init();\n        CustomerCategory.Code := ID;\n        CustomerCategory.Description := Description;\n        CustomerCategory.Default := Default;\n        CustomerCategory.Insert();\n    end;\n\n    local procedure InsertDefaultSetup()\n    var\n        PacktSetup: Record \"Packt Extension Setup\";\n    begin\n        PacktSetup.Init();\n        PacktSetup.\"Minimum Accepted Vendor Rate\" := 6;\n        PacktSetup.\"Gift Tolerance Qty\" := 2;\n        PacktSetup.Insert();\n    end;\n}\n```", "```\narchivedVersion := NavApp.GetArchiveVersion;\n```", "```\n\"dependencies\": [\n    {\n      \"appId\": \"63ca2fa4-4f03-4f2b-a480-172fef340d3f\",\n      \"publisher\": \"Microsoft\",\n      \"name\": \"System Application\",\n      \"version\": \"1.0.0.0\"\n    },\n    {\n      \"appId\": \"437dbf0e-84ff-417a-965d-ed2bb9650972\",\n      \"publisher\": \"Microsoft\",\n      \"name\": \"Base Application\",\n      \"version\": \"15.0.0.0\"\n    },\n    {\n \"appId\": \"dd03d28e-4dfe-48d9-9520-c875595362b6\", \"name\": \"PacktDemoExtension\", \"publisher\": \"SD\", \"version\": \"1.0.0.0\" }  ],\n```", "```\ntableextension 50120 VendorQualityExt_PKN extends \"Vendor Quality_PKT\"\n{\n    fields\n    {\n        field(50120; \"Certification No.\"; Text[50])\n        {\n            Caption = 'Classification No.';\n            DataClassification = CustomerContent;\n        }\n    }\n}\n```", "```\npageextension 50120 VendorQualityCardExt_PKN extends \"Vendor Quality Card_PKT\"\n{\n    layout\n    {\n        addlast(General)\n        {\n            field(\"Certification No.\"; \"Certification No.\")\n            {\n                ApplicationArea = All;\n            }\n        }\n    }\n}\n```", "```\nprocedure AddGifts(var SalesHeader: record \"Sales Header\")\n    var\n        SalesLine: record \"Sales Line\";\n        Handled: Boolean;\n    begin\n        SalesLine.SetRange(\"Document Type\", SalesHeader.\"Document Type\");\n        SalesLine.SetRange(\"Document No.\", SalesHeader.\"No.\");\n        SalesLine.SetRange(Type, SalesLine.Type::Item);\n        if SalesLine.FindSet() then\n            repeat\n                //Integration event raised\n                OnBeforeFreeGiftSalesLineAdded(SalesLine, Handled);\n                AddFreeGiftSalesLine(SalesLine, Handled);\n                //Integration Event raised\n                OnAfterFreeGiftSalesLineAdded(SalesLine);\n            until SalesLine.Next() = 0;\n    end;\n```", "```\nif Handled then\n    exit;\n```", "```\ncodeunit 50120 CustomGiftLogic_PKN\n{\n    [EventSubscriber(ObjectType::Codeunit, Codeunit::GiftManagement_PKT,         'OnBeforeFreeGiftSalesLineAdded', '', false, false)]\n    local procedure HideDefaultBehaviour(var Rec: Record \"Sales Line\"; var Handled: Boolean)\n    begin\n        Handled := true;\n        //Here we create a custom gift line with a fixed quantity \n        //(override of standard behavior)\n        CreateCustomGiftLine(Rec);\n    end;\n\n    local procedure CreateCustomGiftLine(var SalesLine: Record \"Sales Line\")\n    var\n        SalesHeader: Record \"Sales Header\";\n        SalesLineGift: Record \"Sales Line\";\n        LineNo: Integer;\n        FixedQty: Decimal;\n    begin\n        FixedQty := 2;\n        SalesHeader.Get(SalesLine.\"Document Type\", SalesLine.\"Document No.\");\n        LineNo := GetLastSalesDocumentLineNo(SalesHeader);\n        SalesLineGift.init;\n        SalesLineGift.TransferFields(SalesLine);\n        SalesLineGift.\"Line No.\" := LineNo + 10000;\n        SalesLineGift.Validate(Quantity, FixedQty);\n        SalesLineGift.Validate(\"Line Discount %\", 100);\n        if SalesLineGift.Insert() then;\n    end;\n\n    local procedure GetLastSalesDocumentLineNo(SalesHeader: Record \"Sales Header\"): Integer\n    var\n        SalesLine: Record \"Sales Line\";\n    begin\n        SalesLine.SetRange(\"Document Type\", SalesHeader.\"Document Type\");\n        SalesLine.SetRange(\"Document No.\", SalesHeader.\"No.\");\n        if SalesLine.FindLast() then\n            exit(SalesLine.\"Line No.\")\n        else\n            exit(0);\n    end;\n}\n```"]