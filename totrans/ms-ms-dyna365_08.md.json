["```\nRecord.Insert([RunTrigger: Boolean[, InsertWithSystemId: Boolean]])\n```", "```\nmyRec.SystemId := '{B6667654-F4B2-B945-8567-006DD6B6775E}';\nmyRec.Insert(true,true);\n```", "```\nvar\n    Customer: Record Customer;\n    Text000: Label 'Customer was found.';\n    begin\n    if Customer.GetBySystemId('{B6667654-F4B2-B945-8567-006DD6B6775E}') then\n         Message(Text000);\nend;\n```", "```\nfield(1; EntryID; GUID)\n{\n    DataClassification = CustomerContent;\n    TableRelation = Item.SystemId;\n}\n```", "```\n[Ok := ]  File.UploadIntoStream(DialogTitle: String, FromFolder: String, FromFilter: String, var FromFile: Text, var InStream: InStream)\n```", "```\nprocedure ImportItemPicture(Item: Record Item)\n    var\n        FileInstream: InStream;\n        FileName: Text;\n    begin\n        if UploadIntoStream('', '', '', FileName, FileInstream) then\n        begin\n            Clear(Item.Picture);\n            Item.Picture.ImportStream(FileInstream,FileName);\n            Item.Modify(true);\n        end;\n    end;\n```", "```\nlocal procedure UploadCSV()\n  var\n        CSVInStream : InStream;\n        UploadResult : Boolean;\n        TempBlob : Codeunit \"Temp Blob\";\n        DialogCaption : Text;\n        CSVFileName : Text;\n        CSVBuffer: Record \"CSV Buffer\";\n        Item: Record Item;\n    begin\n        UploadResult := UploadIntoStream(DialogCaption,'','',CSVFileName,CSVInStream);\n        CSVBuffer.DeleteAll;\n        CSVBuffer.LoadDataFromStream(CSVInStream,';'); \n        if CSVBuffer.FindSet() then\n        repeat\n         if (CSVBuffer.\"Field No.\" = 1) then\n            Item.Init();\n            case CSVBuffer.\"Field No.\" of\n                1: Item.Validate(\"No.\",CSVBuffer.Value);\n                2: Item.Validate(Description,CSVBuffer.Value);\n                3: Item.Validate(\"Item Category Code\",CSVBuffer.Value);\n                4: if not Item.Insert() then Item.Modify();\n           end;\n        until CSVBuffer.Next()=0;\n    end;\n```", "```\n[Ok := ]  File.DownloadFromStream(InStream: InStream, DialogTitle: String, ToFolder: String, ToFilter: String, var ToFile: Text)\n```", "```\nprocedure ExportItemPicture(Item: Record Item)\n    var\n        FileInStream: InStream;\n        FileName: Text;\n        i: Integer;\n        TenantMedia: Record \"Tenant Media\";\n        ErrMsg: Label 'No images stored for the selected item.';\n    begin\n        if Item.Picture.Count() = 0 then\n            Error(ErrMsg);\n        for i := 1 to Item.Picture.Count() do begin\n            if TenantMedia.Get(Item.Picture.MediaId()) then begin\n                TenantMedia.CalcFields(Content);\n                if TenantMedia.Content.HasValue() then begin\n                    FileName := Item.\"No.\" + '_' + Format(i) + GetImageExtension(TenantMedia);\n                    TenantMedia.Content.CreateInStream(FileInStream);\n                    DownloadFromStream(FileInStream, '', '', '', FileName);\n                end;\n            end;\n        end;\n    end;\n\n    procedure GetImageExtension(var TenantMedia: record \"Tenant Media\"): Text   \n    begin\n        case TenantMedia.\"Mime Type\" of\n        'image/jpeg': exit('.jpg');\n        'image/bmp': exit('.bmp');\n        'image/png': exit('.png');\n        'image/gif': exit('.gif');\n        'image/tiff': exit('.tiff');\n        'image/wmf': exit('.wmf');\n        end\n    end;\n```", "```\nprocedure CreateTextFile(FileName: Text)\nvar\n    InStr: InStream;\n    OutStr: OutStream;\n    TempBlob: Codeunit \"Temp Blob\";\n    CR: char;\n    LF: char;\nbegin\n    CR := 13;\n    LF := 10;\n    TempBlob.CreateOutStream(OutStr);        \n    OutStr.WriteText('First line'+ CR + LF);\n    OutStr.WriteText('Second line'+ CR + LF);\n    OutStr.WriteText('Third line'+ CR + LF);        \n    TempBlob.CreateInStream(InStr);\n    DownloadFromStream(InStr, '', '', '', FileName); \nend;\n```", "```\nprocedure UploadAttachment()\n    var\n        Attachment: Record Attachment;\n        outStr: OutStream;\n        inStr: InStream;\n        tempfilename: text;\n        FileMgt: Codeunit \"File Management\";\n        DialogTitle: Label 'Please select a File...';\n    begin\n        if UploadIntoStream(DialogTitle, '', 'All Files (*.*)|*.*', tempfilename, inStr) then \n        begin\n            Attachment.Init();\n            Attachment.Insert(true);\n            Attachment.\"Storage Type\" := Attachment.\"Storage Type\"::Embedded;\n            Attachment.\"Storage Pointer\" := '';\n            Attachment.\"File Extension\" := FileMgt.GetExtension(tempfilename);\n            Attachment.\"Attachment File\".CreateOutStream(outStr);\n            CopyStream(outStr, inStr);\n            Attachment.Modify(true);\n        end;\n    end;\n```", "```\nprocedure OpenAttachment(AttachmentEntryNo: Integer)\n    var\n        Attachment: record Attachment;\n        inStr: InStream;\n        tempfilename: text;\n        ErrorAttachment: Label 'File not available.';\n    begin\n        if Attachment.get(AttachmentEntryNo) then\n            if Attachment.\"Attachment File\".HasValue then begin\n                Attachment.CalcFields(\"Attachment File\");\n                Attachment.\"Attachment File\".CreateInStream(inStr);\n                tempfilename := CreateGuid() + '.' + Attachment.\"File Extension\";\n                DOWNLOADFROMSTREAM(inStr, 'Save file', '', 'All Files (*.*)|*.*', \n                   tempfilename);\n            end\n            else\n                Error(ErrorAttachment);\n    end;\n```", "```\ntable 50120 MyBlobTable\n{\n    DataClassification = CustomerContent;   \n    fields\n    {\n        field(1;ID; Integer)\n        {\n            DataClassification = CustomerContent;           \n        }\n\n        field(2; BlobField; Blob)\n        {\n            DataClassification = CustomerContent;\n        }\n    }\n\n    keys\n    {\n        key(PK; ID)\n        {\n            Clustered = true;\n        }\n    }\n\n    procedure SetBlobValue(value: Text)\n    var\n        outStr: OutStream;\n    begin\n        BlobField.CreateOutStream(outStr);\n        outStr.WriteText(value);\n    end;\n\n    procedure GetBlobValue(value: Text)\n    var\n        inStr: InStream;\n    begin\n        CalcFields(BlobField);\n        if BlobField.HasValue() then\n        begin\n            BlobField.CreateInStream(inStr);\n            inStr.ReadText(value);\n        end\n        else\n            value := 'No value on the BLOB field';\n    end;   \n}\n```", "```\nxmlport 50100 MyXmlportImportCustomer\n{\n    Direction = Import;\n    Format = VariableText;\n    FieldSeparator = ';';\n    RecordSeparator = '<LF>';\n    schema\n    {\n        textelement(NodeName1)\n        {\n            tableelement(Customer; Customer)\n            {\n                fieldattribute(No; Customer.\"No.\")\n                {                   \n                }\n                fieldattribute(Name; Customer.Name)\n                {\n                }\n                fieldattribute(Address;Customer.Address)\n                {\n                }\n                fieldattribute(City;Customer.City)\n                {\n                }\n                fieldattribute(Country;Customer.\"Country/Region Code\")\n                {\n                    trigger OnAfterAssignField()                   \n                    begin\n                      //Executed after a field has been assigned a value and before it is validated and imported.   \n                    end;\n                }\n            }\n        }\n    }\n}\n```", "```\nprocedure RunXMLportImport()\n    var\n        FileInstream: InStream;\n        FileName: Text;\n    begin\n        UploadIntoStream('','','',FileName,FileInstream);\n        Xmlport.Import(Xmlport::MyXmlportImportCustomer,FileInStream);\n        Message('Import Done successfully.');\n    end;\n```", "```\nprocedure RunXMLportExport()\n    var\n        TempBlob: Codeunit \"Temp Blob\";\n        FileName: Text;\n        FileOutStream: OutStream;\n        FileInStream: InStream;\n        outputFileName: Text;\n    begin\n        TempBlob.CREATEOUTSTREAM(FileOutStream);\n        Xmlport.Export(Xmlport::MyXmlportImportCustomer, FileOutStream);\n        TempBlob.CREATEINSTREAM(FileInStream);\n        outputFileName := 'MyOutputFile.xml';\n        DownloadFromStream(FileInStream,'','','',outputFileName); \n       //The output is saved in the default browser's Download folder\n    end;\n```", "```\npage 50101 \"My Role Center\"\n{\n    PageType = RoleCenter;\n\n    layout\n    {\n        area(rolecenter)\n        {\n            part(SalesPerformance; \"Sales Performance\")\n            {\n                ApplicationArea = All;\n                Visible = true;\n            }\n\n            part(MyCustomers; \"My Customers\")\n            {\n                ApplicationArea = All;\n                Visible = true;\n            }\n\n            part(News;\"Headline RC Business Manager\")\n            {\n                ApplicationArea = All;\n                Visible = true;\n            }\n        }\n    }   \n}\n```", "```\npageextension 50100 SalesManagerRoleCenterExt_SD extends \"Sales Manager Role Center\"\n{\n    layout\n    {\n        addlast(Content)\n        {\n            part(MyNews; MyRoleCenterHeadline)\n            {\n                ApplicationArea = All;\n                Visible = true;\n            }\n        }\n    }\n\n    actions\n    {   \n         addlast(Sections)\n         {\n            group(\"My Customers\")\n            {               \n                 action(\"Customer Ledger Entries\")\n                {\n                    RunObject = page \"Customer Ledger Entries\";\n                    ApplicationArea = All;\n                }\n            }\n         }\n    }         \n}\n```", "```\npage 50100 \"MyRoleCenterHeadline\"\n{\n    PageType = HeadLinePart;\n    layout\n    {\n        area(content)\n        {\n            field(Headline1; text001)\n            {\n                ApplicationArea = all;\n            }\n\n            field(Headline2; text002)\n            {\n                ApplicationArea = all;\n                trigger OnDrillDown()\n                var\n                    DrillDownURL: Label 'http://www.demiliani.com';\n                begin\n                    Hyperlink(DrillDownURL)\n                end;\n            }\n\n            field(Headline3; text003)\n            {\n                ApplicationArea = all;\n            }\n\n            field(Headline4; text004)\n            {\n                ApplicationArea = all;\n                // Determines visibility while the page is open (custom criteria)\n                Visible=showHeadline4;\n            }       \n        }\n    }\n\n    var\n        text001: Label 'This is Headline 1';\n        text002: Label 'This is Headline 2 (click for details)';\n        text003: Label 'This is Headline 3';\n        text004: Label 'This is Headline 4';\n        showHeadline4: Boolean;\n\n        trigger OnOpenPage()\n        var\n           myInt: Integer;\n        begin\n            showHeadline4 := true;\n        end;\n}\n```", "```\npageextension 50101 MyNewBCHeadline extends \"Headline RC Business Manager\"\n{\n    layout\n    {\n        addafter(Control4)\n        {\n            field(newHeadlineText;newHeadlineText)\n            {\n                ApplicationArea = all;\n            }\n        }\n    }\n\n    var\n        newHeadlineText: Text;\n\n        trigger OnOpenPage()\n        var\n            HeadlineMgt : Codeunit \"Headline Management\";\n        begin\n            //Set Headline text           \n            newHeadlineText := 'This is my new Business Central Headline for ' + HeadlineMgt.Emphasize('Packt Publishing');\n        end;\n\n}\n```", "```\nlocal procedure ImportXML()\n    var\n        TempBlob : Codeunit \"Temp Blob\";\n        TargetXmlDoc : XmlDocument;\n        XmlDec : XmlDeclaration;\n        Instr: InStream;\n        filename: Text;\n    begin\n        // Create the Xml Document\n        TargetXmlDoc := XmlDocument.Create;\n        xmlDec := xmlDeclaration.Create('1.0','UTF-8','');\n        TargetXmlDoc.SetDeclaration(xmlDec);\n\n        // Create an Instream object & upload the XML file into it              \n        TempBlob.CreateInStream(Instr);\n        filename := 'data.xml';       \n        UploadIntoStream('Import XML','','',filename,Instr);\n\n        // Read stream into new xml document       \n        Xmldocument.ReadFrom(Instr, TargetXmlDoc);    \n    end;\n```", "```\nlocal procedure XMLDocumentCreation()\n    var\n        xmldoc: XmlDocument;\n        xmlDec: XmlDeclaration;\n        node1: XmlElement;\n        node2: XmlElement;\n    begin\n        xmldoc := XmlDocument.Create();\n        xmlDec := xmlDeclaration.Create('1.0','UTF-8','');\n        xmlDoc.SetDeclaration(xmlDec);\n        node1:= XmlElement.Create('node1');\n        xmldoc.Add(node1);\n        node2 := XmlElement.Create('node2');\n        node2.SetAttribute('ID','3');\n        node1.Add(node2);\n    end;\n```", "```\nprocedure CreateJsonOrder(OrderNo: Code[20])\n    var\n        JsonObjectHeader: JsonObject;\n        JsonObjectLines: JsonObject;\n        JsonOrderArray: JsonArray;\n        JsonArrayLines: JsonArray;\n        SalesHeader: Record \"Sales Header\";\n        SalesLines: Record \"Sales Line\";\n\n    begin\n        //Retrieves the Sales Header\n        SalesHeader.Get(SalesHeader.\"Document Type\"::Order,OrderNo);\n        //Creates the JSON header details\n        JsonObjectHeader.Add('sales_order_no', SalesHeader.\"No.\");\n        JsonObjectHeader.Add(' bill_to_customer_no', SalesHeader.\"Bill-to Customer No.\");     \n        JsonObjectHeader.Add('bill_to_name', SalesHeader.\"Bill-to Name\");\n        JsonObjectHeader.Add('order_date', SalesHeader.\"Order Date\");\n        JsonOrderArray.Add(JsonObjectHeader);\n\n        //Retrieves the Sales Lines\n        SalesLines.SetRange(\"Document Type\", SalesLines.\"Document Type\"::Order);\n        SalesLines.SetRange(\"Document No.\", SalesHeader.\"No.\");\n        if SalesLines.FindSet then\n        // JsonObject Init\n        JsonObjectLines.Add('line_no', '');\n        JsonObjectLines.Add('item_no', '');\n        JsonObjectLines.Add('description', '');\n        JsonObjectLines.Add('location_code', '');\n        JsonObjectLines.Add('quantity', '');\n        repeat\n            JsonObjectLines.Replace('line_no', SalesLines.\"Line No.\");\n            JsonObjectLines.Replace('item_no', SalesLines.\"No.\");            \n            JsonObjectLines.Replace('description', SalesLines.Description);\n            JsonObjectLines.Replace('location_code', SalesLines.\"Location Code\");\n            JsonObjectLines.Replace('quantity', SalesLines.Quantity);\n            JsonArrayLines.Add(JsonObjectLines);\n        until SalesLines.Next() = 0;\n        JsonOrderArray.Add(JsonArrayLines);\n    end;\n```", "```\n[\n    {\n        \"sales_order_no\": \"SO1900027\",\n        \"bill_to_customer_no\": \"C001435\",\n        \"bill_to_name\": \"Packt Publishing\",\n        \"order_date\": \"2019-03-23\"\n    },\n    [\n        {\n            \"line_no\": \"10000\",\n            \"item_no\": \"IT00256\",\n            \"description\": \"Dynamics 365 Business Central Development Guide\",\n            \"location_code\": \"MAIN\",\n            \"quantity\": 30\n        },\n        {\n            \"line_no\": \"20000\",\n            \"item_no\": \"IT03465\",\n            \"description\": \"Mastering Dynamics 365 Business Central\",\n            \"location_code\":\"MAIN\",                                 \n            \"quantity\": 27\n        }\n    ]\n]\n```", "```\npageextension 50100 CustomerCardExt extends \"Customer Card\"\n{\n    layout\n    {\n        modify(Name)\n        {\n            trigger OnAfterValidate()\n            var\n                TranslationManagement: Codeunit TranslationManagement;\n            begin\n                if Name.EndsWith('.com') then begin\n                    if Confirm('Do you want to retrieve company details?', false) then\n                        TranslationManagement.LookupAddressInfo(Name, Rec);\n                end;\n            end;\n        }\n    }\n}\n```", "```\ncodeunit 50100 TranslationManagement\n{\n    procedure LookupAddressInfo(Name: Text; var Customer: Record Customer)\n    var\n        Client: HttpClient;\n        Content: HttpContent;\n        ResponseMessage: HttpResponseMessage;\n        Result: Text;\n        JContent: JsonObject;\n        JDetails: JsonObject;\n        JLocations: JsonArray;\n        JLocation: JsonObject;\n        JPhones: JsonArray;\n        JPhone: JsonObject;\n    begin\n        Content.WriteFrom('{domain\":\"' + Name + '\"}');\n        Client.DefaultRequestHeaders().Add('Authorization', 'Bearer <YOUR KEY>');\n        Client.Post('https://api.fullcontact.com/v3/company.enrich', Content, ResponseMessage);\n        if not ResponseMessage.IsSuccessStatusCode() then\n            Error('Error connecting to the Web Service.');        \n        ResponseMessage.Content().ReadAs(Result);\n\n        if not JContent.ReadFrom(Result) then\n            Error('Invalid response from Web Service');\n        JDetails := GetTokenAsObject(JContent, 'details', 'Invalid response from Web Service');\n        JLocations := GetTokenAsArray(JDetails, 'locations', 'No locations available');\n        JLocation := GetArrayElementAsObject(JLocations, 0, 'Location not available');\n        JPhones := GetTokenAsArray(JDetails, 'phones', '');\n        JPhone := GetArrayElementAsObject(JPhones, 0, '');\n        Customer.Name := GetTokenAsText(JContent, 'name', '');\n        Customer.Address := GetTokenAsText(JLocation, 'addressLine1', '');\n        Customer.City := GetTokenAsText(JLocation, 'city', '');\n        Customer.\"Post Code\" := GetTokenAsText(JLocation, 'postalCode', '');\n        Customer.\"Country/Region Code\" := GetTokenAsText(JLocation, 'countryCode', '');\n        Customer.County := GetTokenAsText(JLocation, 'country', '');\n        Customer.\"Phone No.\" := GetTokenAsText(JPhone, 'value', '');\n    end;\n\n    procedure GetTokenAsText(JsonObject: JsonObject; TokenKey: Text; Error: Text): Text;\n    var\n        JsonToken: JsonToken;\n    begin\n        if not JsonObject.Get(TokenKey, JsonToken) then begin\n            if Error <> '' then\n                Error(Error);\n            exit('');\n        end;\n        exit(JsonToken.AsValue.AsText);\n    end;\n\n    procedure GetTokenAsObject(JsonObject: JsonObject; TokenKey: Text; Error: Text): JsonObject;\n    var\n        JsonToken: JsonToken;\n    begin\n        if not JsonObject.Get(TokenKey, JsonToken) then\n            if Error <> '' then\n                Error(Error);\n        exit(JsonToken.AsObject());\n    end;\n\n    procedure GetTokenAsArray(JsonObject: JsonObject; TokenKey: Text; Error: Text): JsonArray;\n    var\n        JsonToken: JsonToken;\n    begin\n        if not JsonObject.Get(TokenKey, JsonToken) then\n            if Error <> '' then\n                Error(Error);\n        exit(JsonToken.AsArray());\n    end;\n\n    procedure GetArrayElementAsObject(JsonArray: JsonArray; Index: Integer; Error: Text): JsonObject;\n    var\n        JsonToken: JsonToken;\n    begin\n        if not JsonArray.Get(Index, JsonToken) then\n            if Error <> '' then\n                Error(Error);\n        exit(JsonToken.AsObject());\n    end; \n}\n```", "```\nvar\n  RequestMessage : HttpRequestMessage;\n  Headers : HttpHeaders;\n  base64Convert: Codeunit \"Base64 Convert\";\n  AuthenticationString: Text;\nbegin\n  RequestMessage.GetHeaders(Headers);\n  AuthenticationString := StrSubstNo('%1:%2',YOURUSERNAME,YOURPASSWORD); \n  Headers.Add('Authorization', StrSubstNo('Basic %1',base64Convert.ToBase64(AuthenticationString)));\nend\n```", "```\ncodeunit 50104 TestInstallCodeunit\n{\n    Subtype = Install;\n    trigger OnInstallAppPerCompany()\n\n    var\n        TenantWebService: Record \"Tenant Web Service\";\n    begin\n        TenantWebService.Init();\n        TenantWebService.\"Object Type\" := TenantWebService.\"Object Type\"::Page;\n        TenantWebService.\"Object ID\" := 26;  //Vendor Card\n        TenantWebService.\"Service Name\" := 'VendorCardWS';\n        TenantWebService.Published := true;\n        TenantWebService.Insert(true);\n    end;\n}\n```", "```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ExportedData>\n    <TenantWebServiceCollection>\n        <TenantWebService>\n            <ObjectType>Page</ObjectType>\n            <ServiceName>VendorCardWS</ServiceName>\n            <ObjectID>26</ObjectID>\n            <Published>true</Published>\n        </TenantWebService>\n    </TenantWebServiceCollection>\n</ExportedData>\n```", "```\nhttp://postcodevalidator.azurewebsites.net/api/postcodevalidator?code=POSTCODE\n```", "```\n{\"Isvalid\":false}\n```", "```\n[EventSubscriber(ObjectType::Table, Database::Customer, 'OnAfterValidateEvent', 'Post Code', false, false)]\n    local procedure ValidatePostCodeViaAzureFunction(var Rec: Record Customer)\n    var\n        Client: HttpClient;\n        Response: HttpResponseMessage;\n        json: Text;\n        jsonObj: JsonObject;\n        token: JsonToken;\n        FunctionURL: Label 'http://postcodevalidator.azurewebsites.net/api/postcodevalidator?code=';\n        InvalidResponseError: Label 'Invalid Response from Azure Function.';\n        InvalidCodeError: Label 'Invalid Post Code. Please reinsert.';\n        TokenNotFoundError: Label 'Token not found in Json.';\n\n    begin\n        client.Get(FunctionURL + rec.\"Post Code\", Response);\n        //Reads the response content from the Azure Function\n        Response.Content().ReadAs(json);\n        if not jsonObj.ReadFrom(json) then\n            Error(InvalidResponseError);\n        //Retrieves the JSon token from the response\n        if not jsonObj.Get('IsValid',token) then\n            Error(TokenNotFoundError);\n        //Convert the Json token to a Boolean value. is TRUE the post code is valid.\n        if not token.AsValue().AsBoolean() then\n            Error(InvalidCodeError);\n    end;\n```", "```\nResponse.Content().ReadAs(json);\n```", "```\njsonObj.Get('IsValid',token)\n```", "```\nlocal procedure IsolatedStorageTest()\n    var\n        keyValue: Text;\n    begin\n        IsolatedStorage.Set('mykey','myvalue',DataScope::Company);\n        if IsolatedStorage.Contains('mykey',DataScope::Company) then\n        begin\n            IsolatedStorage.Get('mykey',DataScope::Company,keyValue);\n            Message('Key value retrieved is %1', keyValue);\n        end;\n        IsolatedStorage.Delete('mykey',DataScope::Company);\n    end;\n```", "```\nlocal procedure StoreLicense()\n    var\n        StorageKey: Text;\n        LicenseText: Text;\n        EncryptManagement: Codeunit \"Cryptography Management\";\n        License: Record License temporary;\n\n    begin\n        StorageKey := GetStorageKey();\n        LicenseText := License.WriteLicenseToJson();\n        if EncryptManagement.IsEncryptionEnabled() and EncryptManagement.IsEncryptionPossible() then\n            LicenseText := EncryptManagement.Encrypt(LicenseText);\n        if IsolatedStorage.Contains(StorageKey, DataScope::Module) then\n            IsolatedStorage.Delete(StorageKey);\n        IsolatedStorage.Set(StorageKey, LicenseText, DataScope::Module);\n    end;\n\n    local procedure GetStorageKey(): Text\n    var\n        //Returns a GUID\n        StorageKeyTxt: Label 'dd03d28e-4acb-48d9-9520-c854495362b6', Locked = true;\n    begin\n        exit(StorageKeyTxt);\n    end;\n\n    local procedure ReadLicense()\n    var\n        StorageKey: Text;\n        LicenseText: Text;\n        EncryptManagement: Codeunit \"Cryptography Management\";\n        License: Record License temporary;\n    begin\n        StorageKey := GetStorageKey();\n        if IsolatedStorage.Contains(StorageKey, DataScope::Module) then\n            IsolatedStorage.Get(StorageKey, DataScope::Module, LicenseText);\n        if EncryptManagement.IsEncryptionEnabled() and EncryptManagement.IsEncryptionPossible() then\n            LicenseText := EncryptManagement.Decrypt(LicenseText);\n        License.ReadLicenseFromJson(LicenseText);\n    end;\n```", "```\nlocal procedure StoreLicense()\nvar\n   licenseKeyValue: Text;\nbegin\n   if not EncryptionEnabled() then\n       IsolatedStorage.Set('LicenseKey',licenseKeyValue,DataScope::Module)\n   else         \n      IsolatedStorage.SetEncrypted('LicenseKey',licenseKeyValue,DataScope::Module)\nend;\n```", "```\ncontroladdin MyControlAddIn\n{\n    RequestedHeight = 300;\n    MinimumHeight = 300;\n    MaximumHeight = 300;\n    RequestedWidth = 700;\n    MinimumWidth = 700;\n    MaximumWidth = 700;\n    VerticalStretch = true;\n    VerticalShrink = true;\n    HorizontalStretch = true;\n    HorizontalShrink = true;\n    Scripts =\n        'script1.js',\n        'script2.js';\n    StyleSheets =\n        'style.css';\n    StartupScript = 'startupScript.js';\n    RecreateScript = 'recreateScript.js';\n    RefreshScript = 'refreshScript.js';\n    Images =\n        'image1.png',\n        'image2.png';\n\n    event MyEvent()\n\n    procedure MyProcedure()\n}\n```", "```\ninit();\nvar controlAddin = document.getElementById('controlAddIn');\ncontrolAddin.innerHTML = 'This is our D365BC control addin';\nMicrosoft.Dynamics.NAV.InvokeExtensibilityMethod(\"ControlReady\", []);\n```", "```\nfunction init()\n{\n    window.alert('INIT');\n}\n\nfunction HelloWorld()\n{\n    window.alert('HELLO WORLD FROM D365BC ADDIN');\n}\n```", "```\ncontroladdin DemoD365BCAddin\n{\n    RequestedHeight = 300;\n    MinimumHeight = 300;\n    MaximumHeight = 300;\n    RequestedWidth = 700;\n    MinimumWidth = 250;\n    MaximumWidth = 700;\n    VerticalStretch = true;\n    VerticalShrink = true;\n    HorizontalStretch = true;\n    HorizontalShrink = true;\n    Scripts = 'Scripts/main.js';\n    StyleSheets = 'CSS/stylesheet.css';\n    StartupScript = 'Scripts/start.js';\n\n    Images = 'Images/Avatar.png';\n    event ControlReady()\n    procedure HelloWorld()\n}\n```", "```\n#controlAddIn\n{\n    width: 300px;\n    margin-top: 25px;\n    border: 2px;\n    background-color: lightcoral;\n    box-sizing: border-box;\n    border: 2px solid red;\n}\n```", "```\npageextension 50100 ItemCardExt extends \"Item Card\"\n{\n    layout\n    {\n        addlast(Item)\n        {\n            group(AddinGroup)\n            {\n                Caption = 'Control Add-in';\n                usercontrol(DemoAddin; DemoD365BCAddin)\n                {\n                    ApplicationArea = All;\n                    trigger ControlReady()\n                    begin\n                        CurrPage.DemoAddin.HelloWorld();\n                    end;\n                }\n            }\n        }\n    }\n}\n```", "```\ncontroladdin D365BCPingPong\n{\n    Scripts = 'Scripts/pingpong.js';\n    StartupScript = 'Scripts/start.js';\n    HorizontalShrink = true;\n    HorizontalStretch = true;\n    MinimumHeight = 1;\n    MinimumWidth = 1;\n    RequestedHeight = 1;\n    RequestedWidth = 1;\n    VerticalShrink = true;\n    VerticalStretch = true;\n\n    procedure SetTimerInterval(milliSeconds: Integer);\n    procedure StartTimer();\n    procedure StopTimer();\n\n    event ControlAddInReady();\n    event PingPongError();\n    event TimerElapsed();\n}\n```", "```\n$(document).ready(function()\n{\n    initializeControlAddIn('controlAddIn');\n});\n```", "```\n\"use strict\"\nvar timerInterval;\nvar timerObject;\nfunction initializeControlAddIn(id) {\n    var controlAddIn = document.getElementById(id);\n    controlAddIn.innerHTML =\n        '<div id=\"ping-pong\">' +\n        '</div>';\n    pageLoaded();\n    Microsoft.Dynamics.NAV.InvokeExtensibilityMethod('ControlAddInReady', null);\n}\n\nfunction pageLoaded() {\n}\n\nfunction SetTimerInterval(milliSeconds) {\n    timerInterval = milliSeconds;\n}\n\nfunction StartTimer() {\n    if (timerInterval == 0 || timerInterval == null) {\n        Microsoft.Dynamics.NAV.InvokeExtensibilityMethod('PingPongError', ['No timer interval was set.']);\n        return;\n    }\n    timerObject = window.setInterval(ExecuteTimer, timerInterval);\n}\n\nfunction StopTimer() {\n    clearInterval(timerObject);\n}\n\nfunction ExecuteTimer() {\n    Microsoft.Dynamics.NAV.InvokeExtensibilityMethod('TimerElapsed', null);\n}\n```", "```\npageextension 50100 ItemCardExt extends \"Item Card\"\n{\n    layout\n    {\n        addlast(Item)\n        {\n            group(userControlTimer)\n            {\n                usercontrol(D365BCPingPong; D365BCPingPong)\n                {\n                    ApplicationArea = All;\n\n                    trigger TimerElapsed()\n                    begin\n                        //Stops the timer when the timer has elapsed\n                        CurrPage.D365BCPingPong.StopTimer();\n                        //Here you can have your code that must be executed every tick\n                        Message('Run your timer-based code here');\n                        CurrPage.D365BCPingPong.StartTimer();\n                    end;\n                }\n            }\n        }\n    }\n\n    trigger OnAfterGetCurrRecord()\n    begin\n        //Sets a timer interval every 10 seconds\n        CurrPage.D365BCPingPong.SetTimerInterval(10000);\n        CurrPage.D365BCPingPong.StartTimer();\n   end;\n}\n```", "```\npageextension 50100 PurchaseOrderExt extends \"Purchase Order\"\n{\n    trigger OnOpenPage()\n    var\n        Vendor: Record Vendor;\n        VendorNotification: Notification;\n        OpenVendor: Text;\n        TextNotification: Label 'This Vendor has a Balance due. Please check before sending orders.';\n        TextNotificationAction: Label 'Check balance due';\n    begin\n        Vendor.Get(\"Buy-from Vendor No.\");\n        Vendor.CalcFields(\"Balance Due\");\n        if Vendor.\"Balance Due\" > 0 then begin\n            VendorNotification.Message(TextNotification);\n            VendorNotification.Scope := NotificationScope::LocalScope;\n            VendorNotification.SetData('VendorNo', Vendor.\"No.\");\n           VendorNotification.AddAction(TextNotificationAction, Codeunit::ActionHandler, 'OpenVendor');\n           VendorNotification.Send();\n       end;\n   end;\n}\n```", "```\ncodeunit 50100 ActionHandler\n{  \n    procedure OpenVendor(VendorNotification: Notification)\n    var\n        VendorCode: Text;\n        Vendor: Record Vendor;\n        VendorCard: Page \"Vendor Card\";\n    begin\n        VendorCode := VendorNotification.GetData('VendorNo');\n        if Vendor.Get(VendorCode) then begin\n            VendorCard.SetRecord(Vendor);\n            VendorCard.Run();\n        end;\n    end;\n}\n```", "```\ncodeunit 50105 TaskCodeunit\n{\n    trigger OnRun()\n    var\n        Result: Dictionary of [Text, Text];\n        CustomerNo: Code[20];\n        CustomerSalesValue: Text;\n        NoOfSalesValue: Text;\n        NoOfItemsShippedValue: Text;\n    begin\n        CustomerNo := Page.GetBackgroundParameters().Get('CustomerNo');\n        if CustomerNo = '' then\n            Error('Invalid parameter CustomerNo');\n        if CustomerNo <> '' then begin\n            CustomerSalesValue := Format(GetCustomerSalesAmount(CustomerNo));\n            NoOfSalesValue := Format(GetNoOfItemsSales(CustomerNo));\n            NoOfItemsShippedValue := Format(GetNoOfItemsShipped(CustomerNo));\n            //sleep for demo purposes\n            Sleep((Random(5)) * 1000);\n        end;\n        Result.Add('TotalSales', CustomerSalesValue);\n        Result.Add('NoOfSales', NoOfSalesValue);\n        Result.Add('NoOfItemsShipped', NoOfItemsShippedValue);\n        Page.SetBackgroundTaskResult(Result);\n    end;\n\n    local procedure GetCustomerSalesAmount(CustomerNo: Code[20]): Decimal\n    var\n        SalesLine: Record \"Sales Line\";\n        amount: Decimal;\n    begin\n        SalesLine.SetRange(\"Document Type\", SalesLine.\"Document Type\"::Order);\n        SalesLine.SetRange(\"Sell-to Customer No.\", CustomerNo);\n        if SalesLine.FindSet() then\n            repeat\n                amount += SalesLine.\"Line Amount\";\n            until SalesLine.Next() = 0;\n        exit(amount);\n    end;\n\n    local procedure GetNoOfItemsSales(CustomerNo: Code[20]): Decimal\n    var\n        SalesLine: Record \"Sales Line\";\n        total: Decimal;\n    begin\n        SalesLine.SetRange(\"Document Type\", SalesLine.\"Document Type\"::Order);\n        SalesLine.SetRange(\"Sell-to Customer No.\", CustomerNo);\n        SalesLine.SetRange(Type, SalesLine.Type::Item);\n        if SalesLine.FindSet() then\n            repeat\n                total += SalesLine.Quantity;\n            until SalesLine.Next() = 0;\n        exit(total);\n    end;\n\n    local procedure GetNoOfItemsShipped(CustomerNo: Code[20]): Decimal\n    var\n        SalesShiptmentLine: Record \"Sales Shipment Line\";\n        total: Decimal;\n    begin\n        SalesShiptmentLine.SetRange(\"Sell-to Customer No.\", CustomerNo);\n        SalesShiptmentLine.SetRange(Type, SalesShiptmentLine.Type::Item);\n        if SalesShiptmentLine.FindSet() then\n        repeat\n            total += SalesShiptmentLine.Quantity\n        until SalesShiptmentLine.Next() = 0;\n        exit(total);\n    end;\n}\n```", "```\npageextension 50105 CustomerCardExt extends \"Customer Card\"\n{\n    layout\n    {\n        addlast(General)\n        {\n            field(SalesAmount; SalesAmount)\n            {\n                ApplicationArea = All;\n                Caption = 'Sales Amount';\n                Editable = false;\n            }\n            field(NoOfSales; NoOfSales)\n            {\n                ApplicationArea = All;\n                Caption = 'No. of Sales';\n                Editable = false;\n            }\n            field(NoOfItemsShipped; NoOfItemsShipped)\n            {\n                ApplicationArea = All;\n                Caption = 'Total of Items Shipped';\n                Editable = false;\n            }\n        }\n    }\n    var\n        // Global variable used for the TaskID\n        TaskSalesId: Integer;\n        // Variables for the sales amount field (calculated from the background task) \n        SalesAmount: Decimal;\n        NoOfSales: Decimal;\n        NoOfItemsShipped: Decimal;\n\n    trigger OnAfterGetCurrRecord()\n    var\n        TaskParameters: Dictionary of [Text, Text];\n    begin\n        TaskParameters.Add('CustomerNo', Rec.\"No.\");\n        CurrPage.EnqueueBackgroundTask(TaskSalesId, 50105, TaskParameters, 20000, PageBackgroundTaskErrorLevel::Warning);\n    end;\n\n    trigger OnPageBackgroundTaskCompleted(TaskId: Integer; Results: Dictionary of [Text, Text])\n    var\n        PBTNotification: Notification;\n    begin\n        if (TaskId = TaskSalesId) then begin\n            Evaluate(SalesAmount, Results.Get('TotalSales'));\n            Evaluate(NoOfSales, Results.Get('NoOfSales'));\n            Evaluate(NoOfItemsShipped, Results.Get('NoOfItemsShipped'));\n            PBTNotification.Message('Sales Statistics updated.');\n            PBTNotification.Send();\n        end;\n    end;\n\n    trigger OnPageBackgroundTaskError(TaskId: Integer; ErrorCode: Text; ErrorText: Text; ErrorCallStack: Text; var IsHandled: Boolean)\n    var\n        PBTErrorNotification: Notification;\n    begin\n        if (ErrorText = 'Invalid parameter CustomerNo') then begin\n            IsHandled := true;\n            PBTErrorNotification.Message('Something went wrong. Invalid parameter CustomerNo.');\n            PBTErrorNotification.Send();\n        end\n        else\n            if (ErrorText = 'Child Session task was terminated because of a timeout.') then begin\n                IsHandled := true;\n               PBTErrorNotification.Message('It took to long to get results. Try again.');\n               PBTErrorNotification.Send();\n            end\n    end;\n}\n```"]