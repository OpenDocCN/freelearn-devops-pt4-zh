- en: Advanced AL Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we developed a complete extension for Dynamics 365
    Business Central, and during development, we looked at many aspects of AL programming.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll focus on other development topics that you need to manage
    when developing real-world solutions for Dynamics 365 Business Central. These
    topics are important and useful, especially for improving the user experience
    and when you need to handle integrations with external services from AL.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding immutable keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling files with AL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling BLOBs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling XMLports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling XML and JSON objects with AL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and extending Role Centers and headlines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consuming web services and APIs from AL code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Azure functions from AL code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Isolated Storage to handle sensitive data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating control add-ins for Dynamics 365 Business Central
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling notifications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Page background tasks and asynchronous programming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding immutable keys
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the Dynamics 365 Business Central wave 2 release, all tables now have a
    (unique) immutable key (a `GUID` field) that can be used for integration scenarios
    and for replacing the old `RECORDID` property. This new field is called `SystemId`
    and it's a GUID data type field that specifies a unique, immutable (read-only)
    identifier for records in a table.
  prefs: []
  type: TYPE_NORMAL
- en: 'The new `SystemId` field (identified with the field number `2000000000` on
    every table object) has the following characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: It has a value for every record in a table.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can assign a value at insert time; otherwise, the platform automatically
    assigns one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once `SystemId` has been set, it cannot be changed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is always a unique secondary key in the `SystemId` field.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As a platform rule, modifying `SystemId` of an existing record is not allowed.
    The `INSERT` function now has a new override:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`SystemId` can be manually specified when inserting a new record, as in the
    following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now use the `GetBySystemId` function to retrieve a record via its `SystemId`,
    as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also set table relations by using the new `SystemId` field, as in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `Integration Record` table before version 15 has GUIDs for records. The
    upgrade process to Dynamics 365 Business Central version 15 will use these values
    to initialize the new `SystemId` field. In the future, the `Integration Record`
    table will be declared obsolete. The `SystemID` field is also useful on API pages.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll see how to handle files with AL in an **s****oftware
    as a service** (**SaaS**) environment.
  prefs: []
  type: TYPE_NORMAL
- en: Handling files with AL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with files is one of the tricky points with Dynamics 365 Business Central.
    While in the on-premises version you have full access to your local resources
    and a filesystem, in the SaaS version of Dynamics 365 Business Central, things
    are different. Here, you don't have a filesystem and you don't have access to
    local resources (all processes runs in Microsoft's data centers).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you create a function, you declare a `File` variable and then you invoke
    one of the common file management methods (such as `Create`, which creates and
    opens an ASCII or binary file), and this is the error that Visual Studio Code
    spits out:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/673d3d70-d729-454e-b741-8d80612ab5af.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This error occurs because the extension you''re trying to create targets the
    Dynamics 365 Business Central SaaS environment by default (`"target": "Extension"`
    in the `app.json` file).'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you add `"target": "Internal"` to your `app.json` file (in this way, you''re
    declaring that your extension is for the on-premise world only), then the error
    disappears and you can use the classic `File` object methods, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e0741ea7-a5a7-43c5-a2a0-7260d3971332.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The same thing happens if you use the `File Management` codeunit to handle
    files. Some of its methods cannot be used in an SaaS extension:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f295c1a4-93fd-49af-afaf-241d370b9fe1.png)'
  prefs: []
  type: TYPE_IMG
- en: To handle files in the cloud environment, you need to use **Streams** (the `InStream`
    and `OutStream` objects).
  prefs: []
  type: TYPE_NORMAL
- en: The `InStream` and `OutStream` data types are generic stream objects used for
    reading from or writing to files and BLOBs.
  prefs: []
  type: TYPE_NORMAL
- en: 'More information about these objects can be found at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/instream/instream-data-type](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/instream/instream-data-type)
    [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/outstream/outstream-data-type](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/outstream/outstream-data-type)'
  prefs: []
  type: TYPE_NORMAL
- en: 'To upload a file from the client computer to a server-side stream object, you
    need to call the `UploadIntoStream` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The method''s parameters are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DialogTitle` (string): This is the text displayed in the title bar of the
    file selection dialog box. This parameter is not supported by the web client (the
    title is determined by the user''s browser).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FromFolder` (string): This is the path of the folder that is displayed in
    the file selection dialog box. This is the default folder, but the user can browse
    to any available location. This parameter is not supported by the web client (by
    default, the browser uses the folder that was last accessed).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FromFilter` (string): This is the type of file that can be uploaded to the
    server. In the Windows client, the type is displayed in the upload dialog box,
    so the user can only select files of the specified type. For the web client, this
    filter is not supported in the user interface. The user can try to upload any
    file type but an error occurs if the file is not as the specified type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FromFile` (text): This is the default file to upload to the service. The user
    can change the file. This parameter is not supported by the web client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`InStream`: This is the `InStream` object to load data in.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More details about the method can be found at [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/file/file-uploadintostream-method](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/file/file-uploadintostream-method).
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, this is a function that loads an image file from the client
    side (using an `InStream` object and `UploadIntoStream` to load the client file
    into the `InStream` object) and adds it as an `Item` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'As another example, this is a function that reads a CSV file that contains
    `Item` details into an `InStream` object, loads its content into the `CSV Buffer`
    table, and then updates the `Item` fields accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To download a file from the server side (the SaaS environment) to the client
    side (the user machine), you need to use the `DownloadFromStream` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The method''s parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`InStream`: The `InStream` object ([https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/instream/instream-data-type](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/instream/instream-data-type))
    contains the file data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DialogTitle` string ([https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/string/string-data-type](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/string/string-data-type)):
    This is the title that you want to display in the dialog box for downloading the
    file. This parameter is not supported by the web client (here, the title is determined
    by the end user''s browser).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ToFolder` string ([https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/string/string-data-type](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/string/string-data-type)):
    This is the default folder in which to save the downloaded file. The folder name
    is displayed in the dialog box for the download, and the folder can be changed
    by the user. This parameter is not supported by the web client (because default
    files are saved to the default download location that is configured in the end
    user''s browser).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ToFilter` string ([https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/string/string-data-type](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/string/string-data-type)):
    This is the type of file that can be downloaded to the client. The type is displayed
    in the dialog box for downloading the file. This parameter is not supported by
    the web client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ToFile` text ([https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/text/text-data-type](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/text/text-data-type)):
    This is the name assigned to the downloaded file. This value can be changed by
    the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More information about this method can be found at [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/file/file-downloadfromstream-method](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/file/file-downloadfromstream-method).
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, this code exports the images associated with an `Item` card
    as the `MediaSet` type. It uses `DownloadFromStream` to download the file to the
    client. The images are retrieved from the `Tenant Media` table and saved with
    a filename made up of `Item Number`, the image index, and the image extension
    (the `GetImageExtension` function retrieves the image file extension according
    to its `Mime Type`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If you need to create a file from Dynamics 365 Business Central, you need to
    create it on the server side using the new `Temp Blob` codeunit defined in the
    `System Application` and `OutStream` objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an example of an AL function that receives a filename as input, creates
    a text file with three lines, and downloads it to the client side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: With Dynamics 365 Business Central, you cannot directly save a file to a local
    folder (a local machine or network folder). To perform this action, you need to
    use something different, such as Azure Functions (we'll see that later in this
    chapter).
  prefs: []
  type: TYPE_NORMAL
- en: With the Dynamics 365 Business Central wave 2 release, the old `TempBlob` table
    is deprecated and has been replaced by some system codeunits (`Temp Blob`, `Persistent
    Blob`, and `Temp Blob List`).
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you saw how to use streams to handle files in Dynamics 365
    Business Central. In the next section, we'll see how to handle attachments to
    documents and entities in Dynamics 365 Business Central.
  prefs: []
  type: TYPE_NORMAL
- en: Handling attachments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Attachments are files that you can link to entities or documents in Dynamics
    365 Business Central. Two main tables are used to store attachments:'
  prefs: []
  type: TYPE_NORMAL
- en: Document attachment (`ID = 1173`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attachment (`ID = 5062`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To store an attachment in these tables and then download an attachment from
    these tables, you need to use the previously mentioned `UploadIntoStream` and
    `DownloadFromStream` methods and load the BLOB field by using `Streams`.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of a function that uploads a file to the `Attachment` table is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'An example of a function that downloads a file from the `Attachment` table
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We can use the same process for the `Document Attachment` table; you've only
    to add the reference to the `attachment` record to the document itself.
  prefs: []
  type: TYPE_NORMAL
- en: We've seen how to handle attachments (a useful feature to add to your extensions).
    In the next section, we'll see how to read and write data to and from BLOB fields.
  prefs: []
  type: TYPE_NORMAL
- en: Reading and writing text data to and from BLOB fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To read data from and write text data to a BLOB field, you need to use the `InStreams`
    and `OutStreams` objects as previously described.
  prefs: []
  type: TYPE_NORMAL
- en: 'The two methods in the following code read and write text data from and to
    a `BLOB` field defined in a custom table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have defined a table with a BLOB field and we have created two methods
    for reading and writing data to this BLOB field:'
  prefs: []
  type: TYPE_NORMAL
- en: The `SetBlobValue` function writes data (passed as input) to a BLOB field.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `GetBlobValue` function reads data from a BLOB field.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With these two methods, we've achieved the goal to read and write text to our
    BLOB field. In the next section, we'll see how to use XMLports from AL.
  prefs: []
  type: TYPE_NORMAL
- en: Using XMLports in AL code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we said in [Chapter 2](215c2304-db18-4145-bb3f-8c10cdca949d.xhtml), *Mastering
    a Modern Development Environment*, **XMLports** are objects used to import and
    export data between Dynamics 365 Business Central and external data sources (this
    is managed by the `Direction` property, which can be set to `Import`, `Export`,
    or `Both`). Data can be imported or exported in XML or CSV (text) format (the `Format`
    property can be set to `Xml`, `Variable Text`, or `Fixed Text`).
  prefs: []
  type: TYPE_NORMAL
- en: XMLport properties are detailed at [https://docs.microsoft.com/en-us/dynamics-nav/xmlport-properties](https://docs.microsoft.com/en-us/dynamics-nav/xmlport-properties).
    [](https://docs.microsoft.com/en-us/dynamics-nav/xmlport-properties) XMLport triggers
    are detailed at [https://docs.microsoft.com/en-us/dynamics-nav/xmlport-triggers](https://docs.microsoft.com/en-us/dynamics-nav/xmlport-triggers).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, consider the sample XMLport defined in [Chapter 4](a5f2cdb5-019d-4b63-bc12-4b51b3c617f2.xhtml),
    *Extension Development Fundamentals*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: To execute an XMLport in Dynamics 365 Business Central, you need to run it from
    a page or a codeunit object (you cannot directly run it). XMLport request pages
    (used to set filters or insert parameters) in the Dynamics 365 Business Central
    web client are not supported.
  prefs: []
  type: TYPE_NORMAL
- en: 'To execute an XMLport in Dynamics 365 Business Central to import data from
    a file, you need to use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Here, the file is loaded into an `InStream` object and then the XMLport is executed
    by passing the `InStream` object as input.
  prefs: []
  type: TYPE_NORMAL
- en: 'To execute an XMLport in Dynamics 365 Business Central to export data to a
    file, you need to use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have seen how to use XMLports from AL code to import or export data.
    In the next section, we'll see how to create and extend Role Centers in Dynamics
    365 Business Central.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and extending Role Centers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a user logs in to Dynamics 365 Business Central, they are presented with
    a page that shows information and actions tailored to their role inside the company.
    This page is called a **Role Center**, and it's an integral part of the role-tailored
    experience of the application.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamics 365 Business Central offers about 20 Role Centers out of the box (as
    standard) that you can extend and customize, and you can create new Role Centers.
  prefs: []
  type: TYPE_NORMAL
- en: 'A Role Center is a page that has the `PageType` property set to `RoleCenter`.
    The page structure is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5a4e6a9b-83ab-4ca0-ab67-00a4a3b89e22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the structure diagram, the sections are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Section 1 is the **Navigation Menu** area (one or more items that, when clicked,
    show other sub-menus). This is used to provide access to the relevant entities
    for the role to which this Role Center page is assigned.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Section 2 is the **Navigation Bar** area, which displays a list of links to
    other pages that will be opened in the Content area. This is normally used to
    add links to the user's most useful entities for their business role.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Section 3 is the **Action** area, used to add links for running the most important
    tasks for this role (links to pages, reports, or codeunits).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Section 4 is the **Headline** area, used to display dynamically generated information
    about the business. We'll see more details about this area in the *Customizing
    the Headline* section of this chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Section 5 is the **Wide Cue** area, a set of cues that display numerical values
    about the business. This area is created with a `cuegroup` control on a page with
    `PageType = CardPart` and with the `Layout` property set to `wide`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Section 6 is the **Data Cue** area, used to provide a visual representation
    of aggregated business data (such as KPIs). This part is created with a `cuegroup`
    control on a page with `PageType = CardPart`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Section 7 is the `Action Cue` area, which shows tiles that link to some business
    tasks. This area is created with a `cuegroup` control on a page with `PageType
    = CardPart`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Section 8 is the **Chart** area, used to show information as charts (custom
    business chart control add-ins or embedded Power BI reports).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Section 9 is the **CardPart or ListPart page** area, used to display data from
    the application with a card or a list layout.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Section 10 is the *C***ontrol add-in** area, used for displaying custom content
    using HTML-based control add-ins (written in JavaScript).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A Role Center page can be created in AL using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have created a Role Center page with three **parts** (sub-pages).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can customize an existing Role Center page by creating a `pageextension`
    object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have extended the `Sales Manager Role Center` page by adding a new
    custom headline part to the content and a new action to open the `Customer Ledger
    Entries` page.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing or creating Role Centers is important because it gives your users a
    better user experience.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll see how we can customize the Headline part of a Role
    Center.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the Headline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As described earlier, the **Headline** is a new part introduced with the Dynamics
    365 Business Central web client that''s used to dynamically display important
    information about your business. Consider the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d3747504-fd2b-4e09-9379-39a75b7dbf73.png)'
  prefs: []
  type: TYPE_IMG
- en: This is an important part of the Dynamics 365 Business Central role-tailored
    user experience, and it's recommended to use and customize it to give your users a
    better experience.
  prefs: []
  type: TYPE_NORMAL
- en: A Headline is essentially a page that contains one or more fields (each field
    is a headline line) and with `PageType` set as `HeadlinePart`. This page is only
    visible inside a Role Center page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Dynamics 365 Business Central has nine standard headlines available:'
  prefs: []
  type: TYPE_NORMAL
- en: Headline RC Business Manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Headline RC Order Processor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Headline RC Accountant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Headline RC Project Manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Headline RC Relationship Management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Headline RC Administrator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Headline RC Team Member
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Headline RC Production Planner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Headline RC Service Dispatcher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also create your own Headlines by using AL and Visual Studio Code.
  prefs: []
  type: TYPE_NORMAL
- en: 'A Headline page can be defined in AL as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have defined a Headline page with four text fields that appears in
    the Dynamics 365 Business Central UI with the appropriate text.
  prefs: []
  type: TYPE_NORMAL
- en: In the second headline, we have handled the `OnDrillDown` event, and if you
    click on the second headline in this example, you're redirected to a URL. By handling
    this event, you can have a clickable headline that shows business details (for
    example, it can open a Dynamics 365 Business Central detail page). A headline
    page can also be hidden and visibility can be programmatically set by code (as
    in Headline 4 in the previous example).
  prefs: []
  type: TYPE_NORMAL
- en: 'The text displayed on a headline page can be formatted according to the following
    `Expression` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Expression TAG** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `<qualifier></qualifier>` | This specifies the title that appears above the
    headline. If it''s not present, the text `HEADLINE` will be used by default. |'
  prefs: []
  type: TYPE_TB
- en: '| `<payload></payload>` | This specifies the displayed headline text. |'
  prefs: []
  type: TYPE_TB
- en: '| `<emphasize></emphasize>` | The text on this tag is displayed with the biggest
    size. |'
  prefs: []
  type: TYPE_TB
- en: 'To modify an existing headline, you need to create a `pageextension` object
    and extend it. As an example, here we are modifying the standard `Headline RC
    Business Manager` page by adding a new headline panel with dynamically created
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Here, we've added a new field called `newHeadlineText`, and this field is populated
    in the `OnOpenPage` trigger of the Headline page with the information that we
    want to display to our users.
  prefs: []
  type: TYPE_NORMAL
- en: This section has explained how to customize the Headline of a Role Center page
    and how to show relevant business information to our users.
  prefs: []
  type: TYPE_NORMAL
- en: Handling XML and JSON files with the AL language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The AL language extension has native support for handling XML and JSON documents.
  prefs: []
  type: TYPE_NORMAL
- en: An XML document is represented by using the `XmlDocument` data type, as explained
    at [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/xmldocument/xmldocument-data-type](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/xmldocument/xmldocument-data-type).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code shows how you can import an XML file and load it into an
    `XmlDocument` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have created an `XmlDocument` object with an XML declaration, then
    we have created an `InStream` object to load the XML file, and we have read the
    `InStream` content into the `XmlDocument` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you reference the `TargetXmlDoc` object, you see all of the available methods
    for handling and manipulating the XML file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b535351e-ec2e-4b12-9e01-23c1a6b8a1d6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To create an XML document directly from AL code, you can use the `XmlDocument`
    and `XmlElement` classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This code creates an XML document with a root node (called `node1`) and a child
    node (called `node2`) with an ID attribute that has a value of `3` (`<node2 ID="3">`).
  prefs: []
  type: TYPE_NORMAL
- en: Native support for JSON documents is provided by using the `JsonObject` and
    `JsonArray` data types. Each of these data types contains the methods for handling
    a JSON file (both reading and writing) and for manipulating the JSON data (tokens).
  prefs: []
  type: TYPE_NORMAL
- en: 'A detailed explanation of all of the available methods for these data types
    can be found at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/jsonobject/jsonobject-data-type](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/jsonobject/jsonobject-data-type)
    [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/jsonarray/jsonarray-data-type](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/jsonarray/jsonarray-data-type)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code shows an example of how to create a JSON representation
    of a sales order document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This procedure receives an order number as input, retrieves the `Sales Header`
    and `Sales Line` details, and creates a JSON representation. The final result
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Obviously, you can also receive a JSON representation as input (for example,
    as a response from an API call) and handle it using the same data types.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we have seen how to handle JSON documents in AL by using the native JSON
    types.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll see a complete example on how to call an API, receive
    a JSON response, parse it, and save data to a Dynamics 365 Business Central entity.
  prefs: []
  type: TYPE_NORMAL
- en: Consuming web services and APIs from AL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The AL `HttpClient` object provides a base class for handling HTTP requests
    and responses from web resources (identified by a URI). With the `HttpClient`
    class, you can send `GET`, `DELETE`, `POST`, and `PUT` HTTP request messages (`HttpRequestMessage`
    with `HttpHeaders` and `HttpContent`) and receive an `HttpResponseMessage` object
    as a result of this request (including the status code and the response data).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find more details about all of the exposed methods at the following
    link: [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/httpclient/httpclient-data-type](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods-auto/httpclient/httpclient-data-type).'
  prefs: []
  type: TYPE_NORMAL
- en: As an example, in the following code, we create an extension that permits you
    to pull customers' address details by calling a service called `Fullcontact` ([https://www.fullcontact.com](https://www.fullcontact.com)).
    When you are registered for the free account, `Fullcontact` gives you an API with
    an access key that you can use to retrieve customer details by providing the customer's
    name.
  prefs: []
  type: TYPE_NORMAL
- en: 'What we want is the following: if you insert the domain name of a company in
    the `Name` field of the Customer Card (for example, [packt.com](https://www.packtpub.com/)),
    the system must call the API and retrieve the customer'' details for this domain
    name.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We create a `pageextension` object by extending the Customer Card, and in the
    `OnAfterValidate` trigger of the `Name` field, we call a custom method (called
    `LookupAddressInfo` and defined in a codeunit called `TranslationManagement`)
    to handle the data retrieval logic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The `TranslationManagement` codeunit is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `LookupAddressInfo` procedure calls the `Fullcontact` API (with an
    authorization header that contains the key provided by the API registration) by
    using the `HttpClient` object and sending a `POST` request to the provided URL
    by passing the `HttpContent` to the call (this content contains the name to check
    in the format as per API specifications).
  prefs: []
  type: TYPE_NORMAL
- en: The HTTP request returns an `HttpResponseMessage` object that contains the response
    message. If the HTTP response is successful, we read the content of the HTTP response
    message (which is a JSON string). Then, we parse this JSON string by using some
    helper methods (which you can see defined in the previous code) that permit us
    to read JSON tokens and retrieve their values in a specified format (or return
    an error string or a default value if the token data is not available).
  prefs: []
  type: TYPE_NORMAL
- en: 'With the `HttpClient` class, you can handle authentication to your web service
    or the API that you want to call. For example, this is how you can use basic authentication
    with `HttpClient`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In this section, we saw how to consume web services and APIs from AL and how
    to handle requests, responses, and authentication. In the next section, we'll
    see how to automatically publish objects as web services in Dynamics 365 Business
    Central when installing an extension.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing Dynamics 365 Business Central objects as web services from AL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When developing extensions, you may need to automatically publish a Dynamics
    365 Business Central object as a web service instance for external applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are essentially two different ways to automate this process:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an `Install` codeunit and, in this codeunit, create the web service instance
    by inserting a record in the `Tenant Web Service` table via AL code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an XML file with a `TenantWebService` definition.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With the first method, you define an `Install` codeunit, and (for example,
    in the `OnInstallAppPerCompany` trigger) you can create the web service definition
    by creating a new entry in the `Tenant Web Service` table, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have published the `Vendor Card` page as a web service with a SERVICE
    NAME of `VendorCardWS`. This web service will be visible in the `Web Services`
    page in Dynamics 365 Business Central, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5bf79e34-81ed-429b-a08e-f5ff06032d20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With the second method, you can use the `twebservices` snippet to create a
    `TenantWebService` XML definition file. The following screenshot shows this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c460768d-a07d-48f5-bb73-b2f16bfa313b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With the XML definition file, to publish the `Vendor Card` page as a web service,
    you have to write the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: This XML definition file will be part of your AL project extension's code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The two methods described here have the same effect when installing the extension:
    your web service will be published and visible on the `Web Services` page in Dynamics
    365 Business Central. But what happens when you uninstall the extension?'
  prefs: []
  type: TYPE_NORMAL
- en: When you uninstall the extension, if the web service is published using the
    XML definition file, it is automatically removed from the `Tenant Web Service`
    table, while if the web service is published directly via AL code, it's not removed
    from that table. If you need to automatically publish a web service from an extension
    at the installation phase, it's recommended to use the `TenantWebService` XML
    definition file.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll see how to use Azure Functions to execute serverless
    processes in the cloud and to replace standard .NET code.
  prefs: []
  type: TYPE_NORMAL
- en: Using Azure Functions to replace .NET code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Dynamics 365 Business Central, usage of .NET assemblies (the `DotNet` variable
    type) is supported only in an on-premise scenario. With Dynamics 365 Business
    Central in the cloud (SaaS), you cannot use DotNet objects (for security reasons)
    and the official way to replace a `DotNet` variable is by using an HTTP call to
    an **Azure function**.
  prefs: []
  type: TYPE_NORMAL
- en: '**Azure Functions** is a serverless compute service offered by the Azure platform
    that permits you to run code in the cloud without managing the infrastructure.
    We''ll talk about Azure Functions in more depth in [Chapter 14](3d538864-81c5-4077-9596-2a17aace1e3a.xhtml),
    *Monitoring, Scaling, and CI/CD with Azure Functions*, so here we''ll not see
    how to create an Azure function from scratch, but only how to call it from your
    extension''s code.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, imagine having an Azure function called `PostCodeValidator` that validates
    post codes. This function (of the `HttpTrigger` function type) receives a post
    code via a query string, validates it, and the function returns a JSON response
    with a Boolean value that indicates whether the post code is valid or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Azure function can be called via a query string with the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Here, `POSTCODE` is the post code to validate.
  prefs: []
  type: TYPE_NORMAL
- en: 'The JSON response message from the Azure function is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'For this example, we want to call this function in the `OnAfterValidate` event
    of the `Post Code` field of the `Customer` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a088d968-4deb-4ce9-b78e-a2a2849d558e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The code to call the Azure function from AL is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, by using the `HttpClient` object, we send an HTTP `GET` request to the
    Azure function URI by passing the requested code function''s parameter with the
    value of the `Post Code` field to validate. Then, we read the `HttpResponseMessage`
    content returned by the Azure function (which is a JSON object) with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'This method loads the `json` text variable from the HTTP response content.
    After that, we search for the `IsValid` token in the JSON object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: If the token is found, its value is saved into the `token` variable. We read
    its Boolean value and if it's false, an error is raised (`InvalidCodeError`).
  prefs: []
  type: TYPE_NORMAL
- en: We have seen how to call an Azure function and then how to read and handle its
    response. We'll talk in more depth about Azure Functions in [Chapter 13](45e3cb96-0df4-43be-89d0-697822f4b159.xhtml), *Serverless
    Business Processes with Business Central and Azure*.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll see how to use the Isolated Storage feature to handle
    and secure sensitive data from a Dynamics 365 Business Central extension.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Isolated Storage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Isolated Storage** is key-value-based storage that provides data isolation
    between extensions. Isolated Storage can be used to store data that must be preserved
    inside the extension scope, and this data is accessible via AL code. The `DataScope`
    option type identifies the scope of stored data in Isolated Storage.'
  prefs: []
  type: TYPE_NORMAL
- en: '`DataScope` is an optional parameter and the default value is `Module`. All
    possible values are listed in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Member** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `Module` | It indicates that the record is available in the scope of the
    app context. |'
  prefs: []
  type: TYPE_TB
- en: '| `Company` | It indicates that the record is available in the scope of the
    company within the app context. |'
  prefs: []
  type: TYPE_TB
- en: '| `User` | It indicates that the record is available for a user within the
    app context. |'
  prefs: []
  type: TYPE_TB
- en: '| `CompanyAndUser` | It indicates that the record is available for a user and
    specific company within the app context. |'
  prefs: []
  type: TYPE_TB
- en: 'To manage data in Isolated Storage, you have the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `[Ok := ] IsolatedStorage.**Set**(Key: String, Value: String, [DataScope:
    DataScope])` | This sets the value associated with the specified key within the
    extension. The optional `DataScope` parameter is the scope of the stored data.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `[Ok := ] IsolatedStorage.**Get**(Key: String, [DataScope: DataScope], var
    Value: Text)` | This gets the value associated with the specified key within the
    extension. The optional `DataScope` parameter is the scope of the data to retrieve.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `HasValue :=  IsolatedStorage.**Contains**(Key: String, [DataScope: DataScope])`
    | This determines whether the storage contains a value with the specified key
    within the extension. The optional `DataScope` parameter is the scope to check
    for the existence of the value with the given key. |'
  prefs: []
  type: TYPE_TB
- en: '| `[Ok := ] IsolatedStorage.**Delete**(Key: String, [DataScope: DataScope])`
    | This deletes the value with the specified key from the Isolated Storage within
    the extension. The optional `DataScope` parameter is the scope to remove the value
    with the given key. |'
  prefs: []
  type: TYPE_TB
- en: Isolated Storage is useful for storing sensitive data, user options, and license
    keys.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding code, we get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: In the first step, we save, in Isolated Storage, a key called `mykey` with a
    value of `myvalue` and `DataScope` set to `Company`. The key is visible in the
    scope of the company within the app context, so no other extensions can access
    this key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the second step, we check whether a key called `mykey` is saved in Isolated
    Storage with `DataScope` set to `Company`. If a match is found (key and scope),
    the key is retrieved (with the `Get` method) and the value is returned in the
    `keyValue` text variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the last step, we delete the key for this `DataScope`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As previously said, you could also use Isolated Storage to save license keys
    or license details for your extension. The following code shows how to export
    the records of a table called `License` to JSON, then how to encrypt the JSON
    value, and finally how to store the encrypted text in Isolated Storage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `License` table is declared as a temporary table. In this way, the
    data is isolated into the calling codeunit.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the Dynamics 365 Business Central wave 2 release, there are some changes related
    to secret management with Isolated Storage. Here are the details:'
  prefs: []
  type: TYPE_NORMAL
- en: In Dynamics 365 Business Central SaaS, sensitive data stored in Isolated Storage
    is always encrypted.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In Dynamics 365 Business Central on-premise, encryption is controlled by the
    end user (via the Data Encryption Management page):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If encryption is turned on, a secret stored in the Isolated Storage is automatically
    encrypted.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A secret that was inserted while encryption was turned off will remain unencrypted
    if encryption is turned on.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you turn off encryption, the secret will be decrypted.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: According to these changes, if you have an extension that works for Dynamics
    365 Business Central SaaS and on-premise and you're using Isolated Storage to
    store secrets, you need to check whether encryption is enabled (which is always
    true for SaaS) and then save the secret accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, a function that saves a license key to Isolated Storage and that works
    for Dynamics 365 Business Central SaaS and on-premise will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: With the `SetEncrypted` method, you can now automatically save a secret by using
    encryption (no more calls to the `Cryptography Management` codeunit).
  prefs: []
  type: TYPE_NORMAL
- en: We have seen how to use Isolated Storage to improve data security in our extensions.
    In the next section, we'll see how to create control add-ins.
  prefs: []
  type: TYPE_NORMAL
- en: Working with control add-ins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Control add-in** objects are a way to add custom functionalities (functions
    or UI customizations) to the Dynamics 365 Business Central client. A control add-in
    can interact with Dynamics 365 Business Central events and can raise events for
    your AL code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A control add-in can be defined in AL code by using the `tcontroladdin` snippet,
    which has the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: As you can see from the code snippet, when you define a `controladdin` object,
    you need to set the `Scripts` property to include the scripts of your control
    add-in (in a JavaScript file). These scripts can be local `.js` files or external
    files referenced via HTTP or HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: The `StartupScript` property permits you to call a script that must be executed
    when the page that hosts the `controladdin` object is loaded. You can style your
    `controladdin` object by using the `StyleSheet` property (which permits you to
    reference a CSS file) and the `Images` property (which permits you to load images
    into your add-in).
  prefs: []
  type: TYPE_NORMAL
- en: When defining the style of a `controladdin` object in Dynamics 365 Business
    Central, please always refer to the *Control Add-in Style Guide* at the following
    link: [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/devenv-control-addin-style](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/devenv-control-addin-style).
  prefs: []
  type: TYPE_NORMAL
- en: As a basic example, here we create a control add-in object that will be placed
    in a Dynamics 365 Business Central page (specifically, an Item Card).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `controladdin` object is composed of two JavaScript files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Start.js`, which contains the startup script and is loaded when the Dynamics
    365 Business Central object that contains the add-in starts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Main.js`, which contains the add-in business logic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Start.js` JavaScript file is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Here, we initialize the add-in object, we print some HTML text inside the add-in,
    and we use the `InvokeExtensibilityMethod` method to invoke the AL trigger on
    the page that contains the add-in.
  prefs: []
  type: TYPE_NORMAL
- en: More information about the `InvokeExtensibilityMethod` method can be found at [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods/devenv-invokeextensibility-method](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/methods/devenv-invokeextensibility-method).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Main.js` JavaScript file is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in Visual Studio Code, we create the `controladdin` object, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we can see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`VerticalStretch` specifies that the add-in can be enlarged vertically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VerticalShrink` specifies that the add-in can be made smaller vertically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HorizontalStretch` specifies that the add-in can be enlarged horizontally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HorizontalShrink` specifies that the add-in can be made smaller horizontally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MinimumHeight`/`MaximumHeight` specifies the minimum/maximum height that the
    control add-in can be shrunk or stretched to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MinimumWidth`/`MaximumWidth` specifies the minimum/maximum width that the
    control add-in can be shrunk or stretched to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RequestedHeight` and `RequestedWidth` specify the height and width of the
    add-in control inside the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `controladdin` object references the previously described scripts, and
    it can reference a stylesheet (CSS) file, where you can handle the appearance
    of the add-in. In this example, we have used a simple stylesheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'To add the `controladdin` object to the Item Card page, we create a `pageextension`
    object, and here we add a `usercontrol` field as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The `usercontrol` field triggers the `ControlReady` event, and from this event,
    we call the `HelloWord` method (defined in the `main.js` file).
  prefs: []
  type: TYPE_NORMAL
- en: 'The final result is the following. When the page is loaded, the `INIT` method
    is triggered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/73cca272-0aba-4758-8abb-16eb7b22efc8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is the HTML of the Dynamics 365 Business Central page, where you can see
    the control add-in in the `div` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2ccd5464-6207-4138-a801-a0cb0d87720c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, the add-in triggers the `ControlReady` event and our JavaScript `HelloWorld`
    function is executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/06f2037b-6f76-4db4-844c-16ecc5a92a0e.png)'
  prefs: []
  type: TYPE_IMG
- en: We have seen how to create visual control add-ins and how to use them inside
    a Dynamics 365 Business Central page. In the next section, we'll see how to create
    and use a timer-based control add-in.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a timer-based control add-in
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Control add-ins are useful also for creating timer-based logic inside a Dynamics
    365 Business Central page (which is called **ping-pong** logic) to execute business
    logic every *N* times.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our AL project, we define our `controladdin` object as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The `start.js` file contains the add-in initialization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The `pingpong.js` file contains the JavaScript business logic of our add-in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now insert our add-in object to a Dynamics 365 Business Central page
    (for example, the Item Card) and from here, we can call the add-in methods, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Here, we set a timer interval (for example, 10 seconds) and start the timer.
    When the timer tick has elapsed, the `TimerElapsed` trigger is called and your
    custom business logic is executed. When the `TimerElapsed` trigger is raised,
    it's important to stop the timer to avoid raising a new event while the message
    is still displayed (as you can see, we stop the timer, run the custom code, and
    then restart the timer).
  prefs: []
  type: TYPE_NORMAL
- en: More information about **control add-in** objects and properties can be found
    at [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/devenv-control-addin-object](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/devenv-control-addin-object).
  prefs: []
  type: TYPE_NORMAL
- en: A timer-based add-in is useful for executing timer-based operations or refreshing pages.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll see how to use notifications in Dynamics 365 Business
    Central to better handle errors and messages in the standard UI.
  prefs: []
  type: TYPE_NORMAL
- en: Notifications inside Dynamics 365 Business Central
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dynamics 365 Business Central permits you to programmatically send non-intrusive
    notifications to your users inside the web client user interface to display information,
    messages, or error notifications. These notifications are non-modal, so they don't
    require your users to stop working and perform some action on the notification
    message immediately. They can also be dismissed if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Notifications appear in the **notification bar** at the top of the page in which
    the user is currently working. The application can send multiple notifications
    to the user, and they will all appear in the notification bar in chronological
    order. They will remain in the notification bar until the user takes action on
    them, dismisses them or for the duration of the page instance.
  prefs: []
  type: TYPE_NORMAL
- en: As a developer, you can programmatically create notifications by using the `Notification`
    and `NotificationScope` AL objects.
  prefs: []
  type: TYPE_NORMAL
- en: As an example of how to use `Notifications` inside Dynamics 365 Business Central,
    we will create a notification in the `Purchase Order` page that appears if the
    selected `Vendor` has a balance due.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `pageextension` object is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'We are checking whether the vendor has a balance due. If so, a `Notification`
    object is created. A `Notification` object has a `Message` property (that defines
    the content of the notification that will appear in the UI) and `Scope`. Now, `Scope`
    defines where the message will appear to the user, and it could be one of the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`LocalScope` (default): The notification will appear on the user''s current
    page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GlobalScope` (not currently supported): The notification will appear regardless
    of which page the user is working on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When defining the `Notification` object, we use the `SetData` method to set
    a data property value to the notification (in this case, the `Vendor` number)
    and we use the `AddAction` method to add an action to the notification message
    (we want an action that immediately opens the `Vendor Card` page). The `AddAction`
    method starts a method called `OpenVendor`, defined in a codeunit called `ActionHandler`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The codeunit object for this is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Here, when the action inside the notification is clicked, the code retrieves
    the `VendorNo` parameter from the `Notification` object, retrieves the `Vendor`
    record, and opens the `Vendor Card` by passing the retrieved record.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you open a Purchase Order from Dynamics 365 Business Central and the selected
    vendor has a balance due, you will now see the following notification:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/21afe6f0-1557-49d1-bb79-81ab85c265b7.png)'
  prefs: []
  type: TYPE_IMG
- en: If you click on the Check balance due action inside the notification, the `Vendor
    Card` page with the selected vendor record is opened and the user can act accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Notifications are extremely important to use when you create extensions for
    Dynamics 365 Business Central because they will permit you to give a better experience
    to your users.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll see how to use asynchronous programming inside Dynamics
    365 Business Central.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding page background tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dynamics 365 Business Central version 15 introduces a new feature to handle
    asynchronous programming called **page background tasks**.
  prefs: []
  type: TYPE_NORMAL
- en: '**Page background tasks** permit you to define a read-only and long-running
    process on a page that can be executed asynchronously in a background thread (isolated
    from the parent session). You can start the task and continue working on the page
    without waiting for the task to complete. The following diagram (provided by Microsoft)
    shows the flow of a background task:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4d170a66-b44b-4fad-bd3c-236a9668ee30.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A page background task has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: It's a read-only session (it cannot write or lock the database).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be canceled and it has a default and maximum timeout.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Its lifetime is controlled by the current record (it is canceled when the current
    record is changed, the page is closed, or the session ends).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Completion triggers are invoked on the page session (such as updating page records
    and refreshing the UI).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be queued up.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The parameters passed to and returned from page background tasks are in the
    form of a `Dictionary<string,string>` object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The callback triggers cannot execute operations on the UI, except notifications
    and control updates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a limit on the number of background tasks per session (if the limit
    is reached, the tasks are queued).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To create a page background task, the basic steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a codeunit that contains the business logic to execute in the background.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On the page where the task must be started, do the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add code that creates the background task (`EnqueueBackgroundTask`).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Handle the task completion results by using the `OnPageBackgroundTaskCompleted`
    trigger (this is where you can update the page UI).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also use the `OnPageBackgroundTaskError` trigger to handle possible
    task errors.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Here is an example of how to implement the preceding logic. In the Customer
    Card, we want to execute a background task that calculates some sales statistics
    values for the selected customer without blocking the UI (in a more complex scenario,
    imagine retrieving this data from an external service).
  prefs: []
  type: TYPE_NORMAL
- en: Our calling page (`Customer Card`) passes a `Dictionary<string,string>` object
    (a key-value pair) to the background task with the key set to `CustomerNo` and
    the value set to the `No.` field of our selected Customer record. The task codeunit
    retrieves the `CustomerNo` value, calculates the total sales amount for this customer,
    the number of items sold, and the number of items shipped and returns a `Dictionary<string><string>`
    object with the key set to `TotalSales` and a value that is the calculated sales
    amount.
  prefs: []
  type: TYPE_NORMAL
- en: 'The task codeunit is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we create a `pageextension` object to extend the Customer Card to add
    the new `SalesAmount`, `NoOfSales`, and `NoOfItemsShipped` fields (calculated
    by the background task) and to add code to start the task and read the results.
    The `pageextension` object is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: In the `OnAfterGetCurrRecord` trigger, we add the parameters required to start
    our background task and call the `EnqueueBackgroundTask` method. The `EnqueueBackgroundTask`
    methodcreates and queues a background task that runs the specified codeunit (without
    a UI) in a read-only child session of the page session. If the task completes
    successfully, the `OnPageBackgroundTaskCompleted` trigger is invoked. If an error
    occurs, the `OnPageBackgroundTaskError` trigger is invoked. If the page is closed
    before the task completes, or the page record ID on the task changed, the task
    is canceled.
  prefs: []
  type: TYPE_NORMAL
- en: In the `OnPageBackgroundTaskCompleted` trigger, we retrieve the `TotalSales`
    parameter from the dictionary and the UI (the relative field on the page) is updated
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: We have seen how to use the new asynchronous programming features inside Dynamics
    365 Business Central pages. This is an important feature that improves general
    application performance in many scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered a lot of advanced topics and saw some tricks for
    implementing particular tasks with the AL language extension, especially how to
    handle files and pictures, using XMLports, creating and extending Role Centers
    and headlines, handling XML and JSON serializations, consuming web services and
    APIs via AL code, and publishing a web service from an extension. Apart from this,
    we can use Isolated Storage to store sensitive data in an extension and we learned
    how to create control add-ins, how to handle notifications, and how to use asynchronous
    programming features (page background tasks) in your extensions.
  prefs: []
  type: TYPE_NORMAL
- en: After reading this chapter, you're now able to create advanced customizations
    to improve general user experience and to handle different business tasks.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll see how to customize, develop, and publish reports
    for Dynamics 365 Business Central.
  prefs: []
  type: TYPE_NORMAL
