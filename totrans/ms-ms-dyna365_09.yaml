- en: Report Development with AL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, we have been introduced to and analyzed a vast variety of AL language
    objects, and we've seen how to develop simple to complex extensions with them.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will deep dive into a specific object and look at its properties,
    triggers, and methods and how to use it proficiently. This object is **the report
    object**.
  prefs: []
  type: TYPE_NORMAL
- en: An overview, with pros and cons, will be provided regarding which tool to use
    to design and develop datasets and layouts, such as Microsoft Word for Word layouts
    and Microsoft Report Builder for **Report Definition Language** (**RDL**) layouts.
    We will discuss the main shortcuts, tips, and tricks related to dataset development
    with Visual Studio Code and both Word and RDL layouts.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we aspire to provide you with the confidence you need to develop
    Dynamics 365 Business Central report extensions, explain how to make them perform
    to their best, and help you troubleshoot the most common issues in this area.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Anatomy of the AL report object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tools to use for Word and RDL layouts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting an existing C/AL report into AL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Feature limitation when developing an RDL or Word layout report
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding report performance considerations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anatomy of the AL report object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Requests for new reports come from every department and in many different forms.
    Most of the time, users have an idea in mind of how they would like the data to
    be shown.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nevertheless, a report developer should always keep in mind some important
    points. Everything is related to data:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Retrieval**: A good report developer should have a good knowledge of the
    business process (how data is created, modified, and deleted) and data topology
    (where data is stored). Data can be retrieved from heterogenous resources that
    cannot be directly stored in Dynamics 365 Business Central tables. As an example,
    you might want to run an HTTP call to a web service to gather some data outside
    the database and store it in a physical or temporary table before processing it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Processing**: Some of the data that''s presented could be the result of data
    aggregation, could be calculated from different fields, or could even be the results
    from a concatenation of values from different tables. The result of data retrieval
    and processing generates the dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Presentation**: Datasets are sent from the application to the Report Viewer
    component, which takes care of data rendering and presentation. Together with
    the dataset, a report definition file (`Report.rdlc`) is sent to the Report Viewer
    to build up the content of the report. The report definition file contains the
    metadata structure and rules to render the report. Despite its extension (`.rdlc`),
    this is actually an XML-formatted flat file. Tools such as the Report Builder
    or Visual Studio can digest the XML file and create a presentation of the report
    structure in a more human-readable way. Every action that''s taken in this designer
    has the consequence of editing and changing the XML file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With Dynamics 365 Business Central, it is also possible to design reports to
    perform only data retrieval and processing, typically committing changes in tables
    as a result of the process. No data is presented to the users, hence no layout
    is needed, and no dataset will be created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Reports can be grouped into two main categories: processing only and dataset-based.'
  prefs: []
  type: TYPE_NORMAL
- en: Reports that are processing only do not have any layout. They also typically
    do not have any columns defined in the dataset and are only used to process data.
    Quite often, the same result could be achieved using codeunit objects instead
    since these are just simple code repositories and do not have any graphical or
    **User Interface** (**UI**) interaction. To give you a simple example, you could
    create a processing-only report with a data item that loops all the customer records
    and prints a flat JSON file with the customer number, name, and email. The same
    could be achieved by implementing a codeunit with a function that declares an `IF
    CustomerRec FINDSET THEN REPEAT UNTIL NEXT=0` loop. Within this loop, it is possible
    to write a flat JSON file with exactly the same information.
  prefs: []
  type: TYPE_NORMAL
- en: 'The pros and cons of using a processing-only report or a codeunit have been
    tabulated here:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Processing Only Report** | **Codeunit** |'
  prefs: []
  type: TYPE_TB
- en: '| **Easy to Implement** | It''s faster. The data item looping construct is
    predefined. | There''s more development activity to build a loop. |'
  prefs: []
  type: TYPE_TB
- en: '| **Flexibility** | It''s limited to data item triggers. | It''s more flexible.
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Performance** | It has worse performance. | It has better performance.
    |'
  prefs: []
  type: TYPE_TB
- en: 'A report object has the following tree structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Request Page**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Columns**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Groups**:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fields**'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Actions**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dataset**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data items**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Properties**'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Triggers**'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Columns**:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Properties**'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Triggers**'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Labels**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Properties**'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layout**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RDL**'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Word**'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After installing the standard **AL Language extension** and **CRS AL Language
    extension tool**, we could use a `treport` or `treport` (CRS) snippet to create
    a prototype of a report and inspect all the different items related to the main
    content areas: the dataset and the request page. Layouts are just references to
    the corresponding output (an RDL and/or Word file) within the report objects,
    and these are created with tools other than Visual Studio Code. We will work with
    them later in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: After exploring the anatomy of a report object in AL, it is time to see the
    tools that are used in Word and RDL layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Tools to use for Word and RDL layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visual Studio Code does not have a valid extension—yet—that would replace the
    best-in-class RDL report editor, which is supported by the Dynamics 365 Business
    Central development team. With a release every six months, the application is
    always up to date and, at the time of writing, it deploys Report Viewer 2017 and
    the latest RDL 2016 schema-based syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'To develop an RDL layout report, you have two choices:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Report Builder for SQL Server 2016**: [https://www.microsoft.com/en-us/download/details.aspx?id=53613](https://www.microsoft.com/en-us/download/details.aspx?id=53613)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visual Studio 2017 with the Microsoft RDLC Report Designer for the Visual
    Studio extension installed**: [https://marketplace.visualstudio.com/items?itemName=ProBITools.MicrosoftRdlcReportDesignerforVisualStudio-18001](https://marketplace.visualstudio.com/items?itemName=ProBITools.MicrosoftRdlcReportDesignerforVisualStudio-18001)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To find out more, please visit the following official reference and this useful
    blog:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/deployment/system-requirement-business-central ](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/deployment/system-requirement-business-central)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://thinkaboutit.be/2019/01/how-do-i-configure-my-rdlc-layout-designers-for-vscode/](https://thinkaboutit.be/2019/01/how-do-i-configure-my-rdlc-layout-designers-for-vscode/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Word layout feature is built around the latest Aspose.Words ([https://products.aspose.com/words](https://products.aspose.com/words))
    component and is implemented in the application by the backend server team. Designing
    and editing must be done with a version of Microsoft Word that supports XML mappings.
    Minimum system requirements specify that we should use **Microsoft Word 2016**
    or later.
  prefs: []
  type: TYPE_NORMAL
- en: RDL and Word layout features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To explain and show some of the most important RDL and Word layout features
    supported by Dynamics 365 Business Central, we will go through a step-by-step
    example.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 5](d8553d40-bf59-4aef-983c-89519ef30e29.xhtml), *Developing a Customized
    Solution for Dynamics 365 Business Central*, we extended the Item Ledger Entry
    table by creating the Customer Category field for statistics. It is now time to
    create a report that uses this extended field for sales analysis purposes. Create
    a new directory in your extension called `.\Src\CustomerCategory\report`. Let's
    learn how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Part 1 – Designing the dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The dataset is designed within the report by specifying the data item field's
    columns and their properties. They have a big influence from a qualitative perspective
    (in which format is data exported?) and from a quantitative perspective (how many
    rows are processed?). Both have a clear impact on report performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'A short example is represented by decimal data types. When specifying a decimal
    data type in a dataset, two fields are always included: the decimal data and its
    formatting. This means that, together with the decimal field, you always have
    a repeated text variable tightly bound to it. This would increase the dimension
    of the dataset and, consequently, influence report performance.'
  prefs: []
  type: TYPE_NORMAL
- en: 'What could be the definition of a Dynamics 365 Business Central dataset? Here''s
    mine:'
  prefs: []
  type: TYPE_NORMAL
- en: '"A dataset is like a table in the client memory whose columns are made of all
    of the column fields defined in the dataset section and whose rows are all valid
    (not skipped) records that are processed in the DataItems."'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s design/create our report dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new file in the `.\Src\CustomerCategory\report` folder called `Rep50111.ItemLedegerEntryAnalysis.al`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `treport` or `treport` (CRS) to enable the report snippet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following data item and columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After this, we add the labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Build and publish the extension as is in your online or Docker-contained sandbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to Report Layout Selection and filter for your report's ID or name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Actions | Custom Layouts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click New, select Insert RDLC layout, and click OK. This will add an empty RDL
    layout to the report and reference the dataset structure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose Process | Export Layout and save the `Default.rdl` report in the `.\Src\CustomerCategory\report`
    folder. You might call the report layout `Rep50111.ItemLedgerEntryAnalysis.rdl`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Bind the report to the RDL layout within the extension and make RDL the default
    layout by specifying the following parameter in the AL report object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In Visual Studio Code, right-click the RDL file and choose Open externally.
    It will open in whichever program you selected to work with the `.rdl` file extension
    by default. In this example, we will work with Microsoft SQL Server Report Builder
    2016.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it's not already enabled, be sure to have the Report Data option checked
    in the View | Show/Hide ribbon menu in your Report Builder 2016 instance. In the
    Report Data pane, expand `Parameters` and `DataSets`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will notice that `Parameters` items are labels and field captions (specified
    by the `IncludeCaption=true` property in the dataset). `DataSet_Results` shows
    the entire dataset''s definition transposed into the Report Builder IDE. Here
    is a screenshot of the Report Data pane:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cd0285fa-5e83-40e7-8df3-4e76c7def0bd.png)'
  prefs: []
  type: TYPE_IMG
- en: Part 2 – Creating a simple RDL layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RDL layout development is one of the two layout design options you have for
    Dynamics 365 Business Central. Report layout design with Visual Studio 2017 (plus
    the Microsoft RDLC Report Designer for Visual Studio extension) has a fully-fledged
    development experience compared to Report Builder. An example is the Document
    Outline window, which shows a hierarchical view of the controls in the layout
    and lets you jump from one control to another quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Specifically targeted at RDL layout development, you may find quite exhaustive
    official documentation from SQL Server Reporting Services, official courseware,
    or third-party books. This section contains some very good development references
    if you would like to completely master the RDL layout for Dynamics 365 Business
    Central. Even if they mostly come from earlier versions of Dynamics NAV or SQL
    Server Reporting Services, they still contain great hints, and you should spare
    them a spot in your personal library.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some RDL layout development references:'
  prefs: []
  type: TYPE_NORMAL
- en: '| *Microsoft Dynamics NAV 2015 Professional Reporting* | Renders (Packt) |'
  prefs: []
  type: TYPE_TB
- en: '| *Microsoft Dynamics NAV 2009: Professional Reporting* | Renders (Packt) |'
  prefs: []
  type: TYPE_TB
- en: '| *Microsoft Dynamics NAV 2009 INSIDE Reporting* | Gayer (Mbst) |'
  prefs: []
  type: TYPE_TB
- en: '| *Professional Microsoft SQL Server 2008 Reporting Services* | Misner (Microsoft)
    |'
  prefs: []
  type: TYPE_TB
- en: Part 2.1 – Creating the RDL report header
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will create the report header step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Report Builder, let''s set up the report properties: right-click anywhere
    in the gray development area and select Report Properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b28bff9b-4308-4f0e-a9c8-b2c6b9ce5e80.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Change the Page Setup parameters, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/10c88efa-5995-4de5-a81c-7919313f59f9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s add a page header: right-click anywhere in the gray development area
    and select Add Page Header.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click anywhere in the page header and select Header Properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit Page Header Properties as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f1d5b3bb-42fd-4a20-b1ac-4f7bc38331b9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the body section and change the body size property as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Width: 7.21205in'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Height: 1.93403in'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's directly add some report item control to the header. Right-click
    anywhere in the report header and select Insert | TextBox in the page header.
    Perform this action six times.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the following properties for the textboxes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Name** | **Value** | **Size** | **Location** | **Font** | **Padding** |
    **CanGrow** | **TextAlign** | **VerticalAlign** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `txtReportName` | `=Parameters!BCReportName.Value` | `7.5 cm; 0.423 cm` |
    `0 cm; 0.0005 cm` | `Arial; 8 pt; Default; Bold; Default` | `0 pt; 0 pt; 0 pt;
    0 pt` | `False` | `Default` | `Middle` |'
  prefs: []
  type: TYPE_TB
- en: '| `txtCompanyName` | `=Fields!COMPANYNAME.Value` | `7.5 cm; 0.423 cm` | `0
    cm; 0.45878 cm` | `Arial; 7 pt; Default; Default; Default` | `0 pt; 0 pt; 0 pt;
    0 pt` | `False` | `Default` | `Middle` |'
  prefs: []
  type: TYPE_TB
- en: '| `txtExecutionTime` | `=Globals!ExecutionTime` | `3.15 cm; 0.423 cm` | `15
    cm; 0.0005 cm` | `Arial; 7 pt; Default; Default; Default` | `0 pt; 0 pt; 0 pt;
    0 pt` | `False` | `Right` | `Middle` |'
  prefs: []
  type: TYPE_TB
- en: '| `txtPageNoLabel` | `=Parameters!PageNo.Value` | `1.25271 cm; 0.423 cm` |
    `16.44729 cm; 0.4235 cm` | `Arial; 7 pt; Default; Default; Default` | `0 pt; 0
    pt; 0 pt; 0 pt` | `False` | `Left` | `Middle` |'
  prefs: []
  type: TYPE_TB
- en: '| `txtPageNumber` | `=Globals!PageNumber` | `0.45 cm; 0.423 cm` | `17.7 cm;
    0.45878 cm` | `Arial; 7 pt; Default; Default; Default` | `0 pt; 0 pt; 0 pt; 0
    pt` | `False` | `Right` | `Middle` |'
  prefs: []
  type: TYPE_TB
- en: '| `txtUserID` | `=User!UserID` | `3.15 cm; 0.423 cm` | `14.8868 cm; 0.91298
    cm` | `Arial; 7 pt; Default; Default; Default` | `0 pt; 0 pt; 0 pt; 0 pt` | `False`
    | `Right` | `Middle` |'
  prefs: []
  type: TYPE_TB
- en: 'This is what it should look like in the report header section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6f7908a0-4890-4689-9d5a-2550b6eb5182.png)'
  prefs: []
  type: TYPE_IMG
- en: Part 2.2 – Adding a table control to the RDLC report body
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will add a table control in the report body to display
    data in a tabular format:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click somewhere in the middle of the report body and choose Insert. Select
    the Table control from the menu. Keep the table small since we will need to add
    some extra columns and resize the width manually.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the last table column, right-click and select Insert Column, and choose
    Right:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ae36b7b4-645c-4026-ad0c-d4d8c8750c67.png)'
  prefs: []
  type: TYPE_IMG
- en: Repeat *step 2* three more times so that we have seven columns in total.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Keep the table aligned by changing the following table properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Location: 0.02584 in; 0.18403in'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Size: 7.06693 in; 0.48958in'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Change the column width property for each column, from left to right, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Column** | **1** | **2** | **3** | **4** | **5** | **6** | **7** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Width (cm) | 1,905 | 2,222 | 2,593 | 2,990 | 3,373 | 2,620 | 1,798 |'
  prefs: []
  type: TYPE_TB
- en: 'This should be the current layout result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c9b5410b-12ed-4799-b084-aa6e433ecf27.png)'
  prefs: []
  type: TYPE_IMG
- en: It is now time to set the table properties appropriately and bind them to the
    Dynamics 365 Business Central dataset. Select the table (once you have clicked
    on the table, a gray column/row area appears, and in a Microsoft Excel-like style,
    just click in the top left of this area to select the whole table).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Properties window, click the Property Pages button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the values in the General tab as follows and click OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Name: `tableItemLedgerEntry`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dataset name: `Dataset_Result`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, the table is bound to the appropriate dataset and it has a self-explanatory
    name. Giving an appropriate name to every single control in the RDL layout is
    useful because you can find out the purpose of the control and where it is located at
    a glance. Now, let's bind every table control to the dataset caption and field
    values.
  prefs: []
  type: TYPE_NORMAL
- en: 'For every single text box in the first row of the table (the table header row),
    open the Property Pages window and change the Value property of the first seven
    table header textboxes, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| `txtItemNoCap` | `=Parameters!ItemNo_ItemLedgerEntryCaption.Value` |'
  prefs: []
  type: TYPE_TB
- en: '| `txtPostingDateCap` | `=Parameters!PostingDate_ItemLedgerEntryCaption.Value`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `txtCustCatPKTCap` | `=Parameters!CustCatPKT_ItemLedgerEntryCaption.Value`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `txtDocumentNoCap` | `=Parameters!DocumentNo_ItemLedgerEntryCaption.Value`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `txtDescriptionCap` | `=Parameters!Description_ItemLedgerEntryCaption.Value`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `txtLocationCodeCap` | `=Parameters!LocationCode_ItemLedgerEntryCaption.Value`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `txtQuantityCap` | `=Parameters!Quantity_ItemLedgerEntryCaption.Value` |'
  prefs: []
  type: TYPE_TB
- en: 'Let''s bind table body text box controls to the dataset fields. For every text
    box in the second row of the table (the table body), open the Property Pages window
    and change the following properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Name** | **Value** | **Format** |'
  prefs: []
  type: TYPE_TB
- en: '| `txtItemNo` | `=Fields!ItemNo_ItemLedgerEntry.Value` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `txtPostingDate` | `=Fields!PostingDate_ItemLedgerEntry.Value` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `txtCustCatPKT` | `=Fields!CustCatPKT_ItemLedgerEntry.Value` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `txtDocumentNo` | `=Fields!DocumentNo_ItemLedgerEntry.Value` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `txtDescription` | `=Fields!Description_ItemLedgerEntry.Value` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `txtLocationCode` | `=Fields!LocationCode_ItemLedgerEntry.Value` |  |'
  prefs: []
  type: TYPE_TB
- en: '| `txtQuantity` | `=Fields!Quantity_ItemLedgerEntry.Value` | `=Fields!Quantity_ItemLedgerEntryFormat.Value`
    |'
  prefs: []
  type: TYPE_TB
- en: 'Create an alternate line color to make it easier to read. In the table details,
    select the seven textboxes mentioned in the previous table and add the following
    values to the following properties in each of these textboxes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Background Color: `=iif(RowNumber(Nothing) mod 2, "AliceBlue", "White")`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'TextAlign: Right'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Conditionally format the Color property for the `txtQuantity` text box. Select
    `txtQuantity` and change the Color property as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Color: `=iif(Fields!Quantity_ItemLedgerEntry.Value <= 0,"Red","Black")`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable the ability to display the table header at the beginning of every page
    to improve report readability. Click on the small down arrow in Column Groups and
    enable Advanced Mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the (Static) group in Row Groups:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/944df101-012d-4af3-a704-401f853db6e4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Change the properties for the (Static) group as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'KeepTogether: True'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RepeatOnNewPage: True'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Part 3 – Understanding grouping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the term **grouping**, we mean the capacity of aggregate result sets based
    on one or more discriminant elements. Grouping is typically used to show totals
    per group and/or aggregate and calculate totals (typically using sum formulas).
    The grouping feature is used typically within controls that implement the data
    region scope, such as table, matrix, list, chart, and gauge.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will create group totals for the table control of our report:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Row Groups section, right-click on the (Details) static row group and
    select Add Group. Choose Parent Group….
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A pop-up window should appear, asking you to provide a grouping element. Select
    the [ItemNo_ItemLedgerEntry] field value and choose to add both a group header
    and a group footer. Then, click OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/32963939-7ab1-4f44-b2cd-f7652c6cee19.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the group we've just created (typically named `ItemNo_ItemLedgerEntry`
    by default), right-click, and select Group Properties….
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Group Properties window, change the name to `ItemNoGroup` and click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select ItemNoGroup, right-click, and select Add Group and Child Group….
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A pop-up window appears, asking you to provide a grouping element. Select CustCatPKT_ItemLedgerEntry,
    choose to add just the group header (no group footer), and click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the group we've just created, right-click, and select Group Properties….
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Group Properties window, change the Name to `CustCatPKTNoGroup`. Then,
    go to the Advanced tab and set CustCatPKT_ItemLedgerEntry in the Recursive Parent box.
    Click OK to confirm this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0741b61b-daeb-47b3-9715-49efb70a0d9f.png)'
  prefs: []
  type: TYPE_IMG
- en: All of these operations should have created, by default, two extra unwanted
    columns in the table to display grouping elements. Select the first two columns
    and then right-click and choose Delete Column***s***.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The automatic action of adding two extra columns should have automatically
    enlarged the Report Body: bring this back to its original size. Set the following
    value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Size: 7.21205in; 1.93403in'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s add group caption labels. Select the first text box in the ItemNoGroup header
    row, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/79c73257-43a3-4553-952a-813d6ed4ea3f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Change its properties as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: `txtItemNoGroup`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Value**: `=Fields!ItemNo_ItemLedgerEntry.Value`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BackgroundColor**: `LightBlue`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Select the third text box in the `SourceNoGroup` header column and change its
    properties as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Name**: `txtCustCatPKTGroup`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Value**: `=Fields!CustCatPKT_ItemLedgerEntry.Value`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BackgroundColor**: `LightSteelBlue`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Select the last text box in the bottom right, in the `ItemNoGroup` footer row,
    and change its properties as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Name**: `txtSumQuantity`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Value**: `=Sum(Fields!Quantity_ItemLedgerEntry.Value)`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Color**: `=iif(Sum(Fields!Quantity_ItemLedgerEntry.Value) <= 0,"Red","Black")`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Font**: `Arial; 10pt; Default; Bold; Default`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Format**: `` `=Fields!Quantity_ItemLedgerEntryFormat.Value` ``'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, for the rest of the textboxes in all the grouping rows (both headers and
    footers), remove the `BackgroundColor` formula, `=iif(RowNumber(Nothing) mod 2,
    "AliceBlue", "White")`, that has been automatically copied from the details group.
    When the formula is deleted from the Properties window, BackGroundColor will default
    to No Color.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are almost finished with groupings. Let''s add the last touch to the totals.
    Select the sixth text box in the ItemNoGroup footer row, click on the Property
    Pages pop-up window for this text box, and change the Border properties, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f1432618-b757-4802-950d-ea474f97b5de.png)'
  prefs: []
  type: TYPE_IMG
- en: Repeat *step 15* for the seventh text box (`txtSumQuantity`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enable the ability to display the table header if there is more than one page
    to be rendered. Click on the small down arrow in Column Groups and enable Advanced
    Mode. Select the (Static) group in Row Groups and change the properties of the
    Static member, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '****KeepTogether: `True`****'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '**KeepWithGroup**: `After`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RepeatOnNewPage**: `True`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Part 4 – Building a simple request page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If report objects have been set with `UseRequestPage = true;` (the default value),
    then a request page will be shown to the user so that they can set filters, gather
    user information, and populate AL variables or parameters that influence the processing and output
    of the report.
  prefs: []
  type: TYPE_NORMAL
- en: Within a request page, you can also add actions to perform some extra activities
    before running the report. Typical examples include a shortcut to run a page to
    check for some specific setup or an action that performs preprocessing tasks before
    setting request page variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Visual Studio Code, add (or change, if you have used the `treport` snippet)
    the `requestpage` section and the `OnPreReport()` trigger section. Consider the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Part 5 – Adding database images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will add the ability to display images at runtime to our
    report:'
  prefs: []
  type: TYPE_NORMAL
- en: Go back to Report Builder and the RDL layout. In the center of the report header,
    right-click and select Insert | Image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Image Properties pop-up window will load. In the General tab, change the
    Name to `imgCompanyLogo` and input the parameters shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3ce9d348-3a78-4439-bc54-a7efea6dcbe7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Visibility tab, change the display option to Show or hide based on an
    expression and add the following formula:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This expression sets the visibility of the image control if the user has chosen
    to include the company logo and if the conversion from binary format into text
    returns values greater than 0 bytes (in short, if there is image data in the dataset).
  prefs: []
  type: TYPE_NORMAL
- en: Click OK to confirm the modifications you've made.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the image control''s location and size as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Location: 3,29875in; 0in'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Size: 2,42708in; 0,56578in'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The final report layout should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8fb06638-46c7-45be-ba58-c43b3b483e7b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The RDL report and its layout are now ready to be deployed. Compile the extension
    (*Ctrl* + *Shift* + *B*) and deploy the package into your online or containerized
    sandbox (*F5*). Once the web client is loading, just search (*Alt* + *Q*) for
    the Item Ledger Entry Analysis report and fill in the request page if you want
    to include the company logo in the report''s output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/090a6a56-5bb2-4496-bdca-48feddb83f77.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click Preview, the output should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8bd9612d-895d-404c-aa22-22057e1c942a.png)'
  prefs: []
  type: TYPE_IMG
- en: Part 6 – Adding a Word layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, together with the RDL layout, we will also add a Word layout
    to our report:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to Report Layout Selection and filter for report ID 50111.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Actions | Custom Layouts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click New, select Insert Word layout, and click OK. This will add an empty Word
    layout to the report and reference the dataset structure as an XML mapping.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose Process | Export Layout and save the `Default.docx` report into the `.\Src\CustomerCategory\report`
    folder. You might call the report layout `Rep50111.ItemLedgerEntryAnalysis.docx`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Bind the report to the RDL layout within the extension, change the default
    layout to Word, and change record sorting by specifying the following report properties
    in the AL report object. Consider the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In Visual Studio Code, right-click the DOCX file and choose Open externally.
    This will open Microsoft Word.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you haven''t already, be sure that you have the Developer tab enabled. Click
    on File | Options | Customize Ribbon. In the main tab, check the Developer (custom) ribbon
    option and click OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/16916810-f51c-4084-b48f-cdb8c00cd5c8.png)'
  prefs: []
  type: TYPE_IMG
- en: Back in the Word layout, select the Developer tab and click on the XML Mapping
    pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Custom XML Part box, select the last entry from the drop-down menu and
    expand the Labels and Item_Ledger_Entry nodes from the NavWorldReportXMLPart root.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0704991b-dcb7-4dd9-80fd-82e1699d3f36.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s add a Word layout list report to our extension:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click in the XML Mapping pane, select Item_Ledger_Entry the drop-down
    menu, and choose CompanyInformation_Picture. Right-click on it and select Insert
    Content Control | Picture. This will add a placeholder for the company information
    logo in the Word layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an extra line. Right-click in the XML Mapping pane, select Labels, and choose
    BCReportName**.** Right-click on it and select Insert Content Control | Plain
    Text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an extra line. Right-click in the XML Mapping pane, select the Item_Ledger_Entry
    drop-down menu, and choose COMPANYNAME. Right-click on it and select Insert Content
    Control | Plain Text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an extra line. In the Word ribbon, click on Insert | Table and create a
    7-row x 2-column table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the first row, for each cell, place the cursor in the XML Mapping pane,
    select Labels, right-click in each caption element, and select Insert Content
    Control | Plain Text. Here is a list of the column captions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ItemNo_ItemLedgerEntryCaption
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: PostingDate_ItemLedgerEntryCaption
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: CustCatPKT_ItemLedgerEntryCaption
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: DocumentNo_ItemLedgerEntryCaption
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Description_ItemLedgerEntryCaption
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: LocationCode_ItemLedgerEntryCaption
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Quantity_ItemLedgerEntryCaption
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the second row of the table. In the XML Mapping pane, select Item_Ledger_Entry
    element, right-click on it, and select Insert Content Control | Repeating. This
    will make the line elements repeat for every record in the Item Ledger Entry dataset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the second row, inside the repeater element, place the cursor in every cell
    in the XML Mapping pane, expand the Item_Ledger_Entry drop-down menu, right-click
    in the field element, and select Insert Content Control | Plain Text. Here is
    a list of the column fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ItemNo_ItemLedgerEntry
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: PostingDate_ItemLedgerEntry
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: CustCatPKT_ItemLedgerEntry
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: DocumentNo_ItemLedgerEntry
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Description_ItemLedgerEntry
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: LocationCode_ItemLedgerEntry
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Quantity_ItemLedgerEntry
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This will be the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7005be50-9cef-4320-92dc-1305e328c1a8.png)'
  prefs: []
  type: TYPE_IMG
- en: Save and close the Word file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Word layout is now ready to be deployed. Build the extension (*Ctrl* +
    *Shift* + *B*) and deploy the package into your online or containerized sandbox
    (*F5*). Once the web client is loading, search (*Alt* + *Q*) for Report Layout
    Selection, filter for the current report, and change the selected layout to Word
    (built-in), as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a09b9ef2-c6c0-4d45-86e3-98ec419c76f5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After searching for the Item Ledger Entry Analysis report, choose to include
    the company logo in the report output and print it to Microsoft Word. Here is
    the outcome:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc497d0b-22f8-4d8d-ba17-8a6273a564a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This concludes this section, where we created and beautified a report from
    scratch. In the next section, we will have a look at the most common task for
    a developer: copying and refactoring an existing report to cope with customer
    feature requirements.'
  prefs: []
  type: TYPE_NORMAL
- en: Converting an existing C/AL report into AL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Making small modifications to an existing report is a very common task. Together
    with creating new pages and codeunits, this is probably one of the most repetitive
    and frequent jobs for a developer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say that we would like to make the following changes to the standard
    sales order report:'
  prefs: []
  type: TYPE_NORMAL
- en: Show the Customer Category field in the sales order header
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Print *GIFT* in the sales lines for item lines with 100% discount
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The current version of the AL Language extension does not have any artifact
    such as the `ReportExtension` object that could be used to modify or merge existing
    reports. Therefore, it is always required to create a brand new report from scratch,
    even if we need to make very small modifications to the dataset and/or layout.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to accomplish this task, then, is to copy and give a different
    ID to an existing report after converting it from C/AL into AL.
  prefs: []
  type: TYPE_NORMAL
- en: The first part of the task (copy an existing report) is pretty straightforward
    with the Dynamics 365 Business Central October 2019 update since all of the legacy
    C/AL reports have been transformed into their equivalent AL objects and included
    in the base application extension.
  prefs: []
  type: TYPE_NORMAL
- en: With the on-premises version, you can find them in the DVD installation folder
    in the `\Applications\BaseApp\Source`directory. Just unzip the file named `Base
    Application.Source.zip` and search for the standard report you need to make a
    copy of, together with its `.rdl` and `.docx` files.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using a Docker-contained sandbox, you might think of using a powerful
    cmdlet implemented in the `NavContainerHelper` library that is specifically intended
    for the Dynamics 365 Business Central October 2019 update: `Create-AlProjectFolderFromBcContainer`.
    This cmdlet will unpack the base application source code in a local folder of
    your choice. Here is a very simple code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In `$alFolder`, you can pick up the AL report items that you need and renumber
    and customize them.
  prefs: []
  type: TYPE_NORMAL
- en: With the Dynamics 365 Business Central April 2019 update or earlier, Microsoft
    provides a very useful—and powerful—command-line tool called `txt2al.exe`, which
    helps to convert C/AL objects into AL syntax. But there is more.
  prefs: []
  type: TYPE_NORMAL
- en: The `New-NavContainer` cmdlet contained in the `NavContainerHelper` PowerShell
    library, which we discussed in [Chapter 3](8b032c15-9adb-4170-bf03-50a1abad1aa9.xhtml),
    *Online and Container-Based Sandboxes*, also implements a useful switch (`-includeAL`)
    that extracts all of the C/AL objects in TXT format from a container and converts
    them one by one using `txt2.al.exe`.
  prefs: []
  type: TYPE_NORMAL
- en: Since the Dynamics 365 Business Central October 2019 update, Microsoft discontinued
    the C/AL and CSIDE development environment, hence `txt2al.exe` is only present
    in deployments based on the Dynamics 365 Business Central April 2019 update or
    earlier versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a very useful script that converts all of the standard base C/AL objects
    into their AL equivalents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s a snippet of the PowerShell standard output that shows what is happening
    when the `-includeAL` switch is enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The output files are located in the `C:\ProgramData\NavContainerHelper\Extensions\Original-<ApplicationVersion>-<localization>-al` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this directory, we have to search for the converted AL standard object for
    order confirmation. Just type `Standard Sales Order` into the file explorer search
    field and three objects will be available to be copied and renamed:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Report 1305 - Standard Sales – Order Conf..al`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Standard Sales – Order Conf..docx`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`` `Standard Sales – Order Conf..rdlc` ``'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e5f656c-2357-49e7-8650-f293354a5b78.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Copy these files into the `.\Src\CustomerCategory\report` directory and rename
    them as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Rep50115.PacktSalesOrderConf.al`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Rep50115.PacktSalesOrderConf.docx`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Rep50115.PacktSalesOrderConf.rdl`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next step is to renumber the AL report within the allowed customization
    range to avoid duplicate object IDs and then change its properties to use the
    appropriate `.docx` and `.rdl` files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `Rep50115.PacktSalesOrderConf.al` in Visual Studio Code and change the
    name and properties, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have to let the application understand that every time standard report
    1305 is invoked, it should be substituted with custom report 50115 instead. This
    is easily done by subscribing to a specific event called `OnAfterSubstituteReport`,
    which is published through the `ReportManagement` codeunit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `Cod50100.CustomerCategoryMgt_PKT.al` file, which is contained in
    `.\Src\CustomerCategory\codeunit`, and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: At this stage, if you build (*Ctrl* + *Shift* + *B*) and publish (*F5*) the
    extension, the whole (code and layouts) standard sales order report will automatically be
    replaced behind the scenes with the custom one.
  prefs: []
  type: TYPE_NORMAL
- en: Now, it is time to make the appropriate changes to the custom sales order report
    code and Word layout to print out the Customer Category field in the document
    header and print out GIFT for every item line that has a 100% discount.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `Rep50115.PacktSalesOrderConf.al` in Visual Studio Code and add the following
    columns in the dataset section of the Header data item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a label for the gift description:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, change the IF conditional statement related to the discount percentage
    in the `OnAfterGetRecord` trigger for the `Line` data item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Everything is now ready to work as expected. We simply need to display the Customer
    Category column in the report layout.
  prefs: []
  type: TYPE_NORMAL
- en: Just build the app (*Ctrl* + *Shift* + *B*) and publish (*F5*) it in the online
    sandbox.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to Report Layout Selections, filter the list for report 50115, and click
    on Custom Layouts*.* The following screenshot shows the filtered report layout
    selections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/27b2fc9f-32b5-4686-9180-cade66f4a819.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a new layout and choose Insert Word layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0ac56c82-df7e-499b-935e-82bcb3d7bb2c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Export the custom Word layout we just created. In the Word layout, remove the
    `CustomerAddress8` field and instead, add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: CustomerCategory_PKT_Lbl as plaintext
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A space, a colon (:), and another space
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CustomerCategory_PKT as plaintext
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is how it appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/53f9eda1-6c54-4d8b-b0b9-4283d33b2ff7.png)'
  prefs: []
  type: TYPE_IMG
- en: Save the layout and import it back into the customer layout record.
  prefs: []
  type: TYPE_NORMAL
- en: You could also use this Word layout in the standard extension and replace the
    original report 50115 `.docx` file with this one if you intend to use this version
    as part of your standard extension deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run any sales order that has a gift line and customer category assigned to
    inspect the result. It should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/82220419-63d0-4f13-a06f-5acff256a1db.png)'
  prefs: []
  type: TYPE_IMG
- en: This concludes our section related to converting a C/AL report into AL. Next,
    let's learn how feature limitation works on RDL and Word reports.
  prefs: []
  type: TYPE_NORMAL
- en: Feature limitation when developing an RDL or Word layout report
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Basically—and historically—professional report development could/should be done
    by developing RDL report layouts with Visual Studio and the RDLC report extension
    installed. The Word document layout has more limitations than RDL and its main
    advantage is that it is quite popular and easy to adopt by power users.
  prefs: []
  type: TYPE_NORMAL
- en: 'The major pain points you might find when developing layouts are typically
    related to documents. The most commonly known ones are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Header and footer space is always retained**: Report headers and footers
    have static content, and they have been engineered so that they are always displayed
    on every page if they are present. Nevertheless, with RDL, you could use the typical
    `SetData` function in the body and the `GetData` function in the header. An example
    of this trick can be found in the standard object 206 Sales Invoice RDL layout.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**There''s no easy way to mimic the** `PlaceInBottom` **property for a document
    report from the old classic client report**: When developing a document, you might
    be asked to generate an entire document, but the totals (VAT, totals per group,
    and so on) must be always printed at the bottom, always in the same place, only
    on the last page. This problem arises because a Dynamics 365 Business Central
    document report could be considered as *a batch of multiple documents and multiple
    copies* rather than a single report. This implies that the breakdown for renumbering
    pages must be done for every document number and copy number. An example is the
    *report 205 Sales Order*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In standard document reports, totals are never placed at the bottom of the page;
    they are printed right after the last document line. This means that they could
    be printed anywhere on a page, or even be on an extra page. There is no feasible
    way to print a batch of the document and the totals printed at the bottom of the
    last page for every document and copy.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Complexity in implementing running totals**: Typically, with documents, you
    would like to implement running totals at the bottom of the page that are reported
    at the top of the next page, such as To be Continued and continue labels when
    printing the ledger or some transactional entries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With the old classic client report designer, you could resolve this by adding
    a `transheader`/`transfooter`. These artifacts no longer exist with RDL or Word
    layout reports. With a Word layout report, there is no feasible solution. With
    RDL, you might implement running totals, but only with header and footer sections.
    This is an old but useful development reference: [https://blogs.msdn.microsoft.com/nav/2011/06/06/transfooter-and-transheader-functionality-in-rdlcssrs-reports-revisited/](https://blogs.msdn.microsoft.com/nav/2011/06/06/transfooter-and-transheader-functionality-in-rdlcssrs-reports-revisited/).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Considering Word layouts only, the design limitations you might also frequently
    hit are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**No conditional formatting**: If you need to set the visibility of a control,
    change a field value within the layout, or set any conditional formatting, this
    is not possible with Word. A typical example is when you need to print a blank
    character instead of zero. This must be done in the dataset, and values have to
    be sent to the document already formatted as strings (blank or with a numeric
    value).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**No totaling formulas**: There is no equivalent to RDL `=SUM` functions or
    similar. Value calculations must be done through AL code and the result added
    to the dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Having nested repeaters in the same table is a challenge**: Since it is not
    possible to conditionally trigger the visibility of a table line, there is a tradeoff
    between a good-looking layout and different data items in the same table. A typical
    example is comment lines under a sales line or an additional description/barcode
    line under a sales shipment line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These might be achieved by adding a nested table structure repeater within the
    lines repeater, which maps the extra additional information. The nested table
    structure can be freely defined, as long as it spans a set of merged cells in
    the outer table. When you develop this, be aware that if there is no extra additional
    information, at least one empty instance of the nested structure will be included.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The best solution would be to use a buffer table in the dataset and create the
    exact line structure as it has to be printed in the layout.
  prefs: []
  type: TYPE_NORMAL
- en: If you come across one or more of these limitations, then probably the best
    and easiest solution is to develop an RDL layout report instead.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding report performance considerations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Dynamics 365 Business Central online, there are performance considerations
    that need to be taken into account.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, both Word and RDL built-in layouts are rendered in the same application
    domain process when they run with `SAVEASPDF` or `SAVEAS` statements.
  prefs: []
  type: TYPE_NORMAL
- en: Since RDL layouts might enable some external code artifacts that may potentially
    affect data within the same application domain, it has been decided to run every
    custom RDL report layout in isolated mode. It's worth noticing that if you develop
    a report and declare `DefaultLayout` as RDL and the `RDLLayout` property, this
    is considered a built-in layout and should render in the same application domain.
  prefs: []
  type: TYPE_NORMAL
- en: Word layouts, no matter whether they are built-in or custom-made, do not run
    in isolation.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling application domain isolation for custom RDL layouts provides a more
    secure and reliable processing environment. However, the drawback is that it could
    considerably increase the rendering time.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever you develop RDL reports for Dynamics 365 Business Central online, you
    must also test performance with the `SAVEASPDF` or `SAVEAS` statements within
    an online sandbox or a Docker-contained sandbox with the `customsettings.config`
    file server parameter, ReportAppDomainIsolation, set to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: Other performance considerations that are valid for both Word and RDL report
    layouts are based on dataset optimization.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the equations to keep in mind when developing the data structure
    of the AL report. Let''s consider that the dataset is an in-memory table (`X axis
    = columns` and `Y axis = rows`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the following links to optimize standard reports or your own custom
    reports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://blogs.msdn.microsoft.com/nav/2014/03/09/rdlc-report-and-performance-in-microsoft-dynamics-nav/](https://blogs.msdn.microsoft.com/nav/2014/03/09/rdlc-report-and-performance-in-microsoft-dynamics-nav/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://blogs.msdn.microsoft.com/nav/2016/05/20/rdlc-report-and-performance-in-microsoft-dynamics-nav-2015-and-2016/](https://blogs.msdn.microsoft.com/nav/2016/05/20/rdlc-report-and-performance-in-microsoft-dynamics-nav-2015-and-2016/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://blogs.msdn.microsoft.com/nav/2015/03/17/a-couple-of-rdlc-performance-optimization-tips/](https://blogs.msdn.microsoft.com/nav/2015/03/17/a-couple-of-rdlc-performance-optimization-tips/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned which tools to use to develop reports with
    AL. We saw how to create RDL and Word layouts and which tools are supported. We
    got a better understanding of the creation of reports and how to use them. We
    have also explained how to use `txt2al.exe` to convert a C/AL report into an AL
    report and refactor it to be reused within the standard application with a practical
    example.
  prefs: []
  type: TYPE_NORMAL
- en: In the end, we learned that there are some reporting limitations, a few workarounds,
    and some performance considerations that can help you become a master in AL report
    development.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll learn how to build an automated test for Dynamics
    365 Business Central to check for application business process consistency and
    improve the robustness of our development solutions.
  prefs: []
  type: TYPE_NORMAL
