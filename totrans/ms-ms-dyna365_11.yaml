- en: Installing and Upgrading Extensions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和升级扩展
- en: 'Acquiring the Installed status for an extension is a four-step procedure: publish,
    synchronize, upgrade (if and where needed), and install. In this chapter, we will
    cover each of these steps in detail.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 获取扩展的安装状态是一个四步过程：发布、同步、升级（如果需要）、安装。在本章中，我们将详细讲解这些步骤。
- en: Installing a simple or even a complex extension with the most exotic code artifacts
    might turn out to be an easy task compared to its maintenance. The maintenance
    of an extension is done through the upgrade process of the extension. An upgrade
    may be needed because of the introduction of a new feature, bug fixes or, quite
    frequently with SaaS, because of dependency changes from the base app.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 安装一个简单的或甚至复杂的扩展，可能比其维护要简单得多，即使是最复杂的代码组件。扩展的维护是通过扩展的升级过程完成的。可能需要进行升级，原因包括引入新功能、修复漏洞，或在SaaS环境中，通常是由于基础应用的依赖关系发生了变化。
- en: Throughout this chapter, we will explore both basic extension installation and
    complex dependency upgrades in order to help AL developers have a better understanding
    of how to review their `SaaSified` private IPs.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨基础扩展安装和复杂依赖关系升级，帮助AL开发人员更好地理解如何检查他们的`SaaSified`私有知识产权。
- en: With a continuous upgrade process that happens roughly every month, Dynamics
    365 Business Central online is an ever-changing and evolutionary product. Therefore,
    partners and customers should be ready to upgrade their extensions to cope with
    the monthly update releases of both platforms and applications.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Dynamics 365 Business Central在线产品每月大约进行一次持续的升级，因此它是一个不断变化和演化的产品。因此，合作伙伴和客户应该准备好升级他们的扩展，以应对平台和应用程序的每月更新。
- en: 'In this chapter, you will learn how to do the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何执行以下操作：
- en: Deploy extensions in an online sandbox and production environment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在在线沙箱和生产环境中部署扩展
- en: Check the status for published, synchronized, and installed extensions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查已发布、已同步和已安装扩展的状态
- en: Handle install codeunits
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理安装代码单元
- en: Handle breaking changes through upgrade codeunits
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过升级代码单元处理破坏性更改
- en: Define app dependencies
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义应用程序依赖关系
- en: Work with a simple upgrade scenario
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理一个简单的升级场景
- en: Upgrade extensions with dependencies
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 升级带有依赖关系的扩展
- en: Deploying extensions
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署扩展
- en: Like in any other programming language, the terminology is very important. It
    is vital to clearly understand and distinguish the different deployment phases
    and statuses for the extension in order to target the appropriate troubleshooting,
    where necessary.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在任何其他编程语言中一样，术语非常重要。明确理解和区分扩展的不同部署阶段和状态，对于针对适当的故障排除非常关键，必要时进行相应的处理。
- en: 'Depending on the development life cycle and deployment, extensions fall into
    two categories:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 根据开发生命周期和部署情况，扩展分为两类：
- en: '**Per tenant extensions (PTE)**: This resembles the old-school development,
    tailored per customer. Development is typically performed per tenant in a sandbox
    that contains a copy of the production configuration and data. The CSP partner
    and/or its reseller, together with the customer, manage the development and deployment
    the life cycle.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**每租户扩展（PTE）**：这类似于老式的定制开发，为每个客户量身定制。开发通常在包含生产配置和数据副本的沙箱环境中进行。CSP合作伙伴和/或其经销商与客户共同管理开发和部署生命周期。'
- en: Despite the fact that this is, historically, the most common scenario for on-premises
    ERP development, partners are encouraged to create their own standard extension
    to be deployed and/or sold through the Dynamics 365 Business Central Marketplace.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管从历史上看，这是本地部署ERP开发中最常见的场景，但我们鼓励合作伙伴创建自己的标准扩展，通过Dynamics 365 Business Central
    Marketplace进行部署和/或销售。
- en: '**AppSource extensions**: These are published on AppSource and their destiny
    is to be consumed by any/all tenants on a given system, acquired via the official
    Dynamics Marketplace. AppSource extensions follow a very strict process of technical
    and marketing validation before being approved and pushed as being worldwide (globally)
    available for production tenant deployments.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AppSource 扩展**：这些扩展发布在AppSource上，其目的是供任何/所有租户在特定系统上使用，通过官方的Dynamics Marketplace获取。AppSource扩展在被批准并作为全球（全球）可用于生产租户部署之前，必须经过严格的技术和市场验证流程。'
- en: Different from PTEs, AppSource-credited extensions are already published by
    Microsoft in every application database, ready to be installed per tenant on demand.
    This makes the extension deployment process faster, more reliable, and more professional.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 与PTE不同，AppSource认证的扩展已经由Microsoft发布在每个应用程序数据库中，随时可以按需为每个租户安装。这使得扩展的部署过程更快速、更可靠、更专业。
- en: 'PTEs can be deployed in two ways:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: PTE可以通过两种方式进行部署：
- en: Automatically
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动
- en: Manually
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动
- en: Let's take a look at both of these deployments here.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在这里看看这两种部署方式。
- en: Automatically
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动
- en: 'In Visual Studio Code, you have to set up `launch.json` to work against a specific
    target sandbox tenant environment (`"tenant": ""`) and provide the appropriate
    credentials to establish a connection.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '在Visual Studio Code中，你需要设置`launch.json`来针对特定的目标沙盒租户环境（`"tenant": ""`）工作，并提供适当的凭证来建立连接。'
- en: 'Since you may have several sandboxes within the same environment, you can also
    specify which tenant you want to connect to download symbols and/or publish the
    extension (`"sandboxName": ""`).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '由于你可能在同一环境中有多个沙盒，你还可以指定你希望连接的租户，以便下载符号和/或发布扩展（`"sandboxName": ""`）。'
- en: This is not possible in online production environments, only in sandboxes. This
    is only possible for PTEs. PTEs that are deployed in this way are often called
    developer extensions, since they can only target developer sandboxes.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在在线生产环境中这是不可能的，只能在沙盒中进行。这仅适用于PTE。通过这种方式部署的PTE通常被称为开发者扩展，因为它们只能针对开发者沙盒进行部署。
- en: 'By default, the deployment is executed by applying a synchronization to the
    existing schema (`"schemaUpdateMode": "Synchronize"`). The default option, then,
    is useful for preserving the data, just in case the developer has made some changes
    that do not involve any breaking changes. It is, however, possible to completely
    clean up any previous extension deployment and deploy it from scratch (`"schemaUpdateMode":
    "Recreate"`) or even force the synchronization (`"schemaUpdateMode": "ForceSync"`)
    to guarantee fast deployment and further tests to the extension.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '默认情况下，部署是通过对现有架构应用同步来执行的（`"schemaUpdateMode": "Synchronize"`）。因此，默认选项有助于保留数据，以防开发者做出的一些更改不涉及破坏性更改。然而，也可以完全清理任何先前的扩展部署，并从头开始进行部署（`"schemaUpdateMode":
    "Recreate"`），甚至强制同步（`"schemaUpdateMode": "ForceSync"`），以保证快速部署并进一步测试扩展。'
- en: ForceSync has to be used with caution and should be avoided as much as possible.
    Even if we speed up deployment and tests, it will not work in a production environment
    where an upgrade codeunit job is required. Sometimes, lazy developers might use
    ForceSync and forget to handle the appropriate upgrade and synchronization in
    production.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: ForceSync必须小心使用，并应尽可能避免。即使它加快了部署和测试速度，它也无法在需要升级代码单元作业的生产环境中工作。有时候，懒惰的开发者可能会使用ForceSync，并忘记在生产环境中处理适当的升级和同步。
- en: Manually
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 手动
- en: 'The typical production deployment is done manually. It is also possible in
    online sandboxes since the April 2019 update, as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的生产部署是手动进行的。从2019年4月的更新开始，在在线沙盒中也可以进行部署，具体如下：
- en: Connect to your production or sandbox tenant.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接到你的生产或沙盒租户。
- en: Search (*Alt* + *Q*) for the Extension Management page.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索（*Alt* + *Q*）进入扩展管理页面。
- en: 'In the Extension Management page, click on the Manage action group (you could
    pin it if you wanted to), choose Upload Extension, and pick up the extension (`.app`)
    you developed. The following screenshot shows the upload and deploy page:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在扩展管理页面中，点击管理操作组（如果需要，可以将其固定），选择上传扩展，然后选择你开发的扩展（`.app`）。下图显示了上传和部署页面：
- en: '![](img/ad01b062-d2fc-46f5-9da7-79dd59bc2b4c.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ad01b062-d2fc-46f5-9da7-79dd59bc2b4c.png)'
- en: In the screenshot, we see that the Deploy to parameter is very important, because
    it triggers when the extension has to be deployed by the platform.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在截图中，我们可以看到，Deploy to参数非常重要，因为它触发平台何时需要部署扩展。
- en: By specifying Current version, the deployment is performed immediately and the
    extension attempts to be synchronized. Developers can check whether the task has
    completed successfully, or if there have been failure errors in the Deployment
    status page.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 通过指定当前版本，部署会立即执行，扩展会尝试进行同步。开发人员可以检查任务是否成功完成，或者在部署状态页面中查看是否有失败的错误。
- en: Selecting Next Minor Version or Next Major Version defers the deployment to
    when the next minor or major update would happen.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 选择下一个次要版本或下一个主要版本将推迟部署，直到下一个次要或主要更新发生时。
- en: To find out more about this topic, visit [https://demiliani.com/2019/04/29/dynamics-365-business-central-and-per-tenant-extensions-check-page-control-names-between-platform-upgrades/](https://demiliani.com/2019/04/29/dynamics-365-business-central-and-per-tenant-extensions-check-page-control-names-between-platform-upgrades/).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 若想了解更多有关此主题的信息，请访问 [https://demiliani.com/2019/04/29/dynamics-365-business-central-and-per-tenant-extensions-check-page-control-names-between-platform-upgrades/](https://demiliani.com/2019/04/29/dynamics-365-business-central-and-per-tenant-extensions-check-page-control-names-between-platform-upgrades/)。
- en: Some deployment tips
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一些部署提示
- en: 'Developers must have it etched on their mind that Dynamics 365 Business Central
    is a multitenant environment that declares the following paradigms:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员必须牢牢记住，Dynamics 365 Business Central是一个多租户环境，声明了以下范式：
- en: Applications and data are decoupled and stored in different databases.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序和数据是解耦的，并存储在不同的数据库中。
- en: A single application database, bound to an application service, could serve
    hundreds of tenants (customer data databases). This is the pillar of the one-to-many
    concept of multitenancy.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单个应用数据库，与应用服务绑定，可以为数百个租户（客户数据数据库）提供服务。这是多租户一对多概念的支柱。
- en: In the application, the database is stored as the extension manifests (records
    that store the definition of the extension as it appears in the `app.json` file).
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在应用程序中，数据库存储为扩展清单（存储扩展定义的记录，定义以`app.json`文件中的形式出现）。
- en: Mounting and synchronizing tenants in a service bound to an application database
    would expose these extensions to the tenants.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在与应用数据库绑定的服务中挂载并同步租户，会将这些扩展暴露给租户。
- en: Tenant extensions could then be chosen for installation by users.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 租户扩展随后可以由用户选择进行安装。
- en: Whenever a minor update (typically monthly) or major update (typically every
    six months) happens, the extensions will be uninstalled. Subsequently, the tenant
    will be dismounted from the old application service and mounted to another application
    service that is bound to the new application version.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 每当发生次要更新（通常为每月更新）或主要更新（通常为每六个月更新）时，扩展将会被卸载。随后，租户将从旧的应用服务中卸载，并挂载到与新应用版本绑定的另一个应用服务中。
- en: Even if the new application service has not published the PTE, the tenant structure
    and its data will be totally preserved.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 即使新的应用服务尚未发布PTE，租户结构及其数据也会完全保留。
- en: Whenever this operation happens, developers just have to publish and install
    the extension once again, to resynchronize everything. This is valid, as mentioned,
    for all online sandboxes.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 每当此操作发生时，开发人员只需要重新发布并安装扩展，以重新同步所有内容。正如前面提到的，这适用于所有在线沙箱。
- en: PTEs that are deployed in the production environment have a more global scope,
    and extensions are automatically ported into the new application service. Within
    this context, if an extension is chosen to be deployed with the next minor/major
    version, when the upgrade happens, the new extension will be triggered for installation.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 部署在生产环境中的PTE具有更广泛的作用域，扩展会自动移植到新的应用服务中。在这种情况下，如果选择将扩展与下一个次要/主要版本一起部署，当升级发生时，将会触发安装新扩展。
- en: To get a deeper overview of this topic, visit [https://demiliani.com/2019/01/24/dynamics-365-business-central-tenant-upgrade-extensions-disappeared-in-sandbox-environment/](https://demiliani.com/2019/01/24/dynamics-365-business-central-tenant-upgrade-extensions-disappeared-in-sandbox-environment/).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 若想深入了解此主题，请访问 [https://demiliani.com/2019/01/24/dynamics-365-business-central-tenant-upgrade-extensions-disappeared-in-sandbox-environment/](https://demiliani.com/2019/01/24/dynamics-365-business-central-tenant-upgrade-extensions-disappeared-in-sandbox-environment/)。
- en: 'PTEs must maintain their uniqueness across the ecosystem, and developers should
    not violate this principle. The uniqueness of a PTE, or any extension in general,
    is defined by the composition of the following values in the `app.json` file:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: PTE必须保持在整个生态系统中的唯一性，开发人员不应违反这一原则。PTE或任何扩展的一般唯一性由以下值的组合定义，在`app.json`文件中：
- en: '**Package ID**: A new GUID assigned to the .app file every time the extension
    is built (*Ctrl* + *Shift* + *B*).'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包ID**：每次扩展构建时分配给.app文件的新GUID（*Ctrl* + *Shift* + *B*）。'
- en: '**Application ID**: The unique GUID that defines the extension.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用ID**：定义扩展的唯一GUID。'
- en: '**Name**'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**'
- en: '**Publisher**'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布者**'
- en: '**Version**: (in the form of `x.x.x.x`).'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本**：以`x.x.x.x`的形式表示。'
- en: Whenever one of these values is changed, the extension is considered to be a
    new extension. If a developer is considering reusing a PTE for another customer
    tenant, then they have to deal with this uniqueness paradigm.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 只要更改其中一个值，该扩展就被视为新扩展。如果开发人员考虑重用 PTE 用于另一个客户租户，则必须处理此独特性模式。
- en: 'Trying to deploy the very same PTE in another tenant, or even redeploying the
    same after rebuilding the package, might lead to a failure with an error like
    the one shown here:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在另一个租户中部署完全相同的 PTE，甚至在重新构建包后再次部署，可能会导致失败，并显示类似于此处所示的错误：
- en: '![](img/5565a9cc-79bb-479d-b704-8e23db0c0674.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5565a9cc-79bb-479d-b704-8e23db0c0674.png)'
- en: In this case, it might be necessary to simply increase (bump) the application
    version to make the deployment work smoothly.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，可能只需增加应用程序版本（bump）即可使部署顺利进行。
- en: If this happens in the tenant in which the PTE has never been installed before,
    then the root cause might be a duplicate within the same application service.
    To resolve the issue, the developer has to change the application ID and the name,
    and redeploy it in order to install the PTE successfully.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这发生在 PTE 从未安装过的租户中，则根本原因可能是在同一应用程序服务中存在重复项。为解决此问题，开发人员必须更改应用程序 ID 和名称，并重新部署以成功安装
    PTE。
- en: For a deeper overview of this issue, visit [https://demiliani.com/2019/03/14/dynamics-365-business-central-online-sandbox-makes-you-crazy-maybe-remember-these-points/](https://demiliani.com/2019/03/14/dynamics-365-business-central-online-sandbox-makes-you-crazy-maybe-remember-these-points/).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 深入了解此问题，请访问 [https://demiliani.com/2019/03/14/dynamics-365-business-central-online-sandbox-makes-you-crazy-maybe-remember-these-points/](https://demiliani.com/2019/03/14/dynamics-365-business-central-online-sandbox-makes-you-crazy-maybe-remember-these-points/)。
- en: 'There are another two error messages that might typically arise when deploying
    extensions. These are:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 部署扩展时可能会出现另外两个错误消息。这些是：
- en: Cannot install the extension `<name>` by `<publisher>` because the tenant `<Tenant`
    Id> already uses a different version of it.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于租户 `<Tenant` Id> 已经使用其它版本，因此无法安装扩展 `<name>` by `<publisher>`。
- en: The application extension with app id `'<Extension Id>'` is already configured
    for use by the global tenant.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序扩展与应用程序 ID `'<Extension Id>'` 已配置为全局租户使用。
- en: The first error occurs because it has tried to publish a Per tenant extension
    with the same Application Id and Version parameters as another Per tenant extension
    which is present on the system, but with potentially different contents. The easiest
    solution to this error is to increase the version of the extension.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个错误是因为尝试发布具有与系统中另一个 Per tenant 扩展相同的应用程序 ID 和版本参数，但可能内容不同。解决此错误的最简单方法是增加扩展的版本。
- en: 'The second error occurs because it has tried to upload a Per tenant extension
    using the same Id as one assigned to an AppSource Extension or a standard Microsoft
    owned extension. In this case, the solution is quite straightforward: change the
    extension Id and republish.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个错误是因为尝试使用与分配给 AppSource 扩展或标准 Microsoft 拥有的扩展相同的 ID 来上传 Per tenant 扩展。在这种情况下，解决方案非常简单：更改扩展
    ID 并重新发布。
- en: In the next section, we'll see what happens under the hood when you deploy an
    extension.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到在部署扩展时在幕后发生了什么。
- en: Deployment under the hood
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署在幕后进行
- en: 'Deploying any type of extension in an online sandbox means the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在在线沙箱中部署任何类型的扩展意味着以下情况：
- en: The extension is published in a specific application service with a specific
    application version.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该扩展发布在特定的应用程序服务中，具有特定的应用程序版本。
- en: The same extension is synchronized (the Azure SQL database structure matches
    the object metadata definition) and installed in the sandbox tenant.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相同的扩展已在沙箱租户中同步（Azure SQL 数据库结构与对象元数据定义相匹配）并安装。
- en: 'Extension deployment can be summarized in four phases:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展部署可以总结为四个阶段：
- en: '**Publish**: The extension is uploaded into the application database onto which
    the reference tenant is mounted during the publishing process. There are no changes
    in the physical structure of the tables in the tenant database.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布**: 扩展已上传到应用程序数据库中，在发布过程中将其挂载到参考租户。在租户数据库中的表的物理结构没有任何更改。'
- en: Publishing means a declaration of the object contents (metadata) and the database
    structure changes that need to be applied on demand by a specific tenant. These
    contents and relative changes are defined by the AL objects (such as tables, pages,
    and page extensions).
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 发布意味着声明对象内容（元数据）和需要特定租户按需应用的数据库结构更改。这些内容和相关更改由AL对象（例如表、页面和页面扩展）定义。
- en: '**Synchronize**: The contents that are published might be transferred to the
    tenant as is (such as pages or codeunits) or they might require an extra action
    to be taken against the tenant data structure (such as a table or a table extension).
    The most important step in the synchronization process is to apply changes to
    the underlying database, typically a table structure as defined in the AL objects.
    This is the step where tables are created or new fields are added or modified
    inside the tenant database.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**同步**：发布的内容可能会直接传输到租户（例如页面或代码单元），或者它们可能需要对租户数据结构进行额外的操作（例如表或表扩展）。同步过程中的最重要步骤是对基础数据库进行更改，通常是根据AL对象定义的表结构。这一步是创建表或在租户数据库中添加或修改新字段的步骤。'
- en: '**Data Upgrade**: If there are changes in the application version, then, after
    the synchronization, it must follow a data upgrade. When running the data upgrade,
    the application will search for upgrade codeunits and run the code inside them.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据升级**：如果应用程序版本发生更改，则在同步后必须进行数据升级。在运行数据升级时，应用程序将搜索升级代码单元并执行其中的代码。'
- en: A data upgrade is typically necessary when you have to handle breaking changes,
    such as changing a data type for a field, or when you are enhancing existing extension
    features that are already deployed.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当你需要处理破坏性更改时（例如更改字段的数据类型），或者当你正在增强已经部署的现有扩展功能时，通常需要进行数据升级。
- en: '**Install**: When both metadata changes and data upgrades are performed successfully,
    everything is ready in the tenant to provide all the functionality to the users.
    This last operation changes the status of the extension to Installed, and the
    application is extended and is ready to be used with the new functionalities.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安装**：当元数据更改和数据升级成功完成后，租户中一切就绪，用户可以提供所有功能。此最后操作将扩展的状态更改为“已安装”，应用程序已经扩展并准备好与新功能一起使用。'
- en: To demonstrate these phases in a prototype real-life development scenario, let's
    create a simple extension and double-check what's happening behind the scenes
    using a Docker-contained environment.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在原型现实开发场景中演示这些阶段，让我们创建一个简单的扩展，并使用Docker容器环境仔细检查背后的过程。
- en: At the time we are writing, Dynamics 365 Business Central Spring 2019 release
    is the latest version available, hence, what will follow is based on that major
    release.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们编写本文时，Dynamics 365 Business Central 2019春季版是最新的可用版本，因此，以下内容基于该主要版本。
- en: 'We have a PowerShell script that will perform the following activities:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个PowerShell脚本，将执行以下活动：
- en: Install or update the `NavContainerHelper` library to the latest version.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装或更新`NavContainerHelper`库到最新版本。
- en: Prompt you to provide a name and password for a user to be used inside the container.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提示你提供一个用于容器内部的用户名和密码。
- en: Generate a Docker-contained sandbox using the latest Dynamics 365 Business Central
    version and update.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用最新版本的Dynamics 365 Business Central生成一个Docker容器化沙盒并更新。
- en: Create a folder in the desktop with the same name as the container and move
    all the relevant shortcuts created by the `New-NAVContainer` cmdlet in to there.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在桌面上创建一个与容器同名的文件夹，并将所有由`New-NAVContainer` cmdlet创建的相关快捷方式移动到该文件夹中。
- en: 'The script can be seen in the following code:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本如下所示：
- en: '[PRE0]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After running the script, there should be a new directory in the desktop named
    `BC14MTW1`, with six shortcuts inside, as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本后，桌面上应该会出现一个名为`BC14MTW1`的新目录，里面有六个快捷方式，具体如下：
- en: '![](img/27b28765-fc3d-42f9-aaa0-7e0cccb6d01e.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/27b28765-fc3d-42f9-aaa0-7e0cccb6d01e.png)'
- en: 'By running SQL Server Management Studio (SSMS – see [https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-2017](https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-2017)),
    we can connect to the BC14MTW1\SQLEXPRESS server inside the container using SQL
    Server authentication. The following screenshot shows a list of the databases
    in the BC14MTW1\SQLEXPRESS instance:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行 SQL Server Management Studio（SSMS - 参见 [https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-2017](https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-2017)），我们可以使用
    SQL Server 身份验证连接到容器中的 BC14MTW1\SQLEXPRESS 服务器。以下截图显示了 BC14MTW1\SQLEXPRESS 实例中的数据库列表：
- en: '![](img/f9d5cb4e-d7dd-4a63-9677-0207445a61c7.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f9d5cb4e-d7dd-4a63-9677-0207445a61c7.png)'
- en: 'It''s worth noticing that there are three databases allocated with a multitenancy
    Docker-contained environment:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，在多租户 Docker 容器化环境中有三个分配的数据库：
- en: 'CRONUS: This is an application database. It contains all the system tables
    that are needed to manage the application objects (such as objects and object
    metadata) that are shared through customer tenants.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CRONUS：这是一个应用程序数据库，包含所有管理应用程序对象所需的系统表（如对象和对象元数据），这些对象是通过客户租户共享的。
- en: default and tenant: default is the sandbox that is mounted against the CRONUS
    application. tenant is just a dismounted copy of default.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: default 和 tenant：default 是挂载到 CRONUS 应用程序上的沙盒，tenant 只是 default 的一个卸载副本。
- en: 'In this environment, we will now focus on the following deployments:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个环境中，我们将重点关注以下部署：
- en: The main extension, which contains a new table and a table extension
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主要扩展，其中包含一个新表和一个表扩展
- en: The second extension, which depends on the main extension
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖于主要扩展的第二个扩展
- en: A new version of the main extension that contains a breaking change (a change
    that impacts the schema synchronization)
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含破坏性更改（影响架构同步的更改）的主要扩展的新版本
- en: A new version of the second extension to cope with the main extension breaking
    change
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是第二个扩展的新版本，用于应对主要扩展的破坏性更改。
- en: Understanding how to perform the aforementioned deployments is vital in order
    to master both simple and complex extension deployments.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 理解如何执行上述部署对于掌握简单和复杂的扩展部署至关重要。
- en: 'To download symbols from this multitenant, on-premises, Docker-contained environment,
    we will use the following `launch.json` file parameters:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要从这个多租户、内部部署的、容器化的 Docker 环境中下载符号，我们将使用以下 `launch.json` 文件参数：
- en: '[PRE1]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Using this very simple script, we have created our own Docker-contained multitenant
    environment to mimic a sandbox SaaS deployment. We are now ready to start our
    extension deployment journey, and analyze what is happening at the database level
    and in the application.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个非常简单的脚本，我们创建了自己的 Docker 容器化多租户环境，以模拟一个沙盒 SaaS 部署。我们现在准备好开始我们的扩展部署之旅，并分析数据库级别和应用程序中的发生情况。
- en: Deploying the main extension
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署主要扩展
- en: 'To make it very simple, we will create a brand new table (`Tab50105.NewTable.al`)
    with a few fields in it:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化，我们将创建一个全新的表（`Tab50105.NewTable.al`），并在其中添加一些字段：
- en: '[PRE2]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, we create a table extension (`Tab-Ext50105.NewTableExtension.al`) that
    extends the standard `Item` table with a new field called `Catalogue No***.***`:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们创建一个表扩展（`Tab-Ext50105.NewTableExtension.al`），它扩展了标准的 `Item` 表，并添加了一个名为
    `Catalogue No***.***` 的新字段：
- en: '[PRE3]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will be the very first version of the extension, with the following parameters
    in the manifest file (`app.json`), which define the extension:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是扩展的第一个版本，清单文件（`app.json`）中包含以下参数，这些参数定义了扩展：
- en: '[PRE4]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Typically (but it's not mandatory), extensions use a special codeunit called
    the installation codeunit. The installation codeunit is defined with `Subtype
    = Install`, and its execution is triggered every time the extension is installed.
    Its main purpose is to configure the extension during the installation by creating
    a record in a setup table, or by populating the table with default values.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 通常（但不是强制的），扩展使用一个特殊的代码单元，称为安装代码单元。安装代码单元通过 `Subtype = Install` 定义，并且每次安装扩展时都会触发它的执行。它的主要目的是在安装过程中配置扩展，通过在设置表中创建记录或用默认值填充表来实现。
- en: 'In the following code example, we will design an installation codeunit (`Cod50100.MainExtensionInstall.al`):'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码示例中，我们将设计一个安装代码单元（`Cod50100.MainExtensionInstall.al`）：
- en: 'We begin by creating a record in the new table:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先在新表中创建一条记录：
- en: '[PRE5]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Since you can install and uninstall the extension at will, and however many
    times you want, the key point here is to check whether `NewTable.IsEmpty()` performs
    the activity exactly in the first installation. That code snippet will make sure
    to populate the table with some default values, but only if it is needed.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你可以随意安装和卸载扩展，无论多少次，关键是检查`NewTable.IsEmpty()`是否仅在第一次安装时执行此操作。该代码片段将确保仅在需要时填充表格中的一些默认值。
- en: Uninstalling an extension with Dynamics 365 Business Central SaaS will always
    be performed while preserving the data. They are not cleaned up, but are simply
    made not visible as the extension uninstalls. Re-installing the extension will
    bring the old saved data back again. The cloud paradigm is to be conservative
    in all shapes, and no data will ever be deleted behind the scenes.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 卸载一个扩展时，使用Dynamics 365 Business Central SaaS将始终在保留数据的情况下进行。数据不会被清除，而只是变得不可见，当扩展卸载时，数据不会被删除。重新安装扩展时，旧的保存数据将会恢复。云计算范式是在所有方面保持保守，任何数据都不会在后台被删除。
- en: 'After building the extension (*Ctrl* + *Shift* + *B*), we are ready to deploy
    the app file using the following sequence of PowerShell cmdlets, which are contained
    in the `NavContainerHelper` PowerShell library:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构建扩展（*Ctrl* + *Shift* + *B*）之后，我们准备好使用以下PowerShell命令序列部署应用文件，这些命令包含在`NavContainerHelper`
    PowerShell库中：
- en: '`Publish-BCContainerApp`'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Publish-BCContainerApp`'
- en: '`Sync-BCContainerApp`'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Sync-BCContainerApp`'
- en: '`Start-BCContainerAppDataUpgrade`'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Start-BCContainerAppDataUpgrade`'
- en: '`Install-BCContainerApp`'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Install-BCContainerApp`'
- en: 'After the execution of each PowerShell cmdlet, we will check the content of
    the relevant system tables that are involved in the extension deployment, synchronization,
    and upgrade mechanism. We will use the following simple T-SQL script by swapping `[Name]`
    and `[Version Major]` in the `DECLARE` sections with the appropriate extension
    name and major version:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每执行一个PowerShell命令，我们将检查与扩展部署、同步和升级机制相关的系统表中的内容。我们将通过以下简单的T-SQL脚本来执行，方法是将`DECLARE`部分中的`[Name]`和`[Version
    Major]`替换为适当的扩展名称和主版本号：
- en: '[PRE6]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, you will observe in the following code that the publish action will declare
    the extension manifest in the `[NAV App]` table with a specific package ID, and
    its application ID in the application database (which is called `CRONUS`):'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你将在以下代码中看到，发布操作将在`[NAV App]`表中声明扩展清单，并在应用程序数据库（称为`CRONUS`）中声明其包ID和应用程序ID：
- en: '[PRE7]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The source code for the `Publish-BCContainerApp` script is available here: [https://github.com/Microsoft/navcontainerhelper/blob/master/AppHandling/Publish-NavContainerApp.ps1](https://github.com/Microsoft/navcontainerhelper/blob/master/AppHandling/Publish-NavContainerApp.ps1)
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`Publish-BCContainerApp`脚本的源代码可以在此找到：[https://github.com/Microsoft/navcontainerhelper/blob/master/AppHandling/Publish-NavContainerApp.ps1](https://github.com/Microsoft/navcontainerhelper/blob/master/AppHandling/Publish-NavContainerApp.ps1)'
- en: Then, the object that is contained in the extension is extracted and populates `[NAV
    App Object Metadata]`, the table in the application database.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，扩展中包含的对象会被提取并填充到应用程序数据库中的`[NAV App Object Metadata]`表中。
- en: A metadata record is also created in the `[NAV App Resource]` table, and contains
    the permission object.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 一个元数据记录也会在`[NAV App Resource]`表中创建，并包含权限对象。
- en: 'No action is performed in the tenant database (named `default`) at this stage.
    The following screenshot shows the relevant query result snippet after the main
    extension has been published:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，租户数据库（名为`default`）中不会执行任何操作。以下截图显示了主扩展发布后相关查询结果的片段：
- en: '![](img/0357f059-0bc9-4095-8ca5-505aaacefe07.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0357f059-0bc9-4095-8ca5-505aaacefe07.png)'
- en: 'After publishing the main extension, we need to synchronize its content and
    apply metadata changes to the database structure, if and where needed. Consider
    the following code:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在发布主扩展之后，我们需要同步其内容，并根据需要将元数据更改应用到数据库结构中。请参考以下代码：
- en: '[PRE8]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The source code of the `Sync.BCContainerApp` script is available here: [https://github.com/microsoft/navcontainerhelper/blob/master/AppHandling/Sync-NavContainerApp.ps1](https://github.com/microsoft/navcontainerhelper/blob/master/AppHandling/Sync-NavContainerApp.ps1).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`Sync.BCContainerApp`脚本的源代码可以在此找到：[https://github.com/microsoft/navcontainerhelper/blob/master/AppHandling/Sync-NavContainerApp.ps1](https://github.com/microsoft/navcontainerhelper/blob/master/AppHandling/Sync-NavContainerApp.ps1)。'
- en: This action will synchronize the extension metadata content of the main extension
    in the application database (in this example, CRONUS) against a specific mounted
    tenant (in this example, default). Practically, it will create records in the
    tenant `[$ndo$navappschemasnapshot]` table for every object that has an impact
    on schema changes at the database level, such as tables and/or table extensions.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作将同步应用数据库（在此示例中为 CRONUS）中主扩展的扩展元数据内容到特定挂载的租户（在此示例中为默认租户）。实际上，它将在租户`[$ndo$navappschemasnapshot]`表中为每个影响数据库层级架构更改的对象（如表和/或表扩展）创建记录。
- en: 'One record is also created in the `[$ndo$navappschematracking]` table to correlate
    the objects in the snapshot table with the extension ID, name, publisher, and
    version. The following screenshot shows the relevant query result snippet after
    the main app synchronizes:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`[$ndo$navappschematracking]`表中还会创建一条记录，用于将快照表中的对象与扩展 ID、名称、发布者和版本相关联。以下截图显示了主应用程序同步后相关查询结果片段：
- en: '![](img/550eb0d7-c281-4855-976c-a5f9e207c8d4.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/550eb0d7-c281-4855-976c-a5f9e207c8d4.png)'
- en: 'When the extension is synchronized, the next step is to perform a data upgrade,
    if and where needed. Consider the following code:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当扩展同步完成后，下一步是执行数据升级，如果需要的话。请考虑以下代码：
- en: '[PRE9]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The source code for the `Start-BCContainerAppDataUpgrade` script is available
    here: [https://github.com/microsoft/navcontainerhelper/blob/master/AppHandling/Start-NavContainerAppDataUpgrade.ps1](https://github.com/microsoft/navcontainerhelper/blob/master/AppHandling/Start-NavContainerAppDataUpgrade.ps1).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`Start-BCContainerAppDataUpgrade`脚本的源代码可以在这里找到：[https://github.com/microsoft/navcontainerhelper/blob/master/AppHandling/Start-NavContainerAppDataUpgrade.ps1](https://github.com/microsoft/navcontainerhelper/blob/master/AppHandling/Start-NavContainerAppDataUpgrade.ps1)。'
- en: 'If you run the data upgrade now, this has no effect, since there is no previous
    extension from which to upgrade. The PowerShell cmdlet will return an error as
    shown here:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你现在运行数据升级，这不会有任何效果，因为没有先前的扩展可供升级。PowerShell cmdlet 将返回如下所示的错误：
- en: '[PRE10]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The last step is installing the extension:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是安装扩展：
- en: '[PRE11]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The source code for the `Install-BCContainerApp` script is available here:
    [https://github.com/microsoft/navcontainerhelper/blob/master/AppHandling/Install-NavContainerApp.ps1](https://github.com/microsoft/navcontainerhelper/blob/master/AppHandling/Install-NavContainerApp.ps1).'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`Install-BCContainerApp`脚本的源代码可以在这里找到：[https://github.com/microsoft/navcontainerhelper/blob/master/AppHandling/Install-NavContainerApp.ps1](https://github.com/microsoft/navcontainerhelper/blob/master/AppHandling/Install-NavContainerApp.ps1)。'
- en: During the installation task, one record is inserted in the application database
    `[NAV App Tenant App]` table in order to report and link the tenant ID (in this
    case, `default`) and the app package ID. The same is reflected in the tenant database
    where a record is inserted in the `[NAV App Installed App]` table, reporting the
    package ID and the app ID.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装任务期间，会在应用数据库`[NAV App Tenant App]`表中插入一条记录，以报告并链接租户 ID（在此示例中为`default`）和应用包
    ID。在租户数据库中也会反映这一点，其中在`[NAV App Installed App]`表中插入一条记录，报告包 ID 和应用 ID。
- en: At this stage, the synchronization mechanism between the application database
    and the tenant database is completed and the metadata structure changes are also
    applied to the SQL Server database structure.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，应用数据库和租户数据库之间的同步机制已完成，元数据结构的更改也已应用到 SQL Server 数据库结构中。
- en: 'In this example, you will find the following in the tenant database:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，你将会在租户数据库中找到以下内容：
- en: A new table called `$item$<appID>` that contains the new field, `Catalogue No.`.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为`$item$<appID>`的新表，其中包含新的字段`Catalogue No.`。
- en: A new table called `$NewTable$<appID>` that contains all the relevant fields
    that have been defined for that table in the AL table object.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个名为`$NewTable$<appID>`的新表，包含为该表在 AL 表对象中定义的所有相关字段。
- en: 'The following screenshot shows the overview of the two new tables that were
    created during the installation process:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图展示了在安装过程中创建的两个新表的概览：
- en: '![](img/4247e96f-a255-4f6f-96b8-721662c94f9b.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4247e96f-a255-4f6f-96b8-721662c94f9b.png)'
- en: 'The installation process also executes the code that is contained in the installation
    codeunit and, in this example, populates `New Table` with three records. You can
    easily inspect the table''s content by running the following code:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 安装过程还执行了安装代码单元中的代码，在此示例中，它将`New Table`填充了三条记录。你可以通过运行以下代码轻松检查表中的内容：
- en: '[PRE12]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output for this is as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 结果输出如下：
- en: '![](img/b87595a9-ee44-4545-984b-6372029bb363.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b87595a9-ee44-4545-984b-6372029bb363.png)'
- en: Now that the main extension has been installed, let's move forward in our example,
    by creating and deploying another extension that has a dependency on the objects
    declared by the main extension.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a dependent extension
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The dependency to the main extension is declared in the `app.json` file:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the preceding code, we can see that the dependency must define four parameters:
    the application ID, name, publisher, and version. These are mandatory if we want
    to define a unique extension target.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the dependency in the `app.json` file is defined, it is mandatory to download
    the appropriate symbols from the tenant. To perform this action, just run the
    command palette (*Ctrl* + *Shift* + *P*) and choose AL: Download symbols.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: 'To make it very simple, we will create a second extension as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: 'The second extension will be with just a page extension object that is based
    on the table extension field implemented with the main extension (`Pag-Ext50115.NewTablePageExtension.al`). Hence,
    the second extension must declare a dependency on the main extension. Consider
    the following code:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We are now ready to publish the second extension using the following PowerShell
    snippet:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Like in the main extension, the publish action will declare the extension manifest
    in the `[NAV App]` table and the object contained in the extension is extracted
    into the `[NAV App Object Metadata]` table in the application database.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A record is also created in the `[NAV App Resource]` table of type metadata.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The significant change, compared to the previous extension, is a new record
    in the `[NAV App Dependencies]` table that links the second extension package
    ID with the main extension application ID, name, publisher, and version. The following
    screenshot shows the relevant query result snippet, after the dependent app is
    published:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fdbf554a-0837-4132-90b2-4ec81068db66.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
- en: No action is performed; hence, there are no changes in the tenant database.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: 'After publishing, we need to synchronize the second extension:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This action will synchronize the extension metadata content of the second extension
    in the application database against a specific mounted tenant. In this case, since
    we have a page object in the extension and nothing more, no records will be created
    in the nav app schema snapshot table in the tenant database.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: 'However, one record will be created in the `[$ndo$navappschematracking]` table,
    just to correlate the extension objects in the snapshot table with the extension
    ID, name, publisher, and version, no matter whether or not there are objects that
    need to be tracked. The following screenshot shows the relevant query result snippet
    after the main app has been synchronized:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ab203fad-3665-4ef8-aaac-8fb39338e4ed.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
- en: 'After synchronizing the second extension, we could check whether there is some
    data that needs to be upgraded. We could then use the following PowerShell script:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As with the main extension, an error will be thrown, stating that there is nothing
    to upgrade.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step is to install the second extension:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In this case, it will be a super-fast task, because we do not have any objects
    that will cause a schema change (we only have a page extension in the second extension).
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: One record is inserted in the application database's `[NAV App Tenant App]`
    table to report and link the tenant ID and the app package ID, and the same record
    is inserted in the tenant database's `[NAV App Installed App]` table, reporting
    the package ID and the app ID.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Everything is now ready to work in our solution (that is, a combination of two
    dependent extensions) and, in the `BC14MTW1` folder, just run the `BC14MTW1 Web
    Client` shortcut.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: 'After providing access credentials and creating a 30-day trial version, go
    to the Item list and create three items called ITEM1, ITEM2, and ITEM3, or whatever
    you like, and assign them Catalogue No. `111`, `222`, and `333`, respectively.
    The following screenshot shows the Item card:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/33276a9b-e5c5-42af-acb3-83645258cd4f.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
- en: This will make sure that we now have some data to upgrade, as required in the
    next section.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a new version of the main extension
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Again, in order to make it very simple, we will create a second version of
    the main extension where one field, `Catalogue No.`, will change its data type
    from integer to `text 30`. This is a data type conversion that constitutes a breaking
    change in the data schema. The second version of the extension must then cope
    with the following:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '**Increase (bump) the extension version**: Change the `app.json` file version
    field as follows:'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '**Table or table extension object changes**: We should declare the original
    `Catalogue No.` field with the `ObsoleteState` property set to `Removed` (for
    a definition of `ObsoleteState` and an overview of how it is used, please visit [https://docs.microsoft.com/en-us/dyn](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/properties/devenv-obsoletestate-property)[amics365/business-central/dev-itpro/developer/properties/devenv-obsoletestate-propert](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/properties/devenv-obsoletestate-property)**[y](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/properties/devenv-obsoletestate-property)**).
    We should also declare a brand new field with the `text 30` data type, and with
    the same `Caption` as the `Catalogue No.` field, in order to make these changes
    with a smooth transition. The following code shows this:'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '**Installation codeunit changes**: If there will be some code referencing the
    `Catalogue No.` and pre-populated values during the initial installation phase,
    these need to be changed according to the new data type in the installation codeunit.
    We do not have such cases in our example, but it might happen in real-life scenarios.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Upgrade codeunit**: The code changes that are declared in the table or table
    extension objects might involve data handling. A brand new codeunit with the `Subtype`
    property set to `Upgrade` is now needed to handle this data transit from the old
    field to the new one.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To find out more about upgrade codeunits, check out the online documentation
    at [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/devenv-upgrading-extensions](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/devenv-upgrading-extensions).
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Within this codeunit and in a specific function, it is possible to write the
    upgrade code and check whether a specific version of an extension has been installed
    and performs actionable tasks based on this information. All of this information
    is retrieved in an upgrade codeunit using a combination of the `NavApp` and `ModuleInfo`
    data types.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: This would make an upgrade codeunit very powerful and flexible.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, we will retrieve the information of the currently installed version
    (`NavApp.GetCurrentModuleInfo(Module)`), and transform the existing integer value
    for the `Catalogue No.` field into text with the `C` as a prefix. Consider the
    following code:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We are now able to publish the new version of the main extension:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The extension manifest for version 2 will be loaded in the `[NAV App]` table,
    and the object that is contained in the extension is extracted into the `[NAV
    App Object Metadata]` table in the application database. A metadata record is
    also created in the `[NAV App Resource]` table. The following screenshot shows
    the relevant query result snippet after the new version of the main extension
    has been published:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1accb7d9-9fd1-4291-bf79-001ed1b6af81.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
- en: No action is performed in the tenant database.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s synchronize the new version of the main extension with the following
    PowerShell snippet:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Records will be created in the tenant's `[$ndo$navappschemasnapshot]` table
    for every object that has an impact on schema changes at the database level.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: The record that is created in the `[$ndo$navappschematracking]` table has been
    updated to correlate the objects in the snapshot table with the extension ID,
    name, publisher, and the new version. The record updates the `version` field to
    2.0.0.0 and changes the `baselineversion` field to `1.0.0.0`.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: 'This is also the crucial stage at which metadata changes are applied. Let''s
    run a simple query from SSMS as follows:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The preceding query will show that the new `NewCatalogueNo` field has been
    created. The following screenshot shows the result of the query in the extended
    item table:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/42fc3d5c-b7b1-4b12-93e5-938d2d49b991.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
- en: It is worth noticing that users are still able to work seamlessly and without
    any problems, continuing to assign values to the old `Catalogue No.` field.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step in the deployment of version 2.x of the main extension is to
    perform the data upgrade:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The previous step synchronized the metadata structure at the database level
    and created the new field, leaving the old field with its values untouched.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: 'It is in this step where all the upgrade magic happens and the data is moved
    into the new field. Run the following query again:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You will notice that the values in `NewCatalogueNo` have been updated according
    to the upgrade codeunit code. The following screenshot shows the result of the
    query in the extended item table:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8937767a-8937-4820-9cb0-424c59f272a3.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
- en: The record in the application database's `[NAV App Tenant App]` table that linked
    the tenant ID and the app package ID is also updated with the version 2 package
    ID. This is also reflected in the tenant database by updating the relevant record
    in the `[NAV App Installed App]` table with the new package ID from version 2.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: 'The dependent extension is, then, broken at this stage, because it is bound
    to a field that is effectively marked as removed; hence, the page text box control
    related to the old `Catalogue No.` field will not be shown in the client anymore.
    The following screenshot shows a snippet of the Item card after upgrading to the
    new version of the main extension:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b7b929e-91d5-47e2-bf25-3040d3be4bdf.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
- en: 'The last step to check is whether there are changes when installing the extension
    using the following PowerShell statement:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In this case, no action is performed, because the extension was already installed,
    and it has just been upgraded to another version.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: 'We should, then, receive the following message when running the PowerShell
    cmdlet:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: After this, let's see how we can deploy to a new independent version.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a new version of the dependent extension
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After performing the data upgrade of the main extension to a new version, we
    saw that the dependent extension has been broken. It is crucial at this stage
    to let the user read or update the new `NewCatalogueNo.` field from the client.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: 'First things first. We must bump the `app.json` version of the dependent extension
    to 2.0.0.0, and also update the dependency to the appropriate version of the main
    extension. See the following updated snippet:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'When the `app.json` file is updated, we must download the new symbols from
    our multitenant environment in order to have them set appropriately. The results
    of the `.alpackages` directory content, right after the downloading symbols, are
    shown in the following screenshot. This shows a list of symbols that are needed
    to build the new version for the dependent extension:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0170bbb2-8f04-4903-bc7f-8961fdc39217.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
- en: 'The updated page extension object will then have the appropriate reference
    to the new `NewCatalogueNo` field:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'We could then publish the new version of the second extension using the following
    script:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: As in version 2 of the main extension, the manifest will be loaded in the `[NAV
    App]` table, and the object contained in the extension is extracted into the `[NAV
    App Object Metadata]` table in the application database. A metadata record is
    also created in the `[NAV App Resource]` table, and also in the `[NAV App Dependency]`
    table, reflecting the dependency of the second extension version 2 on main extension
    version 2.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: No action is performed in the tenant database.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: 'We should, then, synchronize the app in the tenant using the following PowerShell
    script:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Once you run the synchronization, the original record that was created in the
    `[$ndo$navappschematracking]` table will be updated in order to correlate the
    objects in the snapshot table with the extension ID, name, publisher, and the
    new version.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: 'The `version` field for the dependent extension will be `2.0.0.0`, while the
    `baselineversion` field remains `1.0.0.0`. The following screenshot shows the
    query result after the new version of the dependent extension has been synchronized:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9b829ea-63c9-4425-88b1-7dff1e8f7106.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
- en: If we stop now, we have a hybrid half-deployment state, where schema synchronization
    is now enabled for the new version, but the installed version is still the old
    one.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: 'It is now time to start the data upgrade for the second extension. See the
    following simple script:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The record in the application database's `[NAV App Tenant App]` table that linked
    the tenant ID and the app package ID is updated with the new version's package
    ID. The same thing happened in the tenant database by updating the relevant record
    in the `[NAV App Installed App]` table with the new version's package ID.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: 'The dependent extension is, then, consistent at this stage and the new page
    extension is used to read and update the `NewCatalogueNo` field. The following
    screenshot shows the Item card after upgrading to the new version of the dependent
    extension:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9bca6c89-e81a-4cb3-834a-522deab1414b.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
- en: 'Just to be consistent in following the four deployment phases, we could also
    execute the installation statement:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'It is trivial to say that we will receive the following message:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This concludes the life cycle of our simple extension that covers complex upgrade
    scenarios. It is left to you, as an exercise, to deploy all four extensions manually
    in an online Dynamics 365 Business Central production environment, and see whether
    there are any differences.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: 'In the end, you could filter the extension that is deployed online, and you
    might notice that you will find all of them in the extension management list:
    two installed (version 2) and two not installed (version 1). The following screenshot
    explains the situation:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e3b2cd07-fc73-4a74-bfdb-d7fa2bc8d5ff.png)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
- en: Handling installation and upgrade operations are two important steps that you
    need to handle with your applications. Upgrading in particular is mandatory if
    you want to upgrade an extension without data loss.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we took a close look at the various options for deploying
    an extension targeted at Dynamics 365 Business Central sandbox or production.
    We have also covered all four stages of extension deployment in detail: publish,
    synchronize, data upgrade, and installation.'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: This chapter closes the development section, and now you're ready to start working
    with extensions on real-world projects (you know how to create extensions, how
    to deploy them, and how to extend them).
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll begin a brand new section that looks at debugging
    and testing extensions. The final chapter relates to source code management and
    its life cycle.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
