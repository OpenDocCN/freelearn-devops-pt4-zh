- en: Debugging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试
- en: Dynamics 365 Business Central AL Language extension provides a debugger to help
    developers check, correct, or modify code so that custom extensions can build
    successfully, deploy smoothly, and act as expected.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Dynamics 365 Business Central AL 语言扩展提供了一个调试器，帮助开发者检查、修正或修改代码，以确保自定义扩展能够成功构建、顺利部署并按预期运行。
- en: Another way to track potential logical errors is to write test codeunits, but
    this will be a topic for another chapter. For now, we will see how to debug an
    extension and create tests for reports with ease.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 追踪潜在逻辑错误的另一种方式是编写测试单元代码，但这将是另一个章节的内容。现在，我们将看到如何轻松调试扩展并为报告创建测试。
- en: 'This chapter will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Running the AL Language extension in debug mode
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以调试模式运行 AL 语言扩展
- en: Defining specific non-debuggable functions or variables
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义特定的不可调试函数或变量
- en: Mastering debugger and code editor issues (*debugging the debugger*)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 掌握调试器和代码编辑器问题（*调试调试器*）
- en: Working with code analyzers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与代码分析器一起工作
- en: Using Event Recorder to track information about event availability
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用事件记录器跟踪事件可用性信息
- en: Running in debug mode
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以调试模式运行
- en: The basic concept behind debugging is the *breakpoint*, which is a mark that
    you can set on a statement. When the program flow hits the statement, the debugger
    is kicked in and suspends execution (technically, it breaks) until instructed
    to continue. Without any breakpoints, the code would run just fine as long as
    the debugger is active.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 调试的基本概念是 *断点*，它是你可以在语句上设置的标记。当程序执行到该语句时，调试器会被触发并暂停执行（从技术上讲，它会中断），直到指示继续执行。如果没有断点，只要调试器处于活动状态，代码就会正常运行。
- en: The debugger will automatically stop the execution of the code only when it
    encounters an error, or if it has been instructed in the `launch.json` file to
    break on record changes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器仅在遇到错误时，或在 `launch.json` 文件中指示在记录更改时停止代码执行。
- en: A developer could also use the debugger to find potential logic errors since
    the debugger enables them to execute AL code syntax, one statement at a time,
    while inspecting the contents of variables at each runtime step. In this way,
    the developer can check and match what is expected when they have designed the
    application extension.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者还可以使用调试器来查找潜在的逻辑错误，因为调试器使他们能够一次执行一条 AL 代码语句，同时检查每个运行步骤中变量的内容。通过这种方式，开发者可以在设计应用扩展时检查并匹配预期的结果。
- en: 'You can run the debugger from Visual Studio Code in three ways:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过三种方式从 Visual Studio Code 运行调试器：
- en: Click Debug | Start Debugging.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击调试 | 开始调试。
- en: Press the *F5* shortcut key.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按下 *F5* 快捷键。
- en: 'Go to DEBUG view (*Ctrl* + *Shift* + *D*) and press the green right arrow in
    the top bar. The top bar also shows the debugger session name specified in the
    `launch.json` file. It will open that file if you press the gear icon. The last
    icon on the right enables and shows the debug console, which typically shows contextual
    debugging information. The following screenshot depicts the debugger top bar:'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转到 DEBUG 视图（*Ctrl* + *Shift* + *D*），并按下顶部栏中的绿色右箭头。顶部栏还会显示 `launch.json` 文件中指定的调试会话名称。如果点击齿轮图标，将打开该文件。最右边的图标启用并显示调试控制台，通常会显示上下文调试信息。以下截图展示了调试器顶部栏：
- en: '![](img/54b917df-9f4b-4362-adb7-1a008613f6aa.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/54b917df-9f4b-4362-adb7-1a008613f6aa.png)'
- en: These actions will result in building your extension (equivalent to *Ctrl* +
    *Shift* + *B*), if this has not already been done, and then publishing the extension
    in the target online sandbox tenant.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这些操作将导致构建你的扩展（相当于 *Ctrl* + *Shift* + *B*），如果这还没有完成，然后将扩展发布到目标在线沙箱租户中。
- en: 'Since the release of Dynamics 365 Business Central Spring 2019, it is now possible
    to run a debugger session without the need to build and publish the extension
    over and over again. This helps reduce the debug cycle and increases development
    productivity. To try this, in Visual Studio Code just hit *Ctrl* + *Shift* + *F5*,
    or run the Command Palette (*Ctrl* + *P*) and search for `AL: Debug without publishing`.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '自从 Dynamics 365 Business Central 2019 春季版发布以来，现在可以在不需要反复构建和发布扩展的情况下运行调试会话。这有助于减少调试周期并提高开发生产力。要尝试此功能，只需在
    Visual Studio Code 中按 *Ctrl* + *Shift* + *F5*，或者运行命令面板（*Ctrl* + *P*），并搜索 `AL:
    Debug without publishing`。'
- en: 'The `launch.json` file contains some elements that influence the debugging
    behavior and its target. The following is a list of them and what they do:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`launch.json` 文件包含一些影响调试行为及其目标的元素。以下是它们及其作用的列表：'
- en: '`BreakOnError`: Specifies whether the debugger should stop when it hits an
    error.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BreakOnError`：指定当遇到错误时，调试器是否应停止。'
- en: '`BreakOnRecordWrite`: Specifies whether the debugger should stop on record
    changes (typically record create or update).'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BreakOnRecordWrite`：指定调试器是否应在记录更改时停止（通常是记录创建或更新）。'
- en: '`Tenant`: Specifies the **Azure Active Directory** (**AAD**) tenant in which
    to create the debugger session.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tenant`：指定**Azure Active Directory**（**AAD**）租户，用于创建调试会话。'
- en: '`SandboxName`: With the April 2019 update, it is possible to have multiple
    sandbox tenants. This parameter will let the developer specify the name of the
    sandbox to which to connect the debugger session.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SandboxName`：自2019年4月更新以来，可以拥有多个沙箱租户。此参数允许开发人员指定要连接调试会话的沙箱名称。'
- en: 'Also, the `app.json` file contains a parameter that is vital for the debugger
    to work against specific extension code: `ShowMyCode`.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`app.json`文件包含一个对于调试器作用于特定扩展代码至关重要的参数：`ShowMyCode`。
- en: 'If you publish and debug the extension as-is, it does not need to have this
    value set: it would work as implicitly set to `true`.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发布并调试该扩展，且没有显式设置此值，它将作为隐式设置为`true`进行工作。
- en: Nevertheless, if the code needs to be debugged from other extensions (and different
    Visual Studio Code sessions), since the default value for `ShowMyCode` is `false`,
    this parameter must be explicitly declared and set to `true`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果需要调试来自其他扩展的代码（以及不同的Visual Studio Code会话），由于`ShowMyCode`的默认值是`false`，必须明确声明该参数并将其设置为`true`。
- en: Be careful when handling the `ShowMyCode` parameter, since it not only lets
    you debug code, but also enables users to download the source code for the extension.
    This parameter enables or disables the download source code action from the Extension
    management menu in the client.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理`ShowMyCode`参数时需要小心，因为它不仅允许你调试代码，还使用户能够下载扩展的源代码。此参数启用或禁用客户端扩展管理菜单中的下载源代码操作。
- en: Visual Studio Code debugger sections
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Visual Studio Code 调试器区域
- en: The DEBUG view provides several sections and output windows to inspect, step
    by step, what's currently executing, the variable assignment status, and the code
    process flow. Additionally, since the release of Dynamics 365 Business Central
    Spring 2019, it is also possible to have some insight into code performance by
    gathering the longest-running database queries.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: DEBUG 视图提供了多个部分和输出窗口，用于逐步检查当前执行的内容、变量分配状态以及代码流程。此外，自Dynamics 365 Business Central
    2019春季版发布以来，还可以通过收集最长运行的数据库查询来获得代码性能的某些见解。
- en: 'Consider the following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考以下截图：
- en: '![](img/a8e50ef0-1f0a-4c49-a6ac-2e7994681090.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a8e50ef0-1f0a-4c49-a6ac-2e7994681090.png)'
- en: 'The debugger is basically divided into four sections: sidebar, toolbar, editor,
    and output windows. The editor window will highlight where the code is currently
    stopped. This is typically marked in yellow. The debug console, in the output
    window section, will show debugging information.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器基本上分为四个区域：侧边栏、工具栏、编辑器和输出窗口。编辑器窗口会高亮显示当前代码停止的位置，通常用黄色标记。调试控制台则显示调试信息，位于输出窗口部分。
- en: Let's examine each of these areas in the following sections.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将分别查看这些区域。
- en: Debugger sidebar
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试器侧边栏
- en: The sidebar is enabled by default and is located on the left side of the debugger.
    It is possible to switch the position with the editor (right-click in one of the
    sections and select Move SideBar Right), hide it (*Ctrl* + *B*), or even just
    hide some of the sections (right-click in one of the sections and uncheck the
    section(s) that you need to keep hidden).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 侧边栏默认启用，位于调试器的左侧。可以与编辑器交换位置（右键点击其中一个区域并选择“移动侧边栏到右侧”），隐藏它（*Ctrl* + *B*），或者仅隐藏某些区域（右键点击其中一个区域并取消勾选需要隐藏的区域）。
- en: The sidebar is divided into four sections, which are used to provide information
    related to the current code flow. Let's go through them here.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 侧边栏分为四个区域，用于提供与当前代码流相关的信息。我们将在这里逐一介绍它们。
- en: Variables
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量
- en: 'The VARIABLES section provides an overview of global and local variable assignments:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: VARIABLES部分提供了全局和局部变量分配的概览：
- en: '![](img/91ea222a-a993-4d38-b643-9b6804d2a07d.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/91ea222a-a993-4d38-b643-9b6804d2a07d.png)'
- en: 'In the Locals section, it is also possible to check performance counters that
    are related to code execution:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地变量（Locals）部分，还可以检查与代码执行相关的性能计数器：
- en: '![](img/1f8b0dd5-b2cc-4e09-a7ff-63187e90ba23.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f8b0dd5-b2cc-4e09-a7ff-63187e90ba23.png)'
- en: 'In particular, it is possible to measure the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 特别地，可以测量以下内容：
- en: 'Current SQL latency (ms): When the debugger hits a breakpoint, the Dynamics
    365 Business Central Server service will send a probing SQL statement to the Azure
    SQL database and keep track of how long it takes to receive an answer. This information
    is helpful if the sandbox node for the tenant has healthy latency or there are
    infrastructure issues.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前SQL延迟（毫秒）：当调试器命中断点时，Dynamics 365 Business Central Server服务将向Azure SQL数据库发送一个探测SQL语句，并跟踪接收答复的时间。此信息对了解租户的沙箱节点是否具有健康的延迟或是否存在基础设施问题非常有帮助。
- en: 'Number of SQL executes: The total number of SQL statements executed in the
    session since the debugger was started.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL执行次数：自调试器启动以来会话中执行的SQL语句的总次数。
- en: 'Number of SQL row reads: The total number of database rows read since the debugger
    was started.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL行读取数量：自调试器启动以来读取的数据库行的总数。
- en: 'Top-10 long-running queries: Expanding the Last Executed SQL Statements section,
    you might observe up to 10 SQL Server statement entries (numbered from 0 to 9).
    The statements represent the 10 least performant queries, in terms of duration,
    that have been executed since the session started up, to the first breakpoint
    hit. These are defined by the following elements:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前10个长时间运行的查询：展开“最近执行的SQL语句”部分，你可以观察到最多10条SQL Server语句条目（编号从0到9）。这些语句表示自会话启动以来至第一次命中断点的10个执行时长最久的查询。这些由以下元素定义：
- en: '**Statement***:* The T-SQL statement executed.'
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语句**：已执行的T-SQL语句。'
- en: '**Execution time (UTC)**: A timestamp defining when the SQL statement was executed.'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**执行时间（UTC）**：定义SQL语句执行时间的时间戳。'
- en: '**Duration (ms)**: The duration of the total execution time of the SQL statement.
    It''s useful to analyze this if there are some missing indexes when developing
    extensions.'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续时间（毫秒）**：SQL语句的总执行时间。若在开发扩展时缺少索引，这一点非常有用。'
- en: '**Rows read**: Shows the approximate number of rows read by the SQL statement.
    It might be useful when looking for missing filters when developing extensions.'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**读取的行数**：显示SQL语句读取的近似行数。在开发扩展时查找缺失的过滤器时，这可能非常有用。'
- en: Watch
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 观察
- en: 'The *Watch* section is used to monitor variables of particular interest while
    debugging. It is possible to right-click on the name of the variable that you
    want to watch from the `Variables` window or in the code editor while debugging:
    this will display the value of the watched variable. In this window, you can also
    insert the names of the variables that you want to monitor into the watch list while
    debugging.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*观察*部分用于在调试时监视特定感兴趣的变量。可以在`变量`窗口中或在调试时在代码编辑器中右键单击要观察的变量名称，这将显示被观察变量的值。在此窗口中，还可以将要监视的变量名称插入到调试时的观察列表中。'
- en: Callstack
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调用堆栈
- en: Variable values and expression evaluations are relative to the selected stack
    frame. This will report a cascade/stack of objects in descending execution order.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 变量值和表达式评估相对于选定的堆栈帧。这将报告一个按执行顺序降序排列的对象级联/堆栈。
- en: Breakpoints
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 断点
- en: This shows a list of available breakpoints that could be enabled, disabled,
    or reapplied at will. Breakpoints can be toggled in the Visual Studio Code editor
    window by clicking in the left margin or by pressing *F9* in a selected line.
    Breakpoints that are displayed in the editor margin are shown as red-filled circles.
    Disabled breakpoints have a filled gray circle.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了可启用、禁用或随意重新应用的可用断点列表。可以通过单击左侧边距或按下*F9*在选定行中切换断点。显示在编辑器边距中的断点显示为红色实心圆。禁用的断点为灰色实心圆。
- en: Breakpoints that cannot be assigned to any code in the debugger session are
    shown with a gray hollow circle.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 无法分配给调试器会话中的任何代码的断点显示为灰色空心圆。
- en: Debugger toolbar
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试器工具栏
- en: 'The toolbar contains commands that pause, stop, restart, or control the debugging
    process. The following screenshot shows a debugger toolbar:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 工具栏包含暂停、停止、重启或控制调试过程的命令。以下截图展示了调试器工具栏：
- en: '![](img/e4f72b51-8679-412c-97c7-88bca06c68dc.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e4f72b51-8679-412c-97c7-88bca06c68dc.png)'
- en: 'Possible actions are as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 可执行的操作如下：
- en: Continue (*F5*).
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继续 (*F5*)。
- en: Pause (*F6*).
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暂停 (*F6*)。
- en: 'Restart (*Shift* + *F11*): Depicted by the green circular arrow in.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重启 (*Shift* + *F11*)：由绿色圆形箭头表示。
- en: 'Stop (*Shift* + *F5*): Depicted by the red square: The debugger toolbar commands
    allow you to continue (*F5*) the process until it comes to an end. In this way,
    developers can continue with their iterative process and start the operation again
    without running a new web client session in debug mode. The process could also
    be paused (*F6*)—the debugger session is still alive; restarted (*S**hift* + *F11*)—it
    will create a new debugger session; or definitively stopped (*S**hift* + *F5*)—the
    debugger session is closed.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 停止（*Shift* + *F5*）：由红色方块表示：调试器工具栏命令允许您继续（*F5*）进程，直到结束。通过这种方式，开发人员可以继续其迭代过程并在不启动新的
    Web 客户端调试会话的情况下重新开始操作。该过程还可以被暂停（*F6*）——调试会话仍然存在；重新启动（*Shift* + *F11*）——它将创建一个新的调试会话；或彻底停止（*Shift*
    + *F5*）——调试会话被关闭。
- en: Step Over (*F10*): All statements are executed one at a time. If this command
    is used, when a function call is reached, the function is executed without the
    debugger stepping through the function instructions. If there is a breakpoint
    in one of the functions that it has been instructed to step over, the debugger
    will break at that breakpoint in any case.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步过（*F10*）：所有语句逐个执行。如果使用此命令，当遇到函数调用时，函数将被执行而不进入该函数的调试步骤。如果在其被指示跳过的函数中有断点，调试器仍会在该断点处中断。
- en: Step Into (*F11*): All statements are executed one at a time. If this command
    is used, when a function call is reached, the debugger will step through all the
    function's instructions.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步入（*F11*）：所有语句逐个执行。如果使用此命令，当遇到函数调用时，调试器将逐步执行该函数的所有指令。
- en: Step Out (*Shift* + *F11*): It will skip the current function and jump into
    the next one.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳出（*Shift* + *F11*）：它会跳过当前函数并进入下一个函数。
- en: Debugging in attach mode
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附加模式调试
- en: With the Dynamics 365 Business Central October 2019 update, the ability to debug,
    not only by launching a new debug session, but also by attaching the debugger
    to the next new session that is created by the application) has been introduced.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 Dynamics 365 Business Central 2019年10月更新，引入了调试功能，不仅可以通过启动新的调试会话进行调试，还可以通过将调试器附加到应用程序创建的下一个新会话来进行调试。
- en: 'This capability currently has some limitations, and the following table explains
    its support scenario:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 该功能当前有一些限制，以下表格说明了其支持场景：
- en: '| **Deployment type** | **Web client** | **Web service** | **Background session**
    |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| **部署类型** | **Web 客户端** | **Web 服务** | **后台会话** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| On-premises | Supported | Supported | Supported |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 本地部署 | 支持 | 支持 | 支持 |'
- en: '| Online sandbox | Not supported | Supported | Not supported |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 在线沙箱 | 不支持 | 支持 | 不支持 |'
- en: To enable the attach process, it is mandatory to add a new configuration parameter
    set to the extensions `launch.json` file.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用附加过程，必须在扩展的 `launch.json` 文件中添加一个新的配置参数。
- en: 'The key parameters that need to be specified are as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 需要指定的关键参数如下：
- en: '`"request": "attach"`: In a typical debugging scenario, this parameter is set
    to default its value: `launch`.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"request": "attach"`：在典型的调试场景中，此参数默认值为 `launch`。'
- en: '`"breakOnNext" : "WebServiceClient"` : With online sandboxes, the only option
    allowed is `"WebServiceClient"`, while with on-premise and Docker-based sandboxes,
    it is also possible to attach the debugger to the `"WebClient"` or `"Background"`
    sessions.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"breakOnNext" : "WebServiceClient"`：在在线沙箱中，唯一允许的选项是 `"WebServiceClient"`，而在本地和基于
    Docker 的沙箱中，也可以将调试器附加到 `"WebClient"` 或 `"Background"` 会话。'
- en: To find out more about how to attach the debugger, visit [https://demiliani.com/2019/10/25/dynamics-365-business-central-debugging-the-base-application/](https://demiliani.com/2019/10/25/dynamics-365-business-central-debugging-the-base-application/).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于如何附加调试器的信息，请访问 [https://demiliani.com/2019/10/25/dynamics-365-business-central-debugging-the-base-application/](https://demiliani.com/2019/10/25/dynamics-365-business-central-debugging-the-base-application/)。
- en: Non-debuggable items
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不可调试项
- en: Typically, developers would like to have a full debugging experience on every
    extension line of code. There are some circumstances where a specific variable
    or function should not show its current value. These circumstances are typically
    related to variables that store private information, or functions that return
    private values (such as user passwords or license checks).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，开发人员希望在每个扩展代码行上都能进行完整的调试体验。在某些情况下，某些特定的变量或函数不应显示其当前值。这些情况通常与存储私人信息的变量或返回私密值（如用户密码或许可证检查）的函数相关。
- en: When developing extensions, there is a special attribute that can be used with
    functions and/or variables that stop them from being processed (the debugger cannot
    step into them) or visible (variables and/or function output values are not shown)
    within the debugger. Writing the `[NonDebuggable]` statement before the declaration
    of a function or a variable would mean that they are not inspectable, and no breakpoints
    could be set against them.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发扩展时，有一个特殊的属性可以与函数和/或变量一起使用，阻止它们被处理（调试器无法逐步进入它们）或在调试器中不可见（变量和/或函数输出值不显示）。在函数或变量声明之前编写`[NonDebuggable]`语句意味着它们不可检查，并且无法在其上设置断点。
- en: 'In `Report 50111 Item Ledger Entry Analysis`, created in [Chapter 7](81958c15-06a3-4a59-ae0c-0afa9413d6f9.xhtml),
    *Report Development with AL*, add a breakpoint in the `OnPreReport` trigger in
    the very first statement, `if includeLogo then begin`, as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](81958c15-06a3-4a59-ae0c-0afa9413d6f9.xhtml)中创建的`报告50111项总账分录分析`，*AL报告开发*，在`OnPreReport`触发器中的第一条语句`if
    includeLogo then begin`处添加一个断点，如下所示：
- en: '![](img/46f91056-50f9-49e5-bc4a-a24dbc5670b1.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/46f91056-50f9-49e5-bc4a-a24dbc5670b1.png)'
- en: And after that, just publish the extension (*F5*).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，再次发布扩展（*F5*）。
- en: When the client loads, search for `packt report`, and when the `Item Ledger
    Entry Analysis` report record is shown, click on it, choose to include the logo
    in the request page, and click Preview.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端加载时，搜索`packt report`，当`项总账分录分析`报告记录显示时，点击它，选择在请求页面中包含徽标，然后点击预览。
- en: The debugger will stop precisely in the `OnPreReport` breakpoint that was just
    added.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器将在刚刚添加的`OnPreReport`断点处准确停止。
- en: 'Now, press *F11* twice to move the code execution down to run the `Get` statement
    in the `Company Information` table:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按*F11*两次，将代码执行移到运行`公司信息`表中的`Get`语句：
- en: '![](img/e115d75c-4504-4b5a-bb12-c1b7d840a928.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e115d75c-4504-4b5a-bb12-c1b7d840a928.png)'
- en: 'If you expand the VARIABLES section in the debugger activity pane, you might
    notice that the `Company Information` (named `CompanyInfo`) record can be expanded,
    and you can see all its values:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在调试器活动窗格中展开**变量**部分，你可能会注意到可以展开`公司信息`（命名为`CompanyInfo`）记录，并且可以看到它的所有值：
- en: '![](img/e74f8ff3-d1a1-4e21-8547-a143ed003e54.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e74f8ff3-d1a1-4e21-8547-a143ed003e54.png)'
- en: 'Stop the debugger (S*hift *+ *F5*) and add the non-debuggable attribute before
    the `Company Information` global variable, as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 停止调试器（*Shift* + *F5*），并在`公司信息`全局变量之前添加非调试属性，如下所示：
- en: '[PRE0]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Publish the extension (*F5*) again.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 再次发布扩展（*F5*）。
- en: 'When the client loads, search for `packt report` and perform the same action
    as before to preview the report: the debugger will stop once again in the same
    place.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端加载时，搜索`packt report`并执行与之前相同的操作来预览报告：调试器会再次在相同位置停止。
- en: 'Press *F11* twice to move the code execution down to run the `Get` statement
    in the `Company Information` table and retrieve the record data. Now, if you expand
    the VARIABLES section, you might notice that the `Company Information` record
    is not even shown:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 按*F11*两次，将代码执行移到运行`公司信息`表中的`Get`语句，并检索记录数据。现在，如果你展开**变量**部分，你可能会注意到`公司信息`记录甚至没有显示：
- en: '![](img/e06564fd-9917-40f8-b45a-99c2c2515a99.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e06564fd-9917-40f8-b45a-99c2c2515a99.png)'
- en: Hovering the mouse in any `CompanyInfo` statement in the code editor will result
    in an `<Out of Scope>` message, due to the presence of the `[NonDebuggable]` attribute
    in the runtime action.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码编辑器中，将鼠标悬停在任何`CompanyInfo`语句上，将会显示`<Out of Scope>`消息，这是由于运行时操作中存在`[NonDebuggable]`属性。
- en: Mastering debugger issues
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精通调试器问题
- en: In some real-world scenarios, it might be that, for some reason, the debugger
    will not start and it will report an unhandled error message in the output window;
    or you might simply need to keep track of the debugger service process. In other
    words, you might need to debug the debugger. After all, the debugger is just another
    software artifact.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些实际应用场景中，可能会出现某些原因导致调试器无法启动，并且会在输出窗口中报告未处理的错误消息；或者你可能只是需要跟踪调试器服务进程。换句话说，你可能需要调试调试器。毕竟，调试器也是另一种软件工具。
- en: 'To gain more insight and verbose diagnostics, there is an undocumented feature
    that you need to enable by entering a specific parameter in the `settings.json`
    file in order to use:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 若要获得更多的调试信息和详细诊断，有一个未记录的功能，你需要通过在`settings.json`文件中输入特定的参数来启用它：
- en: '[PRE1]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once it's enabled, you need to restart Visual Studio Code to make the changes
    effective across the application.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启用，你需要重新启动 Visual Studio Code，以便使更改在整个应用程序中生效。
- en: This parameter will instruct the AL Language extension to create a verbose logging
    activity for the code editor (`EditorServices.log`), and the debugger (`DebuggerServices.log`)
    in the following `C:\Users\<USER>\.vscode\extensions\ms-dynamics-smb.al-3.0.121490\bin` directory.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 此参数将指示AL语言扩展在以下目录`C:\Users\<USER>\.vscode\extensions\ms-dynamics-smb.al-3.0.121490\bin`中为代码编辑器(`EditorServices.log`)和调试器(`DebuggerServices.log`)创建详细的日志活动。
- en: '`ms-dynamics-smb.al-3.0.121490` represents the AL Language extension name and
    version that are registered in the current Visual Studio Code session.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`ms-dynamics-smb.al-3.0.121490`表示在当前Visual Studio Code会话中注册的AL语言扩展的名称和版本。'
- en: 'The following is a snippet of the logged activity for the debugger service
    showing its processing:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是调试器服务的活动日志片段，显示其处理过程：
- en: '[PRE2]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the next section, we'll see how you can use code analyzers when developing
    with AL.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，我们将看到如何在使用AL进行开发时使用代码分析器。
- en: Understanding code analyzers
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解代码分析器
- en: The AL language proactive debugging experience is greatly enhanced by code analyzers.
    Code analyzers are part of the standard AL Language extension, and are a set of
    contextual rules that are applied to extension development. These rules can generate
    an error or a warning when you're developing an extension.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: AL语言的主动调试体验通过代码分析器得到了极大的增强。代码分析器是标准AL语言扩展的一部分，是一组应用于扩展开发的上下文规则。这些规则在开发扩展时可以生成错误或警告。
- en: Code analyzers can be enabled and disabled at will, both per workspace and globally.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 代码分析器可以随时在每个工作区和全局范围内启用或禁用。
- en: 'To enable code analyzers, perform the following steps:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用代码分析器，请执行以下步骤：
- en: Go to File | Preferences | Settings (Workspace settings) | Extension | AL language
    extension and choose to edit the `settings.json` file.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 转到文件|首选项|设置（工作区设置）|扩展|AL语言扩展，并选择编辑`settings.json`文件。
- en: You could also choose to edit the `settings.json` file by choosing user settings.
    However, since you might develop per-tenant extensions and also AppSource apps
    in the same environment, it would make more sense to have these enabled per workspace
    instead of per user settings.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以选择通过选择用户设置来编辑`settings.json`文件。然而，由于您可能会在同一环境中开发每租户扩展和AppSource应用程序，因此在每个工作区启用这些功能比在每个用户设置中启用更为合理。
- en: 'In the `settings.json` file, it is possible to specify the following parameters:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在`settings.json`文件中，可以指定以下参数：
- en: '[PRE3]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Changing this parameter to `true` enables the analyzers that are specified in
    the JSON array parameter, `al.codeAnalyzers`. If no analyzers are specified, or
    there is no `al.codeAnalyzers` entry, it is assumed that all analyzers are enabled.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 将此参数更改为`true`时，将启用在JSON数组参数`al.codeAnalyzers`中指定的分析器。如果没有指定分析器，或者没有`al.codeAnalyzers`条目，则假定启用所有分析器。
- en: al.codeAnalyzers[]
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: al.codeAnalyzers[]
- en: 'The `al.codeAnalyzers[]` parameter represents an array of code analyzers. Currently,
    the supported values and the official links to the appropriate rules, ordered
    by ID, are as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`al.codeAnalyzers[]`参数表示一个代码分析器数组。目前，支持的值及其官方链接，按ID排序如下：'
- en: '`"${AppSourceCop}"`: This must be enabled when developing apps targeted for
    the AppSource marketplace. To find out more, visit [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/analyzers/appsourcecop](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/analyzers/appsourcecop).'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"${AppSourceCop}"`：在开发面向AppSource市场的应用程序时，必须启用此项。要了解更多信息，请访问[https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/analyzers/appsourcecop](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/analyzers/appsourcecop)。'
- en: '`"${CodeCop}"`: This strengthens the standard AL Language development guidelines,
    and it is recommended that it is enabled for every kind of development target. To
    find out more, visit [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/analyzers/codecop](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/analyzers/codecop).'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"${CodeCop}"`：此项加强了标准AL语言开发指南，建议在每种开发目标中启用。要了解更多信息，请访问[https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/analyzers/codecop](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/analyzers/codecop)。'
- en: '`"${PerTenantExtensionCop}"`: Together with `CodeCop`, it should be enabled
    on every online development target, except when developing extensions for the
    AppSource marketplace, where `AppSourceCop` should be used. To find out more,
    visit [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/analyzers/pertenantextensioncop](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/analyzers/pertenantextensioncop).'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"${PerTenantExtensionCop}"`：与`CodeCop`一起，应该在每个在线开发目标上启用，除非是在为AppSource市场开发扩展，此时应使用`AppSourceCop`。欲了解更多信息，请访问[https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/analyzers/pertenantextensioncop](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/analyzers/pertenantextensioncop)。'
- en: '`"${UICop}"`: This is the last addition to the code analyzers, and it checks
    that the code matches the features that are supported by modern clients, and avoids
    hitting user interface limitations. To find out more, visit [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/analyzers/uicop](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/analyzers/uicop).'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"${UICop}"`：这是代码分析器的最新添加项，它检查代码是否符合现代客户端支持的功能，并避免出现用户界面的限制。欲了解更多信息，请访问[https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/analyzers/uicop](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/analyzers/uicop)。'
- en: al.ruleSetPath
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: al.ruleSetPath
- en: This is the path for a ruleset file that contains changes to the rules that
    are provided through standard code analyzers.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个规则集文件的路径，文件中包含通过标准代码分析器提供的规则变更。
- en: A ruleset file is written in JSON notation, and has a reference to an existing
    ruleset item ID that is implemented in the standard AL Language extension. This
    file is typically edited to redefine the importance of the rules within a specific
    extension project or workspace.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 规则集文件采用JSON表示法，并引用了一个在标准AL语言扩展中实现的现有规则集项ID。这个文件通常用于重新定义规则在特定扩展项目或工作区中的重要性。
- en: 'If we implement code analyzers in the demo extension project that we have created,
    it will help us to find out more info about our code style, and whether there
    are improvements to be applied. Let''s enable the relevant analyzers for our extension
    project by changing the `settings.json` file in our `workspace` settings as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在所创建的示例扩展项目中实现代码分析器，它将帮助我们获取更多关于代码风格的信息，以及是否有改进之处。让我们通过更改`workspace`设置中的`settings.json`文件来启用相关的分析器：
- en: '[PRE4]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the PROBLEMS window, there might now be a bunch of records with errors,
    warnings, and information. Considering only those that are related to `Report
    50111 ItemLedgerEntryAnalysis.al`, there should be one error, two warnings, and
    one piece of useful information. Take a look at the following screenshot:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在“问题”窗口中，现在可能会有许多包含错误、警告和信息的记录。如果只考虑与`Report 50111 ItemLedgerEntryAnalysis.al`相关的记录，应该会有一个错误、两个警告和一条有用的信息。请看下面的截图：
- en: '![](img/935a4681-d1ca-4945-b66a-a48ff80cca5d.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/935a4681-d1ca-4945-b66a-a48ff80cca5d.png)'
- en: 'Looking at the error, this is pretty clear: the `includeLogo` column definition
    does not have its `ApplicationArea` property defined. For this reason, it will
    not be visible within the application, because the `ApplicationArea` property
    must be explicitly declared.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 看看错误信息，问题很明显：`includeLogo`列定义没有定义其`ApplicationArea`属性。因此，它在应用程序中将不可见，因为`ApplicationArea`属性必须显式声明。
- en: Just click on the error line in the PROBLEM window, the one marked by ID AL(PTE0008).
    This action will result in placing the focus of the cursor in the `includeLogo`
    field definition within the code editor.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 只需点击“问题”窗口中的错误行，即标记为ID AL(PTE0008)的那一行。此操作会将光标聚焦在代码编辑器中的`includeLogo`字段定义上。
- en: 'Add the `ApplicationArea` property for the `includelogo` column in the request
    page as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为请求页面中的`includelogo`列添加`ApplicationArea`属性，如下所示：
- en: '[PRE5]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You might notice that the error in the PROBLEMS window suddenly disappears.
    Moreover, the report is moved down in the object stack in the PROBLEMS window:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会注意到，“问题”窗口中的错误突然消失了。而且，报告在“问题”窗口中的对象堆栈中向下移动了：
- en: '![](img/10314588-5cd4-4dd4-bece-4a88cc48c8b3.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/10314588-5cd4-4dd4-bece-4a88cc48c8b3.png)'
- en: This happened because the problems record stack is ordered by descending priority,
    hence `Table 50103 Packt Extension Setup`, which contains an error, is moved to
    the top of the object list to be reviewed first, before warnings and info.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况发生是因为问题记录堆栈按优先级降序排列，因此包含错误的`Table 50103 Packt Extension Setup`被移到对象列表的顶部，首先进行审核，而警告和信息则排在其后。
- en: A rule's importance value can be changed at will by creating a JSON file that
    contains the IDs of the rules that need to be changed and how they have to be
    set according to your company's development rules.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 规则的重要性值可以通过创建一个JSON文件来随意更改，该文件包含需要更改的规则ID，以及根据公司开发规则如何设置它们。
- en: 'Let''s create a directory in the extension''s main folder called `.ruleset`,
    and create a file called `demo.ruleset.json`:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在扩展的主文件夹中创建一个名为`.ruleset`的目录，并创建一个名为`demo.ruleset.json`的文件：
- en: '![](img/80f5e91e-008c-465b-94e5-1f8937111c47.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/80f5e91e-008c-465b-94e5-1f8937111c47.png)'
- en: 'Open `demo.ruleset.json`, and invoke the `truleset` standard snippet to write
    the following:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`demo.ruleset.json`，并调用`truleset`标准代码片段，编写以下内容：
- en: '[PRE6]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this way, we would like to instruct the AL Language code analyzer to avoid
    adding a warning record in the problems window for the rule whose ID is `AA008`.
    Word for word, the rule is <q>"Function calls should have parentheses even if
    they do not have any parameters."</q>
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们希望指示AL语言代码分析器避免为ID为`AA008`的规则在问题窗口中添加警告记录。逐字翻译，该规则是<q>"函数调用应该有括号，即使没有参数。"</q>
- en: 'The last step to make it work is to assign the `.alRuleSetPath` parameter to
    point to the newly created file:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 使其生效的最后一步是将`.alRuleSetPath`参数指向新创建的文件：
- en: '[PRE7]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When you assign the path to a ruleset file, it is recommended that you save
    all files and close and reopen Visual Studio Code, in order to be sure that there
    are no permission errors, and access the ruleset file by the current process.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当你为规则集文件分配路径时，建议保存所有文件并关闭并重新打开Visual Studio Code，以确保没有权限错误，并且当前进程能够访问规则集文件。
- en: 'Once the ruleset file is in place, there should not be any warnings in the
    PROBLEMS window related to opened and closed parentheses, and the number of records
    shown in the problems should be reduced. This can be seen in the following:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦规则集文件到位，PROBLEMS窗口中不应再出现与打开和关闭括号相关的警告，问题中显示的记录数应该会减少。可以通过以下方式查看：
- en: '![](img/36eb13e7-90db-4386-bc24-cb81c95ebab7.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/36eb13e7-90db-4386-bc24-cb81c95ebab7.png)'
- en: There are still 19 elements that need to be evaluated in order to be compliant
    with the AL best coding practice. Takeaways at this stage are that they should
    make good use of these rules in their own company and discuss what needs to be
    promoted higher, maintained as-is, or be completely turned off.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然有19个元素需要评估，以便符合AL最佳编码实践。此阶段的要点是，他们应该在自己的公司中充分利用这些规则，并讨论需要提升、保持现状或完全关闭的规则。
- en: Be careful when enabling code analyzers, since they might increase memory consumption
    (RAM) in the development machine.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 启用代码分析器时要小心，因为它们可能会增加开发机器的内存消耗（RAM）。
- en: We saw here how to improve the quality of your code by activating AL code analyzers.
    In the next section, we'll see how you can use *Event Recorder* when developing
    extensions with Dynamics 365 Business Central.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里展示了如何通过激活AL代码分析器来提高代码质量。在下一部分，我们将看到如何在使用Dynamics 365 Business Central开发扩展时使用*事件记录器*。
- en: Understanding Event Recorder
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解事件记录器
- en: We all know that Dynamics 365 Business Central online development can only be
    done through extensions. Accessing code base extensibility is guaranteed by subscribing
    to standard event publishers.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都知道，Dynamics 365 Business Central的在线开发只能通过扩展进行。访问代码库的可扩展性通过订阅标准事件发布者来保证。
- en: Considering that there are several thousands of standard event publishers all
    over the application and the number is growing with every online update, finding
    the right spot to hook up a standard publisher is sometimes as hard as trying
    to find the proverbial needle in the haystack.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到应用程序中有数千个标准事件发布者，并且随着每次在线更新，这个数字还在增加，找到一个合适的地方来挂接标准发布者有时就像是试图在大海捞针一样困难。
- en: The recommended way to find out the appropriate entry point at which to subscribe
    is to use the Event Recorder.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 查找适当的订阅入口点的推荐方法是使用事件记录器。
- en: This application feature is a must if you do not know what standard objects
    are, or you do not have access to the third-party source code in order to look
    at publisher definitions (in the event the code you subscribe to is part of a
    third-party extension or a private IP).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不了解标准对象是什么，或者没有访问第三方源代码的权限（以查看发布者定义，假设您订阅的代码是第三方扩展或私有知识产权的一部分），那么这个应用功能是必须的。
- en: 'There are two ways to enable this feature:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方式启用此功能：
- en: 'From Visual Studio Code: Open an extension source code project that defines
    a suitable sandbox connection in the `launch.json` file. Run the Command Palette
    (*Ctrl* + *Shift* + *P*) and then select AL: Open Events Recorder.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '从 Visual Studio Code：打开定义了合适沙盒连接的扩展源代码项目，在`launch.json`文件中。运行命令面板（*Ctrl* +
    *Shift* + *P*），然后选择 AL: 打开事件记录器。'
- en: 'Connect to your production or sandbox tenant and search for `Event Recorder`:
    The Event Recorder page offers a very simple action menu called **Record Events**
    with a Start and Stop button.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到您的生产或沙盒租户，并搜索 `Event Recorder`：事件记录器页面提供了一个非常简单的操作菜单，名为 **记录事件**，具有“开始”和“停止”按钮。
- en: By simply pressing Start, the Event Recorder is activated and is ready to track
    the code processing flow.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 只需按下“开始”，事件记录器将被激活并准备跟踪代码处理流程。
- en: 'It is crucial to understand that the Event Recorder session will capture absolutely
    everything that the code is executing; therefore it is recommended you opt for
    one of the following actions:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 需要明确理解的是，事件记录器会捕获代码执行的所有内容；因此，建议您采取以下其中一种措施：
- en: Go to the Event Recorder page in one browser tab (let's call it TAB 1) and then
    create a new tab (TAB 2) where you browse to the page where you would like to
    start recording events. Then, start the Event Recorder in TAB 1 and start performing
    the actions that are needed to track the business process flow in TAB 2\. When
    finished, go back to TAB 1 and stop the Event Recorder.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一个浏览器标签页中转到事件记录器页面（我们称之为 TAB 1），然后创建一个新标签页（TAB 2），在其中浏览到您希望开始记录事件的页面。然后，在 TAB
    1 中启动事件记录器，并开始在 TAB 2 中执行所需的操作，以跟踪业务流程。当完成时，返回 TAB 1 停止事件记录器。
- en: Browse to the page where you would like to start recording events (TAB 1,) and
    in a new tab (TAB 2) go to the Event Recorder page and start it. Back in TAB 1,
    perform the actions that are needed to track the process and, when you're finished,
    stop event recording in TAB 2.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览到您希望开始记录事件的页面（TAB 1），然后在新标签页（TAB 2）中转到事件记录器页面并启动它。返回 TAB 1，执行需要跟踪流程的操作，完成后，在
    TAB 2 停止事件记录。
- en: 'The page will refresh and display the records inserted in a temporary table
    in order of code execution, as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 页面将刷新并按代码执行顺序显示插入临时表中的记录，如下所示：
- en: '![](img/72dfcdbb-a870-449c-b523-6b2e82a7139e.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/72dfcdbb-a870-449c-b523-6b2e82a7139e.png)'
- en: Event Recorder in action
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 事件记录器正在运行
- en: Since these are records stored in a temporary table, they are volatile in memory
    and are not stored in the database. You now have the full list of events that
    were triggered during your business process, and from here you can find the right
    entry points to use for your customizations.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些记录存储在临时表中，它们在内存中是易失的，并且不会存储在数据库中。现在，您已经拥有了在业务过程中触发的所有事件的完整列表，从这里您可以找到适合自定义的正确入口点。
- en: Summary
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we have learned how to run the debugger and master its interface.
    We have also seen how to pin non-debuggable functions and variables in order to
    avoid showing private data when needed. We also inspected cool standard features
    that make our debugging and development life easier: code analyzers and Event
    Recorder.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们已经学习了如何运行调试器并掌握其界面。我们还看到了如何固定不可调试的函数和变量，以避免在需要时显示私人数据。我们还检查了许多有用的标准功能，这些功能让我们的调试和开发工作变得更轻松：代码分析器和事件记录器。
- en: Now you're ready to debug extensions, to inspect events, and to analyze your
    AL code.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经准备好调试扩展、检查事件并分析您的 AL 代码。
- en: In this chapter, we have also shown how to catch runtime errors while inspecting
    code flow. In the next chapter, we will master how to detect logic issues (bugs)
    in application code through the development of automated tests.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们还展示了如何在检查代码流程时捕获运行时错误。在下一章中，我们将掌握如何通过开发自动化测试来检测应用代码中的逻辑问题（漏洞）。
