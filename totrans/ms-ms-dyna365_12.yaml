- en: Debugging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dynamics 365 Business Central AL Language extension provides a debugger to help
    developers check, correct, or modify code so that custom extensions can build
    successfully, deploy smoothly, and act as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Another way to track potential logical errors is to write test codeunits, but
    this will be a topic for another chapter. For now, we will see how to debug an
    extension and create tests for reports with ease.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Running the AL Language extension in debug mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining specific non-debuggable functions or variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mastering debugger and code editor issues (*debugging the debugger*)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with code analyzers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Event Recorder to track information about event availability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running in debug mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The basic concept behind debugging is the *breakpoint*, which is a mark that
    you can set on a statement. When the program flow hits the statement, the debugger
    is kicked in and suspends execution (technically, it breaks) until instructed
    to continue. Without any breakpoints, the code would run just fine as long as
    the debugger is active.
  prefs: []
  type: TYPE_NORMAL
- en: The debugger will automatically stop the execution of the code only when it
    encounters an error, or if it has been instructed in the `launch.json` file to
    break on record changes.
  prefs: []
  type: TYPE_NORMAL
- en: A developer could also use the debugger to find potential logic errors since
    the debugger enables them to execute AL code syntax, one statement at a time,
    while inspecting the contents of variables at each runtime step. In this way,
    the developer can check and match what is expected when they have designed the
    application extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can run the debugger from Visual Studio Code in three ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Click Debug | Start Debugging.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Press the *F5* shortcut key.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Go to DEBUG view (*Ctrl* + *Shift* + *D*) and press the green right arrow in
    the top bar. The top bar also shows the debugger session name specified in the
    `launch.json` file. It will open that file if you press the gear icon. The last
    icon on the right enables and shows the debug console, which typically shows contextual
    debugging information. The following screenshot depicts the debugger top bar:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/54b917df-9f4b-4362-adb7-1a008613f6aa.png)'
  prefs: []
  type: TYPE_IMG
- en: These actions will result in building your extension (equivalent to *Ctrl* +
    *Shift* + *B*), if this has not already been done, and then publishing the extension
    in the target online sandbox tenant.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the release of Dynamics 365 Business Central Spring 2019, it is now possible
    to run a debugger session without the need to build and publish the extension
    over and over again. This helps reduce the debug cycle and increases development
    productivity. To try this, in Visual Studio Code just hit *Ctrl* + *Shift* + *F5*,
    or run the Command Palette (*Ctrl* + *P*) and search for `AL: Debug without publishing`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `launch.json` file contains some elements that influence the debugging
    behavior and its target. The following is a list of them and what they do:'
  prefs: []
  type: TYPE_NORMAL
- en: '`BreakOnError`: Specifies whether the debugger should stop when it hits an
    error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BreakOnRecordWrite`: Specifies whether the debugger should stop on record
    changes (typically record create or update).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Tenant`: Specifies the **Azure Active Directory** (**AAD**) tenant in which
    to create the debugger session.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SandboxName`: With the April 2019 update, it is possible to have multiple
    sandbox tenants. This parameter will let the developer specify the name of the
    sandbox to which to connect the debugger session.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also, the `app.json` file contains a parameter that is vital for the debugger
    to work against specific extension code: `ShowMyCode`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you publish and debug the extension as-is, it does not need to have this
    value set: it would work as implicitly set to `true`.'
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, if the code needs to be debugged from other extensions (and different
    Visual Studio Code sessions), since the default value for `ShowMyCode` is `false`,
    this parameter must be explicitly declared and set to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: Be careful when handling the `ShowMyCode` parameter, since it not only lets
    you debug code, but also enables users to download the source code for the extension.
    This parameter enables or disables the download source code action from the Extension
    management menu in the client.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio Code debugger sections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The DEBUG view provides several sections and output windows to inspect, step
    by step, what's currently executing, the variable assignment status, and the code
    process flow. Additionally, since the release of Dynamics 365 Business Central
    Spring 2019, it is also possible to have some insight into code performance by
    gathering the longest-running database queries.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a8e50ef0-1f0a-4c49-a6ac-2e7994681090.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The debugger is basically divided into four sections: sidebar, toolbar, editor,
    and output windows. The editor window will highlight where the code is currently
    stopped. This is typically marked in yellow. The debug console, in the output
    window section, will show debugging information.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's examine each of these areas in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Debugger sidebar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The sidebar is enabled by default and is located on the left side of the debugger.
    It is possible to switch the position with the editor (right-click in one of the
    sections and select Move SideBar Right), hide it (*Ctrl* + *B*), or even just
    hide some of the sections (right-click in one of the sections and uncheck the
    section(s) that you need to keep hidden).
  prefs: []
  type: TYPE_NORMAL
- en: The sidebar is divided into four sections, which are used to provide information
    related to the current code flow. Let's go through them here.
  prefs: []
  type: TYPE_NORMAL
- en: Variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The VARIABLES section provides an overview of global and local variable assignments:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/91ea222a-a993-4d38-b643-9b6804d2a07d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Locals section, it is also possible to check performance counters that
    are related to code execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1f8b0dd5-b2cc-4e09-a7ff-63187e90ba23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In particular, it is possible to measure the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Current SQL latency (ms): When the debugger hits a breakpoint, the Dynamics
    365 Business Central Server service will send a probing SQL statement to the Azure
    SQL database and keep track of how long it takes to receive an answer. This information
    is helpful if the sandbox node for the tenant has healthy latency or there are
    infrastructure issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Number of SQL executes: The total number of SQL statements executed in the
    session since the debugger was started.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Number of SQL row reads: The total number of database rows read since the debugger
    was started.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Top-10 long-running queries: Expanding the Last Executed SQL Statements section,
    you might observe up to 10 SQL Server statement entries (numbered from 0 to 9).
    The statements represent the 10 least performant queries, in terms of duration,
    that have been executed since the session started up, to the first breakpoint
    hit. These are defined by the following elements:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Statement***:* The T-SQL statement executed.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Execution time (UTC)**: A timestamp defining when the SQL statement was executed.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Duration (ms)**: The duration of the total execution time of the SQL statement.
    It''s useful to analyze this if there are some missing indexes when developing
    extensions.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rows read**: Shows the approximate number of rows read by the SQL statement.
    It might be useful when looking for missing filters when developing extensions.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Watch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The *Watch* section is used to monitor variables of particular interest while
    debugging. It is possible to right-click on the name of the variable that you
    want to watch from the `Variables` window or in the code editor while debugging:
    this will display the value of the watched variable. In this window, you can also
    insert the names of the variables that you want to monitor into the watch list while
    debugging.'
  prefs: []
  type: TYPE_NORMAL
- en: Callstack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Variable values and expression evaluations are relative to the selected stack
    frame. This will report a cascade/stack of objects in descending execution order.
  prefs: []
  type: TYPE_NORMAL
- en: Breakpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This shows a list of available breakpoints that could be enabled, disabled,
    or reapplied at will. Breakpoints can be toggled in the Visual Studio Code editor
    window by clicking in the left margin or by pressing *F9* in a selected line.
    Breakpoints that are displayed in the editor margin are shown as red-filled circles.
    Disabled breakpoints have a filled gray circle.
  prefs: []
  type: TYPE_NORMAL
- en: Breakpoints that cannot be assigned to any code in the debugger session are
    shown with a gray hollow circle.
  prefs: []
  type: TYPE_NORMAL
- en: Debugger toolbar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The toolbar contains commands that pause, stop, restart, or control the debugging
    process. The following screenshot shows a debugger toolbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e4f72b51-8679-412c-97c7-88bca06c68dc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Possible actions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Continue (*F5*).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pause (*F6*).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Restart (*Shift* + *F11*): Depicted by the green circular arrow in.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stop (*Shift* + *F5*): Depicted by the red square: The debugger toolbar commands
    allow you to continue (*F5*) the process until it comes to an end. In this way,
    developers can continue with their iterative process and start the operation again
    without running a new web client session in debug mode. The process could also
    be paused (*F6*)—the debugger session is still alive; restarted (*S**hift* + *F11*)—it
    will create a new debugger session; or definitively stopped (*S**hift* + *F5*)—the
    debugger session is closed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step Over (*F10*): All statements are executed one at a time. If this command
    is used, when a function call is reached, the function is executed without the
    debugger stepping through the function instructions. If there is a breakpoint
    in one of the functions that it has been instructed to step over, the debugger
    will break at that breakpoint in any case.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step Into (*F11*): All statements are executed one at a time. If this command
    is used, when a function call is reached, the debugger will step through all the
    function's instructions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step Out (*Shift* + *F11*): It will skip the current function and jump into
    the next one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging in attach mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the Dynamics 365 Business Central October 2019 update, the ability to debug,
    not only by launching a new debug session, but also by attaching the debugger
    to the next new session that is created by the application) has been introduced.
  prefs: []
  type: TYPE_NORMAL
- en: 'This capability currently has some limitations, and the following table explains
    its support scenario:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Deployment type** | **Web client** | **Web service** | **Background session**
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| On-premises | Supported | Supported | Supported |'
  prefs: []
  type: TYPE_TB
- en: '| Online sandbox | Not supported | Supported | Not supported |'
  prefs: []
  type: TYPE_TB
- en: To enable the attach process, it is mandatory to add a new configuration parameter
    set to the extensions `launch.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key parameters that need to be specified are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`"request": "attach"`: In a typical debugging scenario, this parameter is set
    to default its value: `launch`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"breakOnNext" : "WebServiceClient"` : With online sandboxes, the only option
    allowed is `"WebServiceClient"`, while with on-premise and Docker-based sandboxes,
    it is also possible to attach the debugger to the `"WebClient"` or `"Background"`
    sessions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To find out more about how to attach the debugger, visit [https://demiliani.com/2019/10/25/dynamics-365-business-central-debugging-the-base-application/](https://demiliani.com/2019/10/25/dynamics-365-business-central-debugging-the-base-application/).
  prefs: []
  type: TYPE_NORMAL
- en: Non-debuggable items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Typically, developers would like to have a full debugging experience on every
    extension line of code. There are some circumstances where a specific variable
    or function should not show its current value. These circumstances are typically
    related to variables that store private information, or functions that return
    private values (such as user passwords or license checks).
  prefs: []
  type: TYPE_NORMAL
- en: When developing extensions, there is a special attribute that can be used with
    functions and/or variables that stop them from being processed (the debugger cannot
    step into them) or visible (variables and/or function output values are not shown)
    within the debugger. Writing the `[NonDebuggable]` statement before the declaration
    of a function or a variable would mean that they are not inspectable, and no breakpoints
    could be set against them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Report 50111 Item Ledger Entry Analysis`, created in [Chapter 7](81958c15-06a3-4a59-ae0c-0afa9413d6f9.xhtml),
    *Report Development with AL*, add a breakpoint in the `OnPreReport` trigger in
    the very first statement, `if includeLogo then begin`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/46f91056-50f9-49e5-bc4a-a24dbc5670b1.png)'
  prefs: []
  type: TYPE_IMG
- en: And after that, just publish the extension (*F5*).
  prefs: []
  type: TYPE_NORMAL
- en: When the client loads, search for `packt report`, and when the `Item Ledger
    Entry Analysis` report record is shown, click on it, choose to include the logo
    in the request page, and click Preview.
  prefs: []
  type: TYPE_NORMAL
- en: The debugger will stop precisely in the `OnPreReport` breakpoint that was just
    added.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, press *F11* twice to move the code execution down to run the `Get` statement
    in the `Company Information` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e115d75c-4504-4b5a-bb12-c1b7d840a928.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you expand the VARIABLES section in the debugger activity pane, you might
    notice that the `Company Information` (named `CompanyInfo`) record can be expanded,
    and you can see all its values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e74f8ff3-d1a1-4e21-8547-a143ed003e54.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Stop the debugger (S*hift *+ *F5*) and add the non-debuggable attribute before
    the `Company Information` global variable, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Publish the extension (*F5*) again.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the client loads, search for `packt report` and perform the same action
    as before to preview the report: the debugger will stop once again in the same
    place.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Press *F11* twice to move the code execution down to run the `Get` statement
    in the `Company Information` table and retrieve the record data. Now, if you expand
    the VARIABLES section, you might notice that the `Company Information` record
    is not even shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e06564fd-9917-40f8-b45a-99c2c2515a99.png)'
  prefs: []
  type: TYPE_IMG
- en: Hovering the mouse in any `CompanyInfo` statement in the code editor will result
    in an `<Out of Scope>` message, due to the presence of the `[NonDebuggable]` attribute
    in the runtime action.
  prefs: []
  type: TYPE_NORMAL
- en: Mastering debugger issues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some real-world scenarios, it might be that, for some reason, the debugger
    will not start and it will report an unhandled error message in the output window;
    or you might simply need to keep track of the debugger service process. In other
    words, you might need to debug the debugger. After all, the debugger is just another
    software artifact.
  prefs: []
  type: TYPE_NORMAL
- en: 'To gain more insight and verbose diagnostics, there is an undocumented feature
    that you need to enable by entering a specific parameter in the `settings.json`
    file in order to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Once it's enabled, you need to restart Visual Studio Code to make the changes
    effective across the application.
  prefs: []
  type: TYPE_NORMAL
- en: This parameter will instruct the AL Language extension to create a verbose logging
    activity for the code editor (`EditorServices.log`), and the debugger (`DebuggerServices.log`)
    in the following `C:\Users\<USER>\.vscode\extensions\ms-dynamics-smb.al-3.0.121490\bin` directory.
  prefs: []
  type: TYPE_NORMAL
- en: '`ms-dynamics-smb.al-3.0.121490` represents the AL Language extension name and
    version that are registered in the current Visual Studio Code session.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a snippet of the logged activity for the debugger service
    showing its processing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the next section, we'll see how you can use code analyzers when developing
    with AL.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding code analyzers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The AL language proactive debugging experience is greatly enhanced by code analyzers.
    Code analyzers are part of the standard AL Language extension, and are a set of
    contextual rules that are applied to extension development. These rules can generate
    an error or a warning when you're developing an extension.
  prefs: []
  type: TYPE_NORMAL
- en: Code analyzers can be enabled and disabled at will, both per workspace and globally.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable code analyzers, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to File | Preferences | Settings (Workspace settings) | Extension | AL language
    extension and choose to edit the `settings.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: You could also choose to edit the `settings.json` file by choosing user settings.
    However, since you might develop per-tenant extensions and also AppSource apps
    in the same environment, it would make more sense to have these enabled per workspace
    instead of per user settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `settings.json` file, it is possible to specify the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Changing this parameter to `true` enables the analyzers that are specified in
    the JSON array parameter, `al.codeAnalyzers`. If no analyzers are specified, or
    there is no `al.codeAnalyzers` entry, it is assumed that all analyzers are enabled.
  prefs: []
  type: TYPE_NORMAL
- en: al.codeAnalyzers[]
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `al.codeAnalyzers[]` parameter represents an array of code analyzers. Currently,
    the supported values and the official links to the appropriate rules, ordered
    by ID, are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`"${AppSourceCop}"`: This must be enabled when developing apps targeted for
    the AppSource marketplace. To find out more, visit [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/analyzers/appsourcecop](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/analyzers/appsourcecop).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"${CodeCop}"`: This strengthens the standard AL Language development guidelines,
    and it is recommended that it is enabled for every kind of development target. To
    find out more, visit [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/analyzers/codecop](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/analyzers/codecop).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"${PerTenantExtensionCop}"`: Together with `CodeCop`, it should be enabled
    on every online development target, except when developing extensions for the
    AppSource marketplace, where `AppSourceCop` should be used. To find out more,
    visit [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/analyzers/pertenantextensioncop](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/analyzers/pertenantextensioncop).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"${UICop}"`: This is the last addition to the code analyzers, and it checks
    that the code matches the features that are supported by modern clients, and avoids
    hitting user interface limitations. To find out more, visit [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/analyzers/uicop](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/analyzers/uicop).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: al.ruleSetPath
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the path for a ruleset file that contains changes to the rules that
    are provided through standard code analyzers.
  prefs: []
  type: TYPE_NORMAL
- en: A ruleset file is written in JSON notation, and has a reference to an existing
    ruleset item ID that is implemented in the standard AL Language extension. This
    file is typically edited to redefine the importance of the rules within a specific
    extension project or workspace.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we implement code analyzers in the demo extension project that we have created,
    it will help us to find out more info about our code style, and whether there
    are improvements to be applied. Let''s enable the relevant analyzers for our extension
    project by changing the `settings.json` file in our `workspace` settings as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the PROBLEMS window, there might now be a bunch of records with errors,
    warnings, and information. Considering only those that are related to `Report
    50111 ItemLedgerEntryAnalysis.al`, there should be one error, two warnings, and
    one piece of useful information. Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/935a4681-d1ca-4945-b66a-a48ff80cca5d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Looking at the error, this is pretty clear: the `includeLogo` column definition
    does not have its `ApplicationArea` property defined. For this reason, it will
    not be visible within the application, because the `ApplicationArea` property
    must be explicitly declared.'
  prefs: []
  type: TYPE_NORMAL
- en: Just click on the error line in the PROBLEM window, the one marked by ID AL(PTE0008).
    This action will result in placing the focus of the cursor in the `includeLogo`
    field definition within the code editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `ApplicationArea` property for the `includelogo` column in the request
    page as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You might notice that the error in the PROBLEMS window suddenly disappears.
    Moreover, the report is moved down in the object stack in the PROBLEMS window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/10314588-5cd4-4dd4-bece-4a88cc48c8b3.png)'
  prefs: []
  type: TYPE_IMG
- en: This happened because the problems record stack is ordered by descending priority,
    hence `Table 50103 Packt Extension Setup`, which contains an error, is moved to
    the top of the object list to be reviewed first, before warnings and info.
  prefs: []
  type: TYPE_NORMAL
- en: A rule's importance value can be changed at will by creating a JSON file that
    contains the IDs of the rules that need to be changed and how they have to be
    set according to your company's development rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a directory in the extension''s main folder called `.ruleset`,
    and create a file called `demo.ruleset.json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/80f5e91e-008c-465b-94e5-1f8937111c47.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open `demo.ruleset.json`, and invoke the `truleset` standard snippet to write
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In this way, we would like to instruct the AL Language code analyzer to avoid
    adding a warning record in the problems window for the rule whose ID is `AA008`.
    Word for word, the rule is <q>"Function calls should have parentheses even if
    they do not have any parameters."</q>
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step to make it work is to assign the `.alRuleSetPath` parameter to
    point to the newly created file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: When you assign the path to a ruleset file, it is recommended that you save
    all files and close and reopen Visual Studio Code, in order to be sure that there
    are no permission errors, and access the ruleset file by the current process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the ruleset file is in place, there should not be any warnings in the
    PROBLEMS window related to opened and closed parentheses, and the number of records
    shown in the problems should be reduced. This can be seen in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/36eb13e7-90db-4386-bc24-cb81c95ebab7.png)'
  prefs: []
  type: TYPE_IMG
- en: There are still 19 elements that need to be evaluated in order to be compliant
    with the AL best coding practice. Takeaways at this stage are that they should
    make good use of these rules in their own company and discuss what needs to be
    promoted higher, maintained as-is, or be completely turned off.
  prefs: []
  type: TYPE_NORMAL
- en: Be careful when enabling code analyzers, since they might increase memory consumption
    (RAM) in the development machine.
  prefs: []
  type: TYPE_NORMAL
- en: We saw here how to improve the quality of your code by activating AL code analyzers.
    In the next section, we'll see how you can use *Event Recorder* when developing
    extensions with Dynamics 365 Business Central.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Event Recorder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We all know that Dynamics 365 Business Central online development can only be
    done through extensions. Accessing code base extensibility is guaranteed by subscribing
    to standard event publishers.
  prefs: []
  type: TYPE_NORMAL
- en: Considering that there are several thousands of standard event publishers all
    over the application and the number is growing with every online update, finding
    the right spot to hook up a standard publisher is sometimes as hard as trying
    to find the proverbial needle in the haystack.
  prefs: []
  type: TYPE_NORMAL
- en: The recommended way to find out the appropriate entry point at which to subscribe
    is to use the Event Recorder.
  prefs: []
  type: TYPE_NORMAL
- en: This application feature is a must if you do not know what standard objects
    are, or you do not have access to the third-party source code in order to look
    at publisher definitions (in the event the code you subscribe to is part of a
    third-party extension or a private IP).
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to enable this feature:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From Visual Studio Code: Open an extension source code project that defines
    a suitable sandbox connection in the `launch.json` file. Run the Command Palette
    (*Ctrl* + *Shift* + *P*) and then select AL: Open Events Recorder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Connect to your production or sandbox tenant and search for `Event Recorder`:
    The Event Recorder page offers a very simple action menu called **Record Events**
    with a Start and Stop button.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By simply pressing Start, the Event Recorder is activated and is ready to track
    the code processing flow.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is crucial to understand that the Event Recorder session will capture absolutely
    everything that the code is executing; therefore it is recommended you opt for
    one of the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Event Recorder page in one browser tab (let's call it TAB 1) and then
    create a new tab (TAB 2) where you browse to the page where you would like to
    start recording events. Then, start the Event Recorder in TAB 1 and start performing
    the actions that are needed to track the business process flow in TAB 2\. When
    finished, go back to TAB 1 and stop the Event Recorder.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browse to the page where you would like to start recording events (TAB 1,) and
    in a new tab (TAB 2) go to the Event Recorder page and start it. Back in TAB 1,
    perform the actions that are needed to track the process and, when you're finished,
    stop event recording in TAB 2.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The page will refresh and display the records inserted in a temporary table
    in order of code execution, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/72dfcdbb-a870-449c-b523-6b2e82a7139e.png)'
  prefs: []
  type: TYPE_IMG
- en: Event Recorder in action
  prefs: []
  type: TYPE_NORMAL
- en: Since these are records stored in a temporary table, they are volatile in memory
    and are not stored in the database. You now have the full list of events that
    were triggered during your business process, and from here you can find the right
    entry points to use for your customizations.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we have learned how to run the debugger and master its interface.
    We have also seen how to pin non-debuggable functions and variables in order to
    avoid showing private data when needed. We also inspected cool standard features
    that make our debugging and development life easier: code analyzers and Event
    Recorder.'
  prefs: []
  type: TYPE_NORMAL
- en: Now you're ready to debug extensions, to inspect events, and to analyze your
    AL code.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we have also shown how to catch runtime errors while inspecting
    code flow. In the next chapter, we will master how to detect logic issues (bugs)
    in application code through the development of automated tests.
  prefs: []
  type: TYPE_NORMAL
