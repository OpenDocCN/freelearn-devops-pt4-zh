["```\nImport-TestToolkitToBcContainer -containerName d365bcdev\nGenerate-SymbolsInNavContainer -containerName d365bcdev\n```", "```\n{\n  \"id\": \"7737ab78-c872-4bca-b9f8-2de788818c21\",\n  \"name\": \"TestPacktDemoExtension\",\n  \"publisher\": \"fluxxus.nl\",\n  \"brief\": \"Tests for Customer Category, Gift Campaigns and Vendor Quality Management\",\n  \"description\": \"Tests for Customer Category, Gift Campaigns and Vendor Quality Management\",\n  \"version\": \"1.0.0.0\",\n  \"privacyStatement\": \"\",\n  \"EULA\": \"\",\n  \"help\": \"https://www.packtpub.com/business/automated-testing-microsoft-dynamics-365-business-central\",\n  \"url\": \"http://www.fluxxus.nl\",\n  \"logo\": \"./Logo/ExtLogo.png\",\n  \"dependencies\": [\n    {\n      \"appId\": \"63ca2fa4-4f03-4f2b-a480-172fef340d3f\",\n      \"publisher\": \"Microsoft\",\n      \"name\": \"System Application\",\n      \"version\": \"1.0.0.0\"\n    },\n    {\n      \"appId\": \"437dbf0e-84ff-417a-965d-ed2bb9650972\",\n      \"publisher\": \"Microsoft\",\n      \"name\": \"Base Application\",\n      \"version\": \"15.0.0.0\"\n    },\n    {\n      \"appId\": \"dd03d28e-4dfe-48d9-9520-c875595362b6\",\n      \"name\": \"PacktDemoExtension\",\n      \"publisher\": \"SD\",\n      \"version\": \"1.0.0.0\"\n    },\n    {\n      \"appId\": \"dd0be2ea-f733-4d65-bb34-a28f4624fb14\",\n      \"publisher\": \"Microsoft\",\n      \"name\": \"Library Assert\",\n      \"version\": \"15.0.36560.0\"\n    },\n    {\n      \"appId\": \"e7320ebb-08b3-4406-b1ec-b4927d3e280b\",\n      \"publisher\": \"Microsoft\",\n      \"name\": \"Any\",\n      \"version\": \"15.0.36560.0\"\n    },\n    {\n      \"appId\": \"9856ae4f-d1a7-46ef-89bb-6ef056398228\",\n      \"publisher\": \"Microsoft\",\n      \"name\": \"System Application Test Library\",\n      \"version\": \"15.0.36560.0\"\n    },\n    {\n      \"appId\": \"5d86850b-0d76-4eca-bd7b-951ad998e997\",\n      \"publisher\": \"Microsoft\",\n       \"name\": \"Tests-TestLibraries\",\n       \"version\": \"15.0.36560.0\"\n    }\n  ],\n  \"screenshots\": [],\n  \"platform\": \"15.0.0.0\",\n  \"idRanges\": [\n  {\n    \"from\": 60100,\n    \"to\": 60150\n  }],\n  \"runtime\":\"4.0\",\n  \"showMyCode\": true\n}\n```", "```\nasserterror <calling statement>\n```", "```\nif (SalesLine.Quantity < GiftCampaign.MinimumOrderQuantity) and\n    (GiftCampaign.MinimumOrderQuantity - SalesLine.Quantity <=\n        PacktSetup.\"Gift Tolerance Qty\")\nthen\n    Message(\n        GiftAlert, SalesLine.\"No.\",\n        Format(GiftCampaign.MinimumOrderQuantity),\n        Format(GiftCampaign.GiftQuantity));\n```", "```\ncodeunit 60100 \"Customer Category PKT\"\n{\n    // [FEATURE] Customer Category\n    SubType = Test;\n}\n```", "```\ncodeunit 60100 \"Customer Category PKT\"\n{\n    // [FEATURE] Customer Category\n    SubType = Test;\n    [Test]\n    procedure AssignNonBlockedCustomerCategoryToCustomer()\n    // [FEATURE] Customer Category\n    begin\n        // [SCENARIO #0001] Assign non-blocked customer category\n         //                  to customer\n        // [GIVEN] A non-blocked customer category\n        // [GIVEN] A customer\n        // [WHEN] Set customer category on customer\n        // [THEN] Customer has customer category code field\n         //        populated\n    end;\n}\n```", "```\ncodeunit 60100 \"Customer Category PKT\"\n{\n    // [FEATURE] Customer Category\n    SubType = Test;\n    [Test]\n    procedure AssignNonBlockedCustomerCategoryToCustomer()\n    begin\n        // [SCENARIO #0001] Assign non-blocked customer category\n         //                  to customer\n        // [GIVEN] A non-blocked customer category\n        CreateNonBlockedCustomerCategory();\n        // [GIVEN] A customer\n        CreateCustomer();\n        // [WHEN] Set customer category on customer\n        SetCustomerCategoryOnCustomer();\n        // [THEN] Customer category on customer\n        VerifyCustomerCategoryOnCustomer();\n    end;\n}\n```", "```\nlocal procedure CreateNonBlockedCustomerCategory(): Code[20]\nvar\n    CustomerCategory: Record \"Customer Category_PKT\";\nbegin\n    with CustomerCategory do begin\n        Init();\n        Validate(\n            Code,\n            LibraryUtility.GenerateRandomCode(FIELDNO(Code),\n            Database::\"Customer Category_PKT\"));\n        Validate(Description, Code);\n        Insert();\n        exit(Code);\n    end;\nend;\n```", "```\nlocal procedure CreateCustomer(var Customer: record Customer)\nbegin\n    LibrarySales.CreateCustomer(Customer);\nend;\n```", "```\nlocal procedure SetCustomerCategoryOnCustomer(\n         var Customer: record Customer;\n         CustomerCategoryCode: Code[10])\nbegin\n    with Customer do begin\n        Validate(\n            \"Customer Category Code_PKT\",\n            CustomerCategoryCode);\n        Modify();\n    end;\nend;\n```", "```\nlocal procedure VerifyCustomerCategoryOnCustomer(\n        CustomerNo: Code[20]; CustomerCategoryCode: Code[20])\nvar\n    Customer: Record Customer;\n    FieldOnTableTxt: Label '%1 on %2';\nbegin\n    with Customer do begin\n        Get(CustomerNo);\n        Assert.AreEqual(\n            CustomerCategoryCode,\n            \"Customer Category Code_PKT\",\n            StrSubstNo(\n                FieldOnTableTxt,\n                FieldCaption(\"Customer Category Code_PKT\"),\n                TableCaption())\n        );\n    end;\nend;\n\n```", "```\n[External] procedure AreEqual(Expected: Variant;\n     Actual: Variant;Msg: Text)\n begin\n     if not Equal(Expected,Actual) then\n         Error(\n             AreEqualFailedMsg,\n             Expected,\n             TypeNameOf(Expected),\n             Actual,\n             TypeNameOf(Actual),\n             Msg)\n end;\n```", "```\n[Test]\nprocedure AssignNonBlockedCustomerCategoryToCustomer()\n// [FEATURE] Customer Category\nvar\n    Customer: Record Customer;\n    CustomerCategoryCode: Code[20];\nbegin\n    // [SCENARIO #0001] Assign non-blocked customer category to\n    //                  customer\n    // [GIVEN] A non-blocked customer category\n    CustomerCategoryCode := CreateNonBlockedCustomerCategory();\n    // [GIVEN] A customer\n    CreateCustomer(Customer);\n    // [WHEN] Set customer category on customer\n    SetCustomerCategoryOnCustomer(Customer, CustomerCategoryCode);\n    // [THEN] Customer has customer category code field populated\n    VerifyCustomerCategoryOnCustomer(\n        Customer.\"No.\",\n        CustomerCategoryCode);\nend;\n```", "```\nprocedure AssignBlockedCustomerCategoryToCustomer()\n// [FEATURE] Customer Category\nbegin\n    // [SCENARIO #0002] Assign blocked customer category to\n    //                  customer\n    // [GIVEN] A blocked customer category\n    // [GIVEN] A customer\n    // [WHEN] Set customer category on customer\n    // [THEN] Blocked category error thrown\nend;\n```", "```\nprocedure AssignBlockedCustomerCategoryToCustomer()\n// [FEATURE] Customer Category\nvar\n    Customer: Record Customer;\n    CustomerCategoryCode: Code[20];\nbegin\n    // [SCENARIO #0002] Assign blocked customer category to\n    //                  customer\n    // [GIVEN] A blocked customer category\n    CustomerCategoryCode := CreateBlockedCustomerCategory();\n    // [GIVEN] A customer\n    CreateCustomer(Customer);\n    // [WHEN] Set customer category on customer\n    asserterror SetCustomerCategoryOnCustomer(\n                    Customer,\n                    CustomerCategoryCode);\n    // [THEN] Blocked category error thrown\n    VerifyBlockedCategoryErrorThrown();\nend;\n```", "```\nlocal procedure CreateBlockedCustomerCategory(): Code[20]\nvar\n    CustomerCategory: Record \"Customer Category_PKT\";\nbegin\n    with CustomerCategory do begin\n           Get(CreateNonBlockedCustomerCategory());\n           Blocked := true;\n           Modify();\n           exit(Code);\n    end;\nend;\n```", "```\nlocal procedure VerifyBlockedCategoryErrorThrown()\nvar\n    CategoryIsBlockedTxt: Label 'This category is blocked.';\nbegin\n    Assert.ExpectedError(CategoryIsBlockedTxt);\nend;\n```", "```\nAssert.ExpectedError('Testing the test.');\n```", "```\n*Assert.ExpectedError failed. Expected: Testing the test. Actual: This category is blocked.*\n```", "```\n[Test]\nprocedure AssignDefaultCategoryToCustomerFromCustomerCard()\n// [FEATURE] Customer Category UI\nvar\n    Customer: Record Customer;\n    CustomerCategoryCode: Code[20];\n\nbegin\n    // [SCENARIO #0007] Assign default category to customer from\n    //                  customer card\n    // [GIVEN] A non-blocked default customer category\n    CustomerCategoryCode :=\n        CreateNonBlockedDefaultCustomerCategory();\n    // [GIVEN] A customer with customer category not equal to\n    //         default customer category\n    CreateCustomerWithCustomerCategoryNotEqualToDefault(Customer);\n    // [WHEN] Select \"Assign Default Category\" action on customer\n    //        card\n    SelectAssignDefaultCategoryActionOnCustomerCard(\n        Customer.\"No.\");\n    // [THEN] Customer has default customer category\n    VerifyCustomerHasDefaultCustomerCategory(\n        Customer.\"No.\",\n CustomerCategoryCode);\nend;\n```", "```\nlocal procedure\n    CreateNonBlockedDefaultCustomerCategory(): Code[20]\nvar\n    CustomerCategory: Record \"Customer Category_PKT\";\nbegin\n    with CustomerCategory do begin\n           SetRange(Default, true);\n           if not FindFirst() then begin\n            Get(CreateNonBlockedCustomerCategory());\n            Default := true;\n            Modify();\n        end;\n        exit(Code);\n    end;\nend;\n```", "```\nlocal procedure\n    CreateCustomerWithCustomerCategoryNotEqualToDefault(\n         var Customer: Record Customer)\nbegin\n    CreateCustomer(Customer);\nend;\n```", "```\nlocal procedure\n    SelectAssignDefaultCategoryActionOnCustomerCard(\n        CustomerNo: Code[20])\nvar\n    CustomerCard: TestPage \"Customer Card\";\nbegin\n    CustomerCard.OpenView();\n    CustomerCard.GoToKey(CustomerNo);\n    CustomerCard.\"Assign default category\".Invoke();\nend;\n```", "```\nlocal procedure\n    VerifyCustomerHasDefaultCustomerCategory(\n        CustomerNo: Code[20];\n        DefaultCustomerCategoryCode: Code[20])\nbegin\n    VerifyCustomerCategoryOnCustomer(\n        CustomerNo,\n        DefaultCustomerCategoryCode)\nend;\n```", "```\ncodeunit 60101 \"Gifts PKT\"\n{\n    // [FEATURE] Gifts\n    SubType = Test;\n}\n```", "```\ncodeunit 60101 \"Gifts PKT\"\n{\n    // [FEATURE] Gifts\n    SubType = Test;\n\n    [Test]\n    procedure AssignQuantityOnSalesLineToTriggerActive\n            PromotionMessage()\n    // [FEATURE] Gifts\n    begin\n        // [SCENARIO #0010] Assign quantity on sales line\n        //[GIVEN] Packt setup with \"Gift Tolerance Qty\" set\n        CreatePacktSetupWithGiftToleranceQty();\n        // [GIVEN] Customer with non-blocked customer category\n        //         with \"Free Gifts Available\"\n        CreateCustomerWithNonBlockedCustomerCategoryWith\n            FreeGiftsAvailable();\n        // [GIVEN] Item\n        CreateItem();\n        // [GIVEN] Gift campaign for item and customer category\n        //          with \"Minimum Order Quantity\" set\n        CreateGiftCampaignForItemAndCustomerCategory\n            WithMinimumOrderQuantity();\n        // [GIVEN] Sales invoice for customer with line for item\n        CreateSalesInvoiceForCustomerWithLineForItem();\n        // [WHEN] Set quantity on invoice line smaller than\n        //        \"Minimum Order Quantity\" and within\n        //        \"Gift Tolerance Qty\"\n        SetQuantityOnInvoiceLineSmallerThanMinimumOrderQuantity\n            AndWithinGiftToleranceQty();\n        // [THEN] Active promotion message is displayed\n        VerifyActivePromotionMessageIsDisplayed(); \n end;\n}\n```", "``` `` `CreateItem` `` ```", "``` `` `WithMinimumOrderQuantity` `` ```", "```\nlocal procedure\n    CreatePacktSetupWithGiftToleranceQty(\n        GiftToleranceQtySet: Decimal)\nvar\n    PacktExtensionSetup: Record \"Packt Extension Setup\";\nbegin\n    with PacktExtensionSetup do begin\n        if not Get() then\n            Insert();\n        Validate(\"Gift Tolerance Qty\", GiftToleranceQtySet);\n        Modify();\n    end;\nend;\n```", "```\nlocal procedure\n    CreateCustomerWithNonBlockedCustomerCategory\n        WithFreeGiftsAvailable(var Customer: record Customer)\nbegin\n    LibrarySales.CreateCustomer(Customer);\n    with Customer do begin\n        Validate(\n            \"Customer Category Code_PKT\",\n            CreateNonBlockedCustomerCategory\n                WithFreeGiftsAvailable());\n        Modify();\n    end;\nend;\n```", "```\nlocal procedure CreateItem(var Item: Record Item)\nbegin\n    LibraryInventory.CreateItem(Item);\nend;\n```", "```\nlocal procedure CreateGiftCampaignForItemAndCustomerCategoryWith\n    MinimumOrderQuantity(\n        NewItemNo: Code[20]; NewCustomerCategoryCode: code[20];\n        NewMinimumOrderQuantity: Decimal; NewGiftQuantity: Decimal)\nvar\n    GiftCampaign: Record GiftCampaign_PKT;\nbegin\n    with GiftCampaign do begin\n        Init();\n        Validate(CustomerCategoryCode, NewCustomerCategoryCode);\n        Validate(ItemNo, NewItemNo);\n        Validate(MinimumOrderQuantity, NewMinimumOrderQuantity);\n        Validate(EndingDate, DMY2Date(31, 12, 9999));\n        Validate(GiftQuantity, NewGiftQuantity);\n        Insert();\n    end;\nend;\n```", "```\nlocal procedure CreateSalesInvoiceForCustomerWithLineForItem(\n        CustomerNo: Code[20]; ItemNo: Code[20]): Code[20]\nvar\n    SalesHeader: Record \"Sales Header\";\n    SalesLine: Record \"Sales Line\";\nbegin\n    with SalesHeader do begin\n        LibrarySales.CreateSalesDocumentWithItem(\n            SalesHeader,\n            SalesLine,\n            \"Document Type\"::Invoice,\n            CustomerNo,\n            ItemNo,\n            0,\n            '',\n            0D);\n        exit(\"No.\");\n    end;\nend;\n```", "```\nlocal procedure\n    SetQuantityOnInvoiceLineSmallerThanMinimumOrderQuantity\n        AndWithinGiftToleranceQty(\n            SalesInvoiceNo: Code[20]; NewQuantity: Decimal)\nvar\n    SalesLine: Record \"Sales Line\";\nbegin\n    with SalesLine do begin\n        SetRange(\"Document Type\", \"Document Type\"::Invoice);\n        SetRange(\"Document No.\", SalesInvoiceNo);\n        if FindFirst() then begin\n            Validate(Quantity, NewQuantity);\n            Modify();\n        end;\n    end;\nend;\n```", "```\ncodeunit 60101 \"Gifts PKT\"\n{\n    // [FEATURE] Gifts\n    SubType = Test;\n\n    [Test]\n    procedure AssignQuantityOnSalesLineToTriggerActive\n            PromotionMessage()\n    // [FEATURE] Gifts\n    var\n        Customer: Record Customer;\n        Item: Record Item;\n        SalesInvoiceNo: Code[20];\n    begin\n        // [SCENARIO #0010] Assign quantity on sales line\n        // [GIVEN] Packt setup with \"Gift Tolerance Qty\" set\n        CreatePacktSetupWithGiftToleranceQty(6);\n        // [GIVEN] Customer with non-blocked customer category\n        //         with \"Free Gifts Available\"\n        CreateCustomerWithNonBlockedCustomerCategoryWith\n            FreeGiftsAvailable(Customer);\n        // [GIVEN] Item\n        CreateItem(Item);\n        // [GIVEN] Gift campaign for item and customer category\n        /          with \"Minimum Order Quantity\" set\n        CreateGiftCampaignForItemAndCustomerCategory\n            WithMinimumOrderQuantity (\n                Item.\"No.\", Customer.\"Customer Category Code_PKT\",\n                10, 3);\n        // [GIVEN] Sales invoice for customer with line for item\n        SalesInvoiceNo :=\n            CreateSalesInvoiceForCustomerWithLineForItem(\n                Customer.\"No.\", Item.\"No.\");\n        // [WHEN] Set quantity on invoice line smaller than\n        //        \"Minimum Order Quantity\" and within\n        //        \"Gift Tolerance Qty\"\n        SetQuantityOnInvoiceLineSmallerThanMinimumOrderQuantity\n            AndWithinGiftToleranceQty(SalesInvoiceNo, 5);\n        // [THEN] Active promotion message is displayed\n        //VerifyActivePromotionMessageIsDisplayed();\n    end;\n}\n```", "```\n*Attention: there is an active promotion for item GL00000001\\. if you buy 10 you can have a gift of 3*\n```", "```\n[MessageHandler]\nprocedure MessageHandler(Msg: Text[1024])\nbegin\nend;\n```", "```\n    [Test]\n    [HandlerFunctions('MessageHandler')]\n    procedure AssignQuantityOnSalesLineToTriggerActive\n            PromotionMessage()\n    // [FEATURE] Gifts\n```"]