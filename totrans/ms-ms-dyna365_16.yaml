- en: Dynamics 365 Business Central APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we saw how we can use DevOps techniques with Dynamics
    365 Business Central projects, and we focused on aspects such as source control
    management and CI/CD pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll see how to integrate Dynamics 365 Business Central
    with external applications by using the RESTful APIs exposed by the platform,
    and the focus will be on the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Comparing OData and RESTful APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Dynamics 365 Business Central standard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom APIs with Dynamics 365 Business Central for new and existing
    entities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating applications that use Dynamics 365 Business Central APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using bound actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Dynamics 365 Business Central webhooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Dynamics 365 Business Central APIs in Microsoft Graph automation
    APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be able to create RESTful APIs for Dynamics
    365 Business Central and use them to integrate with external applications.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing OData and APIs in Dynamics 365 Business Central
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every client that can make HTTP calls can consume RESTful APIs. Using the GET,
    POST, PATCH, and DELETE verbs of the HTTP protocol, entities can be **Created,
    Read, Updated, and Deleted** (**CRUD**). To make integrations with Dynamics 365
    Business Central, OData and RESTful APIs are the recommended tools to work with.
  prefs: []
  type: TYPE_NORMAL
- en: '**Open Data Protocol** (**OData**) is a web protocol that permits you to perform CRUD
    operations on tabular data with HTTP calls by using URIs for resource identification.
    Exposing an object as OData in Dynamics 365 Business Central is quite simple:
    open the WEB SERVICES page, insert a new record with the Page type, select the
    page you want to expose, and click on *Publish*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Dynamics 365 Business Central automatically assigns to the published entity
    an OData and OData V4 URL, and then you can use this published entity (our page)
    as a web service by performing HTTP REST calls (GET, POST, PUT, DELETE, and PATCH)
    to the provided endpoints (as you can see in the following screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c98816aa-87ea-4ec0-a24b-4abc52287ad5.png)'
  prefs: []
  type: TYPE_IMG
- en: When calling an OData endpoint, you can apply filters, use grouping, use Flow
    Filters, and call business logic by using bound actions (we'll discuss them later
    in this chapter, in the *Using bound actions* section).
  prefs: []
  type: TYPE_NORMAL
- en: 'APIs in Dynamics 365 Business Central use the same OData stack under the hood,
    but they have three main advantages when we talk about integration:'
  prefs: []
  type: TYPE_NORMAL
- en: They have **versioning** (one of the most important things when doing service
    integration, because you will need a stable contract).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They are **webhook supported** (you can publish your API page and then call `/api/microsoft/runtime/beta/webhookSupportedResources` to
    verify that the entity is supported by webhooks).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'They have **namespaces **so you can isolate and group your APIs according to
    their scope or functional area: `{{shortUrl}}/api/APIPublisher/APIGroup/v1.0/mycustomers(''01121212'')`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The fixed contract is the main reason that Microsoft prevents the opportunity
    to extend standard API pages. If you try to extend a standard API page (for example,
    the `Customer Entity` page), Visual Studio Code throws an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/28547ffb-41b7-41f4-aebb-843e11dc5951.png)'
  prefs: []
  type: TYPE_IMG
- en: For more information on how to use RESTful APIs in general, I recommend the
    following link: [https://www.odata.org/getting-started/basic-tutorial/](https://www.odata.org/getting-started/basic-tutorial/).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have explained the main differences between OData web services and
    RESTful APIs, in the next sections, we'll see how to use the Dynamics 365 Business
    Central APIs in your applications.
  prefs: []
  type: TYPE_NORMAL
- en: Using Dynamics 365 Business Central standard APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Dynamics 365 Business Central platform exposes some standard entities as
    RESTful APIs. The entities exposed are summarized in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7bf5d66c-9ea0-40de-a991-ef4d309a4521.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Dynamics 365 Business Central API endpoints have the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Endpoint URL section** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| `https://api.businesscentral.dynamics.com` | Dynamics 365 Business Central
    base URL (the same for standard and custom APIs) |'
  prefs: []
  type: TYPE_TB
- en: '| `/v2.0` | API version |'
  prefs: []
  type: TYPE_TB
- en: '| `/your tenant domain` | Domain name or ID of the Dynamics 365 Business Central
    tenant |'
  prefs: []
  type: TYPE_TB
- en: '| `/environment name` | Name of the environment (production, sandbox, and so
    on). This can be retrieved from the Dynamics 365 Business Central Admin portal
    |'
  prefs: []
  type: TYPE_TB
- en: '| `/api` | Fixed value |'
  prefs: []
  type: TYPE_TB
- en: '| `/beta ` | Indicates the version of the API in use |'
  prefs: []
  type: TYPE_TB
- en: At the time of writing, Dynamics 365 Business Central APIs are on endpoint version
    2.0, and API `version_number = 1.0`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tenant ID is needed when using basic authentication. This is how you do
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you''re using OAuth authentication, the tenant ID is not needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Version 1.0 of the Dynamics 365 Business Central APIs only supports production
    and primary sandbox environments. If you need to use the APIs in a sandbox environment
    that''s different than the default one (which is called `Sandbox`) or in a different
    production environment, you need to use version 2.0 of the APIs, as shown in the
    following endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'When using APIs, the first thing you have to do is use a specific company ID.
    To retrieve the list of available companies on your Dynamics 365 Business Central
    tenant, you need to send an HTTP GET request to the `/companies` API endpoint.
    An example of this API call is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the response we receive:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/45abce03-adfd-4ed1-a570-4907b6cfb9fd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we want to retrieve the list of `Customer` records for a specific company
    (for example, `Cronus IT`), we need to send an HTTP GET request to the following
    API endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the response we receive from it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed085ecb-7366-49a5-82a0-f1cc76497d3d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also apply filters when calling the APIs. For example, here, we retrieve
    all `Item` records where `unitPrice` is greater than 100:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7acfdb8a-14f2-41f9-a0c8-e2854ed360e0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Dynamics 365 Business Central standard APIs also support features such as **expand**,
    in which, in a single call, you can expand the relationships between entities,
    and retrieve the main entity along with the related entities. For example, to
    retrieve a sales invoice and all of its sales invoice line records in a single
    HTTP call, you can perform an HTTP GET call to the following API endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'As a result, you have a single JSON response object with the sales invoice
    header and its related sales invoice line detail. Here is the header object:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/243dead6-3fab-4545-96da-cc2af0bb7d3b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Also, here is the related line''s details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fce0475a-103f-454d-95dd-389552a2c1cc.png)'
  prefs: []
  type: TYPE_IMG
- en: You can now parse this JSON object and use its data as per your needs.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will see how to create a custom API page for a new entity
    added to Dynamics 365 Business Central and how to create a new API page for an
    existing entity.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom API in Dynamics 365 Business Central
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Dynamics 365 Business Central extensions, you can create custom entities
    and you can expose a custom entity as a RESTful API.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new API in Dynamics 365 Business Central, you need to define a
    new `Page` object with `PageType = API`. To do this, you can use the `tpage` snippet
    and then select Page of type API, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fc9eed41-f330-4ba8-8278-91dc7b5074e8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When creating API pages, remember the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Fields must have a name in the REST-API-compliant format (only alphanumeric
    values, and no spaces or special characters (`camelCase`)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should use the ID of the entity (`SystemId`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you insert modify, or delete an entity through APIs, triggers on the underlying
    table are not executed. You need to call the table's trigger by handling the corresponding
    triggers at the page level.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the `OnModify` trigger of the API page, you need to handle the possibility
    of renaming a record (an API call via a record ID can issue a primary key rename).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here, we''ll see two main scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: How to implement an API for a custom entity (assuming that there's an extension
    that adds the `Car` entity to Dynamics 365 Business Central for managing car details
    inside the ERP)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to implement a new API for an existing entity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will look into each of these scenarios in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a new API for a custom entity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this example, we will be creating a new entity in Dynamics 365 Business
    Central to handle the details of `Cars`, and this entity will also be exposed
    as an API for external applications:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we first create a new `Car` table, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `Car` table has the required fields, and it has an `ID` field defined as
    `Guid` that is automatically assigned in the `OnInsert` trigger.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Engine Type` field is of the `Enum EngineType` type, and the `enum` is
    defined as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We also create a `Car List` page (a standard list page) for managing `Car`
    data in Dynamics 365 Business Central. The `Car List` page is defined as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to create the API page (by using the `tpage` snippet and then
    selecting the Page of type API). The `CarAPI` page is defined as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This page exposes the fields that we want to have in our API by applying the
    naming rules according to the OData specifications.
  prefs: []
  type: TYPE_NORMAL
- en: We then handle the `OnInsertRecord`, `OnModifyRecord`, and `OnDeleteRecord`
    page triggers to call the table's triggers and to handle renaming a record.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, press *F5* in Visual Studio Code and publish your extension. When it''s
    published, search for `Car List` and then insert some example `Car` records, such
    as the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f9446d19-55fe-43da-9e9f-4852b6171b75.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we can test our custom API. When published in a SaaS tenant, a custom
    API endpoint has the following format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If you''re testing it on a Docker-based sandbox (for example, on an Azure VM
    as I''m doing here), the API endpoint is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check the metadata for the published API with the following URL (here,
    `d365bcita0918vm` is the name of my Azure VM that''s hosting the container):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The APIs are invoked per company. To have the list of companies on your database,
    you have to send a GET request to the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To have the list of cars for the selected company, you need to send a GET request
    to the following URL (by passing the company ID that was retrieved with the preceding
    call):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In our environment, the URL is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the response that we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65185f83-17be-4343-b409-7e877dd30d9f.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we have the JSON representation of the inserted records, and
    every field (JSON token) has the name that we assigned in our API definition.
  prefs: []
  type: TYPE_NORMAL
- en: 'To insert a new `Car` record via our previously published custom `cars` API,
    you need to send a POST request to the following URL by passing the JSON record
    to create in the body:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the HTTP request we send:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4d187f52-ab3c-4746-be53-37356fafb782.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The response received is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f222ec68-ee03-4ede-99e4-8085818b81a2.png)'
  prefs: []
  type: TYPE_IMG
- en: We receive `HTTP/1.1 201 Created` and the JSON details of the `Car` record are
    added to Dynamics 365 Business Central.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look at `Car List` in Dynamics 365 Business Central, you can see that
    the new record has been created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b90a5159-d150-49a2-b03b-35e1b46e8954.png)'
  prefs: []
  type: TYPE_IMG
- en: When sending a POST request, remember to correctly set the content type of the
    request to `application/json`*.* Otherwise, you can receive a quite confusing
    error in the response message, such as `{"error":{"code":"BadRequest","message":"Cannot
    create an instance of an interface."}}`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To retrieve the details of a specific car record, just send a GET request to
    the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This is done by passing the GUID of the car record to retrieve.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example, if we want to retrieve the details of the Mercedes record,
    we have to send an HTTP GET request to the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the response we receive:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c9094066-a3b3-4b6b-8f95-5bea016a5324.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we have retrieved the JSON representation of the `Car` record.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a new API for an existing entity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we discussed in the *Comparing OData and APIs in Dynamics 365 Business Central* section,
    you cannot extend an existing standard Dynamics 365 Business Central API page.
    If you need to retrieve new fields for a standard Dynamics 365 Business Central
    entity, you need to create a new API page in your namespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, here, I am creating a simple new API that retrieves a customer''s
    details, which are not natively exposed in the standard `Customer` API. The API
    page is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'When this is published on our Dynamics 365 Business Central tenant, we can
    reach this API at the following endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If we send an HTTP GET request to this endpoint to retrieve the `Customer`
    records, we get the following API response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/17137bef-cc4f-46de-ae38-2f43c92d18e5.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the custom API shows all of the `Customer` fields we have added
    to our API page (the `Normal` and `Flowfields` fields).
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll see how to use Dynamics 365 Business Central APIs
    from an external application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an application that uses Dynamics 365 Business Central APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we've mentioned in this chapter, APIs are extremely useful for integrating
    external applications with Dynamics 365 Business Central (they permit us to use
    simple HTTP calls to manage ERP entities and business logic). As an example, here,
    we will create a C# .NET application that creates `Customer` records in a Dynamics
    365 Business Central SaaS tenant.
  prefs: []
  type: TYPE_NORMAL
- en: This scenario is very useful for implementing custom data loading procedures.
    By using APIs, you can create very powerful data transfer routines that permit
    you to load tons of data by avoiding standard tools such as configuration packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'This application is a .NET Console application that does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Connects to a Dynamics 365 Business Central tenant by using basic authentication
    (a username and a web service access key)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reads the company in this tenant and retrieves the company IDs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creates a JSON object that represents a `Customer` record
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sends a POST request to the `Customer` API endpoint by passing the JSON of the
    `Customer` record to create
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The complete source code is on the GitHub repository of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main function of this application is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In the `Main` method, we read the application settings parameters by calling
    the `GetSettingsParameters`function, and then we asynchronously start the tasks
    that read the companies (`GetCompanies`) and create the `Customer` record (`CreateCustomer`)
    via the API.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `GetSettingsParameters` function defines the mandatory parameters for using
    the Dynamics 365 Business Central APIs (such as tenant ID, API URL, user, and
    access key), and it''s defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We invoke the Dynamics 365 Business Central APIs in the `GetCompanies` and `CreateCustomer`
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `GetCompanies` method, we send an HTTP GET request to the following
    endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we retrieve the list of companies in the specified tenant. The response
    is in JSON format, so we need to parse it (we are retrieving the `id` and `name`
    tokens). The code for this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Here, we want to work with a specific company, so we save the desired company
    ID in a global variable called `workingCompanyID` to use that company ID on the
    entire application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `CreateCustomer` method, we send a POST request to the following API
    endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This is done by passing a JSON object in the request body. This object is a
    JSON representation of a `Customer` record (the request's content type must be
    `application/json`). Then, the API response is read.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `CreateCustomer`method''s code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Here, we create a JSON object that represents a `Customer` entity, we send (asynchronously)
    this JSON object as the body of an HTTP POST request to the Dynamics 365 Business
    Central `/customers` API, and we read the API response. When this is invoked,
    the `Customer` record is created in Dynamics 365 Business Central.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that Dynamics 365 Business Central limits the number of simultaneous
    API calls that you can perform in a certain sliding window. If you have an external
    service that performs too many requests on a tenant, you could receive an HTTP
    429 error (`Too Many Requests`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The purpose of this is mainly to avoid things such as **Denial-of-Service**
    (**DoS**) attacks and insufficient resources in the tenant.
  prefs: []
  type: TYPE_NORMAL
- en: 'The actual permitted maximum number of requests per minute is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sandbox environment: 300 requests/minute for OData (5 requests per second),
    and 300 requests/minute for SOAP'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Production environment: 600 requests/minute for OData (10 requests per second),
    and 600 requests/minute for SOAP'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To avoid this situation, you should handle how you perform requests to a Dynamics
    365 Business Central API endpoint and, if you receive this error, you should adopt
    something such as a retry policy on the API calls in your external application.
  prefs: []
  type: TYPE_NORMAL
- en: This is an example of how you can use Dynamics 365 Business Central APIs on
    your custom applications. The example provided uses .NET and C#, but you can use
    the APIs on every platform and with every language that supports HTTP calls.
  prefs: []
  type: TYPE_NORMAL
- en: Using bound actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can use **bound actions** to use RESTful APIs not only to perform CRUD operations
    but also to invoke standard business logic defined in the application (both custom
    and standard code).
  prefs: []
  type: TYPE_NORMAL
- en: Bound actions can be used in the OData V4 endpoint (as described at [https://demiliani.com/2019/06/12/dynamics-365-business-central-using-odata-v4-bound-actions/](https://demiliani.com/2019/06/12/dynamics-365-business-central-using-odata-v4-bound-actions/))
    and standard Dynamics 365 Business Central APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine you have a codeunit (in the example described here, it''s called `CustomerWSManagement`)
    that defines a business logic (a set of functions) to work on the `Customer` entity
    and you want to call some of these methods from APIs. Our codeunit has two business
    functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CloneCustomer`: This creates a new customer based on an existing customer
    record.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GetSalesAmount`: This gives the total sales amount for a given customer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `CustomerWSManagement`codeunit code is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: To use OData V4 bound actions, you need to declare a function in a page, and
    this function must have the `[ServiceEnabled]` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: If you declare a `[ServiceEnabled]`function in a `pageextension` object and
    you try to access the metadata of the OData endpoint (`baseurl/ODataV4/$metadata`),
    you will not see the action published.
  prefs: []
  type: TYPE_NORMAL
- en: 'To publish your action attached to the `Customer` entity, you need to create
    a new page like the following and then publish it as a web service:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `ODataKeyFields` property specifies the field to use as the key when
    calling the OData endpoint (I want the `No.` field of the `Customer` record).
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside this page, I am declaring two procedures to call the two methods defined
    in our AL codeunit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding code, we can see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CloneCustomer`is a procedure called without parameters. It takes the context
    of the call and calls the `CloneCustomer` method defined in our codeunit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GetSalesAmount`is a procedure that takes a code parameter, calls the `GetSalesAmount` procedure
    defined in our codeunit, and returns the result as a response.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What happens with these procedure definitions when we publish the `MyCustomerCard` page
    as a web service (called `MyCustomerCardWS` here)?
  prefs: []
  type: TYPE_NORMAL
- en: 'If we go to the OData V4 metadata endpoint, we can now see that the actions
    are published:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/54407ba0-e13e-4710-af02-9f5790219f56.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we can try to call our bound actions via OData. As the first step, we
    want to call the `CloneCustomer` function. To do this, we need to send an HTTP
    POST request to the following endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output we get after the call:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f6c96e77-d604-4184-9eaa-29d7926d6a7d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The code in our codeunit is called and a `Customer` record has been created
    (that is, cloned by the customer with `"No." = 10000` as the input):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0e86665c-2142-4e3f-8819-8a9e91cdf4c9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Our second function to call (`GetSalesAmount`) wants a `Code[20]` parameter
    as input (it''s not strictly necessary; it''s only to show how to pass parameters
    to a bound action). We need to send a POST request to the following endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, it is done by passing a JSON body with the required parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the POST request that was sent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the response received from the POST request:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/049d1b71-05f1-44fe-a357-ed84b08ebdac.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the response is a JSON object with the value of the total sales
    amount for the given customer (retrieved by calling our codeunit method).
  prefs: []
  type: TYPE_NORMAL
- en: The name of the parameter to pass in the JSON object must match the OData metadata,
    not your function's parameters.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll examine the concept of webhooks inside Dynamics 365
    Business Central and we'll explore how to subscribe to notifications sent from
    a Dynamics 365 Business Central entity.
  prefs: []
  type: TYPE_NORMAL
- en: Using Dynamics 365 Business Central webhooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Webhooks** are a way to create event-driven service integrations: instead
    of polling another system to check whether there are any changes in entities with
    webhooks, a client subscribes to events that will be pushed to it from the source
    system. Dynamics 365 Business Central supports webhooks, so a client can subscribe
    to a webhook notification (event) and will then automatically receive notifications
    if an entity in Dynamics 365 Business Central changes.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To use webhooks with Dynamics 365 Business Central, we need to perform the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A subscriber must register the webhook subscription with Dynamics 365 Business
    Central by making a POST request to the **subscription** API and by passing a
    notification URL in the request body. The endpoint URL is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The request body to establish a subscription is the following (here, we''re
    using the `customers` entity as an example):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Dynamics 365 Business Central returns a validation token to the subscriber.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The subscriber needs to return the validation token in the response body and
    provide status code `200` (this is the mandatory handshake phase).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If Dynamics 365 Business Central receives the validation token in the response
    body, the subscription is registered and notifications will be sent to the notification
    URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When a subscription is established, the subscriber receives a notification for
    every update on the subscribed entity. Webhook subscriptions expire after 3 days
    if they are not renewed before that.
  prefs: []
  type: TYPE_NORMAL
- en: 'To renew a webhook subscription, a subscriber must send a PATCH request to
    the subscription endpoint (this request requires the handshake phase too). The
    request endpoint to renew a webhook subscription is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: To renew a webhook subscription, you need to pass the `@odata.etag` tag of your
    previously established subscription as an `If-Match` block in the PATCH request
    header.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the HTTP response that you receive when the subscription is established:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6aaa518f-cb30-4b05-b385-957769f38583.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you try to issue a subscription request again to the same endpoint where
    an active subscription has been established, you receive the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9ec3d49a-e51b-4296-9700-d54fb05fb7f7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When a subscription is established, a subscriber can receive notifications
    when the subscribed entities in Dynamics 365 Business Central are modified. This
    is an example of a notification sent to a subscriber (the notification is a JSON
    object that contains all of the modified entities):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Webhooks are also exposed for custom objects in our extensions. A page with
    `PageType = API` will expose webhooks with the following limitations (these also
    apply to standard API pages):'
  prefs: []
  type: TYPE_NORMAL
- en: The page cannot have composite keys.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The page cannot use temporary tables or system tables as `SourceTable`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A subscription to a webhook can be deleted by sending a DELETE request to the
    `/subscriptions({id})` endpoint. Also, to delete a subscription, you need to send
    a request with the `If-Match` header containing `@odata.etag` of the subscription
    to delete.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about Dynamics 365 Business Central webhooks, I recommend
    checking this post:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://demiliani.com/2019/12/10/webhooks-with-dynamics-365-business-central/](http://demiliani.com/2019/12/10/webhooks-with-dynamics-365-business-central/)'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you saw how webhooks work in Dynamics 365 Business Central.
    In the next section, we'll see how to use Microsoft Graph APIs with Dynamics 365
    Business Central.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Dynamics 365 Business Central APIs in Microsoft Graph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Microsoft Graph** ([https://graph.microsoft.io/](https://graph.microsoft.io/))
    is an interesting platform that provides a unique gateway for RESTful APIs that
    spans multiple Microsoft services. Dynamics 365 Business Central is now one of
    the endpoints available in Microsoft Graph.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To work with Dynamics 365 Business Central in Graph, you first need to change
    your Dynamics 365 Business Central user''s permission in Graph and then enable
    the Financials.ReadWrite.All permission scope. You can do that by using the Graph
    Explorer tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f1ba0a01-dbda-42f8-a12d-2ee0bf59c4f2.png)'
  prefs: []
  type: TYPE_IMG
- en: After setting the permissions, you can start using the Dynamics 365 Business
    Central APIs available in Graph (actually, you need to use the BETA API endpoint).
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, to retrieve the available companies in your Dynamics 365 Business
    Central tenant, you need to send an HTTP GET request to `https://graph.microsoft.com/beta/financials/companies`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e6d0b09c-38bf-4fe4-892b-cc7b08c2a2da.png)'
  prefs: []
  type: TYPE_IMG
- en: You can parse this JSON response and retrieve the company's ID, which you will
    use in all of the next API calls.
  prefs: []
  type: TYPE_NORMAL
- en: 'To retrieve the list of `Customer` records for a given company, you need to
    send an HTTP GET request to the following URL (by passing the company''s ID):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'As a response, you will get some JSON data with the list of all of your customers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/27873133-374d-4a8c-b164-e4102fdc68f6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To retrieve `general ledger entries` for a given company ordered by descending
    `posting date`, you can perform an HTTP GET request to the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the response received from the API:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/33417869-e843-41ed-b143-976cfe626fb5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To retrieve, for example, the details for a certain `Currency` (for example,
    USD), you need to send an HTTP GET request to the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The response retrieved will be like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/25e76ca5-e2a1-49a5-818c-930b366c855a.png)'
  prefs: []
  type: TYPE_IMG
- en: From this response, we can retrieve the ID of the currency because we can use
    it later to create a new `Customer` record in Dynamics 365 Business Central by
    using Graph APIs.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a `Customer `record in a company with `Currency` `Code` set to USD,
    you need to send an HTTP POST request to the following endpoint and set `Content-type` to `application/json`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The request body of this POST request must be JSON content with the customer''s
    details that we want to create, as in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'As a response, we get some JSON data with the created `Customer` record:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95c529a6-fd84-474a-9d21-3fa9c7dab93a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you now open Dynamics 365 Business Central, you will see that the new `Customer`
    record has been created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b3d8d45c-005e-419f-878d-06e2f1a164ed.png)'
  prefs: []
  type: TYPE_IMG
- en: The Dynamics 365 Business Central APIs available in Graph are listed at [https://docs.microsoft.com/en-us/graph/api/resources/dynamics-graph-reference?view=graph-rest-beta](https://docs.microsoft.com/en-us/graph/api/resources/dynamics-graph-reference?view=graph-rest-beta).
  prefs: []
  type: TYPE_NORMAL
- en: Consider them as beta versions for now, as they will be improved in the future.
  prefs: []
  type: TYPE_NORMAL
- en: We've covered how to use Graph APIs to interact with Dynamics 365 Business Central.
    In the next section, we'll get an overview of the automation APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Automation APIs in Dynamics 365 Business Central
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Dynamics 365 Business Central also exposes APIs for automating tenant-related
    tasks, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating companies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing users, groups, and permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling extensions (the installation/uninstallation of per-tenant extensions)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing and applying configuration packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Automation APIs are under the `/microsoft/automation` namespace. For example,
    to create a company in a Dynamics 365 Business Central tenant, you can send an
    HTTP POST request to the following endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'To retrieve users on your tenant, you need to send a GET request to the following
    endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'When you have retrieved your user''s details, to assign a permission set to
    a user via an automation API, you need to send a POST request to the following
    endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'To modify the details of a Dynamics 365 Business Central user, you need to
    send an HTTP PATCH request to the following endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'To get a list of the extensions installed on a tenant, you can send a GET request
    to the following endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'To handle the installation and uninstallation of extensions, you can send a
    POST request to the following bound actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Microsoft.NAV.install`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Microsoft.NAV.uninstall`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, to uninstall a previously installed extension, you can send a
    POST request to the following endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: AppSource extensions must be previously installed on the tenant; then, you can
    install/uninstall them via the automation API.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have a per-tenant extension, you can upload and install it on the SaaS
    tenant by sending a PATCH request to the following endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Here, the request body content must have the `.app` package file (binary) to
    upload on the tenant. With automation APIs, authentication must be OAuth 2.0 Authorization
    (Bearer Token).
  prefs: []
  type: TYPE_NORMAL
- en: More information about Dynamics 365 Business Central APIs can be found at [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/administration/itpro-introduction-to-automation-apis](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/administration/itpro-introduction-to-automation-apis).
  prefs: []
  type: TYPE_NORMAL
- en: Automation APIs are extremely important and powerful if you need to activate
    a CI/CD pipeline and if you need to hydrate tenants.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we gave an overview of how to use the OData stack (and RESTful
    APIs, in particular) for integration with Dynamics 365 Business Central. We saw
    how to use standard APIs, create custom APIs, create applications that use Dynamics
    365 Business Central APIs, and use advanced concepts such as webhooks and Graph
    APIs. Then, we gave an overview of automation APIs.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of this chapter, you were given a complete overview of how to expose
    Dynamics 365 Business Central business logic and entities and how to handle integrations
    with external applications by using REST HTTP calls. APIs are the future of Dynamics
    365 Business Central integrations, and here, you have learned how to use them
    on your applications and extensions.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll see how to use Azure Functions and other serverless
    services with Dynamics 365 Business Central extensions.
  prefs: []
  type: TYPE_NORMAL
