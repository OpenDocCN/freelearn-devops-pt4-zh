- en: Monitoring, Scaling, and CI/CD with Azure Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监视、扩展和CI/CD与Azure函数
- en: In the previous chapter, we learned how to create Azure Functions with Visual
    Studio and Visual Studio Code, how to publish a function on Azure, and how to
    call an Azure function from a Dynamics 365 Business Central extension.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何使用Visual Studio和Visual Studio Code创建Azure函数，如何在Azure上发布函数，以及如何从Dynamics
    365 Business Central扩展中调用Azure函数。
- en: We also learned how to use Azure Functions to implement serverless processes
    on Azure and execute .NET code in the cloud by looking at a real-life example
    of how to handle files in a SaaS environment. These topics are extremely important
    to understand so that you can execute custom code in a cloud environment and interact
    with external services in a serverless way.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学习了如何在Azure上使用Azure函数来实现无服务器流程，并通过实际示例了解了在SaaS环境中处理文件的.NET代码的执行。理解这些主题非常重要，以便您能够在云环境中执行自定义代码，并以无服务器方式与外部服务交互。
- en: 'In this chapter, we''ll explore other important aspects related to Azure Functions,
    including the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨与Azure函数相关的其他重要方面，包括以下内容：
- en: Monitoring a function published in the Azure cloud
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监视发布在Azure云中的函数
- en: Scaling an Azure function
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展Azure函数
- en: Applying DevOps and CI/CD to Azure Functions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将DevOps和CI/CD应用于Azure函数
- en: By the end of this chapter, you will have had a complete and in-depth overview
    of the Azure Functions service and you will be confident with using this service
    on your Microsoft Dynamics 365 Business Central projects to execute complex code
    and serverless tasks from a cloud tenant.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将对Azure函数服务有一个完整深入的概述，并且您将对在Microsoft Dynamics 365 Business Central项目中使用此服务执行复杂代码和无服务器任务充满信心。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow the content in this chapter, you need to have the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要遵循本章内容，您需要具备以下条件：
- en: A valid Azure subscription (a paid or a trial subscription that you can activate
    for free at [https://azure.microsoft.com/free/](https://azure.microsoft.com/free/))
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有效的Azure订阅（您可以在[https://azure.microsoft.com/free/](https://azure.microsoft.com/free/)上免费激活付费或试用订阅）
- en: A valid account in Azure DevOps ([https://azure.microsoft.com/en-in/services/devops/](https://azure.microsoft.com/en-in/services/devops/))
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Azure DevOps中具有有效的帐户（[https://azure.microsoft.com/en-in/services/devops/](https://azure.microsoft.com/en-in/services/devops/)）
- en: Monitoring Azure Functions
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监视Azure函数
- en: Monitoring Azure Functions is an important task when you're managing your serverless
    services on Azure. If you want to have a reliable service that always works, you
    need to have a policy for checking incoming calls on a function, errors, the need
    for scalability of particular functions, and so on.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在Azure上管理无服务器服务时，监视Azure函数是一项重要任务。如果您希望拥有始终正常工作的可靠服务，您需要制定一个策略来检查函数的传入调用、错误、特定函数的可伸缩性需求等。
- en: 'From the Azure portal, select your Azure function. By clicking on *Monitor*,
    you will be able to see the logged requests (success and errors). The following
    screenshot shows this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 从Azure门户中选择您的Azure函数。通过单击*监视*，您将能够查看已记录的请求（成功和错误）。以下屏幕截图显示了这一点：
- en: '![](img/05cf0678-fe0a-471d-81ca-605064a20eb0.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/05cf0678-fe0a-471d-81ca-605064a20eb0.png)'
- en: 'If you select a single request, you can see its Invocation Details:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择单个请求，您可以查看其调用详细信息：
- en: '![](img/cfe06eb5-689d-4c93-be0b-e6d64b083079.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cfe06eb5-689d-4c93-be0b-e6d64b083079.png)'
- en: 'For more advanced logging, you can click on Run in Application Insights (this
    must be activated from the portal):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更高级的日志记录，您可以单击在应用洞察中运行（必须从门户激活）：
- en: '![](img/e90a8e1c-5570-4f66-8d7a-dc1f7d341447.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e90a8e1c-5570-4f66-8d7a-dc1f7d341447.png)'
- en: 'Here, you can also perform custom queries inside the function''s telemetry.
    For example, this is a query on the telemetry log that displays the number of
    requests per worker role (function) over the last 20 minutes:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您还可以在函数的遥测中执行自定义查询。例如，这是一个关于遥测日志的查询，显示过去20分钟内每个工作角色（函数）的请求次数：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following is the output of this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是此内容的输出：
- en: '![](img/426a22b2-7716-4468-94bf-3d8182ea2ce0.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/426a22b2-7716-4468-94bf-3d8182ea2ce0.png)'
- en: 'The following is a useful query that you can perform on Application Insights
    to retrieve errors in your function:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个在应用洞察中执行的有用查询，用于检索函数中的错误：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When Application Insights is configured, you''ll have a nice panel where you
    can immediately see everything that occurs in your function (failed requests,
    server response time, number of server requests, availability, and so on):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当配置了应用程序洞察（Application Insights）时，你将拥有一个漂亮的面板，能够立即查看函数中的所有事件（失败的请求、服务器响应时间、服务器请求次数、可用性等）：
- en: '![](img/65e8297b-ea3f-47a4-942a-455b2aaca8bb.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/65e8297b-ea3f-47a4-942a-455b2aaca8bb.png)'
- en: 'Application Insights is an important section to check if you wish to discover
    failures and discover whether the function is performing well or needs to be scaled.
    The following screenshot shows this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序洞察是一个重要的检查部分，如果你希望发现故障并确定函数是否表现良好或需要扩展，可以查看此功能。以下截图展示了这一点：
- en: '![](img/5f4040ef-a8e4-4faf-94b2-d52e0905ada0.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5f4040ef-a8e4-4faf-94b2-d52e0905ada0.png)'
- en: More information about working efficiently with Application Insights can be
    found at [https://docs.microsoft.com/en-us/azure/azure-functions/functions-monitoring](https://docs.microsoft.com/en-us/azure/azure-functions/functions-monitoring).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何高效使用应用程序洞察的更多信息，请访问[https://docs.microsoft.com/en-us/azure/azure-functions/functions-monitoring](https://docs.microsoft.com/en-us/azure/azure-functions/functions-monitoring)。
- en: As you can see, Application Insights is an extremely powerful tool for monitoring
    your live services and managing your function's logs. I recommend that you always
    activate it in order to keep your serverless platform on Azure under control.
    Next, let's learn how Azure Functions work.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，应用程序洞察是一个极其强大的工具，能帮助你监控实时服务并管理函数日志。我建议你始终启用它，以便将 Azure 上的无服务器平台保持在可控状态。接下来，我们来了解
    Azure Functions 的工作原理。
- en: Scaling Azure Functions
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展 Azure Functions
- en: When using Azure Functions in a production environment, scalability is an important
    aspect to check because it allows you to tune up your service and avoid bottlenecks
    or resource deficits.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中使用 Azure Functions 时，扩展性是一个重要的检查方面，因为它允许你优化服务，避免瓶颈或资源短缺。
- en: 'Azure Functions are executed on two different plans:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Functions 在两个不同的计划上执行：
- en: '**Consumption plan**: You pay for what you consume. Your app is scaled up or
    down according to your power requirements. Your billing depends on the number
    of executions, the execution time, and the memory that the app is using.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消费计划**：你为所消耗的资源付费。应用根据功率需求自动扩展或缩减。计费依据是执行次数、执行时间和应用使用的内存。'
- en: '**Premium plan**: This is quite similar to the consumption plan (scaling up
    and down is handled automatically according to the requested power). Your billing
    depends on the amount of core per second and the GB of memory per second that''s
    used across all of your instances. The Premium plan adds the following features:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高级计划**：这与消费计划非常相似（根据请求的功率自动处理扩展）。你的计费取决于每秒核心数和每秒使用的内存 GB 总量，涵盖了所有实例。高级计划增加了以下功能：'
- en: Always warm instances to avoid cold starts
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 始终预热实例以避免冷启动
- en: VNet connectivity
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: VNet 连接
- en: Unlimited execution duration
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无限执行时长
- en: Premium instance sizes (one core, two core, and four core instances)
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级实例大小（一个核心、两个核心和四个核心实例）
- en: Predictable pricing options
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可预测的定价选项
- en: High-density app allocation for plans with multiple function apps
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高密度应用分配，适用于包含多个函数应用的计划
- en: 'You can check the hosting plan that''s used by your function via the Overview
    tab in the Azure portal:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过 Azure 门户中的概述选项卡查看函数使用的托管计划：
- en: '![](img/539465e5-4323-412e-8b44-6f82e1b1b25c.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/539465e5-4323-412e-8b44-6f82e1b1b25c.png)'
- en: Your Azure function can also run on the same dedicated environment as other
    cloud applications (App Service apps). This is called an App Service plan, and
    you pay the same quota for all the functions in the same App Service plan. When
    you use an App Service plan, you can handle scaling manually (by adding, for example,
    more VM instances) or automatically (by enabling autoscale).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 Azure 函数还可以在与其他云应用程序（如 App Service 应用）相同的专用环境中运行。这被称为**应用服务计划**，你为同一应用服务计划中的所有函数支付相同的配额。当你使用应用服务计划时，可以手动扩展（例如通过添加更多虚拟机实例）或自动扩展（通过启用自动扩展）。
- en: For more information about this plan, see [https://docs.microsoft.com/en-us/azure/app-service/overview-hosting-plans](https://docs.microsoft.com/en-us/azure/app-service/overview-hosting-plans).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有关此计划的更多信息，请参见[https://docs.microsoft.com/en-us/azure/app-service/overview-hosting-plans](https://docs.microsoft.com/en-us/azure/app-service/overview-hosting-plans)。
- en: Now, you have a clear overview of the scaling and related billing options that
    you have when you deploy your functions on Azure. You should select the plan you
    wish to use according to your business needs.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您清楚地了解了在将函数部署到 Azure 时可用的扩展和相关计费选项。根据您的业务需求，您应选择您希望使用的计划。
- en: Azure Functions and DevOps
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure Functions 和 DevOps
- en: In this section, we will discuss DevOps techniques and, in particular, how you
    can create a CI/CD process for your Azure Functions with Azure DevOps.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论 DevOps 技术，特别是如何使用 Azure DevOps 为您的 Azure Functions 创建 CI/CD 过程。
- en: 'First, to have source code management, your function''s code must be hosted
    on a Git repository. Here, we''re using Azure DevOps as a repository for our CI/CD
    process:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，为了实现源代码管理，您的函数代码必须托管在 Git 仓库中。这里，我们使用 Azure DevOps 作为我们的 CI/CD 过程的仓库：
- en: 'To start, create a new project in Azure DevOps. This project will contain a
    Git repository for your source code. By clicking on the **Repos** menu on the
    left, you will see the URL of this repository. Clone it into your local folder
    with the following command:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在 Azure DevOps 中创建一个新项目。此项目将包含您的源代码的 Git 仓库。点击左侧的**Repos**菜单，您将看到此仓库的 URL。使用以下命令将其克隆到您的本地文件夹：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this local repository, I''ve placed all the project files for our `EmailValidator`
    Azure function that we previously developed with Visual Studio and committed.
    Then, we pushed all the files to our online Azure DevOps repository, as shown
    in the following screenshot:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个本地仓库中，我已将我们之前使用 Visual Studio 开发并提交的 `EmailValidator` Azure 函数的所有项目文件放置其中。然后，我们将所有文件推送到我们的在线
    Azure DevOps 仓库，如下图所示：
- en: '![](img/510e9c6b-92f9-46be-bf4c-65550dc199af.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/510e9c6b-92f9-46be-bf4c-65550dc199af.png)'
- en: Our code is now on Azure DevOps.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的代码现在已在 Azure DevOps 上。
- en: 'Now, we want to create a build pipeline for our Azure Functions project. From
    the Azure DevOps project page, select Pipelines | Builds and click on New Pipeline.
    On the Where is your code? page, click on Use the classic editor to create a pipeline
    without YAML:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们想为我们的 Azure Functions 项目创建一个构建管道。从 Azure DevOps 项目页面，选择 Pipelines | Builds
    并点击新建管道（New Pipeline）。在“您的代码在哪里？”页面，点击使用经典编辑器（Use the classic editor）以在没有 YAML
    的情况下创建管道：
- en: '![](img/4c015536-f3ca-48db-b124-c5ba489eb1a4.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4c015536-f3ca-48db-b124-c5ba489eb1a4.png)'
- en: 'Now, you have to choose where your code is going to be hosted. Select Azure
    Repos Git and select a repository from the list (you should have only one repository
    for the selected project) and a branch to use:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您需要选择代码将托管在哪里。选择 Azure Repos Git，并从列表中选择一个仓库（您应该只为所选项目拥有一个仓库）以及一个分支：
- en: '![](img/78fa0141-cdf0-43c1-92c5-99c9452dbfd6.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/78fa0141-cdf0-43c1-92c5-99c9452dbfd6.png)'
- en: 'Click on Continue. On the Choose a template page, you need to select a template
    for your build pipeline. Scroll down the list, select Azure Functions for .NET,
    and click Apply:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击继续（Continue）。在选择模板页面上，您需要为构建管道选择一个模板。向下滚动列表，选择适用于 .NET 的 Azure Functions，然后点击应用（Apply）：
- en: '![](img/8262bb1f-f426-4f7e-9ab9-edc8e9d2ca0b.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8262bb1f-f426-4f7e-9ab9-edc8e9d2ca0b.png)'
- en: Your build pipeline will be created according to the template you've selected.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您的构建管道将根据您选择的模板创建。
- en: 'Click on Save & queue:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击保存并排队（Save & queue）：
- en: '![](img/5f44f182-2778-4be5-82d9-512eaee995d0.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5f44f182-2778-4be5-82d9-512eaee995d0.png)'
- en: 'Now, a new Save build pipeline and queue window will appear. Here, click on
    Save & queue again:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，会出现一个新的保存构建管道和排队窗口。在这里，再次点击保存并排队（Save & queue）：
- en: '![](img/86bd862d-5525-4d64-a006-024611c2b8ef.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/86bd862d-5525-4d64-a006-024611c2b8ef.png)'
- en: 'Now, your build pipeline has been queued. At the top of your screen, you should
    see something similar to the following message:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您的构建管道已排队。在屏幕顶部，您应该看到类似以下的消息：
- en: '![](img/8f045fcb-9b3b-449a-baa0-f25b537d1fa8.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8f045fcb-9b3b-449a-baa0-f25b537d1fa8.png)'
- en: 'If you click on the build number, you will see the build steps that have been
    performed:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果点击构建号，您将看到已执行的构建步骤：
- en: '![](img/a50767a0-6580-4480-961e-63e6de95b50f.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a50767a0-6580-4480-961e-63e6de95b50f.png)'
- en: The build process is working, and the nice thing is that you also receive an
    email, notifying you about the build result.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 构建过程正在进行，而且好的一点是，您还会收到一封电子邮件，通知您构建结果。
- en: 'We have triggered the build manually, but a good developer is often a lazy
    developer, and so we want to trigger the build automatically on every commit on
    the repository in the master branch. Let''s take a look at how to do this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们手动触发了构建，但一个优秀的开发者通常是个懒开发者，因此我们希望在每次提交到主分支时自动触发构建。让我们来看一下如何做到这一点：
- en: 'To define a build trigger, select the build pipeline and click **Edit**:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要定义构建触发器，选择构建管道并点击**编辑**（Edit）：
- en: '![](img/26bdbf70-93fd-4f86-a15c-6eb79f8c6be1.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/26bdbf70-93fd-4f86-a15c-6eb79f8c6be1.png)'
- en: 'Here, select Triggers and click on Enable continuous integration:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，选择触发器并点击启用持续集成：
- en: '![](img/ce5f709d-86c3-44e5-a945-7c173bdef3fa.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ce5f709d-86c3-44e5-a945-7c173bdef3fa.png)'
- en: Click on Save & queue and select the Save option.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“保存并排队”并选择“保存”选项。
- en: Now, when you push a new code modification to your code repository, the build
    is automatically triggered.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当您向代码库推送新的代码修改时，构建会自动触发。
- en: 'If we want to have an automatic deployment to Azure for our function project
    upon every commit, we have to create a release pipeline. Let''s learn how to do
    this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望在每次提交时自动部署 Azure 上的函数项目，我们必须创建一个发布流水线。让我们来学习如何做到这一点：
- en: 'To create a release pipeline on Azure DevOps, select Pipelines | Releases and
    click on New Pipeline. Then, select Azure App Service deployment and click Apply:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在 Azure DevOps 上创建发布流水线，请选择“流水线”|“发布”，然后点击“新建流水线”。接着，选择“Azure 应用服务部署”并点击“应用”：
- en: '![](img/9fd56cd9-0493-4def-a520-fbd0a9c18a52.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9fd56cd9-0493-4def-a520-fbd0a9c18a52.png)'
- en: 'On the next screen, click on Add in the Artifacts section on the left:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一屏幕中，点击左侧“工件”部分的“添加”：
- en: '![](img/efdfe0a3-255c-4239-9c5c-d5e120124e6d.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efdfe0a3-255c-4239-9c5c-d5e120124e6d.png)'
- en: 'On the Add an Artifact page, select Build as the Source Type. Then, select
    your build pipeline and click on Add:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“添加工件”页面上，选择“构建”作为源类型。然后，选择您的构建流水线并点击“添加”：
- en: '![](img/bdc7ef01-e083-4fee-8237-2e8c873eb9fd.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bdc7ef01-e083-4fee-8237-2e8c873eb9fd.png)'
- en: 'Now, click the red exclamation mark on Stage 1 to view the build tasks:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击“阶段 1”上的红色感叹号查看构建任务：
- en: '![](img/850c9514-bfcf-4da5-a768-43c4ba892840.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/850c9514-bfcf-4da5-a768-43c4ba892840.png)'
- en: Here, you have to select an Azure subscription and set App Type to Function
    App on Windows.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您需要选择一个 Azure 订阅，并将应用类型设置为 Windows 上的“函数应用”。
- en: 'To use the Azure subscription, you need to click the Authorize button after
    you''ve made your selection (you need to disable your popup blocker if it''s active):'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用 Azure 订阅，您需要在做出选择后点击“授权”按钮（如果弹出窗口拦截器已开启，需要禁用它）：
- en: '![](img/f2b82741-dbbe-4f74-83b8-3f5ba500e3f7.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f2b82741-dbbe-4f74-83b8-3f5ba500e3f7.png)'
- en: 'When your subscription has been authorized, select the App Service name:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您的订阅已被授权后，选择应用服务名称：
- en: '![](img/2dcb5795-76f4-4a74-8029-91846229016c.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2dcb5795-76f4-4a74-8029-91846229016c.png)'
- en: 'Then, click on Save. By doing this, your release pipeline will be saved and
    ready:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击“保存”。这样，您的发布流水线将被保存并准备好：
- en: '![](img/f05f2be8-b987-436b-b273-fb56d7244b8a.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f05f2be8-b987-436b-b273-fb56d7244b8a.png)'
- en: 'To create a new release manually on Azure DevOps, select Pipelines | Releases
    and click on Create a release. On the Create a new release page, don''t change
    anything and just click on Create:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在 Azure DevOps 上手动创建一个新发布，请选择“流水线”|“发布”，然后点击“创建发布”。在“创建新发布”页面上，不要更改任何内容，只需点击“创建”：
- en: '![](img/bf9f40d2-cdf9-4abb-8a15-210764fd97ec.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bf9f40d2-cdf9-4abb-8a15-210764fd97ec.png)'
- en: 'A new release will be queued:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新的发布将会被排队：
- en: '![](img/d7779664-3140-49db-8af5-b1a02d12555d.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d7779664-3140-49db-8af5-b1a02d12555d.png)'
- en: 'If you click the release name, you will be redirected to the release progress
    page:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您点击发布名称，您将被重定向到发布进度页面：
- en: '![](img/323cb420-ff21-4c63-8e11-dd605d5616a0.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/323cb420-ff21-4c63-8e11-dd605d5616a0.png)'
- en: 'If your release pipeline succeeds, your function will be automatically deployed
    to the Azure App Service:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的发布流水线成功，您的函数将被自动部署到 Azure 应用服务：
- en: '![](img/e0e1c441-86e5-463b-884c-ef8874152766.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e0e1c441-86e5-463b-884c-ef8874152766.png)'
- en: 'Finally, to fully enable a continuous deployment process, we need to edit the
    release pipeline again and click on the continuous deployment icon:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，为了完全启用持续部署流程，我们需要再次编辑发布流水线，并点击持续部署图标：
- en: '![](img/6918920a-68b2-414f-8975-747f8f3d0068.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6918920a-68b2-414f-8975-747f8f3d0068.png)'
- en: 'Here, we need to enable the Continuous deployment trigger option:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们需要启用“持续部署触发器”选项：
- en: '![](img/decfb771-3ffd-4fbe-b0de-46b96bdb210c.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/decfb771-3ffd-4fbe-b0de-46b96bdb210c.png)'
- en: That's it! We have a CI/CD process in place for our Azure function.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！我们已经为我们的 Azure 函数设置了 CI/CD 流程。
- en: With this process, and by using Azure DevOps, you can automatically build and
    release (deploy) an Azure function onto your cloud environment, all from a managed
    platform.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此过程，并通过 Azure DevOps，您可以自动构建并发布（部署）一个 Azure 函数到您的云环境中，整个过程都在一个托管平台上完成。
- en: Summary
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概要
- en: In this chapter, we learned how to monitor an Azure function, how to monitor
    incoming calls and logs, and how to use Application Insights for advanced analysis.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何监视 Azure 函数，如何监控传入的调用和日志，以及如何使用 Application Insights 进行高级分析。
- en: In all, we learned how to select the best service plan for the functions that
    we'll be deploying in the cloud, and then we learned how to implement CI/CD techniques
    to create a smart deployment process of our functions in the cloud.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，我们学习了如何为我们将在云端部署的功能选择最佳的服务计划，接着我们又学习了如何实施 CI/CD 技术，以创建一个智能的云端功能部署流程。
- en: Now, you have a clear overview of the options that are available for deploying
    and monitoring services on Azure and for selecting the best deployment model for
    your business case. You've also learned how you can activate a CI/CD process on
    your development pipeline so that you can build and deploy functions on Azure.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经清楚地了解了可用于在 Azure 上部署和监控服务的选项，并且学会了如何为您的业务案例选择最佳的部署模型。您还学会了如何在开发流水线中激活
    CI/CD 流程，从而在 Azure 上构建和部署功能。
- en: In the next chapter, we'll talk about how to integrate Dynamics 365 Business
    Central with the *Microsoft Power Platform* and, in particular, how to use *Flow*
    and *PowerApps* with Dynamics 365 Business Central to implement "zero-coding"
    business processes.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何将 Dynamics 365 Business Central 与*Microsoft Power Platform*集成，特别是如何使用*Flow*和*PowerApps*与
    Dynamics 365 Business Central 配合，实施“零编码”业务流程。
