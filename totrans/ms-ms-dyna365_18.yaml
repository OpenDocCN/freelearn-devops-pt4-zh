- en: Monitoring, Scaling, and CI/CD with Azure Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to create Azure Functions with Visual
    Studio and Visual Studio Code, how to publish a function on Azure, and how to
    call an Azure function from a Dynamics 365 Business Central extension.
  prefs: []
  type: TYPE_NORMAL
- en: We also learned how to use Azure Functions to implement serverless processes
    on Azure and execute .NET code in the cloud by looking at a real-life example
    of how to handle files in a SaaS environment. These topics are extremely important
    to understand so that you can execute custom code in a cloud environment and interact
    with external services in a serverless way.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll explore other important aspects related to Azure Functions,
    including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring a function published in the Azure cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scaling an Azure function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying DevOps and CI/CD to Azure Functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have had a complete and in-depth overview
    of the Azure Functions service and you will be confident with using this service
    on your Microsoft Dynamics 365 Business Central projects to execute complex code
    and serverless tasks from a cloud tenant.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow the content in this chapter, you need to have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A valid Azure subscription (a paid or a trial subscription that you can activate
    for free at [https://azure.microsoft.com/free/](https://azure.microsoft.com/free/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A valid account in Azure DevOps ([https://azure.microsoft.com/en-in/services/devops/](https://azure.microsoft.com/en-in/services/devops/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring Azure Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Monitoring Azure Functions is an important task when you're managing your serverless
    services on Azure. If you want to have a reliable service that always works, you
    need to have a policy for checking incoming calls on a function, errors, the need
    for scalability of particular functions, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the Azure portal, select your Azure function. By clicking on *Monitor*,
    you will be able to see the logged requests (success and errors). The following
    screenshot shows this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/05cf0678-fe0a-471d-81ca-605064a20eb0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you select a single request, you can see its Invocation Details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cfe06eb5-689d-4c93-be0b-e6d64b083079.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For more advanced logging, you can click on Run in Application Insights (this
    must be activated from the portal):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e90a8e1c-5570-4f66-8d7a-dc1f7d341447.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, you can also perform custom queries inside the function''s telemetry.
    For example, this is a query on the telemetry log that displays the number of
    requests per worker role (function) over the last 20 minutes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/426a22b2-7716-4468-94bf-3d8182ea2ce0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is a useful query that you can perform on Application Insights
    to retrieve errors in your function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'When Application Insights is configured, you''ll have a nice panel where you
    can immediately see everything that occurs in your function (failed requests,
    server response time, number of server requests, availability, and so on):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65e8297b-ea3f-47a4-942a-455b2aaca8bb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Application Insights is an important section to check if you wish to discover
    failures and discover whether the function is performing well or needs to be scaled.
    The following screenshot shows this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f4040ef-a8e4-4faf-94b2-d52e0905ada0.png)'
  prefs: []
  type: TYPE_IMG
- en: More information about working efficiently with Application Insights can be
    found at [https://docs.microsoft.com/en-us/azure/azure-functions/functions-monitoring](https://docs.microsoft.com/en-us/azure/azure-functions/functions-monitoring).
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, Application Insights is an extremely powerful tool for monitoring
    your live services and managing your function's logs. I recommend that you always
    activate it in order to keep your serverless platform on Azure under control.
    Next, let's learn how Azure Functions work.
  prefs: []
  type: TYPE_NORMAL
- en: Scaling Azure Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using Azure Functions in a production environment, scalability is an important
    aspect to check because it allows you to tune up your service and avoid bottlenecks
    or resource deficits.
  prefs: []
  type: TYPE_NORMAL
- en: 'Azure Functions are executed on two different plans:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Consumption plan**: You pay for what you consume. Your app is scaled up or
    down according to your power requirements. Your billing depends on the number
    of executions, the execution time, and the memory that the app is using.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Premium plan**: This is quite similar to the consumption plan (scaling up
    and down is handled automatically according to the requested power). Your billing
    depends on the amount of core per second and the GB of memory per second that''s
    used across all of your instances. The Premium plan adds the following features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Always warm instances to avoid cold starts
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: VNet connectivity
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Unlimited execution duration
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Premium instance sizes (one core, two core, and four core instances)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Predictable pricing options
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: High-density app allocation for plans with multiple function apps
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can check the hosting plan that''s used by your function via the Overview
    tab in the Azure portal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/539465e5-4323-412e-8b44-6f82e1b1b25c.png)'
  prefs: []
  type: TYPE_IMG
- en: Your Azure function can also run on the same dedicated environment as other
    cloud applications (App Service apps). This is called an App Service plan, and
    you pay the same quota for all the functions in the same App Service plan. When
    you use an App Service plan, you can handle scaling manually (by adding, for example,
    more VM instances) or automatically (by enabling autoscale).
  prefs: []
  type: TYPE_NORMAL
- en: For more information about this plan, see [https://docs.microsoft.com/en-us/azure/app-service/overview-hosting-plans](https://docs.microsoft.com/en-us/azure/app-service/overview-hosting-plans).
  prefs: []
  type: TYPE_NORMAL
- en: Now, you have a clear overview of the scaling and related billing options that
    you have when you deploy your functions on Azure. You should select the plan you
    wish to use according to your business needs.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Functions and DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss DevOps techniques and, in particular, how you
    can create a CI/CD process for your Azure Functions with Azure DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, to have source code management, your function''s code must be hosted
    on a Git repository. Here, we''re using Azure DevOps as a repository for our CI/CD
    process:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start, create a new project in Azure DevOps. This project will contain a
    Git repository for your source code. By clicking on the **Repos** menu on the
    left, you will see the URL of this repository. Clone it into your local folder
    with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In this local repository, I''ve placed all the project files for our `EmailValidator`
    Azure function that we previously developed with Visual Studio and committed.
    Then, we pushed all the files to our online Azure DevOps repository, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/510e9c6b-92f9-46be-bf4c-65550dc199af.png)'
  prefs: []
  type: TYPE_IMG
- en: Our code is now on Azure DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we want to create a build pipeline for our Azure Functions project. From
    the Azure DevOps project page, select Pipelines | Builds and click on New Pipeline.
    On the Where is your code? page, click on Use the classic editor to create a pipeline
    without YAML:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4c015536-f3ca-48db-b124-c5ba489eb1a4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, you have to choose where your code is going to be hosted. Select Azure
    Repos Git and select a repository from the list (you should have only one repository
    for the selected project) and a branch to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/78fa0141-cdf0-43c1-92c5-99c9452dbfd6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on Continue. On the Choose a template page, you need to select a template
    for your build pipeline. Scroll down the list, select Azure Functions for .NET,
    and click Apply:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8262bb1f-f426-4f7e-9ab9-edc8e9d2ca0b.png)'
  prefs: []
  type: TYPE_IMG
- en: Your build pipeline will be created according to the template you've selected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Save & queue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5f44f182-2778-4be5-82d9-512eaee995d0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, a new Save build pipeline and queue window will appear. Here, click on
    Save & queue again:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/86bd862d-5525-4d64-a006-024611c2b8ef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, your build pipeline has been queued. At the top of your screen, you should
    see something similar to the following message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8f045fcb-9b3b-449a-baa0-f25b537d1fa8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click on the build number, you will see the build steps that have been
    performed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a50767a0-6580-4480-961e-63e6de95b50f.png)'
  prefs: []
  type: TYPE_IMG
- en: The build process is working, and the nice thing is that you also receive an
    email, notifying you about the build result.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have triggered the build manually, but a good developer is often a lazy
    developer, and so we want to trigger the build automatically on every commit on
    the repository in the master branch. Let''s take a look at how to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To define a build trigger, select the build pipeline and click **Edit**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/26bdbf70-93fd-4f86-a15c-6eb79f8c6be1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, select Triggers and click on Enable continuous integration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ce5f709d-86c3-44e5-a945-7c173bdef3fa.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Save & queue and select the Save option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, when you push a new code modification to your code repository, the build
    is automatically triggered.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to have an automatic deployment to Azure for our function project
    upon every commit, we have to create a release pipeline. Let''s learn how to do
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a release pipeline on Azure DevOps, select Pipelines | Releases and
    click on New Pipeline. Then, select Azure App Service deployment and click Apply:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9fd56cd9-0493-4def-a520-fbd0a9c18a52.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the next screen, click on Add in the Artifacts section on the left:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/efdfe0a3-255c-4239-9c5c-d5e120124e6d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the Add an Artifact page, select Build as the Source Type. Then, select
    your build pipeline and click on Add:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bdc7ef01-e083-4fee-8237-2e8c873eb9fd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, click the red exclamation mark on Stage 1 to view the build tasks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/850c9514-bfcf-4da5-a768-43c4ba892840.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, you have to select an Azure subscription and set App Type to Function
    App on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the Azure subscription, you need to click the Authorize button after
    you''ve made your selection (you need to disable your popup blocker if it''s active):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f2b82741-dbbe-4f74-83b8-3f5ba500e3f7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When your subscription has been authorized, select the App Service name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2dcb5795-76f4-4a74-8029-91846229016c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, click on Save. By doing this, your release pipeline will be saved and
    ready:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f05f2be8-b987-436b-b273-fb56d7244b8a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To create a new release manually on Azure DevOps, select Pipelines | Releases
    and click on Create a release. On the Create a new release page, don''t change
    anything and just click on Create:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bf9f40d2-cdf9-4abb-8a15-210764fd97ec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A new release will be queued:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d7779664-3140-49db-8af5-b1a02d12555d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you click the release name, you will be redirected to the release progress
    page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/323cb420-ff21-4c63-8e11-dd605d5616a0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If your release pipeline succeeds, your function will be automatically deployed
    to the Azure App Service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e0e1c441-86e5-463b-884c-ef8874152766.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, to fully enable a continuous deployment process, we need to edit the
    release pipeline again and click on the continuous deployment icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6918920a-68b2-414f-8975-747f8f3d0068.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, we need to enable the Continuous deployment trigger option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/decfb771-3ffd-4fbe-b0de-46b96bdb210c.png)'
  prefs: []
  type: TYPE_IMG
- en: That's it! We have a CI/CD process in place for our Azure function.
  prefs: []
  type: TYPE_NORMAL
- en: With this process, and by using Azure DevOps, you can automatically build and
    release (deploy) an Azure function onto your cloud environment, all from a managed
    platform.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to monitor an Azure function, how to monitor
    incoming calls and logs, and how to use Application Insights for advanced analysis.
  prefs: []
  type: TYPE_NORMAL
- en: In all, we learned how to select the best service plan for the functions that
    we'll be deploying in the cloud, and then we learned how to implement CI/CD techniques
    to create a smart deployment process of our functions in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you have a clear overview of the options that are available for deploying
    and monitoring services on Azure and for selecting the best deployment model for
    your business case. You've also learned how you can activate a CI/CD process on
    your development pipeline so that you can build and deploy functions on Azure.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll talk about how to integrate Dynamics 365 Business
    Central with the *Microsoft Power Platform* and, in particular, how to use *Flow*
    and *PowerApps* with Dynamics 365 Business Central to implement "zero-coding"
    business processes.
  prefs: []
  type: TYPE_NORMAL
