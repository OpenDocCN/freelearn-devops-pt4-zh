- en: Integrating Machine Learning into Dynamics 365 Business Central
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we gave an overview of the Microsoft Power Platform,
    and we saw how to use Dynamics 365 Business Central with Flow and PowerApps to
    solve business tasks with zero coding.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll talk about a topic that has been emerging over the
    last few years: **Machine Learning** (**ML**) with Dynamics 365 Business Central.
    The year 2019 is the year of **Artificial Intelligence** (**AI**). You hear about
    AI everywhere. The world is telling us: *If you want to be on top, apply AI*.
    But what is AI? How does it differ from classical programming? What is going on
    behind the scenes?'
  prefs: []
  type: TYPE_NORMAL
- en: The aim of this chapter is not for you to become a true data scientist or ML
    master, but to get a clear understanding of the basics of AI and some experience
    of how to embed AI into your Dynamics 365 Business Central projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What ML is and an overview of its main processes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamics 365 Business Central ML Framework overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using ML in your Dynamics 365 Business Central applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the Prediction API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are AI and ML?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AI consists of tasks that are characteristic of human intelligence, such as
    language and speech understanding, recognizing objects and sounds, and planning.
    The word *tasks* is used because, technically, you can complete these tasks with
    two different approaches: classical programming and ML.'
  prefs: []
  type: TYPE_NORMAL
- en: At the beginning of 1990, some companies introduced **Optical Character Recognition**
    (**OCR**) software. They invested millions of dollars and hired hundreds of developers
    who wrote code to recognize handwritten text. This was classical programming with
    simple tools, such as `if-else`. The approach worked, but the result was quite
    poor. The accuracy was low and the number of mistakes was high.
  prefs: []
  type: TYPE_NORMAL
- en: Why did this approach fail? Because what is natural for a human brain is very
    difficult to be programmed.
  prefs: []
  type: TYPE_NORMAL
- en: So, how we can solve this task in another way? The answer is ML!
  prefs: []
  type: TYPE_NORMAL
- en: '"Machine learning is the process by which a machine (computer) is capable of
    showing behavior that has not been explicitly programmed into it"'
  prefs: []
  type: TYPE_NORMAL
- en: – Arthur Samuel, 1959
  prefs: []
  type: TYPE_NORMAL
- en: 'Or, in other words: computers learn from data to perform predictive analytics.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, instead of writing code, to create ML functions, we need something
    else: data.'
  prefs: []
  type: TYPE_NORMAL
- en: So, let's cover this process in detail in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: An overview of the ML process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: According to its definition, ML is an application of AI that provides systems
    with the ability to learn and improve on their own, from experience, and not by
    being explicitly programmed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the classic ML process. It''s when you try to predict an answer based
    on answers from previous experience:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/58038a1b-78bd-4958-9ffe-875c0de8ddb4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s go through the preceding diagram in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Define a question**: ML is not a magic box. To get an answer, you should
    know the question, and you should build a model that will answer that exact question.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remember: the exact question is the key to the right answer!'
  prefs: []
  type: TYPE_NORMAL
- en: '**Find data**: You should find data that will answer your question. The data,
    which, in (ML) terminology, is usually called a *dataset*, should be relevant,
    complete, exact, and sufficient. In this chapter, we will use Dynamics 365 Business
    Central as business-related data storage.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Prepare your data**: To make the ML training process possible, you should
    join all of your tables in one table (dataset). You should define which field
    you want to predict (the label) and which fields influence the predictions (the
    features).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Train the ML model**: During this step, you create ML models by applying
    a training dataset to the ML algorithm.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Test your trained ML model**:To understand the quality of predictions and
    to calculate ML model accuracy, you need also a *test dataset*. The test dataset
    should be different from the training dataset but have the same structure.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For example, here is our training dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Date** | **Sales Amount** |'
  prefs: []
  type: TYPE_TB
- en: '| 01.11.17 | 100 |'
  prefs: []
  type: TYPE_TB
- en: '| 18.11.17 | 150 |'
  prefs: []
  type: TYPE_TB
- en: '| 08.12.17 | 250 |'
  prefs: []
  type: TYPE_TB
- en: '| 17.12.17 | 260 |'
  prefs: []
  type: TYPE_TB
- en: 'This is what we used to create the `F(day) = "sales amount"` ML model, and
    here is our test dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Date** | **Sales Amount** |'
  prefs: []
  type: TYPE_TB
- en: '| 05.11.17 | 140 |'
  prefs: []
  type: TYPE_TB
- en: '| 15.12.17 | 240 |'
  prefs: []
  type: TYPE_TB
- en: 'We take features from the test dataset and apply them to our trained ML model
    to predict labels:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Date** | **Sales Amount** | **Predicted Sales Amount** |'
  prefs: []
  type: TYPE_TB
- en: '| 05.11.17 | 140 | 137 |'
  prefs: []
  type: TYPE_TB
- en: '| 15.12.17 | 240 | 245 |'
  prefs: []
  type: TYPE_TB
- en: 'Then, we compare Sales Amount with Predicted Sales Amount and get the model''s
    accuracy:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Date** | **Sales Amount** | **Predicted Sales Amount** | **Difference,
    %** |'
  prefs: []
  type: TYPE_TB
- en: '| 05.11.17 | 140 | 137 | 2.1% |'
  prefs: []
  type: TYPE_TB
- en: '| 15.12.17 | 240 | 245 | 2.1% |'
  prefs: []
  type: TYPE_TB
- en: So, the accuracy of our model is 97.9%.
  prefs: []
  type: TYPE_NORMAL
- en: '**Publish the ML model as a web service**: When you are satisfied with the
    model''s accuracy, you can publish your model as a web service and consume it
    from everywhere to predict the future from new features. If I call the published
    model for future dates, the results show predictions for future dates, as shown
    in the following table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Date** | **Predicted Sales Amount** |'
  prefs: []
  type: TYPE_TB
- en: '| 06.11.18 | 115 |'
  prefs: []
  type: TYPE_TB
- en: '| 16.12.18 | 255 |'
  prefs: []
  type: TYPE_TB
- en: With a well-trained ML model, you can easily get predictions using your data.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's see how the Business Central ML Framework works.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Business Central ML Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building your own (custom) ML model from scratch could be complicated. It usually
    requires experience in Python, R, or services such as Azure ML Studio. If you
    don't want to invest in that but still want to use the power of AI with your data,
    you can use **Dynamics 365 Business Central ML Framework**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Technically, it can be divided into four different frameworks:'
  prefs: []
  type: TYPE_NORMAL
- en: The Time Series API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ML Prediction API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The custom Azure ML API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The custom Vision API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each framework is intended for its own task and uses different algorithms:'
  prefs: []
  type: TYPE_NORMAL
- en: For example, with the **Time Series API**, you can predict numbers (such as
    sales and quantities) with the power of regression algorithms just by knowing
    dates and numbers from the past.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the **ML Prediction API**, you can predict classes, such as yes/no or colors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Custom Azure ML API** allows you to connect to your custom model, built
    in **Azure ML Studio**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Custom Vision API** allows you to connect to your custom model, built
    in **Custom Vision**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next sections, we will focus on the **Time Series** and **ML Prediction
    APIs**, as they are the simplest and don't require ML experience, but they're
    still powerful.
  prefs: []
  type: TYPE_NORMAL
- en: The Time Series API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, let's assume that you are the owner of a restaurant and you
    want to predict how many items from the menu your customers will order in the
    next 7 days.
  prefs: []
  type: TYPE_NORMAL
- en: 'You have the following sales history:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/89864f7f-b462-4f56-a816-bab64e31d69a.png)'
  prefs: []
  type: TYPE_IMG
- en: In this dataset, you have 38,325 rows and 11 columns. The sales history entries
    exist from January 10, 2015 to December 9, 2018\. The dataset can be found at [https://dkatsonpublicdatasource.blob.core.windows.net/machinelearning/AML-restaurant-sales-by-menu-item.csv](https://dkatsonpublicdatasource.blob.core.windows.net/machinelearning/AML-restaurant-sales-by-menu-item.csv).
  prefs: []
  type: TYPE_NORMAL
- en: You can call the **Time Series API** using AL Language code to get predictions
    about **orders**. Then, we can check the quality of the predictions programmatically
    before displaying them to the end user. Let's see how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 – Downloading the dataset to Dynamics 365 Business Central
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps to download the dataset into Business Central:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new AL project in Visual Studio Code and clone this GitHub repository:
    [https://github.com/dkatson/BC-ML-Framework](https://github.com/dkatson/BC-ML-Framework).
    You will get a new `RestSalesEntry` table (and a page) where you can save this
    dataset, and a new codeunit, `RefreshRestSales`, that will upload this dataset
    from an external source:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cd3cfd6f-4880-47e0-ac13-9fab7a796498.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you publish this app, you''ll see this page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f23c9c76-5fb8-4014-bcbb-e2c47de8b35e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Refresh restsales button, and you will see this dataset inside
    Dynamics 365 Business Central:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d876af65-f6a0-4467-b82a-6fd70287319f.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, you have data in place, but to make predictions, you need to have an ML
    model published as a web service, where you will send data to get predictions
    back. So, for this, we move to the second step.
  prefs: []
  type: TYPE_NORMAL
- en: Step 2 – Publishing a model as a web service from a public template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With a few clicks, you can create a model from a public template and publish
    an endpoint that serves only your needs. Enter the following URL in your favorite
    browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://gallery.cortanaintelligence.com/Experiment/Forecasting-Model-for-Microsoft-Dynamics-365-for-Financials-1](https://gallery.cortanaintelligence.com/Experiment/Forecasting-Model-for-Microsoft-Dynamics-365-for-Financials-1)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a publicly available model prepared by the Microsoft ERP team and aimed
    at time series predictions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4bfe2fd4-3cfe-4854-88b4-3178bd2ff72f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Open in Studio** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Free Workspace** or **Standard Workspace**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign in to your Microsoft account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **OK** button to copy the experiment from the gallery.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keep the default values in the **Region** and **Workspace** fields, unless you
    are an experienced user of Azure ML.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Run** button at the bottom of the experiment canvas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Deploy Web Service | Deploy Web Service (Classic)** button at
    the bottom of the experiment canvas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The system deploys the Azure ML experiment as web services and provides a RESTful
    API that can be consumed by a wide range of devices and platforms, including Dynamics
    365 Business Central:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/993ae2f5-3c19-4b87-a9db-f1cc821c79e3.png)'
  prefs: []
  type: TYPE_IMG
- en: When the deployment is finished, the web services dashboard opens.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you can see the API key and two available APIs: Request/Response and
    Batch Execution. The current version of the Time Series API that is shipped with
    Dynamics 365 Business Central supports the Request/Response API. At the bottom
    of the API help page, you can find input and output definitions and code samples.
    However, the request URI is the only thing you need for this example.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy and paste the API key in a text file to save it although you can also access
    it later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Request/Response** link to open the API help page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4657c5e4-8af4-4559-9f3e-f2ff9ab7f441.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, copy and paste the request URI in a text file to save it although
    you can also access it later:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/03ad5ede-9667-4c66-bbf0-b5a3fc8b8ff1.png)'
  prefs: []
  type: TYPE_IMG
- en: That's it. This ML model, which can predict any figure, including *orders* (from
    our example) is now published, and you can call it from the Dynamics 365 Business
    Central Time Series API.
  prefs: []
  type: TYPE_NORMAL
- en: Step 3 – Sending your data from Business Central to the ML endpoint to get predictions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next step is to send the data to the endpoint to receive predictions. Let''s
    see how that happens:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your AL project in Visual Studio Code, cloned from [https://github.com/dkatson/BC-ML-Framework](https://github.com/dkatson/BC-ML-Framework),
    and switch to the `Time-Series-API` branch. Here, press *Ctrl* + *Shift* + *P*
    and type `checkout`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c1fc0bea-1b29-400a-9634-430d2d44e20e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, select a branch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f4953f68-f053-4762-a715-2d381842b84b.png)'
  prefs: []
  type: TYPE_IMG
- en: This is the upgraded version of the restaurant example extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'The differences between this and the previous one are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Demonstration data (demo items and sales history) is loaded automatically when
    you install the app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A new action appears in the Item Card – `Update Rest. Forecast`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at how it works.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a new codeunit called `Calculate Rest. Forecast` with the main function, `CalculateRestForecast`,
    and two additional functions, `getMLUri` and `getMLKey`*. *Insert your URI and
    a key (copied from *step 2*) into these functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/02735bfa-4545-4539-96a8-f9952426e226.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s investigate the `CalculateRestForecast` function''s variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/31ed2dec-85bd-4d50-8964-de9990df2ef7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the preceding screenshot, we understand the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TimeSeriesMgt` is a time series library, which prepares the data, submits
    it to the Azure ML, and gets the prediction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RestSalesEntry` is our history dataset, which we will use to prepare the data,
    and which we will send to the Azure ML web service to get the predictions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TempTimeSeriesForecast` is prepared data that we will send to the Azure ML
    web service to get the predictions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TimeSeriesModel` is the name (or combination) of regression algorithm(s) that
    will be applied to the prepared data inside of Azure ML web service to get predictions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TempTimeSeriesBuffer` is our prediction that was received from the Azure ML
    web service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s investigate the `CalculateRestForecast` function''s business logic.
    The whole task can be done with four functions from the `Time Series Management`
    variable. Here, `Initialize` is used to set up the connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bca0c9ef-6c5f-464f-ba86-12894f88eda2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, prepare the historical data that you will use for predictions. In our
    case, we will predict `orders` by items, which means that one call to the ML web
    service will return `orders` predictions for one item. So, it makes sense to filter
    the sales history dataset by one item per call:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/46d4ee2a-6171-4fb5-bc26-53fa9547153a.png)'
  prefs: []
  type: TYPE_IMG
- en: '`PrepareData` transforms any table data into a dataset that is ready for submission.
    Specify the source table and the field to be used for grouping. Remember that
    the Time Series API requires the date as the second grouping of fields. Choose
    a label —the field that you want to predict. It should contain numerical values—decimals
    or integers.'
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we will specify the `date` field from `RestSalesEntry` as a date,
    `menu_item_id` as a group field, and `orders` as a predictive field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, we specify that `Period type` is equal to `day` (because we have historical
    transactions for each day), `start day` for the predictions will be the current
    `work date`, and the number of historical entries that will be used to calculate
    an `orders` prediction will be all of the entries we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/81b8bbc6-f425-447a-a69c-0fa20bf74a1f.png)'
  prefs: []
  type: TYPE_IMG
- en: The number of historical periods tells the system how many periods it should
    take from the past, starting from the forecast date. This means that if you have
    holes in your historic dataset, then it will also include them in the calculation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, our historical data finishes at 2018-12-09\. And we want to forecast
    starting from 2019-01-05\. We have a hole of about 6 months. That means that the `PrepareData`
    function will fill that hole with zero entries and, as a result, will exclude
    6 months of historical data, starting from the beginning (2015-01-10):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dacc2060-f6a4-4d7d-8e1b-51b9b4e90d63.png)'
  prefs: []
  type: TYPE_IMG
- en: You can avoid that by playing with the `ObservationPeriod` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the data is prepared, you can read it and modify it before sending it
    to Azure Machine Learning Service. For example, here, we had a missing period
    in our `RestSalesEntry` dataset. During the `PrepareData` stage, there are system-generated
    zero (0) entries. If we send this dataset as is, Machine Learning Service will
    think that we had no sales for that period, and that will dramatically influence
    sales predictions for the future. To avoid that, we need to exclude zero entries
    from the prepared dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/639a8f49-d5ce-4003-8c25-f4317d2bcd26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `Forecast` function sends the final prepared dataset to the Azure ML web
    service, which calculates the forecast according to specified parameters and returns
    the forecast result. Let''s investigate the input parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ForecastingPeriods`:This is thenumber of days/months/years for the future
    forecast that you want to get—a specific period type equal to what you specified
    in the `PrepareData` function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ConfidenceLevel`: This is the minimum probability of the forecast result.
    If you specify 0, it will use 80%, or you can specify the exact percentage. You
    can try different values and see how it will change. We don''t recommend using
    a value higher than 95.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TimeSeriesModel`*:* This is a statistical algorithm that is used by the Azure
    ML web service to create forecasts based on the prepared historical dataset you
    send. It could be ARIMA, ETS, or STL. It also could be a combination of ETS +
    ARIMA, ETS + STL, or all three.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In our case, we will calculate an `orders` forecast for the next 7 days with
    a minimum probability of 80%, and we will apply all of the statistical algorithms
    and calculate the average result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/60e941a5-7a45-4158-a09c-92730e5566d8.png)'
  prefs: []
  type: TYPE_IMG
- en: '`GetForecast` populates the `TempTimeSeriesForecast` table with the forecast
    results, which you can then use anywhere:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0a926237-2226-4d2a-8395-57423b571a16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The simplest way to investigate the results is to create a list page with the
    `TempTimeSeriesForecast` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c6207ecd-0737-48df-a22e-ed3ee931bc05.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's publish this app and investigate the results. Go to the rice pudding item
    with the No. 2 field as 34 and click on Actions | Item | Restaurant | Update Rest.
    Forecast*:*
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/955643f6-523b-4978-b9ac-007450896279.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The result will be stored in a temporary table and shown on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/70c1ee2d-7344-46bd-93f6-32c2b2d786a2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The delta is around 140%, which is quite big. The reason is that we calculated
    the forecast from April 2019, but our last entry in the past is from September
    2018, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a8ac5949-ee3d-44ee-9bf7-10c396cf5146.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we change Work date to September 24, 2018 (the day just after the last actual
    prediction we have) and run the forecast, we will see that the delta decreases
    to 65%:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f8162faf-ebce-4d78-accb-855f8a114002.png)'
  prefs: []
  type: TYPE_IMG
- en: But still, the delta percentage is quite big. Why? That's because of the lack
    of features used in the forecast.
  prefs: []
  type: TYPE_NORMAL
- en: Time series forecasts use only two features, `item no.` and `date`. But usually,
    it's required to use more features that influence a forecast.
  prefs: []
  type: TYPE_NORMAL
- en: After understanding how the Time Series API framework works, let's explore its
    Prediction API.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the ML Prediction API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we trained an ML model based on the Time Series API.
    As there is a limit of only two features, the resulting model had poor accuracy.
    With the **ML Prediction API**, you can set as many features as you want. This
    approach gives you more flexibility and opportunities to experiment, allowing
    you to improve model quality by changing features and generating new features.
  prefs: []
  type: TYPE_NORMAL
- en: Also, the ML Prediction API allows you to train a custom ML model directly from
    AL.
  prefs: []
  type: TYPE_NORMAL
- en: If you are building an industry solution, you can add the `train-ml-model` function
    directly to your Dynamics 365 Business Central app.
  prefs: []
  type: TYPE_NORMAL
- en: The API is available in codeunit 2003, ML Prediction Management. Let's look
    at how it works.
  prefs: []
  type: TYPE_NORMAL
- en: In Visual Studio Code, open the project you cloned from [https://github.com/dkatson/BC-ML-Framework](https://github.com/dkatson/BC-ML-Framework) and
    switch to the `Train-ML-Model-From-AL-API`branch. This is the upgraded version
    of the previously seen restaurant example extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'The differences between this and the previous one are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We don't use the Time Series API.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We train an ML model (with eight features) to get the **orders** forecasted
    directly from AL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step 1 – Publishing a general prediction model as a web service from a public
    template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a prerequisite for the training from the Business Central process, you still
    need to publish your general prediction ML web service into your Azure subscription.
  prefs: []
  type: TYPE_NORMAL
- en: Visit [https://gallery.azure.ai/Experiment/Prediction-Experiment-for-Dynamics-365-Business-Central](https://gallery.azure.ai/Experiment/Prediction-Experiment-for-Dynamics-365-Business-Central) in
    your favorite browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a publicly available model prepared by the Microsoft ERP team and was
    designed especially for ML prediction management use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/14363075-e22e-4886-93c7-22a0d13c0c35.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To publish it, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open this experiment in Azure ML Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run it, and then deploy it as a web service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the web service dashboard, copy the API key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Step 2 – Training the ML model from AL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the Visual Studio Code project you cloned earlier, there is a table called **Rest.
    ML Forecast Setup** with two additional functions, `getMLUri` and `getMLKey`*.*
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert your URI and a key (copied from the previous step) into these functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/093eea32-a7a7-4381-94d0-ea8be27d3b85.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the Train Rest. Forecast ML codeunit and find the `Train()`function*.*
    Let''s investigate how it works. The defined variables are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7d79ad6a-b59b-42d6-ac90-13f89e46a955.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the preceding screenshot, we observe the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ML Prediction Management`: This is the main codeunit, which has functions
    to train, save, and use the ML model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MyModel`: This is the trained model in coded text format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MyModelQuality`: This is the quality of the trained model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Setup`: This is the table where trained models are stored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RestSalesEntry`: This is the historical data used to train an ML model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Specify connections to your published predictive ML web service, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/118bb55a-168b-4561-9ccb-216b7ce09953.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, prepare historical data for the training process. You can filter data or
    add new columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'The important things to note here are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: There should not be empty fields in the training dataset. If you have them,
    fill them with any value, such as `0` or `NA`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you have a `Date` field, split it into two fields (at least): day and month.
    Usually, the forecast depends on these fields, not on the date itself. The date
    format is not supported in this API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c08662bb-b88a-4794-bebf-a25a39c5f80e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Specify the features for the model. Here, you specify the fields that influence
    the predictions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5694bbe6-90d7-4800-9ca4-a5a32a3ccbf6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, we specify the label. Here, you specify the fields that you are going
    to predict:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3951631c-a0a3-45b9-a868-50409b6b3137.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we train the model. Here, you send a request to the web service with
    the historical data that''s used for training. As a result, you will get a trained
    model in Base64 text format and the model quality:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a9c4d83a-4eb2-4879-a116-f411946cbee9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Save your trained model. It will be used later, in the prediction process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/19047403-80f2-47f9-858b-002323158d5a.png)'
  prefs: []
  type: TYPE_IMG
- en: Step 3 – Predicting using the trained model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open the Calculate Rest. Forecast ML codeunit and find the `Predict()` function.
    Let''s see how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check that you have the trained model in place:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dd68325c-ecd2-4af3-b6da-1208b7d44e91.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Specify the connection to your published predictive ML web service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b4cff367-79cc-4ab5-9e12-16ad98e73c16.png)'
  prefs: []
  type: TYPE_IMG
- en: Generate a temporary table with data (features), which will be used to get **orders**
    (predictions). The structure of this table should be the same as the table you
    used in the training process. Otherwise, the `Prediction` web service will not
    work properly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, pass this table to the ML web service input. It''s important to understand
    that predictions will be calculated for each record (row) of the passed table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cabb485a-ec5e-40c2-b69c-4b0ac559ddaf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Specify which fields from the table will be the features. List them in the
    same order as when you trained the model. Otherwise, the `Prediction` web service
    will not work properly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a4f9cd12-f1dd-45b6-a48c-d48b2f93754b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Specify which field from the passed table will be a label. Use the same field
    that you used when you trained the model. You can only mention one field here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/188fb2be-e7ea-4a4b-949f-4f1195f6b11a.png)'
  prefs: []
  type: TYPE_IMG
- en: The ML Prediction API can make predictions using classification or regression
    algorithms. You don't control that. If the label field has a type of integer or
    decimal, then the regression tree algorithm, `annova`, will be applied. Otherwise,
    it will use a classification algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: If you predict values using classification algorithms, then you can also specify
    a field to save the confidence percentage of the prediction. This isn't supported
    for the regression algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Predict values using the `Predict` function and pass the trained ML model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/35d9c6cd-09a1-453a-ad40-d895cf12ed5b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Save the forecast result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ea9a5723-30c9-4b1d-8ea8-b751cbcffbcc.png)'
  prefs: []
  type: TYPE_IMG
- en: You now have forecast data to check.
  prefs: []
  type: TYPE_NORMAL
- en: Step 4 – Getting insights into how ML works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you get predictions from an ML web service, it''s always interesting to
    understand why the model gives some results or makes those decisions. As the ML
    Prediction API uses tree-based ML algorithms, we can see the decision tree:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7d4df0a2-b6d6-40f7-9a86-d79666281368.png)'
  prefs: []
  type: TYPE_IMG
- en: It's important to understand that the decision tree is an artifact of the trained
    model, not of the predictions made by the trained model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Train Rest. Forecast ML codeunit and find the `DownloatPlotOfTheModel`
    function*.* Let''s see how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect to your published ML web service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Get the `.pdf` file with the decision tree calling the `PlotModel` function.
    You will get it in Base64 text format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, use the `DownloadPlot` function to save the `.pdf` file locally. If you
    don''t need to save it, just skip this line of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7e5a3234-fd52-45be-8601-b77552e39d9b.png)'
  prefs: []
  type: TYPE_IMG
- en: You will have a plot of your ML model.
  prefs: []
  type: TYPE_NORMAL
- en: Step 5 – Publishing and running the forecast
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you publish and run the forecast from the Item card, you will get this
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a3dbad0a-1071-4241-b8b2-95b4785461c7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you to compare the forecast results with the previous models, you will notice
    that this model gives worse results than the custom-built ML model, but better
    results than the Time Series API:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/82d3e4cc-1132-41ce-b791-c3d09d3e128d.png)'
  prefs: []
  type: TYPE_IMG
- en: This section explained how ML prediction works and the steps involved in performing
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we looked through the ML APIs available with Dynamics 365
    Business Central. I''ve made a comparative analysis of the three ML APIs in the
    following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **The Time Series API** | **The ML Prediction API** | **The Custom Azure
    ML API** |'
  prefs: []
  type: TYPE_TB
- en: '| **ML Experience required** | Low | Medium | High |'
  prefs: []
  type: TYPE_TB
- en: '| **ML Model** | Microsoft | Microsoft | Custom |'
  prefs: []
  type: TYPE_TB
- en: '| **Data preparation level** | Low | Medium | High |'
  prefs: []
  type: TYPE_TB
- en: '| **Max Features** | 2 | Unlimited | Unlimited |'
  prefs: []
  type: TYPE_TB
- en: '| **Training service** | - | Business Central | Azure ML Studio |'
  prefs: []
  type: TYPE_TB
- en: '| **Trained model storage** | - | Business Central | Azure ML Studio |'
  prefs: []
  type: TYPE_TB
- en: '| **ML Model quality** | Low | Medium | High |'
  prefs: []
  type: TYPE_TB
- en: '| **ML Model usage level** | General | Industry | Company |'
  prefs: []
  type: TYPE_TB
- en: The comparison is based on the example provided in this chapter. Use this table
    as a guide to help you to choose the best way of applying AI in your app.
  prefs: []
  type: TYPE_NORMAL
- en: As we learned here, building custom ML models is an art that requires creativity,
    time, and some math skills.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll explore an architectural overview and look at the
    best practices of moving your existing ISV solutions to extensions.
  prefs: []
  type: TYPE_NORMAL
