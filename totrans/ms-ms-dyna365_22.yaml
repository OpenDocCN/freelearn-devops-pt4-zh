- en: Moving Existing ISV Solutions to the New Extension Model
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将现有的 ISV 解决方案迁移到新的扩展模型
- en: In this chapter, we'll focus on existing ISV solutions for Dynamics NAV (mainly
    based on the C/AL language). We'll also look at tips, tricks, and best practices
    to adopt when moving these solutions to Dynamics 365 Business Central and to the
    new extension programming paradigm.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将重点介绍现有的 ISV 解决方案（主要基于 C/AL 语言）。我们还将探讨在将这些解决方案迁移到 Dynamics 365 Business
    Central 及新扩展编程范式时应采纳的技巧、窍门和最佳实践。
- en: 'The topics we will cover in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖的主题如下：
- en: Architectural best practices for moving a C/AL solution to an extension-based
    one
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 C/AL 解决方案迁移到基于扩展的架构的最佳实践
- en: Converting existing C/AL code into AL
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将现有 C/AL 代码转换为 AL
- en: Things to check and remember during a solution redesign for SaaS environments
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 SaaS 环境中重新设计解决方案时需要检查和记住的事项
- en: By the end of this chapter, you will have a better understanding of what steps
    are required to move an existing C/AL solution to AL, the architectural choices
    when converting a monolithic C/AL solution into extensions (this will affect your
    final application and how you will sell it), and the tools that can help you in
    this migration process (code conversion tools).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将更好地理解将现有 C/AL 解决方案迁移到 AL 所需的步骤，转换单体 C/AL 解决方案为扩展时的架构选择（这将影响你的最终应用程序以及如何销售它），以及在迁移过程中可以帮助你的工具（代码转换工具）。
- en: Preparing the transition from C/AL to AL and extensions
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备从 C/AL 迁移到 AL 和扩展的过渡
- en: Without a doubt, Dynamics NAV was one of the ERPs in the international market
    that had the most active community of partners and users. If you are a customer
    that would like to implement Dynamics NAV, it is really quite easy to find a custom
    solution that fits and is tailored to your business needs. To do this, just search
    through one of several add-ons that have been developed by partners or **Independent
    Software Vendors** (**ISVs**) over the years.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 毋庸置疑，Dynamics NAV 是国际市场上拥有最活跃的合作伙伴和用户社区之一。如果你是想实施 Dynamics NAV 的客户，实际上很容易找到符合并量身定制的解决方案。为此，只需搜索通过合作伙伴或
    **独立软件供应商**（**ISVs**）多年来开发的多个附加组件。
- en: 'All these solutions are written using the C/AL language. Normally, they contain
    the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些解决方案都是使用 C/AL 语言编写的。通常，它们包含以下内容：
- en: New objects (objects that are created to satisfy a customer's business case)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新对象（为满足客户业务需求而创建的对象）
- en: Modified standard objects (objects from the standard application base code that
    have been modified to satisfy a customer's need)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改过的标准对象（从标准应用基础代码中修改过的对象，以满足客户需求）
- en: These solutions are always a monolithic solution (everything is packaged into
    a single codebase inside the database, where an object can reference all the other
    objects in the solution).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些解决方案始终是单体解决方案（所有内容都打包成一个数据库内的单一代码库，其中一个对象可以引用解决方案中的所有其他对象）。
- en: With Dynamics 365 Business Central, CSIDE Development Environment and the C/AL
    language are available only until version 14.x and only for the on-premise world.
    From version 15 (wave 2), Microsoft has removed those developer tools, and so
    existing solutions must now be moved to AL and converted into the new extension
    model.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Dynamics 365 Business Central 中，CSIDE 开发环境和 C/AL 语言仅适用于版本 14.x，并且仅适用于本地部署环境。从版本
    15（wave 2）开始，Microsoft 已移除这些开发工具，因此现有解决方案必须迁移到 AL 并转换为新的扩展模型。
- en: Moving an existing C/AL-based solution to AL extensions is not always just an
    easy *code conversion* process; normally, it requires a redesign and a rethink
    of the entire application (this is always the approach that's suggested by Microsoft).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 将现有的 C/AL 基础解决方案迁移到 AL 扩展并不仅仅是一个简单的 *代码转换* 过程；通常，它需要重新设计并重新思考整个应用程序（这始终是 Microsoft
    推荐的方法）。
- en: 'When planning to move an existing C/AL solution to AL extensions, on the technical
    side, there are three main aspects to consider:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在计划将现有 C/AL 解决方案迁移到 AL 扩展时，从技术角度来看，有三个主要方面需要考虑：
- en: How many extensions should I write to best split the C/AL solution?
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我应该编写多少个扩展才能最好地拆分 C/AL 解决方案？
- en: How can I reuse my existing C/AL code?
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何重用我现有的 C/AL 代码？
- en: What is allowed and not allowed when it comes to targeting a SaaS-based solution?
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 针对基于 SaaS 的解决方案，哪些是允许的，哪些是不允许的？
- en: In the upcoming sections, we will learn how these aspects affect the transition
    from an existing solution to the new programming model and to the new platform.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将学习这些方面如何影响从现有解决方案到新编程模型和新平台的过渡。
- en: Planning the number of extensions to code
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 规划扩展的数量
- en: As we mentioned in [Chapter 5](d8553d40-bf59-4aef-983c-89519ef30e29.xhtml), *Developing
    a Customized Solution for Dynamics 365 Business Central*, extension A cannot reference
    objects and methods exposed by extension B. This is only possible if extension
    A explicitly declares a dependency on extension B.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第五章](d8553d40-bf59-4aef-983c-89519ef30e29.xhtml)中提到的，*为 Dynamics 365 Business
    Central 开发定制解决方案*，扩展 A 不能引用扩展 B 所暴露的对象和方法。只有当扩展 A 明确声明依赖于扩展 B 时，这才是可能的。
- en: 'When moving an existing solution to extensions, you have two main choices:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在将现有解决方案迁移到扩展时，您有两个主要选择：
- en: Create a single monolithic extension
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个单一的整体扩展
- en: Create N dependent extensions
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 N 个依赖扩展
- en: Let's explore these concepts in more detail.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地探索这些概念。
- en: 'A single monolithic extension is an easier choice since developers don''t have
    to think about independent modules. Instead, they just create all the objects
    and business logic in a single giant AL extension project. In the end, there will
    be a single `.app` file that does the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 单一的整体扩展是一个更简单的选择，因为开发人员不需要考虑独立模块。相反，他们只需在一个巨大的 AL 扩展项目中创建所有对象和业务逻辑。最终，将会生成一个
    `.app` 文件，该文件执行以下操作：
- en: Adds new objects
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加新对象
- en: Extends standard objects
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展标准对象
- en: Adds new business logic
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加新的业务逻辑
- en: Raises events
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触发事件
- en: Subscribes to events raised by the standard business logic
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订阅由标准业务逻辑触发的事件
- en: 'The following diagram shows this solution:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了这个解决方案：
- en: '![](img/5c79b993-a83c-4495-aa8c-a33975d17a42.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5c79b993-a83c-4495-aa8c-a33975d17a42.png)'
- en: 'Developers don''t have to think about dependencies in this context (all the
    code is in a single object). However, the disadvantage of this solution is that
    even a small update of the extension (such as adding a little code change) requires
    unpublishing and publishing the entire application. This simply means that we
    update an extension in Dynamics 365 Business Central: unpublish the old version
    and publish the new version.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，开发人员无需考虑依赖关系（所有代码都在一个对象中）。然而，这种解决方案的缺点是，即使是扩展的小更新（比如增加一点代码变化）也需要撤销发布并重新发布整个应用程序。这意味着我们在
    Dynamics 365 Business Central 中更新扩展：撤销发布旧版本并发布新版本。
- en: 'Secondly, this is not a solution that can be split into and sold as modules.
    However, splitting your solution into N separate extensions is a good choice if
    you want to have a modular solution. When moving an existing C/AL solution to
    N separate extensions, you typically have the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，这不是一个可以拆分并作为模块销售的解决方案。然而，如果你希望拥有一个模块化的解决方案，将解决方案拆分为 N 个独立的扩展是一个不错的选择。在将现有的
    C/AL 解决方案迁移到 N 个独立的扩展时，通常会有以下情况：
- en: Independent or standalone extensions (modules that do not require dependencies
    from other modules)
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独立或独立运行的扩展（不依赖于其他模块的模块）
- en: Dependent extensions (modules that require dependencies from other modules)
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖扩展（需要其他模块的依赖的模块）
- en: 'A diagram of this solution is as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 该解决方案的示意图如下：
- en: '![](img/8e552814-a180-45d0-ac5b-ef10fcb65078.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8e552814-a180-45d0-ac5b-ef10fcb65078.png)'
- en: Here, extension A is an independent extension (it can only reference objects
    from the base module). Extension C depends on extension A, while extension B depends
    on A and C.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，扩展 A 是一个独立扩展（它只能引用基础模块中的对象）。扩展 C 依赖于扩展 A，而扩展 B 依赖于 A 和 C。
- en: 'Dependencies have some advantages, such as the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖关系有一些优点，例如：
- en: They help us structure more complex deployment scenarios
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们帮助我们构建更复杂的部署场景
- en: They improve code and business logic reusability (avoiding redundancy)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们提高了代码和业务逻辑的可重用性（避免冗余）
- en: They increase maintenance
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们增加了维护成本
- en: They enhance deployment flexibility
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们增强了部署的灵活性
- en: 'The drawbacks of dependencies are as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖关系的缺点如下：
- en: When you publish the extensions, you must publish the extension that doesn't
    have any dependencies (the so-called master or parent extension) first. For example,
    if you try and publish an extension with dependencies first (a child), it will
    throw an error stating that object references do not exist in the database.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你发布扩展时，必须先发布没有任何依赖关系的扩展（所谓的主扩展或父扩展）。例如，如果你尝试先发布带有依赖关系的扩展（子扩展），它将抛出一个错误，指出数据库中不存在对象引用。
- en: When you remove extensions, you must remove the dependent extensions first (such
    as a child) and subsequently the parent extension.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你删除扩展时，必须先删除依赖的扩展（例如子扩展），然后再删除父扩展。
- en: So, we may be wondering which is the better option here.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可能会想知道哪种选择更好。
- en: This is the question that every Microsoft partner is currently asking themselves.
    There are no rules written in stone about this topic, and what you want to achieve
    in terms of object modularity, as well as your marketing strategy, depends a lot
    on your own existing solution.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是每个微软合作伙伴目前都在思考的问题。关于这个话题没有固定的规则，你想要实现的对象模块化目标以及你的市场营销策略，很大程度上取决于你现有的解决方案。
- en: A best practice and suggestion is to not skip or avoid dependencies. Moving
    an existing C/AL solution to N different dependent extensions is a good choice
    as it guarantees modularity and flexibility, but it is also recommended to not
    create too many micro-extensions. Developers should think about macro functionalities
    and try to isolate them into featured modules that can be installed when needed
    by customers.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一个最佳实践和建议是不要跳过或避免依赖关系。将现有的C/AL解决方案迁移到N个不同的依赖扩展中是一个不错的选择，因为它保证了模块化和灵活性，但也建议不要创建过多的微型扩展。开发人员应该思考宏功能，并尝试将其隔离到可以在客户需要时安装的特色模块中。
- en: An important thing to remember within this context is to always add events in
    order to let others hook your existing codebase.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程中需要记住的一点是，始终添加事件，以便让其他人能够钩取你现有的代码库。
- en: Only by raising events (*integration* or *business* events) can you have a solution
    that can interact with other extensions that have been installed in the system
    and that can also be extended by third parties (other Microsoft partners).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 只有通过引发事件（*集成*或*业务*事件），你才能拥有一个能够与系统中已安装的其他扩展进行交互的解决方案，并且该解决方案也可以被第三方（其他微软合作伙伴）扩展。
- en: In the next section, we'll learn how to speed up the conversion process (where
    possible!) of your existing C/AL-based solutions to AL.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将学习如何加速将现有基于C/AL的解决方案转换为AL的过程（在可能的情况下！）。
- en: Converting existing solutions into AL
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将现有解决方案转换为AL
- en: Many Microsoft partners that actually work with Dynamics NAV have developed
    a lot of custom solutions over the years (add-ons, customer solutions, and so
    on). In order to be ready for the new Dynamics 365 Business Central platform,
    these must be migrated to AL code.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 许多实际使用Dynamics NAV的微软合作伙伴多年来开发了大量的自定义解决方案（附加组件、客户解决方案等）。为了准备迎接新的Dynamics 365
    Business Central平台，这些解决方案必须迁移到AL代码。
- en: If you have an existing codebase or an existing solution in place, the first
    thing you can do when it comes to moving this solution to the extensions world
    is to try to convert your C/AL objects into AL.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有现有的代码库或现有的解决方案，关于将该解决方案迁移到扩展世界，首先可以做的事情是尝试将你的C/AL对象转换为AL。
- en: Please keep in mind that conversion is not always the best thing to do, but
    just a starting point (you can convert all new objects as-is, but you should pay
    attention and refactor the modified standard objects that your existing solution
    will certainly have).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，转换并不总是最好的做法，它只是一个起点（你可以照原样转换所有新的对象，但你应该注意并重构你现有解决方案中修改过的标准对象，这些对象是你现有解决方案中一定会有的）。
- en: So, how can you convert your C/AL solution into AL?
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，你如何将C/AL解决方案转换为AL呢？
- en: 'As we mentioned in [Chapter 7](81958c15-06a3-4a59-ae0c-0afa9413d6f9.xhtml), *Report
    Development with AL*, Dynamics 365 Business Central on-premise and Docker images
    come shipped with a tool that can easily help with converting C/AL objects into
    AL objects: `Txt2AL.exe`.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第7章](81958c15-06a3-4a59-ae0c-0afa9413d6f9.xhtml)中提到的，*使用AL进行报表开发*，Dynamics
    365 Business Central本地版和Docker镜像自带一个工具，可以轻松帮助将C/AL对象转换为AL对象：`Txt2AL.exe`。
- en: With this tool, you can specify a series of C/AL objects of any kind, export
    them in TXT format, and automatically convert them into AL format.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此工具，你可以指定一系列任何类型的C/AL对象，将它们导出为TXT格式，并自动转换为AL格式。
- en: 'To proficiently use this tool, you should perform the following steps:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了熟练使用此工具，你应该执行以下步骤：
- en: 'Make an export of all the baseline object of your fresh database into a TXT
    file (called `MyBaseline.txt` here) using the following command:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令，将你新数据库中的所有基础对象导出为TXT文件（这里称为`MyBaseline.txt`）：
- en: '[PRE0]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Details of the ExportToNewSyntax command can be found here: [https://docs.microsoft.com/en-us/dynamics-nav/exporttonewsyntax](https://docs.microsoft.com/en-us/dynamics-nav/exporttonewsyntax).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: ExportToNewSyntax命令的详细信息请参见：[https://docs.microsoft.com/en-us/dynamics-nav/exporttonewsyntax](https://docs.microsoft.com/en-us/dynamics-nav/exporttonewsyntax)。
- en: Import your C/AL solution into a newly created database, compile the objects,
    and export all new and/or modified objects into a TXT file (called, for example,
    `MyCustomObjects.txt`) using the preceding syntax.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的C/AL解决方案导入到新创建的数据库中，编译对象，并使用前面的语法将所有新建和/或修改的对象导出到TXT文件中（例如，命名为`MyCustomObjects.txt`）。
- en: 'Execute the `Set-ObjectPropertiesFromMenuSuite` cmdlet in order to have a conversion
    from the MenuSuite information to your pages and reports in the generated AL files
    (remember: MenuSuite objects are not available in Dynamics 365 Business Central).'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`Set-ObjectPropertiesFromMenuSuite` cmdlet，以便从MenuSuite信息转换为生成的AL文件中的页面和报表（记住：MenuSuite对象在Dynamics
    365 Business Central中不可用）。
- en: 'Execute the `Compare-NAVApplicationObject` cmdlet to compare the base objects
    with the modified objects and to create the `.DELTA` files with the differences
    between them:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`Compare-NAVApplicationObject` cmdlet，以比较基础对象和修改后的对象，并创建包含它们之间差异的`.DELTA`文件：
- en: '[PRE1]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Execute the `Txt2AL.exe` tool using the following syntax:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`Txt2AL.exe`工具，使用以下语法：
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The following table contains a description of all the `Txt2AL.exe` command
    parameters (some of them are optional). Let''s look at how each one functions:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格包含了所有`Txt2AL.exe`命令参数的描述（其中一些是可选的）。我们来看看每个参数是如何工作的：
- en: '| **Parameter name** | **Description** |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| **参数名称** | **描述** |'
- en: '| --- | --- |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `--source=Path` | The path of the folder containing the `.delta` files. This
    is a mandatory parameter. |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `--source=Path` | 包含`.delta`文件的文件夹路径。此参数是必填的。 |'
- en: '| `--target=Path` | The path of the folder that will contain the generated
    `.AL` files. This is a mandatory parameter. |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `--target=Path` | 包含生成的`.AL`文件的文件夹路径。此参数是必填的。 |'
- en: '| `--rename` | If used, output files will be automatically renamed as the `.txt`
    objects. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `--rename` | 如果使用此选项，输出文件将自动重命名为`.txt`对象。 |'
- en: '| `--type=ObjectType` | The type of object to convert. Allowed values include
    Codeunit, Table, Page, Report, Query, and XmlPort. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `--type=ObjectType` | 要转换的对象类型。允许的值包括Codeunit、Table、Page、Report、Query和XmlPort。
    |'
- en: '| `--extensionStartId` | This permits you to define the starting ID of the
    generated extension objects (the default is 70,000,000). It will be incremented
    by 1 for each generated object. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `--extensionStartId` | 这个选项允许你定义生成的扩展对象的起始ID（默认值是70,000,000）。每生成一个对象，该ID会递增1。
    |'
- en: '| `--injectDotNetAddIns` | This adds the definition of standard .NET add-ins
    (a set of add-ins embedded into the platform) in the resulting .NET package. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `--injectDotNetAddIns` | 这个选项会在生成的.NET包中添加标准.NET插件的定义（这些插件是一组嵌入到平台中的插件）。
    |'
- en: '| `--dotNetAddInsPackage=Path` | This specifies the path to an AL file containing
    a definition for a .NET package containing .NET type declarations that should
    be included in the .NET package definition produced by the conversion. |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `--dotNetAddInsPackage=Path` | 这个选项指定包含.NET类型声明的AL文件的路径，这些类型声明应该包含在转换生成的.NET包定义中。
    |'
- en: '| `--dotNetTypePrefix` | This allows you to define a prefix to be used for
    all .NET type aliases that are created during the conversion. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `--dotNetTypePrefix` | 这个选项允许你为转换过程中创建的所有.NET类型别名定义一个前缀。 |'
- en: '| `--translationFormat=ObjectType` | This allows you to specify the translation
    file format. Allowed values include Xliff and Lcg. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `--translationFormat=ObjectType` | 这个选项允许你指定翻译文件的格式。允许的值包括Xliff和Lcg。 |'
- en: '| `--addLegacyTranslationInfo` | This allows you to add information to the
    translation file. During conversion, XLIFF files from all the `CaptionML` properties
    in the app are extracted. If this switch is set, a comment is added in the generated
    XLIFF files that specify what the ID of the translation item would be in C/SIDE.
    This acts as a mapping that allows you to convert existing translation resources
    for your app. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `--addLegacyTranslationInfo` | 这个选项允许你向翻译文件添加信息。在转换过程中，应用程序中所有`CaptionML`属性的XLIFF文件都会被提取。如果设置了此选项，生成的XLIFF文件中将添加一个注释，指定翻译项在C/SIDE中的ID。这充当了一个映射，允许你将现有的翻译资源转换到你的应用程序中。
    |'
- en: Now that we've explained the tool for converting code from C/AL to AL (Txt2AL),
    how can we move our existing C/AL solution to the extension-based architecture
    (AL language) in a semi-automated way?
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经解释了将代码从C/AL转换为AL的工具（Txt2AL），那么我们如何以半自动化的方式将现有的C/AL解决方案迁移到基于扩展的架构（AL语言）中呢？
- en: 'The first step, and good practice, is to move the existing C/AL solution that
    you have in place to the last **Cumulative Update** (**CU**) of the last Dynamics
    365 Business Central version that supports the CSIDE Development Environment and
    C/AL language: Dynamics 365 Business Central Spring 2019 update (platform 14.x).'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部并且良好的做法是，将现有的C/AL解决方案迁移到支持CSIDE开发环境和C/AL语言的最后一个**累积更新**（**CU**）的Dynamics
    365 Business Central版本：Dynamics 365 Business Central 2019年春季更新（平台14.x）。
- en: To showcase the semi-automated process, we will use Docker containers with the *NavContainerHelper*
    PowerShell library, which is available at [https://github.com/microsoft/navcontainerhelper](https://github.com/microsoft/navcontainerhelper).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示半自动化过程，我们将使用带有*NavContainerHelper* PowerShell库的Docker容器，库可在[https://github.com/microsoft/navcontainerhelper](https://github.com/microsoft/navcontainerhelper)获取。
- en: 'Create a new Docker container with the Dynamics NAV version your C/AL solution
    is based on (in this example, we will use Dynamics NAV 2018 CU 16) and import
    the custom or modified TXT objects into this container. The script may look as
    follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的Docker容器，使用你的C/AL解决方案所基于的Dynamics NAV版本（在此示例中，我们将使用Dynamics NAV 2018 CU
    16），并将自定义或修改过的TXT对象导入此容器。脚本可能如下所示：
- en: '[PRE3]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, run the following command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，运行以下命令：
- en: '[PRE4]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will open a local folder (typically `C:\ProgramData\NavContainerHelper\Extensions\nav2018\delta`) that
    contains all the modifications to the base code (called *deltas*). In particular,
    after running the preceding command, you will find two types of file in this folder:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个本地文件夹（通常是`C:\ProgramData\NavContainerHelper\Extensions\nav2018\delta`），该文件夹包含所有对基础代码的修改（称为*deltas*）。特别是，运行上述命令后，你将在这个文件夹中找到两种类型的文件：
- en: '**.TXT** files are your new objects (that you could use as-is).'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.TXT**文件是你的新对象（你可以直接使用它们）。'
- en: '**.DELTA** files are the modified objects.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.DELTA**文件是修改后的对象。'
- en: You should always check the `.DELTA` files because they could contain some custom
    code modifications that aren't supported in AL anymore. An example of a non-supported
    customization could be the code that was previously inserted directly on a standard
    table trigger or written inside standard posting routines. This code must be moved
    and encapsulated inside event subscribers that have been natively raised by the
    Dynamics 365 Business Central platform (as we explained in [Chapter 5](d8553d40-bf59-4aef-983c-89519ef30e29.xhtml), *Developing
    a Customized Solution for Dynamics 365 Business Central*).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该始终检查`.DELTA`文件，因为它们可能包含一些在AL中不再支持的自定义代码修改。一个不支持的自定义示例可能是之前直接插入到标准表触发器中的代码，或者写在标准过账程序中的代码。这些代码必须移动并封装在由Dynamics
    365 Business Central平台本地触发的事件订阅者中（正如我们在[第5章](d8553d40-bf59-4aef-983c-89519ef30e29.xhtml)中解释的，*为Dynamics
    365 Business Central开发定制解决方案*）。
- en: After this (mandatory) code refactoring, we need to create a Dynamics 365 Business
    Central container (here, this is called `d365bc`) and we need to import the object's
    deltas.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行这个（强制性）代码重构之后，我们需要创建一个Dynamics 365 Business Central容器（在这里称为`d365bc`），并且我们需要导入对象的增量。
- en: 'The script is as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本如下：
- en: '[PRE5]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, you have a container with your C/AL solution in it where you can test
    your code and (eventually) refactor it over and over again. The previously created
    NAV container can now be removed from your system by executing the following command:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你有了一个包含C/AL解决方案的容器，在其中你可以测试你的代码，并且（最终）反复重构它。之前创建的NAV容器现在可以通过执行以下命令从系统中移除：
- en: '[PRE6]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, we're ready to work on our new AL-based solution.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备好开始处理我们的基于AL的新解决方案。
- en: 'We now have two possible scenarios when developing (or migrating an existing
    solution) an application for Dynamics 365 Business Central:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在为Dynamics 365 Business Central开发（或迁移现有解决方案）应用程序时，我们现在有两种可能的情况：
- en: C/AL to AL conversion (no modifications on standard base objects are required
    for supporting the SaaS version of the product)
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C/AL到AL的转换（不需要对标准基础对象进行修改，以支持产品的SaaS版本）
- en: C/AL to AL code customizations (base AL objects will be changed; this is only
    available for the on-premise world)
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C/AL到AL的代码自定义（基础AL对象将被更改；这仅适用于本地环境）
- en: In the upcoming sections, we will learn how to perform in these two C/AL to
    AL situations.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将学习如何在这两种C/AL到AL的情况下进行操作。
- en: C/AL to AL conversion
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C/AL到AL转换
- en: 'Here, we need to create a Dynamics 365 Business Central development container
    with our AL solution. This container has no support for C/AL anymore. The script
    to create this container is as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们需要创建一个包含我们AL解决方案的Dynamics 365 Business Central开发容器。这个容器不再支持C/AL。创建这个容器的脚本如下：
- en: '[PRE7]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You now have a working Dynamics 365 Business Central container without the C/AL
    tools that we'll use in the upcoming steps.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经有了一个可用的Dynamics 365 Business Central容器，不再包含我们将在接下来的步骤中使用的C/AL工具。
- en: Now, open Visual Studio Code, create a new AL project (*CTRL* + *Shift* + *P*
    and select **AL:GO!**), give it a name (here, it is called `MyALSolution`), and
    modify the `launch.json` file in your solution in order to connect to this container
    (here, this is called `d365bcdev`).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开Visual Studio Code，创建一个新的AL项目（*CTRL* + *Shift* + *P*，然后选择**AL:GO!**），给它命名（这里命名为`MyALSolution`），并修改你的解决方案中的`launch.json`文件，以便连接到这个容器（这里容器名为`d365bcdev`）。
- en: 'In PowerShell, execute the following command:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在PowerShell中执行以下命令：
- en: '[PRE8]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `NavContainerHelper` module has a function called `Convert-ModifiedObjectsToAl` that
    allows you to export all the modified objects from the selected container (you
    can also apply filters to objects if needed) and then run the `Convert-Txt2Al`
    command on the resulting files. As a result of this command, you will have a folder
    (specified by the `-alProjectFolder` parameter) with many `.al` files that have
    been generated in the conversion from the base C/AL solution.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`NavContainerHelper`模块有一个名为`Convert-ModifiedObjectsToAl`的功能，允许你从选定的容器中导出所有修改过的对象（如果需要，你也可以应用对象过滤器），然后对结果文件运行`Convert-Txt2Al`命令。执行该命令后，你将得到一个文件夹（由`-alProjectFolder`参数指定），其中包含许多在从C/AL基础解决方案转换过程中生成的`.al`文件。'
- en: The output will not always be 100% perfect; you need a bit of refactoring and
    you need to add `ApplicationArea` and `UsageCategory` properties to your objects,
    but the major work has been done. Now, you can compile your AL solution and deploy
    it on your `d365bcdev` container. Due to this, your solution is a 100% AL extension
    on Dynamics 365 Business Central.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果不会始终达到100%的完美；你需要做一些重构，并且需要为你的对象添加`ApplicationArea`和`UsageCategory`属性，但主要工作已经完成。现在，你可以编译你的AL解决方案并将其部署到你的`d365bcdev`容器中。因此，你的解决方案是一个100%的AL扩展，运行在Dynamics
    365 Business Central上。
- en: C/AL to AL code customizations
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C/AL到AL代码自定义
- en: 'When converting C/AL solutions into AL, you may also have cases where you are
    strictly forced to modify the standard AL code (we suggest avoiding this as much
    as possible because, if you modify Microsoft''s base code, your solution cannot
    be moved to the Dynamics 365 Business Central SaaS environment). Let''s get started:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在将C/AL解决方案转换为AL时，你可能还会遇到一些必须严格修改标准AL代码的情况（我们建议尽量避免这样做，因为如果修改了微软的基础代码，你的解决方案将无法迁移到Dynamics
    365 Business Central的SaaS环境中）。让我们开始吧：
- en: 'If this is what''s happening to you, you can create a Dynamics 365 Business
    Central development container (`d365bcdev`) with the `-includeAL` option:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你遇到这种情况，可以通过`-includeAL`选项创建一个Dynamics 365 Business Central开发容器（`d365bcdev`）：
- en: '[PRE9]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: When executing this command, you will find a folder with the baseline of the
    AL objects in a new folder called `Original-<version>-<country>-al` (for example, `C:\ProgramData\NavContainerHelper\Extensions\Original-14.0.29537.0-W1-al`).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 执行该命令时，你将会在一个新的文件夹中找到包含AL对象基线的文件夹，文件夹名称为`Original-<version>-<country>-al`（例如，`C:\ProgramData\NavContainerHelper\Extensions\Original-14.0.29537.0-W1-al`）。
- en: 'Now, you can create a new AL project with all the base AL objects you obtained
    from the previous step. This can be done automatically by executing the following
    script:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以使用从上一步中获取的所有基础AL对象创建一个新的AL项目。你可以通过执行以下脚本自动完成这一步：
- en: '[PRE10]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the previous code, we''re using the following two parameters:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用了以下两个参数：
- en: The `-useBaseline` option is used to copy the `.AL` base files into our AL solution
    project.
  id: totrans-123
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-useBaseline`选项用于将`.AL`基础文件复制到我们的AL解决方案项目中。'
- en: The `-addGit` option creates an offline Git repository of the folder and commits
    all the objects (you need to have Git installed).
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-addGit`选项会在该文件夹创建一个离线Git仓库，并提交所有对象（你需要先安装Git）。'
- en: 'Now, you can open this folder with Visual Studio Code and compile the solution
    without publishing (or using the *Ctrl* + *Shift* + *B* shortcut). This compilation
    process can take a few minutes. You can also compile the solution without opening
    Visual Studio Code by executing the following command:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以使用Visual Studio Code打开这个文件夹，并在不发布的情况下编译解决方案（或者使用*Ctrl* + *Shift* + *B*快捷键）。这个编译过程可能需要几分钟。你也可以通过执行以下命令在不打开Visual
    Studio Code的情况下编译解决方案：
- en: '[PRE11]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You may see some deprecation warnings during compilation. After compilation,
    you need to commit these modifications to your local Git repository.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译过程中，你可能会看到一些弃用警告。编译后，你需要将这些修改提交到本地 Git 仓库。
- en: You now have a full AL app (with all the standard AL objects).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你拥有一个完整的 AL 应用（包含所有标准 AL 对象）。
- en: 'In the next step, you have to replace the C/AL objects in the container database
    with this newly compiled AL app. To do that, execute the following command:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，你需要将容器数据库中的 C/AL 对象替换为这个新编译的 AL 应用。为此，执行以下命令：
- en: '[PRE12]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`Publish-NewApplicationToNavContainer` is a cmdlet that uninstalls all the
    apps from the database, removes all C/AL objects, and uses the development endpoint
    of the container to publish the new `.app` file. We use the `-useCleanDatabase`
    flag to remove C/AL objects and uninstall the existing apps.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`Publish-NewApplicationToNavContainer` 是一个 cmdlet，卸载数据库中的所有应用，移除所有 C/AL 对象，并使用容器的开发端点发布新的
    `.app` 文件。我们使用 `-useCleanDatabase` 标志来移除 C/AL 对象并卸载现有的应用。'
- en: 'Now that you have a Docker container that runs a full AL base app, you need
    to import your AL custom solution (extension). To do this, execute the following
    command:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了运行完整 AL 基础应用的 Docker 容器，你需要导入你的 AL 自定义解决方案（扩展）。为此，执行以下命令：
- en: '[PRE13]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will work on the container where you've previously imported your custom
    C/AL solution (here, this is called `d365bc`). Now, the conversion runs on all
    the objects (the full database, except for the report layout files).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在你之前导入自定义 C/AL 解决方案的容器上运行（这里称为`d365bc`）。现在，转换将作用于所有对象（完整的数据库，报表布局文件除外）。
- en: After this step, you have a full base app that contains your custom objects
    and your modifications inside the standard `.AL` objects. You can now compile
    the objects and deploy them on your Dynamics 365 Business Central container for
    testing. You now have a code-customized AL solution (again, it is highly advisable
    to avoid this if possible).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此步骤后，你将拥有一个完整的基础应用，里面包含你的自定义对象和修改的标准 `.AL` 对象。你现在可以编译这些对象并将它们部署到你的 Dynamics
    365 Business Central 容器中进行测试。你现在拥有一个代码定制的 AL 解决方案（再次建议如果可能的话避免这样做）。
- en: These are the steps that are required if you wish to start a code conversion.
    As a general rule, remember to always take the SaaS environment as your reference
    and target point.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如果你希望开始代码转换所需的步骤。通常，请记住始终以 SaaS 环境作为参考和目标点。
- en: Upgrading from Dynamics 365 Business Central version 14 to version 15
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Dynamics 365 Business Central 版本 14 升级到版本 15
- en: Microsoft's recommended path for migrating your solution to the new refactored
    Dynamics 365 Business Central version 15 is to start from your solution that was
    previously moved to version 14 (moving to version 14 and AL is the first step).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 微软推荐的迁移路径是从已迁移到版本 14 的解决方案开始（迁移到版本 14 和 AL 是第一步），将你的解决方案迁移到新的重构版 Dynamics 365
    Business Central 版本 15。
- en: 'Microsoft''s official migration path is represented in the following diagram:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 微软的官方迁移路径如下图所示：
- en: '![](img/3b8b45c6-8feb-4620-b96b-1a7d03c3b8af.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3b8b45c6-8feb-4620-b96b-1a7d03c3b8af.png)'
- en: More information on this can be found at [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/upgrade/upgrade-overview-v15](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/upgrade/upgrade-overview-v15).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息可以参考 [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/upgrade/upgrade-overview-v15](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/upgrade/upgrade-overview-v15)。
- en: 'To start a technical upgrade from a version 14 database to version 15, you
    can execute the following PowerShell command:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要从版本 14 数据库开始进行技术升级到版本 15，你可以执行以下 PowerShell 命令：
- en: '[PRE14]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The conversion updates the system tables of the database to the new schema (data
    structure) and provides the latest platform features and performance enhancements.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 转换将更新数据库的系统表到新的模式（数据结构），并提供最新的平台功能和性能提升。
- en: 'For migrating to version 15, detailed steps are described in the following
    official Microsoft pages:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 对于迁移到版本 15，详细步骤可以参考以下官方 Microsoft 页面：
- en: 'Upgrading an unmodified application to Dynamics 365 Business Central 2019 Release
    Wave 2: [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/upgrade/upgrade-unmodified-application](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/upgrade/upgrade-unmodified-application).'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '将未修改的应用程序升级到 Dynamics 365 Business Central 2019 Release Wave 2: [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/upgrade/upgrade-unmodified-application](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/upgrade/upgrade-unmodified-application)。'
- en: 'Technical Upgrade to Dynamics 365 Business Central 2019 Wave 2: [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/upgrade/upgrade-technical-upgrade-v14-v15](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/upgrade/upgrade-technical-upgrade-v14-v15).'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 升级到 Dynamics 365 Business Central 2019 Wave 2 的技术升级：[https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/upgrade/upgrade-technical-upgrade-v14-v15](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/upgrade/upgrade-technical-upgrade-v14-v15)。
- en: 'In the next section, we''ll look at another important aspect to take into consideration
    when architecting solutions for the new Dynamics 365 Business Central platform:
    how to handle customer requests for customizations.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨在为新的 Dynamics 365 Business Central 平台架构解决方案时需要考虑的另一个重要方面：如何处理客户定制需求。
- en: Handling customer-specific personalization's
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理客户特定的个性化需求
- en: 'You''ve worked hard so far, and now your solution has finished moving from
    the old C/AL to the new extension''s architecture. Now, a common business scenario
    occurs when you sell your solution to a customer: they want some specific customizations
    of your solution to satisfy their particular business needs. Here, we immediately
    have a problem: how can you handle customizations for your customers?'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经付出了很大的努力，现在你的解决方案已经完成了从旧的 C/AL 到新扩展架构的迁移。现在，通常的商业场景是你将解决方案卖给客户：他们希望对你的解决方案做一些特定的定制，以满足他们的特定业务需求。在这里，我们立刻遇到一个问题：你如何处理客户的定制需求？
- en: 'The extension model has some rules, and you need to absolutely avoid the situation
    represented in the following diagram:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展模型有一些规则，你需要绝对避免以下图示所代表的情况：
- en: '![](img/6bdb7c85-5a7f-4c9c-8d01-a6d89d1c9dc8.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6bdb7c85-5a7f-4c9c-8d01-a6d89d1c9dc8.png)'
- en: In the preceding diagram, we can see that EXT BASE is the standard solution
    and its base code is modified for every customer that acquires the solution.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图示中，我们可以看到 EXT BASE 是标准解决方案，它的基础代码为每个购买该解决方案的客户所修改。
- en: You don't need to directly customize your extension code for every customer
    you have. Forking your solution's base code is absolutely a bad practice (it hurts
    the extension's principles; that is, the base code must never be changed).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要为每个客户直接定制你的扩展代码。分叉（Forking）你的解决方案基础代码绝对是一个坏习惯（它违反了扩展的原则；也就是说，基础代码永远不应被修改）。
- en: 'What you need to do is represented in the following diagram:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要做的事情如以下图所示：
- en: '![](img/b801ecb5-cf9f-4539-ac80-d1af396bfff7.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b801ecb5-cf9f-4539-ac80-d1af396bfff7.png)'
- en: 'Here, your extension''s base code (called EXT BASE, in the preceding diagram)
    is the same for every customer. To handle customizations for each customer, you
    create a new extension for each customer (CUSTOM EXT, in the preceding diagram)
    that will be *dependent* on your base extension (it will be a new layer above
    the standard layer). This is a best practice and what the extension model wants:
    you don''t modify base code, you *extend* base code. So, aside from these, what
    are the other solutions for extensions that we need to remember? Let''s check
    them out.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你的扩展基础代码（在前面的图示中称为 EXT BASE）对于每个客户都是相同的。为了处理每个客户的定制需求，你需要为每个客户创建一个新的扩展（在前面的图示中称为
    CUSTOM EXT），该扩展将会*依赖*于你的基础扩展（它将是标准层之上的新一层）。这是最佳实践，也是扩展模型的要求：你不修改基础代码，而是*扩展*基础代码。那么，除了这些，我们还需要记住其他哪些扩展方案呢？让我们一起来看看。
- en: Other things to remember
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他需要记住的事项
- en: When moving a solution to extensions, there are other things to remember and
    aspects that you need to handle or rethink. In the upcoming sections, you will
    find a summary of some of the most common ones.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在将解决方案迁移到扩展时，还有其他需要记住的事项，以及你需要处理或重新考虑的方面。在接下来的章节中，你将看到一些最常见事项的总结。
- en: Handling the MenuSuite
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理 MenuSuite
- en: With Dynamics NAV, pages and reports can be searched in the web client by adding
    them to a M*enuSuite* object (a standard object that defines the functional menu
    of the application). With Dynamics 365 Business Central, the `MenuSuite` object
    is not supported, and pages and reports can be searchable and visible by setting
    the `UsageCategory` and `ApplicationArea` properties.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Dynamics NAV 中，通过将页面和报告添加到 *MenuSuite* 对象（一个定义应用程序功能菜单的标准对象）中，Web 客户端可以对其进行搜索。而在
    Dynamics 365 Business Central 中，`MenuSuite` 对象不再受支持，页面和报告可以通过设置 `UsageCategory`
    和 `ApplicationArea` 属性来进行搜索和显示。
- en: If you convert objects from C/AL, you need to set these properties on the converted
    objects. You can automate the process of setting these properties on your objects
    by using a PowerShell module called `TransitionMenuSuiteObjectsForSearch.psm1`,
    which you can find on the Dynamics 365 Business Central DVD image.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从C/AL转换对象，则需要在转换的对象上设置这些属性。您可以使用名为`TransitionMenuSuiteObjectsForSearch.psm1`的PowerShell模块自动设置对象上的这些属性，该模块可以在Dynamics
    365 Business Central DVD映像中找到。
- en: 'You can import this module on PowerShell as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在PowerShell中导入此模块，如下所示：
- en: '[PRE15]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, execute the following command:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，执行以下命令：
- en: '[PRE16]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now, `UsageCategory` and `ApplicationArea` are set on all your converted objects.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在所有转换的对象上设置了`UsageCategory`和`ApplicationArea`。
- en: .NET variables and add-ins
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .NET变量和插件
- en: If your existing code uses .NET variables, these objects are not supported in
    a SaaS environment. If you want to use .NET on SaaS, you need to wrap your DLLs
    (or your .NET code) into an Azure function and call that function from your AL
    code. [Chapter 6](512b0690-f392-4f82-b006-cacdeec1bacc.xhtml), *Advanced AL Development*,
    and [Chapter 13](45e3cb96-0df4-43be-89d0-697822f4b159.xhtml), *Serverless Business
    Processes with Business Central and Azure*, show you how to handle these situations.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的现有代码使用.NET变量，则这些对象不支持在SaaS环境中使用。如果要在SaaS上使用.NET，您需要将DLL（或您的.NET代码）包装到Azure函数中，并从AL代码中调用该函数。[第6章](512b0690-f392-4f82-b006-cacdeec1bacc.xhtml)中描述的*高级AL开发*和[第13章](45e3cb96-0df4-43be-89d0-697822f4b159.xhtml)中描述的*Serverless
    Business Processes with Business Central and Azure*展示了如何处理这些情况。
- en: If your extension targets the on-premise world (`Target = Internal` in the `app.json`
    file), then you can use .NET assemblies in your AL code (but this code can never
    be moved into a SaaS environment). More information on how to use .NET variables
    in AL for the on-premise world can be found at [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/devenv-get-started-call-dotnet-from-al](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/devenv-get-started-call-dotnet-from-al) and [https://demiliani.com/2019/06/04/dynamics-365-business-central-using-dotnet-assemblies-on-a-docker-container-sandbox/](https://demiliani.com/2019/06/04/dynamics-365-business-central-using-dotnet-assemblies-on-a-docker-container-sandbox/).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的扩展目标是在本地环境中（在`app.json`文件中`Target = Internal`），那么你可以在AL代码中使用.NET程序集（但这些代码永远不能移到SaaS环境中）。关于如何在本地环境中使用.NET变量的更多信息，请参见[https://docs.microsoft.com/zh-cn/dynamics365/business-central/dev-itpro/developer/devenv-get-started-call-dotnet-from-al](https://docs.microsoft.com/zh-cn/dynamics365/business-central/dev-itpro/developer/devenv-get-started-call-dotnet-from-al)和[https://demiliani.com/2019/06/04/dynamics-365-business-central-using-dotnet-assemblies-on-a-docker-container-sandbox/](https://demiliani.com/2019/06/04/dynamics-365-business-central-using-dotnet-assemblies-on-a-docker-container-sandbox/)。
- en: 'Another possible problem occurs if you have a solution that uses .NET visual
    add-ins, such as the following Sales Order page:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的解决方案使用.NET可视化插件，可能会遇到另一个问题，比如以下的销售订单页面：
- en: '![](img/215a0c59-d19a-47fc-9fda-d4dd4c9a4dc2.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/215a0c59-d19a-47fc-9fda-d4dd4c9a4dc2.png)'
- en: 'The following is a custom Sales Order page we have implemented that uses a
    .NET **Windows Presentation Foundation** (**WPF**) add-in that''s been declared
    in C/AL as follows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们实施的自定义销售订单页面，它使用了在C/AL中声明的.NET **Windows Presentation Foundation**（**WPF**）插件：
- en: '![](img/6212ecff-1f2c-43ab-9e5f-c1c22a769daa.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6212ecff-1f2c-43ab-9e5f-c1c22a769daa.png)'
- en: To move this solution to Dynamics 365 Business Central, you need to remake the
    visual add-in as a JavaScript add-in, as described in [Chapter 6](512b0690-f392-4f82-b006-cacdeec1bacc.xhtml), *Advanced
    AL Development*.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 要将此解决方案移植到Dynamics 365 Business Central，您需要将可视化插件重做为JavaScript插件，如[第6章](512b0690-f392-4f82-b006-cacdeec1bacc.xhtml)中描述的*高级AL开发*。
- en: File management
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件管理
- en: With Dynamics 365 Business Central, files are only supported on-premises. If
    you're targeting the SaaS environment, you should handle files in a different
    way by using *Streams* (as described in [Chapter 6](512b0690-f392-4f82-b006-cacdeec1bacc.xhtml), *Advanced
    AL Development*, in the *Handling files* section) or by using *Azure Functions*
    for file storage (a complete solution is described in [Chapter 13](45e3cb96-0df4-43be-89d0-697822f4b159.xhtml),
    *Serverless Business Processes with Business Central and Azure*).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在Dynamics 365 Business Central中，仅支持本地环境中的文件处理。如果您的目标是SaaS环境，您应该通过使用*流*（如[第6章](512b0690-f392-4f82-b006-cacdeec1bacc.xhtml)中描述的*高级AL开发*的*处理文件*部分）或通过使用*Azure
    Functions*进行文件存储（在[第13章](45e3cb96-0df4-43be-89d0-697822f4b159.xhtml)中描述的*Serverless
    Business Processes with Business Central and Azure*中提供了一个完整的解决方案）来处理文件。
- en: Printing
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打印
- en: Direct printing (sending a document to a printer on the local network directly)
    is not available in the SaaS environment. A possible solution to this problem
    is described here: [https://demiliani.com/2019/01/29/dynamics-365-business-central-and-direct-printing/](https://demiliani.com/2019/01/29/dynamics-365-business-central-and-direct-printing/).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SaaS 环境中，无法进行直接打印（将文档直接发送到本地网络上的打印机）。一个可能的解决方案在这里描述：[https://demiliani.com/2019/01/29/dynamics-365-business-central-and-direct-printing/](https://demiliani.com/2019/01/29/dynamics-365-business-central-and-direct-printing/)。
- en: Microsoft is also working on supporting direct printing in the near future in
    the SaaS environment. The wave 2 release will have a new reporting event called
    `OnDocumentReady`, which exposes a data stream and the context of a document.
    A document can then be picked up by an extension that can handle printing.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 微软也在努力支持在不久的将来在 SaaS 环境中进行直接打印。wave 2 发布将包含一个名为 `OnDocumentReady` 的新报告事件，该事件暴露了文档的数据流和上下文。文档随后可以由能够处理打印的扩展程序拾取。
- en: In the next section, we'll learn how the Dynamics 365 Business Central wave
    2 release architecture could affect your extension's development in the near future.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习 Dynamics 365 Business Central wave 2 发布架构如何在不久的将来影响你扩展的开发。
- en: Dynamics 365 Business Central wave 2 release changes
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dynamics 365 Business Central wave 2 发布变更
- en: 'Dynamics 365 Business Central Wave 2 release (platform 15) is AL- and web-client-only.
    You will not find support for C/AL and CSIDE anymore. Instead, if you go to the *Extensions
    Management* page in Dynamics 365 Business Central platform 15, you will find the
    following two Microsoft extensions:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Dynamics 365 Business Central Wave 2 发布（平台 15）仅支持 AL 和 Web 客户端。你将不再找到对 C/AL
    和 CSIDE 的支持。相反，如果你访问 Dynamics 365 Business Central 平台 15 中的 *扩展管理* 页面，你将看到以下两个微软扩展：
- en: '**Base Application** (version 15.0.<build>.0): This extension contains all
    the business logic that was moved to AL.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础应用程序**（版本 15.0.<build>.0）：此扩展包含所有已迁移到 AL 的业务逻辑。'
- en: '**System Application** (version 15.0.<build>.0): This extension handles the
    system layer.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统应用程序**（版本 15.0.<build>.0）：此扩展处理系统层。'
- en: 'In addition to simplifying the entire codebase, the main benefits of this new
    structure are that you can move away from code customizations and start making
    vertical or horizontal solutions based on the Dynamics 365 Business Central platform. You
    can set up a staging environment and practice with the breaking changes that will
    be introduced officially in the new version by following these two official articles:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 除了简化整个代码库外，这种新结构的主要好处是，你可以摆脱代码定制，开始基于 Dynamics 365 Business Central 平台进行垂直或水平解决方案的开发。你可以设置一个预备环境，并通过以下两个官方文章来练习新版本中将正式引入的破坏性变更：
- en: '[https://freddysblog.com/2019/07/31/preview-of-dynamics-365-business-central-2019-release-wave-2/](https://freddysblog.com/2019/07/31/preview-of-dynamics-365-business-central-2019-release-wave-2/)'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://freddysblog.com/2019/07/31/preview-of-dynamics-365-business-central-2019-release-wave-2/](https://freddysblog.com/2019/07/31/preview-of-dynamics-365-business-central-2019-release-wave-2/)'
- en: '[https://freddysblog.com/2019/08/02/organizing-your-al-files/](https://freddysblog.com/2019/08/02/organizing-your-al-files/)'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://freddysblog.com/2019/08/02/organizing-your-al-files/](https://freddysblog.com/2019/08/02/organizing-your-al-files/)'
- en: 'All the new extensions that you will create for Dynamics 365 Business Central
    must be dependent on these Microsoft apps. In Visual Studio Code, when you start
    a new extension project, you need to add the following dependencies to your extension''s `app.json` file:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 所有你为 Dynamics 365 Business Central 创建的新扩展必须依赖这些微软应用。在 Visual Studio Code 中，当你启动一个新的扩展项目时，你需要将以下依赖项添加到扩展的
    `app.json` 文件中：
- en: '![](img/cd5c9587-9274-4420-ad9b-b567ee02e403.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cd5c9587-9274-4420-ad9b-b567ee02e403.png)'
- en: Those dependencies will be automatically added if you select **4.0** as the
    target platform in Visual Studio Code.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 Visual Studio Code 中选择 **4.0** 作为目标平台，这些依赖项将自动添加。
- en: 'After that, you can download symbols from your environment and start coding:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，你可以从你的环境中下载符号并开始编码：
- en: '![](img/b4784bfd-5470-48ae-93c3-74d86a979dc5.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b4784bfd-5470-48ae-93c3-74d86a979dc5.png)'
- en: This is the recommended way to develop extensions for the SaaS and the on-premise
    world.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为 SaaS 和本地环境开发扩展的推荐方式。
- en: In the Dynamics 365 Business Central wave 2 release, Microsoft permits you to
    also modify the base code (now, it's full AL converted) and the links at the beginning
    of this section explain how to extract the .al files to a local folder and start
    working on those files to create your new custom *BaseApp.*
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在Dynamics 365 Business Central的第二波发布中，微软允许你修改基础代码（现在，所有代码已完全转换为AL），本节开头的链接解释了如何将.al文件提取到本地文件夹，并开始在这些文件上工作，以创建你自己的自定义*BaseApp*。
- en: 'As an example, here, I''m directly modifying the standard *Sales-Post* codeunit
    by adding a custom function:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个例子，这里我直接通过添加一个自定义函数来修改标准的*Sales-Post*代码单元：
- en: '![](img/d0272c1a-d4c7-4e33-8c51-fa27c6c47e7d.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d0272c1a-d4c7-4e33-8c51-fa27c6c47e7d.png)'
- en: More information on how to modify the *Base Application* can be found here: [https://demiliani.com/2019/09/24/dynamics-365-business-central-wave-2-customizing-the-base-application/](https://demiliani.com/2019/09/24/dynamics-365-business-central-wave-2-customizing-the-base-application/).
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于如何修改*Base Application*的信息可以在这里找到：[https://demiliani.com/2019/09/24/dynamics-365-business-central-wave-2-customizing-the-base-application/](https://demiliani.com/2019/09/24/dynamics-365-business-central-wave-2-customizing-the-base-application/)。
- en: As we mentioned previously, in many sources by community experts, *just because
    you can, it doesn't mean you should*. Modifying base code is actually permitted
    to help partners move solutions to AL and the new platform as soon as possible,
    but, in the long term, on-premise will follow cloud rules, so Microsoft's base
    code modifications may become more restricted in the future.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，许多社区专家的来源中提到，*仅仅因为你可以，并不意味着你应该*。修改基础代码实际上是被允许的，以帮助合作伙伴尽快将解决方案迁移到AL和新平台，但从长远来看，本地部署将遵循云规则，因此，微软的基础代码修改在未来可能会变得更加严格。
- en: 'With the new platform, you can also build extensions on top of the *System
    Application* itself. Just remove the dependency from the *BaseApp,* download some
    symbols, andyou''re ready to go. As shown in the following screenshot, now, you
    have only downloaded two app packages (no BaseApp):'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在新平台上，你还可以在*System Application*本身之上构建扩展。只需移除*BaseApp*的依赖，下载一些符号，就可以开始了。如下面的截图所示，现在，你只下载了两个应用包（没有BaseApp）：
- en: '![](img/2b366d94-43f0-4e54-b17b-9f17826d977f.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2b366d94-43f0-4e54-b17b-9f17826d977f.png)'
- en: Now, you can start coding an extension that depends only on the *System Application*.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以开始编写仅依赖于*System Application*的扩展。
- en: The *System Application* is actually a work in progress and could change in
    the future (new modules will be added). The latest version is always available
    on GitHub at [https://github.com/Microsoft/alappextensions](https://github.com/Microsoft/alappextensions).
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '*System Application*实际上是一个正在进行的工作，未来可能会有所变化（将添加新的模块）。最新版本始终可以在GitHub上找到：[https://github.com/Microsoft/alappextensions](https://github.com/Microsoft/alappextensions)。'
- en: As you've seen in this section, from the Dynamics 365 Business Central 15.x
    platform, all the base code has been moved to AL and you need to create extensions
    with AL and Visual Studio Code, starting with the Microsoft Base and System apps.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在本节中看到的，从Dynamics 365 Business Central 15.x平台开始，所有的基础代码都已经迁移到AL，你需要使用AL和Visual
    Studio Code来创建扩展，从Microsoft的基础和系统应用开始。
- en: Summary
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at the best practices of moving an existing monolithic C/AL
    solution to the new extension architecture and to the AL language. We also saw
    the best practices of architecting your solution, such as how to convert existing
    C/AL code into AL in a semi-automatic way, and how to handle common problems during
    the migration phase of your existing solution.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了将现有的单体C/AL解决方案迁移到新的扩展架构和AL语言的最佳实践。我们还看到了架构你的解决方案的最佳实践，比如如何以半自动化的方式将现有的C/AL代码转换为AL，以及在迁移现有解决方案的过程中如何处理常见问题。
- en: Toward the end of this chapter, you learned how to migrate to the new Dynamics
    365 Business Central platform and the best practices to adopt when starting a
    project for a new solution. Now, you have a clear vision of the tools to use to
    migrate existing code to AL and the steps that are required to start this migration
    activity.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的末尾，你学习了如何迁移到新的Dynamics 365 Business Central平台，以及在开始新解决方案的项目时应采用的最佳实践。现在，你已经清楚地了解了迁移现有代码到AL的工具，并知道了开始这一迁移活动所需的步骤。
- en: In the next chapter, we'll learn how third-party tools can help us work with
    AL and extensions, and also help us move our existing solutions to the new Dynamics
    365 Business Central architecture.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们将学习第三方工具如何帮助我们使用AL和扩展，也将帮助我们将现有解决方案迁移到新的Dynamics 365 Business Central架构。
