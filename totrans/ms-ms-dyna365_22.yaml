- en: Moving Existing ISV Solutions to the New Extension Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll focus on existing ISV solutions for Dynamics NAV (mainly
    based on the C/AL language). We'll also look at tips, tricks, and best practices
    to adopt when moving these solutions to Dynamics 365 Business Central and to the
    new extension programming paradigm.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics we will cover in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Architectural best practices for moving a C/AL solution to an extension-based
    one
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting existing C/AL code into AL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Things to check and remember during a solution redesign for SaaS environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have a better understanding of what steps
    are required to move an existing C/AL solution to AL, the architectural choices
    when converting a monolithic C/AL solution into extensions (this will affect your
    final application and how you will sell it), and the tools that can help you in
    this migration process (code conversion tools).
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the transition from C/AL to AL and extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Without a doubt, Dynamics NAV was one of the ERPs in the international market
    that had the most active community of partners and users. If you are a customer
    that would like to implement Dynamics NAV, it is really quite easy to find a custom
    solution that fits and is tailored to your business needs. To do this, just search
    through one of several add-ons that have been developed by partners or **Independent
    Software Vendors** (**ISVs**) over the years.
  prefs: []
  type: TYPE_NORMAL
- en: 'All these solutions are written using the C/AL language. Normally, they contain
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: New objects (objects that are created to satisfy a customer's business case)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modified standard objects (objects from the standard application base code that
    have been modified to satisfy a customer's need)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These solutions are always a monolithic solution (everything is packaged into
    a single codebase inside the database, where an object can reference all the other
    objects in the solution).
  prefs: []
  type: TYPE_NORMAL
- en: With Dynamics 365 Business Central, CSIDE Development Environment and the C/AL
    language are available only until version 14.x and only for the on-premise world.
    From version 15 (wave 2), Microsoft has removed those developer tools, and so
    existing solutions must now be moved to AL and converted into the new extension
    model.
  prefs: []
  type: TYPE_NORMAL
- en: Moving an existing C/AL-based solution to AL extensions is not always just an
    easy *code conversion* process; normally, it requires a redesign and a rethink
    of the entire application (this is always the approach that's suggested by Microsoft).
  prefs: []
  type: TYPE_NORMAL
- en: 'When planning to move an existing C/AL solution to AL extensions, on the technical
    side, there are three main aspects to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: How many extensions should I write to best split the C/AL solution?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can I reuse my existing C/AL code?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is allowed and not allowed when it comes to targeting a SaaS-based solution?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the upcoming sections, we will learn how these aspects affect the transition
    from an existing solution to the new programming model and to the new platform.
  prefs: []
  type: TYPE_NORMAL
- en: Planning the number of extensions to code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned in [Chapter 5](d8553d40-bf59-4aef-983c-89519ef30e29.xhtml), *Developing
    a Customized Solution for Dynamics 365 Business Central*, extension A cannot reference
    objects and methods exposed by extension B. This is only possible if extension
    A explicitly declares a dependency on extension B.
  prefs: []
  type: TYPE_NORMAL
- en: 'When moving an existing solution to extensions, you have two main choices:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a single monolithic extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create N dependent extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's explore these concepts in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'A single monolithic extension is an easier choice since developers don''t have
    to think about independent modules. Instead, they just create all the objects
    and business logic in a single giant AL extension project. In the end, there will
    be a single `.app` file that does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Adds new objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extends standard objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds new business logic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raises events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subscribes to events raised by the standard business logic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram shows this solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5c79b993-a83c-4495-aa8c-a33975d17a42.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Developers don''t have to think about dependencies in this context (all the
    code is in a single object). However, the disadvantage of this solution is that
    even a small update of the extension (such as adding a little code change) requires
    unpublishing and publishing the entire application. This simply means that we
    update an extension in Dynamics 365 Business Central: unpublish the old version
    and publish the new version.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Secondly, this is not a solution that can be split into and sold as modules.
    However, splitting your solution into N separate extensions is a good choice if
    you want to have a modular solution. When moving an existing C/AL solution to
    N separate extensions, you typically have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Independent or standalone extensions (modules that do not require dependencies
    from other modules)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependent extensions (modules that require dependencies from other modules)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A diagram of this solution is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8e552814-a180-45d0-ac5b-ef10fcb65078.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, extension A is an independent extension (it can only reference objects
    from the base module). Extension C depends on extension A, while extension B depends
    on A and C.
  prefs: []
  type: TYPE_NORMAL
- en: 'Dependencies have some advantages, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: They help us structure more complex deployment scenarios
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They improve code and business logic reusability (avoiding redundancy)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They increase maintenance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They enhance deployment flexibility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The drawbacks of dependencies are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: When you publish the extensions, you must publish the extension that doesn't
    have any dependencies (the so-called master or parent extension) first. For example,
    if you try and publish an extension with dependencies first (a child), it will
    throw an error stating that object references do not exist in the database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you remove extensions, you must remove the dependent extensions first (such
    as a child) and subsequently the parent extension.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, we may be wondering which is the better option here.
  prefs: []
  type: TYPE_NORMAL
- en: This is the question that every Microsoft partner is currently asking themselves.
    There are no rules written in stone about this topic, and what you want to achieve
    in terms of object modularity, as well as your marketing strategy, depends a lot
    on your own existing solution.
  prefs: []
  type: TYPE_NORMAL
- en: A best practice and suggestion is to not skip or avoid dependencies. Moving
    an existing C/AL solution to N different dependent extensions is a good choice
    as it guarantees modularity and flexibility, but it is also recommended to not
    create too many micro-extensions. Developers should think about macro functionalities
    and try to isolate them into featured modules that can be installed when needed
    by customers.
  prefs: []
  type: TYPE_NORMAL
- en: An important thing to remember within this context is to always add events in
    order to let others hook your existing codebase.
  prefs: []
  type: TYPE_NORMAL
- en: Only by raising events (*integration* or *business* events) can you have a solution
    that can interact with other extensions that have been installed in the system
    and that can also be extended by third parties (other Microsoft partners).
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll learn how to speed up the conversion process (where
    possible!) of your existing C/AL-based solutions to AL.
  prefs: []
  type: TYPE_NORMAL
- en: Converting existing solutions into AL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many Microsoft partners that actually work with Dynamics NAV have developed
    a lot of custom solutions over the years (add-ons, customer solutions, and so
    on). In order to be ready for the new Dynamics 365 Business Central platform,
    these must be migrated to AL code.
  prefs: []
  type: TYPE_NORMAL
- en: If you have an existing codebase or an existing solution in place, the first
    thing you can do when it comes to moving this solution to the extensions world
    is to try to convert your C/AL objects into AL.
  prefs: []
  type: TYPE_NORMAL
- en: Please keep in mind that conversion is not always the best thing to do, but
    just a starting point (you can convert all new objects as-is, but you should pay
    attention and refactor the modified standard objects that your existing solution
    will certainly have).
  prefs: []
  type: TYPE_NORMAL
- en: So, how can you convert your C/AL solution into AL?
  prefs: []
  type: TYPE_NORMAL
- en: 'As we mentioned in [Chapter 7](81958c15-06a3-4a59-ae0c-0afa9413d6f9.xhtml), *Report
    Development with AL*, Dynamics 365 Business Central on-premise and Docker images
    come shipped with a tool that can easily help with converting C/AL objects into
    AL objects: `Txt2AL.exe`.'
  prefs: []
  type: TYPE_NORMAL
- en: With this tool, you can specify a series of C/AL objects of any kind, export
    them in TXT format, and automatically convert them into AL format.
  prefs: []
  type: TYPE_NORMAL
- en: 'To proficiently use this tool, you should perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make an export of all the baseline object of your fresh database into a TXT
    file (called `MyBaseline.txt` here) using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Details of the ExportToNewSyntax command can be found here: [https://docs.microsoft.com/en-us/dynamics-nav/exporttonewsyntax](https://docs.microsoft.com/en-us/dynamics-nav/exporttonewsyntax).
  prefs: []
  type: TYPE_NORMAL
- en: Import your C/AL solution into a newly created database, compile the objects,
    and export all new and/or modified objects into a TXT file (called, for example,
    `MyCustomObjects.txt`) using the preceding syntax.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the `Set-ObjectPropertiesFromMenuSuite` cmdlet in order to have a conversion
    from the MenuSuite information to your pages and reports in the generated AL files
    (remember: MenuSuite objects are not available in Dynamics 365 Business Central).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the `Compare-NAVApplicationObject` cmdlet to compare the base objects
    with the modified objects and to create the `.DELTA` files with the differences
    between them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the `Txt2AL.exe` tool using the following syntax:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following table contains a description of all the `Txt2AL.exe` command
    parameters (some of them are optional). Let''s look at how each one functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Parameter name** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `--source=Path` | The path of the folder containing the `.delta` files. This
    is a mandatory parameter. |'
  prefs: []
  type: TYPE_TB
- en: '| `--target=Path` | The path of the folder that will contain the generated
    `.AL` files. This is a mandatory parameter. |'
  prefs: []
  type: TYPE_TB
- en: '| `--rename` | If used, output files will be automatically renamed as the `.txt`
    objects. |'
  prefs: []
  type: TYPE_TB
- en: '| `--type=ObjectType` | The type of object to convert. Allowed values include
    Codeunit, Table, Page, Report, Query, and XmlPort. |'
  prefs: []
  type: TYPE_TB
- en: '| `--extensionStartId` | This permits you to define the starting ID of the
    generated extension objects (the default is 70,000,000). It will be incremented
    by 1 for each generated object. |'
  prefs: []
  type: TYPE_TB
- en: '| `--injectDotNetAddIns` | This adds the definition of standard .NET add-ins
    (a set of add-ins embedded into the platform) in the resulting .NET package. |'
  prefs: []
  type: TYPE_TB
- en: '| `--dotNetAddInsPackage=Path` | This specifies the path to an AL file containing
    a definition for a .NET package containing .NET type declarations that should
    be included in the .NET package definition produced by the conversion. |'
  prefs: []
  type: TYPE_TB
- en: '| `--dotNetTypePrefix` | This allows you to define a prefix to be used for
    all .NET type aliases that are created during the conversion. |'
  prefs: []
  type: TYPE_TB
- en: '| `--translationFormat=ObjectType` | This allows you to specify the translation
    file format. Allowed values include Xliff and Lcg. |'
  prefs: []
  type: TYPE_TB
- en: '| `--addLegacyTranslationInfo` | This allows you to add information to the
    translation file. During conversion, XLIFF files from all the `CaptionML` properties
    in the app are extracted. If this switch is set, a comment is added in the generated
    XLIFF files that specify what the ID of the translation item would be in C/SIDE.
    This acts as a mapping that allows you to convert existing translation resources
    for your app. |'
  prefs: []
  type: TYPE_TB
- en: Now that we've explained the tool for converting code from C/AL to AL (Txt2AL),
    how can we move our existing C/AL solution to the extension-based architecture
    (AL language) in a semi-automated way?
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step, and good practice, is to move the existing C/AL solution that
    you have in place to the last **Cumulative Update** (**CU**) of the last Dynamics
    365 Business Central version that supports the CSIDE Development Environment and
    C/AL language: Dynamics 365 Business Central Spring 2019 update (platform 14.x).'
  prefs: []
  type: TYPE_NORMAL
- en: To showcase the semi-automated process, we will use Docker containers with the *NavContainerHelper*
    PowerShell library, which is available at [https://github.com/microsoft/navcontainerhelper](https://github.com/microsoft/navcontainerhelper).
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new Docker container with the Dynamics NAV version your C/AL solution
    is based on (in this example, we will use Dynamics NAV 2018 CU 16) and import
    the custom or modified TXT objects into this container. The script may look as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This will open a local folder (typically `C:\ProgramData\NavContainerHelper\Extensions\nav2018\delta`) that
    contains all the modifications to the base code (called *deltas*). In particular,
    after running the preceding command, you will find two types of file in this folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '**.TXT** files are your new objects (that you could use as-is).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.DELTA** files are the modified objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should always check the `.DELTA` files because they could contain some custom
    code modifications that aren't supported in AL anymore. An example of a non-supported
    customization could be the code that was previously inserted directly on a standard
    table trigger or written inside standard posting routines. This code must be moved
    and encapsulated inside event subscribers that have been natively raised by the
    Dynamics 365 Business Central platform (as we explained in [Chapter 5](d8553d40-bf59-4aef-983c-89519ef30e29.xhtml), *Developing
    a Customized Solution for Dynamics 365 Business Central*).
  prefs: []
  type: TYPE_NORMAL
- en: After this (mandatory) code refactoring, we need to create a Dynamics 365 Business
    Central container (here, this is called `d365bc`) and we need to import the object's
    deltas.
  prefs: []
  type: TYPE_NORMAL
- en: 'The script is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you have a container with your C/AL solution in it where you can test
    your code and (eventually) refactor it over and over again. The previously created
    NAV container can now be removed from your system by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now, we're ready to work on our new AL-based solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have two possible scenarios when developing (or migrating an existing
    solution) an application for Dynamics 365 Business Central:'
  prefs: []
  type: TYPE_NORMAL
- en: C/AL to AL conversion (no modifications on standard base objects are required
    for supporting the SaaS version of the product)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C/AL to AL code customizations (base AL objects will be changed; this is only
    available for the on-premise world)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the upcoming sections, we will learn how to perform in these two C/AL to
    AL situations.
  prefs: []
  type: TYPE_NORMAL
- en: C/AL to AL conversion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, we need to create a Dynamics 365 Business Central development container
    with our AL solution. This container has no support for C/AL anymore. The script
    to create this container is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You now have a working Dynamics 365 Business Central container without the C/AL
    tools that we'll use in the upcoming steps.
  prefs: []
  type: TYPE_NORMAL
- en: Now, open Visual Studio Code, create a new AL project (*CTRL* + *Shift* + *P*
    and select **AL:GO!**), give it a name (here, it is called `MyALSolution`), and
    modify the `launch.json` file in your solution in order to connect to this container
    (here, this is called `d365bcdev`).
  prefs: []
  type: TYPE_NORMAL
- en: 'In PowerShell, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `NavContainerHelper` module has a function called `Convert-ModifiedObjectsToAl` that
    allows you to export all the modified objects from the selected container (you
    can also apply filters to objects if needed) and then run the `Convert-Txt2Al`
    command on the resulting files. As a result of this command, you will have a folder
    (specified by the `-alProjectFolder` parameter) with many `.al` files that have
    been generated in the conversion from the base C/AL solution.
  prefs: []
  type: TYPE_NORMAL
- en: The output will not always be 100% perfect; you need a bit of refactoring and
    you need to add `ApplicationArea` and `UsageCategory` properties to your objects,
    but the major work has been done. Now, you can compile your AL solution and deploy
    it on your `d365bcdev` container. Due to this, your solution is a 100% AL extension
    on Dynamics 365 Business Central.
  prefs: []
  type: TYPE_NORMAL
- en: C/AL to AL code customizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When converting C/AL solutions into AL, you may also have cases where you are
    strictly forced to modify the standard AL code (we suggest avoiding this as much
    as possible because, if you modify Microsoft''s base code, your solution cannot
    be moved to the Dynamics 365 Business Central SaaS environment). Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If this is what''s happening to you, you can create a Dynamics 365 Business
    Central development container (`d365bcdev`) with the `-includeAL` option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: When executing this command, you will find a folder with the baseline of the
    AL objects in a new folder called `Original-<version>-<country>-al` (for example, `C:\ProgramData\NavContainerHelper\Extensions\Original-14.0.29537.0-W1-al`).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can create a new AL project with all the base AL objects you obtained
    from the previous step. This can be done automatically by executing the following
    script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous code, we''re using the following two parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The `-useBaseline` option is used to copy the `.AL` base files into our AL solution
    project.
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: The `-addGit` option creates an offline Git repository of the folder and commits
    all the objects (you need to have Git installed).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, you can open this folder with Visual Studio Code and compile the solution
    without publishing (or using the *Ctrl* + *Shift* + *B* shortcut). This compilation
    process can take a few minutes. You can also compile the solution without opening
    Visual Studio Code by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You may see some deprecation warnings during compilation. After compilation,
    you need to commit these modifications to your local Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: You now have a full AL app (with all the standard AL objects).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next step, you have to replace the C/AL objects in the container database
    with this newly compiled AL app. To do that, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '`Publish-NewApplicationToNavContainer` is a cmdlet that uninstalls all the
    apps from the database, removes all C/AL objects, and uses the development endpoint
    of the container to publish the new `.app` file. We use the `-useCleanDatabase`
    flag to remove C/AL objects and uninstall the existing apps.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have a Docker container that runs a full AL base app, you need
    to import your AL custom solution (extension). To do this, execute the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This will work on the container where you've previously imported your custom
    C/AL solution (here, this is called `d365bc`). Now, the conversion runs on all
    the objects (the full database, except for the report layout files).
  prefs: []
  type: TYPE_NORMAL
- en: After this step, you have a full base app that contains your custom objects
    and your modifications inside the standard `.AL` objects. You can now compile
    the objects and deploy them on your Dynamics 365 Business Central container for
    testing. You now have a code-customized AL solution (again, it is highly advisable
    to avoid this if possible).
  prefs: []
  type: TYPE_NORMAL
- en: These are the steps that are required if you wish to start a code conversion.
    As a general rule, remember to always take the SaaS environment as your reference
    and target point.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading from Dynamics 365 Business Central version 14 to version 15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft's recommended path for migrating your solution to the new refactored
    Dynamics 365 Business Central version 15 is to start from your solution that was
    previously moved to version 14 (moving to version 14 and AL is the first step).
  prefs: []
  type: TYPE_NORMAL
- en: 'Microsoft''s official migration path is represented in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b8b45c6-8feb-4620-b96b-1a7d03c3b8af.png)'
  prefs: []
  type: TYPE_IMG
- en: More information on this can be found at [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/upgrade/upgrade-overview-v15](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/upgrade/upgrade-overview-v15).
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a technical upgrade from a version 14 database to version 15, you
    can execute the following PowerShell command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The conversion updates the system tables of the database to the new schema (data
    structure) and provides the latest platform features and performance enhancements.
  prefs: []
  type: TYPE_NORMAL
- en: 'For migrating to version 15, detailed steps are described in the following
    official Microsoft pages:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Upgrading an unmodified application to Dynamics 365 Business Central 2019 Release
    Wave 2: [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/upgrade/upgrade-unmodified-application](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/upgrade/upgrade-unmodified-application).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Technical Upgrade to Dynamics 365 Business Central 2019 Wave 2: [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/upgrade/upgrade-technical-upgrade-v14-v15](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/upgrade/upgrade-technical-upgrade-v14-v15).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the next section, we''ll look at another important aspect to take into consideration
    when architecting solutions for the new Dynamics 365 Business Central platform:
    how to handle customer requests for customizations.'
  prefs: []
  type: TYPE_NORMAL
- en: Handling customer-specific personalization's
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You''ve worked hard so far, and now your solution has finished moving from
    the old C/AL to the new extension''s architecture. Now, a common business scenario
    occurs when you sell your solution to a customer: they want some specific customizations
    of your solution to satisfy their particular business needs. Here, we immediately
    have a problem: how can you handle customizations for your customers?'
  prefs: []
  type: TYPE_NORMAL
- en: 'The extension model has some rules, and you need to absolutely avoid the situation
    represented in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6bdb7c85-5a7f-4c9c-8d01-a6d89d1c9dc8.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding diagram, we can see that EXT BASE is the standard solution
    and its base code is modified for every customer that acquires the solution.
  prefs: []
  type: TYPE_NORMAL
- en: You don't need to directly customize your extension code for every customer
    you have. Forking your solution's base code is absolutely a bad practice (it hurts
    the extension's principles; that is, the base code must never be changed).
  prefs: []
  type: TYPE_NORMAL
- en: 'What you need to do is represented in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b801ecb5-cf9f-4539-ac80-d1af396bfff7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, your extension''s base code (called EXT BASE, in the preceding diagram)
    is the same for every customer. To handle customizations for each customer, you
    create a new extension for each customer (CUSTOM EXT, in the preceding diagram)
    that will be *dependent* on your base extension (it will be a new layer above
    the standard layer). This is a best practice and what the extension model wants:
    you don''t modify base code, you *extend* base code. So, aside from these, what
    are the other solutions for extensions that we need to remember? Let''s check
    them out.'
  prefs: []
  type: TYPE_NORMAL
- en: Other things to remember
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When moving a solution to extensions, there are other things to remember and
    aspects that you need to handle or rethink. In the upcoming sections, you will
    find a summary of some of the most common ones.
  prefs: []
  type: TYPE_NORMAL
- en: Handling the MenuSuite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Dynamics NAV, pages and reports can be searched in the web client by adding
    them to a M*enuSuite* object (a standard object that defines the functional menu
    of the application). With Dynamics 365 Business Central, the `MenuSuite` object
    is not supported, and pages and reports can be searchable and visible by setting
    the `UsageCategory` and `ApplicationArea` properties.
  prefs: []
  type: TYPE_NORMAL
- en: If you convert objects from C/AL, you need to set these properties on the converted
    objects. You can automate the process of setting these properties on your objects
    by using a PowerShell module called `TransitionMenuSuiteObjectsForSearch.psm1`,
    which you can find on the Dynamics 365 Business Central DVD image.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can import this module on PowerShell as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now, `UsageCategory` and `ApplicationArea` are set on all your converted objects.
  prefs: []
  type: TYPE_NORMAL
- en: .NET variables and add-ins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If your existing code uses .NET variables, these objects are not supported in
    a SaaS environment. If you want to use .NET on SaaS, you need to wrap your DLLs
    (or your .NET code) into an Azure function and call that function from your AL
    code. [Chapter 6](512b0690-f392-4f82-b006-cacdeec1bacc.xhtml), *Advanced AL Development*,
    and [Chapter 13](45e3cb96-0df4-43be-89d0-697822f4b159.xhtml), *Serverless Business
    Processes with Business Central and Azure*, show you how to handle these situations.
  prefs: []
  type: TYPE_NORMAL
- en: If your extension targets the on-premise world (`Target = Internal` in the `app.json`
    file), then you can use .NET assemblies in your AL code (but this code can never
    be moved into a SaaS environment). More information on how to use .NET variables
    in AL for the on-premise world can be found at [https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/devenv-get-started-call-dotnet-from-al](https://docs.microsoft.com/en-us/dynamics365/business-central/dev-itpro/developer/devenv-get-started-call-dotnet-from-al) and [https://demiliani.com/2019/06/04/dynamics-365-business-central-using-dotnet-assemblies-on-a-docker-container-sandbox/](https://demiliani.com/2019/06/04/dynamics-365-business-central-using-dotnet-assemblies-on-a-docker-container-sandbox/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Another possible problem occurs if you have a solution that uses .NET visual
    add-ins, such as the following Sales Order page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/215a0c59-d19a-47fc-9fda-d4dd4c9a4dc2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is a custom Sales Order page we have implemented that uses a
    .NET **Windows Presentation Foundation** (**WPF**) add-in that''s been declared
    in C/AL as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6212ecff-1f2c-43ab-9e5f-c1c22a769daa.png)'
  prefs: []
  type: TYPE_IMG
- en: To move this solution to Dynamics 365 Business Central, you need to remake the
    visual add-in as a JavaScript add-in, as described in [Chapter 6](512b0690-f392-4f82-b006-cacdeec1bacc.xhtml), *Advanced
    AL Development*.
  prefs: []
  type: TYPE_NORMAL
- en: File management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Dynamics 365 Business Central, files are only supported on-premises. If
    you're targeting the SaaS environment, you should handle files in a different
    way by using *Streams* (as described in [Chapter 6](512b0690-f392-4f82-b006-cacdeec1bacc.xhtml), *Advanced
    AL Development*, in the *Handling files* section) or by using *Azure Functions*
    for file storage (a complete solution is described in [Chapter 13](45e3cb96-0df4-43be-89d0-697822f4b159.xhtml),
    *Serverless Business Processes with Business Central and Azure*).
  prefs: []
  type: TYPE_NORMAL
- en: Printing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Direct printing (sending a document to a printer on the local network directly)
    is not available in the SaaS environment. A possible solution to this problem
    is described here: [https://demiliani.com/2019/01/29/dynamics-365-business-central-and-direct-printing/](https://demiliani.com/2019/01/29/dynamics-365-business-central-and-direct-printing/).
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft is also working on supporting direct printing in the near future in
    the SaaS environment. The wave 2 release will have a new reporting event called
    `OnDocumentReady`, which exposes a data stream and the context of a document.
    A document can then be picked up by an extension that can handle printing.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we'll learn how the Dynamics 365 Business Central wave
    2 release architecture could affect your extension's development in the near future.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamics 365 Business Central wave 2 release changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Dynamics 365 Business Central Wave 2 release (platform 15) is AL- and web-client-only.
    You will not find support for C/AL and CSIDE anymore. Instead, if you go to the *Extensions
    Management* page in Dynamics 365 Business Central platform 15, you will find the
    following two Microsoft extensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Base Application** (version 15.0.<build>.0): This extension contains all
    the business logic that was moved to AL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**System Application** (version 15.0.<build>.0): This extension handles the
    system layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition to simplifying the entire codebase, the main benefits of this new
    structure are that you can move away from code customizations and start making
    vertical or horizontal solutions based on the Dynamics 365 Business Central platform. You
    can set up a staging environment and practice with the breaking changes that will
    be introduced officially in the new version by following these two official articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://freddysblog.com/2019/07/31/preview-of-dynamics-365-business-central-2019-release-wave-2/](https://freddysblog.com/2019/07/31/preview-of-dynamics-365-business-central-2019-release-wave-2/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://freddysblog.com/2019/08/02/organizing-your-al-files/](https://freddysblog.com/2019/08/02/organizing-your-al-files/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All the new extensions that you will create for Dynamics 365 Business Central
    must be dependent on these Microsoft apps. In Visual Studio Code, when you start
    a new extension project, you need to add the following dependencies to your extension''s `app.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cd5c9587-9274-4420-ad9b-b567ee02e403.png)'
  prefs: []
  type: TYPE_IMG
- en: Those dependencies will be automatically added if you select **4.0** as the
    target platform in Visual Studio Code.
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, you can download symbols from your environment and start coding:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b4784bfd-5470-48ae-93c3-74d86a979dc5.png)'
  prefs: []
  type: TYPE_IMG
- en: This is the recommended way to develop extensions for the SaaS and the on-premise
    world.
  prefs: []
  type: TYPE_NORMAL
- en: In the Dynamics 365 Business Central wave 2 release, Microsoft permits you to
    also modify the base code (now, it's full AL converted) and the links at the beginning
    of this section explain how to extract the .al files to a local folder and start
    working on those files to create your new custom *BaseApp.*
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, here, I''m directly modifying the standard *Sales-Post* codeunit
    by adding a custom function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d0272c1a-d4c7-4e33-8c51-fa27c6c47e7d.png)'
  prefs: []
  type: TYPE_IMG
- en: More information on how to modify the *Base Application* can be found here: [https://demiliani.com/2019/09/24/dynamics-365-business-central-wave-2-customizing-the-base-application/](https://demiliani.com/2019/09/24/dynamics-365-business-central-wave-2-customizing-the-base-application/).
  prefs: []
  type: TYPE_NORMAL
- en: As we mentioned previously, in many sources by community experts, *just because
    you can, it doesn't mean you should*. Modifying base code is actually permitted
    to help partners move solutions to AL and the new platform as soon as possible,
    but, in the long term, on-premise will follow cloud rules, so Microsoft's base
    code modifications may become more restricted in the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the new platform, you can also build extensions on top of the *System
    Application* itself. Just remove the dependency from the *BaseApp,* download some
    symbols, andyou''re ready to go. As shown in the following screenshot, now, you
    have only downloaded two app packages (no BaseApp):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b366d94-43f0-4e54-b17b-9f17826d977f.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, you can start coding an extension that depends only on the *System Application*.
  prefs: []
  type: TYPE_NORMAL
- en: The *System Application* is actually a work in progress and could change in
    the future (new modules will be added). The latest version is always available
    on GitHub at [https://github.com/Microsoft/alappextensions](https://github.com/Microsoft/alappextensions).
  prefs: []
  type: TYPE_NORMAL
- en: As you've seen in this section, from the Dynamics 365 Business Central 15.x
    platform, all the base code has been moved to AL and you need to create extensions
    with AL and Visual Studio Code, starting with the Microsoft Base and System apps.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at the best practices of moving an existing monolithic C/AL
    solution to the new extension architecture and to the AL language. We also saw
    the best practices of architecting your solution, such as how to convert existing
    C/AL code into AL in a semi-automatic way, and how to handle common problems during
    the migration phase of your existing solution.
  prefs: []
  type: TYPE_NORMAL
- en: Toward the end of this chapter, you learned how to migrate to the new Dynamics
    365 Business Central platform and the best practices to adopt when starting a
    project for a new solution. Now, you have a clear vision of the tools to use to
    migrate existing code to AL and the steps that are required to start this migration
    activity.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll learn how third-party tools can help us work with
    AL and extensions, and also help us move our existing solutions to the new Dynamics
    365 Business Central architecture.
  prefs: []
  type: TYPE_NORMAL
