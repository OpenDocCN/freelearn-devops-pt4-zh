- en: Useful and Proficient Tools for AL Developers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we provided some guidance and best practices on moving
    existing ISV solutions to the new Dynamics 365 Business Central development model
    based on extensions.
  prefs: []
  type: TYPE_NORMAL
- en: Having the correct tools when working with extensions and Visual Studio Code
    can save you lots of time and energy. In this chapter, we want to give you an
    overview of some third-party development tools that you can use in your everyday
    developer life with AL to be more proficient in many tasks. We will focus here
    on tools developed by a famous name in the Microsoft Dynamics ERP world: Waldo.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Who is Waldo?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What tools to use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who is Waldo?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Waldo's real name is Eric Wauters and he is one of the founding partners of
    *iFacto Business Solutions* and *Cloud Ready Software*. With his 18 years of technical
    expertise, he is an everyday inspiration to its development teams. As a development
    manager, he continually acts upon the technical readiness of iFacto and CRS.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from that, Eric is also very active in the Microsoft Dynamics 365 Business
    Central community, where he tries to solve technical issues and shares his knowledge
    with other Dynamics enthusiasts. Surely, a lot of you will have read some of Eric's
    posts, which he invariably signs with `waldo`.
  prefs: []
  type: TYPE_NORMAL
- en: Lots of people have been using and even contributing to tools he shares for
    free on MiBuSo, GitHub, the PowerShell Gallery, and the Visual Studio Marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: His proven track record led to him being given a **Microsoft Most Valuable Professional**
    (**MVP**) award each year since 2007.
  prefs: []
  type: TYPE_NORMAL
- en: After learning about Waldo, in the next section, we'll see an overview of most
    of his tools for AL developers.
  prefs: []
  type: TYPE_NORMAL
- en: What tools to use
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the years, Waldo has created quite a lot of tools. The first tool Waldo
    ever put online was back in 2004, `WaldoNavPad`, a tool that helps to work with
    bigger texts in Microsoft Dynamics NAV. It helped to break up code into smaller
    pieces, which was necessary because, back then, we could only have a maximum of
    250 characters in one field.
  prefs: []
  type: TYPE_NORMAL
- en: The tool was downloaded over 11,000 times from MiBuSo. Because of its popularity,
    Waldo updated the tool to a version that worked in the RTC and as an AL extension,
    where he extended the functionality a bit to have an HTML editor inside Business
    Central.
  prefs: []
  type: TYPE_NORMAL
- en: Following this tool, quite a few minor tools made it to the download list of
    MiBuSo, which you can find at [https://mibuso.com/downloads/results?keywords=waldo](https://mibuso.com/downloads/results?keywords=waldo).
  prefs: []
  type: TYPE_NORMAL
- en: 'Since 2013, when Microsoft released more and more PowerShell building blocks,
    Waldo decided to dive into that to help the uptake in the community. This resulted
    in some very extended libraries of helper functions, which are categorized and
    published on the PowerShell Gallery. Just search for `waldo` ([https://www.powershellgallery.com/packages?q=waldo](https://www.powershellgallery.com/packages?q=waldo))
    and you will find six PowerShell modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Ready.Software.SQL`: These include some functions that help you to work with
    SQL Server (and Business Central), such as taking backups and restoring them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Ready.Software.PowerShell`: This is a very small set of functions for some
    PowerShell-related challenges.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Ready.Software.Windows`: These include Windows-related functions such as zipping
    and unzipping items.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Ready.Software.NAV`: This module contains most functions, all related to NAV
    (Business Central):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with objects (upgrade, version list, languages, and so on)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with servers (such as permissions and companies)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RemoteNAVDockerHostHelper`: This is a module to help you to work with a `DockerHost`
    when that `DockerHost` is not on your local PC (hence the word `Remote` in `RemoteNAVDockerHost`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NavContainerHelperExtension`: This is just a set of functions that Waldo needed
    to work with Docker. Similar to `NavContainerHelper`, these functions were not
    part of that module at the time they were created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All of these functions have had a purpose in Waldo''s life as a developer.
    Every single script in which he uses these modules is online on his GitHub: [https://github.com/waldo1001/Cloud.Ready.Software.PowerShell](https://github.com/waldo1001/Cloud.Ready.Software.PowerShell).
    You will find all modules there and the scripts in which he puts these modules
    to use.'
  prefs: []
  type: TYPE_NORMAL
- en: 'A large number of these PowerShell scripts were created to be able to help
    the development of V1 Extensions. But when these were discontinued (for the better),
    there was a new kid on the block: Visual Studio Code, in which we can develop
    for what we call Extensions V2\. In Waldo''s opinion, this tool needed some help
    with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Automatically naming files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Snippets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, Waldo started to build an extension for Visual Studio Code to help AL developers
    to do their jobs more efficiently. The **CRS AL Language Extension** was born: [https://marketplace.visualstudio.com/items?itemName=waldo.crs-al-language-extension](https://marketplace.visualstudio.com/items?itemName=waldo.crs-al-language-extension).
  prefs: []
  type: TYPE_NORMAL
- en: 'This is just a peek at Waldo''s tools and how he came to build them. Here are
    a few resources where you can find his tools:'
  prefs: []
  type: TYPE_NORMAL
- en: 'MiBuSo: [https://mibuso.com/downloads/results?keywords=waldo](https://mibuso.com/downloads/results?keywords=waldo)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The PowerShell Gallery: [https://www.powershellgallery.com/packages?q=waldo](https://www.powershellgallery.com/packages?q=waldo)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitHub: [https://github.com/waldo1001](https://github.com/waldo1001)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DevOps: [https://dev.azure.com/waldo1001/WaldoDemos](https://dev.azure.com/waldo1001/WaldoDemos)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will talk about a few of his tools, focused on making your
    life as an AL developer a little bit easier.
  prefs: []
  type: TYPE_NORMAL
- en: The AL Extension Pack
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The smallest tool that Waldo ever built is the Visual Studio Code | Extension
    Packs. In fact, it's a collection of all of the Visual Studio Code extensions
    that Waldo values and uses in everyday development tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the Extension Packs on the Marketplace under the name AL Extension
    Pack. Here is a direct link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://marketplace.visualstudio.com/items?itemName=waldo.al-extension-pack](https://marketplace.visualstudio.com/items?itemName=waldo.al-extension-pack)'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what the home page looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7bdff342-32f5-41cd-bae4-1caa35c34866.png)'
  prefs: []
  type: TYPE_IMG
- en: By simply installing this extension, it will automatically install all extensions
    that are in the pack, and when Waldo adds an extension, it will automatically
    be installed on your system as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'There''s also a similar package that we highly recommend installing if you
    want to have a full-featured Visual Studio Code environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/07f95b71-c4e3-45a8-b9bf-df374bca0b2b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can find this tool at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://marketplace.visualstudio.com/items?itemName=StefanoDemiliani.sd-extpack-d365bc](https://marketplace.visualstudio.com/items?itemName=StefanoDemiliani.sd-extpack-d365bc)'
  prefs: []
  type: TYPE_NORMAL
- en: The CRS AL Language Extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A somewhat bigger extension that Waldo has written for the community is the
    **CRS AL Language Extension**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e3d26504-2b2e-4ebd-90c8-0b9e5b9c9f94.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The extension can be found at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://marketplace.visualstudio.com/items?itemName=waldo.crs-al-language-extension](https://marketplace.visualstudio.com/items?itemName=waldo.crs-al-language-extension)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The main reason why so many people are using it is that it manages filename
    conventions: developers don''t have to worry anymore about how to name their files—this
    extension can take care of that automatically. But it does a lot more.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's have an overview of its functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Run objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We all know that we can run a table or page whenever we publish an app by changing
    some settings in the `launch.json` file. But that's not convenient.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a way, we need to be able to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Run any object in the windows, web, tablet, or phone client.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Run some tools directly, such as the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test Tool
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Event Subscribers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Database Locks Page
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Run the current object that is open in the client.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `launch.json` way of running objects isn't going to help us here.
  prefs: []
  type: TYPE_NORMAL
- en: 'The CRS AL Language Extension comes with these new commands, which can be found
    in the command palette:'
  prefs: []
  type: TYPE_NORMAL
- en: 'CRS: Run Object (Web Client).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CRS: Run Object (Tablet Client).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CRS: Run Object (Phone Client).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CRS: Run Object (Windows Client).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CRS: Run Current Object (Web Client) (*Ctrl* + *Shift* + *R*)—this runs the
    object from the open file (the extension needs to be published first). You can
    also run this command from the status bar (Run In Web Client) and the context
    menu from the explorer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CRS: Run CAL Test Tool in Web Client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CRS: Run Event Subscribers Page in Web Client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CRS: Run Database Locks Page in Web Client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The nice thing is it will find the settings in `launch.json` and use these to
    run the actual objects.
  prefs: []
  type: TYPE_NORMAL
- en: Renaming/reorganizing files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned earlier, this is the most widely used functionality of the tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Renaming` is renaming the file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Reorganizing` is renaming the file `AND` placing it in a subfolder that matches
    its object type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The essence is captured in four commands that are again available from the
    Visual Studio Code command palette:'
  prefs: []
  type: TYPE_NORMAL
- en: 'CRS: Rename – Current File.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CRS: Rename – All Files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CRS: Reorganize – Current File.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CRS: CRS: Reorganize – All Files—note that `Reorganize` will move a test codeunit
    to the test folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There''s also a setting to start the file renaming/reorganizing automatically
    when saving a `.al` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Another interesting functionality of rename/reorganize is the ability to change
    the patterns of filenames:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an overview of all of the available tool settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CRS.nstfolder`: This is the folder of the NST.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CRS.WebServerInstancePort`: This is the port number for the web client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CRS.WinServer`: This is the server that the Windows client is connecting to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CRS.WinServerInstance`: This is the server instance that the windows client
    is connecting to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CRS.WinServerInstancePort`: This is the port number of the server instance
    that the Windows client is connecting to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CRS.PublicWebBaseUrl`: Override `Launch.json` settings with this setting if
    necessary to run objects from VS Code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CRS.ExtensionObjectNamePattern`: This is the pattern for the object name;
    if set (it''s not set by default), it will perform an automatic object name for
    extension objects:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<Prefix>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<Suffix>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ObjectType>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ObjectTypeShort>`: A short notation of the object type'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ObjectTypeShortUpper>`: The same as `ObjectTypeShort` but uppercase'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ObjectId>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<BaseName>`: Weird characters are removed—does NOT include prefix or suffix'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<BaseNameShort>`: Does NOT include prefix or suffix'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<BaseId>`: If you want this to work, you need to put `Id` in a comment after
    the base name'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CRS.FileNamePattern`: This is the pattern of the filename for non-extension
    objects. These variables can be used:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<Prefix>`: Just the prefix separately'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<Suffix>`: Just the suffix separately'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ObjectType>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ObjectTypeShort>`: A short notation of the object type'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ObjectTypeShortUpper>`: The same as `ObjectTypeShort` but uppercase'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ObjectId>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ObjectName>`: Weird characters are removed, including prefix and suffix'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ObjectNameShort>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CRS.FileNamePatternExtensions`: This is the pattern of the filename for extension
    objects. These variables can be used:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<Prefix>`: Just the prefix separately'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<Suffix>`: Just the suffix separately'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ObjectType>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ObjectTypeShort>`: A short notation of the object type'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ObjectTypeShortUpper>`: The same as `ObjectTypeShort` but uppercase'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ObjectId>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ObjectName>`: Weird characters are removed, including prefix and suffix'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ObjectNameShort>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<BaseName>`: Weird characters are removed, but this does not include prefix
    nor suffix'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<BaseNameShort>`: Does not include prefix nor suffix'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<BaseId>`: If you want this to work, you need to put `Id` in a comment after
    the base name, like in this example:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`CRS.FileNamePatternPageCustomizations`: This is the pattern of the filename
    for page customizations. These variables can be used:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<Prefix>`: Just the prefix separately'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<Suffix>`: Just the suffix separately'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ObjectType>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ObjectTypeShort>`: A short notation of the object type'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ObjectTypeShortUpper>`: The same as `ObjectTypeShort` but uppercase'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ObjectName>`: Weird characters are removed—includes prefix and suffix'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<ObjectNameShort>`: Includes prefix and suffix'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<BaseName>`: Weird characters are removed and does NOT include prefix nor
    suffix'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<BaseNameShort>`: Does NOT include prefix nor suffix'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<BaseId>`: Same remarks as before'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CRS.ObjectNamePrefix`: When using the reorganize/rename commands, this setting
    will make sure the object name (and filename) will have a prefix:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Tip 1: Use as a workspace setting'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Tip 2: Use an ending space if you want the prefix to be separated by a space'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CRS.ObjectNameSuffix`: When using the reorganize/rename commands, this setting
    will make sure the object name (and filename) has a suffix:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Tip 1: Use as a workspace setting'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Tip 2: Use a start space if you want the suffix to be separated by a space'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CRS.RemovePrefixFromFilename`: When using the reorganize/rename commands,
    this setting will remove any prefix from the filename (but keep it in the object
    name). Tip: Use as a workspace setting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CRS.RemoveSuffixFromFilename`: When using the reorganize/rename commands,
    this setting will remove any suffix from the filename (but keep it in the object
    name). Tip: Use as a workspace setting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CRS.AlSubFolderName`: This is the variable subfolder name. "None" means you
    want to disable the command to move files to a subfolder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CRS.OnSaveAlFileAction`: This will automatically rename/reorganize the file
    you are editing. This takes into account the prefix/suffix as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DisableDefaultAlSnippets`: This disables the default snippets that come with
    the `Microsoft.al-language` extension. When you change the setting, you need to
    restart Visual Studio Code twice—once to disable the snippets on activation (at
    that time, the snippets are still loaded), and once to not load the snippets anymore.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DisableCRSSnippets`: This disables the CRS snippets that come with this extension.
    When you change the setting, you need to restart Visual Studio Code twice—once
    to disable the snippets on activation (at that time, the snippets are still loaded),
    and once to not load the snippets anymore.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RenameWithGit`: Use `git mv` to rename a file. This keeps the history of the
    file but stages the rename, which you should commit separately. **The feature
    is still in preview-mode, therefore the default value is** `false`**.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search on Google/Microsoft Docs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A small addition, but very handy when coding, is being able to easily find
    documentation using two new commands in the command palette:'
  prefs: []
  type: TYPE_NORMAL
- en: 'CRS: Search Microsoft Docs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CRS: Search Google'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It will take the selected word, and search that word on Google or Microsoft
    Docs, with Business Central as the main topic.
  prefs: []
  type: TYPE_NORMAL
- en: Snippets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Last, but definitely not least, several snippets are included in the CRS AL
    Language extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, there are improved versions of the Microsoft snippets:'
  prefs: []
  type: TYPE_NORMAL
- en: Removed unused triggers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved tab stops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved uncompilable code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removed default global variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are also new snippets that implement some default design patterns:'
  prefs: []
  type: TYPE_NORMAL
- en: '`tmynotifications` (CRS): The implementation of my notifications for your own
    notifications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tassistedsetup` (CRS): The implementation of the assisted setup for your own
    wizards'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tcodeunit` (CRS Method): Snippets for implementing a default encapsulated
    method design pattern that implements an `OnBefore` and `OnAfter` event by default'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's a good thing to explore all snippets and familiarize yourself with them.
  prefs: []
  type: TYPE_NORMAL
- en: Feedback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have feedback, or you want to contribute to this project, then don't
    hesitate to fork or create issues on the repository for the CRS AL Language extension,
    which you can find on GitHub at [https://github.com/waldo1001/crs-al-language-extension](https://github.com/waldo1001/crs-al-language-extension).
  prefs: []
  type: TYPE_NORMAL
- en: WaldoNavPad
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The goal of `WaldoNavPad` has always been to be able to easily work with an
    unlimited amount of text by easily splitting the text into pieces to save in a
    Business Central (or NAV) database (not just by saving it as a BLOB, but as text)
    so that you can still filter and search for parts of the texts.
  prefs: []
  type: TYPE_NORMAL
- en: On top of this, the text should be split intelligently by preserving paragraphs,
    carriage returns, and full words. This still preserves the format of the text
    as much as possible, which makes it as readable as possible in the small field
    lengths that NAV had at its disposal.
  prefs: []
  type: TYPE_NORMAL
- en: How to get it to work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The latest version of `WaldoNavPad` can be found on Waldo''s GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/waldo1001/Waldo.NAV.Pad](https://github.com/waldo1001/Waldo.NAV.Pad)'
  prefs: []
  type: TYPE_NORMAL
- en: It can easily be downloaded, forked, or cloned from there.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you do so, you''ll have the AL code of an app that implements `WaldoNavPad`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/faca539c-f2cb-414d-b467-c26cd6788c2c.png)'
  prefs: []
  type: TYPE_IMG
- en: This set of files is intended to allow you to copy, renumber, rename, and do
    more to your own project. It's not intended to be created as an app, nor has it
    been uploaded to AppSource, so you can use it as a dependency from your own app.
  prefs: []
  type: TYPE_NORMAL
- en: Running the app for the first time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once in Visual Studio Code, the app builds and publishes as is. You can simply
    create your `launch.json`, download the symbols, and build the app right away.
    This will get you to the Customer List page, where there are the following two
    new actions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open WaldoNAVPad Text: A normal page with a multiline textbox to handle large
    texts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open WaldoNAVPad HTML: A JavaScript-based HTML editor (based on TinyMCE)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The actions appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b24d2744-2bcb-4d55-8565-6025b7f082f5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is the text editor on the normal page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3b240969-8ba7-4843-a79c-5136e374638e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The HTML text editor is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e0f3bda7-fe66-48f4-a6b9-13999d65efef.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, let's see how the background for the text appears.
  prefs: []
  type: TYPE_NORMAL
- en: The background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you dive into the code, you''ll see that the app consists of two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**NAVpad Handling**: This subfolder contains the code to handle the NAVpad.
    The idea is you only use the `WaldoNAVPad` Class codeunit, where you can show/save/get
    the texts from the NAVpad. To save the texts, it will use the text handling functionality.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text Handling**: This subfolder contains the code to intelligently handle
    the texts that have to be saved to the database or have to be loaded from the
    database. If you want to use the NAVPad text-tables, there is no need to use these
    methods. However, if you want to save texts to your own table, you can simply
    use the functions in the `WaldoNAVPad` Text Class codeunit, which lets you get
    text and loop through it to save it to your own tables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By looping through your text, the system is going to cut sentences at spaces
    or carriage returns to preserve the formatting of your text as much as possible.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, you see the NAVPad Handling routine looping through
    the text to save the text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/075dd6a5-8ce8-4105-80a4-d7e9bb82f053.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By default, the system saves the text in two tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '`WaldoNAVPad` Blobstore: This is a table with formatted HTML tags to preserve
    all of the formatting the user has been doing to the text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WaldoNAVPad` Textstore: This is a table where all of the HTML tags are stripped
    to be able to show it decently in Business Central.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To show the content of these tables, the app has two pages in the `_JustForTexting`
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: page 82,150 WaldoNAVPad Blobs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: page 82,149 WaldoNAVPad Texts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is an example of how the records are saved by running the page called
    WaldoNAVPad Texts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2e2ea6a1-8cd2-48f0-9c5b-5d7e275c55c9.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we will see how to implement these actions.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the logic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To show you how to implement this in your own business logic, the app has a
    `_JustForTesting` subfolder, which contains a page extension for page 22 (Customer
    List) that shows how you can simply create an action on a page and implement `WaldoNAVPad`
    by calling the class functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/adfbdb05-5721-4fab-806c-960572909af2.png)'
  prefs: []
  type: TYPE_IMG
- en: The `Initialize` function will load the text that is linked to the current record.
    The `ShowAndSaveTexts` method will show the texts (in this case, in the HTML editor)
    if the user chooses to see it.
  prefs: []
  type: TYPE_NORMAL
- en: MostUselessAppEver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A not-so-important, but rather interesting, repository of Waldo is something
    he calls *the most useless app ever*. It is an AL app intended for demos, prototyping,
    tryouts, or tests—you name it. It contains a lot of different tryouts and demos
    of different parts and topics of AL development.
  prefs: []
  type: TYPE_NORMAL
- en: 'A few examples of this are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Translations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The different .NET wrappers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some editing hacks to work with Visual Studio Code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Included SQL files to check the tables of an app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publish web services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Included HTTP files to check web services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Function overloading
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Tenant Management codeunit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find `MostUselessAppEver` on Waldo's GitHub at [https://github.com/waldo1001/MostUselessAppEver](https://github.com/waldo1001/MostUselessAppEver).
  prefs: []
  type: TYPE_NORMAL
- en: You can simply clone the repository and start working with it. There is not
    a single piece of business logic that is useful, but it will show you some tricks
    to work with AL development.
  prefs: []
  type: TYPE_NORMAL
- en: PowerShell tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned before, Waldo has been diving into PowerShell quite heavily. There
    has been a strong focus on C/AL and merging, upgrading, and all that, but for
    AL, there hasn't been much need in terms of PowerShell (yet).
  prefs: []
  type: TYPE_NORMAL
- en: Still, let's point out a few areas in his scripts that can be of any use in
    terms of AL development.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All of Waldo's PowerShell modules and scripts can be found on GitHub at [https://github.com/waldo1001/Cloud.Ready.Software.PowerShell](https://github.com/waldo1001/Cloud.Ready.Software.PowerShell).
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see two folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PSModules`: This contains all of the code for the modules. These modules can
    be found on the PowerShell Gallery as well: [https://www.powershellgallery.com/packages?q=waldo](https://www.powershellgallery.com/packages?q=waldo).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PSScripts`: This contains scripts that mostly put the functions of these modules
    to work.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Waldo has been using Docker in quite a number of ways. First, he ran a Windows
    2016 Server VM on his laptop, where he had installed Docker—so, in a way, it was
    a remote Docker host. Then, he moved to Docker on his own PC, which simplified
    the development experience a bit. All of his scripts to manage Docker are in the
    `PSScripts`/`NAVDocker` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you find scripts to create containers, but also to work with apps in
    these Docker containers, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CleanApp`: This will remove all apps from a Docker container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`InstallApp`: This will install an app with PowerShell.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ExportObjectsAsAL`: This will export objects as an AL file. It''s very convenient
    to use for reports, which you can export, rename, and replace easily.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In another repository (`blog.CALAnalysis`), Waldo has been documenting all of
    the publishers from a certain version of NAV or Business Central, which results
    in a file that lists all of the event publishers and where they are called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following is an example of the publishers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/55221a07-06a4-4972-a857-438a33f790d1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is where they are called:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/46e2d0e9-d4d5-4d4a-a05c-eb128c0fe342.png)'
  prefs: []
  type: TYPE_IMG
- en: Quite a lot of people refer to this for trying to find out that the event that
    they are about to use is actually being called on the place they expect.
  prefs: []
  type: TYPE_NORMAL
- en: ALOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**ALOps** is the current tool Waldo is working on. The goal of this tool is
    to provide the easiest way possible for Dynamics 365 Business Central partners
    to set up build and release pipelines in Azure DevOps.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In essence, build and release pipelines are a crucial part of **continuous
    integration/continuous deployment** (**CI/CD**), but very far from the daily knowledge
    of an AL developer. `ALOps` is there to close that bridge: with very limited knowledge,
    you can set up your own build pipeline in a matter of minutes.'
  prefs: []
  type: TYPE_NORMAL
- en: DevOps extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**ALOps** is a DevOps extension that is available on the Marketplace for Azure
    DevOps:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9fedc9d-97c7-4c57-914f-240ff1f0d79a.png)'
  prefs: []
  type: TYPE_IMG
- en: And it is free for any open source repository.
  prefs: []
  type: TYPE_NORMAL
- en: The extension is actually a structured collection of PowerShell scripts. And
    the nice thing is, the user does not have to have any PowerShell knowledge to
    set up the most complex build pipeline, including the signing of apps, compilations,
    tests, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As `ALOps` is there to set up pipelines, it includes what we call steps. The
    steps it includes today are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Compile app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sign app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verify signed app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publish app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clean apps from the environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy app between environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Import a RapidStart package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Import a license
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a Docker container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wait for a Docker container to finish building
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove a Docker container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Import **for side-by-side development** (**fob**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Export objects (`txt` or `fob`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compile (C/AL)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of these steps work on Docker or non-Docker environments if you wish.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation on GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Waldo documents ALOps on GitHub, in a repository that is also used to gather
    issues or other feedback. You can find it at [https://github.com/HodorNV/ALOps](https://github.com/HodorNV/ALOps).
  prefs: []
  type: TYPE_NORMAL
- en: That repository is actually just a set of documents that describe the DevOps
    extension.
  prefs: []
  type: TYPE_NORMAL
- en: App templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To make it even easier for app developers to set up build and release pipelines,
    there is an ever-developing repository with template apps including build pipelines
    that app developers can simply use to import so they start with a ready-made set
    of files, including a working build pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'All of the repositories are being hosted in this public project on DevOps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dev.azure.com/HodorNV/ALOps%20Templates](https://dev.azure.com/HodorNV/ALOps%20Templates)'
  prefs: []
  type: TYPE_NORMAL
- en: Example of using ALOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `WaldoNavPad` app we talked about earlier is actually set up with a working
    build pipeline in Azure DevOps, even while the repository of `WaldoNavPad` is
    on GitHub. Waldo has set it up in this public repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dev.azure.com/msdyn365bc/WaldoGitHubBuilds/](https://dev.azure.com/msdyn365bc/WaldoGitHubBuilds/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Just navigate to the builds and click one of the builds to see the details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5c3a4d34-9961-4aa1-9820-812ab9a5b819.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For the settings of this build, you have to open the `azure-pipelines.yml`
    file in the repository here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/waldo1001/Waldo.NAV.Pad](https://github.com/waldo1001/Waldo.NAV.Pad)'
  prefs: []
  type: TYPE_NORMAL
- en: 'It gives you a readable, ready-to-go build pipeline that is part of the repository.
    All of the settings and steps required to build the app are there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: For any more information on how to set it up, the place to be is the app on
    the Marketplace or the GitHub repository mentioned before, which can get you to
    all of the information you need to set it up.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw an interesting set of third-party tools that can help
    you to increase your productivity when developing extensions for Dynamics 365
    Business Central.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the last chapter of this book. In all of these chapters, we''ve covered
    all of the topics needed to master every Dynamics 365 Business Central implementation,
    from the basic to the most complex. Now it''s your turn: start developing extensions,
    embracing the SaaS, and putting all of these topics into practice.'
  prefs: []
  type: TYPE_NORMAL
