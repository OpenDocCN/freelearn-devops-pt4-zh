["```\n# Builder image\nFROM docker.io/library/golang\n# Copy files for build\nCOPY go.mod /go/src/hello-world/\nCOPY main.go /go/src/hello-world/\n# Set the working directory\nWORKDIR /go/src/hello-world\n# Download dependencies\nRUN go get -d -v ./...\n# Install the package\nRUN go build -v \n# Runtime image\nFROM registry.access.redhat.com/ubi8/ubi-micro:latest\nCOPY --from=0 /go/src/hello-world/hello-world /\nEXPOSE 8080\nCMD [\"/hello-world\"]\n```", "```\npackage main\nimport (\n       \"log\"\n   \"net/http\"\n)\nfunc handler(w http.ResponseWriter, r *http.Request) {\n     log.Printf(\"%s %s %s\\n\", r.RemoteAddr, r.Method, r.URL)\n     w.Header().Set(\"Content-Type\", \"text/html\")\n     w.Write([]byte(\"<html>\\n<body>\\n\"))\n     w.Write([]byte(\"<p>Hello World!</p>\\n\"))\n     w.Write([]byte(\"</body>\\n</html>\\n\"))\n}\nfunc main() {\n     http.HandleFunc(\"/\", handler)\n     log.Println(\"Starting http server\")\n     log.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n```", "```\n$ cd http_hello_world\n$ buildah build -t hello-world .\n```", "```\n$ buildah images --format '{{.Name}} {{.Size}}' \\     localhost/hello-world\nlocalhost/hello-world   45 MB\n```", "```\n# Builder image\nFROM docker.io/library/golang AS builder\n# Copy files for build\nCOPY go.mod /go/src/hello-world/\nCOPY main.go /go/src/hello-world/\n# Set the working directory\nWORKDIR /go/src/hello-world\n# Download dependencies\nRUN go get -d -v ./...\n# Install the package\nRUN go build -v ./...\n# Runtime image\nFROM registry.access.redhat.com/ubi8/ubi-micro:latest AS srv\nCOPY --from=builder /go/src/hello-world/hello-world /\nEXPOSE 8080\nCMD [\"/hello-world\"]\n```", "```\n#!/bin/bash\n# Define builder and runtime images\nBUILDER=docker.io/library/golang\nRUNTIME=registry.access.redhat.com/ubi8/ubi-micro:latest\n# Create builder container\ncontainer1=$(buildah from $BUILDER)\n# Copy files from host\nif [ -f go.mod ]; then \n    buildah copy $container1 'go.mod' '/go/src/hello-world/'\nelse\n    exit 1\nfi\nif [ -f main.go ]; then \n    buildah copy $container1 'main.go' '/go/src/hello-world/'\nelse \n    exit 1\nfi\n# Configure and start build\nbuildah config --workingdir /go/src/hello-world $container1\nbuildah run $container1 go get -d -v ./...\nbuildah run $container1 go build -v ./...\n# Create runtime container\ncontainer2=$(buildah from $RUNTIME)\n# Copy files from the builder container\nbuildah copy --chown=1001:1001 \\\n    --from=$container1 $container2 \\\n    '/go/src/hello-world/hello-world' '/'\n# Configure exposed ports\nbuildah config --port 8080 $container2\n# Configure default CMD\nbuildah config --cmd /hello-world $container2\n# Configure default user\nbuildah config --user=1001 $container2\n# Commit final image\nbuildah commit $container2 hello-world\n# Remove build containers\nbuildah rm $container1 $container2\n```", "```\n#!/bin/bash\n# Define builder and runtime images\nBUILDER=docker.io/library/golang\nRUNTIME=registry.access.redhat.com/ubi8/ubi-micro:latest\nRELEASE=1.0.0\n# Create builder container\ncontainer1=$(buildah from $BUILDER)\n# Copy files from host\nif [ -f go.mod ]; then \n    buildah copy $container1 'go.mod' '/go/src/hello-world/'\nelse\n    exit 1\nfi\nif [ -f main.go ]; then \n    buildah copy $container1 'main.go' '/go/src/hello-world/'\nelse \n    exit 1\nfi\n# Configure and start build\nbuildah config --workingdir /go/src/hello-world $container1\nbuildah run $container1 go get -d -v ./...\nbuildah run $container1 go build -v ./...\n# Extract build artifact and create a version archive\nbuildah unshare --mount mnt=$container1 \\\n    sh -c 'cp $mnt/go/src/hello-world/hello-world .'\ncat > README << EOF\nVersion $RELEASE release notes:\n- Implement basic features\nEOF\ntar zcf hello-world-${RELEASE}.tar.gz hello-world README\nrm -f hello-world README\n# Create runtime container\ncontainer2=$(buildah from $RUNTIME)\n# Copy files from the builder container\nbuildah copy --chown=1001:1001 \\\n    --from=$container1 $container2 \\\n    '/go/src/hello-world/hello-world' '/'\n# Configure exposed ports\nbuildah config --port 8080 $container2\n# Configure default CMD\nbuildah config --cmd /hello-world $container2\n# Configure default user\nbuildah  config--user=1001 $container2\n# Commit final image\nbuildah commit $container2 hello-world:$RELEASE\n# Remove build containers\nbuildah rm $container1 $container2\n```", "```\n$ podman run --device /dev/fuse \\\n    -v ~/build:/build:z \\\n    -v storevol:/var/lib/containers quay.io/buildah/stable \\\n    buildah build -t build_test1 /build\n```", "```\n$ podman run --rm -v storevol:/var/lib/containers quay.io/buildah/stable buildah images\nREPOSITORY                  TAG      IMAGE ID       CREATED          SIZE\nlocalhost/build_test1             latest   cd36bf58daff   12 minutes ago   283 \ndocker.io/library/fedora    latest   b080de8a4da3   4 days ago       159 MB\n```", "```\n$ ls -alR \\\n$(podman volume inspect storevol --format '{{.Mountpoint}}')\n```", "```\n$ podman run --rm -v storevol:/var/lib/containers \\\n  quay.io/buildah/stable \\\n  sh -c 'buildah tag build_test1 \\\n    registry.example.com/build_test1 \\\n    && buildah login -u=<USERNAME> -p=<PASSWORD> \\\n    registry.example.com && \\\n    buildah push registry.example.com/build_test1'\n```", "```\n# podman volume rm storevol\n```", "```\n$ podman run --device /dev/fuse \\\n    -v ~/build:/build \\\n    -v secure_storevol:/var/lib/containers:Z \\\n    quay.io/buildah/stable \\\n    sh -c 'buildah build -t test2 /build && \\\n      buildah tag test2 registry.example.com/build_test2 && \\\n      buildah login -u=<USERNAME> \\\n      -p=<PASSWORD> \\\n      registry.example.com && \\\n      buildah push registry.example.com/build_test2'\n```", "```\n$ podman run --device /dev/fuse \\\n    -v ~/build:/build \\ \n    -v /run/user/<UID>/containers/auth.json:/auth.json:z \\\n    -v secure_storevol:/var/lib/containers:Z \\\n    quay.io/buildah/stable \\\n    sh -c 'buildah build -t test3 /build && \\\n      buildah tag test3 registry.example.com/build_test3 && \\\n      buildah push --authfile /auth.json \\\n      registry.example.com/build_test3'\n```", "```\n$ podman login –u <USERNAME> -p <PASSWORD> <REGISTRY>\n```", "```\n{\n      \"auths\": {\n           \"registry.example.com\": {\n                \"auth\": \"<base64_encoded_token>\"\n               }\n    }\n}\n```", "```\n# BUILD_STORE=/var/lib/containers-$(echo $RANDOM | md5sum | head -c 8)\n# mkdir $BUILD_STORE\n```", "```\n# podman run --device /dev/fuse \\\n    -v ./build:/build:z \\\n    -v $BUILD_STORE:/var/lib/containers:Z \\\n    -v /run/containers/0/auth.json:/auth.json \\ \n    quay.io/buildah/stable \\\n    bash -c 'set -euo pipefail; \\\n      buildah build -t registry.example.com/test4 /build; \\\n      buildah push --authfile /auth.json \\\n      registry.example.com/test4'\n```", "```\n# podman run --device /dev/fuse \\\n  -v ./build:/build:z \n  -v /var/lib/containers:/var/lib/containers \\\n  --security-opt label=disable \\\n  -v /run/containers/0/auth.json:/auth.json \\\n  quay.io/buildah/stable \\\n  bash -c 'set -euo pipefail; \\\n    buildah build -t registry.example.com/test5 /build; \\\n    buildah push --authfile /auth.json \\\n    registry.example.com/test5'\n```", "```\n# AdditionalImageStores is used to pass paths to additional Read/Only image stores\n# Must be comma separated list.\nadditionalimagestores = [\n\"/var/lib/shared\",\n]\n```", "```\n# podman run --device /dev/fuse \\\n  -v ./build:/build:z \\\n  -v $BUILD_STORE:/var/lib/containers:Z \\\n  -v /var/lib/containers/storage:/var/lib/shared:ro \\ \n  -v /run/containers/0/auth.json:/auth.json:z \\\n  quay.io/buildah/stable \\\n  bash -c 'set -euo pipefail; \\\n  buildah build -t registry.example.com/test6 /build; \\\n  buildah push --authfile /auth.json \\\n  registry.example.com/test6'\n```", "```\n# BUILD_STORE=/var/lib/containers-$(echo $RANDOM | md5sum | head -c 8)# mkdir $BUILD_STORE \n# podman run --device /dev/fuse \\\n  -e REGISTRY=<USER_DEFINED_REGISTRY:PORT> \\\n  --security-opt label=disable \\\n  -v $BUILD_STORE:/var/lib/containers:Z \\\n  -v /var/lib/containers/storage:/var/lib/shared:ro \\\n  -v /run/containers/0:/run/containers/0 \\\n  quay.io/buildah/stable \\\n  bash -c 'set -euo pipefail; \\\n    container=$(buildah from fedora); \\\n    buildah run $container dnf install -y python3 python3; \\\n    buildah commit $container $REGISTRY/python_demo; \\\n    buildah push –authfile \\\n    /run/containers/0/auth.json $REGISTRY/python_demo'\n```", "```\n# BUILD_STORE=/var/lib/containers-$(echo $RANDOM | md5sum | head -c 8)\n# PATH_TO_SCRIPT=/path/to/script\n# REGISTRY=<USER_DEFINED_REGISTRY:PORT>\n# mkdir $BUILD_STORE \n# podman run --device /dev/fuse \\\n  -v $BUILD_STORE:/var/lib/containers:Z \\\n  -v /var/lib/containers/storage:/var/lib/shared:ro \\\n  -v /run/containers/0:/run/containers/0 \\\n  -v $PATH_TO_SCRIPT:/root:z \\ \n  quay.io/buildah/stable /root/build.sh\n```", "```\n# dnf install -y golang git go-md2man btrfs-progs-devel \\ gpgme-devel device-mapper-devel\nLast metadata expiration check: 0:43:05 ago on mar 9 nov 2021, 17:21:23.\nPackage git-2.33.1-1.fc35.x86_64 is already installed.\nDependencies resolved.\n=============================================================================================================================================================================\nPackage                                                 Architecture                     Version                                    Repository                         Size\n=============================================================================================================================================================================\nInstalling:\nbtrfs-progs-devel                                       x86_64                            5.14.2-1.fc35                              updates                            50 k\ndevice-mapper-devel                                     x86_64                           1.02.175-6.fc35                            fedora                             45 k\ngolang                                                  x86_64                           1.16.8-2.fc35                              fedora                            608 k\ngolang-github-cpuguy83-md2man                           x86_64                           2.0.1-1.fc35                               fedora                            818 k\ngpgme-devel                                             x86_64                           1.15.1-6.fc35                              updates                           163 k\nInstalling dependencies:\n[... omitted output]\n```", "```\n$ mkdir ~/custombuilder\n$ cd ~/custombuilder\n[custombuilder]$ export GOPATH=`pwd`\n```", "```\n    $ git clone https://github.com/PacktPublishing/Podman-for-DevOps \n    ```", "```\n$ cd ~/custombuilder/src/builder\n$ ls -latotal 148\ndrwxrwxr-x. 1 alex alex     74 9 nov 15.22 .\ndrwxrwxr-x. 1 alex alex     14 9 nov 14.10 ..\n-rw-rw-r--. 1 alex alex   1466 9 nov 14.10 custombuilder.go\n-rw-rw-r--. 1 alex alex    161 9 nov 15.22 go.mod\n-rw-rw-r--. 1 alex alex 135471 9 nov 15.22 go.sum\n-rw-rw-r--. 1 alex alex    337 9 nov 14.17 script.js\n```", "```\n$ go mod tidy\ngo: finding module for package github.com/containers/storage/pkg/unshare\ngo: finding module for package github.com/containers/image/v5/storage\ngo: finding module for package github.com/containers/storage\ngo: finding module for package github.com/containers/image/v5/types\ngo: finding module for package github.com/containers/buildah/define\ngo: finding module for package github.com/containers/buildah\ngo: found github.com/containers/buildah in github.com/containers/buildah v1.23.1\ngo: found github.com/containers/buildah/define in github.com/containers/buildah v1.23.1\ngo: found github.com/containers/image/v5/storage in github.com/containers/image/v5 v5.16.1\ngo: found github.com/containers/image/v5/types in github.com/containers/image/v5 v5.16.1\ngo: found github.com/containers/storage in github.com/containers/storage v1.37.0\ngo: found github.com/containers/storage/pkg/unshare in github.com/containers/storage v1.37.0\n```", "```\n$ cd ~/custombuilder\n[custombuilder]$ ls\npkg  src\n[custombuilder]$ ls -la pkg/\ntotal 0\ndrwxrwxr-x. 1 alex alex  28  9 nov 18.27 .\ndrwxrwxr-x. 1 alex alex  12  9 nov 18.18 ..\ndrwxrwxr-x. 1 alex alex  20  9 nov 18.27 linux_amd64\ndrwxrwxr-x. 1 alex alex 196  9 nov 18.27 mod\n[custombuilder]$ ls -la pkg/mod/\ntotal 0\ndrwxrwxr-x. 1 alex alex 196  9 nov 18.27 .\ndrwxrwxr-x. 1 alex alex  28  9 nov 18.27 ..\ndrwxrwxr-x. 1 alex alex  22  9 nov 18.18 cache\ndrwxrwxr-x. 1 alex alex 918  9 nov 18.27 github.com\ndrwxrwxr-x. 1 alex alex  24  9 nov 18.27 go.etcd.io\ndrwxrwxr-x. 1 alex alex   2  9 nov 18.27 golang.org\n[... omitted output]\n[custombuilder]$ ls -la pkg/mod/github.com/\n[... omitted output]\ndrwxrwxr-x. 1 alex alex  98  9 nov 18.27  containerd\ndrwxrwxr-x. 1 alex alex  20  9 nov 18.27  containernetworking\ndrwxrwxr-x. 1 alex alex 184  9 nov 18.27  containers\ndrwxrwxr-x. 1 alex alex 110  9 nov 18.27  coreos\n[... omitted output]\n```", "```\n  if buildah.InitReexec() {\n    return\n  }\n  unshare.MaybeReexecUsingUserNamespace(false)\n```", "```\nbuildStoreOptions, err := storage.DefaultStoreOptions(unshare.IsRootless(), unshare.GetRootlessUID())\nbuildStore, err := storage.GetStore(buildStoreOptions)\n```", "```\nbuilderOpts := buildah.BuilderOptions{\n  FromImage:        \"node:12-alpine\", // Starting image\n  Isolation:        define.IsolationChroot, // Isolation environment\n  CommonBuildOpts:  &define.CommonBuildOptions{},\n  ConfigureNetwork: define.NetworkDefault,\n  SystemContext:    &types.SystemContext {},\n}\n```", "```\nbuilder, err := buildah.NewBuilder(context.TODO(), buildStore, builderOpts)\n```", "```\nerr = builder.Add(\"/home/node/\", false, buildah.AddAndCopyOptions{}, \"script.js\")\n```", "```\nvar http = require(\"http\");\nhttp.createServer(function(request, response) {\n  response.writeHead(200, {\"Content-Type\": \"text/plain\"});\n  response.write(\"Hello Podman and Buildah friends. This page is provided to you through a container running Node.js version: \");\n  response.write(process.version);\n  response.end();\n}).listen(8080);\n```", "```\nbuilder.SetCmd([]string{\"node\", \"/home/node/script.js\"})\n```", "```\nimageRef, err := is.Transport.ParseStoreReference(buildStore, \"podmanbook/nodejs-welcome\")\n```", "```\nimageId, _, _, err := builder.Commit(context.TODO(), imageRef, define.CommitOptions{})\nfmt.Printf(\"Image built! %s\\n\", imageId)\n```", "```\n[builder]$ go run custombuilder.go \nImage built! e60fa98051522a51f4585e46829ad6a18df704dde774634dbc010baae440 4849\n```", "```\n[builder]$ podman run -dt -p 8080:8080/tcp podmanbook/nodejs-welcome:latest\n747805c1b59558a70c4a2f1a1d258913cae5ffc08cc026c74ad3ac21aab1 8974\n[builder]$ curl localhost:8080\nHello Podman and Buildah friends. This page is provided to you through a container running Node.js version: v12.22.7\n```", "```\n$ ./mvnw package -Pnative -Dquarkus.native.container-build=true -Dquarkus.native.container-runtime=podman\n```", "```\n$ cd examples/\n$ cargo run --example nginx\n$ podman run --rm -it -p 8080:80 nginx_rust\n```", "```\nuse buildah_rs::container::Container;\nfn main() {\n    let mut container = Container::from(\"nginx:1.21\");\n    container.copy(\"html\", \"/usr/share/nginx/html\").unwrap();\n    container.commit(\"nginx_rust\").unwrap();\n}\n```"]