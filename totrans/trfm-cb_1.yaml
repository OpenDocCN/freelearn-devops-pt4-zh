- en: Setting Up the Terraform Environment
  prefs: []
  type: TYPE_NORMAL
- en: Before you start writing the Terraform configuration file, it is necessary to
    install and configure a local development environment. This development environment
    will allow Terraform's configuration file to be written and validated as it is
    developed.
  prefs: []
  type: TYPE_NORMAL
- en: In the recipes in this chapter, we will learn how to download and install Terraform
    manually on a Windows machine, as well as how to install it using a script on
    Windows and Linux. We will also learn how to use Terraform in a Docker container
    before learning how to migrate the Terraform configuration written in version
    0.11 to version 0.13.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and installing Terraform manually
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Terraform using a script on Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Terraform using a script on Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing Terraform in a Docker container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing Terraform configuration in VS Code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrating your Terraform configuration to Terraform 0.13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter does not require that you have any specific technical knowledge.
    We will mainly use graphical user interfaces and simple Linux and Windows scripts.
    However, knowledge of Docker is also recommended so that you can complete the *Executing
    Terraform in a Docker container *recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, for the IDE, we will use Visual Studio Code, which is available for
    free at [https://code.visualstudio.com/](https://code.visualstudio.com/).
  prefs: []
  type: TYPE_NORMAL
- en: The source code for this chapter is available at [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP01](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP01).
  prefs: []
  type: TYPE_NORMAL
- en: Check out the following video to see the code in action: [https://bit.ly/3h9noXz](https://bit.ly/3h9noXz)
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and installing Terraform manually
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to download and install Terraform on a local
    machine under a Windows operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, the only prerequisite is that you're on a Windows operating
    system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Windows File Explorer. Choose a location and create a folder called `Terraform`.
    We will use this to store the Terraform binary; for example, `C:/Terraform`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch a web browser and go to [https://www.terraform.io/downloads.html](https://www.terraform.io/downloads.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll down the page until you reach the package for Windows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ad4b8bc3-201c-4cd7-a9f4-4fa2838ac9d6.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the 64-bit link, which targets the Terraform ZIP package for the Windows
    64-bit operating system. The package will be downloaded locally.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Unzip the content of the downloaded ZIP file into the `Terraform` folder that
    we created in *step 1*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/84aca3c0-bab5-47f9-ac84-7b3e1a577fab.png)'
  prefs: []
  type: TYPE_IMG
- en: The last thing we need to do to install Terraform is configure the Path environment
    variable by adding the path of the Terraform binary folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In File Explorer, right-click on the This PC menu and choose Properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c00b8a0f-5220-4f52-97f4-94aa3c6f6864.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the Advanced system settings link and click the Environment variables
    button of the newly opened window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8fd73ee5-28fe-4d17-b228-b970746dcc04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When provided with a list of environments, select User variables or Systems
    variables (choose this option to apply the environment variable to all users of
    the workstation), and select the Path variable. Then, click on the Edit button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b07e5705-9816-401a-9376-a84ee6950dd2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From the list of paths, add the folder we created; that is, `C:\Terraform\`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ab91057d-03be-4a31-8240-e8f1b3b410b2.png)'
  prefs: []
  type: TYPE_IMG
- en: Finally, we validate all the open windows by clicking on the OK button, which
    is present at the bottom of every open window.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Downloading and installing Terraform is simple, and adding the path of the Terraform
    binary to the `PATH` environment variable makes it possible to execute the Terraform
    command line from any terminal location.
  prefs: []
  type: TYPE_NORMAL
- en: 'After completing all these steps, we can check that Terraform is working properly
    by opening a command-line terminal or PowerShell and executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of executing the preceding command is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50a0e180-e4bb-49e5-a64a-9d262b0c0d12.png)'
  prefs: []
  type: TYPE_IMG
- en: By doing this, the list of Terraform commands will be displayed in the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Terraform using a script on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to install Terraform on a Linux machine using
    a script.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, the only prerequisites are that you are running a Linux
    operating system and that you have an *unzip* utility installed. The `gpg`, `curl`,
    and `shasum` tools must be installed; they are often installed by default on all
    Linux distributions.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a command-line terminal and execute the following script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The source code for this script is also available in this book's GitHub repository: [https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP01/install_terraform_linux.sh](https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP01/install_terraform_linux.sh)
  prefs: []
  type: TYPE_NORMAL
- en: 'After executing this script, we can check the installation of Terraform by
    executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command displays the installed version of Terraform, which means
    we can check that Terraform is correctly installed and that the desired version
    is installed.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this script, in the first line, the `TERRAFORM_VERSION` variable is filled
    in with the Terraform version that we want to install. This variable is only mentioned
    here since we don't want to keep repeating the version of Terraform we're using
    throughout the script.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, the 0.12.29 version of Terraform is used, but we are free to
    modify this.
  prefs: []
  type: TYPE_NORMAL
- en: With the `curl` tool, the script downloads the ZIP file containing the Terraform
    binary. Then, the script checks the security integrity of the packaged. This is called
    `shasum`.
  prefs: []
  type: TYPE_NORMAL
- en: In the last line, the script unzips the downloaded package inside the local
    directory, `/usr/local/bin`, which is already mentioned by default in the `PATH` environment
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check that the version of Terraform you have installed corresponds
    to the one mentioned in the script by executing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This command displays the installed version of Terraform, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8223b9f0-dde6-402f-853d-eb359a76a090.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, here, the version of Terraform we have is 0.12.29.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this Terraform installation script, we have specified the version number
    of Terraform to be installed.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to install the latest version without having to know the version
    number, it is also possible to dynamically retrieve the version number of the
    latest version using the following API: [https://checkpoint-api.hashicorp.com/v1/check/terraform](https://checkpoint-api.hashicorp.com/v1/check/terraform).
    This retrieves information about the current version of Terraform.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows our current version:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f3226ef-3ea6-44ae-bd64-df512298e96a.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that the `current_version` property, which contains the latest Terraform
    version, is a value.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this API, we can perfectly modify the first line of the installation script
    with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The complete script for installing Terraform with this block is available at [https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP01/install_terraform_linux_v2.sh](https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP01/install_terraform_linux_v2.sh).
  prefs: []
  type: TYPE_NORMAL
- en: This block of code uses the `curl` command to retrieve the API return and parses
    its contents to retrieve the value of the `current_version` property with the
    jq tool (available at [https://stedolan.github.io/jq/](https://stedolan.github.io/jq/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, the `terraform --version` command shows whether the latest version
    is installed. If you have installed an old version, this command displays a message
    indicating the latest version:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/be270c25-363b-4b52-a11d-c94de7c90de7.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, we can see that we have installed version 0.12.28 and that the latest
    version is 0.12.29 (at the time of writing this recipe).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, HashiCorp announced that the Terraform binary will soon be available
    in the Linux package manager. For more information, take a look at the following
    article: [https://www.hashicorp.com/blog/announcing-the-hashicorp-linux-repository](https://www.hashicorp.com/blog/announcing-the-hashicorp-linux-repository)
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information on verifying the downloaded package, you can consult the
    HashiCorp documentation at [https://www.hashicorp.com/security.html](https://www.hashicorp.com/security.html).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Terraform using a script on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to install Terraform on a Windows machine
    using a script that uses the **Chocolatey** software package manager.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you'll need to be using a Windows operating system
    and have Chocolatey ([https://chocolatey.org/](https://chocolatey.org/)) installed,
    which is a Windows software package manager.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don''t have Chocolatey installed, you can easily install it by following
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a PowerShell terminal in administrator mode, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0ad32f94-49a2-4063-99bb-d9bef24123c1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, execute this following script in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The complete installation documentation for Chocolatey is available at [https://chocolatey.org/install](https://chocolatey.org/install).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a PowerShell command-line terminal in administrator mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the execution of this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69b6593e-4d4f-46b9-829d-a11250c1bcf4.png)'
  prefs: []
  type: TYPE_IMG
- en: The `-y` option is optional. It allows us to accept the license agreement automatically.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When Chocolatey installs the Terraform package, it executes the scripts in the
    package source code, available at [https://github.com/jamestoyer/chocolatey-packages/tree/master/terraform](https://github.com/jamestoyer/chocolatey-packages/tree/master/terraform).
  prefs: []
  type: TYPE_NORMAL
- en: Then, by executing the script available at [https://github.com/jamestoyer/chocolatey-packages/blob/master/terraform/tools/chocolateyInstall.ps1](https://github.com/jamestoyer/chocolatey-packages/blob/master/terraform/tools/chocolateyInstall.ps1),
    Chocolatey downloads the Terraform ZIP file into the binary directory of Chocolatey's
    packages, which is already included in the `PATH` environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When upgrading Terraform, it is possible to upgrade it directly with Chocolatey
    by executing the `choco upgrade -y terraform` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the `choco install` command installs the latest version of the
    mentioned package. It is also possible to specify a specific version by adding
    the `--version` option to the command, which in our case would give us, for example,
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we have specified that we want to install version `0.12.28`
    of Terraform and not the latest version.
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that the Terraform package from Chocolatey can have a time lag regarding
    the latest official version of Terraform, while in the Linux script, as shown
    in the *Installing Terraform on Linux *recipe, you can specify the latest version
    that has just been released.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To learn about all the commands provided with Chocolatey, I suggest reading
    the following documentation: [https://chocolatey.org/docs/commands-reference#commands](https://chocolatey.org/docs/commands-reference#commands.)
  prefs: []
  type: TYPE_NORMAL
- en: Executing Terraform in a Docker container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipes of this chapter, we discussed how to install Terraform
    locally, either manually or via a script, depending on the local operating system.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we will learn how to run Terraform in a Docker container, which
    will allow us to enjoy the following benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: There is no need to install Terraform locally.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can have a Terraform runtime environment independent of the local operating
    system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can test our Terraform configuration with different versions of Terraform.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you'll need to know about Docker and its commands,
    as well as how to write Dockerfiles. Please read the documentation for more information: [https://docs.docker.com/get-started/overview/](https://docs.docker.com/get-started/overview/)
  prefs: []
  type: TYPE_NORMAL
- en: On our local computer, we installed Docker using a tool called Docker Desktop
    for Windows.
  prefs: []
  type: TYPE_NORMAL
- en: For Docker installation guides for other operating systems, please read the
    Docker installation documentation at [https://docs.docker.com/get-docker/](https://docs.docker.com/get-docker/).
  prefs: []
  type: TYPE_NORMAL
- en: We also have a Terraform configuration file already written, which will not
    be detailed here. This will be executed in our Docker container.
  prefs: []
  type: TYPE_NORMAL
- en: You will also need the respective Terraform commands, `init`, `plan`, and `apply`,
    which will not be explained in the context of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the root of the folder that contains the Terraform configuration, we need
    to create a Dockerfile that contains the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This source code is also available at [https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP01/terraform-docker/Dockerfile](https://github.com/PacktPublishing/Terraform-Cookbook/blob/master/CHAP01/terraform-docker/Dockerfile).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to create a new Docker image by executing the `docker build`
    command in a terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we need to instantiate a new container of this image. To do this, we
    will execute the `docker run` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can execute the Terraform commands in our container by using the following
    commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows a part of the output of executing these commands
    (`terraform plan`):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4f62c061-ebe1-45fb-8708-29bcbe3e179e.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In *step 1*, we write the composition of the Docker image in the Dockerfile.
    We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: We use a Golang base image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We initialize the `TERRAFORM_VERSION` variable with the version of Terraform
    to be installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We write the same Terraform installation script we wrote in the *Installing
    Terraform on Linux* recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We copy the Terraform configuration from our local file into a new folder located
    in the image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We specify that our workspace will be our new folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, in *steps 2* and *3*, we create a Docker `terraform-code` image with a `v1.0` tag.
    This tag is used to version our Terraform configuration. Then, we create a `tfapp`
    instance of this image, which runs with the bash tool.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in *step 4*, in the `tfapp` instance, we execute the Terraform commands
    in our container workspace.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we studied how to write, build, and use a Docker image that
    contains the Terraform binary. With this, it is possible to complete this image
    with other tools such as **Terragrunt**, which are also used to develop the Terraform
    configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to use just Terraform, you can use the official image provided by
    HashiCorp. This is public and available on Docker Hub at [https://hub.docker.com/r/hashicorp/terraform/](https://hub.docker.com/r/hashicorp/terraform/).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The full Docker commands documentation at [https://docs.docker.com/engine/reference/run/](https://docs.docker.com/engine/reference/run/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For an introduction to Docker, please refer to the book *Learning DevOps*, which
    is available at [https://www.packtpub.com/cloud-networking/learning-devops](https://www.packtpub.com/cloud-networking/learning-devops).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing Terraform configuration in VS Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing a Terraform configuration file does not require a special code editor.
    However, popular code editors have adapted and now offer plugins that simplify
    writing such a file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we will focus on Visual Studio Code, which has the following
    benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: It's cross-platform, which means it can be installed on Windows, Linux, and
    macOS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's free of charge.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has a multitude of extensions that cover all the needs of developers on a
    daily basis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to configure Visual Studio Code so that we
    can write the Terraform configuration. We'll also see how much faster it is to
    write code in this way.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you need to have Visual Studio Code installed on your local
    machine. You can install it by going to [https://code.visualstudio.com/](https://code.visualstudio.com/).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To use Visual Studio Code with Terraform, we need to install the respective
    extension and configure it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install this extension, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Visual Studio Code and click on the extension tab. This can be found on
    the sidebar, on the left-hand side of the editor, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4d3aa041-07b5-4f8e-b8ac-f3400be70345.png)'
  prefs: []
  type: TYPE_IMG
- en: Then, we search for the extension by using the `Terraform` keyword.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the first extension of the list, called Terraform. This is published by
    *HashiCorp*. Do this by clicking on the Install button of the extension:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2d837492-fb0d-4683-8eef-48aaf83799ea.png)'
  prefs: []
  type: TYPE_IMG
- en: Reload Visual Studio Code to apply the extension.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the first part of this recipe, we installed the Terraform extension for Visual
    Studio Code.
  prefs: []
  type: TYPE_NORMAL
- en: When searching for Terraform extensions, several will appear, but the one we
    chose is one of the most powerful in my opinion.
  prefs: []
  type: TYPE_NORMAL
- en: Once installed, this extension offers a lot of functionalities for editing Terraform's
    configuration, such as autocompletion, validating the configuration, syntax for `tflint`,
    code formatting, links to the official documentation, and a module explorer.
  prefs: []
  type: TYPE_NORMAL
- en: This component allows Visual Studio Code to function better with Terraform 0.12 –
    at least when it comes to the extension's functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the extension has been installed and configured, we can write the Terraform
    configuration in our `main.tf` file. Here, we have some very useful features we
    can use to develop the Terraform configuration, some of which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Syntax highlighting:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/496f28aa-713f-4670-b687-a60c37cc0eaf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Autocompletion for resources and properties:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/7cca0dd5-3227-4dc2-afdc-be2fe4c97f8d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Real-time code validation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/de926f81-05dc-46bf-b0ea-7ee31e2a20c6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The ability to display the number of references, along with a link to view
    them:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/2e9d332f-8f97-4bac-9e87-01fce98030f5.png)'
  prefs: []
  type: TYPE_IMG
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To see the complete list of features for this extension, please refer to the
    following documentation: [https://marketplace.visualstudio.com/items?itemName=HashiCorp.terraform](https://marketplace.visualstudio.com/items?itemName=HashiCorp.terraform),
    and its change log: [https://marketplace.visualstudio.com/items/HashiCorp.terraform/changelog](https://marketplace.visualstudio.com/items/HashiCorp.terraform/changelog)[.](https://marketplace.visualstudio.com/items?itemName=HashiCorp.terraform)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All Visual Studio Code extensions related to Terraform can be found at [https://marketplace.visualstudio.com/search?term=terraform&target=VSCode&category=All%20categories&sortBy=Relevance](https://marketplace.visualstudio.com/search?term=terraform&target=VSCode&category=All%20categories&sortBy=Relevance).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To read more about the support provided for this extension by HashiCorp, please
    go to [https://www.hashicorp.com/blog/supporting-the-hashicorp-terraform-extension-for-visual-studio-code/](https://www.hashicorp.com/blog/supporting-the-hashicorp-terraform-extension-for-visual-studio-code/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migrating your Terraform configuration to Terraform 0.13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Officially released in May 2019, version 0.12 of Terraform has brought many
    new features to the language, but also changes, and during this summer 2020, the
    new Terraform version 0.13 has been released, also providing new features and
    some changes.
  prefs: []
  type: TYPE_NORMAL
- en: We must take these changes into account before we upgrade the code.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will discuss how to verify that our Terraform configuration
    is compatible with version 0.12\. After that, we will learn how to migrate our
    Terraform configuration from version 0.11 to version 0.12 and then to version
    0.13.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before migrating your code  from version 0.11 to the latest version (currently
    0.13), you will need to have code that works with the latest version of Terraform
    0.11, which is 0.11.14\. You can download this version from [https://releases.hashicorp.com/terraform/0.11.14/](https://releases.hashicorp.com/terraform/0.11.14/).
  prefs: []
  type: TYPE_NORMAL
- en: It is important to know that if your Terraform configuration is in version 0.11,
    it is not possible to migrate it directly to 0.13\. You will first have to upgrade
    to 0.12 and then migrate to 0.13.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, before any migration, it is strongly advised to read the upgrade
    documentation provided by HashiCorp (here for 0.12, [https://www.terraform.io/upgrade-guides/0-12.html](https://www.terraform.io/upgrade-guides/0-12.html),
    and here for 0.13, [https://github.com/hashicorp/terraform/blob/master/website/upgrade-guides/0-13.html.markdown](https://github.com/hashicorp/terraform/blob/master/website/upgrade-guides/0-13.html.markdown)).
    This is because in the upgrade process, as we will study in this recipe, many
    elements are migrated automatically, but others will have to be done manually.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, it is also recommended by HashiCorp, before performing the migration
    process, to commit its code in a source code manager (for example, Git) in order
    to be able to visualize the code changes brought by the migration.
  prefs: []
  type: TYPE_NORMAL
- en: The code source (version 0.11) used for this recipe is available here: [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP01/tf011](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP01/tf011)
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The upgrade of the Terraform configuration from version 0.11 to version 0.13
    takes place in two steps, First the code has to be migrated to 0.12, and then
    be migrated to 0.13.
  prefs: []
  type: TYPE_NORMAL
- en: 'To migrate our  Terraform configuration from version 0.11 to version 0.12,
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before migrating this configuration to version 0.12, we must verify that it
    is compatible with this version. To do this, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Terraform 0.11.14, in a terminal, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of executing the preceding command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8639a559-e442-4965-8adc-80b2409cca09.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, our Terraform configuration is compatible with Terraform version
    0.12\. Now, we can migrate it.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to install the latest version of Terraform 0.12 manually, as described
    in the *Downloading and installing Terraform manually* recipe. We can also do
    this via a script, according to our operating system, as shown in the *Installing
    Terraform on Linux* and *Installing Terraform using a script on Windows* recipes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the folder that contains our code, we execute the `init` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we confirm the migration by answering `yes` when prompted to enter
    a value, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ae9b39b4-a4af-4175-b198-e4821473d41e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, to migrate our Terraform configuration from version 0.12 to version 0.13,
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install the latest version of Terraform 0.13.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Exactly as before for 0.12, run the `terraform 0.13upgrade` command to upgrade
    the configuration to 0.13:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/950b79fb-4466-4d12-8e78-a46e141905cb.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, we verified that our Terraform configuration is compatible with
    the language evolution (HCL 2) included in Terraform 0.12.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we installed Terraform 0.12 locally and started the migration process
    by executing the `terraform init` command, which is necessary to download the
    different providers that will be called in our code.
  prefs: []
  type: TYPE_NORMAL
- en: We migrated the Terraform configuration to the 0.12 version using the `terraform
    0.12upgrade` command, which upgrades the Terraform configuration directly.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, to upgrade the Terraform configuration to the 0.13 version, we installed
    the Terraform 0.13 binary and executed the command `terraform 0.13upgrade`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please note that the migration procedure only changes the current Terraform
    configuration. If our Terraform configuration calls for modules, it is necessary
    to migrate the code of the modules beforehand.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information on the migration procedure for Terraform to version 0.12,
    please refer to the technical documentation at [https://www.terraform.io/upgrade-guides/0-12.html](https://www.terraform.io/upgrade-guides/0-12.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'To find out more about the evolution of Terraform and the changes that were
    made in this new major version, take a look at the following documentation and
    related articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.hashicorp.com/resources/a-2nd-tour-of-terraform-0-12](https://www.hashicorp.com/resources/a-2nd-tour-of-terraform-0-12)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.hashicorp.com/blog/announcing-terraform-0-12/](https://www.hashicorp.com/blog/announcing-terraform-0-12/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, the following is the official repository for Terraform: [https://github.com/hashicorp/terraform-guides/tree/master/infrastructure-as-code/terraform-0.12-examples](https://github.com/hashicorp/terraform-guides/tree/master/infrastructure-as-code/terraform-0.12-examples).
    It contains multiple code examples for Terraform 0.12, all of which we will look
    at throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: Regarding the Terraform 0.13, the upgrade guide is available here – [https://github.com/hashicorp/terraform/blob/master/website/upgrade-guides/0-13.html.markdown](https://github.com/hashicorp/terraform/blob/master/website/upgrade-guides/0-13.html.markdown),
    and the change log is available here – [https://github.com/hashicorp/terraform/blob/master/CHANGELOG.md](https://github.com/hashicorp/terraform/blob/master/CHANGELOG.md).
  prefs: []
  type: TYPE_NORMAL
