- en: Building Dynamic Environments with Terraform
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to use Terraform's language concepts
    to provision an infrastructure efficiently with Terraform. One of the advantages
    of **Infrastructure as Code** (**IaC**) is that it allows you to provision infrastructure
    on a large scale much faster than manual provisioning.
  prefs: []
  type: TYPE_NORMAL
- en: When writing IaC, it is also important to apply the development and clean code
    principles that developers have already acquired over the years.
  prefs: []
  type: TYPE_NORMAL
- en: One of these principles is **Don't Repeat Yourself** (**DRY**), which means
    not duplicating the code ([https://thevaluable.dev/dry-principle-cost-benefit-example/](https://thevaluable.dev/dry-principle-cost-benefit-example/)).
    In this chapter, we will learn how to use expressions from the Terraform language,
    such as count, maps, collections, and dynamic. We will learn that these notions
    will allow us to write simple Terraform configuration to provide an infrastructure
    with multiple resources without having to duplicate code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning multiple resources with the count property
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a table of key-value variables with maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looping over object collections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating multiple blocks with dynamic expressions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter does not have any technical prerequisites. However, it is advisable
    to have already read the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The source code of this chapter is available at [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP03](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP03).
  prefs: []
  type: TYPE_NORMAL
- en: Check out the following video to see the Code in Action: [https://bit.ly/2R5GSBN](https://bit.ly/2R5GSBN)
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning multiple resources with the count property
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In corporate scenarios, there is a need to provide infrastructure and to take
    into account the so-called horizontal scalability, that is, *N* identical resources that
    will reduce the load on individual resources (such as compute instances) and the
    application as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: 'The challenge we will have to face is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Writing Terraform configuration that does not require duplicate code for each
    instance of identical resources to be provisioned
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Being able to rapidly increase or reduce the number of instances of these resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will see in this recipe how Terraform makes it possible to provision *N*
    instances of resources quickly and without the duplication of code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To begin, we will use a Terraform configuration that allows us to provision
    one Azure App Service, which is in a `main.tf` file and of which the following
    is an extract:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The purpose of this recipe is to apply and modify this Terraform configuration
    to provision *N* Azure App Service instances identical to the one already described
    in the base code, with just a slight difference in the names, which use an incremental
    index number starting at `1`.
  prefs: []
  type: TYPE_NORMAL
- en: The source code of this recipe is available at [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP03/count](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP03/count).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create multiple identical resources, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `variables.tf` file, we add the following variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `terraform.tfvars` file, we give a value for this new variable as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `main.tf` file, we modify the resource code of `azurerm_app_service`
    in the following way:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '(Optional:) In a new `outputs.tf` file, we add the output values with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, we add an `nb_webapp` variable, which will contain the number of
    Azure App Service instances to write, which we then instantiate in *step 2* in
    the `terraform.tfvars` file.
  prefs: []
  type: TYPE_NORMAL
- en: Then in *step 3*, in the `azurerm_app_service` resource, we add the Terraform
    `count` property (which is available for all resources and data Terraform blocks)
    and takes as a value the `nb_webapp` variable created previously.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, in the `name` of the `azurerm_app_service` resource, we add the suffix
    with the current index of the count that we increment by 1 (starting from 1, and
    not from 0, to reflect the fact that count indexes start with zero) with the Terraform
    instruction `count.index + 1`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, and optionally, in *step 4*, we add an output that will contain the
    names of the App Service instances that have been provisioned.
  prefs: []
  type: TYPE_NORMAL
- en: When executing the `terraform plan` command of this recipe with the `nb_webapp`
    variable equal to `2`, we can see that the two App Service instances have been
    provisioned.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshots show an extract of this `terraform plan` command,
    with the first image displaying the preview changes for the first App Service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3e294bf5-8210-46ac-ba62-6042164a7576.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This following screenshot, which is the continuation of the `terraform plan`
    command, displays the preview changes of the second App Service instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0a4c99f5-a475-4074-a113-42a4eb585787.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And when the changes are applied, the output is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e0fdc725-947e-4b8c-852e-33305e2b1ccd.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see in the output, we have a list containing the names of the two
    generated App Service instances.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we discussed in the *Manipulating variables* recipe in the previous chapter,
    we can also use the `-var` option of the `terraform plan` and `apply` commands
    to very easily increase or decrease the number of instances of this resource without
    having to modify the Terraform configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, for example, we could use the following `plan` and `apply` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: However, with this option, we lose the benefits of IaC, which is the fact of
    writing everything in code and thus having a history of changes made to the infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, it should be noted that lowering the `nb_webapp` value removes the
    last resources from the index, and it is not possible to remove resources that
    are in the middle of the index, which has been improved with the `for_each` expression that
    we will see in the *Looping over object collections* recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, thanks to the `count` property we have just seen and the condition
    expressions we have studied in the *Writing conditional operations* recipe of
    [Chapter 2](3099c9ac-8c38-4e7d-8146-411fac26a2b7.xhtml)*, Writing Terraform Configuration*,
    we can make the provisioning of resources optional in a dynamic way, as shown
    in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In this code, we have indicated to Terraform that if the `use_appinsight` variable is
    `true`, then the count property is `1`, which will allow us to provision one Azure
    Application Insights resource. In the opposite case, where the `use_appinsight`
    variable is `false`, the `count` property is `0` and in this case, Terraform does
    not provide an Application Insight resource instance.
  prefs: []
  type: TYPE_NORMAL
- en: And so Terraform configuration can be put in a generic way for all environments
    or all applications and make their provisioning dynamic and conditional according
    to variables.
  prefs: []
  type: TYPE_NORMAL
- en: This technique, also called **feature flags**, is applied in the development
    world, but we see here that we can also apply it to IaC.
  prefs: []
  type: TYPE_NORMAL
- en: As we have seen in this recipe, the `count` property allows you to quickly provision
    several resources that are identical in their characteristics.
  prefs: []
  type: TYPE_NORMAL
- en: We will study in the *Looping over object collections* recipe of this chapter
    how to provision several resources of the same nature, but with different properties.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information on the `count` property, refer to the documentation at [https://www.terraform.io/docs/configuration/resources.html#count-multiple-resource-instances-by-count](https://www.terraform.io/docs/configuration/resources.html#count-multiple-resource-instances-by-count).
  prefs: []
  type: TYPE_NORMAL
- en: Using a table of key-value variables with maps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this book, we have studied sample code using standard variable types
    (string, numeric, or Boolean). However, the Terraform language has other types
    of variables such as lists, maps, tuples, and even more complex object variables.
  prefs: []
  type: TYPE_NORMAL
- en: Among these variable types are maps, which are represented by a collection of
    key-value elements and are widely used to write dynamic and scalable Terraform
    configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Maps can have several uses, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: To put all the properties of a block in a Terraform resource into a single variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To avoid the declaration of several variables of the **same type** and thus
    put all the values of these variables in a single variable of the `map` type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To have a key-value reference table of elements that will be used in the Terraform
    configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, we will see a simple and practical case of using a map variable
    to dynamically define all the tags of an Azure resource.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we start with a basic Terraform configuration that allows us
    to provision a Resource Group and an App Service instance in Azure.
  prefs: []
  type: TYPE_NORMAL
- en: The source code for this recipe is available at [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP03/map](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP03/map).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we will illustrate the use of maps in two use cases, which
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The implementation of the tags of this Resource Group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The App settings properties of the App Service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `variables.tf` file, we add the following variable declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, in the `terraform.tfvars` file, we add this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we modify the `main.tf` file with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, we have declared two variables for which we have specified their
    type, which is `map (string)`. That is to say, it will be composed of elements
    of the key-value type and the value is in *string* format. Moreover, given that
    these variables can be omitted and their values are therefore optional, we have
    assigned them an empty default value, which is `{}` for `map`.
  prefs: []
  type: TYPE_NORMAL
- en: Then, in *step 2*, we defined the values of these two variables with the tags
    for the resources, as well as the `app_settings` for the App Service.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in *step 3*, we use these variables in the Terraform configuration
    that provides the Resource Group and the App Service.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a sample of the execution of the `terraform
    plan` command in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0bbda167-4c4f-4eb5-ad9f-9860a7ffeea7.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see in the previous screenshot that the `app_settings` and `tags` properties
    are populated with the values of the `map` variables.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maps thus allow us to simplify the use of blocks of objects in resources, but
    be careful – it is not possible to put a variable inside `map`. A `map` type variable
    is therefore to be considered as a single block of variables.
  prefs: []
  type: TYPE_NORMAL
- en: To go further, we can see that it is also possible to merge maps; that is, to
    merge two maps, we can use the `merge` function, which is native to Terraform.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps show how to use this function to merge the app settings
    properties of the App Service:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `variables.tf` file, we create a `custom_app_settings` variable that
    will contain the custom app settings provided by the user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `terraform.tfvars` file, we instantiate this variable with a custom
    map:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in the `main.tf` file, we use a local variable to define the default
    app settings, and in the `azurerm_app_service` resource, we use the `merge` function
    to merge the default app settings with the custom app settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we have defined default app settings properties for the
    Azure App Service, and the user can enrich these settings if needed by adding
    custom app settings.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, it is also possible to create a `map` object on the fly, directly
    in the code, without having to use a variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, we can use the `{....}` syntax integrated to Terraform, which takes
    in a list of key values as parameters, as seen in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In this recipe, we studied the use of maps. But if we want to use more complex
    maps with key-values of different types, then we will use object variables, as
    explained in the documentation at [https://www.terraform.io/docs/configuration/types.html#object-](https://www.terraform.io/docs/configuration/types.html#object-).
  prefs: []
  type: TYPE_NORMAL
- en: In the following recipe, we will discuss how to iterate on the list of key-value
    elements that constitute a map variable.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The documentation relating to the merge function is available at [https://www.terraform.io/docs/configuration/functions/merge.html](https://www.terraform.io/docs/configuration/functions/merge.html).
  prefs: []
  type: TYPE_NORMAL
- en: Looping over object collections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen in the previous recipes of the chapter the use of the `count` property,
    which allows us to provision *N* identical resources, as well as the use of map
    variables, which allow key-value objects.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will discuss how to provision *N* resources of the same type
    but with different properties using the loop functionalities included in Terraform
    since version 0.12.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started, we start with a basic Terraform configuration that allows you
    to deploy a single App Service in Azure.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic Terraform configuration is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The source code for this recipe is available at [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP03/list_map](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP03/list_map).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `variables.tf` file, we add the following Terraform configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `terraform.tfvars` file, we add the following configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `main.tf` file, we modify the code of the App Service with the following
    configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, in the `outputs.tf` file, we add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, we declared a new variable of type `any`, that is, we do not specify
    its type because it is complex.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth noting that complex variables can be declared. It does make the
    code more verbose, but it can be very helpful in validation.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 2*, we instantiate this variable with a list of map objects that will
    be the properties of each App Service. In this list, we have two App Service instances
    in which we specify the properties in the form of a map with the name, version
    of the framework, the Azure region location, and the name of the database server
    of the application that will be used in the App Service.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, in the `azurerm_app_service` resource, we don't use the `count`
    property anymore, but rather the `for_each` expression (which is included in Terraform
    0.12), which allows us to loop on lists.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, for each property of `azurerm_app_service` resource, we can use the short
    expression `each.value["<property name>"]` or the `lookup` function integrated
    in Terraform that takes in the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The current element of the `for_each` expression with `each.value`, thus the
    line of the list.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The name of the property of the map, which in our sample is `location`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then comes the third parameter of this lookup function, which is not mandatory.
    It allows you to specify the value to use if the property is not present in the
    map. We used the Azure West Europe region, which is the default value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, in *step 4*, we created an output that uses the `for` expression to
    iterate on the list of resources that have been provisioned, and export their
    names as output.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result of this output is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/45320b9d-4891-496d-800f-0f8ca252a22b.png)'
  prefs: []
  type: TYPE_IMG
- en: In the previous screenshot, we can see the result of the output, which displays
    the name of two provisioned Azure App Service instances in the console.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we have learned expressions and functions from the Terraform
    language that allows for the provisioning of resource collections.
  prefs: []
  type: TYPE_NORMAL
- en: I advise you to take a good look at the articles and documentation on the `for`
    and `for_each` expressions. Regarding the `lookup` and `element` functions, they
    can be used, but it is preferable to use the native syntax instead (such as `var_name[42]` and `var_map["key"]`)
    to access elements of a map, list, or set.
  prefs: []
  type: TYPE_NORMAL
- en: It is obvious that in this recipe, we have used simple resources such as Azure
    App Service, but these methods can also be applied to more property-rich resources
    such as virtual machines.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Documentation on loops with `for` and `for_each` is available at [https://www.terraform.io/docs/configuration/resources.html](https://www.terraform.io/docs/configuration/resources.html),
    and the article on these loops can be found at [https://www.hashicorp.com/blog/hashicorp-terraform-0-12-preview-for-and-for-each/](https://www.hashicorp.com/blog/hashicorp-terraform-0-12-preview-for-and-for-each/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The documentation on the `lookup` function is available at [https://www.terraform.io/docs/configuration/functions/lookup.html](https://www.terraform.io/docs/configuration/functions/lookup.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating multiple blocks with dynamic expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Terraform resources are defined by the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: Properties that are in the form `property name = value`, which we have seen
    several times in this book
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blocks that represent a grouping of properties, such as the `site_config` block
    inside the `azurerm_app_service` resource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on the Terraform resource, a block can be present once or even multiple
    times in the same resource, such as the `security_rule` block inside the `azurerm_network_security_group` resource
    (see the documentation, for example, at [https://www.terraform.io/docs/providers/azurerm/r/network_security_group.html](https://www.terraform.io/docs/providers/azurerm/r/network_security_group.html)).
  prefs: []
  type: TYPE_NORMAL
- en: Until Terraform version 0.12, it was not possible to make these blocks present
    several times in the same resource dynamically using, for example, a variable
    of `list` type.
  prefs: []
  type: TYPE_NORMAL
- en: One of the great novelties of Terraform 0.12 is the new `dynamic` expression
    that allows us to loop the blocks in resources.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will see how to use the dynamic expression to provision an `azurerm_network_security_group`
    resource in Azure, which contains a list of security rules.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started, we don't need any basic Terraform configuration. In this recipe,
    we will use a Terraform file that allows us to create an Azure Resource Group
    in which we will create a Network Security Group.
  prefs: []
  type: TYPE_NORMAL
- en: The source code for this recipe is available at [https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP03/dynamics](https://github.com/PacktPublishing/Terraform-Cookbook/tree/master/CHAP03/dynamics).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use dynamic expressions, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `variables.tf` file, we add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `terraform.tfvars` file, we add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `main.tf` file, we add the code for the Network Security Group with
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, we create an `nsg_rules` variable of type `any`, which will contain
    the list of rules in map format.
  prefs: []
  type: TYPE_NORMAL
- en: Then, in *step 2*, we instantiate this `nsg_rules` variable with the list of
    rules and their properties.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in *step 3*, in the `azurerm_network_security_group` resource, we add
    the `dynamic` instruction, which allows us to generate *N* blocks of `security_rule`.
  prefs: []
  type: TYPE_NORMAL
- en: In this `dynamic` Terraform expression, we make a `for_each` loop (as seen in
    the *Looping over object collections* recipe earlier in this chapter), which will
    iterate on the lines of the `nsg_rules` variable and will map each property of
    the resource to the maps of the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'This following screenshot shows the execution of the `terraform plan` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8174d0fc-466c-40fe-b2ef-076abf3ca640.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see the list of security rules in the preceding output.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to render the presence of a block conditionally, you can also use
    the conditions in the `dynamic` expression, as shown in the following code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In this example, in the `for_each` expression of the `dynamic` expression, we
    have a condition that returns a list with one element if the local value, `use_boot_diagnostics`,
    is true. Otherwise, this condition returns an empty list that will not make the
    `boot_diagnostics` block appear in the `azurerm_virtual_machine` resource.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Documentation on dynamic expressions is available at [https://www.terraform.io/docs/configuration/expressions.html#dynamic-blocks](https://www.terraform.io/docs/configuration/expressions.html#dynamic-blocks).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another example of a Terraform guide on dynamic expressions is available at [https://github.com/hashicorp/terraform-guides/tree/master/infrastructure-as-code/terraform-0.12-examples/advanced-dynamic-blocks](https://github.com/hashicorp/terraform-guides/tree/master/infrastructure-as-code/terraform-0.12-examples/advanced-dynamic-blocks).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
